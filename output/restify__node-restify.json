{"repo":"restify/node-restify","url":"https://github.com/restify/node-restify","branch":"master","configs":[{"package":"restify","lang":"js","dir":"test","framework":"mocha","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"accept ok","suites":["accept parser"],"updatePoint":{"line":42,"column":15,"index":998},"line":42,"code":"  it('accept ok', function (done) {\n    CLIENT.get('/', function (err, _, res) {\n      assert.ifError(err);\n      assert.equal(res.statusCode, 200);\n      done();\n    });\n  });","file":"plugins/accept.test.js","skipped":false,"dir":"test"},{"name":"accept not ok (406)","suites":["accept parser"],"updatePoint":{"line":49,"column":25,"index":1185},"line":49,"code":"  it('accept not ok (406)', function (done) {\n    var opts = {\n      path: '/',\n      headers: {\n        accept: 'foo/bar'\n      }\n    };\n    CLIENT.get(opts, function (err, _, res) {\n      assert.ok(err);\n      assert.equal(err.name, 'NotAcceptableError');\n      assert.equal(res.statusCode, 406);\n      done();\n    });\n  });","file":"plugins/accept.test.js","skipped":false,"dir":"test"},{"name":"GH-1619: should fire NotAcceptable event on server","suites":["accept parser"],"updatePoint":{"line":63,"column":56,"index":1543},"line":63,"code":"  it('GH-1619: should fire NotAcceptable event on server', function (done) {\n    var opts = {\n      path: '/',\n      headers: {\n        accept: 'foo/bar'\n      }\n    };\n    var evtFired = false;\n    SERVER.on('NotAcceptable', function (req, res, err, cb) {\n      evtFired = true;\n      return cb();\n    });\n    CLIENT.get(opts, function (err, _, res) {\n      assert.ok(err);\n      assert.equal(err.name, 'NotAcceptableError');\n      assert.equal(res.statusCode, 406);\n      assert.isTrue(evtFired);\n      return done();\n    });\n  });","file":"plugins/accept.test.js","skipped":false,"dir":"test"},{"name":"audit logger should print log by default","suites":["audit logger"],"updatePoint":{"line":51,"column":46,"index":1406},"line":51,"code":"  it('audit logger should print log by default', function (done) {\n    var collectLog;\n    SERVER.on('after', restify.plugins.auditLogger({\n      log: pino({\n        name: 'audit'\n      }),\n      server: SERVER,\n      event: 'after'\n    }));\n    SERVER.get('/foo', function (req, res, next) {\n      res.send(200, {\n        testdata: 'foo'\n      });\n      next();\n    });\n    SERVER.get('/bar', function (req, res, next) {\n      res.send(200, {\n        testdata: 'bar'\n      });\n      next();\n    });\n    SERVER.get('/auditrecords', function (req, res, next) {\n      // strip log records of req/res as they will cause\n      // serialization issues.\n      var data = LOG_BUFFER.records.map(function (record) {\n        return lodash.omit(record, 'req', 'res');\n      }, []);\n      res.send(200, data);\n      next();\n    });\n    collectLog = function () {\n      CLIENT.get('/auditrecords', function (err, req, res) {\n        assert.ifError(err);\n        var data = JSON.parse(res.body);\n        assert.ok(data);\n        data.forEach(function (d) {\n          assert.isNumber(d.latency);\n        });\n        done();\n      });\n    };\n    vasync.forEachParallel({\n      func: function clientRequest(urlPath, callback) {\n        CLIENT.get(urlPath, function (err, req, res) {\n          assert.ifError(err);\n          assert.ok(JSON.parse(res.body));\n          return callback(err, JSON.parse(res.body));\n        });\n      },\n      inputs: ['/foo', '/bar']\n    }, function (err, results) {\n      assert.ifError(err);\n      collectLog();\n    });\n  });","file":"plugins/audit.test.js","skipped":false,"dir":"test"},{"name":"test audit logger emit","suites":["audit logger"],"updatePoint":{"line":106,"column":28,"index":2929},"line":106,"code":"  it('test audit logger emit', function (done) {\n    SERVER.once('after', restify.plugins.auditLogger({\n      log: pino({\n        name: 'audit'\n      }),\n      server: SERVER,\n      event: 'after'\n    }));\n    SERVER.once('audit', function (data) {\n      assert.ok(data);\n      assert.ok(data.req_id);\n      assert.equal(data.req.url, '/audit', 'request url should be /audit');\n      assert.isNumber(data.latency);\n      done();\n    });\n    SERVER.get('/audit', [restify.plugins.queryParser(), function (req, res, next) {\n      res.send();\n      next();\n    }]);\n    CLIENT.get('/audit', function (err, req, res) {\n      assert.ifError(err);\n    });\n  });","file":"plugins/audit.test.js","skipped":false,"dir":"test"},{"name":"test custom serializers","suites":["audit logger"],"updatePoint":{"line":129,"column":29,"index":3586},"line":129,"code":"  it('test custom serializers', function (done) {\n    SERVER.once('after', restify.plugins.auditLogger({\n      log: pino({\n        name: 'audit'\n      }),\n      event: 'after',\n      serializers: {\n        req: function (req) {\n          return {\n            fooReq: 'barReq'\n          };\n        },\n        res: function (res) {\n          return {\n            fooRes: 'barRes'\n          };\n        }\n      }\n    }));\n    SERVER.get('/audit', function aTestHandler(req, res, next) {\n      res.send('');\n      return next();\n    });\n    SERVER.on('after', function () {\n      var record = LOG_BUFFER.records && LOG_BUFFER.records[0];\n      assert.equal(record.req.fooReq, 'barReq');\n      assert.equal(record.res.fooRes, 'barRes');\n      done();\n    });\n    CLIENT.get('/audit', function (err, req, res) {\n      assert.ifError(err);\n    });\n  });","file":"plugins/audit.test.js","skipped":false,"dir":"test"},{"name":"should log handler timers","suites":["audit logger"],"updatePoint":{"line":162,"column":31,"index":4434},"line":162,"code":"  it('should log handler timers', function (done) {\n    var WAIT_IN_MILLISECONDS = 1100;\n    SERVER.once('after', restify.plugins.auditLogger({\n      log: pino({\n        name: 'audit'\n      }),\n      event: 'after'\n    }));\n    SERVER.get('/audit', function aTestHandler(req, res, next) {\n      req.startHandlerTimer('audit-sub');\n      setTimeout(function () {\n        req.endHandlerTimer('audit-sub');\n        res.send('');\n        return next();\n      }, WAIT_IN_MILLISECONDS);\n      // this really should be 1000 but make it 1100 so that the tests\n      // don't sporadically fail due to timing issues.\n    });\n\n    SERVER.on('after', function () {\n      var record = LOG_BUFFER.records && LOG_BUFFER.records[0];\n\n      // check timers\n      assert.ok(record, 'no log records');\n      assert.equal(LOG_BUFFER.records.length, 1, 'should only have 1 log record');\n      assertIsAtLeastWithTolerate(record.req.timers.aTestHandler, WAIT_IN_MILLISECONDS * MILLISECOND_IN_MICROSECONDS, TOLERATED_MICROSECONDS, 'atestHandler');\n      assertIsAtLeastWithTolerate(record.req.timers['aTestHandler-audit-sub'], WAIT_IN_MILLISECONDS * MILLISECOND_IN_MICROSECONDS, TOLERATED_MICROSECONDS, 'aTestHandler-audit-sub');\n      var handlers = Object.keys(record.req.timers);\n      assert.equal(handlers[handlers.length - 2], 'aTestHandler-audit-sub', 'sub handler timer not in order');\n      assert.equal(handlers[handlers.length - 1], 'aTestHandler', 'aTestHandler not last');\n      done();\n    });\n    CLIENT.get('/audit', function (err, req, res) {\n      assert.ifError(err);\n    });\n  });","file":"plugins/audit.test.js","skipped":false,"dir":"test"},{"name":"should log anonymous handler timers","suites":["audit logger"],"updatePoint":{"line":198,"column":41,"index":6022},"line":198,"code":"  it('should log anonymous handler timers', function (done) {\n    this.timeout(5000);\n    var WAIT_IN_MILLISECONDS = 1000;\n    SERVER.once('after', restify.plugins.auditLogger({\n      log: pino({\n        name: 'audit'\n      }),\n      event: 'after'\n    }));\n    SERVER.pre(function (req, res, next) {\n      next();\n    });\n    SERVER.pre(function (req, res, next) {\n      next();\n    });\n    SERVER.use(function (req, res, next) {\n      next();\n    });\n    SERVER.use(function (req, res, next) {\n      next();\n    });\n    SERVER.get('/audit', function (req, res, next) {\n      setTimeout(function () {\n        return next();\n      }, WAIT_IN_MILLISECONDS);\n    }, function (req, res, next) {\n      req.startHandlerTimer('audit-sub');\n      setTimeout(function () {\n        req.endHandlerTimer('audit-sub');\n        res.send('');\n        return next();\n      }, WAIT_IN_MILLISECONDS);\n    });\n    SERVER.on('after', function () {\n      // check timers\n      var record = LOG_BUFFER.records && LOG_BUFFER.records[0];\n      assert.ok(record, 'no log records');\n      assert.equal(LOG_BUFFER.records.length, 1, 'should only have 1 log record');\n      assertIsAtLeastWithTolerate(record.req.timers['pre-0'], 0, TOLERATED_MICROSECONDS, 'pre-0');\n      assertIsAtLeastWithTolerate(record.req.timers['pre-1'], 0, TOLERATED_MICROSECONDS, 'pre-1');\n      assertIsAtLeastWithTolerate(record.req.timers['use-0'], 0, TOLERATED_MICROSECONDS, 'use-0');\n      assertIsAtLeastWithTolerate(record.req.timers['use-1'], 0, TOLERATED_MICROSECONDS, 'use-1');\n      assertIsAtLeastWithTolerate(record.req.timers['handler-0'], WAIT_IN_MILLISECONDS * MILLISECOND_IN_MICROSECONDS, TOLERATED_MICROSECONDS, 'handler-0');\n      assertIsAtLeastWithTolerate(record.req.timers['handler-1'], WAIT_IN_MILLISECONDS * MILLISECOND_IN_MICROSECONDS, TOLERATED_MICROSECONDS, 'handler-1');\n      assertIsAtLeastWithTolerate(record.req.timers['handler-1-audit-sub'], WAIT_IN_MILLISECONDS * MILLISECOND_IN_MICROSECONDS, TOLERATED_MICROSECONDS, 'handler-0-audit-sub');\n      var handlers = Object.keys(record.req.timers);\n      assert.equal(handlers[handlers.length - 2], 'handler-1-audit-sub', 'sub handler timer not in order');\n      assert.equal(handlers[handlers.length - 1], 'handler-1', 'handler-1 not last');\n      done();\n    });\n    CLIENT.get('/audit', function (err, req, res) {\n      assert.ifError(err);\n    });\n  });","file":"plugins/audit.test.js","skipped":false,"dir":"test"},{"name":"restify-GH-1435 should accumulate log handler timers","suites":["audit logger"],"updatePoint":{"line":252,"column":58,"index":8426},"line":252,"code":"  it('restify-GH-1435 should accumulate log handler timers', function (done) {\n    // capture the log record\n    var WAIT_IN_MILLISECONDS = 1100;\n    SERVER.once('after', restify.plugins.auditLogger({\n      log: pino({\n        name: 'audit'\n      }),\n      event: 'after'\n    }));\n    SERVER.get('/audit', function aTestHandler(req, res, next) {\n      req.startHandlerTimer('audit-acc');\n      setTimeout(function () {\n        req.endHandlerTimer('audit-acc');\n        // Very brief timing for same name\n        req.startHandlerTimer('audit-acc');\n        req.endHandlerTimer('audit-acc');\n        res.send('');\n        return next();\n      }, WAIT_IN_MILLISECONDS);\n      // this really should be 1000 but make it 1100 so that the tests\n      // don't sporadically fail due to timing issues.\n    });\n\n    SERVER.on('after', function () {\n      var record = LOG_BUFFER.records && LOG_BUFFER.records[0];\n\n      // check timers\n      assert.ok(record, 'no log records');\n      assert.equal(LOG_BUFFER.records.length, 1, 'should only have 1 log record');\n      assertIsAtLeastWithTolerate(record.req.timers.aTestHandler, WAIT_IN_MILLISECONDS * MILLISECOND_IN_MICROSECONDS, TOLERATED_MICROSECONDS, 'atestHandler');\n      assertIsAtLeastWithTolerate(record.req.timers['aTestHandler-audit-acc'], WAIT_IN_MILLISECONDS * MILLISECOND_IN_MICROSECONDS, TOLERATED_MICROSECONDS, 'aTestHandler-audit-acc');\n      done();\n    });\n    CLIENT.get('/audit', function (err, req, res) {\n      assert.ifError(err);\n    });\n  });","file":"plugins/audit.test.js","skipped":false,"dir":"test"},{"name":"restify-GH-812 audit logger has query params string","suites":["audit logger"],"updatePoint":{"line":289,"column":57,"index":9933},"line":289,"code":"  it('restify-GH-812 audit logger has query params string', function (done) {\n    SERVER.once('after', restify.plugins.auditLogger({\n      log: pino({\n        name: 'audit'\n      }),\n      event: 'after'\n    }));\n    SERVER.get('/audit', function (req, res, next) {\n      res.send();\n      next();\n    });\n    SERVER.on('after', function () {\n      // check timers\n      assert.ok(LOG_BUFFER.records[0], 'no log records');\n      assert.equal(LOG_BUFFER.records.length, 1, 'should only have 1 log record');\n      assert.ok(LOG_BUFFER.records[0].req.query, 'a=1&b=2');\n      done();\n    });\n    CLIENT.get('/audit?a=1&b=2', function (err, req, res) {\n      assert.ifError(err);\n    });\n  });","file":"plugins/audit.test.js","skipped":false,"dir":"test"},{"name":"restify-GH-812 audit logger has query params obj","suites":["audit logger"],"updatePoint":{"line":311,"column":54,"index":10620},"line":311,"code":"  it('restify-GH-812 audit logger has query params obj', function (done) {\n    SERVER.once('after', restify.plugins.auditLogger({\n      log: pino({\n        name: 'audit'\n      }),\n      event: 'after'\n    }));\n    SERVER.get('/audit', [restify.plugins.queryParser(), function (req, res, next) {\n      res.send();\n      next();\n    }]);\n    SERVER.on('after', function () {\n      // check timers\n      assert.ok(LOG_BUFFER.records[0], 'no log records');\n      assert.equal(LOG_BUFFER.records.length, 1, 'should only have 1 log record');\n      assert.deepEqual(LOG_BUFFER.records[0].req.query, {\n        a: '1',\n        b: '2'\n      });\n      done();\n    });\n    CLIENT.get('/audit?a=1&b=2', function (err, req, res) {\n      assert.ifError(err);\n    });\n  });","file":"plugins/audit.test.js","skipped":false,"dir":"test"},{"name":"should work with pre events","suites":["audit logger"],"updatePoint":{"line":336,"column":33,"index":11357},"line":336,"code":"  it('should work with pre events', function (done) {\n    var ptStream = new PassThrough();\n    SERVER.once('pre', restify.plugins.auditLogger({\n      log: pino({\n        name: 'audit'\n      }, ptStream),\n      event: 'pre'\n    }));\n    SERVER.get('/audit', [restify.plugins.queryParser(), function (req, res, next) {\n      res.send();\n      next();\n    }]);\n    ptStream.on('data', function (data) {\n      var log = JSON.parse(data);\n      assert.equal('pre', log.component);\n      assert.ok(log.req_id);\n      assert.ok(log.req);\n      assert.ok(log.res);\n    });\n    CLIENT.get('/audit?a=1&b=2', function (err, req, res) {\n      assert.ifError(err);\n      done();\n    });\n  });","file":"plugins/audit.test.js","skipped":false,"dir":"test"},{"name":"should work with routed events","suites":["audit logger"],"updatePoint":{"line":360,"column":36,"index":12041},"line":360,"code":"  it('should work with routed events', function (done) {\n    var ptStream = new PassThrough();\n    SERVER.once('routed', restify.plugins.auditLogger({\n      log: pino({\n        name: 'audit'\n      }, ptStream),\n      event: 'routed'\n    }));\n    SERVER.get('/audit', [restify.plugins.queryParser(), function (req, res, next) {\n      res.send();\n      next();\n    }]);\n    ptStream.on('data', function (data) {\n      var log = JSON.parse(data);\n      assert.equal('routed', log.component);\n      assert.ok(log.req_id);\n      assert.ok(log.req);\n      assert.ok(log.res);\n    });\n    CLIENT.get('/audit?a=1&b=2', function (err, req, res) {\n      assert.ifError(err);\n      done();\n    });\n  });","file":"plugins/audit.test.js","skipped":false,"dir":"test"},{"name":"should work with custom context functions","suites":["audit logger"],"updatePoint":{"line":384,"column":47,"index":12745},"line":384,"code":"  it('should work with custom context functions', function (done) {\n    SERVER.once('after', restify.plugins.auditLogger({\n      log: pino({\n        name: 'audit'\n      }),\n      context: function (req, res, route, err) {\n        return {\n          qs: req.getQuery()\n        };\n      },\n      server: SERVER,\n      event: 'after'\n    }));\n    SERVER.once('audit', function (data) {\n      assert.ok(data);\n      assert.ok(data.req_id);\n      assert.isNumber(data.latency);\n      assert.ok(data.context);\n      assert.equal(data.context.qs, 'foo=bar');\n      done();\n    });\n    SERVER.get('/audit', [restify.plugins.queryParser(), function (req, res, next) {\n      res.send();\n      next();\n    }]);\n    CLIENT.get('/audit?foo=bar', function (err, req, res) {\n      assert.ifError(err);\n    });\n  });","file":"plugins/audit.test.js","skipped":false,"dir":"test"},{"name":"should log 444 for closed request","suites":["audit logger"],"updatePoint":{"line":413,"column":39,"index":13538},"line":413,"code":"  it('should log 444 for closed request', function (done) {\n    SERVER.once('after', restify.plugins.auditLogger({\n      log: pino({\n        name: 'audit'\n      }),\n      server: SERVER,\n      event: 'after'\n    }));\n    SERVER.once('audit', function (data) {\n      assert.ok(data);\n      assert.ok(data.req_id);\n      assert.isNumber(data.latency);\n      assert.equal(data.res.statusCode, 444);\n      done();\n    });\n    SERVER.get('/audit', function (req, res, next) {\n      setTimeout(function () {\n        res.send();\n        next();\n      }, 150);\n    });\n    CLIENT.get({\n      path: '/audit',\n      requestTimeout: 50\n    }, function (err, req, res) {});\n  });","file":"plugins/audit.test.js","skipped":false,"dir":"test"},{"name":"should accept basic authorization","suites":["authorization parser"],"updatePoint":{"line":42,"column":39,"index":1019},"line":42,"code":"  it('should accept basic authorization', function (done) {\n    var authz = 'Basic ' + new Buffer('user:secret').toString('base64');\n    var opts = {\n      path: '/',\n      headers: {\n        authorization: authz\n      }\n    };\n    CLIENT.get(opts, function (err, _, res) {\n      assert.ifError(err);\n      assert.equal(res.statusCode, 200);\n      done();\n    });\n  });","file":"plugins/authorization.test.js","skipped":false,"dir":"test"},{"name":"should reject basic authorization","suites":["authorization parser"],"updatePoint":{"line":56,"column":39,"index":1389},"line":56,"code":"  it('should reject basic authorization', function (done) {\n    var opts = {\n      path: '/',\n      headers: {\n        authorization: 'Basic '\n      }\n    };\n    CLIENT.get(opts, function (err, _, res) {\n      assert.ok(err);\n      assert.equal(err.name, 'InvalidHeaderError');\n      assert.equal(res.statusCode, 400);\n      done();\n    });\n  });","file":"plugins/authorization.test.js","skipped":false,"dir":"test"},{"name":"should parse gzip encoded content","suites":["body reader","gzip content encoding"],"updatePoint":{"line":36,"column":41,"index":814},"line":36,"code":"    it('should parse gzip encoded content', function (done) {\n      SERVER.use(restify.plugins.bodyParser());\n      CLIENT = restifyClients.createJsonClient({\n        url: 'http://127.0.0.1:' + PORT,\n        retry: false,\n        gzip: {}\n      });\n      SERVER.post('/compressed', function (req, res, next) {\n        assert.equal(req.body.apple, 'red');\n        res.send();\n        next();\n      });\n      CLIENT.post('/compressed', {\n        apple: 'red'\n      }, function (err, _, res) {\n        assert.ifError(err);\n        assert.equal(res.statusCode, 200);\n        done();\n      });\n    });","file":"plugins/bodyReader.test.js","skipped":false,"dir":"test"},{"name":"should not accept unsupported content encoding","suites":["body reader","gzip content encoding"],"updatePoint":{"line":56,"column":54,"index":1424},"line":56,"code":"    it('should not accept unsupported content encoding', function (done) {\n      SERVER.use(restify.plugins.bodyParser());\n      CLIENT = restifyClients.createJsonClient({\n        url: 'http://127.0.0.1:' + PORT,\n        retry: false,\n        headers: {\n          'content-encoding': 'unsupported'\n        }\n      });\n      SERVER.post('/compressed', function (req, res, next) {\n        assert.equal(req.body.apple, 'red');\n        res.send();\n        next();\n      });\n      CLIENT.post('/compressed', {\n        apple: 'red'\n      }, function (err, _, res) {\n        assert.isOk(err, 'should fail');\n        assert.equal(res.statusCode, 415);\n        assert.equal(res.headers['accept-encoding'], 'gzip');\n        done();\n      });\n    });","file":"plugins/bodyReader.test.js","skipped":false,"dir":"test"},{"name":"should parse unencoded content","suites":["body reader","gzip content encoding"],"updatePoint":{"line":79,"column":38,"index":2148},"line":79,"code":"    it('should parse unencoded content', function (done) {\n      SERVER.use(restify.plugins.bodyParser());\n      CLIENT = restifyClients.createJsonClient({\n        url: 'http://127.0.0.1:' + PORT,\n        retry: false\n      });\n      SERVER.post('/compressed', function (req, res, next) {\n        assert.equal(req.body.apple, 'red');\n        res.send();\n        next();\n      });\n      CLIENT.post('/compressed', {\n        apple: 'red'\n      }, function (err, _, res) {\n        assert.ifError(err);\n        assert.equal(res.statusCode, 200);\n        done();\n      });\n    });","file":"plugins/bodyReader.test.js","skipped":false,"dir":"test"},{"name":"should handle client timeout","suites":["body reader","gzip content encoding"],"updatePoint":{"line":98,"column":36,"index":2722},"line":98,"code":"    it('should handle client timeout', function (done) {\n      SERVER.use(restify.plugins.bodyParser());\n      SERVER.post('/compressed', function (req, res, next) {\n        res.send('ok');\n        next();\n      });\n\n      // set timeout to 100ms so test runs faster, when client stops\n      // sending POST data\n      SERVER.on('connection', function (socket) {\n        socket.setTimeout(100);\n      });\n      var postData = 'hello world';\n      var options = {\n        hostname: '127.0.0.1',\n        port: PORT,\n        path: '/compressed?v=1',\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          // report postData + 1 so that request isn't sent\n          'Content-Length': Buffer.byteLength(postData) + 1\n        }\n      };\n      var req = http.request(options, function (res) {\n        // should never receive a response\n        assert.isNotOk(res);\n      });\n      SERVER.on('after', function (req2) {\n        if (req2.href() === '/compressed?v=2') {\n          assert.equal(SERVER.inflightRequests(), 0);\n          done();\n        }\n      });\n\n      // will get a req error after 100ms timeout\n      req.on('error', function (e) {\n        // make another request to verify in flight request is only 1\n        CLIENT = restifyClients.createJsonClient({\n          url: 'http://127.0.0.1:' + PORT,\n          retry: false\n        });\n        CLIENT.post('/compressed?v=2', {\n          apple: 'red'\n        }, function (err, _, res, obj) {\n          assert.ifError(err);\n          assert.equal(res.statusCode, 200);\n        });\n      });\n\n      // write data to request body, but don't req.send()\n      req.write(postData);\n    });","file":"plugins/bodyReader.test.js","skipped":false,"dir":"test"},{"name":"should not add a listener for each call on same socket","suites":["body reader","gzip content encoding"],"updatePoint":{"line":152,"column":60,"index":4432},"line":152,"code":"  it('should not add a listener for each call on same socket', done => {\n    SERVER.use(restify.plugins.bodyParser());\n    let serverReq, serverRes, serverReqSocket;\n    SERVER.post('/meals', function (req, res, next) {\n      serverReq = req;\n      serverRes = res;\n      serverReqSocket = req.socket;\n      res.send();\n      next();\n    });\n    CLIENT = restifyClients.createJsonClient({\n      url: 'http://127.0.0.1:' + PORT,\n      retry: false,\n      agent: new http.Agent({\n        keepAlive: true\n      })\n    });\n    CLIENT.post('/meals', {\n      breakfast: 'pancakes'\n    }, (err, _, res) => {\n      assert.ifError(err);\n      assert.equal(res.statusCode, 200);\n      const firstReqSocket = serverReqSocket;\n      const numReqListeners = listenerCount(serverReq);\n      const numResListeners = listenerCount(serverRes);\n      const numReqSocketListeners = listenerCount(serverReq.socket);\n\n      // Without setImmediate, the second request will not reuse the socket.\n      setImmediate(() => {\n        CLIENT.post('/meals', {\n          lunch: 'salad'\n        }, (err2, __, res2) => {\n          assert.ifError(err2);\n          assert.equal(res2.statusCode, 200);\n          assert.equal(serverReqSocket, firstReqSocket, 'This test should issue two requests that share the ' + 'same socket.');\n          // The number of listeners on each emitter should not have\n          // increased since the first request.\n          assert.equal(listenerCount(serverReq), numReqListeners);\n          assert.equal(listenerCount(serverRes), numResListeners);\n          assert.equal(listenerCount(serverReq.socket), numReqSocketListeners);\n          done();\n        });\n      });\n    });\n  });","file":"plugins/bodyReader.test.js","skipped":false,"dir":"test"},{"name":"should call next for each successful request on same socket","suites":["body reader","gzip content encoding"],"updatePoint":{"line":197,"column":65,"index":6120},"line":197,"code":"  it('should call next for each successful request on same socket', done => {\n    let nextCallCount = 0;\n    SERVER.use(restify.plugins.bodyParser());\n    SERVER.use((req, res, next) => {\n      nextCallCount += 1;\n      next();\n    });\n    let serverReqSocket;\n    SERVER.post('/meals', function (req, res, next) {\n      res.send();\n      next();\n    });\n    CLIENT = restifyClients.createJsonClient({\n      url: 'http://127.0.0.1:' + PORT,\n      retry: false,\n      agent: new http.Agent({\n        keepAlive: true\n      })\n    });\n    CLIENT.post('/meals', {\n      breakfast: 'waffles'\n    }, (err, _, res) => {\n      assert.ifError(err);\n      assert.equal(res.statusCode, 200);\n      const firstReqSocket = serverReqSocket;\n      assert.equal(nextCallCount, 1);\n\n      // Without setImmediate, the second request will not reuse the socket.\n      setImmediate(() => {\n        CLIENT.post('/meals', {\n          lunch: 'candy'\n        }, (err2, __, res2) => {\n          assert.ifError(err2);\n          assert.equal(res2.statusCode, 200);\n          assert.equal(serverReqSocket, firstReqSocket, 'This test should issue two requests that share the ' + 'same socket.');\n          assert.equal(nextCallCount, 2);\n          done();\n        });\n      });\n    });\n  });","file":"plugins/bodyReader.test.js","skipped":false,"dir":"test"},{"name":"should find handler by string version","suites":["conditional request","version"],"updatePoint":{"line":46,"column":45,"index":1185},"line":46,"code":"    it('should find handler by string version', function (done) {\n      SERVER.get('/', restify.plugins.conditionalHandler([{\n        handler: handlerFactory('v1.1.0', 'v1.1.0'),\n        version: 'v1.1.0'\n      }, {\n        handler: handlerFactory('v1.2.0', 'v1.2.0'),\n        version: 'v1.2.0'\n      }]));\n      parallel({\n        funcs: [function v1(callback) {\n          var opts = {\n            path: '/',\n            headers: {\n              'accept-version': '1.1.0'\n            }\n          };\n          CLIENT.get(opts, function (err, _, res, response) {\n            assert.ifError(err);\n            assert.equal(res.statusCode, 200);\n            assert.equal(response, 'v1.1.0');\n            callback();\n          });\n        }, function v2(callback) {\n          var opts = {\n            path: '/',\n            headers: {\n              'accept-version': '1.2.0'\n            }\n          };\n          CLIENT.get(opts, function (err, _, res, response) {\n            assert.ifError(err);\n            assert.equal(res.statusCode, 200);\n            assert.equal(res.headers['api-version'], 'v1.2.0');\n            assert.equal(response, 'v1.2.0');\n            callback();\n          });\n        }]\n      }, function parallelDone(err) {\n        assert.ifError(err);\n        done();\n      });\n    });","file":"plugins/conditionalHandler.test.js","skipped":false,"dir":"test"},{"name":"should find handler by array of versions","suites":["conditional request","version"],"updatePoint":{"line":88,"column":48,"index":2487},"line":88,"code":"    it('should find handler by array of versions', function (done) {\n      SERVER.get('/', restify.plugins.conditionalHandler([{\n        handler: handlerFactory('v1.x, v2.x'),\n        version: ['v1.1.0', 'v2.0.0']\n      }, {\n        handler: handlerFactory('v3.x'),\n        version: 'v3.0.0'\n      }]));\n      parallel({\n        funcs: [function v1(callback) {\n          var opts = {\n            path: '/',\n            headers: {\n              'accept-version': '2.x'\n            }\n          };\n          CLIENT.get(opts, function (err, _, res, response) {\n            assert.ifError(err);\n            assert.equal(res.statusCode, 200);\n            assert.equal(response, 'v1.x, v2.x');\n            callback();\n          });\n        }, function v2(callback) {\n          var opts = {\n            path: '/',\n            headers: {\n              'accept-version': '3.x'\n            }\n          };\n          CLIENT.get(opts, function (err, _, res, response) {\n            assert.ifError(err);\n            assert.equal(res.statusCode, 200);\n            assert.equal(response, 'v3.x');\n            callback();\n          });\n        }]\n      }, function parallelDone(err) {\n        assert.ifError(err);\n        done();\n      });\n    });","file":"plugins/conditionalHandler.test.js","skipped":false,"dir":"test"},{"name":"should find handler with 1.x","suites":["conditional request","version"],"updatePoint":{"line":129,"column":36,"index":3705},"line":129,"code":"    it('should find handler with 1.x', function (done) {\n      SERVER.get('/', restify.plugins.conditionalHandler([{\n        handler: handlerFactory('v1.1.0'),\n        version: 'v1.1.0'\n      }, {\n        handler: handlerFactory('v1.2.0'),\n        version: 'v1.2.0'\n      }]));\n      var opts = {\n        path: '/',\n        headers: {\n          'accept-version': '1.x'\n        }\n      };\n      CLIENT.get(opts, function (err, _, res, response) {\n        assert.ifError(err);\n        assert.equal(res.statusCode, 200);\n        assert.equal(response, 'v1.2.0');\n        done();\n      });\n    });","file":"plugins/conditionalHandler.test.js","skipped":false,"dir":"test"},{"name":"should find handler with ~1.1.0","suites":["conditional request","version"],"updatePoint":{"line":150,"column":39,"index":4302},"line":150,"code":"    it('should find handler with ~1.1.0', function (done) {\n      SERVER.get('/', restify.plugins.conditionalHandler([{\n        handler: handlerFactory('v1.1.1'),\n        version: 'v1.1.1'\n      }, {\n        handler: handlerFactory('v1.2.0'),\n        version: 'v1.2.0'\n      }]));\n      var opts = {\n        path: '/',\n        headers: {\n          'accept-version': '~1.1.0'\n        }\n      };\n      CLIENT.get(opts, function (err, _, res, response) {\n        assert.ifError(err);\n        assert.equal(res.statusCode, 200);\n        assert.equal(response, 'v1.1.1');\n        done();\n      });\n    });","file":"plugins/conditionalHandler.test.js","skipped":false,"dir":"test"},{"name":"should find handler with ^1.1.0","suites":["conditional request","version"],"updatePoint":{"line":171,"column":39,"index":4902},"line":171,"code":"    it('should find handler with ^1.1.0', function (done) {\n      SERVER.get('/', restify.plugins.conditionalHandler([{\n        handler: handlerFactory('v1.1.1'),\n        version: 'v1.1.1'\n      }, {\n        handler: handlerFactory('v1.2.0'),\n        version: 'v1.2.0'\n      }]));\n      var opts = {\n        path: '/',\n        headers: {\n          'accept-version': '^1.1.0'\n        }\n      };\n      CLIENT.get(opts, function (err, _, res, response) {\n        assert.ifError(err);\n        assert.equal(res.statusCode, 200);\n        assert.equal(response, 'v1.2.0');\n        done();\n      });\n    });","file":"plugins/conditionalHandler.test.js","skipped":false,"dir":"test"},{"name":"should find largest version with missing header","suites":["conditional request","version"],"updatePoint":{"line":192,"column":55,"index":5518},"line":192,"code":"    it('should find largest version with missing header', function (done) {\n      SERVER.get('/', restify.plugins.conditionalHandler([{\n        handler: handlerFactory('v1.1.0'),\n        version: 'v1.1.0'\n      }, {\n        handler: handlerFactory('v1.2.0'),\n        version: 'v1.2.0'\n      }]));\n      var opts = {\n        path: '/',\n        headers: {}\n      };\n      CLIENT.get(opts, function (err, _, res, response) {\n        assert.ifError(err);\n        assert.equal(res.statusCode, 200);\n        assert.equal(response, 'v1.2.0');\n        done();\n      });\n    });","file":"plugins/conditionalHandler.test.js","skipped":false,"dir":"test"},{"name":"should throw invalid version error","suites":["conditional request","version"],"updatePoint":{"line":211,"column":42,"index":6075},"line":211,"code":"    it('should throw invalid version error', function (done) {\n      SERVER.get('/', restify.plugins.conditionalHandler([{\n        handler: handlerFactory('v1.1.0'),\n        version: 'v1.1.0'\n      }, {\n        handler: handlerFactory('v1.2.0'),\n        version: 'v1.2.0'\n      }]));\n      var opts = {\n        path: '/',\n        headers: {\n          'accept-version': '1.3.0'\n        }\n      };\n      CLIENT.get(opts, function (err, _, res, response) {\n        assert.equal(err.name, 'InvalidVersionError');\n        assert.equal(err.message, '1.3.0 is not supported by GET /');\n        assert.equal(res.statusCode, 400);\n        done();\n      });\n    });","file":"plugins/conditionalHandler.test.js","skipped":false,"dir":"test"},{"name":"should find handler by content type by string","suites":["conditional request","content type"],"updatePoint":{"line":253,"column":53,"index":7312},"line":253,"code":"    it('should find handler by content type by string', function (done) {\n      SERVER.get('/', restify.plugins.conditionalHandler([{\n        handler: handlerFactory('application/json'),\n        contentType: 'application/json'\n      }, {\n        handler: handlerFactory('text/plain'),\n        contentType: 'text/plain'\n      }]));\n      parallel({\n        funcs: [function v1(callback) {\n          var opts = {\n            path: '/',\n            headers: {\n              accept: 'application/json'\n            }\n          };\n          CLIENT.get(opts, function (err, _, res, response) {\n            assert.ifError(err);\n            assert.equal(res.statusCode, 200);\n            assert.equal(response, '\"application/json\"');\n            callback();\n          });\n        }, function v2(callback) {\n          var opts = {\n            path: '/',\n            headers: {\n              accept: 'text/plain'\n            }\n          };\n          CLIENT.get(opts, function (err, _, res, response) {\n            assert.ifError(err);\n            assert.equal(res.statusCode, 200);\n            assert.equal(response, 'text/plain');\n            callback();\n          });\n        }]\n      }, function parallelDone(err) {\n        assert.ifError(err);\n        done();\n      });\n    });","file":"plugins/conditionalHandler.test.js","skipped":false,"dir":"test"},{"name":"should find handler by array of content types","suites":["conditional request","content type"],"updatePoint":{"line":294,"column":53,"index":8583},"line":294,"code":"    it('should find handler by array of content types', function (done) {\n      SERVER.get('/', restify.plugins.conditionalHandler([{\n        handler: handlerFactory('application/*'),\n        contentType: ['application/json', 'application/javascript']\n      }, {\n        handler: handlerFactory('text/plain'),\n        contentType: 'text/plain'\n      }]));\n      var opts = {\n        path: '/',\n        headers: {\n          accept: 'application/javascript'\n        }\n      };\n      CLIENT.get(opts, function (err, _, res, response) {\n        assert.ifError(err);\n        assert.equal(res.statusCode, 200);\n        assert.equal(response, '\"application/*\"');\n        done();\n      });\n    });","file":"plugins/conditionalHandler.test.js","skipped":false,"dir":"test"},{"name":"should find handler with multiple accept","suites":["conditional request","content type"],"updatePoint":{"line":315,"column":48,"index":9268},"line":315,"code":"    it('should find handler with multiple accept', function (done) {\n      SERVER.get('/', restify.plugins.conditionalHandler([{\n        handler: handlerFactory('application/*'),\n        contentType: 'application/json'\n      }, {\n        handler: handlerFactory('text/plain'),\n        contentType: 'text/plain'\n      }]));\n      var opts = {\n        path: '/',\n        headers: {\n          accept: 'text/html,text/plain'\n        }\n      };\n      CLIENT.get(opts, function (err, _, res, response) {\n        assert.ifError(err);\n        assert.equal(res.statusCode, 200);\n        assert.equal(response, 'text/plain');\n        done();\n      });\n    });","file":"plugins/conditionalHandler.test.js","skipped":false,"dir":"test"},{"name":"should find handler with application/*","suites":["conditional request","content type"],"updatePoint":{"line":336,"column":46,"index":9916},"line":336,"code":"    it('should find handler with application/*', function (done) {\n      SERVER.get('/', restify.plugins.conditionalHandler([{\n        handler: handlerFactory('application/*'),\n        contentType: 'application/json'\n      }, {\n        handler: handlerFactory('text/plain'),\n        contentType: 'text/plain'\n      }]));\n      var opts = {\n        path: '/',\n        headers: {\n          accept: 'application/json'\n        }\n      };\n      CLIENT.get(opts, function (err, _, res, response) {\n        assert.ifError(err);\n        assert.equal(res.statusCode, 200);\n        assert.equal(response, '\"application/*\"');\n        done();\n      });\n    });","file":"plugins/conditionalHandler.test.js","skipped":false,"dir":"test"},{"name":"should find handler with content type and version","suites":["conditional request","content type"],"updatePoint":{"line":357,"column":57,"index":10576},"line":357,"code":"    it('should find handler with content type and version', function (done) {\n      SERVER.get('/', restify.plugins.conditionalHandler([{\n        handler: handlerFactory('application/json, 1.1.0'),\n        contentType: 'application/json',\n        version: '1.1.0'\n      }, {\n        handler: handlerFactory('application/json, 1.2.0'),\n        contentType: 'application/json',\n        version: '1.2.0'\n      }, {\n        handler: handlerFactory('text/plain'),\n        contentType: 'text/plain'\n      }]));\n      var opts = {\n        path: '/',\n        headers: {\n          accept: 'application/json',\n          'accept-version': '1.2.0'\n        }\n      };\n      CLIENT.get(opts, function (err, _, res, response) {\n        assert.ifError(err);\n        assert.equal(res.statusCode, 200);\n        assert.equal(response, '\"application/json, 1.2.0\"');\n        done();\n      });\n    });","file":"plugins/conditionalHandler.test.js","skipped":false,"dir":"test"},{"name":"should throw invalid media type error","suites":["conditional request","content type"],"updatePoint":{"line":384,"column":45,"index":11444},"line":384,"code":"    it('should throw invalid media type error', function (done) {\n      SERVER.get('/', restify.plugins.conditionalHandler([{\n        handler: handlerFactory('application/json'),\n        contentType: 'application/json'\n      }, {\n        handler: handlerFactory('text/plain'),\n        contentType: 'text/plain'\n      }]));\n      var opts = {\n        path: '/',\n        headers: {\n          accept: 'text/html'\n        }\n      };\n      CLIENT.get(opts, function (err, _, res, response) {\n        assert.equal(err.name, 'UnsupportedMediaTypeError');\n        assert.equal(err.message, '{\"code\":\"UnsupportedMediaType\",\"message\":\"text/html\"}');\n        assert.equal(res.statusCode, 415);\n        done();\n      });\n    });","file":"plugins/conditionalHandler.test.js","skipped":false,"dir":"test"},{"name":"should run each of the handlers","suites":["conditional request","multiple handlers"],"updatePoint":{"line":426,"column":39,"index":12728},"line":426,"code":"    it('should run each of the handlers', function (done) {\n      var counter = 0;\n      SERVER.get('/', restify.plugins.conditionalHandler([{\n        handler: [function handler1(req, res, next) {\n          counter += 1;\n          next();\n        }, function handler2(req, res, next) {\n          counter += 1;\n          next();\n        }, function handler3(req, res, next) {\n          counter += 1;\n          res.send('v1.2.0');\n        }],\n        version: 'v1.2.0'\n      }]));\n      var opts = {\n        path: '/',\n        headers: {\n          'accept-version': '1.2.0'\n        }\n      };\n      CLIENT.get(opts, function (err, _, res, response) {\n        assert.ifError(err);\n        assert.equal(res.statusCode, 200);\n        assert.equal(counter, 3, 'calls all of the handlers');\n        assert.equal(response, 'v1.2.0');\n        done();\n      });\n    });","file":"plugins/conditionalHandler.test.js","skipped":false,"dir":"test"},{"name":"Correct Etag and headers","suites":["conditional request"],"updatePoint":{"line":37,"column":30,"index":867},"line":37,"code":"  it('Correct Etag and headers', function (done) {\n    SERVER.get('/etag/:id', function (req, res, next) {\n      res.etag = 'testETag';\n      next();\n    }, restify.plugins.conditionalRequest(), function (req, res, next) {\n      res.body = 'testing 304';\n      res.send();\n      next();\n    });\n    var opts = {\n      path: '/etag/foo',\n      headers: {\n        'If-Match': 'testETag',\n        'If-None-Match': 'testETag'\n      }\n    };\n    CLIENT.get(opts, function (err, _, res) {\n      assert.ifError(err);\n      assert.equal(res.statusCode, 304);\n      done();\n    });\n  });","file":"plugins/conditionalRequest.test.js","skipped":false,"dir":"test"},{"name":"mismatched Etag and If-Match","suites":["conditional request"],"updatePoint":{"line":59,"column":34,"index":1450},"line":59,"code":"  it('mismatched Etag and If-Match', function (done) {\n    SERVER.get('/etag/:id', function setEtag(req, res, next) {\n      res.etag = 'testEtag';\n      next();\n    }, restify.plugins.conditionalRequest(), function respond(req, res, next) {\n      res.send();\n      next();\n    });\n    var opts = {\n      path: '/etag/foo',\n      headers: {\n        'If-Match': 'testETag2'\n      }\n    };\n    CLIENT.get(opts, function (err, _, res) {\n      assert.ok(err);\n      assert.equal(res.statusCode, 412);\n      done();\n    });\n  });","file":"plugins/conditionalRequest.test.js","skipped":false,"dir":"test"},{"name":"If-Modified header & !modified content","suites":["conditional request"],"updatePoint":{"line":79,"column":44,"index":1984},"line":79,"code":"  it('If-Modified header & !modified content', function (done) {\n    var now = new Date();\n    var yesterday = new Date(now.setDate(now.getDate() - 1));\n    SERVER.get('/etag/:id', function (req, res, next) {\n      res.header('Last-Modified', yesterday);\n      next();\n    }, restify.plugins.conditionalRequest(), function (req, res, next) {\n      res.send('testing 304');\n      next();\n    });\n    var opts = {\n      path: '/etag/foo',\n      headers: {\n        'If-Modified-Since': new Date()\n      }\n    };\n    CLIENT.get(opts, function (err, _, res) {\n      assert.ifError(err);\n      assert.equal(res.statusCode, 304);\n      done();\n    });\n  });","file":"plugins/conditionalRequest.test.js","skipped":false,"dir":"test"},{"name":"If-Unmodified-Since header,modified content","suites":["conditional request"],"updatePoint":{"line":101,"column":49,"index":2640},"line":101,"code":"  it('If-Unmodified-Since header,modified content', function (done) {\n    var now = new Date();\n    var yesterday = new Date(now.setDate(now.getDate() - 1));\n    SERVER.get('/etag/:id', function (req, res, next) {\n      res.header('Last-Modified', new Date());\n      next();\n    }, restify.plugins.conditionalRequest(), function (req, res, next) {\n      res.send('testing 412');\n      next();\n    });\n    var opts = {\n      path: '/etag/foo',\n      headers: {\n        'If-Unmodified-Since': yesterday\n      }\n    };\n    CLIENT.get(opts, function (err, _, res) {\n      assert.ok(err);\n      assert.equal(res.statusCode, 412);\n      done();\n    });\n  });","file":"plugins/conditionalRequest.test.js","skipped":false,"dir":"test"},{"name":"valid headers, ahead time, unmodified OK","suites":["conditional request"],"updatePoint":{"line":123,"column":46,"index":3290},"line":123,"code":"  it('valid headers, ahead time, unmodified OK', function (done) {\n    var now = new Date();\n    var ahead = new Date(now.getTime() + 1000);\n    SERVER.get('/etag/:id', function (req, res, next) {\n      res.header('Last-Modified', now);\n      next();\n    }, restify.plugins.conditionalRequest(), function (req, res, next) {\n      res.send();\n      next();\n    });\n    var opts = {\n      path: '/etag/foo',\n      headers: {\n        'If-Modified-Since': ahead\n      }\n    };\n    CLIENT.get(opts, function (err, _, res) {\n      assert.ifError(err);\n      assert.equal(res.statusCode, 304);\n      done();\n    });\n  });","file":"plugins/conditionalRequest.test.js","skipped":false,"dir":"test"},{"name":"valid headers, ahead Timezone, modified content","suites":["conditional request"],"updatePoint":{"line":145,"column":53,"index":3912},"line":145,"code":"  it('valid headers, ahead Timezone, modified content', function (done) {\n    var now = new Date();\n    var ahead = new Date(now.setHours(now.getHours() + 5));\n    SERVER.get('/etag/:id', function (req, res, next) {\n      res.header('Last-Modified', now);\n      next();\n    }, restify.plugins.conditionalRequest(), function (req, res, next) {\n      res.send();\n      next();\n    });\n    var opts = {\n      path: '/etag/foo',\n      headers: {\n        'If-Unmodified-Since': ahead\n      }\n    };\n    CLIENT.get(opts, function (err, _, res) {\n      assert.ifError(err);\n      assert.equal(res.statusCode, 200);\n      done();\n    });\n  });","file":"plugins/conditionalRequest.test.js","skipped":false,"dir":"test"},{"name":"PUT with matched Etag and headers","suites":["conditional request"],"updatePoint":{"line":167,"column":39,"index":4534},"line":167,"code":"  it('PUT with matched Etag and headers', function (done) {\n    SERVER.put('/etag/:id', function (req, res, next) {\n      res.etag = 'testETag';\n      next();\n    }, restify.plugins.conditionalRequest(), function (req, res, next) {\n      res.send();\n      next();\n    });\n    var opts = {\n      path: '/etag/foo',\n      headers: {\n        'If-Match': 'testETag',\n        'If-None-Match': 'testETag'\n      }\n    };\n    CLIENT.put(opts, {}, function (err, _, res) {\n      assert.ok(err);\n      assert.equal(res.statusCode, 412);\n      done();\n    });\n  });","file":"plugins/conditionalRequest.test.js","skipped":false,"dir":"test"},{"name":"should use context","suites":["accept parser"],"updatePoint":{"line":38,"column":24,"index":894},"line":38,"code":"  it('should use context', function (done) {\n    SERVER.get('/', [function one(req, res, next) {\n      req.set('foo', {\n        a: 1\n      });\n      return next();\n    }, function two(req, res, next) {\n      assert.deepEqual(req.get('foo'), {\n        a: 1\n      });\n      req.get('foo').b = 2;\n      req.set('bar', [1]);\n      return next();\n    }, function three(req, res, next) {\n      assert.deepEqual(req.get('foo'), {\n        a: 1,\n        b: 2\n      });\n      assert.deepEqual(req.get('bar'), [1]);\n      assert.deepEqual(req.getAll(), {\n        foo: {\n          a: 1,\n          b: 2\n        },\n        bar: [1]\n      });\n      res.send();\n      return next();\n    }]);\n    CLIENT.get('/', function (err, _, res) {\n      assert.ifError(err);\n      assert.equal(res.statusCode, 200);\n      return done();\n    });\n  });","file":"plugins/context.test.js","skipped":false,"dir":"test"},{"name":"should not share context","suites":["accept parser"],"updatePoint":{"line":73,"column":30,"index":1724},"line":73,"code":"  it('should not share context', function (done) {\n    SERVER.get('/1', function one(req, res, next) {\n      // ensure we don't get context from previous request\n      assert.equal(req.get('foo', null));\n      res.end();\n      return next();\n    });\n    CLIENT.get('/1', function (err, _, res) {\n      assert.ifError(err);\n      assert.equal(res.statusCode, 200);\n      return done();\n    });\n  });","file":"plugins/context.test.js","skipped":false,"dir":"test"},{"name":"Unit: Should shed load","suites":["cpuUsageThrottle"],"updatePoint":{"line":28,"column":28,"index":724},"line":28,"code":"  it('Unit: Should shed load', function (done) {\n    var opts = {\n      limit: 0,\n      interval: 500\n    };\n    plugin = cpuUsageThrottle(opts);\n    function next(cont) {\n      assert(cont instanceof Error, 'Should call next with error');\n      assert.equal(cont.statusCode, 503, 'Defaults to 503 status');\n      done();\n    }\n    plugin({}, {}, next);\n  });","file":"plugins/cpuUsageThrottle.test.js","skipped":false,"dir":"test"},{"name":"Unit: Should let request through when not under load","suites":["cpuUsageThrottle"],"updatePoint":{"line":41,"column":58,"index":1114},"line":41,"code":"  it('Unit: Should let request through when not under load', function (done) {\n    var opts = {\n      interval: 500,\n      limit: 0.9\n    };\n    plugin = cpuUsageThrottle(opts);\n    function next(cont) {\n      assert.isUndefined(cont, 'Should call next');\n      done();\n    }\n    plugin({}, {}, next);\n  });","file":"plugins/cpuUsageThrottle.test.js","skipped":false,"dir":"test"},{"name":"Unit: Update should update state","suites":["cpuUsageThrottle"],"updatePoint":{"line":53,"column":38,"index":1402},"line":53,"code":"  it('Unit: Update should update state', function (done) {\n    var opts = {\n      max: 1,\n      limit: 0.9,\n      halfLife: 50,\n      interval: 50\n    };\n    plugin = cpuUsageThrottle(opts);\n    opts = {\n      max: 0.5,\n      limit: 0.1,\n      halfLife: 1000,\n      interval: 1000\n    };\n    plugin.update(opts);\n    assert.equal(plugin.state.limit, opts.limit, 'opts.limit');\n    assert.equal(plugin.state.max, opts.max, 'opts.max');\n    assert.equal(plugin.state.halfLife, opts.halfLife, 'opts.halfLife');\n    assert.equal(plugin.state.interval, opts.interval, 'opts.interval');\n    done();\n  });","file":"plugins/cpuUsageThrottle.test.js","skipped":false,"dir":"test"},{"name":"Unit: Should have proper name","suites":["cpuUsageThrottle"],"updatePoint":{"line":74,"column":35,"index":1998},"line":74,"code":"  it('Unit: Should have proper name', function (done) {\n    var opts = {\n      max: 1,\n      limit: 0.9,\n      halfLife: 50,\n      interval: 50\n    };\n    plugin = cpuUsageThrottle(opts);\n    assert.equal(plugin.name, 'cpuUsageThrottle');\n    done();\n  });","file":"plugins/cpuUsageThrottle.test.js","skipped":false,"dir":"test"},{"name":"Unit: Should report proper lag","suites":["cpuUsageThrottle"],"updatePoint":{"line":85,"column":36,"index":2256},"line":85,"code":"  it('Unit: Should report proper lag', function (done) {\n    var opts = {\n      max: 1,\n      limit: 0.9,\n      halfLife: 50,\n      interval: 50\n    };\n    var dn = Date.now;\n    var now = 0;\n    // First timer will be 0, all future timers will be interval\n    Date.now = function () {\n      return (now++ > 0) * opts.interval;\n    };\n    plugin = cpuUsageThrottle(opts);\n    Date.now = dn;\n    assert.equal(plugin.state.lag, 0);\n    done();\n  });","file":"plugins/cpuUsageThrottle.test.js","skipped":false,"dir":"test"},{"name":"Integration: Should shed load","suites":["cpuUsageThrottle"],"updatePoint":{"line":103,"column":35,"index":2703},"line":103,"code":"  it('Integration: Should shed load', function (done) {\n    var server = restify.createServer();\n    var client = {\n      close: function () {}\n    };\n    var opts = {\n      interval: 500,\n      limit: 0\n    };\n    plugin = cpuUsageThrottle(opts);\n    server.pre(plugin);\n    server.get('/foo', function (req, res, next) {\n      res.send(200);\n      next();\n    });\n    server.listen(0, '127.0.0.1', function () {\n      client = restifyClients.createJsonClient({\n        url: 'http://127.0.0.1:' + server.address().port,\n        retry: false\n      });\n      client.get({\n        path: '/foo'\n      }, function (e, _, res) {\n        assert(e, 'Second request is shed');\n        assert.equal(res.statusCode, 503, 'Default shed status code returned');\n        clearTimeout(plugin._timeout);\n        // we should close the server else mocha wont exit\n        server.close();\n        done();\n      });\n    });\n  });","file":"plugins/cpuUsageThrottle.test.js","skipped":false,"dir":"test"},{"name":"Integration: pidusage should report CPU usage","suites":["cpuUsageThrottle"],"updatePoint":{"line":135,"column":51,"index":3630},"line":135,"code":"  it('Integration: pidusage should report CPU usage', function (done) {\n    assert.isFunction(pidusage, 'pidusage can be invoked');\n    pidusage(process.pid, function (e, stat) {\n      assert.ifError(e);\n      assert.isObject(stat);\n      assert.isNumber(stat.cpu);\n      pidusage.clear();\n      done();\n    });\n  });","file":"plugins/cpuUsageThrottle.test.js","skipped":false,"dir":"test"},{"name":"should not remove single slashes","suites":["dedupe forward slashes in URL"],"updatePoint":{"line":42,"column":38,"index":1040},"line":42,"code":"  it('should not remove single slashes', function (done) {\n    CLIENT.get('/foo/bar/', function (err, _, res, data) {\n      assert.ifError(err);\n      assert.equal(res.statusCode, 200);\n      assert.equal(data, '/foo/bar/');\n      done();\n    });\n  });","file":"plugins/dedupeSlashes.test.js","skipped":false,"dir":"test"},{"name":"should remove duplicate slashes","suites":["dedupe forward slashes in URL"],"updatePoint":{"line":50,"column":37,"index":1292},"line":50,"code":"  it('should remove duplicate slashes', function (done) {\n    CLIENT.get('//////foo///bar///////', function (err, _, res, data) {\n      assert.ifError(err);\n      assert.equal(res.statusCode, 200);\n      assert.equal(data, '/foo/bar/');\n      done();\n    });\n  });","file":"plugins/dedupeSlashes.test.js","skipped":false,"dir":"test"},{"name":"should remove duplicate slashes including trailing slashes","suites":["dedupe forward slashes in URL"],"updatePoint":{"line":60,"column":64,"index":1615},"line":60,"code":"  it('should remove duplicate slashes including trailing slashes', function (done) {\n    CLIENT.get('//foo//bar//', function (err, _, res, data) {\n      assert.ifError(err);\n      assert.equal(res.statusCode, 200);\n      assert.equal(data, '/foo/bar/');\n      done();\n    });\n  });","file":"plugins/dedupeSlashes.test.js","skipped":false,"dir":"test"},{"name":"should parse CSV body","suites":["fielded text parser"],"updatePoint":{"line":51,"column":27,"index":1345},"line":51,"code":"  it('should parse CSV body', function (done) {\n    var options = {\n      path: '/data',\n      headers: {\n        'Content-Type': 'text/csv'\n      }\n    };\n    SERVER.post('/data', function respond(req, res, next) {\n      res.send({\n        status: 'okay',\n        parsedReq: req.body\n      });\n      return next();\n    });\n    CLIENT.post(options, function (err, req) {\n      assert.ifError(err);\n      req.on('result', function (errReq, res) {\n        assert.ifError(errReq);\n        res.body = '';\n        res.setEncoding('utf8');\n        res.on('data', function (chunk) {\n          res.body += chunk;\n        });\n        res.on('end', function () {\n          res.body = JSON.parse(res.body);\n          var parsedReqStr = JSON.stringify(res.body.parsedReq);\n          var objectStr = JSON.stringify(OBJECT_CSV);\n          assert.equal(parsedReqStr, objectStr);\n          done();\n        });\n      });\n      req.write(DATA_CSV);\n      req.end();\n    });\n  });","file":"plugins/fieldedTextParser.test.js","skipped":false,"dir":"test"},{"name":"#100 should parse CSV body even if bodyparser declared twice","suites":["fielded text parser"],"updatePoint":{"line":88,"column":66,"index":2377},"line":88,"code":"  it('#100 should parse CSV body even if bodyparser declared twice', function (done) {\n    SERVER.use(restify.plugins.bodyParser());\n    var options = {\n      path: '/data',\n      headers: {\n        'Content-Type': 'text/csv'\n      }\n    };\n    SERVER.post('/data', function respond(req, res, next) {\n      res.send({\n        status: 'okay',\n        parsedReq: req.body\n      });\n      return next();\n    });\n    CLIENT.post(options, function (err, req) {\n      assert.ifError(err);\n      req.on('result', function (errReq, res) {\n        assert.ifError(errReq);\n        res.body = '';\n        res.setEncoding('utf8');\n        res.on('data', function (chunk) {\n          res.body += chunk;\n        });\n        res.on('end', function () {\n          res.body = JSON.parse(res.body);\n          var parsedReqStr = JSON.stringify(res.body.parsedReq);\n          var objectStr = JSON.stringify(OBJECT_CSV);\n          assert.equal(parsedReqStr, objectStr);\n          done();\n        });\n      });\n      req.write(DATA_CSV);\n      req.end();\n    });\n  });","file":"plugins/fieldedTextParser.test.js","skipped":false,"dir":"test"},{"name":"should parse TSV body","suites":["fielded text parser"],"updatePoint":{"line":124,"column":27,"index":3385},"line":124,"code":"  it('should parse TSV body', function (done) {\n    var options = {\n      path: '/data',\n      headers: {\n        'Content-Type': 'text/tsv'\n      }\n    };\n    SERVER.post('/data', function respond(req, res, next) {\n      res.send({\n        status: 'okay',\n        parsedReq: req.body\n      });\n      return next();\n    });\n    CLIENT.post(options, function (err, req) {\n      assert.ifError(err);\n      req.on('result', function (errReq, res) {\n        assert.ifError(errReq);\n        res.body = '';\n        res.setEncoding('utf8');\n        res.on('data', function (chunk) {\n          res.body += chunk;\n        });\n        res.on('end', function () {\n          res.body = JSON.parse(res.body);\n          var parsedReqStr = JSON.stringify(res.body.parsedReq);\n          var objectStr = JSON.stringify(OBJECT_TSV);\n          assert.equal(parsedReqStr, objectStr);\n          done();\n        });\n      });\n      req.write(DATA_TSV);\n      req.end();\n    });\n  });","file":"plugins/fieldedTextParser.test.js","skipped":false,"dir":"test"},{"name":"plugins-GH-6: should expose rawBody on request","suites":["fielded text parser"],"updatePoint":{"line":159,"column":52,"index":4372},"line":159,"code":"  it('plugins-GH-6: should expose rawBody on request', function (done) {\n    var options = {\n      path: '/data',\n      headers: {\n        'Content-Type': 'text/csv'\n      }\n    };\n    SERVER.post('/data', function respond(req, res, next) {\n      assert.ok(req.rawBody);\n      res.send();\n      return next();\n    });\n    CLIENT.post(options, function (err, req) {\n      assert.ifError(err);\n      req.on('result', function (errReq, res) {\n        assert.ifError(errReq);\n        res.body = '';\n        res.setEncoding('utf8');\n        res.on('data', function (chunk) {\n          res.body += chunk;\n        });\n        res.on('end', done);\n      });\n      req.write(DATA_TSV);\n      req.end();\n    });\n  });","file":"plugins/fieldedTextParser.test.js","skipped":false,"dir":"test"},{"name":"should parse req.body, req.query, req.params","suites":["form body parser"],"updatePoint":{"line":32,"column":50,"index":697},"line":32,"code":"  it('should parse req.body, req.query, req.params', function (done) {\n    SERVER.use(restify.plugins.queryParser());\n    SERVER.use(restify.plugins.bodyParser());\n    SERVER.post('/bodyurl2/:id', function (req, res, next) {\n      assert.equal(req.query.name, 'markc');\n      assert.equal(req.params.id, 'foo');\n      assert.equal(req.body.name, 'somethingelse');\n      assert.equal(req.body.phone, '(206) 555-1212');\n      res.send();\n      next();\n    });\n    var opts = {\n      hostname: '127.0.0.1',\n      port: PORT,\n      path: '/bodyurl2/foo?name=markc',\n      agent: false,\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded'\n      }\n    };\n    var client = http.request(opts, function (res) {\n      assert.equal(res.statusCode, 200);\n      done();\n    });\n    client.write('phone=(206)%20555-1212&name=somethingelse');\n    client.end();\n  });","file":"plugins/formBodyParser.test.js","skipped":false,"dir":"test"},{"name":"should map req.body & req.query onto req.params","suites":["form body parser"],"updatePoint":{"line":60,"column":53,"index":1599},"line":60,"code":"  it('should map req.body & req.query onto req.params', function (done) {\n    SERVER.use(restify.plugins.queryParser({\n      mapParams: true\n    }));\n    SERVER.use(restify.plugins.bodyParser({\n      mapParams: true\n    }));\n    SERVER.post('/bodyurl2/:id', function (req, res, next) {\n      assert.equal(req.query.name, 'markc');\n      assert.equal(req.body.phone, '(206) 555-1212');\n      assert.equal(req.body.name, 'somethingelse');\n      assert.equal(req.params.id, 'foo');\n      assert.equal(req.params.name, 'markc');\n      assert.equal(req.params.phone, '(206) 555-1212');\n      res.send();\n      next();\n    });\n    var opts = {\n      hostname: '127.0.0.1',\n      port: PORT,\n      path: '/bodyurl2/foo?name=markc',\n      agent: false,\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded'\n      }\n    };\n    var client = http.request(opts, function (res) {\n      assert.equal(res.statusCode, 200);\n      done();\n    });\n    client.write('phone=(206)%20555-1212&name=somethingelse');\n    client.end();\n  });","file":"plugins/formBodyParser.test.js","skipped":false,"dir":"test"},{"name":"should take req.body and stomp on req.params","suites":["form body parser"],"updatePoint":{"line":94,"column":50,"index":2658},"line":94,"code":"  it('should take req.body and stomp on req.params', function (done) {\n    SERVER.use(restify.plugins.queryParser({\n      mapParams: true\n    }));\n    SERVER.use(restify.plugins.bodyParser({\n      mapParams: true,\n      overrideParams: true\n    }));\n    SERVER.post('/bodyurl2/:id', function (req, res, next) {\n      assert.equal(req.query.name, 'markc');\n      assert.equal(req.body.phone, '(206) 555-1212');\n      assert.equal(req.body.name, 'somethingelse');\n      assert.equal(req.params.id, 'foo');\n      assert.equal(req.params.name, 'somethingelse');\n      assert.equal(req.params.phone, '(206) 555-1212');\n      res.send();\n      next();\n    });\n    var opts = {\n      hostname: '127.0.0.1',\n      port: PORT,\n      path: '/bodyurl2/foo?name=markc',\n      agent: false,\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded'\n      }\n    };\n    var client = http.request(opts, function (res) {\n      assert.equal(res.statusCode, 200);\n      done();\n    });\n    client.write('phone=(206)%20555-1212&name=somethingelse');\n    client.end();\n  });","file":"plugins/formBodyParser.test.js","skipped":false,"dir":"test"},{"name":"should parse associative array syntax","suites":["form body parser"],"updatePoint":{"line":129,"column":43,"index":3746},"line":129,"code":"  it('should parse associative array syntax', function (done) {\n    SERVER.use(restify.plugins.bodyParser());\n    SERVER.post('/bodyurl2/:id', function (req, res, next) {\n      assert.isObject(req.body.name);\n      assert.equal(req.body.name.first, 'alex');\n      assert.equal(req.body.name.last, 'liu');\n      res.send();\n      next();\n    });\n    var opts = {\n      hostname: '127.0.0.1',\n      port: PORT,\n      path: '/bodyurl2/foo',\n      agent: false,\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded'\n      }\n    };\n    var client = http.request(opts, function (res) {\n      assert.equal(res.statusCode, 200);\n      done();\n    });\n    client.write('name[first]=alex&name[last]=liu');\n    client.end();\n  });","file":"plugins/formBodyParser.test.js","skipped":false,"dir":"test"},{"name":"should parse array syntax","suites":["form body parser"],"updatePoint":{"line":155,"column":31,"index":4499},"line":155,"code":"  it('should parse array syntax', function (done) {\n    SERVER.use(restify.plugins.bodyParser());\n    SERVER.post('/bodyurl2/:id', function (req, res, next) {\n      assert.isArray(req.body.meat);\n      assert.deepEqual(req.body.meat, ['ham', 'bacon']);\n      res.send();\n      next();\n    });\n    var opts = {\n      hostname: '127.0.0.1',\n      port: PORT,\n      path: '/bodyurl2/foo',\n      agent: false,\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded'\n      }\n    };\n    var client = http.request(opts, function (res) {\n      assert.equal(res.statusCode, 200);\n      done();\n    });\n    client.write('meat[]=ham&meat[]=bacon');\n    client.end();\n  });","file":"plugins/formBodyParser.test.js","skipped":false,"dir":"test"},{"name":"should parse nested array syntax","suites":["form body parser"],"updatePoint":{"line":180,"column":38,"index":5211},"line":180,"code":"  it('should parse nested array syntax', function (done) {\n    SERVER.use(restify.plugins.bodyParser());\n    SERVER.post('/bodyurl2/:id', function (req, res, next) {\n      assert.isObject(req.body.pizza);\n      assert.isArray(req.body.pizza.left);\n      assert.isArray(req.body.pizza.right);\n      assert.deepEqual(req.body.pizza.left, ['ham', 'bacon']);\n      assert.deepEqual(req.body.pizza.right, ['pineapple']);\n      res.send();\n      next();\n    });\n    var opts = {\n      hostname: '127.0.0.1',\n      port: PORT,\n      path: '/bodyurl2/foo',\n      agent: false,\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded'\n      }\n    };\n    var client = http.request(opts, function (res) {\n      assert.equal(res.statusCode, 200);\n      done();\n    });\n    var p = 'pizza[left][]=ham&pizza[left][]=bacon&' + 'pizza[right][]=pineapple';\n    client.write(p);\n    client.end();\n  });","file":"plugins/formBodyParser.test.js","skipped":false,"dir":"test"},{"name":"plugins-GH-6: should expose rawBody","suites":["form body parser"],"updatePoint":{"line":209,"column":41,"index":6141},"line":209,"code":"  it('plugins-GH-6: should expose rawBody', function (done) {\n    var input = 'name[first]=alex&name[last]=liu';\n    SERVER.use(restify.plugins.bodyParser());\n    SERVER.post('/bodyurl2/:id', function (req, res, next) {\n      assert.equal(req.rawBody, input);\n      res.send();\n      next();\n    });\n    var opts = {\n      hostname: '127.0.0.1',\n      port: PORT,\n      path: '/bodyurl2/foo',\n      agent: false,\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded'\n      }\n    };\n    var client = http.request(opts, function (res) {\n      assert.equal(res.statusCode, 200);\n      done();\n    });\n    client.write(input);\n    client.end();\n  });","file":"plugins/formBodyParser.test.js","skipped":false,"dir":"test"},{"name":"should gzip response","suites":["gzip parser"],"updatePoint":{"line":37,"column":26,"index":855},"line":37,"code":"  it('should gzip response', function (done) {\n    SERVER.use(restify.plugins.gzipResponse());\n    SERVER.get('/gzip/:id', function (req, res, next) {\n      res.send({\n        hello: 'world'\n      });\n      next();\n    });\n    var opts = {\n      path: '/gzip/foo',\n      headers: {\n        'Accept-Encoding': 'gzip'\n      }\n    };\n    CLIENT.get(opts, function (err, _, res, obj) {\n      assert.ifError(err);\n      assert.deepEqual({\n        hello: 'world'\n      }, obj);\n      done();\n    });\n  });","file":"plugins/gzip.test.js","skipped":false,"dir":"test"},{"name":"gzip large response","suites":["gzip parser"],"updatePoint":{"line":59,"column":25,"index":1354},"line":59,"code":"  it('gzip large response', function (done) {\n    var testResponseSize = 65536 * 3;\n    var TestStream = function () {\n      this.readable = true;\n      this.sentSize = 0;\n      this.totalSize = testResponseSize;\n      this.interval = null;\n    };\n    require('util').inherits(TestStream, require('stream'));\n    TestStream.prototype.resume = function () {\n      var self = this;\n      if (!this.interval) {\n        this.interval = setInterval(function () {\n          var chunkSize = Math.min(self.totalSize - self.sentSize, 65536);\n          if (chunkSize > 0) {\n            var chunk = new Array(chunkSize + 1);\n            chunk = chunk.join('a');\n            self.emit('data', chunk);\n            self.sentSize += chunkSize;\n          } else {\n            self.emit('data', '\"}');\n            self.emit('end');\n            self.pause();\n          }\n        }, 1);\n      }\n    };\n    TestStream.prototype.pause = function () {\n      clearInterval(this.interval);\n      this.interval = null;\n    };\n    var bodyStream = new TestStream();\n    SERVER.use(restify.plugins.gzipResponse());\n    SERVER.get('/gzip/:id', function (req, res, next) {\n      bodyStream.resume();\n      res.write('{\"foo\":\"');\n      bodyStream.pipe(res);\n      bodyStream.on('end', function () {\n        next();\n      });\n    });\n    var opts = {\n      path: '/gzip/foo',\n      headers: {\n        'Accept-Encoding': 'gzip'\n      }\n    };\n    CLIENT.get(opts, function (err, _, res, obj) {\n      assert.ifError(err);\n      var expectedResponse = {\n        foo: new Array(testResponseSize + 1).join('a')\n      };\n      assert.deepEqual(expectedResponse, obj);\n      done();\n    });\n  });","file":"plugins/gzip.test.js","skipped":false,"dir":"test"},{"name":"gzip body json ok","suites":["gzip parser"],"updatePoint":{"line":115,"column":23,"index":3011},"line":115,"code":"  it('gzip body json ok', function (done) {\n    SERVER.use(restify.plugins.gzipResponse());\n    SERVER.use(restify.plugins.queryParser({\n      mapParams: true\n    }));\n    SERVER.use(restify.plugins.bodyParser({\n      mapParams: true\n    }));\n    SERVER.post('/body/:id', function (req, res, next) {\n      assert.equal(req.params.id, 'foo');\n      assert.equal(req.params.name, 'markc');\n      assert.equal(req.params.phone, '(206) 555-1212');\n      res.send();\n      next();\n    });\n    var obj = {\n      phone: '(206) 555-1212',\n      name: 'somethingelse'\n    };\n    CLIENT.gzip = {};\n    CLIENT.post('/body/foo?name=markc', obj, function (err, _, res) {\n      assert.ifError(err);\n      assert.ok(res);\n      if (res) {\n        assert.equal(res.statusCode, 200);\n      }\n      done();\n    });\n  });","file":"plugins/gzip.test.js","skipped":false,"dir":"test"},{"name":"Unit: Should shed load","suites":["inlfightRequestThrottle"],"updatePoint":{"line":16,"column":28,"index":437},"line":16,"code":"  it('Unit: Should shed load', function (done) {\n    var logged = false;\n    var opts = {\n      server: fakeServer(10),\n      limit: 1\n    };\n    var plugin = inflightRequestThrottle(opts);\n    function send(body) {\n      assert(logged, 'Should have emitted a log');\n      assert.equal(body.statusCode, 503, 'Defaults to 503 status');\n      assert(body instanceof Error, 'Defaults to error body');\n      done();\n    }\n    function next(err) {\n      assert.equal(err.name, 'ServiceUnavailableError');\n      done();\n    }\n    function trace() {\n      logged = true;\n    }\n    var log = {\n      trace: trace\n    };\n    var fakeReq = {\n      log: log\n    };\n    plugin(fakeReq, {\n      send: send\n    }, next);\n  });","file":"plugins/inflightRequestThrottle.test.js","skipped":false,"dir":"test"},{"name":"Unit: Should support custom response","suites":["inlfightRequestThrottle"],"updatePoint":{"line":46,"column":42,"index":1164},"line":46,"code":"  it('Unit: Should support custom response', function (done) {\n    var server = fakeServer(10);\n    var err = new Error('foo');\n    var opts = {\n      server: server,\n      limit: 1,\n      err: err\n    };\n    var plugin = inflightRequestThrottle(opts);\n    function send(body) {\n      assert.equal(body, err, 'Overrides body');\n    }\n    function next(nextErr) {\n      assert.equal(err, nextErr);\n      done();\n    }\n    var fakeReq = {\n      log: {\n        trace: function () {}\n      }\n    };\n    plugin(fakeReq, {\n      send: send\n    }, next);\n  });","file":"plugins/inflightRequestThrottle.test.js","skipped":false,"dir":"test"},{"name":"Unit: Should let request through when not under load","suites":["inlfightRequestThrottle"],"updatePoint":{"line":71,"column":58,"index":1734},"line":71,"code":"  it('Unit: Should let request through when not under load', function (done) {\n    var opts = {\n      server: fakeServer(1),\n      limit: 2\n    };\n    var plugin = inflightRequestThrottle(opts);\n    function send() {\n      assert(false, 'Should not call send');\n    }\n    function next(cont) {\n      assert.isUndefined(cont, 'Should call next');\n      done();\n    }\n    var fakeReq = {\n      log: {\n        trace: function () {}\n      }\n    };\n    plugin(fakeReq, {\n      send: send\n    }, next);\n  });","file":"plugins/inflightRequestThrottle.test.js","skipped":false,"dir":"test"},{"name":"Integration: Should shed load","suites":["inlfightRequestThrottle"],"updatePoint":{"line":93,"column":35,"index":2214},"line":93,"code":"  it('Integration: Should shed load', function (done) {\n    var server = restify.createServer();\n    var client = {\n      close: function () {}\n    };\n    var isDone = false;\n    var to;\n    function finish() {\n      if (isDone) {\n        return null;\n      }\n      clearTimeout(to);\n      isDone = true;\n      client.close();\n      server.close();\n      return done();\n    }\n    to = setTimeout(finish, 2000);\n    var err = new Error('foo');\n    err.statusCode = 555;\n    var opts = {\n      server: server,\n      limit: 1,\n      err: err\n    };\n    server.pre(inflightRequestThrottle(opts));\n    var RES;\n    server.get('/foo', function (req, res, next) {\n      if (RES) {\n        res.send(999);\n      } else {\n        RES = res;\n      }\n    });\n    server.listen(0, '127.0.0.1', function () {\n      client = restifyClients.createJsonClient({\n        url: 'http://127.0.0.1:' + server.address().port,\n        retry: false\n      });\n      client.get({\n        path: '/foo'\n      }, function (e, _, res) {\n        assert(e === null || e === undefined, 'First request isnt shed');\n        assert.equal(res.statusCode, 200, '200 returned on success');\n        finish();\n      });\n      client.get({\n        path: '/foo'\n      }, function (e, _, res) {\n        assert(e, 'Second request is shed');\n        assert.equal(e.name, 'InternalServerError', 'Default err returned');\n        assert.equal(res.statusCode, 555, 'Default shed status code returned');\n        if (RES) {\n          RES.send(200);\n        }\n      });\n    });\n  });","file":"plugins/inflightRequestThrottle.test.js","skipped":false,"dir":"test"},{"name":"should parse null JSON body","suites":["JSON body parser"],"updatePoint":{"line":51,"column":33,"index":1245},"line":51,"code":"  it('should parse null JSON body', function (done) {\n    SERVER.use(restify.plugins.jsonBodyParser({\n      mapParams: true\n    }));\n    SERVER.post('/body/:id', function (req, res, next) {\n      assert.equal(req.params.id, 'foo');\n      assert.equal(req.body, null);\n      res.send();\n      next();\n    });\n    STRING_CLIENT.post('/body/foo?name=markc', 'null', function (err, _, res) {\n      assert.ifError(err);\n      assert.equal(res.statusCode, 200);\n      done();\n    });\n  });","file":"plugins/jsonBodyParser.test.js","skipped":false,"dir":"test"},{"name":"should parse empty JSON body","suites":["JSON body parser"],"updatePoint":{"line":67,"column":34,"index":1730},"line":67,"code":"  it('should parse empty JSON body', function (done) {\n    SERVER.use(restify.plugins.jsonBodyParser());\n    SERVER.post('/body/:id', function (req, res, next) {\n      assert.equal(req.params.id, 'foo');\n      assert.deepEqual(req.body, {});\n      res.send();\n      next();\n    });\n    CLIENT.post('/body/foo', null, function (err, _, res) {\n      assert.ifError(err);\n      assert.equal(res.statusCode, 200);\n      done();\n    });\n  });","file":"plugins/jsonBodyParser.test.js","skipped":false,"dir":"test"},{"name":"should parse req.body and req.params independently","suites":["JSON body parser"],"updatePoint":{"line":81,"column":56,"index":2190},"line":81,"code":"  it('should parse req.body and req.params independently', function (done) {\n    SERVER.use(restify.plugins.jsonBodyParser());\n    SERVER.post('/body/:id', function (req, res, next) {\n      assert.equal(req.params.id, 'foo');\n      assert.equal(req.body.id, 'bar');\n      assert.equal(req.body.name, 'alex');\n      assert.notDeepEqual(req.body, req.params);\n      res.send();\n      next();\n    });\n    CLIENT.post('/body/foo', {\n      id: 'bar',\n      name: 'alex'\n    }, function (err, _, res) {\n      assert.ifError(err);\n      assert.equal(res.statusCode, 200);\n      done();\n    });\n  });","file":"plugins/jsonBodyParser.test.js","skipped":false,"dir":"test"},{"name":"should fail to map array req.body onto req.params","suites":["JSON body parser"],"updatePoint":{"line":100,"column":55,"index":2782},"line":100,"code":"  it('should fail to map array req.body onto req.params', function (done) {\n    SERVER.use(restify.plugins.jsonBodyParser({\n      mapParams: true\n    }));\n    SERVER.post('/body/:id', function (req, res, next) {\n      // this handler should never be reached\n      res.send();\n      next();\n    });\n    CLIENT.post('/body/foo', [1, 2, 3], function (err, _, res) {\n      assert.ok(err);\n      assert.equal(err.name, 'InternalServerError');\n      assert.equal(res.statusCode, 500);\n      done();\n    });\n  });","file":"plugins/jsonBodyParser.test.js","skipped":false,"dir":"test"},{"name":"should map req.body onto req.params","suites":["JSON body parser"],"updatePoint":{"line":118,"column":41,"index":3319},"line":118,"code":"  it('should map req.body onto req.params', function (done) {\n    SERVER.use(restify.plugins.jsonBodyParser({\n      mapParams: true\n    }));\n    SERVER.post('/body/:id', function (req, res, next) {\n      assert.equal(req.params.id, 'foo');\n      assert.equal(req.params.name, 'alex');\n      assert.notDeepEqual(req.body, req.params);\n      res.send();\n      next();\n    });\n    CLIENT.post('/body/foo', {\n      id: 'bar',\n      name: 'alex'\n    }, function (err, _, res) {\n      assert.ifError(err);\n      assert.equal(res.statusCode, 200);\n      done();\n    });\n  });","file":"plugins/jsonBodyParser.test.js","skipped":false,"dir":"test"},{"name":"should take req.body and stomp on req.params","suites":["JSON body parser"],"updatePoint":{"line":138,"column":50,"index":3897},"line":138,"code":"  it('should take req.body and stomp on req.params', function (done) {\n    SERVER.use(restify.plugins.jsonBodyParser({\n      mapParams: true,\n      overrideParams: true\n    }));\n    SERVER.post('/body/:id', function (req, res, next) {\n      assert.equal(req.params.id, 'bar');\n      assert.equal(req.params.name, 'alex');\n      assert.deepEqual(req.body, req.params);\n      res.send();\n      next();\n    });\n    CLIENT.post('/body/foo', {\n      id: 'bar',\n      name: 'alex'\n    }, function (err, _, res) {\n      assert.ifError(err);\n      assert.equal(res.statusCode, 200);\n      done();\n    });\n  });","file":"plugins/jsonBodyParser.test.js","skipped":false,"dir":"test"},{"name":"should parse JSON body with reviver","suites":["JSON body parser"],"updatePoint":{"line":159,"column":41,"index":4491},"line":159,"code":"  it('should parse JSON body with reviver', function (done) {\n    SERVER.use(restify.plugins.jsonBodyParser({\n      reviver: function reviver(key, value) {\n        if (key === '') {\n          return value;\n        }\n        return value + value;\n      }\n    }));\n    SERVER.post('/body/:id', function (req, res, next) {\n      assert.equal(req.params.id, 'foo');\n      assert.equal(req.body.apple, 'redred');\n      assert.equal(req.body.orange, 'orangeorange');\n      assert.equal(req.body.banana, 'yellowyellow');\n      res.send();\n      next();\n    });\n    CLIENT.post('/body/foo', {\n      apple: 'red',\n      orange: 'orange',\n      banana: 'yellow'\n    }, function (err, _, res) {\n      assert.ifError(err);\n      assert.equal(res.statusCode, 200);\n      done();\n    });\n  });","file":"plugins/jsonBodyParser.test.js","skipped":false,"dir":"test"},{"name":"restify-GH-318 get request with body (default)","suites":["JSON body parser"],"updatePoint":{"line":186,"column":52,"index":5282},"line":186,"code":"  it('restify-GH-318 get request with body (default)', function (done) {\n    SERVER.use(restify.plugins.bodyParser({\n      mapParams: true\n    }));\n    SERVER.get('/getWithoutBody', function (req, res, next) {\n      assert.notEqual(req.params.foo, 'bar');\n      res.send();\n      next();\n    });\n    var request = 'GET /getWithoutBody HTTP/1.1\\r\\n' + 'Content-Type: application/json\\r\\n' + 'Content-Length: 13\\r\\n' + '\\r\\n' + '{\"foo\":\"bar\"}';\n    var client = net.connect({\n      host: '127.0.0.1',\n      port: PORT\n    }, function () {\n      client.write(request);\n    });\n    client.once('data', function (data) {\n      client.end();\n    });\n    client.once('end', function () {\n      done();\n    });\n  });","file":"plugins/jsonBodyParser.test.js","skipped":false,"dir":"test"},{"name":"restify-GH-318 get request with body (requestBodyOnGet=true)","suites":["JSON body parser"],"updatePoint":{"line":211,"column":66,"index":6036},"line":211,"code":"  it('restify-GH-318 get request with body (requestBodyOnGet=true)', function (done) {\n    SERVER.use(restify.plugins.bodyParser({\n      mapParams: true,\n      requestBodyOnGet: true\n    }));\n    SERVER.get('/getWithBody', function (req, res, next) {\n      assert.equal(req.params.foo, 'bar');\n      res.send();\n      next();\n    });\n    var request = 'GET /getWithBody HTTP/1.1\\r\\n' + 'Content-Type: application/json\\r\\n' + 'Content-Length: 13\\r\\n' + '\\r\\n' + '{\"foo\":\"bar\"}';\n    var client = net.connect({\n      host: '127.0.0.1',\n      port: PORT\n    }, function () {\n      client.write(request);\n    });\n    client.once('data', function (data) {\n      client.end();\n    });\n    client.once('end', function () {\n      done();\n    });\n  });","file":"plugins/jsonBodyParser.test.js","skipped":false,"dir":"test"},{"name":"restify-GH-111 JSON Parser not right for arrays","suites":["JSON body parser"],"updatePoint":{"line":235,"column":53,"index":6767},"line":235,"code":"  it('restify-GH-111 JSON Parser not right for arrays', function (done) {\n    SERVER.use(restify.plugins.bodyParser({\n      mapParams: true\n    }));\n    SERVER.post('/gh111', function (req, res, next) {\n      assert.ok(Array.isArray(req.params));\n      assert.equal(req.params[0], 'foo');\n      assert.equal(req.params[1], 'bar');\n      res.send();\n      next();\n    });\n    var obj = ['foo', 'bar'];\n    CLIENT.post('/gh111', obj, function (err, _, res) {\n      assert.ifError(err);\n      assert.equal(res.statusCode, 200);\n      done();\n    });\n  });","file":"plugins/jsonBodyParser.test.js","skipped":false,"dir":"test"},{"name":"restify-GH-279 more JSON Arrays","suites":["JSON body parser"],"updatePoint":{"line":253,"column":37,"index":7304},"line":253,"code":"  it('restify-GH-279 more JSON Arrays', function (done) {\n    SERVER.use(restify.plugins.jsonBodyParser({\n      mapParams: true\n    }));\n    SERVER.post('/gh279', function respond(req, res, next) {\n      assert.ok(Array.isArray(req.params));\n      assert.equal(req.params[0].id, '123654');\n      assert.ok(req.params[0].name, 'mimi');\n      assert.ok(req.params[1].id, '987654');\n      assert.ok(req.params[1].name, 'pijama');\n      res.send(200);\n      next();\n    });\n    var obj = [{\n      id: '123654',\n      name: 'mimi'\n    }, {\n      id: '987654',\n      name: 'pijama'\n    }];\n    CLIENT.post('/gh279', obj, function (err, _, res) {\n      assert.ifError(err);\n      assert.equal(res.statusCode, 200);\n      done();\n    });\n  });","file":"plugins/jsonBodyParser.test.js","skipped":false,"dir":"test"},{"name":"restify-GH-774 utf8 corruption in body parser","suites":["JSON body parser"],"updatePoint":{"line":279,"column":51,"index":8054},"line":279,"code":"  it('restify-GH-774 utf8 corruption in body parser', function (done) {\n    var slen = 100000;\n    SERVER.use(restify.plugins.bodyParser());\n    SERVER.post('/utf8', function (req, res, next) {\n      assert.notOk(/\\ufffd/.test(req.body.text));\n      assert.equal(req.body.text.length, slen);\n      res.send({\n        len: req.body.text.length\n      });\n      next();\n    });\n\n    // create a long string of unicode characters\n    var tx = '';\n    for (var i = 0; i < slen; ++i) {\n      tx += '\\u2661';\n    }\n    CLIENT.post('/utf8', {\n      text: tx\n    }, function (err, _, res) {\n      assert.ifError(err);\n      assert.equal(res.statusCode, 200);\n      done();\n    });\n  });","file":"plugins/jsonBodyParser.test.js","skipped":false,"dir":"test"},{"name":"restify-GH-149 limit request body size","suites":["JSON body parser"],"updatePoint":{"line":304,"column":44,"index":8725},"line":304,"code":"  it('restify-GH-149 limit request body size', function (done) {\n    SERVER.use(restify.plugins.bodyParser({\n      maxBodySize: 1024\n    }));\n    SERVER.post('/', function (req, res, next) {\n      res.send(200, {\n        length: req.body.length\n      });\n      next();\n    });\n    var opts = {\n      hostname: '127.0.0.1',\n      port: PORT,\n      path: '/',\n      method: 'POST',\n      agent: false,\n      headers: {\n        accept: 'application/json',\n        'content-type': 'application/x-www-form-urlencoded',\n        'transfer-encoding': 'chunked'\n      }\n    };\n    var client = http.request(opts, function (res) {\n      assert.equal(res.statusCode, 413);\n      res.once('end', done);\n      res.resume();\n    });\n    client.write(new Array(1028).join('x'));\n    client.end();\n  });","file":"plugins/jsonBodyParser.test.js","skipped":false,"dir":"test"},{"name":"restify-GH-149 limit request body size (json)","suites":["JSON body parser"],"updatePoint":{"line":334,"column":51,"index":9520},"line":334,"code":"  it('restify-GH-149 limit request body size (json)', function (done) {\n    SERVER.use(restify.plugins.bodyParser({\n      maxBodySize: 1024\n    }));\n    SERVER.post('/', function (req, res, next) {\n      res.send(200, {\n        length: req.body.length\n      });\n      next();\n    });\n    var opts = {\n      hostname: '127.0.0.1',\n      port: PORT,\n      path: '/',\n      method: 'POST',\n      agent: false,\n      headers: {\n        accept: 'application/json',\n        'content-type': 'application/json',\n        'transfer-encoding': 'chunked'\n      }\n    };\n    var client = http.request(opts, function (res) {\n      assert.equal(res.statusCode, 413);\n      res.once('end', done);\n      res.resume();\n    });\n    client.write('{\"a\":[' + new Array(512).join('1,') + '0]}');\n    client.end();\n  });","file":"plugins/jsonBodyParser.test.js","skipped":false,"dir":"test"},{"name":"plugins-GH-6: should expose rawBody","suites":["JSON body parser"],"updatePoint":{"line":364,"column":41,"index":10307},"line":364,"code":"  it('plugins-GH-6: should expose rawBody', function (done) {\n    var payload = {\n      id: 'bar',\n      name: 'alex'\n    };\n    SERVER.use(restify.plugins.jsonBodyParser());\n    SERVER.post('/body/:id', function (req, res, next) {\n      assert.equal(req.rawBody, JSON.stringify(payload));\n      assert.equal(req.body.id, 'bar');\n      assert.equal(req.body.name, 'alex');\n      res.send();\n      next();\n    });\n    CLIENT.post('/body/foo', payload, done);\n  });","file":"plugins/jsonBodyParser.test.js","skipped":false,"dir":"test"},{"name":"should not throw uncaught \"too few args to sprintf\"","suites":["JSON body parser"],"updatePoint":{"line":379,"column":57,"index":10787},"line":379,"code":"  it('should not throw uncaught \"too few args to sprintf\"', function (done) {\n    // https://github.com/restify/node-restify/issues/1411\n    SERVER.use(restify.plugins.bodyParser());\n    SERVER.post('/', function (req, res, next) {\n      res.send();\n      next();\n    });\n    var opts = {\n      hostname: '127.0.0.1',\n      port: PORT,\n      path: '/',\n      method: 'POST',\n      agent: false,\n      headers: {\n        accept: 'application/json',\n        'content-type': 'application/json'\n      }\n    };\n    var client = http.request(opts, function (res) {\n      assert.equal(res.statusCode, 400);\n      res.once('end', done);\n      res.resume();\n    });\n    client.write('{\"malformedJsonWithPercentSign\":30%}');\n    client.end();\n  });","file":"plugins/jsonBodyParser.test.js","skipped":false,"dir":"test"},{"name":"should handle application/*+json as application/json","suites":["JSON body parser"],"updatePoint":{"line":405,"column":58,"index":11527},"line":405,"code":"  it('should handle application/*+json as application/json', function (done) {\n    SERVER.use(restify.plugins.bodyParser({\n      maxBodySize: 1024\n    }));\n    SERVER.post('/', function (req, res, next) {\n      res.send(200, {\n        length: req.body.length\n      });\n      next();\n    });\n    var opts = {\n      hostname: '127.0.0.1',\n      port: PORT,\n      path: '/',\n      method: 'POST',\n      agent: false,\n      headers: {\n        accept: 'application/json',\n        'content-type': 'application/hal+json',\n        'transfer-encoding': 'chunked'\n      }\n    };\n    var client = http.request(opts, function (res) {\n      assert.equal(res.statusCode, 413);\n      res.once('end', done);\n      res.resume();\n    });\n    client.write('{\"a\":[' + new Array(512).join('1,') + '0]}');\n    client.end();\n  });","file":"plugins/jsonBodyParser.test.js","skipped":false,"dir":"test"},{"name":"should return metrics for a given request","suites":["request metrics plugin"],"updatePoint":{"line":45,"column":47,"index":1271},"line":45,"code":"  it('should return metrics for a given request', function (done) {\n    SERVER.on('uncaughtException', function (req, res, route, err) {\n      assert.ifError(err);\n    });\n    SERVER.on('after', restify.plugins.metrics({\n      server: SERVER\n    }, function (err, metrics, req, res, route) {\n      assert.ifError(err);\n      assert.isObject(metrics, 'metrics');\n      assert.equal(metrics.statusCode, 202);\n      assert.isAtLeast(metrics.preLatency, adjustExpectedLatency(50, 1));\n      assert.isAtLeast(metrics.useLatency, adjustExpectedLatency(50, 1));\n      assert.isAtLeast(metrics.routeLatency, adjustExpectedLatency(50, 1));\n      assert.isAtLeast(metrics.latency, adjustExpectedLatency(150, 3));\n      assert.isAtLeast(metrics.totalLatency, adjustExpectedLatency(150, 3));\n      assert.equal(metrics.path, '/foo');\n      assert.equal(metrics.connectionState, undefined);\n      assert.equal(metrics.method, 'GET');\n      assert.isNumber(metrics.inflightRequests);\n      assert.isObject(req, 'req');\n      assert.isObject(res, 'res');\n      assert.isObject(route, 'route');\n    }));\n    SERVER.pre(function (req, res, next) {\n      setTimeout(function () {\n        return next();\n      }, 50);\n    });\n    SERVER.use(function (req, res, next) {\n      setTimeout(function () {\n        return next();\n      }, 50);\n    });\n    SERVER.get('/foo', function (req, res, next) {\n      setTimeout(function () {\n        res.send(202, 'hello world');\n        return next();\n      }, 50);\n    });\n    CLIENT.get('/foo?a=1', function (err, _, res) {\n      assert.ifError(err);\n      assert.equal(res.statusCode, 202);\n      return done();\n    });\n  });","file":"plugins/metrics.test.js","skipped":false,"dir":"test"},{"name":"should return metrics with pre error","suites":["request metrics plugin"],"updatePoint":{"line":90,"column":42,"index":2912},"line":90,"code":"  it('should return metrics with pre error', function (done) {\n    SERVER.on('uncaughtException', function (req, res, route, err) {\n      assert.ok(err);\n      res.send(err);\n    });\n    SERVER.on('after', restify.plugins.metrics({\n      server: SERVER\n    }, function (err, metrics, req, res, route) {\n      assert.ok(err);\n      assert.isObject(metrics, 'metrics');\n      assert.isAtLeast(metrics.preLatency, adjustExpectedLatency(50, 1));\n      assert.equal(metrics.useLatency, null);\n      assert.equal(metrics.routeLatency, null);\n      assert.isAtLeast(metrics.latency, adjustExpectedLatency(50, 1));\n      return done();\n    }));\n    SERVER.pre(function (req, res, next) {\n      setTimeout(function () {\n        return next(new Error('My Error'));\n      }, 50);\n    });\n    CLIENT.get('/foo?a=1', function (err, _, res) {\n      assert.ok(err);\n    });\n  });","file":"plugins/metrics.test.js","skipped":false,"dir":"test"},{"name":"should return metrics with use error","suites":["request metrics plugin"],"updatePoint":{"line":115,"column":42,"index":3777},"line":115,"code":"  it('should return metrics with use error', function (done) {\n    SERVER.on('uncaughtException', function (req, res, route, err) {\n      assert.ok(err);\n      res.send(err);\n    });\n    SERVER.on('after', restify.plugins.metrics({\n      server: SERVER\n    }, function (err, metrics, req, res, route) {\n      assert.ok(err);\n      assert.isObject(metrics, 'metrics');\n      assert.isAtLeast(metrics.preLatency, 0);\n      assert.isAtLeast(metrics.useLatency, adjustExpectedLatency(50, 1));\n      assert.equal(metrics.routeLatency, null);\n      assert.isAtLeast(metrics.latency, adjustExpectedLatency(50, 1));\n      return done();\n    }));\n    SERVER.use(function (req, res, next) {\n      setTimeout(function () {\n        return next(new Error('My Error'));\n      }, 50);\n    });\n    SERVER.get('/foo', function (req, res, next) {\n      res.send(202, 'hello world');\n      return next();\n    });\n    CLIENT.get('/foo?a=1', function (err, _, res) {\n      assert.ok(err);\n    });\n  });","file":"plugins/metrics.test.js","skipped":false,"dir":"test"},{"name":"should return 'RequestCloseError' err","suites":["request metrics plugin"],"updatePoint":{"line":144,"column":43,"index":4760},"line":144,"code":"  it(\"should return 'RequestCloseError' err\", function (done) {\n    // we test that the client times out and closes the request. server\n    // flushes request responsibly but connectionState should indicate it\n    // was closed by the server.\n\n    SERVER.on('uncaughtException', function (req, res, route, err) {\n      assert.ifError(err);\n    });\n    SERVER.on('after', restify.plugins.metrics({\n      server: SERVER\n    }, function (err, metrics, req, res, route) {\n      assert.ok(err);\n      assert.equal(err.name, 'RequestCloseError');\n      assert.isObject(metrics, 'metrics');\n      // router doesn't run\n      assert.equal(metrics.statusCode, 444);\n      assert.isAtLeast(metrics.preLatency, adjustExpectedLatency(50, 1));\n      assert.isAtLeast(metrics.useLatency, adjustExpectedLatency(50, 1));\n      assert.isAtLeast(metrics.routeLatency, adjustExpectedLatency(250, 1));\n\n      // The request timeout value is 200 client side, but the\n      // overall latency is computed on the server, so we're\n      // tolerating a 10ms difference. This is inherently flaky.\n      assert.isAtLeast(metrics.latency, 200 - 10);\n\n      // latency should be lower as request timeouts\n      assert.isAbove(metrics.routeLatency, metrics.latency);\n      assert.equal(metrics.path, '/foo');\n      assert.equal(metrics.method, 'GET');\n      assert.equal(metrics.connectionState, 'close');\n      assert.isNumber(metrics.inflightRequests);\n      return done();\n    }));\n    SERVER.pre(function (req, res, next) {\n      setTimeout(function () {\n        return next();\n      }, 50);\n    });\n    SERVER.use(function (req, res, next) {\n      setTimeout(function () {\n        return next();\n      }, 50);\n    });\n    SERVER.get('/foo', function (req, res, next) {\n      setTimeout(function () {\n        return next();\n      }, 250);\n    }, function (req, res, next) {\n      assert.fail('Client has already closed request');\n      res.send(202, 'hello world');\n      return next();\n    });\n    CLIENT.get({\n      path: '/foo?a=1',\n      requestTimeout: 200\n    }, function (err, _, res) {\n      // request should timeout\n      assert.ok(err);\n      assert.equal(err.name, 'RequestTimeoutError');\n    });\n  });","file":"plugins/metrics.test.js","skipped":false,"dir":"test"},{"name":"should handle uncaught exceptions","suites":["request metrics plugin"],"updatePoint":{"line":205,"column":39,"index":6946},"line":205,"code":"  it('should handle uncaught exceptions', function (done) {\n    // we test that the client times out and closes the request. server\n    // flushes request responsibly but connectionState should indicate it\n    // was closed by the server.\n\n    SERVER.on('after', restify.plugins.metrics({\n      server: SERVER\n    },\n    // TODO: test timeouts if any of the following asserts fails\n    function (err, metrics, req, res, route) {\n      assert.ok(err);\n      assert.equal(err.name, 'Error');\n      assert.equal(err.message, 'boom');\n      assert.isObject(err.domain);\n      assert.isObject(metrics, 'metrics');\n      assert.equal(metrics.statusCode, 500);\n      assert.isNumber(metrics.latency);\n      assert.equal(metrics.path, '/foo');\n      assert.equal(metrics.method, 'GET');\n      assert.equal(metrics.connectionState, undefined);\n      assert.isNumber(metrics.inflightRequests);\n      return done();\n    }));\n    SERVER.get('/foo', function (req, res, next) {\n      throw new Error('boom');\n    });\n    CLIENT.get('/foo?a=1', function (err, _, res) {\n      assert.ok(err);\n    });\n  });","file":"plugins/metrics.test.js","skipped":false,"dir":"test"},{"name":"body multipart ok","suites":["multipart parser"],"updatePoint":{"line":36,"column":23,"index":765},"line":36,"code":"  it('body multipart ok', function (done) {\n    SERVER.use(restify.plugins.queryParser({\n      mapParams: true\n    }));\n    SERVER.use(restify.plugins.bodyParser({\n      mapParams: true\n    }));\n    SERVER.post('/multipart/:id', function (req, res, next) {\n      assert.equal(req.params.id, 'foo');\n      assert.equal(req.params.mood, 'happy');\n      assert.equal(req.params.endorphins, '9000');\n      res.send();\n      next();\n    });\n    var opts = {\n      hostname: '127.0.0.1',\n      port: PORT,\n      path: '/multipart/foo?mood=happy',\n      agent: false,\n      method: 'POST',\n      headers: {\n        'Content-Type': 'multipart/form-data; boundary=huff'\n      }\n    };\n    var client = http.request(opts, function (res) {\n      assert.equal(res.statusCode, 200);\n      done();\n    });\n    client.write('--huff\\r\\nContent-Disposition: form-data; ' + 'name=\"endorphins\"\\r\\n\\r\\n9000\\r\\n--huff--');\n    client.end();\n  });","file":"plugins/multipart.test.js","skipped":false,"dir":"test"},{"name":"gh-847 body multipart no files ok","suites":["multipart parser"],"updatePoint":{"line":67,"column":39,"index":1707},"line":67,"code":"  it('gh-847 body multipart no files ok', function (done) {\n    SERVER.use(restify.plugins.queryParser({\n      mapParams: true\n    }));\n    SERVER.use(restify.plugins.bodyParser({\n      mapFiles: true,\n      mapParams: true,\n      keepExtensions: true,\n      uploadDir: '/tmp/',\n      override: true\n    }));\n    SERVER.post('/multipart/:id', function (req, res, next) {\n      assert.equal(req.params.id, 'foo');\n      assert.equal(req.params.mood, 'happy');\n      assert.equal(req.params.endorphins, '9000');\n      res.send();\n      next();\n    });\n    var opts = {\n      hostname: '127.0.0.1',\n      port: PORT,\n      path: '/multipart/foo?mood=happy',\n      agent: false,\n      method: 'POST',\n      headers: {\n        'Content-Type': 'multipart/form-data; boundary=huff'\n      }\n    };\n    var client = http.request(opts, function (res) {\n      assert.equal(res.statusCode, 200);\n      done();\n    });\n\n    // don't actually upload a file\n    client.write('--huff\\r\\nContent-Disposition: form-data; ' + 'name=\"endorphins\"\\r\\n\\r\\n9000\\r\\n--huff--');\n    client.end();\n  });","file":"plugins/multipart.test.js","skipped":false,"dir":"test"},{"name":"gh-847 body multipart files ok","suites":["multipart parser"],"updatePoint":{"line":104,"column":36,"index":2781},"line":104,"code":"  it('gh-847 body multipart files ok', function (done) {\n    var shine = 'Well you wore out your welcome with random precision, ' + 'rode on the steel breeze. Come on you raver, you seer of ' + 'visions, come on you painter, you piper, you prisoner, and shine!';\n    var echoes = 'Overhead the albatross hangs motionless upon the air ' + 'And deep beneath the rolling waves in labyrinths of coral ' + 'caves The echo of a distant tide Comes willowing across the ' + 'sand And everything is green and submarine';\n    SERVER.use(restify.plugins.queryParser({\n      mapParams: true\n    }));\n    SERVER.use(restify.plugins.bodyParser({\n      mapFiles: true,\n      mapParams: true,\n      keepExtensions: true,\n      uploadDir: '/tmp/',\n      override: true\n    }));\n    SERVER.post('/multipart/:id', function (req, res, next) {\n      assert.equal(req.params.id, 'foo');\n      assert.equal(req.params.mood, 'happy');\n      assert.equal(req.params.endorphins, '12');\n      assert.ok(req.params.shine);\n      assert.ok(req.params.echoes);\n      assert.equal(req.params.shine.toString('utf8'), shine);\n      assert.equal(req.params.echoes.toString('utf8'), echoes);\n      res.send();\n      next();\n    });\n    var opts = {\n      hostname: '127.0.0.1',\n      port: PORT,\n      path: '/multipart/foo?mood=happy',\n      agent: false,\n      method: 'POST',\n      headers: {\n        'Content-Type': 'multipart/form-data; boundary=huff'\n      }\n    };\n    var client = http.request(opts, function (res) {\n      assert.equal(res.statusCode, 200);\n      done();\n    });\n    client.write('--huff\\r\\n');\n    client.write('Content-Disposition: form-data; name=\"endorphins\"\\r\\n\\r\\n');\n    client.write('12\\r\\n');\n    client.write('--huff\\r\\n');\n    client.write('Content-Disposition: form-data; name=\"shine\"; ' + 'filename=\"shine.txt\"\\r\\n');\n    client.write('Content-Type: text/plain\\r\\n\\r\\n');\n    client.write(shine + '\\r\\n');\n    client.write('--huff\\r\\n');\n    client.write('Content-Disposition: form-data; name=\"echoes\"; ' + 'filename=\"echoes.txt\"\\r\\n');\n    client.write('Content-Type: text/plain\\r\\n\\r\\n');\n    client.write(echoes + '\\r\\n');\n    client.write('--huff--');\n    client.end();\n  });","file":"plugins/multipart.test.js","skipped":false,"dir":"test"},{"name":"body multipart ok custom handling","suites":["multipart parser"],"updatePoint":{"line":156,"column":39,"index":4967},"line":156,"code":"  it('body multipart ok custom handling', function (done) {\n    var detailsString = 'High endorphin levels make you happy. ' + 'Mostly... I guess. Whatever.';\n    SERVER.post('/multipart/:id', restify.plugins.bodyParser({\n      multipartHandler: function (part) {\n        var buffer = new Buffer(0);\n        part.on('data', function (data) {\n          buffer = Buffer.concat([data]);\n        });\n        part.on('end', function () {\n          assert.equal(part.name, 'endorphins');\n          assert.equal(buffer.toString('ascii'), '12');\n        });\n      },\n      multipartFileHandler: function (part) {\n        var buffer = new Buffer(0);\n        part.on('data', function (data) {\n          buffer = Buffer.concat([data]);\n        });\n        part.on('end', function () {\n          assert.equal(part.name, 'details');\n          assert.equal(part.filename, 'mood_details.txt');\n          assert.equal(buffer.toString('ascii'), detailsString);\n        });\n      },\n      mapParams: false\n    }), function (req, res, next) {\n      res.send();\n      next();\n    });\n    var opts = {\n      hostname: '127.0.0.1',\n      port: PORT,\n      path: '/multipart/foo?mood=sad',\n      agent: false,\n      method: 'POST',\n      headers: {\n        'Content-Type': 'multipart/form-data; boundary=huff'\n      }\n    };\n    var client = http.request(opts, function (res) {\n      assert.equal(res.statusCode, 200);\n      done();\n    });\n    client.write('--huff\\r\\n');\n    client.write('Content-Disposition: form-data; name=\"endorphins\"\\r\\n\\r\\n');\n    client.write('12\\r\\n');\n    client.write('--huff\\r\\n');\n\n    // jscs:disable maximumLineLength\n    client.write('Content-Disposition: form-data; name=\"details\"; ' + 'filename=\"mood_details.txt\"\\r\\n');\n\n    // jscs:enable maximumLineLength\n    client.write('Content-Type: text/plain\\r\\n\\r\\n');\n    client.write(detailsString + '\\r\\n');\n    client.write('--huff--');\n    client.end();\n  });","file":"plugins/multipart.test.js","skipped":false,"dir":"test"},{"name":"restify-GH-694 pass hash option through to Formidable","suites":["multipart parser"],"updatePoint":{"line":213,"column":59,"index":6909},"line":213,"code":"  it('restify-GH-694 pass hash option through to Formidable', function (done) {\n    var content = 'Hello World!';\n    var hash = '2ef7bde608ce5404e97d5f042f95f89f1c232871';\n    SERVER.post('/multipart', restify.plugins.bodyParser({\n      hash: 'sha1'\n    }), function (req, res, next) {\n      assert.equal(req.files.details.hash, hash);\n      res.send();\n      next();\n    });\n    var opts = {\n      hostname: '127.0.0.1',\n      port: PORT,\n      path: '/multipart',\n      agent: false,\n      method: 'POST',\n      headers: {\n        'Content-Type': 'multipart/form-data; boundary=huff'\n      }\n    };\n    var client = http.request(opts, function (res) {\n      assert.equal(res.statusCode, 200);\n      done();\n    });\n    client.write('--huff\\r\\n');\n\n    // jscs:disable maximumLineLength\n    client.write('Content-Disposition: form-data; name=\"details\"; ' + 'filename=\"mood_details.txt\"\\r\\n');\n\n    // jscs:enable maximumLineLength\n    client.write('Content-Type: text/plain\\r\\n\\r\\n');\n    client.write(content + '\\r\\n');\n    client.write('--huff--');\n    client.end();\n  });","file":"plugins/multipart.test.js","skipped":false,"dir":"test"},{"name":"Ensure maxFileSize change is enforced","suites":["multipart parser"],"updatePoint":{"line":248,"column":43,"index":7970},"line":248,"code":"  it('Ensure maxFileSize change is enforced', function (done) {\n    var shine = 'Well you wore out your welcome with random precision, ' + 'rode on the steel breeze. Come on you raver, you seer of ' + 'visions, come on you painter, you piper, you prisoner, and shine!';\n    var echoes = 'Overhead the albatross hangs motionless upon the air ' + 'And deep beneath the rolling waves in labyrinths of coral ' + 'caves The echo of a distant tide Comes willowing across the ' + 'sand And everything is green and submarine';\n    var shortest = Math.min(shine.length, echoes.length);\n    SERVER.use(restify.plugins.queryParser({\n      mapParams: true\n    }));\n    SERVER.use(restify.plugins.bodyParser({\n      mapFiles: true,\n      mapParams: true,\n      keepExtensions: true,\n      uploadDir: '/tmp/',\n      override: true,\n      // Set limit to shortest of the 'files',\n      //  longer will trigger an error.\n      maxFileSize: shortest\n    }));\n    SERVER.post('/multipart/:id', function (req, res, next) {\n      assert.equal(req.params.id, 'foo');\n      assert.equal(req.params.mood, 'happy');\n      assert.equal(req.params.endorphins, '12');\n      assert.ok(req.params.shine);\n      assert.ok(req.params.echoes);\n      assert.equal(req.params.shine.toString('utf8'), shine);\n      assert.equal(req.params.echoes.toString('utf8'), echoes);\n      res.send();\n      next();\n    });\n    var opts = {\n      hostname: '127.0.0.1',\n      port: PORT,\n      path: '/multipart/foo?mood=happy',\n      agent: false,\n      method: 'POST',\n      headers: {\n        'Content-Type': 'multipart/form-data; boundary=huff'\n      }\n    };\n    var client = http.request(opts, function (res) {\n      assert.equal(res.statusCode, 400);\n      var body = '';\n      res.on('data', function (d) {\n        body += d;\n      });\n      res.on('end', function () {\n        var rsp = JSON.parse(body);\n        assert.equal(rsp.code, 'BadRequest');\n        assert.equal(rsp.message.substring(0, 30), 'maxFileSize exceeded, received');\n        done();\n      });\n    });\n    client.write('--huff\\r\\n');\n    client.write('Content-Disposition: form-data; name=\"endorphins\"\\r\\n\\r\\n');\n    client.write('12\\r\\n');\n    client.write('--huff\\r\\n');\n    client.write('Content-Disposition: form-data; name=\"shine\"; ' + 'filename=\"shine.txt\"\\r\\n');\n    client.write('Content-Type: text/plain\\r\\n\\r\\n');\n    client.write(shine + '\\r\\n');\n    client.write('--huff\\r\\n');\n    client.write('Content-Disposition: form-data; name=\"echoes\"; ' + 'filename=\"echoes.txt\"\\r\\n');\n    client.write('Content-Type: text/plain\\r\\n\\r\\n');\n    client.write(echoes + '\\r\\n');\n    client.write('--huff--');\n    client.end();\n  });","file":"plugins/multipart.test.js","skipped":false,"dir":"test"},{"name":"should parse oauth2 token from authorization header","suites":["oauth2 token parser"],"updatePoint":{"line":46,"column":57,"index":1222},"line":46,"code":"  it('should parse oauth2 token from authorization header', function (done) {\n    var opts = {\n      path: '/test1/auth-header',\n      headers: {\n        Authorization: 'Bearer ' + TEST_TOKEN\n      }\n    };\n    SERVER.get('/test1/auth-header', function (req, res, next) {\n      assert.isNotNull(req.oauth2.accessToken);\n      assert.equal(req.oauth2.accessToken, TEST_TOKEN);\n      res.send();\n      next();\n    });\n    CLIENT.get(opts, function (err, _, res) {\n      assert.ifError(err);\n      assert.equal(res.statusCode, 200);\n      done();\n    });\n  });","file":"plugins/oauth2.test.js","skipped":false,"dir":"test"},{"name":"should do nothing (token is null) if there is no oauth2 token set","suites":["oauth2 token parser"],"updatePoint":{"line":67,"column":71,"index":1825},"line":67,"code":"  it('should do nothing (token is null) if there is no oauth2 token set', function (done) {\n    var opts = {\n      path: '/test2/do/nothing'\n    };\n    SERVER.get(opts, function (req, res, next) {\n      assert.isNull(req.oauth2.accessToken);\n      assert.equal(res.statusCode, 200);\n      res.send();\n      next();\n    });\n    CLIENT.get(opts, function (err, _, res) {\n      assert.ifError(err);\n      assert.equal(res.statusCode, 200);\n      done();\n    });\n  });","file":"plugins/oauth2.test.js","skipped":false,"dir":"test"},{"name":"should parse from request body","suites":["oauth2 token parser"],"updatePoint":{"line":83,"column":36,"index":2255},"line":83,"code":"  it('should parse from request body', function (done) {\n    var test3Url = '/test3/contenttype/ok';\n    SERVER.post(test3Url, function (req, res, next) {\n      assert.isNotNull(req.oauth2.accessToken);\n      assert.equal(req.oauth2.accessToken, TEST_TOKEN);\n      res.send();\n      next();\n    });\n    var opts = {\n      hostname: '127.0.0.1',\n      port: PORT,\n      path: test3Url,\n      agent: false,\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded'\n      }\n    };\n    var client = http.request(opts, function (res) {\n      assert.equal(res.statusCode, 200);\n      done();\n    });\n    client.write('access_token=' + TEST_TOKEN);\n    client.end();\n  });","file":"plugins/oauth2.test.js","skipped":false,"dir":"test"},{"name":"should parse oauth2 token from request body(case-insensitive)","suites":["oauth2 token parser"],"updatePoint":{"line":110,"column":67,"index":3024},"line":110,"code":"  it('should parse oauth2 token from request body(case-insensitive)', function (done) {\n    var test4Url = '/test4/contenttype/mixedcase';\n    SERVER.post(test4Url, function (req, res, next) {\n      assert.isNotNull(req.oauth2.accessToken);\n      assert.equal(req.oauth2.accessToken, TEST_TOKEN);\n      res.send();\n      next();\n    });\n    var opts = {\n      hostname: '127.0.0.1',\n      port: PORT,\n      path: test4Url,\n      agent: false,\n      method: 'POST',\n      headers: {\n        'Content-Type': 'APPLICATION/x-www-form-urlencoded'\n      }\n    };\n    var client = http.request(opts, function (res) {\n      assert.equal(res.statusCode, 200);\n      done();\n    });\n    client.write('access_token=' + TEST_TOKEN);\n    client.end();\n  });","file":"plugins/oauth2.test.js","skipped":false,"dir":"test"},{"name":"should ignore token from request body","suites":["oauth2 token parser"],"updatePoint":{"line":135,"column":43,"index":3745},"line":135,"code":"  it('should ignore token from request body', function (done) {\n    var test5Url = '/test5/contenttype/missing/1';\n    SERVER.post(test5Url, function (req, res, next) {\n      assert.isNull(req.oauth2.accessToken);\n      res.send(200);\n      next();\n    });\n    var opts5 = {\n      hostname: '127.0.0.1',\n      port: PORT,\n      path: test5Url,\n      agent: false,\n      method: 'POST',\n      headers: {\n        'Content-Type': 'text/xml'\n      }\n    };\n    var client = http.request(opts5, function (res) {\n      assert.equal(res.statusCode, 200);\n      done();\n    });\n    client.write('access_token=' + TEST_TOKEN);\n    client.end();\n  });","file":"plugins/oauth2.test.js","skipped":false,"dir":"test"},{"name":"should fail if more than one method is used to set the oauth2 token","suites":["oauth2 token parser"],"updatePoint":{"line":161,"column":73,"index":4448},"line":161,"code":"  it('should fail if more than one method is used to set the oauth2 token', function (done) {\n    SERVER.post('/test6/multi/method/fail', function (req, res, next) {\n      assert.isNull(req.oauth2.accessToken);\n      res.send();\n      next();\n    });\n    var opts = {\n      path: '/test6/multi/method/fail',\n      headers: {\n        Authorization: 'Bearer ' + TEST_TOKEN,\n        'Content-Type': 'application/x-www-form-urlencoded'\n      }\n    };\n    CLIENT.post(opts, {\n      access_token: TEST_TOKEN\n    }, function (err, _, res) {\n      assert.ok(err);\n      assert.equal(res.statusCode, 400);\n      done();\n    });\n  });","file":"plugins/oauth2.test.js","skipped":false,"dir":"test"},{"name":"should reject expired request","suites":["all other plugins","date parser"],"updatePoint":{"line":43,"column":37,"index":1144},"line":43,"code":"    it('should reject expired request', function (done) {\n      SERVER.use(restify.plugins.dateParser());\n      SERVER.get('/', function respond(req, res, next) {\n        res.send();\n        next();\n      });\n      var opts = {\n        path: '/',\n        headers: {\n          date: 'Tue, 15 Nov 1994 08:12:31 GMT'\n        }\n      };\n      CLIENT.get(opts, function (err, _, res) {\n        assert.ok(err);\n        assert.ok(/Date header .+ is too old/.test(err.message));\n        assert.equal(res.statusCode, 400);\n        done();\n      });\n    });","file":"plugins/plugins.test.js","skipped":false,"dir":"test"},{"name":"tests the requestLoggers extra header properties","suites":["all other plugins","request logger"],"updatePoint":{"line":64,"column":56,"index":1760},"line":64,"code":"    it('tests the requestLoggers extra header properties', function (done) {\n      var key = 'x-request-uuid';\n      var badKey = 'x-foo-bar';\n      var getPath = '/requestLogger/extraHeaders';\n      var headers = [key, badKey];\n      SERVER.use(restify.plugins.requestLogger({\n        headers: headers\n      }));\n      SERVER.get(getPath, function (req, res, next) {\n        var childings = req.log[pino.symbols.chindingsSym];\n        assert.match(childings, /\"x-request-uuid\":\"foo-for-eva\"/);\n        assert.notMatch(childings, /x-foo-bar/);\n        res.send();\n        next();\n      });\n      var obj = {\n        path: getPath,\n        headers: {}\n      };\n      obj.headers[key] = 'foo-for-eva';\n      CLIENT.get(obj, function (err, _, res) {\n        assert.equal(res.statusCode, 200);\n        assert.ifError(err);\n        done();\n      });\n    });","file":"plugins/plugins.test.js","skipped":false,"dir":"test"},{"name":"full response","suites":["all other plugins","full response"],"updatePoint":{"line":92,"column":21,"index":2626},"line":92,"code":"    it('full response', function (done) {\n      SERVER.use(restify.plugins.fullResponse());\n      SERVER.get('/bar/:id', function tester2(req, res, next) {\n        assert.ok(req.params);\n        assert.equal(req.params.id, 'bar');\n        res.send();\n        next();\n      });\n      CLIENT.get('/bar/bar', function (err, _, res) {\n        assert.ifError(err);\n        assert.equal(res.statusCode, 200);\n        var headers = res.headers;\n        assert.ok(headers, 'headers ok');\n        assert.ok(headers.date);\n        assert.ok(headers['request-id']);\n        assert.ok(headers['response-time'] >= 0);\n        assert.equal(headers.server, 'restify');\n        assert.equal(headers.connection, 'Keep-Alive');\n        done();\n      });\n    });","file":"plugins/plugins.test.js","skipped":false,"dir":"test"},{"name":"set and get request context","suites":["all other plugins","context"],"updatePoint":{"line":115,"column":35,"index":3426},"line":115,"code":"    it('set and get request context', function (done) {\n      SERVER.pre(restify.plugins.pre.context());\n      var asserted = false;\n      var expectedData = {\n        pink: 'floyd'\n      };\n      SERVER.get('/context', [function (req, res, next) {\n        req.set('pink', 'floyd');\n        return next();\n      }, function (req, res, next) {\n        assert.equal('floyd', req.get('pink'));\n        assert.deepEqual(expectedData, req.getAll());\n        asserted = true;\n        res.send(200);\n        return next();\n      }]);\n      CLIENT.get('/context', function (err, _, res) {\n        assert.ifError(err);\n        assert.equal(res.statusCode, 200);\n        assert.ok(asserted);\n        done();\n      });\n    });","file":"plugins/plugins.test.js","skipped":false,"dir":"test"},{"name":"should throw if set key is not string","suites":["all other plugins","context"],"updatePoint":{"line":138,"column":45,"index":4152},"line":138,"code":"    it('should throw if set key is not string', function (done) {\n      SERVER.pre(restify.plugins.pre.context());\n      var asserted = false;\n      SERVER.get('/context', [function (req, res, next) {\n        try {\n          req.set({}, 'floyd');\n        } catch (e) {\n          asserted = true;\n          res.send(200);\n        }\n        return next();\n      }]);\n      CLIENT.get('/context', function (err, _, res) {\n        assert.ifError(err);\n        assert.equal(res.statusCode, 200);\n        assert.ok(asserted);\n        done();\n      });\n    });","file":"plugins/plugins.test.js","skipped":false,"dir":"test"},{"name":"should throw if set key is empty string","suites":["all other plugins","context"],"updatePoint":{"line":157,"column":47,"index":4708},"line":157,"code":"    it('should throw if set key is empty string', function (done) {\n      SERVER.pre(restify.plugins.pre.context());\n      var asserted = false;\n      SERVER.get('/context', [function (req, res, next) {\n        try {\n          req.set('', 'floyd');\n        } catch (e) {\n          asserted = true;\n          res.send(200);\n        }\n        return next();\n      }]);\n      CLIENT.get('/context', function (err, _, res) {\n        assert.ifError(err);\n        assert.equal(res.statusCode, 200);\n        assert.ok(asserted);\n        done();\n      });\n    });","file":"plugins/plugins.test.js","skipped":false,"dir":"test"},{"name":"should throw if get key is not string","suites":["all other plugins","context"],"updatePoint":{"line":176,"column":45,"index":5262},"line":176,"code":"    it('should throw if get key is not string', function (done) {\n      SERVER.pre(restify.plugins.pre.context());\n      var asserted = false;\n      SERVER.get('/context', [function (req, res, next) {\n        try {\n          req.get({});\n        } catch (e) {\n          asserted = true;\n          res.send(200);\n        }\n        return next();\n      }]);\n      CLIENT.get('/context', function (err, _, res) {\n        assert.ifError(err);\n        assert.equal(res.statusCode, 200);\n        assert.ok(asserted);\n        done();\n      });\n    });","file":"plugins/plugins.test.js","skipped":false,"dir":"test"},{"name":"should throw if get key is empty string","suites":["all other plugins","context"],"updatePoint":{"line":195,"column":47,"index":5809},"line":195,"code":"    it('should throw if get key is empty string', function (done) {\n      SERVER.pre(restify.plugins.pre.context());\n      var asserted = false;\n      SERVER.get('/context', [function (req, res, next) {\n        try {\n          req.get('');\n        } catch (e) {\n          asserted = true;\n          res.send(200);\n        }\n        return next();\n      }]);\n      CLIENT.get('/context', function (err, _, res) {\n        assert.ifError(err);\n        assert.equal(res.statusCode, 200);\n        assert.ok(asserted);\n        done();\n      });\n    });","file":"plugins/plugins.test.js","skipped":false,"dir":"test"},{"name":"restify-GH-124 should return empty query","suites":["query parser"],"updatePoint":{"line":37,"column":46,"index":876},"line":37,"code":"  it('restify-GH-124 should return empty query', function (done) {\n    SERVER.use(restify.plugins.queryParser());\n    SERVER.get('/query/:id', function (req, res, next) {\n      assert.equal(req.getQuery(), '');\n      assert.deepEqual(req.query, {});\n      res.send();\n      next();\n    });\n    CLIENT.get('/query/foo', function (err, _, res) {\n      assert.ifError(err);\n      assert.equal(res.statusCode, 200);\n      done();\n    });\n  });","file":"plugins/query.test.js","skipped":false,"dir":"test"},{"name":"req.getQuery() should return with raw query string","suites":["query parser"],"updatePoint":{"line":51,"column":56,"index":1326},"line":51,"code":"  it('req.getQuery() should return with raw query string', function (done) {\n    SERVER.use(restify.plugins.queryParser());\n    SERVER.get('/query/:id', function (req, res, next) {\n      assert.equal(req.getQuery(), 'a=1');\n      assert.deepEqual(req.query, {\n        a: '1'\n      });\n      res.send();\n      next();\n    });\n    CLIENT.get('/query/foo?a=1', function (err, _, res) {\n      assert.ifError(err);\n      assert.equal(res.statusCode, 200);\n      done();\n    });\n  });","file":"plugins/query.test.js","skipped":false,"dir":"test"},{"name":"should parse req.query and req.params independently","suites":["query parser"],"updatePoint":{"line":67,"column":57,"index":1806},"line":67,"code":"  it('should parse req.query and req.params independently', function (done) {\n    SERVER.use(restify.plugins.queryParser());\n    SERVER.get('/query/:id', function (req, res, next) {\n      assert.equal(req.query.id, 'bar');\n      assert.equal(req.query.name, 'markc');\n      assert.equal(req.params.id, 'foo');\n      assert.notDeepEqual(req.query, req.params);\n      res.send();\n      next();\n    });\n    CLIENT.get('/query/foo?id=bar&name=markc', function (err, _, res) {\n      assert.ifError(err);\n      assert.equal(res.statusCode, 200);\n      done();\n    });\n  });","file":"plugins/query.test.js","skipped":false,"dir":"test"},{"name":"should map req.query onto req.params","suites":["query parser"],"updatePoint":{"line":83,"column":42,"index":2359},"line":83,"code":"  it('should map req.query onto req.params', function (done) {\n    SERVER.use(restify.plugins.queryParser({\n      mapParams: true\n    }));\n    SERVER.get('/query/:id', function (req, res, next) {\n      assert.equal(req.params.id, 'foo');\n      assert.equal(req.params.name, 'markc');\n      res.send();\n      next();\n    });\n    CLIENT.get('/query/foo?id=bar&name=markc', function (err, _, res) {\n      assert.ifError(err);\n      assert.equal(res.statusCode, 200);\n      done();\n    });\n  });","file":"plugins/query.test.js","skipped":false,"dir":"test"},{"name":"should take req.query and stomp on req.params","suites":["query parser"],"updatePoint":{"line":99,"column":51,"index":2860},"line":99,"code":"  it('should take req.query and stomp on req.params', function (done) {\n    SERVER.use(restify.plugins.queryParser({\n      mapParams: true,\n      overrideParams: true\n    }));\n    SERVER.get('/query/:id', function (req, res, next) {\n      assert.equal(req.params.id, 'bar');\n      assert.equal(req.params.name, 'markc');\n      assert.deepEqual(req.query, req.params);\n      res.send();\n      next();\n    });\n    CLIENT.get('/query/foo?id=bar&name=markc', function (err, _, res) {\n      assert.ifError(err);\n      assert.equal(res.statusCode, 200);\n      done();\n    });\n  });","file":"plugins/query.test.js","skipped":false,"dir":"test"},{"name":"should parse associative array syntax","suites":["query parser"],"updatePoint":{"line":117,"column":43,"index":3428},"line":117,"code":"  it('should parse associative array syntax', function (done) {\n    SERVER.use(restify.plugins.queryParser());\n    SERVER.get('/query/:id', function (req, res, next) {\n      assert.equal(req.params.id, 'foo');\n      assert.isObject(req.query.name);\n      assert.equal(req.query.name.first, 'mark');\n      assert.equal(req.query.name.last, 'cavage');\n      res.send();\n      next();\n    });\n    var p = '/query/foo?name[first]=mark&name[last]=cavage';\n    CLIENT.get(p, function (err, _, res) {\n      assert.ifError(err);\n      assert.equal(res.statusCode, 200);\n      done();\n    });\n  });","file":"plugins/query.test.js","skipped":false,"dir":"test"},{"name":"should parse array syntax","suites":["query parser"],"updatePoint":{"line":134,"column":31,"index":4006},"line":134,"code":"  it('should parse array syntax', function (done) {\n    SERVER.use(restify.plugins.queryParser());\n    SERVER.get('/query/:id', function (req, res, next) {\n      assert.equal(req.params.id, 'foo');\n      assert.isArray(req.query.char);\n      assert.deepEqual(req.query.char, ['a', 'b', 'c']);\n      res.send();\n      next();\n    });\n    var p = '/query/foo?char[]=a&char[]=b&char[]=c';\n    CLIENT.get(p, function (err, _, res) {\n      assert.ifError(err);\n      assert.equal(res.statusCode, 200);\n      done();\n    });\n  });","file":"plugins/query.test.js","skipped":false,"dir":"test"},{"name":"should parse nested array syntax","suites":["query parser"],"updatePoint":{"line":150,"column":38,"index":4538},"line":150,"code":"  it('should parse nested array syntax', function (done) {\n    SERVER.use(restify.plugins.queryParser());\n    SERVER.get('/query/:id', function (req, res, next) {\n      assert.equal(req.params.id, 'foo');\n      assert.isObject(req.query.pizza);\n      assert.isArray(req.query.pizza.left);\n      assert.isArray(req.query.pizza.right);\n      assert.deepEqual(req.query.pizza.left, ['ham', 'bacon']);\n      assert.deepEqual(req.query.pizza.right, ['pineapple']);\n      res.send();\n      next();\n    });\n    var p = '/query/foo?pizza[left][]=ham&pizza[left][]=bacon&' + 'pizza[right][]=pineapple';\n    CLIENT.get(p, function (err, _, res) {\n      assert.ifError(err);\n      assert.equal(res.statusCode, 200);\n      done();\n    });\n  });","file":"plugins/query.test.js","skipped":false,"dir":"test"},{"name":"restify-GH-59 Query params with / result in a 404","suites":["query parser"],"updatePoint":{"line":169,"column":55,"index":5288},"line":169,"code":"  it('restify-GH-59 Query params with / result in a 404', function (done) {\n    SERVER.use(restify.plugins.queryParser());\n    SERVER.get('/', function tester(req, res, next) {\n      res.send('hello world');\n      next();\n    });\n    CLIENT.get('/?foo=bar/foo', function (err, _, res, obj) {\n      assert.ifError(err);\n      assert.equal(res.statusCode, 200);\n      assert.equal(obj, 'hello world');\n      done();\n    });\n  });","file":"plugins/query.test.js","skipped":false,"dir":"test"},{"name":"restify-GH-323: <url>/<path>/?<queryString> broken","suites":["query parser"],"updatePoint":{"line":182,"column":56,"index":5717},"line":182,"code":"  it('restify-GH-323: <url>/<path>/?<queryString> broken', function (done) {\n    SERVER.pre(restify.plugins.pre.sanitizePath());\n    SERVER.use(restify.plugins.queryParser({\n      mapParams: true\n    }));\n    SERVER.get('/hello/:name', function (req, res, next) {\n      res.send(req.params);\n    });\n    CLIENT.get('/hello/foo/?bar=baz', function (err, _, __, obj) {\n      assert.ifError(err);\n      assert.deepEqual(obj, {\n        name: 'foo',\n        bar: 'baz'\n      });\n      done();\n    });\n  });","file":"plugins/query.test.js","skipped":false,"dir":"test"},{"name":"<url>/?<queryString> broken","suites":["query parser"],"updatePoint":{"line":199,"column":33,"index":6196},"line":199,"code":"  it('<url>/?<queryString> broken', function (done) {\n    SERVER.pre(restify.plugins.pre.sanitizePath());\n    SERVER.use(restify.plugins.queryParser({\n      mapParams: true\n    }));\n    SERVER.get('/', function (req, res, next) {\n      res.send(req.params);\n    });\n    CLIENT.get('/?bar=baz', function (err, _, __, obj) {\n      assert.ifError(err);\n      assert.deepEqual(obj, {\n        bar: 'baz'\n      });\n      done();\n    });\n  });","file":"plugins/query.test.js","skipped":false,"dir":"test"},{"name":"GH-1086: should reuse request id when available","suites":["request id headers"],"updatePoint":{"line":43,"column":53,"index":1105},"line":43,"code":"  it('GH-1086: should reuse request id when available', function (done) {\n    SERVER.get('/1', function (req, res, next) {\n      // the 12345 value is set when the client is created.\n      assert.ok(req.headers.hasOwnProperty('x-req-id-a'));\n      assert.equal(req.getId(), req.headers['x-req-id-a']);\n      res.send('hello world');\n      return next();\n    });\n\n    // create new client since we new specific headers\n    CLIENT = restifyClients.createJsonClient({\n      url: 'http://127.0.0.1:' + PORT,\n      headers: {\n        'x-req-id-a': 12345\n      }\n    });\n    CLIENT.get('/1', function (err, req, res, data) {\n      assert.ifError(err);\n      assert.equal(data, 'hello world');\n      return done();\n    });\n  });","file":"plugins/reqIdHeaders.test.js","skipped":false,"dir":"test"},{"name":"GH-1086: should use second request id when available","suites":["request id headers"],"updatePoint":{"line":65,"column":58,"index":1832},"line":65,"code":"  it('GH-1086: should use second request id when available', function (done) {\n    SERVER.get('/1', function (req, res, next) {\n      assert.ok(req.headers.hasOwnProperty('x-req-id-b'));\n      assert.equal(req.getId(), req.headers['x-req-id-b']);\n      res.send('hello world');\n      return next();\n    });\n\n    // create new client since we new specific headers\n    CLIENT = restifyClients.createJsonClient({\n      url: 'http://127.0.0.1:' + PORT,\n      headers: {\n        'x-req-id-b': 678910\n      }\n    });\n    CLIENT.get('/1', function (err, req, res, data) {\n      assert.ifError(err);\n      assert.equal(data, 'hello world');\n      return done();\n    });\n  });","file":"plugins/reqIdHeaders.test.js","skipped":false,"dir":"test"},{"name":"GH-1086: should use default uuid request id if none provided","suites":["request id headers"],"updatePoint":{"line":88,"column":66,"index":2539},"line":88,"code":"  it('GH-1086: should use default uuid request id if none provided', function (done) {\n    SERVER.get('/1', function (req, res, next) {\n      assert.ok(req.getId());\n      assert.ok(validator.isUUID(req.getId()));\n      res.send('hello world');\n      return next();\n    });\n\n    // create new client since we new specific headers\n    CLIENT = restifyClients.createJsonClient({\n      url: 'http://127.0.0.1:' + PORT\n    });\n    CLIENT.get('/1', function (err, req, res, data) {\n      assert.ifError(err);\n      assert.equal(data, 'hello world');\n      return done();\n    });\n  });","file":"plugins/reqIdHeaders.test.js","skipped":false,"dir":"test"},{"name":"GH-1086: empty request id should be ignored","suites":["request id headers"],"updatePoint":{"line":106,"column":49,"index":3102},"line":106,"code":"  it('GH-1086: empty request id should be ignored', function (done) {\n    SERVER.get('/1', function (req, res, next) {\n      assert.ok(req.headers.hasOwnProperty('x-req-id-b'));\n      assert.equal(req.getId(), req.headers['x-req-id-b']);\n      res.send('hello world');\n      return next();\n    });\n\n    // create new client since we new specific headers\n    CLIENT = restifyClients.createJsonClient({\n      url: 'http://127.0.0.1:' + PORT,\n      headers: {\n        'x-req-id-a': '',\n        'x-req-id-b': 12345\n      }\n    });\n    CLIENT.get('/1', function (err, req, res, data) {\n      assert.ifError(err);\n      assert.equal(data, 'hello world');\n      return done();\n    });\n  });","file":"plugins/reqIdHeaders.test.js","skipped":false,"dir":"test"},{"name":"should throw if no headers passed in","suites":["request expiry parser","constructor"],"updatePoint":{"line":38,"column":44,"index":918},"line":38,"code":"    it('should throw if no headers passed in', function (done) {\n      try {\n        SERVER.use(restify.plugins.requestExpiry({}));\n      } catch (e) {\n        done();\n      }\n    });","file":"plugins/requestExpiry.test.js","skipped":false,"dir":"test"},{"name":"should throw if only timeout header passed in","suites":["request expiry parser","constructor"],"updatePoint":{"line":45,"column":53,"index":1111},"line":45,"code":"    it('should throw if only timeout header passed in', function (done) {\n      try {\n        SERVER.use(restify.plugins.requestExpiry({\n          timeoutHeader: 'foo'\n        }));\n      } catch (e) {\n        done();\n      }\n    });","file":"plugins/requestExpiry.test.js","skipped":false,"dir":"test"},{"name":"should throw if only timeout header passed in","suites":["request expiry parser","constructor"],"updatePoint":{"line":54,"column":53,"index":1344},"line":54,"code":"    it('should throw if only timeout header passed in', function (done) {\n      try {\n        SERVER.use(restify.plugins.requestExpiry({\n          startHeader: 'foo'\n        }));\n      } catch (e) {\n        done();\n      }\n    });","file":"plugins/requestExpiry.test.js","skipped":false,"dir":"test"},{"name":"should timeout due to request expiry","suites":["request expiry parser","absolute header"],"updatePoint":{"line":65,"column":44,"index":1616},"line":65,"code":"    it('should timeout due to request expiry', function (done) {\n      var key = 'x-request-expiry';\n      var getPath = '/request/expiry';\n      var called = false;\n      SERVER.use(restify.plugins.requestExpiry({\n        absoluteHeader: key\n      }));\n      SERVER.get(getPath, function (req, res, next) {\n        called = true;\n        res.send();\n        next();\n      });\n      var obj = {\n        path: getPath,\n        headers: {\n          'x-request-expiry': Date.now() - 100\n        }\n      };\n      CLIENT.get(obj, function (err, _, res) {\n        assert.ok(err);\n        assert.equal(res.statusCode, 504);\n        assert.equal(called, false);\n        done();\n      });\n    });","file":"plugins/requestExpiry.test.js","skipped":false,"dir":"test"},{"name":"should not timeout due to request expiry","suites":["request expiry parser","absolute header"],"updatePoint":{"line":90,"column":48,"index":2308},"line":90,"code":"    it('should not timeout due to request expiry', function (done) {\n      var key = 'x-request-expiry';\n      var getPath = '/request/expiry';\n      var called = false;\n      SERVER.use(restify.plugins.requestExpiry({\n        absoluteHeader: key\n      }));\n      SERVER.get(getPath, function (req, res, next) {\n        assert.isFalse(req.isExpired());\n        called = true;\n        res.send();\n        next();\n      });\n      var obj = {\n        path: getPath,\n        headers: {\n          'x-request-expiry': Date.now() + 100\n        }\n      };\n      CLIENT.get(obj, function (err, _, res) {\n        assert.equal(res.statusCode, 200);\n        assert.equal(called, true);\n        assert.ifError(err);\n        done();\n      });\n    });","file":"plugins/requestExpiry.test.js","skipped":false,"dir":"test"},{"name":"should be ok without request expiry header","suites":["request expiry parser","absolute header"],"updatePoint":{"line":116,"column":50,"index":3047},"line":116,"code":"    it('should be ok without request expiry header', function (done) {\n      var key = 'x-request-expiry';\n      var getPath = '/request/expiry';\n      var called = false;\n      SERVER.use(restify.plugins.requestExpiry({\n        absoluteHeader: key\n      }));\n      SERVER.get(getPath, function (req, res, next) {\n        // requests never expire if the header is not set\n        assert.isFalse(req.isExpired());\n        called = true;\n        res.send();\n        next();\n      });\n      var obj = {\n        path: getPath,\n        headers: {\n          'x-request-expiry': Date.now() + 100\n        }\n      };\n      CLIENT.get(obj, function (err, _, res) {\n        assert.equal(res.statusCode, 200);\n        assert.equal(called, true);\n        assert.ifError(err);\n        done();\n      });\n    });","file":"plugins/requestExpiry.test.js","skipped":false,"dir":"test"},{"name":"should be ok if request expiry header is NaN","suites":["request expiry parser","absolute header"],"updatePoint":{"line":143,"column":52,"index":3846},"line":143,"code":"    it('should be ok if request expiry header is NaN', function (done) {\n      var key = 'x-request-expiry';\n      var getPath = '/request/expiry';\n      var called = false;\n      SERVER.use(restify.plugins.requestExpiry({\n        absoluteHeader: key\n      }));\n      SERVER.get(getPath, function (req, res, next) {\n        // requests never expire if the header is not set\n        assert.isFalse(req.isExpired());\n        called = true;\n        res.send();\n        next();\n      });\n      var obj = {\n        path: getPath,\n        headers: {\n          'x-request-expiry': 'I am just a poor boy with my story seldom told'\n        }\n      };\n      CLIENT.get(obj, function (err, _, res) {\n        assert.equal(res.statusCode, 200);\n        assert.equal(called, true);\n        assert.ifError(err);\n        done();\n      });\n    });","file":"plugins/requestExpiry.test.js","skipped":false,"dir":"test"},{"name":"should timeout due to request expiry","suites":["request expiry parser","timeout header"],"updatePoint":{"line":172,"column":44,"index":4718},"line":172,"code":"    it('should timeout due to request expiry', function (done) {\n      var startKey = 'x-request-starttime';\n      var timeoutKey = 'x-request-timeout';\n      var getPath = '/request/expiry';\n      var called = false;\n      SERVER.use(restify.plugins.requestExpiry({\n        startHeader: startKey,\n        timeoutHeader: timeoutKey\n      }));\n      SERVER.get(getPath, function (req, res, next) {\n        assert.isFalse(req.isExpired());\n        called = true;\n        res.send();\n        next();\n      });\n      var obj = {\n        path: getPath,\n        headers: {\n          'x-request-starttime': Date.now() - 200,\n          'x-request-timeout': 100\n        }\n      };\n      CLIENT.get(obj, function (err, _, res) {\n        assert.ok(err);\n        assert.equal(res.statusCode, 504);\n        assert.equal(called, false);\n        done();\n      });\n    });","file":"plugins/requestExpiry.test.js","skipped":false,"dir":"test"},{"name":"should not timeout due to request expiry","suites":["request expiry parser","timeout header"],"updatePoint":{"line":201,"column":48,"index":5579},"line":201,"code":"    it('should not timeout due to request expiry', function (done) {\n      var startKey = 'x-request-starttime';\n      var timeoutKey = 'x-request-timeout';\n      var getPath = '/request/expiry';\n      var called = false;\n      SERVER.use(restify.plugins.requestExpiry({\n        startHeader: startKey,\n        timeoutHeader: timeoutKey\n      }));\n      SERVER.get(getPath, function (req, res, next) {\n        called = true;\n        res.send();\n        next();\n      });\n      var obj = {\n        path: getPath,\n        headers: {\n          'x-request-starttime': Date.now(),\n          'x-request-timeout': 100\n        }\n      };\n      CLIENT.get(obj, function (err, _, res) {\n        assert.equal(res.statusCode, 200);\n        assert.equal(called, true);\n        assert.ifError(err);\n        done();\n      });\n    });","file":"plugins/requestExpiry.test.js","skipped":false,"dir":"test"},{"name":"should be ok without request expiry header","suites":["request expiry parser","timeout header"],"updatePoint":{"line":229,"column":50,"index":6399},"line":229,"code":"    it('should be ok without request expiry header', function (done) {\n      var startKey = 'x-request-starttime';\n      var timeoutKey = 'x-request-timeout';\n      var getPath = '/request/expiry';\n      var called = false;\n      SERVER.use(restify.plugins.requestExpiry({\n        startHeader: startKey,\n        timeoutHeader: timeoutKey\n      }));\n      SERVER.get(getPath, function (req, res, next) {\n        // requests never expire if the header is not set\n        assert.isFalse(req.isExpired());\n        called = true;\n        res.send();\n        next();\n      });\n      var obj = {\n        path: getPath,\n        headers: {}\n      };\n      CLIENT.get(obj, function (err, _, res) {\n        assert.equal(res.statusCode, 200);\n        assert.equal(called, true);\n        assert.ifError(err);\n        done();\n      });\n    });","file":"plugins/requestExpiry.test.js","skipped":false,"dir":"test"},{"name":"should be ok if start header is NaN","suites":["request expiry parser","timeout header"],"updatePoint":{"line":256,"column":43,"index":7222},"line":256,"code":"    it('should be ok if start header is NaN', function (done) {\n      var startKey = 'x-request-starttime';\n      var timeoutKey = 'x-request-timeout';\n      var getPath = '/request/expiry';\n      var called = false;\n      SERVER.use(restify.plugins.requestExpiry({\n        startHeader: startKey,\n        timeoutHeader: timeoutKey\n      }));\n      SERVER.get(getPath, function (req, res, next) {\n        // requests never expire if the header is not set\n        assert.isFalse(req.isExpired());\n        called = true;\n        res.send();\n        next();\n      });\n      var obj = {\n        path: getPath,\n        headers: {\n          'x-request-starttime': 'I have squandered my resistance',\n          'x-request-timeout': 100\n        }\n      };\n      CLIENT.get(obj, function (err, _, res) {\n        assert.equal(res.statusCode, 200);\n        assert.equal(called, true);\n        assert.ifError(err);\n        done();\n      });\n    });","file":"plugins/requestExpiry.test.js","skipped":false,"dir":"test"},{"name":"should be ok if timeout header is NaN","suites":["request expiry parser","timeout header"],"updatePoint":{"line":286,"column":45,"index":8159},"line":286,"code":"    it('should be ok if timeout header is NaN', function (done) {\n      var startKey = 'x-request-starttime';\n      var timeoutKey = 'x-request-timeout';\n      var getPath = '/request/expiry';\n      var called = false;\n      SERVER.use(restify.plugins.requestExpiry({\n        startHeader: startKey,\n        timeoutHeader: timeoutKey\n      }));\n      SERVER.get(getPath, function (req, res, next) {\n        // requests never expire if the header is not set\n        assert.isFalse(req.isExpired());\n        called = true;\n        res.send();\n        next();\n      });\n      var obj = {\n        path: getPath,\n        headers: {\n          'x-request-starttime': Date.now(),\n          'x-request-timeout': 'For a pocked full of mumbles'\n        }\n      };\n      CLIENT.get(obj, function (err, _, res) {\n        assert.equal(res.statusCode, 200);\n        assert.equal(called, true);\n        assert.ifError(err);\n        done();\n      });\n    });","file":"plugins/requestExpiry.test.js","skipped":false,"dir":"test"},{"name":"should be ok if both headers are NaN","suites":["request expiry parser","timeout header"],"updatePoint":{"line":316,"column":44,"index":9099},"line":316,"code":"    it('should be ok if both headers are NaN', function (done) {\n      var startKey = 'x-request-starttime';\n      var timeoutKey = 'x-request-timeout';\n      var getPath = '/request/expiry';\n      var called = false;\n      SERVER.use(restify.plugins.requestExpiry({\n        startHeader: startKey,\n        timeoutHeader: timeoutKey\n      }));\n      SERVER.get(getPath, function (req, res, next) {\n        // requests never expire if the header is not set\n        assert.isFalse(req.isExpired());\n        called = true;\n        res.send();\n        next();\n      });\n      var obj = {\n        path: getPath,\n        headers: {\n          'x-request-starttime': 'Such are promises',\n          'x-request-timeout': 'All lies and jests'\n        }\n      };\n      CLIENT.get(obj, function (err, _, res) {\n        assert.equal(res.statusCode, 200);\n        assert.equal(called, true);\n        assert.ifError(err);\n        done();\n      });\n    });","file":"plugins/requestExpiry.test.js","skipped":false,"dir":"test"},{"name":"static serves static files","suites":["static resource plugin"],"updatePoint":{"line":150,"column":32,"index":4581},"line":150,"code":"  it('static serves static files', function (done) {\n    serveStaticTest(done, false, '.tmp');\n  });","file":"plugins/static.test.js","skipped":false,"dir":"test"},{"name":"static serves static files in nested folders","suites":["static resource plugin"],"updatePoint":{"line":153,"column":50,"index":4700},"line":153,"code":"  it('static serves static files in nested folders', function (done) {\n    serveStaticTest(done, false, '.tmp/folder');\n  });","file":"plugins/static.test.js","skipped":false,"dir":"test"},{"name":"static serves static files in with a root regex","suites":["static resource plugin"],"updatePoint":{"line":156,"column":53,"index":4829},"line":156,"code":"  it('static serves static files in with a root regex', function (done) {\n    serveStaticTest(done, false, '.tmp', '/.*');\n  });","file":"plugins/static.test.js","skipped":false,"dir":"test"},{"name":"static serves static files with a root, !greedy, regex","suites":["static resource plugin"],"updatePoint":{"line":161,"column":60,"index":4996},"line":161,"code":"  it('static serves static files with a root, !greedy, regex', function (done) {\n    serveStaticTest(done, false, '.tmp', '/?.*');\n  });","file":"plugins/static.test.js","skipped":false,"dir":"test"},{"name":"static serves default file","suites":["static resource plugin"],"updatePoint":{"line":164,"column":32,"index":5105},"line":164,"code":"  it('static serves default file', function (done) {\n    serveStaticTest(done, true, '.tmp');\n  });","file":"plugins/static.test.js","skipped":false,"dir":"test"},{"name":"restify-GH-379 static serves file with parentheses in path","suites":["static resource plugin"],"updatePoint":{"line":169,"column":64,"index":5268},"line":169,"code":"  it('restify-GH-379 static serves file with parentheses in path', function (done) {\n    serveStaticTest(done, false, '.(tmp)');\n  });","file":"plugins/static.test.js","skipped":false,"dir":"test"},{"name":"restify-GH-719 serve a specific static file","suites":["static resource plugin"],"updatePoint":{"line":172,"column":49,"index":5388},"line":172,"code":"  it('restify-GH-719 serve a specific static file', function (done) {\n    // serve the same default file .tmp/public/index.json\n    // but get it from opts.file\n    serveStaticTest(done, false, '.tmp', null, true);\n  });","file":"plugins/static.test.js","skipped":false,"dir":"test"},{"name":"static serves static file with appendRequestPath = false","suites":["static resource plugin"],"updatePoint":{"line":179,"column":62,"index":5653},"line":179,"code":"  it('static serves static file with appendRequestPath = false', function (done) {\n    testNoAppendPath(done, false, '.tmp');\n  });","file":"plugins/static.test.js","skipped":false,"dir":"test"},{"name":"static serves default file with appendRequestPath = false","suites":["static resource plugin"],"updatePoint":{"line":184,"column":63,"index":5817},"line":184,"code":"  it('static serves default file with appendRequestPath = false', function (done) {\n    testNoAppendPath(done, true, '.tmp');\n  });","file":"plugins/static.test.js","skipped":false,"dir":"test"},{"name":"restify serve a specific static file with appendRequestPath = false","suites":["static resource plugin"],"updatePoint":{"line":189,"column":73,"index":5990},"line":189,"code":"  it('restify serve a specific static file with appendRequestPath = false', function (done) {\n    testNoAppendPath(done, false, '.tmp', null, true);\n  });","file":"plugins/static.test.js","skipped":false,"dir":"test"},{"name":"static responds 404 for missing file","suites":["static resource plugin"],"updatePoint":{"line":192,"column":42,"index":6114},"line":192,"code":"  it('static responds 404 for missing file', function (done) {\n    var p = '/public/no-such-file.json';\n    var tmpPath = path.join(process.cwd(), '.tmp');\n    SERVER.get('/public/.*', restify.plugins.serveStatic({\n      directory: tmpPath\n    }));\n    CLIENT.get(p, function (err, req, res, obj) {\n      assert.ok(err);\n      assert.strictEqual(err.statusCode, 404);\n      assert.strictEqual(err.restCode, 'ResourceNotFound');\n      done();\n    });\n  });","file":"plugins/static.test.js","skipped":false,"dir":"test"},{"name":"GH-1382 static responds 404 for missing file with percent-codes","suites":["static resource plugin"],"updatePoint":{"line":207,"column":69,"index":6628},"line":207,"code":"  it('GH-1382 static responds 404 for missing file with percent-codes', function (done) {\n    var p = '/public/no-%22such-file.json';\n    var tmpPath = path.join(process.cwd(), '.tmp');\n    SERVER.get('/public/.*', restify.plugins.serveStatic({\n      directory: tmpPath\n    }));\n    CLIENT.get(p, function (err, req, res, obj) {\n      assert.ok(err);\n      assert.equal(err.statusCode, 404);\n      assert.equal(err.restCode, 'ResourceNotFound');\n      done();\n    });\n  });","file":"plugins/static.test.js","skipped":false,"dir":"test"},{"name":"static responds 404 for missing file","suites":["static resource plugin"],"updatePoint":{"line":304,"column":42,"index":10128},"line":304,"code":"  it('static responds 404 for missing file', function (done) {\n    var p = '/public/no-such-file.json';\n    var tmpPath = path.join(process.cwd(), '.tmp');\n    SERVER.get('/public/.*', restify.plugins.serveStatic({\n      directory: tmpPath\n    }));\n    CLIENT.get(p, function (err, req, res, obj) {\n      assert.ok(err);\n      assert.equal(err.statusCode, 404);\n      assert.equal(err.restCode, 'ResourceNotFound');\n      return done();\n    });\n  });","file":"plugins/static.test.js","skipped":false,"dir":"test"},{"name":"GH-1382 static responds 404 for missing file with percent-codes","suites":["static resource plugin"],"updatePoint":{"line":319,"column":69,"index":10637},"line":319,"code":"  it('GH-1382 static responds 404 for missing file with percent-codes', function (done) {\n    var p = '/public/no-%22such-file.json';\n    var tmpPath = path.join(process.cwd(), '.tmp');\n    SERVER.get('/public/.*', restify.plugins.serveStatic({\n      directory: tmpPath\n    }));\n    CLIENT.get(p, function (err, req, res, obj) {\n      assert.ok(err);\n      assert.equal(err.statusCode, 404);\n      assert.equal(err.restCode, 'ResourceNotFound');\n      return done();\n    });\n  });","file":"plugins/static.test.js","skipped":false,"dir":"test"},{"name":"serve static file","suites":["staticFiles plugin - no options"],"updatePoint":{"line":67,"column":23,"index":2062},"line":67,"code":"  it('serve static file', function (done) {\n    simpleTests('/public', 'index.html', 'text/html; charset=UTF-8', done);\n  });","file":"plugins/staticFiles.test.js","skipped":false,"dir":"test"},{"name":"serve default static file(index.html)","suites":["staticFiles plugin - no options"],"updatePoint":{"line":70,"column":43,"index":2208},"line":70,"code":"  it('serve default static file(index.html)', function (done) {\n    simpleTests('/public', '/', 'text/html; charset=UTF-8', done);\n  });","file":"plugins/staticFiles.test.js","skipped":false,"dir":"test"},{"name":"serve static file(file1.txt)","suites":["staticFiles plugin - no options"],"updatePoint":{"line":73,"column":34,"index":2336},"line":73,"code":"  it('serve static file(file1.txt)', function (done) {\n    simpleTests('/public', 'file1.txt', 'text/plain; charset=UTF-8', done);\n  });","file":"plugins/staticFiles.test.js","skipped":false,"dir":"test"},{"name":"serve nested static files in request","suites":["staticFiles plugin - no options"],"updatePoint":{"line":76,"column":42,"index":2481},"line":76,"code":"  it('serve nested static files in request', function (done) {\n    simpleTests('/public', 'docs/doc.md', 'text/markdown; charset=UTF-8', done);\n  });","file":"plugins/staticFiles.test.js","skipped":false,"dir":"test"},{"name":"serve default nested static file(index.html)","suites":["staticFiles plugin - no options"],"updatePoint":{"line":79,"column":50,"index":2639},"line":79,"code":"  it('serve default nested static file(index.html)', function (done) {\n    simpleTests('/public', 'docs/', 'text/html; charset=UTF-8', done);\n  });","file":"plugins/staticFiles.test.js","skipped":false,"dir":"test"},{"name":"serve file paths with special chars","suites":["staticFiles plugin - no options"],"updatePoint":{"line":82,"column":41,"index":2778},"line":82,"code":"  it('serve file paths with special chars', function (done) {\n    simpleTests('/public', 'special/$_$/bad (file).txt', 'text/plain; charset=UTF-8', done);\n  });","file":"plugins/staticFiles.test.js","skipped":false,"dir":"test"},{"name":"serve static file","suites":["staticFiles plugin - with options"],"updatePoint":{"line":140,"column":23,"index":4882},"line":140,"code":"  it('serve static file', function (done) {\n    testsWithOptions('/public', 'index.html', OPTIONS, 'text/html; charset=UTF-8', done);\n  });","file":"plugins/staticFiles.test.js","skipped":false,"dir":"test"},{"name":"serve default static file(index.html)","suites":["staticFiles plugin - with options"],"updatePoint":{"line":143,"column":43,"index":5042},"line":143,"code":"  it('serve default static file(index.html)', function (done) {\n    testsWithOptions('/public', '/', OPTIONS, 'text/html; charset=UTF-8', done);\n  });","file":"plugins/staticFiles.test.js","skipped":false,"dir":"test"},{"name":"serve static file(file1.txt)","suites":["staticFiles plugin - with options"],"updatePoint":{"line":146,"column":34,"index":5184},"line":146,"code":"  it('serve static file(file1.txt)', function (done) {\n    testsWithOptions('/public', 'file1.txt', OPTIONS, 'text/plain; charset=UTF-8', done);\n  });","file":"plugins/staticFiles.test.js","skipped":false,"dir":"test"},{"name":"serve nested static files in request","suites":["staticFiles plugin - with options"],"updatePoint":{"line":149,"column":42,"index":5343},"line":149,"code":"  it('serve nested static files in request', function (done) {\n    testsWithOptions('/public', 'docs/doc.md', OPTIONS, 'text/markdown; charset=UTF-8', done);\n  });","file":"plugins/staticFiles.test.js","skipped":false,"dir":"test"},{"name":"serve default nested static file(index.html)","suites":["staticFiles plugin - with options"],"updatePoint":{"line":152,"column":50,"index":5515},"line":152,"code":"  it('serve default nested static file(index.html)', function (done) {\n    testsWithOptions('/public', 'docs/', OPTIONS, 'text/html; charset=UTF-8', done);\n  });","file":"plugins/staticFiles.test.js","skipped":false,"dir":"test"},{"name":"serve file paths with special chars","suites":["staticFiles plugin - with options"],"updatePoint":{"line":155,"column":41,"index":5668},"line":155,"code":"  it('serve file paths with special chars', function (done) {\n    testsWithOptions('/public', 'special/$_$/bad (file).txt', OPTIONS, 'text/plain; charset=UTF-8', done);\n  });","file":"plugins/staticFiles.test.js","skipped":false,"dir":"test"},{"name":"fail to serve root directory","suites":["staticFiles plugin - negative cases"],"updatePoint":{"line":200,"column":34,"index":7233},"line":200,"code":"  it('fail to serve root directory', function (done) {\n    negativeTests('/public', '', 404, 'Not Found', done);\n  });","file":"plugins/staticFiles.test.js","skipped":false,"dir":"test"},{"name":"fail to serve nested directory","suites":["staticFiles plugin - negative cases"],"updatePoint":{"line":203,"column":36,"index":7354},"line":203,"code":"  it('fail to serve nested directory', function (done) {\n    negativeTests('/public', 'docs', 403, 'Forbidden', done);\n  });","file":"plugins/staticFiles.test.js","skipped":false,"dir":"test"},{"name":"fail on file not found","suites":["staticFiles plugin - negative cases"],"updatePoint":{"line":206,"column":28,"index":7471},"line":206,"code":"  it('fail on file not found', function (done) {\n    negativeTests('/public', 'file2.txt', 404, 'Not Found', done);\n  });","file":"plugins/staticFiles.test.js","skipped":false,"dir":"test"},{"name":"fail on nested file not found","suites":["staticFiles plugin - negative cases"],"updatePoint":{"line":209,"column":35,"index":7600},"line":209,"code":"  it('fail on nested file not found', function (done) {\n    negativeTests('/public', 'docs/doc_not_there.md', 404, 'Not Found', done);\n  });","file":"plugins/staticFiles.test.js","skipped":false,"dir":"test"},{"name":"fail on missing file special characters","suites":["staticFiles plugin - negative cases"],"updatePoint":{"line":212,"column":45,"index":7751},"line":212,"code":"  it('fail on missing file special characters', function (done) {\n    negativeTests('/public', 'special/$_$/bad (file)~notExists.txt', 404, 'Not Found', done);\n  });","file":"plugins/staticFiles.test.js","skipped":false,"dir":"test"},{"name":"fail on POST","suites":["staticFiles plugin - negative cases"],"updatePoint":{"line":215,"column":18,"index":7890},"line":215,"code":"  it('fail on POST', function (done) {\n    var ENDPOINT = '/public';\n    var fileSuffixPath = 'docs/';\n    var requestPath = path.join(ENDPOINT, fileSuffixPath);\n    SERVER.post(ENDPOINT + '/*', restify.plugins.serveStaticFiles(path.resolve(STATIC_FILES_PATH), OPTIONS));\n    CLIENT.get(encodeURI(requestPath), function (err, req, res, obj) {\n      assert.exists(err);\n      assert.equal(res.statusCode, 405);\n      assert.equal(res.statusMessage, 'Method Not Allowed');\n      done();\n    });\n  });","file":"plugins/staticFiles.test.js","skipped":false,"dir":"test"},{"name":"serve static file","suites":["staticFiles plugin - with sockets"],"updatePoint":{"line":275,"column":23,"index":10010},"line":275,"code":"  it('serve static file', function (done) {\n    testsWithOptions('/public', 'index.html', done);\n  });","file":"plugins/staticFiles.test.js","skipped":false,"dir":"test"},{"name":"should respond 200 without plugin","suites":["strictQueryParams"],"updatePoint":{"line":39,"column":39,"index":954},"line":39,"code":"  it('should respond 200 without plugin', function (done) {\n    SERVER.use(restify.plugins.queryParser({\n      mapParams: true,\n      overrideParams: true\n    }));\n    SERVER.get('/query/:id', function (req, res, next) {\n      assert.equal(req.params.id, 'bar');\n      assert.notEqual(req.params.name, 'josep&jorge');\n      assert.deepEqual(req.query, req.params);\n      res.send();\n      next();\n    });\n    CLIENT.get('/query/foo?id=bar&name=josep&jorge', function (err, _, res) {\n      assert.ifError(err);\n      assert.equal(res.statusCode, 200);\n      done();\n    });\n  });","file":"plugins/strictQueryParams.test.js","skipped":false,"dir":"test"},{"name":"should respond 400 to non-strict key/val query param","suites":["strictQueryParams"],"updatePoint":{"line":57,"column":58,"index":1552},"line":57,"code":"  it('should respond 400 to non-strict key/val query param', function (done) {\n    SERVER.pre(restify.plugins.pre.strictQueryParams({\n      message: MESSAGE\n    }));\n    SERVER.use(restify.plugins.queryParser({\n      mapParams: true,\n      overrideParams: true\n    }));\n    SERVER.get('/query/:id', function (req, res, next) {\n      res.send();\n      next();\n    });\n    CLIENT.get('/query/foo?id=bar&name=\"josep&jorge', function (err, _, res) {\n      assert.equal(typeof err, 'object');\n      assert.equal(res.statusCode, 400);\n      assert.deepEqual(JSON.parse(res.body), {\n        code: 'BadRequest',\n        message: MESSAGE\n      });\n      done();\n    });\n  });","file":"plugins/strictQueryParams.test.js","skipped":false,"dir":"test"},{"name":"should respond 400 without message opt","suites":["strictQueryParams"],"updatePoint":{"line":79,"column":44,"index":2205},"line":79,"code":"  it('should respond 400 without message opt', function (done) {\n    SERVER.pre(restify.plugins.pre.strictQueryParams());\n    SERVER.use(restify.plugins.queryParser({\n      mapParams: true,\n      overrideParams: true\n    }));\n    SERVER.get('/query/:id', function (req, res, next) {\n      res.send();\n      next();\n    });\n    CLIENT.get('/query/foo?id=bar&name=\"josep&jorge', function (err, _, res) {\n      assert.equal(typeof err, 'object');\n      assert.equal(res.statusCode, 400);\n      assert.deepEqual(JSON.parse(res.body), {\n        code: 'BadRequest',\n        message: 'Url query params does not meet strict format'\n      });\n      done();\n    });\n  });","file":"plugins/strictQueryParams.test.js","skipped":false,"dir":"test"},{"name":"should respond 400 to query param with amp and plus","suites":["strictQueryParams"],"updatePoint":{"line":99,"column":57,"index":2880},"line":99,"code":"  it('should respond 400 to query param with amp and plus', function (done) {\n    SERVER.pre(restify.plugins.pre.strictQueryParams({\n      message: MESSAGE\n    }));\n    SERVER.use(restify.plugins.queryParser({\n      mapParams: true,\n      overrideParams: true\n    }));\n    SERVER.get('/query/:id', function (req, res, next) {\n      assert.equal(req.params.id, 'bar');\n      assert.equal(req.params.name, 'josep & jorge');\n      assert.deepEqual(req.query, req.params);\n      res.send();\n      next();\n    });\n    CLIENT.get('/query/foo?id=bar&name=josep+&+jorge', function (err, _, res) {\n      assert.equal(typeof err, 'object');\n      assert.equal(res.statusCode, 400);\n      assert.deepEqual(JSON.parse(res.body), {\n        code: 'BadRequest',\n        message: MESSAGE\n      });\n      done();\n    });\n  });","file":"plugins/strictQueryParams.test.js","skipped":false,"dir":"test"},{"name":"should respond to non-strict key/val query param value with 400","suites":["strictQueryParams"],"updatePoint":{"line":126,"column":69,"index":3733},"line":126,"code":"  it('should respond to non-strict key/val query param value with 400', function (done) {\n    SERVER.pre(restify.plugins.pre.strictQueryParams({\n      message: MESSAGE\n    }));\n    SERVER.use(restify.plugins.queryParser({\n      mapParams: true,\n      overrideParams: true\n    }));\n    SERVER.get('/query/:id', function (req, res, next) {\n      res.send();\n      next();\n    });\n    CLIENT.get('/query/foo?id=bar&name=josep&jorge', function (err, _, res) {\n      assert.equal(typeof err, 'object');\n      assert.equal(res.statusCode, 400);\n      assert.deepEqual(JSON.parse(res.body), {\n        code: 'BadRequest',\n        message: MESSAGE\n      });\n      done();\n    });\n  });","file":"plugins/strictQueryParams.test.js","skipped":false,"dir":"test"},{"name":"should respond to valid query param value with 200","suites":["strictQueryParams"],"updatePoint":{"line":148,"column":56,"index":4397},"line":148,"code":"  it('should respond to valid query param value with 200', function (done) {\n    SERVER.pre(restify.plugins.pre.strictQueryParams({\n      message: MESSAGE\n    }));\n    SERVER.use(restify.plugins.queryParser({\n      mapParams: true,\n      overrideParams: true\n    }));\n    SERVER.get('/query/:id', function (req, res, next) {\n      assert.equal(req.params.id, 'bar');\n      assert.equal(req.params.name, 'josep & jorge');\n      assert.deepEqual(req.query, req.params);\n      res.send();\n      next();\n    });\n    CLIENT.get('/query/foo?id=bar&name=josep+%26+jorge', function (err, _, res) {\n      assert.equal(typeof err, 'object');\n      assert.equal(res.statusCode, 200);\n      done();\n    });\n  });","file":"plugins/strictQueryParams.test.js","skipped":false,"dir":"test"},{"name":"should respond 200 with scaped amp and s","suites":["strictQueryParams"],"updatePoint":{"line":169,"column":46,"index":5088},"line":169,"code":"  it('should respond 200 with scaped amp and s', function (done) {\n    SERVER.pre(restify.plugins.pre.strictQueryParams({\n      message: MESSAGE\n    }));\n    SERVER.use(restify.plugins.queryParser({\n      mapParams: true,\n      overrideParams: true\n    }));\n    SERVER.get('/query', function (req, res, next) {\n      assert.equal(req.params.id, 'bar');\n      assert.equal(req.params.name, 'josep & jorge');\n      assert.deepEqual(req.query, req.params);\n      res.send();\n      next();\n    });\n    CLIENT.get('/query?id=bar&name=josep%20%26%20jorge', function (err, _, res) {\n      assert.equal(typeof err, 'object');\n      assert.equal(res.statusCode, 200);\n      done();\n    });\n  });","file":"plugins/strictQueryParams.test.js","skipped":false,"dir":"test"},{"name":"ok","suites":["throttle plugin"],"updatePoint":{"line":73,"column":8,"index":1742},"line":73,"code":"  it('ok', function (done) {\n    CLIENT.get('/test/throttleMe', function (err, _, res) {\n      assert.ifError(err);\n      assert.equal(res.statusCode, 200);\n      done();\n    });\n  });","file":"plugins/throttle.test.js","skipped":false,"dir":"test"},{"name":"throttled","suites":["throttle plugin"],"updatePoint":{"line":80,"column":15,"index":1934},"line":80,"code":"  it('throttled', function (done) {\n    this.timeout(3000);\n    CLIENT.get('/test/throttleMe', function (err, _, res) {\n      assert.ok(err);\n      assert.equal(err.statusCode, 429);\n      assert.ok(err.message.indexOf('0.5 r/s') !== -1, errorMessage + (err && err.message));\n      assert.equal(res.statusCode, 429);\n      setTimeout(function () {\n        done();\n      }, 2100);\n    });\n  });","file":"plugins/throttle.test.js","skipped":false,"dir":"test"},{"name":"ok after tokens","suites":["throttle plugin"],"updatePoint":{"line":92,"column":21,"index":2334},"line":92,"code":"  it('ok after tokens', function (done) {\n    CLIENT.get('/test/throttleMe', function (err, _, res) {\n      assert.ifError(err);\n      assert.equal(res.statusCode, 200);\n      done();\n    });\n  });","file":"plugins/throttle.test.js","skipped":false,"dir":"test"},{"name":"override limited","suites":["throttle plugin"],"updatePoint":{"line":99,"column":22,"index":2533},"line":99,"code":"  it('override limited', function (done) {\n    CLIENT.get('/test/special', function (err, _, res) {\n      assert.ifError(err);\n      assert.equal(res.statusCode, 200);\n      done();\n    });\n  });","file":"plugins/throttle.test.js","skipped":false,"dir":"test"},{"name":"override limited (not throttled)","suites":["throttle plugin"],"updatePoint":{"line":106,"column":38,"index":2745},"line":106,"code":"  it('override limited (not throttled)', function (done) {\n    CLIENT.get('/test/special', function (err, _, res) {\n      assert.ifError(err);\n      assert.equal(res.statusCode, 200);\n      done();\n    });\n  });","file":"plugins/throttle.test.js","skipped":false,"dir":"test"},{"name":"throttled after limited override","suites":["throttle plugin"],"updatePoint":{"line":113,"column":38,"index":2957},"line":113,"code":"  it('throttled after limited override', function (done) {\n    CLIENT.get('/test/throttleMe', function () {\n      CLIENT.get('/test/throttleMe', function (err, _, res) {\n        assert.ok(err);\n        assert.equal(res.statusCode, 429);\n        assert.ok(err.message.indexOf('0.5 r/s') !== -1, errorMessage + (err && err.message));\n        done();\n      });\n    });\n  });","file":"plugins/throttle.test.js","skipped":false,"dir":"test"},{"name":"override unlimited","suites":["throttle plugin"],"updatePoint":{"line":123,"column":24,"index":3315},"line":123,"code":"  it('override unlimited', function (done) {\n    CLIENT.get('/test/admin', function (err, _, res) {\n      assert.ifError(err);\n      assert.equal(res.statusCode, 200);\n      done();\n    });\n  });","file":"plugins/throttle.test.js","skipped":false,"dir":"test"},{"name":"override unlimited (not throttled)","suites":["throttle plugin"],"updatePoint":{"line":130,"column":40,"index":3527},"line":130,"code":"  it('override unlimited (not throttled)', function (done) {\n    CLIENT.get('/test/admin', function (err, _, res) {\n      assert.ifError(err);\n      assert.equal(res.statusCode, 200);\n      done();\n    });\n  });","file":"plugins/throttle.test.js","skipped":false,"dir":"test"},{"name":"throttled after unlimited override","suites":["throttle plugin"],"updatePoint":{"line":137,"column":40,"index":3739},"line":137,"code":"  it('throttled after unlimited override', function (done) {\n    CLIENT.get('/test/throttleMe', function () {\n      CLIENT.get('/test/throttleMe', function (err, _, res) {\n        assert.ok(err);\n        assert.equal(res.statusCode, 429);\n        assert.ok(err.message.indexOf('0.5 r/s') !== -1, errorMessage + (err && err.message));\n        done();\n      });\n    });\n  });","file":"plugins/throttle.test.js","skipped":false,"dir":"test"},{"name":"should not expose rate limit headers per default","suites":["throttle plugin"],"updatePoint":{"line":147,"column":54,"index":4127},"line":147,"code":"  it('should not expose rate limit headers per default', function (done) {\n    CLIENT.get('/test/throttleMe', function (err, _, res) {\n      assert.isUndefined(res.headers['x-ratelimit-limit']);\n      assert.isUndefined(res.headers['x-ratelimit-rate']);\n      assert.isUndefined(res.headers['x-ratelimit-rate']);\n      done();\n    });\n  });","file":"plugins/throttle.test.js","skipped":false,"dir":"test"},{"name":"should expose headers on options set","suites":["throttle plugin","expose headers"],"updatePoint":{"line":161,"column":44,"index":4661},"line":161,"code":"    it('should expose headers on options set', function (done) {\n      // setup a new server with headers set to true since we cant\n      // change throttle options after init\n      setupClientServer('127.0.0.1', {\n        burst: 17,\n        rate: 0.1,\n        username: true,\n        setHeaders: true\n      }, function setupWithHeaders(client, server) {\n        client.get('/test/throttleMe', function (err, req, res) {\n          assert.equal(res.headers['x-ratelimit-limit'], '17');\n          assert.equal(res.headers['x-ratelimit-rate'], '0.1');\n          assert.equal(res.headers['x-ratelimit-remaining'], '16');\n\n          // it should count down\n          client.get('/test/throttleMe', function (nextErr, nextReq, nextRes) {\n            assert.equal(nextRes.headers['x-ratelimit-limit'], '17');\n            assert.equal(nextRes.headers['x-ratelimit-rate'], '0.1');\n            assert.equal(nextRes.headers['x-ratelimit-remaining'], '15');\n            client.close();\n            server.close(done);\n          });\n        });\n      });\n    });","file":"plugins/throttle.test.js","skipped":false,"dir":"test"},{"name":"sets proper headers for HEAD requests from curl","suites":["userAgent pre-route handler"],"updatePoint":{"line":61,"column":53,"index":1879},"line":61,"code":"  it('sets proper headers for HEAD requests from curl', function (done) {\n    var CURL_CMD = ['curl', '-sS', '-i', TEST_ENDPOINT, '-X', 'HEAD'].join(' ');\n    child_process.exec(CURL_CMD, function onExec(err, stdout, stderr) {\n      assert.ifError(err);\n      var lines = stdout.split(/\\n/);\n      var contentLengthHeaderNotPresent = lines.every(function checkContentLengthNotPresent(line) {\n        return /Content-Length:.*/.test(line) === false;\n      });\n      var connectionCloseHeaderPresent = lines.some(function checkConnectionClosePresent(line) {\n        return /Connection: close/.test(line);\n      });\n      assert.ok(contentLengthHeaderNotPresent);\n      assert.ok(connectionCloseHeaderPresent);\n      done();\n    });\n  });","file":"plugins/userAgent.test.js","skipped":false,"dir":"test"},{"name":"sets proper headers for HEAD requests from non-curl clients","suites":["userAgent pre-route handler"],"updatePoint":{"line":83,"column":65,"index":2914},"line":83,"code":"  it('sets proper headers for HEAD requests from non-curl clients', function (done) {\n    var req = http.request({\n      hostname: SERVER_ADDRESS,\n      port: SERVER_PORT,\n      path: TEST_PATH,\n      method: 'HEAD',\n      headers: {\n        'user-agent': 'foobar',\n        connection: 'keep-alive'\n      }\n    }, function onResponse(res) {\n      var responseHeaders = res.headers;\n      assert.ok(responseHeaders.hasOwnProperty('content-length'));\n      assert.equal(responseHeaders.connection, 'keep-alive');\n\n      // destroy the socket explicitly now since the request was\n      // explicitly requesting to not destroy the socket by setting\n      // its connection header to 'keep-alive'.\n      req.abort();\n      done();\n    });\n    req.on('error', function onReqError(err) {\n      assert.ifError(err);\n      done();\n    });\n    req.end();\n  });","file":"plugins/userAgent.test.js","skipped":false,"dir":"test"},{"name":"should return with duration","suites":["utils #hrTimeDurationInMs"],"updatePoint":{"line":7,"column":33,"index":250},"line":7,"code":"  it('should return with duration', function () {\n    var startTime = [0, 0];\n    var endTime = [1, 1e6];\n    var duration = hrTimeDurationInMs(startTime, endTime);\n    assert.equal(duration, 1001);\n  });","file":"plugins/utilsHrTimeDurationInMs.test.js","skipped":false,"dir":"test"}]}