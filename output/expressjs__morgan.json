{"repo":"expressjs/morgan","url":"https://github.com/expressjs/morgan","branch":"master","configs":[{"package":"morgan","lang":"js","dir":"test","framework":"mocha","pattern":"**/*.{js,ts}"}],"tests":[{"name":"should use default format","suites":["morgan()","arguments"],"updatePoint":{"line":21,"column":33},"line":21,"code":"    it('should use default format', function (done) {\n      var cb = after(2, function (err, res, line) {\n        if (err) return done(err);\n        assert(res.text.length > 0);\n        assert.strictEqual(line.substr(0, res.text.length), res.text);\n        done();\n      });\n      var stream = createLineStream(function (line) {\n        cb(null, null, line);\n      });\n      request(createServer(undefined, {\n        stream: stream\n      })).get('/').expect(200, cb);\n    });","file":"morgan.js","skipped":false,"dir":"test"},{"name":"should accept format as format name","suites":["morgan()","arguments","format"],"updatePoint":{"line":36,"column":45},"line":36,"code":"      it('should accept format as format name', function (done) {\n        var cb = after(2, function (err, res, line) {\n          if (err) return done(err);\n          assert(/^GET \\/ 200 - - \\d+\\.\\d{3} ms$/.test(line));\n          done();\n        });\n        var stream = createLineStream(function (line) {\n          cb(null, null, line);\n        });\n        request(createServer('tiny', {\n          stream: stream\n        })).get('/').expect(200, cb);\n      });","file":"morgan.js","skipped":false,"dir":"test"},{"name":"should accept format as format string","suites":["morgan()","arguments","format"],"updatePoint":{"line":49,"column":47},"line":49,"code":"      it('should accept format as format string', function (done) {\n        var cb = after(2, function (err, res, line) {\n          if (err) return done(err);\n          assert.strictEqual(line, 'GET /');\n          done();\n        });\n        var stream = createLineStream(function (line) {\n          cb(null, null, line);\n        });\n        request(createServer(':method :url', {\n          stream: stream\n        })).get('/').expect(200, cb);\n      });","file":"morgan.js","skipped":false,"dir":"test"},{"name":"should accept format as function","suites":["morgan()","arguments","format"],"updatePoint":{"line":62,"column":42},"line":62,"code":"      it('should accept format as function', function (done) {\n        var cb = after(2, function (err, res, line) {\n          if (err) return done(err);\n          assert.strictEqual(line, 'GET / 200');\n          done();\n        });\n        var stream = createLineStream(function (line) {\n          cb(null, null, line);\n        });\n\n        function format(tokens, req, res) {\n          return [req.method, req.url, res.statusCode].join(' ');\n        }\n\n        request(createServer(format, {\n          stream: stream\n        })).get('/').expect(200, cb);\n      });","file":"morgan.js","skipped":false,"dir":"test"},{"name":"should reject format as bool","suites":["morgan()","arguments","format"],"updatePoint":{"line":80,"column":38},"line":80,"code":"      it('should reject format as bool', function () {\n        assert.throws(createServer.bind(null, true), /argument format/);\n      });","file":"morgan.js","skipped":false,"dir":"test"},{"name":"should accept options object","suites":["morgan()","arguments","format","back-compat"],"updatePoint":{"line":84,"column":40},"line":84,"code":"        it('should accept options object', function (done) {\n          var cb = after(2, function (err, res, line) {\n            if (err) return done(err);\n            assert(res.text.length > 0);\n            assert.strictEqual(line.substr(0, res.text.length), res.text);\n            done();\n          });\n          var stream = createLineStream(function (line) {\n            cb(null, null, line);\n          });\n          request(createServer({\n            stream: stream\n          })).get('/').expect(200, cb);\n        });","file":"morgan.js","skipped":false,"dir":"test"},{"name":"should accept format in options for back-compat","suites":["morgan()","arguments","format","back-compat"],"updatePoint":{"line":98,"column":59},"line":98,"code":"        it('should accept format in options for back-compat', function (done) {\n          var cb = after(2, function (err, res, line) {\n            if (err) return done(err);\n            assert.strictEqual(line, 'GET /');\n            done();\n          });\n          var stream = createLineStream(function (line) {\n            cb(null, null, line);\n          });\n          request(createServer({\n            format: ':method :url',\n            stream: stream\n          })).get('/').expect(200, cb);\n        });","file":"morgan.js","skipped":false,"dir":"test"},{"name":"should accept format function in options for back-compat","suites":["morgan()","arguments","format","back-compat"],"updatePoint":{"line":112,"column":68},"line":112,"code":"        it('should accept format function in options for back-compat', function (done) {\n          var cb = after(2, function (err, res, line) {\n            if (err) return done(err);\n            assert.strictEqual(line, 'apple');\n            done();\n          });\n          var stream = createLineStream(function (line) {\n            cb(null, null, line);\n          });\n\n          function format() {\n            return 'apple';\n          }\n\n          request(createServer({\n            format: format,\n            stream: stream\n          })).get('/').expect(200, cb);\n        });","file":"morgan.js","skipped":false,"dir":"test"},{"name":"should default to process.stdout","suites":["morgan()","arguments","stream"],"updatePoint":{"line":142,"column":42},"line":142,"code":"      it('should default to process.stdout', function (done) {\n        var cb = after(2, function (err, res, line) {\n          if (err) return done(err);\n          assert(res.text.length > 0);\n          assert.strictEqual(line.substr(0, res.text.length), res.text);\n          done();\n        });\n        var stream = createLineStream(function (line) {\n          cb(null, null, line);\n        });\n        Object.defineProperty(process, 'stdout', {\n          value: stream\n        });\n        request(createServer(undefined, {\n          stream: undefined\n        })).get('/').expect(200, cb);\n      });","file":"morgan.js","skipped":false,"dir":"test"},{"name":"should set stream to write logs to","suites":["morgan()","arguments","stream"],"updatePoint":{"line":159,"column":44},"line":159,"code":"      it('should set stream to write logs to', function (done) {\n        var cb = after(2, function (err, res, line) {\n          if (err) return done(err);\n          assert(res.text.length > 0);\n          assert.strictEqual(line.substr(0, res.text.length), res.text);\n          done();\n        });\n        var stream = createLineStream(function (line) {\n          cb(null, null, line);\n        });\n        request(createServer(undefined, {\n          stream: stream\n        })).get('/').expect(200, cb);\n      });","file":"morgan.js","skipped":false,"dir":"test"},{"name":"should get current date in \"web\" format by default","suites":["morgan()","tokens",":date"],"updatePoint":{"line":177,"column":60},"line":177,"code":"      it('should get current date in \"web\" format by default', function (done) {\n        var cb = after(2, function (err, res, line) {\n          if (err) return done(err);\n          assert.ok(/^\\w{3}, \\d{2} \\w{3} \\d{4} \\d{2}:\\d{2}:\\d{2} GMT$/.test(line));\n          done();\n        });\n        var stream = createLineStream(function (line) {\n          cb(null, null, line);\n        });\n        request(createServer(':date', {\n          stream: stream\n        })).get('/').expect(200, cb);\n      });","file":"morgan.js","skipped":false,"dir":"test"},{"name":"should get current date in \"clf\" format","suites":["morgan()","tokens",":date"],"updatePoint":{"line":190,"column":49},"line":190,"code":"      it('should get current date in \"clf\" format', function (done) {\n        var cb = after(2, function (err, res, line) {\n          if (err) return done(err);\n          assert.ok(/^\\d{2}\\/\\w{3}\\/\\d{4}:\\d{2}:\\d{2}:\\d{2} \\+0000$/.test(line));\n          done();\n        });\n        var stream = createLineStream(function (line) {\n          cb(null, null, line);\n        });\n        request(createServer(':date[clf]', {\n          stream: stream\n        })).get('/').expect(200, cb);\n      });","file":"morgan.js","skipped":false,"dir":"test"},{"name":"should get current date in \"iso\" format","suites":["morgan()","tokens",":date"],"updatePoint":{"line":203,"column":49},"line":203,"code":"      it('should get current date in \"iso\" format', function (done) {\n        var cb = after(2, function (err, res, line) {\n          if (err) return done(err);\n          assert.ok(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?Z$/.test(line));\n          done();\n        });\n        var stream = createLineStream(function (line) {\n          cb(null, null, line);\n        });\n        request(createServer(':date[iso]', {\n          stream: stream\n        })).get('/').expect(200, cb);\n      });","file":"morgan.js","skipped":false,"dir":"test"},{"name":"should get current date in \"web\" format","suites":["morgan()","tokens",":date"],"updatePoint":{"line":216,"column":49},"line":216,"code":"      it('should get current date in \"web\" format', function (done) {\n        var cb = after(2, function (err, res, line) {\n          if (err) return done(err);\n          assert.ok(/^\\w{3}, \\d{2} \\w{3} \\d{4} \\d{2}:\\d{2}:\\d{2} GMT$/.test(line));\n          done();\n        });\n        var stream = createLineStream(function (line) {\n          cb(null, null, line);\n        });\n        request(createServer(':date[web]', {\n          stream: stream\n        })).get('/').expect(200, cb);\n      });","file":"morgan.js","skipped":false,"dir":"test"},{"name":"should be blank for unknown format","suites":["morgan()","tokens",":date"],"updatePoint":{"line":229,"column":44},"line":229,"code":"      it('should be blank for unknown format', function (done) {\n        var cb = after(2, function (err, res, line) {\n          if (err) return done(err);\n          assert.strictEqual(line, '-');\n          done();\n        });\n        var stream = createLineStream(function (line) {\n          cb(null, null, line);\n        });\n        request(createServer(':date[bogus]', {\n          stream: stream\n        })).get('/').expect(200, cb);\n      });","file":"morgan.js","skipped":false,"dir":"test"},{"name":"should be 1.0 or 1.1","suites":["morgan()","tokens",":http-version"],"updatePoint":{"line":244,"column":30},"line":244,"code":"      it('should be 1.0 or 1.1', function (done) {\n        var cb = after(2, function (err, res, line) {\n          if (err) return done(err);\n          assert.ok(/^1\\.[01]$/.test(line));\n          done();\n        });\n        var stream = createLineStream(function (line) {\n          cb(null, null, line);\n        });\n        request(createServer(':http-version', {\n          stream: stream\n        })).get('/').expect(200, cb);\n      });","file":"morgan.js","skipped":false,"dir":"test"},{"name":"should get request properties","suites":["morgan()","tokens",":req"],"updatePoint":{"line":259,"column":39},"line":259,"code":"      it('should get request properties', function (done) {\n        var cb = after(2, function (err, res, line) {\n          if (err) return done(err);\n          assert.strictEqual(line, 'me');\n          done();\n        });\n        var stream = createLineStream(function (line) {\n          cb(null, null, line);\n        });\n        request(createServer(':req[x-from-string]', {\n          stream: stream\n        })).get('/').set('x-from-string', 'me').expect(200, cb);\n      });","file":"morgan.js","skipped":false,"dir":"test"},{"name":"should display all values of array headers","suites":["morgan()","tokens",":req"],"updatePoint":{"line":272,"column":52},"line":272,"code":"      it('should display all values of array headers', function (done) {\n        var cb = after(2, function (err, res, line) {\n          if (err) return done(err);\n          assert.strictEqual(line, 'foo=bar, fizz=buzz');\n          done();\n        });\n        var stream = createLineStream(function (line) {\n          cb(null, null, line);\n        });\n        request(createServer(':req[set-cookie]', {\n          stream: stream\n        })).get('/').set('Set-Cookie', ['foo=bar', 'fizz=buzz']).expect(200, cb);\n      });","file":"morgan.js","skipped":false,"dir":"test"},{"name":"should get response properties","suites":["morgan()","tokens",":res"],"updatePoint":{"line":287,"column":40},"line":287,"code":"      it('should get response properties', function (done) {\n        var cb = after(2, function (err, res, line) {\n          if (err) return done(err);\n          assert.strictEqual(line, 'true');\n          done();\n        });\n        var stream = createLineStream(function (line) {\n          cb(null, null, line);\n        });\n        request(createServer(':res[x-sent]', {\n          stream: stream\n        })).get('/').expect(200, cb);\n      });","file":"morgan.js","skipped":false,"dir":"test"},{"name":"should display all values of array headers","suites":["morgan()","tokens",":res"],"updatePoint":{"line":300,"column":52},"line":300,"code":"      it('should display all values of array headers', function (done) {\n        var cb = after(2, function (err, res, line) {\n          if (err) return done(err);\n          assert.strictEqual(line, 'foo, bar');\n          done();\n        });\n        var stream = createLineStream(function (line) {\n          cb(null, null, line);\n        });\n        var server = createServer(':res[x-keys]', {\n          stream: stream\n        }, function (req, res, next) {\n          res.setHeader('X-Keys', ['foo', 'bar']);\n          next();\n        });\n        request(server).get('/').expect('X-Keys', 'foo, bar').expect(200, cb);\n      });","file":"morgan.js","skipped":false,"dir":"test"},{"name":"should get remote address","suites":["morgan()","tokens",":remote-addr"],"updatePoint":{"line":319,"column":35},"line":319,"code":"      it('should get remote address', function (done) {\n        var cb = after(2, function (err, res, line) {\n          if (err) return done(err);\n          assert.ok(res.text.length > 0);\n          assert.strictEqual(line, res.text);\n          done();\n        });\n        var stream = createLineStream(function (line) {\n          cb(null, null, line);\n        });\n        request(createServer(':remote-addr', {\n          stream: stream\n        })).get('/').expect(200, cb);\n      });","file":"morgan.js","skipped":false,"dir":"test"},{"name":"should use req.ip if there","suites":["morgan()","tokens",":remote-addr"],"updatePoint":{"line":333,"column":36},"line":333,"code":"      it('should use req.ip if there', function (done) {\n        var cb = after(2, function (err, res, line) {\n          if (err) return done(err);\n          assert.strictEqual(line, '10.0.0.1');\n          done();\n        });\n        var stream = createLineStream(function (line) {\n          cb(null, null, line);\n        });\n        var server = createServer(':remote-addr', {\n          stream: stream\n        }, null, function (req) {\n          req.ip = '10.0.0.1';\n        });\n        request(server).get('/').expect(200, cb);\n      });","file":"morgan.js","skipped":false,"dir":"test"},{"name":"should work on https server","suites":["morgan()","tokens",":remote-addr"],"updatePoint":{"line":349,"column":37},"line":349,"code":"      it('should work on https server', function (done) {\n        var cb = after(2, function (err, res, line) {\n          if (err) return done(err);\n          assert.ok(res.text.length > 0);\n          assert.strictEqual(line, res.text);\n          done();\n        });\n        var stream = createLineStream(function (line) {\n          cb(null, null, line);\n        });\n        var server = createSecureServer(':remote-addr', {\n          stream: stream\n        });\n        request(server).get('/').ca(server.cert).expect(200, cb);\n      });","file":"morgan.js","skipped":false,"dir":"test"},{"name":"should work when connection: close","suites":["morgan()","tokens",":remote-addr"],"updatePoint":{"line":364,"column":44},"line":364,"code":"      it('should work when connection: close', function (done) {\n        var cb = after(2, function (err, res, line) {\n          if (err) return done(err);\n          assert.ok(res.text.length > 0);\n          assert.strictEqual(line, res.text);\n          done();\n        });\n        var stream = createLineStream(function (line) {\n          cb(null, null, line);\n        });\n        request(createServer(':remote-addr', {\n          stream: stream\n        })).get('/').set('Connection', 'close').expect(200, cb);\n      });","file":"morgan.js","skipped":false,"dir":"test"},{"name":"should work when connection: keep-alive","suites":["morgan()","tokens",":remote-addr"],"updatePoint":{"line":378,"column":49},"line":378,"code":"      it('should work when connection: keep-alive', function (done) {\n        var cb = after(2, function (err, res, line) {\n          if (err) return done(err);\n          assert.ok(res.text.length > 0);\n          assert.strictEqual(line, res.text);\n          res.req.connection.destroy();\n          server.close(done);\n        });\n        var stream = createLineStream(function (line) {\n          cb(null, null, line);\n        });\n        var server = createServer(':remote-addr', {\n          stream: stream\n        }, function (req, res, next) {\n          delete req._remoteAddress;\n          next();\n        });\n        request(server.listen()).get('/').set('Connection', 'keep-alive').expect(200, cb);\n      });","file":"morgan.js","skipped":false,"dir":"test"},{"name":"should work when req.ip is a getter","suites":["morgan()","tokens",":remote-addr"],"updatePoint":{"line":397,"column":45},"line":397,"code":"      it('should work when req.ip is a getter', function (done) {\n        var cb = after(2, function (err, res, line) {\n          if (err) return done(err);\n          assert.strictEqual(line, '10.0.0.1');\n          done();\n        });\n        var stream = createLineStream(function (line) {\n          cb(null, null, line);\n        });\n        var server = createServer(':remote-addr', {\n          stream: stream\n        }, null, function (req) {\n          Object.defineProperty(req, 'ip', {\n            get: function () {\n              return req.connection.remoteAddress ? '10.0.0.1' : undefined;\n            }\n          });\n        });\n        request(server).get('/').set('Connection', 'close').expect(200, cb);\n      });","file":"morgan.js","skipped":false,"dir":"test"},{"name":"should not fail if req.connection missing","suites":["morgan()","tokens",":remote-addr"],"updatePoint":{"line":417,"column":51},"line":417,"code":"      it('should not fail if req.connection missing', function (done) {\n        var cb = after(2, function (err, res, line) {\n          if (err) return done(err);\n          assert.ok(res.text.length > 0);\n          assert.strictEqual(line, res.text);\n          res.req.connection.destroy();\n          server.close(done);\n        });\n        var stream = createLineStream(function (line) {\n          cb(null, null, line);\n        });\n        var server = createServer(':remote-addr', {\n          stream: stream\n        }, null, function (req) {\n          delete req.connection;\n        });\n        request(server.listen()).get('/').set('Connection', 'keep-alive').expect(200, cb);\n      });","file":"morgan.js","skipped":false,"dir":"test"},{"name":"should be empty if none present","suites":["morgan()","tokens",":remote-user"],"updatePoint":{"line":437,"column":41},"line":437,"code":"      it('should be empty if none present', function (done) {\n        var cb = after(2, function (err, res, line) {\n          if (err) return done(err);\n          assert.strictEqual(line, '-');\n          done();\n        });\n        var stream = createLineStream(function (line) {\n          cb(null, null, line);\n        });\n        request(createServer(':remote-user', {\n          stream: stream\n        })).get('/').expect(200, cb);\n      });","file":"morgan.js","skipped":false,"dir":"test"},{"name":"should support Basic authorization","suites":["morgan()","tokens",":remote-user"],"updatePoint":{"line":450,"column":44},"line":450,"code":"      it('should support Basic authorization', function (done) {\n        var cb = after(2, function (err, res, line) {\n          if (err) return done(err);\n          assert.strictEqual(line, 'tj');\n          done();\n        });\n        var stream = createLineStream(function (line) {\n          cb(null, null, line);\n        });\n        request(createServer(':remote-user', {\n          stream: stream\n        })).get('/').set('Authorization', 'Basic dGo6').expect(200, cb);\n      });","file":"morgan.js","skipped":false,"dir":"test"},{"name":"should be empty for empty Basic authorization user","suites":["morgan()","tokens",":remote-user"],"updatePoint":{"line":463,"column":60},"line":463,"code":"      it('should be empty for empty Basic authorization user', function (done) {\n        var cb = after(2, function (err, res, line) {\n          if (err) return done(err);\n          assert.strictEqual(line, '-');\n          done();\n        });\n        var stream = createLineStream(function (line) {\n          cb(null, null, line);\n        });\n        request(createServer(':remote-user', {\n          stream: stream\n        })).get('/').set('Authorization', 'Basic Og==').expect(200, cb);\n      });","file":"morgan.js","skipped":false,"dir":"test"},{"name":"should be in milliseconds","suites":["morgan()","tokens",":response-time"],"updatePoint":{"line":478,"column":35},"line":478,"code":"      it('should be in milliseconds', function (done) {\n        var cb = after(2, function (err, res, line) {\n          if (err) return done(err);\n          var end = Date.now();\n          var ms = parseFloat(line);\n          assert(ms > 0);\n          assert(ms < end - start + 1);\n          done();\n        });\n        var stream = createLineStream(function (line) {\n          cb(null, null, line);\n        });\n        var start = Date.now();\n        request(createServer(':response-time', {\n          stream: stream\n        })).get('/').expect(200, cb);\n      });","file":"morgan.js","skipped":false,"dir":"test"},{"name":"should have three digits by default","suites":["morgan()","tokens",":response-time"],"updatePoint":{"line":495,"column":45},"line":495,"code":"      it('should have three digits by default', function (done) {\n        var cb = after(2, function (err, res, line) {\n          if (err) return done(err);\n          assert.ok(/^[0-9]+\\.[0-9]{3}$/.test(line));\n          done();\n        });\n        var stream = createLineStream(function (line) {\n          cb(null, null, line);\n        });\n        request(createServer(':response-time', {\n          stream: stream\n        })).get('/').expect(200, cb);\n      });","file":"morgan.js","skipped":false,"dir":"test"},{"name":"should have five digits with argument \"5\"","suites":["morgan()","tokens",":response-time"],"updatePoint":{"line":508,"column":51},"line":508,"code":"      it('should have five digits with argument \"5\"', function (done) {\n        var cb = after(2, function (err, res, line) {\n          if (err) return done(err);\n          assert.ok(/^[0-9]+\\.[0-9]{5}$/.test(line));\n          done();\n        });\n        var stream = createLineStream(function (line) {\n          cb(null, null, line);\n        });\n        request(createServer(':response-time[5]', {\n          stream: stream\n        })).get('/').expect(200, cb);\n      });","file":"morgan.js","skipped":false,"dir":"test"},{"name":"should have no digits with argument \"0\"","suites":["morgan()","tokens",":response-time"],"updatePoint":{"line":521,"column":49},"line":521,"code":"      it('should have no digits with argument \"0\"', function (done) {\n        var cb = after(2, function (err, res, line) {\n          if (err) return done(err);\n          assert.ok(/^[0-9]+$/.test(line));\n          done();\n        });\n        var stream = createLineStream(function (line) {\n          cb(null, null, line);\n        });\n        request(createServer(':response-time[0]', {\n          stream: stream\n        })).get('/').expect(200, cb);\n      });","file":"morgan.js","skipped":false,"dir":"test"},{"name":"should not include response write time","suites":["morgan()","tokens",":response-time"],"updatePoint":{"line":534,"column":48},"line":534,"code":"      it('should not include response write time', function (done) {\n        var cb = after(2, function (err, res, line) {\n          if (err) return done(err);\n          var end = Date.now();\n          var ms = parseFloat(line);\n          assert(ms > 0);\n          assert(ms < end - start + 1);\n          assert(ms < write - start + 1);\n          done();\n        });\n        var stream = createLineStream(function (line) {\n          cb(null, null, line);\n        });\n        var server = createServer(':response-time', {\n          stream: stream\n        }, function (req, res) {\n          res.write('hello, ');\n          write = Date.now();\n          setTimeout(function () {\n            res.end('world!');\n          }, 50);\n        });\n        var start = Date.now();\n        var write = null;\n        request(server).get('/').expect(200, cb);\n      });","file":"morgan.js","skipped":false,"dir":"test"},{"name":"should be empty without hidden property","suites":["morgan()","tokens",":response-time"],"updatePoint":{"line":560,"column":49},"line":560,"code":"      it('should be empty without hidden property', function (done) {\n        var cb = after(2, function (err, res, line) {\n          if (err) return done(err);\n          assert.strictEqual(line, '-');\n          done();\n        });\n        var stream = createLineStream(function (line) {\n          cb(null, null, line);\n        });\n        var server = createServer(':response-time', {\n          stream: stream\n        }, function (req, res, next) {\n          delete req._startAt;\n          next();\n        });\n        request(server).get('/').expect(200, cb);\n      });","file":"morgan.js","skipped":false,"dir":"test"},{"name":"should be empty before response","suites":["morgan()","tokens",":response-time"],"updatePoint":{"line":577,"column":41},"line":577,"code":"      it('should be empty before response', function (done) {\n        var cb = after(2, function (err, res, line) {\n          if (err) return done(err);\n          assert.strictEqual(line, '-');\n          done();\n        });\n        var stream = createLineStream(function (line) {\n          cb(null, null, line);\n        });\n        var server = createServer(':response-time', {\n          immediate: true,\n          stream: stream\n        });\n        request(server).get('/').expect(200, cb);\n      });","file":"morgan.js","skipped":false,"dir":"test"},{"name":"should be empty if morgan invoked after response sent","suites":["morgan()","tokens",":response-time"],"updatePoint":{"line":592,"column":63},"line":592,"code":"      it('should be empty if morgan invoked after response sent', function (done) {\n        var cb = after(3, function (err, res, line) {\n          if (err) return done(err);\n          assert.strictEqual(line, '-');\n          done();\n        });\n        var stream = createLineStream(function (line) {\n          cb(null, null, line);\n        });\n        var logger = morgan(':response-time', {\n          immediate: true,\n          stream: stream\n        });\n        var server = http.createServer(function (req, res) {\n          setTimeout(function () {\n            logger(req, res, cb);\n          }, 10);\n          res.end();\n        });\n        request(server).get('/').expect(200, cb);\n      });","file":"morgan.js","skipped":false,"dir":"test"},{"name":"should get response status","suites":["morgan()","tokens",":status"],"updatePoint":{"line":615,"column":36},"line":615,"code":"      it('should get response status', function (done) {\n        var cb = after(2, function (err, res, line) {\n          if (err) return done(err);\n          assert.strictEqual(line, String(res.statusCode));\n          done();\n        });\n        var stream = createLineStream(function (line) {\n          cb(null, null, line);\n        });\n        request(createServer(':status', {\n          stream: stream\n        })).get('/').expect(200, cb);\n      });","file":"morgan.js","skipped":false,"dir":"test"},{"name":"should not exist before response sent","suites":["morgan()","tokens",":status"],"updatePoint":{"line":628,"column":47},"line":628,"code":"      it('should not exist before response sent', function (done) {\n        var cb = after(2, function (err, res, line) {\n          if (err) return done(err);\n          assert.strictEqual(line, '-');\n          done();\n        });\n        var stream = createLineStream(function (line) {\n          cb(null, null, line);\n        });\n        var server = createServer(':status', {\n          immediate: true,\n          stream: stream\n        });\n        request(server).get('/').expect(200, cb);\n      });","file":"morgan.js","skipped":false,"dir":"test"},{"name":"should not exist for aborted request","suites":["morgan()","tokens",":status"],"updatePoint":{"line":643,"column":46},"line":643,"code":"      it('should not exist for aborted request', function (done) {\n        var stream = createLineStream(function (line) {\n          assert.strictEqual(line, '-');\n          server.close(done);\n        });\n        var server = createServer(':status', {\n          stream: stream\n        }, function () {\n          test.abort();\n        });\n        var test = request(server).post('/');\n        test.write('0');\n      });","file":"morgan.js","skipped":false,"dir":"test"},{"name":"should be in milliseconds","suites":["morgan()","tokens",":total-time"],"updatePoint":{"line":658,"column":35},"line":658,"code":"      it('should be in milliseconds', function (done) {\n        var cb = after(2, function (err, res, line) {\n          if (err) return done(err);\n          var end = Date.now();\n          var ms = parseFloat(line);\n          assert(ms > 0);\n          assert(ms < end - start + 1);\n          done();\n        });\n        var stream = createLineStream(function (line) {\n          cb(null, null, line);\n        });\n        var start = Date.now();\n        request(createServer(':total-time', {\n          stream: stream\n        })).get('/').expect(200, cb);\n      });","file":"morgan.js","skipped":false,"dir":"test"},{"name":"should have three digits by default","suites":["morgan()","tokens",":total-time"],"updatePoint":{"line":675,"column":45},"line":675,"code":"      it('should have three digits by default', function (done) {\n        var cb = after(2, function (err, res, line) {\n          if (err) return done(err);\n          assert.ok(/^[0-9]+\\.[0-9]{3}$/.test(line));\n          done();\n        });\n        var stream = createLineStream(function (line) {\n          cb(null, null, line);\n        });\n        request(createServer(':total-time', {\n          stream: stream\n        })).get('/').expect(200, cb);\n      });","file":"morgan.js","skipped":false,"dir":"test"},{"name":"should have five digits with argument \"5\"","suites":["morgan()","tokens",":total-time"],"updatePoint":{"line":688,"column":51},"line":688,"code":"      it('should have five digits with argument \"5\"', function (done) {\n        var cb = after(2, function (err, res, line) {\n          if (err) return done(err);\n          assert.ok(/^[0-9]+\\.[0-9]{5}$/.test(line));\n          done();\n        });\n        var stream = createLineStream(function (line) {\n          cb(null, null, line);\n        });\n        request(createServer(':total-time[5]', {\n          stream: stream\n        })).get('/').expect(200, cb);\n      });","file":"morgan.js","skipped":false,"dir":"test"},{"name":"should have no digits with argument \"0\"","suites":["morgan()","tokens",":total-time"],"updatePoint":{"line":701,"column":49},"line":701,"code":"      it('should have no digits with argument \"0\"', function (done) {\n        var cb = after(2, function (err, res, line) {\n          if (err) return done(err);\n          assert.ok(/^[0-9]+$/.test(line));\n          done();\n        });\n        var stream = createLineStream(function (line) {\n          cb(null, null, line);\n        });\n        request(createServer(':total-time[0]', {\n          stream: stream\n        })).get('/').expect(200, cb);\n      });","file":"morgan.js","skipped":false,"dir":"test"},{"name":"should include response write time","suites":["morgan()","tokens",":total-time"],"updatePoint":{"line":714,"column":44},"line":714,"code":"      it('should include response write time', function (done) {\n        var cb = after(2, function (err, res, line) {\n          if (err) return done(err);\n          var end = Date.now();\n          var ms = parseFloat(line);\n          assert(ms > 0);\n          assert(ms > write - start - 1);\n          assert(ms < end - start + 1);\n          done();\n        });\n        var stream = createLineStream(function (line) {\n          cb(null, null, line);\n        });\n        var server = createServer(':total-time', {\n          stream: stream\n        }, function (req, res) {\n          res.write('hello, ');\n          write = Date.now();\n          setTimeout(function () {\n            res.end('world!');\n          }, 50);\n        });\n        var start = Date.now();\n        var write = null;\n        request(server).get('/').expect(200, cb);\n      });","file":"morgan.js","skipped":false,"dir":"test"},{"name":"should be empty without hidden property","suites":["morgan()","tokens",":total-time"],"updatePoint":{"line":740,"column":49},"line":740,"code":"      it('should be empty without hidden property', function (done) {\n        var cb = after(2, function (err, res, line) {\n          if (err) return done(err);\n          assert.strictEqual(line, '-');\n          done();\n        });\n        var stream = createLineStream(function (line) {\n          cb(null, null, line);\n        });\n        var server = createServer(':total-time', {\n          stream: stream\n        }, function (req, res, next) {\n          delete req._startAt;\n          next();\n        });\n        request(server).get('/').expect(200, cb);\n      });","file":"morgan.js","skipped":false,"dir":"test"},{"name":"should be empty before response","suites":["morgan()","tokens",":total-time"],"updatePoint":{"line":757,"column":41},"line":757,"code":"      it('should be empty before response', function (done) {\n        var cb = after(2, function (err, res, line) {\n          if (err) return done(err);\n          assert.strictEqual(line, '-');\n          done();\n        });\n        var stream = createLineStream(function (line) {\n          cb(null, null, line);\n        });\n        var server = createServer(':total-time', {\n          immediate: true,\n          stream: stream\n        });\n        request(server).get('/').expect(200, cb);\n      });","file":"morgan.js","skipped":false,"dir":"test"},{"name":"should be empty if morgan invoked after response sent","suites":["morgan()","tokens",":total-time"],"updatePoint":{"line":772,"column":63},"line":772,"code":"      it('should be empty if morgan invoked after response sent', function (done) {\n        var cb = after(3, function (err, res, line) {\n          if (err) return done(err);\n          assert.strictEqual(line, '-');\n          done();\n        });\n        var stream = createLineStream(function (line) {\n          cb(null, null, line);\n        });\n        var logger = morgan(':total-time', {\n          immediate: true,\n          stream: stream\n        });\n        var server = http.createServer(function (req, res) {\n          setTimeout(function () {\n            logger(req, res, cb);\n          }, 10);\n          res.end();\n        });\n        request(server).get('/').expect(200, cb);\n      });","file":"morgan.js","skipped":false,"dir":"test"},{"name":"should get request URL","suites":["morgan()","tokens",":url"],"updatePoint":{"line":795,"column":32},"line":795,"code":"      it('should get request URL', function (done) {\n        var cb = after(2, function (err, res, line) {\n          if (err) return done(err);\n          assert.strictEqual(line, '/foo');\n          done();\n        });\n        var stream = createLineStream(function (line) {\n          cb(null, null, line);\n        });\n        request(createServer(':url', {\n          stream: stream\n        })).get('/foo').expect(200, cb);\n      });","file":"morgan.js","skipped":false,"dir":"test"},{"name":"should use req.originalUrl if exists","suites":["morgan()","tokens",":url"],"updatePoint":{"line":808,"column":46},"line":808,"code":"      it('should use req.originalUrl if exists', function (done) {\n        var cb = after(2, function (err, res, line) {\n          if (err) return done(err);\n          assert.strictEqual(line, '/bar');\n          done();\n        });\n        var stream = createLineStream(function (line) {\n          cb(null, null, line);\n        });\n        var server = createServer(':url', {\n          stream: stream\n        }, function (req, res, next) {\n          req.originalUrl = '/bar';\n          next();\n        });\n        request(server).get('/').expect(200, cb);\n      });","file":"morgan.js","skipped":false,"dir":"test"},{"name":"should not exist for aborted request","suites":["morgan()","tokens",":url"],"updatePoint":{"line":825,"column":46},"line":825,"code":"      it('should not exist for aborted request', function (done) {\n        var stream = createLineStream(function (line) {\n          assert.strictEqual(line, '-');\n          server.close(done);\n        });\n        var server = createServer(':status', {\n          stream: stream\n        }, function () {\n          test.abort();\n        });\n        var test = request(server).post('/');\n        test.write('0');\n      });","file":"morgan.js","skipped":false,"dir":"test"},{"name":"should log result of function","suites":["morgan()","formats","a function"],"updatePoint":{"line":842,"column":39},"line":842,"code":"      it('should log result of function', function (done) {\n        var cb = after(2, function (err, res, line) {\n          if (err) return done(err);\n          assert.strictEqual(line, 'GET / 200');\n          done();\n        });\n        var stream = createLineStream(function (line) {\n          cb(null, null, line);\n        });\n\n        function format(tokens, req, res) {\n          return [req.method, req.url, res.statusCode].join(' ');\n        }\n\n        request(createServer(format, {\n          stream: stream\n        })).get('/').expect(200, cb);\n      });","file":"morgan.js","skipped":false,"dir":"test"},{"name":"should not log for undefined return","suites":["morgan()","formats","a function"],"updatePoint":{"line":860,"column":45},"line":860,"code":"      it('should not log for undefined return', function (done) {\n        var stream = createLineStream(function () {\n          throw new Error('should not log line');\n        });\n\n        function format(tokens, req, res) {\n          return undefined;\n        }\n\n        request(createServer(format, {\n          stream: stream\n        })).get('/').expect(200, done);\n      });","file":"morgan.js","skipped":false,"dir":"test"},{"name":"should not log for null return","suites":["morgan()","formats","a function"],"updatePoint":{"line":873,"column":40},"line":873,"code":"      it('should not log for null return', function (done) {\n        var stream = createLineStream(function () {\n          throw new Error('should not log line');\n        });\n\n        function format(tokens, req, res) {\n          return null;\n        }\n\n        request(createServer(format, {\n          stream: stream\n        })).get('/').expect(200, done);\n      });","file":"morgan.js","skipped":false,"dir":"test"},{"name":"should accept format as format string of tokens","suites":["morgan()","formats","a string"],"updatePoint":{"line":888,"column":57},"line":888,"code":"      it('should accept format as format string of tokens', function (done) {\n        var cb = after(2, function (err, res, line) {\n          if (err) return done(err);\n          assert.strictEqual(line, 'GET /');\n          done();\n        });\n        var stream = createLineStream(function (line) {\n          cb(null, null, line);\n        });\n        request(createServer(':method :url', {\n          stream: stream\n        })).get('/').expect(200, cb);\n      });","file":"morgan.js","skipped":false,"dir":"test"},{"name":"should accept text mixed with tokens","suites":["morgan()","formats","a string"],"updatePoint":{"line":901,"column":46},"line":901,"code":"      it('should accept text mixed with tokens', function (done) {\n        var cb = after(2, function (err, res, line) {\n          if (err) return done(err);\n          assert.strictEqual(line, 'method=GET url=/');\n          done();\n        });\n        var stream = createLineStream(function (line) {\n          cb(null, null, line);\n        });\n        request(createServer('method=:method url=:url', {\n          stream: stream\n        })).get('/').expect(200, cb);\n      });","file":"morgan.js","skipped":false,"dir":"test"},{"name":"should accept special characters","suites":["morgan()","formats","a string"],"updatePoint":{"line":914,"column":42},"line":914,"code":"      it('should accept special characters', function (done) {\n        var cb = after(2, function (err, res, line) {\n          if (err) return done(err);\n          assert.strictEqual(line, 'LOCAL\\\\tobi \"GET /\" 200');\n          done();\n        });\n        var stream = createLineStream(function (line) {\n          cb(null, null, line);\n        });\n        request(createServer('LOCAL\\\\:remote-user \":method :url\" :status', {\n          stream: stream\n        })).get('/').set('Authorization', 'Basic dG9iaTpsb2tp').expect(200, cb);\n      });","file":"morgan.js","skipped":false,"dir":"test"},{"name":"should match expectations","suites":["morgan()","formats","combined"],"updatePoint":{"line":929,"column":35},"line":929,"code":"      it('should match expectations', function (done) {\n        var cb = after(2, function (err, res, line) {\n          if (err) return done(err);\n          var masked = line.replace(/\\d{2}\\/\\w{3}\\/\\d{4}:\\d{2}:\\d{2}:\\d{2} \\+0000/, '_timestamp_');\n          assert.strictEqual(masked, res.text + ' - tj [_timestamp_] \"GET / HTTP/1.1\" 200 - \"http://localhost/\" \"my-ua\"');\n          done();\n        });\n        var stream = createLineStream(function (line) {\n          cb(null, null, line);\n        });\n        request(createServer('combined', {\n          stream: stream\n        })).get('/').set('Authorization', 'Basic dGo6').set('Referer', 'http://localhost/').set('User-Agent', 'my-ua').expect(200, cb);\n      });","file":"morgan.js","skipped":false,"dir":"test"},{"name":"should match expectations","suites":["morgan()","formats","common"],"updatePoint":{"line":945,"column":35},"line":945,"code":"      it('should match expectations', function (done) {\n        var cb = after(2, function (err, res, line) {\n          if (err) return done(err);\n          var masked = line.replace(/\\d{2}\\/\\w{3}\\/\\d{4}:\\d{2}:\\d{2}:\\d{2} \\+0000/, '_timestamp_');\n          assert.strictEqual(masked, res.text + ' - tj [_timestamp_] \"GET / HTTP/1.1\" 200 -');\n          done();\n        });\n        var stream = createLineStream(function (line) {\n          cb(null, null, line);\n        });\n        request(createServer('common', {\n          stream: stream\n        })).get('/').set('Authorization', 'Basic dGo6').expect(200, cb);\n      });","file":"morgan.js","skipped":false,"dir":"test"},{"name":"should match expectations","suites":["morgan()","formats","default"],"updatePoint":{"line":961,"column":35},"line":961,"code":"      it('should match expectations', function (done) {\n        var cb = after(2, function (err, res, line) {\n          if (err) return done(err);\n          var masked = line.replace(/\\w+, \\d+ \\w+ \\d+ \\d+:\\d+:\\d+ \\w+/, '_timestamp_');\n          assert.strictEqual(masked, res.text + ' - tj [_timestamp_] \"GET / HTTP/1.1\" 200 - \"http://localhost/\" \"my-ua\"');\n          done();\n        });\n        var stream = createLineStream(function (line) {\n          cb(null, null, line);\n        });\n        request(createServer('default', {\n          stream: stream\n        })).get('/').set('Authorization', 'Basic dGo6').set('Referer', 'http://localhost/').set('User-Agent', 'my-ua').expect(200, cb);\n      });","file":"morgan.js","skipped":false,"dir":"test"},{"name":"should not color 1xx","suites":["morgan()","formats","dev"],"updatePoint":{"line":977,"column":30},"line":977,"code":"      it('should not color 1xx', function (done) {\n        var cb = after(2, function (err, res, line) {\n          if (err) return done(err);\n          assert.strictEqual(line.substr(0, 36), '_color_0_GET / _color_0_102_color_0_');\n          assert.strictEqual(line.substr(-9), '_color_0_');\n          done();\n        });\n        var stream = createColorLineStream(function onLine(line) {\n          cb(null, null, line);\n        });\n        var server = createServer('dev', {\n          stream: stream\n        }, function (req, res, next) {\n          res.statusCode = 102;\n          next();\n        });\n        request(server).get('/').expect(102, function (err, res) {\n          if (err && err.code === 'ECONNRESET') {\n            // finishing response with 1xx is invalid http\n            // but node.js server lets the server do this, so\n            // morgan needs to test in this condition even if\n            // the http client doesn't like it\n            err = null;\n          }\n\n          cb(err, res);\n        });\n      });","file":"morgan.js","skipped":false,"dir":"test"},{"name":"should color 2xx green","suites":["morgan()","formats","dev"],"updatePoint":{"line":1005,"column":32},"line":1005,"code":"      it('should color 2xx green', function (done) {\n        var cb = after(2, function (err, res, line) {\n          if (err) return done(err);\n          assert.strictEqual(line.substr(0, 37), '_color_0_GET / _color_32_200_color_0_');\n          assert.strictEqual(line.substr(-9), '_color_0_');\n          done();\n        });\n        var stream = createColorLineStream(function onLine(line) {\n          cb(null, null, line);\n        });\n        var server = createServer('dev', {\n          stream: stream\n        }, function (req, res, next) {\n          res.statusCode = 200;\n          next();\n        });\n        request(server).get('/').expect(200, cb);\n      });","file":"morgan.js","skipped":false,"dir":"test"},{"name":"should color 3xx cyan","suites":["morgan()","formats","dev"],"updatePoint":{"line":1023,"column":31},"line":1023,"code":"      it('should color 3xx cyan', function (done) {\n        var cb = after(2, function (err, res, line) {\n          if (err) return done(err);\n          assert.strictEqual(line.substr(0, 37), '_color_0_GET / _color_36_300_color_0_');\n          assert.strictEqual(line.substr(-9), '_color_0_');\n          done();\n        });\n        var stream = createColorLineStream(function onLine(line) {\n          cb(null, null, line);\n        });\n        var server = createServer('dev', {\n          stream: stream\n        }, function (req, res, next) {\n          res.statusCode = 300;\n          next();\n        });\n        request(server).get('/').expect(300, cb);\n      });","file":"morgan.js","skipped":false,"dir":"test"},{"name":"should color 4xx yelow","suites":["morgan()","formats","dev"],"updatePoint":{"line":1041,"column":32},"line":1041,"code":"      it('should color 4xx yelow', function (done) {\n        var cb = after(2, function (err, res, line) {\n          if (err) return done(err);\n          assert.strictEqual(line.substr(0, 37), '_color_0_GET / _color_33_400_color_0_');\n          assert.strictEqual(line.substr(-9), '_color_0_');\n          done();\n        });\n        var stream = createColorLineStream(function onLine(line) {\n          cb(null, null, line);\n        });\n        var server = createServer('dev', {\n          stream: stream\n        }, function (req, res, next) {\n          res.statusCode = 400;\n          next();\n        });\n        request(server).get('/').expect(400, cb);\n      });","file":"morgan.js","skipped":false,"dir":"test"},{"name":"should color 5xx red","suites":["morgan()","formats","dev"],"updatePoint":{"line":1059,"column":30},"line":1059,"code":"      it('should color 5xx red', function (done) {\n        var cb = after(2, function (err, res, line) {\n          if (err) return done(err);\n          assert.strictEqual(line.substr(0, 37), '_color_0_GET / _color_31_500_color_0_');\n          assert.strictEqual(line.substr(-9), '_color_0_');\n          done();\n        });\n        var stream = createColorLineStream(function onLine(line) {\n          cb(null, null, line);\n        });\n        var server = createServer('dev', {\n          stream: stream\n        }, function (req, res, next) {\n          res.statusCode = 500;\n          next();\n        });\n        request(server).get('/').expect(500, cb);\n      });","file":"morgan.js","skipped":false,"dir":"test"},{"name":"should not have color or response values","suites":["morgan()","formats","dev","with \"immediate: true\" option"],"updatePoint":{"line":1078,"column":52},"line":1078,"code":"        it('should not have color or response values', function (done) {\n          var cb = after(2, function (err, res, line) {\n            if (err) return done(err);\n            assert.strictEqual(line, '_color_0_GET / _color_0_-_color_0_ - ms - -_color_0_');\n            done();\n          });\n          var stream = createColorLineStream(function onLine(line) {\n            cb(null, null, line);\n          });\n          var server = createServer('dev', {\n            immediate: true,\n            stream: stream\n          });\n          request(server).get('/').expect(200, cb);\n        });","file":"morgan.js","skipped":false,"dir":"test"},{"name":"should match expectations","suites":["morgan()","formats","short"],"updatePoint":{"line":1096,"column":35},"line":1096,"code":"      it('should match expectations', function (done) {\n        var cb = after(2, function (err, res, line) {\n          if (err) return done(err);\n          var masked = line.replace(/\\d+\\.\\d{3} ms/, '_timer_');\n          assert.strictEqual(masked, res.text + ' tj GET / HTTP/1.1 200 - - _timer_');\n          done();\n        });\n        var stream = createLineStream(function (line) {\n          cb(null, null, line);\n        });\n        request(createServer('short', {\n          stream: stream\n        })).get('/').set('Authorization', 'Basic dGo6').expect(200, cb);\n      });","file":"morgan.js","skipped":false,"dir":"test"},{"name":"should match expectations","suites":["morgan()","formats","tiny"],"updatePoint":{"line":1112,"column":35},"line":1112,"code":"      it('should match expectations', function (done) {\n        var cb = after(2, function (err, res, line) {\n          if (err) return done(err);\n          var masked = line.replace(/\\d+\\.\\d{3} ms/, '_timer_');\n          assert.strictEqual(masked, 'GET / 200 - - _timer_');\n          done();\n        });\n        var stream = createLineStream(function (line) {\n          cb(null, null, line);\n        });\n        request(createServer('tiny', {\n          stream: stream\n        })).get('/').expect(200, cb);\n      });","file":"morgan.js","skipped":false,"dir":"test"},{"name":"should flush log periodically","suites":["morgan()","with buffer option"],"updatePoint":{"line":1129,"column":37},"line":1129,"code":"    it('should flush log periodically', function (done) {\n      var cb = after(2, function (err, res, log) {\n        if (err) return done(err);\n        assert.strictEqual(log, 'GET /first\\nGET /second\\n');\n        assert.ok(Date.now() - time >= 1000);\n        assert.ok(Date.now() - time <= 1100);\n        done();\n      });\n      var server = createServer(':method :url', {\n        buffer: true,\n        stream: {\n          write: writeLog\n        }\n      });\n      var time = Date.now();\n\n      function writeLog(log) {\n        cb(null, null, log);\n      }\n\n      request(server).get('/first').expect(200, function (err) {\n        if (err) return cb(err);\n        request(server).get('/second').expect(200, cb);\n      });\n    });","file":"morgan.js","skipped":false,"dir":"test"},{"name":"should accept custom interval","suites":["morgan()","with buffer option"],"updatePoint":{"line":1154,"column":37},"line":1154,"code":"    it('should accept custom interval', function (done) {\n      var cb = after(2, function (err, res, log) {\n        if (err) return done(err);\n        assert.strictEqual(log, 'GET /first\\nGET /second\\n');\n        assert.ok(Date.now() - time >= 200);\n        assert.ok(Date.now() - time <= 300);\n        done();\n      });\n      var server = createServer(':method :url', {\n        buffer: 200,\n        stream: {\n          write: writeLog\n        }\n      });\n      var time = Date.now();\n\n      function writeLog(log) {\n        cb(null, null, log);\n      }\n\n      request(server).get('/first').expect(200, function (err) {\n        if (err) return cb(err);\n        request(server).get('/second').expect(200, cb);\n      });\n    });","file":"morgan.js","skipped":false,"dir":"test"},{"name":"should not have value for :res","suites":["morgan()","with immediate option"],"updatePoint":{"line":1181,"column":38},"line":1181,"code":"    it('should not have value for :res', function (done) {\n      var cb = after(2, function (err, res, line) {\n        if (err) return done(err);\n        assert.strictEqual(line, 'GET / -');\n        done();\n      });\n      var stream = createLineStream(function (line) {\n        cb(null, null, line);\n      });\n      var server = createServer(':method :url :res[x-sent]', {\n        immediate: true,\n        stream: stream\n      });\n      request(server).get('/').expect(200, cb);\n    });","file":"morgan.js","skipped":false,"dir":"test"},{"name":"should not have value for :response-time","suites":["morgan()","with immediate option"],"updatePoint":{"line":1196,"column":48},"line":1196,"code":"    it('should not have value for :response-time', function (done) {\n      var cb = after(2, function (err, res, line) {\n        if (err) return done(err);\n        assert.strictEqual(line, 'GET / -');\n        done();\n      });\n      var stream = createLineStream(function (line) {\n        cb(null, null, line);\n      });\n      var server = createServer(':method :url :response-time', {\n        immediate: true,\n        stream: stream\n      });\n      request(server).get('/').expect(200, cb);\n    });","file":"morgan.js","skipped":false,"dir":"test"},{"name":"should not have value for :status","suites":["morgan()","with immediate option"],"updatePoint":{"line":1211,"column":41},"line":1211,"code":"    it('should not have value for :status', function (done) {\n      var cb = after(2, function (err, res, line) {\n        if (err) return done(err);\n        assert.strictEqual(line, 'GET / -');\n        done();\n      });\n      var stream = createLineStream(function (line) {\n        cb(null, null, line);\n      });\n      var server = createServer(':method :url :status', {\n        immediate: true,\n        stream: stream\n      });\n      request(server).get('/').expect(200, cb);\n    });","file":"morgan.js","skipped":false,"dir":"test"},{"name":"should log before response","suites":["morgan()","with immediate option"],"updatePoint":{"line":1226,"column":34},"line":1226,"code":"    it('should log before response', function (done) {\n      var lineLogged = false;\n      var cb = after(2, function (err, res, line) {\n        if (err) return done(err);\n        assert.strictEqual(line, 'GET / -');\n        done();\n      });\n      var stream = createLineStream(function (line) {\n        lineLogged = true;\n        cb(null, null, line);\n      });\n      var server = createServer(':method :url :res[x-sent]', {\n        immediate: true,\n        stream: stream\n      }, function (req, res, next) {\n        assert.ok(lineLogged);\n        next();\n      });\n      request(server).get('/').expect(200, cb);\n    });","file":"morgan.js","skipped":false,"dir":"test"},{"name":"should be able to skip based on request","suites":["morgan()","with skip option"],"updatePoint":{"line":1248,"column":47},"line":1248,"code":"    it('should be able to skip based on request', function (done) {\n      var stream = createLineStream(function () {\n        throw new Error('should not log line');\n      });\n\n      function skip(req) {\n        return req.url.indexOf('skip=true') !== -1;\n      }\n\n      request(createServer({\n        format: 'default',\n        skip: skip,\n        stream: stream\n      })).get('/?skip=true').set('Connection', 'close').expect(200, done);\n    });","file":"morgan.js","skipped":false,"dir":"test"},{"name":"should be able to skip based on response","suites":["morgan()","with skip option"],"updatePoint":{"line":1263,"column":48},"line":1263,"code":"    it('should be able to skip based on response', function (done) {\n      var stream = createLineStream(function () {\n        throw new Error('should not log line');\n      });\n\n      function skip(req, res) {\n        return res.statusCode === 200;\n      }\n\n      request(createServer({\n        format: 'default',\n        skip: skip,\n        stream: stream\n      })).get('/').expect(200, done);\n    });","file":"morgan.js","skipped":false,"dir":"test"},{"name":"should be required","suites":["morgan.compile(format)","arguments","format"],"updatePoint":{"line":1283,"column":28},"line":1283,"code":"      it('should be required', function () {\n        assert.throws(morgan.compile.bind(morgan), /argument format/);\n      });","file":"morgan.js","skipped":false,"dir":"test"},{"name":"should reject functions","suites":["morgan.compile(format)","arguments","format"],"updatePoint":{"line":1286,"column":33},"line":1286,"code":"      it('should reject functions', function () {\n        assert.throws(morgan.compile.bind(morgan, function () {}), /argument format/);\n      });","file":"morgan.js","skipped":false,"dir":"test"},{"name":"should reject numbers","suites":["morgan.compile(format)","arguments","format"],"updatePoint":{"line":1289,"column":31},"line":1289,"code":"      it('should reject numbers', function () {\n        assert.throws(morgan.compile.bind(morgan, 42), /argument format/);\n      });","file":"morgan.js","skipped":false,"dir":"test"},{"name":"should compile a string into a function","suites":["morgan.compile(format)","arguments","format"],"updatePoint":{"line":1292,"column":49},"line":1292,"code":"      it('should compile a string into a function', function () {\n        var fn = morgan.compile(':method');\n        assert.ok(typeof fn === 'function');\n        assert.ok(fn.length === 3);\n      });","file":"morgan.js","skipped":false,"dir":"test"}]}