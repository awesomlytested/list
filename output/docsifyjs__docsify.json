{"repo":"docsifyjs/docsify","url":"https://github.com/docsifyjs/docsify","branch":"develop","configs":[{"package":"docsify","lang":"js","dir":"test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"dom manipulation","suites":["Example Tests"],"updatePoint":{"line":10,"column":24},"line":10,"code":"  test('dom manipulation', async () => {\n    const testText = 'This is a test';\n    const testHTML = `<h1>Test</h1><p>${testText}</p>`; // Inject HTML\n    // https://playwright.dev/#path=docs%2Fapi.md&q=pagesetcontenthtml-options\n\n    await page.setContent(testHTML); // Add class to <body> element and test\n    // https://playwright.dev/#path=docs%2Fapi.md&q=pageevalselector-pagefunction-arg\n\n    await page.$eval('body', elm => elm.classList.add('foo'));\n    expect(await page.getAttribute('body', 'class')).toEqual('foo'); // Test using helper methods from expect-playright (via jest-playwright)\n    // https://github.com/playwright-community/expect-playwright\n    // https://playwright.tech/blog/using-jest-with-playwright\n\n    await expect(page).toHaveText('body', 'Test');\n    await expect(page).toHaveSelector('p');\n    await expect(page).toEqualText('p', testText);\n    await expect(page).not.toHaveSelector('table', {\n      timeout: 1\n    }); // Test using standard jest + playwrite methods\n    // https://playwright.dev/#path=docs%2Fapi.md&q=pagetextcontentselector-options\n\n    expect(await page.textContent('body')).toMatch(/Test/);\n    await page.waitForSelector('p');\n    expect(await page.textContent('p')).toEqual(testText);\n    await page.waitForSelector('table', {\n      state: 'detached'\n    }); // Debug mode\n    // https://github.com/playwright-community/jest-playwright#put-in-debug-mode\n    // await jestPlaywright.debug();\n  });","file":"e2e/example.test.js","skipped":false,"dir":"test"},{"name":"javascript in browser context","suites":["Example Tests"],"updatePoint":{"line":40,"column":37},"line":40,"code":"  test('javascript in browser context', async () => {\n    // Get native DOM values\n    // https://playwright.dev/#path=docs%2Fapi.md&q=pageevaluatepagefunction-arg\n    const clientDimensions = await page.evaluate(() => {\n      return {\n        width: document.documentElement.clientWidth,\n        height: document.documentElement.clientHeight\n      };\n    });\n    expect(clientDimensions).toHaveProperty('width');\n    expect(typeof clientDimensions.width).toBe('number');\n    expect(clientDimensions).toHaveProperty('height');\n    expect(typeof clientDimensions.height).toBe('number'); // Get result of script executed in browser context\n    // https://playwright.dev/#path=docs%2Fapi.md&q=pageevaluatepagefunction-arg\n\n    const scriptResult = await page.evaluate(numbers => {\n      const result = numbers.reduce((accumulator, currentValue) => accumulator + currentValue);\n      return Promise.resolve(result);\n    }, [1, 2, 3]);\n    expect(scriptResult).toBe(6); // Get result of local function executed in browser context\n    // https://playwright.dev/#path=docs%2Fapi.md&q=pageevaluatepagefunction-arg\n\n    function add(...addends) {\n      return addends.reduce((accumulator, currentValue) => accumulator + currentValue);\n    }\n\n    const functionResult = await page.evaluate(`\n      ${add.toString()}\n\n      const result = add(1, 2, 3);\n\n      Promise.resolve(result);\n    `);\n    expect(functionResult).toBe(6);\n  });","file":"e2e/example.test.js","skipped":false,"dir":"test"},{"name":"manual docsify site using playwright methods","suites":["Example Tests"],"updatePoint":{"line":75,"column":52},"line":75,"code":"  test('manual docsify site using playwright methods', async () => {\n    // Goto URL\n    // https://playwright.dev/#path=docs%2Fapi.md&q=pagegotourl-options\n    await page.goto(`${TEST_HOST}/_blank.html`); // Set docsify configuration\n    // https://playwright.dev/#path=docs%2Fapi.md&q=pageevaluatepagefunction-arg\n\n    await page.evaluate(() => {\n      window.$docsify = {\n        el: '#app',\n        basePath: '/docs/',\n        themeColor: 'red'\n      };\n    }); // Add docsify target element\n    // https://playwright.dev/#path=docs%2Fapi.md&q=pageevalselector-pagefunction-arg\n\n    await page.$eval('body', elm => {\n      elm.innerHTML = '<div id=\"app\"></div>';\n    }); // Inject docsify theme (vue.css)\n    // https://playwright.dev/#path=docs%2Fapi.md&q=pageaddstyletagoptions\n\n    await page.addStyleTag({\n      url: '/lib/themes/vue.css'\n    }); // Inject docsify.js\n    // https://playwright.dev/#path=docs%2Fapi.md&q=pageaddscripttagoptions\n\n    await page.addScriptTag({\n      url: '/lib/docsify.js'\n    }); // Wait for docsify to initialize\n    // https://playwright.dev/#path=docs%2Fapi.md&q=pagewaitforselectorselector-options\n\n    await page.waitForSelector('#main'); // Create handle for JavaScript object in browser\n    // https://playwright.dev/#path=docs%2Fapi.md&q=pageevaluatepagefunction-arg\n\n    const $docsify = await page.evaluate(() => window.$docsify); // Test object property and value\n\n    expect($docsify).toHaveProperty('themeColor', 'red');\n  });","file":"e2e/example.test.js","skipped":false,"dir":"test"},{"name":"Docsify /docs/ site using docsifyInit()","suites":["Example Tests"],"updatePoint":{"line":112,"column":47},"line":112,"code":"  test('Docsify /docs/ site using docsifyInit()', async () => {\n    // Load custom docsify\n    // (See ./helpers/docsifyInit.js for details)\n    await docsifyInit({\n      config: {\n        basePath: '/docs/'\n      } // _debug: true,\n      // _logHTML: true,\n\n    }); // Create handle for JavaScript object in browser\n    // https://playwright.dev/#path=docs%2Fapi.md&q=pageevaluatepagefunction-arg\n\n    const $docsify = await page.evaluate(() => window.$docsify); // Verify config options\n\n    expect(typeof $docsify).toEqual('object'); // Verify docsifyInitConfig.markdown content was rendered\n\n    await expect(page).toHaveText('#main', 'A magical documentation site generator');\n  });","file":"e2e/example.test.js","skipped":false,"dir":"test"},{"name":"custom docsify site using docsifyInit()","suites":["Example Tests"],"updatePoint":{"line":130,"column":47},"line":130,"code":"  test('custom docsify site using docsifyInit()', async () => {\n    const docsifyInitConfig = {\n      config: {\n        name: 'Docsify Name',\n        themeColor: 'red'\n      },\n      markdown: {\n        coverpage: `\n          # Docsify Test\n\n          > Testing a magical documentation site generator\n\n          [GitHub](https://github.com/docsifyjs/docsify/)\n        `,\n        homepage: `\n          # Hello World\n\n          This is the homepage.\n        `,\n        navbar: `\n          - [docsify.js.org](https://docsify.js.org/#/)\n        `,\n        sidebar: `\n          - [Test Page](test)\n        `\n      },\n      routes: {\n        'test.md': `\n          # Test Page\n\n          This is a custom route.\n        `,\n        'data-test-scripturls.js': `\n          document.body.setAttribute('data-test-scripturls', 'pass');\n        `\n      },\n      script: `\n        document.body.setAttribute('data-test-script', 'pass');\n      `,\n      scriptURLs: [// docsifyInit() route\n      'data-test-scripturls.js', // Server route\n      '/lib/plugins/search.min.js'],\n      style: `\n        body {\n          background: red !important;\n        }\n      `,\n      styleURLs: ['/lib/themes/vue.css']\n    };\n    await docsifyInit({ ...docsifyInitConfig // _debug: true,\n      // _logHTML: true,\n\n    });\n    const $docsify = await page.evaluate(() => window.$docsify); // Verify config options\n\n    expect(typeof $docsify).toEqual('object');\n    expect($docsify).toHaveProperty('themeColor', 'red');\n    await expect(page).toHaveText('.app-name', 'Docsify Name'); // Verify docsifyInitConfig.markdown content was rendered\n\n    await expect(page).toHaveText('section.cover', 'Docsify Test'); // Coverpage\n\n    await expect(page).toHaveText('nav.app-nav', 'docsify.js.org'); // Navbar\n\n    await expect(page).toHaveText('aside.sidebar', 'Test Page'); // Sidebar\n\n    await expect(page).toHaveText('#main', 'This is the homepage'); // Homepage\n    // Verify docsifyInitConfig.scriptURLs were added to the DOM\n\n    for (const scriptURL of docsifyInitConfig.scriptURLs) {\n      await expect(page).toHaveSelector(`script[src$=\"${scriptURL}\"]`, {\n        state: 'attached'\n      });\n    } // Verify docsifyInitConfig.scriptURLs were executed\n\n\n    await expect(page).toHaveSelector('body[data-test-scripturls]');\n    await expect(page).toHaveSelector('.search input[type=\"search\"]'); // Verify docsifyInitConfig.script was added to the DOM\n\n    expect(await page.evaluate(scriptText => {\n      return [...document.querySelectorAll('script')].some(elm => elm.textContent.replace(/\\s+/g, '') === scriptText);\n    }, docsifyInitConfig.script.replace(/\\s+/g, ''))).toBe(true); // Verify docsifyInitConfig.script was executed\n\n    await expect(page).toHaveSelector('body[data-test-script]'); // Verify docsifyInitConfig.styleURLs were added to the DOM\n\n    for (const styleURL of docsifyInitConfig.styleURLs) {\n      await expect(page).toHaveSelector(`link[rel*=\"stylesheet\"][href$=\"${styleURL}\"]`, {\n        state: 'attached'\n      });\n    } // Verify docsifyInitConfig.style was added to the DOM\n\n\n    expect(await page.evaluate(styleText => {\n      return [...document.querySelectorAll('style')].some(elm => elm.textContent.replace(/\\s+/g, '') === styleText);\n    }, docsifyInitConfig.style.replace(/\\s+/g, ''))).toBe(true); // Verify docsify navigation and docsifyInitConfig.routes\n\n    await page.click('a[href=\"#/test\"]');\n    expect(page.url()).toMatch(/\\/test$/);\n    await expect(page).toHaveText('#main', 'This is a custom route');\n  });","file":"e2e/example.test.js","skipped":false,"dir":"test"},{"name":"image snapshots","suites":["Example Tests"],"updatePoint":{"line":229,"column":23},"line":229,"code":"  test('image snapshots', async () => {\n    await docsifyInit({\n      config: {\n        name: 'Docsify Test'\n      },\n      markdown: {\n        homepage: `\n          # The Cosmos Awaits\n\n          [Carl Sagan](https://en.wikipedia.org/wiki/Carl_Sagan)\n\n          Cosmic ocean take root and flourish decipherment hundreds of thousands\n          dream of the mind's eye courage of our questions. At the edge of forever\n          network of wormholes ship of the imagination two ghostly white figures\n          in coveralls and helmets are softly dancing are creatures of the cosmos\n          the only home we've ever known? How far away emerged into consciousness\n          bits of moving fluff gathered by gravity with pretty stories for which\n          there's little good evidence vanquish the impossible.\n\n          The ash of stellar alchemy permanence of the stars shores of the cosmic\n          ocean billions upon billions Drake Equation finite but unbounded.\n          Hundreds of thousands cosmic ocean hearts of the stars Hypatia invent\n          the universe hearts of the stars? Realm of the galaxies muse about dream\n          of the mind's eye hundreds of thousands the only home we've ever known\n          how far away. Extraordinary claims require extraordinary evidence\n          citizens of distant epochs invent the universe as a patch of light the\n          carbon in our apple pies gathered by gravity.\n\n          Billions upon billions gathered by gravity white dwarf intelligent\n          beings vanquish the impossible descended from astronomers. A still more\n          glorious dawn awaits cosmic ocean star stuff harvesting star light the\n          sky calls to us kindling the energy hidden in matter rich in heavy\n          atoms. A mote of dust suspended in a sunbeam across the centuries the\n          only home we've ever known bits of moving fluff a very small stage in a\n          vast cosmic arena courage of our questions.\n\n          Euclid the only home we've ever known realm of the galaxies trillion\n          radio telescope Apollonius of Perga. The carbon in our apple pies invent\n          the universe muse about stirred by starlight great turbulent clouds\n          emerged into consciousness? Invent the universe vastness is bearable\n          only through love a still more glorious dawn awaits descended from\n          astronomers as a patch of light the sky calls to us. Great turbulent\n          clouds citizens of distant epochs invent the universe two ghostly white\n          figures in coveralls and helmets are softly dancing courage of our\n          questions rich in heavy atoms and billions upon billions upon billions\n          upon billions upon billions upon billions upon billions.\n        `\n      },\n      styleURLs: [`/lib/themes/vue.css`] // _debug: true,\n      // _logHTML: true,\n\n    }); // Viewport screenshot\n\n    const screenshot1 = await page.screenshot();\n    expect(screenshot1).toMatchImageSnapshot(); // Full page screenshot\n\n    const screenshot2 = await page.screenshot({\n      fullPage: true\n    });\n    expect(screenshot2).toMatchImageSnapshot(); // Element screenshot\n\n    const elmHandle = await page.$('h1');\n    const screenshot3 = await elmHandle.screenshot();\n    expect(screenshot3).toMatchImageSnapshot();\n  });","file":"e2e/example.test.js","skipped":false,"dir":"test"},{"name":"should serve from index file","suites":["Index file hosting"],"updatePoint":{"line":10,"column":36},"line":10,"code":"  test('should serve from index file', async () => {\n    await docsifyInit(sharedOptions);\n    await expect(page).toHaveText('#main', 'A magical documentation site generator');\n    expect(page.url()).toMatch(/index\\.html#\\/$/);\n  });","file":"e2e/index-file.test.js","skipped":false,"dir":"test"},{"name":"should use index file links in sidebar from index file hosting","suites":["Index file hosting"],"updatePoint":{"line":15,"column":70},"line":15,"code":"  test('should use index file links in sidebar from index file hosting', async () => {\n    await docsifyInit(sharedOptions);\n    await page.click('a[href=\"#/quickstart\"]');\n    await expect(page).toHaveText('#main', 'Quick start');\n    expect(page.url()).toMatch(/index\\.html#\\/quickstart$/);\n  });","file":"e2e/index-file.test.js","skipped":false,"dir":"test"},{"name":"search readme","suites":["Search Plugin Tests"],"updatePoint":{"line":8,"column":21},"line":8,"code":"  test('search readme', async () => {\n    const docsifyInitConfig = {\n      markdown: {\n        homepage: `\n          # Hello World\n\n          This is the homepage.\n        `,\n        sidebar: `\n          - [Test Page](test)\n        `\n      },\n      routes: {\n        '/test.md': `\n          # Test Page\n\n          This is a custom route.\n        `\n      },\n      scriptURLs: ['/lib/plugins/search.min.js']\n    };\n    await docsifyInit(docsifyInitConfig);\n    await page.fill('input[type=search]', 'hello');\n    await expect(page).toEqualText('.results-panel h2', 'Hello World');\n    await page.click('.clear-button');\n    await page.fill('input[type=search]', 'test');\n    await expect(page).toEqualText('.results-panel h2', 'Test Page');\n  });","file":"e2e/search.test.js","skipped":false,"dir":"test"},{"name":"search ignore title","suites":["Search Plugin Tests"],"updatePoint":{"line":36,"column":27},"line":36,"code":"  test('search ignore title', async () => {\n    const docsifyInitConfig = {\n      markdown: {\n        homepage: `\n          # Hello World\n\n          This is the homepage.\n        `,\n        sidebar: `\n          - [Home page](/)\n          - [GitHub Pages](github)\n        `\n      },\n      routes: {\n        '/github.md': `\n            # GitHub Pages\n\n            This is the GitHub Pages.\n\n            ## GitHub Pages ignore1 <!-- {docsify-ignore} -->\n\n            There're three places to populate your docs for your Github repository1.\n\n            ## GitHub Pages ignore2 {docsify-ignore}\n\n            There're three places to populate your docs for your Github repository2.\n          `\n      },\n      scriptURLs: ['/lib/plugins/search.min.js']\n    };\n    await docsifyInit(docsifyInitConfig);\n    await page.fill('input[type=search]', 'repository1');\n    await expect(page).toEqualText('.results-panel h2', 'GitHub Pages ignore1');\n    await page.click('.clear-button');\n    await page.fill('input[type=search]', 'repository2');\n    await expect(page).toEqualText('.results-panel h2', 'GitHub Pages ignore2');\n  });","file":"e2e/search.test.js","skipped":false,"dir":"test"},{"name":"search only one homepage","suites":["Search Plugin Tests"],"updatePoint":{"line":73,"column":32},"line":73,"code":"  test('search only one homepage', async () => {\n    const docsifyInitConfig = {\n      markdown: {\n        sidebar: `\n          - [README](README)\n          - [Test Page](test)\n        `\n      },\n      routes: {\n        '/README.md': `\n          # Hello World\n\n          This is the homepage.\n        `,\n        '/test.md': `\n          # Test Page\n\n          This is a custom route.\n        `\n      },\n      scriptURLs: ['/lib/plugins/search.js']\n    };\n    await docsifyInit(docsifyInitConfig);\n    await page.fill('input[type=search]', 'hello');\n    await expect(page).toHaveSelector('.matching-post');\n    expect(await page.$$eval('.matching-post', elms => elms.length)).toBe(1);\n    await expect(page).toEqualText('.results-panel h2', 'Hello World');\n    await page.click('.clear-button');\n    await page.fill('input[type=search]', 'test');\n    await expect(page).toEqualText('.results-panel h2', 'Test Page');\n  });","file":"e2e/search.test.js","skipped":false,"dir":"test"},{"name":"search ignore diacritical marks","suites":["Search Plugin Tests"],"updatePoint":{"line":104,"column":39},"line":104,"code":"  test('search ignore diacritical marks', async () => {\n    const docsifyInitConfig = {\n      markdown: {\n        homepage: `\n          # Qué es\n\n          docsify genera su sitio web de documentación sobre la marcha. A diferencia de GitBook, no genera archivos estáticos html. En cambio, carga y analiza de forma inteligente sus archivos de Markdown y los muestra como sitio web. Todo lo que necesita hacer es crear un index.html para comenzar y desplegarlo en GitHub Pages.\n        `\n      },\n      scriptURLs: ['/lib/plugins/search.min.js']\n    };\n    await docsifyInit(docsifyInitConfig);\n    await page.fill('input[type=search]', 'documentacion');\n    await expect(page).toEqualText('.results-panel h2', 'Que es');\n    await page.click('.clear-button');\n    await page.fill('input[type=search]', 'estáticos');\n    await expect(page).toEqualText('.results-panel h2', 'Que es');\n  });","file":"e2e/search.test.js","skipped":false,"dir":"test"},{"name":"search when there is no title","suites":["Search Plugin Tests"],"updatePoint":{"line":122,"column":37},"line":122,"code":"  test('search when there is no title', async () => {\n    const docsifyInitConfig = {\n      markdown: {\n        homepage: `\n          This is some description. We assume autoHeader added the # Title. A long paragraph.\n        `,\n        sidebar: `\n          - [Changelog](changelog)\n        `\n      },\n      routes: {\n        '/changelog.md': `\n          feat: Support search when there is no title\n\n          ## Changelog Title\n\n          hello, this is a changelog\n        `\n      },\n      scriptURLs: ['/lib/plugins/search.min.js']\n    };\n    await docsifyInit(docsifyInitConfig);\n    await page.fill('input[type=search]', 'paragraph');\n    await expect(page).toEqualText('.results-panel h2', 'Home Page');\n    await page.click('.clear-button');\n    await page.fill('input[type=search]', 'Support');\n    await expect(page).toEqualText('.results-panel h2', 'changelog');\n    await page.click('.clear-button');\n    await page.fill('input[type=search]', 'hello');\n    await expect(page).toEqualText('.results-panel h2', 'Changelog Title');\n  });","file":"e2e/search.test.js","skipped":false,"dir":"test"},{"name":"should not load remote content from hash ()","suites":["Security","Cross Site Scripting (XSS)"],"updatePoint":{"line":17,"column":62},"line":17,"code":"      test(`should not load remote content from hash (${hash})`, async () => {\n        await docsifyInit(sharedOptions);\n        await expect(page).toHaveText('#main', 'Hello World');\n        await page.evaluate(() => location.hash = '#/test');\n        await expect(page).toHaveText('#main', 'Test Page');\n        await page.evaluate(newHash => {\n          location.hash = newHash;\n        }, hash);\n        await expect(page).toHaveText('#main', 'Hello World');\n        expect(page.url()).toMatch(/#\\/$/);\n      });","file":"e2e/security.test.js","skipped":false,"dir":"test"},{"name":"Active Test","suites":["Sidebar Tests"],"updatePoint":{"line":8,"column":19},"line":8,"code":"  test('Active Test', async () => {\n    const docsifyInitConfig = {\n      markdown: {\n        sidebar: `\n          - [Test Space](test%20space)\n          - [Test _](test_foo)\n          - [Test -](test-foo)\n          - [Test .](test.foo)\n          - [Test >](test>foo)\n          - [Test](test)\n        `\n      },\n      routes: {\n        '/test space.md': `\n          # Test Space\n        `,\n        '/test_foo.md': `\n          # Test _\n        `,\n        '/test-foo.md': `\n          # Test -\n        `,\n        '/test.foo.md': `\n          # Test .\n        `,\n        '/test>foo.md': `\n          # Test >\n        `,\n        '/test.md': `\n          # Test page\n        `\n      }\n    };\n    await docsifyInit(docsifyInitConfig);\n    await page.click('a[href=\"#/test%20space\"]');\n    await expect(page).toEqualText('.sidebar-nav li[class=active]', 'Test Space');\n    expect(page.url()).toMatch(/\\/test%20space$/);\n    await page.click('a[href=\"#/test_foo\"]');\n    await expect(page).toEqualText('.sidebar-nav li[class=active]', 'Test _');\n    expect(page.url()).toMatch(/\\/test_foo$/);\n    await page.click('a[href=\"#/test-foo\"]');\n    await expect(page).toEqualText('.sidebar-nav li[class=active]', 'Test -');\n    expect(page.url()).toMatch(/\\/test-foo$/);\n    await page.click('a[href=\"#/test.foo\"]');\n    expect(page.url()).toMatch(/\\/test.foo$/);\n    await expect(page).toEqualText('.sidebar-nav li[class=active]', 'Test .');\n    await page.click('a[href=\"#/test>foo\"]');\n    await expect(page).toEqualText('.sidebar-nav li[class=active]', 'Test >');\n    expect(page.url()).toMatch(/\\/test%3Efoo$/);\n    await page.click('a[href=\"#/test\"]');\n    await expect(page).toEqualText('.sidebar-nav li[class=active]', 'Test');\n    expect(page.url()).toMatch(/\\/test$/);\n  });","file":"e2e/sidebar.test.js","skipped":false,"dir":"test"},{"name":"renders content when executeScript is ","suites":["Vue.js Compatibility","Vue v"],"updatePoint":{"line":97,"column":68},"line":97,"code":"        test(`renders content when executeScript is ${executeScript}`, async () => {\n          const docsifyInitConfig = getSharedConfig();\n          docsifyInitConfig.config.executeScript = executeScript;\n          docsifyInitConfig.scriptURLs = vueURL;\n          await docsifyInit(docsifyInitConfig); // Static\n\n          await expect(page).toEqualText('#vuefor', '12345');\n          await expect(page).toEqualText('#vuecomponent', '0');\n          await expect(page).toEqualText('#vueglobaloptions p', 'vueglobaloptions');\n          await expect(page).toEqualText('#vueglobaloptions span', '0');\n          await expect(page).toEqualText('#vuemounts p', 'vuemounts');\n          await expect(page).toEqualText('#vuemounts span', '0');\n          await expect(page).toEqualText('#vuescript p', 'vuescript');\n          await expect(page).toEqualText('#vuescript span', '0'); // Reactive\n\n          await page.click('#vuecomponent');\n          await expect(page).toEqualText('#vuecomponent', '1');\n          await page.click('#vueglobaloptions button');\n          await expect(page).toEqualText('#vueglobaloptions span', '1');\n          await page.click('#vuemounts button');\n          await expect(page).toEqualText('#vuemounts span', '1');\n          await page.click('#vuescript button');\n          await expect(page).toEqualText('#vuescript span', '1');\n        });","file":"e2e/vue.test.js","skipped":false,"dir":"test"},{"name":"ignores content when Vue is not present","suites":["Vue.js Compatibility","Vue v"],"updatePoint":{"line":123,"column":51},"line":123,"code":"      test(`ignores content when Vue is not present`, async () => {\n        const docsifyInitConfig = getSharedConfig();\n        await docsifyInit(docsifyInitConfig);\n        await page.evaluate(() => {\n          return 'Vue' in window === false;\n        });\n        await expect(page).toEqualText('#vuefor', '{{ i }}');\n        await expect(page).toEqualText('#vuecomponent', '---');\n        await expect(page).toEqualText('#vueglobaloptions p', '---');\n        await expect(page).toEqualText('#vuemounts p', '---');\n        await expect(page).toEqualText('#vuescript p', '---');\n      });","file":"e2e/vue.test.js","skipped":false,"dir":"test"},{"name":"ignores content when vueComponents, vueMounts, and vueGlobalOptions are undefined","suites":["Vue.js Compatibility","Vue v"],"updatePoint":{"line":135,"column":93},"line":135,"code":"      test(`ignores content when vueComponents, vueMounts, and vueGlobalOptions are undefined`, async () => {\n        const docsifyInitConfig = getSharedConfig();\n        docsifyInitConfig.config.vueComponents = undefined;\n        docsifyInitConfig.config.vueGlobalOptions = undefined;\n        docsifyInitConfig.config.vueMounts = undefined;\n        docsifyInitConfig.scriptURLs = vueURL;\n        await docsifyInit(docsifyInitConfig);\n        await expect(page).toEqualText('#vuefor', '{{ i }}');\n        await expect(page).toEqualText('#vuecomponent', '---');\n        await expect(page).toEqualText('#vueglobaloptions p', '---');\n        await expect(page).toEqualText('#vuemounts p', '---');\n        await expect(page).toEqualText('#vuescript p', 'vuescript');\n      });","file":"e2e/vue.test.js","skipped":false,"dir":"test"},{"name":"ignores content when vueGlobalOptions is undefined","suites":["Vue.js Compatibility","Vue v"],"updatePoint":{"line":148,"column":62},"line":148,"code":"      test(`ignores content when vueGlobalOptions is undefined`, async () => {\n        const docsifyInitConfig = getSharedConfig();\n        docsifyInitConfig.config.vueGlobalOptions = undefined;\n        docsifyInitConfig.scriptURLs = vueURL;\n        await docsifyInit(docsifyInitConfig);\n        await expect(page).toEqualText('#vuefor', '12345');\n        await expect(page).toEqualText('#vuecomponent', '0');\n        expect(await page.innerText('#vueglobaloptions p')).toBe('');\n        await expect(page).toEqualText('#vuemounts p', 'vuemounts');\n        await expect(page).toEqualText('#vuescript p', 'vuescript');\n      });","file":"e2e/vue.test.js","skipped":false,"dir":"test"},{"name":"ignores content when vueMounts is undefined","suites":["Vue.js Compatibility","Vue v"],"updatePoint":{"line":159,"column":55},"line":159,"code":"      test(`ignores content when vueMounts is undefined`, async () => {\n        const docsifyInitConfig = getSharedConfig();\n        docsifyInitConfig.config.vueMounts['#vuemounts'] = undefined;\n        docsifyInitConfig.scriptURLs = vueURL;\n        await docsifyInit(docsifyInitConfig);\n        await expect(page).toEqualText('#vuefor', '12345');\n        await expect(page).toEqualText('#vuecomponent', '0');\n        await expect(page).toEqualText('#vueglobaloptions p', 'vueglobaloptions');\n        await expect(page).toEqualText('#vuemounts p', 'vueglobaloptions');\n        await expect(page).toEqualText('#vuescript p', 'vuescript');\n      });","file":"e2e/vue.test.js","skipped":false,"dir":"test"},{"name":"ignores <script> when executeScript is false","suites":["Vue.js Compatibility","Vue v"],"updatePoint":{"line":170,"column":56},"line":170,"code":"      test(`ignores <script> when executeScript is false`, async () => {\n        const docsifyInitConfig = getSharedConfig();\n        docsifyInitConfig.config.executeScript = false;\n        docsifyInitConfig.scriptURLs = vueURL;\n        await docsifyInit(docsifyInitConfig);\n        await expect(page).toEqualText('#vuescript p', 'vueglobaloptions');\n      });","file":"e2e/vue.test.js","skipped":false,"dir":"test"},{"name":"coverpage renders and is unchanged","suites":["Docs Site"],"updatePoint":{"line":8,"column":42},"line":8,"code":"  test('coverpage renders and is unchanged', async () => {\n    // Override Math.random implementation to prevent random gradient values\n    // used as background image from causing test to fail\n    const mathSpy = jest.spyOn(Math, 'random').mockReturnValue(0.5);\n    await docsifyInit({\n      config: {\n        coverpage: 'docs/_coverpage.md'\n      },\n      markdown: {\n        homepage: '# Hello World'\n      },\n      waitForSelector: '.cover-main > *'\n    });\n    const coverpageElm = document.querySelector('section.cover'); // Test snapshots\n\n    expect(mathSpy).toHaveBeenCalled();\n    expect(coverpageElm).not.toBeNull();\n    expect(coverpageElm.outerHTML).toMatchSnapshot();\n  });","file":"integration/docs.test.js","skipped":false,"dir":"test"},{"name":"sidebar renders and is unchanged","suites":["Docs Site"],"updatePoint":{"line":27,"column":40},"line":27,"code":"  test('sidebar renders and is unchanged', async () => {\n    await docsifyInit({\n      config: {\n        loadSidebar: 'docs/_sidebar.md'\n      },\n      markdown: {\n        homepage: '# Hello World'\n      },\n      waitForSelector: '.sidebar-nav > ul'\n    });\n    const sidebarElm = document.querySelector('.sidebar'); // Test snapshots\n\n    expect(sidebarElm).not.toBeNull();\n    expect(sidebarElm.outerHTML).toMatchSnapshot();\n  });","file":"integration/docs.test.js","skipped":false,"dir":"test"},{"name":"navbar renders and is unchanged","suites":["Docs Site"],"updatePoint":{"line":42,"column":39},"line":42,"code":"  test('navbar renders and is unchanged', async () => {\n    await docsifyInit({\n      config: {\n        loadNavbar: 'docs/_navbar.md'\n      },\n      markdown: {\n        homepage: '# Hello World'\n      },\n      waitForSelector: '.app-nav > ul'\n    });\n    const navbarElm = document.querySelector('nav.app-nav'); // Test snapshots\n\n    expect(navbarElm).not.toBeNull();\n    expect(navbarElm.outerHTML).toMatchSnapshot();\n  });","file":"integration/docs.test.js","skipped":false,"dir":"test"},{"name":"allows $docsify configuration to be a function","suites":["Docsify"],"updatePoint":{"line":8,"column":54},"line":8,"code":"  test('allows $docsify configuration to be a function', async () => {\n    const testConfig = jest.fn(vm => {\n      expect(vm).toBeInstanceOf(Object);\n      expect(vm.constructor.name).toEqual('Docsify');\n      expect(vm.$fetch).toBeInstanceOf(Function);\n      expect(vm.$resetEvents).toBeInstanceOf(Function);\n      expect(vm.route).toBeInstanceOf(Object);\n    });\n    await docsifyInit({\n      config: testConfig\n    });\n    expect(typeof Docsify).toEqual('object');\n    expect(testConfig).toHaveBeenCalled();\n  });","file":"integration/docsify.test.js","skipped":false,"dir":"test"},{"name":"provides the hooks and vm API to plugins","suites":["Docsify"],"updatePoint":{"line":22,"column":48},"line":22,"code":"  test('provides the hooks and vm API to plugins', async () => {\n    const testConfig = jest.fn(vm => {\n      const vm1 = vm;\n      return {\n        plugins: [function (hook, vm2) {\n          expect(vm1).toEqual(vm2);\n          expect(hook.init).toBeInstanceOf(Function);\n          expect(hook.beforeEach).toBeInstanceOf(Function);\n          expect(hook.afterEach).toBeInstanceOf(Function);\n          expect(hook.doneEach).toBeInstanceOf(Function);\n          expect(hook.mounted).toBeInstanceOf(Function);\n          expect(hook.ready).toBeInstanceOf(Function);\n        }]\n      };\n    });\n    await docsifyInit({\n      config: testConfig\n    });\n    expect(typeof Docsify).toEqual('object');\n    expect(testConfig).toHaveBeenCalled();\n  });","file":"integration/docsify.test.js","skipped":false,"dir":"test"},{"name":"Docsify /docs/ site using docsifyInit()","suites":["Example Tests"],"updatePoint":{"line":10,"column":47},"line":10,"code":"  test('Docsify /docs/ site using docsifyInit()', async () => {\n    await docsifyInit({\n      config: {\n        basePath: '/docs/'\n      } // _logHTML: true,\n\n    }); // Verify config options\n\n    expect(typeof window.$docsify).toEqual('object'); // Verify options.markdown content was rendered\n\n    expect(document.querySelector('#main').textContent).toContain('A magical documentation site generator');\n  });","file":"integration/example.test.js","skipped":false,"dir":"test"},{"name":"kitchen sink docsify site using docsifyInit()","suites":["Example Tests"],"updatePoint":{"line":22,"column":53},"line":22,"code":"  test('kitchen sink docsify site using docsifyInit()', async () => {\n    const docsifyInitConfig = {\n      config: {\n        name: 'Docsify Name',\n        themeColor: 'red'\n      },\n      markdown: {\n        coverpage: `\n          # Docsify Test\n\n          > Testing a magical documentation site generator\n\n          [GitHub](https://github.com/docsifyjs/docsify/)\n        `,\n        homepage: `\n          # Hello World\n\n          This is the homepage.\n        `,\n        navbar: `\n          - [docsify.js.org](https://docsify.js.org/#/)\n        `,\n        sidebar: `\n          - [Test Page](test)\n        `\n      },\n      routes: {\n        'test.md': `\n          # Test Page\n\n          This is a custom route.\n        `,\n        'data-test-scripturls.js': `\n          document.body.setAttribute('data-test-scripturls', 'pass');\n        `\n      },\n      script: `\n        document.body.setAttribute('data-test-script', 'pass');\n      `,\n      scriptURLs: [// docsifyInit() route\n      'data-test-scripturls.js', // Server route\n      '/lib/plugins/search.min.js'],\n      style: `\n        body {\n          background: red !important;\n        }\n      `,\n      styleURLs: ['/lib/themes/vue.css']\n    };\n    await docsifyInit({ ...docsifyInitConfig // _logHTML: true,\n\n    }); // Verify config options\n\n    expect(typeof window.$docsify).toEqual('object');\n    expect(window.$docsify).toHaveProperty('themeColor', 'red');\n    expect(document.querySelector('.app-name').textContent).toContain('Docsify Name'); // Verify docsifyInitConfig.markdown content was rendered\n\n    Object.entries({\n      'section.cover': 'Docsify Test',\n      // Coverpage\n      'nav.app-nav': 'docsify.js.org',\n      // Navbar\n      'aside.sidebar': 'Test Page',\n      // Sidebar\n      '#main': 'This is the homepage' // Homepage\n\n    }).forEach(([selector, content]) => {\n      expect(document.querySelector(selector).textContent).toContain(content);\n    }); // Verify docsifyInitConfig.scriptURLs were added to the DOM\n\n    for (const scriptURL of docsifyInitConfig.scriptURLs) {\n      const matchElm = document.querySelector(`script[data-src$=\"${scriptURL}\"]`);\n      expect(matchElm).toBeTruthy();\n    } // Verify docsifyInitConfig.scriptURLs were executed\n\n\n    expect(document.body.hasAttribute('data-test-scripturls')).toBe(true);\n    expect(document.querySelector('.search input[type=\"search\"]')).toBeTruthy(); // Verify docsifyInitConfig.script was added to the DOM\n\n    expect([...document.querySelectorAll('script')].some(elm => elm.textContent.replace(/\\s+/g, '') === docsifyInitConfig.script.replace(/\\s+/g, ''))).toBe(true); // Verify docsifyInitConfig.script was executed\n\n    expect(document.body.hasAttribute('data-test-script')).toBe(true); // Verify docsifyInitConfig.styleURLs were added to the DOM\n\n    for (const styleURL of docsifyInitConfig.styleURLs) {\n      const matchElm = document.querySelector(`link[rel*=\"stylesheet\"][href$=\"${styleURL}\"]`);\n      expect(matchElm).toBeTruthy();\n    } // Verify docsifyInitConfig.style was added to the DOM\n\n\n    expect([...document.querySelectorAll('style')].some(elm => elm.textContent.replace(/\\s+/g, '') === docsifyInitConfig.style.replace(/\\s+/g, ''))).toBe(true); // Verify docsify navigation and docsifyInitConfig.routes\n\n    document.querySelector('a[href=\"#/test\"]').click();\n    expect(await waitForFunction(() => /#\\/test$/.test(window.location.href))).toBeTruthy();\n    expect(await waitForText('#main', 'This is a custom route')).toBeTruthy();\n  });","file":"integration/example.test.js","skipped":false,"dir":"test"},{"name":"APIs are available","suites":["Global APIs"],"updatePoint":{"line":7,"column":26},"line":7,"code":"  test('APIs are available', () => {\n    initGlobalAPI();\n    expect(typeof window.Docsify).toEqual('object');\n    expect(typeof window.Docsify.util).toEqual('object');\n    expect(typeof window.Docsify.dom).toEqual('object');\n    expect(typeof window.Docsify.get).toEqual('function');\n    expect(typeof window.Docsify.slugify).toEqual('function');\n    expect(typeof window.Docsify.version).toEqual('string');\n    expect(typeof window.DocsifyCompiler).toEqual('function');\n    expect(typeof window.marked).toEqual('function');\n    expect(typeof window.Prism).toEqual('object');\n  });","file":"integration/global-apis.test.js","skipped":false,"dir":"test"},{"name":"important content","suites":["render","helpers"],"updatePoint":{"line":16,"column":27},"line":16,"code":"    test('important content', () => {\n      const output = window.marked('!> Important content');\n      expect(output).toMatchInlineSnapshot(`\"<p class=\\\\\"tip\\\\\">Important content</p>\"`);\n    });","file":"integration/render.test.js","skipped":false,"dir":"test"},{"name":"general tip","suites":["render","helpers"],"updatePoint":{"line":20,"column":21},"line":20,"code":"    test('general tip', () => {\n      const output = window.marked('?> General tip');\n      expect(output).toMatchInlineSnapshot(`\"<p class=\\\\\"warn\\\\\">General tip</p>\"`);\n    });","file":"integration/render.test.js","skipped":false,"dir":"test"},{"name":"as unordered task list","suites":["render","lists"],"updatePoint":{"line":28,"column":32},"line":28,"code":"    test('as unordered task list', async function () {\n      const output = window.marked(stripIndent`\n        - [x] Task 1\n        - [ ] Task 2\n        - [ ] Task 3\n      `);\n      expect(output).toMatchInlineSnapshot(`\"<ul class=\\\\\"task-list\\\\\"><li class=\\\\\"task-list-item\\\\\"><label><input checked=\\\\\"\\\\\" disabled=\\\\\"\\\\\" type=\\\\\"checkbox\\\\\"> Task 1</label></li><li class=\\\\\"task-list-item\\\\\"><label><input disabled=\\\\\"\\\\\" type=\\\\\"checkbox\\\\\"> Task 2</label></li><li class=\\\\\"task-list-item\\\\\"><label><input disabled=\\\\\"\\\\\" type=\\\\\"checkbox\\\\\"> Task 3</label></li></ul>\"`);\n    });","file":"integration/render.test.js","skipped":false,"dir":"test"},{"name":"as ordered task list","suites":["render","lists"],"updatePoint":{"line":36,"column":30},"line":36,"code":"    test('as ordered task list', async function () {\n      const output = window.marked(stripIndent`\n        1. [ ] Task 1\n        2. [x] Task 2\n      `);\n      expect(output).toMatchInlineSnapshot(`\"<ol class=\\\\\"task-list\\\\\"><li class=\\\\\"task-list-item\\\\\"><label><input disabled=\\\\\"\\\\\" type=\\\\\"checkbox\\\\\"> Task 1</label></li><li class=\\\\\"task-list-item\\\\\"><label><input checked=\\\\\"\\\\\" disabled=\\\\\"\\\\\" type=\\\\\"checkbox\\\\\"> Task 2</label></li></ol>\"`);\n    });","file":"integration/render.test.js","skipped":false,"dir":"test"},{"name":"normal unordered","suites":["render","lists"],"updatePoint":{"line":43,"column":26},"line":43,"code":"    test('normal unordered', async function () {\n      const output = window.marked(stripIndent`\n        - [linktext](link)\n        - just text\n      `);\n      expect(output).toMatchInlineSnapshot(`\"<ul ><li><a href=\\\\\"#/link\\\\\" >linktext</a></li><li>just text</li></ul>\"`);\n    });","file":"integration/render.test.js","skipped":false,"dir":"test"},{"name":"unordered with custom start","suites":["render","lists"],"updatePoint":{"line":50,"column":37},"line":50,"code":"    test('unordered with custom start', async function () {\n      const output = window.marked(stripIndent`\n        1. first\n        2. second\n\n        text\n\n        3. third\n      `);\n      expect(output).toMatchInlineSnapshot(`\"<ol ><li>first</li><li>second</li></ol><p>text</p><ol start=\\\\\"3\\\\\"><li>third</li></ol>\"`);\n    });","file":"integration/render.test.js","skipped":false,"dir":"test"},{"name":"nested","suites":["render","lists"],"updatePoint":{"line":61,"column":16},"line":61,"code":"    test('nested', async function () {\n      const output = window.marked(stripIndent`\n        - 1\n        - 2\n          - 2 a\n          - 2 b\n        - 3\n      `);\n      expect(output).toMatchInlineSnapshot(`\"<ul ><li>1</li><li>2<ul ><li>2 a</li><li>2 b</li></ul></li><li>3</li></ul>\"`);\n    });","file":"integration/render.test.js","skipped":false,"dir":"test"},{"name":"regular","suites":["render","images"],"updatePoint":{"line":75,"column":17},"line":75,"code":"    test('regular', async function () {\n      const output = window.marked('![alt text](http://imageUrl)');\n      expect(output).toMatchInlineSnapshot(`\"<p><img src=\\\\\"http://imageUrl\\\\\" data-origin=\\\\\"http://imageUrl\\\\\" alt=\\\\\"alt text\\\\\"></p>\"`);\n    });","file":"integration/render.test.js","skipped":false,"dir":"test"},{"name":"class","suites":["render","images"],"updatePoint":{"line":79,"column":15},"line":79,"code":"    test('class', async function () {\n      const output = window.marked(\"![alt text](http://imageUrl ':class=someCssClass')\");\n      expect(output).toMatchInlineSnapshot(`\"<p><img src=\\\\\"http://imageUrl\\\\\" data-origin=\\\\\"http://imageUrl\\\\\" alt=\\\\\"alt text\\\\\" class=\\\\\"someCssClass\\\\\" /></p>\"`);\n    });","file":"integration/render.test.js","skipped":false,"dir":"test"},{"name":"id","suites":["render","images"],"updatePoint":{"line":83,"column":12},"line":83,"code":"    test('id', async function () {\n      const output = window.marked(\"![alt text](http://imageUrl ':id=someCssID')\");\n      expect(output).toMatchInlineSnapshot(`\"<p><img src=\\\\\"http://imageUrl\\\\\" data-origin=\\\\\"http://imageUrl\\\\\" alt=\\\\\"alt text\\\\\" id=\\\\\"someCssID\\\\\" /></p>\"`);\n    });","file":"integration/render.test.js","skipped":false,"dir":"test"},{"name":"no-zoom","suites":["render","images"],"updatePoint":{"line":87,"column":17},"line":87,"code":"    test('no-zoom', async function () {\n      const output = window.marked(\"![alt text](http://imageUrl ':no-zoom')\");\n      expect(output).toMatchInlineSnapshot(`\"<p><img src=\\\\\"http://imageUrl\\\\\" data-origin=\\\\\"http://imageUrl\\\\\" alt=\\\\\"alt text\\\\\" data-no-zoom /></p>\"`);\n    });","file":"integration/render.test.js","skipped":false,"dir":"test"},{"name":"width and height","suites":["render","images","size"],"updatePoint":{"line":92,"column":28},"line":92,"code":"      test('width and height', async function () {\n        const output = window.marked(\"![alt text](http://imageUrl ':size=WIDTHxHEIGHT')\");\n        expect(output).toMatchInlineSnapshot(`\"<p><img src=\\\\\"http://imageUrl\\\\\" data-origin=\\\\\"http://imageUrl\\\\\" alt=\\\\\"alt text\\\\\" width=\\\\\"WIDTH\\\\\" height=\\\\\"HEIGHT\\\\\" /></p>\"`);\n      });","file":"integration/render.test.js","skipped":false,"dir":"test"},{"name":"width","suites":["render","images","size"],"updatePoint":{"line":96,"column":17},"line":96,"code":"      test('width', async function () {\n        const output = window.marked(\"![alt text](http://imageUrl ':size=50')\");\n        expect(output).toMatchInlineSnapshot(`\"<p><img src=\\\\\"http://imageUrl\\\\\" data-origin=\\\\\"http://imageUrl\\\\\" alt=\\\\\"alt text\\\\\" width=\\\\\"50\\\\\" /></p>\"`);\n      });","file":"integration/render.test.js","skipped":false,"dir":"test"},{"name":"h1","suites":["render","headings"],"updatePoint":{"line":105,"column":12},"line":105,"code":"    test('h1', async function () {\n      const output = window.marked('# h1 tag');\n      expect(output).toMatchInlineSnapshot(`\"<h1 id=\\\\\"h1-tag\\\\\"><a href=\\\\\"#/?id=h1-tag\\\\\" data-id=\\\\\"h1-tag\\\\\" class=\\\\\"anchor\\\\\"><span>h1 tag</span></a></h1>\"`);\n    });","file":"integration/render.test.js","skipped":false,"dir":"test"},{"name":"h2","suites":["render","headings"],"updatePoint":{"line":109,"column":12},"line":109,"code":"    test('h2', async function () {\n      const output = window.marked('## h2 tag');\n      expect(output).toMatchInlineSnapshot(`\"<h2 id=\\\\\"h2-tag\\\\\"><a href=\\\\\"#/?id=h2-tag\\\\\" data-id=\\\\\"h2-tag\\\\\" class=\\\\\"anchor\\\\\"><span>h2 tag</span></a></h2>\"`);\n    });","file":"integration/render.test.js","skipped":false,"dir":"test"},{"name":"h3","suites":["render","headings"],"updatePoint":{"line":113,"column":12},"line":113,"code":"    test('h3', async function () {\n      const output = window.marked('### h3 tag');\n      expect(output).toMatchInlineSnapshot(`\"<h3 id=\\\\\"h3-tag\\\\\"><a href=\\\\\"#/?id=h3-tag\\\\\" data-id=\\\\\"h3-tag\\\\\" class=\\\\\"anchor\\\\\"><span>h3 tag</span></a></h3>\"`);\n    });","file":"integration/render.test.js","skipped":false,"dir":"test"},{"name":"h4","suites":["render","headings"],"updatePoint":{"line":117,"column":12},"line":117,"code":"    test('h4', async function () {\n      const output = window.marked('#### h4 tag');\n      expect(output).toMatchInlineSnapshot(`\"<h4 id=\\\\\"h4-tag\\\\\"><a href=\\\\\"#/?id=h4-tag\\\\\" data-id=\\\\\"h4-tag\\\\\" class=\\\\\"anchor\\\\\"><span>h4 tag</span></a></h4>\"`);\n    });","file":"integration/render.test.js","skipped":false,"dir":"test"},{"name":"h5","suites":["render","headings"],"updatePoint":{"line":121,"column":12},"line":121,"code":"    test('h5', async function () {\n      const output = window.marked('##### h5 tag');\n      expect(output).toMatchInlineSnapshot(`\"<h5 id=\\\\\"h5-tag\\\\\"><a href=\\\\\"#/?id=h5-tag\\\\\" data-id=\\\\\"h5-tag\\\\\" class=\\\\\"anchor\\\\\"><span>h5 tag</span></a></h5>\"`);\n    });","file":"integration/render.test.js","skipped":false,"dir":"test"},{"name":"h6","suites":["render","headings"],"updatePoint":{"line":125,"column":12},"line":125,"code":"    test('h6', async function () {\n      const output = window.marked('###### h6 tag');\n      expect(output).toMatchInlineSnapshot(`\"<h6 id=\\\\\"h6-tag\\\\\"><a href=\\\\\"#/?id=h6-tag\\\\\" data-id=\\\\\"h6-tag\\\\\" class=\\\\\"anchor\\\\\"><span>h6 tag</span></a></h6>\"`);\n    });","file":"integration/render.test.js","skipped":false,"dir":"test"},{"name":"regular","suites":["render","link"],"updatePoint":{"line":131,"column":17},"line":131,"code":"    test('regular', async function () {\n      const output = window.marked('[alt text](http://url)');\n      expect(output).toMatchInlineSnapshot(`\"<p><a href=\\\\\"http://url\\\\\" target=\\\\\"_blank\\\\\"  rel=\\\\\"noopener\\\\\">alt text</a></p>\"`);\n    });","file":"integration/render.test.js","skipped":false,"dir":"test"},{"name":"linkrel","suites":["render","link"],"updatePoint":{"line":135,"column":17},"line":135,"code":"    test('linkrel', async function () {\n      // const { docsify } = await init('default', {\n      //   externalLinkTarget: '_blank',\n      //   externalLinkRel: 'noopener',\n      // });\n      const output = window.marked('[alt text](http://www.example.com)');\n      expect(output).toMatchInlineSnapshot(`\"<p><a href=\\\\\"http://www.example.com\\\\\" target=\\\\\"_blank\\\\\"  rel=\\\\\"noopener\\\\\">alt text</a></p>\"`);\n    });","file":"integration/render.test.js","skipped":false,"dir":"test"},{"name":"disabled","suites":["render","link"],"updatePoint":{"line":143,"column":18},"line":143,"code":"    test('disabled', async function () {\n      const output = window.marked(\"[alt text](http://url ':disabled')\");\n      expect(output).toMatchInlineSnapshot(`\"<p><a href=\\\\\"javascript:void(0)\\\\\" target=\\\\\"_blank\\\\\"  rel=\\\\\"noopener\\\\\" disabled>alt text</a></p>\"`);\n    });","file":"integration/render.test.js","skipped":false,"dir":"test"},{"name":"target","suites":["render","link"],"updatePoint":{"line":147,"column":16},"line":147,"code":"    test('target', async function () {\n      const output = window.marked(\"[alt text](http://url ':target=_self')\");\n      expect(output).toMatchInlineSnapshot(`\"<p><a href=\\\\\"http://url\\\\\" target=\\\\\"_self\\\\\" >alt text</a></p>\"`);\n    });","file":"integration/render.test.js","skipped":false,"dir":"test"},{"name":"class","suites":["render","link"],"updatePoint":{"line":151,"column":15},"line":151,"code":"    test('class', async function () {\n      const output = window.marked(\"[alt text](http://url ':class=someCssClass')\");\n      expect(output).toMatchInlineSnapshot(`\"<p><a href=\\\\\"http://url\\\\\" target=\\\\\"_blank\\\\\"  rel=\\\\\"noopener\\\\\" class=\\\\\"someCssClass\\\\\">alt text</a></p>\"`);\n    });","file":"integration/render.test.js","skipped":false,"dir":"test"},{"name":"id","suites":["render","link"],"updatePoint":{"line":155,"column":12},"line":155,"code":"    test('id', async function () {\n      const output = window.marked(\"[alt text](http://url ':id=someCssID')\");\n      expect(output).toMatchInlineSnapshot(`\"<p><a href=\\\\\"http://url\\\\\" target=\\\\\"_blank\\\\\"  rel=\\\\\"noopener\\\\\" id=\\\\\"someCssID\\\\\">alt text</a></p>\"`);\n    });","file":"integration/render.test.js","skipped":false,"dir":"test"},{"name":"non external local url with one /","suites":["core/util","isExternal()"],"updatePoint":{"line":12,"column":43},"line":12,"code":"    test('non external local url with one /', () => {\n      const result = isExternal(`/${location.host}/docsify/demo.md`);\n      expect(result).toBeFalsy();\n    });","file":"unit/core-util.test.js","skipped":false,"dir":"test"},{"name":"non external local url with two //","suites":["core/util","isExternal()"],"updatePoint":{"line":16,"column":44},"line":16,"code":"    test('non external local url with two //', () => {\n      const result = isExternal(`//${location.host}/docsify/demo.md`);\n      expect(result).toBeFalsy();\n    });","file":"unit/core-util.test.js","skipped":false,"dir":"test"},{"name":"non external local url with three ///","suites":["core/util","isExternal()"],"updatePoint":{"line":20,"column":47},"line":20,"code":"    test('non external local url with three ///', () => {\n      const result = isExternal(`///${location.host}/docsify/demo.md`);\n      expect(result).toBeFalsy();\n    });","file":"unit/core-util.test.js","skipped":false,"dir":"test"},{"name":"non external local url with more /","suites":["core/util","isExternal()"],"updatePoint":{"line":24,"column":44},"line":24,"code":"    test('non external local url with more /', () => {\n      const result = isExternal(`//////////////////${location.host}/docsify/demo.md`);\n      expect(result).toBeFalsy();\n    });","file":"unit/core-util.test.js","skipped":false,"dir":"test"},{"name":"non external url with one /","suites":["core/util","isExternal()"],"updatePoint":{"line":28,"column":37},"line":28,"code":"    test('non external url with one /', () => {\n      const result = isExternal('/example.github.io/docsify/demo.md');\n      expect(result).toBeFalsy();\n    }); // cases is external","file":"unit/core-util.test.js","skipped":false,"dir":"test"},{"name":"external url with two //","suites":["core/util","isExternal()"],"updatePoint":{"line":33,"column":34},"line":33,"code":"    test('external url with two //', () => {\n      const result = isExternal('/docsify/demo.md');\n      expect(result).toBeFalsy();\n    });","file":"unit/core-util.test.js","skipped":false,"dir":"test"},{"name":"external url with three ///","suites":["core/util","isExternal()"],"updatePoint":{"line":37,"column":37},"line":37,"code":"    test('external url with three ///', () => {\n      const result = isExternal('///example.github.io/docsify/demo.md');\n      expect(result).toBeTruthy();\n    });","file":"unit/core-util.test.js","skipped":false,"dir":"test"},{"name":"external url with more /","suites":["core/util","isExternal()"],"updatePoint":{"line":41,"column":34},"line":41,"code":"    test('external url with more /', () => {\n      const result = isExternal('//////////////////example.github.io/docsify/demo.md');\n      expect(result).toBeTruthy();\n    });","file":"unit/core-util.test.js","skipped":false,"dir":"test"},{"name":"dom manipulation (jsdom)","suites":["Example Tests","Jest & JSDOM basics"],"updatePoint":{"line":10,"column":34},"line":10,"code":"    test('dom manipulation (jsdom)', () => {\n      const testText = 'This is a test';\n      const testHTML = `<h1>Test</h1><p>${testText}</p>`; // Inject HTML\n\n      document.body.innerHTML = testHTML; // Add class to <body> element and verify\n\n      document.body.classList.add('foo'); // Test HTML\n\n      expect(document.body.getAttribute('class')).toEqual('foo');\n      expect(document.body.textContent).toMatch(/Test/);\n      expect(document.querySelectorAll('p')).toHaveLength(1);\n      expect(document.querySelector('p').textContent).toBe(testText);\n      expect(document.querySelector('table')).toBeNull();\n    }); // Snapshot Testing","file":"unit/example.test.js","skipped":false,"dir":"test"},{"name":"snapshot (jsdom)","suites":["Example Tests","Jest & JSDOM basics"],"updatePoint":{"line":26,"column":26},"line":26,"code":"    test('snapshot (jsdom)', () => {\n      const testText = 'This is a test';\n      const testHTML = `<h1>Test</h1><p>${testText}</p>`; // Inject HTML\n\n      document.body.innerHTML = testHTML; // Add class to <body> element and verify\n\n      document.body.classList.add('foo');\n      const documentHTML = document.documentElement.outerHTML; // Test snapshots\n\n      expect(documentHTML).toMatchSnapshot(); // See __snapshots__\n\n      expect(documentHTML).toMatchInlineSnapshot(`\"<html><head></head><body class=\\\\\"foo\\\\\"><h1>Test</h1><p>This is a test</p></body></html>\"`);\n    });","file":"unit/example.test.js","skipped":false,"dir":"test"},{"name":"data & time","suites":["Example Tests","Fake Timers"],"updatePoint":{"line":41,"column":21},"line":41,"code":"    test('data & time', () => {\n      const fakeDate = new Date().setHours(1);\n      jest.useFakeTimers('modern');\n      jest.setSystemTime(fakeDate);\n      const timeOfDay = getTimeOfDay();\n      expect(timeOfDay).toBe('morning');\n    });","file":"unit/example.test.js","skipped":false,"dir":"test"},{"name":"mock import/require dependency using jest.fn()","suites":["Example Tests","Mocks & Spys"],"updatePoint":{"line":50,"column":56},"line":50,"code":"    test('mock import/require dependency using jest.fn()', () => {\n      const testModule = require('./fixtures/get-time-of-day.js');\n\n      const {\n        greet: testGreet\n      } = require('./fixtures/greet.js');\n\n      testModule.getTimeOfDay = jest.fn(() => 'day');\n      const timeOfDay = testModule.getTimeOfDay();\n      const greeting = testGreet('John');\n      expect(timeOfDay).toBe('day');\n      expect(greeting).toBe(`Good day, John!`);\n    });","file":"unit/example.test.js","skipped":false,"dir":"test"},{"name":"mock import/require dependency using jest.doMock()","suites":["Example Tests","Mocks & Spys"],"updatePoint":{"line":63,"column":60},"line":63,"code":"    test('mock import/require dependency using jest.doMock()', () => {\n      const mockModulePath = './fixtures/get-time-of-day.js';\n      jest.doMock(mockModulePath, () => ({\n        __esModule: true,\n        getTimeOfDay: jest.fn(() => 'night')\n      }));\n\n      const mockGetTimeOfDay = require(mockModulePath).getTimeOfDay;\n\n      const {\n        greet: testGreet\n      } = require('./fixtures/greet.js');\n\n      const timeOfDay = mockGetTimeOfDay();\n      const greeting = testGreet('John');\n      expect(timeOfDay).toBe('night');\n      expect(greeting).toBe(`Good night, John!`);\n    });","file":"unit/example.test.js","skipped":false,"dir":"test"},{"name":"spy on native method using jest.spyOn()","suites":["Example Tests","Mocks & Spys"],"updatePoint":{"line":81,"column":49},"line":81,"code":"    test('spy on native method using jest.spyOn()', () => {\n      // Replace Math.random() implementation to return fixed value\n      jest.spyOn(Math, 'random').mockImplementation(() => 0.1);\n      expect(Math.random()).toEqual(0.1);\n      expect(Math.random()).toEqual(0.1);\n      expect(Math.random()).toEqual(0.1);\n    });","file":"unit/example.test.js","skipped":false,"dir":"test"},{"name":"spy on import/require dependency using jest.spyOn()","suites":["Example Tests","Mocks & Spys"],"updatePoint":{"line":88,"column":61},"line":88,"code":"    test('spy on import/require dependency using jest.spyOn()', () => {\n      jest.spyOn(getTimeOfDayModule, 'getTimeOfDay').mockImplementation(() => 'night');\n      const timeOfDay = getTimeOfDay();\n      const greeting = greet('John');\n      expect(timeOfDay).toBe('night');\n      expect(greeting).toBe(`Good night, John!`);\n    });","file":"unit/example.test.js","skipped":false,"dir":"test"},{"name":"removeAtag from a link","suites":["core/render/utils","removeAtag()"],"updatePoint":{"line":20,"column":32},"line":20,"code":"    test('removeAtag from a link', () => {\n      const result = removeAtag('<a href=\"www.example.com\">content</a>');\n      expect(result).toEqual('content');\n    });","file":"unit/render-util.test.js","skipped":false,"dir":"test"},{"name":"parse simple config","suites":["core/render/utils","getAndRemoveConfig()"],"updatePoint":{"line":28,"column":29},"line":28,"code":"    test('parse simple config', () => {\n      const result = getAndRemoveConfig(`[filename](_media/example.md ':include')`);\n      expect(result).toMatchObject({\n        config: {},\n        str: `[filename](_media/example.md ':include')`\n      });\n    });","file":"unit/render-util.test.js","skipped":false,"dir":"test"},{"name":"parse config with arguments","suites":["core/render/utils","getAndRemoveConfig()"],"updatePoint":{"line":35,"column":37},"line":35,"code":"    test('parse config with arguments', () => {\n      const result = getAndRemoveConfig(`[filename](_media/example.md ':include :foo=bar :baz test')`);\n      expect(result).toMatchObject({\n        config: {\n          foo: 'bar',\n          baz: true\n        },\n        str: `[filename](_media/example.md ':include test')`\n      });\n    });","file":"unit/render-util.test.js","skipped":false,"dir":"test"},{"name":"parse config with double quotes","suites":["core/render/utils","getAndRemoveConfig()"],"updatePoint":{"line":45,"column":41},"line":45,"code":"    test('parse config with double quotes', () => {\n      const result = getAndRemoveConfig(`[filename](_media/example.md \":include\")`);\n      expect(result).toMatchObject({\n        config: {},\n        str: `[filename](_media/example.md \":include\")`\n      });\n    });","file":"unit/render-util.test.js","skipped":false,"dir":"test"},{"name":"remove html tag in tree","suites":["core/render/tpl"],"updatePoint":{"line":55,"column":31},"line":55,"code":"  test('remove html tag in tree', () => {\n    const result = tree([{\n      level: 2,\n      slug: '#/cover?id=basic-usage',\n      title: '<span style=\"color:red\">Basic usage</span>'\n    }, {\n      level: 2,\n      slug: '#/cover?id=custom-background',\n      title: 'Custom background'\n    }, {\n      level: 2,\n      slug: '#/cover?id=test',\n      title: '<img src=\"/docs/_media/favicon.ico\" data-origin=\"/_media/favicon.ico\" alt=\"ico\">Test'\n    }]);\n    expect(result).toEqual(`<ul class=\"app-sub-sidebar\"><li><a class=\"section-link\" href=\"#/cover?id=basic-usage\" title=\"Basic usage\"><span style=\"color:red\">Basic usage</span></a></li><li><a class=\"section-link\" href=\"#/cover?id=custom-background\" title=\"Custom background\">Custom background</a></li><li><a class=\"section-link\" href=\"#/cover?id=test\" title=\"Test\"><img src=\"/docs/_media/favicon.ico\" data-origin=\"/_media/favicon.ico\" alt=\"ico\">Test</a></li></ul>`);\n  });","file":"unit/render-util.test.js","skipped":false,"dir":"test"},{"name":"slugify()","suites":["core/render/slugify"],"updatePoint":{"line":73,"column":17},"line":73,"code":"  test('slugify()', () => {\n    const result = slugify(`Bla bla bla <svg aria-label=\"broken\" class=\"broken\" viewPort=\"0 0 1 1\"><circle cx=\"0.5\" cy=\"0.5\"/></svg>`);\n    const result2 = slugify(`Another <span style=\"font-size: 1.2em\" class=\"foo bar baz\">broken <span class=\"aaa\">example</span></span>`);\n    expect(result).toEqual(`bla-bla-bla-`);\n    expect(result2).toEqual(`another-broken-example`);\n  });","file":"unit/render-util.test.js","skipped":false,"dir":"test"},{"name":"toURL","suites":["router/history/base","relativePath: true"],"updatePoint":{"line":32,"column":15},"line":32,"code":"    test('toURL', () => {\n      const url = history.toURL('guide.md', {}, '/zh-ch/');\n      expect(url).toEqual('/zh-ch/guide');\n    });","file":"unit/router-history-base.test.js","skipped":false,"dir":"test"},{"name":"toURL with double dot","suites":["router/history/base","relativePath: true"],"updatePoint":{"line":36,"column":31},"line":36,"code":"    test('toURL with double dot', () => {\n      const url = history.toURL('../README.md', {}, '/zh-ch/');\n      expect(url).toEqual('/README');\n    });","file":"unit/router-history-base.test.js","skipped":false,"dir":"test"},{"name":"toURL child path","suites":["router/history/base","relativePath: true"],"updatePoint":{"line":40,"column":26},"line":40,"code":"    test('toURL child path', () => {\n      const url = history.toURL('config/example.md', {}, '/zh-ch/');\n      expect(url).toEqual('/zh-ch/config/example');\n    });","file":"unit/router-history-base.test.js","skipped":false,"dir":"test"},{"name":"toURL absolute path","suites":["router/history/base","relativePath: true"],"updatePoint":{"line":44,"column":29},"line":44,"code":"    test('toURL absolute path', () => {\n      const url = history.toURL('/README', {}, '/zh-ch/');\n      expect(url).toEqual('/README');\n    });","file":"unit/router-history-base.test.js","skipped":false,"dir":"test"},{"name":"toURL","suites":["router/history/base","relativePath: false"],"updatePoint":{"line":61,"column":15},"line":61,"code":"    test('toURL', () => {\n      const url = history.toURL('README', {}, '/zh-ch/');\n      expect(url).toEqual('/README');\n    });","file":"unit/router-history-base.test.js","skipped":false,"dir":"test"},{"name":"resolvePath with filename","suites":["router/util","resolvePath()"],"updatePoint":{"line":11,"column":35},"line":11,"code":"    test('resolvePath with filename', () => {\n      const result = resolvePath('hello.md');\n      expect(result).toEqual('/hello.md');\n    });","file":"unit/router-util.test.js","skipped":false,"dir":"test"},{"name":"resolvePath with ./","suites":["router/util","resolvePath()"],"updatePoint":{"line":15,"column":29},"line":15,"code":"    test('resolvePath with ./', () => {\n      const result = resolvePath('./hello.md');\n      expect(result).toEqual('/hello.md');\n    });","file":"unit/router-util.test.js","skipped":false,"dir":"test"},{"name":"resolvePath with ../","suites":["router/util","resolvePath()"],"updatePoint":{"line":19,"column":30},"line":19,"code":"    test('resolvePath with ../', () => {\n      const result = resolvePath('test/../hello.md');\n      expect(result).toEqual('/hello.md');\n    });","file":"unit/router-util.test.js","skipped":false,"dir":"test"}]}