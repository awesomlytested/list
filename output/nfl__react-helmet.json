{"repo":"nfl/react-helmet","url":"https://github.com/nfl/react-helmet","branch":"master","configs":[{"package":"react-helmet","lang":"js","dir":"test","framework":"mocha","pattern":"**/*.{js,ts}"}],"tests":[{"name":"updates page title","suites":["Helmet - Declarative API","api","title"],"updatePoint":{"line":27,"column":28,"index":1227},"line":27,"code":"      it(\"updates page title\", done => {\n        ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, {\n          defaultTitle: \"Fallback\"\n        }, /*#__PURE__*/React.createElement(\"title\", null, \"Test Title\")), container);\n        requestAnimationFrame(() => {\n          expect(document.title).to.equal(\"Test Title\");\n          done();\n        });\n      });","file":"HelmetDeclarativeTest.js","skipped":false,"dir":"test"},{"name":"updates page title and allows children containing expressions","suites":["Helmet - Declarative API","api","title"],"updatePoint":{"line":36,"column":71,"index":1636},"line":36,"code":"      it(\"updates page title and allows children containing expressions\", done => {\n        const someValue = \"Some Great Title\";\n        ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, null, /*#__PURE__*/React.createElement(\"title\", null, \"Title: \", someValue)), container);\n        requestAnimationFrame(() => {\n          expect(document.title).to.equal(\"Title: Some Great Title\");\n          done();\n        });\n      });","file":"HelmetDeclarativeTest.js","skipped":false,"dir":"test"},{"name":"updates page title with multiple children","suites":["Helmet - Declarative API","api","title"],"updatePoint":{"line":44,"column":51,"index":2050},"line":44,"code":"      it(\"updates page title with multiple children\", done => {\n        ReactDOM.render( /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(Helmet, null, /*#__PURE__*/React.createElement(\"title\", null, \"Test Title\")), /*#__PURE__*/React.createElement(Helmet, null, /*#__PURE__*/React.createElement(\"title\", null, \"Child One Title\")), /*#__PURE__*/React.createElement(Helmet, null, /*#__PURE__*/React.createElement(\"title\", null, \"Child Two Title\"))), container);\n        requestAnimationFrame(() => {\n          expect(document.title).to.equal(\"Child Two Title\");\n          done();\n        });\n      });","file":"HelmetDeclarativeTest.js","skipped":false,"dir":"test"},{"name":"sets title based on deepest nested component","suites":["Helmet - Declarative API","api","title"],"updatePoint":{"line":51,"column":54,"index":2684},"line":51,"code":"      it(\"sets title based on deepest nested component\", done => {\n        ReactDOM.render( /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(Helmet, null, /*#__PURE__*/React.createElement(\"title\", null, \"Main Title\")), /*#__PURE__*/React.createElement(Helmet, null, /*#__PURE__*/React.createElement(\"title\", null, \"Nested Title\"))), container);\n        requestAnimationFrame(() => {\n          expect(document.title).to.equal(\"Nested Title\");\n          done();\n        });\n      });","file":"HelmetDeclarativeTest.js","skipped":false,"dir":"test"},{"name":"sets title using deepest nested component with a defined title","suites":["Helmet - Declarative API","api","title"],"updatePoint":{"line":58,"column":72,"index":3214},"line":58,"code":"      it(\"sets title using deepest nested component with a defined title\", done => {\n        ReactDOM.render( /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(Helmet, null, /*#__PURE__*/React.createElement(\"title\", null, \"Main Title\")), /*#__PURE__*/React.createElement(Helmet, null)), container);\n        requestAnimationFrame(() => {\n          expect(document.title).to.equal(\"Main Title\");\n          done();\n        });\n      });","file":"HelmetDeclarativeTest.js","skipped":false,"dir":"test"},{"name":"uses defaultTitle if no title is defined","suites":["Helmet - Declarative API","api","title"],"updatePoint":{"line":65,"column":50,"index":3655},"line":65,"code":"      it(\"uses defaultTitle if no title is defined\", done => {\n        ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, {\n          defaultTitle: \"Fallback\",\n          titleTemplate: \"This is a %s of the titleTemplate feature\"\n        }, /*#__PURE__*/React.createElement(\"title\", null)), container);\n        requestAnimationFrame(() => {\n          expect(document.title).to.equal(\"Fallback\");\n          done();\n        });\n      });","file":"HelmetDeclarativeTest.js","skipped":false,"dir":"test"},{"name":"uses a titleTemplate if defined","suites":["Helmet - Declarative API","api","title"],"updatePoint":{"line":75,"column":41,"index":4088},"line":75,"code":"      it(\"uses a titleTemplate if defined\", done => {\n        ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, {\n          defaultTitle: \"Fallback\",\n          titleTemplate: \"This is a %s of the titleTemplate feature\"\n        }, /*#__PURE__*/React.createElement(\"title\", null, \"Test\")), container);\n        requestAnimationFrame(() => {\n          expect(document.title).to.equal(\"This is a Test of the titleTemplate feature\");\n          done();\n        });\n      });","file":"HelmetDeclarativeTest.js","skipped":false,"dir":"test"},{"name":"replaces multiple title strings in titleTemplate","suites":["Helmet - Declarative API","api","title"],"updatePoint":{"line":85,"column":58,"index":4581},"line":85,"code":"      it(\"replaces multiple title strings in titleTemplate\", done => {\n        ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, {\n          titleTemplate: \"This is a %s of the titleTemplate feature. Another %s.\"\n        }, /*#__PURE__*/React.createElement(\"title\", null, \"Test\")), container);\n        requestAnimationFrame(() => {\n          expect(document.title).to.equal(\"This is a Test of the titleTemplate feature. Another Test.\");\n          done();\n        });\n      });","file":"HelmetDeclarativeTest.js","skipped":false,"dir":"test"},{"name":"uses a titleTemplate based on deepest nested component","suites":["Helmet - Declarative API","api","title"],"updatePoint":{"line":94,"column":64,"index":5072},"line":94,"code":"      it(\"uses a titleTemplate based on deepest nested component\", done => {\n        ReactDOM.render( /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(Helmet, {\n          titleTemplate: \"This is a %s of the titleTemplate feature\"\n        }, /*#__PURE__*/React.createElement(\"title\", null, \"Test\")), /*#__PURE__*/React.createElement(Helmet, {\n          titleTemplate: \"A %s using nested titleTemplate attributes\"\n        }, /*#__PURE__*/React.createElement(\"title\", null, \"Second Test\"))), container);\n        requestAnimationFrame(() => {\n          expect(document.title).to.equal(\"A Second Test using nested titleTemplate attributes\");\n          done();\n        });\n      });","file":"HelmetDeclarativeTest.js","skipped":false,"dir":"test"},{"name":"merges deepest component title with nearest upstream titleTemplate","suites":["Helmet - Declarative API","api","title"],"updatePoint":{"line":105,"column":76,"index":5791},"line":105,"code":"      it(\"merges deepest component title with nearest upstream titleTemplate\", done => {\n        ReactDOM.render( /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(Helmet, {\n          titleTemplate: \"This is a %s of the titleTemplate feature\"\n        }, /*#__PURE__*/React.createElement(\"title\", null, \"Test\")), /*#__PURE__*/React.createElement(Helmet, null, /*#__PURE__*/React.createElement(\"title\", null, \"Second Test\"))), container);\n        requestAnimationFrame(() => {\n          expect(document.title).to.equal(\"This is a Second Test of the titleTemplate feature\");\n          done();\n        });\n      });","file":"HelmetDeclarativeTest.js","skipped":false,"dir":"test"},{"name":"renders dollar characters in a title correctly when titleTemplate present","suites":["Helmet - Declarative API","api","title"],"updatePoint":{"line":114,"column":83,"index":6439},"line":114,"code":"      it(\"renders dollar characters in a title correctly when titleTemplate present\", done => {\n        const dollarTitle = \"te$t te$$t te$$$t te$$$$t\";\n        ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, {\n          titleTemplate: \"This is a %s\"\n        }, /*#__PURE__*/React.createElement(\"title\", null, dollarTitle)), container);\n        requestAnimationFrame(() => {\n          expect(document.title).to.equal(\"This is a te$t te$$t te$$$t te$$$$t\");\n          done();\n        });\n      });","file":"HelmetDeclarativeTest.js","skipped":false,"dir":"test"},{"name":"properly handles title with children and titleTemplate","suites":["Helmet - Declarative API","api","title"],"updatePoint":{"line":124,"column":64,"index":6927},"line":124,"code":"      it(\"properly handles title with children and titleTemplate\", done => {\n        ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, {\n          titleTemplate: \"This is an %s\"\n        }, /*#__PURE__*/React.createElement(\"title\", null, \"extra\", \" + \", \"test\")), container);\n        requestAnimationFrame(() => {\n          expect(document.title).to.equal(\"This is an extra + test\");\n          done();\n        });\n      });","file":"HelmetDeclarativeTest.js","skipped":false,"dir":"test"},{"name":"does not encode all characters with HTML character entity equivalents","suites":["Helmet - Declarative API","api","title"],"updatePoint":{"line":133,"column":79,"index":7373},"line":133,"code":"      it(\"does not encode all characters with HTML character entity equivalents\", done => {\n        const chineseTitle = \"膣膗 鍆錌雔\";\n        ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, null, /*#__PURE__*/React.createElement(\"title\", null, chineseTitle)), container);\n        requestAnimationFrame(() => {\n          expect(document.title).to.equal(chineseTitle);\n          done();\n        });\n      });","file":"HelmetDeclarativeTest.js","skipped":false,"dir":"test"},{"name":"page title with prop itemProp","suites":["Helmet - Declarative API","api","title"],"updatePoint":{"line":141,"column":39,"index":7747},"line":141,"code":"      it(\"page title with prop itemProp\", done => {\n        ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, {\n          defaultTitle: \"Fallback\"\n        }, /*#__PURE__*/React.createElement(\"title\", {\n          itemProp: \"name\"\n        }, \"Test Title with itemProp\")), container);\n        requestAnimationFrame(() => {\n          const titleTag = document.getElementsByTagName(\"title\")[0];\n          expect(document.title).to.equal(\"Test Title with itemProp\");\n          expect(titleTag.getAttribute(\"itemprop\")).to.equal(\"name\");\n          done();\n        });\n      });","file":"HelmetDeclarativeTest.js","skipped":false,"dir":"test"},{"name":"retains existing title tag when no title tag is defined","suites":["Helmet - Declarative API","api","title"],"updatePoint":{"line":154,"column":65,"index":8352},"line":154,"code":"      it(\"retains existing title tag when no title tag is defined\", done => {\n        headElement.innerHTML = `<title>Existing Title</title>`;\n        ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, null, /*#__PURE__*/React.createElement(\"meta\", {\n          name: \"keywords\",\n          content: \"stuff\"\n        })), container);\n        requestAnimationFrame(() => {\n          expect(document.title).to.equal(\"Existing Title\");\n          done();\n        });\n      });","file":"HelmetDeclarativeTest.js","skipped":false,"dir":"test"},{"name":"clears title tag if empty title is defined","suites":["Helmet - Declarative API","api","title"],"line":165,"code":"      it.skip(\"clears title tag if empty title is defined\", done => {","file":"HelmetDeclarativeTest.js","skipped":true,"dir":"test"},{"name":"updates title attributes","suites":["Helmet - Declarative API","api","title attributes"],"updatePoint":{"line":187,"column":34,"index":9771},"line":187,"code":"      it(\"updates title attributes\", done => {\n        ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, null, /*#__PURE__*/React.createElement(\"title\", {\n          itemProp: \"name\"\n        })), container);\n        requestAnimationFrame(() => {\n          const titleTag = document.getElementsByTagName(\"title\")[0];\n          expect(titleTag.getAttribute(\"itemprop\")).to.equal(\"name\");\n          expect(titleTag.getAttribute(HELMET_ATTRIBUTE)).to.equal(\"itemprop\");\n          done();\n        });\n      });","file":"HelmetDeclarativeTest.js","skipped":false,"dir":"test"},{"name":"sets attributes based on the deepest nested component","suites":["Helmet - Declarative API","api","title attributes"],"updatePoint":{"line":198,"column":63,"index":10313},"line":198,"code":"      it(\"sets attributes based on the deepest nested component\", done => {\n        ReactDOM.render( /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(Helmet, null, /*#__PURE__*/React.createElement(\"title\", {\n          lang: \"en\",\n          hidden: true\n        })), /*#__PURE__*/React.createElement(Helmet, null, /*#__PURE__*/React.createElement(\"title\", {\n          lang: \"ja\"\n        }))), container);\n        requestAnimationFrame(() => {\n          const titleTag = document.getElementsByTagName(\"title\")[0];\n          expect(titleTag.getAttribute(\"lang\")).to.equal(\"ja\");\n          expect(titleTag.getAttribute(\"hidden\")).to.equal(\"true\");\n          expect(titleTag.getAttribute(HELMET_ATTRIBUTE)).to.equal(\"lang,hidden\");\n          done();\n        });\n      });","file":"HelmetDeclarativeTest.js","skipped":false,"dir":"test"},{"name":"handles valueless attributes","suites":["Helmet - Declarative API","api","title attributes"],"updatePoint":{"line":213,"column":38,"index":11085},"line":213,"code":"      it(\"handles valueless attributes\", done => {\n        ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, null, /*#__PURE__*/React.createElement(\"title\", {\n          hidden: true\n        })), container);\n        requestAnimationFrame(() => {\n          const titleTag = document.getElementsByTagName(\"title\")[0];\n          expect(titleTag.getAttribute(\"hidden\")).to.equal(\"true\");\n          expect(titleTag.getAttribute(HELMET_ATTRIBUTE)).to.equal(\"hidden\");\n          done();\n        });\n      });","file":"HelmetDeclarativeTest.js","skipped":false,"dir":"test"},{"name":"clears title attributes that are handled within helmet","suites":["Helmet - Declarative API","api","title attributes"],"updatePoint":{"line":224,"column":64,"index":11620},"line":224,"code":"      it(\"clears title attributes that are handled within helmet\", done => {\n        ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, null, /*#__PURE__*/React.createElement(\"title\", {\n          lang: \"en\",\n          hidden: true\n        })), container);\n        requestAnimationFrame(() => {\n          ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, null), container);\n          requestAnimationFrame(() => {\n            const titleTag = document.getElementsByTagName(\"title\")[0];\n            expect(titleTag.getAttribute(\"lang\")).to.be.null;\n            expect(titleTag.getAttribute(\"hidden\")).to.be.null;\n            expect(titleTag.getAttribute(HELMET_ATTRIBUTE)).to.equal(null);\n            done();\n          });\n        });\n      });","file":"HelmetDeclarativeTest.js","skipped":false,"dir":"test"},{"name":"updates html attributes","suites":["Helmet - Declarative API","api","html attributes"],"updatePoint":{"line":242,"column":33,"index":12395},"line":242,"code":"      it(\"updates html attributes\", done => {\n        ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, null, /*#__PURE__*/React.createElement(\"html\", {\n          className: \"myClassName\",\n          lang: \"en\"\n        })), container);\n        requestAnimationFrame(() => {\n          const htmlTag = document.getElementsByTagName(\"html\")[0];\n          expect(htmlTag.getAttribute(\"class\")).to.equal(\"myClassName\");\n          expect(htmlTag.getAttribute(\"lang\")).to.equal(\"en\");\n          expect(htmlTag.getAttribute(HELMET_ATTRIBUTE)).to.equal(\"class,lang\");\n          done();\n        });\n      });","file":"HelmetDeclarativeTest.js","skipped":false,"dir":"test"},{"name":"sets attributes based on the deepest nested component","suites":["Helmet - Declarative API","api","html attributes"],"updatePoint":{"line":255,"column":63,"index":13031},"line":255,"code":"      it(\"sets attributes based on the deepest nested component\", done => {\n        ReactDOM.render( /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(Helmet, null, /*#__PURE__*/React.createElement(\"html\", {\n          lang: \"en\"\n        })), /*#__PURE__*/React.createElement(Helmet, null, /*#__PURE__*/React.createElement(\"html\", {\n          lang: \"ja\"\n        }))), container);\n        requestAnimationFrame(() => {\n          const htmlTag = document.getElementsByTagName(\"html\")[0];\n          expect(htmlTag.getAttribute(\"lang\")).to.equal(\"ja\");\n          expect(htmlTag.getAttribute(HELMET_ATTRIBUTE)).to.equal(\"lang\");\n          done();\n        });\n      });","file":"HelmetDeclarativeTest.js","skipped":false,"dir":"test"},{"name":"handles valueless attributes","suites":["Helmet - Declarative API","api","html attributes"],"updatePoint":{"line":268,"column":38,"index":13698},"line":268,"code":"      it(\"handles valueless attributes\", done => {\n        ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, null, /*#__PURE__*/React.createElement(\"html\", {\n          amp: true\n        })), container);\n        requestAnimationFrame(() => {\n          const htmlTag = document.getElementsByTagName(\"html\")[0];\n          expect(htmlTag.getAttribute(\"amp\")).to.equal(\"true\");\n          expect(htmlTag.getAttribute(HELMET_ATTRIBUTE)).to.equal(\"amp\");\n          done();\n        });\n      });","file":"HelmetDeclarativeTest.js","skipped":false,"dir":"test"},{"name":"clears html attributes that are handled within helmet","suites":["Helmet - Declarative API","api","html attributes"],"updatePoint":{"line":279,"column":63,"index":14218},"line":279,"code":"      it(\"clears html attributes that are handled within helmet\", done => {\n        ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, null, /*#__PURE__*/React.createElement(\"html\", {\n          lang: \"en\",\n          amp: true\n        })), container);\n        requestAnimationFrame(() => {\n          ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, null), container);\n          requestAnimationFrame(() => {\n            const htmlTag = document.getElementsByTagName(\"html\")[0];\n            expect(htmlTag.getAttribute(\"lang\")).to.be.null;\n            expect(htmlTag.getAttribute(\"amp\")).to.be.null;\n            expect(htmlTag.getAttribute(HELMET_ATTRIBUTE)).to.equal(null);\n            done();\n          });\n        });\n      });","file":"HelmetDeclarativeTest.js","skipped":false,"dir":"test"},{"name":"updates with multiple additions and removals - overwrite and new","suites":["Helmet - Declarative API","api","html attributes"],"updatePoint":{"line":295,"column":74,"index":14974},"line":295,"code":"      it(\"updates with multiple additions and removals - overwrite and new\", done => {\n        ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, null, /*#__PURE__*/React.createElement(\"html\", {\n          lang: \"en\",\n          amp: true\n        })), container);\n        requestAnimationFrame(() => {\n          ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, null, /*#__PURE__*/React.createElement(\"html\", {\n            lang: \"ja\",\n            id: \"html-tag\",\n            title: \"html tag\"\n          })), container);\n          requestAnimationFrame(() => {\n            const htmlTag = document.getElementsByTagName(\"html\")[0];\n            expect(htmlTag.getAttribute(\"amp\")).to.equal(null);\n            expect(htmlTag.getAttribute(\"lang\")).to.equal(\"ja\");\n            expect(htmlTag.getAttribute(\"id\")).to.equal(\"html-tag\");\n            expect(htmlTag.getAttribute(\"title\")).to.equal(\"html tag\");\n            expect(htmlTag.getAttribute(HELMET_ATTRIBUTE)).to.equal(\"lang,id,title\");\n            done();\n          });\n        });\n      });","file":"HelmetDeclarativeTest.js","skipped":false,"dir":"test"},{"name":"updates with multiple additions and removals - all new","suites":["Helmet - Declarative API","api","html attributes"],"updatePoint":{"line":317,"column":64,"index":16019},"line":317,"code":"      it(\"updates with multiple additions and removals - all new\", done => {\n        ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, null, /*#__PURE__*/React.createElement(\"html\", {\n          lang: \"en\",\n          amp: true\n        })), container);\n        requestAnimationFrame(() => {\n          ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, null, /*#__PURE__*/React.createElement(\"html\", {\n            id: \"html-tag\",\n            title: \"html tag\"\n          })), container);\n          requestAnimationFrame(() => {\n            const htmlTag = document.getElementsByTagName(\"html\")[0];\n            expect(htmlTag.getAttribute(\"amp\")).to.equal(null);\n            expect(htmlTag.getAttribute(\"lang\")).to.equal(null);\n            expect(htmlTag.getAttribute(\"id\")).to.equal(\"html-tag\");\n            expect(htmlTag.getAttribute(\"title\")).to.equal(\"html tag\");\n            expect(htmlTag.getAttribute(HELMET_ATTRIBUTE)).to.equal(\"id,title\");\n            done();\n          });\n        });\n      });","file":"HelmetDeclarativeTest.js","skipped":false,"dir":"test"},{"name":"are not cleared","suites":["Helmet - Declarative API","api","html attributes","initialized outside of helmet"],"updatePoint":{"line":343,"column":27,"index":17204},"line":343,"code":"        it(\"are not cleared\", done => {\n          ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, null), container);\n          requestAnimationFrame(() => {\n            const htmlTag = document.getElementsByTagName(\"html\")[0];\n            expect(htmlTag.getAttribute(\"test\")).to.equal(\"test\");\n            expect(htmlTag.getAttribute(HELMET_ATTRIBUTE)).to.equal(null);\n            done();\n          });\n        });","file":"HelmetDeclarativeTest.js","skipped":false,"dir":"test"},{"name":"overwritten if specified in helmet","suites":["Helmet - Declarative API","api","html attributes","initialized outside of helmet"],"updatePoint":{"line":352,"column":46,"index":17648},"line":352,"code":"        it(\"overwritten if specified in helmet\", done => {\n          ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, null, /*#__PURE__*/React.createElement(\"html\", {\n            test: \"helmet-attr\"\n          })), container);\n          requestAnimationFrame(() => {\n            const htmlTag = document.getElementsByTagName(\"html\")[0];\n            expect(htmlTag.getAttribute(\"test\")).to.equal(\"helmet-attr\");\n            expect(htmlTag.getAttribute(HELMET_ATTRIBUTE)).to.equal(\"test\");\n            done();\n          });\n        });","file":"HelmetDeclarativeTest.js","skipped":false,"dir":"test"},{"name":"cleared once it is managed in helmet","suites":["Helmet - Declarative API","api","html attributes","initialized outside of helmet"],"updatePoint":{"line":363,"column":48,"index":18192},"line":363,"code":"        it(\"cleared once it is managed in helmet\", done => {\n          ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, null, /*#__PURE__*/React.createElement(\"html\", {\n            test: \"helmet-attr\"\n          })), container);\n          requestAnimationFrame(() => {\n            ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, null), container);\n            requestAnimationFrame(() => {\n              const htmlTag = document.getElementsByTagName(\"html\")[0];\n              expect(htmlTag.getAttribute(\"test\")).to.equal(null);\n              expect(htmlTag.getAttribute(HELMET_ATTRIBUTE)).to.equal(null);\n              done();\n            });\n          });\n        });","file":"HelmetDeclarativeTest.js","skipped":false,"dir":"test"},{"name":"updates multiple body attributes","suites":["Helmet - Declarative API","api","body attributes","valid attributes"],"updatePoint":{"line":416,"column":42,"index":20236},"line":416,"code":"      it(\"updates multiple body attributes\", done => {\n        ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, null, /*#__PURE__*/React.createElement(\"body\", {\n          className: \"myClassName\",\n          tabIndex: -1\n        })), container);\n        requestAnimationFrame(() => {\n          const bodyTag = document.body;\n          expect(bodyTag.getAttribute(\"class\")).to.equal(\"myClassName\");\n          expect(bodyTag.getAttribute(\"tabindex\")).to.equal(\"-1\");\n          expect(bodyTag.getAttribute(HELMET_ATTRIBUTE)).to.equal(\"class,tabindex\");\n          done();\n        });\n      });","file":"HelmetDeclarativeTest.js","skipped":false,"dir":"test"},{"name":"sets attributes based on the deepest nested component","suites":["Helmet - Declarative API","api","body attributes","valid attributes"],"updatePoint":{"line":429,"column":63,"index":20855},"line":429,"code":"      it(\"sets attributes based on the deepest nested component\", done => {\n        ReactDOM.render( /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(Helmet, null, /*#__PURE__*/React.createElement(\"body\", {\n          lang: \"en\"\n        })), /*#__PURE__*/React.createElement(Helmet, null, /*#__PURE__*/React.createElement(\"body\", {\n          lang: \"ja\"\n        }))), container);\n        requestAnimationFrame(() => {\n          const bodyTag = document.body;\n          expect(bodyTag.getAttribute(\"lang\")).to.equal(\"ja\");\n          expect(bodyTag.getAttribute(HELMET_ATTRIBUTE)).to.equal(\"lang\");\n          done();\n        });\n      });","file":"HelmetDeclarativeTest.js","skipped":false,"dir":"test"},{"name":"handles valueless attributes","suites":["Helmet - Declarative API","api","body attributes","valid attributes"],"updatePoint":{"line":442,"column":38,"index":21495},"line":442,"code":"      it(\"handles valueless attributes\", done => {\n        ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, null, /*#__PURE__*/React.createElement(\"body\", {\n          hidden: true\n        })), container);\n        requestAnimationFrame(() => {\n          const bodyTag = document.body;\n          expect(bodyTag.getAttribute(\"hidden\")).to.equal(\"true\");\n          expect(bodyTag.getAttribute(HELMET_ATTRIBUTE)).to.equal(\"hidden\");\n          done();\n        });\n      });","file":"HelmetDeclarativeTest.js","skipped":false,"dir":"test"},{"name":"clears body attributes that are handled within helmet","suites":["Helmet - Declarative API","api","body attributes","valid attributes"],"updatePoint":{"line":453,"column":63,"index":21997},"line":453,"code":"      it(\"clears body attributes that are handled within helmet\", done => {\n        ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, null, /*#__PURE__*/React.createElement(\"body\", {\n          lang: \"en\",\n          hidden: true\n        })), container);\n        requestAnimationFrame(() => {\n          ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, null), container);\n          requestAnimationFrame(() => {\n            const bodyTag = document.body;\n            expect(bodyTag.getAttribute(\"lang\")).to.be.null;\n            expect(bodyTag.getAttribute(\"hidden\")).to.be.null;\n            expect(bodyTag.getAttribute(HELMET_ATTRIBUTE)).to.equal(null);\n            done();\n          });\n        });\n      });","file":"HelmetDeclarativeTest.js","skipped":false,"dir":"test"},{"name":"updates with multiple additions and removals - overwrite and new","suites":["Helmet - Declarative API","api","body attributes","valid attributes"],"updatePoint":{"line":469,"column":74,"index":22732},"line":469,"code":"      it(\"updates with multiple additions and removals - overwrite and new\", done => {\n        ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, null, /*#__PURE__*/React.createElement(\"body\", {\n          lang: \"en\",\n          hidden: true\n        })), container);\n        requestAnimationFrame(() => {\n          ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, null, /*#__PURE__*/React.createElement(\"body\", {\n            lang: \"ja\",\n            id: \"body-tag\",\n            title: \"body tag\"\n          })), container);\n          requestAnimationFrame(() => {\n            const bodyTag = document.body;\n            expect(bodyTag.getAttribute(\"hidden\")).to.equal(null);\n            expect(bodyTag.getAttribute(\"lang\")).to.equal(\"ja\");\n            expect(bodyTag.getAttribute(\"id\")).to.equal(\"body-tag\");\n            expect(bodyTag.getAttribute(\"title\")).to.equal(\"body tag\");\n            expect(bodyTag.getAttribute(HELMET_ATTRIBUTE)).to.equal(\"lang,id,title\");\n            done();\n          });\n        });\n      });","file":"HelmetDeclarativeTest.js","skipped":false,"dir":"test"},{"name":"updates with multiple additions and removals - all new","suites":["Helmet - Declarative API","api","body attributes","valid attributes"],"updatePoint":{"line":491,"column":64,"index":23756},"line":491,"code":"      it(\"updates with multiple additions and removals - all new\", done => {\n        ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, null, /*#__PURE__*/React.createElement(\"body\", {\n          lang: \"en\",\n          hidden: true\n        })), container);\n        requestAnimationFrame(() => {\n          ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, null, /*#__PURE__*/React.createElement(\"body\", {\n            id: \"body-tag\",\n            title: \"body tag\"\n          })), container);\n          requestAnimationFrame(() => {\n            const bodyTag = document.body;\n            expect(bodyTag.getAttribute(\"hidden\")).to.equal(null);\n            expect(bodyTag.getAttribute(\"lang\")).to.equal(null);\n            expect(bodyTag.getAttribute(\"id\")).to.equal(\"body-tag\");\n            expect(bodyTag.getAttribute(\"title\")).to.equal(\"body tag\");\n            expect(bodyTag.getAttribute(HELMET_ATTRIBUTE)).to.equal(\"id,title\");\n            done();\n          });\n        });\n      });","file":"HelmetDeclarativeTest.js","skipped":false,"dir":"test"},{"name":"attributes are not cleared","suites":["Helmet - Declarative API","api","body attributes","initialized outside of helmet"],"updatePoint":{"line":517,"column":38,"index":24904},"line":517,"code":"        it(\"attributes are not cleared\", done => {\n          ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, null), container);\n          requestAnimationFrame(() => {\n            const bodyTag = document.body;\n            expect(bodyTag.getAttribute(\"test\")).to.equal(\"test\");\n            expect(bodyTag.getAttribute(HELMET_ATTRIBUTE)).to.equal(null);\n            done();\n          });\n        });","file":"HelmetDeclarativeTest.js","skipped":false,"dir":"test"},{"name":"attributes are overwritten if specified in helmet","suites":["Helmet - Declarative API","api","body attributes","initialized outside of helmet"],"updatePoint":{"line":526,"column":61,"index":25336},"line":526,"code":"        it(\"attributes are overwritten if specified in helmet\", done => {\n          ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, null, /*#__PURE__*/React.createElement(\"body\", {\n            test: \"helmet-attr\"\n          })), container);\n          requestAnimationFrame(() => {\n            const bodyTag = document.body;\n            expect(bodyTag.getAttribute(\"test\")).to.equal(\"helmet-attr\");\n            expect(bodyTag.getAttribute(HELMET_ATTRIBUTE)).to.equal(\"test\");\n            done();\n          });\n        });","file":"HelmetDeclarativeTest.js","skipped":false,"dir":"test"},{"name":"attributes are cleared once managed in helmet","suites":["Helmet - Declarative API","api","body attributes","initialized outside of helmet"],"updatePoint":{"line":537,"column":57,"index":25862},"line":537,"code":"        it(\"attributes are cleared once managed in helmet\", done => {\n          ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, null, /*#__PURE__*/React.createElement(\"body\", {\n            test: \"helmet-attr\"\n          })), container);\n          requestAnimationFrame(() => {\n            ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, null), container);\n            requestAnimationFrame(() => {\n              const bodyTag = document.body;\n              expect(bodyTag.getAttribute(\"test\")).to.equal(null);\n              expect(bodyTag.getAttribute(HELMET_ATTRIBUTE)).to.equal(null);\n              done();\n            });\n          });\n        });","file":"HelmetDeclarativeTest.js","skipped":false,"dir":"test"},{"name":"when handling client state change, calls the function with new state, addedTags and removedTags ","suites":["Helmet - Declarative API","api","onChangeClientState"],"updatePoint":{"line":554,"column":106,"index":26643},"line":554,"code":"      it(\"when handling client state change, calls the function with new state, addedTags and removedTags \", done => {\n        const spy = sinon.spy();\n        ReactDOM.render( /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(Helmet, {\n          onChangeClientState: spy\n        }, /*#__PURE__*/React.createElement(\"base\", {\n          href: \"http://mysite.com/\"\n        }), /*#__PURE__*/React.createElement(\"link\", {\n          href: \"http://localhost/helmet\",\n          rel: \"canonical\"\n        }), /*#__PURE__*/React.createElement(\"meta\", {\n          charSet: \"utf-8\"\n        }), /*#__PURE__*/React.createElement(\"script\", {\n          src: \"http://localhost/test.js\",\n          type: \"text/javascript\"\n        }), /*#__PURE__*/React.createElement(\"title\", null, \"Main Title\"))), container);\n        requestAnimationFrame(() => {\n          expect(spy.called).to.equal(true);\n          const newState = spy.getCall(0).args[0];\n          const addedTags = spy.getCall(0).args[1];\n          const removedTags = spy.getCall(0).args[2];\n          expect(newState).to.contain({\n            title: \"Main Title\"\n          });\n          expect(newState.baseTag).to.contain({\n            href: \"http://mysite.com/\"\n          });\n          expect(newState.metaTags).to.contain({\n            charset: \"utf-8\"\n          });\n          expect(newState.linkTags).to.contain({\n            href: \"http://localhost/helmet\",\n            rel: \"canonical\"\n          });\n          expect(newState.scriptTags).to.contain({\n            src: \"http://localhost/test.js\",\n            type: \"text/javascript\"\n          });\n          expect(addedTags).to.have.property(\"baseTag\");\n          expect(addedTags.baseTag).to.have.deep.property(\"[0]\");\n          expect(addedTags.baseTag[0].outerHTML).to.equal(`<base href=\"http://mysite.com/\" data-react-helmet=\"true\">`);\n          expect(addedTags).to.have.property(\"metaTags\");\n          expect(addedTags.metaTags).to.have.deep.property(\"[0]\");\n          expect(addedTags.metaTags[0].outerHTML).to.equal(`<meta charset=\"utf-8\" data-react-helmet=\"true\">`);\n          expect(addedTags).to.have.property(\"linkTags\");\n          expect(addedTags.linkTags).to.have.deep.property(\"[0]\");\n          expect(addedTags.linkTags[0].outerHTML).to.equal(`<link href=\"http://localhost/helmet\" rel=\"canonical\" data-react-helmet=\"true\">`);\n          expect(addedTags).to.have.property(\"scriptTags\");\n          expect(addedTags.scriptTags).to.have.deep.property(\"[0]\");\n          expect(addedTags.scriptTags[0].outerHTML).to.equal(`<script src=\"http://localhost/test.js\" type=\"text/javascript\" data-react-helmet=\"true\"></script>`);\n          expect(removedTags).to.be.empty;\n          done();\n        });\n      });","file":"HelmetDeclarativeTest.js","skipped":false,"dir":"test"},{"name":"calls the deepest defined callback with the deepest state","suites":["Helmet - Declarative API","api","onChangeClientState"],"updatePoint":{"line":607,"column":67,"index":29348},"line":607,"code":"      it(\"calls the deepest defined callback with the deepest state\", done => {\n        const spy = sinon.spy();\n        ReactDOM.render( /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(Helmet, {\n          onChangeClientState: spy\n        }, /*#__PURE__*/React.createElement(\"title\", null, \"Main Title\")), /*#__PURE__*/React.createElement(Helmet, null, /*#__PURE__*/React.createElement(\"title\", null, \"Deeper Title\"))), container);\n        requestAnimationFrame(() => {\n          expect(spy.callCount).to.equal(1);\n          expect(spy.getCall(0).args[0]).to.contain({\n            title: \"Deeper Title\"\n          });\n          done();\n        });\n      });","file":"HelmetDeclarativeTest.js","skipped":false,"dir":"test"},{"name":"updates base tag","suites":["Helmet - Declarative API","api","base tag"],"updatePoint":{"line":622,"column":26,"index":30036},"line":622,"code":"      it(\"updates base tag\", done => {\n        ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, null, /*#__PURE__*/React.createElement(\"base\", {\n          href: \"http://mysite.com/\"\n        })), container);\n        requestAnimationFrame(() => {\n          const existingTags = headElement.querySelectorAll(`base[${HELMET_ATTRIBUTE}]`);\n          expect(existingTags).to.not.equal(undefined);\n          const filteredTags = [].slice.call(existingTags).filter(tag => {\n            return tag.getAttribute(\"href\") === \"http://mysite.com/\";\n          });\n          expect(filteredTags.length).to.equal(1);\n          done();\n        });\n      });","file":"HelmetDeclarativeTest.js","skipped":false,"dir":"test"},{"name":"clears the base tag if one is not specified","suites":["Helmet - Declarative API","api","base tag"],"updatePoint":{"line":636,"column":53,"index":30713},"line":636,"code":"      it(\"clears the base tag if one is not specified\", done => {\n        ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, {\n          base: {\n            href: \"http://mysite.com/\"\n          }\n        }), container);\n        requestAnimationFrame(() => {\n          ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, null), container);\n          requestAnimationFrame(() => {\n            const existingTags = headElement.querySelectorAll(`base[${HELMET_ATTRIBUTE}]`);\n            expect(existingTags).to.not.equal(undefined);\n            expect(existingTags.length).to.equal(0);\n            done();\n          });\n        });\n      });","file":"HelmetDeclarativeTest.js","skipped":false,"dir":"test"},{"name":"tags without 'href' are not accepted","suites":["Helmet - Declarative API","api","base tag"],"updatePoint":{"line":652,"column":46,"index":31357},"line":652,"code":"      it(\"tags without 'href' are not accepted\", done => {\n        ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, null, /*#__PURE__*/React.createElement(\"base\", {\n          property: \"won't work\"\n        })), container);\n        requestAnimationFrame(() => {\n          const existingTags = headElement.querySelectorAll(`base[${HELMET_ATTRIBUTE}]`);\n          expect(existingTags).to.not.equal(undefined);\n          expect(existingTags.length).to.equal(0);\n          done();\n        });\n      });","file":"HelmetDeclarativeTest.js","skipped":false,"dir":"test"},{"name":"sets base tag based on deepest nested component","suites":["Helmet - Declarative API","api","base tag"],"updatePoint":{"line":663,"column":57,"index":31875},"line":663,"code":"      it(\"sets base tag based on deepest nested component\", done => {\n        ReactDOM.render( /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(Helmet, null, /*#__PURE__*/React.createElement(\"base\", {\n          href: \"http://mysite.com\"\n        })), /*#__PURE__*/React.createElement(Helmet, null, /*#__PURE__*/React.createElement(\"base\", {\n          href: \"http://mysite.com/public\"\n        }))), container);\n        requestAnimationFrame(() => {\n          const existingTags = headElement.querySelectorAll(`base[${HELMET_ATTRIBUTE}]`);\n          const firstTag = Array.prototype.slice.call(existingTags)[0];\n          expect(existingTags).to.not.equal(undefined);\n          expect(existingTags.length).to.be.equal(1);\n          expect(existingTags).to.have.deep.property(\"[0]\").that.is.an.instanceof(Element);\n          expect(firstTag).to.have.property(\"getAttribute\");\n          expect(firstTag.getAttribute(\"href\")).to.equal(\"http://mysite.com/public\");\n          expect(firstTag.outerHTML).to.equal(`<base href=\"http://mysite.com/public\" ${HELMET_ATTRIBUTE}=\"true\">`);\n          done();\n        });\n      });","file":"HelmetDeclarativeTest.js","skipped":false,"dir":"test"},{"name":"does not render tag when primary attribute is null","suites":["Helmet - Declarative API","api","base tag"],"updatePoint":{"line":681,"column":60,"index":33022},"line":681,"code":"      it(\"does not render tag when primary attribute is null\", done => {\n        ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, null, /*#__PURE__*/React.createElement(\"base\", {\n          href: undefined\n        })), container);\n        requestAnimationFrame(() => {\n          const tagNodes = headElement.querySelectorAll(`base[${HELMET_ATTRIBUTE}]`);\n          const existingTags = Array.prototype.slice.call(tagNodes);\n          expect(existingTags).to.be.empty;\n          done();\n        });\n      });","file":"HelmetDeclarativeTest.js","skipped":false,"dir":"test"},{"name":"updates meta tags","suites":["Helmet - Declarative API","api","meta tags"],"updatePoint":{"line":694,"column":27,"index":33547},"line":694,"code":"      it(\"updates meta tags\", done => {\n        ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, null, /*#__PURE__*/React.createElement(\"meta\", {\n          charSet: \"utf-8\"\n        }), /*#__PURE__*/React.createElement(\"meta\", {\n          name: \"description\",\n          content: \"Test description\"\n        }), /*#__PURE__*/React.createElement(\"meta\", {\n          httpEquiv: \"content-type\",\n          content: \"text/html\"\n        }), /*#__PURE__*/React.createElement(\"meta\", {\n          property: \"og:type\",\n          content: \"article\"\n        }), /*#__PURE__*/React.createElement(\"meta\", {\n          itemProp: \"name\",\n          content: \"Test name itemprop\"\n        })), container);\n        requestAnimationFrame(() => {\n          const tagNodes = headElement.querySelectorAll(`meta[${HELMET_ATTRIBUTE}]`);\n          const existingTags = Array.prototype.slice.call(tagNodes);\n          expect(existingTags).to.not.equal(undefined);\n          const filteredTags = [].slice.call(existingTags).filter(tag => {\n            return tag.getAttribute(\"charset\") === \"utf-8\" || tag.getAttribute(\"name\") === \"description\" && tag.getAttribute(\"content\") === \"Test description\" || tag.getAttribute(\"http-equiv\") === \"content-type\" && tag.getAttribute(\"content\") === \"text/html\" || tag.getAttribute(\"itemprop\") === \"name\" && tag.getAttribute(\"content\") === \"Test name itemprop\";\n          });\n          expect(filteredTags.length).to.be.at.least(4);\n          done();\n        });\n      });","file":"HelmetDeclarativeTest.js","skipped":false,"dir":"test"},{"name":"clears all meta tags if none are specified","suites":["Helmet - Declarative API","api","meta tags"],"updatePoint":{"line":721,"column":52,"index":35058},"line":721,"code":"      it(\"clears all meta tags if none are specified\", done => {\n        ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, null, /*#__PURE__*/React.createElement(\"meta\", {\n          name: \"description\",\n          content: \"Test description\"\n        })), container);\n        requestAnimationFrame(() => {\n          ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, null), container);\n          requestAnimationFrame(() => {\n            const existingTags = headElement.querySelectorAll(`meta[${HELMET_ATTRIBUTE}]`);\n            expect(existingTags).to.not.equal(undefined);\n            expect(existingTags.length).to.equal(0);\n            done();\n          });\n        });\n      });","file":"HelmetDeclarativeTest.js","skipped":false,"dir":"test"},{"name":"tags without 'name', 'http-equiv', 'property', 'charset', or 'itemprop' are not accepted","suites":["Helmet - Declarative API","api","meta tags"],"updatePoint":{"line":736,"column":98,"index":35802},"line":736,"code":"      it(\"tags without 'name', 'http-equiv', 'property', 'charset', or 'itemprop' are not accepted\", done => {\n        ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, null, /*#__PURE__*/React.createElement(\"meta\", {\n          href: \"won't work\"\n        })), container);\n        requestAnimationFrame(() => {\n          const existingTags = headElement.querySelectorAll(`meta[${HELMET_ATTRIBUTE}]`);\n          expect(existingTags).to.not.equal(undefined);\n          expect(existingTags.length).to.equal(0);\n          done();\n        });\n      });","file":"HelmetDeclarativeTest.js","skipped":false,"dir":"test"},{"name":"sets meta tags based on deepest nested component","suites":["Helmet - Declarative API","api","meta tags"],"updatePoint":{"line":747,"column":58,"index":36317},"line":747,"code":"      it(\"sets meta tags based on deepest nested component\", done => {\n        ReactDOM.render( /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(Helmet, null, /*#__PURE__*/React.createElement(\"meta\", {\n          charSet: \"utf-8\"\n        }), /*#__PURE__*/React.createElement(\"meta\", {\n          name: \"description\",\n          content: \"Test description\"\n        })), /*#__PURE__*/React.createElement(Helmet, null, /*#__PURE__*/React.createElement(\"meta\", {\n          name: \"description\",\n          content: \"Inner description\"\n        }), /*#__PURE__*/React.createElement(\"meta\", {\n          name: \"keywords\",\n          content: \"test,meta,tags\"\n        }))), container);\n        requestAnimationFrame(() => {\n          const tagNodes = headElement.querySelectorAll(`meta[${HELMET_ATTRIBUTE}]`);\n          const existingTags = Array.prototype.slice.call(tagNodes);\n          const firstTag = existingTags[0];\n          const secondTag = existingTags[1];\n          const thirdTag = existingTags[2];\n          expect(existingTags).to.not.equal(undefined);\n          expect(existingTags.length).to.be.equal(3);\n          expect(existingTags).to.have.deep.property(\"[0]\").that.is.an.instanceof(Element);\n          expect(firstTag).to.have.property(\"getAttribute\");\n          expect(firstTag.getAttribute(\"charset\")).to.equal(\"utf-8\");\n          expect(firstTag.outerHTML).to.equal(`<meta charset=\"utf-8\" ${HELMET_ATTRIBUTE}=\"true\">`);\n          expect(existingTags).to.have.deep.property(\"[1]\").that.is.an.instanceof(Element);\n          expect(secondTag).to.have.property(\"getAttribute\");\n          expect(secondTag.getAttribute(\"name\")).to.equal(\"description\");\n          expect(secondTag.getAttribute(\"content\")).to.equal(\"Inner description\");\n          expect(secondTag.outerHTML).to.equal(`<meta name=\"description\" content=\"Inner description\" ${HELMET_ATTRIBUTE}=\"true\">`);\n          expect(existingTags).to.have.deep.property(\"[2]\").that.is.an.instanceof(Element);\n          expect(thirdTag).to.have.property(\"getAttribute\");\n          expect(thirdTag.getAttribute(\"name\")).to.equal(\"keywords\");\n          expect(thirdTag.getAttribute(\"content\")).to.equal(\"test,meta,tags\");\n          expect(thirdTag.outerHTML).to.equal(`<meta name=\"keywords\" content=\"test,meta,tags\" ${HELMET_ATTRIBUTE}=\"true\">`);\n          done();\n        });\n      });","file":"HelmetDeclarativeTest.js","skipped":false,"dir":"test"},{"name":"allows duplicate meta tags if specified in the same component","suites":["Helmet - Declarative API","api","meta tags"],"updatePoint":{"line":785,"column":71,"index":38700},"line":785,"code":"      it(\"allows duplicate meta tags if specified in the same component\", done => {\n        ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, null, /*#__PURE__*/React.createElement(\"meta\", {\n          name: \"description\",\n          content: \"Test description\"\n        }), /*#__PURE__*/React.createElement(\"meta\", {\n          name: \"description\",\n          content: \"Duplicate description\"\n        })), container);\n        requestAnimationFrame(() => {\n          const tagNodes = headElement.querySelectorAll(`meta[${HELMET_ATTRIBUTE}]`);\n          const existingTags = Array.prototype.slice.call(tagNodes);\n          const firstTag = existingTags[0];\n          const secondTag = existingTags[1];\n          expect(existingTags).to.not.equal(undefined);\n          expect(existingTags.length).to.equal(2);\n          expect(existingTags).to.have.deep.property(\"[0]\").that.is.an.instanceof(Element);\n          expect(firstTag).to.have.property(\"getAttribute\");\n          expect(firstTag.getAttribute(\"name\")).to.equal(\"description\");\n          expect(firstTag.getAttribute(\"content\")).to.equal(\"Test description\");\n          expect(firstTag.outerHTML).to.equal(`<meta name=\"description\" content=\"Test description\" ${HELMET_ATTRIBUTE}=\"true\">`);\n          expect(existingTags).to.have.deep.property(\"[1]\").that.is.an.instanceof(Element);\n          expect(secondTag).to.have.property(\"getAttribute\");\n          expect(secondTag.getAttribute(\"name\")).to.equal(\"description\");\n          expect(secondTag.getAttribute(\"content\")).to.equal(\"Duplicate description\");\n          expect(secondTag.outerHTML).to.equal(`<meta name=\"description\" content=\"Duplicate description\" ${HELMET_ATTRIBUTE}=\"true\">`);\n          done();\n        });\n      });","file":"HelmetDeclarativeTest.js","skipped":false,"dir":"test"},{"name":"overrides duplicate meta tags with single meta tag in a nested component","suites":["Helmet - Declarative API","api","meta tags"],"updatePoint":{"line":813,"column":82,"index":40450},"line":813,"code":"      it(\"overrides duplicate meta tags with single meta tag in a nested component\", done => {\n        ReactDOM.render( /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(Helmet, null, /*#__PURE__*/React.createElement(\"meta\", {\n          name: \"description\",\n          content: \"Test description\"\n        }), /*#__PURE__*/React.createElement(\"meta\", {\n          name: \"description\",\n          content: \"Duplicate description\"\n        })), /*#__PURE__*/React.createElement(Helmet, null, /*#__PURE__*/React.createElement(\"meta\", {\n          name: \"description\",\n          content: \"Inner description\"\n        }))), container);\n        requestAnimationFrame(() => {\n          const tagNodes = headElement.querySelectorAll(`meta[${HELMET_ATTRIBUTE}]`);\n          const existingTags = Array.prototype.slice.call(tagNodes);\n          const firstTag = existingTags[0];\n          expect(existingTags).to.not.equal(undefined);\n          expect(existingTags.length).to.equal(1);\n          expect(existingTags).to.have.deep.property(\"[0]\").that.is.an.instanceof(Element);\n          expect(firstTag).to.have.property(\"getAttribute\");\n          expect(firstTag.getAttribute(\"name\")).to.equal(\"description\");\n          expect(firstTag.getAttribute(\"content\")).to.equal(\"Inner description\");\n          expect(firstTag.outerHTML).to.equal(`<meta name=\"description\" content=\"Inner description\" ${HELMET_ATTRIBUTE}=\"true\">`);\n          done();\n        });\n      });","file":"HelmetDeclarativeTest.js","skipped":false,"dir":"test"},{"name":"overrides single meta tag with duplicate meta tags in a nested component","suites":["Helmet - Declarative API","api","meta tags"],"updatePoint":{"line":838,"column":82,"index":41926},"line":838,"code":"      it(\"overrides single meta tag with duplicate meta tags in a nested component\", done => {\n        ReactDOM.render( /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(Helmet, null, /*#__PURE__*/React.createElement(\"meta\", {\n          name: \"description\",\n          content: \"Test description\"\n        })), /*#__PURE__*/React.createElement(Helmet, null, /*#__PURE__*/React.createElement(\"meta\", {\n          name: \"description\",\n          content: \"Inner description\"\n        }), /*#__PURE__*/React.createElement(\"meta\", {\n          name: \"description\",\n          content: \"Inner duplicate description\"\n        }))), container);\n        requestAnimationFrame(() => {\n          const tagNodes = headElement.querySelectorAll(`meta[${HELMET_ATTRIBUTE}]`);\n          const existingTags = Array.prototype.slice.call(tagNodes);\n          const firstTag = existingTags[0];\n          const secondTag = existingTags[1];\n          expect(existingTags).to.not.equal(undefined);\n          expect(existingTags.length).to.equal(2);\n          expect(existingTags).to.have.deep.property(\"[0]\").that.is.an.instanceof(Element);\n          expect(firstTag).to.have.property(\"getAttribute\");\n          expect(firstTag.getAttribute(\"name\")).to.equal(\"description\");\n          expect(firstTag.getAttribute(\"content\")).to.equal(\"Inner description\");\n          expect(firstTag.outerHTML).to.equal(`<meta name=\"description\" content=\"Inner description\" ${HELMET_ATTRIBUTE}=\"true\">`);\n          expect(existingTags).to.have.deep.property(\"[1]\").that.is.an.instanceof(Element);\n          expect(secondTag).to.have.property(\"getAttribute\");\n          expect(secondTag.getAttribute(\"name\")).to.equal(\"description\");\n          expect(secondTag.getAttribute(\"content\")).to.equal(\"Inner duplicate description\");\n          expect(secondTag.outerHTML).to.equal(`<meta name=\"description\" content=\"Inner duplicate description\" ${HELMET_ATTRIBUTE}=\"true\">`);\n          done();\n        });\n      });","file":"HelmetDeclarativeTest.js","skipped":false,"dir":"test"},{"name":"does not render tag when primary attribute is null","suites":["Helmet - Declarative API","api","meta tags"],"updatePoint":{"line":869,"column":60,"index":43894},"line":869,"code":"      it(\"does not render tag when primary attribute is null\", done => {\n        ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, null, /*#__PURE__*/React.createElement(\"meta\", {\n          name: undefined,\n          content: \"Inner duplicate description\"\n        })), container);\n        requestAnimationFrame(() => {\n          const tagNodes = headElement.querySelectorAll(`meta[${HELMET_ATTRIBUTE}]`);\n          const existingTags = Array.prototype.slice.call(tagNodes);\n          expect(existingTags).to.be.empty;\n          done();\n        });\n      });","file":"HelmetDeclarativeTest.js","skipped":false,"dir":"test"},{"name":"updates link tags","suites":["Helmet - Declarative API","api","link tags"],"updatePoint":{"line":883,"column":27,"index":44469},"line":883,"code":"      it(\"updates link tags\", done => {\n        ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, null, /*#__PURE__*/React.createElement(\"link\", {\n          href: \"http://localhost/helmet\",\n          rel: \"canonical\"\n        }), /*#__PURE__*/React.createElement(\"link\", {\n          href: \"http://localhost/style.css\",\n          rel: \"stylesheet\",\n          type: \"text/css\"\n        })), container);\n        requestAnimationFrame(() => {\n          const tagNodes = headElement.querySelectorAll(`link[${HELMET_ATTRIBUTE}]`);\n          const existingTags = Array.prototype.slice.call(tagNodes);\n          expect(existingTags).to.not.equal(undefined);\n          const filteredTags = [].slice.call(existingTags).filter(tag => {\n            return tag.getAttribute(\"href\") === \"http://localhost/style.css\" && tag.getAttribute(\"rel\") === \"stylesheet\" && tag.getAttribute(\"type\") === \"text/css\" || tag.getAttribute(\"href\") === \"http://localhost/helmet\" && tag.getAttribute(\"rel\") === \"canonical\";\n          });\n          expect(filteredTags.length).to.be.at.least(2);\n          done();\n        });\n      });","file":"HelmetDeclarativeTest.js","skipped":false,"dir":"test"},{"name":"clears all link tags if none are specified","suites":["Helmet - Declarative API","api","link tags"],"updatePoint":{"line":903,"column":52,"index":45602},"line":903,"code":"      it(\"clears all link tags if none are specified\", done => {\n        ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, null, /*#__PURE__*/React.createElement(\"link\", {\n          href: \"http://localhost/helmet\",\n          rel: \"canonical\"\n        })), container);\n        requestAnimationFrame(() => {\n          ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, null), container);\n          requestAnimationFrame(() => {\n            const tagNodes = headElement.querySelectorAll(`link[${HELMET_ATTRIBUTE}]`);\n            const existingTags = Array.prototype.slice.call(tagNodes);\n            expect(existingTags).to.not.equal(undefined);\n            expect(existingTags.length).to.equal(0);\n            done();\n          });\n        });\n      });","file":"HelmetDeclarativeTest.js","skipped":false,"dir":"test"},{"name":"tags without 'href' or 'rel' are not accepted, even if they are valid for other tags","suites":["Helmet - Declarative API","api","link tags"],"updatePoint":{"line":919,"column":94,"index":46410},"line":919,"code":"      it(\"tags without 'href' or 'rel' are not accepted, even if they are valid for other tags\", done => {\n        ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, null, /*#__PURE__*/React.createElement(\"link\", {\n          httpEquiv: \"won't work\"\n        })), container);\n        requestAnimationFrame(() => {\n          const tagNodes = headElement.querySelectorAll(`link[${HELMET_ATTRIBUTE}]`);\n          const existingTags = Array.prototype.slice.call(tagNodes);\n          expect(existingTags).to.not.equal(undefined);\n          expect(existingTags.length).to.equal(0);\n          done();\n        });\n      });","file":"HelmetDeclarativeTest.js","skipped":false,"dir":"test"},{"name":"tags 'rel' and 'href' properly use 'rel' as the primary identification for this tag, regardless of ordering","suites":["Helmet - Declarative API","api","link tags"],"updatePoint":{"line":931,"column":117,"index":47054},"line":931,"code":"      it(\"tags 'rel' and 'href' properly use 'rel' as the primary identification for this tag, regardless of ordering\", done => {\n        ReactDOM.render( /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(Helmet, null, /*#__PURE__*/React.createElement(\"link\", {\n          href: \"http://localhost/helmet\",\n          rel: \"canonical\"\n        })), /*#__PURE__*/React.createElement(Helmet, null, /*#__PURE__*/React.createElement(\"link\", {\n          rel: \"canonical\",\n          href: \"http://localhost/helmet/new\"\n        })), /*#__PURE__*/React.createElement(Helmet, null, /*#__PURE__*/React.createElement(\"link\", {\n          href: \"http://localhost/helmet/newest\",\n          rel: \"canonical\"\n        }))), container);\n        requestAnimationFrame(() => {\n          const tagNodes = headElement.querySelectorAll(`link[${HELMET_ATTRIBUTE}]`);\n          const existingTags = Array.prototype.slice.call(tagNodes);\n          const firstTag = existingTags[0];\n          expect(existingTags).to.not.equal(undefined);\n          expect(existingTags.length).to.equal(1);\n          expect(existingTags).to.have.deep.property(\"[0]\").that.is.an.instanceof(Element);\n          expect(firstTag).to.have.property(\"getAttribute\");\n          expect(firstTag.getAttribute(\"rel\")).to.equal(\"canonical\");\n          expect(firstTag.getAttribute(\"href\")).to.equal(\"http://localhost/helmet/newest\");\n          expect(firstTag.outerHTML).to.equal(`<link href=\"http://localhost/helmet/newest\" rel=\"canonical\" ${HELMET_ATTRIBUTE}=\"true\">`);\n          done();\n        });\n      });","file":"HelmetDeclarativeTest.js","skipped":false,"dir":"test"},{"name":"tags with rel='stylesheet' uses the href as the primary identification of the tag, regardless of ordering","suites":["Helmet - Declarative API","api","link tags"],"updatePoint":{"line":956,"column":115,"index":48633},"line":956,"code":"      it(\"tags with rel='stylesheet' uses the href as the primary identification of the tag, regardless of ordering\", done => {\n        ReactDOM.render( /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(Helmet, null, /*#__PURE__*/React.createElement(\"link\", {\n          href: \"http://localhost/style.css\",\n          rel: \"stylesheet\",\n          type: \"text/css\",\n          media: \"all\"\n        })), /*#__PURE__*/React.createElement(Helmet, null, /*#__PURE__*/React.createElement(\"link\", {\n          rel: \"stylesheet\",\n          href: \"http://localhost/inner.css\",\n          type: \"text/css\",\n          media: \"all\"\n        }))), container);\n        requestAnimationFrame(() => {\n          const tagNodes = headElement.querySelectorAll(`link[${HELMET_ATTRIBUTE}]`);\n          const existingTags = Array.prototype.slice.call(tagNodes);\n          const firstTag = existingTags[0];\n          const secondTag = existingTags[1];\n          expect(existingTags).to.not.equal(undefined);\n          expect(existingTags.length).to.equal(2);\n          expect(existingTags).to.have.deep.property(\"[0]\").that.is.an.instanceof(Element);\n          expect(firstTag).to.have.property(\"getAttribute\");\n          expect(firstTag.getAttribute(\"href\")).to.equal(\"http://localhost/style.css\");\n          expect(firstTag.getAttribute(\"rel\")).to.equal(\"stylesheet\");\n          expect(firstTag.getAttribute(\"type\")).to.equal(\"text/css\");\n          expect(firstTag.getAttribute(\"media\")).to.equal(\"all\");\n          expect(firstTag.outerHTML).to.equal(`<link href=\"http://localhost/style.css\" rel=\"stylesheet\" type=\"text/css\" media=\"all\" ${HELMET_ATTRIBUTE}=\"true\">`);\n          expect(existingTags).to.have.deep.property(\"[1]\").that.is.an.instanceof(Element);\n          expect(secondTag).to.have.property(\"getAttribute\");\n          expect(secondTag.getAttribute(\"rel\")).to.equal(\"stylesheet\");\n          expect(secondTag.getAttribute(\"href\")).to.equal(\"http://localhost/inner.css\");\n          expect(secondTag.getAttribute(\"type\")).to.equal(\"text/css\");\n          expect(secondTag.getAttribute(\"media\")).to.equal(\"all\");\n          expect(secondTag.outerHTML).to.equal(`<link rel=\"stylesheet\" href=\"http://localhost/inner.css\" type=\"text/css\" media=\"all\" ${HELMET_ATTRIBUTE}=\"true\">`);\n          done();\n        });\n      });","file":"HelmetDeclarativeTest.js","skipped":false,"dir":"test"},{"name":"sets link tags based on deepest nested component","suites":["Helmet - Declarative API","api","link tags"],"updatePoint":{"line":992,"column":58,"index":50903},"line":992,"code":"      it(\"sets link tags based on deepest nested component\", done => {\n        ReactDOM.render( /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(Helmet, null, /*#__PURE__*/React.createElement(\"link\", {\n          rel: \"canonical\",\n          href: \"http://localhost/helmet\"\n        }), /*#__PURE__*/React.createElement(\"link\", {\n          href: \"http://localhost/style.css\",\n          rel: \"stylesheet\",\n          type: \"text/css\",\n          media: \"all\"\n        })), /*#__PURE__*/React.createElement(Helmet, null, /*#__PURE__*/React.createElement(\"link\", {\n          rel: \"canonical\",\n          href: \"http://localhost/helmet/innercomponent\"\n        }), /*#__PURE__*/React.createElement(\"link\", {\n          href: \"http://localhost/inner.css\",\n          rel: \"stylesheet\",\n          type: \"text/css\",\n          media: \"all\"\n        }))), container);\n        requestAnimationFrame(() => {\n          const tagNodes = headElement.querySelectorAll(`link[${HELMET_ATTRIBUTE}]`);\n          const existingTags = Array.prototype.slice.call(tagNodes);\n          const firstTag = existingTags[0];\n          const secondTag = existingTags[1];\n          const thirdTag = existingTags[2];\n          expect(existingTags).to.not.equal(undefined);\n          expect(existingTags.length).to.be.at.least(2);\n          expect(existingTags).to.have.deep.property(\"[0]\").that.is.an.instanceof(Element);\n          expect(firstTag).to.have.property(\"getAttribute\");\n          expect(firstTag.getAttribute(\"href\")).to.equal(\"http://localhost/style.css\");\n          expect(firstTag.getAttribute(\"rel\")).to.equal(\"stylesheet\");\n          expect(firstTag.getAttribute(\"type\")).to.equal(\"text/css\");\n          expect(firstTag.getAttribute(\"media\")).to.equal(\"all\");\n          expect(firstTag.outerHTML).to.equal(`<link href=\"http://localhost/style.css\" rel=\"stylesheet\" type=\"text/css\" media=\"all\" ${HELMET_ATTRIBUTE}=\"true\">`);\n          expect(existingTags).to.have.deep.property(\"[1]\").that.is.an.instanceof(Element);\n          expect(secondTag).to.have.property(\"getAttribute\");\n          expect(secondTag.getAttribute(\"href\")).to.equal(\"http://localhost/helmet/innercomponent\");\n          expect(secondTag.getAttribute(\"rel\")).to.equal(\"canonical\");\n          expect(secondTag.outerHTML).to.equal(`<link rel=\"canonical\" href=\"http://localhost/helmet/innercomponent\" ${HELMET_ATTRIBUTE}=\"true\">`);\n          expect(existingTags).to.have.deep.property(\"[2]\").that.is.an.instanceof(Element);\n          expect(thirdTag).to.have.property(\"getAttribute\");\n          expect(thirdTag.getAttribute(\"href\")).to.equal(\"http://localhost/inner.css\");\n          expect(thirdTag.getAttribute(\"rel\")).to.equal(\"stylesheet\");\n          expect(thirdTag.getAttribute(\"type\")).to.equal(\"text/css\");\n          expect(thirdTag.getAttribute(\"media\")).to.equal(\"all\");\n          expect(thirdTag.outerHTML).to.equal(`<link href=\"http://localhost/inner.css\" rel=\"stylesheet\" type=\"text/css\" media=\"all\" ${HELMET_ATTRIBUTE}=\"true\">`);\n          done();\n        });\n      });","file":"HelmetDeclarativeTest.js","skipped":false,"dir":"test"},{"name":"allows duplicate link tags if specified in the same component","suites":["Helmet - Declarative API","api","link tags"],"updatePoint":{"line":1040,"column":71,"index":53968},"line":1040,"code":"      it(\"allows duplicate link tags if specified in the same component\", done => {\n        ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, null, /*#__PURE__*/React.createElement(\"link\", {\n          rel: \"canonical\",\n          href: \"http://localhost/helmet\"\n        }), /*#__PURE__*/React.createElement(\"link\", {\n          rel: \"canonical\",\n          href: \"http://localhost/helmet/component\"\n        })), container);\n        requestAnimationFrame(() => {\n          const tagNodes = headElement.querySelectorAll(`link[${HELMET_ATTRIBUTE}]`);\n          const existingTags = Array.prototype.slice.call(tagNodes);\n          const firstTag = existingTags[0];\n          const secondTag = existingTags[1];\n          expect(existingTags).to.not.equal(undefined);\n          expect(existingTags.length).to.be.at.least(2);\n          expect(existingTags).to.have.deep.property(\"[0]\").that.is.an.instanceof(Element);\n          expect(firstTag).to.have.property(\"getAttribute\");\n          expect(firstTag.getAttribute(\"rel\")).to.equal(\"canonical\");\n          expect(firstTag.getAttribute(\"href\")).to.equal(\"http://localhost/helmet\");\n          expect(firstTag.outerHTML).to.equal(`<link rel=\"canonical\" href=\"http://localhost/helmet\" ${HELMET_ATTRIBUTE}=\"true\">`);\n          expect(existingTags).to.have.deep.property(\"[1]\").that.is.an.instanceof(Element);\n          expect(secondTag).to.have.property(\"getAttribute\");\n          expect(secondTag.getAttribute(\"rel\")).to.equal(\"canonical\");\n          expect(secondTag.getAttribute(\"href\")).to.equal(\"http://localhost/helmet/component\");\n          expect(secondTag.outerHTML).to.equal(`<link rel=\"canonical\" href=\"http://localhost/helmet/component\" ${HELMET_ATTRIBUTE}=\"true\">`);\n          done();\n        });\n      });","file":"HelmetDeclarativeTest.js","skipped":false,"dir":"test"},{"name":"overrides duplicate link tags with a single link tag in a nested component","suites":["Helmet - Declarative API","api","link tags"],"updatePoint":{"line":1068,"column":84,"index":55747},"line":1068,"code":"      it(\"overrides duplicate link tags with a single link tag in a nested component\", done => {\n        ReactDOM.render( /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(Helmet, null, /*#__PURE__*/React.createElement(\"link\", {\n          rel: \"canonical\",\n          href: \"http://localhost/helmet\"\n        }), /*#__PURE__*/React.createElement(\"link\", {\n          rel: \"canonical\",\n          href: \"http://localhost/helmet/component\"\n        })), /*#__PURE__*/React.createElement(Helmet, null, /*#__PURE__*/React.createElement(\"link\", {\n          rel: \"canonical\",\n          href: \"http://localhost/helmet/innercomponent\"\n        }))), container);\n        requestAnimationFrame(() => {\n          const tagNodes = headElement.querySelectorAll(`link[${HELMET_ATTRIBUTE}]`);\n          const existingTags = Array.prototype.slice.call(tagNodes);\n          const firstTag = existingTags[0];\n          expect(existingTags).to.not.equal(undefined);\n          expect(existingTags.length).to.be.equal(1);\n          expect(existingTags).to.have.deep.property(\"[0]\").that.is.an.instanceof(Element);\n          expect(firstTag).to.have.property(\"getAttribute\");\n          expect(firstTag.getAttribute(\"rel\")).to.equal(\"canonical\");\n          expect(firstTag.getAttribute(\"href\")).to.equal(\"http://localhost/helmet/innercomponent\");\n          expect(firstTag.outerHTML).to.equal(`<link rel=\"canonical\" href=\"http://localhost/helmet/innercomponent\" ${HELMET_ATTRIBUTE}=\"true\">`);\n          done();\n        });\n      });","file":"HelmetDeclarativeTest.js","skipped":false,"dir":"test"},{"name":"overrides single link tag with duplicate link tags in a nested component","suites":["Helmet - Declarative API","api","link tags"],"updatePoint":{"line":1093,"column":82,"index":57278},"line":1093,"code":"      it(\"overrides single link tag with duplicate link tags in a nested component\", done => {\n        ReactDOM.render( /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(Helmet, null, /*#__PURE__*/React.createElement(\"link\", {\n          rel: \"canonical\",\n          href: \"http://localhost/helmet\"\n        })), /*#__PURE__*/React.createElement(Helmet, null, /*#__PURE__*/React.createElement(\"link\", {\n          rel: \"canonical\",\n          href: \"http://localhost/helmet/component\"\n        }), /*#__PURE__*/React.createElement(\"link\", {\n          rel: \"canonical\",\n          href: \"http://localhost/helmet/innercomponent\"\n        }))), container);\n        requestAnimationFrame(() => {\n          const tagNodes = headElement.querySelectorAll(`link[${HELMET_ATTRIBUTE}]`);\n          const existingTags = Array.prototype.slice.call(tagNodes);\n          const firstTag = existingTags[0];\n          const secondTag = existingTags[1];\n          expect(existingTags).to.not.equal(undefined);\n          expect(existingTags.length).to.be.equal(2);\n          expect(existingTags).to.have.deep.property(\"[0]\").that.is.an.instanceof(Element);\n          expect(firstTag).to.have.property(\"getAttribute\");\n          expect(firstTag.getAttribute(\"rel\")).to.equal(\"canonical\");\n          expect(firstTag.getAttribute(\"href\")).to.equal(\"http://localhost/helmet/component\");\n          expect(firstTag.outerHTML).to.equal(`<link rel=\"canonical\" href=\"http://localhost/helmet/component\" ${HELMET_ATTRIBUTE}=\"true\">`);\n          expect(existingTags).to.have.deep.property(\"[1]\").that.is.an.instanceof(Element);\n          expect(secondTag).to.have.property(\"getAttribute\");\n          expect(secondTag.getAttribute(\"rel\")).to.equal(\"canonical\");\n          expect(secondTag.getAttribute(\"href\")).to.equal(\"http://localhost/helmet/innercomponent\");\n          expect(secondTag.outerHTML).to.equal(`<link rel=\"canonical\" href=\"http://localhost/helmet/innercomponent\" ${HELMET_ATTRIBUTE}=\"true\">`);\n          done();\n        });\n      });","file":"HelmetDeclarativeTest.js","skipped":false,"dir":"test"},{"name":"does not render tag when primary attribute is null","suites":["Helmet - Declarative API","api","link tags"],"updatePoint":{"line":1124,"column":60,"index":59295},"line":1124,"code":"      it(\"does not render tag when primary attribute is null\", done => {\n        ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, null, /*#__PURE__*/React.createElement(\"link\", {\n          rel: \"icon\",\n          sizes: \"192x192\",\n          href: null\n        }), /*#__PURE__*/React.createElement(\"link\", {\n          rel: \"canonical\",\n          href: \"http://localhost/helmet/component\"\n        })), container);\n        requestAnimationFrame(() => {\n          const tagNodes = headElement.querySelectorAll(`link[${HELMET_ATTRIBUTE}]`);\n          const existingTags = Array.prototype.slice.call(tagNodes);\n          const firstTag = existingTags[0];\n          expect(existingTags).to.not.equal(undefined);\n          expect(existingTags.length).to.be.equal(1);\n          expect(existingTags).to.have.deep.property(\"[0]\").that.is.an.instanceof(Element);\n          expect(firstTag).to.have.property(\"getAttribute\");\n          expect(firstTag.getAttribute(\"rel\")).to.equal(\"canonical\");\n          expect(firstTag.getAttribute(\"href\")).to.equal(\"http://localhost/helmet/component\");\n          expect(firstTag.outerHTML).to.equal(`<link rel=\"canonical\" href=\"http://localhost/helmet/component\" ${HELMET_ATTRIBUTE}=\"true\">`);\n          done();\n        });\n      });","file":"HelmetDeclarativeTest.js","skipped":false,"dir":"test"},{"name":"updates script tags","suites":["Helmet - Declarative API","api","script tags"],"updatePoint":{"line":1149,"column":29,"index":60574},"line":1149,"code":"      it(\"updates script tags\", done => {\n        const scriptInnerHTML = `\n                  {\n                    \"@context\": \"http://schema.org\",\n                    \"@type\": \"NewsArticle\",\n                    \"url\": \"http://localhost/helmet\"\n                  }\n                `;\n        ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, null, /*#__PURE__*/React.createElement(\"script\", {\n          src: \"http://localhost/test.js\",\n          type: \"text/javascript\"\n        }), /*#__PURE__*/React.createElement(\"script\", {\n          src: \"http://localhost/test2.js\",\n          type: \"text/javascript\"\n        }), /*#__PURE__*/React.createElement(\"script\", {\n          type: \"application/ld+json\"\n        }, scriptInnerHTML)), container);\n        requestAnimationFrame(() => {\n          const existingTags = headElement.getElementsByTagName(\"script\");\n          expect(existingTags).to.not.equal(undefined);\n          const filteredTags = [].slice.call(existingTags).filter(tag => {\n            return tag.getAttribute(\"src\") === \"http://localhost/test.js\" && tag.getAttribute(\"type\") === \"text/javascript\" || tag.getAttribute(\"src\") === \"http://localhost/test2.js\" && tag.getAttribute(\"type\") === \"text/javascript\" || tag.getAttribute(\"type\") === \"application/ld+json\" && tag.innerHTML === scriptInnerHTML;\n          });\n          expect(filteredTags.length).to.be.at.least(3);\n          done();\n        });\n      });","file":"HelmetDeclarativeTest.js","skipped":false,"dir":"test"},{"name":"clears all scripts tags if none are specified","suites":["Helmet - Declarative API","api","script tags"],"updatePoint":{"line":1176,"column":55,"index":62031},"line":1176,"code":"      it(\"clears all scripts tags if none are specified\", done => {\n        ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, null, /*#__PURE__*/React.createElement(\"script\", {\n          src: \"http://localhost/test.js\",\n          type: \"text/javascript\"\n        })), container);\n        requestAnimationFrame(() => {\n          ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, null), container);\n          requestAnimationFrame(() => {\n            const existingTags = headElement.querySelectorAll(`script[${HELMET_ATTRIBUTE}]`);\n            expect(existingTags).to.not.equal(undefined);\n            expect(existingTags.length).to.equal(0);\n            done();\n          });\n        });\n      });","file":"HelmetDeclarativeTest.js","skipped":false,"dir":"test"},{"name":"tags without 'src' are not accepted","suites":["Helmet - Declarative API","api","script tags"],"updatePoint":{"line":1191,"column":45,"index":62734},"line":1191,"code":"      it(\"tags without 'src' are not accepted\", done => {\n        ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, null, /*#__PURE__*/React.createElement(\"script\", {\n          property: \"won't work\"\n        })), container);\n        requestAnimationFrame(() => {\n          const existingTags = headElement.querySelectorAll(`script[${HELMET_ATTRIBUTE}]`);\n          expect(existingTags).to.not.equal(undefined);\n          expect(existingTags.length).to.equal(0);\n          done();\n        });\n      });","file":"HelmetDeclarativeTest.js","skipped":false,"dir":"test"},{"name":"sets script tags based on deepest nested component","suites":["Helmet - Declarative API","api","script tags"],"updatePoint":{"line":1202,"column":60,"index":63259},"line":1202,"code":"      it(\"sets script tags based on deepest nested component\", done => {\n        ReactDOM.render( /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(Helmet, null, /*#__PURE__*/React.createElement(\"script\", {\n          src: \"http://localhost/test.js\",\n          type: \"text/javascript\"\n        }), /*#__PURE__*/React.createElement(\"script\", {\n          src: \"http://localhost/test2.js\",\n          type: \"text/javascript\"\n        }))), container);\n        requestAnimationFrame(() => {\n          const tagNodes = headElement.querySelectorAll(`script[${HELMET_ATTRIBUTE}]`);\n          const existingTags = Array.prototype.slice.call(tagNodes);\n          const firstTag = existingTags[0];\n          const secondTag = existingTags[1];\n          expect(existingTags).to.not.equal(undefined);\n          expect(existingTags.length).to.be.at.least(2);\n          expect(existingTags).to.have.deep.property(\"[0]\").that.is.an.instanceof(Element);\n          expect(firstTag).to.have.property(\"getAttribute\");\n          expect(firstTag.getAttribute(\"src\")).to.equal(\"http://localhost/test.js\");\n          expect(firstTag.getAttribute(\"type\")).to.equal(\"text/javascript\");\n          expect(firstTag.outerHTML).to.equal(`<script src=\"http://localhost/test.js\" type=\"text/javascript\" ${HELMET_ATTRIBUTE}=\"true\"></script>`);\n          expect(existingTags).to.have.deep.property(\"[1]\").that.is.an.instanceof(Element);\n          expect(secondTag).to.have.property(\"getAttribute\");\n          expect(secondTag.getAttribute(\"src\")).to.equal(\"http://localhost/test2.js\");\n          expect(secondTag.getAttribute(\"type\")).to.equal(\"text/javascript\");\n          expect(secondTag.outerHTML).to.equal(`<script src=\"http://localhost/test2.js\" type=\"text/javascript\" ${HELMET_ATTRIBUTE}=\"true\"></script>`);\n          done();\n        });\n      });","file":"HelmetDeclarativeTest.js","skipped":false,"dir":"test"},{"name":"sets undefined attribute values to empty strings","suites":["Helmet - Declarative API","api","script tags"],"updatePoint":{"line":1230,"column":58,"index":65102},"line":1230,"code":"      it(\"sets undefined attribute values to empty strings\", done => {\n        ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, null, /*#__PURE__*/React.createElement(\"script\", {\n          src: \"foo.js\",\n          async: undefined\n        })), container);\n        requestAnimationFrame(() => {\n          const existingTag = headElement.querySelector(`script[${HELMET_ATTRIBUTE}]`);\n          expect(existingTag).to.not.equal(undefined);\n          expect(existingTag.outerHTML).to.be.a(\"string\").that.equals(`<script src=\"foo.js\" async=\"\" ${HELMET_ATTRIBUTE}=\"true\"></script>`);\n          done();\n        });\n      });","file":"HelmetDeclarativeTest.js","skipped":false,"dir":"test"},{"name":"does not render tag when primary attribute (src) is null","suites":["Helmet - Declarative API","api","script tags"],"updatePoint":{"line":1242,"column":66,"index":65737},"line":1242,"code":"      it(\"does not render tag when primary attribute (src) is null\", done => {\n        ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, null, /*#__PURE__*/React.createElement(\"script\", {\n          src: undefined,\n          type: \"text/javascript\"\n        })), container);\n        requestAnimationFrame(() => {\n          const tagNodes = headElement.querySelectorAll(`script[${HELMET_ATTRIBUTE}]`);\n          const existingTags = Array.prototype.slice.call(tagNodes);\n          expect(existingTags).to.be.empty;\n          done();\n        });\n      });","file":"HelmetDeclarativeTest.js","skipped":false,"dir":"test"},{"name":"does not render tag when primary attribute (innerHTML) is null","suites":["Helmet - Declarative API","api","script tags"],"updatePoint":{"line":1254,"column":72,"index":66303},"line":1254,"code":"      it(\"does not render tag when primary attribute (innerHTML) is null\", done => {\n        ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, null, /*#__PURE__*/React.createElement(\"script\", {\n          innerHTML: undefined\n        })), container);\n        requestAnimationFrame(() => {\n          const tagNodes = headElement.querySelectorAll(`script[${HELMET_ATTRIBUTE}]`);\n          const existingTags = Array.prototype.slice.call(tagNodes);\n          expect(existingTags).to.be.empty;\n          done();\n        });\n      });","file":"HelmetDeclarativeTest.js","skipped":false,"dir":"test"},{"name":"updates noscript tags","suites":["Helmet - Declarative API","api","noscript tags"],"updatePoint":{"line":1267,"column":31,"index":66845},"line":1267,"code":"      it(\"updates noscript tags\", done => {\n        const noscriptInnerHTML = `<link rel=\"stylesheet\" type=\"text/css\" href=\"foo.css\" />`;\n        ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, null, /*#__PURE__*/React.createElement(\"noscript\", {\n          id: \"bar\"\n        }, noscriptInnerHTML)), container);\n        requestAnimationFrame(() => {\n          const existingTags = headElement.getElementsByTagName(\"noscript\");\n          expect(existingTags).to.not.equal(undefined);\n          expect(existingTags.length).to.equal(1);\n          expect(existingTags[0].innerHTML === noscriptInnerHTML && existingTags[0].id === \"bar\");\n          done();\n        });\n      });","file":"HelmetDeclarativeTest.js","skipped":false,"dir":"test"},{"name":"clears all noscripts tags if none are specified","suites":["Helmet - Declarative API","api","noscript tags"],"updatePoint":{"line":1280,"column":57,"index":67553},"line":1280,"code":"      it(\"clears all noscripts tags if none are specified\", done => {\n        ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, null, /*#__PURE__*/React.createElement(\"noscript\", {\n          id: \"bar\"\n        })), container);\n        requestAnimationFrame(() => {\n          ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, null), container);\n          requestAnimationFrame(() => {\n            const existingTags = headElement.querySelectorAll(`script[${HELMET_ATTRIBUTE}]`);\n            expect(existingTags).to.not.equal(undefined);\n            expect(existingTags.length).to.equal(0);\n            done();\n          });\n        });\n      });","file":"HelmetDeclarativeTest.js","skipped":false,"dir":"test"},{"name":"tags without 'innerHTML' are not accepted","suites":["Helmet - Declarative API","api","noscript tags"],"updatePoint":{"line":1294,"column":51,"index":68207},"line":1294,"code":"      it(\"tags without 'innerHTML' are not accepted\", done => {\n        ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, null, /*#__PURE__*/React.createElement(\"noscript\", {\n          property: \"won't work\"\n        })), container);\n        requestAnimationFrame(() => {\n          const existingTags = headElement.querySelectorAll(`noscript[${HELMET_ATTRIBUTE}]`);\n          expect(existingTags).to.not.equal(undefined);\n          expect(existingTags.length).to.equal(0);\n          done();\n        });\n      });","file":"HelmetDeclarativeTest.js","skipped":false,"dir":"test"},{"name":"does not render tag when primary attribute is null","suites":["Helmet - Declarative API","api","noscript tags"],"updatePoint":{"line":1305,"column":60,"index":68736},"line":1305,"code":"      it(\"does not render tag when primary attribute is null\", done => {\n        ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, null, /*#__PURE__*/React.createElement(\"noscript\", null, undefined)), container);\n        requestAnimationFrame(() => {\n          const tagNodes = headElement.querySelectorAll(`noscript[${HELMET_ATTRIBUTE}]`);\n          const existingTags = Array.prototype.slice.call(tagNodes);\n          expect(existingTags).to.be.empty;\n          done();\n        });\n      });","file":"HelmetDeclarativeTest.js","skipped":false,"dir":"test"},{"name":"updates style tags","suites":["Helmet - Declarative API","api","style tags"],"updatePoint":{"line":1316,"column":28,"index":69249},"line":1316,"code":"      it(\"updates style tags\", done => {\n        const cssText1 = `\n                    body {\n                        background-color: green;\n                    }\n                `;\n        const cssText2 = `\n                    p {\n                        font-size: 12px;\n                    }\n                `;\n        ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, null, /*#__PURE__*/React.createElement(\"style\", {\n          type: \"text/css\"\n        }, cssText1), /*#__PURE__*/React.createElement(\"style\", null, cssText2)), container);\n        requestAnimationFrame(() => {\n          const tagNodes = headElement.querySelectorAll(`style[${HELMET_ATTRIBUTE}]`);\n          const existingTags = Array.prototype.slice.call(tagNodes);\n          const [firstTag, secondTag] = existingTags;\n          expect(existingTags).to.not.equal(undefined);\n          expect(existingTags.length).to.be.equal(2);\n          expect(existingTags).to.have.deep.property(\"[0]\").that.is.an.instanceof(Element);\n          expect(firstTag).to.have.property(\"getAttribute\");\n          expect(firstTag.getAttribute(\"type\")).to.equal(\"text/css\");\n          expect(firstTag.innerHTML).to.equal(cssText1);\n          expect(firstTag.outerHTML).to.equal(`<style type=\"text/css\" ${HELMET_ATTRIBUTE}=\"true\">${cssText1}</style>`);\n          expect(existingTags).to.have.deep.property(\"[1]\").that.is.an.instanceof(Element);\n          expect(secondTag.innerHTML).to.equal(cssText2);\n          expect(secondTag.outerHTML).to.equal(`<style ${HELMET_ATTRIBUTE}=\"true\">${cssText2}</style>`);\n          done();\n        });\n      });","file":"HelmetDeclarativeTest.js","skipped":false,"dir":"test"},{"name":"clears all style tags if none are specified","suites":["Helmet - Declarative API","api","style tags"],"updatePoint":{"line":1347,"column":53,"index":70882},"line":1347,"code":"      it(\"clears all style tags if none are specified\", done => {\n        const cssText = `\n                    body {\n                        background-color: green;\n                    }\n                `;\n        ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, null, /*#__PURE__*/React.createElement(\"style\", {\n          type: \"text/css\"\n        }, cssText)), container);\n        requestAnimationFrame(() => {\n          ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, null), container);\n          requestAnimationFrame(() => {\n            const existingTags = headElement.querySelectorAll(`style[${HELMET_ATTRIBUTE}]`);\n            expect(existingTags).to.not.equal(undefined);\n            expect(existingTags.length).to.equal(0);\n            done();\n          });\n        });\n      });","file":"HelmetDeclarativeTest.js","skipped":false,"dir":"test"},{"name":"tags without 'cssText' are not accepted","suites":["Helmet - Declarative API","api","style tags"],"updatePoint":{"line":1366,"column":49,"index":71689},"line":1366,"code":"      it(\"tags without 'cssText' are not accepted\", done => {\n        ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, null, /*#__PURE__*/React.createElement(\"style\", {\n          property: \"won't work\"\n        })), container);\n        requestAnimationFrame(() => {\n          const existingTags = headElement.querySelectorAll(`style[${HELMET_ATTRIBUTE}]`);\n          expect(existingTags).to.not.equal(undefined);\n          expect(existingTags.length).to.equal(0);\n          done();\n        });\n      });","file":"HelmetDeclarativeTest.js","skipped":false,"dir":"test"},{"name":"does not render tag when primary attribute is null","suites":["Helmet - Declarative API","api","style tags"],"updatePoint":{"line":1377,"column":60,"index":72212},"line":1377,"code":"      it(\"does not render tag when primary attribute is null\", done => {\n        ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, null, /*#__PURE__*/React.createElement(\"style\", null, undefined)), container);\n        requestAnimationFrame(() => {\n          const tagNodes = headElement.querySelectorAll(`style[${HELMET_ATTRIBUTE}]`);\n          const existingTags = Array.prototype.slice.call(tagNodes);\n          expect(existingTags).to.be.empty;\n          done();\n        });\n      });","file":"HelmetDeclarativeTest.js","skipped":false,"dir":"test"},{"name":"executes synchronously when defer={true} and async otherwise","suites":["Helmet - Declarative API","deferred tags"],"updatePoint":{"line":1395,"column":68,"index":72892},"line":1395,"code":"    it(\"executes synchronously when defer={true} and async otherwise\", done => {\n      ReactDOM.render( /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(Helmet, {\n        defer: false\n      }, /*#__PURE__*/React.createElement(\"script\", null, \"window.__spy__(1)\")), /*#__PURE__*/React.createElement(Helmet, null, /*#__PURE__*/React.createElement(\"script\", null, \"window.__spy__(2)\"))), container);\n      expect(window.__spy__.callCount).to.equal(1);\n      requestAnimationFrame(() => {\n        expect(window.__spy__.callCount).to.equal(2);\n        expect(window.__spy__.args).to.deep.equal([[1], [2]]);\n        done();\n      });\n    });","file":"HelmetDeclarativeTest.js","skipped":false,"dir":"test"},{"name":"provides initial values if no state is found","suites":["Helmet - Declarative API","server"],"updatePoint":{"line":1427,"column":52,"index":76755},"line":1427,"code":"    it(\"provides initial values if no state is found\", () => {\n      let head = Helmet.rewind();\n      head = Helmet.rewind();\n      expect(head.meta).to.exist;\n      expect(head.meta).to.respondTo(\"toString\");\n      expect(head.meta.toString()).to.equal(\"\");\n    });","file":"HelmetDeclarativeTest.js","skipped":false,"dir":"test"},{"name":"encodes special characters in title","suites":["Helmet - Declarative API","server"],"updatePoint":{"line":1434,"column":43,"index":77014},"line":1434,"code":"    it(\"encodes special characters in title\", () => {\n      ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, null, /*#__PURE__*/React.createElement(\"title\", null, `Dangerous <script> include`)), container);\n      const head = Helmet.rewind();\n      expect(head.title).to.exist;\n      expect(head.title).to.respondTo(\"toString\");\n      expect(head.title.toString()).to.equal(stringifiedTitle);\n    });","file":"HelmetDeclarativeTest.js","skipped":false,"dir":"test"},{"name":"opts out of string encoding","suites":["Helmet - Declarative API","server"],"updatePoint":{"line":1441,"column":35,"index":77416},"line":1441,"code":"    it(\"opts out of string encoding\", () => {\n      ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, {\n        encodeSpecialCharacters: false\n      }, /*#__PURE__*/React.createElement(\"title\", null, \"This is text and & and '.\")), container);\n      const head = Helmet.rewind();\n      expect(head.title).to.exist;\n      expect(head.title).to.respondTo(\"toString\");\n      expect(head.title.toString()).to.equal(unEncodedStringifiedTitle);\n    });","file":"HelmetDeclarativeTest.js","skipped":false,"dir":"test"},{"name":"renders title as React component","suites":["Helmet - Declarative API","server"],"updatePoint":{"line":1450,"column":40,"index":77875},"line":1450,"code":"    it(\"renders title as React component\", () => {\n      ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, null, /*#__PURE__*/React.createElement(\"title\", null, `Dangerous <script> include`)), container);\n      const head = Helmet.rewind();\n      expect(head.title).to.exist;\n      expect(head.title).to.respondTo(\"toComponent\");\n      const titleComponent = head.title.toComponent();\n      expect(titleComponent).to.be.an(\"array\").that.has.length.of(1);\n      titleComponent.forEach(title => {\n        expect(title).to.be.an(\"object\").that.contains.property(\"type\", \"title\");\n      });\n      const markup = ReactServer.renderToStaticMarkup( /*#__PURE__*/React.createElement(\"div\", null, titleComponent));\n      expect(markup).to.be.a(\"string\").that.equals(`<div>${stringifiedTitle}</div>`);\n    });","file":"HelmetDeclarativeTest.js","skipped":false,"dir":"test"},{"name":"renders title with itemprop name as React component","suites":["Helmet - Declarative API","server"],"updatePoint":{"line":1463,"column":59,"index":78702},"line":1463,"code":"    it(\"renders title with itemprop name as React component\", () => {\n      ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, null, /*#__PURE__*/React.createElement(\"title\", {\n        itemProp: \"name\"\n      }, \"Title with Itemprop\")), container);\n      const head = Helmet.rewind();\n      expect(head.title).to.exist;\n      expect(head.title).to.respondTo(\"toComponent\");\n      const titleComponent = head.title.toComponent();\n      expect(titleComponent).to.be.an(\"array\").that.has.length.of(1);\n      titleComponent.forEach(title => {\n        expect(title).to.be.an(\"object\").that.contains.property(\"type\", \"title\");\n      });\n      const markup = ReactServer.renderToStaticMarkup( /*#__PURE__*/React.createElement(\"div\", null, titleComponent));\n      expect(markup).to.be.a(\"string\").that.equals(`<div>${stringifiedTitleWithItempropFromServer}</div>`);\n    });","file":"HelmetDeclarativeTest.js","skipped":false,"dir":"test"},{"name":"renders base tag as React component","suites":["Helmet - Declarative API","server"],"updatePoint":{"line":1478,"column":43,"index":79558},"line":1478,"code":"    it(\"renders base tag as React component\", () => {\n      ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, null, /*#__PURE__*/React.createElement(\"base\", {\n        target: \"_blank\",\n        href: \"http://localhost/\"\n      })), container);\n      const head = Helmet.rewind();\n      expect(head.base).to.exist;\n      expect(head.base).to.respondTo(\"toComponent\");\n      const baseComponent = head.base.toComponent();\n      expect(baseComponent).to.be.an(\"array\").that.has.length.of(1);\n      baseComponent.forEach(base => {\n        expect(base).to.be.an(\"object\").that.contains.property(\"type\", \"base\");\n      });\n      const markup = ReactServer.renderToStaticMarkup( /*#__PURE__*/React.createElement(\"div\", null, baseComponent));\n      expect(markup).to.be.a(\"string\").that.equals(`<div>${stringifiedBaseTag}</div>`);\n    });","file":"HelmetDeclarativeTest.js","skipped":false,"dir":"test"},{"name":"renders meta tags as React components","suites":["Helmet - Declarative API","server"],"updatePoint":{"line":1494,"column":45,"index":80397},"line":1494,"code":"    it(\"renders meta tags as React components\", () => {\n      ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, null, /*#__PURE__*/React.createElement(\"meta\", {\n        charSet: \"utf-8\"\n      }), /*#__PURE__*/React.createElement(\"meta\", {\n        name: \"description\",\n        content: \"Test description & encoding of special characters like ' \\\" > < `\"\n      }), /*#__PURE__*/React.createElement(\"meta\", {\n        httpEquiv: \"content-type\",\n        content: \"text/html\"\n      }), /*#__PURE__*/React.createElement(\"meta\", {\n        property: \"og:type\",\n        content: \"article\"\n      }), /*#__PURE__*/React.createElement(\"meta\", {\n        itemProp: \"name\",\n        content: \"Test name itemprop\"\n      })), container);\n      const head = Helmet.rewind();\n      expect(head.meta).to.exist;\n      expect(head.meta).to.respondTo(\"toComponent\");\n      const metaComponent = head.meta.toComponent();\n      expect(metaComponent).to.be.an(\"array\").that.has.length.of(5);\n      metaComponent.forEach(meta => {\n        expect(meta).to.be.an(\"object\").that.contains.property(\"type\", \"meta\");\n      });\n      const markup = ReactServer.renderToStaticMarkup( /*#__PURE__*/React.createElement(\"div\", null, metaComponent));\n      expect(markup).to.be.a(\"string\").that.equals(`<div>${stringifiedMetaTagsFromServer}</div>`);\n    });","file":"HelmetDeclarativeTest.js","skipped":false,"dir":"test"},{"name":"renders link tags as React components","suites":["Helmet - Declarative API","server"],"updatePoint":{"line":1521,"column":45,"index":81722},"line":1521,"code":"    it(\"renders link tags as React components\", () => {\n      ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, null, /*#__PURE__*/React.createElement(\"link\", {\n        href: \"http://localhost/helmet\",\n        rel: \"canonical\"\n      }), /*#__PURE__*/React.createElement(\"link\", {\n        href: \"http://localhost/style.css\",\n        rel: \"stylesheet\",\n        type: \"text/css\"\n      })), container);\n      const head = Helmet.rewind();\n      expect(head.link).to.exist;\n      expect(head.link).to.respondTo(\"toComponent\");\n      const linkComponent = head.link.toComponent();\n      expect(linkComponent).to.be.an(\"array\").that.has.length.of(2);\n      linkComponent.forEach(link => {\n        expect(link).to.be.an(\"object\").that.contains.property(\"type\", \"link\");\n      });\n      const markup = ReactServer.renderToStaticMarkup( /*#__PURE__*/React.createElement(\"div\", null, linkComponent));\n      expect(markup).to.be.a(\"string\").that.equals(`<div>${stringifiedLinkTags}</div>`);\n    });","file":"HelmetDeclarativeTest.js","skipped":false,"dir":"test"},{"name":"renders script tags as React components","suites":["Helmet - Declarative API","server"],"updatePoint":{"line":1541,"column":47,"index":82719},"line":1541,"code":"    it(\"renders script tags as React components\", () => {\n      ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, null, /*#__PURE__*/React.createElement(\"script\", {\n        src: \"http://localhost/test.js\",\n        type: \"text/javascript\"\n      }), /*#__PURE__*/React.createElement(\"script\", {\n        src: \"http://localhost/test2.js\",\n        type: \"text/javascript\"\n      })), container);\n      const head = Helmet.rewind();\n      expect(head.script).to.exist;\n      expect(head.script).to.respondTo(\"toComponent\");\n      const scriptComponent = head.script.toComponent();\n      expect(scriptComponent).to.be.an(\"array\").that.has.length.of(2);\n      scriptComponent.forEach(script => {\n        expect(script).to.be.an(\"object\").that.contains.property(\"type\", \"script\");\n      });\n      const markup = ReactServer.renderToStaticMarkup( /*#__PURE__*/React.createElement(\"div\", null, scriptComponent));\n      expect(markup).to.be.a(\"string\").that.equals(`<div>${stringifiedScriptTags}</div>`);\n    });","file":"HelmetDeclarativeTest.js","skipped":false,"dir":"test"},{"name":"renders noscript tags as React components","suites":["Helmet - Declarative API","server"],"updatePoint":{"line":1560,"column":49,"index":83729},"line":1560,"code":"    it(\"renders noscript tags as React components\", () => {\n      ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, null, /*#__PURE__*/React.createElement(\"noscript\", {\n        id: \"foo\"\n      }, `<link rel=\"stylesheet\" type=\"text/css\" href=\"/style.css\" />`), /*#__PURE__*/React.createElement(\"noscript\", {\n        id: \"bar\"\n      }, `<link rel=\"stylesheet\" type=\"text/css\" href=\"/style2.css\" />`)), container);\n      const head = Helmet.rewind();\n      expect(head.noscript).to.exist;\n      expect(head.noscript).to.respondTo(\"toComponent\");\n      const noscriptComponent = head.noscript.toComponent();\n      expect(noscriptComponent).to.be.an(\"array\").that.has.length.of(2);\n      noscriptComponent.forEach(noscript => {\n        expect(noscript).to.be.an(\"object\").that.contains.property(\"type\", \"noscript\");\n      });\n      const markup = ReactServer.renderToStaticMarkup( /*#__PURE__*/React.createElement(\"div\", null, noscriptComponent));\n      expect(markup).to.be.a(\"string\").that.equals(`<div>${stringifiedNoscriptTags}</div>`);\n    });","file":"HelmetDeclarativeTest.js","skipped":false,"dir":"test"},{"name":"renders style tags as React components","suites":["Helmet - Declarative API","server"],"updatePoint":{"line":1577,"column":46,"index":84778},"line":1577,"code":"    it(\"renders style tags as React components\", () => {\n      ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, null, /*#__PURE__*/React.createElement(\"style\", {\n        type: \"text/css\"\n      }, `body {background-color: green;}`), /*#__PURE__*/React.createElement(\"style\", {\n        type: \"text/css\"\n      }, `p {font-size: 12px;}`)), container);\n      const head = Helmet.rewind();\n      expect(head.style).to.exist;\n      expect(head.style).to.respondTo(\"toComponent\");\n      const styleComponent = head.style.toComponent();\n      expect(styleComponent).to.be.an(\"array\").that.has.length.of(2);\n      const markup = ReactServer.renderToStaticMarkup( /*#__PURE__*/React.createElement(\"div\", null, styleComponent));\n      expect(markup).to.be.a(\"string\").that.equals(`<div>${stringifiedStyleTags}</div>`);\n    });","file":"HelmetDeclarativeTest.js","skipped":false,"dir":"test"},{"name":"renders title tag as string","suites":["Helmet - Declarative API","server"],"updatePoint":{"line":1591,"column":35,"index":85591},"line":1591,"code":"    it(\"renders title tag as string\", () => {\n      ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, null, /*#__PURE__*/React.createElement(\"title\", null, \"Dangerous <script> include\")), container);\n      const head = Helmet.rewind();\n      expect(head.title).to.exist;\n      expect(head.title).to.respondTo(\"toString\");\n      expect(head.title.toString()).to.be.a(\"string\").that.equals(stringifiedTitle);\n    });","file":"HelmetDeclarativeTest.js","skipped":false,"dir":"test"},{"name":"renders title and allows children containing expressions","suites":["Helmet - Declarative API","server"],"updatePoint":{"line":1598,"column":64,"index":86043},"line":1598,"code":"    it(\"renders title and allows children containing expressions\", done => {\n      const someValue = \"Some Great Title\";\n      ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, null, /*#__PURE__*/React.createElement(\"title\", null, \"Title: \", someValue)), container);\n      const head = Helmet.rewind();\n      expect(head.title).to.exist;\n      expect(head.title).to.respondTo(\"toString\");\n      requestAnimationFrame(() => {\n        expect(head.title.toString()).to.be.a(\"string\").that.equals(stringifiedTitleWithTitleExpression);\n        done();\n      });\n    });","file":"HelmetDeclarativeTest.js","skipped":false,"dir":"test"},{"name":"renders title with itemprop name as string","suites":["Helmet - Declarative API","server"],"updatePoint":{"line":1609,"column":50,"index":86602},"line":1609,"code":"    it(\"renders title with itemprop name as string\", () => {\n      ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, null, /*#__PURE__*/React.createElement(\"title\", {\n        itemProp: \"name\"\n      }, \"Title with Itemprop\")), container);\n      const head = Helmet.rewind();\n      expect(head.title).to.exist;\n      expect(head.title).to.respondTo(\"toString\");\n      const titleString = head.title.toString();\n      expect(titleString).to.be.a(\"string\").that.equals(stringifiedTitleWithItemprop);\n    });","file":"HelmetDeclarativeTest.js","skipped":false,"dir":"test"},{"name":"renders base tags as string","suites":["Helmet - Declarative API","server"],"updatePoint":{"line":1619,"column":35,"index":87099},"line":1619,"code":"    it(\"renders base tags as string\", () => {\n      ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, null, /*#__PURE__*/React.createElement(\"base\", {\n        target: \"_blank\",\n        href: \"http://localhost/\"\n      })), container);\n      const head = Helmet.rewind();\n      expect(head.base).to.exist;\n      expect(head.base).to.respondTo(\"toString\");\n      expect(head.base.toString()).to.be.a(\"string\").that.equals(stringifiedBaseTag);\n    });","file":"HelmetDeclarativeTest.js","skipped":false,"dir":"test"},{"name":"renders meta tags as string","suites":["Helmet - Declarative API","server"],"updatePoint":{"line":1629,"column":35,"index":87555},"line":1629,"code":"    it(\"renders meta tags as string\", () => {\n      ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, null, /*#__PURE__*/React.createElement(\"meta\", {\n        charSet: \"utf-8\"\n      }), /*#__PURE__*/React.createElement(\"meta\", {\n        name: \"description\",\n        content: \"Test description & encoding of special characters like ' \\\" > < `\"\n      }), /*#__PURE__*/React.createElement(\"meta\", {\n        httpEquiv: \"content-type\",\n        content: \"text/html\"\n      }), /*#__PURE__*/React.createElement(\"meta\", {\n        property: \"og:type\",\n        content: \"article\"\n      }), /*#__PURE__*/React.createElement(\"meta\", {\n        itemProp: \"name\",\n        content: \"Test name itemprop\"\n      })), container);\n      const head = Helmet.rewind();\n      expect(head.meta).to.exist;\n      expect(head.meta).to.respondTo(\"toString\");\n      expect(head.meta.toString()).to.be.a(\"string\").that.equals(stringifiedMetaTags);\n    });","file":"HelmetDeclarativeTest.js","skipped":false,"dir":"test"},{"name":"renders link tags as string","suites":["Helmet - Declarative API","server"],"updatePoint":{"line":1650,"column":35,"index":88487},"line":1650,"code":"    it(\"renders link tags as string\", () => {\n      ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, null, /*#__PURE__*/React.createElement(\"link\", {\n        href: \"http://localhost/helmet\",\n        rel: \"canonical\"\n      }), /*#__PURE__*/React.createElement(\"link\", {\n        href: \"http://localhost/style.css\",\n        rel: \"stylesheet\",\n        type: \"text/css\"\n      })), container);\n      const head = Helmet.rewind();\n      expect(head.link).to.exist;\n      expect(head.link).to.respondTo(\"toString\");\n      expect(head.link.toString()).to.be.a(\"string\").that.equals(stringifiedLinkTags);\n    });","file":"HelmetDeclarativeTest.js","skipped":false,"dir":"test"},{"name":"renders script tags as string","suites":["Helmet - Declarative API","server"],"updatePoint":{"line":1664,"column":37,"index":89101},"line":1664,"code":"    it(\"renders script tags as string\", () => {\n      ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, null, /*#__PURE__*/React.createElement(\"script\", {\n        src: \"http://localhost/test.js\",\n        type: \"text/javascript\"\n      }), /*#__PURE__*/React.createElement(\"script\", {\n        src: \"http://localhost/test2.js\",\n        type: \"text/javascript\"\n      })), container);\n      const head = Helmet.rewind();\n      expect(head.script).to.exist;\n      expect(head.script).to.respondTo(\"toString\");\n      expect(head.script.toString()).to.be.a(\"string\").that.equals(stringifiedScriptTags);\n    });","file":"HelmetDeclarativeTest.js","skipped":false,"dir":"test"},{"name":"renders style tags as string","suites":["Helmet - Declarative API","server"],"updatePoint":{"line":1677,"column":36,"index":89711},"line":1677,"code":"    it(\"renders style tags as string\", () => {\n      ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, null, /*#__PURE__*/React.createElement(\"style\", {\n        type: \"text/css\"\n      }, `body {background-color: green;}`), /*#__PURE__*/React.createElement(\"style\", {\n        type: \"text/css\"\n      }, `p {font-size: 12px;}`)), container);\n      const head = Helmet.rewind();\n      expect(head.style).to.exist;\n      expect(head.style).to.respondTo(\"toString\");\n      expect(head.style.toString()).to.be.a(\"string\").that.equals(stringifiedStyleTags);\n    });","file":"HelmetDeclarativeTest.js","skipped":false,"dir":"test"},{"name":"renders html attributes as component","suites":["Helmet - Declarative API","server"],"updatePoint":{"line":1688,"column":44,"index":90285},"line":1688,"code":"    it(\"renders html attributes as component\", () => {\n      ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, null, /*#__PURE__*/React.createElement(\"html\", {\n        lang: \"ga\",\n        className: \"myClassName\"\n      })), container);\n      const {\n        htmlAttributes\n      } = Helmet.rewind();\n      const attrs = htmlAttributes.toComponent();\n      expect(attrs).to.exist;\n      const markup = ReactServer.renderToStaticMarkup( /*#__PURE__*/React.createElement(\"html\", _extends({\n        lang: \"en\"\n      }, attrs)));\n      expect(markup).to.be.a(\"string\").that.equals(`<html ${stringifiedHtmlAttributes}></html>`);\n    });","file":"HelmetDeclarativeTest.js","skipped":false,"dir":"test"},{"name":"renders html attributes as string","suites":["Helmet - Declarative API","server"],"updatePoint":{"line":1703,"column":41,"index":90921},"line":1703,"code":"    it(\"renders html attributes as string\", () => {\n      ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, null, /*#__PURE__*/React.createElement(\"html\", {\n        lang: \"ga\",\n        className: \"myClassName\"\n      })), container);\n      const head = Helmet.rewind();\n      expect(head.htmlAttributes).to.exist;\n      expect(head.htmlAttributes).to.respondTo(\"toString\");\n      expect(head.htmlAttributes.toString()).to.be.a(\"string\").that.equals(stringifiedHtmlAttributes);\n    });","file":"HelmetDeclarativeTest.js","skipped":false,"dir":"test"},{"name":"renders body attributes as component","suites":["Helmet - Declarative API","server"],"updatePoint":{"line":1713,"column":44,"index":91416},"line":1713,"code":"    it(\"renders body attributes as component\", () => {\n      ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, null, /*#__PURE__*/React.createElement(\"body\", {\n        lang: \"ga\",\n        className: \"myClassName\"\n      })), container);\n      const {\n        bodyAttributes\n      } = Helmet.rewind();\n      const attrs = bodyAttributes.toComponent();\n      expect(attrs).to.exist;\n      const markup = ReactServer.renderToStaticMarkup( /*#__PURE__*/React.createElement(\"body\", _extends({\n        lang: \"en\"\n      }, attrs)));\n      expect(markup).to.be.a(\"string\").that.equals(`<body ${stringifiedBodyAttributes}></body>`);\n    });","file":"HelmetDeclarativeTest.js","skipped":false,"dir":"test"},{"name":"renders body attributes as string","suites":["Helmet - Declarative API","server"],"updatePoint":{"line":1728,"column":41,"index":92052},"line":1728,"code":"    it(\"renders body attributes as string\", () => {\n      ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, null, /*#__PURE__*/React.createElement(\"body\", {\n        lang: \"ga\",\n        className: \"myClassName\"\n      })), container);\n      const body = Helmet.rewind();\n      expect(body.bodyAttributes).to.exist;\n      expect(body.bodyAttributes).to.respondTo(\"toString\");\n      expect(body.bodyAttributes.toString()).to.be.a(\"string\").that.equals(stringifiedBodyAttributes);\n    });","file":"HelmetDeclarativeTest.js","skipped":false,"dir":"test"},{"name":"does not encode all characters with HTML character entity equivalents","suites":["Helmet - Declarative API","server"],"updatePoint":{"line":1738,"column":77,"index":92580},"line":1738,"code":"    it(\"does not encode all characters with HTML character entity equivalents\", () => {\n      const chineseTitle = \"膣膗 鍆錌雔\";\n      const stringifiedChineseTitle = `<title ${HELMET_ATTRIBUTE}=\"true\">${chineseTitle}</title>`;\n      ReactDOM.render( /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(Helmet, null, /*#__PURE__*/React.createElement(\"title\", null, chineseTitle))), container);\n      const head = Helmet.rewind();\n      expect(head.title).to.exist;\n      expect(head.title).to.respondTo(\"toString\");\n      expect(head.title.toString()).to.be.a(\"string\").that.equals(stringifiedChineseTitle);\n    });","file":"HelmetDeclarativeTest.js","skipped":false,"dir":"test"},{"name":"rewind() provides a fallback object for empty Helmet state","suites":["Helmet - Declarative API","server"],"updatePoint":{"line":1747,"column":66,"index":93208},"line":1747,"code":"    it(\"rewind() provides a fallback object for empty Helmet state\", () => {\n      ReactDOM.render( /*#__PURE__*/React.createElement(\"div\", null), container);\n      const head = Helmet.rewind();\n      expect(head.htmlAttributes).to.exist;\n      expect(head.htmlAttributes).to.respondTo(\"toString\");\n      expect(head.htmlAttributes.toString()).to.equal(\"\");\n      expect(head.htmlAttributes).to.respondTo(\"toComponent\");\n      expect(head.htmlAttributes.toComponent()).to.be.an(\"object\").that.is.empty;\n      expect(head.title).to.exist;\n      expect(head.title).to.respondTo(\"toString\");\n      expect(head.title.toString()).to.equal(`<title ${HELMET_ATTRIBUTE}=\"true\"></title>`);\n      expect(head.title).to.respondTo(\"toComponent\");\n      const markup = ReactServer.renderToStaticMarkup( /*#__PURE__*/React.createElement(\"div\", null, head.title.toComponent()));\n      expect(markup).to.be.a(\"string\").that.equals(`<div><title ${HELMET_ATTRIBUTE}=\"true\"></title></div>`);\n      expect(head.base).to.exist;\n      expect(head.base).to.respondTo(\"toString\");\n      expect(head.base.toString()).to.equal(\"\");\n      expect(head.base).to.respondTo(\"toComponent\");\n      expect(head.base.toComponent()).to.be.an(\"array\").that.is.empty;\n      expect(head.meta).to.exist;\n      expect(head.meta).to.respondTo(\"toString\");\n      expect(head.meta.toString()).to.equal(\"\");\n      expect(head.meta).to.respondTo(\"toComponent\");\n      expect(head.meta.toComponent()).to.be.an(\"array\").that.is.empty;\n      expect(head.link).to.exist;\n      expect(head.link).to.respondTo(\"toString\");\n      expect(head.link.toString()).to.equal(\"\");\n      expect(head.link).to.respondTo(\"toComponent\");\n      expect(head.link.toComponent()).to.be.an(\"array\").that.is.empty;\n      expect(head.script).to.exist;\n      expect(head.script).to.respondTo(\"toString\");\n      expect(head.script.toString()).to.equal(\"\");\n      expect(head.script).to.respondTo(\"toComponent\");\n      expect(head.script.toComponent()).to.be.an(\"array\").that.is.empty;\n      expect(head.noscript).to.exist;\n      expect(head.noscript).to.respondTo(\"toString\");\n      expect(head.noscript.toString()).to.equal(\"\");\n      expect(head.noscript).to.respondTo(\"toComponent\");\n      expect(head.noscript.toComponent()).to.be.an(\"array\").that.is.empty;\n      expect(head.style).to.exist;\n      expect(head.style).to.respondTo(\"toString\");\n      expect(head.style.toString()).to.equal(\"\");\n      expect(head.style).to.respondTo(\"toComponent\");\n      expect(head.style.toComponent()).to.be.an(\"array\").that.is.empty;\n    });","file":"HelmetDeclarativeTest.js","skipped":false,"dir":"test"},{"name":"does not render undefined attribute values","suites":["Helmet - Declarative API","server"],"updatePoint":{"line":1792,"column":50,"index":95750},"line":1792,"code":"    it(\"does not render undefined attribute values\", () => {\n      ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, null, /*#__PURE__*/React.createElement(\"script\", {\n        src: \"foo.js\",\n        async: undefined\n      })), container);\n      const {\n        script\n      } = Helmet.rewind();\n      const stringifiedScriptTag = script.toString();\n      expect(stringifiedScriptTag).to.be.a(\"string\").that.equals(`<script ${HELMET_ATTRIBUTE}=\"true\" src=\"foo.js\" async></script>`);\n    });","file":"HelmetDeclarativeTest.js","skipped":false,"dir":"test"},{"name":"does html encode title","suites":["Helmet - Declarative API","server","renderStatic"],"updatePoint":{"line":1804,"column":32,"index":96266},"line":1804,"code":"      it(\"does html encode title\", () => {\n        ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, null, /*#__PURE__*/React.createElement(\"title\", null, `Dangerous <script> include`)), container);\n        const head = Helmet.renderStatic();\n        expect(head.title).to.exist;\n        expect(head.title).to.respondTo(\"toString\");\n        expect(head.title.toString()).to.equal(stringifiedTitle);\n      });","file":"HelmetDeclarativeTest.js","skipped":false,"dir":"test"},{"name":"renders title as React component","suites":["Helmet - Declarative API","server","renderStatic"],"updatePoint":{"line":1811,"column":42,"index":96693},"line":1811,"code":"      it(\"renders title as React component\", () => {\n        ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, null, /*#__PURE__*/React.createElement(\"title\", null, `Dangerous <script> include`)), container);\n        const head = Helmet.renderStatic();\n        expect(head.title).to.exist;\n        expect(head.title).to.respondTo(\"toComponent\");\n        const titleComponent = head.title.toComponent();\n        expect(titleComponent).to.be.an(\"array\").that.has.length.of(1);\n        titleComponent.forEach(title => {\n          expect(title).to.be.an(\"object\").that.contains.property(\"type\", \"title\");\n        });\n        const markup = ReactServer.renderToStaticMarkup( /*#__PURE__*/React.createElement(\"div\", null, titleComponent));\n        expect(markup).to.be.a(\"string\").that.equals(`<div>${stringifiedTitle}</div>`);\n      });","file":"HelmetDeclarativeTest.js","skipped":false,"dir":"test"},{"name":"throws in rewind() when a DOM is present","suites":["Helmet - Declarative API","misc"],"updatePoint":{"line":1830,"column":48,"index":97637},"line":1830,"code":"    it(\"throws in rewind() when a DOM is present\", () => {\n      ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, null, /*#__PURE__*/React.createElement(\"title\", null, \"Fancy title\")), container);\n      expect(Helmet.rewind).to.throw(\"You may only call rewind() on the server. Call peek() to read the current state.\");\n    });","file":"HelmetDeclarativeTest.js","skipped":false,"dir":"test"},{"name":"lets you read current state in peek() whether or not a DOM is present","suites":["Helmet - Declarative API","misc"],"updatePoint":{"line":1834,"column":77,"index":98002},"line":1834,"code":"    it(\"lets you read current state in peek() whether or not a DOM is present\", done => {\n      ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, null, /*#__PURE__*/React.createElement(\"title\", null, \"Fancy title\")), container);\n      requestAnimationFrame(() => {\n        expect(Helmet.peek().title).to.be.equal(\"Fancy title\");\n        Helmet.canUseDOM = false;\n        expect(Helmet.peek().title).to.be.equal(\"Fancy title\");\n        Helmet.canUseDOM = true;\n        done();\n      });\n    });","file":"HelmetDeclarativeTest.js","skipped":false,"dir":"test"},{"name":"encodes special characters","suites":["Helmet - Declarative API","misc"],"updatePoint":{"line":1844,"column":34,"index":98461},"line":1844,"code":"    it(\"encodes special characters\", done => {\n      ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, null, /*#__PURE__*/React.createElement(\"meta\", {\n        name: \"description\",\n        content: 'This is \"quoted\" text and & and \\'.'\n      })), container);\n      requestAnimationFrame(() => {\n        const existingTags = headElement.querySelectorAll(`meta[${HELMET_ATTRIBUTE}]`);\n        const existingTag = existingTags[0];\n        expect(existingTags).to.not.equal(undefined);\n        expect(existingTags.length).to.be.equal(1);\n        expect(existingTags).to.have.deep.property(\"[0]\").that.is.an.instanceof(Element);\n        expect(existingTag).to.have.property(\"getAttribute\");\n        expect(existingTag.getAttribute(\"name\")).to.equal(\"description\");\n        expect(existingTag.getAttribute(\"content\")).to.equal('This is \"quoted\" text and & and \\'.');\n        expect(existingTag.outerHTML).to.equal(`<meta name=\"description\" content=\"This is &quot;quoted&quot; text and &amp; and '.\" ${HELMET_ATTRIBUTE}=\"true\">`);\n        done();\n      });\n    });","file":"HelmetDeclarativeTest.js","skipped":false,"dir":"test"},{"name":"does not change the DOM if it recevies identical props","suites":["Helmet - Declarative API","misc"],"updatePoint":{"line":1862,"column":62,"index":99555},"line":1862,"code":"    it(\"does not change the DOM if it recevies identical props\", done => {\n      const spy = sinon.spy();\n      ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, {\n        onChangeClientState: spy\n      }, /*#__PURE__*/React.createElement(\"meta\", {\n        name: \"description\",\n        content: \"Test description\"\n      }), /*#__PURE__*/React.createElement(\"title\", null, \"Test Title\")), container);\n      requestAnimationFrame(() => {\n        // Re-rendering will pass new props to an already mounted Helmet\n        ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, {\n          onChangeClientState: spy\n        }, /*#__PURE__*/React.createElement(\"meta\", {\n          name: \"description\",\n          content: \"Test description\"\n        }), /*#__PURE__*/React.createElement(\"title\", null, \"Test Title\")), container);\n        requestAnimationFrame(() => {\n          expect(spy.callCount).to.equal(1);\n          done();\n        });\n      });\n    });","file":"HelmetDeclarativeTest.js","skipped":false,"dir":"test"},{"name":"does not write the DOM if the client and server are identical","suites":["Helmet - Declarative API","misc"],"updatePoint":{"line":1884,"column":69,"index":100524},"line":1884,"code":"    it(\"does not write the DOM if the client and server are identical\", done => {\n      headElement.innerHTML = `<script ${HELMET_ATTRIBUTE}=\"true\" src=\"http://localhost/test.js\" type=\"text/javascript\" />`;\n      const spy = sinon.spy();\n      ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, {\n        onChangeClientState: spy\n      }, /*#__PURE__*/React.createElement(\"script\", {\n        src: \"http://localhost/test.js\",\n        type: \"text/javascript\"\n      })), container);\n      requestAnimationFrame(() => {\n        expect(spy.called).to.equal(true);\n        const [, addedTags, removedTags] = spy.getCall(0).args;\n        expect(addedTags).to.be.empty;\n        expect(removedTags).to.be.empty;\n        done();\n      });\n    });","file":"HelmetDeclarativeTest.js","skipped":false,"dir":"test"},{"name":"only adds new tags and preserves tags when rendering additional Helmet instances","suites":["Helmet - Declarative API","misc"],"updatePoint":{"line":1901,"column":88,"index":101287},"line":1901,"code":"    it(\"only adds new tags and preserves tags when rendering additional Helmet instances\", done => {\n      const spy = sinon.spy();\n      let addedTags;\n      let removedTags;\n      ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, {\n        onChangeClientState: spy\n      }, /*#__PURE__*/React.createElement(\"link\", {\n        href: \"http://localhost/style.css\",\n        rel: \"stylesheet\",\n        type: \"text/css\"\n      }), /*#__PURE__*/React.createElement(\"meta\", {\n        name: \"description\",\n        content: \"Test description\"\n      })), container);\n      requestAnimationFrame(() => {\n        expect(spy.called).to.equal(true);\n        addedTags = spy.getCall(0).args[1];\n        removedTags = spy.getCall(0).args[2];\n        expect(addedTags).to.have.property(\"metaTags\");\n        expect(addedTags.metaTags).to.have.deep.property(\"[0]\");\n        expect(addedTags.metaTags[0].outerHTML).to.equal(`<meta name=\"description\" content=\"Test description\" data-react-helmet=\"true\">`);\n        expect(addedTags).to.have.property(\"linkTags\");\n        expect(addedTags.linkTags).to.have.deep.property(\"[0]\");\n        expect(addedTags.linkTags[0].outerHTML).to.equal(`<link href=\"http://localhost/style.css\" rel=\"stylesheet\" type=\"text/css\" data-react-helmet=\"true\">`);\n        expect(removedTags).to.be.empty;\n\n        // Re-rendering will pass new props to an already mounted Helmet\n        ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, {\n          onChangeClientState: spy\n        }, /*#__PURE__*/React.createElement(\"link\", {\n          href: \"http://localhost/style.css\",\n          rel: \"stylesheet\",\n          type: \"text/css\"\n        }), /*#__PURE__*/React.createElement(\"link\", {\n          href: \"http://localhost/style2.css\",\n          rel: \"stylesheet\",\n          type: \"text/css\"\n        }), /*#__PURE__*/React.createElement(\"meta\", {\n          name: \"description\",\n          content: \"New description\"\n        })), container);\n        requestAnimationFrame(() => {\n          expect(spy.callCount).to.equal(2);\n          addedTags = spy.getCall(1).args[1];\n          removedTags = spy.getCall(1).args[2];\n          expect(addedTags).to.have.property(\"metaTags\");\n          expect(addedTags.metaTags).to.have.deep.property(\"[0]\");\n          expect(addedTags.metaTags[0].outerHTML).to.equal(`<meta name=\"description\" content=\"New description\" data-react-helmet=\"true\">`);\n          expect(addedTags).to.have.property(\"linkTags\");\n          expect(addedTags.linkTags).to.have.deep.property(\"[0]\");\n          expect(addedTags.linkTags[0].outerHTML).to.equal(`<link href=\"http://localhost/style2.css\" rel=\"stylesheet\" type=\"text/css\" data-react-helmet=\"true\">`);\n          expect(removedTags).to.have.property(\"metaTags\");\n          expect(removedTags.metaTags).to.have.deep.property(\"[0]\");\n          expect(removedTags.metaTags[0].outerHTML).to.equal(`<meta name=\"description\" content=\"Test description\" data-react-helmet=\"true\">`);\n          expect(removedTags).to.not.have.property(\"linkTags\");\n          done();\n        });\n      });\n    });","file":"HelmetDeclarativeTest.js","skipped":false,"dir":"test"},{"name":"does not accept nested Helmets","suites":["Helmet - Declarative API","misc"],"updatePoint":{"line":1960,"column":38,"index":104305},"line":1960,"code":"    it(\"does not accept nested Helmets\", done => {\n      const warn = sinon.stub(console, \"warn\");\n      ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, null, /*#__PURE__*/React.createElement(\"title\", null, \"Test Title\"), /*#__PURE__*/React.createElement(Helmet, null, /*#__PURE__*/React.createElement(\"title\", null, \"Title you will never see\"))), container);\n      requestAnimationFrame(() => {\n        expect(document.title).to.equal(\"Test Title\");\n        expect(warn.called).to.be.true;\n        const [warning] = warn.getCall(0).args;\n        expect(warning).to.equal(\"You may be attempting to nest <Helmet> components within each other, which is not allowed. Refer to our API for more information.\");\n        warn.restore();\n        done();\n      });\n    });","file":"HelmetDeclarativeTest.js","skipped":false,"dir":"test"},{"name":"warns on invalid elements","suites":["Helmet - Declarative API","misc"],"updatePoint":{"line":1972,"column":33,"index":105074},"line":1972,"code":"    it(\"warns on invalid elements\", done => {\n      const warn = sinon.stub(console, \"warn\");\n      ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, null, /*#__PURE__*/React.createElement(\"title\", null, \"Test Title\"), /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(\"title\", null, \"Title you will never see\"))), container);\n      requestAnimationFrame(() => {\n        expect(document.title).to.equal(\"Test Title\");\n        expect(warn.called).to.be.true;\n        const [warning] = warn.getCall(0).args;\n        expect(warning).to.equal(\"Only elements types base, body, head, html, link, meta, noscript, script, style, title are allowed. Helmet does not support rendering <div> elements. Refer to our API for more information.\");\n        warn.restore();\n        done();\n      });\n    });","file":"HelmetDeclarativeTest.js","skipped":false,"dir":"test"},{"name":"warns on invalid self-closing elements","suites":["Helmet - Declarative API","misc"],"updatePoint":{"line":1984,"column":46,"index":105914},"line":1984,"code":"    it(\"warns on invalid self-closing elements\", done => {\n      const warn = sinon.stub(console, \"warn\");\n      ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, null, /*#__PURE__*/React.createElement(\"title\", null, \"Test Title\"), /*#__PURE__*/React.createElement(\"div\", {\n        customAttribute: true\n      })), container);\n      requestAnimationFrame(() => {\n        expect(document.title).to.equal(\"Test Title\");\n        expect(warn.called).to.be.true;\n        const [warning] = warn.getCall(0).args;\n        expect(warning).to.equal(\"Only elements types base, body, head, html, link, meta, noscript, script, style, title are allowed. Helmet does not support rendering <div> elements. Refer to our API for more information.\");\n        warn.restore();\n        done();\n      });\n    });","file":"HelmetDeclarativeTest.js","skipped":false,"dir":"test"},{"name":"throws on invalid strings as children","suites":["Helmet - Declarative API","misc"],"line":2000,"code":"    it.skip(\"throws on invalid strings as children\", () => {","file":"HelmetDeclarativeTest.js","skipped":true,"dir":"test"},{"name":"throws on invalid children","suites":["Helmet - Declarative API","misc"],"line":2009,"code":"    it.skip(\"throws on invalid children\", () => {","file":"HelmetDeclarativeTest.js","skipped":true,"dir":"test"},{"name":"handles undefined children","suites":["Helmet - Declarative API","misc"],"updatePoint":{"line":2013,"column":34,"index":107910},"line":2013,"code":"    it(\"handles undefined children\", done => {\n      const charSet = undefined;\n      ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, null, charSet && /*#__PURE__*/React.createElement(\"meta\", {\n        charSet: charSet\n      }), /*#__PURE__*/React.createElement(\"title\", null, \"Test Title\")), container);\n      requestAnimationFrame(() => {\n        expect(document.title).to.equal(\"Test Title\");\n        done();\n      });\n    });","file":"HelmetDeclarativeTest.js","skipped":false,"dir":"test"},{"name":"recognizes valid tags regardless of attribute ordering","suites":["Helmet - Declarative API","misc"],"updatePoint":{"line":2023,"column":62,"index":108378},"line":2023,"code":"    it(\"recognizes valid tags regardless of attribute ordering\", done => {\n      ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, null, /*#__PURE__*/React.createElement(\"meta\", {\n        content: \"Test Description\",\n        name: \"description\"\n      })), container);\n      requestAnimationFrame(() => {\n        const existingTags = headElement.querySelectorAll(`meta[${HELMET_ATTRIBUTE}]`);\n        const existingTag = existingTags[0];\n        expect(existingTags).to.not.equal(undefined);\n        expect(existingTags.length).to.be.equal(1);\n        expect(existingTags).to.have.deep.property(\"[0]\").that.is.an.instanceof(Element);\n        expect(existingTag).to.have.property(\"getAttribute\");\n        expect(existingTag.getAttribute(\"name\")).to.equal(\"description\");\n        expect(existingTag.getAttribute(\"content\")).to.equal(\"Test Description\");\n        expect(existingTag.outerHTML).to.equal(`<meta content=\"Test Description\" name=\"description\" ${HELMET_ATTRIBUTE}=\"true\">`);\n        done();\n      });\n    });","file":"HelmetDeclarativeTest.js","skipped":false,"dir":"test"},{"name":"requestAnimationFrame works as expected","suites":["Helmet - Declarative API","misc"],"updatePoint":{"line":2041,"column":47,"index":109387},"line":2041,"code":"    it(\"requestAnimationFrame works as expected\", done => {\n      requestAnimationFrame(cb => {\n        expect(cb).to.exist;\n        expect(cb).to.be.a(\"number\");\n        done();\n      });\n    });","file":"HelmetDeclarativeTest.js","skipped":false,"dir":"test"},{"name":"updates page title","suites":["Helmet","api","title"],"updatePoint":{"line":25,"column":28,"index":1116},"line":25,"code":"      it(\"updates page title\", done => {\n        ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, {\n          defaultTitle: \"Fallback\",\n          title: \"Test Title\"\n        }), container);\n        requestAnimationFrame(() => {\n          expect(document.title).to.equal(\"Test Title\");\n          done();\n        });\n      });","file":"HelmetTest.js","skipped":false,"dir":"test"},{"name":"updates page title with multiple children","suites":["Helmet","api","title"],"updatePoint":{"line":35,"column":51,"index":1473},"line":35,"code":"      it(\"updates page title with multiple children\", done => {\n        ReactDOM.render( /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(Helmet, {\n          title: \"Test Title\"\n        }), /*#__PURE__*/React.createElement(Helmet, {\n          title: \"Child One Title\"\n        }), /*#__PURE__*/React.createElement(Helmet, {\n          title: \"Child Two Title\"\n        })), container);\n        requestAnimationFrame(() => {\n          expect(document.title).to.equal(\"Child Two Title\");\n          done();\n        });\n      });","file":"HelmetTest.js","skipped":false,"dir":"test"},{"name":"sets title based on deepest nested component","suites":["Helmet","api","title"],"updatePoint":{"line":48,"column":54,"index":2029},"line":48,"code":"      it(\"sets title based on deepest nested component\", done => {\n        ReactDOM.render( /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(Helmet, {\n          title: \"Main Title\"\n        }), /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(Helmet, {\n          title: \"Nested Title\"\n        }))), container);\n        requestAnimationFrame(() => {\n          expect(document.title).to.equal(\"Nested Title\");\n          done();\n        });\n      });","file":"HelmetTest.js","skipped":false,"dir":"test"},{"name":"sets title using deepest nested component with a defined title","suites":["Helmet","api","title"],"updatePoint":{"line":59,"column":72,"index":2554},"line":59,"code":"      it(\"sets title using deepest nested component with a defined title\", done => {\n        ReactDOM.render( /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(Helmet, {\n          title: \"Main Title\"\n        }), /*#__PURE__*/React.createElement(Helmet, null)), container);\n        requestAnimationFrame(() => {\n          expect(document.title).to.equal(\"Main Title\");\n          done();\n        });\n      });","file":"HelmetTest.js","skipped":false,"dir":"test"},{"name":"uses defaultTitle if no title is defined","suites":["Helmet","api","title"],"updatePoint":{"line":68,"column":50,"index":2969},"line":68,"code":"      it(\"uses defaultTitle if no title is defined\", done => {\n        ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, {\n          defaultTitle: \"Fallback\",\n          title: \"\",\n          titleTemplate: \"This is a %s of the titleTemplate feature\"\n        }), container);\n        requestAnimationFrame(() => {\n          expect(document.title).to.equal(\"Fallback\");\n          done();\n        });\n      });","file":"HelmetTest.js","skipped":false,"dir":"test"},{"name":"uses a titleTemplate and a child <title>","suites":["Helmet","api","title"],"updatePoint":{"line":79,"column":50,"index":3383},"line":79,"code":"      it(\"uses a titleTemplate and a child <title>\", done => {\n        ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, {\n          defaultTitle: \"Fallback\",\n          titleTemplate: \"This is a %s of the titleTemplate feature\"\n        }, /*#__PURE__*/React.createElement(\"title\", null, \"Test\")), container);\n        requestAnimationFrame(() => {\n          expect(document.title).to.equal(\"This is a Test of the titleTemplate feature\");\n          done();\n        });\n      });","file":"HelmetTest.js","skipped":false,"dir":"test"},{"name":"uses a titleTemplate and a child <title> via a template?","suites":["Helmet","api","title"],"updatePoint":{"line":89,"column":66,"index":3884},"line":89,"code":"      it(\"uses a titleTemplate and a child <title> via a template?\", done => {\n        ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, {\n          defaultTitle: \"Fallback\",\n          titleTemplate: \"This is a %s of the titleTemplate feature\"\n        }, /*#__PURE__*/React.createElement(\"title\", null, `${\"Test\"}`)), container);\n        requestAnimationFrame(() => {\n          expect(document.title).to.equal(\"This is a Test of the titleTemplate feature\");\n          done();\n        });\n      });","file":"HelmetTest.js","skipped":false,"dir":"test"},{"name":"uses a titleTemplate if defined","suites":["Helmet","api","title"],"updatePoint":{"line":99,"column":41,"index":4365},"line":99,"code":"      it(\"uses a titleTemplate if defined\", done => {\n        ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, {\n          defaultTitle: \"Fallback\",\n          title: \"Test\",\n          titleTemplate: \"This is a %s of the titleTemplate feature\"\n        }), container);\n        requestAnimationFrame(() => {\n          expect(document.title).to.equal(\"This is a Test of the titleTemplate feature\");\n          done();\n        });\n      });","file":"HelmetTest.js","skipped":false,"dir":"test"},{"name":"replaces multiple title strings in titleTemplate","suites":["Helmet","api","title"],"updatePoint":{"line":110,"column":58,"index":4826},"line":110,"code":"      it(\"replaces multiple title strings in titleTemplate\", done => {\n        ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, {\n          title: \"Test\",\n          titleTemplate: \"This is a %s of the titleTemplate feature. Another %s.\"\n        }), container);\n        requestAnimationFrame(() => {\n          expect(document.title).to.equal(\"This is a Test of the titleTemplate feature. Another Test.\");\n          done();\n        });\n      });","file":"HelmetTest.js","skipped":false,"dir":"test"},{"name":"uses a titleTemplate based on deepest nested component","suites":["Helmet","api","title"],"updatePoint":{"line":120,"column":64,"index":5285},"line":120,"code":"      it(\"uses a titleTemplate based on deepest nested component\", done => {\n        ReactDOM.render( /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(Helmet, {\n          title: \"Test\",\n          titleTemplate: \"This is a %s of the titleTemplate feature\"\n        }), /*#__PURE__*/React.createElement(Helmet, {\n          title: \"Second Test\",\n          titleTemplate: \"A %s using nested titleTemplate attributes\"\n        })), container);\n        requestAnimationFrame(() => {\n          expect(document.title).to.equal(\"A Second Test using nested titleTemplate attributes\");\n          done();\n        });\n      });","file":"HelmetTest.js","skipped":false,"dir":"test"},{"name":"merges deepest component title with nearest upstream titleTemplate","suites":["Helmet","api","title"],"updatePoint":{"line":133,"column":76,"index":5940},"line":133,"code":"      it(\"merges deepest component title with nearest upstream titleTemplate\", done => {\n        ReactDOM.render( /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(Helmet, {\n          title: \"Test\",\n          titleTemplate: \"This is a %s of the titleTemplate feature\"\n        }), /*#__PURE__*/React.createElement(Helmet, {\n          title: \"Second Test\"\n        })), container);\n        requestAnimationFrame(() => {\n          expect(document.title).to.equal(\"This is a Second Test of the titleTemplate feature\");\n          done();\n        });\n      });","file":"HelmetTest.js","skipped":false,"dir":"test"},{"name":"renders dollar characters in a title correctly when titleTemplate present","suites":["Helmet","api","title"],"updatePoint":{"line":145,"column":83,"index":6530},"line":145,"code":"      it(\"renders dollar characters in a title correctly when titleTemplate present\", done => {\n        const dollarTitle = \"te$t te$$t te$$$t te$$$$t\";\n        ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, {\n          title: dollarTitle,\n          titleTemplate: \"This is a %s\"\n        }), container);\n        requestAnimationFrame(() => {\n          expect(document.title).to.equal(\"This is a te$t te$$t te$$$t te$$$$t\");\n          done();\n        });\n      });","file":"HelmetTest.js","skipped":false,"dir":"test"},{"name":"does not encode all characters with HTML character entity equivalents","suites":["Helmet","api","title"],"updatePoint":{"line":156,"column":79,"index":7001},"line":156,"code":"      it(\"does not encode all characters with HTML character entity equivalents\", done => {\n        const chineseTitle = \"膣膗 鍆錌雔\";\n        ReactDOM.render( /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(Helmet, {\n          title: chineseTitle\n        })), container);\n        requestAnimationFrame(() => {\n          expect(document.title).to.equal(chineseTitle);\n          done();\n        });\n      });","file":"HelmetTest.js","skipped":false,"dir":"test"},{"name":"page title with prop itemprop","suites":["Helmet","api","title"],"updatePoint":{"line":166,"column":39,"index":7396},"line":166,"code":"      it(\"page title with prop itemprop\", done => {\n        ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, {\n          defaultTitle: \"Fallback\",\n          title: \"Test Title with itemProp\",\n          titleAttributes: {\n            itemprop: \"name\"\n          }\n        }), container);\n        requestAnimationFrame(() => {\n          const titleTag = document.getElementsByTagName(\"title\")[0];\n          expect(document.title).to.equal(\"Test Title with itemProp\");\n          expect(titleTag.getAttribute(\"itemprop\")).to.equal(\"name\");\n          done();\n        });\n      });","file":"HelmetTest.js","skipped":false,"dir":"test"},{"name":"update title attributes","suites":["Helmet","api","title attributes"],"updatePoint":{"line":186,"column":33,"index":8119},"line":186,"code":"      it(\"update title attributes\", done => {\n        ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, {\n          titleAttributes: {\n            itemprop: \"name\"\n          }\n        }), container);\n        requestAnimationFrame(() => {\n          const titleTag = document.getElementsByTagName(\"title\")[0];\n          expect(titleTag.getAttribute(\"itemprop\")).to.equal(\"name\");\n          expect(titleTag.getAttribute(HELMET_ATTRIBUTE)).to.equal(\"itemprop\");\n          done();\n        });\n      });","file":"HelmetTest.js","skipped":false,"dir":"test"},{"name":"sets attributes based on the deepest nested component","suites":["Helmet","api","title attributes"],"updatePoint":{"line":199,"column":63,"index":8655},"line":199,"code":"      it(\"sets attributes based on the deepest nested component\", done => {\n        ReactDOM.render( /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(Helmet, {\n          titleAttributes: {\n            lang: \"en\",\n            hidden: undefined\n          }\n        }), /*#__PURE__*/React.createElement(Helmet, {\n          titleAttributes: {\n            lang: \"ja\"\n          }\n        })), container);\n        requestAnimationFrame(() => {\n          const titleTag = document.getElementsByTagName(\"title\")[0];\n          expect(titleTag.getAttribute(\"lang\")).to.equal(\"ja\");\n          expect(titleTag.getAttribute(\"hidden\")).to.equal(\"\");\n          expect(titleTag.getAttribute(HELMET_ATTRIBUTE)).to.equal(\"lang,hidden\");\n          done();\n        });\n      });","file":"HelmetTest.js","skipped":false,"dir":"test"},{"name":"handles valueless attributes","suites":["Helmet","api","title attributes"],"updatePoint":{"line":218,"column":38,"index":9418},"line":218,"code":"      it(\"handles valueless attributes\", done => {\n        ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, {\n          titleAttributes: {\n            hidden: undefined\n          }\n        }), container);\n        requestAnimationFrame(() => {\n          const titleTag = document.getElementsByTagName(\"title\")[0];\n          expect(titleTag.getAttribute(\"hidden\")).to.equal(\"\");\n          expect(titleTag.getAttribute(HELMET_ATTRIBUTE)).to.equal(\"hidden\");\n          done();\n        });\n      });","file":"HelmetTest.js","skipped":false,"dir":"test"},{"name":"clears title attributes that are handled within helmet","suites":["Helmet","api","title attributes"],"updatePoint":{"line":231,"column":64,"index":9948},"line":231,"code":"      it(\"clears title attributes that are handled within helmet\", done => {\n        ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, {\n          titleAttributes: {\n            lang: \"en\",\n            hidden: undefined\n          }\n        }), container);\n        requestAnimationFrame(() => {\n          ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, null), container);\n          requestAnimationFrame(() => {\n            const titleTag = document.getElementsByTagName(\"title\")[0];\n            expect(titleTag.getAttribute(\"lang\")).to.be.null;\n            expect(titleTag.getAttribute(\"hidden\")).to.be.null;\n            expect(titleTag.getAttribute(HELMET_ATTRIBUTE)).to.equal(null);\n            done();\n          });\n        });\n      });","file":"HelmetTest.js","skipped":false,"dir":"test"},{"name":"updates html attributes","suites":["Helmet","api","html attributes"],"updatePoint":{"line":251,"column":33,"index":10724},"line":251,"code":"      it(\"updates html attributes\", done => {\n        ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, {\n          htmlAttributes: {\n            class: \"myClassName\",\n            lang: \"en\"\n          },\n          lang: \"en\"\n        }), container);\n        requestAnimationFrame(() => {\n          const htmlTag = document.getElementsByTagName(\"html\")[0];\n          expect(htmlTag.getAttribute(\"class\")).to.equal(\"myClassName\");\n          expect(htmlTag.getAttribute(\"lang\")).to.equal(\"en\");\n          expect(htmlTag.getAttribute(HELMET_ATTRIBUTE)).to.equal(\"class,lang\");\n          done();\n        });\n      });","file":"HelmetTest.js","skipped":false,"dir":"test"},{"name":"sets attributes based on the deepest nested component","suites":["Helmet","api","html attributes"],"updatePoint":{"line":267,"column":63,"index":11374},"line":267,"code":"      it(\"sets attributes based on the deepest nested component\", done => {\n        ReactDOM.render( /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(Helmet, {\n          htmlAttributes: {\n            lang: \"en\"\n          }\n        }), /*#__PURE__*/React.createElement(Helmet, {\n          htmlAttributes: {\n            lang: \"ja\"\n          }\n        })), container);\n        requestAnimationFrame(() => {\n          const htmlTag = document.getElementsByTagName(\"html\")[0];\n          expect(htmlTag.getAttribute(\"lang\")).to.equal(\"ja\");\n          expect(htmlTag.getAttribute(HELMET_ATTRIBUTE)).to.equal(\"lang\");\n          done();\n        });\n      });","file":"HelmetTest.js","skipped":false,"dir":"test"},{"name":"handles valueless attributes","suites":["Helmet","api","html attributes"],"updatePoint":{"line":284,"column":38,"index":12029},"line":284,"code":"      it(\"handles valueless attributes\", done => {\n        ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, {\n          htmlAttributes: {\n            amp: undefined\n          }\n        }), container);\n        requestAnimationFrame(() => {\n          const htmlTag = document.getElementsByTagName(\"html\")[0];\n          expect(htmlTag.getAttribute(\"amp\")).to.equal(\"\");\n          expect(htmlTag.getAttribute(HELMET_ATTRIBUTE)).to.equal(\"amp\");\n          done();\n        });\n      });","file":"HelmetTest.js","skipped":false,"dir":"test"},{"name":"clears html attributes that are handled within helmet","suites":["Helmet","api","html attributes"],"updatePoint":{"line":297,"column":63,"index":12544},"line":297,"code":"      it(\"clears html attributes that are handled within helmet\", done => {\n        ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, {\n          htmlAttributes: {\n            lang: \"en\",\n            amp: undefined\n          }\n        }), container);\n        requestAnimationFrame(() => {\n          ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, null), container);\n          requestAnimationFrame(() => {\n            const htmlTag = document.getElementsByTagName(\"html\")[0];\n            expect(htmlTag.getAttribute(\"lang\")).to.be.null;\n            expect(htmlTag.getAttribute(\"amp\")).to.be.null;\n            expect(htmlTag.getAttribute(HELMET_ATTRIBUTE)).to.equal(null);\n            done();\n          });\n        });\n      });","file":"HelmetTest.js","skipped":false,"dir":"test"},{"name":"updates with multiple additions and removals - overwrite and new","suites":["Helmet","api","html attributes"],"updatePoint":{"line":315,"column":74,"index":13301},"line":315,"code":"      it(\"updates with multiple additions and removals - overwrite and new\", done => {\n        ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, {\n          htmlAttributes: {\n            lang: \"en\",\n            amp: undefined\n          }\n        }), container);\n        requestAnimationFrame(() => {\n          ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, {\n            htmlAttributes: {\n              lang: \"ja\",\n              id: \"html-tag\",\n              title: \"html tag\"\n            }\n          }), container);\n          requestAnimationFrame(() => {\n            const htmlTag = document.getElementsByTagName(\"html\")[0];\n            expect(htmlTag.getAttribute(\"amp\")).to.equal(null);\n            expect(htmlTag.getAttribute(\"lang\")).to.equal(\"ja\");\n            expect(htmlTag.getAttribute(\"id\")).to.equal(\"html-tag\");\n            expect(htmlTag.getAttribute(\"title\")).to.equal(\"html tag\");\n            expect(htmlTag.getAttribute(HELMET_ATTRIBUTE)).to.equal(\"lang,id,title\");\n            done();\n          });\n        });\n      });","file":"HelmetTest.js","skipped":false,"dir":"test"},{"name":"updates with multiple additions and removals - all new","suites":["Helmet","api","html attributes"],"updatePoint":{"line":341,"column":64,"index":14349},"line":341,"code":"      it(\"updates with multiple additions and removals - all new\", done => {\n        ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, {\n          htmlAttributes: {\n            lang: \"en\",\n            amp: undefined\n          }\n        }), container);\n        requestAnimationFrame(() => {\n          ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, {\n            htmlAttributes: {\n              id: \"html-tag\",\n              title: \"html tag\"\n            }\n          }), container);\n          requestAnimationFrame(() => {\n            const htmlTag = document.getElementsByTagName(\"html\")[0];\n            expect(htmlTag.getAttribute(\"amp\")).to.equal(null);\n            expect(htmlTag.getAttribute(\"lang\")).to.equal(null);\n            expect(htmlTag.getAttribute(\"id\")).to.equal(\"html-tag\");\n            expect(htmlTag.getAttribute(\"title\")).to.equal(\"html tag\");\n            expect(htmlTag.getAttribute(HELMET_ATTRIBUTE)).to.equal(\"id,title\");\n            done();\n          });\n        });\n      });","file":"HelmetTest.js","skipped":false,"dir":"test"},{"name":"attributes are not cleared","suites":["Helmet","api","html attributes","initialized outside of helmet"],"updatePoint":{"line":371,"column":38,"index":15546},"line":371,"code":"        it(\"attributes are not cleared\", done => {\n          ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, null), container);\n          requestAnimationFrame(() => {\n            const htmlTag = document.getElementsByTagName(\"html\")[0];\n            expect(htmlTag.getAttribute(\"test\")).to.equal(\"test\");\n            expect(htmlTag.getAttribute(HELMET_ATTRIBUTE)).to.equal(null);\n            done();\n          });\n        });","file":"HelmetTest.js","skipped":false,"dir":"test"},{"name":"attributes are overwritten if specified in helmet","suites":["Helmet","api","html attributes","initialized outside of helmet"],"updatePoint":{"line":380,"column":61,"index":16005},"line":380,"code":"        it(\"attributes are overwritten if specified in helmet\", done => {\n          ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, {\n            htmlAttributes: {\n              test: \"helmet-attr\"\n            }\n          }), container);\n          requestAnimationFrame(() => {\n            const htmlTag = document.getElementsByTagName(\"html\")[0];\n            expect(htmlTag.getAttribute(\"test\")).to.equal(\"helmet-attr\");\n            expect(htmlTag.getAttribute(HELMET_ATTRIBUTE)).to.equal(\"test\");\n            done();\n          });\n        });","file":"HelmetTest.js","skipped":false,"dir":"test"},{"name":"attributes are cleared once managed in helmet","suites":["Helmet","api","html attributes","initialized outside of helmet"],"updatePoint":{"line":393,"column":57,"index":16556},"line":393,"code":"        it(\"attributes are cleared once managed in helmet\", done => {\n          ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, {\n            htmlAttributes: {\n              test: \"helmet-attr\"\n            }\n          }), container);\n          requestAnimationFrame(() => {\n            ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, null), container);\n            requestAnimationFrame(() => {\n              const htmlTag = document.getElementsByTagName(\"html\")[0];\n              expect(htmlTag.getAttribute(\"test\")).to.equal(null);\n              expect(htmlTag.getAttribute(HELMET_ATTRIBUTE)).to.equal(null);\n              done();\n            });\n          });\n        });","file":"HelmetTest.js","skipped":false,"dir":"test"},{"name":"when handling client state change, calls the function with new state, addedTags and removedTags ","suites":["Helmet","api","onChangeClientState"],"updatePoint":{"line":412,"column":106,"index":17362},"line":412,"code":"      it(\"when handling client state change, calls the function with new state, addedTags and removedTags \", done => {\n        const spy = sinon.spy();\n        ReactDOM.render( /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(Helmet, {\n          base: {\n            href: \"http://mysite.com/\"\n          },\n          link: [{\n            href: \"http://localhost/helmet\",\n            rel: \"canonical\"\n          }],\n          meta: [{\n            charset: \"utf-8\"\n          }],\n          script: [{\n            src: \"http://localhost/test.js\",\n            type: \"text/javascript\"\n          }],\n          title: \"Main Title\",\n          onChangeClientState: spy\n        })), container);\n        requestAnimationFrame(() => {\n          expect(spy.called).to.equal(true);\n          const newState = spy.getCall(0).args[0];\n          const addedTags = spy.getCall(0).args[1];\n          const removedTags = spy.getCall(0).args[2];\n          expect(newState).to.contain({\n            title: \"Main Title\"\n          });\n          expect(newState.baseTag).to.contain({\n            href: \"http://mysite.com/\"\n          });\n          expect(newState.metaTags).to.contain({\n            charset: \"utf-8\"\n          });\n          expect(newState.linkTags).to.contain({\n            href: \"http://localhost/helmet\",\n            rel: \"canonical\"\n          });\n          expect(newState.scriptTags).to.contain({\n            src: \"http://localhost/test.js\",\n            type: \"text/javascript\"\n          });\n          expect(addedTags).to.have.property(\"baseTag\");\n          expect(addedTags.baseTag).to.have.deep.property(\"[0]\");\n          expect(addedTags.baseTag[0].outerHTML).to.equal(`<base href=\"http://mysite.com/\" data-react-helmet=\"true\">`);\n          expect(addedTags).to.have.property(\"metaTags\");\n          expect(addedTags.metaTags).to.have.deep.property(\"[0]\");\n          expect(addedTags.metaTags[0].outerHTML).to.equal(`<meta charset=\"utf-8\" data-react-helmet=\"true\">`);\n          expect(addedTags).to.have.property(\"linkTags\");\n          expect(addedTags.linkTags).to.have.deep.property(\"[0]\");\n          expect(addedTags.linkTags[0].outerHTML).to.equal(`<link href=\"http://localhost/helmet\" rel=\"canonical\" data-react-helmet=\"true\">`);\n          expect(addedTags).to.have.property(\"scriptTags\");\n          expect(addedTags.scriptTags).to.have.deep.property(\"[0]\");\n          expect(addedTags.scriptTags[0].outerHTML).to.equal(`<script src=\"http://localhost/test.js\" type=\"text/javascript\" data-react-helmet=\"true\"></script>`);\n          expect(removedTags).to.be.empty;\n          done();\n        });\n      });","file":"HelmetTest.js","skipped":false,"dir":"test"},{"name":"calls the deepest defined callback with the deepest state","suites":["Helmet","api","onChangeClientState"],"updatePoint":{"line":470,"column":67,"index":19957},"line":470,"code":"      it(\"calls the deepest defined callback with the deepest state\", done => {\n        const spy = sinon.spy();\n        ReactDOM.render( /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(Helmet, {\n          title: \"Main Title\",\n          onChangeClientState: spy\n        }), /*#__PURE__*/React.createElement(Helmet, {\n          title: \"Deeper Title\"\n        })), container);\n        requestAnimationFrame(() => {\n          expect(spy.callCount).to.equal(1);\n          expect(spy.getCall(0).args[0]).to.contain({\n            title: \"Deeper Title\"\n          });\n          done();\n        });\n      });","file":"HelmetTest.js","skipped":false,"dir":"test"},{"name":"updates base tag with href property","suites":["Helmet","api","base tag"],"updatePoint":{"line":488,"column":45,"index":20606},"line":488,"code":"      it(\"updates base tag with href property\", done => {\n        ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, {\n          base: {\n            href: \"http://mysite.com/\"\n          }\n        }), container);\n        requestAnimationFrame(() => {\n          const existingTags = headElement.querySelectorAll(`base[${HELMET_ATTRIBUTE}]`);\n          expect(existingTags).to.not.equal(undefined);\n          const filteredTags = [].slice.call(existingTags).filter(tag => {\n            return tag.getAttribute(\"href\") === \"http://mysite.com/\";\n          });\n          expect(filteredTags.length).to.equal(1);\n          done();\n        });\n      });","file":"HelmetTest.js","skipped":false,"dir":"test"},{"name":"updates base tag with target property","suites":["Helmet","api","base tag"],"updatePoint":{"line":504,"column":47,"index":21261},"line":504,"code":"      it(\"updates base tag with target property\", done => {\n        ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, {\n          base: {\n            target: \"_blank\"\n          }\n        }), container);\n        requestAnimationFrame(() => {\n          const existingTags = headElement.querySelectorAll(`base[${HELMET_ATTRIBUTE}]`);\n          expect(existingTags).to.not.equal(undefined);\n          const filteredTags = [].slice.call(existingTags).filter(tag => {\n            return tag.getAttribute(\"target\") === \"_blank\";\n          });\n          expect(filteredTags.length).to.equal(1);\n          done();\n        });\n      });","file":"HelmetTest.js","skipped":false,"dir":"test"},{"name":"clears the base tag if one is not specified","suites":["Helmet","api","base tag"],"updatePoint":{"line":520,"column":53,"index":21902},"line":520,"code":"      it(\"clears the base tag if one is not specified\", done => {\n        ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, {\n          base: {\n            href: \"http://mysite.com/\"\n          }\n        }), container);\n        requestAnimationFrame(() => {\n          ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, null), container);\n          requestAnimationFrame(() => {\n            const existingTags = headElement.querySelectorAll(`base[${HELMET_ATTRIBUTE}]`);\n            expect(existingTags).to.not.equal(undefined);\n            expect(existingTags.length).to.equal(0);\n            done();\n          });\n        });\n      });","file":"HelmetTest.js","skipped":false,"dir":"test"},{"name":"tags without 'href' or 'target' are not accepted","suites":["Helmet","api","base tag"],"updatePoint":{"line":536,"column":58,"index":22558},"line":536,"code":"      it(\"tags without 'href' or 'target' are not accepted\", done => {\n        ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, {\n          base: {\n            property: \"won't work\"\n          }\n        }), container);\n        requestAnimationFrame(() => {\n          const existingTags = headElement.querySelectorAll(`base[${HELMET_ATTRIBUTE}]`);\n          expect(existingTags).to.not.equal(undefined);\n          expect(existingTags.length).to.equal(0);\n          done();\n        });\n      });","file":"HelmetTest.js","skipped":false,"dir":"test"},{"name":"sets base tag based on deepest nested component","suites":["Helmet","api","base tag"],"updatePoint":{"line":549,"column":57,"index":23060},"line":549,"code":"      it(\"sets base tag based on deepest nested component\", done => {\n        ReactDOM.render( /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(Helmet, {\n          base: {\n            href: \"http://mysite.com/\"\n          }\n        }), /*#__PURE__*/React.createElement(Helmet, {\n          base: {\n            href: \"http://mysite.com/public\",\n            target: \"_parent\"\n          }\n        })), container);\n        requestAnimationFrame(() => {\n          const existingTags = headElement.querySelectorAll(`base[${HELMET_ATTRIBUTE}]`);\n          const firstTag = Array.prototype.slice.call(existingTags)[0];\n          expect(existingTags).to.not.equal(undefined);\n          expect(existingTags.length).to.be.equal(1);\n          expect(existingTags).to.have.deep.property(\"[0]\").that.is.an.instanceof(Element);\n          expect(firstTag).to.have.property(\"getAttribute\");\n          expect(firstTag.getAttribute(\"href\")).to.equal(\"http://mysite.com/public\");\n          expect(firstTag.getAttribute(\"target\")).to.equal(\"_parent\");\n          expect(firstTag.outerHTML).to.equal(`<base href=\"http://mysite.com/public\" target=\"_parent\" ${HELMET_ATTRIBUTE}=\"true\">`);\n          done();\n        });\n      });","file":"HelmetTest.js","skipped":false,"dir":"test"},{"name":"does not render tag when primary attribute is null","suites":["Helmet","api","base tag"],"updatePoint":{"line":573,"column":60,"index":24295},"line":573,"code":"      it(\"does not render tag when primary attribute is null\", done => {\n        ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, {\n          base: {\n            href: undefined\n          }\n        }), container);\n        requestAnimationFrame(() => {\n          const tagNodes = headElement.querySelectorAll(`base[${HELMET_ATTRIBUTE}]`);\n          const existingTags = Array.prototype.slice.call(tagNodes);\n          expect(existingTags).to.be.empty;\n          done();\n        });\n      });","file":"HelmetTest.js","skipped":false,"dir":"test"},{"name":"updates meta tags","suites":["Helmet","api","meta tags"],"updatePoint":{"line":588,"column":27,"index":24804},"line":588,"code":"      it(\"updates meta tags\", done => {\n        ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, {\n          meta: [{\n            charset: \"utf-8\"\n          }, {\n            name: \"description\",\n            content: \"Test description\"\n          }, {\n            \"http-equiv\": \"content-type\",\n            content: \"text/html\"\n          }, {\n            property: \"og:type\",\n            content: \"article\"\n          }, {\n            itemprop: \"name\",\n            content: \"Test name itemprop\"\n          }]\n        }), container);\n        requestAnimationFrame(() => {\n          const tagNodes = headElement.querySelectorAll(`meta[${HELMET_ATTRIBUTE}]`);\n          const existingTags = Array.prototype.slice.call(tagNodes);\n          expect(existingTags).to.not.equal(undefined);\n          const filteredTags = [].slice.call(existingTags).filter(tag => {\n            return tag.getAttribute(\"charset\") === \"utf-8\" || tag.getAttribute(\"name\") === \"description\" && tag.getAttribute(\"content\") === \"Test description\" || tag.getAttribute(\"http-equiv\") === \"content-type\" && tag.getAttribute(\"content\") === \"text/html\" || tag.getAttribute(\"itemprop\") === \"name\" && tag.getAttribute(\"content\") === \"Test name itemprop\";\n          });\n          expect(filteredTags.length).to.be.at.least(4);\n          done();\n        });\n      });","file":"HelmetTest.js","skipped":false,"dir":"test"},{"name":"clears all meta tags if none are specified","suites":["Helmet","api","meta tags"],"updatePoint":{"line":617,"column":52,"index":26160},"line":617,"code":"      it(\"clears all meta tags if none are specified\", done => {\n        ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, {\n          meta: [{\n            name: \"description\",\n            content: \"Test description\"\n          }]\n        }), container);\n        requestAnimationFrame(() => {\n          ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, null), container);\n          requestAnimationFrame(() => {\n            const existingTags = headElement.querySelectorAll(`meta[${HELMET_ATTRIBUTE}]`);\n            expect(existingTags).to.not.equal(undefined);\n            expect(existingTags.length).to.equal(0);\n            done();\n          });\n        });\n      });","file":"HelmetTest.js","skipped":false,"dir":"test"},{"name":"tags without 'name', 'http-equiv', 'property', 'charset', or 'itemprop' are not accepted","suites":["Helmet","api","meta tags"],"updatePoint":{"line":634,"column":98,"index":26892},"line":634,"code":"      it(\"tags without 'name', 'http-equiv', 'property', 'charset', or 'itemprop' are not accepted\", done => {\n        ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, {\n          meta: [{\n            href: \"won't work\"\n          }]\n        }), container);\n        requestAnimationFrame(() => {\n          const existingTags = headElement.querySelectorAll(`meta[${HELMET_ATTRIBUTE}]`);\n          expect(existingTags).to.not.equal(undefined);\n          expect(existingTags.length).to.equal(0);\n          done();\n        });\n      });","file":"HelmetTest.js","skipped":false,"dir":"test"},{"name":"sets meta tags based on deepest nested component","suites":["Helmet","api","meta tags"],"updatePoint":{"line":647,"column":58,"index":27393},"line":647,"code":"      it(\"sets meta tags based on deepest nested component\", done => {\n        ReactDOM.render( /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(Helmet, {\n          meta: [{\n            charset: \"utf-8\"\n          }, {\n            name: \"description\",\n            content: \"Test description\"\n          }]\n        }), /*#__PURE__*/React.createElement(Helmet, {\n          meta: [{\n            name: \"description\",\n            content: \"Inner description\"\n          }, {\n            name: \"keywords\",\n            content: \"test,meta,tags\"\n          }]\n        })), container);\n        requestAnimationFrame(() => {\n          const tagNodes = headElement.querySelectorAll(`meta[${HELMET_ATTRIBUTE}]`);\n          const existingTags = Array.prototype.slice.call(tagNodes);\n          const firstTag = existingTags[0];\n          const secondTag = existingTags[1];\n          const thirdTag = existingTags[2];\n          expect(existingTags).to.not.equal(undefined);\n          expect(existingTags.length).to.be.equal(3);\n          expect(existingTags).to.have.deep.property(\"[0]\").that.is.an.instanceof(Element);\n          expect(firstTag).to.have.property(\"getAttribute\");\n          expect(firstTag.getAttribute(\"charset\")).to.equal(\"utf-8\");\n          expect(firstTag.outerHTML).to.equal(`<meta charset=\"utf-8\" ${HELMET_ATTRIBUTE}=\"true\">`);\n          expect(existingTags).to.have.deep.property(\"[1]\").that.is.an.instanceof(Element);\n          expect(secondTag).to.have.property(\"getAttribute\");\n          expect(secondTag.getAttribute(\"name\")).to.equal(\"description\");\n          expect(secondTag.getAttribute(\"content\")).to.equal(\"Inner description\");\n          expect(secondTag.outerHTML).to.equal(`<meta name=\"description\" content=\"Inner description\" ${HELMET_ATTRIBUTE}=\"true\">`);\n          expect(existingTags).to.have.deep.property(\"[2]\").that.is.an.instanceof(Element);\n          expect(thirdTag).to.have.property(\"getAttribute\");\n          expect(thirdTag.getAttribute(\"name\")).to.equal(\"keywords\");\n          expect(thirdTag.getAttribute(\"content\")).to.equal(\"test,meta,tags\");\n          expect(thirdTag.outerHTML).to.equal(`<meta name=\"keywords\" content=\"test,meta,tags\" ${HELMET_ATTRIBUTE}=\"true\">`);\n          done();\n        });\n      });","file":"HelmetTest.js","skipped":false,"dir":"test"},{"name":"allows duplicate meta tags if specified in the same component","suites":["Helmet","api","meta tags"],"updatePoint":{"line":689,"column":71,"index":29678},"line":689,"code":"      it(\"allows duplicate meta tags if specified in the same component\", done => {\n        ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, {\n          meta: [{\n            name: \"description\",\n            content: \"Test description\"\n          }, {\n            name: \"description\",\n            content: \"Duplicate description\"\n          }]\n        }), container);\n        requestAnimationFrame(() => {\n          const tagNodes = headElement.querySelectorAll(`meta[${HELMET_ATTRIBUTE}]`);\n          const existingTags = Array.prototype.slice.call(tagNodes);\n          const firstTag = existingTags[0];\n          const secondTag = existingTags[1];\n          expect(existingTags).to.not.equal(undefined);\n          expect(existingTags.length).to.equal(2);\n          expect(existingTags).to.have.deep.property(\"[0]\").that.is.an.instanceof(Element);\n          expect(firstTag).to.have.property(\"getAttribute\");\n          expect(firstTag.getAttribute(\"name\")).to.equal(\"description\");\n          expect(firstTag.getAttribute(\"content\")).to.equal(\"Test description\");\n          expect(firstTag.outerHTML).to.equal(`<meta name=\"description\" content=\"Test description\" ${HELMET_ATTRIBUTE}=\"true\">`);\n          expect(existingTags).to.have.deep.property(\"[1]\").that.is.an.instanceof(Element);\n          expect(secondTag).to.have.property(\"getAttribute\");\n          expect(secondTag.getAttribute(\"name\")).to.equal(\"description\");\n          expect(secondTag.getAttribute(\"content\")).to.equal(\"Duplicate description\");\n          expect(secondTag.outerHTML).to.equal(`<meta name=\"description\" content=\"Duplicate description\" ${HELMET_ATTRIBUTE}=\"true\">`);\n          done();\n        });\n      });","file":"HelmetTest.js","skipped":false,"dir":"test"},{"name":"overrides duplicate meta tags with single meta tag in a nested component","suites":["Helmet","api","meta tags"],"updatePoint":{"line":719,"column":82,"index":31380},"line":719,"code":"      it(\"overrides duplicate meta tags with single meta tag in a nested component\", done => {\n        ReactDOM.render( /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(Helmet, {\n          meta: [{\n            name: \"description\",\n            content: \"Test description\"\n          }, {\n            name: \"description\",\n            content: \"Duplicate description\"\n          }]\n        }), /*#__PURE__*/React.createElement(Helmet, {\n          meta: [{\n            name: \"description\",\n            content: \"Inner description\"\n          }]\n        })), container);\n        requestAnimationFrame(() => {\n          const tagNodes = headElement.querySelectorAll(`meta[${HELMET_ATTRIBUTE}]`);\n          const existingTags = Array.prototype.slice.call(tagNodes);\n          const firstTag = existingTags[0];\n          expect(existingTags).to.not.equal(undefined);\n          expect(existingTags.length).to.equal(1);\n          expect(existingTags).to.have.deep.property(\"[0]\").that.is.an.instanceof(Element);\n          expect(firstTag).to.have.property(\"getAttribute\");\n          expect(firstTag.getAttribute(\"name\")).to.equal(\"description\");\n          expect(firstTag.getAttribute(\"content\")).to.equal(\"Inner description\");\n          expect(firstTag.outerHTML).to.equal(`<meta name=\"description\" content=\"Inner description\" ${HELMET_ATTRIBUTE}=\"true\">`);\n          done();\n        });\n      });","file":"HelmetTest.js","skipped":false,"dir":"test"},{"name":"overrides single meta tag with duplicate meta tags in a nested component","suites":["Helmet","api","meta tags"],"updatePoint":{"line":748,"column":82,"index":32796},"line":748,"code":"      it(\"overrides single meta tag with duplicate meta tags in a nested component\", done => {\n        ReactDOM.render( /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(Helmet, {\n          meta: [{\n            name: \"description\",\n            content: \"Test description\"\n          }]\n        }), /*#__PURE__*/React.createElement(Helmet, {\n          meta: [{\n            name: \"description\",\n            content: \"Inner description\"\n          }, {\n            name: \"description\",\n            content: \"Inner duplicate description\"\n          }]\n        })), container);\n        requestAnimationFrame(() => {\n          const tagNodes = headElement.querySelectorAll(`meta[${HELMET_ATTRIBUTE}]`);\n          const existingTags = Array.prototype.slice.call(tagNodes);\n          const firstTag = existingTags[0];\n          const secondTag = existingTags[1];\n          expect(existingTags).to.not.equal(undefined);\n          expect(existingTags.length).to.equal(2);\n          expect(existingTags).to.have.deep.property(\"[0]\").that.is.an.instanceof(Element);\n          expect(firstTag).to.have.property(\"getAttribute\");\n          expect(firstTag.getAttribute(\"name\")).to.equal(\"description\");\n          expect(firstTag.getAttribute(\"content\")).to.equal(\"Inner description\");\n          expect(firstTag.outerHTML).to.equal(`<meta name=\"description\" content=\"Inner description\" ${HELMET_ATTRIBUTE}=\"true\">`);\n          expect(existingTags).to.have.deep.property(\"[1]\").that.is.an.instanceof(Element);\n          expect(secondTag).to.have.property(\"getAttribute\");\n          expect(secondTag.getAttribute(\"name\")).to.equal(\"description\");\n          expect(secondTag.getAttribute(\"content\")).to.equal(\"Inner duplicate description\");\n          expect(secondTag.outerHTML).to.equal(`<meta name=\"description\" content=\"Inner duplicate description\" ${HELMET_ATTRIBUTE}=\"true\">`);\n          done();\n        });\n      });","file":"HelmetTest.js","skipped":false,"dir":"test"},{"name":"does not render tag when primary attribute is null","suites":["Helmet","api","meta tags"],"updatePoint":{"line":783,"column":60,"index":34704},"line":783,"code":"      it(\"does not render tag when primary attribute is null\", done => {\n        ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, {\n          meta: [{\n            name: undefined,\n            content: \"Inner duplicate description\"\n          }]\n        }), container);\n        requestAnimationFrame(() => {\n          const tagNodes = headElement.querySelectorAll(`meta[${HELMET_ATTRIBUTE}]`);\n          const existingTags = Array.prototype.slice.call(tagNodes);\n          expect(existingTags).to.be.empty;\n          done();\n        });\n      });","file":"HelmetTest.js","skipped":false,"dir":"test"},{"name":"fails gracefully when meta is wrong shape","suites":["Helmet","api","meta tags"],"updatePoint":{"line":797,"column":51,"index":35249},"line":797,"code":"      it(\"fails gracefully when meta is wrong shape\", done => {\n        const error = sinon.stub(console, \"error\");\n        const warn = sinon.stub(console, \"warn\");\n        ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, {\n          meta: {\n            name: \"title\",\n            content: \"some title\"\n          }\n        }), container);\n        requestAnimationFrame(() => {\n          const tagNodes = headElement.querySelectorAll(`meta[${HELMET_ATTRIBUTE}]`);\n          const existingTags = Array.prototype.slice.call(tagNodes);\n          expect(existingTags).to.be.empty;\n          expect(error.called).to.be.true;\n          expect(warn.called).to.be.true;\n          const [warning] = warn.getCall(0).args;\n          expect(warning).to.equal(`Helmet: meta should be of type \"Array\". Instead found type \"object\"`);\n          error.restore();\n          warn.restore();\n          done();\n        });\n      });","file":"HelmetTest.js","skipped":false,"dir":"test"},{"name":"updates link tags","suites":["Helmet","api","link tags"],"updatePoint":{"line":821,"column":27,"index":36188},"line":821,"code":"      it(\"updates link tags\", done => {\n        ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, {\n          link: [{\n            href: \"http://localhost/helmet\",\n            rel: \"canonical\"\n          }, {\n            href: \"http://localhost/style.css\",\n            rel: \"stylesheet\",\n            type: \"text/css\"\n          }]\n        }), container);\n        requestAnimationFrame(() => {\n          const tagNodes = headElement.querySelectorAll(`link[${HELMET_ATTRIBUTE}]`);\n          const existingTags = Array.prototype.slice.call(tagNodes);\n          expect(existingTags).to.not.equal(undefined);\n          const filteredTags = [].slice.call(existingTags).filter(tag => {\n            return tag.getAttribute(\"href\") === \"http://localhost/style.css\" && tag.getAttribute(\"rel\") === \"stylesheet\" && tag.getAttribute(\"type\") === \"text/css\" || tag.getAttribute(\"href\") === \"http://localhost/helmet\" && tag.getAttribute(\"rel\") === \"canonical\";\n          });\n          expect(filteredTags.length).to.be.at.least(2);\n          done();\n        });\n      });","file":"HelmetTest.js","skipped":false,"dir":"test"},{"name":"clears all link tags if none are specified","suites":["Helmet","api","link tags"],"updatePoint":{"line":843,"column":52,"index":37275},"line":843,"code":"      it(\"clears all link tags if none are specified\", done => {\n        ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, {\n          link: [{\n            href: \"http://localhost/helmet\",\n            rel: \"canonical\"\n          }]\n        }), container);\n        requestAnimationFrame(() => {\n          ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, null), container);\n          requestAnimationFrame(() => {\n            const tagNodes = headElement.querySelectorAll(`link[${HELMET_ATTRIBUTE}]`);\n            const existingTags = Array.prototype.slice.call(tagNodes);\n            expect(existingTags).to.not.equal(undefined);\n            expect(existingTags.length).to.equal(0);\n            done();\n          });\n        });\n      });","file":"HelmetTest.js","skipped":false,"dir":"test"},{"name":"tags without 'href' or 'rel' are not accepted, even if they are valid for other tags","suites":["Helmet","api","link tags"],"updatePoint":{"line":861,"column":94,"index":38071},"line":861,"code":"      it(\"tags without 'href' or 'rel' are not accepted, even if they are valid for other tags\", done => {\n        ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, {\n          link: [{\n            \"http-equiv\": \"won't work\"\n          }]\n        }), container);\n        requestAnimationFrame(() => {\n          const tagNodes = headElement.querySelectorAll(`link[${HELMET_ATTRIBUTE}]`);\n          const existingTags = Array.prototype.slice.call(tagNodes);\n          expect(existingTags).to.not.equal(undefined);\n          expect(existingTags.length).to.equal(0);\n          done();\n        });\n      });","file":"HelmetTest.js","skipped":false,"dir":"test"},{"name":"tags 'rel' and 'href' properly use 'rel' as the primary identification for this tag, regardless of ordering","suites":["Helmet","api","link tags"],"updatePoint":{"line":875,"column":117,"index":38704},"line":875,"code":"      it(\"tags 'rel' and 'href' properly use 'rel' as the primary identification for this tag, regardless of ordering\", done => {\n        ReactDOM.render( /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(Helmet, {\n          link: [{\n            href: \"http://localhost/helmet\",\n            rel: \"canonical\"\n          }]\n        }), /*#__PURE__*/React.createElement(Helmet, {\n          link: [{\n            rel: \"canonical\",\n            href: \"http://localhost/helmet/new\"\n          }]\n        }), /*#__PURE__*/React.createElement(Helmet, {\n          link: [{\n            href: \"http://localhost/helmet/newest\",\n            rel: \"canonical\"\n          }]\n        })), container);\n        requestAnimationFrame(() => {\n          const tagNodes = headElement.querySelectorAll(`link[${HELMET_ATTRIBUTE}]`);\n          const existingTags = Array.prototype.slice.call(tagNodes);\n          const firstTag = existingTags[0];\n          expect(existingTags).to.not.equal(undefined);\n          expect(existingTags.length).to.equal(1);\n          expect(existingTags).to.have.deep.property(\"[0]\").that.is.an.instanceof(Element);\n          expect(firstTag).to.have.property(\"getAttribute\");\n          expect(firstTag.getAttribute(\"rel\")).to.equal(\"canonical\");\n          expect(firstTag.getAttribute(\"href\")).to.equal(\"http://localhost/helmet/newest\");\n          expect(firstTag.outerHTML).to.equal(`<link href=\"http://localhost/helmet/newest\" rel=\"canonical\" ${HELMET_ATTRIBUTE}=\"true\">`);\n          done();\n        });\n      });","file":"HelmetTest.js","skipped":false,"dir":"test"},{"name":"tags with rel='stylesheet' uses the href as the primary identification of the tag, regardless of ordering","suites":["Helmet","api","link tags"],"updatePoint":{"line":906,"column":115,"index":40247},"line":906,"code":"      it(\"tags with rel='stylesheet' uses the href as the primary identification of the tag, regardless of ordering\", done => {\n        ReactDOM.render( /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(Helmet, {\n          link: [{\n            href: \"http://localhost/style.css\",\n            rel: \"stylesheet\",\n            type: \"text/css\",\n            media: \"all\"\n          }]\n        }), /*#__PURE__*/React.createElement(Helmet, {\n          link: [{\n            rel: \"stylesheet\",\n            href: \"http://localhost/inner.css\",\n            type: \"text/css\",\n            media: \"all\"\n          }]\n        })), container);\n        requestAnimationFrame(() => {\n          const tagNodes = headElement.querySelectorAll(`link[${HELMET_ATTRIBUTE}]`);\n          const existingTags = Array.prototype.slice.call(tagNodes);\n          const firstTag = existingTags[0];\n          const secondTag = existingTags[1];\n          expect(existingTags).to.not.equal(undefined);\n          expect(existingTags.length).to.equal(2);\n          expect(existingTags).to.have.deep.property(\"[0]\").that.is.an.instanceof(Element);\n          expect(firstTag).to.have.property(\"getAttribute\");\n          expect(firstTag.getAttribute(\"href\")).to.equal(\"http://localhost/style.css\");\n          expect(firstTag.getAttribute(\"rel\")).to.equal(\"stylesheet\");\n          expect(firstTag.getAttribute(\"type\")).to.equal(\"text/css\");\n          expect(firstTag.getAttribute(\"media\")).to.equal(\"all\");\n          expect(firstTag.outerHTML).to.equal(`<link href=\"http://localhost/style.css\" rel=\"stylesheet\" type=\"text/css\" media=\"all\" ${HELMET_ATTRIBUTE}=\"true\">`);\n          expect(existingTags).to.have.deep.property(\"[1]\").that.is.an.instanceof(Element);\n          expect(secondTag).to.have.property(\"getAttribute\");\n          expect(secondTag.getAttribute(\"rel\")).to.equal(\"stylesheet\");\n          expect(secondTag.getAttribute(\"href\")).to.equal(\"http://localhost/inner.css\");\n          expect(secondTag.getAttribute(\"type\")).to.equal(\"text/css\");\n          expect(secondTag.getAttribute(\"media\")).to.equal(\"all\");\n          expect(secondTag.outerHTML).to.equal(`<link rel=\"stylesheet\" href=\"http://localhost/inner.css\" type=\"text/css\" media=\"all\" ${HELMET_ATTRIBUTE}=\"true\">`);\n          done();\n        });\n      });","file":"HelmetTest.js","skipped":false,"dir":"test"},{"name":"sets link tags based on deepest nested component","suites":["Helmet","api","link tags"],"updatePoint":{"line":946,"column":58,"index":42501},"line":946,"code":"      it(\"sets link tags based on deepest nested component\", done => {\n        ReactDOM.render( /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(Helmet, {\n          link: [{\n            rel: \"canonical\",\n            href: \"http://localhost/helmet\"\n          }, {\n            href: \"http://localhost/style.css\",\n            rel: \"stylesheet\",\n            type: \"text/css\",\n            media: \"all\"\n          }]\n        }), /*#__PURE__*/React.createElement(Helmet, {\n          link: [{\n            rel: \"canonical\",\n            href: \"http://localhost/helmet/innercomponent\"\n          }, {\n            href: \"http://localhost/inner.css\",\n            rel: \"stylesheet\",\n            type: \"text/css\",\n            media: \"all\"\n          }]\n        })), container);\n        requestAnimationFrame(() => {\n          const tagNodes = headElement.querySelectorAll(`link[${HELMET_ATTRIBUTE}]`);\n          const existingTags = Array.prototype.slice.call(tagNodes);\n          const firstTag = existingTags[0];\n          const secondTag = existingTags[1];\n          const thirdTag = existingTags[2];\n          expect(existingTags).to.not.equal(undefined);\n          expect(existingTags.length).to.be.at.least(2);\n          expect(existingTags).to.have.deep.property(\"[0]\").that.is.an.instanceof(Element);\n          expect(firstTag).to.have.property(\"getAttribute\");\n          expect(firstTag.getAttribute(\"href\")).to.equal(\"http://localhost/style.css\");\n          expect(firstTag.getAttribute(\"rel\")).to.equal(\"stylesheet\");\n          expect(firstTag.getAttribute(\"type\")).to.equal(\"text/css\");\n          expect(firstTag.getAttribute(\"media\")).to.equal(\"all\");\n          expect(firstTag.outerHTML).to.equal(`<link href=\"http://localhost/style.css\" rel=\"stylesheet\" type=\"text/css\" media=\"all\" ${HELMET_ATTRIBUTE}=\"true\">`);\n          expect(existingTags).to.have.deep.property(\"[1]\").that.is.an.instanceof(Element);\n          expect(secondTag).to.have.property(\"getAttribute\");\n          expect(secondTag.getAttribute(\"href\")).to.equal(\"http://localhost/helmet/innercomponent\");\n          expect(secondTag.getAttribute(\"rel\")).to.equal(\"canonical\");\n          expect(secondTag.outerHTML).to.equal(`<link rel=\"canonical\" href=\"http://localhost/helmet/innercomponent\" ${HELMET_ATTRIBUTE}=\"true\">`);\n          expect(existingTags).to.have.deep.property(\"[2]\").that.is.an.instanceof(Element);\n          expect(thirdTag).to.have.property(\"getAttribute\");\n          expect(thirdTag.getAttribute(\"href\")).to.equal(\"http://localhost/inner.css\");\n          expect(thirdTag.getAttribute(\"rel\")).to.equal(\"stylesheet\");\n          expect(thirdTag.getAttribute(\"type\")).to.equal(\"text/css\");\n          expect(thirdTag.getAttribute(\"media\")).to.equal(\"all\");\n          expect(thirdTag.outerHTML).to.equal(`<link href=\"http://localhost/inner.css\" rel=\"stylesheet\" type=\"text/css\" media=\"all\" ${HELMET_ATTRIBUTE}=\"true\">`);\n          done();\n        });\n      });","file":"HelmetTest.js","skipped":false,"dir":"test"},{"name":"allows duplicate link tags if specified in the same component","suites":["Helmet","api","link tags"],"updatePoint":{"line":998,"column":71,"index":45478},"line":998,"code":"      it(\"allows duplicate link tags if specified in the same component\", done => {\n        ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, {\n          link: [{\n            rel: \"canonical\",\n            href: \"http://localhost/helmet\"\n          }, {\n            rel: \"canonical\",\n            href: \"http://localhost/helmet/component\"\n          }]\n        }), container);\n        requestAnimationFrame(() => {\n          const tagNodes = headElement.querySelectorAll(`link[${HELMET_ATTRIBUTE}]`);\n          const existingTags = Array.prototype.slice.call(tagNodes);\n          const firstTag = existingTags[0];\n          const secondTag = existingTags[1];\n          expect(existingTags).to.not.equal(undefined);\n          expect(existingTags.length).to.be.at.least(2);\n          expect(existingTags).to.have.deep.property(\"[0]\").that.is.an.instanceof(Element);\n          expect(firstTag).to.have.property(\"getAttribute\");\n          expect(firstTag.getAttribute(\"rel\")).to.equal(\"canonical\");\n          expect(firstTag.getAttribute(\"href\")).to.equal(\"http://localhost/helmet\");\n          expect(firstTag.outerHTML).to.equal(`<link rel=\"canonical\" href=\"http://localhost/helmet\" ${HELMET_ATTRIBUTE}=\"true\">`);\n          expect(existingTags).to.have.deep.property(\"[1]\").that.is.an.instanceof(Element);\n          expect(secondTag).to.have.property(\"getAttribute\");\n          expect(secondTag.getAttribute(\"rel\")).to.equal(\"canonical\");\n          expect(secondTag.getAttribute(\"href\")).to.equal(\"http://localhost/helmet/component\");\n          expect(secondTag.outerHTML).to.equal(`<link rel=\"canonical\" href=\"http://localhost/helmet/component\" ${HELMET_ATTRIBUTE}=\"true\">`);\n          done();\n        });\n      });","file":"HelmetTest.js","skipped":false,"dir":"test"},{"name":"overrides duplicate link tags with a single link tag in a nested component","suites":["Helmet","api","link tags"],"updatePoint":{"line":1028,"column":84,"index":47209},"line":1028,"code":"      it(\"overrides duplicate link tags with a single link tag in a nested component\", done => {\n        ReactDOM.render( /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(Helmet, {\n          link: [{\n            rel: \"canonical\",\n            href: \"http://localhost/helmet\"\n          }, {\n            rel: \"canonical\",\n            href: \"http://localhost/helmet/component\"\n          }]\n        }), /*#__PURE__*/React.createElement(Helmet, {\n          link: [{\n            rel: \"canonical\",\n            href: \"http://localhost/helmet/innercomponent\"\n          }]\n        })), container);\n        requestAnimationFrame(() => {\n          const tagNodes = headElement.querySelectorAll(`link[${HELMET_ATTRIBUTE}]`);\n          const existingTags = Array.prototype.slice.call(tagNodes);\n          const firstTag = existingTags[0];\n          expect(existingTags).to.not.equal(undefined);\n          expect(existingTags.length).to.be.equal(1);\n          expect(existingTags).to.have.deep.property(\"[0]\").that.is.an.instanceof(Element);\n          expect(firstTag).to.have.property(\"getAttribute\");\n          expect(firstTag.getAttribute(\"rel\")).to.equal(\"canonical\");\n          expect(firstTag.getAttribute(\"href\")).to.equal(\"http://localhost/helmet/innercomponent\");\n          expect(firstTag.outerHTML).to.equal(`<link rel=\"canonical\" href=\"http://localhost/helmet/innercomponent\" ${HELMET_ATTRIBUTE}=\"true\">`);\n          done();\n        });\n      });","file":"HelmetTest.js","skipped":false,"dir":"test"},{"name":"overrides single link tag with duplicate link tags in a nested component","suites":["Helmet","api","link tags"],"updatePoint":{"line":1057,"column":82,"index":48680},"line":1057,"code":"      it(\"overrides single link tag with duplicate link tags in a nested component\", done => {\n        ReactDOM.render( /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(Helmet, {\n          link: [{\n            rel: \"canonical\",\n            href: \"http://localhost/helmet\"\n          }]\n        }), /*#__PURE__*/React.createElement(Helmet, {\n          link: [{\n            rel: \"canonical\",\n            href: \"http://localhost/helmet/component\"\n          }, {\n            rel: \"canonical\",\n            href: \"http://localhost/helmet/innercomponent\"\n          }]\n        })), container);\n        requestAnimationFrame(() => {\n          const tagNodes = headElement.querySelectorAll(`link[${HELMET_ATTRIBUTE}]`);\n          const existingTags = Array.prototype.slice.call(tagNodes);\n          const firstTag = existingTags[0];\n          const secondTag = existingTags[1];\n          expect(existingTags).to.not.equal(undefined);\n          expect(existingTags.length).to.be.equal(2);\n          expect(existingTags).to.have.deep.property(\"[0]\").that.is.an.instanceof(Element);\n          expect(firstTag).to.have.property(\"getAttribute\");\n          expect(firstTag.getAttribute(\"rel\")).to.equal(\"canonical\");\n          expect(firstTag.getAttribute(\"href\")).to.equal(\"http://localhost/helmet/component\");\n          expect(firstTag.outerHTML).to.equal(`<link rel=\"canonical\" href=\"http://localhost/helmet/component\" ${HELMET_ATTRIBUTE}=\"true\">`);\n          expect(existingTags).to.have.deep.property(\"[1]\").that.is.an.instanceof(Element);\n          expect(secondTag).to.have.property(\"getAttribute\");\n          expect(secondTag.getAttribute(\"rel\")).to.equal(\"canonical\");\n          expect(secondTag.getAttribute(\"href\")).to.equal(\"http://localhost/helmet/innercomponent\");\n          expect(secondTag.outerHTML).to.equal(`<link rel=\"canonical\" href=\"http://localhost/helmet/innercomponent\" ${HELMET_ATTRIBUTE}=\"true\">`);\n          done();\n        });\n      });","file":"HelmetTest.js","skipped":false,"dir":"test"},{"name":"does not render tag when primary attribute is null","suites":["Helmet","api","link tags"],"updatePoint":{"line":1092,"column":60,"index":50637},"line":1092,"code":"      it(\"does not render tag when primary attribute is null\", done => {\n        ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, {\n          link: [{\n            rel: \"icon\",\n            sizes: \"192x192\",\n            href: null\n          }, {\n            rel: \"canonical\",\n            href: \"http://localhost/helmet/component\"\n          }]\n        }), container);\n        requestAnimationFrame(() => {\n          const tagNodes = headElement.querySelectorAll(`link[${HELMET_ATTRIBUTE}]`);\n          const existingTags = Array.prototype.slice.call(tagNodes);\n          const firstTag = existingTags[0];\n          expect(existingTags).to.not.equal(undefined);\n          expect(existingTags.length).to.be.equal(1);\n          expect(existingTags).to.have.deep.property(\"[0]\").that.is.an.instanceof(Element);\n          expect(firstTag).to.have.property(\"getAttribute\");\n          expect(firstTag.getAttribute(\"rel\")).to.equal(\"canonical\");\n          expect(firstTag.getAttribute(\"href\")).to.equal(\"http://localhost/helmet/component\");\n          expect(firstTag.outerHTML).to.equal(`<link rel=\"canonical\" href=\"http://localhost/helmet/component\" ${HELMET_ATTRIBUTE}=\"true\">`);\n          done();\n        });\n      });","file":"HelmetTest.js","skipped":false,"dir":"test"},{"name":"updates script tags","suites":["Helmet","api","script tags"],"updatePoint":{"line":1119,"column":29,"index":51870},"line":1119,"code":"      it(\"updates script tags\", done => {\n        const scriptInnerHTML = `\n                  {\n                    \"@context\": \"http://schema.org\",\n                    \"@type\": \"NewsArticle\",\n                    \"url\": \"http://localhost/helmet\"\n                  }\n                `;\n        ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, {\n          script: [{\n            src: \"http://localhost/test.js\",\n            type: \"text/javascript\"\n          }, {\n            src: \"http://localhost/test2.js\",\n            type: \"text/javascript\"\n          }, {\n            type: \"application/ld+json\",\n            innerHTML: scriptInnerHTML\n          }]\n        }), container);\n        requestAnimationFrame(() => {\n          const existingTags = headElement.getElementsByTagName(\"script\");\n          expect(existingTags).to.not.equal(undefined);\n          const filteredTags = [].slice.call(existingTags).filter(tag => {\n            return tag.getAttribute(\"src\") === \"http://localhost/test.js\" && tag.getAttribute(\"type\") === \"text/javascript\" || tag.getAttribute(\"src\") === \"http://localhost/test2.js\" && tag.getAttribute(\"type\") === \"text/javascript\" || tag.getAttribute(\"type\") === \"application/ld+json\" && tag.innerHTML === scriptInnerHTML;\n          });\n          expect(filteredTags.length).to.be.at.least(3);\n          done();\n        });\n      });","file":"HelmetTest.js","skipped":false,"dir":"test"},{"name":"clears all scripts tags if none are specified","suites":["Helmet","api","script tags"],"updatePoint":{"line":1149,"column":55,"index":53260},"line":1149,"code":"      it(\"clears all scripts tags if none are specified\", done => {\n        ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, {\n          script: [{\n            src: \"http://localhost/test.js\",\n            type: \"text/javascript\"\n          }]\n        }), container);\n        requestAnimationFrame(() => {\n          ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, null), container);\n          requestAnimationFrame(() => {\n            const existingTags = headElement.querySelectorAll(`script[${HELMET_ATTRIBUTE}]`);\n            expect(existingTags).to.not.equal(undefined);\n            expect(existingTags.length).to.equal(0);\n            done();\n          });\n        });\n      });","file":"HelmetTest.js","skipped":false,"dir":"test"},{"name":"tags without 'src' are not accepted","suites":["Helmet","api","script tags"],"updatePoint":{"line":1166,"column":45,"index":53951},"line":1166,"code":"      it(\"tags without 'src' are not accepted\", done => {\n        ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, {\n          script: [{\n            property: \"won't work\"\n          }]\n        }), container);\n        requestAnimationFrame(() => {\n          const existingTags = headElement.querySelectorAll(`script[${HELMET_ATTRIBUTE}]`);\n          expect(existingTags).to.not.equal(undefined);\n          expect(existingTags.length).to.equal(0);\n          done();\n        });\n      });","file":"HelmetTest.js","skipped":false,"dir":"test"},{"name":"sets script tags based on deepest nested component","suites":["Helmet","api","script tags"],"updatePoint":{"line":1179,"column":60,"index":54462},"line":1179,"code":"      it(\"sets script tags based on deepest nested component\", done => {\n        ReactDOM.render( /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(Helmet, {\n          script: [{\n            src: \"http://localhost/test.js\",\n            type: \"text/javascript\"\n          }]\n        }), /*#__PURE__*/React.createElement(Helmet, {\n          script: [{\n            src: \"http://localhost/test2.js\",\n            type: \"text/javascript\"\n          }]\n        })), container);\n        requestAnimationFrame(() => {\n          const tagNodes = headElement.querySelectorAll(`script[${HELMET_ATTRIBUTE}]`);\n          const existingTags = Array.prototype.slice.call(tagNodes);\n          const firstTag = existingTags[0];\n          const secondTag = existingTags[1];\n          expect(existingTags).to.not.equal(undefined);\n          expect(existingTags.length).to.be.at.least(2);\n          expect(existingTags).to.have.deep.property(\"[0]\").that.is.an.instanceof(Element);\n          expect(firstTag).to.have.property(\"getAttribute\");\n          expect(firstTag.getAttribute(\"src\")).to.equal(\"http://localhost/test.js\");\n          expect(firstTag.getAttribute(\"type\")).to.equal(\"text/javascript\");\n          expect(firstTag.outerHTML).to.equal(`<script src=\"http://localhost/test.js\" type=\"text/javascript\" ${HELMET_ATTRIBUTE}=\"true\"></script>`);\n          expect(existingTags).to.have.deep.property(\"[1]\").that.is.an.instanceof(Element);\n          expect(secondTag).to.have.property(\"getAttribute\");\n          expect(secondTag.getAttribute(\"src\")).to.equal(\"http://localhost/test2.js\");\n          expect(secondTag.getAttribute(\"type\")).to.equal(\"text/javascript\");\n          expect(secondTag.outerHTML).to.equal(`<script src=\"http://localhost/test2.js\" type=\"text/javascript\" ${HELMET_ATTRIBUTE}=\"true\"></script>`);\n          done();\n        });\n      });","file":"HelmetTest.js","skipped":false,"dir":"test"},{"name":"sets undefined attribute values to empty strings","suites":["Helmet","api","script tags"],"updatePoint":{"line":1211,"column":58,"index":56329},"line":1211,"code":"      it(\"sets undefined attribute values to empty strings\", done => {\n        ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, {\n          script: [{\n            src: \"foo.js\",\n            async: undefined\n          }]\n        }), container);\n        requestAnimationFrame(() => {\n          const existingTag = headElement.querySelector(`script[${HELMET_ATTRIBUTE}]`);\n          expect(existingTag).to.not.equal(undefined);\n          expect(existingTag.outerHTML).to.be.a(\"string\").that.equals(`<script src=\"foo.js\" async=\"\" ${HELMET_ATTRIBUTE}=\"true\"></script>`);\n          done();\n        });\n      });","file":"HelmetTest.js","skipped":false,"dir":"test"},{"name":"does not render tag when primary attribute (src) is null","suites":["Helmet","api","script tags"],"updatePoint":{"line":1225,"column":66,"index":56952},"line":1225,"code":"      it(\"does not render tag when primary attribute (src) is null\", done => {\n        ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, {\n          script: [{\n            src: undefined,\n            type: \"text/javascript\"\n          }]\n        }), container);\n        requestAnimationFrame(() => {\n          const tagNodes = headElement.querySelectorAll(`script[${HELMET_ATTRIBUTE}]`);\n          const existingTags = Array.prototype.slice.call(tagNodes);\n          expect(existingTags).to.be.empty;\n          done();\n        });\n      });","file":"HelmetTest.js","skipped":false,"dir":"test"},{"name":"does not render tag when primary attribute (innerHTML) is null","suites":["Helmet","api","script tags"],"updatePoint":{"line":1239,"column":72,"index":57506},"line":1239,"code":"      it(\"does not render tag when primary attribute (innerHTML) is null\", done => {\n        ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, {\n          script: [{\n            innerHTML: undefined\n          }]\n        }), container);\n        requestAnimationFrame(() => {\n          const tagNodes = headElement.querySelectorAll(`script[${HELMET_ATTRIBUTE}]`);\n          const existingTags = Array.prototype.slice.call(tagNodes);\n          expect(existingTags).to.be.empty;\n          done();\n        });\n      });","file":"HelmetTest.js","skipped":false,"dir":"test"},{"name":"updates noscript tags","suites":["Helmet","api","noscript tags"],"updatePoint":{"line":1254,"column":31,"index":58034},"line":1254,"code":"      it(\"updates noscript tags\", done => {\n        const noscriptInnerHTML = `<link rel=\"stylesheet\" type=\"text/css\" href=\"foo.css\" />`;\n        ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, {\n          noscript: [{\n            id: \"bar\",\n            innerHTML: noscriptInnerHTML\n          }]\n        }), container);\n        requestAnimationFrame(() => {\n          const existingTags = headElement.getElementsByTagName(\"noscript\");\n          expect(existingTags).to.not.equal(undefined);\n          expect(existingTags.length).to.equal(1);\n          expect(existingTags[0].innerHTML === noscriptInnerHTML && existingTags[0].id === \"bar\");\n          done();\n        });\n      });","file":"HelmetTest.js","skipped":false,"dir":"test"},{"name":"clears all noscripts tags if none are specified","suites":["Helmet","api","noscript tags"],"updatePoint":{"line":1270,"column":57,"index":58751},"line":1270,"code":"      it(\"clears all noscripts tags if none are specified\", done => {\n        ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, {\n          noscript: [{\n            id: \"bar\"\n          }]\n        }), container);\n        requestAnimationFrame(() => {\n          ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, null), container);\n          requestAnimationFrame(() => {\n            const existingTags = headElement.querySelectorAll(`script[${HELMET_ATTRIBUTE}]`);\n            expect(existingTags).to.not.equal(undefined);\n            expect(existingTags.length).to.equal(0);\n            done();\n          });\n        });\n      });","file":"HelmetTest.js","skipped":false,"dir":"test"},{"name":"tags without 'innerHTML' are not accepted","suites":["Helmet","api","noscript tags"],"updatePoint":{"line":1286,"column":51,"index":59391},"line":1286,"code":"      it(\"tags without 'innerHTML' are not accepted\", done => {\n        ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, {\n          noscript: [{\n            property: \"won't work\"\n          }]\n        }), container);\n        requestAnimationFrame(() => {\n          const existingTags = headElement.querySelectorAll(`noscript[${HELMET_ATTRIBUTE}]`);\n          expect(existingTags).to.not.equal(undefined);\n          expect(existingTags.length).to.equal(0);\n          done();\n        });\n      });","file":"HelmetTest.js","skipped":false,"dir":"test"},{"name":"does not render tag when primary attribute is null","suites":["Helmet","api","noscript tags"],"updatePoint":{"line":1299,"column":60,"index":59906},"line":1299,"code":"      it(\"does not render tag when primary attribute is null\", done => {\n        ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, {\n          noscript: [{\n            innerHTML: undefined\n          }]\n        }), container);\n        requestAnimationFrame(() => {\n          const tagNodes = headElement.querySelectorAll(`noscript[${HELMET_ATTRIBUTE}]`);\n          const existingTags = Array.prototype.slice.call(tagNodes);\n          expect(existingTags).to.be.empty;\n          done();\n        });\n      });","file":"HelmetTest.js","skipped":false,"dir":"test"},{"name":"updates style tags","suites":["Helmet","api","style tags"],"updatePoint":{"line":1314,"column":28,"index":60432},"line":1314,"code":"      it(\"updates style tags\", done => {\n        const cssText1 = `\n                    body {\n                        background-color: green;\n                    }\n                `;\n        const cssText2 = `\n                    p {\n                        font-size: 12px;\n                    }\n                `;\n        ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, {\n          style: [{\n            type: \"text/css\",\n            cssText: cssText1\n          }, {\n            cssText: cssText2\n          }]\n        }), container);\n        requestAnimationFrame(() => {\n          const tagNodes = headElement.querySelectorAll(`style[${HELMET_ATTRIBUTE}]`);\n          const existingTags = Array.prototype.slice.call(tagNodes);\n          const [firstTag, secondTag] = existingTags;\n          expect(existingTags).to.not.equal(undefined);\n          expect(existingTags.length).to.be.equal(2);\n          expect(existingTags).to.have.deep.property(\"[0]\").that.is.an.instanceof(Element);\n          expect(firstTag).to.have.property(\"getAttribute\");\n          expect(firstTag.getAttribute(\"type\")).to.equal(\"text/css\");\n          expect(firstTag.innerHTML).to.equal(cssText1);\n          expect(firstTag.outerHTML).to.equal(`<style type=\"text/css\" ${HELMET_ATTRIBUTE}=\"true\">${cssText1}</style>`);\n          expect(existingTags).to.have.deep.property(\"[1]\").that.is.an.instanceof(Element);\n          expect(secondTag.innerHTML).to.equal(cssText2);\n          expect(secondTag.outerHTML).to.equal(`<style ${HELMET_ATTRIBUTE}=\"true\">${cssText2}</style>`);\n          done();\n        });\n      });","file":"HelmetTest.js","skipped":false,"dir":"test"},{"name":"clears all style tags if none are specified","suites":["Helmet","api","style tags"],"updatePoint":{"line":1350,"column":53,"index":62058},"line":1350,"code":"      it(\"clears all style tags if none are specified\", done => {\n        const cssText = `\n                    body {\n                        background-color: green;\n                    }\n                `;\n        ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, {\n          style: [{\n            type: \"text/css\",\n            cssText\n          }]\n        }), container);\n        requestAnimationFrame(() => {\n          ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, null), container);\n          requestAnimationFrame(() => {\n            const existingTags = headElement.querySelectorAll(`style[${HELMET_ATTRIBUTE}]`);\n            expect(existingTags).to.not.equal(undefined);\n            expect(existingTags.length).to.equal(0);\n            done();\n          });\n        });\n      });","file":"HelmetTest.js","skipped":false,"dir":"test"},{"name":"tags without 'cssText' are not accepted","suites":["Helmet","api","style tags"],"updatePoint":{"line":1372,"column":49,"index":62863},"line":1372,"code":"      it(\"tags without 'cssText' are not accepted\", done => {\n        ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, {\n          style: [{\n            property: \"won't work\"\n          }]\n        }), container);\n        requestAnimationFrame(() => {\n          const existingTags = headElement.querySelectorAll(`style[${HELMET_ATTRIBUTE}]`);\n          expect(existingTags).to.not.equal(undefined);\n          expect(existingTags.length).to.equal(0);\n          done();\n        });\n      });","file":"HelmetTest.js","skipped":false,"dir":"test"},{"name":"does not render tag when primary attribute is null","suites":["Helmet","api","style tags"],"updatePoint":{"line":1385,"column":60,"index":63372},"line":1385,"code":"      it(\"does not render tag when primary attribute is null\", done => {\n        ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, {\n          style: [{\n            cssText: undefined\n          }]\n        }), container);\n        requestAnimationFrame(() => {\n          const tagNodes = headElement.querySelectorAll(`style[${HELMET_ATTRIBUTE}]`);\n          const existingTags = Array.prototype.slice.call(tagNodes);\n          expect(existingTags).to.be.empty;\n          done();\n        });\n      });","file":"HelmetTest.js","skipped":false,"dir":"test"},{"name":"executes synchronously when defer={true} and async otherwise","suites":["Helmet","deferred tags"],"updatePoint":{"line":1407,"column":68,"index":64063},"line":1407,"code":"    it(\"executes synchronously when defer={true} and async otherwise\", done => {\n      ReactDOM.render( /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(Helmet, {\n        defer: false,\n        script: [{\n          innerHTML: `window.__spy__(1)`\n        }]\n      }), /*#__PURE__*/React.createElement(Helmet, {\n        script: [{\n          innerHTML: `window.__spy__(2)`\n        }]\n      })), container);\n      expect(window.__spy__.callCount).to.equal(1);\n      requestAnimationFrame(() => {\n        expect(window.__spy__.callCount).to.equal(2);\n        expect(window.__spy__.args).to.deep.equal([[1], [2]]);\n        done();\n      });\n    });","file":"HelmetTest.js","skipped":false,"dir":"test"},{"name":"provides initial values if no state is found","suites":["Helmet","server"],"updatePoint":{"line":1444,"column":52,"index":67760},"line":1444,"code":"    it(\"provides initial values if no state is found\", () => {\n      let head = Helmet.rewind();\n      head = Helmet.rewind();\n      expect(head.meta).to.exist;\n      expect(head.meta).to.respondTo(\"toString\");\n      expect(head.meta.toString()).to.equal(\"\");\n    });","file":"HelmetTest.js","skipped":false,"dir":"test"},{"name":"encodes special characters in title","suites":["Helmet","server"],"updatePoint":{"line":1451,"column":43,"index":68019},"line":1451,"code":"    it(\"encodes special characters in title\", () => {\n      ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, {\n        title: \"Dangerous <script> include\"\n      }), container);\n      const head = Helmet.rewind();\n      expect(head.title).to.exist;\n      expect(head.title).to.respondTo(\"toString\");\n      expect(head.title.toString()).to.equal(stringifiedTitle);\n    });","file":"HelmetTest.js","skipped":false,"dir":"test"},{"name":"opts out of string encoding","suites":["Helmet","server"],"updatePoint":{"line":1460,"column":35,"index":68391},"line":1460,"code":"    it(\"opts out of string encoding\", () => {\n      ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, {\n        encodeSpecialCharacters: false,\n        title: \"This is text and & and '.\"\n      }), container);\n      const head = Helmet.rewind();\n      expect(head.title).to.exist;\n      expect(head.title).to.respondTo(\"toString\");\n      expect(head.title.toString()).to.equal(unEncodedStringifiedTitle);\n    });","file":"HelmetTest.js","skipped":false,"dir":"test"},{"name":"renders title as React component","suites":["Helmet","server"],"updatePoint":{"line":1470,"column":40,"index":68816},"line":1470,"code":"    it(\"renders title as React component\", () => {\n      ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, {\n        title: \"Dangerous <script> include\"\n      }), container);\n      const head = Helmet.rewind();\n      expect(head.title).to.exist;\n      expect(head.title).to.respondTo(\"toComponent\");\n      const titleComponent = head.title.toComponent();\n      expect(titleComponent).to.be.an(\"array\").that.has.length.of(1);\n      titleComponent.forEach(title => {\n        expect(title).to.be.an(\"object\").that.contains.property(\"type\", \"title\");\n      });\n      const markup = ReactServer.renderToStaticMarkup( /*#__PURE__*/React.createElement(\"div\", null, titleComponent));\n      expect(markup).to.be.a(\"string\").that.equals(`<div>${stringifiedTitle}</div>`);\n    });","file":"HelmetTest.js","skipped":false,"dir":"test"},{"name":"renders title with itemprop name as React component","suites":["Helmet","server"],"updatePoint":{"line":1485,"column":59,"index":69613},"line":1485,"code":"    it(\"renders title with itemprop name as React component\", () => {\n      ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, {\n        title: \"Title with Itemprop\",\n        titleAttributes: {\n          itemprop: \"name\"\n        }\n      }), container);\n      const head = Helmet.rewind();\n      expect(head.title).to.exist;\n      expect(head.title).to.respondTo(\"toComponent\");\n      const titleComponent = head.title.toComponent();\n      expect(titleComponent).to.be.an(\"array\").that.has.length.of(1);\n      titleComponent.forEach(title => {\n        expect(title).to.be.an(\"object\").that.contains.property(\"type\", \"title\");\n      });\n      const markup = ReactServer.renderToStaticMarkup( /*#__PURE__*/React.createElement(\"div\", null, titleComponent));\n      expect(markup).to.be.a(\"string\").that.equals(`<div>${stringifiedTitleWithItempropFromServer}</div>`);\n    });","file":"HelmetTest.js","skipped":false,"dir":"test"},{"name":"renders base tag as React component","suites":["Helmet","server"],"updatePoint":{"line":1503,"column":43,"index":70474},"line":1503,"code":"    it(\"renders base tag as React component\", () => {\n      ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, {\n        base: {\n          target: \"_blank\",\n          href: \"http://localhost/\"\n        }\n      }), container);\n      const head = Helmet.rewind();\n      expect(head.base).to.exist;\n      expect(head.base).to.respondTo(\"toComponent\");\n      const baseComponent = head.base.toComponent();\n      expect(baseComponent).to.be.an(\"array\").that.has.length.of(1);\n      baseComponent.forEach(base => {\n        expect(base).to.be.an(\"object\").that.contains.property(\"type\", \"base\");\n      });\n      const markup = ReactServer.renderToStaticMarkup( /*#__PURE__*/React.createElement(\"div\", null, baseComponent));\n      expect(markup).to.be.a(\"string\").that.equals(`<div>${stringifiedBaseTag}</div>`);\n    });","file":"HelmetTest.js","skipped":false,"dir":"test"},{"name":"renders meta tags as React components","suites":["Helmet","server"],"updatePoint":{"line":1521,"column":45,"index":71295},"line":1521,"code":"    it(\"renders meta tags as React components\", () => {\n      ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, {\n        meta: [{\n          charset: \"utf-8\"\n        }, {\n          name: \"description\",\n          content: \"Test description & encoding of special characters like ' \\\" > < `\"\n        }, {\n          \"http-equiv\": \"content-type\",\n          content: \"text/html\"\n        }, {\n          property: \"og:type\",\n          content: \"article\"\n        }, {\n          itemprop: \"name\",\n          content: \"Test name itemprop\"\n        }]\n      }), container);\n      const head = Helmet.rewind();\n      expect(head.meta).to.exist;\n      expect(head.meta).to.respondTo(\"toComponent\");\n      const metaComponent = head.meta.toComponent();\n      expect(metaComponent).to.be.an(\"array\").that.has.length.of(5);\n      metaComponent.forEach(meta => {\n        expect(meta).to.be.an(\"object\").that.contains.property(\"type\", \"meta\");\n      });\n      const markup = ReactServer.renderToStaticMarkup( /*#__PURE__*/React.createElement(\"div\", null, metaComponent));\n      expect(markup).to.be.a(\"string\").that.equals(`<div>${stringifiedMetaTagsFromServer}</div>`);\n    });","file":"HelmetTest.js","skipped":false,"dir":"test"},{"name":"renders link tags as React components","suites":["Helmet","server"],"updatePoint":{"line":1550,"column":45,"index":72461},"line":1550,"code":"    it(\"renders link tags as React components\", () => {\n      ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, {\n        link: [{\n          href: \"http://localhost/helmet\",\n          rel: \"canonical\"\n        }, {\n          href: \"http://localhost/style.css\",\n          rel: \"stylesheet\",\n          type: \"text/css\"\n        }]\n      }), container);\n      const head = Helmet.rewind();\n      expect(head.link).to.exist;\n      expect(head.link).to.respondTo(\"toComponent\");\n      const linkComponent = head.link.toComponent();\n      expect(linkComponent).to.be.an(\"array\").that.has.length.of(2);\n      linkComponent.forEach(link => {\n        expect(link).to.be.an(\"object\").that.contains.property(\"type\", \"link\");\n      });\n      const markup = ReactServer.renderToStaticMarkup( /*#__PURE__*/React.createElement(\"div\", null, linkComponent));\n      expect(markup).to.be.a(\"string\").that.equals(`<div>${stringifiedLinkTags}</div>`);\n    });","file":"HelmetTest.js","skipped":false,"dir":"test"},{"name":"renders script tags as React components","suites":["Helmet","server"],"updatePoint":{"line":1572,"column":47,"index":73408},"line":1572,"code":"    it(\"renders script tags as React components\", () => {\n      ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, {\n        script: [{\n          src: \"http://localhost/test.js\",\n          type: \"text/javascript\"\n        }, {\n          src: \"http://localhost/test2.js\",\n          type: \"text/javascript\"\n        }]\n      }), container);\n      const head = Helmet.rewind();\n      expect(head.script).to.exist;\n      expect(head.script).to.respondTo(\"toComponent\");\n      const scriptComponent = head.script.toComponent();\n      expect(scriptComponent).to.be.an(\"array\").that.has.length.of(2);\n      scriptComponent.forEach(script => {\n        expect(script).to.be.an(\"object\").that.contains.property(\"type\", \"script\");\n      });\n      const markup = ReactServer.renderToStaticMarkup( /*#__PURE__*/React.createElement(\"div\", null, scriptComponent));\n      expect(markup).to.be.a(\"string\").that.equals(`<div>${stringifiedScriptTags}</div>`);\n    });","file":"HelmetTest.js","skipped":false,"dir":"test"},{"name":"renders noscript tags as React components","suites":["Helmet","server"],"updatePoint":{"line":1593,"column":49,"index":74364},"line":1593,"code":"    it(\"renders noscript tags as React components\", () => {\n      ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, {\n        noscript: [{\n          id: \"foo\",\n          innerHTML: '<link rel=\"stylesheet\" type=\"text/css\" href=\"/style.css\" />'\n        }, {\n          id: \"bar\",\n          innerHTML: '<link rel=\"stylesheet\" type=\"text/css\" href=\"/style2.css\" />'\n        }]\n      }), container);\n      const head = Helmet.rewind();\n      expect(head.noscript).to.exist;\n      expect(head.noscript).to.respondTo(\"toComponent\");\n      const noscriptComponent = head.noscript.toComponent();\n      expect(noscriptComponent).to.be.an(\"array\").that.has.length.of(2);\n      noscriptComponent.forEach(noscript => {\n        expect(noscript).to.be.an(\"object\").that.contains.property(\"type\", \"noscript\");\n      });\n      const markup = ReactServer.renderToStaticMarkup( /*#__PURE__*/React.createElement(\"div\", null, noscriptComponent));\n      expect(markup).to.be.a(\"string\").that.equals(`<div>${stringifiedNoscriptTags}</div>`);\n    });","file":"HelmetTest.js","skipped":false,"dir":"test"},{"name":"renders style tags as React components","suites":["Helmet","server"],"updatePoint":{"line":1614,"column":46,"index":75395},"line":1614,"code":"    it(\"renders style tags as React components\", () => {\n      ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, {\n        style: [{\n          type: \"text/css\",\n          cssText: `body {background-color: green;}`\n        }, {\n          type: \"text/css\",\n          cssText: `p {font-size: 12px;}`\n        }]\n      }), container);\n      const head = Helmet.rewind();\n      expect(head.style).to.exist;\n      expect(head.style).to.respondTo(\"toComponent\");\n      const styleComponent = head.style.toComponent();\n      expect(styleComponent).to.be.an(\"array\").that.has.length.of(2);\n      const markup = ReactServer.renderToStaticMarkup( /*#__PURE__*/React.createElement(\"div\", null, styleComponent));\n      expect(markup).to.be.a(\"string\").that.equals(`<div>${stringifiedStyleTags}</div>`);\n    });","file":"HelmetTest.js","skipped":false,"dir":"test"},{"name":"renders title tag as string","suites":["Helmet","server"],"updatePoint":{"line":1632,"column":35,"index":76189},"line":1632,"code":"    it(\"renders title tag as string\", () => {\n      ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, {\n        title: \"Dangerous <script> include\"\n      }), container);\n      const head = Helmet.rewind();\n      expect(head.title).to.exist;\n      expect(head.title).to.respondTo(\"toString\");\n      expect(head.title.toString()).to.be.a(\"string\").that.equals(stringifiedTitle);\n    });","file":"HelmetTest.js","skipped":false,"dir":"test"},{"name":"renders title with itemprop name as string","suites":["Helmet","server"],"updatePoint":{"line":1641,"column":50,"index":76597},"line":1641,"code":"    it(\"renders title with itemprop name as string\", () => {\n      ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, {\n        title: \"Title with Itemprop\",\n        titleAttributes: {\n          itemprop: \"name\"\n        }\n      }), container);\n      const head = Helmet.rewind();\n      expect(head.title).to.exist;\n      expect(head.title).to.respondTo(\"toString\");\n      const titleString = head.title.toString();\n      expect(titleString).to.be.a(\"string\").that.equals(stringifiedTitleWithItemprop);\n    });","file":"HelmetTest.js","skipped":false,"dir":"test"},{"name":"renders base tags as string","suites":["Helmet","server"],"updatePoint":{"line":1654,"column":35,"index":77099},"line":1654,"code":"    it(\"renders base tags as string\", () => {\n      ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, {\n        base: {\n          target: \"_blank\",\n          href: \"http://localhost/\"\n        }\n      }), container);\n      const head = Helmet.rewind();\n      expect(head.base).to.exist;\n      expect(head.base).to.respondTo(\"toString\");\n      expect(head.base.toString()).to.be.a(\"string\").that.equals(stringifiedBaseTag);\n    });","file":"HelmetTest.js","skipped":false,"dir":"test"},{"name":"renders meta tags as string","suites":["Helmet","server"],"updatePoint":{"line":1666,"column":35,"index":77537},"line":1666,"code":"    it(\"renders meta tags as string\", () => {\n      ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, {\n        meta: [{\n          charset: \"utf-8\"\n        }, {\n          name: \"description\",\n          content: \"Test description & encoding of special characters like ' \\\" > < `\"\n        }, {\n          \"http-equiv\": \"content-type\",\n          content: \"text/html\"\n        }, {\n          property: \"og:type\",\n          content: \"article\"\n        }, {\n          itemprop: \"name\",\n          content: \"Test name itemprop\"\n        }]\n      }), container);\n      const head = Helmet.rewind();\n      expect(head.meta).to.exist;\n      expect(head.meta).to.respondTo(\"toString\");\n      expect(head.meta.toString()).to.be.a(\"string\").that.equals(stringifiedMetaTags);\n    });","file":"HelmetTest.js","skipped":false,"dir":"test"},{"name":"renders link tags as string","suites":["Helmet","server"],"updatePoint":{"line":1689,"column":35,"index":78310},"line":1689,"code":"    it(\"renders link tags as string\", () => {\n      ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, {\n        link: [{\n          href: \"http://localhost/helmet\",\n          rel: \"canonical\"\n        }, {\n          href: \"http://localhost/style.css\",\n          rel: \"stylesheet\",\n          type: \"text/css\"\n        }]\n      }), container);\n      const head = Helmet.rewind();\n      expect(head.link).to.exist;\n      expect(head.link).to.respondTo(\"toString\");\n      expect(head.link.toString()).to.be.a(\"string\").that.equals(stringifiedLinkTags);\n    });","file":"HelmetTest.js","skipped":false,"dir":"test"},{"name":"renders script tags as string","suites":["Helmet","server"],"updatePoint":{"line":1705,"column":37,"index":78874},"line":1705,"code":"    it(\"renders script tags as string\", () => {\n      ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, {\n        script: [{\n          src: \"http://localhost/test.js\",\n          type: \"text/javascript\"\n        }, {\n          src: \"http://localhost/test2.js\",\n          type: \"text/javascript\"\n        }]\n      }), container);\n      const head = Helmet.rewind();\n      expect(head.script).to.exist;\n      expect(head.script).to.respondTo(\"toString\");\n      expect(head.script.toString()).to.be.a(\"string\").that.equals(stringifiedScriptTags);\n    });","file":"HelmetTest.js","skipped":false,"dir":"test"},{"name":"renders style tags as string","suites":["Helmet","server"],"updatePoint":{"line":1720,"column":36,"index":79430},"line":1720,"code":"    it(\"renders style tags as string\", () => {\n      ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, {\n        style: [{\n          type: \"text/css\",\n          cssText: `body {background-color: green;}`\n        }, {\n          type: \"text/css\",\n          cssText: `p {font-size: 12px;}`\n        }]\n      }), container);\n      const head = Helmet.rewind();\n      expect(head.style).to.exist;\n      expect(head.style).to.respondTo(\"toString\");\n      expect(head.style.toString()).to.be.a(\"string\").that.equals(stringifiedStyleTags);\n    });","file":"HelmetTest.js","skipped":false,"dir":"test"},{"name":"renders html attributes as component","suites":["Helmet","server"],"updatePoint":{"line":1735,"column":44,"index":79985},"line":1735,"code":"    it(\"renders html attributes as component\", () => {\n      ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, {\n        htmlAttributes: {\n          lang: \"ga\",\n          className: \"myClassName\"\n        }\n      }), container);\n      const {\n        htmlAttributes\n      } = Helmet.rewind();\n      const attrs = htmlAttributes.toComponent();\n      expect(attrs).to.exist;\n      const markup = ReactServer.renderToStaticMarkup( /*#__PURE__*/React.createElement(\"html\", _extends({\n        lang: \"en\"\n      }, attrs)));\n      expect(markup).to.be.a(\"string\").that.equals(`<html ${stringifiedHtmlAttributes}></html>`);\n    });","file":"HelmetTest.js","skipped":false,"dir":"test"},{"name":"renders html attributes as string","suites":["Helmet","server"],"updatePoint":{"line":1752,"column":41,"index":80613},"line":1752,"code":"    it(\"renders html attributes as string\", () => {\n      ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, {\n        htmlAttributes: {\n          lang: \"ga\",\n          class: \"myClassName\"\n        }\n      }), container);\n      const head = Helmet.rewind();\n      expect(head.htmlAttributes).to.exist;\n      expect(head.htmlAttributes).to.respondTo(\"toString\");\n      expect(head.htmlAttributes.toString()).to.be.a(\"string\").that.equals(stringifiedHtmlAttributes);\n    });","file":"HelmetTest.js","skipped":false,"dir":"test"},{"name":"does not encode all characters with HTML character entity equivalents","suites":["Helmet","server"],"updatePoint":{"line":1764,"column":77,"index":81129},"line":1764,"code":"    it(\"does not encode all characters with HTML character entity equivalents\", () => {\n      const chineseTitle = \"膣膗 鍆錌雔\";\n      const stringifiedChineseTitle = `<title ${HELMET_ATTRIBUTE}=\"true\">${chineseTitle}</title>`;\n      ReactDOM.render( /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(Helmet, {\n        title: chineseTitle\n      })), container);\n      const head = Helmet.rewind();\n      expect(head.title).to.exist;\n      expect(head.title).to.respondTo(\"toString\");\n      expect(head.title.toString()).to.be.a(\"string\").that.equals(stringifiedChineseTitle);\n    });","file":"HelmetTest.js","skipped":false,"dir":"test"},{"name":"rewind() provides a fallback object for empty Helmet state","suites":["Helmet","server"],"updatePoint":{"line":1775,"column":66,"index":81727},"line":1775,"code":"    it(\"rewind() provides a fallback object for empty Helmet state\", () => {\n      ReactDOM.render( /*#__PURE__*/React.createElement(\"div\", null), container);\n      const head = Helmet.rewind();\n      expect(head.htmlAttributes).to.exist;\n      expect(head.htmlAttributes).to.respondTo(\"toString\");\n      expect(head.htmlAttributes.toString()).to.equal(\"\");\n      expect(head.htmlAttributes).to.respondTo(\"toComponent\");\n      expect(head.htmlAttributes.toComponent()).to.be.an(\"object\").that.is.empty;\n      expect(head.title).to.exist;\n      expect(head.title).to.respondTo(\"toString\");\n      expect(head.title.toString()).to.equal(`<title ${HELMET_ATTRIBUTE}=\"true\"></title>`);\n      expect(head.title).to.respondTo(\"toComponent\");\n      const markup = ReactServer.renderToStaticMarkup( /*#__PURE__*/React.createElement(\"div\", null, head.title.toComponent()));\n      expect(markup).to.be.a(\"string\").that.equals(`<div><title ${HELMET_ATTRIBUTE}=\"true\"></title></div>`);\n      expect(head.base).to.exist;\n      expect(head.base).to.respondTo(\"toString\");\n      expect(head.base.toString()).to.equal(\"\");\n      expect(head.base).to.respondTo(\"toComponent\");\n      expect(head.base.toComponent()).to.be.an(\"array\").that.is.empty;\n      expect(head.meta).to.exist;\n      expect(head.meta).to.respondTo(\"toString\");\n      expect(head.meta.toString()).to.equal(\"\");\n      expect(head.meta).to.respondTo(\"toComponent\");\n      expect(head.meta.toComponent()).to.be.an(\"array\").that.is.empty;\n      expect(head.link).to.exist;\n      expect(head.link).to.respondTo(\"toString\");\n      expect(head.link.toString()).to.equal(\"\");\n      expect(head.link).to.respondTo(\"toComponent\");\n      expect(head.link.toComponent()).to.be.an(\"array\").that.is.empty;\n      expect(head.script).to.exist;\n      expect(head.script).to.respondTo(\"toString\");\n      expect(head.script.toString()).to.equal(\"\");\n      expect(head.script).to.respondTo(\"toComponent\");\n      expect(head.script.toComponent()).to.be.an(\"array\").that.is.empty;\n      expect(head.noscript).to.exist;\n      expect(head.noscript).to.respondTo(\"toString\");\n      expect(head.noscript.toString()).to.equal(\"\");\n      expect(head.noscript).to.respondTo(\"toComponent\");\n      expect(head.noscript.toComponent()).to.be.an(\"array\").that.is.empty;\n      expect(head.style).to.exist;\n      expect(head.style).to.respondTo(\"toString\");\n      expect(head.style.toString()).to.equal(\"\");\n      expect(head.style).to.respondTo(\"toComponent\");\n      expect(head.style.toComponent()).to.be.an(\"array\").that.is.empty;\n    });","file":"HelmetTest.js","skipped":false,"dir":"test"},{"name":"does not render undefined attribute values","suites":["Helmet","server"],"updatePoint":{"line":1820,"column":50,"index":84269},"line":1820,"code":"    it(\"does not render undefined attribute values\", () => {\n      ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, {\n        script: [{\n          src: \"foo.js\",\n          async: undefined\n        }]\n      }), container);\n      const {\n        script\n      } = Helmet.rewind();\n      const stringifiedScriptTag = script.toString();\n      expect(stringifiedScriptTag).to.be.a(\"string\").that.equals(`<script ${HELMET_ATTRIBUTE}=\"true\" src=\"foo.js\" async></script>`);\n    });","file":"HelmetTest.js","skipped":false,"dir":"test"},{"name":"throws in rewind() when a DOM is present","suites":["Helmet","misc"],"updatePoint":{"line":1838,"column":48,"index":84839},"line":1838,"code":"    it(\"throws in rewind() when a DOM is present\", () => {\n      ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, {\n        title: \"Fancy title\"\n      }), container);\n      expect(Helmet.rewind).to.throw(\"You may only call rewind() on the server. Call peek() to read the current state.\");\n    });","file":"HelmetTest.js","skipped":false,"dir":"test"},{"name":"lets you read current state in peek() whether or not a DOM is present","suites":["Helmet","misc"],"updatePoint":{"line":1844,"column":77,"index":85174},"line":1844,"code":"    it(\"lets you read current state in peek() whether or not a DOM is present\", done => {\n      ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, {\n        title: \"Fancy title\"\n      }), container);\n      requestAnimationFrame(() => {\n        expect(Helmet.peek().title).to.be.equal(\"Fancy title\");\n        Helmet.canUseDOM = false;\n        expect(Helmet.peek().title).to.be.equal(\"Fancy title\");\n        Helmet.canUseDOM = true;\n        done();\n      });\n    });","file":"HelmetTest.js","skipped":false,"dir":"test"},{"name":"encodes special characters","suites":["Helmet","misc"],"updatePoint":{"line":1856,"column":34,"index":85603},"line":1856,"code":"    it(\"encodes special characters\", done => {\n      ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, {\n        meta: [{\n          name: \"description\",\n          content: 'This is \"quoted\" text and & and \\'.'\n        }]\n      }), container);\n      requestAnimationFrame(() => {\n        const existingTags = headElement.querySelectorAll(`meta[${HELMET_ATTRIBUTE}]`);\n        const existingTag = existingTags[0];\n        expect(existingTags).to.not.equal(undefined);\n        expect(existingTags.length).to.be.equal(1);\n        expect(existingTags).to.have.deep.property(\"[0]\").that.is.an.instanceof(Element);\n        expect(existingTag).to.have.property(\"getAttribute\");\n        expect(existingTag.getAttribute(\"name\")).to.equal(\"description\");\n        expect(existingTag.getAttribute(\"content\")).to.equal('This is \"quoted\" text and & and \\'.');\n        expect(existingTag.outerHTML).to.equal(`<meta name=\"description\" content=\"This is &quot;quoted&quot; text and &amp; and '.\" ${HELMET_ATTRIBUTE}=\"true\">`);\n        done();\n      });\n    });","file":"HelmetTest.js","skipped":false,"dir":"test"},{"name":"does not change the DOM if it receives identical props","suites":["Helmet","misc"],"updatePoint":{"line":1876,"column":62,"index":86681},"line":1876,"code":"    it(\"does not change the DOM if it receives identical props\", done => {\n      const spy = sinon.spy();\n      ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, {\n        meta: [{\n          name: \"description\",\n          content: \"Test description\"\n        }],\n        title: \"Test Title\",\n        onChangeClientState: spy\n      }), container);\n      requestAnimationFrame(() => {\n        // Re-rendering will pass new props to an already mounted Helmet\n        ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, {\n          meta: [{\n            name: \"description\",\n            content: \"Test description\"\n          }],\n          title: \"Test Title\",\n          onChangeClientState: spy\n        }), container);\n        requestAnimationFrame(() => {\n          expect(spy.callCount).to.equal(1);\n          done();\n        });\n      });\n    });","file":"HelmetTest.js","skipped":false,"dir":"test"},{"name":"does not write the DOM if the client and server are identical","suites":["Helmet","misc"],"updatePoint":{"line":1902,"column":69,"index":87546},"line":1902,"code":"    it(\"does not write the DOM if the client and server are identical\", done => {\n      headElement.innerHTML = `<script ${HELMET_ATTRIBUTE}=\"true\" src=\"http://localhost/test.js\" type=\"text/javascript\" />`;\n      const spy = sinon.spy();\n      ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, {\n        script: [{\n          src: \"http://localhost/test.js\",\n          type: \"text/javascript\"\n        }],\n        onChangeClientState: spy\n      }), container);\n      requestAnimationFrame(() => {\n        expect(spy.called).to.equal(true);\n        const [, addedTags, removedTags] = spy.getCall(0).args;\n        expect(addedTags).to.be.empty;\n        expect(removedTags).to.be.empty;\n        done();\n      });\n    });","file":"HelmetTest.js","skipped":false,"dir":"test"},{"name":"only adds new tags and preserves tags when rendering additional Helmet instances","suites":["Helmet","misc"],"updatePoint":{"line":1920,"column":88,"index":88289},"line":1920,"code":"    it(\"only adds new tags and preserves tags when rendering additional Helmet instances\", done => {\n      const spy = sinon.spy();\n      let addedTags;\n      let removedTags;\n      ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, {\n        link: [{\n          href: \"http://localhost/style.css\",\n          rel: \"stylesheet\",\n          type: \"text/css\"\n        }],\n        meta: [{\n          name: \"description\",\n          content: \"Test description\"\n        }],\n        onChangeClientState: spy\n      }), container);\n      requestAnimationFrame(() => {\n        expect(spy.called).to.equal(true);\n        addedTags = spy.getCall(0).args[1];\n        removedTags = spy.getCall(0).args[2];\n        expect(addedTags).to.have.property(\"metaTags\");\n        expect(addedTags.metaTags).to.have.deep.property(\"[0]\");\n        expect(addedTags.metaTags[0].outerHTML).to.equal(`<meta name=\"description\" content=\"Test description\" data-react-helmet=\"true\">`);\n        expect(addedTags).to.have.property(\"linkTags\");\n        expect(addedTags.linkTags).to.have.deep.property(\"[0]\");\n        expect(addedTags.linkTags[0].outerHTML).to.equal(`<link href=\"http://localhost/style.css\" rel=\"stylesheet\" type=\"text/css\" data-react-helmet=\"true\">`);\n        expect(removedTags).to.be.empty;\n\n        // Re-rendering will pass new props to an already mounted Helmet\n        ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, {\n          link: [{\n            href: \"http://localhost/style.css\",\n            rel: \"stylesheet\",\n            type: \"text/css\"\n          }, {\n            href: \"http://localhost/style2.css\",\n            rel: \"stylesheet\",\n            type: \"text/css\"\n          }],\n          meta: [{\n            name: \"description\",\n            content: \"New description\"\n          }],\n          onChangeClientState: spy\n        }), container);\n        requestAnimationFrame(() => {\n          expect(spy.callCount).to.equal(2);\n          addedTags = spy.getCall(1).args[1];\n          removedTags = spy.getCall(1).args[2];\n          expect(addedTags).to.have.property(\"metaTags\");\n          expect(addedTags.metaTags).to.have.deep.property(\"[0]\");\n          expect(addedTags.metaTags[0].outerHTML).to.equal(`<meta name=\"description\" content=\"New description\" data-react-helmet=\"true\">`);\n          expect(addedTags).to.have.property(\"linkTags\");\n          expect(addedTags.linkTags).to.have.deep.property(\"[0]\");\n          expect(addedTags.linkTags[0].outerHTML).to.equal(`<link href=\"http://localhost/style2.css\" rel=\"stylesheet\" type=\"text/css\" data-react-helmet=\"true\">`);\n          expect(removedTags).to.have.property(\"metaTags\");\n          expect(removedTags.metaTags).to.have.deep.property(\"[0]\");\n          expect(removedTags.metaTags[0].outerHTML).to.equal(`<meta name=\"description\" content=\"Test description\" data-react-helmet=\"true\">`);\n          expect(removedTags).to.not.have.property(\"linkTags\");\n          done();\n        });\n      });\n    });","file":"HelmetTest.js","skipped":false,"dir":"test"},{"name":"does not accept nested Helmets","suites":["Helmet","misc"],"updatePoint":{"line":1983,"column":38,"index":91201},"line":1983,"code":"    it(\"does not accept nested Helmets\", done => {\n      const warn = sinon.stub(console, \"warn\");\n      ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, {\n        title: \"Test Title\"\n      }, /*#__PURE__*/React.createElement(Helmet, {\n        title: \"Title you'll never see\"\n      })), container);\n      requestAnimationFrame(() => {\n        expect(document.title).to.equal(\"Test Title\");\n        expect(warn.called).to.be.true;\n        const [warning] = warn.getCall(0).args;\n        expect(warning).to.equal(\"You may be attempting to nest <Helmet> components within each other, which is not allowed. Refer to our API for more information.\");\n        warn.restore();\n        done();\n      });\n    });","file":"HelmetTest.js","skipped":false,"dir":"test"},{"name":"recognizes valid tags regardless of attribute ordering","suites":["Helmet","misc"],"updatePoint":{"line":1999,"column":62,"index":91937},"line":1999,"code":"    it(\"recognizes valid tags regardless of attribute ordering\", done => {\n      ReactDOM.render( /*#__PURE__*/React.createElement(Helmet, {\n        meta: [{\n          content: \"Test Description\",\n          name: \"description\"\n        }]\n      }), container);\n      requestAnimationFrame(() => {\n        const existingTags = headElement.querySelectorAll(`meta[${HELMET_ATTRIBUTE}]`);\n        const existingTag = existingTags[0];\n        expect(existingTags).to.not.equal(undefined);\n        expect(existingTags.length).to.be.equal(1);\n        expect(existingTags).to.have.deep.property(\"[0]\").that.is.an.instanceof(Element);\n        expect(existingTag).to.have.property(\"getAttribute\");\n        expect(existingTag.getAttribute(\"name\")).to.equal(\"description\");\n        expect(existingTag.getAttribute(\"content\")).to.equal(\"Test Description\");\n        expect(existingTag.outerHTML).to.equal(`<meta content=\"Test Description\" name=\"description\" ${HELMET_ATTRIBUTE}=\"true\">`);\n        done();\n      });\n    });","file":"HelmetTest.js","skipped":false,"dir":"test"},{"name":"requestAnimationFrame works as expected","suites":["Helmet","misc"],"updatePoint":{"line":2019,"column":47,"index":92930},"line":2019,"code":"    it(\"requestAnimationFrame works as expected\", done => {\n      requestAnimationFrame(cb => {\n        expect(cb).to.exist;\n        expect(cb).to.be.a(\"number\");\n        done();\n      });\n    });","file":"HelmetTest.js","skipped":false,"dir":"test"}]}