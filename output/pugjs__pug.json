{
    "repo": "pugjs/pug",
    "url": "https://github.com/pugjs/pug",
    "branch": "master",
    "configs": [
        {
            "package": "pug-attrs",
            "lang": "js",
            "dir": "packages/pug-attrs/test",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "pug-error",
            "lang": "js",
            "dir": "packages/pug-error/test",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "pug-filters",
            "lang": "js",
            "dir": "packages/pug-filters/test",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "pug-lexer",
            "lang": "js",
            "dir": "packages/pug-lexer/test",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "pug-linker",
            "lang": "js",
            "dir": "packages/pug-linker/test",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "pug-load",
            "lang": "js",
            "dir": "packages/pug-load/test",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "pug-parser",
            "lang": "js",
            "dir": "packages/pug-parser/test",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "pug-runtime",
            "lang": "js",
            "dir": "packages/pug-runtime/test",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "pug-strip-comments",
            "lang": "js",
            "dir": "packages/pug-strip-comments/test",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "pug-walk",
            "lang": "js",
            "dir": "packages/pug-walk/test",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "pug",
            "lang": "js",
            "dir": "packages/pug/test",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        }
    ],
    "tests": [
        {
            "name": "and a filename",
            "suites": [
                "with a source"
            ],
            "updatePoint": {
                "line": 6,
                "column": 22
            },
            "line": 6,
            "code": "  test('and a filename', function () {\n    var err = error('MY_CODE', 'My message', {\n      line: 3,\n      filename: 'myfile',\n      src: 'foo\\nbar\\nbaz\\nbash\\nbing'\n    });\n    expect(err.message).toBe('myfile:3\\n    1| foo\\n    2| bar\\n  > 3| baz\\n    4| bash\\n    5| bing\\n\\nMy message');\n    expect(err.code).toBe('PUG:MY_CODE');\n    expect(err.msg).toBe('My message');\n    expect(err.line).toBe(3);\n    expect(err.filename).toBe('myfile');\n    expect(err.src).toBe('foo\\nbar\\nbaz\\nbash\\nbing');\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/pug-error/test"
        },
        {
            "name": "and no filename",
            "suites": [
                "with a source"
            ],
            "updatePoint": {
                "line": 19,
                "column": 23
            },
            "line": 19,
            "code": "  test('and no filename', function () {\n    var err = error('MY_CODE', 'My message', {\n      line: 3,\n      src: 'foo\\nbar\\nbaz\\nbash\\nbing'\n    });\n    expect(err.message).toBe('Pug:3\\n    1| foo\\n    2| bar\\n  > 3| baz\\n    4| bash\\n    5| bing\\n\\nMy message');\n    expect(err.code).toBe('PUG:MY_CODE');\n    expect(err.msg).toBe('My message');\n    expect(err.line).toBe(3);\n    expect(err.filename).toBe(undefined);\n    expect(err.src).toBe('foo\\nbar\\nbaz\\nbash\\nbing');\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/pug-error/test"
        },
        {
            "name": "and with a filename",
            "suites": [
                "without source"
            ],
            "updatePoint": {
                "line": 33,
                "column": 27
            },
            "line": 33,
            "code": "  test('and with a filename', function () {\n    var err = error('MY_CODE', 'My message', {\n      line: 3,\n      filename: 'myfile'\n    });\n    expect(err.message).toBe('myfile:3\\n\\nMy message');\n    expect(err.code).toBe('PUG:MY_CODE');\n    expect(err.msg).toBe('My message');\n    expect(err.line).toBe(3);\n    expect(err.filename).toBe('myfile');\n    expect(err.src).toBe(undefined);\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/pug-error/test"
        },
        {
            "name": "and with no filename",
            "suites": [
                "without source"
            ],
            "updatePoint": {
                "line": 45,
                "column": 28
            },
            "line": 45,
            "code": "  test('and with no filename', function () {\n    var err = error('MY_CODE', 'My message', {\n      line: 3\n    });\n    expect(err.message).toBe('Pug:3\\n\\nMy message');\n    expect(err.code).toBe('PUG:MY_CODE');\n    expect(err.msg).toBe('My message');\n    expect(err.line).toBe(3);\n    expect(err.filename).toBe(undefined);\n    expect(err.src).toBe(undefined);\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/pug-error/test"
        },
        {
            "name": "and with a filename",
            "suites": [
                "with column"
            ],
            "updatePoint": {
                "line": 58,
                "column": 27
            },
            "line": 58,
            "code": "  test('and with a filename', function () {\n    var err = error('MY_CODE', 'My message', {\n      line: 3,\n      column: 2,\n      filename: 'myfile',\n      src: 'foo\\nbar\\nbaz\\nbash\\nbing'\n    });\n    expect(err.message).toBe('myfile:3:2\\n    1| foo\\n    2| bar\\n  > 3| baz\\n--------^\\n    4| bash\\n    5| bing\\n\\nMy message');\n    expect(err.code).toBe('PUG:MY_CODE');\n    expect(err.msg).toBe('My message');\n    expect(err.line).toBe(3);\n    expect(err.filename).toBe('myfile');\n    expect(err.src).toBe('foo\\nbar\\nbaz\\nbash\\nbing');\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/pug-error/test"
        },
        {
            "name": "and with no filename",
            "suites": [
                "with column"
            ],
            "updatePoint": {
                "line": 72,
                "column": 28
            },
            "line": 72,
            "code": "  test('and with no filename', function () {\n    var err = error('MY_CODE', 'My message', {\n      line: 3,\n      column: 1\n    });\n    expect(err.message).toBe('Pug:3:1\\n\\nMy message');\n    expect(err.code).toBe('PUG:MY_CODE');\n    expect(err.msg).toBe('My message');\n    expect(err.line).toBe(3);\n    expect(err.filename).toBe(undefined);\n    expect(err.src).toBe(undefined);\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/pug-error/test"
        },
        {
            "name": "negative column",
            "suites": [
                "invalid information"
            ],
            "updatePoint": {
                "line": 86,
                "column": 23
            },
            "line": 86,
            "code": "  test('negative column', function () {\n    var err = error('MY_CODE', 'My message', {\n      line: 3,\n      column: -1,\n      src: 'foo\\nbar\\nbaz\\nbash\\nbing'\n    });\n    expect(err.message).toBe('Pug:3:-1\\n    1| foo\\n    2| bar\\n  > 3| baz\\n    4| bash\\n    5| bing\\n\\nMy message');\n    expect(err.code).toBe('PUG:MY_CODE');\n    expect(err.msg).toBe('My message');\n    expect(err.line).toBe(3);\n    expect(err.filename).toBe(undefined);\n    expect(err.src).toBe('foo\\nbar\\nbaz\\nbash\\nbing');\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/pug-error/test"
        },
        {
            "name": "out of range line",
            "suites": [
                "invalid information"
            ],
            "updatePoint": {
                "line": 99,
                "column": 25
            },
            "line": 99,
            "code": "  test('out of range line', function () {\n    check(0);\n    check(6);\n\n    function check(line) {\n      var err = error('MY_CODE', 'My message', {\n        line: line,\n        src: 'foo\\nbar\\nbaz\\nbash\\nbing'\n      });\n      expect(err.message).toBe('Pug:' + line + '\\n\\nMy message');\n      expect(err.code).toBe('PUG:MY_CODE');\n      expect(err.msg).toBe('My message');\n      expect(err.line).toBe(line);\n      expect(err.filename).toBe(undefined);\n      expect(err.src).toBe('foo\\nbar\\nbaz\\nbash\\nbing');\n    }\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/pug-error/test"
        },
        {
            "name": "filters can be aliased",
            "suites": [],
            "updatePoint": {
                "line": 8,
                "column": 28
            },
            "line": 8,
            "code": "test('filters can be aliased', () => {\n  const source = `\nscript\n  :cdata:minify\n    function myFunc(foo) {\n      return foo;\n    }\n  `;\n  const ast = parse(lex(source, {\n    filename: __filename\n  }), {\n    filename: __filename,\n    src: source\n  });\n  const options = {};\n  const aliases = {\n    minify: 'uglify-js'\n  };\n  const output = handleFilters(ast, customFilters, options, aliases);\n  expect(output).toMatchSnapshot();\n});",
            "file": "filter-aliases.test.js",
            "skipped": false,
            "dir": "packages/pug-filters/test"
        },
        {
            "name": "we do not support chains of aliases",
            "suites": [],
            "updatePoint": {
                "line": 29,
                "column": 41
            },
            "line": 29,
            "code": "test('we do not support chains of aliases', () => {\n  const source = `\nscript\n  :cdata:minify-js\n    function myFunc(foo) {\n      return foo;\n    }\n  `;\n  const ast = parse(lex(source, {\n    filename: __filename\n  }), {\n    filename: __filename,\n    src: source\n  });\n  const options = {};\n  const aliases = {\n    'minify-js': 'minify',\n    minify: 'uglify-js'\n  };\n\n  try {\n    const output = handleFilters(ast, customFilters, options, aliases);\n  } catch (ex) {\n    expect({\n      code: ex.code,\n      message: ex.message\n    }).toMatchSnapshot();\n    return;\n  }\n\n  throw new Error('Expected an exception');\n});",
            "file": "filter-aliases.test.js",
            "skipped": false,
            "dir": "packages/pug-filters/test"
        },
        {
            "name": "options are applied before aliases",
            "suites": [],
            "updatePoint": {
                "line": 61,
                "column": 40
            },
            "line": 61,
            "code": "test('options are applied before aliases', () => {\n  const source = `\nscript\n  :cdata:minify\n    function myFunc(foo) {\n      return foo;\n    }\n  :cdata:uglify-js\n    function myFunc(foo) {\n      return foo;\n    }\n  `;\n  const ast = parse(lex(source, {\n    filename: __filename\n  }), {\n    filename: __filename,\n    src: source\n  });\n  const options = {\n    minify: {\n      output: {\n        beautify: true\n      }\n    }\n  };\n  const aliases = {\n    minify: 'uglify-js'\n  };\n  const output = handleFilters(ast, customFilters, options, aliases);\n  expect(output).toMatchSnapshot();\n});",
            "file": "filter-aliases.test.js",
            "skipped": false,
            "dir": "packages/pug-filters/test"
        },
        {
            "name": "per filter options are applied, even to nested filters",
            "suites": [],
            "updatePoint": {
                "line": 8,
                "column": 60
            },
            "line": 8,
            "code": "test('per filter options are applied, even to nested filters', () => {\n  const source = `\nscript\n  :cdata:uglify-js\n    function myFunc(foo) {\n      return foo;\n    }\n  `;\n  const ast = parse(lex(source, {\n    filename: __filename\n  }), {\n    filename: __filename,\n    src: source\n  });\n  const options = {\n    'uglify-js': {\n      output: {\n        beautify: true\n      }\n    }\n  };\n  const output = handleFilters(ast, customFilters, options);\n  expect(output).toMatchSnapshot(); // TODO: render with `options.filterOptions['uglify-js']`\n});",
            "file": "per-filter-options-applied-to-nested-filters.test.js",
            "skipped": false,
            "dir": "packages/pug-filters/test"
        },
        {
            "name": "lexer functions",
            "suites": [],
            "updatePoint": {
                "line": 93,
                "column": 21
            },
            "line": 93,
            "code": "test('lexer functions', () => {\n  var str = fs.readFileSync(__dirname + '/../index.js', 'utf8');\n  var ast = acorn.parse(str, {\n    locations: true\n  });\n  walk.simple(ast, {\n    CallExpression: function (node) {\n      checkDirectCalls(node);\n      checkMissingLexerFunction(node);\n    }\n  });\n\n  if (hadErrors) {\n    throw new Error('Problem with lexer functions detected');\n  }\n});",
            "file": "check-lexer-functions.test.js",
            "skipped": false,
            "dir": "packages/pug-lexer/test"
        },
        {
            "name": "pug-load",
            "suites": [],
            "updatePoint": {
                "line": 17,
                "column": 14
            },
            "line": 17,
            "code": "test('pug-load', () => {\n  var filename = __dirname + '/foo.pug';\n  var ast = load.file(filename, {\n    lex: lex,\n    parse: parse\n  });\n  ast = walk(ast, function (node) {\n    if (node.filename) node.filename = '<dirname>/' + path.basename(node.filename);\n    if (node.fullPath) node.fullPath = '<dirname>/' + path.basename(node.fullPath);\n  }, {\n    includeDependencies: true\n  });\n  expect(ast).toMatchSnapshot();\n});",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/pug-load/test"
        },
        {
            "name": "no uncessessary blocks should be added",
            "suites": [],
            "updatePoint": {
                "line": 12,
                "column": 44
            },
            "line": 12,
            "code": "test('no uncessessary blocks should be added', () => {\n  expect(parse(lex(input))).toMatchSnapshot();\n});",
            "file": "no-unnecessary-blocks.test.js",
            "skipped": false,
            "dir": "packages/pug-parser/test"
        },
        {
            "name": "should rethrow error",
            "suites": [
                "rethrow"
            ],
            "updatePoint": {
                "line": 350,
                "column": 26
            },
            "line": 350,
            "code": "  it('should rethrow error', () => {\n    const err = new Error();\n\n    try {\n      runtime.rethrow(err, 'foo.pug', 3);\n    } catch (e) {\n      expect(e).toBe(err);\n      return;\n    }\n\n    throw new Error('expected rethrow to throw');\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/pug-runtime/test"
        },
        {
            "name": "should rethrow error with str",
            "suites": [
                "rethrow"
            ],
            "updatePoint": {
                "line": 362,
                "column": 35
            },
            "line": 362,
            "code": "  it('should rethrow error with str', () => {\n    const err = new Error();\n\n    try {\n      runtime.rethrow(err, 'foo.pug', 3, 'hello world');\n    } catch (e) {\n      expect(e).toBe(err);\n      expect(e.message.trim()).toBe(`\nfoo.pug:3\n    1| hello world`.trim());\n      return;\n    }\n\n    throw new Error('expected rethrow to throw');\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/pug-runtime/test"
        },
        {
            "name": "should handle bad arguments gracefully",
            "suites": [
                "rethrow"
            ],
            "updatePoint": {
                "line": 377,
                "column": 44
            },
            "line": 377,
            "code": "  it('should handle bad arguments gracefully', () => {\n    const err = new Error('hello world');\n    const str = {\n      not: 'a string'\n    };\n\n    try {\n      runtime.rethrow(err, 'foo.pug', 3, str);\n    } catch (e) {\n      expect(e).toBe(err);\n      expect(e.message).toBe('hello world - could not read from foo.pug (str.split is not a function) on line 3');\n      return;\n    }\n\n    throw new Error('expected rethrow to throw');\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/pug-runtime/test"
        },
        {
            "name": "unbuffered",
            "suites": [],
            "updatePoint": {
                "line": 24,
                "column": 22
            },
            "line": 24,
            "code": "      test('unbuffered');",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/pug-strip-comments/test"
        },
        {
            "name": "buffered",
            "suites": [],
            "updatePoint": {
                "line": 25,
                "column": 20
            },
            "line": 25,
            "code": "      test('buffered', {\n        stripBuffered: true,\n        stripUnbuffered: false\n      });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/pug-strip-comments/test"
        },
        {
            "name": "both",
            "suites": [],
            "updatePoint": {
                "line": 29,
                "column": 16
            },
            "line": 29,
            "code": "      test('both', {\n        stripBuffered: true\n      });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/pug-strip-comments/test"
        },
        {
            "name": "simple",
            "suites": [],
            "updatePoint": {
                "line": 11,
                "column": 12
            },
            "line": 11,
            "code": "test('simple', function () {\n  var ast = walk(parse(lex('.my-class foo')), function before(node, replace) {\n    // called before walking the children of `node`\n    // to replace the node, call `replace(newNode)`\n    // return `false` to skip descending\n    if (node.type === 'Text') {\n      replace({\n        type: 'Text',\n        val: 'bar',\n        line: node.line,\n        column: node.column\n      });\n    }\n  }, function after(node, replace) {// called before walking the children of `node`\n    // to replace the node, call `replace(newNode)`\n  });\n  expect(ast).toEqual(parse(lex('.my-class bar')));\n});",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/pug-walk/test"
        },
        {
            "name": "block flattening",
            "suites": [
                "replace([])"
            ],
            "updatePoint": {
                "line": 30,
                "column": 24
            },
            "line": 30,
            "code": "  test('block flattening', function () {\n    var called = [];\n    var ast = walk({\n      type: 'Block',\n      nodes: [{\n        type: 'Block',\n        nodes: [{\n          type: 'Block',\n          nodes: [{\n            type: 'Text',\n            val: 'a'\n          }, {\n            type: 'Text',\n            val: 'b'\n          }]\n        }, {\n          type: 'Text',\n          val: 'c'\n        }]\n      }, {\n        type: 'Text',\n        val: 'd'\n      }]\n    }, function (node, replace) {\n      if (node.type === 'Text') {\n        called.push('before ' + node.val);\n\n        if (node.val === 'a') {\n          assert(replace.arrayAllowed, 'replace.arrayAllowed set wrongly');\n          replace([{\n            type: 'Text',\n            val: 'e'\n          }, {\n            type: 'Text',\n            val: 'f'\n          }]);\n        }\n      }\n    }, function (node, replace) {\n      if (node.type === 'Block' && replace.arrayAllowed) {\n        replace(node.nodes);\n      } else if (node.type === 'Text') {\n        called.push('after ' + node.val);\n      }\n    });\n    expect(ast).toEqual({\n      type: 'Block',\n      nodes: [{\n        type: 'Text',\n        val: 'e'\n      }, {\n        type: 'Text',\n        val: 'f'\n      }, {\n        type: 'Text',\n        val: 'b'\n      }, {\n        type: 'Text',\n        val: 'c'\n      }, {\n        type: 'Text',\n        val: 'd'\n      }]\n    });\n    assert.deepEqual(called, ['before a', 'before e', 'after e', 'before f', 'after f', 'before b', 'after b', 'before c', 'after c', 'before d', 'after d'], 'before() and after() called incorrectly: ' + JSON.stringify(called));\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/pug-walk/test"
        },
        {
            "name": "adding include filters",
            "suites": [
                "replace([])"
            ],
            "updatePoint": {
                "line": 96,
                "column": 30
            },
            "line": 96,
            "code": "  test('adding include filters', function () {\n    var ast = walk(parse(lex('include:filter1:filter2 file')), function (node, replace) {\n      if (node.type === 'IncludeFilter') {\n        assert(replace.arrayAllowed);\n\n        if (node.name === 'filter1') {\n          var firstFilter = 'filter3';\n          replace([{\n            type: 'IncludeFilter',\n            name: firstFilter,\n            attrs: [],\n            line: node.line,\n            column: node.column\n          }, {\n            type: 'IncludeFilter',\n            name: 'filter4',\n            attrs: [],\n            line: node.line,\n            column: node.column + firstFilter.length + 1\n          }]);\n        } else if (node.name === 'filter2') {\n          replace([]);\n        }\n      }\n    });\n    expect(ast).toEqual(parse(lex('include:filter3:filter4 file')));\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/pug-walk/test"
        },
        {
            "name": "fails when parent is not Block",
            "suites": [
                "replace([])"
            ],
            "updatePoint": {
                "line": 123,
                "column": 38
            },
            "line": 123,
            "code": "  test('fails when parent is not Block', function () {\n    walk(parse(lex('p content')), function (node, replace) {\n      if (node.type === 'Block' && node.nodes[0] && node.nodes[0].type === 'Text') {\n        assert(!replace.arrayAllowed, 'replace.arrayAllowed set wrongly');\n        assert.throws(function () {\n          replace([]);\n        });\n      }\n    });\n  });",
            "file": "index.test.js",
            "skipped": false,
            "dir": "packages/pug-walk/test"
        },
        {
            "name": "layout with duplicate block",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 33
            },
            "line": 3,
            "code": "test('layout with duplicate block', () => {\n  const outputWithAjax = pug.renderFile(__dirname + '/index.pug', {\n    ajax: true\n  });\n  const outputWithoutAjax = pug.renderFile(__dirname + '/index.pug', {\n    ajax: false\n  });\n  expect(outputWithAjax).toMatchSnapshot();\n  expect(outputWithoutAjax).toMatchSnapshot();\n});",
            "file": "duplicate-block/index.test.js",
            "skipped": false,
            "dir": "packages/pug/test"
        },
        {
            "name": "Only left-side bracket",
            "suites": [
                "Inproper Usage"
            ],
            "updatePoint": {
                "line": 4,
                "column": 30
            },
            "line": 4,
            "code": "  test('Only left-side bracket', () => {\n    expect(() => pug.compileFile(__dirname + '/error/left-side.pug')).toThrow('The value variable for each must either be a valid identifier (e.g. `item`) or a pair of identifiers in square brackets (e.g. `[key, value]`).');\n  });",
            "file": "eachOf/index.test.js",
            "skipped": false,
            "dir": "packages/pug/test"
        },
        {
            "name": "Only right-side bracket",
            "suites": [
                "Inproper Usage"
            ],
            "updatePoint": {
                "line": 7,
                "column": 31
            },
            "line": 7,
            "code": "  test('Only right-side bracket', () => {\n    expect(() => pug.compileFile(__dirname + '/error/right-side.pug')).toThrow('The value variable for each must either be a valid identifier (e.g. `item`) or a pair of identifiers in square brackets (e.g. `[key, value]`).');\n  });",
            "file": "eachOf/index.test.js",
            "skipped": false,
            "dir": "packages/pug/test"
        },
        {
            "name": "Only one value inside brackets",
            "suites": [
                "Inproper Usage"
            ],
            "updatePoint": {
                "line": 10,
                "column": 38
            },
            "line": 10,
            "code": "  test('Only one value inside brackets', () => {\n    expect(() => pug.compileFile(__dirname + '/error/one-val.pug')).toThrow('The value variable for each must either be a valid identifier (e.g. `item`) or a pair of identifiers in square brackets (e.g. `[key, value]`).');\n  });",
            "file": "eachOf/index.test.js",
            "skipped": false,
            "dir": "packages/pug/test"
        },
        {
            "name": "No brackets",
            "suites": [
                "Inproper Usage"
            ],
            "updatePoint": {
                "line": 13,
                "column": 19
            },
            "line": 13,
            "code": "  test('No brackets', () => {\n    expect(() => pug.compileFile(__dirname + '/error/no-brackets.pug')).toThrow('The value variable for each must either be a valid identifier (e.g. `item`) or a pair of identifiers in square brackets (e.g. `[key, value]`).');\n  });",
            "file": "eachOf/index.test.js",
            "skipped": false,
            "dir": "packages/pug/test"
        },
        {
            "name": "Brackets",
            "suites": [
                "Proper Usage"
            ],
            "updatePoint": {
                "line": 18,
                "column": 16
            },
            "line": 18,
            "code": "  test('Brackets', () => {\n    const html = pug.renderFile(__dirname + '/passing/brackets.pug', {\n      users: new Map([['a', 'b'], ['foo', 'bar']])\n    });\n    expect(html).toMatchSnapshot();\n  });",
            "file": "eachOf/index.test.js",
            "skipped": false,
            "dir": "packages/pug/test"
        },
        {
            "name": "No Brackets",
            "suites": [
                "Proper Usage"
            ],
            "updatePoint": {
                "line": 24,
                "column": 19
            },
            "line": 24,
            "code": "  test('No Brackets', () => {\n    const html = pug.renderFile(__dirname + '/passing/no-brackets.pug', {\n      users: new Map([['a', 'b'], ['foo', 'bar']])\n    });\n    expect(html).toMatchSnapshot();\n  });",
            "file": "eachOf/index.test.js",
            "skipped": false,
            "dir": "packages/pug/test"
        },
        {
            "name": "includes detail of where the error was thrown",
            "suites": [
                "error reporting",
                "compile time errors",
                "with no filename"
            ],
            "updatePoint": {
                "line": 34,
                "column": 55
            },
            "line": 34,
            "code": "      it('includes detail of where the error was thrown', function () {\n        var err = getError('foo(');\n        expect(err.message).toMatch(/Pug:1/);\n        expect(err.message).toMatch(/foo\\(/);\n      });",
            "file": "error.reporting.test.js",
            "skipped": false,
            "dir": "packages/pug/test"
        },
        {
            "name": "includes detail of where the error was thrown including the filename",
            "suites": [
                "error reporting",
                "compile time errors",
                "with a filename"
            ],
            "updatePoint": {
                "line": 41,
                "column": 78
            },
            "line": 41,
            "code": "      it('includes detail of where the error was thrown including the filename', function () {\n        var err = getError('foo(', {\n          filename: 'test.pug'\n        });\n        expect(err.message).toMatch(/test\\.pug:1/);\n        expect(err.message).toMatch(/foo\\(/);\n      });",
            "file": "error.reporting.test.js",
            "skipped": false,
            "dir": "packages/pug/test"
        },
        {
            "name": "includes detail of where the error was thrown including the filename",
            "suites": [
                "error reporting",
                "compile time errors",
                "with a layout without block declaration (syntax)"
            ],
            "updatePoint": {
                "line": 50,
                "column": 78
            },
            "line": 50,
            "code": "      it('includes detail of where the error was thrown including the filename', function () {\n        var err = getFileError(__dirname + '/fixtures/compile.with.layout.syntax.error.pug', {});\n        expect(err.message).toMatch(/[\\\\\\/]layout.syntax.error.pug:2/);\n        expect(err.message).toMatch(/foo\\(/);\n      });",
            "file": "error.reporting.test.js",
            "skipped": false,
            "dir": "packages/pug/test"
        },
        {
            "name": "includes detail of where the error was thrown including the filename",
            "suites": [
                "error reporting",
                "compile time errors",
                "with a layout without block declaration (locals)"
            ],
            "updatePoint": {
                "line": 57,
                "column": 78
            },
            "line": 57,
            "code": "      it('includes detail of where the error was thrown including the filename', function () {\n        var err = getFileError(__dirname + '/fixtures/compile.with.layout.locals.error.pug', {});\n        expect(err.message).toMatch(/[\\\\\\/]layout.locals.error.pug:2/);\n        expect(err.message).toMatch(/is not a function/);\n      });",
            "file": "error.reporting.test.js",
            "skipped": false,
            "dir": "packages/pug/test"
        },
        {
            "name": "includes detail of where the error was thrown including the filename",
            "suites": [
                "error reporting",
                "compile time errors",
                "with a include (syntax)"
            ],
            "updatePoint": {
                "line": 64,
                "column": 78
            },
            "line": 64,
            "code": "      it('includes detail of where the error was thrown including the filename', function () {\n        var err = getFileError(__dirname + '/fixtures/compile.with.include.syntax.error.pug', {});\n        expect(err.message).toMatch(/[\\\\\\/]include.syntax.error.pug:2/);\n        expect(err.message).toMatch(/foo\\(/);\n      });",
            "file": "error.reporting.test.js",
            "skipped": false,
            "dir": "packages/pug/test"
        },
        {
            "name": "includes detail of where the error was thrown including the filename",
            "suites": [
                "error reporting",
                "compile time errors",
                "with a include (locals)"
            ],
            "updatePoint": {
                "line": 71,
                "column": 78
            },
            "line": 71,
            "code": "      it('includes detail of where the error was thrown including the filename', function () {\n        var err = getFileError(__dirname + '/fixtures/compile.with.include.locals.error.pug', {});\n        expect(err.message).toMatch(/[\\\\\\/]include.locals.error.pug:2/);\n        expect(err.message).toMatch(/foo\\(/);\n      });",
            "file": "error.reporting.test.js",
            "skipped": false,
            "dir": "packages/pug/test"
        },
        {
            "name": "handles compileDebug option properly",
            "suites": [
                "error reporting",
                "compile time errors",
                "with a include (locals)"
            ],
            "updatePoint": {
                "line": 76,
                "column": 46
            },
            "line": 76,
            "code": "      it('handles compileDebug option properly', function () {\n        var err = getFileError(__dirname + '/fixtures/compile.with.include.locals.error.pug', {\n          compileDebug: true\n        });\n        expect(err.message).toMatch(/[\\\\\\/]include.locals.error.pug:2/);\n        expect(err.message).toMatch(/foo is not a function/);\n      });",
            "file": "error.reporting.test.js",
            "skipped": false,
            "dir": "packages/pug/test"
        },
        {
            "name": "includes detail of where the error was thrown including the filename",
            "suites": [
                "error reporting",
                "compile time errors",
                "with a layout (without block) with an include (syntax)"
            ],
            "updatePoint": {
                "line": 85,
                "column": 78
            },
            "line": 85,
            "code": "      it('includes detail of where the error was thrown including the filename', function () {\n        var err = getFileError(__dirname + '/fixtures/compile.with.layout.with.include.syntax.error.pug', {});\n        expect(err.message).toMatch(/[\\\\\\/]include.syntax.error.pug:2/);\n        expect(err.message).toMatch(/foo\\(/);\n      });",
            "file": "error.reporting.test.js",
            "skipped": false,
            "dir": "packages/pug/test"
        },
        {
            "name": "includes detail of where the error was thrown including the filename",
            "suites": [
                "error reporting",
                "compile time errors",
                "with a layout (without block) with an include (locals)"
            ],
            "updatePoint": {
                "line": 92,
                "column": 78
            },
            "line": 92,
            "code": "      it('includes detail of where the error was thrown including the filename', function () {\n        var err = getFileError(__dirname + '/fixtures/compile.with.layout.with.include.locals.error.pug', {});\n        expect(err.message).toMatch(/[\\\\\\/]include.locals.error.pug:2/);\n        expect(err.message).toMatch(/foo\\(/);\n      });",
            "file": "error.reporting.test.js",
            "skipped": false,
            "dir": "packages/pug/test"
        },
        {
            "name": "includes detail of where the error was thrown including the filename",
            "suites": [
                "error reporting",
                "compile time errors",
                "block that is never actually used"
            ],
            "updatePoint": {
                "line": 99,
                "column": 78
            },
            "line": 99,
            "code": "      it('includes detail of where the error was thrown including the filename', function () {\n        var err = getFileError(__dirname + '/fixtures/invalid-block-in-extends.pug', {});\n        expect(err.message).toMatch(/invalid-block-in-extends.pug:6/);\n        expect(err.message).toMatch(/content/);\n      });",
            "file": "error.reporting.test.js",
            "skipped": false,
            "dir": "packages/pug/test"
        },
        {
            "name": "includes details of where the error was thrown",
            "suites": [
                "error reporting",
                "compile time errors",
                "Unexpected character"
            ],
            "updatePoint": {
                "line": 106,
                "column": 56
            },
            "line": 106,
            "code": "      it('includes details of where the error was thrown', function () {\n        var err = getError('ul?', {});\n        expect(err.message).toMatch(/unexpected text \\\"\\?\\\"/);\n      });",
            "file": "error.reporting.test.js",
            "skipped": false,
            "dir": "packages/pug/test"
        },
        {
            "name": "includes details of where the error was thrown",
            "suites": [
                "error reporting",
                "compile time errors",
                "Include filtered"
            ],
            "updatePoint": {
                "line": 112,
                "column": 56
            },
            "line": 112,
            "code": "      it('includes details of where the error was thrown', function () {\n        var err = getError('include:verbatim()!', {});\n        assert(err.message.indexOf('unexpected text \"!\"') !== -1);\n        var err = getError('include:verbatim ', {});\n        assert(err.message.indexOf('missing path for include') !== -1);\n      });",
            "file": "error.reporting.test.js",
            "skipped": false,
            "dir": "packages/pug/test"
        },
        {
            "name": "reports the correct line number",
            "suites": [
                "error reporting",
                "compile time errors",
                "mixin block followed by a lot of blank lines"
            ],
            "updatePoint": {
                "line": 120,
                "column": 41
            },
            "line": 120,
            "code": "      it('reports the correct line number', function () {\n        var err = getError('mixin test\\n    block\\n\\ndiv()Test');\n        var line = /Pug\\:(\\d+)/.exec(err.message);\n        assert(line, 'Line number must be included in error message');\n        assert(line[1] === '4', 'The error should be reported on line 4, not line ' + line[1]);\n      });",
            "file": "error.reporting.test.js",
            "skipped": false,
            "dir": "packages/pug/test"
        },
        {
            "name": "just reports the line number",
            "suites": [
                "error reporting",
                "runtime errors",
                "with no filename and `compileDebug` left undefined"
            ],
            "updatePoint": {
                "line": 130,
                "column": 38
            },
            "line": 130,
            "code": "      it('just reports the line number', function () {\n        var sentinel = new Error('sentinel');\n        var err = getError('-foo()', {\n          foo: function () {\n            throw sentinel;\n          }\n        });\n        expect(err.message).toMatch(/on line 1/);\n      });",
            "file": "error.reporting.test.js",
            "skipped": false,
            "dir": "packages/pug/test"
        },
        {
            "name": "includes detail of where the error was thrown",
            "suites": [
                "error reporting",
                "runtime errors",
                "with no filename and `compileDebug` set to `true`"
            ],
            "updatePoint": {
                "line": 141,
                "column": 55
            },
            "line": 141,
            "code": "      it('includes detail of where the error was thrown', function () {\n        var sentinel = new Error('sentinel');\n        var err = getError('-foo()', {\n          foo: function () {\n            throw sentinel;\n          },\n          compileDebug: true\n        });\n        expect(err.message).toMatch(/Pug:1/);\n        expect(err.message).toMatch(/-foo\\(\\)/);\n      });",
            "file": "error.reporting.test.js",
            "skipped": false,
            "dir": "packages/pug/test"
        },
        {
            "name": "just reports the line number",
            "suites": [
                "error reporting",
                "runtime errors",
                "with a filename that does not correspond to a real file and `compileDebug` left undefined"
            ],
            "updatePoint": {
                "line": 154,
                "column": 38
            },
            "line": 154,
            "code": "      it('just reports the line number', function () {\n        var sentinel = new Error('sentinel');\n        var err = getError('-foo()', {\n          foo: function () {\n            throw sentinel;\n          },\n          filename: 'fake.pug'\n        });\n        expect(err.message).toMatch(/on line 1/);\n      });",
            "file": "error.reporting.test.js",
            "skipped": false,
            "dir": "packages/pug/test"
        },
        {
            "name": "includes detail of where the error was thrown including the filename",
            "suites": [
                "error reporting",
                "runtime errors",
                "with a filename that corresponds to a real file and `compileDebug` left undefined"
            ],
            "updatePoint": {
                "line": 166,
                "column": 78
            },
            "line": 166,
            "code": "      it('includes detail of where the error was thrown including the filename', function () {\n        var sentinel = new Error('sentinel');\n        var path = __dirname + '/fixtures/runtime.error.pug';\n        var err = getError(fs.readFileSync(path, 'utf8'), {\n          foo: function () {\n            throw sentinel;\n          },\n          filename: path\n        });\n        expect(err.message).toMatch(/fixtures[\\\\\\/]runtime\\.error\\.pug:1/);\n        expect(err.message).toMatch(/-foo\\(\\)/);\n      });",
            "file": "error.reporting.test.js",
            "skipped": false,
            "dir": "packages/pug/test"
        },
        {
            "name": "includes detail of where the error was thrown including the filename",
            "suites": [
                "error reporting",
                "runtime errors",
                "in a mixin"
            ],
            "updatePoint": {
                "line": 180,
                "column": 78
            },
            "line": 180,
            "code": "      it('includes detail of where the error was thrown including the filename', function () {\n        var err = getFileError(__dirname + '/fixtures/runtime.with.mixin.error.pug', {});\n        expect(err.message).toMatch(/mixin.error.pug:2/);\n        expect(err.message).toMatch(/Cannot read property 'length' of null/);\n      });",
            "file": "error.reporting.test.js",
            "skipped": false,
            "dir": "packages/pug/test"
        },
        {
            "name": "includes detail of where the error was thrown including the filename",
            "suites": [
                "error reporting",
                "runtime errors",
                "in a layout"
            ],
            "updatePoint": {
                "line": 187,
                "column": 78
            },
            "line": 187,
            "code": "      it('includes detail of where the error was thrown including the filename', function () {\n        var err = getFileError(__dirname + '/fixtures/runtime.layout.error.pug', {});\n        expect(err.message).toMatch(/layout.with.runtime.error.pug:3/);\n        expect(err.message).toMatch(/Cannot read property 'length' of undefined/);\n      });",
            "file": "error.reporting.test.js",
            "skipped": false,
            "dir": "packages/pug/test"
        },
        {
            "name": "warns about element-with-multiple-attributes",
            "suites": [
                "error reporting",
                "deprecated features"
            ],
            "updatePoint": {
                "line": 195,
                "column": 52
            },
            "line": 195,
            "code": "    it('warns about element-with-multiple-attributes', function () {\n      var consoleWarn = console.warn;\n      var log = '';\n\n      console.warn = function (str) {\n        log += str;\n      };\n\n      var res = pug.renderFile(__dirname + '/fixtures/element-with-multiple-attributes.pug');\n      console.warn = consoleWarn;\n      expect(log).toMatch(/element-with-multiple-attributes.pug, line 1:/);\n      expect(log).toMatch(/You should not have pug tags with multiple attributes/);\n      expect(res).toBe('<div attr=\"val\" foo=\"bar\"></div>');\n    });",
            "file": "error.reporting.test.js",
            "skipped": false,
            "dir": "packages/pug/test"
        },
        {
            "name": "just rethrows without modification",
            "suites": [
                "error reporting",
                "if you throw something that isn't an error"
            ],
            "updatePoint": {
                "line": 211,
                "column": 42
            },
            "line": 211,
            "code": "    it('just rethrows without modification', function () {\n      var err = getError('- throw \"foo\"');\n      expect(err).toBe('foo');\n    });",
            "file": "error.reporting.test.js",
            "skipped": false,
            "dir": "packages/pug/test"
        },
        {
            "name": "throws an error",
            "suites": [
                "error reporting",
                "import without a filename for a basedir"
            ],
            "updatePoint": {
                "line": 217,
                "column": 23
            },
            "line": 217,
            "code": "    it('throws an error', function () {\n      var err = getError('include foo.pug');\n      expect(err.message).toMatch(/the \"filename\" option is required to use/);\n      var err = getError('include /foo.pug');\n      expect(err.message).toMatch(/the \"basedir\" option is required to use/);\n    });",
            "file": "error.reporting.test.js",
            "skipped": false,
            "dir": "packages/pug/test"
        },
        {
            "name": "extends not top level should throw an error",
            "suites": [],
            "updatePoint": {
                "line": 4,
                "column": 49
            },
            "line": 4,
            "code": "test('extends not top level should throw an error', () => {\n  expect(() => pug.compileFile(__dirname + '/index.pug')).toThrow('Declaration of template inheritance (\"extends\") should be the first thing in the file. There can only be one extends statement per file.');\n});",
            "file": "extends-not-top-level/index.test.js",
            "skipped": false,
            "dir": "packages/pug/test"
        },
        {
            "name": "duplicate extends should throw an error",
            "suites": [],
            "updatePoint": {
                "line": 7,
                "column": 45
            },
            "line": 7,
            "code": "test('duplicate extends should throw an error', () => {\n  expect(() => pug.compileFile(__dirname + '/duplicate.pug')).toThrow('Declaration of template inheritance (\"extends\") should be the first thing in the file. There can only be one extends statement per file.');\n});",
            "file": "extends-not-top-level/index.test.js",
            "skipped": false,
            "dir": "packages/pug/test"
        },
        {
            "name": "inline and include markdow-it should match ",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 49
            },
            "line": 3,
            "code": "test('inline and include markdow-it should match ', () => {\n  const outputMarkdownInline = pug.renderFile(__dirname + '/layout-markdown-inline.pug');\n  const outputMarkdownIncludes = pug.renderFile(__dirname + '/layout-markdown-include.pug');\n  expect(outputMarkdownIncludes).toEqual(outputMarkdownInline);\n});",
            "file": "markdown-it/index.test.js",
            "skipped": false,
            "dir": "packages/pug/test"
        },
        {
            "name": "#3295 - lexer plugins should be used in tag interpolation",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 63
            },
            "line": 3,
            "code": "test('#3295 - lexer plugins should be used in tag interpolation', () => {\n  const lex = {\n    advance(lexer) {\n      if ('~' === lexer.input.charAt(0)) {\n        lexer.tokens.push(lexer.tok('text', 'twiddle-dee-dee'));\n        lexer.consume(1);\n        lexer.incrementColumn(1);\n        return true;\n      }\n    }\n\n  };\n  const input = 'p Look at #[~]';\n  const expected = '<p>Look at twiddle-dee-dee</p>';\n  const output = pug.render(input, {\n    plugins: [{\n      lex\n    }]\n  });\n  expect(output).toEqual(expected);\n});",
            "file": "plugins.test.js",
            "skipped": false,
            "dir": "packages/pug/test"
        },
        {
            "name": "should support doctypes",
            "suites": [
                "pug",
                "unit tests with .render()"
            ],
            "updatePoint": {
                "line": 23,
                "column": 31
            },
            "line": 23,
            "code": "    it('should support doctypes', function () {\n      assert.equal('<?xml version=\"1.0\" encoding=\"utf-8\" ?>', pug.render('doctype xml'));\n      assert.equal('<!DOCTYPE html>', pug.render('doctype html'));\n      assert.equal('<!DOCTYPE foo bar baz>', pug.render('doctype foo bar baz'));\n      assert.equal('<!DOCTYPE html>', pug.render('doctype html'));\n      assert.equal('<!DOCTYPE html>', pug.render('doctype', {\n        doctype: 'html'\n      }));\n      assert.equal('<!DOCTYPE html>', pug.render('doctype html', {\n        doctype: 'xml'\n      }));\n      assert.equal('<html></html>', pug.render('html'));\n      assert.equal('<!DOCTYPE html><html></html>', pug.render('html', {\n        doctype: 'html'\n      }));\n      assert.equal('<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML Basic 1.1//EN>', pug.render('doctype html PUBLIC \"-//W3C//DTD XHTML Basic 1.1//EN'));\n    });",
            "file": "pug.test.js",
            "skipped": false,
            "dir": "packages/pug/test"
        },
        {
            "name": "should support Buffers",
            "suites": [
                "pug",
                "unit tests with .render()"
            ],
            "updatePoint": {
                "line": 40,
                "column": 30
            },
            "line": 40,
            "code": "    it('should support Buffers', function () {\n      assert.equal('<p>foo</p>', pug.render(Buffer.from('p foo')));\n    });",
            "file": "pug.test.js",
            "skipped": false,
            "dir": "packages/pug/test"
        },
        {
            "name": "should support line endings",
            "suites": [
                "pug",
                "unit tests with .render()"
            ],
            "updatePoint": {
                "line": 43,
                "column": 35
            },
            "line": 43,
            "code": "    it('should support line endings', function () {\n      var src = ['p', 'div', 'img'];\n      var html = ['<p></p>', '<div></div>', '<img/>'].join('');\n      assert.equal(html, pug.render(src.join('\\n')));\n      assert.equal(html, pug.render(src.join('\\r')));\n      assert.equal(html, pug.render(src.join('\\r\\n')));\n      html = ['<p></p>', '<div></div>', '<img>'].join('');\n      assert.equal(html, pug.render(src.join('\\n'), {\n        doctype: 'html'\n      }));\n      assert.equal(html, pug.render(src.join('\\r'), {\n        doctype: 'html'\n      }));\n      assert.equal(html, pug.render(src.join('\\r\\n'), {\n        doctype: 'html'\n      }));\n    });",
            "file": "pug.test.js",
            "skipped": false,
            "dir": "packages/pug/test"
        },
        {
            "name": "should support single quotes",
            "suites": [
                "pug",
                "unit tests with .render()"
            ],
            "updatePoint": {
                "line": 60,
                "column": 36
            },
            "line": 60,
            "code": "    it('should support single quotes', function () {\n      assert.equal(\"<p>'foo'</p>\", pug.render(\"p 'foo'\"));\n      assert.equal(\"<p>'foo'</p>\", pug.render(\"p\\n  | 'foo'\"));\n      assert.equal('<a href=\"/foo\"></a>', pug.render(\"- var path = 'foo';\\na(href='/' + path)\"));\n    });",
            "file": "pug.test.js",
            "skipped": false,
            "dir": "packages/pug/test"
        },
        {
            "name": "should support block-expansion",
            "suites": [
                "pug",
                "unit tests with .render()"
            ],
            "updatePoint": {
                "line": 65,
                "column": 38
            },
            "line": 65,
            "code": "    it('should support block-expansion', function () {\n      assert.equal('<li><a>foo</a></li><li><a>bar</a></li><li><a>baz</a></li>', pug.render('li: a foo\\nli: a bar\\nli: a baz'));\n      assert.equal('<li class=\"first\"><a>foo</a></li><li><a>bar</a></li><li><a>baz</a></li>', pug.render('li.first: a foo\\nli: a bar\\nli: a baz'));\n      assert.equal('<div class=\"foo\"><div class=\"bar\">baz</div></div>', pug.render('.foo: .bar baz'));\n    });",
            "file": "pug.test.js",
            "skipped": false,
            "dir": "packages/pug/test"
        },
        {
            "name": "should support tags",
            "suites": [
                "pug",
                "unit tests with .render()"
            ],
            "updatePoint": {
                "line": 70,
                "column": 27
            },
            "line": 70,
            "code": "    it('should support tags', function () {\n      var str = ['p', 'div', 'img', 'br/'].join('\\n');\n      var html = ['<p></p>', '<div></div>', '<img/>', '<br/>'].join('');\n      assert.equal(html, pug.render(str), 'Test basic tags');\n      assert.equal('<fb:foo-bar></fb:foo-bar>', pug.render('fb:foo-bar'), 'Test hyphens');\n      assert.equal('<div class=\"something\"></div>', pug.render('div.something'), 'Test classes');\n      assert.equal('<div id=\"something\"></div>', pug.render('div#something'), 'Test ids');\n      assert.equal('<div class=\"something\"></div>', pug.render('.something'), 'Test stand-alone classes');\n      assert.equal('<div id=\"something\"></div>', pug.render('#something'), 'Test stand-alone ids');\n      assert.equal('<div class=\"bar\" id=\"foo\"></div>', pug.render('#foo.bar'));\n      assert.equal('<div class=\"bar\" id=\"foo\"></div>', pug.render('.bar#foo'));\n      assert.equal('<div class=\"bar\" id=\"foo\"></div>', pug.render('div#foo(class=\"bar\")'));\n      assert.equal('<div class=\"bar\" id=\"foo\"></div>', pug.render('div(class=\"bar\")#foo'));\n      assert.equal('<div class=\"foo\" id=\"bar\"></div>', pug.render('div(id=\"bar\").foo'));\n      assert.equal('<div class=\"foo bar baz\"></div>', pug.render('div.foo.bar.baz'));\n      assert.equal('<div class=\"foo bar baz\"></div>', pug.render('div(class=\"foo\").bar.baz'));\n      assert.equal('<div class=\"foo bar baz\"></div>', pug.render('div.foo(class=\"bar\").baz'));\n      assert.equal('<div class=\"foo bar baz\"></div>', pug.render('div.foo.bar(class=\"baz\")'));\n      assert.equal('<div class=\"a-b2\"></div>', pug.render('div.a-b2'));\n      assert.equal('<div class=\"a_b2\"></div>', pug.render('div.a_b2'));\n      assert.equal('<fb:user></fb:user>', pug.render('fb:user'));\n      assert.equal('<fb:user:role></fb:user:role>', pug.render('fb:user:role'));\n      assert.equal('<colgroup><col class=\"test\"/></colgroup>', pug.render('colgroup\\n  col.test'));\n    });",
            "file": "pug.test.js",
            "skipped": false,
            "dir": "packages/pug/test"
        },
        {
            "name": "should support nested tags",
            "suites": [
                "pug",
                "unit tests with .render()"
            ],
            "updatePoint": {
                "line": 94,
                "column": 34
            },
            "line": 94,
            "code": "    it('should support nested tags', function () {\n      var str = ['ul', '  li a', '  li b', '  li', '    ul', '      li c', '      li d', '  li e'].join('\\n');\n      var html = ['<ul>', '<li>a</li>', '<li>b</li>', '<li><ul><li>c</li><li>d</li></ul></li>', '<li>e</li>', '</ul>'].join('');\n      assert.equal(html, pug.render(str));\n      var str = ['a(href=\"#\")', '  | foo ', '  | bar ', '  | baz'].join('\\n');\n      assert.equal('<a href=\"#\">foo \\nbar \\nbaz</a>', pug.render(str));\n      var str = ['ul', '  li one', '  ul', '    | two', '    li three'].join('\\n');\n      var html = ['<ul>', '<li>one</li>', '<ul>two', '<li>three</li>', '</ul>', '</ul>'].join('');\n      assert.equal(html, pug.render(str));\n    });",
            "file": "pug.test.js",
            "skipped": false,
            "dir": "packages/pug/test"
        },
        {
            "name": "should support variable length newlines",
            "suites": [
                "pug",
                "unit tests with .render()"
            ],
            "updatePoint": {
                "line": 104,
                "column": 47
            },
            "line": 104,
            "code": "    it('should support variable length newlines', function () {\n      var str = ['ul', '  li a', '  ', '  li b', ' ', '         ', '  li', '    ul', '      li c', '', '      li d', '  li e'].join('\\n');\n      var html = ['<ul>', '<li>a</li>', '<li>b</li>', '<li><ul><li>c</li><li>d</li></ul></li>', '<li>e</li>', '</ul>'].join('');\n      assert.equal(html, pug.render(str));\n    });",
            "file": "pug.test.js",
            "skipped": false,
            "dir": "packages/pug/test"
        },
        {
            "name": "should support tab conversion",
            "suites": [
                "pug",
                "unit tests with .render()"
            ],
            "updatePoint": {
                "line": 109,
                "column": 37
            },
            "line": 109,
            "code": "    it('should support tab conversion', function () {\n      var str = ['ul', '\\tli a', '\\t', '\\tli b', '\\t\\t', '\\t\\t\\t\\t\\t\\t', '\\tli', '\\t\\tul', '\\t\\t\\tli c', '', '\\t\\t\\tli d', '\\tli e'].join('\\n');\n      var html = ['<ul>', '<li>a</li>', '<li>b</li>', '<li><ul><li>c</li><li>d</li></ul></li>', '<li>e</li>', '</ul>'].join('');\n      assert.equal(html, pug.render(str));\n    });",
            "file": "pug.test.js",
            "skipped": false,
            "dir": "packages/pug/test"
        },
        {
            "name": "should support newlines",
            "suites": [
                "pug",
                "unit tests with .render()"
            ],
            "updatePoint": {
                "line": 114,
                "column": 31
            },
            "line": 114,
            "code": "    it('should support newlines', function () {\n      var str = ['ul', '  li a', '  ', '    ', '', ' ', '  li b', '  li', '    ', '        ', ' ', '    ul', '      ', '      li c', '      li d', '  li e'].join('\\n');\n      var html = ['<ul>', '<li>a</li>', '<li>b</li>', '<li><ul><li>c</li><li>d</li></ul></li>', '<li>e</li>', '</ul>'].join('');\n      assert.equal(html, pug.render(str));\n      var str = ['html', ' ', '  head', '    != \"test\"', '  ', '  ', '  ', '  body'].join('\\n');\n      var html = ['<html>', '<head>', 'test', '</head>', '<body></body>', '</html>'].join('');\n      assert.equal(html, pug.render(str));\n      assert.equal('<foo></foo>something<bar></bar>', pug.render('foo\\n= \"something\"\\nbar'));\n      assert.equal('<foo></foo>something<bar></bar>else', pug.render('foo\\n= \"something\"\\nbar\\n= \"else\"'));\n    });",
            "file": "pug.test.js",
            "skipped": false,
            "dir": "packages/pug/test"
        },
        {
            "name": "should support text",
            "suites": [
                "pug",
                "unit tests with .render()"
            ],
            "updatePoint": {
                "line": 124,
                "column": 27
            },
            "line": 124,
            "code": "    it('should support text', function () {\n      assert.equal('foo\\nbar\\nbaz', pug.render('| foo\\n| bar\\n| baz'));\n      assert.equal('foo \\nbar \\nbaz', pug.render('| foo \\n| bar \\n| baz'));\n      assert.equal('(hey)', pug.render('| (hey)'));\n      assert.equal('some random text', pug.render('| some random text'));\n      assert.equal('  foo', pug.render('|   foo'));\n      assert.equal('  foo  ', pug.render('|   foo  '));\n      assert.equal('  foo  \\n bar    ', pug.render('|   foo  \\n|  bar    '));\n    });",
            "file": "pug.test.js",
            "skipped": false,
            "dir": "packages/pug/test"
        },
        {
            "name": "should support pipe-less text",
            "suites": [
                "pug",
                "unit tests with .render()"
            ],
            "updatePoint": {
                "line": 133,
                "column": 37
            },
            "line": 133,
            "code": "    it('should support pipe-less text', function () {\n      assert.equal('<pre><code><foo></foo><bar></bar></code></pre>', pug.render('pre\\n  code\\n    foo\\n\\n    bar'));\n      assert.equal('<p>foo\\n\\nbar</p>', pug.render('p.\\n  foo\\n\\n  bar'));\n      assert.equal('<p>foo\\n\\n\\n\\nbar</p>', pug.render('p.\\n  foo\\n\\n\\n\\n  bar'));\n      assert.equal('<p>foo\\n  bar\\nfoo</p>', pug.render('p.\\n  foo\\n    bar\\n  foo'));\n      assert.equal('<script>s.parentNode.insertBefore(g,s)</script>', pug.render('script.\\n  s.parentNode.insertBefore(g,s)\\n'));\n      assert.equal('<script>s.parentNode.insertBefore(g,s)</script>', pug.render('script.\\n  s.parentNode.insertBefore(g,s)'));\n    });",
            "file": "pug.test.js",
            "skipped": false,
            "dir": "packages/pug/test"
        },
        {
            "name": "should support tag text",
            "suites": [
                "pug",
                "unit tests with .render()"
            ],
            "updatePoint": {
                "line": 141,
                "column": 31
            },
            "line": 141,
            "code": "    it('should support tag text', function () {\n      assert.equal('<p>some random text</p>', pug.render('p some random text'));\n      assert.equal('<p>click<a>Google</a>.</p>', pug.render('p\\n  | click\\n  a Google\\n  | .'));\n      assert.equal('<p>(parens)</p>', pug.render('p (parens)'));\n      assert.equal('<p foo=\"bar\">(parens)</p>', pug.render('p(foo=\"bar\") (parens)'));\n      assert.equal('<option value=\"\">-- (optional) foo --</option>', pug.render('option(value=\"\") -- (optional) foo --'));\n    });",
            "file": "pug.test.js",
            "skipped": false,
            "dir": "packages/pug/test"
        },
        {
            "name": "should support tag text block",
            "suites": [
                "pug",
                "unit tests with .render()"
            ],
            "updatePoint": {
                "line": 148,
                "column": 37
            },
            "line": 148,
            "code": "    it('should support tag text block', function () {\n      assert.equal('<p>foo \\nbar \\nbaz</p>', pug.render('p\\n  | foo \\n  | bar \\n  | baz'));\n      assert.equal('<label>Password:<input/></label>', pug.render('label\\n  | Password:\\n  input'));\n      assert.equal('<label>Password:<input/></label>', pug.render('label Password:\\n  input'));\n    });",
            "file": "pug.test.js",
            "skipped": false,
            "dir": "packages/pug/test"
        },
        {
            "name": "should support tag text interpolation",
            "suites": [
                "pug",
                "unit tests with .render()"
            ],
            "updatePoint": {
                "line": 153,
                "column": 45
            },
            "line": 153,
            "code": "    it('should support tag text interpolation', function () {\n      assert.equal('yo, pug is cool', pug.render('| yo, #{name} is cool\\n', {\n        name: 'pug'\n      }));\n      assert.equal('<p>yo, pug is cool</p>', pug.render('p yo, #{name} is cool', {\n        name: 'pug'\n      }));\n      assert.equal('yo, pug is cool', pug.render('| yo, #{name || \"pug\"} is cool', {\n        name: null\n      }));\n      assert.equal(\"yo, 'pug' is cool\", pug.render('| yo, #{name || \"\\'pug\\'\"} is cool', {\n        name: null\n      }));\n      assert.equal('foo &lt;script&gt; bar', pug.render('| foo #{code} bar', {\n        code: '<script>'\n      }));\n      assert.equal('foo <script> bar', pug.render('| foo !{code} bar', {\n        code: '<script>'\n      }));\n    });",
            "file": "pug.test.js",
            "skipped": false,
            "dir": "packages/pug/test"
        },
        {
            "name": "should support flexible indentation",
            "suites": [
                "pug",
                "unit tests with .render()"
            ],
            "updatePoint": {
                "line": 173,
                "column": 43
            },
            "line": 173,
            "code": "    it('should support flexible indentation', function () {\n      assert.equal('<html><body><h1>Wahoo</h1><p>test</p></body></html>', pug.render('html\\n  body\\n   h1 Wahoo\\n   p test'));\n    });",
            "file": "pug.test.js",
            "skipped": false,
            "dir": "packages/pug/test"
        },
        {
            "name": "should support interpolation values",
            "suites": [
                "pug",
                "unit tests with .render()"
            ],
            "updatePoint": {
                "line": 176,
                "column": 43
            },
            "line": 176,
            "code": "    it('should support interpolation values', function () {\n      assert.equal('<p>Users: 15</p>', pug.render('p Users: #{15}'));\n      assert.equal('<p>Users: </p>', pug.render('p Users: #{null}'));\n      assert.equal('<p>Users: </p>', pug.render('p Users: #{undefined}'));\n      assert.equal('<p>Users: none</p>', pug.render('p Users: #{undefined || \"none\"}'));\n      assert.equal('<p>Users: 0</p>', pug.render('p Users: #{0}'));\n      assert.equal('<p>Users: false</p>', pug.render('p Users: #{false}'));\n    });",
            "file": "pug.test.js",
            "skipped": false,
            "dir": "packages/pug/test"
        },
        {
            "name": "should support test html 5 mode",
            "suites": [
                "pug",
                "unit tests with .render()"
            ],
            "updatePoint": {
                "line": 184,
                "column": 39
            },
            "line": 184,
            "code": "    it('should support test html 5 mode', function () {\n      assert.equal('<!DOCTYPE html><input type=\"checkbox\" checked>', pug.render('doctype html\\ninput(type=\"checkbox\", checked)'));\n      assert.equal('<!DOCTYPE html><input type=\"checkbox\" checked>', pug.render('doctype html\\ninput(type=\"checkbox\", checked=true)'));\n      assert.equal('<!DOCTYPE html><input type=\"checkbox\">', pug.render('doctype html\\ninput(type=\"checkbox\", checked= false)'));\n    });",
            "file": "pug.test.js",
            "skipped": false,
            "dir": "packages/pug/test"
        },
        {
            "name": "should support multi-line attrs",
            "suites": [
                "pug",
                "unit tests with .render()"
            ],
            "updatePoint": {
                "line": 189,
                "column": 39
            },
            "line": 189,
            "code": "    it('should support multi-line attrs', function () {\n      assert.equal('<a foo=\"bar\" bar=\"baz\" checked=\"checked\">foo</a>', pug.render('a(foo=\"bar\"\\n  bar=\"baz\"\\n  checked) foo'));\n      assert.equal('<a foo=\"bar\" bar=\"baz\" checked=\"checked\">foo</a>', pug.render('a(foo=\"bar\"\\nbar=\"baz\"\\nchecked) foo'));\n      assert.equal('<a foo=\"bar\" bar=\"baz\" checked=\"checked\">foo</a>', pug.render('a(foo=\"bar\"\\n,bar=\"baz\"\\n,checked) foo'));\n      assert.equal('<a foo=\"bar\" bar=\"baz\" checked=\"checked\">foo</a>', pug.render('a(foo=\"bar\",\\nbar=\"baz\",\\nchecked) foo'));\n    });",
            "file": "pug.test.js",
            "skipped": false,
            "dir": "packages/pug/test"
        },
        {
            "name": "should support attrs",
            "suites": [
                "pug",
                "unit tests with .render()"
            ],
            "updatePoint": {
                "line": 195,
                "column": 28
            },
            "line": 195,
            "code": "    it('should support attrs', function () {\n      assert.equal('<img src=\"&lt;script&gt;\"/>', pug.render('img(src=\"<script>\")'), 'Test attr escaping');\n      assert.equal('<a data-attr=\"bar\"></a>', pug.render('a(data-attr=\"bar\")'));\n      assert.equal('<a data-attr=\"bar\" data-attr-2=\"baz\"></a>', pug.render('a(data-attr=\"bar\", data-attr-2=\"baz\")'));\n      assert.equal('<a title=\"foo,bar\"></a>', pug.render('a(title= \"foo,bar\")'));\n      assert.equal('<a title=\"foo,bar\" href=\"#\"></a>', pug.render('a(title= \"foo,bar\", href=\"#\")'));\n      assert.equal('<p class=\"foo\"></p>', pug.render(\"p(class='foo')\"), 'Test single quoted attrs');\n      assert.equal('<input type=\"checkbox\" checked=\"checked\"/>', pug.render('input( type=\"checkbox\", checked )'));\n      assert.equal('<input type=\"checkbox\" checked=\"checked\"/>', pug.render('input( type=\"checkbox\", checked = true )'));\n      assert.equal('<input type=\"checkbox\"/>', pug.render('input(type=\"checkbox\", checked= false)'));\n      assert.equal('<input type=\"checkbox\"/>', pug.render('input(type=\"checkbox\", checked= null)'));\n      assert.equal('<input type=\"checkbox\"/>', pug.render('input(type=\"checkbox\", checked= undefined)'));\n      assert.equal('<img src=\"/foo.png\"/>', pug.render('img(src=\"/foo.png\")'), 'Test attr =');\n      assert.equal('<img src=\"/foo.png\"/>', pug.render('img(src  =  \"/foo.png\")'), 'Test attr = whitespace');\n      assert.equal('<img src=\"/foo.png\"/>', pug.render('img(src=\"/foo.png\")'), 'Test attr :');\n      assert.equal('<img src=\"/foo.png\"/>', pug.render('img(src  =  \"/foo.png\")'), 'Test attr : whitespace');\n      assert.equal('<img src=\"/foo.png\" alt=\"just some foo\"/>', pug.render('img(src=\"/foo.png\", alt=\"just some foo\")'));\n      assert.equal('<img src=\"/foo.png\" alt=\"just some foo\"/>', pug.render('img(src = \"/foo.png\", alt = \"just some foo\")'));\n      assert.equal('<p class=\"foo,bar,baz\"></p>', pug.render('p(class=\"foo,bar,baz\")'));\n      assert.equal('<a href=\"http://google.com\" title=\"Some : weird = title\"></a>', pug.render('a(href= \"http://google.com\", title= \"Some : weird = title\")'));\n      assert.equal('<label for=\"name\"></label>', pug.render('label(for=\"name\")'));\n      assert.equal('<meta name=\"viewport\" content=\"width=device-width\"/>', pug.render(\"meta(name= 'viewport', content='width=device-width')\"), 'Test attrs that contain attr separators');\n      assert.equal('<div style=\"color= white\"></div>', pug.render(\"div(style='color= white')\"));\n      assert.equal('<div style=\"color: white\"></div>', pug.render(\"div(style='color: white')\"));\n      assert.equal('<p class=\"foo\"></p>', pug.render(\"p('class'='foo')\"), 'Test keys with single quotes');\n      assert.equal('<p class=\"foo\"></p>', pug.render('p(\"class\"= \\'foo\\')'), 'Test keys with double quotes');\n      assert.equal('<p data-lang=\"en\"></p>', pug.render('p(data-lang = \"en\")'));\n      assert.equal('<p data-dynamic=\"true\"></p>', pug.render('p(\"data-dynamic\"= \"true\")'));\n      assert.equal('<p class=\"name\" data-dynamic=\"true\"></p>', pug.render('p(\"class\"= \"name\", \"data-dynamic\"= \"true\")'));\n      assert.equal('<p data-dynamic=\"true\"></p>', pug.render('p(\\'data-dynamic\\'= \"true\")'));\n      assert.equal('<p class=\"name\" data-dynamic=\"true\"></p>', pug.render('p(\\'class\\'= \"name\", \\'data-dynamic\\'= \"true\")'));\n      assert.equal('<p class=\"name\" data-dynamic=\"true\" yay=\"yay\"></p>', pug.render('p(\\'class\\'= \"name\", \\'data-dynamic\\'= \"true\", yay)'));\n      assert.equal('<input checked=\"checked\" type=\"checkbox\"/>', pug.render('input(checked, type=\"checkbox\")'));\n      assert.equal(\"<a data-foo=\\\"{ foo: 'bar', bar= 'baz' }\\\"></a>\", pug.render(\"a(data-foo  = \\\"{ foo: 'bar', bar= 'baz' }\\\")\"));\n      assert.equal('<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\"/>', pug.render('meta(http-equiv=\"X-UA-Compatible\", content=\"IE=edge,chrome=1\")'));\n      assert.equal('<div style=\"background: url(/images/test.png)\">Foo</div>', pug.render(\"div(style= 'background: url(/images/test.png)') Foo\"));\n      assert.equal('<div style=\"background = url(/images/test.png)\">Foo</div>', pug.render(\"div(style= 'background = url(/images/test.png)') Foo\"));\n      assert.equal('<div style=\"foo\">Foo</div>', pug.render(\"div(style= ['foo', 'bar'][0]) Foo\"));\n      assert.equal('<div style=\"bar\">Foo</div>', pug.render(\"div(style= { foo: 'bar', baz: 'raz' }['foo']) Foo\"));\n      assert.equal('<a href=\"def\">Foo</a>', pug.render(\"a(href='abcdefg'.substr(3,3)) Foo\"));\n      assert.equal('<a href=\"def\">Foo</a>', pug.render(\"a(href={test: 'abcdefg'}.test.substr(3,3)) Foo\"));\n      assert.equal('<a href=\"def\">Foo</a>', pug.render(\"a(href={test: 'abcdefg'}.test.substr(3,[0,3][1])) Foo\"));\n      assert.equal('<rss xmlns:atom=\"atom\"></rss>', pug.render('rss(xmlns:atom=\"atom\")'));\n      assert.equal('<rss xmlns:atom=\"atom\"></rss>', pug.render('rss(\\'xmlns:atom\\'=\"atom\")'));\n      assert.equal('<rss xmlns:atom=\"atom\"></rss>', pug.render('rss(\"xmlns:atom\"=\\'atom\\')'));\n      assert.equal('<rss xmlns:atom=\"atom\" foo=\"bar\"></rss>', pug.render(\"rss('xmlns:atom'=\\\"atom\\\", 'foo'= 'bar')\"));\n      assert.equal('<a data-obj=\"{ foo: \\'bar\\' }\"></a>', pug.render('a(data-obj= \"{ foo: \\'bar\\' }\")'));\n      assert.equal(\"<meta content=\\\"what's up? 'weee'\\\"/>\", pug.render(\"meta(content=\\\"what's up? 'weee'\\\")\"));\n    });",
            "file": "pug.test.js",
            "skipped": false,
            "dir": "packages/pug/test"
        },
        {
            "name": "should support class attr array",
            "suites": [
                "pug",
                "unit tests with .render()"
            ],
            "updatePoint": {
                "line": 244,
                "column": 39
            },
            "line": 244,
            "code": "    it('should support class attr array', function () {\n      assert.equal('<body class=\"foo bar baz\"></body>', pug.render('body(class=[\"foo\", \"bar\", \"baz\"])'));\n    });",
            "file": "pug.test.js",
            "skipped": false,
            "dir": "packages/pug/test"
        },
        {
            "name": "should support attr parens",
            "suites": [
                "pug",
                "unit tests with .render()"
            ],
            "updatePoint": {
                "line": 247,
                "column": 34
            },
            "line": 247,
            "code": "    it('should support attr parens', function () {\n      assert.equal('<p foo=\"bar\">baz</p>', pug.render('p(foo=(((\"bar\"))))= (((\"baz\")))'));\n    });",
            "file": "pug.test.js",
            "skipped": false,
            "dir": "packages/pug/test"
        },
        {
            "name": "should support code attrs",
            "suites": [
                "pug",
                "unit tests with .render()"
            ],
            "updatePoint": {
                "line": 250,
                "column": 33
            },
            "line": 250,
            "code": "    it('should support code attrs', function () {\n      assert.equal('<p></p>', pug.render('p(id= name)', {\n        name: undefined\n      }));\n      assert.equal('<p></p>', pug.render('p(id= name)', {\n        name: null\n      }));\n      assert.equal('<p></p>', pug.render('p(id= name)', {\n        name: false\n      }));\n      assert.equal('<p id=\"\"></p>', pug.render('p(id= name)', {\n        name: ''\n      }));\n      assert.equal('<p id=\"tj\"></p>', pug.render('p(id= name)', {\n        name: 'tj'\n      }));\n      assert.equal('<p id=\"default\"></p>', pug.render('p(id= name || \"default\")', {\n        name: null\n      }));\n      assert.equal('<p id=\"something\"></p>', pug.render(\"p(id= 'something')\", {\n        name: null\n      }));\n      assert.equal('<p id=\"something\"></p>', pug.render(\"p(id = 'something')\", {\n        name: null\n      }));\n      assert.equal('<p id=\"foo\"></p>', pug.render(\"p(id= (true ? 'foo' : 'bar'))\"));\n      assert.equal('<option value=\"\">Foo</option>', pug.render(\"option(value='') Foo\"));\n    });",
            "file": "pug.test.js",
            "skipped": false,
            "dir": "packages/pug/test"
        },
        {
            "name": "should support code attrs class",
            "suites": [
                "pug",
                "unit tests with .render()"
            ],
            "updatePoint": {
                "line": 278,
                "column": 39
            },
            "line": 278,
            "code": "    it('should support code attrs class', function () {\n      assert.equal('<p class=\"tj\"></p>', pug.render('p(class= name)', {\n        name: 'tj'\n      }));\n      assert.equal('<p class=\"tj\"></p>', pug.render('p( class= name )', {\n        name: 'tj'\n      }));\n      assert.equal('<p class=\"default\"></p>', pug.render('p(class= name || \"default\")', {\n        name: null\n      }));\n      assert.equal('<p class=\"foo default\"></p>', pug.render('p.foo(class= name || \"default\")', {\n        name: null\n      }));\n      assert.equal('<p class=\"default foo\"></p>', pug.render('p(class= name || \"default\").foo', {\n        name: null\n      }));\n      assert.equal('<p id=\"default\"></p>', pug.render('p(id = name || \"default\")', {\n        name: null\n      }));\n      assert.equal('<p id=\"user-1\"></p>', pug.render('p(id = \"user-\" + 1)'));\n      assert.equal('<p class=\"user-1\"></p>', pug.render('p(class = \"user-\" + 1)'));\n    });",
            "file": "pug.test.js",
            "skipped": false,
            "dir": "packages/pug/test"
        },
        {
            "name": "should support code buffering",
            "suites": [
                "pug",
                "unit tests with .render()"
            ],
            "updatePoint": {
                "line": 300,
                "column": 37
            },
            "line": 300,
            "code": "    it('should support code buffering', function () {\n      assert.equal('<p></p>', pug.render('p= null'));\n      assert.equal('<p></p>', pug.render('p= undefined'));\n      assert.equal('<p>0</p>', pug.render('p= 0'));\n      assert.equal('<p>false</p>', pug.render('p= false'));\n    });",
            "file": "pug.test.js",
            "skipped": false,
            "dir": "packages/pug/test"
        },
        {
            "name": "should support script text",
            "suites": [
                "pug",
                "unit tests with .render()"
            ],
            "updatePoint": {
                "line": 306,
                "column": 34
            },
            "line": 306,
            "code": "    it('should support script text', function () {\n      var str = ['script.', '  p foo', '', 'script(type=\"text/template\")', '  p foo', '', 'script(type=\"text/template\").', '  p foo'].join('\\n');\n      var html = ['<script>p foo\\n</script>', '<script type=\"text/template\"><p>foo</p></script>', '<script type=\"text/template\">p foo</script>'].join('');\n      assert.equal(html, pug.render(str));\n    });",
            "file": "pug.test.js",
            "skipped": false,
            "dir": "packages/pug/test"
        },
        {
            "name": "should support comments",
            "suites": [
                "pug",
                "unit tests with .render()"
            ],
            "updatePoint": {
                "line": 311,
                "column": 31
            },
            "line": 311,
            "code": "    it('should support comments', function () {\n      // Regular\n      var str = ['//foo', 'p bar'].join('\\n');\n      var html = ['<!--foo-->', '<p>bar</p>'].join('');\n      assert.equal(html, pug.render(str)); // Between tags\n\n      var str = ['p foo', '// bar ', 'p baz'].join('\\n');\n      var html = ['<p>foo</p>', '<!-- bar -->', '<p>baz</p>'].join('');\n      assert.equal(html, pug.render(str)); // Quotes\n\n      var str = \"<!-- script(src: '/js/validate.js') -->\",\n          js = \"// script(src: '/js/validate.js') \";\n      assert.equal(str, pug.render(js));\n    });",
            "file": "pug.test.js",
            "skipped": false,
            "dir": "packages/pug/test"
        },
        {
            "name": "should support unbuffered comments",
            "suites": [
                "pug",
                "unit tests with .render()"
            ],
            "updatePoint": {
                "line": 325,
                "column": 42
            },
            "line": 325,
            "code": "    it('should support unbuffered comments', function () {\n      var str = ['//- foo', 'p bar'].join('\\n');\n      var html = ['<p>bar</p>'].join('');\n      assert.equal(html, pug.render(str));\n      var str = ['p foo', '//- bar ', 'p baz'].join('\\n');\n      var html = ['<p>foo</p>', '<p>baz</p>'].join('');\n      assert.equal(html, pug.render(str));\n    });",
            "file": "pug.test.js",
            "skipped": false,
            "dir": "packages/pug/test"
        },
        {
            "name": "should support literal html",
            "suites": [
                "pug",
                "unit tests with .render()"
            ],
            "updatePoint": {
                "line": 333,
                "column": 35
            },
            "line": 333,
            "code": "    it('should support literal html', function () {\n      assert.equal('<!--[if IE lt 9]>weeee<![endif]-->', pug.render('<!--[if IE lt 9]>weeee<![endif]-->'));\n    });",
            "file": "pug.test.js",
            "skipped": false,
            "dir": "packages/pug/test"
        },
        {
            "name": "should support code",
            "suites": [
                "pug",
                "unit tests with .render()"
            ],
            "updatePoint": {
                "line": 336,
                "column": 27
            },
            "line": 336,
            "code": "    it('should support code', function () {\n      assert.equal('test', pug.render('!= \"test\"'));\n      assert.equal('test', pug.render('= \"test\"'));\n      assert.equal('test', pug.render('- var foo = \"test\"\\n=foo'));\n      assert.equal('foo<em>test</em>bar', pug.render('- var foo = \"test\"\\n| foo\\nem= foo\\n| bar'));\n      assert.equal('test<h2>something</h2>', pug.render('!= \"test\"\\nh2 something'));\n      var str = ['- var foo = \"<script>\";', '= foo', '!= foo'].join('\\n');\n      var html = ['&lt;script&gt;', '<script>'].join('');\n      assert.equal(html, pug.render(str));\n      var str = ['- var foo = \"<script>\";', '- if (foo)', '  p= foo'].join('\\n');\n      var html = ['<p>&lt;script&gt;</p>'].join('');\n      assert.equal(html, pug.render(str));\n      var str = ['- var foo = \"<script>\";', '- if (foo)', '  p!= foo'].join('\\n');\n      var html = ['<p><script></p>'].join('');\n      assert.equal(html, pug.render(str));\n      var str = ['- var foo;', '- if (foo)', '  p.hasFoo= foo', '- else', '  p.noFoo no foo'].join('\\n');\n      var html = ['<p class=\"noFoo\">no foo</p>'].join('');\n      assert.equal(html, pug.render(str));\n      var str = ['- var foo;', '- if (foo)', '  p.hasFoo= foo', '- else if (true)', '  p kinda foo', '- else', '  p.noFoo no foo'].join('\\n');\n      var html = ['<p>kinda foo</p>'].join('');\n      assert.equal(html, pug.render(str));\n      var str = ['p foo', '= \"bar\"'].join('\\n');\n      var html = ['<p>foo</p>bar'].join('');\n      assert.equal(html, pug.render(str));\n      var str = ['title foo', '- if (true)', '  p something'].join('\\n');\n      var html = ['<title>foo</title><p>something</p>'].join('');\n      assert.equal(html, pug.render(str));\n      var str = ['foo', '  bar= \"bar\"', '    baz= \"baz\"'].join('\\n');\n      var html = ['<foo>', '<bar>bar', '<baz>baz</baz>', '</bar>', '</foo>'].join('');\n      assert.equal(html, pug.render(str));\n      var str = ['-', '  var a =', '    5;', 'p= a'].join('\\n');\n      var html = ['<p>5</p>'].join('');\n      assert.equal(html, pug.render(str));\n    });",
            "file": "pug.test.js",
            "skipped": false,
            "dir": "packages/pug/test"
        },
        {
            "name": "should support each",
            "suites": [
                "pug",
                "unit tests with .render()"
            ],
            "updatePoint": {
                "line": 370,
                "column": 27
            },
            "line": 370,
            "code": "    it('should support each', function () {\n      // Array\n      var str = ['- var items = [\"one\", \"two\", \"three\"];', 'each item in items', '  li= item'].join('\\n');\n      var html = ['<li>one</li>', '<li>two</li>', '<li>three</li>'].join('');\n      assert.equal(html, pug.render(str)); // Any enumerable (length property)\n\n      var str = ['- var jQuery = { length: 3, 0: 1, 1: 2, 2: 3 };', 'each item in jQuery', '  li= item'].join('\\n');\n      var html = ['<li>1</li>', '<li>2</li>', '<li>3</li>'].join('');\n      assert.equal(html, pug.render(str)); // Empty array\n\n      var str = ['- var items = [];', 'each item in items', '  li= item'].join('\\n');\n      assert.equal('', pug.render(str)); // Object\n\n      var str = ['- var obj = { foo: \"bar\", baz: \"raz\" };', 'each val in obj', '  li= val'].join('\\n');\n      var html = ['<li>bar</li>', '<li>raz</li>'].join('');\n      assert.equal(html, pug.render(str)); // Complex\n\n      var str = ['- var obj = { foo: \"bar\", baz: \"raz\" };', 'each key in Object.keys(obj)', '  li= key'].join('\\n');\n      var html = ['<li>foo</li>', '<li>baz</li>'].join('');\n      assert.equal(html, pug.render(str)); // Keys\n\n      var str = ['- var obj = { foo: \"bar\", baz: \"raz\" };', 'each val, key in obj', '  li #{key}: #{val}'].join('\\n');\n      var html = ['<li>foo: bar</li>', '<li>baz: raz</li>'].join('');\n      assert.equal(html, pug.render(str)); // Nested\n\n      var str = ['- var users = [{ name: \"tj\" }]', 'each user in users', '  each val, key in user', '    li #{key} #{val}'].join('\\n');\n      var html = ['<li>name tj</li>'].join('');\n      assert.equal(html, pug.render(str));\n      var str = ['- var users = [\"tobi\", \"loki\", \"jane\"]', 'each user in users', '  li= user'].join('\\n');\n      var html = ['<li>tobi</li>', '<li>loki</li>', '<li>jane</li>'].join('');\n      assert.equal(html, pug.render(str));\n      var str = ['- var users = [\"tobi\", \"loki\", \"jane\"]', 'for user in users', '  li= user'].join('\\n');\n      var html = ['<li>tobi</li>', '<li>loki</li>', '<li>jane</li>'].join('');\n      assert.equal(html, pug.render(str));\n    });",
            "file": "pug.test.js",
            "skipped": false,
            "dir": "packages/pug/test"
        },
        {
            "name": "should support if",
            "suites": [
                "pug",
                "unit tests with .render()"
            ],
            "updatePoint": {
                "line": 405,
                "column": 25
            },
            "line": 405,
            "code": "    it('should support if', function () {\n      var str = ['- var users = [\"tobi\", \"loki\", \"jane\"]', 'if users.length', '  p users: #{users.length}'].join('\\n');\n      assert.equal('<p>users: 3</p>', pug.render(str));\n      assert.equal('<iframe foo=\"bar\"></iframe>', pug.render('iframe(foo=\"bar\")'));\n    });",
            "file": "pug.test.js",
            "skipped": false,
            "dir": "packages/pug/test"
        },
        {
            "name": "should support unless",
            "suites": [
                "pug",
                "unit tests with .render()"
            ],
            "updatePoint": {
                "line": 410,
                "column": 29
            },
            "line": 410,
            "code": "    it('should support unless', function () {\n      var str = ['- var users = [\"tobi\", \"loki\", \"jane\"]', 'unless users.length', '  p no users'].join('\\n');\n      assert.equal('', pug.render(str));\n      var str = ['- var users = []', 'unless users.length', '  p no users'].join('\\n');\n      assert.equal('<p>no users</p>', pug.render(str));\n    });",
            "file": "pug.test.js",
            "skipped": false,
            "dir": "packages/pug/test"
        },
        {
            "name": "should support else",
            "suites": [
                "pug",
                "unit tests with .render()"
            ],
            "updatePoint": {
                "line": 416,
                "column": 27
            },
            "line": 416,
            "code": "    it('should support else', function () {\n      var str = ['- var users = []', 'if users.length', '  p users: #{users.length}', 'else', '  p users: none'].join('\\n');\n      assert.equal('<p>users: none</p>', pug.render(str));\n    });",
            "file": "pug.test.js",
            "skipped": false,
            "dir": "packages/pug/test"
        },
        {
            "name": "should else if",
            "suites": [
                "pug",
                "unit tests with .render()"
            ],
            "updatePoint": {
                "line": 420,
                "column": 22
            },
            "line": 420,
            "code": "    it('should else if', function () {\n      var str = ['- var users = [\"tobi\", \"jane\", \"loki\"]', 'for user in users', '  if user == \"tobi\"', '    p awesome #{user}', '  else if user == \"jane\"', '    p lame #{user}', '  else', '    p #{user}'].join('\\n');\n      assert.equal('<p>awesome tobi</p><p>lame jane</p><p>loki</p>', pug.render(str));\n    });",
            "file": "pug.test.js",
            "skipped": false,
            "dir": "packages/pug/test"
        },
        {
            "name": "should include block",
            "suites": [
                "pug",
                "unit tests with .render()"
            ],
            "updatePoint": {
                "line": 424,
                "column": 28
            },
            "line": 424,
            "code": "    it('should include block', function () {\n      var str = ['html', '  head', '    include fixtures/scripts.pug', '      scripts(src=\"/app.js\")'].join('\\n');\n      assert.equal('<html><head><script src=\"/jquery.js\"></script><script src=\"/caustic.js\"></script><scripts src=\"/app.js\"></scripts></head></html>', pug.render(str, {\n        filename: __dirname + '/pug.test.js'\n      }));\n    });",
            "file": "pug.test.js",
            "skipped": false,
            "dir": "packages/pug/test"
        },
        {
            "name": "should not fail on js newlines",
            "suites": [
                "pug",
                "unit tests with .render()"
            ],
            "updatePoint": {
                "line": 430,
                "column": 38
            },
            "line": 430,
            "code": "    it('should not fail on js newlines', function () {\n      assert.equal('<p>foo\\u2028bar</p>', pug.render('p foo\\u2028bar'));\n      assert.equal('<p>foo\\u2029bar</p>', pug.render('p foo\\u2029bar'));\n    });",
            "file": "pug.test.js",
            "skipped": false,
            "dir": "packages/pug/test"
        },
        {
            "name": "should display error line number correctly up to token level",
            "suites": [
                "pug",
                "unit tests with .render()"
            ],
            "updatePoint": {
                "line": 434,
                "column": 68
            },
            "line": 434,
            "code": "    it('should display error line number correctly up to token level', function () {\n      var str = ['p.', '  Lorem ipsum dolor sit amet, consectetur', '  adipisicing elit, sed do eiusmod tempor', '  incididunt ut labore et dolore magna aliqua.', 'p.', '  Ut enim ad minim veniam, quis nostrud', '  exercitation ullamco laboris nisi ut aliquip', '  ex ea commodo consequat.', 'p.', '  Duis aute irure dolor in reprehenderit', '  in voluptate velit esse cillum dolore eu', '  fugiat nulla pariatur.', 'a(href=\"#\" Next'].join('\\n');\n\n      var errorLocation = function (str) {\n        try {\n          pug.render(str);\n        } catch (err) {\n          return err.message.split('\\n')[0];\n        }\n      };\n\n      assert.equal(errorLocation(str), 'Pug:13:16');\n    });",
            "file": "pug.test.js",
            "skipped": false,
            "dir": "packages/pug/test"
        },
        {
            "name": "does not produce warnings for issue-1593",
            "suites": [
                "pug",
                ".compileFile()"
            ],
            "updatePoint": {
                "line": 449,
                "column": 48
            },
            "line": 449,
            "code": "    it('does not produce warnings for issue-1593', function () {\n      pug.compileFile(__dirname + '/fixtures/issue-1593/index.pug');\n    });",
            "file": "pug.test.js",
            "skipped": false,
            "dir": "packages/pug/test"
        },
        {
            "name": "should support caching (pass 1)",
            "suites": [
                "pug",
                ".compileFile()"
            ],
            "updatePoint": {
                "line": 452,
                "column": 39
            },
            "line": 452,
            "code": "    it('should support caching (pass 1)', function () {\n      fs.writeFileSync(__dirname + '/temp/input-compileFile.pug', '.foo bar');\n      var fn = pug.compileFile(__dirname + '/temp/input-compileFile.pug', {\n        cache: true\n      });\n      var expected = '<div class=\"foo\">bar</div>';\n      assert(fn() === expected);\n    });",
            "file": "pug.test.js",
            "skipped": false,
            "dir": "packages/pug/test"
        },
        {
            "name": "should support caching (pass 2)",
            "suites": [
                "pug",
                ".compileFile()"
            ],
            "updatePoint": {
                "line": 460,
                "column": 39
            },
            "line": 460,
            "code": "    it('should support caching (pass 2)', function () {\n      // Poison the input file\n      fs.writeFileSync(__dirname + '/temp/input-compileFile.pug', '.big fat hen');\n      var fn = pug.compileFile(__dirname + '/temp/input-compileFile.pug', {\n        cache: true\n      });\n      var expected = '<div class=\"foo\">bar</div>';\n      assert(fn() === expected);\n    });",
            "file": "pug.test.js",
            "skipped": false,
            "dir": "packages/pug/test"
        },
        {
            "name": "should support .pug.render(str, fn)",
            "suites": [
                "pug",
                ".render()"
            ],
            "updatePoint": {
                "line": 471,
                "column": 43
            },
            "line": 471,
            "code": "    it('should support .pug.render(str, fn)', function () {\n      pug.render('p foo bar', function (err, str) {\n        assert.ok(!err);\n        assert.equal('<p>foo bar</p>', str);\n      });\n    });",
            "file": "pug.test.js",
            "skipped": false,
            "dir": "packages/pug/test"
        },
        {
            "name": "should support .pug.render(str, options, fn)",
            "suites": [
                "pug",
                ".render()"
            ],
            "updatePoint": {
                "line": 477,
                "column": 52
            },
            "line": 477,
            "code": "    it('should support .pug.render(str, options, fn)', function () {\n      pug.render('p #{foo}', {\n        foo: 'bar'\n      }, function (err, str) {\n        assert.ok(!err);\n        assert.equal('<p>bar</p>', str);\n      });\n    });",
            "file": "pug.test.js",
            "skipped": false,
            "dir": "packages/pug/test"
        },
        {
            "name": "should support .pug.render(str, options, fn) cache",
            "suites": [
                "pug",
                ".render()"
            ],
            "updatePoint": {
                "line": 485,
                "column": 58
            },
            "line": 485,
            "code": "    it('should support .pug.render(str, options, fn) cache', function () {\n      pug.render('p bar', {\n        cache: true\n      }, function (err, str) {\n        assert.ok(/the \"filename\" option is required for caching/.test(err.message));\n      });\n      pug.render('p foo bar', {\n        cache: true,\n        filename: 'test'\n      }, function (err, str) {\n        assert.ok(!err);\n        assert.equal('<p>foo bar</p>', str);\n      });\n    });",
            "file": "pug.test.js",
            "skipped": false,
            "dir": "packages/pug/test"
        },
        {
            "name": "should support .compile()",
            "suites": [
                "pug",
                ".compile()"
            ],
            "updatePoint": {
                "line": 501,
                "column": 33
            },
            "line": 501,
            "code": "    it('should support .compile()', function () {\n      var fn = pug.compile('p foo');\n      assert.equal('<p>foo</p>', fn());\n    });",
            "file": "pug.test.js",
            "skipped": false,
            "dir": "packages/pug/test"
        },
        {
            "name": "should support .compile() locals",
            "suites": [
                "pug",
                ".compile()"
            ],
            "updatePoint": {
                "line": 505,
                "column": 40
            },
            "line": 505,
            "code": "    it('should support .compile() locals', function () {\n      var fn = pug.compile('p= foo');\n      assert.equal('<p>bar</p>', fn({\n        foo: 'bar'\n      }));\n    });",
            "file": "pug.test.js",
            "skipped": false,
            "dir": "packages/pug/test"
        },
        {
            "name": "should support .compile() locals in 'self' hash",
            "suites": [
                "pug",
                ".compile()"
            ],
            "updatePoint": {
                "line": 511,
                "column": 55
            },
            "line": 511,
            "code": "    it(\"should support .compile() locals in 'self' hash\", function () {\n      var fn = pug.compile('p= self.foo', {\n        self: true\n      });\n      assert.equal('<p>bar</p>', fn({\n        foo: 'bar'\n      }));\n    });",
            "file": "pug.test.js",
            "skipped": false,
            "dir": "packages/pug/test"
        },
        {
            "name": "should support .compile() no debug",
            "suites": [
                "pug",
                ".compile()"
            ],
            "updatePoint": {
                "line": 519,
                "column": 42
            },
            "line": 519,
            "code": "    it('should support .compile() no debug', function () {\n      var fn = pug.compile('p foo\\np #{bar}', {\n        compileDebug: false\n      });\n      assert.equal('<p>foo</p><p>baz</p>', fn({\n        bar: 'baz'\n      }));\n    });",
            "file": "pug.test.js",
            "skipped": false,
            "dir": "packages/pug/test"
        },
        {
            "name": "should support .compile() no debug and global helpers",
            "suites": [
                "pug",
                ".compile()"
            ],
            "updatePoint": {
                "line": 527,
                "column": 61
            },
            "line": 527,
            "code": "    it('should support .compile() no debug and global helpers', function () {\n      var fn = pug.compile('p foo\\np #{bar}', {\n        compileDebug: false,\n        helpers: 'global'\n      });\n      assert.equal('<p>foo</p><p>baz</p>', fn({\n        bar: 'baz'\n      }));\n    });",
            "file": "pug.test.js",
            "skipped": false,
            "dir": "packages/pug/test"
        },
        {
            "name": "should be reasonably fast",
            "suites": [
                "pug",
                ".compile()"
            ],
            "updatePoint": {
                "line": 536,
                "column": 33
            },
            "line": 536,
            "code": "    it('should be reasonably fast', function () {\n      pug.compile(perfTest, {});\n    });",
            "file": "pug.test.js",
            "skipped": false,
            "dir": "packages/pug/test"
        },
        {
            "name": "allows trailing space (see #1586)",
            "suites": [
                "pug",
                ".compile()"
            ],
            "updatePoint": {
                "line": 539,
                "column": 41
            },
            "line": 539,
            "code": "    it('allows trailing space (see #1586)', function () {\n      var res = pug.render('ul \\n  li An Item');\n      assert.equal('<ul> <li>An Item</li></ul>', res);\n    });",
            "file": "pug.test.js",
            "skipped": false,
            "dir": "packages/pug/test"
        },
        {
            "name": "should support pug.compileClient(str)",
            "suites": [
                "pug",
                ".compileClient()"
            ],
            "updatePoint": {
                "line": 545,
                "column": 45
            },
            "line": 545,
            "code": "    it('should support pug.compileClient(str)', function () {\n      var src = fs.readFileSync(__dirname + '/cases/basic.pug');\n      var expected = fs.readFileSync(__dirname + '/cases/basic.html', 'utf8').replace(/\\s/g, '');\n      var fn = pug.compileClient(src);\n      fn = Function('pug', fn.toString() + '\\nreturn template;')(pug.runtime);\n      var actual = fn({\n        name: 'foo'\n      }).replace(/\\s/g, '');\n      expect(actual).toBe(expected);\n    });",
            "file": "pug.test.js",
            "skipped": false,
            "dir": "packages/pug/test"
        },
        {
            "name": "should support pug.compileClient(str, options)",
            "suites": [
                "pug",
                ".compileClient()"
            ],
            "updatePoint": {
                "line": 555,
                "column": 54
            },
            "line": 555,
            "code": "    it('should support pug.compileClient(str, options)', function () {\n      var src = '.bar= self.foo';\n      var fn = pug.compileClient(src, {\n        self: true\n      });\n      fn = Function('pug', fn.toString() + '\\nreturn template;')(pug.runtime);\n      var actual = fn({\n        foo: 'baz'\n      });\n      expect(actual).toBe('<div class=\"bar\">baz</div>');\n    });",
            "file": "pug.test.js",
            "skipped": false,
            "dir": "packages/pug/test"
        },
        {
            "name": "should support module syntax in pug.compileClient(str, options) when inlineRuntimeFunctions it true",
            "suites": [
                "pug",
                ".compileClient()"
            ],
            "updatePoint": {
                "line": 566,
                "column": 107
            },
            "line": 566,
            "code": "    it('should support module syntax in pug.compileClient(str, options) when inlineRuntimeFunctions it true', function () {\n      var src = '.bar= self.foo';\n      var fn = pug.compileClient(src, {\n        self: true,\n        module: true,\n        inlineRuntimeFunctions: true\n      });\n      expect(fn).toMatchSnapshot();\n      fs.writeFileSync(__dirname + '/temp/input-compileModuleFileClient.js', fn);\n\n      var fn = require(__dirname + '/temp/input-compileModuleFileClient.js');\n\n      expect(fn({\n        foo: 'baz'\n      })).toBe('<div class=\"bar\">baz</div>');\n    });",
            "file": "pug.test.js",
            "skipped": false,
            "dir": "packages/pug/test"
        },
        {
            "name": "should support module syntax in pug.compileClient(str, options) when inlineRuntimeFunctions it false",
            "suites": [
                "pug",
                ".compileClient()"
            ],
            "updatePoint": {
                "line": 582,
                "column": 108
            },
            "line": 582,
            "code": "    it('should support module syntax in pug.compileClient(str, options) when inlineRuntimeFunctions it false', function () {\n      var src = '.bar= self.foo';\n      var fn = pug.compileClient(src, {\n        self: true,\n        module: true,\n        inlineRuntimeFunctions: false\n      });\n      expect(fn).toMatchSnapshot();\n      fs.writeFileSync(__dirname + '/temp/input-compileModuleFileClient.js', fn);\n\n      var fn = require(__dirname + '/temp/input-compileModuleFileClient.js');\n\n      expect(fn({\n        foo: 'baz'\n      })).toBe('<div class=\"bar\">baz</div>');\n    });",
            "file": "pug.test.js",
            "skipped": false,
            "dir": "packages/pug/test"
        },
        {
            "name": "will synchronously return a string",
            "suites": [
                "pug",
                ".renderFile()"
            ],
            "updatePoint": {
                "line": 600,
                "column": 42
            },
            "line": 600,
            "code": "    it('will synchronously return a string', function () {\n      var expected = fs.readFileSync(__dirname + '/cases/basic.html', 'utf8').replace(/\\s/g, '');\n      var actual = pug.renderFile(__dirname + '/cases/basic.pug', {\n        name: 'foo'\n      }).replace(/\\s/g, '');\n      assert(actual === expected);\n    });",
            "file": "pug.test.js",
            "skipped": false,
            "dir": "packages/pug/test"
        },
        {
            "name": "when given a callback, it calls that rather than returning",
            "suites": [
                "pug",
                ".renderFile()"
            ],
            "updatePoint": {
                "line": 607,
                "column": 66
            },
            "line": 607,
            "code": "    it('when given a callback, it calls that rather than returning', function (done) {\n      var expected = fs.readFileSync(__dirname + '/cases/basic.html', 'utf8').replace(/\\s/g, '');\n      pug.renderFile(__dirname + '/cases/basic.pug', {\n        name: 'foo'\n      }, function (err, actual) {\n        if (err) return done(err);\n        assert(actual.replace(/\\s/g, '') === expected);\n        done();\n      });\n    });",
            "file": "pug.test.js",
            "skipped": false,
            "dir": "packages/pug/test"
        },
        {
            "name": "when given a callback, it calls that rather than returning even if there are no options",
            "suites": [
                "pug",
                ".renderFile()"
            ],
            "updatePoint": {
                "line": 617,
                "column": 95
            },
            "line": 617,
            "code": "    it('when given a callback, it calls that rather than returning even if there are no options', function (done) {\n      var expected = fs.readFileSync(__dirname + '/cases/basic.html', 'utf8').replace(/\\s/g, '');\n      pug.renderFile(__dirname + '/cases/basic.pug', function (err, actual) {\n        if (err) return done(err);\n        assert(actual.replace(/\\s/g, '') === expected);\n        done();\n      });\n    });",
            "file": "pug.test.js",
            "skipped": false,
            "dir": "packages/pug/test"
        },
        {
            "name": "when given a callback, it calls that with any errors",
            "suites": [
                "pug",
                ".renderFile()"
            ],
            "updatePoint": {
                "line": 625,
                "column": 60
            },
            "line": 625,
            "code": "    it('when given a callback, it calls that with any errors', function (done) {\n      pug.renderFile(__dirname + '/fixtures/runtime.error.pug', function (err, actual) {\n        assert.ok(err);\n        done();\n      });\n    });",
            "file": "pug.test.js",
            "skipped": false,
            "dir": "packages/pug/test"
        },
        {
            "name": "should support caching (pass 1)",
            "suites": [
                "pug",
                ".renderFile()"
            ],
            "updatePoint": {
                "line": 631,
                "column": 39
            },
            "line": 631,
            "code": "    it('should support caching (pass 1)', function (done) {\n      fs.writeFileSync(__dirname + '/temp/input-renderFile.pug', '.foo bar');\n      pug.renderFile(__dirname + '/temp/input-renderFile.pug', {\n        cache: true\n      }, function (err, actual) {\n        if (err) return done(err);\n        assert.equal('<div class=\"foo\">bar</div>', actual);\n        done();\n      });\n    });",
            "file": "pug.test.js",
            "skipped": false,
            "dir": "packages/pug/test"
        },
        {
            "name": "should support caching (pass 2)",
            "suites": [
                "pug",
                ".renderFile()"
            ],
            "updatePoint": {
                "line": 641,
                "column": 39
            },
            "line": 641,
            "code": "    it('should support caching (pass 2)', function (done) {\n      // Poison the input file\n      fs.writeFileSync(__dirname + '/temp/input-renderFile.pug', '.big fat hen');\n      pug.renderFile(__dirname + '/temp/input-renderFile.pug', {\n        cache: true\n      }, function (err, actual) {\n        if (err) return done(err);\n        assert.equal('<div class=\"foo\">bar</div>', actual);\n        done();\n      });\n    });",
            "file": "pug.test.js",
            "skipped": false,
            "dir": "packages/pug/test"
        },
        {
            "name": "returns a string form of a function called `template`",
            "suites": [
                "pug",
                ".compileFileClient(path, options)"
            ],
            "updatePoint": {
                "line": 654,
                "column": 61
            },
            "line": 654,
            "code": "    it('returns a string form of a function called `template`', function () {\n      var src = pug.compileFileClient(__dirname + '/cases/basic.pug');\n      var expected = fs.readFileSync(__dirname + '/cases/basic.html', 'utf8').replace(/\\s/g, '');\n      var fn = Function('pug', src + '\\nreturn template;')(pug.runtime);\n      var actual = fn({\n        name: 'foo'\n      }).replace(/\\s/g, '');\n      assert(actual === expected);\n    });",
            "file": "pug.test.js",
            "skipped": false,
            "dir": "packages/pug/test"
        },
        {
            "name": "accepts the `name` option to rename the resulting function",
            "suites": [
                "pug",
                ".compileFileClient(path, options)"
            ],
            "updatePoint": {
                "line": 663,
                "column": 66
            },
            "line": 663,
            "code": "    it('accepts the `name` option to rename the resulting function', function () {\n      var src = pug.compileFileClient(__dirname + '/cases/basic.pug', {\n        name: 'myTemplateName'\n      });\n      var expected = fs.readFileSync(__dirname + '/cases/basic.html', 'utf8').replace(/\\s/g, '');\n      var fn = Function('pug', src + '\\nreturn myTemplateName;')(pug.runtime);\n      var actual = fn({\n        name: 'foo'\n      }).replace(/\\s/g, '');\n      assert(actual === expected);\n    });",
            "file": "pug.test.js",
            "skipped": false,
            "dir": "packages/pug/test"
        },
        {
            "name": "should support caching (pass 1)",
            "suites": [
                "pug",
                ".compileFileClient(path, options)"
            ],
            "updatePoint": {
                "line": 674,
                "column": 39
            },
            "line": 674,
            "code": "    it('should support caching (pass 1)', function () {\n      fs.writeFileSync(__dirname + '/temp/input-compileFileClient.pug', '.foo bar');\n      var src = pug.compileFileClient(__dirname + '/temp/input-compileFileClient.pug', {\n        name: 'myTemplateName',\n        cache: true\n      });\n      var expected = '<div class=\"foo\">bar</div>';\n      var fn = Function('pug', src + '\\nreturn myTemplateName;')(pug.runtime);\n      assert(fn() === expected);\n    });",
            "file": "pug.test.js",
            "skipped": false,
            "dir": "packages/pug/test"
        },
        {
            "name": "should support caching (pass 2)",
            "suites": [
                "pug",
                ".compileFileClient(path, options)"
            ],
            "updatePoint": {
                "line": 684,
                "column": 39
            },
            "line": 684,
            "code": "    it('should support caching (pass 2)', function () {\n      // Poison the input file\n      fs.writeFileSync(__dirname + '/temp/input-compileFileClient.pug', '.big fat hen');\n      var src = pug.compileFileClient(__dirname + '/temp/input-compileFileClient.pug', {\n        name: 'myTemplateName',\n        cache: true\n      });\n      var expected = '<div class=\"foo\">bar</div>';\n      var fn = Function('pug', src + '\\nreturn myTemplateName;')(pug.runtime);\n      assert(fn() === expected);\n    });",
            "file": "pug.test.js",
            "skipped": false,
            "dir": "packages/pug/test"
        },
        {
            "name": "merges two attribute objects, giving precedensce to the second object",
            "suites": [
                "pug",
                ".runtime",
                ".merge"
            ],
            "updatePoint": {
                "line": 698,
                "column": 79
            },
            "line": 698,
            "code": "      it('merges two attribute objects, giving precedensce to the second object', function () {\n        assert.deepEqual(pug.runtime.merge({}, {\n          class: ['foo', 'bar'],\n          foo: 'bar'\n        }), {\n          class: ['foo', 'bar'],\n          foo: 'bar'\n        });\n        assert.deepEqual(pug.runtime.merge({\n          class: ['foo'],\n          foo: 'baz'\n        }, {\n          class: ['bar'],\n          foo: 'bar'\n        }), {\n          class: ['foo', 'bar'],\n          foo: 'bar'\n        });\n        assert.deepEqual(pug.runtime.merge({\n          class: ['foo', 'bar'],\n          foo: 'bar'\n        }, {}), {\n          class: ['foo', 'bar'],\n          foo: 'bar'\n        });\n      });",
            "file": "pug.test.js",
            "skipped": false,
            "dir": "packages/pug/test"
        },
        {
            "name": "Renders the given attributes object",
            "suites": [
                "pug",
                ".runtime",
                ".attrs"
            ],
            "updatePoint": {
                "line": 726,
                "column": 45
            },
            "line": 726,
            "code": "      it('Renders the given attributes object', function () {\n        assert.equal(pug.runtime.attrs({}), '');\n        assert.equal(pug.runtime.attrs({\n          class: []\n        }), '');\n        assert.equal(pug.runtime.attrs({\n          class: ['foo']\n        }), ' class=\"foo\"');\n        assert.equal(pug.runtime.attrs({\n          class: ['foo'],\n          id: 'bar'\n        }), ' class=\"foo\" id=\"bar\"');\n      });",
            "file": "pug.test.js",
            "skipped": false,
            "dir": "packages/pug/test"
        },
        {
            "name": "is maintained",
            "suites": [
                "pug",
                "filter indentation"
            ],
            "updatePoint": {
                "line": 742,
                "column": 21
            },
            "line": 742,
            "code": "    it('is maintained', function () {\n      var filters = {\n        indents: function (str) {\n          return str.split(/\\n/).map(function (line) {\n            return line.match(/^ */)[0].length;\n          }).join(',');\n        }\n      };\n      var indents = [':indents', '  x', '   x', '    x', '     x', '  x', '      x', '      x', '     x', '     x', '      x', '    x', '  x', '    x', '  x', '   x'].join('\\n');\n      assert.equal(pug.render(indents, {\n        filters: filters\n      }), '0,1,2,3,0,4,4,3,3,4,2,0,2,0,1');\n    });",
            "file": "pug.test.js",
            "skipped": false,
            "dir": "packages/pug/test"
        },
        {
            "name": "should list the filename of the template referenced by extends",
            "suites": [
                "pug",
                ".compile().dependencies"
            ],
            "updatePoint": {
                "line": 757,
                "column": 70
            },
            "line": 757,
            "code": "    it('should list the filename of the template referenced by extends', function () {\n      var filename = __dirname + '/dependencies/extends1.pug';\n      var str = fs.readFileSync(filename, 'utf8');\n      var info = pug.compile(str, {\n        filename: filename\n      });\n      assert.deepEqual([path.resolve(__dirname + '/dependencies/dependency1.pug')], info.dependencies);\n    });",
            "file": "pug.test.js",
            "skipped": false,
            "dir": "packages/pug/test"
        },
        {
            "name": "should list the filename of the template referenced by an include",
            "suites": [
                "pug",
                ".compile().dependencies"
            ],
            "updatePoint": {
                "line": 765,
                "column": 73
            },
            "line": 765,
            "code": "    it('should list the filename of the template referenced by an include', function () {\n      var filename = __dirname + '/dependencies/include1.pug';\n      var str = fs.readFileSync(filename, 'utf8');\n      var info = pug.compile(str, {\n        filename: filename\n      });\n      assert.deepEqual([path.resolve(__dirname + '/dependencies/dependency1.pug')], info.dependencies);\n    });",
            "file": "pug.test.js",
            "skipped": false,
            "dir": "packages/pug/test"
        },
        {
            "name": "should list the dependencies of extends dependencies",
            "suites": [
                "pug",
                ".compile().dependencies"
            ],
            "updatePoint": {
                "line": 773,
                "column": 60
            },
            "line": 773,
            "code": "    it('should list the dependencies of extends dependencies', function () {\n      var filename = __dirname + '/dependencies/extends2.pug';\n      var str = fs.readFileSync(filename, 'utf8');\n      var info = pug.compile(str, {\n        filename: filename\n      });\n      assert.deepEqual([path.resolve(__dirname + '/dependencies/dependency2.pug'), path.resolve(__dirname + '/dependencies/dependency3.pug')], info.dependencies);\n    });",
            "file": "pug.test.js",
            "skipped": false,
            "dir": "packages/pug/test"
        },
        {
            "name": "should list the dependencies of include dependencies",
            "suites": [
                "pug",
                ".compile().dependencies"
            ],
            "updatePoint": {
                "line": 781,
                "column": 60
            },
            "line": 781,
            "code": "    it('should list the dependencies of include dependencies', function () {\n      var filename = __dirname + '/dependencies/include2.pug';\n      var str = fs.readFileSync(filename, 'utf8');\n      var info = pug.compile(str, {\n        filename: filename\n      });\n      assert.deepEqual([path.resolve(__dirname + '/dependencies/dependency2.pug'), path.resolve(__dirname + '/dependencies/dependency3.pug')], info.dependencies);\n    });",
            "file": "pug.test.js",
            "skipped": false,
            "dir": "packages/pug/test"
        },
        {
            "name": "should have a name attribute",
            "suites": [
                "pug",
                ".name"
            ],
            "updatePoint": {
                "line": 791,
                "column": 36
            },
            "line": 791,
            "code": "    it('should have a name attribute', function () {\n      assert.strictEqual(pug.name, 'Pug');\n    });",
            "file": "pug.test.js",
            "skipped": false,
            "dir": "packages/pug/test"
        },
        {
            "name": "#2436 - block with a same name extends from the same layout in nesting",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 76
            },
            "line": 3,
            "code": "test('#2436 - block with a same name extends from the same layout in nesting', () => {\n  const output = pug.renderFile(__dirname + '/issue1.pug', {\n    pretty: true\n  });\n  expect(output).toMatchSnapshot();\n});",
            "file": "regression-2436/index.test.js",
            "skipped": false,
            "dir": "packages/pug/test"
        },
        {
            "name": "#2436 - block with a same name extends from different layout in nesting",
            "suites": [],
            "updatePoint": {
                "line": 9,
                "column": 77
            },
            "line": 9,
            "code": "test('#2436 - block with a same name extends from different layout in nesting', () => {\n  const output = pug.renderFile(__dirname + '/issue2.pug', {\n    pretty: true\n  });\n  expect(output).toMatchSnapshot();\n});",
            "file": "regression-2436/index.test.js",
            "skipped": false,
            "dir": "packages/pug/test"
        },
        {
            "name": "layout with shadowed block",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 32
            },
            "line": 3,
            "code": "test('layout with shadowed block', () => {\n  const outputWithAjax = pug.renderFile(__dirname + '/index.pug', {\n    ajax: true\n  });\n  const outputWithoutAjax = pug.renderFile(__dirname + '/index.pug', {\n    ajax: false\n  });\n  expect(outputWithAjax).toMatchSnapshot();\n  expect(outputWithoutAjax).toMatchSnapshot();\n});",
            "file": "shadowed-block/index.test.js",
            "skipped": false,
            "dir": "packages/pug/test"
        }
    ],
    "badge": "pugjs__pug.svg"
}