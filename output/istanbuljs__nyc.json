{
    "repo": "istanbuljs/nyc",
    "url": "https://github.com/istanbuljs/nyc",
    "branch": "master",
    "configs": [
        {
            "package": "nyc",
            "lang": "js",
            "dir": "test",
            "framework": "jest",
            "pattern": "**/*.{js,ts}"
        }
    ],
    "tests": [
        {
            "name": "loads 'exclude' patterns from package.json#nyc",
            "suites": [],
            "updatePoint": {
                "line": 15,
                "column": 52
            },
            "line": 15,
            "code": "test(\"loads 'exclude' patterns from package.json#nyc\", async t => {\n  const nyc = new NYC(await parseArgv(path.resolve(__dirname, './fixtures')));\n  t.strictEqual(nyc.exclude.exclude.length, 8);\n});",
            "file": "config.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "loads 'extension' patterns from package.json#nyc",
            "suites": [],
            "updatePoint": {
                "line": 19,
                "column": 54
            },
            "line": 19,
            "code": "test(\"loads 'extension' patterns from package.json#nyc\", async t => {\n  const nyc = new NYC(await parseArgv(path.resolve(__dirname, './fixtures/conf-multiple-extensions')));\n  t.strictEqual(nyc.extensions.length, 3);\n});",
            "file": "config.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "ignores 'include' option if it's falsy or []",
            "suites": [],
            "updatePoint": {
                "line": 23,
                "column": 50
            },
            "line": 23,
            "code": "test(\"ignores 'include' option if it's falsy or []\", async t => {\n  const nyc1 = new NYC(await parseArgv(path.resolve(__dirname, './fixtures/conf-empty')));\n  t.strictEqual(nyc1.exclude.include, false);\n  const nyc2 = new NYC({\n    include: []\n  });\n  t.strictEqual(nyc2.exclude.include, false);\n});",
            "file": "config.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "ignores 'exclude' option if it's falsy",
            "suites": [],
            "updatePoint": {
                "line": 31,
                "column": 44
            },
            "line": 31,
            "code": "test(\"ignores 'exclude' option if it's falsy\", async t => {\n  const nyc = new NYC(await parseArgv(path.resolve(__dirname, './fixtures/conf-empty')));\n  t.strictEqual(nyc.exclude.exclude.length, 27);\n});",
            "file": "config.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "allows for empty 'exclude'",
            "suites": [],
            "updatePoint": {
                "line": 35,
                "column": 32
            },
            "line": 35,
            "code": "test(\"allows for empty 'exclude'\", async t => {\n  const nyc = new NYC({\n    exclude: []\n  }); // an empty exclude still has **/node_modules/**, node_modules/** and added.\n\n  t.strictEqual(nyc.exclude.exclude.length, 2);\n});",
            "file": "config.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "allows for completely empty 'exclude' with exclude-node-modules",
            "suites": [],
            "updatePoint": {
                "line": 42,
                "column": 69
            },
            "line": 42,
            "code": "test(\"allows for completely empty 'exclude' with exclude-node-modules\", async t => {\n  const nyc = new NYC({\n    exclude: [],\n    excludeNodeModules: false\n  });\n  t.strictEqual(nyc.exclude.exclude.length, 0);\n});",
            "file": "config.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should resolve default cache folder to absolute path",
            "suites": [],
            "updatePoint": {
                "line": 49,
                "column": 58
            },
            "line": 49,
            "code": "test('should resolve default cache folder to absolute path', async t => {\n  const nyc = new NYC({\n    cache: true\n  });\n  t.strictEqual(path.isAbsolute(nyc.cacheDirectory), true);\n});",
            "file": "config.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should resolve custom cache folder to absolute path",
            "suites": [],
            "updatePoint": {
                "line": 55,
                "column": 57
            },
            "line": 55,
            "code": "test('should resolve custom cache folder to absolute path', async t => {\n  const nyc = new NYC({\n    cacheDir: '.nyc_cache',\n    cache: true\n  });\n  t.strictEqual(path.isAbsolute(nyc.cacheDirectory), true);\n});",
            "file": "config.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "if cache is false _disableCachingTransform is true",
            "suites": [],
            "updatePoint": {
                "line": 62,
                "column": 56
            },
            "line": 62,
            "code": "test('if cache is false _disableCachingTransform is true', async t => {\n  const nycParent = new NYC({\n    cache: false,\n    isChildProcess: false\n  });\n  const nycChild = new NYC({\n    cache: false,\n    isChildProcess: true\n  });\n  t.strictEqual(nycParent._disableCachingTransform(), true);\n  t.strictEqual(nycChild._disableCachingTransform(), true);\n});",
            "file": "config.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "if cache is true _disableCachingTransform is equal to !isChildProcess",
            "suites": [],
            "updatePoint": {
                "line": 74,
                "column": 75
            },
            "line": 74,
            "code": "test('if cache is true _disableCachingTransform is equal to !isChildProcess', async t => {\n  const nycParent = new NYC({\n    cache: true,\n    isChildProcess: false\n  });\n  const nycChild = new NYC({\n    cache: true,\n    isChildProcess: true\n  });\n  t.strictEqual(nycParent._disableCachingTransform(), true);\n  t.strictEqual(nycChild._disableCachingTransform(), false);\n});",
            "file": "config.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "hideInstrumenterArgs removes dashed options that proceed bin",
            "suites": [],
            "updatePoint": {
                "line": 13,
                "column": 66
            },
            "line": 13,
            "code": "test('hideInstrumenterArgs removes dashed options that proceed bin', async t => {\n  process.argv = [process.execPath, nycBin, '--reporter', 'lcov', 'node', 'test/nyc-tap.js'];\n  const {\n    argv\n  } = yargs(process.argv.slice(2));\n  const munged = processArgs.hideInstrumenterArgs(argv);\n  t.strictSame(munged, ['node', 'test/nyc-tap.js']);\n});",
            "file": "process-args.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "hideInstrumenterArgs parses extra args directly after -- as Node execArgv",
            "suites": [],
            "updatePoint": {
                "line": 21,
                "column": 79
            },
            "line": 21,
            "code": "test('hideInstrumenterArgs parses extra args directly after -- as Node execArgv', async t => {\n  process.argv = [process.execPath, nycBin, '--', '--expose-gc', 'index.js'];\n  const {\n    argv\n  } = yargs(process.argv.slice(2));\n  const munged = processArgs.hideInstrumenterArgs(argv);\n  t.strictSame(munged, [process.execPath, '--expose-gc', 'index.js']);\n});",
            "file": "process-args.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "hideInstrumenteeArgs ignores arguments after the instrumented bin",
            "suites": [],
            "updatePoint": {
                "line": 29,
                "column": 71
            },
            "line": 29,
            "code": "test('hideInstrumenteeArgs ignores arguments after the instrumented bin', async t => {\n  process.argv = [process.execPath, nycBin, '--reporter', 'lcov', 'node', 'test/nyc-tap.js', '--arg', '--'];\n  const munged = processArgs.hideInstrumenteeArgs();\n  t.strictSame(munged, ['--reporter', 'lcov', 'node']);\n});",
            "file": "process-args.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "hideInstrumenteeArgs does not ignore arguments if command is recognized",
            "suites": [],
            "updatePoint": {
                "line": 34,
                "column": 77
            },
            "line": 34,
            "code": "test('hideInstrumenteeArgs does not ignore arguments if command is recognized', async t => {\n  process.argv = [process.execPath, nycBin, 'report', '--reporter', 'lcov'];\n  const munged = processArgs.hideInstrumenteeArgs();\n  t.strictSame(munged, ['report', '--reporter', 'lcov']);\n});",
            "file": "process-args.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "hideInstrumenteeArgs does not ignore arguments if no command is provided",
            "suites": [],
            "updatePoint": {
                "line": 39,
                "column": 78
            },
            "line": 39,
            "code": "test('hideInstrumenteeArgs does not ignore arguments if no command is provided', async t => {\n  process.argv = [process.execPath, nycBin, '--version'];\n  const munged = processArgs.hideInstrumenteeArgs();\n  t.strictSame(munged, ['--version']);\n});",
            "file": "process-args.js",
            "skipped": false,
            "dir": "test"
        }
    ],
    "badge": "istanbuljs__nyc.svg"
}