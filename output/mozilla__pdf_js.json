{"repo":"mozilla/pdf.js","url":"https://github.com/mozilla/pdf.js","branch":"master","configs":[{"package":"pdf.js","lang":"js","dir":"test","framework":"jasmine","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"returns output","suites":["font1","test harness testing"],"line":7,"updatePoint":{"line":7,"column":22,"index":2710},"code":"    it(\"returns output\", async function () {\n      const output = await ttx(font1_1);\n      verifyTtxOutput(output);\n      expect(/<ttFont /.test(output)).toEqual(true);\n      expect(/<\\/ttFont>/.test(output)).toEqual(true);\n    });","file":"font/font_core_spec.js","skipped":false,"dir":"test"},{"name":"table was truncated in the middle of functions","suites":["font_fpgm","Fixes fpgm table"],"line":12,"updatePoint":{"line":12,"column":54,"index":93718},"code":"    it(\"table was truncated in the middle of functions\", async function () {\n      const cMap = await CMapFactory.create({\n        encoding: Name.get(\"Identity-H\")\n      });\n      const font = new Font(\"font\", new Stream(font2324), {\n        loadedName: \"font\",\n        type: \"CIDFontType2\",\n        differences: [],\n        defaultEncoding: [],\n        cMap,\n        toUnicode: new ToUnicodeMap([]),\n        xHeight: 0,\n        capHeight: 0,\n        italicAngle: 0\n      });\n      const output = await ttx(font.data);\n      verifyTtxOutput(output);\n      expect(/(ENDF\\[ \\]|SVTCA\\[0\\])\\s*\\/\\*.*\\*\\/\\s*<\\/assembly>\\s*<\\/fpgm>/.test(output)).toEqual(true);\n    });","file":"font/font_fpgm_spec.js","skipped":false,"dir":"test"},{"name":"has invalid version number","suites":["font_post","OS/2 table removal on bad post table values"],"line":15,"updatePoint":{"line":15,"column":34,"index":39201},"code":"    it(\"has invalid version number\", async function () {\n      const font = new Font(\"font\", new Stream(font2154), {\n        loadedName: \"font\",\n        type: \"TrueType\",\n        differences: [],\n        defaultEncoding: [],\n        toUnicode: new ToUnicodeMap([]),\n        xHeight: 0,\n        capHeight: 0,\n        italicAngle: 0\n      });\n      const output = await ttx(font.data);\n      verifyTtxOutput(output);\n      expect(/<OS_2>\\s*<!--.*\\r?\\n.*-->\\s*<version value=\"3\"\\/>/.test(output)).toEqual(true);\n    });","file":"font/font_os2_spec.js","skipped":false,"dir":"test"},{"name":"has invalid selection attributes presence","suites":["font_post","OS/2 table removal on bad post table values"],"line":30,"updatePoint":{"line":30,"column":49,"index":39733},"code":"    it(\"has invalid selection attributes presence\", async function () {\n      const cMap = await CMapFactory.create({\n        encoding: Name.get(\"Identity-H\")\n      });\n      const font = new Font(\"font\", new Stream(font1282), {\n        loadedName: \"font\",\n        type: \"CIDFontType2\",\n        differences: [],\n        defaultEncoding: [],\n        cMap,\n        toUnicode: new ToUnicodeMap([]),\n        xHeight: 0,\n        capHeight: 0,\n        italicAngle: 0\n      });\n      const output = await ttx(font.data);\n      verifyTtxOutput(output);\n      expect(/<OS_2>\\s*<!--.*\\r?\\n.*-->\\s*<version value=\"3\"\\/>/.test(output)).toEqual(true);\n    });","file":"font/font_os2_spec.js","skipped":false,"dir":"test"},{"name":"has invalid version number","suites":["font_post","post table removal on bad post table values"],"line":18,"updatePoint":{"line":18,"column":34,"index":74469},"code":"    it(\"has invalid version number\", async function () {\n      const cMap = await CMapFactory.create({\n        encoding: Name.get(\"Identity-H\")\n      });\n      const font = new Font(\"font\", new Stream(font2109), {\n        loadedName: \"font\",\n        type: \"CIDFontType2\",\n        differences: [],\n        defaultEncoding: [],\n        cMap,\n        toUnicode: new ToUnicodeMap([]),\n        xHeight: 0,\n        capHeight: 0,\n        italicAngle: 0\n      });\n      const output = await ttx(font.data);\n      verifyTtxOutput(output);\n      expect(/<post>\\s*<formatType value=\"3\\.0\"\\/>/.test(output)).toEqual(true);\n    });","file":"font/font_post_spec.js","skipped":false,"dir":"test"},{"name":"has invalid glyph name indexes","suites":["font_post","post table removal on bad post table values"],"line":37,"updatePoint":{"line":37,"column":38,"index":75092},"code":"    it(\"has invalid glyph name indexes\", async function () {\n      const font = new Font(\"font\", new Stream(font2189), {\n        loadedName: \"font\",\n        type: \"TrueType\",\n        differences: [],\n        defaultEncoding: [],\n        toUnicode: new ToUnicodeMap([]),\n        xHeight: 0,\n        capHeight: 0,\n        italicAngle: 0\n      });\n      const output = await ttx(font.data);\n      verifyTtxOutput(output);\n      expect(/<post>\\s*<formatType value=\"3\\.0\"\\/>/.test(output)).toEqual(true);\n    });","file":"font/font_post_spec.js","skipped":false,"dir":"test"},{"name":"has right amount of glyphs specified","suites":["font_post","post table removal on bad post table values"],"line":52,"updatePoint":{"line":52,"column":44,"index":75606},"code":"    it(\"has right amount of glyphs specified\", async function () {\n      const font = new Font(\"font\", new Stream(font2374), {\n        loadedName: \"font\",\n        type: \"TrueType\",\n        differences: [],\n        defaultEncoding: [],\n        toUnicode: new ToUnicodeMap([]),\n        xHeight: 0,\n        capHeight: 0,\n        italicAngle: 0\n      });\n      const output = await ttx(font.data);\n      verifyTtxOutput(output);\n      expect(/<post>\\s*<formatType value=\"3\\.0\"\\/>/.test(output)).toEqual(true);\n    });","file":"font/font_post_spec.js","skipped":false,"dir":"test"},{"name":"must build structure that maps to text layer","suites":["accessibility","structure tree"],"line":29,"updatePoint":{"line":29,"column":52,"index":981},"code":"    it(\"must build structure that maps to text layer\", async () => {\n      await Promise.all(pages.map(async ([browserName, page]) => {\n        await page.waitForSelector(\".structTree\");\n\n        // Check the headings match up.\n        const head1 = await page.$eval(\".structTree [role='heading'][aria-level='1'] span\", el => document.getElementById(el.getAttribute(\"aria-owns\")).textContent);\n        expect(head1).withContext(`In ${browserName}`).toEqual(\"Heading 1\");\n        const head2 = await page.$eval(\".structTree [role='heading'][aria-level='2'] span\", el => document.getElementById(el.getAttribute(\"aria-owns\")).textContent);\n        expect(head2).withContext(`In ${browserName}`).toEqual(\"Heading 2\");\n\n        // Check the order of the content.\n        const texts = await page.$$eval(\".structTree [aria-owns]\", nodes => nodes.map(el => document.getElementById(el.getAttribute(\"aria-owns\")).textContent));\n        expect(texts).withContext(`In ${browserName}`).toEqual([\"Heading 1\", \"This paragraph 1.\", \"Heading 2\", \"This paragraph 2.\"]);\n      }));\n    });","file":"integration/accessibility_spec.js","skipped":false,"dir":"test"},{"name":"must check that some spans are linked to some annotations thanks to aria-owns","suites":["accessibility","Annotation"],"line":63,"updatePoint":{"line":63,"column":85,"index":2664},"code":"    it(\"must check that some spans are linked to some annotations thanks to aria-owns\", async () => {\n      await Promise.all(pages.map(async ([browserName, page]) => {\n        const spanContents = await getSpans(page);\n        expect(spanContents).withContext(`In ${browserName}`).toEqual([\"Languages\", \"@intel.com\", \"Abstract\", \"Introduction\"]);\n      }));\n    });","file":"integration/accessibility_spec.js","skipped":false,"dir":"test"},{"name":"must check that the text fields are in the visual order","suites":["accessibility","Annotations order"],"line":78,"updatePoint":{"line":78,"column":63,"index":3245},"code":"    it(\"must check that the text fields are in the visual order\", async () => {\n      await Promise.all(pages.map(async ([browserName, page]) => {\n        const ids = await page.evaluate(() => {\n          const elements = document.querySelectorAll(\".annotationLayer .textWidgetAnnotation\");\n          const results = [];\n          for (const element of elements) {\n            results.push(element.getAttribute(\"data-annotation-id\"));\n          }\n          return results;\n        });\n        expect(ids).withContext(`In ${browserName}`).toEqual([\"32R\", \"30R\", \"31R\", \"34R\", \"29R\", \"33R\"]);\n      }));\n    });","file":"integration/accessibility_spec.js","skipped":false,"dir":"test"},{"name":"must show a popup on mouseover","suites":["Annotation highlight","annotation-highlight.pdf"],"line":31,"updatePoint":{"line":31,"column":38,"index":1038},"code":"    it(\"must show a popup on mouseover\", async () => {\n      await Promise.all(pages.map(async ([browserName, page]) => {\n        let hidden = await page.$eval(\"[data-annotation-id='21R']\", el => el.hidden);\n        expect(hidden).withContext(`In ${browserName}`).toEqual(true);\n        await page.hover(\"[data-annotation-id='19R']\");\n        await page.waitForSelector(\"[data-annotation-id='21R']\", {\n          visible: true,\n          timeout: 0\n        });\n        hidden = await page.$eval(\"[data-annotation-id='21R']\", el => el.hidden);\n        expect(hidden).withContext(`In ${browserName}`).toEqual(false);\n      }));\n    });","file":"integration/annotation_spec.js","skipped":false,"dir":"test"},{"name":"must let checkboxes with the same name behave like radio buttons","suites":["Checkbox annotation","issue12706.pdf"],"line":55,"updatePoint":{"line":55,"column":72,"index":1990},"code":"    it(\"must let checkboxes with the same name behave like radio buttons\", async () => {\n      const selectors = [63, 70, 79].map(n => `[data-annotation-id='${n}R']`);\n      await Promise.all(pages.map(async ([browserName, page]) => {\n        for (const selector of selectors) {\n          await page.click(selector);\n          await page.waitForFunction(`document.querySelector(\"${selector} > :first-child\").checked`);\n          for (const otherSelector of selectors) {\n            const checked = await page.$eval(`${otherSelector} > :first-child`, el => el.checked);\n            expect(checked).withContext(`In ${browserName}`).toBe(selector === otherSelector);\n          }\n        }\n      }));\n    });","file":"integration/annotation_spec.js","skipped":false,"dir":"test"},{"name":"must check the checkbox","suites":["Checkbox annotation","issue15597.pdf"],"line":77,"updatePoint":{"line":77,"column":31,"index":2894},"code":"    it(\"must check the checkbox\", async () => {\n      await Promise.all(pages.map(async ([browserName, page]) => {\n        const selector = \"[data-annotation-id='7R']\";\n        await page.click(selector);\n        await page.waitForFunction(`document.querySelector(\"${selector} > :first-child\").checked`);\n        expect(true).withContext(`In ${browserName}`).toEqual(true);\n      }));\n    });","file":"integration/annotation_spec.js","skipped":false,"dir":"test"},{"name":"must check the checkbox","suites":["Checkbox annotation","f1040_2022.pdf"],"line":94,"updatePoint":{"line":94,"column":31,"index":3530},"code":"    it(\"must check the checkbox\", async () => {\n      await Promise.all(pages.map(async ([_browserName, page]) => {\n        const selectors = [1566, 1568, 1569, 1570, 1571].map(id => `[data-annotation-id='${id}R']`);\n        for (const selector of selectors) {\n          await page.click(selector);\n          for (const otherSelector of selectors) {\n            if (otherSelector === selector) {\n              await page.waitForFunction(`document.querySelector(\"${selector} > :first-child\").checked`);\n            } else {\n              await page.waitForFunction(`!document.querySelector(\"${otherSelector} > :first-child\").checked`);\n            }\n          }\n          page.waitForTimeout(10);\n        }\n      }));\n    });","file":"integration/annotation_spec.js","skipped":false,"dir":"test"},{"name":"must update all the fields with the same value","suites":["Text widget","issue13271.pdf"],"line":121,"updatePoint":{"line":121,"column":54,"index":4555},"code":"    it(\"must update all the fields with the same value\", async () => {\n      const base = \"hello world\";\n      await Promise.all(pages.map(async ([browserName, page]) => {\n        await page.type(getSelector(\"25R\"), base);\n        await page.waitForFunction(`${getQuerySelector(\"24R\")}.value !== \"\"`);\n        await page.waitForFunction(`${getQuerySelector(\"26R\")}.value !== \"\"`);\n        let text = await page.$eval(getSelector(\"24R\"), el => el.value);\n        expect(text).withContext(`In ${browserName}`).toEqual(base);\n        text = await page.$eval(getSelector(\"26R\"), el => el.value);\n        expect(text).withContext(`In ${browserName}`).toEqual(base);\n      }));\n    });","file":"integration/annotation_spec.js","skipped":false,"dir":"test"},{"name":"must reset a formatted value after a change","suites":["Text widget","issue16473.pdf"],"line":142,"updatePoint":{"line":142,"column":51,"index":5473},"code":"    it(\"must reset a formatted value after a change\", async () => {\n      await Promise.all(pages.map(async ([browserName, page]) => {\n        await page.type(getSelector(\"22R\"), \"a\");\n        await page.keyboard.press(\"Tab\");\n        await page.waitForTimeout(10);\n        const text = await page.$eval(getSelector(\"22R\"), el => el.value);\n        expect(text).withContext(`In ${browserName}`).toEqual(\"aHello World\");\n      }));\n    });","file":"integration/annotation_spec.js","skipped":false,"dir":"test"},{"name":"must let checkboxes with the same name behave like radio buttons","suites":["Annotation and storage","issue14023.pdf"],"line":162,"updatePoint":{"line":162,"column":72,"index":6221},"code":"    it(\"must let checkboxes with the same name behave like radio buttons\", async () => {\n      const text1 = \"hello world!\";\n      const text2 = \"!dlrow olleh\";\n      await Promise.all(pages.map(async ([browserName, page]) => {\n        // Text field.\n        await page.type(getSelector(\"64R\"), text1);\n        // Checkbox.\n        await page.click(\"[data-annotation-id='65R']\");\n        // Radio.\n        await page.click(\"[data-annotation-id='67R']\");\n        for (const [pageNumber, textId, checkId, radio1Id, radio2Id] of [[2, \"18R\", \"19R\", \"21R\", \"20R\"], [5, \"23R\", \"24R\", \"22R\", \"25R\"]]) {\n          await page.evaluate(n => {\n            window.document.querySelectorAll(`[data-page-number=\"${n}\"][class=\"page\"]`)[0].scrollIntoView();\n          }, pageNumber);\n\n          // Need to wait to have a displayed text input.\n          await page.waitForSelector(getSelector(textId), {\n            timeout: 0\n          });\n          const text = await page.$eval(getSelector(textId), el => el.value);\n          expect(text).withContext(`In ${browserName}`).toEqual(text1);\n          let checked = await page.$eval(getSelector(checkId), el => el.checked);\n          expect(checked).toEqual(true);\n          checked = await page.$eval(getSelector(radio1Id), el => el.checked);\n          expect(checked).toEqual(false);\n          checked = await page.$eval(getSelector(radio2Id), el => el.checked);\n          expect(checked).toEqual(false);\n        }\n\n        // Change data on page 5 and check that other pages changed.\n        // Text field.\n        await page.type(getSelector(\"23R\"), text2);\n        // Checkbox.\n        await page.click(\"[data-annotation-id='24R']\");\n        // Radio.\n        await page.click(\"[data-annotation-id='25R']\");\n        for (const [pageNumber, textId, checkId, radio1Id, radio2Id] of [[1, \"64R\", \"65R\", \"67R\", \"68R\"], [2, \"18R\", \"19R\", \"21R\", \"20R\"]]) {\n          await page.evaluate(n => {\n            window.document.querySelectorAll(`[data-page-number=\"${n}\"][class=\"page\"]`)[0].scrollIntoView();\n          }, pageNumber);\n\n          // Need to wait to have a displayed text input.\n          await page.waitForSelector(getSelector(textId), {\n            timeout: 0\n          });\n          const text = await page.$eval(getSelector(textId), el => el.value);\n          expect(text).withContext(`In ${browserName}`).toEqual(text2 + text1);\n          let checked = await page.$eval(getSelector(checkId), el => el.checked);\n          expect(checked).toEqual(false);\n          checked = await page.$eval(getSelector(radio1Id), el => el.checked);\n          expect(checked).toEqual(false);\n          checked = await page.$eval(getSelector(radio2Id), el => el.checked);\n          expect(checked).toEqual(false);\n        }\n      }));\n    });","file":"integration/annotation_spec.js","skipped":false,"dir":"test"},{"name":"must reset all fields","suites":["ResetForm action","resetform.pdf"],"line":229,"updatePoint":{"line":229,"column":29,"index":9226},"code":"    it(\"must reset all fields\", async () => {\n      await Promise.all(pages.map(async ([browserName, page]) => {\n        const base = \"hello world\";\n        for (let i = 63; i <= 67; i++) {\n          await page.type(getSelector(`${i}R`), base);\n        }\n        const selectors = [69, 71, 75].map(n => `[data-annotation-id='${n}R']`);\n        for (const selector of selectors) {\n          await page.click(selector);\n        }\n        await page.select(getSelector(\"78R\"), \"b\");\n        await page.select(getSelector(\"81R\"), \"f\");\n        await page.click(\"[data-annotation-id='82R']\");\n        await page.waitForFunction(`${getQuerySelector(\"63R\")}.value === \"\"`);\n        for (let i = 63; i <= 68; i++) {\n          const text = await page.$eval(getSelector(`${i}R`), el => el.value);\n          expect(text).withContext(`In ${browserName}`).toEqual(\"\");\n        }\n        const ids = [69, 71, 72, 73, 74, 75, 76, 77];\n        for (const id of ids) {\n          const checked = await page.$eval(getSelector(`${id}R`), el => el.checked);\n          expect(checked).withContext(`In ${browserName}`).toEqual(false);\n        }\n        let selected = await page.$eval(`${getSelector(\"78R\")} [value=\"a\"]`, el => el.selected);\n        expect(selected).withContext(`In ${browserName}`).toEqual(true);\n        selected = await page.$eval(`${getSelector(\"81R\")} [value=\"d\"]`, el => el.selected);\n        expect(selected).withContext(`In ${browserName}`).toEqual(true);\n      }));\n    });","file":"integration/annotation_spec.js","skipped":false,"dir":"test"},{"name":"must reset some fields","suites":["ResetForm action","resetform.pdf"],"line":258,"updatePoint":{"line":258,"column":30,"index":10704},"code":"    it(\"must reset some fields\", async () => {\n      await Promise.all(pages.map(async ([browserName, page]) => {\n        const base = \"hello world\";\n        for (let i = 63; i <= 68; i++) {\n          await page.type(getSelector(`${i}R`), base);\n        }\n        const selectors = [69, 71, 72, 73, 75].map(n => `[data-annotation-id='${n}R']`);\n        for (const selector of selectors) {\n          await page.click(selector);\n        }\n        await page.select(getSelector(\"78R\"), \"b\");\n        await page.select(getSelector(\"81R\"), \"f\");\n        await page.click(\"[data-annotation-id='84R']\");\n        await page.waitForFunction(`${getQuerySelector(\"63R\")}.value === \"\"`);\n        for (let i = 63; i <= 68; i++) {\n          const expected = (i - 3) % 2 === 0 ? \"\" : base;\n          const text = await page.$eval(getSelector(`${i}R`), el => el.value);\n          expect(text).withContext(`In ${browserName}`).toEqual(expected);\n        }\n        let ids = [69, 72, 73, 74, 76, 77];\n        for (const id of ids) {\n          const checked = await page.$eval(getSelector(`${id}R`), el => el.checked);\n          expect(checked).withContext(`In ${browserName + id}`).toEqual(false);\n        }\n        ids = [71, 75];\n        for (const id of ids) {\n          const checked = await page.$eval(getSelector(`${id}R`), el => el.checked);\n          expect(checked).withContext(`In ${browserName}`).toEqual(true);\n        }\n        let selected = await page.$eval(`${getSelector(\"78R\")} [value=\"a\"]`, el => el.selected);\n        expect(selected).withContext(`In ${browserName}`).toEqual(true);\n        selected = await page.$eval(`${getSelector(\"81R\")} [value=\"f\"]`, el => el.selected);\n        expect(selected).withContext(`In ${browserName}`).toEqual(true);\n      }));\n    });","file":"integration/annotation_spec.js","skipped":false,"dir":"test"},{"name":"must check that the FreeText annotation has a popup","suites":["ResetForm action","FreeText widget","issue14438.pdf"],"line":303,"updatePoint":{"line":303,"column":61,"index":12800},"code":"      it(\"must check that the FreeText annotation has a popup\", async () => {\n        await Promise.all(pages.map(async ([browserName, page]) => {\n          await page.click(\"[data-annotation-id='10R']\");\n          await page.waitForFunction(`document.querySelector(\"[data-annotation-id='10R']\").hidden === false`);\n        }));\n      });","file":"integration/annotation_spec.js","skipped":false,"dir":"test"},{"name":"must check that the Ink annotation has a popup","suites":["ResetForm action","Ink widget and its popup after editing","annotation-caret-ink.pdf"],"line":320,"updatePoint":{"line":320,"column":56,"index":13480},"code":"      it(\"must check that the Ink annotation has a popup\", async () => {\n        await Promise.all(pages.map(async ([browserName, page]) => {\n          await page.waitForFunction(`document.querySelector(\"[data-annotation-id='25R']\").hidden === false`);\n          await page.click(\"#editorFreeText\");\n          await page.waitForTimeout(10);\n          await page.waitForFunction(`document.querySelector(\"[data-annotation-id='25R']\").hidden === true`);\n          await page.click(\"#editorFreeText\");\n          await page.waitForTimeout(10);\n          await page.waitForFunction(`document.querySelector(\"[data-annotation-id='25R']\").hidden === false`);\n        }));\n      });","file":"integration/annotation_spec.js","skipped":false,"dir":"test"},{"name":"must check that we've all the contents on copy/paste","suites":["Copy and paste","all text"],"line":31,"updatePoint":{"line":31,"column":60,"index":1029},"code":"    it(\"must check that we've all the contents on copy/paste\", async () => {\n      await Promise.all(pages.map(async ([browserName, page]) => {\n        await page.keyboard.down(\"Control\");\n        await page.keyboard.press(\"a\");\n        await page.keyboard.up(\"Control\");\n        await page.waitForTimeout(500);\n        await page.keyboard.down(\"Control\");\n        await page.keyboard.press(\"c\");\n        await page.keyboard.up(\"Control\");\n        await page.waitForTimeout(500);\n        await page.waitForFunction(`document.querySelector('#viewerContainer').style.cursor !== \"wait\"`);\n        const text = await page.evaluate(() => navigator.clipboard.readText());\n        expect(!!text).withContext(`In ${browserName}`).toEqual(true);\n        expect(text.includes(\"Dynamic languages such as JavaScript\")).withContext(`In ${browserName}`).toEqual(true);\n        expect(text.includes(\"This section provides an overview of our system\")).withContext(`In ${browserName}`).toEqual(true);\n        expect(text.includes(\"are represented by function calls. This makes the LIR used by\")).withContext(`In ${browserName}`).toEqual(true);\n        expect(text.includes(\"When compiling loops, we consult the oracle before\")).withContext(`In ${browserName}`).toEqual(true);\n        expect(text.includes(\"Nested Trace Tree Formation\")).withContext(`In ${browserName}`).toEqual(true);\n        expect(text.includes(\"An important detail is that the call to the inner trace\")).withContext(`In ${browserName}`).toEqual(true);\n        expect(text.includes(\"When trace recording is completed, nanojit\")).withContext(`In ${browserName}`).toEqual(true);\n        expect(text.includes(\"SpiderMonkey, like many VMs, needs to preempt the user program\")).withContext(`In ${browserName}`).toEqual(true);\n        expect(text.includes(\"Using similar computations, we find that trace recording takes\")).withContext(`In ${browserName}`).toEqual(true);\n        expect(text.includes(\"specialization algorithm. We also described our trace compiler\")).withContext(`In ${browserName}`).toEqual(true);\n        expect(text.includes(\"dynamic optimization system. In Proceedings of the ACM SIGPLAN\")).withContext(`In ${browserName}`).toEqual(true);\n      }));\n    });","file":"integration/copy_paste_spec.js","skipped":false,"dir":"test"},{"name":"must check that we've all the contents on copy/paste","suites":["Copy and paste","all text"],"line":67,"updatePoint":{"line":67,"column":60,"index":3516},"code":"    it(\"must check that we've all the contents on copy/paste\", async () => {\n      await Promise.all(pages.map(async ([browserName, page]) => {\n        await page.keyboard.down(\"Control\");\n        await page.keyboard.press(\"a\");\n        await page.keyboard.up(\"Control\");\n        await page.waitForTimeout(100);\n        await page.keyboard.down(\"Control\");\n        await page.keyboard.press(\"c\");\n        await page.keyboard.up(\"Control\");\n        await page.waitForTimeout(100);\n        await page.waitForFunction(`document.querySelector('#viewerContainer').style.cursor !== \"wait\"`);\n        const text = await page.evaluate(() => navigator.clipboard.readText());\n        expect(!!text).withContext(`In ${browserName}`).toEqual(true);\n        expect(text).withContext(`In ${browserName}`).toEqual(\"abcdeffffiflffifflſtstghijklmno\");\n      }));\n    });","file":"integration/copy_paste_spec.js","skipped":false,"dir":"test"},{"name":"must highlight text in the right position","suites":["find bar","highlight all"],"line":33,"updatePoint":{"line":33,"column":49,"index":1181},"code":"    it(\"must highlight text in the right position\", async () => {\n      await Promise.all(pages.map(async ([browserName, page]) => {\n        await page.click(\"#viewFind\");\n        await page.waitForSelector(\"#viewFind\", {\n          hidden: false\n        });\n        await page.type(\"#findInput\", \"a\");\n        await page.click(\"#findHighlightAll\");\n        await page.waitForSelector(\".textLayer .highlight\");\n        // The PDF has the text \"AB BA\" in a monospace font.\n        // Make sure we have the right number of highlighted divs.\n        const highlights = await page.$$(\".textLayer .highlight\");\n        expect(highlights.length).withContext(`In ${browserName}`).toEqual(2);\n        const glyphWidth = 15.98; // From the PDF.\n        const pageDiv = await page.$(\".page canvas\");\n        const pageBox = await pageDiv.boundingBox();\n        const firstA = await highlights[0].boundingBox();\n        const secondA = await highlights[1].boundingBox();\n        // Subtract the page offset from the text bounding boxes;\n        firstA.x -= pageBox.x;\n        firstA.y -= pageBox.y;\n        secondA.x -= pageBox.x;\n        secondA.y -= pageBox.y;\n        // They should be on the same line.\n        expect(firstA.y).withContext(`In ${browserName}`).toEqual(secondA.y);\n        const fontSize = 26.66; // From the PDF.\n        // The highlighted text has more padding.\n        fuzzyMatch(firstA.height, fontSize + 5, browserName);\n        fuzzyMatch(secondA.height, fontSize + 5, browserName);\n        const expectedFirstAX = 28;\n        fuzzyMatch(firstA.x, expectedFirstAX, browserName);\n        // The second 'A' should be 4 glyphs widths from the first.\n        fuzzyMatch(secondA.x, expectedFirstAX + glyphWidth * 4, browserName);\n      }));\n    });","file":"integration/find_spec.js","skipped":false,"dir":"test"},{"name":"must search xfa correctly","suites":["find bar","highlight all"],"line":77,"updatePoint":{"line":77,"column":33,"index":3157},"code":"    it(\"must search xfa correctly\", async () => {\n      await Promise.all(pages.map(async ([browserName, page]) => {\n        await page.click(\"#viewFind\");\n        await page.waitForSelector(\"#viewFind\", {\n          hidden: false\n        });\n        await page.type(\"#findInput\", \"city\");\n        await page.waitForSelector(\"#findInput[data-status='']\");\n        await page.waitForSelector(\".xfaLayer .highlight\");\n        const resultElement = await page.waitForSelector(\"#findResultsCount\");\n        const resultText = await resultElement.evaluate(el => el.textContent);\n        expect(resultText).toEqual(\"1 of 7 matches\");\n        const selectedElement = await page.waitForSelector(\".highlight.selected\");\n        const selectedText = await selectedElement.evaluate(el => el.textContent);\n        expect(selectedText).toEqual(\"City\");\n      }));\n    });","file":"integration/find_spec.js","skipped":false,"dir":"test"},{"name":"must write a string in a FreeText editor","suites":["FreeText Editor","FreeText"],"line":49,"updatePoint":{"line":49,"column":48,"index":1528},"code":"    it(\"must write a string in a FreeText editor\", async () => {\n      await Promise.all(pages.map(async ([browserName, page]) => {\n        await page.click(\"#editorFreeText\");\n        const rect = await page.$eval(\".annotationEditorLayer\", el => {\n          // With Chrome something is wrong when serializing a DomRect,\n          // hence we extract the values and just return them.\n          const {\n            x,\n            y\n          } = el.getBoundingClientRect();\n          return {\n            x,\n            y\n          };\n        });\n        const data = \"Hello PDF.js World !!\";\n        await page.mouse.click(rect.x + 100, rect.y + 100);\n        await page.type(`${getEditorSelector(0)} .internal`, data);\n        const editorRect = await page.$eval(getEditorSelector(0), el => {\n          const {\n            x,\n            y,\n            width,\n            height\n          } = el.getBoundingClientRect();\n          return {\n            x,\n            y,\n            width,\n            height\n          };\n        });\n\n        // Commit.\n        await page.mouse.click(editorRect.x, editorRect.y + 2 * editorRect.height);\n        await waitForSelectedEditor(page, getEditorSelector(0));\n        await waitForStorageEntries(page, 1);\n        const content = await page.$eval(getEditorSelector(0), el => el.innerText.trimEnd());\n        expect(content).withContext(`In ${browserName}`).toEqual(data);\n      }));\n    });","file":"integration/freetext_editor_spec.js","skipped":false,"dir":"test"},{"name":"must copy/paste","suites":["FreeText Editor","FreeText"],"line":90,"updatePoint":{"line":90,"column":23,"index":2937},"code":"    it(\"must copy/paste\", async () => {\n      // Run sequentially to avoid clipboard issues.\n      for (const [browserName, page] of pages) {\n        const editorRect = await page.$eval(getEditorSelector(0), el => {\n          const {\n            x,\n            y,\n            width,\n            height\n          } = el.getBoundingClientRect();\n          return {\n            x,\n            y,\n            width,\n            height\n          };\n        });\n\n        // Select the editor created previously.\n        await page.mouse.click(editorRect.x + editorRect.width / 2, editorRect.y + editorRect.height / 2);\n        await waitForSelectedEditor(page, getEditorSelector(0));\n        await copyPaste(page);\n        await waitForStorageEntries(page, 2);\n        const content = await page.$eval(getEditorSelector(0), el => el.innerText.trimEnd());\n        let pastedContent = await page.$eval(getEditorSelector(1), el => el.innerText.trimEnd());\n        expect(pastedContent).withContext(`In ${browserName}`).toEqual(content);\n        await copyPaste(page);\n        await waitForStorageEntries(page, 3);\n        pastedContent = await page.$eval(getEditorSelector(2), el => el.innerText.trimEnd());\n        expect(pastedContent).withContext(`In ${browserName}`).toEqual(content);\n      }\n    });","file":"integration/freetext_editor_spec.js","skipped":false,"dir":"test"},{"name":"must clear all","suites":["FreeText Editor","FreeText"],"line":122,"updatePoint":{"line":122,"column":22,"index":4232},"code":"    it(\"must clear all\", async () => {\n      await Promise.all(pages.map(async ([browserName, page]) => {\n        await page.keyboard.down(\"Control\");\n        await page.keyboard.press(\"a\");\n        await page.keyboard.up(\"Control\");\n        await page.keyboard.down(\"Control\");\n        await page.keyboard.press(\"Backspace\");\n        await page.keyboard.up(\"Control\");\n        for (const n of [0, 1, 2]) {\n          const hasEditor = await page.evaluate(sel => {\n            return !!document.querySelector(sel);\n          }, getEditorSelector(n));\n          expect(hasEditor).withContext(`In ${browserName}`).toEqual(false);\n        }\n        await waitForStorageEntries(page, 0);\n      }));\n    });","file":"integration/freetext_editor_spec.js","skipped":false,"dir":"test"},{"name":"must check that a paste has been undone","suites":["FreeText Editor","FreeText"],"line":139,"updatePoint":{"line":139,"column":47,"index":4959},"code":"    it(\"must check that a paste has been undone\", async () => {\n      // Run sequentially to avoid clipboard issues.\n      for (const [browserName, page] of pages) {\n        const rect = await page.$eval(\".annotationEditorLayer\", el => {\n          const {\n            x,\n            y\n          } = el.getBoundingClientRect();\n          return {\n            x,\n            y\n          };\n        });\n        const data = \"Hello PDF.js World !!\";\n        await page.mouse.click(rect.x + 100, rect.y + 100);\n        await page.type(`${getEditorSelector(3)} .internal`, data);\n        const editorRect = await page.$eval(getEditorSelector(3), el => {\n          const {\n            x,\n            y,\n            width,\n            height\n          } = el.getBoundingClientRect();\n          return {\n            x,\n            y,\n            width,\n            height\n          };\n        });\n\n        // Commit.\n        await page.mouse.click(editorRect.x, editorRect.y + 2 * editorRect.height);\n        // And select it again.\n        await page.mouse.click(editorRect.x + editorRect.width / 2, editorRect.y + editorRect.height / 2);\n        await waitForSelectedEditor(page, getEditorSelector(3));\n        await copyPaste(page);\n        let hasEditor = await page.evaluate(sel => {\n          return !!document.querySelector(sel);\n        }, getEditorSelector(4));\n        expect(hasEditor).withContext(`In ${browserName}`).toEqual(true);\n        await page.keyboard.down(\"Control\");\n        await page.keyboard.press(\"z\");\n        await page.keyboard.up(\"Control\");\n        await page.waitForTimeout(10);\n        hasEditor = await page.evaluate(sel => {\n          return !!document.querySelector(sel);\n        }, getEditorSelector(4));\n        expect(hasEditor).withContext(`In ${browserName}`).toEqual(false);\n        for (let i = 0; i < 2; i++) {\n          const promise = waitForEvent(page, \"paste\");\n          await page.keyboard.down(\"Control\");\n          await page.keyboard.press(\"v\");\n          await page.keyboard.up(\"Control\");\n          await promise;\n          await page.waitForTimeout(10);\n        }\n        let length = await page.evaluate(sel => {\n          return document.querySelectorAll(sel).length;\n        }, `${getEditorSelector(5)}, ${getEditorSelector(6)}`);\n        expect(length).withContext(`In ${browserName}`).toEqual(2);\n        for (let i = 0; i < 2; i++) {\n          await page.keyboard.down(\"Control\");\n          await page.keyboard.press(\"z\");\n          await page.keyboard.up(\"Control\");\n          await page.waitForTimeout(10);\n        }\n        length = await page.evaluate(sel => {\n          return document.querySelectorAll(sel).length;\n        }, `${getEditorSelector(5)}, ${getEditorSelector(6)}`);\n        expect(length).withContext(`In ${browserName}`).toEqual(0);\n      }\n    });","file":"integration/freetext_editor_spec.js","skipped":false,"dir":"test"},{"name":"must check that aria-owns is correct","suites":["FreeText Editor","FreeText"],"line":212,"updatePoint":{"line":212,"column":44,"index":7779},"code":"    it(\"must check that aria-owns is correct\", async () => {\n      await Promise.all(pages.map(async ([browserName, page]) => {\n        const [stacksRect, oldAriaOwns] = await page.$eval(\".textLayer\", el => {\n          for (const span of el.querySelectorAll(`span[role=\"presentation\"]`)) {\n            if (span.innerText.includes(\"Stacks are simple to create\")) {\n              span.setAttribute(\"pdfjs\", true);\n              const {\n                x,\n                y,\n                width,\n                height\n              } = span.getBoundingClientRect();\n              return [{\n                x,\n                y,\n                width,\n                height\n              }, span.getAttribute(\"aria-owns\")];\n            }\n          }\n          return null;\n        });\n        expect(oldAriaOwns).withContext(`In ${browserName}`).toEqual(null);\n        const data = \"Hello PDF.js World !!\";\n        await page.mouse.click(stacksRect.x + stacksRect.width + 1, stacksRect.y + stacksRect.height / 2);\n        await page.type(`${getEditorSelector(7)} .internal`, data);\n\n        // Commit.\n        await page.keyboard.press(\"Escape\");\n        const ariaOwns = await page.$eval(\".textLayer\", el => {\n          const span = el.querySelector(`span[pdfjs=\"true\"]`);\n          return span?.getAttribute(\"aria-owns\") || null;\n        });\n        expect(ariaOwns.endsWith(\"_7-editor\")).withContext(`In ${browserName}`).toEqual(true);\n      }));\n    });","file":"integration/freetext_editor_spec.js","skipped":false,"dir":"test"},{"name":"must check that right click doesn't select","suites":["FreeText Editor","FreeText"],"line":248,"updatePoint":{"line":248,"column":50,"index":9243},"code":"    it(\"must check that right click doesn't select\", async () => {\n      await Promise.all(pages.map(async ([browserName, page]) => {\n        const rect = await page.$eval(\".annotationEditorLayer\", el => {\n          const {\n            x,\n            y\n          } = el.getBoundingClientRect();\n          return {\n            x,\n            y\n          };\n        });\n        await page.keyboard.down(\"Control\");\n        await page.keyboard.press(\"a\");\n        await page.keyboard.up(\"Control\");\n        await page.keyboard.down(\"Control\");\n        await page.keyboard.press(\"Backspace\");\n        await page.keyboard.up(\"Control\");\n        const data = \"Hello PDF.js World !!\";\n        await page.mouse.click(rect.x + 100, rect.y + 100);\n        await page.type(`${getEditorSelector(8)} .internal`, data);\n        const editorRect = await page.$eval(getEditorSelector(8), el => {\n          const {\n            x,\n            y,\n            width,\n            height\n          } = el.getBoundingClientRect();\n          return {\n            x,\n            y,\n            width,\n            height\n          };\n        });\n\n        // Commit.\n        await page.keyboard.press(\"Escape\");\n        expect(await getSelectedEditors(page)).withContext(`In ${browserName}`).toEqual([8]);\n        await page.keyboard.press(\"Escape\");\n        expect(await getSelectedEditors(page)).withContext(`In ${browserName}`).toEqual([]);\n        await page.mouse.click(editorRect.x + editorRect.width / 2, editorRect.y + editorRect.height / 2);\n        await waitForSelectedEditor(page, getEditorSelector(8));\n        expect(await getSelectedEditors(page)).withContext(`In ${browserName}`).toEqual([8]);\n\n        // Escape.\n        await page.keyboard.press(\"Escape\");\n        expect(await getSelectedEditors(page)).withContext(`In ${browserName}`).toEqual([]);\n\n        // TODO: uncomment that stuff once we've a way to dismiss\n        // the context menu.\n        /* await page.mouse.click(\n          editorRect.x + editorRect.width / 2,\n          editorRect.y + editorRect.height / 2,\n          { button: \"right\" }\n        ); */\n      }));\n    });","file":"integration/freetext_editor_spec.js","skipped":false,"dir":"test"},{"name":"must check that text change can be undone/redone","suites":["FreeText Editor","FreeText"],"line":307,"updatePoint":{"line":307,"column":56,"index":11380},"code":"    it(\"must check that text change can be undone/redone\", async () => {\n      // Run sequentially to avoid clipboard issues.\n      for (const [browserName, page] of pages) {\n        const rect = await page.$eval(\".annotationEditorLayer\", el => {\n          const {\n            x,\n            y\n          } = el.getBoundingClientRect();\n          return {\n            x,\n            y\n          };\n        });\n        await page.keyboard.down(\"Control\");\n        await page.keyboard.press(\"a\");\n        await page.keyboard.up(\"Control\");\n        await page.keyboard.down(\"Control\");\n        await page.keyboard.press(\"Backspace\");\n        await page.keyboard.up(\"Control\");\n        await page.mouse.click(rect.x + 200, rect.y + 100);\n        for (let i = 0; i < 5; i++) {\n          await page.type(`${getEditorSelector(9)} .internal`, \"A\");\n          const editorRect = await page.$eval(getEditorSelector(9), el => {\n            const {\n              x,\n              y,\n              width,\n              height\n            } = el.getBoundingClientRect();\n            return {\n              x,\n              y,\n              width,\n              height\n            };\n          });\n\n          // Commit.\n          await page.mouse.click(editorRect.x, editorRect.y + 2 * editorRect.height);\n          if (i < 4) {\n            // And select it again.\n            await page.mouse.click(editorRect.x + editorRect.width / 2, editorRect.y + editorRect.height / 2, {\n              clickCount: 2\n            });\n          }\n        }\n        await page.keyboard.down(\"Control\");\n        await page.keyboard.press(\"z\");\n        await page.keyboard.up(\"Control\");\n        await page.waitForTimeout(10);\n        let text = await page.$eval(`${getEditorSelector(9)} .internal`, el => {\n          return el.innerText;\n        });\n        expect(text).withContext(`In ${browserName}`).toEqual(\"AAAA\");\n        await page.keyboard.down(\"Control\");\n        await page.keyboard.press(\"z\");\n        await page.keyboard.up(\"Control\");\n        await page.waitForTimeout(10);\n        text = await page.$eval(`${getEditorSelector(9)} .internal`, el => {\n          return el.innerText;\n        });\n        expect(text).withContext(`In ${browserName}`).toEqual(\"AAA\");\n        await page.keyboard.down(\"Control\");\n        await page.keyboard.press(\"y\");\n        await page.keyboard.up(\"Control\");\n        await page.waitForTimeout(10);\n        text = await page.$eval(`${getEditorSelector(9)} .internal`, el => {\n          return el.innerText;\n        });\n        expect(text).withContext(`In ${browserName}`).toEqual(\"AAAA\");\n        for (let i = 0; i < 4; i++) {\n          await page.keyboard.down(\"Control\");\n          await page.keyboard.press(\"z\");\n          await page.keyboard.up(\"Control\");\n          await page.waitForTimeout(10);\n        }\n        expect(await getSelectedEditors(page)).withContext(`In ${browserName}`).toEqual([]);\n        await page.keyboard.down(\"Control\");\n        await page.keyboard.press(\"y\");\n        await page.keyboard.up(\"Control\");\n        await page.waitForTimeout(10);\n        text = await page.$eval(`${getEditorSelector(9)} .internal`, el => {\n          return el.innerText;\n        });\n        expect(text).withContext(`In ${browserName}`).toEqual(\"A\");\n\n        // Add a new A.\n        const editorRect = await page.$eval(getEditorSelector(9), el => {\n          const {\n            x,\n            y,\n            width,\n            height\n          } = el.getBoundingClientRect();\n          return {\n            x,\n            y,\n            width,\n            height\n          };\n        });\n        await page.mouse.click(editorRect.x + editorRect.width / 2, editorRect.y + editorRect.height / 2, {\n          clickCount: 2\n        });\n        await page.type(`${getEditorSelector(9)} .internal`, \"A\");\n\n        // Commit.\n        await page.mouse.click(editorRect.x, editorRect.y + 2 * editorRect.height);\n        text = await page.$eval(`${getEditorSelector(9)} .internal`, el => {\n          return el.innerText;\n        });\n        expect(text).withContext(`In ${browserName}`).toEqual(\"AA\");\n      }\n    });","file":"integration/freetext_editor_spec.js","skipped":false,"dir":"test"},{"name":"must select/unselect several editors and check copy, paste and delete operations","suites":["FreeText Editor","FreeText (multiselection)"],"line":430,"updatePoint":{"line":430,"column":88,"index":15795},"code":"    it(\"must select/unselect several editors and check copy, paste and delete operations\", async () => {\n      // Run sequentially to avoid clipboard issues.\n      for (const [browserName, page] of pages) {\n        await page.click(\"#editorFreeText\");\n        const rect = await page.$eval(\".annotationEditorLayer\", el => {\n          // With Chrome something is wrong when serializing a DomRect,\n          // hence we extract the values and just return them.\n          const {\n            x,\n            y\n          } = el.getBoundingClientRect();\n          return {\n            x,\n            y\n          };\n        });\n        const editorCenters = [];\n        for (let i = 0; i < 4; i++) {\n          const data = `FreeText ${i}`;\n          await page.mouse.click(rect.x + (i + 1) * 100, rect.y + (i + 1) * 100);\n          await page.type(`${getEditorSelector(i)} .internal`, data);\n          const editorRect = await page.$eval(getEditorSelector(i), el => {\n            const {\n              x,\n              y,\n              width,\n              height\n            } = el.getBoundingClientRect();\n            return {\n              x,\n              y,\n              width,\n              height\n            };\n          });\n          editorCenters.push({\n            x: editorRect.x + editorRect.width / 2,\n            y: editorRect.y + editorRect.height / 2\n          });\n\n          // Commit.\n          await page.mouse.click(editorRect.x, editorRect.y + 2 * editorRect.height);\n        }\n        await page.keyboard.down(\"Control\");\n        await page.keyboard.press(\"a\");\n        await page.keyboard.up(\"Control\");\n        expect(await getSelectedEditors(page)).withContext(`In ${browserName}`).toEqual([0, 1, 2, 3]);\n        await page.keyboard.down(\"Control\");\n        await page.mouse.click(editorCenters[1].x, editorCenters[1].y);\n        expect(await getSelectedEditors(page)).withContext(`In ${browserName}`).toEqual([0, 2, 3]);\n        await page.mouse.click(editorCenters[2].x, editorCenters[2].y);\n        expect(await getSelectedEditors(page)).withContext(`In ${browserName}`).toEqual([0, 3]);\n        await page.mouse.click(editorCenters[1].x, editorCenters[1].y);\n        await page.keyboard.up(\"Control\");\n        expect(await getSelectedEditors(page)).withContext(`In ${browserName}`).toEqual([0, 1, 3]);\n        await copyPaste(page);\n\n        // 0,1,3 are unselected and new pasted editors are selected.\n        expect(await getSelectedEditors(page)).withContext(`In ${browserName}`).toEqual([4, 5, 6]);\n\n        // No ctrl here, hence all are unselected and 2 is selected.\n        await page.mouse.click(editorCenters[2].x, editorCenters[2].y);\n        expect(await getSelectedEditors(page)).withContext(`In ${browserName}`).toEqual([2]);\n        await page.mouse.click(editorCenters[1].x, editorCenters[1].y);\n        expect(await getSelectedEditors(page)).withContext(`In ${browserName}`).toEqual([1]);\n        await page.keyboard.down(\"Control\");\n        await page.mouse.click(editorCenters[3].x, editorCenters[3].y);\n        expect(await getSelectedEditors(page)).withContext(`In ${browserName}`).toEqual([1, 3]);\n        await page.keyboard.up(\"Control\");\n\n        // Delete 1 and 3.\n        await page.keyboard.press(\"Backspace\");\n        await page.keyboard.down(\"Control\");\n        await page.keyboard.press(\"a\");\n        await page.keyboard.up(\"Control\");\n        expect(await getSelectedEditors(page)).withContext(`In ${browserName}`).toEqual([0, 2, 4, 5, 6]);\n\n        // Create an empty editor.\n        await page.mouse.click(rect.x + 700, rect.y + 100);\n        expect(await getSelectedEditors(page)).withContext(`In ${browserName}`).toEqual([7]);\n\n        // Set the focus to 2 and check that only 2 is selected.\n        await page.mouse.click(editorCenters[2].x, editorCenters[2].y);\n        expect(await getSelectedEditors(page)).withContext(`In ${browserName}`).toEqual([2]);\n\n        // Create an empty editor.\n        await page.mouse.click(rect.x + 700, rect.y + 100);\n        expect(await getSelectedEditors(page)).withContext(`In ${browserName}`).toEqual([8]);\n        // Dismiss it.\n        await page.keyboard.press(\"Escape\");\n\n        // Select all.\n        await page.keyboard.down(\"Control\");\n        await page.keyboard.press(\"a\");\n        await page.keyboard.up(\"Control\");\n\n        // Check that all the editors are correctly selected (and the focus\n        // didn't move to the body when the empty editor was removed).\n        expect(await getSelectedEditors(page)).withContext(`In ${browserName}`).toEqual([0, 2, 4, 5, 6]);\n      }\n    });","file":"integration/freetext_editor_spec.js","skipped":false,"dir":"test"},{"name":"must serialize invisible annotations","suites":["FreeText Editor","FreeText (bugs)"],"line":540,"updatePoint":{"line":540,"column":44,"index":20588},"code":"    it(\"must serialize invisible annotations\", async () => {\n      await Promise.all(pages.map(async ([browserName, page]) => {\n        await page.click(\"#editorFreeText\");\n        let currentId = 0;\n        const expected = [];\n        const oneToFourteen = [...new Array(14).keys()].map(x => x + 1);\n        for (const pageNumber of oneToFourteen) {\n          const pageSelector = `.page[data-page-number = \"${pageNumber}\"]`;\n          await page.evaluate(selector => {\n            const element = window.document.querySelector(selector);\n            element.scrollIntoView();\n          }, pageSelector);\n          const annotationLayerSelector = `${pageSelector} > .annotationEditorLayer`;\n          await page.waitForSelector(annotationLayerSelector, {\n            visible: true,\n            timeout: 0\n          });\n          await page.waitForTimeout(50);\n          if (![1, 14].includes(pageNumber)) {\n            continue;\n          }\n          const rect = await page.$eval(annotationLayerSelector, el => {\n            // With Chrome something is wrong when serializing a DomRect,\n            // hence we extract the values and just return them.\n            const {\n              x,\n              y\n            } = el.getBoundingClientRect();\n            return {\n              x,\n              y\n            };\n          });\n          const data = `Hello PDF.js World !! on page ${pageNumber}`;\n          expected.push(data);\n          await page.mouse.click(rect.x + 100, rect.y + 100);\n          await page.type(`${getEditorSelector(currentId)} .internal`, data);\n\n          // Commit.\n          await page.keyboard.press(\"Escape\");\n          await page.waitForTimeout(10);\n          await waitForSelectedEditor(page, getEditorSelector(currentId));\n          await waitForStorageEntries(page, currentId + 1);\n          const content = await page.$eval(getEditorSelector(currentId), el => el.innerText.trimEnd());\n          expect(content).withContext(`In ${browserName}`).toEqual(data);\n          currentId += 1;\n          await page.waitForTimeout(10);\n        }\n        const serialize = proprName => page.evaluate(name => [...window.PDFViewerApplication.pdfDocument.annotationStorage.serializable.values()].map(x => x[name]), proprName);\n        expect(await serialize(\"value\")).withContext(`In ${browserName}`).toEqual(expected);\n        expect(await serialize(\"fontSize\")).withContext(`In ${browserName}`).toEqual([10, 10]);\n        expect(await serialize(\"color\")).withContext(`In ${browserName}`).toEqual([[0, 0, 0], [0, 0, 0]]);\n\n        // Increase the font size for all the annotations.\n        // Select all.\n        await page.keyboard.down(\"Control\");\n        await page.keyboard.press(\"a\");\n        await page.keyboard.up(\"Control\");\n        await page.waitForTimeout(10);\n        page.evaluate(() => {\n          window.PDFViewerApplication.eventBus.dispatch(\"switchannotationeditorparams\", {\n            source: null,\n            type: /* AnnotationEditorParamsType.FREETEXT_SIZE */1,\n            value: 13\n          });\n        });\n        await page.waitForTimeout(10);\n        expect(await serialize(\"fontSize\")).withContext(`In ${browserName}`).toEqual([13, 13]);\n\n        // Change the colors for all the annotations.\n        page.evaluate(() => {\n          window.PDFViewerApplication.eventBus.dispatch(\"switchannotationeditorparams\", {\n            source: null,\n            type: /* AnnotationEditorParamsType.FREETEXT_COLOR */2,\n            value: \"#FF0000\"\n          });\n        });\n        await page.waitForTimeout(10);\n        expect(await serialize(\"color\")).withContext(`In ${browserName}`).toEqual([[255, 0, 0], [255, 0, 0]]);\n      }));\n    });","file":"integration/freetext_editor_spec.js","skipped":false,"dir":"test"},{"name":"must take the media box into account","suites":["FreeText Editor","issue 15789"],"line":634,"updatePoint":{"line":634,"column":44,"index":24680},"code":"    it(\"must take the media box into account\", async () => {\n      await Promise.all(pages.map(async ([browserName, page]) => {\n        await page.click(\"#editorFreeText\");\n        let currentId = 0;\n        for (let step = 0; step < 3; step++) {\n          const rect = await page.$eval(\".annotationEditorLayer\", el => {\n            // With Chrome something is wrong when serializing a DomRect,\n            // hence we extract the values and just return them.\n            const {\n              x,\n              y,\n              width,\n              height\n            } = el.getBoundingClientRect();\n            return {\n              x,\n              y,\n              width,\n              height\n            };\n          });\n          const data = `Hello ${step}`;\n          const x = rect.x + 0.1 * rect.width;\n          const y = rect.y + 0.1 * rect.height;\n          await page.mouse.click(x, y);\n          await page.type(`${getEditorSelector(currentId)} .internal`, data);\n\n          // Commit.\n          await page.keyboard.press(\"Escape\");\n          await page.waitForTimeout(10);\n          await page.evaluate(() => {\n            document.getElementById(\"pageRotateCw\").click();\n          });\n          currentId += 1;\n          await page.waitForTimeout(10);\n        }\n        const serialize = proprName => page.evaluate(name => [...window.PDFViewerApplication.pdfDocument.annotationStorage.serializable.values()].map(x => x[name]), proprName);\n        const rects = (await serialize(\"rect\")).map(rect => rect.slice(0, 2).map(x => Math.floor(x)));\n        const expected = [[-28, 695], [-38, -10], [501, -20]];\n        // Dimensions aren't exactly the same from a platform to an other\n        // so we're a bit tolerant here with the numbers.\n        // Anyway the goal is to check that the bottom left corner of the\n        // media box is taken into account.\n        // The pdf has a media box equals to [-99 -99 612.0 792.0].\n        const diffs = rects.map((rect, i) => Math.abs(rect[0] - expected[i][0]) < 10 && Math.abs(rect[1] - expected[i][1]) < 10);\n        expect(diffs).withContext(`In ${browserName}`).toEqual([true, true, true]);\n      }));\n    });","file":"integration/freetext_editor_spec.js","skipped":false,"dir":"test"},{"name":"must move an annotation","suites":["FreeText Editor","FreeText (move existing)"],"line":691,"updatePoint":{"line":691,"column":31,"index":27086},"code":"    it(\"must move an annotation\", async () => {\n      await Promise.all(pages.map(async ([browserName, page]) => {\n        if (browserName === \"firefox\") {\n          pending(\"Disabled in Firefox, because DnD isn't implemented yet (see bug 1838638).\");\n        }\n        await page.setDragInterception(true);\n        await page.click(\"#editorFreeText\");\n        const editorIds = await getEditors(page, \"freeText\");\n        expect(editorIds.length).withContext(`In ${browserName}`).toEqual(6);\n\n        // All the current annotations should be serialized as null objects\n        // because they haven't been edited yet.\n        let serialized = await getSerialized(page);\n        expect(serialized).withContext(`In ${browserName}`).toEqual([]);\n        const editorRect = await page.$eval(getEditorSelector(0), el => {\n          const {\n            x,\n            y,\n            width,\n            height\n          } = el.getBoundingClientRect();\n          return {\n            x,\n            y,\n            width,\n            height\n          };\n        });\n        await page.mouse.dragAndDrop({\n          x: editorRect.x + editorRect.width / 2,\n          y: editorRect.y + editorRect.height / 2\n        }, {\n          x: editorRect.x + editorRect.width / 2 + 100,\n          y: editorRect.y + editorRect.height / 2 + 100\n        }, {\n          delay: 100\n        });\n        serialized = await getSerialized(page);\n        expect(serialized.length).withContext(`In ${browserName}`).toEqual(1);\n      }));\n    });","file":"integration/freetext_editor_spec.js","skipped":false,"dir":"test"},{"name":"must update an existing annotation","suites":["FreeText Editor","FreeText (update existing)"],"line":741,"updatePoint":{"line":741,"column":42,"index":28859},"code":"    it(\"must update an existing annotation\", async () => {\n      await Promise.all(pages.map(async ([browserName, page]) => {\n        await page.click(\"#editorFreeText\");\n        let editorIds = await getEditors(page, \"freeText\");\n        expect(editorIds.length).withContext(`In ${browserName}`).toEqual(6);\n        const editorRect = await page.$eval(getEditorSelector(0), el => {\n          const {\n            x,\n            y,\n            width,\n            height\n          } = el.getBoundingClientRect();\n          return {\n            x,\n            y,\n            width,\n            height\n          };\n        });\n        await page.mouse.click(editorRect.x + editorRect.width / 2, editorRect.y + editorRect.height / 2, {\n          clickCount: 2\n        });\n        await page.keyboard.down(\"Control\");\n        await page.keyboard.press(\"End\");\n        await page.keyboard.up(\"Control\");\n        await page.waitForTimeout(10);\n        await page.type(`${getEditorSelector(0)} .internal`, \" and edited in Firefox\");\n\n        // Commit.\n        await page.mouse.click(editorRect.x, editorRect.y + 2 * editorRect.height);\n        let serialized = await getSerialized(page);\n        expect(serialized.length).withContext(`In ${browserName}`).toEqual(1);\n        expect(serialized[0]).toEqual(jasmine.objectContaining({\n          color: [107, 217, 41],\n          fontSize: 14,\n          value: \"Hello World from Acrobat and edited in Firefox\",\n          id: \"26R\"\n        }));\n\n        // Disable editing mode.\n        await page.click(\"#editorFreeText\");\n        // We want to check that the editor is displayed but not the original\n        // annotation.\n        editorIds = await getEditors(page, \"freeText\");\n        expect(editorIds.length).withContext(`In ${browserName}`).toEqual(1);\n        const hidden = await page.$eval(\"[data-annotation-id='26R']\", el => el.hidden);\n        expect(hidden).withContext(`In ${browserName}`).toBeTrue();\n\n        // Re-enable editing mode.\n        await page.click(\"#editorFreeText\");\n        await page.focus(\".annotationEditorLayer\");\n\n        // Undo.\n        await page.keyboard.down(\"Control\");\n        await page.keyboard.press(\"z\");\n        await page.keyboard.up(\"Control\");\n        await page.waitForTimeout(10);\n        serialized = await getSerialized(page);\n        expect(serialized).withContext(`In ${browserName}`).toEqual([]);\n        editorIds = await getEditors(page, \"freeText\");\n        expect(editorIds.length).withContext(`In ${browserName}`).toEqual(6);\n\n        // Undo again.\n        await page.keyboard.down(\"Control\");\n        await page.keyboard.press(\"z\");\n        await page.keyboard.up(\"Control\");\n        await page.waitForTimeout(10);\n\n        // We check that the editor hasn't been removed.\n        editorIds = await getEditors(page, \"freeText\");\n        expect(editorIds.length).withContext(`In ${browserName}`).toEqual(6);\n      }));\n    });","file":"integration/freetext_editor_spec.js","skipped":false,"dir":"test"},{"name":"must update an existing annotation but not an empty one","suites":["FreeText Editor","FreeText (update existing but not empty ones)"],"line":823,"updatePoint":{"line":823,"column":63,"index":32074},"code":"    it(\"must update an existing annotation but not an empty one\", async () => {\n      await Promise.all(pages.map(async ([browserName, page]) => {\n        await page.click(\"#editorFreeText\");\n        const editorIds = await getEditors(page, \"freeText\");\n        expect(editorIds.length).withContext(`In ${browserName}`).toEqual(1);\n      }));\n    });","file":"integration/freetext_editor_spec.js","skipped":false,"dir":"test"},{"name":"must delete an existing annotation","suites":["FreeText Editor","FreeText (delete existing)"],"line":839,"updatePoint":{"line":839,"column":42,"index":32652},"code":"    it(\"must delete an existing annotation\", async () => {\n      await Promise.all(pages.map(async ([browserName, page]) => {\n        await page.click(\"#editorFreeText\");\n        let editorIds = await getEditors(page, \"freeText\");\n        expect(editorIds.length).withContext(`In ${browserName}`).toEqual(6);\n        const editorRect = await page.$eval(getEditorSelector(3), el => {\n          const {\n            x,\n            y,\n            width,\n            height\n          } = el.getBoundingClientRect();\n          return {\n            x,\n            y,\n            width,\n            height\n          };\n        });\n        await page.mouse.click(editorRect.x + editorRect.width / 2, editorRect.y + editorRect.height / 2);\n        await page.keyboard.press(\"Backspace\");\n        await page.waitForTimeout(10);\n        let serialized = await getSerialized(page);\n        expect(serialized).toEqual([{\n          pageIndex: 0,\n          id: \"51R\",\n          deleted: true\n        }]);\n        await page.click(\"#editorFreeText\");\n        // We want to check that nothing is displayed.\n        editorIds = await getEditors(page, \"freeText\");\n        expect(editorIds.length).withContext(`In ${browserName}`).toEqual(0);\n        const hidden = await page.$eval(\"[data-annotation-id='51R']\", el => el.hidden);\n        expect(hidden).withContext(`In ${browserName}`).toBeTrue();\n\n        // Re-enable editing mode.\n        await page.click(\"#editorFreeText\");\n        await page.focus(\".annotationEditorLayer\");\n\n        // Undo.\n        await page.keyboard.down(\"Control\");\n        await page.keyboard.press(\"z\");\n        await page.keyboard.up(\"Control\");\n        await page.waitForTimeout(10);\n        serialized = await getSerialized(page);\n        expect(serialized).withContext(`In ${browserName}`).toEqual([]);\n      }));\n    });","file":"integration/freetext_editor_spec.js","skipped":false,"dir":"test"},{"name":"must copy and paste an existing annotation","suites":["FreeText Editor","FreeText (copy/paste existing)"],"line":896,"updatePoint":{"line":896,"column":50,"index":34749},"code":"    it(\"must copy and paste an existing annotation\", async () => {\n      // Run sequentially to avoid clipboard issues.\n      for (const [browserName, page] of pages) {\n        await page.click(\"#editorFreeText\");\n        const editorIds = await getEditors(page, \"freeText\");\n        expect(editorIds.length).withContext(`In ${browserName}`).toEqual(6);\n        const editorRect = await page.$eval(getEditorSelector(1), el => {\n          const {\n            x,\n            y,\n            width,\n            height\n          } = el.getBoundingClientRect();\n          return {\n            x,\n            y,\n            width,\n            height\n          };\n        });\n        await page.mouse.click(editorRect.x + editorRect.width / 2, editorRect.y + editorRect.height / 2);\n        await copyPaste(page);\n        await waitForStorageEntries(page, 7);\n      }\n    });","file":"integration/freetext_editor_spec.js","skipped":false,"dir":"test"},{"name":"must not remove an empty annotation","suites":["FreeText Editor","FreeText with popup"],"line":930,"updatePoint":{"line":930,"column":43,"index":35861},"code":"    it(\"must not remove an empty annotation\", async () => {\n      await Promise.all(pages.map(async ([browserName, page]) => {\n        await page.hover(\"[data-annotation-id='23R']\");\n        // Wait for the popup to be displayed.\n        await page.waitForFunction(`document.querySelector(\"[data-annotation-id='popup_23R']\").hidden === false`);\n\n        // Enter in editing mode.\n        await page.click(\"#editorFreeText\");\n        await page.waitForTimeout(10);\n        await page.click(\"#editorFreeText\");\n        await page.hover(\"[data-annotation-id='23R']\");\n        // Wait for the popup to be displayed.\n        await page.waitForFunction(`document.querySelector(\"[data-annotation-id='popup_23R']\").hidden === false`);\n      }));\n    });","file":"integration/freetext_editor_spec.js","skipped":false,"dir":"test"},{"name":"must hide the popup when editing","suites":["FreeText Editor","FreeText with popup"],"line":945,"updatePoint":{"line":945,"column":40,"index":36604},"code":"    it(\"must hide the popup when editing\", async () => {\n      await Promise.all(pages.map(async ([browserName, page]) => {\n        await page.click(\"[data-annotation-id='20R']\");\n        // Wait for the popup to be displayed.\n        await page.waitForFunction(`document.querySelector(\"[data-annotation-id='popup_20R']\").hidden === false`);\n\n        // Enter in editing mode.\n        await page.click(\"#editorFreeText\");\n        // Wait for the popup to be hidden.\n        await page.waitForFunction(`document.querySelector(\"[data-annotation-id='popup_20R']\").hidden === true`);\n\n        // Exit editing mode.\n        await page.click(\"#editorFreeText\");\n        // Wait for the popup to be visible.\n        await page.waitForFunction(`document.querySelector(\"[data-annotation-id='popup_20R']\").hidden === false`);\n      }));\n    });","file":"integration/freetext_editor_spec.js","skipped":false,"dir":"test"},{"name":"must draw, undo a deletion and check that the editors are not selected","suites":["Ink Editor","Basic operations"],"line":30,"updatePoint":{"line":30,"column":78,"index":1034},"code":"    it(\"must draw, undo a deletion and check that the editors are not selected\", async () => {\n      await Promise.all(pages.map(async ([browserName, page]) => {\n        await page.click(\"#editorInk\");\n        const rect = await page.$eval(\".annotationEditorLayer\", el => {\n          // With Chrome something is wrong when serializing a DomRect,\n          // hence we extract the values and just return them.\n          const {\n            x,\n            y\n          } = el.getBoundingClientRect();\n          return {\n            x,\n            y\n          };\n        });\n        for (let i = 0; i < 3; i++) {\n          const x = rect.x + 100 + i * 100;\n          const y = rect.y + 100 + i * 100;\n          await page.mouse.move(x, y);\n          await page.mouse.down();\n          await page.mouse.move(x + 50, y + 50);\n          await page.mouse.up();\n          await page.keyboard.press(\"Escape\");\n        }\n        await page.keyboard.down(\"Control\");\n        await page.keyboard.press(\"a\");\n        await page.keyboard.up(\"Control\");\n        expect(await getSelectedEditors(page)).withContext(`In ${browserName}`).toEqual([0, 1, 2]);\n        await page.keyboard.press(\"Backspace\");\n        await page.keyboard.down(\"Control\");\n        await page.keyboard.press(\"z\");\n        await page.keyboard.up(\"Control\");\n        expect(await getSelectedEditors(page)).withContext(`In ${browserName}`).toEqual([]);\n      }));\n    });","file":"integration/ink_editor_spec.js","skipped":false,"dir":"test"},{"name":"must draw, undo/redo and check that the editor don't move","suites":["Ink Editor","Basic operations"],"line":65,"updatePoint":{"line":65,"column":65,"index":2447},"code":"    it(\"must draw, undo/redo and check that the editor don't move\", async () => {\n      await Promise.all(pages.map(async ([browserName, page]) => {\n        await page.keyboard.down(\"Control\");\n        await page.keyboard.press(\"a\");\n        await page.keyboard.up(\"Control\");\n        await page.keyboard.press(\"Backspace\");\n        const rect = await page.$eval(\".annotationEditorLayer\", el => {\n          // With Chrome something is wrong when serializing a DomRect,\n          // hence we extract the values and just return them.\n          const {\n            x,\n            y\n          } = el.getBoundingClientRect();\n          return {\n            x,\n            y\n          };\n        });\n        const xStart = rect.x + 300;\n        const yStart = rect.y + 300;\n        await page.mouse.move(xStart, yStart);\n        await page.mouse.down();\n        await page.mouse.move(xStart + 50, yStart + 50);\n        await page.mouse.up();\n        await page.keyboard.press(\"Escape\");\n        const rectBefore = await page.$eval(\".inkEditor canvas\", el => {\n          const {\n            x,\n            y\n          } = el.getBoundingClientRect();\n          return {\n            x,\n            y\n          };\n        });\n        for (let i = 0; i < 30; i++) {\n          await page.keyboard.down(\"Control\");\n          await page.keyboard.press(\"z\");\n          await page.keyboard.up(\"Control\");\n          await page.waitForTimeout(10);\n          await page.keyboard.down(\"Control\");\n          await page.keyboard.press(\"y\");\n          await page.keyboard.up(\"Control\");\n          await page.waitForTimeout(10);\n        }\n        const rectAfter = await page.$eval(\".inkEditor canvas\", el => {\n          const {\n            x,\n            y\n          } = el.getBoundingClientRect();\n          return {\n            x,\n            y\n          };\n        });\n        expect(Math.round(rectBefore.x)).withContext(`In ${browserName}`).toEqual(Math.round(rectAfter.x));\n        expect(Math.round(rectBefore.y)).withContext(`In ${browserName}`).toEqual(Math.round(rectAfter.y));\n      }));\n    });","file":"integration/ink_editor_spec.js","skipped":false,"dir":"test"},{"name":"must draw something","suites":["Ink Editor","with a rotated pdf"],"line":133,"updatePoint":{"line":133,"column":27,"index":4734},"code":"    it(\"must draw something\", async () => {\n      await Promise.all(pages.map(async ([browserName, page]) => {\n        await page.click(\"#editorInk\");\n        const rect = await page.$eval(\".annotationEditorLayer\", el => {\n          // With Chrome something is wrong when serializing a DomRect,\n          // hence we extract the values and just return them.\n          const {\n            x,\n            y\n          } = el.getBoundingClientRect();\n          return {\n            x,\n            y\n          };\n        });\n        const x = rect.x + 20;\n        const y = rect.y + 20;\n        await page.mouse.move(x, y);\n        await page.mouse.down();\n        await page.mouse.move(x + 50, y + 50);\n        await page.mouse.up();\n        await page.waitForTimeout(10);\n        await page.keyboard.press(\"Escape\");\n        await page.waitForTimeout(10);\n        await page.keyboard.down(\"Control\");\n        await page.keyboard.press(\"a\");\n        await page.keyboard.up(\"Control\");\n        await page.waitForTimeout(10);\n        expect(await getSelectedEditors(page)).withContext(`In ${browserName}`).toEqual([0]);\n      }));\n    });","file":"integration/ink_editor_spec.js","skipped":false,"dir":"test"},{"name":"must check that first text field has focus","suites":["Interaction","in 160F-2019.pdf"],"line":44,"updatePoint":{"line":44,"column":50,"index":1421},"code":"    it(\"must check that first text field has focus\", async () => {\n      await Promise.all(pages.map(async ([browserName, page]) => {\n        await page.waitForFunction(\"window.PDFViewerApplication.scriptingReady === true\");\n        await page.waitForFunction(`window.document.activeElement !== null`);\n\n        // The document has an open action in order to give the focus to 401R.\n        const id = await page.evaluate(() => {\n          const element = window.document.activeElement;\n          return element.getAttribute(\"data-element-id\");\n        });\n        expect(id).withContext(`In ${browserName}`).toEqual(\"401R\");\n      }));\n    });","file":"integration/scripting_spec.js","skipped":false,"dir":"test"},{"name":"must show a text field and then make in invisible when content is removed","suites":["Interaction","in 160F-2019.pdf"],"line":57,"updatePoint":{"line":57,"column":81,"index":2097},"code":"    it(\"must show a text field and then make in invisible when content is removed\", async () => {\n      await Promise.all(pages.map(async ([browserName, page]) => {\n        let visibility = await page.$eval(getSelector(\"427R\"), el => getComputedStyle(el).visibility);\n        expect(visibility).withContext(`In ${browserName}`).toEqual(\"hidden\");\n        await page.type(getSelector(\"416R\"), \"3.14159\", {\n          delay: 200\n        });\n        await page.click(getSelector(\"419R\"));\n        await page.waitForFunction(`${getComputedStyleSelector(\"427R\")}.visibility !== \"hidden\"`);\n        visibility = await page.$eval(getSelector(\"427R\"), el => getComputedStyle(el).visibility);\n        expect(visibility).withContext(`In ${browserName}`).toEqual(\"visible\");\n\n        // Clear the textfield\n        await clearInput(page, getSelector(\"416R\"));\n        // and leave it\n        await page.click(getSelector(\"419R\"));\n        await page.waitForFunction(`${getComputedStyleSelector(\"427R\")}.visibility !== \"visible\"`);\n        visibility = await page.$eval(getSelector(\"427R\"), el => getComputedStyle(el).visibility);\n        expect(visibility).withContext(`In ${browserName}`).toEqual(\"hidden\");\n      }));\n    });","file":"integration/scripting_spec.js","skipped":false,"dir":"test"},{"name":"must format the field with 2 digits and leave field with a click","suites":["Interaction","in 160F-2019.pdf"],"line":78,"updatePoint":{"line":78,"column":72,"index":3304},"code":"    it(\"must format the field with 2 digits and leave field with a click\", async () => {\n      await Promise.all(pages.map(async ([browserName, page]) => {\n        await page.type(getSelector(\"416R\"), \"3.14159\", {\n          delay: 200\n        });\n        await page.click(getSelector(\"419R\"));\n        const valueFnStr = `${getQuerySelector(\"416R\")}.value !== \"3.14159\"`;\n        await page.waitForFunction(valueFnStr);\n        const text = await page.$eval(getSelector(\"416R\"), el => el.value);\n        expect(text).withContext(`In ${browserName}`).toEqual(\"3,14\");\n        const sum = await page.$eval(getSelector(\"427R\"), el => el.value);\n        expect(sum).withContext(`In ${browserName}`).toEqual(\"3,14\");\n      }));\n    });","file":"integration/scripting_spec.js","skipped":false,"dir":"test"},{"name":"must format the field with 2 digits, leave field with a click and again","suites":["Interaction","in 160F-2019.pdf"],"line":92,"updatePoint":{"line":92,"column":79,"index":4042},"code":"    it(\"must format the field with 2 digits, leave field with a click and again\", async () => {\n      await Promise.all(pages.map(async ([browserName, page]) => {\n        await page.type(getSelector(\"448R\"), \"61803\", {\n          delay: 200\n        });\n        await page.click(getSelector(\"419R\"));\n        const valueOneFnStr = `${getQuerySelector(\"448R\")}.value !== \"61803\"`;\n        await page.waitForFunction(valueOneFnStr);\n        let text = await page.$eval(getSelector(\"448R\"), el => el.value);\n        expect(text).withContext(`In ${browserName}`).toEqual(\"61.803,00\");\n        await page.click(getSelector(\"448R\"));\n        const valueTwoFnStr = `${getQuerySelector(\"448R\")}.value !== \"61.803,00\"`;\n        await page.waitForFunction(valueTwoFnStr);\n        text = await page.$eval(getSelector(\"448R\"), el => el.value);\n        expect(text).withContext(`In ${browserName}`).toEqual(\"61803\");\n\n        // Clear the textfield\n        await clearInput(page, getSelector(\"448R\"));\n        await page.type(getSelector(\"448R\"), \"1.61803\", {\n          delay: 200\n        });\n        await page.click(getSelector(\"419R\"));\n        const valueThreeFnStr = `${getQuerySelector(\"448R\")}.value !== \"1.61803\"`;\n        await page.waitForFunction(valueThreeFnStr);\n        text = await page.$eval(getSelector(\"448R\"), el => el.value);\n        expect(text).withContext(`In ${browserName}`).toEqual(\"1,62\");\n      }));\n    });","file":"integration/scripting_spec.js","skipped":false,"dir":"test"},{"name":"must format the field with 2 digits and leave field with a TAB","suites":["Interaction","in 160F-2019.pdf"],"line":120,"updatePoint":{"line":120,"column":70,"index":5454},"code":"    it(\"must format the field with 2 digits and leave field with a TAB\", async () => {\n      await Promise.all(pages.map(async ([browserName, page]) => {\n        const prevSum = await page.$eval(getSelector(\"427R\"), el => el.value);\n        await page.type(getSelector(\"422R\"), \"2.7182818\", {\n          delay: 200\n        });\n        await page.keyboard.press(\"Tab\");\n        await page.waitForFunction(`${getQuerySelector(\"422R\")}.value !== \"2.7182818\"`);\n        const text = await page.$eval(getSelector(\"422R\"), el => el.value);\n        expect(text).withContext(`In ${browserName}`).toEqual(\"2,72\");\n        await page.waitForFunction(`${getQuerySelector(\"427R\")}.value !== \"${prevSum}\"`);\n        const sum = await page.$eval(getSelector(\"427R\"), el => el.value);\n        expect(sum).withContext(`In ${browserName}`).toEqual(\"5,86\");\n      }));\n    });","file":"integration/scripting_spec.js","skipped":false,"dir":"test"},{"name":"must format the field with 2 digits and hit ESC","suites":["Interaction","in 160F-2019.pdf"],"line":135,"updatePoint":{"line":135,"column":55,"index":6297},"code":"    it(\"must format the field with 2 digits and hit ESC\", async () => {\n      await Promise.all(pages.map(async ([browserName, page]) => {\n        let sum = await page.$eval(getSelector(\"471R\"), el => el.value);\n        expect(sum).withContext(`In ${browserName}`).toEqual(\"4,24\");\n        await page.type(getSelector(\"436R\"), \"0.69314\", {\n          delay: 200\n        });\n        await page.keyboard.press(\"Escape\");\n        const text = await page.$eval(getSelector(\"436R\"), el => el.value);\n        expect(text).withContext(`In ${browserName}`).toEqual(\"0.69314\");\n        await page.waitForFunction(`${getQuerySelector(\"471R\")}.value !== \"${sum}\"`);\n        sum = await page.$eval(getSelector(\"471R\"), el => el.value);\n        expect(sum).withContext(`In ${browserName}`).toEqual(\"3,55\");\n      }));\n    });","file":"integration/scripting_spec.js","skipped":false,"dir":"test"},{"name":"must format the field with 2 digits on key ENTER","suites":["Interaction","in 160F-2019.pdf"],"line":150,"updatePoint":{"line":150,"column":56,"index":7110},"code":"    it(\"must format the field with 2 digits on key ENTER\", async () => {\n      await Promise.all(pages.map(async ([browserName, page]) => {\n        const prevSum = await page.$eval(getSelector(\"427R\"), el => el.value);\n        await page.type(getSelector(\"419R\"), \"0.577215\", {\n          delay: 200\n        });\n        await page.keyboard.press(\"Enter\");\n        const text = await page.$eval(getSelector(\"419R\"), el => el.value);\n        expect(text).toEqual(\"0.577215\");\n        await page.waitForFunction(`${getQuerySelector(\"427R\")}.value !== \"${prevSum}\"`);\n        const sum = await page.$eval(getSelector(\"427R\"), el => el.value);\n        expect(sum).toEqual(\"6,44\");\n      }));\n    });","file":"integration/scripting_spec.js","skipped":false,"dir":"test"},{"name":"must reset all","suites":["Interaction","in 160F-2019.pdf"],"line":164,"updatePoint":{"line":164,"column":22,"index":7770},"code":"    it(\"must reset all\", async () => {\n      await Promise.all(pages.map(async ([browserName, page]) => {\n        // click on a radio button\n        await page.click(\"[data-annotation-id='449R']\");\n\n        // this field has no actions but it must be cleared on reset\n        await page.type(getSelector(\"405R\"), \"employee\", {\n          delay: 200\n        });\n        let checked = await page.$eval(getSelector(\"449R\"), el => el.checked);\n        expect(checked).toEqual(true);\n\n        // click on reset button\n        await page.click(\"[data-annotation-id='402R']\");\n        await Promise.all([\"416R\", \"422R\", \"419R\", \"405R\"].map(id => {\n          const querySelector = getQuerySelector(id);\n          return page.waitForFunction(`${querySelector}.value === \"\"`);\n        }));\n        let text = await page.$eval(getSelector(\"416R\"), el => el.value);\n        expect(text).toEqual(\"\");\n        text = await page.$eval(getSelector(\"422R\"), el => el.value);\n        expect(text).toEqual(\"\");\n        text = await page.$eval(getSelector(\"419R\"), el => el.value);\n        expect(text).toEqual(\"\");\n        text = await page.$eval(getSelector(\"405R\"), el => el.value);\n        expect(text).toEqual(\"\");\n        checked = await page.$eval(getSelector(\"449R\"), el => el.checked);\n        expect(checked).toEqual(false);\n        const visibility = await page.$eval(getSelector(\"427R\"), el => getComputedStyle(el).visibility);\n        expect(visibility).toEqual(\"hidden\");\n      }));\n    });","file":"integration/scripting_spec.js","skipped":false,"dir":"test"},{"name":"must show values in a text input when clicking on radio buttons","suites":["Interaction","in js-buttons.pdf"],"line":205,"updatePoint":{"line":205,"column":71,"index":9537},"code":"    it(\"must show values in a text input when clicking on radio buttons\", async () => {\n      await Promise.all(pages.map(async ([browserName, page]) => {\n        await page.waitForFunction(\"window.PDFViewerApplication.scriptingReady === true\");\n        const expected = [[\"81R\", \"Group1=Choice1::1\"], [\"82R\", \"Group1=Choice2::2\"], [\"83R\", \"Group1=Choice3::3\"], [\"84R\", \"Group1=Choice4::4\"]];\n        for (const [id, expectedText] of expected) {\n          // Clear the textfield\n          await clearInput(page, getSelector(\"80R\"));\n          await page.click(getSelector(id));\n          await page.waitForFunction(`${getQuerySelector(\"80R\")}.value !== \"\"`);\n          const text = await page.$eval(getSelector(\"80R\"), el => el.value);\n          expect(text).withContext(`In ${browserName}`).toEqual(expectedText);\n        }\n      }));\n    });","file":"integration/scripting_spec.js","skipped":false,"dir":"test"},{"name":"must show values in a text input when clicking on checkboxes","suites":["Interaction","in js-buttons.pdf"],"line":219,"updatePoint":{"line":219,"column":68,"index":10378},"code":"    it(\"must show values in a text input when clicking on checkboxes\", async () => {\n      await Promise.all(pages.map(async ([browserName, page]) => {\n        const expected = [[\"85R\", \"Check1=Yes::5\"], [\"87R\", \"Check2=Yes::6\"], [\"88R\", \"Check3=Yes::7\"], [\"89R\", \"Check4=Yes::8\"], [\"85R\", \"Check1=Off::5\"], [\"87R\", \"Check2=Off::6\"], [\"88R\", \"Check3=Off::7\"], [\"89R\", \"Check4=Off::8\"]];\n        for (const [id, expectedText] of expected) {\n          // Clear the textfield\n          await clearInput(page, getSelector(\"80R\"));\n          await page.click(getSelector(id));\n          await page.waitForFunction(`${getQuerySelector(\"80R\")}.value !== \"\"`);\n          const text = await page.$eval(getSelector(\"80R\"), el => el.value);\n          expect(text).withContext(`In ${browserName}`).toEqual(expectedText);\n        }\n      }));\n    });","file":"integration/scripting_spec.js","skipped":false,"dir":"test"},{"name":"must show values in a text input when clicking on checkboxes in a group","suites":["Interaction","in js-buttons.pdf"],"line":232,"updatePoint":{"line":232,"column":79,"index":11227},"code":"    it(\"must show values in a text input when clicking on checkboxes in a group\", async () => {\n      await Promise.all(pages.map(async ([browserName, page]) => {\n        const expected = [[\"90R\", \"Check5=Yes1::9\"], [\"91R\", \"Check5=Yes2::10\"], [\"92R\", \"Check5=Yes3::11\"], [\"93R\", \"Check5=Yes4::12\"], [\"93R\", \"Check5=Off::12\"]];\n        for (const [id, expectedText] of expected) {\n          // Clear the textfield\n          await clearInput(page, getSelector(\"80R\"));\n          await page.click(getSelector(id));\n          await page.waitForFunction(`${getQuerySelector(\"80R\")}.value !== \"\"`);\n          const text = await page.$eval(getSelector(\"80R\"), el => el.value);\n          expect(text).withContext(`In ${browserName}`).toEqual(expectedText);\n        }\n      }));\n    });","file":"integration/scripting_spec.js","skipped":false,"dir":"test"},{"name":"must show values in a text input when clicking on checkboxes or radio with no actions","suites":["Interaction","in js-buttons.pdf"],"line":245,"updatePoint":{"line":245,"column":93,"index":12020},"code":"    it(\"must show values in a text input when clicking on checkboxes or radio with no actions\", async () => {\n      await Promise.all(pages.map(async ([browserName, page]) => {\n        const expected = [[\"\", \"Off;Off\"], [\"94R\", \"Yes;Off\"], [\"95R\", \"Yes;NoAct2\"], [\"96R\", \"Yes;NoAct3\"], [\"94R\", \"Off;NoAct3\"], [\"95R\", \"Off;NoAct2\"]];\n        for (const [id, expectedText] of expected) {\n          // Clear the textfield\n          await clearInput(page, getSelector(\"80R\"));\n          if (id) {\n            await page.click(getSelector(id));\n          }\n          await page.click(\"[data-annotation-id='97R']\");\n          await page.waitForFunction(`${getQuerySelector(\"80R\")}.value !== \"\"`);\n          const text = await page.$eval(getSelector(\"80R\"), el => el.value);\n          expect(text).withContext(`In ${browserName}`).toEqual(expectedText);\n        }\n      }));\n    });","file":"integration/scripting_spec.js","skipped":false,"dir":"test"},{"name":"must execute WillPrint and DidPrint actions","suites":["Interaction","in doc_actions.pdf for printing"],"line":270,"updatePoint":{"line":270,"column":51,"index":13103},"code":"    it(\"must execute WillPrint and DidPrint actions\", async () => {\n      await Promise.all(pages.map(async ([browserName, page]) => {\n        if (process.platform === \"win32\" && browserName === \"firefox\") {\n          pending(\"Disabled in Firefox on Windows, because of bug 1662471.\");\n        }\n        await page.waitForFunction(\"window.PDFViewerApplication.scriptingReady === true\");\n        await clearInput(page, getSelector(\"47R\"));\n        await page.evaluate(_ => {\n          window.document.activeElement.blur();\n        });\n        await page.waitForFunction(`${getQuerySelector(\"47R\")}.value === \"\"`);\n        let text = await actAndWaitForInput(page, getSelector(\"47R\"), async () => {\n          await page.click(\"#print\");\n        });\n        expect(text).withContext(`In ${browserName}`).toEqual(\"WillPrint\");\n        await page.waitForFunction(`${getQuerySelector(\"50R\")}.value !== \"\"`);\n        text = await page.$eval(getSelector(\"50R\"), el => el.value);\n        expect(text).withContext(`In ${browserName}`).toEqual(\"DidPrint\");\n      }));\n    });","file":"integration/scripting_spec.js","skipped":false,"dir":"test"},{"name":"must execute WillSave and DidSave actions","suites":["Interaction","in doc_actions.pdf for saving"],"line":299,"updatePoint":{"line":299,"column":49,"index":14413},"code":"    it(\"must execute WillSave and DidSave actions\", async () => {\n      await Promise.all(pages.map(async ([browserName, page]) => {\n        await page.waitForFunction(\"window.PDFViewerApplication.scriptingReady === true\");\n        try {\n          // Disable download in chrome\n          // (it leads to an error in firefox so the try...)\n          await page._client.send(\"Page.setDownloadBehavior\", {\n            behavior: \"deny\"\n          });\n        } catch {}\n        await clearInput(page, getSelector(\"47R\"));\n        await page.evaluate(_ => {\n          window.document.activeElement.blur();\n        });\n        await page.waitForFunction(`${getQuerySelector(\"47R\")}.value === \"\"`);\n        let text = await actAndWaitForInput(page, getSelector(\"47R\"), async () => {\n          await page.click(\"#download\");\n        });\n        expect(text).withContext(`In ${browserName}`).toEqual(\"WillSave\");\n        await page.waitForFunction(`${getQuerySelector(\"50R\")}.value !== \"\"`);\n        text = await page.$eval(getSelector(\"50R\"), el => el.value);\n        expect(text).withContext(`In ${browserName}`).toEqual(\"DidSave\");\n      }));\n    });","file":"integration/scripting_spec.js","skipped":false,"dir":"test"},{"name":"must execute PageOpen and PageClose actions","suites":["Interaction","in doc_actions.pdf for page actions"],"line":332,"updatePoint":{"line":332,"column":51,"index":15812},"code":"    it(\"must execute PageOpen and PageClose actions\", async () => {\n      await Promise.all(pages.map(async ([browserName, page]) => {\n        await page.waitForFunction(\"window.PDFViewerApplication.scriptingReady === true\");\n        await page.waitForFunction(`${getQuerySelector(\"47R\")}.value !== \"\"`);\n        let text = await page.$eval(getSelector(\"47R\"), el => el.value);\n        expect(text).withContext(`In ${browserName}`).toEqual(\"PageOpen 1\");\n        for (let run = 0; run < 5; run++) {\n          for (const ref of [\"18R\", \"19R\", \"20R\", \"21R\", \"47R\", \"50R\"]) {\n            await page.evaluate(selector => {\n              const element = window.document.querySelector(selector);\n              if (element) {\n                element.value = \"\";\n              }\n            }, getSelector(ref));\n          }\n          for (const [refOpen, refClose, pageNumOpen, pageNumClose] of [[\"18R\", \"50R\", 2, 1], [\"21R\", \"19R\", 3, 2], [\"47R\", \"20R\", 1, 3]]) {\n            text = await actAndWaitForInput(page, getSelector(refOpen), async () => {\n              await page.evaluate(selector => {\n                const element = window.document.querySelector(selector);\n                element.scrollIntoView();\n              }, getSelector(refOpen));\n            }, false);\n            expect(text).withContext(`In ${browserName}`).toEqual(`PageOpen ${pageNumOpen}`);\n            text = await page.$eval(getSelector(refClose), el => el.value);\n            expect(text).withContext(`In ${browserName}`).toEqual(`PageClose ${pageNumClose}`);\n          }\n        }\n      }));\n    });","file":"integration/scripting_spec.js","skipped":false,"dir":"test"},{"name":"must print authors in a text field","suites":["Interaction","in js-authors.pdf"],"line":370,"updatePoint":{"line":370,"column":42,"index":17614},"code":"    it(\"must print authors in a text field\", async () => {\n      await Promise.all(pages.map(async ([browserName, page]) => {\n        const text = await actAndWaitForInput(page, getSelector(\"25R\"), async () => {\n          await page.click(\"[data-annotation-id='26R']\");\n        });\n        expect(text).withContext(`In ${browserName}`).toEqual(\"author1::author2::author3::author4::author5\");\n      }));\n    });","file":"integration/scripting_spec.js","skipped":false,"dir":"test"},{"name":"must print selected value in a text field","suites":["Interaction","in listbox_actions.pdf"],"line":387,"updatePoint":{"line":387,"column":49,"index":18276},"code":"    it(\"must print selected value in a text field\", async () => {\n      await Promise.all(pages.map(async ([browserName, page]) => {\n        for (const num of [7, 6, 4, 3, 2, 1]) {\n          await clearInput(page, getSelector(\"33R\"));\n          await page.click(`option[value=Export${num}]`);\n          await page.waitForFunction(`${getQuerySelector(\"33R\")}.value !== \"\"`);\n          const text = await page.$eval(getSelector(\"33R\"), el => el.value);\n          expect(text).withContext(`In ${browserName}`).toEqual(`Item${num},Export${num}`);\n        }\n      }));\n    });","file":"integration/scripting_spec.js","skipped":false,"dir":"test"},{"name":"must clear and restore list elements","suites":["Interaction","in listbox_actions.pdf"],"line":398,"updatePoint":{"line":398,"column":44,"index":18843},"code":"    it(\"must clear and restore list elements\", async () => {\n      await Promise.all(pages.map(async ([browserName, page]) => {\n        // Click on ClearItems button.\n        await page.click(\"[data-annotation-id='34R']\");\n        await page.waitForFunction(`${getQuerySelector(\"30R\")}.children.length === 0`);\n\n        // Click on Restore button.\n        await page.click(\"[data-annotation-id='37R']\");\n        await page.waitForFunction(`${getQuerySelector(\"30R\")}.children.length !== 0`);\n        for (const num of [7, 6, 4, 3, 2, 1]) {\n          await clearInput(page, getSelector(\"33R\"));\n          await page.click(`option[value=Export${num}]`);\n          await page.waitForFunction(`${getQuerySelector(\"33R\")}.value !== \"\"`);\n          const text = await page.$eval(getSelector(\"33R\"), el => el.value);\n          expect(text).withContext(`In ${browserName}`).toEqual(`Item${num},Export${num}`);\n        }\n      }));\n    });","file":"integration/scripting_spec.js","skipped":false,"dir":"test"},{"name":"must insert new elements","suites":["Interaction","in listbox_actions.pdf"],"line":416,"updatePoint":{"line":416,"column":32,"index":19762},"code":"    it(\"must insert new elements\", async () => {\n      await Promise.all(pages.map(async ([browserName, page]) => {\n        let len = 6;\n        for (const num of [1, 3, 5, 6, 431, -1, 0]) {\n          ++len;\n          await clearInput(page, getSelector(\"33R\"));\n          await clearInput(page, getSelector(\"39R\"));\n          await page.type(getSelector(\"39R\"), `${num},Insert${num},Tresni${num}`, {\n            delay: 10\n          });\n\n          // Click on AddItem button.\n          await page.click(\"[data-annotation-id='38R']\");\n          await page.waitForFunction(`${getQuerySelector(\"30R\")}.children.length === ${len}`);\n\n          // Click on newly added option.\n          await page.select(getSelector(\"30R\"), `Tresni${num}`);\n          await page.waitForFunction(`${getQuerySelector(\"33R\")}.value !== \"\"`);\n          const text = await page.$eval(getSelector(\"33R\"), el => el.value);\n          expect(text).withContext(`In ${browserName}`).toEqual(`Insert${num},Tresni${num}`);\n        }\n      }));\n    });","file":"integration/scripting_spec.js","skipped":false,"dir":"test"},{"name":"must delete some element","suites":["Interaction","in listbox_actions.pdf"],"line":439,"updatePoint":{"line":439,"column":32,"index":20779},"code":"    it(\"must delete some element\", async () => {\n      await Promise.all(pages.map(async ([browserName, page]) => {\n        let len = 6;\n        // Click on Restore button.\n        await clearInput(page, getSelector(\"33R\"));\n        await page.click(\"[data-annotation-id='37R']\");\n        await page.waitForFunction(`${getQuerySelector(\"30R\")}.children.length === ${len}`);\n        for (const num of [2, 5]) {\n          --len;\n          await clearInput(page, getSelector(\"39R\"));\n          await page.type(getSelector(\"39R\"), `${num}`);\n\n          // Click on DeleteItem button.\n          await page.click(\"[data-annotation-id='36R']\");\n          await page.waitForFunction(`${getQuerySelector(\"30R\")}.children.length === ${len}`);\n        }\n        for (const num of [6, 4, 2, 1]) {\n          await clearInput(page, getSelector(\"33R\"));\n          await page.click(`option[value=Export${num}]`);\n          await page.waitForFunction(`${getQuerySelector(\"33R\")}.value !== \"\"`);\n          const text = await page.$eval(getSelector(\"33R\"), el => el.value);\n          expect(text).withContext(`In ${browserName}`).toEqual(`Item${num},Export${num}`);\n        }\n      }));\n    });","file":"integration/scripting_spec.js","skipped":false,"dir":"test"},{"name":"must change colors","suites":["Interaction","in js-colors.pdf"],"line":473,"updatePoint":{"line":473,"column":26,"index":22181},"code":"    it(\"must change colors\", async () => {\n      await Promise.all(pages.map(async ([browserName, page]) => {\n        for (const [name, ref] of [[\"Text1\", \"34R\"], [\"Check1\", \"35R\"], [\"Radio1\", \"37R\"], [\"Choice1\", \"38R\"]]) {\n          await clearInput(page, getSelector(\"34R\"));\n          await page.type(getSelector(\"34R\"), `${name}`, {\n            delay: 10\n          });\n          for (const [id, propName, expected] of [[41, \"backgroundColor\", \"rgb(255, 0, 0)\"], [43, \"color\", \"rgb(0, 255, 0)\"], [44, \"border-top-color\", \"rgb(0, 0, 255)\"]]) {\n            const current = await page.$eval(getSelector(ref), (el, _propName) => getComputedStyle(el)[_propName], propName);\n            await page.click(`[data-annotation-id='${id}R']`);\n            await page.waitForFunction(`${getComputedStyleSelector(ref)}[\"${propName}\"] !== \"${current}\"`);\n            const color = await page.$eval(getSelector(ref), (el, _propName) => getComputedStyle(el)[_propName], propName);\n            expect(color).withContext(`In ${browserName}`).toEqual(expected);\n          }\n        }\n      }));\n    });","file":"integration/scripting_spec.js","skipped":false,"dir":"test"},{"name":"must compute sum of fields","suites":["Interaction","in issue13132.pdf"],"line":499,"updatePoint":{"line":499,"column":34,"index":23510},"code":"    it(\"must compute sum of fields\", async () => {\n      await Promise.all(pages.map(async ([browserName, page]) => {\n        await page.waitForFunction(\"window.PDFViewerApplication.scriptingReady === true\");\n        await page.evaluate(selector => {\n          window.document.querySelector(selector).scrollIntoView();\n        }, getSelector(\"171R\"));\n        let sum = 0;\n        for (const [id, val] of [[\"138R\", 1], [\"77R\", 2], [\"93R\", 3], [\"151R\", 4], [\"79R\", 5]]) {\n          const prev = await page.$eval(getSelector(\"171R\"), el => el.value);\n          await page.type(getSelector(id), val.toString(), {\n            delay: 100\n          });\n          await page.keyboard.press(\"Tab\");\n          await page.waitForFunction(`${getQuerySelector(\"171R\")}.value !== \"${prev}\"`);\n          sum += val;\n          const total = await page.$eval(getSelector(\"171R\"), el => el.value);\n          expect(total).withContext(`In ${browserName}`).toEqual(`£${sum}`);\n        }\n        await page.waitForSelector('.page[data-page-number = \"4\"]', {\n          timeout: 0\n        });\n\n        // Some unrendered annotations have been updated, so check\n        // that they've the correct value when rendered.\n        await page.evaluate(() => {\n          window.document.querySelector('.page[data-page-number = \"4\"]').scrollIntoView();\n        });\n        await page.waitForSelector(getSelector(\"299R\"), {\n          timeout: 0\n        });\n        const total = await page.$eval(getSelector(\"299R\"), el => el.value);\n        expect(total).withContext(`In ${browserName}`).toEqual(`£${sum}`);\n      }));\n    });","file":"integration/scripting_spec.js","skipped":false,"dir":"test"},{"name":"must check page index","suites":["Interaction","Check field properties"],"line":542,"updatePoint":{"line":542,"column":29,"index":25337},"code":"    it(\"must check page index\", async () => {\n      await Promise.all(pages.map(async ([browserName, page]) => {\n        await page.waitForFunction(\"window.PDFViewerApplication.scriptingReady === true\");\n        await clearInput(page, getSelector(\"55R\"));\n        await page.type(getSelector(\"55R\"), `\n            ['Text1', 'Text2', 'Text4',\n             'List Box7', 'Group6'].map(x => this.getField(x).page).join(',')\n            `);\n\n        // Click on execute button to eval the above code.\n        await page.click(\"[data-annotation-id='57R']\");\n        await page.waitForFunction(`${getQuerySelector(\"56R\")}.value !== \"\"`);\n        const text = await page.$eval(getSelector(\"56R\"), el => el.value);\n        expect(text).withContext(`In ${browserName}`).toEqual(\"0,0,1,1,1\");\n      }));\n    });","file":"integration/scripting_spec.js","skipped":false,"dir":"test"},{"name":"must check display","suites":["Interaction","Check field properties"],"line":558,"updatePoint":{"line":558,"column":26,"index":26135},"code":"    it(\"must check display\", async () => {\n      await Promise.all(pages.map(async ([browserName, page]) => {\n        for (const [type, vis] of [[\"hidden\", \"hidden\"], [\"noPrint\", \"visible\"], [\"noView\", \"hidden\"], [\"visible\", \"visible\"]]) {\n          let visibility = await page.$eval(getSelector(\"56R\"), el => getComputedStyle(el).visibility);\n          await clearInput(page, getSelector(\"55R\"));\n          await page.type(getSelector(\"55R\"), `this.getField(\"Text2\").display = display.${type};`);\n          await page.click(\"[data-annotation-id='57R']\");\n          await page.waitForFunction(`${getComputedStyleSelector(\"56R\")}.visibility !== \"${visibility}\"`);\n          visibility = await page.$eval(getSelector(\"56R\"), el => getComputedStyle(el).visibility);\n          expect(visibility).withContext(`In ${browserName}`).toEqual(vis);\n        }\n      }));\n    });","file":"integration/scripting_spec.js","skipped":false,"dir":"test"},{"name":"must update fields with the same name from JS","suites":["Interaction","in issue13269.pdf"],"line":580,"updatePoint":{"line":580,"column":53,"index":27264},"code":"    it(\"must update fields with the same name from JS\", async () => {\n      await Promise.all(pages.map(async ([browserName, page]) => {\n        await page.waitForFunction(\"window.PDFViewerApplication.scriptingReady === true\");\n        await page.type(getSelector(\"27R\"), \"hello\");\n        await page.keyboard.press(\"Enter\");\n        await Promise.all([\"24R\", \"25R\", \"26R\"].map(async id => page.waitForFunction(`${getQuerySelector(id)}.value !== \"\"`)));\n        const expected = \"hello world\";\n        for (const id of [\"24R\", \"25R\", \"26R\"]) {\n          const text = await page.$eval(getSelector(id), el => el.value);\n          expect(text).withContext(`In ${browserName}`).toEqual(expected);\n        }\n      }));\n    });","file":"integration/scripting_spec.js","skipped":false,"dir":"test"},{"name":"must print securityHandler value in a text field","suites":["Interaction","in secHandler.pdf"],"line":602,"updatePoint":{"line":602,"column":56,"index":28223},"code":"    it(\"must print securityHandler value in a text field\", async () => {\n      await Promise.all(pages.map(async ([browserName, page]) => {\n        const text = await actAndWaitForInput(page, getSelector(\"25R\"), async () => {\n          await page.click(\"[data-annotation-id='26R']\");\n        });\n        expect(text).withContext(`In ${browserName}`).toEqual(\"Standard\");\n      }));\n    });","file":"integration/scripting_spec.js","skipped":false,"dir":"test"},{"name":"must check input for US zip format","suites":["Interaction","in issue14307.pdf (1)"],"line":624,"updatePoint":{"line":624,"column":42,"index":28975},"code":"    it(\"must check input for US zip format\", async () => {\n      // Run the tests sequentially to avoid any focus issues between the two\n      // browsers when an alert is displayed.\n      for (const [browserName, page] of pages) {\n        await page.waitForFunction(\"window.PDFViewerApplication.scriptingReady === true\");\n        await clearInput(page, getSelector(\"29R\"));\n        await clearInput(page, getSelector(\"30R\"));\n        await page.focus(getSelector(\"29R\"));\n        await page.type(getSelector(\"29R\"), \"12A\", {\n          delay: 100\n        });\n        await page.waitForFunction(`${getQuerySelector(\"29R\")}.value !== \"12A\"`);\n        let text = await page.$eval(getSelector(`29R`), el => el.value);\n        expect(text).withContext(`In ${browserName}`).toEqual(\"12\");\n        await page.focus(getSelector(\"29R\"));\n        await page.type(getSelector(\"29R\"), \"34\", {\n          delay: 100\n        });\n        await page.click(\"[data-annotation-id='30R']\");\n        await page.waitForFunction(`${getQuerySelector(\"29R\")}.value !== \"1234\"`);\n        text = await page.$eval(getSelector(`29R`), el => el.value);\n        expect(text).withContext(`In ${browserName}`).toEqual(\"\");\n        await page.focus(getSelector(\"29R\"));\n        await page.type(getSelector(\"29R\"), \"12345\", {\n          delay: 100\n        });\n        await page.click(\"[data-annotation-id='30R']\");\n        text = await page.$eval(getSelector(`29R`), el => el.value);\n        expect(text).withContext(`In ${browserName}`).toEqual(\"12345\");\n      }\n    });","file":"integration/scripting_spec.js","skipped":false,"dir":"test"},{"name":"must check input for US phone number (long) format","suites":["Interaction","in issue14307.pdf (2)"],"line":669,"updatePoint":{"line":669,"column":58,"index":30903},"code":"    it(\"must check input for US phone number (long) format\", async () => {\n      // Run the tests sequentially to avoid any focus issues between the two\n      // browsers when an alert is displayed.\n      for (const [browserName, page] of pages) {\n        await page.waitForFunction(\"window.PDFViewerApplication.scriptingReady === true\");\n        await clearInput(page, getSelector(\"29R\"));\n        await clearInput(page, getSelector(\"30R\"));\n        await page.focus(getSelector(\"30R\"));\n        await page.type(getSelector(\"30R\"), \"(123) 456A\", {\n          delay: 100\n        });\n        await page.waitForFunction(`${getQuerySelector(\"30R\")}.value !== \"(123) 456A\"`);\n        let text = await page.$eval(getSelector(`30R`), el => el.value);\n        expect(text).withContext(`In ${browserName}`).toEqual(\"(123) 456\");\n        await page.focus(getSelector(\"30R\"));\n        await page.type(getSelector(\"30R\"), \"-789\", {\n          delay: 100\n        });\n        await page.click(\"[data-annotation-id='29R']\");\n        await page.waitForFunction(`${getQuerySelector(\"30R\")}.value !== \"(123) 456-789\"`);\n        text = await page.$eval(getSelector(`30R`), el => el.value);\n        expect(text).withContext(`In ${browserName}`).toEqual(\"\");\n        await page.focus(getSelector(\"30R\"));\n        await page.type(getSelector(\"30R\"), \"(123) 456-7890\", {\n          delay: 100\n        });\n        await page.click(\"[data-annotation-id='29R']\");\n        text = await page.$eval(getSelector(\"30R\"), el => el.value);\n        expect(text).withContext(`In ${browserName}`).toEqual(\"(123) 456-7890\");\n      }\n    });","file":"integration/scripting_spec.js","skipped":false,"dir":"test"},{"name":"must check input for US phone number (short) format","suites":["Interaction","in issue14307.pdf (3)"],"line":714,"updatePoint":{"line":714,"column":59,"index":32882},"code":"    it(\"must check input for US phone number (short) format\", async () => {\n      // Run the tests sequentially to avoid any focus issues between the two\n      // browsers when an alert is displayed.\n      for (const [browserName, page] of pages) {\n        await page.waitForFunction(\"window.PDFViewerApplication.scriptingReady === true\");\n        await clearInput(page, getSelector(\"29R\"));\n        await clearInput(page, getSelector(\"30R\"));\n        await page.focus(getSelector(\"30R\"));\n        await page.type(getSelector(\"30R\"), \"123A\", {\n          delay: 100\n        });\n        await page.waitForFunction(`${getQuerySelector(\"30R\")}.value !== \"123A\"`);\n        let text = await page.$eval(getSelector(`30R`), el => el.value);\n        expect(text).withContext(`In ${browserName}`).toEqual(\"123\");\n        await page.focus(getSelector(\"30R\"));\n        await page.type(getSelector(\"30R\"), \"-456\", {\n          delay: 100\n        });\n        await page.click(\"[data-annotation-id='29R']\");\n        await page.waitForFunction(`${getQuerySelector(\"30R\")}.value !== \"123-456\"`);\n        text = await page.$eval(getSelector(\"30R\"), el => el.value);\n        expect(text).withContext(`In ${browserName}`).toEqual(\"\");\n        await page.focus(getSelector(\"30R\"));\n        await page.type(getSelector(\"30R\"), \"123-4567\", {\n          delay: 100\n        });\n        await page.click(\"[data-annotation-id='29R']\");\n        text = await page.$eval(getSelector(\"30R\"), el => el.value);\n        expect(text).withContext(`In ${browserName}`).toEqual(\"123-4567\");\n      }\n    });","file":"integration/scripting_spec.js","skipped":false,"dir":"test"},{"name":"must convert input to uppercase","suites":["Interaction","in issue14862.pdf"],"line":759,"updatePoint":{"line":759,"column":39,"index":34801},"code":"    it(\"must convert input to uppercase\", async () => {\n      await Promise.all(pages.map(async ([browserName, page]) => {\n        await page.waitForFunction(\"window.PDFViewerApplication.scriptingReady === true\");\n        await page.type(getSelector(\"27R\"), \"Hello\", {\n          delay: 100\n        });\n        await page.waitForFunction(`${getQuerySelector(\"27R\")}.value !== \"Hello\"`);\n        let text = await page.$eval(getSelector(\"27R\"), el => el.value);\n        expect(text).withContext(`In ${browserName}`).toEqual(\"HELLO\");\n        await page.type(getSelector(\"27R\"), \" world\", {\n          delay: 100\n        });\n        await page.waitForFunction(`${getQuerySelector(\"27R\")}.value !== \"HELLO world\"`);\n        text = await page.$eval(getSelector(\"27R\"), el => el.value);\n        expect(text).withContext(`In ${browserName}`).toEqual(\"HELLO WORLD\");\n        await page.keyboard.press(\"Backspace\");\n        await page.keyboard.press(\"Backspace\");\n        await page.waitForFunction(`${getQuerySelector(\"27R\")}.value !== \"HELLO WORLD\"`);\n        text = await page.$eval(getSelector(\"27R\"), el => el.value);\n        expect(text).withContext(`In ${browserName}`).toEqual(\"HELLO WOR\");\n        await page.type(getSelector(\"27R\"), \"12.dL\", {\n          delay: 100\n        });\n        await page.waitForFunction(`${getQuerySelector(\"27R\")}.value !== \"HELLO WOR\"`);\n        text = await page.$eval(getSelector(\"27R\"), el => el.value);\n        expect(text).withContext(`In ${browserName}`).toEqual(\"HELLO WORDL\");\n        await page.type(getSelector(\"27R\"), \" \", {\n          delay: 100\n        });\n        await page.keyboard.down(\"Control\");\n        await page.keyboard.press(\"Backspace\");\n        await page.keyboard.up(\"Control\");\n        await page.waitForFunction(`${getQuerySelector(\"27R\")}.value !== \"HELLO WORDL \"`);\n        text = await page.$eval(getSelector(\"27R\"), el => el.value);\n        expect(text).withContext(`In ${browserName}`).toEqual(\"HELLO \");\n        await page.$eval(getSelector(\"27R\"), el => {\n          // Select LL\n          el.selectionStart = 2;\n          el.selectionEnd = 4;\n        });\n        await page.keyboard.press(\"a\");\n        text = await page.$eval(getSelector(\"27R\"), el => el.value);\n        expect(text).withContext(`In ${browserName}`).toEqual(\"HEAO \");\n      }));\n    });","file":"integration/scripting_spec.js","skipped":false,"dir":"test"},{"name":"must check that an infinite loop is not triggered","suites":["Interaction","in issue14862.pdf"],"line":804,"updatePoint":{"line":804,"column":57,"index":37135},"code":"    it(\"must check that an infinite loop is not triggered\", async () => {\n      await Promise.all(pages.map(async ([browserName, page]) => {\n        await page.waitForFunction(\"window.PDFViewerApplication.scriptingReady === true\");\n        await page.click(getSelector(\"28R\"));\n        await page.$eval(getSelector(\"28R\"), el => el.setSelectionRange(0, 0));\n        await page.type(getSelector(\"28R\"), \"Hello\", {\n          delay: 100\n        });\n        await page.waitForFunction(`${getQuerySelector(\"28R\")}.value !== \"123\"`);\n        let text = await page.$eval(getSelector(\"28R\"), el => el.value);\n        expect(text).withContext(`In ${browserName}`).toEqual(\"Hello123\");\n\n        // The action will trigger a calculateNow which itself\n        // will trigger a resetForm (inducing a calculateNow) and a\n        // calculateNow.\n        await page.click(\"[data-annotation-id='31R']\");\n        await page.waitForFunction(`${getQuerySelector(\"28R\")}.value !== \"Hello123\"`);\n\n        // Without preventing against infinite loop the field is empty.\n        text = await page.$eval(getSelector(\"28R\"), el => el.value);\n        expect(text).withContext(`In ${browserName}`).toEqual(\"123\");\n      }));\n    });","file":"integration/scripting_spec.js","skipped":false,"dir":"test"},{"name":"must check that field value is correctly updated","suites":["Interaction","in issue14705.pdf"],"line":841,"updatePoint":{"line":841,"column":56,"index":38713},"code":"    it(\"must check that field value is correctly updated\", async () => {\n      await Promise.all(pages.map(async ([browserName, page]) => {\n        await page.waitForFunction(\"window.PDFViewerApplication.scriptingReady === true\");\n        await page.type(getSelector(\"29R\"), \"Hello World\", {\n          delay: 100\n        });\n        await page.click(getSelector(\"27R\"));\n        await page.waitForFunction(`${getQuerySelector(\"29R\")}.value !== \"Hello World\"`);\n        let text = await page.$eval(getSelector(\"29R\"), el => el.value);\n        expect(text).withContext(`In ${browserName}`).toEqual(\"checked\");\n        await page.click(getSelector(\"27R\"));\n        await page.waitForFunction(`${getQuerySelector(\"29R\")}.value !== \"checked\"`);\n        text = await page.$eval(getSelector(\"29R\"), el => el.value);\n        expect(text).withContext(`In ${browserName}`).toEqual(\"unchecked\");\n      }));\n    });","file":"integration/scripting_spec.js","skipped":false,"dir":"test"},{"name":"must check that field value is correctly formatted","suites":["Interaction","in bug1766987.pdf"],"line":866,"updatePoint":{"line":866,"column":58,"index":39853},"code":"    it(\"must check that field value is correctly formatted\", async () => {\n      await Promise.all(pages.map(async ([browserName, page]) => {\n        await page.waitForFunction(\"window.PDFViewerApplication.scriptingReady === true\");\n        let text = await page.$eval(getSelector(\"75R\"), el => el.value);\n        expect(text).withContext(`In ${browserName}`).toEqual(\"150.32 €\");\n        text = await page.$eval(getSelector(\"82R\"), el => el.value);\n        expect(text).withContext(`In ${browserName}`).toEqual(\"12.74 Kwh\");\n        text = await page.$eval(getSelector(\"91R\"), el => el.value);\n        expect(text).withContext(`In ${browserName}`).toEqual(\"352.19 Kwh\");\n        text = await page.$eval(getSelector(\"101R\"), el => el.value);\n        expect(text).withContext(`In ${browserName}`).toEqual(\"20.57 €\");\n      }));\n    });","file":"integration/scripting_spec.js","skipped":false,"dir":"test"},{"name":"must check that a button and text field with a border are hidden","suites":["Interaction","in issue15053.pdf"],"line":888,"updatePoint":{"line":888,"column":72,"index":40936},"code":"    it(\"must check that a button and text field with a border are hidden\", async () => {\n      await Promise.all(pages.map(async ([browserName, page]) => {\n        await page.waitForFunction(\"window.PDFViewerApplication.scriptingReady === true\");\n        let visibility = await page.$eval(\"[data-annotation-id='35R']\", el => getComputedStyle(el).visibility);\n        expect(visibility).withContext(`In ${browserName}`).toEqual(\"visible\");\n        visibility = await page.$eval(\"[data-annotation-id='51R']\", el => getComputedStyle(el).visibility);\n        expect(visibility).withContext(`In ${browserName}`).toEqual(\"visible\");\n        await page.click(getSelector(\"44R\"));\n        visibility = await page.$eval(\"[data-annotation-id='35R']\", el => getComputedStyle(el).visibility);\n        expect(visibility).withContext(`In ${browserName}`).toEqual(\"hidden\");\n        visibility = await page.$eval(\"[data-annotation-id='51R']\", el => getComputedStyle(el).visibility);\n        expect(visibility).withContext(`In ${browserName}`).toEqual(\"hidden\");\n      }));\n    });","file":"integration/scripting_spec.js","skipped":false,"dir":"test"},{"name":"must check that data-main-rotation is correct","suites":["Interaction","in bug1675139.pdf"],"line":911,"updatePoint":{"line":911,"column":53,"index":42217},"code":"    it(\"must check that data-main-rotation is correct\", async () => {\n      await Promise.all(pages.map(async ([browserName, page]) => {\n        await page.waitForFunction(\"window.PDFViewerApplication.scriptingReady === true\");\n        let base = 0;\n        while (base !== 360) {\n          for (const [ref, angle] of [[47, 0], [42, 90], [45, 180], [46, 270]]) {\n            await page.waitForFunction((sel, b, a) => {\n              const el = document.querySelector(sel);\n              const rotation = parseInt(el.getAttribute(\"data-main-rotation\")) || 0;\n              return rotation === (360 + (360 - (b + a)) % 360) % 360;\n            }, {}, `[data-annotation-id='${ref}R']`, base, angle);\n          }\n          base += 90;\n          await page.click(getSelector(\"48R\"));\n        }\n      }));\n    });","file":"integration/scripting_spec.js","skipped":false,"dir":"test"},{"name":"must check that a values is correctly updated on a field and its siblings","suites":["Interaction","in issue15092.pdf"],"line":937,"updatePoint":{"line":937,"column":81,"index":43286},"code":"    it(\"must check that a values is correctly updated on a field and its siblings\", async () => {\n      await Promise.all(pages.map(async ([browserName, page]) => {\n        await page.waitForFunction(\"window.PDFViewerApplication.scriptingReady === true\");\n        await clearInput(page, getSelector(\"39R\"));\n        await page.type(getSelector(\"39R\"), \"123\", {\n          delay: 10\n        });\n        const prevTotal = await page.$eval(getSelector(\"43R\"), el => el.value);\n        await clearInput(page, getSelector(\"42R\"));\n        await page.type(getSelector(\"42R\"), \"456\", {\n          delay: 10\n        });\n        await page.click(getSelector(\"45R\"));\n        await page.waitForFunction(`${getQuerySelector(\"43R\")}.value !== \"${prevTotal}\"`);\n        await page.waitForFunction(`${getQuerySelector(\"46R\")}.value !== \"${prevTotal}\"`);\n        let total = await page.$eval(getSelector(\"43R\"), el => el.value);\n        expect(total).withContext(`In ${browserName}`).toEqual(\"579.00\");\n        total = await page.$eval(getSelector(\"46R\"), el => el.value);\n        expect(total).withContext(`In ${browserName}`).toEqual(\"579.00\");\n      }));\n    });","file":"integration/scripting_spec.js","skipped":false,"dir":"test"},{"name":"must check that charLimit is correctly set","suites":["Interaction","in bug1782564.pdf"],"line":967,"updatePoint":{"line":967,"column":50,"index":44637},"code":"    it(\"must check that charLimit is correctly set\", async () => {\n      await Promise.all(pages.map(async ([browserName, page]) => {\n        await page.waitForFunction(\"window.PDFViewerApplication.scriptingReady === true\");\n        await clearInput(page, getSelector(\"7R\"));\n        // By default the charLimit is 0 which means that the input\n        // length is unlimited.\n        await page.type(getSelector(\"7R\"), \"abcdefghijklmnopq\", {\n          delay: 10\n        });\n        let value = await page.$eval(getSelector(\"7R\"), el => el.value);\n        expect(value).withContext(`In ${browserName}`).toEqual(\"abcdefghijklmnopq\");\n\n        // charLimit is set to 1\n        await page.click(getSelector(\"9R\"));\n        await page.waitForFunction(`document.querySelector('${getSelector(\"7R\")}').value !== \"abcdefgh\"`);\n        value = await page.$eval(getSelector(\"7R\"), el => el.value);\n        expect(value).withContext(`In ${browserName}`).toEqual(\"a\");\n        await clearInput(page, getSelector(\"7R\"));\n        await page.type(getSelector(\"7R\"), \"xyz\", {\n          delay: 10\n        });\n        value = await page.$eval(getSelector(\"7R\"), el => el.value);\n        expect(value).withContext(`In ${browserName}`).toEqual(\"x\");\n\n        // charLimit is set to 2\n        await page.click(getSelector(\"9R\"));\n        await clearInput(page, getSelector(\"7R\"));\n        await page.type(getSelector(\"7R\"), \"xyz\", {\n          delay: 10\n        });\n        value = await page.$eval(getSelector(\"7R\"), el => el.value);\n        expect(value).withContext(`In ${browserName}`).toEqual(\"xy\");\n      }));\n    });","file":"integration/scripting_spec.js","skipped":false,"dir":"test"},{"name":"must check field value is treated by default as a number","suites":["Interaction","in bug1802888.pdf"],"line":1010,"updatePoint":{"line":1010,"column":64,"index":46486},"code":"    it(\"must check field value is treated by default as a number\", async () => {\n      await Promise.all(pages.map(async ([browserName, page]) => {\n        await page.waitForFunction(\"window.PDFViewerApplication.scriptingReady === true\");\n        await page.type(getSelector(\"30R\"), \"123\", {\n          delay: 10\n        });\n        await page.click(getSelector(\"31R\"));\n        await page.type(getSelector(\"31R\"), \"456\", {\n          delay: 10\n        });\n        await page.click(getSelector(\"26R\"));\n        await page.click(getSelector(\"27R\"));\n        await page.waitForFunction(`${getQuerySelector(\"26R\")}.value !== \"\"`);\n        const value = await page.$eval(getSelector(\"26R\"), el => el.value);\n        expect(value).withContext(`In ${browserName}`).toEqual(\"579\");\n      }));\n    });","file":"integration/scripting_spec.js","skipped":false,"dir":"test"},{"name":"must check field value is correctly updated when committed with ENTER key","suites":["Interaction","in issue15753.pdf"],"line":1036,"updatePoint":{"line":1036,"column":81,"index":47529},"code":"    it(\"must check field value is correctly updated when committed with ENTER key\", async () => {\n      await Promise.all(pages.map(async ([browserName, page]) => {\n        await page.waitForFunction(\"window.PDFViewerApplication.scriptingReady === true\");\n        await page.type(getSelector(\"27R\"), \"abc\", {\n          delay: 10\n        });\n        await page.keyboard.press(\"Enter\");\n        await page.waitForFunction(`${getQuerySelector(\"28R\")}.value !== \"\"`);\n        let value = await page.$eval(getSelector(\"28R\"), el => el.value);\n        expect(value).withContext(`In ${browserName}`).toEqual(\"abc\");\n        await page.type(getSelector(\"27R\"), \"def\", {\n          delay: 10\n        });\n        await page.keyboard.press(\"Enter\");\n        await page.waitForFunction(`${getQuerySelector(\"28R\")}.value !== \"abc\"`);\n        value = await page.$eval(getSelector(\"28R\"), el => el.value);\n        expect(value).withContext(`In ${browserName}`).toEqual(\"abcdef\");\n        await page.keyboard.down(\"Control\");\n        await page.keyboard.press(\"A\");\n        await page.keyboard.up(\"Control\");\n        await page.keyboard.press(\"Backspace\");\n        await page.keyboard.press(\"Enter\");\n        await page.waitForFunction(`${getQuerySelector(\"28R\")}.value !== \"abcdef\"`);\n        value = await page.$eval(getSelector(\"28R\"), el => el.value);\n        expect(value).withContext(`In ${browserName}`).toEqual(\"\");\n      }));\n    });","file":"integration/scripting_spec.js","skipped":false,"dir":"test"},{"name":"must check field value is correctly updated when committed with ENTER key","suites":["Interaction","in issue15815.pdf"],"line":1072,"updatePoint":{"line":1072,"column":81,"index":49189},"code":"    it(\"must check field value is correctly updated when committed with ENTER key\", async () => {\n      await Promise.all(pages.map(async ([browserName, page]) => {\n        await page.waitForFunction(\"window.PDFViewerApplication.scriptingReady === true\");\n        let value = \"A\";\n        for (const [displayValue, exportValue] of [[\"B\", \"x2\"], [\"C\", \"x3\"], [\"A\", \"x1\"]]) {\n          await clearInput(page, getSelector(\"27R\"));\n          await page.select(getSelector(\"24R\"), exportValue);\n          await page.waitForFunction(`${getQuerySelector(\"27R\")}.value !== \"\"`);\n          const text = await page.$eval(getSelector(\"27R\"), el => el.value);\n          expect(text).withContext(`In ${browserName}`).toEqual(`value=${value}, changeEx=${exportValue}`);\n          value = displayValue;\n        }\n        for (const exportValue of [\"x3\", \"x2\", \"x1\"]) {\n          await clearInput(page, getSelector(\"27R\"));\n          await page.type(getSelector(\"27R\"), exportValue);\n          await page.click(\"[data-annotation-id='28R']\");\n          await page.waitForTimeout(10);\n          value = await page.$eval(getSelector(\"24R\"), el => el.value);\n          expect(value).withContext(`In ${browserName}`).toEqual(exportValue);\n        }\n      }));\n    });","file":"integration/scripting_spec.js","skipped":false,"dir":"test"},{"name":"must check the field value set when the document is open","suites":["Interaction","in issue15818.pdf"],"line":1103,"updatePoint":{"line":1103,"column":64,"index":50653},"code":"    it(\"must check the field value set when the document is open\", async () => {\n      await Promise.all(pages.map(async ([browserName, page]) => {\n        await page.waitForFunction(\"window.PDFViewerApplication.scriptingReady === true\");\n        await page.waitForFunction(`${getQuerySelector(\"27R\")}.value !== \"\"`);\n        const text = await page.$eval(getSelector(\"27R\"), el => el.value);\n        expect(text).withContext(`In ${browserName}`).toEqual(\"hello world\");\n      }));\n    });","file":"integration/scripting_spec.js","skipped":false,"dir":"test"},{"name":"must check the format action is called when setFocus is used","suites":["Interaction","in issue15818.pdf"],"line":1111,"updatePoint":{"line":1111,"column":68,"index":51147},"code":"    it(\"must check the format action is called when setFocus is used\", async () => {\n      await Promise.all(pages.map(async ([browserName, page]) => {\n        await page.waitForFunction(\"window.PDFViewerApplication.scriptingReady === true\");\n        await page.type(getSelector(\"30R\"), \"abc\", {\n          delay: 100\n        });\n        await page.waitForFunction(`${getQuerySelector(\"30R\")}.value !== \"abc\"`);\n        await page.waitForTimeout(100);\n        const focusedId = await page.evaluate(_ => window.document.activeElement.getAttribute(\"data-element-id\"));\n        expect(focusedId).withContext(`In ${browserName}`).toEqual(\"31R\");\n      }));\n    });","file":"integration/scripting_spec.js","skipped":false,"dir":"test"},{"name":"must check if printing is triggered when the document is open","suites":["Interaction","in autoprint.pdf"],"line":1132,"updatePoint":{"line":1132,"column":69,"index":52037},"code":"    it(\"must check if printing is triggered when the document is open\", async () => {\n      await Promise.all(pages.map(async ([browserName, page]) => {\n        await page.waitForFunction(\"window.PDFViewerApplication.scriptingReady === true\");\n        await page.waitForFunction(`document.querySelector(\".printedPage\") !== null`);\n        await page.keyboard.press(\"Escape\");\n      }));\n    });","file":"integration/scripting_spec.js","skipped":false,"dir":"test"},{"name":"must check that a field value with a number isn't changed","suites":["Interaction","in bug1811694.pdf"],"line":1148,"updatePoint":{"line":1148,"column":65,"index":52662},"code":"    it(\"must check that a field value with a number isn't changed\", async () => {\n      await Promise.all(pages.map(async ([browserName, page]) => {\n        await page.waitForFunction(\"window.PDFViewerApplication.scriptingReady === true\");\n        await page.click(getSelector(\"25R\"));\n        await page.type(getSelector(\"25R\"), \"00000000123\", {\n          delay: 10\n        });\n        let text = await page.$eval(getSelector(\"25R\"), el => el.value);\n        expect(text).withContext(`In ${browserName}`).toEqual(\"00000000123\");\n        await page.click(getSelector(\"26R\"));\n        await page.waitForTimeout(10);\n        text = await page.$eval(getSelector(\"25R\"), el => el.value);\n        expect(text).withContext(`In ${browserName}`).toEqual(\"00000000123\");\n      }));\n    });","file":"integration/scripting_spec.js","skipped":false,"dir":"test"},{"name":"must check that a field value with a number with a comma has the correct value","suites":["Interaction","in bug1811510.pdf"],"line":1172,"updatePoint":{"line":1172,"column":86,"index":53698},"code":"    it(\"must check that a field value with a number with a comma has the correct value\", async () => {\n      await Promise.all(pages.map(async ([browserName, page]) => {\n        await page.waitForFunction(\"window.PDFViewerApplication.scriptingReady === true\");\n        let text = await page.$eval(getSelector(\"22R\"), el => el.value);\n        expect(text).withContext(`In ${browserName}`).toEqual(\"5,25\");\n        await page.$eval(getSelector(\"31R\"), el => el.value);\n        expect(text).withContext(`In ${browserName}`).toEqual(\"5,25\");\n        await page.click(getSelector(\"22R\"));\n        await page.waitForTimeout(10);\n        text = await page.$eval(getSelector(\"22R\"), el => el.value);\n        expect(text).withContext(`In ${browserName}`).toEqual(\"5,25\");\n        await page.click(getSelector(\"31R\"));\n        await page.waitForTimeout(10);\n        text = await page.$eval(getSelector(\"31R\"), el => el.value);\n        expect(text).withContext(`In ${browserName}`).toEqual(\"5.25\");\n      }));\n    });","file":"integration/scripting_spec.js","skipped":false,"dir":"test"},{"name":"must check that a field has the correct value when a choice is changed","suites":["Interaction","in issue16067.pdf"],"line":1198,"updatePoint":{"line":1198,"column":78,"index":54930},"code":"    it(\"must check that a field has the correct value when a choice is changed\", async () => {\n      await Promise.all(pages.map(async ([browserName, page]) => {\n        await page.waitForFunction(\"window.PDFViewerApplication.scriptingReady === true\");\n        let text = await page.$eval(getSelector(\"44R\"), el => el.value);\n        expect(text).withContext(`In ${browserName}`).toEqual(\"\");\n        await page.select(getSelector(\"6R\"), \"Yes\");\n        await page.waitForTimeout(10);\n        text = await page.$eval(getSelector(\"44R\"), el => el.value);\n        expect(text).withContext(`In ${browserName}`).toEqual(\"Yes\");\n        await clearInput(page, getSelector(\"44R\"));\n        await page.select(getSelector(\"6R\"), \"No\");\n        await page.waitForTimeout(10);\n        text = await page.$eval(getSelector(\"44R\"), el => el.value);\n        expect(text).withContext(`In ${browserName}`).toEqual(\"No\");\n      }));\n    });","file":"integration/scripting_spec.js","skipped":false,"dir":"test"},{"name":"must check that a field has the correct formatted value","suites":["Interaction","in bug1825002.pdf"],"line":1223,"updatePoint":{"line":1223,"column":63,"index":56073},"code":"    it(\"must check that a field has the correct formatted value\", async () => {\n      await Promise.all(pages.map(async ([browserName, page]) => {\n        await page.waitForFunction(\"window.PDFViewerApplication.scriptingReady === true\");\n        let text = await page.$eval(getSelector(\"23R\"), el => el.value);\n        expect(text).withContext(`In ${browserName}`).toEqual(\"ABCDEFGHIJKLMN\");\n        await page.click(getSelector(\"23R\"));\n        await page.waitForFunction(`${getQuerySelector(\"23R\")}.value !== \"ABCDEFGHIJKLMN\"`);\n        text = await page.$eval(getSelector(\"23R\"), el => el.value);\n        expect(text).withContext(`In ${browserName}`).toEqual(\"123,45.7A\");\n      }));\n    });","file":"integration/scripting_spec.js","skipped":false,"dir":"test"},{"name":"must check that a field is empty","suites":["Interaction","in bug1825002.pdf"],"line":1234,"updatePoint":{"line":1234,"column":40,"index":56745},"code":"    it(\"must check that a field is empty\", async () => {\n      await Promise.all(pages.map(async ([browserName, page]) => {\n        await page.waitForFunction(\"window.PDFViewerApplication.scriptingReady === true\");\n        let text = await page.$eval(getSelector(\"26R\"), el => el.value);\n        expect(text).withContext(`In ${browserName}`).toEqual(\"\");\n        await page.click(getSelector(\"26R\"));\n        await page.type(getSelector(\"26R\"), \"abcde\", {\n          delay: 10\n        });\n        await page.click(getSelector(\"23R\"));\n        await page.waitForTimeout(10);\n        await page.click(getSelector(\"26R\"));\n        await page.keyboard.down(\"Control\");\n        await page.keyboard.press(\"A\");\n        await page.keyboard.up(\"Control\");\n        await page.keyboard.press(\"Backspace\");\n        await page.click(getSelector(\"23R\"));\n        await page.waitForTimeout(10);\n        text = await page.$eval(getSelector(\"26R\"), el => el.value);\n        expect(text).withContext(`In ${browserName}`).toEqual(\"\");\n      }));\n    });","file":"integration/scripting_spec.js","skipped":false,"dir":"test"},{"name":"should get id for annotation","suites":["annotation","AnnotationFactory"],"line":108,"updatePoint":{"line":108,"column":36,"index":3828},"code":"    it(\"should get id for annotation\", async function () {\n      const annotationDict = new Dict();\n      annotationDict.set(\"Type\", Name.get(\"Annot\"));\n      annotationDict.set(\"Subtype\", Name.get(\"Link\"));\n      const annotationRef = Ref.get(10, 0);\n      const xref = new XRefMock([{\n        ref: annotationRef,\n        data: annotationDict\n      }]);\n      const {\n        data\n      } = await AnnotationFactory.create(xref, annotationRef, pdfManagerMock, idFactoryMock);\n      expect(data.annotationType).toEqual(AnnotationType.LINK);\n      expect(data.id).toEqual(\"10R\");\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should handle missing /Subtype","suites":["annotation","AnnotationFactory"],"line":143,"updatePoint":{"line":143,"column":38,"index":5370},"code":"    it(\"should handle missing /Subtype\", async function () {\n      const annotationDict = new Dict();\n      annotationDict.set(\"Type\", Name.get(\"Annot\"));\n      const annotationRef = Ref.get(1, 0);\n      const xref = new XRefMock([{\n        ref: annotationRef,\n        data: annotationDict\n      }]);\n      const {\n        data\n      } = await AnnotationFactory.create(xref, annotationRef, pdfManagerMock, idFactoryMock);\n      expect(data.annotationType).toBeUndefined();\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should ignore missing quadpoints","suites":["annotation","getQuadPoints"],"line":167,"updatePoint":{"line":167,"column":40,"index":6074},"code":"    it(\"should ignore missing quadpoints\", function () {\n      expect(getQuadPoints(dict, rect)).toEqual(null);\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should ignore non-array values","suites":["annotation","getQuadPoints"],"line":170,"updatePoint":{"line":170,"column":38,"index":6192},"code":"    it(\"should ignore non-array values\", function () {\n      dict.set(\"QuadPoints\", \"foo\");\n      expect(getQuadPoints(dict, rect)).toEqual(null);\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should ignore arrays where the length is not a multiple of eight","suites":["annotation","getQuadPoints"],"line":174,"updatePoint":{"line":174,"column":72,"index":6381},"code":"    it(\"should ignore arrays where the length is not a multiple of eight\", function () {\n      dict.set(\"QuadPoints\", [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\n      expect(getQuadPoints(dict, rect)).toEqual(null);\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should ignore quadpoints if one coordinate lies outside the rectangle","suites":["annotation","getQuadPoints"],"line":178,"updatePoint":{"line":178,"column":77,"index":6601},"code":"    it(\"should ignore quadpoints if one coordinate lies outside the rectangle\", function () {\n      rect = [10, 10, 20, 20];\n      const inputs = [[11, 11, 12, 12, 9, 13, 14, 14],\n      // Smaller than lower x coordinate.\n      [11, 11, 12, 12, 13, 9, 14, 14],\n      // Smaller than lower y coordinate.\n      [11, 11, 12, 12, 21, 13, 14, 14],\n      // Larger than upper x coordinate.\n      [11, 11, 12, 12, 13, 21, 14, 14] // Larger than upper y coordinate.\n      ];\n\n      for (const input of inputs) {\n        dict.set(\"QuadPoints\", input);\n        expect(getQuadPoints(dict, rect)).toEqual(null);\n      }\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should process quadpoints in the standard order","suites":["annotation","getQuadPoints"],"line":194,"updatePoint":{"line":194,"column":55,"index":7195},"code":"    it(\"should process quadpoints in the standard order\", function () {\n      rect = [10, 10, 20, 20];\n      dict.set(\"QuadPoints\", [10, 20, 20, 20, 10, 10, 20, 10, 11, 19, 19, 19, 11, 11, 19, 11]);\n      expect(getQuadPoints(dict, rect)).toEqual([[{\n        x: 10,\n        y: 20\n      }, {\n        x: 20,\n        y: 20\n      }, {\n        x: 10,\n        y: 10\n      }, {\n        x: 20,\n        y: 10\n      }], [{\n        x: 11,\n        y: 19\n      }, {\n        x: 19,\n        y: 19\n      }, {\n        x: 11,\n        y: 11\n      }, {\n        x: 19,\n        y: 11\n      }]]);\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should normalize and process quadpoints in non-standard orders","suites":["annotation","getQuadPoints"],"line":223,"updatePoint":{"line":223,"column":70,"index":7792},"code":"    it(\"should normalize and process quadpoints in non-standard orders\", function () {\n      rect = [10, 10, 20, 20];\n      const nonStandardOrders = [\n      // Bottom left, bottom right, top right and top left.\n      [10, 20, 20, 20, 20, 10, 10, 10],\n      // Top left, top right, bottom left and bottom right.\n      [10, 10, 20, 10, 10, 20, 20, 20],\n      // Top left, top right, bottom right and bottom left.\n      [10, 10, 20, 10, 20, 20, 10, 20]];\n      for (const nonStandardOrder of nonStandardOrders) {\n        dict.set(\"QuadPoints\", nonStandardOrder);\n        expect(getQuadPoints(dict, rect)).toEqual([[{\n          x: 10,\n          y: 20\n        }, {\n          x: 20,\n          y: 20\n        }, {\n          x: 10,\n          y: 10\n        }, {\n          x: 20,\n          y: 10\n        }]]);\n      }\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should set and get valid contents","suites":["annotation","Annotation"],"line":259,"updatePoint":{"line":259,"column":41,"index":8791},"code":"    it(\"should set and get valid contents\", function () {\n      const annotation = new Annotation({\n        dict,\n        ref\n      });\n      annotation.setContents(\"Foo bar baz\");\n      expect(annotation._contents).toEqual({\n        str: \"Foo bar baz\",\n        dir: \"ltr\"\n      });\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should not set and get invalid contents","suites":["annotation","Annotation"],"line":270,"updatePoint":{"line":270,"column":47,"index":9088},"code":"    it(\"should not set and get invalid contents\", function () {\n      const annotation = new Annotation({\n        dict,\n        ref\n      });\n      annotation.setContents(undefined);\n      expect(annotation._contents).toEqual({\n        str: \"\",\n        dir: \"ltr\"\n      });\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should set and get a valid modification date","suites":["annotation","Annotation"],"line":281,"updatePoint":{"line":281,"column":52,"index":9375},"code":"    it(\"should set and get a valid modification date\", function () {\n      const annotation = new Annotation({\n        dict,\n        ref\n      });\n      annotation.setModificationDate(\"D:20190422\");\n      expect(annotation.modificationDate).toEqual(\"D:20190422\");\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should not set and get an invalid modification date","suites":["annotation","Annotation"],"line":289,"updatePoint":{"line":289,"column":59,"index":9654},"code":"    it(\"should not set and get an invalid modification date\", function () {\n      const annotation = new Annotation({\n        dict,\n        ref\n      });\n      annotation.setModificationDate(undefined);\n      expect(annotation.modificationDate).toEqual(null);\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should set and get flags","suites":["annotation","Annotation"],"line":297,"updatePoint":{"line":297,"column":32,"index":9895},"code":"    it(\"should set and get flags\", function () {\n      const annotation = new Annotation({\n        dict,\n        ref\n      });\n      annotation.setFlags(13);\n      expect(annotation.hasFlag(AnnotationFlag.INVISIBLE)).toEqual(true);\n      expect(annotation.hasFlag(AnnotationFlag.NOZOOM)).toEqual(true);\n      expect(annotation.hasFlag(AnnotationFlag.PRINT)).toEqual(true);\n      expect(annotation.hasFlag(AnnotationFlag.READONLY)).toEqual(false);\n      expect(annotation.hasFlag(AnnotationFlag.HIDDEN)).toEqual(false);\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should be viewable and not printable by default","suites":["annotation","Annotation"],"line":309,"updatePoint":{"line":309,"column":55,"index":10445},"code":"    it(\"should be viewable and not printable by default\", function () {\n      const annotation = new Annotation({\n        dict,\n        ref\n      });\n      expect(annotation.viewable).toEqual(true);\n      expect(annotation.printable).toEqual(false);\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should set and get a valid rectangle","suites":["annotation","Annotation"],"line":317,"updatePoint":{"line":317,"column":44,"index":10692},"code":"    it(\"should set and get a valid rectangle\", function () {\n      const annotation = new Annotation({\n        dict,\n        ref\n      });\n      annotation.setRectangle([117, 694, 164.298, 720]);\n      expect(annotation.rectangle).toEqual([117, 694, 164.298, 720]);\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should not set and get an invalid rectangle","suites":["annotation","Annotation"],"line":325,"updatePoint":{"line":325,"column":51,"index":10973},"code":"    it(\"should not set and get an invalid rectangle\", function () {\n      const annotation = new Annotation({\n        dict,\n        ref\n      });\n      annotation.setRectangle([117, 694, 164.298]);\n      expect(annotation.rectangle).toEqual([0, 0, 0, 0]);\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should reject a color if it is not an array","suites":["annotation","Annotation"],"line":333,"updatePoint":{"line":333,"column":51,"index":11237},"code":"    it(\"should reject a color if it is not an array\", function () {\n      const annotation = new Annotation({\n        dict,\n        ref\n      });\n      annotation.setColor(\"red\");\n      expect(annotation.color).toEqual(new Uint8ClampedArray([0, 0, 0]));\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should set and get a transparent color","suites":["annotation","Annotation"],"line":341,"updatePoint":{"line":341,"column":46,"index":11494},"code":"    it(\"should set and get a transparent color\", function () {\n      const annotation = new Annotation({\n        dict,\n        ref\n      });\n      annotation.setColor([]);\n      expect(annotation.color).toEqual(null);\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should set and get a grayscale color","suites":["annotation","Annotation"],"line":349,"updatePoint":{"line":349,"column":44,"index":11718},"code":"    it(\"should set and get a grayscale color\", function () {\n      const annotation = new Annotation({\n        dict,\n        ref\n      });\n      annotation.setColor([0.4]);\n      expect(annotation.color).toEqual(new Uint8ClampedArray([102, 102, 102]));\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should set and get an RGB color","suites":["annotation","Annotation"],"line":357,"updatePoint":{"line":357,"column":39,"index":11974},"code":"    it(\"should set and get an RGB color\", function () {\n      const annotation = new Annotation({\n        dict,\n        ref\n      });\n      annotation.setColor([0, 0, 1]);\n      expect(annotation.color).toEqual(new Uint8ClampedArray([0, 0, 255]));\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should set and get a CMYK color","suites":["annotation","Annotation"],"line":365,"updatePoint":{"line":365,"column":39,"index":12230},"code":"    it(\"should set and get a CMYK color\", function () {\n      const annotation = new Annotation({\n        dict,\n        ref\n      });\n      annotation.setColor([0.1, 0.92, 0.84, 0.02]);\n      expect(annotation.color).toEqual(new Uint8ClampedArray([234, 59, 48]));\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should not set and get an invalid color","suites":["annotation","Annotation"],"line":373,"updatePoint":{"line":373,"column":47,"index":12510},"code":"    it(\"should not set and get an invalid color\", function () {\n      const annotation = new Annotation({\n        dict,\n        ref\n      });\n      annotation.setColor([0.4, 0.6]);\n      expect(annotation.color).toEqual(new Uint8ClampedArray([0, 0, 0]));\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should set and get a valid width","suites":["annotation","AnnotationBorderStyle"],"line":383,"updatePoint":{"line":383,"column":40,"index":12822},"code":"    it(\"should set and get a valid width\", function () {\n      const borderStyleInt = new AnnotationBorderStyle();\n      borderStyleInt.setWidth(3);\n      const borderStyleNum = new AnnotationBorderStyle();\n      borderStyleNum.setWidth(2.5);\n      expect(borderStyleInt.width).toEqual(3);\n      expect(borderStyleNum.width).toEqual(2.5);\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should not set and get an invalid width","suites":["annotation","AnnotationBorderStyle"],"line":391,"updatePoint":{"line":391,"column":47,"index":13176},"code":"    it(\"should not set and get an invalid width\", function () {\n      const borderStyle = new AnnotationBorderStyle();\n      borderStyle.setWidth(\"three\");\n      expect(borderStyle.width).toEqual(1);\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should set the width to zero, when the input is a `Name` (issue 10385)","suites":["annotation","AnnotationBorderStyle"],"line":396,"updatePoint":{"line":396,"column":78,"index":13415},"code":"    it(\"should set the width to zero, when the input is a `Name` (issue 10385)\", function () {\n      const borderStyleZero = new AnnotationBorderStyle();\n      borderStyleZero.setWidth(Name.get(\"0\"));\n      const borderStyleFive = new AnnotationBorderStyle();\n      borderStyleFive.setWidth(Name.get(\"5\"));\n      expect(borderStyleZero.width).toEqual(0);\n      expect(borderStyleFive.width).toEqual(0);\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should set and get a valid style","suites":["annotation","AnnotationBorderStyle"],"line":404,"updatePoint":{"line":404,"column":40,"index":13788},"code":"    it(\"should set and get a valid style\", function () {\n      const borderStyle = new AnnotationBorderStyle();\n      borderStyle.setStyle(Name.get(\"D\"));\n      expect(borderStyle.style).toEqual(AnnotationBorderStyleType.DASHED);\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should not set and get an invalid style","suites":["annotation","AnnotationBorderStyle"],"line":409,"updatePoint":{"line":409,"column":47,"index":14033},"code":"    it(\"should not set and get an invalid style\", function () {\n      const borderStyle = new AnnotationBorderStyle();\n      borderStyle.setStyle(\"Dashed\");\n      expect(borderStyle.style).toEqual(AnnotationBorderStyleType.SOLID);\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should set and get a valid dash array","suites":["annotation","AnnotationBorderStyle"],"line":414,"updatePoint":{"line":414,"column":45,"index":14270},"code":"    it(\"should set and get a valid dash array\", function () {\n      const borderStyle = new AnnotationBorderStyle();\n      borderStyle.setDashArray([1, 2, 3]);\n      expect(borderStyle.dashArray).toEqual([1, 2, 3]);\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should not set and get an invalid dash array","suites":["annotation","AnnotationBorderStyle"],"line":419,"updatePoint":{"line":419,"column":52,"index":14501},"code":"    it(\"should not set and get an invalid dash array\", function () {\n      const borderStyle = new AnnotationBorderStyle();\n      borderStyle.setDashArray([0, 0]);\n      expect(borderStyle.dashArray).toEqual([3]);\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should set and get a valid horizontal corner radius","suites":["annotation","AnnotationBorderStyle"],"line":424,"updatePoint":{"line":424,"column":59,"index":14730},"code":"    it(\"should set and get a valid horizontal corner radius\", function () {\n      const borderStyle = new AnnotationBorderStyle();\n      borderStyle.setHorizontalCornerRadius(3);\n      expect(borderStyle.horizontalCornerRadius).toEqual(3);\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should not set and get an invalid horizontal corner radius","suites":["annotation","AnnotationBorderStyle"],"line":429,"updatePoint":{"line":429,"column":66,"index":14985},"code":"    it(\"should not set and get an invalid horizontal corner radius\", function () {\n      const borderStyle = new AnnotationBorderStyle();\n      borderStyle.setHorizontalCornerRadius(\"three\");\n      expect(borderStyle.horizontalCornerRadius).toEqual(0);\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should set and get a valid vertical corner radius","suites":["annotation","AnnotationBorderStyle"],"line":434,"updatePoint":{"line":434,"column":57,"index":15237},"code":"    it(\"should set and get a valid vertical corner radius\", function () {\n      const borderStyle = new AnnotationBorderStyle();\n      borderStyle.setVerticalCornerRadius(3);\n      expect(borderStyle.verticalCornerRadius).toEqual(3);\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should not set and get an invalid vertical corner radius","suites":["annotation","AnnotationBorderStyle"],"line":439,"updatePoint":{"line":439,"column":64,"index":15486},"code":"    it(\"should not set and get an invalid vertical corner radius\", function () {\n      const borderStyle = new AnnotationBorderStyle();\n      borderStyle.setVerticalCornerRadius(\"three\");\n      expect(borderStyle.verticalCornerRadius).toEqual(0);\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should set and get a valid creation date","suites":["annotation","MarkupAnnotation"],"line":454,"updatePoint":{"line":454,"column":48,"index":15943},"code":"    it(\"should set and get a valid creation date\", function () {\n      const markupAnnotation = new MarkupAnnotation({\n        dict,\n        ref\n      });\n      markupAnnotation.setCreationDate(\"D:20190422\");\n      expect(markupAnnotation.creationDate).toEqual(\"D:20190422\");\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should not set and get an invalid creation date","suites":["annotation","MarkupAnnotation"],"line":462,"updatePoint":{"line":462,"column":55,"index":16234},"code":"    it(\"should not set and get an invalid creation date\", function () {\n      const markupAnnotation = new MarkupAnnotation({\n        dict,\n        ref\n      });\n      markupAnnotation.setCreationDate(undefined);\n      expect(markupAnnotation.creationDate).toEqual(null);\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should not parse IRT/RT when not defined","suites":["annotation","MarkupAnnotation"],"line":470,"updatePoint":{"line":470,"column":48,"index":16507},"code":"    it(\"should not parse IRT/RT when not defined\", async function () {\n      dict.set(\"Type\", Name.get(\"Annot\"));\n      dict.set(\"Subtype\", Name.get(\"Text\"));\n      const xref = new XRefMock([{\n        ref,\n        data: dict\n      }]);\n      const {\n        data\n      } = await AnnotationFactory.create(xref, ref, pdfManagerMock, idFactoryMock);\n      expect(data.inReplyTo).toBeUndefined();\n      expect(data.replyType).toBeUndefined();\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should parse IRT and set default RT when not defined","suites":["annotation","MarkupAnnotation"],"line":483,"updatePoint":{"line":483,"column":60,"index":16967},"code":"    it(\"should parse IRT and set default RT when not defined\", async function () {\n      const annotationRef = Ref.get(819, 0);\n      const annotationDict = new Dict();\n      annotationDict.set(\"Type\", Name.get(\"Annot\"));\n      annotationDict.set(\"Subtype\", Name.get(\"Text\"));\n      const replyRef = Ref.get(820, 0);\n      const replyDict = new Dict();\n      replyDict.set(\"Type\", Name.get(\"Annot\"));\n      replyDict.set(\"Subtype\", Name.get(\"Text\"));\n      replyDict.set(\"IRT\", annotationRef);\n      const xref = new XRefMock([{\n        ref: annotationRef,\n        data: annotationDict\n      }, {\n        ref: replyRef,\n        data: replyDict\n      }]);\n      annotationDict.assignXref(xref);\n      replyDict.assignXref(xref);\n      const {\n        data\n      } = await AnnotationFactory.create(xref, replyRef, pdfManagerMock, idFactoryMock);\n      expect(data.inReplyTo).toEqual(annotationRef.toString());\n      expect(data.replyType).toEqual(\"R\");\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should parse IRT/RT for a group type","suites":["annotation","MarkupAnnotation"],"line":508,"updatePoint":{"line":508,"column":44,"index":17910},"code":"    it(\"should parse IRT/RT for a group type\", async function () {\n      const annotationRef = Ref.get(819, 0);\n      const annotationDict = new Dict();\n      annotationDict.set(\"Type\", Name.get(\"Annot\"));\n      annotationDict.set(\"Subtype\", Name.get(\"Text\"));\n      annotationDict.set(\"T\", \"ParentTitle\");\n      annotationDict.set(\"Contents\", \"ParentText\");\n      annotationDict.set(\"CreationDate\", \"D:20180423\");\n      annotationDict.set(\"M\", \"D:20190423\");\n      annotationDict.set(\"C\", [0, 0, 1]);\n      const popupRef = Ref.get(820, 0);\n      const popupDict = new Dict();\n      popupDict.set(\"Type\", Name.get(\"Annot\"));\n      popupDict.set(\"Subtype\", Name.get(\"Popup\"));\n      popupDict.set(\"Parent\", annotationRef);\n      annotationDict.set(\"Popup\", popupRef);\n      const replyRef = Ref.get(821, 0);\n      const replyDict = new Dict();\n      replyDict.set(\"Type\", Name.get(\"Annot\"));\n      replyDict.set(\"Subtype\", Name.get(\"Text\"));\n      replyDict.set(\"IRT\", annotationRef);\n      replyDict.set(\"RT\", Name.get(\"Group\"));\n      replyDict.set(\"T\", \"ReplyTitle\");\n      replyDict.set(\"Contents\", \"ReplyText\");\n      replyDict.set(\"CreationDate\", \"D:20180523\");\n      replyDict.set(\"M\", \"D:20190523\");\n      replyDict.set(\"C\", [0.4]);\n      const xref = new XRefMock([{\n        ref: annotationRef,\n        data: annotationDict\n      }, {\n        ref: popupRef,\n        data: popupDict\n      }, {\n        ref: replyRef,\n        data: replyDict\n      }]);\n      annotationDict.assignXref(xref);\n      popupDict.assignXref(xref);\n      replyDict.assignXref(xref);\n      const {\n        data\n      } = await AnnotationFactory.create(xref, replyRef, pdfManagerMock, idFactoryMock);\n      expect(data.inReplyTo).toEqual(annotationRef.toString());\n      expect(data.replyType).toEqual(\"Group\");\n      expect(data.titleObj).toEqual({\n        str: \"ParentTitle\",\n        dir: \"ltr\"\n      });\n      expect(data.contentsObj).toEqual({\n        str: \"ParentText\",\n        dir: \"ltr\"\n      });\n      expect(data.creationDate).toEqual(\"D:20180423\");\n      expect(data.modificationDate).toEqual(\"D:20190423\");\n      expect(data.color).toEqual(new Uint8ClampedArray([0, 0, 255]));\n      expect(data.popupRef).toEqual(\"820R\");\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should parse IRT/RT for a reply type","suites":["annotation","MarkupAnnotation"],"line":566,"updatePoint":{"line":566,"column":44,"index":20133},"code":"    it(\"should parse IRT/RT for a reply type\", async function () {\n      const annotationRef = Ref.get(819, 0);\n      const annotationDict = new Dict();\n      annotationDict.set(\"Type\", Name.get(\"Annot\"));\n      annotationDict.set(\"Subtype\", Name.get(\"Text\"));\n      annotationDict.set(\"T\", \"ParentTitle\");\n      annotationDict.set(\"Contents\", \"ParentText\");\n      annotationDict.set(\"CreationDate\", \"D:20180423\");\n      annotationDict.set(\"M\", \"D:20190423\");\n      annotationDict.set(\"C\", [0, 0, 1]);\n      const popupRef = Ref.get(820, 0);\n      const popupDict = new Dict();\n      popupDict.set(\"Type\", Name.get(\"Annot\"));\n      popupDict.set(\"Subtype\", Name.get(\"Popup\"));\n      popupDict.set(\"Parent\", annotationRef);\n      annotationDict.set(\"Popup\", popupRef);\n      const replyRef = Ref.get(821, 0);\n      const replyDict = new Dict();\n      replyDict.set(\"Type\", Name.get(\"Annot\"));\n      replyDict.set(\"Subtype\", Name.get(\"Text\"));\n      replyDict.set(\"IRT\", annotationRef);\n      replyDict.set(\"RT\", Name.get(\"R\"));\n      replyDict.set(\"T\", \"ReplyTitle\");\n      replyDict.set(\"Contents\", \"ReplyText\");\n      replyDict.set(\"CreationDate\", \"D:20180523\");\n      replyDict.set(\"M\", \"D:20190523\");\n      replyDict.set(\"C\", [0.4]);\n      const xref = new XRefMock([{\n        ref: annotationRef,\n        data: annotationDict\n      }, {\n        ref: popupRef,\n        data: popupDict\n      }, {\n        ref: replyRef,\n        data: replyDict\n      }]);\n      annotationDict.assignXref(xref);\n      popupDict.assignXref(xref);\n      replyDict.assignXref(xref);\n      const {\n        data\n      } = await AnnotationFactory.create(xref, replyRef, pdfManagerMock, idFactoryMock);\n      expect(data.inReplyTo).toEqual(annotationRef.toString());\n      expect(data.replyType).toEqual(\"R\");\n      expect(data.titleObj).toEqual({\n        str: \"ReplyTitle\",\n        dir: \"ltr\"\n      });\n      expect(data.contentsObj).toEqual({\n        str: \"ReplyText\",\n        dir: \"ltr\"\n      });\n      expect(data.creationDate).toEqual(\"D:20180523\");\n      expect(data.modificationDate).toEqual(\"D:20190523\");\n      expect(data.color).toEqual(new Uint8ClampedArray([102, 102, 102]));\n      expect(data.popupRef).toEqual(null);\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should not parse state model and state when not defined","suites":["annotation","TextAnnotation"],"line":626,"updatePoint":{"line":626,"column":63,"index":22416},"code":"    it(\"should not parse state model and state when not defined\", async function () {\n      const annotationRef = Ref.get(819, 0);\n      const annotationDict = new Dict();\n      annotationDict.set(\"Type\", Name.get(\"Annot\"));\n      annotationDict.set(\"Subtype\", Name.get(\"Text\"));\n      annotationDict.set(\"Contents\", \"TestText\");\n      const replyRef = Ref.get(820, 0);\n      const replyDict = new Dict();\n      replyDict.set(\"Type\", Name.get(\"Annot\"));\n      replyDict.set(\"Subtype\", Name.get(\"Text\"));\n      replyDict.set(\"IRT\", annotationRef);\n      replyDict.set(\"RT\", Name.get(\"R\"));\n      replyDict.set(\"Contents\", \"ReplyText\");\n      const xref = new XRefMock([{\n        ref: annotationRef,\n        data: annotationDict\n      }, {\n        ref: replyRef,\n        data: replyDict\n      }]);\n      annotationDict.assignXref(xref);\n      replyDict.assignXref(xref);\n      const {\n        data\n      } = await AnnotationFactory.create(xref, replyRef, pdfManagerMock, idFactoryMock);\n      expect(data.stateModel).toBeNull();\n      expect(data.state).toBeNull();\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should correctly parse state model and state when defined","suites":["annotation","TextAnnotation"],"line":654,"updatePoint":{"line":654,"column":65,"index":23490},"code":"    it(\"should correctly parse state model and state when defined\", async function () {\n      const annotationRef = Ref.get(819, 0);\n      const annotationDict = new Dict();\n      annotationDict.set(\"Type\", Name.get(\"Annot\"));\n      annotationDict.set(\"Subtype\", Name.get(\"Text\"));\n      const replyRef = Ref.get(820, 0);\n      const replyDict = new Dict();\n      replyDict.set(\"Type\", Name.get(\"Annot\"));\n      replyDict.set(\"Subtype\", Name.get(\"Text\"));\n      replyDict.set(\"IRT\", annotationRef);\n      replyDict.set(\"RT\", Name.get(\"R\"));\n      replyDict.set(\"StateModel\", \"Review\");\n      replyDict.set(\"State\", \"Rejected\");\n      const xref = new XRefMock([{\n        ref: annotationRef,\n        data: annotationDict\n      }, {\n        ref: replyRef,\n        data: replyDict\n      }]);\n      annotationDict.assignXref(xref);\n      replyDict.assignXref(xref);\n      const {\n        data\n      } = await AnnotationFactory.create(xref, replyRef, pdfManagerMock, idFactoryMock);\n      expect(data.stateModel).toEqual(\"Review\");\n      expect(data.state).toEqual(\"Rejected\");\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should correctly parse a URI action","suites":["annotation","LinkAnnotation"],"line":684,"updatePoint":{"line":684,"column":43,"index":24598},"code":"    it(\"should correctly parse a URI action\", async function () {\n      const actionDict = new Dict();\n      actionDict.set(\"Type\", Name.get(\"Action\"));\n      actionDict.set(\"S\", Name.get(\"URI\"));\n      actionDict.set(\"URI\", \"http://www.ctan.org/tex-archive/info/lshort\");\n      const annotationDict = new Dict();\n      annotationDict.set(\"Type\", Name.get(\"Annot\"));\n      annotationDict.set(\"Subtype\", Name.get(\"Link\"));\n      annotationDict.set(\"A\", actionDict);\n      const annotationRef = Ref.get(820, 0);\n      const xref = new XRefMock([{\n        ref: annotationRef,\n        data: annotationDict\n      }]);\n      const {\n        data\n      } = await AnnotationFactory.create(xref, annotationRef, pdfManagerMock, idFactoryMock);\n      expect(data.annotationType).toEqual(AnnotationType.LINK);\n      expect(data.url).toEqual(\"http://www.ctan.org/tex-archive/info/lshort\");\n      expect(data.unsafeUrl).toEqual(\"http://www.ctan.org/tex-archive/info/lshort\");\n      expect(data.dest).toBeUndefined();\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should correctly parse a GoTo action","suites":["annotation","LinkAnnotation"],"line":752,"updatePoint":{"line":752,"column":44,"index":27811},"code":"    it(\"should correctly parse a GoTo action\", async function () {\n      const actionDict = new Dict();\n      actionDict.set(\"Type\", Name.get(\"Action\"));\n      actionDict.set(\"S\", Name.get(\"GoTo\"));\n      actionDict.set(\"D\", \"page.157\");\n      const annotationDict = new Dict();\n      annotationDict.set(\"Type\", Name.get(\"Annot\"));\n      annotationDict.set(\"Subtype\", Name.get(\"Link\"));\n      annotationDict.set(\"A\", actionDict);\n      const annotationRef = Ref.get(798, 0);\n      const xref = new XRefMock([{\n        ref: annotationRef,\n        data: annotationDict\n      }]);\n      const {\n        data\n      } = await AnnotationFactory.create(xref, annotationRef, pdfManagerMock, idFactoryMock);\n      expect(data.annotationType).toEqual(AnnotationType.LINK);\n      expect(data.url).toBeUndefined();\n      expect(data.unsafeUrl).toBeUndefined();\n      expect(data.dest).toEqual(\"page.157\");\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should correctly parse a GoToR action, with named destination","suites":["annotation","LinkAnnotation"],"line":825,"updatePoint":{"line":825,"column":69,"index":31099},"code":"    it(\"should correctly parse a GoToR action, with named destination\", async function () {\n      const actionDict = new Dict();\n      actionDict.set(\"Type\", Name.get(\"Action\"));\n      actionDict.set(\"S\", Name.get(\"GoToR\"));\n      actionDict.set(\"F\", \"http://www.example.com/test.pdf\");\n      actionDict.set(\"D\", \"15\");\n      const annotationDict = new Dict();\n      annotationDict.set(\"Type\", Name.get(\"Annot\"));\n      annotationDict.set(\"Subtype\", Name.get(\"Link\"));\n      annotationDict.set(\"A\", actionDict);\n      const annotationRef = Ref.get(495, 0);\n      const xref = new XRefMock([{\n        ref: annotationRef,\n        data: annotationDict\n      }]);\n      const {\n        data\n      } = await AnnotationFactory.create(xref, annotationRef, pdfManagerMock, idFactoryMock);\n      expect(data.annotationType).toEqual(AnnotationType.LINK);\n      expect(data.url).toEqual(\"http://www.example.com/test.pdf#15\");\n      expect(data.unsafeUrl).toEqual(\"http://www.example.com/test.pdf#15\");\n      expect(data.dest).toBeUndefined();\n      expect(data.newWindow).toBeFalsy();\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should correctly parse a GoToR action, with explicit destination array","suites":["annotation","LinkAnnotation"],"line":849,"updatePoint":{"line":849,"column":78,"index":32190},"code":"    it(\"should correctly parse a GoToR action, with explicit destination array\", async function () {\n      const actionDict = new Dict();\n      actionDict.set(\"Type\", Name.get(\"Action\"));\n      actionDict.set(\"S\", Name.get(\"GoToR\"));\n      actionDict.set(\"F\", \"http://www.example.com/test.pdf\");\n      actionDict.set(\"D\", [14, Name.get(\"XYZ\"), null, 298.043, null]);\n      const annotationDict = new Dict();\n      annotationDict.set(\"Type\", Name.get(\"Annot\"));\n      annotationDict.set(\"Subtype\", Name.get(\"Link\"));\n      annotationDict.set(\"A\", actionDict);\n      const annotationRef = Ref.get(489, 0);\n      const xref = new XRefMock([{\n        ref: annotationRef,\n        data: annotationDict\n      }]);\n      const {\n        data\n      } = await AnnotationFactory.create(xref, annotationRef, pdfManagerMock, idFactoryMock);\n      expect(data.annotationType).toEqual(AnnotationType.LINK);\n      expect(data.url).toEqual(new URL(\"http://www.example.com/test.pdf#\" + '[14,{\"name\":\"XYZ\"},null,298.043,null]').href);\n      expect(data.unsafeUrl).toEqual(\"http://www.example.com/test.pdf#\" + '[14,{\"name\":\"XYZ\"},null,298.043,null]');\n      expect(data.dest).toBeUndefined();\n      expect(data.newWindow).toBeFalsy();\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should correctly parse a Named action","suites":["annotation","LinkAnnotation"],"line":959,"updatePoint":{"line":959,"column":45,"index":37309},"code":"    it(\"should correctly parse a Named action\", async function () {\n      const actionDict = new Dict();\n      actionDict.set(\"Type\", Name.get(\"Action\"));\n      actionDict.set(\"S\", Name.get(\"Named\"));\n      actionDict.set(\"N\", Name.get(\"GoToPage\"));\n      const annotationDict = new Dict();\n      annotationDict.set(\"Type\", Name.get(\"Annot\"));\n      annotationDict.set(\"Subtype\", Name.get(\"Link\"));\n      annotationDict.set(\"A\", actionDict);\n      const annotationRef = Ref.get(12, 0);\n      const xref = new XRefMock([{\n        ref: annotationRef,\n        data: annotationDict\n      }]);\n      const {\n        data\n      } = await AnnotationFactory.create(xref, annotationRef, pdfManagerMock, idFactoryMock);\n      expect(data.annotationType).toEqual(AnnotationType.LINK);\n      expect(data.url).toBeUndefined();\n      expect(data.unsafeUrl).toBeUndefined();\n      expect(data.action).toEqual(\"GoToPage\");\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should correctly parse a simple Dest","suites":["annotation","LinkAnnotation"],"line":981,"updatePoint":{"line":981,"column":44,"index":38223},"code":"    it(\"should correctly parse a simple Dest\", async function () {\n      const annotationDict = new Dict();\n      annotationDict.set(\"Type\", Name.get(\"Annot\"));\n      annotationDict.set(\"Subtype\", Name.get(\"Link\"));\n      annotationDict.set(\"Dest\", Name.get(\"LI0\"));\n      const annotationRef = Ref.get(583, 0);\n      const xref = new XRefMock([{\n        ref: annotationRef,\n        data: annotationDict\n      }]);\n      const {\n        data\n      } = await AnnotationFactory.create(xref, annotationRef, pdfManagerMock, idFactoryMock);\n      expect(data.annotationType).toEqual(AnnotationType.LINK);\n      expect(data.url).toBeUndefined();\n      expect(data.unsafeUrl).toBeUndefined();\n      expect(data.dest).toEqual(\"LI0\");\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should correctly parse a simple Dest, with explicit destination array","suites":["annotation","LinkAnnotation"],"line":999,"updatePoint":{"line":999,"column":77,"index":38990},"code":"    it(\"should correctly parse a simple Dest, with explicit destination array\", async function () {\n      const annotationDict = new Dict();\n      annotationDict.set(\"Type\", Name.get(\"Annot\"));\n      annotationDict.set(\"Subtype\", Name.get(\"Link\"));\n      annotationDict.set(\"Dest\", [Ref.get(17, 0), Name.get(\"XYZ\"), 0, 841.89, null]);\n      const annotationRef = Ref.get(10, 0);\n      const xref = new XRefMock([{\n        ref: annotationRef,\n        data: annotationDict\n      }]);\n      const {\n        data\n      } = await AnnotationFactory.create(xref, annotationRef, pdfManagerMock, idFactoryMock);\n      expect(data.annotationType).toEqual(AnnotationType.LINK);\n      expect(data.url).toBeUndefined();\n      expect(data.unsafeUrl).toBeUndefined();\n      expect(data.dest).toEqual([Ref.get(17, 0), Name.get(\"XYZ\"), 0, 841.89, null]);\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should not set quadpoints if not defined","suites":["annotation","LinkAnnotation"],"line":1041,"updatePoint":{"line":1041,"column":48,"index":40908},"code":"    it(\"should not set quadpoints if not defined\", async function () {\n      const annotationDict = new Dict();\n      annotationDict.set(\"Type\", Name.get(\"Annot\"));\n      annotationDict.set(\"Subtype\", Name.get(\"Link\"));\n      const annotationRef = Ref.get(121, 0);\n      const xref = new XRefMock([{\n        ref: annotationRef,\n        data: annotationDict\n      }]);\n      const {\n        data\n      } = await AnnotationFactory.create(xref, annotationRef, pdfManagerMock, idFactoryMock);\n      expect(data.annotationType).toEqual(AnnotationType.LINK);\n      expect(data.quadPoints).toBeUndefined();\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should set quadpoints if defined","suites":["annotation","LinkAnnotation"],"line":1056,"updatePoint":{"line":1056,"column":40,"index":41508},"code":"    it(\"should set quadpoints if defined\", async function () {\n      const annotationDict = new Dict();\n      annotationDict.set(\"Type\", Name.get(\"Annot\"));\n      annotationDict.set(\"Subtype\", Name.get(\"Link\"));\n      annotationDict.set(\"Rect\", [10, 10, 20, 20]);\n      annotationDict.set(\"QuadPoints\", [10, 20, 20, 20, 10, 10, 20, 10]);\n      const annotationRef = Ref.get(121, 0);\n      const xref = new XRefMock([{\n        ref: annotationRef,\n        data: annotationDict\n      }]);\n      const {\n        data\n      } = await AnnotationFactory.create(xref, annotationRef, pdfManagerMock, idFactoryMock);\n      expect(data.annotationType).toEqual(AnnotationType.LINK);\n      expect(data.quadPoints).toEqual([[{\n        x: 10,\n        y: 20\n      }, {\n        x: 20,\n        y: 20\n      }, {\n        x: 10,\n        y: 10\n      }, {\n        x: 20,\n        y: 10\n      }]]);\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should handle unknown field names","suites":["annotation","WidgetAnnotation"],"line":1096,"updatePoint":{"line":1096,"column":41,"index":42693},"code":"    it(\"should handle unknown field names\", async function () {\n      const widgetRef = Ref.get(20, 0);\n      const xref = new XRefMock([{\n        ref: widgetRef,\n        data: widgetDict\n      }]);\n      const {\n        data\n      } = await AnnotationFactory.create(xref, widgetRef, pdfManagerMock, idFactoryMock);\n      expect(data.annotationType).toEqual(AnnotationType.WIDGET);\n      expect(data.fieldName).toEqual(\"\");\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should construct the field name when there are no ancestors","suites":["annotation","WidgetAnnotation"],"line":1108,"updatePoint":{"line":1108,"column":67,"index":43151},"code":"    it(\"should construct the field name when there are no ancestors\", async function () {\n      widgetDict.set(\"T\", \"foo\");\n      const widgetRef = Ref.get(21, 0);\n      const xref = new XRefMock([{\n        ref: widgetRef,\n        data: widgetDict\n      }]);\n      const {\n        data\n      } = await AnnotationFactory.create(xref, widgetRef, pdfManagerMock, idFactoryMock);\n      expect(data.annotationType).toEqual(AnnotationType.WIDGET);\n      expect(data.fieldName).toEqual(\"foo\");\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should construct the field name when there are ancestors","suites":["annotation","WidgetAnnotation"],"line":1121,"updatePoint":{"line":1121,"column":64,"index":43643},"code":"    it(\"should construct the field name when there are ancestors\", async function () {\n      const firstParent = new Dict();\n      firstParent.set(\"T\", \"foo\");\n      const secondParent = new Dict();\n      secondParent.set(\"Parent\", firstParent);\n      secondParent.set(\"T\", \"bar\");\n      widgetDict.set(\"Parent\", secondParent);\n      widgetDict.set(\"T\", \"baz\");\n      const widgetRef = Ref.get(22, 0);\n      const xref = new XRefMock([{\n        ref: widgetRef,\n        data: widgetDict\n      }]);\n      const {\n        data\n      } = await AnnotationFactory.create(xref, widgetRef, pdfManagerMock, idFactoryMock);\n      expect(data.annotationType).toEqual(AnnotationType.WIDGET);\n      expect(data.fieldName).toEqual(\"foo.bar.baz\");\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should handle unknown text alignment, maximum length and flags","suites":["annotation","TextWidgetAnnotation"],"line":1210,"updatePoint":{"line":1210,"column":70,"index":47256},"code":"    it(\"should handle unknown text alignment, maximum length and flags\", async function () {\n      textWidgetDict.set(\"DV\", \"foo\");\n      const textWidgetRef = Ref.get(124, 0);\n      const xref = new XRefMock([{\n        ref: textWidgetRef,\n        data: textWidgetDict\n      }]);\n      const {\n        data\n      } = await AnnotationFactory.create(xref, textWidgetRef, pdfManagerMock, idFactoryMock);\n      expect(data.annotationType).toEqual(AnnotationType.WIDGET);\n      expect(data.textAlignment).toEqual(null);\n      expect(data.maxLen).toEqual(0);\n      expect(data.readOnly).toEqual(false);\n      expect(data.hidden).toEqual(false);\n      expect(data.multiLine).toEqual(false);\n      expect(data.comb).toEqual(false);\n      expect(data.defaultFieldValue).toEqual(\"foo\");\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should not set invalid text alignment, maximum length and flags","suites":["annotation","TextWidgetAnnotation"],"line":1229,"updatePoint":{"line":1229,"column":71,"index":48042},"code":"    it(\"should not set invalid text alignment, maximum length and flags\", async function () {\n      textWidgetDict.set(\"Q\", \"center\");\n      textWidgetDict.set(\"MaxLen\", \"five\");\n      textWidgetDict.set(\"Ff\", \"readonly\");\n      const textWidgetRef = Ref.get(43, 0);\n      const xref = new XRefMock([{\n        ref: textWidgetRef,\n        data: textWidgetDict\n      }]);\n      const {\n        data\n      } = await AnnotationFactory.create(xref, textWidgetRef, pdfManagerMock, idFactoryMock);\n      expect(data.annotationType).toEqual(AnnotationType.WIDGET);\n      expect(data.textAlignment).toEqual(null);\n      expect(data.maxLen).toEqual(0);\n      expect(data.readOnly).toEqual(false);\n      expect(data.hidden).toEqual(false);\n      expect(data.multiLine).toEqual(false);\n      expect(data.comb).toEqual(false);\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should set valid text alignment, maximum length and flags","suites":["annotation","TextWidgetAnnotation"],"line":1249,"updatePoint":{"line":1249,"column":65,"index":48858},"code":"    it(\"should set valid text alignment, maximum length and flags\", async function () {\n      textWidgetDict.set(\"Q\", 1);\n      textWidgetDict.set(\"MaxLen\", 20);\n      textWidgetDict.set(\"Ff\", AnnotationFieldFlag.READONLY + AnnotationFieldFlag.MULTILINE);\n      const textWidgetRef = Ref.get(84, 0);\n      const xref = new XRefMock([{\n        ref: textWidgetRef,\n        data: textWidgetDict\n      }]);\n      const {\n        data\n      } = await AnnotationFactory.create(xref, textWidgetRef, pdfManagerMock, idFactoryMock);\n      expect(data.annotationType).toEqual(AnnotationType.WIDGET);\n      expect(data.textAlignment).toEqual(1);\n      expect(data.maxLen).toEqual(20);\n      expect(data.readOnly).toEqual(true);\n      expect(data.hidden).toEqual(false);\n      expect(data.multiLine).toEqual(true);\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should reject comb fields without a maximum length","suites":["annotation","TextWidgetAnnotation"],"line":1268,"updatePoint":{"line":1268,"column":58,"index":49662},"code":"    it(\"should reject comb fields without a maximum length\", async function () {\n      textWidgetDict.set(\"Ff\", AnnotationFieldFlag.COMB);\n      const textWidgetRef = Ref.get(46, 0);\n      const xref = new XRefMock([{\n        ref: textWidgetRef,\n        data: textWidgetDict\n      }]);\n      const {\n        data\n      } = await AnnotationFactory.create(xref, textWidgetRef, pdfManagerMock, idFactoryMock);\n      expect(data.annotationType).toEqual(AnnotationType.WIDGET);\n      expect(data.comb).toEqual(false);\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should accept comb fields with a maximum length","suites":["annotation","TextWidgetAnnotation"],"line":1281,"updatePoint":{"line":1281,"column":55,"index":50180},"code":"    it(\"should accept comb fields with a maximum length\", async function () {\n      textWidgetDict.set(\"MaxLen\", 20);\n      textWidgetDict.set(\"Ff\", AnnotationFieldFlag.COMB);\n      const textWidgetRef = Ref.get(46, 0);\n      const xref = new XRefMock([{\n        ref: textWidgetRef,\n        data: textWidgetDict\n      }]);\n      const {\n        data\n      } = await AnnotationFactory.create(xref, textWidgetRef, pdfManagerMock, idFactoryMock);\n      expect(data.annotationType).toEqual(AnnotationType.WIDGET);\n      expect(data.comb).toEqual(true);\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should only accept comb fields when the flags are valid","suites":["annotation","TextWidgetAnnotation"],"line":1295,"updatePoint":{"line":1295,"column":63,"index":50745},"code":"    it(\"should only accept comb fields when the flags are valid\", async function () {\n      const invalidFieldFlags = [AnnotationFieldFlag.MULTILINE, AnnotationFieldFlag.PASSWORD, AnnotationFieldFlag.FILESELECT];\n\n      // Start with all invalid flags set and remove them one by one.\n      // The field may only use combs when all invalid flags are unset.\n      let flags = AnnotationFieldFlag.COMB + AnnotationFieldFlag.MULTILINE + AnnotationFieldFlag.PASSWORD + AnnotationFieldFlag.FILESELECT;\n      let promise = Promise.resolve();\n      for (let i = 0, ii = invalidFieldFlags.length; i <= ii; i++) {\n        promise = promise.then(() => {\n          textWidgetDict.set(\"MaxLen\", 20);\n          textWidgetDict.set(\"Ff\", flags);\n          const textWidgetRef = Ref.get(93, 0);\n          const xref = new XRefMock([{\n            ref: textWidgetRef,\n            data: textWidgetDict\n          }]);\n          return AnnotationFactory.create(xref, textWidgetRef, pdfManagerMock, idFactoryMock).then(({\n            data\n          }) => {\n            expect(data.annotationType).toEqual(AnnotationType.WIDGET);\n            const valid = invalidFieldFlags.length === 0;\n            expect(data.comb).toEqual(valid);\n\n            // Remove the last invalid flag for the next iteration.\n            if (!valid) {\n              flags -= invalidFieldFlags.pop();\n            }\n          });\n        });\n      }\n      await promise;\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should render regular text for printing","suites":["annotation","TextWidgetAnnotation"],"line":1327,"updatePoint":{"line":1327,"column":47,"index":52159},"code":"    it(\"should render regular text for printing\", async function () {\n      const textWidgetRef = Ref.get(271, 0);\n      const xref = new XRefMock([{\n        ref: textWidgetRef,\n        data: textWidgetDict\n      }, helvRefObj]);\n      const task = new WorkerTask(\"test print\");\n      partialEvaluator.xref = xref;\n      const annotation = await AnnotationFactory.create(xref, textWidgetRef, pdfManagerMock, idFactoryMock);\n      const annotationStorage = new Map();\n      annotationStorage.set(annotation.data.id, {\n        value: \"test\\\\print\"\n      });\n      const appearance = await annotation._getAppearance(partialEvaluator, task, RenderingIntentFlag.PRINT, annotationStorage);\n      expect(appearance).toEqual(\"/Tx BMC q BT /Helv 5 Tf 1 0 0 1 0 0 Tm\" + \" 2 3.07 Td (test\\\\\\\\print) Tj ET Q EMC\");\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should render regular text in Japanese for printing","suites":["annotation","TextWidgetAnnotation"],"line":1343,"updatePoint":{"line":1343,"column":59,"index":52982},"code":"    it(\"should render regular text in Japanese for printing\", async function () {\n      textWidgetDict.get(\"DR\").get(\"Font\").set(\"Goth\", gothRefObj.ref);\n      textWidgetDict.set(\"DA\", \"/Goth 5 Tf\");\n      const textWidgetRef = Ref.get(271, 0);\n      const xref = new XRefMock([{\n        ref: textWidgetRef,\n        data: textWidgetDict\n      }, gothRefObj]);\n      const task = new WorkerTask(\"test print\");\n      partialEvaluator.xref = xref;\n      const annotation = await AnnotationFactory.create(xref, textWidgetRef, pdfManagerMock, idFactoryMock);\n      const annotationStorage = new Map();\n      annotationStorage.set(annotation.data.id, {\n        value: \"こんにちは世界の\"\n      });\n      const appearance = await annotation._getAppearance(partialEvaluator, task, RenderingIntentFlag.PRINT, annotationStorage);\n      const utf16String = \"\\x30\\x53\\x30\\x93\\x30\\x6b\\x30\\x61\\x30\\x6f\\x4e\\x16\\x75\\x4c\\x30\\x6e\";\n      expect(appearance).toEqual(\"/Tx BMC q BT /Goth 5 Tf 1 0 0 1 0 0 Tm\" + ` 2 3.07 Td (${utf16String}) Tj ET Q EMC`);\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should render regular text for printing using normal appearance","suites":["annotation","TextWidgetAnnotation"],"line":1362,"updatePoint":{"line":1362,"column":71,"index":54027},"code":"    it(\"should render regular text for printing using normal appearance\", async function () {\n      const textWidgetRef = Ref.get(271, 0);\n      const appearanceStatesDict = new Dict();\n      const normalAppearanceDict = new Dict();\n      const normalAppearanceStream = new StringStream(\"0.1 0.2 0.3 rg\");\n      normalAppearanceStream.dict = normalAppearanceDict;\n      appearanceStatesDict.set(\"N\", normalAppearanceStream);\n      textWidgetDict.set(\"AP\", appearanceStatesDict);\n      const xref = new XRefMock([{\n        ref: textWidgetRef,\n        data: textWidgetDict\n      }, helvRefObj]);\n      const task = new WorkerTask(\"test print\");\n      partialEvaluator.xref = xref;\n      const annotation = await AnnotationFactory.create(xref, textWidgetRef, pdfManagerMock, idFactoryMock);\n      const annotationStorage = new Map();\n      const {\n        opList\n      } = await annotation.getOperatorList(partialEvaluator, task, RenderingIntentFlag.PRINT, false, annotationStorage);\n      expect(opList.argsArray.length).toEqual(3);\n      expect(opList.fnArray).toEqual([OPS.beginAnnotation, OPS.setFillRGBColor, OPS.endAnnotation]);\n      expect(opList.argsArray[0]).toEqual([\"271R\", [0, 0, 32, 10], [32, 0, 0, 10, 0, 0], [1, 0, 0, 1, 0, 0], false]);\n      expect(opList.argsArray[1]).toEqual(new Uint8ClampedArray([26, 51, 76]));\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should render auto-sized text for printing","suites":["annotation","TextWidgetAnnotation"],"line":1386,"updatePoint":{"line":1386,"column":50,"index":55344},"code":"    it(\"should render auto-sized text for printing\", async function () {\n      textWidgetDict.set(\"DA\", \"/Helv 0 Tf\");\n      const textWidgetRef = Ref.get(271, 0);\n      const xref = new XRefMock([{\n        ref: textWidgetRef,\n        data: textWidgetDict\n      }, helvRefObj]);\n      const task = new WorkerTask(\"test print\");\n      partialEvaluator.xref = xref;\n      const annotation = await AnnotationFactory.create(xref, textWidgetRef, pdfManagerMock, idFactoryMock);\n      const annotationStorage = new Map();\n      annotationStorage.set(annotation.data.id, {\n        value: \"test (print)\"\n      });\n      const appearance = await annotation._getAppearance(partialEvaluator, task, RenderingIntentFlag.PRINT, annotationStorage);\n      expect(appearance).toEqual(\"/Tx BMC q BT /Helv 5.92 Tf 0 g 1 0 0 1 0 0 Tm\" + \" 2 3.07 Td (test \\\\(print\\\\)) Tj ET Q EMC\");\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should render auto-sized text in Japanese for printing","suites":["annotation","TextWidgetAnnotation"],"line":1403,"updatePoint":{"line":1403,"column":62,"index":56227},"code":"    it(\"should render auto-sized text in Japanese for printing\", async function () {\n      textWidgetDict.get(\"DR\").get(\"Font\").set(\"Goth\", gothRefObj.ref);\n      textWidgetDict.set(\"DA\", \"/Goth 0 Tf\");\n      const textWidgetRef = Ref.get(271, 0);\n      const xref = new XRefMock([{\n        ref: textWidgetRef,\n        data: textWidgetDict\n      }, gothRefObj]);\n      const task = new WorkerTask(\"test print\");\n      partialEvaluator.xref = xref;\n      const annotation = await AnnotationFactory.create(xref, textWidgetRef, pdfManagerMock, idFactoryMock);\n      const annotationStorage = new Map();\n      annotationStorage.set(annotation.data.id, {\n        value: \"こんにちは世界の\"\n      });\n      const appearance = await annotation._getAppearance(partialEvaluator, task, RenderingIntentFlag.PRINT, annotationStorage);\n      const utf16String = \"\\x30\\x53\\x30\\x93\\x30\\x6b\\x30\\x61\\x30\\x6f\\x4e\\x16\\x75\\x4c\\x30\\x6e\";\n      expect(appearance).toEqual(\"/Tx BMC q BT /Goth 5.92 Tf 0 g 1 0 0 1 0 0 Tm\" + ` 2 3.07 Td (${utf16String}) Tj ET Q EMC`);\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should not render a password for printing","suites":["annotation","TextWidgetAnnotation"],"line":1422,"updatePoint":{"line":1422,"column":49,"index":57257},"code":"    it(\"should not render a password for printing\", async function () {\n      textWidgetDict.set(\"Ff\", AnnotationFieldFlag.PASSWORD);\n      const textWidgetRef = Ref.get(271, 0);\n      const xref = new XRefMock([{\n        ref: textWidgetRef,\n        data: textWidgetDict\n      }, helvRefObj]);\n      const task = new WorkerTask(\"test print\");\n      partialEvaluator.xref = xref;\n      const annotation = await AnnotationFactory.create(xref, textWidgetRef, pdfManagerMock, idFactoryMock);\n      const annotationStorage = new Map();\n      annotationStorage.set(annotation.data.id, {\n        value: \"mypassword\"\n      });\n      const appearance = await annotation._getAppearance(partialEvaluator, task, RenderingIntentFlag.PRINT, annotationStorage);\n      expect(appearance).toEqual(null);\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should render multiline text for printing","suites":["annotation","TextWidgetAnnotation"],"line":1439,"updatePoint":{"line":1439,"column":49,"index":58052},"code":"    it(\"should render multiline text for printing\", async function () {\n      textWidgetDict.set(\"Ff\", AnnotationFieldFlag.MULTILINE);\n      const textWidgetRef = Ref.get(271, 0);\n      const xref = new XRefMock([{\n        ref: textWidgetRef,\n        data: textWidgetDict\n      }, helvRefObj]);\n      const task = new WorkerTask(\"test print\");\n      partialEvaluator.xref = xref;\n      const annotation = await AnnotationFactory.create(xref, textWidgetRef, pdfManagerMock, idFactoryMock);\n      const annotationStorage = new Map();\n      annotationStorage.set(annotation.data.id, {\n        value: \"a aa aaa aaaa aaaaa aaaaaa \" + \"pneumonoultramicroscopicsilicovolcanoconiosis\"\n      });\n      const appearance = await annotation._getAppearance(partialEvaluator, task, RenderingIntentFlag.PRINT, annotationStorage);\n      expect(appearance).toEqual(\"/Tx BMC q BT /Helv 5 Tf 1 0 0 1 0 10 Tm \" + \"2 -6.93 Td (a aa aaa ) Tj\\n\" + \"0 -8 Td (aaaa aaaaa ) Tj\\n\" + \"0 -8 Td (aaaaaa ) Tj\\n\" + \"0 -8 Td (pneumonoultr) Tj\\n\" + \"0 -8 Td (amicroscopi) Tj\\n\" + \"0 -8 Td (csilicovolca) Tj\\n\" + \"0 -8 Td (noconiosis) Tj ET Q EMC\");\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should render multiline text in Japanese for printing","suites":["annotation","TextWidgetAnnotation"],"line":1456,"updatePoint":{"line":1456,"column":61,"index":59187},"code":"    it(\"should render multiline text in Japanese for printing\", async function () {\n      textWidgetDict.set(\"Ff\", AnnotationFieldFlag.MULTILINE);\n      textWidgetDict.get(\"DR\").get(\"Font\").set(\"Goth\", gothRefObj.ref);\n      textWidgetDict.set(\"DA\", \"/Goth 5 Tf\");\n      const textWidgetRef = Ref.get(271, 0);\n      const xref = new XRefMock([{\n        ref: textWidgetRef,\n        data: textWidgetDict\n      }, gothRefObj]);\n      const task = new WorkerTask(\"test print\");\n      partialEvaluator.xref = xref;\n      const annotation = await AnnotationFactory.create(xref, textWidgetRef, pdfManagerMock, idFactoryMock);\n      const annotationStorage = new Map();\n      annotationStorage.set(annotation.data.id, {\n        value: \"こんにちは世界の\"\n      });\n      const appearance = await annotation._getAppearance(partialEvaluator, task, RenderingIntentFlag.PRINT, annotationStorage);\n      expect(appearance).toEqual(\"/Tx BMC q BT /Goth 5 Tf 1 0 0 1 0 10 Tm \" + \"2 -6.93 Td (\\x30\\x53\\x30\\x93\\x30\\x6b\\x30\\x61\\x30\\x6f) Tj\\n\" + \"0 -8 Td (\\x4e\\x16\\x75\\x4c\\x30\\x6e) Tj ET Q EMC\");\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should render multiline text with various EOL for printing","suites":["annotation","TextWidgetAnnotation"],"line":1475,"updatePoint":{"line":1475,"column":66,"index":60268},"code":"    it(\"should render multiline text with various EOL for printing\", async function () {\n      textWidgetDict.set(\"Ff\", AnnotationFieldFlag.MULTILINE);\n      textWidgetDict.set(\"Rect\", [0, 0, 128, 10]);\n      const textWidgetRef = Ref.get(271, 0);\n      const xref = new XRefMock([{\n        ref: textWidgetRef,\n        data: textWidgetDict\n      }, helvRefObj]);\n      const task = new WorkerTask(\"test print\");\n      partialEvaluator.xref = xref;\n      const expectedAppearance = \"/Tx BMC q BT /Helv 5 Tf 1 0 0 1 0 10 Tm \" + \"2 -6.93 Td \" + \"(Lorem ipsum dolor sit amet, consectetur adipiscing elit.) Tj\\n\" + \"0 -8 Td \" + \"(Aliquam vitae felis ac lectus bibendum ultricies quis non) Tj\\n\" + \"0 -8 Td \" + \"( diam.) Tj\\n\" + \"0 -8 Td \" + \"(Morbi id porttitor quam, a iaculis dui.) Tj\\n\" + \"0 -8 Td \" + \"(Pellentesque habitant morbi tristique senectus et netus ) Tj\\n\" + \"0 -8 Td \" + \"(et malesuada fames ac turpis egestas.) Tj\\n\" + \"0 -8 Td () Tj\\n\" + \"0 -8 Td () Tj\\n\" + \"0 -8 Td \" + \"(Nulla consectetur, ligula in tincidunt placerat, velit ) Tj\\n\" + \"0 -8 Td \" + \"(augue consectetur orci, sed mattis libero nunc ut massa.) Tj\\n\" + \"0 -8 Td \" + \"(Etiam facilisis tempus interdum.) Tj ET Q EMC\";\n      const annotation = await AnnotationFactory.create(xref, textWidgetRef, pdfManagerMock, idFactoryMock);\n      const annotationStorage = new Map();\n      annotationStorage.set(annotation.data.id, {\n        value: \"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\\r\" + \"Aliquam vitae felis ac lectus bibendum ultricies quis non diam.\\n\" + \"Morbi id porttitor quam, a iaculis dui.\\r\\n\" + \"Pellentesque habitant morbi tristique senectus et \" + \"netus et malesuada fames ac turpis egestas.\\n\\r\\n\\r\" + \"Nulla consectetur, ligula in tincidunt placerat, \" + \"velit augue consectetur orci, sed mattis libero nunc ut massa.\\r\" + \"Etiam facilisis tempus interdum.\"\n      });\n      const appearance = await annotation._getAppearance(partialEvaluator, task, RenderingIntentFlag.PRINT, annotationStorage);\n      expect(appearance).toEqual(expectedAppearance);\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should render comb for printing","suites":["annotation","TextWidgetAnnotation"],"line":1494,"updatePoint":{"line":1494,"column":39,"index":62302},"code":"    it(\"should render comb for printing\", async function () {\n      textWidgetDict.set(\"Ff\", AnnotationFieldFlag.COMB);\n      textWidgetDict.set(\"MaxLen\", 4);\n      const textWidgetRef = Ref.get(271, 0);\n      const xref = new XRefMock([{\n        ref: textWidgetRef,\n        data: textWidgetDict\n      }, helvRefObj]);\n      const task = new WorkerTask(\"test print\");\n      partialEvaluator.xref = xref;\n      const annotation = await AnnotationFactory.create(xref, textWidgetRef, pdfManagerMock, idFactoryMock);\n      const annotationStorage = new Map();\n      annotationStorage.set(annotation.data.id, {\n        value: \"aa(aa)a\\\\\"\n      });\n      const appearance = await annotation._getAppearance(partialEvaluator, task, RenderingIntentFlag.PRINT, annotationStorage);\n      expect(appearance).toEqual(\"/Tx BMC q BT /Helv 5 Tf 1 0 0 1 2 3.07 Tm\" + \" (a) Tj 8 0 Td (a) Tj 8 0 Td (\\\\() Tj\" + \" 8 0 Td (a) Tj 8 0 Td (a) Tj\" + \" 8 0 Td (\\\\)) Tj 8 0 Td (a) Tj\" + \" 8 0 Td (\\\\\\\\) Tj ET Q EMC\");\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should render comb with Japanese text for printing","suites":["annotation","TextWidgetAnnotation"],"line":1512,"updatePoint":{"line":1512,"column":58,"index":63320},"code":"    it(\"should render comb with Japanese text for printing\", async function () {\n      textWidgetDict.set(\"Ff\", AnnotationFieldFlag.COMB);\n      textWidgetDict.set(\"MaxLen\", 4);\n      textWidgetDict.get(\"DR\").get(\"Font\").set(\"Goth\", gothRefObj.ref);\n      textWidgetDict.set(\"DA\", \"/Goth 5 Tf\");\n      textWidgetDict.set(\"Rect\", [0, 0, 32, 10]);\n      const textWidgetRef = Ref.get(271, 0);\n      const xref = new XRefMock([{\n        ref: textWidgetRef,\n        data: textWidgetDict\n      }, gothRefObj]);\n      const task = new WorkerTask(\"test print\");\n      partialEvaluator.xref = xref;\n      const annotation = await AnnotationFactory.create(xref, textWidgetRef, pdfManagerMock, idFactoryMock);\n      const annotationStorage = new Map();\n      annotationStorage.set(annotation.data.id, {\n        value: \"こんにちは世界の\"\n      });\n      const appearance = await annotation._getAppearance(partialEvaluator, task, RenderingIntentFlag.PRINT, annotationStorage);\n      expect(appearance).toEqual(\"/Tx BMC q BT /Goth 5 Tf 1 0 0 1 2 3.07 Tm\" + \" (\\x30\\x53) Tj 8 0 Td (\\x30\\x93) Tj 8 0 Td (\\x30\\x6b) Tj\" + \" 8 0 Td (\\x30\\x61) Tj 8 0 Td (\\x30\\x6f) Tj\" + \" 8 0 Td (\\x4e\\x16) Tj 8 0 Td (\\x75\\x4c) Tj\" + \" 8 0 Td (\\x30\\x6e) Tj ET Q EMC\");\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should save text","suites":["annotation","TextWidgetAnnotation"],"line":1533,"updatePoint":{"line":1533,"column":24,"index":64520},"code":"    it(\"should save text\", async function () {\n      const textWidgetRef = Ref.get(123, 0);\n      const xref = new XRefMock([{\n        ref: textWidgetRef,\n        data: textWidgetDict\n      }, helvRefObj]);\n      partialEvaluator.xref = xref;\n      const task = new WorkerTask(\"test save\");\n      const annotation = await AnnotationFactory.create(xref, textWidgetRef, pdfManagerMock, idFactoryMock);\n      const annotationStorage = new Map();\n      annotationStorage.set(annotation.data.id, {\n        value: \"hello world\"\n      });\n      const data = await annotation.save(partialEvaluator, task, annotationStorage);\n      expect(data.length).toEqual(2);\n      const [oldData, newData] = data;\n      expect(oldData.ref).toEqual(Ref.get(123, 0));\n      expect(newData.ref).toEqual(Ref.get(2, 0));\n      oldData.data = oldData.data.replace(/\\(D:\\d+\\)/, \"(date)\");\n      expect(oldData.data).toEqual(\"123 0 obj\\n\" + \"<< /Type /Annot /Subtype /Widget /FT /Tx /DA (/Helv 5 Tf) /DR \" + \"<< /Font << /Helv 314 0 R>>>> /Rect [0 0 32 10] \" + \"/V (hello world) /AP << /N 2 0 R>> /M (date)>>\\nendobj\\n\");\n      expect(newData.data).toEqual(\"2 0 obj\\n<< /Subtype /Form /Resources \" + \"<< /Font << /Helv 314 0 R>>>> /BBox [0 0 32 10] /Length 74>> stream\\n\" + \"/Tx BMC q BT /Helv 5 Tf 1 0 0 1 0 0 Tm 2 3.07 Td (hello world) Tj \" + \"ET Q EMC\\nendstream\\nendobj\\n\");\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should save rotated text","suites":["annotation","TextWidgetAnnotation"],"line":1555,"updatePoint":{"line":1555,"column":32,"index":65887},"code":"    it(\"should save rotated text\", async function () {\n      const textWidgetRef = Ref.get(123, 0);\n      const xref = new XRefMock([{\n        ref: textWidgetRef,\n        data: textWidgetDict\n      }, helvRefObj]);\n      partialEvaluator.xref = xref;\n      const task = new WorkerTask(\"test save\");\n      const annotation = await AnnotationFactory.create(xref, textWidgetRef, pdfManagerMock, idFactoryMock);\n      const annotationStorage = new Map();\n      annotationStorage.set(annotation.data.id, {\n        value: \"hello world\",\n        rotation: 90\n      });\n      const data = await annotation.save(partialEvaluator, task, annotationStorage);\n      expect(data.length).toEqual(2);\n      const [oldData, newData] = data;\n      expect(oldData.ref).toEqual(Ref.get(123, 0));\n      expect(newData.ref).toEqual(Ref.get(2, 0));\n      oldData.data = oldData.data.replace(/\\(D:\\d+\\)/, \"(date)\");\n      expect(oldData.data).toEqual(\"123 0 obj\\n\" + \"<< /Type /Annot /Subtype /Widget /FT /Tx /DA (/Helv 5 Tf) /DR \" + \"<< /Font << /Helv 314 0 R>>>> /Rect [0 0 32 10] \" + \"/V (hello world) /MK << /R 90>> /AP << /N 2 0 R>> /M (date)>>\\nendobj\\n\");\n      expect(newData.data).toEqual(\"2 0 obj\\n<< /Subtype /Form /Resources \" + \"<< /Font << /Helv 314 0 R>>>> /BBox [0 0 32 10] /Matrix [0 1 -1 0 32 0] /Length 74>> stream\\n\" + \"/Tx BMC q BT /Helv 5 Tf 1 0 0 1 0 0 Tm 2 2.94 Td (hello world) Tj \" + \"ET Q EMC\\nendstream\\nendobj\\n\");\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should compress and save text","suites":["annotation","TextWidgetAnnotation"],"line":1578,"updatePoint":{"line":1578,"column":37,"index":67320},"code":"    it(\"should compress and save text\", async function () {\n      const textWidgetRef = Ref.get(123, 0);\n      const xref = new XRefMock([{\n        ref: textWidgetRef,\n        data: textWidgetDict\n      }, helvRefObj]);\n      partialEvaluator.xref = xref;\n      const task = new WorkerTask(\"test save\");\n      const annotation = await AnnotationFactory.create(xref, textWidgetRef, pdfManagerMock, idFactoryMock);\n      const annotationStorage = new Map();\n      const value = \"a\".repeat(256);\n      annotationStorage.set(annotation.data.id, {\n        value\n      });\n      const data = await annotation.save(partialEvaluator, task, annotationStorage);\n      expect(data.length).toEqual(2);\n      const [oldData, newData] = data;\n      expect(oldData.ref).toEqual(Ref.get(123, 0));\n      expect(newData.ref).toEqual(Ref.get(2, 0));\n      oldData.data = oldData.data.replace(/\\(D:\\d+\\)/, \"(date)\");\n      expect(oldData.data).toEqual(\"123 0 obj\\n\" + \"<< /Type /Annot /Subtype /Widget /FT /Tx /DA (/Helv 5 Tf) /DR \" + \"<< /Font << /Helv 314 0 R>>>> /Rect [0 0 32 10] \" + `/V (${value}) /AP << /N 2 0 R>> /M (date)>>\\nendobj\\n`);\n      const compressedData = [120, 156, 211, 15, 169, 80, 112, 242, 117, 86, 40, 84, 112, 10, 81, 208, 247, 72, 205, 41, 83, 48, 85, 8, 73, 83, 48, 84, 48, 0, 66, 8, 25, 146, 171, 96, 164, 96, 172, 103, 96, 174, 16, 146, 162, 160, 145, 56, 194, 129, 166, 66, 72, 150, 130, 107, 136, 66, 160, 130, 171, 175, 51, 0, 222, 235, 111, 133];\n      const compressedStream = String.fromCharCode(...compressedData);\n      expect(newData.data).toEqual(\"2 0 obj\\n<< /Subtype /Form /Resources \" + \"<< /Font << /Helv 314 0 R>>>> /BBox [0 0 32 10] /Filter /FlateDecode /Length 68>> stream\\n\" + `${compressedStream}\\nendstream\\nendobj\\n`);\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should get field object for usage in JS sandbox","suites":["annotation","TextWidgetAnnotation"],"line":1603,"updatePoint":{"line":1603,"column":55,"index":69096},"code":"    it(\"should get field object for usage in JS sandbox\", async function () {\n      const textWidgetRef = Ref.get(123, 0);\n      const xDictRef = Ref.get(141, 0);\n      const dDictRef = Ref.get(262, 0);\n      const next0Ref = Ref.get(314, 0);\n      const next1Ref = Ref.get(271, 0);\n      const next2Ref = Ref.get(577, 0);\n      const next00Ref = Ref.get(413, 0);\n      const xDict = new Dict();\n      const dDict = new Dict();\n      const next0Dict = new Dict();\n      const next1Dict = new Dict();\n      const next2Dict = new Dict();\n      const next00Dict = new Dict();\n      const xref = new XRefMock([{\n        ref: textWidgetRef,\n        data: textWidgetDict\n      }, {\n        ref: xDictRef,\n        data: xDict\n      }, {\n        ref: dDictRef,\n        data: dDict\n      }, {\n        ref: next0Ref,\n        data: next0Dict\n      }, {\n        ref: next00Ref,\n        data: next00Dict\n      }, {\n        ref: next1Ref,\n        data: next1Dict\n      }, {\n        ref: next2Ref,\n        data: next2Dict\n      }]);\n      const JS = Name.get(\"JavaScript\");\n      const additionalActionsDict = new Dict();\n      const eDict = new Dict();\n      eDict.set(\"JS\", \"hello()\");\n      eDict.set(\"S\", JS);\n      additionalActionsDict.set(\"E\", eDict);\n\n      // Test the cycle detection here.\n      xDict.set(\"JS\", \"world()\");\n      xDict.set(\"S\", JS);\n      xDict.set(\"Next\", [next0Ref, next1Ref, next2Ref, xDictRef]);\n      next0Dict.set(\"JS\", \"olleh()\");\n      next0Dict.set(\"S\", JS);\n      next0Dict.set(\"Next\", next00Ref);\n      next00Dict.set(\"JS\", \"foo()\");\n      next00Dict.set(\"S\", JS);\n      next00Dict.set(\"Next\", next0Ref);\n      next1Dict.set(\"JS\", \"dlrow()\");\n      next1Dict.set(\"S\", JS);\n      next1Dict.set(\"Next\", xDictRef);\n      next2Dict.set(\"JS\", \"oof()\");\n      next2Dict.set(\"S\", JS);\n      dDict.set(\"JS\", \"bar()\");\n      dDict.set(\"S\", JS);\n      dDict.set(\"Next\", dDictRef);\n      additionalActionsDict.set(\"D\", dDictRef);\n      additionalActionsDict.set(\"X\", xDictRef);\n      textWidgetDict.set(\"AA\", additionalActionsDict);\n      partialEvaluator.xref = xref;\n      const annotation = await AnnotationFactory.create(xref, textWidgetRef, pdfManagerMock, idFactoryMock);\n      const fieldObject = await annotation.getFieldObject();\n      const actions = fieldObject.actions;\n      expect(actions[\"Mouse Enter\"]).toEqual([\"hello()\"]);\n      expect(actions[\"Mouse Exit\"]).toEqual([\"world()\", \"olleh()\", \"foo()\", \"dlrow()\", \"oof()\"]);\n      expect(actions[\"Mouse Down\"]).toEqual([\"bar()\"]);\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should save Japanese text","suites":["annotation","TextWidgetAnnotation"],"line":1675,"updatePoint":{"line":1675,"column":33,"index":71589},"code":"    it(\"should save Japanese text\", async function () {\n      textWidgetDict.get(\"DR\").get(\"Font\").set(\"Goth\", gothRefObj.ref);\n      textWidgetDict.set(\"DA\", \"/Goth 5 Tf\");\n      const textWidgetRef = Ref.get(123, 0);\n      const xref = new XRefMock([{\n        ref: textWidgetRef,\n        data: textWidgetDict\n      }, gothRefObj]);\n      partialEvaluator.xref = xref;\n      const task = new WorkerTask(\"test save\");\n      const annotation = await AnnotationFactory.create(xref, textWidgetRef, pdfManagerMock, idFactoryMock);\n      const annotationStorage = new Map();\n      annotationStorage.set(annotation.data.id, {\n        value: \"こんにちは世界の\"\n      });\n      const data = await annotation.save(partialEvaluator, task, annotationStorage);\n      const utf16String = \"\\x30\\x53\\x30\\x93\\x30\\x6b\\x30\\x61\\x30\\x6f\\x4e\\x16\\x75\\x4c\\x30\\x6e\";\n      expect(data.length).toEqual(2);\n      const [oldData, newData] = data;\n      expect(oldData.ref).toEqual(Ref.get(123, 0));\n      expect(newData.ref).toEqual(Ref.get(2, 0));\n      oldData.data = oldData.data.replace(/\\(D:\\d+\\)/, \"(date)\");\n      expect(oldData.data).toEqual(\"123 0 obj\\n\" + \"<< /Type /Annot /Subtype /Widget /FT /Tx /DA (/Goth 5 Tf) /DR \" + \"<< /Font << /Helv 314 0 R /Goth 159 0 R>>>> /Rect [0 0 32 10] \" + `/V (\\xfe\\xff${utf16String}) /AP << /N 2 0 R>> /M (date)>>\\nendobj\\n`);\n      expect(newData.data).toEqual(\"2 0 obj\\n<< /Subtype /Form /Resources \" + \"<< /Font << /Helv 314 0 R /Goth 159 0 R>>>> /BBox [0 0 32 10] /Length 79>> stream\\n\" + `/Tx BMC q BT /Goth 5 Tf 1 0 0 1 0 0 Tm 2 3.07 Td (${utf16String}) Tj ` + \"ET Q EMC\\nendstream\\nendobj\\n\");\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should handle checkboxes with export value","suites":["annotation","ButtonWidgetAnnotation"],"line":1712,"updatePoint":{"line":1712,"column":50,"index":73614},"code":"    it(\"should handle checkboxes with export value\", async function () {\n      buttonWidgetDict.set(\"V\", Name.get(\"Checked\"));\n      buttonWidgetDict.set(\"DV\", Name.get(\"Off\"));\n      const appearanceStatesDict = new Dict();\n      const normalAppearanceDict = new Dict();\n      normalAppearanceDict.set(\"Off\", 0);\n      normalAppearanceDict.set(\"Checked\", 1);\n      appearanceStatesDict.set(\"N\", normalAppearanceDict);\n      buttonWidgetDict.set(\"AP\", appearanceStatesDict);\n      const buttonWidgetRef = Ref.get(124, 0);\n      const xref = new XRefMock([{\n        ref: buttonWidgetRef,\n        data: buttonWidgetDict\n      }]);\n      const {\n        data\n      } = await AnnotationFactory.create(xref, buttonWidgetRef, pdfManagerMock, idFactoryMock);\n      expect(data.annotationType).toEqual(AnnotationType.WIDGET);\n      expect(data.checkBox).toEqual(true);\n      expect(data.fieldValue).toEqual(\"Checked\");\n      expect(data.defaultFieldValue).toEqual(\"Off\");\n      expect(data.radioButton).toEqual(false);\n      expect(data.exportValue).toEqual(\"Checked\");\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should handle checkboxes without export value","suites":["annotation","ButtonWidgetAnnotation"],"line":1736,"updatePoint":{"line":1736,"column":53,"index":74687},"code":"    it(\"should handle checkboxes without export value\", async function () {\n      buttonWidgetDict.set(\"V\", Name.get(\"Checked\"));\n      buttonWidgetDict.set(\"DV\", Name.get(\"Off\"));\n      const buttonWidgetRef = Ref.get(124, 0);\n      const xref = new XRefMock([{\n        ref: buttonWidgetRef,\n        data: buttonWidgetDict\n      }]);\n      const {\n        data\n      } = await AnnotationFactory.create(xref, buttonWidgetRef, pdfManagerMock, idFactoryMock);\n      expect(data.annotationType).toEqual(AnnotationType.WIDGET);\n      expect(data.checkBox).toEqual(true);\n      expect(data.fieldValue).toEqual(\"Checked\");\n      expect(data.defaultFieldValue).toEqual(\"Off\");\n      expect(data.radioButton).toEqual(false);\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should handle checkboxes without /Off appearance","suites":["annotation","ButtonWidgetAnnotation"],"line":1753,"updatePoint":{"line":1753,"column":56,"index":75415},"code":"    it(\"should handle checkboxes without /Off appearance\", async function () {\n      buttonWidgetDict.set(\"V\", Name.get(\"Checked\"));\n      buttonWidgetDict.set(\"DV\", Name.get(\"Off\"));\n      const appearanceStatesDict = new Dict();\n      const normalAppearanceDict = new Dict();\n      normalAppearanceDict.set(\"Checked\", 1);\n      appearanceStatesDict.set(\"N\", normalAppearanceDict);\n      buttonWidgetDict.set(\"AP\", appearanceStatesDict);\n      const buttonWidgetRef = Ref.get(124, 0);\n      const xref = new XRefMock([{\n        ref: buttonWidgetRef,\n        data: buttonWidgetDict\n      }]);\n      const {\n        data\n      } = await AnnotationFactory.create(xref, buttonWidgetRef, pdfManagerMock, idFactoryMock);\n      expect(data.annotationType).toEqual(AnnotationType.WIDGET);\n      expect(data.checkBox).toEqual(true);\n      expect(data.fieldValue).toEqual(\"Checked\");\n      expect(data.defaultFieldValue).toEqual(\"Off\");\n      expect(data.radioButton).toEqual(false);\n      expect(data.exportValue).toEqual(\"Checked\");\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should render checkbox with fallback font for printing","suites":["annotation","ButtonWidgetAnnotation"],"line":1776,"updatePoint":{"line":1776,"column":62,"index":76455},"code":"    it(\"should render checkbox with fallback font for printing\", async function () {\n      const appearanceStatesDict = new Dict();\n      const normalAppearanceDict = new Dict();\n      const checkedAppearanceDict = new Dict();\n      const uncheckedAppearanceDict = new Dict();\n      const checkedStream = new StringStream(\"/ 12 Tf (4) Tj\");\n      checkedStream.dict = checkedAppearanceDict;\n      const uncheckedStream = new StringStream(\"\");\n      uncheckedStream.dict = uncheckedAppearanceDict;\n      checkedAppearanceDict.set(\"BBox\", [0, 0, 8, 8]);\n      checkedAppearanceDict.set(\"FormType\", 1);\n      checkedAppearanceDict.set(\"Matrix\", [1, 0, 0, 1, 0, 0]);\n      normalAppearanceDict.set(\"Checked\", checkedStream);\n      normalAppearanceDict.set(\"Off\", uncheckedStream);\n      appearanceStatesDict.set(\"N\", normalAppearanceDict);\n      buttonWidgetDict.set(\"AP\", appearanceStatesDict);\n      const buttonWidgetRef = Ref.get(124, 0);\n      const xref = new XRefMock([{\n        ref: buttonWidgetRef,\n        data: buttonWidgetDict\n      }]);\n      const task = new WorkerTask(\"test print\");\n      const checkboxEvaluator = partialEvaluator.clone({\n        ignoreErrors: true\n      });\n      const annotation = await AnnotationFactory.create(xref, buttonWidgetRef, pdfManagerMock, idFactoryMock);\n      const annotationStorage = new Map();\n      annotationStorage.set(annotation.data.id, {\n        value: true\n      });\n      const {\n        opList\n      } = await annotation.getOperatorList(checkboxEvaluator, task, RenderingIntentFlag.PRINT, false, annotationStorage);\n      expect(opList.argsArray.length).toEqual(5);\n      expect(opList.fnArray).toEqual([OPS.beginAnnotation, OPS.dependency, OPS.setFont, OPS.showText, OPS.endAnnotation]);\n      expect(opList.argsArray[0]).toEqual([\"124R\", [0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [1, 0, 0, 1, 0, 0], false]);\n      expect(opList.argsArray[3][0][0].unicode).toEqual(\"4\");\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should render checkboxes for printing","suites":["annotation","ButtonWidgetAnnotation"],"line":1814,"updatePoint":{"line":1814,"column":45,"index":78369},"code":"    it(\"should render checkboxes for printing\", async function () {\n      const appearanceStatesDict = new Dict();\n      const normalAppearanceDict = new Dict();\n      const checkedAppearanceDict = new Dict();\n      const uncheckedAppearanceDict = new Dict();\n      const checkedStream = new StringStream(\"0.1 0.2 0.3 rg\");\n      checkedStream.dict = checkedAppearanceDict;\n      const uncheckedStream = new StringStream(\"0.3 0.2 0.1 rg\");\n      uncheckedStream.dict = uncheckedAppearanceDict;\n      checkedAppearanceDict.set(\"BBox\", [0, 0, 8, 8]);\n      checkedAppearanceDict.set(\"FormType\", 1);\n      checkedAppearanceDict.set(\"Matrix\", [1, 0, 0, 1, 0, 0]);\n      normalAppearanceDict.set(\"Checked\", checkedStream);\n      normalAppearanceDict.set(\"Off\", uncheckedStream);\n      appearanceStatesDict.set(\"N\", normalAppearanceDict);\n      buttonWidgetDict.set(\"AP\", appearanceStatesDict);\n      const buttonWidgetRef = Ref.get(124, 0);\n      const xref = new XRefMock([{\n        ref: buttonWidgetRef,\n        data: buttonWidgetDict\n      }]);\n      const task = new WorkerTask(\"test print\");\n      const annotation = await AnnotationFactory.create(xref, buttonWidgetRef, pdfManagerMock, idFactoryMock);\n      const annotationStorage = new Map();\n      annotationStorage.set(annotation.data.id, {\n        value: true\n      });\n      const {\n        opList: opList1\n      } = await annotation.getOperatorList(partialEvaluator, task, RenderingIntentFlag.PRINT, false, annotationStorage);\n      expect(opList1.argsArray.length).toEqual(3);\n      expect(opList1.fnArray).toEqual([OPS.beginAnnotation, OPS.setFillRGBColor, OPS.endAnnotation]);\n      expect(opList1.argsArray[0]).toEqual([\"124R\", [0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [1, 0, 0, 1, 0, 0], false]);\n      expect(opList1.argsArray[1]).toEqual(new Uint8ClampedArray([26, 51, 76]));\n      annotationStorage.set(annotation.data.id, {\n        value: false\n      });\n      const {\n        opList: opList2\n      } = await annotation.getOperatorList(partialEvaluator, task, RenderingIntentFlag.PRINT, false, annotationStorage);\n      expect(opList2.argsArray.length).toEqual(3);\n      expect(opList2.fnArray).toEqual([OPS.beginAnnotation, OPS.setFillRGBColor, OPS.endAnnotation]);\n      expect(opList2.argsArray[0]).toEqual([\"124R\", [0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [1, 0, 0, 1, 0, 0], false]);\n      expect(opList2.argsArray[1]).toEqual(new Uint8ClampedArray([76, 51, 26]));\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should render checkboxes for printing twice","suites":["annotation","ButtonWidgetAnnotation"],"line":1859,"updatePoint":{"line":1859,"column":51,"index":80806},"code":"    it(\"should render checkboxes for printing twice\", async function () {\n      const appearanceStatesDict = new Dict();\n      const normalAppearanceDict = new Dict();\n      const checkedAppearanceDict = new Dict();\n      const uncheckedAppearanceDict = new Dict();\n      const checkedStream = new StringStream(\"0.1 0.2 0.3 rg\");\n      checkedStream.dict = checkedAppearanceDict;\n      const uncheckedStream = new StringStream(\"0.3 0.2 0.1 rg\");\n      uncheckedStream.dict = uncheckedAppearanceDict;\n      checkedAppearanceDict.set(\"BBox\", [0, 0, 8, 8]);\n      checkedAppearanceDict.set(\"FormType\", 1);\n      checkedAppearanceDict.set(\"Matrix\", [1, 0, 0, 1, 0, 0]);\n      normalAppearanceDict.set(\"Checked\", checkedStream);\n      normalAppearanceDict.set(\"Off\", uncheckedStream);\n      appearanceStatesDict.set(\"N\", normalAppearanceDict);\n      buttonWidgetDict.set(\"AP\", appearanceStatesDict);\n      buttonWidgetDict.set(\"AS\", Name.get(\"Off\"));\n      const buttonWidgetRef = Ref.get(1249, 0);\n      const xref = new XRefMock([{\n        ref: buttonWidgetRef,\n        data: buttonWidgetDict\n      }]);\n      const task = new WorkerTask(\"test print\");\n      const annotation = await AnnotationFactory.create(xref, buttonWidgetRef, pdfManagerMock, idFactoryMock);\n      const annotationStorage = new Map();\n      for (let i = 0; i < 2; i++) {\n        annotationStorage.set(annotation.data.id, {\n          value: true\n        });\n        const {\n          opList\n        } = await annotation.getOperatorList(partialEvaluator, task, RenderingIntentFlag.PRINT, false, annotationStorage);\n        expect(opList.argsArray.length).toEqual(3);\n        expect(opList.fnArray).toEqual([OPS.beginAnnotation, OPS.setFillRGBColor, OPS.endAnnotation]);\n        expect(opList.argsArray[0]).toEqual([\"1249R\", [0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [1, 0, 0, 1, 0, 0], false]);\n        expect(opList.argsArray[1]).toEqual(new Uint8ClampedArray([26, 51, 76]));\n      }\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should render checkboxes for printing using normal appearance","suites":["annotation","ButtonWidgetAnnotation"],"line":1897,"updatePoint":{"line":1897,"column":69,"index":82776},"code":"    it(\"should render checkboxes for printing using normal appearance\", async function () {\n      const appearanceStatesDict = new Dict();\n      const normalAppearanceDict = new Dict();\n      const checkedAppearanceDict = new Dict();\n      const uncheckedAppearanceDict = new Dict();\n      const checkedStream = new StringStream(\"0.1 0.2 0.3 rg\");\n      checkedStream.dict = checkedAppearanceDict;\n      const uncheckedStream = new StringStream(\"0.3 0.2 0.1 rg\");\n      uncheckedStream.dict = uncheckedAppearanceDict;\n      checkedAppearanceDict.set(\"BBox\", [0, 0, 8, 8]);\n      checkedAppearanceDict.set(\"FormType\", 1);\n      checkedAppearanceDict.set(\"Matrix\", [1, 0, 0, 1, 0, 0]);\n      normalAppearanceDict.set(\"Checked\", checkedStream);\n      normalAppearanceDict.set(\"Off\", uncheckedStream);\n      appearanceStatesDict.set(\"N\", normalAppearanceDict);\n      buttonWidgetDict.set(\"AP\", appearanceStatesDict);\n      buttonWidgetDict.set(\"AS\", Name.get(\"Checked\"));\n      const buttonWidgetRef = Ref.get(124, 0);\n      const xref = new XRefMock([{\n        ref: buttonWidgetRef,\n        data: buttonWidgetDict\n      }]);\n      const task = new WorkerTask(\"test print\");\n      const annotation = await AnnotationFactory.create(xref, buttonWidgetRef, pdfManagerMock, idFactoryMock);\n      const annotationStorage = new Map();\n      const {\n        opList\n      } = await annotation.getOperatorList(partialEvaluator, task, RenderingIntentFlag.PRINT, false, annotationStorage);\n      expect(opList.argsArray.length).toEqual(3);\n      expect(opList.fnArray).toEqual([OPS.beginAnnotation, OPS.setFillRGBColor, OPS.endAnnotation]);\n      expect(opList.argsArray[0]).toEqual([\"124R\", [0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [1, 0, 0, 1, 0, 0], false]);\n      expect(opList.argsArray[1]).toEqual(new Uint8ClampedArray([26, 51, 76]));\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should save checkboxes","suites":["annotation","ButtonWidgetAnnotation"],"line":1930,"updatePoint":{"line":1930,"column":30,"index":84565},"code":"    it(\"should save checkboxes\", async function () {\n      const appearanceStatesDict = new Dict();\n      const normalAppearanceDict = new Dict();\n      normalAppearanceDict.set(\"Checked\", Ref.get(314, 0));\n      normalAppearanceDict.set(\"Off\", Ref.get(271, 0));\n      appearanceStatesDict.set(\"N\", normalAppearanceDict);\n      buttonWidgetDict.set(\"AP\", appearanceStatesDict);\n      buttonWidgetDict.set(\"V\", Name.get(\"Off\"));\n      const buttonWidgetRef = Ref.get(123, 0);\n      const xref = new XRefMock([{\n        ref: buttonWidgetRef,\n        data: buttonWidgetDict\n      }]);\n      partialEvaluator.xref = xref;\n      const task = new WorkerTask(\"test save\");\n      const annotation = await AnnotationFactory.create(xref, buttonWidgetRef, pdfManagerMock, idFactoryMock);\n      const annotationStorage = new Map();\n      annotationStorage.set(annotation.data.id, {\n        value: true\n      });\n      const [oldData] = await annotation.save(partialEvaluator, task, annotationStorage);\n      oldData.data = oldData.data.replace(/\\(D:\\d+\\)/, \"(date)\");\n      expect(oldData.ref).toEqual(Ref.get(123, 0));\n      expect(oldData.data).toEqual(\"123 0 obj\\n\" + \"<< /Type /Annot /Subtype /Widget /FT /Btn \" + \"/AP << /N << /Checked 314 0 R /Off 271 0 R>>>> \" + \"/V /Checked /AS /Checked /M (date)>>\\nendobj\\n\");\n      annotationStorage.set(annotation.data.id, {\n        value: false\n      });\n      const data = await annotation.save(partialEvaluator, task, annotationStorage);\n      expect(data).toEqual(null);\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should save rotated checkboxes","suites":["annotation","ButtonWidgetAnnotation"],"line":1960,"updatePoint":{"line":1960,"column":38,"index":86090},"code":"    it(\"should save rotated checkboxes\", async function () {\n      const appearanceStatesDict = new Dict();\n      const normalAppearanceDict = new Dict();\n      normalAppearanceDict.set(\"Checked\", Ref.get(314, 0));\n      normalAppearanceDict.set(\"Off\", Ref.get(271, 0));\n      appearanceStatesDict.set(\"N\", normalAppearanceDict);\n      buttonWidgetDict.set(\"AP\", appearanceStatesDict);\n      buttonWidgetDict.set(\"V\", Name.get(\"Off\"));\n      const buttonWidgetRef = Ref.get(123, 0);\n      const xref = new XRefMock([{\n        ref: buttonWidgetRef,\n        data: buttonWidgetDict\n      }]);\n      partialEvaluator.xref = xref;\n      const task = new WorkerTask(\"test save\");\n      const annotation = await AnnotationFactory.create(xref, buttonWidgetRef, pdfManagerMock, idFactoryMock);\n      const annotationStorage = new Map();\n      annotationStorage.set(annotation.data.id, {\n        value: true,\n        rotation: 180\n      });\n      const [oldData] = await annotation.save(partialEvaluator, task, annotationStorage);\n      oldData.data = oldData.data.replace(/\\(D:\\d+\\)/, \"(date)\");\n      expect(oldData.ref).toEqual(Ref.get(123, 0));\n      expect(oldData.data).toEqual(\"123 0 obj\\n\" + \"<< /Type /Annot /Subtype /Widget /FT /Btn \" + \"/AP << /N << /Checked 314 0 R /Off 271 0 R>>>> \" + \"/V /Checked /AS /Checked /M (date) /MK << /R 180>>>>\\nendobj\\n\");\n      annotationStorage.set(annotation.data.id, {\n        value: false\n      });\n      const data = await annotation.save(partialEvaluator, task, annotationStorage);\n      expect(data).toEqual(null);\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should handle radio buttons with a field value","suites":["annotation","ButtonWidgetAnnotation"],"line":1991,"updatePoint":{"line":1991,"column":54,"index":87670},"code":"    it(\"should handle radio buttons with a field value\", async function () {\n      const parentDict = new Dict();\n      parentDict.set(\"V\", Name.get(\"1\"));\n      const normalAppearanceStateDict = new Dict();\n      normalAppearanceStateDict.set(\"2\", null);\n      const appearanceStatesDict = new Dict();\n      appearanceStatesDict.set(\"N\", normalAppearanceStateDict);\n      buttonWidgetDict.set(\"Ff\", AnnotationFieldFlag.RADIO);\n      buttonWidgetDict.set(\"Parent\", parentDict);\n      buttonWidgetDict.set(\"AP\", appearanceStatesDict);\n      const buttonWidgetRef = Ref.get(124, 0);\n      const xref = new XRefMock([{\n        ref: buttonWidgetRef,\n        data: buttonWidgetDict\n      }]);\n      const {\n        data\n      } = await AnnotationFactory.create(xref, buttonWidgetRef, pdfManagerMock, idFactoryMock);\n      expect(data.annotationType).toEqual(AnnotationType.WIDGET);\n      expect(data.checkBox).toEqual(false);\n      expect(data.radioButton).toEqual(true);\n      expect(data.fieldValue).toEqual(\"1\");\n      expect(data.buttonValue).toEqual(\"2\");\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should handle radio buttons with a field value that's not an ASCII string","suites":["annotation","ButtonWidgetAnnotation"],"line":2015,"updatePoint":{"line":2015,"column":81,"index":88761},"code":"    it(\"should handle radio buttons with a field value that's not an ASCII string\", async function () {\n      const parentDict = new Dict();\n      parentDict.set(\"V\", Name.get(\"\\x91I=\\x91\\xf0\\x93\\xe0\\x97e3\"));\n      const normalAppearanceStateDict = new Dict();\n      normalAppearanceStateDict.set(\"\\x91I=\\x91\\xf0\\x93\\xe0\\x97e3\", null);\n      const appearanceStatesDict = new Dict();\n      appearanceStatesDict.set(\"N\", normalAppearanceStateDict);\n      buttonWidgetDict.set(\"Ff\", AnnotationFieldFlag.RADIO);\n      buttonWidgetDict.set(\"Parent\", parentDict);\n      buttonWidgetDict.set(\"AP\", appearanceStatesDict);\n      const buttonWidgetRef = Ref.get(124, 0);\n      const xref = new XRefMock([{\n        ref: buttonWidgetRef,\n        data: buttonWidgetDict\n      }]);\n      const {\n        data\n      } = await AnnotationFactory.create(xref, buttonWidgetRef, pdfManagerMock, idFactoryMock);\n      expect(data.annotationType).toEqual(AnnotationType.WIDGET);\n      expect(data.checkBox).toEqual(false);\n      expect(data.radioButton).toEqual(true);\n      expect(data.fieldValue).toEqual(\"‚I=‚ðﬁàŠe3\");\n      expect(data.buttonValue).toEqual(\"‚I=‚ðﬁàŠe3\");\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should handle radio buttons without a field value","suites":["annotation","ButtonWidgetAnnotation"],"line":2039,"updatePoint":{"line":2039,"column":57,"index":89900},"code":"    it(\"should handle radio buttons without a field value\", async function () {\n      const normalAppearanceStateDict = new Dict();\n      normalAppearanceStateDict.set(\"2\", null);\n      const appearanceStatesDict = new Dict();\n      appearanceStatesDict.set(\"N\", normalAppearanceStateDict);\n      buttonWidgetDict.set(\"Ff\", AnnotationFieldFlag.RADIO);\n      buttonWidgetDict.set(\"AP\", appearanceStatesDict);\n      const buttonWidgetRef = Ref.get(124, 0);\n      const xref = new XRefMock([{\n        ref: buttonWidgetRef,\n        data: buttonWidgetDict\n      }]);\n      const {\n        data\n      } = await AnnotationFactory.create(xref, buttonWidgetRef, pdfManagerMock, idFactoryMock);\n      expect(data.annotationType).toEqual(AnnotationType.WIDGET);\n      expect(data.checkBox).toEqual(false);\n      expect(data.radioButton).toEqual(true);\n      expect(data.fieldValue).toEqual(null);\n      expect(data.buttonValue).toEqual(\"2\");\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should render radio buttons for printing","suites":["annotation","ButtonWidgetAnnotation"],"line":2060,"updatePoint":{"line":2060,"column":48,"index":90830},"code":"    it(\"should render radio buttons for printing\", async function () {\n      const appearanceStatesDict = new Dict();\n      const normalAppearanceDict = new Dict();\n      const checkedAppearanceDict = new Dict();\n      const uncheckedAppearanceDict = new Dict();\n      const checkedStream = new StringStream(\"0.1 0.2 0.3 rg\");\n      checkedStream.dict = checkedAppearanceDict;\n      const uncheckedStream = new StringStream(\"0.3 0.2 0.1 rg\");\n      uncheckedStream.dict = uncheckedAppearanceDict;\n      checkedAppearanceDict.set(\"BBox\", [0, 0, 8, 8]);\n      checkedAppearanceDict.set(\"FormType\", 1);\n      checkedAppearanceDict.set(\"Matrix\", [1, 0, 0, 1, 0, 0]);\n      normalAppearanceDict.set(\"Checked\", checkedStream);\n      normalAppearanceDict.set(\"Off\", uncheckedStream);\n      appearanceStatesDict.set(\"N\", normalAppearanceDict);\n      buttonWidgetDict.set(\"Ff\", AnnotationFieldFlag.RADIO);\n      buttonWidgetDict.set(\"AP\", appearanceStatesDict);\n      const buttonWidgetRef = Ref.get(124, 0);\n      const xref = new XRefMock([{\n        ref: buttonWidgetRef,\n        data: buttonWidgetDict\n      }]);\n      const task = new WorkerTask(\"test print\");\n      const annotation = await AnnotationFactory.create(xref, buttonWidgetRef, pdfManagerMock, idFactoryMock);\n      const annotationStorage = new Map();\n      annotationStorage.set(annotation.data.id, {\n        value: true\n      });\n      const {\n        opList: opList1\n      } = await annotation.getOperatorList(partialEvaluator, task, RenderingIntentFlag.PRINT, false, annotationStorage);\n      expect(opList1.argsArray.length).toEqual(3);\n      expect(opList1.fnArray).toEqual([OPS.beginAnnotation, OPS.setFillRGBColor, OPS.endAnnotation]);\n      expect(opList1.argsArray[0]).toEqual([\"124R\", [0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [1, 0, 0, 1, 0, 0], false]);\n      expect(opList1.argsArray[1]).toEqual(new Uint8ClampedArray([26, 51, 76]));\n      annotationStorage.set(annotation.data.id, {\n        value: false\n      });\n      const {\n        opList: opList2\n      } = await annotation.getOperatorList(partialEvaluator, task, RenderingIntentFlag.PRINT, false, annotationStorage);\n      expect(opList2.argsArray.length).toEqual(3);\n      expect(opList2.fnArray).toEqual([OPS.beginAnnotation, OPS.setFillRGBColor, OPS.endAnnotation]);\n      expect(opList2.argsArray[0]).toEqual([\"124R\", [0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [1, 0, 0, 1, 0, 0], false]);\n      expect(opList2.argsArray[1]).toEqual(new Uint8ClampedArray([76, 51, 26]));\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should render radio buttons for printing using normal appearance","suites":["annotation","ButtonWidgetAnnotation"],"line":2106,"updatePoint":{"line":2106,"column":72,"index":93349},"code":"    it(\"should render radio buttons for printing using normal appearance\", async function () {\n      const appearanceStatesDict = new Dict();\n      const normalAppearanceDict = new Dict();\n      const checkedAppearanceDict = new Dict();\n      const uncheckedAppearanceDict = new Dict();\n      const checkedStream = new StringStream(\"0.1 0.2 0.3 rg\");\n      checkedStream.dict = checkedAppearanceDict;\n      const uncheckedStream = new StringStream(\"0.3 0.2 0.1 rg\");\n      uncheckedStream.dict = uncheckedAppearanceDict;\n      checkedAppearanceDict.set(\"BBox\", [0, 0, 8, 8]);\n      checkedAppearanceDict.set(\"FormType\", 1);\n      checkedAppearanceDict.set(\"Matrix\", [1, 0, 0, 1, 0, 0]);\n      normalAppearanceDict.set(\"Checked\", checkedStream);\n      normalAppearanceDict.set(\"Off\", uncheckedStream);\n      appearanceStatesDict.set(\"N\", normalAppearanceDict);\n      buttonWidgetDict.set(\"Ff\", AnnotationFieldFlag.RADIO);\n      buttonWidgetDict.set(\"AP\", appearanceStatesDict);\n      buttonWidgetDict.set(\"AS\", Name.get(\"Off\"));\n      const buttonWidgetRef = Ref.get(124, 0);\n      const xref = new XRefMock([{\n        ref: buttonWidgetRef,\n        data: buttonWidgetDict\n      }]);\n      const task = new WorkerTask(\"test print\");\n      const annotation = await AnnotationFactory.create(xref, buttonWidgetRef, pdfManagerMock, idFactoryMock);\n      const annotationStorage = new Map();\n      const {\n        opList\n      } = await annotation.getOperatorList(partialEvaluator, task, RenderingIntentFlag.PRINT, false, annotationStorage);\n      expect(opList.argsArray.length).toEqual(3);\n      expect(opList.fnArray).toEqual([OPS.beginAnnotation, OPS.setFillRGBColor, OPS.endAnnotation]);\n      expect(opList.argsArray[0]).toEqual([\"124R\", [0, 0, 0, 0], [0, 0, 0, 0, 0, 0], [1, 0, 0, 1, 0, 0], false]);\n      expect(opList.argsArray[1]).toEqual(new Uint8ClampedArray([76, 51, 26]));\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should save radio buttons","suites":["annotation","ButtonWidgetAnnotation"],"line":2140,"updatePoint":{"line":2140,"column":33,"index":95198},"code":"    it(\"should save radio buttons\", async function () {\n      const appearanceStatesDict = new Dict();\n      const normalAppearanceDict = new Dict();\n      normalAppearanceDict.set(\"Checked\", Ref.get(314, 0));\n      normalAppearanceDict.set(\"Off\", Ref.get(271, 0));\n      appearanceStatesDict.set(\"N\", normalAppearanceDict);\n      buttonWidgetDict.set(\"Ff\", AnnotationFieldFlag.RADIO);\n      buttonWidgetDict.set(\"AP\", appearanceStatesDict);\n      const buttonWidgetRef = Ref.get(123, 0);\n      const parentRef = Ref.get(456, 0);\n      const parentDict = new Dict();\n      parentDict.set(\"V\", Name.get(\"Off\"));\n      parentDict.set(\"Kids\", [buttonWidgetRef]);\n      buttonWidgetDict.set(\"Parent\", parentRef);\n      const xref = new XRefMock([{\n        ref: buttonWidgetRef,\n        data: buttonWidgetDict\n      }, {\n        ref: parentRef,\n        data: parentDict\n      }]);\n      parentDict.xref = xref;\n      buttonWidgetDict.xref = xref;\n      partialEvaluator.xref = xref;\n      const task = new WorkerTask(\"test save\");\n      const annotation = await AnnotationFactory.create(xref, buttonWidgetRef, pdfManagerMock, idFactoryMock);\n      const annotationStorage = new Map();\n      annotationStorage.set(annotation.data.id, {\n        value: true\n      });\n      let data = await annotation.save(partialEvaluator, task, annotationStorage);\n      expect(data.length).toEqual(2);\n      const [radioData, parentData] = data;\n      radioData.data = radioData.data.replace(/\\(D:\\d+\\)/, \"(date)\");\n      expect(radioData.ref).toEqual(Ref.get(123, 0));\n      expect(radioData.data).toEqual(\"123 0 obj\\n\" + \"<< /Type /Annot /Subtype /Widget /FT /Btn /Ff 32768 \" + \"/AP << /N << /Checked 314 0 R /Off 271 0 R>>>> \" + \"/Parent 456 0 R /AS /Checked /M (date)>>\\nendobj\\n\");\n      expect(parentData.ref).toEqual(Ref.get(456, 0));\n      expect(parentData.data).toEqual(\"456 0 obj\\n<< /V /Checked /Kids [123 0 R]>>\\nendobj\\n\");\n      annotationStorage.set(annotation.data.id, {\n        value: false\n      });\n      data = await annotation.save(partialEvaluator, task, annotationStorage);\n      expect(data).toEqual(null);\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should save radio buttons without a field value","suites":["annotation","ButtonWidgetAnnotation"],"line":2184,"updatePoint":{"line":2184,"column":55,"index":97339},"code":"    it(\"should save radio buttons without a field value\", async function () {\n      const appearanceStatesDict = new Dict();\n      const normalAppearanceDict = new Dict();\n      normalAppearanceDict.set(\"Checked\", Ref.get(314, 0));\n      normalAppearanceDict.set(\"Off\", Ref.get(271, 0));\n      appearanceStatesDict.set(\"N\", normalAppearanceDict);\n      buttonWidgetDict.set(\"Ff\", AnnotationFieldFlag.RADIO);\n      buttonWidgetDict.set(\"AP\", appearanceStatesDict);\n      const buttonWidgetRef = Ref.get(123, 0);\n      const parentRef = Ref.get(456, 0);\n      const parentDict = new Dict();\n      parentDict.set(\"Kids\", [buttonWidgetRef]);\n      buttonWidgetDict.set(\"Parent\", parentRef);\n      const xref = new XRefMock([{\n        ref: buttonWidgetRef,\n        data: buttonWidgetDict\n      }, {\n        ref: parentRef,\n        data: parentDict\n      }]);\n      parentDict.xref = xref;\n      buttonWidgetDict.xref = xref;\n      partialEvaluator.xref = xref;\n      const task = new WorkerTask(\"test save\");\n      const annotation = await AnnotationFactory.create(xref, buttonWidgetRef, pdfManagerMock, idFactoryMock);\n      const annotationStorage = new Map();\n      annotationStorage.set(annotation.data.id, {\n        value: true\n      });\n      const data = await annotation.save(partialEvaluator, task, annotationStorage);\n      expect(data.length).toEqual(2);\n      const [radioData, parentData] = data;\n      radioData.data = radioData.data.replace(/\\(D:\\d+\\)/, \"(date)\");\n      expect(radioData.ref).toEqual(Ref.get(123, 0));\n      expect(radioData.data).toEqual(\"123 0 obj\\n\" + \"<< /Type /Annot /Subtype /Widget /FT /Btn /Ff 32768 \" + \"/AP << /N << /Checked 314 0 R /Off 271 0 R>>>> \" + \"/Parent 456 0 R /AS /Checked /M (date)>>\\nendobj\\n\");\n      expect(parentData.ref).toEqual(Ref.get(456, 0));\n      expect(parentData.data).toEqual(\"456 0 obj\\n<< /Kids [123 0 R] /V /Checked>>\\nendobj\\n\");\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should save nothing","suites":["annotation","ButtonWidgetAnnotation"],"line":2222,"updatePoint":{"line":2222,"column":27,"index":99216},"code":"    it(\"should save nothing\", async function () {\n      const buttonWidgetRef = Ref.get(124, 0);\n      const xref = new XRefMock([{\n        ref: buttonWidgetRef,\n        data: buttonWidgetDict\n      }]);\n      const task = new WorkerTask(\"test save\");\n      const annotation = await AnnotationFactory.create(xref, buttonWidgetRef, pdfManagerMock, idFactoryMock);\n      const annotationStorage = new Map();\n      const data = await annotation.save(partialEvaluator, task, annotationStorage);\n      expect(data).toEqual(null);\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should handle push buttons","suites":["annotation","ButtonWidgetAnnotation"],"line":2234,"updatePoint":{"line":2234,"column":34,"index":99756},"code":"    it(\"should handle push buttons\", async function () {\n      const buttonWidgetRef = Ref.get(124, 0);\n      buttonWidgetDict.set(\"Ff\", AnnotationFieldFlag.PUSHBUTTON);\n      const actionDict = new Dict();\n      actionDict.set(\"S\", Name.get(\"JavaScript\"));\n      actionDict.set(\"JS\", \"do_something();\");\n      buttonWidgetDict.set(\"A\", actionDict);\n      const xref = new XRefMock([{\n        ref: buttonWidgetRef,\n        data: buttonWidgetDict\n      }]);\n      const {\n        data\n      } = await AnnotationFactory.create(xref, buttonWidgetRef, pdfManagerMock, idFactoryMock);\n      expect(data.annotationType).toEqual(AnnotationType.WIDGET);\n      expect(data.pushButton).toEqual(true);\n      expect(data.actions.Action).toEqual([\"do_something();\"]);\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should handle push buttons that act as a tooltip only","suites":["annotation","ButtonWidgetAnnotation"],"line":2252,"updatePoint":{"line":2252,"column":61,"index":100546},"code":"    it(\"should handle push buttons that act as a tooltip only\", async function () {\n      const buttonWidgetRef = Ref.get(124, 0);\n      buttonWidgetDict.set(\"Ff\", AnnotationFieldFlag.PUSHBUTTON);\n      buttonWidgetDict.set(\"TU\", \"An alternative text\");\n      const xref = new XRefMock([{\n        ref: buttonWidgetRef,\n        data: buttonWidgetDict\n      }]);\n      const {\n        data\n      } = await AnnotationFactory.create(xref, buttonWidgetRef, pdfManagerMock, idFactoryMock);\n      expect(data.annotationType).toEqual(AnnotationType.WIDGET);\n      expect(data.pushButton).toEqual(true);\n      expect(data.alternativeText).toEqual(\"An alternative text\");\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should handle URL in A dict in push buttons","suites":["annotation","ButtonWidgetAnnotation"],"line":2267,"updatePoint":{"line":2267,"column":51,"index":101206},"code":"    it(\"should handle URL in A dict in push buttons\", async function () {\n      const buttonWidgetRef = Ref.get(124, 0);\n      buttonWidgetDict.set(\"Ff\", AnnotationFieldFlag.PUSHBUTTON);\n      const actionDict = new Dict();\n      actionDict.set(\"S\", Name.get(\"JavaScript\"));\n      actionDict.set(\"JS\", \"app.launchURL('https://developer.mozilla.org/en-US/', true)\");\n      buttonWidgetDict.set(\"A\", actionDict);\n      const xref = new XRefMock([{\n        ref: buttonWidgetRef,\n        data: buttonWidgetDict\n      }]);\n      const {\n        data\n      } = await AnnotationFactory.create(xref, buttonWidgetRef, pdfManagerMock, idFactoryMock);\n      expect(data.url).toEqual(\"https://developer.mozilla.org/en-US/\");\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should handle URL in AA dict in push buttons","suites":["annotation","ButtonWidgetAnnotation"],"line":2283,"updatePoint":{"line":2283,"column":52,"index":101928},"code":"    it(\"should handle URL in AA dict in push buttons\", async function () {\n      const buttonWidgetRef = Ref.get(124, 0);\n      buttonWidgetDict.set(\"Ff\", AnnotationFieldFlag.PUSHBUTTON);\n\n      // D stands for MouseDown.\n      const dDict = new Dict();\n      dDict.set(\"S\", Name.get(\"JavaScript\"));\n      dDict.set(\"JS\", \"app.launchURL('https://developer.mozilla.org/en-US/', true)\");\n      const actionDict = new Dict();\n      actionDict.set(\"D\", dDict);\n      buttonWidgetDict.set(\"AA\", actionDict);\n      const xref = new XRefMock([{\n        ref: buttonWidgetRef,\n        data: buttonWidgetDict\n      }]);\n      const {\n        data\n      } = await AnnotationFactory.create(xref, buttonWidgetRef, pdfManagerMock, idFactoryMock);\n      expect(data.url).toEqual(\"https://developer.mozilla.org/en-US/\");\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should handle missing option arrays","suites":["annotation","ChoiceWidgetAnnotation"],"line":2331,"updatePoint":{"line":2331,"column":43,"index":103746},"code":"    it(\"should handle missing option arrays\", async function () {\n      const choiceWidgetRef = Ref.get(122, 0);\n      const xref = new XRefMock([{\n        ref: choiceWidgetRef,\n        data: choiceWidgetDict\n      }]);\n      const {\n        data\n      } = await AnnotationFactory.create(xref, choiceWidgetRef, pdfManagerMock, idFactoryMock);\n      expect(data.annotationType).toEqual(AnnotationType.WIDGET);\n      expect(data.options).toEqual([]);\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should handle option arrays with array elements","suites":["annotation","ChoiceWidgetAnnotation"],"line":2343,"updatePoint":{"line":2343,"column":55,"index":104215},"code":"    it(\"should handle option arrays with array elements\", async function () {\n      const optionBarRef = Ref.get(20, 0);\n      const optionBarStr = \"Bar\";\n      const optionOneRef = Ref.get(10, 0);\n      const optionOneArr = [\"bar_export\", optionBarRef];\n      const options = [[\"foo_export\", \"Foo\"], optionOneRef];\n      const expected = [{\n        exportValue: \"foo_export\",\n        displayValue: \"Foo\"\n      }, {\n        exportValue: \"bar_export\",\n        displayValue: \"Bar\"\n      }];\n      choiceWidgetDict.set(\"Opt\", options);\n      const choiceWidgetRef = Ref.get(123, 0);\n      const xref = new XRefMock([{\n        ref: choiceWidgetRef,\n        data: choiceWidgetDict\n      }, {\n        ref: optionBarRef,\n        data: optionBarStr\n      }, {\n        ref: optionOneRef,\n        data: optionOneArr\n      }]);\n      const {\n        data\n      } = await AnnotationFactory.create(xref, choiceWidgetRef, pdfManagerMock, idFactoryMock);\n      expect(data.annotationType).toEqual(AnnotationType.WIDGET);\n      expect(data.options).toEqual(expected);\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should handle option arrays with string elements","suites":["annotation","ChoiceWidgetAnnotation"],"line":2374,"updatePoint":{"line":2374,"column":56,"index":105276},"code":"    it(\"should handle option arrays with string elements\", async function () {\n      const optionBarRef = Ref.get(10, 0);\n      const optionBarStr = \"Bar\";\n      const options = [\"Foo\", optionBarRef];\n      const expected = [{\n        exportValue: \"Foo\",\n        displayValue: \"Foo\"\n      }, {\n        exportValue: \"Bar\",\n        displayValue: \"Bar\"\n      }];\n      choiceWidgetDict.set(\"Opt\", options);\n      const choiceWidgetRef = Ref.get(981, 0);\n      const xref = new XRefMock([{\n        ref: choiceWidgetRef,\n        data: choiceWidgetDict\n      }, {\n        ref: optionBarRef,\n        data: optionBarStr\n      }]);\n      const {\n        data\n      } = await AnnotationFactory.create(xref, choiceWidgetRef, pdfManagerMock, idFactoryMock);\n      expect(data.annotationType).toEqual(AnnotationType.WIDGET);\n      expect(data.options).toEqual(expected);\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should handle inherited option arrays (issue 8094)","suites":["annotation","ChoiceWidgetAnnotation"],"line":2400,"updatePoint":{"line":2400,"column":58,"index":106144},"code":"    it(\"should handle inherited option arrays (issue 8094)\", async function () {\n      const options = [[\"Value1\", \"Description1\"], [\"Value2\", \"Description2\"]];\n      const expected = [{\n        exportValue: \"Value1\",\n        displayValue: \"Description1\"\n      }, {\n        exportValue: \"Value2\",\n        displayValue: \"Description2\"\n      }];\n      const parentDict = new Dict();\n      parentDict.set(\"Opt\", options);\n      choiceWidgetDict.set(\"Parent\", parentDict);\n      const choiceWidgetRef = Ref.get(123, 0);\n      const xref = new XRefMock([{\n        ref: choiceWidgetRef,\n        data: choiceWidgetDict\n      }]);\n      const {\n        data\n      } = await AnnotationFactory.create(xref, choiceWidgetRef, pdfManagerMock, idFactoryMock);\n      expect(data.annotationType).toEqual(AnnotationType.WIDGET);\n      expect(data.options).toEqual(expected);\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should decode form values","suites":["annotation","ChoiceWidgetAnnotation"],"line":2423,"updatePoint":{"line":2423,"column":33,"index":106985},"code":"    it(\"should decode form values\", async function () {\n      const encodedString = \"\\xFE\\xFF\\x00F\\x00o\\x00o\";\n      const decodedString = \"Foo\";\n      choiceWidgetDict.set(\"Opt\", [encodedString]);\n      choiceWidgetDict.set(\"V\", encodedString);\n      choiceWidgetDict.set(\"DV\", Name.get(\"foo\"));\n      const choiceWidgetRef = Ref.get(984, 0);\n      const xref = new XRefMock([{\n        ref: choiceWidgetRef,\n        data: choiceWidgetDict\n      }]);\n      const {\n        data\n      } = await AnnotationFactory.create(xref, choiceWidgetRef, pdfManagerMock, idFactoryMock);\n      expect(data.annotationType).toEqual(AnnotationType.WIDGET);\n      expect(data.fieldValue).toEqual([decodedString]);\n      expect(data.defaultFieldValue).toEqual(\"foo\");\n      expect(data.options).toEqual([{\n        exportValue: decodedString,\n        displayValue: decodedString\n      }]);\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should convert the field value to an array","suites":["annotation","ChoiceWidgetAnnotation"],"line":2445,"updatePoint":{"line":2445,"column":50,"index":107880},"code":"    it(\"should convert the field value to an array\", async function () {\n      const inputs = [null, \"Foo\", [\"Foo\", \"Bar\"]];\n      const outputs = [[], [\"Foo\"], [\"Foo\", \"Bar\"]];\n      let promise = Promise.resolve();\n      for (let i = 0, ii = inputs.length; i < ii; i++) {\n        promise = promise.then(() => {\n          choiceWidgetDict.set(\"V\", inputs[i]);\n          const choiceWidgetRef = Ref.get(968, 0);\n          const xref = new XRefMock([{\n            ref: choiceWidgetRef,\n            data: choiceWidgetDict\n          }]);\n          return AnnotationFactory.create(xref, choiceWidgetRef, pdfManagerMock, idFactoryMock).then(({\n            data\n          }) => {\n            expect(data.annotationType).toEqual(AnnotationType.WIDGET);\n            expect(data.fieldValue).toEqual(outputs[i]);\n          });\n        });\n      }\n      await promise;\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should handle unknown flags","suites":["annotation","ChoiceWidgetAnnotation"],"line":2467,"updatePoint":{"line":2467,"column":35,"index":108731},"code":"    it(\"should handle unknown flags\", async function () {\n      const choiceWidgetRef = Ref.get(166, 0);\n      const xref = new XRefMock([{\n        ref: choiceWidgetRef,\n        data: choiceWidgetDict\n      }]);\n      const {\n        data\n      } = await AnnotationFactory.create(xref, choiceWidgetRef, pdfManagerMock, idFactoryMock);\n      expect(data.annotationType).toEqual(AnnotationType.WIDGET);\n      expect(data.readOnly).toEqual(false);\n      expect(data.hidden).toEqual(false);\n      expect(data.combo).toEqual(false);\n      expect(data.multiSelect).toEqual(false);\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should not set invalid flags","suites":["annotation","ChoiceWidgetAnnotation"],"line":2482,"updatePoint":{"line":2482,"column":36,"index":109315},"code":"    it(\"should not set invalid flags\", async function () {\n      choiceWidgetDict.set(\"Ff\", \"readonly\");\n      const choiceWidgetRef = Ref.get(165, 0);\n      const xref = new XRefMock([{\n        ref: choiceWidgetRef,\n        data: choiceWidgetDict\n      }]);\n      const {\n        data\n      } = await AnnotationFactory.create(xref, choiceWidgetRef, pdfManagerMock, idFactoryMock);\n      expect(data.annotationType).toEqual(AnnotationType.WIDGET);\n      expect(data.readOnly).toEqual(false);\n      expect(data.hidden).toEqual(false);\n      expect(data.combo).toEqual(false);\n      expect(data.multiSelect).toEqual(false);\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should set valid flags","suites":["annotation","ChoiceWidgetAnnotation"],"line":2498,"updatePoint":{"line":2498,"column":30,"index":109939},"code":"    it(\"should set valid flags\", async function () {\n      choiceWidgetDict.set(\"Ff\", AnnotationFieldFlag.READONLY + AnnotationFieldFlag.COMBO + AnnotationFieldFlag.MULTISELECT);\n      const choiceWidgetRef = Ref.get(512, 0);\n      const xref = new XRefMock([{\n        ref: choiceWidgetRef,\n        data: choiceWidgetDict\n      }]);\n      const {\n        data\n      } = await AnnotationFactory.create(xref, choiceWidgetRef, pdfManagerMock, idFactoryMock);\n      expect(data.annotationType).toEqual(AnnotationType.WIDGET);\n      expect(data.readOnly).toEqual(true);\n      expect(data.hidden).toEqual(false);\n      expect(data.combo).toEqual(true);\n      expect(data.multiSelect).toEqual(true);\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should render choice for printing","suites":["annotation","ChoiceWidgetAnnotation"],"line":2514,"updatePoint":{"line":2514,"column":41,"index":110651},"code":"    it(\"should render choice for printing\", async function () {\n      const choiceWidgetRef = Ref.get(271, 0);\n      const xref = new XRefMock([{\n        ref: choiceWidgetRef,\n        data: choiceWidgetDict\n      }, fontRefObj]);\n      const task = new WorkerTask(\"test print\");\n      partialEvaluator.xref = xref;\n      const annotation = await AnnotationFactory.create(xref, choiceWidgetRef, pdfManagerMock, idFactoryMock);\n      const annotationStorage = new Map();\n      annotationStorage.set(annotation.data.id, {\n        value: \"a value\"\n      });\n      const appearance = await annotation._getAppearance(partialEvaluator, task, RenderingIntentFlag.PRINT, annotationStorage);\n      expect(appearance).toEqual([\"/Tx BMC q\", \"1 1 32 10 re W n\", \"BT\", \"/Helv 5 Tf\", \"1 0 0 1 0 10 Tm\", \"ET Q EMC\"].join(\"\\n\"));\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should render choice with multiple selections but one is visible for printing","suites":["annotation","ChoiceWidgetAnnotation"],"line":2530,"updatePoint":{"line":2530,"column":85,"index":111516},"code":"    it(\"should render choice with multiple selections but one is visible for printing\", async function () {\n      choiceWidgetDict.set(\"Ff\", AnnotationFieldFlag.MULTISELECT);\n      choiceWidgetDict.set(\"Opt\", [[\"A\", \"a\"], [\"B\", \"b\"], [\"C\", \"c\"], [\"D\", \"d\"]]);\n      choiceWidgetDict.set(\"V\", [\"A\"]);\n      const choiceWidgetRef = Ref.get(271, 0);\n      const xref = new XRefMock([{\n        ref: choiceWidgetRef,\n        data: choiceWidgetDict\n      }, fontRefObj]);\n      const task = new WorkerTask(\"test print\");\n      partialEvaluator.xref = xref;\n      const annotation = await AnnotationFactory.create(xref, choiceWidgetRef, pdfManagerMock, idFactoryMock);\n      const annotationStorage = new Map();\n      annotationStorage.set(annotation.data.id, {\n        value: [\"A\", \"C\"]\n      });\n      const appearance = await annotation._getAppearance(partialEvaluator, task, RenderingIntentFlag.PRINT, annotationStorage);\n      expect(appearance).toEqual([\"/Tx BMC q\", \"1 1 32 10 re W n\", \"0.600006 0.756866 0.854904 rg\", \"1 3.25 32 6.75 re f\", \"BT\", \"/Helv 5 Tf\", \"1 0 0 1 0 10 Tm\", \"2 -5.88 Td (a) Tj\", \"0 -6.75 Td (b) Tj\", \"ET Q EMC\"].join(\"\\n\"));\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should render choice with multiple selections for printing","suites":["annotation","ChoiceWidgetAnnotation"],"line":2549,"updatePoint":{"line":2549,"column":66,"index":112653},"code":"    it(\"should render choice with multiple selections for printing\", async function () {\n      choiceWidgetDict.set(\"Ff\", AnnotationFieldFlag.MULTISELECT);\n      choiceWidgetDict.set(\"Opt\", [[\"A\", \"a\"], [\"B\", \"b\"], [\"C\", \"c\"], [\"D\", \"d\"]]);\n      choiceWidgetDict.set(\"V\", [\"A\"]);\n      const choiceWidgetRef = Ref.get(271, 0);\n      const xref = new XRefMock([{\n        ref: choiceWidgetRef,\n        data: choiceWidgetDict\n      }, fontRefObj]);\n      const task = new WorkerTask(\"test print\");\n      partialEvaluator.xref = xref;\n      const annotation = await AnnotationFactory.create(xref, choiceWidgetRef, pdfManagerMock, idFactoryMock);\n      const annotationStorage = new Map();\n      annotationStorage.set(annotation.data.id, {\n        value: [\"B\", \"C\"]\n      });\n      const appearance = await annotation._getAppearance(partialEvaluator, task, RenderingIntentFlag.PRINT, annotationStorage);\n      expect(appearance).toEqual([\"/Tx BMC q\", \"1 1 32 10 re W n\", \"0.600006 0.756866 0.854904 rg\", \"1 3.25 32 6.75 re f\", \"1 -3.5 32 6.75 re f\", \"BT\", \"/Helv 5 Tf\", \"1 0 0 1 0 10 Tm\", \"2 -5.88 Td (b) Tj\", \"0 -6.75 Td (c) Tj\", \"ET Q EMC\"].join(\"\\n\"));\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should save rotated choice","suites":["annotation","ChoiceWidgetAnnotation"],"line":2568,"updatePoint":{"line":2568,"column":34,"index":113781},"code":"    it(\"should save rotated choice\", async function () {\n      choiceWidgetDict.set(\"Opt\", [\"A\", \"B\", \"C\"]);\n      choiceWidgetDict.set(\"V\", \"A\");\n      const choiceWidgetRef = Ref.get(123, 0);\n      const xref = new XRefMock([{\n        ref: choiceWidgetRef,\n        data: choiceWidgetDict\n      }, fontRefObj]);\n      partialEvaluator.xref = xref;\n      const task = new WorkerTask(\"test save\");\n      const annotation = await AnnotationFactory.create(xref, choiceWidgetRef, pdfManagerMock, idFactoryMock);\n      const annotationStorage = new Map();\n      annotationStorage.set(annotation.data.id, {\n        value: \"C\",\n        rotation: 270\n      });\n      const data = await annotation.save(partialEvaluator, task, annotationStorage);\n      expect(data.length).toEqual(2);\n      const [oldData, newData] = data;\n      expect(oldData.ref).toEqual(Ref.get(123, 0));\n      expect(newData.ref).toEqual(Ref.get(2, 0));\n      oldData.data = oldData.data.replace(/\\(D:\\d+\\)/, \"(date)\");\n      expect(oldData.data).toEqual(\"123 0 obj\\n\" + \"<< /Type /Annot /Subtype /Widget /FT /Ch /DA (/Helv 5 Tf) /DR \" + \"<< /Font << /Helv 314 0 R>>>> \" + \"/Rect [0 0 32 10] /Opt [(A) (B) (C)] /V (C) \" + \"/MK << /R 270>> /AP << /N 2 0 R>> /M (date)>>\\nendobj\\n\");\n      expect(newData.data).toEqual([\"2 0 obj\", \"<< /Subtype /Form /Resources << /Font << /Helv 314 0 R>>>> \" + \"/BBox [0 0 32 10] /Matrix [0 -1 1 0 0 10] /Length 170>> stream\", \"/Tx BMC q\", \"1 1 10 32 re W n\", \"0.600006 0.756866 0.854904 rg\", \"1 11.75 10 6.75 re f\", \"BT\", \"/Helv 5 Tf\", \"1 0 0 1 0 32 Tm\", \"2 -5.88 Td (A) Tj\", \"0 -6.75 Td (B) Tj\", \"0 -6.75 Td (C) Tj\", \"ET Q EMC\", \"endstream\", \"endobj\\n\"].join(\"\\n\"));\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should save choice","suites":["annotation","ChoiceWidgetAnnotation"],"line":2593,"updatePoint":{"line":2593,"column":26,"index":115445},"code":"    it(\"should save choice\", async function () {\n      choiceWidgetDict.set(\"Opt\", [\"A\", \"B\", \"C\"]);\n      choiceWidgetDict.set(\"V\", \"A\");\n      const choiceWidgetRef = Ref.get(123, 0);\n      const xref = new XRefMock([{\n        ref: choiceWidgetRef,\n        data: choiceWidgetDict\n      }, fontRefObj]);\n      partialEvaluator.xref = xref;\n      const task = new WorkerTask(\"test save\");\n      const annotation = await AnnotationFactory.create(xref, choiceWidgetRef, pdfManagerMock, idFactoryMock);\n      const annotationStorage = new Map();\n      annotationStorage.set(annotation.data.id, {\n        value: \"C\"\n      });\n      const data = await annotation.save(partialEvaluator, task, annotationStorage);\n      expect(data.length).toEqual(2);\n      const [oldData, newData] = data;\n      expect(oldData.ref).toEqual(Ref.get(123, 0));\n      expect(newData.ref).toEqual(Ref.get(2, 0));\n      oldData.data = oldData.data.replace(/\\(D:\\d+\\)/, \"(date)\");\n      expect(oldData.data).toEqual(\"123 0 obj\\n\" + \"<< /Type /Annot /Subtype /Widget /FT /Ch /DA (/Helv 5 Tf) /DR \" + \"<< /Font << /Helv 314 0 R>>>> \" + \"/Rect [0 0 32 10] /Opt [(A) (B) (C)] /V (C) \" + \"/AP << /N 2 0 R>> /M (date)>>\\nendobj\\n\");\n      expect(newData.data).toEqual([\"2 0 obj\", \"<< /Subtype /Form /Resources << /Font << /Helv 314 0 R>>>> \" + \"/BBox [0 0 32 10] /Length 133>> stream\", \"/Tx BMC q\", \"1 1 32 10 re W n\", \"0.600006 0.756866 0.854904 rg\", \"1 3.25 32 6.75 re f\", \"BT\", \"/Helv 5 Tf\", \"1 0 0 1 0 10 Tm\", \"2 -5.88 Td (C) Tj\", \"ET Q EMC\", \"endstream\", \"endobj\\n\"].join(\"\\n\"));\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should save choice with multiple selections","suites":["annotation","ChoiceWidgetAnnotation"],"line":2617,"updatePoint":{"line":2617,"column":51,"index":117028},"code":"    it(\"should save choice with multiple selections\", async function () {\n      choiceWidgetDict.set(\"Ff\", AnnotationFieldFlag.MULTISELECT);\n      choiceWidgetDict.set(\"Opt\", [[\"A\", \"a\"], [\"B\", \"b\"], [\"C\", \"c\"], [\"D\", \"d\"]]);\n      choiceWidgetDict.set(\"V\", [\"A\"]);\n      const choiceWidgetRef = Ref.get(123, 0);\n      const xref = new XRefMock([{\n        ref: choiceWidgetRef,\n        data: choiceWidgetDict\n      }, fontRefObj]);\n      const task = new WorkerTask(\"test save\");\n      partialEvaluator.xref = xref;\n      const annotation = await AnnotationFactory.create(xref, choiceWidgetRef, pdfManagerMock, idFactoryMock);\n      const annotationStorage = new Map();\n      annotationStorage.set(annotation.data.id, {\n        value: [\"B\", \"C\"]\n      });\n      const data = await annotation.save(partialEvaluator, task, annotationStorage);\n      expect(data.length).toEqual(2);\n      const [oldData, newData] = data;\n      expect(oldData.ref).toEqual(Ref.get(123, 0));\n      expect(newData.ref).toEqual(Ref.get(2, 0));\n      oldData.data = oldData.data.replace(/\\(D:\\d+\\)/, \"(date)\");\n      expect(oldData.data).toEqual(\"123 0 obj\\n\" + \"<< /Type /Annot /Subtype /Widget /FT /Ch /DA (/Helv 5 Tf) /DR \" + \"<< /Font << /Helv 314 0 R>>>> /Rect [0 0 32 10] /Ff 2097152 /Opt \" + \"[[(A) (a)] [(B) (b)] [(C) (c)] [(D) (d)]] /V [(B) (C)] /AP \" + \"<< /N 2 0 R>> /M (date)>>\\nendobj\\n\");\n      expect(newData.data).toEqual([\"2 0 obj\", \"<< /Subtype /Form /Resources << /Font << /Helv 314 0 R>>>> \" + \"/BBox [0 0 32 10] /Length 171>> stream\", \"/Tx BMC q\", \"1 1 32 10 re W n\", \"0.600006 0.756866 0.854904 rg\", \"1 3.25 32 6.75 re f\", \"1 -3.5 32 6.75 re f\", \"BT\", \"/Helv 5 Tf\", \"1 0 0 1 0 10 Tm\", \"2 -5.88 Td (b) Tj\", \"0 -6.75 Td (c) Tj\", \"ET Q EMC\", \"endstream\", \"endobj\\n\"].join(\"\\n\"));\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should set the line coordinates","suites":["annotation","LineAnnotation"],"line":2644,"updatePoint":{"line":2644,"column":39,"index":118847},"code":"    it(\"should set the line coordinates\", async function () {\n      const lineDict = new Dict();\n      lineDict.set(\"Type\", Name.get(\"Annot\"));\n      lineDict.set(\"Subtype\", Name.get(\"Line\"));\n      lineDict.set(\"L\", [1, 2, 3, 4]);\n      lineDict.set(\"LE\", [\"Square\", \"Circle\"]);\n      const lineRef = Ref.get(122, 0);\n      const xref = new XRefMock([{\n        ref: lineRef,\n        data: lineDict\n      }]);\n      const {\n        data\n      } = await AnnotationFactory.create(xref, lineRef, pdfManagerMock, idFactoryMock);\n      expect(data.annotationType).toEqual(AnnotationType.LINE);\n      expect(data.lineCoordinates).toEqual([1, 2, 3, 4]);\n      expect(data.lineEndings).toEqual([\"None\", \"None\"]);\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should set the line endings","suites":["annotation","LineAnnotation"],"line":2662,"updatePoint":{"line":2662,"column":35,"index":119556},"code":"    it(\"should set the line endings\", async function () {\n      const lineDict = new Dict();\n      lineDict.set(\"Type\", Name.get(\"Annot\"));\n      lineDict.set(\"Subtype\", Name.get(\"Line\"));\n      lineDict.set(\"L\", [1, 2, 3, 4]);\n      lineDict.set(\"LE\", [Name.get(\"Square\"), Name.get(\"Circle\")]);\n      const lineRef = Ref.get(122, 0);\n      const xref = new XRefMock([{\n        ref: lineRef,\n        data: lineDict\n      }]);\n      const {\n        data\n      } = await AnnotationFactory.create(xref, lineRef, pdfManagerMock, idFactoryMock);\n      expect(data.annotationType).toEqual(AnnotationType.LINE);\n      expect(data.lineCoordinates).toEqual([1, 2, 3, 4]);\n      expect(data.lineEndings).toEqual([\"Square\", \"Circle\"]);\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should correctly parse a file attachment","suites":["annotation","FileAttachmentAnnotation"],"line":2682,"updatePoint":{"line":2682,"column":48,"index":120361},"code":"    it(\"should correctly parse a file attachment\", async function () {\n      const fileStream = new StringStream(\"<<\\n\" + \"/Type /EmbeddedFile\\n\" + \"/Subtype /text#2Fplain\\n\" + \">>\\n\" + \"stream\\n\" + \"Test attachment\" + \"endstream\\n\");\n      const parser = new Parser({\n        lexer: new Lexer(fileStream),\n        xref: null,\n        allowStreams: true\n      });\n      const fileStreamRef = Ref.get(18, 0);\n      const fileStreamDict = parser.getObj();\n      const embeddedFileDict = new Dict();\n      embeddedFileDict.set(\"F\", fileStreamRef);\n      const fileSpecRef = Ref.get(19, 0);\n      const fileSpecDict = new Dict();\n      fileSpecDict.set(\"Type\", Name.get(\"Filespec\"));\n      fileSpecDict.set(\"Desc\", \"\");\n      fileSpecDict.set(\"EF\", embeddedFileDict);\n      fileSpecDict.set(\"UF\", \"Test.txt\");\n      const fileAttachmentRef = Ref.get(20, 0);\n      const fileAttachmentDict = new Dict();\n      fileAttachmentDict.set(\"Type\", Name.get(\"Annot\"));\n      fileAttachmentDict.set(\"Subtype\", Name.get(\"FileAttachment\"));\n      fileAttachmentDict.set(\"FS\", fileSpecRef);\n      fileAttachmentDict.set(\"T\", \"Topic\");\n      fileAttachmentDict.set(\"Contents\", \"Test.txt\");\n      const xref = new XRefMock([{\n        ref: fileStreamRef,\n        data: fileStreamDict\n      }, {\n        ref: fileSpecRef,\n        data: fileSpecDict\n      }, {\n        ref: fileAttachmentRef,\n        data: fileAttachmentDict\n      }]);\n      embeddedFileDict.assignXref(xref);\n      fileSpecDict.assignXref(xref);\n      fileAttachmentDict.assignXref(xref);\n      const {\n        data\n      } = await AnnotationFactory.create(xref, fileAttachmentRef, pdfManagerMock, idFactoryMock);\n      expect(data.annotationType).toEqual(AnnotationType.FILEATTACHMENT);\n      expect(data.file.filename).toEqual(\"Test.txt\");\n      expect(data.file.content).toEqual(stringToBytes(\"Test attachment\"));\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should inherit properties from its parent","suites":["annotation","PopupAnnotation"],"line":2728,"updatePoint":{"line":2728,"column":49,"index":122284},"code":"    it(\"should inherit properties from its parent\", async function () {\n      const parentDict = new Dict();\n      parentDict.set(\"Type\", Name.get(\"Annot\"));\n      parentDict.set(\"Subtype\", Name.get(\"Text\"));\n      parentDict.set(\"M\", \"D:20190423\");\n      parentDict.set(\"C\", [0, 0, 1]);\n      const popupDict = new Dict();\n      popupDict.set(\"Type\", Name.get(\"Annot\"));\n      popupDict.set(\"Subtype\", Name.get(\"Popup\"));\n      popupDict.set(\"Parent\", parentDict);\n      const popupRef = Ref.get(13, 0);\n      const xref = new XRefMock([{\n        ref: popupRef,\n        data: popupDict\n      }]);\n      const {\n        data\n      } = await AnnotationFactory.create(xref, popupRef, pdfManagerMock, idFactoryMock);\n      expect(data.annotationType).toEqual(AnnotationType.POPUP);\n      expect(data.modificationDate).toEqual(\"D:20190423\");\n      expect(data.color).toEqual(new Uint8ClampedArray([0, 0, 255]));\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should handle missing parent properties","suites":["annotation","PopupAnnotation"],"line":2750,"updatePoint":{"line":2750,"column":47,"index":123198},"code":"    it(\"should handle missing parent properties\", async function () {\n      const parentDict = new Dict();\n      parentDict.set(\"Type\", Name.get(\"Annot\"));\n      parentDict.set(\"Subtype\", Name.get(\"Text\"));\n      const popupDict = new Dict();\n      popupDict.set(\"Type\", Name.get(\"Annot\"));\n      popupDict.set(\"Subtype\", Name.get(\"Popup\"));\n      popupDict.set(\"Parent\", parentDict);\n      const popupRef = Ref.get(13, 0);\n      const xref = new XRefMock([{\n        ref: popupRef,\n        data: popupDict\n      }]);\n      const {\n        data\n      } = await AnnotationFactory.create(xref, popupRef, pdfManagerMock, idFactoryMock);\n      expect(data.annotationType).toEqual(AnnotationType.POPUP);\n      expect(data.modificationDate).toEqual(null);\n      expect(data.color).toEqual(null);\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should create a new FreeText annotation","suites":["annotation","FreeTextAnnotation"],"line":2855,"updatePoint":{"line":2855,"column":47,"index":127295},"code":"    it(\"should create a new FreeText annotation\", async () => {\n      partialEvaluator.xref = new XRefMock();\n      const task = new WorkerTask(\"test FreeText creation\");\n      const data = await AnnotationFactory.saveNewAnnotations(partialEvaluator, task, [{\n        annotationType: AnnotationEditorType.FREETEXT,\n        rect: [12, 34, 56, 78],\n        rotation: 0,\n        fontSize: 10,\n        color: [0, 0, 0],\n        value: \"Hello PDF.js World!\"\n      }]);\n      const base = data.annotations[0].data.replace(/\\(D:\\d+\\)/, \"(date)\");\n      expect(base).toEqual(\"2 0 obj\\n\" + \"<< /Type /Annot /Subtype /FreeText /CreationDate (date) \" + \"/Rect [12 34 56 78] /DA (/Helv 10 Tf 0 g) /Contents (Hello PDF.js World!) \" + \"/F 4 /Border [0 0 0] /Rotate 0 /AP << /N 3 0 R>>>>\\n\" + \"endobj\\n\");\n      const font = data.dependencies[0].data;\n      expect(font).toEqual(\"1 0 obj\\n\" + \"<< /BaseFont /Helvetica /Type /Font /Subtype /Type1 /Encoding \" + \"/WinAnsiEncoding>>\\n\" + \"endobj\\n\");\n      const appearance = data.dependencies[1].data;\n      expect(appearance).toEqual(\"3 0 obj\\n\" + \"<< /FormType 1 /Subtype /Form /Type /XObject /BBox [0 0 44 44] \" + \"/Resources << /Font << /Helv 1 0 R>>>> /Length 101>> stream\\n\" + \"q\\n\" + \"0 0 44 44 re W n\\n\" + \"BT\\n\" + \"1 0 0 1 0 47.5 Tm 0 Tc 0 g\\n\" + \"/Helv 10 Tf\\n\" + \"0 -13.5 Td (Hello PDF.js World!) Tj\\n\" + \"ET\\n\" + \"Q\\n\" + \"endstream\\n\" + \"endobj\\n\");\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should render an added FreeText annotation for printing","suites":["annotation","FreeTextAnnotation"],"line":2873,"updatePoint":{"line":2873,"column":63,"index":128714},"code":"    it(\"should render an added FreeText annotation for printing\", async function () {\n      partialEvaluator.xref = new XRefMock();\n      const task = new WorkerTask(\"test FreeText printing\");\n      const freetextAnnotation = (await AnnotationFactory.printNewAnnotations(partialEvaluator, task, [{\n        annotationType: AnnotationEditorType.FREETEXT,\n        rect: [12, 34, 56, 78],\n        rotation: 0,\n        fontSize: 10,\n        color: [0, 0, 0],\n        value: \"A\"\n      }]))[0];\n      const {\n        opList\n      } = await freetextAnnotation.getOperatorList(partialEvaluator, task, RenderingIntentFlag.PRINT, false, null);\n      expect(opList.fnArray.length).toEqual(16);\n      expect(opList.fnArray).toEqual([OPS.beginAnnotation, OPS.save, OPS.constructPath, OPS.clip, OPS.endPath, OPS.beginText, OPS.setTextMatrix, OPS.setCharSpacing, OPS.setFillRGBColor, OPS.dependency, OPS.setFont, OPS.moveText, OPS.showText, OPS.endText, OPS.restore, OPS.endAnnotation]);\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should extract the text from a FreeText annotation","suites":["annotation","FreeTextAnnotation"],"line":2890,"updatePoint":{"line":2890,"column":58,"index":129689},"code":"    it(\"should extract the text from a FreeText annotation\", async function () {\n      partialEvaluator.xref = new XRefMock();\n      const task = new WorkerTask(\"test FreeText text extraction\");\n      const freetextAnnotation = (await AnnotationFactory.printNewAnnotations(partialEvaluator, task, [{\n        annotationType: AnnotationEditorType.FREETEXT,\n        rect: [12, 34, 56, 78],\n        rotation: 0,\n        fontSize: 10,\n        color: [0, 0, 0],\n        value: \"Hello PDF.js\\nWorld !\"\n      }]))[0];\n      await freetextAnnotation.extractTextContent(partialEvaluator, task, [-Infinity, -Infinity, Infinity, Infinity]);\n      expect(freetextAnnotation.data.textContent).toEqual([\"Hello PDF.js\", \"World !\"]);\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should handle a single ink list","suites":["annotation","InkAnnotation"],"line":2906,"updatePoint":{"line":2906,"column":39,"index":130443},"code":"    it(\"should handle a single ink list\", async function () {\n      const inkDict = new Dict();\n      inkDict.set(\"Type\", Name.get(\"Annot\"));\n      inkDict.set(\"Subtype\", Name.get(\"Ink\"));\n      inkDict.set(\"InkList\", [[1, 1, 1, 2, 2, 2, 3, 3]]);\n      const inkRef = Ref.get(142, 0);\n      const xref = new XRefMock([{\n        ref: inkRef,\n        data: inkDict\n      }]);\n      const {\n        data\n      } = await AnnotationFactory.create(xref, inkRef, pdfManagerMock, idFactoryMock);\n      expect(data.annotationType).toEqual(AnnotationType.INK);\n      expect(data.inkLists.length).toEqual(1);\n      expect(data.inkLists[0]).toEqual([{\n        x: 1,\n        y: 1\n      }, {\n        x: 1,\n        y: 2\n      }, {\n        x: 2,\n        y: 2\n      }, {\n        x: 3,\n        y: 3\n      }]);\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should handle multiple ink lists","suites":["annotation","InkAnnotation"],"line":2935,"updatePoint":{"line":2935,"column":40,"index":131244},"code":"    it(\"should handle multiple ink lists\", async function () {\n      const inkDict = new Dict();\n      inkDict.set(\"Type\", Name.get(\"Annot\"));\n      inkDict.set(\"Subtype\", Name.get(\"Ink\"));\n      inkDict.set(\"InkList\", [[1, 1, 1, 2], [3, 3, 4, 5]]);\n      const inkRef = Ref.get(143, 0);\n      const xref = new XRefMock([{\n        ref: inkRef,\n        data: inkDict\n      }]);\n      const {\n        data\n      } = await AnnotationFactory.create(xref, inkRef, pdfManagerMock, idFactoryMock);\n      expect(data.annotationType).toEqual(AnnotationType.INK);\n      expect(data.inkLists.length).toEqual(2);\n      expect(data.inkLists[0]).toEqual([{\n        x: 1,\n        y: 1\n      }, {\n        x: 1,\n        y: 2\n      }]);\n      expect(data.inkLists[1]).toEqual([{\n        x: 3,\n        y: 3\n      }, {\n        x: 4,\n        y: 5\n      }]);\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should create a new Ink annotation","suites":["annotation","InkAnnotation"],"line":2965,"updatePoint":{"line":2965,"column":42,"index":132091},"code":"    it(\"should create a new Ink annotation\", async function () {\n      partialEvaluator.xref = new XRefMock();\n      const task = new WorkerTask(\"test Ink creation\");\n      const data = await AnnotationFactory.saveNewAnnotations(partialEvaluator, task, [{\n        annotationType: AnnotationEditorType.INK,\n        rect: [12, 34, 56, 78],\n        rotation: 0,\n        thickness: 1,\n        opacity: 1,\n        color: [0, 0, 0],\n        paths: [{\n          bezier: [10, 11, 12, 13, 14, 15, 16, 17, 22, 23, 24, 25, 26, 27],\n          points: [1, 2, 3, 4, 5, 6, 7, 8]\n        }, {\n          bezier: [910, 911, 912, 913, 914, 915, 916, 917, 922, 923, 924, 925, 926, 927],\n          points: [91, 92, 93, 94, 95, 96, 97, 98]\n        }]\n      }]);\n      const base = data.annotations[0].data.replace(/\\(D:\\d+\\)/, \"(date)\");\n      expect(base).toEqual(\"1 0 obj\\n\" + \"<< /Type /Annot /Subtype /Ink /CreationDate (date) /Rect [12 34 56 78] \" + \"/InkList [[1 2 3 4 5 6 7 8] [91 92 93 94 95 96 97 98]] /F 4 \" + \"/Rotate 0 /BS << /W 1>> /C [0 0 0] /CA 1 /AP << /N 2 0 R>>>>\\n\" + \"endobj\\n\");\n      const appearance = data.dependencies[0].data;\n      expect(appearance).toEqual(\"2 0 obj\\n\" + \"<< /FormType 1 /Subtype /Form /Type /XObject /BBox [12 34 56 78] /Length 129>> stream\\n\" + \"1 w 1 J 1 j\\n\" + \"0 G\\n\" + \"10 11 m\\n\" + \"12 13 14 15 16 17 c\\n\" + \"22 23 24 25 26 27 c\\n\" + \"S\\n\" + \"910 911 m\\n\" + \"912 913 914 915 916 917 c\\n\" + \"922 923 924 925 926 927 c\\n\" + \"S\\n\" + \"endstream\\n\" + \"endobj\\n\");\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should create a new Ink annotation with some transparency","suites":["annotation","InkAnnotation"],"line":2988,"updatePoint":{"line":2988,"column":65,"index":133610},"code":"    it(\"should create a new Ink annotation with some transparency\", async function () {\n      partialEvaluator.xref = new XRefMock();\n      const task = new WorkerTask(\"test Ink creation\");\n      const data = await AnnotationFactory.saveNewAnnotations(partialEvaluator, task, [{\n        annotationType: AnnotationEditorType.INK,\n        rect: [12, 34, 56, 78],\n        rotation: 0,\n        thickness: 1,\n        opacity: 0.12,\n        color: [0, 0, 0],\n        paths: [{\n          bezier: [10, 11, 12, 13, 14, 15, 16, 17, 22, 23, 24, 25, 26, 27],\n          points: [1, 2, 3, 4, 5, 6, 7, 8]\n        }, {\n          bezier: [910, 911, 912, 913, 914, 915, 916, 917, 922, 923, 924, 925, 926, 927],\n          points: [91, 92, 93, 94, 95, 96, 97, 98]\n        }]\n      }]);\n      const base = data.annotations[0].data.replace(/\\(D:\\d+\\)/, \"(date)\");\n      expect(base).toEqual(\"1 0 obj\\n\" + \"<< /Type /Annot /Subtype /Ink /CreationDate (date) /Rect [12 34 56 78] \" + \"/InkList [[1 2 3 4 5 6 7 8] [91 92 93 94 95 96 97 98]] /F 4 \" + \"/Rotate 0 /BS << /W 1>> /C [0 0 0] /CA 0.12 /AP << /N 2 0 R>>>>\\n\" + \"endobj\\n\");\n      const appearance = data.dependencies[0].data;\n      expect(appearance).toEqual(\"2 0 obj\\n\" + \"<< /FormType 1 /Subtype /Form /Type /XObject /BBox [12 34 56 78] /Length 136 /Resources \" + \"<< /ExtGState << /R0 << /CA 0.12 /Type /ExtGState>>>>>>>> stream\\n\" + \"1 w 1 J 1 j\\n\" + \"0 G\\n\" + \"/R0 gs\\n\" + \"10 11 m\\n\" + \"12 13 14 15 16 17 c\\n\" + \"22 23 24 25 26 27 c\\n\" + \"S\\n\" + \"910 911 m\\n\" + \"912 913 914 915 916 917 c\\n\" + \"922 923 924 925 926 927 c\\n\" + \"S\\n\" + \"endstream\\n\" + \"endobj\\n\");\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should render an added Ink annotation for printing","suites":["annotation","InkAnnotation"],"line":3011,"updatePoint":{"line":3011,"column":58,"index":135213},"code":"    it(\"should render an added Ink annotation for printing\", async function () {\n      partialEvaluator.xref = new XRefMock();\n      const task = new WorkerTask(\"test Ink printing\");\n      const inkAnnotation = (await AnnotationFactory.printNewAnnotations(partialEvaluator, task, [{\n        annotationType: AnnotationEditorType.INK,\n        rect: [12, 34, 56, 78],\n        rotation: 0,\n        thickness: 3,\n        opacity: 1,\n        color: [0, 255, 0],\n        paths: [{\n          bezier: [1, 2, 3, 4, 5, 6, 7, 8],\n          // Useless in the printing case.\n          points: [1, 2, 3, 4, 5, 6, 7, 8]\n        }]\n      }]))[0];\n      const {\n        opList\n      } = await inkAnnotation.getOperatorList(partialEvaluator, task, RenderingIntentFlag.PRINT, false, null);\n      expect(opList.argsArray.length).toEqual(8);\n      expect(opList.fnArray).toEqual([OPS.beginAnnotation, OPS.setLineWidth, OPS.setLineCap, OPS.setLineJoin, OPS.setStrokeRGBColor, OPS.constructPath, OPS.stroke, OPS.endAnnotation]);\n\n      // Linewidth.\n      expect(opList.argsArray[1]).toEqual([3]);\n      // LineCap.\n      expect(opList.argsArray[2]).toEqual([1]);\n      // LineJoin.\n      expect(opList.argsArray[3]).toEqual([1]);\n      // Color.\n      expect(opList.argsArray[4]).toEqual(new Uint8ClampedArray([0, 255, 0]));\n      // Path.\n      expect(opList.argsArray[5][0]).toEqual([OPS.moveTo, OPS.curveTo]);\n      expect(opList.argsArray[5][1]).toEqual([1, 2, 3, 4, 5, 6, 7, 8]);\n      // Min-max.\n      expect(opList.argsArray[5][2]).toEqual([1, 1, 2, 2]);\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should set quadpoints to null if not defined","suites":["annotation","HightlightAnnotation"],"line":3049,"updatePoint":{"line":3049,"column":52,"index":136810},"code":"    it(\"should set quadpoints to null if not defined\", async function () {\n      const highlightDict = new Dict();\n      highlightDict.set(\"Type\", Name.get(\"Annot\"));\n      highlightDict.set(\"Subtype\", Name.get(\"Highlight\"));\n      const highlightRef = Ref.get(121, 0);\n      const xref = new XRefMock([{\n        ref: highlightRef,\n        data: highlightDict\n      }]);\n      const {\n        data\n      } = await AnnotationFactory.create(xref, highlightRef, pdfManagerMock, idFactoryMock);\n      expect(data.annotationType).toEqual(AnnotationType.HIGHLIGHT);\n      expect(data.quadPoints).toEqual(null);\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should set quadpoints if defined","suites":["annotation","HightlightAnnotation"],"line":3064,"updatePoint":{"line":3064,"column":40,"index":137411},"code":"    it(\"should set quadpoints if defined\", async function () {\n      const highlightDict = new Dict();\n      highlightDict.set(\"Type\", Name.get(\"Annot\"));\n      highlightDict.set(\"Subtype\", Name.get(\"Highlight\"));\n      highlightDict.set(\"Rect\", [10, 10, 20, 20]);\n      highlightDict.set(\"QuadPoints\", [10, 20, 20, 20, 10, 10, 20, 10]);\n      const highlightRef = Ref.get(121, 0);\n      const xref = new XRefMock([{\n        ref: highlightRef,\n        data: highlightDict\n      }]);\n      const {\n        data\n      } = await AnnotationFactory.create(xref, highlightRef, pdfManagerMock, idFactoryMock);\n      expect(data.annotationType).toEqual(AnnotationType.HIGHLIGHT);\n      expect(data.quadPoints).toEqual([[{\n        x: 10,\n        y: 20\n      }, {\n        x: 20,\n        y: 20\n      }, {\n        x: 10,\n        y: 10\n      }, {\n        x: 20,\n        y: 10\n      }]]);\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should set quadpoints to null when empty","suites":["annotation","HightlightAnnotation"],"line":3093,"updatePoint":{"line":3093,"column":48,"index":138302},"code":"    it(\"should set quadpoints to null when empty\", async function () {\n      const highlightDict = new Dict();\n      highlightDict.set(\"Type\", Name.get(\"Annot\"));\n      highlightDict.set(\"Subtype\", Name.get(\"Highlight\"));\n      highlightDict.set(\"Rect\", [10, 10, 20, 20]);\n      highlightDict.set(\"QuadPoints\", []);\n      const highlightRef = Ref.get(121, 0);\n      const xref = new XRefMock([{\n        ref: highlightRef,\n        data: highlightDict\n      }]);\n      const {\n        data\n      } = await AnnotationFactory.create(xref, highlightRef, pdfManagerMock, idFactoryMock);\n      expect(data.annotationType).toEqual(AnnotationType.HIGHLIGHT);\n      expect(data.quadPoints).toEqual(null);\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should set quadpoints to null if not defined","suites":["annotation","UnderlineAnnotation"],"line":3112,"updatePoint":{"line":3112,"column":52,"index":139063},"code":"    it(\"should set quadpoints to null if not defined\", async function () {\n      const underlineDict = new Dict();\n      underlineDict.set(\"Type\", Name.get(\"Annot\"));\n      underlineDict.set(\"Subtype\", Name.get(\"Underline\"));\n      const underlineRef = Ref.get(121, 0);\n      const xref = new XRefMock([{\n        ref: underlineRef,\n        data: underlineDict\n      }]);\n      const {\n        data\n      } = await AnnotationFactory.create(xref, underlineRef, pdfManagerMock, idFactoryMock);\n      expect(data.annotationType).toEqual(AnnotationType.UNDERLINE);\n      expect(data.quadPoints).toEqual(null);\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should set quadpoints if defined","suites":["annotation","UnderlineAnnotation"],"line":3127,"updatePoint":{"line":3127,"column":40,"index":139664},"code":"    it(\"should set quadpoints if defined\", async function () {\n      const underlineDict = new Dict();\n      underlineDict.set(\"Type\", Name.get(\"Annot\"));\n      underlineDict.set(\"Subtype\", Name.get(\"Underline\"));\n      underlineDict.set(\"Rect\", [10, 10, 20, 20]);\n      underlineDict.set(\"QuadPoints\", [10, 20, 20, 20, 10, 10, 20, 10]);\n      const underlineRef = Ref.get(121, 0);\n      const xref = new XRefMock([{\n        ref: underlineRef,\n        data: underlineDict\n      }]);\n      const {\n        data\n      } = await AnnotationFactory.create(xref, underlineRef, pdfManagerMock, idFactoryMock);\n      expect(data.annotationType).toEqual(AnnotationType.UNDERLINE);\n      expect(data.quadPoints).toEqual([[{\n        x: 10,\n        y: 20\n      }, {\n        x: 20,\n        y: 20\n      }, {\n        x: 10,\n        y: 10\n      }, {\n        x: 20,\n        y: 10\n      }]]);\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should set quadpoints to null if not defined","suites":["annotation","SquigglyAnnotation"],"line":3158,"updatePoint":{"line":3158,"column":52,"index":140612},"code":"    it(\"should set quadpoints to null if not defined\", async function () {\n      const squigglyDict = new Dict();\n      squigglyDict.set(\"Type\", Name.get(\"Annot\"));\n      squigglyDict.set(\"Subtype\", Name.get(\"Squiggly\"));\n      const squigglyRef = Ref.get(121, 0);\n      const xref = new XRefMock([{\n        ref: squigglyRef,\n        data: squigglyDict\n      }]);\n      const {\n        data\n      } = await AnnotationFactory.create(xref, squigglyRef, pdfManagerMock, idFactoryMock);\n      expect(data.annotationType).toEqual(AnnotationType.SQUIGGLY);\n      expect(data.quadPoints).toEqual(null);\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should set quadpoints if defined","suites":["annotation","SquigglyAnnotation"],"line":3173,"updatePoint":{"line":3173,"column":40,"index":141204},"code":"    it(\"should set quadpoints if defined\", async function () {\n      const squigglyDict = new Dict();\n      squigglyDict.set(\"Type\", Name.get(\"Annot\"));\n      squigglyDict.set(\"Subtype\", Name.get(\"Squiggly\"));\n      squigglyDict.set(\"Rect\", [10, 10, 20, 20]);\n      squigglyDict.set(\"QuadPoints\", [10, 20, 20, 20, 10, 10, 20, 10]);\n      const squigglyRef = Ref.get(121, 0);\n      const xref = new XRefMock([{\n        ref: squigglyRef,\n        data: squigglyDict\n      }]);\n      const {\n        data\n      } = await AnnotationFactory.create(xref, squigglyRef, pdfManagerMock, idFactoryMock);\n      expect(data.annotationType).toEqual(AnnotationType.SQUIGGLY);\n      expect(data.quadPoints).toEqual([[{\n        x: 10,\n        y: 20\n      }, {\n        x: 20,\n        y: 20\n      }, {\n        x: 10,\n        y: 10\n      }, {\n        x: 20,\n        y: 10\n      }]]);\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should set quadpoints to null if not defined","suites":["annotation","StrikeOutAnnotation"],"line":3204,"updatePoint":{"line":3204,"column":52,"index":142142},"code":"    it(\"should set quadpoints to null if not defined\", async function () {\n      const strikeOutDict = new Dict();\n      strikeOutDict.set(\"Type\", Name.get(\"Annot\"));\n      strikeOutDict.set(\"Subtype\", Name.get(\"StrikeOut\"));\n      const strikeOutRef = Ref.get(121, 0);\n      const xref = new XRefMock([{\n        ref: strikeOutRef,\n        data: strikeOutDict\n      }]);\n      const {\n        data\n      } = await AnnotationFactory.create(xref, strikeOutRef, pdfManagerMock, idFactoryMock);\n      expect(data.annotationType).toEqual(AnnotationType.STRIKEOUT);\n      expect(data.quadPoints).toEqual(null);\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should set quadpoints if defined","suites":["annotation","StrikeOutAnnotation"],"line":3219,"updatePoint":{"line":3219,"column":40,"index":142743},"code":"    it(\"should set quadpoints if defined\", async function () {\n      const strikeOutDict = new Dict();\n      strikeOutDict.set(\"Type\", Name.get(\"Annot\"));\n      strikeOutDict.set(\"Subtype\", Name.get(\"StrikeOut\"));\n      strikeOutDict.set(\"Rect\", [10, 10, 20, 20]);\n      strikeOutDict.set(\"QuadPoints\", [10, 20, 20, 20, 10, 10, 20, 10]);\n      const strikeOutRef = Ref.get(121, 0);\n      const xref = new XRefMock([{\n        ref: strikeOutRef,\n        data: strikeOutDict\n      }]);\n      const {\n        data\n      } = await AnnotationFactory.create(xref, strikeOutRef, pdfManagerMock, idFactoryMock);\n      expect(data.annotationType).toEqual(AnnotationType.STRIKEOUT);\n      expect(data.quadPoints).toEqual([[{\n        x: 10,\n        y: 20\n      }, {\n        x: 20,\n        y: 20\n      }, {\n        x: 10,\n        y: 10\n      }, {\n        x: 20,\n        y: 10\n      }]]);\n    });","file":"unit/annotation_spec.js","skipped":false,"dir":"test"},{"name":"should get and set a new value in the annotation storage","suites":["AnnotationStorage","GetOrDefaultValue"],"line":19,"updatePoint":{"line":19,"column":64,"index":832},"code":"    it(\"should get and set a new value in the annotation storage\", function () {\n      const annotationStorage = new AnnotationStorage();\n      let value = annotationStorage.getValue(\"123A\", {\n        value: \"hello world\"\n      }).value;\n      expect(value).toEqual(\"hello world\");\n      annotationStorage.setValue(\"123A\", {\n        value: \"hello world\"\n      });\n\n      // the second argument is the default value to use\n      // if the key isn't in the storage\n      value = annotationStorage.getValue(\"123A\", {\n        value: \"an other string\"\n      }).value;\n      expect(value).toEqual(\"hello world\");\n    });","file":"unit/annotation_storage_spec.js","skipped":false,"dir":"test"},{"name":"should get set values and default ones in the annotation storage","suites":["AnnotationStorage","GetOrDefaultValue"],"line":36,"updatePoint":{"line":36,"column":72,"index":1455},"code":"    it(\"should get set values and default ones in the annotation storage\", function () {\n      const annotationStorage = new AnnotationStorage();\n      annotationStorage.setValue(\"123A\", {\n        value: \"hello world\",\n        hello: \"world\"\n      });\n      const result = annotationStorage.getValue(\"123A\", {\n        value: \"an other string\",\n        world: \"hello\"\n      });\n      expect(result).toEqual({\n        value: \"hello world\",\n        hello: \"world\",\n        world: \"hello\"\n      });\n    });","file":"unit/annotation_storage_spec.js","skipped":false,"dir":"test"},{"name":"should set a new value in the annotation storage","suites":["AnnotationStorage","SetValue"],"line":54,"updatePoint":{"line":54,"column":56,"index":1985},"code":"    it(\"should set a new value in the annotation storage\", function () {\n      const annotationStorage = new AnnotationStorage();\n      annotationStorage.setValue(\"123A\", {\n        value: \"an other string\"\n      });\n      const value = annotationStorage.getAll()[\"123A\"].value;\n      expect(value).toEqual(\"an other string\");\n    });","file":"unit/annotation_storage_spec.js","skipped":false,"dir":"test"},{"name":"should call onSetModified() if value is changed","suites":["AnnotationStorage","SetValue"],"line":62,"updatePoint":{"line":62,"column":55,"index":2318},"code":"    it(\"should call onSetModified() if value is changed\", function () {\n      const annotationStorage = new AnnotationStorage();\n      let called = false;\n      const callback = function () {\n        called = true;\n      };\n      annotationStorage.onSetModified = callback;\n      annotationStorage.setValue(\"asdf\", {\n        value: \"original\"\n      });\n      expect(called).toBe(true);\n\n      // changing value\n      annotationStorage.setValue(\"asdf\", {\n        value: \"modified\"\n      });\n      expect(called).toBe(true);\n\n      // not changing value\n      called = false;\n      annotationStorage.setValue(\"asdf\", {\n        value: \"modified\"\n      });\n      expect(called).toBe(false);\n    });","file":"unit/annotation_storage_spec.js","skipped":false,"dir":"test"},{"name":"should call onResetModified() if set","suites":["AnnotationStorage","ResetModified"],"line":89,"updatePoint":{"line":89,"column":44,"index":3050},"code":"    it(\"should call onResetModified() if set\", function () {\n      const annotationStorage = new AnnotationStorage();\n      let called = false;\n      const callback = function () {\n        called = true;\n      };\n      annotationStorage.onResetModified = callback;\n      annotationStorage.setValue(\"asdf\", {\n        value: \"original\"\n      });\n      annotationStorage.resetModified();\n      expect(called).toBe(true);\n      called = false;\n\n      // not changing value\n      annotationStorage.setValue(\"asdf\", {\n        value: \"original\"\n      });\n      annotationStorage.resetModified();\n      expect(called).toBe(false);\n\n      // changing value\n      annotationStorage.setValue(\"asdf\", {\n        value: \"modified\"\n      });\n      annotationStorage.resetModified();\n      expect(called).toBe(true);\n    });","file":"unit/annotation_storage_spec.js","skipped":false,"dir":"test"},{"name":"creates pdf doc from URL-string","suites":["api","getDocument"],"line":61,"updatePoint":{"line":61,"column":39,"index":2673},"code":"    it(\"creates pdf doc from URL-string\", async function () {\n      const urlStr = TEST_PDFS_PATH + basicApiFileName;\n      const loadingTask = getDocument(urlStr);\n      expect(loadingTask instanceof PDFDocumentLoadingTask).toEqual(true);\n      const pdfDocument = await loadingTask.promise;\n      expect(typeof urlStr).toEqual(\"string\");\n      expect(pdfDocument instanceof PDFDocumentProxy).toEqual(true);\n      expect(pdfDocument.numPages).toEqual(3);\n      await loadingTask.destroy();\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"creates pdf doc from URL-object","suites":["api","getDocument"],"line":71,"updatePoint":{"line":71,"column":39,"index":3172},"code":"    it(\"creates pdf doc from URL-object\", async function () {\n      if (isNodeJS) {\n        pending(\"window.location is not supported in Node.js.\");\n      }\n      const urlObj = new URL(TEST_PDFS_PATH + basicApiFileName, window.location);\n      const loadingTask = getDocument(urlObj);\n      expect(loadingTask instanceof PDFDocumentLoadingTask).toEqual(true);\n      const pdfDocument = await loadingTask.promise;\n      expect(urlObj instanceof URL).toEqual(true);\n      expect(pdfDocument instanceof PDFDocumentProxy).toEqual(true);\n      expect(pdfDocument.numPages).toEqual(3);\n      await loadingTask.destroy();\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"creates pdf doc from URL","suites":["api","getDocument"],"line":84,"updatePoint":{"line":84,"column":32,"index":3789},"code":"    it(\"creates pdf doc from URL\", async function () {\n      const loadingTask = getDocument(basicApiGetDocumentParams);\n      expect(loadingTask instanceof PDFDocumentLoadingTask).toEqual(true);\n      const progressReportedCapability = new PromiseCapability();\n      // Attach the callback that is used to report loading progress;\n      // similarly to how viewer.js works.\n      loadingTask.onProgress = function (progressData) {\n        if (!progressReportedCapability.settled) {\n          progressReportedCapability.resolve(progressData);\n        }\n      };\n      const data = await Promise.all([progressReportedCapability.promise, loadingTask.promise]);\n      expect(data[0].loaded / data[0].total >= 0).toEqual(true);\n      expect(data[1] instanceof PDFDocumentProxy).toEqual(true);\n      expect(loadingTask).toEqual(data[1].loadingTask);\n      await loadingTask.destroy();\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"creates pdf doc from URL and aborts before worker initialized","suites":["api","getDocument"],"line":101,"updatePoint":{"line":101,"column":69,"index":4714},"code":"    it(\"creates pdf doc from URL and aborts before worker initialized\", async function () {\n      const loadingTask = getDocument(basicApiGetDocumentParams);\n      expect(loadingTask instanceof PDFDocumentLoadingTask).toEqual(true);\n      const destroyed = loadingTask.destroy();\n      try {\n        await loadingTask.promise;\n\n        // Shouldn't get here.\n        expect(false).toEqual(true);\n      } catch {\n        expect(true).toEqual(true);\n        await destroyed;\n      }\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"creates pdf doc from URL and aborts loading after worker initialized","suites":["api","getDocument"],"line":115,"updatePoint":{"line":115,"column":76,"index":5210},"code":"    it(\"creates pdf doc from URL and aborts loading after worker initialized\", async function () {\n      const loadingTask = getDocument(basicApiGetDocumentParams);\n      expect(loadingTask instanceof PDFDocumentLoadingTask).toEqual(true);\n      // This can be somewhat random -- we cannot guarantee perfect\n      // 'Terminate' message to the worker before/after setting up pdfManager.\n      const destroyed = loadingTask._worker.promise.then(function () {\n        return loadingTask.destroy();\n      });\n      await destroyed;\n      expect(true).toEqual(true);\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"creates pdf doc from TypedArray","suites":["api","getDocument"],"line":126,"updatePoint":{"line":126,"column":39,"index":5744},"code":"    it(\"creates pdf doc from TypedArray\", async function () {\n      const typedArrayPdf = await DefaultFileReaderFactory.fetch({\n        path: TEST_PDFS_PATH + basicApiFileName\n      });\n\n      // Sanity check to make sure that we fetched the entire PDF file.\n      expect(typedArrayPdf instanceof Uint8Array).toEqual(true);\n      expect(typedArrayPdf.length).toEqual(basicApiFileLength);\n      const loadingTask = getDocument(typedArrayPdf);\n      expect(loadingTask instanceof PDFDocumentLoadingTask).toEqual(true);\n      const progressReportedCapability = new PromiseCapability();\n      loadingTask.onProgress = function (data) {\n        progressReportedCapability.resolve(data);\n      };\n      const data = await Promise.all([loadingTask.promise, progressReportedCapability.promise]);\n      expect(data[0] instanceof PDFDocumentProxy).toEqual(true);\n      expect(data[1].loaded / data[1].total).toEqual(1);\n\n      // Check that the TypedArray was transferred.\n      expect(typedArrayPdf.length).toEqual(0);\n      await loadingTask.destroy();\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"creates pdf doc from ArrayBuffer","suites":["api","getDocument"],"line":148,"updatePoint":{"line":148,"column":40,"index":6799},"code":"    it(\"creates pdf doc from ArrayBuffer\", async function () {\n      const {\n        buffer: arrayBufferPdf\n      } = await DefaultFileReaderFactory.fetch({\n        path: TEST_PDFS_PATH + basicApiFileName\n      });\n\n      // Sanity check to make sure that we fetched the entire PDF file.\n      expect(arrayBufferPdf instanceof ArrayBuffer).toEqual(true);\n      expect(arrayBufferPdf.byteLength).toEqual(basicApiFileLength);\n      const loadingTask = getDocument(arrayBufferPdf);\n      expect(loadingTask instanceof PDFDocumentLoadingTask).toEqual(true);\n      const progressReportedCapability = new PromiseCapability();\n      loadingTask.onProgress = function (data) {\n        progressReportedCapability.resolve(data);\n      };\n      const data = await Promise.all([loadingTask.promise, progressReportedCapability.promise]);\n      expect(data[0] instanceof PDFDocumentProxy).toEqual(true);\n      expect(data[1].loaded / data[1].total).toEqual(1);\n\n      // Check that the ArrayBuffer was transferred.\n      expect(arrayBufferPdf.byteLength).toEqual(0);\n      await loadingTask.destroy();\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"creates pdf doc from invalid PDF file","suites":["api","getDocument"],"line":172,"updatePoint":{"line":172,"column":45,"index":7900},"code":"    it(\"creates pdf doc from invalid PDF file\", async function () {\n      // A severely corrupt PDF file (even Adobe Reader fails to open it).\n      const loadingTask = getDocument(buildGetDocumentParams(\"bug1020226.pdf\"));\n      expect(loadingTask instanceof PDFDocumentLoadingTask).toEqual(true);\n      try {\n        await loadingTask.promise;\n\n        // Shouldn't get here.\n        expect(false).toEqual(true);\n      } catch (reason) {\n        expect(reason instanceof InvalidPDFException).toEqual(true);\n        expect(reason.message).toEqual(\"Invalid PDF structure.\");\n      }\n      await loadingTask.destroy();\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"creates pdf doc from non-existent URL","suites":["api","getDocument"],"line":187,"updatePoint":{"line":187,"column":45,"index":8526},"code":"    it(\"creates pdf doc from non-existent URL\", async function () {\n      if (!isNodeJS) {\n        // Re-enable in https://github.com/mozilla/pdf.js/issues/13061.\n        pending(\"Fails intermittently on Linux in browsers.\");\n      }\n      const loadingTask = getDocument(buildGetDocumentParams(\"non-existent.pdf\"));\n      expect(loadingTask instanceof PDFDocumentLoadingTask).toEqual(true);\n      try {\n        await loadingTask.promise;\n\n        // Shouldn't get here.\n        expect(false).toEqual(true);\n      } catch (reason) {\n        expect(reason instanceof MissingPDFException).toEqual(true);\n      }\n      await loadingTask.destroy();\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"creates pdf doc from PDF file protected with user and owner password","suites":["api","getDocument"],"line":204,"updatePoint":{"line":204,"column":76,"index":9210},"code":"    it(\"creates pdf doc from PDF file protected with user and owner password\", async function () {\n      const loadingTask = getDocument(buildGetDocumentParams(\"pr6531_1.pdf\"));\n      expect(loadingTask instanceof PDFDocumentLoadingTask).toEqual(true);\n      const passwordNeededCapability = new PromiseCapability();\n      const passwordIncorrectCapability = new PromiseCapability();\n      // Attach the callback that is used to request a password;\n      // similarly to how the default viewer handles passwords.\n      loadingTask.onPassword = function (updatePassword, reason) {\n        if (reason === PasswordResponses.NEED_PASSWORD && !passwordNeededCapability.settled) {\n          passwordNeededCapability.resolve();\n          updatePassword(\"qwerty\"); // Provide an incorrect password.\n          return;\n        }\n        if (reason === PasswordResponses.INCORRECT_PASSWORD && !passwordIncorrectCapability.settled) {\n          passwordIncorrectCapability.resolve();\n          updatePassword(\"asdfasdf\"); // Provide the correct password.\n          return;\n        }\n        // Shouldn't get here.\n        expect(false).toEqual(true);\n      };\n      const data = await Promise.all([passwordNeededCapability.promise, passwordIncorrectCapability.promise, loadingTask.promise]);\n      expect(data[2] instanceof PDFDocumentProxy).toEqual(true);\n      await loadingTask.destroy();\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"creates pdf doc from PDF file protected with only a user password","suites":["api","getDocument"],"line":229,"updatePoint":{"line":229,"column":73,"index":10594},"code":"    it(\"creates pdf doc from PDF file protected with only a user password\", async function () {\n      const filename = \"pr6531_2.pdf\";\n      const passwordNeededLoadingTask = getDocument(buildGetDocumentParams(filename, {\n        password: \"\"\n      }));\n      expect(passwordNeededLoadingTask instanceof PDFDocumentLoadingTask).toEqual(true);\n      const result1 = passwordNeededLoadingTask.promise.then(function () {\n        // Shouldn't get here.\n        expect(false).toEqual(true);\n        throw new Error(\"loadingTask should be rejected\");\n      }, function (data) {\n        expect(data instanceof PasswordException).toEqual(true);\n        expect(data.code).toEqual(PasswordResponses.NEED_PASSWORD);\n        return passwordNeededLoadingTask.destroy();\n      });\n      const passwordIncorrectLoadingTask = getDocument(buildGetDocumentParams(filename, {\n        password: \"qwerty\"\n      }));\n      expect(passwordIncorrectLoadingTask instanceof PDFDocumentLoadingTask).toEqual(true);\n      const result2 = passwordIncorrectLoadingTask.promise.then(function () {\n        // Shouldn't get here.\n        expect(false).toEqual(true);\n        throw new Error(\"loadingTask should be rejected\");\n      }, function (data) {\n        expect(data instanceof PasswordException).toEqual(true);\n        expect(data.code).toEqual(PasswordResponses.INCORRECT_PASSWORD);\n        return passwordIncorrectLoadingTask.destroy();\n      });\n      const passwordAcceptedLoadingTask = getDocument(buildGetDocumentParams(filename, {\n        password: \"asdfasdf\"\n      }));\n      expect(passwordAcceptedLoadingTask instanceof PDFDocumentLoadingTask).toEqual(true);\n      const result3 = passwordAcceptedLoadingTask.promise.then(function (data) {\n        expect(data instanceof PDFDocumentProxy).toEqual(true);\n        return passwordAcceptedLoadingTask.destroy();\n      });\n      await Promise.all([result1, result2, result3]);\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"creates pdf doc from empty TypedArray","suites":["api","getDocument"],"line":331,"updatePoint":{"line":331,"column":45,"index":15561},"code":"    it(\"creates pdf doc from empty TypedArray\", async function () {\n      const loadingTask = getDocument(new Uint8Array(0));\n      expect(loadingTask instanceof PDFDocumentLoadingTask).toEqual(true);\n      try {\n        await loadingTask.promise;\n\n        // Shouldn't get here.\n        expect(false).toEqual(true);\n      } catch (reason) {\n        expect(reason instanceof InvalidPDFException).toEqual(true);\n        expect(reason.message).toEqual(\"The PDF file is empty, i.e. its size is zero bytes.\");\n      }\n      await loadingTask.destroy();\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"checks that `docId`s are unique and increasing","suites":["api","getDocument"],"line":345,"updatePoint":{"line":345,"column":54,"index":16127},"code":"    it(\"checks that `docId`s are unique and increasing\", async function () {\n      const loadingTask1 = getDocument(basicApiGetDocumentParams);\n      expect(loadingTask1 instanceof PDFDocumentLoadingTask).toEqual(true);\n      await loadingTask1.promise;\n      const docId1 = loadingTask1.docId;\n      const loadingTask2 = getDocument(basicApiGetDocumentParams);\n      expect(loadingTask2 instanceof PDFDocumentLoadingTask).toEqual(true);\n      await loadingTask2.promise;\n      const docId2 = loadingTask2.docId;\n      expect(docId1).not.toEqual(docId2);\n      const docIdRegExp = /^d(\\d+)$/,\n        docNum1 = docIdRegExp.exec(docId1)?.[1],\n        docNum2 = docIdRegExp.exec(docId2)?.[1];\n      expect(+docNum1).toBeLessThan(+docNum2);\n      await Promise.all([loadingTask1.destroy(), loadingTask2.destroy()]);\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"creates pdf doc from PDF file with bad XRef entry","suites":["api","getDocument"],"line":361,"updatePoint":{"line":361,"column":57,"index":16951},"code":"    it(\"creates pdf doc from PDF file with bad XRef entry\", async function () {\n      // A corrupt PDF file, where the XRef table have (some) bogus entries.\n      const loadingTask = getDocument(buildGetDocumentParams(\"PDFBOX-4352-0.pdf\", {\n        rangeChunkSize: 100\n      }));\n      expect(loadingTask instanceof PDFDocumentLoadingTask).toEqual(true);\n      const pdfDocument = await loadingTask.promise;\n      expect(pdfDocument.numPages).toEqual(1);\n      const page = await pdfDocument.getPage(1);\n      expect(page instanceof PDFPageProxy).toEqual(true);\n      const opList = await page.getOperatorList();\n      expect(opList.fnArray.length).toEqual(0);\n      expect(opList.argsArray.length).toEqual(0);\n      expect(opList.lastChunk).toEqual(true);\n      expect(opList.separateAnnots).toEqual(null);\n      await loadingTask.destroy();\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"creates pdf doc from PDF file with bad XRef header","suites":["api","getDocument"],"line":378,"updatePoint":{"line":378,"column":58,"index":17803},"code":"    it(\"creates pdf doc from PDF file with bad XRef header\", async function () {\n      const loadingTask = getDocument(buildGetDocumentParams(\"GHOSTSCRIPT-698804-1-fuzzed.pdf\"));\n      expect(loadingTask instanceof PDFDocumentLoadingTask).toEqual(true);\n      const pdfDocument = await loadingTask.promise;\n      expect(pdfDocument.numPages).toEqual(1);\n      const page = await pdfDocument.getPage(1);\n      expect(page instanceof PDFPageProxy).toEqual(true);\n      const opList = await page.getOperatorList();\n      expect(opList.fnArray.length).toEqual(0);\n      expect(opList.argsArray.length).toEqual(0);\n      expect(opList.lastChunk).toEqual(true);\n      expect(opList.separateAnnots).toEqual(null);\n      await loadingTask.destroy();\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"creates pdf doc from PDF file with bad XRef byteWidths","suites":["api","getDocument"],"line":392,"updatePoint":{"line":392,"column":62,"index":18557},"code":"    it(\"creates pdf doc from PDF file with bad XRef byteWidths\", async function () {\n      // A corrupt PDF file, where the XRef /W-array have (some) bogus entries.\n      const loadingTask = getDocument(buildGetDocumentParams(\"REDHAT-1531897-0.pdf\"));\n      expect(loadingTask instanceof PDFDocumentLoadingTask).toEqual(true);\n      try {\n        await loadingTask.promise;\n\n        // Shouldn't get here.\n        expect(false).toEqual(true);\n      } catch (reason) {\n        expect(reason instanceof InvalidPDFException).toEqual(true);\n        expect(reason.message).toEqual(\"Invalid PDF structure.\");\n      }\n      await loadingTask.destroy();\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"creates pdf doc from PDF file with inaccessible /Pages tree","suites":["api","getDocument"],"line":407,"updatePoint":{"line":407,"column":67,"index":19216},"code":"    it(\"creates pdf doc from PDF file with inaccessible /Pages tree\", async function () {\n      const loadingTask = getDocument(buildGetDocumentParams(\"poppler-395-0-fuzzed.pdf\"));\n      expect(loadingTask instanceof PDFDocumentLoadingTask).toEqual(true);\n      try {\n        await loadingTask.promise;\n\n        // Shouldn't get here.\n        expect(false).toEqual(true);\n      } catch (reason) {\n        expect(reason instanceof InvalidPDFException).toEqual(true);\n        expect(reason.message).toEqual(\"Invalid Root reference.\");\n      }\n      await loadingTask.destroy();\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"creates pdf doc from PDF files, with bad /Pages tree /Count","suites":["api","getDocument"],"line":421,"updatePoint":{"line":421,"column":67,"index":19800},"code":"    it(\"creates pdf doc from PDF files, with bad /Pages tree /Count\", async function () {\n      const loadingTask1 = getDocument(buildGetDocumentParams(\"poppler-67295-0.pdf\"));\n      const loadingTask2 = getDocument(buildGetDocumentParams(\"poppler-85140-0.pdf\"));\n      const loadingTask3 = getDocument(buildGetDocumentParams(\"poppler-85140-0.pdf\", {\n        stopAtErrors: true\n      }));\n      expect(loadingTask1 instanceof PDFDocumentLoadingTask).toEqual(true);\n      expect(loadingTask2 instanceof PDFDocumentLoadingTask).toEqual(true);\n      expect(loadingTask3 instanceof PDFDocumentLoadingTask).toEqual(true);\n      const pdfDocument1 = await loadingTask1.promise;\n      const pdfDocument2 = await loadingTask2.promise;\n      const pdfDocument3 = await loadingTask3.promise;\n      expect(pdfDocument1.numPages).toEqual(1);\n      expect(pdfDocument2.numPages).toEqual(1);\n      expect(pdfDocument3.numPages).toEqual(1);\n      const pageA = await pdfDocument1.getPage(1);\n      expect(pageA instanceof PDFPageProxy).toEqual(true);\n      const opListA = await pageA.getOperatorList();\n      expect(opListA.fnArray.length).toBeGreaterThan(5);\n      expect(opListA.argsArray.length).toBeGreaterThan(5);\n      expect(opListA.lastChunk).toEqual(true);\n      expect(opListA.separateAnnots).toEqual(null);\n      const pageB = await pdfDocument2.getPage(1);\n      expect(pageB instanceof PDFPageProxy).toEqual(true);\n      const opListB = await pageB.getOperatorList();\n      expect(opListB.fnArray.length).toBe(0);\n      expect(opListB.argsArray.length).toBe(0);\n      expect(opListB.lastChunk).toEqual(true);\n      expect(opListB.separateAnnots).toEqual(null);\n      try {\n        await pdfDocument3.getPage(1);\n\n        // Shouldn't get here.\n        expect(false).toEqual(true);\n      } catch (reason) {\n        expect(reason instanceof UnknownErrorException).toEqual(true);\n        expect(reason.message).toEqual(\"Bad (uncompressed) XRef entry: 3R\");\n      }\n      await Promise.all([loadingTask1.destroy(), loadingTask2.destroy(), loadingTask3.destroy()]);\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"creates pdf doc from PDF files, with circular references","suites":["api","getDocument"],"line":461,"updatePoint":{"line":461,"column":64,"index":21865},"code":"    it(\"creates pdf doc from PDF files, with circular references\", async function () {\n      const loadingTask1 = getDocument(buildGetDocumentParams(\"poppler-91414-0-53.pdf\"));\n      const loadingTask2 = getDocument(buildGetDocumentParams(\"poppler-91414-0-54.pdf\"));\n      expect(loadingTask1 instanceof PDFDocumentLoadingTask).toEqual(true);\n      expect(loadingTask2 instanceof PDFDocumentLoadingTask).toEqual(true);\n      const pdfDocument1 = await loadingTask1.promise;\n      const pdfDocument2 = await loadingTask2.promise;\n      expect(pdfDocument1.numPages).toEqual(1);\n      expect(pdfDocument2.numPages).toEqual(1);\n      const pageA = await pdfDocument1.getPage(1);\n      const pageB = await pdfDocument2.getPage(1);\n      expect(pageA instanceof PDFPageProxy).toEqual(true);\n      expect(pageB instanceof PDFPageProxy).toEqual(true);\n      for (const opList of [await pageA.getOperatorList(), await pageB.getOperatorList()]) {\n        expect(opList.fnArray.length).toBeGreaterThan(5);\n        expect(opList.argsArray.length).toBeGreaterThan(5);\n        expect(opList.lastChunk).toEqual(true);\n        expect(opList.separateAnnots).toEqual(null);\n      }\n      await Promise.all([loadingTask1.destroy(), loadingTask2.destroy()]);\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"creates pdf doc from PDF files, with bad /Pages tree /Kids entries","suites":["api","getDocument"],"line":482,"updatePoint":{"line":482,"column":74,"index":23123},"code":"    it(\"creates pdf doc from PDF files, with bad /Pages tree /Kids entries\", async function () {\n      const loadingTask1 = getDocument(buildGetDocumentParams(\"poppler-742-0-fuzzed.pdf\"));\n      const loadingTask2 = getDocument(buildGetDocumentParams(\"poppler-937-0-fuzzed.pdf\"));\n      expect(loadingTask1 instanceof PDFDocumentLoadingTask).toEqual(true);\n      expect(loadingTask2 instanceof PDFDocumentLoadingTask).toEqual(true);\n      const pdfDocument1 = await loadingTask1.promise;\n      const pdfDocument2 = await loadingTask2.promise;\n      expect(pdfDocument1.numPages).toEqual(1);\n      expect(pdfDocument2.numPages).toEqual(1);\n      try {\n        await pdfDocument1.getPage(1);\n\n        // Shouldn't get here.\n        expect(false).toEqual(true);\n      } catch (reason) {\n        expect(reason instanceof UnknownErrorException).toEqual(true);\n        expect(reason.message).toEqual(\"Illegal character: 41\");\n      }\n      try {\n        await pdfDocument2.getPage(1);\n\n        // Shouldn't get here.\n        expect(false).toEqual(true);\n      } catch (reason) {\n        expect(reason instanceof UnknownErrorException).toEqual(true);\n        expect(reason.message).toEqual(\"End of file inside array.\");\n      }\n      await Promise.all([loadingTask1.destroy(), loadingTask2.destroy()]);\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"creates pdf doc from PDF file with bad /Resources entry","suites":["api","getDocument"],"line":511,"updatePoint":{"line":511,"column":63,"index":24416},"code":"    it(\"creates pdf doc from PDF file with bad /Resources entry\", async function () {\n      const loadingTask = getDocument(buildGetDocumentParams(\"issue15150.pdf\"));\n      expect(loadingTask instanceof PDFDocumentLoadingTask).toEqual(true);\n      const pdfDocument = await loadingTask.promise;\n      expect(pdfDocument.numPages).toEqual(1);\n      const page = await pdfDocument.getPage(1);\n      expect(page instanceof PDFPageProxy).toEqual(true);\n      const opList = await page.getOperatorList();\n      expect(opList.fnArray).toEqual([OPS.setLineWidth, OPS.setStrokeRGBColor, OPS.constructPath, OPS.closeStroke]);\n      expect(opList.argsArray).toEqual([[0.5], new Uint8ClampedArray([255, 0, 0]), [[OPS.moveTo, OPS.lineTo], [0, 9.75, 0.5, 9.75], [0, 0.5, 9.75, 9.75]], null]);\n      expect(opList.lastChunk).toEqual(true);\n      await loadingTask.destroy();\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"creates pdf doc from PDF file, with incomplete trailer","suites":["api","getDocument"],"line":524,"updatePoint":{"line":524,"column":62,"index":25284},"code":"    it(\"creates pdf doc from PDF file, with incomplete trailer\", async function () {\n      const loadingTask = getDocument(buildGetDocumentParams(\"issue15590.pdf\"));\n      expect(loadingTask instanceof PDFDocumentLoadingTask).toEqual(true);\n      const pdfDocument = await loadingTask.promise;\n      expect(pdfDocument.numPages).toEqual(1);\n      const jsActions = await pdfDocument.getJSActions();\n      expect(jsActions).toEqual({\n        OpenAction: [\"func=function(){app.alert(1)};func();\"]\n      });\n      const page = await pdfDocument.getPage(1);\n      expect(page instanceof PDFPageProxy).toEqual(true);\n      await loadingTask.destroy();\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"worker created or destroyed","suites":["api","PDFWorker"],"line":539,"updatePoint":{"line":539,"column":35,"index":25956},"code":"    it(\"worker created or destroyed\", async function () {\n      if (isNodeJS) {\n        pending(\"Worker is not supported in Node.js.\");\n      }\n      const worker = new PDFWorker({\n        name: \"test1\"\n      });\n      await worker.promise;\n      expect(worker.name).toEqual(\"test1\");\n      expect(!!worker.port).toEqual(true);\n      expect(worker.destroyed).toEqual(false);\n      expect(!!worker._webWorker).toEqual(true);\n      expect(worker.port === worker._webWorker).toEqual(true);\n      worker.destroy();\n      expect(!!worker.port).toEqual(false);\n      expect(worker.destroyed).toEqual(true);\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"worker created or destroyed by getDocument","suites":["api","PDFWorker"],"line":556,"updatePoint":{"line":556,"column":50,"index":26580},"code":"    it(\"worker created or destroyed by getDocument\", async function () {\n      if (isNodeJS) {\n        pending(\"Worker is not supported in Node.js.\");\n      }\n      const loadingTask = getDocument(basicApiGetDocumentParams);\n      let worker;\n      loadingTask.promise.then(function () {\n        worker = loadingTask._worker;\n        expect(!!worker).toEqual(true);\n      });\n      const destroyPromise = loadingTask.promise.then(function () {\n        return loadingTask.destroy();\n      });\n      await destroyPromise;\n      const destroyedWorker = loadingTask._worker;\n      expect(!!destroyedWorker).toEqual(false);\n      expect(worker.destroyed).toEqual(true);\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"worker created and can be used in getDocument","suites":["api","PDFWorker"],"line":574,"updatePoint":{"line":574,"column":53,"index":27256},"code":"    it(\"worker created and can be used in getDocument\", async function () {\n      if (isNodeJS) {\n        pending(\"Worker is not supported in Node.js.\");\n      }\n      const worker = new PDFWorker({\n        name: \"test1\"\n      });\n      const loadingTask = getDocument(buildGetDocumentParams(basicApiFileName, {\n        worker\n      }));\n      loadingTask.promise.then(function () {\n        const docWorker = loadingTask._worker;\n        expect(!!docWorker).toEqual(false);\n        // checking is the same port is used in the MessageHandler\n        const messageHandlerPort = loadingTask._transport.messageHandler.comObj;\n        expect(messageHandlerPort === worker.port).toEqual(true);\n      });\n      const destroyPromise = loadingTask.promise.then(function () {\n        return loadingTask.destroy();\n      });\n      await destroyPromise;\n      expect(worker.destroyed).toEqual(false);\n      worker.destroy();\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"creates more than one worker","suites":["api","PDFWorker"],"line":598,"updatePoint":{"line":598,"column":36,"index":28160},"code":"    it(\"creates more than one worker\", async function () {\n      if (isNodeJS) {\n        pending(\"Worker is not supported in Node.js.\");\n      }\n      const worker1 = new PDFWorker({\n        name: \"test1\"\n      });\n      const worker2 = new PDFWorker({\n        name: \"test2\"\n      });\n      const worker3 = new PDFWorker({\n        name: \"test3\"\n      });\n      await Promise.all([worker1.promise, worker2.promise, worker3.promise]);\n      expect(worker1.port !== worker2.port && worker1.port !== worker3.port && worker2.port !== worker3.port).toEqual(true);\n      worker1.destroy();\n      worker2.destroy();\n      worker3.destroy();\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"gets current workerSrc","suites":["api","PDFWorker"],"line":617,"updatePoint":{"line":617,"column":30,"index":28795},"code":"    it(\"gets current workerSrc\", function () {\n      if (isNodeJS) {\n        pending(\"Worker is not supported in Node.js.\");\n      }\n      const workerSrc = PDFWorker.workerSrc;\n      expect(typeof workerSrc).toEqual(\"string\");\n      expect(workerSrc).toEqual(GlobalWorkerOptions.workerSrc);\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"gets number of pages","suites":["api","PDFDocument"],"line":635,"updatePoint":{"line":635,"column":28,"index":29410},"code":"    it(\"gets number of pages\", function () {\n      expect(pdfDocument.numPages).toEqual(3);\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"gets fingerprints","suites":["api","PDFDocument"],"line":638,"updatePoint":{"line":638,"column":25,"index":29507},"code":"    it(\"gets fingerprints\", function () {\n      expect(pdfDocument.fingerprints).toEqual([\"ea8b35919d6279a369e835bde778611b\", null]);\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"gets fingerprints, from modified document","suites":["api","PDFDocument"],"line":641,"updatePoint":{"line":641,"column":49,"index":29673},"code":"    it(\"gets fingerprints, from modified document\", async function () {\n      const loadingTask = getDocument(buildGetDocumentParams(\"annotation-tx.pdf\"));\n      const pdfDoc = await loadingTask.promise;\n      expect(pdfDoc.fingerprints).toEqual([\"3ebd77c320274649a68f10dbf3b9f882\", \"e7087346aa4b4ae0911c1f1643b57345\"]);\n      await loadingTask.destroy();\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"gets page","suites":["api","PDFDocument"],"line":647,"updatePoint":{"line":647,"column":17,"index":30005},"code":"    it(\"gets page\", async function () {\n      const data = await pdfDocument.getPage(1);\n      expect(data instanceof PDFPageProxy).toEqual(true);\n      expect(data.pageNumber).toEqual(1);\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"gets non-existent page","suites":["api","PDFDocument"],"line":652,"updatePoint":{"line":652,"column":30,"index":30215},"code":"    it(\"gets non-existent page\", async function () {\n      const pageNumbers = [/* outOfRange = */100, /* nonInteger = */2.5, /* nonNumber = */\"1\"];\n      for (const pageNumber of pageNumbers) {\n        try {\n          await pdfDocument.getPage(pageNumber);\n\n          // Shouldn't get here.\n          expect(false).toEqual(true);\n        } catch (reason) {\n          expect(reason instanceof Error).toEqual(true);\n          expect(reason.message).toEqual(\"Invalid page request.\");\n        }\n      }\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"gets page, from /Pages tree with circular reference","suites":["api","PDFDocument"],"line":666,"updatePoint":{"line":666,"column":59,"index":30752},"code":"    it(\"gets page, from /Pages tree with circular reference\", async function () {\n      const loadingTask = getDocument(buildGetDocumentParams(\"Pages-tree-refs.pdf\"));\n      const page1 = loadingTask.promise.then(function (pdfDoc) {\n        return pdfDoc.getPage(1).then(function (pdfPage) {\n          expect(pdfPage instanceof PDFPageProxy).toEqual(true);\n          expect(pdfPage.ref).toEqual({\n            num: 6,\n            gen: 0\n          });\n        }, function (reason) {\n          throw new Error(\"shall not fail for valid page\");\n        });\n      });\n      const page2 = loadingTask.promise.then(function (pdfDoc) {\n        return pdfDoc.getPage(2).then(function (pdfPage) {\n          throw new Error(\"shall fail for invalid page\");\n        }, function (reason) {\n          expect(reason instanceof UnknownErrorException).toEqual(true);\n          expect(reason.message).toEqual(\"Pages tree contains circular reference.\");\n        });\n      });\n      await Promise.all([page1, page2]);\n      await loadingTask.destroy();\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"gets page multiple time, with working caches","suites":["api","PDFDocument"],"line":690,"updatePoint":{"line":690,"column":52,"index":31785},"code":"    it(\"gets page multiple time, with working caches\", async function () {\n      const promiseA = pdfDocument.getPage(1);\n      const promiseB = pdfDocument.getPage(1);\n      expect(promiseA instanceof Promise).toEqual(true);\n      expect(promiseA).toBe(promiseB);\n      const pageA = await promiseA;\n      const pageB = await promiseB;\n      expect(pageA instanceof PDFPageProxy).toEqual(true);\n      expect(pageA).toBe(pageB);\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"gets page index","suites":["api","PDFDocument"],"line":700,"updatePoint":{"line":700,"column":23,"index":32193},"code":"    it(\"gets page index\", async function () {\n      const ref = {\n        num: 17,\n        gen: 0\n      }; // Reference to second page.\n      const pageIndex = await pdfDocument.getPageIndex(ref);\n      expect(pageIndex).toEqual(1);\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"gets invalid page index","suites":["api","PDFDocument"],"line":708,"updatePoint":{"line":708,"column":31,"index":32442},"code":"    it(\"gets invalid page index\", async function () {\n      const pageRefs = [/* fontRef = */{\n        num: 3,\n        gen: 0\n      }, /* invalidRef = */{\n        num: -1,\n        gen: 0\n      }, /* nonRef = */\"qwerty\", /* nullRef = */null];\n      const expectedErrors = [{\n        exception: UnknownErrorException,\n        message: \"The reference does not point to a /Page dictionary.\"\n      }, {\n        exception: Error,\n        message: \"Invalid pageIndex request.\"\n      }, {\n        exception: Error,\n        message: \"Invalid pageIndex request.\"\n      }, {\n        exception: Error,\n        message: \"Invalid pageIndex request.\"\n      }];\n      for (let i = 0, ii = pageRefs.length; i < ii; i++) {\n        try {\n          await pdfDocument.getPageIndex(pageRefs[i]);\n\n          // Shouldn't get here.\n          expect(false).toEqual(true);\n        } catch (reason) {\n          const {\n            exception,\n            message\n          } = expectedErrors[i];\n          expect(reason instanceof exception).toEqual(true);\n          expect(reason.message).toEqual(message);\n        }\n      }\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"gets destinations, from /Dests dictionary","suites":["api","PDFDocument"],"line":745,"updatePoint":{"line":745,"column":49,"index":33566},"code":"    it(\"gets destinations, from /Dests dictionary\", async function () {\n      const destinations = await pdfDocument.getDestinations();\n      expect(destinations).toEqual({\n        chapter1: [{\n          gen: 0,\n          num: 17\n        }, {\n          name: \"XYZ\"\n        }, 0, 841.89, null]\n      });\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"gets a destination, from /Dests dictionary","suites":["api","PDFDocument"],"line":756,"updatePoint":{"line":756,"column":50,"index":33878},"code":"    it(\"gets a destination, from /Dests dictionary\", async function () {\n      const destination = await pdfDocument.getDestination(\"chapter1\");\n      expect(destination).toEqual([{\n        gen: 0,\n        num: 17\n      }, {\n        name: \"XYZ\"\n      }, 0, 841.89, null]);\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"gets a non-existent destination, from /Dests dictionary","suites":["api","PDFDocument"],"line":765,"updatePoint":{"line":765,"column":63,"index":34172},"code":"    it(\"gets a non-existent destination, from /Dests dictionary\", async function () {\n      const destination = await pdfDocument.getDestination(\"non-existent-named-destination\");\n      expect(destination).toEqual(null);\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"gets destinations, from /Names (NameTree) dictionary","suites":["api","PDFDocument"],"line":769,"updatePoint":{"line":769,"column":60,"index":34398},"code":"    it(\"gets destinations, from /Names (NameTree) dictionary\", async function () {\n      const loadingTask = getDocument(buildGetDocumentParams(\"issue6204.pdf\"));\n      const pdfDoc = await loadingTask.promise;\n      const destinations = await pdfDoc.getDestinations();\n      expect(destinations).toEqual({\n        \"Page.1\": [{\n          num: 1,\n          gen: 0\n        }, {\n          name: \"XYZ\"\n        }, 0, 375, null],\n        \"Page.2\": [{\n          num: 6,\n          gen: 0\n        }, {\n          name: \"XYZ\"\n        }, 0, 375, null]\n      });\n      await loadingTask.destroy();\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"gets a destination, from /Names (NameTree) dictionary","suites":["api","PDFDocument"],"line":789,"updatePoint":{"line":789,"column":61,"index":34992},"code":"    it(\"gets a destination, from /Names (NameTree) dictionary\", async function () {\n      const loadingTask = getDocument(buildGetDocumentParams(\"issue6204.pdf\"));\n      const pdfDoc = await loadingTask.promise;\n      const destination = await pdfDoc.getDestination(\"Page.1\");\n      expect(destination).toEqual([{\n        num: 1,\n        gen: 0\n      }, {\n        name: \"XYZ\"\n      }, 0, 375, null]);\n      await loadingTask.destroy();\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"gets a non-existent destination, from /Names (NameTree) dictionary","suites":["api","PDFDocument"],"line":801,"updatePoint":{"line":801,"column":74,"index":35449},"code":"    it(\"gets a non-existent destination, from /Names (NameTree) dictionary\", async function () {\n      const loadingTask = getDocument(buildGetDocumentParams(\"issue6204.pdf\"));\n      const pdfDoc = await loadingTask.promise;\n      const destination = await pdfDoc.getDestination(\"non-existent-named-destination\");\n      expect(destination).toEqual(null);\n      await loadingTask.destroy();\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"gets a destination, from out-of-order /Names (NameTree) dictionary (issue 10272)","suites":["api","PDFDocument"],"line":808,"updatePoint":{"line":808,"column":88,"index":35861},"code":"    it(\"gets a destination, from out-of-order /Names (NameTree) dictionary (issue 10272)\", async function () {\n      if (isNodeJS) {\n        pending(\"Linked test-cases are not supported in Node.js.\");\n      }\n      const loadingTask = getDocument(buildGetDocumentParams(\"issue10272.pdf\"));\n      const pdfDoc = await loadingTask.promise;\n      const destination = await pdfDoc.getDestination(\"link_1\");\n      expect(destination).toEqual([{\n        num: 17,\n        gen: 0\n      }, {\n        name: \"XYZ\"\n      }, 69, 125, 0]);\n      await loadingTask.destroy();\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"gets a destination, from /Names (NameTree) dictionary with keys using PDFDocEncoding (issue 14847)","suites":["api","PDFDocument"],"line":823,"updatePoint":{"line":823,"column":106,"index":36448},"code":"    it(\"gets a destination, from /Names (NameTree) dictionary with keys using PDFDocEncoding (issue 14847)\", async function () {\n      const loadingTask = getDocument(buildGetDocumentParams(\"issue14847.pdf\"));\n      const pdfDoc = await loadingTask.promise;\n      const destination = await pdfDoc.getDestination(\"index\");\n      expect(destination).toEqual([{\n        num: 10,\n        gen: 0\n      }, {\n        name: \"XYZ\"\n      }, 85.039, 728.504, null]);\n      await loadingTask.destroy();\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"gets non-string destination","suites":["api","PDFDocument"],"line":835,"updatePoint":{"line":835,"column":35,"index":36876},"code":"    it(\"gets non-string destination\", async function () {\n      let numberPromise = pdfDocument.getDestination(4.3);\n      let booleanPromise = pdfDocument.getDestination(true);\n      let arrayPromise = pdfDocument.getDestination([{\n        num: 17,\n        gen: 0\n      }, {\n        name: \"XYZ\"\n      }, 0, 841.89, null]);\n      numberPromise = numberPromise.then(function () {\n        throw new Error(\"shall fail for non-string destination.\");\n      }, function (reason) {\n        expect(reason instanceof Error).toEqual(true);\n      });\n      booleanPromise = booleanPromise.then(function () {\n        throw new Error(\"shall fail for non-string destination.\");\n      }, function (reason) {\n        expect(reason instanceof Error).toEqual(true);\n      });\n      arrayPromise = arrayPromise.then(function () {\n        throw new Error(\"shall fail for non-string destination.\");\n      }, function (reason) {\n        expect(reason instanceof Error).toEqual(true);\n      });\n      await Promise.all([numberPromise, booleanPromise, arrayPromise]);\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"gets non-existent page labels","suites":["api","PDFDocument"],"line":861,"updatePoint":{"line":861,"column":37,"index":37930},"code":"    it(\"gets non-existent page labels\", async function () {\n      const pageLabels = await pdfDocument.getPageLabels();\n      expect(pageLabels).toEqual(null);\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"gets page labels","suites":["api","PDFDocument"],"line":865,"updatePoint":{"line":865,"column":24,"index":38085},"code":"    it(\"gets page labels\", async function () {\n      // PageLabels with Roman/Arabic numerals.\n      const loadingTask0 = getDocument(buildGetDocumentParams(\"bug793632.pdf\"));\n      const promise0 = loadingTask0.promise.then(function (pdfDoc) {\n        return pdfDoc.getPageLabels();\n      });\n\n      // PageLabels with only a label prefix.\n      const loadingTask1 = getDocument(buildGetDocumentParams(\"issue1453.pdf\"));\n      const promise1 = loadingTask1.promise.then(function (pdfDoc) {\n        return pdfDoc.getPageLabels();\n      });\n\n      // PageLabels identical to standard page numbering.\n      const loadingTask2 = getDocument(buildGetDocumentParams(\"rotation.pdf\"));\n      const promise2 = loadingTask2.promise.then(function (pdfDoc) {\n        return pdfDoc.getPageLabels();\n      });\n\n      // PageLabels with bad \"Prefix\" entries.\n      const loadingTask3 = getDocument(buildGetDocumentParams(\"bad-PageLabels.pdf\"));\n      const promise3 = loadingTask3.promise.then(function (pdfDoc) {\n        return pdfDoc.getPageLabels();\n      });\n      const pageLabels = await Promise.all([promise0, promise1, promise2, promise3]);\n      expect(pageLabels[0]).toEqual([\"i\", \"ii\", \"iii\", \"1\"]);\n      expect(pageLabels[1]).toEqual([\"Front Page1\"]);\n      expect(pageLabels[2]).toEqual([\"1\", \"2\"]);\n      expect(pageLabels[3]).toEqual([\"X3\"]);\n      await Promise.all([loadingTask0.destroy(), loadingTask1.destroy(), loadingTask2.destroy(), loadingTask3.destroy()]);\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"gets default page layout","suites":["api","PDFDocument"],"line":896,"updatePoint":{"line":896,"column":32,"index":39569},"code":"    it(\"gets default page layout\", async function () {\n      const loadingTask = getDocument(buildGetDocumentParams(\"tracemonkey.pdf\"));\n      const pdfDoc = await loadingTask.promise;\n      const pageLayout = await pdfDoc.getPageLayout();\n      expect(pageLayout).toEqual(\"\");\n      await loadingTask.destroy();\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"gets non-default page layout","suites":["api","PDFDocument"],"line":903,"updatePoint":{"line":903,"column":36,"index":39894},"code":"    it(\"gets non-default page layout\", async function () {\n      const pageLayout = await pdfDocument.getPageLayout();\n      expect(pageLayout).toEqual(\"SinglePage\");\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"gets default page mode","suites":["api","PDFDocument"],"line":907,"updatePoint":{"line":907,"column":30,"index":40063},"code":"    it(\"gets default page mode\", async function () {\n      const loadingTask = getDocument(buildGetDocumentParams(\"tracemonkey.pdf\"));\n      const pdfDoc = await loadingTask.promise;\n      const pageMode = await pdfDoc.getPageMode();\n      expect(pageMode).toEqual(\"UseNone\");\n      await loadingTask.destroy();\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"gets non-default page mode","suites":["api","PDFDocument"],"line":914,"updatePoint":{"line":914,"column":34,"index":40387},"code":"    it(\"gets non-default page mode\", async function () {\n      const pageMode = await pdfDocument.getPageMode();\n      expect(pageMode).toEqual(\"UseOutlines\");\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"gets default viewer preferences","suites":["api","PDFDocument"],"line":918,"updatePoint":{"line":918,"column":39,"index":40560},"code":"    it(\"gets default viewer preferences\", async function () {\n      const loadingTask = getDocument(buildGetDocumentParams(\"tracemonkey.pdf\"));\n      const pdfDoc = await loadingTask.promise;\n      const prefs = await pdfDoc.getViewerPreferences();\n      expect(prefs).toEqual(null);\n      await loadingTask.destroy();\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"gets non-default viewer preferences","suites":["api","PDFDocument"],"line":925,"updatePoint":{"line":925,"column":43,"index":40891},"code":"    it(\"gets non-default viewer preferences\", async function () {\n      const prefs = await pdfDocument.getViewerPreferences();\n      expect(prefs).toEqual({\n        Direction: \"L2R\"\n      });\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"gets default open action","suites":["api","PDFDocument"],"line":931,"updatePoint":{"line":931,"column":32,"index":41081},"code":"    it(\"gets default open action\", async function () {\n      const loadingTask = getDocument(buildGetDocumentParams(\"tracemonkey.pdf\"));\n      const pdfDoc = await loadingTask.promise;\n      const openAction = await pdfDoc.getOpenAction();\n      expect(openAction).toEqual(null);\n      await loadingTask.destroy();\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"gets non-default open action (with destination)","suites":["api","PDFDocument"],"line":938,"updatePoint":{"line":938,"column":55,"index":41427},"code":"    it(\"gets non-default open action (with destination)\", async function () {\n      const openAction = await pdfDocument.getOpenAction();\n      expect(openAction.dest).toEqual([{\n        num: 15,\n        gen: 0\n      }, {\n        name: \"FitH\"\n      }, null]);\n      expect(openAction.action).toBeUndefined();\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"gets non-default open action (with Print action)","suites":["api","PDFDocument"],"line":948,"updatePoint":{"line":948,"column":56,"index":41745},"code":"    it(\"gets non-default open action (with Print action)\", async function () {\n      // PDF document with \"Print\" Named action in the OpenAction dictionary.\n      const loadingTask1 = getDocument(buildGetDocumentParams(\"bug1001080.pdf\"));\n      // PDF document with \"Print\" Named action in the OpenAction dictionary,\n      // but the OpenAction dictionary is missing the `Type` entry.\n      const loadingTask2 = getDocument(buildGetDocumentParams(\"issue11442_reduced.pdf\"));\n      const promise1 = loadingTask1.promise.then(function (pdfDoc) {\n        return pdfDoc.getOpenAction();\n      }).then(function (openAction) {\n        expect(openAction.dest).toBeUndefined();\n        expect(openAction.action).toEqual(\"Print\");\n        return loadingTask1.destroy();\n      });\n      const promise2 = loadingTask2.promise.then(function (pdfDoc) {\n        return pdfDoc.getOpenAction();\n      }).then(function (openAction) {\n        expect(openAction.dest).toBeUndefined();\n        expect(openAction.action).toEqual(\"Print\");\n        return loadingTask2.destroy();\n      });\n      await Promise.all([promise1, promise2]);\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"gets non-existent attachments","suites":["api","PDFDocument"],"line":970,"updatePoint":{"line":970,"column":37,"index":42848},"code":"    it(\"gets non-existent attachments\", async function () {\n      const attachments = await pdfDocument.getAttachments();\n      expect(attachments).toEqual(null);\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"gets attachments","suites":["api","PDFDocument"],"line":974,"updatePoint":{"line":974,"column":24,"index":43006},"code":"    it(\"gets attachments\", async function () {\n      const loadingTask = getDocument(buildGetDocumentParams(\"attachment.pdf\"));\n      const pdfDoc = await loadingTask.promise;\n      const attachments = await pdfDoc.getAttachments();\n      const attachment = attachments[\"foo.txt\"];\n      expect(attachment.filename).toEqual(\"foo.txt\");\n      expect(attachment.content).toEqual(new Uint8Array([98, 97, 114, 32, 98, 97, 122, 32, 10]));\n      await loadingTask.destroy();\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"gets javascript","suites":["api","PDFDocument"],"line":983,"updatePoint":{"line":983,"column":23,"index":43482},"code":"    it(\"gets javascript\", async function () {\n      const javascript = await pdfDocument.getJavaScript();\n      expect(javascript).toEqual(null);\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"gets javascript with printing instructions (JS action)","suites":["api","PDFDocument"],"line":987,"updatePoint":{"line":987,"column":62,"index":43675},"code":"    it(\"gets javascript with printing instructions (JS action)\", async function () {\n      // PDF document with \"JavaScript\" action in the OpenAction dictionary.\n      const loadingTask = getDocument(buildGetDocumentParams(\"issue6106.pdf\"));\n      const pdfDoc = await loadingTask.promise;\n      const javascript = await pdfDoc.getJavaScript();\n      expect(javascript).toEqual([\"this.print({bUI:true,bSilent:false,bShrinkToFit:true});\"]);\n      expect(javascript[0]).toMatch(AutoPrintRegExp);\n      await loadingTask.destroy();\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"gets hasJSActions, in document without javaScript","suites":["api","PDFDocument"],"line":996,"updatePoint":{"line":996,"column":57,"index":44207},"code":"    it(\"gets hasJSActions, in document without javaScript\", async function () {\n      const hasJSActions = await pdfDocument.hasJSActions();\n      expect(hasJSActions).toEqual(false);\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"gets hasJSActions, in document with javaScript","suites":["api","PDFDocument"],"line":1000,"updatePoint":{"line":1000,"column":54,"index":44396},"code":"    it(\"gets hasJSActions, in document with javaScript\", async function () {\n      const loadingTask = getDocument(buildGetDocumentParams(\"doc_actions.pdf\"));\n      const pdfDoc = await loadingTask.promise;\n      const hasJSActions = await pdfDoc.hasJSActions();\n      expect(hasJSActions).toEqual(true);\n      await loadingTask.destroy();\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"gets non-existent JSActions","suites":["api","PDFDocument"],"line":1007,"updatePoint":{"line":1007,"column":35,"index":44725},"code":"    it(\"gets non-existent JSActions\", async function () {\n      const jsActions = await pdfDocument.getJSActions();\n      expect(jsActions).toEqual(null);\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"gets JSActions","suites":["api","PDFDocument"],"line":1011,"updatePoint":{"line":1011,"column":22,"index":44875},"code":"    it(\"gets JSActions\", async function () {\n      // PDF document with \"JavaScript\" action in the OpenAction dictionary.\n      const loadingTask = getDocument(buildGetDocumentParams(\"doc_actions.pdf\"));\n      const pdfDoc = await loadingTask.promise;\n      const docActions = await pdfDoc.getJSActions();\n      const page1 = await pdfDoc.getPage(1);\n      const page1Actions = await page1.getJSActions();\n      const page3 = await pdfDoc.getPage(3);\n      const page3Actions = await page3.getJSActions();\n      expect(docActions).toEqual({\n        DidPrint: [`this.getField(\"Text2\").value = \"DidPrint\";`],\n        DidSave: [`this.getField(\"Text2\").value = \"DidSave\";`],\n        WillClose: [`this.getField(\"Text1\").value = \"WillClose\";`],\n        WillPrint: [`this.getField(\"Text1\").value = \"WillPrint\";`],\n        WillSave: [`this.getField(\"Text1\").value = \"WillSave\";`]\n      });\n      expect(page1Actions).toEqual({\n        PageOpen: [`this.getField(\"Text1\").value = \"PageOpen 1\";`],\n        PageClose: [`this.getField(\"Text2\").value = \"PageClose 1\";`]\n      });\n      expect(page3Actions).toEqual({\n        PageOpen: [`this.getField(\"Text5\").value = \"PageOpen 3\";`],\n        PageClose: [`this.getField(\"Text6\").value = \"PageClose 3\";`]\n      });\n      await loadingTask.destroy();\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"gets non-existent fieldObjects","suites":["api","PDFDocument"],"line":1037,"updatePoint":{"line":1037,"column":38,"index":46184},"code":"    it(\"gets non-existent fieldObjects\", async function () {\n      const fieldObjects = await pdfDocument.getFieldObjects();\n      expect(fieldObjects).toEqual(null);\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"gets fieldObjects","suites":["api","PDFDocument"],"line":1041,"updatePoint":{"line":1041,"column":25,"index":46346},"code":"    it(\"gets fieldObjects\", async function () {\n      const loadingTask = getDocument(buildGetDocumentParams(\"js-authors.pdf\"));\n      const pdfDoc = await loadingTask.promise;\n      const fieldObjects = await pdfDoc.getFieldObjects();\n      expect(fieldObjects).toEqual({\n        Text1: [{\n          id: \"25R\",\n          value: \"\",\n          defaultValue: \"\",\n          multiline: false,\n          password: false,\n          charLimit: 0,\n          comb: false,\n          editable: true,\n          hidden: false,\n          name: \"Text1\",\n          rect: [24.1789, 719.66, 432.22, 741.66],\n          actions: null,\n          page: 0,\n          strokeColor: null,\n          fillColor: null,\n          rotation: 0,\n          type: \"text\"\n        }],\n        Button1: [{\n          id: \"26R\",\n          value: \"Off\",\n          defaultValue: null,\n          exportValues: undefined,\n          editable: true,\n          name: \"Button1\",\n          rect: [455.436, 719.678, 527.436, 739.678],\n          hidden: false,\n          actions: {\n            Action: [`this.getField(\"Text1\").value = this.info.authors.join(\"::\");`]\n          },\n          page: 0,\n          strokeColor: null,\n          fillColor: new Uint8ClampedArray([192, 192, 192]),\n          rotation: 0,\n          type: \"button\"\n        }]\n      });\n      await loadingTask.destroy();\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"check field object for group of buttons","suites":["api","PDFDocument"],"line":1086,"updatePoint":{"line":1086,"column":47,"index":47718},"code":"    it(\"check field object for group of buttons\", async function () {\n      if (isNodeJS) {\n        pending(\"Linked test-cases are not supported in Node.js.\");\n      }\n      const loadingTask = getDocument(buildGetDocumentParams(\"f1040_2022.pdf\"));\n      const pdfDoc = await loadingTask.promise;\n      const fieldObjects = await pdfDoc.getFieldObjects();\n      expect(fieldObjects[\"topmostSubform[0].Page1[0].c1_01\"].map(o => o.id)).toEqual([\"1566R\", \"1568R\", \"1569R\", \"1570R\", \"1571R\"]);\n      await loadingTask.destroy();\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"gets non-existent calculationOrder","suites":["api","PDFDocument"],"line":1096,"updatePoint":{"line":1096,"column":42,"index":48246},"code":"    it(\"gets non-existent calculationOrder\", async function () {\n      const calculationOrder = await pdfDocument.getCalculationOrderIds();\n      expect(calculationOrder).toEqual(null);\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"gets calculationOrder","suites":["api","PDFDocument"],"line":1100,"updatePoint":{"line":1100,"column":29,"index":48427},"code":"    it(\"gets calculationOrder\", async function () {\n      if (isNodeJS) {\n        pending(\"Linked test-cases are not supported in Node.js.\");\n      }\n      const loadingTask = getDocument(buildGetDocumentParams(\"issue13132.pdf\"));\n      const pdfDoc = await loadingTask.promise;\n      const calculationOrder = await pdfDoc.getCalculationOrderIds();\n      expect(calculationOrder).toEqual([\"319R\", \"320R\", \"321R\", \"322R\", \"323R\", \"324R\", \"325R\", \"326R\", \"327R\", \"328R\", \"329R\", \"330R\", \"331R\", \"332R\", \"333R\", \"334R\", \"335R\"]);\n      await loadingTask.destroy();\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"gets non-existent outline","suites":["api","PDFDocument"],"line":1110,"updatePoint":{"line":1110,"column":33,"index":49001},"code":"    it(\"gets non-existent outline\", async function () {\n      const loadingTask = getDocument(buildGetDocumentParams(\"tracemonkey.pdf\"));\n      const pdfDoc = await loadingTask.promise;\n      const outline = await pdfDoc.getOutline();\n      expect(outline).toEqual(null);\n      await loadingTask.destroy();\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"gets outline","suites":["api","PDFDocument"],"line":1117,"updatePoint":{"line":1117,"column":20,"index":49303},"code":"    it(\"gets outline\", async function () {\n      const outline = await pdfDocument.getOutline();\n\n      // Two top level entries.\n      expect(Array.isArray(outline)).toEqual(true);\n      expect(outline.length).toEqual(2);\n\n      // Make sure some basic attributes are set.\n      const outlineItem = outline[1];\n      expect(outlineItem.title).toEqual(\"Chapter 1\");\n      expect(Array.isArray(outlineItem.dest)).toEqual(true);\n      expect(outlineItem.url).toEqual(null);\n      expect(outlineItem.unsafeUrl).toBeUndefined();\n      expect(outlineItem.newWindow).toBeUndefined();\n      expect(outlineItem.bold).toEqual(true);\n      expect(outlineItem.italic).toEqual(false);\n      expect(outlineItem.color).toEqual(new Uint8ClampedArray([0, 64, 128]));\n      expect(outlineItem.items.length).toEqual(1);\n      expect(outlineItem.items[0].title).toEqual(\"Paragraph 1.1\");\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"gets outline containing a URL","suites":["api","PDFDocument"],"line":1137,"updatePoint":{"line":1137,"column":37,"index":50197},"code":"    it(\"gets outline containing a URL\", async function () {\n      const loadingTask = getDocument(buildGetDocumentParams(\"issue3214.pdf\"));\n      const pdfDoc = await loadingTask.promise;\n      const outline = await pdfDoc.getOutline();\n      expect(Array.isArray(outline)).toEqual(true);\n      expect(outline.length).toEqual(5);\n      const outlineItemTwo = outline[2];\n      expect(typeof outlineItemTwo.title).toEqual(\"string\");\n      expect(outlineItemTwo.dest).toEqual(null);\n      expect(outlineItemTwo.url).toEqual(\"http://google.com/\");\n      expect(outlineItemTwo.unsafeUrl).toEqual(\"http://google.com\");\n      expect(outlineItemTwo.newWindow).toBeUndefined();\n      const outlineItemOne = outline[1];\n      expect(outlineItemOne.bold).toEqual(false);\n      expect(outlineItemOne.italic).toEqual(true);\n      expect(outlineItemOne.color).toEqual(new Uint8ClampedArray([0, 0, 0]));\n      await loadingTask.destroy();\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"gets outline, with dest-strings using PDFDocEncoding (issue 14864)","suites":["api","PDFDocument"],"line":1155,"updatePoint":{"line":1155,"column":74,"index":51167},"code":"    it(\"gets outline, with dest-strings using PDFDocEncoding (issue 14864)\", async function () {\n      if (isNodeJS) {\n        pending(\"Linked test-cases are not supported in Node.js.\");\n      }\n      const loadingTask = getDocument(buildGetDocumentParams(\"issue14864.pdf\"));\n      const pdfDoc = await loadingTask.promise;\n      const outline = await pdfDoc.getOutline();\n      expect(Array.isArray(outline)).toEqual(true);\n      expect(outline.length).toEqual(6);\n      expect(outline[4]).toEqual({\n        action: null,\n        attachment: undefined,\n        dest: \"Händel -- Halle🎆lujah\",\n        url: null,\n        unsafeUrl: undefined,\n        newWindow: undefined,\n        setOCGState: undefined,\n        title: \"Händel -- Halle🎆lujah\",\n        color: new Uint8ClampedArray([0, 0, 0]),\n        count: undefined,\n        bold: false,\n        italic: false,\n        items: []\n      });\n      await loadingTask.destroy();\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"gets outline, with named-actions (issue 15367)","suites":["api","PDFDocument"],"line":1181,"updatePoint":{"line":1181,"column":54,"index":52083},"code":"    it(\"gets outline, with named-actions (issue 15367)\", async function () {\n      const loadingTask = getDocument(buildGetDocumentParams(\"issue15367.pdf\"));\n      const pdfDoc = await loadingTask.promise;\n      const outline = await pdfDoc.getOutline();\n      expect(Array.isArray(outline)).toEqual(true);\n      expect(outline.length).toEqual(4);\n      expect(outline[1]).toEqual({\n        action: \"PrevPage\",\n        attachment: undefined,\n        dest: null,\n        url: null,\n        unsafeUrl: undefined,\n        newWindow: undefined,\n        setOCGState: undefined,\n        title: \"Previous Page\",\n        color: new Uint8ClampedArray([0, 0, 0]),\n        count: undefined,\n        bold: false,\n        italic: false,\n        items: []\n      });\n      await loadingTask.destroy();\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"gets outline, with SetOCGState-actions (issue 15372)","suites":["api","PDFDocument"],"line":1204,"updatePoint":{"line":1204,"column":60,"index":52884},"code":"    it(\"gets outline, with SetOCGState-actions (issue 15372)\", async function () {\n      const loadingTask = getDocument(buildGetDocumentParams(\"issue15372.pdf\"));\n      const pdfDoc = await loadingTask.promise;\n      const outline = await pdfDoc.getOutline();\n      expect(Array.isArray(outline)).toEqual(true);\n      expect(outline.length).toEqual(1);\n      expect(outline[0]).toEqual({\n        action: null,\n        attachment: undefined,\n        dest: null,\n        url: null,\n        unsafeUrl: undefined,\n        newWindow: undefined,\n        setOCGState: {\n          state: [\"OFF\", \"ON\", \"50R\"],\n          preserveRB: false\n        },\n        title: \"Display Layer\",\n        color: new Uint8ClampedArray([0, 0, 0]),\n        count: undefined,\n        bold: false,\n        italic: false,\n        items: []\n      });\n      await loadingTask.destroy();\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"gets outline with non-displayable chars","suites":["api","PDFDocument"],"line":1230,"updatePoint":{"line":1230,"column":47,"index":53735},"code":"    it(\"gets outline with non-displayable chars\", async function () {\n      const loadingTask = getDocument(buildGetDocumentParams(\"issue14267.pdf\"));\n      const pdfDoc = await loadingTask.promise;\n      const outline = await pdfDoc.getOutline();\n      expect(Array.isArray(outline)).toEqual(true);\n      expect(outline.length).toEqual(1);\n      const outlineItem = outline[0];\n      expect(outlineItem.title).toEqual(\"hello\\x11world\");\n      await loadingTask.destroy();\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"gets non-existent permissions","suites":["api","PDFDocument"],"line":1240,"updatePoint":{"line":1240,"column":37,"index":54206},"code":"    it(\"gets non-existent permissions\", async function () {\n      const permissions = await pdfDocument.getPermissions();\n      expect(permissions).toEqual(null);\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"gets permissions","suites":["api","PDFDocument"],"line":1244,"updatePoint":{"line":1244,"column":24,"index":54364},"code":"    it(\"gets permissions\", async function () {\n      // Editing not allowed.\n      const loadingTask0 = getDocument(buildGetDocumentParams(\"issue9972-1.pdf\"));\n      const promise0 = loadingTask0.promise.then(function (pdfDoc) {\n        return pdfDoc.getPermissions();\n      });\n\n      // Printing not allowed.\n      const loadingTask1 = getDocument(buildGetDocumentParams(\"issue9972-2.pdf\"));\n      const promise1 = loadingTask1.promise.then(function (pdfDoc) {\n        return pdfDoc.getPermissions();\n      });\n\n      // Copying not allowed.\n      const loadingTask2 = getDocument(buildGetDocumentParams(\"issue9972-3.pdf\"));\n      const promise2 = loadingTask2.promise.then(function (pdfDoc) {\n        return pdfDoc.getPermissions();\n      });\n      const totalPermissionCount = Object.keys(PermissionFlag).length;\n      const permissions = await Promise.all([promise0, promise1, promise2]);\n      expect(permissions[0].length).toEqual(totalPermissionCount - 1);\n      expect(permissions[0].includes(PermissionFlag.MODIFY_CONTENTS)).toBeFalsy();\n      expect(permissions[1].length).toEqual(totalPermissionCount - 2);\n      expect(permissions[1].includes(PermissionFlag.PRINT)).toBeFalsy();\n      expect(permissions[1].includes(PermissionFlag.PRINT_HIGH_QUALITY)).toBeFalsy();\n      expect(permissions[2].length).toEqual(totalPermissionCount - 1);\n      expect(permissions[2].includes(PermissionFlag.COPY)).toBeFalsy();\n      await Promise.all([loadingTask0.destroy(), loadingTask1.destroy(), loadingTask2.destroy()]);\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"gets metadata","suites":["api","PDFDocument"],"line":1273,"updatePoint":{"line":1273,"column":21,"index":55889},"code":"    it(\"gets metadata\", async function () {\n      const {\n        info,\n        metadata,\n        contentDispositionFilename,\n        contentLength\n      } = await pdfDocument.getMetadata();\n      expect(info.Title).toEqual(\"Basic API Test\");\n      // Custom, non-standard, information dictionary entries.\n      expect(info.Custom).toEqual(undefined);\n      // The following are PDF.js specific, non-standard, properties.\n      expect(info.PDFFormatVersion).toEqual(\"1.7\");\n      expect(info.Language).toEqual(\"en\");\n      expect(info.EncryptFilterName).toEqual(null);\n      expect(info.IsLinearized).toEqual(false);\n      expect(info.IsAcroFormPresent).toEqual(false);\n      expect(info.IsXFAPresent).toEqual(false);\n      expect(info.IsCollectionPresent).toEqual(false);\n      expect(info.IsSignaturesPresent).toEqual(false);\n      expect(metadata instanceof Metadata).toEqual(true);\n      expect(metadata.get(\"dc:title\")).toEqual(\"Basic API Test\");\n      expect(contentDispositionFilename).toEqual(null);\n      expect(contentLength).toEqual(basicApiFileLength);\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"gets metadata, with custom info dict entries","suites":["api","PDFDocument"],"line":1297,"updatePoint":{"line":1297,"column":52,"index":56993},"code":"    it(\"gets metadata, with custom info dict entries\", async function () {\n      const loadingTask = getDocument(buildGetDocumentParams(\"tracemonkey.pdf\"));\n      const pdfDoc = await loadingTask.promise;\n      const {\n        info,\n        metadata,\n        contentDispositionFilename,\n        contentLength\n      } = await pdfDoc.getMetadata();\n      expect(info.Creator).toEqual(\"TeX\");\n      expect(info.Producer).toEqual(\"pdfeTeX-1.21a\");\n      expect(info.CreationDate).toEqual(\"D:20090401163925-07'00'\");\n      // Custom, non-standard, information dictionary entries.\n      const custom = info.Custom;\n      expect(typeof custom === \"object\" && custom !== null).toEqual(true);\n      expect(custom[\"PTEX.Fullbanner\"]).toEqual(\"This is pdfeTeX, \" + \"Version 3.141592-1.21a-2.2 (Web2C 7.5.4) kpathsea version 3.5.6\");\n      // The following are PDF.js specific, non-standard, properties.\n      expect(info.PDFFormatVersion).toEqual(\"1.4\");\n      expect(info.Language).toEqual(null);\n      expect(info.EncryptFilterName).toEqual(null);\n      expect(info.IsLinearized).toEqual(false);\n      expect(info.IsAcroFormPresent).toEqual(false);\n      expect(info.IsXFAPresent).toEqual(false);\n      expect(info.IsCollectionPresent).toEqual(false);\n      expect(info.IsSignaturesPresent).toEqual(false);\n      expect(metadata).toEqual(null);\n      expect(contentDispositionFilename).toEqual(null);\n      expect(contentLength).toEqual(1016315);\n      await loadingTask.destroy();\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"gets metadata, with missing PDF header (bug 1606566)","suites":["api","PDFDocument"],"line":1327,"updatePoint":{"line":1327,"column":60,"index":58482},"code":"    it(\"gets metadata, with missing PDF header (bug 1606566)\", async function () {\n      const loadingTask = getDocument(buildGetDocumentParams(\"bug1606566.pdf\"));\n      const pdfDoc = await loadingTask.promise;\n      const {\n        info,\n        metadata,\n        contentDispositionFilename,\n        contentLength\n      } = await pdfDoc.getMetadata();\n\n      // Custom, non-standard, information dictionary entries.\n      expect(info.Custom).toEqual(undefined);\n      // The following are PDF.js specific, non-standard, properties.\n      expect(info.PDFFormatVersion).toEqual(null);\n      expect(info.Language).toEqual(null);\n      expect(info.EncryptFilterName).toEqual(null);\n      expect(info.IsLinearized).toEqual(false);\n      expect(info.IsAcroFormPresent).toEqual(false);\n      expect(info.IsXFAPresent).toEqual(false);\n      expect(info.IsCollectionPresent).toEqual(false);\n      expect(info.IsSignaturesPresent).toEqual(false);\n      expect(metadata).toEqual(null);\n      expect(contentDispositionFilename).toEqual(null);\n      expect(contentLength).toEqual(624);\n      await loadingTask.destroy();\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"gets metadata, with corrupt /Metadata XRef entry","suites":["api","PDFDocument"],"line":1353,"updatePoint":{"line":1353,"column":56,"index":59596},"code":"    it(\"gets metadata, with corrupt /Metadata XRef entry\", async function () {\n      const loadingTask = getDocument(buildGetDocumentParams(\"PDFBOX-3148-2-fuzzed.pdf\"));\n      const pdfDoc = await loadingTask.promise;\n      const {\n        info,\n        metadata,\n        contentDispositionFilename,\n        contentLength\n      } = await pdfDoc.getMetadata();\n\n      // Custom, non-standard, information dictionary entries.\n      expect(info.Custom).toEqual(undefined);\n      // The following are PDF.js specific, non-standard, properties.\n      expect(info.PDFFormatVersion).toEqual(\"1.6\");\n      expect(info.Language).toEqual(null);\n      expect(info.EncryptFilterName).toEqual(null);\n      expect(info.IsLinearized).toEqual(false);\n      expect(info.IsAcroFormPresent).toEqual(true);\n      expect(info.IsXFAPresent).toEqual(false);\n      expect(info.IsCollectionPresent).toEqual(false);\n      expect(info.IsSignaturesPresent).toEqual(false);\n      expect(metadata).toEqual(null);\n      expect(contentDispositionFilename).toEqual(null);\n      expect(contentLength).toEqual(244351);\n      await loadingTask.destroy();\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"gets markInfo","suites":["api","PDFDocument"],"line":1379,"updatePoint":{"line":1379,"column":21,"index":60688},"code":"    it(\"gets markInfo\", async function () {\n      const loadingTask = getDocument(buildGetDocumentParams(\"annotation-line.pdf\"));\n      const pdfDoc = await loadingTask.promise;\n      const markInfo = await pdfDoc.getMarkInfo();\n      expect(markInfo.Marked).toEqual(true);\n      expect(markInfo.UserProperties).toEqual(false);\n      expect(markInfo.Suspects).toEqual(false);\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"gets data","suites":["api","PDFDocument"],"line":1387,"updatePoint":{"line":1387,"column":17,"index":61068},"code":"    it(\"gets data\", async function () {\n      const data = await pdfDocument.getData();\n      expect(data instanceof Uint8Array).toEqual(true);\n      expect(data.length).toEqual(basicApiFileLength);\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"gets download info","suites":["api","PDFDocument"],"line":1392,"updatePoint":{"line":1392,"column":26,"index":61284},"code":"    it(\"gets download info\", async function () {\n      const downloadInfo = await pdfDocument.getDownloadInfo();\n      expect(downloadInfo).toEqual({\n        length: basicApiFileLength\n      });\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"cleans up document resources","suites":["api","PDFDocument"],"line":1398,"updatePoint":{"line":1398,"column":36,"index":61497},"code":"    it(\"cleans up document resources\", async function () {\n      await pdfDocument.cleanup();\n      expect(true).toEqual(true);\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"checks that fingerprints are unique","suites":["api","PDFDocument"],"line":1402,"updatePoint":{"line":1402,"column":43,"index":61640},"code":"    it(\"checks that fingerprints are unique\", async function () {\n      const loadingTask1 = getDocument(buildGetDocumentParams(\"issue4436r.pdf\"));\n      const loadingTask2 = getDocument(buildGetDocumentParams(\"issue4575.pdf\"));\n      const data = await Promise.all([loadingTask1.promise, loadingTask2.promise]);\n      const fingerprints1 = data[0].fingerprints;\n      const fingerprints2 = data[1].fingerprints;\n      expect(fingerprints1).not.toEqual(fingerprints2);\n      expect(fingerprints1).toEqual([\"657428c0628e329f9a281fb6d2d092d4\", null]);\n      expect(fingerprints2).toEqual([\"04c7126b34a46b6d4d6e7a1eff7edcb6\", null]);\n      await Promise.all([loadingTask1.destroy(), loadingTask2.destroy()]);\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"write a value in an annotation, save the pdf and load it","suites":["api","PDFDocument"],"line":1413,"updatePoint":{"line":1413,"column":64,"index":62375},"code":"    it(\"write a value in an annotation, save the pdf and load it\", async function () {\n      let loadingTask = getDocument(buildGetDocumentParams(\"evaljs.pdf\"));\n      let pdfDoc = await loadingTask.promise;\n      const value = \"Hello World\";\n      pdfDoc.annotationStorage.setValue(\"55R\", {\n        value\n      });\n      const data = await pdfDoc.saveDocument();\n      await loadingTask.destroy();\n      loadingTask = getDocument(data);\n      pdfDoc = await loadingTask.promise;\n      const pdfPage = await pdfDoc.getPage(1);\n      const annotations = await pdfPage.getAnnotations();\n      const field = annotations.find(annotation => annotation.id === \"55R\");\n      expect(!!field).toEqual(true);\n      expect(field.fieldValue).toEqual(value);\n      await loadingTask.destroy();\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"write a value in an annotation, save the pdf and check the value in xfa datasets (1)","suites":["api","PDFDocument"],"line":1431,"updatePoint":{"line":1431,"column":92,"index":63192},"code":"    it(\"write a value in an annotation, save the pdf and check the value in xfa datasets (1)\", async function () {\n      if (isNodeJS) {\n        pending(\"Linked test-cases are not supported in Node.js.\");\n      }\n      let loadingTask = getDocument(buildGetDocumentParams(\"issue16081.pdf\"));\n      let pdfDoc = await loadingTask.promise;\n      const value = \"Hello World\";\n      pdfDoc.annotationStorage.setValue(\"2055R\", {\n        value\n      });\n      const data = await pdfDoc.saveDocument();\n      await loadingTask.destroy();\n      loadingTask = getDocument(data);\n      pdfDoc = await loadingTask.promise;\n      const datasets = await pdfDoc.getXFADatasets();\n      const surName = getNamedNodeInXML(datasets.node, \"xfa:data.PPTC_153.Page1.PersonalInformation.TitleAndNameInformation.PersonalInfo.Surname.#text\");\n      expect(surName.nodeValue).toEqual(value);\n      await loadingTask.destroy();\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"write a value in an annotation, save the pdf and check the value in xfa datasets (2)","suites":["api","PDFDocument"],"line":1450,"updatePoint":{"line":1450,"column":92,"index":64103},"code":"    it(\"write a value in an annotation, save the pdf and check the value in xfa datasets (2)\", async function () {\n      if (isNodeJS) {\n        pending(\"Linked test-cases are not supported in Node.js.\");\n      }\n\n      // In this file the path to the fields are wrong but the last path element\n      // is unique so we can guess what the node is.\n      let loadingTask = getDocument(buildGetDocumentParams(\"f1040_2022.pdf\"));\n      let pdfDoc = await loadingTask.promise;\n      pdfDoc.annotationStorage.setValue(\"1573R\", {\n        value: \"hello\"\n      });\n      pdfDoc.annotationStorage.setValue(\"1577R\", {\n        value: \"world\"\n      });\n      const data = await pdfDoc.saveDocument();\n      await loadingTask.destroy();\n      loadingTask = getDocument(data);\n      pdfDoc = await loadingTask.promise;\n      const datasets = await pdfDoc.getXFADatasets();\n      const firstName = getNamedNodeInXML(datasets.node, \"xfa:data.topmostSubform.f1_02.#text\");\n      expect(firstName.nodeValue).toEqual(\"hello\");\n      const lastName = getNamedNodeInXML(datasets.node, \"xfa:data.topmostSubform.f1_06.#text\");\n      expect(lastName.nodeValue).toEqual(\"world\");\n      await loadingTask.destroy();\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"write a new annotation, save the pdf and check that the prev entry in xref stream is correct","suites":["api","PDFDocument"],"line":1476,"updatePoint":{"line":1476,"column":100,"index":65309},"code":"    it(\"write a new annotation, save the pdf and check that the prev entry in xref stream is correct\", async function () {\n      if (isNodeJS) {\n        pending(\"Linked test-cases are not supported in Node.js.\");\n      }\n      let loadingTask = getDocument(buildGetDocumentParams(\"bug1823296.pdf\"));\n      let pdfDoc = await loadingTask.promise;\n      pdfDoc.annotationStorage.setValue(\"pdfjs_internal_editor_0\", {\n        annotationType: AnnotationEditorType.FREETEXT,\n        rect: [12, 34, 56, 78],\n        rotation: 0,\n        fontSize: 10,\n        color: [0, 0, 0],\n        value: \"Hello PDF.js World!\",\n        pageIndex: 0\n      });\n      const data = await pdfDoc.saveDocument();\n      await loadingTask.destroy();\n      loadingTask = getDocument(data);\n      pdfDoc = await loadingTask.promise;\n      const xrefPrev = await pdfDoc.getXRefPrevValue();\n      expect(xrefPrev).toEqual(143954);\n      await loadingTask.destroy();\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"edit and write an existing annotation, save the pdf and check that the Annot array doesn't contain dup entries","suites":["api","PDFDocument"],"line":1499,"updatePoint":{"line":1499,"column":118,"index":66270},"code":"    it(\"edit and write an existing annotation, save the pdf and check that the Annot array doesn't contain dup entries\", async function () {\n      let loadingTask = getDocument(buildGetDocumentParams(\"issue14438.pdf\"));\n      let pdfDoc = await loadingTask.promise;\n      pdfDoc.annotationStorage.setValue(\"pdfjs_internal_editor_0\", {\n        annotationType: AnnotationEditorType.FREETEXT,\n        rect: [12, 34, 56, 78],\n        rotation: 0,\n        fontSize: 10,\n        color: [0, 0, 0],\n        value: \"Hello PDF.js World!\",\n        pageIndex: 0,\n        id: \"10R\"\n      });\n      pdfDoc.annotationStorage.setValue(\"pdfjs_internal_editor_1\", {\n        annotationType: AnnotationEditorType.FREETEXT,\n        rect: [12, 34, 56, 78],\n        rotation: 0,\n        fontSize: 10,\n        color: [0, 0, 0],\n        value: \"Hello PDF.js World!\",\n        pageIndex: 0\n      });\n      const data = await pdfDoc.saveDocument();\n      await loadingTask.destroy();\n      loadingTask = getDocument(data);\n      pdfDoc = await loadingTask.promise;\n      const annotations = await pdfDoc.getAnnotArray(0);\n      expect(annotations).toEqual([\"4R\", \"10R\", \"17R\", \"20R\", \"21R\", \"22R\", \"25R\", \"28R\", \"29R\", \"30R\", \"33R\", \"36R\", \"37R\", \"42R\", \"43R\", \"44R\", \"47R\", \"50R\", \"51R\", \"54R\", \"55R\", \"58R\", \"59R\", \"62R\", \"63R\", \"66R\", \"69R\", \"72R\", \"75R\", \"78R\", \"140R\"]);\n      await loadingTask.destroy();\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"write a new annotation, save the pdf and check that the text content is correct","suites":["api","PDFDocument"],"line":1529,"updatePoint":{"line":1529,"column":87,"index":67630},"code":"    it(\"write a new annotation, save the pdf and check that the text content is correct\", async function () {\n      // This test helps to check that the text stream is correctly compressed\n      // when saving.\n      const manifesto = `\n      The Mozilla Manifesto Addendum\n      Pledge for a Healthy Internet\n      \n      The open, global internet is the most powerful communication and collaboration resource we have ever seen.\n      It embodies some of our deepest hopes for human progress.\n      It enables new opportunities for learning, building a sense of shared humanity, and solving the pressing problems\n      facing people everywhere.\n      \n      Over the last decade we have seen this promise fulfilled in many ways.\n      We have also seen the power of the internet used to magnify divisiveness,\n      incite violence, promote hatred, and intentionally manipulate fact and reality.\n      We have learned that we should more explicitly set out our aspirations for the human experience of the internet.\n      We do so now.\n      `.repeat(100);\n      let loadingTask = getDocument(buildGetDocumentParams(\"empty.pdf\"));\n      let pdfDoc = await loadingTask.promise;\n      pdfDoc.annotationStorage.setValue(\"pdfjs_internal_editor_0\", {\n        annotationType: AnnotationEditorType.FREETEXT,\n        rect: [10, 10, 500, 500],\n        rotation: 0,\n        fontSize: 1,\n        color: [0, 0, 0],\n        value: manifesto,\n        pageIndex: 0\n      });\n      const data = await pdfDoc.saveDocument();\n      await loadingTask.destroy();\n      loadingTask = getDocument(data);\n      pdfDoc = await loadingTask.promise;\n      const page = await pdfDoc.getPage(1);\n      const annotations = await page.getAnnotations();\n      expect(annotations[0].contentsObj.str).toEqual(manifesto);\n      await loadingTask.destroy();\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"server disallows cors","suites":["api","PDFDocument","Cross-origin"],"line":1607,"updatePoint":{"line":1607,"column":31,"index":70880},"code":"      it(\"server disallows cors\", async function () {\n        await testCannotLoad(\"basicapi.pdf\");\n      });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"server allows cors without credentials, default withCredentials","suites":["api","PDFDocument","Cross-origin"],"line":1610,"updatePoint":{"line":1610,"column":73,"index":71032},"code":"      it(\"server allows cors without credentials, default withCredentials\", async function () {\n        await testCanLoad(\"basicapi.pdf?cors=withoutCredentials\");\n      });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"server allows cors without credentials, and withCredentials=false","suites":["api","PDFDocument","Cross-origin"],"line":1613,"updatePoint":{"line":1613,"column":75,"index":71207},"code":"      it(\"server allows cors without credentials, and withCredentials=false\", async function () {\n        await testCanLoad(\"basicapi.pdf?cors=withoutCredentials\", {\n          withCredentials: false\n        });\n      });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"server allows cors without credentials, but withCredentials=true","suites":["api","PDFDocument","Cross-origin"],"line":1618,"updatePoint":{"line":1618,"column":74,"index":71427},"code":"      it(\"server allows cors without credentials, but withCredentials=true\", async function () {\n        await testCannotLoad(\"basicapi.pdf?cors=withoutCredentials\", {\n          withCredentials: true\n        });\n      });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"server allows cors with credentials, and withCredentials=true","suites":["api","PDFDocument","Cross-origin"],"line":1623,"updatePoint":{"line":1623,"column":71,"index":71646},"code":"      it(\"server allows cors with credentials, and withCredentials=true\", async function () {\n        await testCanLoad(\"basicapi.pdf?cors=withCredentials\", {\n          withCredentials: true\n        });\n      });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"server allows cors with credentials, and withCredentials=false","suites":["api","PDFDocument","Cross-origin"],"line":1628,"updatePoint":{"line":1628,"column":72,"index":71860},"code":"      it(\"server allows cors with credentials, and withCredentials=false\", async function () {\n        // The server supports even more than we need, so if the previous tests\n        // pass, then this should pass for sure.\n        // The only case where this test fails is when the server does not reply\n        // with the Access-Control-Allow-Origin header.\n        await testCanLoad(\"basicapi.pdf?cors=withCredentials\", {\n          withCredentials: false\n        });\n      });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"gets page number","suites":["api","Page"],"line":1649,"updatePoint":{"line":1649,"column":24,"index":72660},"code":"    it(\"gets page number\", function () {\n      expect(page.pageNumber).toEqual(1);\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"gets rotate","suites":["api","Page"],"line":1652,"updatePoint":{"line":1652,"column":19,"index":72746},"code":"    it(\"gets rotate\", function () {\n      expect(page.rotate).toEqual(0);\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"gets ref","suites":["api","Page"],"line":1655,"updatePoint":{"line":1655,"column":16,"index":72825},"code":"    it(\"gets ref\", function () {\n      expect(page.ref).toEqual({\n        num: 15,\n        gen: 0\n      });\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"gets userUnit","suites":["api","Page"],"line":1661,"updatePoint":{"line":1661,"column":21,"index":72946},"code":"    it(\"gets userUnit\", function () {\n      expect(page.userUnit).toEqual(1.0);\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"gets view","suites":["api","Page"],"line":1664,"updatePoint":{"line":1664,"column":17,"index":73030},"code":"    it(\"gets view\", function () {\n      expect(page.view).toEqual([0, 0, 595.28, 841.89]);\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"gets view, with empty/invalid bounding boxes","suites":["api","Page"],"line":1667,"updatePoint":{"line":1667,"column":52,"index":73164},"code":"    it(\"gets view, with empty/invalid bounding boxes\", async function () {\n      const viewLoadingTask = getDocument(buildGetDocumentParams(\"boundingBox_invalid.pdf\"));\n      const pdfDoc = await viewLoadingTask.promise;\n      const numPages = pdfDoc.numPages;\n      expect(numPages).toEqual(3);\n      const viewPromises = [];\n      for (let i = 0; i < numPages; i++) {\n        viewPromises[i] = pdfDoc.getPage(i + 1).then(pdfPage => {\n          return pdfPage.view;\n        });\n      }\n      const [page1, page2, page3] = await Promise.all(viewPromises);\n      expect(page1).toEqual([0, 0, 612, 792]);\n      expect(page2).toEqual([0, 0, 800, 600]);\n      expect(page3).toEqual([0, 0, 600, 800]);\n      await viewLoadingTask.destroy();\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"gets viewport","suites":["api","Page"],"line":1684,"updatePoint":{"line":1684,"column":21,"index":73877},"code":"    it(\"gets viewport\", function () {\n      const viewport = page.getViewport({\n        scale: 1.5,\n        rotation: 90\n      });\n      expect(viewport instanceof PageViewport).toEqual(true);\n      expect(viewport.viewBox).toEqual(page.view);\n      expect(viewport.scale).toEqual(1.5);\n      expect(viewport.rotation).toEqual(90);\n      expect(viewport.transform).toEqual([0, 1.5, 1.5, 0, 0, 0]);\n      expect(viewport.width).toEqual(1262.835);\n      expect(viewport.height).toEqual(892.92);\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"gets viewport with \"offsetX/offsetY\" arguments","suites":["api","Page"],"line":1697,"updatePoint":{"line":1697,"column":54,"index":74411},"code":"    it('gets viewport with \"offsetX/offsetY\" arguments', function () {\n      const viewport = page.getViewport({\n        scale: 1,\n        rotation: 0,\n        offsetX: 100,\n        offsetY: -100\n      });\n      expect(viewport instanceof PageViewport).toEqual(true);\n      expect(viewport.transform).toEqual([1, 0, 0, -1, 100, 741.89]);\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"gets viewport respecting \"dontFlip\" argument","suites":["api","Page"],"line":1707,"updatePoint":{"line":1707,"column":52,"index":74755},"code":"    it('gets viewport respecting \"dontFlip\" argument', function () {\n      const scale = 1,\n        rotation = 0;\n      const viewport = page.getViewport({\n        scale,\n        rotation\n      });\n      expect(viewport instanceof PageViewport).toEqual(true);\n      const dontFlipViewport = page.getViewport({\n        scale,\n        rotation,\n        dontFlip: true\n      });\n      expect(dontFlipViewport instanceof PageViewport).toEqual(true);\n      expect(dontFlipViewport).not.toEqual(viewport);\n      expect(dontFlipViewport).toEqual(viewport.clone({\n        dontFlip: true\n      }));\n      expect(viewport.transform).toEqual([1, 0, 0, -1, 0, 841.89]);\n      expect(dontFlipViewport.transform).toEqual([1, 0, -0, 1, 0, 0]);\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"gets viewport with invalid rotation","suites":["api","Page"],"line":1728,"updatePoint":{"line":1728,"column":43,"index":75483},"code":"    it(\"gets viewport with invalid rotation\", function () {\n      expect(function () {\n        page.getViewport({\n          scale: 1,\n          rotation: 45\n        });\n      }).toThrow(new Error(\"PageViewport: Invalid rotation, must be a multiple of 90 degrees.\"));\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"gets annotations","suites":["api","Page"],"line":1736,"updatePoint":{"line":1736,"column":24,"index":75739},"code":"    it(\"gets annotations\", async function () {\n      const defaultPromise = page.getAnnotations().then(function (data) {\n        expect(data.length).toEqual(4);\n      });\n      const anyPromise = page.getAnnotations({\n        intent: \"any\"\n      }).then(function (data) {\n        expect(data.length).toEqual(4);\n      });\n      const displayPromise = page.getAnnotations({\n        intent: \"display\"\n      }).then(function (data) {\n        expect(data.length).toEqual(4);\n      });\n      const printPromise = page.getAnnotations({\n        intent: \"print\"\n      }).then(function (data) {\n        expect(data.length).toEqual(4);\n      });\n      await Promise.all([defaultPromise, anyPromise, displayPromise, printPromise]);\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"gets annotations containing relative URLs (bug 766086)","suites":["api","Page"],"line":1757,"updatePoint":{"line":1757,"column":62,"index":76506},"code":"    it(\"gets annotations containing relative URLs (bug 766086)\", async function () {\n      const filename = \"bug766086.pdf\";\n      const defaultLoadingTask = getDocument(buildGetDocumentParams(filename));\n      const defaultPromise = defaultLoadingTask.promise.then(function (pdfDoc) {\n        return pdfDoc.getPage(1).then(function (pdfPage) {\n          return pdfPage.getAnnotations();\n        });\n      });\n      const docBaseUrlLoadingTask = getDocument(buildGetDocumentParams(filename, {\n        docBaseUrl: \"http://www.example.com/test/pdfs/qwerty.pdf\"\n      }));\n      const docBaseUrlPromise = docBaseUrlLoadingTask.promise.then(function (pdfDoc) {\n        return pdfDoc.getPage(1).then(function (pdfPage) {\n          return pdfPage.getAnnotations();\n        });\n      });\n      const invalidDocBaseUrlLoadingTask = getDocument(buildGetDocumentParams(filename, {\n        docBaseUrl: \"qwerty.pdf\"\n      }));\n      const invalidDocBaseUrlPromise = invalidDocBaseUrlLoadingTask.promise.then(function (pdfDoc) {\n        return pdfDoc.getPage(1).then(function (pdfPage) {\n          return pdfPage.getAnnotations();\n        });\n      });\n      const [defaultAnnotations, docBaseUrlAnnotations, invalidDocBaseUrlAnnotations] = await Promise.all([defaultPromise, docBaseUrlPromise, invalidDocBaseUrlPromise]);\n      expect(defaultAnnotations[0].url).toBeUndefined();\n      expect(defaultAnnotations[0].unsafeUrl).toEqual(\"../../0021/002156/215675E.pdf#15\");\n      expect(docBaseUrlAnnotations[0].url).toEqual(\"http://www.example.com/0021/002156/215675E.pdf#15\");\n      expect(docBaseUrlAnnotations[0].unsafeUrl).toEqual(\"../../0021/002156/215675E.pdf#15\");\n      expect(invalidDocBaseUrlAnnotations[0].url).toBeUndefined();\n      expect(invalidDocBaseUrlAnnotations[0].unsafeUrl).toEqual(\"../../0021/002156/215675E.pdf#15\");\n      await Promise.all([defaultLoadingTask.destroy(), docBaseUrlLoadingTask.destroy(), invalidDocBaseUrlLoadingTask.destroy()]);\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"gets annotations containing GoToE action (issue 8844)","suites":["api","Page"],"line":1790,"updatePoint":{"line":1790,"column":61,"index":78468},"code":"    it(\"gets annotations containing GoToE action (issue 8844)\", async function () {\n      const loadingTask = getDocument(buildGetDocumentParams(\"issue8844.pdf\"));\n      const pdfDoc = await loadingTask.promise;\n      const pdfPage = await pdfDoc.getPage(1);\n      const annotations = await pdfPage.getAnnotations();\n      expect(annotations.length).toEqual(1);\n      expect(annotations[0].annotationType).toEqual(AnnotationType.LINK);\n      const {\n        filename,\n        content\n      } = annotations[0].attachment;\n      expect(filename).toEqual(\"man.pdf\");\n      expect(content instanceof Uint8Array).toEqual(true);\n      expect(content.length).toEqual(4508);\n      await loadingTask.destroy();\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"gets text content","suites":["api","Page"],"line":1806,"updatePoint":{"line":1806,"column":25,"index":79142},"code":"    it(\"gets text content\", async function () {\n      const {\n        items,\n        styles\n      } = await page.getTextContent();\n      expect(items.length).toEqual(15);\n      expect(objectSize(styles)).toEqual(5);\n      const text = mergeText(items);\n      expect(text).toEqual(`Table Of Content\nChapter 1 .......................................................... 2\nParagraph 1.1 ...................................................... 3\npage 1 / 3`);\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"gets text content, with correct properties (issue 8276)","suites":["api","Page"],"line":1819,"updatePoint":{"line":1819,"column":63,"index":79642},"code":"    it(\"gets text content, with correct properties (issue 8276)\", async function () {\n      const loadingTask = getDocument(buildGetDocumentParams(\"issue8276_reduced.pdf\"));\n      const pdfDoc = await loadingTask.promise;\n      const pdfPage = await pdfDoc.getPage(1);\n      const {\n        items,\n        styles\n      } = await pdfPage.getTextContent({\n        disableNormalization: true\n      });\n      expect(items.length).toEqual(1);\n      // Font name will be a random object id.\n      const fontName = items[0].fontName;\n      expect(Object.keys(styles)).toEqual([fontName]);\n      expect(items[0]).toEqual({\n        dir: \"ltr\",\n        fontName,\n        height: 18,\n        str: \"Issue 8276\",\n        transform: [18, 0, 0, 18, 441.81, 708.4499999999999],\n        width: 77.49,\n        hasEOL: false\n      });\n      expect(styles[fontName]).toEqual({\n        fontFamily: \"serif\",\n        // `useSystemFonts` has a different value in web environments\n        // and in Node.js.\n        ascent: isNodeJS ? NaN : 0.683,\n        descent: isNodeJS ? NaN : -0.217,\n        vertical: false\n      });\n\n      // Wait for font data to be loaded so we can check that the font names\n      // match.\n      await pdfPage.getOperatorList();\n      expect(pdfPage.commonObjs.has(fontName)).toEqual(true);\n      await loadingTask.destroy();\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"gets text content, with no extra spaces (issue 13226)","suites":["api","Page"],"line":1857,"updatePoint":{"line":1857,"column":61,"index":80977},"code":"    it(\"gets text content, with no extra spaces (issue 13226)\", async function () {\n      const loadingTask = getDocument(buildGetDocumentParams(\"issue13226.pdf\"));\n      const pdfDoc = await loadingTask.promise;\n      const pdfPage = await pdfDoc.getPage(1);\n      const {\n        items\n      } = await pdfPage.getTextContent({\n        disableNormalization: true\n      });\n      const text = mergeText(items);\n      expect(text).toEqual(\"Mitarbeiterinnen und Mitarbeiter arbeiten in über 100 Ländern engagiert im Dienste\");\n      await loadingTask.destroy();\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"gets text content, with no extra spaces (issue 16119)","suites":["api","Page"],"line":1870,"updatePoint":{"line":1870,"column":61,"index":81545},"code":"    it(\"gets text content, with no extra spaces (issue 16119)\", async function () {\n      if (isNodeJS) {\n        pending(\"Linked test-cases are not supported in Node.js.\");\n      }\n      const loadingTask = getDocument(buildGetDocumentParams(\"issue16119.pdf\"));\n      const pdfDoc = await loadingTask.promise;\n      const pdfPage = await pdfDoc.getPage(1);\n      const {\n        items\n      } = await pdfPage.getTextContent({\n        disableNormalization: true\n      });\n      const text = mergeText(items);\n      expect(text.includes(\"Engang var der i Samvirke en opskrift på en fiskelagkage, som jeg med\")).toBe(true);\n      await loadingTask.destroy();\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"gets text content, with merged spaces (issue 13201)","suites":["api","Page"],"line":1886,"updatePoint":{"line":1886,"column":59,"index":82208},"code":"    it(\"gets text content, with merged spaces (issue 13201)\", async function () {\n      const loadingTask = getDocument(buildGetDocumentParams(\"issue13201.pdf\"));\n      const pdfDoc = await loadingTask.promise;\n      const pdfPage = await pdfDoc.getPage(1);\n      const {\n        items\n      } = await pdfPage.getTextContent({\n        disableNormalization: true\n      });\n      const text = mergeText(items);\n      expect(text.includes(\"Abstract. A purely peer-to-peer version of electronic cash would allow online\")).toEqual(true);\n      expect(text.includes(\"avoid mediating disputes. The cost of mediation increases transaction costs, limiting the\")).toEqual(true);\n      expect(text.includes(\"system is secure as long as honest nodes collectively control more CPU power than any\")).toEqual(true);\n      await loadingTask.destroy();\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"gets text content, with no spaces between letters of words (issue 11913)","suites":["api","Page"],"line":1901,"updatePoint":{"line":1901,"column":80,"index":83073},"code":"    it(\"gets text content, with no spaces between letters of words (issue 11913)\", async function () {\n      const loadingTask = getDocument(buildGetDocumentParams(\"issue11913.pdf\"));\n      const pdfDoc = await loadingTask.promise;\n      const pdfPage = await pdfDoc.getPage(1);\n      const {\n        items\n      } = await pdfPage.getTextContent({\n        disableNormalization: true\n      });\n      const text = mergeText(items);\n      expect(text.includes(\"1. The first of these cases arises from the tragic handicap which has blighted the life of the Plaintiff, and from the response of the\")).toEqual(true);\n      expect(text.includes(\"argued in this Court the appeal raises narrower, but important, issues which may be summarised as follows:-\")).toEqual(true);\n      await loadingTask.destroy();\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"gets text content, with merged spaces (issue 10900)","suites":["api","Page"],"line":1915,"updatePoint":{"line":1915,"column":59,"index":83860},"code":"    it(\"gets text content, with merged spaces (issue 10900)\", async function () {\n      const loadingTask = getDocument(buildGetDocumentParams(\"issue10900.pdf\"));\n      const pdfDoc = await loadingTask.promise;\n      const pdfPage = await pdfDoc.getPage(1);\n      const {\n        items\n      } = await pdfPage.getTextContent({\n        disableNormalization: true\n      });\n      const text = mergeText(items);\n      expect(text.includes(`3 3 3 3\n851.5 854.9 839.3 837.5\n633.6 727.8 789.9 796.2\n1,485.1 1,582.7 1,629.2 1,633.7\n114.2 121.7 125.3 130.7\n13.0x 13.0x 13.0x 12.5x`)).toEqual(true);\n      await loadingTask.destroy();\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"gets text content, with spaces (issue 10640)","suites":["api","Page"],"line":1933,"updatePoint":{"line":1933,"column":52,"index":84487},"code":"    it(\"gets text content, with spaces (issue 10640)\", async function () {\n      const loadingTask = getDocument(buildGetDocumentParams(\"issue10640.pdf\"));\n      const pdfDoc = await loadingTask.promise;\n      const pdfPage = await pdfDoc.getPage(1);\n      let {\n        items\n      } = await pdfPage.getTextContent({\n        disableNormalization: true\n      });\n      let text = mergeText(items);\n      let expected = `Open Sans is a humanist sans serif typeface designed by Steve Matteson.\nOpen Sans was designed with an upright stress, open forms and a neu-\ntral, yet friendly appearance. It was optimized for print, web, and mobile\ninterfaces, and has excellent legibility characteristics in its letterforms (see\nﬁgure \\x81 on the following page). This font is available from the Google Font\nDirectory [\\x81] as TrueType ﬁles licensed under the Apache License version \\x82.\\x80.\nThis package provides support for this font in LATEX. It includes Type \\x81\nversions of the fonts, converted for this package using FontForge from its\nsources, for full support with Dvips.`;\n      expect(text.includes(expected)).toEqual(true);\n      ({\n        items\n      } = await pdfPage.getTextContent({\n        disableNormalization: false\n      }));\n      text = mergeText(items);\n      expected = `Open Sans is a humanist sans serif typeface designed by Steve Matteson.\nOpen Sans was designed with an upright stress, open forms and a neu-\ntral, yet friendly appearance. It was optimized for print, web, and mobile\ninterfaces, and has excellent legibility characteristics in its letterforms (see\nfigure \\x81 on the following page). This font is available from the Google Font\nDirectory [\\x81] as TrueType files licensed under the Apache License version \\x82.\\x80.\nThis package provides support for this font in LATEX. It includes Type \\x81\nversions of the fonts, converted for this package using FontForge from its\nsources, for full support with Dvips.`;\n      expect(text.includes(expected)).toEqual(true);\n      await loadingTask.destroy();\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"gets text content, with negative spaces (bug 931481)","suites":["api","Page"],"line":1971,"updatePoint":{"line":1971,"column":60,"index":86534},"code":"    it(\"gets text content, with negative spaces (bug 931481)\", async function () {\n      if (isNodeJS) {\n        pending(\"Linked test-cases are not supported in Node.js.\");\n      }\n      const loadingTask = getDocument(buildGetDocumentParams(\"bug931481.pdf\"));\n      const pdfDoc = await loadingTask.promise;\n      const pdfPage = await pdfDoc.getPage(1);\n      const {\n        items\n      } = await pdfPage.getTextContent({\n        disableNormalization: true\n      });\n      const text = mergeText(items);\n      expect(text.includes(`Kathrin Nachbaur\nDie promovierte Juristin ist 1979 in Graz geboren und aufgewachsen. Nach\nerfolgreichem Studienabschluss mit Fokus auf Europarecht absolvierte sie ein\nPraktikum bei Magna International in Kanada in der Human Resources Abteilung.\nAnschliessend wurde sie geschult in Human Resources, Arbeitsrecht und\nKommunikation, währenddessen sie auch an ihrem Doktorat im Wirtschaftsrecht\narbeitete. Seither arbeitete sie bei Magna International als Projekt Manager in der\nInnovationsabteilung. Seit 2009 ist sie Frank Stronachs Büroleiterin in Österreich und\nKanada. Zusätzlich ist sie seit 2012 Vice President, Business Development der\nStronach Group und Vizepräsidentin und Institutsleiterin des Stronach Institut für\nsozialökonomische Gerechtigkeit.`)).toEqual(true);\n      await loadingTask.destroy();\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"gets text content, with invisible text marks (issue 9186)","suites":["api","Page"],"line":1997,"updatePoint":{"line":1997,"column":65,"index":87891},"code":"    it(\"gets text content, with invisible text marks (issue 9186)\", async function () {\n      if (isNodeJS) {\n        pending(\"Linked test-cases are not supported in Node.js.\");\n      }\n      const loadingTask = getDocument(buildGetDocumentParams(\"issue9186.pdf\"));\n      const pdfDoc = await loadingTask.promise;\n      const pdfPage = await pdfDoc.getPage(1);\n      const {\n        items\n      } = await pdfPage.getTextContent({\n        disableNormalization: true\n      });\n      const text = mergeText(items);\n      expect(text.includes(`This Agreement (“Agreement”) is made as of this 25th day of January, 2017, by and\nbetween EDWARD G. ATSINGER III, not individually but as sole Trustee of the ATSINGER\nFAMILY TRUST /u/a dated October 31, 1980 as amended, and STUART W. EPPERSON, not\nindividually but solely as Trustee of the STUART W. EPPERSON REVOCABLE LIVING\nTRUST /u/a dated January 14th 1993 as amended, collectively referred to herein as “Lessor”, and\nCaron Broadcasting, Inc., an Ohio corporation (“Lessee”).`)).toEqual(true);\n      await loadingTask.destroy();\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"gets text content, with beginbfrange operator handled correctly (bug 1627427)","suites":["api","Page"],"line":2018,"updatePoint":{"line":2018,"column":85,"index":88992},"code":"    it(\"gets text content, with beginbfrange operator handled correctly (bug 1627427)\", async function () {\n      const loadingTask = getDocument(buildGetDocumentParams(\"bug1627427_reduced.pdf\"));\n      const pdfDoc = await loadingTask.promise;\n      const pdfPage = await pdfDoc.getPage(1);\n      const {\n        items\n      } = await pdfPage.getTextContent({\n        disableNormalization: true\n      });\n      const text = mergeText(items);\n      expect(text).toEqual(\"침하게 흐린 품이 눈이 올 듯하더니 눈은 아니 오고 얼다가 만 비가 추\");\n      await loadingTask.destroy();\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"gets text content, and check that out-of-page text is not present (bug 1755201)","suites":["api","Page"],"line":2031,"updatePoint":{"line":2031,"column":87,"index":89551},"code":"    it(\"gets text content, and check that out-of-page text is not present (bug 1755201)\", async function () {\n      if (isNodeJS) {\n        pending(\"Linked test-cases are not supported in Node.js.\");\n      }\n      const loadingTask = getDocument(buildGetDocumentParams(\"bug1755201.pdf\"));\n      const pdfDoc = await loadingTask.promise;\n      const pdfPage = await pdfDoc.getPage(6);\n      const {\n        items\n      } = await pdfPage.getTextContent({\n        disableNormalization: true\n      });\n      const text = mergeText(items);\n      expect(/win aisle/.test(text)).toEqual(false);\n      await loadingTask.destroy();\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"gets text content with or without includeMarkedContent, and compare (issue 15094)","suites":["api","Page"],"line":2047,"updatePoint":{"line":2047,"column":89,"index":90184},"code":"    it(\"gets text content with or without includeMarkedContent, and compare (issue 15094)\", async function () {\n      if (isNodeJS) {\n        pending(\"Linked test-cases are not supported in Node.js.\");\n      }\n      const loadingTask = getDocument(buildGetDocumentParams(\"pdf.pdf\"));\n      const pdfDoc = await loadingTask.promise;\n      const pdfPage = await pdfDoc.getPage(568);\n      let {\n        items\n      } = await pdfPage.getTextContent({\n        includeMarkedContent: false,\n        disableNormalization: true\n      });\n      const textWithoutMC = mergeText(items);\n      ({\n        items\n      } = await pdfPage.getTextContent({\n        includeMarkedContent: true,\n        disableNormalization: true\n      }));\n      const textWithMC = mergeText(items);\n      expect(textWithoutMC).toEqual(textWithMC);\n      await loadingTask.destroy();\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"gets text content with multi-byte entries, using predefined CMaps (issue 16176)","suites":["api","Page"],"line":2071,"updatePoint":{"line":2071,"column":87,"index":91039},"code":"    it(\"gets text content with multi-byte entries, using predefined CMaps (issue 16176)\", async function () {\n      const loadingTask = getDocument(buildGetDocumentParams(\"issue16176.pdf\", {\n        cMapUrl: CMAP_URL,\n        useWorkerFetch: false\n      }));\n      const pdfDoc = await loadingTask.promise;\n      const pdfPage = await pdfDoc.getPage(1);\n      const {\n        items\n      } = await pdfPage.getTextContent({\n        disableNormalization: true\n      });\n      const text = mergeText(items);\n      expect(text).toEqual(\"𠮷\");\n      await loadingTask.destroy();\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"gets text content with a rised text","suites":["api","Page"],"line":2087,"updatePoint":{"line":2087,"column":43,"index":91577},"code":"    it(\"gets text content with a rised text\", async function () {\n      const loadingTask = getDocument(buildGetDocumentParams(\"issue16221.pdf\"));\n      const pdfDoc = await loadingTask.promise;\n      const pdfPage = await pdfDoc.getPage(1);\n      const {\n        items\n      } = await pdfPage.getTextContent({\n        disableNormalization: true\n      });\n      expect(items.map(i => i.str)).toEqual([\"Hello \", \"World\"]);\n      await loadingTask.destroy();\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"gets text content with a specific view box","suites":["api","Page"],"line":2099,"updatePoint":{"line":2099,"column":50,"index":92049},"code":"    it(\"gets text content with a specific view box\", async function () {\n      const loadingTask = getDocument(buildGetDocumentParams(\"issue16316.pdf\"));\n      const pdfDoc = await loadingTask.promise;\n      const pdfPage = await pdfDoc.getPage(1);\n      const {\n        items\n      } = await pdfPage.getTextContent({\n        disableNormalization: true\n      });\n      const text = mergeText(items);\n      expect(text).toEqual(\"Experimentation,\");\n      await loadingTask.destroy();\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"check that a chunk is pushed when font is restored","suites":["api","Page"],"line":2112,"updatePoint":{"line":2112,"column":58,"index":92548},"code":"    it(\"check that a chunk is pushed when font is restored\", async function () {\n      const loadingTask = getDocument(buildGetDocumentParams(\"issue14755.pdf\"));\n      const pdfDoc = await loadingTask.promise;\n      const pdfPage = await pdfDoc.getPage(1);\n      const {\n        items\n      } = await pdfPage.getTextContent({\n        disableNormalization: true\n      });\n      expect(items).toEqual([jasmine.objectContaining({\n        str: \"ABC\",\n        dir: \"ltr\",\n        width: 20.56,\n        height: 10,\n        transform: [10, 0, 0, 10, 100, 100],\n        hasEOL: false\n      }), jasmine.objectContaining({\n        str: \"DEF\",\n        dir: \"ltr\",\n        width: 20,\n        height: 10,\n        transform: [10, 0, 0, 10, 120, 100],\n        hasEOL: false\n      }), jasmine.objectContaining({\n        str: \"GHI\",\n        dir: \"ltr\",\n        width: 17.78,\n        height: 10,\n        transform: [10, 0, 0, 10, 140, 100],\n        hasEOL: false\n      })]);\n      expect(items[0].fontName).toEqual(items[2].fontName);\n      expect(items[1].fontName).not.toEqual(items[0].fontName);\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"gets empty structure tree","suites":["api","Page"],"line":2146,"updatePoint":{"line":2146,"column":33,"index":93612},"code":"    it(\"gets empty structure tree\", async function () {\n      const tree = await page.getStructTree();\n      expect(tree).toEqual(null);\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"gets simple structure tree","suites":["api","Page"],"line":2150,"updatePoint":{"line":2150,"column":34,"index":93758},"code":"    it(\"gets simple structure tree\", async function () {\n      const loadingTask = getDocument(buildGetDocumentParams(\"structure_simple.pdf\"));\n      const pdfDoc = await loadingTask.promise;\n      const pdfPage = await pdfDoc.getPage(1);\n      const tree = await pdfPage.getStructTree();\n      expect(tree).toEqual({\n        role: \"Root\",\n        children: [{\n          role: \"Document\",\n          lang: \"en-US\",\n          children: [{\n            role: \"H1\",\n            children: [{\n              role: \"NonStruct\",\n              children: [{\n                type: \"content\",\n                id: \"p2R_mc0\"\n              }]\n            }]\n          }, {\n            role: \"P\",\n            children: [{\n              role: \"NonStruct\",\n              children: [{\n                type: \"content\",\n                id: \"p2R_mc1\"\n              }]\n            }]\n          }, {\n            role: \"H2\",\n            children: [{\n              role: \"NonStruct\",\n              children: [{\n                type: \"content\",\n                id: \"p2R_mc2\"\n              }]\n            }]\n          }, {\n            role: \"P\",\n            children: [{\n              role: \"NonStruct\",\n              children: [{\n                type: \"content\",\n                id: \"p2R_mc3\"\n              }]\n            }]\n          }]\n        }]\n      });\n      await loadingTask.destroy();\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"gets operator list","suites":["api","Page"],"line":2201,"updatePoint":{"line":2201,"column":26,"index":95123},"code":"    it(\"gets operator list\", async function () {\n      const operatorList = await page.getOperatorList();\n      expect(operatorList.fnArray.length).toBeGreaterThan(100);\n      expect(operatorList.argsArray.length).toBeGreaterThan(100);\n      expect(operatorList.lastChunk).toEqual(true);\n      expect(operatorList.separateAnnots).toEqual({\n        form: false,\n        canvas: false\n      });\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"gets operatorList with JPEG image (issue 4888)","suites":["api","Page"],"line":2211,"updatePoint":{"line":2211,"column":54,"index":95552},"code":"    it(\"gets operatorList with JPEG image (issue 4888)\", async function () {\n      const loadingTask = getDocument(buildGetDocumentParams(\"cmykjpeg.pdf\", {\n        isOffscreenCanvasSupported: false\n      }));\n      const pdfDoc = await loadingTask.promise;\n      const pdfPage = await pdfDoc.getPage(1);\n      const operatorList = await pdfPage.getOperatorList();\n      const imgIndex = operatorList.fnArray.indexOf(OPS.paintImageXObject);\n      const imgArgs = operatorList.argsArray[imgIndex];\n      const {\n        data\n      } = pdfPage.objs.get(imgArgs[0]);\n      expect(data instanceof Uint8ClampedArray).toEqual(true);\n      expect(data.length).toEqual(90000);\n      await loadingTask.destroy();\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"gets operator list, containing Annotation-operatorLists","suites":["api","Page"],"line":2259,"updatePoint":{"line":2259,"column":63,"index":97667},"code":"    it(\"gets operator list, containing Annotation-operatorLists\", async function () {\n      const loadingTask = getDocument(buildGetDocumentParams(\"annotation-line.pdf\"));\n      const pdfDoc = await loadingTask.promise;\n      const pdfPage = await pdfDoc.getPage(1);\n      const operatorList = await pdfPage.getOperatorList();\n      expect(operatorList.fnArray.length).toBeGreaterThan(20);\n      expect(operatorList.argsArray.length).toBeGreaterThan(20);\n      expect(operatorList.lastChunk).toEqual(true);\n      expect(operatorList.separateAnnots).toEqual({\n        form: false,\n        canvas: false\n      });\n\n      // The `getOperatorList` method, similar to the `render` method,\n      // is supposed to include any existing Annotation-operatorLists.\n      expect(operatorList.fnArray.includes(OPS.beginAnnotation)).toEqual(true);\n      expect(operatorList.fnArray.includes(OPS.endAnnotation)).toEqual(true);\n      await loadingTask.destroy();\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"gets operator list, with `annotationMode`-option","suites":["api","Page"],"line":2278,"updatePoint":{"line":2278,"column":56,"index":98616},"code":"    it(\"gets operator list, with `annotationMode`-option\", async function () {\n      const loadingTask = getDocument(buildGetDocumentParams(\"evaljs.pdf\"));\n      const pdfDoc = await loadingTask.promise;\n      const pdfPage = await pdfDoc.getPage(2);\n      pdfDoc.annotationStorage.setValue(\"30R\", {\n        value: \"test\"\n      });\n      pdfDoc.annotationStorage.setValue(\"31R\", {\n        value: true\n      });\n      const opListAnnotDisable = await pdfPage.getOperatorList({\n        annotationMode: AnnotationMode.DISABLE\n      });\n      expect(opListAnnotDisable.fnArray.length).toEqual(0);\n      expect(opListAnnotDisable.argsArray.length).toEqual(0);\n      expect(opListAnnotDisable.lastChunk).toEqual(true);\n      expect(opListAnnotDisable.separateAnnots).toEqual(null);\n      const opListAnnotEnable = await pdfPage.getOperatorList({\n        annotationMode: AnnotationMode.ENABLE\n      });\n      expect(opListAnnotEnable.fnArray.length).toBeGreaterThan(140);\n      expect(opListAnnotEnable.argsArray.length).toBeGreaterThan(140);\n      expect(opListAnnotEnable.lastChunk).toEqual(true);\n      expect(opListAnnotEnable.separateAnnots).toEqual({\n        form: false,\n        canvas: true\n      });\n      let firstAnnotIndex = opListAnnotEnable.fnArray.indexOf(OPS.beginAnnotation);\n      let isUsingOwnCanvas = opListAnnotEnable.argsArray[firstAnnotIndex][4];\n      expect(isUsingOwnCanvas).toEqual(false);\n      const opListAnnotEnableForms = await pdfPage.getOperatorList({\n        annotationMode: AnnotationMode.ENABLE_FORMS\n      });\n      expect(opListAnnotEnableForms.fnArray.length).toBeGreaterThan(30);\n      expect(opListAnnotEnableForms.argsArray.length).toBeGreaterThan(30);\n      expect(opListAnnotEnableForms.lastChunk).toEqual(true);\n      expect(opListAnnotEnableForms.separateAnnots).toEqual({\n        form: true,\n        canvas: true\n      });\n      firstAnnotIndex = opListAnnotEnableForms.fnArray.indexOf(OPS.beginAnnotation);\n      isUsingOwnCanvas = opListAnnotEnableForms.argsArray[firstAnnotIndex][4];\n      expect(isUsingOwnCanvas).toEqual(true);\n      const opListAnnotEnableStorage = await pdfPage.getOperatorList({\n        annotationMode: AnnotationMode.ENABLE_STORAGE\n      });\n      expect(opListAnnotEnableStorage.fnArray.length).toBeGreaterThan(170);\n      expect(opListAnnotEnableStorage.argsArray.length).toBeGreaterThan(170);\n      expect(opListAnnotEnableStorage.lastChunk).toEqual(true);\n      expect(opListAnnotEnableStorage.separateAnnots).toEqual({\n        form: false,\n        canvas: true\n      });\n      firstAnnotIndex = opListAnnotEnableStorage.fnArray.indexOf(OPS.beginAnnotation);\n      isUsingOwnCanvas = opListAnnotEnableStorage.argsArray[firstAnnotIndex][4];\n      expect(isUsingOwnCanvas).toEqual(false);\n\n      // Sanity check to ensure that the `annotationMode` is correctly applied.\n      expect(opListAnnotDisable.fnArray.length).toBeLessThan(opListAnnotEnableForms.fnArray.length);\n      expect(opListAnnotEnableForms.fnArray.length).toBeLessThan(opListAnnotEnable.fnArray.length);\n      expect(opListAnnotEnable.fnArray.length).toBeLessThan(opListAnnotEnableStorage.fnArray.length);\n      await loadingTask.destroy();\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"gets operatorList, with page resources containing corrupt /CCITTFaxDecode data","suites":["api","Page"],"line":2341,"updatePoint":{"line":2341,"column":86,"index":101832},"code":"    it(\"gets operatorList, with page resources containing corrupt /CCITTFaxDecode data\", async function () {\n      const loadingTask = getDocument(buildGetDocumentParams(\"poppler-90-0-fuzzed.pdf\"));\n      expect(loadingTask instanceof PDFDocumentLoadingTask).toEqual(true);\n      const pdfDoc = await loadingTask.promise;\n      expect(pdfDoc.numPages).toEqual(16);\n      const pdfPage = await pdfDoc.getPage(6);\n      expect(pdfPage instanceof PDFPageProxy).toEqual(true);\n      const opList = await pdfPage.getOperatorList();\n      expect(opList.fnArray.length).toBeGreaterThan(25);\n      expect(opList.argsArray.length).toBeGreaterThan(25);\n      expect(opList.lastChunk).toEqual(true);\n      await loadingTask.destroy();\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"gets page stats after parsing page, without `pdfBug` set","suites":["api","Page"],"line":2354,"updatePoint":{"line":2354,"column":64,"index":102542},"code":"    it(\"gets page stats after parsing page, without `pdfBug` set\", async function () {\n      await page.getOperatorList();\n      expect(page.stats).toEqual(null);\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"gets page stats after parsing page, with `pdfBug` set","suites":["api","Page"],"line":2358,"updatePoint":{"line":2358,"column":61,"index":102710},"code":"    it(\"gets page stats after parsing page, with `pdfBug` set\", async function () {\n      const loadingTask = getDocument(buildGetDocumentParams(basicApiFileName, {\n        pdfBug: true\n      }));\n      const pdfDoc = await loadingTask.promise;\n      const pdfPage = await pdfDoc.getPage(1);\n      await pdfPage.getOperatorList();\n      const stats = pdfPage.stats;\n      expect(stats instanceof StatTimer).toEqual(true);\n      expect(stats.times.length).toEqual(1);\n      const [statEntry] = stats.times;\n      expect(statEntry.name).toEqual(\"Page Request\");\n      expect(statEntry.end - statEntry.start).toBeGreaterThanOrEqual(0);\n      await loadingTask.destroy();\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"gets page stats after rendering page, with `pdfBug` set","suites":["api","Page"],"line":2373,"updatePoint":{"line":2373,"column":63,"index":103388},"code":"    it(\"gets page stats after rendering page, with `pdfBug` set\", async function () {\n      const loadingTask = getDocument(buildGetDocumentParams(basicApiFileName, {\n        pdfBug: true\n      }));\n      const pdfDoc = await loadingTask.promise;\n      const pdfPage = await pdfDoc.getPage(1);\n      const viewport = pdfPage.getViewport({\n        scale: 1\n      });\n      expect(viewport instanceof PageViewport).toEqual(true);\n      const canvasAndCtx = CanvasFactory.create(viewport.width, viewport.height);\n      const renderTask = pdfPage.render({\n        canvasContext: canvasAndCtx.context,\n        viewport\n      });\n      expect(renderTask instanceof RenderTask).toEqual(true);\n      await renderTask.promise;\n      expect(renderTask.separateAnnots).toEqual(false);\n      const {\n        stats\n      } = pdfPage;\n      expect(stats instanceof StatTimer).toEqual(true);\n      expect(stats.times.length).toEqual(3);\n      const [statEntryOne, statEntryTwo, statEntryThree] = stats.times;\n      expect(statEntryOne.name).toEqual(\"Page Request\");\n      expect(statEntryOne.end - statEntryOne.start).toBeGreaterThanOrEqual(0);\n      expect(statEntryTwo.name).toEqual(\"Rendering\");\n      expect(statEntryTwo.end - statEntryTwo.start).toBeGreaterThan(0);\n      expect(statEntryThree.name).toEqual(\"Overall\");\n      expect(statEntryThree.end - statEntryThree.start).toBeGreaterThan(0);\n      CanvasFactory.destroy(canvasAndCtx);\n      await loadingTask.destroy();\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"cancels rendering of page","suites":["api","Page"],"line":2406,"updatePoint":{"line":2406,"column":33,"index":104830},"code":"    it(\"cancels rendering of page\", async function () {\n      const viewport = page.getViewport({\n        scale: 1\n      });\n      expect(viewport instanceof PageViewport).toEqual(true);\n      const canvasAndCtx = CanvasFactory.create(viewport.width, viewport.height);\n      const renderTask = page.render({\n        canvasContext: canvasAndCtx.context,\n        viewport\n      });\n      expect(renderTask instanceof RenderTask).toEqual(true);\n      renderTask.cancel();\n      try {\n        await renderTask.promise;\n\n        // Shouldn't get here.\n        expect(false).toEqual(true);\n      } catch (reason) {\n        expect(reason instanceof RenderingCancelledException).toEqual(true);\n        expect(reason.message).toEqual(\"Rendering cancelled, page 1\");\n        expect(reason.extraDelay).toEqual(0);\n      }\n      CanvasFactory.destroy(canvasAndCtx);\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"re-render page, using the same canvas, after cancelling rendering","suites":["api","Page"],"line":2430,"updatePoint":{"line":2430,"column":73,"index":105732},"code":"    it(\"re-render page, using the same canvas, after cancelling rendering\", async function () {\n      const viewport = page.getViewport({\n        scale: 1\n      });\n      expect(viewport instanceof PageViewport).toEqual(true);\n      const canvasAndCtx = CanvasFactory.create(viewport.width, viewport.height);\n      const renderTask = page.render({\n        canvasContext: canvasAndCtx.context,\n        viewport\n      });\n      expect(renderTask instanceof RenderTask).toEqual(true);\n      renderTask.cancel();\n      try {\n        await renderTask.promise;\n\n        // Shouldn't get here.\n        expect(false).toEqual(true);\n      } catch (reason) {\n        expect(reason instanceof RenderingCancelledException).toEqual(true);\n      }\n      const reRenderTask = page.render({\n        canvasContext: canvasAndCtx.context,\n        viewport\n      });\n      expect(reRenderTask instanceof RenderTask).toEqual(true);\n      await reRenderTask.promise;\n      expect(reRenderTask.separateAnnots).toEqual(false);\n      CanvasFactory.destroy(canvasAndCtx);\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"multiple render() on the same canvas","suites":["api","Page"],"line":2459,"updatePoint":{"line":2459,"column":44,"index":106757},"code":"    it(\"multiple render() on the same canvas\", async function () {\n      const optionalContentConfigPromise = pdfDocument.getOptionalContentConfig();\n      const viewport = page.getViewport({\n        scale: 1\n      });\n      expect(viewport instanceof PageViewport).toEqual(true);\n      const canvasAndCtx = CanvasFactory.create(viewport.width, viewport.height);\n      const renderTask1 = page.render({\n        canvasContext: canvasAndCtx.context,\n        viewport,\n        optionalContentConfigPromise\n      });\n      expect(renderTask1 instanceof RenderTask).toEqual(true);\n      const renderTask2 = page.render({\n        canvasContext: canvasAndCtx.context,\n        viewport,\n        optionalContentConfigPromise\n      });\n      expect(renderTask2 instanceof RenderTask).toEqual(true);\n      await Promise.all([renderTask1.promise, renderTask2.promise.then(() => {\n        // Shouldn't get here.\n        expect(false).toEqual(true);\n      }, reason => {\n        // It fails because we are already using this canvas.\n        expect(/multiple render\\(\\)/.test(reason.message)).toEqual(true);\n      })]);\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"cleans up document resources after rendering of page","suites":["api","Page"],"line":2486,"updatePoint":{"line":2486,"column":60,"index":107886},"code":"    it(\"cleans up document resources after rendering of page\", async function () {\n      const loadingTask = getDocument(buildGetDocumentParams(basicApiFileName));\n      const pdfDoc = await loadingTask.promise;\n      const pdfPage = await pdfDoc.getPage(1);\n      const viewport = pdfPage.getViewport({\n        scale: 1\n      });\n      expect(viewport instanceof PageViewport).toEqual(true);\n      const canvasAndCtx = CanvasFactory.create(viewport.width, viewport.height);\n      const renderTask = pdfPage.render({\n        canvasContext: canvasAndCtx.context,\n        viewport\n      });\n      expect(renderTask instanceof RenderTask).toEqual(true);\n      await renderTask.promise;\n      expect(renderTask.separateAnnots).toEqual(false);\n      await pdfDoc.cleanup();\n      expect(true).toEqual(true);\n      CanvasFactory.destroy(canvasAndCtx);\n      await loadingTask.destroy();\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"cleans up document resources during rendering of page","suites":["api","Page"],"line":2507,"updatePoint":{"line":2507,"column":61,"index":108776},"code":"    it(\"cleans up document resources during rendering of page\", async function () {\n      const loadingTask = getDocument(buildGetDocumentParams(\"tracemonkey.pdf\"));\n      const pdfDoc = await loadingTask.promise;\n      const pdfPage = await pdfDoc.getPage(1);\n      const viewport = pdfPage.getViewport({\n        scale: 1\n      });\n      expect(viewport instanceof PageViewport).toEqual(true);\n      const canvasAndCtx = CanvasFactory.create(viewport.width, viewport.height);\n      const renderTask = pdfPage.render({\n        canvasContext: canvasAndCtx.context,\n        viewport,\n        background: \"#FF0000\" // See comment below.\n      });\n\n      expect(renderTask instanceof RenderTask).toEqual(true);\n\n      // Ensure that clean-up runs during rendering.\n      renderTask.onContinue = function (cont) {\n        waitSome(cont);\n      };\n      try {\n        await pdfDoc.cleanup();\n\n        // Shouldn't get here.\n        expect(false).toEqual(true);\n      } catch (reason) {\n        expect(reason instanceof Error).toEqual(true);\n        expect(reason.message).toEqual(\"startCleanup: Page 1 is currently rendering.\");\n      }\n      await renderTask.promise;\n      expect(renderTask.separateAnnots).toEqual(false);\n\n      // Use the red background-color to, more easily, tell that the page was\n      // actually rendered successfully.\n      const {\n        data\n      } = canvasAndCtx.context.getImageData(0, 0, 1, 1);\n      expect(data).toEqual(new Uint8ClampedArray([255, 0, 0, 255]));\n      CanvasFactory.destroy(canvasAndCtx);\n      await loadingTask.destroy();\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"caches image resources at the document/page level as expected (issue 11878)","suites":["api","Page"],"line":2549,"updatePoint":{"line":2549,"column":83,"index":110376},"code":"    it(\"caches image resources at the document/page level as expected (issue 11878)\", async function () {\n      const {\n          NUM_PAGES_THRESHOLD\n        } = GlobalImageCache,\n        EXPECTED_WIDTH = 2550,\n        EXPECTED_HEIGHT = 3300;\n      const loadingTask = getDocument(buildGetDocumentParams(\"issue11878.pdf\", {\n        isOffscreenCanvasSupported: false\n      }));\n      const pdfDoc = await loadingTask.promise;\n      let firstImgData = null;\n      for (let i = 1; i <= pdfDoc.numPages; i++) {\n        const pdfPage = await pdfDoc.getPage(i);\n        const opList = await pdfPage.getOperatorList();\n        const {\n          commonObjs,\n          objs\n        } = pdfPage;\n        const imgIndex = opList.fnArray.indexOf(OPS.paintImageXObject);\n        const [objId, width, height] = opList.argsArray[imgIndex];\n        if (i < NUM_PAGES_THRESHOLD) {\n          expect(objId).toEqual(`img_p${i - 1}_1`);\n          expect(objs.has(objId)).toEqual(true);\n          expect(commonObjs.has(objId)).toEqual(false);\n        } else {\n          expect(objId).toEqual(`g_${loadingTask.docId}_img_p${NUM_PAGES_THRESHOLD - 1}_1`);\n          expect(objs.has(objId)).toEqual(false);\n          expect(commonObjs.has(objId)).toEqual(true);\n        }\n        expect(width).toEqual(EXPECTED_WIDTH);\n        expect(height).toEqual(EXPECTED_HEIGHT);\n\n        // Ensure that the actual image data is identical for all pages.\n        if (i === 1) {\n          firstImgData = objs.get(objId);\n          expect(firstImgData.width).toEqual(EXPECTED_WIDTH);\n          expect(firstImgData.height).toEqual(EXPECTED_HEIGHT);\n          expect(firstImgData.kind).toEqual(ImageKind.RGB_24BPP);\n          expect(firstImgData.data instanceof Uint8ClampedArray).toEqual(true);\n          expect(firstImgData.data.length).toEqual(25245000);\n        } else {\n          const objsPool = i >= NUM_PAGES_THRESHOLD ? commonObjs : objs;\n          const currentImgData = objsPool.get(objId);\n          expect(currentImgData.width).toEqual(firstImgData.width);\n          expect(currentImgData.height).toEqual(firstImgData.height);\n          expect(currentImgData.kind).toEqual(firstImgData.kind);\n          expect(currentImgData.data instanceof Uint8ClampedArray).toEqual(true);\n          expect(currentImgData.data.every((value, index) => {\n            return value === firstImgData.data[index];\n          })).toEqual(true);\n        }\n      }\n      await loadingTask.destroy();\n      firstImgData = null;\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"render for printing, with `printAnnotationStorage` set","suites":["api","Page"],"line":2604,"updatePoint":{"line":2604,"column":62,"index":112835},"code":"    it(\"render for printing, with `printAnnotationStorage` set\", async function () {\n      async function getPrintData(printAnnotationStorage = null) {\n        const canvasAndCtx = CanvasFactory.create(viewport.width, viewport.height);\n        const renderTask = pdfPage.render({\n          canvasContext: canvasAndCtx.context,\n          viewport,\n          intent: \"print\",\n          annotationMode: AnnotationMode.ENABLE_STORAGE,\n          printAnnotationStorage\n        });\n        await renderTask.promise;\n        expect(renderTask.separateAnnots).toEqual(false);\n        const printData = canvasAndCtx.canvas.toDataURL();\n        CanvasFactory.destroy(canvasAndCtx);\n        return printData;\n      }\n      const loadingTask = getDocument(buildGetDocumentParams(\"annotation-tx.pdf\"));\n      const pdfDoc = await loadingTask.promise;\n      const pdfPage = await pdfDoc.getPage(1);\n      const viewport = pdfPage.getViewport({\n        scale: 1\n      });\n\n      // Update the contents of the form-field.\n      const {\n        annotationStorage\n      } = pdfDoc;\n      annotationStorage.setValue(\"22R\", {\n        value: \"Hello World\"\n      });\n\n      // Render for printing, with default parameters.\n      const printOriginalData = await getPrintData();\n\n      // Get the *frozen* print-storage for use during printing.\n      const printAnnotationStorage = annotationStorage.print;\n      // Update the contents of the form-field again.\n      annotationStorage.setValue(\"22R\", {\n        value: \"Printing again...\"\n      });\n      const annotationHash = AnnotationStorage.getHash(annotationStorage.serializable);\n      const printAnnotationHash = AnnotationStorage.getHash(printAnnotationStorage.serializable);\n      // Sanity check to ensure that the print-storage didn't change,\n      // after the form-field was updated.\n      expect(printAnnotationHash).not.toEqual(annotationHash);\n\n      // Render for printing again, after updating the form-field,\n      // with default parameters.\n      const printAgainData = await getPrintData();\n\n      // Render for printing again, after updating the form-field,\n      // with `printAnnotationStorage` set.\n      const printStorageData = await getPrintData(printAnnotationStorage);\n\n      // Ensure that printing again, with default parameters,\n      // actually uses the \"new\" form-field data.\n      expect(printAgainData).not.toEqual(printOriginalData);\n      // Finally ensure that printing, with `printAnnotationStorage` set,\n      // still uses the \"previous\" form-field data.\n      expect(printStorageData).toEqual(printOriginalData);\n      await loadingTask.destroy();\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"should correctly render PDFs in parallel","suites":["api","Multiple `getDocument` instances"],"line":2708,"updatePoint":{"line":2708,"column":48,"index":117186},"code":"    it(\"should correctly render PDFs in parallel\", async function () {\n      let baseline1, baseline2, baseline3;\n      const promiseDone = renderPDF(pdf1).then(function (data1) {\n        baseline1 = data1;\n        return renderPDF(pdf2);\n      }).then(function (data2) {\n        baseline2 = data2;\n        return renderPDF(pdf3);\n      }).then(function (data3) {\n        baseline3 = data3;\n        return Promise.all([renderPDF(pdf1), renderPDF(pdf2), renderPDF(pdf3)]);\n      }).then(function (dataUrls) {\n        expect(dataUrls[0]).toEqual(baseline1);\n        expect(dataUrls[1]).toEqual(baseline2);\n        expect(dataUrls[2]).toEqual(baseline3);\n        return true;\n      });\n      await promiseDone;\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"should fetch document info and page using ranges","suites":["api","PDFDataRangeTransport"],"line":2739,"updatePoint":{"line":2739,"column":56,"index":118229},"code":"    it(\"should fetch document info and page using ranges\", async function () {\n      const initialDataLength = 4000;\n      const subArrays = [];\n      let fetches = 0;\n      const data = await dataPromise;\n      const initialData = new Uint8Array(data.subarray(0, initialDataLength));\n      subArrays.push(initialData);\n      const transport = new PDFDataRangeTransport(data.length, initialData);\n      transport.requestDataRange = function (begin, end) {\n        fetches++;\n        waitSome(function () {\n          const chunk = new Uint8Array(data.subarray(begin, end));\n          subArrays.push(chunk);\n          transport.onDataProgress(initialDataLength);\n          transport.onDataRange(begin, chunk);\n        });\n      };\n      const loadingTask = getDocument({\n        range: transport\n      });\n      const pdfDocument = await loadingTask.promise;\n      expect(pdfDocument.numPages).toEqual(14);\n      const pdfPage = await pdfDocument.getPage(10);\n      expect(pdfPage.rotate).toEqual(0);\n      expect(fetches).toBeGreaterThan(2);\n\n      // Check that the TypedArrays were transferred.\n      for (const array of subArrays) {\n        expect(array.length).toEqual(0);\n      }\n      await loadingTask.destroy();\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"should fetch document info and page using range and streaming","suites":["api","PDFDataRangeTransport"],"line":2771,"updatePoint":{"line":2771,"column":69,"index":119469},"code":"    it(\"should fetch document info and page using range and streaming\", async function () {\n      const initialDataLength = 4000;\n      const subArrays = [];\n      let fetches = 0;\n      const data = await dataPromise;\n      const initialData = new Uint8Array(data.subarray(0, initialDataLength));\n      subArrays.push(initialData);\n      const transport = new PDFDataRangeTransport(data.length, initialData);\n      transport.requestDataRange = function (begin, end) {\n        fetches++;\n        if (fetches === 1) {\n          const chunk = new Uint8Array(data.subarray(initialDataLength));\n          subArrays.push(chunk);\n\n          // Send rest of the data on first range request.\n          transport.onDataProgressiveRead(chunk);\n        }\n        waitSome(function () {\n          const chunk = new Uint8Array(data.subarray(begin, end));\n          subArrays.push(chunk);\n          transport.onDataRange(begin, chunk);\n        });\n      };\n      const loadingTask = getDocument({\n        range: transport\n      });\n      const pdfDocument = await loadingTask.promise;\n      expect(pdfDocument.numPages).toEqual(14);\n      const pdfPage = await pdfDocument.getPage(10);\n      expect(pdfPage.rotate).toEqual(0);\n      expect(fetches).toEqual(1);\n      await new Promise(resolve => {\n        waitSome(resolve);\n      });\n\n      // Check that the TypedArrays were transferred.\n      for (const array of subArrays) {\n        expect(array.length).toEqual(0);\n      }\n      await loadingTask.destroy();\n    });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"handles invalid base URLs","suites":["api","PDFWorkerUtil","isSameOrigin"],"line":2844,"updatePoint":{"line":2844,"column":35,"index":122090},"code":"      it(\"handles invalid base URLs\", function () {\n        // The base URL is not valid.\n        expect(isSameOrigin(\"/foo\", \"/bar\")).toEqual(false);\n\n        // The base URL has no origin.\n        expect(isSameOrigin(\"blob:foo\", \"/bar\")).toEqual(false);\n      });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"correctly checks if the origin of both URLs matches","suites":["api","PDFWorkerUtil","isSameOrigin"],"line":2851,"updatePoint":{"line":2851,"column":61,"index":122382},"code":"      it(\"correctly checks if the origin of both URLs matches\", function () {\n        expect(isSameOrigin(\"https://www.mozilla.org/foo\", \"https://www.mozilla.org/bar\")).toEqual(true);\n        expect(isSameOrigin(\"https://www.mozilla.org/foo\", \"https://www.example.com/bar\")).toEqual(false);\n      });","file":"unit/api_spec.js","skipped":false,"dir":"test"},{"name":"should mark text as LTR if there's only LTR-characters","suites":["bidi"],"line":24,"updatePoint":{"line":24,"column":60,"index":1006},"code":"  it(\"should mark text as LTR if there's only LTR-characters\", function () {\n    const str = \"Lorem ipsum dolor sit amet, consectetur adipisicing elit.\";\n    const bidiText = bidi(str, -1, false);\n    expect(bidiText.str).toEqual(\"Lorem ipsum dolor sit amet, consectetur adipisicing elit.\");\n    expect(bidiText.dir).toEqual(\"ltr\");\n  });","file":"unit/bidi_spec.js","skipped":false,"dir":"test"},{"name":"should mark text as RTL if more than 30% of text is RTL","suites":["bidi"],"line":30,"updatePoint":{"line":30,"column":61,"index":1346},"code":"  it(\"should mark text as RTL if more than 30% of text is RTL\", function () {\n    // 33% of test text are RTL characters\n    const test = \"\\u0645\\u0635\\u0631 Egypt\";\n    const result = \"Egypt \\u0631\\u0635\\u0645\";\n    const bidiText = bidi(test, -1, false);\n    expect(bidiText.str).toEqual(result);\n    expect(bidiText.dir).toEqual(\"rtl\");\n  });","file":"unit/bidi_spec.js","skipped":false,"dir":"test"},{"name":"should mark text as LTR if less than 30% of text is RTL","suites":["bidi"],"line":38,"updatePoint":{"line":38,"column":61,"index":1692},"code":"  it(\"should mark text as LTR if less than 30% of text is RTL\", function () {\n    const test = \"Egypt is known as \\u0645\\u0635\\u0631 in Arabic.\";\n    const result = \"Egypt is known as \\u0631\\u0635\\u0645 in Arabic.\";\n    const bidiText = bidi(test, -1, false);\n    expect(bidiText.str).toEqual(result);\n    expect(bidiText.dir).toEqual(\"ltr\");\n  });","file":"unit/bidi_spec.js","skipped":false,"dir":"test"},{"name":"parses header","suites":["CFFParser"],"line":56,"updatePoint":{"line":56,"column":19,"index":2185},"code":"  it(\"parses header\", function () {\n    const header = cff.header;\n    expect(header.major).toEqual(1);\n    expect(header.minor).toEqual(0);\n    expect(header.hdrSize).toEqual(4);\n    expect(header.offSize).toEqual(1);\n  });","file":"unit/cff_parser_spec.js","skipped":false,"dir":"test"},{"name":"parses name index","suites":["CFFParser"],"line":63,"updatePoint":{"line":63,"column":23,"index":2414},"code":"  it(\"parses name index\", function () {\n    const names = cff.names;\n    expect(names.length).toEqual(1);\n    expect(names[0]).toEqual(\"ABCDEF+Times-Roman\");\n  });","file":"unit/cff_parser_spec.js","skipped":false,"dir":"test"},{"name":"parses string index","suites":["CFFParser"],"line":68,"updatePoint":{"line":68,"column":25,"index":2580},"code":"  it(\"parses string index\", function () {\n    const strings = cff.strings;\n    expect(strings.count).toEqual(3);\n    expect(strings.get(0)).toEqual(\".notdef\");\n    expect(strings.get(391)).toEqual(\"001.007\");\n  });","file":"unit/cff_parser_spec.js","skipped":false,"dir":"test"},{"name":"parses top dict","suites":["CFFParser"],"line":74,"updatePoint":{"line":74,"column":21,"index":2791},"code":"  it(\"parses top dict\", function () {\n    const topDict = cff.topDict;\n    // 391 version 392 FullName 393 FamilyName 389 Weight 28416 UniqueID\n    // -168 -218 1000 898 FontBBox 94 CharStrings 45 102 Private\n    expect(topDict.getByName(\"version\")).toEqual(391);\n    expect(topDict.getByName(\"FullName\")).toEqual(392);\n    expect(topDict.getByName(\"FamilyName\")).toEqual(393);\n    expect(topDict.getByName(\"Weight\")).toEqual(389);\n    expect(topDict.getByName(\"UniqueID\")).toEqual(28416);\n    expect(topDict.getByName(\"FontBBox\")).toEqual([-168, -218, 1000, 898]);\n    expect(topDict.getByName(\"CharStrings\")).toEqual(94);\n    expect(topDict.getByName(\"Private\")).toEqual([45, 102]);\n  });","file":"unit/cff_parser_spec.js","skipped":false,"dir":"test"},{"name":"refuses to add topDict key with invalid value (bug 1068432)","suites":["CFFParser"],"line":87,"updatePoint":{"line":87,"column":65,"index":3526},"code":"  it(\"refuses to add topDict key with invalid value (bug 1068432)\", function () {\n    const topDict = cff.topDict;\n    const defaultValue = topDict.getByName(\"UnderlinePosition\");\n    topDict.setByKey( /* [12, 3] = */3075, [NaN]);\n    expect(topDict.getByName(\"UnderlinePosition\")).toEqual(defaultValue);\n  });","file":"unit/cff_parser_spec.js","skipped":false,"dir":"test"},{"name":"parses a CharString having cntrmask","suites":["CFFParser"],"line":105,"updatePoint":{"line":105,"column":41,"index":4412},"code":"  it(\"parses a CharString having cntrmask\", function () {\n    // prettier-ignore\n    const bytes = new Uint8Array([0, 1,\n    // count\n    1,\n    // offsetSize\n    0,\n    // offset[0]\n    38,\n    // end\n    149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 1,\n    // hstem\n    149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 149, 3,\n    // vstem\n    20,\n    // cntrmask\n    22, 22,\n    // fail if misparsed as hmoveto\n    14 // endchar\n    ]);\n\n    parser.bytes = bytes;\n    const charStringsIndex = parser.parseIndex(0).obj;\n    const charStrings = parser.parseCharStrings({\n      charStrings: charStringsIndex,\n      privateDict: privateDictStub\n    }).charStrings;\n    expect(charStrings.count).toEqual(1);\n    // shouldn't be sanitized\n    expect(charStrings.get(0).length).toEqual(38);\n  });","file":"unit/cff_parser_spec.js","skipped":false,"dir":"test"},{"name":"parses a CharString endchar with 4 args w/seac enabled","suites":["CFFParser"],"line":136,"updatePoint":{"line":136,"column":60,"index":5284},"code":"  it(\"parses a CharString endchar with 4 args w/seac enabled\", function () {\n    const cffParser = new CFFParser(fontData, {}, /* seacAnalysisEnabled = */true);\n    cffParser.parse(); // cff\n\n    // prettier-ignore\n    const bytes = new Uint8Array([0, 1,\n    // count\n    1,\n    // offsetSize\n    0,\n    // offset[0]\n    237, 247, 22, 247, 72, 204, 247, 86, 14]);\n    cffParser.bytes = bytes;\n    const charStringsIndex = cffParser.parseIndex(0).obj;\n    const result = cffParser.parseCharStrings({\n      charStrings: charStringsIndex,\n      privateDict: privateDictStub\n    });\n    expect(result.charStrings.count).toEqual(1);\n    expect(result.charStrings.get(0).length).toEqual(1);\n    expect(result.seacs.length).toEqual(1);\n    expect(result.seacs[0].length).toEqual(4);\n    expect(result.seacs[0][0]).toEqual(130);\n    expect(result.seacs[0][1]).toEqual(180);\n    expect(result.seacs[0][2]).toEqual(65);\n    expect(result.seacs[0][3]).toEqual(194);\n  });","file":"unit/cff_parser_spec.js","skipped":false,"dir":"test"},{"name":"parses a CharString endchar with 4 args w/seac disabled","suites":["CFFParser"],"line":163,"updatePoint":{"line":163,"column":61,"index":6246},"code":"  it(\"parses a CharString endchar with 4 args w/seac disabled\", function () {\n    const cffParser = new CFFParser(fontData, {}, /* seacAnalysisEnabled = */false);\n    cffParser.parse(); // cff\n\n    // prettier-ignore\n    const bytes = new Uint8Array([0, 1,\n    // count\n    1,\n    // offsetSize\n    0,\n    // offset[0]\n    237, 247, 22, 247, 72, 204, 247, 86, 14]);\n    cffParser.bytes = bytes;\n    const charStringsIndex = cffParser.parseIndex(0).obj;\n    const result = cffParser.parseCharStrings({\n      charStrings: charStringsIndex,\n      privateDict: privateDictStub\n    });\n    expect(result.charStrings.count).toEqual(1);\n    expect(result.charStrings.get(0).length).toEqual(9);\n    expect(result.seacs.length).toEqual(0);\n  });","file":"unit/cff_parser_spec.js","skipped":false,"dir":"test"},{"name":"parses a CharString endchar no args","suites":["CFFParser"],"line":185,"updatePoint":{"line":185,"column":41,"index":6963},"code":"  it(\"parses a CharString endchar no args\", function () {\n    // prettier-ignore\n    const bytes = new Uint8Array([0, 1,\n    // count\n    1,\n    // offsetSize\n    0,\n    // offset[0]\n    14]);\n    parser.bytes = bytes;\n    const charStringsIndex = parser.parseIndex(0).obj;\n    const result = parser.parseCharStrings({\n      charStrings: charStringsIndex,\n      privateDict: privateDictStub\n    });\n    expect(result.charStrings.count).toEqual(1);\n    expect(result.charStrings.get(0)[0]).toEqual(14);\n    expect(result.seacs.length).toEqual(0);\n  });","file":"unit/cff_parser_spec.js","skipped":false,"dir":"test"},{"name":"parses predefined charsets","suites":["CFFParser"],"line":204,"updatePoint":{"line":204,"column":32,"index":7506},"code":"  it(\"parses predefined charsets\", function () {\n    const charset = parser.parseCharsets(0, 0, null, true);\n    expect(charset.predefined).toEqual(true);\n  });","file":"unit/cff_parser_spec.js","skipped":false,"dir":"test"},{"name":"parses charset format 0","suites":["CFFParser"],"line":208,"updatePoint":{"line":208,"column":29,"index":7664},"code":"  it(\"parses charset format 0\", function () {\n    // The first three bytes make the offset large enough to skip predefined.\n    // prettier-ignore\n    const bytes = new Uint8Array([0x00, 0x00, 0x00, 0x00,\n    // format\n    0x00, 0x02 // sid/cid\n    ]);\n\n    parser.bytes = bytes;\n    let charset = parser.parseCharsets(3, 2, new CFFStrings(), false);\n    expect(charset.charset[1]).toEqual(\"exclam\");\n\n    // CID font\n    charset = parser.parseCharsets(3, 2, new CFFStrings(), true);\n    expect(charset.charset[1]).toEqual(2);\n  });","file":"unit/cff_parser_spec.js","skipped":false,"dir":"test"},{"name":"parses charset format 1","suites":["CFFParser"],"line":224,"updatePoint":{"line":224,"column":29,"index":8197},"code":"  it(\"parses charset format 1\", function () {\n    // The first three bytes make the offset large enough to skip predefined.\n    // prettier-ignore\n    const bytes = new Uint8Array([0x00, 0x00, 0x00, 0x01,\n    // format\n    0x00, 0x08,\n    // sid/cid start\n    0x01 // sid/cid left\n    ]);\n\n    parser.bytes = bytes;\n    let charset = parser.parseCharsets(3, 2, new CFFStrings(), false);\n    expect(charset.charset).toEqual([\".notdef\", \"quoteright\", \"parenleft\"]);\n\n    // CID font\n    charset = parser.parseCharsets(3, 2, new CFFStrings(), true);\n    expect(charset.charset).toEqual([0, 8, 9]);\n  });","file":"unit/cff_parser_spec.js","skipped":false,"dir":"test"},{"name":"parses charset format 2","suites":["CFFParser"],"line":242,"updatePoint":{"line":242,"column":29,"index":8798},"code":"  it(\"parses charset format 2\", function () {\n    // format 2 is the same as format 1 but the left is card16\n    // The first three bytes make the offset large enough to skip predefined.\n    // prettier-ignore\n    const bytes = new Uint8Array([0x00, 0x00, 0x00, 0x02,\n    // format\n    0x00, 0x08,\n    // sid/cid start\n    0x00, 0x01 // sid/cid left\n    ]);\n\n    parser.bytes = bytes;\n    let charset = parser.parseCharsets(3, 2, new CFFStrings(), false);\n    expect(charset.charset).toEqual([\".notdef\", \"quoteright\", \"parenleft\"]);\n\n    // CID font\n    charset = parser.parseCharsets(3, 2, new CFFStrings(), true);\n    expect(charset.charset).toEqual([0, 8, 9]);\n  });","file":"unit/cff_parser_spec.js","skipped":false,"dir":"test"},{"name":"parses encoding format 0","suites":["CFFParser"],"line":261,"updatePoint":{"line":261,"column":30,"index":9469},"code":"  it(\"parses encoding format 0\", function () {\n    // The first two bytes make the offset large enough to skip predefined.\n    // prettier-ignore\n    const bytes = new Uint8Array([0x00, 0x00, 0x00,\n    // format\n    0x01,\n    // count\n    0x08 // start\n    ]);\n\n    parser.bytes = bytes;\n    const encoding = parser.parseEncoding(2, {}, new CFFStrings(), null);\n    expect(encoding.encoding).toEqual(createWithNullProto({\n      0x8: 1\n    }));\n  });","file":"unit/cff_parser_spec.js","skipped":false,"dir":"test"},{"name":"parses encoding format 1","suites":["CFFParser"],"line":277,"updatePoint":{"line":277,"column":30,"index":9919},"code":"  it(\"parses encoding format 1\", function () {\n    // The first two bytes make the offset large enough to skip predefined.\n    // prettier-ignore\n    const bytes = new Uint8Array([0x00, 0x00, 0x01,\n    // format\n    0x01,\n    // num ranges\n    0x07,\n    // range1 start\n    0x01 // range2 left\n    ]);\n\n    parser.bytes = bytes;\n    const encoding = parser.parseEncoding(2, {}, new CFFStrings(), null);\n    expect(encoding.encoding).toEqual(createWithNullProto({\n      0x7: 0x01,\n      0x08: 0x02\n    }));\n  });","file":"unit/cff_parser_spec.js","skipped":false,"dir":"test"},{"name":"parses fdselect format 0","suites":["CFFParser"],"line":296,"updatePoint":{"line":296,"column":30,"index":10431},"code":"  it(\"parses fdselect format 0\", function () {\n    // prettier-ignore\n    const bytes = new Uint8Array([0x00,\n    // format\n    0x00,\n    // gid: 0 fd: 0\n    0x01 // gid: 1 fd: 1\n    ]);\n\n    parser.bytes = bytes.slice();\n    const fdSelect = parser.parseFDSelect(0, 2);\n    expect(fdSelect.fdSelect).toEqual([0, 1]);\n    expect(fdSelect.format).toEqual(0);\n  });","file":"unit/cff_parser_spec.js","skipped":false,"dir":"test"},{"name":"parses fdselect format 3","suites":["CFFParser"],"line":310,"updatePoint":{"line":310,"column":30,"index":10795},"code":"  it(\"parses fdselect format 3\", function () {\n    // prettier-ignore\n    const bytes = new Uint8Array([0x03,\n    // format\n    0x00, 0x02,\n    // range count\n    0x00, 0x00,\n    // first gid\n    0x09,\n    // font dict 1 id\n    0x00, 0x02,\n    // next gid\n    0x0a,\n    // font dict 2 id\n    0x00, 0x04 // sentinel (last gid)\n    ]);\n\n    parser.bytes = bytes.slice();\n    const fdSelect = parser.parseFDSelect(0, 4);\n    expect(fdSelect.fdSelect).toEqual([9, 9, 0xa, 0xa]);\n    expect(fdSelect.format).toEqual(3);\n  });","file":"unit/cff_parser_spec.js","skipped":false,"dir":"test"},{"name":"parses invalid fdselect format 3 (bug 1146106)","suites":["CFFParser"],"line":332,"updatePoint":{"line":332,"column":52,"index":11338},"code":"  it(\"parses invalid fdselect format 3 (bug 1146106)\", function () {\n    // prettier-ignore\n    const bytes = new Uint8Array([0x03,\n    // format\n    0x00, 0x02,\n    // range count\n    0x00, 0x01,\n    // first gid (invalid)\n    0x09,\n    // font dict 1 id\n    0x00, 0x02,\n    // next gid\n    0x0a,\n    // font dict 2 id\n    0x00, 0x04 // sentinel (last gid)\n    ]);\n\n    parser.bytes = bytes.slice();\n    const fdSelect = parser.parseFDSelect(0, 4);\n    expect(fdSelect.fdSelect).toEqual([9, 9, 0xa, 0xa]);\n    expect(fdSelect.format).toEqual(3);\n  });","file":"unit/cff_parser_spec.js","skipped":false,"dir":"test"},{"name":"encodes integers","suites":["CFFCompiler"],"line":367,"updatePoint":{"line":367,"column":22,"index":12109},"code":"  it(\"encodes integers\", function () {\n    const c = new CFFCompiler();\n    // all the examples from the spec\n    expect(c.encodeInteger(0)).toEqual([0x8b]);\n    expect(c.encodeInteger(100)).toEqual([0xef]);\n    expect(c.encodeInteger(-100)).toEqual([0x27]);\n    expect(c.encodeInteger(1000)).toEqual([0xfa, 0x7c]);\n    expect(c.encodeInteger(-1000)).toEqual([0xfe, 0x7c]);\n    expect(c.encodeInteger(10000)).toEqual([0x1c, 0x27, 0x10]);\n    expect(c.encodeInteger(-10000)).toEqual([0x1c, 0xd8, 0xf0]);\n    expect(c.encodeInteger(100000)).toEqual([0x1d, 0x00, 0x01, 0x86, 0xa0]);\n    expect(c.encodeInteger(-100000)).toEqual([0x1d, 0xff, 0xfe, 0x79, 0x60]);\n  });","file":"unit/cff_parser_spec.js","skipped":false,"dir":"test"},{"name":"encodes floats","suites":["CFFCompiler"],"line":380,"updatePoint":{"line":380,"column":20,"index":12771},"code":"  it(\"encodes floats\", function () {\n    const c = new CFFCompiler();\n    expect(c.encodeFloat(-2.25)).toEqual([0x1e, 0xe2, 0xa2, 0x5f]);\n    expect(c.encodeFloat(5e-11)).toEqual([0x1e, 0x5c, 0x11, 0xff]);\n  });","file":"unit/cff_parser_spec.js","skipped":false,"dir":"test"},{"name":"sanitizes name index","suites":["CFFCompiler"],"line":385,"updatePoint":{"line":385,"column":26,"index":12989},"code":"  it(\"sanitizes name index\", function () {\n    const c = new CFFCompiler();\n    let nameIndexCompiled = c.compileNameIndex([\"[a\"]);\n    let parser = testParser(nameIndexCompiled);\n    let nameIndex = parser.parseIndex(0);\n    let names = parser.parseNameIndex(nameIndex.obj);\n    expect(names).toEqual([\"_a\"]);\n    let longName = \"\";\n    for (let i = 0; i < 129; i++) {\n      longName += \"_\";\n    }\n    nameIndexCompiled = c.compileNameIndex([longName]);\n    parser = testParser(nameIndexCompiled);\n    nameIndex = parser.parseIndex(0);\n    names = parser.parseNameIndex(nameIndex.obj);\n    expect(names[0].length).toEqual(127);\n  });","file":"unit/cff_parser_spec.js","skipped":false,"dir":"test"},{"name":"compiles fdselect format 0","suites":["CFFCompiler"],"line":402,"updatePoint":{"line":402,"column":32,"index":13630},"code":"  it(\"compiles fdselect format 0\", function () {\n    const fdSelect = new CFFFDSelect(0, [3, 2, 1]);\n    const c = new CFFCompiler();\n    const out = c.compileFDSelect(fdSelect);\n    expect(out).toEqual([0,\n    // format\n    3,\n    // gid: 0 fd 3\n    2,\n    // gid: 1 fd 3\n    1 // gid: 2 fd 3\n    ]);\n  });","file":"unit/cff_parser_spec.js","skipped":false,"dir":"test"},{"name":"compiles fdselect format 3","suites":["CFFCompiler"],"line":416,"updatePoint":{"line":416,"column":32,"index":13939},"code":"  it(\"compiles fdselect format 3\", function () {\n    const fdSelect = new CFFFDSelect(3, [0, 0, 1, 1]);\n    const c = new CFFCompiler();\n    const out = c.compileFDSelect(fdSelect);\n    expect(out).toEqual([3,\n    // format\n    0,\n    // nRanges (high)\n    2,\n    // nRanges (low)\n    0,\n    // range struct 0 - first (high)\n    0,\n    // range struct 0 - first (low)\n    0,\n    // range struct 0 - fd\n    0,\n    // range struct 0 - first (high)\n    2,\n    // range struct 0 - first (low)\n    1,\n    // range struct 0 - fd\n    0,\n    // sentinel (high)\n    4 // sentinel (low)\n    ]);\n  });","file":"unit/cff_parser_spec.js","skipped":false,"dir":"test"},{"name":"compiles fdselect format 3, single range","suites":["CFFCompiler"],"line":444,"updatePoint":{"line":444,"column":46,"index":14545},"code":"  it(\"compiles fdselect format 3, single range\", function () {\n    const fdSelect = new CFFFDSelect(3, [0, 0]);\n    const c = new CFFCompiler();\n    const out = c.compileFDSelect(fdSelect);\n    expect(out).toEqual([3,\n    // format\n    0,\n    // nRanges (high)\n    1,\n    // nRanges (low)\n    0,\n    // range struct 0 - first (high)\n    0,\n    // range struct 0 - first (low)\n    0,\n    // range struct 0 - fd\n    0,\n    // sentinel (high)\n    2 // sentinel (low)\n    ]);\n  });","file":"unit/cff_parser_spec.js","skipped":false,"dir":"test"},{"name":"compiles charset of CID font","suites":["CFFCompiler"],"line":466,"updatePoint":{"line":466,"column":34,"index":15012},"code":"  it(\"compiles charset of CID font\", function () {\n    const charset = new CFFCharset();\n    const c = new CFFCompiler();\n    const numGlyphs = 7;\n    const out = c.compileCharset(charset, numGlyphs, new CFFStrings(), true);\n    // All CID charsets get turned into a simple format 2.\n    expect(out).toEqual([2,\n    // format\n    0,\n    // cid (high)\n    0,\n    // cid (low)\n    0,\n    // nLeft (high)\n    numGlyphs - 1 // nLeft (low)\n    ]);\n  });","file":"unit/cff_parser_spec.js","skipped":false,"dir":"test"},{"name":"compiles charset of non CID font","suites":["CFFCompiler"],"line":484,"updatePoint":{"line":484,"column":38,"index":15466},"code":"  it(\"compiles charset of non CID font\", function () {\n    const charset = new CFFCharset(false, 0, [\"space\", \"exclam\"]);\n    const c = new CFFCompiler();\n    const numGlyphs = 3;\n    const out = c.compileCharset(charset, numGlyphs, new CFFStrings(), false);\n    // All non-CID fonts use a format 0 charset.\n    expect(out).toEqual([0,\n    // format\n    0,\n    // sid of 'space' (high)\n    1,\n    // sid of 'space' (low)\n    0,\n    // sid of 'exclam' (high)\n    2 // sid of 'exclam' (low)\n    ]);\n  });","file":"unit/cff_parser_spec.js","skipped":false,"dir":"test"},{"name":"parses beginbfchar","suites":["cmap"],"line":37,"updatePoint":{"line":37,"column":24,"index":1327},"code":"  it(\"parses beginbfchar\", async function () {\n    // prettier-ignore\n    const str = \"2 beginbfchar\\n\" + \"<03> <00>\\n\" + \"<04> <01>\\n\" + \"endbfchar\\n\";\n    const stream = new StringStream(str);\n    const cmap = await CMapFactory.create({\n      encoding: stream\n    });\n    expect(cmap.lookup(0x03)).toEqual(String.fromCharCode(0x00));\n    expect(cmap.lookup(0x04)).toEqual(String.fromCharCode(0x01));\n    expect(cmap.lookup(0x05)).toBeUndefined();\n  });","file":"unit/cmap_spec.js","skipped":false,"dir":"test"},{"name":"parses beginbfrange with range","suites":["cmap"],"line":48,"updatePoint":{"line":48,"column":36,"index":1794},"code":"  it(\"parses beginbfrange with range\", async function () {\n    // prettier-ignore\n    const str = \"1 beginbfrange\\n\" + \"<06> <0B> 0\\n\" + \"endbfrange\\n\";\n    const stream = new StringStream(str);\n    const cmap = await CMapFactory.create({\n      encoding: stream\n    });\n    expect(cmap.lookup(0x05)).toBeUndefined();\n    expect(cmap.lookup(0x06)).toEqual(String.fromCharCode(0x00));\n    expect(cmap.lookup(0x0b)).toEqual(String.fromCharCode(0x05));\n    expect(cmap.lookup(0x0c)).toBeUndefined();\n  });","file":"unit/cmap_spec.js","skipped":false,"dir":"test"},{"name":"parses beginbfrange with array","suites":["cmap"],"line":60,"updatePoint":{"line":60,"column":36,"index":2296},"code":"  it(\"parses beginbfrange with array\", async function () {\n    // prettier-ignore\n    const str = \"1 beginbfrange\\n\" + \"<0D> <12> [ 0 1 2 3 4 5 ]\\n\" + \"endbfrange\\n\";\n    const stream = new StringStream(str);\n    const cmap = await CMapFactory.create({\n      encoding: stream\n    });\n    expect(cmap.lookup(0x0c)).toBeUndefined();\n    expect(cmap.lookup(0x0d)).toEqual(0x00);\n    expect(cmap.lookup(0x12)).toEqual(0x05);\n    expect(cmap.lookup(0x13)).toBeUndefined();\n  });","file":"unit/cmap_spec.js","skipped":false,"dir":"test"},{"name":"parses begincidchar","suites":["cmap"],"line":72,"updatePoint":{"line":72,"column":25,"index":2759},"code":"  it(\"parses begincidchar\", async function () {\n    // prettier-ignore\n    const str = \"1 begincidchar\\n\" + \"<14> 0\\n\" + \"endcidchar\\n\";\n    const stream = new StringStream(str);\n    const cmap = await CMapFactory.create({\n      encoding: stream\n    });\n    expect(cmap.lookup(0x14)).toEqual(0x00);\n    expect(cmap.lookup(0x15)).toBeUndefined();\n  });","file":"unit/cmap_spec.js","skipped":false,"dir":"test"},{"name":"parses begincidrange","suites":["cmap"],"line":82,"updatePoint":{"line":82,"column":26,"index":3112},"code":"  it(\"parses begincidrange\", async function () {\n    // prettier-ignore\n    const str = \"1 begincidrange\\n\" + \"<0016> <001B>   0\\n\" + \"endcidrange\\n\";\n    const stream = new StringStream(str);\n    const cmap = await CMapFactory.create({\n      encoding: stream\n    });\n    expect(cmap.lookup(0x15)).toBeUndefined();\n    expect(cmap.lookup(0x16)).toEqual(0x00);\n    expect(cmap.lookup(0x1b)).toEqual(0x05);\n    expect(cmap.lookup(0x1c)).toBeUndefined();\n  });","file":"unit/cmap_spec.js","skipped":false,"dir":"test"},{"name":"decodes codespace ranges","suites":["cmap"],"line":94,"updatePoint":{"line":94,"column":30,"index":3574},"code":"  it(\"decodes codespace ranges\", async function () {\n    // prettier-ignore\n    const str = \"1 begincodespacerange\\n\" + \"<01> <02>\\n\" + \"<00000003> <00000004>\\n\" + \"endcodespacerange\\n\";\n    const stream = new StringStream(str);\n    const cmap = await CMapFactory.create({\n      encoding: stream\n    });\n    const c = {};\n    cmap.readCharCode(String.fromCharCode(1), 0, c);\n    expect(c.charcode).toEqual(1);\n    expect(c.length).toEqual(1);\n    cmap.readCharCode(String.fromCharCode(0, 0, 0, 3), 0, c);\n    expect(c.charcode).toEqual(3);\n    expect(c.length).toEqual(4);\n  });","file":"unit/cmap_spec.js","skipped":false,"dir":"test"},{"name":"decodes 4 byte codespace ranges","suites":["cmap"],"line":109,"updatePoint":{"line":109,"column":37,"index":4160},"code":"  it(\"decodes 4 byte codespace ranges\", async function () {\n    // prettier-ignore\n    const str = \"1 begincodespacerange\\n\" + \"<8EA1A1A1> <8EA1FEFE>\\n\" + \"endcodespacerange\\n\";\n    const stream = new StringStream(str);\n    const cmap = await CMapFactory.create({\n      encoding: stream\n    });\n    const c = {};\n    cmap.readCharCode(String.fromCharCode(0x8e, 0xa1, 0xa1, 0xa1), 0, c);\n    expect(c.charcode).toEqual(0x8ea1a1a1);\n    expect(c.length).toEqual(4);\n  });","file":"unit/cmap_spec.js","skipped":false,"dir":"test"},{"name":"read usecmap","suites":["cmap"],"line":121,"updatePoint":{"line":121,"column":18,"index":4611},"code":"  it(\"read usecmap\", async function () {\n    const str = \"/Adobe-Japan1-1 usecmap\\n\";\n    const stream = new StringStream(str);\n    const cmap = await CMapFactory.create({\n      encoding: stream,\n      fetchBuiltInCMap,\n      useCMap: null\n    });\n    expect(cmap instanceof CMap).toEqual(true);\n    expect(cmap.useCMap).not.toBeNull();\n    expect(cmap.builtInCMap).toBeFalsy();\n    expect(cmap.length).toEqual(0x20a7);\n    expect(cmap.isIdentityCMap).toEqual(false);\n  });","file":"unit/cmap_spec.js","skipped":false,"dir":"test"},{"name":"parses cmapname","suites":["cmap"],"line":135,"updatePoint":{"line":135,"column":21,"index":5088},"code":"  it(\"parses cmapname\", async function () {\n    const str = \"/CMapName /Identity-H def\\n\";\n    const stream = new StringStream(str);\n    const cmap = await CMapFactory.create({\n      encoding: stream\n    });\n    expect(cmap.name).toEqual(\"Identity-H\");\n  });","file":"unit/cmap_spec.js","skipped":false,"dir":"test"},{"name":"parses wmode","suites":["cmap"],"line":143,"updatePoint":{"line":143,"column":18,"index":5344},"code":"  it(\"parses wmode\", async function () {\n    const str = \"/WMode 1 def\\n\";\n    const stream = new StringStream(str);\n    const cmap = await CMapFactory.create({\n      encoding: stream\n    });\n    expect(cmap.vertical).toEqual(true);\n  });","file":"unit/cmap_spec.js","skipped":false,"dir":"test"},{"name":"loads built in cmap","suites":["cmap"],"line":151,"updatePoint":{"line":151,"column":25,"index":5590},"code":"  it(\"loads built in cmap\", async function () {\n    const cmap = await CMapFactory.create({\n      encoding: Name.get(\"Adobe-Japan1-1\"),\n      fetchBuiltInCMap,\n      useCMap: null\n    });\n    expect(cmap instanceof CMap).toEqual(true);\n    expect(cmap.useCMap).toBeNull();\n    expect(cmap.builtInCMap).toBeTruthy();\n    expect(cmap.length).toEqual(0x20a7);\n    expect(cmap.isIdentityCMap).toEqual(false);\n  });","file":"unit/cmap_spec.js","skipped":false,"dir":"test"},{"name":"loads built in identity cmap","suites":["cmap"],"line":163,"updatePoint":{"line":163,"column":34,"index":6010},"code":"  it(\"loads built in identity cmap\", async function () {\n    const cmap = await CMapFactory.create({\n      encoding: Name.get(\"Identity-H\"),\n      fetchBuiltInCMap,\n      useCMap: null\n    });\n    expect(cmap instanceof IdentityCMap).toEqual(true);\n    expect(cmap.vertical).toEqual(false);\n    expect(cmap.length).toEqual(0x10000);\n    expect(function () {\n      return cmap.isIdentityCMap;\n    }).toThrow(new Error(\"should not access .isIdentityCMap\"));\n  });","file":"unit/cmap_spec.js","skipped":false,"dir":"test"},{"name":"attempts to load a non-existent built-in CMap","suites":["cmap"],"line":176,"updatePoint":{"line":176,"column":51,"index":6489},"code":"  it(\"attempts to load a non-existent built-in CMap\", async function () {\n    try {\n      await CMapFactory.create({\n        encoding: Name.get(\"null\"),\n        fetchBuiltInCMap,\n        useCMap: null\n      });\n\n      // Shouldn't get here.\n      expect(false).toEqual(true);\n    } catch (reason) {\n      expect(reason instanceof Error).toEqual(true);\n      expect(reason.message).toEqual(\"Unknown CMap name: null\");\n    }\n  });","file":"unit/cmap_spec.js","skipped":false,"dir":"test"},{"name":"attempts to load a built-in CMap without the necessary API parameters","suites":["cmap"],"line":191,"updatePoint":{"line":191,"column":75,"index":6942},"code":"  it(\"attempts to load a built-in CMap without the necessary API parameters\", async function () {\n    function tmpFetchBuiltInCMap(name) {\n      const CMapReaderFactory = new DefaultCMapReaderFactory({});\n      return CMapReaderFactory.fetch({\n        name\n      });\n    }\n    try {\n      await CMapFactory.create({\n        encoding: Name.get(\"Adobe-Japan1-1\"),\n        fetchBuiltInCMap: tmpFetchBuiltInCMap,\n        useCMap: null\n      });\n\n      // Shouldn't get here.\n      expect(false).toEqual(true);\n    } catch (reason) {\n      expect(reason instanceof Error).toEqual(true);\n      expect(reason.message).toEqual('The CMap \"baseUrl\" parameter must be specified, ensure that ' + 'the \"cMapUrl\" and \"cMapPacked\" API parameters are provided.');\n    }\n  });","file":"unit/cmap_spec.js","skipped":false,"dir":"test"},{"name":"attempts to load a built-in CMap with inconsistent API parameters","suites":["cmap"],"line":212,"updatePoint":{"line":212,"column":71,"index":7698},"code":"  it(\"attempts to load a built-in CMap with inconsistent API parameters\", async function () {\n    function tmpFetchBuiltInCMap(name) {\n      const CMapReaderFactory = new DefaultCMapReaderFactory({\n        baseUrl: CMAP_URL,\n        isCompressed: false\n      });\n      return CMapReaderFactory.fetch({\n        name\n      });\n    }\n    try {\n      await CMapFactory.create({\n        encoding: Name.get(\"Adobe-Japan1-1\"),\n        fetchBuiltInCMap: tmpFetchBuiltInCMap,\n        useCMap: null\n      });\n\n      // Shouldn't get here.\n      expect(false).toEqual(true);\n    } catch (reason) {\n      expect(reason instanceof Error).toEqual(true);\n      const message = reason.message;\n      expect(message.startsWith(\"Unable to load CMap at: \")).toEqual(true);\n      expect(message.endsWith(\"/external/bcmaps/Adobe-Japan1-1\")).toEqual(true);\n    }\n  });","file":"unit/cmap_spec.js","skipped":false,"dir":"test"},{"name":"should be true if decode is not an array","suites":["colorspace","ColorSpace.isDefaultDecode"],"line":24,"updatePoint":{"line":24,"column":48,"index":1108},"code":"    it(\"should be true if decode is not an array\", function () {\n      expect(ColorSpace.isDefaultDecode(\"string\", 0)).toBeTruthy();\n    });","file":"unit/colorspace_spec.js","skipped":false,"dir":"test"},{"name":"should be true if length of decode array is not correct","suites":["colorspace","ColorSpace.isDefaultDecode"],"line":27,"updatePoint":{"line":27,"column":63,"index":1264},"code":"    it(\"should be true if length of decode array is not correct\", function () {\n      expect(ColorSpace.isDefaultDecode([0], 1)).toBeTruthy();\n      expect(ColorSpace.isDefaultDecode([0, 1, 0], 1)).toBeTruthy();\n    });","file":"unit/colorspace_spec.js","skipped":false,"dir":"test"},{"name":"should be true if decode map matches the default decode map","suites":["colorspace","ColorSpace.isDefaultDecode"],"line":31,"updatePoint":{"line":31,"column":67,"index":1488},"code":"    it(\"should be true if decode map matches the default decode map\", function () {\n      expect(ColorSpace.isDefaultDecode([], 0)).toBeTruthy();\n      expect(ColorSpace.isDefaultDecode([0, 0], 1)).toBeFalsy();\n      expect(ColorSpace.isDefaultDecode([0, 1], 1)).toBeTruthy();\n      expect(ColorSpace.isDefaultDecode([0, 1, 0, 1, 0, 1], 3)).toBeTruthy();\n      expect(ColorSpace.isDefaultDecode([0, 1, 0, 1, 1, 1], 3)).toBeFalsy();\n      expect(ColorSpace.isDefaultDecode([0, 1, 0, 1, 0, 1, 0, 1], 4)).toBeTruthy();\n      expect(ColorSpace.isDefaultDecode([1, 0, 0, 1, 0, 1, 0, 1], 4)).toBeFalsy();\n    });","file":"unit/colorspace_spec.js","skipped":false,"dir":"test"},{"name":"caching by Name","suites":["colorspace","ColorSpace caching"],"line":49,"updatePoint":{"line":49,"column":23,"index":2304},"code":"    it(\"caching by Name\", function () {\n      const xref = new XRefMock();\n      const pdfFunctionFactory = new PDFFunctionFactory({\n        xref\n      });\n      const colorSpace1 = ColorSpace.parse({\n        cs: Name.get(\"Pattern\"),\n        xref,\n        resources: null,\n        pdfFunctionFactory,\n        localColorSpaceCache\n      });\n      expect(colorSpace1.name).toEqual(\"Pattern\");\n      const colorSpace2 = ColorSpace.parse({\n        cs: Name.get(\"Pattern\"),\n        xref,\n        resources: null,\n        pdfFunctionFactory,\n        localColorSpaceCache\n      });\n      expect(colorSpace2.name).toEqual(\"Pattern\");\n      const colorSpaceNonCached = ColorSpace.parse({\n        cs: Name.get(\"Pattern\"),\n        xref,\n        resources: null,\n        pdfFunctionFactory,\n        localColorSpaceCache: new LocalColorSpaceCache()\n      });\n      expect(colorSpaceNonCached.name).toEqual(\"Pattern\");\n      const colorSpaceOther = ColorSpace.parse({\n        cs: Name.get(\"RGB\"),\n        xref,\n        resources: null,\n        pdfFunctionFactory,\n        localColorSpaceCache\n      });\n      expect(colorSpaceOther.name).toEqual(\"DeviceRGB\");\n\n      // These two must be *identical* if caching worked as intended.\n      expect(colorSpace1).toBe(colorSpace2);\n      expect(colorSpace1).not.toBe(colorSpaceNonCached);\n      expect(colorSpace1).not.toBe(colorSpaceOther);\n    });","file":"unit/colorspace_spec.js","skipped":false,"dir":"test"},{"name":"caching by Ref","suites":["colorspace","ColorSpace caching"],"line":92,"updatePoint":{"line":92,"column":22,"index":3683},"code":"    it(\"caching by Ref\", function () {\n      const paramsCalGray = new Dict();\n      paramsCalGray.set(\"WhitePoint\", [1, 1, 1]);\n      paramsCalGray.set(\"BlackPoint\", [0, 0, 0]);\n      paramsCalGray.set(\"Gamma\", 2.0);\n      const paramsCalRGB = new Dict();\n      paramsCalRGB.set(\"WhitePoint\", [1, 1, 1]);\n      paramsCalRGB.set(\"BlackPoint\", [0, 0, 0]);\n      paramsCalRGB.set(\"Gamma\", [1, 1, 1]);\n      paramsCalRGB.set(\"Matrix\", [1, 0, 0, 0, 1, 0, 0, 0, 1]);\n      const xref = new XRefMock([{\n        ref: Ref.get(50, 0),\n        data: [Name.get(\"CalGray\"), paramsCalGray]\n      }, {\n        ref: Ref.get(100, 0),\n        data: [Name.get(\"CalRGB\"), paramsCalRGB]\n      }]);\n      const pdfFunctionFactory = new PDFFunctionFactory({\n        xref\n      });\n      const colorSpace1 = ColorSpace.parse({\n        cs: Ref.get(50, 0),\n        xref,\n        resources: null,\n        pdfFunctionFactory,\n        localColorSpaceCache\n      });\n      expect(colorSpace1.name).toEqual(\"CalGray\");\n      const colorSpace2 = ColorSpace.parse({\n        cs: Ref.get(50, 0),\n        xref,\n        resources: null,\n        pdfFunctionFactory,\n        localColorSpaceCache\n      });\n      expect(colorSpace2.name).toEqual(\"CalGray\");\n      const colorSpaceNonCached = ColorSpace.parse({\n        cs: Ref.get(50, 0),\n        xref,\n        resources: null,\n        pdfFunctionFactory,\n        localColorSpaceCache: new LocalColorSpaceCache()\n      });\n      expect(colorSpaceNonCached.name).toEqual(\"CalGray\");\n      const colorSpaceOther = ColorSpace.parse({\n        cs: Ref.get(100, 0),\n        xref,\n        resources: null,\n        pdfFunctionFactory,\n        localColorSpaceCache\n      });\n      expect(colorSpaceOther.name).toEqual(\"CalRGB\");\n\n      // These two must be *identical* if caching worked as intended.\n      expect(colorSpace1).toBe(colorSpace2);\n      expect(colorSpace1).not.toBe(colorSpaceNonCached);\n      expect(colorSpace1).not.toBe(colorSpaceOther);\n    });","file":"unit/colorspace_spec.js","skipped":false,"dir":"test"},{"name":"should handle the case when cs is a Name object","suites":["colorspace","DeviceGrayCS"],"line":152,"updatePoint":{"line":152,"column":55,"index":5728},"code":"    it(\"should handle the case when cs is a Name object\", function () {\n      const cs = Name.get(\"DeviceGray\");\n      const xref = new XRefMock([{\n        ref: Ref.get(10, 0),\n        data: new Dict()\n      }]);\n      const resources = new Dict();\n      const pdfFunctionFactory = new PDFFunctionFactory({\n        xref\n      });\n      const colorSpace = ColorSpace.parse({\n        cs,\n        xref,\n        resources,\n        pdfFunctionFactory,\n        localColorSpaceCache: new LocalColorSpaceCache()\n      });\n      const testSrc = new Uint8Array([27, 125, 250, 131]);\n      const testDest = new Uint8ClampedArray(4 * 4 * 3);\n      // prettier-ignore\n      const expectedDest = new Uint8ClampedArray([27, 27, 27, 27, 27, 27, 125, 125, 125, 125, 125, 125, 27, 27, 27, 27, 27, 27, 125, 125, 125, 125, 125, 125, 250, 250, 250, 250, 250, 250, 131, 131, 131, 131, 131, 131, 250, 250, 250, 250, 250, 250, 131, 131, 131, 131, 131, 131]);\n      colorSpace.fillRgb(testDest, 2, 2, 4, 4, 4, 8, testSrc, 0);\n      expect(colorSpace.getRgb(new Float32Array([0.1]), 0)).toEqual(new Uint8ClampedArray([26, 26, 26]));\n      expect(colorSpace.getOutputLength(2, 0)).toEqual(6);\n      expect(colorSpace.isPassthrough(8)).toBeFalsy();\n      expect(testDest).toEqual(expectedDest);\n    });","file":"unit/colorspace_spec.js","skipped":false,"dir":"test"},{"name":"should handle the case when cs is an indirect object","suites":["colorspace","DeviceGrayCS"],"line":179,"updatePoint":{"line":179,"column":60,"index":7008},"code":"    it(\"should handle the case when cs is an indirect object\", function () {\n      const cs = Ref.get(10, 0);\n      const xref = new XRefMock([{\n        ref: cs,\n        data: Name.get(\"DeviceGray\")\n      }]);\n      const resources = new Dict();\n      const pdfFunctionFactory = new PDFFunctionFactory({\n        xref\n      });\n      const colorSpace = ColorSpace.parse({\n        cs,\n        xref,\n        resources,\n        pdfFunctionFactory,\n        localColorSpaceCache: new LocalColorSpaceCache()\n      });\n      const testSrc = new Uint8Array([27, 125, 250, 131]);\n      const testDest = new Uint8ClampedArray(3 * 3 * 3);\n      // prettier-ignore\n      const expectedDest = new Uint8ClampedArray([27, 27, 27, 27, 27, 27, 125, 125, 125, 27, 27, 27, 27, 27, 27, 125, 125, 125, 250, 250, 250, 250, 250, 250, 131, 131, 131]);\n      colorSpace.fillRgb(testDest, 2, 2, 3, 3, 3, 8, testSrc, 0);\n      expect(colorSpace.getRgb(new Float32Array([0.2]), 0)).toEqual(new Uint8ClampedArray([51, 51, 51]));\n      expect(colorSpace.getOutputLength(3, 1)).toEqual(12);\n      expect(colorSpace.isPassthrough(8)).toBeFalsy();\n      expect(testDest).toEqual(expectedDest);\n    });","file":"unit/colorspace_spec.js","skipped":false,"dir":"test"},{"name":"should handle the case when cs is a Name object","suites":["colorspace","DeviceRgbCS"],"line":208,"updatePoint":{"line":208,"column":55,"index":8217},"code":"    it(\"should handle the case when cs is a Name object\", function () {\n      const cs = Name.get(\"DeviceRGB\");\n      const xref = new XRefMock([{\n        ref: Ref.get(10, 0),\n        data: new Dict()\n      }]);\n      const resources = new Dict();\n      const pdfFunctionFactory = new PDFFunctionFactory({\n        xref\n      });\n      const colorSpace = ColorSpace.parse({\n        cs,\n        xref,\n        resources,\n        pdfFunctionFactory,\n        localColorSpaceCache: new LocalColorSpaceCache()\n      });\n\n      // prettier-ignore\n      const testSrc = new Uint8Array([27, 125, 250, 131, 139, 140, 111, 25, 198, 21, 147, 255]);\n      const testDest = new Uint8ClampedArray(4 * 4 * 3);\n      // prettier-ignore\n      const expectedDest = new Uint8ClampedArray([27, 125, 250, 27, 125, 250, 131, 139, 140, 131, 139, 140, 27, 125, 250, 27, 125, 250, 131, 139, 140, 131, 139, 140, 111, 25, 198, 111, 25, 198, 21, 147, 255, 21, 147, 255, 111, 25, 198, 111, 25, 198, 21, 147, 255, 21, 147, 255]);\n      colorSpace.fillRgb(testDest, 2, 2, 4, 4, 4, 8, testSrc, 0);\n      expect(colorSpace.getRgb(new Float32Array([0.1, 0.2, 0.3]), 0)).toEqual(new Uint8ClampedArray([26, 51, 77]));\n      expect(colorSpace.getOutputLength(4, 0)).toEqual(4);\n      expect(colorSpace.isPassthrough(8)).toBeTruthy();\n      expect(testDest).toEqual(expectedDest);\n    });","file":"unit/colorspace_spec.js","skipped":false,"dir":"test"},{"name":"should handle the case when cs is an indirect object","suites":["colorspace","DeviceRgbCS"],"line":237,"updatePoint":{"line":237,"column":60,"index":9571},"code":"    it(\"should handle the case when cs is an indirect object\", function () {\n      const cs = Ref.get(10, 0);\n      const xref = new XRefMock([{\n        ref: cs,\n        data: Name.get(\"DeviceRGB\")\n      }]);\n      const resources = new Dict();\n      const pdfFunctionFactory = new PDFFunctionFactory({\n        xref\n      });\n      const colorSpace = ColorSpace.parse({\n        cs,\n        xref,\n        resources,\n        pdfFunctionFactory,\n        localColorSpaceCache: new LocalColorSpaceCache()\n      });\n\n      // prettier-ignore\n      const testSrc = new Uint8Array([27, 125, 250, 131, 139, 140, 111, 25, 198, 21, 147, 255]);\n      const testDest = new Uint8ClampedArray(3 * 3 * 3);\n      // prettier-ignore\n      const expectedDest = new Uint8ClampedArray([27, 125, 250, 27, 125, 250, 131, 139, 140, 27, 125, 250, 27, 125, 250, 131, 139, 140, 111, 25, 198, 111, 25, 198, 21, 147, 255]);\n      colorSpace.fillRgb(testDest, 2, 2, 3, 3, 3, 8, testSrc, 0);\n      expect(colorSpace.getRgb(new Float32Array([0.1, 0.2, 0.3]), 0)).toEqual(new Uint8ClampedArray([26, 51, 77]));\n      expect(colorSpace.getOutputLength(4, 1)).toEqual(5);\n      expect(colorSpace.isPassthrough(8)).toBeTruthy();\n      expect(testDest).toEqual(expectedDest);\n    });","file":"unit/colorspace_spec.js","skipped":false,"dir":"test"},{"name":"should handle the case when cs is a Name object","suites":["colorspace","DeviceCmykCS"],"line":268,"updatePoint":{"line":268,"column":55,"index":10859},"code":"    it(\"should handle the case when cs is a Name object\", function () {\n      const cs = Name.get(\"DeviceCMYK\");\n      const xref = new XRefMock([{\n        ref: Ref.get(10, 0),\n        data: new Dict()\n      }]);\n      const resources = new Dict();\n      const pdfFunctionFactory = new PDFFunctionFactory({\n        xref\n      });\n      const colorSpace = ColorSpace.parse({\n        cs,\n        xref,\n        resources,\n        pdfFunctionFactory,\n        localColorSpaceCache: new LocalColorSpaceCache()\n      });\n\n      // prettier-ignore\n      const testSrc = new Uint8Array([27, 125, 250, 128, 131, 139, 140, 45, 111, 25, 198, 78, 21, 147, 255, 69]);\n      const testDest = new Uint8ClampedArray(4 * 4 * 3);\n      // prettier-ignore\n      const expectedDest = new Uint8ClampedArray([135, 81, 18, 135, 81, 18, 114, 102, 97, 114, 102, 97, 135, 81, 18, 135, 81, 18, 114, 102, 97, 114, 102, 97, 112, 144, 75, 112, 144, 75, 188, 98, 27, 188, 98, 27, 112, 144, 75, 112, 144, 75, 188, 98, 27, 188, 98, 27]);\n      colorSpace.fillRgb(testDest, 2, 2, 4, 4, 4, 8, testSrc, 0);\n      expect(colorSpace.getRgb(new Float32Array([0.1, 0.2, 0.3, 1]), 0)).toEqual(new Uint8ClampedArray([32, 28, 21]));\n      expect(colorSpace.getOutputLength(4, 0)).toEqual(3);\n      expect(colorSpace.isPassthrough(8)).toBeFalsy();\n      expect(testDest).toEqual(expectedDest);\n    });","file":"unit/colorspace_spec.js","skipped":false,"dir":"test"},{"name":"should handle the case when cs is an indirect object","suites":["colorspace","DeviceCmykCS"],"line":297,"updatePoint":{"line":297,"column":60,"index":12221},"code":"    it(\"should handle the case when cs is an indirect object\", function () {\n      const cs = Ref.get(10, 0);\n      const xref = new XRefMock([{\n        ref: cs,\n        data: Name.get(\"DeviceCMYK\")\n      }]);\n      const resources = new Dict();\n      const pdfFunctionFactory = new PDFFunctionFactory({\n        xref\n      });\n      const colorSpace = ColorSpace.parse({\n        cs,\n        xref,\n        resources,\n        pdfFunctionFactory,\n        localColorSpaceCache: new LocalColorSpaceCache()\n      });\n\n      // prettier-ignore\n      const testSrc = new Uint8Array([27, 125, 250, 128, 131, 139, 140, 45, 111, 25, 198, 78, 21, 147, 255, 69]);\n      const testDest = new Uint8ClampedArray(3 * 3 * 3);\n      // prettier-ignore\n      const expectedDest = new Uint8ClampedArray([135, 81, 18, 135, 81, 18, 114, 102, 97, 135, 81, 18, 135, 81, 18, 114, 102, 97, 112, 144, 75, 112, 144, 75, 188, 98, 27]);\n      colorSpace.fillRgb(testDest, 2, 2, 3, 3, 3, 8, testSrc, 0);\n      expect(colorSpace.getRgb(new Float32Array([0.1, 0.2, 0.3, 1]), 0)).toEqual(new Uint8ClampedArray([32, 28, 21]));\n      expect(colorSpace.getOutputLength(4, 1)).toEqual(4);\n      expect(colorSpace.isPassthrough(8)).toBeFalsy();\n      expect(testDest).toEqual(expectedDest);\n    });","file":"unit/colorspace_spec.js","skipped":false,"dir":"test"},{"name":"should handle the case when cs is an array","suites":["colorspace","CalGrayCS"],"line":328,"updatePoint":{"line":328,"column":50,"index":13514},"code":"    it(\"should handle the case when cs is an array\", function () {\n      const params = new Dict();\n      params.set(\"WhitePoint\", [1, 1, 1]);\n      params.set(\"BlackPoint\", [0, 0, 0]);\n      params.set(\"Gamma\", 2.0);\n      const cs = [Name.get(\"CalGray\"), params];\n      const xref = new XRefMock([{\n        ref: Ref.get(10, 0),\n        data: new Dict()\n      }]);\n      const resources = new Dict();\n      const pdfFunctionFactory = new PDFFunctionFactory({\n        xref\n      });\n      const colorSpace = ColorSpace.parse({\n        cs,\n        xref,\n        resources,\n        pdfFunctionFactory,\n        localColorSpaceCache: new LocalColorSpaceCache()\n      });\n      const testSrc = new Uint8Array([27, 125, 250, 131]);\n      const testDest = new Uint8ClampedArray(4 * 4 * 3);\n      // prettier-ignore\n      const expectedDest = new Uint8ClampedArray([25, 25, 25, 25, 25, 25, 143, 143, 143, 143, 143, 143, 25, 25, 25, 25, 25, 25, 143, 143, 143, 143, 143, 143, 251, 251, 251, 251, 251, 251, 149, 149, 149, 149, 149, 149, 251, 251, 251, 251, 251, 251, 149, 149, 149, 149, 149, 149]);\n      colorSpace.fillRgb(testDest, 2, 2, 4, 4, 4, 8, testSrc, 0);\n      expect(colorSpace.getRgb(new Float32Array([1.0]), 0)).toEqual(new Uint8ClampedArray([255, 255, 255]));\n      expect(colorSpace.getOutputLength(4, 0)).toEqual(12);\n      expect(colorSpace.isPassthrough(8)).toBeFalsy();\n      expect(testDest).toEqual(expectedDest);\n    });","file":"unit/colorspace_spec.js","skipped":false,"dir":"test"},{"name":"should handle the case when cs is an array","suites":["colorspace","CalRGBCS"],"line":361,"updatePoint":{"line":361,"column":50,"index":14989},"code":"    it(\"should handle the case when cs is an array\", function () {\n      const params = new Dict();\n      params.set(\"WhitePoint\", [1, 1, 1]);\n      params.set(\"BlackPoint\", [0, 0, 0]);\n      params.set(\"Gamma\", [1, 1, 1]);\n      params.set(\"Matrix\", [1, 0, 0, 0, 1, 0, 0, 0, 1]);\n      const cs = [Name.get(\"CalRGB\"), params];\n      const xref = new XRefMock([{\n        ref: Ref.get(10, 0),\n        data: new Dict()\n      }]);\n      const resources = new Dict();\n      const pdfFunctionFactory = new PDFFunctionFactory({\n        xref\n      });\n      const colorSpace = ColorSpace.parse({\n        cs,\n        xref,\n        resources,\n        pdfFunctionFactory,\n        localColorSpaceCache: new LocalColorSpaceCache()\n      });\n\n      // prettier-ignore\n      const testSrc = new Uint8Array([27, 125, 250, 131, 139, 140, 111, 25, 198, 21, 147, 255]);\n      const testDest = new Uint8ClampedArray(3 * 3 * 3);\n      // prettier-ignore\n      const expectedDest = new Uint8ClampedArray([0, 238, 255, 0, 238, 255, 185, 196, 195, 0, 238, 255, 0, 238, 255, 185, 196, 195, 235, 0, 243, 235, 0, 243, 0, 255, 255]);\n      colorSpace.fillRgb(testDest, 2, 2, 3, 3, 3, 8, testSrc, 0);\n      expect(colorSpace.getRgb(new Float32Array([0.1, 0.2, 0.3]), 0)).toEqual(new Uint8ClampedArray([0, 147, 151]));\n      expect(colorSpace.getOutputLength(4, 0)).toEqual(4);\n      expect(colorSpace.isPassthrough(8)).toBeFalsy();\n      expect(testDest).toEqual(expectedDest);\n    });","file":"unit/colorspace_spec.js","skipped":false,"dir":"test"},{"name":"should handle the case when cs is an array","suites":["colorspace","LabCS"],"line":397,"updatePoint":{"line":397,"column":50,"index":16487},"code":"    it(\"should handle the case when cs is an array\", function () {\n      const params = new Dict();\n      params.set(\"WhitePoint\", [1, 1, 1]);\n      params.set(\"BlackPoint\", [0, 0, 0]);\n      params.set(\"Range\", [-100, 100, -100, 100]);\n      const cs = [Name.get(\"Lab\"), params];\n      const xref = new XRefMock([{\n        ref: Ref.get(10, 0),\n        data: new Dict()\n      }]);\n      const resources = new Dict();\n      const pdfFunctionFactory = new PDFFunctionFactory({\n        xref\n      });\n      const colorSpace = ColorSpace.parse({\n        cs,\n        xref,\n        resources,\n        pdfFunctionFactory,\n        localColorSpaceCache: new LocalColorSpaceCache()\n      });\n\n      // prettier-ignore\n      const testSrc = new Uint8Array([27, 25, 50, 31, 19, 40, 11, 25, 98, 21, 47, 55]);\n      const testDest = new Uint8ClampedArray(3 * 3 * 3);\n      // prettier-ignore\n      const expectedDest = new Uint8ClampedArray([0, 49, 101, 0, 49, 101, 0, 53, 117, 0, 49, 101, 0, 49, 101, 0, 53, 117, 0, 41, 40, 0, 41, 40, 0, 43, 90]);\n      colorSpace.fillRgb(testDest, 2, 2, 3, 3, 3, 8, testSrc, 0);\n      expect(colorSpace.getRgb([55, 25, 35], 0)).toEqual(new Uint8ClampedArray([188, 100, 61]));\n      expect(colorSpace.getOutputLength(4, 0)).toEqual(4);\n      expect(colorSpace.isPassthrough(8)).toBeFalsy();\n      expect(colorSpace.isDefaultDecode([0, 1])).toBeTruthy();\n      expect(testDest).toEqual(expectedDest);\n    });","file":"unit/colorspace_spec.js","skipped":false,"dir":"test"},{"name":"should handle the case when cs is an array","suites":["colorspace","IndexedCS"],"line":433,"updatePoint":{"line":433,"column":50,"index":17960},"code":"    it(\"should handle the case when cs is an array\", function () {\n      // prettier-ignore\n      const lookup = new Stream(new Uint8Array([23, 155, 35, 147, 69, 93, 255, 109, 70]));\n      const cs = [Name.get(\"Indexed\"), Name.get(\"DeviceRGB\"), 2, lookup];\n      const xref = new XRefMock([{\n        ref: Ref.get(10, 0),\n        data: new Dict()\n      }]);\n      const resources = new Dict();\n      const pdfFunctionFactory = new PDFFunctionFactory({\n        xref\n      });\n      const colorSpace = ColorSpace.parse({\n        cs,\n        xref,\n        resources,\n        pdfFunctionFactory,\n        localColorSpaceCache: new LocalColorSpaceCache()\n      });\n      const testSrc = new Uint8Array([2, 2, 0, 1]);\n      const testDest = new Uint8ClampedArray(3 * 3 * 3);\n      // prettier-ignore\n      const expectedDest = new Uint8ClampedArray([255, 109, 70, 255, 109, 70, 255, 109, 70, 255, 109, 70, 255, 109, 70, 255, 109, 70, 23, 155, 35, 23, 155, 35, 147, 69, 93]);\n      colorSpace.fillRgb(testDest, 2, 2, 3, 3, 3, 8, testSrc, 0);\n      expect(colorSpace.getRgb([2], 0)).toEqual(new Uint8ClampedArray([255, 109, 70]));\n      expect(colorSpace.isPassthrough(8)).toBeFalsy();\n      expect(colorSpace.isDefaultDecode([0, 1], 1)).toBeTruthy();\n      expect(testDest).toEqual(expectedDest);\n    });","file":"unit/colorspace_spec.js","skipped":false,"dir":"test"},{"name":"should handle the case when cs is an array","suites":["colorspace","AlternateCS"],"line":464,"updatePoint":{"line":464,"column":50,"index":19302},"code":"    it(\"should handle the case when cs is an array\", function () {\n      const fnDict = new Dict();\n      fnDict.set(\"FunctionType\", 4);\n      fnDict.set(\"Domain\", [0.0, 1.0]);\n      fnDict.set(\"Range\", [0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0]);\n      fnDict.set(\"Length\", 58);\n      let fn = new StringStream(\"{ dup 0.84 mul \" + \"exch 0.00 exch \" + \"dup 0.44 mul \" + \"exch 0.21 mul }\");\n      fn = new Stream(fn.bytes, 0, 58, fnDict);\n      const fnRef = Ref.get(10, 0);\n      const cs = [Name.get(\"Separation\"), Name.get(\"LogoGreen\"), Name.get(\"DeviceCMYK\"), fnRef];\n      const xref = new XRefMock([{\n        ref: fnRef,\n        data: fn\n      }]);\n      const resources = new Dict();\n      const pdfFunctionFactory = new PDFFunctionFactory({\n        xref\n      });\n      const colorSpace = ColorSpace.parse({\n        cs,\n        xref,\n        resources,\n        pdfFunctionFactory,\n        localColorSpaceCache: new LocalColorSpaceCache()\n      });\n      const testSrc = new Uint8Array([27, 25, 50, 31]);\n      const testDest = new Uint8ClampedArray(3 * 3 * 3);\n      // prettier-ignore\n      const expectedDest = new Uint8ClampedArray([226, 242, 241, 226, 242, 241, 229, 244, 242, 226, 242, 241, 226, 242, 241, 229, 244, 242, 203, 232, 229, 203, 232, 229, 222, 241, 238]);\n      colorSpace.fillRgb(testDest, 2, 2, 3, 3, 3, 8, testSrc, 0);\n      expect(colorSpace.getRgb([0.1], 0)).toEqual(new Uint8ClampedArray([228, 243, 242]));\n      expect(colorSpace.isPassthrough(8)).toBeFalsy();\n      expect(colorSpace.isDefaultDecode([0, 1])).toBeTruthy();\n      expect(testDest).toEqual(expectedDest);\n    });","file":"unit/colorspace_spec.js","skipped":false,"dir":"test"},{"name":"handles zero ArrayBuffers","suites":["core_utils","arrayBuffersToBytes"],"line":21,"updatePoint":{"line":21,"column":33,"index":1113},"code":"    it(\"handles zero ArrayBuffers\", function () {\n      const bytes = arrayBuffersToBytes([]);\n      expect(bytes).toEqual(new Uint8Array(0));\n    });","file":"unit/core_utils_spec.js","skipped":false,"dir":"test"},{"name":"handles one ArrayBuffer","suites":["core_utils","arrayBuffersToBytes"],"line":25,"updatePoint":{"line":25,"column":31,"index":1262},"code":"    it(\"handles one ArrayBuffer\", function () {\n      const buffer = new Uint8Array([1, 2, 3]).buffer;\n      const bytes = arrayBuffersToBytes([buffer]);\n      expect(bytes).toEqual(new Uint8Array([1, 2, 3]));\n      // Ensure that the fast-path works correctly.\n      expect(bytes.buffer).toBe(buffer);\n    });","file":"unit/core_utils_spec.js","skipped":false,"dir":"test"},{"name":"handles multiple ArrayBuffers","suites":["core_utils","arrayBuffersToBytes"],"line":32,"updatePoint":{"line":32,"column":37,"index":1579},"code":"    it(\"handles multiple ArrayBuffers\", function () {\n      const buffer1 = new Uint8Array([1, 2, 3]).buffer,\n        buffer2 = new Uint8Array(0).buffer,\n        buffer3 = new Uint8Array([4, 5]).buffer;\n      const bytes = arrayBuffersToBytes([buffer1, buffer2, buffer3]);\n      expect(bytes).toEqual(new Uint8Array([1, 2, 3, 4, 5]));\n    });","file":"unit/core_utils_spec.js","skipped":false,"dir":"test"},{"name":"handles non-dictionary arguments","suites":["core_utils","getInheritableProperty"],"line":41,"updatePoint":{"line":41,"column":40,"index":1982},"code":"    it(\"handles non-dictionary arguments\", function () {\n      expect(getInheritableProperty({\n        dict: null,\n        key: \"foo\"\n      })).toEqual(undefined);\n      expect(getInheritableProperty({\n        dict: undefined,\n        key: \"foo\"\n      })).toEqual(undefined);\n    });","file":"unit/core_utils_spec.js","skipped":false,"dir":"test"},{"name":"handles dictionaries that do not contain the property","suites":["core_utils","getInheritableProperty"],"line":51,"updatePoint":{"line":51,"column":61,"index":2287},"code":"    it(\"handles dictionaries that do not contain the property\", function () {\n      // Empty dictionary.\n      const emptyDict = new Dict();\n      expect(getInheritableProperty({\n        dict: emptyDict,\n        key: \"foo\"\n      })).toEqual(undefined);\n\n      // Filled dictionary with a different property.\n      const filledDict = new Dict();\n      filledDict.set(\"bar\", \"baz\");\n      expect(getInheritableProperty({\n        dict: filledDict,\n        key: \"foo\"\n      })).toEqual(undefined);\n    });","file":"unit/core_utils_spec.js","skipped":false,"dir":"test"},{"name":"fetches the property if it is not inherited","suites":["core_utils","getInheritableProperty"],"line":67,"updatePoint":{"line":67,"column":51,"index":2779},"code":"    it(\"fetches the property if it is not inherited\", function () {\n      const ref = Ref.get(10, 0);\n      const xref = new XRefMock([{\n        ref,\n        data: \"quux\"\n      }]);\n      const dict = new Dict(xref);\n\n      // Regular values should be fetched.\n      dict.set(\"foo\", \"bar\");\n      expect(getInheritableProperty({\n        dict,\n        key: \"foo\"\n      })).toEqual(\"bar\");\n\n      // Array value should be fetched (with references resolved).\n      dict.set(\"baz\", [\"qux\", ref]);\n      expect(getInheritableProperty({\n        dict,\n        key: \"baz\",\n        getArray: true\n      })).toEqual([\"qux\", \"quux\"]);\n    });","file":"unit/core_utils_spec.js","skipped":false,"dir":"test"},{"name":"fetches the property if it is inherited and present on one level","suites":["core_utils","getInheritableProperty"],"line":90,"updatePoint":{"line":90,"column":72,"index":3432},"code":"    it(\"fetches the property if it is inherited and present on one level\", function () {\n      const ref = Ref.get(10, 0);\n      const xref = new XRefMock([{\n        ref,\n        data: \"quux\"\n      }]);\n      const firstDict = new Dict(xref);\n      const secondDict = new Dict(xref);\n      firstDict.set(\"Parent\", secondDict);\n\n      // Regular values should be fetched.\n      secondDict.set(\"foo\", \"bar\");\n      expect(getInheritableProperty({\n        dict: firstDict,\n        key: \"foo\"\n      })).toEqual(\"bar\");\n\n      // Array value should be fetched (with references resolved).\n      secondDict.set(\"baz\", [\"qux\", ref]);\n      expect(getInheritableProperty({\n        dict: firstDict,\n        key: \"baz\",\n        getArray: true\n      })).toEqual([\"qux\", \"quux\"]);\n    });","file":"unit/core_utils_spec.js","skipped":false,"dir":"test"},{"name":"fetches the property if it is inherited and present on multiple levels","suites":["core_utils","getInheritableProperty"],"line":115,"updatePoint":{"line":115,"column":78,"index":4214},"code":"    it(\"fetches the property if it is inherited and present on multiple levels\", function () {\n      const ref = Ref.get(10, 0);\n      const xref = new XRefMock([{\n        ref,\n        data: \"quux\"\n      }]);\n      const firstDict = new Dict(xref);\n      const secondDict = new Dict(xref);\n      firstDict.set(\"Parent\", secondDict);\n\n      // Regular values should be fetched.\n      firstDict.set(\"foo\", \"bar1\");\n      secondDict.set(\"foo\", \"bar2\");\n      expect(getInheritableProperty({\n        dict: firstDict,\n        key: \"foo\"\n      })).toEqual(\"bar1\");\n      expect(getInheritableProperty({\n        dict: firstDict,\n        key: \"foo\",\n        getArray: false,\n        stopWhenFound: false\n      })).toEqual([\"bar1\", \"bar2\"]);\n\n      // Array value should be fetched (with references resolved).\n      firstDict.set(\"baz\", [\"qux1\", ref]);\n      secondDict.set(\"baz\", [\"qux2\", ref]);\n      expect(getInheritableProperty({\n        dict: firstDict,\n        key: \"baz\",\n        getArray: true,\n        stopWhenFound: false\n      })).toEqual([[\"qux1\", \"quux\"], [\"qux2\", \"quux\"]]);\n    });","file":"unit/core_utils_spec.js","skipped":false,"dir":"test"},{"name":"handles invalid arguments","suites":["core_utils","toRomanNumerals"],"line":151,"updatePoint":{"line":151,"column":33,"index":5308},"code":"    it(\"handles invalid arguments\", function () {\n      for (const input of [\"foo\", -1, 0]) {\n        expect(function () {\n          toRomanNumerals(input);\n        }).toThrow(new Error(\"The number should be a positive integer.\"));\n      }\n    });","file":"unit/core_utils_spec.js","skipped":false,"dir":"test"},{"name":"converts numbers to uppercase Roman numerals","suites":["core_utils","toRomanNumerals"],"line":158,"updatePoint":{"line":158,"column":52,"index":5575},"code":"    it(\"converts numbers to uppercase Roman numerals\", function () {\n      expect(toRomanNumerals(1)).toEqual(\"I\");\n      expect(toRomanNumerals(6)).toEqual(\"VI\");\n      expect(toRomanNumerals(7)).toEqual(\"VII\");\n      expect(toRomanNumerals(8)).toEqual(\"VIII\");\n      expect(toRomanNumerals(10)).toEqual(\"X\");\n      expect(toRomanNumerals(40)).toEqual(\"XL\");\n      expect(toRomanNumerals(100)).toEqual(\"C\");\n      expect(toRomanNumerals(500)).toEqual(\"D\");\n      expect(toRomanNumerals(1000)).toEqual(\"M\");\n      expect(toRomanNumerals(2019)).toEqual(\"MMXIX\");\n    });","file":"unit/core_utils_spec.js","skipped":false,"dir":"test"},{"name":"converts numbers to lowercase Roman numerals","suites":["core_utils","toRomanNumerals"],"line":170,"updatePoint":{"line":170,"column":52,"index":6145},"code":"    it(\"converts numbers to lowercase Roman numerals\", function () {\n      expect(toRomanNumerals(1, /* lowercase = */true)).toEqual(\"i\");\n      expect(toRomanNumerals(6, /* lowercase = */true)).toEqual(\"vi\");\n      expect(toRomanNumerals(7, /* lowercase = */true)).toEqual(\"vii\");\n      expect(toRomanNumerals(8, /* lowercase = */true)).toEqual(\"viii\");\n      expect(toRomanNumerals(10, /* lowercase = */true)).toEqual(\"x\");\n      expect(toRomanNumerals(40, /* lowercase = */true)).toEqual(\"xl\");\n      expect(toRomanNumerals(100, /* lowercase = */true)).toEqual(\"c\");\n      expect(toRomanNumerals(500, /* lowercase = */true)).toEqual(\"d\");\n      expect(toRomanNumerals(1000, /* lowercase = */true)).toEqual(\"m\");\n      expect(toRomanNumerals(2019, /* lowercase = */true)).toEqual(\"mmxix\");\n    });","file":"unit/core_utils_spec.js","skipped":false,"dir":"test"},{"name":"handles values smaller than/equal to zero","suites":["core_utils","log2"],"line":184,"updatePoint":{"line":184,"column":49,"index":6981},"code":"    it(\"handles values smaller than/equal to zero\", function () {\n      expect(log2(0)).toEqual(0);\n      expect(log2(-1)).toEqual(0);\n    });","file":"unit/core_utils_spec.js","skipped":false,"dir":"test"},{"name":"handles values larger than zero","suites":["core_utils","log2"],"line":188,"updatePoint":{"line":188,"column":39,"index":7114},"code":"    it(\"handles values larger than zero\", function () {\n      expect(log2(1)).toEqual(0);\n      expect(log2(2)).toEqual(1);\n      expect(log2(3)).toEqual(2);\n      expect(log2(3.14)).toEqual(2);\n    });","file":"unit/core_utils_spec.js","skipped":false,"dir":"test"},{"name":"should stringify integers","suites":["core_utils","numberToString"],"line":196,"updatePoint":{"line":196,"column":33,"index":7360},"code":"    it(\"should stringify integers\", function () {\n      expect(numberToString(1)).toEqual(\"1\");\n      expect(numberToString(0)).toEqual(\"0\");\n      expect(numberToString(-1)).toEqual(\"-1\");\n    });","file":"unit/core_utils_spec.js","skipped":false,"dir":"test"},{"name":"should stringify floats","suites":["core_utils","numberToString"],"line":201,"updatePoint":{"line":201,"column":31,"index":7556},"code":"    it(\"should stringify floats\", function () {\n      expect(numberToString(1.0)).toEqual(\"1\");\n      expect(numberToString(1.2)).toEqual(\"1.2\");\n      expect(numberToString(1.23)).toEqual(\"1.23\");\n      expect(numberToString(1.234)).toEqual(\"1.23\");\n    });","file":"unit/core_utils_spec.js","skipped":false,"dir":"test"},{"name":"handles space characters","suites":["core_utils","isWhiteSpace"],"line":209,"updatePoint":{"line":209,"column":32,"index":7863},"code":"    it(\"handles space characters\", function () {\n      expect(isWhiteSpace(0x20)).toEqual(true);\n      expect(isWhiteSpace(0x09)).toEqual(true);\n      expect(isWhiteSpace(0x0d)).toEqual(true);\n      expect(isWhiteSpace(0x0a)).toEqual(true);\n    });","file":"unit/core_utils_spec.js","skipped":false,"dir":"test"},{"name":"handles non-space characters","suites":["core_utils","isWhiteSpace"],"line":215,"updatePoint":{"line":215,"column":36,"index":8116},"code":"    it(\"handles non-space characters\", function () {\n      expect(isWhiteSpace(0x0b)).toEqual(false);\n      expect(isWhiteSpace(null)).toEqual(false);\n      expect(isWhiteSpace(undefined)).toEqual(false);\n    });","file":"unit/core_utils_spec.js","skipped":false,"dir":"test"},{"name":"should get a correctly parsed path","suites":["core_utils","parseXFAPath"],"line":222,"updatePoint":{"line":222,"column":42,"index":8382},"code":"    it(\"should get a correctly parsed path\", function () {\n      const path = \"foo.bar[12].oof[3].rab.FOO[123].BAR[456]\";\n      expect(parseXFAPath(path)).toEqual([{\n        name: \"foo\",\n        pos: 0\n      }, {\n        name: \"bar\",\n        pos: 12\n      }, {\n        name: \"oof\",\n        pos: 3\n      }, {\n        name: \"rab\",\n        pos: 0\n      }, {\n        name: \"FOO\",\n        pos: 123\n      }, {\n        name: \"BAR\",\n        pos: 456\n      }]);\n    });","file":"unit/core_utils_spec.js","skipped":false,"dir":"test"},{"name":"should get valid URLs without `newWindow` property","suites":["core_utils","recoverJsURL"],"line":246,"updatePoint":{"line":246,"column":58,"index":8906},"code":"    it(\"should get valid URLs without `newWindow` property\", function () {\n      const inputs = [\"window.open('https://test.local')\", \"window.open('https://test.local', true)\", \"app.launchURL('https://test.local')\", \"app.launchURL('https://test.local', false)\", \"xfa.host.gotoURL('https://test.local')\", \"xfa.host.gotoURL('https://test.local', true)\"];\n      for (const input of inputs) {\n        expect(recoverJsURL(input)).toEqual({\n          url: \"https://test.local\",\n          newWindow: false\n        });\n      }\n    });","file":"unit/core_utils_spec.js","skipped":false,"dir":"test"},{"name":"should get valid URLs with `newWindow` property","suites":["core_utils","recoverJsURL"],"line":255,"updatePoint":{"line":255,"column":55,"index":9430},"code":"    it(\"should get valid URLs with `newWindow` property\", function () {\n      const input = \"app.launchURL('https://test.local', true)\";\n      expect(recoverJsURL(input)).toEqual({\n        url: \"https://test.local\",\n        newWindow: true\n      });\n    });","file":"unit/core_utils_spec.js","skipped":false,"dir":"test"},{"name":"should not get invalid URLs","suites":["core_utils","recoverJsURL"],"line":262,"updatePoint":{"line":262,"column":35,"index":9668},"code":"    it(\"should not get invalid URLs\", function () {\n      const input = \"navigateToUrl('https://test.local')\";\n      expect(recoverJsURL(input)).toBeNull();\n    });","file":"unit/core_utils_spec.js","skipped":false,"dir":"test"},{"name":"should escape PDF name","suites":["core_utils","escapePDFName"],"line":268,"updatePoint":{"line":268,"column":30,"index":9876},"code":"    it(\"should escape PDF name\", function () {\n      expect(escapePDFName(\"hello\")).toEqual(\"hello\");\n      expect(escapePDFName(\"\\xfehello\")).toEqual(\"#fehello\");\n      expect(escapePDFName(\"he\\xfell\\xffo\")).toEqual(\"he#fell#ffo\");\n      expect(escapePDFName(\"\\xfehe\\xfell\\xffo\\xff\")).toEqual(\"#fehe#fell#ffo#ff\");\n      expect(escapePDFName(\"#h#e#l#l#o\")).toEqual(\"#23h#23e#23l#23l#23o\");\n      expect(escapePDFName(\"#()<>[]{}/%\")).toEqual(\"#23#28#29#3c#3e#5b#5d#7b#7d#2f#25\");\n    });","file":"unit/core_utils_spec.js","skipped":false,"dir":"test"},{"name":"should escape (, ), \\n, \\r, and \\","suites":["core_utils","escapeString"],"line":278,"updatePoint":{"line":278,"column":44,"index":10425},"code":"    it(\"should escape (, ), \\\\n, \\\\r, and \\\\\", function () {\n      expect(escapeString(\"((a\\\\a))\\n(b(b\\\\b)\\rb)\")).toEqual(\"\\\\(\\\\(a\\\\\\\\a\\\\)\\\\)\\\\n\\\\(b\\\\(b\\\\\\\\b\\\\)\\\\rb\\\\)\");\n    });","file":"unit/core_utils_spec.js","skipped":false,"dir":"test"},{"name":"should get a correctly encoded string with some entities","suites":["core_utils","encodeToXmlString"],"line":283,"updatePoint":{"line":283,"column":64,"index":10676},"code":"    it(\"should get a correctly encoded string with some entities\", function () {\n      const str = \"\\\"\\u0397ell😂' & <W😂rld>\";\n      expect(encodeToXmlString(str)).toEqual(\"&quot;&#x397;ell&#x1F602;&apos; &amp; &lt;W&#x1F602;rld&gt;\");\n    });","file":"unit/core_utils_spec.js","skipped":false,"dir":"test"},{"name":"should get a correctly encoded basic ascii string","suites":["core_utils","encodeToXmlString"],"line":287,"updatePoint":{"line":287,"column":57,"index":10914},"code":"    it(\"should get a correctly encoded basic ascii string\", function () {\n      const str = \"hello world\";\n      expect(encodeToXmlString(str)).toEqual(str);\n    });","file":"unit/core_utils_spec.js","skipped":false,"dir":"test"},{"name":"Check font family","suites":["core_utils","validateCSSFont"],"line":293,"updatePoint":{"line":293,"column":25,"index":11098},"code":"    it(\"Check font family\", function () {\n      const cssFontInfo = {\n        fontFamily: `\"blah blah \" blah blah\"`,\n        fontWeight: 0,\n        italicAngle: 0\n      };\n      expect(validateCSSFont(cssFontInfo)).toEqual(false);\n      cssFontInfo.fontFamily = `\"blah blah \\\\\" blah blah\"`;\n      expect(validateCSSFont(cssFontInfo)).toEqual(true);\n      cssFontInfo.fontFamily = `'blah blah ' blah blah'`;\n      expect(validateCSSFont(cssFontInfo)).toEqual(false);\n      cssFontInfo.fontFamily = `'blah blah \\\\' blah blah'`;\n      expect(validateCSSFont(cssFontInfo)).toEqual(true);\n      cssFontInfo.fontFamily = `\"blah blah `;\n      expect(validateCSSFont(cssFontInfo)).toEqual(false);\n      cssFontInfo.fontFamily = `blah blah\"`;\n      expect(validateCSSFont(cssFontInfo)).toEqual(false);\n      cssFontInfo.fontFamily = `'blah blah `;\n      expect(validateCSSFont(cssFontInfo)).toEqual(false);\n      cssFontInfo.fontFamily = `blah blah'`;\n      expect(validateCSSFont(cssFontInfo)).toEqual(false);\n      cssFontInfo.fontFamily = \"blah blah blah\";\n      expect(validateCSSFont(cssFontInfo)).toEqual(true);\n      cssFontInfo.fontFamily = \"blah 0blah blah\";\n      expect(validateCSSFont(cssFontInfo)).toEqual(false);\n      cssFontInfo.fontFamily = \"blah blah -0blah\";\n      expect(validateCSSFont(cssFontInfo)).toEqual(false);\n      cssFontInfo.fontFamily = \"blah blah --blah\";\n      expect(validateCSSFont(cssFontInfo)).toEqual(false);\n      cssFontInfo.fontFamily = \"blah blah -blah\";\n      expect(validateCSSFont(cssFontInfo)).toEqual(true);\n      cssFontInfo.fontFamily = \"blah fdqAJqjHJK23kl23__--Kj blah\";\n      expect(validateCSSFont(cssFontInfo)).toEqual(true);\n      cssFontInfo.fontFamily = \"blah fdqAJqjH$JK23kl23__--Kj blah\";\n      expect(validateCSSFont(cssFontInfo)).toEqual(false);\n    });","file":"unit/core_utils_spec.js","skipped":false,"dir":"test"},{"name":"Check font weight","suites":["core_utils","validateCSSFont"],"line":329,"updatePoint":{"line":329,"column":25,"index":12904},"code":"    it(\"Check font weight\", function () {\n      const cssFontInfo = {\n        fontFamily: \"blah\",\n        fontWeight: 100,\n        italicAngle: 0\n      };\n      validateCSSFont(cssFontInfo);\n      expect(cssFontInfo.fontWeight).toEqual(\"100\");\n      cssFontInfo.fontWeight = \"700\";\n      validateCSSFont(cssFontInfo);\n      expect(cssFontInfo.fontWeight).toEqual(\"700\");\n      cssFontInfo.fontWeight = \"normal\";\n      validateCSSFont(cssFontInfo);\n      expect(cssFontInfo.fontWeight).toEqual(\"normal\");\n      cssFontInfo.fontWeight = 314;\n      validateCSSFont(cssFontInfo);\n      expect(cssFontInfo.fontWeight).toEqual(\"400\");\n    });","file":"unit/core_utils_spec.js","skipped":false,"dir":"test"},{"name":"Check italic angle","suites":["core_utils","validateCSSFont"],"line":347,"updatePoint":{"line":347,"column":26,"index":13542},"code":"    it(\"Check italic angle\", function () {\n      const cssFontInfo = {\n        fontFamily: \"blah\",\n        fontWeight: 100,\n        italicAngle: 10\n      };\n      validateCSSFont(cssFontInfo);\n      expect(cssFontInfo.italicAngle).toEqual(\"10\");\n      cssFontInfo.italicAngle = -123;\n      validateCSSFont(cssFontInfo);\n      expect(cssFontInfo.italicAngle).toEqual(\"14\");\n      cssFontInfo.italicAngle = \"91\";\n      validateCSSFont(cssFontInfo);\n      expect(cssFontInfo.italicAngle).toEqual(\"14\");\n      cssFontInfo.italicAngle = 2.718;\n      validateCSSFont(cssFontInfo);\n      expect(cssFontInfo.italicAngle).toEqual(\"2.718\");\n    });","file":"unit/core_utils_spec.js","skipped":false,"dir":"test"},{"name":"handles ascii/non-ascii strings","suites":["core_utils","isAscii"],"line":367,"updatePoint":{"line":367,"column":39,"index":14236},"code":"    it(\"handles ascii/non-ascii strings\", function () {\n      expect(isAscii(\"hello world\")).toEqual(true);\n      expect(isAscii(\"こんにちは世界の\")).toEqual(false);\n      expect(isAscii(\"hello world in Japanese is こんにちは世界の\")).toEqual(false);\n    });","file":"unit/core_utils_spec.js","skipped":false,"dir":"test"},{"name":"should encode a string in UTF16 hexadecimal format","suites":["core_utils","stringToUTF16HexString"],"line":374,"updatePoint":{"line":374,"column":58,"index":14555},"code":"    it(\"should encode a string in UTF16 hexadecimal format\", function () {\n      expect(stringToUTF16HexString(\"hello world\")).toEqual(\"00680065006c006c006f00200077006f0072006c0064\");\n      expect(stringToUTF16HexString(\"こんにちは世界の\")).toEqual(\"30533093306b3061306f4e16754c306e\");\n    });","file":"unit/core_utils_spec.js","skipped":false,"dir":"test"},{"name":"should encode a string in UTF16","suites":["core_utils","stringToUTF16String"],"line":380,"updatePoint":{"line":380,"column":39,"index":14876},"code":"    it(\"should encode a string in UTF16\", function () {\n      expect(stringToUTF16String(\"hello world\")).toEqual(\"\\0h\\0e\\0l\\0l\\0o\\0 \\0w\\0o\\0r\\0l\\0d\");\n      expect(stringToUTF16String(\"こんにちは世界の\")).toEqual(\"\\x30\\x53\\x30\\x93\\x30\\x6b\\x30\\x61\\x30\\x6f\\x4e\\x16\\x75\\x4c\\x30\\x6e\");\n    });","file":"unit/core_utils_spec.js","skipped":false,"dir":"test"},{"name":"should encode a string in UTF16BE with a BOM","suites":["core_utils","stringToUTF16String"],"line":384,"updatePoint":{"line":384,"column":52,"index":15171},"code":"    it(\"should encode a string in UTF16BE with a BOM\", function () {\n      expect(stringToUTF16String(\"hello world\", /* bigEndian = */true)).toEqual(\"\\xfe\\xff\\0h\\0e\\0l\\0l\\0o\\0 \\0w\\0o\\0r\\0l\\0d\");\n      expect(stringToUTF16String(\"こんにちは世界の\", /* bigEndian = */true)).toEqual(\"\\xfe\\xff\\x30\\x53\\x30\\x93\\x30\\x6b\\x30\\x61\\x30\\x6f\\x4e\\x16\\x75\\x4c\\x30\\x6e\");\n    });","file":"unit/core_utils_spec.js","skipped":false,"dir":"test"},{"name":"should pass RFC 1321 test #1","suites":["crypto","calculateMD5"],"line":36,"updatePoint":{"line":36,"column":36,"index":1469},"code":"    it(\"should pass RFC 1321 test #1\", function () {\n      const input = stringToBytes(\"\");\n      const result = calculateMD5(input, 0, input.length);\n      const expected = hex2binary(\"d41d8cd98f00b204e9800998ecf8427e\");\n      expect(result).toEqual(expected);\n    });","file":"unit/crypto_spec.js","skipped":false,"dir":"test"},{"name":"should pass RFC 1321 test #2","suites":["crypto","calculateMD5"],"line":42,"updatePoint":{"line":42,"column":36,"index":1739},"code":"    it(\"should pass RFC 1321 test #2\", function () {\n      const input = stringToBytes(\"a\");\n      const result = calculateMD5(input, 0, input.length);\n      const expected = hex2binary(\"0cc175b9c0f1b6a831c399e269772661\");\n      expect(result).toEqual(expected);\n    });","file":"unit/crypto_spec.js","skipped":false,"dir":"test"},{"name":"should pass RFC 1321 test #3","suites":["crypto","calculateMD5"],"line":48,"updatePoint":{"line":48,"column":36,"index":2010},"code":"    it(\"should pass RFC 1321 test #3\", function () {\n      const input = stringToBytes(\"abc\");\n      const result = calculateMD5(input, 0, input.length);\n      const expected = hex2binary(\"900150983cd24fb0d6963f7d28e17f72\");\n      expect(result).toEqual(expected);\n    });","file":"unit/crypto_spec.js","skipped":false,"dir":"test"},{"name":"should pass RFC 1321 test #4","suites":["crypto","calculateMD5"],"line":54,"updatePoint":{"line":54,"column":36,"index":2283},"code":"    it(\"should pass RFC 1321 test #4\", function () {\n      const input = stringToBytes(\"message digest\");\n      const result = calculateMD5(input, 0, input.length);\n      const expected = hex2binary(\"f96b697d7cb7938d525a2f31aaf161d0\");\n      expect(result).toEqual(expected);\n    });","file":"unit/crypto_spec.js","skipped":false,"dir":"test"},{"name":"should pass RFC 1321 test #5","suites":["crypto","calculateMD5"],"line":60,"updatePoint":{"line":60,"column":36,"index":2567},"code":"    it(\"should pass RFC 1321 test #5\", function () {\n      const input = stringToBytes(\"abcdefghijklmnopqrstuvwxyz\");\n      const result = calculateMD5(input, 0, input.length);\n      const expected = hex2binary(\"c3fcd3d76192e4007dfb496cca67e13b\");\n      expect(result).toEqual(expected);\n    });","file":"unit/crypto_spec.js","skipped":false,"dir":"test"},{"name":"should pass RFC 1321 test #6","suites":["crypto","calculateMD5"],"line":66,"updatePoint":{"line":66,"column":36,"index":2863},"code":"    it(\"should pass RFC 1321 test #6\", function () {\n      const input = stringToBytes(\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\");\n      const result = calculateMD5(input, 0, input.length);\n      const expected = hex2binary(\"d174ab98d277d9f5a5611c2c9f419d9f\");\n      expect(result).toEqual(expected);\n    });","file":"unit/crypto_spec.js","skipped":false,"dir":"test"},{"name":"should pass RFC 1321 test #7","suites":["crypto","calculateMD5"],"line":72,"updatePoint":{"line":72,"column":36,"index":3195},"code":"    it(\"should pass RFC 1321 test #7\", function () {\n      const input = stringToBytes(\"123456789012345678901234567890123456789012345678\" + \"90123456789012345678901234567890\");\n      const result = calculateMD5(input, 0, input.length);\n      const expected = hex2binary(\"57edf4a22be3c955ac49da2e2107b67a\");\n      expect(result).toEqual(expected);\n    });","file":"unit/crypto_spec.js","skipped":false,"dir":"test"},{"name":"should pass test #1","suites":["crypto","ARCFourCipher"],"line":82,"updatePoint":{"line":82,"column":27,"index":3663},"code":"    it(\"should pass test #1\", function () {\n      const key = hex2binary(\"0123456789abcdef\");\n      const input = hex2binary(\"0123456789abcdef\");\n      const cipher = new ARCFourCipher(key);\n      const result = cipher.encryptBlock(input);\n      const expected = hex2binary(\"75b7878099e0c596\");\n      expect(result).toEqual(expected);\n    });","file":"unit/crypto_spec.js","skipped":false,"dir":"test"},{"name":"should pass test #2","suites":["crypto","ARCFourCipher"],"line":90,"updatePoint":{"line":90,"column":27,"index":4006},"code":"    it(\"should pass test #2\", function () {\n      const key = hex2binary(\"0123456789abcdef\");\n      const input = hex2binary(\"0000000000000000\");\n      const cipher = new ARCFourCipher(key);\n      const result = cipher.encryptBlock(input);\n      const expected = hex2binary(\"7494c2e7104b0879\");\n      expect(result).toEqual(expected);\n    });","file":"unit/crypto_spec.js","skipped":false,"dir":"test"},{"name":"should pass test #3","suites":["crypto","ARCFourCipher"],"line":98,"updatePoint":{"line":98,"column":27,"index":4349},"code":"    it(\"should pass test #3\", function () {\n      const key = hex2binary(\"0000000000000000\");\n      const input = hex2binary(\"0000000000000000\");\n      const cipher = new ARCFourCipher(key);\n      const result = cipher.encryptBlock(input);\n      const expected = hex2binary(\"de188941a3375d3a\");\n      expect(result).toEqual(expected);\n    });","file":"unit/crypto_spec.js","skipped":false,"dir":"test"},{"name":"should pass test #4","suites":["crypto","ARCFourCipher"],"line":106,"updatePoint":{"line":106,"column":27,"index":4692},"code":"    it(\"should pass test #4\", function () {\n      const key = hex2binary(\"ef012345\");\n      const input = hex2binary(\"00000000000000000000\");\n      const cipher = new ARCFourCipher(key);\n      const result = cipher.encryptBlock(input);\n      const expected = hex2binary(\"d6a141a7ec3c38dfbd61\");\n      expect(result).toEqual(expected);\n    });","file":"unit/crypto_spec.js","skipped":false,"dir":"test"},{"name":"should pass test #5","suites":["crypto","ARCFourCipher"],"line":114,"updatePoint":{"line":114,"column":27,"index":5035},"code":"    it(\"should pass test #5\", function () {\n      const key = hex2binary(\"0123456789abcdef\");\n      const input = hex2binaryn      const cipher = new ARCFourCipher(key);\n      const result = cipher.encryptBlock(input);\n      const expected = hex2binary(\"7595c3e6114a09780c4ad452338e1ffd9a1be9498f813d76\" + \"533449b6778dcad8c78a8d2ba9ac66085d0e53d59c26c2d1c490c1ebbe0ce66d1b6b\" + \"1b13b6b919b847c25a91447a95e75e4ef16779cde8bf0a95850e32af9689444fd377\" + \"108f98fdcbd4e726567500990bcc7e0ca3c4aaa304a387d20f3b8fbbcd42a1bd311d\" + \"7a4303dda5ab078896ae80c18b0af66dff319616eb784e495ad2ce90d7f772a81747\" + \"b65f62093b1e0db9e5ba532fafec47508323e671327df9444432cb7367cec82f5d44\" + \"c0d00b67d650a075cd4b70dedd77eb9b10231b6b5b741347396d62897421d43df9b4\" + \"2e446e358e9c11a9b2184ecbef0cd8e7a877ef968f1390ec9b3d35a5585cb009290e\" + \"2fcde7b5ec66d9084be44055a619d9dd7fc3166f9487f7cb272912426445998514c1\" + \"5d53a18c864ce3a2b7555793988126520eacf2e3066e230c91bee4dd5304f5fd0405\" + \"b35bd99c73135d3d9bc335ee049ef69b3867bf2d7bd1eaa595d8bfc0066ff8d31509\" + \"eb0c6caa006c807a623ef84c3d33c195d23ee320c40de0558157c822d4b8c569d849\" + \"aed59d4e0fd7f379586b4b7ff684ed6a189f7486d49b9c4bad9ba24b96abf924372c\" + \"8a8fffb10d55354900a77a3db5f205e1b99fcd8660863a159ad4abe40fa48934163d\" + \"dde542a6585540fd683cbfd8c00f12129a284deacc4cdefe58be7137541c047126c8\" + \"d49e2755ab181ab7e940b0c0\");\n      expect(result).toEqual(expected);\n    });","file":"unit/crypto_spec.js","skipped":false,"dir":"test"},{"name":"should pass test #6","suites":["crypto","ARCFourCipher"],"line":122,"updatePoint":{"line":122,"column":27,"index":7544},"code":"    it(\"should pass test #6\", function () {\n      const key = hex2binary(\"fb029e3031323334\");\n      const input = hex2binary(\"aaaa0300000008004500004e661a00008011be640a0001220af\" + \"fffff00890089003a000080a601100001000000000000204543454a4548454346434\" + \"550464545494546464343414341434143414341414100002000011bd0b604\");\n      const cipher = new ARCFourCipher(key);\n      const result = cipher.encryptBlock(input);\n      const expected = hex2binary(\"f69c5806bd6ce84626bcbefb9474650aad1f7909b0f64d5f\" + \"58a503a258b7ed22eb0ea64930d3a056a55742fcce141d485f8aa836dea18df42c53\" + \"80805ad0c61a5d6f58f41040b24b7d1a693856ed0d4398e7aee3bf0e2a2ca8f7\");\n      expect(result).toEqual(expected);\n    });","file":"unit/crypto_spec.js","skipped":false,"dir":"test"},{"name":"should pass test #7","suites":["crypto","ARCFourCipher"],"line":130,"updatePoint":{"line":130,"column":27,"index":8235},"code":"    it(\"should pass test #7\", function () {\n      const key = hex2binary(\"0123456789abcdef\");\n      const input = hex2binary(\"123456789abcdef0123456789abcdef0123456789abcdef012345678\");\n      const cipher = new ARCFourCipher(key);\n      const result = cipher.encryptBlock(input);\n      const expected = hex2binary(\"66a0949f8af7d6891f7f832ba833c00c892ebe30143ce28740011ecf\");\n      expect(result).toEqual(expected);\n    });","file":"unit/crypto_spec.js","skipped":false,"dir":"test"},{"name":"should properly hash abc","suites":["crypto","calculateSHA256"],"line":140,"updatePoint":{"line":140,"column":32,"index":8713},"code":"    it(\"should properly hash abc\", function () {\n      const input = stringToBytes(\"abc\");\n      const result = calculateSHA256(input, 0, input.length);\n      const expected = hex2binary(\"BA7816BF8F01CFEA414140DE5DAE2223B00361A396177A9CB410FF61F20015AD\");\n      expect(result).toEqual(expected);\n    });","file":"unit/crypto_spec.js","skipped":false,"dir":"test"},{"name":"should properly hash a multiblock input","suites":["crypto","calculateSHA256"],"line":146,"updatePoint":{"line":146,"column":47,"index":9032},"code":"    it(\"should properly hash a multiblock input\", function () {\n      const input = stringToBytes(\"abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq\");\n      const result = calculateSHA256(input, 0, input.length);\n      const expected = hex2binary(\"248D6A61D20638B8E5C026930C3E6039A33CE45964FF2167F6ECEDD419DB06C1\");\n      expect(result).toEqual(expected);\n    });","file":"unit/crypto_spec.js","skipped":false,"dir":"test"},{"name":"should properly hash abc","suites":["crypto","calculateSHA384"],"line":154,"updatePoint":{"line":154,"column":32,"index":9439},"code":"    it(\"should properly hash abc\", function () {\n      const input = stringToBytes(\"abc\");\n      const result = calculateSHA384(input, 0, input.length);\n      const expected = hex2binary(\"CB00753F45A35E8BB5A03D699AC65007272C32AB0EDED163\" + \"1A8B605A43FF5BED8086072BA1E7CC2358BAECA134C825A7\");\n      expect(result).toEqual(expected);\n    });","file":"unit/crypto_spec.js","skipped":false,"dir":"test"},{"name":"should properly hash a multiblock input","suites":["crypto","calculateSHA384"],"line":160,"updatePoint":{"line":160,"column":47,"index":9795},"code":"    it(\"should properly hash a multiblock input\", function () {\n      const input = stringToBytes(\"abcdefghbcdefghicdefghijdefghijkefghijklfghijklm\" + \"ghijklmnhijklmnoijklmnopjklmnopqklmnopqrlmnopqrs\" + \"mnopqrstnopqrstu\");\n      const result = calculateSHA384(input, 0, input.length);\n      const expected = hex2binary(\"09330C33F71147E83D192FC782CD1B4753111B173B3B05D2\" + \"2FA08086E3B0F712FCC7C71A557E2DB966C3E9FA91746039\");\n      expect(result).toEqual(expected);\n    });","file":"unit/crypto_spec.js","skipped":false,"dir":"test"},{"name":"should properly hash abc","suites":["crypto","calculateSHA512"],"line":168,"updatePoint":{"line":168,"column":32,"index":10305},"code":"    it(\"should properly hash abc\", function () {\n      const input = stringToBytes(\"abc\");\n      const result = calculateSHA512(input, 0, input.length);\n      const expected = hex2binary(\"DDAF35A193617ABACC417349AE20413112E6FA4E89A97EA2\" + \"0A9EEEE64B55D39A2192992A274FC1A836BA3C23A3FEEBBD\" + \"454D4423643CE80E2A9AC94FA54CA49F\");\n      expect(result).toEqual(expected);\n    });","file":"unit/crypto_spec.js","skipped":false,"dir":"test"},{"name":"should properly hash a multiblock input","suites":["crypto","calculateSHA512"],"line":174,"updatePoint":{"line":174,"column":47,"index":10698},"code":"    it(\"should properly hash a multiblock input\", function () {\n      const input = stringToBytes(\"abcdefghbcdefghicdefghijdefghijkefghijklfghijklm\" + \"ghijklmnhijklmnoijklmnopjklmnopqklmnopqrlmnopqrs\" + \"mnopqrstnopqrstu\");\n      const result = calculateSHA512(input, 0, input.length);\n      const expected = hex2binary(\"8E959B75DAE313DA8CF4F72814FC143F8F7779C6EB9F7FA1\" + \"7299AEADB6889018501D289E4900F7E4331B99DEC4B5433A\" + \"C7D329EEB6DD26545E96E55B874BE909\");\n      expect(result).toEqual(expected);\n    });","file":"unit/crypto_spec.js","skipped":false,"dir":"test"},{"name":"should be able to encrypt a block","suites":["crypto","AES128","Encryption"],"line":183,"updatePoint":{"line":183,"column":43,"index":11288},"code":"      it(\"should be able to encrypt a block\", function () {\n        const input = hex2binary(\"00112233445566778899aabbccddeeff\");\n        const key = hex2binary(\"000102030405060708090a0b0c0d0e0f\");\n        const iv = hex2binary(\"00000000000000000000000000000000\");\n        const cipher = new AES128Cipher(key);\n        const result = cipher.encrypt(input, iv);\n        const expected = hex2binary(\"69c4e0d86a7b0430d8cdb78070b4c55a\");\n        expect(result).toEqual(expected);\n      });","file":"unit/crypto_spec.js","skipped":false,"dir":"test"},{"name":"should be able to decrypt a block with IV in stream","suites":["crypto","AES128","Decryption"],"line":194,"updatePoint":{"line":194,"column":61,"index":11841},"code":"      it(\"should be able to decrypt a block with IV in stream\", function () {\n        const input = hex2binary(\"0000000000000000000000000000000069c4e0d86a7b0430d\" + \"8cdb78070b4c55a\");\n        const key = hex2binary(\"000102030405060708090a0b0c0d0e0f\");\n        const cipher = new AES128Cipher(key);\n        const result = cipher.decryptBlock(input);\n        const expected = hex2binary(\"00112233445566778899aabbccddeeff\");\n        expect(result).toEqual(expected);\n      });","file":"unit/crypto_spec.js","skipped":false,"dir":"test"},{"name":"should be able to encrypt a block","suites":["crypto","AES256","Encryption"],"line":206,"updatePoint":{"line":206,"column":43,"index":12388},"code":"      it(\"should be able to encrypt a block\", function () {\n        const input = hex2binary(\"00112233445566778899aabbccddeeff\");\n        const key = hex2binary(\"000102030405060708090a0b0c0d0e0f101112131415161718\" + \"191a1b1c1d1e1f\");\n        const iv = hex2binary(\"00000000000000000000000000000000\");\n        const cipher = new AES256Cipher(key);\n        const result = cipher.encrypt(input, iv);\n        const expected = hex2binary(\"8ea2b7ca516745bfeafc49904b496089\");\n        expect(result).toEqual(expected);\n      });","file":"unit/crypto_spec.js","skipped":false,"dir":"test"},{"name":"should be able to decrypt a block with specified iv","suites":["crypto","AES256","Decryption"],"line":217,"updatePoint":{"line":217,"column":61,"index":12978},"code":"      it(\"should be able to decrypt a block with specified iv\", function () {\n        const input = hex2binary(\"8ea2b7ca516745bfeafc49904b496089\");\n        const key = hex2binary(\"000102030405060708090a0b0c0d0e0f101112131415161718\" + \"191a1b1c1d1e1f\");\n        const iv = hex2binary(\"00000000000000000000000000000000\");\n        const cipher = new AES256Cipher(key);\n        const result = cipher.decryptBlock(input, false, iv);\n        const expected = hex2binary(\"00112233445566778899aabbccddeeff\");\n        expect(result).toEqual(expected);\n      });","file":"unit/crypto_spec.js","skipped":false,"dir":"test"},{"name":"should be able to decrypt a block with IV in stream","suites":["crypto","AES256","Decryption"],"line":226,"updatePoint":{"line":226,"column":61,"index":13531},"code":"      it(\"should be able to decrypt a block with IV in stream\", function () {\n        const input = hex2binary(\"000000000000000000000000000000008ea2b7ca516745bf\" + \"eafc49904b496089\");\n        const key = hex2binary(\"000102030405060708090a0b0c0d0e0f101112131415161718\" + \"191a1b1c1d1e1f\");\n        const cipher = new AES256Cipher(key);\n        const result = cipher.decryptBlock(input, false);\n        const expected = hex2binary(\"00112233445566778899aabbccddeeff\");\n        expect(result).toEqual(expected);\n      });","file":"unit/crypto_spec.js","skipped":false,"dir":"test"},{"name":"should correctly check a user key","suites":["crypto","PDF17Algorithm"],"line":237,"updatePoint":{"line":237,"column":41,"index":14087},"code":"    it(\"should correctly check a user key\", function () {\n      const alg = new PDF17();\n      const password = new Uint8Array([117, 115, 101, 114]);\n      const userValidation = new Uint8Array([117, 169, 4, 32, 159, 101, 22, 220]);\n      const userPassword = new Uint8Array([131, 242, 143, 160, 87, 2, 138, 134, 79, 253, 189, 173, 224, 73, 144, 241, 190, 81, 197, 15, 249, 105, 145, 151, 15, 194, 65, 3, 1, 126, 187, 221]);\n      const result = alg.checkUserPassword(password, userValidation, userPassword);\n      expect(result).toEqual(true);\n    });","file":"unit/crypto_spec.js","skipped":false,"dir":"test"},{"name":"should correctly check an owner key","suites":["crypto","PDF17Algorithm"],"line":245,"updatePoint":{"line":245,"column":43,"index":14642},"code":"    it(\"should correctly check an owner key\", function () {\n      const alg = new PDF17();\n      const password = new Uint8Array([111, 119, 110, 101, 114]);\n      const ownerValidation = new Uint8Array([243, 118, 71, 153, 128, 17, 101, 62]);\n      const ownerPassword = new Uint8Array([60, 98, 137, 35, 51, 101, 200, 152, 210, 178, 226, 228, 134, 205, 163, 24, 204, 126, 177, 36, 106, 50, 36, 125, 210, 172, 171, 120, 222, 108, 139, 115]);\n      const uBytes = new Uint8Array([131, 242, 143, 160, 87, 2, 138, 134, 79, 253, 189, 173, 224, 73, 144, 241, 190, 81, 197, 15, 249, 105, 145, 151, 15, 194, 65, 3, 1, 126, 187, 221, 117, 169, 4, 32, 159, 101, 22, 220, 168, 94, 215, 192, 100, 38, 188, 40]);\n      const result = alg.checkOwnerPassword(password, ownerValidation, uBytes, ownerPassword);\n      expect(result).toEqual(true);\n    });","file":"unit/crypto_spec.js","skipped":false,"dir":"test"},{"name":"should generate a file encryption key from the user key","suites":["crypto","PDF17Algorithm"],"line":254,"updatePoint":{"line":254,"column":63,"index":15500},"code":"    it(\"should generate a file encryption key from the user key\", function () {\n      const alg = new PDF17();\n      const password = new Uint8Array([117, 115, 101, 114]);\n      const userKeySalt = new Uint8Array([168, 94, 215, 192, 100, 38, 188, 40]);\n      const userEncryption = new Uint8Array([35, 150, 195, 169, 245, 51, 51, 255, 158, 158, 33, 242, 231, 75, 125, 190, 25, 126, 172, 114, 195, 244, 137, 245, 234, 165, 42, 74, 60, 38, 17, 17]);\n      const result = alg.getUserKey(password, userKeySalt, userEncryption);\n      const expected = new Uint8Array([63, 114, 136, 209, 87, 61, 12, 30, 249, 1, 186, 144, 254, 248, 163, 153, 151, 51, 133, 10, 80, 152, 206, 15, 72, 187, 231, 33, 224, 239, 13, 213]);\n      expect(result).toEqual(expected);\n    });","file":"unit/crypto_spec.js","skipped":false,"dir":"test"},{"name":"should generate a file encryption key from the owner key","suites":["crypto","PDF17Algorithm"],"line":263,"updatePoint":{"line":263,"column":64,"index":16260},"code":"    it(\"should generate a file encryption key from the owner key\", function () {\n      const alg = new PDF17();\n      const password = new Uint8Array([111, 119, 110, 101, 114]);\n      const ownerKeySalt = new Uint8Array([200, 245, 242, 12, 218, 123, 24, 120]);\n      const ownerEncryption = new Uint8Array([213, 202, 14, 189, 110, 76, 70, 191, 6, 195, 10, 190, 157, 100, 144, 85, 8, 62, 123, 178, 156, 229, 50, 40, 229, 216, 54, 222, 34, 38, 106, 223]);\n      const uBytes = new Uint8Array([131, 242, 143, 160, 87, 2, 138, 134, 79, 253, 189, 173, 224, 73, 144, 241, 190, 81, 197, 15, 249, 105, 145, 151, 15, 194, 65, 3, 1, 126, 187, 221, 117, 169, 4, 32, 159, 101, 22, 220, 168, 94, 215, 192, 100, 38, 188, 40]);\n      const result = alg.getOwnerKey(password, ownerKeySalt, uBytes, ownerEncryption);\n      const expected = new Uint8Array([63, 114, 136, 209, 87, 61, 12, 30, 249, 1, 186, 144, 254, 248, 163, 153, 151, 51, 133, 10, 80, 152, 206, 15, 72, 187, 231, 33, 224, 239, 13, 213]);\n      expect(result).toEqual(expected);\n    });","file":"unit/crypto_spec.js","skipped":false,"dir":"test"},{"name":"should correctly check a user key","suites":["crypto","PDF20Algorithm"],"line":275,"updatePoint":{"line":275,"column":41,"index":17321},"code":"    it(\"should correctly check a user key\", function () {\n      const alg = new PDF20();\n      const password = new Uint8Array([117, 115, 101, 114]);\n      const userValidation = new Uint8Array([83, 245, 146, 101, 198, 247, 34, 198]);\n      const userPassword = new Uint8Array([94, 230, 205, 75, 166, 99, 250, 76, 219, 128, 17, 85, 57, 17, 33, 164, 150, 46, 103, 176, 160, 156, 187, 233, 166, 223, 163, 253, 147, 235, 95, 184]);\n      const result = alg.checkUserPassword(password, userValidation, userPassword);\n      expect(result).toEqual(true);\n    });","file":"unit/crypto_spec.js","skipped":false,"dir":"test"},{"name":"should correctly check an owner key","suites":["crypto","PDF20Algorithm"],"line":283,"updatePoint":{"line":283,"column":43,"index":17880},"code":"    it(\"should correctly check an owner key\", function () {\n      const alg = new PDF20();\n      const password = new Uint8Array([111, 119, 110, 101, 114]);\n      const ownerValidation = new Uint8Array([142, 232, 169, 208, 202, 214, 5, 185]);\n      const ownerPassword = new Uint8Array([88, 232, 62, 54, 245, 26, 245, 209, 137, 123, 221, 72, 199, 49, 37, 217, 31, 74, 115, 167, 127, 158, 176, 77, 45, 163, 87, 47, 39, 90, 217, 141]);\n      const uBytes = new Uint8Array([94, 230, 205, 75, 166, 99, 250, 76, 219, 128, 17, 85, 57, 17, 33, 164, 150, 46, 103, 176, 160, 156, 187, 233, 166, 223, 163, 253, 147, 235, 95, 184, 83, 245, 146, 101, 198, 247, 34, 198, 191, 11, 16, 94, 237, 216, 20, 175]);\n      const result = alg.checkOwnerPassword(password, ownerValidation, uBytes, ownerPassword);\n      expect(result).toEqual(true);\n    });","file":"unit/crypto_spec.js","skipped":false,"dir":"test"},{"name":"should generate a file encryption key from the user key","suites":["crypto","PDF20Algorithm"],"line":292,"updatePoint":{"line":292,"column":63,"index":18735},"code":"    it(\"should generate a file encryption key from the user key\", function () {\n      const alg = new PDF20();\n      const password = new Uint8Array([117, 115, 101, 114]);\n      const userKeySalt = new Uint8Array([191, 11, 16, 94, 237, 216, 20, 175]);\n      const userEncryption = new Uint8Array([121, 208, 2, 181, 230, 89, 156, 60, 253, 143, 212, 28, 84, 180, 196, 177, 173, 128, 221, 107, 46, 20, 94, 186, 135, 51, 95, 24, 20, 223, 254, 36]);\n      const result = alg.getUserKey(password, userKeySalt, userEncryption);\n      const expected = new Uint8Array([42, 218, 213, 39, 73, 91, 72, 79, 67, 38, 248, 133, 18, 189, 61, 34, 107, 79, 29, 56, 59, 181, 213, 118, 113, 34, 65, 210, 87, 174, 22, 239]);\n      expect(result).toEqual(expected);\n    });","file":"unit/crypto_spec.js","skipped":false,"dir":"test"},{"name":"should generate a file encryption key from the owner key","suites":["crypto","PDF20Algorithm"],"line":301,"updatePoint":{"line":301,"column":64,"index":19487},"code":"    it(\"should generate a file encryption key from the owner key\", function () {\n      const alg = new PDF20();\n      const password = new Uint8Array([111, 119, 110, 101, 114]);\n      const ownerKeySalt = new Uint8Array([29, 208, 185, 46, 11, 76, 135, 149]);\n      const ownerEncryption = new Uint8Array([209, 73, 224, 77, 103, 155, 201, 181, 190, 68, 223, 20, 62, 90, 56, 210, 5, 240, 178, 128, 238, 124, 68, 254, 253, 244, 62, 108, 208, 135, 10, 251]);\n      const uBytes = new Uint8Array([94, 230, 205, 75, 166, 99, 250, 76, 219, 128, 17, 85, 57, 17, 33, 164, 150, 46, 103, 176, 160, 156, 187, 233, 166, 223, 163, 253, 147, 235, 95, 184, 83, 245, 146, 101, 198, 247, 34, 198, 191, 11, 16, 94, 237, 216, 20, 175]);\n      const result = alg.getOwnerKey(password, ownerKeySalt, uBytes, ownerEncryption);\n      const expected = new Uint8Array([42, 218, 213, 39, 73, 91, 72, 79, 67, 38, 248, 133, 18, 189, 61, 34, 107, 79, 29, 56, 59, 181, 213, 118, 113, 34, 65, 210, 87, 174, 22, 239]);\n      expect(result).toEqual(expected);\n    });","file":"unit/crypto_spec.js","skipped":false,"dir":"test"},{"name":"should accept user password","suites":["CipherTransformFactory","#ctor","AES256 Revision 5"],"line":455,"updatePoint":{"line":455,"column":37,"index":26959},"code":"      it(\"should accept user password\", function () {\n        ensurePasswordCorrect(aes256Dict, fileId1, \"user\");\n      });","file":"unit/crypto_spec.js","skipped":false,"dir":"test"},{"name":"should accept owner password","suites":["CipherTransformFactory","#ctor","AES256 Revision 5"],"line":458,"updatePoint":{"line":458,"column":38,"index":27084},"code":"      it(\"should accept owner password\", function () {\n        ensurePasswordCorrect(aes256Dict, fileId1, \"owner\");\n      });","file":"unit/crypto_spec.js","skipped":false,"dir":"test"},{"name":"should not accept blank password","suites":["CipherTransformFactory","#ctor","AES256 Revision 5"],"line":461,"updatePoint":{"line":461,"column":42,"index":27214},"code":"      it(\"should not accept blank password\", function () {\n        ensurePasswordNeeded(aes256Dict, fileId1);\n      });","file":"unit/crypto_spec.js","skipped":false,"dir":"test"},{"name":"should not accept wrong password","suites":["CipherTransformFactory","#ctor","AES256 Revision 5"],"line":464,"updatePoint":{"line":464,"column":42,"index":27334},"code":"      it(\"should not accept wrong password\", function () {\n        ensurePasswordIncorrect(aes256Dict, fileId1, \"wrong\");\n      });","file":"unit/crypto_spec.js","skipped":false,"dir":"test"},{"name":"should accept blank password","suites":["CipherTransformFactory","#ctor","AES256 Revision 5"],"line":467,"updatePoint":{"line":467,"column":38,"index":27462},"code":"      it(\"should accept blank password\", function () {\n        ensurePasswordCorrect(aes256BlankDict, fileId1);\n      });","file":"unit/crypto_spec.js","skipped":false,"dir":"test"},{"name":"should accept user password","suites":["CipherTransformFactory","#ctor","AES256 Revision 6"],"line":472,"updatePoint":{"line":472,"column":37,"index":27639},"code":"      it(\"should accept user password\", function () {\n        ensurePasswordCorrect(aes256IsoDict, fileId1, \"user\");\n      });","file":"unit/crypto_spec.js","skipped":false,"dir":"test"},{"name":"should accept owner password","suites":["CipherTransformFactory","#ctor","AES256 Revision 6"],"line":475,"updatePoint":{"line":475,"column":38,"index":27767},"code":"      it(\"should accept owner password\", function () {\n        ensurePasswordCorrect(aes256IsoDict, fileId1, \"owner\");\n      });","file":"unit/crypto_spec.js","skipped":false,"dir":"test"},{"name":"should not accept blank password","suites":["CipherTransformFactory","#ctor","AES256 Revision 6"],"line":478,"updatePoint":{"line":478,"column":42,"index":27900},"code":"      it(\"should not accept blank password\", function () {\n        ensurePasswordNeeded(aes256IsoDict, fileId1);\n      });","file":"unit/crypto_spec.js","skipped":false,"dir":"test"},{"name":"should not accept wrong password","suites":["CipherTransformFactory","#ctor","AES256 Revision 6"],"line":481,"updatePoint":{"line":481,"column":42,"index":28023},"code":"      it(\"should not accept wrong password\", function () {\n        ensurePasswordIncorrect(aes256IsoDict, fileId1, \"wrong\");\n      });","file":"unit/crypto_spec.js","skipped":false,"dir":"test"},{"name":"should accept blank password","suites":["CipherTransformFactory","#ctor","AES256 Revision 6"],"line":484,"updatePoint":{"line":484,"column":38,"index":28154},"code":"      it(\"should accept blank password\", function () {\n        ensurePasswordCorrect(aes256IsoBlankDict, fileId1);\n      });","file":"unit/crypto_spec.js","skipped":false,"dir":"test"},{"name":"should accept user password","suites":["CipherTransformFactory","#ctor","AES256 Revision 6"],"line":488,"updatePoint":{"line":488,"column":35,"index":28284},"code":"    it(\"should accept user password\", function () {\n      ensurePasswordCorrect(dict1, fileId1, \"123456\");\n    });","file":"unit/crypto_spec.js","skipped":false,"dir":"test"},{"name":"should accept owner password","suites":["CipherTransformFactory","#ctor","AES256 Revision 6"],"line":491,"updatePoint":{"line":491,"column":36,"index":28400},"code":"    it(\"should accept owner password\", function () {\n      ensurePasswordCorrect(dict1, fileId1, \"654321\");\n    });","file":"unit/crypto_spec.js","skipped":false,"dir":"test"},{"name":"should not accept blank password","suites":["CipherTransformFactory","#ctor","AES256 Revision 6"],"line":494,"updatePoint":{"line":494,"column":40,"index":28520},"code":"    it(\"should not accept blank password\", function () {\n      ensurePasswordNeeded(dict1, fileId1);\n    });","file":"unit/crypto_spec.js","skipped":false,"dir":"test"},{"name":"should not accept wrong password","suites":["CipherTransformFactory","#ctor","AES256 Revision 6"],"line":497,"updatePoint":{"line":497,"column":40,"index":28629},"code":"    it(\"should not accept wrong password\", function () {\n      ensurePasswordIncorrect(dict1, fileId1, \"wrong\");\n    });","file":"unit/crypto_spec.js","skipped":false,"dir":"test"},{"name":"should accept blank password","suites":["CipherTransformFactory","#ctor","AES256 Revision 6"],"line":500,"updatePoint":{"line":500,"column":36,"index":28746},"code":"    it(\"should accept blank password\", function () {\n      ensurePasswordCorrect(dict2, fileId2);\n    });","file":"unit/crypto_spec.js","skipped":false,"dir":"test"},{"name":"should encrypt and decrypt using ARCFour","suites":["CipherTransformFactory","Encrypt and decrypt"],"line":505,"updatePoint":{"line":505,"column":48,"index":28918},"code":"    it(\"should encrypt and decrypt using ARCFour\", function () {\n      dict3.CF = buildDict({\n        Identity: buildDict({\n          CFM: Name.get(\"V2\")\n        })\n      });\n      const dict = buildDict(dict3);\n      ensureEncryptDecryptIsIdentity(dict, fileId1, \"user\", \"hello world\");\n    });","file":"unit/crypto_spec.js","skipped":false,"dir":"test"},{"name":"should encrypt and decrypt using AES128","suites":["CipherTransformFactory","Encrypt and decrypt"],"line":514,"updatePoint":{"line":514,"column":47,"index":29213},"code":"    it(\"should encrypt and decrypt using AES128\", function () {\n      dict3.CF = buildDict({\n        Identity: buildDict({\n          CFM: Name.get(\"AESV2\")\n        })\n      });\n      const dict = buildDict(dict3);\n      // 0 char\n      ensureEncryptDecryptIsIdentity(dict, fileId1, \"user\", \"\");\n      // 1 char\n      ensureEncryptDecryptIsIdentity(dict, fileId1, \"user\", \"a\");\n      // 2 chars\n      ensureEncryptDecryptIsIdentity(dict, fileId1, \"user\", \"aa\");\n      // 16 chars\n      ensureEncryptDecryptIsIdentity(dict, fileId1, \"user\", \"aaaaaaaaaaaaaaaa\");\n      // 19 chars\n      ensureEncryptDecryptIsIdentity(dict, fileId1, \"user\", \"aaaaaaaaaaaaaaaaaaa\");\n    });","file":"unit/crypto_spec.js","skipped":false,"dir":"test"},{"name":"should encrypt and decrypt using AES256","suites":["CipherTransformFactory","Encrypt and decrypt"],"line":532,"updatePoint":{"line":532,"column":47,"index":29883},"code":"    it(\"should encrypt and decrypt using AES256\", function () {\n      dict3.CF = buildDict({\n        Identity: buildDict({\n          CFM: Name.get(\"AESV3\")\n        })\n      });\n      const dict = buildDict(dict3);\n      // 0 chars\n      ensureEncryptDecryptIsIdentity(dict, fileId1, \"user\", \"\");\n      // 4 chars\n      ensureEncryptDecryptIsIdentity(dict, fileId1, \"user\", \"aaaa\");\n      // 5 chars\n      ensureEncryptDecryptIsIdentity(dict, fileId1, \"user\", \"aaaaa\");\n      // 16 chars\n      ensureEncryptDecryptIsIdentity(dict, fileId1, \"user\", \"aaaaaaaaaaaaaaaa\");\n      // 22 chars\n      ensureEncryptDecryptIsIdentity(dict, fileId1, \"user\", \"aaaaaaaaaaaaaaaaaaaaaa\");\n    });","file":"unit/crypto_spec.js","skipped":false,"dir":"test"},{"name":"should encrypt and have the correct length using AES128","suites":["CipherTransformFactory","Encrypt and decrypt"],"line":550,"updatePoint":{"line":550,"column":63,"index":30580},"code":"    it(\"should encrypt and have the correct length using AES128\", function () {\n      dict3.CF = buildDict({\n        Identity: buildDict({\n          CFM: Name.get(\"AESV2\")\n        })\n      });\n      const dict = buildDict(dict3);\n      // 0 char\n      ensureAESEncryptedStringHasCorrectLength(dict, fileId1, \"user\", \"\");\n      // 1 char\n      ensureAESEncryptedStringHasCorrectLength(dict, fileId1, \"user\", \"a\");\n      // 2 chars\n      ensureAESEncryptedStringHasCorrectLength(dict, fileId1, \"user\", \"aa\");\n      // 16 chars\n      ensureAESEncryptedStringHasCorrectLength(dict, fileId1, \"user\", \"aaaaaaaaaaaaaaaa\");\n      // 19 chars\n      ensureAESEncryptedStringHasCorrectLength(dict, fileId1, \"user\", \"aaaaaaaaaaaaaaaaaaa\");\n    });","file":"unit/crypto_spec.js","skipped":false,"dir":"test"},{"name":"should encrypt and have the correct length using AES256","suites":["CipherTransformFactory","Encrypt and decrypt"],"line":568,"updatePoint":{"line":568,"column":63,"index":31316},"code":"    it(\"should encrypt and have the correct length using AES256\", function () {\n      dict3.CF = buildDict({\n        Identity: buildDict({\n          CFM: Name.get(\"AESV3\")\n        })\n      });\n      const dict = buildDict(dict3);\n      // 0 char\n      ensureAESEncryptedStringHasCorrectLength(dict, fileId1, \"user\", \"\");\n      // 4 chars\n      ensureAESEncryptedStringHasCorrectLength(dict, fileId1, \"user\", \"aaaa\");\n      // 5 chars\n      ensureAESEncryptedStringHasCorrectLength(dict, fileId1, \"user\", \"aaaaa\");\n      // 16 chars\n      ensureAESEncryptedStringHasCorrectLength(dict, fileId1, \"user\", \"aaaaaaaaaaaaaaaa\");\n      // 22 chars\n      ensureAESEncryptedStringHasCorrectLength(dict, fileId1, \"user\", \"aaaaaaaaaaaaaaaaaaaaaa\");\n    });","file":"unit/crypto_spec.js","skipped":false,"dir":"test"},{"name":"renders to canvas with a default white background","suites":["custom canvas rendering"],"line":44,"updatePoint":{"line":44,"column":55,"index":1548},"code":"  it(\"renders to canvas with a default white background\", async function () {\n    const viewport = page.getViewport({\n      scale: 1\n    });\n    const canvasAndCtx = CanvasFactory.create(viewport.width, viewport.height);\n    const renderTask = page.render({\n      canvasContext: canvasAndCtx.context,\n      viewport\n    });\n    await renderTask.promise;\n    expect(getTopLeftPixel(canvasAndCtx.context)).toEqual({\n      r: 255,\n      g: 255,\n      b: 255,\n      a: 255\n    });\n    CanvasFactory.destroy(canvasAndCtx);\n  });","file":"unit/custom_spec.js","skipped":false,"dir":"test"},{"name":"renders to canvas with a custom background","suites":["custom canvas rendering"],"line":62,"updatePoint":{"line":62,"column":48,"index":2065},"code":"  it(\"renders to canvas with a custom background\", async function () {\n    const viewport = page.getViewport({\n      scale: 1\n    });\n    const canvasAndCtx = CanvasFactory.create(viewport.width, viewport.height);\n    const renderTask = page.render({\n      canvasContext: canvasAndCtx.context,\n      viewport,\n      background: \"rgba(255,0,0,1.0)\"\n    });\n    await renderTask.promise;\n    expect(getTopLeftPixel(canvasAndCtx.context)).toEqual({\n      r: 255,\n      g: 0,\n      b: 0,\n      a: 255\n    });\n    CanvasFactory.destroy(canvasAndCtx);\n  });","file":"unit/custom_spec.js","skipped":false,"dir":"test"},{"name":"should use given document for loading fonts (with Font Loading API)","suites":["custom ownerDocument"],"line":135,"updatePoint":{"line":135,"column":73,"index":3996},"code":"  it(\"should use given document for loading fonts (with Font Loading API)\", async function () {\n    const {\n      ownerDocument,\n      elements,\n      CanvasFactory\n    } = getMocks();\n    const getDocumentParams = buildGetDocumentParams(\"TrueType_without_cmap.pdf\", {\n      disableFontFace: false,\n      ownerDocument\n    });\n    const loadingTask = getDocument(getDocumentParams);\n    const doc = await loadingTask.promise;\n    const page = await doc.getPage(1);\n    const viewport = page.getViewport({\n      scale: 1\n    });\n    const canvasAndCtx = CanvasFactory.create(viewport.width, viewport.height);\n    await page.render({\n      canvasContext: canvasAndCtx.context,\n      viewport\n    }).promise;\n    const style = elements.find(element => element.tagName === \"style\");\n    expect(style).toBeFalsy();\n    expect(ownerDocument.fonts.size).toBeGreaterThanOrEqual(1);\n    expect(Array.from(ownerDocument.fonts).find(checkFont)).toBeTruthy();\n    await loadingTask.destroy();\n    CanvasFactory.destroy(canvasAndCtx);\n    expect(ownerDocument.fonts.size).toBe(0);\n  });","file":"unit/custom_spec.js","skipped":false,"dir":"test"},{"name":"should use given document for loading fonts (with CSS rules)","suites":["custom ownerDocument"],"line":164,"updatePoint":{"line":164,"column":66,"index":5063},"code":"  it(\"should use given document for loading fonts (with CSS rules)\", async function () {\n    const {\n      ownerDocument,\n      elements,\n      CanvasFactory\n    } = getMocks();\n    ownerDocument.fonts = null;\n    const getDocumentParams = buildGetDocumentParams(\"TrueType_without_cmap.pdf\", {\n      disableFontFace: false,\n      ownerDocument\n    });\n    const loadingTask = getDocument(getDocumentParams);\n    const doc = await loadingTask.promise;\n    const page = await doc.getPage(1);\n    const viewport = page.getViewport({\n      scale: 1\n    });\n    const canvasAndCtx = CanvasFactory.create(viewport.width, viewport.height);\n    await page.render({\n      canvasContext: canvasAndCtx.context,\n      viewport\n    }).promise;\n    const style = elements.find(element => element.tagName === \"style\");\n    expect(style.sheet.cssRules.length).toBeGreaterThanOrEqual(1);\n    expect(style.sheet.cssRules.find(checkFontFaceRule)).toBeTruthy();\n    await loadingTask.destroy();\n    CanvasFactory.destroy(canvasAndCtx);\n    expect(style.remove.called).toBe(true);\n  });","file":"unit/custom_spec.js","skipped":false,"dir":"test"},{"name":"should parse and create default appearance","suites":["Default appearance","parseDefaultAppearance and createDefaultAppearance"],"line":20,"updatePoint":{"line":20,"column":50,"index":959},"code":"    it(\"should parse and create default appearance\", function () {\n      const da = \"/F1 12 Tf 0.1 0.2 0.3 rg\";\n      const result = {\n        fontSize: 12,\n        fontName: \"F1\",\n        fontColor: new Uint8ClampedArray([26, 51, 76])\n      };\n      expect(parseDefaultAppearance(da)).toEqual(result);\n      expect(createDefaultAppearance(result)).toEqual(da);\n      expect(parseDefaultAppearance(\"0.1 0.2 0.3 rg /F1 12 Tf 0.3 0.2 0.1 rg /F2 13 Tf\")).toEqual({\n        fontSize: 13,\n        fontName: \"F2\",\n        fontColor: new Uint8ClampedArray([76, 51, 26])\n      });\n    });","file":"unit/default_appearance_spec.js","skipped":false,"dir":"test"},{"name":"should parse default appearance with save/restore","suites":["Default appearance","parseDefaultAppearance and createDefaultAppearance"],"line":35,"updatePoint":{"line":35,"column":57,"index":1547},"code":"    it(\"should parse default appearance with save/restore\", function () {\n      const da = \"q Q 0.1 0.2 0.3 rg /F1 12 Tf q 0.3 0.2 0.1 rg /F2 13 Tf Q\";\n      expect(parseDefaultAppearance(da)).toEqual({\n        fontSize: 12,\n        fontName: \"F1\",\n        fontColor: new Uint8ClampedArray([26, 51, 76])\n      });\n    });","file":"unit/default_appearance_spec.js","skipped":false,"dir":"test"},{"name":"should parse a FreeText (from Acrobat) appearance","suites":["Default appearance","parseAppearanceStream"],"line":45,"updatePoint":{"line":45,"column":57,"index":1919},"code":"    it(\"should parse a FreeText (from Acrobat) appearance\", () => {\n      const appearance = new StringStream(`\n      0 w\n      46.5 621.0552 156.389 18.969 re\n      n\n      q\n      1 0 0 1 0 0 cm\n      46.5 621.0552 156.389 18.969 re\n      W\n      n\n      0 g\n      1 w\n      BT\n      /Helv 14 Tf\n      0.419998 0.850006 0.160004 rg\n      46.5 626.77 Td\n      (Hello ) Tj\n      35.793 0 Td\n      (World ) Tj\n      40.448 0 Td\n      (from ) Tj\n      31.89 0 Td\n      (Acrobat) Tj\n      ET\n      Q`);\n      const result = {\n        fontSize: 14,\n        fontName: \"Helv\",\n        fontColor: new Uint8ClampedArray([107, 217, 41])\n      };\n      expect(parseAppearanceStream(appearance)).toEqual(result);\n      expect(appearance.pos).toEqual(0);\n    });","file":"unit/default_appearance_spec.js","skipped":false,"dir":"test"},{"name":"should parse a FreeText (from Firefox) appearance","suites":["Default appearance","parseAppearanceStream"],"line":78,"updatePoint":{"line":78,"column":57,"index":2670},"code":"    it(\"should parse a FreeText (from Firefox) appearance\", () => {\n      const appearance = new StringStream(`\n      q\n      0 0 203.7 28.3 re W n\n      BT\n      1 0 0 1 0 34.6 Tm 0 Tc 0.93 0.17 0.44 rg\n      /Helv 18 Tf\n      0 -24.3 Td (Hello World From Firefox) Tj\n      ET\n      Q`);\n      const result = {\n        fontSize: 18,\n        fontName: \"Helv\",\n        fontColor: new Uint8ClampedArray([237, 43, 112])\n      };\n      expect(parseAppearanceStream(appearance)).toEqual(result);\n      expect(appearance.pos).toEqual(0);\n    });","file":"unit/default_appearance_spec.js","skipped":false,"dir":"test"},{"name":"should parse a FreeText (from Preview) appearance","suites":["Default appearance","parseAppearanceStream"],"line":96,"updatePoint":{"line":96,"column":57,"index":3210},"code":"    it(\"should parse a FreeText (from Preview) appearance\", () => {\n      const appearance = new StringStream(`\n      q Q q 2.128482 2.128482 247.84 26 re W n /Cs1 cs 0.52799 0.3071 0.99498 sc\n      q 1 0 0 -1 -108.3364 459.8485 cm BT 22.00539 0 0 -22.00539 110.5449 452.72\n      Tm /TT1 1 Tf [ (H) -0.2 (e) -0.2 (l) -0.2 (l) -0.2 (o) -0.2 ( ) 0.2 (W) 17.7\n      (o) -0.2 (rl) -0.2 (d) -0.2 ( ) 0.2 (f) 0.2 (ro) -0.2 (m ) 0.2 (Pre) -0.2\n      (vi) -0.2 (e) -0.2 (w) ] TJ ET Q Q`);\n      const result = {\n        fontSize: 22.00539,\n        fontName: \"TT1\",\n        fontColor: new Uint8ClampedArray([0, 0, 0])\n      };\n      expect(parseAppearanceStream(appearance)).toEqual(result);\n      expect(appearance.pos).toEqual(0);\n    });","file":"unit/default_appearance_spec.js","skipped":false,"dir":"test"},{"name":"should parse a FreeText (from Edge) appearance","suites":["Default appearance","parseAppearanceStream"],"line":111,"updatePoint":{"line":111,"column":54,"index":3939},"code":"    it(\"should parse a FreeText (from Edge) appearance\", () => {\n      const appearance = new StringStream(`\n      q\n      0 0 292.5 18.75 re W n\n      BT\n      0 Tc\n      0.0627451 0.486275 0.0627451 rg\n      0 3.8175 Td\n      /Helv 16.5 Tf\n      (Hello World from Edge without Acrobat) Tj\n      ET\n      Q`);\n      const result = {\n        fontSize: 16.5,\n        fontName: \"Helv\",\n        fontColor: new Uint8ClampedArray([16, 124, 16])\n      };\n      expect(parseAppearanceStream(appearance)).toEqual(result);\n      expect(appearance.pos).toEqual(0);\n    });","file":"unit/default_appearance_spec.js","skipped":false,"dir":"test"},{"name":"should parse a FreeText (from Foxit) appearance","suites":["Default appearance","parseAppearanceStream"],"line":131,"updatePoint":{"line":131,"column":55,"index":4503},"code":"    it(\"should parse a FreeText (from Foxit) appearance\", () => {\n      const appearance = new StringStream(`\n      q\n      /Tx BMC\n      0 -22.333 197.667 22.333 re\n      W\n      n\n      BT\n       0.584314 0.247059 0.235294 rg\n      0 -18.1 Td\n      /FXF0 20 Tf\n      (Hello World from Foxit) Tj\n      ET\n      EMC\n      Q`);\n      const result = {\n        fontSize: 20,\n        fontName: \"FXF0\",\n        fontColor: new Uint8ClampedArray([149, 63, 60])\n      };\n      expect(parseAppearanceStream(appearance)).toEqual(result);\n      expect(appearance.pos).toEqual(0);\n    });","file":"unit/default_appearance_spec.js","skipped":false,"dir":"test"},{"name":"should parse a FreeText (from Okular) appearance","suites":["Default appearance","parseAppearanceStream"],"line":154,"updatePoint":{"line":154,"column":56,"index":5081},"code":"    it(\"should parse a FreeText (from Okular) appearance\", () => {\n      const appearance = new StringStream(`\n      q\n      0.00 0.00 172.65 41.46 re W n\n      0.00000 0.33333 0.49804 rg\n      BT 1 0 0 1 0.00 41.46 Tm\n      /Invalid_font 18.00 Tf\n      0.00 -18.00 Td\n      (Hello World from) Tj\n      /Invalid_font 18.00 Tf\n      0.00 -18.00 Td\n      (Okular) Tj\n      ET Q`);\n      const result = {\n        fontSize: 18,\n        fontName: \"Invalid_font\",\n        fontColor: new Uint8ClampedArray([0, 85, 127])\n      };\n      expect(parseAppearanceStream(appearance)).toEqual(result);\n      expect(appearance.pos).toEqual(0);\n    });","file":"unit/default_appearance_spec.js","skipped":false,"dir":"test"},{"name":"should fail require(\"zlib\") unless in Node.js","suites":["SVGGraphics","paintImageXObject"],"line":105,"updatePoint":{"line":105,"column":53,"index":3717},"code":"    it('should fail require(\"zlib\") unless in Node.js', function () {\n      function testFunc() {\n        __non_webpack_require__(\"zlib\");\n      }\n      if (isNodeJS) {\n        // Verifies that the script loader replaces __non_webpack_require__ with\n        // require.\n        expect(testFunc.toString()).toMatch(/\\srequire\\([\"']zlib[\"']\\)/);\n        expect(testFunc).not.toThrow();\n      } else {\n        // require not defined, require('zlib') not a module, etc.\n        expect(testFunc).toThrow();\n      }\n    });","file":"unit/display_svg_spec.js","skipped":false,"dir":"test"},{"name":"should produce a reasonably small svg:image","suites":["SVGGraphics","paintImageXObject"],"line":119,"updatePoint":{"line":119,"column":51,"index":4233},"code":"    it(\"should produce a reasonably small svg:image\", async function () {\n      if (!isNodeJS) {\n        pending(\"zlib.deflateSync is not supported in non-Node environments.\");\n      }\n      const svgImg = await withZlib(true, getSVGImage);\n      expect(svgImg.nodeName).toBe(\"svg:image\");\n      expect(svgImg.getAttributeNS(null, \"width\")).toBe(\"200px\");\n      expect(svgImg.getAttributeNS(null, \"height\")).toBe(\"100px\");\n      const imgUrl = svgImg.getAttributeNS(XLINK_NS, \"href\");\n      // forceDataSchema = true, so the generated URL should be a data:-URL.\n      expect(imgUrl).toMatch(/^data:image\\/png;base64,/);\n      // Test whether the generated image has a reasonable file size.\n      // I obtained a data URL of size 366 with Node 8.1.3 and zlib 1.2.11.\n      // Without zlib (uncompressed), the size of the data URL was excessive\n      // (80246).\n      expect(imgUrl.length).toBeLessThan(367);\n    });","file":"unit/display_svg_spec.js","skipped":false,"dir":"test"},{"name":"should be able to produce a svg:image without zlib","suites":["SVGGraphics","paintImageXObject"],"line":136,"updatePoint":{"line":136,"column":58,"index":5156},"code":"    it(\"should be able to produce a svg:image without zlib\", async function () {\n      const svgImg = await withZlib(false, getSVGImage);\n      expect(svgImg.nodeName).toBe(\"svg:image\");\n      expect(svgImg.getAttributeNS(null, \"width\")).toBe(\"200px\");\n      expect(svgImg.getAttributeNS(null, \"height\")).toBe(\"100px\");\n      const imgUrl = svgImg.getAttributeNS(XLINK_NS, \"href\");\n      expect(imgUrl).toMatch(/^data:image\\/png;base64,/);\n      // The size of our naively generated PNG file is excessive :(\n      expect(imgUrl.length).toBe(80246);\n    });","file":"unit/display_svg_spec.js","skipped":false,"dir":"test"},{"name":"`create` should throw an error if the dimensions are invalid","suites":["display_utils","DOMCanvasFactory"],"line":28,"updatePoint":{"line":28,"column":68,"index":1197},"code":"    it(\"`create` should throw an error if the dimensions are invalid\", function () {\n      // Invalid width.\n      expect(function () {\n        return canvasFactory.create(-1, 1);\n      }).toThrow(new Error(\"Invalid canvas size\"));\n\n      // Invalid height.\n      expect(function () {\n        return canvasFactory.create(1, -1);\n      }).toThrow(new Error(\"Invalid canvas size\"));\n    });","file":"unit/display_utils_spec.js","skipped":false,"dir":"test"},{"name":"`create` should return a canvas if the dimensions are valid","suites":["display_utils","DOMCanvasFactory"],"line":39,"updatePoint":{"line":39,"column":67,"index":1585},"code":"    it(\"`create` should return a canvas if the dimensions are valid\", function () {\n      if (isNodeJS) {\n        pending(\"Document is not supported in Node.js.\");\n      }\n      const {\n        canvas,\n        context\n      } = canvasFactory.create(20, 40);\n      expect(canvas instanceof HTMLCanvasElement).toBe(true);\n      expect(context instanceof CanvasRenderingContext2D).toBe(true);\n      expect(canvas.width).toBe(20);\n      expect(canvas.height).toBe(40);\n    });","file":"unit/display_utils_spec.js","skipped":false,"dir":"test"},{"name":"`reset` should throw an error if no canvas is provided","suites":["display_utils","DOMCanvasFactory"],"line":52,"updatePoint":{"line":52,"column":62,"index":2053},"code":"    it(\"`reset` should throw an error if no canvas is provided\", function () {\n      const canvasAndContext = {\n        canvas: null,\n        context: null\n      };\n      expect(function () {\n        return canvasFactory.reset(canvasAndContext, 20, 40);\n      }).toThrow(new Error(\"Canvas is not specified\"));\n    });","file":"unit/display_utils_spec.js","skipped":false,"dir":"test"},{"name":"`reset` should throw an error if the dimensions are invalid","suites":["display_utils","DOMCanvasFactory"],"line":61,"updatePoint":{"line":61,"column":67,"index":2376},"code":"    it(\"`reset` should throw an error if the dimensions are invalid\", function () {\n      const canvasAndContext = {\n        canvas: \"foo\",\n        context: \"bar\"\n      };\n\n      // Invalid width.\n      expect(function () {\n        return canvasFactory.reset(canvasAndContext, -1, 1);\n      }).toThrow(new Error(\"Invalid canvas size\"));\n\n      // Invalid height.\n      expect(function () {\n        return canvasFactory.reset(canvasAndContext, 1, -1);\n      }).toThrow(new Error(\"Invalid canvas size\"));\n    });","file":"unit/display_utils_spec.js","skipped":false,"dir":"test"},{"name":"`reset` should alter the canvas/context if the dimensions are valid","suites":["display_utils","DOMCanvasFactory"],"line":77,"updatePoint":{"line":77,"column":75,"index":2895},"code":"    it(\"`reset` should alter the canvas/context if the dimensions are valid\", function () {\n      if (isNodeJS) {\n        pending(\"Document is not supported in Node.js.\");\n      }\n      const canvasAndContext = canvasFactory.create(20, 40);\n      canvasFactory.reset(canvasAndContext, 60, 80);\n      const {\n        canvas,\n        context\n      } = canvasAndContext;\n      expect(canvas instanceof HTMLCanvasElement).toBe(true);\n      expect(context instanceof CanvasRenderingContext2D).toBe(true);\n      expect(canvas.width).toBe(60);\n      expect(canvas.height).toBe(80);\n    });","file":"unit/display_utils_spec.js","skipped":false,"dir":"test"},{"name":"`destroy` should throw an error if no canvas is provided","suites":["display_utils","DOMCanvasFactory"],"line":92,"updatePoint":{"line":92,"column":64,"index":3467},"code":"    it(\"`destroy` should throw an error if no canvas is provided\", function () {\n      expect(function () {\n        return canvasFactory.destroy({});\n      }).toThrow(new Error(\"Canvas is not specified\"));\n    });","file":"unit/display_utils_spec.js","skipped":false,"dir":"test"},{"name":"`destroy` should clear the canvas/context","suites":["display_utils","DOMCanvasFactory"],"line":97,"updatePoint":{"line":97,"column":49,"index":3666},"code":"    it(\"`destroy` should clear the canvas/context\", function () {\n      if (isNodeJS) {\n        pending(\"Document is not supported in Node.js.\");\n      }\n      const canvasAndContext = canvasFactory.create(20, 40);\n      canvasFactory.destroy(canvasAndContext);\n      const {\n        canvas,\n        context\n      } = canvasAndContext;\n      expect(canvas).toBe(null);\n      expect(context).toBe(null);\n    });","file":"unit/display_utils_spec.js","skipped":false,"dir":"test"},{"name":"`create` should throw an error if the dimensions are invalid","suites":["display_utils","DOMSVGFactory"],"line":119,"updatePoint":{"line":119,"column":68,"index":4300},"code":"    it(\"`create` should throw an error if the dimensions are invalid\", function () {\n      // Invalid width.\n      expect(function () {\n        return svgFactory.create(-1, 0);\n      }).toThrow(new Error(\"Invalid SVG dimensions\"));\n\n      // Invalid height.\n      expect(function () {\n        return svgFactory.create(0, -1);\n      }).toThrow(new Error(\"Invalid SVG dimensions\"));\n    });","file":"unit/display_utils_spec.js","skipped":false,"dir":"test"},{"name":"`create` should return an SVG element if the dimensions are valid","suites":["display_utils","DOMSVGFactory"],"line":130,"updatePoint":{"line":130,"column":73,"index":4694},"code":"    it(\"`create` should return an SVG element if the dimensions are valid\", function () {\n      if (isNodeJS) {\n        pending(\"Document is not supported in Node.js.\");\n      }\n      const svg = svgFactory.create(20, 40);\n      expect(svg instanceof SVGSVGElement).toBe(true);\n      expect(svg.getAttribute(\"version\")).toBe(\"1.1\");\n      expect(svg.getAttribute(\"width\")).toBe(\"20px\");\n      expect(svg.getAttribute(\"height\")).toBe(\"40px\");\n      expect(svg.getAttribute(\"preserveAspectRatio\")).toBe(\"none\");\n      expect(svg.getAttribute(\"viewBox\")).toBe(\"0 0 20 40\");\n    });","file":"unit/display_utils_spec.js","skipped":false,"dir":"test"},{"name":"`createElement` should throw an error if the type is not a string","suites":["display_utils","DOMSVGFactory"],"line":142,"updatePoint":{"line":142,"column":73,"index":5273},"code":"    it(\"`createElement` should throw an error if the type is not a string\", function () {\n      expect(function () {\n        return svgFactory.createElement(true);\n      }).toThrow(new Error(\"Invalid SVG element type\"));\n    });","file":"unit/display_utils_spec.js","skipped":false,"dir":"test"},{"name":"`createElement` should return an SVG element if the type is valid","suites":["display_utils","DOMSVGFactory"],"line":147,"updatePoint":{"line":147,"column":73,"index":5502},"code":"    it(\"`createElement` should return an SVG element if the type is valid\", function () {\n      if (isNodeJS) {\n        pending(\"Document is not supported in Node.js.\");\n      }\n      const svg = svgFactory.createElement(\"svg:rect\");\n      expect(svg instanceof SVGRectElement).toBe(true);\n    });","file":"unit/display_utils_spec.js","skipped":false,"dir":"test"},{"name":"should get the filename from an absolute URL","suites":["display_utils","getFilenameFromUrl"],"line":156,"updatePoint":{"line":156,"column":52,"index":5832},"code":"    it(\"should get the filename from an absolute URL\", function () {\n      const url = \"https://server.org/filename.pdf\";\n      expect(getFilenameFromUrl(url)).toEqual(\"filename.pdf\");\n    });","file":"unit/display_utils_spec.js","skipped":false,"dir":"test"},{"name":"should get the filename from a relative URL","suites":["display_utils","getFilenameFromUrl"],"line":160,"updatePoint":{"line":160,"column":51,"index":6024},"code":"    it(\"should get the filename from a relative URL\", function () {\n      const url = \"../../filename.pdf\";\n      expect(getFilenameFromUrl(url)).toEqual(\"filename.pdf\");\n    });","file":"unit/display_utils_spec.js","skipped":false,"dir":"test"},{"name":"should get the filename from a URL with an anchor","suites":["display_utils","getFilenameFromUrl"],"line":164,"updatePoint":{"line":164,"column":57,"index":6209},"code":"    it(\"should get the filename from a URL with an anchor\", function () {\n      const url = \"https://server.org/filename.pdf#foo\";\n      expect(getFilenameFromUrl(url)).toEqual(\"filename.pdf\");\n    });","file":"unit/display_utils_spec.js","skipped":false,"dir":"test"},{"name":"should get the filename from a URL with query parameters","suites":["display_utils","getFilenameFromUrl"],"line":168,"updatePoint":{"line":168,"column":64,"index":6418},"code":"    it(\"should get the filename from a URL with query parameters\", function () {\n      const url = \"https://server.org/filename.pdf?foo=bar\";\n      expect(getFilenameFromUrl(url)).toEqual(\"filename.pdf\");\n    });","file":"unit/display_utils_spec.js","skipped":false,"dir":"test"},{"name":"should get the filename from a relative URL, keeping the anchor","suites":["display_utils","getFilenameFromUrl"],"line":172,"updatePoint":{"line":172,"column":71,"index":6638},"code":"    it(\"should get the filename from a relative URL, keeping the anchor\", function () {\n      const url = \"../../part1#part2.pdf\";\n      expect(getFilenameFromUrl(url, /* onlyStripPath = */true)).toEqual(\"part1#part2.pdf\");\n    });","file":"unit/display_utils_spec.js","skipped":false,"dir":"test"},{"name":"gets PDF filename","suites":["display_utils","getPdfFilenameFromUrl"],"line":178,"updatePoint":{"line":178,"column":25,"index":6880},"code":"    it(\"gets PDF filename\", function () {\n      // Relative URL\n      expect(getPdfFilenameFromUrl(\"/pdfs/file1.pdf\")).toEqual(\"file1.pdf\");\n      // Absolute URL\n      expect(getPdfFilenameFromUrl(\"http://www.example.com/pdfs/file2.pdf\")).toEqual(\"file2.pdf\");\n    });","file":"unit/display_utils_spec.js","skipped":false,"dir":"test"},{"name":"gets fallback filename","suites":["display_utils","getPdfFilenameFromUrl"],"line":184,"updatePoint":{"line":184,"column":30,"index":7155},"code":"    it(\"gets fallback filename\", function () {\n      // Relative URL\n      expect(getPdfFilenameFromUrl(\"/pdfs/file1.txt\")).toEqual(\"document.pdf\");\n      // Absolute URL\n      expect(getPdfFilenameFromUrl(\"http://www.example.com/pdfs/file2.txt\")).toEqual(\"document.pdf\");\n    });","file":"unit/display_utils_spec.js","skipped":false,"dir":"test"},{"name":"gets custom fallback filename","suites":["display_utils","getPdfFilenameFromUrl"],"line":190,"updatePoint":{"line":190,"column":37,"index":7443},"code":"    it(\"gets custom fallback filename\", function () {\n      // Relative URL\n      expect(getPdfFilenameFromUrl(\"/pdfs/file1.txt\", \"qwerty1.pdf\")).toEqual(\"qwerty1.pdf\");\n      // Absolute URL\n      expect(getPdfFilenameFromUrl(\"http://www.example.com/pdfs/file2.txt\", \"qwerty2.pdf\")).toEqual(\"qwerty2.pdf\");\n\n      // An empty string should be a valid custom fallback filename.\n      expect(getPdfFilenameFromUrl(\"/pdfs/file3.txt\", \"\")).toEqual(\"\");\n    });","file":"unit/display_utils_spec.js","skipped":false,"dir":"test"},{"name":"gets fallback filename when url is not a string","suites":["display_utils","getPdfFilenameFromUrl"],"line":199,"updatePoint":{"line":199,"column":55,"index":7919},"code":"    it(\"gets fallback filename when url is not a string\", function () {\n      expect(getPdfFilenameFromUrl(null)).toEqual(\"document.pdf\");\n      expect(getPdfFilenameFromUrl(null, \"file.pdf\")).toEqual(\"file.pdf\");\n    });","file":"unit/display_utils_spec.js","skipped":false,"dir":"test"},{"name":"gets PDF filename from URL containing leading/trailing whitespace","suites":["display_utils","getPdfFilenameFromUrl"],"line":203,"updatePoint":{"line":203,"column":73,"index":8159},"code":"    it(\"gets PDF filename from URL containing leading/trailing whitespace\", function () {\n      // Relative URL\n      expect(getPdfFilenameFromUrl(\"   /pdfs/file1.pdf   \")).toEqual(\"file1.pdf\");\n      // Absolute URL\n      expect(getPdfFilenameFromUrl(\"   http://www.example.com/pdfs/file2.pdf   \")).toEqual(\"file2.pdf\");\n    });","file":"unit/display_utils_spec.js","skipped":false,"dir":"test"},{"name":"gets PDF filename from query string","suites":["display_utils","getPdfFilenameFromUrl"],"line":209,"updatePoint":{"line":209,"column":43,"index":8459},"code":"    it(\"gets PDF filename from query string\", function () {\n      // Relative URL\n      expect(getPdfFilenameFromUrl(\"/pdfs/pdfs.html?name=file1.pdf\")).toEqual(\"file1.pdf\");\n      // Absolute URL\n      expect(getPdfFilenameFromUrl(\"http://www.example.com/pdfs/pdf.html?file2.pdf\")).toEqual(\"file2.pdf\");\n    });","file":"unit/display_utils_spec.js","skipped":false,"dir":"test"},{"name":"gets PDF filename from hash string","suites":["display_utils","getPdfFilenameFromUrl"],"line":215,"updatePoint":{"line":215,"column":42,"index":8770},"code":"    it(\"gets PDF filename from hash string\", function () {\n      // Relative URL\n      expect(getPdfFilenameFromUrl(\"/pdfs/pdfs.html#name=file1.pdf\")).toEqual(\"file1.pdf\");\n      // Absolute URL\n      expect(getPdfFilenameFromUrl(\"http://www.example.com/pdfs/pdf.html#file2.pdf\")).toEqual(\"file2.pdf\");\n    });","file":"unit/display_utils_spec.js","skipped":false,"dir":"test"},{"name":"gets correct PDF filename when multiple ones are present","suites":["display_utils","getPdfFilenameFromUrl"],"line":221,"updatePoint":{"line":221,"column":64,"index":9103},"code":"    it(\"gets correct PDF filename when multiple ones are present\", function () {\n      // Relative URL\n      expect(getPdfFilenameFromUrl(\"/pdfs/file1.pdf?name=file.pdf\")).toEqual(\"file1.pdf\");\n      // Absolute URL\n      expect(getPdfFilenameFromUrl(\"http://www.example.com/pdfs/file2.pdf#file.pdf\")).toEqual(\"file2.pdf\");\n    });","file":"unit/display_utils_spec.js","skipped":false,"dir":"test"},{"name":"gets PDF filename from URI-encoded data","suites":["display_utils","getPdfFilenameFromUrl"],"line":227,"updatePoint":{"line":227,"column":47,"index":9418},"code":"    it(\"gets PDF filename from URI-encoded data\", function () {\n      const encodedUrl = encodeURIComponent(\"http://www.example.com/pdfs/file1.pdf\");\n      expect(getPdfFilenameFromUrl(encodedUrl)).toEqual(\"file1.pdf\");\n      const encodedUrlWithQuery = encodeURIComponent(\"http://www.example.com/pdfs/file.txt?file2.pdf\");\n      expect(getPdfFilenameFromUrl(encodedUrlWithQuery)).toEqual(\"file2.pdf\");\n    });","file":"unit/display_utils_spec.js","skipped":false,"dir":"test"},{"name":"gets PDF filename from data mistaken for URI-encoded","suites":["display_utils","getPdfFilenameFromUrl"],"line":233,"updatePoint":{"line":233,"column":60,"index":9842},"code":"    it(\"gets PDF filename from data mistaken for URI-encoded\", function () {\n      expect(getPdfFilenameFromUrl(\"/pdfs/%AA.pdf\")).toEqual(\"%AA.pdf\");\n      expect(getPdfFilenameFromUrl(\"/pdfs/%2F.pdf\")).toEqual(\"%2F.pdf\");\n    });","file":"unit/display_utils_spec.js","skipped":false,"dir":"test"},{"name":"gets PDF filename from (some) standard protocols","suites":["display_utils","getPdfFilenameFromUrl"],"line":237,"updatePoint":{"line":237,"column":56,"index":10069},"code":"    it(\"gets PDF filename from (some) standard protocols\", function () {\n      // HTTP\n      expect(getPdfFilenameFromUrl(\"http://www.example.com/file1.pdf\")).toEqual(\"file1.pdf\");\n      // HTTPS\n      expect(getPdfFilenameFromUrl(\"https://www.example.com/file2.pdf\")).toEqual(\"file2.pdf\");\n      // File\n      expect(getPdfFilenameFromUrl(\"file:///path/to/files/file3.pdf\")).toEqual(\"file3.pdf\");\n      // FTP\n      expect(getPdfFilenameFromUrl(\"ftp://www.example.com/file4.pdf\")).toEqual(\"file4.pdf\");\n    });","file":"unit/display_utils_spec.js","skipped":false,"dir":"test"},{"name":"gets PDF filename from query string appended to \"blob:\" URL","suites":["display_utils","getPdfFilenameFromUrl"],"line":247,"updatePoint":{"line":247,"column":67,"index":10592},"code":"    it('gets PDF filename from query string appended to \"blob:\" URL', function () {\n      if (isNodeJS) {\n        pending(\"Blob in not supported in Node.js.\");\n      }\n      const typedArray = new Uint8Array([1, 2, 3, 4, 5]);\n      const blobUrl = URL.createObjectURL(new Blob([typedArray], {\n        type: \"application/pdf\"\n      }));\n      // Sanity check to ensure that a \"blob:\" URL was returned.\n      expect(blobUrl.startsWith(\"blob:\")).toEqual(true);\n      expect(getPdfFilenameFromUrl(blobUrl + \"?file.pdf\")).toEqual(\"file.pdf\");\n    });","file":"unit/display_utils_spec.js","skipped":false,"dir":"test"},{"name":"gets fallback filename from query string appended to \"data:\" URL","suites":["display_utils","getPdfFilenameFromUrl"],"line":259,"updatePoint":{"line":259,"column":72,"index":11143},"code":"    it('gets fallback filename from query string appended to \"data:\" URL', function () {\n      const typedArray = new Uint8Array([1, 2, 3, 4, 5]),\n        str = bytesToString(typedArray);\n      const dataUrl = `data:application/pdf;base64,${btoa(str)}`;\n      // Sanity check to ensure that a \"data:\" URL was returned.\n      expect(dataUrl.startsWith(\"data:\")).toEqual(true);\n      expect(getPdfFilenameFromUrl(dataUrl + \"?file1.pdf\")).toEqual(\"document.pdf\");\n\n      // Should correctly detect a \"data:\" URL with leading whitespace.\n      expect(getPdfFilenameFromUrl(\"     \" + dataUrl + \"?file2.pdf\")).toEqual(\"document.pdf\");\n    });","file":"unit/display_utils_spec.js","skipped":false,"dir":"test"},{"name":"handles invalid Fetch URLs","suites":["display_utils","isValidFetchUrl"],"line":272,"updatePoint":{"line":272,"column":34,"index":11792},"code":"    it(\"handles invalid Fetch URLs\", function () {\n      expect(isValidFetchUrl(null)).toEqual(false);\n      expect(isValidFetchUrl(100)).toEqual(false);\n      expect(isValidFetchUrl(\"foo\")).toEqual(false);\n      expect(isValidFetchUrl(\"/foo\", 100)).toEqual(false);\n    });","file":"unit/display_utils_spec.js","skipped":false,"dir":"test"},{"name":"handles relative Fetch URLs","suites":["display_utils","isValidFetchUrl"],"line":278,"updatePoint":{"line":278,"column":35,"index":12067},"code":"    it(\"handles relative Fetch URLs\", function () {\n      expect(isValidFetchUrl(\"/foo\", \"file://www.example.com\")).toEqual(false);\n      expect(isValidFetchUrl(\"/foo\", \"http://www.example.com\")).toEqual(true);\n    });","file":"unit/display_utils_spec.js","skipped":false,"dir":"test"},{"name":"handles unsupported Fetch protocols","suites":["display_utils","isValidFetchUrl"],"line":282,"updatePoint":{"line":282,"column":43,"index":12294},"code":"    it(\"handles unsupported Fetch protocols\", function () {\n      expect(isValidFetchUrl(\"file://www.example.com\")).toEqual(false);\n      expect(isValidFetchUrl(\"ftp://www.example.com\")).toEqual(false);\n    });","file":"unit/display_utils_spec.js","skipped":false,"dir":"test"},{"name":"handles supported Fetch protocols","suites":["display_utils","isValidFetchUrl"],"line":286,"updatePoint":{"line":286,"column":41,"index":12503},"code":"    it(\"handles supported Fetch protocols\", function () {\n      expect(isValidFetchUrl(\"http://www.example.com\")).toEqual(true);\n      expect(isValidFetchUrl(\"https://www.example.com\")).toEqual(true);\n    });","file":"unit/display_utils_spec.js","skipped":false,"dir":"test"},{"name":"converts PDF date strings to JavaScript `Date` objects","suites":["display_utils","PDFDateString","toDateObject"],"line":293,"updatePoint":{"line":293,"column":64,"index":12826},"code":"      it(\"converts PDF date strings to JavaScript `Date` objects\", function () {\n        const expectations = {\n          undefined: null,\n          null: null,\n          42: null,\n          2019: null,\n          D2019: null,\n          \"D:\": null,\n          \"D:201\": null,\n          \"D:2019\": new Date(Date.UTC(2019, 0, 1, 0, 0, 0)),\n          \"D:20190\": new Date(Date.UTC(2019, 0, 1, 0, 0, 0)),\n          \"D:201900\": new Date(Date.UTC(2019, 0, 1, 0, 0, 0)),\n          \"D:201913\": new Date(Date.UTC(2019, 0, 1, 0, 0, 0)),\n          \"D:201902\": new Date(Date.UTC(2019, 1, 1, 0, 0, 0)),\n          \"D:2019020\": new Date(Date.UTC(2019, 1, 1, 0, 0, 0)),\n          \"D:20190200\": new Date(Date.UTC(2019, 1, 1, 0, 0, 0)),\n          \"D:20190232\": new Date(Date.UTC(2019, 1, 1, 0, 0, 0)),\n          \"D:20190203\": new Date(Date.UTC(2019, 1, 3, 0, 0, 0)),\n          // Invalid dates like the 31th of April are handled by JavaScript:\n          \"D:20190431\": new Date(Date.UTC(2019, 4, 1, 0, 0, 0)),\n          \"D:201902030\": new Date(Date.UTC(2019, 1, 3, 0, 0, 0)),\n          \"D:2019020300\": new Date(Date.UTC(2019, 1, 3, 0, 0, 0)),\n          \"D:2019020324\": new Date(Date.UTC(2019, 1, 3, 0, 0, 0)),\n          \"D:2019020304\": new Date(Date.UTC(2019, 1, 3, 4, 0, 0)),\n          \"D:20190203040\": new Date(Date.UTC(2019, 1, 3, 4, 0, 0)),\n          \"D:201902030400\": new Date(Date.UTC(2019, 1, 3, 4, 0, 0)),\n          \"D:201902030460\": new Date(Date.UTC(2019, 1, 3, 4, 0, 0)),\n          \"D:201902030405\": new Date(Date.UTC(2019, 1, 3, 4, 5, 0)),\n          \"D:2019020304050\": new Date(Date.UTC(2019, 1, 3, 4, 5, 0)),\n          \"D:20190203040500\": new Date(Date.UTC(2019, 1, 3, 4, 5, 0)),\n          \"D:20190203040560\": new Date(Date.UTC(2019, 1, 3, 4, 5, 0)),\n          \"D:20190203040506\": new Date(Date.UTC(2019, 1, 3, 4, 5, 6)),\n          \"D:20190203040506F\": new Date(Date.UTC(2019, 1, 3, 4, 5, 6)),\n          \"D:20190203040506Z\": new Date(Date.UTC(2019, 1, 3, 4, 5, 6)),\n          \"D:20190203040506-\": new Date(Date.UTC(2019, 1, 3, 4, 5, 6)),\n          \"D:20190203040506+\": new Date(Date.UTC(2019, 1, 3, 4, 5, 6)),\n          \"D:20190203040506+'\": new Date(Date.UTC(2019, 1, 3, 4, 5, 6)),\n          \"D:20190203040506+0\": new Date(Date.UTC(2019, 1, 3, 4, 5, 6)),\n          \"D:20190203040506+01\": new Date(Date.UTC(2019, 1, 3, 3, 5, 6)),\n          \"D:20190203040506+00'\": new Date(Date.UTC(2019, 1, 3, 4, 5, 6)),\n          \"D:20190203040506+24'\": new Date(Date.UTC(2019, 1, 3, 4, 5, 6)),\n          \"D:20190203040506+01'\": new Date(Date.UTC(2019, 1, 3, 3, 5, 6)),\n          \"D:20190203040506+01'0\": new Date(Date.UTC(2019, 1, 3, 3, 5, 6)),\n          \"D:20190203040506+01'00\": new Date(Date.UTC(2019, 1, 3, 3, 5, 6)),\n          \"D:20190203040506+01'60\": new Date(Date.UTC(2019, 1, 3, 3, 5, 6)),\n          \"D:20190203040506+0102\": new Date(Date.UTC(2019, 1, 3, 3, 3, 6)),\n          \"D:20190203040506+01'02\": new Date(Date.UTC(2019, 1, 3, 3, 3, 6)),\n          \"D:20190203040506+01'02'\": new Date(Date.UTC(2019, 1, 3, 3, 3, 6)),\n          // Offset hour and minute that result in a day change:\n          \"D:20190203040506+05'07\": new Date(Date.UTC(2019, 1, 2, 22, 58, 6))\n        };\n        for (const [input, expectation] of Object.entries(expectations)) {\n          const result = PDFDateString.toDateObject(input);\n          if (result) {\n            expect(result.getTime()).toEqual(expectation.getTime());\n          } else {\n            expect(result).toEqual(expectation);\n          }\n        }\n      });","file":"unit/display_utils_spec.js","skipped":false,"dir":"test"},{"name":"should create correct objId/fontId using the idFactory","suites":["document","Page"],"line":22,"updatePoint":{"line":22,"column":62,"index":971},"code":"    it(\"should create correct objId/fontId using the idFactory\", function () {\n      const idFactory1 = createIdFactory( /* pageIndex = */0);\n      const idFactory2 = createIdFactory( /* pageIndex = */1);\n      expect(idFactory1.createObjId()).toEqual(\"p0_1\");\n      expect(idFactory1.createObjId()).toEqual(\"p0_2\");\n      expect(idFactory1.createFontId()).toEqual(\"f1\");\n      expect(idFactory1.createFontId()).toEqual(\"f2\");\n      expect(idFactory1.getDocId()).toEqual(\"g_d0\");\n      expect(idFactory2.createObjId()).toEqual(\"p1_1\");\n      expect(idFactory2.createObjId()).toEqual(\"p1_2\");\n      expect(idFactory2.createFontId()).toEqual(\"f1\");\n      expect(idFactory2.createFontId()).toEqual(\"f2\");\n      expect(idFactory2.getDocId()).toEqual(\"g_d0\");\n      expect(idFactory1.createObjId()).toEqual(\"p0_3\");\n      expect(idFactory1.createObjId()).toEqual(\"p0_4\");\n      expect(idFactory1.createFontId()).toEqual(\"f3\");\n      expect(idFactory1.createFontId()).toEqual(\"f4\");\n      expect(idFactory1.getDocId()).toEqual(\"g_d0\");\n    });","file":"unit/document_spec.js","skipped":false,"dir":"test"},{"name":"should get form info when no form data is present","suites":["document","PDFDocument"],"line":76,"updatePoint":{"line":76,"column":57,"index":3009},"code":"    it(\"should get form info when no form data is present\", function () {\n      const pdfDocument = getDocument(null);\n      expect(pdfDocument.formInfo).toEqual({\n        hasAcroForm: false,\n        hasSignatures: false,\n        hasXfa: false,\n        hasFields: false\n      });\n    });","file":"unit/document_spec.js","skipped":false,"dir":"test"},{"name":"should get form info when XFA is present","suites":["document","PDFDocument"],"line":85,"updatePoint":{"line":85,"column":48,"index":3288},"code":"    it(\"should get form info when XFA is present\", function () {\n      const acroForm = new Dict();\n\n      // The `XFA` entry can only be a non-empty array or stream.\n      acroForm.set(\"XFA\", []);\n      let pdfDocument = getDocument(acroForm);\n      expect(pdfDocument.formInfo).toEqual({\n        hasAcroForm: false,\n        hasSignatures: false,\n        hasXfa: false,\n        hasFields: false\n      });\n      acroForm.set(\"XFA\", [\"foo\", \"bar\"]);\n      pdfDocument = getDocument(acroForm);\n      expect(pdfDocument.formInfo).toEqual({\n        hasAcroForm: false,\n        hasSignatures: false,\n        hasXfa: true,\n        hasFields: false\n      });\n      acroForm.set(\"XFA\", new StringStream(\"\"));\n      pdfDocument = getDocument(acroForm);\n      expect(pdfDocument.formInfo).toEqual({\n        hasAcroForm: false,\n        hasSignatures: false,\n        hasXfa: false,\n        hasFields: false\n      });\n      acroForm.set(\"XFA\", new StringStream(\"non-empty\"));\n      pdfDocument = getDocument(acroForm);\n      expect(pdfDocument.formInfo).toEqual({\n        hasAcroForm: false,\n        hasSignatures: false,\n        hasXfa: true,\n        hasFields: false\n      });\n    });","file":"unit/document_spec.js","skipped":false,"dir":"test"},{"name":"should get form info when AcroForm is present","suites":["document","PDFDocument"],"line":122,"updatePoint":{"line":122,"column":53,"index":4467},"code":"    it(\"should get form info when AcroForm is present\", function () {\n      const acroForm = new Dict();\n\n      // The `Fields` entry can only be a non-empty array.\n      acroForm.set(\"Fields\", []);\n      let pdfDocument = getDocument(acroForm);\n      expect(pdfDocument.formInfo).toEqual({\n        hasAcroForm: false,\n        hasSignatures: false,\n        hasXfa: false,\n        hasFields: false\n      });\n      acroForm.set(\"Fields\", [\"foo\", \"bar\"]);\n      pdfDocument = getDocument(acroForm);\n      expect(pdfDocument.formInfo).toEqual({\n        hasAcroForm: true,\n        hasSignatures: false,\n        hasXfa: false,\n        hasFields: true\n      });\n\n      // If the first bit of the `SigFlags` entry is set and the `Fields` array\n      // only contains document signatures, then there is no AcroForm data.\n      acroForm.set(\"Fields\", [\"foo\", \"bar\"]);\n      acroForm.set(\"SigFlags\", 2);\n      pdfDocument = getDocument(acroForm);\n      expect(pdfDocument.formInfo).toEqual({\n        hasAcroForm: true,\n        hasSignatures: false,\n        hasXfa: false,\n        hasFields: true\n      });\n      const annotationDict = new Dict();\n      annotationDict.set(\"FT\", Name.get(\"Sig\"));\n      annotationDict.set(\"Rect\", [0, 0, 0, 0]);\n      const annotationRef = Ref.get(11, 0);\n      const kidsDict = new Dict();\n      kidsDict.set(\"Kids\", [annotationRef]);\n      const kidsRef = Ref.get(10, 0);\n      const xref = new XRefMock([{\n        ref: annotationRef,\n        data: annotationDict\n      }, {\n        ref: kidsRef,\n        data: kidsDict\n      }]);\n      acroForm.set(\"Fields\", [kidsRef]);\n      acroForm.set(\"SigFlags\", 3);\n      pdfDocument = getDocument(acroForm, xref);\n      expect(pdfDocument.formInfo).toEqual({\n        hasAcroForm: false,\n        hasSignatures: true,\n        hasXfa: false,\n        hasFields: true\n      });\n    });","file":"unit/document_spec.js","skipped":false,"dir":"test"},{"name":"should get calculation order array or null","suites":["document","PDFDocument"],"line":178,"updatePoint":{"line":178,"column":50,"index":6310},"code":"    it(\"should get calculation order array or null\", function () {\n      const acroForm = new Dict();\n      let pdfDocument = getDocument(acroForm);\n      expect(pdfDocument.calculationOrderIds).toEqual(null);\n      acroForm.set(\"CO\", [Ref.get(1, 0), Ref.get(2, 0), Ref.get(3, 0)]);\n      pdfDocument = getDocument(acroForm);\n      expect(pdfDocument.calculationOrderIds).toEqual([\"1R\", \"2R\", \"3R\"]);\n      acroForm.set(\"CO\", []);\n      pdfDocument = getDocument(acroForm);\n      expect(pdfDocument.calculationOrderIds).toEqual(null);\n      acroForm.set(\"CO\", [\"1\", \"2\"]);\n      pdfDocument = getDocument(acroForm);\n      expect(pdfDocument.calculationOrderIds).toEqual(null);\n      acroForm.set(\"CO\", [\"1\", Ref.get(1, 0), \"2\"]);\n      pdfDocument = getDocument(acroForm);\n      expect(pdfDocument.calculationOrderIds).toEqual([\"1R\"]);\n    });","file":"unit/document_spec.js","skipped":false,"dir":"test"},{"name":"should get field objects array or null","suites":["document","PDFDocument"],"line":195,"updatePoint":{"line":195,"column":46,"index":7150},"code":"    it(\"should get field objects array or null\", async function () {\n      const acroForm = new Dict();\n      let pdfDocument = getDocument(acroForm);\n      let fields = await pdfDocument.fieldObjects;\n      expect(fields).toEqual(null);\n      acroForm.set(\"Fields\", []);\n      pdfDocument = getDocument(acroForm);\n      fields = await pdfDocument.fieldObjects;\n      expect(fields).toEqual(null);\n      const kid1Ref = Ref.get(314, 0);\n      const kid11Ref = Ref.get(159, 0);\n      const kid2Ref = Ref.get(265, 0);\n      const kid2BisRef = Ref.get(266, 0);\n      const parentRef = Ref.get(358, 0);\n      const allFields = Object.create(null);\n      for (const name of [\"parent\", \"kid1\", \"kid2\", \"kid11\"]) {\n        const buttonWidgetDict = new Dict();\n        buttonWidgetDict.set(\"Type\", Name.get(\"Annot\"));\n        buttonWidgetDict.set(\"Subtype\", Name.get(\"Widget\"));\n        buttonWidgetDict.set(\"FT\", Name.get(\"Btn\"));\n        buttonWidgetDict.set(\"T\", name);\n        allFields[name] = buttonWidgetDict;\n      }\n      allFields.kid1.set(\"Kids\", [kid11Ref]);\n      allFields.parent.set(\"Kids\", [kid1Ref, kid2Ref, kid2BisRef]);\n      const xref = new XRefMock([{\n        ref: parentRef,\n        data: allFields.parent\n      }, {\n        ref: kid1Ref,\n        data: allFields.kid1\n      }, {\n        ref: kid11Ref,\n        data: allFields.kid11\n      }, {\n        ref: kid2Ref,\n        data: allFields.kid2\n      }, {\n        ref: kid2BisRef,\n        data: allFields.kid2\n      }]);\n      acroForm.set(\"Fields\", [parentRef]);\n      pdfDocument = getDocument(acroForm, xref);\n      fields = await pdfDocument.fieldObjects;\n      for (const [name, objs] of Object.entries(fields)) {\n        fields[name] = objs.map(obj => obj.id);\n      }\n      expect(fields[\"parent.kid1\"]).toEqual([\"314R\"]);\n      expect(fields[\"parent.kid1.kid11\"]).toEqual([\"159R\"]);\n      expect(fields[\"parent.kid2\"]).toEqual([\"265R\", \"266R\"]);\n      expect(fields.parent).toEqual([\"358R\"]);\n    });","file":"unit/document_spec.js","skipped":false,"dir":"test"},{"name":"should check if fields have any actions","suites":["document","PDFDocument"],"line":247,"updatePoint":{"line":247,"column":47,"index":9124},"code":"    it(\"should check if fields have any actions\", async function () {\n      const acroForm = new Dict();\n      let pdfDocument = getDocument(acroForm);\n      let hasJSActions = await pdfDocument.hasJSActions;\n      expect(hasJSActions).toEqual(false);\n      acroForm.set(\"Fields\", []);\n      pdfDocument = getDocument(acroForm);\n      hasJSActions = await pdfDocument.hasJSActions;\n      expect(hasJSActions).toEqual(false);\n      const kid1Ref = Ref.get(314, 0);\n      const kid11Ref = Ref.get(159, 0);\n      const kid2Ref = Ref.get(265, 0);\n      const parentRef = Ref.get(358, 0);\n      const allFields = Object.create(null);\n      for (const name of [\"parent\", \"kid1\", \"kid2\", \"kid11\"]) {\n        const buttonWidgetDict = new Dict();\n        buttonWidgetDict.set(\"Type\", Name.get(\"Annot\"));\n        buttonWidgetDict.set(\"Subtype\", Name.get(\"Widget\"));\n        buttonWidgetDict.set(\"FT\", Name.get(\"Btn\"));\n        buttonWidgetDict.set(\"T\", name);\n        allFields[name] = buttonWidgetDict;\n      }\n      allFields.kid1.set(\"Kids\", [kid11Ref]);\n      allFields.parent.set(\"Kids\", [kid1Ref, kid2Ref]);\n      const xref = new XRefMock([{\n        ref: parentRef,\n        data: allFields.parent\n      }, {\n        ref: kid1Ref,\n        data: allFields.kid1\n      }, {\n        ref: kid11Ref,\n        data: allFields.kid11\n      }, {\n        ref: kid2Ref,\n        data: allFields.kid2\n      }]);\n      acroForm.set(\"Fields\", [parentRef]);\n      pdfDocument = getDocument(acroForm, xref);\n      hasJSActions = await pdfDocument.hasJSActions;\n      expect(hasJSActions).toEqual(false);\n      const JS = Name.get(\"JavaScript\");\n      const additionalActionsDict = new Dict();\n      const eDict = new Dict();\n      eDict.set(\"JS\", \"hello()\");\n      eDict.set(\"S\", JS);\n      additionalActionsDict.set(\"E\", eDict);\n      allFields.kid2.set(\"AA\", additionalActionsDict);\n      pdfDocument = getDocument(acroForm, xref);\n      hasJSActions = await pdfDocument.hasJSActions;\n      expect(hasJSActions).toEqual(true);\n    });","file":"unit/document_spec.js","skipped":false,"dir":"test"},{"name":"should check undo/redo","suites":["editor","Command Manager"],"line":19,"updatePoint":{"line":19,"column":30,"index":776},"code":"    it(\"should check undo/redo\", function () {\n      const manager = new CommandManager(4);\n      let x = 0;\n      const makeDoUndo = n => ({\n        cmd: () => x += n,\n        undo: () => x -= n\n      });\n      manager.add({\n        ...makeDoUndo(1),\n        mustExec: true\n      });\n      expect(x).toEqual(1);\n      manager.add({\n        ...makeDoUndo(2),\n        mustExec: true\n      });\n      expect(x).toEqual(3);\n      manager.add({\n        ...makeDoUndo(3),\n        mustExec: true\n      });\n      expect(x).toEqual(6);\n      manager.undo();\n      expect(x).toEqual(3);\n      manager.undo();\n      expect(x).toEqual(1);\n      manager.undo();\n      expect(x).toEqual(0);\n      manager.undo();\n      expect(x).toEqual(0);\n      manager.redo();\n      expect(x).toEqual(1);\n      manager.redo();\n      expect(x).toEqual(3);\n      manager.redo();\n      expect(x).toEqual(6);\n      manager.redo();\n      expect(x).toEqual(6);\n      manager.undo();\n      expect(x).toEqual(3);\n      manager.redo();\n      expect(x).toEqual(6);\n    });","file":"unit/editor_spec.js","skipped":false,"dir":"test"},{"name":"should hit the limit of the manager","suites":["editor","Command Manager"],"line":63,"updatePoint":{"line":63,"column":41,"index":1828},"code":"  it(\"should hit the limit of the manager\", function () {\n    const manager = new CommandManager(3);\n    let x = 0;\n    const makeDoUndo = n => ({\n      cmd: () => x += n,\n      undo: () => x -= n\n    });\n    manager.add({\n      ...makeDoUndo(1),\n      mustExec: true\n    }); // 1\n    manager.add({\n      ...makeDoUndo(2),\n      mustExec: true\n    }); // 3\n    manager.add({\n      ...makeDoUndo(3),\n      mustExec: true\n    }); // 6\n    manager.add({\n      ...makeDoUndo(4),\n      mustExec: true\n    }); // 10\n    expect(x).toEqual(10);\n    manager.undo();\n    manager.undo();\n    expect(x).toEqual(3);\n    manager.undo();\n    expect(x).toEqual(1);\n    manager.undo();\n    expect(x).toEqual(1);\n    manager.redo();\n    manager.redo();\n    expect(x).toEqual(6);\n    manager.add({\n      ...makeDoUndo(5),\n      mustExec: true\n    });\n    expect(x).toEqual(11);\n  });","file":"unit/editor_spec.js","skipped":false,"dir":"test"},{"name":"fetches a valid array for known encoding names","suites":["encodings","getEncoding"],"line":19,"updatePoint":{"line":19,"column":54,"index":790},"code":"    it(\"fetches a valid array for known encoding names\", function () {\n      const knownEncodingNames = [\"ExpertEncoding\", \"MacExpertEncoding\", \"MacRomanEncoding\", \"StandardEncoding\", \"SymbolSetEncoding\", \"WinAnsiEncoding\", \"ZapfDingbatsEncoding\"];\n      for (const knownEncodingName of knownEncodingNames) {\n        const encoding = getEncoding(knownEncodingName);\n        expect(Array.isArray(encoding)).toEqual(true);\n        expect(encoding.length).toEqual(256);\n        for (const item of encoding) {\n          expect(typeof item).toEqual(\"string\");\n        }\n      }\n    });","file":"unit/encodings_spec.js","skipped":false,"dir":"test"},{"name":"fetches `null` for unknown encoding names","suites":["encodings","getEncoding"],"line":30,"updatePoint":{"line":30,"column":49,"index":1366},"code":"    it(\"fetches `null` for unknown encoding names\", function () {\n      expect(getEncoding(\"FooBarEncoding\")).toEqual(null);\n    });","file":"unit/encodings_spec.js","skipped":false,"dir":"test"},{"name":"should reject unknown operations","suites":["evaluator","splitCombinedOperations"],"line":65,"updatePoint":{"line":65,"column":40,"index":2059},"code":"    it(\"should reject unknown operations\", async function () {\n      const stream = new StringStream(\"fTT\");\n      const result = await runOperatorListCheck(partialEvaluator, stream, new ResourcesMock());\n      expect(!!result.fnArray && !!result.argsArray).toEqual(true);\n      expect(result.fnArray.length).toEqual(1);\n      expect(result.fnArray[0]).toEqual(OPS.fill);\n      expect(result.argsArray[0]).toEqual(null);\n    });","file":"unit/evaluator_spec.js","skipped":false,"dir":"test"},{"name":"should handle one operation","suites":["evaluator","splitCombinedOperations"],"line":73,"updatePoint":{"line":73,"column":35,"index":2483},"code":"    it(\"should handle one operation\", async function () {\n      const stream = new StringStream(\"Q\");\n      const result = await runOperatorListCheck(partialEvaluator, stream, new ResourcesMock());\n      expect(!!result.fnArray && !!result.argsArray).toEqual(true);\n      expect(result.fnArray.length).toEqual(1);\n      expect(result.fnArray[0]).toEqual(OPS.restore);\n    });","file":"unit/evaluator_spec.js","skipped":false,"dir":"test"},{"name":"should handle two glued operations","suites":["evaluator","splitCombinedOperations"],"line":80,"updatePoint":{"line":80,"column":42,"index":2866},"code":"    it(\"should handle two glued operations\", async function () {\n      const imgDict = new Dict();\n      imgDict.set(\"Subtype\", Name.get(\"Image\"));\n      imgDict.set(\"Width\", 1);\n      imgDict.set(\"Height\", 1);\n      const imgStream = new Stream([0]);\n      imgStream.dict = imgDict;\n      const xObject = new Dict();\n      xObject.set(\"Res1\", imgStream);\n      const resources = new ResourcesMock();\n      resources.XObject = xObject;\n      const stream = new StringStream(\"/Res1 DoQ\");\n      const result = await runOperatorListCheck(partialEvaluator, stream, resources);\n      expect(result.fnArray.length).toEqual(3);\n      expect(result.fnArray[0]).toEqual(OPS.dependency);\n      expect(result.fnArray[1]).toEqual(OPS.paintImageXObject);\n      expect(result.fnArray[2]).toEqual(OPS.restore);\n      expect(result.argsArray.length).toEqual(3);\n      expect(result.argsArray[0]).toEqual([\"img_p0_1\"]);\n      expect(result.argsArray[1]).toEqual([\"img_p0_1\", 1, 1]);\n      expect(result.argsArray[2]).toEqual(null);\n    });","file":"unit/evaluator_spec.js","skipped":false,"dir":"test"},{"name":"should handle three glued operations","suites":["evaluator","splitCombinedOperations"],"line":102,"updatePoint":{"line":102,"column":44,"index":3892},"code":"    it(\"should handle three glued operations\", async function () {\n      const stream = new StringStream(\"fff\");\n      const result = await runOperatorListCheck(partialEvaluator, stream, new ResourcesMock());\n      expect(!!result.fnArray && !!result.argsArray).toEqual(true);\n      expect(result.fnArray.length).toEqual(3);\n      expect(result.fnArray[0]).toEqual(OPS.fill);\n      expect(result.fnArray[1]).toEqual(OPS.fill);\n      expect(result.fnArray[2]).toEqual(OPS.fill);\n    });","file":"unit/evaluator_spec.js","skipped":false,"dir":"test"},{"name":"should handle three glued operations #2","suites":["evaluator","splitCombinedOperations"],"line":111,"updatePoint":{"line":111,"column":47,"index":4381},"code":"    it(\"should handle three glued operations #2\", async function () {\n      const resources = new ResourcesMock();\n      resources.Res1 = {};\n      const stream = new StringStream(\"B*Bf*\");\n      const result = await runOperatorListCheck(partialEvaluator, stream, resources);\n      expect(!!result.fnArray && !!result.argsArray).toEqual(true);\n      expect(result.fnArray.length).toEqual(3);\n      expect(result.fnArray[0]).toEqual(OPS.eoFillStroke);\n      expect(result.fnArray[1]).toEqual(OPS.fillStroke);\n      expect(result.fnArray[2]).toEqual(OPS.eoFill);\n    });","file":"unit/evaluator_spec.js","skipped":false,"dir":"test"},{"name":"should handle glued operations and operands","suites":["evaluator","splitCombinedOperations"],"line":122,"updatePoint":{"line":122,"column":51,"index":4954},"code":"    it(\"should handle glued operations and operands\", async function () {\n      const stream = new StringStream(\"f5 Ts\");\n      const result = await runOperatorListCheck(partialEvaluator, stream, new ResourcesMock());\n      expect(!!result.fnArray && !!result.argsArray).toEqual(true);\n      expect(result.fnArray.length).toEqual(2);\n      expect(result.fnArray[0]).toEqual(OPS.fill);\n      expect(result.fnArray[1]).toEqual(OPS.setTextRise);\n      expect(result.argsArray.length).toEqual(2);\n      expect(result.argsArray[1].length).toEqual(1);\n      expect(result.argsArray[1][0]).toEqual(5);\n    });","file":"unit/evaluator_spec.js","skipped":false,"dir":"test"},{"name":"should handle glued operations and literals","suites":["evaluator","splitCombinedOperations"],"line":133,"updatePoint":{"line":133,"column":51,"index":5557},"code":"    it(\"should handle glued operations and literals\", async function () {\n      const stream = new StringStream(\"trueifalserinulln\");\n      const result = await runOperatorListCheck(partialEvaluator, stream, new ResourcesMock());\n      expect(!!result.fnArray && !!result.argsArray).toEqual(true);\n      expect(result.fnArray.length).toEqual(3);\n      expect(result.fnArray[0]).toEqual(OPS.setFlatness);\n      expect(result.fnArray[1]).toEqual(OPS.setRenderingIntent);\n      expect(result.fnArray[2]).toEqual(OPS.endPath);\n      expect(result.argsArray.length).toEqual(3);\n      expect(result.argsArray[0].length).toEqual(1);\n      expect(result.argsArray[0][0]).toEqual(true);\n      expect(result.argsArray[1].length).toEqual(1);\n      expect(result.argsArray[1][0]).toEqual(false);\n      expect(result.argsArray[2]).toEqual(null);\n    });","file":"unit/evaluator_spec.js","skipped":false,"dir":"test"},{"name":"should execute if correct number of arguments","suites":["evaluator","validateNumberOfArgs"],"line":150,"updatePoint":{"line":150,"column":53,"index":6455},"code":"    it(\"should execute if correct number of arguments\", async function () {\n      const stream = new StringStream(\"5 1 d0\");\n      const result = await runOperatorListCheck(partialEvaluator, stream, new ResourcesMock());\n      expect(result.argsArray[0][0]).toEqual(5);\n      expect(result.argsArray[0][1]).toEqual(1);\n      expect(result.fnArray[0]).toEqual(OPS.setCharWidth);\n    });","file":"unit/evaluator_spec.js","skipped":false,"dir":"test"},{"name":"should execute if too many arguments","suites":["evaluator","validateNumberOfArgs"],"line":157,"updatePoint":{"line":157,"column":44,"index":6832},"code":"    it(\"should execute if too many arguments\", async function () {\n      const stream = new StringStream(\"5 1 4 d0\");\n      const result = await runOperatorListCheck(partialEvaluator, stream, new ResourcesMock());\n      expect(result.argsArray[0][0]).toEqual(1);\n      expect(result.argsArray[0][1]).toEqual(4);\n      expect(result.fnArray[0]).toEqual(OPS.setCharWidth);\n    });","file":"unit/evaluator_spec.js","skipped":false,"dir":"test"},{"name":"should execute if nested commands","suites":["evaluator","validateNumberOfArgs"],"line":164,"updatePoint":{"line":164,"column":41,"index":7208},"code":"    it(\"should execute if nested commands\", async function () {\n      const gState = new Dict();\n      gState.set(\"LW\", 2);\n      gState.set(\"CA\", 0.5);\n      const extGState = new Dict();\n      extGState.set(\"GS2\", gState);\n      const resources = new ResourcesMock();\n      resources.ExtGState = extGState;\n      const stream = new StringStream(\"/F2 /GS2 gs 5.711 Tf\");\n      const result = await runOperatorListCheck(partialEvaluator, stream, resources);\n      expect(result.fnArray.length).toEqual(3);\n      expect(result.fnArray[0]).toEqual(OPS.setGState);\n      expect(result.fnArray[1]).toEqual(OPS.dependency);\n      expect(result.fnArray[2]).toEqual(OPS.setFont);\n      expect(result.argsArray.length).toEqual(3);\n      expect(result.argsArray[0]).toEqual([[[\"LW\", 2], [\"CA\", 0.5]]]);\n      expect(result.argsArray[1]).toEqual([\"g_font_error\"]);\n      expect(result.argsArray[2]).toEqual([\"g_font_error\", 5.711]);\n    });","file":"unit/evaluator_spec.js","skipped":false,"dir":"test"},{"name":"should skip if too few arguments","suites":["evaluator","validateNumberOfArgs"],"line":183,"updatePoint":{"line":183,"column":40,"index":8138},"code":"    it(\"should skip if too few arguments\", async function () {\n      const stream = new StringStream(\"5 d0\");\n      const result = await runOperatorListCheck(partialEvaluator, stream, new ResourcesMock());\n      expect(result.argsArray).toEqual([]);\n      expect(result.fnArray).toEqual([]);\n    });","file":"unit/evaluator_spec.js","skipped":false,"dir":"test"},{"name":"should close opened saves","suites":["evaluator","validateNumberOfArgs"],"line":212,"updatePoint":{"line":212,"column":33,"index":9483},"code":"    it(\"should close opened saves\", async function () {\n      const stream = new StringStream(\"qq\");\n      const result = await runOperatorListCheck(partialEvaluator, stream, new ResourcesMock());\n      expect(!!result.fnArray && !!result.argsArray).toEqual(true);\n      expect(result.fnArray.length).toEqual(4);\n      expect(result.fnArray[0]).toEqual(OPS.save);\n      expect(result.fnArray[1]).toEqual(OPS.save);\n      expect(result.fnArray[2]).toEqual(OPS.restore);\n      expect(result.fnArray[3]).toEqual(OPS.restore);\n    });","file":"unit/evaluator_spec.js","skipped":false,"dir":"test"},{"name":"should error on paintXObject if name is missing","suites":["evaluator","validateNumberOfArgs"],"line":222,"updatePoint":{"line":222,"column":55,"index":10036},"code":"    it(\"should error on paintXObject if name is missing\", async function () {\n      const stream = new StringStream(\"/ Do\");\n      try {\n        await runOperatorListCheck(partialEvaluator, stream, new ResourcesMock());\n\n        // Shouldn't get here.\n        expect(false).toEqual(true);\n      } catch (reason) {\n        expect(reason instanceof FormatError).toEqual(true);\n        expect(reason.message).toEqual(\"XObject should be a stream\");\n      }\n    });","file":"unit/evaluator_spec.js","skipped":false,"dir":"test"},{"name":"should skip paintXObject if subtype is PS","suites":["evaluator","validateNumberOfArgs"],"line":234,"updatePoint":{"line":234,"column":49,"index":10491},"code":"    it(\"should skip paintXObject if subtype is PS\", async function () {\n      const xobjStreamDict = new Dict();\n      xobjStreamDict.set(\"Subtype\", Name.get(\"PS\"));\n      const xobjStream = new Stream([], 0, 0, xobjStreamDict);\n      const xobjs = new Dict();\n      xobjs.set(\"Res1\", xobjStream);\n      const resources = new Dict();\n      resources.set(\"XObject\", xobjs);\n      const stream = new StringStream(\"/Res1 Do\");\n      const result = await runOperatorListCheck(partialEvaluator, stream, resources);\n      expect(result.argsArray).toEqual([]);\n      expect(result.fnArray).toEqual([]);\n    });","file":"unit/evaluator_spec.js","skipped":false,"dir":"test"},{"name":"should abort operator list parsing","suites":["evaluator","thread control"],"line":249,"updatePoint":{"line":249,"column":42,"index":11137},"code":"    it(\"should abort operator list parsing\", async function () {\n      const stream = new StringStream(\"qqQQ\");\n      const resources = new ResourcesMock();\n      const result = new OperatorList();\n      const task = new WorkerTask(\"OperatorListAbort\");\n      task.terminate();\n      try {\n        await partialEvaluator.getOperatorList({\n          stream,\n          task,\n          resources,\n          operatorList: result\n        });\n\n        // Shouldn't get here.\n        expect(false).toEqual(true);\n      } catch {\n        expect(!!result.fnArray && !!result.argsArray).toEqual(true);\n        expect(result.fnArray.length).toEqual(0);\n      }\n    });","file":"unit/evaluator_spec.js","skipped":false,"dir":"test"},{"name":"should abort text content parsing","suites":["evaluator","thread control"],"line":270,"updatePoint":{"line":270,"column":41,"index":11794},"code":"    it(\"should abort text content parsing\", async function () {\n      const resources = new ResourcesMock();\n      const stream = new StringStream(\"qqQQ\");\n      const task = new WorkerTask(\"TextContentAbort\");\n      task.terminate();\n      try {\n        await partialEvaluator.getTextContent({\n          stream,\n          task,\n          resources\n        });\n\n        // Shouldn't get here.\n        expect(false).toEqual(true);\n      } catch {\n        expect(true).toEqual(true);\n      }\n    });","file":"unit/evaluator_spec.js","skipped":false,"dir":"test"},{"name":"should get correct total length after flushing","suites":["evaluator","operator list"],"line":293,"updatePoint":{"line":293,"column":54,"index":12405},"code":"    it(\"should get correct total length after flushing\", function () {\n      const operatorList = new OperatorList(null, new StreamSinkMock());\n      operatorList.addOp(OPS.save, null);\n      operatorList.addOp(OPS.restore, null);\n      expect(operatorList.totalLength).toEqual(2);\n      expect(operatorList.length).toEqual(2);\n      operatorList.flush();\n      expect(operatorList.totalLength).toEqual(2);\n      expect(operatorList.length).toEqual(0);\n    });","file":"unit/evaluator_spec.js","skipped":false,"dir":"test"},{"name":"dispatch event","suites":["event_utils","EventBus"],"line":20,"updatePoint":{"line":20,"column":22,"index":841},"code":"    it(\"dispatch event\", function () {\n      const eventBus = new EventBus();\n      let count = 0;\n      eventBus.on(\"test\", function (evt) {\n        expect(evt).toEqual(undefined);\n        count++;\n      });\n      eventBus.dispatch(\"test\");\n      expect(count).toEqual(1);\n    });","file":"unit/event_utils_spec.js","skipped":false,"dir":"test"},{"name":"dispatch event with arguments","suites":["event_utils","EventBus"],"line":30,"updatePoint":{"line":30,"column":37,"index":1138},"code":"    it(\"dispatch event with arguments\", function () {\n      const eventBus = new EventBus();\n      let count = 0;\n      eventBus.on(\"test\", function (evt) {\n        expect(evt).toEqual({\n          abc: 123\n        });\n        count++;\n      });\n      eventBus.dispatch(\"test\", {\n        abc: 123\n      });\n      expect(count).toEqual(1);\n    });","file":"unit/event_utils_spec.js","skipped":false,"dir":"test"},{"name":"dispatch different event","suites":["event_utils","EventBus"],"line":44,"updatePoint":{"line":44,"column":32,"index":1479},"code":"    it(\"dispatch different event\", function () {\n      const eventBus = new EventBus();\n      let count = 0;\n      eventBus.on(\"test\", function () {\n        count++;\n      });\n      eventBus.dispatch(\"nottest\");\n      expect(count).toEqual(0);\n    });","file":"unit/event_utils_spec.js","skipped":false,"dir":"test"},{"name":"dispatch event multiple times","suites":["event_utils","EventBus"],"line":53,"updatePoint":{"line":53,"column":37,"index":1736},"code":"    it(\"dispatch event multiple times\", function () {\n      const eventBus = new EventBus();\n      let count = 0;\n      eventBus.dispatch(\"test\");\n      eventBus.on(\"test\", function () {\n        count++;\n      });\n      eventBus.dispatch(\"test\");\n      eventBus.dispatch(\"test\");\n      expect(count).toEqual(2);\n    });","file":"unit/event_utils_spec.js","skipped":false,"dir":"test"},{"name":"dispatch event to multiple handlers","suites":["event_utils","EventBus"],"line":64,"updatePoint":{"line":64,"column":43,"index":2062},"code":"    it(\"dispatch event to multiple handlers\", function () {\n      const eventBus = new EventBus();\n      let count = 0;\n      eventBus.on(\"test\", function () {\n        count++;\n      });\n      eventBus.on(\"test\", function () {\n        count++;\n      });\n      eventBus.dispatch(\"test\");\n      expect(count).toEqual(2);\n    });","file":"unit/event_utils_spec.js","skipped":false,"dir":"test"},{"name":"dispatch to detached","suites":["event_utils","EventBus"],"line":76,"updatePoint":{"line":76,"column":28,"index":2374},"code":"    it(\"dispatch to detached\", function () {\n      const eventBus = new EventBus();\n      let count = 0;\n      const listener = function () {\n        count++;\n      };\n      eventBus.on(\"test\", listener);\n      eventBus.dispatch(\"test\");\n      eventBus.off(\"test\", listener);\n      eventBus.dispatch(\"test\");\n      expect(count).toEqual(1);\n    });","file":"unit/event_utils_spec.js","skipped":false,"dir":"test"},{"name":"dispatch to wrong detached","suites":["event_utils","EventBus"],"line":88,"updatePoint":{"line":88,"column":34,"index":2729},"code":"    it(\"dispatch to wrong detached\", function () {\n      const eventBus = new EventBus();\n      let count = 0;\n      eventBus.on(\"test\", function () {\n        count++;\n      });\n      eventBus.dispatch(\"test\");\n      eventBus.off(\"test\", function () {\n        count++;\n      });\n      eventBus.dispatch(\"test\");\n      expect(count).toEqual(2);\n    });","file":"unit/event_utils_spec.js","skipped":false,"dir":"test"},{"name":"dispatch to detached during handling","suites":["event_utils","EventBus"],"line":101,"updatePoint":{"line":101,"column":44,"index":3091},"code":"    it(\"dispatch to detached during handling\", function () {\n      const eventBus = new EventBus();\n      let count = 0;\n      const listener1 = function () {\n        eventBus.off(\"test\", listener2);\n        count++;\n      };\n      const listener2 = function () {\n        eventBus.off(\"test\", listener1);\n        count++;\n      };\n      eventBus.on(\"test\", listener1);\n      eventBus.on(\"test\", listener2);\n      eventBus.dispatch(\"test\");\n      eventBus.dispatch(\"test\");\n      expect(count).toEqual(2);\n    });","file":"unit/event_utils_spec.js","skipped":false,"dir":"test"},{"name":"dispatch event to handlers with/without 'once' option","suites":["event_utils","EventBus"],"line":118,"updatePoint":{"line":118,"column":61,"index":3621},"code":"    it(\"dispatch event to handlers with/without 'once' option\", function () {\n      const eventBus = new EventBus();\n      let multipleCount = 0,\n        onceCount = 0;\n      eventBus.on(\"test\", function () {\n        multipleCount++;\n      });\n      eventBus.on(\"test\", function () {\n        onceCount++;\n      }, {\n        once: true\n      });\n      eventBus.dispatch(\"test\");\n      eventBus.dispatch(\"test\");\n      eventBus.dispatch(\"test\");\n      expect(multipleCount).toEqual(3);\n      expect(onceCount).toEqual(1);\n    });","file":"unit/event_utils_spec.js","skipped":false,"dir":"test"},{"name":"should not re-dispatch to DOM","suites":["event_utils","EventBus"],"line":136,"updatePoint":{"line":136,"column":37,"index":4125},"code":"    it(\"should not re-dispatch to DOM\", async function () {\n      if (isNodeJS) {\n        pending(\"Document is not supported in Node.js.\");\n      }\n      const eventBus = new EventBus();\n      let count = 0;\n      eventBus.on(\"test\", function (evt) {\n        expect(evt).toEqual(undefined);\n        count++;\n      });\n      function domEventListener() {\n        // Shouldn't get here.\n        expect(false).toEqual(true);\n      }\n      document.addEventListener(\"test\", domEventListener);\n      eventBus.dispatch(\"test\");\n      await Promise.resolve();\n      expect(count).toEqual(1);\n      document.removeEventListener(\"test\", domEventListener);\n    });","file":"unit/event_utils_spec.js","skipped":false,"dir":"test"},{"name":"should reject invalid parameters","suites":["event_utils","waitOnEventOrTimeout"],"line":165,"updatePoint":{"line":165,"column":40,"index":4983},"code":"    it(\"should reject invalid parameters\", async function () {\n      const invalidTarget = waitOnEventOrTimeout({\n        target: \"window\",\n        name: \"DOMContentLoaded\"\n      }).then(function () {\n        // Shouldn't get here.\n        expect(false).toEqual(true);\n      }, function (reason) {\n        expect(reason instanceof Error).toEqual(true);\n      });\n      const invalidName = waitOnEventOrTimeout({\n        target: eventBus,\n        name: \"\"\n      }).then(function () {\n        // Shouldn't get here.\n        expect(false).toEqual(true);\n      }, function (reason) {\n        expect(reason instanceof Error).toEqual(true);\n      });\n      const invalidDelay = waitOnEventOrTimeout({\n        target: eventBus,\n        name: \"pagerendered\",\n        delay: -1000\n      }).then(function () {\n        // Shouldn't get here.\n        expect(false).toEqual(true);\n      }, function (reason) {\n        expect(reason instanceof Error).toEqual(true);\n      });\n      await Promise.all([invalidTarget, invalidName, invalidDelay]);\n    });","file":"unit/event_utils_spec.js","skipped":false,"dir":"test"},{"name":"should resolve on event, using the DOM","suites":["event_utils","waitOnEventOrTimeout"],"line":196,"updatePoint":{"line":196,"column":46,"index":6028},"code":"    it(\"should resolve on event, using the DOM\", async function () {\n      if (isNodeJS) {\n        pending(\"Document is not supported in Node.js.\");\n      }\n      const button = document.createElement(\"button\");\n      const buttonClicked = waitOnEventOrTimeout({\n        target: button,\n        name: \"click\",\n        delay: 10000\n      });\n      // Immediately dispatch the expected event.\n      button.click();\n      const type = await buttonClicked;\n      expect(type).toEqual(WaitOnType.EVENT);\n    });","file":"unit/event_utils_spec.js","skipped":false,"dir":"test"},{"name":"should resolve on timeout, using the DOM","suites":["event_utils","waitOnEventOrTimeout"],"line":211,"updatePoint":{"line":211,"column":48,"index":6537},"code":"    it(\"should resolve on timeout, using the DOM\", async function () {\n      if (isNodeJS) {\n        pending(\"Document is not supported in Node.js.\");\n      }\n      const button = document.createElement(\"button\");\n      const buttonClicked = waitOnEventOrTimeout({\n        target: button,\n        name: \"click\",\n        delay: 10\n      });\n      // Do *not* dispatch the event, and wait for the timeout.\n\n      const type = await buttonClicked;\n      expect(type).toEqual(WaitOnType.TIMEOUT);\n    });","file":"unit/event_utils_spec.js","skipped":false,"dir":"test"},{"name":"should resolve on event, using the EventBus","suites":["event_utils","waitOnEventOrTimeout"],"line":226,"updatePoint":{"line":226,"column":51,"index":7041},"code":"    it(\"should resolve on event, using the EventBus\", async function () {\n      const pageRendered = waitOnEventOrTimeout({\n        target: eventBus,\n        name: \"pagerendered\",\n        delay: 10000\n      });\n      // Immediately dispatch the expected event.\n      eventBus.dispatch(\"pagerendered\");\n      const type = await pageRendered;\n      expect(type).toEqual(WaitOnType.EVENT);\n    });","file":"unit/event_utils_spec.js","skipped":false,"dir":"test"},{"name":"should resolve on timeout, using the EventBus","suites":["event_utils","waitOnEventOrTimeout"],"line":237,"updatePoint":{"line":237,"column":53,"index":7438},"code":"    it(\"should resolve on timeout, using the EventBus\", async function () {\n      const pageRendered = waitOnEventOrTimeout({\n        target: eventBus,\n        name: \"pagerendered\",\n        delay: 10\n      });\n      // Do *not* dispatch the event, and wait for the timeout.\n\n      const type = await pageRendered;\n      expect(type).toEqual(WaitOnType.TIMEOUT);\n    });","file":"unit/event_utils_spec.js","skipped":false,"dir":"test"},{"name":"read with streaming","suites":["fetch_stream"],"line":21,"updatePoint":{"line":21,"column":25,"index":896},"code":"  it(\"read with streaming\", async function () {\n    const stream = new PDFFetchStream({\n      url: pdfUrl,\n      disableStream: false,\n      disableRange: true\n    });\n    const fullReader = stream.getFullReader();\n    let isStreamingSupported, isRangeSupported;\n    const promise = fullReader.headersReady.then(function () {\n      isStreamingSupported = fullReader.isStreamingSupported;\n      isRangeSupported = fullReader.isRangeSupported;\n    });\n    let len = 0;\n    const read = function () {\n      return fullReader.read().then(function (result) {\n        if (result.done) {\n          return undefined;\n        }\n        len += result.value.byteLength;\n        return read();\n      });\n    };\n    await Promise.all([read(), promise]);\n    expect(len).toEqual(pdfLength);\n    expect(isStreamingSupported).toEqual(true);\n    expect(isRangeSupported).toEqual(false);\n  });","file":"unit/fetch_stream_spec.js","skipped":false,"dir":"test"},{"name":"read ranges with streaming","suites":["fetch_stream"],"line":48,"updatePoint":{"line":48,"column":32,"index":1779},"code":"  it(\"read ranges with streaming\", async function () {\n    const rangeSize = 32768;\n    const stream = new PDFFetchStream({\n      url: pdfUrl,\n      rangeChunkSize: rangeSize,\n      disableStream: false,\n      disableRange: false\n    });\n    const fullReader = stream.getFullReader();\n    let isStreamingSupported, isRangeSupported, fullReaderCancelled;\n    const promise = fullReader.headersReady.then(function () {\n      isStreamingSupported = fullReader.isStreamingSupported;\n      isRangeSupported = fullReader.isRangeSupported;\n      // We shall be able to close full reader without any issue.\n      fullReader.cancel(new AbortException(\"Don't need fullReader.\"));\n      fullReaderCancelled = true;\n    });\n    const tailSize = pdfLength % rangeSize || rangeSize;\n    const rangeReader1 = stream.getRangeReader(pdfLength - tailSize - rangeSize, pdfLength - tailSize);\n    const rangeReader2 = stream.getRangeReader(pdfLength - tailSize, pdfLength);\n    const result1 = {\n        value: 0\n      },\n      result2 = {\n        value: 0\n      };\n    const read = function (reader, lenResult) {\n      return reader.read().then(function (result) {\n        if (result.done) {\n          return undefined;\n        }\n        lenResult.value += result.value.byteLength;\n        return read(reader, lenResult);\n      });\n    };\n    await Promise.all([read(rangeReader1, result1), read(rangeReader2, result2), promise]);\n    expect(isStreamingSupported).toEqual(true);\n    expect(isRangeSupported).toEqual(true);\n    expect(fullReaderCancelled).toEqual(true);\n    expect(result1.value).toEqual(rangeSize);\n    expect(result2.value).toEqual(tailSize);\n  });","file":"unit/fetch_stream_spec.js","skipped":false,"dir":"test"},{"name":"should substitute an unknown font","suites":["getFontSubstitution"],"line":21,"updatePoint":{"line":21,"column":39,"index":886},"code":"  it(\"should substitute an unknown font\", () => {\n    const fontName = \"Foo\";\n    const fontSubstitution = getFontSubstitution(new Map(), idFactory, localFontPath, fontName, undefined);\n    expect(fontSubstitution).toEqual(jasmine.objectContaining({\n      guessFallback: true,\n      baseFontName: \"Foo\",\n      src: \"local(Foo)\",\n      style: {\n        style: \"normal\",\n        weight: \"normal\"\n      }\n    }));\n    expect(fontSubstitution.css).toMatch(/^g_d(\\d+)_sf(\\d+)$/);\n  });","file":"unit/font_substitutions_spec.js","skipped":false,"dir":"test"},{"name":"should substitute an unknown bold font","suites":["getFontSubstitution"],"line":35,"updatePoint":{"line":35,"column":44,"index":1372},"code":"  it(\"should substitute an unknown bold font\", () => {\n    const fontName = \"Foo-Bold\";\n    const fontSubstitution = getFontSubstitution(new Map(), idFactory, localFontPath, fontName, undefined);\n    expect(fontSubstitution).toEqual(jasmine.objectContaining({\n      guessFallback: true,\n      baseFontName: \"Foo-Bold\",\n      src: \"local(Foo-Bold)\",\n      style: {\n        style: \"normal\",\n        weight: \"bold\"\n      }\n    }));\n    expect(fontSubstitution.css).toMatch(/^g_d(\\d+)_sf(\\d+)$/);\n  });","file":"unit/font_substitutions_spec.js","skipped":false,"dir":"test"},{"name":"should substitute an unknown italic font","suites":["getFontSubstitution"],"line":49,"updatePoint":{"line":49,"column":46,"index":1873},"code":"  it(\"should substitute an unknown italic font\", () => {\n    const fontName = \"Foo-Italic\";\n    const fontSubstitution = getFontSubstitution(new Map(), idFactory, localFontPath, fontName, undefined);\n    expect(fontSubstitution).toEqual(jasmine.objectContaining({\n      guessFallback: true,\n      baseFontName: \"Foo-Italic\",\n      src: \"local(Foo-Italic)\",\n      style: {\n        style: \"italic\",\n        weight: \"normal\"\n      }\n    }));\n    expect(fontSubstitution.css).toMatch(/^g_d(\\d+)_sf(\\d+)$/);\n  });","file":"unit/font_substitutions_spec.js","skipped":false,"dir":"test"},{"name":"should substitute an unknown bold italic font","suites":["getFontSubstitution"],"line":63,"updatePoint":{"line":63,"column":51,"index":2387},"code":"  it(\"should substitute an unknown bold italic font\", () => {\n    const fontName = \"Foo-BoldItalic\";\n    const fontSubstitution = getFontSubstitution(new Map(), idFactory, localFontPath, fontName, undefined);\n    expect(fontSubstitution).toEqual(jasmine.objectContaining({\n      guessFallback: true,\n      baseFontName: \"Foo-BoldItalic\",\n      src: \"local(Foo-BoldItalic)\",\n      style: {\n        style: \"italic\",\n        weight: \"bold\"\n      }\n    }));\n    expect(fontSubstitution.css).toMatch(/^g_d(\\d+)_sf(\\d+)$/);\n  });","file":"unit/font_substitutions_spec.js","skipped":false,"dir":"test"},{"name":"should substitute an unknown font but with a standard font","suites":["getFontSubstitution"],"line":77,"updatePoint":{"line":77,"column":64,"index":2924},"code":"  it(\"should substitute an unknown font but with a standard font\", () => {\n    const fontName = \"Foo\";\n    const fontSubstitution = getFontSubstitution(new Map(), idFactory, localFontPath, fontName, \"Helvetica\");\n    expect(fontSubstitution).toEqual(jasmine.objectContaining({\n      guessFallback: false,\n      baseFontName: \"Foo\",\n      src: \"local(Foo),local(Helvetica),local(Helvetica Neue),\" + \"local(Arial),local(Arial Nova),local(Liberation Sans),\" + \"local(Arimo),local(Nimbus Sans),local(Nimbus Sans L),\" + \"local(A030),local(TeX Gyre Heros),local(FreeSans),\" + \"local(DejaVu Sans),local(Albany),local(Bitstream Vera Sans),\" + \"local(Arial Unicode MS),local(Microsoft Sans Serif),\" + \"local(Apple Symbols),local(Cantarell),\" + \"url(/tmp/LiberationSans-Regular.ttf)\",\n      style: {\n        style: \"normal\",\n        weight: \"normal\"\n      }\n    }));\n    expect(fontSubstitution.css).toMatch(/^g_d(\\d+)_sf(\\d+),sans-serif$/);\n  });","file":"unit/font_substitutions_spec.js","skipped":false,"dir":"test"},{"name":"should substitute an unknown font but with a standard italic font","suites":["getFontSubstitution"],"line":91,"updatePoint":{"line":91,"column":71,"index":3869},"code":"  it(\"should substitute an unknown font but with a standard italic font\", () => {\n    const fontName = \"Foo-Italic\";\n    const fontSubstitution = getFontSubstitution(new Map(), idFactory, localFontPath, fontName, \"Helvetica-Oblique\");\n    expect(fontSubstitution).toEqual(jasmine.objectContaining({\n      guessFallback: false,\n      baseFontName: \"Foo-Italic\",\n      src: \"local(Foo-Italic),local(Helvetica Italic),\" + \"local(Helvetica Neue Italic),local(Arial Italic),\" + \"local(Arial Nova Italic),local(Liberation Sans Italic),\" + \"local(Arimo Italic),local(Nimbus Sans Italic),\" + \"local(Nimbus Sans L Italic),local(A030 Italic),\" + \"local(TeX Gyre Heros Italic),local(FreeSans Italic),\" + \"local(DejaVu Sans Italic),local(Albany Italic),\" + \"local(Bitstream Vera Sans Italic),local(Arial Unicode MS Italic),\" + \"local(Microsoft Sans Serif Italic),local(Apple Symbols Italic),\" + \"local(Cantarell Italic),url(/tmp/LiberationSans-Italic.ttf)\",\n      style: {\n        style: \"italic\",\n        weight: \"normal\"\n      }\n    }));\n    expect(fontSubstitution.css).toMatch(/^g_d(\\d+)_sf(\\d+),sans-serif$/);\n  });","file":"unit/font_substitutions_spec.js","skipped":false,"dir":"test"},{"name":"should substitute an unknown font but with a standard bold font","suites":["getFontSubstitution"],"line":105,"updatePoint":{"line":105,"column":69,"index":4976},"code":"  it(\"should substitute an unknown font but with a standard bold font\", () => {\n    const fontName = \"Foo-Bold\";\n    const fontSubstitution = getFontSubstitution(new Map(), idFactory, localFontPath, fontName, \"Helvetica-Bold\");\n    expect(fontSubstitution).toEqual(jasmine.objectContaining({\n      guessFallback: false,\n      baseFontName: \"Foo-Bold\",\n      src: \"local(Foo-Bold),local(Helvetica Bold),local(Helvetica Neue Bold),\" + \"local(Arial Bold),local(Arial Nova Bold),\" + \"local(Liberation Sans Bold),local(Arimo Bold),\" + \"local(Nimbus Sans Bold),local(Nimbus Sans L Bold),\" + \"local(A030 Bold),local(TeX Gyre Heros Bold),local(FreeSans Bold),\" + \"local(DejaVu Sans Bold),local(Albany Bold),\" + \"local(Bitstream Vera Sans Bold),local(Arial Unicode MS Bold),\" + \"local(Microsoft Sans Serif Bold),local(Apple Symbols Bold),\" + \"local(Cantarell Bold),url(/tmp/LiberationSans-Bold.ttf)\",\n      style: {\n        style: \"normal\",\n        weight: \"bold\"\n      }\n    }));\n    expect(fontSubstitution.css).toMatch(/^g_d(\\d+)_sf(\\d+),sans-serif$/);\n  });","file":"unit/font_substitutions_spec.js","skipped":false,"dir":"test"},{"name":"should substitute an unknown font but with a standard bold italic font","suites":["getFontSubstitution"],"line":119,"updatePoint":{"line":119,"column":76,"index":6036},"code":"  it(\"should substitute an unknown font but with a standard bold italic font\", () => {\n    const fontName = \"Foo-BoldItalic\";\n    const fontSubstitution = getFontSubstitution(new Map(), idFactory, localFontPath, fontName, \"Helvetica-BoldOblique\");\n    expect(fontSubstitution).toEqual(jasmine.objectContaining({\n      guessFallback: false,\n      baseFontName: \"Foo-BoldItalic\",\n      src: \"local(Foo-BoldItalic),local(Helvetica Bold Italic),\" + \"local(Helvetica Neue Bold Italic),local(Arial Bold Italic),\" + \"local(Arial Nova Bold Italic),local(Liberation Sans Bold Italic),\" + \"local(Arimo Bold Italic),local(Nimbus Sans Bold Italic),\" + \"local(Nimbus Sans L Bold Italic),local(A030 Bold Italic),\" + \"local(TeX Gyre Heros Bold Italic),local(FreeSans Bold Italic),\" + \"local(DejaVu Sans Bold Italic),local(Albany Bold Italic),\" + \"local(Bitstream Vera Sans Bold Italic),\" + \"local(Arial Unicode MS Bold Italic),\" + \"local(Microsoft Sans Serif Bold Italic),\" + \"local(Apple Symbols Bold Italic),local(Cantarell Bold Italic),\" + \"url(/tmp/LiberationSans-BoldItalic.ttf)\",\n      style: {\n        style: \"italic\",\n        weight: \"bold\"\n      }\n    }));\n    expect(fontSubstitution.css).toMatch(/^g_d(\\d+)_sf(\\d+),sans-serif$/);\n  });","file":"unit/font_substitutions_spec.js","skipped":false,"dir":"test"},{"name":"should substitute Calibri","suites":["getFontSubstitution"],"line":133,"updatePoint":{"line":133,"column":31,"index":7223},"code":"  it(\"should substitute Calibri\", () => {\n    const fontName = \"Calibri\";\n    const fontSubstitution = getFontSubstitution(new Map(), idFactory, localFontPath, fontName, undefined);\n    expect(fontSubstitution).toEqual(jasmine.objectContaining({\n      guessFallback: false,\n      baseFontName: \"Calibri\",\n      src: \"local(Calibri),local(Carlito),local(Helvetica),\" + \"local(Helvetica Neue),local(Arial),local(Arial Nova),\" + \"local(Liberation Sans),local(Arimo),local(Nimbus Sans),\" + \"local(Nimbus Sans L),local(A030),local(TeX Gyre Heros),\" + \"local(FreeSans),local(DejaVu Sans),local(Albany),\" + \"local(Bitstream Vera Sans),local(Arial Unicode MS),\" + \"local(Microsoft Sans Serif),local(Apple Symbols),\" + \"local(Cantarell),url(/tmp/LiberationSans-Regular.ttf)\",\n      style: {\n        style: \"normal\",\n        weight: \"normal\"\n      }\n    }));\n    expect(fontSubstitution.css).toMatch(/^g_d(\\d+)_sf(\\d+),sans-serif$/);\n  });","file":"unit/font_substitutions_spec.js","skipped":false,"dir":"test"},{"name":"should substitute Calibri-Bold","suites":["getFontSubstitution"],"line":147,"updatePoint":{"line":147,"column":36,"index":8158},"code":"  it(\"should substitute Calibri-Bold\", () => {\n    const fontName = \"Calibri-Bold\";\n    const fontSubstitution = getFontSubstitution(new Map(), idFactory, localFontPath, fontName, undefined);\n    expect(fontSubstitution).toEqual(jasmine.objectContaining({\n      guessFallback: false,\n      baseFontName: \"Calibri-Bold\",\n      src: \"local(Calibri Bold),local(Carlito Bold),local(Helvetica Bold),\" + \"local(Helvetica Neue Bold),local(Arial Bold),\" + \"local(Arial Nova Bold),local(Liberation Sans Bold),\" + \"local(Arimo Bold),local(Nimbus Sans Bold),\" + \"local(Nimbus Sans L Bold),local(A030 Bold),\" + \"local(TeX Gyre Heros Bold),local(FreeSans Bold),\" + \"local(DejaVu Sans Bold),local(Albany Bold),\" + \"local(Bitstream Vera Sans Bold),local(Arial Unicode MS Bold),\" + \"local(Microsoft Sans Serif Bold),local(Apple Symbols Bold),\" + \"local(Cantarell Bold),url(/tmp/LiberationSans-Bold.ttf)\",\n      style: {\n        style: \"normal\",\n        weight: \"bold\"\n      }\n    }));\n    expect(fontSubstitution.css).toMatch(/^g_d(\\d+)_sf(\\d+),sans-serif$/);\n  });","file":"unit/font_substitutions_spec.js","skipped":false,"dir":"test"},{"name":"should substitute Arial Black","suites":["getFontSubstitution"],"line":161,"updatePoint":{"line":161,"column":35,"index":9207},"code":"  it(\"should substitute Arial Black\", () => {\n    const fontName = \"Arial Black\";\n    const fontSubstitution = getFontSubstitution(new Map(), idFactory, localFontPath, fontName, undefined);\n    expect(fontSubstitution).toEqual(jasmine.objectContaining({\n      guessFallback: false,\n      baseFontName: \"ArialBlack\",\n      src: \"local(Arial Black),local(Helvetica Bold),\" + \"local(Helvetica Neue Bold),local(Arial Bold),\" + \"local(Arial Nova Bold),local(Liberation Sans Bold),\" + \"local(Arimo Bold),local(Nimbus Sans Bold),\" + \"local(Nimbus Sans L Bold),local(A030 Bold),\" + \"local(TeX Gyre Heros Bold),local(FreeSans Bold),\" + \"local(DejaVu Sans Bold),local(Albany Bold),\" + \"local(Bitstream Vera Sans Bold),local(Arial Unicode MS Bold),\" + \"local(Microsoft Sans Serif Bold),local(Apple Symbols Bold),\" + \"local(Cantarell Bold),url(/tmp/LiberationSans-Bold.ttf)\",\n      style: {\n        style: \"normal\",\n        weight: \"900\"\n      }\n    }));\n    expect(fontSubstitution.css).toMatch(/^g_d(\\d+)_sf(\\d+),sans-serif$/);\n  });","file":"unit/font_substitutions_spec.js","skipped":false,"dir":"test"},{"name":"should substitute Arial Black Bold","suites":["getFontSubstitution"],"line":175,"updatePoint":{"line":175,"column":40,"index":10236},"code":"  it(\"should substitute Arial Black Bold\", () => {\n    const fontName = \"Arial-Black-Bold\";\n    const fontSubstitution = getFontSubstitution(new Map(), idFactory, localFontPath, fontName, undefined);\n    expect(fontSubstitution).toEqual(jasmine.objectContaining({\n      guessFallback: false,\n      baseFontName: \"ArialBlack-Bold\",\n      src: \"local(Arial Black),local(Helvetica Bold),\" + \"local(Helvetica Neue Bold),local(Arial Bold),\" + \"local(Arial Nova Bold),local(Liberation Sans Bold),\" + \"local(Arimo Bold),local(Nimbus Sans Bold),\" + \"local(Nimbus Sans L Bold),local(A030 Bold),\" + \"local(TeX Gyre Heros Bold),local(FreeSans Bold),\" + \"local(DejaVu Sans Bold),local(Albany Bold),\" + \"local(Bitstream Vera Sans Bold),local(Arial Unicode MS Bold),\" + \"local(Microsoft Sans Serif Bold),local(Apple Symbols Bold),\" + \"local(Cantarell Bold),url(/tmp/LiberationSans-Bold.ttf)\",\n      style: {\n        style: \"normal\",\n        weight: \"900\"\n      }\n    }));\n    expect(fontSubstitution.css).toMatch(/^g_d(\\d+)_sf(\\d+),sans-serif$/);\n  });","file":"unit/font_substitutions_spec.js","skipped":false,"dir":"test"},{"name":"parses empty programs","suites":["function","PostScriptParser"],"line":26,"updatePoint":{"line":26,"column":29,"index":1119},"code":"    it(\"parses empty programs\", function () {\n      const output = parse(\"{}\");\n      expect(output.length).toEqual(0);\n    });","file":"unit/function_spec.js","skipped":false,"dir":"test"},{"name":"parses positive numbers","suites":["function","PostScriptParser"],"line":30,"updatePoint":{"line":30,"column":31,"index":1249},"code":"    it(\"parses positive numbers\", function () {\n      const number = 999;\n      const program = parse(\"{ \" + number + \" }\");\n      const expectedProgram = [number];\n      expect(program).toEqual(expectedProgram);\n    });","file":"unit/function_spec.js","skipped":false,"dir":"test"},{"name":"parses negative numbers","suites":["function","PostScriptParser"],"line":36,"updatePoint":{"line":36,"column":31,"index":1470},"code":"    it(\"parses negative numbers\", function () {\n      const number = -999;\n      const program = parse(\"{ \" + number + \" }\");\n      const expectedProgram = [number];\n      expect(program).toEqual(expectedProgram);\n    });","file":"unit/function_spec.js","skipped":false,"dir":"test"},{"name":"parses negative floats","suites":["function","PostScriptParser"],"line":42,"updatePoint":{"line":42,"column":30,"index":1691},"code":"    it(\"parses negative floats\", function () {\n      const number = 3.3;\n      const program = parse(\"{ \" + number + \" }\");\n      const expectedProgram = [number];\n      expect(program).toEqual(expectedProgram);\n    });","file":"unit/function_spec.js","skipped":false,"dir":"test"},{"name":"parses operators","suites":["function","PostScriptParser"],"line":48,"updatePoint":{"line":48,"column":24,"index":1905},"code":"    it(\"parses operators\", function () {\n      const program = parse(\"{ sub }\");\n      const expectedProgram = [\"sub\"];\n      expect(program).toEqual(expectedProgram);\n    });","file":"unit/function_spec.js","skipped":false,"dir":"test"},{"name":"parses if statements","suites":["function","PostScriptParser"],"line":53,"updatePoint":{"line":53,"column":28,"index":2085},"code":"    it(\"parses if statements\", function () {\n      const program = parse(\"{ { 99 } if }\");\n      const expectedProgram = [3, \"jz\", 99];\n      expect(program).toEqual(expectedProgram);\n    });","file":"unit/function_spec.js","skipped":false,"dir":"test"},{"name":"parses ifelse statements","suites":["function","PostScriptParser"],"line":58,"updatePoint":{"line":58,"column":32,"index":2281},"code":"    it(\"parses ifelse statements\", function () {\n      const program = parse(\"{ { 99 } { 44 } ifelse }\");\n      const expectedProgram = [5, \"jz\", 99, 6, \"j\", 44];\n      expect(program).toEqual(expectedProgram);\n    });","file":"unit/function_spec.js","skipped":false,"dir":"test"},{"name":"handles missing brackets","suites":["function","PostScriptParser"],"line":63,"updatePoint":{"line":63,"column":32,"index":2500},"code":"    it(\"handles missing brackets\", function () {\n      expect(function () {\n        parse(\"{\");\n      }).toThrow(new Error(\"Unexpected symbol: found undefined expected 1.\"));\n    });","file":"unit/function_spec.js","skipped":false,"dir":"test"},{"name":"handles junk after the end","suites":["function","PostScriptParser"],"line":68,"updatePoint":{"line":68,"column":34,"index":2685},"code":"    it(\"handles junk after the end\", function () {\n      const number = 3.3;\n      const program = parse(\"{ \" + number + \" }#\");\n      const expectedProgram = [number];\n      expect(program).toEqual(expectedProgram);\n    });","file":"unit/function_spec.js","skipped":false,"dir":"test"},{"name":"pushes stack","suites":["function","PostScriptEvaluator"],"line":84,"updatePoint":{"line":84,"column":20,"index":3262},"code":"    it(\"pushes stack\", function () {\n      const stack = evaluate(\"{ 99 }\");\n      const expectedStack = [99];\n      expect(stack).toEqual(expectedStack);\n    });","file":"unit/function_spec.js","skipped":false,"dir":"test"},{"name":"handles if with true","suites":["function","PostScriptEvaluator"],"line":89,"updatePoint":{"line":89,"column":28,"index":3433},"code":"    it(\"handles if with true\", function () {\n      const stack = evaluate(\"{ 1 {99} if }\");\n      const expectedStack = [99];\n      expect(stack).toEqual(expectedStack);\n    });","file":"unit/function_spec.js","skipped":false,"dir":"test"},{"name":"handles if with false","suites":["function","PostScriptEvaluator"],"line":94,"updatePoint":{"line":94,"column":29,"index":3612},"code":"    it(\"handles if with false\", function () {\n      const stack = evaluate(\"{ 0 {99} if }\");\n      const expectedStack = [];\n      expect(stack).toEqual(expectedStack);\n    });","file":"unit/function_spec.js","skipped":false,"dir":"test"},{"name":"handles ifelse with true","suites":["function","PostScriptEvaluator"],"line":99,"updatePoint":{"line":99,"column":32,"index":3792},"code":"    it(\"handles ifelse with true\", function () {\n      const stack = evaluate(\"{ 1 {99} {77} ifelse }\");\n      const expectedStack = [99];\n      expect(stack).toEqual(expectedStack);\n    });","file":"unit/function_spec.js","skipped":false,"dir":"test"},{"name":"handles ifelse with false","suites":["function","PostScriptEvaluator"],"line":104,"updatePoint":{"line":104,"column":33,"index":3984},"code":"    it(\"handles ifelse with false\", function () {\n      const stack = evaluate(\"{ 0 {99} {77} ifelse }\");\n      const expectedStack = [77];\n      expect(stack).toEqual(expectedStack);\n    });","file":"unit/function_spec.js","skipped":false,"dir":"test"},{"name":"handles nested if","suites":["function","PostScriptEvaluator"],"line":109,"updatePoint":{"line":109,"column":25,"index":4168},"code":"    it(\"handles nested if\", function () {\n      const stack = evaluate(\"{ 1 {1 {77} if} if }\");\n      const expectedStack = [77];\n      expect(stack).toEqual(expectedStack);\n    });","file":"unit/function_spec.js","skipped":false,"dir":"test"},{"name":"abs","suites":["function","PostScriptEvaluator"],"line":114,"updatePoint":{"line":114,"column":11,"index":4336},"code":"    it(\"abs\", function () {\n      const stack = evaluate(\"{ -2 abs }\");\n      const expectedStack = [2];\n      expect(stack).toEqual(expectedStack);\n    });","file":"unit/function_spec.js","skipped":false,"dir":"test"},{"name":"adds","suites":["function","PostScriptEvaluator"],"line":119,"updatePoint":{"line":119,"column":12,"index":4494},"code":"    it(\"adds\", function () {\n      const stack = evaluate(\"{ 1 2 add }\");\n      const expectedStack = [3];\n      expect(stack).toEqual(expectedStack);\n    });","file":"unit/function_spec.js","skipped":false,"dir":"test"},{"name":"boolean and","suites":["function","PostScriptEvaluator"],"line":124,"updatePoint":{"line":124,"column":19,"index":4660},"code":"    it(\"boolean and\", function () {\n      const stack = evaluate(\"{ true false and }\");\n      const expectedStack = [false];\n      expect(stack).toEqual(expectedStack);\n    });","file":"unit/function_spec.js","skipped":false,"dir":"test"},{"name":"bitwise and","suites":["function","PostScriptEvaluator"],"line":129,"updatePoint":{"line":129,"column":19,"index":4837},"code":"    it(\"bitwise and\", function () {\n      const stack = evaluate(\"{ 254 1 and }\");\n      const expectedStack = [254 & 1];\n      expect(stack).toEqual(expectedStack);\n    });","file":"unit/function_spec.js","skipped":false,"dir":"test"},{"name":"the angle in degrees (0-360) whose tangent is num/den.","suites":["function","PostScriptEvaluator"],"line":134,"updatePoint":{"line":134,"column":62,"index":5054},"code":"    it(\"the angle in degrees (0-360) whose tangent is num/den.\", function () {\n      const stack = evaluate(\"{ 1 -1 atan }\");\n      const expectedStack = [135];\n      expect(stack).toEqual(expectedStack);\n    });","file":"unit/function_spec.js","skipped":false,"dir":"test"},{"name":"handles bitshifting ","suites":["function","PostScriptEvaluator"],"line":139,"updatePoint":{"line":139,"column":28,"index":5233},"code":"    it(\"handles bitshifting \", function () {\n      const stack = evaluate(\"{ 50 2 bitshift }\");\n      const expectedStack = [200];\n      expect(stack).toEqual(expectedStack);\n    });","file":"unit/function_spec.js","skipped":false,"dir":"test"},{"name":"calculates the ceiling value","suites":["function","PostScriptEvaluator"],"line":144,"updatePoint":{"line":144,"column":36,"index":5424},"code":"    it(\"calculates the ceiling value\", function () {\n      const stack = evaluate(\"{ 9.9 ceiling }\");\n      const expectedStack = [10];\n      expect(stack).toEqual(expectedStack);\n    });","file":"unit/function_spec.js","skipped":false,"dir":"test"},{"name":"copies","suites":["function","PostScriptEvaluator"],"line":149,"updatePoint":{"line":149,"column":14,"index":5590},"code":"    it(\"copies\", function () {\n      const stack = evaluate(\"{ 99 98 2 copy }\");\n      const expectedStack = [99, 98, 99, 98];\n      expect(stack).toEqual(expectedStack);\n    });","file":"unit/function_spec.js","skipped":false,"dir":"test"},{"name":"calculates the cosine of an angle in degrees","suites":["function","PostScriptEvaluator"],"line":154,"updatePoint":{"line":154,"column":52,"index":5807},"code":"    it(\"calculates the cosine of an angle in degrees\", function () {\n      const stack = evaluate(\"{ 180 cos }\");\n      const expectedStack = [-1];\n      expect(stack).toEqual(expectedStack);\n    });","file":"unit/function_spec.js","skipped":false,"dir":"test"},{"name":"converts to int","suites":["function","PostScriptEvaluator"],"line":159,"updatePoint":{"line":159,"column":23,"index":5978},"code":"    it(\"converts to int\", function () {\n      const stack = evaluate(\"{ 9.9 cvi }\");\n      const expectedStack = [9];\n      expect(stack).toEqual(expectedStack);\n    });","file":"unit/function_spec.js","skipped":false,"dir":"test"},{"name":"converts negatives to int","suites":["function","PostScriptEvaluator"],"line":164,"updatePoint":{"line":164,"column":33,"index":6158},"code":"    it(\"converts negatives to int\", function () {\n      const stack = evaluate(\"{ -9.9 cvi }\");\n      const expectedStack = [-9];\n      expect(stack).toEqual(expectedStack);\n    });","file":"unit/function_spec.js","skipped":false,"dir":"test"},{"name":"converts to real","suites":["function","PostScriptEvaluator"],"line":169,"updatePoint":{"line":169,"column":24,"index":6331},"code":"    it(\"converts to real\", function () {\n      const stack = evaluate(\"{ 55.34 cvr }\");\n      const expectedStack = [55.34];\n      expect(stack).toEqual(expectedStack);\n    });","file":"unit/function_spec.js","skipped":false,"dir":"test"},{"name":"divides","suites":["function","PostScriptEvaluator"],"line":174,"updatePoint":{"line":174,"column":15,"index":6499},"code":"    it(\"divides\", function () {\n      const stack = evaluate(\"{ 6 5 div }\");\n      const expectedStack = [1.2];\n      expect(stack).toEqual(expectedStack);\n    });","file":"unit/function_spec.js","skipped":false,"dir":"test"},{"name":"maps division by zero to infinity","suites":["function","PostScriptEvaluator"],"line":179,"updatePoint":{"line":179,"column":41,"index":6689},"code":"    it(\"maps division by zero to infinity\", function () {\n      const stack = evaluate(\"{ 6 0 div }\");\n      const expectedStack = [Infinity];\n      expect(stack).toEqual(expectedStack);\n    });","file":"unit/function_spec.js","skipped":false,"dir":"test"},{"name":"duplicates","suites":["function","PostScriptEvaluator"],"line":184,"updatePoint":{"line":184,"column":18,"index":6861},"code":"    it(\"duplicates\", function () {\n      const stack = evaluate(\"{ 99 dup }\");\n      const expectedStack = [99, 99];\n      expect(stack).toEqual(expectedStack);\n    });","file":"unit/function_spec.js","skipped":false,"dir":"test"},{"name":"accepts an equality","suites":["function","PostScriptEvaluator"],"line":189,"updatePoint":{"line":189,"column":27,"index":7039},"code":"    it(\"accepts an equality\", function () {\n      const stack = evaluate(\"{ 9 9 eq }\");\n      const expectedStack = [true];\n      expect(stack).toEqual(expectedStack);\n    });","file":"unit/function_spec.js","skipped":false,"dir":"test"},{"name":"rejects an inequality","suites":["function","PostScriptEvaluator"],"line":194,"updatePoint":{"line":194,"column":29,"index":7217},"code":"    it(\"rejects an inequality\", function () {\n      const stack = evaluate(\"{ 9 8 eq }\");\n      const expectedStack = [false];\n      expect(stack).toEqual(expectedStack);\n    });","file":"unit/function_spec.js","skipped":false,"dir":"test"},{"name":"exchanges","suites":["function","PostScriptEvaluator"],"line":199,"updatePoint":{"line":199,"column":17,"index":7384},"code":"    it(\"exchanges\", function () {\n      const stack = evaluate(\"{ 44 99 exch }\");\n      const expectedStack = [99, 44];\n      expect(stack).toEqual(expectedStack);\n    });","file":"unit/function_spec.js","skipped":false,"dir":"test"},{"name":"handles exponentiation","suites":["function","PostScriptEvaluator"],"line":204,"updatePoint":{"line":204,"column":30,"index":7569},"code":"    it(\"handles exponentiation\", function () {\n      const stack = evaluate(\"{ 10 2 exp }\");\n      const expectedStack = [100];\n      expect(stack).toEqual(expectedStack);\n    });","file":"unit/function_spec.js","skipped":false,"dir":"test"},{"name":"pushes false onto the stack","suites":["function","PostScriptEvaluator"],"line":209,"updatePoint":{"line":209,"column":35,"index":7754},"code":"    it(\"pushes false onto the stack\", function () {\n      const stack = evaluate(\"{ false }\");\n      const expectedStack = [false];\n      expect(stack).toEqual(expectedStack);\n    });","file":"unit/function_spec.js","skipped":false,"dir":"test"},{"name":"calculates the floor value","suites":["function","PostScriptEvaluator"],"line":214,"updatePoint":{"line":214,"column":34,"index":7937},"code":"    it(\"calculates the floor value\", function () {\n      const stack = evaluate(\"{ 9.9 floor }\");\n      const expectedStack = [9];\n      expect(stack).toEqual(expectedStack);\n    });","file":"unit/function_spec.js","skipped":false,"dir":"test"},{"name":"handles greater than or equal to","suites":["function","PostScriptEvaluator"],"line":219,"updatePoint":{"line":219,"column":40,"index":8126},"code":"    it(\"handles greater than or equal to\", function () {\n      const stack = evaluate(\"{ 10 9 ge }\");\n      const expectedStack = [true];\n      expect(stack).toEqual(expectedStack);\n    });","file":"unit/function_spec.js","skipped":false,"dir":"test"},{"name":"rejects less than for greater than or equal to","suites":["function","PostScriptEvaluator"],"line":224,"updatePoint":{"line":224,"column":54,"index":8330},"code":"    it(\"rejects less than for greater than or equal to\", function () {\n      const stack = evaluate(\"{ 8 9 ge }\");\n      const expectedStack = [false];\n      expect(stack).toEqual(expectedStack);\n    });","file":"unit/function_spec.js","skipped":false,"dir":"test"},{"name":"handles greater than","suites":["function","PostScriptEvaluator"],"line":229,"updatePoint":{"line":229,"column":28,"index":8508},"code":"    it(\"handles greater than\", function () {\n      const stack = evaluate(\"{ 10 9 gt }\");\n      const expectedStack = [true];\n      expect(stack).toEqual(expectedStack);\n    });","file":"unit/function_spec.js","skipped":false,"dir":"test"},{"name":"rejects less than or equal for greater than","suites":["function","PostScriptEvaluator"],"line":234,"updatePoint":{"line":234,"column":51,"index":8709},"code":"    it(\"rejects less than or equal for greater than\", function () {\n      const stack = evaluate(\"{ 9 9 gt }\");\n      const expectedStack = [false];\n      expect(stack).toEqual(expectedStack);\n    });","file":"unit/function_spec.js","skipped":false,"dir":"test"},{"name":"divides to integer","suites":["function","PostScriptEvaluator"],"line":239,"updatePoint":{"line":239,"column":26,"index":8885},"code":"    it(\"divides to integer\", function () {\n      const stack = evaluate(\"{ 2 3 idiv }\");\n      const expectedStack = [0];\n      expect(stack).toEqual(expectedStack);\n    });","file":"unit/function_spec.js","skipped":false,"dir":"test"},{"name":"divides to negative integer","suites":["function","PostScriptEvaluator"],"line":244,"updatePoint":{"line":244,"column":35,"index":9068},"code":"    it(\"divides to negative integer\", function () {\n      const stack = evaluate(\"{ -2 3 idiv }\");\n      const expectedStack = [0];\n      expect(stack).toEqual(expectedStack);\n    });","file":"unit/function_spec.js","skipped":false,"dir":"test"},{"name":"duplicates index","suites":["function","PostScriptEvaluator"],"line":249,"updatePoint":{"line":249,"column":24,"index":9241},"code":"    it(\"duplicates index\", function () {\n      const stack = evaluate(\"{ 4 3 2 1 2 index }\");\n      const expectedStack = [4, 3, 2, 1, 3];\n      expect(stack).toEqual(expectedStack);\n    });","file":"unit/function_spec.js","skipped":false,"dir":"test"},{"name":"handles less than or equal to","suites":["function","PostScriptEvaluator"],"line":254,"updatePoint":{"line":254,"column":37,"index":9445},"code":"    it(\"handles less than or equal to\", function () {\n      const stack = evaluate(\"{ 9 10 le }\");\n      const expectedStack = [true];\n      expect(stack).toEqual(expectedStack);\n    });","file":"unit/function_spec.js","skipped":false,"dir":"test"},{"name":"rejects greater than for less than or equal to","suites":["function","PostScriptEvaluator"],"line":259,"updatePoint":{"line":259,"column":54,"index":9649},"code":"    it(\"rejects greater than for less than or equal to\", function () {\n      const stack = evaluate(\"{ 10 9 le }\");\n      const expectedStack = [false];\n      expect(stack).toEqual(expectedStack);\n    });","file":"unit/function_spec.js","skipped":false,"dir":"test"},{"name":"calculates the natural logarithm","suites":["function","PostScriptEvaluator"],"line":264,"updatePoint":{"line":264,"column":40,"index":9840},"code":"    it(\"calculates the natural logarithm\", function () {\n      const stack = evaluate(\"{ 10 ln }\");\n      const expectedStack = [Math.log(10)];\n      expect(stack).toEqual(expectedStack);\n    });","file":"unit/function_spec.js","skipped":false,"dir":"test"},{"name":"calculates the base 10 logarithm","suites":["function","PostScriptEvaluator"],"line":269,"updatePoint":{"line":269,"column":40,"index":10036},"code":"    it(\"calculates the base 10 logarithm\", function () {\n      const stack = evaluate(\"{ 100 log }\");\n      const expectedStack = [2];\n      expect(stack).toEqual(expectedStack);\n    });","file":"unit/function_spec.js","skipped":false,"dir":"test"},{"name":"handles less than","suites":["function","PostScriptEvaluator"],"line":274,"updatePoint":{"line":274,"column":25,"index":10208},"code":"    it(\"handles less than\", function () {\n      const stack = evaluate(\"{ 9 10 lt }\");\n      const expectedStack = [true];\n      expect(stack).toEqual(expectedStack);\n    });","file":"unit/function_spec.js","skipped":false,"dir":"test"},{"name":"rejects greater than or equal to for less than","suites":["function","PostScriptEvaluator"],"line":279,"updatePoint":{"line":279,"column":54,"index":10412},"code":"    it(\"rejects greater than or equal to for less than\", function () {\n      const stack = evaluate(\"{ 10 9 lt }\");\n      const expectedStack = [false];\n      expect(stack).toEqual(expectedStack);\n    });","file":"unit/function_spec.js","skipped":false,"dir":"test"},{"name":"performs the modulo operation","suites":["function","PostScriptEvaluator"],"line":284,"updatePoint":{"line":284,"column":37,"index":10600},"code":"    it(\"performs the modulo operation\", function () {\n      const stack = evaluate(\"{ 4 3 mod }\");\n      const expectedStack = [1];\n      expect(stack).toEqual(expectedStack);\n    });","file":"unit/function_spec.js","skipped":false,"dir":"test"},{"name":"multiplies two numbers (positive result)","suites":["function","PostScriptEvaluator"],"line":289,"updatePoint":{"line":289,"column":48,"index":10795},"code":"    it(\"multiplies two numbers (positive result)\", function () {\n      const stack = evaluate(\"{ 9 8 mul }\");\n      const expectedStack = [72];\n      expect(stack).toEqual(expectedStack);\n    });","file":"unit/function_spec.js","skipped":false,"dir":"test"},{"name":"multiplies two numbers (negative result)","suites":["function","PostScriptEvaluator"],"line":294,"updatePoint":{"line":294,"column":48,"index":10991},"code":"    it(\"multiplies two numbers (negative result)\", function () {\n      const stack = evaluate(\"{ 9 -8 mul }\");\n      const expectedStack = [-72];\n      expect(stack).toEqual(expectedStack);\n    });","file":"unit/function_spec.js","skipped":false,"dir":"test"},{"name":"accepts an inequality","suites":["function","PostScriptEvaluator"],"line":299,"updatePoint":{"line":299,"column":29,"index":11170},"code":"    it(\"accepts an inequality\", function () {\n      const stack = evaluate(\"{ 9 8 ne }\");\n      const expectedStack = [true];\n      expect(stack).toEqual(expectedStack);\n    });","file":"unit/function_spec.js","skipped":false,"dir":"test"},{"name":"rejects an equality","suites":["function","PostScriptEvaluator"],"line":304,"updatePoint":{"line":304,"column":27,"index":11346},"code":"    it(\"rejects an equality\", function () {\n      const stack = evaluate(\"{ 9 9 ne }\");\n      const expectedStack = [false];\n      expect(stack).toEqual(expectedStack);\n    });","file":"unit/function_spec.js","skipped":false,"dir":"test"},{"name":"negates","suites":["function","PostScriptEvaluator"],"line":309,"updatePoint":{"line":309,"column":15,"index":11511},"code":"    it(\"negates\", function () {\n      const stack = evaluate(\"{ 4.5 neg }\");\n      const expectedStack = [-4.5];\n      expect(stack).toEqual(expectedStack);\n    });","file":"unit/function_spec.js","skipped":false,"dir":"test"},{"name":"boolean not","suites":["function","PostScriptEvaluator"],"line":314,"updatePoint":{"line":314,"column":19,"index":11680},"code":"    it(\"boolean not\", function () {\n      const stack = evaluate(\"{ true not }\");\n      const expectedStack = [false];\n      expect(stack).toEqual(expectedStack);\n    });","file":"unit/function_spec.js","skipped":false,"dir":"test"},{"name":"bitwise not","suites":["function","PostScriptEvaluator"],"line":319,"updatePoint":{"line":319,"column":19,"index":11851},"code":"    it(\"bitwise not\", function () {\n      const stack = evaluate(\"{ 12 not }\");\n      const expectedStack = [-13];\n      expect(stack).toEqual(expectedStack);\n    });","file":"unit/function_spec.js","skipped":false,"dir":"test"},{"name":"boolean or","suites":["function","PostScriptEvaluator"],"line":324,"updatePoint":{"line":324,"column":18,"index":12017},"code":"    it(\"boolean or\", function () {\n      const stack = evaluate(\"{ true false or }\");\n      const expectedStack = [true];\n      expect(stack).toEqual(expectedStack);\n    });","file":"unit/function_spec.js","skipped":false,"dir":"test"},{"name":"bitwise or","suites":["function","PostScriptEvaluator"],"line":329,"updatePoint":{"line":329,"column":18,"index":12191},"code":"    it(\"bitwise or\", function () {\n      const stack = evaluate(\"{ 254 1 or }\");\n      const expectedStack = [254 | 1];\n      expect(stack).toEqual(expectedStack);\n    });","file":"unit/function_spec.js","skipped":false,"dir":"test"},{"name":"pops stack","suites":["function","PostScriptEvaluator"],"line":334,"updatePoint":{"line":334,"column":18,"index":12363},"code":"    it(\"pops stack\", function () {\n      const stack = evaluate(\"{ 1 2 pop }\");\n      const expectedStack = [1];\n      expect(stack).toEqual(expectedStack);\n    });","file":"unit/function_spec.js","skipped":false,"dir":"test"},{"name":"rolls stack right","suites":["function","PostScriptEvaluator"],"line":339,"updatePoint":{"line":339,"column":25,"index":12535},"code":"    it(\"rolls stack right\", function () {\n      const stack = evaluate(\"{ 1 3 2 2 4 1 roll }\");\n      const expectedStack = [2, 1, 3, 2];\n      expect(stack).toEqual(expectedStack);\n    });","file":"unit/function_spec.js","skipped":false,"dir":"test"},{"name":"rolls stack left","suites":["function","PostScriptEvaluator"],"line":344,"updatePoint":{"line":344,"column":24,"index":12724},"code":"    it(\"rolls stack left\", function () {\n      const stack = evaluate(\"{ 1 3 2 2 4 -1 roll }\");\n      const expectedStack = [3, 2, 2, 1];\n      expect(stack).toEqual(expectedStack);\n    });","file":"unit/function_spec.js","skipped":false,"dir":"test"},{"name":"rounds a number","suites":["function","PostScriptEvaluator"],"line":349,"updatePoint":{"line":349,"column":23,"index":12913},"code":"    it(\"rounds a number\", function () {\n      const stack = evaluate(\"{ 9.52 round }\");\n      const expectedStack = [10];\n      expect(stack).toEqual(expectedStack);\n    });","file":"unit/function_spec.js","skipped":false,"dir":"test"},{"name":"calculates the sine of an angle in degrees","suites":["function","PostScriptEvaluator"],"line":354,"updatePoint":{"line":354,"column":50,"index":13114},"code":"    it(\"calculates the sine of an angle in degrees\", function () {\n      const stack = evaluate(\"{ 90 sin }\");\n      const expectedStack = [1];\n      expect(stack).toEqual(expectedStack);\n    });","file":"unit/function_spec.js","skipped":false,"dir":"test"},{"name":"calculates a square root (integer)","suites":["function","PostScriptEvaluator"],"line":359,"updatePoint":{"line":359,"column":42,"index":13302},"code":"    it(\"calculates a square root (integer)\", function () {\n      const stack = evaluate(\"{ 100 sqrt }\");\n      const expectedStack = [10];\n      expect(stack).toEqual(expectedStack);\n    });","file":"unit/function_spec.js","skipped":false,"dir":"test"},{"name":"calculates a square root (float)","suites":["function","PostScriptEvaluator"],"line":364,"updatePoint":{"line":364,"column":40,"index":13491},"code":"    it(\"calculates a square root (float)\", function () {\n      const stack = evaluate(\"{ 99 sqrt }\");\n      const expectedStack = [Math.sqrt(99)];\n      expect(stack).toEqual(expectedStack);\n    });","file":"unit/function_spec.js","skipped":false,"dir":"test"},{"name":"subtracts (positive result)","suites":["function","PostScriptEvaluator"],"line":369,"updatePoint":{"line":369,"column":35,"index":13685},"code":"    it(\"subtracts (positive result)\", function () {\n      const stack = evaluate(\"{ 6 4 sub }\");\n      const expectedStack = [2];\n      expect(stack).toEqual(expectedStack);\n    });","file":"unit/function_spec.js","skipped":false,"dir":"test"},{"name":"subtracts (negative result)","suites":["function","PostScriptEvaluator"],"line":374,"updatePoint":{"line":374,"column":35,"index":13867},"code":"    it(\"subtracts (negative result)\", function () {\n      const stack = evaluate(\"{ 4 6 sub }\");\n      const expectedStack = [-2];\n      expect(stack).toEqual(expectedStack);\n    });","file":"unit/function_spec.js","skipped":false,"dir":"test"},{"name":"pushes true onto the stack","suites":["function","PostScriptEvaluator"],"line":379,"updatePoint":{"line":379,"column":34,"index":14049},"code":"    it(\"pushes true onto the stack\", function () {\n      const stack = evaluate(\"{ true }\");\n      const expectedStack = [true];\n      expect(stack).toEqual(expectedStack);\n    });","file":"unit/function_spec.js","skipped":false,"dir":"test"},{"name":"truncates a number","suites":["function","PostScriptEvaluator"],"line":384,"updatePoint":{"line":384,"column":26,"index":14222},"code":"    it(\"truncates a number\", function () {\n      const stack = evaluate(\"{ 35.004 truncate }\");\n      const expectedStack = [35];\n      expect(stack).toEqual(expectedStack);\n    });","file":"unit/function_spec.js","skipped":false,"dir":"test"},{"name":"calculates an exclusive or value","suites":["function","PostScriptEvaluator"],"line":389,"updatePoint":{"line":389,"column":40,"index":14418},"code":"    it(\"calculates an exclusive or value\", function () {\n      const stack = evaluate(\"{ 3 9 xor }\");\n      const expectedStack = [10];\n      expect(stack).toEqual(expectedStack);\n    });","file":"unit/function_spec.js","skipped":false,"dir":"test"},{"name":"check compiled add","suites":["function","PostScriptCompiler"],"line":415,"updatePoint":{"line":415,"column":26,"index":15320},"code":"    it(\"check compiled add\", function () {\n      check([0.25, 0.5, \"add\"], [], [0, 1], [{\n        input: [],\n        output: [0.75]\n      }]);\n      check([0, \"add\"], [0, 1], [0, 1], [{\n        input: [0.25],\n        output: [0.25]\n      }]);\n      check([0.5, \"add\"], [0, 1], [0, 1], [{\n        input: [0.25],\n        output: [0.75]\n      }]);\n      check([0, \"exch\", \"add\"], [0, 1], [0, 1], [{\n        input: [0.25],\n        output: [0.25]\n      }]);\n      check([0.5, \"exch\", \"add\"], [0, 1], [0, 1], [{\n        input: [0.25],\n        output: [0.75]\n      }]);\n      check([\"add\"], [0, 1, 0, 1], [0, 1], [{\n        input: [0.25, 0.5],\n        output: [0.75]\n      }]);\n      check([\"add\"], [0, 1], [0, 1], null);\n    });","file":"unit/function_spec.js","skipped":false,"dir":"test"},{"name":"check compiled sub","suites":["function","PostScriptCompiler"],"line":442,"updatePoint":{"line":442,"column":26,"index":16043},"code":"    it(\"check compiled sub\", function () {\n      check([0.5, 0.25, \"sub\"], [], [0, 1], [{\n        input: [],\n        output: [0.25]\n      }]);\n      check([0, \"sub\"], [0, 1], [0, 1], [{\n        input: [0.25],\n        output: [0.25]\n      }]);\n      check([0.5, \"sub\"], [0, 1], [0, 1], [{\n        input: [0.75],\n        output: [0.25]\n      }]);\n      check([0, \"exch\", \"sub\"], [0, 1], [-1, 1], [{\n        input: [0.25],\n        output: [-0.25]\n      }]);\n      check([0.75, \"exch\", \"sub\"], [0, 1], [-1, 1], [{\n        input: [0.25],\n        output: [0.5]\n      }]);\n      check([\"sub\"], [0, 1, 0, 1], [-1, 1], [{\n        input: [0.25, 0.5],\n        output: [-0.25]\n      }]);\n      check([\"sub\"], [0, 1], [0, 1], null);\n      check([1, \"dup\", 3, 2, \"roll\", \"sub\", \"sub\"], [0, 1], [0, 1], [{\n        input: [0.75],\n        output: [0.75]\n      }]);\n    });","file":"unit/function_spec.js","skipped":false,"dir":"test"},{"name":"check compiled mul","suites":["function","PostScriptCompiler"],"line":473,"updatePoint":{"line":473,"column":26,"index":16899},"code":"    it(\"check compiled mul\", function () {\n      check([0.25, 0.5, \"mul\"], [], [0, 1], [{\n        input: [],\n        output: [0.125]\n      }]);\n      check([0, \"mul\"], [0, 1], [0, 1], [{\n        input: [0.25],\n        output: [0]\n      }]);\n      check([0.5, \"mul\"], [0, 1], [0, 1], [{\n        input: [0.25],\n        output: [0.125]\n      }]);\n      check([1, \"mul\"], [0, 1], [0, 1], [{\n        input: [0.25],\n        output: [0.25]\n      }]);\n      check([0, \"exch\", \"mul\"], [0, 1], [0, 1], [{\n        input: [0.25],\n        output: [0]\n      }]);\n      check([0.5, \"exch\", \"mul\"], [0, 1], [0, 1], [{\n        input: [0.25],\n        output: [0.125]\n      }]);\n      check([1, \"exch\", \"mul\"], [0, 1], [0, 1], [{\n        input: [0.25],\n        output: [0.25]\n      }]);\n      check([\"mul\"], [0, 1, 0, 1], [0, 1], [{\n        input: [0.25, 0.5],\n        output: [0.125]\n      }]);\n      check([\"mul\"], [0, 1], [0, 1], null);\n    });","file":"unit/function_spec.js","skipped":false,"dir":"test"},{"name":"check compiled max","suites":["function","PostScriptCompiler"],"line":508,"updatePoint":{"line":508,"column":26,"index":17828},"code":"    it(\"check compiled max\", function () {\n      check([\"dup\", 0.75, \"gt\", 7, \"jz\", \"pop\", 0.75], [0, 1], [0, 1], [{\n        input: [0.5],\n        output: [0.5]\n      }]);\n      check([\"dup\", 0.75, \"gt\", 7, \"jz\", \"pop\", 0.75], [0, 1], [0, 1], [{\n        input: [1],\n        output: [0.75]\n      }]);\n      check([\"dup\", 0.75, \"gt\", 5, \"jz\", \"pop\", 0.75], [0, 1], [0, 1], null);\n    });","file":"unit/function_spec.js","skipped":false,"dir":"test"},{"name":"check pop/roll/index","suites":["function","PostScriptCompiler"],"line":519,"updatePoint":{"line":519,"column":28,"index":18216},"code":"    it(\"check pop/roll/index\", function () {\n      check([1, \"pop\"], [0, 1], [0, 1], [{\n        input: [0.5],\n        output: [0.5]\n      }]);\n      check([1, 3, -1, \"roll\"], [0, 1, 0, 1], [0, 1, 0, 1, 0, 1], [{\n        input: [0.25, 0.5],\n        output: [0.5, 1, 0.25]\n      }]);\n      check([1, 3, 1, \"roll\"], [0, 1, 0, 1], [0, 1, 0, 1, 0, 1], [{\n        input: [0.25, 0.5],\n        output: [1, 0.25, 0.5]\n      }]);\n      check([1, 3, 1.5, \"roll\"], [0, 1, 0, 1], [0, 1, 0, 1, 0, 1], null);\n      check([1, 1, \"index\"], [0, 1], [0, 1, 0, 1, 0, 1], [{\n        input: [0.5],\n        output: [0.5, 1, 0.5]\n      }]);\n      check([1, 3, \"index\", \"pop\"], [0, 1], [0, 1], null);\n      check([1, 0.5, \"index\", \"pop\"], [0, 1], [0, 1], null);\n    });","file":"unit/function_spec.js","skipped":false,"dir":"test"},{"name":"check input boundaries","suites":["function","PostScriptCompiler"],"line":540,"updatePoint":{"line":540,"column":30,"index":18963},"code":"    it(\"check input boundaries\", function () {\n      check([], [0, 0.5], [0, 1], [{\n        input: [1],\n        output: [0.5]\n      }]);\n      check([], [0.5, 1], [0, 1], [{\n        input: [0],\n        output: [0.5]\n      }]);\n      check([\"dup\"], [0.5, 0.75], [0, 1, 0, 1], [{\n        input: [0],\n        output: [0.5, 0.5]\n      }]);\n      check([], [100, 1001], [0, 10000], [{\n        input: [1000],\n        output: [1000]\n      }]);\n    });","file":"unit/function_spec.js","skipped":false,"dir":"test"},{"name":"check output boundaries","suites":["function","PostScriptCompiler"],"line":558,"updatePoint":{"line":558,"column":31,"index":19409},"code":"    it(\"check output boundaries\", function () {\n      check([], [0, 1], [0, 0.5], [{\n        input: [1],\n        output: [0.5]\n      }]);\n      check([], [0, 1], [0.5, 1], [{\n        input: [0],\n        output: [0.5]\n      }]);\n      check([\"dup\"], [0, 1], [0.5, 1, 0.75, 1], [{\n        input: [0],\n        output: [0.5, 0.75]\n      }]);\n      check([], [0, 10000], [100, 1001], [{\n        input: [1000],\n        output: [1000]\n      }]);\n    });","file":"unit/function_spec.js","skipped":false,"dir":"test"},{"name":"compile optimized","suites":["function","PostScriptCompiler"],"line":576,"updatePoint":{"line":576,"column":25,"index":19850},"code":"    it(\"compile optimized\", function () {\n      const compiler = new PostScriptCompiler();\n      const code = [0, \"add\", 1, 1, 3, -1, \"roll\", \"sub\", \"sub\", 1, \"mul\"];\n      const compiledCode = compiler.compile(code, [0, 1], [0, 1]);\n      expect(compiledCode).toEqual(\"dest[destOffset + 0] = Math.max(0, Math.min(1, src[srcOffset + 0]));\");\n    });","file":"unit/function_spec.js","skipped":false,"dir":"test"},{"name":"should return a ReadableStream","suites":["message_handler","sendWithStream"],"line":27,"updatePoint":{"line":27,"column":38,"index":1148},"code":"    it(\"should return a ReadableStream\", function () {\n      const port = new LoopbackPort();\n      const messageHandler1 = new MessageHandler(\"main\", \"worker\", port);\n      const readable = messageHandler1.sendWithStream(\"fakeHandler\");\n      // Check if readable is an instance of ReadableStream.\n      expect(typeof readable).toEqual(\"object\");\n      expect(typeof readable.getReader).toEqual(\"function\");\n    });","file":"unit/message_handler_spec.js","skipped":false,"dir":"test"},{"name":"should read using a reader","suites":["message_handler","sendWithStream"],"line":35,"updatePoint":{"line":35,"column":34,"index":1561},"code":"    it(\"should read using a reader\", async function () {\n      let log = \"\";\n      const port = new LoopbackPort();\n      const messageHandler1 = new MessageHandler(\"main\", \"worker\", port);\n      const messageHandler2 = new MessageHandler(\"worker\", \"main\", port);\n      messageHandler2.on(\"fakeHandler\", (data, sink) => {\n        sink.onPull = function () {\n          log += \"p\";\n        };\n        sink.onCancel = function (reason) {\n          log += \"c\";\n        };\n        sink.ready.then(() => {\n          sink.enqueue(\"hi\");\n          return sink.ready;\n        }).then(() => {\n          sink.close();\n        });\n        return sleep(5);\n      });\n      const readable = messageHandler1.sendWithStream(\"fakeHandler\", {}, {\n        highWaterMark: 1,\n        size() {\n          return 1;\n        }\n      });\n      const reader = readable.getReader();\n      await sleep(10);\n      expect(log).toEqual(\"\");\n      let result = await reader.read();\n      expect(log).toEqual(\"p\");\n      expect(result.value).toEqual(\"hi\");\n      expect(result.done).toEqual(false);\n      await sleep(10);\n      result = await reader.read();\n      expect(result.value).toEqual(undefined);\n      expect(result.done).toEqual(true);\n    });","file":"unit/message_handler_spec.js","skipped":false,"dir":"test"},{"name":"should not read any data when cancelled","suites":["message_handler","sendWithStream"],"line":73,"updatePoint":{"line":73,"column":47,"index":2794},"code":"    it(\"should not read any data when cancelled\", async function () {\n      let log = \"\";\n      const port = new LoopbackPort();\n      const messageHandler2 = new MessageHandler(\"worker\", \"main\", port);\n      messageHandler2.on(\"fakeHandler\", (data, sink) => {\n        sink.onPull = function () {\n          log += \"p\";\n        };\n        sink.onCancel = function (reason) {\n          log += \"c\";\n        };\n        log += \"0\";\n        sink.ready.then(() => {\n          log += \"1\";\n          sink.enqueue([1, 2, 3, 4], 4);\n          return sink.ready;\n        }).then(() => {\n          log += \"2\";\n          sink.enqueue([5, 6, 7, 8], 4);\n          return sink.ready;\n        }).then(() => {\n          log += \"3\";\n          sink.close();\n        }, () => {\n          log += \"4\";\n        });\n      });\n      const messageHandler1 = new MessageHandler(\"main\", \"worker\", port);\n      const readable = messageHandler1.sendWithStream(\"fakeHandler\", {}, {\n        highWaterMark: 4,\n        size(arr) {\n          return arr.length;\n        }\n      });\n      const reader = readable.getReader();\n      await sleep(10);\n      expect(log).toEqual(\"01\");\n      const result = await reader.read();\n      expect(result.value).toEqual([1, 2, 3, 4]);\n      expect(result.done).toEqual(false);\n      await sleep(10);\n      expect(log).toEqual(\"01p2\");\n      await reader.cancel(new AbortException(\"reader cancelled.\"));\n      expect(log).toEqual(\"01p2c4\");\n    });","file":"unit/message_handler_spec.js","skipped":false,"dir":"test"},{"name":"should not read when errored","suites":["message_handler","sendWithStream"],"line":118,"updatePoint":{"line":118,"column":36,"index":4231},"code":"    it(\"should not read when errored\", async function () {\n      let log = \"\";\n      const port = new LoopbackPort();\n      const messageHandler2 = new MessageHandler(\"worker\", \"main\", port);\n      messageHandler2.on(\"fakeHandler\", (data, sink) => {\n        sink.onPull = function () {\n          log += \"p\";\n        };\n        sink.onCancel = function (reason) {\n          log += \"c\";\n        };\n        log += \"0\";\n        sink.ready.then(() => {\n          log += \"1\";\n          sink.enqueue([1, 2, 3, 4], 4);\n          return sink.ready;\n        }).then(() => {\n          log += \"e\";\n          sink.error(new Error(\"should not read when errored\"));\n        });\n      });\n      const messageHandler1 = new MessageHandler(\"main\", \"worker\", port);\n      const readable = messageHandler1.sendWithStream(\"fakeHandler\", {}, {\n        highWaterMark: 4,\n        size(arr) {\n          return arr.length;\n        }\n      });\n      const reader = readable.getReader();\n      await sleep(10);\n      expect(log).toEqual(\"01\");\n      const result = await reader.read();\n      expect(result.value).toEqual([1, 2, 3, 4]);\n      expect(result.done).toEqual(false);\n      try {\n        await reader.read();\n\n        // Shouldn't get here.\n        expect(false).toEqual(true);\n      } catch (reason) {\n        expect(log).toEqual(\"01pe\");\n        expect(reason instanceof UnknownErrorException).toEqual(true);\n        expect(reason.message).toEqual(\"should not read when errored\");\n      }\n    });","file":"unit/message_handler_spec.js","skipped":false,"dir":"test"},{"name":"should read data with blocking promise","suites":["message_handler","sendWithStream"],"line":163,"updatePoint":{"line":163,"column":46,"index":5722},"code":"    it(\"should read data with blocking promise\", async function () {\n      let log = \"\";\n      const port = new LoopbackPort();\n      const messageHandler2 = new MessageHandler(\"worker\", \"main\", port);\n      messageHandler2.on(\"fakeHandler\", (data, sink) => {\n        sink.onPull = function () {\n          log += \"p\";\n        };\n        sink.onCancel = function (reason) {\n          log += \"c\";\n        };\n        log += \"0\";\n        sink.ready.then(() => {\n          log += \"1\";\n          sink.enqueue([1, 2, 3, 4], 4);\n          return sink.ready;\n        }).then(() => {\n          log += \"2\";\n          sink.enqueue([5, 6, 7, 8], 4);\n          return sink.ready;\n        }).then(() => {\n          sink.close();\n        });\n      });\n      const messageHandler1 = new MessageHandler(\"main\", \"worker\", port);\n      const readable = messageHandler1.sendWithStream(\"fakeHandler\", {}, {\n        highWaterMark: 4,\n        size(arr) {\n          return arr.length;\n        }\n      });\n      const reader = readable.getReader();\n      // Sleep for 10ms, so that read() is not unblocking the ready promise.\n      // Chain all read() to stream in sequence.\n      await sleep(10);\n      expect(log).toEqual(\"01\");\n      let result = await reader.read();\n      expect(result.value).toEqual([1, 2, 3, 4]);\n      expect(result.done).toEqual(false);\n      await sleep(10);\n      expect(log).toEqual(\"01p2\");\n      result = await reader.read();\n      expect(result.value).toEqual([5, 6, 7, 8]);\n      expect(result.done).toEqual(false);\n      await sleep(10);\n      expect(log).toEqual(\"01p2p\");\n      result = await reader.read();\n      expect(result.value).toEqual(undefined);\n      expect(result.done).toEqual(true);\n    });","file":"unit/message_handler_spec.js","skipped":false,"dir":"test"},{"name":"should ignore any pull after close is called","suites":["message_handler","sendWithStream"],"line":262,"updatePoint":{"line":262,"column":52,"index":9095},"code":"    it(\"should ignore any pull after close is called\", async function () {\n      let log = \"\";\n      const port = new LoopbackPort();\n      const capability = new PromiseCapability();\n      const messageHandler2 = new MessageHandler(\"worker\", \"main\", port);\n      messageHandler2.on(\"fakeHandler\", (data, sink) => {\n        sink.onPull = function () {\n          log += \"p\";\n        };\n        sink.onCancel = function (reason) {\n          log += \"c\";\n        };\n        log += \"0\";\n        sink.ready.then(() => {\n          log += \"1\";\n          sink.enqueue([1, 2, 3, 4], 4);\n        });\n        return capability.promise.then(() => {\n          sink.close();\n        });\n      });\n      const messageHandler1 = new MessageHandler(\"main\", \"worker\", port);\n      const readable = messageHandler1.sendWithStream(\"fakeHandler\", {}, {\n        highWaterMark: 10,\n        size(arr) {\n          return arr.length;\n        }\n      });\n      const reader = readable.getReader();\n      await sleep(10);\n      expect(log).toEqual(\"01\");\n      capability.resolve();\n      await capability.promise;\n      let result = await reader.read();\n      expect(result.value).toEqual([1, 2, 3, 4]);\n      expect(result.done).toEqual(false);\n      await sleep(10);\n      expect(log).toEqual(\"01\");\n      result = await reader.read();\n      expect(result.value).toEqual(undefined);\n      expect(result.done).toEqual(true);\n    });","file":"unit/message_handler_spec.js","skipped":false,"dir":"test"},{"name":"should handle valid metadata","suites":["metadata"],"line":24,"updatePoint":{"line":24,"column":34,"index":971},"code":"  it(\"should handle valid metadata\", function () {\n    const data = \"<x:xmpmeta xmlns:x='adobe:ns:meta/'>\" + \"<rdf:RDF xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#'>\" + \"<rdf:Description xmlns:dc='http://purl.org/dc/elements/1.1/'>\" + '<dc:title><rdf:Alt><rdf:li xml:lang=\"x-default\">Foo bar baz</rdf:li>' + \"</rdf:Alt></dc:title></rdf:Description></rdf:RDF></x:xmpmeta>\";\n    const metadata = createMetadata(data);\n    expect(metadata.has(\"dc:title\")).toBeTruthy();\n    expect(metadata.has(\"dc:qux\")).toBeFalsy();\n    expect(metadata.get(\"dc:title\")).toEqual(\"Foo bar baz\");\n    expect(metadata.get(\"dc:qux\")).toEqual(null);\n    expect(metadata.getAll()).toEqual({\n      \"dc:title\": \"Foo bar baz\"\n    });\n  });","file":"unit/metadata_spec.js","skipped":false,"dir":"test"},{"name":"should repair and handle invalid metadata","suites":["metadata"],"line":35,"updatePoint":{"line":35,"column":47,"index":1706},"code":"  it(\"should repair and handle invalid metadata\", function () {\n    const data = \"<x:xmpmeta xmlns:x='adobe:ns:meta/'>\" + \"<rdf:RDF xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#'>\" + \"<rdf:Description xmlns:dc='http://purl.org/dc/elements/1.1/'>\" + \"<dc:title>\\\\376\\\\377\\\\000P\\\\000D\\\\000F\\\\000&</dc:title>\" + \"</rdf:Description></rdf:RDF></x:xmpmeta>\";\n    const metadata = createMetadata(data);\n    expect(metadata.has(\"dc:title\")).toBeTruthy();\n    expect(metadata.has(\"dc:qux\")).toBeFalsy();\n    expect(metadata.get(\"dc:title\")).toEqual(\"PDF&\");\n    expect(metadata.get(\"dc:qux\")).toEqual(null);\n    expect(metadata.getAll()).toEqual({\n      \"dc:title\": \"PDF&\"\n    });\n  });","file":"unit/metadata_spec.js","skipped":false,"dir":"test"},{"name":"should repair and handle invalid metadata (bug 1424938)","suites":["metadata"],"line":46,"updatePoint":{"line":46,"column":61,"index":2407},"code":"  it(\"should repair and handle invalid metadata (bug 1424938)\", function () {\n    const data = \"<x:xmpmeta xmlns:x='adobe:ns:meta/' \" + \"x:xmptk='XMP toolkit 2.9.1-13, framework 1.6'>\" + \"<rdf:RDF xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#' \" + \"xmlns:iX='http://ns.adobe.com/iX/1.0/'>\" + \"<rdf:Description rdf:about='61652fa7-fc1f-11dd-0000-ce81d41f9ecf' \" + \"xmlns:pdf='http://ns.adobe.com/pdf/1.3/' \" + \"pdf:Producer='GPL Ghostscript 8.63'/>\" + \"<rdf:Description rdf:about='61652fa7-fc1f-11dd-0000-ce81d41f9ecf' \" + \"xmlns:xap='http://ns.adobe.com/xap/1.0/' \" + \"xap:ModifyDate='2009-02-13T12:42:54+01:00' \" + \"xap:CreateDate='2009-02-13T12:42:54+01:00'>\" + \"<xap:CreatorTool>\\\\376\\\\377\\\\000P\\\\000D\\\\000F\\\\000C\\\\000r\\\\000e\\\\000a\" + \"\\\\000t\\\\000o\\\\000r\\\\000 \\\\000V\\\\000e\\\\000r\\\\000s\\\\000i\\\\000o\\\\000n\" + \"\\\\000 \\\\0000\\\\000.\\\\0009\\\\000.\\\\0006</xap:CreatorTool>\" + \"</rdf:Description><rdf:Description \" + \"rdf:about='61652fa7-fc1f-11dd-0000-ce81d41f9ecf' \" + \"xmlns:xapMM='http://ns.adobe.com/xap/1.0/mm/' \" + \"xapMM:DocumentID='61652fa7-fc1f-11dd-0000-ce81d41f9ecf'/>\" + \"<rdf:Description rdf:about='61652fa7-fc1f-11dd-0000-ce81d41f9ecf' \" + \"xmlns:dc='http://purl.org/dc/elements/1.1/' \" + \"dc:format='application/pdf'><dc:title><rdf:Alt>\" + \"<rdf:li xml:lang='x-default'>\\\\376\\\\377\\\\000L\\\\000&apos;\\\\000O\\\\000d\" + \"\\\\000i\\\\000s\\\\000s\\\\000e\\\\000e\\\\000 \\\\000t\\\\000h\\\\000\\\\351\\\\000m\\\\000a\" + \"\\\\000t\\\\000i\\\\000q\\\\000u\\\\000e\\\\000 \\\\000l\\\\000o\\\\000g\\\\000o\\\\000 \" + \"\\\\000O\\\\000d\\\\000i\\\\000s\\\\000s\\\\000\\\\351\\\\000\\\\351\\\\000 \\\\000-\\\\000 \" + \"\\\\000d\\\\000\\\\351\\\\000c\\\\000e\\\\000m\\\\000b\\\\000r\\\\000e\\\\000 \\\\0002\\\\0000\" + \"\\\\0000\\\\0008\\\\000.\\\\000p\\\\000u\\\\000b</rdf:li></rdf:Alt></dc:title>\" + \"<dc:creator><rdf:Seq><rdf:li>\\\\376\\\\377\\\\000O\\\\000D\\\\000I\\\\000S\" + \"</rdf:li></rdf:Seq></dc:creator></rdf:Description></rdf:RDF>\" + \"</x:xmpmeta>\";\n    const metadata = createMetadata(data);\n    expect(metadata.has(\"dc:title\")).toBeTruthy();\n    expect(metadata.has(\"dc:qux\")).toBeFalsy();\n    expect(metadata.get(\"dc:title\")).toEqual(\"L'Odissee thématique logo Odisséé - décembre 2008.pub\");\n    expect(metadata.get(\"dc:qux\")).toEqual(null);\n    expect(metadata.getAll()).toEqual({\n      \"dc:creator\": [\"ODIS\"],\n      \"dc:title\": \"L'Odissee thématique logo Odisséé - décembre 2008.pub\",\n      \"xap:creatortool\": \"PDFCreator Version 0.9.6\"\n    });\n  });","file":"unit/metadata_spec.js","skipped":false,"dir":"test"},{"name":"should gracefully handle incomplete tags (issue 8884)","suites":["metadata"],"line":59,"updatePoint":{"line":59,"column":59,"index":4754},"code":"  it(\"should gracefully handle incomplete tags (issue 8884)\", function () {\n    const data = '<?xpacket begin=\"Ã¯Â»Â¿\" id=\"W5M0MpCehiHzreSzNTczkc9d' + '<x:xmpmeta xmlns:x=\"adobe:ns:meta/\">' + '<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\">' + '<rdf:Description rdf:about=\"\"' + 'xmlns:pdfx=\"http://ns.adobe.com/pdfx/1.3/\">' + \"</rdf:Description>\" + '<rdf:Description rdf:about=\"\"' + 'xmlns:xap=\"http://ns.adobe.com/xap/1.0/\">' + \"<xap:ModifyDate>2010-03-25T11:20:09-04:00</xap:ModifyDate>\" + \"<xap:CreateDate>2010-03-25T11:20:09-04:00</xap:CreateDate>\" + \"<xap:MetadataDate>2010-03-25T11:20:09-04:00</xap:MetadataDate>\" + \"</rdf:Description>\" + '<rdf:Description rdf:about=\"\"' + 'xmlns:dc=\"http://purl.org/dc/elements/1.1/\">' + \"<dc:format>application/pdf</dc:format>\" + \"</rdf:Description>\" + '<rdf:Description rdf:about=\"\"' + 'xmlns:pdfaid=\"http://www.aiim.org/pdfa/ns/id/\">' + \"<pdfaid:part>1</pdfaid:part>\" + \"<pdfaid:conformance>A</pdfaid:conformance>\" + \"</rdf:Description>\" + \"</rdf:RDF>\" + \"</x:xmpmeta>\" + '<?xpacket end=\"w\"?>';\n    const metadata = createMetadata(data);\n    expect(metadata.getAll()).toEqual(emptyObj);\n  });","file":"unit/metadata_spec.js","skipped":false,"dir":"test"},{"name":"should gracefully handle \"junk\" before the actual metadata (issue 10395)","suites":["metadata"],"line":64,"updatePoint":{"line":64,"column":78,"index":5927},"code":"  it('should gracefully handle \"junk\" before the actual metadata (issue 10395)', function () {\n    const data = 'ï»¿<?xpacket begin=\"ï»¿\" id=\"W5M0MpCehiHzreSzNTczkc9d\"?>' + '<x:xmpmeta x:xmptk=\"TallComponents PDFObjects 1.0\" ' + 'xmlns:x=\"adobe:ns:meta/\">' + '<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\">' + '<rdf:Description rdf:about=\"\" ' + 'xmlns:pdf=\"http://ns.adobe.com/pdf/1.3/\">' + \"<pdf:Producer>PDFKit.NET 4.0.102.0</pdf:Producer>\" + \"<pdf:Keywords></pdf:Keywords>\" + \"<pdf:PDFVersion>1.7</pdf:PDFVersion></rdf:Description>\" + '<rdf:Description rdf:about=\"\" ' + 'xmlns:xap=\"http://ns.adobe.com/xap/1.0/\">' + \"<xap:CreateDate>2018-12-27T13:50:36-08:00</xap:CreateDate>\" + \"<xap:ModifyDate>2018-12-27T13:50:38-08:00</xap:ModifyDate>\" + \"<xap:CreatorTool></xap:CreatorTool>\" + \"<xap:MetadataDate>2018-12-27T13:50:38-08:00</xap:MetadataDate>\" + '</rdf:Description><rdf:Description rdf:about=\"\" ' + 'xmlns:dc=\"http://purl.org/dc/elements/1.1/\">' + \"<dc:creator><rdf:Seq><rdf:li></rdf:li></rdf:Seq></dc:creator>\" + \"<dc:subject><rdf:Bag /></dc:subject>\" + '<dc:description><rdf:Alt><rdf:li xml:lang=\"x-default\">' + \"</rdf:li></rdf:Alt></dc:description>\" + '<dc:title><rdf:Alt><rdf:li xml:lang=\"x-default\"></rdf:li>' + \"</rdf:Alt></dc:title><dc:format>application/pdf</dc:format>\" + '</rdf:Description></rdf:RDF></x:xmpmeta><?xpacket end=\"w\"?>';\n    const metadata = createMetadata(data);\n    expect(metadata.has(\"dc:title\")).toBeTruthy();\n    expect(metadata.has(\"dc:qux\")).toBeFalsy();\n    expect(metadata.get(\"dc:title\")).toEqual(\"\");\n    expect(metadata.get(\"dc:qux\")).toEqual(null);\n    expect(metadata.getAll()).toEqual({\n      \"dc:creator\": [\"\"],\n      \"dc:description\": \"\",\n      \"dc:format\": \"application/pdf\",\n      \"dc:subject\": [],\n      \"dc:title\": \"\",\n      \"pdf:keywords\": \"\",\n      \"pdf:pdfversion\": \"1.7\",\n      \"pdf:producer\": \"PDFKit.NET 4.0.102.0\",\n      \"xap:createdate\": \"2018-12-27T13:50:36-08:00\",\n      \"xap:creatortool\": \"\",\n      \"xap:metadatadate\": \"2018-12-27T13:50:38-08:00\",\n      \"xap:modifydate\": \"2018-12-27T13:50:38-08:00\"\n    });\n  });","file":"unit/metadata_spec.js","skipped":false,"dir":"test"},{"name":"should correctly handle metadata containing \"&apos\" (issue 10407)","suites":["metadata"],"line":86,"updatePoint":{"line":86,"column":71,"index":8015},"code":"  it('should correctly handle metadata containing \"&apos\" (issue 10407)', function () {\n    const data = \"<x:xmpmeta xmlns:x='adobe:ns:meta/'>\" + \"<rdf:RDF xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#'>\" + \"<rdf:Description xmlns:dc='http://purl.org/dc/elements/1.1/'>\" + \"<dc:title><rdf:Alt>\" + '<rdf:li xml:lang=\"x-default\">&apos;Foo bar baz&apos;</rdf:li>' + \"</rdf:Alt></dc:title></rdf:Description></rdf:RDF></x:xmpmeta>\";\n    const metadata = createMetadata(data);\n    expect(metadata.has(\"dc:title\")).toBeTruthy();\n    expect(metadata.has(\"dc:qux\")).toBeFalsy();\n    expect(metadata.get(\"dc:title\")).toEqual(\"'Foo bar baz'\");\n    expect(metadata.get(\"dc:qux\")).toEqual(null);\n    expect(metadata.getAll()).toEqual({\n      \"dc:title\": \"'Foo bar baz'\"\n    });\n  });","file":"unit/metadata_spec.js","skipped":false,"dir":"test"},{"name":"should gracefully handle unbalanced end tags (issue 10410)","suites":["metadata"],"line":97,"updatePoint":{"line":97,"column":64,"index":8788},"code":"  it(\"should gracefully handle unbalanced end tags (issue 10410)\", function () {\n    const data = '<?xpacket begin=\"Ã¯Â»Â¿\" id=\"W5M0MpCehiHzreSzNTczkc9d\"?>' + '<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\">' + '<rdf:Description rdf:about=\"\" ' + 'xmlns:pdf=\"http://ns.adobe.com/pdf/1.3/\">' + \"<pdf:Producer>Soda PDF 5</pdf:Producer></rdf:Description>\" + '<rdf:Description rdf:about=\"\" ' + 'xmlns:xap=\"http://ns.adobe.com/xap/1.0/\">' + \"<xap:CreateDate>2018-10-02T08:14:49-05:00</xap:CreateDate>\" + \"<xap:CreatorTool>Soda PDF 5</xap:CreatorTool>\" + \"<xap:MetadataDate>2018-10-02T08:14:49-05:00</xap:MetadataDate> \" + \"<xap:ModifyDate>2018-10-02T08:14:49-05:00</xap:ModifyDate>\" + '</rdf:Description><rdf:Description rdf:about=\"\" ' + 'xmlns:xmpMM=\"http://ns.adobe.com/xap/1.0/mm/\">' + \"<xmpMM:DocumentID>uuid:00000000-1c84-3cf9-89ba-bef0e729c831\" + \"</xmpMM:DocumentID></rdf:Description>\" + '</rdf:RDF></x:xmpmeta><?xpacket end=\"w\"?>';\n    const metadata = createMetadata(data);\n    expect(metadata.getAll()).toEqual(emptyObj);\n  });","file":"unit/metadata_spec.js","skipped":false,"dir":"test"},{"name":"should not be vulnerable to the billion laughs attack","suites":["metadata"],"line":102,"updatePoint":{"line":102,"column":59,"index":9833},"code":"  it(\"should not be vulnerable to the billion laughs attack\", function () {\n    const data = '<?xml version=\"1.0\"?>' + \"<!DOCTYPE lolz [\" + '  <!ENTITY lol \"lol\">' + '  <!ENTITY lol1 \"&lol;&lol;&lol;&lol;&lol;&lol;&lol;&lol;&lol;&lol;\">' + '  <!ENTITY lol2 \"&lol1;&lol1;&lol1;&lol1;&lol1;&lol1;&lol1;&lol1;\">' + '  <!ENTITY lol3 \"&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;\">' + '  <!ENTITY lol4 \"&lol3;&lol3;&lol3;&lol3;&lol3;&lol3;&lol3;&lol3;\">' + '  <!ENTITY lol5 \"&lol4;&lol4;&lol4;&lol4;&lol4;&lol4;&lol4;&lol4;\">' + '  <!ENTITY lol6 \"&lol5;&lol5;&lol5;&lol5;&lol5;&lol5;&lol5;&lol5;\">' + '  <!ENTITY lol7 \"&lol6;&lol6;&lol6;&lol6;&lol6;&lol6;&lol6;&lol6;\">' + '  <!ENTITY lol8 \"&lol7;&lol7;&lol7;&lol7;&lol7;&lol7;&lol7;&lol7;\">' + '  <!ENTITY lol9 \"&lol8;&lol8;&lol8;&lol8;&lol8;&lol8;&lol8;&lol8;\">' + \"]>\" + '<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\">' + '  <rdf:Description xmlns:dc=\"http://purl.org/dc/elements/1.1/\">' + \"    <dc:title>\" + \"      <rdf:Alt>\" + '        <rdf:li xml:lang=\"x-default\">a&lol9;b</rdf:li>' + \"      </rdf:Alt>\" + \"    </dc:title>\" + \"  </rdf:Description>\" + \"</rdf:RDF>\";\n    const metadata = createMetadata(data);\n    expect(metadata.has(\"dc:title\")).toBeTruthy();\n    expect(metadata.has(\"dc:qux\")).toBeFalsy();\n    expect(metadata.get(\"dc:title\")).toEqual(\"a&lol9;b\");\n    expect(metadata.get(\"dc:qux\")).toEqual(null);\n    expect(metadata.getAll()).toEqual({\n      \"dc:title\": \"a&lol9;b\"\n    });\n  });","file":"unit/metadata_spec.js","skipped":false,"dir":"test"},{"name":"instantiates without seed","suites":["MurmurHash3_64"],"line":18,"updatePoint":{"line":18,"column":31,"index":739},"code":"  it(\"instantiates without seed\", function () {\n    const hash = new MurmurHash3_64();\n    expect(hash).toEqual(jasmine.any(MurmurHash3_64));\n  });","file":"unit/murmurhash3_spec.js","skipped":false,"dir":"test"},{"name":"instantiates with seed","suites":["MurmurHash3_64"],"line":22,"updatePoint":{"line":22,"column":28,"index":884},"code":"  it(\"instantiates with seed\", function () {\n    const hash = new MurmurHash3_64(1);\n    expect(hash).toEqual(jasmine.any(MurmurHash3_64));\n  });","file":"unit/murmurhash3_spec.js","skipped":false,"dir":"test"},{"name":"correctly generates a hash from a string","suites":["MurmurHash3_64"],"line":29,"updatePoint":{"line":29,"column":46,"index":1192},"code":"  it(\"correctly generates a hash from a string\", function () {\n    const hash = new MurmurHash3_64();\n    hash.update(sourceText);\n    expect(hash.hexdigest()).toEqual(hexDigestExpected);\n  });","file":"unit/murmurhash3_spec.js","skipped":false,"dir":"test"},{"name":"correctly generates a hash from a Uint8Array","suites":["MurmurHash3_64"],"line":34,"updatePoint":{"line":34,"column":50,"index":1390},"code":"  it(\"correctly generates a hash from a Uint8Array\", function () {\n    const hash = new MurmurHash3_64();\n    hash.update(new Uint8Array(sourceCharCodes));\n    expect(hash.hexdigest()).toEqual(hexDigestExpected);\n  });","file":"unit/murmurhash3_spec.js","skipped":false,"dir":"test"},{"name":"correctly generates a hash from a Uint32Array","suites":["MurmurHash3_64"],"line":39,"updatePoint":{"line":39,"column":51,"index":1610},"code":"  it(\"correctly generates a hash from a Uint32Array\", function () {\n    const hash = new MurmurHash3_64();\n    hash.update(new Uint32Array(new Uint8Array(sourceCharCodes).buffer));\n    expect(hash.hexdigest()).toEqual(hexDigestExpected);\n  });","file":"unit/murmurhash3_spec.js","skipped":false,"dir":"test"},{"name":"changes the hash after update without seed","suites":["MurmurHash3_64"],"line":44,"updatePoint":{"line":44,"column":48,"index":1851},"code":"  it(\"changes the hash after update without seed\", function () {\n    const hash = new MurmurHash3_64();\n    hash.update(sourceText);\n    const hexdigest1 = hash.hexdigest();\n    hash.update(sourceText);\n    const hexdigest2 = hash.hexdigest();\n    expect(hexdigest1).not.toEqual(hexdigest2);\n  });","file":"unit/murmurhash3_spec.js","skipped":false,"dir":"test"},{"name":"changes the hash after update with seed","suites":["MurmurHash3_64"],"line":52,"updatePoint":{"line":52,"column":45,"index":2146},"code":"  it(\"changes the hash after update with seed\", function () {\n    const hash = new MurmurHash3_64(1);\n    hash.update(sourceText);\n    const hexdigest1 = hash.hexdigest();\n    hash.update(sourceText);\n    const hexdigest2 = hash.hexdigest();\n    expect(hexdigest1).not.toEqual(hexdigest2);\n  });","file":"unit/murmurhash3_spec.js","skipped":false,"dir":"test"},{"name":"read without stream and range","suites":["network"],"line":21,"updatePoint":{"line":21,"column":35,"index":897},"code":"  it(\"read without stream and range\", async function () {\n    const stream = new PDFNetworkStream({\n      url: pdf1,\n      rangeChunkSize: 65536,\n      disableStream: true,\n      disableRange: true\n    });\n    const fullReader = stream.getFullReader();\n    let isStreamingSupported, isRangeSupported;\n    const promise = fullReader.headersReady.then(function () {\n      isStreamingSupported = fullReader.isStreamingSupported;\n      isRangeSupported = fullReader.isRangeSupported;\n    });\n    let len = 0,\n      count = 0;\n    const read = function () {\n      return fullReader.read().then(function (result) {\n        if (result.done) {\n          return undefined;\n        }\n        count++;\n        len += result.value.byteLength;\n        return read();\n      });\n    };\n    await Promise.all([read(), promise]);\n    expect(len).toEqual(pdf1Length);\n    expect(count).toEqual(1);\n    expect(isStreamingSupported).toEqual(false);\n    expect(isRangeSupported).toEqual(false);\n  });","file":"unit/network_spec.js","skipped":false,"dir":"test"},{"name":"read custom ranges","suites":["network"],"line":52,"updatePoint":{"line":52,"column":24,"index":1866},"code":"  it(\"read custom ranges\", async function () {\n    // We don't test on browsers that don't support range request, so\n    // requiring this test to pass.\n    const rangeSize = 32768;\n    const stream = new PDFNetworkStream({\n      url: pdf1,\n      length: pdf1Length,\n      rangeChunkSize: rangeSize,\n      disableStream: true,\n      disableRange: false\n    });\n    const fullReader = stream.getFullReader();\n    let isStreamingSupported, isRangeSupported, fullReaderCancelled;\n    const promise = fullReader.headersReady.then(function () {\n      isStreamingSupported = fullReader.isStreamingSupported;\n      isRangeSupported = fullReader.isRangeSupported;\n      // we shall be able to close the full reader without issues\n      fullReader.cancel(new AbortException(\"Don't need fullReader.\"));\n      fullReaderCancelled = true;\n    });\n\n    // Skipping fullReader results, requesting something from the PDF end.\n    const tailSize = pdf1Length % rangeSize || rangeSize;\n    const range1Reader = stream.getRangeReader(pdf1Length - tailSize - rangeSize, pdf1Length - tailSize);\n    const range2Reader = stream.getRangeReader(pdf1Length - tailSize, pdf1Length);\n    const result1 = {\n        value: 0\n      },\n      result2 = {\n        value: 0\n      };\n    const read = function (reader, lenResult) {\n      return reader.read().then(function (result) {\n        if (result.done) {\n          return undefined;\n        }\n        lenResult.value += result.value.byteLength;\n        return read(reader, lenResult);\n      });\n    };\n    await Promise.all([read(range1Reader, result1), read(range2Reader, result2), promise]);\n    expect(result1.value).toEqual(rangeSize);\n    expect(result2.value).toEqual(tailSize);\n    expect(isStreamingSupported).toEqual(false);\n    expect(isRangeSupported).toEqual(true);\n    expect(fullReaderCancelled).toEqual(true);\n  });","file":"unit/network_spec.js","skipped":false,"dir":"test"},{"name":"rejects invalid rangeChunkSize","suites":["network_utils","validateRangeRequestCapabilities"],"line":20,"updatePoint":{"line":20,"column":38,"index":998},"code":"    it(\"rejects invalid rangeChunkSize\", function () {\n      expect(function () {\n        validateRangeRequestCapabilities({\n          rangeChunkSize: \"abc\"\n        });\n      }).toThrow(new Error(\"rangeChunkSize must be an integer larger than zero.\"));\n      expect(function () {\n        validateRangeRequestCapabilities({\n          rangeChunkSize: 0\n        });\n      }).toThrow(new Error(\"rangeChunkSize must be an integer larger than zero.\"));\n    });","file":"unit/network_utils_spec.js","skipped":false,"dir":"test"},{"name":"rejects disabled or non-HTTP range requests","suites":["network_utils","validateRangeRequestCapabilities"],"line":32,"updatePoint":{"line":32,"column":51,"index":1466},"code":"    it(\"rejects disabled or non-HTTP range requests\", function () {\n      expect(validateRangeRequestCapabilities({\n        disableRange: true,\n        isHttp: true,\n        getResponseHeader: headerName => {\n          if (headerName === \"Content-Length\") {\n            return 8;\n          }\n          throw new Error(`Unexpected headerName: ${headerName}`);\n        },\n        rangeChunkSize: 64\n      })).toEqual({\n        allowRangeRequests: false,\n        suggestedLength: 8\n      });\n      expect(validateRangeRequestCapabilities({\n        disableRange: false,\n        isHttp: false,\n        getResponseHeader: headerName => {\n          if (headerName === \"Content-Length\") {\n            return 8;\n          }\n          throw new Error(`Unexpected headerName: ${headerName}`);\n        },\n        rangeChunkSize: 64\n      })).toEqual({\n        allowRangeRequests: false,\n        suggestedLength: 8\n      });\n    });","file":"unit/network_utils_spec.js","skipped":false,"dir":"test"},{"name":"rejects invalid Accept-Ranges header values","suites":["network_utils","validateRangeRequestCapabilities"],"line":62,"updatePoint":{"line":62,"column":51,"index":2386},"code":"    it(\"rejects invalid Accept-Ranges header values\", function () {\n      expect(validateRangeRequestCapabilities({\n        disableRange: false,\n        isHttp: true,\n        getResponseHeader: headerName => {\n          if (headerName === \"Accept-Ranges\") {\n            return \"none\";\n          } else if (headerName === \"Content-Length\") {\n            return 8;\n          }\n          throw new Error(`Unexpected headerName: ${headerName}`);\n        },\n        rangeChunkSize: 64\n      })).toEqual({\n        allowRangeRequests: false,\n        suggestedLength: 8\n      });\n    });","file":"unit/network_utils_spec.js","skipped":false,"dir":"test"},{"name":"rejects invalid Content-Encoding header values","suites":["network_utils","validateRangeRequestCapabilities"],"line":80,"updatePoint":{"line":80,"column":54,"index":2969},"code":"    it(\"rejects invalid Content-Encoding header values\", function () {\n      expect(validateRangeRequestCapabilities({\n        disableRange: false,\n        isHttp: true,\n        getResponseHeader: headerName => {\n          if (headerName === \"Accept-Ranges\") {\n            return \"bytes\";\n          } else if (headerName === \"Content-Encoding\") {\n            return \"gzip\";\n          } else if (headerName === \"Content-Length\") {\n            return 8;\n          }\n          throw new Error(`Unexpected headerName: ${headerName}`);\n        },\n        rangeChunkSize: 64\n      })).toEqual({\n        allowRangeRequests: false,\n        suggestedLength: 8\n      });\n    });","file":"unit/network_utils_spec.js","skipped":false,"dir":"test"},{"name":"rejects invalid Content-Length header values","suites":["network_utils","validateRangeRequestCapabilities"],"line":100,"updatePoint":{"line":100,"column":52,"index":3636},"code":"    it(\"rejects invalid Content-Length header values\", function () {\n      expect(validateRangeRequestCapabilities({\n        disableRange: false,\n        isHttp: true,\n        getResponseHeader: headerName => {\n          if (headerName === \"Accept-Ranges\") {\n            return \"bytes\";\n          } else if (headerName === \"Content-Encoding\") {\n            return null;\n          } else if (headerName === \"Content-Length\") {\n            return \"eight\";\n          }\n          throw new Error(`Unexpected headerName: ${headerName}`);\n        },\n        rangeChunkSize: 64\n      })).toEqual({\n        allowRangeRequests: false,\n        suggestedLength: undefined\n      });\n    });","file":"unit/network_utils_spec.js","skipped":false,"dir":"test"},{"name":"rejects file sizes that are too small for range requests","suites":["network_utils","validateRangeRequestCapabilities"],"line":120,"updatePoint":{"line":120,"column":64,"index":4327},"code":"    it(\"rejects file sizes that are too small for range requests\", function () {\n      expect(validateRangeRequestCapabilities({\n        disableRange: false,\n        isHttp: true,\n        getResponseHeader: headerName => {\n          if (headerName === \"Accept-Ranges\") {\n            return \"bytes\";\n          } else if (headerName === \"Content-Encoding\") {\n            return null;\n          } else if (headerName === \"Content-Length\") {\n            return 8;\n          }\n          throw new Error(`Unexpected headerName: ${headerName}`);\n        },\n        rangeChunkSize: 64\n      })).toEqual({\n        allowRangeRequests: false,\n        suggestedLength: 8\n      });\n    });","file":"unit/network_utils_spec.js","skipped":false,"dir":"test"},{"name":"accepts file sizes large enough for range requests","suites":["network_utils","validateRangeRequestCapabilities"],"line":140,"updatePoint":{"line":140,"column":58,"index":4998},"code":"    it(\"accepts file sizes large enough for range requests\", function () {\n      expect(validateRangeRequestCapabilities({\n        disableRange: false,\n        isHttp: true,\n        getResponseHeader: headerName => {\n          if (headerName === \"Accept-Ranges\") {\n            return \"bytes\";\n          } else if (headerName === \"Content-Encoding\") {\n            return null;\n          } else if (headerName === \"Content-Length\") {\n            return 8192;\n          }\n          throw new Error(`Unexpected headerName: ${headerName}`);\n        },\n        rangeChunkSize: 64\n      })).toEqual({\n        allowRangeRequests: true,\n        suggestedLength: 8192\n      });\n    });","file":"unit/network_utils_spec.js","skipped":false,"dir":"test"},{"name":"returns null when content disposition header is blank","suites":["network_utils","extractFilenameFromHeader"],"line":162,"updatePoint":{"line":162,"column":61,"index":5737},"code":"    it(\"returns null when content disposition header is blank\", function () {\n      expect(extractFilenameFromHeader(headerName => {\n        if (headerName === \"Content-Disposition\") {\n          return null;\n        }\n        throw new Error(`Unexpected headerName: ${headerName}`);\n      })).toBeNull();\n      expect(extractFilenameFromHeader(headerName => {\n        if (headerName === \"Content-Disposition\") {\n          return undefined;\n        }\n        throw new Error(`Unexpected headerName: ${headerName}`);\n      })).toBeNull();\n      expect(extractFilenameFromHeader(headerName => {\n        if (headerName === \"Content-Disposition\") {\n          return \"\";\n        }\n        throw new Error(`Unexpected headerName: ${headerName}`);\n      })).toBeNull();\n    });","file":"unit/network_utils_spec.js","skipped":false,"dir":"test"},{"name":"gets the filename from the response header","suites":["network_utils","extractFilenameFromHeader"],"line":182,"updatePoint":{"line":182,"column":50,"index":6496},"code":"    it(\"gets the filename from the response header\", function () {\n      expect(extractFilenameFromHeader(headerName => {\n        if (headerName === \"Content-Disposition\") {\n          return \"inline\";\n        }\n        throw new Error(`Unexpected headerName: ${headerName}`);\n      })).toBeNull();\n      expect(extractFilenameFromHeader(headerName => {\n        if (headerName === \"Content-Disposition\") {\n          return \"attachment\";\n        }\n        throw new Error(`Unexpected headerName: ${headerName}`);\n      })).toBeNull();\n      expect(extractFilenameFromHeader(headerName => {\n        if (headerName === \"Content-Disposition\") {\n          return 'attachment; filename=\"filename.pdf\"';\n        }\n        throw new Error(`Unexpected headerName: ${headerName}`);\n      })).toEqual(\"filename.pdf\");\n      expect(extractFilenameFromHeader(headerName => {\n        if (headerName === \"Content-Disposition\") {\n          return 'attachment; filename=\"filename.pdf and spaces.pdf\"';\n        }\n        throw new Error(`Unexpected headerName: ${headerName}`);\n      })).toEqual(\"filename.pdf and spaces.pdf\");\n      expect(extractFilenameFromHeader(headerName => {\n        if (headerName === \"Content-Disposition\") {\n          return 'attachment; filename=\"tl;dr.pdf\"';\n        }\n        throw new Error(`Unexpected headerName: ${headerName}`);\n      })).toEqual(\"tl;dr.pdf\");\n      expect(extractFilenameFromHeader(headerName => {\n        if (headerName === \"Content-Disposition\") {\n          return \"attachment; filename=filename.pdf\";\n        }\n        throw new Error(`Unexpected headerName: ${headerName}`);\n      })).toEqual(\"filename.pdf\");\n      expect(extractFilenameFromHeader(headerName => {\n        if (headerName === \"Content-Disposition\") {\n          return \"attachment; filename=filename.pdf someotherparam\";\n        }\n        throw new Error(`Unexpected headerName: ${headerName}`);\n      })).toEqual(\"filename.pdf\");\n      expect(extractFilenameFromHeader(headerName => {\n        if (headerName === \"Content-Disposition\") {\n          return 'attachment; filename=\"%e4%b8%ad%e6%96%87.pdf\"';\n        }\n        throw new Error(`Unexpected headerName: ${headerName}`);\n      })).toEqual(\"中文.pdf\");\n      expect(extractFilenameFromHeader(headerName => {\n        if (headerName === \"Content-Disposition\") {\n          return 'attachment; filename=\"100%.pdf\"';\n        }\n        throw new Error(`Unexpected headerName: ${headerName}`);\n      })).toEqual(\"100%.pdf\");\n    });","file":"unit/network_utils_spec.js","skipped":false,"dir":"test"},{"name":"gets the filename from the response header (RFC 6266)","suites":["network_utils","extractFilenameFromHeader"],"line":238,"updatePoint":{"line":238,"column":61,"index":8990},"code":"    it(\"gets the filename from the response header (RFC 6266)\", function () {\n      expect(extractFilenameFromHeader(headerName => {\n        if (headerName === \"Content-Disposition\") {\n          return \"attachment; filename*=filename.pdf\";\n        }\n        throw new Error(`Unexpected headerName: ${headerName}`);\n      })).toEqual(\"filename.pdf\");\n      expect(extractFilenameFromHeader(headerName => {\n        if (headerName === \"Content-Disposition\") {\n          return \"attachment; filename*=''filename.pdf\";\n        }\n        throw new Error(`Unexpected headerName: ${headerName}`);\n      })).toEqual(\"filename.pdf\");\n      expect(extractFilenameFromHeader(headerName => {\n        if (headerName === \"Content-Disposition\") {\n          return \"attachment; filename*=utf-8''filename.pdf\";\n        }\n        throw new Error(`Unexpected headerName: ${headerName}`);\n      })).toEqual(\"filename.pdf\");\n      expect(extractFilenameFromHeader(headerName => {\n        if (headerName === \"Content-Disposition\") {\n          return \"attachment; filename=no.pdf; filename*=utf-8''filename.pdf\";\n        }\n        throw new Error(`Unexpected headerName: ${headerName}`);\n      })).toEqual(\"filename.pdf\");\n      expect(extractFilenameFromHeader(headerName => {\n        if (headerName === \"Content-Disposition\") {\n          return \"attachment; filename*=utf-8''filename.pdf; filename=no.pdf\";\n        }\n        throw new Error(`Unexpected headerName: ${headerName}`);\n      })).toEqual(\"filename.pdf\");\n    });","file":"unit/network_utils_spec.js","skipped":false,"dir":"test"},{"name":"gets the filename from the response header (RFC 2231)","suites":["network_utils","extractFilenameFromHeader"],"line":270,"updatePoint":{"line":270,"column":61,"index":10493},"code":"    it(\"gets the filename from the response header (RFC 2231)\", function () {\n      // Tests continuations (RFC 2231 section 3, via RFC 5987 section 3.1).\n      expect(extractFilenameFromHeader(headerName => {\n        if (headerName === \"Content-Disposition\") {\n          return \"attachment; filename*0=filename; filename*1=.pdf\";\n        }\n        throw new Error(`Unexpected headerName: ${headerName}`);\n      })).toEqual(\"filename.pdf\");\n    });","file":"unit/network_utils_spec.js","skipped":false,"dir":"test"},{"name":"only extracts filename with pdf extension","suites":["network_utils","extractFilenameFromHeader"],"line":279,"updatePoint":{"line":279,"column":49,"index":10930},"code":"    it(\"only extracts filename with pdf extension\", function () {\n      expect(extractFilenameFromHeader(headerName => {\n        if (headerName === \"Content-Disposition\") {\n          return 'attachment; filename=\"filename.png\"';\n        }\n        throw new Error(`Unexpected headerName: ${headerName}`);\n      })).toBeNull();\n    });","file":"unit/network_utils_spec.js","skipped":false,"dir":"test"},{"name":"extension validation is case insensitive","suites":["network_utils","extractFilenameFromHeader"],"line":287,"updatePoint":{"line":287,"column":48,"index":11263},"code":"    it(\"extension validation is case insensitive\", function () {\n      expect(extractFilenameFromHeader(headerName => {\n        if (headerName === \"Content-Disposition\") {\n          return 'form-data; name=\"fieldName\"; filename=\"file.PdF\"';\n        }\n        throw new Error(`Unexpected headerName: ${headerName}`);\n      })).toEqual(\"file.PdF\");\n    });","file":"unit/network_utils_spec.js","skipped":false,"dir":"test"},{"name":"handles missing PDF file responses","suites":["network_utils","createResponseStatusError"],"line":297,"updatePoint":{"line":297,"column":42,"index":11672},"code":"    it(\"handles missing PDF file responses\", function () {\n      expect(createResponseStatusError(404, \"https://foo.com/bar.pdf\")).toEqual(new MissingPDFException('Missing PDF \"https://foo.com/bar.pdf\".'));\n      expect(createResponseStatusError(0, \"file://foo.pdf\")).toEqual(new MissingPDFException('Missing PDF \"file://foo.pdf\".'));\n    });","file":"unit/network_utils_spec.js","skipped":false,"dir":"test"},{"name":"handles unexpected responses","suites":["network_utils","createResponseStatusError"],"line":301,"updatePoint":{"line":301,"column":36,"index":12009},"code":"    it(\"handles unexpected responses\", function () {\n      expect(createResponseStatusError(302, \"https://foo.com/bar.pdf\")).toEqual(new UnexpectedResponseException(\"Unexpected server response (302) while retrieving PDF \" + '\"https://foo.com/bar.pdf\".'));\n      expect(createResponseStatusError(0, \"https://foo.com/bar.pdf\")).toEqual(new UnexpectedResponseException(\"Unexpected server response (0) while retrieving PDF \" + '\"https://foo.com/bar.pdf\".'));\n    });","file":"unit/network_utils_spec.js","skipped":false,"dir":"test"},{"name":"accepts valid response statuses","suites":["network_utils","validateResponseStatus"],"line":307,"updatePoint":{"line":307,"column":39,"index":12532},"code":"    it(\"accepts valid response statuses\", function () {\n      expect(validateResponseStatus(200)).toEqual(true);\n      expect(validateResponseStatus(206)).toEqual(true);\n    });","file":"unit/network_utils_spec.js","skipped":false,"dir":"test"},{"name":"rejects invalid response statuses","suites":["network_utils","validateResponseStatus"],"line":311,"updatePoint":{"line":311,"column":41,"index":12712},"code":"    it(\"rejects invalid response statuses\", function () {\n      expect(validateResponseStatus(302)).toEqual(false);\n      expect(validateResponseStatus(404)).toEqual(false);\n      expect(validateResponseStatus(null)).toEqual(false);\n      expect(validateResponseStatus(undefined)).toEqual(false);\n    });","file":"unit/network_utils_spec.js","skipped":false,"dir":"test"},{"name":"read both http(s) and filesystem pdf files","suites":["node_stream"],"line":74,"updatePoint":{"line":74,"column":48,"index":2804},"code":"  it(\"read both http(s) and filesystem pdf files\", async function () {\n    const stream1 = new PDFNodeStream({\n      url: `http://127.0.0.1:${port}/tracemonkey.pdf`,\n      rangeChunkSize: 65536,\n      disableStream: true,\n      disableRange: true\n    });\n    const stream2 = new PDFNodeStream({\n      url: pdf,\n      rangeChunkSize: 65536,\n      disableStream: true,\n      disableRange: true\n    });\n    const fullReader1 = stream1.getFullReader();\n    const fullReader2 = stream2.getFullReader();\n    let isStreamingSupported1, isRangeSupported1;\n    const promise1 = fullReader1.headersReady.then(() => {\n      isStreamingSupported1 = fullReader1.isStreamingSupported;\n      isRangeSupported1 = fullReader1.isRangeSupported;\n    });\n    let isStreamingSupported2, isRangeSupported2;\n    const promise2 = fullReader2.headersReady.then(() => {\n      isStreamingSupported2 = fullReader2.isStreamingSupported;\n      isRangeSupported2 = fullReader2.isRangeSupported;\n    });\n    let len1 = 0,\n      len2 = 0;\n    const read1 = function () {\n      return fullReader1.read().then(function (result) {\n        if (result.done) {\n          return undefined;\n        }\n        len1 += result.value.byteLength;\n        return read1();\n      });\n    };\n    const read2 = function () {\n      return fullReader2.read().then(function (result) {\n        if (result.done) {\n          return undefined;\n        }\n        len2 += result.value.byteLength;\n        return read2();\n      });\n    };\n    await Promise.all([read1(), read2(), promise1, promise2]);\n    expect(isStreamingSupported1).toEqual(false);\n    expect(isRangeSupported1).toEqual(false);\n    expect(isStreamingSupported2).toEqual(false);\n    expect(isRangeSupported2).toEqual(false);\n    expect(len1).toEqual(pdfLength);\n    expect(len1).toEqual(len2);\n  });","file":"unit/node_stream_spec.js","skipped":false,"dir":"test"},{"name":"read custom ranges for both http(s) and filesystem urls","suites":["node_stream"],"line":127,"updatePoint":{"line":127,"column":61,"index":4625},"code":"  it(\"read custom ranges for both http(s) and filesystem urls\", async function () {\n    const rangeSize = 32768;\n    const stream1 = new PDFNodeStream({\n      url: `http://127.0.0.1:${port}/tracemonkey.pdf`,\n      length: pdfLength,\n      rangeChunkSize: rangeSize,\n      disableStream: true,\n      disableRange: false\n    });\n    const stream2 = new PDFNodeStream({\n      url: pdf,\n      length: pdfLength,\n      rangeChunkSize: rangeSize,\n      disableStream: true,\n      disableRange: false\n    });\n    const fullReader1 = stream1.getFullReader();\n    const fullReader2 = stream2.getFullReader();\n    let isStreamingSupported1, isRangeSupported1, fullReaderCancelled1;\n    let isStreamingSupported2, isRangeSupported2, fullReaderCancelled2;\n    const promise1 = fullReader1.headersReady.then(function () {\n      isStreamingSupported1 = fullReader1.isStreamingSupported;\n      isRangeSupported1 = fullReader1.isRangeSupported;\n      // we shall be able to close the full reader without issues\n      fullReader1.cancel(new AbortException(\"Don't need fullReader1.\"));\n      fullReaderCancelled1 = true;\n    });\n    const promise2 = fullReader2.headersReady.then(function () {\n      isStreamingSupported2 = fullReader2.isStreamingSupported;\n      isRangeSupported2 = fullReader2.isRangeSupported;\n      fullReader2.cancel(new AbortException(\"Don't need fullReader2.\"));\n      fullReaderCancelled2 = true;\n    });\n\n    // Skipping fullReader results, requesting something from the PDF end.\n    const tailSize = pdfLength % rangeSize || rangeSize;\n    const range11Reader = stream1.getRangeReader(pdfLength - tailSize - rangeSize, pdfLength - tailSize);\n    const range12Reader = stream1.getRangeReader(pdfLength - tailSize, pdfLength);\n    const range21Reader = stream2.getRangeReader(pdfLength - tailSize - rangeSize, pdfLength - tailSize);\n    const range22Reader = stream2.getRangeReader(pdfLength - tailSize, pdfLength);\n    const result11 = {\n        value: 0\n      },\n      result12 = {\n        value: 0\n      };\n    const result21 = {\n        value: 0\n      },\n      result22 = {\n        value: 0\n      };\n    const read = function (reader, lenResult) {\n      return reader.read().then(function (result) {\n        if (result.done) {\n          return undefined;\n        }\n        lenResult.value += result.value.byteLength;\n        return read(reader, lenResult);\n      });\n    };\n    await Promise.all([read(range11Reader, result11), read(range12Reader, result12), read(range21Reader, result21), read(range22Reader, result22), promise1, promise2]);\n    expect(result11.value).toEqual(rangeSize);\n    expect(result12.value).toEqual(tailSize);\n    expect(result21.value).toEqual(rangeSize);\n    expect(result22.value).toEqual(tailSize);\n    expect(isStreamingSupported1).toEqual(false);\n    expect(isRangeSupported1).toEqual(true);\n    expect(fullReaderCancelled1).toEqual(true);\n    expect(isStreamingSupported2).toEqual(false);\n    expect(isRangeSupported2).toEqual(true);\n    expect(fullReaderCancelled2).toEqual(true);\n  });","file":"unit/node_stream_spec.js","skipped":false,"dir":"test"},{"name":"should skip over the EI marker if it is found","suites":["parser","Parser","inlineStreamSkipEI"],"line":23,"updatePoint":{"line":23,"column":55,"index":1022},"code":"      it(\"should skip over the EI marker if it is found\", function () {\n        const string = \"q 1 0 0 1 0 0 cm BI /W 10 /H 10 /BPC 1 \" + \"/F /A85 ID abc123~> EI Q\";\n        const input = new StringStream(string);\n        const parser = new Parser({\n          lexer: new Lexer(input),\n          xref: null,\n          allowStreams: true\n        });\n        parser.inlineStreamSkipEI(input);\n        expect(input.pos).toEqual(string.indexOf(\"Q\"));\n        expect(input.peekByte()).toEqual(0x51); // 'Q'\n      });","file":"unit/parser_spec.js","skipped":false,"dir":"test"},{"name":"should skip to the end of stream if the EI marker is not found","suites":["parser","Parser","inlineStreamSkipEI"],"line":36,"updatePoint":{"line":36,"column":72,"index":1552},"code":"      it(\"should skip to the end of stream if the EI marker is not found\", function () {\n        const string = \"q 1 0 0 1 0 0 cm BI /W 10 /H 10 /BPC 1 /F /A85 ID abc123~> Q\";\n        const input = new StringStream(string);\n        const parser = new Parser({\n          lexer: new Lexer(input),\n          xref: null,\n          allowStreams: true\n        });\n        parser.inlineStreamSkipEI(input);\n        expect(input.pos).toEqual(string.length);\n        expect(input.peekByte()).toEqual(-1);\n      });","file":"unit/parser_spec.js","skipped":false,"dir":"test"},{"name":"should return and set -1 when the end of the stream is reached","suites":["parser","Lexer","nextChar"],"line":52,"updatePoint":{"line":52,"column":72,"index":2145},"code":"      it(\"should return and set -1 when the end of the stream is reached\", function () {\n        const input = new StringStream(\"\");\n        const lexer = new Lexer(input);\n        expect(lexer.nextChar()).toEqual(-1);\n        expect(lexer.currentChar).toEqual(-1);\n      });","file":"unit/parser_spec.js","skipped":false,"dir":"test"},{"name":"should return and set the character after the current position","suites":["parser","Lexer","nextChar"],"line":58,"updatePoint":{"line":58,"column":72,"index":2421},"code":"      it(\"should return and set the character after the current position\", function () {\n        const input = new StringStream(\"123\");\n        const lexer = new Lexer(input);\n        expect(lexer.nextChar()).toEqual(0x32); // '2'\n        expect(lexer.currentChar).toEqual(0x32); // '2'\n      });","file":"unit/parser_spec.js","skipped":false,"dir":"test"},{"name":"should only return -1 when the end of the stream is reached","suites":["parser","Lexer","peekChar"],"line":67,"updatePoint":{"line":67,"column":69,"index":2763},"code":"      it(\"should only return -1 when the end of the stream is reached\", function () {\n        const input = new StringStream(\"\");\n        const lexer = new Lexer(input);\n        expect(lexer.peekChar()).toEqual(-1);\n        expect(lexer.currentChar).toEqual(-1);\n      });","file":"unit/parser_spec.js","skipped":false,"dir":"test"},{"name":"should only return the character after the current position","suites":["parser","Lexer","peekChar"],"line":73,"updatePoint":{"line":73,"column":69,"index":3036},"code":"      it(\"should only return the character after the current position\", function () {\n        const input = new StringStream(\"123\");\n        const lexer = new Lexer(input);\n        expect(lexer.peekChar()).toEqual(0x32); // '2'\n        expect(lexer.currentChar).toEqual(0x31); // '1'\n      });","file":"unit/parser_spec.js","skipped":false,"dir":"test"},{"name":"should stop parsing numbers at the end of stream","suites":["parser","Lexer","getNumber"],"line":82,"updatePoint":{"line":82,"column":58,"index":3368},"code":"      it(\"should stop parsing numbers at the end of stream\", function () {\n        const input = new StringStream(\"11.234\");\n        const lexer = new Lexer(input);\n        expect(lexer.getNumber()).toEqual(11.234);\n      });","file":"unit/parser_spec.js","skipped":false,"dir":"test"},{"name":"should parse PostScript numbers","suites":["parser","Lexer","getNumber"],"line":87,"updatePoint":{"line":87,"column":41,"index":3577},"code":"      it(\"should parse PostScript numbers\", function () {\n        const numbers = [\"-.002\", \"34.5\", \"-3.62\", \"123.6e10\", \"1E-5\", \"-1.\", \"0.0\", \"123\", \"-98\", \"43445\", \"0\", \"+17\"];\n        for (const number of numbers) {\n          const input = new StringStream(number);\n          const lexer = new Lexer(input);\n          const result = lexer.getNumber(),\n            expected = parseFloat(number);\n          if (result !== expected && Math.abs(result - expected) < 1e-15) {\n            console.error(`Fuzzy matching \"${result}\" with \"${expected}\" to ` + \"work-around rounding bugs in Chromium browsers.\");\n            expect(true).toEqual(true);\n            continue;\n          }\n          expect(result).toEqual(expected);\n        }\n      });","file":"unit/parser_spec.js","skipped":false,"dir":"test"},{"name":"should ignore double negative before number","suites":["parser","Lexer","getNumber"],"line":102,"updatePoint":{"line":102,"column":53,"index":4333},"code":"      it(\"should ignore double negative before number\", function () {\n        const input = new StringStream(\"--205.88\");\n        const lexer = new Lexer(input);\n        expect(lexer.getNumber()).toEqual(-205.88);\n      });","file":"unit/parser_spec.js","skipped":false,"dir":"test"},{"name":"should ignore minus signs in the middle of number","suites":["parser","Lexer","getNumber"],"line":107,"updatePoint":{"line":107,"column":59,"index":4563},"code":"      it(\"should ignore minus signs in the middle of number\", function () {\n        const input = new StringStream(\"205--.88\");\n        const lexer = new Lexer(input);\n        expect(lexer.getNumber()).toEqual(205.88);\n      });","file":"unit/parser_spec.js","skipped":false,"dir":"test"},{"name":"should ignore line-breaks between operator and digit in number","suites":["parser","Lexer","getNumber"],"line":112,"updatePoint":{"line":112,"column":72,"index":4805},"code":"      it(\"should ignore line-breaks between operator and digit in number\", function () {\n        const minusInput = new StringStream(\"-\\r\\n205.88\");\n        const minusLexer = new Lexer(minusInput);\n        expect(minusLexer.getNumber()).toEqual(-205.88);\n        const plusInput = new StringStream(\"+\\r\\n205.88\");\n        const plusLexer = new Lexer(plusInput);\n        expect(plusLexer.getNumber()).toEqual(205.88);\n      });","file":"unit/parser_spec.js","skipped":false,"dir":"test"},{"name":"should treat a single decimal point, or minus/plus sign, as zero","suites":["parser","Lexer","getNumber"],"line":120,"updatePoint":{"line":120,"column":74,"index":5235},"code":"      it(\"should treat a single decimal point, or minus/plus sign, as zero\", function () {\n        const validNums = [\".\", \"-\", \"+\", \"-.\", \"+.\", \"-\\r\\n.\", \"+\\r\\n.\"];\n        for (const number of validNums) {\n          const validInput = new StringStream(number);\n          const validLexer = new Lexer(validInput);\n          expect(validLexer.getNumber()).toEqual(0);\n        }\n        const invalidNums = [\"..\", \".-\", \".+\"];\n        for (const number of invalidNums) {\n          const invalidInput = new StringStream(number);\n          const invalidLexer = new Lexer(invalidInput);\n          expect(function () {\n            return invalidLexer.getNumber();\n          }).toThrowError(FormatError, /^Invalid number:\\s/);\n        }\n      });","file":"unit/parser_spec.js","skipped":false,"dir":"test"},{"name":"should handle glued numbers and operators","suites":["parser","Lexer","getNumber"],"line":136,"updatePoint":{"line":136,"column":51,"index":5953},"code":"      it(\"should handle glued numbers and operators\", function () {\n        const input = new StringStream(\"123ET\");\n        const lexer = new Lexer(input);\n        expect(lexer.getNumber()).toEqual(123);\n        // The lexer must not have consumed the 'E'\n        expect(lexer.currentChar).toEqual(0x45); // 'E'\n      });","file":"unit/parser_spec.js","skipped":false,"dir":"test"},{"name":"should stop parsing strings at the end of stream","suites":["parser","Lexer","getString"],"line":146,"updatePoint":{"line":146,"column":58,"index":6332},"code":"      it(\"should stop parsing strings at the end of stream\", function () {\n        const input = new StringStream(\"(1$4)\");\n        input.getByte = function (super_getByte) {\n          // Simulating end of file using null (see issue 2766).\n          const ch = super_getByte.call(input);\n          return ch === 0x24 /* '$' */ ? -1 : ch;\n        }.bind(input, input.getByte);\n        const lexer = new Lexer(input);\n        expect(lexer.getString()).toEqual(\"1\");\n      });","file":"unit/parser_spec.js","skipped":false,"dir":"test"},{"name":"should ignore escaped CR and LF","suites":["parser","Lexer","getString"],"line":156,"updatePoint":{"line":156,"column":41,"index":6789},"code":"      it(\"should ignore escaped CR and LF\", function () {\n        // '(\\101\\<CR><LF>\\102)' should be parsed as 'AB'.\n        const input = new StringStream(\"(\\\\101\\\\\\r\\n\\\\102\\\\\\r\\\\103\\\\\\n\\\\104)\");\n        const lexer = new Lexer(input);\n        expect(lexer.getString()).toEqual(\"ABCD\");\n      });","file":"unit/parser_spec.js","skipped":false,"dir":"test"},{"name":"should not throw exception on bad input","suites":["parser","Lexer","getHexString"],"line":164,"updatePoint":{"line":164,"column":49,"index":7146},"code":"      it(\"should not throw exception on bad input\", function () {\n        // '7 0 2 15 5 2 2 2 4 3 2 4' should be parsed as '70 21 55 22 24 32'.\n        const input = new StringStream(\"<7 0 2 15 5 2 2 2 4 3 2 4>\");\n        const lexer = new Lexer(input);\n        expect(lexer.getHexString()).toEqual('p!U\"$2');\n      });","file":"unit/parser_spec.js","skipped":false,"dir":"test"},{"name":"should handle Names with invalid usage of NUMBER SIGN (#)","suites":["parser","Lexer","getName"],"line":172,"updatePoint":{"line":172,"column":67,"index":7531},"code":"      it(\"should handle Names with invalid usage of NUMBER SIGN (#)\", function () {\n        const inputNames = [\"/# 680 0 R\", \"/#AQwerty\", \"/#A<</B\"];\n        const expectedNames = [\"#\", \"#AQwerty\", \"#A\"];\n        for (let i = 0, ii = inputNames.length; i < ii; i++) {\n          const input = new StringStream(inputNames[i]);\n          const lexer = new Lexer(input);\n          expect(lexer.getName()).toEqual(Name.get(expectedNames[i]));\n        }\n      });","file":"unit/parser_spec.js","skipped":false,"dir":"test"},{"name":"should not find a linearization dictionary","suites":["parser","Linearization"],"line":201,"updatePoint":{"line":201,"column":50,"index":8731},"code":"    it(\"should not find a linearization dictionary\", function () {\n      // Not an actual linearization dictionary.\n      // prettier-ignore\n      const stream1 = new StringStream(\"3 0 obj\\n\" + \"<<\\n\" + \"/Length 4622\\n\" + \"/Filter /FlateDecode\\n\" + \">>\\n\" + \"endobj\");\n      expect(Linearization.create(stream1)).toEqual(null);\n\n      // Linearization dictionary with invalid version number.\n      // prettier-ignore\n      const stream2 = new StringStream(\"1 0 obj\\n\" + \"<<\\n\" + \"/Linearized 0\\n\" + \">>\\n\" + \"endobj\");\n      expect(Linearization.create(stream2)).toEqual(null);\n    });","file":"unit/parser_spec.js","skipped":false,"dir":"test"},{"name":"should accept a valid linearization dictionary","suites":["parser","Linearization"],"line":212,"updatePoint":{"line":212,"column":54,"index":9321},"code":"    it(\"should accept a valid linearization dictionary\", function () {\n      // prettier-ignore\n      const stream = new StringStream(\"131 0 obj\\n\" + \"<<\\n\" + \"/Linearized 1\\n\" + \"/O 133\\n\" + \"/H [ 1388 863 ]\\n\" + \"/L 90\\n\" + \"/E 43573\\n\" + \"/N 18\\n\" + \"/T 193883\\n\" + \">>\\n\" + \"endobj\");\n      const expectedLinearizationDict = {\n        length: 90,\n        hints: [1388, 863],\n        objectNumberFirst: 133,\n        endFirst: 43573,\n        numPages: 18,\n        mainXRefEntriesOffset: 193883,\n        pageFirst: 0\n      };\n      expect(Linearization.create(stream)).toEqual(expectedLinearizationDict);\n    });","file":"unit/parser_spec.js","skipped":false,"dir":"test"},{"name":"should reject a linearization dictionary with invalid hint parameters","suites":["parser","Linearization"],"line":248,"updatePoint":{"line":248,"column":77,"index":11408},"code":"    it(\"should reject a linearization dictionary with invalid hint parameters\", function () {\n      // The /H parameter should be an array.\n      // prettier-ignore\n      const stream1 = new StringStream(\"1 0 obj\\n\" + \"<<\\n\" + \"/Linearized 1\\n\" + \"/O 133\\n\" + \"/H 1388\\n\" + \"/L 80\\n\" + \"/E 43573\\n\" + \"/N 18\\n\" + \"/T 193883\\n\" + \">>\\n\" + \"endobj\");\n      expect(function () {\n        return Linearization.create(stream1);\n      }).toThrow(new Error(\"Hint array in the linearization dictionary is invalid.\"));\n\n      // The hint array should contain two, or four, elements.\n      // prettier-ignore\n      const stream2 = new StringStream(\"1 0 obj\\n\" + \"<<\\n\" + \"/Linearized 1\\n\" + \"/O 133\\n\" + \"/H [ 1388 ]\\n\" + \"/L 84\\n\" + \"/E 43573\\n\" + \"/N 18\\n\" + \"/T 193883\\n\" + \">>\\n\" + \"endobj\");\n      expect(function () {\n        return Linearization.create(stream2);\n      }).toThrow(new Error(\"Hint array in the linearization dictionary is invalid.\"));\n\n      // The hint array should not contain zero.\n      // prettier-ignore\n      const stream3 = new StringStream(\"1 0 obj\\n\" + \"<<\\n\" + \"/Linearized 1\\n\" + \"/O 133\\n\" + \"/H [ 1388 863 0 234]\\n\" + \"/L 93\\n\" + \"/E 43573\\n\" + \"/N 18\\n\" + \"/T 193883\\n\" + \">>\\n\" + \"endobj\");\n      expect(function () {\n        return Linearization.create(stream3);\n      }).toThrow(new Error(\"Hint (2) in the linearization dictionary is invalid.\"));\n    });","file":"unit/parser_spec.js","skipped":false,"dir":"test"},{"name":"performs a normal search","suites":["pdf_find_controller"],"line":161,"updatePoint":{"line":161,"column":30,"index":5516},"code":"  it(\"performs a normal search\", async function () {\n    const {\n      eventBus,\n      pdfFindController\n    } = await initPdfFindController();\n    const updateFindMatchesCount = [0];\n    await testSearch({\n      eventBus,\n      pdfFindController,\n      state: {\n        query: \"Dynamic\"\n      },\n      matchesPerPage: [11, 5, 0, 3, 0, 0, 0, 1, 1, 1, 0, 3, 4, 4],\n      selectedMatch: {\n        pageIndex: 0,\n        matchIndex: 0\n      },\n      updateFindMatchesCount\n    });\n    expect(updateFindMatchesCount[0]).toBe(9);\n  });","file":"unit/pdf_find_controller_spec.js","skipped":false,"dir":"test"},{"name":"performs a normal search but the total counts is only updated one time","suites":["pdf_find_controller"],"line":182,"updatePoint":{"line":182,"column":76,"index":6092},"code":"  it(\"performs a normal search but the total counts is only updated one time\", async function () {\n    const {\n      eventBus,\n      pdfFindController\n    } = await initPdfFindController(null, false);\n    const updateFindMatchesCount = [0];\n    const updateFindControlState = [0];\n    await testSearch({\n      eventBus,\n      pdfFindController,\n      state: {\n        query: \"Dynamic\"\n      },\n      matchesPerPage: [11, 5, 0, 3, 0, 0, 0, 1, 1, 1, 0, 3, 4, 4],\n      selectedMatch: {\n        pageIndex: 0,\n        matchIndex: 0\n      },\n      updateFindMatchesCount,\n      updateFindControlState\n    });\n    expect(updateFindMatchesCount[0]).toBe(1);\n    expect(updateFindControlState[0]).toBe(0);\n  });","file":"unit/pdf_find_controller_spec.js","skipped":false,"dir":"test"},{"name":"performs a normal search and finds the previous result","suites":["pdf_find_controller"],"line":206,"updatePoint":{"line":206,"column":60,"index":6780},"code":"  it(\"performs a normal search and finds the previous result\", async function () {\n    // Page 14 (with page index 13) contains five results. By default, the\n    // first result (match index 0) is selected, so the previous result\n    // should be the fifth result (match index 4).\n    const {\n      eventBus,\n      pdfFindController\n    } = await initPdfFindController();\n    await testSearch({\n      eventBus,\n      pdfFindController,\n      state: {\n        query: \"conference\",\n        findPrevious: true\n      },\n      matchesPerPage: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5],\n      selectedMatch: {\n        pageIndex: 13,\n        matchIndex: 4\n      }\n    });\n  });","file":"unit/pdf_find_controller_spec.js","skipped":false,"dir":"test"},{"name":"performs a case sensitive search","suites":["pdf_find_controller"],"line":228,"updatePoint":{"line":228,"column":38,"index":7430},"code":"  it(\"performs a case sensitive search\", async function () {\n    const {\n      eventBus,\n      pdfFindController\n    } = await initPdfFindController();\n    await testSearch({\n      eventBus,\n      pdfFindController,\n      state: {\n        query: \"Dynamic\",\n        caseSensitive: true\n      },\n      matchesPerPage: [3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3],\n      selectedMatch: {\n        pageIndex: 0,\n        matchIndex: 0\n      }\n    });\n  });","file":"unit/pdf_find_controller_spec.js","skipped":false,"dir":"test"},{"name":"performs an entire word search","suites":["pdf_find_controller"],"line":247,"updatePoint":{"line":247,"column":36,"index":7877},"code":"  it(\"performs an entire word search\", async function () {\n    // Page 13 contains both 'Government' and 'Governmental', so the latter\n    // should not be found with entire word search.\n    const {\n      eventBus,\n      pdfFindController\n    } = await initPdfFindController();\n    await testSearch({\n      eventBus,\n      pdfFindController,\n      state: {\n        query: \"Government\",\n        entireWord: true\n      },\n      matchesPerPage: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],\n      selectedMatch: {\n        pageIndex: 12,\n        matchIndex: 0\n      }\n    });\n  });","file":"unit/pdf_find_controller_spec.js","skipped":false,"dir":"test"},{"name":"performs a multiple term (no phrase) search","suites":["pdf_find_controller"],"line":268,"updatePoint":{"line":268,"column":49,"index":8466},"code":"  it(\"performs a multiple term (no phrase) search\", async function () {\n    // Page 9 contains 'alternate' and pages 6 and 9 contain 'solution'.\n    // Both should be found for multiple term (no phrase) search.\n    const {\n      eventBus,\n      pdfFindController\n    } = await initPdfFindController();\n    await testSearch({\n      eventBus,\n      pdfFindController,\n      state: {\n        query: [\"alternate\", \"solution\"]\n      },\n      matchesPerPage: [0, 0, 0, 0, 0, 1, 0, 0, 4, 0, 0, 0, 0, 0],\n      selectedMatch: {\n        pageIndex: 5,\n        matchIndex: 0\n      }\n    });\n  });","file":"unit/pdf_find_controller_spec.js","skipped":false,"dir":"test"},{"name":"performs a multiple term (phrase) search","suites":["pdf_find_controller"],"line":288,"updatePoint":{"line":288,"column":46,"index":9049},"code":"  it(\"performs a multiple term (phrase) search\", async function () {\n    // Page 9 contains 'alternate solution' and pages 6 and 9 contain\n    // 'solution'. Both should be found for multiple term (phrase) search.\n    const {\n      eventBus,\n      pdfFindController\n    } = await initPdfFindController();\n    await testSearch({\n      eventBus,\n      pdfFindController,\n      state: {\n        query: [\"alternate solution\", \"solution\"]\n      },\n      matchesPerPage: [0, 0, 0, 0, 0, 1, 0, 0, 3, 0, 0, 0, 0, 0],\n      selectedMatch: {\n        pageIndex: 5,\n        matchIndex: 0\n      }\n    });\n  });","file":"unit/pdf_find_controller_spec.js","skipped":false,"dir":"test"},{"name":"performs a normal search, where the text is normalized","suites":["pdf_find_controller"],"line":308,"updatePoint":{"line":308,"column":60,"index":9661},"code":"  it(\"performs a normal search, where the text is normalized\", async function () {\n    const {\n      eventBus,\n      pdfFindController\n    } = await initPdfFindController(\"fraction-highlight.pdf\");\n    await testSearch({\n      eventBus,\n      pdfFindController,\n      state: {\n        query: \"fraction\"\n      },\n      matchesPerPage: [3],\n      selectedMatch: {\n        pageIndex: 0,\n        matchIndex: 0\n      },\n      pageMatches: [[19, 46, 62]],\n      pageMatchesLength: [[8, 8, 8]]\n    });\n    await testSearch({\n      eventBus,\n      pdfFindController,\n      state: {\n        query: \"1/2\"\n      },\n      matchesPerPage: [2],\n      selectedMatch: {\n        pageIndex: 0,\n        matchIndex: 0\n      },\n      pageMatches: [[27, 54]],\n      pageMatchesLength: [[1, 1]]\n    });\n    await testSearch({\n      eventBus,\n      pdfFindController,\n      state: {\n        query: \"½\"\n      },\n      matchesPerPage: [2],\n      selectedMatch: {\n        pageIndex: 0,\n        matchIndex: 0\n      },\n      pageMatches: [[27, 54]],\n      pageMatchesLength: [[1, 1]]\n    });\n    await testSearch({\n      eventBus,\n      pdfFindController,\n      state: {\n        query: \"1\"\n      },\n      matchesPerPage: [3],\n      selectedMatch: {\n        pageIndex: 0,\n        matchIndex: 0\n      },\n      pageMatches: [[27, 54, 55]],\n      pageMatchesLength: [[1, 1, 1]]\n    });\n    await testSearch({\n      eventBus,\n      pdfFindController,\n      state: {\n        query: \"2\"\n      },\n      matchesPerPage: [2],\n      selectedMatch: {\n        pageIndex: 0,\n        matchIndex: 0\n      },\n      pageMatches: [[27, 54]],\n      pageMatchesLength: [[1, 1]]\n    });\n    await testSearch({\n      eventBus,\n      pdfFindController,\n      state: {\n        query: \"1/\"\n      },\n      matchesPerPage: [3],\n      selectedMatch: {\n        pageIndex: 0,\n        matchIndex: 0\n      },\n      pageMatches: [[27, 54, 55]],\n      pageMatchesLength: [[1, 1, 1]]\n    });\n    await testSearch({\n      eventBus,\n      pdfFindController,\n      state: {\n        query: \"1/21\"\n      },\n      matchesPerPage: [1],\n      selectedMatch: {\n        pageIndex: 0,\n        matchIndex: 0\n      },\n      pageMatches: [[54]],\n      pageMatchesLength: [[2]]\n    });\n  });","file":"unit/pdf_find_controller_spec.js","skipped":false,"dir":"test"},{"name":"performs a normal search, where the text with diacritics is normalized","suites":["pdf_find_controller"],"line":412,"updatePoint":{"line":412,"column":76,"index":11889},"code":"  it(\"performs a normal search, where the text with diacritics is normalized\", async function () {\n    const {\n      eventBus,\n      pdfFindController\n    } = await initPdfFindController(\"french_diacritics.pdf\");\n    await testSearch({\n      eventBus,\n      pdfFindController,\n      state: {\n        query: \"a\"\n      },\n      matchesPerPage: [6],\n      selectedMatch: {\n        pageIndex: 0,\n        matchIndex: 0\n      },\n      pageMatches: [[0, 2, 4, 6, 8, 10]],\n      pageMatchesLength: [[1, 1, 1, 1, 1, 1]]\n    });\n    await testSearch({\n      eventBus,\n      pdfFindController,\n      state: {\n        query: \"u\"\n      },\n      matchesPerPage: [6],\n      selectedMatch: {\n        pageIndex: 0,\n        matchIndex: 0\n      },\n      pageMatches: [[44, 46, 48, 50, 52, 54]],\n      pageMatchesLength: [[1, 1, 1, 1, 1, 1]]\n    });\n    await testSearch({\n      eventBus,\n      pdfFindController,\n      state: {\n        query: \"ë\",\n        matchDiacritics: true\n      },\n      matchesPerPage: [2],\n      selectedMatch: {\n        pageIndex: 0,\n        matchIndex: 0\n      },\n      pageMatches: [[28, 30]],\n      pageMatchesLength: [[1, 1]]\n    });\n  });","file":"unit/pdf_find_controller_spec.js","skipped":false,"dir":"test"},{"name":"performs a search where one of the results contains an hyphen","suites":["pdf_find_controller"],"line":461,"updatePoint":{"line":461,"column":67,"index":13030},"code":"  it(\"performs a search where one of the results contains an hyphen\", async function () {\n    const {\n      eventBus,\n      pdfFindController\n    } = await initPdfFindController();\n    await testSearch({\n      eventBus,\n      pdfFindController,\n      state: {\n        query: \"optimiz\"\n      },\n      matchesPerPage: [1, 4, 2, 3, 3, 0, 2, 9, 1, 0, 0, 6, 3, 4],\n      selectedMatch: {\n        pageIndex: 0,\n        matchIndex: 0\n      }\n    });\n  });","file":"unit/pdf_find_controller_spec.js","skipped":false,"dir":"test"},{"name":"performs a search where the result is on two lines","suites":["pdf_find_controller"],"line":479,"updatePoint":{"line":479,"column":56,"index":13468},"code":"  it(\"performs a search where the result is on two lines\", async function () {\n    const {\n      eventBus,\n      pdfFindController\n    } = await initPdfFindController();\n    await testSearch({\n      eventBus,\n      pdfFindController,\n      state: {\n        query: \"user experience\"\n      },\n      matchesPerPage: [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n      selectedMatch: {\n        pageIndex: 0,\n        matchIndex: 0\n      },\n      pageMatches: [[2734]],\n      pageMatchesLength: [[14]]\n    });\n  });","file":"unit/pdf_find_controller_spec.js","skipped":false,"dir":"test"},{"name":"performs a search where the result is on two lines with a punctuation at eol","suites":["pdf_find_controller"],"line":499,"updatePoint":{"line":499,"column":82,"index":14002},"code":"  it(\"performs a search where the result is on two lines with a punctuation at eol\", async function () {\n    const {\n      eventBus,\n      pdfFindController\n    } = await initPdfFindController();\n    await testSearch({\n      eventBus,\n      pdfFindController,\n      state: {\n        query: \"version.the\"\n      },\n      matchesPerPage: [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n      selectedMatch: {\n        pageIndex: 1,\n        matchIndex: 0\n      },\n      pageMatches: [[], [1486]],\n      pageMatchesLength: [[], [11]]\n    });\n  });","file":"unit/pdf_find_controller_spec.js","skipped":false,"dir":"test"},{"name":"performs a search with a minus sign in the query","suites":["pdf_find_controller"],"line":519,"updatePoint":{"line":519,"column":54,"index":14512},"code":"  it(\"performs a search with a minus sign in the query\", async function () {\n    const {\n      eventBus,\n      pdfFindController\n    } = await initPdfFindController();\n    await testSearch({\n      eventBus,\n      pdfFindController,\n      state: {\n        query: \"trace-based  just-in-time\"\n      },\n      matchesPerPage: [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],\n      selectedMatch: {\n        pageIndex: 0,\n        matchIndex: 0\n      },\n      pageMatches: [[0], [], [], [], [], [], [], [], [], [], [], [], [], [2081]],\n      pageMatchesLength: [[24], [], [], [], [], [], [], [], [], [], [], [], [], [24]]\n    });\n  });","file":"unit/pdf_find_controller_spec.js","skipped":false,"dir":"test"},{"name":"performs a search with square brackets in the query","suites":["pdf_find_controller"],"line":539,"updatePoint":{"line":539,"column":57,"index":15138},"code":"  it(\"performs a search with square brackets in the query\", async function () {\n    const {\n      eventBus,\n      pdfFindController\n    } = await initPdfFindController();\n    await testSearch({\n      eventBus,\n      pdfFindController,\n      state: {\n        query: \"[Programming Languages]\"\n      },\n      matchesPerPage: [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n      selectedMatch: {\n        pageIndex: 0,\n        matchIndex: 0\n      },\n      pageMatches: [[1497]],\n      pageMatchesLength: [[25]]\n    });\n  });","file":"unit/pdf_find_controller_spec.js","skipped":false,"dir":"test"},{"name":"performs a search with parenthesis in the query","suites":["pdf_find_controller"],"line":559,"updatePoint":{"line":559,"column":53,"index":15651},"code":"  it(\"performs a search with parenthesis in the query\", async function () {\n    const {\n      eventBus,\n      pdfFindController\n    } = await initPdfFindController();\n    await testSearch({\n      eventBus,\n      pdfFindController,\n      state: {\n        query: \"\\t   (checks)\"\n      },\n      matchesPerPage: [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n      selectedMatch: {\n        pageIndex: 1,\n        matchIndex: 0\n      },\n      pageMatches: [[], [201]],\n      pageMatchesLength: [[], [9]]\n    });\n  });","file":"unit/pdf_find_controller_spec.js","skipped":false,"dir":"test"},{"name":"performs a search with a final dot in the query","suites":["pdf_find_controller"],"line":579,"updatePoint":{"line":579,"column":53,"index":16160},"code":"  it(\"performs a search with a final dot in the query\", async function () {\n    const {\n      eventBus,\n      pdfFindController\n    } = await initPdfFindController();\n\n    // The whitespace after the dot mustn't be matched.\n    const query = \"complex applications.\";\n    await testSearch({\n      eventBus,\n      pdfFindController,\n      state: {\n        query\n      },\n      matchesPerPage: [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n      selectedMatch: {\n        pageIndex: 0,\n        matchIndex: 0\n      },\n      pageMatches: [[1941]],\n      pageMatchesLength: [[21]]\n    });\n  });","file":"unit/pdf_find_controller_spec.js","skipped":false,"dir":"test"},{"name":"performs a search with a dot in the query and a missing whitespace","suites":["pdf_find_controller"],"line":602,"updatePoint":{"line":602,"column":72,"index":16765},"code":"  it(\"performs a search with a dot in the query and a missing whitespace\", async function () {\n    const {\n      eventBus,\n      pdfFindController\n    } = await initPdfFindController();\n\n    // The whitespace after the dot must be matched.\n    const query = \"complex applications.J\";\n    await testSearch({\n      eventBus,\n      pdfFindController,\n      state: {\n        query\n      },\n      matchesPerPage: [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n      selectedMatch: {\n        pageIndex: 0,\n        matchIndex: 0\n      },\n      pageMatches: [[1941]],\n      pageMatchesLength: [[23]]\n    });\n  });","file":"unit/pdf_find_controller_spec.js","skipped":false,"dir":"test"},{"name":"performs a search with a dot followed by a whitespace in the query","suites":["pdf_find_controller"],"line":625,"updatePoint":{"line":625,"column":72,"index":17368},"code":"  it(\"performs a search with a dot followed by a whitespace in the query\", async function () {\n    const {\n      eventBus,\n      pdfFindController\n    } = await initPdfFindController();\n    const query = \"complex applications. j\";\n    await testSearch({\n      eventBus,\n      pdfFindController,\n      state: {\n        query\n      },\n      matchesPerPage: [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n      selectedMatch: {\n        pageIndex: 0,\n        matchIndex: 0\n      },\n      pageMatches: [[1941]],\n      pageMatchesLength: [[23]]\n    });\n  });","file":"unit/pdf_find_controller_spec.js","skipped":false,"dir":"test"},{"name":"performs a search in a text containing diacritics before -\\n","suites":["pdf_find_controller"],"line":646,"updatePoint":{"line":646,"column":67,"index":17913},"code":"  it(\"performs a search in a text containing diacritics before -\\\\n\", async function () {\n    if (isNodeJS) {\n      pending(\"Linked test-cases are not supported in Node.js.\");\n    }\n    const {\n      eventBus,\n      pdfFindController\n    } = await initPdfFindController(\"issue14562.pdf\");\n    await testSearch({\n      eventBus,\n      pdfFindController,\n      state: {\n        query: \"ä\",\n        matchDiacritics: true\n      },\n      matchesPerPage: [80],\n      selectedMatch: {\n        pageIndex: 0,\n        matchIndex: 0\n      },\n      pageMatches: [[302, 340, 418, 481, 628, 802, 983, 989, 1015, 1063, 1084, 1149, 1157, 1278, 1346, 1394, 1402, 1424, 1500, 1524, 1530, 1686, 1776, 1788, 1859, 1881, 1911, 1948, 2066, 2076, 2163, 2180, 2215, 2229, 2274, 2324, 2360, 2402, 2413, 2424, 2463, 2532, 2538, 2553, 2562, 2576, 2602, 2613, 2638, 2668, 2792, 2805, 2836, 2847, 2858, 2895, 2901, 2915, 2939, 2959, 3089, 3236, 3246, 3336, 3384, 3391, 3465, 3474, 3482, 3499, 3687, 3693, 3708, 3755, 3786, 3862, 3974, 4049, 4055, 4068]],\n      pageMatchesLength: [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]\n    });\n  });","file":"unit/pdf_find_controller_spec.js","skipped":false,"dir":"test"},{"name":"performs a search in a text containing some Hangul syllables","suites":["pdf_find_controller"],"line":670,"updatePoint":{"line":670,"column":66,"index":19220},"code":"  it(\"performs a search in a text containing some Hangul syllables\", async function () {\n    const {\n      eventBus,\n      pdfFindController\n    } = await initPdfFindController(\"bug1771477.pdf\");\n    await testSearch({\n      eventBus,\n      pdfFindController,\n      state: {\n        query: \"안녕하세요 세계\"\n      },\n      matchesPerPage: [1],\n      selectedMatch: {\n        pageIndex: 0,\n        matchIndex: 0\n      },\n      pageMatches: [[139]],\n      pageMatchesLength: [[8]]\n    });\n  });","file":"unit/pdf_find_controller_spec.js","skipped":false,"dir":"test"},{"name":"performs a search in a text containing an ideographic at the end of a line","suites":["pdf_find_controller"],"line":690,"updatePoint":{"line":690,"column":80,"index":19720},"code":"  it(\"performs a search in a text containing an ideographic at the end of a line\", async function () {\n    const {\n      eventBus,\n      pdfFindController\n    } = await initPdfFindController(\"issue15340.pdf\");\n    await testSearch({\n      eventBus,\n      pdfFindController,\n      state: {\n        query: \"検知機構\"\n      },\n      matchesPerPage: [1],\n      selectedMatch: {\n        pageIndex: 0,\n        matchIndex: 0\n      },\n      pageMatches: [[29]],\n      pageMatchesLength: [[4]]\n    });\n  });","file":"unit/pdf_find_controller_spec.js","skipped":false,"dir":"test"},{"name":"performs a search in a text containing fullwidth chars","suites":["pdf_find_controller"],"line":710,"updatePoint":{"line":710,"column":60,"index":20195},"code":"  it(\"performs a search in a text containing fullwidth chars\", async function () {\n    const {\n      eventBus,\n      pdfFindController\n    } = await initPdfFindController(\"issue15690.pdf\");\n    await testSearch({\n      eventBus,\n      pdfFindController,\n      state: {\n        query: \"o\"\n      },\n      matchesPerPage: [13],\n      selectedMatch: {\n        pageIndex: 0,\n        matchIndex: 0\n      },\n      pageMatches: [[0, 10, 13, 30, 39, 41, 55, 60, 66, 84, 102, 117, 134]],\n      pageMatchesLength: [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]\n    });\n  });","file":"unit/pdf_find_controller_spec.js","skipped":false,"dir":"test"},{"name":"performs a search in a text with some Katakana at the end of a line","suites":["pdf_find_controller"],"line":730,"updatePoint":{"line":730,"column":73,"index":20767},"code":"  it(\"performs a search in a text with some Katakana at the end of a line\", async function () {\n    const {\n      eventBus,\n      pdfFindController\n    } = await initPdfFindController(\"issue15759.pdf\");\n    await testSearch({\n      eventBus,\n      pdfFindController,\n      state: {\n        query: \"ソレノイド\"\n      },\n      matchesPerPage: [1],\n      selectedMatch: {\n        pageIndex: 0,\n        matchIndex: 0\n      },\n      pageMatches: [[6]],\n      pageMatchesLength: [[5]]\n    });\n  });","file":"unit/pdf_find_controller_spec.js","skipped":false,"dir":"test"},{"name":"performs a search with a single diacritic","suites":["pdf_find_controller"],"line":750,"updatePoint":{"line":750,"column":47,"index":21229},"code":"  it(\"performs a search with a single diacritic\", async function () {\n    const {\n      eventBus,\n      pdfFindController\n    } = await initPdfFindController();\n    await testEmptySearch({\n      eventBus,\n      pdfFindController,\n      state: {\n        query: \"\\u064E\"\n      }\n    });\n  });","file":"unit/pdf_find_controller_spec.js","skipped":false,"dir":"test"},{"name":"performs a search in a text containing combining diacritics","suites":["pdf_find_controller"],"line":763,"updatePoint":{"line":763,"column":65,"index":21538},"code":"  it(\"performs a search in a text containing combining diacritics\", async function () {\n    if (isNodeJS) {\n      pending(\"Linked test-cases are not supported in Node.js.\");\n    }\n    const {\n      eventBus,\n      pdfFindController\n    } = await initPdfFindController(\"issue12909.pdf\");\n    await testSearch({\n      eventBus,\n      pdfFindController,\n      state: {\n        query: \"הספר\",\n        matchDiacritics: true\n      },\n      matchesPerPage: [0, 0, 0, 0, 0, 0, 0, 0, 1],\n      selectedMatch: {\n        pageIndex: 8,\n        matchIndex: 0\n      }\n    });\n    await testSearch({\n      eventBus,\n      pdfFindController,\n      state: {\n        query: \"הספר\",\n        matchDiacritics: false\n      },\n      matchesPerPage: [0, 1, 0, 0, 0, 0, 0, 0, 1],\n      selectedMatch: {\n        pageIndex: 8,\n        matchIndex: 0\n      }\n    });\n  });","file":"unit/pdf_find_controller_spec.js","skipped":false,"dir":"test"},{"name":"performs a search in a text with some Hiragana diacritics at the end of a line","suites":["pdf_find_controller"],"line":798,"updatePoint":{"line":798,"column":84,"index":22401},"code":"  it(\"performs a search in a text with some Hiragana diacritics at the end of a line\", async function () {\n    const {\n      eventBus,\n      pdfFindController\n    } = await initPdfFindController(\"issue16063.pdf\");\n    await testSearch({\n      eventBus,\n      pdfFindController,\n      state: {\n        query: \"行うことができる速結端子\"\n      },\n      matchesPerPage: [1],\n      selectedMatch: {\n        pageIndex: 0,\n        matchIndex: 0\n      },\n      pageMatches: [[63]],\n      pageMatchesLength: [[12]]\n    });\n    await testSearch({\n      eventBus,\n      pdfFindController,\n      state: {\n        query: \"デュプレックス\"\n      },\n      matchesPerPage: [1],\n      selectedMatch: {\n        pageIndex: 0,\n        matchIndex: 0\n      },\n      pageMatches: [[205]],\n      pageMatchesLength: [[7]]\n    });\n  });","file":"unit/pdf_find_controller_spec.js","skipped":false,"dir":"test"},{"name":"performs a search in a text with some UTF-32 chars","suites":["pdf_find_controller"],"line":832,"updatePoint":{"line":832,"column":56,"index":23164},"code":"  it(\"performs a search in a text with some UTF-32 chars\", async function () {\n    if (isNodeJS) {\n      pending(\"Linked test-cases are not supported in Node.js.\");\n    }\n    const {\n      eventBus,\n      pdfFindController\n    } = await initPdfFindController(\"bug1820909.pdf\");\n    await testSearch({\n      eventBus,\n      pdfFindController,\n      state: {\n        query: \"31350\"\n      },\n      matchesPerPage: [1, 2],\n      selectedMatch: {\n        pageIndex: 0,\n        matchIndex: 0\n      },\n      pageMatches: [[41], [131, 1359]],\n      pageMatchesLength: [[5], [5, 5]]\n    });\n  });","file":"unit/pdf_find_controller_spec.js","skipped":false,"dir":"test"},{"name":"performs a search in a text with some UTF-32 chars followed by a dash at the end of a line","suites":["pdf_find_controller"],"line":855,"updatePoint":{"line":855,"column":96,"index":23792},"code":"  it(\"performs a search in a text with some UTF-32 chars followed by a dash at the end of a line\", async function () {\n    const {\n      eventBus,\n      pdfFindController\n    } = await initPdfFindController(\"bug1820909.1.pdf\");\n    await testSearch({\n      eventBus,\n      pdfFindController,\n      state: {\n        query: \"abcde\"\n      },\n      matchesPerPage: [2],\n      selectedMatch: {\n        pageIndex: 0,\n        matchIndex: 0\n      },\n      pageMatches: [[42, 95]],\n      pageMatchesLength: [[5, 5]]\n    });\n  });","file":"unit/pdf_find_controller_spec.js","skipped":false,"dir":"test"},{"name":"performs a search in a text with some arabic chars in different unicode ranges but with same normalized form","suites":["pdf_find_controller"],"line":875,"updatePoint":{"line":875,"column":114,"index":24331},"code":"  it(\"performs a search in a text with some arabic chars in different unicode ranges but with same normalized form\", async function () {\n    const {\n      eventBus,\n      pdfFindController\n    } = await initPdfFindController(\"ArabicCIDTrueType.pdf\");\n    await testSearch({\n      eventBus,\n      pdfFindController,\n      state: {\n        query: \"\\u0629\"\n      },\n      matchesPerPage: [4],\n      selectedMatch: {\n        pageIndex: 0,\n        matchIndex: 0\n      },\n      pageMatches: [[6, 25, 44, 63]],\n      pageMatchesLength: [[1, 1, 1, 1]]\n    });\n    await testSearch({\n      eventBus,\n      pdfFindController,\n      state: {\n        query: \"\\ufe94\"\n      },\n      matchesPerPage: [4],\n      selectedMatch: {\n        pageIndex: 0,\n        matchIndex: 0\n      },\n      pageMatches: [[6, 25, 44, 63]],\n      pageMatchesLength: [[1, 1, 1, 1]]\n    });\n  });","file":"unit/pdf_find_controller_spec.js","skipped":false,"dir":"test"},{"name":"performs a search in a text with some f ligatures","suites":["pdf_find_controller"],"line":909,"updatePoint":{"line":909,"column":55,"index":25131},"code":"  it(\"performs a search in a text with some f ligatures\", async function () {\n    const {\n      eventBus,\n      pdfFindController\n    } = await initPdfFindController(\"copy_paste_ligatures.pdf\");\n    await testSearch({\n      eventBus,\n      pdfFindController,\n      state: {\n        query: \"f\"\n      },\n      matchesPerPage: [9],\n      selectedMatch: {\n        pageIndex: 0,\n        matchIndex: 0\n      },\n      pageMatches: [[5, 6, 6, 7, 8, 9, 9, 10, 10]],\n      pageMatchesLength: [[1, 1, 1, 1, 1, 1, 1, 1, 1]]\n    });\n  });","file":"unit/pdf_find_controller_spec.js","skipped":false,"dir":"test"},{"name":"gets expected character types","suites":["pdf_find_utils","getCharacterType"],"line":19,"updatePoint":{"line":19,"column":37,"index":803},"code":"    it(\"gets expected character types\", function () {\n      const characters = {\n        A: CharacterType.ALPHA_LETTER,\n        a: CharacterType.ALPHA_LETTER,\n        0: CharacterType.ALPHA_LETTER,\n        5: CharacterType.ALPHA_LETTER,\n        \"\\xC4\": CharacterType.ALPHA_LETTER,\n        // \"Ä\"\n        \"\\xE4\": CharacterType.ALPHA_LETTER,\n        // \"ä\"\n        _: CharacterType.ALPHA_LETTER,\n        \" \": CharacterType.SPACE,\n        \"\\t\": CharacterType.SPACE,\n        \"\\r\": CharacterType.SPACE,\n        \"\\n\": CharacterType.SPACE,\n        \"\\xA0\": CharacterType.SPACE,\n        // nbsp\n        \"-\": CharacterType.PUNCT,\n        \",\": CharacterType.PUNCT,\n        \".\": CharacterType.PUNCT,\n        \";\": CharacterType.PUNCT,\n        \":\": CharacterType.PUNCT,\n        \"\\u2122\": CharacterType.ALPHA_LETTER,\n        // trademark\n        \"\\u0E25\": CharacterType.THAI_LETTER,\n        \"\\u4000\": CharacterType.HAN_LETTER,\n        \"\\uF950\": CharacterType.HAN_LETTER,\n        \"\\u30C0\": CharacterType.KATAKANA_LETTER,\n        \"\\u3050\": CharacterType.HIRAGANA_LETTER,\n        \"\\uFF80\": CharacterType.HALFWIDTH_KATAKANA_LETTER\n      };\n      for (const character in characters) {\n        const charCode = character.charCodeAt(0);\n        const type = characters[character];\n        expect(getCharacterType(charCode)).toEqual(type);\n      }\n    });","file":"unit/pdf_find_utils_spec.js","skipped":false,"dir":"test"},{"name":"should reject non-equal destination hashes","suites":["pdf_history","isDestHashesEqual"],"line":19,"updatePoint":{"line":19,"column":50,"index":816},"code":"    it(\"should reject non-equal destination hashes\", function () {\n      expect(isDestHashesEqual(null, \"page.157\")).toEqual(false);\n      expect(isDestHashesEqual(\"title.0\", \"page.157\")).toEqual(false);\n      expect(isDestHashesEqual(\"page=1&zoom=auto\", \"page.157\")).toEqual(false);\n      expect(isDestHashesEqual(\"nameddest-page.157\", \"page.157\")).toEqual(false);\n      expect(isDestHashesEqual(\"page.157\", \"nameddest=page.157\")).toEqual(false);\n      const destArrayString = JSON.stringify([{\n        num: 3757,\n        gen: 0\n      }, {\n        name: \"XYZ\"\n      }, 92.918, 748.972, null]);\n      expect(isDestHashesEqual(destArrayString, \"page.157\")).toEqual(false);\n      expect(isDestHashesEqual(\"page.157\", destArrayString)).toEqual(false);\n    });","file":"unit/pdf_history_spec.js","skipped":false,"dir":"test"},{"name":"should accept equal destination hashes","suites":["pdf_history","isDestHashesEqual"],"line":34,"updatePoint":{"line":34,"column":46,"index":1569},"code":"    it(\"should accept equal destination hashes\", function () {\n      expect(isDestHashesEqual(\"page.157\", \"page.157\")).toEqual(true);\n      expect(isDestHashesEqual(\"nameddest=page.157\", \"page.157\")).toEqual(true);\n      expect(isDestHashesEqual(\"nameddest=page.157&zoom=100\", \"page.157\")).toEqual(true);\n    });","file":"unit/pdf_history_spec.js","skipped":false,"dir":"test"},{"name":"should reject non-equal destination arrays","suites":["pdf_history","isDestArraysEqual"],"line":71,"updatePoint":{"line":71,"column":50,"index":2444},"code":"    it(\"should reject non-equal destination arrays\", function () {\n      expect(isDestArraysEqual(firstDest, undefined)).toEqual(false);\n      expect(isDestArraysEqual(firstDest, [1, 2, 3, 4, 5])).toEqual(false);\n      expect(isDestArraysEqual(firstDest, secondDest)).toEqual(false);\n      expect(isDestArraysEqual(firstDest, thirdDest)).toEqual(false);\n      expect(isDestArraysEqual(firstDest, fourthDest)).toEqual(false);\n    });","file":"unit/pdf_history_spec.js","skipped":false,"dir":"test"},{"name":"should accept equal destination arrays","suites":["pdf_history","isDestArraysEqual"],"line":78,"updatePoint":{"line":78,"column":46,"index":2873},"code":"    it(\"should accept equal destination arrays\", function () {\n      expect(isDestArraysEqual(firstDest, firstDest)).toEqual(true);\n      expect(isDestArraysEqual(firstDest, fifthDest)).toEqual(true);\n      const firstDestCopy = firstDest.slice();\n      expect(firstDest).not.toBe(firstDestCopy);\n      expect(isDestArraysEqual(firstDest, firstDestCopy)).toEqual(true);\n    });","file":"unit/pdf_history_spec.js","skipped":false,"dir":"test"},{"name":"handles `push` correctly","suites":["PDFViewer","PDFPageViewBuffer"],"line":29,"updatePoint":{"line":29,"column":32,"index":1009},"code":"    it(\"handles `push` correctly\", function () {\n      const buffer = new PDFPageViewBuffer(3);\n      const viewsMap = createViewsMap(1, 5),\n        iterator = viewsMap.values();\n      for (let i = 0; i < 3; i++) {\n        const view = iterator.next().value;\n        buffer.push(view);\n      }\n      // Ensure that the correct views are inserted.\n      expect([...buffer]).toEqual([viewsMap.get(1), viewsMap.get(2), viewsMap.get(3)]);\n      for (let i = 3; i < 5; i++) {\n        const view = iterator.next().value;\n        buffer.push(view);\n      }\n      // Ensure that the correct views are evicted.\n      expect([...buffer]).toEqual([viewsMap.get(3), viewsMap.get(4), viewsMap.get(5)]);\n    });","file":"unit/pdf_viewer_spec.js","skipped":false,"dir":"test"},{"name":"handles `resize` correctly","suites":["PDFViewer","PDFPageViewBuffer"],"line":46,"updatePoint":{"line":46,"column":34,"index":1709},"code":"    it(\"handles `resize` correctly\", function () {\n      const buffer = new PDFPageViewBuffer(5);\n      const viewsMap = createViewsMap(1, 5),\n        iterator = viewsMap.values();\n      for (let i = 0; i < 5; i++) {\n        const view = iterator.next().value;\n        buffer.push(view);\n      }\n      // Ensure that keeping the size constant won't evict any views.\n      buffer.resize(5);\n      expect([...buffer]).toEqual([viewsMap.get(1), viewsMap.get(2), viewsMap.get(3), viewsMap.get(4), viewsMap.get(5)]);\n\n      // Ensure that increasing the size won't evict any views.\n      buffer.resize(10);\n      expect([...buffer]).toEqual([viewsMap.get(1), viewsMap.get(2), viewsMap.get(3), viewsMap.get(4), viewsMap.get(5)]);\n\n      // Ensure that decreasing the size will evict the correct views.\n      buffer.resize(3);\n      expect([...buffer]).toEqual([viewsMap.get(3), viewsMap.get(4), viewsMap.get(5)]);\n    });","file":"unit/pdf_viewer_spec.js","skipped":false,"dir":"test"},{"name":"handles `resize` correctly, with `idsToKeep` provided","suites":["PDFViewer","PDFPageViewBuffer"],"line":66,"updatePoint":{"line":66,"column":61,"index":2652},"code":"    it(\"handles `resize` correctly, with `idsToKeep` provided\", function () {\n      const buffer = new PDFPageViewBuffer(5);\n      const viewsMap = createViewsMap(1, 5),\n        iterator = viewsMap.values();\n      for (let i = 0; i < 5; i++) {\n        const view = iterator.next().value;\n        buffer.push(view);\n      }\n      // Ensure that keeping the size constant won't evict any views,\n      // while re-ordering them correctly.\n      buffer.resize(5, new Set([1, 2]));\n      expect([...buffer]).toEqual([viewsMap.get(3), viewsMap.get(4), viewsMap.get(5), viewsMap.get(1), viewsMap.get(2)]);\n\n      // Ensure that increasing the size won't evict any views,\n      // while re-ordering them correctly.\n      buffer.resize(10, new Set([3, 4, 5]));\n      expect([...buffer]).toEqual([viewsMap.get(1), viewsMap.get(2), viewsMap.get(3), viewsMap.get(4), viewsMap.get(5)]);\n\n      // Ensure that decreasing the size will evict the correct views,\n      // while re-ordering the remaining ones correctly.\n      buffer.resize(3, new Set([1, 2, 5]));\n      expect([...buffer]).toEqual([viewsMap.get(1), viewsMap.get(2), viewsMap.get(5)]);\n    });","file":"unit/pdf_viewer_spec.js","skipped":false,"dir":"test"},{"name":"handles `has` correctly","suites":["PDFViewer","PDFPageViewBuffer"],"line":89,"updatePoint":{"line":89,"column":31,"index":3765},"code":"    it(\"handles `has` correctly\", function () {\n      const buffer = new PDFPageViewBuffer(3);\n      const viewsMap = createViewsMap(1, 2),\n        iterator = viewsMap.values();\n      for (let i = 0; i < 1; i++) {\n        const view = iterator.next().value;\n        buffer.push(view);\n      }\n      expect(buffer.has(viewsMap.get(1))).toEqual(true);\n      expect(buffer.has(viewsMap.get(2))).toEqual(false);\n    });","file":"unit/pdf_viewer_spec.js","skipped":false,"dir":"test"},{"name":"should retain the given name","suites":["primitives","Name"],"line":21,"updatePoint":{"line":21,"column":36,"index":934},"code":"    it(\"should retain the given name\", function () {\n      const givenName = \"Font\";\n      const name = Name.get(givenName);\n      expect(name.name).toEqual(givenName);\n    });","file":"unit/primitives_spec.js","skipped":false,"dir":"test"},{"name":"should create only one object for a name and cache it","suites":["primitives","Name"],"line":26,"updatePoint":{"line":26,"column":61,"index":1136},"code":"    it(\"should create only one object for a name and cache it\", function () {\n      const firstFont = Name.get(\"Font\");\n      const secondFont = Name.get(\"Font\");\n      const firstSubtype = Name.get(\"Subtype\");\n      const secondSubtype = Name.get(\"Subtype\");\n      expect(firstFont).toBe(secondFont);\n      expect(firstSubtype).toBe(secondSubtype);\n      expect(firstFont).not.toBe(firstSubtype);\n    });","file":"unit/primitives_spec.js","skipped":false,"dir":"test"},{"name":"should create only one object for *empty* names and cache it","suites":["primitives","Name"],"line":35,"updatePoint":{"line":35,"column":68,"index":1549},"code":"    it(\"should create only one object for *empty* names and cache it\", function () {\n      const firstEmpty = Name.get(\"\");\n      const secondEmpty = Name.get(\"\");\n      const normalName = Name.get(\"string\");\n      expect(firstEmpty).toBe(secondEmpty);\n      expect(firstEmpty).not.toBe(normalName);\n    });","file":"unit/primitives_spec.js","skipped":false,"dir":"test"},{"name":"should not accept to create a non-string name","suites":["primitives","Name"],"line":42,"updatePoint":{"line":42,"column":53,"index":1842},"code":"    it(\"should not accept to create a non-string name\", function () {\n      expect(function () {\n        Name.get(123);\n      }).toThrow(new Error('Name: The \"name\" must be a string.'));\n    });","file":"unit/primitives_spec.js","skipped":false,"dir":"test"},{"name":"should retain the given cmd name","suites":["primitives","Cmd"],"line":49,"updatePoint":{"line":49,"column":40,"index":2062},"code":"    it(\"should retain the given cmd name\", function () {\n      const givenCmd = \"BT\";\n      const cmd = Cmd.get(givenCmd);\n      expect(cmd.cmd).toEqual(givenCmd);\n    });","file":"unit/primitives_spec.js","skipped":false,"dir":"test"},{"name":"should create only one object for a command and cache it","suites":["primitives","Cmd"],"line":54,"updatePoint":{"line":54,"column":64,"index":2258},"code":"    it(\"should create only one object for a command and cache it\", function () {\n      const firstBT = Cmd.get(\"BT\");\n      const secondBT = Cmd.get(\"BT\");\n      const firstET = Cmd.get(\"ET\");\n      const secondET = Cmd.get(\"ET\");\n      expect(firstBT).toBe(secondBT);\n      expect(firstET).toBe(secondET);\n      expect(firstBT).not.toBe(firstET);\n    });","file":"unit/primitives_spec.js","skipped":false,"dir":"test"},{"name":"should not accept to create a non-string cmd","suites":["primitives","Cmd"],"line":63,"updatePoint":{"line":63,"column":52,"index":2602},"code":"    it(\"should not accept to create a non-string cmd\", function () {\n      expect(function () {\n        Cmd.get(123);\n      }).toThrow(new Error('Cmd: The \"cmd\" must be a string.'));\n    });","file":"unit/primitives_spec.js","skipped":false,"dir":"test"},{"name":"should allow assigning an XRef table after creation","suites":["primitives","Dict"],"line":97,"updatePoint":{"line":97,"column":59,"index":3895},"code":"    it(\"should allow assigning an XRef table after creation\", function () {\n      const dict = new Dict(null);\n      expect(dict.xref).toEqual(null);\n      const xref = new XRefMock([]);\n      dict.assignXref(xref);\n      expect(dict.xref).toEqual(xref);\n    });","file":"unit/primitives_spec.js","skipped":false,"dir":"test"},{"name":"should return correct size","suites":["primitives","Dict"],"line":104,"updatePoint":{"line":104,"column":34,"index":4133},"code":"    it(\"should return correct size\", function () {\n      const dict = new Dict(null);\n      expect(dict.size).toEqual(0);\n      dict.set(\"Type\", Name.get(\"Page\"));\n      expect(dict.size).toEqual(1);\n      dict.set(\"Contents\", Ref.get(10, 0));\n      expect(dict.size).toEqual(2);\n    });","file":"unit/primitives_spec.js","skipped":false,"dir":"test"},{"name":"should return invalid values for unknown keys","suites":["primitives","Dict"],"line":112,"updatePoint":{"line":112,"column":53,"index":4440},"code":"    it(\"should return invalid values for unknown keys\", function () {\n      checkInvalidHasValues(emptyDict);\n      checkInvalidKeyValues(emptyDict);\n    });","file":"unit/primitives_spec.js","skipped":false,"dir":"test"},{"name":"should return correct value for stored Size key","suites":["primitives","Dict"],"line":116,"updatePoint":{"line":116,"column":55,"index":4600},"code":"    it(\"should return correct value for stored Size key\", function () {\n      expect(dictWithSizeKey.has(\"Size\")).toBeTruthy();\n      expect(dictWithSizeKey.get(\"Size\")).toEqual(storedSize);\n      expect(dictWithSizeKey.get(\"Prev\", \"Size\")).toEqual(storedSize);\n      expect(dictWithSizeKey.get(\"Prev\", \"Root\", \"Size\")).toEqual(storedSize);\n    });","file":"unit/primitives_spec.js","skipped":false,"dir":"test"},{"name":"should return invalid values for unknown keys when Size key is stored","suites":["primitives","Dict"],"line":122,"updatePoint":{"line":122,"column":77,"index":4971},"code":"    it(\"should return invalid values for unknown keys when Size key is stored\", function () {\n      checkInvalidHasValues(dictWithSizeKey);\n      checkInvalidKeyValues(dictWithSizeKey);\n    });","file":"unit/primitives_spec.js","skipped":false,"dir":"test"},{"name":"should not accept to set a non-string key","suites":["primitives","Dict"],"line":126,"updatePoint":{"line":126,"column":49,"index":5137},"code":"    it(\"should not accept to set a non-string key\", function () {\n      const dict = new Dict();\n      expect(function () {\n        dict.set(123, \"val\");\n      }).toThrow(new Error('Dict.set: The \"key\" must be a string.'));\n      expect(dict.has(123)).toBeFalsy();\n      checkInvalidKeyValues(dict);\n    });","file":"unit/primitives_spec.js","skipped":false,"dir":"test"},{"name":"should not accept to set a key with an undefined value","suites":["primitives","Dict"],"line":134,"updatePoint":{"line":134,"column":62,"index":5458},"code":"    it(\"should not accept to set a key with an undefined value\", function () {\n      const dict = new Dict();\n      expect(function () {\n        dict.set(\"Size\");\n      }).toThrow(new Error('Dict.set: The \"value\" cannot be undefined.'));\n      expect(dict.has(\"Size\")).toBeFalsy();\n      checkInvalidKeyValues(dict);\n    });","file":"unit/primitives_spec.js","skipped":false,"dir":"test"},{"name":"should return correct values for multiple stored keys","suites":["primitives","Dict"],"line":142,"updatePoint":{"line":142,"column":61,"index":5782},"code":"    it(\"should return correct values for multiple stored keys\", function () {\n      expect(dictWithManyKeys.has(\"FontFile\")).toBeTruthy();\n      expect(dictWithManyKeys.has(\"FontFile2\")).toBeTruthy();\n      expect(dictWithManyKeys.has(\"FontFile3\")).toBeTruthy();\n      expect(dictWithManyKeys.get(\"FontFile3\")).toEqual(testFontFile3);\n      expect(dictWithManyKeys.get(\"FontFile2\", \"FontFile3\")).toEqual(testFontFile2);\n      expect(dictWithManyKeys.get(\"FontFile\", \"FontFile2\", \"FontFile3\")).toEqual(testFontFile);\n    });","file":"unit/primitives_spec.js","skipped":false,"dir":"test"},{"name":"should asynchronously fetch unknown keys","suites":["primitives","Dict"],"line":150,"updatePoint":{"line":150,"column":48,"index":6293},"code":"    it(\"should asynchronously fetch unknown keys\", async function () {\n      const keyPromises = [dictWithManyKeys.getAsync(\"Size\"), dictWithSizeKey.getAsync(\"FontFile\", \"FontFile2\", \"FontFile3\")];\n      const values = await Promise.all(keyPromises);\n      expect(values[0]).toBeUndefined();\n      expect(values[1]).toBeUndefined();\n    });","file":"unit/primitives_spec.js","skipped":false,"dir":"test"},{"name":"should asynchronously fetch correct values for multiple stored keys","suites":["primitives","Dict"],"line":156,"updatePoint":{"line":156,"column":75,"index":6661},"code":"    it(\"should asynchronously fetch correct values for multiple stored keys\", async function () {\n      const keyPromises = [dictWithManyKeys.getAsync(\"FontFile3\"), dictWithManyKeys.getAsync(\"FontFile2\", \"FontFile3\"), dictWithManyKeys.getAsync(\"FontFile\", \"FontFile2\", \"FontFile3\")];\n      const values = await Promise.all(keyPromises);\n      expect(values[0]).toEqual(testFontFile3);\n      expect(values[1]).toEqual(testFontFile2);\n      expect(values[2]).toEqual(testFontFile);\n    });","file":"unit/primitives_spec.js","skipped":false,"dir":"test"},{"name":"should callback for each stored key","suites":["primitives","Dict"],"line":163,"updatePoint":{"line":163,"column":43,"index":7117},"code":"    it(\"should callback for each stored key\", function () {\n      const callbackSpy = jasmine.createSpy(\"spy on callback in dictionary\");\n      dictWithManyKeys.forEach(callbackSpy);\n      expect(callbackSpy).toHaveBeenCalled();\n      const callbackSpyCalls = callbackSpy.calls;\n      expect(callbackSpyCalls.argsFor(0)).toEqual([\"FontFile\", testFontFile]);\n      expect(callbackSpyCalls.argsFor(1)).toEqual([\"FontFile2\", testFontFile2]);\n      expect(callbackSpyCalls.argsFor(2)).toEqual([\"FontFile3\", testFontFile3]);\n      expect(callbackSpyCalls.count()).toEqual(3);\n    });","file":"unit/primitives_spec.js","skipped":false,"dir":"test"},{"name":"should handle keys pointing to indirect objects, both sync and async","suites":["primitives","Dict"],"line":173,"updatePoint":{"line":173,"column":76,"index":7729},"code":"    it(\"should handle keys pointing to indirect objects, both sync and async\", async function () {\n      const fontRef = Ref.get(1, 0);\n      const xref = new XRefMock([{\n        ref: fontRef,\n        data: testFontFile\n      }]);\n      const fontDict = new Dict(xref);\n      fontDict.set(\"FontFile\", fontRef);\n      expect(fontDict.getRaw(\"FontFile\")).toEqual(fontRef);\n      expect(fontDict.get(\"FontFile\", \"FontFile2\", \"FontFile3\")).toEqual(testFontFile);\n      const value = await fontDict.getAsync(\"FontFile\", \"FontFile2\", \"FontFile3\");\n      expect(value).toEqual(testFontFile);\n    });","file":"unit/primitives_spec.js","skipped":false,"dir":"test"},{"name":"should handle arrays containing indirect objects","suites":["primitives","Dict"],"line":186,"updatePoint":{"line":186,"column":56,"index":8302},"code":"    it(\"should handle arrays containing indirect objects\", function () {\n      const minCoordRef = Ref.get(1, 0);\n      const maxCoordRef = Ref.get(2, 0);\n      const minCoord = 0;\n      const maxCoord = 1;\n      const xref = new XRefMock([{\n        ref: minCoordRef,\n        data: minCoord\n      }, {\n        ref: maxCoordRef,\n        data: maxCoord\n      }]);\n      const xObjectDict = new Dict(xref);\n      xObjectDict.set(\"BBox\", [minCoord, maxCoord, minCoordRef, maxCoordRef]);\n      expect(xObjectDict.get(\"BBox\")).toEqual([minCoord, maxCoord, minCoordRef, maxCoordRef]);\n      expect(xObjectDict.getArray(\"BBox\")).toEqual([minCoord, maxCoord, minCoord, maxCoord]);\n    });","file":"unit/primitives_spec.js","skipped":false,"dir":"test"},{"name":"should get all key names","suites":["primitives","Dict"],"line":203,"updatePoint":{"line":203,"column":32,"index":8958},"code":"    it(\"should get all key names\", function () {\n      const expectedKeys = [\"FontFile\", \"FontFile2\", \"FontFile3\"];\n      const keys = dictWithManyKeys.getKeys();\n      expect(keys.sort()).toEqual(expectedKeys);\n    });","file":"unit/primitives_spec.js","skipped":false,"dir":"test"},{"name":"should get all raw values","suites":["primitives","Dict"],"line":208,"updatePoint":{"line":208,"column":33,"index":9179},"code":"    it(\"should get all raw values\", function () {\n      // Test direct objects:\n      const expectedRawValues1 = [testFontFile, testFontFile2, testFontFile3];\n      const rawValues1 = dictWithManyKeys.getRawValues();\n      expect(rawValues1.sort()).toEqual(expectedRawValues1);\n\n      // Test indirect objects:\n      const typeName = Name.get(\"Page\");\n      const resources = new Dict(null),\n        resourcesRef = Ref.get(5, 0);\n      const contents = new StringStream(\"data\"),\n        contentsRef = Ref.get(10, 0);\n      const xref = new XRefMock([{\n        ref: resourcesRef,\n        data: resources\n      }, {\n        ref: contentsRef,\n        data: contents\n      }]);\n      const dict = new Dict(xref);\n      dict.set(\"Type\", typeName);\n      dict.set(\"Resources\", resourcesRef);\n      dict.set(\"Contents\", contentsRef);\n      const expectedRawValues2 = [contentsRef, resourcesRef, typeName];\n      const rawValues2 = dict.getRawValues();\n      expect(rawValues2.sort()).toEqual(expectedRawValues2);\n    });","file":"unit/primitives_spec.js","skipped":false,"dir":"test"},{"name":"should create only one object for Dict.empty","suites":["primitives","Dict"],"line":235,"updatePoint":{"line":235,"column":52,"index":10212},"code":"    it(\"should create only one object for Dict.empty\", function () {\n      const firstDictEmpty = Dict.empty;\n      const secondDictEmpty = Dict.empty;\n      expect(firstDictEmpty).toBe(secondDictEmpty);\n      expect(firstDictEmpty).not.toBe(emptyDict);\n    });","file":"unit/primitives_spec.js","skipped":false,"dir":"test"},{"name":"should correctly merge dictionaries","suites":["primitives","Dict"],"line":241,"updatePoint":{"line":241,"column":43,"index":10465},"code":"    it(\"should correctly merge dictionaries\", function () {\n      const expectedKeys = [\"FontFile\", \"FontFile2\", \"FontFile3\", \"Size\"];\n      const fontFileDict = new Dict();\n      fontFileDict.set(\"FontFile\", \"Type1 font file\");\n      const mergedDict = Dict.merge({\n        xref: null,\n        dictArray: [dictWithManyKeys, dictWithSizeKey, fontFileDict]\n      });\n      const mergedKeys = mergedDict.getKeys();\n      expect(mergedKeys.sort()).toEqual(expectedKeys);\n      expect(mergedDict.get(\"FontFile\")).toEqual(testFontFile);\n    });","file":"unit/primitives_spec.js","skipped":false,"dir":"test"},{"name":"should correctly merge sub-dictionaries","suites":["primitives","Dict"],"line":253,"updatePoint":{"line":253,"column":47,"index":11009},"code":"    it(\"should correctly merge sub-dictionaries\", function () {\n      const localFontDict = new Dict();\n      localFontDict.set(\"F1\", \"Local font one\");\n      const globalFontDict = new Dict();\n      globalFontDict.set(\"F1\", \"Global font one\");\n      globalFontDict.set(\"F2\", \"Global font two\");\n      globalFontDict.set(\"F3\", \"Global font three\");\n      const localDict = new Dict();\n      localDict.set(\"Font\", localFontDict);\n      const globalDict = new Dict();\n      globalDict.set(\"Font\", globalFontDict);\n      const mergedDict = Dict.merge({\n        xref: null,\n        dictArray: [localDict, globalDict]\n      });\n      const mergedSubDict = Dict.merge({\n        xref: null,\n        dictArray: [localDict, globalDict],\n        mergeSubDicts: true\n      });\n      const mergedFontDict = mergedDict.get(\"Font\");\n      const mergedSubFontDict = mergedSubDict.get(\"Font\");\n      expect(mergedFontDict instanceof Dict).toEqual(true);\n      expect(mergedSubFontDict instanceof Dict).toEqual(true);\n      const mergedFontDictKeys = mergedFontDict.getKeys();\n      const mergedSubFontDictKeys = mergedSubFontDict.getKeys();\n      expect(mergedFontDictKeys).toEqual([\"F1\"]);\n      expect(mergedSubFontDictKeys).toEqual([\"F1\", \"F2\", \"F3\"]);\n      const mergedFontDictValues = mergedFontDict.getRawValues();\n      const mergedSubFontDictValues = mergedSubFontDict.getRawValues();\n      expect(mergedFontDictValues).toEqual([\"Local font one\"]);\n      expect(mergedSubFontDictValues).toEqual([\"Local font one\", \"Global font two\", \"Global font three\"]);\n    });","file":"unit/primitives_spec.js","skipped":false,"dir":"test"},{"name":"should get a string representation","suites":["primitives","Ref"],"line":288,"updatePoint":{"line":288,"column":42,"index":12599},"code":"    it(\"should get a string representation\", function () {\n      const nonZeroRef = Ref.get(4, 2);\n      expect(nonZeroRef.toString()).toEqual(\"4R2\");\n\n      // If the generation number is 0, a shorter representation is used.\n      const zeroRef = Ref.get(4, 0);\n      expect(zeroRef.toString()).toEqual(\"4R\");\n    });","file":"unit/primitives_spec.js","skipped":false,"dir":"test"},{"name":"should retain the stored values","suites":["primitives","Ref"],"line":296,"updatePoint":{"line":296,"column":39,"index":12915},"code":"    it(\"should retain the stored values\", function () {\n      const storedNum = 4;\n      const storedGen = 2;\n      const ref = Ref.get(storedNum, storedGen);\n      expect(ref.num).toEqual(storedNum);\n      expect(ref.gen).toEqual(storedGen);\n    });","file":"unit/primitives_spec.js","skipped":false,"dir":"test"},{"name":"should create only one object for a reference and cache it","suites":["primitives","Ref"],"line":303,"updatePoint":{"line":303,"column":66,"index":13193},"code":"    it(\"should create only one object for a reference and cache it\", function () {\n      const firstRef = Ref.get(4, 2);\n      const secondRef = Ref.get(4, 2);\n      const firstOtherRef = Ref.get(5, 2);\n      const secondOtherRef = Ref.get(5, 2);\n      expect(firstRef).toBe(secondRef);\n      expect(firstOtherRef).toBe(secondOtherRef);\n      expect(firstRef).not.toBe(firstOtherRef);\n    });","file":"unit/primitives_spec.js","skipped":false,"dir":"test"},{"name":"should have a stored value","suites":["primitives","RefSet"],"line":323,"updatePoint":{"line":323,"column":34,"index":13794},"code":"    it(\"should have a stored value\", function () {\n      refSet.put(ref1);\n      expect(refSet.has(ref1)).toBeTruthy();\n    });","file":"unit/primitives_spec.js","skipped":false,"dir":"test"},{"name":"should not have an unknown value","suites":["primitives","RefSet"],"line":327,"updatePoint":{"line":327,"column":40,"index":13928},"code":"    it(\"should not have an unknown value\", function () {\n      expect(refSet.has(ref1)).toBeFalsy();\n      refSet.put(ref1);\n      expect(refSet.has(ref2)).toBeFalsy();\n    });","file":"unit/primitives_spec.js","skipped":false,"dir":"test"},{"name":"should support iteration","suites":["primitives","RefSet"],"line":332,"updatePoint":{"line":332,"column":32,"index":14097},"code":"    it(\"should support iteration\", function () {\n      refSet.put(ref1);\n      refSet.put(ref2);\n      expect([...refSet]).toEqual([ref1.toString(), ref2.toString()]);\n    });","file":"unit/primitives_spec.js","skipped":false,"dir":"test"},{"name":"should put, have and get a value","suites":["primitives","RefSetCache"],"line":350,"updatePoint":{"line":350,"column":40,"index":14588},"code":"    it(\"should put, have and get a value\", function () {\n      cache.put(ref1, obj1);\n      expect(cache.has(ref1)).toBeTruthy();\n      expect(cache.has(ref2)).toBeFalsy();\n      expect(cache.get(ref1)).toBe(obj1);\n    });","file":"unit/primitives_spec.js","skipped":false,"dir":"test"},{"name":"should put, have and get a value by alias","suites":["primitives","RefSetCache"],"line":356,"updatePoint":{"line":356,"column":49,"index":14820},"code":"    it(\"should put, have and get a value by alias\", function () {\n      cache.put(ref1, obj1);\n      cache.putAlias(ref2, ref1);\n      expect(cache.has(ref1)).toBeTruthy();\n      expect(cache.has(ref2)).toBeTruthy();\n      expect(cache.get(ref1)).toBe(obj1);\n      expect(cache.get(ref2)).toBe(obj1);\n    });","file":"unit/primitives_spec.js","skipped":false,"dir":"test"},{"name":"should report the size of the cache","suites":["primitives","RefSetCache"],"line":364,"updatePoint":{"line":364,"column":43,"index":15123},"code":"    it(\"should report the size of the cache\", function () {\n      cache.put(ref1, obj1);\n      expect(cache.size).toEqual(1);\n      cache.put(ref2, obj2);\n      expect(cache.size).toEqual(2);\n    });","file":"unit/primitives_spec.js","skipped":false,"dir":"test"},{"name":"should clear the cache","suites":["primitives","RefSetCache"],"line":370,"updatePoint":{"line":370,"column":30,"index":15310},"code":"    it(\"should clear the cache\", function () {\n      cache.put(ref1, obj1);\n      expect(cache.size).toEqual(1);\n      cache.clear();\n      expect(cache.size).toEqual(0);\n    });","file":"unit/primitives_spec.js","skipped":false,"dir":"test"},{"name":"should support iteration","suites":["primitives","RefSetCache"],"line":376,"updatePoint":{"line":376,"column":32,"index":15491},"code":"    it(\"should support iteration\", function () {\n      cache.put(ref1, obj1);\n      cache.put(ref2, obj2);\n      expect([...cache]).toEqual([obj1, obj2]);\n    });","file":"unit/primitives_spec.js","skipped":false,"dir":"test"},{"name":"handles non-names","suites":["primitives","isName"],"line":385,"updatePoint":{"line":385,"column":25,"index":15735},"code":"    it(\"handles non-names\", function () {\n      const nonName = {};\n      expect(isName(nonName)).toEqual(false);\n    });","file":"unit/primitives_spec.js","skipped":false,"dir":"test"},{"name":"handles names","suites":["primitives","isName"],"line":389,"updatePoint":{"line":389,"column":21,"index":15853},"code":"    it(\"handles names\", function () {\n      const name = Name.get(\"Font\");\n      expect(isName(name)).toEqual(true);\n    });","file":"unit/primitives_spec.js","skipped":false,"dir":"test"},{"name":"handles names with name check","suites":["primitives","isName"],"line":393,"updatePoint":{"line":393,"column":37,"index":15994},"code":"    it(\"handles names with name check\", function () {\n      const name = Name.get(\"Font\");\n      expect(isName(name, \"Font\")).toEqual(true);\n      expect(isName(name, \"Subtype\")).toEqual(false);\n    });","file":"unit/primitives_spec.js","skipped":false,"dir":"test"},{"name":"handles *empty* names, with name check","suites":["primitives","isName"],"line":398,"updatePoint":{"line":398,"column":46,"index":16206},"code":"    it(\"handles *empty* names, with name check\", function () {\n      const emptyName = Name.get(\"\");\n      expect(isName(emptyName)).toEqual(true);\n      expect(isName(emptyName, \"\")).toEqual(true);\n      expect(isName(emptyName, \"string\")).toEqual(false);\n    });","file":"unit/primitives_spec.js","skipped":false,"dir":"test"},{"name":"handles non-commands","suites":["primitives","isCmd"],"line":411,"updatePoint":{"line":411,"column":28,"index":16587},"code":"    it(\"handles non-commands\", function () {\n      const nonCmd = {};\n      expect(isCmd(nonCmd)).toEqual(false);\n    });","file":"unit/primitives_spec.js","skipped":false,"dir":"test"},{"name":"handles commands","suites":["primitives","isCmd"],"line":415,"updatePoint":{"line":415,"column":24,"index":16705},"code":"    it(\"handles commands\", function () {\n      const cmd = Cmd.get(\"BT\");\n      expect(isCmd(cmd)).toEqual(true);\n    });","file":"unit/primitives_spec.js","skipped":false,"dir":"test"},{"name":"handles commands with cmd check","suites":["primitives","isCmd"],"line":419,"updatePoint":{"line":419,"column":39,"index":16842},"code":"    it(\"handles commands with cmd check\", function () {\n      const cmd = Cmd.get(\"BT\");\n      expect(isCmd(cmd, \"BT\")).toEqual(true);\n      expect(isCmd(cmd, \"ET\")).toEqual(false);\n    });","file":"unit/primitives_spec.js","skipped":false,"dir":"test"},{"name":"handles non-dictionaries","suites":["primitives","isDict"],"line":431,"updatePoint":{"line":431,"column":32,"index":17160},"code":"    it(\"handles non-dictionaries\", function () {\n      const nonDict = {};\n      expect(isDict(nonDict)).toEqual(false);\n    });","file":"unit/primitives_spec.js","skipped":false,"dir":"test"},{"name":"handles empty dictionaries with type check","suites":["primitives","isDict"],"line":435,"updatePoint":{"line":435,"column":50,"index":17307},"code":"    it(\"handles empty dictionaries with type check\", function () {\n      const dict = Dict.empty;\n      expect(isDict(dict)).toEqual(true);\n      expect(isDict(dict, \"Page\")).toEqual(false);\n    });","file":"unit/primitives_spec.js","skipped":false,"dir":"test"},{"name":"handles dictionaries with type check","suites":["primitives","isDict"],"line":440,"updatePoint":{"line":440,"column":44,"index":17500},"code":"    it(\"handles dictionaries with type check\", function () {\n      const dict = new Dict();\n      dict.set(\"Type\", Name.get(\"Page\"));\n      expect(isDict(dict, \"Page\")).toEqual(true);\n      expect(isDict(dict, \"Contents\")).toEqual(false);\n    });","file":"unit/primitives_spec.js","skipped":false,"dir":"test"},{"name":"should handle Refs pointing to the same object","suites":["primitives","isRefsEqual"],"line":451,"updatePoint":{"line":451,"column":54,"index":17850},"code":"    it(\"should handle Refs pointing to the same object\", function () {\n      const ref1 = Ref.get(1, 0);\n      const ref2 = Ref.get(1, 0);\n      expect(isRefsEqual(ref1, ref2)).toEqual(true);\n    });","file":"unit/primitives_spec.js","skipped":false,"dir":"test"},{"name":"should handle Refs pointing to different objects","suites":["primitives","isRefsEqual"],"line":456,"updatePoint":{"line":456,"column":56,"index":18052},"code":"    it(\"should handle Refs pointing to different objects\", function () {\n      const ref1 = Ref.get(1, 0);\n      const ref2 = Ref.get(2, 0);\n      expect(isRefsEqual(ref1, ref2)).toEqual(false);\n    });","file":"unit/primitives_spec.js","skipped":false,"dir":"test"},{"name":"should send a value, execute an action and get back a new value","suites":["Scripting","Sandbox"],"line":79,"updatePoint":{"line":79,"column":71,"index":2501},"code":"    it(\"should send a value, execute an action and get back a new value\", async () => {\n      function compute(n) {\n        let s = 0;\n        for (let i = 0; i < n; i++) {\n          s += i;\n        }\n        return s;\n      }\n      const number = 123;\n      const expected = (number - 1) * number / 2;\n      const refId = getId();\n      const data = {\n        objects: {\n          field: [{\n            id: refId,\n            value: \"\",\n            actions: {\n              Keystroke: [`${compute.toString()}event.value = compute(parseInt(event.value));`]\n            },\n            type: \"text\"\n          }]\n        },\n        calculationOrder: [],\n        appInfo: {\n          language: \"en-US\",\n          platform: \"Linux x86_64\"\n        }\n      };\n      sandbox.createSandbox(data);\n      await sandbox.dispatchEventInSandbox({\n        id: refId,\n        value: `${number}`,\n        name: \"Keystroke\",\n        willCommit: true\n      });\n      expect(send_queue.has(refId)).toEqual(true);\n      expect(send_queue.get(refId)).toEqual({\n        id: refId,\n        siblings: null,\n        value: expected,\n        formattedValue: null\n      });\n    });","file":"unit/scripting_spec.js","skipped":false,"dir":"test"},{"name":"should treat globalThis as the doc","suites":["Scripting","Doc"],"line":124,"updatePoint":{"line":124,"column":42,"index":3664},"code":"    it(\"should treat globalThis as the doc\", async () => {\n      const refId = getId();\n      const data = {\n        objects: {\n          field: [{\n            id: refId,\n            value: \"\",\n            actions: {},\n            type: \"text\"\n          }]\n        },\n        appInfo: {\n          language: \"en-US\",\n          platform: \"Linux x86_64\"\n        },\n        calculationOrder: [],\n        dispatchEventName: \"_dispatchMe\"\n      };\n      sandbox.createSandbox(data);\n      await myeval(`(this.foobar = 123456, 0)`);\n      const value = await myeval(`this.getField(\"field\").doc.foobar`);\n      expect(value).toEqual(123456);\n    });","file":"unit/scripting_spec.js","skipped":false,"dir":"test"},{"name":"should get field using a path","suites":["Scripting","Doc"],"line":147,"updatePoint":{"line":147,"column":37,"index":4301},"code":"    it(\"should get field using a path\", async () => {\n      const base = value => {\n        return {\n          id: getId(),\n          value,\n          actions: {},\n          type: \"text\"\n        };\n      };\n      const data = {\n        objects: {\n          A: [base(1)],\n          \"A.B\": [base(2)],\n          \"A.B.C\": [base(3)],\n          \"A.B.C.D\": [base(4)],\n          \"A.B.C.D.E\": [base(5)],\n          \"A.B.C.D.E.F\": [base(6)],\n          \"A.B.C.D.G\": [base(7)],\n          C: [base(8)]\n        },\n        appInfo: {\n          language: \"en-US\",\n          platform: \"Linux x86_64\"\n        },\n        calculationOrder: [],\n        dispatchEventName: \"_dispatchMe\"\n      };\n      sandbox.createSandbox(data);\n      let value = await myeval(`this.getField(\"A\").value`);\n      expect(value).toEqual(1);\n      value = await myeval(`this.getField(\"B.C\").value`);\n      expect(value).toEqual(3);\n\n      // path has been cached so try again\n      value = await myeval(`this.getField(\"B.C\").value`);\n      expect(value).toEqual(3);\n      value = await myeval(`this.getField(\"B.C.D#0\").value`);\n      expect(value).toEqual(5);\n      value = await myeval(`this.getField(\"B.C.D#1\").value`);\n      expect(value).toEqual(7);\n      value = await myeval(`this.getField(\"C\").value`);\n      expect(value).toEqual(8);\n      value = await myeval(`this.getField(\"A.B.C.D\").getArray().map((x) => x.value)`);\n      expect(value).toEqual([4, 5, 6, 7]);\n    });","file":"unit/scripting_spec.js","skipped":false,"dir":"test"},{"name":"should print a date according to a format","suites":["Scripting","Util","printd"],"line":205,"updatePoint":{"line":205,"column":51,"index":6049},"code":"      it(\"should print a date according to a format\", async () => {\n        const date = `new Date(\"Sun Apr 15 2007 03:14:15\")`;\n        let value = await myeval(`util.printd(0, ${date})`);\n        expect(value).toEqual(\"D:20070415031415\");\n        value = await myeval(`util.printd(1, ${date})`);\n        expect(value).toEqual(\"2007.04.15 03:14:15\");\n        value = await myeval(`util.printd(2, ${date})`);\n        expect(value).toEqual(\"4/15/07 3:14:15 am\");\n        value = await myeval(`util.printd(\"mmmm mmm mm m\", ${date})`);\n        expect(value).toEqual(\"April Apr 04 4\");\n        value = await myeval(`util.printd(\"dddd ddd dd d\", ${date})`);\n        expect(value).toEqual(\"Sunday Sun 15 15\");\n      });","file":"unit/scripting_spec.js","skipped":false,"dir":"test"},{"name":"should parse a date according to a format","suites":["Scripting","Util","scand"],"line":220,"updatePoint":{"line":220,"column":51,"index":6807},"code":"      it(\"should parse a date according to a format\", async () => {\n        const date = new Date(\"Sun Apr 15 2007 03:14:15\");\n        let value = await myeval(`util.scand(0, \"D:20070415031415\").toString()`);\n        expect(new Date(value)).toEqual(date);\n        value = await myeval(`util.scand(1, \"2007.04.15 03:14:15\").toString()`);\n        expect(new Date(value)).toEqual(date);\n        value = await myeval(`util.scand(2, \"4/15/07 3:14:15 am\").toString()`);\n        expect(new Date(value)).toEqual(date);\n      });","file":"unit/scripting_spec.js","skipped":false,"dir":"test"},{"name":"should print some data according to a format","suites":["Scripting","Util","printf"],"line":231,"updatePoint":{"line":231,"column":54,"index":7376},"code":"      it(\"should print some data according to a format\", async () => {\n        let value = await myeval(`util.printf(\"Integer numbers: %d, %d,...\", 1.234, 56.789)`);\n        expect(value).toEqual(\"Integer numbers: 1, 56,...\");\n        value = await myeval(`util.printf(\"Hex numbers: %x, %x,...\", 1234, 56789)`);\n        expect(value).toEqual(\"Hex numbers: 4D2, DDD5,...\");\n        value = await myeval(`util.printf(\"Hex numbers with 0x: %#x, %#x,...\", 1234, 56789)`);\n        expect(value).toEqual(\"Hex numbers with 0x: 0x4D2, 0xDDD5,...\");\n        value = await myeval(`util.printf(\"Decimal number: %,0+.3f\", 1234567.89123)`);\n        expect(value).toEqual(\"Decimal number: +1,234,567.891\");\n        value = await myeval(`util.printf(\"Decimal number: %,0+8.3f\", 1.234567)`);\n        expect(value).toEqual(\"Decimal number: +  1.235\");\n        value = await myeval(`util.printf(\"Decimal number: %,0.2f\", -12.34567)`);\n        expect(value).toEqual(\"Decimal number: -12.35\");\n        value = await myeval(`util.printf(\"Decimal number: %,0.0f\", 4.95)`);\n        expect(value).toEqual(\"Decimal number: 5\");\n        value = await myeval(`util.printf(\"Decimal number: %,0.0f\", 4.49)`);\n        expect(value).toEqual(\"Decimal number: 4\");\n        value = await myeval(`util.printf(\"Decimal number: %,0.0f\", -4.95)`);\n        expect(value).toEqual(\"Decimal number: -5\");\n        value = await myeval(`util.printf(\"Decimal number: %,0.0f\", -4.49)`);\n        expect(value).toEqual(\"Decimal number: -4\");\n      });","file":"unit/scripting_spec.js","skipped":false,"dir":"test"},{"name":"should print a string with no argument","suites":["Scripting","Util","printf"],"line":253,"updatePoint":{"line":253,"column":48,"index":8874},"code":"      it(\"should print a string with no argument\", async () => {\n        const value = await myeval(`util.printf(\"hello world\")`);\n        expect(value).toEqual(\"hello world\");\n      });","file":"unit/scripting_spec.js","skipped":false,"dir":"test"},{"name":"print a string with a percent","suites":["Scripting","Util","printf"],"line":257,"updatePoint":{"line":257,"column":39,"index":9052},"code":"      it(\"print a string with a percent\", async () => {\n        const value = await myeval(`util.printf(\"%%s\")`);\n        expect(value).toEqual(\"%%s\");\n      });","file":"unit/scripting_spec.js","skipped":false,"dir":"test"},{"name":"should print some data according to a format","suites":["Scripting","Util","printx"],"line":263,"updatePoint":{"line":263,"column":54,"index":9274},"code":"      it(\"should print some data according to a format\", async () => {\n        const value = await myeval(`util.printx(\"9 (999) 999-9999\", \"aaa14159697489zzz\")`);\n        expect(value).toEqual(\"1 (415) 969-7489\");\n      });","file":"unit/scripting_spec.js","skipped":false,"dir":"test"},{"name":"should trigger an event and modify the source","suites":["Scripting","Events"],"line":270,"updatePoint":{"line":270,"column":53,"index":9546},"code":"    it(\"should trigger an event and modify the source\", async () => {\n      const refId = getId();\n      const data = {\n        objects: {\n          field: [{\n            id: refId,\n            value: \"\",\n            actions: {\n              test: [`event.source.value = \"123\";`]\n            },\n            type: \"text\"\n          }]\n        },\n        appInfo: {\n          language: \"en-US\",\n          platform: \"Linux x86_64\"\n        },\n        calculationOrder: []\n      };\n      sandbox.createSandbox(data);\n      await sandbox.dispatchEventInSandbox({\n        id: refId,\n        value: \"\",\n        name: \"test\",\n        willCommit: true\n      });\n      expect(send_queue.has(refId)).toEqual(true);\n      expect(send_queue.get(refId)).toEqual({\n        id: refId,\n        value: \"123\"\n      });\n    });","file":"unit/scripting_spec.js","skipped":false,"dir":"test"},{"name":"should trigger a Keystroke event and invalidate it","suites":["Scripting","Events"],"line":302,"updatePoint":{"line":302,"column":58,"index":10357},"code":"    it(\"should trigger a Keystroke event and invalidate it\", async () => {\n      const refId = getId();\n      const data = {\n        objects: {\n          field: [{\n            id: refId,\n            value: \"\",\n            actions: {\n              Keystroke: [`event.rc = false;`]\n            },\n            type: \"text\"\n          }]\n        },\n        appInfo: {\n          language: \"en-US\",\n          platform: \"Linux x86_64\"\n        },\n        calculationOrder: []\n      };\n      sandbox.createSandbox(data);\n      await sandbox.dispatchEventInSandbox({\n        id: refId,\n        value: \"hell\",\n        name: \"Keystroke\",\n        willCommit: false,\n        change: \"o\",\n        selStart: 4,\n        selEnd: 4\n      });\n      expect(send_queue.has(refId)).toEqual(true);\n      expect(send_queue.get(refId)).toEqual({\n        id: refId,\n        siblings: null,\n        value: \"hell\",\n        selRange: [4, 4]\n      });\n    });","file":"unit/scripting_spec.js","skipped":false,"dir":"test"},{"name":"should trigger a Keystroke event and change it","suites":["Scripting","Events"],"line":339,"updatePoint":{"line":339,"column":54,"index":11281},"code":"    it(\"should trigger a Keystroke event and change it\", async () => {\n      const refId = getId();\n      const data = {\n        objects: {\n          field: [{\n            id: refId,\n            value: \"\",\n            actions: {\n              Keystroke: [`event.change = \"a\";`]\n            },\n            type: \"text\"\n          }]\n        },\n        appInfo: {\n          language: \"en-US\",\n          platform: \"Linux x86_64\"\n        },\n        calculationOrder: []\n      };\n      sandbox.createSandbox(data);\n      await sandbox.dispatchEventInSandbox({\n        id: refId,\n        value: \"hell\",\n        name: \"Keystroke\",\n        willCommit: false,\n        change: \"o\",\n        selStart: 4,\n        selEnd: 4\n      });\n      expect(send_queue.has(refId)).toEqual(true);\n      expect(send_queue.get(refId)).toEqual({\n        id: refId,\n        siblings: null,\n        value: \"hella\",\n        selRange: [5, 5]\n      });\n    });","file":"unit/scripting_spec.js","skipped":false,"dir":"test"},{"name":"should trigger an invalid commit Keystroke event","suites":["Scripting","Events"],"line":376,"updatePoint":{"line":376,"column":56,"index":12210},"code":"    it(\"should trigger an invalid commit Keystroke event\", async () => {\n      const refId = getId();\n      const data = {\n        objects: {\n          field: [{\n            id: refId,\n            value: \"\",\n            actions: {\n              test: [`event.rc = false;`]\n            },\n            type: \"text\"\n          }]\n        },\n        appInfo: {\n          language: \"en-US\",\n          platform: \"Linux x86_64\"\n        },\n        calculationOrder: []\n      };\n      sandbox.createSandbox(data);\n      await sandbox.dispatchEventInSandbox({\n        id: refId,\n        value: \"\",\n        name: \"test\",\n        willCommit: true\n      });\n      expect(send_queue.has(refId)).toEqual(false);\n    });","file":"unit/scripting_spec.js","skipped":false,"dir":"test"},{"name":"should trigger a valid commit Keystroke event","suites":["Scripting","Events"],"line":404,"updatePoint":{"line":404,"column":53,"index":12911},"code":"    it(\"should trigger a valid commit Keystroke event\", async () => {\n      const refId1 = getId();\n      const refId2 = getId();\n      const data = {\n        objects: {\n          field1: [{\n            id: refId1,\n            value: \"\",\n            actions: {\n              Validate: [`event.value = \"world\";`]\n            },\n            type: \"text\"\n          }],\n          field2: [{\n            id: refId2,\n            value: \"\",\n            actions: {\n              Calculate: [`event.value = \"hello\";`]\n            },\n            type: \"text\"\n          }]\n        },\n        appInfo: {\n          language: \"en-US\",\n          platform: \"Linux x86_64\"\n        },\n        calculationOrder: [refId2]\n      };\n      sandbox.createSandbox(data);\n      await sandbox.dispatchEventInSandbox({\n        id: refId1,\n        value: \"hello\",\n        name: \"Keystroke\",\n        willCommit: true\n      });\n      expect(send_queue.has(refId1)).toEqual(true);\n      expect(send_queue.get(refId1)).toEqual({\n        id: refId1,\n        siblings: null,\n        value: \"world\",\n        formattedValue: null\n      });\n    });","file":"unit/scripting_spec.js","skipped":false,"dir":"test"},{"name":"should convert RGB color for different color spaces","suites":["Scripting","Color"],"line":462,"updatePoint":{"line":462,"column":59,"index":14404},"code":"    it(\"should convert RGB color for different color spaces\", async () => {\n      let value = await myeval(`color.convert([\"RGB\", 0.1, 0.2, 0.3], \"T\")`);\n      expect(round(value)).toEqual([\"T\"]);\n      value = await myeval(`color.convert([\"RGB\", 0.1, 0.2, 0.3], \"G\")`);\n      expect(round(value)).toEqual([\"G\", 0.181]);\n      value = await myeval(`color.convert([\"RGB\", 0.1, 0.2, 0.3], \"RGB\")`);\n      expect(round(value)).toEqual([\"RGB\", 0.1, 0.2, 0.3]);\n      value = await myeval(`color.convert([\"RGB\", 0.1, 0.2, 0.3], \"CMYK\")`);\n      expect(round(value)).toEqual([\"CMYK\", 0.9, 0.8, 0.7, 0.7]);\n    });","file":"unit/scripting_spec.js","skipped":false,"dir":"test"},{"name":"should convert CMYK color for different color spaces","suites":["Scripting","Color"],"line":472,"updatePoint":{"line":472,"column":60,"index":15013},"code":"    it(\"should convert CMYK color for different color spaces\", async () => {\n      let value = await myeval(`color.convert([\"CMYK\", 0.1, 0.2, 0.3, 0.4], \"T\")`);\n      expect(round(value)).toEqual([\"T\"]);\n      value = await myeval(`color.convert([\"CMYK\", 0.1, 0.2, 0.3, 0.4], \"G\")`);\n      expect(round(value)).toEqual([\"G\", 0.371]);\n      value = await myeval(`color.convert([\"CMYK\", 0.1, 0.2, 0.3, 0.4], \"RGB\")`);\n      expect(round(value)).toEqual([\"RGB\", 0.5, 0.3, 0.4]);\n      value = await myeval(`color.convert([\"CMYK\", 0.1, 0.2, 0.3, 0.4], \"CMYK\")`);\n      expect(round(value)).toEqual([\"CMYK\", 0.1, 0.2, 0.3, 0.4]);\n    });","file":"unit/scripting_spec.js","skipped":false,"dir":"test"},{"name":"should convert Gray color for different color spaces","suites":["Scripting","Color"],"line":482,"updatePoint":{"line":482,"column":60,"index":15646},"code":"    it(\"should convert Gray color for different color spaces\", async () => {\n      let value = await myeval(`color.convert([\"G\", 0.1], \"T\")`);\n      expect(round(value)).toEqual([\"T\"]);\n      value = await myeval(`color.convert([\"G\", 0.1], \"G\")`);\n      expect(round(value)).toEqual([\"G\", 0.1]);\n      value = await myeval(`color.convert([\"G\", 0.1], \"RGB\")`);\n      expect(round(value)).toEqual([\"RGB\", 0.1, 0.1, 0.1]);\n      value = await myeval(`color.convert([\"G\", 0.1], \"CMYK\")`);\n      expect(round(value)).toEqual([\"CMYK\", 0, 0, 0, 0.9]);\n    });","file":"unit/scripting_spec.js","skipped":false,"dir":"test"},{"name":"should convert Transparent color for different color spaces","suites":["Scripting","Color"],"line":492,"updatePoint":{"line":492,"column":67,"index":16206},"code":"    it(\"should convert Transparent color for different color spaces\", async () => {\n      let value = await myeval(`color.convert([\"T\"], \"T\")`);\n      expect(round(value)).toEqual([\"T\"]);\n      value = await myeval(`color.convert([\"T\"], \"G\")`);\n      expect(round(value)).toEqual([\"G\", 0]);\n      value = await myeval(`color.convert([\"T\"], \"RGB\")`);\n      expect(round(value)).toEqual([\"RGB\", 0, 0, 0]);\n      value = await myeval(`color.convert([\"T\"], \"CMYK\")`);\n      expect(round(value)).toEqual([\"CMYK\", 0, 0, 0, 1]);\n    });","file":"unit/scripting_spec.js","skipped":false,"dir":"test"},{"name":"should test language","suites":["Scripting","App"],"line":514,"updatePoint":{"line":514,"column":28,"index":16955},"code":"    it(\"should test language\", async () => {\n      let value = await myeval(`app.language`);\n      expect(value).toEqual(\"ENU\");\n      value = await myeval(`app.language = \"hello\"`);\n      expect(value).toEqual(\"app.language is read-only\");\n    });","file":"unit/scripting_spec.js","skipped":false,"dir":"test"},{"name":"should test platform","suites":["Scripting","App"],"line":520,"updatePoint":{"line":520,"column":28,"index":17204},"code":"    it(\"should test platform\", async () => {\n      let value = await myeval(`app.platform`);\n      expect(value).toEqual(\"UNIX\");\n      value = await myeval(`app.platform = \"hello\"`);\n      expect(value).toEqual(\"app.platform is read-only\");\n    });","file":"unit/scripting_spec.js","skipped":false,"dir":"test"},{"name":"should parse a date with a format","suites":["Scripting","AForm","AFParseDateEx"],"line":540,"updatePoint":{"line":540,"column":43,"index":17815},"code":"      it(\"should parse a date with a format\", async () => {\n        const check = async (date, format, expected) => {\n          const value = await myeval(`AFParseDateEx(\"${date}\", \"${format}\").toISOString().replace(/T.*$/, \"\")`);\n          expect(value).toEqual(new Date(expected).toISOString().replace(/T.*$/, \"\"));\n        };\n        await check(\"05\", \"dd\", \"2000/01/05\");\n        await check(\"12\", \"mm\", \"2000/12/01\");\n        await check(\"2022\", \"yyyy\", \"2022/01/01\");\n        await check(\"a1$9bbbb21\", \"dd/mm/yyyy\", \"2021/09/01\");\n\n        // The following test isn't working as expected because\n        // the quickjs date parser has been replaced by the browser one\n        // and the date \"1.9.2021\" is valid in Chrome but not in Firefox.\n        // The supported date format is not specified...\n        // await check(\"1.9.2021\", \"dd/mm/yyyy\", \"2021/09/01\");\n      });","file":"unit/scripting_spec.js","skipped":false,"dir":"test"},{"name":"should extract numbers","suites":["Scripting","AForm","AFExtractNums"],"line":559,"updatePoint":{"line":559,"column":32,"index":18736},"code":"      it(\"should extract numbers\", async () => {\n        let value = await myeval(`AFExtractNums(\"123 456 789\")`);\n        expect(value).toEqual([\"123\", \"456\", \"789\"]);\n        value = await myeval(`AFExtractNums(\"123.456\")`);\n        expect(value).toEqual([\"123\", \"456\"]);\n        value = await myeval(`AFExtractNums(\"123\")`);\n        expect(value).toEqual([\"123\"]);\n        value = await myeval(`AFExtractNums(\".123\")`);\n        expect(value).toEqual([\"0\", \"123\"]);\n        value = await myeval(`AFExtractNums(\",123\")`);\n        expect(value).toEqual([\"0\", \"123\"]);\n      });","file":"unit/scripting_spec.js","skipped":false,"dir":"test"},{"name":"should convert string to number","suites":["Scripting","AForm","AFMakeNumber"],"line":573,"updatePoint":{"line":573,"column":41,"index":19374},"code":"      it(\"should convert string to number\", async () => {\n        let value = await myeval(`AFMakeNumber(\"123.456\")`);\n        expect(value).toEqual(123.456);\n        value = await myeval(`AFMakeNumber(123.456)`);\n        expect(value).toEqual(123.456);\n        value = await myeval(`AFMakeNumber(\"-123.456\")`);\n        expect(value).toEqual(-123.456);\n        value = await myeval(`AFMakeNumber(\"-123,456\")`);\n        expect(value).toEqual(-123.456);\n        value = await myeval(`AFMakeNumber(\"not a number\")`);\n        expect(value).toEqual(null);\n      });","file":"unit/scripting_spec.js","skipped":false,"dir":"test"},{"name":"should split a string into an array of strings","suites":["Scripting","AForm","AFMakeArrayFromList"],"line":587,"updatePoint":{"line":587,"column":56,"index":20008},"code":"      it(\"should split a string into an array of strings\", async () => {\n        const value = await myeval(`AFMakeArrayFromList(\"aaaa,  bbbbbbb,cc,ddd, e\")`);\n        expect(value).toEqual([\"aaaa\", \" bbbbbbb\", \"cc\", \"ddd\", \"e\"]);\n      });","file":"unit/scripting_spec.js","skipped":false,"dir":"test"},{"name":"should format a number","suites":["Scripting","AForm","AFNumber_format"],"line":593,"updatePoint":{"line":593,"column":32,"index":20279},"code":"      it(\"should format a number\", async () => {\n        const refId = getId();\n        const data = {\n          objects: {\n            field: [{\n              id: refId,\n              value: \"\",\n              actions: {\n                test1: [`AFNumber_Format(2, 0, 0, 0, \"€\", false);` + `event.source.value = event.value;`],\n                test2: [`AFNumber_Format(1, 3, 0, 0, \"$\", true);` + `event.source.value = event.value;`],\n                test3: [`AFNumber_Format(2, 0, 1, 0, \"€\", false);` + `event.source.value = event.value;`],\n                test4: [`AFNumber_Format(2, 0, 2, 0, \"€\", false);` + `event.source.value = event.value;`],\n                test5: [`AFNumber_Format(2, 0, 3, 0, \"€\", false);` + `event.source.value = event.value;`]\n              },\n              type: \"text\"\n            }]\n          },\n          appInfo: {\n            language: \"en-US\",\n            platform: \"Linux x86_64\"\n          },\n          calculationOrder: [],\n          dispatchEventName: \"_dispatchMe\"\n        };\n        sandbox.createSandbox(data);\n        await sandbox.dispatchEventInSandbox({\n          id: refId,\n          value: \"123456.789\",\n          name: \"test1\"\n        });\n        expect(send_queue.has(refId)).toEqual(true);\n        expect(send_queue.get(refId)).toEqual({\n          id: refId,\n          value: \"123,456.79€\"\n        });\n        send_queue.delete(refId);\n        await sandbox.dispatchEventInSandbox({\n          id: refId,\n          value: \"223456.789\",\n          name: \"test2\"\n        });\n        expect(send_queue.has(refId)).toEqual(true);\n        expect(send_queue.get(refId)).toEqual({\n          id: refId,\n          value: \"$223456,8\"\n        });\n        send_queue.delete(refId);\n        await sandbox.dispatchEventInSandbox({\n          id: refId,\n          value: \"-323456.789\",\n          name: \"test3\"\n        });\n        expect(send_queue.has(refId)).toEqual(true);\n        expect(send_queue.get(refId)).toEqual({\n          id: refId,\n          value: \"323,456.79€\",\n          textColor: [\"RGB\", 1, 0, 0]\n        });\n        send_queue.delete(refId);\n        await sandbox.dispatchEventInSandbox({\n          id: refId,\n          value: \"-423456.789\",\n          name: \"test4\"\n        });\n        expect(send_queue.has(refId)).toEqual(true);\n        expect(send_queue.get(refId)).toEqual({\n          id: refId,\n          value: \"(423,456.79€)\"\n        });\n        send_queue.delete(refId);\n        await sandbox.dispatchEventInSandbox({\n          id: refId,\n          value: \"-52345.678\",\n          name: \"test5\"\n        });\n        expect(send_queue.has(refId)).toEqual(true);\n        expect(send_queue.get(refId)).toEqual({\n          id: refId,\n          value: \"(52,345.68€)\",\n          textColor: [\"RGB\", 1, 0, 0]\n        });\n      });","file":"unit/scripting_spec.js","skipped":false,"dir":"test"},{"name":"should validate a number on a keystroke event","suites":["Scripting","AForm","AFNumber_Keystroke"],"line":677,"updatePoint":{"line":677,"column":55,"index":23137},"code":"      it(\"should validate a number on a keystroke event\", async () => {\n        const refId = getId();\n        const data = {\n          objects: {\n            field: [{\n              id: refId,\n              value: \"\",\n              actions: {\n                Validate: [`AFNumber_Keystroke(null, 0, null, null, null, null);`]\n              },\n              type: \"text\",\n              name: \"MyField\"\n            }]\n          },\n          appInfo: {\n            language: \"en-US\",\n            platform: \"Linux x86_64\"\n          },\n          calculationOrder: [],\n          dispatchEventName: \"_dispatchMe\"\n        };\n        sandbox.createSandbox(data);\n        await sandbox.dispatchEventInSandbox({\n          id: refId,\n          value: \"123456.789\",\n          name: \"Keystroke\",\n          willCommit: true\n        });\n        expect(send_queue.has(refId)).toEqual(true);\n        expect(send_queue.get(refId)).toEqual({\n          id: refId,\n          siblings: null,\n          value: \"123456.789\",\n          formattedValue: null\n        });\n      });","file":"unit/scripting_spec.js","skipped":false,"dir":"test"},{"name":"should not validate a number on a keystroke event","suites":["Scripting","AForm","AFNumber_Keystroke"],"line":713,"updatePoint":{"line":713,"column":59,"index":24195},"code":"      it(\"should not validate a number on a keystroke event\", async () => {\n        const refId = getId();\n        const data = {\n          objects: {\n            field: [{\n              id: refId,\n              value: \"\",\n              actions: {\n                Validate: [`AFNumber_Keystroke(null, 0, null, null, null, null);`]\n              },\n              type: \"text\",\n              name: \"MyField\"\n            }]\n          },\n          appInfo: {\n            language: \"en-US\",\n            platform: \"Linux x86_64\"\n          },\n          calculationOrder: [],\n          dispatchEventName: \"_dispatchMe\"\n        };\n        sandbox.createSandbox(data);\n        await sandbox.dispatchEventInSandbox({\n          id: refId,\n          value: \"123s456.789\",\n          name: \"Keystroke\",\n          willCommit: true\n        });\n        expect(send_queue.has(\"alert\")).toEqual(true);\n        expect(send_queue.get(\"alert\")).toEqual({\n          command: \"alert\",\n          value: \"The value entered does not match the format of the field [ MyField ]\"\n        });\n      });","file":"unit/scripting_spec.js","skipped":false,"dir":"test"},{"name":"should format a percentage","suites":["Scripting","AForm","AFPercent_Format"],"line":749,"updatePoint":{"line":749,"column":36,"index":25297},"code":"      it(\"should format a percentage\", async () => {\n        const refId = getId();\n        const data = {\n          objects: {\n            field: [{\n              id: refId,\n              value: \"\",\n              actions: {\n                test1: [`AFPercent_Format(2, 1, false);` + `event.source.value = event.value;`],\n                test2: [`AFPercent_Format(2, 1, true);` + `event.source.value = event.value;`]\n              },\n              type: \"text\"\n            }]\n          },\n          appInfo: {\n            language: \"en-US\",\n            platform: \"Linux x86_64\"\n          },\n          calculationOrder: [],\n          dispatchEventName: \"_dispatchMe\"\n        };\n        sandbox.createSandbox(data);\n        await sandbox.dispatchEventInSandbox({\n          id: refId,\n          value: \"0.456789\",\n          name: \"test1\"\n        });\n        expect(send_queue.has(refId)).toEqual(true);\n        expect(send_queue.get(refId)).toEqual({\n          id: refId,\n          value: \"45.68%\"\n        });\n        send_queue.delete(refId);\n        await sandbox.dispatchEventInSandbox({\n          id: refId,\n          value: \"0.456789\",\n          name: \"test2\"\n        });\n        expect(send_queue.has(refId)).toEqual(true);\n        expect(send_queue.get(refId)).toEqual({\n          id: refId,\n          value: \"%45.68\"\n        });\n      });","file":"unit/scripting_spec.js","skipped":false,"dir":"test"},{"name":"should format a date","suites":["Scripting","AForm","AFDate_Format"],"line":795,"updatePoint":{"line":795,"column":30,"index":26687},"code":"      it(\"should format a date\", async () => {\n        const refId = getId();\n        const data = {\n          objects: {\n            field: [{\n              id: refId,\n              value: \"\",\n              actions: {\n                test1: [`AFDate_Format(0);event.source.value = event.value;`],\n                test2: [`AFDate_Format(12);event.source.value = event.value;`]\n              },\n              type: \"text\"\n            }]\n          },\n          appInfo: {\n            language: \"en-US\",\n            platform: \"Linux x86_64\"\n          },\n          calculationOrder: [],\n          dispatchEventName: \"_dispatchMe\"\n        };\n        sandbox.createSandbox(data);\n        await sandbox.dispatchEventInSandbox({\n          id: refId,\n          value: \"Sun Apr 15 2007 03:14:15\",\n          name: \"test1\"\n        });\n        expect(send_queue.has(refId)).toEqual(true);\n        expect(send_queue.get(refId)).toEqual({\n          id: refId,\n          value: \"4/15\"\n        });\n        send_queue.delete(refId);\n        await sandbox.dispatchEventInSandbox({\n          id: refId,\n          value: \"Sun Apr 15 2007 03:14:15\",\n          name: \"test2\"\n        });\n        expect(send_queue.has(refId)).toEqual(true);\n        expect(send_queue.get(refId)).toEqual({\n          id: refId,\n          value: \"4/15/07 3:14 am\"\n        });\n      });","file":"unit/scripting_spec.js","skipped":false,"dir":"test"},{"name":"should validate a number in range [a, b]","suites":["Scripting","AForm","AFRange_Validate"],"line":841,"updatePoint":{"line":841,"column":50,"index":28105},"code":"      it(\"should validate a number in range [a, b]\", async () => {\n        const refId = getId();\n        const data = {\n          objects: {\n            field: [{\n              id: refId,\n              value: \"\",\n              actions: {\n                Validate: [`AFRange_Validate(true, 123, true, 456);`]\n              },\n              type: \"text\"\n            }]\n          },\n          appInfo: {\n            language: \"en-US\",\n            platform: \"Linux x86_64\"\n          },\n          calculationOrder: [],\n          dispatchEventName: \"_dispatchMe\"\n        };\n        sandbox.createSandbox(data);\n        await sandbox.dispatchEventInSandbox({\n          id: refId,\n          value: \"321\",\n          name: \"Keystroke\",\n          willCommit: true\n        });\n        expect(send_queue.has(refId)).toEqual(true);\n        expect(send_queue.get(refId)).toEqual({\n          id: refId,\n          siblings: null,\n          value: \"321\",\n          formattedValue: null\n        });\n      });","file":"unit/scripting_spec.js","skipped":false,"dir":"test"},{"name":"should invalidate a number out of range [a, b]","suites":["Scripting","AForm","AFRange_Validate"],"line":876,"updatePoint":{"line":876,"column":56,"index":29102},"code":"      it(\"should invalidate a number out of range [a, b]\", async () => {\n        const refId = getId();\n        const data = {\n          objects: {\n            field: [{\n              id: refId,\n              value: \"\",\n              actions: {\n                Validate: [`AFRange_Validate(true, 123, true, 456);`]\n              },\n              type: \"text\"\n            }]\n          },\n          appInfo: {\n            language: \"en-US\",\n            platform: \"Linux x86_64\"\n          },\n          calculationOrder: [],\n          dispatchEventName: \"_dispatchMe\"\n        };\n        sandbox.createSandbox(data);\n        await sandbox.dispatchEventInSandbox({\n          id: refId,\n          value: \"12\",\n          name: \"Keystroke\",\n          willCommit: true\n        });\n        expect(send_queue.has(\"alert\")).toEqual(true);\n        expect(send_queue.get(\"alert\")).toEqual({\n          command: \"alert\",\n          value: \"Invalid value: must be greater than or equal to 123 and less than or equal to 456.\"\n        });\n      });","file":"unit/scripting_spec.js","skipped":false,"dir":"test"},{"name":"should compute the sum of several fields","suites":["Scripting","AForm","AFSimple_Calculate"],"line":911,"updatePoint":{"line":911,"column":50,"index":30181},"code":"      it(\"should compute the sum of several fields\", async () => {\n        const refIds = [0, 1, 2, 3, 4].map(_ => getId());\n        const data = {\n          objects: {\n            field1: [{\n              id: refIds[0],\n              value: \"\",\n              actions: {},\n              type: \"text\"\n            }],\n            field2: [{\n              id: refIds[1],\n              value: \"\",\n              actions: {},\n              type: \"text\"\n            }],\n            field3: [{\n              id: refIds[2],\n              value: \"\",\n              actions: {},\n              type: \"text\"\n            }],\n            field4: [{\n              id: refIds[3],\n              value: \"\",\n              actions: {\n                Calculate: [`AFSimple_Calculate(\"SUM\", [\"field1\", \"field2\", \"field3\", \"unknown\"]);`]\n              },\n              type: \"text\"\n            }],\n            field5: [{\n              id: refIds[4],\n              value: \"\",\n              actions: {\n                Calculate: [`AFSimple_Calculate(\"SUM\", \"field1, field2, field3, unknown\");`]\n              },\n              type: \"text\"\n            }]\n          },\n          appInfo: {\n            language: \"en-US\",\n            platform: \"Linux x86_64\"\n          },\n          calculationOrder: [refIds[3], refIds[4]],\n          dispatchEventName: \"_dispatchMe\"\n        };\n        sandbox.createSandbox(data);\n        await sandbox.dispatchEventInSandbox({\n          id: refIds[0],\n          value: \"1\",\n          name: \"Keystroke\",\n          willCommit: true\n        });\n        expect(send_queue.has(refIds[3])).toEqual(true);\n        expect(send_queue.get(refIds[3])).toEqual({\n          id: refIds[3],\n          siblings: null,\n          value: 1,\n          formattedValue: null\n        });\n        await sandbox.dispatchEventInSandbox({\n          id: refIds[1],\n          value: \"2\",\n          name: \"Keystroke\",\n          willCommit: true\n        });\n        expect(send_queue.has(refIds[3])).toEqual(true);\n        expect(send_queue.get(refIds[3])).toEqual({\n          id: refIds[3],\n          siblings: null,\n          value: 3,\n          formattedValue: null\n        });\n        await sandbox.dispatchEventInSandbox({\n          id: refIds[2],\n          value: \"3\",\n          name: \"Keystroke\",\n          willCommit: true\n        });\n        expect(send_queue.has(refIds[3])).toEqual(true);\n        expect(send_queue.get(refIds[3])).toEqual({\n          id: refIds[3],\n          siblings: null,\n          value: 6,\n          formattedValue: null\n        });\n        expect(send_queue.has(refIds[4])).toEqual(true);\n        expect(send_queue.get(refIds[4])).toEqual({\n          id: refIds[4],\n          siblings: null,\n          value: 6,\n          formattedValue: null\n        });\n      });","file":"unit/scripting_spec.js","skipped":false,"dir":"test"},{"name":"should compute the sum of several fields in fields tree","suites":["Scripting","AForm","AFSimple_Calculate"],"line":1005,"updatePoint":{"line":1005,"column":65,"index":32969},"code":"      it(\"should compute the sum of several fields in fields tree\", async () => {\n        const refIds = [0, 1, 2, 3, 4, 5].map(_ => getId());\n        const data = {\n          objects: {\n            field1: [{\n              id: refIds[0],\n              kidIds: [refIds[1], refIds[2]]\n            }],\n            \"field1.field2\": [{\n              id: refIds[1],\n              kidIds: [refIds[3]]\n            }],\n            \"field1.field3\": [{\n              id: refIds[2],\n              value: \"\",\n              actions: {},\n              type: \"text\"\n            }],\n            \"field1.field2.field4\": [{\n              id: refIds[3],\n              kidIds: [refIds[4]]\n            }],\n            \"field1.field2.field4.field5\": [{\n              id: refIds[4],\n              value: \"\",\n              actions: {},\n              type: \"text\"\n            }],\n            field6: [{\n              id: refIds[5],\n              value: \"\",\n              actions: {\n                Calculate: [`AFSimple_Calculate(\"SUM\", \"field1\");`]\n              },\n              type: \"text\"\n            }]\n          },\n          appInfo: {\n            language: \"en-US\",\n            platform: \"Linux x86_64\"\n          },\n          calculationOrder: [refIds[5]],\n          dispatchEventName: \"_dispatchMe\"\n        };\n        sandbox.createSandbox(data);\n        await sandbox.dispatchEventInSandbox({\n          id: refIds[2],\n          value: \"123\",\n          name: \"Keystroke\",\n          willCommit: true\n        });\n        expect(send_queue.has(refIds[5])).toEqual(true);\n        expect(send_queue.get(refIds[5])).toEqual({\n          id: refIds[5],\n          siblings: null,\n          value: 123,\n          formattedValue: null\n        });\n        await sandbox.dispatchEventInSandbox({\n          id: refIds[4],\n          value: \"456\",\n          name: \"Keystroke\",\n          willCommit: true\n        });\n        expect(send_queue.has(refIds[5])).toEqual(true);\n        expect(send_queue.get(refIds[5])).toEqual({\n          id: refIds[5],\n          siblings: null,\n          value: 579,\n          formattedValue: null\n        });\n      });","file":"unit/scripting_spec.js","skipped":false,"dir":"test"},{"name":"should validate a phone number on a keystroke event","suites":["Scripting","AForm","AFSpecial_KeystrokeEx"],"line":1079,"updatePoint":{"line":1079,"column":61,"index":35144},"code":"      it(\"should validate a phone number on a keystroke event\", async () => {\n        const refId = getId();\n        const data = {\n          objects: {\n            field: [{\n              id: refId,\n              value: \"\",\n              actions: {\n                Keystroke: [`AFSpecial_KeystrokeEx(\"9AXO\");`]\n              },\n              type: \"text\"\n            }]\n          },\n          appInfo: {\n            language: \"en-US\",\n            platform: \"Linux x86_64\"\n          },\n          calculationOrder: [],\n          dispatchEventName: \"_dispatchMe\"\n        };\n        sandbox.createSandbox(data);\n        await sandbox.dispatchEventInSandbox({\n          id: refId,\n          value: \"\",\n          change: \"3\",\n          name: \"Keystroke\",\n          willCommit: false,\n          selStart: 0,\n          selEnd: 0\n        });\n        expect(send_queue.has(refId)).toEqual(true);\n        send_queue.delete(refId);\n        await sandbox.dispatchEventInSandbox({\n          id: refId,\n          value: \"3\",\n          change: \"F\",\n          name: \"Keystroke\",\n          willCommit: false,\n          selStart: 1,\n          selEnd: 1\n        });\n        expect(send_queue.has(refId)).toEqual(true);\n        send_queue.delete(refId);\n        await sandbox.dispatchEventInSandbox({\n          id: refId,\n          value: \"3F\",\n          change: \"?\",\n          name: \"Keystroke\",\n          willCommit: false,\n          selStart: 2,\n          selEnd: 2\n        });\n        expect(send_queue.has(refId)).toEqual(true);\n        send_queue.delete(refId);\n        await sandbox.dispatchEventInSandbox({\n          id: refId,\n          value: \"3F?\",\n          change: \"@\",\n          name: \"Keystroke\",\n          willCommit: false,\n          selStart: 3,\n          selEnd: 3\n        });\n        expect(send_queue.has(refId)).toEqual(true);\n        expect(send_queue.get(refId)).toEqual({\n          id: refId,\n          siblings: null,\n          value: \"3F?\",\n          selRange: [3, 3]\n        });\n        send_queue.delete(refId);\n        await sandbox.dispatchEventInSandbox({\n          id: refId,\n          value: \"3F?\",\n          change: \"0\",\n          name: \"Keystroke\",\n          willCommit: false,\n          selStart: 3,\n          selEnd: 3\n        });\n        expect(send_queue.has(refId)).toEqual(true);\n        send_queue.delete(refId);\n        await sandbox.dispatchEventInSandbox({\n          id: refId,\n          value: \"3F?0\",\n          name: \"Keystroke\",\n          willCommit: true,\n          selStart: 4,\n          selEnd: 4\n        });\n        expect(send_queue.has(refId)).toEqual(true);\n        expect(send_queue.get(refId)).toEqual({\n          id: refId,\n          siblings: null,\n          value: \"3F?0\",\n          formattedValue: null\n        });\n      });","file":"unit/scripting_spec.js","skipped":false,"dir":"test"},{"name":"should validate a zip code on a keystroke event","suites":["Scripting","AForm","AFSpecial_Keystroke"],"line":1179,"updatePoint":{"line":1179,"column":57,"index":37965},"code":"      it(\"should validate a zip code on a keystroke event\", async () => {\n        const refId = getId();\n        const data = {\n          objects: {\n            field: [{\n              id: refId,\n              value: \"\",\n              actions: {\n                Keystroke: [`AFSpecial_Keystroke(0);`]\n              },\n              type: \"text\"\n            }]\n          },\n          appInfo: {\n            language: \"en-US\",\n            platform: \"Linux x86_64\"\n          },\n          calculationOrder: [],\n          dispatchEventName: \"_dispatchMe\"\n        };\n        sandbox.createSandbox(data);\n        let value = \"\";\n        const changes = \"12345\";\n        let i = 0;\n        for (; i < changes.length; i++) {\n          const change = changes.charAt(i);\n          await sandbox.dispatchEventInSandbox({\n            id: refId,\n            value,\n            change,\n            name: \"Keystroke\",\n            willCommit: false,\n            selStart: i,\n            selEnd: i\n          });\n          expect(send_queue.has(refId)).toEqual(true);\n          send_queue.delete(refId);\n          value += change;\n        }\n        await sandbox.dispatchEventInSandbox({\n          id: refId,\n          value,\n          change: \"A\",\n          name: \"Keystroke\",\n          willCommit: false,\n          selStart: i,\n          selEnd: i\n        });\n        expect(send_queue.has(refId)).toEqual(true);\n        expect(send_queue.get(refId)).toEqual({\n          id: refId,\n          siblings: null,\n          value,\n          selRange: [i, i]\n        });\n        send_queue.delete(refId);\n      });","file":"unit/scripting_spec.js","skipped":false,"dir":"test"},{"name":"should validate a US phone number (long) on a keystroke event","suites":["Scripting","AForm","AFSpecial_Keystroke"],"line":1236,"updatePoint":{"line":1236,"column":71,"index":39570},"code":"      it(\"should validate a US phone number (long) on a keystroke event\", async () => {\n        const refId = getId();\n        const data = {\n          objects: {\n            field: [{\n              id: refId,\n              value: \"\",\n              actions: {\n                Keystroke: [`AFSpecial_Keystroke(2);`]\n              },\n              type: \"text\"\n            }]\n          },\n          appInfo: {\n            language: \"en-US\",\n            platform: \"Linux x86_64\"\n          },\n          calculationOrder: [],\n          dispatchEventName: \"_dispatchMe\"\n        };\n        sandbox.createSandbox(data);\n        let value = \"\";\n        const changes = \"(123) 456-7890\";\n        let i = 0;\n        for (; i < changes.length; i++) {\n          const change = changes.charAt(i);\n          await sandbox.dispatchEventInSandbox({\n            id: refId,\n            value,\n            change,\n            name: \"Keystroke\",\n            willCommit: false,\n            selStart: i,\n            selEnd: i\n          });\n          expect(send_queue.has(refId)).toEqual(true);\n          send_queue.delete(refId);\n          value += change;\n        }\n        await sandbox.dispatchEventInSandbox({\n          id: refId,\n          value,\n          change: \"A\",\n          name: \"Keystroke\",\n          willCommit: false,\n          selStart: i,\n          selEnd: i\n        });\n        expect(send_queue.has(refId)).toEqual(true);\n        expect(send_queue.get(refId)).toEqual({\n          id: refId,\n          siblings: null,\n          value,\n          selRange: [i, i]\n        });\n        send_queue.delete(refId);\n      });","file":"unit/scripting_spec.js","skipped":false,"dir":"test"},{"name":"should validate a US phone number (short) on a keystroke event","suites":["Scripting","AForm","AFSpecial_Keystroke"],"line":1293,"updatePoint":{"line":1293,"column":72,"index":41185},"code":"      it(\"should validate a US phone number (short) on a keystroke event\", async () => {\n        const refId = getId();\n        const data = {\n          objects: {\n            field: [{\n              id: refId,\n              value: \"\",\n              actions: {\n                Keystroke: [`AFSpecial_Keystroke(2);`]\n              },\n              type: \"text\"\n            }]\n          },\n          appInfo: {\n            language: \"en-US\",\n            platform: \"Linux x86_64\"\n          },\n          calculationOrder: [],\n          dispatchEventName: \"_dispatchMe\"\n        };\n        sandbox.createSandbox(data);\n        let value = \"\";\n        const changes = \"123-4567\";\n        let i = 0;\n        for (; i < changes.length; i++) {\n          const change = changes.charAt(i);\n          await sandbox.dispatchEventInSandbox({\n            id: refId,\n            value,\n            change,\n            name: \"Keystroke\",\n            willCommit: false,\n            selStart: i,\n            selEnd: i\n          });\n          expect(send_queue.has(refId)).toEqual(true);\n          send_queue.delete(refId);\n          value += change;\n        }\n        await sandbox.dispatchEventInSandbox({\n          id: refId,\n          value,\n          change: \"A\",\n          name: \"Keystroke\",\n          willCommit: false,\n          selStart: i,\n          selEnd: i\n        });\n        expect(send_queue.has(refId)).toEqual(true);\n        expect(send_queue.get(refId)).toEqual({\n          id: refId,\n          siblings: null,\n          value,\n          selRange: [i, i]\n        });\n        send_queue.delete(refId);\n      });","file":"unit/scripting_spec.js","skipped":false,"dir":"test"},{"name":"should validate an e-mail address","suites":["Scripting","AForm","eMailValidate"],"line":1352,"updatePoint":{"line":1352,"column":43,"index":42817},"code":"      it(\"should validate an e-mail address\", async () => {\n        let value = await myeval(`eMailValidate(123)`);\n        expect(value).toEqual(false);\n        value = await myeval(`eMailValidate(\"foo@bar.com\")`);\n        expect(value).toEqual(true);\n        value = await myeval(`eMailValidate(\"foo bar\")`);\n        expect(value).toEqual(false);\n      });","file":"unit/scripting_spec.js","skipped":false,"dir":"test"},{"name":"should check matching between regexs and a string","suites":["Scripting","AForm","AFExactMatch"],"line":1362,"updatePoint":{"line":1362,"column":59,"index":43243},"code":"      it(\"should check matching between regexs and a string\", async () => {\n        let value = await myeval(`AFExactMatch(/\\\\d+/, \"123\")`);\n        expect(value).toEqual(true);\n        value = await myeval(`AFExactMatch(/\\\\d+/, \"foo\")`);\n        expect(value).toEqual(0);\n        value = await myeval(`AFExactMatch([/\\\\d+/, /[fo]*/], \"foo\")`);\n        expect(value).toEqual(2);\n        value = await myeval(`AFExactMatch([/\\\\d+/, /[fo]*/], \"bar\")`);\n        expect(value).toEqual(0);\n      });","file":"unit/scripting_spec.js","skipped":false,"dir":"test"},{"name":"should decode simple predictor data","suites":["stream","PredictorStream"],"line":21,"updatePoint":{"line":21,"column":43,"index":895},"code":"    it(\"should decode simple predictor data\", function () {\n      const dict = new Dict();\n      dict.set(\"Predictor\", 12);\n      dict.set(\"Colors\", 1);\n      dict.set(\"BitsPerComponent\", 8);\n      dict.set(\"Columns\", 2);\n      const input = new Stream(new Uint8Array([2, 100, 3, 2, 1, 255, 2, 1, 255]), 0, 9, dict);\n      const predictor = new PredictorStream(input, /* length = */9, dict);\n      const result = predictor.getBytes(6);\n      expect(result).toEqual(new Uint8Array([100, 3, 101, 2, 102, 1]));\n    });","file":"unit/stream_spec.js","skipped":false,"dir":"test"},{"name":"parses basic structure","suites":["struct tree","getStructTree"],"line":36,"updatePoint":{"line":36,"column":30,"index":1285},"code":"    it(\"parses basic structure\", async function () {\n      const filename = \"structure_simple.pdf\";\n      const params = buildGetDocumentParams(filename);\n      const loadingTask = getDocument(params);\n      const doc = await loadingTask.promise;\n      const page = await doc.getPage(1);\n      const struct = await page.getStructTree();\n      equalTrees({\n        role: \"Root\",\n        children: [{\n          role: \"Document\",\n          lang: \"en-US\",\n          children: [{\n            role: \"H1\",\n            children: [{\n              role: \"NonStruct\",\n              children: [{\n                type: \"content\"\n              }]\n            }]\n          }, {\n            role: \"P\",\n            children: [{\n              role: \"NonStruct\",\n              children: [{\n                type: \"content\"\n              }]\n            }]\n          }, {\n            role: \"H2\",\n            children: [{\n              role: \"NonStruct\",\n              children: [{\n                type: \"content\"\n              }]\n            }]\n          }, {\n            role: \"P\",\n            children: [{\n              role: \"NonStruct\",\n              children: [{\n                type: \"content\"\n              }]\n            }]\n          }]\n        }]\n      }, struct);\n      await loadingTask.destroy();\n    });","file":"unit/struct_tree_spec.js","skipped":false,"dir":"test"},{"name":"parses structure with marked content reference","suites":["struct tree","getStructTree"],"line":85,"updatePoint":{"line":85,"column":54,"index":2604},"code":"    it(\"parses structure with marked content reference\", async function () {\n      const filename = \"issue6782.pdf\";\n      const params = buildGetDocumentParams(filename);\n      const loadingTask = getDocument(params);\n      const doc = await loadingTask.promise;\n      const page = await doc.getPage(1);\n      const struct = await page.getStructTree();\n      equalTrees({\n        role: \"Root\",\n        children: [{\n          role: \"Part\",\n          children: [{\n            role: \"P\",\n            children: Array(27).fill({\n              type: \"content\"\n            })\n          }]\n        }]\n      }, struct);\n      await loadingTask.destroy();\n    });","file":"unit/struct_tree_spec.js","skipped":false,"dir":"test"},{"name":"creates textLayer from ReadableStream","suites":["textLayer"],"line":21,"updatePoint":{"line":21,"column":43,"index":938},"code":"  it(\"creates textLayer from ReadableStream\", async function () {\n    if (isNodeJS) {\n      pending(\"document.createElement is not supported in Node.js.\");\n    }\n    const loadingTask = getDocument(buildGetDocumentParams(\"basicapi.pdf\"));\n    const pdfDocument = await loadingTask.promise;\n    const page = await pdfDocument.getPage(1);\n    const textContentItemsStr = [];\n    const textLayerRenderTask = renderTextLayer({\n      textContentSource: page.streamTextContent(),\n      container: document.createElement(\"div\"),\n      viewport: page.getViewport({\n        scale: 1\n      }),\n      textContentItemsStr\n    });\n    expect(textLayerRenderTask instanceof TextLayerRenderTask).toEqual(true);\n    await textLayerRenderTask.promise;\n    expect(textContentItemsStr).toEqual([\"Table Of Content\", \"\", \"Chapter 1\", \" \", \"..........................................................\", \" \", \"2\", \"\", \"Paragraph 1.1\", \" \", \"......................................................\", \" \", \"3\", \"\", \"page 1 / 3\"]);\n  });","file":"unit/text_layer_spec.js","skipped":false,"dir":"test"},{"name":"splits tokens","suites":["Type1Parser"],"line":20,"updatePoint":{"line":20,"column":19,"index":848},"code":"  it(\"splits tokens\", function () {\n    const stream = new StringStream(\"/BlueValues[-17 0]noaccess def\");\n    const parser = new Type1Parser(stream, false, SEAC_ANALYSIS_ENABLED);\n    expect(parser.getToken()).toEqual(\"/\");\n    expect(parser.getToken()).toEqual(\"BlueValues\");\n    expect(parser.getToken()).toEqual(\"[\");\n    expect(parser.getToken()).toEqual(\"-17\");\n    expect(parser.getToken()).toEqual(\"0\");\n    expect(parser.getToken()).toEqual(\"]\");\n    expect(parser.getToken()).toEqual(\"noaccess\");\n    expect(parser.getToken()).toEqual(\"def\");\n    expect(parser.getToken()).toEqual(null);\n  });","file":"unit/type1_parser_spec.js","skipped":false,"dir":"test"},{"name":"handles glued tokens","suites":["Type1Parser"],"line":33,"updatePoint":{"line":33,"column":26,"index":1459},"code":"  it(\"handles glued tokens\", function () {\n    const stream = new StringStream(\"dup/CharStrings\");\n    const parser = new Type1Parser(stream, false, SEAC_ANALYSIS_ENABLED);\n    expect(parser.getToken()).toEqual(\"dup\");\n    expect(parser.getToken()).toEqual(\"/\");\n    expect(parser.getToken()).toEqual(\"CharStrings\");\n  });","file":"unit/type1_parser_spec.js","skipped":false,"dir":"test"},{"name":"ignores whitespace","suites":["Type1Parser"],"line":40,"updatePoint":{"line":40,"column":24,"index":1780},"code":"  it(\"ignores whitespace\", function () {\n    const stream = new StringStream(\"\\nab   c\\t\");\n    const parser = new Type1Parser(stream, false, SEAC_ANALYSIS_ENABLED);\n    expect(parser.getToken()).toEqual(\"ab\");\n    expect(parser.getToken()).toEqual(\"c\");\n  });","file":"unit/type1_parser_spec.js","skipped":false,"dir":"test"},{"name":"parses numbers","suites":["Type1Parser"],"line":46,"updatePoint":{"line":46,"column":20,"index":2037},"code":"  it(\"parses numbers\", function () {\n    const stream = new StringStream(\"123\");\n    const parser = new Type1Parser(stream, false, SEAC_ANALYSIS_ENABLED);\n    expect(parser.readNumber()).toEqual(123);\n  });","file":"unit/type1_parser_spec.js","skipped":false,"dir":"test"},{"name":"parses booleans","suites":["Type1Parser"],"line":51,"updatePoint":{"line":51,"column":21,"index":2245},"code":"  it(\"parses booleans\", function () {\n    const stream = new StringStream(\"true false\");\n    const parser = new Type1Parser(stream, false, SEAC_ANALYSIS_ENABLED);\n    expect(parser.readBoolean()).toEqual(1);\n    expect(parser.readBoolean()).toEqual(0);\n  });","file":"unit/type1_parser_spec.js","skipped":false,"dir":"test"},{"name":"parses number arrays","suites":["Type1Parser"],"line":57,"updatePoint":{"line":57,"column":26,"index":2509},"code":"  it(\"parses number arrays\", function () {\n    let stream = new StringStream(\"[1 2]\");\n    let parser = new Type1Parser(stream, false, SEAC_ANALYSIS_ENABLED);\n    expect(parser.readNumberArray()).toEqual([1, 2]);\n    // Variation on spacing.\n    stream = new StringStream(\"[ 1 2 ]\");\n    parser = new Type1Parser(stream, false, SEAC_ANALYSIS_ENABLED);\n    expect(parser.readNumberArray()).toEqual([1, 2]);\n  });","file":"unit/type1_parser_spec.js","skipped":false,"dir":"test"},{"name":"skips comments","suites":["Type1Parser"],"line":66,"updatePoint":{"line":66,"column":20,"index":2915},"code":"  it(\"skips comments\", function () {\n    const stream = new StringStream(\"%!PS-AdobeFont-1.0: CMSY10 003.002\\n\" + \"%%Title: CMSY10\\n\" + \"%Version: 003.002\\n\" + \"FontDirectory\");\n    const parser = new Type1Parser(stream, false, SEAC_ANALYSIS_ENABLED);\n    expect(parser.getToken()).toEqual(\"FontDirectory\");\n  });","file":"unit/type1_parser_spec.js","skipped":false,"dir":"test"},{"name":"parses font program","suites":["Type1Parser"],"line":71,"updatePoint":{"line":71,"column":25,"index":3234},"code":"  it(\"parses font program\", function () {\n    const stream = new StringStream(\"/ExpansionFactor  99\\n\" + \"/Subrs 1 array\\n\" + \"dup 0 1 RD x noaccess put\\n\" + \"end\\n\" + \"/CharStrings 46 dict dup begin\\n\" + \"/.notdef 1 RD x ND\\n\" + \"end\");\n    const parser = new Type1Parser(stream, false, SEAC_ANALYSIS_ENABLED);\n    const program = parser.extractFontProgram({});\n    expect(program.charstrings.length).toEqual(1);\n    expect(program.properties.privateData.ExpansionFactor).toEqual(99);\n  });","file":"unit/type1_parser_spec.js","skipped":false,"dir":"test"},{"name":"parses font header font matrix","suites":["Type1Parser"],"line":78,"updatePoint":{"line":78,"column":36,"index":3737},"code":"  it(\"parses font header font matrix\", function () {\n    const stream = new StringStream(\"/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def\\n\");\n    const parser = new Type1Parser(stream, false, SEAC_ANALYSIS_ENABLED);\n    const props = {};\n    parser.extractFontHeader(props);\n    expect(props.fontMatrix).toEqual([0.001, 0, 0, 0.001, 0, 0]);\n  });","file":"unit/type1_parser_spec.js","skipped":false,"dir":"test"},{"name":"parses font header encoding","suites":["Type1Parser"],"line":85,"updatePoint":{"line":85,"column":33,"index":4081},"code":"  it(\"parses font header encoding\", function () {\n    const stream = new StringStream(\"/Encoding 256 array\\n\" + \"0 1 255 {1 index exch /.notdef put} for\\n\" + \"dup 33 /arrowright put\\n\" + \"readonly def\\n\");\n    const parser = new Type1Parser(stream, false, SEAC_ANALYSIS_ENABLED);\n    const props = {\n      overridableEncoding: true\n    };\n    parser.extractFontHeader(props);\n    expect(props.builtInEncoding[33]).toEqual(\"arrowright\");\n  });","file":"unit/type1_parser_spec.js","skipped":false,"dir":"test"},{"name":"empty array","suites":["ui_utils","binary search"],"line":25,"updatePoint":{"line":25,"column":19,"index":1038},"code":"    it(\"empty array\", function () {\n      expect(binarySearchFirstItem([], isTrue)).toEqual(0);\n    });","file":"unit/ui_utils_spec.js","skipped":false,"dir":"test"},{"name":"single boolean entry","suites":["ui_utils","binary search"],"line":28,"updatePoint":{"line":28,"column":28,"index":1151},"code":"    it(\"single boolean entry\", function () {\n      expect(binarySearchFirstItem([false], isTrue)).toEqual(1);\n      expect(binarySearchFirstItem([true], isTrue)).toEqual(0);\n    });","file":"unit/ui_utils_spec.js","skipped":false,"dir":"test"},{"name":"three boolean entries","suites":["ui_utils","binary search"],"line":32,"updatePoint":{"line":32,"column":29,"index":1334},"code":"    it(\"three boolean entries\", function () {\n      expect(binarySearchFirstItem([true, true, true], isTrue)).toEqual(0);\n      expect(binarySearchFirstItem([false, true, true], isTrue)).toEqual(1);\n      expect(binarySearchFirstItem([false, false, true], isTrue)).toEqual(2);\n      expect(binarySearchFirstItem([false, false, false], isTrue)).toEqual(3);\n    });","file":"unit/ui_utils_spec.js","skipped":false,"dir":"test"},{"name":"three numeric entries","suites":["ui_utils","binary search"],"line":38,"updatePoint":{"line":38,"column":29,"index":1698},"code":"    it(\"three numeric entries\", function () {\n      expect(binarySearchFirstItem([0, 1, 2], isGreater3)).toEqual(3);\n      expect(binarySearchFirstItem([2, 3, 4], isGreater3)).toEqual(2);\n      expect(binarySearchFirstItem([4, 5, 6], isGreater3)).toEqual(0);\n    });","file":"unit/ui_utils_spec.js","skipped":false,"dir":"test"},{"name":"three numeric entries and a start index","suites":["ui_utils","binary search"],"line":43,"updatePoint":{"line":43,"column":47,"index":1983},"code":"    it(\"three numeric entries and a start index\", function () {\n      expect(binarySearchFirstItem([0, 1, 2, 3, 4], isGreater3, 2)).toEqual(4);\n      expect(binarySearchFirstItem([2, 3, 4], isGreater3, 2)).toEqual(2);\n      expect(binarySearchFirstItem([4, 5, 6], isGreater3, 1)).toEqual(1);\n    });","file":"unit/ui_utils_spec.js","skipped":false,"dir":"test"},{"name":"should reject non-integer angles","suites":["ui_utils","isValidRotation"],"line":50,"updatePoint":{"line":50,"column":40,"index":2326},"code":"    it(\"should reject non-integer angles\", function () {\n      expect(isValidRotation()).toEqual(false);\n      expect(isValidRotation(null)).toEqual(false);\n      expect(isValidRotation(NaN)).toEqual(false);\n      expect(isValidRotation([90])).toEqual(false);\n      expect(isValidRotation(\"90\")).toEqual(false);\n      expect(isValidRotation(90.5)).toEqual(false);\n    });","file":"unit/ui_utils_spec.js","skipped":false,"dir":"test"},{"name":"should reject non-multiple of 90 degree angles","suites":["ui_utils","isValidRotation"],"line":58,"updatePoint":{"line":58,"column":54,"index":2712},"code":"    it(\"should reject non-multiple of 90 degree angles\", function () {\n      expect(isValidRotation(45)).toEqual(false);\n      expect(isValidRotation(-123)).toEqual(false);\n    });","file":"unit/ui_utils_spec.js","skipped":false,"dir":"test"},{"name":"should accept valid angles","suites":["ui_utils","isValidRotation"],"line":62,"updatePoint":{"line":62,"column":34,"index":2873},"code":"    it(\"should accept valid angles\", function () {\n      expect(isValidRotation(0)).toEqual(true);\n      expect(isValidRotation(90)).toEqual(true);\n      expect(isValidRotation(-270)).toEqual(true);\n      expect(isValidRotation(540)).toEqual(true);\n    });","file":"unit/ui_utils_spec.js","skipped":false,"dir":"test"},{"name":"should be portrait orientation","suites":["ui_utils","isPortraitOrientation"],"line":70,"updatePoint":{"line":70,"column":38,"index":3190},"code":"    it(\"should be portrait orientation\", function () {\n      expect(isPortraitOrientation({\n        width: 200,\n        height: 400\n      })).toEqual(true);\n      expect(isPortraitOrientation({\n        width: 500,\n        height: 500\n      })).toEqual(true);\n    });","file":"unit/ui_utils_spec.js","skipped":false,"dir":"test"},{"name":"should be landscape orientation","suites":["ui_utils","isPortraitOrientation"],"line":80,"updatePoint":{"line":80,"column":39,"index":3458},"code":"    it(\"should be landscape orientation\", function () {\n      expect(isPortraitOrientation({\n        width: 600,\n        height: 300\n      })).toEqual(false);\n    });","file":"unit/ui_utils_spec.js","skipped":false,"dir":"test"},{"name":"should parse one key/value pair","suites":["ui_utils","parseQueryString"],"line":88,"updatePoint":{"line":88,"column":39,"index":3676},"code":"    it(\"should parse one key/value pair\", function () {\n      const parameters = parseQueryString(\"key1=value1\");\n      expect(parameters.size).toEqual(1);\n      expect(parameters.get(\"key1\")).toEqual(\"value1\");\n    });","file":"unit/ui_utils_spec.js","skipped":false,"dir":"test"},{"name":"should parse multiple key/value pairs","suites":["ui_utils","parseQueryString"],"line":93,"updatePoint":{"line":93,"column":45,"index":3902},"code":"    it(\"should parse multiple key/value pairs\", function () {\n      const parameters = parseQueryString(\"key1=value1&key2=value2&key3=value3\");\n      expect(parameters.size).toEqual(3);\n      expect(parameters.get(\"key1\")).toEqual(\"value1\");\n      expect(parameters.get(\"key2\")).toEqual(\"value2\");\n      expect(parameters.get(\"key3\")).toEqual(\"value3\");\n    });","file":"unit/ui_utils_spec.js","skipped":false,"dir":"test"},{"name":"should parse keys without values","suites":["ui_utils","parseQueryString"],"line":100,"updatePoint":{"line":100,"column":40,"index":4259},"code":"    it(\"should parse keys without values\", function () {\n      const parameters = parseQueryString(\"key1\");\n      expect(parameters.size).toEqual(1);\n      expect(parameters.get(\"key1\")).toEqual(\"\");\n    });","file":"unit/ui_utils_spec.js","skipped":false,"dir":"test"},{"name":"should decode encoded key/value pairs","suites":["ui_utils","parseQueryString"],"line":105,"updatePoint":{"line":105,"column":45,"index":4472},"code":"    it(\"should decode encoded key/value pairs\", function () {\n      const parameters = parseQueryString(\"k%C3%ABy1=valu%C3%AB1\");\n      expect(parameters.size).toEqual(1);\n      expect(parameters.get(\"këy1\")).toEqual(\"valuë1\");\n    });","file":"unit/ui_utils_spec.js","skipped":false,"dir":"test"},{"name":"should convert keys to lowercase","suites":["ui_utils","parseQueryString"],"line":110,"updatePoint":{"line":110,"column":40,"index":4703},"code":"    it(\"should convert keys to lowercase\", function () {\n      const parameters = parseQueryString(\"Key1=Value1&KEY2=Value2\");\n      expect(parameters.size).toEqual(2);\n      expect(parameters.get(\"key1\")).toEqual(\"Value1\");\n      expect(parameters.get(\"key2\")).toEqual(\"Value2\");\n    });","file":"unit/ui_utils_spec.js","skipped":false,"dir":"test"},{"name":"should not modify string without null characters","suites":["ui_utils","removeNullCharacters"],"line":118,"updatePoint":{"line":118,"column":56,"index":5063},"code":"    it(\"should not modify string without null characters\", function () {\n      const str = \"string without null chars\";\n      expect(removeNullCharacters(str)).toEqual(\"string without null chars\");\n    });","file":"unit/ui_utils_spec.js","skipped":false,"dir":"test"},{"name":"should modify string with null characters","suites":["ui_utils","removeNullCharacters"],"line":122,"updatePoint":{"line":122,"column":49,"index":5262},"code":"    it(\"should modify string with null characters\", function () {\n      const str = \"string\\x00With\\x00Null\\x00Chars\";\n      expect(removeNullCharacters(str)).toEqual(\"stringWithNullChars\");\n    });","file":"unit/ui_utils_spec.js","skipped":false,"dir":"test"},{"name":"should modify string with non-displayable characters","suites":["ui_utils","removeNullCharacters"],"line":126,"updatePoint":{"line":126,"column":60,"index":5472},"code":"    it(\"should modify string with non-displayable characters\", function () {\n      const str = Array.from(Array(32).keys(), x => String.fromCharCode(x) + \"a\").join(\"\");\n      // \\x00 is replaced by an empty string.\n      const expected = \"a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a\";\n      expect(removeNullCharacters(str, /* replaceInvisible */true)).toEqual(expected);\n    });","file":"unit/ui_utils_spec.js","skipped":false,"dir":"test"},{"name":"gets page size (in inches)","suites":["ui_utils","getPageSizeInches"],"line":134,"updatePoint":{"line":134,"column":34,"index":5898},"code":"    it(\"gets page size (in inches)\", function () {\n      const page = {\n        view: [0, 0, 595.28, 841.89],\n        userUnit: 1.0,\n        rotate: 0\n      };\n      const {\n        width,\n        height\n      } = getPageSizeInches(page);\n      expect(+width.toPrecision(3)).toEqual(8.27);\n      expect(+height.toPrecision(4)).toEqual(11.69);\n    });","file":"unit/ui_utils_spec.js","skipped":false,"dir":"test"},{"name":"gets page size (in inches), for non-default /Rotate entry","suites":["ui_utils","getPageSizeInches"],"line":147,"updatePoint":{"line":147,"column":65,"index":6280},"code":"    it(\"gets page size (in inches), for non-default /Rotate entry\", function () {\n      const pdfPage1 = {\n        view: [0, 0, 612, 792],\n        userUnit: 1,\n        rotate: 0\n      };\n      const {\n        width: width1,\n        height: height1\n      } = getPageSizeInches(pdfPage1);\n      expect(width1).toEqual(8.5);\n      expect(height1).toEqual(11);\n      const pdfPage2 = {\n        view: [0, 0, 612, 792],\n        userUnit: 1,\n        rotate: 90\n      };\n      const {\n        width: width2,\n        height: height2\n      } = getPageSizeInches(pdfPage2);\n      expect(width2).toEqual(11);\n      expect(height2).toEqual(8.5);\n    });","file":"unit/ui_utils_spec.js","skipped":false,"dir":"test"},{"name":"with pages of varying height","suites":["ui_utils","getVisibleElements"],"line":316,"updatePoint":{"line":316,"column":36,"index":12873},"code":"    it(\"with pages of varying height\", function () {\n      const pages = makePages([[[50, 20], [20, 50]], [[30, 12], [12, 30]], [[20, 50], [50, 20]], [[50, 20], [20, 50]]]);\n      scrollOverDocument(pages);\n    });","file":"unit/ui_utils_spec.js","skipped":false,"dir":"test"},{"name":"widescreen challenge","suites":["ui_utils","getVisibleElements"],"line":320,"updatePoint":{"line":320,"column":28,"index":13080},"code":"    it(\"widescreen challenge\", function () {\n      const pages = makePages([[[10, 50], [10, 60], [10, 70], [10, 80], [10, 90]], [[10, 90], [10, 80], [10, 70], [10, 60], [10, 50]], [[10, 50], [10, 60], [10, 70], [10, 80], [10, 90]]]);\n      scrollOverDocument(pages);\n    });","file":"unit/ui_utils_spec.js","skipped":false,"dir":"test"},{"name":"works with horizontal scrolling","suites":["ui_utils","getVisibleElements"],"line":324,"updatePoint":{"line":324,"column":39,"index":13366},"code":"    it(\"works with horizontal scrolling\", function () {\n      const pages = makePages([[[10, 50], [20, 20], [30, 10]]]);\n      scrollOverDocument(pages, /* horizontal = */true);\n    });","file":"unit/ui_utils_spec.js","skipped":false,"dir":"test"},{"name":"works with horizontal scrolling with RTL-documents","suites":["ui_utils","getVisibleElements"],"line":328,"updatePoint":{"line":328,"column":58,"index":13571},"code":"    it(\"works with horizontal scrolling with RTL-documents\", function () {\n      const pages = makePages([[[-10, 50], [-20, 20], [-30, 10]]]);\n      scrollOverDocument(pages, /* horizontal = */true, /* rtl = */true);\n    });","file":"unit/ui_utils_spec.js","skipped":false,"dir":"test"},{"name":"handles `sortByVisibility` correctly","suites":["ui_utils","getVisibleElements"],"line":332,"updatePoint":{"line":332,"column":44,"index":13782},"code":"    it(\"handles `sortByVisibility` correctly\", function () {\n      const scrollEl = {\n        scrollTop: 75,\n        scrollLeft: 0,\n        clientHeight: 750,\n        clientWidth: 1500\n      };\n      const views = makePages([[[100, 150]], [[100, 150]], [[100, 150]]]);\n      const visible = getVisibleElements({\n        scrollEl,\n        views\n      });\n      const visibleSorted = getVisibleElements({\n        scrollEl,\n        views,\n        sortByVisibility: true\n      });\n      const viewsOrder = [],\n        viewsSortedOrder = [];\n      for (const view of visible.views) {\n        viewsOrder.push(view.id);\n      }\n      for (const view of visibleSorted.views) {\n        viewsSortedOrder.push(view.id);\n      }\n      expect(viewsOrder).toEqual([0, 1, 2]);\n      expect(viewsSortedOrder).toEqual([1, 2, 0]);\n    });","file":"unit/ui_utils_spec.js","skipped":false,"dir":"test"},{"name":"handles views being empty","suites":["ui_utils","getVisibleElements"],"line":360,"updatePoint":{"line":360,"column":33,"index":14592},"code":"    it(\"handles views being empty\", function () {\n      const scrollEl = {\n        scrollTop: 10,\n        scrollLeft: 0,\n        clientHeight: 750,\n        clientWidth: 1500\n      };\n      const views = [];\n      expect(getVisibleElements({\n        scrollEl,\n        views\n      })).toEqual({\n        first: undefined,\n        last: undefined,\n        views: [],\n        ids: new Set()\n      });\n    });","file":"unit/ui_utils_spec.js","skipped":false,"dir":"test"},{"name":"handles all views being hidden (without errors)","suites":["ui_utils","getVisibleElements"],"line":378,"updatePoint":{"line":378,"column":55,"index":15018},"code":"    it(\"handles all views being hidden (without errors)\", function () {\n      const scrollEl = {\n        scrollTop: 100000,\n        scrollLeft: 0,\n        clientHeight: 750,\n        clientWidth: 1500\n      };\n      const views = makePages([[[100, 150]], [[100, 150]], [[100, 150]]]);\n      expect(getVisibleElements({\n        scrollEl,\n        views\n      })).toEqual({\n        first: undefined,\n        last: undefined,\n        views: [],\n        ids: new Set()\n      });\n    });","file":"unit/ui_utils_spec.js","skipped":false,"dir":"test"},{"name":"handles case 1","suites":["ui_utils","getVisibleElements","backtrackBeforeAllVisibleElements"],"line":419,"updatePoint":{"line":419,"column":24,"index":16420},"code":"      it(\"handles case 1\", function () {\n        const pages = makePages([[[10, 20], [10, 20], [10, 20], [10, 20]], [tallPage, shortPage, tallPage, shortPage], [[10, 50], [10, 50], [10, 50], [10, 50]], [[10, 20], [10, 20], [10, 20], [10, 20]], [[10, 20]]]);\n        // binary search would land on the second row, first page\n        const bsResult = 4;\n        expect(backtrackBeforeAllVisibleElements(bsResult, pages, top1)).toEqual(4);\n      });","file":"unit/ui_utils_spec.js","skipped":false,"dir":"test"},{"name":"handles case 2","suites":["ui_utils","getVisibleElements","backtrackBeforeAllVisibleElements"],"line":425,"updatePoint":{"line":425,"column":24,"index":16867},"code":"      it(\"handles case 2\", function () {\n        const pages = makePages([[[10, 20], [10, 20], [10, 20], [10, 20]], [tallPage, shortPage, tallPage, tallPage], [[10, 50], [10, 50], [10, 50], [10, 50]], [[10, 20], [10, 20], [10, 20], [10, 20]]]);\n        // binary search would land on the second row, third page\n        const bsResult = 6;\n        expect(backtrackBeforeAllVisibleElements(bsResult, pages, top1)).toEqual(4);\n      });","file":"unit/ui_utils_spec.js","skipped":false,"dir":"test"},{"name":"handles case 3","suites":["ui_utils","getVisibleElements","backtrackBeforeAllVisibleElements"],"line":431,"updatePoint":{"line":431,"column":24,"index":17301},"code":"      it(\"handles case 3\", function () {\n        const pages = makePages([[[10, 20], [10, 20], [10, 20], [10, 20]], [tallPage, shortPage, tallPage, shortPage], [[10, 50], [10, 50], [10, 50], [10, 50]], [[10, 20], [10, 20], [10, 20], [10, 20]]]);\n        // binary search would land on the third row, first page\n        const bsResult = 8;\n        expect(backtrackBeforeAllVisibleElements(bsResult, pages, top1)).toEqual(4);\n      });","file":"unit/ui_utils_spec.js","skipped":false,"dir":"test"},{"name":"handles case 4","suites":["ui_utils","getVisibleElements","backtrackBeforeAllVisibleElements"],"line":437,"updatePoint":{"line":437,"column":24,"index":17735},"code":"      it(\"handles case 4\", function () {\n        const pages = makePages([[[10, 20], [10, 20], [10, 20], [10, 20]], [tallPage, shortPage, tallPage, shortPage], [[10, 50], [10, 50], [10, 50], [10, 50]], [[10, 20], [10, 20], [10, 20], [10, 20]]]);\n        // binary search would land on the second row, first page\n        const bsResult = 4;\n        expect(backtrackBeforeAllVisibleElements(bsResult, pages, top2)).toEqual(4);\n      });","file":"unit/ui_utils_spec.js","skipped":false,"dir":"test"},{"name":"should not re-map normal Unicode values","suites":["unicode","mapSpecialUnicodeValues"],"line":20,"updatePoint":{"line":20,"column":47,"index":957},"code":"    it(\"should not re-map normal Unicode values\", function () {\n      // A\n      expect(mapSpecialUnicodeValues(0x0041)).toEqual(0x0041);\n      // fi\n      expect(mapSpecialUnicodeValues(0xfb01)).toEqual(0xfb01);\n    });","file":"unit/unicode_spec.js","skipped":false,"dir":"test"},{"name":"should re-map special Unicode values","suites":["unicode","mapSpecialUnicodeValues"],"line":26,"updatePoint":{"line":26,"column":44,"index":1175},"code":"    it(\"should re-map special Unicode values\", function () {\n      // copyrightsans => copyright\n      expect(mapSpecialUnicodeValues(0xf8e9)).toEqual(0x00a9);\n      // Private Use Area characters\n      expect(mapSpecialUnicodeValues(0xffff)).toEqual(0);\n    });","file":"unit/unicode_spec.js","skipped":false,"dir":"test"},{"name":"should correctly determine the character category","suites":["unicode","getCharUnicodeCategory"],"line":34,"updatePoint":{"line":34,"column":57,"index":1508},"code":"    it(\"should correctly determine the character category\", function () {\n      const tests = {\n        // Whitespace\n        \" \": {\n          isZeroWidthDiacritic: false,\n          isInvisibleFormatMark: false,\n          isWhitespace: true\n        },\n        \"\\t\": {\n          isZeroWidthDiacritic: false,\n          isInvisibleFormatMark: false,\n          isWhitespace: true\n        },\n        \"\\u2001\": {\n          isZeroWidthDiacritic: false,\n          isInvisibleFormatMark: false,\n          isWhitespace: true\n        },\n        \"\\uFEFF\": {\n          isZeroWidthDiacritic: false,\n          isInvisibleFormatMark: false,\n          isWhitespace: true\n        },\n        // Diacritic\n        \"\\u0302\": {\n          isZeroWidthDiacritic: true,\n          isInvisibleFormatMark: false,\n          isWhitespace: false\n        },\n        \"\\u0344\": {\n          isZeroWidthDiacritic: true,\n          isInvisibleFormatMark: false,\n          isWhitespace: false\n        },\n        \"\\u0361\": {\n          isZeroWidthDiacritic: true,\n          isInvisibleFormatMark: false,\n          isWhitespace: false\n        },\n        // Invisible format mark\n        \"\\u200B\": {\n          isZeroWidthDiacritic: false,\n          isInvisibleFormatMark: true,\n          isWhitespace: false\n        },\n        \"\\u200D\": {\n          isZeroWidthDiacritic: false,\n          isInvisibleFormatMark: true,\n          isWhitespace: false\n        },\n        // No whitespace or diacritic or invisible format mark\n        a: {\n          isZeroWidthDiacritic: false,\n          isInvisibleFormatMark: false,\n          isWhitespace: false\n        },\n        1: {\n          isZeroWidthDiacritic: false,\n          isInvisibleFormatMark: false,\n          isWhitespace: false\n        }\n      };\n      for (const [character, expectation] of Object.entries(tests)) {\n        expect(getCharUnicodeCategory(character)).toEqual(expectation);\n      }\n    });","file":"unit/unicode_spec.js","skipped":false,"dir":"test"},{"name":"should get Unicode values for valid glyph names","suites":["unicode","getUnicodeForGlyph"],"line":110,"updatePoint":{"line":110,"column":55,"index":3701},"code":"    it(\"should get Unicode values for valid glyph names\", function () {\n      expect(getUnicodeForGlyph(\"A\", standardMap)).toEqual(0x0041);\n      expect(getUnicodeForGlyph(\"a1\", dingbatsMap)).toEqual(0x2701);\n    });","file":"unit/unicode_spec.js","skipped":false,"dir":"test"},{"name":"should recover Unicode values from uniXXXX/uXXXX{XX} glyph names","suites":["unicode","getUnicodeForGlyph"],"line":114,"updatePoint":{"line":114,"column":72,"index":3935},"code":"    it(\"should recover Unicode values from uniXXXX/uXXXX{XX} glyph names\", function () {\n      expect(getUnicodeForGlyph(\"uni0041\", standardMap)).toEqual(0x0041);\n      expect(getUnicodeForGlyph(\"u0041\", standardMap)).toEqual(0x0041);\n      expect(getUnicodeForGlyph(\"uni2701\", dingbatsMap)).toEqual(0x2701);\n      expect(getUnicodeForGlyph(\"u2701\", dingbatsMap)).toEqual(0x2701);\n    });","file":"unit/unicode_spec.js","skipped":false,"dir":"test"},{"name":"should not get Unicode values for invalid glyph names","suites":["unicode","getUnicodeForGlyph"],"line":120,"updatePoint":{"line":120,"column":61,"index":4313},"code":"    it(\"should not get Unicode values for invalid glyph names\", function () {\n      expect(getUnicodeForGlyph(\"Qwerty\", standardMap)).toEqual(-1);\n      expect(getUnicodeForGlyph(\"Qwerty\", dingbatsMap)).toEqual(-1);\n    });","file":"unit/unicode_spec.js","skipped":false,"dir":"test"},{"name":"should get correct Unicode range","suites":["unicode","getUnicodeRangeFor"],"line":126,"updatePoint":{"line":126,"column":40,"index":4569},"code":"    it(\"should get correct Unicode range\", function () {\n      // A (Basic Latin)\n      expect(getUnicodeRangeFor(0x0041)).toEqual(0);\n      // fi (Alphabetic Presentation Forms)\n      expect(getUnicodeRangeFor(0xfb01)).toEqual(62);\n      // Combining diacritic (Cyrillic Extended-A)\n      expect(getUnicodeRangeFor(0x2dff)).toEqual(9);\n    });","file":"unit/unicode_spec.js","skipped":false,"dir":"test"},{"name":"should not get a Unicode range","suites":["unicode","getUnicodeRangeFor"],"line":134,"updatePoint":{"line":134,"column":38,"index":4912},"code":"    it(\"should not get a Unicode range\", function () {\n      expect(getUnicodeRangeFor(0xaa60)).toEqual(-1);\n    });","file":"unit/unicode_spec.js","skipped":false,"dir":"test"},{"name":"handles non-array arguments","suites":["util","bytesToString"],"line":19,"updatePoint":{"line":19,"column":35,"index":890},"code":"    it(\"handles non-array arguments\", function () {\n      expect(function () {\n        bytesToString(null);\n      }).toThrow(new Error(\"Invalid argument for bytesToString\"));\n    });","file":"unit/util_spec.js","skipped":false,"dir":"test"},{"name":"handles array arguments with a length not exceeding the maximum","suites":["util","bytesToString"],"line":24,"updatePoint":{"line":24,"column":71,"index":1109},"code":"    it(\"handles array arguments with a length not exceeding the maximum\", function () {\n      expect(bytesToString(new Uint8Array([]))).toEqual(\"\");\n      expect(bytesToString(new Uint8Array([102, 111, 111]))).toEqual(\"foo\");\n    });","file":"unit/util_spec.js","skipped":false,"dir":"test"},{"name":"handles array arguments with a length exceeding the maximum","suites":["util","bytesToString"],"line":28,"updatePoint":{"line":28,"column":67,"index":1339},"code":"    it(\"handles array arguments with a length exceeding the maximum\", function () {\n      const length = 10000; // Larger than MAX_ARGUMENT_COUNT = 8192.\n\n      // Create an array with `length` 'a' character codes.\n      const bytes = new Uint8Array(length);\n      for (let i = 0; i < length; i++) {\n        bytes[i] = \"a\".charCodeAt(0);\n      }\n\n      // Create a string with `length` 'a' characters.\n      const string = \"a\".repeat(length);\n      expect(bytesToString(bytes)).toEqual(string);\n    });","file":"unit/util_spec.js","skipped":false,"dir":"test"},{"name":"handles array buffer values","suites":["util","isArrayBuffer"],"line":43,"updatePoint":{"line":43,"column":35,"index":1858},"code":"    it(\"handles array buffer values\", function () {\n      expect(isArrayBuffer(new ArrayBuffer(0))).toEqual(true);\n      expect(isArrayBuffer(new Uint8Array(0))).toEqual(true);\n    });","file":"unit/util_spec.js","skipped":false,"dir":"test"},{"name":"handles non-array buffer values","suites":["util","isArrayBuffer"],"line":47,"updatePoint":{"line":47,"column":39,"index":2047},"code":"    it(\"handles non-array buffer values\", function () {\n      expect(isArrayBuffer(\"true\")).toEqual(false);\n      expect(isArrayBuffer(1)).toEqual(false);\n      expect(isArrayBuffer(null)).toEqual(false);\n      expect(isArrayBuffer(undefined)).toEqual(false);\n    });","file":"unit/util_spec.js","skipped":false,"dir":"test"},{"name":"converts unsigned 32-bit integers to strings","suites":["util","string32"],"line":55,"updatePoint":{"line":55,"column":52,"index":2371},"code":"    it(\"converts unsigned 32-bit integers to strings\", function () {\n      expect(string32(0x74727565)).toEqual(\"true\");\n      expect(string32(0x74797031)).toEqual(\"typ1\");\n      expect(string32(0x4f54544f)).toEqual(\"OTTO\");\n    });","file":"unit/util_spec.js","skipped":false,"dir":"test"},{"name":"handles non-string arguments","suites":["util","stringToBytes"],"line":62,"updatePoint":{"line":62,"column":36,"index":2636},"code":"    it(\"handles non-string arguments\", function () {\n      expect(function () {\n        stringToBytes(null);\n      }).toThrow(new Error(\"Invalid argument for stringToBytes\"));\n    });","file":"unit/util_spec.js","skipped":false,"dir":"test"},{"name":"handles string arguments","suites":["util","stringToBytes"],"line":67,"updatePoint":{"line":67,"column":32,"index":2816},"code":"    it(\"handles string arguments\", function () {\n      expect(stringToBytes(\"\")).toEqual(new Uint8Array([]));\n      expect(stringToBytes(\"foo\")).toEqual(new Uint8Array([102, 111, 111]));\n    });","file":"unit/util_spec.js","skipped":false,"dir":"test"},{"name":"handles ISO Latin 1 strings","suites":["util","stringToPDFString"],"line":73,"updatePoint":{"line":73,"column":35,"index":3066},"code":"    it(\"handles ISO Latin 1 strings\", function () {\n      const str = \"\\x8Dstring\\x8E\";\n      expect(stringToPDFString(str)).toEqual(\"\\u201Cstring\\u201D\");\n    });","file":"unit/util_spec.js","skipped":false,"dir":"test"},{"name":"handles UTF-16 big-endian strings","suites":["util","stringToPDFString"],"line":77,"updatePoint":{"line":77,"column":41,"index":3236},"code":"    it(\"handles UTF-16 big-endian strings\", function () {\n      const str = \"\\xFE\\xFF\\x00\\x73\\x00\\x74\\x00\\x72\\x00\\x69\\x00\\x6E\\x00\\x67\";\n      expect(stringToPDFString(str)).toEqual(\"string\");\n    });","file":"unit/util_spec.js","skipped":false,"dir":"test"},{"name":"handles UTF-16 little-endian strings","suites":["util","stringToPDFString"],"line":81,"updatePoint":{"line":81,"column":44,"index":3439},"code":"    it(\"handles UTF-16 little-endian strings\", function () {\n      const str = \"\\xFF\\xFE\\x73\\x00\\x74\\x00\\x72\\x00\\x69\\x00\\x6E\\x00\\x67\\x00\";\n      expect(stringToPDFString(str)).toEqual(\"string\");\n    });","file":"unit/util_spec.js","skipped":false,"dir":"test"},{"name":"handles UTF-8 strings","suites":["util","stringToPDFString"],"line":85,"updatePoint":{"line":85,"column":29,"index":3627},"code":"    it(\"handles UTF-8 strings\", function () {\n      const simpleStr = \"\\xEF\\xBB\\xBF\\x73\\x74\\x72\\x69\\x6E\\x67\";\n      expect(stringToPDFString(simpleStr)).toEqual(\"string\");\n      const complexStr = \"\\xEF\\xBB\\xBF\\xE8\\xA1\\xA8\\xE3\\x83\\x9D\\xE3\\x81\\x82\\x41\\xE9\\xB7\\x97\" + \"\\xC5\\x92\\xC3\\xA9\\xEF\\xBC\\xA2\\xE9\\x80\\x8D\\xC3\\x9C\\xC3\\x9F\\xC2\\xAA\" + \"\\xC4\\x85\\xC3\\xB1\\xE4\\xB8\\x82\\xE3\\x90\\x80\\xF0\\xA0\\x80\\x80\";\n      expect(stringToPDFString(complexStr)).toEqual(\"表ポあA鷗ŒéＢ逍Üßªąñ丂㐀𠀀\");\n    });","file":"unit/util_spec.js","skipped":false,"dir":"test"},{"name":"handles empty strings","suites":["util","stringToPDFString"],"line":91,"updatePoint":{"line":91,"column":29,"index":4105},"code":"    it(\"handles empty strings\", function () {\n      // ISO Latin 1\n      const str1 = \"\";\n      expect(stringToPDFString(str1)).toEqual(\"\");\n\n      // UTF-16BE\n      const str2 = \"\\xFE\\xFF\";\n      expect(stringToPDFString(str2)).toEqual(\"\");\n\n      // UTF-16LE\n      const str3 = \"\\xFF\\xFE\";\n      expect(stringToPDFString(str3)).toEqual(\"\");\n\n      // UTF-8\n      const str4 = \"\\xEF\\xBB\\xBF\";\n      expect(stringToPDFString(str4)).toEqual(\"\");\n    });","file":"unit/util_spec.js","skipped":false,"dir":"test"},{"name":"should return an Object","suites":["util","ReadableStream"],"line":110,"updatePoint":{"line":110,"column":31,"index":4609},"code":"    it(\"should return an Object\", function () {\n      const readable = new ReadableStream();\n      expect(typeof readable).toEqual(\"object\");\n    });","file":"unit/util_spec.js","skipped":false,"dir":"test"},{"name":"should have property getReader","suites":["util","ReadableStream"],"line":114,"updatePoint":{"line":114,"column":38,"index":4766},"code":"    it(\"should have property getReader\", function () {\n      const readable = new ReadableStream();\n      expect(typeof readable.getReader).toEqual(\"function\");\n    });","file":"unit/util_spec.js","skipped":false,"dir":"test"},{"name":"should return an Object","suites":["util","URL"],"line":120,"updatePoint":{"line":120,"column":31,"index":4966},"code":"    it(\"should return an Object\", function () {\n      const url = new URL(\"https://example.com\");\n      expect(typeof url).toEqual(\"object\");\n    });","file":"unit/util_spec.js","skipped":false,"dir":"test"},{"name":"should have property `href`","suites":["util","URL"],"line":124,"updatePoint":{"line":124,"column":35,"index":5120},"code":"    it(\"should have property `href`\", function () {\n      const url = new URL(\"https://example.com\");\n      expect(typeof url.href).toEqual(\"string\");\n    });","file":"unit/util_spec.js","skipped":false,"dir":"test"},{"name":"handles invalid URLs","suites":["util","createValidAbsoluteUrl"],"line":130,"updatePoint":{"line":130,"column":28,"index":5329},"code":"    it(\"handles invalid URLs\", function () {\n      expect(createValidAbsoluteUrl(undefined, undefined)).toEqual(null);\n      expect(createValidAbsoluteUrl(null, null)).toEqual(null);\n      expect(createValidAbsoluteUrl(\"/foo\", \"/bar\")).toEqual(null);\n    });","file":"unit/util_spec.js","skipped":false,"dir":"test"},{"name":"handles URLs that do not use an allowed protocol","suites":["util","createValidAbsoluteUrl"],"line":135,"updatePoint":{"line":135,"column":56,"index":5616},"code":"    it(\"handles URLs that do not use an allowed protocol\", function () {\n      expect(createValidAbsoluteUrl(\"magnet:?foo\", null)).toEqual(null);\n    });","file":"unit/util_spec.js","skipped":false,"dir":"test"},{"name":"correctly creates a valid URL for allowed protocols","suites":["util","createValidAbsoluteUrl"],"line":138,"updatePoint":{"line":138,"column":59,"index":5773},"code":"    it(\"correctly creates a valid URL for allowed protocols\", function () {\n      // `http` protocol\n      expect(createValidAbsoluteUrl(\"http://www.mozilla.org/foo\", null)).toEqual(new URL(\"http://www.mozilla.org/foo\"));\n      expect(createValidAbsoluteUrl(\"/foo\", \"http://www.mozilla.org\")).toEqual(new URL(\"http://www.mozilla.org/foo\"));\n\n      // `https` protocol\n      expect(createValidAbsoluteUrl(\"https://www.mozilla.org/foo\", null)).toEqual(new URL(\"https://www.mozilla.org/foo\"));\n      expect(createValidAbsoluteUrl(\"/foo\", \"https://www.mozilla.org\")).toEqual(new URL(\"https://www.mozilla.org/foo\"));\n\n      // `ftp` protocol\n      expect(createValidAbsoluteUrl(\"ftp://www.mozilla.org/foo\", null)).toEqual(new URL(\"ftp://www.mozilla.org/foo\"));\n      expect(createValidAbsoluteUrl(\"/foo\", \"ftp://www.mozilla.org\")).toEqual(new URL(\"ftp://www.mozilla.org/foo\"));\n\n      // `mailto` protocol (base URLs have no meaning and should yield `null`)\n      expect(createValidAbsoluteUrl(\"mailto:foo@bar.baz\", null)).toEqual(new URL(\"mailto:foo@bar.baz\"));\n      expect(createValidAbsoluteUrl(\"/foo\", \"mailto:foo@bar.baz\")).toEqual(null);\n\n      // `tel` protocol (base URLs have no meaning and should yield `null`)\n      expect(createValidAbsoluteUrl(\"tel:+0123456789\", null)).toEqual(new URL(\"tel:+0123456789\"));\n      expect(createValidAbsoluteUrl(\"/foo\", \"tel:0123456789\")).toEqual(null);\n    });","file":"unit/util_spec.js","skipped":false,"dir":"test"},{"name":"should resolve with correct data","suites":["util","PromiseCapability"],"line":161,"updatePoint":{"line":161,"column":40,"index":7208},"code":"    it(\"should resolve with correct data\", async function () {\n      const promiseCapability = new PromiseCapability();\n      expect(promiseCapability.settled).toEqual(false);\n      promiseCapability.resolve({\n        test: \"abc\"\n      });\n      const data = await promiseCapability.promise;\n      expect(promiseCapability.settled).toEqual(true);\n      expect(data).toEqual({\n        test: \"abc\"\n      });\n    });","file":"unit/util_spec.js","skipped":false,"dir":"test"},{"name":"should reject with correct reason","suites":["util","PromiseCapability"],"line":173,"updatePoint":{"line":173,"column":41,"index":7623},"code":"    it(\"should reject with correct reason\", async function () {\n      const promiseCapability = new PromiseCapability();\n      expect(promiseCapability.settled).toEqual(false);\n      promiseCapability.reject(new Error(\"reason\"));\n      try {\n        await promiseCapability.promise;\n\n        // Shouldn't get here.\n        expect(false).toEqual(true);\n      } catch (reason) {\n        expect(promiseCapability.settled).toEqual(true);\n        expect(reason instanceof Error).toEqual(true);\n        expect(reason.message).toEqual(\"reason\");\n      }\n    });","file":"unit/util_spec.js","skipped":false,"dir":"test"},{"name":"should get a correctly formatted date","suites":["util","getModificationDate"],"line":190,"updatePoint":{"line":190,"column":45,"index":8236},"code":"    it(\"should get a correctly formatted date\", function () {\n      const date = new Date(Date.UTC(3141, 5, 9, 2, 6, 53));\n      expect(getModificationDate(date)).toEqual(\"31410609020653\");\n    });","file":"unit/util_spec.js","skipped":false,"dir":"test"},{"name":"should update a file with new objects","suites":["Writer","Incremental update"],"line":22,"updatePoint":{"line":22,"column":45,"index":978},"code":"    it(\"should update a file with new objects\", async function () {\n      const originalData = new Uint8Array();\n      const newRefs = [{\n        ref: Ref.get(123, 0x2d),\n        data: \"abc\\n\"\n      }, {\n        ref: Ref.get(456, 0x4e),\n        data: \"defg\\n\"\n      }];\n      const xrefInfo = {\n        newRef: Ref.get(789, 0),\n        startXRef: 314,\n        fileIds: [\"id\", \"\"],\n        rootRef: null,\n        infoRef: null,\n        encryptRef: null,\n        filename: \"foo.pdf\",\n        info: {}\n      };\n      let data = await incrementalUpdate({\n        originalData,\n        xrefInfo,\n        newRefs\n      });\n      data = bytesToString(data);\n      const expected = \"\\nabc\\n\" + \"defg\\n\" + \"789 0 obj\\n\" + \"<< /Size 790 /Prev 314 /Type /XRef /Index [0 1 123 1 456 1 789 1] \" + \"/ID [(id) (\\x01#Eg\\x89\\xab\\xcd\\xef\\xfe\\xdc\\xba\\x98vT2\\x10)] \" + \"/W [1 1 2] /Length 16>> stream\\n\" + \"\\x00\\x01\\xff\\xff\" + \"\\x01\\x01\\x00\\x2d\" + \"\\x01\\x05\\x00\\x4e\" + \"\\x01\\x0a\\x00\\x00\\n\" + \"endstream\\n\" + \"endobj\\n\" + \"startxref\\n\" + \"10\\n\" + \"%%EOF\\n\";\n      expect(data).toEqual(expected);\n    });","file":"unit/writer_spec.js","skipped":false,"dir":"test"},{"name":"should update a file, missing the /ID-entry, with new objects","suites":["Writer","Incremental update"],"line":50,"updatePoint":{"line":50,"column":69,"index":2085},"code":"    it(\"should update a file, missing the /ID-entry, with new objects\", async function () {\n      const originalData = new Uint8Array();\n      const newRefs = [{\n        ref: Ref.get(123, 0x2d),\n        data: \"abc\\n\"\n      }];\n      const xrefInfo = {\n        newRef: Ref.get(789, 0),\n        startXRef: 314,\n        fileIds: null,\n        rootRef: null,\n        infoRef: null,\n        encryptRef: null,\n        filename: \"foo.pdf\",\n        info: {}\n      };\n      let data = await incrementalUpdate({\n        originalData,\n        xrefInfo,\n        newRefs\n      });\n      data = bytesToString(data);\n      const expected = \"\\nabc\\n\" + \"789 0 obj\\n\" + \"<< /Size 790 /Prev 314 /Type /XRef /Index [0 1 123 1 789 1] \" + \"/W [1 1 2] /Length 12>> stream\\n\" + \"\\x00\\x01\\xff\\xff\" + \"\\x01\\x01\\x00\\x2d\" + \"\\x01\\x05\\x00\\x00\\n\" + \"endstream\\n\" + \"endobj\\n\" + \"startxref\\n\" + \"5\\n\" + \"%%EOF\\n\";\n      expect(data).toEqual(expected);\n    });","file":"unit/writer_spec.js","skipped":false,"dir":"test"},{"name":"should write a Dict","suites":["Writer","writeDict"],"line":77,"updatePoint":{"line":77,"column":27,"index":3017},"code":"    it(\"should write a Dict\", async function () {\n      const dict = new Dict(null);\n      dict.set(\"A\", Name.get(\"B\"));\n      dict.set(\"B\", Ref.get(123, 456));\n      dict.set(\"C\", 789);\n      dict.set(\"D\", \"hello world\");\n      dict.set(\"E\", \"(hello\\\\world)\");\n      dict.set(\"F\", [1.23001, 4.50001, 6]);\n      const gdict = new Dict(null);\n      gdict.set(\"H\", 123.00001);\n      const string = \"a stream\";\n      const stream = new StringStream(string);\n      stream.dict = new Dict(null);\n      stream.dict.set(\"Length\", string.length);\n      gdict.set(\"I\", stream);\n      dict.set(\"G\", gdict);\n      dict.set(\"J\", true);\n      dict.set(\"K\", false);\n      dict.set(\"NullArr\", [null, 10]);\n      dict.set(\"NullVal\", null);\n      const buffer = [];\n      await writeDict(dict, buffer, null);\n      const expected = \"<< /A /B /B 123 456 R /C 789 /D (hello world) \" + \"/E (\\\\(hello\\\\\\\\world\\\\)) /F [1.23 4.5 6] \" + \"/G << /H 123 /I << /Length 8>> stream\\n\" + \"a stream\\n\" + \"endstream>> /J true /K false \" + \"/NullArr [null 10] /NullVal null>>\";\n      expect(buffer.join(\"\")).toEqual(expected);\n    });","file":"unit/writer_spec.js","skipped":false,"dir":"test"},{"name":"should write a Dict in escaping PDF names","suites":["Writer","writeDict"],"line":102,"updatePoint":{"line":102,"column":49,"index":4140},"code":"    it(\"should write a Dict in escaping PDF names\", async function () {\n      const dict = new Dict(null);\n      dict.set(\"\\xfeA#\", Name.get(\"hello\"));\n      dict.set(\"B\", Name.get(\"#hello\"));\n      dict.set(\"C\", Name.get(\"he\\xfello\\xff\"));\n      const buffer = [];\n      await writeDict(dict, buffer, null);\n      const expected = \"<< /#feA#23 /hello /B /#23hello /C /he#fello#ff>>\";\n      expect(buffer.join(\"\")).toEqual(expected);\n    });","file":"unit/writer_spec.js","skipped":false,"dir":"test"},{"name":"should update AcroForm when no datasets in XFA array","suites":["Writer","XFA"],"line":114,"updatePoint":{"line":114,"column":60,"index":4631},"code":"    it(\"should update AcroForm when no datasets in XFA array\", async function () {\n      const originalData = new Uint8Array();\n      const newRefs = [];\n      const acroForm = new Dict(null);\n      acroForm.set(\"XFA\", [\"preamble\", Ref.get(123, 0), \"postamble\", Ref.get(456, 0)]);\n      const acroFormRef = Ref.get(789, 0);\n      const xfaDatasetsRef = Ref.get(101112, 0);\n      const xfaData = \"<hello>world</hello>\";\n      const xrefInfo = {\n        newRef: Ref.get(131415, 0),\n        startXRef: 314,\n        fileIds: null,\n        rootRef: null,\n        infoRef: null,\n        encryptRef: null,\n        filename: \"foo.pdf\",\n        info: {}\n      };\n      let data = await incrementalUpdate({\n        originalData,\n        xrefInfo,\n        newRefs,\n        hasXfa: true,\n        xfaDatasetsRef,\n        hasXfaDatasetsEntry: false,\n        acroFormRef,\n        acroForm,\n        xfaData,\n        xref: {}\n      });\n      data = bytesToString(data);\n      const expected = \"\\n\" + \"789 0 obj\\n\" + \"<< /XFA [(preamble) 123 0 R (datasets) 101112 0 R (postamble) 456 0 R]>>\\n\" + \"endobj\\n\" + \"101112 0 obj\\n\" + \"<< /Type /EmbeddedFile /Length 20>>\\n\" + \"stream\\n\" + \"<hello>world</hello>\\n\" + \"endstream\\n\" + \"endobj\\n\" + \"131415 0 obj\\n\" + \"<< /Size 131416 /Prev 314 /Type /XRef /Index [0 1 789 1 101112 1 131415 1] /W [1 1 2] /Length 16>> stream\\n\" + \"\\u0000\\u0001ÿÿ\\u0001\\u0001\\u0000\\u0000\\u0001[\\u0000\\u0000\\u0001¹\\u0000\\u0000\\n\" + \"endstream\\n\" + \"endobj\\n\" + \"startxref\\n\" + \"185\\n\" + \"%%EOF\\n\";\n      expect(data).toEqual(expected);\n    });","file":"unit/writer_spec.js","skipped":false,"dir":"test"},{"name":"should lex numbers","suites":["FormCalc expression parser","FormCalc lexer"],"line":21,"updatePoint":{"line":21,"column":26,"index":907},"code":"    it(\"should lex numbers\", function () {\n      const lexer = new Lexer(\"1 7 12 1.2345 .7 .12345 1e-2 1.2E+3 1e2 1.2E3 nan 12. 2.e3 infinity 99999999999999999 123456789.012345678 9e99999\");\n      expect(lexer.next()).toEqual(new Token(TOKEN.number, 1));\n      expect(lexer.next()).toEqual(new Token(TOKEN.number, 7));\n      expect(lexer.next()).toEqual(new Token(TOKEN.number, 12));\n      expect(lexer.next()).toEqual(new Token(TOKEN.number, 1.2345));\n      expect(lexer.next()).toEqual(new Token(TOKEN.number, 0.7));\n      expect(lexer.next()).toEqual(new Token(TOKEN.number, 0.12345));\n      expect(lexer.next()).toEqual(new Token(TOKEN.number, 1e-2));\n      expect(lexer.next()).toEqual(new Token(TOKEN.number, 1.2e3));\n      expect(lexer.next()).toEqual(new Token(TOKEN.number, 1e2));\n      expect(lexer.next()).toEqual(new Token(TOKEN.number, 1.2e3));\n      expect(lexer.next()).toEqual(new Token(TOKEN.number, NaN));\n      expect(lexer.next()).toEqual(new Token(TOKEN.number, 12));\n      expect(lexer.next()).toEqual(new Token(TOKEN.number, 2e3));\n      expect(lexer.next()).toEqual(new Token(TOKEN.number, Infinity));\n      expect(lexer.next()).toEqual(new Token(TOKEN.number, 100000000000000000));\n      expect(lexer.next()).toEqual(new Token(TOKEN.number, 123456789.01234567));\n      expect(lexer.next()).toEqual(new Token(TOKEN.number, Infinity));\n      expect(lexer.next()).toEqual(EOF);\n    });","file":"unit/xfa_formcalc_spec.js","skipped":false,"dir":"test"},{"name":"should lex strings","suites":["FormCalc expression parser","FormCalc lexer"],"line":42,"updatePoint":{"line":42,"column":26,"index":2315},"code":"    it(\"should lex strings\", function () {\n      const lexer = new Lexer(`\"hello world\" \"hello \"\"world\" \"hello \"\"world\"\" \"\"world\"\"\"\"hello\"\"\" \"hello \\\\uabcdeh \\\\Uabcd \\\\u00000123abc\" \"a \\\\a \\\\ub \\\\Uc \\\\b\"`);\n      expect(lexer.next()).toEqual(new Token(TOKEN.string, `hello world`));\n      expect(lexer.next()).toEqual(new Token(TOKEN.string, `hello \"world`));\n      expect(lexer.next()).toEqual(new Token(TOKEN.string, `hello \"world\" \"world\"\"hello\"`));\n      expect(lexer.next()).toEqual(new Token(TOKEN.string, `hello \\uabcdeh \\uabcd \\u0123abc`));\n      expect(lexer.next()).toEqual(new Token(TOKEN.string, `a \\\\a \\\\ub \\\\Uc \\\\b`));\n      expect(lexer.next()).toEqual(EOF);\n    });","file":"unit/xfa_formcalc_spec.js","skipped":false,"dir":"test"},{"name":"should lex operators","suites":["FormCalc expression parser","FormCalc lexer"],"line":51,"updatePoint":{"line":51,"column":28,"index":2999},"code":"    it(\"should lex operators\", function () {\n      const lexer = new Lexer(\"( , ) <= <> = == >= < > / * . .* .# [ ] & |\");\n      expect(lexer.next()).toEqual(new Token(TOKEN.leftParen));\n      expect(lexer.next()).toEqual(new Token(TOKEN.comma));\n      expect(lexer.next()).toEqual(new Token(TOKEN.rightParen));\n      expect(lexer.next()).toEqual(new Token(TOKEN.le));\n      expect(lexer.next()).toEqual(new Token(TOKEN.ne));\n      expect(lexer.next()).toEqual(new Token(TOKEN.assign));\n      expect(lexer.next()).toEqual(new Token(TOKEN.eq));\n      expect(lexer.next()).toEqual(new Token(TOKEN.ge));\n      expect(lexer.next()).toEqual(new Token(TOKEN.lt));\n      expect(lexer.next()).toEqual(new Token(TOKEN.gt));\n      expect(lexer.next()).toEqual(new Token(TOKEN.divide));\n      expect(lexer.next()).toEqual(new Token(TOKEN.times));\n      expect(lexer.next()).toEqual(new Token(TOKEN.dot));\n      expect(lexer.next()).toEqual(new Token(TOKEN.dotStar));\n      expect(lexer.next()).toEqual(new Token(TOKEN.dotHash));\n      expect(lexer.next()).toEqual(new Token(TOKEN.leftBracket));\n      expect(lexer.next()).toEqual(new Token(TOKEN.rightBracket));\n      expect(lexer.next()).toEqual(new Token(TOKEN.and));\n      expect(lexer.next()).toEqual(new Token(TOKEN.or));\n      expect(lexer.next()).toEqual(EOF);\n    });","file":"unit/xfa_formcalc_spec.js","skipped":false,"dir":"test"},{"name":"should skip comments","suites":["FormCalc expression parser","FormCalc lexer"],"line":74,"updatePoint":{"line":74,"column":28,"index":4314},"code":"    it(\"should skip comments\", function () {\n      const lexer = new Lexer(`\n\n  \\t\\t  1 \\r\\n\\r\\n\n\n  ;  blah blah blah\n\n  2\n\n  // blah blah blah blah blah\n\n\n  3\n      `);\n      expect(lexer.next()).toEqual(new Token(TOKEN.number, 1));\n      expect(lexer.next()).toEqual(new Token(TOKEN.number, 2));\n      expect(lexer.next()).toEqual(new Token(TOKEN.number, 3));\n      expect(lexer.next()).toEqual(EOF);\n    });","file":"unit/xfa_formcalc_spec.js","skipped":false,"dir":"test"},{"name":"should lex identifiers","suites":["FormCalc expression parser","FormCalc lexer"],"line":93,"updatePoint":{"line":93,"column":30,"index":4727},"code":"    it(\"should lex identifiers\", function () {\n      const lexer = new Lexer(\"eq for fore while continue hello こんにちは世界 $!hello今日は12今日は\");\n      expect(lexer.next()).toEqual(new Token(TOKEN.eq));\n      expect(lexer.next()).toEqual(new Token(TOKEN.for));\n      expect(lexer.next()).toEqual(new Token(TOKEN.identifier, \"fore\"));\n      expect(lexer.next()).toEqual(new Token(TOKEN.while));\n      expect(lexer.next()).toEqual(new Token(TOKEN.continue));\n      expect(lexer.next()).toEqual(new Token(TOKEN.identifier, \"hello\"));\n      expect(lexer.next()).toEqual(new Token(TOKEN.identifier, \"こんにちは世界\"));\n      expect(lexer.next()).toEqual(new Token(TOKEN.identifier, \"$\"));\n      expect(lexer.next()).toEqual(new Token(TOKEN.identifier, \"!hello今日は12今日は\"));\n      expect(lexer.next()).toEqual(EOF);\n    });","file":"unit/xfa_formcalc_spec.js","skipped":false,"dir":"test"},{"name":"should parse basic arithmetic expression","suites":["FormCalc expression parser","FormCalc parser"],"line":108,"updatePoint":{"line":108,"column":48,"index":5596},"code":"    it(\"should parse basic arithmetic expression\", function () {\n      const parser = new Parser(\"1 + 2 * 3\");\n      expect(parser.parse().dump()[0]).toEqual(7);\n    });","file":"unit/xfa_formcalc_spec.js","skipped":false,"dir":"test"},{"name":"should parse basic arithmetic expression with the same operator","suites":["FormCalc expression parser","FormCalc parser"],"line":112,"updatePoint":{"line":112,"column":71,"index":5789},"code":"    it(\"should parse basic arithmetic expression with the same operator\", function () {\n      const parser = new Parser(\"1 + a + 3\");\n      expect(parser.parse().dump()[0]).toEqual({\n        operator: \"+\",\n        left: {\n          operator: \"+\",\n          left: 1,\n          right: {\n            id: \"a\"\n          }\n        },\n        right: 3\n      });\n    });","file":"unit/xfa_formcalc_spec.js","skipped":false,"dir":"test"},{"name":"should parse expressions with unary operators","suites":["FormCalc expression parser","FormCalc parser"],"line":126,"updatePoint":{"line":126,"column":53,"index":6134},"code":"    it(\"should parse expressions with unary operators\", function () {\n      const parser = new Parser(`\n  s = +x + 1\n  t = -+u * 2\n  t = +-u * 2\n  u = -foo()\n      `);\n      expect(parser.parse().dump()).toEqual([{\n        assignment: \"s\",\n        expr: {\n          operator: \"+\",\n          left: {\n            operator: \"+\",\n            arg: {\n              id: \"x\"\n            }\n          },\n          right: 1\n        }\n      }, {\n        assignment: \"t\",\n        expr: {\n          operator: \"*\",\n          left: {\n            operator: \"-\",\n            arg: {\n              operator: \"+\",\n              arg: {\n                id: \"u\"\n              }\n            }\n          },\n          right: 2\n        }\n      }, {\n        assignment: \"t\",\n        expr: {\n          operator: \"*\",\n          left: {\n            operator: \"+\",\n            arg: {\n              operator: \"-\",\n              arg: {\n                id: \"u\"\n              }\n            }\n          },\n          right: 2\n        }\n      }, {\n        assignment: \"u\",\n        expr: {\n          operator: \"-\",\n          arg: {\n            callee: {\n              id: \"foo\"\n            },\n            params: []\n          }\n        }\n      }]);\n    });","file":"unit/xfa_formcalc_spec.js","skipped":false,"dir":"test"},{"name":"should parse basic expression with a string","suites":["FormCalc expression parser","FormCalc parser"],"line":188,"updatePoint":{"line":188,"column":51,"index":7348},"code":"    it(\"should parse basic expression with a string\", function () {\n      const parser = new Parser(`(5 - \"abc\") * 3`);\n      expect(parser.parse().dump()[0]).toEqual(15);\n    });","file":"unit/xfa_formcalc_spec.js","skipped":false,"dir":"test"},{"name":"should parse basic expression with a calls","suites":["FormCalc expression parser","FormCalc parser"],"line":192,"updatePoint":{"line":192,"column":50,"index":7527},"code":"    it(\"should parse basic expression with a calls\", function () {\n      const parser = new Parser(`foo(2, 3, a & b) or c * d + 1.234 / e`);\n      expect(parser.parse().dump()[0]).toEqual({\n        operator: \"||\",\n        left: {\n          callee: {\n            id: \"foo\"\n          },\n          params: [2, 3, {\n            operator: \"&&\",\n            left: {\n              id: \"a\"\n            },\n            right: {\n              id: \"b\"\n            }\n          }]\n        },\n        right: {\n          operator: \"+\",\n          left: {\n            operator: \"*\",\n            left: {\n              id: \"c\"\n            },\n            right: {\n              id: \"d\"\n            }\n          },\n          right: {\n            operator: \"/\",\n            left: 1.234,\n            right: {\n              id: \"e\"\n            }\n          }\n        }\n      });\n    });","file":"unit/xfa_formcalc_spec.js","skipped":false,"dir":"test"},{"name":"should parse basic expression with a subscript","suites":["FormCalc expression parser","FormCalc parser"],"line":231,"updatePoint":{"line":231,"column":54,"index":8391},"code":"    it(\"should parse basic expression with a subscript\", function () {\n      let parser = new Parser(`こんにちは世界[-0]`);\n      let dump = parser.parse().dump()[0];\n      expect(dump).toEqual({\n        operand: {\n          id: \"こんにちは世界\"\n        },\n        index: -0\n      });\n      expect(Object.is(-0, dump.index)).toBe(true);\n      parser = new Parser(`こんにちは世界[+0]`);\n      dump = parser.parse().dump()[0];\n      expect(dump).toEqual({\n        operand: {\n          id: \"こんにちは世界\"\n        },\n        index: +0\n      });\n      expect(Object.is(+0, dump.index)).toBe(true);\n      parser = new Parser(`こんにちは世界[*]`);\n      expect(parser.parse().dump()[0]).toEqual({\n        operand: {\n          id: \"こんにちは世界\"\n        },\n        index: {\n          special: \"*\"\n        }\n      });\n    });","file":"unit/xfa_formcalc_spec.js","skipped":false,"dir":"test"},{"name":"should parse basic expression with dots","suites":["FormCalc expression parser","FormCalc parser"],"line":260,"updatePoint":{"line":260,"column":47,"index":9163},"code":"    it(\"should parse basic expression with dots\", function () {\n      const parser = new Parser(\"a.b.c.#d..e.f..g.*\");\n      const exprlist = parser.parse();\n      expect(exprlist.expressions[0].isDotExpression()).toEqual(true);\n      expect(exprlist.dump()[0]).toEqual({\n        operator: \".\",\n        left: {\n          id: \"a\"\n        },\n        right: {\n          operator: \".\",\n          left: {\n            id: \"b\"\n          },\n          right: {\n            operator: \".#\",\n            left: {\n              id: \"c\"\n            },\n            right: {\n              operator: \"..\",\n              left: {\n                id: \"d\"\n              },\n              right: {\n                operator: \".\",\n                left: {\n                  id: \"e\"\n                },\n                right: {\n                  operator: \"..\",\n                  left: {\n                    id: \"f\"\n                  },\n                  right: {\n                    operator: \".\",\n                    left: {\n                      id: \"g\"\n                    },\n                    right: {\n                      special: \"*\"\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      });\n    });","file":"unit/xfa_formcalc_spec.js","skipped":false,"dir":"test"},{"name":"should parse var declaration with error","suites":["FormCalc expression parser","FormCalc parser"],"line":310,"updatePoint":{"line":310,"column":47,"index":10408},"code":"    it(\"should parse var declaration with error\", function () {\n      let parser = new Parser(\"var 123 = a\");\n      expect(() => parser.parse()).toThrow(new Error(Errors.var));\n      parser = new Parser(`var \"123\" = a`);\n      expect(() => parser.parse()).toThrow(new Error(Errors.var));\n      parser = new Parser(`var for var a`);\n      expect(() => parser.parse()).toThrow(new Error(Errors.var));\n    });","file":"unit/xfa_formcalc_spec.js","skipped":false,"dir":"test"},{"name":"should parse for declaration with a step","suites":["FormCalc expression parser","FormCalc parser"],"line":318,"updatePoint":{"line":318,"column":48,"index":10816},"code":"    it(\"should parse for declaration with a step\", function () {\n      const parser = new Parser(`\nvar s = 0\nfor var i = 1 upto 10 + x step 1 do\n  s = s + i * 2\nendfor`);\n      expect(parser.parse().dump()).toEqual([{\n        var: \"s\",\n        expr: 0\n      }, {\n        decl: \"for\",\n        assignment: {\n          var: \"i\",\n          expr: 1\n        },\n        type: \"upto\",\n        end: {\n          operator: \"+\",\n          left: 10,\n          right: {\n            id: \"x\"\n          }\n        },\n        step: 1,\n        body: [{\n          assignment: \"s\",\n          expr: {\n            operator: \"+\",\n            left: {\n              id: \"s\"\n            },\n            right: {\n              operator: \"*\",\n              left: {\n                id: \"i\"\n              },\n              right: 2\n            }\n          }\n        }]\n      }]);\n    });","file":"unit/xfa_formcalc_spec.js","skipped":false,"dir":"test"},{"name":"should parse for declaration without a step","suites":["FormCalc expression parser","FormCalc parser"],"line":360,"updatePoint":{"line":360,"column":51,"index":11673},"code":"    it(\"should parse for declaration without a step\", function () {\n      const parser = new Parser(`\nfor i = 1 + 2 downto 10 do\n  s = foo()\nendfor`);\n      expect(parser.parse().dump()).toEqual([{\n        decl: \"for\",\n        assignment: {\n          assignment: \"i\",\n          expr: 3\n        },\n        type: \"downto\",\n        end: 10,\n        step: null,\n        body: [{\n          assignment: \"s\",\n          expr: {\n            callee: {\n              id: \"foo\"\n            },\n            params: []\n          }\n        }]\n      }]);\n    });","file":"unit/xfa_formcalc_spec.js","skipped":false,"dir":"test"},{"name":"should parse for declaration with error","suites":["FormCalc expression parser","FormCalc parser"],"line":385,"updatePoint":{"line":385,"column":47,"index":12215},"code":"    it(\"should parse for declaration with error\", function () {\n      let parser = new Parser(\"for 123 = i upto 1 do a = 1 endfor\");\n      expect(() => parser.parse()).toThrow(new Error(Errors.assignment));\n      parser = new Parser(\"for var 123 = i upto 1 do a = 1 endfor\");\n      expect(() => parser.parse()).toThrow(new Error(Errors.assignment));\n      parser = new Parser(\"for var i = 123 upt 1 do a = 1 endfor\");\n      expect(() => parser.parse()).toThrow(new Error(Errors.for));\n      parser = new Parser(\"for var i = 123 var 1 do a = 1 endfor\");\n      expect(() => parser.parse()).toThrow(new Error(Errors.for));\n      parser = new Parser(\"for var i = 123 upto 1 step for var j = 1 do endfor do a = 1 endfor\");\n      expect(() => parser.parse()).toThrow(new Error(Errors.for));\n      parser = new Parser(\"for var i = 123 downto 1 do a = 1 endfunc\");\n      expect(() => parser.parse()).toThrow(new Error(Errors.for));\n      parser = new Parser(\"for var i = 123 downto 1 do a = 1\");\n      expect(() => parser.parse()).toThrow(new Error(Errors.for));\n    });","file":"unit/xfa_formcalc_spec.js","skipped":false,"dir":"test"},{"name":"should parse foreach declaration","suites":["FormCalc expression parser","FormCalc parser"],"line":401,"updatePoint":{"line":401,"column":40,"index":13271},"code":"    it(\"should parse foreach declaration\", function () {\n      const parser = new Parser(`\nforeach i in (a, b, c, d) do\n  s = foo()[i]\nendfor`);\n      expect(parser.parse().dump()).toEqual([{\n        decl: \"foreach\",\n        id: \"i\",\n        params: [{\n          id: \"a\"\n        }, {\n          id: \"b\"\n        }, {\n          id: \"c\"\n        }, {\n          id: \"d\"\n        }],\n        body: [{\n          assignment: \"s\",\n          expr: {\n            operand: {\n              callee: {\n                id: \"foo\"\n              },\n              params: []\n            },\n            index: {\n              id: \"i\"\n            }\n          }\n        }]\n      }]);\n    });","file":"unit/xfa_formcalc_spec.js","skipped":false,"dir":"test"},{"name":"should parse foreach declaration with error","suites":["FormCalc expression parser","FormCalc parser"],"line":434,"updatePoint":{"line":434,"column":51,"index":13949},"code":"    it(\"should parse foreach declaration with error\", function () {\n      let parser = new Parser(\"foreach 123 in (1, 2, 3) do a = 1 endfor\");\n      expect(() => parser.parse()).toThrow(new Error(Errors.foreach));\n      parser = new Parser(\"foreach foo in 1, 2, 3) do a = 1 endfor\");\n      expect(() => parser.parse()).toThrow(new Error(Errors.foreach));\n      parser = new Parser(\"foreach foo in (1, 2, 3 do a = 1 endfor\");\n      expect(() => parser.parse()).toThrow(new Error(Errors.params));\n      parser = new Parser(\"foreach foo in (1, 2 3) do a = 1 endfor\");\n      expect(() => parser.parse()).toThrow(new Error(Errors.params));\n      parser = new Parser(\"foreach foo in (1, 2, 3) od a = 1 endfor\");\n      expect(() => parser.parse()).toThrow(new Error(Errors.foreach));\n      parser = new Parser(\"foreach foo in (1, 2, 3) do a = 1 endforeach\");\n      expect(() => parser.parse()).toThrow(new Error(Errors.foreach));\n      parser = new Parser(\"foreach foo in (1, 2, 3) do a = 1  123\");\n      expect(() => parser.parse()).toThrow(new Error(Errors.foreach));\n    });","file":"unit/xfa_formcalc_spec.js","skipped":false,"dir":"test"},{"name":"should parse while declaration","suites":["FormCalc expression parser","FormCalc parser"],"line":450,"updatePoint":{"line":450,"column":38,"index":15007},"code":"    it(\"should parse while declaration\", function () {\n      const parser = new Parser(`\nwhile (1) do\n  if (0) then\n    break\n  else\n    continue\n  endif\nendwhile\n      `);\n      expect(parser.parse().dump()).toEqual([{\n        decl: \"while\",\n        condition: 1,\n        body: [{\n          decl: \"if\",\n          condition: 0,\n          then: [{\n            special: \"break\"\n          }],\n          elseif: null,\n          else: [{\n            special: \"continue\"\n          }]\n        }]\n      }]);\n    });","file":"unit/xfa_formcalc_spec.js","skipped":false,"dir":"test"},{"name":"should parse while declaration with error","suites":["FormCalc expression parser","FormCalc parser"],"line":476,"updatePoint":{"line":476,"column":49,"index":15526},"code":"    it(\"should parse while declaration with error\", function () {\n      let parser = new Parser(\"while a == 1 do a = 2 endwhile\");\n      expect(() => parser.parse()).toThrow(new Error(Errors.while));\n      parser = new Parser(\"while (a == 1 do a = 2 endwhile\");\n      expect(() => parser.parse()).toThrow(new Error(Errors.while));\n      parser = new Parser(\"while (a == 1) var a = 2 endwhile\");\n      expect(() => parser.parse()).toThrow(new Error(Errors.while));\n      parser = new Parser(\"while (a == 1) do var a = 2 end\");\n      expect(() => parser.parse()).toThrow(new Error(Errors.while));\n    });","file":"unit/xfa_formcalc_spec.js","skipped":false,"dir":"test"},{"name":"should parse do declaration","suites":["FormCalc expression parser","FormCalc parser"],"line":486,"updatePoint":{"line":486,"column":35,"index":16115},"code":"    it(\"should parse do declaration\", function () {\n      const parser = new Parser(`\ndo\n  x = 1\n; a comment in the middle of the block\n  y = 2\nend\n    `);\n      expect(parser.parse().dump()).toEqual([{\n        decl: \"block\",\n        body: [{\n          assignment: \"x\",\n          expr: 1\n        }, {\n          assignment: \"y\",\n          expr: 2\n        }]\n      }]);\n    });","file":"unit/xfa_formcalc_spec.js","skipped":false,"dir":"test"},{"name":"should parse do declaration with error","suites":["FormCalc expression parser","FormCalc parser"],"line":505,"updatePoint":{"line":505,"column":46,"index":16502},"code":"    it(\"should parse do declaration with error\", function () {\n      const parser = new Parser(`\ndo\n  x = 1\n  y = 2\nendfunc\n      `);\n      expect(() => parser.parse()).toThrow(new Error(Errors.block));\n    });","file":"unit/xfa_formcalc_spec.js","skipped":false,"dir":"test"},{"name":"should parse func declaration","suites":["FormCalc expression parser","FormCalc parser"],"line":514,"updatePoint":{"line":514,"column":37,"index":16704},"code":"    it(\"should parse func declaration\", function () {\n      const parser = new Parser(`\nfunc こんにちは世界123(a, b) do\n  a + b\nendfunc\n      `);\n      expect(parser.parse().dump()).toEqual([{\n        func: \"こんにちは世界123\",\n        params: [\"a\", \"b\"],\n        body: [{\n          operator: \"+\",\n          left: {\n            id: \"a\"\n          },\n          right: {\n            id: \"b\"\n          }\n        }]\n      }]);\n    });","file":"unit/xfa_formcalc_spec.js","skipped":false,"dir":"test"},{"name":"should parse func declaration with error","suites":["FormCalc expression parser","FormCalc parser"],"line":534,"updatePoint":{"line":534,"column":48,"index":17131},"code":"    it(\"should parse func declaration with error\", function () {\n      let parser = new Parser(\"func 123(a, b) do a = 1 endfunc\");\n      expect(() => parser.parse()).toThrow(new Error(Errors.func));\n      parser = new Parser(\"func foo(a, b) for a = 1 endfunc\");\n      expect(() => parser.parse()).toThrow(new Error(Errors.func));\n      parser = new Parser(\"func foo(a, b) do a = 1 endfun\");\n      expect(() => parser.parse()).toThrow(new Error(Errors.func));\n      parser = new Parser(\"func foo(a, b, c do a = 1 endfunc\");\n      expect(() => parser.parse()).toThrow(new Error(Errors.func));\n      parser = new Parser(\"func foo(a, b, 123) do a = 1 endfunc\");\n      expect(() => parser.parse()).toThrow(new Error(Errors.func));\n    });","file":"unit/xfa_formcalc_spec.js","skipped":false,"dir":"test"},{"name":"should parse if declaration","suites":["FormCalc expression parser","FormCalc parser"],"line":546,"updatePoint":{"line":546,"column":35,"index":17852},"code":"    it(\"should parse if declaration\", function () {\n      const parser = new Parser(`\n  if (a & b) then\n    var s = 1\n  endif\n\n  if (a or b) then\n    var s = 1\n  else\n    var x = 2\n  endif\n\n  if (0) then\n    s = 1\n  elseif (1) then\n    s = 2\n  elseif (2) then\n    s = 3\n  elseif (3) then\n    s = 4\n  else\n    s = 5\n  endif\n\n// a comment\n\n  if (0) then\n    s = 1\n  elseif (1) then\n    s = 2\n  endif\n      `);\n      expect(parser.parse().dump()).toEqual([{\n        decl: \"if\",\n        condition: {\n          operator: \"&&\",\n          left: {\n            id: \"a\"\n          },\n          right: {\n            id: \"b\"\n          }\n        },\n        then: [{\n          var: \"s\",\n          expr: 1\n        }],\n        elseif: null,\n        else: null\n      }, {\n        decl: \"if\",\n        condition: {\n          operator: \"||\",\n          left: {\n            id: \"a\"\n          },\n          right: {\n            id: \"b\"\n          }\n        },\n        then: [{\n          var: \"s\",\n          expr: 1\n        }],\n        elseif: null,\n        else: [{\n          var: \"x\",\n          expr: 2\n        }]\n      }, {\n        decl: \"if\",\n        condition: 0,\n        then: [{\n          assignment: \"s\",\n          expr: 1\n        }],\n        elseif: [{\n          decl: \"elseif\",\n          condition: 1,\n          then: [{\n            assignment: \"s\",\n            expr: 2\n          }]\n        }, {\n          decl: \"elseif\",\n          condition: 2,\n          then: [{\n            assignment: \"s\",\n            expr: 3\n          }]\n        }, {\n          decl: \"elseif\",\n          condition: 3,\n          then: [{\n            assignment: \"s\",\n            expr: 4\n          }]\n        }],\n        else: [{\n          assignment: \"s\",\n          expr: 5\n        }]\n      }, {\n        decl: \"if\",\n        condition: 0,\n        then: [{\n          assignment: \"s\",\n          expr: 1\n        }],\n        elseif: [{\n          decl: \"elseif\",\n          condition: 1,\n          then: [{\n            assignment: \"s\",\n            expr: 2\n          }]\n        }],\n        else: null\n      }]);\n    });","file":"unit/xfa_formcalc_spec.js","skipped":false,"dir":"test"},{"name":"should parse if declaration with error","suites":["FormCalc expression parser","FormCalc parser"],"line":666,"updatePoint":{"line":666,"column":46,"index":19929},"code":"    it(\"should parse if declaration with error\", function () {\n      let parser = new Parser(\"if foo == 1 then a = 1 endif\");\n      expect(() => parser.parse()).toThrow(new Error(Errors.if));\n      parser = new Parser(\"if (foo == 1 then a = 1 endif\");\n      expect(() => parser.parse()).toThrow(new Error(Errors.if));\n      parser = new Parser(\"if (foo == 1) then a = 1 elseiff (foo == 2) then a = 2 endif\");\n      expect(() => parser.parse()).toThrow(new Error(Errors.if));\n      parser = new Parser(\"if (foo == 1) then a = 1 elseif (foo == 2) then a = 2 end\");\n      expect(() => parser.parse()).toThrow(new Error(Errors.if));\n    });","file":"unit/xfa_formcalc_spec.js","skipped":false,"dir":"test"},{"name":"should parse som predicate","suites":["FormCalc expression parser","FormCalc parser"],"line":676,"updatePoint":{"line":676,"column":34,"index":20554},"code":"    it(\"should parse som predicate\", () => {\n      const parser = new Parser(\"a.b <= 3\");\n      const expr = parser.parse().expressions[0];\n      expect(expr.isSomPredicate()).toEqual(true);\n      expect(expr.left.isSomPredicate()).toEqual(true);\n    });","file":"unit/xfa_formcalc_spec.js","skipped":false,"dir":"test"},{"name":"should parse a xfa document and create an object to represent it","suites":["XFAParser","Parse XFA"],"line":22,"updatePoint":{"line":22,"column":72,"index":1036},"code":"    it(\"should parse a xfa document and create an object to represent it\", function () {\n      const xml = `\n<?xml version=\"1.0\"?>\n<xdp:xdp xmlns:xdp=\"http://ns.adobe.com/xdp/\" uuid=\"1234\" invalid=\"foo\">\n  <config xmlns=\"http://www.xfa.org/schema/xci/3.1/\">\n    <present>\n      <pdf name=\"hello\">\n        <adobeExtensionLevel>\n          7\n        </adobeExtensionLevel>\n      </pdf>\n      <invalid><a>foobar</a></invalid>\n    </present>\n    <acrobat>\n      <submitUrl>http://a.b.c</submitUrl>\n      <acrobat7>\n        <dynamicRender>\n          forbidden\n        </dynamicRender>\n      </acrobat7>\n      <autoSave>enabled</autoSave>\n      <submitUrl>\n                 http://d.e.f\n      </submitUrl>\n      <submitUrl>http://g.h.i</submitUrl>\n      <validate>foobar</validate>\n    </acrobat>\n  </config>\n  <template baseProfile=\"full\" xmlns=\"http://www.xfa.org/schema/xfa-template/3.3\">\n    <extras>\n      <float>1.23</float>\n      <boolean>1</boolean>\n      <integer>314</integer>\n      <float>2.71</float>\n    </extras>\n    <subform>\n      <proto>\n        <area x=\"hello\" y=\"-3.14in\" relevant=\"-foo +bar\" />\n        <color value=\"111, 222, 123\" />\n        <color value=\"111, abc, 123\" />\n        <medium imagingBBox=\"1,2in,3.4cm,5.67px\" />\n        <medium imagingBBox=\"1,2in,-3cm,4px\" />\n      </proto>\n    </subform>\n  </template>\n</xdp:xdp>\n      `;\n      const attributes = {\n        id: \"\",\n        name: \"\",\n        use: \"\",\n        usehref: \"\"\n      };\n      const mediumAttributes = {\n        id: \"\",\n        long: 0,\n        orientation: \"portrait\",\n        short: 0,\n        stock: \"\",\n        trayIn: \"auto\",\n        trayOut: \"auto\",\n        use: \"\",\n        usehref: \"\"\n      };\n      const colorAttributes = {\n        cSpace: \"SRGB\",\n        id: \"\",\n        use: \"\",\n        usehref: \"\"\n      };\n      const root = new XFAParser().parse(xml);\n      const expected = {\n        uuid: \"1234\",\n        timeStamp: \"\",\n        template: {\n          baseProfile: \"full\",\n          extras: {\n            ...attributes,\n            float: [{\n              ...attributes,\n              $content: 1.23\n            }, {\n              ...attributes,\n              $content: 2.71\n            }],\n            boolean: {\n              ...attributes,\n              $content: 1\n            },\n            integer: {\n              ...attributes,\n              $content: 314\n            }\n          },\n          subform: {\n            access: \"open\",\n            allowMacro: 0,\n            anchorType: \"topLeft\",\n            colSpan: 1,\n            columnWidths: [0],\n            h: \"\",\n            hAlign: \"left\",\n            id: \"\",\n            layout: \"position\",\n            locale: \"\",\n            maxH: 0,\n            maxW: 0,\n            mergeMode: \"consumeData\",\n            minH: 0,\n            minW: 0,\n            name: \"\",\n            presence: \"visible\",\n            relevant: [],\n            restoreState: \"manual\",\n            scope: \"name\",\n            use: \"\",\n            usehref: \"\",\n            w: \"\",\n            x: 0,\n            y: 0,\n            proto: {\n              area: {\n                ...attributes,\n                colSpan: 1,\n                x: 0,\n                y: -226.08,\n                relevant: [{\n                  excluded: true,\n                  viewname: \"foo\"\n                }, {\n                  excluded: false,\n                  viewname: \"bar\"\n                }]\n              },\n              color: [{\n                ...colorAttributes,\n                value: {\n                  r: 111,\n                  g: 222,\n                  b: 123\n                }\n              }, {\n                ...colorAttributes,\n                value: {\n                  r: 111,\n                  g: 0,\n                  b: 123\n                }\n              }],\n              medium: [{\n                ...mediumAttributes,\n                imagingBBox: {\n                  x: 1,\n                  y: 144,\n                  width: 96.3779527559055,\n                  height: 5.67\n                }\n              }, {\n                ...mediumAttributes,\n                imagingBBox: {\n                  x: -1,\n                  y: -1,\n                  width: -1,\n                  height: -1\n                }\n              }]\n            }\n          }\n        },\n        config: {\n          acrobat: {\n            acrobat7: {\n              dynamicRender: {\n                $content: \"forbidden\"\n              }\n            },\n            autoSave: {\n              $content: \"enabled\"\n            },\n            validate: {\n              $content: \"preSubmit\"\n            },\n            submitUrl: [{\n              $content: \"http://a.b.c\"\n            }, {\n              $content: \"http://d.e.f\"\n            }, {\n              $content: \"http://g.h.i\"\n            }]\n          },\n          present: {\n            pdf: {\n              name: \"hello\",\n              adobeExtensionLevel: {\n                $content: 7\n              }\n            }\n          }\n        }\n      };\n      expect(root[$dump]()).toEqual(expected);\n    });","file":"unit/xfa_parser_spec.js","skipped":false,"dir":"test"},{"name":"should parse a xfa document and check namespaces","suites":["XFAParser","Parse XFA"],"line":224,"updatePoint":{"line":224,"column":56,"index":6084},"code":"    it(\"should parse a xfa document and check namespaces\", function () {\n      const xml = `\n<?xml version=\"1.0\"?>\n<xdp:xdp xmlns:xdp=\"http://ns.adobe.com/xdp/\">\n  <config xmlns:foo=\"http:/www.foo.com\" xmlns=\"http://www.xfa.org/schema/xci/3.1/\">\n    <present xmlns=\"http://www.mozilla.org\">\n      <pdf name=\"hello\">\n        <adobeExtensionLevel>\n          7\n        </adobeExtensionLevel>\n      </pdf>\n    </present>\n    <acrobat>\n      <foo:submitUrl>http://a.b.c</foo:submitUrl>\n      <submitUrl>http://c.b.a</submitUrl>\n    </acrobat>\n  </config>\n  <template baseProfile=\"full\" xmlns=\"http://www.allizom.org\">\n    <extras>\n      <float>1.23</float>\n    </extras>\n  </template>\n</xdp:xdp>\n      `;\n      const root = new XFAParser().parse(xml);\n      const expected = {\n        uuid: \"\",\n        timeStamp: \"\",\n        config: {\n          acrobat: {\n            submitUrl: {\n              $content: \"http://c.b.a\"\n            }\n          }\n        }\n      };\n      expect(root[$dump]()).toEqual(expected);\n    });","file":"unit/xfa_parser_spec.js","skipped":false,"dir":"test"},{"name":"should parse a xfa document and parse CDATA when needed","suites":["XFAParser","Parse XFA"],"line":262,"updatePoint":{"line":262,"column":63,"index":7107},"code":"    it(\"should parse a xfa document and parse CDATA when needed\", function () {\n      const xml = `\n<?xml version=\"1.0\"?>\n<xdp:xdp xmlns:xdp=\"http://ns.adobe.com/xdp/\">\n  <template xmlns=\"http://www.xfa.org/schema/xfa-template/3.3\">\n    <subform>\n      <field>\n        <extras>\n          <exData contentType=\"text/html\" name=\"foo\">\n            <![CDATA[<body xmlns=\"http://www.w3.org/1999/xhtml\">\n              <span>hello</span></body>]]>\n          </exData>\n        </extra>\n      </field>\n    </subform>\n  </template>\n</xdp:xdp>\n      `;\n      const root = new XFAParser().parse(xml);\n      const exdata = searchNode(root, root, \"foo\")[0];\n      const body = exdata[$dump]().$content[$dump]();\n      const expected = {\n        $name: \"body\",\n        attributes: {},\n        children: [{\n          $content: \"hello\",\n          $name: \"span\",\n          attributes: {},\n          children: []\n        }]\n      };\n      expect(body).toEqual(expected);\n    });","file":"unit/xfa_parser_spec.js","skipped":false,"dir":"test"},{"name":"should parse a xfa document and apply some prototypes","suites":["XFAParser","Parse XFA"],"line":295,"updatePoint":{"line":295,"column":61,"index":8064},"code":"    it(\"should parse a xfa document and apply some prototypes\", function () {\n      const xml = `\n<?xml version=\"1.0\"?>\n<xdp:xdp xmlns:xdp=\"http://ns.adobe.com/xdp/\">\n  <template xmlns=\"http://www.xfa.org/schema/xfa-template/3.3\">\n    <subform>\n      <proto>\n        <font id=\"id1\" typeface=\"Foo\" size=\"123pt\" weight=\"bold\" posture=\"italic\">\n          <fill>\n            <color value=\"1,2,3\"/>\n          </fill>\n        </font>\n      </proto>\n      <field>\n        <font use=\"#id1\"/>\n      </field>\n      <field>\n        <font use=\"#id1\" size=\"456pt\" weight=\"bold\" posture=\"normal\">\n          <fill>\n            <color value=\"4,5,6\"/>\n          </fill>\n          <extras id=\"id2\"/>\n        </font>\n      </field>\n    </subform>\n  </template>\n</xdp:xdp>\n      `;\n      const root = new XFAParser().parse(xml)[$dump]();\n      let font = root.template.subform.field[0].font;\n      expect(font.typeface).toEqual(\"Foo\");\n      expect(font.overline).toEqual(0);\n      expect(font.size).toEqual(123);\n      expect(font.weight).toEqual(\"bold\");\n      expect(font.posture).toEqual(\"italic\");\n      expect(font.fill.color.value).toEqual({\n        r: 1,\n        g: 2,\n        b: 3\n      });\n      expect(font.extras).toEqual(undefined);\n      font = root.template.subform.field[1].font;\n      expect(font.typeface).toEqual(\"Foo\");\n      expect(font.overline).toEqual(0);\n      expect(font.size).toEqual(456);\n      expect(font.weight).toEqual(\"bold\");\n      expect(font.posture).toEqual(\"normal\");\n      expect(font.fill.color.value).toEqual({\n        r: 4,\n        g: 5,\n        b: 6\n      });\n      expect(font.extras.id).toEqual(\"id2\");\n    });","file":"unit/xfa_parser_spec.js","skipped":false,"dir":"test"},{"name":"should parse a xfa document and apply some prototypes through usehref","suites":["XFAParser","Parse XFA"],"line":349,"updatePoint":{"line":349,"column":77,"index":9717},"code":"    it(\"should parse a xfa document and apply some prototypes through usehref\", function () {\n      const xml = `\n<?xml version=\"1.0\"?>\n<xdp:xdp xmlns:xdp=\"http://ns.adobe.com/xdp/\">\n  <template xmlns=\"http://www.xfa.org/schema/xfa-template/3.3\">\n    <subform>\n      <proto>\n        <draw name=\"foo\">\n          <font typeface=\"Foo\" size=\"123pt\" weight=\"bold\" posture=\"italic\">\n            <fill>\n              <color value=\"1,2,3\"/>\n            </fill>\n          </font>\n        </draw>\n      </proto>\n      <field>\n        <font usehref=\".#som($template.#subform.foo.#font)\"/>\n      </field>\n      <field>\n        <font usehref=\".#som($template.#subform.foo.#font)\" size=\"456pt\" weight=\"bold\" posture=\"normal\">\n          <fill>\n            <color value=\"4,5,6\"/>\n          </fill>\n          <extras id=\"id2\"/>\n        </font>\n      </field>\n    </subform>\n  </template>\n</xdp:xdp>\n      `;\n      const root = new XFAParser().parse(xml)[$dump]();\n      let font = root.template.subform.field[0].font;\n      expect(font.typeface).toEqual(\"Foo\");\n      expect(font.overline).toEqual(0);\n      expect(font.size).toEqual(123);\n      expect(font.weight).toEqual(\"bold\");\n      expect(font.posture).toEqual(\"italic\");\n      expect(font.fill.color.value).toEqual({\n        r: 1,\n        g: 2,\n        b: 3\n      });\n      expect(font.extras).toEqual(undefined);\n      font = root.template.subform.field[1].font;\n      expect(font.typeface).toEqual(\"Foo\");\n      expect(font.overline).toEqual(0);\n      expect(font.size).toEqual(456);\n      expect(font.weight).toEqual(\"bold\");\n      expect(font.posture).toEqual(\"normal\");\n      expect(font.fill.color.value).toEqual({\n        r: 4,\n        g: 5,\n        b: 6\n      });\n      expect(font.extras.id).toEqual(\"id2\");\n    });","file":"unit/xfa_parser_spec.js","skipped":false,"dir":"test"},{"name":"should parse a xfa document with xhtml","suites":["XFAParser","Parse XFA"],"line":405,"updatePoint":{"line":405,"column":46,"index":11452},"code":"    it(\"should parse a xfa document with xhtml\", function () {\n      const xml = `\n<?xml version=\"1.0\"?>\n<xdp:xdp xmlns:xdp=\"http://ns.adobe.com/xdp/\">\n  <template xmlns=\"http://www.xfa.org/schema/xfa-template/3.3\">\n    <extras>\n      <text>\n        <body xmlns=\"http://www.w3.org/1999/xhtml\">\n          <p style=\"foo: bar; text-indent:0.5in; line-height:11px;bar:foo;tab-stop: left 0.5in\">\n            The first line of this paragraph is indented a half-inch.<br/>\n            Successive lines are not indented.<br/>\n            This is the last line of the paragraph.<br/>\n          </p>\n        </body>\n      </text>\n    </extras>\n  </template>\n</xdp:xdp>\n      `;\n      const root = new XFAParser().parse(xml)[$dump]();\n      const p = root.template.extras.text.$content[$getChildren]()[0];\n      expect(p.style).toEqual(\"text-indent:0.5in;line-height:11px;tab-stop:left 0.5in\");\n      expect(p[$text]()).toEqual([\" The first line of this paragraph is indented a half-inch.\\n\", \" Successive lines are not indented.\\n\", \" This is the last line of the paragraph.\\n \"].join(\"\"));\n    });","file":"unit/xfa_parser_spec.js","skipped":false,"dir":"test"},{"name":"should parse a xfa document and apply some prototypes with cycle","suites":["XFAParser","Parse XFA"],"line":429,"updatePoint":{"line":429,"column":72,"index":12567},"code":"    it(\"should parse a xfa document and apply some prototypes with cycle\", function () {\n      const xml = `\n<?xml version=\"1.0\"?>\n<xdp:xdp xmlns:xdp=\"http://ns.adobe.com/xdp/\">\n  <template xmlns=\"http://www.xfa.org/schema/xfa-template/3.3\">\n    <subform>\n      <proto>\n        <subform id=\"id1\">\n          <subform use=\"#id1\"/>\n        </subform>\n      </proto>\n    </subform>\n    <subform use=\"#id1\"/>\n  </template>\n</xdp:xdp>\n      `;\n      const root = new XFAParser().parse(xml)[$dump]();\n      const subform = root.template.subform[1];\n      expect(subform.id).toEqual(\"id1\");\n      expect(subform.subform.id).toEqual(\"id1\");\n    });","file":"unit/xfa_parser_spec.js","skipped":false,"dir":"test"},{"name":"should parse a xfa document and apply some nested prototypes","suites":["XFAParser","Parse XFA"],"line":450,"updatePoint":{"line":450,"column":68,"index":13203},"code":"    it(\"should parse a xfa document and apply some nested prototypes\", function () {\n      const xml = `\n<?xml version=\"1.0\"?>\n<xdp:xdp xmlns:xdp=\"http://ns.adobe.com/xdp/\">\n  <template xmlns=\"http://www.xfa.org/schema/xfa-template/3.3\">\n    <subform>\n      <proto>\n        <color id=\"RED\" value=\"7, 8, 9\"/>\n        <font id=\"HELV\" typeface=\"helvetica\" size=\"31pt\" weight=\"normal\" posture=\"italic\"> </font>\n        <font id=\"HELV-RED\" use=\"#HELV\">\n          <fill>\n            <color use=\"#RED\"/>\n          </fill>\n        </font>\n      </proto>\n      <field>\n        <font use=\"#HELV-RED\"/>\n      </field>\n    </subform>\n  </template>\n</xdp:xdp>\n      `;\n      const root = new XFAParser().parse(xml)[$dump]();\n      const font = root.template.subform.field.font;\n      expect(font.typeface).toEqual(\"helvetica\");\n      expect(font.overline).toEqual(0);\n      expect(font.size).toEqual(31);\n      expect(font.weight).toEqual(\"normal\");\n      expect(font.posture).toEqual(\"italic\");\n      expect(font.fill.color.value).toEqual({\n        r: 7,\n        g: 8,\n        b: 9\n      });\n    });","file":"unit/xfa_parser_spec.js","skipped":false,"dir":"test"},{"name":"should parse a xfa document and apply a prototype with content","suites":["XFAParser","Parse XFA"],"line":485,"updatePoint":{"line":485,"column":70,"index":14293},"code":"    it(\"should parse a xfa document and apply a prototype with content\", function () {\n      const xml = `\n<?xml version=\"1.0\"?>\n<xdp:xdp xmlns:xdp=\"http://ns.adobe.com/xdp/\">\n  <template xmlns=\"http://www.xfa.org/schema/xfa-template/3.3\">\n    <subform>\n      <proto>\n        <text id=\"TEXT\">default TEXT</text>\n      </proto>\n      <field>\n        <value>\n          <text use=\"#TEXT\"></text>\n        </value>\n      </field>\n      <field>\n        <value>\n          <text use=\"#TEXT\">Overriding text</text>\n        </value>\n      </field>\n    </subform>\n  </template>\n</xdp:xdp>\n      `;\n      const root = new XFAParser().parse(xml)[$dump]();\n      let field = root.template.subform.field[0];\n      expect(field.value.text.$content).toEqual(\"default TEXT\");\n      field = root.template.subform.field[1];\n      expect(field.value.text.$content).toEqual(\"Overriding text\");\n    });","file":"unit/xfa_parser_spec.js","skipped":false,"dir":"test"},{"name":"should search some nodes in a template object","suites":["XFAParser","Search in XFA"],"line":516,"updatePoint":{"line":516,"column":53,"index":15204},"code":"    it(\"should search some nodes in a template object\", function () {\n      const xml = `\n<?xml version=\"1.0\"?>\n<xdp:xdp xmlns:xdp=\"http://ns.adobe.com/xdp/\">\n    <template xmlns=\"http://www.xfa.org/schema/xfa-template/3.3\">\n      <subform name=\"Receipt\" id=\"l\">\n        <subform id=\"m\">\n          <field name=\"Description\" id=\"a\">  </field>\n          <field name=\"Units\" id=\"b\">  </field>\n          <field name=\"Unit_Price\" id=\"c\">  </field>\n          <field name=\"Total_Price\" id=\"d\">  </field>\n        </subform>\n        <subform id=\"n\">\n          <field name=\"Description\" id=\"e\">  </field>\n          <field name=\"Units\" id=\"f\">  </field>\n          <field name=\"Unit_Price\" id=\"g\">  </field>\n          <field name=\"Total_Price\" id=\"h\">  </field>\n        </subform>\n        <subform name=\"foo\" id=\"o\">\n          <field name=\"Description\" id=\"p\">  </field>\n          <field name=\"Units\" id=\"q\">  </field>\n          <field name=\"Unit_Price\" id=\"r\">  </field>\n          <field name=\"Total_Price\" id=\"s\">  </field>\n        </subform>\n        <field name=\"Sub_Total\" id=\"i\">  </field>\n        <field name=\"Tax\" id=\"j\">  </field>\n        <field name=\"Total_Price\" id=\"k\">  </field>\n      </subform>\n    </template>\n</xdp:xdp>\n        `;\n      const root = new XFAParser().parse(xml);\n      let found = root[$getChildrenByName](\"subform\", true);\n      expect(found.map(x => x.id)).toEqual([\"l\", \"m\", \"n\", \"o\"]);\n      found = root[$getChildrenByName](\"Total_Price\", true);\n      expect(found.map(x => x.id)).toEqual([\"d\", \"h\", \"s\", \"k\"]);\n      found = root.template[$getChildrenByName](\"Receipt\", false);\n      const receipt = found[0];\n      found = receipt[$getChildrenByName](\"Total_Price\", false);\n      expect(found.map(x => x.id)).toEqual([\"d\", \"h\", \"k\"]);\n      expect(receipt[$getChildrenByClass](\"name\")).toEqual(\"Receipt\");\n      const subforms = receipt[$getChildrenByClass](\"subform\");\n      expect(subforms.children.map(x => x.id)).toEqual([\"m\", \"n\", \"o\"]);\n    });","file":"unit/xfa_parser_spec.js","skipped":false,"dir":"test"},{"name":"should search some nodes in a template object using SOM","suites":["XFAParser","Search in XFA"],"line":560,"updatePoint":{"line":560,"column":63,"index":17190},"code":"    it(\"should search some nodes in a template object using SOM\", function () {\n      const xml = `\n<?xml version=\"1.0\"?>\n<xdp:xdp xmlns:xdp=\"http://ns.adobe.com/xdp/\">\n    <template xmlns=\"http://www.xfa.org/schema/xfa-template/3.3\">\n      <subform name=\"Receipt\" id=\"l\">\n        <subform id=\"m\">\n          <field name=\"Description\" id=\"a\">  </field>\n          <field name=\"Units\" id=\"b\">  </field>\n          <field name=\"Unit_Price\" id=\"c\">  </field>\n          <field name=\"Total_Price\" id=\"d\">  </field>\n        </subform>\n        <subform id=\"n\">\n          <field name=\"Description\" id=\"e\">  </field>\n          <field name=\"Units\" id=\"f\">  </field>\n          <field name=\"Unit_Price\" id=\"g\">  </field>\n          <field name=\"Total_Price\" id=\"h\">  </field>\n        </subform>\n        <subform name=\"foo\" id=\"o\">\n          <field name=\"Description\" id=\"p\">  </field>\n          <field name=\"Units\" id=\"q\">  </field>\n          <field name=\"Unit_Price\" id=\"r\">  </field>\n          <field name=\"Total_Price\" id=\"s\">  </field>\n        </subform>\n        <field name=\"Sub_Total\" id=\"i\">  </field>\n        <field name=\"Tax\" id=\"j\">  </field>\n        <field name=\"Total_Price\" id=\"k\">  </field>\n      </subform>\n    </template>\n</xdp:xdp>\n      `;\n      const root = new XFAParser().parse(xml);\n      expect(searchNode(root, null, \"$template..Description.id\")[0][$text]()).toBe(\"a\");\n      expect(searchNode(root, null, \"$template..Description.id\")[0][$text]()).toBe(\"a\");\n      expect(searchNode(root, null, \"$template..Description[0].id\")[0][$text]()).toBe(\"a\");\n      expect(searchNode(root, null, \"$template..Description[1].id\")[0][$text]()).toBe(\"e\");\n      expect(searchNode(root, null, \"$template..Description[2].id\")[0][$text]()).toBe(\"p\");\n      expect(searchNode(root, null, \"$template.Receipt.id\")[0][$text]()).toBe(\"l\");\n      expect(searchNode(root, null, \"$template.Receipt.Description[1].id\")[0][$text]()).toBe(\"e\");\n      expect(searchNode(root, null, \"$template.Receipt.Description[2]\")).toBe(null);\n      expect(searchNode(root, null, \"$template.Receipt.foo.Description.id\")[0][$text]()).toBe(\"p\");\n      expect(searchNode(root, null, \"$template.#subform.Sub_Total.id\")[0][$text]()).toBe(\"i\");\n      expect(searchNode(root, null, \"$template.#subform.Units.id\")[0][$text]()).toBe(\"b\");\n      expect(searchNode(root, null, \"$template.#subform.Units.parent.id\")[0][$text]()).toBe(\"m\");\n    });","file":"unit/xfa_parser_spec.js","skipped":false,"dir":"test"},{"name":"should search some nodes in a datasets object","suites":["XFAParser","Search in XFA"],"line":605,"updatePoint":{"line":605,"column":53,"index":19583},"code":"    it(\"should search some nodes in a datasets object\", function () {\n      const xml = `\n<?xml version=\"1.0\"?>\n<xdp:xdp xmlns:xdp=\"http://ns.adobe.com/xdp/\">\n  <xfa:datasets xmlns:xfa=\"http://www.xfa.org/schema/xfa-data/1.0/\">\n    <xfa:data>\n      <Receipt>\n        <Page>1</Page>\n        <Detail PartNo=\"GS001\">\n          <Description>Giant Slingshot</Description>\n          <Units>1</Units>\n          <Unit_Price>250.00</Unit_Price>\n          <Total_Price>250.00</Total_Price>\n        </Detail>\n        <Page>2</Page>\n        <Detail PartNo=\"RRB-LB\">\n          <Description>Road Runner Bait, large bag</Description>\n          <Units>5</Units>\n          <Unit_Price>12.00</Unit_Price>\n          <Total_Price>60.00</Total_Price>\n        </Detail>\n        <Sub_Total>310.00</Sub_Total>\n        <Tax>24.80</Tax>\n        <Total_Price>334.80</Total_Price>\n      </Receipt>\n    </xfa:data>\n  </xfa:datasets>\n</xdp:xdp>\n      `;\n      const root = new XFAParser().parse(xml);\n      const data = root.datasets.data;\n      let found = data[$getChildrenByName](\"Description\", true);\n      expect(found.map(x => x[$text]())).toEqual([\"Giant Slingshot\", \"Road Runner Bait, large bag\"]);\n      found = data[$getChildrenByName](\"Total_Price\", true);\n      expect(found.map(x => x[$text]())).toEqual([\"250.00\", \"60.00\", \"334.80\"]);\n    });","file":"unit/xfa_parser_spec.js","skipped":false,"dir":"test"},{"name":"should search some nodes using SOM from a non-root node","suites":["XFAParser","Search in XFA"],"line":641,"updatePoint":{"line":641,"column":63,"index":20920},"code":"    it(\"should search some nodes using SOM from a non-root node\", function () {\n      const xml = `\n<?xml version=\"1.0\"?>\n<xdp:xdp xmlns:xdp=\"http://ns.adobe.com/xdp/\">\n  <xfa:datasets xmlns:xfa=\"http://www.xfa.org/schema/xfa-data/1.0/\">\n    <xfa:data>\n      <Receipt>\n        <Page>1</Page>\n        <Detail PartNo=\"GS001\">\n          <Description>Giant Slingshot</Description>\n          <Units>1</Units>\n          <Unit_Price>250.00</Unit_Price>\n          <Total_Price>250.00</Total_Price>\n        </Detail>\n        <Page>2</Page>\n        <Detail PartNo=\"RRB-LB\">\n          <Description>Road Runner Bait, large bag</Description>\n          <Units>5</Units>\n          <Unit_Price>12.00</Unit_Price>\n          <Total_Price>60.00</Total_Price>\n        </Detail>\n        <Sub_Total>310.00</Sub_Total>\n        <Tax>24.80</Tax>\n        <Total_Price>334.80</Total_Price>\n      </Receipt>\n    </xfa:data>\n  </xfa:datasets>\n</xdp:xdp>\n      `;\n      const root = new XFAParser().parse(xml);\n      const [receipt] = root.datasets.data[$getChildren](\"Receipt\");\n      expect(searchNode(root, receipt, \"Detail[*].Total_Price\").map(x => x[$text]())).toEqual([\"250.00\", \"60.00\"]);\n      const [units] = searchNode(root, receipt, \"Detail[1].Units\");\n      expect(units[$text]()).toBe(\"5\");\n      let [found] = searchNode(root, units, \"Total_Price\");\n      expect(found[$text]()).toBe(\"60.00\");\n      found = searchNode(root, units, \"Total_Pric\");\n      expect(found).toEqual(null);\n    });","file":"unit/xfa_parser_spec.js","skipped":false,"dir":"test"},{"name":"should search some nodes in a datasets object using SOM","suites":["XFAParser","Search in XFA"],"line":680,"updatePoint":{"line":680,"column":63,"index":22394},"code":"    it(\"should search some nodes in a datasets object using SOM\", function () {\n      const xml = `\n<?xml version=\"1.0\"?>\n<xdp:xdp xmlns:xdp=\"http://ns.adobe.com/xdp/\">\n  <xfa:datasets xmlns:xfa=\"http://www.xfa.org/schema/xfa-data/1.0/\">\n    <xfa:data>\n      <Receipt Detail=\"Acme\">\n        <Detail>foo</Detail>\n        <Detail>bar</Detail>\n     </Receipt>\n    </xfa:data>\n  </xfa:datasets>\n</xdp:xdp>\n      `;\n      const root = new XFAParser().parse(xml);\n      expect(searchNode(root, null, \"$data.Receipt.Detail\")[0][$text]()).toBe(\"Acme\");\n      expect(searchNode(root, null, \"$data.Receipt.Detail[0]\")[0][$text]()).toBe(\"Acme\");\n      expect(searchNode(root, null, \"$data.Receipt.Detail[1]\")[0][$text]()).toBe(\"foo\");\n      expect(searchNode(root, null, \"$data.Receipt.Detail[2]\")[0][$text]()).toBe(\"bar\");\n    });","file":"unit/xfa_parser_spec.js","skipped":false,"dir":"test"},{"name":"should make a basic binding","suites":["XFAParser","Bind data into form"],"line":702,"updatePoint":{"line":702,"column":35,"index":23241},"code":"    it(\"should make a basic binding\", function () {\n      const xml = `\n<?xml version=\"1.0\"?>\n<xdp:xdp xmlns:xdp=\"http://ns.adobe.com/xdp/\">\n  <template xmlns=\"http://www.xfa.org/schema/xfa-template/3.3\">\n    <subform name=\"A\">\n      <subform name=\"B\">\n        <field name=\"C\">\n        </field>\n        <field name=\"D\">\n        </field>\n      </subform>\n    </subform>\n  </template>\n  <xfa:datasets xmlns:xfa=\"http://www.xfa.org/schema/xfa-data/1.0/\">\n    <xfa:data>\n      <A>\n        <C>xyz</C>\n      </A>\n    </xfa:data>\n  </xfa:datasets>\n</xdp:xdp>\n      `;\n      const root = new XFAParser().parse(xml);\n      const form = new Binder(root).bind();\n      expect(searchNode(form, form, \"A.B.C.value.text\")[0][$dump]().$content).toBe(\"xyz\");\n    });","file":"unit/xfa_parser_spec.js","skipped":false,"dir":"test"},{"name":"should make a basic binding and create a non-existing node","suites":["XFAParser","Bind data into form"],"line":729,"updatePoint":{"line":729,"column":66,"index":24023},"code":"    it(\"should make a basic binding and create a non-existing node\", function () {\n      const xml = `\n<?xml version=\"1.0\"?>\n<xdp:xdp xmlns:xdp=\"http://ns.adobe.com/xdp/\">\n  <template xmlns=\"http://www.xfa.org/schema/xfa-template/3.3\">\n    <subform name=\"A\" mergeMode=\"matchTemplate\">\n      <subform name=\"B\">\n        <field name=\"C\">\n        </field>\n        <field name=\"D\">\n          <value>\n            <text>foobar</text>\n          </value>\n        </field>\n      </subform>\n    </subform>\n  </template>\n  <xfa:datasets xmlns:xfa=\"http://www.xfa.org/schema/xfa-data/1.0/\">\n    <xfa:data>\n      <A>\n      </A>\n    </xfa:data>\n  </xfa:datasets>\n</xdp:xdp>\n      `;\n      const root = new XFAParser().parse(xml);\n      const binder = new Binder(root);\n      const form = binder.bind();\n      const data = binder.getData();\n      expect(searchNode(form, form, \"A.B.D.value.text\")[0][$dump]().$content).toBe(\"foobar\");\n      const expected = {\n        $name: \"A\",\n        attributes: {},\n        children: [{\n          $name: \"B\",\n          attributes: {},\n          children: [{\n            $name: \"C\",\n            attributes: {},\n            children: []\n          }, {\n            $name: \"D\",\n            attributes: {},\n            children: []\n          }]\n        }]\n      };\n      expect(searchNode(data, data, \"A\")[0][$dump]()).toEqual(expected);\n    });","file":"unit/xfa_parser_spec.js","skipped":false,"dir":"test"},{"name":"should make a basic binding and create a non-existing node with namespaceId equal to -1","suites":["XFAParser","Bind data into form"],"line":778,"updatePoint":{"line":778,"column":95,"index":25415},"code":"    it(\"should make a basic binding and create a non-existing node with namespaceId equal to -1\", function () {\n      const xml = `\n<?xml version=\"1.0\"?>\n<xdp:xdp xmlns:xdp=\"http://ns.adobe.com/xdp/\">\n  <template xmlns=\"http://www.xfa.org/schema/xfa-template/3.3\">\n    <subform name=\"A\">\n      <subform name=\"B\">\n        <field name=\"C\">\n        </field>\n        <field name=\"D\">\n          <value>\n            <text>foobar</text>\n          </value>\n        </field>\n      </subform>\n    </subform>\n  </template>\n</xdp:xdp>\n      `;\n      const root = new XFAParser().parse(xml);\n      const binder = new Binder(root);\n      const form = binder.bind();\n      const data = binder.getData();\n      expect(searchNode(form, form, \"A.B.D.value.text\")[0][$dump]().$content).toBe(\"foobar\");\n\n      // Created nodes mustn't belong to xfa:datasets namespace.\n      const expected = {\n        $name: \"A\",\n        $ns: -1,\n        attributes: {},\n        children: [{\n          $name: \"B\",\n          $ns: -1,\n          attributes: {},\n          children: [{\n            $name: \"C\",\n            $ns: -1,\n            attributes: {},\n            children: []\n          }, {\n            $name: \"D\",\n            $ns: -1,\n            attributes: {},\n            children: []\n          }]\n        }]\n      };\n      expect(searchNode(data, data, \"A\")[0][$dump]( /* hasNS */true)).toEqual(expected);\n    });","file":"unit/xfa_parser_spec.js","skipped":false,"dir":"test"},{"name":"should make another basic binding","suites":["XFAParser","Bind data into form"],"line":827,"updatePoint":{"line":827,"column":41,"index":26748},"code":"    it(\"should make another basic binding\", function () {\n      const xml = `\n<?xml version=\"1.0\"?>\n<xdp:xdp xmlns:xdp=\"http://ns.adobe.com/xdp/\">\n  <template xmlns=\"http://www.xfa.org/schema/xfa-template/3.3\">\n    <subform name=\"registration\">\n      <field name=\"first\"> </field>\n      <field name=\"last\">  </field>\n      <field name=\"apt\">  </field>\n      <field name=\"street\">  </field>\n      <field name=\"city\">  </field>\n      <field name=\"country\">  </field>\n      <field name=\"postalcode\"/>\n    </subform>\n  </template>\n  <xfa:datasets xmlns:xfa=\"http://www.xfa.org/schema/xfa-data/1.0/\">\n    <xfa:data>\n      <registration>\n        <first>Jack</first>\n        <last>Spratt</last>\n        <apt/>\n        <street>99 Candlestick Lane</street>\n        <city>London</city>\n        <country>UK</country>\n        <postalcode>SW1</postalcode>\n      </registration>\n    </xfa:data>\n  </xfa:datasets>\n</xdp:xdp>\n      `;\n      const root = new XFAParser().parse(xml);\n      const form = new Binder(root).bind();\n      expect(searchNode(form, form, \"registration.first..text\")[0][$dump]().$content).toBe(\"Jack\");\n      expect(searchNode(form, form, \"registration.last..text\")[0][$dump]().$content).toBe(\"Spratt\");\n      expect(searchNode(form, form, \"registration.apt..text\")[0][$dump]().$content).toBe(undefined);\n      expect(searchNode(form, form, \"registration.street..text\")[0][$dump]().$content).toBe(\"99 Candlestick Lane\");\n      expect(searchNode(form, form, \"registration.city..text\")[0][$dump]().$content).toBe(\"London\");\n      expect(searchNode(form, form, \"registration.country..text\")[0][$dump]().$content).toBe(\"UK\");\n      expect(searchNode(form, form, \"registration.postalcode..text\")[0][$dump]().$content).toBe(\"SW1\");\n    });","file":"unit/xfa_parser_spec.js","skipped":false,"dir":"test"},{"name":"should make basic binding with extra subform","suites":["XFAParser","Bind data into form"],"line":867,"updatePoint":{"line":867,"column":52,"index":28500},"code":"    it(\"should make basic binding with extra subform\", function () {\n      const xml = `\n<?xml version=\"1.0\"?>\n<xdp:xdp xmlns:xdp=\"http://ns.adobe.com/xdp/\">\n  <template xmlns=\"http://www.xfa.org/schema/xfa-template/3.3\">\n    <subform name=\"registration\">\n      <field name=\"first\"> </field>\n      <field name=\"last\">  </field>\n      <subform name=\"address\">\n        <field name=\"apt\">  </field>\n        <field name=\"street\">  </field>\n        <field name=\"city\">  </field>\n        <field name=\"country\">  </field>\n        <field name=\"postalcode\">  </field>\n      </subform>\n    </subform>\n  </template>\n  <xfa:datasets xmlns:xfa=\"http://www.xfa.org/schema/xfa-data/1.0/\">\n    <xfa:data>\n      <registration>\n        <first>Jack</first>\n        <last>Spratt</last>\n        <apt/>\n        <street>99 Candlestick Lane</street>\n        <city>London</city>\n        <country>UK</country>\n        <postalcode>SW1</postalcode>\n      </registration>\n    </xfa:data>\n  </xfa:datasets>\n</xdp:xdp>\n      `;\n      const root = new XFAParser().parse(xml);\n      const form = new Binder(root).bind();\n      expect(searchNode(form, form, \"registration..first..text\")[0][$dump]().$content).toBe(\"Jack\");\n      expect(searchNode(form, form, \"registration..last..text\")[0][$dump]().$content).toBe(\"Spratt\");\n      expect(searchNode(form, form, \"registration..apt..text\")[0][$dump]().$content).toBe(undefined);\n      expect(searchNode(form, form, \"registration..street..text\")[0][$dump]().$content).toBe(\"99 Candlestick Lane\");\n      expect(searchNode(form, form, \"registration..city..text\")[0][$dump]().$content).toBe(\"London\");\n      expect(searchNode(form, form, \"registration..country..text\")[0][$dump]().$content).toBe(\"UK\");\n      expect(searchNode(form, form, \"registration..postalcode..text\")[0][$dump]().$content).toBe(\"SW1\");\n    });","file":"unit/xfa_parser_spec.js","skipped":false,"dir":"test"},{"name":"should make basic binding with extra subform","suites":["XFAParser","Bind data into form"],"line":909,"updatePoint":{"line":909,"column":52,"index":30326},"code":"    it(\"should make basic binding with extra subform\", function () {\n      const xml = `\n<?xml version=\"1.0\"?>\n<xdp:xdp xmlns:xdp=\"http://ns.adobe.com/xdp/\">\n  <template xmlns=\"http://www.xfa.org/schema/xfa-template/3.3\">\n    <subform name=\"registration\" mergeMode=\"consumeData\">\n      <subform name=\"address\">\n        <field name=\"first\"/>\n        <field name=\"last\"/>\n        <field name=\"apt\"/>\n        <field name=\"street\"/>\n        <field name=\"city\"/>\n      </subform>\n    </subform>\n  </template>\n  <xfa:datasets xmlns:xfa=\"http://www.xfa.org/schema/xfa-data/1.0/\">\n    <xfa:data>\n      <registration>\n        <first>Jack</first>\n        <last>Spratt</last>\n        <address>\n          <apt>7</apt>\n          <street>99 Candlestick Lane</street>\n          <city>London</city>\n        </address>\n      </registration>\n    </xfa:data>\n  </xfa:datasets>\n</xdp:xdp>\n      `;\n      const root = new XFAParser().parse(xml);\n      const form = new Binder(root).bind();\n      expect(searchNode(form, form, \"registration..first..text\")[0][$dump]().$content).toBe(\"Jack\");\n      expect(searchNode(form, form, \"registration..last..text\")[0][$dump]().$content).toBe(\"Spratt\");\n      expect(searchNode(form, form, \"registration..apt..text\")[0][$dump]().$content).toBe(\"7\");\n      expect(searchNode(form, form, \"registration..street..text\")[0][$dump]().$content).toBe(\"99 Candlestick Lane\");\n      expect(searchNode(form, form, \"registration..city..text\")[0][$dump]().$content).toBe(\"London\");\n    });","file":"unit/xfa_parser_spec.js","skipped":false,"dir":"test"},{"name":"should make basic binding with same names in different parts","suites":["XFAParser","Bind data into form"],"line":947,"updatePoint":{"line":947,"column":68,"index":31837},"code":"    it(\"should make basic binding with same names in different parts\", function () {\n      const xml = `\n<?xml version=\"1.0\"?>\n<xdp:xdp xmlns:xdp=\"http://ns.adobe.com/xdp/\">\n  <template xmlns=\"http://www.xfa.org/schema/xfa-template/3.3\">\n    <subform name=\"application\" mergeMode=\"consumeData\">\n      <subform name=\"sponsor\">\n        <field name=\"lastname\">  </field>\n        <!-- sponsor's last name -->\n      </subform>\n      <field name=\"lastname\">  </field>\n      <!-- applicant's last name -->\n    </subform>\n  </template>\n  <xfa:datasets xmlns:xfa=\"http://www.xfa.org/schema/xfa-data/1.0/\">\n    <xfa:data>\n      <application>\n        <lastname>Abott</lastname>\n        <sponsor>\n          <lastname>Costello</lastname>\n        </sponsor>\n      </application>\n    </xfa:data>\n  </xfa:datasets>\n</xdp:xdp>\n      `;\n      const root = new XFAParser().parse(xml);\n      const form = new Binder(root).bind();\n      expect(searchNode(form, form, \"application.sponsor.lastname..text\")[0][$dump]().$content).toBe(\"Costello\");\n      expect(searchNode(form, form, \"application.lastname..text\")[0][$dump]().$content).toBe(\"Abott\");\n    });","file":"unit/xfa_parser_spec.js","skipped":false,"dir":"test"},{"name":"should make binding and create nodes in data","suites":["XFAParser","Bind data into form"],"line":978,"updatePoint":{"line":978,"column":52,"index":32956},"code":"    it(\"should make binding and create nodes in data\", function () {\n      const xml = `\n<?xml version=\"1.0\"?>\n<xdp:xdp xmlns:xdp=\"http://ns.adobe.com/xdp/\">\n  <template xmlns=\"http://www.xfa.org/schema/xfa-template/3.3\">\n    <subform name=\"root\" mergeMode=\"matchTemplate\">\n      <subform name=\"A\">\n        <field name=\"a\"/>\n        <field name=\"b\"/>\n        <subform name=\"B\">\n          <field name=\"c\"/>\n          <field name=\"d\"/>\n          <subform name=\"C\">\n            <field name=\"e\"/>\n            <field name=\"f\"/>\n          </subform>\n        </subform>\n      </subform>\n    </subform>\n  </template>\n  <xfa:datasets xmlns:xfa=\"http://www.xfa.org/schema/xfa-data/1.0/\">\n    <xfa:data>\n      <root>\n        <A>\n          <b>1</b>\n        </A>\n      </root>\n    </xfa:data>\n  </xfa:datasets>\n</xdp:xdp>\n      `;\n      const root = new XFAParser().parse(xml);\n      const binder = new Binder(root);\n      const form = binder.bind();\n      const data = binder.getData();\n      expect(searchNode(form, form, \"root..b..text\")[0][$dump]().$content).toBe(\"1\");\n      expect(searchNode(data, data, \"root.A.a\")[0][$dump]().$name).toBe(\"a\");\n      expect(searchNode(data, data, \"root.A.B.c\")[0][$dump]().$name).toBe(\"c\");\n      expect(searchNode(data, data, \"root.A.B.d\")[0][$dump]().$name).toBe(\"d\");\n      expect(searchNode(data, data, \"root.A.B.C.e\")[0][$dump]().$name).toBe(\"e\");\n      expect(searchNode(data, data, \"root.A.B.C.f\")[0][$dump]().$name).toBe(\"f\");\n    });","file":"unit/xfa_parser_spec.js","skipped":false,"dir":"test"},{"name":"should make binding and set properties","suites":["XFAParser","Bind data into form"],"line":1020,"updatePoint":{"line":1020,"column":46,"index":34421},"code":"    it(\"should make binding and set properties\", function () {\n      const xml = `\n<?xml version=\"1.0\"?>\n<xdp:xdp xmlns:xdp=\"http://ns.adobe.com/xdp/\">\n  <template xmlns=\"http://www.xfa.org/schema/xfa-template/3.3\">\n    <subform name=\"Id\">\n      <field name=\"LastName\">\n        <setProperty ref=\"$data.Main.Style.NameFont\" target=\"font.typeface\"/>\n        <setProperty ref=\"$data.Main.Style.NameSize\" target=\"font.size\"/>\n        <setProperty ref=\"$data.Main.Help.LastName\" target=\"assist.toolTip\"/>\n        <font></font>\n        <assist>\n          <toolTip>\n          </toolTip>\n        </assist>\n      </field>\n    </subform>\n  </template>\n  <xfa:datasets xmlns:xfa=\"http://www.xfa.org/schema/xfa-data/1.0/\">\n    <xfa:data>\n      <Id>\n        <LastName>foo</LastName>\n      </Id>\n      <Main>\n        <Style>\n          <NameFont>myfont</NameFont>\n          <NameSize>123.4pt</NameSize>\n        </Style>\n        <Help>\n          <LastName>Give the name!</LastName>\n        </Help>\n      </Main>\n    </xfa:data>\n  </xfa:datasets>\n</xdp:xdp>\n      `;\n      const root = new XFAParser().parse(xml);\n      const form = new Binder(root).bind();\n      expect(searchNode(form, form, \"Id.LastName..text\")[0][$dump]().$content).toBe(\"foo\");\n      expect(searchNode(form, form, \"Id.LastName.font.typeface\")[0][$text]()).toBe(\"myfont\");\n      expect(searchNode(form, form, \"Id.LastName.font.size\")[0][$text]()).toEqual(123.4);\n      expect(searchNode(form, form, \"Id.LastName.assist.toolTip\")[0][$dump]().$content).toBe(\"Give the name!\");\n    });","file":"unit/xfa_parser_spec.js","skipped":false,"dir":"test"},{"name":"should make binding and bind items","suites":["XFAParser","Bind data into form"],"line":1063,"updatePoint":{"line":1063,"column":42,"index":35954},"code":"    it(\"should make binding and bind items\", function () {\n      const xml = `\n<?xml version=\"1.0\"?>\n<xdp:xdp xmlns:xdp=\"http://ns.adobe.com/xdp/\">\n  <template xmlns=\"http://www.xfa.org/schema/xfa-template/3.3\">\n    <subform name=\"main\">\n      <field name=\"CardName\">\n        <bindItems ref=\"$data.main.ccs.cc[*]\" labelRef=\"uiname\" valueRef=\"token\"/>\n        <ui>\n          <choiceList/>\n        </ui>\n      </field>\n    </subform>\n  </template>\n  <xfa:datasets xmlns:xfa=\"http://www.xfa.org/schema/xfa-data/1.0/\">\n    <xfa:data>\n      <main>\n        <ccs>\n          <cc uiname=\"Visa\" token=\"VISA\"/>\n          <cc uiname=\"Mastercard\" token=\"MC\"/>\n          <cc uiname=\"American Express\" token=\"AMEX\"/>\n        </ccs>\n        <CardName>MC</CardName>\n      </main>\n    </xfa:data>\n  </xfa:datasets>\n</xdp:xdp>\n      `;\n      const root = new XFAParser().parse(xml);\n      const form = new Binder(root).bind();\n      expect(searchNode(form, form, \"subform.CardName.items[*].text[*]\").map(x => x[$text]())).toEqual([\"Visa\", \"Mastercard\", \"American Express\", \"VISA\", \"MC\", \"AMEX\"]);\n    });","file":"unit/xfa_parser_spec.js","skipped":false,"dir":"test"},{"name":"should make binding and bind items with a ref","suites":["XFAParser","Bind data into form"],"line":1095,"updatePoint":{"line":1095,"column":53,"index":37051},"code":"    it(\"should make binding and bind items with a ref\", function () {\n      const xml = `\n<?xml version=\"1.0\"?>\n<xdp:xdp xmlns:xdp=\"http://ns.adobe.com/xdp/\">\n  <template xmlns=\"http://www.xfa.org/schema/xfa-template/3.3\">\n    <subform name=\"main\">\n      <field name=\"CardName\">\n        <bind match=\"dataRef\" ref=\"$data.main.value\"/>\n        <bindItems ref=\"$data.main.ccs.cc[*]\" labelRef=\"uiname\" valueRef=\"token\"/>\n        <ui>\n          <choiceList/>\n        </ui>\n      </field>\n    </subform>\n  </template>\n  <xfa:datasets xmlns:xfa=\"http://www.xfa.org/schema/xfa-data/1.0/\">\n    <xfa:data>\n      <main>\n        <value>VISA</value>\n        <ccs>\n          <cc uiname=\"Visa\" token=\"VISA\"/>\n          <cc uiname=\"Mastercard\" token=\"MC\"/>\n          <cc uiname=\"American Express\" token=\"AMEX\"/>\n        </ccs>\n        <CardName>MC</CardName>\n      </main>\n    </xfa:data>\n  </xfa:datasets>\n</xdp:xdp>\n      `;\n      const root = new XFAParser().parse(xml);\n      const form = new Binder(root).bind();\n      expect(searchNode(form, form, \"subform.CardName.value.text\").map(x => x[$text]())).toEqual([\"VISA\"]);\n      expect(searchNode(form, form, \"subform.CardName.items[*].text[*]\").map(x => x[$text]())).toEqual([\"Visa\", \"Mastercard\", \"American Express\", \"VISA\", \"MC\", \"AMEX\"]);\n    });","file":"unit/xfa_parser_spec.js","skipped":false,"dir":"test"},{"name":"should make binding with occurrences in consumeData mode","suites":["XFAParser","Bind data into form"],"line":1130,"updatePoint":{"line":1130,"column":64,"index":38350},"code":"    it(\"should make binding with occurrences in consumeData mode\", function () {\n      const xml = `\n<?xml version=\"1.0\"?>\n<xdp:xdp xmlns:xdp=\"http://ns.adobe.com/xdp/\">\n  <template xmlns=\"http://www.xfa.org/schema/xfa-template/3.3\">\n    <subform name=\"root\" mergeMode=\"consumeData\">\n      <subform name=\"section\" id=\"section1\">\n        <occur min=\"0\" max=\"-1\"/>\n        <bind match=\"dataRef\" ref=\"$.section[*]\"/>\n        <field name=\"line-item\"/>\n      </subform>\n      <subform name=\"section\" id=\"section2\">\n        <occur min=\"0\" max=\"-1\"/>\n        <bind match=\"dataRef\" ref=\"$.section[*]\"/>\n        <field name=\"line-item\"/>\n      </subform>\n    </subform>\n  </template>\n  <xfa:datasets xmlns:xfa=\"http://www.xfa.org/schema/xfa-data/1.0/\">\n    <xfa:data>\n      <root>\n        <section>\n          <line-item>item1</line-item>\n        </section>\n        <section>\n          <line-item>item2</line-item>\n        </section>\n      </root>\n    </xfa:data>\n  </xfa:datasets>\n</xdp:xdp>\n      `;\n      const root = new XFAParser().parse(xml);\n      const form = new Binder(root).bind();\n      expect(searchNode(form, form, \"root.section[*].id\").map(x => x[$text]())).toEqual([\"section1\", \"section1\"]);\n      expect(searchNode(form, form, \"root.section[*].line-item..text\").map(x => x[$text]())).toEqual([\"item1\", \"item2\"]);\n    });","file":"unit/xfa_parser_spec.js","skipped":false,"dir":"test"},{"name":"should make binding with occurrences in matchTemplate mode","suites":["XFAParser","Bind data into form"],"line":1167,"updatePoint":{"line":1167,"column":66,"index":39680},"code":"    it(\"should make binding with occurrences in matchTemplate mode\", function () {\n      const xml = `\n<?xml version=\"1.0\"?>\n<xdp:xdp xmlns:xdp=\"http://ns.adobe.com/xdp/\">\n  <template xmlns=\"http://www.xfa.org/schema/xfa-template/3.3\">\n    <subform name=\"root\" mergeMode=\"matchTemplate\">\n      <subform name=\"section\" id=\"section1\">\n        <occur min=\"0\" max=\"-1\"/>\n        <bind match=\"dataRef\" ref=\"$.section[*]\"/>\n        <field name=\"line-item\"/>\n      </subform>\n      <subform name=\"section\" id=\"section2\">\n        <occur min=\"0\" max=\"-1\"/>\n        <bind match=\"dataRef\" ref=\"$.section[*]\"/>\n        <field name=\"line-item\"/>\n      </subform>\n    </subform>\n  </template>\n  <xfa:datasets xmlns:xfa=\"http://www.xfa.org/schema/xfa-data/1.0/\">\n    <xfa:data>\n      <root>\n        <section>\n          <line-item>item1</line-item>\n        </section>\n        <section>\n          <line-item>item2</line-item>\n        </section>\n      </root>\n    </xfa:data>\n  </xfa:datasets>\n</xdp:xdp>\n      `;\n      const root = new XFAParser().parse(xml);\n      const form = new Binder(root).bind();\n      expect(searchNode(form, form, \"root.section[*].id\").map(x => x[$text]())).toEqual([\"section1\", \"section1\", \"section2\", \"section2\"]);\n      expect(searchNode(form, form, \"root.section[*].line-item..text\").map(x => x[$text]())).toEqual([\"item1\", \"item2\", \"item1\", \"item2\"]);\n    });","file":"unit/xfa_parser_spec.js","skipped":false,"dir":"test"},{"name":"should make binding and create nodes in data with some bind tag","suites":["XFAParser","Bind data into form"],"line":1204,"updatePoint":{"line":1204,"column":71,"index":41059},"code":"    it(\"should make binding and create nodes in data with some bind tag\", function () {\n      const xml = `\n<?xml version=\"1.0\"?>\n<xdp:xdp xmlns:xdp=\"http://ns.adobe.com/xdp/\">\n  <template xmlns=\"http://www.xfa.org/schema/xfa-template/3.3\">\n    <subform name=\"root\" mergeMode=\"matchTemplate\">\n      <subform name=\"A\">\n        <occur max=\"-1\"/>\n        <bind ref=\"$.root.foo[*]\" match=\"dataRef\"/>\n      </subform>\n      <subform name=\"B\">\n        <occur max=\"2\"/>\n        <bind ref=\"$.root.bar[2]\" match=\"dataRef\"/>\n      </subform>\n    </subform>\n  </template>\n  <xfa:datasets xmlns:xfa=\"http://www.xfa.org/schema/xfa-data/1.0/\">\n    <xfa:data>\n      <root>\n      </root>\n    </xfa:data>\n  </xfa:datasets>\n</xdp:xdp>\n      `;\n      const root = new XFAParser().parse(xml);\n      const binder = new Binder(root);\n      binder.bind();\n      const data = binder.getData();\n      const expected = {\n        $name: \"root\",\n        children: [{\n          $name: \"root\",\n          children: [{\n            $name: \"foo\",\n            children: [],\n            attributes: {}\n          }, {\n            $name: \"bar\",\n            children: [],\n            attributes: {}\n          }, {\n            $name: \"bar\",\n            children: [],\n            attributes: {}\n          }, {\n            $name: \"bar\",\n            children: [],\n            attributes: {}\n          }],\n          attributes: {}\n        }],\n        attributes: {}\n      };\n      expect(searchNode(data, data, \"root\")[0][$dump]()).toEqual(expected);\n    });","file":"unit/xfa_parser_spec.js","skipped":false,"dir":"test"},{"name":"should make a binding with a bindItems","suites":["XFAParser","Bind data into form"],"line":1259,"updatePoint":{"line":1259,"column":46,"index":42549},"code":"    it(\"should make a binding with a bindItems\", function () {\n      const xml = `\n<?xml version=\"1.0\"?>\n<xdp:xdp xmlns:xdp=\"http://ns.adobe.com/xdp/\">\n  <template xmlns=\"http://www.xfa.org/schema/xfa-template/3.3\">\n    <subform name=\"A\" mergeMode=\"matchTemplate\">\n      <subform name=\"B\">\n        <field name=\"C\">\n          <ui>\n            <choicelist/>\n          </ui>\n          <bindItems ref=\"xfa.datasets.foo.bar[*]\" labelRef=\"$\" valueRef=\"oof\"/>\n        </field>\n      </subform>\n    </subform>\n  </template>\n  <xfa:datasets xmlns:xfa=\"http://www.xfa.org/schema/xfa-data/1.0/\">\n    <foo>\n      <bar oof=\"a\">1</bar>\n      <bar oof=\"b\">2</bar>\n      <bar oof=\"c\">3</bar>\n      <bar oof=\"d\">4</bar>\n      <bar oof=\"e\">5</bar>\n    </foo>\n    <xfa:data>\n      <A><B></B></A>\n    </xfa:data>\n  </xfa:datasets>\n</xdp:xdp>\n      `;\n      const root = new XFAParser().parse(xml);\n      const form = new Binder(root).bind();\n      expect(searchNode(form, form, \"A.B.C.items[0].text[*]\").map(x => x[$dump]().$content)).toEqual([\"1\", \"2\", \"3\", \"4\", \"5\"]);\n      expect(searchNode(form, form, \"A.B.C.items[1].text[*]\").map(x => x[$dump]().$content)).toEqual([\"a\", \"b\", \"c\", \"d\", \"e\"]);\n    });","file":"unit/xfa_parser_spec.js","skipped":false,"dir":"test"},{"name":"should make a binding with a element in an area","suites":["XFAParser","Bind data into form"],"line":1295,"updatePoint":{"line":1295,"column":53,"index":43750},"code":"  it(\"should make a binding with a element in an area\", function () {\n    const xml = `\n<?xml version=\"1.0\"?>\n<xdp:xdp xmlns:xdp=\"http://ns.adobe.com/xdp/\">\n  <template xmlns=\"http://www.xfa.org/schema/xfa-template/3.3\">\n    <subform name=\"A\" mergeMode=\"matchTemplate\">\n      <area>\n        <field name=\"B\"/>\n      </area>\n    </subform>\n  </template>\n  <xfa:datasets xmlns:xfa=\"http://www.xfa.org/schema/xfa-data/1.0/\">\n    <xfa:data>\n      <A><B>foobar</B></A>\n    </xfa:data>\n  </xfa:datasets>\n</xdp:xdp>\n    `;\n    const root = new XFAParser().parse(xml);\n    const form = new Binder(root).bind();\n    expect(searchNode(form, form, \"A..B..text\")[0][$dump]().$content).toBe(\"foobar\");\n  });","file":"unit/xfa_parser_spec.js","skipped":false,"dir":"test"},{"name":"should serialize data with an annotationStorage","suites":["Data serializer"],"line":21,"updatePoint":{"line":21,"column":53,"index":927},"code":"  it(\"should serialize data with an annotationStorage\", function () {\n    const xml = `\n<?xml version=\"1.0\"?>\n<xdp:xdp xmlns:xdp=\"http://ns.adobe.com/xdp/\">\n  <xfa:datasets xmlns:xfa=\"http://www.xfa.org/schema/xfa-data/1.0/\">\n    <foo>bar</foo>\n    <xfa:data>\n      <Receipt>\n        <Page>1</Page>\n        <Detail PartNo=\"GS001\">\n          <Description>Giant Slingshot</Description>\n          <Units>1</Units>\n          <Unit_Price>250.00</Unit_Price>\n          <Total_Price>250.00</Total_Price>\n          <àé></àé>\n        </Detail>\n        <Page>2</Page>\n        <Detail PartNo=\"RRB-LB\">\n          <Description>Road Runner Bait, large bag</Description>\n          <Units>5</Units>\n          <Unit_Price>12.00</Unit_Price>\n          <Total_Price>60.00</Total_Price>\n        </Detail>\n        <Sub_Total>310.00</Sub_Total>\n        <Tax>24.80</Tax>\n        <Total_Price>334.80</Total_Price>\n      </Receipt>\n    </xfa:data>\n    <bar>foo</bar>\n  </xfa:datasets>\n</xdp:xdp>\n    `;\n    const root = new XFAParser().parse(xml);\n    const data = root.datasets.data;\n    const dataHandler = new DataHandler(root, data);\n    const storage = new Map();\n    for (const [path, value] of [[\"Receipt.Detail[0].Units\", \"12&3\"], [\"Receipt.Detail[0].Unit_Price\", \"456>\"], [\"Receipt.Detail[0].Total_Price\", \"789\"], [\"Receipt.Detail[0].àé\", \"1011\"], [\"Receipt.Detail[1].PartNo\", \"foo-bar😀\"], [\"Receipt.Detail[1].Description\", \"hello world\"]]) {\n      storage.set(searchNode(root, data, path)[0][$uid], {\n        value\n      });\n    }\n    const serialized = dataHandler.serialize(storage);\n    const expected = `<xfa:datasets xmlns:xfa=\"http://www.xfa.org/schema/xfa-data/1.0/\"><foo>bar</foo><bar>foo</bar><xfa:data><Receipt><Page>1</Page><Detail PartNo=\"GS001\"><Description>Giant Slingshot</Description><Units>12&amp;3</Units><Unit_Price>456&gt;</Unit_Price><Total_Price>789</Total_Price><\\xC3\\xA0\\xC3\\xA9>1011</\\xC3\\xA0\\xC3\\xA9></Detail><Page>2</Page><Detail PartNo=\"foo-bar&#x1F600;\"><Description>hello world</Description><Units>5</Units><Unit_Price>12.00</Unit_Price><Total_Price>60.00</Total_Price></Detail><Sub_Total>310.00</Sub_Total><Tax>24.80</Tax><Total_Price>334.80</Total_Price></Receipt></xfa:data></xfa:datasets>`;\n    expect(serialized).toEqual(expected);\n  });","file":"unit/xfa_serialize_data_spec.js","skipped":false,"dir":"test"},{"name":"should convert some basic properties to CSS","suites":["XFAFactory","toHTML"],"line":37,"updatePoint":{"line":37,"column":51,"index":1342},"code":"    it(\"should convert some basic properties to CSS\", async () => {\n      const xml = `\n<?xml version=\"1.0\"?>\n<xdp:xdp xmlns:xdp=\"http://ns.adobe.com/xdp/\">\n  <template xmlns=\"http://www.xfa.org/schema/xfa-template/3.3\">\n    <subform name=\"root\" mergeMode=\"matchTemplate\">\n      <pageSet>\n        <pageArea>\n          <contentArea x=\"123pt\" w=\"456pt\" h=\"789pt\"/>\n          <medium stock=\"default\" short=\"456pt\" long=\"789pt\"/>\n          <draw y=\"1pt\" w=\"11pt\" h=\"22pt\" rotate=\"90\" x=\"2pt\">\n            <assist><toolTip>A tooltip !!</toolTip></assist>\n            <font size=\"7pt\" typeface=\"FooBar\" baselineShift=\"2pt\">\n              <fill>\n                <color value=\"12,23,34\"/>\n                <solid/>\n              </fill>\n            </font>\n            <value/>\n            <margin topInset=\"1pt\" bottomInset=\"2pt\" leftInset=\"3pt\" rightInset=\"4pt\"/>\n            <para spaceAbove=\"1pt\" spaceBelow=\"2pt\" textIndent=\"3pt\" marginLeft=\"4pt\" marginRight=\"5pt\"/>\n          </draw>\n        </pageArea>\n      </pageSet>\n      <subform name=\"second\">\n        <breakBefore targetType=\"pageArea\" startNew=\"1\"/>\n        <subform>\n          <draw w=\"1pt\" h=\"1pt\"><value><text>foo</text></value></draw>\n        </subform>\n      </subform>\n      <subform name=\"third\">\n        <breakBefore targetType=\"pageArea\" startNew=\"1\"/>\n        <subform>\n          <draw w=\"1pt\" h=\"1pt\"><value><text>bar</text></value></draw>\n        </subform>\n      </subform>\n    </subform>\n  </template>\n  <xfa:datasets xmlns:xfa=\"http://www.xfa.org/schema/xfa-data/1.0/\">\n    <xfa:data>\n    </xfa:data>\n  </xfa:datasets>\n</xdp:xdp>\n      `;\n      const factory = new XFAFactory({\n        \"xdp:xdp\": xml\n      });\n      factory.setFonts([]);\n      expect(await factory.getNumPages()).toEqual(2);\n      const pages = await factory.getPages();\n      const page1 = pages.children[0];\n      expect(page1.attributes.style).toEqual({\n        height: \"789px\",\n        width: \"456px\"\n      });\n      expect(page1.children.length).toEqual(2);\n      const container = page1.children[1];\n      expect(container.attributes.class).toEqual([\"xfaContentarea\"]);\n      expect(container.attributes.style).toEqual({\n        height: \"789px\",\n        width: \"456px\",\n        left: \"123px\",\n        top: \"0px\"\n      });\n      const wrapper = page1.children[0];\n      const draw = wrapper.children[0];\n      expect(wrapper.attributes.class).toEqual([\"xfaWrapper\"]);\n      expect(wrapper.attributes.style).toEqual({\n        alignSelf: \"start\",\n        height: \"22px\",\n        left: \"2px\",\n        position: \"absolute\",\n        top: \"1px\",\n        transform: \"rotate(-90deg)\",\n        transformOrigin: \"top left\",\n        width: \"11px\"\n      });\n      expect(draw.attributes.class).toEqual([\"xfaDraw\", \"xfaFont\", \"xfaWrapped\"]);\n      expect(draw.attributes.title).toEqual(\"A tooltip !!\");\n      expect(draw.attributes.style).toEqual({\n        color: \"#0c1722\",\n        fontFamily: '\"FooBar\"',\n        fontKerning: \"none\",\n        letterSpacing: \"0px\",\n        fontStyle: \"normal\",\n        fontWeight: \"normal\",\n        fontSize: \"6.93px\",\n        padding: \"1px 4px 2px 3px\",\n        verticalAlign: \"2px\"\n      });\n\n      // draw element must be on each page.\n      expect(draw.attributes.style).toEqual(pages.children[1].children[0].children[0].attributes.style);\n    });","file":"unit/xfa_tohtml_spec.js","skipped":false,"dir":"test"},{"name":"should have an alt attribute from toolTip","suites":["XFAFactory","toHTML"],"line":131,"updatePoint":{"line":131,"column":49,"index":4657},"code":"    it(\"should have an alt attribute from toolTip\", async () => {\n      if (isNodeJS) {\n        pending(\"Image is not supported in Node.js.\");\n      }\n      const xml = `\n<?xml version=\"1.0\"?>\n<xdp:xdp xmlns:xdp=\"http://ns.adobe.com/xdp/\">\n  <template xmlns=\"http://www.xfa.org/schema/xfa-template/3.3\">\n    <subform name=\"root\" mergeMode=\"matchTemplate\">\n      <pageSet>\n        <pageArea>\n          <contentArea x=\"0pt\" w=\"456pt\" h=\"789pt\"/>\n          <draw name=\"BA-Logo\" y=\"5.928mm\" x=\"128.388mm\" w=\"71.237mm\" h=\"9.528mm\">\n            <value>\n              <image contentType=\"image/png\">iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVQYV2NgYAAAAAMAAWgmWQ0AAAAASUVORK5CYII=</image>\n            </value>\n            <assist><toolTip>alt text</toolTip></assist>\n          </draw>\n        </pageArea>\n      </pageSet>\n    </subform>\n  </template>\n  <xfa:datasets xmlns:xfa=\"http://www.xfa.org/schema/xfa-data/1.0/\">\n    <xfa:data>\n    </xfa:data>\n  </xfa:datasets>\n</xdp:xdp>\n      `;\n      const factory = new XFAFactory({\n        \"xdp:xdp\": xml\n      });\n      expect(await factory.getNumPages()).toEqual(1);\n      const pages = await factory.getPages();\n      const field = searchHtmlNode(pages, \"name\", \"img\");\n      expect(field.attributes.alt).toEqual(\"alt text\");\n    });","file":"unit/xfa_tohtml_spec.js","skipped":false,"dir":"test"},{"name":"should have a aria heading role and level","suites":["XFAFactory","toHTML"],"line":167,"updatePoint":{"line":167,"column":49,"index":5944},"code":"    it(\"should have a aria heading role and level\", async () => {\n      const xml = `\n<?xml version=\"1.0\"?>\n<xdp:xdp xmlns:xdp=\"http://ns.adobe.com/xdp/\">\n  <template xmlns=\"http://www.xfa.org/schema/xfa-template/3.3\">\n    <subform name=\"root\" mergeMode=\"matchTemplate\">\n      <pageSet>\n        <pageArea>\n          <contentArea x=\"0pt\" w=\"456pt\" h=\"789pt\"/>\n          <medium stock=\"default\" short=\"456pt\" long=\"789pt\"/>\n          <draw name=\"BA-Logo\" y=\"5.928mm\" x=\"128.388mm\" w=\"71.237mm\" h=\"9.528mm\">\n            <value><text>foo</text></value>\n            <assist role=\"H2\"></assist>\n          </draw>\n        </pageArea>\n      </pageSet>\n    </subform>\n  </template>\n  <xfa:datasets xmlns:xfa=\"http://www.xfa.org/schema/xfa-data/1.0/\">\n    <xfa:data>\n    </xfa:data>\n  </xfa:datasets>\n</xdp:xdp>\n      `;\n      const factory = new XFAFactory({\n        \"xdp:xdp\": xml\n      });\n      expect(await factory.getNumPages()).toEqual(1);\n      const pages = await factory.getPages();\n      const page1 = pages.children[0];\n      const wrapper = page1.children[0];\n      const draw = wrapper.children[0];\n      expect(draw.attributes.role).toEqual(\"heading\");\n      expect(draw.attributes[\"aria-level\"]).toEqual(\"2\");\n    });","file":"unit/xfa_tohtml_spec.js","skipped":false,"dir":"test"},{"name":"should have aria table role","suites":["XFAFactory","toHTML"],"line":202,"updatePoint":{"line":202,"column":35,"index":7154},"code":"    it(\"should have aria table role\", async () => {\n      const xml = `\n<?xml version=\"1.0\"?>\n<xdp:xdp xmlns:xdp=\"http://ns.adobe.com/xdp/\">\n  <template xmlns=\"http://www.xfa.org/schema/xfa-template/3.3\">\n    <subform name=\"root\" mergeMode=\"matchTemplate\">\n      <pageSet>\n        <pageArea>\n          <contentArea x=\"0pt\" w=\"456pt\" h=\"789pt\"/>\n          <medium stock=\"default\" short=\"456pt\" long=\"789pt\"/>\n          <font size=\"7pt\" typeface=\"FooBar\" baselineShift=\"2pt\">\n          </font>\n        </pageArea>\n      </pageSet>\n      <subform name=\"table\" mergeMode=\"matchTemplate\" layout=\"table\">\n        <subform layout=\"row\" name=\"row1\">\n          <assist role=\"TH\"></assist>\n          <draw name=\"header1\" y=\"5.928mm\" x=\"128.388mm\" w=\"71.237mm\" h=\"9.528mm\">\n            <value><text>Header Col 1</text></value>\n          </draw>\n          <draw name=\"header2\" y=\"5.928mm\" x=\"128.388mm\" w=\"71.237mm\" h=\"9.528mm\">\n            <value><text>Header Col 2</text></value>\n          </draw>\n        </subform>\n        <subform layout=\"row\" name=\"row2\">\n          <draw name=\"cell1\" y=\"5.928mm\" x=\"128.388mm\" w=\"71.237mm\" h=\"9.528mm\">\n            <value><text>Cell 1</text></value>\n          </draw>\n          <draw name=\"cell2\" y=\"5.928mm\" x=\"128.388mm\" w=\"71.237mm\" h=\"9.528mm\">\n            <value><text>Cell 2</text></value>\n          </draw>\n        </subform>\n      </subform>\n    </subform>\n  </template>\n  <xfa:datasets xmlns:xfa=\"http://www.xfa.org/schema/xfa-data/1.0/\">\n    <xfa:data>\n    </xfa:data>\n  </xfa:datasets>\n</xdp:xdp>\n      `;\n      const factory = new XFAFactory({\n        \"xdp:xdp\": xml\n      });\n      factory.setFonts([]);\n      expect(await factory.getNumPages()).toEqual(1);\n      const pages = await factory.getPages();\n      const table = searchHtmlNode(pages, \"xfaName\", \"table\", /* byAttributes */true);\n      expect(table.attributes.role).toEqual(\"table\");\n      const headerRow = searchHtmlNode(pages, \"xfaName\", \"row1\", /* byAttributes */true);\n      expect(headerRow.attributes.role).toEqual(\"row\");\n      const headerCell = searchHtmlNode(pages, \"xfaName\", \"header2\", /* byAttributes */true);\n      expect(headerCell.attributes.role).toEqual(\"columnheader\");\n      const row = searchHtmlNode(pages, \"xfaName\", \"row2\", /* byAttributes */true);\n      expect(row.attributes.role).toEqual(\"row\");\n      const cell = searchHtmlNode(pages, \"xfaName\", \"cell2\", /* byAttributes */true);\n      expect(cell.attributes.role).toEqual(\"cell\");\n    });","file":"unit/xfa_tohtml_spec.js","skipped":false,"dir":"test"},{"name":"should have a maxLength property","suites":["XFAFactory","toHTML"],"line":260,"updatePoint":{"line":260,"column":40,"index":9631},"code":"    it(\"should have a maxLength property\", async () => {\n      const xml = `\n<?xml version=\"1.0\"?>\n<xdp:xdp xmlns:xdp=\"http://ns.adobe.com/xdp/\">\n  <template xmlns=\"http://www.xfa.org/schema/xfa-template/3.3\">\n    <subform name=\"root\" mergeMode=\"matchTemplate\">\n      <pageSet>\n        <pageArea>\n          <contentArea x=\"0pt\" w=\"456pt\" h=\"789pt\"/>\n          <medium stock=\"default\" short=\"456pt\" long=\"789pt\"/>\n          <field y=\"1pt\" w=\"11pt\" h=\"22pt\" x=\"2pt\">\n            <ui>\n              <textEdit multiLine=\"0\"/>\n            </ui>\n            <value>\n              <text maxChars=\"123\"/>\n            </value>\n          </field>\n        </pageArea>\n      </pageSet>\n      <subform name=\"first\">\n        <draw w=\"1pt\" h=\"1pt\"><value><text>foo</text></value></draw>\n      </subform>\n    </subform>\n  </template>\n  <xfa:datasets xmlns:xfa=\"http://www.xfa.org/schema/xfa-data/1.0/\">\n    <xfa:data>\n    </xfa:data>\n  </xfa:datasets>\n</xdp:xdp>\n      `;\n      const factory = new XFAFactory({\n        \"xdp:xdp\": xml\n      });\n      expect(await factory.getNumPages()).toEqual(1);\n      const pages = await factory.getPages();\n      const field = searchHtmlNode(pages, \"name\", \"input\");\n      expect(field.attributes.maxLength).toEqual(123);\n    });","file":"unit/xfa_tohtml_spec.js","skipped":false,"dir":"test"},{"name":"should have an aria-label property from speak","suites":["XFAFactory","toHTML"],"line":299,"updatePoint":{"line":299,"column":53,"index":10895},"code":"    it(\"should have an aria-label property from speak\", async () => {\n      const xml = `\n<?xml version=\"1.0\"?>\n<xdp:xdp xmlns:xdp=\"http://ns.adobe.com/xdp/\">\n  <template xmlns=\"http://www.xfa.org/schema/xfa-template/3.3\">\n    <subform name=\"root\" mergeMode=\"matchTemplate\">\n      <pageSet>\n        <pageArea>\n          <contentArea x=\"0pt\" w=\"456pt\" h=\"789pt\"/>\n          <medium stock=\"default\" short=\"456pt\" long=\"789pt\"/>\n          <field y=\"1pt\" w=\"11pt\" h=\"22pt\" x=\"2pt\">\n            <assist><speak>Screen Reader</speak></assist>\n            <ui>\n              <textEdit multiLine=\"0\"/>\n            </ui>\n            <value>\n              <text maxChars=\"123\"/>\n            </value>\n          </field>\n        </pageArea>\n      </pageSet>\n      <subform name=\"first\">\n        <draw w=\"1pt\" h=\"1pt\"><value><text>foo</text></value></draw>\n      </subform>\n    </subform>\n  </template>\n  <xfa:datasets xmlns:xfa=\"http://www.xfa.org/schema/xfa-data/1.0/\">\n    <xfa:data>\n    </xfa:data>\n  </xfa:datasets>\n</xdp:xdp>\n      `;\n      const factory = new XFAFactory({\n        \"xdp:xdp\": xml\n      });\n      expect(await factory.getNumPages()).toEqual(1);\n      const pages = await factory.getPages();\n      const field = searchHtmlNode(pages, \"name\", \"input\");\n      expect(field.attributes[\"aria-label\"]).toEqual(\"Screen Reader\");\n    });","file":"unit/xfa_tohtml_spec.js","skipped":false,"dir":"test"},{"name":"should have an aria-label property from toolTip","suites":["XFAFactory","toHTML"],"line":339,"updatePoint":{"line":339,"column":55,"index":12235},"code":"    it(\"should have an aria-label property from toolTip\", async () => {\n      const xml = `\n<?xml version=\"1.0\"?>\n<xdp:xdp xmlns:xdp=\"http://ns.adobe.com/xdp/\">\n  <template xmlns=\"http://www.xfa.org/schema/xfa-template/3.3\">\n    <subform name=\"root\" mergeMode=\"matchTemplate\">\n      <pageSet>\n        <pageArea>\n          <contentArea x=\"0pt\" w=\"456pt\" h=\"789pt\"/>\n          <medium stock=\"default\" short=\"456pt\" long=\"789pt\"/>\n          <field y=\"1pt\" w=\"11pt\" h=\"22pt\" x=\"2pt\">\n            <assist><toolTip>Screen Reader</toolTip></assist>\n            <ui>\n              <textEdit multiLine=\"0\"/>\n            </ui>\n            <value>\n              <text maxChars=\"123\"/>\n            </value>\n          </field>\n        </pageArea>\n      </pageSet>\n      <subform name=\"first\">\n        <draw w=\"1pt\" h=\"1pt\"><value><text>foo</text></value></draw>\n      </subform>\n    </subform>\n  </template>\n  <xfa:datasets xmlns:xfa=\"http://www.xfa.org/schema/xfa-data/1.0/\">\n    <xfa:data>\n    </xfa:data>\n  </xfa:datasets>\n</xdp:xdp>\n      `;\n      const factory = new XFAFactory({\n        \"xdp:xdp\": xml\n      });\n      expect(await factory.getNumPages()).toEqual(1);\n      const pages = await factory.getPages();\n      const field = searchHtmlNode(pages, \"name\", \"input\");\n      expect(field.attributes[\"aria-label\"]).toEqual(\"Screen Reader\");\n    });","file":"unit/xfa_tohtml_spec.js","skipped":false,"dir":"test"},{"name":"should have an input or textarea","suites":["XFAFactory","toHTML"],"line":379,"updatePoint":{"line":379,"column":40,"index":13564},"code":"    it(\"should have an input or textarea\", async () => {\n      const xml = `\n<?xml version=\"1.0\"?>\n<xdp:xdp xmlns:xdp=\"http://ns.adobe.com/xdp/\">\n  <template xmlns=\"http://www.xfa.org/schema/xfa-template/3.3\">\n    <subform name=\"root\" mergeMode=\"matchTemplate\">\n      <pageSet>\n        <pageArea>\n          <contentArea x=\"123pt\" w=\"456pt\" h=\"789pt\"/>\n          <medium stock=\"default\" short=\"456pt\" long=\"789pt\"/>\n          <field y=\"1pt\" w=\"11pt\" h=\"22pt\" x=\"2pt\">\n            <ui>\n              <textEdit/>\n            </ui>\n          </field>\n          <field y=\"1pt\" w=\"11pt\" h=\"22pt\" x=\"2pt\">\n            <ui>\n              <textEdit multiLine=\"1\"/>\n            </ui>\n          </field>\n        </pageArea>\n      </pageSet>\n      <subform name=\"first\">\n        <draw w=\"1pt\" h=\"1pt\"><value><text>foo</text></value></draw>\n      </subform>\n    </subform>\n  </template>\n  <xfa:datasets xmlns:xfa=\"http://www.xfa.org/schema/xfa-data/1.0/\">\n    <xfa:data>\n    </xfa:data>\n  </xfa:datasets>\n</xdp:xdp>\n      `;\n      const factory = new XFAFactory({\n        \"xdp:xdp\": xml\n      });\n      expect(await factory.getNumPages()).toEqual(1);\n      const pages = await factory.getPages();\n      const field1 = searchHtmlNode(pages, \"name\", \"input\");\n      expect(field1).not.toEqual(null);\n      const field2 = searchHtmlNode(pages, \"name\", \"textarea\");\n      expect(field2).not.toEqual(null);\n    });","file":"unit/xfa_tohtml_spec.js","skipped":false,"dir":"test"},{"name":"should have an input or textarea","suites":["XFAFactory","toHTML"],"line":423,"updatePoint":{"line":423,"column":38,"index":14965},"code":"  it(\"should have an input or textarea\", async () => {\n    const xml = `\n<?xml version=\"1.0\"?>\n<xdp:xdp xmlns:xdp=\"http://ns.adobe.com/xdp/\">\n  <template xmlns=\"http://www.xfa.org/schema/xfa-template/3.3\">\n    <subform name=\"root\" mergeMode=\"matchTemplate\">\n      <pageSet>\n        <pageArea>\n          <contentArea x=\"123pt\" w=\"456pt\" h=\"789pt\"/>\n          <medium stock=\"default\" short=\"456pt\" long=\"789pt\"/>\n          <field y=\"1pt\" w=\"11pt\" h=\"22pt\" x=\"2pt\">\n            <ui>\n              <textEdit multiLine=\"1\"/>\n            </ui>\n          </field>\n        </pageArea>\n      </pageSet>\n      <subform name=\"first\">\n        <field y=\"1pt\" w=\"11pt\" h=\"22pt\" x=\"2pt\" name=\"hello\">\n          <ui>\n            <textEdit/>\n          </ui>\n          <value>\n            <integer/>\n          </value>\n        </field>\n      </subform>\n    </subform>\n  </template>\n  <xfa:datasets xmlns:xfa=\"http://www.xfa.org/schema/xfa-data/1.0/\">\n    <xfa:data>\n      <toto>\n        <first>\n          <hello>123\n          </hello>\n        </first>\n      </toto>\n    </xfa:data>\n  </xfa:datasets>\n</xdp:xdp>\n    `;\n    const factory = new XFAFactory({\n      \"xdp:xdp\": xml\n    });\n    expect(await factory.getNumPages()).toEqual(1);\n    const pages = await factory.getPages();\n    const field1 = searchHtmlNode(pages, \"name\", \"input\");\n    expect(field1).not.toEqual(null);\n    expect(field1.attributes.value).toEqual(\"123\");\n  });","file":"unit/xfa_tohtml_spec.js","skipped":false,"dir":"test"},{"name":"should parse URLs correctly","suites":["XFAFactory","toHTML"],"line":473,"updatePoint":{"line":473,"column":33,"index":16377},"code":"  it(\"should parse URLs correctly\", async () => {\n    function getXml(href) {\n      return `\n<?xml version=\"1.0\"?>\n<xdp:xdp xmlns:xdp=\"http://ns.adobe.com/xdp/\">\n  <template xmlns=\"http://www.xfa.org/schema/xfa-template/3.3\">\n    <subform name=\"root\" mergeMode=\"matchTemplate\">\n      <pageSet>\n        <pageArea>\n          <contentArea x=\"0pt\" w=\"456pt\" h=\"789pt\"/>\n          <medium stock=\"default\" short=\"456pt\" long=\"789pt\"/>\n          <draw name=\"url\" y=\"5.928mm\" x=\"128.388mm\" w=\"71.237mm\" h=\"9.528mm\">\n            <value>\n              <exData contentType=\"text/html\">\n                <body xmlns=\"http://www.w3.org/1999/xhtml\">\n                  <a href=\"${href}\">${href}</a>\n                </body>\n              </exData>\n            </value>\n          </draw>\n        </pageArea>\n      </pageSet>\n    </subform>\n  </template>\n  <xfa:datasets xmlns:xfa=\"http://www.xfa.org/schema/xfa-data/1.0/\">\n    <xfa:data>\n    </xfa:data>\n  </xfa:datasets>\n</xdp:xdp>\n      `;\n    }\n    let factory, pages, a;\n\n    // A valid, and complete, URL.\n    factory = new XFAFactory({\n      \"xdp:xdp\": getXml(\"https://www.example.com/\")\n    });\n    expect(await factory.getNumPages()).toEqual(1);\n    pages = await factory.getPages();\n    a = searchHtmlNode(pages, \"name\", \"a\");\n    expect(a.value).toEqual(\"https://www.example.com/\");\n    expect(a.attributes.href).toEqual(\"https://www.example.com/\");\n\n    // A valid, but incomplete, URL.\n    factory = new XFAFactory({\n      \"xdp:xdp\": getXml(\"www.example.com/\")\n    });\n    expect(await factory.getNumPages()).toEqual(1);\n    pages = await factory.getPages();\n    a = searchHtmlNode(pages, \"name\", \"a\");\n    expect(a.value).toEqual(\"www.example.com/\");\n    expect(a.attributes.href).toEqual(\"http://www.example.com/\");\n\n    // A valid email-address.\n    factory = new XFAFactory({\n      \"xdp:xdp\": getXml(\"mailto:test@example.com\")\n    });\n    expect(await factory.getNumPages()).toEqual(1);\n    pages = await factory.getPages();\n    a = searchHtmlNode(pages, \"name\", \"a\");\n    expect(a.value).toEqual(\"mailto:test@example.com\");\n    expect(a.attributes.href).toEqual(\"mailto:test@example.com\");\n\n    // Not a valid URL.\n    factory = new XFAFactory({\n      \"xdp:xdp\": getXml(\"qwerty/\")\n    });\n    expect(await factory.getNumPages()).toEqual(1);\n    pages = await factory.getPages();\n    a = searchHtmlNode(pages, \"name\", \"a\");\n    expect(a.value).toEqual(\"qwerty/\");\n    expect(a.attributes.href).toEqual(\"\");\n  });","file":"unit/xfa_tohtml_spec.js","skipped":false,"dir":"test"},{"name":"should replace button with an URL by a link","suites":["XFAFactory","toHTML"],"line":546,"updatePoint":{"line":546,"column":49,"index":18854},"code":"  it(\"should replace button with an URL by a link\", async () => {\n    const xml = `\n<?xml version=\"1.0\"?>\n<xdp:xdp xmlns:xdp=\"http://ns.adobe.com/xdp/\">\n  <template xmlns=\"http://www.xfa.org/schema/xfa-template/3.3\">\n    <subform name=\"root\" mergeMode=\"matchTemplate\">\n      <pageSet>\n        <pageArea>\n          <contentArea x=\"123pt\" w=\"456pt\" h=\"789pt\"/>\n          <medium stock=\"default\" short=\"456pt\" long=\"789pt\"/>\n        </pageArea>\n      </pageSet>\n      <subform name=\"first\">\n        <field y=\"1pt\" w=\"11pt\" h=\"22pt\" x=\"2pt\">\n          <ui>\n            <button/>\n          </ui>\n          <event activity=\"click\" name=\"event__click\">\n            <script contentType=\"application/x-javascript\">\n              app.launchURL(\"https://github.com/mozilla/pdf.js\", true);\n            </script>\n          </event>\n        </field>\n        <field y=\"1pt\" w=\"11pt\" h=\"22pt\" x=\"2pt\">\n          <ui>\n            <button/>\n          </ui>\n          <event activity=\"click\" name=\"event__click\">\n            <script contentType=\"application/x-javascript\">\n              xfa.host.gotoURL(\"https://github.com/allizom/pdf.js\");\n            </script>\n          </event>\n        </field>\n      </subform>\n    </subform>\n  </template>\n  <xfa:datasets xmlns:xfa=\"http://www.xfa.org/schema/xfa-data/1.0/\">\n    <xfa:data>\n    </xfa:data>\n  </xfa:datasets>\n</xdp:xdp>\n    `;\n    const factory = new XFAFactory({\n      \"xdp:xdp\": xml\n    });\n    expect(await factory.getNumPages()).toEqual(1);\n    const pages = await factory.getPages();\n    let a = searchHtmlNode(pages, \"name\", \"a\");\n    expect(a.attributes.href).toEqual(\"https://github.com/mozilla/pdf.js\");\n    expect(a.attributes.newWindow).toEqual(true);\n    a = searchHtmlNode(pages, \"name\", \"a\", false, [1]);\n    expect(a.attributes.href).toEqual(\"https://github.com/allizom/pdf.js\");\n    expect(a.attributes.newWindow).toEqual(false);\n  });","file":"unit/xfa_tohtml_spec.js","skipped":false,"dir":"test"},{"name":"should search a node with a given path in xml tree","suites":["XML","searchNode"],"line":20,"updatePoint":{"line":20,"column":58,"index":868},"code":"    it(\"should search a node with a given path in xml tree\", function () {\n      const xml = `\n      <a>\n          <b>\n              <c a=\"123\"/>\n              <d/>\n              <e>\n                  <f>\n                      <g a=\"321\"/>\n                  </f>\n              </e>\n              <c a=\"456\"/>\n              <c a=\"789\"/>\n              <h/>\n              <c a=\"101112\"/>\n          </b>\n          <h>\n              <i/>\n              <j/>\n              <k>\n                  <g a=\"654\"/>\n              </k>\n          </h>\n          <b>\n              <g a=\"987\"/>\n              <h/>\n              <g a=\"121110\"/>\n          </b>\n      </a>`;\n      const root = new SimpleXMLParser({\n        hasAttributes: true\n      }).parseFromString(xml).documentElement;\n      function getAttr(path) {\n        return root.searchNode(parseXFAPath(path), 0).attributes[0].value;\n      }\n      expect(getAttr(\"b.g\")).toEqual(\"321\");\n      expect(getAttr(\"e.f.g\")).toEqual(\"321\");\n      expect(getAttr(\"e.g\")).toEqual(\"321\");\n      expect(getAttr(\"g\")).toEqual(\"321\");\n      expect(getAttr(\"h.g\")).toEqual(\"654\");\n      expect(getAttr(\"b[0].g\")).toEqual(\"321\");\n      expect(getAttr(\"b[1].g\")).toEqual(\"987\");\n      expect(getAttr(\"b[1].g[0]\")).toEqual(\"987\");\n      expect(getAttr(\"b[1].g[1]\")).toEqual(\"121110\");\n      expect(getAttr(\"c\")).toEqual(\"123\");\n      expect(getAttr(\"c[1]\")).toEqual(\"456\");\n      expect(getAttr(\"c[2]\")).toEqual(\"789\");\n      expect(getAttr(\"c[3]\")).toEqual(\"101112\");\n    });","file":"unit/xml_spec.js","skipped":false,"dir":"test"},{"name":"should dump a xml tree","suites":["XML","searchNode"],"line":69,"updatePoint":{"line":69,"column":30,"index":2341},"code":"    it(\"should dump a xml tree\", function () {\n      const xml = `\n      <a>\n          <b>\n              <c a=\"123\"/>\n              <d>hello</d>\n              <e>\n                  <f>\n                      <g a=\"321\"/>\n                  </f>\n              </e>\n              <c a=\"456\"/>\n              <c a=\"789\"/>\n              <h/>\n              <c a=\"101112\"/>\n          </b>\n          <h>\n              <i/>\n              <j/>\n              <k>&#xA;W&#x1F602;rld&#xA;<g a=\"654\"/>\n              </k>\n          </h>\n          <b>\n              <g a=\"987\"/>\n              <h/>\n              <g a=\"121110\"/>\n          </b>\n      </a>`;\n      const root = new SimpleXMLParser({\n        hasAttributes: true\n      }).parseFromString(xml).documentElement;\n      const buffer = [];\n      root.dump(buffer);\n      expect(buffer.join(\"\").replaceAll(/\\s+/g, \"\")).toEqual(xml.replaceAll(/\\s+/g, \"\"));\n    });","file":"unit/xml_spec.js","skipped":false,"dir":"test"},{"name":"should parse processing instructions","suites":["XML","searchNode"],"line":105,"updatePoint":{"line":105,"column":42,"index":3260},"code":"  it(\"should parse processing instructions\", function () {\n    const xml = `\n      <a>\n          <?foo bar?>\n          <?foo bar oof?>\n          <?foo?>\n      </a>`;\n    const pi = [];\n    class MyParser extends XMLParserBase {\n      onPi(name, value) {\n        pi.push([name, value]);\n      }\n    }\n    new MyParser().parseXml(xml);\n    expect(pi).toEqual([[\"foo\", \"bar\"], [\"foo\", \"bar oof\"], [\"foo\", \"\"]]);\n  });","file":"unit/xml_spec.js","skipped":false,"dir":"test"}]}