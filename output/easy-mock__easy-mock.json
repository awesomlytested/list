{"repo":"easy-mock/easy-mock","url":"https://github.com/easy-mock/easy-mock","branch":"dev","configs":[{"package":"easy-mock","lang":"js","dir":"test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"获取数据","suites":["test/controllers/dashboard.test.js","list"],"updatePoint":{"line":13,"column":14,"index":370},"line":13,"code":"    test('获取数据', async () => {\n      const res = await request('/api/dashboard');\n      expect(res.body.data).toMatchObject({\n        total: {\n          userCount: expect.any(Number),\n          mockCount: expect.any(Number),\n          projectCount: expect.any(Number),\n          mockUseCount: expect.any(Number)\n        },\n        today: {\n          userCount: expect.any(Number),\n          mockCount: expect.any(Number),\n          projectCount: expect.any(Number),\n          mockUseCount: expect.any(Number)\n        }\n      });\n    });","file":"controllers/dashboard.test.js","skipped":false,"dir":"test"},{"name":"获取缓存数据","suites":["test/controllers/dashboard.test.js","list"],"updatePoint":{"line":30,"column":16,"index":909},"line":30,"code":"    test('获取缓存数据', async () => {\n      const res = await request('/api/dashboard');\n      expect(res.body.data).toMatchObject({\n        total: {\n          userCount: expect.any(Number),\n          mockCount: expect.any(Number),\n          projectCount: expect.any(Number),\n          mockUseCount: expect.any(Number)\n        },\n        today: {\n          userCount: expect.any(Number),\n          mockCount: expect.any(Number),\n          projectCount: expect.any(Number),\n          mockUseCount: expect.any(Number)\n        }\n      });\n    });","file":"controllers/dashboard.test.js","skipped":false,"dir":"test"},{"name":"参数验证","suites":["test/controllers/group.test.js","create"],"updatePoint":{"line":14,"column":14,"index":439},"line":14,"code":"    test('参数验证', async () => {\n      const res = await request('/api/group/create', 'post');\n      expect(res.body.message).toBe('params error');\n    });","file":"controllers/group.test.js","skipped":false,"dir":"test"},{"name":"创建团队","suites":["test/controllers/group.test.js","create"],"updatePoint":{"line":18,"column":14,"index":593},"line":18,"code":"    test('创建团队', async () => {\n      const res = await request('/api/group/create', 'post').send({\n        name: 'dasouche'\n      });\n      expect(res.body.success).toBe(true);\n    });","file":"controllers/group.test.js","skipped":false,"dir":"test"},{"name":"重复创建","suites":["test/controllers/group.test.js","create"],"updatePoint":{"line":24,"column":14,"index":778},"line":24,"code":"    test('重复创建', async () => {\n      const res = await request('/api/group/create', 'post').send({\n        name: 'dasouche'\n      });\n      expect(res.body.message).toBe('团队 dasouche 已存在');\n    });","file":"controllers/group.test.js","skipped":false,"dir":"test"},{"name":"参数验证","suites":["test/controllers/group.test.js","join"],"updatePoint":{"line":32,"column":14,"index":1009},"line":32,"code":"    test('参数验证', async () => {\n      const res = await request('/api/group/join', 'post');\n      expect(res.body.message).toBe('params error');\n    });","file":"controllers/group.test.js","skipped":false,"dir":"test"},{"name":"加入团队","suites":["test/controllers/group.test.js","join"],"updatePoint":{"line":36,"column":14,"index":1161},"line":36,"code":"    test('加入团队', async () => {\n      await request('/api/group/create', 'post', soucheUser.token).send({\n        name: 'souche'\n      });\n      const groupId = await request('/api/group').query({\n        keywords: 'souche'\n      }).then(res => res.body.data[0]._id);\n      await request('/api/project/create', 'post', soucheUser.token).send({\n        group: groupId,\n        name: 'user',\n        url: '/user'\n      });\n      let res = await request('/api/group/join', 'post').send({\n        id: groupId\n      });\n      expect(res.body.success).toBe(true);\n      res = await request('/api/project').query({\n        group: groupId\n      });\n      res = await request('/api/project/update_workbench', 'post').send({\n        id: res.body.data[0].extend._id,\n        status: true\n      });\n      expect(res.body.success).toBe(true);\n    });","file":"controllers/group.test.js","skipped":false,"dir":"test"},{"name":"我加入的团队","suites":["test/controllers/group.test.js","list"],"updatePoint":{"line":63,"column":16,"index":2033},"line":63,"code":"    test('我加入的团队', async () => {\n      const res = await request('/api/group');\n      const data = res.body.data;\n      expect(data).toHaveLength(2);\n      expect(data[0].name).toBe('dasouche');\n      expect(data[1].name).toBe('souche');\n    });","file":"controllers/group.test.js","skipped":false,"dir":"test"},{"name":"搜索团队","suites":["test/controllers/group.test.js","list"],"updatePoint":{"line":70,"column":14,"index":2277},"line":70,"code":"    test('搜索团队', async () => {\n      let res = await request('/api/group').query({\n        keywords: 'dasouched'\n      });\n      expect(res.body.data).toHaveLength(0);\n      res = await request('/api/group').query({\n        keywords: 'dasouche'\n      });\n      expect(res.body.data).toHaveLength(1);\n    });","file":"controllers/group.test.js","skipped":false,"dir":"test"},{"name":"参数验证","suites":["test/controllers/group.test.js","update"],"updatePoint":{"line":82,"column":14,"index":2620},"line":82,"code":"    test('参数验证', async () => {\n      const res = await request('/api/group/update', 'post');\n      expect(res.body.message).toBe('params error');\n    });","file":"controllers/group.test.js","skipped":false,"dir":"test"},{"name":"更新我加入团队的信息","suites":["test/controllers/group.test.js","update"],"updatePoint":{"line":86,"column":20,"index":2780},"line":86,"code":"    test('更新我加入团队的信息', async () => {\n      let res = await request('/api/group');\n      res = await request('/api/group/update', 'post').send({\n        id: res.body.data[1]._id,\n        name: 'souche2'\n      });\n      expect(res.body.message).toBe('非团队创建者无法更新团队信息');\n    });","file":"controllers/group.test.js","skipped":false,"dir":"test"},{"name":"团队重名","suites":["test/controllers/group.test.js","update"],"updatePoint":{"line":94,"column":14,"index":3049},"line":94,"code":"    test('团队重名', async () => {\n      let res = await request('/api/group');\n      res = await request('/api/group/update', 'post').send({\n        id: res.body.data[0]._id,\n        name: 'souche'\n      });\n      expect(res.body.message).toBe('团队 souche 已存在');\n    });","file":"controllers/group.test.js","skipped":false,"dir":"test"},{"name":"更新我创建团队的信息","suites":["test/controllers/group.test.js","update"],"updatePoint":{"line":102,"column":20,"index":3322},"line":102,"code":"    test('更新我创建团队的信息', async () => {\n      let res = await request('/api/group');\n      res = await request('/api/group/update', 'post').send({\n        id: res.body.data[0]._id,\n        name: 'souche2'\n      });\n      expect(res.body.success).toBe(true);\n    });","file":"controllers/group.test.js","skipped":false,"dir":"test"},{"name":"参数验证","suites":["test/controllers/group.test.js","delete"],"updatePoint":{"line":112,"column":14,"index":3614},"line":112,"code":"    test('参数验证', async () => {\n      const res = await request('/api/group/delete', 'post');\n      expect(res.body.message).toBe('params error');\n    });","file":"controllers/group.test.js","skipped":false,"dir":"test"},{"name":"离开团队","suites":["test/controllers/group.test.js","delete"],"updatePoint":{"line":116,"column":14,"index":3768},"line":116,"code":"    test('离开团队', async () => {\n      let res = await request('/api/group');\n      res = await request('/api/group/delete', 'post').send({\n        id: res.body.data[1]._id\n      });\n      expect(res.body.success).toBe(true);\n    });","file":"controllers/group.test.js","skipped":false,"dir":"test"},{"name":"解散团队","suites":["test/controllers/group.test.js","delete"],"updatePoint":{"line":123,"column":14,"index":4000},"line":123,"code":"    test('解散团队', async () => {\n      let res = await request('/api/group');\n      res = await request('/api/group/delete', 'post').send({\n        id: res.body.data[0]._id\n      });\n      expect(res.body.success).toBe(true);\n    });","file":"controllers/group.test.js","skipped":false,"dir":"test"},{"name":"解散团队前请先删除该团队下所有的项目","suites":["test/controllers/group.test.js","delete"],"updatePoint":{"line":130,"column":28,"index":4246},"line":130,"code":"    test('解散团队前请先删除该团队下所有的项目', async () => {\n      let res = await request('/api/group', 'get', soucheUser.token);\n      await request('/api/project/create', 'post', soucheUser.token).send({\n        group: res.body.data[0]._id,\n        name: 'example',\n        url: '/example'\n      });\n      res = await request('/api/group/delete', 'post', soucheUser.token).send({\n        id: res.body.data[0]._id\n      });\n      expect(res.body.message).toBe('解散团队前请先删除该团队下所有的项目');\n    });","file":"controllers/group.test.js","skipped":false,"dir":"test"},{"name":"参数验证","suites":["test/controllers/mock.test.js","create"],"updatePoint":{"line":25,"column":14,"index":832},"line":25,"code":"    test('参数验证', async () => {\n      const res = await request('/api/mock/create', 'post');\n      expect(res.body.message).toBe('params error');\n    });","file":"controllers/mock.test.js","skipped":false,"dir":"test"},{"name":"无权限操作","suites":["test/controllers/mock.test.js","create"],"updatePoint":{"line":29,"column":15,"index":986},"line":29,"code":"    test('无权限操作', async () => {\n      const res = await request('/api/mock/create', 'post', soucheUser.token).send({\n        project_id: project._id,\n        url: '/demo',\n        mode: '{}',\n        method: 'get',\n        description: 'demo'\n      });\n      expect(res.body.message).toBe('无权限操作');\n    });","file":"controllers/mock.test.js","skipped":false,"dir":"test"},{"name":"请检查接口是否已经存在","suites":["test/controllers/mock.test.js","create"],"updatePoint":{"line":39,"column":21,"index":1299},"line":39,"code":"    test('请检查接口是否已经存在', async () => {\n      const res = await request('/api/mock/create', 'post').send({\n        project_id: project._id,\n        url: '/mock',\n        mode: '{}',\n        method: 'get',\n        description: 'mock'\n      });\n      expect(res.body.message).toBe('请检查接口是否已经存在');\n    });","file":"controllers/mock.test.js","skipped":false,"dir":"test"},{"name":"创建个人项目接口","suites":["test/controllers/mock.test.js","create"],"updatePoint":{"line":49,"column":18,"index":1597},"line":49,"code":"    test('创建个人项目接口', async () => {\n      const res = await request('/api/mock/create', 'post').send({\n        project_id: project._id,\n        url: '/new',\n        mode: '{}',\n        method: 'get',\n        description: 'new api'\n      });\n      expect(res.body.success).toBe(true);\n    });","file":"controllers/mock.test.js","skipped":false,"dir":"test"},{"name":"创建团队项目接口","suites":["test/controllers/mock.test.js","create"],"updatePoint":{"line":59,"column":18,"index":1888},"line":59,"code":"    test('创建团队项目接口', async () => {\n      await request('/api/group/create', 'post').send({\n        name: 'souche'\n      });\n      const group = await request('/api/group').then(res => res.body.data[0]);\n      await request('/api/project/create', 'post').send({\n        group: group._id,\n        name: 'demo',\n        url: '/demo'\n      });\n      const newProject = await request('/api/project').query({\n        group: group._id\n      }).then(res => res.body.data[0]);\n      const res = await request('/api/mock/create', 'post').send({\n        project_id: newProject._id,\n        url: '/new',\n        mode: '{}',\n        method: 'get',\n        description: 'new api'\n      });\n      expect(res.body.success).toBe(true);\n    });","file":"controllers/mock.test.js","skipped":false,"dir":"test"},{"name":"非团队成员无法创建团队项目接口","suites":["test/controllers/mock.test.js","create"],"updatePoint":{"line":81,"column":25,"index":2622},"line":81,"code":"    test('非团队成员无法创建团队项目接口', async () => {\n      const group = await request('/api/group').then(res => res.body.data[0]);\n      const newProject = await request('/api/project').query({\n        group: group._id\n      }).then(res => res.body.data[0]);\n      const res = await request('/api/mock/create', 'post', soucheUser.token).send({\n        project_id: newProject._id,\n        url: '/new',\n        mode: '{}',\n        method: 'get',\n        description: 'new api'\n      });\n      expect(res.body.message).toBe('无权限操作');\n    });","file":"controllers/mock.test.js","skipped":false,"dir":"test"},{"name":"参数验证","suites":["test/controllers/mock.test.js","update"],"updatePoint":{"line":97,"column":14,"index":3175},"line":97,"code":"    test('参数验证', async () => {\n      const res = await request('/api/mock/update', 'post');\n      expect(res.body.message).toBe('params error');\n    });","file":"controllers/mock.test.js","skipped":false,"dir":"test"},{"name":"接口不存在","suites":["test/controllers/mock.test.js","update"],"updatePoint":{"line":101,"column":15,"index":3329},"line":101,"code":"    test('接口不存在', async () => {\n      const res = await request('/api/mock/update', 'post').send({\n        id: '111111111111111111111111',\n        url: '/demo',\n        mode: '{}',\n        method: 'get',\n        description: 'demo'\n      });\n      expect(res.body.message).toBe('接口不存在');\n    });","file":"controllers/mock.test.js","skipped":false,"dir":"test"},{"name":"无权限操作","suites":["test/controllers/mock.test.js","update"],"updatePoint":{"line":111,"column":15,"index":3625},"line":111,"code":"    test('无权限操作', async () => {\n      let res = await request('/api/mock').query({\n        project_id: project._id\n      });\n      res = await request('/api/mock/update', 'post', soucheUser.token).send({\n        id: res.body.data.mocks[0]._id,\n        url: '/mock',\n        mode: '{}',\n        method: 'get',\n        description: 'mock'\n      });\n      expect(res.body.message).toBe('无权限操作');\n    });","file":"controllers/mock.test.js","skipped":false,"dir":"test"},{"name":"接口已经存在","suites":["test/controllers/mock.test.js","update"],"updatePoint":{"line":124,"column":16,"index":4027},"line":124,"code":"    test('接口已经存在', async () => {\n      let res = await request('/api/mock').query({\n        project_id: project._id\n      });\n      res = await request('/api/mock/update', 'post').send({\n        id: res.body.data.mocks[0]._id,\n        url: '/proxy',\n        mode: '{}',\n        method: 'get',\n        description: 'mock'\n      });\n      expect(res.body.message).toBe('接口已经存在');\n    });","file":"controllers/mock.test.js","skipped":false,"dir":"test"},{"name":"更新接口","suites":["test/controllers/mock.test.js","update"],"updatePoint":{"line":137,"column":14,"index":4411},"line":137,"code":"    test('更新接口', async () => {\n      let res = await request('/api/mock').query({\n        project_id: project._id\n      });\n      res = await request('/api/mock/update', 'post').send({\n        id: res.body.data.mocks[0]._id,\n        url: '/mock2',\n        mode: '{}',\n        method: 'get',\n        description: 'mock'\n      });\n      expect(res.body.success).toBe(true);\n    });","file":"controllers/mock.test.js","skipped":false,"dir":"test"},{"name":"参数验证","suites":["test/controllers/mock.test.js","list"],"updatePoint":{"line":152,"column":14,"index":4824},"line":152,"code":"    test('参数验证', async () => {\n      const res = await request('/api/mock');\n      expect(res.body.message).toBe('params error');\n    });","file":"controllers/mock.test.js","skipped":false,"dir":"test"},{"name":"搜索","suites":["test/controllers/mock.test.js","list"],"updatePoint":{"line":156,"column":12,"index":4960},"line":156,"code":"    test('搜索', async () => {\n      const res = await request('/api/mock').query({\n        project_id: project._id,\n        keywords: '/proxy'\n      });\n      const data = res.body.data;\n      expect(data.project.name).toBe('演示项目');\n      expect(data.project.url).toBe('/example');\n      expect(data.mocks).toHaveLength(1);\n    });","file":"controllers/mock.test.js","skipped":false,"dir":"test"},{"name":"获取接口列表","suites":["test/controllers/mock.test.js","list"],"updatePoint":{"line":166,"column":16,"index":5295},"line":166,"code":"    test('获取接口列表', async () => {\n      let res = await request('/api/project/create', 'post').send({\n        name: 'souche',\n        url: '/souche',\n        members: [soucheUser._id]\n      });\n      const newProject = await request('/api/project').then(res => res.body.data[0]);\n      await request('/api/mock/create', 'post').send({\n        project_id: newProject._id,\n        url: '/mock',\n        mode: '{}',\n        description: 'mock',\n        method: 'get'\n      });\n      res = await request('/api/mock').query({\n        project_id: newProject._id\n      });\n      const data = res.body.data;\n      expect(data.project.name).toBe('souche');\n      expect(data.project.url).toBe('/souche');\n      expect(data.mocks).toHaveLength(1);\n      expect(data.mocks[0].url).toBe('/mock');\n    });","file":"controllers/mock.test.js","skipped":false,"dir":"test"},{"name":"项目不存在","suites":["test/controllers/mock.test.js","list"],"updatePoint":{"line":189,"column":15,"index":6086},"line":189,"code":"    test('项目不存在', async () => {\n      const res = await request('/api/mock').query({\n        project_id: '111111111111111111111111'\n      });\n      const data = res.body.data;\n      expect(data.project).toEqual({});\n      expect(data.mocks).toHaveLength(0);\n    });","file":"controllers/mock.test.js","skipped":false,"dir":"test"},{"name":"参数验证","suites":["test/controllers/mock.test.js","getAPIByProjectIds"],"updatePoint":{"line":199,"column":14,"index":6398},"line":199,"code":"    test('参数验证', async () => {\n      const res = await request('/api/mock/by_projects');\n      expect(res.body.message).toBe('params error');\n    });","file":"controllers/mock.test.js","skipped":false,"dir":"test"},{"name":"获取接口列表","suites":["test/controllers/mock.test.js","getAPIByProjectIds"],"updatePoint":{"line":203,"column":16,"index":6550},"line":203,"code":"    test('获取接口列表', async () => {\n      const newProject = await request('/api/project').then(res => res.body.data[0]);\n      const res = await request('/api/mock/by_projects').query({\n        project_ids: newProject._id\n      });\n      const data = res.body.data;\n      expect(data[newProject._id].project.name).toBe('souche');\n    });","file":"controllers/mock.test.js","skipped":false,"dir":"test"},{"name":"参数验证","suites":["test/controllers/mock.test.js","exportAPI"],"updatePoint":{"line":213,"column":14,"index":6922},"line":213,"code":"    test('参数验证', async () => {\n      let res = await request('/api/mock/export', 'post');\n      expect(res.body.message).toBe('参数不能为空');\n      res = await request('/api/mock/export', 'post').send({\n        ids: '1'\n      });\n      expect(res.body.message).toBe('params error');\n    });","file":"controllers/mock.test.js","skipped":false,"dir":"test"},{"name":"没有可导出的接口","suites":["test/controllers/mock.test.js","exportAPI"],"updatePoint":{"line":221,"column":18,"index":7212},"line":221,"code":"    test('没有可导出的接口', async () => {\n      const res = await request('/api/mock/export', 'post').send({\n        project_id: '111111111111111111111111'\n      });\n      expect(res.body.message).toBe('没有可导出的接口');\n    });","file":"controllers/mock.test.js","skipped":false,"dir":"test"},{"name":"导出项目","suites":["test/controllers/mock.test.js","exportAPI"],"updatePoint":{"line":227,"column":14,"index":7424},"line":227,"code":"    test('导出项目', done => {\n      const req = request('/api/mock/export', 'post').send({\n        project_id: project._id\n      }).buffer(false);\n      req.end((err, res) => {\n        if (err) return done(err);\n        let trackEndEvent = 0;\n        let trackCloseEvent = 0;\n        res.on('end', () => {\n          trackEndEvent++;\n          expect(trackEndEvent).toBe(1);\n          expect(trackCloseEvent).toBe(0);\n          done();\n        });\n        res.on('close', () => {\n          trackCloseEvent++;\n        });\n      });\n    });","file":"controllers/mock.test.js","skipped":false,"dir":"test"},{"name":"导出选定接口","suites":["test/controllers/mock.test.js","exportAPI"],"updatePoint":{"line":246,"column":16,"index":7961},"line":246,"code":"    test('导出选定接口', async done => {\n      const apis = await request('/api/mock').query({\n        project_id: project._id\n      }).then(res => res.body.data.mocks);\n      const req = request('/api/mock/export', 'post').send({\n        ids: apis.map(api => api._id)\n      }).buffer(false);\n      req.end((err, res) => {\n        if (err) return done(err);\n        let trackEndEvent = 0;\n        let trackCloseEvent = 0;\n        res.on('end', () => {\n          trackEndEvent++;\n          expect(trackEndEvent).toBe(1);\n          expect(trackCloseEvent).toBe(0);\n          done();\n        });\n        res.on('close', () => {\n          trackCloseEvent++;\n        });\n      });\n    });","file":"controllers/mock.test.js","skipped":false,"dir":"test"},{"name":"404","suites":["test/controllers/mock.test.js","getMockAPI"],"updatePoint":{"line":273,"column":13,"index":8779},"line":273,"code":"    test('404', async () => {\n      await request('/mock').expect(404);\n      await request('/mock/api/user').expect(404);\n      await request('/mock/111111111111111111111111/').expect(404);\n      await request('/mock/111111111111111111111111/user').expect(404);\n      await request(`/mock/${project._id}/ttest`).expect(404);\n    });","file":"controllers/mock.test.js","skipped":false,"dir":"test"},{"name":"接口请求频率太快，已被限制访问","suites":["test/controllers/mock.test.js","getMockAPI"],"updatePoint":{"line":280,"column":25,"index":9125},"line":280,"code":"    test('接口请求频率太快，已被限制访问', async () => {\n      const res = await request('/mock/222222222233333333331212/user');\n      expect(res.body.message).toBe('接口请求频率太快，已被限制访问');\n    });","file":"controllers/mock.test.js","skipped":false,"dir":"test"},{"name":"/","suites":["test/controllers/mock.test.js","getMockAPI"],"updatePoint":{"line":284,"column":11,"index":9289},"line":284,"code":"    test('/', async () => {\n      const res = await request(getMockURL('/')).expect(400);\n      expect(res.headers.power).toBe('easy-mock');\n      expect(res.body.success).toBe(false);\n    });","file":"controllers/mock.test.js","skipped":false,"dir":"test"},{"name":"/proxy","suites":["test/controllers/mock.test.js","getMockAPI"],"updatePoint":{"line":289,"column":16,"index":9487},"line":289,"code":"    test('/proxy', async () => {\n      let res = await request(getMockURL('/proxy'));\n      expect(res.body).toEqual({\n        sucess: true,\n        data: {\n          proxy: true\n        }\n      });\n      res = await request(getMockURL('/proxy'));\n      expect(res.body.message).toBe('time out');\n      res = await request(getMockURL('/proxy'));\n      expect(res.body.message).toBe('接口请求失败');\n    });","file":"controllers/mock.test.js","skipped":false,"dir":"test"},{"name":"/query","suites":["test/controllers/mock.test.js","getMockAPI"],"updatePoint":{"line":302,"column":16,"index":9888},"line":302,"code":"    test('/query', async () => {\n      const res = await request(getMockURL('/query?name=hh'));\n      expect(res.body.data.name).toEqual('hh');\n    });","file":"controllers/mock.test.js","skipped":false,"dir":"test"},{"name":"jsonp","suites":["test/controllers/mock.test.js","getMockAPI"],"updatePoint":{"line":306,"column":15,"index":10039},"line":306,"code":"    test('jsonp', async () => {\n      const res = await request(getMockURL('/mock')).query({\n        jsonp_param_name: 'callback'\n      });\n      const callback = json => json; // eslint-disable-line\n      const data = eval(res.text); // eslint-disable-line\n      expect(data.success).toBe(true);\n    });","file":"controllers/mock.test.js","skipped":false,"dir":"test"},{"name":"/mock","suites":["test/controllers/mock.test.js","getMockAPI"],"updatePoint":{"line":314,"column":15,"index":10344},"line":314,"code":"    test('/mock', async () => {\n      await request('/api/project/update', 'post').send({\n        id: project._id,\n        name: project.name,\n        url: '/'\n      });\n      const res = await request('/mock/' + project._id + '/mock');\n      expect(res.body.success).toBe(true);\n    });","file":"controllers/mock.test.js","skipped":false,"dir":"test"},{"name":"参数验证","suites":["test/controllers/mock.test.js","delete"],"updatePoint":{"line":325,"column":14,"index":10666},"line":325,"code":"    test('参数验证', async () => {\n      const res = await request('/api/mock/delete', 'post');\n      expect(res.body.message).toBe('params error');\n    });","file":"controllers/mock.test.js","skipped":false,"dir":"test"},{"name":"无权限操作","suites":["test/controllers/mock.test.js","delete"],"updatePoint":{"line":329,"column":15,"index":10820},"line":329,"code":"    test('无权限操作', async () => {\n      const apis = await request('/api/mock').query({\n        project_id: project._id\n      }).then(res => res.body.data.mocks);\n      let res = await request('/api/mock/delete', 'post').send({\n        project_id: '111111111111111111111111',\n        ids: ['111111111111111111111111']\n      });\n      expect(res.body.message).toBe('项目不存在');\n      res = await request('/api/mock/delete', 'post', soucheUser.token).send({\n        project_id: project._id,\n        ids: apis.map(api => api._id)\n      });\n      expect(res.body.message).toBe('无权限操作');\n    });","file":"controllers/mock.test.js","skipped":false,"dir":"test"},{"name":"删除接口","suites":["test/controllers/mock.test.js","delete"],"updatePoint":{"line":344,"column":14,"index":11405},"line":344,"code":"    test('删除接口', async () => {\n      const apis = await request('/api/mock').query({\n        project_id: project._id\n      }).then(res => res.body.data.mocks);\n      const res = await request('/api/mock/delete', 'post').send({\n        project_id: project._id,\n        ids: apis.map(api => api._id)\n      });\n      expect(res.body.success).toBe(true);\n    });","file":"controllers/mock.test.js","skipped":false,"dir":"test"},{"name":"参数验证","suites":["test/controllers/project.test.js","create"],"updatePoint":{"line":25,"column":14,"index":763},"line":25,"code":"    test('参数验证', async () => {\n      const res = await request('/api/project/create', 'post');\n      expect(res.body.message).toBe('params error');\n    });","file":"controllers/project.test.js","skipped":false,"dir":"test"},{"name":"项目成员不能包含自己","suites":["test/controllers/project.test.js","create"],"updatePoint":{"line":29,"column":20,"index":925},"line":29,"code":"    test('项目成员不能包含自己', async () => {\n      const res = await request('/api/project/create', 'post').send({\n        name: 'example',\n        url: '/example',\n        members: [user._id]\n      });\n      expect(res.body.message).toBe('项目成员不能包含自己');\n    });","file":"controllers/project.test.js","skipped":false,"dir":"test"},{"name":"无权限操作","suites":["test/controllers/project.test.js","create"],"updatePoint":{"line":37,"column":15,"index":1174},"line":37,"code":"    test('无权限操作', async () => {\n      const res = await request('/api/project/create', 'post').send({\n        name: 'example',\n        url: '/example',\n        group: '111111111111111111111111'\n      });\n      expect(res.body.message).toBe('无权限操作');\n    });","file":"controllers/project.test.js","skipped":false,"dir":"test"},{"name":"项目已存在","suites":["test/controllers/project.test.js","create"],"updatePoint":{"line":45,"column":15,"index":1432},"line":45,"code":"    test('项目已存在', async () => {\n      const res = await request('/api/project/create', 'post').send({\n        name: '演示项目',\n        url: '/example',\n        description: 'example'\n      });\n      expect(res.body.message).toBe('项目 演示项目 已存在');\n    });","file":"controllers/project.test.js","skipped":false,"dir":"test"},{"name":"请检查 URL 是否已经存在","suites":["test/controllers/project.test.js","create"],"updatePoint":{"line":53,"column":24,"index":1691},"line":53,"code":"    test('请检查 URL 是否已经存在', async () => {\n      const res = await request('/api/project/create', 'post').send({\n        name: '演示项目2',\n        url: '/example',\n        description: 'example'\n      });\n      expect(res.body.message).toBe('请检查 URL 是否已经存在');\n    });","file":"controllers/project.test.js","skipped":false,"dir":"test"},{"name":"创建项目","suites":["test/controllers/project.test.js","create"],"updatePoint":{"line":61,"column":14,"index":1944},"line":61,"code":"    test('创建项目', async () => {\n      const res = await request('/api/project/create', 'post').send({\n        name: 'demo',\n        url: '/demo',\n        description: 'demo',\n        members: [soucheUser._id],\n        swagger_url: 'http://localhost:7400'\n      });\n      expect(res.body.success).toBe(true);\n    });","file":"controllers/project.test.js","skipped":false,"dir":"test"},{"name":"参数验证","suites":["test/controllers/project.test.js","copy"],"updatePoint":{"line":73,"column":14,"index":2292},"line":73,"code":"    test('参数验证', async () => {\n      const res = await request('/api/project/copy', 'post');\n      expect(res.body.message).toBe('params error');\n    });","file":"controllers/project.test.js","skipped":false,"dir":"test"},{"name":"项目不存在","suites":["test/controllers/project.test.js","copy"],"updatePoint":{"line":77,"column":15,"index":2447},"line":77,"code":"    test('项目不存在', async () => {\n      const res = await request('/api/project/copy', 'post').send({\n        id: '111111111111111111111111'\n      });\n      expect(res.body.message).toBe('项目不存在');\n    });","file":"controllers/project.test.js","skipped":false,"dir":"test"},{"name":"复制项目","suites":["test/controllers/project.test.js","copy"],"updatePoint":{"line":83,"column":14,"index":2649},"line":83,"code":"    test('复制项目', async () => {\n      let res = await request('/api/project');\n      res = await request('/api/project/copy', 'post').send({\n        id: res.body.data[1]._id\n      });\n      res = await request('/api/project');\n      const data = res.body.data;\n      expect(data).toHaveLength(3);\n      expect(data[0].url).toBe('/example_copy');\n      expect(data[0].name).toBe('演示项目_copy');\n    });","file":"controllers/project.test.js","skipped":false,"dir":"test"},{"name":"项目已存在","suites":["test/controllers/project.test.js","copy"],"updatePoint":{"line":94,"column":15,"index":3049},"line":94,"code":"    test('项目已存在', async () => {\n      let res = await request('/api/project');\n      res = await request('/api/project/copy', 'post').send({\n        id: res.body.data[2]._id\n      });\n      expect(res.body.message).toBe('项目 演示项目_copy 已存在');\n    });","file":"controllers/project.test.js","skipped":false,"dir":"test"},{"name":"URL 已存在","suites":["test/controllers/project.test.js","copy"],"updatePoint":{"line":101,"column":17,"index":3300},"line":101,"code":"    test('URL 已存在', async () => {\n      const projects = await request('/api/project').then(res => res.body.data);\n      await request('/api/project/update', 'post').send({\n        id: projects[0]._id,\n        name: 'copy_演示项目',\n        url: projects[0].url\n      });\n      const res = await request('/api/project/copy', 'post').send({\n        id: projects[2]._id\n      });\n      await request('/api/project/update', 'post').send({\n        id: projects[0]._id,\n        name: '演示项目_copy',\n        url: projects[0].url\n      });\n      expect(res.body.message).toBe('请检查 URL 是否已经存在');\n    });","file":"controllers/project.test.js","skipped":false,"dir":"test"},{"name":"该项目无接口可复制","suites":["test/controllers/project.test.js","copy"],"updatePoint":{"line":118,"column":19,"index":3892},"line":118,"code":"    test('该项目无接口可复制', async () => {\n      let res = await request('/api/project/create', 'post').send({\n        name: 'empty',\n        url: '/empty',\n        description: 'empty'\n      });\n      const projects = await request('/api/project').then(res => res.body.data);\n      res = await request('/api/project/copy', 'post').send({\n        id: projects[0]._id\n      });\n      await request('/api/project/delete', 'post').send({\n        id: projects[0]._id\n      });\n      expect(res.body.message).toBe('该项目无接口可复制');\n    });","file":"controllers/project.test.js","skipped":false,"dir":"test"},{"name":"参数验证","suites":["test/controllers/project.test.js","updateWorkbench"],"updatePoint":{"line":135,"column":14,"index":4455},"line":135,"code":"    test('参数验证', async () => {\n      const res = await request('/api/project/update_workbench', 'post');\n      expect(res.body.message).toBe('params error');\n    });","file":"controllers/project.test.js","skipped":false,"dir":"test"},{"name":"无权限操作","suites":["test/controllers/project.test.js","updateWorkbench"],"updatePoint":{"line":139,"column":15,"index":4622},"line":139,"code":"    test('无权限操作', async () => {\n      const res = await request('/api/project/update_workbench', 'post').send({\n        id: '111111111111111111111111',\n        status: true\n      });\n      expect(res.body.message).toBe('无权限操作');\n    });","file":"controllers/project.test.js","skipped":false,"dir":"test"},{"name":"加入工作台","suites":["test/controllers/project.test.js","updateWorkbench"],"updatePoint":{"line":146,"column":15,"index":4859},"line":146,"code":"    test('加入工作台', async () => {\n      let res = await request('/api/project');\n      res = await request('/api/project/update_workbench', 'post').send({\n        id: res.body.data[0].extend._id,\n        status: true\n      });\n      expect(res.body.success).toBe(true);\n    });","file":"controllers/project.test.js","skipped":false,"dir":"test"},{"name":"参数验证","suites":["test/controllers/project.test.js","list"],"updatePoint":{"line":156,"column":14,"index":5167},"line":156,"code":"    test('参数验证', async () => {\n      const res = await request('/api/project').query({\n        type: 'demo'\n      });\n      expect(res.body.message).toBe('params error');\n    });","file":"controllers/project.test.js","skipped":false,"dir":"test"},{"name":"我创建的","suites":["test/controllers/project.test.js","list"],"updatePoint":{"line":162,"column":14,"index":5346},"line":162,"code":"    test('我创建的', async () => {\n      const res = await request('/api/project').query({\n        filter_by_author: 1\n      });\n      expect(res.body.data).toHaveLength(3);\n    });","file":"controllers/project.test.js","skipped":false,"dir":"test"},{"name":"我加入的","suites":["test/controllers/project.test.js","list"],"updatePoint":{"line":168,"column":14,"index":5524},"line":168,"code":"    test('我加入的', async () => {\n      const res = await request('/api/project', 'get', soucheUser.token).query({\n        filter_by_author: 2\n      });\n      const data = res.body.data;\n      expect(data).toHaveLength(1);\n      expect(data[0].url).toBe('/demo');\n      expect(data[0].name).toBe('demo');\n    });","file":"controllers/project.test.js","skipped":false,"dir":"test"},{"name":"搜索","suites":["test/controllers/project.test.js","list"],"updatePoint":{"line":177,"column":12,"index":5832},"line":177,"code":"    test('搜索', async () => {\n      const res = await request('/api/project').query({\n        keywords: 'example'\n      });\n      const data = res.body.data;\n      expect(data).toHaveLength(2);\n      expect(data[0].url).toBe('/example_copy');\n      expect(data[0].name).toBe('演示项目_copy');\n      expect(data[1].url).toBe('/example');\n      expect(data[1].name).toBe('演示项目');\n    });","file":"controllers/project.test.js","skipped":false,"dir":"test"},{"name":"工作台","suites":["test/controllers/project.test.js","list"],"updatePoint":{"line":188,"column":13,"index":6214},"line":188,"code":"    test('工作台', async () => {\n      const res = await request('/api/project').query({\n        type: 'workbench'\n      });\n      const data = res.body.data;\n      expect(data).toHaveLength(1);\n      expect(data[0].url).toBe('/example_copy');\n      expect(data[0].name).toBe('演示项目_copy');\n    });","file":"controllers/project.test.js","skipped":false,"dir":"test"},{"name":"团队项目","suites":["test/controllers/project.test.js","list"],"updatePoint":{"line":197,"column":14,"index":6510},"line":197,"code":"    test('团队项目', async () => {\n      await request('/api/group/create', 'post').send({\n        name: 'souche'\n      });\n      let res = await request('/api/group');\n      await request('/api/project/create', 'post').send({\n        name: 'group',\n        url: '/group',\n        group: res.body.data[0]._id\n      });\n      res = await request('/api/project').query({\n        group: res.body.data[0]._id\n      });\n      const data = res.body.data;\n      expect(data).toHaveLength(1);\n      expect(data[0].url).toBe('/group');\n      expect(data[0].name).toBe('group');\n    });","file":"controllers/project.test.js","skipped":false,"dir":"test"},{"name":"获取未加入团队的项目","suites":["test/controllers/project.test.js","list"],"updatePoint":{"line":215,"column":20,"index":7089},"line":215,"code":"    test('获取未加入团队的项目', async () => {\n      let res = await request('/api/group');\n      res = await request('/api/project', 'get', soucheUser.token).query({\n        group: res.body.data[0]._id\n      });\n      const data = res.body.data;\n      expect(data).toHaveLength(0);\n    });","file":"controllers/project.test.js","skipped":false,"dir":"test"},{"name":"参数验证","suites":["test/controllers/project.test.js","update"],"updatePoint":{"line":225,"column":14,"index":7399},"line":225,"code":"    test('参数验证', async () => {\n      const res = await request('/api/project/update', 'post');\n      expect(res.body.message).toBe('params error');\n    });","file":"controllers/project.test.js","skipped":false,"dir":"test"},{"name":"无权限操作","suites":["test/controllers/project.test.js","update"],"updatePoint":{"line":229,"column":15,"index":7556},"line":229,"code":"    test('无权限操作', async () => {\n      let res = await request('/api/project', 'get', soucheUser.token);\n      res = await request('/api/project/update', 'post').send({\n        id: res.body.data[1]._id,\n        name: 'demo',\n        url: '/demo'\n      });\n      expect(res.body.message).toBe('无权限操作');\n    });","file":"controllers/project.test.js","skipped":false,"dir":"test"},{"name":"项目成员不能包含创建者","suites":["test/controllers/project.test.js","update"],"updatePoint":{"line":238,"column":21,"index":7871},"line":238,"code":"    test('项目成员不能包含创建者', async () => {\n      let res = await request('/api/project', 'get');\n      res = await request('/api/project/update', 'post').send({\n        id: res.body.data[0]._id,\n        name: 'demo',\n        url: '/demo',\n        members: [res.body.data[0].user._id]\n      });\n      expect(res.body.message).toBe('项目成员不能包含创建者');\n    });","file":"controllers/project.test.js","skipped":false,"dir":"test"},{"name":"邀请成员","suites":["test/controllers/project.test.js","update"],"updatePoint":{"line":248,"column":14,"index":8213},"line":248,"code":"    test('邀请成员', async () => {\n      let res = await request('/api/project', 'get');\n      res = await request('/api/project/update', 'post').send({\n        id: res.body.data[0]._id,\n        name: 'copy',\n        url: '/copy',\n        members: [soucheUser._id]\n      });\n      expect(res.body.success).toBe(true);\n    });","file":"controllers/project.test.js","skipped":false,"dir":"test"},{"name":"移除成员","suites":["test/controllers/project.test.js","update"],"updatePoint":{"line":258,"column":14,"index":8535},"line":258,"code":"    test('移除成员', async () => {\n      let res = await request('/api/project', 'get');\n      res = await request('/api/project/update', 'post').send({\n        id: res.body.data[0]._id,\n        name: 'copy',\n        url: '/copy',\n        members: []\n      });\n      expect(res.body.success).toBe(true);\n    });","file":"controllers/project.test.js","skipped":false,"dir":"test"},{"name":"请检查 URL 是否已经存在","suites":["test/controllers/project.test.js","update"],"updatePoint":{"line":268,"column":24,"index":8853},"line":268,"code":"    test('请检查 URL 是否已经存在', async () => {\n      let res = await request('/api/project', 'get');\n      res = await request('/api/project/update', 'post').send({\n        id: res.body.data[0]._id,\n        name: 'example',\n        url: '/example'\n      });\n      expect(res.body.message).toBe('请检查 URL 是否已经存在');\n    });","file":"controllers/project.test.js","skipped":false,"dir":"test"},{"name":"项目已存在","suites":["test/controllers/project.test.js","update"],"updatePoint":{"line":277,"column":15,"index":9159},"line":277,"code":"    test('项目已存在', async () => {\n      let res = await request('/api/project', 'get');\n      res = await request('/api/project/update', 'post').send({\n        id: res.body.data[0]._id,\n        name: '演示项目',\n        url: '/example'\n      });\n      expect(res.body.message).toBe('项目 演示项目 已存在');\n    });","file":"controllers/project.test.js","skipped":false,"dir":"test"},{"name":"团队项目","suites":["test/controllers/project.test.js","update"],"updatePoint":{"line":286,"column":14,"index":9458},"line":286,"code":"    test('团队项目', async () => {\n      let res = await request('/api/group');\n      res = await request('/api/project').query({\n        group: res.body.data[0]._id\n      });\n      res = await request('/api/project/update', 'post').send({\n        id: res.body.data[0]._id,\n        name: '演示项目',\n        url: '/example'\n      });\n      expect(res.body.success).toBe(true);\n    });","file":"controllers/project.test.js","skipped":false,"dir":"test"},{"name":"非团队成员无法更新项目","suites":["test/controllers/project.test.js","update"],"updatePoint":{"line":298,"column":21,"index":9842},"line":298,"code":"    test('非团队成员无法更新项目', async () => {\n      let res = await request('/api/group');\n      res = await request('/api/project').query({\n        group: res.body.data[0]._id\n      });\n      res = await request('/api/project/update', 'post', soucheUser.token).send({\n        id: res.body.data[0]._id,\n        name: '演示项目',\n        url: '/example'\n      });\n      expect(res.body.message).toBe('无权限操作');\n    });","file":"controllers/project.test.js","skipped":false,"dir":"test"},{"name":"参数验证","suites":["test/controllers/project.test.js","syncSwagger"],"updatePoint":{"line":312,"column":14,"index":10280},"line":312,"code":"    test('参数验证', async () => {\n      const res = await request('/api/project/sync/swagger', 'post');\n      expect(res.body.message).toBe('params error');\n    });","file":"controllers/project.test.js","skipped":false,"dir":"test"},{"name":"无权限操作","suites":["test/controllers/project.test.js","syncSwagger"],"updatePoint":{"line":316,"column":15,"index":10443},"line":316,"code":"    test('无权限操作', async () => {\n      let res = await request('/api/project', 'get', soucheUser.token);\n      res = await request('/api/project/sync/swagger', 'post').send({\n        id: res.body.data[1]._id\n      });\n      expect(res.body.message).toBe('无权限操作');\n    });","file":"controllers/project.test.js","skipped":false,"dir":"test"},{"name":"请先设置 Swagger 文档地址","suites":["test/controllers/project.test.js","syncSwagger"],"updatePoint":{"line":323,"column":27,"index":10726},"line":323,"code":"    test('请先设置 Swagger 文档地址', async () => {\n      let res = await request('/api/project', 'get');\n      res = await request('/api/project/sync/swagger', 'post').send({\n        id: res.body.data[0]._id\n      });\n      expect(res.body.message).toBe('请先设置 Swagger 文档地址');\n    });","file":"controllers/project.test.js","skipped":false,"dir":"test"},{"name":"同步 Swagger 文档","suites":["test/controllers/project.test.js","syncSwagger"],"updatePoint":{"line":330,"column":23,"index":10999},"line":330,"code":"    test('同步 Swagger 文档', async () => {\n      let res = await request('/api/project', 'get');\n      res = await request('/api/project/sync/swagger', 'post').send({\n        id: res.body.data[1]._id\n      });\n      expect(res.body.success).toBe(true);\n    });","file":"controllers/project.test.js","skipped":false,"dir":"test"},{"name":"同步失败","suites":["test/controllers/project.test.js","syncSwagger"],"updatePoint":{"line":337,"column":14,"index":11248},"line":337,"code":"    test('同步失败', async () => {\n      let res = await request('/api/project', 'get');\n      let apiRes = await request('/api/mock').query({\n        project_id: res.body.data[1]._id\n      });\n      let api = apiRes.body.data.mocks.filter(api => api.url === '/v2/user/logout')[0];\n      await request('/api/mock/update', 'post').send({\n        id: api._id,\n        url: '/v2/user/logout',\n        mode: '{a:1}',\n        method: 'get',\n        description: '同步失败'\n      });\n      res = await request('/api/project/sync/swagger', 'post').send({\n        id: res.body.data[1]._id\n      });\n      const syncErrorURLs = res.body.data.syncErrorURLs;\n      expect(syncErrorURLs).toHaveLength(1);\n      expect(syncErrorURLs[0]).toBe('GET-/v2/user/logout');\n    });","file":"controllers/project.test.js","skipped":false,"dir":"test"},{"name":"参数验证","suites":["test/controllers/project.test.js","delete"],"updatePoint":{"line":359,"column":14,"index":12036},"line":359,"code":"    test('参数验证', async () => {\n      const res = await request('/api/project/delete', 'post');\n      expect(res.body.message).toBe('params error');\n    });","file":"controllers/project.test.js","skipped":false,"dir":"test"},{"name":"无权限操作","suites":["test/controllers/project.test.js","delete"],"updatePoint":{"line":363,"column":15,"index":12193},"line":363,"code":"    test('无权限操作', async () => {\n      let res = await request('/api/project', 'get', soucheUser.token);\n      res = await request('/api/project/delete', 'post').send({\n        id: res.body.data[1]._id\n      });\n      expect(res.body.message).toBe('无权限操作');\n    });","file":"controllers/project.test.js","skipped":false,"dir":"test"},{"name":"非团队创建者无法删除项目","suites":["test/controllers/project.test.js","delete"],"updatePoint":{"line":370,"column":22,"index":12465},"line":370,"code":"    test('非团队创建者无法删除项目', async () => {\n      let res = await request('/api/group');\n      res = await request('/api/project').query({\n        group: res.body.data[0]._id\n      });\n      res = await request('/api/project/delete', 'post', soucheUser.token).send({\n        id: res.body.data[0]._id\n      });\n      expect(res.body.message).toBe('无权限操作');\n    });","file":"controllers/project.test.js","skipped":false,"dir":"test"},{"name":"删除项目","suites":["test/controllers/project.test.js","delete"],"updatePoint":{"line":380,"column":14,"index":12816},"line":380,"code":"    test('删除项目', async () => {\n      let res = await request('/api/project');\n      res = await request('/api/project/delete', 'post').send({\n        id: res.body.data[0]._id\n      });\n      expect(res.body.success).toBe(true);\n    });","file":"controllers/project.test.js","skipped":false,"dir":"test"},{"name":"参数验证","suites":["test/controllers/user.test.js","register"],"updatePoint":{"line":13,"column":14,"index":386},"line":13,"code":"    test('参数验证', async () => {\n      const res = await request('/api/u/register', 'post');\n      expect(res.body.message).toBe('params error');\n    });","file":"controllers/user.test.js","skipped":false,"dir":"test"},{"name":"注册用户","suites":["test/controllers/user.test.js","register"],"updatePoint":{"line":17,"column":14,"index":538},"line":17,"code":"    test('注册用户', async () => {\n      await request('/api/u/register', 'post').send({\n        name: 'test1',\n        password: '123456'\n      }).expect(200, {\n        code: 200,\n        message: 'success',\n        success: true,\n        data: null\n      });\n    });","file":"controllers/user.test.js","skipped":false,"dir":"test"},{"name":"重复注册","suites":["test/controllers/user.test.js","register"],"updatePoint":{"line":28,"column":14,"index":803},"line":28,"code":"    test('重复注册', async () => {\n      const res = await request('/api/u/register', 'post').send({\n        name: 'test1',\n        password: '123456'\n      });\n      expect(res.body.message).toBe('用户名已被使用');\n    });","file":"controllers/user.test.js","skipped":false,"dir":"test"},{"name":"参数验证","suites":["test/controllers/user.test.js","login"],"updatePoint":{"line":37,"column":14,"index":1050},"line":37,"code":"    test('参数验证', async () => {\n      const res = await request('/api/u/login', 'post');\n      expect(res.body.message).toBe('params error');\n    });","file":"controllers/user.test.js","skipped":false,"dir":"test"},{"name":"登录","suites":["test/controllers/user.test.js","login"],"updatePoint":{"line":41,"column":12,"index":1197},"line":41,"code":"    test('登录', async () => {\n      const res = await request('/api/u/login', 'post').send({\n        name: 'test2',\n        password: '123456'\n      });\n      expect(res.body.data.name).toBe('test2');\n    });","file":"controllers/user.test.js","skipped":false,"dir":"test"},{"name":"用户名错误","suites":["test/controllers/user.test.js","login"],"updatePoint":{"line":48,"column":15,"index":1408},"line":48,"code":"    test('用户名错误', async () => {\n      const res = await request('/api/u/login', 'post').send({\n        name: 'te2st',\n        password: '123456'\n      });\n      expect(res.body.message).toBe('用户不存在');\n    });","file":"controllers/user.test.js","skipped":false,"dir":"test"},{"name":"密码错误","suites":["test/controllers/user.test.js","login"],"updatePoint":{"line":55,"column":14,"index":1616},"line":55,"code":"    test('密码错误', async () => {\n      const res = await request('/api/u/login', 'post').send({\n        name: 'test2',\n        password: '1234567'\n      });\n      expect(res.body.message).toBe('用户名或密码错误');\n    });","file":"controllers/user.test.js","skipped":false,"dir":"test"},{"name":"参数验证","suites":["test/controllers/user.test.js","update"],"updatePoint":{"line":64,"column":14,"index":1863},"line":64,"code":"    test('参数验证', async () => {\n      const res = await request('/api/u/update', 'post').send({\n        nick_name: 'u'\n      });\n      expect(res.body.message).toBe('params error');\n    });","file":"controllers/user.test.js","skipped":false,"dir":"test"},{"name":"信息更新","suites":["test/controllers/user.test.js","update"],"updatePoint":{"line":70,"column":14,"index":2052},"line":70,"code":"    test('信息更新', async () => {\n      await request('/api/u/update', 'post').send({\n        nick_name: 'test2',\n        head_img: 'http://example.com/l.png',\n        password: '1234567'\n      });\n      const u = await spt.login('test2', '1234567');\n      expect(u.nick_name).toBe('test2');\n      expect(u.head_img).toBe('http://example.com/l.png');\n    });","file":"controllers/user.test.js","skipped":false,"dir":"test"},{"name":"参数验证","suites":["test/controllers/user.test.js","list"],"updatePoint":{"line":82,"column":14,"index":2441},"line":82,"code":"    test('参数验证', async () => {\n      const res = await request('/api/u').query({\n        page_size: -1\n      });\n      expect(res.body.message).toBe('params error');\n    });","file":"controllers/user.test.js","skipped":false,"dir":"test"},{"name":"分页查询","suites":["test/controllers/user.test.js","list"],"updatePoint":{"line":88,"column":14,"index":2615},"line":88,"code":"    test('分页查询', async () => {\n      const res = await request('/api/u');\n      expect(res.body.data).toHaveLength(1); // ['test1']\n    });","file":"controllers/user.test.js","skipped":false,"dir":"test"},{"name":"关键词查询","suites":["test/controllers/user.test.js","list"],"updatePoint":{"line":93,"column":15,"index":2757},"line":93,"code":"    test('关键词查询', async () => {\n      const res = await request('/api/u').query({\n        keywords: 'te'\n      });\n      const data = res.body.data;\n      expect(data).toHaveLength(1);\n      expect(data[0].name).toBe('test1');\n    });","file":"controllers/user.test.js","skipped":false,"dir":"test"},{"name":"从缓存获取","suites":["test/controllers/util.test.js","wallpaper"],"updatePoint":{"line":47,"column":15,"index":1212},"line":47,"code":"    test('从缓存获取', async () => {\n      const res = await request('/api/wallpaper');\n      const data = res.body.data;\n      expect(data.data).toHaveLength(1);\n      expect(data.data[0]).toEqual({\n        url: 'http://cache.com/l.png',\n        copyrightlink: 'http://cache.com/l.png'\n      });\n      expect(data.type).toBe('bing');\n    });","file":"controllers/util.test.js","skipped":false,"dir":"test"},{"name":"获取 Bing 的壁纸","suites":["test/controllers/util.test.js","wallpaper"],"updatePoint":{"line":57,"column":21,"index":1556},"line":57,"code":"    test('获取 Bing 的壁纸', async () => {\n      const res = await request('/api/wallpaper');\n      const data = res.body.data;\n      expect(data.data).toHaveLength(1);\n      expect(data.data[0]).toEqual({\n        url: 'http://bing.com/l.png',\n        copyrightlink: 'http://bing.com/l.png'\n      });\n      expect(data.type).toBe('bing');\n    });","file":"controllers/util.test.js","skipped":false,"dir":"test"},{"name":"异常处理","suites":["test/controllers/util.test.js","wallpaper"],"updatePoint":{"line":67,"column":14,"index":1891},"line":67,"code":"    test('异常处理', async () => {\n      const res = await request('/api/wallpaper');\n      const data = res.body.data;\n      expect(data.data).toHaveLength(1);\n      expect(data.data[0]).toEqual({\n        url: '/az/hprichbg/rb/SWFC_ZH-CN9558503653_1920x1080.jpg',\n        copyrightlink: '/search?q=%e4%b8%8a%e6%b5%b7%e4%b8%96%e7%95%8c%e9%87%91%e8%9e%8d%e4%b8%ad%e5%bf%83&form=hpcapt&mkt=zh-cn'\n      });\n      expect(data.type).toBe('bing');\n    });","file":"controllers/util.test.js","skipped":false,"dir":"test"},{"name":"文件类型错误","suites":["test/controllers/util.test.js","upload"],"updatePoint":{"line":80,"column":16,"index":2420},"line":80,"code":"    test('文件类型错误', async () => {\n      const res = await request('/api/upload', 'post').attach('file', Buffer.from('upload'), 'upload.js');\n      expect(res.body.message).toBe(`上传失败，仅支持 ${uploadConf.types.join('/').replace(/\\./g, '')} 文件类型`);\n    });","file":"controllers/util.test.js","skipped":false,"dir":"test"},{"name":"大小限制","suites":["test/controllers/util.test.js","upload"],"updatePoint":{"line":84,"column":14,"index":2669},"line":84,"code":"    test('大小限制', async () => {\n      const res = await request('/api/upload', 'post').attach('file', Buffer.alloc(uploadConf.size + 1), 'upload.jpg');\n      expect(res.body.message).toBe('上传失败，超过限定大小');\n    });","file":"controllers/util.test.js","skipped":false,"dir":"test"},{"name":"图片上传","suites":["test/controllers/util.test.js","upload"],"updatePoint":{"line":88,"column":14,"index":2880},"line":88,"code":"    test('图片上传', async () => {\n      const res = await request('/api/upload', 'post').attach('file', Buffer.from('upload'), 'upload.jpg');\n      const data = res.body.data;\n      const filePath = path.resolve(__dirname, '../../config', uploadConf.dir, data.path.match(/\\/upload\\/(.*)/)[1]);\n      expect(data.expire).toBe(moment().add(uploadConf.expire.day, 'days').format('YYYY-MM-DD 00:00:00'));\n      expect(res.body.message).toBe('success');\n      expect(fs.existsSync(filePath)).toBe(true);\n    });","file":"controllers/util.test.js","skipped":false,"dir":"test"},{"name":"ipFilter","suites":["test/middlewares/index.test.js"],"updatePoint":{"line":7,"column":16,"index":198},"line":7,"code":"  test('ipFilter', async () => {\n    const app = new Koa();\n    app.use((ctx, next) => {\n      ctx.request.ip = '127.0.0.1';\n      return next();\n    }).use(middleware.util).use(middleware.ipFilter);\n    const res = await request(app.callback()).get('/');\n    expect(res.body.message).toBe('请求频率太快，已被限制访问');\n  });","file":"middlewares/index.test.js","skipped":false,"dir":"test"},{"name":"params","suites":["test/util/index.test.js"],"updatePoint":{"line":8,"column":14,"index":204},"line":8,"code":"  test('params', () => {\n    let params = util.params('/api/:user/:id', '/api/souche/123');\n    expect(params).toEqual({\n      user: 'souche',\n      id: '123'\n    });\n    params = util.params('/api/:user/:id', '/api/a%AFc/123');\n    expect(params).toEqual({\n      user: 'a%AFc',\n      id: '123'\n    });\n    params = util.params('/api/:user/:id', '/api/123');\n    expect(params).toEqual({});\n  });","file":"util/index.test.js","skipped":false,"dir":"test"},{"name":"dropFileSchedule","suites":["test/util/index.test.js"],"updatePoint":{"line":22,"column":24,"index":611},"line":22,"code":"  test('dropFileSchedule', () => {\n    util.dropFileSchedule();\n    jest.runOnlyPendingTimers();\n    expect(rimraf.mock.calls.length).toBe(2);\n  });","file":"util/index.test.js","skipped":false,"dir":"test"},{"name":"connection","suites":["test/util/ldap.test.js"],"updatePoint":{"line":45,"column":18,"index":1149},"line":45,"code":"  test('connection', async () => {\n    let ldapClient = await ldapUtil.createClient();\n    try {\n      await ldapUtil.authenticate('demo@example.com', '123456', ldapClient);\n    } catch (error) {\n      expect(error.message).toEqual('LDAP connection is not yet bound');\n    } finally {\n      ldapUtil.closeClient(ldapClient);\n    }\n  });","file":"util/ldap.test.js","skipped":false,"dir":"test"},{"name":"authenticate","suites":["test/util/ldap.test.js"],"updatePoint":{"line":55,"column":20,"index":1488},"line":55,"code":"  test('authenticate', done => {\n    setTimeout(async () => {\n      let ldapClient = await ldapUtil.createClient();\n      const user = await ldapUtil.authenticate('demo@example.com', '123456', ldapClient);\n      expect(user).toBeTruthy();\n      try {\n        await ldapUtil.authenticate('demo@example.com', '1234567', ldapClient);\n      } catch (error) {\n        expect(error.message).toEqual('用户名或密码错误');\n      }\n      try {\n        await ldapUtil.authenticate('demo2@example.com', '123456', ldapClient);\n      } catch (error) {\n        expect(error.message).toEqual('用户名或密码错误');\n      }\n      try {\n        await ldapUtil.authenticate('demo2@example.com', '123456');\n      } catch (error) {\n        expect(error.message).toEqual('LDAP connection is not yet bound');\n      }\n      ldapUtil.closeClient(ldapClient);\n      done();\n    }, 1000);\n  });","file":"util/ldap.test.js","skipped":false,"dir":"test"}]}