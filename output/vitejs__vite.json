{"repo":"vitejs/vite","url":"https://github.com/vitejs/vite","branch":"main","configs":[{"package":"create-vite","lang":"ts","dir":"packages/create-vite/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"test-alias","lang":"ts","dir":"packages/playground/alias/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"test-assets","lang":"ts","dir":"packages/playground/assets/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"test-backend-integration","lang":"ts","dir":"packages/playground/backend-integration/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"test-cli-module","lang":"ts","dir":"packages/playground/cli-module/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"test-cli","lang":"ts","dir":"packages/playground/cli/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"test-css-codesplit-cjs","lang":"ts","dir":"packages/playground/css-codesplit-cjs/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"test-css-codesplit","lang":"ts","dir":"packages/playground/css-codesplit/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"test-css","lang":"ts","dir":"packages/playground/css/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"test-data-uri","lang":"ts","dir":"packages/playground/data-uri/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"test-define","lang":"ts","dir":"packages/playground/define/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"test-dynamic-import","lang":"ts","dir":"packages/playground/dynamic-import/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"test-env","lang":"ts","dir":"packages/playground/env/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"test-extensions","lang":"ts","dir":"packages/playground/extensions/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"test-file-delete-restore","lang":"ts","dir":"packages/playground/file-delete-restore/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"test-fs-serve","lang":"ts","dir":"packages/playground/fs-serve/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"test-import-context","lang":"ts","dir":"packages/playground/glob-import/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"test-hmr","lang":"ts","dir":"packages/playground/hmr/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"test-html","lang":"ts","dir":"packages/playground/html/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"test-json","lang":"ts","dir":"packages/playground/json/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"test-legacy","lang":"ts","dir":"packages/playground/legacy/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@example/my-lib","lang":"ts","dir":"packages/playground/lib/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"multiple-entrypoints","lang":"ts","dir":"packages/playground/multiple-entrypoints/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@test/nested-deps","lang":"ts","dir":"packages/playground/nested-deps/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"test-optimize-deps","lang":"ts","dir":"packages/playground/optimize-deps/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"test-preload","lang":"ts","dir":"packages/playground/preload/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"preserve-symlinks","lang":"ts","dir":"packages/playground/preserve-symlinks/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"test-react-emotion","lang":"ts","dir":"packages/playground/react-emotion/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"test-react","lang":"ts","dir":"packages/playground/react/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"test-resolve","lang":"ts","dir":"packages/playground/resolve/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"test-ssr-deps","lang":"ts","dir":"packages/playground/ssr-deps/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"test-ssr-html","lang":"ts","dir":"packages/playground/ssr-html/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"test-ssr-pug","lang":"ts","dir":"packages/playground/ssr-pug/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"test-ssr-react","lang":"ts","dir":"packages/playground/ssr-react/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"test-ssr-vue","lang":"ts","dir":"packages/playground/ssr-vue/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"test-ssr-webworker","lang":"ts","dir":"packages/playground/ssr-webworker/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"tsconfig-json-load-error","lang":"ts","dir":"packages/playground/tsconfig-json-load-error/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"tsconfig-json","lang":"ts","dir":"packages/playground/tsconfig-json/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"test-vue-jsx","lang":"ts","dir":"packages/playground/vue-jsx/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"test-vue","lang":"ts","dir":"packages/playground/vue/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"test-wasm","lang":"ts","dir":"packages/playground/wasm/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"test-worker","lang":"ts","dir":"packages/playground/worker/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"prompts for the project name if none supplied","suites":[],"updatePoint":{"line":39,"column":51},"line":39,"code":"test('prompts for the project name if none supplied', () => {\n  const { stdout, exitCode } = run([])\n  expect(stdout).toContain('Project name:')\n})","file":"cli.spec.ts","skipped":false,"dir":"packages/create-vite/__tests__"},{"name":"prompts for the framework if none supplied","suites":[],"updatePoint":{"line":44,"column":48},"line":44,"code":"test('prompts for the framework if none supplied', () => {\n  const { stdout } = run([projectName])\n  expect(stdout).toContain('Select a framework:')\n})","file":"cli.spec.ts","skipped":false,"dir":"packages/create-vite/__tests__"},{"name":"prompts for the framework on not supplying a value for --template","suites":[],"updatePoint":{"line":49,"column":71},"line":49,"code":"test('prompts for the framework on not supplying a value for --template', () => {\n  const { stdout } = run([projectName, '--template'])\n  expect(stdout).toContain('Select a framework:')\n})","file":"cli.spec.ts","skipped":false,"dir":"packages/create-vite/__tests__"},{"name":"prompts for the framework on supplying an invalid template","suites":[],"updatePoint":{"line":54,"column":64},"line":54,"code":"test('prompts for the framework on supplying an invalid template', () => {\n  const { stdout } = run([projectName, '--template', 'unknown'])\n  expect(stdout).toContain(\n    `\"unknown\" isn't a valid template. Please choose from below:`\n  )\n})","file":"cli.spec.ts","skipped":false,"dir":"packages/create-vite/__tests__"},{"name":"asks to overwrite non-empty target directory","suites":[],"updatePoint":{"line":61,"column":50},"line":61,"code":"test('asks to overwrite non-empty target directory', () => {\n  createNonEmptyDir()\n  const { stdout } = run([projectName], { cwd: __dirname })\n  expect(stdout).toContain(`Target directory \"${projectName}\" is not empty.`)\n})","file":"cli.spec.ts","skipped":false,"dir":"packages/create-vite/__tests__"},{"name":"asks to overwrite non-empty current directory","suites":[],"updatePoint":{"line":67,"column":51},"line":67,"code":"test('asks to overwrite non-empty current directory', () => {\n  createNonEmptyDir()\n  const { stdout } = run(['.'], { cwd: genPath, input: 'test-app\\n' })\n  expect(stdout).toContain(`Current directory is not empty.`)\n})","file":"cli.spec.ts","skipped":false,"dir":"packages/create-vite/__tests__"},{"name":"successfully scaffolds a project based on vue starter template","suites":[],"updatePoint":{"line":73,"column":68},"line":73,"code":"test('successfully scaffolds a project based on vue starter template', () => {\n  const { stdout } = run([projectName, '--template', 'vue'], {\n    cwd: __dirname\n  })\n  const generatedFiles = readdirSync(genPath).sort()\n\n  // Assertions\n  expect(stdout).toContain(`Scaffolding project in ${genPath}`)\n  expect(templateFiles).toEqual(generatedFiles)\n})","file":"cli.spec.ts","skipped":false,"dir":"packages/create-vite/__tests__"},{"name":"works with the -t alias","suites":[],"updatePoint":{"line":84,"column":29},"line":84,"code":"test('works with the -t alias', () => {\n  const { stdout } = run([projectName, '-t', 'vue'], {\n    cwd: __dirname\n  })\n  const generatedFiles = readdirSync(genPath).sort()\n\n  // Assertions\n  expect(stdout).toContain(`Scaffolding project in ${genPath}`)\n  expect(templateFiles).toEqual(generatedFiles)\n})","file":"cli.spec.ts","skipped":false,"dir":"packages/create-vite/__tests__"}]}