{"repo":"dmtrKovalenko/cypress-real-events","url":"https://github.com/dmtrKovalenko/cypress-real-events","branch":"develop","configs":[{"pattern":"**/*.{js,ts}","dir":"cypress","framework":"cypress","lang":"ts"}],"tests":[{"name":"clicks on the button","suites":["cy.realClick"],"updatePoint":{"line":6,"column":26},"line":6,"code":"  it(\"clicks on the button\", () => {\n    cy.get(\".action-btn\").realClick();\n    cy.contains(\"This popover shows up on click\");\n  });","file":"e2e/click.cy.ts","skipped":false,"dir":"cypress"},{"name":"clicks on the text field","suites":["cy.realClick"],"updatePoint":{"line":11,"column":30},"line":11,"code":"  it(\"clicks on the text field\", () => {\n    cy.get(\"#email1\").realClick().should(\"be.focused\");\n  });","file":"e2e/click.cy.ts","skipped":false,"dir":"cypress"},{"name":"clicks on different positions","suites":["cy.realClick"],"updatePoint":{"line":15,"column":35},"line":15,"code":"  it(\"clicks on different positions\", () => {\n    cy.get(\"#action-canvas\")\n      .realClick({ position: \"topLeft\" })\n      .realClick({ position: \"top\" })\n      .realClick({ position: \"topRight\" })\n      .realClick({ position: \"left\" })\n      .realClick({ position: \"center\" })\n      .realClick({ position: \"right\" })\n      .realClick({ position: \"bottomLeft\" })\n      .realClick({ position: \"bottom\" })\n      .realClick({ position: \"bottomRight\" });\n  });","file":"e2e/click.cy.ts","skipped":false,"dir":"cypress"},{"name":"clicks on custom coordinates","suites":["cy.realClick"],"updatePoint":{"line":28,"column":34},"line":28,"code":"  it(\"clicks on custom coordinates\", () => {\n    cy.get(\"#action-canvas\")\n      .realClick({ x: 80, y: 75 })\n      .realClick({ x: 170, y: 75 })\n      .realClick({ x: 80, y: 165 })\n      .realClick({ x: 100, y: 185 })\n      .realClick({ x: 125, y: 190 })\n      .realClick({ x: 150, y: 185 })\n      .realClick({ x: 170, y: 165 });\n  });","file":"e2e/click.cy.ts","skipped":false,"dir":"cypress"},{"name":"opens system native event on right click","suites":["cy.realClick"],"updatePoint":{"line":39,"column":46},"line":39,"code":"  it(\"opens system native event on right click\", () => {\n    cy.get(\".action-btn\").realClick({ button: \"right\" });\n  });","file":"e2e/click.cy.ts","skipped":false,"dir":"cypress"},{"name":"allow for double clicks","suites":["cy.realClick"],"updatePoint":{"line":43,"column":29},"line":43,"code":"  it(\"allow for double clicks\", (done) => {\n    cy.get(\".action-btn\")\n      .then(($button) => {\n        $button.get(0).addEventListener(\"dblclick\", () => {\n          done();\n        });\n      })\n      .realClick({ clickCount: 2 });\n  });","file":"e2e/click.cy.ts","skipped":false,"dir":"cypress"},{"name":"should dispatch multiple clicks with clickCount greater than 1","suites":["cy.realClick"],"updatePoint":{"line":53,"column":68},"line":53,"code":"  it(\"should dispatch multiple clicks with clickCount greater than 1\", (done) => {\n    let count = 0;\n    cy.get(\".action-btn\")\n      .then(($button) => {\n        $button.get(0).addEventListener(\"click\", () => {\n          count++;\n          if (count === 2) {\n            done();\n          }\n        });\n      })\n      .realClick({ clickCount: 2 });\n  });","file":"e2e/click.cy.ts","skipped":false,"dir":"cypress"},{"name":"right click should only report secondary button being pressed","suites":["cy.realClick"],"updatePoint":{"line":67,"column":67},"line":67,"code":"  it(\"right click should only report secondary button being pressed\", () => {\n    cy.get(\".navbar-brand\").then(($navbarBrand) => {\n      $navbarBrand.get(0).addEventListener(\"contextmenu\", (ev) => {\n        ev.preventDefault();\n        expect(ev.buttons).to.eq(2);\n      });\n    });\n\n    cy.get(\".navbar-brand\").realClick({ button: \"right\" });\n  });","file":"e2e/click.cy.ts","skipped":false,"dir":"cypress"},{"name":"defaults to scrolling the element to the top of the viewport","suites":["cy.realClick","scroll behavior"],"updatePoint":{"line":106,"column":68},"line":106,"code":"    it(\"defaults to scrolling the element to the top of the viewport\", () => {\n      cy.get(\"#action-canvas\")\n        .realClick()\n        .then(($canvas: JQuery) => {\n          const { top: $elTop } = getElementEdges($canvas);\n          const { top: screenTop } = getScreenEdges();\n\n          expect($elTop).to.equal(Math.floor(screenTop));\n        });\n    });","file":"e2e/click.cy.ts","skipped":false,"dir":"cypress"},{"name":"scrolls the element to center of viewport","suites":["cy.realClick","scroll behavior"],"updatePoint":{"line":117,"column":49},"line":117,"code":"    it(\"scrolls the element to center of viewport\", () => {\n      cy.get(\"#action-canvas\")\n        .realClick({ scrollBehavior: \"center\" })\n        .then(($canvas: JQuery) => {\n          const { top: $elTop, bottom: $elBottom } = getElementEdges($canvas);\n          const { top: screenTop, bottom: screenBottom } = getScreenEdges();\n\n          const screenCenter = screenTop + (screenBottom - screenTop) / 2;\n\n          expect($elTop).to.eq(\n            Math.floor(screenCenter - $canvas.outerHeight() / 2)\n          );\n          expect($elBottom).to.equal(\n            Math.floor(screenCenter + $canvas.outerHeight() / 2)\n          );\n        });\n    });","file":"e2e/click.cy.ts","skipped":false,"dir":"cypress"},{"name":"scrolls the element to the top of the viewport","suites":["cy.realClick","scroll behavior"],"updatePoint":{"line":135,"column":54},"line":135,"code":"    it(\"scrolls the element to the top of the viewport\", () => {\n      cy.get(\"#action-canvas\")\n        .realClick({ scrollBehavior: \"top\" })\n        .then(($canvas: JQuery) => {\n          const { top: $elTop } = getElementEdges($canvas);\n          const { top: screenTop } = getScreenEdges();\n\n          expect($elTop).to.equal(Math.floor(screenTop));\n        });\n    });","file":"e2e/click.cy.ts","skipped":false,"dir":"cypress"},{"name":"scrolls the element to the bottom of the viewport","suites":["cy.realClick","scroll behavior"],"updatePoint":{"line":146,"column":57},"line":146,"code":"    it(\"scrolls the element to the bottom of the viewport\", () => {\n      cy.get(\"#action-canvas\")\n        .realClick({ scrollBehavior: \"bottom\" })\n        .then(($canvas: JQuery) => {\n          const { bottom: $elBottom } = getElementEdges($canvas);\n          const { bottom: screenBottom } = getScreenEdges();\n\n          expect($elBottom).to.equal(Math.floor(screenBottom));\n        });\n    });","file":"e2e/click.cy.ts","skipped":false,"dir":"cypress"},{"name":"scrolls the element to the nearest edge of the viewport","suites":["cy.realClick","scroll behavior"],"updatePoint":{"line":157,"column":63},"line":157,"code":"    it(\"scrolls the element to the nearest edge of the viewport\", () => {\n      cy.window().scrollTo(\"bottom\");\n\n      cy.get(\"#action-canvas\")\n        .realClick({ scrollBehavior: \"nearest\" })\n        .then(($canvas: JQuery) => {\n          const { top: $elTop } = getElementEdges($canvas);\n          const { top: screenTop } = getScreenEdges();\n\n          expect($elTop).to.equal(Math.floor(screenTop));\n        });\n\n      cy.window().scrollTo(\"top\");\n\n      cy.get(\"#action-canvas\")\n        .realClick({ scrollBehavior: \"nearest\" })\n        .then(($canvas: JQuery) => {\n          const { bottom: $elBottom } = getElementEdges($canvas);\n          const { bottom: screenBottom } = getScreenEdges();\n\n          expect($elBottom).to.equal(Math.floor(screenBottom));\n        });\n    });","file":"e2e/click.cy.ts","skipped":false,"dir":"cypress"},{"name":"clicks elements inside iframes","suites":["iframe behavior"],"updatePoint":{"line":188,"column":36},"line":188,"code":"  it(\"clicks elements inside iframes\", () => {\n    cy.get(\"iframe\")\n      .then(($firstIframe) => {\n        return cy.wrap($firstIframe.contents().find(\"iframe\"));\n      })\n      .then(($secondIframe) => {\n        return cy.wrap($secondIframe.contents().find(\"body\"));\n      })\n      .within(() => {\n        cy.get(\"#target\").contains(\"clicked\").should(\"not.exist\");\n        cy.get(\"#target\").realClick().contains(\"clicked\").should(\"exist\");\n      });\n  });","file":"e2e/click.cy.ts","skipped":false,"dir":"cypress"},{"name":"clicks elements inside transformed iframes","suites":["iframe behavior"],"updatePoint":{"line":202,"column":48},"line":202,"code":"  it(\"clicks elements inside transformed iframes\", () => {\n    cy.get(\"iframe\")\n      .then(($firstIframe) => {\n        $firstIframe.css(\"transform\", \"scale(.5)\");\n        return cy.wrap($firstIframe.contents().find(\"iframe\"));\n      })\n      .then(($secondIframe) => {\n        $secondIframe.css(\"transform\", \"scale(.75)\");\n        return cy.wrap($secondIframe.contents().find(\"body\"));\n      })\n      .within(() => {\n        cy.get(\"#target\").contains(\"clicked\").should(\"not.exist\");\n        cy.get(\"#target\").realClick().contains(\"clicked\").should(\"exist\");\n      });\n  });","file":"e2e/click.cy.ts","skipped":false,"dir":"cypress"},{"name":"hovers and applies styles from :hover pseudo-class","suites":["cy.realHover"],"updatePoint":{"line":6,"column":56},"line":6,"code":"  it(\"hovers and applies styles from :hover pseudo-class\", () => {\n    cy.get(\".action-btn\")\n      .should(\"have.css\", \"background-color\", \"rgb(217, 83, 79)\")\n      .realHover()\n      .should(\"have.css\", \"background-color\", \"rgb(201, 48, 44)\");\n\n    cy.get(\"body\").realHover({ position: \"topLeft\" });\n    cy.get(\".action-btn\").should(\n      \"have.css\",\n      \"background-color\",\n      \"rgb(217, 83, 79)\"\n    );\n  });","file":"e2e/hover.cy.ts","skipped":false,"dir":"cypress"},{"name":"defaults to scrolling the element to the top of the viewport","suites":["cy.realHover","scroll behavior"],"updatePoint":{"line":48,"column":68},"line":48,"code":"    it(\"defaults to scrolling the element to the top of the viewport\", () => {\n      cy.get(\"#action-canvas\")\n        .realHover()\n        .then(($canvas: JQuery) => {\n          const { $elTop } = getElementEdges($canvas);\n          const { screenTop } = getScreenEdges();\n\n          expect($elTop).to.equal(screenTop);\n        });\n    });","file":"e2e/hover.cy.ts","skipped":false,"dir":"cypress"},{"name":"scrolls the element to center of viewport","suites":["cy.realHover","scroll behavior"],"updatePoint":{"line":59,"column":49},"line":59,"code":"    it(\"scrolls the element to center of viewport\", () => {\n      cy.get(\"#action-canvas\")\n        .realHover({ scrollBehavior: \"center\" })\n        .then(($canvas: JQuery) => {\n          const { $elTop, $elBottom } = getElementEdges($canvas);\n          const { screenTop, screenBottom } = getScreenEdges();\n\n          const screenCenter = screenTop + (screenBottom - screenTop) / 2;\n\n          expect($elTop).to.equal(\n            Math.floor(screenCenter) - $canvas.outerHeight() / 2\n          );\n          expect($elBottom).to.equal(\n            Math.floor(screenCenter) + $canvas.outerHeight() / 2\n          );\n        });\n    });","file":"e2e/hover.cy.ts","skipped":false,"dir":"cypress"},{"name":"scrolls the element to the top of the viewport","suites":["cy.realHover","scroll behavior"],"updatePoint":{"line":77,"column":54},"line":77,"code":"    it(\"scrolls the element to the top of the viewport\", () => {\n      cy.get(\"#action-canvas\")\n        .realHover({ scrollBehavior: \"top\" })\n        .then(($canvas: JQuery) => {\n          const { $elTop } = getElementEdges($canvas);\n          const { screenTop } = getScreenEdges();\n\n          expect($elTop).to.equal(Math.floor(screenTop));\n        });\n    });","file":"e2e/hover.cy.ts","skipped":false,"dir":"cypress"},{"name":"scrolls the element to the bottom of the viewport","suites":["cy.realHover","scroll behavior"],"updatePoint":{"line":88,"column":57},"line":88,"code":"    it(\"scrolls the element to the bottom of the viewport\", () => {\n      cy.get(\"#action-canvas\")\n        .realHover({ scrollBehavior: \"bottom\" })\n        .then(($canvas: JQuery) => {\n          const { $elBottom } = getElementEdges($canvas);\n          const { screenBottom } = getScreenEdges();\n\n          expect($elBottom).to.equal(Math.floor(screenBottom));\n        });\n    });","file":"e2e/hover.cy.ts","skipped":false,"dir":"cypress"},{"name":"scrolls the element to the nearest edge of the viewport","suites":["cy.realHover","scroll behavior"],"updatePoint":{"line":99,"column":63},"line":99,"code":"    it(\"scrolls the element to the nearest edge of the viewport\", () => {\n      cy.window().scrollTo(\"bottom\");\n\n      cy.get(\"#action-canvas\")\n        .realHover({ scrollBehavior: \"nearest\" })\n        .then(($canvas: JQuery) => {\n          const { $elTop } = getElementEdges($canvas);\n          const { screenTop } = getScreenEdges();\n\n          expect($elTop).to.equal(Math.floor(screenTop));\n        });\n\n      cy.window().scrollTo(\"top\");\n\n      cy.get(\"#action-canvas\")\n        .realHover({ scrollBehavior: \"nearest\" })\n        .then(($canvas: JQuery) => {\n          const { $elBottom } = getElementEdges($canvas);\n          const { screenBottom } = getScreenEdges();\n\n          expect($elBottom).to.equal(Math.floor(screenBottom));\n        });\n    });","file":"e2e/hover.cy.ts","skipped":false,"dir":"cypress"},{"name":"hovers elements inside iframes","suites":["iframe behavior"],"updatePoint":{"line":130,"column":36},"line":130,"code":"  it(\"hovers elements inside iframes\", () => {\n    cy.get(\"iframe\")\n      .then(($firstIframe) => {\n        return cy.wrap($firstIframe.contents().find(\"iframe\"));\n      })\n      .then(($secondIframe) => {\n        return cy.wrap($secondIframe.contents().find(\"body\"));\n      })\n      .within(() => {\n        cy.get(\"#target\").then(($target) => {\n          expect($target.css(\"background-color\")).to.equal(\"rgb(0, 128, 0)\");\n        });\n\n        cy.get(\"#target\")\n          .realHover()\n          .then(($target) => {\n            expect($target.css(\"background-color\")).to.equal(\n              \"rgb(255, 192, 203)\"\n            );\n          });\n      });\n  });","file":"e2e/hover.cy.ts","skipped":false,"dir":"cypress"},{"name":"hovers elements inside transformed iframes","suites":["iframe behavior"],"updatePoint":{"line":153,"column":48},"line":153,"code":"  it(\"hovers elements inside transformed iframes\", () => {\n    cy.get(\"iframe\")\n      .then(($firstIframe) => {\n        $firstIframe.css(\"transform\", \"scale(.5)\");\n        return cy.wrap($firstIframe.contents().find(\"iframe\"));\n      })\n      .then(($secondIframe) => {\n        $secondIframe.css(\"transform\", \"scale(.75)\");\n        return cy.wrap($secondIframe.contents().find(\"body\"));\n      })\n      .within(() => {\n        cy.get(\"#target\").then(($target) => {\n          expect($target.css(\"background-color\")).to.equal(\"rgb(0, 128, 0)\");\n        });\n\n        cy.get(\"#target\")\n          .realHover()\n          .then(($target) => {\n            expect($target.css(\"background-color\")).to.equal(\n              \"rgb(255, 192, 203)\"\n            );\n          });\n      });\n  });","file":"e2e/hover.cy.ts","skipped":false,"dir":"cypress"},{"name":"active state on the button","suites":["cy.realMouseDown and cy.realMouseUp"],"updatePoint":{"line":6,"column":32},"line":6,"code":"  it(\"active state on the button\", () => {\n    cy.get(\".action-btn\").should(\n      \"have.css\",\n      \"background-color\",\n      \"rgb(217, 83, 79)\"\n    );\n    cy.get(\".action-btn\").realMouseDown();\n    cy.get(\".action-btn\").should(\n      \"have.css\",\n      \"background-color\",\n      \"rgb(172, 41, 37)\"\n    );\n    cy.get(\".action-btn\").realMouseUp(); // will go in hover state\n    cy.get(\".action-btn\").should(\n      \"have.css\",\n      \"background-color\",\n      \"rgb(201, 48, 44)\"\n    );\n  });","file":"e2e/mouse.cy.ts","skipped":false,"dir":"cypress"},{"name":"active/focused state on the text field","suites":["cy.realMouseDown and cy.realMouseUp"],"updatePoint":{"line":26,"column":44},"line":26,"code":"  it(\"active/focused state on the text field\", () => {\n    cy.get(\"#email1\").realMouseDown().should(\"be.focused\");\n  });","file":"e2e/mouse.cy.ts","skipped":false,"dir":"cypress"},{"name":"active state on different positions","suites":["cy.realMouseDown and cy.realMouseUp"],"updatePoint":{"line":30,"column":41},"line":30,"code":"  it(\"active state on different positions\", () => {\n    cy.get(\".action-btn\")\n      .realMouseDown({ position: \"topLeft\" })\n      .realMouseUp({ position: \"topLeft\" })\n      .realMouseDown({ position: \"top\" })\n      .realMouseUp({ position: \"top\" })\n      .realMouseDown({ position: \"topRight\" })\n      .realMouseUp({ position: \"topRight\" })\n      .realMouseDown({ position: \"left\" })\n      .realMouseUp({ position: \"left\" })\n      .realMouseDown({ position: \"center\" })\n      .realMouseUp({ position: \"center\" })\n      .realMouseDown({ position: \"right\" })\n      .realMouseUp({ position: \"right\" })\n      .realMouseDown({ position: \"bottomLeft\" })\n      .realMouseUp({ position: \"bottomLeft\" })\n      .realMouseDown({ position: \"bottom\" })\n      .realMouseUp({ position: \"bottom\" })\n      .realMouseDown({ position: \"bottomRight\" })\n      .realMouseUp({ position: \"bottomRight\" });\n  });","file":"e2e/mouse.cy.ts","skipped":false,"dir":"cypress"},{"name":"should allow to press down mouse using middle button","suites":["cy.realMouseDown and cy.realMouseUp","options.button"],"updatePoint":{"line":53,"column":60},"line":53,"code":"    it(\"should allow to press down mouse using middle button\", (done) => {\n      cy.get(\".action-btn\")\n        .then(($button) => {\n          $button.get(0).addEventListener(\"mousedown\", (ev) => {\n            if (ev.button === 1) {\n              done();\n            }\n          });\n        })\n        .realMouseDown({ button: \"middle\" });\n    });","file":"e2e/mouse.cy.ts","skipped":false,"dir":"cypress"},{"name":"should allow to release mouse using middle button","suites":["cy.realMouseDown and cy.realMouseUp","options.button"],"updatePoint":{"line":65,"column":57},"line":65,"code":"    it(\"should allow to release mouse using middle button\", (done) => {\n      cy.get(\".action-btn\")\n        .then(($button) => {\n          $button.get(0).addEventListener(\"mouseup\", (ev) => {\n            if (ev.button === 1) {\n              done();\n            }\n          });\n        })\n        .realMouseUp({ button: \"middle\" });\n    });","file":"e2e/mouse.cy.ts","skipped":false,"dir":"cypress"},{"name":"defaults to scrolling the element to the top of the viewport","suites":["cy.realMouseDown and cy.realMouseUp","realMouseDown scroll behavior"],"updatePoint":{"line":105,"column":68},"line":105,"code":"    it(\"defaults to scrolling the element to the top of the viewport\", () => {\n      cy.get(\"#action-canvas\")\n        .realMouseDown()\n        .then(($canvas: JQuery) => {\n          const { top: $elTop } = getElementEdges($canvas);\n          const { top: screenTop } = getScreenEdges();\n\n          expect($elTop).to.equal(Math.floor(screenTop));\n        });\n    });","file":"e2e/mouse.cy.ts","skipped":false,"dir":"cypress"},{"name":"scrolls the element to center of viewport","suites":["cy.realMouseDown and cy.realMouseUp","realMouseDown scroll behavior"],"updatePoint":{"line":116,"column":49},"line":116,"code":"    it(\"scrolls the element to center of viewport\", () => {\n      cy.get(\"#action-canvas\")\n        .realMouseDown({ scrollBehavior: \"center\" })\n        .then(($canvas: JQuery) => {\n          const { top: $elTop, bottom: $elBottom } = getElementEdges($canvas);\n          const { top: screenTop, bottom: screenBottom } = getScreenEdges();\n\n          const screenCenter = screenTop + (screenBottom - screenTop) / 2;\n\n          expect($elTop).to.equal(\n            Math.floor(screenCenter) - $canvas.outerHeight() / 2\n          );\n          expect($elBottom).to.equal(\n            Math.floor(screenCenter) + $canvas.outerHeight() / 2\n          );\n        });\n    });","file":"e2e/mouse.cy.ts","skipped":false,"dir":"cypress"},{"name":"scrolls the element to the top of the viewport","suites":["cy.realMouseDown and cy.realMouseUp","realMouseDown scroll behavior"],"updatePoint":{"line":134,"column":54},"line":134,"code":"    it(\"scrolls the element to the top of the viewport\", () => {\n      cy.get(\"#action-canvas\")\n        .realMouseDown({ scrollBehavior: \"top\" })\n        .then(($canvas: JQuery) => {\n          const { top: $elTop } = getElementEdges($canvas);\n          const { top: screenTop } = getScreenEdges();\n\n          expect($elTop).to.equal(Math.floor(screenTop));\n        });\n    });","file":"e2e/mouse.cy.ts","skipped":false,"dir":"cypress"},{"name":"scrolls the element to the bottom of the viewport","suites":["cy.realMouseDown and cy.realMouseUp","realMouseDown scroll behavior"],"updatePoint":{"line":145,"column":57},"line":145,"code":"    it(\"scrolls the element to the bottom of the viewport\", () => {\n      cy.get(\"#action-canvas\")\n        .realMouseDown({ scrollBehavior: \"bottom\" })\n        .then(($canvas: JQuery) => {\n          const { bottom: $elBottom } = getElementEdges($canvas);\n          const { bottom: screenBottom } = getScreenEdges();\n\n          expect($elBottom).to.equal(Math.floor(screenBottom));\n        });\n    });","file":"e2e/mouse.cy.ts","skipped":false,"dir":"cypress"},{"name":"scrolls the element to the nearest edge of the viewport","suites":["cy.realMouseDown and cy.realMouseUp","realMouseDown scroll behavior"],"updatePoint":{"line":156,"column":63},"line":156,"code":"    it(\"scrolls the element to the nearest edge of the viewport\", () => {\n      cy.window().scrollTo(\"bottom\");\n\n      cy.get(\"#action-canvas\")\n        .realMouseDown({ scrollBehavior: \"nearest\" })\n        .then(($canvas: JQuery) => {\n          const { top: $elTop } = getElementEdges($canvas);\n          const { top: screenTop } = getScreenEdges();\n\n          expect($elTop).to.equal(Math.floor(screenTop));\n        });\n\n      cy.window().scrollTo(\"top\");\n\n      cy.get(\"#action-canvas\")\n        .realMouseDown({ scrollBehavior: \"nearest\" })\n        .then(($canvas: JQuery) => {\n          const { bottom: $elBottom } = getElementEdges($canvas);\n          const { bottom: screenBottom } = getScreenEdges();\n\n          expect($elBottom).to.equal(Math.floor(screenBottom));\n        });\n    });","file":"e2e/mouse.cy.ts","skipped":false,"dir":"cypress"},{"name":"defaults to scrolling the element to the top of the viewport","suites":["cy.realMouseDown and cy.realMouseUp","realMouseUp scroll behavior"],"updatePoint":{"line":186,"column":68},"line":186,"code":"    it(\"defaults to scrolling the element to the top of the viewport\", () => {\n      cy.get(\"#action-canvas\")\n        .realMouseUp()\n        .then(($canvas: JQuery) => {\n          const { top: $elTop } = getElementEdges($canvas);\n          const { top: screenTop } = getScreenEdges();\n\n          expect($elTop).to.equal(Math.floor(screenTop));\n        });\n    });","file":"e2e/mouse.cy.ts","skipped":false,"dir":"cypress"},{"name":"scrolls the element to center of viewport","suites":["cy.realMouseDown and cy.realMouseUp","realMouseUp scroll behavior"],"updatePoint":{"line":197,"column":49},"line":197,"code":"    it(\"scrolls the element to center of viewport\", () => {\n      cy.get(\"#action-canvas\")\n        .realMouseUp({ scrollBehavior: \"center\" })\n        .then(($canvas: JQuery) => {\n          const { top: $elTop, bottom: $elBottom } = getElementEdges($canvas);\n          const { top: screenTop, bottom: screenBottom } = getScreenEdges();\n\n          const screenCenter = screenTop + (screenBottom - screenTop) / 2;\n\n          expect($elTop).to.equal(\n            Math.floor(screenCenter) - $canvas.outerHeight() / 2\n          );\n          expect($elBottom).to.equal(\n            Math.floor(screenCenter) + $canvas.outerHeight() / 2\n          );\n        });\n    });","file":"e2e/mouse.cy.ts","skipped":false,"dir":"cypress"},{"name":"scrolls the element to the top of the viewport","suites":["cy.realMouseDown and cy.realMouseUp","realMouseUp scroll behavior"],"updatePoint":{"line":215,"column":54},"line":215,"code":"    it(\"scrolls the element to the top of the viewport\", () => {\n      cy.get(\"#action-canvas\")\n        .realMouseUp({ scrollBehavior: \"top\" })\n        .then(($canvas: JQuery) => {\n          const { top: $elTop } = getElementEdges($canvas);\n          const { top: screenTop } = getScreenEdges();\n\n          expect($elTop).to.equal(Math.floor(screenTop));\n        });\n    });","file":"e2e/mouse.cy.ts","skipped":false,"dir":"cypress"},{"name":"scrolls the element to the bottom of the viewport","suites":["cy.realMouseDown and cy.realMouseUp","realMouseUp scroll behavior"],"updatePoint":{"line":226,"column":57},"line":226,"code":"    it(\"scrolls the element to the bottom of the viewport\", () => {\n      cy.get(\"#action-canvas\")\n        .realMouseUp({ scrollBehavior: \"bottom\" })\n        .then(($canvas: JQuery) => {\n          const { bottom: $elBottom } = getElementEdges($canvas);\n          const { bottom: screenBottom } = getScreenEdges();\n\n          expect($elBottom).to.equal(Math.floor(screenBottom));\n        });\n    });","file":"e2e/mouse.cy.ts","skipped":false,"dir":"cypress"},{"name":"scrolls the element to the nearest edge of the viewport","suites":["cy.realMouseDown and cy.realMouseUp","realMouseUp scroll behavior"],"updatePoint":{"line":237,"column":63},"line":237,"code":"    it(\"scrolls the element to the nearest edge of the viewport\", () => {\n      cy.window().scrollTo(\"bottom\");\n\n      cy.get(\"#action-canvas\")\n        .realMouseUp({ scrollBehavior: \"nearest\" })\n        .then(($canvas: JQuery) => {\n          const { top: $elTop } = getElementEdges($canvas);\n          const { top: screenTop } = getScreenEdges();\n\n          expect($elTop).to.equal(Math.floor(screenTop));\n        });\n\n      cy.window().scrollTo(\"top\");\n\n      cy.get(\"#action-canvas\")\n        .realMouseUp({ scrollBehavior: \"nearest\" })\n        .then(($canvas: JQuery) => {\n          const { bottom: $elBottom } = getElementEdges($canvas);\n          const { bottom: screenBottom } = getScreenEdges();\n\n          expect($elBottom).to.equal(Math.floor(screenBottom));\n        });\n    });","file":"e2e/mouse.cy.ts","skipped":false,"dir":"cypress"},{"name":"sets elements inside iframes to active state","suites":["realMouseDown and realMouseUp iframe behavior"],"updatePoint":{"line":271,"column":52},"line":271,"code":"    it(\"sets elements inside iframes to active state\", () => {\n      cy.get(\"iframe\")\n        .then(($firstIframe) => {\n          return cy.wrap($firstIframe.contents().find(\"iframe\"));\n        })\n        .then(($secondIframe) => {\n          return cy.wrap($secondIframe.contents().find(\"body\"));\n        })\n        .within(() => {\n          cy.get(\"#target\").then(($target) => {\n            expect($target.css(\"background-color\")).to.equal(\"rgb(0, 128, 0)\");\n          });\n\n          cy.get(\"#target\")\n            .realMouseDown()\n            .then(($target) => {\n              expect($target.css(\"background-color\")).to.equal(\n                \"rgb(0, 0, 255)\"\n              );\n            });\n\n          // will go in hover state\n          cy.get(\"#target\")\n            .realMouseUp()\n            .then(($target) => {\n              expect($target.css(\"background-color\")).to.equal(\n                \"rgb(255, 192, 203)\"\n              );\n            });\n        });\n    });","file":"e2e/mouse.cy.ts","skipped":false,"dir":"cypress"},{"name":"sets elements inside transformed iframes to active states","suites":["realMouseDown and realMouseUp iframe behavior"],"updatePoint":{"line":303,"column":65},"line":303,"code":"    it(\"sets elements inside transformed iframes to active states\", () => {\n      cy.get(\"iframe\")\n        .then(($firstIframe) => {\n          $firstIframe.css(\"transform\", \"scale(.5)\");\n          return cy.wrap($firstIframe.contents().find(\"iframe\"));\n        })\n        .then(($secondIframe) => {\n          $secondIframe.css(\"transform\", \"scale(.75)\");\n          return cy.wrap($secondIframe.contents().find(\"body\"));\n        })\n        .within(() => {\n          cy.get(\"#target\").then(($target) => {\n            expect($target.css(\"background-color\")).to.equal(\"rgb(0, 128, 0)\");\n          });\n\n          cy.get(\"#target\")\n            .realMouseDown()\n            .then(($target) => {\n              expect($target.css(\"background-color\")).to.equal(\n                \"rgb(0, 0, 255)\"\n              );\n            });\n\n          // will go in hover state\n          cy.get(\"#target\")\n            .realMouseUp()\n            .then(($target) => {\n              expect($target.css(\"background-color\")).to.equal(\n                \"rgb(255, 192, 203)\"\n              );\n            });\n        });\n    });","file":"e2e/mouse.cy.ts","skipped":false,"dir":"cypress"},{"name":"moves mouse","suites":["realMouseMove"],"updatePoint":{"line":345,"column":17},"line":345,"code":"  it(\"moves mouse\", () => {\n    cy.get(\"main\").realClick().realMouseMove(100, 100);\n    cy.get(\".background\")\n      .then((el) => window.getComputedStyle(el[0]).getPropertyValue(\"--scale\"))\n      .should(\"eq\", \"1.8\");\n  });","file":"e2e/mouse.cy.ts","skipped":false,"dir":"cypress"},{"name":"realMouseMove accepts every explicit option.position","suites":["canvas drag with realMouseMove"],"updatePoint":{"line":354,"column":58},"line":354,"code":"  it(\"realMouseMove accepts every explicit option.position\", () => {\n    cy.visit(\"./cypress/fixtures/canvas-drag-svg.html\");\n\n    cy.get(\"body\")\n      .realMouseDown()\n      .realMouseMove(20, 10, { position: \"topLeft\" })\n      .realMouseMove(30, 20, { position: \"topLeft\" })\n      .realMouseUp();\n    cy.get(\"body\")\n      .realMouseDown()\n      .realMouseMove(20, 10, { position: \"top\" })\n      .realMouseMove(30, 20, { position: \"top\" })\n      .realMouseUp();\n    cy.get(\"body\")\n      .realMouseDown()\n      .realMouseMove(-20, 10, { position: \"topRight\" })\n      .realMouseMove(-30, 20, { position: \"topRight\" })\n      .realMouseUp();\n    cy.get(\"body\")\n      .realMouseDown()\n      .realMouseMove(20, 10, { position: \"left\" })\n      .realMouseMove(30, 20, { position: \"left\" })\n      .realMouseUp();\n    cy.get(\"body\")\n      .realMouseDown()\n      .realMouseMove(20, 10, { position: \"center\" })\n      .realMouseMove(30, 20, { position: \"center\" })\n      .realMouseUp();\n    cy.get(\"body\")\n      .realMouseDown()\n      .realMouseMove(-20, 10, { position: \"right\" })\n      .realMouseMove(-30, 20, { position: \"right\" })\n      .realMouseUp();\n    cy.get(\"body\")\n      .realMouseDown()\n      .realMouseMove(20, -10, { position: \"bottomLeft\" })\n      .realMouseMove(30, -20, { position: \"bottomLeft\" })\n      .realMouseUp();\n    cy.get(\"body\")\n      .realMouseDown()\n      .realMouseMove(20, -10, { position: \"bottom\" })\n      .realMouseMove(30, -20, { position: \"bottom\" })\n      .realMouseUp();\n    cy.get(\"body\")\n      .realMouseDown()\n      .realMouseMove(-20, -10, { position: \"bottomRight\" })\n      .realMouseMove(-30, -20, { position: \"bottomRight\" })\n      .realMouseUp();\n\n    // If every element is clickable, they are not overlapping.\n    cy.get(\"polyline\").click({multiple: true})\n  });","file":"e2e/mouse.cy.ts","skipped":false,"dir":"cypress"},{"name":"realMouseMove default option.position is 'topLeft'","suites":["canvas drag with realMouseMove"],"updatePoint":{"line":407,"column":56},"line":407,"code":"  it(\"realMouseMove default option.position is 'topLeft'\", () => {\n    /**\n     * The last polyline element should overlap the first, \n     * so they should have the same `points` attributes\n     * but all other siblings should have unique `points` attributes,\n     * so they should be clickable.\n     */\n      cy.get(\"body\")\n      .realMouseDown()\n      .realMouseMove(20, 10)\n      .realMouseMove(30, 20)\n      .realMouseUp();\n  \n      cy.get('svg').within(() => {\n        cy.get(\":first\").should(\"have.attr\", \"points\")\n          .then((first) => {\n            cy.get(\":first\").siblings().click({multiple: true})\n          cy.get(\":last\").should(\"have.attr\", \"points\", first)\n        })\n      })\n    })","file":"e2e/mouse.cy.ts","skipped":false,"dir":"cypress"},{"name":"Can type into an input","suites":["cy.realPress"],"updatePoint":{"line":2,"column":28},"line":2,"code":"  it(\"Can type into an input\", () => {\n    cy.intercept(\"http://presstest.com/\", (req) => {\n      const html = document.implementation.createHTMLDocument();\n      html.body.innerHTML = `<input type=\"text\">`;\n      req.reply(html.documentElement.innerHTML);\n    });\n    cy.visit(\"http://presstest.com/\");\n    cy.get(\"input\").focus();\n\n    cy.realPress(\"c\");\n    cy.realPress(\"y\");\n    cy.realPress(\"p\");\n    cy.realPress(\"r\");\n    cy.realPress(\"e\");\n    cy.realPress(\"s\");\n    cy.realPress(\"s\");\n\n    cy.get(\"input\").should(\"have.value\", \"cypress\");\n  });","file":"e2e/press.cy.ts","skipped":false,"dir":"cypress"},{"name":"Can fire native Tab focus switch","suites":["cy.realPress"],"updatePoint":{"line":22,"column":38},"line":22,"code":"  it(\"Can fire native Tab focus switch\", () => {\n    cy.intercept(\"http://presstest.com/\", (req) => {\n      const html = document.implementation.createHTMLDocument();\n      html.body.innerHTML = [\n        `<input type=\"text\">`,\n        `<button type=\"button\">Click me</button>`,\n      ].join(\"\");\n      req.reply(html.documentElement.innerHTML);\n    });\n    cy.visit(\"http://presstest.com/\");\n    cy.get(\"input\").click();\n    cy.realPress(\"Tab\");\n    cy.get(\"button\").should(\"be.focused\");\n  });","file":"e2e/press.cy.ts","skipped":false,"dir":"cypress"},{"name":"Can fire shortcuts","suites":["cy.realPress","shortcuts"],"updatePoint":{"line":43,"column":26},"line":43,"code":"    it(\"Can fire shortcuts\", () => {\n      cy.realPress([\"Control\", \"Shift\", \"R\"]);\n      cy.realPress([\"Alt\", \"Shift\", \"F5\"]);\n    });","file":"e2e/press.cy.ts","skipped":false,"dir":"cypress"},{"name":"Fires correct js events","suites":["cy.realPress","shortcuts"],"updatePoint":{"line":48,"column":31},"line":48,"code":"    it(\"Fires correct js events\", () => {\n      cy.document().then((document) => {\n        document.addEventListener(\"keyup\", (e) => {\n          expect(e.isTrusted).to.be.true;\n          expect(e.shiftKey).to.be.true;\n          expect(e.altKey).to.be.true;\n\n          if (e.key === \"Alt\") {\n            expect(e.altKey).to.be.true;\n            expect(e.code).to.eq(\"AltLeft\");\n            expect(e.keyCode).to.eq(18);\n          }\n          if (e.key === \"Shift\") {\n            expect(e.altKey).to.be.true;\n            expect(e.code).to.eq(\"ShiftLeft\");\n            expect(e.keyCode).to.eq(16);\n          }\n          if (e.key === \"F5\") {\n            expect(e.altKey).to.be.true;\n            expect(e.code).to.eq(\"F5\");\n            expect(e.keyCode).to.eq(116);\n          }\n        });\n      });\n\n      cy.realPress([\"Alt\", \"Shift\", \"F5\"]);\n    });","file":"e2e/press.cy.ts","skipped":false,"dir":"cypress"},{"name":"Dispatches beforeinput and keypress event for Enter","suites":["cy.realPress","Keyboard a11y testing"],"updatePoint":{"line":78,"column":59},"line":78,"code":"    it(\"Dispatches beforeinput and keypress event for Enter\", () => {\n      cy.visit(\"https://w3c.github.io/uievents/tools/key-event-viewer\");\n      cy.realPress(\"Enter\");\n\n      cy.contains(\".keycell.etype\", \"beforeinput\");\n      cy.contains(\".keycell.etype\", \"keypress\");\n    });","file":"e2e/press.cy.ts","skipped":false,"dir":"cypress"},{"name":"Fires trusted click on Enter","suites":["cy.realPress","Keyboard a11y testing"],"updatePoint":{"line":86,"column":36},"line":86,"code":"    it(\"Fires trusted click on Enter\", () => {\n      cy.visit(\"./cypress/fixtures/keyboard-accessibility-test.html\");\n      cy.get(\"#click-enter\").focus().realPress(\"Enter\");\n\n      cy.get(\"ul\").contains(JSON.stringify({ isTrusted: true, type: \"click\" }));\n    });","file":"e2e/press.cy.ts","skipped":false,"dir":"cypress"},{"name":"Fires trusted click on Space","suites":["cy.realPress","Keyboard a11y testing"],"updatePoint":{"line":93,"column":36},"line":93,"code":"    it(\"Fires trusted click on Space\", () => {\n      cy.visit(\"./cypress/fixtures/keyboard-accessibility-test.html\");\n      cy.get(\"#click-enter\").focus().realPress(\"Space\");\n\n      cy.get(\"ul\").contains(JSON.stringify({ isTrusted: true, type: \"click\" }));\n    });","file":"e2e/press.cy.ts","skipped":false,"dir":"cypress"},{"name":"swipes  drawer ","suites":["cy.realSwipe"],"updatePoint":{"line":33,"column":40},"line":33,"code":"    it(`swipes ${button} drawer ${swipe}`, { retries: 4 }, () => {\n      cy.contains(\"button\", button).click();\n      cy.get(\".MuiDrawer-paper\").realSwipe(swipe, { length, step: 10, touchPosition });\n\n      cy.get(\".MuiDrawer-paper\").should(\"not.be.visible\");\n    });","file":"e2e/swipe.cy.ts","skipped":false,"dir":"cypress"},{"name":"opens drawer with swipe","suites":["cy.realSwipe"],"updatePoint":{"line":41,"column":29},"line":41,"code":"  it(\"opens drawer with swipe\", { retries: 4 }, () => {\n    cy.get('.jss3.jss4').realSwipe(\"toRight\", { length: 150, step: 10, touchPosition: \"center\" });\n    cy.get('.MuiDrawer-paper').realSwipe(\"toLeft\", { length: 150, step: 10, touchPosition: \"center\" });\n  });","file":"e2e/swipe.cy.ts","skipped":false,"dir":"cypress"},{"name":"touches the button","suites":["cy.realTouch"],"updatePoint":{"line":6,"column":24},"line":6,"code":"  it(\"touches the button\", () => {\n    cy.get(\".action-btn\").realTouch();\n    cy.contains(\"This popover shows up on click\");\n  });","file":"e2e/touch.cy.ts","skipped":false,"dir":"cypress"},{"name":"touches the text field","suites":["cy.realTouch"],"updatePoint":{"line":11,"column":28},"line":11,"code":"  it(\"touches the text field\", () => {\n    cy.get(\"#email1\").realTouch().should(\"be.focused\");\n  });","file":"e2e/touch.cy.ts","skipped":false,"dir":"cypress"},{"name":"touches different positions","suites":["cy.realTouch"],"updatePoint":{"line":15,"column":33},"line":15,"code":"  it(\"touches different positions\", () => {\n    cy.get(\"#action-canvas\")\n      .realTouch({ position: \"topLeft\" })\n      .realTouch({ position: \"top\" })\n      .realTouch({ position: \"topRight\" })\n      .realTouch({ position: \"left\" })\n      .realTouch({ position: \"center\" })\n      .realTouch({ position: \"right\" })\n      .realTouch({ position: \"bottomLeft\" })\n      .realTouch({ position: \"bottom\" })\n      .realTouch({ position: \"bottomRight\" });\n  });","file":"e2e/touch.cy.ts","skipped":false,"dir":"cypress"},{"name":"touches custom coordinates","suites":["cy.realTouch"],"updatePoint":{"line":28,"column":32},"line":28,"code":"  it(\"touches custom coordinates\", () => {\n    cy.get(\"#action-canvas\")\n      .realTouch({ x: 80, y: 75 })\n      .realTouch({ x: 170, y: 75 })\n      .realTouch({ x: 80, y: 165 })\n      .realTouch({ x: 100, y: 185 })\n      .realTouch({ x: 125, y: 190 })\n      .realTouch({ x: 150, y: 185 })\n      .realTouch({ x: 170, y: 165 });\n  });","file":"e2e/touch.cy.ts","skipped":false,"dir":"cypress"},{"name":"touches with a default radius of 1","suites":["cy.realTouch"],"updatePoint":{"line":39,"column":40},"line":39,"code":"  it(\"touches with a default radius of 1\", { retries: 10 }, (done) => {\n    cy.get(\".action-btn\")\n      .then(($button) => {\n        $button.get(0).addEventListener(\"pointerdown\", (event) => {\n          expect(event.width).to.equal(2);\n          expect(event.height).to.equal(2);\n          done();\n        });\n      })\n      .realTouch();\n  });","file":"e2e/touch.cy.ts","skipped":false,"dir":"cypress"},{"name":"touches with a custom radius","suites":["cy.realTouch"],"updatePoint":{"line":51,"column":34},"line":51,"code":"  it(\"touches with a custom radius\", { retries: 4 }, (done) => {\n    cy.get(\".action-btn\")\n      .then(($button) => {\n        $button.get(0).addEventListener(\"pointerdown\", (event) => {\n          expect(event.width).to.equal(20);\n          expect(event.height).to.equal(20);\n          done();\n        });\n      })\n      .realTouch({ radius: 10 });\n  });","file":"e2e/touch.cy.ts","skipped":false,"dir":"cypress"},{"name":"touches with a custom radius for each axis","suites":["cy.realTouch"],"updatePoint":{"line":63,"column":48},"line":63,"code":"  it(\"touches with a custom radius for each axis\", { retries: 4 }, (done) => {\n    cy.get(\".action-btn\")\n      .then(($button) => {\n        $button.get(0).addEventListener(\"pointerdown\", (event) => {\n          expect(event.width).to.equal(10);\n          expect(event.height).to.equal(14);\n          done();\n        });\n      })\n      .realTouch({ radiusX: 5, radiusY: 7 });\n  });","file":"e2e/touch.cy.ts","skipped":false,"dir":"cypress"},{"name":"types text into googles main search inptu","suites":["cy.realType"],"updatePoint":{"line":7,"column":47},"line":7,"code":"  it(\"types text into googles main search inptu\", () => {\n    cy.realType(\"cypress can produce real events\");\n    \n    cy.get(\"input[name=q]\").should(\n      \"have.value\",\n      \"cypress can produce real events\"\n    );\n  });","file":"e2e/type.cy.ts","skipped":false,"dir":"cypress"},{"name":"does not type if element is not focused","suites":["cy.realType"],"updatePoint":{"line":16,"column":45},"line":16,"code":"  it(\"does not type if element is not focused\", () => {\n    cy.realPress(\"Tab\"); // move focus out\n    cy.get(\"input[name=q]\").should('not.be.focused');\n    cy.realType(\"pressing keys\");\n    cy.get(\"input[name=q]\").should(\"have.value\", \"\");\n  });","file":"e2e/type.cy.ts","skipped":false,"dir":"cypress"},{"name":"supports cypress's keys shortcuts","suites":["cy.realType"],"updatePoint":{"line":23,"column":39},"line":23,"code":"  it(\"supports cypress's keys shortcuts\", () => {\n    cy.realType(\"Something{backspace}{backspace}\")\n    cy.get(\"input[name=q]\").should(\"have.value\", \"Somethi\");\n  })","file":"e2e/type.cy.ts","skipped":false,"dir":"cypress"}]}