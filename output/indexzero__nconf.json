{"repo":"indexzero/nconf","url":"https://github.com/indexzero/nconf","branch":"master","configs":[{"package":"nconf","lang":"js","dir":"test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"the loadFiles() method should merge the files correctly","suites":["nconf/common","Using nconf.common module"],"updatePoint":{"line":21,"column":63},"line":21,"code":"    it('the loadFiles() method should merge the files correctly', done => {\n      nconf.loadFiles(files, (err, res) => {\n        helpers.assertMerged(err, res);\n        done();\n      });\n    });","file":"common.test.js","skipped":false,"dir":"test"},{"name":"the loadFilesSync() method should merge the files correctly","suites":["nconf/common","Using nconf.common module"],"updatePoint":{"line":27,"column":67},"line":27,"code":"    it(\"the loadFilesSync() method should merge the files correctly\", () => {\n      helpers.assertMerged(null, nconf.loadFilesSync(files));\n    });","file":"common.test.js","skipped":false,"dir":"test"},{"name":"should have the correct `stores`","suites":["nconf/multiple-stores","When using the nconf with multiple providers"],"updatePoint":{"line":63,"column":40},"line":63,"code":"    it(\"should have the correct `stores`\", () => {\n      expect(typeof nconf.stores.env).toBe('object');\n      expect(typeof nconf.stores.argv).toBe('object');\n      expect(typeof nconf.stores.file).toBe('object');\n    });","file":"complete.test.js","skipped":false,"dir":"test"},{"name":"env vars, are present","suites":["nconf/multiple-stores","When using the nconf with multiple providers"],"updatePoint":{"line":68,"column":29},"line":68,"code":"    it(\"env vars, are present\", () => {\n      ['NODE_ENV', 'FOO', 'BAR', 'NCONF_foo'].forEach(function (key) {\n        expect(nconf.get(key)).toEqual(process.env[key]);\n      });\n    });","file":"complete.test.js","skipped":false,"dir":"test"},{"name":"json vars are present","suites":["nconf/multiple-stores","When using the nconf with multiple providers"],"updatePoint":{"line":73,"column":29},"line":73,"code":"    it(\"json vars are present\", done => {\n      fs.readFile(complete, 'utf8', (err, data) => {\n        expect(err).toBe(null);\n        data = JSON.parse(data);\n        Object.keys(data).forEach(function (key) {\n          expect(nconf.get(key)).toEqual(data[key]);\n        });\n        done();\n      });\n    });","file":"complete.test.js","skipped":false,"dir":"test"},{"name":"literal vars are present","suites":["nconf/multiple-stores","When using the nconf with multiple providers"],"updatePoint":{"line":83,"column":32},"line":83,"code":"    it(\"literal vars are present\", () => {\n      Object.keys(data).forEach(function (key) {\n        expect(nconf.get(key)).toEqual(data[key]);\n      });\n    });","file":"complete.test.js","skipped":false,"dir":"test"},{"name":"and saving *synchronously* correct return value, the file, saved correctly","suites":["nconf/multiple-stores","When using the nconf with multiple providers","saving"],"updatePoint":{"line":99,"column":84},"line":99,"code":"      it(\"and saving *synchronously* correct return value, the file, saved correctly\", done => {\n        nconf.set('weebls', 'stuff');\n        var topic = nconf.save();\n        Object.keys(topic).forEach(function (key) {\n          expect(topic[key]).toEqual(nconf.get(key));\n        });\n        fs.readFile(completeTest, 'utf8', function (err, data) {\n          expect(err).toBe(null);\n          data = JSON.parse(data);\n          Object.keys(data).forEach(function (key) {\n            expect(data[key]).toEqual(nconf.get(key));\n          });\n          expect(nconf.get('weebls')).toEqual('stuff');\n          done();\n        });\n      });","file":"complete.test.js","skipped":false,"dir":"test"},{"name":"and saving *asynchronously* correct return value, the file, saved correctly","suites":["nconf/multiple-stores","When using the nconf with multiple providers","saving"],"updatePoint":{"line":115,"column":85},"line":115,"code":"      it(\"and saving *asynchronously* correct return value, the file, saved correctly\", done => {\n        nconf.set('weebls', 'crap');\n        nconf.save((err, data) => {\n          Object.keys(data).forEach(function (key) {\n            expect(data[key]).toEqual(nconf.get(key));\n          });\n          fs.readFile(completeTest, 'utf8', function (err, data) {\n            expect(err).toBe(null);\n            data = JSON.parse(data);\n            Object.keys(data).forEach(function (key) {\n              expect(data[key]).toEqual(nconf.get(key));\n            });\n            expect(nconf.get('weebls')).toEqual('crap');\n            done();\n          });\n        });\n      });","file":"complete.test.js","skipped":false,"dir":"test"},{"name":"env vars keys also available as lower case","suites":["nconf/multiple-stores","When using the nconf env with custom options","When using env with lowerCase:true"],"updatePoint":{"line":146,"column":52},"line":146,"code":"      it(\"env vars keys also available as lower case\", () => {\n        Object.keys(process_env).forEach(function (key) {\n          expect(nconf.get(key.toLowerCase())).toEqual(process.env[key]);\n        });\n      });","file":"complete.test.js","skipped":false,"dir":"test"},{"name":"JSON keys properly parsed","suites":["nconf/multiple-stores","When using the nconf env with custom options","When using env with parseValues:true"],"updatePoint":{"line":163,"column":35},"line":163,"code":"      it(\"JSON keys properly parsed\", () => {\n        Object.keys(process_env).forEach(function (key) {\n          var val = process.env[key];\n\n          try {\n            val = JSON.parse(val);\n          } catch (err) {}\n\n          expect(nconf.get(key)).toEqual(val);\n        });\n      });","file":"complete.test.js","skipped":false,"dir":"test"},{"name":"env vars port key/value properly transformed","suites":["nconf/multiple-stores","When using the nconf env with custom options","When using env with transform:fn"],"updatePoint":{"line":194,"column":54},"line":194,"code":"      it(\"env vars port key/value properly transformed\", () => {\n        expect(nconf.get('FOOD')).toEqual('BARFOO');\n      });","file":"complete.test.js","skipped":false,"dir":"test"},{"name":"env vars port key/value properly transformed","suites":["nconf/multiple-stores","When using the nconf env with custom options","When using env with transform:fn that drops an entry"],"updatePoint":{"line":217,"column":54},"line":217,"code":"      it(\"env vars port key/value properly transformed\", () => {\n        expect(nconf.get('FOO')).toBe(undefined);\n      });","file":"complete.test.js","skipped":false,"dir":"test"},{"name":"env vars port key/value properly transformed","suites":["nconf/multiple-stores","When using the nconf env with custom options","When using env with transform:fn that return an undefined value"],"updatePoint":{"line":243,"column":54},"line":243,"code":"      it(\"env vars port key/value properly transformed\", () => {\n        expect(nconf.get('FOO')).toBe(undefined);\n      });","file":"complete.test.js","skipped":false,"dir":"test"},{"name":" port key/value throws transformation error","suites":["nconf/multiple-stores","When using the nconf env with custom options","When using env with bad transform:fn"],"updatePoint":{"line":250,"column":53},"line":250,"code":"      it(\" port key/value throws transformation error\", done => {\n        function testTransform(obj) {\n          return {\n            foo: 'bar'\n          };\n        }\n\n        helpers.cp(complete, completeTest, () => {\n          try {\n            nconf.env({\n              transform: testTransform\n            });\n          } catch (err) {\n            expect(err.name).toEqual('RuntimeError');\n            done();\n          }\n        });\n      });","file":"complete.test.js","skipped":false,"dir":"test"},{"name":"can access to nested values","suites":["nconf/multiple-stores","When using the nconf env with custom options","When using env with a separator"],"updatePoint":{"line":280,"column":37},"line":280,"code":"      it(\"can access to nested values\", () => {\n        expect(nconf.get('NESTED')).toEqual({\n          VALUE: 'nested',\n          VALUE_EXTRA_LODASH: '_nested_'\n        });\n      });","file":"complete.test.js","skipped":false,"dir":"test"},{"name":"configured with two file stores, should have the appropriate keys present","suites":["nconf/hierarchy, When using nconf"],"updatePoint":{"line":19,"column":79},"line":19,"code":"  it(\"configured with two file stores, should have the appropriate keys present\", () => {\n    nconf.add('user', {\n      type: 'file',\n      file: userConfig\n    });\n    nconf.add('global', {\n      type: 'file',\n      file: globalConfig\n    });\n    nconf.load();\n    expect(nconf.get('title')).toEqual('My specific title');\n    expect(nconf.get('color')).toEqual('green');\n    expect(nconf.get('movie')).toEqual('Kill Bill');\n  });","file":"hierarchy.test.js","skipped":false,"dir":"test"},{"name":"configured with two file stores using `file` should have the appropriate keys present","suites":["nconf/hierarchy, When using nconf"],"updatePoint":{"line":33,"column":91},"line":33,"code":"  it(\"configured with two file stores using `file` should have the appropriate keys present\", () => {\n    nconf.file('user', userConfig);\n    nconf.file('global', globalConfig);\n    nconf.load();\n    expect(nconf.get('title')).toEqual('My specific title');\n    expect(nconf.get('color')).toEqual('green');\n    expect(nconf.get('movie')).toEqual('Kill Bill');\n  });","file":"hierarchy.test.js","skipped":false,"dir":"test"},{"name":"configured with .argv(), .env() and .file() should not persist information passed in to process.env and process.argv to disk","suites":["nconf/hierarchy, When using nconf"],"updatePoint":{"line":41,"column":130},"line":41,"code":"  it(\"configured with .argv(), .env() and .file() should not persist information passed in to process.env and process.argv to disk\", done => {\n    var configFile = path.join(__dirname, 'fixtures', 'load-save.json');\n    var script = path.join(__dirname, 'fixtures', 'scripts', 'nconf-hierarchical-load-save.js');\n    var argv = ['--foo', 'foo', '--bar', 'bar'];\n    var data = '';\n\n    try {\n      fs.unlinkSync(configFile);\n    } catch (ex) {// No-op\n    }\n\n    var child = spawn('node', [script].concat(argv));\n    child.stdout.on('data', function (d) {\n      data += d;\n    });\n    child.on('close', function () {\n      fs.readFile(configFile, 'utf8', (err, ondisk) => {\n        expect(data).toEqual('foo');\n        expect(JSON.parse(ondisk)).toEqual({\n          database: {\n            host: '127.0.0.1',\n            port: 5984\n          }\n        });\n      });\n      done();\n    });\n  });","file":"hierarchy.test.js","skipped":false,"dir":"test"},{"name":"configured with .argv(), .file() and invoked with nested command line options, should merge nested objects","suites":["nconf/hierarchy, When using nconf"],"updatePoint":{"line":69,"column":112},"line":69,"code":"  it(\"configured with .argv(), .file() and invoked with nested command line options, should merge nested objects\", done => {\n    var script = path.join(__dirname, 'fixtures', 'scripts', 'nconf-hierarchical-load-merge.js');\n    var argv = ['--candy:something', 'foo', '--candy:something5:second', 'bar'];\n    var data = '';\n    var child = spawn('node', [script].concat(argv));\n    child.stdout.on('data', function (d) {\n      data += d;\n    });\n    child.on('close', function () {\n      expect(JSON.parse(data)).toEqual({\n        apples: true,\n        candy: {\n          something: 'foo',\n          something1: true,\n          something2: true,\n          something5: {\n            first: 1,\n            second: 'bar'\n          }\n        }\n      });\n      done();\n    });\n  });","file":"hierarchy.test.js","skipped":false,"dir":"test"},{"name":"configured with .argv() and separator, .file() and invoked with nested command line options should merge nested objects","suites":["nconf/hierarchy, When using nconf"],"updatePoint":{"line":93,"column":125},"line":93,"code":"  it(\"configured with .argv() and separator, .file() and invoked with nested command line options should merge nested objects\", done => {\n    var script = path.join(__dirname, 'fixtures', 'scripts', 'nconf-hierarchical-load-merge-with-separator.js');\n    var argv = ['--candy--something', 'foo', '--candy--something5--second', 'bar'];\n    var data = '';\n    process.env.candy__bonbon = 'sweet';\n    var child = spawn('node', [script].concat(argv), {\n      env: process.env\n    });\n    delete process.env.candy__bonbon;\n    child.stdout.on('data', function (d) {\n      data += d;\n    });\n    child.on('close', function () {\n      expect(JSON.parse(data)).toEqual({\n        apples: true,\n        candy: {\n          bonbon: 'sweet',\n          something: 'foo',\n          something1: true,\n          something2: true,\n          something5: {\n            first: 1,\n            second: 'bar'\n          }\n        }\n      });\n      done();\n    });\n  });","file":"hierarchy.test.js","skipped":false,"dir":"test"},{"name":"configured with .file(), .defaults() should deep merge objects should merge nested objects ","suites":["nconf/hierarchy, When using nconf"],"updatePoint":{"line":122,"column":97},"line":122,"code":"  it(\"configured with .file(), .defaults() should deep merge objects should merge nested objects \", done => {\n    var script = path.join(__dirname, 'fixtures', 'scripts', 'nconf-hierarchical-defaults-merge.js');\n    var data = '';\n    var child = spawn('node', [script]);\n    child.stdout.on('data', function (d) {\n      data += d;\n    });\n    child.on('close', function () {\n      expect(JSON.parse(data)).toEqual({\n        candy: {\n          something: 'much better something for you',\n          something1: true,\n          something2: true,\n          something18: 'completely unique',\n          something5: {\n            first: 1,\n            second: 99\n          }\n        }\n      });\n      done();\n    });\n  });","file":"hierarchy.test.js","skipped":false,"dir":"test"},{"name":"should have the correct methods set","suites":["nconf, When using the nconf"],"updatePoint":{"line":14,"column":41},"line":14,"code":"  it(\"should have the correct methods set\", () => {\n    expect(typeof nconf.key).toBe('function');\n    expect(typeof nconf.path).toBe('function');\n    expect(typeof nconf.use).toBe('function');\n    expect(typeof nconf.any).toBe('function');\n    expect(typeof nconf.get).toBe('function');\n    expect(typeof nconf.set).toBe('function');\n    expect(typeof nconf.clear).toBe('function');\n    expect(typeof nconf.load).toBe('function');\n    expect(typeof nconf.save).toBe('function');\n    expect(typeof nconf.reset).toBe('function');\n    expect(typeof nconf.required).toBe('function');\n  });","file":"nconf.test.js","skipped":false,"dir":"test"},{"name":"the use() method should instaniate the correct store","suites":["nconf, When using the nconf"],"updatePoint":{"line":27,"column":58},"line":27,"code":"  it(\"the use() method should instaniate the correct store\", () => {\n    nconf.use('memory');\n    nconf.load();\n    expect(nconf.stores['memory'] instanceof nconf.Memory).toBe(true);\n  });","file":"nconf.test.js","skipped":false,"dir":"test"},{"name":"nconf should have the correct version set","suites":["nconf, When using the nconf"],"updatePoint":{"line":32,"column":47},"line":32,"code":"  it(\"nconf should have the correct version set\", done => {\n    fs.readFile(path.join(__dirname, '..', 'package.json'), (err, data) => {\n      expect(err).toBe(null);\n      data = JSON.parse(data.toString());\n      expect(nconf.version).toEqual(data.version);\n      done();\n    });\n  });","file":"nconf.test.js","skipped":false,"dir":"test"},{"name":"should throw error with missing keys","suites":["nconf, When using the nconf","the required() method"],"updatePoint":{"line":41,"column":44},"line":41,"code":"    it(\"should throw error with missing keys\", () => {\n      nconf.set('foo:bar:bazz', 'buzz');\n      expect(nconf.required.bind(nconf, ['missing', 'foo:bar:bazz'])).toThrow(Error);\n    });","file":"nconf.test.js","skipped":false,"dir":"test"},{"name":"should return the provider if all required keys exist","suites":["nconf, When using the nconf","the required() method"],"updatePoint":{"line":45,"column":61},"line":45,"code":"    it(\"should return the provider if all required keys exist\", () => {\n      var Provider = nconf.Provider;\n      nconf.set('foo:bar:bazz', 'buzz');\n      expect(nconf.required(['foo:bar:bazz']) instanceof Provider).toBe(true);\n    });","file":"nconf.test.js","skipped":false,"dir":"test"},{"name":"should respond with true","suites":["nconf, When using the nconf","with the memory store","the set() method"],"updatePoint":{"line":53,"column":34},"line":53,"code":"      it(\"should respond with true\", () => {\n        expect(nconf.set('foo:bar:bazz', 'buzz')).toBeTruthy();\n      });","file":"nconf.test.js","skipped":false,"dir":"test"},{"name":"should respond allow access to the root and complain about non-objects","suites":["nconf, When using the nconf","with the memory store","the set() method"],"updatePoint":{"line":56,"column":80},"line":56,"code":"      it(\"should respond allow access to the root and complain about non-objects\", () => {\n        expect(nconf.set(null, null)).toBeFalsy();\n        expect(nconf.set(null, undefined)).toBeFalsy();\n        expect(nconf.set(null)).toBeFalsy();\n        expect(nconf.set(null, '')).toBeFalsy();\n        expect(nconf.set(null, 1)).toBeFalsy();\n        var original = nconf.get();\n        expect(nconf.set(null, nconf.get())).toBeTruthy();\n        expect(nconf.get()).not.toBe(original);\n        expect(nconf.get()).toEqual(original);\n      });","file":"nconf.test.js","skipped":false,"dir":"test"},{"name":"should respond with the correct value without a callback","suites":["nconf, When using the nconf","with the memory store","the get() method"],"updatePoint":{"line":69,"column":66},"line":69,"code":"      it(\"should respond with the correct value without a callback\", () => {\n        expect(nconf.get('foo:bar:bazz')).toEqual('buzz');\n      });","file":"nconf.test.js","skipped":false,"dir":"test"},{"name":"should not step inside strings without a callback","suites":["nconf, When using the nconf","with the memory store","the get() method"],"updatePoint":{"line":72,"column":59},"line":72,"code":"      it(\"should not step inside strings without a callback\", () => {\n        expect(nconf.get('foo:bar:bazz:0')).toEqual(undefined);\n      });","file":"nconf.test.js","skipped":false,"dir":"test"},{"name":"should respond with the correct value with a callback","suites":["nconf, When using the nconf","with the memory store","the get() method"],"updatePoint":{"line":75,"column":63},"line":75,"code":"      it(\"should respond with the correct value with a callback\", done => {\n        nconf.get('foo:bar:bazz', (err, value) => {\n          expect(value).toEqual('buzz');\n          done();\n        });\n      });","file":"nconf.test.js","skipped":false,"dir":"test"},{"name":"should respond allow access to the root","suites":["nconf, When using the nconf","with the memory store","the get() method"],"updatePoint":{"line":81,"column":49},"line":81,"code":"      it(\"should respond allow access to the root\", () => {\n        expect(nconf.get(null)).toBeTruthy();\n        expect(nconf.get(undefined)).toBeTruthy();\n        expect(nconf.get()).toBeTruthy();\n      });","file":"nconf.test.js","skipped":false,"dir":"test"},{"name":"should respond with the true","suites":["nconf, When using the nconf","with the memory store","the clear() method"],"updatePoint":{"line":88,"column":38},"line":88,"code":"      it(\"should respond with the true\", () => {\n        expect(nconf.get('foo:bar:bazz')).toEqual('buzz');\n        expect(nconf.clear('foo:bar:bazz')).toBeTruthy();\n        expect(typeof nconf.get('foo:bar:bazz') === 'undefined').toBeTruthy();\n      });","file":"nconf.test.js","skipped":false,"dir":"test"},{"name":"should respond with the merged store without a callback","suites":["nconf, When using the nconf","with the memory store","the load() method"],"updatePoint":{"line":95,"column":65},"line":95,"code":"      it(\"should respond with the merged store without a callback\", () => {\n        expect(nconf.load()).toEqual({\n          \"foo\": {\n            \"bar\": {}\n          }\n        });\n      });","file":"nconf.test.js","skipped":false,"dir":"test"},{"name":"should respond with the merged store","suites":["nconf, When using the nconf","with the memory store","the load() method"],"updatePoint":{"line":102,"column":46},"line":102,"code":"      it(\"should respond with the merged store\", done => {\n        nconf.load((err, store) => {\n          expect(err).toBe(null);\n          expect(store).toEqual({\n            \"foo\": {\n              \"bar\": {}\n            }\n          });\n          done();\n        });\n      });","file":"nconf.test.js","skipped":false,"dir":"test"},{"name":"the save() method should actually save before responding","suites":["nconf/provider/save","When using nconf an instance of 'nconf.Provider' with a Mock store"],"updatePoint":{"line":17,"column":64},"line":17,"code":"    it(\"the save() method should actually save before responding\", done => {\n      var mock = nconf.stores.mock;\n      mock.on('save', function () {\n        nconfMock.saved = true;\n      });\n      nconf.save(() => {\n        expect(nconfMock.saved).toBeTruthy();\n        done();\n      });\n    });","file":"provider-save.test.js","skipped":false,"dir":"test"},{"name":"respond with correct arg when 'argv' is true","suites":["nconf/provider When using nconf","an instance of 'nconf.Provider'"],"updatePoint":{"line":34,"column":50},"line":34,"code":"  it(\"respond with correct arg when 'argv' is true\", helpers.assertSystemConf({\n    script: path.join(fixturesDir, 'scripts', 'provider-argv.js'),\n    argv: ['--something', 'foobar']\n  }));","file":"provider.test.js","skipped":false,"dir":"test"},{"name":"respond with correct arg when 'env' is true","suites":["nconf/provider When using nconf","an instance of 'nconf.Provider'"],"updatePoint":{"line":38,"column":49},"line":38,"code":"  it(\"respond with correct arg when 'env' is true\", helpers.assertSystemConf({\n    script: path.join(fixturesDir, 'scripts', 'provider-env.js'),\n    env: {\n      SOMETHING: 'foobar'\n    }\n  }));","file":"provider.test.js","skipped":false,"dir":"test"},{"name":"respond with correct arg when 'env' is true and 'parseValues' option is true","suites":["nconf/provider When using nconf","an instance of 'nconf.Provider'"],"updatePoint":{"line":44,"column":82},"line":44,"code":"  it(\"respond with correct arg when 'env' is true and 'parseValues' option is true\", () => {\n    var env = {\n      SOMETHING: 'foobar',\n      SOMEBOOL: 'true',\n      SOMENULL: 'null',\n      SOMEUNDEF: 'undefined',\n      SOMEINT: '3600',\n      SOMEFLOAT: '0.5',\n      SOMEBAD: '5.1a'\n    };\n    var oenv = {};\n    Object.keys(env).forEach(function (key) {\n      if (process.env[key]) oenv[key] = process.env[key];\n      process.env[key] = env[key];\n    });\n    var provider = new nconf.Provider().use('env', {\n      parseValues: true\n    });\n    Object.keys(env).forEach(function (key) {\n      delete process.env[key];\n      if (oenv[key]) process.env[key] = oenv[key];\n    });\n    expect(provider.get('SOMETHING')).toEqual('foobar');\n    expect(provider.get('SOMEBOOL')).toEqual(true);\n    expect(provider.get('SOMEBOOL')).not.toEqual('true');\n    expect(provider.get('SOMENULL')).toEqual(null);\n    expect(provider.get('SOMEUNDEF')).toEqual(undefined);\n    expect(provider.get('SOMEINT')).toEqual(3600);\n    expect(provider.get('SOMEFLOAT')).toEqual(.5);\n    expect(provider.get('SOMEBAD')).toEqual('5.1a');\n  });","file":"provider.test.js","skipped":false,"dir":"test"},{"name":"respond with correct arg when 'argv' is set to true","suites":["nconf/provider When using nconf","the default nconf provider"],"updatePoint":{"line":76,"column":59},"line":76,"code":"    it(\"respond with correct arg when 'argv' is set to true\", helpers.assertSystemConf({\n      script: path.join(fixturesDir, 'scripts', 'nconf-argv.js'),\n      argv: ['--something', 'foobar'],\n      env: {\n        SOMETHING: true\n      }\n    }));","file":"provider.test.js","skipped":false,"dir":"test"},{"name":"respond with correct arg when 'env' is set to true","suites":["nconf/provider When using nconf","the default nconf provider"],"updatePoint":{"line":83,"column":58},"line":83,"code":"    it(\"respond with correct arg when 'env' is set to true\", helpers.assertSystemConf({\n      script: path.join(fixturesDir, 'scripts', 'nconf-env.js'),\n      env: {\n        SOMETHING: 'foobar'\n      }\n    }));","file":"provider.test.js","skipped":false,"dir":"test"},{"name":"respond with correct arg when 'argv' is set to true and process.argv is modified","suites":["nconf/provider When using nconf","the default nconf provider"],"updatePoint":{"line":89,"column":88},"line":89,"code":"    it(\"respond with correct arg when 'argv' is set to true and process.argv is modified\", helpers.assertSystemConf({\n      script: path.join(fixturesDir, 'scripts', 'nconf-change-argv.js'),\n      argv: ['--something', 'badValue', 'evenWorse', 'OHNOEZ', 'foobar']\n    }));","file":"provider.test.js","skipped":false,"dir":"test"},{"name":"respond with correct arg when hierarchical 'argv' get","suites":["nconf/provider When using nconf","the default nconf provider"],"updatePoint":{"line":93,"column":61},"line":93,"code":"    it(\"respond with correct arg when hierarchical 'argv' get\", helpers.assertSystemConf({\n      script: path.join(fixturesDir, 'scripts', 'nconf-hierarchical-file-argv.js'),\n      argv: ['--something', 'foobar'],\n      env: {\n        SOMETHING: true\n      }\n    }));","file":"provider.test.js","skipped":false,"dir":"test"},{"name":"respond with correct arg when 'env' is set to true with a nested separator","suites":["nconf/provider When using nconf","the default nconf provider"],"updatePoint":{"line":100,"column":82},"line":100,"code":"    it(\"respond with correct arg when 'env' is set to true with a nested separator\", helpers.assertSystemConf({\n      script: path.join(fixturesDir, 'scripts', 'nconf-nested-env.js'),\n      env: {\n        SOME_THING: 'foobar'\n      }\n    }));","file":"provider.test.js","skipped":false,"dir":"test"},{"name":"should have the result merged in","suites":["nconf/provider When using nconf","an instance of 'nconf.Provider'","the merge() method"],"updatePoint":{"line":109,"column":42},"line":109,"code":"      it(\"should have the result merged in\", () => {\n        var provider = new nconf.Provider().use('file', {\n          file: files[1]\n        });\n        provider.load();\n        provider.merge(override);\n        helpers.assertMerged(null, provider.stores.file.store);\n        expect(provider.stores.file.store.candy.something).toEqual('file1');\n      });","file":"provider.test.js","skipped":false,"dir":"test"},{"name":"should merge Objects over null","suites":["nconf/provider When using nconf","an instance of 'nconf.Provider'","the merge() method"],"updatePoint":{"line":118,"column":40},"line":118,"code":"      it(\"should merge Objects over null\", () => {\n        var provider = new nconf.Provider().use('file', {\n          file: files[1]\n        });\n        provider.load();\n        provider.merge(override);\n        expect(provider.stores.file.store.unicorn.exists).toEqual(true);\n      });","file":"provider.test.js","skipped":false,"dir":"test"},{"name":"should respect the hierarchy when sources are passed in","suites":["nconf/provider When using nconf","an instance of 'nconf.Provider'","the load() method"],"updatePoint":{"line":128,"column":65},"line":128,"code":"      it(\"should respect the hierarchy when sources are passed in\", () => {\n        var provider = new nconf.Provider({\n          sources: {\n            user: {\n              type: 'file',\n              file: files[0]\n            },\n            global: {\n              type: 'file',\n              file: files[1]\n            }\n          }\n        });\n        var merged = provider.load();\n        helpers.assertMerged(null, merged);\n        expect(merged.candy.something).toEqual('file1');\n      });","file":"provider.test.js","skipped":false,"dir":"test"},{"name":"should respect the hierarchy when multiple stores are used","suites":["nconf/provider When using nconf","an instance of 'nconf.Provider'","the load() method"],"updatePoint":{"line":145,"column":68},"line":145,"code":"      it(\"should respect the hierarchy when multiple stores are used\", () => {\n        var provider = new nconf.Provider().overrides({\n          foo: {\n            bar: 'baz'\n          }\n        }).add('file1', {\n          type: 'file',\n          file: files[0]\n        }).add('file2', {\n          type: 'file',\n          file: files[1]\n        });\n        var merged = provider.load();\n        helpers.assertMerged(null, merged);\n        expect(merged.foo.bar).toEqual('baz');\n        expect(merged.candy.something).toEqual('file1');\n      });","file":"provider.test.js","skipped":false,"dir":"test"},{"name":"should use the correct File store with a single filepath","suites":["nconf/provider When using nconf","the .file() method"],"updatePoint":{"line":165,"column":64},"line":165,"code":"    it(\"should use the correct File store with a single filepath\", () => {\n      var provider = new nconf.Provider();\n      provider.file(helpers.fixture('store.json'));\n      expect(typeof provider.stores.file).toBe('object');\n    });","file":"provider.test.js","skipped":false,"dir":"test"},{"name":"should use the correct File store with a name and a filepath","suites":["nconf/provider When using nconf","the .file() method"],"updatePoint":{"line":170,"column":68},"line":170,"code":"    it(\"should use the correct File store with a name and a filepath\", () => {\n      var provider = new nconf.Provider();\n      provider.file('custom', helpers.fixture('store.json'));\n      expect(typeof provider.stores.custom).toBe('object');\n    });","file":"provider.test.js","skipped":false,"dir":"test"},{"name":"should use the correct File store with a single object","suites":["nconf/provider When using nconf","the .file() method"],"updatePoint":{"line":175,"column":62},"line":175,"code":"    it(\"should use the correct File store with a single object\", () => {\n      var provider = new nconf.Provider();\n      provider.file({\n        dir: helpers.fixture(''),\n        file: 'store.json',\n        search: true\n      });\n      expect(typeof provider.stores.file).toBe('object');\n      expect(provider.stores.file.file).toEqual(helpers.fixture('store.json'));\n    });","file":"provider.test.js","skipped":false,"dir":"test"},{"name":"should use the correct File store with a name and an object","suites":["nconf/provider When using nconf","the .file() method"],"updatePoint":{"line":185,"column":67},"line":185,"code":"    it(\"should use the correct File store with a name and an object\", () => {\n      var provider = new nconf.Provider();\n      provider.file('custom', {\n        dir: helpers.fixture(''),\n        file: 'store.json',\n        search: true\n      });\n      expect(typeof provider.stores.custom).toBe('object');\n      expect(provider.stores.custom.file).toEqual(helpers.fixture('store.json'));\n    });","file":"provider.test.js","skipped":false,"dir":"test"},{"name":"should respond with the correct value given an array of keys with one matching","suites":["nconf/provider When using nconf","the .file() method","the any() method","without a callback"],"updatePoint":{"line":203,"column":90},"line":203,"code":"        it(\"should respond with the correct value given an array of keys with one matching\", () => {\n          expect(provider.any([\"notthis\", \"orthis\", \"key\"])).toEqual('getThisValue');\n        });","file":"provider.test.js","skipped":false,"dir":"test"},{"name":"should respond with null given an array of keys with no match","suites":["nconf/provider When using nconf","the .file() method","the any() method","without a callback"],"updatePoint":{"line":206,"column":73},"line":206,"code":"        it(\"should respond with null given an array of keys with no match\", () => {\n          expect(provider.any([\"notthis\", \"orthis\"])).toBe(null);\n        });","file":"provider.test.js","skipped":false,"dir":"test"},{"name":"should respond with the correct value given a variable argument list of keys with one matching","suites":["nconf/provider When using nconf","the .file() method","the any() method","without a callback"],"updatePoint":{"line":209,"column":106},"line":209,"code":"        it(\"should respond with the correct value given a variable argument list of keys with one matching\", () => {\n          expect(provider.any(\"notthis\", \"orthis\", \"key\")).toEqual('getThisValue');\n        });","file":"provider.test.js","skipped":false,"dir":"test"},{"name":"should respond with null given no arguments","suites":["nconf/provider When using nconf","the .file() method","the any() method","without a callback"],"updatePoint":{"line":212,"column":55},"line":212,"code":"        it(\"should respond with null given no arguments\", () => {\n          expect(provider.any()).toBe(null);\n        });","file":"provider.test.js","skipped":false,"dir":"test"},{"name":"should respond with the correct value given an array of keys with one matching","suites":["nconf/provider When using nconf","the .file() method","the any() method","with a callback"],"updatePoint":{"line":217,"column":90},"line":217,"code":"        it(\"should respond with the correct value given an array of keys with one matching\", done => {\n          provider.any([\"notthis\", \"orthis\", \"key\"], (err, value) => {\n            expect(value).toEqual('getThisValue');\n            done();\n          });\n        });","file":"provider.test.js","skipped":false,"dir":"test"},{"name":"should respond with an undefined value given an array of keys with no match","suites":["nconf/provider When using nconf","the .file() method","the any() method","with a callback"],"updatePoint":{"line":223,"column":87},"line":223,"code":"        it(\"should respond with an undefined value given an array of keys with no match\", done => {\n          provider.any([\"notthis\", \"orthis\"], (err, value) => {\n            expect(value).toBe(undefined);\n            done();\n          });\n        });","file":"provider.test.js","skipped":false,"dir":"test"},{"name":"should respond with the correct value given a variable argument list of keys with one matching","suites":["nconf/provider When using nconf","the .file() method","the any() method","with a callback"],"updatePoint":{"line":229,"column":106},"line":229,"code":"        it(\"should respond with the correct value given a variable argument list of keys with one matching\", done => {\n          provider.any(\"notthis\", \"orthis\", \"key\", (err, value) => {\n            expect(value).toEqual('getThisValue');\n            done();\n          });\n        });","file":"provider.test.js","skipped":false,"dir":"test"},{"name":"should respond with an undefined value given no keys","suites":["nconf/provider When using nconf","the .file() method","the any() method","with a callback"],"updatePoint":{"line":235,"column":64},"line":235,"code":"        it(\"should respond with an undefined value given no keys\", done => {\n          provider.any((err, value) => {\n            expect(value).toBe(undefined);\n            done();\n          });\n        });","file":"provider.test.js","skipped":false,"dir":"test"},{"name":"should have the correct methods defined","suites":["nconf/stores/argv, An instance of nconf.Argv"],"updatePoint":{"line":13,"column":45},"line":13,"code":"  it(\"should have the correct methods defined\", () => {\n    var argv = new nconf.Argv();\n    expect(typeof argv.loadSync).toBe('function');\n    expect(typeof argv.loadArgv).toBe('function');\n    expect(argv.options).toEqual({});\n  });","file":"stores/argv.test.js","skipped":false,"dir":"test"},{"name":"should be able to retrieve a value using the logical separator","suites":["nconf/stores/argv, An instance of nconf.Argv"],"updatePoint":{"line":19,"column":68},"line":19,"code":"  it(\"should be able to retrieve a value using the logical separator\", () => {\n    var argv = new nconf.Argv({\n      deep__nested__value: {\n        alias: 'nv',\n        default: 'foo'\n      },\n      accessSeparator: '.',\n      inputSeparator: '__'\n    });\n    argv.loadSync();\n    expect(argv.accessSeparator).toBe('.');\n    expect(argv.get('deep.nested.value')).toBe('foo');\n    expect(argv.get('deep:nested:value')).toBe('foo');\n  });","file":"stores/argv.test.js","skipped":false,"dir":"test"},{"name":"and can give access to them","suites":["nconf/stores/argv, An instance of nconf.Argv","can be created with a custom yargs"],"updatePoint":{"line":35,"column":35},"line":35,"code":"    it(\"and can give access to them\", () => {\n      var argv = new nconf.Argv(yargsInstance);\n      expect(argv.options).toBe(yargsInstance);\n    });","file":"stores/argv.test.js","skipped":false,"dir":"test"},{"name":"values are the one from the custom yargv","suites":["nconf/stores/argv, An instance of nconf.Argv","can be created with a custom yargs"],"updatePoint":{"line":39,"column":48},"line":39,"code":"    it(\"values are the one from the custom yargv\", () => {\n      var argv = new nconf.Argv(yargsInstance);\n      argv.loadSync();\n      expect(argv.get('somearg')).toBe('false');\n      expect(argv.get('s')).toBe('false');\n    });","file":"stores/argv.test.js","skipped":false,"dir":"test"},{"name":"and can give access to them","suites":["nconf/stores/argv, An instance of nconf.Argv","can be created with a nconf yargs"],"updatePoint":{"line":53,"column":35},"line":53,"code":"    it(\"and can give access to them\", () => {\n      var argv = new nconf.Argv(options);\n      expect(argv.options).toEqual({\n        somearg: {\n          alias: 's',\n          default: 'false'\n        }\n      });\n    });","file":"stores/argv.test.js","skipped":false,"dir":"test"},{"name":"values are the one from the custom yargv","suites":["nconf/stores/argv, An instance of nconf.Argv","can be created with a nconf yargs"],"updatePoint":{"line":62,"column":48},"line":62,"code":"    it(\"values are the one from the custom yargv\", () => {\n      var argv = new nconf.Argv(options);\n      argv.loadSync();\n      expect(argv.get('somearg')).toBe('false');\n      expect(argv.get('s')).toBe('false');\n    });","file":"stores/argv.test.js","skipped":false,"dir":"test"},{"name":"values cannot be altered with set when readOnly:true","suites":["nconf/stores/argv, An instance of nconf.Argv","can be created with a nconf yargs"],"updatePoint":{"line":68,"column":60},"line":68,"code":"    it(\"values cannot be altered with set when readOnly:true\", () => {\n      var argv = new nconf.Argv(options);\n      argv.loadSync();\n      argv.set('somearg', 'true');\n      expect(argv.get('somearg')).toBe('false');\n    });","file":"stores/argv.test.js","skipped":false,"dir":"test"},{"name":"readOnly is actually false","suites":["nconf/stores/argv, An instance of nconf.Argv","can be created with readOnly set to be false"],"updatePoint":{"line":76,"column":34},"line":76,"code":"    it(\"readOnly is actually false\", () => {\n      var argv = new nconf.Argv({\n        readOnly: false\n      });\n      expect(argv.readOnly).toBe(false);\n    });","file":"stores/argv.test.js","skipped":false,"dir":"test"},{"name":"values can be changed by calling .set","suites":["nconf/stores/argv, An instance of nconf.Argv","can be created with readOnly set to be false"],"updatePoint":{"line":82,"column":45},"line":82,"code":"    it(\"values can be changed by calling .set\", () => {\n      var argv = new nconf.Argv({\n        somearg: {\n          alias: 's',\n          default: 'false'\n        },\n        readOnly: false\n      });\n      argv.loadSync();\n      expect(argv.get('somearg')).toBe('false');\n      argv.set('somearg', 'true');\n      expect(argv.get('somearg')).toBe('true');\n    });","file":"stores/argv.test.js","skipped":false,"dir":"test"},{"name":"should have the correct methods defined","suites":["nconf/stores/env, An instance of nconf.Env"],"updatePoint":{"line":11,"column":45},"line":11,"code":"  it(\"should have the correct methods defined\", () => {\n    var env = new nconf.Env();\n    expect(typeof env.loadSync).toBe('function');\n    expect(typeof env.loadEnv).toBe('function');\n    expect(env.whitelist instanceof Array).toBeTruthy();\n    expect(env.whitelist.length).toEqual(0);\n    expect(env.inputSeparator).toEqual('__');\n  });","file":"stores/env.test.js","skipped":false,"dir":"test"},{"name":"should have the correct methods defined and with readOnly false","suites":["nconf/stores/env, An instance of nconf.Env"],"updatePoint":{"line":19,"column":69},"line":19,"code":"  it(\"should have the correct methods defined and with readOnly false\", () => {\n    var env = new nconf.Env({\n      readOnly: false\n    });\n    expect(typeof env.loadSync).toBe('function');\n    expect(typeof env.loadEnv).toBe('function');\n    expect(env.whitelist instanceof Array).toBeTruthy();\n    expect(env.whitelist.length).toEqual(0);\n    expect(env.inputSeparator).toEqual('__');\n    expect(env.readOnly).toBe(false);\n  });","file":"stores/env.test.js","skipped":false,"dir":"test"},{"name":"should be able to retrieve a value using the logical separator","suites":["nconf/stores/env, An instance of nconf.Env"],"updatePoint":{"line":30,"column":68},"line":30,"code":"  it(\"should be able to retrieve a value using the logical separator\", () => {\n    var env = new nconf.Env({\n      accessSeparator: '.',\n      inputSeparator: '__'\n    });\n    env.loadSync();\n    expect(env.accessSeparator).toBe('.');\n    expect(env.get('DEEP.NESTED.VALUE')).toBe('foo');\n  });","file":"stores/env.test.js","skipped":false,"dir":"test"},{"name":"the load() method should load the data correctly","suites":["nconf/stores/file","When using the nconf file store","with a valid JSON file"],"updatePoint":{"line":24,"column":58},"line":24,"code":"      it(\"the load() method should load the data correctly\", done => {\n        var store = new nconf.File({\n          file: filePath\n        });\n        store.load((err, data) => {\n          expect(err).toBe(null);\n          expect(data).toEqual(store.store);\n          done();\n        });\n      });","file":"stores/file-store.test.js","skipped":false,"dir":"test"},{"name":"the load() method with a malformed JSON config file, should respond with an error and indicate file name","suites":["nconf/stores/file","When using the nconf file store","with a malformed JSON file"],"updatePoint":{"line":37,"column":114},"line":37,"code":"      it(\"the load() method with a malformed JSON config file, should respond with an error and indicate file name\", done => {\n        var store = new nconf.File({\n          file: filePath\n        }); //FIXME this.store.load(this.callback.bind(null, null));\n\n        store.load(err => {\n          expect(err).toBeTruthy();\n          expect(err.message).toMatch(/malformed\\.json/);\n          done();\n        });\n      });","file":"stores/file-store.test.js","skipped":false,"dir":"test"},{"name":"the load() method should load the data correctly","suites":["nconf/stores/file","When using the nconf file store","with a valid UTF8 JSON file that contains a BOM"],"updatePoint":{"line":54,"column":58},"line":54,"code":"      it(\"the load() method should load the data correctly\", done => {\n        store.load((err, data) => {\n          expect(err).toBe(null);\n          expect(data).toEqual(store.store);\n          done();\n        });\n      });","file":"stores/file-store.test.js","skipped":false,"dir":"test"},{"name":"the loadSync() method should load the data correctly","suites":["nconf/stores/file","When using the nconf file store","with a valid UTF8 JSON file that contains a BOM"],"updatePoint":{"line":61,"column":62},"line":61,"code":"      it(\"the loadSync() method should load the data correctly\", () => {\n        var data = store.loadSync();\n        expect(data).toEqual(store.store);\n      });","file":"stores/file-store.test.js","skipped":false,"dir":"test"},{"name":"the load() method should load the data correctly","suites":["nconf/stores/file","When using the nconf file store","with a valid UTF8 JSON file that contains no BOM"],"updatePoint":{"line":71,"column":58},"line":71,"code":"      it(\"the load() method should load the data correctly\", done => {\n        store.load((err, data) => {\n          expect(err).toBe(null);\n          expect(data).toEqual(store.store);\n          done();\n        });\n      });","file":"stores/file-store.test.js","skipped":false,"dir":"test"},{"name":"the loadSync() method should load the data correctly","suites":["nconf/stores/file","When using the nconf file store","with a valid UTF8 JSON file that contains no BOM"],"updatePoint":{"line":78,"column":62},"line":78,"code":"      it(\"the loadSync() method should load the data correctly\", () => {\n        var data = store.loadSync();\n        expect(data).toEqual(store.store);\n      });","file":"stores/file-store.test.js","skipped":false,"dir":"test"},{"name":"the save() method should save the data correctly","suites":["nconf/stores/file","When using the nconf file store"],"updatePoint":{"line":86,"column":56},"line":86,"code":"    it(\"the save() method should save the data correctly\", done => {\n      var tmpStore = new nconf.File({\n        file: tmpPath\n      });\n      Object.keys(data).forEach(function (key) {\n        tmpStore.set(key, data[key]);\n      });\n      tmpStore.save(function () {\n        fs.readFile(tmpStore.file, function (err, d) {\n          fs.unlinkSync(tmpStore.file);\n          expect(err).toBe(null);\n          expect(JSON.parse(d.toString())).toEqual(data);\n          done();\n        });\n      });\n    });","file":"stores/file-store.test.js","skipped":false,"dir":"test"},{"name":"the saveToFile() method should save the data correctly","suites":["nconf/stores/file","When using the nconf file store"],"updatePoint":{"line":102,"column":62},"line":102,"code":"    it(\"the saveToFile() method should save the data correctly\", done => {\n      var tmpStore = new nconf.File({\n        file: tmpPath\n      });\n      var pathFile = path.join(__dirname, '..', 'fixtures', 'tmp-save-tofile.json');\n      Object.keys(data).forEach(function (key) {\n        tmpStore.set(key, data[key]);\n      });\n      tmpStore.saveToFile(pathFile, function () {\n        fs.readFile(pathFile, function (err, d) {\n          fs.unlinkSync(pathFile);\n          expect(err).toBe(null);\n          expect(JSON.parse(d.toString())).toEqual(data);\n          done();\n        });\n      });\n    });","file":"stores/file-store.test.js","skipped":false,"dir":"test"},{"name":"the saveToFile() method with custom format should save the data correctly","suites":["nconf/stores/file","When using the nconf file store"],"updatePoint":{"line":119,"column":81},"line":119,"code":"    it(\"the saveToFile() method with custom format should save the data correctly\", done => {\n      var tmpStore = new nconf.File({\n        file: tmpPath\n      });\n      var pathFile = path.join(__dirname, '..', 'fixtures', 'tmp-save-tofile.yaml');\n      Object.keys(data).forEach(function (key) {\n        tmpStore.set(key, data[key]);\n      });\n      tmpStore.saveToFile(pathFile, yamlFormat, function () {\n        fs.readFile(pathFile, function (err, d) {\n          fs.unlinkSync(pathFile);\n          expect(err).toBe(null);\n          expect(yamlFormat.parse(d.toString())).toEqual(data);\n          done();\n        });\n      });\n    });","file":"stores/file-store.test.js","skipped":false,"dir":"test"},{"name":"the saveSync() method should save the data correctly","suites":["nconf/stores/file","When using the nconf file store"],"updatePoint":{"line":139,"column":60},"line":139,"code":"    it(\"the saveSync() method should save the data correctly\", done => {\n      var tmpStore = new nconf.File({\n        file: tmpPath\n      });\n      Object.keys(data).forEach(function (key) {\n        tmpStore.set(key, data[key]);\n      });\n      var saved = tmpStore.saveSync();\n      fs.readFile(tmpStore.file, function (err, d) {\n        fs.unlinkSync(tmpStore.file);\n        expect(err).toBe(null);\n        var read = JSON.parse(d.toString());\n        expect(read).toEqual(data);\n        expect(read).toEqual(saved);\n        done();\n      });\n    });","file":"stores/file-store.test.js","skipped":false,"dir":"test"},{"name":"the set() method should respond with true","suites":["nconf/stores/file","When using the nconf file store"],"updatePoint":{"line":162,"column":49},"line":162,"code":"    it(\"the set() method should respond with true\", () => {\n      expect(store.set('foo:bar:bazz', 'buzz')).toBeTruthy();\n      expect(store.set('falsy:number', 0)).toBeTruthy();\n      expect(store.set('falsy:string', '')).toBeTruthy();\n      expect(store.set('falsy:boolean', false)).toBeTruthy();\n      expect(store.set('falsy:object', null)).toBeTruthy();\n    });","file":"stores/file-store.test.js","skipped":false,"dir":"test"},{"name":"the get() method should respond with the correct value","suites":["nconf/stores/file","When using the nconf file store"],"updatePoint":{"line":169,"column":62},"line":169,"code":"    it(\"the get() method should respond with the correct value\", () => {\n      expect(store.get('foo:bar:bazz')).toEqual('buzz');\n      expect(store.get('falsy:number')).toEqual(0);\n      expect(store.get('falsy:string')).toEqual('');\n      expect(store.get('falsy:boolean')).toEqual(false);\n      expect(store.get('falsy:object')).toEqual(null);\n    });","file":"stores/file-store.test.js","skipped":false,"dir":"test"},{"name":"the clear() method should respond with the true","suites":["nconf/stores/file","When using the nconf file store"],"updatePoint":{"line":176,"column":55},"line":176,"code":"    it(\"the clear() method should respond with the true\", () => {\n      expect(store.get('foo:bar:bazz')).toEqual('buzz');\n      expect(store.clear('foo:bar:bazz')).toBeTruthy();\n      expect(typeof store.get('foo:bar:bazz') === 'undefined').toBeTruthy();\n    });","file":"stores/file-store.test.js","skipped":false,"dir":"test"},{"name":"the search() method when the target file exists higher in the directory tree should update the file appropriately","suites":["nconf/stores/file","When using the nconf file store"],"updatePoint":{"line":183,"column":121},"line":183,"code":"    it(\"the search() method when the target file exists higher in the directory tree should update the file appropriately\", () => {\n      var searchBase = require('os').homedir();\n\n      var filePath = path.join(searchBase, '.nconf');\n      fs.writeFileSync(filePath, JSON.stringify(data, null, 2));\n      var store = new nconf.File({\n        file: '.nconf'\n      });\n      store.search(store.searchBase);\n      expect(store.file).toEqual(filePath);\n      fs.unlinkSync(filePath);\n    });","file":"stores/file-store.test.js","skipped":false,"dir":"test"},{"name":"the search() method when the target file doesn't exist higher in the directory tree should update the file appropriately","suites":["nconf/stores/file","When using the nconf file store"],"updatePoint":{"line":195,"column":128},"line":195,"code":"    it(\"the search() method when the target file doesn't exist higher in the directory tree should update the file appropriately\", () => {\n      var filePath = path.join(__dirname, '..', 'fixtures', 'search-store.json');\n      var store = new nconf.File({\n        dir: path.dirname(filePath),\n        file: 'search-store.json'\n      });\n      store.search();\n      expect(store.file).toEqual(filePath);\n    });","file":"stores/file-store.test.js","skipped":false,"dir":"test"},{"name":"the stringify() method should encrypt properly","suites":["nconf/stores/file","When using the nconf file store"],"updatePoint":{"line":211,"column":54},"line":211,"code":"    it(\"the stringify() method should encrypt properly\", () => {\n      var contents = JSON.parse(secureStore.stringify());\n      Object.keys(data).forEach(key => {\n        expect(typeof contents[key]).toBe('object');\n        expect(typeof contents[key].value).toBe('string');\n        expect(contents[key].alg).toEqual('aes-256-ctr');\n        expect(typeof contents[key].iv).toBe('string');\n      });\n    });","file":"stores/file-store.test.js","skipped":false,"dir":"test"},{"name":"the parse() method should decrypt properly","suites":["nconf/stores/file","When using the nconf file store"],"updatePoint":{"line":220,"column":50},"line":220,"code":"    it(\"the parse() method should decrypt properly\", () => {\n      var contents = secureStore.stringify();\n      var parsed = secureStore.parse(contents);\n      expect(parsed).toEqual(data);\n    });","file":"stores/file-store.test.js","skipped":false,"dir":"test"},{"name":"the load() method should decrypt properly","suites":["nconf/stores/file","When using the nconf file store"],"updatePoint":{"line":225,"column":49},"line":225,"code":"    it(\"the load() method should decrypt properly\", () => {\n      secureStore.load(function (err, loaded) {\n        expect(err).toBe(null);\n        expect(loaded).toEqual(data);\n      });\n    });","file":"stores/file-store.test.js","skipped":false,"dir":"test"},{"name":"the loadSync() method should decrypt properly","suites":["nconf/stores/file","When using the nconf file store"],"updatePoint":{"line":231,"column":53},"line":231,"code":"    it(\"the loadSync() method should decrypt properly\", () => {\n      var loaded = secureStore.loadSync();\n      expect(loaded).toEqual(data);\n    });","file":"stores/file-store.test.js","skipped":false,"dir":"test"},{"name":"the stringify() method should return a complete last line (EOL)","suites":["nconf/stores/file","When using nconf file store"],"updatePoint":{"line":237,"column":71},"line":237,"code":"    it(\"the stringify() method should return a complete last line (EOL)\", () => {\n      var storePath = path.join(__dirname, '..', 'fixtures', 'store.json');\n      var store = new nconf.File({\n        file: storePath\n      });\n      var contents = store.stringify();\n      expect(contents.slice(-1)).toEqual(os.EOL);\n    });","file":"stores/file-store.test.js","skipped":false,"dir":"test"},{"name":"with option `eol` set to `false`, the stringify() method should return an incomplete last line (no EOL)","suites":["nconf/stores/file","When using nconf file store"],"updatePoint":{"line":245,"column":111},"line":245,"code":"    it(\"with option `eol` set to `false`, the stringify() method should return an incomplete last line (no EOL)\", () => {\n      var storePath = path.join(__dirname, '..', 'fixtures', 'store.json');\n      this.store = new nconf.File({\n        file: storePath,\n        eol: false\n      });\n      this.store.load(err => {\n        expect(err).toEqual(null);\n        expect(this.store.stringify().slice(-1)).not.toEqual(os.EOL);\n      });\n    });","file":"stores/file-store.test.js","skipped":false,"dir":"test"},{"name":"the load() method should throw an error when presented a legacy encrypted file","suites":["nconf/stores/file","When using the nconf file store"],"updatePoint":{"line":262,"column":86},"line":262,"code":"    it(\"the load() method should throw an error when presented a legacy encrypted file\", done => {\n      secureStore.load(function (err, loaded) {\n        try {\n          expect(err).not.toBe(null);\n          expect(loaded).toEqual(void 0);\n          done();\n        } catch (err) {\n          done(err);\n        }\n      });\n    });","file":"stores/file-store.test.js","skipped":false,"dir":"test"},{"name":"the loadSync() method should throw an error when presented a legacy encrypted file","suites":["nconf/stores/file","When using the nconf file store"],"updatePoint":{"line":273,"column":90},"line":273,"code":"    it(\"the loadSync() method should throw an error when presented a legacy encrypted file\", () => {\n      expect(() => {\n        secureStore.loadSync();\n      }).toThrow();\n    });","file":"stores/file-store.test.js","skipped":false,"dir":"test"},{"name":"should have the correct methods defined","suites":["nconf/stores/literal, An instance of nconf.Literal"],"updatePoint":{"line":14,"column":45},"line":14,"code":"  it(\"should have the correct methods defined\", () => {\n    var literal = new nconf.Literal(envOptions);\n    expect(literal.type).toEqual('literal');\n    expect(typeof literal.get).toBe('function');\n    expect(typeof literal.set).toBe('function');\n    expect(typeof literal.merge).toBe('function');\n    expect(typeof literal.loadSync).toBe('function');\n  });","file":"stores/literal.test.js","skipped":false,"dir":"test"},{"name":"should have the correct values in the store","suites":["nconf/stores/literal, An instance of nconf.Literal"],"updatePoint":{"line":22,"column":49},"line":22,"code":"  it(\"should have the correct values in the store\", () => {\n    var literal = new nconf.Literal(envOptions);\n    expect(literal.store.foo).toEqual('bar');\n    expect(literal.store.one).toEqual(2);\n  });","file":"stores/literal.test.js","skipped":false,"dir":"test"},{"name":"the set() method should respond with true","suites":["nconf/stores/memory","When using the nconf memory store"],"updatePoint":{"line":14,"column":49},"line":14,"code":"    it(\"the set() method should respond with true\", () => {\n      expect(store.set('foo:bar:bazz', 'buzz')).toBeTruthy();\n      expect(store.set('falsy:number', 0)).toBeTruthy();\n      expect(store.set('falsy:string:empty', '')).toBeTruthy();\n      expect(store.set('falsy:string:value', 'value')).toBeTruthy();\n      expect(store.set('falsy:boolean', false)).toBeTruthy();\n      expect(store.set('falsy:object', null)).toBeTruthy();\n    });","file":"stores/memory-store.test.js","skipped":false,"dir":"test"},{"name":"the get() method should respond with the correct value","suites":["nconf/stores/memory","When using the nconf memory store"],"updatePoint":{"line":22,"column":62},"line":22,"code":"    it(\"the get() method should respond with the correct value\", () => {\n      expect(store.get('foo:bar:bazz')).toEqual('buzz');\n      expect(store.get('falsy:number')).toEqual(0);\n      expect(store.get('falsy:string:empty')).toEqual('');\n      expect(store.get('falsy:string:value')).toEqual('value');\n      expect(store.get('falsy:boolean')).toEqual(false);\n      expect(store.get('falsy:object')).toEqual(null);\n    });","file":"stores/memory-store.test.js","skipped":false,"dir":"test"},{"name":"at the root level","suites":["nconf/stores/memory","When using the nconf memory store","the get() method should not fail when retrieving non-existent keys"],"updatePoint":{"line":31,"column":27},"line":31,"code":"      it(\"at the root level\", () => {\n        expect(store.get('this:key:does:not:exist')).toEqual(undefined);\n      });","file":"stores/memory-store.test.js","skipped":false,"dir":"test"},{"name":"within numbers","suites":["nconf/stores/memory","When using the nconf memory store","the get() method should not fail when retrieving non-existent keys"],"updatePoint":{"line":34,"column":24},"line":34,"code":"      it(\"within numbers\", () => {\n        expect(store.get('falsy:number:not:exist')).toEqual(undefined);\n      });","file":"stores/memory-store.test.js","skipped":false,"dir":"test"},{"name":"within booleans","suites":["nconf/stores/memory","When using the nconf memory store","the get() method should not fail when retrieving non-existent keys"],"updatePoint":{"line":37,"column":25},"line":37,"code":"      it(\"within booleans\", () => {\n        expect(store.get('falsy:boolean:not:exist')).toEqual(undefined);\n      });","file":"stores/memory-store.test.js","skipped":false,"dir":"test"},{"name":"within objects","suites":["nconf/stores/memory","When using the nconf memory store","the get() method should not fail when retrieving non-existent keys"],"updatePoint":{"line":40,"column":24},"line":40,"code":"      it(\"within objects\", () => {\n        expect(store.get('falsy:object:not:exist')).toEqual(undefined);\n      });","file":"stores/memory-store.test.js","skipped":false,"dir":"test"},{"name":"within empty strings","suites":["nconf/stores/memory","When using the nconf memory store","the get() method should not fail when retrieving non-existent keys"],"updatePoint":{"line":43,"column":30},"line":43,"code":"      it(\"within empty strings\", () => {\n        expect(store.get('falsy:string:empty:not:exist')).toEqual(undefined);\n      });","file":"stores/memory-store.test.js","skipped":false,"dir":"test"},{"name":"within non-empty strings","suites":["nconf/stores/memory","When using the nconf memory store","the get() method should not fail when retrieving non-existent keys"],"updatePoint":{"line":46,"column":34},"line":46,"code":"      it(\"within non-empty strings\", () => {\n        expect(store.get('falsy:string:value:not:exist')).toEqual(undefined);\n      });","file":"stores/memory-store.test.js","skipped":false,"dir":"test"},{"name":"the clear() method, should respond with the true","suites":["nconf/stores/memory","When using the nconf memory store","the get() method should not fail when retrieving non-existent keys"],"updatePoint":{"line":50,"column":56},"line":50,"code":"    it(\"the clear() method, should respond with the true\", () => {\n      expect(store.get('foo:bar:bazz')).toEqual('buzz');\n      expect(store.clear('foo:bar:bazz')).toBeTruthy();\n      expect(typeof store.get('foo:bar:bazz') === 'undefined').toBeTruthy();\n    });","file":"stores/memory-store.test.js","skipped":false,"dir":"test"},{"name":"when overriding an existing literal value","suites":["nconf/stores/memory","When using the nconf memory store","the merge() method"],"updatePoint":{"line":56,"column":51},"line":56,"code":"      it(\"when overriding an existing literal value\", () => {\n        store.set('merge:literal', 'string-value');\n        store.merge('merge:literal', merge);\n        expect(store.get('merge:literal')).toEqual(merge);\n      });","file":"stores/memory-store.test.js","skipped":false,"dir":"test"},{"name":"when overriding an existing Array value","suites":["nconf/stores/memory","When using the nconf memory store","the merge() method"],"updatePoint":{"line":61,"column":49},"line":61,"code":"      it(\"when overriding an existing Array value\", () => {\n        store.set('merge:array', [1, 2, 3, 4]);\n        store.merge('merge:array', merge);\n        expect(store.get('merge:literal')).toEqual(merge);\n      });","file":"stores/memory-store.test.js","skipped":false,"dir":"test"},{"name":"when merging into an existing Object value","suites":["nconf/stores/memory","When using the nconf memory store","the merge() method"],"updatePoint":{"line":66,"column":52},"line":66,"code":"      it(\"when merging into an existing Object value\", () => {\n        store.set('merge:object', {\n          prop1: 2,\n          prop2: 'prop2',\n          prop3: {\n            bazz: 'bazz'\n          },\n          prop4: ['foo', 'bar']\n        });\n        store.merge('merge:object', merge);\n        expect(store.get('merge:object:prop1')).toEqual(1);\n        expect(store.get('merge:object:prop2').length).toEqual(3);\n        expect(store.get('merge:object:prop3')).toEqual({\n          foo: 'bar',\n          bar: 'foo',\n          bazz: 'bazz'\n        });\n        expect(store.get('merge:object:prop4').length).toEqual(2);\n      });","file":"stores/memory-store.test.js","skipped":false,"dir":"test"},{"name":"when storing with : (colon), should store the config atomicly (leave key as-is)","suites":["nconf/stores/memory","When using the nconf memory store with different logical separator"],"updatePoint":{"line":92,"column":87},"line":92,"code":"    it(\"when storing with : (colon), should store the config atomicly (leave key as-is)\", () => {\n      store.set('foo:bar:bazz', 'buzz');\n      expect(typeof store.get('foo:bar') === 'undefined').toBeTruthy();\n      expect(store.get('foo:bar:bazz')).toEqual('buzz');\n    });","file":"stores/memory-store.test.js","skipped":false,"dir":"test"},{"name":"when storing with separator, should be able to read the object","suites":["nconf/stores/memory","When using the nconf memory store with different logical separator"],"updatePoint":{"line":97,"column":70},"line":97,"code":"    it(\"when storing with separator, should be able to read the object\", () => {\n      store.set('foo||bar||bazz', 'buzz');\n      expect(store.get('foo||bar').bazz).toEqual('buzz');\n      expect(store.get('foo').bar.bazz).toEqual('buzz');\n    });","file":"stores/memory-store.test.js","skipped":false,"dir":"test"}]}