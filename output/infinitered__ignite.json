{"repo":"infinitered/ignite","url":"https://github.com/infinitered/ignite","branch":"master","configs":[{"package":"hello-world","lang":"ts","dir":"boilerplate/test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"ignite-cli","lang":"ts","dir":"test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"There are no missing keys","suites":["i18n"],"updatePoint":{"line":46,"column":33},"line":46,"code":"  test(\"There are no missing keys\", (done) => {\n    // Actual command output:\n    // grep \"[T\\|t]x=[{]\\?\\\"\\S*\\\"[}]\\?\\|translate(\\\"\\S*\\\"\" -ohr './app' | grep -o \"\\\".*\\\"\"\n    const command = `grep \"[T\\\\|t]x=[{]\\\\?\\\\\"\\\\S*\\\\\"[}]\\\\?\\\\|translate(\\\\\"\\\\S*\\\\\"\" -ohr './app' | grep -o \"\\\\\".*\\\\\"\"`\n    exec(command, (_, stdout) => {\n      const allTranslationsDefined = iterate(en, \"\", [])\n      const allTranslationsUsed = stdout.replace(/\"/g, \"\").split(\"\\n\")\n      allTranslationsUsed.splice(-1, 1)\n\n      for (let i = 0; i < allTranslationsUsed.length; i += 1) {\n        if (!EXCEPTIONS.includes(allTranslationsUsed[i])) {\n          // You can add keys to EXCEPTIONS (above) if you don't want them included in the test\n          expect(allTranslationsDefined).toContainEqual(allTranslationsUsed[i])\n        }\n      }\n      done()\n    })\n  }, 240000)","file":"i18n.test.ts","skipped":false,"dir":"boilerplate/test"},{"name":"should generate Pizza model and test, patch index model export, and not patch RootStore","suites":["ignite-cli generate","model"],"updatePoint":{"line":38,"column":95},"line":38,"code":"    it(\"should generate Pizza model and test, patch index model export, and not patch RootStore\", async () => {\n      const result = await runIgnite(`generate model Pizza`, options)\n\n      expect(replaceHomeDir(result)).toMatchInlineSnapshot(`\n        \"   \n           \n           Generated new files:\n           /user/home/ignite/app/models/Pizza.test.ts\n           /user/home/ignite/app/models/Pizza.ts\n        \"\n      `)\n      expect(read(`${TEMP_DIR}/app/models/Pizza.ts`)).toMatchInlineSnapshot(`\n        \"import { Instance, SnapshotIn, SnapshotOut, types } from \\\\\"mobx-state-tree\\\\\"\n\n        /**\n         * Model description here for TypeScript hints.\n         */\n        export const PizzaModel = types\n          .model(\\\\\"Pizza\\\\\")\n          .props({})\n          .views((self) => ({})) // eslint-disable-line @typescript-eslint/no-unused-vars\n          .actions((self) => ({})) // eslint-disable-line @typescript-eslint/no-unused-vars\n\n        export interface Pizza extends Instance<typeof PizzaModel> {}\n        export interface PizzaSnapshotOut extends SnapshotOut<typeof PizzaModel> {}\n        export interface PizzaSnapshotIn extends SnapshotIn<typeof PizzaModel> {}\n        export const createPizzaDefaultModel = () => types.optional(PizzaModel, {})\n        \"\n      `)\n      expect(read(`${TEMP_DIR}/app/models/Pizza.test.ts`)).toMatchInlineSnapshot(`\n        \"import { PizzaModel } from \\\\\"./Pizza\\\\\"\n\n        test(\\\\\"can be created\\\\\", () => {\n          const instance = PizzaModel.create({})\n\n          expect(instance).toBeTruthy()\n        })\n        \"\n      `)\n      expect(read(`${TEMP_DIR}/app/models/index.ts`)).toMatchInlineSnapshot(`\n        \"export * from \\\\\"./RootStore\\\\\"\n        export * from \\\\\"./helpers/getRootStore\\\\\"\n        export * from \\\\\"./helpers/useStores\\\\\"\n        export * from \\\\\"./helpers/setupRootStore\\\\\"\n        export * from \\\\\"./Pizza\\\\\"\n        \"\n      `)\n      expect(read(`${TEMP_DIR}/app/models/RootStore.ts`)).toEqual(\n        read(`${BOILERPLATE_PATH}/app/models/RootStore.ts`),\n      )\n    })","file":"vanilla/ignite-generate.test.ts","skipped":false,"dir":"test"},{"name":"should generate PizzaStore model and test, patch index model export and RootStore","suites":["ignite-cli generate","model"],"updatePoint":{"line":90,"column":89},"line":90,"code":"    it(\"should generate PizzaStore model and test, patch index model export and RootStore\", async () => {\n      const result = await runIgnite(`generate model PizzaStore`, options)\n\n      expect(replaceHomeDir(result)).toMatchInlineSnapshot(`\n        \"   \n           \n           Generated new files:\n           /user/home/ignite/app/models/PizzaStore.test.ts\n           /user/home/ignite/app/models/PizzaStore.ts\n        \"\n      `)\n      expect(read(`${TEMP_DIR}/app/models/PizzaStore.ts`)).toMatchInlineSnapshot(`\n        \"import { Instance, SnapshotIn, SnapshotOut, types } from \\\\\"mobx-state-tree\\\\\"\n\n        /**\n         * Model description here for TypeScript hints.\n         */\n        export const PizzaStoreModel = types\n          .model(\\\\\"PizzaStore\\\\\")\n          .props({})\n          .views((self) => ({})) // eslint-disable-line @typescript-eslint/no-unused-vars\n          .actions((self) => ({})) // eslint-disable-line @typescript-eslint/no-unused-vars\n\n        export interface PizzaStore extends Instance<typeof PizzaStoreModel> {}\n        export interface PizzaStoreSnapshotOut extends SnapshotOut<typeof PizzaStoreModel> {}\n        export interface PizzaStoreSnapshotIn extends SnapshotIn<typeof PizzaStoreModel> {}\n        export const createPizzaStoreDefaultModel = () => types.optional(PizzaStoreModel, {})\n        \"\n      `)\n      expect(read(`${TEMP_DIR}/app/models/PizzaStore.test.ts`)).toMatchInlineSnapshot(`\n        \"import { PizzaStoreModel } from \\\\\"./PizzaStore\\\\\"\n\n        test(\\\\\"can be created\\\\\", () => {\n          const instance = PizzaStoreModel.create({})\n\n          expect(instance).toBeTruthy()\n        })\n        \"\n      `)\n      expect(read(`${TEMP_DIR}/app/models/index.ts`)).toMatchInlineSnapshot(`\n        \"export * from \\\\\"./RootStore\\\\\"\n        export * from \\\\\"./helpers/getRootStore\\\\\"\n        export * from \\\\\"./helpers/useStores\\\\\"\n        export * from \\\\\"./helpers/setupRootStore\\\\\"\n        export * from \\\\\"./PizzaStore\\\\\"\n        \"\n      `)\n      expect(read(`${TEMP_DIR}/app/models/RootStore.ts`)).toMatchInlineSnapshot(`\n        \"import { Instance, SnapshotOut, types } from \\\\\"mobx-state-tree\\\\\"\n        import { PizzaStoreModel } from \\\\\"./PizzaStore\\\\\"\n        import { AuthenticationStoreModel } from \\\\\"./AuthenticationStore\\\\\" // @demo remove-current-line\n        import { EpisodeStoreModel } from \\\\\"./EpisodeStore\\\\\" // @demo remove-current-line\n\n        /**\n         * A RootStore model.\n         */\n        export const RootStoreModel = types.model(\\\\\"RootStore\\\\\").props({\n          pizzaStore: types.optional(PizzaStoreModel, {} as any),\n          authenticationStore: types.optional(AuthenticationStoreModel, {}), // @demo remove-current-line\n          episodeStore: types.optional(EpisodeStoreModel, {}), // @demo remove-current-line\n        })\n\n        /**\n         * The RootStore instance.\n         */\n        export interface RootStore extends Instance<typeof RootStoreModel> {}\n        /**\n         * The data of a RootStore.\n         */\n        export interface RootStoreSnapshot extends SnapshotOut<typeof RootStoreModel> {}\n        \"\n      `)\n    })","file":"vanilla/ignite-generate.test.ts","skipped":false,"dir":"test"},{"name":"ignite help","suites":[],"updatePoint":{"line":3,"column":17},"line":3,"code":"test(`ignite help`, async () => {\n  const result = await runIgnite(`help`)\n\n  expect(result).toContain(\"Ignite\")\n  expect(result).toContain(\"new\")\n  expect(result).toContain(\"generate\")\n  expect(result).toContain(\"doctor\")\n  expect(result).toContain(`community.infinite.red`)\n})","file":"vanilla/ignite-help.test.ts","skipped":false,"dir":"test"},{"name":"invalid bundle id \"thisisbad\" throws expected error","suites":["ignite new","errors"],"updatePoint":{"line":20,"column":61},"line":20,"code":"    test(`invalid bundle id \"thisisbad\" throws expected error`, async () => {\n      const result = await runError(`new BadBundleID --bundle thisisbad --yes`)\n      expect((result as any).stdout).toContain(`Invalid Bundle Identifier.`)\n    })","file":"vanilla/ignite-new.test.ts","skipped":false,"dir":"test"},{"name":"should print success message","suites":["ignite new","ignite new  --debug --packager=npm --yes --use-cache"],"updatePoint":{"line":44,"column":36},"line":44,"code":"    it(\"should print success message\", () => {\n      // at some point this should probably be a snapshot?\n      expect(result).toContain(\"Now get cooking! 🍽\")\n    })","file":"vanilla/ignite-new.test.ts","skipped":false,"dir":"test"},{"name":"should have created expected directories","suites":["ignite new","ignite new  --debug --packager=npm --yes --use-cache"],"updatePoint":{"line":49,"column":48},"line":49,"code":"    it(\"should have created expected directories\", () => {\n      // now let's examine the spun-up app\n      const dirs = filesystem.list(appPath)\n      expect(dirs).toContain(\"ios\")\n      expect(dirs).toContain(\"android\")\n      expect(dirs).toContain(\"app\")\n\n      // check the contents of ignite/templates\n      const templates = filesystem.list(`${appPath}/ignite/templates`)\n      expect(templates).toContain(\"component\")\n      expect(templates).toContain(\"model\")\n      expect(templates).toContain(\"screen\")\n      expect(templates).toContain(\"app-icon\")\n    })","file":"vanilla/ignite-new.test.ts","skipped":false,"dir":"test"},{"name":"should have changed the android bundle id","suites":["ignite new","ignite new  --debug --packager=npm --yes --use-cache"],"updatePoint":{"line":64,"column":49},"line":64,"code":"    it(\"should have changed the android bundle id\", () => {\n      const androidPackageName = APP_NAME.toLowerCase()\n      const mainAppJava = filesystem.read(\n        `${appPath}/android/app/src/main/java/com/${androidPackageName}/MainApplication.java`,\n      )\n      expect(mainAppJava).toContain(`package com.${androidPackageName};`)\n      const mainActivityJava = filesystem.read(\n        `${appPath}/android/app/src/main/java/com/${androidPackageName}/MainActivity.java`,\n      )\n      expect(mainActivityJava).toContain(`package com.${androidPackageName};`)\n    })","file":"vanilla/ignite-new.test.ts","skipped":false,"dir":"test"},{"name":"should have renamed all permutations of hello-world to ","suites":["ignite new","ignite new  --debug --packager=npm --yes --use-cache"],"updatePoint":{"line":76,"column":74},"line":76,"code":"    it(`should have renamed all permutations of hello-world to ${APP_NAME}`, async () => {\n      // react-native-rename doesn't always catch everything, so we need to check for\n      // any instances and fail if it doesn't work\n      await checkForLeftoverHelloWorld(appPath)\n    })","file":"vanilla/ignite-new.test.ts","skipped":false,"dir":"test"},{"name":"should have modified package.json to add scripts, dependencies, and detox configurations","suites":["ignite new","ignite new  --debug --packager=npm --yes --use-cache"],"updatePoint":{"line":82,"column":96},"line":82,"code":"    it(\"should have modified package.json to add scripts, dependencies, and detox configurations\", () => {\n      const igniteJSON = filesystem.read(`${appPath}/package.json`, \"json\")\n      expect(igniteJSON).toHaveProperty(\"scripts\")\n      expect(igniteJSON).toHaveProperty(\"dependencies\")\n      expect(igniteJSON).toHaveProperty(\"detox.configurations\")\n    })","file":"vanilla/ignite-new.test.ts","skipped":false,"dir":"test"},{"name":"should have created app.tsx with default export and RootStore","suites":["ignite new","ignite new  --debug --packager=npm --yes --use-cache"],"updatePoint":{"line":89,"column":69},"line":89,"code":"    it(\"should have created app.tsx with default export and RootStore\", () => {\n      const appJS = filesystem.read(`${appPath}/app/app.tsx`)\n      expect(appJS).toContain(\"export default App\")\n      expect(appJS).toContain(\"RootStore\")\n    })","file":"vanilla/ignite-new.test.ts","skipped":false,"dir":"test"},{"name":"should be able to use `generate` command and have pass output pass npm run test, npm run lint, and npm run compile scripts","suites":["ignite new","ignite new  --debug --packager=npm --yes --use-cache"],"updatePoint":{"line":95,"column":130},"line":95,"code":"    it(\"should be able to use `generate` command and have pass output pass npm run test, npm run lint, and npm run compile scripts\", async () => {\n      // other common test operations\n      const runOpts = {\n        pre: `cd ${appPath}`,\n        post: `cd ${originalDir}`,\n      }\n\n      // #region Assert Typescript Compiles With No Errors\n      let resultTS: string\n      try {\n        resultTS = await run(`npm run compile`, runOpts)\n      } catch (e) {\n        resultTS = e.stdout\n        console.error(resultTS) // This will only show if you run in --verbose mode.\n      }\n      expect(resultTS).not.toContain(\"error\")\n      // #endregion\n\n      // #region Assert Generators Work\n      // now lets test generators too, since we have a properly spun-up app!\n      // components\n      const componentGen = await runIgnite(`generate component womp-bomp`, runOpts)\n      expect(componentGen).toContain(`app/components/WompBomp.tsx`)\n      expect(filesystem.list(`${appPath}/app/components`)).toContain(\"WompBomp.tsx\")\n      expect(filesystem.read(`${appPath}/app/components/WompBomp.tsx`)).toContain(\n        \"export const WompBomp\",\n      )\n\n      // models\n      const modelGen = await runIgnite(`generate model mod-test`, runOpts)\n      expect(modelGen).toContain(`app/models/ModTest.ts`)\n      expect(modelGen).toContain(`app/models/ModTest.test.ts`)\n      expect(filesystem.list(`${appPath}/app/models`)).toContain(\"ModTest.ts\")\n      expect(filesystem.read(`${appPath}/app/models/ModTest.ts`)).toContain(\n        \"export const ModTestModel\",\n      )\n      expect(filesystem.read(`${appPath}/app/models/index.ts`)).toContain(\n        `export * from \"./ModTest\"`,\n      )\n\n      // screens\n      const screenGen = await runIgnite(`generate screen bowser-screen --skip-index-file`, runOpts)\n      expect(screenGen).toContain(`Stripping Screen from end of name`)\n      expect(screenGen).toContain(`app/screens/BowserScreen.tsx`)\n      expect(filesystem.list(`${appPath}/app/screens`)).toContain(\"BowserScreen.tsx\")\n      expect(filesystem.read(`${appPath}/app/screens/BowserScreen.tsx`)).toContain(\n        \"export const BowserScreen\",\n      )\n      expect(filesystem.read(`${appPath}/app/screens/index.ts`)).not.toContain(\n        `export * from \"./BowserScreen\"`,\n      )\n\n      // app-icons\n      const allAppIcons = [\"android\", \"ios\", \"expo\"].reduce((acc: string[], type) => {\n        const searchPath = {\n          android: \"android/app/src/main/res\",\n          ios: \"ios\",\n          expo: \"assets/images\",\n        }[type] as string\n\n        const matchString = {\n          android: \"ic_launch*.png\",\n          ios: `Icon-*.png`,\n          expo: \"app-icon*.png\",\n        }[type]\n\n        try {\n          const iconsMatches = filesystem.find(filesystem.path(appPath, searchPath), {\n            directories: false,\n            files: true,\n            matching: matchString,\n          })\n\n          return [...acc, ...iconsMatches]\n        } catch (error) {\n          return acc\n        }\n      }, [])\n\n      allAppIcons.forEach((i) => {\n        expect(filesystem.exists(i) === \"file\").toBe(true)\n        filesystem.remove(i)\n        expect(filesystem.exists(i) === \"file\").toBe(false)\n      })\n\n      const appIconGen = await runIgnite(\n        `generate app-icon all --skip-source-equality-validation`,\n        runOpts,\n      )\n\n      expect(appIconGen).toContain(`Generating Expo app icons...`)\n\n      const iosProjectExists = filesystem.exists(filesystem.path(appPath, \"ios\"))\n      const androidProjectExists = filesystem.exists(filesystem.path(appPath, \"android\"))\n\n      if (androidProjectExists) {\n        expect(appIconGen).toContain(`Generating Android app icons...`)\n      } else {\n        expect(appIconGen).toContain(`No output directory found for \"Android\"`)\n      }\n\n      if (iosProjectExists) {\n        expect(appIconGen).toContain(`Generating iOS app icons...`)\n      } else {\n        expect(appIconGen).toContain(`No output directory found for \"iOS\"`)\n      }\n\n      allAppIcons.forEach((i) => {\n        expect(filesystem.exists(i) === \"file\").toBe(true)\n      })\n\n      const inputFiles = filesystem.find(`${appPath}/ignite/templates/app-icon`, {\n        directories: false,\n        files: true,\n        matching: \"*.png\",\n      })\n\n      inputFiles.forEach((i) => {\n        expect(filesystem.exists(i) === \"file\").toBe(true)\n        filesystem.remove(i)\n        expect(filesystem.exists(i) === \"file\").toBe(false)\n      })\n\n      await runIgnite(`generate --update`, runOpts)\n\n      inputFiles.forEach((i) => {\n        expect(filesystem.exists(i) === \"file\").toBe(true)\n      })\n\n      // splash-screen\n      const splashScreenAssets = [\"android\", \"ios\", \"expo\"].reduce((acc: string[], type) => {\n        const searchPath = {\n          android: \"android/app/src/main/res\",\n          ios: \"ios\",\n          expo: \"assets/images\",\n        }[type] as string\n\n        const matchString = {\n          android: \"bootsplash*.png\",\n          ios: `bootsplash*.png`,\n          expo: \"splash-logo*.png\",\n        }[type]\n\n        try {\n          const splashMatches = filesystem.find(filesystem.path(appPath, searchPath), {\n            directories: false,\n            files: true,\n            matching: matchString,\n          })\n\n          return [...acc, ...splashMatches]\n        } catch (error) {\n          return acc\n        }\n      }, [])\n\n      splashScreenAssets.forEach((i) => {\n        expect(filesystem.exists(i) === \"file\").toBe(true)\n        filesystem.remove(i)\n        expect(filesystem.exists(i) === \"file\").toBe(false)\n      })\n\n      function verifySplashScreenColor(type: \"android\" | \"ios\" | \"expo\", matchString: string) {\n        const splashScreenColorStrings = {\n          android: filesystem.read(\n            filesystem.path(appPath, \"android/app/src/main/res/values/colors.xml\"),\n          ),\n          ios: filesystem.read(filesystem.path(appPath, \"ios/Foo/BootSplash.storyboard\")),\n          expo: filesystem.read(filesystem.path(appPath, \"app.json\")),\n        }\n\n        const colorContent = splashScreenColorStrings[type]\n\n        if (!colorContent) return\n\n        expect(colorContent).toContain(matchString)\n      }\n\n      verifySplashScreenColor(\"android\", `#191015`)\n      verifySplashScreenColor(\"expo\", `#191015`)\n      verifySplashScreenColor(\n        \"ios\",\n        `red=\"0.0980392156862745\" green=\"0.0627450980392157\" blue=\"0.0823529411764706\"`,\n      )\n\n      const splashScreenGen = await runIgnite(\n        `generate splash-screen 000000  --skip-source-equality-validation`,\n        runOpts,\n      )\n\n      expect(splashScreenGen).toContain(`Generating Expo splash screens`)\n\n      if (androidProjectExists) {\n        expect(splashScreenGen).toContain(`Generating Android splash screen...`)\n      } else {\n        expect(splashScreenGen).toContain(`No output directory found for \"Android\"`)\n      }\n\n      if (iosProjectExists) {\n        expect(splashScreenGen).toContain(`Generating iOS splash screen...`)\n      } else {\n        expect(splashScreenGen).toContain(`No output directory found for \"iOS\"`)\n      }\n\n      splashScreenAssets.forEach((i) => {\n        expect(filesystem.exists(i) === \"file\").toBe(true)\n      })\n\n      verifySplashScreenColor(\"android\", `#000000`)\n      verifySplashScreenColor(\"expo\", `#000000`)\n      verifySplashScreenColor(\n        \"ios\",\n        `red=\"0.00000000000000\" green=\"0.00000000000000\" blue=\"0.00000000000000\"`,\n      )\n\n      const inputFile = filesystem.path(appPath, \"ignite/templates/splash-screen/logo.png\")\n      expect(filesystem.exists(inputFile) === \"file\").toBe(true)\n      filesystem.remove(inputFile)\n      expect(filesystem.exists(inputFile) === \"file\").toBe(false)\n      await runIgnite(`generate --update`, runOpts)\n      expect(filesystem.exists(inputFile) === \"file\").toBe(true)\n      // #endregion\n\n      // #region Assert Changes Can Be Commit To Git\n      // commit the change\n      await run(`git add ./app/models ./app/components ./app.json ./assets/images`, runOpts)\n      if (iosProjectExists) {\n        await run(`git add ./ios/Foo/Images.xcassets/AppIcon.appiconset`, runOpts)\n        await run(`git add ./ios/Foo/Images.xcassets/BootSplashLogo.imageset`, runOpts)\n        await run(`git add ./ios/Foo/BootSplash.storyboard`, runOpts)\n      }\n      if (androidProjectExists) {\n        await run(`git add ./android/app/src/main/res`, runOpts)\n      }\n      await run(`git commit -m \"generated test components & assets\"`, runOpts)\n      // #endregion\n\n      // #region Assert package.json Scripts Can Be Run\n      // run the tests; if they fail, run will raise and this test will fail\n      await run(`npm run test`, runOpts)\n      await run(`npm run lint`, runOpts)\n      await run(`npm run compile`, runOpts)\n      expect(await run(\"git diff HEAD\", runOpts)).toEqual(\"\")\n      // #endregion\n\n      // we're done!\n    })","file":"vanilla/ignite-new.test.ts","skipped":false,"dir":"test"},{"name":"should print the expected response","suites":["ignite-cli remove-demo"],"updatePoint":{"line":24,"column":40},"line":24,"code":"  it(\"should print the expected response\", async () => {\n    const result = await runIgnite(`remove-demo ${TEMP_DIR}`)\n\n    // \"/user/home/ignite\" replaces the temp directory, so we don't get failures when it changes every test run\n    const MOCK_DIR = `/user/home/ignite`\n    const output = result.replace(new RegExp(TEMP_DIR, \"g\"), MOCK_DIR)\n\n    expect(output).toMatchSnapshot()\n  })","file":"vanilla/ignite-remove-demo.test.ts","skipped":false,"dir":"test"}]}