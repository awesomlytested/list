{"repo":"yagop/node-telegram-bot-api","url":"https://github.com/yagop/node-telegram-bot-api","branch":"master","configs":[{"package":"node-telegram-bot-api","lang":"js","dir":"test","framework":"mocha","pattern":"**/*.{js,ts}"}],"tests":[{"name":"is loaded from src/ on Node.js v6+ and above","suites":["module.exports"],"updatePoint":{"line":78,"column":50,"index":2246},"line":78,"code":"  it('is loaded from src/ on Node.js v6+ and above', function test() {\n    if (nodeVersion <= 5) this.skip(); // skip on Node.js v5 and below\n\n    assert.strictEqual(TelegramBot, require('../src/telegram'));\n  });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"is loaded from lib/ on Node.js v5 and below","suites":["module.exports"],"updatePoint":{"line":83,"column":49,"index":2459},"line":83,"code":"  it('is loaded from lib/ on Node.js v5 and below', function test() {\n    if (nodeVersion > 5) this.skip(); // skip on newer versions\n\n    assert.strictEqual(TelegramBot, require('../lib/telegram'));\n  });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"automatically starts polling","suites":["TelegramBot"],"updatePoint":{"line":137,"column":34,"index":4076},"line":137,"code":"  it('automatically starts polling', function test() {\n    assert.strictEqual(botPolling.isPolling(), true);\n    return utils.isPollingMockServer(pollingPort2);\n  });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"automatically opens webhook","suites":["TelegramBot"],"updatePoint":{"line":141,"column":33,"index":4242},"line":141,"code":"  it('automatically opens webhook', function test() {\n    assert.strictEqual(botWebHook.hasOpenWebHook(), true);\n    return utils.hasOpenWebHook(webHookPort2);\n  });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"does not automatically poll if \"autoStart\" is false","suites":["TelegramBot"],"updatePoint":{"line":145,"column":57,"index":4432},"line":145,"code":"  it('does not automatically poll if \"autoStart\" is false', function test() {\n    assert.strictEqual(testbot.isPolling(), false);\n    return utils.isPollingMockServer(pollingPort, true);\n  });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"does not automatically open webhook if \"autoOpen\" is false","suites":["TelegramBot"],"updatePoint":{"line":149,"column":64,"index":4632},"line":149,"code":"  it('does not automatically open webhook if \"autoOpen\" is false', function test() {\n    assert.strictEqual(testbot.hasOpenWebHook(), false);\n    return utils.hasOpenWebHook(webHookPort, true);\n  });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"correctly deletes the webhook if polling","suites":["TelegramBot"],"updatePoint":{"line":153,"column":46,"index":4814},"line":153,"code":"  it('correctly deletes the webhook if polling', function test() {\n    const myBot = new TelegramBot(TOKEN, {\n      polling: {\n        autoStart: false,\n        params: {\n          timeout: 0\n        }\n      }\n    });\n    utils.handleRatelimit(myBot, 'setWebHook', this);\n    myBot.on('polling_error', error => {\n      assert.ifError(error);\n    });\n    return myBot.setWebHook(ip, {}).then(() => {\n      return myBot.startPolling();\n    }).then(() => {\n      return myBot.stopPolling();\n    });\n  });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"(polling) emits \"message\" on receiving message","suites":["TelegramBot","Events"],"updatePoint":{"line":173,"column":54,"index":5370},"line":173,"code":"    it('(polling) emits \"message\" on receiving message', function test(done) {\n      botPolling.once('message', () => {\n        return done();\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"(polling) emits \"polling_error\" if error occurs during polling","suites":["TelegramBot","Events"],"updatePoint":{"line":178,"column":70,"index":5547},"line":178,"code":"    it('(polling) emits \"polling_error\" if error occurs during polling', function test(done) {\n      const myBot = new TelegramBot(12345, {\n        polling: true\n      });\n      myBot.once('polling_error', error => {\n        assert.ok(error);\n        assert.strictEqual(error.code, 'ETELEGRAM');\n        return myBot.stopPolling().then(() => {\n          done();\n        }).catch(done);\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"(webhook) emits \"message\" on receiving message","suites":["TelegramBot","Events"],"updatePoint":{"line":190,"column":54,"index":5935},"line":190,"code":"    it('(webhook) emits \"message\" on receiving message', function test(done) {\n      botWebHook.once('message', () => {\n        return done();\n      });\n      utils.sendWebHookMessage(webHookPort2, TOKEN);\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"(webhook) emits \"webhook_error\" if could not parse webhook request body","suites":["TelegramBot","Events"],"updatePoint":{"line":196,"column":79,"index":6174},"line":196,"code":"    it('(webhook) emits \"webhook_error\" if could not parse webhook request body', function test(done) {\n      botWebHook.once('webhook_error', error => {\n        assert.ok(error);\n        assert.strictEqual(error.code, 'EPARSE');\n        return done();\n      });\n      utils.sendWebHookMessage(webHookPort2, TOKEN, {\n        update: 'unparseable!',\n        json: false\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"returns 200 OK for health endpoint","suites":["TelegramBot","WebHook"],"updatePoint":{"line":209,"column":42,"index":6578},"line":209,"code":"    it('returns 200 OK for health endpoint', function test(done) {\n      utils.sendWebHookRequest(webHookPort2, '/healthz').then(resp => {\n        assert.strictEqual(resp, 'OK');\n        return done();\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"returns 401 error if token is wrong","suites":["TelegramBot","WebHook"],"updatePoint":{"line":215,"column":43,"index":6799},"line":215,"code":"    it('returns 401 error if token is wrong', function test(done) {\n      utils.sendWebHookMessage(webHookPort2, 'wrong-token').catch(resp => {\n        assert.strictEqual(resp.statusCode, 401);\n        return done();\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"only accepts POST method","suites":["TelegramBot","WebHook"],"updatePoint":{"line":221,"column":32,"index":7023},"line":221,"code":"    it('only accepts POST method', function test() {\n      const methods = ['GET', 'PUT', 'DELETE', 'OPTIONS'];\n      return Promise.all(methods, method => {\n        return utils.sendWebHookMessage(webHookPort2, TOKEN, {\n          method\n        }).then(() => {\n          throw new Error(`expected error with webhook ${method} request`);\n        }).catch(resp => {\n          if (!resp.statusCode) throw resp;\n          if (resp.statusCode !== 418) throw new Error(`unexpected error: ${resp.body}`);\n        });\n      }); // Promise.each\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"is enabled, through options.key and options.cert","suites":["TelegramBot","WebHook HTTPS"],"updatePoint":{"line":241,"column":56,"index":7788},"line":241,"code":"    it('is enabled, through options.key and options.cert', function test() {\n      httpsbot = new TelegramBot(TOKEN, {\n        webHook: {\n          port,\n          key,\n          cert\n        }\n      });\n      return utils.sendWebHookMessage(port, TOKEN, {\n        https: true\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"is enabled, through options.pfx","suites":["TelegramBot","WebHook HTTPS"],"updatePoint":{"line":253,"column":39,"index":8066},"line":253,"code":"    it('is enabled, through options.pfx');","file":"telegram.js","skipped":false,"dir":"test"},{"name":"is enabled, through options.https","suites":["TelegramBot","WebHook HTTPS"],"updatePoint":{"line":254,"column":41,"index":8111},"line":254,"code":"    it('is enabled, through options.https', function test() {\n      httpsbot = new TelegramBot(TOKEN, {\n        webHook: {\n          port,\n          https: {\n            key: fs.readFileSync(key),\n            cert: fs.readFileSync(cert)\n          }\n        }\n      });\n      return utils.sendWebHookMessage(port, TOKEN, {\n        https: true\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"FatalError is thrown if token is missing","suites":["TelegramBot","errors"],"updatePoint":{"line":273,"column":48,"index":8650},"line":273,"code":"    it('FatalError is thrown if token is missing', function test() {\n      const myBot = new TelegramBot(null);\n      return myBot.sendMessage(USERID, 'text').catch(error => {\n        // FIX: assert.ok(error instanceof TelegramBot.errors.FatalError);\n        assert.strictEqual(error.code, 'EFATAL');\n        assert.ok(error.message.indexOf('not provided') > -1);\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"FatalError is thrown if file-type of Buffer could not be determined","suites":["TelegramBot","errors"],"updatePoint":{"line":281,"column":75,"index":9059},"line":281,"code":"    it('FatalError is thrown if file-type of Buffer could not be determined', function test() {\n      let buffer;\n\n      try {\n        buffer = Buffer.from('12345');\n      } catch (ex) {\n        buffer = new Buffer('12345');\n      }\n\n      return bot.sendPhoto(USERID, buffer).catch(error => {\n        // FIX: assert.ok(error instanceof TelegramBot.errors.FatalError);\n        assert.strictEqual(error.code, 'EFATAL');\n        assert.ok(error.message.indexOf('Unsupported') > -1);\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"FatalError is thrown on network error","suites":["TelegramBot","errors"],"updatePoint":{"line":296,"column":45,"index":9528},"line":296,"code":"    it('FatalError is thrown on network error', function test() {\n      const myBot = new TelegramBot('useless-token', {\n        baseApiUrl: 'http://localhost:23' // are we sure this port is not bound to?\n\n      });\n      return myBot.getMe().catch(error => {\n        // FIX: assert.ok(error instanceof TelegramBot.errors.FatalError);\n        assert.strictEqual(error.code, 'EFATAL');\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"ParseError is thrown if response body could not be parsed","suites":["TelegramBot","errors"],"updatePoint":{"line":306,"column":65,"index":9951},"line":306,"code":"    it('ParseError is thrown if response body could not be parsed', function test() {\n      botParse.sendMessage(USERID, 'text').catch(error => {\n        // FIX: assert.ok(error instanceof TelegramBot.errors.ParseError);\n        assert.strictEqual(error.code, 'EPARSE');\n        assert.ok(typeof error.response === 'object');\n        assert.ok(typeof error.response.body === 'string');\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"TelegramError is thrown if error is from Telegram","suites":["TelegramBot","errors"],"updatePoint":{"line":314,"column":57,"index":10347},"line":314,"code":"    it('TelegramError is thrown if error is from Telegram', function test() {\n      return bot.sendMessage('404', 'text').catch(error => {\n        // FIX: assert.ok(error instanceof TelegramBot.errors.TelegramError);\n        assert.strictEqual(error.code, 'ETELEGRAM');\n        assert.ok(typeof error.response === 'object');\n        assert.ok(typeof error.response.body === 'object');\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"initiates polling","suites":["TelegramBot","#startPolling"],"updatePoint":{"line":324,"column":25,"index":10782},"line":324,"code":"    it('initiates polling', function test() {\n      return testbot.startPolling().then(() => {\n        return utils.isPollingMockServer(pollingPort);\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"returns error if using webhook","suites":["TelegramBot","#startPolling"],"updatePoint":{"line":329,"column":38,"index":10963},"line":329,"code":"    it('returns error if using webhook', function test() {\n      return botWebHook.startPolling().catch(err => {\n        // TODO: check for error in a better way\n        // FIX: assert.ok(err instanceof TelegramBot.errors.FatalError);\n        assert.strictEqual(err.code, 'EFATAL');\n        assert.ok(err.message.indexOf('mutually exclusive') !== -1);\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"returns true if bot is polling","suites":["TelegramBot","#isPolling"],"updatePoint":{"line":339,"column":38,"index":11392},"line":339,"code":"    it('returns true if bot is polling', function test() {\n      assert.strictEqual(testbot.isPolling(), true);\n      return utils.isPollingMockServer(pollingPort);\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"returns false if bot is not polling","suites":["TelegramBot","#isPolling"],"updatePoint":{"line":343,"column":43,"index":11570},"line":343,"code":"    it('returns false if bot is not polling', function test() {\n      return testbot.stopPolling().then(() => {\n        assert.strictEqual(testbot.isPolling(), false);\n        utils.clearPollingCheck(pollingPort);\n        return utils.isPollingMockServer(pollingPort, true);\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"stops polling by bot","suites":["TelegramBot","#stopPolling"],"updatePoint":{"line":355,"column":28,"index":11984},"line":355,"code":"    it('stops polling by bot', function test() {\n      return testbot.stopPolling().then(() => {\n        utils.clearPollingCheck(pollingPort);\n        return utils.isPollingMockServer(pollingPort, true);\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"opens webhook","suites":["TelegramBot","#openWebHook"],"updatePoint":{"line":363,"column":21,"index":12262},"line":363,"code":"    it('opens webhook', function test() {\n      return testbot.openWebHook().then(() => {\n        return utils.hasOpenWebHook(webHookPort);\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"returns error if using polling","suites":["TelegramBot","#openWebHook"],"updatePoint":{"line":368,"column":38,"index":12437},"line":368,"code":"    it('returns error if using polling', function test() {\n      return botPolling.openWebHook().catch(err => {\n        // TODO: check for error in a better way\n        // FIX: assert.ok(err instanceof TelegramBot.errors.FatalError);\n        assert.strictEqual(err.code, 'EFATAL');\n        assert.ok(err.message.indexOf('mutually exclusive') !== -1);\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"returns true if webhook is opened","suites":["TelegramBot","#hasOpenWebHook"],"updatePoint":{"line":378,"column":41,"index":12878},"line":378,"code":"    it('returns true if webhook is opened', function test() {\n      assert.strictEqual(testbot.hasOpenWebHook(), true);\n      return utils.hasOpenWebHook(webHookPort);\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"returns false if webhook is closed","suites":["TelegramBot","#hasOpenWebHook"],"updatePoint":{"line":382,"column":42,"index":13055},"line":382,"code":"    it('returns false if webhook is closed', function test() {\n      testbot.closeWebHook().then(() => {\n        assert.strictEqual(testbot.hasOpenWebHook(), false);\n        return utils.hasOpenWebHook(webHookPort, true);\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"closes webhook","suites":["TelegramBot","#closeWebHook"],"updatePoint":{"line":393,"column":22,"index":13413},"line":393,"code":"    it('closes webhook', function test() {\n      testbot.closeWebHook().then(() => {\n        return utils.hasOpenWebHook(webHookPort, true);\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should set a webHook","suites":["TelegramBot","#setWebHook"],"updatePoint":{"line":403,"column":28,"index":13732},"line":403,"code":"    it('should set a webHook', function test() {\n      return bot.setWebHook(ip, {}).then(resp => {\n        assert.strictEqual(resp, true);\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should set a webHook with certificate","suites":["TelegramBot","#setWebHook"],"updatePoint":{"line":408,"column":45,"index":13907},"line":408,"code":"    it('should set a webHook with certificate', function test() {\n      return bot.setWebHook(ip, {\n        certificate: cert\n      }).then(resp => {\n        assert.strictEqual(resp, true);\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"(v0.25.0 and lower) should set a webHook with certificate","suites":["TelegramBot","#setWebHook"],"updatePoint":{"line":415,"column":65,"index":14135},"line":415,"code":"    it('(v0.25.0 and lower) should set a webHook with certificate', function test() {\n      return bot.setWebHook(ip, cert).then(resp => {\n        assert.strictEqual(resp, true);\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should delete the webHook","suites":["TelegramBot","#setWebHook"],"updatePoint":{"line":420,"column":33,"index":14300},"line":420,"code":"    it('should delete the webHook', function test() {\n      return bot.setWebHook('', {}).then(resp => {\n        assert.strictEqual(resp, true);\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should return WebhookInfo","suites":["TelegramBot","#getWebHookInfo"],"updatePoint":{"line":430,"column":33,"index":14629},"line":430,"code":"    it('should return WebhookInfo', function test() {\n      return bot.getWebHookInfo().then(resp => {\n        assert.ok(is.object(resp));\n        assert.ok(is.boolean(resp.has_custom_certificate));\n        assert.ok(is.number(resp.pending_update_count));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should delete webhook","suites":["TelegramBot","#deleteWebHook"],"updatePoint":{"line":442,"column":29,"index":15062},"line":442,"code":"    it('should delete webhook', function test() {\n      return bot.deleteWebHook().then(resp => {\n        assert.strictEqual(resp, true);\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should return an Array","suites":["TelegramBot","#getUpdates"],"updatePoint":{"line":458,"column":30,"index":15521},"line":458,"code":"    it('should return an Array', function test() {\n      return bot.getUpdates(opts).then(resp => {\n        assert.strictEqual(Array.isArray(resp), true);\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"(v0.25.0 and lower) should return an Array","suites":["TelegramBot","#getUpdates"],"updatePoint":{"line":463,"column":50,"index":15714},"line":463,"code":"    it('(v0.25.0 and lower) should return an Array', function test() {\n      return bot.getUpdates(opts.timeout, opts.limit).then(resp => {\n        assert.strictEqual(Array.isArray(resp), true);\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should return an User object","suites":["TelegramBot","#getMe"],"updatePoint":{"line":473,"column":36,"index":16052},"line":473,"code":"    it('should return an User object', function test() {\n      return bot.getMe().then(resp => {\n        assert.ok(is.object(resp));\n        assert.ok(is.number(resp.id));\n        assert.ok(is.string(resp.first_name));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should get a file link","suites":["TelegramBot","#getFileLink"],"updatePoint":{"line":486,"column":30,"index":16467},"line":486,"code":"    it('should get a file link', function test() {\n      return bot.getFileLink(FILE_ID).then(fileURI => {\n        assert.ok(is.string(fileURI));\n        assert.ok(utils.isTelegramFileURI(fileURI));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should get a file stream","suites":["TelegramBot","#getFileStream"],"updatePoint":{"line":497,"column":32,"index":16872},"line":497,"code":"    it('should get a file stream', function test(done) {\n      const fileStream = bot.getFileStream(FILE_ID);\n      assert.ok(fileStream instanceof stream.Readable);\n      assert.strictEqual(fileStream.path, FILE_ID);\n      fileStream.on('info', info => {\n        assert.ok(info);\n        assert.ok(utils.isTelegramFileURI(info.uri), `${info.uri} is not a file URI`);\n        fileStream.pipe(concat(function readFile(buffer) {\n          buffer.equals(fs.readFileSync(FILE_PATH)); // sync :(\n\n          return done();\n        }));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should download a file","suites":["TelegramBot","#downloadFile"],"updatePoint":{"line":518,"column":30,"index":17643},"line":518,"code":"    it('should download a file', function test() {\n      return bot.downloadFile(FILE_ID, downloadPath).then(filePath => {\n        assert.ok(is.string(filePath));\n        assert.strictEqual(path.dirname(filePath), downloadPath);\n        assert.ok(fs.existsSync(filePath));\n        fs.unlinkSync(filePath); // Delete file after test\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should call `onText` callback on match","suites":["TelegramBot","#onText"],"updatePoint":{"line":528,"column":46,"index":18062},"line":528,"code":"    it('should call `onText` callback on match', function test(done) {\n      const regexp = /\\/onText (.+)/;\n      botWebHook.onText(regexp, (msg, match) => {\n        assert.strictEqual(match[1], 'ECHO ALOHA');\n        assert.ok(botWebHook.removeTextListener(regexp));\n        return done();\n      });\n      utils.sendWebHookMessage(webHookPort2, TOKEN, {\n        message: {\n          text: '/onText ECHO ALOHA'\n        }\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should reset the global regex state with each message","suites":["TelegramBot","#onText"],"updatePoint":{"line":541,"column":61,"index":18517},"line":541,"code":"    it('should reset the global regex state with each message', function test(done) {\n      const regexp = /\\/onText (.+)/g;\n      botWebHook.onText(regexp, () => {\n        assert.strictEqual(regexp.lastIndex, 0);\n        assert.ok(botWebHook.removeTextListener(regexp));\n        return done();\n      });\n      utils.sendWebHookMessage(webHookPort2, TOKEN, {\n        message: {\n          text: '/onText ECHO ALOHA'\n        }\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"removes the right text-listener","suites":["TelegramBot","#removeTextListener"],"updatePoint":{"line":565,"column":39,"index":19235},"line":565,"code":"    it('removes the right text-listener', function test() {\n      bot.onText(regexp, callback);\n      bot.onText(regexp2, callback);\n      const textListener = bot.removeTextListener(regexp);\n      assert.strictEqual(regexp, textListener.regexp);\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"returns `null` if missing","suites":["TelegramBot","#removeTextListener"],"updatePoint":{"line":571,"column":33,"index":19484},"line":571,"code":"    it('returns `null` if missing', function test() {\n      assert.strictEqual(null, bot.removeTextListener(/404/));\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"returns the right reply-listener","suites":["TelegramBot","#removeReplyListener"],"updatePoint":{"line":582,"column":40,"index":19864},"line":582,"code":"    it('returns the right reply-listener', function test() {\n      const id = bot.onReplyToMessage(chatId, messageId, callback);\n      const replyListener = bot.removeReplyListener(id);\n      assert.strictEqual(id, replyListener.id);\n      assert.strictEqual(chatId, replyListener.chatId);\n      assert.strictEqual(messageId, replyListener.messageId);\n      assert.strictEqual(callback, replyListener.callback);\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"returns `null` if missing","suites":["TelegramBot","#removeReplyListener"],"updatePoint":{"line":590,"column":33,"index":20277},"line":590,"code":"    it('returns `null` if missing', function test() {\n      // NOTE: '0' is never a valid reply listener ID :)\n      assert.strictEqual(null, bot.removeReplyListener(0));\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should send a message","suites":["TelegramBot","#sendMessage"],"updatePoint":{"line":603,"column":29,"index":20752},"line":603,"code":"    it('should send a message', function test() {\n      return bot.sendMessage(USERID, 'test').then(resp => {\n        assert.ok(is.object(resp));\n        assert.ok(is.number(resp.message_id));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should forward a message","suites":["TelegramBot","#forwardMessage"],"updatePoint":{"line":615,"column":32,"index":21187},"line":615,"code":"    it('should forward a message', function test() {\n      return bot.sendMessage(USERID, 'test').then(resp => {\n        const messageId = resp.message_id;\n        return bot.forwardMessage(USERID, USERID, messageId).then(forwarded => {\n          assert.ok(is.object(forwarded));\n          assert.ok(is.number(forwarded.message_id));\n        });\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should send copy of a message","suites":["TelegramBot","#copyMessage"],"updatePoint":{"line":630,"column":37,"index":21768},"line":630,"code":"    it('should send copy of a message', function test() {\n      return bot.sendMessage(USERID, 'test').then(resp => {\n        const messageId = resp.message_id;\n        return bot.copyMessage(USERID, USERID, messageId).then(copy => {\n          assert.ok(is.object(copy));\n          assert.ok(is.number(copy.message_id));\n        });\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should send a photo from file","suites":["TelegramBot","#sendPhoto"],"updatePoint":{"line":646,"column":37,"index":22314},"line":646,"code":"    it('should send a photo from file', function test() {\n      const photo = `${__dirname}/data/photo.png`;\n      return bot.sendPhoto(USERID, photo).then(resp => {\n        assert.ok(is.object(resp));\n        assert.ok(is.array(resp.photo));\n        photoId = resp.photo[0].file_id;\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should send a photo from id","suites":["TelegramBot","#sendPhoto"],"updatePoint":{"line":654,"column":35,"index":22614},"line":654,"code":"    it('should send a photo from id', function test() {\n      // Send the same photo as before\n      const photo = photoId;\n      return bot.sendPhoto(USERID, photo).then(resp => {\n        assert.ok(is.object(resp));\n        assert.ok(is.array(resp.photo));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should send a photo from fs.readStream","suites":["TelegramBot","#sendPhoto"],"updatePoint":{"line":662,"column":46,"index":22901},"line":662,"code":"    it('should send a photo from fs.readStream', function test() {\n      const photo = fs.createReadStream(`${__dirname}/data/photo.png`);\n      return bot.sendPhoto(USERID, photo).then(resp => {\n        assert.ok(is.object(resp));\n        assert.ok(is.array(resp.photo));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should send a photo from request Stream","suites":["TelegramBot","#sendPhoto"],"updatePoint":{"line":669,"column":47,"index":23193},"line":669,"code":"    it('should send a photo from request Stream', function test() {\n      const photo = request(`${staticUrl}/photo.png`);\n      return bot.sendPhoto(USERID, photo).then(resp => {\n        assert.ok(is.object(resp));\n        assert.ok(is.array(resp.photo));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should send a photo from a Buffer","suites":["TelegramBot","#sendPhoto"],"updatePoint":{"line":676,"column":41,"index":23462},"line":676,"code":"    it('should send a photo from a Buffer', function test() {\n      const photo = fs.readFileSync(`${__dirname}/data/photo.png`);\n      return bot.sendPhoto(USERID, photo).then(resp => {\n        assert.ok(is.object(resp));\n        assert.ok(is.array(resp.photo));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should send an MP3 audio","suites":["TelegramBot","#sendAudio"],"updatePoint":{"line":690,"column":32,"index":23930},"line":690,"code":"    it('should send an MP3 audio', function test() {\n      const audio = `${__dirname}/data/audio.mp3`;\n      return bot.sendAudio(USERID, audio).then(resp => {\n        assert.ok(is.object(resp));\n        assert.ok(is.object(resp.audio));\n        audioId = resp.audio.file_id;\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should send an audio from id","suites":["TelegramBot","#sendAudio"],"updatePoint":{"line":698,"column":36,"index":24229},"line":698,"code":"    it('should send an audio from id', function test() {\n      // Send the same audio as before\n      const audio = audioId;\n      return bot.sendAudio(USERID, audio).then(resp => {\n        assert.ok(is.object(resp));\n        assert.ok(is.object(resp.audio));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should send an audio from fs.readStream","suites":["TelegramBot","#sendAudio"],"updatePoint":{"line":706,"column":47,"index":24518},"line":706,"code":"    it('should send an audio from fs.readStream', function test() {\n      const audio = fs.createReadStream(`${__dirname}/data/audio.mp3`);\n      return bot.sendAudio(USERID, audio).then(resp => {\n        assert.ok(is.object(resp));\n        assert.ok(is.object(resp.audio));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should send an audio from request Stream","suites":["TelegramBot","#sendAudio"],"updatePoint":{"line":713,"column":48,"index":24812},"line":713,"code":"    it('should send an audio from request Stream', function test() {\n      const audio = request(`${staticUrl}/audio.mp3`);\n      return bot.sendAudio(USERID, audio).then(resp => {\n        assert.ok(is.object(resp));\n        assert.ok(is.object(resp.audio));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should send an audio from a Buffer","suites":["TelegramBot","#sendAudio"],"updatePoint":{"line":720,"column":42,"index":25083},"line":720,"code":"    it('should send an audio from a Buffer', function test() {\n      const audio = fs.readFileSync(`${__dirname}/data/audio.mp3`);\n      return bot.sendAudio(USERID, audio).then(resp => {\n        assert.ok(is.object(resp));\n        assert.ok(is.object(resp.audio));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should send an audio file with thumb","suites":["TelegramBot","#sendAudio"],"updatePoint":{"line":727,"column":44,"index":25369},"line":727,"code":"    it('should send an audio file with thumb', function test() {\n      const audio = `${__dirname}/data/audio.mp3`;\n      const thumbImg = `attach://${__dirname}/data/sticker_thumb.png`;\n      return bot.sendAudio(USERID, audio, {\n        thumb: thumbImg\n      }).then(resp => {\n        assert.ok(is.object(resp));\n        assert.ok(is.object(resp.audio));\n        assert.ok(is.object(resp.audio.thumb));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should send a document from file","suites":["TelegramBot","#sendDocument"],"updatePoint":{"line":745,"column":40,"index":25995},"line":745,"code":"    it('should send a document from file', function test() {\n      const document = `${__dirname}/data/photo.gif`;\n      return bot.sendDocument(USERID, document).then(resp => {\n        assert.ok(is.object(resp));\n        assert.ok(is.object(resp.document));\n        documentId = resp.document.file_id;\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should send a document from id","suites":["TelegramBot","#sendDocument"],"updatePoint":{"line":753,"column":38,"index":26314},"line":753,"code":"    it('should send a document from id', function test() {\n      // Send the same document as before\n      const document = documentId;\n      return bot.sendDocument(USERID, document).then(resp => {\n        assert.ok(is.object(resp));\n        assert.ok(is.object(resp.document));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should send a document from fs.readStream","suites":["TelegramBot","#sendDocument"],"updatePoint":{"line":761,"column":49,"index":26623},"line":761,"code":"    it('should send a document from fs.readStream', function test() {\n      const document = fs.createReadStream(`${__dirname}/data/photo.gif`);\n      return bot.sendDocument(USERID, document).then(resp => {\n        assert.ok(is.object(resp));\n        assert.ok(is.object(resp.document));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should send a document from request Stream","suites":["TelegramBot","#sendDocument"],"updatePoint":{"line":768,"column":50,"index":26931},"line":768,"code":"    it('should send a document from request Stream', function test() {\n      const document = request(`${staticUrl}/photo.gif`);\n      return bot.sendDocument(USERID, document).then(resp => {\n        assert.ok(is.object(resp));\n        assert.ok(is.object(resp.document));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should send a document from a Buffer","suites":["TelegramBot","#sendDocument"],"updatePoint":{"line":775,"column":44,"index":27216},"line":775,"code":"    it('should send a document from a Buffer', function test() {\n      const document = fs.readFileSync(`${__dirname}/data/photo.gif`);\n      return bot.sendDocument(USERID, document).then(resp => {\n        assert.ok(is.object(resp));\n        assert.ok(is.object(resp.document));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should send a video from file","suites":["TelegramBot","#sendVideo"],"updatePoint":{"line":789,"column":37,"index":27702},"line":789,"code":"    it('should send a video from file', function test() {\n      const video = `${__dirname}/data/video.mp4`;\n      return bot.sendVideo(USERID, video).then(resp => {\n        assert.ok(is.object(resp));\n        assert.ok(is.object(resp.video));\n        videoId = resp.video.file_id;\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should send a video from id","suites":["TelegramBot","#sendVideo"],"updatePoint":{"line":797,"column":35,"index":28000},"line":797,"code":"    it('should send a video from id', function test() {\n      // Send the same video as before\n      return bot.sendVideo(USERID, videoId).then(resp => {\n        assert.ok(is.object(resp));\n        assert.ok(is.object(resp.video));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should send a video from fs.readStream","suites":["TelegramBot","#sendVideo"],"updatePoint":{"line":804,"column":46,"index":28261},"line":804,"code":"    it('should send a video from fs.readStream', function test() {\n      const video = fs.createReadStream(`${__dirname}/data/video.mp4`);\n      return bot.sendVideo(USERID, video).then(resp => {\n        assert.ok(is.object(resp));\n        assert.ok(is.object(resp.video));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should send a video from request Stream","suites":["TelegramBot","#sendVideo"],"updatePoint":{"line":811,"column":47,"index":28554},"line":811,"code":"    it('should send a video from request Stream', function test() {\n      const video = request(`${staticUrl}/video.mp4`);\n      return bot.sendVideo(USERID, video).then(resp => {\n        assert.ok(is.object(resp));\n        assert.ok(is.object(resp.video));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should send a video from a Buffer","suites":["TelegramBot","#sendVideo"],"updatePoint":{"line":818,"column":41,"index":28824},"line":818,"code":"    it('should send a video from a Buffer', function test() {\n      const video = fs.readFileSync(`${__dirname}/data/video.mp4`);\n      return bot.sendVideo(USERID, video).then(resp => {\n        assert.ok(is.object(resp));\n        assert.ok(is.object(resp.video));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should send a gif as an animation","suites":["TelegramBot","#sendAnimation"],"updatePoint":{"line":830,"column":41,"index":29270},"line":830,"code":"    it('should send a gif as an animation', function test() {\n      return bot.sendAnimation(USERID, `${__dirname}/data/photo.gif`).then(resp => {\n        assert.ok(is.object(resp));\n        assert.ok(is.object(resp.document));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should send a voice from file","suites":["TelegramBot","#sendVoice"],"updatePoint":{"line":843,"column":37,"index":29707},"line":843,"code":"    it('should send a voice from file', function test() {\n      const voice = `${__dirname}/data/voice.ogg`;\n      return bot.sendVoice(USERID, voice).then(resp => {\n        assert.ok(is.object(resp));\n        assert.ok(is.object(resp.voice));\n        voiceId = resp.voice.file_id;\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should send a voice from id","suites":["TelegramBot","#sendVoice"],"updatePoint":{"line":851,"column":35,"index":30005},"line":851,"code":"    it('should send a voice from id', function test() {\n      // Send the same voice as before\n      return bot.sendVoice(USERID, voiceId).then(resp => {\n        assert.ok(is.object(resp));\n        assert.ok(is.object(resp.voice));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should send a voice from fs.readStream","suites":["TelegramBot","#sendVoice"],"updatePoint":{"line":858,"column":46,"index":30266},"line":858,"code":"    it('should send a voice from fs.readStream', function test() {\n      const voice = fs.createReadStream(`${__dirname}/data/voice.ogg`);\n      return bot.sendVoice(USERID, voice).then(resp => {\n        assert.ok(is.object(resp));\n        assert.ok(is.object(resp.voice));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should send a voice from request Stream","suites":["TelegramBot","#sendVoice"],"updatePoint":{"line":865,"column":47,"index":30559},"line":865,"code":"    it('should send a voice from request Stream', function test() {\n      const voice = request(`${staticUrl}/voice.ogg`);\n      return bot.sendVoice(USERID, voice).then(resp => {\n        assert.ok(is.object(resp));\n        assert.ok(is.object(resp.voice));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should send a voice from a Buffer","suites":["TelegramBot","#sendVoice"],"updatePoint":{"line":872,"column":41,"index":30829},"line":872,"code":"    it('should send a voice from a Buffer', function test() {\n      const voice = fs.readFileSync(`${__dirname}/data/voice.ogg`);\n      return bot.sendVoice(USERID, voice).then(resp => {\n        assert.ok(is.object(resp));\n        assert.ok(is.object(resp.voice));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should send a video from file","suites":["TelegramBot","#sendVideoNote"],"updatePoint":{"line":886,"column":37,"index":31319},"line":886,"code":"    it('should send a video from file', function test() {\n      const video = `${__dirname}/data/video.mp4`;\n      return bot.sendVideoNote(USERID, video, {\n        length: 5\n      }).then(resp => {\n        assert.ok(is.object(resp));\n        assert.ok(is.object(resp.video));\n        videoNoteId = resp.video.file_id;\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should send a video from id","suites":["TelegramBot","#sendVideoNote"],"updatePoint":{"line":896,"column":35,"index":31654},"line":896,"code":"    it('should send a video from id', function test() {\n      // Send the same videonote as before\n      assert.ok(videoNoteId);\n      return bot.sendVideoNote(USERID, videoNoteId, {\n        length: 5\n      }).then(resp => {\n        assert.ok(is.object(resp));\n        assert.ok(is.object(resp.video));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should send a video from fs.readStream","suites":["TelegramBot","#sendVideoNote"],"updatePoint":{"line":906,"column":46,"index":31986},"line":906,"code":"    it('should send a video from fs.readStream', function test() {\n      const video = fs.createReadStream(`${__dirname}/data/video.mp4`);\n      return bot.sendVideoNote(USERID, video, {\n        length: 5\n      }).then(resp => {\n        assert.ok(is.object(resp));\n        assert.ok(is.object(resp.video));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should send a video from a Buffer","suites":["TelegramBot","#sendVideoNote"],"updatePoint":{"line":915,"column":41,"index":32306},"line":915,"code":"    it('should send a video from a Buffer', function test() {\n      const video = fs.readFileSync(`${__dirname}/data/video.mp4`);\n      return bot.sendVideoNote(USERID, video, {\n        length: 5\n      }).then(resp => {\n        assert.ok(is.object(resp));\n        assert.ok(is.object(resp.video));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should send group of photos/videos as album","suites":["TelegramBot","#sendMediaGroup"],"updatePoint":{"line":929,"column":51,"index":32798},"line":929,"code":"    it('should send group of photos/videos as album', function test() {\n      return bot.sendMediaGroup(USERID, [{\n        type: 'photo',\n        media: `${__dirname}/data/photo.png`\n      }, {\n        type: 'video',\n        media: `${__dirname}/data/video.mp4`\n      }, {\n        type: 'photo',\n        media: FILE_ID\n      }], {\n        disable_notification: true\n      }).then(resp => {\n        assert.ok(is.array(resp));\n        assert.strictEqual(resp.length, 3);\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should send a location","suites":["TelegramBot","#sendLocation"],"updatePoint":{"line":951,"column":30,"index":33424},"line":951,"code":"    it('should send a location', function test() {\n      return bot.sendLocation(USERID, lat, long).then(resp => {\n        assert.ok(is.object(resp));\n        assert.ok(is.object(resp.location));\n        assert.ok(is.number(resp.location.latitude));\n        assert.ok(is.number(resp.location.longitude));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"edits live location","suites":["TelegramBot","#editMessageLiveLocation"],"updatePoint":{"line":971,"column":27,"index":34115},"line":971,"code":"    it('edits live location', function test() {\n      const opts = {\n        chat_id: USERID,\n        message_id: message.message_id\n      };\n      return bot.editMessageLiveLocation(lat + 1, long + 1, opts).then(resp => {\n        assert.ok(is.object(resp));\n        assert.ok(is.object(resp.location));\n        assert.ok(is.number(resp.location.latitude));\n        assert.ok(is.number(resp.location.longitude));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"stops location updates","suites":["TelegramBot","#stopMessageLiveLocation"],"updatePoint":{"line":994,"column":30,"index":34900},"line":994,"code":"    it('stops location updates', function test() {\n      const opts = {\n        chat_id: USERID,\n        message_id: message.message_id\n      };\n      return bot.stopMessageLiveLocation(opts).then(resp => {\n        assert.ok(is.object(resp));\n        assert.ok(is.object(resp.location));\n        assert.ok(is.number(resp.location.latitude));\n        assert.ok(is.number(resp.location.longitude));\n      });\n    });","file":"telegram.js","skipped":true,"dir":"test"},{"name":"should send a venue","suites":["TelegramBot","#sendVenue"],"updatePoint":{"line":1011,"column":27,"index":35463},"line":1011,"code":"    it('should send a venue', function test() {\n      const title = 'The Village Shopping Centre';\n      const address = '430 Topsail Rd,St. John\\'s, NL A1E 4N1, Canada';\n      return bot.sendVenue(USERID, lat, long, title, address).then(resp => {\n        assert.ok(is.object(resp));\n        assert.ok(is.object(resp.venue));\n        assert.ok(is.object(resp.venue.location));\n        assert.ok(is.number(resp.venue.location.latitude));\n        assert.ok(is.number(resp.venue.location.longitude));\n        assert.ok(is.string(resp.venue.title));\n        assert.ok(is.string(resp.venue.address));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should send a contact","suites":["TelegramBot","#sendContact"],"updatePoint":{"line":1035,"column":29,"index":36595},"line":1035,"code":"    it('should send a contact', function test() {\n      const phoneNumber = '+1(000)000-000';\n      const firstName = 'John Doe';\n      return bot.sendContact(USERID, phoneNumber, firstName).then(resp => {\n        assert.ok(is.object(resp));\n        assert.ok(is.object(resp.contact));\n        assert.ok(is.string(resp.contact.phone_number));\n        assert.ok(is.string(resp.contact.first_name));\n      });\n    });","file":"telegram.js","skipped":true,"dir":"test"},{"name":"should send a Poll","suites":["TelegramBot","#sendPoll"],"updatePoint":{"line":1047,"column":26,"index":37065},"line":1047,"code":"    it('should send a Poll', function test() {\n      const question = '¿Are you okey?';\n      const answers = ['Yes', 'No'];\n      const opts = {\n        is_anonymous: true\n      };\n      return bot.sendPoll(GROUPID, question, answers, opts).then(resp => {\n        assert.ok(is.object(resp));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should send a Quiz","suites":["TelegramBot","#sendPoll"],"updatePoint":{"line":1057,"column":26,"index":37376},"line":1057,"code":"    it('should send a Quiz', function test() {\n      const question = '¿Are you okey?';\n      const answers = ['Yes', 'No'];\n      const opts = {\n        is_anonymous: true,\n        type: 'quiz',\n        correct_option_id: 0\n      };\n      return bot.sendPoll(GROUPID, question, answers, opts).then(resp => {\n        assert.ok(is.object(resp));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should send a Dice","suites":["TelegramBot","#sendDice"],"updatePoint":{"line":1071,"column":26,"index":37796},"line":1071,"code":"    it('should send a Dice', function test() {\n      return bot.sendDice(GROUPID).then(resp => {\n        assert.ok(is.object(resp));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should send a Dart","suites":["TelegramBot","#sendDice"],"updatePoint":{"line":1076,"column":26,"index":37947},"line":1076,"code":"    it('should send a Dart', function test() {\n      const opts = {\n        emoji: '🎯'\n      };\n      return bot.sendDice(GROUPID, opts).then(resp => {\n        assert.ok(is.object(resp));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should send a chat action","suites":["TelegramBot","#sendChatAction"],"updatePoint":{"line":1089,"column":33,"index":38327},"line":1089,"code":"    it('should send a chat action', function test() {\n      const action = 'typing';\n      return bot.sendChatAction(USERID, action).then(resp => {\n        assert.strictEqual(resp, true);\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should get user profile photos","suites":["TelegramBot","#getUserProfilePhotos"],"updatePoint":{"line":1104,"column":38,"index":38780},"line":1104,"code":"    it('should get user profile photos', function test() {\n      return bot.getUserProfilePhotos(USERID, opts).then(resp => {\n        assert.ok(is.object(resp));\n        assert.ok(is.number(resp.total_count));\n        assert.ok(is.array(resp.photos));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"(v0.25.0 and lower) should get user profile photos","suites":["TelegramBot","#getUserProfilePhotos"],"updatePoint":{"line":1111,"column":58,"index":39070},"line":1111,"code":"    it('(v0.25.0 and lower) should get user profile photos', function test() {\n      return bot.getUserProfilePhotos(USERID, opts.offset, opts.limit).then(resp => {\n        assert.ok(is.object(resp));\n        assert.ok(is.number(resp.total_count));\n        assert.ok(is.array(resp.photos));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should get a file","suites":["TelegramBot","#getFile"],"updatePoint":{"line":1124,"column":25,"index":39518},"line":1124,"code":"    it('should get a file', function test() {\n      return bot.getFile(FILE_ID).then(resp => {\n        assert.ok(is.object(resp));\n        assert.ok(is.string(resp.file_path));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should set chat permissions","suites":["TelegramBot","#setChatAdministratorCustomTitle "],"updatePoint":{"line":1136,"column":35,"index":40130},"line":1136,"code":"    it('should set chat permissions', function test() {\n      return bot.setChatAdministratorCustomTitle(GROUPID, USERID, 'Custom Name').then(resp => {\n        assert.ok(is.boolean(resp));\n      });\n    });","file":"telegram.js","skipped":true,"dir":"test"},{"name":"should set chat permissions","suites":["TelegramBot","#setChatPermissions "],"updatePoint":{"line":1145,"column":35,"index":40571},"line":1145,"code":"    it('should set chat permissions', function test() {\n      const ChatPermissions = {\n        can_send_messages: true,\n        can_send_media_messages: true,\n        can_send_polls: false,\n        can_send_other_messages: false,\n        can_add_web_page_previews: true,\n        can_change_info: false,\n        can_invite_users: false,\n        can_pin_messages: true\n      };\n      return bot.setChatPermissions(GROUPID, ChatPermissions).then(resp => {\n        assert.ok(is.boolean(resp));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should export the group invite link","suites":["TelegramBot","#exportChatInviteLink"],"updatePoint":{"line":1165,"column":43,"index":41272},"line":1165,"code":"    it('should export the group invite link', function test() {\n      return bot.exportChatInviteLink(GROUPID).then(resp => {\n        assert(resp.match(/^https:\\/\\/t\\.me\\/.+$/i), 'is a telegram invite link');\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should create a chat invite link","suites":["TelegramBot","#createChatInviteLink"],"updatePoint":{"line":1178,"column":40,"index":41826},"line":1178,"code":"    it('should create a chat invite link', function test() {\n      return bot.createChatInviteLink(GROUPID).then(resp => {\n        assert(resp.invite_link.match(/^https:\\/\\/t\\.me\\/.+$/i), 'is a telegram invite link');\n        inviteLink = resp.invite_link;\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should edit chat invite link","suites":["TelegramBot","#createChatInviteLink"],"updatePoint":{"line":1184,"column":36,"index":42097},"line":1184,"code":"    it('should edit chat invite link', function test() {\n      return bot.editChatInviteLink(GROUPID, inviteLink, {\n        member_limit: 3\n      }).then(resp => {\n        assert.strictEqual(resp.member_limit, 3);\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should revoke chat invite link","suites":["TelegramBot","#createChatInviteLink"],"updatePoint":{"line":1191,"column":38,"index":42331},"line":1191,"code":"    it('should revoke chat invite link', function test() {\n      return bot.revokeChatInviteLink(GROUPID, inviteLink).then(resp => {\n        assert.strictEqual(resp.is_revoked, true);\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should set a chat photo from file","suites":["TelegramBot","#setChatPhoto"],"updatePoint":{"line":1204,"column":41,"index":42897},"line":1204,"code":"    it('should set a chat photo from file', function test() {\n      const photo = `${__dirname}/data/chat_photo.png`;\n      return bot.setChatPhoto(GROUPID, photo).then(resp => {\n        assert.strictEqual(resp, true);\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should set a chat photo from fs.readStream","suites":["TelegramBot","#setChatPhoto"],"updatePoint":{"line":1210,"column":50,"index":43143},"line":1210,"code":"    it('should set a chat photo from fs.readStream', function test() {\n      const photo = fs.createReadStream(`${__dirname}/data/chat_photo.png`);\n      return bot.setChatPhoto(GROUPID, photo).then(resp => {\n        assert.strictEqual(resp, true);\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should set a chat photo from request Stream","suites":["TelegramBot","#setChatPhoto"],"updatePoint":{"line":1216,"column":51,"index":43411},"line":1216,"code":"    it('should set a chat photo from request Stream', function test() {\n      const photo = request(`${staticUrl}/chat_photo.png`);\n      return bot.setChatPhoto(GROUPID, photo).then(resp => {\n        assert.strictEqual(resp, true);\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should set a chat photo from a Buffer","suites":["TelegramBot","#setChatPhoto"],"updatePoint":{"line":1222,"column":45,"index":43656},"line":1222,"code":"    it('should set a chat photo from a Buffer', function test() {\n      const photo = fs.readFileSync(`${__dirname}/data/chat_photo.png`);\n      return bot.setChatPhoto(GROUPID, photo).then(resp => {\n        assert.strictEqual(resp, true);\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should delete the chat photo","suites":["TelegramBot","#deleteChatPhoto"],"updatePoint":{"line":1233,"column":36,"index":44074},"line":1233,"code":"    it('should delete the chat photo', function test() {\n      return bot.deleteChatPhoto(GROUPID).then(resp => {\n        assert.strictEqual(resp, true);\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should set the chat title","suites":["TelegramBot","#setChatTitle"],"updatePoint":{"line":1243,"column":33,"index":44403},"line":1243,"code":"    it('should set the chat title', function test() {\n      const random = Math.floor(Math.random() * 1000);\n      return bot.setChatTitle(GROUPID, `ntba test group (random: ${random})`).then(resp => {\n        assert.strictEqual(resp, true);\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should set the chat description","suites":["TelegramBot","#setChatDescription"],"updatePoint":{"line":1254,"column":39,"index":44847},"line":1254,"code":"    it('should set the chat description', function test() {\n      const random = Math.floor(Math.random() * 1000);\n      const description = `node-telegram-bot-api test group (random: ${random})`;\n      return bot.setChatDescription(GROUPID, description).then(resp => {\n        assert.strictEqual(resp, true);\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should pin chat message","suites":["TelegramBot","#pinChatMessage"],"updatePoint":{"line":1270,"column":31,"index":45468},"line":1270,"code":"    it('should pin chat message', function test() {\n      return bot.pinChatMessage(GROUPID, messageId).then(resp => {\n        assert.strictEqual(resp, true);\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should unpin chat message","suites":["TelegramBot","#unpinChatMessage"],"updatePoint":{"line":1280,"column":33,"index":45819},"line":1280,"code":"    it('should unpin chat message', function test() {\n      return bot.unpinChatMessage(GROUPID).then(resp => {\n        assert.strictEqual(resp, true);\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should unpin all chats messages","suites":["TelegramBot","#unpinAllChatMessages"],"updatePoint":{"line":1290,"column":39,"index":46179},"line":1290,"code":"    it('should unpin all chats messages', function test() {\n      return bot.unpinAllChatMessages(GROUPID).then(resp => {\n        assert.ok(is.boolean(resp));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should return a Chat object","suites":["TelegramBot","#getChat"],"updatePoint":{"line":1301,"column":35,"index":46558},"line":1301,"code":"    it('should return a Chat object', function test() {\n      return bot.getChat(USERID).then(resp => {\n        assert.ok(is.object(resp));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should return an Array","suites":["TelegramBot","#getChatAdministrators"],"updatePoint":{"line":1311,"column":30,"index":46898},"line":1311,"code":"    it('should return an Array', function test() {\n      return bot.getChatAdministrators(GROUPID).then(resp => {\n        assert.ok(Array.isArray(resp));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should return an Integer","suites":["TelegramBot","#getChatMemberCount"],"updatePoint":{"line":1321,"column":32,"index":47250},"line":1321,"code":"    it('should return an Integer', function test() {\n      return bot.getChatMemberCount(GROUPID).then(resp => {\n        assert.ok(Number.isInteger(resp));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should return a ChatMember","suites":["TelegramBot","#getChatMember"],"updatePoint":{"line":1331,"column":34,"index":47589},"line":1331,"code":"    it('should return a ChatMember', function test() {\n      return bot.getChatMember(GROUPID, USERID).then(resp => {\n        assert.ok(is.object(resp));\n        assert.ok(is.object(resp.user));\n        assert.ok(is.string(resp.status));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should return a Boolean","suites":["TelegramBot","#setChatStickerSet"],"updatePoint":{"line":1347,"column":31,"index":48133},"line":1347,"code":"    it('should return a Boolean', function test() {\n      return bot.setChatStickerSet(GROUPID, STICKER_SET_NAME).then(resp => {\n        assert.ok(is.boolean(resp));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should return a Boolean","suites":["TelegramBot","#deleteChatStickerSet"],"updatePoint":{"line":1361,"column":31,"index":48620},"line":1361,"code":"    it('should return a Boolean', function test() {\n      return bot.deleteChatStickerSet(GROUPID).then(resp => {\n        assert.ok(is.boolean(resp));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should set bot commands","suites":["TelegramBot","#setMyCommands"],"updatePoint":{"line":1369,"column":31,"index":48937},"line":1369,"code":"    it('should set bot commands', function test() {\n      const opts = [{\n        command: 'eat',\n        description: 'Command for eat'\n      }, {\n        command: 'run',\n        description: 'Command for run'\n      }];\n      return bot.setMyCommands(opts).then(resp => {\n        assert.ok(is.boolean(resp));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should delete bot commands","suites":["TelegramBot","#deleteMyCommands"],"updatePoint":{"line":1383,"column":34,"index":49341},"line":1383,"code":"    it('should delete bot commands', function test() {\n      return bot.deleteMyCommands().then(resp => {\n        assert.ok(is.boolean(resp));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should get bot commands","suites":["TelegramBot","#getMyCommands"],"updatePoint":{"line":1390,"column":31,"index":49566},"line":1390,"code":"    it('should get bot commands', function test() {\n      return bot.getMyCommands().then(resp => {\n        assert.ok(is.array(resp));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should set chat menu button","suites":["TelegramBot","#setChatMenuButton"],"updatePoint":{"line":1397,"column":35,"index":49798},"line":1397,"code":"    it('should set chat menu button', function test() {\n      return bot.setChatMenuButton({\n        chat_id: USERID,\n        menu_button: JSON.stringify({\n          type: 'web_app',\n          text: 'Hello',\n          web_app: {\n            url: 'https://webappcontent.telegram.org/cafe'\n          }\n        })\n      }).then(resp => {\n        assert.ok(is.boolean(resp));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should get chat menu button","suites":["TelegramBot","#getChatMenuButton"],"updatePoint":{"line":1413,"column":35,"index":50263},"line":1413,"code":"    it('should get chat menu button', function test() {\n      return bot.getChatMenuButton({\n        chat_id: USERID\n      }).then(resp => {\n        assert.ok(is.equal(resp, {\n          type: 'web_app',\n          text: 'Hello',\n          web_app: {\n            url: 'https://webappcontent.telegram.org/cafe'\n          }\n        }));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should set default administrator rights","suites":["TelegramBot","#setMyDefaultAdministratorRights"],"updatePoint":{"line":1428,"column":47,"index":50729},"line":1428,"code":"    it('should set default administrator rights', function test() {\n      return bot.setMyDefaultAdministratorRights({\n        rights: JSON.stringify({\n          can_manage_chat: true,\n          can_change_info: true,\n          can_delete_messages: false,\n          can_invite_users: true,\n          can_restrict_members: false,\n          can_pin_messages: true,\n          can_promote_members: false,\n          can_manage_video_chats: false,\n          is_anonymous: false\n        }),\n        for_channels: false\n      }).then(resp => {\n        assert.ok(is.boolean(resp));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should get my default administrator rights","suites":["TelegramBot","#getMyDefaultAdministratorRights"],"updatePoint":{"line":1448,"column":50,"index":51426},"line":1448,"code":"    it('should get my default administrator rights', function test() {\n      return bot.getMyDefaultAdministratorRights({\n        for_channels: false\n      }).then(resp => {\n        assert.ok(is.equal(resp, {\n          can_manage_chat: true,\n          can_change_info: true,\n          can_delete_messages: false,\n          can_invite_users: true,\n          can_restrict_members: false,\n          can_pin_messages: true,\n          can_promote_members: false,\n          can_manage_video_chats: false,\n          is_anonymous: false\n        }));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should edit a message sent by the bot","suites":["TelegramBot","#editMessageText"],"updatePoint":{"line":1471,"column":45,"index":52205},"line":1471,"code":"    it('should edit a message sent by the bot', function test() {\n      return bot.sendMessage(USERID, 'test').then(resp => {\n        assert.strictEqual(resp.text, 'test');\n        const opts = {\n          chat_id: USERID,\n          message_id: resp.message_id\n        };\n        return bot.editMessageText('edit test', opts).then(msg => {\n          assert.strictEqual(msg.text, 'edit test');\n        });\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should edit a caption sent by the bot","suites":["TelegramBot","#editMessageCaption"],"updatePoint":{"line":1490,"column":45,"index":52886},"line":1490,"code":"    it('should edit a caption sent by the bot', function test() {\n      const photo = `${__dirname}/data/photo.png`;\n      const options = {\n        caption: 'test caption'\n      };\n      return bot.sendPhoto(USERID, photo, options).then(resp => {\n        assert.strictEqual(resp.caption, 'test caption');\n        const opts = {\n          chat_id: USERID,\n          message_id: resp.message_id\n        };\n        return bot.editMessageCaption('new test caption', opts).then(msg => {\n          assert.strictEqual(msg.caption, 'new test caption');\n        });\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should edit a media message","suites":["TelegramBot","#editMessageMedia"],"updatePoint":{"line":1520,"column":35,"index":53933},"line":1520,"code":"    it('should edit a media message', function nextTest() {\n      return bot.editMessageMedia({\n        type: 'photo',\n        media: photoId,\n        caption: 'edited'\n      }, {\n        chat_id: USERID,\n        message_id: messageID\n      }).then(editedResp => {\n        assert.ok(is.object(editedResp));\n        assert.ok(is.string(editedResp.caption));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should edit previously-set reply markup","suites":["TelegramBot","#editMessageReplyMarkup"],"updatePoint":{"line":1539,"column":47,"index":54565},"line":1539,"code":"    it('should edit previously-set reply markup', function test() {\n      return bot.sendMessage(USERID, 'test').then(resp => {\n        const replyMarkup = JSON.stringify({\n          inline_keyboard: [[{\n            text: 'Test button',\n            callback_data: 'test'\n          }]]\n        });\n        const opts = {\n          chat_id: USERID,\n          message_id: resp.message_id\n        };\n        return bot.editMessageReplyMarkup(replyMarkup, opts).then(msg => {\n          // Keyboard markup is not returned, do a simple object check\n          assert.ok(is.object(msg));\n        });\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should stop a Poll","suites":["TelegramBot","#stopPoll"],"updatePoint":{"line":1566,"column":26,"index":55435},"line":1566,"code":"    it('should stop a Poll', function test() {\n      return bot.stopPoll(GROUPID, msg.message_id).then(resp => {\n        assert.ok(is.boolean(resp.is_closed) && resp.is_closed === true);\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should delete message","suites":["TelegramBot","#deleteMessage"],"updatePoint":{"line":1580,"column":29,"index":55941},"line":1580,"code":"    it('should delete message', function test() {\n      return bot.deleteMessage(USERID, messageId).then(resp => {\n        assert.strictEqual(resp, true);\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should send a sticker from file","suites":["TelegramBot","#sendSticker"],"updatePoint":{"line":1592,"column":39,"index":56327},"line":1592,"code":"    it('should send a sticker from file', function test() {\n      const sticker = `${__dirname}/data/sticker.webp`;\n      return bot.sendSticker(USERID, sticker).then(resp => {\n        assert.ok(is.object(resp));\n        assert.ok(is.object(resp.sticker));\n        stickerId = resp.sticker.file_id;\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should send a sticker from id","suites":["TelegramBot","#sendSticker"],"updatePoint":{"line":1600,"column":37,"index":56642},"line":1600,"code":"    it('should send a sticker from id', function test() {\n      // Send the same photo as before\n      return bot.sendSticker(USERID, stickerId).then(resp => {\n        assert.ok(is.object(resp));\n        assert.ok(is.object(resp.sticker));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should send a sticker from fs.readStream","suites":["TelegramBot","#sendSticker"],"updatePoint":{"line":1607,"column":48,"index":56911},"line":1607,"code":"    it('should send a sticker from fs.readStream', function test() {\n      const sticker = fs.createReadStream(`${__dirname}/data/sticker.webp`);\n      return bot.sendSticker(USERID, sticker).then(resp => {\n        assert.ok(is.object(resp));\n        assert.ok(is.object(resp.sticker));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should send a sticker from request Stream","suites":["TelegramBot","#sendSticker"],"updatePoint":{"line":1614,"column":49,"index":57217},"line":1614,"code":"    it('should send a sticker from request Stream', function test() {\n      const sticker = request(`${staticUrl}/sticker.webp`);\n      return bot.sendSticker(USERID, sticker).then(resp => {\n        assert.ok(is.object(resp));\n        assert.ok(is.object(resp.sticker));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should send a sticker from a Buffer","suites":["TelegramBot","#sendSticker"],"updatePoint":{"line":1621,"column":43,"index":57500},"line":1621,"code":"    it('should send a sticker from a Buffer', function test() {\n      const sticker = fs.readFileSync(`${__dirname}/data/sticker.webp`);\n      return bot.sendSticker(USERID, sticker).then(resp => {\n        assert.ok(is.object(resp));\n        assert.ok(is.object(resp.sticker));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should upload a sticker from file","suites":["TelegramBot","#uploadStickerFile"],"updatePoint":{"line":1633,"column":41,"index":57961},"line":1633,"code":"    it('should upload a sticker from file', function test() {\n      const sticker = `${__dirname}/data/sticker.png`;\n      bot.uploadStickerFile(USERID, sticker).then(resp => {\n        assert.ok(is.object(resp));\n        assert.ok(is.string(resp.file_id));\n      });\n    }); // Other tests (eg. Buffer, URL) are skipped, because they rely on the same features as sendPhoto.","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should create a new sticker set","suites":["TelegramBot","#createNewStickerSet"],"updatePoint":{"line":1645,"column":39,"index":58514},"line":1645,"code":"    it('should create a new sticker set', function test(done) {\n      const sticker = `${__dirname}/data/sticker.png`;\n      const stickerPackName = `s${CURRENT_TIMESTAMP}_by_${BOT_USERNAME}`;\n      bot.createNewStickerSet(USERID, stickerPackName, 'Sticker Pack Title', sticker, '😍').then(resp => {\n        assert.ok(is.boolean(resp));\n      });\n      setTimeout(() => done(), 2000);\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should get the sticker set given the name of the set","suites":["TelegramBot","#getStickerSet"],"updatePoint":{"line":1658,"column":60,"index":59091},"line":1658,"code":"    it('should get the sticker set given the name of the set', function test() {\n      return bot.getStickerSet(STICKER_SET_NAME).then(resp => {\n        assert.ok(is.object(resp));\n        assert.strictEqual(resp.name.toLowerCase(), STICKER_SET_NAME);\n        assert.ok(is.string(resp.title));\n        assert.ok(is.boolean(resp.contains_masks));\n        assert.ok(is.array(resp.stickers));\n      });\n    }); // This test depends on the previous test createNewStickerSet","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should get the recent sticker set created given the name of the set","suites":["TelegramBot","#getStickerSet"],"updatePoint":{"line":1668,"column":75,"index":59577},"line":1668,"code":"    it('should get the recent sticker set created given the name of the set', function test() {\n      const stickerPackName = `s${CURRENT_TIMESTAMP}_by_${BOT_USERNAME}`;\n      return bot.getStickerSet(stickerPackName).then(resp => {\n        STICKER_FILE_ID_FROM_SET = resp.stickers[0].file_id;\n        assert.ok(is.object(resp));\n        assert.strictEqual(resp.name.toLowerCase(), stickerPackName.toLowerCase());\n        assert.ok(is.string(resp.title));\n        assert.ok(is.boolean(resp.contains_masks));\n        assert.ok(is.array(resp.stickers));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should add a sticker to a set","suites":["TelegramBot","#addStickerToSet"],"updatePoint":{"line":1684,"column":37,"index":60278},"line":1684,"code":"    it('should add a sticker to a set', function test() {\n      const sticker = `${__dirname}/data/sticker.png`;\n      const stickerPackName = `s${CURRENT_TIMESTAMP}_by_${BOT_USERNAME}`;\n      bot.addStickerToSet(USERID, stickerPackName, sticker, '😊😍🤔', 'png_sticker').then(resp => {\n        assert.ok(is.boolean(resp));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should add a sticker to a set using the file Id","suites":["TelegramBot","#addStickerToSet"],"updatePoint":{"line":1691,"column":55,"index":60638},"line":1691,"code":"    it('should add a sticker to a set using the file Id', function test(done) {\n      const stickerPackName = `s${CURRENT_TIMESTAMP}_by_${BOT_USERNAME}`;\n      bot.addStickerToSet(USERID, stickerPackName, STICKER_FILE_ID_FROM_SET, '😊🤔', 'png_sticker').then(resp => {\n        assert.ok(is.boolean(resp));\n      });\n      setTimeout(() => done(), 2000);\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should set the position of a sticker in a set","suites":["TelegramBot","#setStickerPositionInSet"],"updatePoint":{"line":1703,"column":53,"index":61186},"line":1703,"code":"    it('should set the position of a sticker in a set', function test() {\n      bot.setStickerPositionInSet(STICKER_FILE_ID_FROM_SET, 0).then(resp => {\n        assert.ok(is.boolean(resp));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should delete a sticker from a set","suites":["TelegramBot","#deleteStickerFromSet"],"updatePoint":{"line":1713,"column":42,"index":61566},"line":1713,"code":"    it('should delete a sticker from a set', function test() {\n      bot.deleteStickerFromSet(STICKER_FILE_ID_FROM_SET).then(resp => {\n        assert.ok(is.boolean(resp));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should set a sticker set thumb","suites":["TelegramBot","#setStickerSetThumb"],"updatePoint":{"line":1723,"column":38,"index":61930},"line":1723,"code":"    it('should set a sticker set thumb', function test() {\n      const stickerThumb = `${__dirname}/data/sticker_thumb.png`;\n      const stickerPackName = `s${CURRENT_TIMESTAMP}_by_${BOT_USERNAME}`;\n      bot.setStickerSetThumb(USERID, stickerPackName, stickerThumb).then(resp => {\n        assert.ok(is.boolean(resp));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should send an invoice","suites":["TelegramBot","#sendInvoice"],"updatePoint":{"line":1737,"column":30,"index":62572},"line":1737,"code":"    it('should send an invoice', function test() {\n      if (isCI) {\n        this.skip(); // Skip test for now\n      }\n\n      const title = 'Demo product';\n      const description = 'our test product';\n      const payload = 'sku-p001';\n      const providerToken = PROVIDER_TOKEN;\n      const currency = 'USD';\n      const prices = [{\n        label: 'product',\n        amount: 11000\n      }, {\n        label: 'tax',\n        amount: 11000\n      }];\n      return bot.sendInvoice(USERID, title, description, payload, providerToken, currency, prices).then(resp => {\n        assert.ok(is.object(resp));\n        assert.ok(is.object(resp.invoice));\n        assert.ok(is.number(resp.invoice.total_amount));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should create an invoice link","suites":["TelegramBot","#createInvoiceLink"],"updatePoint":{"line":1765,"column":37,"index":63470},"line":1765,"code":"    it('should create an invoice link', function test() {\n      if (isCI) {\n        this.skip(); // Skip test for now\n      }\n\n      const title = 'Invoice link product';\n      const description = 'Our test invoice link product';\n      const payload = 'sku-p002';\n      const providerToken = PROVIDER_TOKEN;\n      const currency = 'EUR';\n      const prices = [{\n        label: 'NTBA API',\n        amount: 12000\n      }, {\n        label: 'tax',\n        amount: 10000\n      }];\n      return bot.createInvoiceLink(title, description, payload, providerToken, currency, prices).then(resp => {\n        assert.ok(is.string(resp));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should send a Game","suites":["TelegramBot","#sendGame"],"updatePoint":{"line":1793,"column":26,"index":64417},"line":1793,"code":"    it('should send a Game', function test() {\n      return bot.sendGame(USERID, GAME_SHORT_NAME).then(resp => {\n        assert.ok(is.object(resp));\n        assert.ok(is.object(resp.game));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should set GameScore","suites":["TelegramBot","#setGameScore"],"updatePoint":{"line":1804,"column":28,"index":64787},"line":1804,"code":"    it('should set GameScore', function test() {\n      const score = Math.floor(Math.random() * 1000);\n      const opts = {\n        chat_id: GAME_CHAT_ID,\n        message_id: GAME_MSG_ID,\n        force: true\n      };\n      return bot.setGameScore(USERID, score, opts).then(resp => {\n        assert.ok(is.object(resp) || is.boolean(resp));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"should get GameHighScores","suites":["TelegramBot","#getGameHighScores"],"updatePoint":{"line":1820,"column":33,"index":65324},"line":1820,"code":"    it('should get GameHighScores', function test() {\n      const opts = {\n        chat_id: GAME_CHAT_ID,\n        message_id: GAME_MSG_ID\n      };\n      return bot.getGameHighScores(USERID, opts).then(resp => {\n        assert.ok(is.array(resp));\n      });\n    });","file":"telegram.js","skipped":false,"dir":"test"},{"name":"(1) fileOptions.filename","suites":["#_formatSendData","using fileOptions","filename"],"updatePoint":{"line":30,"column":34,"index":987},"line":30,"code":"      it('(1) fileOptions.filename', function test() {\n        const filename = 'custom-filename';\n        files.forEach(file => {\n          const [{\n            [type]: data\n          }] = bot._formatSendData(type, file, {\n            filename\n          });\n\n          assert.equal(data.options.filename, filename);\n        });\n      });","file":"test.format-send-data.js","skipped":false,"dir":"test"},{"name":"(2) Stream#path","suites":["#_formatSendData","using fileOptions","filename"],"updatePoint":{"line":42,"column":25,"index":1317},"line":42,"code":"      it('(2) Stream#path', function test() {\n        if (!stream.path) {\n          this.skip('Stream#path unsupported');\n          return;\n        }\n\n        const [{\n          [type]: data\n        }] = bot._formatSendData(type, stream);\n\n        assert.equal(data.options.filename, path.basename(paths.audio));\n      });","file":"test.format-send-data.js","skipped":false,"dir":"test"},{"name":"(3) filepath","suites":["#_formatSendData","using fileOptions","filename"],"updatePoint":{"line":54,"column":22,"index":1637},"line":54,"code":"      it('(3) filepath', function test() {\n        const [{\n          [type]: data\n        }] = bot._formatSendData(type, filepath);\n\n        assert.equal(data.options.filename, path.basename(paths.audio));\n      });","file":"test.format-send-data.js","skipped":false,"dir":"test"},{"name":"(4) final default","suites":["#_formatSendData","using fileOptions","filename"],"updatePoint":{"line":61,"column":27,"index":1859},"line":61,"code":"      it('(4) final default', function test() {\n        [nonPathStream, buffer, nonDetectableBuffer].forEach(file => {\n          const [{\n            [type]: data\n          }] = bot._formatSendData(type, file);\n\n          assert.equal(data.options.filename, 'filename');\n        });\n      });","file":"test.format-send-data.js","skipped":false,"dir":"test"},{"name":"(1) fileOpts.contentType","suites":["#_formatSendData","using fileOptions","contentType"],"updatePoint":{"line":72,"column":34,"index":2225},"line":72,"code":"      it('(1) fileOpts.contentType', function test() {\n        const contentType = 'application/custom-type';\n        files.forEach(file => {\n          const [{\n            [type]: data\n          }] = bot._formatSendData(type, file, {\n            contentType\n          });\n\n          assert.equal(data.options.contentType, contentType);\n        });\n      });","file":"test.format-send-data.js","skipped":false,"dir":"test"},{"name":"(2) Stream#path","suites":["#_formatSendData","using fileOptions","contentType"],"updatePoint":{"line":84,"column":25,"index":2575},"line":84,"code":"      it('(2) Stream#path', function test() {\n        if (!stream.path) {\n          this.skip('Stream#path unsupported');\n          return;\n        }\n\n        const [{\n          [type]: data\n        }] = bot._formatSendData(type, stream);\n\n        assert.equal(data.options.contentType, 'audio/mpeg');\n      });","file":"test.format-send-data.js","skipped":false,"dir":"test"},{"name":"(3) Buffer file-type","suites":["#_formatSendData","using fileOptions","contentType"],"updatePoint":{"line":96,"column":30,"index":2892},"line":96,"code":"      it('(3) Buffer file-type', function test() {\n        const [{\n          [type]: data\n        }] = bot._formatSendData(type, buffer);\n\n        assert.equal(data.options.contentType, 'audio/mpeg');\n      });","file":"test.format-send-data.js","skipped":false,"dir":"test"},{"name":"(4) filepath","suites":["#_formatSendData","using fileOptions","contentType"],"updatePoint":{"line":103,"column":22,"index":3096},"line":103,"code":"      it('(4) filepath', function test() {\n        const [{\n          [type]: data\n        }] = bot._formatSendData(type, filepath);\n\n        assert.equal(data.options.contentType, 'audio/mpeg');\n      });","file":"test.format-send-data.js","skipped":false,"dir":"test"},{"name":"(5) fileOptions.filename","suites":["#_formatSendData","using fileOptions","contentType"],"updatePoint":{"line":110,"column":34,"index":3314},"line":110,"code":"      it('(5) fileOptions.filename', function test() {\n        [nonPathStream, nonDetectableBuffer].forEach(file => {\n          const [{\n            [type]: data\n          }] = bot._formatSendData(type, file, {\n            filename: 'image.gif'\n          });\n\n          assert.equal(data.options.contentType, 'image/gif');\n        });\n      });","file":"test.format-send-data.js","skipped":false,"dir":"test"},{"name":"(6) Final default","suites":["#_formatSendData","using fileOptions","contentType"],"updatePoint":{"line":121,"column":27,"index":3652},"line":121,"code":"      it('(6) Final default', function test() {\n        [nonPathStream, nonDetectableBuffer].forEach(file => {\n          const [{\n            [type]: data\n          }] = bot._formatSendData(type, file);\n\n          assert.equal(data.options.contentType, 'application/octet-stream');\n        });\n      });","file":"test.format-send-data.js","skipped":false,"dir":"test"},{"name":"should handle buffer path from fs.readStream","suites":["#_formatSendData","using fileOptions","contentType"],"updatePoint":{"line":132,"column":50,"index":3993},"line":132,"code":"  it('should handle buffer path from fs.readStream', function test() {\n    let file;\n\n    try {\n      file = fs.createReadStream(Buffer.from(paths.audio));\n    } catch (ex) {\n      // Older Node.js versions do not support passing a Buffer\n      // representation of the path to fs.createReadStream()\n      if (ex instanceof TypeError) {\n        Promise.resolve();\n        return;\n      }\n    }\n\n    const [{\n      [type]: data\n    }] = bot._formatSendData('file', file);\n\n    assert.equal(data.options.filename, path.basename(paths.audio));\n  });","file":"test.format-send-data.js","skipped":false,"dir":"test"},{"name":"should not accept file-paths if disallowed with constructor option","suites":["#_formatSendData","using fileOptions","contentType"],"updatePoint":{"line":152,"column":72,"index":4562},"line":152,"code":"  it('should not accept file-paths if disallowed with constructor option', function test() {\n    const tgbot = new TelegramBot('token', {\n      filepath: false\n    });\n\n    const [formData, fileId] = tgbot._formatSendData('file', paths.audio);\n\n    assert.ok(fileId);\n    assert.ok(!formData);\n  });","file":"test.format-send-data.js","skipped":false,"dir":"test"},{"name":"should allow stream.path that can not be parsed","suites":["#_formatSendData","using fileOptions","contentType"],"updatePoint":{"line":162,"column":53,"index":4843},"line":162,"code":"  it('should allow stream.path that can not be parsed', function test() {\n    const stream = fs.createReadStream(paths.audio);\n    stream.path = '/?id=123'; // for example, 'http://example.com/?id=666'\n\n    assert.doesNotThrow(function assertDoesNotThrow() {\n      bot._formatSendData('file', stream);\n    });\n  });","file":"test.format-send-data.js","skipped":false,"dir":"test"}]}