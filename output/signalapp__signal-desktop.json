{"repo":"signalapp/Signal-Desktop","url":"https://github.com/signalapp/Signal-Desktop","branch":"development","configs":[{"package":"signal-desktop","lang":"js","dir":"test","framework":"mocha","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"should return correct template","suites":["SignalMenu","createTemplate"," setup options"],"updatePoint":{"line":45,"column":46,"index":1123},"line":45,"code":"            it('should return correct template', () => {\n              const logger = {\n                error(message) {\n                  throw new Error(message);\n                }\n              };\n              const options = {\n                isProduction: true,\n                devTools: true,\n                openContactUs: null,\n                openForums: null,\n                openJoinTheBeta: null,\n                openReleaseNotes: null,\n                openSupportPage: null,\n                platform,\n                includeSetup,\n                setupAsNewDevice: null,\n                setupAsStandalone: null,\n                forceUpdate: null,\n                showAbout: null,\n                showDebugLog: null,\n                showKeyboardShortcuts: null,\n                showSettings: null,\n                showStickerCreator: null,\n                showWindow: null\n              };\n              const appLocale = 'en';\n              const {\n                messages\n              } = loadLocale({\n                appLocale,\n                logger\n              });\n              const actual = SignalMenu.createTemplate(options, messages);\n              const fixturePath = includeSetup ? fixtures.setup : fixtures.default;\n              // eslint-disable-next-line global-require, import/no-dynamic-require\n              const fixture = require(fixturePath);\n              assert.deepEqual(actual, fixture);\n            });","file":"app/menu_test.js","skipped":false,"dir":"test"},{"name":"returns proper file path for unix style file URI with hash","suites":["Protocol Filter","_urlToPath"],"updatePoint":{"line":12,"column":66,"index":325},"line":12,"code":"    it('returns proper file path for unix style file URI with hash', () => {\n      const path = 'file:///Users/someone/Development/signal/electron/background.html#first-page';\n      const expected = '/Users/someone/Development/signal/electron/background.html';\n      const actual = _urlToPath(path);\n      expect(actual).to.equal(expected);\n    });","file":"app/protocol_filter_test.js","skipped":false,"dir":"test"},{"name":"returns proper file path for unix style file URI with querystring","suites":["Protocol Filter","_urlToPath"],"updatePoint":{"line":18,"column":73,"index":681},"line":18,"code":"    it('returns proper file path for unix style file URI with querystring', () => {\n      const path = 'file:///Users/someone/Development/signal/electron/background.html?name=Signal&locale=en&version=2.4.0';\n      const expected = '/Users/someone/Development/signal/electron/background.html';\n      const actual = _urlToPath(path);\n      expect(actual).to.equal(expected);\n    });","file":"app/protocol_filter_test.js","skipped":false,"dir":"test"},{"name":"returns proper file path for unix style file URI with hash and querystring","suites":["Protocol Filter","_urlToPath"],"updatePoint":{"line":24,"column":82,"index":1071},"line":24,"code":"    it('returns proper file path for unix style file URI with hash and querystring', () => {\n      const path = 'file:///Users/someone/Development/signal/electron/background.html#somewhere?name=Signal';\n      const expected = '/Users/someone/Development/signal/electron/background.html';\n      const actual = _urlToPath(path);\n      expect(actual).to.equal(expected);\n    });","file":"app/protocol_filter_test.js","skipped":false,"dir":"test"},{"name":"returns proper file path for file URI on windows","suites":["Protocol Filter","_urlToPath"],"updatePoint":{"line":30,"column":56,"index":1421},"line":30,"code":"    it('returns proper file path for file URI on windows', () => {\n      const path = 'file:///C:/Users/Someone/dev/desktop/background.html?name=Signal&locale=en&version=2.4.0';\n      const expected = 'C:/Users/Someone/dev/desktop/background.html';\n      const isWindows = true;\n      const actual = _urlToPath(path, {\n        isWindows\n      });\n      expect(actual).to.equal(expected);\n    });","file":"app/protocol_filter_test.js","skipped":false,"dir":"test"},{"name":"translates from URL format to filesystem format","suites":["Protocol Filter","_urlToPath"],"updatePoint":{"line":39,"column":55,"index":1816},"line":39,"code":"    it('translates from URL format to filesystem format', () => {\n      const path = 'file:///Users/someone/Development%20Files/signal/electron/background.html';\n      const expected = '/Users/someone/Development Files/signal/electron/background.html';\n      const actual = _urlToPath(path);\n      expect(actual).to.equal(expected);\n    });","file":"app/protocol_filter_test.js","skipped":false,"dir":"test"},{"name":"translates from URL format to filesystem format","suites":["Protocol Filter","_urlToPath"],"updatePoint":{"line":45,"column":55,"index":2157},"line":45,"code":"    it('translates from URL format to filesystem format', () => {\n      const path = 'file:///Users/someone/Development%20Files/signal/electron/background.html';\n      const expected = '/Users/someone/Development Files/signal/electron/background.html';\n      const actual = _urlToPath(path);\n      expect(actual).to.equal(expected);\n    });","file":"app/protocol_filter_test.js","skipped":false,"dir":"test"},{"name":"handles SMB share path","suites":["Protocol Filter","_urlToPath"],"updatePoint":{"line":53,"column":30,"index":2551},"line":53,"code":"    it('handles SMB share path', () => {\n      const path = 'file://relative/path';\n      const expected = 'relative/path';\n      const actual = _urlToPath(path);\n      expect(actual).to.equal(expected);\n    });","file":"app/protocol_filter_test.js","skipped":false,"dir":"test"},{"name":"handles SMB share path on windows","suites":["Protocol Filter","_urlToPath"],"updatePoint":{"line":59,"column":41,"index":2774},"line":59,"code":"    it('handles SMB share path on windows', () => {\n      const path = 'file://relative/path';\n      const expected = 'elative/path';\n      const isWindows = true;\n      const actual = _urlToPath(path, {\n        isWindows\n      });\n      expect(actual).to.equal(expected);\n    });","file":"app/protocol_filter_test.js","skipped":false,"dir":"test"},{"name":"hands back a path with .. in it","suites":["Protocol Filter","_urlToPath"],"updatePoint":{"line":68,"column":39,"index":3053},"line":68,"code":"    it('hands back a path with .. in it', () => {\n      const path = 'file://../../..';\n      const expected = '../../..';\n      const actual = _urlToPath(path);\n      expect(actual).to.equal(expected);\n    });","file":"app/protocol_filter_test.js","skipped":false,"dir":"test"},{"name":"works with locale and base available","suites":["SpellCheck","getLanguages"],"updatePoint":{"line":12,"column":44,"index":293},"line":12,"code":"    it('works with locale and base available', () => {\n      assert.deepEqual(getLanguages('en-US', ['en-US', 'en-CA', 'en']), ['en-US', 'en']);\n    });","file":"app/spell_check_test.js","skipped":false,"dir":"test"},{"name":"works with neither locale nor base available","suites":["SpellCheck","getLanguages"],"updatePoint":{"line":15,"column":52,"index":454},"line":15,"code":"    it('works with neither locale nor base available', () => {\n      assert.deepEqual(getLanguages('en-US', ['en-NZ', 'en-CA']), ['en-NZ', 'en-CA']);\n    });","file":"app/spell_check_test.js","skipped":false,"dir":"test"},{"name":"works with only base locale available","suites":["SpellCheck","getLanguages"],"updatePoint":{"line":18,"column":45,"index":605},"line":18,"code":"    it('works with only base locale available', () => {\n      assert.deepEqual(getLanguages('en-US', ['en', 'en-CA']), ['en']);\n    });","file":"app/spell_check_test.js","skipped":false,"dir":"test"},{"name":"works with only full locale available","suites":["SpellCheck","getLanguages"],"updatePoint":{"line":21,"column":45,"index":741},"line":21,"code":"    it('works with only full locale available', () => {\n      assert.deepEqual(getLanguages('en-US', ['en-CA', 'en-US']), ['en-US']);\n    });","file":"app/spell_check_test.js","skipped":false,"dir":"test"},{"name":"works with base provided and base available","suites":["SpellCheck","getLanguages"],"updatePoint":{"line":24,"column":51,"index":889},"line":24,"code":"    it('works with base provided and base available', () => {\n      assert.deepEqual(getLanguages('en', ['en-CA', 'en-US', 'en']), ['en']);\n    });","file":"app/spell_check_test.js","skipped":false,"dir":"test"},{"name":"works with base provided and base not available","suites":["SpellCheck","getLanguages"],"updatePoint":{"line":27,"column":55,"index":1041},"line":27,"code":"    it('works with base provided and base not available', () => {\n      assert.deepEqual(getLanguages('en', ['en-CA', 'en-US']), ['en-CA', 'en-US']);\n    });","file":"app/spell_check_test.js","skipped":false,"dir":"test"},{"name":"handles null, still calls reject","suites":["Database","handleDOMException"],"updatePoint":{"line":10,"column":40,"index":236},"line":10,"code":"    it('handles null, still calls reject', () => {\n      let called = 0;\n      const reject = () => {\n        called += 1;\n      };\n      const error = null;\n      const prefix = 'something';\n      Whisper.Database.handleDOMException(prefix, error, reject);\n      assert.strictEqual(called, 1);\n    });","file":"database_test.js","skipped":false,"dir":"test"},{"name":"handles object code and message","suites":["Database","handleDOMException"],"updatePoint":{"line":20,"column":39,"index":538},"line":20,"code":"    it('handles object code and message', () => {\n      let called = 0;\n      const reject = () => {\n        called += 1;\n      };\n      const error = {\n        code: 4,\n        message: 'some cryptic error'\n      };\n      const prefix = 'something';\n      Whisper.Database.handleDOMException(prefix, error, reject);\n      assert.strictEqual(called, 1);\n    });","file":"database_test.js","skipped":false,"dir":"test"},{"name":"returns empty string for unknown string","suites":["i18n","i18n"],"updatePoint":{"line":8,"column":47,"index":207},"line":8,"code":"    it('returns empty string for unknown string', () => {\n      assert.strictEqual(i18n('random'), '');\n    });","file":"i18n_test.js","skipped":false,"dir":"test"},{"name":"returns message for given string","suites":["i18n","i18n"],"updatePoint":{"line":11,"column":40,"index":312},"line":11,"code":"    it('returns message for given string', () => {\n      assert.equal(i18n('reportIssue'), ['Contact Support']);\n    });","file":"i18n_test.js","skipped":false,"dir":"test"},{"name":"returns message with single substitution","suites":["i18n","i18n"],"updatePoint":{"line":14,"column":48,"index":441},"line":14,"code":"    it('returns message with single substitution', () => {\n      const actual = i18n('cannotUpdateDetail', ['https://signal.org/download']);\n      assert.equal(actual, 'Signal Desktop failed to update, but there is a new version available. Please go to https://signal.org/download and install the new version manually, then either contact support or file a bug about this problem.');\n    });","file":"i18n_test.js","skipped":false,"dir":"test"},{"name":"returns message with multiple substitutions","suites":["i18n","i18n"],"updatePoint":{"line":18,"column":51,"index":836},"line":18,"code":"    it('returns message with multiple substitutions', () => {\n      const actual = i18n('theyChangedTheTimer', {\n        name: 'Someone',\n        time: '5 minutes'\n      });\n      assert.equal(actual, 'Someone set the disappearing message time to 5 minutes.');\n    });","file":"i18n_test.js","skipped":false,"dir":"test"},{"name":"returns a string with length two or greater","suites":["i18n","getLocale"],"updatePoint":{"line":27,"column":51,"index":1143},"line":27,"code":"    it('returns a string with length two or greater', () => {\n      const locale = i18n.getLocale();\n      assert.isAtLeast(locale.trim().length, 2);\n    });","file":"i18n_test.js","skipped":false,"dir":"test"},{"name":"numbers with + are valid without providing regionCode","suites":["libphonenumber util","parseNumber"],"updatePoint":{"line":10,"column":61,"index":268},"line":10,"code":"    it('numbers with + are valid without providing regionCode', () => {\n      const result = libphonenumber.util.parseNumber('+14155555555');\n      assert.isTrue(result.isValidNumber);\n      assert.strictEqual(result.nationalNumber, '4155555555');\n      assert.strictEqual(result.e164, '+14155555555');\n      assert.strictEqual(result.regionCode, 'US');\n      assert.strictEqual(result.countryCode, '1');\n    });","file":"libphonenumber_util_test.js","skipped":false,"dir":"test"},{"name":"variant numbers with the right regionCode are valid","suites":["libphonenumber util","parseNumber"],"updatePoint":{"line":18,"column":59,"index":679},"line":18,"code":"    it('variant numbers with the right regionCode are valid', () => {\n      ['4155555555', '14155555555', '+14155555555'].forEach(number => {\n        const result = libphonenumber.util.parseNumber(number, 'US');\n        assert.isTrue(result.isValidNumber);\n        assert.strictEqual(result.nationalNumber, '4155555555');\n        assert.strictEqual(result.e164, '+14155555555');\n        assert.strictEqual(result.regionCode, 'US');\n        assert.strictEqual(result.countryCode, '1');\n      });\n    });","file":"libphonenumber_util_test.js","skipped":false,"dir":"test"},{"name":"returns false for invalid URLs","suites":["Link previews","#isLinkSafeToPreview"],"updatePoint":{"line":14,"column":38,"index":344},"line":14,"code":"    it('returns false for invalid URLs', () => {\n      assert.isFalse(isLinkSafeToPreview(''));\n      assert.isFalse(isLinkSafeToPreview('https'));\n      assert.isFalse(isLinkSafeToPreview('https://'));\n      assert.isFalse(isLinkSafeToPreview('https://bad url'));\n      assert.isFalse(isLinkSafeToPreview('example.com'));\n    });","file":"modules/link_previews_test.js","skipped":false,"dir":"test"},{"name":"returns false for non-HTTPS URLs","suites":["Link previews","#isLinkSafeToPreview"],"updatePoint":{"line":21,"column":40,"index":677},"line":21,"code":"    it('returns false for non-HTTPS URLs', () => {\n      assert.isFalse(isLinkSafeToPreview('http://example.com'));\n      assert.isFalse(isLinkSafeToPreview('ftp://example.com'));\n      assert.isFalse(isLinkSafeToPreview('file://example'));\n    });","file":"modules/link_previews_test.js","skipped":false,"dir":"test"},{"name":"returns false if the link is \"sneaky\"","suites":["Link previews","#isLinkSafeToPreview"],"updatePoint":{"line":26,"column":45,"index":931},"line":26,"code":"    it('returns false if the link is \"sneaky\"', () => {\n      // See `isLinkSneaky` tests below for more thorough checking.\n      assert.isFalse(isLinkSafeToPreview('https://user:pass@example.com'));\n      assert.isFalse(isLinkSafeToPreview('https://aquí.example'));\n      assert.isFalse(isLinkSafeToPreview('https://aqu%C3%AD.example'));\n    });","file":"modules/link_previews_test.js","skipped":false,"dir":"test"},{"name":"returns true for \"safe\" urls","suites":["Link previews","#isLinkSafeToPreview"],"updatePoint":{"line":32,"column":36,"index":1269},"line":32,"code":"    it('returns true for \"safe\" urls', () => {\n      assert.isTrue(isLinkSafeToPreview('https://example.com'));\n      assert.isTrue(isLinkSafeToPreview('https://example.com/foo/bar?query=string#hash'));\n    });","file":"modules/link_previews_test.js","skipped":false,"dir":"test"},{"name":"returns all links if no caretLocation is provided","suites":["Link previews","#findLinks"],"updatePoint":{"line":38,"column":57,"index":1540},"line":38,"code":"    it('returns all links if no caretLocation is provided', () => {\n      const text = 'Check out this link: https://github.com/signalapp/Signal-Desktop\\nAnd this one too: https://github.com/signalapp/Signal-Android';\n      const expected = ['https://github.com/signalapp/Signal-Desktop', 'https://github.com/signalapp/Signal-Android'];\n      const actual = findLinks(text);\n      assert.deepEqual(expected, actual);\n    });","file":"modules/link_previews_test.js","skipped":false,"dir":"test"},{"name":"returns all links after emojis without spaces in between","suites":["Link previews","#findLinks"],"updatePoint":{"line":44,"column":64,"index":1972},"line":44,"code":"    it('returns all links after emojis without spaces in between', () => {\n      const text = '😎https://github.com/signalapp/Signal-Desktop😛';\n      const expected = ['https://github.com/signalapp/Signal-Desktop'];\n      const actual = findLinks(text);\n      assert.deepEqual(expected, actual);\n    });","file":"modules/link_previews_test.js","skipped":false,"dir":"test"},{"name":"includes all links if cursor is not in a link","suites":["Link previews","#findLinks"],"updatePoint":{"line":50,"column":53,"index":2266},"line":50,"code":"    it('includes all links if cursor is not in a link', () => {\n      const text = 'Check out this link: https://github.com/signalapp/Signal-Desktop\\nAnd this one too: https://github.com/signalapp/Signal-Android';\n      const caretLocation = 10;\n      const expected = ['https://github.com/signalapp/Signal-Desktop', 'https://github.com/signalapp/Signal-Android'];\n      const actual = findLinks(text, caretLocation);\n      assert.deepEqual(expected, actual);\n    });","file":"modules/link_previews_test.js","skipped":false,"dir":"test"},{"name":"excludes a link not at the end if the caret is inside of it","suites":["Link previews","#findLinks"],"updatePoint":{"line":57,"column":67,"index":2748},"line":57,"code":"    it('excludes a link not at the end if the caret is inside of it', () => {\n      const text = 'Check out this link: https://github.com/signalapp/Signal-Desktop\\nAnd this one too: https://github.com/signalapp/Signal-Android';\n      const caretLocation = 30;\n      const expected = ['https://github.com/signalapp/Signal-Android'];\n      const actual = findLinks(text, caretLocation);\n      assert.deepEqual(expected, actual);\n    });","file":"modules/link_previews_test.js","skipped":false,"dir":"test"},{"name":"excludes a link not at the end if the caret is at its end","suites":["Link previews","#findLinks"],"updatePoint":{"line":64,"column":65,"index":3181},"line":64,"code":"    it('excludes a link not at the end if the caret is at its end', () => {\n      const text = 'Check out this link: https://github.com/signalapp/Signal-Desktop\\nAnd this one too: https://github.com/signalapp/Signal-Android';\n      const caretLocation = 64;\n      const expected = ['https://github.com/signalapp/Signal-Android'];\n      const actual = findLinks(text, caretLocation);\n      assert.deepEqual(expected, actual);\n    });","file":"modules/link_previews_test.js","skipped":false,"dir":"test"},{"name":"excludes a link at the end of the caret is inside of it","suites":["Link previews","#findLinks"],"updatePoint":{"line":71,"column":63,"index":3612},"line":71,"code":"    it('excludes a link at the end of the caret is inside of it', () => {\n      const text = 'Check out this link: https://github.com/signalapp/Signal-Desktop\\nAnd this one too: https://github.com/signalapp/Signal-Android';\n      const caretLocation = 100;\n      const expected = ['https://github.com/signalapp/Signal-Desktop'];\n      const actual = findLinks(text, caretLocation);\n      assert.deepEqual(expected, actual);\n    });","file":"modules/link_previews_test.js","skipped":false,"dir":"test"},{"name":"includes link at the end if cursor is at its end","suites":["Link previews","#findLinks"],"updatePoint":{"line":78,"column":56,"index":4037},"line":78,"code":"    it('includes link at the end if cursor is at its end', () => {\n      const text = 'Check out this link: https://github.com/signalapp/Signal-Desktop\\nAnd this one too: https://github.com/signalapp/Signal-Android';\n      const caretLocation = text.length;\n      const expected = ['https://github.com/signalapp/Signal-Desktop', 'https://github.com/signalapp/Signal-Android'];\n      const actual = findLinks(text, caretLocation);\n      assert.deepEqual(expected, actual);\n    });","file":"modules/link_previews_test.js","skipped":false,"dir":"test"},{"name":"returns true for =","suites":["Link previews","#isLinkSneaky"],"updatePoint":{"line":87,"column":26,"index":4529},"line":87,"code":"    it('returns true for =', () => {\n      const link = 'r.id=s.id';\n      assert.strictEqual(isLinkSneaky(link), true);\n    });","file":"modules/link_previews_test.js","skipped":false,"dir":"test"},{"name":"returns true for $","suites":["Link previews","#isLinkSneaky"],"updatePoint":{"line":91,"column":26,"index":4658},"line":91,"code":"    it('returns true for $', () => {\n      const link = 'r.id$s.id';\n      assert.strictEqual(isLinkSneaky(link), true);\n    });","file":"modules/link_previews_test.js","skipped":false,"dir":"test"},{"name":"returns true for +","suites":["Link previews","#isLinkSneaky"],"updatePoint":{"line":95,"column":26,"index":4787},"line":95,"code":"    it('returns true for +', () => {\n      const link = 'r.id+s.id';\n      assert.strictEqual(isLinkSneaky(link), true);\n    });","file":"modules/link_previews_test.js","skipped":false,"dir":"test"},{"name":"returns true for ^","suites":["Link previews","#isLinkSneaky"],"updatePoint":{"line":99,"column":26,"index":4916},"line":99,"code":"    it('returns true for ^', () => {\n      const link = 'r.id^s.id';\n      assert.strictEqual(isLinkSneaky(link), true);\n    });","file":"modules/link_previews_test.js","skipped":false,"dir":"test"},{"name":"returns true for URLs with a length of 4097 or higher","suites":["Link previews","#isLinkSneaky"],"updatePoint":{"line":103,"column":61,"index":5080},"line":103,"code":"    it('returns true for URLs with a length of 4097 or higher', () => {\n      const href = `https://example.com/${'a'.repeat(4077)}`;\n      assert.lengthOf(href, 4097, 'Test href is not the proper length');\n      assert.isTrue(isLinkSneaky(href));\n      assert.isTrue(isLinkSneaky(`${href}?foo=bar`));\n    });","file":"modules/link_previews_test.js","skipped":false,"dir":"test"},{"name":"returns true for hrefs with auth (or pretend auth)","suites":["Link previews","#isLinkSneaky","auth"],"updatePoint":{"line":110,"column":60,"index":5418},"line":110,"code":"      it('returns true for hrefs with auth (or pretend auth)', () => {\n        assert.isTrue(isLinkSneaky('https://user:pass@example.com'));\n        assert.isTrue(isLinkSneaky('https://user:@example.com'));\n        assert.isTrue(isLinkSneaky('https://:pass@example.com'));\n        assert.isTrue(isLinkSneaky('http://whatever.com&login=someuser@77777777'));\n      });","file":"modules/link_previews_test.js","skipped":false,"dir":"test"},{"name":"returns false for all-latin domain","suites":["Link previews","#isLinkSneaky","domain"],"updatePoint":{"line":118,"column":44,"index":5808},"line":118,"code":"      it('returns false for all-latin domain', () => {\n        const link = 'https://www.amazon.com';\n        const actual = isLinkSneaky(link);\n        assert.strictEqual(actual, false);\n      });","file":"modules/link_previews_test.js","skipped":false,"dir":"test"},{"name":"returns false for IPv4 addresses","suites":["Link previews","#isLinkSneaky","domain"],"updatePoint":{"line":123,"column":42,"index":6004},"line":123,"code":"      it('returns false for IPv4 addresses', () => {\n        assert.isFalse(isLinkSneaky('https://127.0.0.1/path'));\n      });","file":"modules/link_previews_test.js","skipped":false,"dir":"test"},{"name":"returns true for IPv6 addresses","suites":["Link previews","#isLinkSneaky","domain"],"updatePoint":{"line":129,"column":41,"index":6240},"line":129,"code":"      it('returns true for IPv6 addresses', () => {\n        assert.isTrue(isLinkSneaky('https://[2001:0db8:85a3:0000:0000:8a2e:0370:7334]/path'));\n        assert.isTrue(isLinkSneaky('https://[::]/path'));\n      });","file":"modules/link_previews_test.js","skipped":false,"dir":"test"},{"name":"returns true for Latin + Cyrillic domain","suites":["Link previews","#isLinkSneaky","domain"],"updatePoint":{"line":133,"column":50,"index":6464},"line":133,"code":"      it('returns true for Latin + Cyrillic domain', () => {\n        const link = 'https://www.aмazon.com';\n        const actual = isLinkSneaky(link);\n        assert.strictEqual(actual, true);\n      });","file":"modules/link_previews_test.js","skipped":false,"dir":"test"},{"name":"returns true for Latin + Greek domain","suites":["Link previews","#isLinkSneaky","domain"],"updatePoint":{"line":138,"column":47,"index":6664},"line":138,"code":"      it('returns true for Latin + Greek domain', () => {\n        const link = 'https://www.αpple.com';\n        const actual = isLinkSneaky(link);\n        assert.strictEqual(actual, true);\n      });","file":"modules/link_previews_test.js","skipped":false,"dir":"test"},{"name":"returns true for ASCII and non-ASCII mix","suites":["Link previews","#isLinkSneaky","domain"],"updatePoint":{"line":143,"column":50,"index":6866},"line":143,"code":"      it('returns true for ASCII and non-ASCII mix', () => {\n        const link = 'https://www.аррӏе.com';\n        const actual = isLinkSneaky(link);\n        assert.strictEqual(actual, true);\n      });","file":"modules/link_previews_test.js","skipped":false,"dir":"test"},{"name":"returns true for Latin + High Greek domain","suites":["Link previews","#isLinkSneaky","domain"],"updatePoint":{"line":148,"column":52,"index":7070},"line":148,"code":"      it('returns true for Latin + High Greek domain', () => {\n        const link = `https://www.apple${String.fromCodePoint(0x101a0)}.com`;\n        const actual = isLinkSneaky(link);\n        assert.strictEqual(actual, true);\n      });","file":"modules/link_previews_test.js","skipped":false,"dir":"test"},{"name":"returns true if the domain doesn't contain a .","suites":["Link previews","#isLinkSneaky","domain"],"updatePoint":{"line":153,"column":56,"index":7310},"line":153,"code":"      it(\"returns true if the domain doesn't contain a .\", () => {\n        assert.isTrue(isLinkSneaky('https://example'));\n        assert.isTrue(isLinkSneaky('https://localhost'));\n        assert.isTrue(isLinkSneaky('https://localhost:3000'));\n      });","file":"modules/link_previews_test.js","skipped":false,"dir":"test"},{"name":"returns true if the domain has any empty labels","suites":["Link previews","#isLinkSneaky","domain"],"updatePoint":{"line":158,"column":57,"index":7565},"line":158,"code":"      it('returns true if the domain has any empty labels', () => {\n        assert.isTrue(isLinkSneaky('https://example.'));\n        assert.isTrue(isLinkSneaky('https://example.com.'));\n        assert.isTrue(isLinkSneaky('https://.example.com'));\n        assert.isTrue(isLinkSneaky('https://..example.com'));\n      });","file":"modules/link_previews_test.js","skipped":false,"dir":"test"},{"name":"returns true if the domain is longer than 2048 UTF-16 code points","suites":["Link previews","#isLinkSneaky","domain"],"updatePoint":{"line":164,"column":75,"index":7902},"line":164,"code":"      it('returns true if the domain is longer than 2048 UTF-16 code points', () => {\n        const domain = `${'a'.repeat(2041)}.example`;\n        assert.lengthOf(domain, 2049, 'Test domain is the incorrect length');\n        const link = `https://${domain}/foo/bar`;\n        assert.isTrue(isLinkSneaky(link));\n      });","file":"modules/link_previews_test.js","skipped":false,"dir":"test"},{"name":"returns false for no pathname","suites":["Link previews","#isLinkSneaky","pathname"],"updatePoint":{"line":172,"column":39,"index":8228},"line":172,"code":"      it('returns false for no pathname', () => {\n        assert.isFalse(isLinkSneaky('https://example.com'));\n        assert.isFalse(isLinkSneaky('https://example.com/'));\n      });","file":"modules/link_previews_test.js","skipped":false,"dir":"test"},{"name":"returns false if the pathname contains valid characters","suites":["Link previews","#isLinkSneaky","pathname"],"updatePoint":{"line":176,"column":65,"index":8437},"line":176,"code":"      it('returns false if the pathname contains valid characters', () => {\n        assert.isFalse(isLinkSneaky('https://example.com/foo'));\n        assert.isFalse(isLinkSneaky('https://example.com/foo/bar'));\n        assert.isFalse(isLinkSneaky(\"https://example.com/:/[]@!$&'()*+,;=abc123-._~%\"));\n        assert.isFalse(isLinkSneaky('https://lbry.tv/@ScammerRevolts:b0/DELETING-EVERY-FILE-OFF-A-SCAMMERS-LAPTOP-Destroyed:1'));\n      });","file":"modules/link_previews_test.js","skipped":false,"dir":"test"},{"name":"returns true if the pathname contains invalid characters","suites":["Link previews","#isLinkSneaky","pathname"],"updatePoint":{"line":182,"column":66,"index":8877},"line":182,"code":"      it('returns true if the pathname contains invalid characters', () => {\n        assert.isTrue(isLinkSneaky('https://example.com/hello world'));\n        assert.isTrue(isLinkSneaky('https://example.com/aquí-está'));\n        assert.isTrue(isLinkSneaky('https://example.com/hello\\x00world'));\n        assert.isTrue(isLinkSneaky('https://example.com/hello\\nworld'));\n        assert.isTrue(isLinkSneaky('https://example.com/hello😈world'));\n      });","file":"modules/link_previews_test.js","skipped":false,"dir":"test"},{"name":"returns false for no query","suites":["Link previews","#isLinkSneaky","query string"],"updatePoint":{"line":191,"column":36,"index":9342},"line":191,"code":"      it('returns false for no query', () => {\n        assert.isFalse(isLinkSneaky('https://example.com/foo'));\n        assert.isFalse(isLinkSneaky('https://example.com/foo?'));\n      });","file":"modules/link_previews_test.js","skipped":false,"dir":"test"},{"name":"returns false if the query string contains valid characters","suites":["Link previews","#isLinkSneaky","query string"],"updatePoint":{"line":195,"column":69,"index":9563},"line":195,"code":"      it('returns false if the query string contains valid characters', () => {\n        assert.isFalse(isLinkSneaky('https://example.com/foo?bar'));\n        assert.isFalse(isLinkSneaky('https://example.com/foo?bar=baz'));\n        assert.isFalse(isLinkSneaky(\"https://example.com/foo?bar=:/[]@!$&'()*+,;=abc123-._~%\"));\n        assert.isFalse(isLinkSneaky(\"https://example.com/foo?:/[]@!$&'()*+,;=abc123-._~%=baz\"));\n      });","file":"modules/link_previews_test.js","skipped":false,"dir":"test"},{"name":"returns true if the query string contains invalid characters","suites":["Link previews","#isLinkSneaky","query string"],"updatePoint":{"line":201,"column":70,"index":9990},"line":201,"code":"      it('returns true if the query string contains invalid characters', () => {\n        assert.isTrue(isLinkSneaky('https://example.com/foo?bar baz'));\n        assert.isTrue(isLinkSneaky('https://example.com/foo?bar baz=qux'));\n        assert.isTrue(isLinkSneaky('https://example.com/foo?bar=baz qux'));\n        assert.isTrue(isLinkSneaky('https://example.com/foo?aquí=está'));\n        assert.isTrue(isLinkSneaky('https://example.com/foo?hello=\\x00world'));\n        assert.isTrue(isLinkSneaky('https://example.com/foo?hello=hello\\nworld'));\n        assert.isTrue(isLinkSneaky('https://example.com/foo?hello=😈world'));\n      });","file":"modules/link_previews_test.js","skipped":false,"dir":"test"},{"name":"returns false for no hash","suites":["Link previews","#isLinkSneaky","hash"],"updatePoint":{"line":212,"column":35,"index":10622},"line":212,"code":"      it('returns false for no hash', () => {\n        assert.isFalse(isLinkSneaky('https://example.com/foo'));\n        assert.isFalse(isLinkSneaky('https://example.com/foo#'));\n      });","file":"modules/link_previews_test.js","skipped":false,"dir":"test"},{"name":"returns false if the hash contains valid characters","suites":["Link previews","#isLinkSneaky","hash"],"updatePoint":{"line":216,"column":61,"index":10835},"line":216,"code":"      it('returns false if the hash contains valid characters', () => {\n        assert.isFalse(isLinkSneaky('https://example.com/foo#bar'));\n        assert.isFalse(isLinkSneaky(\"https://example.com/foo#:/[]@!$&'()*+,;=abc123-._~%\"));\n      });","file":"modules/link_previews_test.js","skipped":false,"dir":"test"},{"name":"returns true if the hash contains invalid characters","suites":["Link previews","#isLinkSneaky","hash"],"updatePoint":{"line":220,"column":62,"index":11080},"line":220,"code":"      it('returns true if the hash contains invalid characters', () => {\n        assert.isTrue(isLinkSneaky('https://example.com/foo#bar baz'));\n        assert.isTrue(isLinkSneaky('https://example.com/foo#bar baz=qux'));\n        assert.isTrue(isLinkSneaky('https://example.com/foo#bar=baz qux'));\n        assert.isTrue(isLinkSneaky('https://example.com/foo#aquí_está'));\n        assert.isTrue(isLinkSneaky('https://example.com/foo#hello\\x00world'));\n        assert.isTrue(isLinkSneaky('https://example.com/foo#hello\\nworld'));\n        assert.isTrue(isLinkSneaky('https://example.com/foo#hello😈world'));\n      });","file":"modules/link_previews_test.js","skipped":false,"dir":"test"},{"name":"should ignore messages that didn’t go through attachment migration","suites":["Message","createAttachmentDataWriter"],"updatePoint":{"line":19,"column":74,"index":545},"line":19,"code":"    it('should ignore messages that didn’t go through attachment migration', async () => {\n      const input = {\n        body: 'Imagine there is no heaven…',\n        schemaVersion: 2\n      };\n      const expected = {\n        body: 'Imagine there is no heaven…',\n        schemaVersion: 2\n      };\n      const writeExistingAttachmentData = () => {};\n      const actual = await Message.createAttachmentDataWriter({\n        writeExistingAttachmentData,\n        logger\n      })(input);\n      assert.deepEqual(actual, expected);\n    });","file":"modules/types/message_test.js","skipped":false,"dir":"test"},{"name":"should ignore messages without attachments","suites":["Message","createAttachmentDataWriter"],"updatePoint":{"line":35,"column":50,"index":1052},"line":35,"code":"    it('should ignore messages without attachments', async () => {\n      const input = {\n        body: 'Imagine there is no heaven…',\n        schemaVersion: 4,\n        attachments: []\n      };\n      const expected = {\n        body: 'Imagine there is no heaven…',\n        schemaVersion: 4,\n        attachments: []\n      };\n      const writeExistingAttachmentData = () => {};\n      const actual = await Message.createAttachmentDataWriter({\n        writeExistingAttachmentData,\n        logger\n      })(input);\n      assert.deepEqual(actual, expected);\n    });","file":"modules/types/message_test.js","skipped":false,"dir":"test"},{"name":"should write attachments to file system on original path","suites":["Message","createAttachmentDataWriter"],"updatePoint":{"line":53,"column":64,"index":1623},"line":53,"code":"    it('should write attachments to file system on original path', async () => {\n      const input = {\n        body: 'Imagine there is no heaven…',\n        schemaVersion: 4,\n        attachments: [{\n          path: 'ab/abcdefghi',\n          data: Bytes.fromString('It’s easy if you try')\n        }]\n      };\n      const expected = {\n        body: 'Imagine there is no heaven…',\n        schemaVersion: 4,\n        attachments: [{\n          path: 'ab/abcdefghi'\n        }],\n        contact: [],\n        preview: []\n      };\n      const writeExistingAttachmentData = attachment => {\n        assert.equal(attachment.path, 'ab/abcdefghi');\n        assert.strictEqual(Bytes.toString(attachment.data), 'It’s easy if you try');\n      };\n      const actual = await Message.createAttachmentDataWriter({\n        writeExistingAttachmentData,\n        logger\n      })(input);\n      assert.deepEqual(actual, expected);\n    });","file":"modules/types/message_test.js","skipped":false,"dir":"test"},{"name":"should process quote attachment thumbnails","suites":["Message","createAttachmentDataWriter"],"updatePoint":{"line":81,"column":50,"index":2519},"line":81,"code":"    it('should process quote attachment thumbnails', async () => {\n      const input = {\n        body: 'Imagine there is no heaven…',\n        schemaVersion: 4,\n        attachments: [],\n        quote: {\n          attachments: [{\n            thumbnail: {\n              path: 'ab/abcdefghi',\n              data: Bytes.fromString('It’s easy if you try')\n            }\n          }]\n        }\n      };\n      const expected = {\n        body: 'Imagine there is no heaven…',\n        schemaVersion: 4,\n        attachments: [],\n        quote: {\n          attachments: [{\n            thumbnail: {\n              path: 'ab/abcdefghi'\n            }\n          }]\n        },\n        contact: [],\n        preview: []\n      };\n      const writeExistingAttachmentData = attachment => {\n        assert.equal(attachment.path, 'ab/abcdefghi');\n        assert.strictEqual(Bytes.toString(attachment.data), 'It’s easy if you try');\n      };\n      const actual = await Message.createAttachmentDataWriter({\n        writeExistingAttachmentData,\n        logger\n      })(input);\n      assert.deepEqual(actual, expected);\n    });","file":"modules/types/message_test.js","skipped":false,"dir":"test"},{"name":"should process contact avatars","suites":["Message","createAttachmentDataWriter"],"updatePoint":{"line":119,"column":38,"index":3605},"line":119,"code":"    it('should process contact avatars', async () => {\n      const input = {\n        body: 'Imagine there is no heaven…',\n        schemaVersion: 4,\n        attachments: [],\n        contact: [{\n          name: 'john',\n          avatar: {\n            isProfile: false,\n            avatar: {\n              path: 'ab/abcdefghi',\n              data: Bytes.fromString('It’s easy if you try')\n            }\n          }\n        }]\n      };\n      const expected = {\n        body: 'Imagine there is no heaven…',\n        schemaVersion: 4,\n        attachments: [],\n        contact: [{\n          name: 'john',\n          avatar: {\n            isProfile: false,\n            avatar: {\n              path: 'ab/abcdefghi'\n            }\n          }\n        }],\n        preview: []\n      };\n      const writeExistingAttachmentData = attachment => {\n        assert.equal(attachment.path, 'ab/abcdefghi');\n        assert.strictEqual(Bytes.toString(attachment.data), 'It’s easy if you try');\n      };\n      const actual = await Message.createAttachmentDataWriter({\n        writeExistingAttachmentData,\n        logger\n      })(input);\n      assert.deepEqual(actual, expected);\n    });","file":"modules/types/message_test.js","skipped":false,"dir":"test"},{"name":"should ignore messages with previously inherited schema","suites":["Message","initializeSchemaVersion"],"updatePoint":{"line":162,"column":63,"index":4843},"line":162,"code":"    it('should ignore messages with previously inherited schema', () => {\n      const input = {\n        body: 'Imagine there is no heaven…',\n        schemaVersion: 2\n      };\n      const expected = {\n        body: 'Imagine there is no heaven…',\n        schemaVersion: 2\n      };\n      const actual = Message.initializeSchemaVersion({\n        message: input,\n        logger\n      });\n      assert.deepEqual(actual, expected);\n    });","file":"modules/types/message_test.js","skipped":false,"dir":"test"},{"name":"should initialize schema version to zero","suites":["Message","initializeSchemaVersion","for message without attachments"],"updatePoint":{"line":178,"column":50,"index":5318},"line":178,"code":"      it('should initialize schema version to zero', () => {\n        const input = {\n          body: 'Imagine there is no heaven…',\n          attachments: []\n        };\n        const expected = {\n          body: 'Imagine there is no heaven…',\n          attachments: [],\n          schemaVersion: 0\n        };\n        const actual = Message.initializeSchemaVersion({\n          message: input,\n          logger\n        });\n        assert.deepEqual(actual, expected);\n      });","file":"modules/types/message_test.js","skipped":false,"dir":"test"},{"name":"should inherit existing attachment schema version","suites":["Message","initializeSchemaVersion","for message with attachments"],"updatePoint":{"line":196,"column":59,"index":5861},"line":196,"code":"      it('should inherit existing attachment schema version', () => {\n        const input = {\n          body: 'Imagine there is no heaven…',\n          attachments: [{\n            contentType: 'image/jpeg',\n            fileName: 'lennon.jpg',\n            schemaVersion: 7\n          }]\n        };\n        const expected = {\n          body: 'Imagine there is no heaven…',\n          attachments: [{\n            contentType: 'image/jpeg',\n            fileName: 'lennon.jpg'\n          }],\n          schemaVersion: 7\n        };\n        const actual = Message.initializeSchemaVersion({\n          message: input,\n          logger\n        });\n        assert.deepEqual(actual, expected);\n      });","file":"modules/types/message_test.js","skipped":false,"dir":"test"},{"name":"should upgrade an unversioned message to the latest version","suites":["Message","upgradeSchema"],"updatePoint":{"line":222,"column":67,"index":6606},"line":222,"code":"    it('should upgrade an unversioned message to the latest version', async () => {\n      const input = {\n        attachments: [{\n          contentType: 'audio/aac',\n          flags: SignalService.AttachmentPointer.Flags.VOICE_MESSAGE,\n          data: Bytes.fromString('It’s easy if you try'),\n          fileName: 'test\\u202Dfig.exe',\n          size: 1111\n        }],\n        schemaVersion: 0\n      };\n      const expected = {\n        attachments: [{\n          contentType: 'audio/aac',\n          flags: 1,\n          path: 'abc/abcdefg',\n          fileName: 'test\\uFFFDfig.exe',\n          size: 1111\n        }],\n        hasAttachments: 1,\n        hasVisualMediaAttachments: undefined,\n        hasFileAttachments: undefined,\n        schemaVersion: Message.CURRENT_SCHEMA_VERSION,\n        contact: []\n      };\n      const expectedAttachmentData = 'It’s easy if you try';\n      const context = {\n        writeNewAttachmentData: async attachmentData => {\n          assert.strictEqual(Bytes.toString(attachmentData), expectedAttachmentData);\n          return 'abc/abcdefg';\n        },\n        getRegionCode: () => 'US',\n        getAbsoluteAttachmentPath: () => 'some/path/on/disk',\n        makeObjectUrl: () => 'blob://FAKE',\n        revokeObjectUrl: () => null,\n        getImageDimensions: () => ({\n          height: 10,\n          width: 15\n        }),\n        makeImageThumbnail: () => new Blob(),\n        makeVideoScreenshot: () => new Blob(),\n        logger: {\n          warn: () => null,\n          error: () => null\n        }\n      };\n      const actual = await Message.upgradeSchema(input, context);\n      assert.deepEqual(actual, expected);\n    });","file":"modules/types/message_test.js","skipped":false,"dir":"test"},{"name":"should return last valid message when any upgrade step fails","suites":["Message","upgradeSchema","with multiple upgrade steps"],"updatePoint":{"line":272,"column":70,"index":8311},"line":272,"code":"      it('should return last valid message when any upgrade step fails', async () => {\n        const input = {\n          attachments: [{\n            contentType: 'application/json',\n            data: null,\n            fileName: 'test\\u202Dfig.exe',\n            size: 1111\n          }],\n          schemaVersion: 0\n        };\n        const expected = {\n          attachments: [{\n            contentType: 'application/json',\n            data: null,\n            fileName: 'test\\u202Dfig.exe',\n            size: 1111\n          }],\n          hasUpgradedToVersion1: true,\n          schemaVersion: 1\n        };\n        const v1 = async message => ({\n          ...message,\n          hasUpgradedToVersion1: true\n        });\n        const v2 = async () => {\n          throw new Error('boom');\n        };\n        const v3 = async message => ({\n          ...message,\n          hasUpgradedToVersion3: true\n        });\n        const toVersion1 = Message._withSchemaVersion({\n          schemaVersion: 1,\n          upgrade: v1\n        });\n        const toVersion2 = Message._withSchemaVersion({\n          schemaVersion: 2,\n          upgrade: v2\n        });\n        const toVersion3 = Message._withSchemaVersion({\n          schemaVersion: 3,\n          upgrade: v3\n        });\n        const context = {\n          logger\n        };\n        const upgradeSchema = async message => toVersion3(await toVersion2(await toVersion1(message, context), context), context);\n        const actual = await upgradeSchema(input);\n        assert.deepEqual(actual, expected);\n      });","file":"modules/types/message_test.js","skipped":false,"dir":"test"},{"name":"should skip out-of-order upgrade steps","suites":["Message","upgradeSchema","with multiple upgrade steps"],"updatePoint":{"line":322,"column":48,"index":9837},"line":322,"code":"      it('should skip out-of-order upgrade steps', async () => {\n        const input = {\n          attachments: [{\n            contentType: 'application/json',\n            data: null,\n            fileName: 'test\\u202Dfig.exe',\n            size: 1111\n          }],\n          schemaVersion: 0\n        };\n        const expected = {\n          attachments: [{\n            contentType: 'application/json',\n            data: null,\n            fileName: 'test\\u202Dfig.exe',\n            size: 1111\n          }],\n          schemaVersion: 2,\n          hasUpgradedToVersion1: true,\n          hasUpgradedToVersion2: true\n        };\n        const v1 = async attachment => ({\n          ...attachment,\n          hasUpgradedToVersion1: true\n        });\n        const v2 = async attachment => ({\n          ...attachment,\n          hasUpgradedToVersion2: true\n        });\n        const v3 = async attachment => ({\n          ...attachment,\n          hasUpgradedToVersion3: true\n        });\n        const toVersion1 = Message._withSchemaVersion({\n          schemaVersion: 1,\n          upgrade: v1\n        });\n        const toVersion2 = Message._withSchemaVersion({\n          schemaVersion: 2,\n          upgrade: v2\n        });\n        const toVersion3 = Message._withSchemaVersion({\n          schemaVersion: 3,\n          upgrade: v3\n        });\n        const context = {\n          logger\n        };\n        // NOTE: We upgrade to 3 before 2, i.e. the pipeline should abort:\n        const upgradeSchema = async attachment => toVersion2(await toVersion3(await toVersion1(attachment, context), context), context);\n        const actual = await upgradeSchema(input);\n        assert.deepEqual(actual, expected);\n      });","file":"modules/types/message_test.js","skipped":false,"dir":"test"},{"name":"should require a version number","suites":["Message","_withSchemaVersion"],"updatePoint":{"line":378,"column":39,"index":11579},"line":378,"code":"    it('should require a version number', () => {\n      const toVersionX = () => {};\n      assert.throws(() => Message._withSchemaVersion({\n        schemaVersion: toVersionX,\n        upgrade: 2\n      }), '_withSchemaVersion: schemaVersion is invalid');\n    });","file":"modules/types/message_test.js","skipped":false,"dir":"test"},{"name":"should require an upgrade function","suites":["Message","_withSchemaVersion"],"updatePoint":{"line":385,"column":42,"index":11843},"line":385,"code":"    it('should require an upgrade function', () => {\n      assert.throws(() => Message._withSchemaVersion({\n        schemaVersion: 2,\n        upgrade: 3\n      }), '_withSchemaVersion: upgrade must be a function');\n    });","file":"modules/types/message_test.js","skipped":false,"dir":"test"},{"name":"should skip upgrading if message has already been upgraded","suites":["Message","_withSchemaVersion"],"updatePoint":{"line":391,"column":66,"index":12089},"line":391,"code":"    it('should skip upgrading if message has already been upgraded', async () => {\n      const upgrade = async message => ({\n        ...message,\n        foo: true\n      });\n      const upgradeWithVersion = Message._withSchemaVersion({\n        schemaVersion: 3,\n        upgrade\n      });\n      const input = {\n        id: 'guid-guid-guid-guid',\n        schemaVersion: 4\n      };\n      const expected = {\n        id: 'guid-guid-guid-guid',\n        schemaVersion: 4\n      };\n      const actual = await upgradeWithVersion(input, {\n        logger\n      });\n      assert.deepEqual(actual, expected);\n    });","file":"modules/types/message_test.js","skipped":false,"dir":"test"},{"name":"should return original message if upgrade function throws","suites":["Message","_withSchemaVersion"],"updatePoint":{"line":413,"column":65,"index":12690},"line":413,"code":"    it('should return original message if upgrade function throws', async () => {\n      const upgrade = async () => {\n        throw new Error('boom!');\n      };\n      const upgradeWithVersion = Message._withSchemaVersion({\n        schemaVersion: 3,\n        upgrade\n      });\n      const input = {\n        id: 'guid-guid-guid-guid',\n        schemaVersion: 0\n      };\n      const expected = {\n        id: 'guid-guid-guid-guid',\n        schemaVersion: 0\n      };\n      const actual = await upgradeWithVersion(input, {\n        logger\n      });\n      assert.deepEqual(actual, expected);\n    });","file":"modules/types/message_test.js","skipped":false,"dir":"test"},{"name":"should return original message if upgrade function returns null","suites":["Message","_withSchemaVersion"],"updatePoint":{"line":434,"column":71,"index":13286},"line":434,"code":"    it('should return original message if upgrade function returns null', async () => {\n      const upgrade = async () => null;\n      const upgradeWithVersion = Message._withSchemaVersion({\n        schemaVersion: 3,\n        upgrade\n      });\n      const input = {\n        id: 'guid-guid-guid-guid',\n        schemaVersion: 0\n      };\n      const expected = {\n        id: 'guid-guid-guid-guid',\n        schemaVersion: 0\n      };\n      const actual = await upgradeWithVersion(input, {\n        logger\n      });\n      assert.deepEqual(actual, expected);\n    });","file":"modules/types/message_test.js","skipped":false,"dir":"test"},{"name":"handles message with no quote","suites":["Message","_mapQuotedAttachments"],"updatePoint":{"line":455,"column":37,"index":13859},"line":455,"code":"    it('handles message with no quote', async () => {\n      const upgradeAttachment = sinon.stub().throws(new Error(\"Shouldn't be called\"));\n      const upgradeVersion = Message._mapQuotedAttachments(upgradeAttachment);\n      const message = {\n        body: 'hey there!'\n      };\n      const result = await upgradeVersion(message);\n      assert.deepEqual(result, message);\n    });","file":"modules/types/message_test.js","skipped":false,"dir":"test"},{"name":"handles quote with no attachments","suites":["Message","_mapQuotedAttachments"],"updatePoint":{"line":464,"column":41,"index":14244},"line":464,"code":"    it('handles quote with no attachments', async () => {\n      const upgradeAttachment = sinon.stub().throws(new Error(\"Shouldn't be called\"));\n      const upgradeVersion = Message._mapQuotedAttachments(upgradeAttachment);\n      const message = {\n        body: 'hey there!',\n        quote: {\n          text: 'hey!'\n        }\n      };\n      const expected = {\n        body: 'hey there!',\n        quote: {\n          text: 'hey!',\n          attachments: []\n        }\n      };\n      const result = await upgradeVersion(message, {\n        logger\n      });\n      assert.deepEqual(result, expected);\n    });","file":"modules/types/message_test.js","skipped":false,"dir":"test"},{"name":"handles zero attachments","suites":["Message","_mapQuotedAttachments"],"updatePoint":{"line":485,"column":32,"index":14837},"line":485,"code":"    it('handles zero attachments', async () => {\n      const upgradeAttachment = sinon.stub().throws(new Error(\"Shouldn't be called\"));\n      const upgradeVersion = Message._mapQuotedAttachments(upgradeAttachment);\n      const message = {\n        body: 'hey there!',\n        quote: {\n          text: 'hey!',\n          attachments: []\n        }\n      };\n      const result = await upgradeVersion(message, {\n        logger\n      });\n      assert.deepEqual(result, message);\n    });","file":"modules/types/message_test.js","skipped":false,"dir":"test"},{"name":"handles attachments with no thumbnail","suites":["Message","_mapQuotedAttachments"],"updatePoint":{"line":500,"column":45,"index":15330},"line":500,"code":"    it('handles attachments with no thumbnail', async () => {\n      const upgradeAttachment = sinon.stub().throws(new Error(\"Shouldn't be called\"));\n      const upgradeVersion = Message._mapQuotedAttachments(upgradeAttachment);\n      const message = {\n        body: 'hey there!',\n        quote: {\n          text: 'hey!',\n          attachments: [{\n            fileName: 'manifesto.txt',\n            contentType: 'text/plain'\n          }]\n        }\n      };\n      const result = await upgradeVersion(message, {\n        logger\n      });\n      assert.deepEqual(result, message);\n    });","file":"modules/types/message_test.js","skipped":false,"dir":"test"},{"name":"does not eliminate thumbnails with missing data field","suites":["Message","_mapQuotedAttachments"],"updatePoint":{"line":518,"column":61,"index":15929},"line":518,"code":"    it('does not eliminate thumbnails with missing data field', async () => {\n      const upgradeAttachment = sinon.stub().returns({\n        fileName: 'processed!'\n      });\n      const upgradeVersion = Message._mapQuotedAttachments(upgradeAttachment);\n      const message = {\n        body: 'hey there!',\n        quote: {\n          text: 'hey!',\n          attachments: [{\n            fileName: 'cat.gif',\n            contentType: 'image/gif',\n            thumbnail: {\n              fileName: 'not yet downloaded!'\n            }\n          }]\n        }\n      };\n      const expected = {\n        body: 'hey there!',\n        quote: {\n          text: 'hey!',\n          attachments: [{\n            contentType: 'image/gif',\n            fileName: 'cat.gif',\n            thumbnail: {\n              fileName: 'processed!'\n            }\n          }]\n        }\n      };\n      const result = await upgradeVersion(message, {\n        logger\n      });\n      assert.deepEqual(result, expected);\n    });","file":"modules/types/message_test.js","skipped":false,"dir":"test"},{"name":"calls provided async function for each quoted attachment","suites":["Message","_mapQuotedAttachments"],"updatePoint":{"line":554,"column":64,"index":16919},"line":554,"code":"    it('calls provided async function for each quoted attachment', async () => {\n      const upgradeAttachment = sinon.stub().resolves({\n        path: '/new/path/on/disk'\n      });\n      const upgradeVersion = Message._mapQuotedAttachments(upgradeAttachment);\n      const message = {\n        body: 'hey there!',\n        quote: {\n          text: 'hey!',\n          attachments: [{\n            thumbnail: {\n              data: 'data is here'\n            }\n          }]\n        }\n      };\n      const expected = {\n        body: 'hey there!',\n        quote: {\n          text: 'hey!',\n          attachments: [{\n            thumbnail: {\n              path: '/new/path/on/disk'\n            }\n          }]\n        }\n      };\n      const result = await upgradeVersion(message, {\n        logger\n      });\n      assert.deepEqual(result, expected);\n    });","file":"modules/types/message_test.js","skipped":false,"dir":"test"},{"name":"handles message with no contact field","suites":["Message","_mapContact"],"updatePoint":{"line":588,"column":45,"index":17784},"line":588,"code":"    it('handles message with no contact field', async () => {\n      const upgradeContact = sinon.stub().throws(new Error(\"Shouldn't be called\"));\n      const upgradeVersion = Message._mapContact(upgradeContact);\n      const message = {\n        body: 'hey there!'\n      };\n      const expected = {\n        body: 'hey there!',\n        contact: []\n      };\n      const result = await upgradeVersion(message);\n      assert.deepEqual(result, expected);\n    });","file":"modules/types/message_test.js","skipped":false,"dir":"test"},{"name":"handles one contact","suites":["Message","_mapContact"],"updatePoint":{"line":601,"column":27,"index":18222},"line":601,"code":"    it('handles one contact', async () => {\n      const upgradeContact = contact => Promise.resolve(contact);\n      const upgradeVersion = Message._mapContact(upgradeContact);\n      const message = {\n        body: 'hey there!',\n        contact: [{\n          name: {\n            displayName: 'Someone somewhere'\n          }\n        }]\n      };\n      const expected = {\n        body: 'hey there!',\n        contact: [{\n          name: {\n            displayName: 'Someone somewhere'\n          }\n        }]\n      };\n      const result = await upgradeVersion(message);\n      assert.deepEqual(result, expected);\n    });","file":"modules/types/message_test.js","skipped":false,"dir":"test"},{"name":"should return true for `image/jpeg`","suites":["MIME","isJPEG"],"updatePoint":{"line":10,"column":43,"index":272},"line":10,"code":"    it('should return true for `image/jpeg`', () => {\n      assert.isTrue(MIME.isJPEG('image/jpeg'));\n    });","file":"modules/types/mime_test.js","skipped":false,"dir":"test"},{"name":"should return false for \\`\\`","suites":["MIME","isJPEG"],"updatePoint":{"line":16,"column":46,"index":585},"line":16,"code":"      it(`should return false for \\`${value}\\``, () => {\n        assert.isFalse(MIME.isJPEG(value));\n      });","file":"modules/types/mime_test.js","skipped":false,"dir":"test"},{"name":"returns successfully if this._events is falsey","suites":["ReliableTrigger","trigger"],"updatePoint":{"line":20,"column":54,"index":406},"line":20,"code":"    it('returns successfully if this._events is falsey', () => {\n      model._events = null;\n      model.trigger('click');\n    });","file":"reliable_trigger_test.js","skipped":false,"dir":"test"},{"name":"handles map of events to trigger","suites":["ReliableTrigger","trigger"],"updatePoint":{"line":24,"column":40,"index":523},"line":24,"code":"    it('handles map of events to trigger', () => {\n      let a = 0;\n      let b = 0;\n      model.on('a', arg => {\n        a = arg;\n      });\n      model.on('b', arg => {\n        b = arg;\n      });\n      model.trigger({\n        a: 1,\n        b: 2\n      });\n      assert.strictEqual(a, 1);\n      assert.strictEqual(b, 2);\n    });","file":"reliable_trigger_test.js","skipped":false,"dir":"test"},{"name":"handles space-separated list of events to trigger","suites":["ReliableTrigger","trigger"],"updatePoint":{"line":40,"column":57,"index":868},"line":40,"code":"    it('handles space-separated list of events to trigger', () => {\n      let a = false;\n      let b = false;\n      model.on('a', () => {\n        a = true;\n      });\n      model.on('b', () => {\n        b = true;\n      });\n      model.trigger('a b');\n      assert.strictEqual(a, true);\n      assert.strictEqual(b, true);\n    });","file":"reliable_trigger_test.js","skipped":false,"dir":"test"},{"name":"calls all clients registered for \"all\" event","suites":["ReliableTrigger","trigger"],"updatePoint":{"line":53,"column":52,"index":1191},"line":53,"code":"    it('calls all clients registered for \"all\" event', () => {\n      let count = 0;\n      model.on('all', () => {\n        count += 1;\n      });\n      model.trigger('left');\n      model.trigger('right');\n      assert.strictEqual(count, 2);\n    });","file":"reliable_trigger_test.js","skipped":false,"dir":"test"},{"name":"calls all clients registered for target event","suites":["ReliableTrigger","trigger"],"updatePoint":{"line":62,"column":53,"index":1439},"line":62,"code":"    it('calls all clients registered for target event', () => {\n      let a = false;\n      let b = false;\n      model.on('event', () => {\n        a = true;\n      });\n      model.on('event', () => {\n        b = true;\n      });\n      model.trigger('event');\n      assert.strictEqual(a, true);\n      assert.strictEqual(b, true);\n    });","file":"reliable_trigger_test.js","skipped":false,"dir":"test"},{"name":"successfully returns and calls all clients even if first failed","suites":["ReliableTrigger","trigger"],"updatePoint":{"line":75,"column":71,"index":1791},"line":75,"code":"    it('successfully returns and calls all clients even if first failed', () => {\n      let a = false;\n      let b = false;\n      model.on('event', () => {\n        a = true;\n        throw new Error('a is set, but exception is thrown');\n      });\n      model.on('event', () => {\n        b = true;\n      });\n      model.trigger('event');\n      assert.strictEqual(a, true);\n      assert.strictEqual(b, true);\n    });","file":"reliable_trigger_test.js","skipped":false,"dir":"test"},{"name":"calls clients with no args","suites":["ReliableTrigger","trigger"],"updatePoint":{"line":89,"column":34,"index":2168},"line":89,"code":"    it('calls clients with no args', () => {\n      let called = false;\n      model.on('event', () => {\n        called = true;\n      });\n      model.trigger('event');\n      assert.strictEqual(called, true);\n    });","file":"reliable_trigger_test.js","skipped":false,"dir":"test"},{"name":"calls clients with 1 arg","suites":["ReliableTrigger","trigger"],"updatePoint":{"line":97,"column":32,"index":2380},"line":97,"code":"    it('calls clients with 1 arg', () => {\n      let args;\n      model.on('event', (...eventArgs) => {\n        args = eventArgs;\n      });\n      model.trigger('event', 1);\n      assert.strictEqual(args[0], 1);\n    });","file":"reliable_trigger_test.js","skipped":false,"dir":"test"},{"name":"calls clients with 2 args","suites":["ReliableTrigger","trigger"],"updatePoint":{"line":105,"column":33,"index":2599},"line":105,"code":"    it('calls clients with 2 args', () => {\n      let args;\n      model.on('event', (...eventArgs) => {\n        args = eventArgs;\n      });\n      model.trigger('event', 1, 2);\n      assert.strictEqual(args[0], 1);\n      assert.strictEqual(args[1], 2);\n    });","file":"reliable_trigger_test.js","skipped":false,"dir":"test"},{"name":"calls clients with 3 args","suites":["ReliableTrigger","trigger"],"updatePoint":{"line":114,"column":33,"index":2859},"line":114,"code":"    it('calls clients with 3 args', () => {\n      let args;\n      model.on('event', (...eventArgs) => {\n        args = eventArgs;\n      });\n      model.trigger('event', 1, 2, 3);\n      assert.strictEqual(args[0], 1);\n      assert.strictEqual(args[1], 2);\n      assert.strictEqual(args[2], 3);\n    });","file":"reliable_trigger_test.js","skipped":false,"dir":"test"},{"name":"calls clients with 4+ args","suites":["ReliableTrigger","trigger"],"updatePoint":{"line":124,"column":34,"index":3161},"line":124,"code":"    it('calls clients with 4+ args', () => {\n      let args;\n      model.on('event', (...eventArgs) => {\n        args = eventArgs;\n      });\n      model.trigger('event', 1, 2, 3, 4);\n      assert.strictEqual(args[0], 1);\n      assert.strictEqual(args[1], 2);\n      assert.strictEqual(args[2], 3);\n      assert.strictEqual(args[3], 4);\n    });","file":"reliable_trigger_test.js","skipped":false,"dir":"test"},{"name":"returns undefined for invalid URLs","suites":["Stickers","getDataFromLink"],"updatePoint":{"line":11,"column":42,"index":245},"line":11,"code":"    it('returns undefined for invalid URLs', () => {\n      assert.isUndefined(Stickers.getDataFromLink('https://'));\n      assert.isUndefined(Stickers.getDataFromLink('signal.art/addstickers/'));\n    });","file":"stickers_test.js","skipped":false,"dir":"test"},{"name":"returns undefined for URLs that don't have a hash","suites":["Stickers","getDataFromLink"],"updatePoint":{"line":15,"column":57,"index":464},"line":15,"code":"    it(\"returns undefined for URLs that don't have a hash\", () => {\n      assert.isUndefined(Stickers.getDataFromLink('https://signal.art/addstickers/'));\n      assert.isUndefined(Stickers.getDataFromLink('https://signal.art/addstickers/#'));\n    });","file":"stickers_test.js","skipped":false,"dir":"test"},{"name":"returns undefined when no key or pack ID is found","suites":["Stickers","getDataFromLink"],"updatePoint":{"line":19,"column":57,"index":715},"line":19,"code":"    it('returns undefined when no key or pack ID is found', () => {\n      assert.isUndefined(Stickers.getDataFromLink('https://signal.art/addstickers/#pack_id=c8c83285b547872ac4c589d64a6edd6a'));\n      assert.isUndefined(Stickers.getDataFromLink('https://signal.art/addstickers/#pack_id=c8c83285b547872ac4c589d64a6edd6a&pack_key='));\n      assert.isUndefined(Stickers.getDataFromLink('https://signal.art/addstickers/#pack_key=59bb3a8860f0e6a5a83a5337a015c8d55ecd2193f82d77202f3b8112a845636e'));\n      assert.isUndefined(Stickers.getDataFromLink('https://signal.art/addstickers/#pack_key=59bb3a8860f0e6a5a83a5337a015c8d55ecd2193f82d77202f3b8112a845636e&pack_id='));\n    });","file":"stickers_test.js","skipped":false,"dir":"test"},{"name":"returns undefined when the pack ID is invalid","suites":["Stickers","getDataFromLink"],"updatePoint":{"line":25,"column":53,"index":1384},"line":25,"code":"    it('returns undefined when the pack ID is invalid', () => {\n      assert.isUndefined(Stickers.getDataFromLink('https://signal.art/addstickers/#pack_id=garbage&pack_key=59bb3a8860f0e6a5a83a5337a015c8d55ecd2193f82d77202f3b8112a845636e'));\n    });","file":"stickers_test.js","skipped":false,"dir":"test"},{"name":"returns undefined if the ID or key are passed as arrays","suites":["Stickers","getDataFromLink"],"updatePoint":{"line":28,"column":63,"index":1643},"line":28,"code":"    it('returns undefined if the ID or key are passed as arrays', () => {\n      assert.isUndefined(Stickers.getDataFromLink('https://signal.art/addstickers/#pack_id[]=c8c83285b547872ac4c589d64a6edd6a&pack_key=59bb3a8860f0e6a5a83a5337a015c8d55ecd2193f82d77202f3b8112a845636e'));\n      assert.isUndefined(Stickers.getDataFromLink('https://signal.art/addstickers/#pack_id=c8c83285b547872ac4c589d64a6edd6a&pack_key[]=59bb3a8860f0e6a5a83a5337a015c8d55ecd2193f82d77202f3b8112a845636e'));\n    });","file":"stickers_test.js","skipped":false,"dir":"test"},{"name":"parses the ID and key from the hash","suites":["Stickers","getDataFromLink"],"updatePoint":{"line":32,"column":43,"index":2113},"line":32,"code":"    it('parses the ID and key from the hash', () => {\n      assert.deepEqual(Stickers.getDataFromLink('https://signal.art/addstickers/#pack_id=c8c83285b547872ac4c589d64a6edd6a&pack_key=59bb3a8860f0e6a5a83a5337a015c8d55ecd2193f82d77202f3b8112a845636e'), {\n        id: 'c8c83285b547872ac4c589d64a6edd6a',\n        key: '59bb3a8860f0e6a5a83a5337a015c8d55ecd2193f82d77202f3b8112a845636e'\n      });\n    });","file":"stickers_test.js","skipped":false,"dir":"test"},{"name":"ignores additional hash parameters","suites":["Stickers","getDataFromLink"],"updatePoint":{"line":38,"column":42,"index":2513},"line":38,"code":"    it('ignores additional hash parameters', () => {\n      assert.deepEqual(Stickers.getDataFromLink('https://signal.art/addstickers/#pack_id=c8c83285b547872ac4c589d64a6edd6a&pack_key=59bb3a8860f0e6a5a83a5337a015c8d55ecd2193f82d77202f3b8112a845636e&pack_foo=bar'), {\n        id: 'c8c83285b547872ac4c589d64a6edd6a',\n        key: '59bb3a8860f0e6a5a83a5337a015c8d55ecd2193f82d77202f3b8112a845636e'\n      });\n    });","file":"stickers_test.js","skipped":false,"dir":"test"},{"name":"only parses the first ID and key from the hash if more than one is supplied","suites":["Stickers","getDataFromLink"],"updatePoint":{"line":44,"column":83,"index":2967},"line":44,"code":"    it('only parses the first ID and key from the hash if more than one is supplied', () => {\n      assert.deepEqual(Stickers.getDataFromLink('https://signal.art/addstickers/#pack_id=c8c83285b547872ac4c589d64a6edd6a&pack_key=59bb3a8860f0e6a5a83a5337a015c8d55ecd2193f82d77202f3b8112a845636e&pack_id=extra&pack_key=extra'), {\n        id: 'c8c83285b547872ac4c589d64a6edd6a',\n        key: '59bb3a8860f0e6a5a83a5337a015c8d55ecd2193f82d77202f3b8112a845636e'\n      });\n    });","file":"stickers_test.js","skipped":false,"dir":"test"},{"name":"returns false for non-strings","suites":["Stickers","isPackIdValid"],"updatePoint":{"line":52,"column":37,"index":3433},"line":52,"code":"    it('returns false for non-strings', () => {\n      assert.isFalse(Stickers.isPackIdValid(undefined));\n      assert.isFalse(Stickers.isPackIdValid(null));\n      assert.isFalse(Stickers.isPackIdValid(123));\n      assert.isFalse(Stickers.isPackIdValid(123));\n      assert.isFalse(Stickers.isPackIdValid(['b9439fa5fdc8b9873fe64f01b88b8ccf']));\n      assert.isFalse(\n      // eslint-disable-next-line no-new-wrappers\n      Stickers.isPackIdValid(new String('b9439fa5fdc8b9873fe64f01b88b8ccf')));\n    });","file":"stickers_test.js","skipped":false,"dir":"test"},{"name":"returns false for invalid pack IDs","suites":["Stickers","isPackIdValid"],"updatePoint":{"line":62,"column":42,"index":3940},"line":62,"code":"    it('returns false for invalid pack IDs', () => {\n      assert.isFalse(Stickers.isPackIdValid(''));\n      assert.isFalse(Stickers.isPackIdValid('x9439fa5fdc8b9873fe64f01b88b8ccf'));\n      assert.isFalse(\n      // This is one character too short.\n      Stickers.isPackIdValid('b9439fa5fdc8b9873fe64f01b88b8cc'));\n      assert.isFalse(\n      // This is one character too long.\n      Stickers.isPackIdValid('b9439fa5fdc8b9873fe64f01b88b8ccfa'));\n    });","file":"stickers_test.js","skipped":false,"dir":"test"},{"name":"returns true for valid pack IDs","suites":["Stickers","isPackIdValid"],"updatePoint":{"line":72,"column":39,"index":4391},"line":72,"code":"    it('returns true for valid pack IDs', () => {\n      assert.isTrue(Stickers.isPackIdValid('b9439fa5fdc8b9873fe64f01b88b8ccf'));\n      assert.isTrue(Stickers.isPackIdValid('3eff225a1036a58a7530b312dd92f8d8'));\n      assert.isTrue(Stickers.isPackIdValid('DDFD48B8097DA7A4E928192B10963F6A'));\n    });","file":"stickers_test.js","skipped":false,"dir":"test"},{"name":"redacts pack IDs","suites":["Stickers","redactPackId"],"updatePoint":{"line":79,"column":24,"index":4718},"line":79,"code":"    it('redacts pack IDs', () => {\n      assert.strictEqual(Stickers.redactPackId('b9439fa5fdc8b9873fe64f01b88b8ccf'), '[REDACTED]ccf');\n    });","file":"stickers_test.js","skipped":false,"dir":"test"},{"name":"renders a template with render_attributes","suites":["Whisper.View"],"updatePoint":{"line":7,"column":47,"index":191},"line":7,"code":"  it('renders a template with render_attributes', () => {\n    const ViewClass = Whisper.View.extend({\n      template: '<div>{{ variable }}</div>',\n      render_attributes: {\n        variable: 'value'\n      }\n    });\n    const view = new ViewClass();\n    view.render();\n    assert.strictEqual(view.$el.html(), '<div>value</div>');\n  });","file":"views/whisper_view_test.js","skipped":false,"dir":"test"},{"name":"renders a template with no render_attributes","suites":["Whisper.View"],"updatePoint":{"line":18,"column":50,"index":530},"line":18,"code":"  it('renders a template with no render_attributes', () => {\n    const ViewClass = Whisper.View.extend({\n      template: '<div>static text</div>'\n    });\n    const view = new ViewClass();\n    view.render();\n    assert.strictEqual(view.$el.html(), '<div>static text</div>');\n  });","file":"views/whisper_view_test.js","skipped":false,"dir":"test"},{"name":"renders a template function with render_attributes function","suites":["Whisper.View"],"updatePoint":{"line":26,"column":65,"index":825},"line":26,"code":"  it('renders a template function with render_attributes function', () => {\n    const ViewClass = Whisper.View.extend({\n      template() {\n        return '<div>{{ variable }}</div>';\n      },\n      render_attributes() {\n        return {\n          variable: 'value'\n        };\n      }\n    });\n    const view = new ViewClass();\n    view.render();\n    assert.strictEqual(view.$el.html(), '<div>value</div>');\n  });","file":"views/whisper_view_test.js","skipped":false,"dir":"test"}]}