{
    "repo": "jquery/jquery",
    "url": "https://github.com/jquery/jquery",
    "branch": "main",
    "configs": [
        {
            "package": "jquery",
            "lang": "js",
            "dir": "test",
            "framework": "qunit",
            "pattern": "**/*.{js,ts}"
        }
    ],
    "tests": [
        {
            "name": "Unit Testing Environment",
            "suites": [
                "ajax"
            ],
            "updatePoint": {
                "line": 9,
                "column": 38
            },
            "line": 9,
            "code": "  QUnit.test(\"Unit Testing Environment\", function (assert) {",
            "file": "unit/ajax.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.ajax() - retry with jQuery.ajax( this )",
            "suites": [
                "ajax"
            ],
            "updatePoint": {
                "line": 201,
                "column": 60
            },
            "line": 201,
            "code": "  QUnit.test(\"jQuery.ajax() - retry with jQuery.ajax( this )\", function (assert) {",
            "file": "unit/ajax.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.ajax(), jQuery.get[Script|JSON](), jQuery.post(), pass-through request object",
            "suites": [
                "ajax"
            ],
            "updatePoint": {
                "line": 813,
                "column": 98
            },
            "line": 813,
            "code": "  QUnit.test(\"jQuery.ajax(), jQuery.get[Script|JSON](), jQuery.post(), pass-through request object\", function (assert) {",
            "file": "unit/ajax.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.ajax() - statusText",
            "suites": [
                "ajax"
            ],
            "updatePoint": {
                "line": 1462,
                "column": 40
            },
            "line": 1462,
            "code": "  QUnit.test(\"jQuery.ajax() - statusText\", function (assert) {",
            "file": "unit/ajax.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.ajax() - statusCode",
            "suites": [
                "ajax"
            ],
            "updatePoint": {
                "line": 1474,
                "column": 40
            },
            "line": 1474,
            "code": "  QUnit.test(\"jQuery.ajax() - statusCode\", function (assert) {",
            "file": "unit/ajax.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "#7531 - jQuery.ajax() - Location object as url",
            "suites": [
                "ajax"
            ],
            "updatePoint": {
                "line": 1665,
                "column": 60
            },
            "line": 1665,
            "code": "  QUnit.test(\"#7531 - jQuery.ajax() - Location object as url\", function (assert) {",
            "file": "unit/ajax.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "#9887 - jQuery.ajax() - Context with circular references (#9887)",
            "suites": [
                "ajax"
            ],
            "updatePoint": {
                "line": 1753,
                "column": 78
            },
            "line": 1753,
            "code": "  QUnit.test(\"#9887 - jQuery.ajax() - Context with circular references (#9887)\", function (assert) {",
            "file": "unit/ajax.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "#11743 - jQuery.ajax() - script, throws exception",
            "suites": [
                "ajax"
            ],
            "updatePoint": {
                "line": 1840,
                "column": 63
            },
            "line": 1840,
            "code": "  QUnit.test(\"#11743 - jQuery.ajax() - script, throws exception\", function (assert) {",
            "file": "unit/ajax.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.ajaxSetup()",
            "suites": [
                "ajax"
            ],
            "updatePoint": {
                "line": 2099,
                "column": 32
            },
            "line": 2099,
            "code": "  QUnit.test(\"jQuery.ajaxSetup()\", function (assert) {",
            "file": "unit/ajax.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.ajaxSetup({ timeout: Number }) - with global timeout",
            "suites": [
                "ajax"
            ],
            "updatePoint": {
                "line": 2111,
                "column": 73
            },
            "line": 2111,
            "code": "  QUnit.test(\"jQuery.ajaxSetup({ timeout: Number }) - with global timeout\", function (assert) {",
            "file": "unit/ajax.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.ajaxSetup({ timeout: Number }) with localtimeout",
            "suites": [
                "ajax"
            ],
            "updatePoint": {
                "line": 2140,
                "column": 69
            },
            "line": 2140,
            "code": "  QUnit.test(\"jQuery.ajaxSetup({ timeout: Number }) with localtimeout\", function (assert) {",
            "file": "unit/ajax.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "#11264 - jQuery.domManip() - no side effect because of ajaxSetup or global events",
            "suites": [
                "ajax"
            ],
            "updatePoint": {
                "line": 2161,
                "column": 95
            },
            "line": 2161,
            "code": "  QUnit.test(\"#11264 - jQuery.domManip() - no side effect because of ajaxSetup or global events\", function (assert) {",
            "file": "unit/ajax.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery#load() - always use GET method even if it overrided through ajaxSetup (#11264)",
            "suites": [
                "ajax"
            ],
            "updatePoint": {
                "line": 2172,
                "column": 99
            },
            "line": 2172,
            "code": "  QUnit.test(\"jQuery#load() - always use GET method even if it overrided through ajaxSetup (#11264)\", function (assert) {",
            "file": "unit/ajax.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery#load() - should resolve with correct context",
            "suites": [
                "ajax"
            ],
            "updatePoint": {
                "line": 2183,
                "column": 65
            },
            "line": 2183,
            "code": "  QUnit.test(\"jQuery#load() - should resolve with correct context\", function (assert) {",
            "file": "unit/ajax.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "#11402 - jQuery.domManip() - script in comments are properly evaluated",
            "suites": [
                "ajax"
            ],
            "updatePoint": {
                "line": 2197,
                "column": 84
            },
            "line": 2197,
            "code": "  QUnit.test(\"#11402 - jQuery.domManip() - script in comments are properly evaluated\", function (assert) {",
            "file": "unit/ajax.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.get( String, Hash, Function ) - parse xml and use text() on nodes",
            "suites": [
                "ajax"
            ],
            "updatePoint": {
                "line": 2202,
                "column": 86
            },
            "line": 2202,
            "code": "  QUnit.test(\"jQuery.get( String, Hash, Function ) - parse xml and use text() on nodes\", function (assert) {",
            "file": "unit/ajax.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "#8277 - jQuery.get( String, Function ) - data in ajaxSettings",
            "suites": [
                "ajax"
            ],
            "updatePoint": {
                "line": 2215,
                "column": 75
            },
            "line": 2215,
            "code": "  QUnit.test(\"#8277 - jQuery.get( String, Function ) - data in ajaxSettings\", function (assert) {",
            "file": "unit/ajax.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.getJSON( String, Hash, Function ) - JSON array",
            "suites": [
                "ajax"
            ],
            "updatePoint": {
                "line": 2227,
                "column": 67
            },
            "line": 2227,
            "code": "  QUnit.test(\"jQuery.getJSON( String, Hash, Function ) - JSON array\", function (assert) {",
            "file": "unit/ajax.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.getJSON( String, Function ) - JSON object",
            "suites": [
                "ajax"
            ],
            "updatePoint": {
                "line": 2241,
                "column": 62
            },
            "line": 2241,
            "code": "  QUnit.test(\"jQuery.getJSON( String, Function ) - JSON object\", function (assert) {",
            "file": "unit/ajax.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.getJSON( String, Function ) - JSON object with absolute url to local content",
            "suites": [
                "ajax"
            ],
            "updatePoint": {
                "line": 2252,
                "column": 97
            },
            "line": 2252,
            "code": "  QUnit.test(\"jQuery.getJSON( String, Function ) - JSON object with absolute url to local content\", function (assert) {",
            "file": "unit/ajax.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.getScript( String, Function ) - with callback",
            "suites": [
                "ajax"
            ],
            "updatePoint": {
                "line": 2273,
                "column": 66
            },
            "line": 2273,
            "code": "  QUnit.test(\"jQuery.getScript( String, Function ) - with callback\", function (assert) {",
            "file": "unit/ajax.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.getScript( String, Function ) - no callback",
            "suites": [
                "ajax"
            ],
            "updatePoint": {
                "line": 2282,
                "column": 64
            },
            "line": 2282,
            "code": "  QUnit.test(\"jQuery.getScript( String, Function ) - no callback\", function (assert) {",
            "file": "unit/ajax.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "#8082 - jQuery.getScript( String, Function ) - source as responseText",
            "suites": [
                "ajax"
            ],
            "updatePoint": {
                "line": 2287,
                "column": 83
            },
            "line": 2287,
            "code": "  QUnit.test(\"#8082 - jQuery.getScript( String, Function ) - source as responseText\", function (assert) {",
            "file": "unit/ajax.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.getScript( Object ) - with callback",
            "suites": [
                "ajax"
            ],
            "updatePoint": {
                "line": 2296,
                "column": 56
            },
            "line": 2296,
            "code": "  QUnit.test(\"jQuery.getScript( Object ) - with callback\", function (assert) {",
            "file": "unit/ajax.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.getScript( Object ) - no callback",
            "suites": [
                "ajax"
            ],
            "updatePoint": {
                "line": 2308,
                "column": 54
            },
            "line": 2308,
            "code": "  QUnit.test(\"jQuery.getScript( Object ) - no callback\", function (assert) {",
            "file": "unit/ajax.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.fn.load( String )",
            "suites": [
                "ajax"
            ],
            "updatePoint": {
                "line": 2317,
                "column": 38
            },
            "line": 2317,
            "code": "  QUnit.test(\"jQuery.fn.load( String )\", function (assert) {",
            "file": "unit/ajax.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.fn.load() - 404 error callbacks",
            "suites": [
                "ajax"
            ],
            "updatePoint": {
                "line": 2326,
                "column": 52
            },
            "line": 2326,
            "code": "  QUnit.test(\"jQuery.fn.load() - 404 error callbacks\", function (assert) {",
            "file": "unit/ajax.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.fn.load( String, null )",
            "suites": [
                "ajax"
            ],
            "updatePoint": {
                "line": 2336,
                "column": 44
            },
            "line": 2336,
            "code": "  QUnit.test(\"jQuery.fn.load( String, null )\", function (assert) {",
            "file": "unit/ajax.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.fn.load( String, undefined )",
            "suites": [
                "ajax"
            ],
            "updatePoint": {
                "line": 2346,
                "column": 49
            },
            "line": 2346,
            "code": "  QUnit.test(\"jQuery.fn.load( String, undefined )\", function (assert) {",
            "file": "unit/ajax.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.fn.load( URL_SELECTOR )",
            "suites": [
                "ajax"
            ],
            "updatePoint": {
                "line": 2356,
                "column": 44
            },
            "line": 2356,
            "code": "  QUnit.test(\"jQuery.fn.load( URL_SELECTOR )\", function (assert) {",
            "file": "unit/ajax.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.fn.load( URL_SELECTOR with spaces )",
            "suites": [
                "ajax"
            ],
            "updatePoint": {
                "line": 2365,
                "column": 56
            },
            "line": 2365,
            "code": "  QUnit.test(\"jQuery.fn.load( URL_SELECTOR with spaces )\", function (assert) {",
            "file": "unit/ajax.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.fn.load( URL_SELECTOR with non-HTML whitespace(#3003) )",
            "suites": [
                "ajax"
            ],
            "updatePoint": {
                "line": 2375,
                "column": 76
            },
            "line": 2375,
            "code": "  QUnit.test(\"jQuery.fn.load( URL_SELECTOR with non-HTML whitespace(#3003) )\", function (assert) {",
            "file": "unit/ajax.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.fn.load( String, Function ) - simple: inject text into DOM",
            "suites": [
                "ajax"
            ],
            "updatePoint": {
                "line": 2383,
                "column": 79
            },
            "line": 2383,
            "code": "  QUnit.test(\"jQuery.fn.load( String, Function ) - simple: inject text into DOM\", function (assert) {",
            "file": "unit/ajax.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.fn.load( String, Function ) - check scripts",
            "suites": [
                "ajax"
            ],
            "updatePoint": {
                "line": 2391,
                "column": 64
            },
            "line": 2391,
            "code": "  QUnit.test(\"jQuery.fn.load( String, Function ) - check scripts\", function (assert) {",
            "file": "unit/ajax.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.fn.load( String, Function ) - check file with only a script tag",
            "suites": [
                "ajax"
            ],
            "updatePoint": {
                "line": 2410,
                "column": 84
            },
            "line": 2410,
            "code": "  QUnit.test(\"jQuery.fn.load( String, Function ) - check file with only a script tag\", function (assert) {",
            "file": "unit/ajax.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.fn.load( String, Function ) - dataFilter in ajaxSettings",
            "suites": [
                "ajax"
            ],
            "updatePoint": {
                "line": 2420,
                "column": 77
            },
            "line": 2420,
            "code": "  QUnit.test(\"jQuery.fn.load( String, Function ) - dataFilter in ajaxSettings\", function (assert) {",
            "file": "unit/ajax.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.fn.load( String, Object, Function )",
            "suites": [
                "ajax"
            ],
            "updatePoint": {
                "line": 2434,
                "column": 56
            },
            "line": 2434,
            "code": "  QUnit.test(\"jQuery.fn.load( String, Object, Function )\", function (assert) {",
            "file": "unit/ajax.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.fn.load( String, String, Function )",
            "suites": [
                "ajax"
            ],
            "updatePoint": {
                "line": 2446,
                "column": 56
            },
            "line": 2446,
            "code": "  QUnit.test(\"jQuery.fn.load( String, String, Function )\", function (assert) {",
            "file": "unit/ajax.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.fn.load() - callbacks get the correct parameters",
            "suites": [
                "ajax"
            ],
            "updatePoint": {
                "line": 2456,
                "column": 69
            },
            "line": 2456,
            "code": "  QUnit.test(\"jQuery.fn.load() - callbacks get the correct parameters\", function (assert) {",
            "file": "unit/ajax.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "#2046 - jQuery.fn.load( String, Function ) with ajaxSetup on dataType json",
            "suites": [
                "ajax"
            ],
            "updatePoint": {
                "line": 2487,
                "column": 88
            },
            "line": 2487,
            "code": "  QUnit.test(\"#2046 - jQuery.fn.load( String, Function ) with ajaxSetup on dataType json\", function (assert) {",
            "file": "unit/ajax.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "#10524 - jQuery.fn.load() - data specified in ajaxSettings is merged in",
            "suites": [
                "ajax"
            ],
            "updatePoint": {
                "line": 2500,
                "column": 85
            },
            "line": 2500,
            "code": "  QUnit.test(\"#10524 - jQuery.fn.load() - data specified in ajaxSettings is merged in\", function (assert) {",
            "file": "unit/ajax.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.post() - data",
            "suites": [
                "ajax"
            ],
            "updatePoint": {
                "line": 2518,
                "column": 34
            },
            "line": 2518,
            "code": "  QUnit.test(\"jQuery.post() - data\", function (assert) {",
            "file": "unit/ajax.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.post( String, Hash, Function ) - simple with xml",
            "suites": [
                "ajax"
            ],
            "updatePoint": {
                "line": 2542,
                "column": 69
            },
            "line": 2542,
            "code": "  QUnit.test(\"jQuery.post( String, Hash, Function ) - simple with xml\", function (assert) {",
            "file": "unit/ajax.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery[get|post]( options ) - simple with xml",
            "suites": [
                "ajax"
            ],
            "updatePoint": {
                "line": 2561,
                "column": 59
            },
            "line": 2561,
            "code": "  QUnit.test(\"jQuery[get|post]( options ) - simple with xml\", function (assert) {",
            "file": "unit/ajax.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.active",
            "suites": [
                "ajax"
            ],
            "updatePoint": {
                "line": 2581,
                "column": 27
            },
            "line": 2581,
            "code": "  QUnit.test(\"jQuery.active\", function (assert) {",
            "file": "unit/ajax.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Animation( subject, props, opts ) - shape",
            "suites": [
                "animation"
            ],
            "updatePoint": {
                "line": 33,
                "column": 55
            },
            "line": 33,
            "code": "  QUnit.test(\"Animation( subject, props, opts ) - shape\", function (assert) {",
            "file": "unit/animation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Animation.prefilter( fn ) - calls prefilter after defaultPrefilter",
            "suites": [
                "animation"
            ],
            "updatePoint": {
                "line": 76,
                "column": 80
            },
            "line": 76,
            "code": "  QUnit.test(\"Animation.prefilter( fn ) - calls prefilter after defaultPrefilter\", function (assert) {",
            "file": "unit/animation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Animation.prefilter( fn, true ) - calls prefilter before defaultPrefilter",
            "suites": [
                "animation"
            ],
            "updatePoint": {
                "line": 84,
                "column": 87
            },
            "line": 84,
            "code": "  QUnit.test(\"Animation.prefilter( fn, true ) - calls prefilter before defaultPrefilter\", function (assert) {",
            "file": "unit/animation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Animation.prefilter - prefilter return hooks",
            "suites": [
                "animation"
            ],
            "updatePoint": {
                "line": 92,
                "column": 58
            },
            "line": 92,
            "code": "  QUnit.test(\"Animation.prefilter - prefilter return hooks\", function (assert) {",
            "file": "unit/animation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Animation.tweener( fn ) - unshifts a * tweener",
            "suites": [
                "animation"
            ],
            "updatePoint": {
                "line": 155,
                "column": 60
            },
            "line": 155,
            "code": "  QUnit.test(\"Animation.tweener( fn ) - unshifts a * tweener\", function (assert) {",
            "file": "unit/animation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Animation.tweener( 'prop', fn ) - unshifts a 'prop' tweener",
            "suites": [
                "animation"
            ],
            "updatePoint": {
                "line": 162,
                "column": 73
            },
            "line": 162,
            "code": "  QUnit.test(\"Animation.tweener( 'prop', fn ) - unshifts a 'prop' tweener\", function (assert) {",
            "file": "unit/animation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Animation.tweener( 'list of props', fn ) - unshifts a tweener to each prop",
            "suites": [
                "animation"
            ],
            "updatePoint": {
                "line": 175,
                "column": 88
            },
            "line": 175,
            "code": "  QUnit.test(\"Animation.tweener( 'list of props', fn ) - unshifts a tweener to each prop\", function (assert) {",
            "file": "unit/animation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.propFix integrity test",
            "suites": [
                "attributes"
            ],
            "updatePoint": {
                "line": 31,
                "column": 41
            },
            "line": 31,
            "code": "QUnit.test(\"jQuery.propFix integrity test\", function (assert) {",
            "file": "unit/attributes.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "attr(String)",
            "suites": [
                "attributes"
            ],
            "updatePoint": {
                "line": 53,
                "column": 24
            },
            "line": 53,
            "code": "QUnit.test(\"attr(String)\", function (assert) {",
            "file": "unit/attributes.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "attr(String) on cloned elements, #9646",
            "suites": [
                "attributes"
            ],
            "updatePoint": {
                "line": 143,
                "column": 50
            },
            "line": 143,
            "code": "QUnit.test(\"attr(String) on cloned elements, #9646\", function (assert) {",
            "file": "unit/attributes.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "attr(String) in XML Files",
            "suites": [
                "attributes"
            ],
            "updatePoint": {
                "line": 157,
                "column": 37
            },
            "line": 157,
            "code": "QUnit.test(\"attr(String) in XML Files\", function (assert) {",
            "file": "unit/attributes.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "attr(String, Function)",
            "suites": [
                "attributes"
            ],
            "updatePoint": {
                "line": 164,
                "column": 34
            },
            "line": 164,
            "code": "QUnit.test(\"attr(String, Function)\", function (assert) {",
            "file": "unit/attributes.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "attr(Hash)",
            "suites": [
                "attributes"
            ],
            "updatePoint": {
                "line": 173,
                "column": 22
            },
            "line": 173,
            "code": "QUnit.test(\"attr(Hash)\", function (assert) {",
            "file": "unit/attributes.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "attr(String, Object)",
            "suites": [
                "attributes"
            ],
            "updatePoint": {
                "line": 196,
                "column": 32
            },
            "line": 196,
            "code": "QUnit.test(\"attr(String, Object)\", function (assert) {",
            "file": "unit/attributes.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "attr(non-ASCII)",
            "suites": [
                "attributes"
            ],
            "updatePoint": {
                "line": 399,
                "column": 27
            },
            "line": 399,
            "code": "QUnit.test(\"attr(non-ASCII)\", function (assert) {",
            "file": "unit/attributes.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "attr(String, Object) - Loaded via XML document",
            "suites": [
                "attributes"
            ],
            "updatePoint": {
                "line": 405,
                "column": 58
            },
            "line": 405,
            "code": "QUnit.test(\"attr(String, Object) - Loaded via XML document\", function (assert) {",
            "file": "unit/attributes.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "attr(String, Object) - Loaded via XML fragment",
            "suites": [
                "attributes"
            ],
            "updatePoint": {
                "line": 415,
                "column": 58
            },
            "line": 415,
            "code": "QUnit.test(\"attr(String, Object) - Loaded via XML fragment\", function (assert) {",
            "file": "unit/attributes.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "attr('tabindex')",
            "suites": [
                "attributes"
            ],
            "updatePoint": {
                "line": 424,
                "column": 28
            },
            "line": 424,
            "code": "QUnit.test(\"attr('tabindex')\", function (assert) {",
            "file": "unit/attributes.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "attr('tabindex', value)",
            "suites": [
                "attributes"
            ],
            "updatePoint": {
                "line": 438,
                "column": 35
            },
            "line": 438,
            "code": "QUnit.test(\"attr('tabindex', value)\", function (assert) {",
            "file": "unit/attributes.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "removeAttr(String)",
            "suites": [
                "attributes"
            ],
            "updatePoint": {
                "line": 465,
                "column": 30
            },
            "line": 465,
            "code": "QUnit.test(\"removeAttr(String)\", function (assert) {",
            "file": "unit/attributes.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "removeAttr(String) in XML",
            "suites": [
                "attributes"
            ],
            "updatePoint": {
                "line": 493,
                "column": 37
            },
            "line": 493,
            "code": "QUnit.test(\"removeAttr(String) in XML\", function (assert) {",
            "file": "unit/attributes.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "removeAttr(Multi String, variable space width)",
            "suites": [
                "attributes"
            ],
            "updatePoint": {
                "line": 509,
                "column": 58
            },
            "line": 509,
            "code": "QUnit.test(\"removeAttr(Multi String, variable space width)\", function (assert) {",
            "file": "unit/attributes.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "removeAttr(Multi String, non-HTML whitespace is valid in attribute names (gh-3003)",
            "suites": [
                "attributes"
            ],
            "updatePoint": {
                "line": 526,
                "column": 94
            },
            "line": 526,
            "code": "QUnit.test(\"removeAttr(Multi String, non-HTML whitespace is valid in attribute names (gh-3003)\", function (assert) {",
            "file": "unit/attributes.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "prop(String, Object)",
            "suites": [
                "attributes"
            ],
            "updatePoint": {
                "line": 543,
                "column": 32
            },
            "line": 543,
            "code": "QUnit.test(\"prop(String, Object)\", function (assert) {",
            "file": "unit/attributes.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "prop(String, Object) on null/undefined",
            "suites": [
                "attributes"
            ],
            "updatePoint": {
                "line": 571,
                "column": 50
            },
            "line": 571,
            "code": "QUnit.test(\"prop(String, Object) on null/undefined\", function (assert) {",
            "file": "unit/attributes.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "prop('tabindex')",
            "suites": [
                "attributes"
            ],
            "updatePoint": {
                "line": 612,
                "column": 28
            },
            "line": 612,
            "code": "QUnit.test(\"prop('tabindex')\", function (assert) {",
            "file": "unit/attributes.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "image.prop( 'tabIndex' )",
            "suites": [
                "attributes"
            ],
            "updatePoint": {
                "line": 630,
                "column": 36
            },
            "line": 630,
            "code": "QUnit.test(\"image.prop( 'tabIndex' )\", function (assert) {",
            "file": "unit/attributes.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "prop('tabindex', value)",
            "suites": [
                "attributes"
            ],
            "updatePoint": {
                "line": 635,
                "column": 35
            },
            "line": 635,
            "code": "QUnit.test(\"prop('tabindex', value)\", function (assert) {",
            "file": "unit/attributes.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "option.prop('selected', true) affects select.selectedIndex (gh-2732)",
            "suites": [
                "attributes"
            ],
            "updatePoint": {
                "line": 666,
                "column": 80
            },
            "line": 666,
            "code": "QUnit.test(\"option.prop('selected', true) affects select.selectedIndex (gh-2732)\", function (assert) {",
            "file": "unit/attributes.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "removeProp(String)",
            "suites": [
                "attributes"
            ],
            "updatePoint": {
                "line": 686,
                "column": 30
            },
            "line": 686,
            "code": "QUnit.test(\"removeProp(String)\", function (assert) {",
            "file": "unit/attributes.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "val() after modification",
            "suites": [
                "attributes"
            ],
            "updatePoint": {
                "line": 704,
                "column": 36
            },
            "line": 704,
            "code": "QUnit.test(\"val() after modification\", function (assert) {",
            "file": "unit/attributes.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "val()",
            "suites": [
                "attributes"
            ],
            "updatePoint": {
                "line": 709,
                "column": 17
            },
            "line": 709,
            "code": "QUnit.test(\"val()\", function (assert) {",
            "file": "unit/attributes.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "val() with non-matching values on dropdown list",
            "suites": [
                "attributes"
            ],
            "updatePoint": {
                "line": 756,
                "column": 59
            },
            "line": 756,
            "code": "QUnit.test(\"val() with non-matching values on dropdown list\", function (assert) {",
            "file": "unit/attributes.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "val() respects numbers without exception (Bug #9319) - progress",
            "suites": [
                "attributes"
            ],
            "updatePoint": {
                "line": 767,
                "column": 75
            },
            "line": 767,
            "code": "QUnit.test(\"val() respects numbers without exception (Bug #9319) - progress\", function (assert) {",
            "file": "unit/attributes.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "val(String/Number)",
            "suites": [
                "attributes"
            ],
            "updatePoint": {
                "line": 820,
                "column": 30
            },
            "line": 820,
            "code": "QUnit.test(\"val(String/Number)\", function (assert) {",
            "file": "unit/attributes.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "val(Function)",
            "suites": [
                "attributes"
            ],
            "updatePoint": {
                "line": 823,
                "column": 25
            },
            "line": 823,
            "code": "QUnit.test(\"val(Function)\", function (assert) {",
            "file": "unit/attributes.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "val(Array of Numbers) (Bug #7123)",
            "suites": [
                "attributes"
            ],
            "updatePoint": {
                "line": 826,
                "column": 45
            },
            "line": 826,
            "code": "QUnit.test(\"val(Array of Numbers) (Bug #7123)\", function (assert) {",
            "file": "unit/attributes.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "val(Function) with incoming value",
            "suites": [
                "attributes"
            ],
            "updatePoint": {
                "line": 836,
                "column": 45
            },
            "line": 836,
            "code": "QUnit.test(\"val(Function) with incoming value\", function (assert) {",
            "file": "unit/attributes.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "val(select) after form.reset() (Bug #2551)",
            "suites": [
                "attributes"
            ],
            "updatePoint": {
                "line": 871,
                "column": 54
            },
            "line": 871,
            "code": "QUnit.test(\"val(select) after form.reset() (Bug #2551)\", function (assert) {",
            "file": "unit/attributes.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "select.val(space characters) (gh-2978)",
            "suites": [
                "attributes"
            ],
            "updatePoint": {
                "line": 882,
                "column": 50
            },
            "line": 882,
            "code": "QUnit.test(\"select.val(space characters) (gh-2978)\", function (assert) {",
            "file": "unit/attributes.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "radio.val(space characters)",
            "suites": [
                "attributes"
            ],
            "updatePoint": {
                "line": 944,
                "column": 39
            },
            "line": 944,
            "code": "QUnit.test(\"radio.val(space characters)\", function (assert) {",
            "file": "unit/attributes.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "addClass(String)",
            "suites": [
                "attributes"
            ],
            "updatePoint": {
                "line": 1027,
                "column": 28
            },
            "line": 1027,
            "code": "QUnit.test(\"addClass(String)\", function (assert) {",
            "file": "unit/attributes.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "addClass(Function)",
            "suites": [
                "attributes"
            ],
            "updatePoint": {
                "line": 1030,
                "column": 30
            },
            "line": 1030,
            "code": "QUnit.test(\"addClass(Function)\", function (assert) {",
            "file": "unit/attributes.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "addClass(Array)",
            "suites": [
                "attributes"
            ],
            "updatePoint": {
                "line": 1033,
                "column": 27
            },
            "line": 1033,
            "code": "QUnit.test(\"addClass(Array)\", function (assert) {",
            "file": "unit/attributes.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "addClass(Function) with incoming value",
            "suites": [
                "attributes"
            ],
            "updatePoint": {
                "line": 1036,
                "column": 50
            },
            "line": 1036,
            "code": "QUnit.test(\"addClass(Function) with incoming value\", function (assert) {",
            "file": "unit/attributes.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "removeClass(String) - simple",
            "suites": [
                "attributes"
            ],
            "updatePoint": {
                "line": 1087,
                "column": 40
            },
            "line": 1087,
            "code": "QUnit.test(\"removeClass(String) - simple\", function (assert) {",
            "file": "unit/attributes.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "removeClass(Function) - simple",
            "suites": [
                "attributes"
            ],
            "updatePoint": {
                "line": 1090,
                "column": 42
            },
            "line": 1090,
            "code": "QUnit.test(\"removeClass(Function) - simple\", function (assert) {",
            "file": "unit/attributes.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "removeClass(Array) - simple",
            "suites": [
                "attributes"
            ],
            "updatePoint": {
                "line": 1093,
                "column": 39
            },
            "line": 1093,
            "code": "QUnit.test(\"removeClass(Array) - simple\", function (assert) {",
            "file": "unit/attributes.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "removeClass(Function) with incoming value",
            "suites": [
                "attributes"
            ],
            "updatePoint": {
                "line": 1096,
                "column": 53
            },
            "line": 1096,
            "code": "QUnit.test(\"removeClass(Function) with incoming value\", function (assert) {",
            "file": "unit/attributes.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "removeClass() removes duplicates",
            "suites": [
                "attributes"
            ],
            "updatePoint": {
                "line": 1108,
                "column": 44
            },
            "line": 1108,
            "code": "QUnit.test(\"removeClass() removes duplicates\", function (assert) {",
            "file": "unit/attributes.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "removeClass(undefined) is a no-op",
            "suites": [
                "attributes"
            ],
            "updatePoint": {
                "line": 1114,
                "column": 45
            },
            "line": 1114,
            "code": "QUnit.test(\"removeClass(undefined) is a no-op\", function (assert) {",
            "file": "unit/attributes.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "toggleClass(String|boolean|undefined[, boolean])",
            "suites": [
                "attributes"
            ],
            "updatePoint": {
                "line": 1149,
                "column": 60
            },
            "line": 1149,
            "code": "QUnit.test(\"toggleClass(String|boolean|undefined[, boolean])\", function (assert) {",
            "file": "unit/attributes.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "toggleClass(Function[, boolean])",
            "suites": [
                "attributes"
            ],
            "updatePoint": {
                "line": 1152,
                "column": 44
            },
            "line": 1152,
            "code": "QUnit.test(\"toggleClass(Function[, boolean])\", function (assert) {",
            "file": "unit/attributes.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "toggleClass(Array[, boolean])",
            "suites": [
                "attributes"
            ],
            "updatePoint": {
                "line": 1155,
                "column": 41
            },
            "line": 1155,
            "code": "QUnit.test(\"toggleClass(Array[, boolean])\", function (assert) {",
            "file": "unit/attributes.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "toggleClass(Function[, boolean]) with incoming value",
            "suites": [
                "attributes"
            ],
            "updatePoint": {
                "line": 1158,
                "column": 64
            },
            "line": 1158,
            "code": "QUnit.test(\"toggleClass(Function[, boolean]) with incoming value\", function (assert) {",
            "file": "unit/attributes.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "addClass, removeClass, hasClass",
            "suites": [
                "attributes"
            ],
            "updatePoint": {
                "line": 1197,
                "column": 43
            },
            "line": 1197,
            "code": "QUnit.test(\"addClass, removeClass, hasClass\", function (assert) {",
            "file": "unit/attributes.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "addClass, removeClass, hasClass on many elements",
            "suites": [
                "attributes"
            ],
            "updatePoint": {
                "line": 1229,
                "column": 60
            },
            "line": 1229,
            "code": "QUnit.test(\"addClass, removeClass, hasClass on many elements\", function (assert) {",
            "file": "unit/attributes.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "addClass, removeClass, hasClass on many elements - Array",
            "suites": [
                "attributes"
            ],
            "updatePoint": {
                "line": 1257,
                "column": 68
            },
            "line": 1257,
            "code": "QUnit.test(\"addClass, removeClass, hasClass on many elements - Array\", function (assert) {",
            "file": "unit/attributes.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "addClass, removeClass, hasClass on elements with classes with non-HTML whitespace (gh-3072, gh-3003)",
            "suites": [
                "attributes"
            ],
            "updatePoint": {
                "line": 1283,
                "column": 112
            },
            "line": 1283,
            "code": "QUnit.test(\"addClass, removeClass, hasClass on elements with classes with non-HTML whitespace (gh-3072, gh-3003)\", function (assert) {",
            "file": "unit/attributes.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "contents().hasClass() returns correct values",
            "suites": [
                "attributes"
            ],
            "updatePoint": {
                "line": 1299,
                "column": 56
            },
            "line": 1299,
            "code": "QUnit.test(\"contents().hasClass() returns correct values\", function (assert) {",
            "file": "unit/attributes.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "hasClass correctly interprets non-space separators (#13835)",
            "suites": [
                "attributes"
            ],
            "updatePoint": {
                "line": 1306,
                "column": 71
            },
            "line": 1306,
            "code": "QUnit.test(\"hasClass correctly interprets non-space separators (#13835)\", function (assert) {",
            "file": "unit/attributes.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "coords returns correct values in IE6/IE7, see #10828",
            "suites": [
                "attributes"
            ],
            "updatePoint": {
                "line": 1322,
                "column": 64
            },
            "line": 1322,
            "code": "QUnit.test(\"coords returns correct values in IE6/IE7, see #10828\", function (assert) {",
            "file": "unit/attributes.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "should not throw at $(option).val() (#14686)",
            "suites": [
                "attributes"
            ],
            "updatePoint": {
                "line": 1329,
                "column": 56
            },
            "line": 1329,
            "code": "QUnit.test(\"should not throw at $(option).val() (#14686)\", function (assert) {",
            "file": "unit/attributes.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "option value not trimmed when setting via parent select",
            "suites": [
                "attributes"
            ],
            "updatePoint": {
                "line": 1339,
                "column": 67
            },
            "line": 1339,
            "code": "QUnit.test(\"option value not trimmed when setting via parent select\", function (assert) {",
            "file": "unit/attributes.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Insignificant white space returned for $(option).val() (#14858, gh-2978)",
            "suites": [
                "attributes"
            ],
            "updatePoint": {
                "line": 1343,
                "column": 84
            },
            "line": 1343,
            "code": "QUnit.test(\"Insignificant white space returned for $(option).val() (#14858, gh-2978)\", function (assert) {",
            "file": "unit/attributes.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "SVG class manipulation (gh-2199)",
            "suites": [
                "attributes"
            ],
            "updatePoint": {
                "line": 1356,
                "column": 44
            },
            "line": 1356,
            "code": "QUnit.test(\"SVG class manipulation (gh-2199)\", function (assert) {",
            "file": "unit/attributes.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "non-lowercase boolean attribute getters should not crash",
            "suites": [
                "attributes"
            ],
            "updatePoint": {
                "line": 1375,
                "column": 68
            },
            "line": 1375,
            "code": "QUnit.test(\"non-lowercase boolean attribute getters should not crash\", function (assert) {",
            "file": "unit/attributes.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "ajax",
            "suites": [
                "basic"
            ],
            "updatePoint": {
                "line": 6,
                "column": 18
            },
            "line": 6,
            "code": "  QUnit.test(\"ajax\", function (assert) {",
            "file": "unit/basic.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "attributes",
            "suites": [
                "basic"
            ],
            "updatePoint": {
                "line": 33,
                "column": 22
            },
            "line": 33,
            "code": "QUnit.test(\"attributes\", function (assert) {",
            "file": "unit/basic.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "css",
            "suites": [
                "basic"
            ],
            "updatePoint": {
                "line": 47,
                "column": 17
            },
            "line": 47,
            "code": "  QUnit.test(\"css\", function (assert) {",
            "file": "unit/basic.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "show/hide",
            "suites": [
                "basic"
            ],
            "updatePoint": {
                "line": 55,
                "column": 23
            },
            "line": 55,
            "code": "  QUnit.test(\"show/hide\", function (assert) {",
            "file": "unit/basic.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "core",
            "suites": [
                "basic"
            ],
            "updatePoint": {
                "line": 65,
                "column": 16
            },
            "line": 65,
            "code": "QUnit.test(\"core\", function (assert) {",
            "file": "unit/basic.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "data",
            "suites": [
                "basic"
            ],
            "updatePoint": {
                "line": 105,
                "column": 16
            },
            "line": 105,
            "code": "QUnit.test(\"data\", function (assert) {",
            "file": "unit/basic.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "dimensions",
            "suites": [
                "basic"
            ],
            "updatePoint": {
                "line": 113,
                "column": 22
            },
            "line": 113,
            "code": "QUnit.test(\"dimensions\", function (assert) {",
            "file": "unit/basic.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "event",
            "suites": [
                "basic"
            ],
            "updatePoint": {
                "line": 120,
                "column": 17
            },
            "line": 120,
            "code": "QUnit.test(\"event\", function (assert) {",
            "file": "unit/basic.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "manipulation",
            "suites": [
                "basic"
            ],
            "updatePoint": {
                "line": 129,
                "column": 24
            },
            "line": 129,
            "code": "QUnit.test(\"manipulation\", function (assert) {",
            "file": "unit/basic.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "selector",
            "suites": [
                "basic"
            ],
            "updatePoint": {
                "line": 153,
                "column": 20
            },
            "line": 153,
            "code": "QUnit.test(\"selector\", function (assert) {",
            "file": "unit/basic.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "serialize",
            "suites": [
                "basic"
            ],
            "updatePoint": {
                "line": 159,
                "column": 21
            },
            "line": 159,
            "code": "QUnit.test(\"serialize\", function (assert) {",
            "file": "unit/basic.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "traversing",
            "suites": [
                "basic"
            ],
            "updatePoint": {
                "line": 168,
                "column": 22
            },
            "line": 168,
            "code": "QUnit.test(\"traversing\", function (assert) {",
            "file": "unit/basic.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "wrap",
            "suites": [
                "basic"
            ],
            "updatePoint": {
                "line": 184,
                "column": 16
            },
            "line": 184,
            "code": "QUnit.test(\"wrap\", function (assert) {",
            "file": "unit/basic.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.Callbacks( options ) - options are copied",
            "suites": [
                "callbacks"
            ],
            "updatePoint": {
                "line": 243,
                "column": 62
            },
            "line": 243,
            "code": "  QUnit.test(\"jQuery.Callbacks( options ) - options are copied\", function (assert) {",
            "file": "unit/callbacks.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.Callbacks.fireWith - arguments are copied",
            "suites": [
                "callbacks"
            ],
            "updatePoint": {
                "line": 259,
                "column": 62
            },
            "line": 259,
            "code": "  QUnit.test(\"jQuery.Callbacks.fireWith - arguments are copied\", function (assert) {",
            "file": "unit/callbacks.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.Callbacks.remove - should remove all instances",
            "suites": [
                "callbacks"
            ],
            "updatePoint": {
                "line": 269,
                "column": 67
            },
            "line": 269,
            "code": "  QUnit.test(\"jQuery.Callbacks.remove - should remove all instances\", function (assert) {",
            "file": "unit/callbacks.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.Callbacks.has",
            "suites": [
                "callbacks"
            ],
            "updatePoint": {
                "line": 281,
                "column": 34
            },
            "line": 281,
            "code": "  QUnit.test(\"jQuery.Callbacks.has\", function (assert) {",
            "file": "unit/callbacks.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.Callbacks() - adding a string doesn't cause a stack overflow",
            "suites": [
                "callbacks"
            ],
            "updatePoint": {
                "line": 321,
                "column": 81
            },
            "line": 321,
            "code": "  QUnit.test(\"jQuery.Callbacks() - adding a string doesn't cause a stack overflow\", function (assert) {",
            "file": "unit/callbacks.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.Callbacks() - disabled callback doesn't fire (gh-1790)",
            "suites": [
                "callbacks"
            ],
            "updatePoint": {
                "line": 326,
                "column": 75
            },
            "line": 326,
            "code": "  QUnit.test(\"jQuery.Callbacks() - disabled callback doesn't fire (gh-1790)\", function (assert) {",
            "file": "unit/callbacks.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.Callbacks() - list with memory stays locked (gh-3469)",
            "suites": [
                "callbacks"
            ],
            "updatePoint": {
                "line": 341,
                "column": 74
            },
            "line": 341,
            "code": "  QUnit.test(\"jQuery.Callbacks() - list with memory stays locked (gh-3469)\", function (assert) {",
            "file": "unit/callbacks.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Basic requirements",
            "suites": [
                "core"
            ],
            "updatePoint": {
                "line": 10,
                "column": 30
            },
            "line": 10,
            "code": "QUnit.test(\"Basic requirements\", function (assert) {",
            "file": "unit/core.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery()",
            "suites": [
                "core"
            ],
            "updatePoint": {
                "line": 20,
                "column": 20
            },
            "line": 20,
            "code": "QUnit.test(\"jQuery()\", function (assert) {",
            "file": "unit/core.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "globalEval",
            "suites": [
                "core"
            ],
            "updatePoint": {
                "line": 160,
                "column": 22
            },
            "line": 160,
            "code": "QUnit.test(\"globalEval\", function (assert) {",
            "file": "unit/core.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "globalEval with 'use strict'",
            "suites": [
                "core"
            ],
            "updatePoint": {
                "line": 170,
                "column": 40
            },
            "line": 170,
            "code": "QUnit.test(\"globalEval with 'use strict'\", function (assert) {",
            "file": "unit/core.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "globalEval execution after script injection (#7862)",
            "suites": [
                "core"
            ],
            "updatePoint": {
                "line": 176,
                "column": 63
            },
            "line": 176,
            "code": "QUnit.test(\"globalEval execution after script injection (#7862)\", function (assert) {",
            "file": "unit/core.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "noConflict",
            "suites": [
                "core"
            ],
            "updatePoint": {
                "line": 192,
                "column": 22
            },
            "line": 192,
            "code": "QUnit.test(\"noConflict\", function (assert) {",
            "file": "unit/core.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "isPlainObject",
            "suites": [
                "core"
            ],
            "updatePoint": {
                "line": 205,
                "column": 25
            },
            "line": 205,
            "code": "QUnit.test(\"isPlainObject\", function (assert) {",
            "file": "unit/core.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "isPlainObject(localStorage)",
            "suites": [
                "core"
            ],
            "updatePoint": {
                "line": 301,
                "column": 39
            },
            "line": 301,
            "code": "QUnit.test(\"isPlainObject(localStorage)\", function (assert) {",
            "file": "unit/core.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "isXMLDoc - HTML",
            "suites": [
                "core"
            ],
            "updatePoint": {
                "line": 315,
                "column": 27
            },
            "line": 315,
            "code": "QUnit.test(\"isXMLDoc - HTML\", function (assert) {",
            "file": "unit/core.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "isXMLDoc - embedded SVG",
            "suites": [
                "core"
            ],
            "updatePoint": {
                "line": 338,
                "column": 35
            },
            "line": 338,
            "code": "QUnit.test(\"isXMLDoc - embedded SVG\", function (assert) {",
            "file": "unit/core.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "isXMLDoc - XML",
            "suites": [
                "core"
            ],
            "updatePoint": {
                "line": 349,
                "column": 26
            },
            "line": 349,
            "code": "QUnit.test(\"isXMLDoc - XML\", function (assert) {",
            "file": "unit/core.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "isXMLDoc - falsy",
            "suites": [
                "core"
            ],
            "updatePoint": {
                "line": 362,
                "column": 28
            },
            "line": 362,
            "code": "QUnit.test(\"isXMLDoc - falsy\", function (assert) {",
            "file": "unit/core.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "XSS via location.hash",
            "suites": [
                "core"
            ],
            "updatePoint": {
                "line": 370,
                "column": 33
            },
            "line": 370,
            "code": "QUnit.test(\"XSS via location.hash\", function (assert) {",
            "file": "unit/core.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery('html')",
            "suites": [
                "core"
            ],
            "updatePoint": {
                "line": 388,
                "column": 26
            },
            "line": 388,
            "code": "QUnit.test(\"jQuery('html')\", function (assert) {",
            "file": "unit/core.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery(element with non-alphanumeric name)",
            "suites": [
                "core"
            ],
            "updatePoint": {
                "line": 423,
                "column": 54
            },
            "line": 423,
            "code": "QUnit.test(\"jQuery(element with non-alphanumeric name)\", function (assert) {",
            "file": "unit/core.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery('massive html #7990')",
            "suites": [
                "core"
            ],
            "updatePoint": {
                "line": 438,
                "column": 40
            },
            "line": 438,
            "code": "QUnit.test(\"jQuery('massive html #7990')\", function (assert) {",
            "file": "unit/core.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery('html', context)",
            "suites": [
                "core"
            ],
            "updatePoint": {
                "line": 454,
                "column": 35
            },
            "line": 454,
            "code": "QUnit.test(\"jQuery('html', context)\", function (assert) {",
            "file": "unit/core.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery(selector, xml).text(str) - loaded via xml document",
            "suites": [
                "core"
            ],
            "updatePoint": {
                "line": 460,
                "column": 69
            },
            "line": 460,
            "code": "QUnit.test(\"jQuery(selector, xml).text(str) - loaded via xml document\", function (assert) {",
            "file": "unit/core.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "end()",
            "suites": [
                "core"
            ],
            "updatePoint": {
                "line": 469,
                "column": 17
            },
            "line": 469,
            "code": "QUnit.test(\"end()\", function (assert) {",
            "file": "unit/core.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "length",
            "suites": [
                "core"
            ],
            "updatePoint": {
                "line": 477,
                "column": 18
            },
            "line": 477,
            "code": "QUnit.test(\"length\", function (assert) {",
            "file": "unit/core.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "get()",
            "suites": [
                "core"
            ],
            "updatePoint": {
                "line": 481,
                "column": 17
            },
            "line": 481,
            "code": "QUnit.test(\"get()\", function (assert) {",
            "file": "unit/core.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "toArray()",
            "suites": [
                "core"
            ],
            "updatePoint": {
                "line": 485,
                "column": 21
            },
            "line": 485,
            "code": "QUnit.test(\"toArray()\", function (assert) {",
            "file": "unit/core.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "inArray()",
            "suites": [
                "core"
            ],
            "updatePoint": {
                "line": 489,
                "column": 21
            },
            "line": 489,
            "code": "QUnit.test(\"inArray()\", function (assert) {",
            "file": "unit/core.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "get(Number)",
            "suites": [
                "core"
            ],
            "updatePoint": {
                "line": 532,
                "column": 23
            },
            "line": 532,
            "code": "QUnit.test(\"get(Number)\", function (assert) {",
            "file": "unit/core.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "get(-Number)",
            "suites": [
                "core"
            ],
            "updatePoint": {
                "line": 537,
                "column": 24
            },
            "line": 537,
            "code": "QUnit.test(\"get(-Number)\", function (assert) {",
            "file": "unit/core.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "each(Function)",
            "suites": [
                "core"
            ],
            "updatePoint": {
                "line": 542,
                "column": 26
            },
            "line": 542,
            "code": "QUnit.test(\"each(Function)\", function (assert) {",
            "file": "unit/core.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "slice()",
            "suites": [
                "core"
            ],
            "updatePoint": {
                "line": 559,
                "column": 19
            },
            "line": 559,
            "code": "QUnit.test(\"slice()\", function (assert) {",
            "file": "unit/core.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "first()/last()",
            "suites": [
                "core"
            ],
            "updatePoint": {
                "line": 570,
                "column": 26
            },
            "line": 570,
            "code": "QUnit.test(\"first()/last()\", function (assert) {",
            "file": "unit/core.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "even()/odd()",
            "suites": [
                "core"
            ],
            "updatePoint": {
                "line": 579,
                "column": 24
            },
            "line": 579,
            "code": "QUnit.test(\"even()/odd()\", function (assert) {",
            "file": "unit/core.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "map()",
            "suites": [
                "core"
            ],
            "updatePoint": {
                "line": 588,
                "column": 17
            },
            "line": 588,
            "code": "QUnit.test(\"map()\", function (assert) {",
            "file": "unit/core.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.map",
            "suites": [
                "core"
            ],
            "updatePoint": {
                "line": 597,
                "column": 22
            },
            "line": 597,
            "code": "QUnit.test(\"jQuery.map\", function (assert) {",
            "file": "unit/core.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.merge()",
            "suites": [
                "core"
            ],
            "updatePoint": {
                "line": 737,
                "column": 26
            },
            "line": 737,
            "code": "QUnit.test(\"jQuery.merge()\", function (assert) {",
            "file": "unit/core.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.grep()",
            "suites": [
                "core"
            ],
            "updatePoint": {
                "line": 761,
                "column": 25
            },
            "line": 761,
            "code": "QUnit.test(\"jQuery.grep()\", function (assert) {",
            "file": "unit/core.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.grep(Array-like)",
            "suites": [
                "core"
            ],
            "updatePoint": {
                "line": 777,
                "column": 35
            },
            "line": 777,
            "code": "QUnit.test(\"jQuery.grep(Array-like)\", function (assert) {",
            "file": "unit/core.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.extend(Object, Object)",
            "suites": [
                "core"
            ],
            "updatePoint": {
                "line": 836,
                "column": 41
            },
            "line": 836,
            "code": "QUnit.test(\"jQuery.extend(Object, Object)\", function (assert) {",
            "file": "unit/core.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.extend(Object, Object {created with \"defineProperties\"})",
            "suites": [
                "core"
            ],
            "updatePoint": {
                "line": 1066,
                "column": 77
            },
            "line": 1066,
            "code": "QUnit.test(\"jQuery.extend(Object, Object {created with \\\"defineProperties\\\"})\", function (assert) {",
            "file": "unit/core.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.extend(true,{},{a:[], o:{}}); deep copy with array, followed by object",
            "suites": [
                "core"
            ],
            "updatePoint": {
                "line": 1086,
                "column": 89
            },
            "line": 1086,
            "code": "QUnit.test(\"jQuery.extend(true,{},{a:[], o:{}}); deep copy with array, followed by object\", function (assert) {",
            "file": "unit/core.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.extend( true, ... ) Object.prototype pollution",
            "suites": [
                "core"
            ],
            "updatePoint": {
                "line": 1104,
                "column": 65
            },
            "line": 1104,
            "code": "QUnit.test(\"jQuery.extend( true, ... ) Object.prototype pollution\", function (assert) {",
            "file": "unit/core.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.each(Object,Function)",
            "suites": [
                "core"
            ],
            "updatePoint": {
                "line": 1109,
                "column": 40
            },
            "line": 1109,
            "code": "QUnit.test(\"jQuery.each(Object,Function)\", function (assert) {",
            "file": "unit/core.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.each/map(undefined/null,Function)",
            "suites": [
                "core"
            ],
            "updatePoint": {
                "line": 1240,
                "column": 52
            },
            "line": 1240,
            "code": "QUnit.test(\"jQuery.each/map(undefined/null,Function)\", function (assert) {",
            "file": "unit/core.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "JIT compilation does not interfere with length retrieval (gh-2145)",
            "suites": [
                "core"
            ],
            "updatePoint": {
                "line": 1253,
                "column": 78
            },
            "line": 1253,
            "code": "QUnit.test(\"JIT compilation does not interfere with length retrieval (gh-2145)\", function (assert) {",
            "file": "unit/core.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.makeArray",
            "suites": [
                "core"
            ],
            "updatePoint": {
                "line": 1273,
                "column": 28
            },
            "line": 1273,
            "code": "QUnit.test(\"jQuery.makeArray\", function (assert) {",
            "file": "unit/core.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.inArray",
            "suites": [
                "core"
            ],
            "updatePoint": {
                "line": 1302,
                "column": 26
            },
            "line": 1302,
            "code": "QUnit.test(\"jQuery.inArray\", function (assert) {",
            "file": "unit/core.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.isEmptyObject",
            "suites": [
                "core"
            ],
            "updatePoint": {
                "line": 1308,
                "column": 32
            },
            "line": 1308,
            "code": "QUnit.test(\"jQuery.isEmptyObject\", function (assert) {",
            "file": "unit/core.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.parseHTML",
            "suites": [
                "core"
            ],
            "updatePoint": {
                "line": 1316,
                "column": 28
            },
            "line": 1316,
            "code": "QUnit.test(\"jQuery.parseHTML\", function (assert) {",
            "file": "unit/core.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.parseHTML(<a href>) - gh-2965",
            "suites": [
                "core"
            ],
            "updatePoint": {
                "line": 1349,
                "column": 48
            },
            "line": 1349,
            "code": "QUnit.test(\"jQuery.parseHTML(<a href>) - gh-2965\", function (assert) {",
            "file": "unit/core.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.parseHTML",
            "suites": [
                "core"
            ],
            "updatePoint": {
                "line": 1355,
                "column": 28
            },
            "line": 1355,
            "code": "QUnit.test(\"jQuery.parseHTML\", function (assert) {",
            "file": "unit/core.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.parseXML",
            "suites": [
                "core"
            ],
            "updatePoint": {
                "line": 1366,
                "column": 27
            },
            "line": 1366,
            "code": "QUnit.test(\"jQuery.parseXML\", function (assert) {",
            "file": "unit/core.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Iterability of jQuery objects (gh-1693)",
            "suites": [
                "core"
            ],
            "updatePoint": {
                "line": 1430,
                "column": 51
            },
            "line": 1430,
            "code": "QUnit.test(\"Iterability of jQuery objects (gh-1693)\", function (assert) {",
            "file": "unit/core.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "css(String|Hash)",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 5,
                "column": 30
            },
            "line": 5,
            "code": "  QUnit.test(\"css(String|Hash)\", function (assert) {",
            "file": "unit/css.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "css() explicit and relative values",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 116,
                "column": 48
            },
            "line": 116,
            "code": "  QUnit.test(\"css() explicit and relative values\", function (assert) {",
            "file": "unit/css.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "css() non-px relative values (gh-1711)",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 209,
                "column": 52
            },
            "line": 209,
            "code": "  QUnit.test(\"css() non-px relative values (gh-1711)\", function (assert) {",
            "file": "unit/css.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "css() mismatched relative values with bounded styles (gh-2144)",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 276,
                "column": 76
            },
            "line": 276,
            "code": "  QUnit.test(\"css() mismatched relative values with bounded styles (gh-2144)\", function (assert) {",
            "file": "unit/css.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "css(String, Object)",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 292,
                "column": 33
            },
            "line": 292,
            "code": "  QUnit.test(\"css(String, Object)\", function (assert) {",
            "file": "unit/css.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "css(String, Object) with negative values",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 329,
                "column": 54
            },
            "line": 329,
            "code": "  QUnit.test(\"css(String, Object) with negative values\", function (assert) {",
            "file": "unit/css.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "css(Array)",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 341,
                "column": 24
            },
            "line": 341,
            "code": "  QUnit.test(\"css(Array)\", function (assert) {",
            "file": "unit/css.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "css(String, Function)",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 354,
                "column": 35
            },
            "line": 354,
            "code": "  QUnit.test(\"css(String, Function)\", function (assert) {",
            "file": "unit/css.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "css(String, Function) with incoming value",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 374,
                "column": 55
            },
            "line": 374,
            "code": "  QUnit.test(\"css(String, Function) with incoming value\", function (assert) {",
            "file": "unit/css.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "css(Object) where values are Functions",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 394,
                "column": 52
            },
            "line": 394,
            "code": "  QUnit.test(\"css(Object) where values are Functions\", function (assert) {",
            "file": "unit/css.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "css(Object) where values are Functions with incoming values",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 416,
                "column": 73
            },
            "line": 416,
            "code": "  QUnit.test(\"css(Object) where values are Functions with incoming values\", function (assert) {",
            "file": "unit/css.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "show()",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 440,
                "column": 20
            },
            "line": 440,
            "code": "  QUnit.test(\"show()\", function (assert) {",
            "file": "unit/css.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "show/hide detached nodes",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 483,
                "column": 38
            },
            "line": 483,
            "code": "  QUnit.test(\"show/hide detached nodes\", function (assert) {",
            "file": "unit/css.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "hide hidden elements (bug #7141)",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 576,
                "column": 46
            },
            "line": 576,
            "code": "  QUnit.test(\"hide hidden elements (bug #7141)\", function (assert) {",
            "file": "unit/css.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "show() after hide() should always set display to initial value (#14750)",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 586,
                "column": 85
            },
            "line": 586,
            "code": "  QUnit.test(\"show() after hide() should always set display to initial value (#14750)\", function (assert) {",
            "file": "unit/css.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "show/hide 3.0, default display",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 594,
                "column": 44
            },
            "line": 594,
            "code": "  QUnit.test(\"show/hide 3.0, default display\", function (assert) {",
            "file": "unit/css.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "show/hide 3.0, default body display",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 626,
                "column": 49
            },
            "line": 626,
            "code": "  QUnit.test(\"show/hide 3.0, default body display\", function (assert) {",
            "file": "unit/css.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "show/hide 3.0, cascade display",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 635,
                "column": 44
            },
            "line": 635,
            "code": "  QUnit.test(\"show/hide 3.0, cascade display\", function (assert) {",
            "file": "unit/css.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "show/hide 3.0, inline display",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 666,
                "column": 43
            },
            "line": 666,
            "code": "  QUnit.test(\"show/hide 3.0, inline display\", function (assert) {",
            "file": "unit/css.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "show/hide 3.0, cascade hidden",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 698,
                "column": 43
            },
            "line": 698,
            "code": "  QUnit.test(\"show/hide 3.0, cascade hidden\", function (assert) {",
            "file": "unit/css.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "show/hide 3.0, inline hidden",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 730,
                "column": 42
            },
            "line": 730,
            "code": "  QUnit.test(\"show/hide 3.0, inline hidden\", function (assert) {",
            "file": "unit/css.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.css(elem, 'height') doesn't clear radio buttons (bug #1095)",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 830,
                "column": 80
            },
            "line": 830,
            "code": "  QUnit.test(\"jQuery.css(elem, 'height') doesn't clear radio buttons (bug #1095)\", function (assert) {",
            "file": "unit/css.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "internal ref to elem.runtimeStyle (bug #7608)",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 839,
                "column": 59
            },
            "line": 839,
            "code": "  QUnit.test(\"internal ref to elem.runtimeStyle (bug #7608)\", function (assert) {",
            "file": "unit/css.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "computed margins (trac-3333; gh-2237)",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 853,
                "column": 51
            },
            "line": 853,
            "code": "  QUnit.test(\"computed margins (trac-3333; gh-2237)\", function (assert) {",
            "file": "unit/css.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "box model properties incorrectly returning % instead of px, see #10639 and #12088",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 874,
                "column": 95
            },
            "line": 874,
            "code": "  QUnit.test(\"box model properties incorrectly returning % instead of px, see #10639 and #12088\", function (assert) {",
            "file": "unit/css.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "widows & orphans #8936",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 889,
                "column": 36
            },
            "line": 889,
            "code": "  QUnit.test(\"widows & orphans #8936\", function (assert) {",
            "file": "unit/css.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "can't get css for disconnected in IE<9, see #10254 and #8388",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 900,
                "column": 74
            },
            "line": 900,
            "code": "  QUnit.test(\"can't get css for disconnected in IE<9, see #10254 and #8388\", function (assert) {",
            "file": "unit/css.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Ensure styles are retrieving from parsed html on document fragments",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 908,
                "column": 81
            },
            "line": 908,
            "code": "  QUnit.test(\"Ensure styles are retrieving from parsed html on document fragments\", function (assert) {",
            "file": "unit/css.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "can't get background-position in IE<9, see #10796",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 913,
                "column": 63
            },
            "line": 913,
            "code": "  QUnit.test(\"can't get background-position in IE<9, see #10796\", function (assert) {",
            "file": "unit/css.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "percentage properties for left and top should be transformed to pixels, see #9505",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 927,
                "column": 97
            },
            "line": 927,
            "code": "    QUnit.test(\"percentage properties for left and top should be transformed to pixels, see #9505\", function (assert) {",
            "file": "unit/css.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Do not append px (#9548, #12990, #2792)",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 936,
                "column": 53
            },
            "line": 936,
            "code": "  QUnit.test(\"Do not append px (#9548, #12990, #2792)\", function (assert) {",
            "file": "unit/css.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Do not append px to most properties not accepting integer values",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 1008,
                "column": 78
            },
            "line": 1008,
            "code": "  QUnit.test(\"Do not append px to most properties not accepting integer values\", function (assert) {",
            "file": "unit/css.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Append px to whitelisted properties",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 1020,
                "column": 49
            },
            "line": 1020,
            "code": "  QUnit.test(\"Append px to whitelisted properties\", function (assert) {",
            "file": "unit/css.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "css('width') and css('height') should respect box-sizing, see #11004",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 1071,
                "column": 82
            },
            "line": 1071,
            "code": "  QUnit.test(\"css('width') and css('height') should respect box-sizing, see #11004\", function (assert) {",
            "file": "unit/css.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "table rows width/height should be unaffected by inline styles",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 1080,
                "column": 75
            },
            "line": 1080,
            "code": "  QUnit.test(\"table rows width/height should be unaffected by inline styles\", function (assert) {",
            "file": "unit/css.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "certain css values of 'normal' should be convertable to a number, see #8627",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 1110,
                "column": 89
            },
            "line": 1110,
            "code": "  QUnit.test(\"certain css values of 'normal' should be convertable to a number, see #8627\", function (assert) {",
            "file": "unit/css.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "cssHooks - expand",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 1117,
                "column": 31
            },
            "line": 1117,
            "code": "  QUnit.test(\"cssHooks - expand\", function (assert) {",
            "file": "unit/css.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "css opacity consistency across browsers (#12685)",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 1149,
                "column": 62
            },
            "line": 1149,
            "code": "  QUnit.test(\"css opacity consistency across browsers (#12685)\", function (assert) {",
            "file": "unit/css.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Keep the last style if the new one isn't recognized by the browser (#14836)",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 1209,
                "column": 89
            },
            "line": 1209,
            "code": "  QUnit.test(\"Keep the last style if the new one isn't recognized by the browser (#14836)\", function (assert) {",
            "file": "unit/css.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Keep the last style if the new one is a non-empty whitespace (gh-3204)",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 1214,
                "column": 84
            },
            "line": 1214,
            "code": "  QUnit.test(\"Keep the last style if the new one is a non-empty whitespace (gh-3204)\", function (assert) {",
            "file": "unit/css.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Reset the style if set to an empty string",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 1219,
                "column": 55
            },
            "line": 1219,
            "code": "  QUnit.test(\"Reset the style if set to an empty string\", function (assert) {",
            "file": "unit/css.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Clearing a Cloned Element's Style Shouldn't Clear the Original Element's Style (#8908)",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 1226,
                "column": 100
            },
            "line": 1226,
            "code": "  QUnit.test(\"Clearing a Cloned Element's Style Shouldn't Clear the Original Element's Style (#8908)\", function (assert) {",
            "file": "unit/css.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Don't append px to CSS \"order\" value (#14049)",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 1283,
                "column": 61
            },
            "line": 1283,
            "code": "  QUnit.test(\"Don't append px to CSS \\\"order\\\" value (#14049)\", function (assert) {",
            "file": "unit/css.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Do not throw on frame elements from css method (#15098)",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 1289,
                "column": 69
            },
            "line": 1289,
            "code": "  QUnit.test(\"Do not throw on frame elements from css method (#15098)\", function (assert) {",
            "file": "unit/css.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Don't default to a cached previously used wrong prefixed name (gh-2015)",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 1314,
                "column": 87
            },
            "line": 1314,
            "code": "    QUnit.test(\"Don't default to a cached previously used wrong prefixed name (gh-2015)\", function (assert) {",
            "file": "unit/css.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Don't detect fake set properties on a node when caching the prefixed version",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 1370,
                "column": 92
            },
            "line": 1370,
            "code": "    QUnit.test(\"Don't detect fake set properties on a node when caching the prefixed version\", function (assert) {",
            "file": "unit/css.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "IE vendor prefixes are not mangled",
            "suites": [
                "css"
            ],
            "updatePoint": {
                "line": 1448,
                "column": 50
            },
            "line": 1448,
            "code": "    QUnit.test(\"IE vendor prefixes are not mangled\", function (assert) {",
            "file": "unit/css.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "expando",
            "suites": [
                "data"
            ],
            "updatePoint": {
                "line": 4,
                "column": 19
            },
            "line": 4,
            "code": "QUnit.test(\"expando\", function (assert) {",
            "file": "unit/data.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.data & removeData, expected returns",
            "suites": [
                "data"
            ],
            "updatePoint": {
                "line": 8,
                "column": 54
            },
            "line": 8,
            "code": "QUnit.test(\"jQuery.data & removeData, expected returns\", function (assert) {",
            "file": "unit/data.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery._data & _removeData, expected returns",
            "suites": [
                "data"
            ],
            "updatePoint": {
                "line": 20,
                "column": 56
            },
            "line": 20,
            "code": "QUnit.test(\"jQuery._data & _removeData, expected returns\", function (assert) {",
            "file": "unit/data.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.hasData no side effects",
            "suites": [
                "data"
            ],
            "updatePoint": {
                "line": 32,
                "column": 42
            },
            "line": 32,
            "code": "QUnit.test(\"jQuery.hasData no side effects\", function (assert) {",
            "file": "unit/data.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.data(div)",
            "suites": [
                "data"
            ],
            "updatePoint": {
                "line": 92,
                "column": 28
            },
            "line": 92,
            "code": "QUnit.test(\"jQuery.data(div)\", function (assert) {",
            "file": "unit/data.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.data({})",
            "suites": [
                "data"
            ],
            "updatePoint": {
                "line": 97,
                "column": 27
            },
            "line": 97,
            "code": "QUnit.test(\"jQuery.data({})\", function (assert) {",
            "file": "unit/data.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.data(window)",
            "suites": [
                "data"
            ],
            "updatePoint": {
                "line": 101,
                "column": 31
            },
            "line": 101,
            "code": "QUnit.test(\"jQuery.data(window)\", function (assert) {",
            "file": "unit/data.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.data(document)",
            "suites": [
                "data"
            ],
            "updatePoint": {
                "line": 108,
                "column": 33
            },
            "line": 108,
            "code": "QUnit.test(\"jQuery.data(document)\", function (assert) {",
            "file": "unit/data.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.data(<embed>)",
            "suites": [
                "data"
            ],
            "updatePoint": {
                "line": 112,
                "column": 32
            },
            "line": 112,
            "code": "QUnit.test(\"jQuery.data(<embed>)\", function (assert) {",
            "file": "unit/data.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.data(object/flash)",
            "suites": [
                "data"
            ],
            "updatePoint": {
                "line": 116,
                "column": 37
            },
            "line": 116,
            "code": "QUnit.test(\"jQuery.data(object/flash)\", function (assert) {",
            "file": "unit/data.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery().data() === undefined (#14101)",
            "suites": [
                "data"
            ],
            "updatePoint": {
                "line": 123,
                "column": 50
            },
            "line": 123,
            "code": "QUnit.test(\"jQuery().data() === undefined (#14101)\", function (assert) {",
            "file": "unit/data.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": ".data()",
            "suites": [
                "data"
            ],
            "updatePoint": {
                "line": 128,
                "column": 19
            },
            "line": 128,
            "code": "QUnit.test(\".data()\", function (assert) {",
            "file": "unit/data.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery(Element).data(String, Object).data(String)",
            "suites": [
                "data"
            ],
            "updatePoint": {
                "line": 173,
                "column": 61
            },
            "line": 173,
            "code": "QUnit.test(\"jQuery(Element).data(String, Object).data(String)\", function (assert) {",
            "file": "unit/data.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery(plain Object).data(String, Object).data(String)",
            "suites": [
                "data"
            ],
            "updatePoint": {
                "line": 185,
                "column": 66
            },
            "line": 185,
            "code": "QUnit.test(\"jQuery(plain Object).data(String, Object).data(String)\", function (assert) {",
            "file": "unit/data.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": ".data(object) does not retain references. #13815",
            "suites": [
                "data"
            ],
            "updatePoint": {
                "line": 200,
                "column": 60
            },
            "line": 200,
            "code": "QUnit.test(\".data(object) does not retain references. #13815\", function (assert) {",
            "file": "unit/data.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "data-* attributes",
            "suites": [
                "data"
            ],
            "updatePoint": {
                "line": 210,
                "column": 29
            },
            "line": 210,
            "code": "QUnit.test(\"data-* attributes\", function (assert) {",
            "file": "unit/data.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": ".data(Object)",
            "suites": [
                "data"
            ],
            "updatePoint": {
                "line": 331,
                "column": 25
            },
            "line": 331,
            "code": "QUnit.test(\".data(Object)\", function (assert) {",
            "file": "unit/data.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.removeData",
            "suites": [
                "data"
            ],
            "updatePoint": {
                "line": 356,
                "column": 29
            },
            "line": 356,
            "code": "QUnit.test(\"jQuery.removeData\", function (assert) {",
            "file": "unit/data.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": ".removeData()",
            "suites": [
                "data"
            ],
            "updatePoint": {
                "line": 395,
                "column": 25
            },
            "line": 395,
            "code": "QUnit.test(\".removeData()\", function (assert) {",
            "file": "unit/data.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "JSON serialization (#8108)",
            "suites": [
                "data"
            ],
            "updatePoint": {
                "line": 412,
                "column": 38
            },
            "line": 412,
            "code": "QUnit.test(\"JSON serialization (#8108)\", function (assert) {",
            "file": "unit/data.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": ".data should follow html5 specification regarding camel casing",
            "suites": [
                "data"
            ],
            "updatePoint": {
                "line": 420,
                "column": 74
            },
            "line": 420,
            "code": "QUnit.test(\".data should follow html5 specification regarding camel casing\", function (assert) {",
            "file": "unit/data.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": ".data should not miss preset data-* w/ hyphenated property names",
            "suites": [
                "data"
            ],
            "updatePoint": {
                "line": 438,
                "column": 76
            },
            "line": 438,
            "code": "QUnit.test(\".data should not miss preset data-* w/ hyphenated property names\", function (assert) {",
            "file": "unit/data.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.data should not miss data-* w/ hyphenated property names #14047",
            "suites": [
                "data"
            ],
            "updatePoint": {
                "line": 452,
                "column": 82
            },
            "line": 452,
            "code": "QUnit.test(\"jQuery.data should not miss data-* w/ hyphenated property names #14047\", function (assert) {",
            "file": "unit/data.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": ".data should not miss attr() set data-* with hyphenated property names",
            "suites": [
                "data"
            ],
            "updatePoint": {
                "line": 458,
                "column": 82
            },
            "line": 458,
            "code": "QUnit.test(\".data should not miss attr() set data-* with hyphenated property names\", function (assert) {",
            "file": "unit/data.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": ".data always sets data with the camelCased key (gh-2257)",
            "suites": [
                "data"
            ],
            "updatePoint": {
                "line": 479,
                "column": 68
            },
            "line": 479,
            "code": "QUnit.test(\".data always sets data with the camelCased key (gh-2257)\", function (assert) {",
            "file": "unit/data.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": ".data should not strip more than one hyphen when camelCasing (gh-2070)",
            "suites": [
                "data"
            ],
            "updatePoint": {
                "line": 527,
                "column": 82
            },
            "line": 527,
            "code": "QUnit.test(\".data should not strip more than one hyphen when camelCasing (gh-2070)\", function (assert) {",
            "file": "unit/data.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": ".data supports interoperable hyphenated/camelCase get/set of properties with arbitrary non-null|NaN|undefined values",
            "suites": [
                "data"
            ],
            "updatePoint": {
                "line": 535,
                "column": 128
            },
            "line": 535,
            "code": "QUnit.test(\".data supports interoperable hyphenated/camelCase get/set of properties with arbitrary non-null|NaN|undefined values\", function (assert) {",
            "file": "unit/data.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": ".data supports interoperable removal of hyphenated/camelCase properties",
            "suites": [
                "data"
            ],
            "updatePoint": {
                "line": 613,
                "column": 83
            },
            "line": 613,
            "code": "QUnit.test(\".data supports interoperable removal of hyphenated/camelCase properties\", function (assert) {",
            "file": "unit/data.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": ".data supports interoperable removal of properties SET TWICE #13850",
            "suites": [
                "data"
            ],
            "updatePoint": {
                "line": 643,
                "column": 79
            },
            "line": 643,
            "code": "QUnit.test(\".data supports interoperable removal of properties SET TWICE #13850\", function (assert) {",
            "file": "unit/data.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": ".removeData supports removal of hyphenated properties via array (#12786, gh-2257)",
            "suites": [
                "data"
            ],
            "updatePoint": {
                "line": 664,
                "column": 93
            },
            "line": 664,
            "code": "QUnit.test(\".removeData supports removal of hyphenated properties via array (#12786, gh-2257)\", function (assert) {",
            "file": "unit/data.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": ".removeData should not throw exceptions. (#10080)",
            "suites": [
                "data"
            ],
            "updatePoint": {
                "line": 691,
                "column": 61
            },
            "line": 691,
            "code": "QUnit.test(\".removeData should not throw exceptions. (#10080)\", function (assert) {",
            "file": "unit/data.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": ".data only checks element attributes once. #8909",
            "suites": [
                "data"
            ],
            "updatePoint": {
                "line": 702,
                "column": 60
            },
            "line": 702,
            "code": "QUnit.test(\".data only checks element attributes once. #8909\", function (assert) {",
            "file": "unit/data.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "data-* with JSON value can have newlines",
            "suites": [
                "data"
            ],
            "updatePoint": {
                "line": 718,
                "column": 52
            },
            "line": 718,
            "code": "QUnit.test(\"data-* with JSON value can have newlines\", function (assert) {",
            "file": "unit/data.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": ".data doesn't throw when calling selection is empty. #13551",
            "suites": [
                "data"
            ],
            "updatePoint": {
                "line": 724,
                "column": 71
            },
            "line": 724,
            "code": "QUnit.test(\".data doesn't throw when calling selection is empty. #13551\", function (assert) {",
            "file": "unit/data.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "acceptData",
            "suites": [
                "data"
            ],
            "updatePoint": {
                "line": 734,
                "column": 22
            },
            "line": 734,
            "code": "QUnit.test(\"acceptData\", function (assert) {",
            "file": "unit/data.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Check proper data removal of non-element descendants nodes (#8335)",
            "suites": [
                "data"
            ],
            "updatePoint": {
                "line": 753,
                "column": 78
            },
            "line": 753,
            "code": "QUnit.test(\"Check proper data removal of non-element descendants nodes (#8335)\", function (assert) {",
            "file": "unit/data.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Check that the expando is removed when there's no more data",
            "suites": [
                "data"
            ],
            "updatePoint": {
                "line": 766,
                "column": 71
            },
            "line": 766,
            "code": "QUnit.test(\"Check that the expando is removed when there's no more data\", function (assert) {",
            "file": "unit/data.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Check that the expando is removed when there's no more data on non-nodes",
            "suites": [
                "data"
            ],
            "updatePoint": {
                "line": 780,
                "column": 84
            },
            "line": 780,
            "code": "QUnit.test(\"Check that the expando is removed when there's no more data on non-nodes\", function (assert) {",
            "file": "unit/data.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": ".data(prop) does not create expando",
            "suites": [
                "data"
            ],
            "updatePoint": {
                "line": 796,
                "column": 47
            },
            "line": 796,
            "code": "QUnit.test(\".data(prop) does not create expando\", function (assert) {",
            "file": "unit/data.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "keys matching Object.prototype properties  (gh-3256)",
            "suites": [
                "data"
            ],
            "updatePoint": {
                "line": 809,
                "column": 64
            },
            "line": 809,
            "code": "QUnit.test(\"keys matching Object.prototype properties  (gh-3256)\", function (assert) {",
            "file": "unit/data.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.Deferred - chainability",
            "suites": [
                "deferred"
            ],
            "updatePoint": {
                "line": 80,
                "column": 44
            },
            "line": 80,
            "code": "  QUnit.test(\"jQuery.Deferred - chainability\", function (assert) {",
            "file": "unit/deferred.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.Deferred.then - filtering (done)",
            "suites": [
                "deferred"
            ],
            "updatePoint": {
                "line": 91,
                "column": 53
            },
            "line": 91,
            "code": "  QUnit.test(\"jQuery.Deferred.then - filtering (done)\", function (assert) {",
            "file": "unit/deferred.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.Deferred.then - filtering (fail)",
            "suites": [
                "deferred"
            ],
            "updatePoint": {
                "line": 124,
                "column": 53
            },
            "line": 124,
            "code": "  QUnit.test(\"jQuery.Deferred.then - filtering (fail)\", function (assert) {",
            "file": "unit/deferred.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.Deferred.catch",
            "suites": [
                "deferred"
            ],
            "updatePoint": {
                "line": 157,
                "column": 35
            },
            "line": 157,
            "code": "  QUnit.test(\"jQuery.Deferred.catch\", function (assert) {",
            "file": "unit/deferred.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "[PIPE ONLY] jQuery.Deferred.pipe - filtering (fail)",
            "suites": [
                "deferred"
            ],
            "updatePoint": {
                "line": 190,
                "column": 65
            },
            "line": 190,
            "code": "  QUnit.test(\"[PIPE ONLY] jQuery.Deferred.pipe - filtering (fail)\", function (assert) {",
            "file": "unit/deferred.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.Deferred.then - filtering (progress)",
            "suites": [
                "deferred"
            ],
            "updatePoint": {
                "line": 223,
                "column": 57
            },
            "line": 223,
            "code": "  QUnit.test(\"jQuery.Deferred.then - filtering (progress)\", function (assert) {",
            "file": "unit/deferred.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.Deferred.then - deferred (done)",
            "suites": [
                "deferred"
            ],
            "updatePoint": {
                "line": 247,
                "column": 52
            },
            "line": 247,
            "code": "  QUnit.test(\"jQuery.Deferred.then - deferred (done)\", function (assert) {",
            "file": "unit/deferred.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.Deferred.then - deferred (fail)",
            "suites": [
                "deferred"
            ],
            "updatePoint": {
                "line": 274,
                "column": 52
            },
            "line": 274,
            "code": "  QUnit.test(\"jQuery.Deferred.then - deferred (fail)\", function (assert) {",
            "file": "unit/deferred.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.Deferred.then - deferred (progress)",
            "suites": [
                "deferred"
            ],
            "updatePoint": {
                "line": 301,
                "column": 56
            },
            "line": 301,
            "code": "  QUnit.test(\"jQuery.Deferred.then - deferred (progress)\", function (assert) {",
            "file": "unit/deferred.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "[PIPE ONLY] jQuery.Deferred.pipe - deferred (progress)",
            "suites": [
                "deferred"
            ],
            "updatePoint": {
                "line": 336,
                "column": 68
            },
            "line": 336,
            "code": "  QUnit.test(\"[PIPE ONLY] jQuery.Deferred.pipe - deferred (progress)\", function (assert) {",
            "file": "unit/deferred.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.Deferred.then - context",
            "suites": [
                "deferred"
            ],
            "updatePoint": {
                "line": 363,
                "column": 44
            },
            "line": 363,
            "code": "  QUnit.test(\"jQuery.Deferred.then - context\", function (assert) {",
            "file": "unit/deferred.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "[PIPE ONLY] jQuery.Deferred.pipe - context",
            "suites": [
                "deferred"
            ],
            "updatePoint": {
                "line": 414,
                "column": 56
            },
            "line": 414,
            "code": "  QUnit.test(\"[PIPE ONLY] jQuery.Deferred.pipe - context\", function (assert) {",
            "file": "unit/deferred.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.Deferred.then - spec compatibility",
            "suites": [
                "deferred"
            ],
            "updatePoint": {
                "line": 465,
                "column": 55
            },
            "line": 465,
            "code": "  QUnit.test(\"jQuery.Deferred.then - spec compatibility\", function (assert) {",
            "file": "unit/deferred.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.Deferred.exceptionHook",
            "suites": [
                "deferred"
            ],
            "updatePoint": {
                "line": 494,
                "column": 43
            },
            "line": 494,
            "code": "  QUnit.test(\"jQuery.Deferred.exceptionHook\", function (assert) {",
            "file": "unit/deferred.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.Deferred.exceptionHook with stack hooks",
            "suites": [
                "deferred"
            ],
            "updatePoint": {
                "line": 519,
                "column": 60
            },
            "line": 519,
            "code": "  QUnit.test(\"jQuery.Deferred.exceptionHook with stack hooks\", function (assert) {",
            "file": "unit/deferred.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.Deferred - 1.x/2.x compatibility",
            "suites": [
                "deferred"
            ],
            "updatePoint": {
                "line": 548,
                "column": 53
            },
            "line": 548,
            "code": "  QUnit.test(\"jQuery.Deferred - 1.x/2.x compatibility\", function (assert) {",
            "file": "unit/deferred.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.Deferred.then - progress and thenables",
            "suites": [
                "deferred"
            ],
            "updatePoint": {
                "line": 591,
                "column": 59
            },
            "line": 591,
            "code": "  QUnit.test(\"jQuery.Deferred.then - progress and thenables\", function (assert) {",
            "file": "unit/deferred.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.Deferred - notify and resolve",
            "suites": [
                "deferred"
            ],
            "updatePoint": {
                "line": 617,
                "column": 50
            },
            "line": 617,
            "code": "  QUnit.test(\"jQuery.Deferred - notify and resolve\", function (assert) {",
            "file": "unit/deferred.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.Deferred - resolved to a notifying deferred",
            "suites": [
                "deferred"
            ],
            "updatePoint": {
                "line": 659,
                "column": 64
            },
            "line": 659,
            "code": "  QUnit.test(\"jQuery.Deferred - resolved to a notifying deferred\", function (assert) {",
            "file": "unit/deferred.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.when(nonThenable) - like Promise.resolve",
            "suites": [
                "deferred"
            ],
            "updatePoint": {
                "line": 677,
                "column": 61
            },
            "line": 677,
            "code": "  QUnit.test(\"jQuery.when(nonThenable) - like Promise.resolve\", function (assert) {",
            "file": "unit/deferred.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.when(thenable) - like Promise.resolve",
            "suites": [
                "deferred"
            ],
            "updatePoint": {
                "line": 726,
                "column": 58
            },
            "line": 726,
            "code": "  QUnit.test(\"jQuery.when(thenable) - like Promise.resolve\", function (assert) {",
            "file": "unit/deferred.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.when(a, b) - like Promise.all",
            "suites": [
                "deferred"
            ],
            "updatePoint": {
                "line": 841,
                "column": 50
            },
            "line": 841,
            "code": "  QUnit.test(\"jQuery.when(a, b) - like Promise.all\", function (assert) {",
            "file": "unit/deferred.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.when - always returns a new promise",
            "suites": [
                "deferred"
            ],
            "updatePoint": {
                "line": 914,
                "column": 56
            },
            "line": 914,
            "code": "  QUnit.test(\"jQuery.when - always returns a new promise\", function (assert) {",
            "file": "unit/deferred.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.when - notify does not affect resolved",
            "suites": [
                "deferred"
            ],
            "updatePoint": {
                "line": 940,
                "column": 59
            },
            "line": 940,
            "code": "  QUnit.test(\"jQuery.when - notify does not affect resolved\", function (assert) {",
            "file": "unit/deferred.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.when(...) - opportunistically synchronous",
            "suites": [
                "deferred"
            ],
            "updatePoint": {
                "line": 953,
                "column": 62
            },
            "line": 953,
            "code": "  QUnit.test(\"jQuery.when(...) - opportunistically synchronous\", function (assert) {",
            "file": "unit/deferred.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "width()",
            "suites": [
                "dimensions"
            ],
            "updatePoint": {
                "line": 70,
                "column": 21
            },
            "line": 70,
            "code": "  QUnit.test(\"width()\", function (assert) {",
            "file": "unit/dimensions.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "width(Function)",
            "suites": [
                "dimensions"
            ],
            "updatePoint": {
                "line": 73,
                "column": 29
            },
            "line": 73,
            "code": "  QUnit.test(\"width(Function)\", function (assert) {",
            "file": "unit/dimensions.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "width(Function(args))",
            "suites": [
                "dimensions"
            ],
            "updatePoint": {
                "line": 76,
                "column": 35
            },
            "line": 76,
            "code": "  QUnit.test(\"width(Function(args))\", function (assert) {",
            "file": "unit/dimensions.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "height()",
            "suites": [
                "dimensions"
            ],
            "updatePoint": {
                "line": 125,
                "column": 22
            },
            "line": 125,
            "code": "  QUnit.test(\"height()\", function (assert) {",
            "file": "unit/dimensions.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "height(Function)",
            "suites": [
                "dimensions"
            ],
            "updatePoint": {
                "line": 128,
                "column": 30
            },
            "line": 128,
            "code": "  QUnit.test(\"height(Function)\", function (assert) {",
            "file": "unit/dimensions.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "height(Function(args))",
            "suites": [
                "dimensions"
            ],
            "updatePoint": {
                "line": 131,
                "column": 36
            },
            "line": 131,
            "code": "  QUnit.test(\"height(Function(args))\", function (assert) {",
            "file": "unit/dimensions.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "innerWidth()",
            "suites": [
                "dimensions"
            ],
            "updatePoint": {
                "line": 140,
                "column": 26
            },
            "line": 140,
            "code": "  QUnit.test(\"innerWidth()\", function (assert) {",
            "file": "unit/dimensions.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "innerHeight()",
            "suites": [
                "dimensions"
            ],
            "updatePoint": {
                "line": 173,
                "column": 27
            },
            "line": 173,
            "code": "  QUnit.test(\"innerHeight()\", function (assert) {",
            "file": "unit/dimensions.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "outerWidth()",
            "suites": [
                "dimensions"
            ],
            "updatePoint": {
                "line": 206,
                "column": 26
            },
            "line": 206,
            "code": "  QUnit.test(\"outerWidth()\", function (assert) {",
            "file": "unit/dimensions.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "outerHeight()",
            "suites": [
                "dimensions"
            ],
            "updatePoint": {
                "line": 245,
                "column": 27
            },
            "line": 245,
            "code": "  QUnit.test(\"outerHeight()\", function (assert) {",
            "file": "unit/dimensions.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "child of a hidden elem (or unconnected node) has accurate inner/outer/Width()/Height()  see #9441 #9300",
            "suites": [
                "dimensions"
            ],
            "updatePoint": {
                "line": 284,
                "column": 117
            },
            "line": 284,
            "code": "  QUnit.test(\"child of a hidden elem (or unconnected node) has accurate inner/outer/Width()/Height()  see #9441 #9300\", function (assert) {",
            "file": "unit/dimensions.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "getting dimensions shouldn't modify runtimeStyle see #9233",
            "suites": [
                "dimensions"
            ],
            "updatePoint": {
                "line": 320,
                "column": 72
            },
            "line": 320,
            "code": "  QUnit.test(\"getting dimensions shouldn't modify runtimeStyle see #9233\", function (assert) {",
            "file": "unit/dimensions.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "table dimensions",
            "suites": [
                "dimensions"
            ],
            "updatePoint": {
                "line": 341,
                "column": 30
            },
            "line": 341,
            "code": "  QUnit.test(\"table dimensions\", function (assert) {",
            "file": "unit/dimensions.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "SVG dimensions (basic content-box)",
            "suites": [
                "dimensions"
            ],
            "updatePoint": {
                "line": 353,
                "column": 48
            },
            "line": 353,
            "code": "  QUnit.test(\"SVG dimensions (basic content-box)\", function (assert) {",
            "file": "unit/dimensions.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "SVG dimensions (content-box)",
            "suites": [
                "dimensions"
            ],
            "updatePoint": {
                "line": 366,
                "column": 42
            },
            "line": 366,
            "code": "  QUnit.test(\"SVG dimensions (content-box)\", function (assert) {",
            "file": "unit/dimensions.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "SVG dimensions (border-box)",
            "suites": [
                "dimensions"
            ],
            "updatePoint": {
                "line": 379,
                "column": 41
            },
            "line": 379,
            "code": "  QUnit.test(\"SVG dimensions (border-box)\", function (assert) {",
            "file": "unit/dimensions.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "box-sizing:border-box child of a hidden elem (or unconnected node) has accurate inner/outer/Width()/Height()  see #10413",
            "suites": [
                "dimensions"
            ],
            "updatePoint": {
                "line": 392,
                "column": 134
            },
            "line": 392,
            "code": "  QUnit.test(\"box-sizing:border-box child of a hidden elem (or unconnected node) has accurate inner/outer/Width()/Height()  see #10413\", function (assert) {",
            "file": "unit/dimensions.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "passing undefined is a setter #5571",
            "suites": [
                "dimensions"
            ],
            "updatePoint": {
                "line": 429,
                "column": 49
            },
            "line": 429,
            "code": "  QUnit.test(\"passing undefined is a setter #5571\", function (assert) {",
            "file": "unit/dimensions.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "setters with and without box-sizing:border-box",
            "suites": [
                "dimensions"
            ],
            "updatePoint": {
                "line": 436,
                "column": 60
            },
            "line": 436,
            "code": "  QUnit.test(\"setters with and without box-sizing:border-box\", function (assert) {",
            "file": "unit/dimensions.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "allow modification of coordinates argument (gh-1848)",
            "suites": [
                "dimensions"
            ],
            "updatePoint": {
                "line": 508,
                "column": 66
            },
            "line": 508,
            "code": "  QUnit.test(\"allow modification of coordinates argument (gh-1848)\", function (assert) {",
            "file": "unit/dimensions.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "outside view position (gh-2836)",
            "suites": [
                "dimensions"
            ],
            "updatePoint": {
                "line": 519,
                "column": 45
            },
            "line": 519,
            "code": "  QUnit.test(\"outside view position (gh-2836)\", function (assert) {",
            "file": "unit/dimensions.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "width/height on element with transform (gh-3193)",
            "suites": [
                "dimensions"
            ],
            "updatePoint": {
                "line": 534,
                "column": 62
            },
            "line": 534,
            "code": "  QUnit.test(\"width/height on element with transform (gh-3193)\", function (assert) {",
            "file": "unit/dimensions.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "width/height on an inline element with no explicitly-set dimensions (gh-3571)",
            "suites": [
                "dimensions"
            ],
            "updatePoint": {
                "line": 540,
                "column": 91
            },
            "line": 540,
            "code": "  QUnit.test(\"width/height on an inline element with no explicitly-set dimensions (gh-3571)\", function (assert) {",
            "file": "unit/dimensions.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "width/height on an inline element with percentage dimensions (gh-3611)",
            "suites": [
                "dimensions"
            ],
            "updatePoint": {
                "line": 551,
                "column": 84
            },
            "line": 551,
            "code": "  QUnit.test(\"width/height on an inline element with percentage dimensions (gh-3611)\", function (assert) {",
            "file": "unit/dimensions.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "width/height on a table row with phantom borders (gh-3698)",
            "suites": [
                "dimensions"
            ],
            "updatePoint": {
                "line": 565,
                "column": 72
            },
            "line": 565,
            "code": "  QUnit.test(\"width/height on a table row with phantom borders (gh-3698)\", function (assert) {",
            "file": "unit/dimensions.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "interaction with scrollbars (gh-3589)",
            "suites": [
                "dimensions"
            ],
            "updatePoint": {
                "line": 574,
                "column": 51
            },
            "line": 574,
            "code": "  QUnit.test(\"interaction with scrollbars (gh-3589)\", function (assert) {",
            "file": "unit/dimensions.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "outerWidth/Height for table cells and textarea with border-box in IE 11 (gh-4102)",
            "suites": [
                "dimensions"
            ],
            "updatePoint": {
                "line": 642,
                "column": 95
            },
            "line": 642,
            "code": "  QUnit.test(\"outerWidth/Height for table cells and textarea with border-box in IE 11 (gh-4102)\", function (assert) {",
            "file": "unit/dimensions.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "show() basic",
            "suites": [
                "effects"
            ],
            "updatePoint": {
                "line": 37,
                "column": 26
            },
            "line": 37,
            "code": "  QUnit.test(\"show() basic\", function (assert) {",
            "file": "unit/effects.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "show()",
            "suites": [
                "effects"
            ],
            "updatePoint": {
                "line": 44,
                "column": 20
            },
            "line": 44,
            "code": "  QUnit.test(\"show()\", function (assert) {",
            "file": "unit/effects.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "animate(Hash, Object, Function)",
            "suites": [
                "effects"
            ],
            "updatePoint": {
                "line": 199,
                "column": 45
            },
            "line": 199,
            "code": "  QUnit.test(\"animate(Hash, Object, Function)\", function (assert) {",
            "file": "unit/effects.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "animate relative values",
            "suites": [
                "effects"
            ],
            "updatePoint": {
                "line": 209,
                "column": 37
            },
            "line": 209,
            "code": "  QUnit.test(\"animate relative values\", function (assert) {",
            "file": "unit/effects.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "animate negative height",
            "suites": [
                "effects"
            ],
            "updatePoint": {
                "line": 243,
                "column": 37
            },
            "line": 243,
            "code": "  QUnit.test(\"animate negative height\", function (assert) {",
            "file": "unit/effects.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "animate negative margin",
            "suites": [
                "effects"
            ],
            "updatePoint": {
                "line": 252,
                "column": 37
            },
            "line": 252,
            "code": "  QUnit.test(\"animate negative margin\", function (assert) {",
            "file": "unit/effects.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "animate negative margin with px",
            "suites": [
                "effects"
            ],
            "updatePoint": {
                "line": 261,
                "column": 45
            },
            "line": 261,
            "code": "  QUnit.test(\"animate negative margin with px\", function (assert) {",
            "file": "unit/effects.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "animate negative padding",
            "suites": [
                "effects"
            ],
            "updatePoint": {
                "line": 270,
                "column": 38
            },
            "line": 270,
            "code": "  QUnit.test(\"animate negative padding\", function (assert) {",
            "file": "unit/effects.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "animate block as inline width/height",
            "suites": [
                "effects"
            ],
            "updatePoint": {
                "line": 279,
                "column": 50
            },
            "line": 279,
            "code": "  QUnit.test(\"animate block as inline width/height\", function (assert) {",
            "file": "unit/effects.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "animate native inline width/height",
            "suites": [
                "effects"
            ],
            "updatePoint": {
                "line": 295,
                "column": 48
            },
            "line": 295,
            "code": "  QUnit.test(\"animate native inline width/height\", function (assert) {",
            "file": "unit/effects.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "animate block width/height",
            "suites": [
                "effects"
            ],
            "updatePoint": {
                "line": 311,
                "column": 40
            },
            "line": 311,
            "code": "  QUnit.test(\"animate block width/height\", function (assert) {",
            "file": "unit/effects.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "animate table width/height",
            "suites": [
                "effects"
            ],
            "updatePoint": {
                "line": 336,
                "column": 40
            },
            "line": 336,
            "code": "  QUnit.test(\"animate table width/height\", function (assert) {",
            "file": "unit/effects.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "animate table-row width/height",
            "suites": [
                "effects"
            ],
            "updatePoint": {
                "line": 346,
                "column": 44
            },
            "line": 346,
            "code": "  QUnit.test(\"animate table-row width/height\", function (assert) {",
            "file": "unit/effects.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "animate table-cell width/height",
            "suites": [
                "effects"
            ],
            "updatePoint": {
                "line": 363,
                "column": 45
            },
            "line": 363,
            "code": "  QUnit.test(\"animate table-cell width/height\", function (assert) {",
            "file": "unit/effects.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "animate percentage(%) on width/height",
            "suites": [
                "effects"
            ],
            "updatePoint": {
                "line": 380,
                "column": 51
            },
            "line": 380,
            "code": "  QUnit.test(\"animate percentage(%) on width/height\", function (assert) {",
            "file": "unit/effects.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "animate resets overflow-x and overflow-y when finished",
            "suites": [
                "effects"
            ],
            "updatePoint": {
                "line": 393,
                "column": 68
            },
            "line": 393,
            "code": "  QUnit.test(\"animate resets overflow-x and overflow-y when finished\", function (assert) {",
            "file": "unit/effects.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "animate option { queue: false }",
            "suites": [
                "effects"
            ],
            "updatePoint": {
                "line": 431,
                "column": 45
            },
            "line": 431,
            "code": "  QUnit.test(\"animate option { queue: false }\", function (assert) {",
            "file": "unit/effects.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "animate option { queue: true }",
            "suites": [
                "effects"
            ],
            "updatePoint": {
                "line": 446,
                "column": 44
            },
            "line": 446,
            "code": "  QUnit.test(\"animate option { queue: true }\", function (assert) {",
            "file": "unit/effects.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "animate option { queue: 'name' }",
            "suites": [
                "effects"
            ],
            "updatePoint": {
                "line": 462,
                "column": 46
            },
            "line": 462,
            "code": "  QUnit.test(\"animate option { queue: 'name' }\", function (assert) {",
            "file": "unit/effects.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "animate with no properties",
            "suites": [
                "effects"
            ],
            "updatePoint": {
                "line": 489,
                "column": 40
            },
            "line": 489,
            "code": "  QUnit.test(\"animate with no properties\", function (assert) {",
            "file": "unit/effects.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "animate duration 0",
            "suites": [
                "effects"
            ],
            "updatePoint": {
                "line": 507,
                "column": 32
            },
            "line": 507,
            "code": "  QUnit.test(\"animate duration 0\", function (assert) {",
            "file": "unit/effects.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "animate hyphenated properties",
            "suites": [
                "effects"
            ],
            "updatePoint": {
                "line": 557,
                "column": 43
            },
            "line": 557,
            "code": "  QUnit.test(\"animate hyphenated properties\", function (assert) {",
            "file": "unit/effects.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "animate non-element",
            "suites": [
                "effects"
            ],
            "updatePoint": {
                "line": 567,
                "column": 33
            },
            "line": 567,
            "code": "  QUnit.test(\"animate non-element\", function (assert) {",
            "file": "unit/effects.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "animate non-element's zIndex without appending \"px\"",
            "suites": [
                "effects"
            ],
            "updatePoint": {
                "line": 579,
                "column": 67
            },
            "line": 579,
            "code": "  QUnit.test(\"animate non-element's zIndex without appending \\\"px\\\"\", function (assert) {",
            "file": "unit/effects.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "stop()",
            "suites": [
                "effects"
            ],
            "updatePoint": {
                "line": 591,
                "column": 20
            },
            "line": 591,
            "code": "  QUnit.test(\"stop()\", function (assert) {",
            "file": "unit/effects.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "stop() - several in queue",
            "suites": [
                "effects"
            ],
            "updatePoint": {
                "line": 624,
                "column": 39
            },
            "line": 624,
            "code": "  QUnit.test(\"stop() - several in queue\", function (assert) {",
            "file": "unit/effects.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "stop(clearQueue)",
            "suites": [
                "effects"
            ],
            "updatePoint": {
                "line": 651,
                "column": 30
            },
            "line": 651,
            "code": "  QUnit.test(\"stop(clearQueue)\", function (assert) {",
            "file": "unit/effects.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "stop(clearQueue, gotoEnd)",
            "suites": [
                "effects"
            ],
            "updatePoint": {
                "line": 676,
                "column": 39
            },
            "line": 676,
            "code": "  QUnit.test(\"stop(clearQueue, gotoEnd)\", function (assert) {",
            "file": "unit/effects.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "stop( queue, ..., ... ) - Stop single queues",
            "suites": [
                "effects"
            ],
            "updatePoint": {
                "line": 706,
                "column": 58
            },
            "line": 706,
            "code": "  QUnit.test(\"stop( queue, ..., ... ) - Stop single queues\", function (assert) {",
            "file": "unit/effects.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.fx.prototype.cur() - <1.8 Back Compat",
            "suites": [
                "effects"
            ],
            "updatePoint": {
                "line": 753,
                "column": 58
            },
            "line": 753,
            "code": "  QUnit.test(\"jQuery.fx.prototype.cur() - <1.8 Back Compat\", function (assert) {",
            "file": "unit/effects.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Overflow and Display",
            "suites": [
                "effects"
            ],
            "updatePoint": {
                "line": 779,
                "column": 34
            },
            "line": 779,
            "code": "  QUnit.test(\"Overflow and Display\", function (assert) {",
            "file": "unit/effects.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Effects chaining",
            "suites": [
                "effects"
            ],
            "updatePoint": {
                "line": 980,
                "column": 30
            },
            "line": 980,
            "code": "  QUnit.test(\"Effects chaining\", function (assert) {",
            "file": "unit/effects.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.show('fast') doesn't clear radio buttons (bug #1095)",
            "suites": [
                "effects"
            ],
            "updatePoint": {
                "line": 1029,
                "column": 73
            },
            "line": 1029,
            "code": "  QUnit.test(\"jQuery.show('fast') doesn't clear radio buttons (bug #1095)\", function (assert) {",
            "file": "unit/effects.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "interrupt toggle",
            "suites": [
                "effects"
            ],
            "updatePoint": {
                "line": 1040,
                "column": 30
            },
            "line": 1040,
            "code": "  QUnit.test(\"interrupt toggle\", function (assert) {",
            "file": "unit/effects.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "animate with per-property easing",
            "suites": [
                "effects"
            ],
            "updatePoint": {
                "line": 1091,
                "column": 46
            },
            "line": 1091,
            "code": "  QUnit.test(\"animate with per-property easing\", function (assert) {",
            "file": "unit/effects.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "animate with CSS shorthand properties",
            "suites": [
                "effects"
            ],
            "updatePoint": {
                "line": 1131,
                "column": 51
            },
            "line": 1131,
            "code": "  QUnit.test(\"animate with CSS shorthand properties\", function (assert) {",
            "file": "unit/effects.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "hide hidden elements, with animation (bug #7141)",
            "suites": [
                "effects"
            ],
            "updatePoint": {
                "line": 1178,
                "column": 62
            },
            "line": 1178,
            "code": "  QUnit.test(\"hide hidden elements, with animation (bug #7141)\", function (assert) {",
            "file": "unit/effects.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "animate unit-less properties (#4966)",
            "suites": [
                "effects"
            ],
            "updatePoint": {
                "line": 1191,
                "column": 50
            },
            "line": 1191,
            "code": "  QUnit.test(\"animate unit-less properties (#4966)\", function (assert) {",
            "file": "unit/effects.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "animate properties missing px w/ opacity as last (#9074)",
            "suites": [
                "effects"
            ],
            "updatePoint": {
                "line": 1202,
                "column": 70
            },
            "line": 1202,
            "code": "  QUnit.test(\"animate properties missing px w/ opacity as last (#9074)\", function (assert) {",
            "file": "unit/effects.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "callbacks should fire in correct order (#9100)",
            "suites": [
                "effects"
            ],
            "updatePoint": {
                "line": 1228,
                "column": 60
            },
            "line": 1228,
            "code": "  QUnit.test(\"callbacks should fire in correct order (#9100)\", function (assert) {",
            "file": "unit/effects.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "callbacks that throw exceptions will be removed (#5684)",
            "suites": [
                "effects"
            ],
            "updatePoint": {
                "line": 1245,
                "column": 69
            },
            "line": 1245,
            "code": "  QUnit.test(\"callbacks that throw exceptions will be removed (#5684)\", function (assert) {",
            "file": "unit/effects.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "animate will scale margin properties individually",
            "suites": [
                "effects"
            ],
            "updatePoint": {
                "line": 1266,
                "column": 63
            },
            "line": 1266,
            "code": "  QUnit.test(\"animate will scale margin properties individually\", function (assert) {",
            "file": "unit/effects.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Do not append px to 'fill-opacity' #9548",
            "suites": [
                "effects"
            ],
            "updatePoint": {
                "line": 1285,
                "column": 54
            },
            "line": 1285,
            "code": "  QUnit.test(\"Do not append px to 'fill-opacity' #9548\", function (assert) {",
            "file": "unit/effects.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "line-height animates correctly (#13855)",
            "suites": [
                "effects"
            ],
            "updatePoint": {
                "line": 1295,
                "column": 53
            },
            "line": 1295,
            "code": "  QUnit.test(\"line-height animates correctly (#13855)\", function (assert) {",
            "file": "unit/effects.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.Animation( object, props, opts )",
            "suites": [
                "effects"
            ],
            "updatePoint": {
                "line": 1344,
                "column": 53
            },
            "line": 1344,
            "code": "  QUnit.test(\"jQuery.Animation( object, props, opts )\", function (assert) {",
            "file": "unit/effects.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Animate Option: step: function( percent, tween )",
            "suites": [
                "effects"
            ],
            "updatePoint": {
                "line": 1371,
                "column": 62
            },
            "line": 1371,
            "code": "  QUnit.test(\"Animate Option: step: function( percent, tween )\", function (assert) {",
            "file": "unit/effects.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Animate callbacks have correct context",
            "suites": [
                "effects"
            ],
            "updatePoint": {
                "line": 1396,
                "column": 52
            },
            "line": 1396,
            "code": "  QUnit.test(\"Animate callbacks have correct context\", function (assert) {",
            "file": "unit/effects.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "User supplied callback called after show when fx off (#8892)",
            "suites": [
                "effects"
            ],
            "updatePoint": {
                "line": 1411,
                "column": 74
            },
            "line": 1411,
            "code": "  QUnit.test(\"User supplied callback called after show when fx off (#8892)\", function (assert) {",
            "file": "unit/effects.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "animate should set display for disconnected nodes",
            "suites": [
                "effects"
            ],
            "updatePoint": {
                "line": 1425,
                "column": 63
            },
            "line": 1425,
            "code": "  QUnit.test(\"animate should set display for disconnected nodes\", function (assert) {",
            "file": "unit/effects.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "hide called on element within hidden parent should set display to none (#10045)",
            "suites": [
                "effects"
            ],
            "updatePoint": {
                "line": 1496,
                "column": 93
            },
            "line": 1496,
            "code": "  QUnit.test(\"hide called on element within hidden parent should set display to none (#10045)\", function (assert) {",
            "file": "unit/effects.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "hide, fadeOut and slideUp called on element width height and width = 0 should set display to none",
            "suites": [
                "effects"
            ],
            "updatePoint": {
                "line": 1509,
                "column": 111
            },
            "line": 1509,
            "code": "  QUnit.test(\"hide, fadeOut and slideUp called on element width height and width = 0 should set display to none\", function (assert) {",
            "file": "unit/effects.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "hide should not leave hidden inline elements visible (#14848)",
            "suites": [
                "effects"
            ],
            "updatePoint": {
                "line": 1529,
                "column": 75
            },
            "line": 1529,
            "code": "  QUnit.test(\"hide should not leave hidden inline elements visible (#14848)\", function (assert) {",
            "file": "unit/effects.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Handle queue:false promises",
            "suites": [
                "effects"
            ],
            "updatePoint": {
                "line": 1540,
                "column": 41
            },
            "line": 1540,
            "code": "  QUnit.test(\"Handle queue:false promises\", function (assert) {",
            "file": "unit/effects.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "multiple unqueued and promise",
            "suites": [
                "effects"
            ],
            "updatePoint": {
                "line": 1587,
                "column": 43
            },
            "line": 1587,
            "code": "  QUnit.test(\"multiple unqueued and promise\", function (assert) {",
            "file": "unit/effects.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "animate does not change start value for non-px animation (#7109)",
            "suites": [
                "effects"
            ],
            "updatePoint": {
                "line": 1619,
                "column": 78
            },
            "line": 1619,
            "code": "  QUnit.test(\"animate does not change start value for non-px animation (#7109)\", function (assert) {",
            "file": "unit/effects.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "non-px animation handles non-numeric start (#11971)",
            "suites": [
                "effects"
            ],
            "updatePoint": {
                "line": 1647,
                "column": 65
            },
            "line": 1647,
            "code": "  QUnit.test(\"non-px animation handles non-numeric start (#11971)\", function (assert) {",
            "file": "unit/effects.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Animation callbacks (#11797)",
            "suites": [
                "effects"
            ],
            "updatePoint": {
                "line": 1679,
                "column": 42
            },
            "line": 1679,
            "code": "  QUnit.test(\"Animation callbacks (#11797)\", function (assert) {",
            "file": "unit/effects.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Animation callbacks in order (#2292)",
            "suites": [
                "effects"
            ],
            "updatePoint": {
                "line": 1752,
                "column": 50
            },
            "line": 1752,
            "code": "  QUnit.test(\"Animation callbacks in order (#2292)\", function (assert) {",
            "file": "unit/effects.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Animate properly sets overflow hidden when animating width/height (#12117)",
            "suites": [
                "effects"
            ],
            "updatePoint": {
                "line": 1788,
                "column": 88
            },
            "line": 1788,
            "code": "  QUnit.test(\"Animate properly sets overflow hidden when animating width/height (#12117)\", function (assert) {",
            "file": "unit/effects.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Each tick of the timer loop uses a fresh time (#12837)",
            "suites": [
                "effects"
            ],
            "updatePoint": {
                "line": 1802,
                "column": 68
            },
            "line": 1802,
            "code": "  QUnit.test(\"Each tick of the timer loop uses a fresh time (#12837)\", function (assert) {",
            "file": "unit/effects.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Animations with 0 duration don't ease (#12273)",
            "suites": [
                "effects"
            ],
            "updatePoint": {
                "line": 1823,
                "column": 60
            },
            "line": 1823,
            "code": "  QUnit.test(\"Animations with 0 duration don't ease (#12273)\", function (assert) {",
            "file": "unit/effects.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.fx.start & jQuery.fx.stop hook points",
            "suites": [
                "effects"
            ],
            "updatePoint": {
                "line": 1885,
                "column": 58
            },
            "line": 1885,
            "code": "  QUnit.test(\"jQuery.fx.start & jQuery.fx.stop hook points\", function (assert) {",
            "file": "unit/effects.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": ".finish() completes all queued animations",
            "suites": [
                "effects"
            ],
            "updatePoint": {
                "line": 1920,
                "column": 55
            },
            "line": 1920,
            "code": "  QUnit.test(\".finish() completes all queued animations\", function (assert) {",
            "file": "unit/effects.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": ".finish( false ) - unqueued animations",
            "suites": [
                "effects"
            ],
            "updatePoint": {
                "line": 1955,
                "column": 52
            },
            "line": 1955,
            "code": "  QUnit.test(\".finish( false ) - unqueued animations\", function (assert) {",
            "file": "unit/effects.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": ".finish( \"custom\" ) - custom queue animations",
            "suites": [
                "effects"
            ],
            "updatePoint": {
                "line": 1991,
                "column": 61
            },
            "line": 1991,
            "code": "  QUnit.test(\".finish( \\\"custom\\\" ) - custom queue animations\", function (assert) {",
            "file": "unit/effects.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": ".finish() calls finish of custom queue functions",
            "suites": [
                "effects"
            ],
            "updatePoint": {
                "line": 2036,
                "column": 62
            },
            "line": 2036,
            "code": "  QUnit.test(\".finish() calls finish of custom queue functions\", function (assert) {",
            "file": "unit/effects.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": ".finish() is applied correctly when multiple elements were animated (#13937)",
            "suites": [
                "effects"
            ],
            "updatePoint": {
                "line": 2060,
                "column": 90
            },
            "line": 2060,
            "code": "  QUnit.test(\".finish() is applied correctly when multiple elements were animated (#13937)\", function (assert) {",
            "file": "unit/effects.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "slideDown() after stop() (#13483)",
            "suites": [
                "effects"
            ],
            "updatePoint": {
                "line": 2077,
                "column": 47
            },
            "line": 2077,
            "code": "  QUnit.test(\"slideDown() after stop() (#13483)\", function (assert) {",
            "file": "unit/effects.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Respect display value on inline elements (#14824)",
            "suites": [
                "effects"
            ],
            "updatePoint": {
                "line": 2102,
                "column": 63
            },
            "line": 2102,
            "code": "  QUnit.test(\"Respect display value on inline elements (#14824)\", function (assert) {",
            "file": "unit/effects.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.easing._default (gh-2218)",
            "suites": [
                "effects"
            ],
            "updatePoint": {
                "line": 2120,
                "column": 46
            },
            "line": 2120,
            "code": "  QUnit.test(\"jQuery.easing._default (gh-2218)\", function (assert) {",
            "file": "unit/effects.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.easing._default in Animation (gh-2218",
            "suites": [
                "effects"
            ],
            "updatePoint": {
                "line": 2140,
                "column": 58
            },
            "line": 2140,
            "code": "  QUnit.test(\"jQuery.easing._default in Animation (gh-2218\", function (assert) {",
            "file": "unit/effects.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.easing._default in Tween (gh-2218)",
            "suites": [
                "effects"
            ],
            "updatePoint": {
                "line": 2170,
                "column": 55
            },
            "line": 2170,
            "code": "  QUnit.test(\"jQuery.easing._default in Tween (gh-2218)\", function (assert) {",
            "file": "unit/effects.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Display value is correct for disconnected nodes (trac-13310)",
            "suites": [
                "effects"
            ],
            "updatePoint": {
                "line": 2195,
                "column": 74
            },
            "line": 2195,
            "code": "  QUnit.test(\"Display value is correct for disconnected nodes (trac-13310)\", function (assert) {",
            "file": "unit/effects.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Show/hide/toggle and display: inline",
            "suites": [
                "effects"
            ],
            "updatePoint": {
                "line": 2209,
                "column": 50
            },
            "line": 2209,
            "code": "  QUnit.test(\"Show/hide/toggle and display: inline\", function (assert) {",
            "file": "unit/effects.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.speed( speed, easing, complete )",
            "suites": [
                "effects"
            ],
            "updatePoint": {
                "line": 2291,
                "column": 53
            },
            "line": 2291,
            "code": "  QUnit.test(\"jQuery.speed( speed, easing, complete )\", function (assert) {",
            "file": "unit/effects.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.speed( speed, easing, complete ) - with easing function",
            "suites": [
                "effects"
            ],
            "updatePoint": {
                "line": 2296,
                "column": 76
            },
            "line": 2296,
            "code": "  QUnit.test(\"jQuery.speed( speed, easing, complete ) - with easing function\", function (assert) {",
            "file": "unit/effects.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.speed( options )",
            "suites": [
                "effects"
            ],
            "updatePoint": {
                "line": 2303,
                "column": 37
            },
            "line": 2303,
            "code": "  QUnit.test(\"jQuery.speed( options )\", function (assert) {",
            "file": "unit/effects.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.speed( options ) - with easing function",
            "suites": [
                "effects"
            ],
            "updatePoint": {
                "line": 2312,
                "column": 60
            },
            "line": 2312,
            "code": "  QUnit.test(\"jQuery.speed( options ) - with easing function\", function (assert) {",
            "file": "unit/effects.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.speed( options ) - queue values",
            "suites": [
                "effects"
            ],
            "updatePoint": {
                "line": 2323,
                "column": 52
            },
            "line": 2323,
            "code": "  QUnit.test(\"jQuery.speed( options ) - queue values\", function (assert) {",
            "file": "unit/effects.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.speed() - durations",
            "suites": [
                "effects"
            ],
            "updatePoint": {
                "line": 2338,
                "column": 40
            },
            "line": 2338,
            "code": "  QUnit.test(\"jQuery.speed() - durations\", function (assert) {",
            "file": "unit/effects.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "null or undefined handler",
            "suites": [
                "event"
            ],
            "updatePoint": {
                "line": 7,
                "column": 37
            },
            "line": 7,
            "code": "QUnit.test(\"null or undefined handler\", function (assert) {",
            "file": "unit/event.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "on() with non-null,defined data",
            "suites": [
                "event"
            ],
            "updatePoint": {
                "line": 26,
                "column": 43
            },
            "line": 26,
            "code": "QUnit.test(\"on() with non-null,defined data\", function (assert) {",
            "file": "unit/event.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Handler changes and .trigger() order",
            "suites": [
                "event"
            ],
            "updatePoint": {
                "line": 39,
                "column": 48
            },
            "line": 39,
            "code": "QUnit.test(\"Handler changes and .trigger() order\", function (assert) {",
            "file": "unit/event.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "on(), with data",
            "suites": [
                "event"
            ],
            "updatePoint": {
                "line": 55,
                "column": 27
            },
            "line": 55,
            "code": "QUnit.test(\"on(), with data\", function (assert) {",
            "file": "unit/event.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "click(), with data",
            "suites": [
                "event"
            ],
            "updatePoint": {
                "line": 77,
                "column": 30
            },
            "line": 77,
            "code": "QUnit.test(\"click(), with data\", function (assert) {",
            "file": "unit/event.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "on(), with data, trigger with data",
            "suites": [
                "event"
            ],
            "updatePoint": {
                "line": 90,
                "column": 46
            },
            "line": 90,
            "code": "QUnit.test(\"on(), with data, trigger with data\", function (assert) {",
            "file": "unit/event.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "on(), multiple events at once",
            "suites": [
                "event"
            ],
            "updatePoint": {
                "line": 106,
                "column": 41
            },
            "line": 106,
            "code": "QUnit.test(\"on(), multiple events at once\", function (assert) {",
            "file": "unit/event.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "on(), five events at once",
            "suites": [
                "event"
            ],
            "updatePoint": {
                "line": 124,
                "column": 37
            },
            "line": 124,
            "code": "QUnit.test(\"on(), five events at once\", function (assert) {",
            "file": "unit/event.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "on(), multiple events at once and namespaces",
            "suites": [
                "event"
            ],
            "updatePoint": {
                "line": 135,
                "column": 56
            },
            "line": 135,
            "code": "QUnit.test(\"on(), multiple events at once and namespaces\", function (assert) {",
            "file": "unit/event.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "on(), namespace with special add",
            "suites": [
                "event"
            ],
            "updatePoint": {
                "line": 167,
                "column": 44
            },
            "line": 167,
            "code": "QUnit.test(\"on(), namespace with special add\", function (assert) {",
            "file": "unit/event.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "on(), no data",
            "suites": [
                "event"
            ],
            "updatePoint": {
                "line": 225,
                "column": 25
            },
            "line": 225,
            "code": "QUnit.test(\"on(), no data\", function (assert) {",
            "file": "unit/event.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "on/one/off(Object)",
            "suites": [
                "event"
            ],
            "updatePoint": {
                "line": 234,
                "column": 30
            },
            "line": 234,
            "code": "QUnit.test(\"on/one/off(Object)\", function (assert) {",
            "file": "unit/event.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "on/off(Object), on/off(Object, String)",
            "suites": [
                "event"
            ],
            "updatePoint": {
                "line": 283,
                "column": 50
            },
            "line": 283,
            "code": "QUnit.test(\"on/off(Object), on/off(Object, String)\", function (assert) {",
            "file": "unit/event.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "on immediate propagation",
            "suites": [
                "event"
            ],
            "updatePoint": {
                "line": 317,
                "column": 36
            },
            "line": 317,
            "code": "QUnit.test(\"on immediate propagation\", function (assert) {",
            "file": "unit/event.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "on bubbling, isDefaultPrevented, stopImmediatePropagation",
            "suites": [
                "event"
            ],
            "updatePoint": {
                "line": 345,
                "column": 69
            },
            "line": 345,
            "code": "QUnit.test(\"on bubbling, isDefaultPrevented, stopImmediatePropagation\", function (assert) {",
            "file": "unit/event.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "triggered events stopPropagation() for natively-bound events",
            "suites": [
                "event"
            ],
            "updatePoint": {
                "line": 385,
                "column": 72
            },
            "line": 385,
            "code": "QUnit.test(\"triggered events stopPropagation() for natively-bound events\", function (assert) {",
            "file": "unit/event.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "trigger() works with events that were previously stopped",
            "suites": [
                "event"
            ],
            "updatePoint": {
                "line": 404,
                "column": 68
            },
            "line": 404,
            "code": "QUnit.test(\"trigger() works with events that were previously stopped\", function (assert) {",
            "file": "unit/event.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "on(), iframes",
            "suites": [
                "event"
            ],
            "updatePoint": {
                "line": 421,
                "column": 25
            },
            "line": 421,
            "code": "QUnit.test(\"on(), iframes\", function (assert) {",
            "file": "unit/event.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "on(), trigger change on select",
            "suites": [
                "event"
            ],
            "updatePoint": {
                "line": 429,
                "column": 42
            },
            "line": 429,
            "code": "QUnit.test(\"on(), trigger change on select\", function (assert) {",
            "file": "unit/event.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "on(), namespaced events, cloned events",
            "suites": [
                "event"
            ],
            "updatePoint": {
                "line": 441,
                "column": 50
            },
            "line": 441,
            "code": "QUnit.test(\"on(), namespaced events, cloned events\", function (assert) {",
            "file": "unit/event.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "on(), multi-namespaced events",
            "suites": [
                "event"
            ],
            "updatePoint": {
                "line": 485,
                "column": 41
            },
            "line": 485,
            "code": "QUnit.test(\"on(), multi-namespaced events\", function (assert) {",
            "file": "unit/event.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "namespace-only event binding is a no-op",
            "suites": [
                "event"
            ],
            "updatePoint": {
                "line": 523,
                "column": 51
            },
            "line": 523,
            "code": "QUnit.test(\"namespace-only event binding is a no-op\", function (assert) {",
            "file": "unit/event.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Empty namespace is ignored",
            "suites": [
                "event"
            ],
            "updatePoint": {
                "line": 533,
                "column": 38
            },
            "line": 533,
            "code": "QUnit.test(\"Empty namespace is ignored\", function (assert) {",
            "file": "unit/event.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "on(), with same function",
            "suites": [
                "event"
            ],
            "updatePoint": {
                "line": 539,
                "column": 36
            },
            "line": 539,
            "code": "QUnit.test(\"on(), with same function\", function (assert) {",
            "file": "unit/event.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "on(), make sure order is maintained",
            "suites": [
                "event"
            ],
            "updatePoint": {
                "line": 554,
                "column": 47
            },
            "line": 554,
            "code": "QUnit.test(\"on(), make sure order is maintained\", function (assert) {",
            "file": "unit/event.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "on(), with different this object",
            "suites": [
                "event"
            ],
            "updatePoint": {
                "line": 569,
                "column": 44
            },
            "line": 569,
            "code": "QUnit.test(\"on(), with different this object\", function (assert) {",
            "file": "unit/event.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "on(name, false), off(name, false)",
            "suites": [
                "event"
            ],
            "updatePoint": {
                "line": 589,
                "column": 45
            },
            "line": 589,
            "code": "QUnit.test(\"on(name, false), off(name, false)\", function (assert) {",
            "file": "unit/event.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "on(name, selector, false), off(name, selector, false)",
            "suites": [
                "event"
            ],
            "updatePoint": {
                "line": 608,
                "column": 65
            },
            "line": 608,
            "code": "QUnit.test(\"on(name, selector, false), off(name, selector, false)\", function (assert) {",
            "file": "unit/event.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "on()/trigger()/off() on plain object",
            "suites": [
                "event"
            ],
            "updatePoint": {
                "line": 626,
                "column": 48
            },
            "line": 626,
            "code": "QUnit.test(\"on()/trigger()/off() on plain object\", function (assert) {",
            "file": "unit/event.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "off(type)",
            "suites": [
                "event"
            ],
            "updatePoint": {
                "line": 658,
                "column": 21
            },
            "line": 658,
            "code": "QUnit.test(\"off(type)\", function (assert) {",
            "file": "unit/event.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "off(eventObject)",
            "suites": [
                "event"
            ],
            "updatePoint": {
                "line": 690,
                "column": 28
            },
            "line": 690,
            "code": "QUnit.test(\"off(eventObject)\", function (assert) {",
            "file": "unit/event.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "mouseover triggers mouseenter",
            "suites": [
                "event"
            ],
            "updatePoint": {
                "line": 718,
                "column": 41
            },
            "line": 718,
            "code": "QUnit.test(\"mouseover triggers mouseenter\", function (assert) {",
            "file": "unit/event.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "pointerover triggers pointerenter",
            "suites": [
                "event"
            ],
            "updatePoint": {
                "line": 729,
                "column": 45
            },
            "line": 729,
            "code": "QUnit.test(\"pointerover triggers pointerenter\", function (assert) {",
            "file": "unit/event.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "withinElement implemented with jQuery.contains()",
            "suites": [
                "event"
            ],
            "updatePoint": {
                "line": 740,
                "column": 60
            },
            "line": 740,
            "code": "QUnit.test(\"withinElement implemented with jQuery.contains()\", function (assert) {",
            "file": "unit/event.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "mouseenter, mouseleave don't catch exceptions",
            "suites": [
                "event"
            ],
            "updatePoint": {
                "line": 748,
                "column": 57
            },
            "line": 748,
            "code": "QUnit.test(\"mouseenter, mouseleave don't catch exceptions\", function (assert) {",
            "file": "unit/event.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "trigger() bubbling",
            "suites": [
                "event"
            ],
            "updatePoint": {
                "line": 766,
                "column": 30
            },
            "line": 766,
            "code": "QUnit.test(\"trigger() bubbling\", function (assert) {",
            "file": "unit/event.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "trigger(type, [data], [fn])",
            "suites": [
                "event"
            ],
            "updatePoint": {
                "line": 823,
                "column": 39
            },
            "line": 823,
            "code": "QUnit.test(\"trigger(type, [data], [fn])\", function (assert) {",
            "file": "unit/event.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "submit event bubbles on copied forms (#11649)",
            "suites": [
                "event"
            ],
            "updatePoint": {
                "line": 902,
                "column": 57
            },
            "line": 902,
            "code": "QUnit.test(\"submit event bubbles on copied forms (#11649)\", function (assert) {",
            "file": "unit/event.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "change event bubbles on copied forms (#11796)",
            "suites": [
                "event"
            ],
            "updatePoint": {
                "line": 934,
                "column": 57
            },
            "line": 934,
            "code": "QUnit.test(\"change event bubbles on copied forms (#11796)\", function (assert) {",
            "file": "unit/event.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "trigger(eventObject, [data], [fn])",
            "suites": [
                "event"
            ],
            "updatePoint": {
                "line": 961,
                "column": 46
            },
            "line": 961,
            "code": "QUnit.test(\"trigger(eventObject, [data], [fn])\", function (assert) {",
            "file": "unit/event.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": ".trigger() bubbling on disconnected elements (#10489)",
            "suites": [
                "event"
            ],
            "updatePoint": {
                "line": 1037,
                "column": 65
            },
            "line": 1037,
            "code": "QUnit.test(\".trigger() bubbling on disconnected elements (#10489)\", function (assert) {",
            "file": "unit/event.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": ".trigger() doesn't bubble load event (#10717)",
            "suites": [
                "event"
            ],
            "updatePoint": {
                "line": 1049,
                "column": 57
            },
            "line": 1049,
            "code": "QUnit.test(\".trigger() doesn't bubble load event (#10717)\", function (assert) {",
            "file": "unit/event.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Delegated events in SVG (#10791; #13180)",
            "suites": [
                "event"
            ],
            "updatePoint": {
                "line": 1059,
                "column": 52
            },
            "line": 1059,
            "code": "QUnit.test(\"Delegated events in SVG (#10791; #13180)\", function (assert) {",
            "file": "unit/event.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Delegated events with malformed selectors (gh-3071)",
            "suites": [
                "event"
            ],
            "updatePoint": {
                "line": 1081,
                "column": 63
            },
            "line": 1081,
            "code": "QUnit.test(\"Delegated events with malformed selectors (gh-3071)\", function (assert) {",
            "file": "unit/event.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Delegated events in forms (#10844; #11145; #8165; #11382, #11764)",
            "suites": [
                "event"
            ],
            "updatePoint": {
                "line": 1092,
                "column": 77
            },
            "line": 1092,
            "code": "QUnit.test(\"Delegated events in forms (#10844; #11145; #8165; #11382, #11764)\", function (assert) {",
            "file": "unit/event.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Submit event can be stopped (#11049)",
            "suites": [
                "event"
            ],
            "updatePoint": {
                "line": 1116,
                "column": 48
            },
            "line": 1116,
            "code": "QUnit.test(\"Submit event can be stopped (#11049)\", function (assert) {",
            "file": "unit/event.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.Event( type, props )",
            "suites": [
                "event"
            ],
            "updatePoint": {
                "line": 1155,
                "column": 39
            },
            "line": 1155,
            "code": "QUnit.test(\"jQuery.Event( type, props )\", function (assert) {",
            "file": "unit/event.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.Event properties",
            "suites": [
                "event"
            ],
            "updatePoint": {
                "line": 1175,
                "column": 35
            },
            "line": 1175,
            "code": "QUnit.test(\"jQuery.Event properties\", function (assert) {",
            "file": "unit/event.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": ".on()/.off()",
            "suites": [
                "event"
            ],
            "updatePoint": {
                "line": 1218,
                "column": 24
            },
            "line": 1218,
            "code": "QUnit.test(\".on()/.off()\", function (assert) {",
            "file": "unit/event.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.off using dispatched jQuery.Event",
            "suites": [
                "event"
            ],
            "updatePoint": {
                "line": 1524,
                "column": 52
            },
            "line": 1524,
            "code": "QUnit.test(\"jQuery.off using dispatched jQuery.Event\", function (assert) {",
            "file": "unit/event.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "events with type matching an Object.prototype property (gh-3256)",
            "suites": [
                "event"
            ],
            "updatePoint": {
                "line": 1533,
                "column": 76
            },
            "line": 1533,
            "code": "QUnit.test(\"events with type matching an Object.prototype property (gh-3256)\", function (assert) {",
            "file": "unit/event.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "events with type matching an Object.prototype property, cloned element (gh-3256)",
            "suites": [
                "event"
            ],
            "updatePoint": {
                "line": 1547,
                "column": 92
            },
            "line": 1547,
            "code": "QUnit.test(\"events with type matching an Object.prototype property, cloned element (gh-3256)\", function (assert) {",
            "file": "unit/event.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "delegated event with selector matching Object.prototype property (#13203)",
            "suites": [
                "event"
            ],
            "updatePoint": {
                "line": 1590,
                "column": 85
            },
            "line": 1590,
            "code": "QUnit.test(\"delegated event with selector matching Object.prototype property (#13203)\", function (assert) {",
            "file": "unit/event.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "delegated event with intermediate DOM manipulation (#13208)",
            "suites": [
                "event"
            ],
            "updatePoint": {
                "line": 1599,
                "column": 71
            },
            "line": 1599,
            "code": "QUnit.test(\"delegated event with intermediate DOM manipulation (#13208)\", function (assert) {",
            "file": "unit/event.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "ignore comment nodes in event delegation (gh-2055)",
            "suites": [
                "event"
            ],
            "updatePoint": {
                "line": 1608,
                "column": 62
            },
            "line": 1608,
            "code": "QUnit.test(\"ignore comment nodes in event delegation (gh-2055)\", function (assert) {",
            "file": "unit/event.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "stopPropagation() stops directly-bound events on delegated target",
            "suites": [
                "event"
            ],
            "updatePoint": {
                "line": 1632,
                "column": 77
            },
            "line": 1632,
            "code": "QUnit.test(\"stopPropagation() stops directly-bound events on delegated target\", function (assert) {",
            "file": "unit/event.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "off all bound delegated events",
            "suites": [
                "event"
            ],
            "updatePoint": {
                "line": 1642,
                "column": 42
            },
            "line": 1642,
            "code": "QUnit.test(\"off all bound delegated events\", function (assert) {",
            "file": "unit/event.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "on with multiple delegated events",
            "suites": [
                "event"
            ],
            "updatePoint": {
                "line": 1661,
                "column": 45
            },
            "line": 1661,
            "code": "QUnit.test(\"on with multiple delegated events\", function (assert) {",
            "file": "unit/event.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "delegated on with change",
            "suites": [
                "event"
            ],
            "updatePoint": {
                "line": 1673,
                "column": 36
            },
            "line": 1673,
            "code": "QUnit.test(\"delegated on with change\", function (assert) {",
            "file": "unit/event.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "delegated on with submit",
            "suites": [
                "event"
            ],
            "updatePoint": {
                "line": 1751,
                "column": 36
            },
            "line": 1751,
            "code": "QUnit.test(\"delegated on with submit\", function (assert) {",
            "file": "unit/event.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "delegated off() with only namespaces",
            "suites": [
                "event"
            ],
            "updatePoint": {
                "line": 1769,
                "column": 48
            },
            "line": 1769,
            "code": "QUnit.test(\"delegated off() with only namespaces\", function (assert) {",
            "file": "unit/event.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Non DOM element events",
            "suites": [
                "event"
            ],
            "updatePoint": {
                "line": 1782,
                "column": 34
            },
            "line": 1782,
            "code": "QUnit.test(\"Non DOM element events\", function (assert) {",
            "file": "unit/event.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "inline handler returning false stops default",
            "suites": [
                "event"
            ],
            "updatePoint": {
                "line": 1790,
                "column": 56
            },
            "line": 1790,
            "code": "QUnit.test(\"inline handler returning false stops default\", function (assert) {",
            "file": "unit/event.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "window resize",
            "suites": [
                "event"
            ],
            "updatePoint": {
                "line": 1800,
                "column": 25
            },
            "line": 1800,
            "code": "QUnit.test(\"window resize\", function (assert) {",
            "file": "unit/event.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "focusin bubbles",
            "suites": [
                "event"
            ],
            "updatePoint": {
                "line": 1808,
                "column": 27
            },
            "line": 1808,
            "code": "QUnit.test(\"focusin bubbles\", function (assert) {",
            "file": "unit/event.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "custom events with colons (#3533, #8272)",
            "suites": [
                "event"
            ],
            "updatePoint": {
                "line": 1833,
                "column": 52
            },
            "line": 1833,
            "code": "QUnit.test(\"custom events with colons (#3533, #8272)\", function (assert) {",
            "file": "unit/event.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": ".on and .off",
            "suites": [
                "event"
            ],
            "updatePoint": {
                "line": 1846,
                "column": 24
            },
            "line": 1846,
            "code": "QUnit.test(\".on and .off\", function (assert) {",
            "file": "unit/event.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "special on name mapping",
            "suites": [
                "event"
            ],
            "updatePoint": {
                "line": 1902,
                "column": 35
            },
            "line": 1902,
            "code": "QUnit.test(\"special on name mapping\", function (assert) {",
            "file": "unit/event.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": ".on and .off, selective mixed removal (#10705)",
            "suites": [
                "event"
            ],
            "updatePoint": {
                "line": 1941,
                "column": 58
            },
            "line": 1941,
            "code": "QUnit.test(\".on and .off, selective mixed removal (#10705)\", function (assert) {",
            "file": "unit/event.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": ".on( event-map, null-selector, data ) #11130",
            "suites": [
                "event"
            ],
            "updatePoint": {
                "line": 1955,
                "column": 56
            },
            "line": 1955,
            "code": "QUnit.test(\".on( event-map, null-selector, data ) #11130\", function (assert) {",
            "file": "unit/event.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "clone() delegated events (#11076)",
            "suites": [
                "event"
            ],
            "updatePoint": {
                "line": 1967,
                "column": 45
            },
            "line": 1967,
            "code": "QUnit.test(\"clone() delegated events (#11076)\", function (assert) {",
            "file": "unit/event.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "checkbox state (trac-3827)",
            "suites": [
                "event"
            ],
            "updatePoint": {
                "line": 1988,
                "column": 38
            },
            "line": 1988,
            "code": "QUnit.test(\"checkbox state (trac-3827)\", function (assert) {",
            "file": "unit/event.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "event object properties on natively-triggered event",
            "suites": [
                "event"
            ],
            "updatePoint": {
                "line": 2024,
                "column": 63
            },
            "line": 2024,
            "code": "QUnit.test(\"event object properties on natively-triggered event\", function (assert) {",
            "file": "unit/event.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "addProp extensions",
            "suites": [
                "event"
            ],
            "updatePoint": {
                "line": 2041,
                "column": 30
            },
            "line": 2041,
            "code": "QUnit.test(\"addProp extensions\", function (assert) {",
            "file": "unit/event.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "drag/drop events copy mouse-related event properties (gh-1925, gh-2009)",
            "suites": [
                "event"
            ],
            "updatePoint": {
                "line": 2061,
                "column": 83
            },
            "line": 2061,
            "code": "QUnit.test(\"drag/drop events copy mouse-related event properties (gh-1925, gh-2009)\", function (assert) {",
            "file": "unit/event.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "focusin using non-element targets",
            "suites": [
                "event"
            ],
            "updatePoint": {
                "line": 2076,
                "column": 45
            },
            "line": 2076,
            "code": "QUnit.test(\"focusin using non-element targets\", function (assert) {",
            "file": "unit/event.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "focusin on document & window",
            "suites": [
                "event"
            ],
            "updatePoint": {
                "line": 2117,
                "column": 40
            },
            "line": 2117,
            "code": "QUnit.test(\"focusin on document & window\", function (assert) {",
            "file": "unit/event.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "element removed during focusout (gh-4417)",
            "suites": [
                "event"
            ],
            "updatePoint": {
                "line": 2140,
                "column": 53
            },
            "line": 2140,
            "code": "QUnit.test(\"element removed during focusout (gh-4417)\", function (assert) {",
            "file": "unit/event.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "change handler should be detached from element",
            "suites": [
                "event"
            ],
            "updatePoint": {
                "line": 2190,
                "column": 58
            },
            "line": 2190,
            "code": "QUnit.test(\"change handler should be detached from element\", function (assert) {",
            "file": "unit/event.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "trigger click on checkbox, fires change event",
            "suites": [
                "event"
            ],
            "updatePoint": {
                "line": 2207,
                "column": 57
            },
            "line": 2207,
            "code": "QUnit.test(\"trigger click on checkbox, fires change event\", function (assert) {",
            "file": "unit/event.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Namespace preserved when passed an Event (#12739)",
            "suites": [
                "event"
            ],
            "updatePoint": {
                "line": 2218,
                "column": 61
            },
            "line": 2218,
            "code": "QUnit.test(\"Namespace preserved when passed an Event (#12739)\", function (assert) {",
            "file": "unit/event.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "make sure events cloned correctly",
            "suites": [
                "event"
            ],
            "updatePoint": {
                "line": 2243,
                "column": 45
            },
            "line": 2243,
            "code": "QUnit.test(\"make sure events cloned correctly\", function (assert) {",
            "file": "unit/event.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "String.prototype.namespace does not cause trigger() to throw (#13360)",
            "suites": [
                "event"
            ],
            "updatePoint": {
                "line": 2291,
                "column": 81
            },
            "line": 2291,
            "code": "QUnit.test(\"String.prototype.namespace does not cause trigger() to throw (#13360)\", function (assert) {",
            "file": "unit/event.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Inline event result is returned (#13993)",
            "suites": [
                "event"
            ],
            "updatePoint": {
                "line": 2306,
                "column": 52
            },
            "line": 2306,
            "code": "QUnit.test(\"Inline event result is returned (#13993)\", function (assert) {",
            "file": "unit/event.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": ".off() removes the expando when there's no more data",
            "suites": [
                "event"
            ],
            "updatePoint": {
                "line": 2311,
                "column": 64
            },
            "line": 2311,
            "code": "QUnit.test(\".off() removes the expando when there's no more data\", function (assert) {",
            "file": "unit/event.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.Event( src ) does not require a target property",
            "suites": [
                "event"
            ],
            "updatePoint": {
                "line": 2328,
                "column": 66
            },
            "line": 2328,
            "code": "QUnit.test(\"jQuery.Event( src ) does not require a target property\", function (assert) {",
            "file": "unit/event.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "preventDefault() on focusin does not throw exception",
            "suites": [
                "event"
            ],
            "updatePoint": {
                "line": 2336,
                "column": 64
            },
            "line": 2336,
            "code": "QUnit.test(\"preventDefault() on focusin does not throw exception\", function (assert) {",
            "file": "unit/event.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": ".on('focus', fn) on a text node doesn't throw",
            "suites": [
                "event"
            ],
            "updatePoint": {
                "line": 2370,
                "column": 57
            },
            "line": 2370,
            "code": "QUnit.test(\".on('focus', fn) on a text node doesn't throw\", function (assert) {",
            "file": "unit/event.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Donor event interference",
            "suites": [
                "event"
            ],
            "updatePoint": {
                "line": 2375,
                "column": 36
            },
            "line": 2375,
            "code": "QUnit.test(\"Donor event interference\", function (assert) {",
            "file": "unit/event.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "simulated events shouldn't forward stopPropagation/preventDefault methods",
            "suites": [
                "event"
            ],
            "updatePoint": {
                "line": 2396,
                "column": 85
            },
            "line": 2396,
            "code": "QUnit.test(\"simulated events shouldn't forward stopPropagation/preventDefault methods\", function (assert) {",
            "file": "unit/event.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "originalEvent type of simulated event",
            "suites": [
                "event"
            ],
            "updatePoint": {
                "line": 2425,
                "column": 49
            },
            "line": 2425,
            "code": "QUnit.test(\"originalEvent type of simulated event\", function (assert) {",
            "file": "unit/event.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "trigger('click') on radio passes extra params",
            "suites": [
                "event"
            ],
            "updatePoint": {
                "line": 2447,
                "column": 57
            },
            "line": 2447,
            "code": "QUnit.test(\"trigger('click') on radio passes extra params\", function (assert) {",
            "file": "unit/event.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "focusout/focusin support",
            "suites": [
                "event"
            ],
            "updatePoint": {
                "line": 2454,
                "column": 36
            },
            "line": 2454,
            "code": "QUnit.test(\"focusout/focusin support\", function (assert) {",
            "file": "unit/event.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "focus-blur order (#12868)",
            "suites": [
                "event"
            ],
            "updatePoint": {
                "line": 2510,
                "column": 37
            },
            "line": 2510,
            "code": "QUnit.test(\"focus-blur order (#12868)\", function (assert) {",
            "file": "unit/event.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Event handling works with multiple async focus events (gh-4350)",
            "suites": [
                "event"
            ],
            "updatePoint": {
                "line": 2553,
                "column": 75
            },
            "line": 2553,
            "code": "QUnit.test(\"Event handling works with multiple async focus events (gh-4350)\", function (assert) {",
            "file": "unit/event.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "native-backed events preserve trigger data (gh-1741, gh-4139)",
            "suites": [
                "event"
            ],
            "updatePoint": {
                "line": 2589,
                "column": 73
            },
            "line": 2589,
            "code": "QUnit.test(\"native-backed events preserve trigger data (gh-1741, gh-4139)\", function (assert) {",
            "file": "unit/event.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "focus change during a focus handler (gh-4382)",
            "suites": [
                "event"
            ],
            "updatePoint": {
                "line": 2628,
                "column": 57
            },
            "line": 2628,
            "code": "QUnit.test(\"focus change during a focus handler (gh-4382)\", function (assert) {",
            "file": "unit/event.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "trigger(focus) works after .on(focus).off(focus) (gh-4867)",
            "suites": [
                "event"
            ],
            "updatePoint": {
                "line": 2653,
                "column": 70
            },
            "line": 2653,
            "code": "QUnit.test(\"trigger(focus) works after .on(focus).off(focus) (gh-4867)\", function (assert) {",
            "file": "unit/event.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "amdModule",
            "suites": [
                "exports"
            ],
            "updatePoint": {
                "line": 4,
                "column": 21
            },
            "line": 4,
            "code": "QUnit.test(\"amdModule\", function (assert) {",
            "file": "unit/exports.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "text()",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 29,
                "column": 18
            },
            "line": 29,
            "code": "QUnit.test(\"text()\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "text(undefined)",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 46,
                "column": 27
            },
            "line": 46,
            "code": "QUnit.test(\"text(undefined)\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "text(String)",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 76,
                "column": 24
            },
            "line": 76,
            "code": "QUnit.test(\"text(String)\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "text(Function)",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 79,
                "column": 26
            },
            "line": 79,
            "code": "QUnit.test(\"text(Function)\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "text(Function) with incoming value",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 82,
                "column": 46
            },
            "line": 82,
            "code": "QUnit.test(\"text(Function) with incoming value\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "append(String|Element|Array<Element>|jQuery)",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 205,
                "column": 56
            },
            "line": 205,
            "code": "QUnit.test(\"append(String|Element|Array<Element>|jQuery)\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "append(Function)",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 208,
                "column": 28
            },
            "line": 208,
            "code": "QUnit.test(\"append(Function)\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "append(param) to object, see #11280",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 211,
                "column": 47
            },
            "line": 211,
            "code": "QUnit.test(\"append(param) to object, see #11280\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "append(Function) returns String",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 222,
                "column": 43
            },
            "line": 222,
            "code": "QUnit.test(\"append(Function) returns String\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "append(Function) returns Element",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 239,
                "column": 44
            },
            "line": 239,
            "code": "QUnit.test(\"append(Function) returns Element\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "append(Function) returns Array<Element>",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 249,
                "column": 51
            },
            "line": 249,
            "code": "QUnit.test(\"append(Function) returns Array<Element>\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "append(Function) returns jQuery",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 259,
                "column": 43
            },
            "line": 259,
            "code": "QUnit.test(\"append(Function) returns jQuery\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "append(Function) returns Number",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 269,
                "column": 43
            },
            "line": 269,
            "code": "QUnit.test(\"append(Function) returns Number\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "XML DOM manipulation (#9960)",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 278,
                "column": 40
            },
            "line": 278,
            "code": "QUnit.test(\"XML DOM manipulation (#9960)\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "append HTML5 sectioning elements (Bug #6485)",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 298,
                "column": 56
            },
            "line": 298,
            "code": "QUnit.test(\"append HTML5 sectioning elements (Bug #6485)\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "html(String) with HTML5 (Bug #6485)",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 314,
                "column": 47
            },
            "line": 314,
            "code": "QUnit.test(\"html(String) with HTML5 (Bug #6485)\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "html(String) tag-hyphenated elements (Bug #1987)",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 320,
                "column": 60
            },
            "line": 320,
            "code": "QUnit.test(\"html(String) tag-hyphenated elements (Bug #1987)\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Tag name processing respects the HTML Standard (gh-2005)",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 333,
                "column": 68
            },
            "line": 333,
            "code": "QUnit.test(\"Tag name processing respects the HTML Standard (gh-2005)\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "IE8 serialization bug",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 379,
                "column": 33
            },
            "line": 379,
            "code": "QUnit.test(\"IE8 serialization bug\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "html() object element #10324",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 387,
                "column": 40
            },
            "line": 387,
            "code": "QUnit.test(\"html() object element #10324\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "append(xml)",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 393,
                "column": 23
            },
            "line": 393,
            "code": "QUnit.test(\"append(xml)\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "appendTo(String)",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 406,
                "column": 28
            },
            "line": 406,
            "code": "QUnit.test(\"appendTo(String)\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "appendTo(Element|Array<Element>)",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 420,
                "column": 44
            },
            "line": 420,
            "code": "QUnit.test(\"appendTo(Element|Array<Element>)\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "appendTo(jQuery)",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 429,
                "column": 28
            },
            "line": 429,
            "code": "QUnit.test(\"appendTo(jQuery)\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "prepend(String)",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 457,
                "column": 27
            },
            "line": 457,
            "code": "QUnit.test(\"prepend(String)\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "prepend(Element)",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 465,
                "column": 28
            },
            "line": 465,
            "code": "QUnit.test(\"prepend(Element)\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "prepend(Array<Element>)",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 472,
                "column": 35
            },
            "line": 472,
            "code": "QUnit.test(\"prepend(Array<Element>)\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "prepend(jQuery)",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 479,
                "column": 27
            },
            "line": 479,
            "code": "QUnit.test(\"prepend(jQuery)\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "prepend(Array<jQuery>)",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 486,
                "column": 34
            },
            "line": 486,
            "code": "QUnit.test(\"prepend(Array<jQuery>)\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "prepend(Function) with incoming value -- String",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 493,
                "column": 59
            },
            "line": 493,
            "code": "QUnit.test(\"prepend(Function) with incoming value -- String\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "prepend(Function) with incoming value -- Element",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 509,
                "column": 60
            },
            "line": 509,
            "code": "QUnit.test(\"prepend(Function) with incoming value -- Element\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "prepend(Function) with incoming value -- Array<Element>",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 520,
                "column": 67
            },
            "line": 520,
            "code": "QUnit.test(\"prepend(Function) with incoming value -- Array<Element>\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "prepend(Function) with incoming value -- jQuery",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 531,
                "column": 59
            },
            "line": 531,
            "code": "QUnit.test(\"prepend(Function) with incoming value -- jQuery\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "prependTo(String)",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 542,
                "column": 29
            },
            "line": 542,
            "code": "QUnit.test(\"prependTo(String)\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "prependTo(Element)",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 550,
                "column": 30
            },
            "line": 550,
            "code": "QUnit.test(\"prependTo(Element)\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "prependTo(Array<Element>)",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 557,
                "column": 37
            },
            "line": 557,
            "code": "QUnit.test(\"prependTo(Array<Element>)\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "prependTo(jQuery)",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 564,
                "column": 29
            },
            "line": 564,
            "code": "QUnit.test(\"prependTo(jQuery)\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "prependTo(Array<jQuery>)",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 571,
                "column": 36
            },
            "line": 571,
            "code": "QUnit.test(\"prependTo(Array<jQuery>)\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "before(String)",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 577,
                "column": 26
            },
            "line": 577,
            "code": "QUnit.test(\"before(String)\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "before(Element)",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 584,
                "column": 27
            },
            "line": 584,
            "code": "QUnit.test(\"before(Element)\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "before(Array<Element>)",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 591,
                "column": 34
            },
            "line": 591,
            "code": "QUnit.test(\"before(Array<Element>)\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "before(jQuery)",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 598,
                "column": 26
            },
            "line": 598,
            "code": "QUnit.test(\"before(jQuery)\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "before(Array<jQuery>)",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 605,
                "column": 33
            },
            "line": 605,
            "code": "QUnit.test(\"before(Array<jQuery>)\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "before(Function) -- Returns String",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 612,
                "column": 46
            },
            "line": 612,
            "code": "QUnit.test(\"before(Function) -- Returns String\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "before(Function) -- Returns Element",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 619,
                "column": 47
            },
            "line": 619,
            "code": "QUnit.test(\"before(Function) -- Returns Element\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "before(Function) -- Returns Array<Element>",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 626,
                "column": 54
            },
            "line": 626,
            "code": "QUnit.test(\"before(Function) -- Returns Array<Element>\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "before(Function) -- Returns jQuery",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 633,
                "column": 46
            },
            "line": 633,
            "code": "QUnit.test(\"before(Function) -- Returns jQuery\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "before(Function) -- Returns Array<jQuery>",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 640,
                "column": 53
            },
            "line": 640,
            "code": "QUnit.test(\"before(Function) -- Returns Array<jQuery>\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "before(no-op)",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 647,
                "column": 25
            },
            "line": 647,
            "code": "QUnit.test(\"before(no-op)\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "before and after w/ empty object (#10812)",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 654,
                "column": 53
            },
            "line": 654,
            "code": "QUnit.test(\"before and after w/ empty object (#10812)\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": ".before() and .after() disconnected node",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 660,
                "column": 52
            },
            "line": 660,
            "code": "QUnit.test(\".before() and .after() disconnected node\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "insert with .before() on disconnected node last",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 665,
                "column": 59
            },
            "line": 665,
            "code": "QUnit.test(\"insert with .before() on disconnected node last\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "insert with .before() on disconnected node first",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 671,
                "column": 60
            },
            "line": 671,
            "code": "QUnit.test(\"insert with .before() on disconnected node first\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "insert with .before() on disconnected node last",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 677,
                "column": 59
            },
            "line": 677,
            "code": "QUnit.test(\"insert with .before() on disconnected node last\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "insert with .before() on disconnected node last",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 683,
                "column": 59
            },
            "line": 683,
            "code": "QUnit.test(\"insert with .before() on disconnected node last\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "insertBefore(String)",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 689,
                "column": 32
            },
            "line": 689,
            "code": "QUnit.test(\"insertBefore(String)\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "insertBefore(Element)",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 695,
                "column": 33
            },
            "line": 695,
            "code": "QUnit.test(\"insertBefore(Element)\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "insertBefore(Array<Element>)",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 701,
                "column": 40
            },
            "line": 701,
            "code": "QUnit.test(\"insertBefore(Array<Element>)\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "insertBefore(jQuery)",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 707,
                "column": 32
            },
            "line": 707,
            "code": "QUnit.test(\"insertBefore(jQuery)\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": ".after(String)",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 713,
                "column": 26
            },
            "line": 713,
            "code": "QUnit.test(\".after(String)\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": ".after(Element)",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 719,
                "column": 27
            },
            "line": 719,
            "code": "QUnit.test(\".after(Element)\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": ".after(Array<Element>)",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 725,
                "column": 34
            },
            "line": 725,
            "code": "QUnit.test(\".after(Array<Element>)\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": ".after(jQuery)",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 731,
                "column": 26
            },
            "line": 731,
            "code": "QUnit.test(\".after(jQuery)\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": ".after(Function) returns String",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 737,
                "column": 43
            },
            "line": 737,
            "code": "QUnit.test(\".after(Function) returns String\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": ".after(Function) returns Element",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 744,
                "column": 44
            },
            "line": 744,
            "code": "QUnit.test(\".after(Function) returns Element\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": ".after(Function) returns Array<Element>",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 751,
                "column": 51
            },
            "line": 751,
            "code": "QUnit.test(\".after(Function) returns Array<Element>\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": ".after(Function) returns jQuery",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 758,
                "column": 43
            },
            "line": 758,
            "code": "QUnit.test(\".after(Function) returns jQuery\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": ".after(disconnected node)",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 765,
                "column": 37
            },
            "line": 765,
            "code": "QUnit.test(\".after(disconnected node)\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "insertAfter(String)",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 771,
                "column": 31
            },
            "line": 771,
            "code": "QUnit.test(\"insertAfter(String)\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "insertAfter(Element)",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 777,
                "column": 32
            },
            "line": 777,
            "code": "QUnit.test(\"insertAfter(Element)\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "insertAfter(Array<Element>)",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 783,
                "column": 39
            },
            "line": 783,
            "code": "QUnit.test(\"insertAfter(Array<Element>)\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "insertAfter(jQuery)",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 789,
                "column": 31
            },
            "line": 789,
            "code": "QUnit.test(\"insertAfter(jQuery)\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "replaceWith(String|Element|Array<Element>|jQuery)",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 881,
                "column": 61
            },
            "line": 881,
            "code": "QUnit.test(\"replaceWith(String|Element|Array<Element>|jQuery)\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "replaceWith(Function)",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 884,
                "column": 33
            },
            "line": 884,
            "code": "QUnit.test(\"replaceWith(Function)\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "replaceWith(string) for more than one element",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 891,
                "column": 57
            },
            "line": 891,
            "code": "QUnit.test(\"replaceWith(string) for more than one element\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Empty replaceWith (trac-13401; trac-13596; gh-2204)",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 898,
                "column": 63
            },
            "line": 898,
            "code": "QUnit.test(\"Empty replaceWith (trac-13401; trac-13596; gh-2204)\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "replaceAll(String)",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 928,
                "column": 30
            },
            "line": 928,
            "code": "QUnit.test(\"replaceAll(String)\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "replaceAll(Element)",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 934,
                "column": 31
            },
            "line": 934,
            "code": "QUnit.test(\"replaceAll(Element)\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "replaceAll(Array<Element>)",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 940,
                "column": 38
            },
            "line": 940,
            "code": "QUnit.test(\"replaceAll(Array<Element>)\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "replaceAll(jQuery)",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 947,
                "column": 30
            },
            "line": 947,
            "code": "QUnit.test(\"replaceAll(jQuery)\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.clone() (#8017)",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 954,
                "column": 34
            },
            "line": 954,
            "code": "QUnit.test(\"jQuery.clone() (#8017)\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "append to multiple elements (#8070)",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 961,
                "column": 47
            },
            "line": 961,
            "code": "QUnit.test(\"append to multiple elements (#8070)\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "table manipulation",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 968,
                "column": 30
            },
            "line": 968,
            "code": "QUnit.test(\"table manipulation\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "clone()",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 979,
                "column": 19
            },
            "line": 979,
            "code": "QUnit.test(\"clone()\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "clone(script type=non-javascript) (#11359)",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 1083,
                "column": 54
            },
            "line": 1083,
            "code": "QUnit.test(\"clone(script type=non-javascript) (#11359)\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "clone(form element) (Bug #3879, #6655)",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 1092,
                "column": 50
            },
            "line": 1092,
            "code": "QUnit.test(\"clone(form element) (Bug #3879, #6655)\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "clone(multiple selected options) (Bug #8129)",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 1110,
                "column": 56
            },
            "line": 1110,
            "code": "QUnit.test(\"clone(multiple selected options) (Bug #8129)\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "clone() on XML nodes",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 1122,
                "column": 32
            },
            "line": 1122,
            "code": "QUnit.test(\"clone() on XML nodes\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "clone() on local XML nodes with html5 nodename",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 1133,
                "column": 58
            },
            "line": 1133,
            "code": "QUnit.test(\"clone() on local XML nodes with html5 nodename\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "html(undefined)",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 1140,
                "column": 27
            },
            "line": 1140,
            "code": "QUnit.test(\"html(undefined)\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "html() on empty set",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 1144,
                "column": 31
            },
            "line": 1144,
            "code": "QUnit.test(\"html() on empty set\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "html(String|Number)",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 1232,
                "column": 31
            },
            "line": 1232,
            "code": "QUnit.test(\"html(String|Number)\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "html(Function)",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 1235,
                "column": 26
            },
            "line": 1235,
            "code": "QUnit.test(\"html(Function)\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "html(script nomodule)",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 1250,
                "column": 33
            },
            "line": 1250,
            "code": "QUnit.test(\"html(script nomodule)\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "html(Function) with incoming value -- direct selection",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 1261,
                "column": 66
            },
            "line": 1261,
            "code": "QUnit.test(\"html(Function) with incoming value -- direct selection\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "html(Function) with incoming value -- jQuery.contents()",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 1280,
                "column": 67
            },
            "line": 1280,
            "code": "QUnit.test(\"html(Function) with incoming value -- jQuery.contents()\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "clone()/html() don't expose jQuery/Sizzle expandos (#12858)",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 1321,
                "column": 71
            },
            "line": 1321,
            "code": "QUnit.test(\"clone()/html() don't expose jQuery/Sizzle expandos (#12858)\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "remove() no filters",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 1335,
                "column": 31
            },
            "line": 1335,
            "code": "QUnit.test(\"remove() no filters\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "remove() with filters",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 1343,
                "column": 33
            },
            "line": 1343,
            "code": "QUnit.test(\"remove() with filters\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "remove() event cleaning ",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 1375,
                "column": 36
            },
            "line": 1375,
            "code": "QUnit.test(\"remove() event cleaning \", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "remove() in document order #13779",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 1387,
                "column": 45
            },
            "line": 1387,
            "code": "QUnit.test(\"remove() in document order #13779\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "detach() no filters",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 1402,
                "column": 31
            },
            "line": 1402,
            "code": "QUnit.test(\"detach() no filters\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "detach() with filters",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 1412,
                "column": 33
            },
            "line": 1412,
            "code": "QUnit.test(\"detach() with filters\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "detach() event cleaning ",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 1444,
                "column": 36
            },
            "line": 1444,
            "code": "QUnit.test(\"detach() event cleaning \", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "empty()",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 1456,
                "column": 19
            },
            "line": 1456,
            "code": "QUnit.test(\"empty()\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.cleanData",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 1465,
                "column": 28
            },
            "line": 1465,
            "code": "QUnit.test(\"jQuery.cleanData\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.cleanData eliminates all private data (gh-2127)",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 1525,
                "column": 66
            },
            "line": 1525,
            "code": "QUnit.test(\"jQuery.cleanData eliminates all private data (gh-2127)\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.cleanData eliminates all public data",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 1537,
                "column": 55
            },
            "line": 1537,
            "code": "QUnit.test(\"jQuery.cleanData eliminates all public data\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "domManip plain-text caching (trac-6779)",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 1552,
                "column": 51
            },
            "line": 1552,
            "code": "QUnit.test(\"domManip plain-text caching (trac-6779)\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "domManip executes scripts containing html comments or CDATA (trac-9221)",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 1568,
                "column": 83
            },
            "line": 1568,
            "code": "QUnit.test(\"domManip executes scripts containing html comments or CDATA (trac-9221)\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.clone - no exceptions for object elements #9587",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 1631,
                "column": 66
            },
            "line": 1631,
            "code": "QUnit.test(\"jQuery.clone - no exceptions for object elements #9587\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Cloned, detached HTML5 elems (#10667,10670)",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 1641,
                "column": 55
            },
            "line": 1641,
            "code": "QUnit.test(\"Cloned, detached HTML5 elems (#10667,10670)\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Guard against exceptions when clearing safeChildNodes",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 1688,
                "column": 65
            },
            "line": 1688,
            "code": "QUnit.test(\"Guard against exceptions when clearing safeChildNodes\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Ensure oldIE creates a new set on appendTo (#8894)",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 1698,
                "column": 62
            },
            "line": 1698,
            "code": "QUnit.test(\"Ensure oldIE creates a new set on appendTo (#8894)\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "html() - script exceptions bubble (#11743)",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 1706,
                "column": 54
            },
            "line": 1706,
            "code": "QUnit.test(\"html() - script exceptions bubble (#11743)\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "checked state is cloned with clone()",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 1732,
                "column": 48
            },
            "line": 1732,
            "code": "QUnit.test(\"checked state is cloned with clone()\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "manipulate mixed jQuery and text (#12384, #12346)",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 1741,
                "column": 61
            },
            "line": 1741,
            "code": "QUnit.test(\"manipulate mixed jQuery and text (#12384, #12346)\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "script evaluation (#11795)",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 1749,
                "column": 38
            },
            "line": 1749,
            "code": "QUnit.test(\"script evaluation (#11795)\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.htmlPrefilter (gh-1747)",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 1817,
                "column": 42
            },
            "line": 1817,
            "code": "QUnit.test(\"jQuery.htmlPrefilter (gh-1747)\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "insertAfter, insertBefore, etc do not work when destination is original element. Element is removed (#4087)",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 1848,
                "column": 119
            },
            "line": 1848,
            "code": "QUnit.test(\"insertAfter, insertBefore, etc do not work when destination is original element. Element is removed (#4087)\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Index for function argument should be received (#13094)",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 1865,
                "column": 67
            },
            "line": 1865,
            "code": "QUnit.test(\"Index for function argument should be received (#13094)\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Make sure jQuery.fn.remove can work on elements in documentFragment",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 1872,
                "column": 79
            },
            "line": 1872,
            "code": "QUnit.test(\"Make sure jQuery.fn.remove can work on elements in documentFragment\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Make sure specific elements with content created correctly (#13232)",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 1879,
                "column": 79
            },
            "line": 1879,
            "code": "QUnit.test(\"Make sure specific elements with content created correctly (#13232)\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Validate creation of multiple quantities of certain elements (#13818)",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 1905,
                "column": 81
            },
            "line": 1905,
            "code": "QUnit.test(\"Validate creation of multiple quantities of certain elements (#13818)\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Make sure tr element will be appended to tbody element of table when present",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 1914,
                "column": 88
            },
            "line": 1914,
            "code": "QUnit.test(\"Make sure tr element will be appended to tbody element of table when present\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Make sure tr elements will be appended to tbody element of table when present",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 1925,
                "column": 89
            },
            "line": 1925,
            "code": "QUnit.test(\"Make sure tr elements will be appended to tbody element of table when present\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Make sure tfoot element will not be appended to tbody element of table when present",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 1936,
                "column": 95
            },
            "line": 1936,
            "code": "QUnit.test(\"Make sure tfoot element will not be appended to tbody element of table when present\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Make sure document fragment will be appended to tbody element of table when present",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 1947,
                "column": 95
            },
            "line": 1947,
            "code": "QUnit.test(\"Make sure document fragment will be appended to tbody element of table when present\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Make sure col element is appended correctly",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 1964,
                "column": 55
            },
            "line": 1964,
            "code": "QUnit.test(\"Make sure col element is appended correctly\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Make sure tr is not appended to the wrong tbody (gh-3439)",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 1971,
                "column": 69
            },
            "line": 1971,
            "code": "QUnit.test(\"Make sure tr is not appended to the wrong tbody (gh-3439)\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Make sure tags with single-character names are found (gh-4124)",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 1983,
                "column": 74
            },
            "line": 1983,
            "code": "QUnit.test(\"Make sure tags with single-character names are found (gh-4124)\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Ignore content from unsuccessful responses (gh-4126)",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 2014,
                "column": 64
            },
            "line": 2014,
            "code": "QUnit.test(\"Ignore content from unsuccessful responses (gh-4126)\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Sanitized HTML doesn't get unsanitized",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 2056,
                "column": 50
            },
            "line": 2056,
            "code": "QUnit.test(\"Sanitized HTML doesn't get unsanitized\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Works with invalid attempts to close the table wrapper",
            "suites": [
                "manipulation"
            ],
            "updatePoint": {
                "line": 2102,
                "column": 66
            },
            "line": 2102,
            "code": "QUnit.test(\"Works with invalid attempts to close the table wrapper\", function (assert) {",
            "file": "unit/manipulation.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "empty set",
            "suites": [
                "offset"
            ],
            "updatePoint": {
                "line": 52,
                "column": 23
            },
            "line": 52,
            "code": "  QUnit.test(\"empty set\", function (assert) {",
            "file": "unit/offset.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "disconnected element",
            "suites": [
                "offset"
            ],
            "updatePoint": {
                "line": 57,
                "column": 34
            },
            "line": 57,
            "code": "  QUnit.test(\"disconnected element\", function (assert) {",
            "file": "unit/offset.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "hidden (display: none) element",
            "suites": [
                "offset"
            ],
            "updatePoint": {
                "line": 68,
                "column": 44
            },
            "line": 68,
            "code": "  QUnit.test(\"hidden (display: none) element\", function (assert) {",
            "file": "unit/offset.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "0 sized element",
            "suites": [
                "offset"
            ],
            "updatePoint": {
                "line": 81,
                "column": 29
            },
            "line": 81,
            "code": "  QUnit.test(\"0 sized element\", function (assert) {",
            "file": "unit/offset.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "hidden (visibility: hidden) element",
            "suites": [
                "offset"
            ],
            "updatePoint": {
                "line": 91,
                "column": 49
            },
            "line": 91,
            "code": "  QUnit.test(\"hidden (visibility: hidden) element\", function (assert) {",
            "file": "unit/offset.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "normal element",
            "suites": [
                "offset"
            ],
            "updatePoint": {
                "line": 101,
                "column": 28
            },
            "line": 101,
            "code": "  QUnit.test(\"normal element\", function (assert) {",
            "file": "unit/offset.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "chaining",
            "suites": [
                "offset"
            ],
            "updatePoint": {
                "line": 692,
                "column": 22
            },
            "line": 692,
            "code": "  QUnit.test(\"chaining\", function (assert) {",
            "file": "unit/offset.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "offsetParent",
            "suites": [
                "offset"
            ],
            "updatePoint": {
                "line": 849,
                "column": 26
            },
            "line": 849,
            "code": "  QUnit.test(\"offsetParent\", function (assert) {",
            "file": "unit/offset.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "fractions (see #7730 and #7885)",
            "suites": [
                "offset"
            ],
            "updatePoint": {
                "line": 880,
                "column": 45
            },
            "line": 880,
            "code": "  QUnit.test(\"fractions (see #7730 and #7885)\", function (assert) {",
            "file": "unit/offset.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "iframe scrollTop/Left (see gh-1945)",
            "suites": [
                "offset"
            ],
            "updatePoint": {
                "line": 904,
                "column": 49
            },
            "line": 904,
            "code": "  QUnit.test(\"iframe scrollTop/Left (see gh-1945)\", function (assert) {",
            "file": "unit/offset.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "queue() with other types",
            "suites": [
                "queue"
            ],
            "updatePoint": {
                "line": 10,
                "column": 38
            },
            "line": 10,
            "code": "  QUnit.test(\"queue() with other types\", function (assert) {",
            "file": "unit/queue.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "queue(name) passes in the next item in the queue as a parameter",
            "suites": [
                "queue"
            ],
            "updatePoint": {
                "line": 46,
                "column": 77
            },
            "line": 46,
            "code": "  QUnit.test(\"queue(name) passes in the next item in the queue as a parameter\", function (assert) {",
            "file": "unit/queue.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "queue() passes in the next item in the queue as a parameter to fx queues",
            "suites": [
                "queue"
            ],
            "updatePoint": {
                "line": 61,
                "column": 86
            },
            "line": 61,
            "code": "  QUnit.test(\"queue() passes in the next item in the queue as a parameter to fx queues\", function (assert) {",
            "file": "unit/queue.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "callbacks keep their place in the queue",
            "suites": [
                "queue"
            ],
            "updatePoint": {
                "line": 82,
                "column": 53
            },
            "line": 82,
            "code": "  QUnit.test(\"callbacks keep their place in the queue\", function (assert) {",
            "file": "unit/queue.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.queue should return array while manipulating the queue",
            "suites": [
                "queue"
            ],
            "updatePoint": {
                "line": 106,
                "column": 75
            },
            "line": 106,
            "code": "  QUnit.test(\"jQuery.queue should return array while manipulating the queue\", function (assert) {",
            "file": "unit/queue.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "delay()",
            "suites": [
                "queue"
            ],
            "updatePoint": {
                "line": 111,
                "column": 21
            },
            "line": 111,
            "code": "  QUnit.test(\"delay()\", function (assert) {",
            "file": "unit/queue.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "clearQueue(name) clears the queue",
            "suites": [
                "queue"
            ],
            "updatePoint": {
                "line": 123,
                "column": 47
            },
            "line": 123,
            "code": "  QUnit.test(\"clearQueue(name) clears the queue\", function (assert) {",
            "file": "unit/queue.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "clearQueue() clears the fx queue",
            "suites": [
                "queue"
            ],
            "updatePoint": {
                "line": 143,
                "column": 46
            },
            "line": 143,
            "code": "  QUnit.test(\"clearQueue() clears the fx queue\", function (assert) {",
            "file": "unit/queue.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "fn.promise() - called when fx queue is empty",
            "suites": [
                "queue"
            ],
            "updatePoint": {
                "line": 160,
                "column": 58
            },
            "line": 160,
            "code": "  QUnit.test(\"fn.promise() - called when fx queue is empty\", function (assert) {",
            "file": "unit/queue.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "fn.promise( \"queue\" ) - called whenever last queue function is dequeued",
            "suites": [
                "queue"
            ],
            "updatePoint": {
                "line": 175,
                "column": 87
            },
            "line": 175,
            "code": "  QUnit.test(\"fn.promise( \\\"queue\\\" ) - called whenever last queue function is dequeued\", function (assert) {",
            "file": "unit/queue.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "fn.promise( \"queue\" ) - waits for animation to complete before resolving",
            "suites": [
                "queue"
            ],
            "updatePoint": {
                "line": 201,
                "column": 90
            },
            "line": 201,
            "code": "    QUnit.test(\"fn.promise( \\\"queue\\\" ) - waits for animation to complete before resolving\", function (assert) {",
            "file": "unit/queue.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": ".promise(obj)",
            "suites": [
                "queue"
            ],
            "updatePoint": {
                "line": 222,
                "column": 27
            },
            "line": 222,
            "code": "  QUnit.test(\".promise(obj)\", function (assert) {",
            "file": "unit/queue.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.isReady",
            "suites": [
                "ready"
            ],
            "updatePoint": {
                "line": 12,
                "column": 28
            },
            "line": 12,
            "code": "  QUnit.test(\"jQuery.isReady\", function (assert) {",
            "file": "unit/ready.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery ready",
            "suites": [
                "ready"
            ],
            "updatePoint": {
                "line": 56,
                "column": 26
            },
            "line": 56,
            "code": "  QUnit.test(\"jQuery ready\", function (assert) {",
            "file": "unit/ready.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Promise.resolve(jQuery.ready)",
            "suites": [
                "ready"
            ],
            "updatePoint": {
                "line": 93,
                "column": 43
            },
            "line": 93,
            "code": "  QUnit.test(\"Promise.resolve(jQuery.ready)\", function (assert) {",
            "file": "unit/ready.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Error in ready callback does not halt all future executions (gh-1823)",
            "suites": [
                "ready"
            ],
            "updatePoint": {
                "line": 105,
                "column": 83
            },
            "line": 105,
            "code": "  QUnit.test(\"Error in ready callback does not halt all future executions (gh-1823)\", function (assert) {",
            "file": "unit/ready.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "empty",
            "suites": [
                "selector"
            ],
            "updatePoint": {
                "line": 7,
                "column": 17
            },
            "line": 7,
            "code": "QUnit.test(\"empty\", function (assert) {",
            "file": "unit/selector.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "star",
            "suites": [
                "selector"
            ],
            "updatePoint": {
                "line": 23,
                "column": 16
            },
            "line": 23,
            "code": "QUnit.test(\"star\", function (assert) {",
            "file": "unit/selector.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "element",
            "suites": [
                "selector"
            ],
            "updatePoint": {
                "line": 38,
                "column": 19
            },
            "line": 38,
            "code": "QUnit.test(\"element\", function (assert) {",
            "file": "unit/selector.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "XML Document Selectors",
            "suites": [
                "selector"
            ],
            "updatePoint": {
                "line": 110,
                "column": 34
            },
            "line": 110,
            "code": "QUnit.test(\"XML Document Selectors\", function (assert) {",
            "file": "unit/selector.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "broken selectors throw",
            "suites": [
                "selector"
            ],
            "updatePoint": {
                "line": 132,
                "column": 34
            },
            "line": 132,
            "code": "QUnit.test(\"broken selectors throw\", function (assert) {",
            "file": "unit/selector.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "id",
            "suites": [
                "selector"
            ],
            "updatePoint": {
                "line": 177,
                "column": 14
            },
            "line": 177,
            "code": "QUnit.test(\"id\", function (assert) {",
            "file": "unit/selector.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "class",
            "suites": [
                "selector"
            ],
            "updatePoint": {
                "line": 233,
                "column": 17
            },
            "line": 233,
            "code": "QUnit.test(\"class\", function (assert) {",
            "file": "unit/selector.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "name",
            "suites": [
                "selector"
            ],
            "updatePoint": {
                "line": 274,
                "column": 16
            },
            "line": 274,
            "code": "QUnit.test(\"name\", function (assert) {",
            "file": "unit/selector.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "comma-separated",
            "suites": [
                "selector"
            ],
            "updatePoint": {
                "line": 295,
                "column": 27
            },
            "line": 295,
            "code": "QUnit.test(\"comma-separated\", function (assert) {",
            "file": "unit/selector.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "child and adjacent",
            "suites": [
                "selector"
            ],
            "updatePoint": {
                "line": 303,
                "column": 30
            },
            "line": 303,
            "code": "QUnit.test(\"child and adjacent\", function (assert) {",
            "file": "unit/selector.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "attributes - existence",
            "suites": [
                "selector"
            ],
            "updatePoint": {
                "line": 385,
                "column": 34
            },
            "line": 385,
            "code": "QUnit.test(\"attributes - existence\", function (assert) {",
            "file": "unit/selector.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "attributes - equals",
            "suites": [
                "selector"
            ],
            "updatePoint": {
                "line": 395,
                "column": 31
            },
            "line": 395,
            "code": "QUnit.test(\"attributes - equals\", function (assert) {",
            "file": "unit/selector.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "attributes - starts with",
            "suites": [
                "selector"
            ],
            "updatePoint": {
                "line": 432,
                "column": 36
            },
            "line": 432,
            "code": "QUnit.test(\"attributes - starts with\", function (assert) {",
            "file": "unit/selector.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "attributes - contains",
            "suites": [
                "selector"
            ],
            "updatePoint": {
                "line": 439,
                "column": 33
            },
            "line": 439,
            "code": "QUnit.test(\"attributes - contains\", function (assert) {",
            "file": "unit/selector.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "attributes - ends with",
            "suites": [
                "selector"
            ],
            "updatePoint": {
                "line": 446,
                "column": 34
            },
            "line": 446,
            "code": "QUnit.test(\"attributes - ends with\", function (assert) {",
            "file": "unit/selector.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "attributes - whitespace list includes",
            "suites": [
                "selector"
            ],
            "updatePoint": {
                "line": 453,
                "column": 49
            },
            "line": 453,
            "code": "QUnit.test(\"attributes - whitespace list includes\", function (assert) {",
            "file": "unit/selector.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "attributes - hyphen-prefix matches",
            "suites": [
                "selector"
            ],
            "updatePoint": {
                "line": 459,
                "column": 46
            },
            "line": 459,
            "code": "QUnit.test(\"attributes - hyphen-prefix matches\", function (assert) {",
            "file": "unit/selector.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "attributes - special characters",
            "suites": [
                "selector"
            ],
            "updatePoint": {
                "line": 465,
                "column": 43
            },
            "line": 465,
            "code": "QUnit.test(\"attributes - special characters\", function (assert) {",
            "file": "unit/selector.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "attributes - others",
            "suites": [
                "selector"
            ],
            "updatePoint": {
                "line": 493,
                "column": 31
            },
            "line": 493,
            "code": "QUnit.test(\"attributes - others\", function (assert) {",
            "file": "unit/selector.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "pseudo - (parent|empty)",
            "suites": [
                "selector"
            ],
            "updatePoint": {
                "line": 515,
                "column": 35
            },
            "line": 515,
            "code": "QUnit.test(\"pseudo - (parent|empty)\", function (assert) {",
            "file": "unit/selector.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "pseudo - (first|last|only)-(child|of-type)",
            "suites": [
                "selector"
            ],
            "updatePoint": {
                "line": 526,
                "column": 54
            },
            "line": 526,
            "code": "QUnit.test(\"pseudo - (first|last|only)-(child|of-type)\", function (assert) {",
            "file": "unit/selector.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "pseudo - nth-child",
            "suites": [
                "selector"
            ],
            "updatePoint": {
                "line": 544,
                "column": 30
            },
            "line": 544,
            "code": "QUnit.test(\"pseudo - nth-child\", function (assert) {",
            "file": "unit/selector.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "pseudo - nth-last-child",
            "suites": [
                "selector"
            ],
            "updatePoint": {
                "line": 585,
                "column": 35
            },
            "line": 585,
            "code": "QUnit.test(\"pseudo - nth-last-child\", function (assert) {",
            "file": "unit/selector.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "pseudo - nth-of-type",
            "suites": [
                "selector"
            ],
            "updatePoint": {
                "line": 627,
                "column": 32
            },
            "line": 627,
            "code": "QUnit.test(\"pseudo - nth-of-type\", function (assert) {",
            "file": "unit/selector.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "pseudo - nth-last-of-type",
            "suites": [
                "selector"
            ],
            "updatePoint": {
                "line": 639,
                "column": 37
            },
            "line": 639,
            "code": "QUnit.test(\"pseudo - nth-last-of-type\", function (assert) {",
            "file": "unit/selector.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "pseudo - misc",
            "suites": [
                "selector"
            ],
            "updatePoint": {
                "line": 672,
                "column": 25
            },
            "line": 672,
            "code": "QUnit.test(\"pseudo - misc\", function (assert) {",
            "file": "unit/selector.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "pseudo - :not",
            "suites": [
                "selector"
            ],
            "updatePoint": {
                "line": 792,
                "column": 25
            },
            "line": 792,
            "code": "QUnit.test(\"pseudo - :not\", function (assert) {",
            "file": "unit/selector.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "pseudo - form",
            "suites": [
                "selector"
            ],
            "updatePoint": {
                "line": 948,
                "column": 25
            },
            "line": 948,
            "code": "QUnit.test(\"pseudo - form\", function (assert) {",
            "file": "unit/selector.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "pseudo - :(dis|en)abled, explicitly disabled",
            "suites": [
                "selector"
            ],
            "updatePoint": {
                "line": 997,
                "column": 56
            },
            "line": 997,
            "code": "QUnit.test(\"pseudo - :(dis|en)abled, explicitly disabled\", function (assert) {",
            "file": "unit/selector.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "pseudo - :(dis|en)abled, optgroup and option",
            "suites": [
                "selector"
            ],
            "updatePoint": {
                "line": 1016,
                "column": 56
            },
            "line": 1016,
            "code": "QUnit.test(\"pseudo - :(dis|en)abled, optgroup and option\", function (assert) {",
            "file": "unit/selector.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "pseudo - fieldset:(dis|en)abled",
            "suites": [
                "selector"
            ],
            "updatePoint": {
                "line": 1021,
                "column": 43
            },
            "line": 1021,
            "code": "QUnit.test(\"pseudo - fieldset:(dis|en)abled\", function (assert) {",
            "file": "unit/selector.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "pseudo - :disabled by ancestry",
            "suites": [
                "selector"
            ],
            "updatePoint": {
                "line": 1026,
                "column": 42
            },
            "line": 1026,
            "code": "QUnit.test(\"pseudo - :disabled by ancestry\", function (assert) {",
            "file": "unit/selector.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "pseudo - a:(dis|en)abled",
            "suites": [
                "selector"
            ],
            "updatePoint": {
                "line": 1030,
                "column": 36
            },
            "line": 1030,
            "code": "QUnit.test(\"pseudo - a:(dis|en)abled\", function (assert) {",
            "file": "unit/selector.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "pseudo - :target and :root",
            "suites": [
                "selector"
            ],
            "updatePoint": {
                "line": 1042,
                "column": 38
            },
            "line": 1042,
            "code": "QUnit.test(\"pseudo - :target and :root\", function (assert) {",
            "file": "unit/selector.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "pseudo - :lang",
            "suites": [
                "selector"
            ],
            "updatePoint": {
                "line": 1058,
                "column": 26
            },
            "line": 1058,
            "code": "QUnit.test(\"pseudo - :lang\", function (assert) {",
            "file": "unit/selector.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "context",
            "suites": [
                "selector"
            ],
            "updatePoint": {
                "line": 1151,
                "column": 19
            },
            "line": 1151,
            "code": "QUnit.test(\"context\", function (assert) {",
            "file": "unit/selector.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "caching does not introduce bugs",
            "suites": [
                "selector"
            ],
            "updatePoint": {
                "line": 1250,
                "column": 43
            },
            "line": 1250,
            "code": "QUnit.test(\"caching does not introduce bugs\", function (assert) {",
            "file": "unit/selector.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "disconnected nodes",
            "suites": [
                "selector"
            ],
            "updatePoint": {
                "line": 1267,
                "column": 30
            },
            "line": 1267,
            "code": "QUnit.test(\"disconnected nodes\", function (assert) {",
            "file": "unit/selector.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.contains",
            "suites": [
                "selector"
            ],
            "updatePoint": {
                "line": 1372,
                "column": 27
            },
            "line": 1372,
            "code": "QUnit.test(\"jQuery.contains\", function (assert) {",
            "file": "unit/selector.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.contains in SVG (jQuery trac-10832)",
            "suites": [
                "selector"
            ],
            "updatePoint": {
                "line": 1396,
                "column": 54
            },
            "line": 1396,
            "code": "QUnit.test(\"jQuery.contains in SVG (jQuery trac-10832)\", function (assert) {",
            "file": "unit/selector.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.uniqueSort",
            "suites": [
                "selector"
            ],
            "updatePoint": {
                "line": 1404,
                "column": 29
            },
            "line": 1404,
            "code": "QUnit.test(\"jQuery.uniqueSort\", function (assert) {",
            "file": "unit/selector.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Iframe dispatch should not affect jQuery (#13936)",
            "suites": [
                "selector"
            ],
            "updatePoint": {
                "line": 1485,
                "column": 61
            },
            "line": 1485,
            "code": "QUnit.test(\"Iframe dispatch should not affect jQuery (#13936)\", function (assert) {",
            "file": "unit/selector.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.escapeSelector",
            "suites": [
                "selector"
            ],
            "updatePoint": {
                "line": 1516,
                "column": 33
            },
            "line": 1516,
            "code": "QUnit.test(\"jQuery.escapeSelector\", function (assert) {",
            "file": "unit/selector.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.param()",
            "suites": [
                "serialize"
            ],
            "updatePoint": {
                "line": 4,
                "column": 26
            },
            "line": 4,
            "code": "QUnit.test(\"jQuery.param()\", function (assert) {",
            "file": "unit/serialize.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.param() Constructed prop values",
            "suites": [
                "serialize"
            ],
            "updatePoint": {
                "line": 227,
                "column": 50
            },
            "line": 227,
            "code": "QUnit.test(\"jQuery.param() Constructed prop values\", function (assert) {",
            "file": "unit/serialize.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "serialize()",
            "suites": [
                "serialize"
            ],
            "updatePoint": {
                "line": 259,
                "column": 23
            },
            "line": 259,
            "code": "QUnit.test(\"serialize()\", function (assert) {",
            "file": "unit/serialize.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Verify that support tests resolve as expected per browser",
            "suites": [
                "support"
            ],
            "updatePoint": {
                "line": 79,
                "column": 71
            },
            "line": 79,
            "code": "  QUnit.test(\"Verify that support tests resolve as expected per browser\", function (assert) {",
            "file": "unit/support.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Verify support tests are failing in one of tested browsers",
            "suites": [
                "support"
            ],
            "updatePoint": {
                "line": 108,
                "column": 72
            },
            "line": 108,
            "code": "  QUnit.test(\"Verify support tests are failing in one of tested browsers\", function (assert) {",
            "file": "unit/support.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "find(String)",
            "suites": [
                "traversing"
            ],
            "updatePoint": {
                "line": 4,
                "column": 24
            },
            "line": 4,
            "code": "QUnit.test(\"find(String)\", function (assert) {",
            "file": "unit/traversing.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "find(String) under non-elements",
            "suites": [
                "traversing"
            ],
            "updatePoint": {
                "line": 8,
                "column": 43
            },
            "line": 8,
            "code": "QUnit.test(\"find(String) under non-elements\", function (assert) {",
            "file": "unit/traversing.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "find(node|jQuery object)",
            "suites": [
                "traversing"
            ],
            "updatePoint": {
                "line": 21,
                "column": 36
            },
            "line": 21,
            "code": "QUnit.test(\"find(node|jQuery object)\", function (assert) {",
            "file": "unit/traversing.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "is(falsy|invalid)",
            "suites": [
                "traversing"
            ],
            "updatePoint": {
                "line": 43,
                "column": 29
            },
            "line": 43,
            "code": "QUnit.test(\"is(falsy|invalid)\", function (assert) {",
            "file": "unit/traversing.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "is(String)",
            "suites": [
                "traversing"
            ],
            "updatePoint": {
                "line": 53,
                "column": 22
            },
            "line": 53,
            "code": "QUnit.test(\"is(String)\", function (assert) {",
            "file": "unit/traversing.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "is() against non-elements (#10178)",
            "suites": [
                "traversing"
            ],
            "updatePoint": {
                "line": 111,
                "column": 46
            },
            "line": 111,
            "code": "QUnit.test(\"is() against non-elements (#10178)\", function (assert) {",
            "file": "unit/traversing.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "is(jQuery)",
            "suites": [
                "traversing"
            ],
            "updatePoint": {
                "line": 137,
                "column": 22
            },
            "line": 137,
            "code": "QUnit.test(\"is(jQuery)\", function (assert) {",
            "file": "unit/traversing.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "index()",
            "suites": [
                "traversing"
            ],
            "updatePoint": {
                "line": 205,
                "column": 19
            },
            "line": 205,
            "code": "QUnit.test(\"index()\", function (assert) {",
            "file": "unit/traversing.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "index(Object|String|undefined)",
            "suites": [
                "traversing"
            ],
            "updatePoint": {
                "line": 210,
                "column": 42
            },
            "line": 210,
            "code": "QUnit.test(\"index(Object|String|undefined)\", function (assert) {",
            "file": "unit/traversing.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "filter(Selector|undefined)",
            "suites": [
                "traversing"
            ],
            "updatePoint": {
                "line": 236,
                "column": 38
            },
            "line": 236,
            "code": "QUnit.test(\"filter(Selector|undefined)\", function (assert) {",
            "file": "unit/traversing.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "filter(Function)",
            "suites": [
                "traversing"
            ],
            "updatePoint": {
                "line": 250,
                "column": 28
            },
            "line": 250,
            "code": "QUnit.test(\"filter(Function)\", function (assert) {",
            "file": "unit/traversing.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "filter(Element)",
            "suites": [
                "traversing"
            ],
            "updatePoint": {
                "line": 259,
                "column": 27
            },
            "line": 259,
            "code": "QUnit.test(\"filter(Element)\", function (assert) {",
            "file": "unit/traversing.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "filter(Array)",
            "suites": [
                "traversing"
            ],
            "updatePoint": {
                "line": 264,
                "column": 25
            },
            "line": 264,
            "code": "QUnit.test(\"filter(Array)\", function (assert) {",
            "file": "unit/traversing.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "filter(jQuery)",
            "suites": [
                "traversing"
            ],
            "updatePoint": {
                "line": 269,
                "column": 26
            },
            "line": 269,
            "code": "QUnit.test(\"filter(jQuery)\", function (assert) {",
            "file": "unit/traversing.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "closest()",
            "suites": [
                "traversing"
            ],
            "updatePoint": {
                "line": 304,
                "column": 21
            },
            "line": 304,
            "code": "QUnit.test(\"closest()\", function (assert) {",
            "file": "unit/traversing.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "closest(jQuery)",
            "suites": [
                "traversing"
            ],
            "updatePoint": {
                "line": 334,
                "column": 27
            },
            "line": 334,
            "code": "QUnit.test(\"closest(jQuery)\", function (assert) {",
            "file": "unit/traversing.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "not(undefined)",
            "suites": [
                "traversing"
            ],
            "updatePoint": {
                "line": 359,
                "column": 26
            },
            "line": 359,
            "code": "QUnit.test(\"not(undefined)\", function (assert) {",
            "file": "unit/traversing.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "not(Element)",
            "suites": [
                "traversing"
            ],
            "updatePoint": {
                "line": 367,
                "column": 24
            },
            "line": 367,
            "code": "QUnit.test(\"not(Element)\", function (assert) {",
            "file": "unit/traversing.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "not(Function)",
            "suites": [
                "traversing"
            ],
            "updatePoint": {
                "line": 372,
                "column": 25
            },
            "line": 372,
            "code": "QUnit.test(\"not(Function)\", function (assert) {",
            "file": "unit/traversing.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "not(Array)",
            "suites": [
                "traversing"
            ],
            "updatePoint": {
                "line": 378,
                "column": 22
            },
            "line": 378,
            "code": "QUnit.test(\"not(Array)\", function (assert) {",
            "file": "unit/traversing.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "not(jQuery)",
            "suites": [
                "traversing"
            ],
            "updatePoint": {
                "line": 383,
                "column": 23
            },
            "line": 383,
            "code": "QUnit.test(\"not(jQuery)\", function (assert) {",
            "file": "unit/traversing.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "not(arraylike) passes non-element nodes (gh-3226)",
            "suites": [
                "traversing"
            ],
            "updatePoint": {
                "line": 395,
                "column": 61
            },
            "line": 395,
            "code": "QUnit.test(\"not(arraylike) passes non-element nodes (gh-3226)\", function (assert) {",
            "file": "unit/traversing.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "has(Element)",
            "suites": [
                "traversing"
            ],
            "updatePoint": {
                "line": 406,
                "column": 24
            },
            "line": 406,
            "code": "QUnit.test(\"has(Element)\", function (assert) {",
            "file": "unit/traversing.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "has(Selector)",
            "suites": [
                "traversing"
            ],
            "updatePoint": {
                "line": 416,
                "column": 25
            },
            "line": 416,
            "code": "QUnit.test(\"has(Selector)\", function (assert) {",
            "file": "unit/traversing.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "has(Arrayish)",
            "suites": [
                "traversing"
            ],
            "updatePoint": {
                "line": 430,
                "column": 25
            },
            "line": 430,
            "code": "QUnit.test(\"has(Arrayish)\", function (assert) {",
            "file": "unit/traversing.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "addBack()",
            "suites": [
                "traversing"
            ],
            "updatePoint": {
                "line": 442,
                "column": 21
            },
            "line": 442,
            "code": "QUnit.test(\"addBack()\", function (assert) {",
            "file": "unit/traversing.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "siblings([String])",
            "suites": [
                "traversing"
            ],
            "updatePoint": {
                "line": 450,
                "column": 30
            },
            "line": 450,
            "code": "QUnit.test(\"siblings([String])\", function (assert) {",
            "file": "unit/traversing.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "children([String])",
            "suites": [
                "traversing"
            ],
            "updatePoint": {
                "line": 465,
                "column": 30
            },
            "line": 465,
            "code": "QUnit.test(\"children([String])\", function (assert) {",
            "file": "unit/traversing.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "parent([String])",
            "suites": [
                "traversing"
            ],
            "updatePoint": {
                "line": 474,
                "column": 28
            },
            "line": 474,
            "code": "QUnit.test(\"parent([String])\", function (assert) {",
            "file": "unit/traversing.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "parents([String])",
            "suites": [
                "traversing"
            ],
            "updatePoint": {
                "line": 485,
                "column": 29
            },
            "line": 485,
            "code": "QUnit.test(\"parents([String])\", function (assert) {",
            "file": "unit/traversing.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "parentsUntil([String])",
            "suites": [
                "traversing"
            ],
            "updatePoint": {
                "line": 494,
                "column": 34
            },
            "line": 494,
            "code": "QUnit.test(\"parentsUntil([String])\", function (assert) {",
            "file": "unit/traversing.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "next([String])",
            "suites": [
                "traversing"
            ],
            "updatePoint": {
                "line": 508,
                "column": 26
            },
            "line": 508,
            "code": "QUnit.test(\"next([String])\", function (assert) {",
            "file": "unit/traversing.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "prev([String])",
            "suites": [
                "traversing"
            ],
            "updatePoint": {
                "line": 517,
                "column": 26
            },
            "line": 517,
            "code": "QUnit.test(\"prev([String])\", function (assert) {",
            "file": "unit/traversing.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "nextAll([String])",
            "suites": [
                "traversing"
            ],
            "updatePoint": {
                "line": 525,
                "column": 29
            },
            "line": 525,
            "code": "QUnit.test(\"nextAll([String])\", function (assert) {",
            "file": "unit/traversing.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "prevAll([String])",
            "suites": [
                "traversing"
            ],
            "updatePoint": {
                "line": 534,
                "column": 29
            },
            "line": 534,
            "code": "QUnit.test(\"prevAll([String])\", function (assert) {",
            "file": "unit/traversing.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "nextUntil([String])",
            "suites": [
                "traversing"
            ],
            "updatePoint": {
                "line": 543,
                "column": 31
            },
            "line": 543,
            "code": "QUnit.test(\"nextUntil([String])\", function (assert) {",
            "file": "unit/traversing.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "prevUntil([String])",
            "suites": [
                "traversing"
            ],
            "updatePoint": {
                "line": 559,
                "column": 31
            },
            "line": 559,
            "code": "QUnit.test(\"prevUntil([String])\", function (assert) {",
            "file": "unit/traversing.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "contents()",
            "suites": [
                "traversing"
            ],
            "updatePoint": {
                "line": 574,
                "column": 22
            },
            "line": 574,
            "code": "QUnit.test(\"contents()\", function (assert) {",
            "file": "unit/traversing.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "contents() for <template />",
            "suites": [
                "traversing"
            ],
            "updatePoint": {
                "line": 598,
                "column": 39
            },
            "line": 598,
            "code": "QUnit.test(\"contents() for <template />\", function (assert) {",
            "file": "unit/traversing.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "contents() for <object />",
            "suites": [
                "traversing"
            ],
            "updatePoint": {
                "line": 620,
                "column": 37
            },
            "line": 620,
            "code": "QUnit.test(\"contents() for <object />\", function (assert) {",
            "file": "unit/traversing.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "contents() for <object /> with children",
            "suites": [
                "traversing"
            ],
            "updatePoint": {
                "line": 632,
                "column": 51
            },
            "line": 632,
            "code": "QUnit.test(\"contents() for <object /> with children\", function (assert) {",
            "file": "unit/traversing.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "contents() for <frame />",
            "suites": [
                "traversing"
            ],
            "updatePoint": {
                "line": 638,
                "column": 36
            },
            "line": 638,
            "code": "QUnit.test(\"contents() for <frame />\", function (assert) {",
            "file": "unit/traversing.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "sort direction",
            "suites": [
                "traversing"
            ],
            "updatePoint": {
                "line": 651,
                "column": 26
            },
            "line": 651,
            "code": "QUnit.test(\"sort direction\", function (assert) {",
            "file": "unit/traversing.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "add(String selector)",
            "suites": [
                "traversing"
            ],
            "updatePoint": {
                "line": 674,
                "column": 32
            },
            "line": 674,
            "code": "QUnit.test(\"add(String selector)\", function (assert) {",
            "file": "unit/traversing.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "add(String selector, String context)",
            "suites": [
                "traversing"
            ],
            "updatePoint": {
                "line": 681,
                "column": 48
            },
            "line": 681,
            "code": "QUnit.test(\"add(String selector, String context)\", function (assert) {",
            "file": "unit/traversing.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "add(String html)",
            "suites": [
                "traversing"
            ],
            "updatePoint": {
                "line": 685,
                "column": 28
            },
            "line": 685,
            "code": "QUnit.test(\"add(String html)\", function (assert) {",
            "file": "unit/traversing.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "add(jQuery)",
            "suites": [
                "traversing"
            ],
            "updatePoint": {
                "line": 694,
                "column": 23
            },
            "line": 694,
            "code": "QUnit.test(\"add(jQuery)\", function (assert) {",
            "file": "unit/traversing.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "add(Element)",
            "suites": [
                "traversing"
            ],
            "updatePoint": {
                "line": 705,
                "column": 24
            },
            "line": 705,
            "code": "QUnit.test(\"add(Element)\", function (assert) {",
            "file": "unit/traversing.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "add(Array elements)",
            "suites": [
                "traversing"
            ],
            "updatePoint": {
                "line": 713,
                "column": 31
            },
            "line": 713,
            "code": "QUnit.test(\"add(Array elements)\", function (assert) {",
            "file": "unit/traversing.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "add(Window)",
            "suites": [
                "traversing"
            ],
            "updatePoint": {
                "line": 717,
                "column": 23
            },
            "line": 717,
            "code": "QUnit.test(\"add(Window)\", function (assert) {",
            "file": "unit/traversing.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "add(NodeList|undefined|HTMLFormElement|HTMLSelectElement)",
            "suites": [
                "traversing"
            ],
            "updatePoint": {
                "line": 730,
                "column": 69
            },
            "line": 730,
            "code": "QUnit.test(\"add(NodeList|undefined|HTMLFormElement|HTMLSelectElement)\", function (assert) {",
            "file": "unit/traversing.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "add(String, Context)",
            "suites": [
                "traversing"
            ],
            "updatePoint": {
                "line": 746,
                "column": 32
            },
            "line": 746,
            "code": "QUnit.test(\"add(String, Context)\", function (assert) {",
            "file": "unit/traversing.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "eq('-1') #10616",
            "suites": [
                "traversing"
            ],
            "updatePoint": {
                "line": 756,
                "column": 27
            },
            "line": 756,
            "code": "QUnit.test(\"eq('-1') #10616\", function (assert) {",
            "file": "unit/traversing.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "index(no arg) #10977",
            "suites": [
                "traversing"
            ],
            "updatePoint": {
                "line": 763,
                "column": 32
            },
            "line": 763,
            "code": "QUnit.test(\"index(no arg) #10977\", function (assert) {",
            "file": "unit/traversing.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "traversing non-elements with attribute filters (#12523)",
            "suites": [
                "traversing"
            ],
            "updatePoint": {
                "line": 774,
                "column": 67
            },
            "line": 774,
            "code": "QUnit.test(\"traversing non-elements with attribute filters (#12523)\", function (assert) {",
            "file": "unit/traversing.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.Tween - Default propHooks on plain objects",
            "suites": [
                "tween"
            ],
            "updatePoint": {
                "line": 25,
                "column": 63
            },
            "line": 25,
            "code": "  QUnit.test(\"jQuery.Tween - Default propHooks on plain objects\", function (assert) {",
            "file": "unit/tween.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.Tween - Default propHooks on elements",
            "suites": [
                "tween"
            ],
            "updatePoint": {
                "line": 55,
                "column": 58
            },
            "line": 55,
            "code": "  QUnit.test(\"jQuery.Tween - Default propHooks on elements\", function (assert) {",
            "file": "unit/tween.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.Tween - Plain Object",
            "suites": [
                "tween"
            ],
            "updatePoint": {
                "line": 112,
                "column": 41
            },
            "line": 112,
            "code": "  QUnit.test(\"jQuery.Tween - Plain Object\", function (assert) {",
            "file": "unit/tween.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.Tween - Element",
            "suites": [
                "tween"
            ],
            "updatePoint": {
                "line": 140,
                "column": 36
            },
            "line": 140,
            "code": "  QUnit.test(\"jQuery.Tween - Element\", function (assert) {",
            "file": "unit/tween.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.Tween - No duration",
            "suites": [
                "tween"
            ],
            "updatePoint": {
                "line": 170,
                "column": 40
            },
            "line": 170,
            "code": "  QUnit.test(\"jQuery.Tween - No duration\", function (assert) {",
            "file": "unit/tween.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.Tween - step function option",
            "suites": [
                "tween"
            ],
            "updatePoint": {
                "line": 187,
                "column": 49
            },
            "line": 187,
            "code": "  QUnit.test(\"jQuery.Tween - step function option\", function (assert) {",
            "file": "unit/tween.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.Tween - custom propHooks",
            "suites": [
                "tween"
            ],
            "updatePoint": {
                "line": 206,
                "column": 45
            },
            "line": 206,
            "code": "  QUnit.test(\"jQuery.Tween - custom propHooks\", function (assert) {",
            "file": "unit/tween.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery.Tween - custom propHooks - advanced values",
            "suites": [
                "tween"
            ],
            "updatePoint": {
                "line": 226,
                "column": 63
            },
            "line": 226,
            "code": "  QUnit.test(\"jQuery.Tween - custom propHooks - advanced values\", function (assert) {",
            "file": "unit/tween.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "wrap(String|Element)",
            "suites": [
                "wrap"
            ],
            "updatePoint": {
                "line": 69,
                "column": 34
            },
            "line": 69,
            "code": "  QUnit.test(\"wrap(String|Element)\", function (assert) {",
            "file": "unit/wrap.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "wrap(Function)",
            "suites": [
                "wrap"
            ],
            "updatePoint": {
                "line": 72,
                "column": 28
            },
            "line": 72,
            "code": "  QUnit.test(\"wrap(Function)\", function (assert) {",
            "file": "unit/wrap.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "wrap(Function) with index (#10177)",
            "suites": [
                "wrap"
            ],
            "updatePoint": {
                "line": 75,
                "column": 48
            },
            "line": 75,
            "code": "  QUnit.test(\"wrap(Function) with index (#10177)\", function (assert) {",
            "file": "unit/wrap.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "wrap(String) consecutive elements (#10177)",
            "suites": [
                "wrap"
            ],
            "updatePoint": {
                "line": 85,
                "column": 56
            },
            "line": 85,
            "code": "  QUnit.test(\"wrap(String) consecutive elements (#10177)\", function (assert) {",
            "file": "unit/wrap.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "wrapAll(String)",
            "suites": [
                "wrap"
            ],
            "updatePoint": {
                "line": 95,
                "column": 29
            },
            "line": 95,
            "code": "  QUnit.test(\"wrapAll(String)\", function (assert) {",
            "file": "unit/wrap.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "wrapAll(Function)",
            "suites": [
                "wrap"
            ],
            "updatePoint": {
                "line": 107,
                "column": 31
            },
            "line": 107,
            "code": "  QUnit.test(\"wrapAll(Function)\", function (assert) {",
            "file": "unit/wrap.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "wrapAll(Function) check execution characteristics",
            "suites": [
                "wrap"
            ],
            "updatePoint": {
                "line": 120,
                "column": 63
            },
            "line": 120,
            "code": "  QUnit.test(\"wrapAll(Function) check execution characteristics\", function (assert) {",
            "file": "unit/wrap.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "wrapAll(Element)",
            "suites": [
                "wrap"
            ],
            "updatePoint": {
                "line": 133,
                "column": 30
            },
            "line": 133,
            "code": "  QUnit.test(\"wrapAll(Element)\", function (assert) {",
            "file": "unit/wrap.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "wrapInner(String)",
            "suites": [
                "wrap"
            ],
            "updatePoint": {
                "line": 143,
                "column": 31
            },
            "line": 143,
            "code": "  QUnit.test(\"wrapInner(String)\", function (assert) {",
            "file": "unit/wrap.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "wrapInner(Element)",
            "suites": [
                "wrap"
            ],
            "updatePoint": {
                "line": 157,
                "column": 32
            },
            "line": 157,
            "code": "  QUnit.test(\"wrapInner(Element)\", function (assert) {",
            "file": "unit/wrap.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "wrapInner(Function) returns String",
            "suites": [
                "wrap"
            ],
            "updatePoint": {
                "line": 170,
                "column": 48
            },
            "line": 170,
            "code": "  QUnit.test(\"wrapInner(Function) returns String\", function (assert) {",
            "file": "unit/wrap.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "wrapInner(Function) returns Element",
            "suites": [
                "wrap"
            ],
            "updatePoint": {
                "line": 185,
                "column": 49
            },
            "line": 185,
            "code": "  QUnit.test(\"wrapInner(Function) returns Element\", function (assert) {",
            "file": "unit/wrap.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "unwrap()",
            "suites": [
                "wrap"
            ],
            "updatePoint": {
                "line": 199,
                "column": 22
            },
            "line": 199,
            "code": "  QUnit.test(\"unwrap()\", function (assert) {",
            "file": "unit/wrap.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "unwrap( selector )",
            "suites": [
                "wrap"
            ],
            "updatePoint": {
                "line": 215,
                "column": 32
            },
            "line": 215,
            "code": "  QUnit.test(\"unwrap( selector )\", function (assert) {",
            "file": "unit/wrap.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "jQuery(<tag>) & wrap[Inner/All]() handle unknown elems (#10667)",
            "suites": [
                "wrap"
            ],
            "updatePoint": {
                "line": 232,
                "column": 77
            },
            "line": 232,
            "code": "  QUnit.test(\"jQuery(<tag>) & wrap[Inner/All]() handle unknown elems (#10667)\", function (assert) {",
            "file": "unit/wrap.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "wrapping scripts (#10470)",
            "suites": [
                "wrap"
            ],
            "updatePoint": {
                "line": 240,
                "column": 39
            },
            "line": 240,
            "code": "  QUnit.test(\"wrapping scripts (#10470)\", function (assert) {",
            "file": "unit/wrap.js",
            "skipped": false,
            "dir": "test"
        }
    ],
    "badge": "jquery__jquery.svg"
}