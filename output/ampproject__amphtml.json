{"repo":"ampproject/amphtml","url":"https://github.com/ampproject/amphtml","branch":"main","configs":[{"package":"amp-html","lang":"js","dir":"test","framework":"mocha","pattern":"**/*.{js,ts}"},{"package":"gulp-amphtml-validator","lang":"js","dir":"validator/js/gulpjs/test","framework":"mocha","pattern":"**/*.{js,ts}"}],"tests":[{"name":"interactions","suites":[],"updatePoint":{"line":9,"column":18,"index":213},"line":9,"code":"  it('interactions', async () => {\n    const infoDiv = await controller.findElement('#spv1');\n    await expect(controller.getElementCssValue(infoDiv, 'top')).to.be.equal('-250px');\n    const infoBtn = await controller.findElement('#cbb');\n    await controller.click(infoBtn);\n    await expect(controller.getElementCssValue(infoDiv, 'top')).to.be.equal('0px');\n    const whyBtn = await controller.findElement('a#sbtn');\n    await controller.click(whyBtn);\n    const windows = await controller.getAllWindows();\n    await expect(windows.length).to.equal(2);\n    await controller.switchToWindow(windows[1]);\n    await expect(await controller.getCurrentUrl()).to.match(/\\/\\?why$/);\n  });","file":"e2e/test-adchoices.js","skipped":false,"dir":"test"},{"name":"should support binding to data-account","suites":["with <amp-brightcove>"],"updatePoint":{"line":9,"column":46,"index":257},"line":9,"code":"    it('should support binding to data-account', async () => {\n      const button = await controller.findElement('#brightcoveButton');\n      const iframe = await controller.findElement('#brightcove iframe');\n      await expect(controller.getElementProperty(iframe, 'src')).to.not.contain('bound');\n      await controller.click(button);\n      await expect(controller.getElementProperty(iframe, 'src')).to.contain('bound');\n    });","file":"e2e/test-amp-bind-brightcove.js","skipped":false,"dir":"test"},{"name":"should NOT allow invalid bindings or values","suites":["with <amp-form>"],"updatePoint":{"line":9,"column":51,"index":250},"line":9,"code":"    it('should NOT allow invalid bindings or values', async function () {\n      const xhrText = await controller.findElement('#xhrText');\n      const templatedText = await controller.findElement('#templatedText');\n      const illegalHref = await controller.findElement('#illegalHref');\n      const submitButton = await controller.findElement('#submitButton');\n      await expect(controller.getElementText(xhrText)).to.equal('');\n      await expect(controller.getElementAttribute(illegalHref, 'href')).to.be.null;\n      await expect(controller.getElementAttribute(templatedText, 'onclick')).to.be.null;\n      await expect(controller.getElementAttribute(templatedText, 'onmouseover')).to.be.null;\n      await expect(controller.getElementAttribute(templatedText, 'style')).to.be.null;\n      await expect(controller.getElementText(templatedText)).to.equal('');\n      await controller.click(submitButton);\n\n      // The <amp-form> has on=\"submit-success:AMP.setState(...)\".\n\n      // References to XHR JSON data should work on submit-success.\n      await expect(controller.getElementText(xhrText)).to.equal('John Miller');\n      await expect(controller.getElementAttribute(illegalHref, 'href')).to.be.null;\n      await expect(controller.getElementAttribute(templatedText, 'onclick')).to.be.null;\n      await expect(controller.getElementAttribute(templatedText, 'onmouseover')).to.be.null;\n      await expect(controller.getElementAttribute(templatedText, 'style')).to.be.null;\n      await expect(controller.getElementText(templatedText)).to.equal('textIsLegal');\n    });","file":"e2e/test-amp-bind-form.js","skipped":false,"dir":"test"},{"name":"should support binding to src","suites":["with <amp-iframe>"],"updatePoint":{"line":9,"column":37,"index":240},"line":9,"code":"    it('should support binding to src', async () => {\n      const button = await controller.findElement('#iframeButton');\n      const ampIframe = await controller.findElement('#ampIframe');\n      const iframe = await controller.findElement('#ampIframe iframe');\n      const newSrc = 'https://giphy.com/embed/DKG1OhBUmxL4Q';\n      await expect(controller.getElementAttribute(ampIframe, 'src')).to.not.contain(newSrc);\n      await expect(controller.getElementProperty(iframe, 'src')).to.not.contain(newSrc);\n      await controller.click(button);\n      await expect(controller.getElementAttribute(ampIframe, 'src')).to.contain(newSrc);\n      await expect(controller.getElementProperty(iframe, 'src')).to.contain(newSrc);\n    });","file":"e2e/test-amp-bind-iframe.js","skipped":false,"dir":"test"},{"name":"should detect bindings in initial live-list elements","suites":["with <amp-live-list>"],"updatePoint":{"line":9,"column":60,"index":269},"line":9,"code":"    it('should detect bindings in initial live-list elements', async () => {\n      const liveListChildren = await controller.findElements('#liveListItems > *');\n      await expect(liveListChildren.length).to.equal(1);\n      const existingItem = await controller.findElement('#liveListItem1');\n      await expect(controller.getElementText(existingItem)).to.equal('unbound');\n      const button = await controller.findElement('#changeLiveListTextButton');\n      await controller.click(button);\n      const firstChild = await controller.findElement('#liveListItem1 > :first-child');\n      await expect(controller.getElementText(firstChild)).to.equal('hello world');\n    });","file":"e2e/test-amp-bind-live-list.js","skipped":false,"dir":"test"},{"name":"should apply scope to bindings in new list items","suites":["with <amp-live-list>"],"line":22,"code":"    it.skip('should apply scope to bindings in new list items', async () => {","file":"e2e/test-amp-bind-live-list.js","skipped":true,"dir":"test"},{"name":"should update text","suites":["+ amp-state"],"updatePoint":{"line":10,"column":26,"index":263},"line":10,"code":"    it('should update text', async () => {\n      const text = await controller.findElement('#textDisplay');\n      await expect(controller.getElementText(text)).to.equal('hello');\n      const button = await controller.findElement('#changeTextButton');\n      await controller.click(button);\n      await expect(controller.getElementText(text)).to.equal('world');\n    });","file":"e2e/test-amp-bind-state.js","skipped":false,"dir":"test"},{"name":"should not loop infinitely if updates change its src binding","suites":["+ amp-state"],"line":20,"code":"    it.skip('should not loop infinitely if updates change its src binding', async () => {","file":"e2e/test-amp-bind-state.js","skipped":true,"dir":"test"},{"name":"should support binding to src","suites":[],"updatePoint":{"line":9,"column":35,"index":255},"line":9,"code":"  it('should support binding to src', async () => {\n    const button = await controller.findElement('#changeVidSrcButton');\n    const video = await controller.findElement('#video');\n    await expect(controller.getElementAttribute(video, 'src')).to.equal('https://www.google.com/unbound.webm');\n    await controller.click(button);\n    await expect(controller.getElementAttribute(video, 'src')).to.equal('https://www.google.com/bound.webm');\n  });","file":"e2e/test-amp-bind-video.js","skipped":false,"dir":"test"},{"name":"should NOT change src when new value is a blocked URL","suites":[],"updatePoint":{"line":16,"column":59,"index":725},"line":16,"code":"  it('should NOT change src when new value is a blocked URL', async () => {\n    const button = await controller.findElement('#disallowedVidUrlButton');\n    const video = await controller.findElement('#video');\n    await expect(controller.getElementAttribute(video, 'src')).to.equal('https://www.google.com/unbound.webm');\n    await controller.click(button);\n    await expect(controller.getElementAttribute(video, 'src')).to.equal('https://www.google.com/unbound.webm');\n  });","file":"e2e/test-amp-bind-video.js","skipped":false,"dir":"test"},{"name":"should NOT change src when new value uses an invalid protocol","suites":[],"updatePoint":{"line":23,"column":67,"index":1209},"line":23,"code":"  it('should NOT change src when new value uses an invalid protocol', async () => {\n    const button = await controller.findElement('#httpVidSrcButton');\n    const video = await controller.findElement('#video');\n    await expect(controller.getElementAttribute(video, 'src')).to.equal('https://www.google.com/unbound.webm');\n    await controller.click(button);\n    // Only HTTPS is allowed\n    await expect(controller.getElementAttribute(video, 'src')).to.equal('https://www.google.com/unbound.webm');\n  });","file":"e2e/test-amp-bind-video.js","skipped":false,"dir":"test"},{"name":"should change alt when the alt attribute binding changes","suites":[],"updatePoint":{"line":31,"column":62,"index":1711},"line":31,"code":"  it('should change alt when the alt attribute binding changes', async () => {\n    const button = await controller.findElement('#changeVidAltButton');\n    const video = await controller.findElement('#video');\n    await expect(controller.getElementAttribute(video, 'alt')).to.equal('unbound');\n    await controller.click(button);\n    await expect(controller.getElementAttribute(video, 'alt')).to.equal('hello world');\n  });","file":"e2e/test-amp-bind-video.js","skipped":false,"dir":"test"},{"name":"should show/hide vid controls when the control binding changes","suites":[],"updatePoint":{"line":38,"column":68,"index":2140},"line":38,"code":"  it('should show/hide vid controls when the control binding changes', async () => {\n    const showButton = await controller.findElement('#showVidControlsButton');\n    const hideButton = await controller.findElement('#hideVidControlsButton');\n    const video = await controller.findElement('#video');\n    await expect(controller.getElementAttribute(video, 'controls')).to.be.null;\n    await controller.click(showButton);\n    await expect(controller.getElementAttribute(video, 'controls')).to.not.be.null;\n    await controller.click(hideButton);\n    await expect(controller.getElementAttribute(video, 'controls')).to.be.null;\n  });","file":"e2e/test-amp-bind-video.js","skipped":false,"dir":"test"},{"name":"should support binding to data-video-id","suites":["with <amp-youtube>"],"updatePoint":{"line":9,"column":47,"index":252},"line":9,"code":"    it('should support binding to data-video-id', async () => {\n      const button = await controller.findElement('#youtubeButton');\n      const yt = await controller.findElement('#youtube');\n      await expect(controller.getElementAttribute(yt, 'data-videoid')).to.equal('unbound');\n      await controller.click(button);\n      await expect(controller.getElementAttribute(yt, 'data-videoid')).to.equal('bound');\n    });","file":"e2e/test-amp-bind-youtube.js","skipped":false,"dir":"test"},{"name":"Should call amp-img layoutCallback","suites":[],"updatePoint":{"line":5,"column":40,"index":233},"line":5,"code":"  it('Should call amp-img layoutCallback', async () => {\n    const {\n      controller\n    } = env;\n    const imgEl = await controller.findElement('img');\n    await expect(imgEl).ok;\n  });","file":"e2e/test-amp-email.js","skipped":false,"dir":"test"},{"name":"Should call amp-list layoutCallback","suites":[],"updatePoint":{"line":17,"column":41,"index":619},"line":17,"code":"  it('Should call amp-list layoutCallback', async () => {\n    const {\n      controller\n    } = env;\n    const ampListChild = await controller.findElement('.fruit');\n    await expect(ampListChild).ok;\n  });","file":"e2e/test-amp-email.js","skipped":false,"dir":"test"},{"name":"first story should be playing video","suites":[],"updatePoint":{"line":29,"column":41,"index":681},"line":29,"code":"  it('first story should be playing video', async () => {\n    const shadowHost = await controller.findElement('div.i-amphtml-story-player-shadow-root-intermediary');\n    await controller.switchToShadowRoot(shadowHost);\n    const iframe = await controller.findElement('iframe.story-player-iframe');\n    await controller.switchToShadowRoot(iframe);\n    await controller.switchToFrame(iframe);\n    const firstStoryVideo = await controller.findElement('#story1 video');\n    const isVideoPaused = await controller.getElementProperty(firstStoryVideo, 'paused');\n    await timeout(800);\n    await expect(isVideoPaused).to.eql(false);\n  });","file":"e2e/test-amp-story-player-navigation.js","skipped":false,"dir":"test"},{"name":"navigating to next story pauses the previous one","suites":[],"updatePoint":{"line":40,"column":54,"index":1327},"line":40,"code":"  it('navigating to next story pauses the previous one', async () => {\n    // Navigate to next story.\n    await controller.click(player);\n    await timeout(800);\n    const shadowHost = await controller.findElement('div.i-amphtml-story-player-shadow-root-intermediary');\n    await controller.switchToShadowRoot(shadowHost);\n    const iframe = await controller.findElement('iframe.story-player-iframe');\n    await controller.switchToShadowRoot(iframe);\n    await controller.switchToFrame(iframe);\n    const firstStoryVideo = await controller.findElement('#story1 video');\n    const isVideoPaused = await controller.getElementProperty(firstStoryVideo, 'paused');\n    await timeout(800);\n    await expect(isVideoPaused).to.eql(true);\n  });","file":"e2e/test-amp-story-player-navigation.js","skipped":false,"dir":"test"},{"name":"when player is not visible in first viewport, it builds the shadow DOM container","suites":[],"updatePoint":{"line":28,"column":86,"index":671},"line":28,"code":"  it('when player is not visible in first viewport, it builds the shadow DOM container', async () => {\n    const shadowHost = await controller.findElement('div.i-amphtml-story-player-shadow-root-intermediary');\n    await expect(shadowHost);\n  });","file":"e2e/test-amp-story-player-prerender.js","skipped":false,"dir":"test"},{"name":"when player is not visible in first viewport, no stories are loaded or prerendered","suites":[],"updatePoint":{"line":32,"column":88,"index":920},"line":32,"code":"  it('when player is not visible in first viewport, no stories are loaded or prerendered', async () => {\n    const shadowHost = await controller.findElement('div.i-amphtml-story-player-shadow-root-intermediary');\n    await controller.switchToShadowRoot(shadowHost);\n    const iframeContainer = await controller.findElement('.i-amphtml-story-player-main-container');\n    const count = await controller.getElementProperty(iframeContainer, 'childElementCount');\n\n    // 2 accounts for previous and next buttons in panel player.\n    await expect(count).to.eql(2);\n  });","file":"e2e/test-amp-story-player-prerender.js","skipped":false,"dir":"test"},{"name":"when player is not visible in first viewport and on first user scroll, iframe loads first story in prerender","suites":[],"updatePoint":{"line":41,"column":114,"index":1512},"line":41,"code":"  it('when player is not visible in first viewport and on first user scroll, iframe loads first story in prerender', async () => {\n    const doc = await controller.getDocumentElement();\n    await controller. /*OK*/scrollTo(doc, {\n      top: 1\n    });\n    const shadowHost = await controller.findElement('div.i-amphtml-story-player-shadow-root-intermediary');\n    await controller.switchToShadowRoot(shadowHost);\n    const iframe = await controller.findElement('iframe');\n    const iframeSrc = await controller.getElementAttribute(iframe, 'src');\n    await expect(iframeSrc).to.eql('http://localhost:8000/examples/amp-story/ampconf.html#visibilityState=prerender&origin=http%3A%2F%2Flocalhost%3A8000&showStoryUrlInfo=0&storyPlayer=v0&cap=swipe');\n  });","file":"e2e/test-amp-story-player-prerender.js","skipped":false,"dir":"test"},{"name":"when player is not visible in first viewport and on first user scroll, only one story in iframe is loaded","suites":[],"updatePoint":{"line":52,"column":111,"index":2261},"line":52,"code":"  it('when player is not visible in first viewport and on first user scroll, only one story in iframe is loaded', async () => {\n    const doc = await controller.getDocumentElement();\n    await controller. /*OK*/scrollTo(doc, {\n      top: 1\n    });\n    const shadowHost = await controller.findElement('div.i-amphtml-story-player-shadow-root-intermediary');\n    await controller.switchToShadowRoot(shadowHost);\n    const iframes = await controller.findElements('iframe');\n    const iframeSrc = await controller.getElementAttribute(iframes[1], 'src');\n    await expect(iframeSrc).to.not.exist;\n  });","file":"e2e/test-amp-story-player-prerender.js","skipped":false,"dir":"test"},{"name":"when player becomes visible in viewport, first story starts playing","suites":[],"updatePoint":{"line":63,"column":73,"index":2820},"line":63,"code":"  it('when player becomes visible in viewport, first story starts playing', async () => {\n    const doc = await controller.getDocumentElement();\n    const playerRect = await controller.getElementRect(player);\n    await controller. /*OK*/scrollTo(doc, {\n      top: playerRect.top\n    });\n    const shadowHost = await controller.findElement('div.i-amphtml-story-player-shadow-root-intermediary');\n    await controller.switchToShadowRoot(shadowHost);\n    const iframe = await controller.findElement('iframe.story-player-iframe');\n    await controller.switchToShadowRoot(iframe);\n    await controller.switchToFrame(iframe);\n    const storyEl = await controller.findElement('amp-story.i-amphtml-story-loaded');\n    await expect(storyEl).to.exist;\n  });","file":"e2e/test-amp-story-player-prerender.js","skipped":false,"dir":"test"},{"name":"when player becomes visible in viewport and first story finishes loading, second story starts preloading","suites":[],"updatePoint":{"line":77,"column":110,"index":3605},"line":77,"code":"  it('when player becomes visible in viewport and first story finishes loading, second story starts preloading', async function () {\n    this.timeout(10000);\n    const doc = await controller.getDocumentElement();\n    const playerRect = await controller.getElementRect(player);\n    await controller. /*OK*/scrollTo(doc, {\n      top: playerRect.top\n    });\n    const shadowHost = await controller.findElement('div.i-amphtml-story-player-shadow-root-intermediary');\n    await controller.switchToShadowRoot(shadowHost);\n\n    // Wait for first story iframe to load.\n    await timeout(5000);\n    const iframes = await controller.findElements('iframe.story-player-iframe');\n    const iframeSrc = await controller.getElementAttribute(iframes[1], 'src');\n    await expect(iframeSrc).to.eql('http://localhost:8000/examples/amp-story/amp-story-animation.html#visibilityState=prerender&origin=http%3A%2F%2Flocalhost%3A8000&showStoryUrlInfo=0&storyPlayer=v0&cap=swipe');\n  });","file":"e2e/test-amp-story-player-prerender.js","skipped":false,"dir":"test"},{"name":"loads and displays first story on page load when player is visible in viewport","suites":[],"updatePoint":{"line":20,"column":84,"index":555},"line":20,"code":"  it('loads and displays first story on page load when player is visible in viewport', async () => {\n    const shadowHost = await controller.findElement('div.i-amphtml-story-player-shadow-root-intermediary');\n    await controller.switchToShadowRoot(shadowHost);\n    const iframes = await controller.findElement('iframe');\n    const iframeSrc = await controller.getElementAttribute(iframes, 'src');\n    await expect(iframeSrc).to.eql('http://localhost:8000/examples/amp-story/ampconf.html#visibilityState=prerender&origin=http%3A%2F%2Flocalhost%3A8000&showStoryUrlInfo=0&storyPlayer=v0&cap=swipe');\n  });","file":"e2e/test-amp-story-player.js","skipped":false,"dir":"test"},{"name":"should behave like a normal thenable","suites":["ControllerPromise","Promise wrapping behavior"],"updatePoint":{"line":18,"column":44,"index":606},"line":18,"code":"    it('should behave like a normal thenable', () => {\n      const p = new ControllerPromise(Promise.resolve('success'));\n      return p.then(result => /*OK*/expect(result).to.equal('success'));\n    });","file":"e2e/test-controller-promise.js","skipped":false,"dir":"test"},{"name":"should behave like a normal thenable with await","suites":["ControllerPromise","Promise wrapping behavior"],"updatePoint":{"line":22,"column":55,"index":820},"line":22,"code":"    it('should behave like a normal thenable with await', async () => {\n      const p = new ControllerPromise(Promise.resolve('success'));\n      await expect(await p).to.equal('success');\n    });","file":"e2e/test-controller-promise.js","skipped":false,"dir":"test"},{"name":"should accept calls to `then`","suites":["ControllerPromise","Promise wrapping behavior"],"updatePoint":{"line":26,"column":37,"index":998},"line":26,"code":"    it('should accept calls to `then`', async () => {\n      const p = new ControllerPromise(Promise.resolve(1));\n      const two = p.then(x => x + 1);\n      const three = two.then(x => x + 1);\n      const four = two.then(x => x + 2);\n      await expect(await two).to.equal(2);\n      await expect(await three).to.equal(3);\n      await expect(await four).to.equal(4);\n    });","file":"e2e/test-controller-promise.js","skipped":false,"dir":"test"},{"name":"should allow empty `then` calls","suites":["ControllerPromise","Promise wrapping behavior"],"updatePoint":{"line":35,"column":39,"index":1374},"line":35,"code":"    it('should allow empty `then` calls', async () => {\n      const p = new ControllerPromise(Promise.resolve(1));\n      const two = p.then(null).then(x => x + 1);\n      const three = two.then(x => x + 1);\n      const four = two.then(x => x + 2);\n      await expect(await two).to.equal(2);\n      await expect(await three).to.equal(3);\n      await expect(await four).to.equal(4);\n    });","file":"e2e/test-controller-promise.js","skipped":false,"dir":"test"},{"name":"should accept calls to `catch`","suites":["ControllerPromise","Promise wrapping behavior"],"updatePoint":{"line":44,"column":38,"index":1760},"line":44,"code":"    it('should accept calls to `catch`', async () => {\n      const catchSpy = sandbox.spy();\n      const errorObject = {};\n      const p = new ControllerPromise(Promise.reject(errorObject));\n      await p.catch(catchSpy);\n\n      /*OK*/\n      expect(catchSpy.calledOnce).to.be.true;\n      /*OK*/\n      expect(catchSpy.calledWith(errorObject)).to.be.true;\n    });","file":"e2e/test-controller-promise.js","skipped":false,"dir":"test"},{"name":"should accept a second parameter for `then`","suites":["ControllerPromise","Promise wrapping behavior"],"updatePoint":{"line":55,"column":51,"index":2135},"line":55,"code":"    it('should accept a second parameter for `then`', async () => {\n      const thenSpy = sandbox.spy();\n      const thenCatchSpy = sandbox.spy();\n      const onlyCatchSpy = sandbox.spy();\n      const errorObject = {};\n      const p = new ControllerPromise(Promise.reject(errorObject));\n      await p.then(thenSpy, thenCatchSpy);\n      await p.then(null, onlyCatchSpy);\n\n      /*OK*/\n      expect(thenSpy.called).to.be.false;\n      /*OK*/\n      expect(thenCatchSpy.calledOnce).to.be.true;\n      /*OK*/\n      expect(thenCatchSpy.calledWith(errorObject)).to.be.true;\n      /*OK*/\n      expect(onlyCatchSpy.calledOnce).to.be.true;\n      /*OK*/\n      expect(onlyCatchSpy.calledWith(errorObject)).to.be.true;\n    });","file":"e2e/test-controller-promise.js","skipped":false,"dir":"test"},{"name":"should accept rejected calls to `finally`","suites":["ControllerPromise","Promise wrapping behavior"],"updatePoint":{"line":75,"column":49,"index":2845},"line":75,"code":"    it('should accept rejected calls to `finally`', async () => {\n      const catchSpy = sandbox.spy();\n      const finallySpy = sandbox.spy();\n      const failureObject = {};\n      const rejectedControllerPromise = new ControllerPromise(Promise.reject(failureObject));\n\n      // The catch in this line prevents Promise.reject from breaking the test\n      await rejectedControllerPromise.catch(catchSpy).finally(finallySpy);\n\n      /*OK*/\n      expect(catchSpy.calledOnce).to.be.true;\n      /*OK*/\n      expect(finallySpy.calledOnce).to.be.true;\n    });","file":"e2e/test-controller-promise.js","skipped":false,"dir":"test"},{"name":"should accept resolved calls to `finally`","suites":["ControllerPromise","Promise wrapping behavior"],"updatePoint":{"line":89,"column":49,"index":3399},"line":89,"code":"    it('should accept resolved calls to `finally`', async () => {\n      const finallySpy = sandbox.spy();\n      const thenSpy = sandbox.spy();\n      const successObject = {};\n      const resolvedControllerPromise = new ControllerPromise(Promise.resolve(successObject));\n      await resolvedControllerPromise.then(thenSpy).finally(finallySpy);\n\n      /*OK*/\n      expect(thenSpy.calledWith(successObject)).to.be.true;\n      /*OK*/\n      expect(finallySpy.calledOnce).to.be.true;\n    });","file":"e2e/test-controller-promise.js","skipped":false,"dir":"test"},{"name":"should pass errors beyond `finally` to `catch` blocks","suites":["ControllerPromise","Promise wrapping behavior"],"updatePoint":{"line":101,"column":61,"index":3897},"line":101,"code":"    it('should pass errors beyond `finally` to `catch` blocks', async () => {\n      const finallySpy = sandbox.spy();\n      const catchSpy = sandbox.spy();\n      const failureObject = {};\n      const rejectedControllerPromise = new ControllerPromise(Promise.reject(failureObject));\n      await rejectedControllerPromise.finally(finallySpy).catch(catchSpy);\n\n      /*OK*/\n      expect(finallySpy.calledOnce).to.be.true;\n      /*OK*/\n      expect(catchSpy.calledWith(failureObject)).to.be.true;\n    });","file":"e2e/test-controller-promise.js","skipped":false,"dir":"test"},{"name":"should accept long then chains","suites":["ControllerPromise","Promise wrapping behavior"],"updatePoint":{"line":113,"column":38,"index":4375},"line":113,"code":"    it('should accept long then chains', async () => {\n      const p = new ControllerPromise(Promise.resolve(1));\n      const two = p.then(x => x + 1);\n      const three = two.then(x => x + 1).then(x => 'hello world ' + x);\n\n      /*OK*/\n      expect(await three).to.equal('hello world 3');\n    });","file":"e2e/test-controller-promise.js","skipped":false,"dir":"test"},{"name":"should allow promises to be retryable","suites":["ControllerPromise","retryable behavior"],"updatePoint":{"line":123,"column":45,"index":4728},"line":123,"code":"    it('should allow promises to be retryable', async () => {\n      const p = new ControllerPromise(Promise.resolve(0), getWaitFunction(getValueFunction));\n\n      /*OK*/\n      expect(await p).to.equal(0);\n      /*OK*/\n      expect(await p.waitForValue(x => x == 5)).to.equal(5);\n      /*OK*/\n      expect(await p).to.equal(0);\n    });","file":"e2e/test-controller-promise.js","skipped":false,"dir":"test"},{"name":"should allow retryable promises to be then-ed once","suites":["ControllerPromise","retryable behavior"],"updatePoint":{"line":133,"column":58,"index":5076},"line":133,"code":"    it('should allow retryable promises to be then-ed once', async () => {\n      const p = new ControllerPromise(Promise.resolve(0), getWaitFunction(getValueFunction));\n      const testP = p.then(x => (x + 1) * 2);\n\n      /*OK*/\n      expect(await testP).to.equal(2);\n      /*OK*/\n      expect(await testP.waitForValue(x => x == 12)).to.equal(12);\n      /*OK*/\n      expect(await testP).to.equal(2);\n    });","file":"e2e/test-controller-promise.js","skipped":false,"dir":"test"},{"name":"should allow retryable promises to be then-ed more than once","suites":["ControllerPromise","retryable behavior"],"updatePoint":{"line":144,"column":68,"index":5494},"line":144,"code":"    it('should allow retryable promises to be then-ed more than once', async () => {\n      const p = new ControllerPromise(Promise.resolve(0), getWaitFunction(getValueFunction));\n      const testP = p.then(x => (x + 1) * 2).then(x => x + 1);\n\n      /*OK*/\n      expect(await testP).to.equal(3);\n      /*OK*/\n      expect(await testP.waitForValue(x => x == 13)).to.equal(13);\n      /*OK*/\n      expect(await testP).to.equal(3);\n    });","file":"e2e/test-controller-promise.js","skipped":false,"dir":"test"},{"name":"should reject on failure and not allow retrying","suites":["ControllerPromise","retryable behavior"],"updatePoint":{"line":155,"column":55,"index":5916},"line":155,"code":"    it('should reject on failure and not allow retrying', async () => {\n      const p = new ControllerPromise(Promise.resolve(0), getWaitFunction(getErrorFunction));\n      const testP = p.then(x => (x + 1) * 2).then(x => x + 1);\n\n      /*OK*/\n      expect(await testP).to.equal(3);\n      /*OK*/\n      expect(await testP.waitForValue(x => x == 7)).to.equal(7);\n      return testP.waitForValue(x => x == 11).then(() => {\n        throw new Error('should not succeed');\n      }, e => {\n        /*OK*/expect(e).to.be.an('error');\n        return testP.waitForValue(x => x == 13);\n      }).then(() => {\n        throw new Error('should not succeed');\n      }, e => {\n        /*OK*/expect(e).to.be.an('error');\n      });\n    });","file":"e2e/test-controller-promise.js","skipped":false,"dir":"test"},{"name":"should send documentHeight once amp has completed init","suites":[],"updatePoint":{"line":5,"column":60,"index":196},"line":5,"code":"  it('should send documentHeight once amp has completed init', async () => {\n    const messages = env.receivedMessages;\n    const documentHeightMessages = messages.filter(({\n      name\n    }) => name === 'documentHeight');\n    await expect(documentHeightMessages.length).equal(1);\n\n    // Example message: ['documentHeight, { height: 200 }]\n    const firstHeight = documentHeightMessages[0].data.height;\n    await expect(Math.floor(firstHeight)).equal(383);\n  });","file":"e2e/test-document-height.js","skipped":false,"dir":"test"},{"name":"should accept controller promises","suites":["e2e expect","ControllerPromise"],"updatePoint":{"line":4,"column":41,"index":198},"line":4,"code":"    it('should accept controller promises', async () => {\n      const p = new ControllerPromise(Promise.resolve(5));\n      await expect(p).to.equal(5);\n    });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should accept controller promises with sync waitForValue","suites":["e2e expect","ControllerPromise"],"updatePoint":{"line":8,"column":64,"index":381},"line":8,"code":"    it('should accept controller promises with sync waitForValue', async () => {\n      const p = new ControllerPromise(Promise.resolve(0), getWaitFunction(() => getIncrementingValueFunction()));\n      /*OK*/\n      expect(await p).to.equal(0); // expect the usual sync syntax to work\n      await expect(await p).to.equal(0);\n      await expect(p).to.equal(5);\n    });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should accept controller promises with async waitForValue","suites":["e2e expect","ControllerPromise"],"updatePoint":{"line":15,"column":65,"index":749},"line":15,"code":"    it('should accept controller promises with async waitForValue', async () => {\n      const p = new ControllerPromise(Promise.resolve(0), getWaitFunction(() => getAsyncValueFunction(getIncrementingValueFunction())));\n      /*OK*/\n      expect(await p).to.equal(0);\n      await expect(await p).to.equal(0);\n      await expect(p).to.equal(5);\n    });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should accept `then`","suites":["e2e expect","ControllerPromise"],"updatePoint":{"line":22,"column":28,"index":1063},"line":22,"code":"    it('should accept `then`', async () => {\n      const p = new ControllerPromise(Promise.resolve(0), getWaitFunction(() => getAsyncValueFunction(getIncrementingValueFunction())));\n      const testPromise = p.then(x => (x + 1) * 2);\n\n      /*OK*/\n      expect(await testPromise).to.equal(2);\n      await expect(await testPromise).to.equal(2);\n      await expect(testPromise).to.equal(10);\n    });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should accept multiple `then`s","suites":["e2e expect","ControllerPromise"],"updatePoint":{"line":31,"column":38,"index":1471},"line":31,"code":"    it('should accept multiple `then`s', async () => {\n      const p = new ControllerPromise(Promise.resolve(0), getWaitFunction(() => getAsyncValueFunction(getIncrementingValueFunction())));\n      const testPromise = p.then(x => (x + 1) * 2).then(x => x + 1);\n\n      /*OK*/\n      expect(await testPromise).to.equal(3);\n      await expect(await testPromise).to.equal(3);\n      await expect(testPromise).to.equal(11);\n    });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the immediate positive case","suites":["e2e expect","Chai API methods","a, an"],"updatePoint":{"line":43,"column":52,"index":1985},"line":43,"code":"      it('should work in the immediate positive case', async () => {\n        const p = new ControllerPromise(Promise.resolve('message'), getWaitFunction(() => getArrayValueFunction('message')));\n\n        /*OK*/\n        expect(await p).to.be.a('string');\n        await expect(p).to.be.a('string');\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the eventual positive case","suites":["e2e expect","Chai API methods","a, an"],"updatePoint":{"line":50,"column":51,"index":2291},"line":50,"code":"      it('should work in the eventual positive case', async () => {\n        const p = new ControllerPromise(Promise.resolve(null), getWaitFunction(() => getArrayValueFunction(null, 'message')));\n\n        /*OK*/\n        expect(await p).to.be.a('null');\n        await expect(p).to.be.a('string');\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the immediate negative case","suites":["e2e expect","Chai API methods","a, an"],"updatePoint":{"line":57,"column":52,"index":2597},"line":57,"code":"      it('should work in the immediate negative case', async () => {\n        const p = new ControllerPromise(Promise.resolve('message'), getWaitFunction(() => getArrayValueFunction(null, 'message')));\n\n        /*OK*/\n        expect(await p).to.not.be.a('null');\n        await expect(p).to.not.be.a('null');\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the eventual negative case","suites":["e2e expect","Chai API methods","a, an"],"updatePoint":{"line":64,"column":51,"index":2913},"line":64,"code":"      it('should work in the eventual negative case', async () => {\n        const p = new ControllerPromise(Promise.resolve(null), getWaitFunction(() => getArrayValueFunction(null, 'message')));\n\n        /*OK*/\n        expect(await p).to.be.a('null');\n        await expect(p).to.not.be.a('null');\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the immediate positive case","suites":["e2e expect","Chai API methods","above, gt, greaterThan"],"updatePoint":{"line":73,"column":52,"index":3276},"line":73,"code":"      it('should work in the immediate positive case', async () => {\n        const p = new ControllerPromise(Promise.resolve(1), getWaitFunction(() => getArrayValueFunction(1)));\n\n        /*OK*/\n        expect(await p).to.be.above(0);\n        await expect(p).to.be.above(0);\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the eventual positive case","suites":["e2e expect","Chai API methods","above, gt, greaterThan"],"updatePoint":{"line":80,"column":51,"index":3560},"line":80,"code":"      it('should work in the eventual positive case', async () => {\n        const p = new ControllerPromise(Promise.resolve(0), getWaitFunction(() => getArrayValueFunction(0, 1)));\n\n        /*OK*/\n        expect(await p).to.equal(0);\n        await expect(p).to.be.above(0);\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the immediate negative case","suites":["e2e expect","Chai API methods","above, gt, greaterThan"],"updatePoint":{"line":87,"column":52,"index":3845},"line":87,"code":"      it('should work in the immediate negative case', async () => {\n        const p = new ControllerPromise(Promise.resolve(0), getWaitFunction(() => getArrayValueFunction(0, 1)));\n\n        /*OK*/\n        expect(await p).to.not.be.above(0);\n        await expect(p).to.not.be.above(0);\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the eventual negative case","suites":["e2e expect","Chai API methods","above, gt, greaterThan"],"updatePoint":{"line":94,"column":51,"index":4140},"line":94,"code":"      it('should work in the eventual negative case', async () => {\n        const p = new ControllerPromise(Promise.resolve(1), getWaitFunction(() => getArrayValueFunction(1, 0)));\n\n        /*OK*/\n        expect(await p).to.be.above(0);\n        await expect(p).to.not.be.above(0);\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the immediate positive case","suites":["e2e expect","Chai API methods","arguments, Arguments"],"updatePoint":{"line":103,"column":52,"index":4485},"line":103,"code":"      it('should work in the immediate positive case', async () => {\n        function getArguments() {\n          return arguments;\n        }\n        const p = new ControllerPromise(Promise.resolve(getArguments()), getWaitFunction(() => getArrayValueFunction(getArguments())));\n\n        /*OK*/\n        expect(await p).to.be.arguments;\n        await expect(p).to.be.arguments;\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the eventual positive case","suites":["e2e expect","Chai API methods","arguments, Arguments"],"updatePoint":{"line":113,"column":51,"index":4869},"line":113,"code":"      it('should work in the eventual positive case', async () => {\n        function getArguments() {\n          return arguments;\n        }\n        const p = new ControllerPromise(Promise.resolve({}), getWaitFunction(() => getArrayValueFunction({}, getArguments())));\n\n        /*OK*/\n        expect(await p).to.be.deep.equal({});\n        await expect(p).to.be.arguments;\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the immediate negative case","suites":["e2e expect","Chai API methods","arguments, Arguments"],"updatePoint":{"line":123,"column":52,"index":5251},"line":123,"code":"      it('should work in the immediate negative case', async () => {\n        function getArguments() {\n          return arguments;\n        }\n        const p = new ControllerPromise(Promise.resolve({}), getWaitFunction(() => getArrayValueFunction({}, getArguments())));\n\n        /*OK*/\n        expect(await p).to.not.be.arguments;\n        await expect(p).to.not.be.arguments;\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the eventual negative case","suites":["e2e expect","Chai API methods","arguments, Arguments"],"updatePoint":{"line":133,"column":51,"index":5635},"line":133,"code":"      it('should work in the eventual negative case', async () => {\n        function getArguments() {\n          return arguments;\n        }\n        const p = new ControllerPromise(Promise.resolve(getArguments({})), getWaitFunction(() => getArrayValueFunction(getArguments(), {})));\n\n        /*OK*/\n        expect(await p).to.be.arguments;\n        await expect(p).to.not.be.arguments;\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the immediate positive case","suites":["e2e expect","Chai API methods","below, lt, lessThan"],"updatePoint":{"line":145,"column":52,"index":6082},"line":145,"code":"      it('should work in the immediate positive case', async () => {\n        const p = new ControllerPromise(Promise.resolve(-1), getWaitFunction(() => getArrayValueFunction(-1)));\n\n        /*OK*/\n        expect(await p).to.be.below(0);\n        await expect(p).to.be.below(0);\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the eventual positive case","suites":["e2e expect","Chai API methods","below, lt, lessThan"],"updatePoint":{"line":152,"column":51,"index":6368},"line":152,"code":"      it('should work in the eventual positive case', async () => {\n        const p = new ControllerPromise(Promise.resolve(0), getWaitFunction(() => getArrayValueFunction(0, -1)));\n\n        /*OK*/\n        expect(await p).to.equal(0);\n        await expect(p).to.be.below(0);\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the immediate negative case","suites":["e2e expect","Chai API methods","below, lt, lessThan"],"updatePoint":{"line":159,"column":52,"index":6654},"line":159,"code":"      it('should work in the immediate negative case', async () => {\n        const p = new ControllerPromise(Promise.resolve(0), getWaitFunction(() => getArrayValueFunction(0, -1)));\n\n        /*OK*/\n        expect(await p).to.not.be.below(0);\n        await expect(p).to.not.be.below(0);\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the eventual negative case","suites":["e2e expect","Chai API methods","below, lt, lessThan"],"updatePoint":{"line":166,"column":51,"index":6950},"line":166,"code":"      it('should work in the eventual negative case', async () => {\n        const p = new ControllerPromise(Promise.resolve(-1), getWaitFunction(() => getArrayValueFunction(-1, 0)));\n\n        /*OK*/\n        expect(await p).to.be.below(0);\n        await expect(p).to.not.be.below(0);\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should throw that it is unsupported","suites":["e2e expect","Chai API methods","change, changes"],"updatePoint":{"line":175,"column":45,"index":7285},"line":175,"code":"      it('should throw that it is unsupported', async () => {\n        const p = new ControllerPromise(Promise.resolve());\n\n        /*OK*/\n        expect(() => /*OK*/expect(p).to.change({\n          a: 0\n        }, 'a')).to.throw('ControllerPromise used with unsupported expectation');\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the immediate positive case","suites":["e2e expect","Chai API methods","closeTo, approximately"],"updatePoint":{"line":185,"column":52,"index":7641},"line":185,"code":"      it('should work in the immediate positive case', async () => {\n        const p = new ControllerPromise(Promise.resolve(0.5), getWaitFunction(() => getArrayValueFunction(0.5)));\n\n        /*OK*/\n        expect(await p).to.be.closeTo(1, 0.5);\n        await expect(p).to.be.closeTo(1, 0.5);\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the eventual positive case","suites":["e2e expect","Chai API methods","closeTo, approximately"],"updatePoint":{"line":192,"column":51,"index":7943},"line":192,"code":"      it('should work in the eventual positive case', async () => {\n        const p = new ControllerPromise(Promise.resolve(0), getWaitFunction(() => getArrayValueFunction(0, 0.5)));\n\n        /*OK*/\n        expect(await p).to.equal(0);\n        await expect(p).to.be.closeTo(1, 0.5);\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the immediate negative case","suites":["e2e expect","Chai API methods","closeTo, approximately"],"updatePoint":{"line":199,"column":52,"index":8237},"line":199,"code":"      it('should work in the immediate negative case', async () => {\n        const p = new ControllerPromise(Promise.resolve(0), getWaitFunction(() => getArrayValueFunction(0, 0.5)));\n\n        /*OK*/\n        expect(await p).to.not.be.closeTo(1, 0.5);\n        await expect(p).to.not.be.closeTo(1, 0.5);\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the eventual negative case","suites":["e2e expect","Chai API methods","closeTo, approximately"],"updatePoint":{"line":206,"column":51,"index":8548},"line":206,"code":"      it('should work in the eventual negative case', async () => {\n        const p = new ControllerPromise(Promise.resolve(0.5), getWaitFunction(() => getArrayValueFunction(0.5, 0)));\n\n        /*OK*/\n        expect(await p).to.be.closeTo(1, 0.5);\n        await expect(p).to.not.be.closeTo(1, 0.5);\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should throw that it is unsupported","suites":["e2e expect","Chai API methods","decrease, decreases"],"updatePoint":{"line":215,"column":45,"index":8903},"line":215,"code":"      it('should throw that it is unsupported', async () => {\n        const p = new ControllerPromise(Promise.resolve());\n\n        /*OK*/\n        expect(() => /*OK*/expect(p).to.decrease({\n          a: 0\n        }, 'a')).to.throw('ControllerPromise used with unsupported expectation');\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the immediate positive case","suites":["e2e expect","Chai API methods","empty"],"updatePoint":{"line":225,"column":52,"index":9244},"line":225,"code":"      it('should work in the immediate positive case', async () => {\n        const p = new ControllerPromise(Promise.resolve([]), getWaitFunction(() => getArrayValueFunction([])));\n\n        /*OK*/\n        expect(await p).to.be.empty;\n        await expect(p).to.be.empty;\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the eventual positive case","suites":["e2e expect","Chai API methods","empty"],"updatePoint":{"line":232,"column":51,"index":9524},"line":232,"code":"      it('should work in the eventual positive case', async () => {\n        const p = new ControllerPromise(Promise.resolve([0]), getWaitFunction(() => getArrayValueFunction([0], [])));\n\n        /*OK*/\n        expect(await p).to.deep.equal([0]);\n        await expect(p).to.be.empty;\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the immediate negative case","suites":["e2e expect","Chai API methods","empty"],"updatePoint":{"line":239,"column":52,"index":9818},"line":239,"code":"      it('should work in the immediate negative case', async () => {\n        const p = new ControllerPromise(Promise.resolve([0]), getWaitFunction(() => getArrayValueFunction([0], [])));\n\n        /*OK*/\n        expect(await p).to.not.be.empty;\n        await expect(p).to.not.be.empty;\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the eventual negative case","suites":["e2e expect","Chai API methods","empty"],"updatePoint":{"line":246,"column":51,"index":10112},"line":246,"code":"      it('should work in the eventual negative case', async () => {\n        const p = new ControllerPromise(Promise.resolve([]), getWaitFunction(() => getArrayValueFunction([], [0])));\n\n        /*OK*/\n        expect(await p).to.be.empty;\n        await expect(p).to.not.be.empty;\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the immediate positive case","suites":["e2e expect","Chai API methods","eql, eqls (deep equal)"],"updatePoint":{"line":255,"column":52,"index":10457},"line":255,"code":"      it('should work in the immediate positive case', async () => {\n        const p = new ControllerPromise(Promise.resolve({\n          a: {\n            b: 0\n          }\n        }), getWaitFunction(() => getArrayValueFunction({\n          a: {\n            b: 0\n          }\n        })));\n\n        /*OK*/\n        expect(await p).to.eql({\n          a: {\n            b: 0\n          }\n        });\n        await expect(p).to.eql({\n          a: {\n            b: 0\n          }\n        });\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the eventual positive case","suites":["e2e expect","Chai API methods","eql, eqls (deep equal)"],"updatePoint":{"line":278,"column":51,"index":10947},"line":278,"code":"      it('should work in the eventual positive case', async () => {\n        const p = new ControllerPromise(Promise.resolve({}), getWaitFunction(() => getArrayValueFunction({}, {\n          a: {\n            b: 0\n          }\n        })));\n\n        /*OK*/\n        expect(await p).to.eql({});\n        await expect(p).to.eql({\n          a: {\n            b: 0\n          }\n        });\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the immediate negative case","suites":["e2e expect","Chai API methods","eql, eqls (deep equal)"],"updatePoint":{"line":293,"column":52,"index":11336},"line":293,"code":"      it('should work in the immediate negative case', async () => {\n        const p = new ControllerPromise(Promise.resolve({}), getWaitFunction(() => getArrayValueFunction({}, {\n          a: {\n            b: 0\n          }\n        })));\n\n        /*OK*/\n        expect(await p).to.not.eql({\n          a: {\n            b: 0\n          }\n        });\n        await expect(p).to.not.eql({\n          a: {\n            b: 0\n          }\n        });\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the eventual negative case","suites":["e2e expect","Chai API methods","eql, eqls (deep equal)"],"updatePoint":{"line":312,"column":51,"index":11785},"line":312,"code":"      it('should work in the eventual negative case', async () => {\n        const p = new ControllerPromise(Promise.resolve({\n          a: {\n            b: 0\n          }\n        }), getWaitFunction(() => getArrayValueFunction({\n          a: {\n            b: 0\n          }\n        }, {})));\n\n        /*OK*/\n        expect(await p).to.eql({\n          a: {\n            b: 0\n          }\n        });\n        await expect(p).to.not.equal({\n          a: {\n            b: 0\n          }\n        });\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the immediate positive case","suites":["e2e expect","Chai API methods","equal, equals, eq"],"updatePoint":{"line":337,"column":52,"index":12336},"line":337,"code":"      it('should work in the immediate positive case', async () => {\n        const p = new ControllerPromise(Promise.resolve(0), getWaitFunction(() => getArrayValueFunction(0)));\n\n        /*OK*/\n        expect(await p).to.equal(0);\n        await expect(p).to.equal(0);\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the eventual positive case","suites":["e2e expect","Chai API methods","equal, equals, eq"],"updatePoint":{"line":344,"column":51,"index":12614},"line":344,"code":"      it('should work in the eventual positive case', async () => {\n        const p = new ControllerPromise(Promise.resolve(1), getWaitFunction(() => getArrayValueFunction(1, 0)));\n\n        /*OK*/\n        expect(await p).to.equal(1);\n        await expect(p).to.equal(0);\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the immediate negative case","suites":["e2e expect","Chai API methods","equal, equals, eq"],"updatePoint":{"line":351,"column":52,"index":12896},"line":351,"code":"      it('should work in the immediate negative case', async () => {\n        const p = new ControllerPromise(Promise.resolve(1), getWaitFunction(() => getArrayValueFunction(1, 0)));\n\n        /*OK*/\n        expect(await p).to.not.equal(0);\n        await expect(p).to.not.equal(0);\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the eventual negative case","suites":["e2e expect","Chai API methods","equal, equals, eq"],"updatePoint":{"line":358,"column":51,"index":13185},"line":358,"code":"      it('should work in the eventual negative case', async () => {\n        const p = new ControllerPromise(Promise.resolve(0), getWaitFunction(() => getArrayValueFunction(0, 1)));\n\n        /*OK*/\n        expect(await p).to.equal(0);\n        await expect(p).to.not.equal(0);\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the immediate positive case","suites":["e2e expect","Chai API methods","exist"],"updatePoint":{"line":367,"column":52,"index":13509},"line":367,"code":"      it('should work in the immediate positive case', async () => {\n        const p = new ControllerPromise(Promise.resolve(0), getWaitFunction(() => getArrayValueFunction(0)));\n\n        /*OK*/\n        expect(await p).to.exist;\n        await expect(p).to.exist;\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the eventual positive case","suites":["e2e expect","Chai API methods","exist"],"updatePoint":{"line":374,"column":51,"index":13781},"line":374,"code":"      it('should work in the eventual positive case', async () => {\n        const p = new ControllerPromise(Promise.resolve(null), getWaitFunction(() => getArrayValueFunction(null, 0)));\n\n        /*OK*/\n        expect(await p).to.equal(null);\n        await expect(p).to.exist;\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the immediate negative case","suites":["e2e expect","Chai API methods","exist"],"updatePoint":{"line":381,"column":52,"index":14069},"line":381,"code":"      it('should work in the immediate negative case', async () => {\n        const p = new ControllerPromise(Promise.resolve(null), getWaitFunction(() => getArrayValueFunction(null, 0)));\n\n        /*OK*/\n        expect(await p).to.not.exist;\n        await expect(p).to.not.exist;\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the eventual negative case","suites":["e2e expect","Chai API methods","exist"],"updatePoint":{"line":388,"column":51,"index":14358},"line":388,"code":"      it('should work in the eventual negative case', async () => {\n        const p = new ControllerPromise(Promise.resolve(0), getWaitFunction(() => getArrayValueFunction(0, null)));\n\n        /*OK*/\n        expect(await p).to.exist;\n        await expect(p).to.not.exist;\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the immediate positive case","suites":["e2e expect","Chai API methods","extensible"],"updatePoint":{"line":397,"column":52,"index":14684},"line":397,"code":"      it('should work in the immediate positive case', async () => {\n        const p = new ControllerPromise(Promise.resolve({}), getWaitFunction(() => getArrayValueFunction({})));\n\n        /*OK*/\n        expect(await p).to.be.extensible;\n        await expect(p).to.be.extensible;\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the eventual positive case","suites":["e2e expect","Chai API methods","extensible"],"updatePoint":{"line":404,"column":51,"index":14974},"line":404,"code":"      it('should work in the eventual positive case', async () => {\n        const p = new ControllerPromise(Promise.resolve(Object.freeze({})), getWaitFunction(() => getArrayValueFunction(Object.freeze({}), {})));\n\n        /*OK*/\n        expect(await p).to.deep.equal({});\n        await expect(p).to.be.extensible;\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the immediate negative case","suites":["e2e expect","Chai API methods","extensible"],"updatePoint":{"line":411,"column":52,"index":15300},"line":411,"code":"      it('should work in the immediate negative case', async () => {\n        const p = new ControllerPromise(Promise.resolve(Object.freeze({})), getWaitFunction(() => getArrayValueFunction(Object.freeze({}), {})));\n\n        /*OK*/\n        expect(await p).to.not.be.extensible;\n        await expect(p).to.not.be.extensible;\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the eventual negative case","suites":["e2e expect","Chai API methods","extensible"],"updatePoint":{"line":418,"column":51,"index":15632},"line":418,"code":"      it('should work in the eventual negative case', async () => {\n        const p = new ControllerPromise(Promise.resolve({}), getWaitFunction(() => getArrayValueFunction({}, Object.freeze({}))));\n\n        /*OK*/\n        expect(await p).to.be.extensible;\n        await expect(p).to.not.be.extensible;\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the immediate positive case","suites":["e2e expect","Chai API methods","false"],"updatePoint":{"line":427,"column":52,"index":15984},"line":427,"code":"      it('should work in the immediate positive case', async () => {\n        const p = new ControllerPromise(Promise.resolve(false), getWaitFunction(() => getArrayValueFunction(false)));\n\n        /*OK*/\n        expect(await p).to.be.false;\n        await expect(p).to.be.false;\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the eventual positive case","suites":["e2e expect","Chai API methods","false"],"updatePoint":{"line":434,"column":51,"index":16270},"line":434,"code":"      it('should work in the eventual positive case', async () => {\n        const p = new ControllerPromise(Promise.resolve(true), getWaitFunction(() => getArrayValueFunction(true, false)));\n\n        /*OK*/\n        expect(await p).to.be.true;\n        await expect(p).to.be.false;\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the immediate negative case","suites":["e2e expect","Chai API methods","false"],"updatePoint":{"line":441,"column":52,"index":16561},"line":441,"code":"      it('should work in the immediate negative case', async () => {\n        const p = new ControllerPromise(Promise.resolve(true), getWaitFunction(() => getArrayValueFunction(true, false)));\n\n        /*OK*/\n        expect(await p).to.not.be.false;\n        await expect(p).to.not.be.false;\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the eventual negative case","suites":["e2e expect","Chai API methods","false"],"updatePoint":{"line":448,"column":51,"index":16860},"line":448,"code":"      it('should work in the eventual negative case', async () => {\n        const p = new ControllerPromise(Promise.resolve(false), getWaitFunction(() => getArrayValueFunction(false, true)));\n\n        /*OK*/\n        expect(await p).to.be.false;\n        await expect(p).to.not.be.false;\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the immediate positive case","suites":["e2e expect","Chai API methods","finite"],"updatePoint":{"line":457,"column":52,"index":17196},"line":457,"code":"      it('should work in the immediate positive case', async () => {\n        const p = new ControllerPromise(Promise.resolve(0), getWaitFunction(() => getArrayValueFunction(0)));\n\n        /*OK*/\n        expect(await p).to.be.finite;\n        await expect(p).to.be.finite;\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the eventual positive case","suites":["e2e expect","Chai API methods","finite"],"updatePoint":{"line":464,"column":51,"index":17476},"line":464,"code":"      it('should work in the eventual positive case', async () => {\n        const p = new ControllerPromise(Promise.resolve(Infinity), getWaitFunction(() => getArrayValueFunction(Infinity, 0)));\n\n        /*OK*/\n        expect(await p).to.equal(Infinity);\n        await expect(p).to.be.finite;\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the immediate negative case","suites":["e2e expect","Chai API methods","finite"],"updatePoint":{"line":471,"column":52,"index":17780},"line":471,"code":"      it('should work in the immediate negative case', async () => {\n        const p = new ControllerPromise(Promise.resolve(Infinity), getWaitFunction(() => getArrayValueFunction(Infinity, 0)));\n\n        /*OK*/\n        expect(await p).to.not.be.finite;\n        await expect(p).to.not.be.finite;\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the eventual negative case","suites":["e2e expect","Chai API methods","finite"],"updatePoint":{"line":478,"column":51,"index":18085},"line":478,"code":"      it('should work in the eventual negative case', async () => {\n        const p = new ControllerPromise(Promise.resolve(0), getWaitFunction(() => getArrayValueFunction(0, Infinity)));\n\n        /*OK*/\n        expect(await p).to.be.finite;\n        await expect(p).to.not.be.finite;\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the immediate positive case","suites":["e2e expect","Chai API methods","frozen"],"updatePoint":{"line":487,"column":52,"index":18419},"line":487,"code":"      it('should work in the immediate positive case', async () => {\n        const p = new ControllerPromise(Promise.resolve(Object.freeze({})), getWaitFunction(() => getArrayValueFunction(Object.freeze({}), {})));\n\n        /*OK*/\n        expect(await p).to.be.frozen;\n        await expect(p).to.be.frozen;\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the eventual positive case","suites":["e2e expect","Chai API methods","frozen"],"updatePoint":{"line":494,"column":51,"index":18735},"line":494,"code":"      it('should work in the eventual positive case', async () => {\n        const p = new ControllerPromise(Promise.resolve({}), getWaitFunction(() => getArrayValueFunction({}, Object.freeze({}))));\n\n        /*OK*/\n        expect(await p).to.deep.equal({});\n        await expect(p).to.be.frozen;\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the immediate negative case","suites":["e2e expect","Chai API methods","frozen"],"updatePoint":{"line":501,"column":52,"index":19042},"line":501,"code":"      it('should work in the immediate negative case', async () => {\n        const p = new ControllerPromise(Promise.resolve({}), getWaitFunction(() => getArrayValueFunction({}, Object.freeze({}))));\n\n        /*OK*/\n        expect(await p).to.not.be.frozen;\n        await expect(p).to.not.be.frozen;\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the eventual negative case","suites":["e2e expect","Chai API methods","frozen"],"updatePoint":{"line":508,"column":51,"index":19351},"line":508,"code":"      it('should work in the eventual negative case', async () => {\n        const p = new ControllerPromise(Promise.resolve(Object.freeze({})), getWaitFunction(() => getArrayValueFunction(Object.freeze({}), {})));\n\n        /*OK*/\n        expect(await p).to.be.frozen;\n        await expect(p).to.not.be.frozen;\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the immediate positive case","suites":["e2e expect","Chai API methods","include, includes, contain, contains"],"updatePoint":{"line":517,"column":52,"index":19741},"line":517,"code":"      it('should work in the immediate positive case', async () => {\n        const p = new ControllerPromise(Promise.resolve({\n          a: 0\n        }), getWaitFunction(() => getArrayValueFunction({\n          a: 0\n        }, {})));\n\n        /*OK*/\n        expect(await p).to.include({\n          a: 0\n        });\n        await expect(p).to.include({\n          a: 0\n        });\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the eventual positive case","suites":["e2e expect","Chai API methods","include, includes, contain, contains"],"updatePoint":{"line":532,"column":51,"index":20127},"line":532,"code":"      it('should work in the eventual positive case', async () => {\n        const p = new ControllerPromise(Promise.resolve({}), getWaitFunction(() => getArrayValueFunction({}, {\n          a: 0\n        })));\n\n        /*OK*/\n        expect(await p).to.deep.equal({});\n        await expect(p).to.include({\n          a: 0\n        });\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the immediate negative case","suites":["e2e expect","Chai API methods","include, includes, contain, contains"],"updatePoint":{"line":543,"column":52,"index":20469},"line":543,"code":"      it('should work in the immediate negative case', async () => {\n        const p = new ControllerPromise(Promise.resolve({}), getWaitFunction(() => getArrayValueFunction({}, {\n          a: 0\n        })));\n\n        /*OK*/\n        expect(await p).to.not.include({\n          a: 0\n        });\n        await expect(p).to.not.include({\n          a: 0\n        });\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the eventual negative case","suites":["e2e expect","Chai API methods","include, includes, contain, contains"],"updatePoint":{"line":556,"column":51,"index":20839},"line":556,"code":"      it('should work in the eventual negative case', async () => {\n        const p = new ControllerPromise(Promise.resolve({\n          a: 0\n        }), getWaitFunction(() => getArrayValueFunction({\n          a: 0\n        }, {})));\n\n        /*OK*/\n        expect(await p).to.include({\n          a: 0\n        });\n        await expect(p).to.not.include({\n          a: 0\n        });\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should throw that it is unsupported","suites":["e2e expect","Chai API methods","increase, increases"],"updatePoint":{"line":573,"column":45,"index":21275},"line":573,"code":"      it('should throw that it is unsupported', async () => {\n        const p = new ControllerPromise(Promise.resolve());\n\n        /*OK*/\n        expect(() => /*OK*/expect(p).to.increase({\n          a: 0\n        }, 'a')).to.throw('ControllerPromise used with unsupported expectation');\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should throw that it is unsupported","suites":["e2e expect","Chai API methods","by"],"updatePoint":{"line":583,"column":45,"index":21606},"line":583,"code":"      it('should throw that it is unsupported', async () => {\n        const p = new ControllerPromise(Promise.resolve());\n\n        /*OK*/\n        expect(() => /*OK*/expect(p).to.change({\n          a: 0\n        }, 'a').by(1)).to.throw('ControllerPromise used with unsupported expectation');\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the immediate positive case","suites":["e2e expect","Chai API methods","instanceof, instanceOf"],"updatePoint":{"line":593,"column":52,"index":21968},"line":593,"code":"      it('should work in the immediate positive case', async () => {\n        class TestInstance {}\n        const p = new ControllerPromise(Promise.resolve(new TestInstance()), getWaitFunction(() => getArrayValueFunction(new TestInstance(), {})));\n\n        /*OK*/\n        expect(await p).to.be.an.instanceof(TestInstance);\n        await expect(p).to.be.an.instanceof(TestInstance);\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the eventual positive case","suites":["e2e expect","Chai API methods","instanceof, instanceOf"],"updatePoint":{"line":601,"column":51,"index":22358},"line":601,"code":"      it('should work in the eventual positive case', async () => {\n        class TestInstance {}\n        const p = new ControllerPromise(Promise.resolve({}), getWaitFunction(() => getArrayValueFunction({}, new TestInstance())));\n\n        /*OK*/\n        expect(await p).to.be.an.instanceof(Object);\n        await expect(p).to.be.an.instanceof(TestInstance);\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the immediate negative case","suites":["e2e expect","Chai API methods","instanceof, instanceOf"],"updatePoint":{"line":609,"column":52,"index":22727},"line":609,"code":"      it('should work in the immediate negative case', async () => {\n        class TestInstance {}\n        const p = new ControllerPromise(Promise.resolve({}), getWaitFunction(() => getArrayValueFunction({}, new TestInstance())));\n\n        /*OK*/\n        expect(await p).to.not.be.an.instanceof(TestInstance);\n        await expect(p).to.not.be.an.instanceof(TestInstance);\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the eventual negative case","suites":["e2e expect","Chai API methods","instanceof, instanceOf"],"updatePoint":{"line":617,"column":51,"index":23109},"line":617,"code":"      it('should work in the eventual negative case', async () => {\n        class TestInstance {}\n        const p = new ControllerPromise(Promise.resolve(new TestInstance()), getWaitFunction(() => getArrayValueFunction(new TestInstance(), {})));\n\n        /*OK*/\n        expect(await p).to.be.an.instanceof(TestInstance);\n        await expect(p).to.not.be.an.instanceof(TestInstance);\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the immediate positive case","suites":["e2e expect","Chai API methods","keys, key"],"updatePoint":{"line":627,"column":52,"index":23546},"line":627,"code":"      it('should work in the immediate positive case', async () => {\n        const p = new ControllerPromise(Promise.resolve({\n          a: 0,\n          b: 0\n        }), getWaitFunction(() => getArrayValueFunction({\n          a: 0,\n          b: 0\n        }, {})));\n\n        /*OK*/\n        expect(await p).to.have.all.keys('a', 'b');\n        await expect(p).to.have.all.keys('a', 'b');\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the eventual positive case","suites":["e2e expect","Chai API methods","keys, key"],"updatePoint":{"line":640,"column":51,"index":23940},"line":640,"code":"      it('should work in the eventual positive case', async () => {\n        const p = new ControllerPromise(Promise.resolve({}), getWaitFunction(() => getArrayValueFunction({}, {\n          a: 0,\n          b: 0\n        })));\n\n        /*OK*/\n        expect(await p).to.deep.equal({});\n        await expect(p).to.have.all.keys('a', 'b');\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the immediate negative case","suites":["e2e expect","Chai API methods","keys, key"],"updatePoint":{"line":650,"column":52,"index":24286},"line":650,"code":"      it('should work in the immediate negative case', async () => {\n        const p = new ControllerPromise(Promise.resolve({}), getWaitFunction(() => getArrayValueFunction({}, {\n          a: 0,\n          b: 0\n        })));\n\n        /*OK*/\n        expect(await p).to.not.have.all.keys('a', 'b');\n        await expect(p).to.not.have.all.keys('a', 'b');\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the eventual negative case","suites":["e2e expect","Chai API methods","keys, key"],"updatePoint":{"line":660,"column":51,"index":24648},"line":660,"code":"      it('should work in the eventual negative case', async () => {\n        const p = new ControllerPromise(Promise.resolve({\n          a: 0,\n          b: 0\n        }), getWaitFunction(() => getArrayValueFunction({\n          a: 0,\n          b: 0\n        }, {})));\n\n        /*OK*/\n        expect(await p).to.have.all.keys('a', 'b');\n        await expect(p).to.not.have.all.keys('a', 'b');\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the immediate positive case","suites":["e2e expect","Chai API methods","least, gte"],"updatePoint":{"line":675,"column":52,"index":25090},"line":675,"code":"      it('should work in the immediate positive case', async () => {\n        const p = new ControllerPromise(Promise.resolve(1), getWaitFunction(() => getArrayValueFunction(1)));\n\n        /*OK*/\n        expect(await p).to.be.at.least(1);\n        await expect(p).to.be.at.least(1);\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the eventual positive case","suites":["e2e expect","Chai API methods","least, gte"],"updatePoint":{"line":682,"column":51,"index":25380},"line":682,"code":"      it('should work in the eventual positive case', async () => {\n        const p = new ControllerPromise(Promise.resolve(0), getWaitFunction(() => getArrayValueFunction(0, 1)));\n\n        /*OK*/\n        expect(await p).to.equal(0);\n        await expect(p).to.be.at.least(1);\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the immediate negative case","suites":["e2e expect","Chai API methods","least, gte"],"updatePoint":{"line":689,"column":52,"index":25668},"line":689,"code":"      it('should work in the immediate negative case', async () => {\n        const p = new ControllerPromise(Promise.resolve(0), getWaitFunction(() => getArrayValueFunction(0, 1)));\n\n        /*OK*/\n        expect(await p).to.not.be.at.least(1);\n        await expect(p).to.not.be.at.least(1);\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the eventual negative case","suites":["e2e expect","Chai API methods","least, gte"],"updatePoint":{"line":696,"column":51,"index":25969},"line":696,"code":"      it('should work in the eventual negative case', async () => {\n        const p = new ControllerPromise(Promise.resolve(1), getWaitFunction(() => getArrayValueFunction(1, 0)));\n\n        /*OK*/\n        expect(await p).to.be.at.least(1);\n        await expect(p).to.not.be.at.least(1);\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the immediate positive case","suites":["e2e expect","Chai API methods","length"],"updatePoint":{"line":705,"column":52,"index":26306},"line":705,"code":"      it('should work in the immediate positive case', async () => {\n        const p = new ControllerPromise(Promise.resolve([]), getWaitFunction(() => getArrayValueFunction([])));\n\n        /*OK*/\n        expect(await p).to.have.length(0);\n        await expect(p).to.have.length(0);\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the eventual positive case","suites":["e2e expect","Chai API methods","length"],"updatePoint":{"line":712,"column":51,"index":26598},"line":712,"code":"      it('should work in the eventual positive case', async () => {\n        const p = new ControllerPromise(Promise.resolve([0]), getWaitFunction(() => getArrayValueFunction([0], [])));\n\n        /*OK*/\n        expect(await p).to.have.length(1);\n        await expect(p).to.have.length(0);\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the immediate negative case","suites":["e2e expect","Chai API methods","length"],"updatePoint":{"line":719,"column":52,"index":26897},"line":719,"code":"      it('should work in the immediate negative case', async () => {\n        const p = new ControllerPromise(Promise.resolve([0]), getWaitFunction(() => getArrayValueFunction([0], [])));\n\n        /*OK*/\n        expect(await p).to.not.have.length(0);\n        await expect(p).to.not.have.length(0);\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the eventual negative case","suites":["e2e expect","Chai API methods","length"],"updatePoint":{"line":726,"column":51,"index":27203},"line":726,"code":"      it('should work in the eventual negative case', async () => {\n        const p = new ControllerPromise(Promise.resolve([]), getWaitFunction(() => getArrayValueFunction([], [0])));\n\n        /*OK*/\n        expect(await p).to.have.length(0);\n        await expect(p).to.not.have.length(0);\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the immediate positive case","suites":["e2e expect","Chai API methods","lengthOf"],"updatePoint":{"line":735,"column":52,"index":27546},"line":735,"code":"      it('should work in the immediate positive case', async () => {\n        const p = new ControllerPromise(Promise.resolve([]), getWaitFunction(() => getArrayValueFunction([])));\n\n        /*OK*/\n        expect(await p).to.have.a.lengthOf(0);\n        await expect(p).to.have.a.lengthOf(0);\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the eventual positive case","suites":["e2e expect","Chai API methods","lengthOf"],"updatePoint":{"line":742,"column":51,"index":27846},"line":742,"code":"      it('should work in the eventual positive case', async () => {\n        const p = new ControllerPromise(Promise.resolve([0]), getWaitFunction(() => getArrayValueFunction([0], [])));\n\n        /*OK*/\n        expect(await p).to.have.a.lengthOf(1);\n        await expect(p).to.have.a.lengthOf(0);\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the immediate negative case","suites":["e2e expect","Chai API methods","lengthOf"],"updatePoint":{"line":749,"column":52,"index":28153},"line":749,"code":"      it('should work in the immediate negative case', async () => {\n        const p = new ControllerPromise(Promise.resolve([0]), getWaitFunction(() => getArrayValueFunction([0], [])));\n\n        /*OK*/\n        expect(await p).to.not.have.a.lengthOf(0);\n        await expect(p).to.not.have.a.lengthOf(0);\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the eventual negative case","suites":["e2e expect","Chai API methods","lengthOf"],"updatePoint":{"line":756,"column":51,"index":28467},"line":756,"code":"      it('should work in the eventual negative case', async () => {\n        const p = new ControllerPromise(Promise.resolve([]), getWaitFunction(() => getArrayValueFunction([], [0])));\n\n        /*OK*/\n        expect(await p).to.have.a.lengthOf(0);\n        await expect(p).to.not.have.a.lengthOf(0);\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the immediate positive case","suites":["e2e expect","Chai API methods","match, matches"],"updatePoint":{"line":765,"column":52,"index":28824},"line":765,"code":"      it('should work in the immediate positive case', async () => {\n        const p = new ControllerPromise(Promise.resolve('1'), getWaitFunction(() => getArrayValueFunction('1')));\n\n        /*OK*/\n        expect(await p).to.match(/\\d/);\n        await expect(p).to.match(/\\d/);\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the eventual positive case","suites":["e2e expect","Chai API methods","match, matches"],"updatePoint":{"line":772,"column":51,"index":29112},"line":772,"code":"      it('should work in the eventual positive case', async () => {\n        const p = new ControllerPromise(Promise.resolve('a'), getWaitFunction(() => getArrayValueFunction('a', '1')));\n\n        /*OK*/\n        expect(await p).to.equal('a');\n        await expect(p).to.match(/\\d/);\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the immediate negative case","suites":["e2e expect","Chai API methods","match, matches"],"updatePoint":{"line":779,"column":52,"index":29405},"line":779,"code":"      it('should work in the immediate negative case', async () => {\n        const p = new ControllerPromise(Promise.resolve('a'), getWaitFunction(() => getArrayValueFunction('a', '1')));\n\n        /*OK*/\n        expect(await p).to.not.match(/\\d/);\n        await expect(p).to.not.match(/\\d/);\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the eventual negative case","suites":["e2e expect","Chai API methods","match, matches"],"updatePoint":{"line":786,"column":51,"index":29706},"line":786,"code":"      it('should work in the eventual negative case', async () => {\n        const p = new ControllerPromise(Promise.resolve('1'), getWaitFunction(() => getArrayValueFunction('1', 'a')));\n\n        /*OK*/\n        expect(await p).to.match(/\\d/);\n        await expect(p).to.not.match(/\\d/);\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the immediate positive case","suites":["e2e expect","Chai API methods","members"],"updatePoint":{"line":795,"column":52,"index":30044},"line":795,"code":"      it('should work in the immediate positive case', async () => {\n        const p = new ControllerPromise(Promise.resolve([0]), getWaitFunction(() => getArrayValueFunction([0])));\n\n        /*OK*/\n        expect(await p).to.have.members([0]);\n        await expect(p).to.have.members([0]);\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the eventual positive case","suites":["e2e expect","Chai API methods","members"],"updatePoint":{"line":802,"column":51,"index":30344},"line":802,"code":"      it('should work in the eventual positive case', async () => {\n        const p = new ControllerPromise(Promise.resolve([]), getWaitFunction(() => getArrayValueFunction([], [0])));\n\n        /*OK*/\n        expect(await p).to.deep.equal([]);\n        await expect(p).to.have.members([0]);\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the immediate negative case","suites":["e2e expect","Chai API methods","members"],"updatePoint":{"line":809,"column":52,"index":30645},"line":809,"code":"      it('should work in the immediate negative case', async () => {\n        const p = new ControllerPromise(Promise.resolve([]), getWaitFunction(() => getArrayValueFunction([], [0])));\n\n        /*OK*/\n        expect(await p).to.not.have.members([0]);\n        await expect(p).to.not.have.members([0]);\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the eventual negative case","suites":["e2e expect","Chai API methods","members"],"updatePoint":{"line":816,"column":51,"index":30956},"line":816,"code":"      it('should work in the eventual negative case', async () => {\n        const p = new ControllerPromise(Promise.resolve([0]), getWaitFunction(() => getArrayValueFunction([0], [])));\n\n        /*OK*/\n        expect(await p).to.have.members([0]);\n        await expect(p).to.not.have.members([0]);\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the immediate positive case","suites":["e2e expect","Chai API methods","most, lte"],"updatePoint":{"line":825,"column":52,"index":31307},"line":825,"code":"      it('should work in the immediate positive case', async () => {\n        const p = new ControllerPromise(Promise.resolve(1), getWaitFunction(() => getArrayValueFunction(1)));\n\n        /*OK*/\n        expect(await p).to.be.at.most(1);\n        await expect(p).to.be.at.most(1);\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the eventual positive case","suites":["e2e expect","Chai API methods","most, lte"],"updatePoint":{"line":832,"column":51,"index":31595},"line":832,"code":"      it('should work in the eventual positive case', async () => {\n        const p = new ControllerPromise(Promise.resolve(2), getWaitFunction(() => getArrayValueFunction(2, 1)));\n\n        /*OK*/\n        expect(await p).to.equal(2);\n        await expect(p).to.be.at.most(1);\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the immediate negative case","suites":["e2e expect","Chai API methods","most, lte"],"updatePoint":{"line":839,"column":52,"index":31882},"line":839,"code":"      it('should work in the immediate negative case', async () => {\n        const p = new ControllerPromise(Promise.resolve(2), getWaitFunction(() => getArrayValueFunction(2, 1)));\n\n        /*OK*/\n        expect(await p).to.not.be.at.most(1);\n        await expect(p).to.not.be.at.most(1);\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the eventual negative case","suites":["e2e expect","Chai API methods","most, lte"],"updatePoint":{"line":846,"column":51,"index":32181},"line":846,"code":"      it('should work in the eventual negative case', async () => {\n        const p = new ControllerPromise(Promise.resolve(1), getWaitFunction(() => getArrayValueFunction(1, 2)));\n\n        /*OK*/\n        expect(await p).to.be.at.most(1);\n        await expect(p).to.not.be.at.most(1);\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the immediate positive case","suites":["e2e expect","Chai API methods","NaN"],"updatePoint":{"line":855,"column":52,"index":32513},"line":855,"code":"      it('should work in the immediate positive case', async () => {\n        const p = new ControllerPromise(Promise.resolve(NaN), getWaitFunction(() => getArrayValueFunction(NaN, 0)));\n\n        /*OK*/\n        expect(await p).to.be.NaN;\n        await expect(p).to.be.NaN;\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the eventual positive case","suites":["e2e expect","Chai API methods","NaN"],"updatePoint":{"line":862,"column":51,"index":32794},"line":862,"code":"      it('should work in the eventual positive case', async () => {\n        const p = new ControllerPromise(Promise.resolve(0), getWaitFunction(() => getArrayValueFunction(0, NaN)));\n\n        /*OK*/\n        expect(await p).to.equal(0);\n        await expect(p).to.be.NaN;\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the immediate negative case","suites":["e2e expect","Chai API methods","NaN"],"updatePoint":{"line":869,"column":52,"index":33076},"line":869,"code":"      it('should work in the immediate negative case', async () => {\n        const p = new ControllerPromise(Promise.resolve(0), getWaitFunction(() => getArrayValueFunction(0, NaN)));\n\n        /*OK*/\n        expect(await p).to.not.be.NaN;\n        await expect(p).to.not.be.NaN;\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the eventual negative case","suites":["e2e expect","Chai API methods","NaN"],"updatePoint":{"line":876,"column":51,"index":33363},"line":876,"code":"      it('should work in the eventual negative case', async () => {\n        const p = new ControllerPromise(Promise.resolve(NaN), getWaitFunction(() => getArrayValueFunction(NaN, 0)));\n\n        /*OK*/\n        expect(await p).to.be.NaN;\n        await expect(p).to.not.be.NaN;\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the immediate positive case","suites":["e2e expect","Chai API methods","null"],"updatePoint":{"line":885,"column":52,"index":33686},"line":885,"code":"      it('should work in the immediate positive case', async () => {\n        const p = new ControllerPromise(Promise.resolve(null), getWaitFunction(() => getArrayValueFunction(null, 0)));\n\n        /*OK*/\n        expect(await p).to.be.null;\n        await expect(p).to.be.null;\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the eventual positive case","suites":["e2e expect","Chai API methods","null"],"updatePoint":{"line":892,"column":51,"index":33971},"line":892,"code":"      it('should work in the eventual positive case', async () => {\n        const p = new ControllerPromise(Promise.resolve(0), getWaitFunction(() => getArrayValueFunction(0, null)));\n\n        /*OK*/\n        expect(await p).to.equal(0);\n        await expect(p).to.be.null;\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the immediate negative case","suites":["e2e expect","Chai API methods","null"],"updatePoint":{"line":899,"column":52,"index":34255},"line":899,"code":"      it('should work in the immediate negative case', async () => {\n        const p = new ControllerPromise(Promise.resolve(0), getWaitFunction(() => getArrayValueFunction(0, null)));\n\n        /*OK*/\n        expect(await p).to.not.be.null;\n        await expect(p).to.not.be.null;\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the eventual negative case","suites":["e2e expect","Chai API methods","null"],"updatePoint":{"line":906,"column":51,"index":34545},"line":906,"code":"      it('should work in the eventual negative case', async () => {\n        const p = new ControllerPromise(Promise.resolve(null), getWaitFunction(() => getArrayValueFunction(null, 0)));\n\n        /*OK*/\n        expect(await p).to.be.null;\n        await expect(p).to.not.be.null;\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the immediate positive case","suites":["e2e expect","Chai API methods","ok"],"updatePoint":{"line":915,"column":52,"index":34870},"line":915,"code":"      it('should work in the immediate positive case', async () => {\n        const p = new ControllerPromise(Promise.resolve(true), getWaitFunction(() => getArrayValueFunction(true, false)));\n\n        /*OK*/\n        expect(await p).to.be.ok;\n        await expect(p).to.be.ok;\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the eventual positive case","suites":["e2e expect","Chai API methods","ok"],"updatePoint":{"line":922,"column":51,"index":35155},"line":922,"code":"      it('should work in the eventual positive case', async () => {\n        const p = new ControllerPromise(Promise.resolve(false), getWaitFunction(() => getArrayValueFunction(false, true)));\n\n        /*OK*/\n        expect(await p).to.equal(false);\n        await expect(p).to.be.ok;\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the immediate negative case","suites":["e2e expect","Chai API methods","ok"],"updatePoint":{"line":929,"column":52,"index":35449},"line":929,"code":"      it('should work in the immediate negative case', async () => {\n        const p = new ControllerPromise(Promise.resolve(false), getWaitFunction(() => getArrayValueFunction(false, true)));\n\n        /*OK*/\n        expect(await p).to.not.be.ok;\n        await expect(p).to.not.be.ok;\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the eventual negative case","suites":["e2e expect","Chai API methods","ok"],"updatePoint":{"line":936,"column":51,"index":35743},"line":936,"code":"      it('should work in the eventual negative case', async () => {\n        const p = new ControllerPromise(Promise.resolve(true), getWaitFunction(() => getArrayValueFunction(true, false)));\n\n        /*OK*/\n        expect(await p).to.be.ok;\n        await expect(p).to.not.be.ok;\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the immediate positive case","suites":["e2e expect","Chai API methods","oneOf"],"updatePoint":{"line":945,"column":52,"index":36071},"line":945,"code":"      it('should work in the immediate positive case', async () => {\n        const p = new ControllerPromise(Promise.resolve(1), getWaitFunction(() => getArrayValueFunction(1, 0)));\n\n        /*OK*/\n        expect(await p).to.be.oneOf([1, 2]);\n        await expect(p).to.be.oneOf([1, 2]);\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the eventual positive case","suites":["e2e expect","Chai API methods","oneOf"],"updatePoint":{"line":952,"column":51,"index":36368},"line":952,"code":"      it('should work in the eventual positive case', async () => {\n        const p = new ControllerPromise(Promise.resolve(0), getWaitFunction(() => getArrayValueFunction(0, 1)));\n\n        /*OK*/\n        expect(await p).to.equal(0);\n        await expect(p).to.be.oneOf([1, 2]);\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the immediate negative case","suites":["e2e expect","Chai API methods","oneOf"],"updatePoint":{"line":959,"column":52,"index":36658},"line":959,"code":"      it('should work in the immediate negative case', async () => {\n        const p = new ControllerPromise(Promise.resolve(0), getWaitFunction(() => getArrayValueFunction(0, 1)));\n\n        /*OK*/\n        expect(await p).to.not.be.oneOf([1, 2]);\n        await expect(p).to.not.be.oneOf([1, 2]);\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the eventual negative case","suites":["e2e expect","Chai API methods","oneOf"],"updatePoint":{"line":966,"column":51,"index":36963},"line":966,"code":"      it('should work in the eventual negative case', async () => {\n        const p = new ControllerPromise(Promise.resolve(1), getWaitFunction(() => getArrayValueFunction(1, 0)));\n\n        /*OK*/\n        expect(await p).to.be.oneOf([1, 2]);\n        await expect(p).to.not.be.oneOf([1, 2]);\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the immediate positive case","suites":["e2e expect","Chai API methods","ownProperty, haveOwnProperty"],"updatePoint":{"line":975,"column":52,"index":37326},"line":975,"code":"      it('should work in the immediate positive case', async () => {\n        const p = new ControllerPromise(Promise.resolve({\n          a: 0\n        }), getWaitFunction(() => getArrayValueFunction({\n          a: 0\n        }, {})));\n\n        /*OK*/\n        expect(await p).to.have.ownProperty('a');\n        await expect(p).to.have.ownProperty('a');\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the eventual positive case","suites":["e2e expect","Chai API methods","ownProperty, haveOwnProperty"],"updatePoint":{"line":986,"column":51,"index":37684},"line":986,"code":"      it('should work in the eventual positive case', async () => {\n        const p = new ControllerPromise(Promise.resolve({}), getWaitFunction(() => getArrayValueFunction({}, {\n          a: 0\n        })));\n\n        /*OK*/\n        expect(await p).to.deep.equal({});\n        await expect(p).to.have.ownProperty('a');\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the immediate negative case","suites":["e2e expect","Chai API methods","ownProperty, haveOwnProperty"],"updatePoint":{"line":995,"column":52,"index":38012},"line":995,"code":"      it('should work in the immediate negative case', async () => {\n        const p = new ControllerPromise(Promise.resolve({}), getWaitFunction(() => getArrayValueFunction({}, {\n          a: 0\n        })));\n\n        /*OK*/\n        expect(await p).to.not.have.ownProperty('a');\n        await expect(p).to.not.have.ownProperty('a');\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the eventual negative case","suites":["e2e expect","Chai API methods","ownProperty, haveOwnProperty"],"updatePoint":{"line":1004,"column":51,"index":38354},"line":1004,"code":"      it('should work in the eventual negative case', async () => {\n        const p = new ControllerPromise(Promise.resolve({\n          a: 0\n        }), getWaitFunction(() => getArrayValueFunction({\n          a: 0\n        }, {})));\n\n        /*OK*/\n        expect(await p).to.have.ownProperty('a');\n        await expect(p).to.not.have.ownProperty('a');\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the immediate positive case","suites":["e2e expect","Chai API methods","ownPropertyDescriptor, haveOwnPropertyDescriptor"],"updatePoint":{"line":1017,"column":52,"index":38798},"line":1017,"code":"      it('should work in the immediate positive case', async () => {\n        const p = new ControllerPromise(Promise.resolve({\n          a: 0\n        }), getWaitFunction(() => getArrayValueFunction({\n          a: 0\n        }, {})));\n\n        /*OK*/\n        expect(await p).to.have.ownPropertyDescriptor('a');\n        await expect(p).to.have.ownPropertyDescriptor('a');\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the eventual positive case","suites":["e2e expect","Chai API methods","ownPropertyDescriptor, haveOwnPropertyDescriptor"],"updatePoint":{"line":1028,"column":51,"index":39176},"line":1028,"code":"      it('should work in the eventual positive case', async () => {\n        const p = new ControllerPromise(Promise.resolve({}), getWaitFunction(() => getArrayValueFunction({}, {\n          a: 0\n        })));\n\n        /*OK*/\n        expect(await p).to.deep.equal({});\n        await expect(p).to.have.ownPropertyDescriptor('a');\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the immediate negative case","suites":["e2e expect","Chai API methods","ownPropertyDescriptor, haveOwnPropertyDescriptor"],"updatePoint":{"line":1037,"column":52,"index":39514},"line":1037,"code":"      it('should work in the immediate negative case', async () => {\n        const p = new ControllerPromise(Promise.resolve({}), getWaitFunction(() => getArrayValueFunction({}, {\n          a: 0\n        })));\n\n        /*OK*/\n        expect(await p).to.not.have.ownPropertyDescriptor('a');\n        await expect(p).to.not.have.ownPropertyDescriptor('a');\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the eventual negative case","suites":["e2e expect","Chai API methods","ownPropertyDescriptor, haveOwnPropertyDescriptor"],"updatePoint":{"line":1046,"column":51,"index":39876},"line":1046,"code":"      it('should work in the eventual negative case', async () => {\n        const p = new ControllerPromise(Promise.resolve({\n          a: 0\n        }), getWaitFunction(() => getArrayValueFunction({\n          a: 0\n        }, {})));\n\n        /*OK*/\n        expect(await p).to.have.ownPropertyDescriptor('a');\n        await expect(p).to.not.have.ownPropertyDescriptor('a');\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the immediate positive case","suites":["e2e expect","Chai API methods","property"],"updatePoint":{"line":1059,"column":52,"index":40300},"line":1059,"code":"      it('should work in the immediate positive case', async () => {\n        const p = new ControllerPromise(Promise.resolve({\n          a: 0\n        }), getWaitFunction(() => getArrayValueFunction({\n          a: 0\n        }, {})));\n\n        /*OK*/\n        expect(await p).to.have.property('a');\n        await expect(p).to.have.property('a');\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the eventual positive case","suites":["e2e expect","Chai API methods","property"],"updatePoint":{"line":1070,"column":51,"index":40652},"line":1070,"code":"      it('should work in the eventual positive case', async () => {\n        const p = new ControllerPromise(Promise.resolve({}), getWaitFunction(() => getArrayValueFunction({}, {\n          a: 0\n        })));\n\n        /*OK*/\n        expect(await p).to.deep.equal({});\n        await expect(p).to.have.property('a');\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the immediate negative case","suites":["e2e expect","Chai API methods","property"],"updatePoint":{"line":1079,"column":52,"index":40977},"line":1079,"code":"      it('should work in the immediate negative case', async () => {\n        const p = new ControllerPromise(Promise.resolve({}), getWaitFunction(() => getArrayValueFunction({}, {\n          a: 0\n        })));\n\n        /*OK*/\n        expect(await p).to.not.have.property('a');\n        await expect(p).to.not.have.property('a');\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the eventual negative case","suites":["e2e expect","Chai API methods","property"],"updatePoint":{"line":1088,"column":51,"index":41313},"line":1088,"code":"      it('should work in the eventual negative case', async () => {\n        const p = new ControllerPromise(Promise.resolve({\n          a: 0\n        }), getWaitFunction(() => getArrayValueFunction({\n          a: 0\n        }, {})));\n\n        /*OK*/\n        expect(await p).to.have.property('a');\n        await expect(p).to.not.have.property('a');\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should throw that it is unsupported","suites":["e2e expect","Chai API methods","respondTo, respondsTo"],"updatePoint":{"line":1101,"column":45,"index":41717},"line":1101,"code":"      it('should throw that it is unsupported', async () => {\n        const p = new ControllerPromise(Promise.resolve({}));\n\n        /*OK*/\n        expect(() => /*OK*/expect(p).to.respondTo('this will break')).to.throw('ControllerPromise used with unsupported expectation');\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the immediate positive case","suites":["e2e expect","Chai API methods","satisfy, satisfies"],"updatePoint":{"line":1109,"column":52,"index":42060},"line":1109,"code":"      it('should work in the immediate positive case', async () => {\n        const p = new ControllerPromise(Promise.resolve(2), getWaitFunction(() => getArrayValueFunction(2, 1)));\n\n        /*OK*/\n        expect(await p).to.satisfy(x => x % 2 == 0);\n        await expect(p).to.satisfy(x => x % 2 == 0);\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the eventual positive case","suites":["e2e expect","Chai API methods","satisfy, satisfies"],"updatePoint":{"line":1116,"column":51,"index":42373},"line":1116,"code":"      it('should work in the eventual positive case', async () => {\n        const p = new ControllerPromise(Promise.resolve(1), getWaitFunction(() => getArrayValueFunction(1, 2)));\n\n        /*OK*/\n        expect(await p).to.equal(1);\n        await expect(p).to.satisfy(x => x % 2 == 0);\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the immediate negative case","suites":["e2e expect","Chai API methods","satisfy, satisfies"],"updatePoint":{"line":1123,"column":52,"index":42671},"line":1123,"code":"      it('should work in the immediate negative case', async () => {\n        const p = new ControllerPromise(Promise.resolve(1), getWaitFunction(() => getArrayValueFunction(1, 2)));\n\n        /*OK*/\n        expect(await p).to.not.satisfy(x => x % 2 == 0);\n        await expect(p).to.not.satisfy(x => x % 2 == 0);\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the eventual negative case","suites":["e2e expect","Chai API methods","satisfy, satisfies"],"updatePoint":{"line":1130,"column":51,"index":42992},"line":1130,"code":"      it('should work in the eventual negative case', async () => {\n        const p = new ControllerPromise(Promise.resolve(2), getWaitFunction(() => getArrayValueFunction(2, 1)));\n\n        /*OK*/\n        expect(await p).to.satisfy(x => x % 2 == 0);\n        await expect(p).to.not.satisfy(x => x % 2 == 0);\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the immediate positive case","suites":["e2e expect","Chai API methods","sealed"],"updatePoint":{"line":1139,"column":52,"index":43349},"line":1139,"code":"      it('should work in the immediate positive case', async () => {\n        const p = new ControllerPromise(Promise.resolve(0), getWaitFunction(() => getArrayValueFunction(0, {})));\n\n        /*OK*/\n        expect(await p).to.be.sealed;\n        await expect(p).to.be.sealed;\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the eventual positive case","suites":["e2e expect","Chai API methods","sealed"],"updatePoint":{"line":1146,"column":51,"index":43633},"line":1146,"code":"      it('should work in the eventual positive case', async () => {\n        const p = new ControllerPromise(Promise.resolve({}), getWaitFunction(() => getArrayValueFunction({}, 0)));\n\n        /*OK*/\n        expect(await p).to.deep.equal({});\n        await expect(p).to.be.sealed;\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the immediate negative case","suites":["e2e expect","Chai API methods","sealed"],"updatePoint":{"line":1153,"column":52,"index":43924},"line":1153,"code":"      it('should work in the immediate negative case', async () => {\n        const p = new ControllerPromise(Promise.resolve({}), getWaitFunction(() => getArrayValueFunction({}, 0)));\n\n        /*OK*/\n        expect(await p).to.not.be.sealed;\n        await expect(p).to.not.be.sealed;\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the eventual negative case","suites":["e2e expect","Chai API methods","sealed"],"updatePoint":{"line":1160,"column":51,"index":44217},"line":1160,"code":"      it('should work in the eventual negative case', async () => {\n        const p = new ControllerPromise(Promise.resolve(0), getWaitFunction(() => getArrayValueFunction(0, {})));\n\n        /*OK*/\n        expect(await p).to.be.sealed;\n        await expect(p).to.not.be.sealed;\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the immediate positive case","suites":["e2e expect","Chai API methods","string"],"updatePoint":{"line":1169,"column":52,"index":44545},"line":1169,"code":"      it('should work in the immediate positive case', async () => {\n        const p = new ControllerPromise(Promise.resolve('string'), getWaitFunction(() => getArrayValueFunction('string', 'x')));\n\n        /*OK*/\n        expect(await p).to.have.string('ring');\n        await expect(p).to.have.string('ring');\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the eventual positive case","suites":["e2e expect","Chai API methods","string"],"updatePoint":{"line":1176,"column":51,"index":44864},"line":1176,"code":"      it('should work in the eventual positive case', async () => {\n        const p = new ControllerPromise(Promise.resolve('x'), getWaitFunction(() => getArrayValueFunction('x', 'string')));\n\n        /*OK*/\n        expect(await p).to.equal('x');\n        await expect(p).to.have.string('ring');\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the immediate negative case","suites":["e2e expect","Chai API methods","string"],"updatePoint":{"line":1183,"column":52,"index":45170},"line":1183,"code":"      it('should work in the immediate negative case', async () => {\n        const p = new ControllerPromise(Promise.resolve('x'), getWaitFunction(() => getArrayValueFunction('x', 'string')));\n\n        /*OK*/\n        expect(await p).to.not.have.string('ring');\n        await expect(p).to.not.have.string('ring');\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the eventual negative case","suites":["e2e expect","Chai API methods","string"],"updatePoint":{"line":1190,"column":51,"index":45492},"line":1190,"code":"      it('should work in the eventual negative case', async () => {\n        const p = new ControllerPromise(Promise.resolve('string'), getWaitFunction(() => getArrayValueFunction('string', 'x')));\n\n        /*OK*/\n        expect(await p).to.have.string('ring');\n        await expect(p).to.not.have.string('ring');\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should throw that it is unsupported","suites":["e2e expect","Chai API methods","throw, throws, Throw"],"updatePoint":{"line":1199,"column":45,"index":45862},"line":1199,"code":"      it('should throw that it is unsupported', async () => {\n        const p = new ControllerPromise(Promise.resolve('string'));\n\n        /*OK*/\n        expect(() => /*OK*/expect(p).to.throw('this will break')).to.throw('ControllerPromise used with unsupported expectation');\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the immediate positive case","suites":["e2e expect","Chai API methods","true"],"updatePoint":{"line":1207,"column":52,"index":46193},"line":1207,"code":"      it('should work in the immediate positive case', async () => {\n        const p = new ControllerPromise(Promise.resolve(true), getWaitFunction(() => getArrayValueFunction(true, false)));\n\n        /*OK*/\n        expect(await p).to.be.true;\n        await expect(p).to.be.true;\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the eventual positive case","suites":["e2e expect","Chai API methods","true"],"updatePoint":{"line":1214,"column":51,"index":46482},"line":1214,"code":"      it('should work in the eventual positive case', async () => {\n        const p = new ControllerPromise(Promise.resolve(false), getWaitFunction(() => getArrayValueFunction(false, true)));\n\n        /*OK*/\n        expect(await p).to.be.false;\n        await expect(p).to.be.true;\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the immediate negative case","suites":["e2e expect","Chai API methods","true"],"updatePoint":{"line":1221,"column":52,"index":46774},"line":1221,"code":"      it('should work in the immediate negative case', async () => {\n        const p = new ControllerPromise(Promise.resolve(false), getWaitFunction(() => getArrayValueFunction(false, true)));\n\n        /*OK*/\n        expect(await p).to.not.be.true;\n        await expect(p).to.not.be.true;\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the eventual negative case","suites":["e2e expect","Chai API methods","true"],"updatePoint":{"line":1228,"column":51,"index":47072},"line":1228,"code":"      it('should work in the eventual negative case', async () => {\n        const p = new ControllerPromise(Promise.resolve(true), getWaitFunction(() => getArrayValueFunction(true, false)));\n\n        /*OK*/\n        expect(await p).to.be.true;\n        await expect(p).to.not.be.true;\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the immediate positive case","suites":["e2e expect","Chai API methods","undefined"],"updatePoint":{"line":1237,"column":52,"index":47408},"line":1237,"code":"      it('should work in the immediate positive case', async () => {\n        const p = new ControllerPromise(Promise.resolve(undefined), getWaitFunction(() => getArrayValueFunction(undefined, 0)));\n        /*OK*/\n        expect(await p).to.be.undefined;\n        await expect(p).to.be.undefined;\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the eventual positive case","suites":["e2e expect","Chai API methods","undefined"],"updatePoint":{"line":1243,"column":51,"index":47712},"line":1243,"code":"      it('should work in the eventual positive case', async () => {\n        const p = new ControllerPromise(Promise.resolve(0), getWaitFunction(() => getArrayValueFunction(0, undefined)));\n        /*OK*/\n        expect(await p).to.equal(0);\n        await expect(p).to.be.undefined;\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the immediate negative case","suites":["e2e expect","Chai API methods","undefined"],"updatePoint":{"line":1249,"column":52,"index":48005},"line":1249,"code":"      it('should work in the immediate negative case', async () => {\n        const p = new ControllerPromise(Promise.resolve(0), getWaitFunction(() => getArrayValueFunction(0, undefined)));\n        /*OK*/\n        expect(await p).to.not.be.undefined;\n        await expect(p).to.not.be.undefined;\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the eventual negative case","suites":["e2e expect","Chai API methods","undefined"],"updatePoint":{"line":1255,"column":51,"index":48309},"line":1255,"code":"      it('should work in the eventual negative case', async () => {\n        const p = new ControllerPromise(Promise.resolve(undefined), getWaitFunction(() => getArrayValueFunction(undefined, 0)));\n        /*OK*/\n        expect(await p).to.be.undefined;\n        await expect(p).to.not.be.undefined;\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the immediate positive case","suites":["e2e expect","Chai API methods","within"],"updatePoint":{"line":1263,"column":52,"index":48657},"line":1263,"code":"      it('should work in the immediate positive case', async () => {\n        const p = new ControllerPromise(Promise.resolve(1), getWaitFunction(() => getArrayValueFunction(1, 0)));\n        /*OK*/\n        expect(await p).to.be.within(1, 2);\n        await expect(p).to.be.within(1, 2);\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the eventual positive case","suites":["e2e expect","Chai API methods","within"],"updatePoint":{"line":1269,"column":51,"index":48951},"line":1269,"code":"      it('should work in the eventual positive case', async () => {\n        const p = new ControllerPromise(Promise.resolve(0), getWaitFunction(() => getArrayValueFunction(0, 1)));\n        /*OK*/\n        expect(await p).to.equal(0);\n        await expect(p).to.be.within(1, 2);\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the immediate negative case","suites":["e2e expect","Chai API methods","within"],"updatePoint":{"line":1275,"column":52,"index":49239},"line":1275,"code":"      it('should work in the immediate negative case', async () => {\n        const p = new ControllerPromise(Promise.resolve(0), getWaitFunction(() => getArrayValueFunction(0, 1)));\n        /*OK*/\n        expect(await p).to.not.be.within(1, 2);\n        await expect(p).to.not.be.within(1, 2);\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should work in the eventual negative case","suites":["e2e expect","Chai API methods","within"],"updatePoint":{"line":1281,"column":51,"index":49541},"line":1281,"code":"      it('should work in the eventual negative case', async () => {\n        const p = new ControllerPromise(Promise.resolve(1), getWaitFunction(() => getArrayValueFunction(1, 0)));\n        /*OK*/\n        expect(await p).to.be.within(1, 2);\n        await expect(p).to.not.be.within(1, 2);\n      });","file":"e2e/test-expect.js","skipped":false,"dir":"test"},{"name":"should show the body in image test","suites":[],"updatePoint":{"line":10,"column":40,"index":480},"line":10,"code":"  it('should show the body in image test', async () => {\n    await expectBodyToBecomeVisible(fixture.win, timeout);\n  });","file":"integration/builtins/test-amp-img.js","skipped":false,"dir":"test"},{"name":"should be present","suites":[],"updatePoint":{"line":13,"column":23,"index":585},"line":13,"code":"  it('should be present', async () => {\n    expect(fixture.doc.querySelectorAll('amp-img')).to.have.length(16);\n    // 5 image visible in 500 pixel height. Note that there will be no load\n    // event for the inabox image.\n    await fixture.awaitEvent(AmpEvents_Enum.LOAD_START, 3);\n    expect(fixture.doc.querySelectorAll('amp-img img[src]')).to.have.length(4);\n  });","file":"integration/builtins/test-amp-img.js","skipped":false,"dir":"test"},{"name":"should resize and load more elements","suites":[],"updatePoint":{"line":20,"column":42,"index":973},"line":20,"code":"  it('should resize and load more elements', async () => {\n    // Note that there will be no load event for the inabox image.\n    fixture.iframe.height = 1500;\n    fixture.win.dispatchEvent(createCustomEvent(fixture.win, 'resize', null));\n    await fixture.awaitEvent(AmpEvents_Enum.LOAD_START, 11);\n    expect(fixture.doc.querySelectorAll('amp-img img[src]')).to.have.length(12);\n    fixture.iframe.height = 2000;\n    fixture.win.dispatchEvent(createCustomEvent(fixture.win, 'resize', null));\n    await fixture.awaitEvent(AmpEvents_Enum.LOAD_START, 13);\n    expect(fixture.doc.querySelectorAll('amp-img img[src]')).to.have.length(14);\n  });","file":"integration/builtins/test-amp-img.js","skipped":false,"dir":"test"},{"name":"should respect media queries","suites":[],"updatePoint":{"line":31,"column":34,"index":1607},"line":31,"code":"  it('should respect media queries', async () => {\n    await fixture.awaitEvent(AmpEvents_Enum.LOAD_START, 3);\n    await new Promise(res => setTimeout(res, 1));\n    const smallScreen = fixture.doc.getElementById('img3');\n    const largeScreen = fixture.doc.getElementById('img3_1');\n    expect(smallScreen.className).to.not.match(/i-amphtml-hidden-by-media-query/);\n    expect(largeScreen.className).to.match(/i-amphtml-hidden-by-media-query/);\n    expect(smallScreen.offsetHeight).to.not.equal(0);\n    expect(largeScreen.offsetHeight).to.equal(0);\n    expect(smallScreen.querySelector('img')).to.exist;\n    expect(largeScreen.querySelector('img')).to.not.exist;\n    fixture.iframe.width = 600;\n    fixture.win.dispatchEvent(createCustomEvent(fixture.win, 'resize', null));\n    await largeScreen.whenLoaded();\n    expect(smallScreen.className).to.match(/i-amphtml-hidden-by-media-query/);\n    expect(largeScreen.className).to.not.match(/i-amphtml-hidden-by-media-query/);\n    expect(smallScreen.offsetHeight).to.equal(0);\n    expect(largeScreen.offsetHeight).to.not.equal(0);\n    expect(largeScreen.querySelector('img')).to.exist;\n  });","file":"integration/builtins/test-amp-img.js","skipped":false,"dir":"test"},{"name":"should not load image if already present (inabox)","suites":[],"updatePoint":{"line":51,"column":55,"index":2765},"line":51,"code":"  it('should not load image if already present (inabox)', async () => {\n    await fixture.awaitEvent(AmpEvents_Enum.LOAD_START, 3);\n    const ampImage = fixture.doc.getElementById('img8');\n    expect(ampImage).is.ok;\n    expect(ampImage.querySelectorAll('img').length).to.equal(1);\n  });","file":"integration/builtins/test-amp-img.js","skipped":false,"dir":"test"},{"name":"should expand the TITLE macro","suites":[],"updatePoint":{"line":19,"column":37,"index":695},"line":19,"code":"    it('should expand the TITLE macro', () => {\n      return RequestBank.withdraw().then(req => {\n        expect(req.url).to.equal('/hello-world?title=AMP%20TEST&qp=123');\n        expect(req.headers.host).to.be.ok;\n      });\n    });","file":"integration/builtins/test-amp-pixel.js","skipped":false,"dir":"test"},{"name":"should ignore leading spaces and resolve correctly","suites":[],"updatePoint":{"line":39,"column":58,"index":1391},"line":39,"code":"    it('should ignore leading spaces and resolve correctly', () => {\n      return RequestBank.withdraw().then(req => {\n        expect(req.url).to.equal('/?nested=1.1234');\n        expect(req.headers.host).to.be.ok;\n      });\n    });","file":"integration/builtins/test-amp-pixel.js","skipped":false,"dir":"test"},{"name":"should keep referrer if no referrerpolicy specified","suites":[],"updatePoint":{"line":56,"column":59,"index":1971},"line":56,"code":"    it('should keep referrer if no referrerpolicy specified', () => {\n      return RequestBank.withdraw().then(req => {\n        expect(req.url).to.equal('/');\n        expect(req.headers.referer).to.be.ok;\n      });\n    });","file":"integration/builtins/test-amp-pixel.js","skipped":false,"dir":"test"},{"name":"should remove referrer if referrerpolicy=no-referrer","suites":[],"updatePoint":{"line":74,"column":60,"index":2586},"line":74,"code":"    it('should remove referrer if referrerpolicy=no-referrer', () => {\n      return RequestBank.withdraw().then(req => {\n        expect(req.url).to.equal('/');\n        expect(req.headers.referer).to.not.be.ok;\n      });\n    });","file":"integration/builtins/test-amp-pixel.js","skipped":false,"dir":"test"},{"name":"should not write image","suites":[],"updatePoint":{"line":85,"column":28,"index":2867},"line":85,"code":"  it('should not write image', () => {\n    const src = 'https://foo.com/tracker/foo';\n    const pixelElem = createElementWithAttributes(env.win.document, 'amp-pixel', {\n      src,\n      'i-amphtml-ssr': ''\n    });\n    pixelElem.appendChild(createElementWithAttributes(env.win.document, 'img', {\n      src\n    }));\n    env.win.document.body.appendChild(pixelElem);\n    env.sandbox.stub(env.ampdoc, 'whenFirstVisible').returns(Promise.resolve());\n    const pixel = new AmpPixel(pixelElem);\n    pixel.buildCallback();\n    expect(pixelElem.querySelectorAll('img').length).to.equal(1);\n  });","file":"integration/builtins/test-amp-pixel.js","skipped":false,"dir":"test"},{"name":"should load remote nameframe and succeed w/ valid JSON","suites":[],"updatePoint":{"line":17,"column":64,"index":571},"line":17,"code":"      it('should load remote nameframe and succeed w/ valid JSON', () => {\n        let messageContent;\n        iframe.name = JSON.stringify({\n          creative: `<html>\n                    <body>\n                      <script>\n                        window.parent.postMessage(\n                                {type: 'creative rendered'}, '*');\n                      </script>\n                    </body>\n                    </html>`\n        });\n        doc.body.appendChild(iframe);\n        return new Promise(resolve => {\n          win.addEventListener('message', content => {\n            messageContent = content;\n            resolve();\n          });\n        }).then(() => {\n          expect(messageContent.data.type).to.equal('creative rendered');\n        });\n      });","file":"integration/test-3p-nameframe.js","skipped":false,"dir":"test"},{"name":"should fail if JSON is not paresable","suites":[],"updatePoint":{"line":39,"column":46,"index":1328},"line":39,"code":"      it('should fail if JSON is not paresable', done => {\n        iframe.name = 'not valid JSON';\n        expectNoContent(win, done);\n        doc.body.appendChild(iframe);\n      });","file":"integration/test-3p-nameframe.js","skipped":false,"dir":"test"},{"name":"should fail if JSON is valid, but missing creative field","suites":[],"updatePoint":{"line":44,"column":66,"index":1531},"line":44,"code":"      it('should fail if JSON is valid, but missing creative field', done => {\n        iframe.name = JSON.stringify({\n          fnord: 'some meaningless data'\n        });\n        expectNoContent(win, done);\n        doc.body.appendChild(iframe);\n      });","file":"integration/test-3p-nameframe.js","skipped":false,"dir":"test"},{"name":"should fail if JSON is missing altogether","suites":[],"updatePoint":{"line":51,"column":51,"index":1771},"line":51,"code":"      it('should fail if JSON is missing altogether', done => {\n        iframe.name = null;\n        expectNoContent(win, done);\n        doc.body.appendChild(iframe);\n      });","file":"integration/test-3p-nameframe.js","skipped":false,"dir":"test"},{"name":"<non-AMP element>.toggleVisibility","suites":["\"tap\" event"],"updatePoint":{"line":28,"column":42,"index":1177},"line":28,"code":"    it('<non-AMP element>.toggleVisibility', async () => {\n      doc.getElementById('hideBtn').click();\n      await waitForDisplayChange('#spanToHide hidden', 'spanToHide', 'none');\n    });","file":"integration/test-actions.js","skipped":false,"dir":"test"},{"name":"<AMP element>.toggleVisibility","suites":["\"tap\" event"],"updatePoint":{"line":32,"column":38,"index":1363},"line":32,"code":"    it('<AMP element>.toggleVisibility', async () => {\n      const toggleBtn = doc.getElementById('toggleBtn');\n      toggleBtn.click();\n      await waitForDisplayChange('#imgToToggle hidden', 'imgToToggle', 'none');\n      toggleBtn.click();\n      await waitForDisplayChange('#imgToToggle displayed', 'imgToToggle', 'inline-block');\n    });","file":"integration/test-actions.js","skipped":false,"dir":"test"},{"name":"AMP.navigateTo(url=)","suites":["\"tap\" event"],"updatePoint":{"line":40,"column":30,"index":1780},"line":40,"code":"      it('AMP.navigateTo(url=)', async () => {\n        // This is brittle but I don't know how else to stub\n        // window navigation.\n        const navigationService = win.__AMP_SERVICES.navigation.obj;\n        const navigateTo = env.sandbox.stub(navigationService, 'navigateTo');\n        doc.getElementById('navigateBtn').click();\n        await poll('navigateTo() called with correct args', () => navigateTo.calledWith(win, 'https://google.com'));\n      });","file":"integration/test-actions.js","skipped":false,"dir":"test"},{"name":"AMP.print()","suites":["\"tap\" event"],"updatePoint":{"line":49,"column":19,"index":2240},"line":49,"code":"    it('AMP.print()', async () => {\n      const print = env.sandbox.stub(win, 'print');\n      doc.getElementById('printBtn').click();\n      await poll('print() called once', () => print.calledOnce);\n    });","file":"integration/test-actions.js","skipped":false,"dir":"test"},{"name":"create an iframe with APIs","suites":[],"updatePoint":{"line":18,"column":32,"index":645},"line":18,"code":"  it('create an iframe with APIs', async function () {\n    this.timeout(20000);\n    let iframe;\n    let lastIO = null;\n    const platform = Services.platformFor(fixture.win);\n    return poll('frame to be in DOM and context is available', () => {\n      iframe = fixture.doc.querySelector('amp-ad > iframe');\n      if (iframe) {\n        return iframe.contentWindow.context;\n      }\n    }, undefined, 5000).then(context => {\n      expect(context.canary).to.be.a('boolean');\n      expect(context.canonicalUrl).to.equal('https://www.example.com/doubleclick.html');\n      expect(context.clientId).to.match(/amp-[a-zA-Z0-9\\-_.]{22,24}/);\n      expect(context.container).to.equal('AMP-LIGHTBOX');\n      expect(context.data).to.deep.equal({\n        width: 300,\n        height: 250,\n        type: '_ping_',\n        ampSlotIndex: '0',\n        id: '0',\n        url: 'https://example.com/a?b=c&d=e',\n        valid: 'true',\n        customValue: '123',\n        'other_value': 'foo',\n        htmlAccessAllowed: ''\n      });\n\n      // make sure the context.data is the same instance as the data param\n      // passed into the vendor function. see #10628\n      expect(context.data).to.equal(iframe.contentWindow.networkIntegrationDataParamForTesting);\n      expect(context.domFingerprint).to.be.ok;\n      expect(context.hidden).to.be.false;\n      expect(context.initialLayoutRect).to.deep.equal({\n        height: 250,\n        left: 0,\n        top: platform.isIos() ? 1001 : 1000,\n        // the iOS 1px trick\n        width: 300\n      });\n      const {\n        initialIntersection\n      } = context;\n      expect(initialIntersection.rootBounds).to.deep.equal(layoutRectLtwh(0, 0, 500, IFRAME_HEIGHT));\n      expect(initialIntersection.boundingClientRect).to.deep.equal(layoutRectLtwh(0, platform.isIos() ? 1001 : 1000, 300, 250));\n      expect(context.isMaster).to.exist;\n      expect(context.computeInMasterFrame).to.exist;\n      expect(context.location).to.deep.include({\n        hash: '',\n        host: 'localhost:9876',\n        hostname: 'localhost',\n        href: 'http://localhost:9876/context.html',\n        origin: 'http://localhost:9876',\n        pathname: '/context.html',\n        port: '9876',\n        protocol: 'http:',\n        search: ''\n      });\n      expect(parseInt(context.pageViewId, 10)).to.be.greaterThan(0);\n      // In some browsers the referrer is empty.\n      if (context.referrer !== '') {\n        expect(context.referrer).to.contain('http://localhost:' + location.port);\n      }\n      expect(context.startTime).to.be.a('number');\n      // Edge/IE has different opinion about window.location in srcdoc iframe.\n      // Nevertheless this only happens in test. In real world AMP will not\n      // in srcdoc iframe.\n      expect(context.sourceUrl).to.equal(platform.isEdge() ? 'http://localhost:9876/context.html' : 'about:srcdoc');\n      expect(context.tagName).to.equal('AMP-AD');\n      expect(context.addContextToIframe).to.be.a('function');\n      expect(context.getHtml).to.be.a('function');\n      expect(context.noContentAvailable).to.be.a('function');\n      expect(context.renderStart).to.be.a('function');\n      expect(context.reportRenderedEntityIdentifier).to.be.a('function');\n      expect(context.requestResize).to.be.a('function');\n      expect(context.report3pError).to.be.a('function');\n      expect(context.computeInMasterFrame).to.be.a('function');\n    }).then(() => {\n      // test iframe will send out render-start to amp-ad\n      return poll('render-start message received', () => {\n        return !!fixture.messages.getFirstMessageEventOfType('render-start');\n      });\n    }).then(() => {\n      // test amp-ad will respond to render-start\n      return poll('wait for visibility style to change', () => {\n        return iframe.style.visibility == '';\n      });\n    }).then(() => {\n      expect(iframe.offsetHeight).to.equal(250);\n      expect(iframe.offsetWidth).to.equal(300);\n      return iframe.contentWindow.context.requestResize(200, 50).catch(() => {});\n    }).then(() => {\n      // The userActivation feature is known to be available on Chrome 74+\n      if (platform.isChrome() && platform.getMajorVersion() >= 74) {\n        const event = fixture.messages.getFirstMessageEventOfType('embed-size');\n        expect(event.userActivation).to.be.ok;\n        expect(event.userActivation.isActive).to.be.a('boolean');\n      }\n    }).then(async function () {\n      lastIO = null;\n      // Ad is fully visible\n      iframe.contentWindow.context.observeIntersection(changes => {\n        lastIO = changes[changes.length - 1];\n      });\n      await poll('wait for initial IO entry', () => {\n        return lastIO != null && lastIO.boundingClientRect.top == 1000;\n      });\n      await new Promise(resolve => {\n        setTimeout(resolve, 110);\n      });\n      lastIO = null;\n\n      // Ad is still fully visible. observeIntersection fire when\n      // ads is fully visible with position change\n      fixture.win.scrollTo(0, 1000);\n      fixture.win.dispatchEvent(createCustomEvent(fixture.win, 'scroll', null));\n      await poll('wait for new IO entry when ad is fully visible', () => {\n        return lastIO != null && lastIO.boundingClientRect.top == (platform.isIos() ? 1 : 0) && lastIO.intersectionRatio == 1;\n      });\n      await new Promise(resolve => {\n        setTimeout(resolve, 110);\n      });\n      lastIO = null;\n\n      // Ad is partially visible (around 50%)\n      fixture.win.scrollTo(0, 1125);\n      fixture.win.dispatchEvent(createCustomEvent(fixture.win, 'scroll', null));\n      await poll('wait for new IO entry when intersectionRatio changes', () => {\n        return lastIO != null && lastIO.intersectionRatio > 0 && lastIO.intersectionRatio < 1;\n      });\n      await new Promise(resolve => {\n        setTimeout(resolve, 110);\n      });\n      lastIO = null;\n\n      // Ad first becomes invisible\n      fixture.win.scrollTo(0, 1251);\n      fixture.win.dispatchEvent(createCustomEvent(fixture.win, 'scroll', null));\n      await poll('wait for new IO entry when ad exit viewport', () => {\n        return lastIO != null && lastIO.intersectionRatio == 0;\n      });\n      await new Promise(resolve => {\n        setTimeout(resolve, 110);\n      });\n      lastIO = null;\n\n      // Scroll when ad is invisible\n      fixture.win.scrollTo(0, 1451);\n      fixture.win.dispatchEvent(createCustomEvent(fixture.win, 'scroll', null));\n      await new Promise(resolve => {\n        setTimeout(resolve, 100);\n      });\n      expect(lastIO).to.be.null;\n    }).then(() => new Promise((resolve, reject) => {\n      iframe.contentWindow.context.getHtml('a', ['href'], content => {\n        if (content == '<a href=\"http://test.com/test\">Test link</a>') {\n          resolve();\n        } else {\n          reject(new Error('Invalid getHtml result: ' + content));\n        }\n      });\n    }));\n  });","file":"integration/test-amp-ad-3p.js","skipped":false,"dir":"test"},{"name":"should create an iframe loaded","suites":[],"line":28,"code":"  it.skip('should create an iframe loaded', function () {","file":"integration/test-amp-ad-doubleclick.js","skipped":true,"dir":"test"},{"name":"should render template","suites":[],"line":56,"code":"  it.skip('should render template', () => {","file":"integration/test-amp-ad-type-custom.js","skipped":true,"dir":"test"},{"name":"should send request","suites":[],"updatePoint":{"line":52,"column":27,"index":1674},"line":52,"code":"    it('should send request', () => {\n      return RequestBank.withdraw().then(req => {\n        const q = parseQueryString(req.url.substr(1));\n        expect(q['a']).to.equal('2');\n        expect(q['b']).to.equal('AMP TEST');\n        expect(q['cid']).to.equal('amp-12345');\n        expect(q['loadend']).to.not.equal('0');\n        expect(q['default']).to.equal('test');\n        // cookie set via http response header when requesting\n        // localhost:9876/amp4test/compose-doc\n        expect(q['cookie']).to.equal('test');\n        if (window.PerformancePaintTiming) {\n          expect(q['fcp']).to.not.be.null;\n        }\n        expect(q['fvr']).to.not.be.null;\n        expect(q['mbv']).to.not.be.null;\n        expect(req.headers.referer, 'should keep referrer if no referrerpolicy specified').to.be.ok;\n      });\n    });","file":"integration/test-amp-analytics.js","skipped":false,"dir":"test"},{"name":"should send request","suites":[],"updatePoint":{"line":119,"column":27,"index":3920},"line":119,"code":"    it('should send request', () => {\n      return RequestBank.withdraw().then(req => {\n        const q = parseQueryString(req.url.substr(1));\n        expect(q['a']).to.equal('2');\n        expect(q['b']).to.equal('AMP TEST');\n        expect(q['cid']).to.equal('amp-12345');\n        expect(q['loadend']).to.not.equal('0');\n        expect(q['default']).to.equal('test');\n        // cookie set via http response header when requesting\n        // localhost:9876/amp4test/compose-doc\n        expect(q['cookie']).to.equal('test');\n        if (window.PerformancePaintTiming) {\n          expect(q['fcp']).to.not.be.null;\n        }\n        expect(q['fvr']).to.not.be.null;\n        expect(q['mbv']).to.not.be.null;\n        expect(req.headers.referer, 'should keep referrer if no referrerpolicy specified').to.be.ok;\n      });\n    });","file":"integration/test-amp-analytics.js","skipped":false,"dir":"test"},{"name":"should send request","suites":[],"updatePoint":{"line":180,"column":27,"index":5772},"line":180,"code":"    it('should send request', () => {\n      const reqPromise = RequestBank.withdraw().then(req => {\n        expect(req.url).to.equal('/?f=hello%20world&b=2');\n      });\n      browser.click('a');\n      return reqPromise;\n    });","file":"integration/test-amp-analytics.js","skipped":false,"dir":"test"},{"name":"should trigger on scroll","suites":[],"updatePoint":{"line":229,"column":32,"index":7135},"line":229,"code":"    it('should trigger on scroll', () => {\n      const reqPromise = RequestBank.withdraw().then(req => {\n        expect(req.url).to.equal('/?scrollTop=75&scrollHeight=300');\n      });\n      // verticalBoundaries is set to 70%\n      // (windowHeight + scrollTop) / scrollHeight = (150 + 75) / 300 = 75%\n      // so scrolling 75px guarantees a triggering\n      browser.scrollTo(75);\n      return reqPromise;\n    });","file":"integration/test-amp-analytics.js","skipped":false,"dir":"test"},{"name":"should trigger when image being 50% visible for 0.5s","suites":[],"updatePoint":{"line":285,"column":60,"index":8995},"line":285,"code":"    it('should trigger when image being 50% visible for 0.5s', () => {\n      let scrollTime = Infinity;\n      const reqPromise = RequestBank.withdraw().then(req => {\n        const q = parseQueryString(req.url.substr(1));\n        expect(Date.now()).to.be.not.below(scrollTime + 500);\n        expect(parseInt(q['timestamp'], 10)).to.be.not.below(scrollTime + 500);\n        expect(q['loadTimeVisibility']).to.equal('0');\n        expect(parseFloat(q['maxVisiblePercentage'])).to.be.above(50);\n        expect(parseFloat(q['totalVisibleTime'])).to.be.not.below(500);\n      });\n      browser.wait(1000) // wait for amp-analytics to start so loadTimeVisibility=0\n      .then(() => browser.scrollTo(50)) // image 50/150 visible\n      .then(() => browser.wait(1000)) // wait for a 1s to make sure no trigger\n      .then(() => {\n        scrollTime = Date.now();\n        browser.scrollTo(80); // image 80/150 visible\n        // keep visible for 0.5s to fire a ping\n      });\n\n      return reqPromise;\n    });","file":"integration/test-amp-analytics.js","skipped":false,"dir":"test"},{"name":"should trigger 1s after amp-analytics starts","suites":[],"updatePoint":{"line":344,"column":52,"index":11012},"line":344,"code":"    it('should trigger 1s after amp-analytics starts', () => {\n      const startTime = Date.now();\n      return RequestBank.withdraw().then(req => {\n        const q = parseQueryString(req.url.substr(1));\n        const timerStart = parseFloat(q['timerStart']);\n        expect(timerStart + 1000).to.be.at.most(Date.now());\n        expect(timerStart + 1000).to.be.at.most(parseInt(q['timestamp'], 10));\n        // Verify that timerStart is about current time\n        expect(timerStart - startTime).to.be.above(-1000).and.below(1000);\n        expect(parseFloat(q['timerDuration'])).to.be.at.least(950).below(1100);\n      });\n    });","file":"integration/test-amp-analytics.js","skipped":false,"dir":"test"},{"name":"should assign new cid","suites":[],"updatePoint":{"line":405,"column":29,"index":12959},"line":405,"code":"    it('should assign new cid', () => {\n      return Promise.all([RequestBank.withdraw(1), RequestBank.withdraw(2)]).then(reqs => {\n        const req1 = reqs[0];\n        const req2 = reqs[1];\n        expect(req1.url).to.match(/^\\/\\?cid=/);\n        expect(req2.url).to.match(/^\\/\\?cid=/);\n        const cid1 = req1.url.substr('/?cid='.length);\n        const cid2 = req2.url.substr('/?cid='.length);\n        expect(cid1).to.match(/^amp-/);\n        expect(cid2).to.equal(cid1);\n        expect(document.cookie).to.contain('_cid=' + cid1);\n      });\n    });","file":"integration/test-amp-analytics.js","skipped":false,"dir":"test"},{"name":"should send request in batch","suites":[],"updatePoint":{"line":463,"column":36,"index":14677},"line":463,"code":"    it('should send request in batch', () => {\n      return RequestBank.withdraw().then(req => {\n        expect(req.url).to.equal('/?a=1&b=AMP%20TEST&a=1&b=AMP%20TEST');\n      });\n    });","file":"integration/test-amp-analytics.js","skipped":false,"dir":"test"},{"name":"should send request use POST body payload","suites":[],"updatePoint":{"line":523,"column":49,"index":16322},"line":523,"code":"    it('should send request use POST body payload', () => {\n      return RequestBank.withdraw().then(req => {\n        expect(req.url).to.equal('/');\n        expect(JSON.parse(req.body)).to.deep.equal({\n          a: 2,\n          b: 'AMP TEST',\n          c: {\n            d: 'AMP TEST',\n            e: {\n              f: ['AMP TEST', 'AMP TEST']\n            }\n          },\n          g: ['AMP TEST', 'AMP TEST'],\n          '_c_a': 1,\n          '_c_b': {\n            'context.c': 'AMP TEST',\n            'context.d': {\n              'context.e': ['AMP TEST', 'AMP TEST']\n            }\n          }\n        });\n      });\n    });","file":"integration/test-amp-analytics.js","skipped":false,"dir":"test"},{"name":"should send batch request use POST body payload","suites":[],"updatePoint":{"line":592,"column":55,"index":18146},"line":592,"code":"    it('should send batch request use POST body payload', () => {\n      return RequestBank.withdraw().then(req => {\n        expect(req.url).to.equal('/');\n        expect(JSON.parse(req.body)).to.deep.equal([{\n          a: 1,\n          b: 'AMP TEST'\n        }, {\n          a: 1,\n          b: 'AMP TEST'\n        }]);\n      });\n    });","file":"integration/test-amp-analytics.js","skipped":false,"dir":"test"},{"name":"should remove referrer if referrerpolicy=no-referrer","suites":[],"updatePoint":{"line":633,"column":60,"index":19269},"line":633,"code":"    it('should remove referrer if referrerpolicy=no-referrer', () => {\n      return RequestBank.withdraw().then(req => {\n        expect(req.url).to.equal('/');\n        expect(req.headers.referer).to.not.be.ok;\n      });\n    });","file":"integration/test-amp-analytics.js","skipped":false,"dir":"test"},{"name":"should use config from server","suites":[],"updatePoint":{"line":666,"column":37,"index":20195},"line":666,"code":"    it('should use config from server', () => {\n      return RequestBank.withdraw().then(req => {\n        // The config here should have been rewritten by the /analytics/rewriter\n        // endpoint. This logic is located in the file\n        // /build-system/routes/analytics.js\n        const body = JSON.parse(req.body);\n        expect(body.reqBody.configRewriter.vars).to.deep.equal({\n          name: 'cats',\n          title: 'AMP TEST',\n          title2: 'AMP TEST'\n        });\n        expect(body.rewritten).to.be.true;\n        expect(body.testId).to.equal(12358);\n      });\n    });","file":"integration/test-amp-analytics.js","skipped":false,"dir":"test"},{"name":"should use config from server","suites":[],"updatePoint":{"line":701,"column":37,"index":21354},"line":701,"code":"    it('should use config from server', () => {\n      return RequestBank.withdraw().then(req => {\n        // The config here should have been rewritten by the /analytics/rewriter\n        // endpoint. This logic is located in the file\n        // /build-system/routes/analytics.js\n        const body = JSON.parse(req.body);\n        expect(body.reqBody.configRewriter.vars).to.deep.equal({\n          title2: 'AMP TEST'\n        });\n        expect(body.rewritten).to.be.true;\n        expect(body.testId).to.equal(12358);\n      });\n    });","file":"integration/test-amp-analytics.js","skipped":false,"dir":"test"},{"name":"should send request","suites":[],"updatePoint":{"line":756,"column":27,"index":23053},"line":756,"code":"    it('should send request', () => {\n      return RequestBank.withdraw().then(req => {\n        expect(req.url).to.match(/^\\/r\\/collect\\?/);\n        const queries = parseQueryString(req.url.substr('/r/collect'.length));\n        // see vendors/googleanalytics.js \"pageview\" request for config\n        expect(queries).to.include({\n          _v: 'a1',\n          _r: '1',\n          v: '1',\n          cid: '1427830804.1524174812',\n          dr: '',\n          ds: 'AMP',\n          dt: 'AMP TEST',\n          tid: 'UA-67833617-1',\n          t: 'pageview'\n        });\n        const isNumber = /^\\d+$/;\n        const isRandomNumber = /^0\\.\\d+$/;\n        expect(queries['dl']).to.contain('/amp4test/compose-doc?'); // ${documentLocation}\n        expect(queries['_s']).to.match(isNumber); // ${requestCount}\n        expect(queries['_utmht']).to.match(isNumber); // ${timestamp}\n        expect(queries['sr']).to.match(/^\\d+x\\d+$/); // ${screenWidth}x${screenHeight}\n        expect(queries['sd']).to.match(isNumber); // ${screenColorDepth}\n        expect(queries['ul']).to.be.ok; // ${browserLanguage}\n        expect(queries['de']).to.be.ok; // ${documentCharset}\n        expect(queries['jid']).to.match(isRandomNumber); // ${random}\n        expect(queries['a']).to.match(isNumber); // ${pageViewId}\n        expect(queries['z']).to.match(isRandomNumber); // ${random}\n      });\n    });","file":"integration/test-amp-analytics.js","skipped":false,"dir":"test"},{"name":"should send request","suites":["amp-analytics:shadow mode"],"updatePoint":{"line":821,"column":29,"index":25484},"line":821,"code":"      it('should send request', () => {\n        return RequestBank.withdraw().then(req => {\n          expect(req.url).to.match(/\\/?a=2&b=Shadow%20Viewer&cid=amp-.*/);\n          expect(req.headers.referer, 'should keep referrer if no referrerpolicy specified').to.be.ok;\n        });\n      });","file":"integration/test-amp-analytics.js","skipped":false,"dir":"test"},{"name":"[text]","suites":[],"updatePoint":{"line":27,"column":14,"index":898},"line":27,"code":"    it('[text]', function* () {\n      expect(text.textContent).to.equal('before_text');\n      yield browser.wait(200);\n      browser.click('#changeText');\n      yield poll('[text]', () => text.textContent === 'after_text');\n    });","file":"integration/test-amp-bind.js","skipped":false,"dir":"test"},{"name":"[class]","suites":[],"updatePoint":{"line":33,"column":15,"index":1131},"line":33,"code":"    it('[class]', function* () {\n      expect(text.className).to.equal('before_class');\n      yield browser.wait(200);\n      browser.click('#changeClass');\n      yield poll('[class]', () => text.className === 'after_class');\n    });","file":"integration/test-amp-bind.js","skipped":false,"dir":"test"},{"name":"[src] with valid URL","suites":[],"updatePoint":{"line":59,"column":28,"index":2075},"line":59,"code":"    it('[src] with valid URL', () => {\n      const button = doc.getElementById('changeSrc');\n      expect(img.getAttribute('src')).to.equal('http://example.com/before.jpg');\n      button.click();\n      return poll('[src]', () => img.getAttribute('src') === 'http://example.com/after.jpg');\n    });","file":"integration/test-amp-bind.js","skipped":false,"dir":"test"},{"name":"[alt]","suites":[],"updatePoint":{"line":65,"column":13,"index":2358},"line":65,"code":"    it('[alt]', () => {\n      const button = doc.getElementById('changeAlt');\n      expect(img.getAttribute('alt')).to.equal('before_alt');\n      button.click();\n      return poll('[src]', () => img.getAttribute('alt') === 'after_alt');\n    });","file":"integration/test-amp-bind.js","skipped":false,"dir":"test"},{"name":"[width] and [height]","suites":[],"updatePoint":{"line":71,"column":28,"index":2618},"line":71,"code":"    it('[width] and [height]', () => {\n      const button = doc.getElementById('changeSize');\n      expect(img.getAttribute('width')).to.equal('1');\n      expect(img.getAttribute('height')).to.equal('1');\n      button.click();\n      return Promise.all([poll('[width]', () => img.getAttribute('width') === '2'), poll('[height]', () => img.getAttribute('height') === '2')]);\n    });","file":"integration/test-amp-bind.js","skipped":false,"dir":"test"},{"name":"input[type=range] on:change","suites":[],"updatePoint":{"line":97,"column":35,"index":3875},"line":97,"code":"    it('input[type=range] on:change', () => {\n      const rangeText = doc.getElementById('range');\n      const range = doc.querySelector('input[type=\"range\"]');\n      expect(rangeText.textContent).to.equal('before_range');\n      // Calling #click() on the range element will not generate a change event,\n      // so it must be generated manually.\n      range.value = 47;\n      range.dispatchEvent(new Event('change', {\n        bubbles: true\n      }));\n      poll('[text]', () => rangeText.textContent === '0 <= 47 <= 100');\n    });","file":"integration/test-amp-bind.js","skipped":false,"dir":"test"},{"name":"input[type=checkbox] on:change","suites":[],"updatePoint":{"line":109,"column":38,"index":4410},"line":109,"code":"    it('input[type=checkbox] on:change', () => {\n      const checkboxText = doc.getElementById('checkbox');\n      const checkbox = doc.querySelector('input[type=\"checkbox\"]');\n      expect(checkboxText.textContent).to.equal('before_check');\n      checkbox.click();\n      poll('[text]', () => checkboxText.textContent === 'checked: true');\n    });","file":"integration/test-amp-bind.js","skipped":false,"dir":"test"},{"name":"[checked]","suites":[],"updatePoint":{"line":116,"column":17,"index":4736},"line":116,"code":"    it('[checked]', function* () {\n      const checkbox = doc.querySelector('input[type=\"checkbox\"]');\n      const button = doc.querySelector('button');\n      checkbox.click();\n      // Note that attributes are initial values, properties are current values.\n      expect(checkbox.hasAttribute('checked')).to.be.false;\n      expect(checkbox.checked).to.be.true;\n      button.click();\n      yield poll('[checked]', () => !checkbox.checked);\n      expect(checkbox.hasAttribute('checked')).to.be.false;\n      button.click();\n      yield poll('[checked]', () => checkbox.checked);\n      // amp-bind sets both the attribute and property.\n      expect(checkbox.hasAttribute('checked')).to.be.true;\n    });","file":"integration/test-amp-bind.js","skipped":false,"dir":"test"},{"name":"input[type=radio] on:change","suites":[],"updatePoint":{"line":131,"column":35,"index":5453},"line":131,"code":"    it('input[type=radio] on:change', () => {\n      const radioText = doc.getElementById('radio');\n      const radio = doc.querySelector('input[type=\"radio\"]');\n      expect(radioText.textContent).to.equal('before_radio');\n      radio.click();\n      poll('[text]', () => radioText.textContent === 'checked: true');\n    });","file":"integration/test-amp-bind.js","skipped":false,"dir":"test"},{"name":"on:slideChange","suites":[],"updatePoint":{"line":159,"column":22,"index":6633},"line":159,"code":"    it('on:slideChange', () => {\n      expect(slideText.textContent).to.equal('0');\n      const nextSlide = carousel.querySelector('div.amp-carousel-button-next');\n      nextSlide.click();\n      return poll('[slide]', () => slideText.textContent === '1');\n    });","file":"integration/test-amp-bind.js","skipped":false,"dir":"test"},{"name":"[slide]","suites":[],"updatePoint":{"line":165,"column":15,"index":6890},"line":165,"code":"    it('[slide]', function* () {\n      const slides = carousel.querySelectorAll('.i-amphtml-slide-item > amp-img');\n      const first = slides[0];\n      const second = slides[1];\n      expect(first.getAttribute('aria-hidden')).to.equal('false');\n      expect(second.getAttribute('aria-hidden')).to.be.equal('true');\n      const button = doc.getElementById('goToSlideOne');\n      button.click();\n      yield poll('[slide]', () => first.getAttribute('aria-hidden') === 'true');\n      yield poll('[slide]', () => second.getAttribute('aria-hidden') === 'false');\n    });","file":"integration/test-amp-bind.js","skipped":false,"dir":"test"},{"name":"[src]","suites":[],"updatePoint":{"line":199,"column":13,"index":8117},"line":199,"code":"    it('[src]', () => {\n      expect(list.getAttribute('src')).to.equal('/list/fruit-data/get?cors=0');\n      browser.click('button');\n      poll('[src]', () => list.getAttribute('src') === 'https://example.com/data');\n    });","file":"integration/test-amp-bind.js","skipped":false,"dir":"test"},{"name":"evaluate bindings in children","suites":[],"updatePoint":{"line":204,"column":37,"index":8368},"line":204,"code":"    it('evaluate bindings in children', function* () {\n      yield browser.waitForElementLayout('amp-list');\n      const children = list.querySelectorAll('p');\n      expect(children.length).to.equal(3);\n      children.forEach(span => {\n        expect(span.textContent).to.equal('123');\n      });\n    });","file":"integration/test-amp-bind.js","skipped":false,"dir":"test"},{"name":"on:select","suites":[],"updatePoint":{"line":241,"column":17,"index":9850},"line":241,"code":"    it('on:select', function* () {\n      expect(images[0].hasAttribute('selected')).to.be.false;\n      expect(images[1].hasAttribute('selected')).to.be.false;\n      expect(images[2].hasAttribute('selected')).to.be.false;\n      expect(selectedText.textContent).to.equal('');\n      images[1].click();\n      yield poll('[text]', () => selectedText.textContent === '1');\n      expect(images[0].hasAttribute('selected')).to.be.false;\n      expect(images[1].hasAttribute('selected')).to.be.true;\n      expect(images[2].hasAttribute('selected')).to.be.false;\n    });","file":"integration/test-amp-bind.js","skipped":false,"dir":"test"},{"name":"[selected]","suites":[],"updatePoint":{"line":252,"column":18,"index":10411},"line":252,"code":"    it('[selected]', function* () {\n      const button = doc.querySelector('button');\n      expect(images[0].hasAttribute('selected')).to.be.false;\n      expect(images[1].hasAttribute('selected')).to.be.false;\n      expect(images[2].hasAttribute('selected')).to.be.false;\n      expect(selectedText.textContent).to.equal('');\n      button.click();\n      yield poll('[text]', () => selectedText.textContent === '2');\n      expect(images[0].hasAttribute('selected')).to.be.false;\n      expect(images[1].hasAttribute('selected')).to.be.false;\n      expect(images[2].hasAttribute('selected')).to.be.true;\n    });","file":"integration/test-amp-bind.js","skipped":false,"dir":"test"},{"name":"should be present","suites":[],"updatePoint":{"line":25,"column":25,"index":1036},"line":25,"code":"    it('should be present', () => {\n      expect(document.querySelectorAll('amp-carousel')).to.have.length.above(0);\n    });","file":"integration/test-amp-carousel.js","skipped":false,"dir":"test"},{"name":"should be present","suites":[],"updatePoint":{"line":66,"column":25,"index":3126},"line":66,"code":"    it('should be present', () => {\n      expect(document.querySelectorAll('amp-carousel')).to.have.length.above(0);\n    });","file":"integration/test-amp-carousel.js","skipped":false,"dir":"test"},{"name":"should only have the next button enabled when on first item","suites":[],"updatePoint":{"line":93,"column":67,"index":4601},"line":93,"code":"    it('should only have the next button enabled when on first item', () => {\n      document.body.classList.add('amp-mode-mouse');\n      const amp = document.querySelector('#carousel-1');\n      const prevBtn = amp.querySelector('.amp-carousel-button-prev');\n      const nextBtn = amp.querySelector('.amp-carousel-button-next');\n      expect(prevBtn).to.not.be.null;\n      expect(nextBtn).to.not.be.null;\n      expect(prevBtn.classList.contains('amp-disabled')).to.be.true;\n      expect(nextBtn).to.be.visible;\n    });","file":"integration/test-amp-carousel.js","skipped":false,"dir":"test"},{"name":"should not be able to go past the first or last item","suites":[],"updatePoint":{"line":103,"column":60,"index":5112},"line":103,"code":"    it('should not be able to go past the first or last item', async () => {\n      document.body.classList.add('amp-mode-mouse');\n      const amp = document.querySelector('#carousel-1');\n      const impl = await amp.getImpl();\n      const prevBtn = amp.querySelector('.amp-carousel-button-prev');\n      const nextBtn = amp.querySelector('.amp-carousel-button-next');\n      expect(prevBtn).to.have.class('amp-disabled');\n      impl.go(-1, false);\n      expect(prevBtn).to.have.class('amp-disabled');\n      impl.go(1, false);\n      expect(prevBtn).to.not.have.class('amp-disabled');\n      impl.go(1, false);\n      impl.go(1, false);\n      expect(nextBtn).to.have.class('amp-disabled');\n      impl.go(-1, false);\n      expect(prevBtn).to.not.have.class('amp-disabled');\n      impl.go(-1, false);\n      expect(prevBtn).to.have.class('amp-disabled');\n    });","file":"integration/test-amp-carousel.js","skipped":false,"dir":"test"},{"name":"should only have the prev button enabled when on last item","suites":[],"updatePoint":{"line":122,"column":66,"index":5972},"line":122,"code":"    it('should only have the prev button enabled when on last item', async () => {\n      document.body.classList.add('amp-mode-mouse');\n      const amp = document.querySelector('#carousel-1');\n      const impl = await amp.getImpl();\n      const prevBtn = amp.querySelector('.amp-carousel-button-prev');\n      const nextBtn = amp.querySelector('.amp-carousel-button-next');\n      expect(prevBtn).to.have.class('amp-disabled');\n      expect(nextBtn).to.not.have.class('amp-disabled');\n      impl.go(1, false);\n      impl.go(1, false);\n      impl.go(1, false);\n      expect(prevBtn).to.not.have.class('amp-disabled');\n      expect(nextBtn).to.have.class('amp-disabled');\n    });","file":"integration/test-amp-carousel.js","skipped":false,"dir":"test"},{"name":"should be present","suites":[],"updatePoint":{"line":150,"column":25,"index":7074},"line":150,"code":"    it('should be present', () => {\n      expect(document.querySelectorAll('amp-carousel')).to.have.length.above(0);\n    });","file":"integration/test-amp-carousel.js","skipped":false,"dir":"test"},{"name":"should be present","suites":[],"updatePoint":{"line":191,"column":25,"index":9184},"line":191,"code":"    it('should be present', () => {\n      expect(document.querySelectorAll('amp-carousel')).to.have.length.above(0);\n    });","file":"integration/test-amp-carousel.js","skipped":false,"dir":"test"},{"name":"should only have the next button enabled when on first item","suites":[],"updatePoint":{"line":218,"column":67,"index":10655},"line":218,"code":"    it('should only have the next button enabled when on first item', () => {\n      document.body.classList.add('amp-mode-mouse');\n      const amp = document.querySelector('#carousel-1');\n      const prevBtn = amp.querySelector('.amp-carousel-button-prev');\n      const nextBtn = amp.querySelector('.amp-carousel-button-next');\n      expect(prevBtn).to.not.be.null;\n      expect(nextBtn).to.not.be.null;\n      expect(prevBtn.classList.contains('amp-disabled')).to.be.true;\n      expect(nextBtn).to.be.visible;\n    });","file":"integration/test-amp-carousel.js","skipped":false,"dir":"test"},{"name":"should only have the prev button enabled when on last item","suites":[],"updatePoint":{"line":228,"column":66,"index":11172},"line":228,"code":"    it('should only have the prev button enabled when on last item', async () => {\n      document.body.classList.add('amp-mode-mouse');\n      const amp = document.querySelector('#carousel-1');\n      const impl = await amp.getImpl();\n      const prevBtn = amp.querySelector('.amp-carousel-button-prev');\n      const nextBtn = amp.querySelector('.amp-carousel-button-next');\n      expect(prevBtn).to.have.class('amp-disabled');\n      expect(nextBtn).to.not.have.class('amp-disabled');\n      impl.go(1, false);\n      impl.go(1, false);\n      expect(prevBtn).to.not.have.class('amp-disabled');\n      expect(nextBtn).to.have.class('amp-disabled');\n    });","file":"integration/test-amp-carousel.js","skipped":false,"dir":"test"},{"name":"should be present","suites":[],"updatePoint":{"line":257,"column":25,"index":12592},"line":257,"code":"    it('should be present', () => {\n      expect(document.querySelectorAll('amp-carousel')).to.have.length.above(0);\n    });","file":"integration/test-amp-carousel.js","skipped":false,"dir":"test"},{"name":"should be able to create the bootstrap frame","suites":[],"updatePoint":{"line":99,"column":52,"index":2836},"line":99,"code":"    it('should be able to create the bootstrap frame', function () {\n      return waitForBootstrapFrameToBeCreated(doc).then(frame => {\n        expect(frame.src.includes('recaptcha')).to.be.true;\n        expect(frame.getAttribute('data-amp-3p-sentinel')).to.be.equal('amp-recaptcha');\n        expect(frame.getAttribute('name')).to.be.equal(JSON.stringify({\n          'sitekey': '6LebBGoUAAAAAHbj1oeZMBU_rze_CutlbyzpH8VE',\n          'sentinel': 'amp-recaptcha',\n          'global': false\n        }));\n      });\n    });","file":"integration/test-amp-recaptcha-input.js","skipped":false,"dir":"test"},{"name":"should load the 3p recaptcha frame","suites":[],"updatePoint":{"line":110,"column":42,"index":3344},"line":110,"code":"    it('should load the 3p recaptcha frame', function () {\n      return waitForBootstrapFrameOnLoad(doc).then(frame => {\n        expect(frame).to.be.ok;\n      });\n    });","file":"integration/test-amp-recaptcha-input.js","skipped":false,"dir":"test"},{"name":"should show submit-success on successful submit/response","suites":[],"updatePoint":{"line":122,"column":64,"index":3898},"line":122,"code":"    it('should show submit-success on successful submit/response', function () {\n      return submitForm(doc).then(() => {\n        return poll('submit-success', () => {\n          return doc.querySelector('div[id=\"submit-success\"]');\n        }, undefined, 5000);\n      });\n    });","file":"integration/test-amp-recaptcha-input.js","skipped":false,"dir":"test"},{"name":"should make a request with correct parameters","suites":[],"updatePoint":{"line":168,"column":53,"index":5393},"line":168,"code":"    it('should make a request with correct parameters', function () {\n      return submitForm(doc).then(() => {\n        return RequestBank.withdraw(recaptchaRequestId.GET).then(req => {\n          expect(req.url).to.include('term=recaptcha-search');\n          expect(req.url).to.include('recaptcha-token=recaptcha-mock');\n          expect(req.headers.host).to.be.ok;\n        });\n      });\n    });","file":"integration/test-amp-recaptcha-input.js","skipped":false,"dir":"test"},{"name":"should make a request with correct parameters","suites":[],"updatePoint":{"line":212,"column":53,"index":6923},"line":212,"code":"    it('should make a request with correct parameters', function () {\n      return submitForm(doc).then(() => {\n        return RequestBank.withdraw(recaptchaRequestId.POST).then(req => {\n          expect(req.body).to.be.ok;\n          expect(req.body.term).to.be.equal('recaptcha-search');\n          expect(req.body['recaptcha-token']).to.be.equal('recaptcha-mock');\n          expect(req.headers.host).to.be.ok;\n        });\n      });\n    });","file":"integration/test-amp-recaptcha-input.js","skipped":false,"dir":"test"},{"name":"Should send the page impression tracking request","suites":[],"updatePoint":{"line":65,"column":56,"index":2498},"line":65,"code":"    it('Should send the page impression tracking request', () => {\n      return RequestBank.withdraw('pageTrackingUrl').then(req => {\n        const regex = /^\\/track\\.php\\?data=([^&]*)&?.*$/;\n        const match = regex.exec(req.url);\n        expect(match).to.have.lengthOf(2);\n        const data = JSON.parse(decodeURIComponent(match[1]));\n        expect(data.jv).to.equal(PLATFORM_NAME);\n        expect(data.pub).to.equal('123X123');\n        // nonblocking.io is the default canonical url.\n        expect(data.pag).to.equal('http://nonblocking.io/');\n        expect(data.uuid).to.have.lengthOf(32);\n      });\n    });","file":"integration/test-amp-skimlinks.js","skipped":false,"dir":"test"},{"name":"Should send the links impression tracking request","suites":[],"updatePoint":{"line":78,"column":57,"index":3118},"line":78,"code":"    it('Should send the links impression tracking request', () => {\n      return RequestBank.withdraw('linksTrackingUrl').then(req => {\n        const regex = /^\\/link\\?data=([^&]*)&?.*$/;\n        const match = regex.exec(req.url);\n        expect(match).to.have.lengthOf(2);\n        const data = JSON.parse(decodeURIComponent(match[1]));\n        expect(data.jv).to.equal(PLATFORM_NAME);\n        expect(data.pub).to.equal('123X123');\n        // nonblocking.io is the default canonical url.\n        expect(data.pag).to.equal('http://nonblocking.io/');\n        expect(data.uuid).to.have.lengthOf(32);\n        expect(data.hae).to.equal(1);\n        expect(data.dl).to.deep.equal({\n          'https://nordstrom.com/': {\n            count: 1,\n            ae: 1\n          }\n        });\n      });\n    });","file":"integration/test-amp-skimlinks.js","skipped":false,"dir":"test"},{"name":"should send NA-tracking on non-merchant link click","suites":[],"updatePoint":{"line":98,"column":58,"index":3914},"line":98,"code":"    it('should send NA-tracking on non-merchant link click', () => {\n      // Give 500ms for amp-skimlinks to set up.\n      return browser.wait(500).then(() => {\n        clickLinkAndNavigate('#non-merchant-link');\n        return RequestBank.withdraw('nonAffiliateTrackingUrl').then(req => {\n          const regex = /^\\/\\?call=track&data=([^&]*)&?.*$/;\n          const match = regex.exec(req.url);\n          expect(match).to.have.lengthOf(2);\n          const data = JSON.parse(decodeURIComponent(match[1]));\n          expect(data.url).to.equal('https://google.com/');\n          expect(data.referrer).to.equal('http://nonblocking.io/');\n          expect(data.jv).to.equal(PLATFORM_NAME);\n          expect(data.uuid).to.have.lengthOf(32);\n          expect(data.pref).to.have.lengthOf.above(1);\n        });\n      });\n    });","file":"integration/test-amp-skimlinks.js","skipped":false,"dir":"test"},{"name":"Should send merchant links to waypoint on click","suites":[],"updatePoint":{"line":115,"column":55,"index":4732},"line":115,"code":"    it('Should send merchant links to waypoint on click', () => {\n      // Give 500ms for amp-skimlinks to set up.\n      return browser.wait(500).then(() => {\n        clickLinkAndNavigate('#merchant-link');\n        return RequestBank.withdraw('waypointUrl').then(req => {\n          // Remove \"/?\" in the url.\n          const queryString = req.url.slice(2);\n          const queryParams = parseQueryString(queryString);\n          expect(queryParams.id).to.equal('123X123');\n          expect(queryParams.jv).to.equal(PLATFORM_NAME);\n          expect(queryParams.xuuid).to.have.lengthOf(32);\n          expect(queryParams.url).to.equal('https://nordstrom.com/');\n          expect(queryParams.sref).to.equal('http://nonblocking.io/');\n          expect(queryParams.pref).to.have.lengthOf.above(1);\n          expect(queryParams.xs).to.equal('1');\n        });\n      });\n    });","file":"integration/test-amp-skimlinks.js","skipped":false,"dir":"test"},{"name":"Should send merchant links to to waypoint on click","suites":[],"updatePoint":{"line":160,"column":58,"index":6573},"line":160,"code":"    it('Should send merchant links to to waypoint on click', () => {\n      // Give 500ms for amp-skimlinks to set up.\n      return browser.wait(500).then(() => {\n        browser.click('#merchant-link');\n        const link = env.win.document.querySelector('#merchant-link');\n        const regex = /^https\\:\\/\\/go\\.skimresources\\.com\\/\\?(.*)$/;\n        const match = regex.exec(link.href);\n        expect(match).to.be.lengthOf(2);\n        const queryParams = parseQueryString(match[1]);\n        expect(queryParams.id).to.equal('123X123');\n        expect(queryParams.jv).to.equal(PLATFORM_NAME);\n        expect(queryParams.xuuid).to.have.lengthOf(32);\n        expect(queryParams.url).to.equal('https://nordstrom.com/');\n        expect(queryParams.sref).to.equal('http://nonblocking.io/');\n        expect(queryParams.pref).to.have.lengthOf.above(1);\n        expect(queryParams.xs).to.equal('1');\n      });\n    });","file":"integration/test-amp-skimlinks.js","skipped":false,"dir":"test"},{"name":"Should send unknown links to waypoint","suites":[],"updatePoint":{"line":204,"column":45,"index":8226},"line":204,"code":"    it('Should send unknown links to waypoint', () => {\n      // Give 500ms for amp-skimlinks to set up.\n      return browser.wait(500).then(() => {\n        // beacon API url has been overwritten by a deelay.me URL that will keep\n        // the request pending during 2s. When the click happens, beacon API has\n        // not come back yet with affiliated domain information and the link is\n        // still considered as unknown.\n        browser.click('#unknown-link');\n        const link = env.win.document.querySelector('#unknown-link');\n        const regex = /^https\\:\\/\\/go\\.skimresources\\.com\\/\\?(.*)$/;\n        const match = regex.exec(link.href);\n        expect(match).to.be.lengthOf(2);\n        const queryParams = parseQueryString(match[1]);\n        expect(queryParams.id).to.equal('123X123');\n        expect(queryParams.jv).to.equal(PLATFORM_NAME);\n        expect(queryParams.xuuid).to.have.lengthOf(32);\n        expect(queryParams.url).to.equal('https://google.com/');\n        expect(queryParams.sref).to.equal('http://nonblocking.io/');\n        expect(queryParams.pref).to.have.lengthOf.above(1);\n        expect(queryParams.xs).to.equal('1');\n      });\n    });","file":"integration/test-amp-skimlinks.js","skipped":false,"dir":"test"},{"name":"should send analytics event when landing on a page","suites":[],"updatePoint":{"line":101,"column":58,"index":3257},"line":101,"code":"    it('should send analytics event when landing on a page', async () => {\n      await browser.waitForElementLayout('#page-1[active]');\n      const req = await RequestBank.withdraw();\n      const q = parseQueryString(req.url.substr(1));\n      expect(q['pageVisible']).to.equal('page-1');\n    });","file":"integration/test-amp-story-analytics.js","skipped":false,"dir":"test"},{"name":"should send analytics event when navigating","suites":[],"updatePoint":{"line":107,"column":51,"index":3546},"line":107,"code":"    it('should send analytics event when navigating', async () => {\n      await browser.waitForElementLayout('#page-1[active]');\n      await clickAndWait('#right-1');\n      await browser.waitForElementLayout('#page-2[active]');\n      const req = await RequestBank.withdraw();\n      const q = parseQueryString(req.url.substr(1));\n      expect(q['pageVisible']).to.equal('page-2');\n    });","file":"integration/test-amp-story-analytics.js","skipped":false,"dir":"test"},{"name":"should send same event twice when repeat option is absent in storyspec","suites":[],"updatePoint":{"line":115,"column":78,"index":3961},"line":115,"code":"    it('should send same event twice when repeat option is absent in storyspec', async () => {\n      await browser.waitForElementLayout('#page-1[active]');\n      await clickAndWait('#right-1');\n      await browser.waitForElementLayout('#page-2[active]');\n      // Go back to page 1.\n      clickAtPosition('#left-2', 10);\n      await browser.wait(1000);\n      await browser.waitForElementLayout('#page-1[active]');\n      const req = await RequestBank.withdraw();\n      const q = parseQueryString(req.url.substr(1));\n      expect(q['pageVisible']).to.equal('page-1');\n    });","file":"integration/test-amp-story-analytics.js","skipped":false,"dir":"test"},{"name":"should send data vars attribute when specified","suites":[],"updatePoint":{"line":127,"column":54,"index":4511},"line":127,"code":"    it('should send data vars attribute when specified', async () => {\n      await browser.waitForElementLayout('#page-1[active]');\n      browser.click('#link-1');\n      await browser.wait(1000);\n      const req = await RequestBank.withdraw();\n      const q = parseQueryString(req.url.substr(1));\n      expect(q['focusedLink']).to.equal('myLink');\n    });","file":"integration/test-amp-story-analytics.js","skipped":false,"dir":"test"},{"name":"should not send same analytics event twice when repeat option is present","suites":[],"updatePoint":{"line":202,"column":80,"index":6836},"line":202,"code":"    it('should not send same analytics event twice when repeat option is present', async () => {\n      await browser.waitForElementLayout('#page-1[active]');\n      browser.click('#page-1');\n      await browser.wait(1000);\n      await browser.waitForElementLayout('#page-2[active]');\n      // Go back to page 1.\n      clickAtPosition('#left-2', 10);\n      await browser.wait(1000);\n      const req = await RequestBank.withdraw();\n      const q = parseQueryString(req.url.substr(1));\n      expect(q['pageVisible']).to.equal('page-2');\n    });","file":"integration/test-amp-story-analytics.js","skipped":false,"dir":"test"},{"name":"should layout amp-img, amp-pixel, amp-analytics","suites":[],"updatePoint":{"line":27,"column":55,"index":871},"line":27,"code":"    it('should layout amp-img, amp-pixel, amp-analytics', () => {\n      // Open http://ads.localhost:9876/amp4test/a4a/12345 to see ad content\n      return testAmpComponents();\n    });","file":"integration/test-amphtml-ads.js","skipped":false,"dir":"test"},{"name":"should layout amp-img, amp-pixel, amp-analytics","suites":[],"line":54,"code":"    it.skip('should layout amp-img, amp-pixel, amp-analytics', () => {","file":"integration/test-amphtml-ads.js","skipped":true,"dir":"test"},{"name":"should layout amp-img, amp-pixel, amp-analytics","suites":[],"updatePoint":{"line":72,"column":55,"index":2201},"line":72,"code":"    it('should layout amp-img, amp-pixel, amp-analytics', () => {\n      // See amp4test.js for creative content\n      return testAmpComponents();\n    });","file":"integration/test-amphtml-ads.js","skipped":false,"dir":"test"},{"name":"should layout amp-img, amp-pixel, amp-analytics","suites":[],"updatePoint":{"line":121,"column":55,"index":3831},"line":121,"code":"    it('should layout amp-img, amp-pixel, amp-analytics', () => {\n      // See amp4test.js for creative content\n      return testAmpComponentsBTF(env.win);\n    });","file":"integration/test-amphtml-ads.js","skipped":false,"dir":"test"},{"name":"should properly render ad in a friendly iframe with viewability pings","suites":[],"line":243,"code":"    it.skip('should properly render ad in a friendly iframe with viewability pings', () => {","file":"integration/test-amphtml-ads.js","skipped":true,"dir":"test"},{"name":"should properly render ad in a safe frame with viewability pings","suites":[],"line":249,"code":"    it.skip('should properly render ad in a safe frame with viewability pings', () => {","file":"integration/test-amphtml-ads.js","skipped":true,"dir":"test"},{"name":"should properly render ad in a friendly iframe with viewability pings","suites":[],"updatePoint":{"line":271,"column":77,"index":9511},"line":271,"code":"    it('should properly render ad in a friendly iframe with viewability pings', () => {\n      writeFriendlyFrame(doc, iframe, adBody);\n      return testVisibilityPings(0, 1000);\n    });","file":"integration/test-amphtml-ads.js","skipped":false,"dir":"test"},{"name":"should properly render ad in a friendly iframe with viewability pings","suites":[],"line":306,"code":"    it.skip('should properly render ad in a friendly iframe with viewability pings', () => {","file":"integration/test-amphtml-ads.js","skipped":true,"dir":"test"},{"name":"should properly render ad in a safe frame with viewability pings","suites":[],"line":310,"code":"    it.skip('should properly render ad in a safe frame with viewability pings', () => {","file":"integration/test-amphtml-ads.js","skipped":true,"dir":"test"},{"name":"should show the body when opacity boilerplate is used","suites":[],"updatePoint":{"line":12,"column":59,"index":527},"line":12,"code":"  it('should show the body when opacity boilerplate is used', () => {\n    return expectBodyToBecomeVisible(fixture.win, timeout).then(() => {\n      expect(getStyle(fixture.win.document.body, 'opacity')).to.equal('1');\n    });\n  });","file":"integration/test-boilerplates.js","skipped":false,"dir":"test"},{"name":"should show the body in boilerplate test","suites":[],"updatePoint":{"line":25,"column":46,"index":980},"line":25,"code":"  it('should show the body in boilerplate test', () => {\n    return expectBodyToBecomeVisible(fixture.win, timeout).then(() => {\n      expect(getStyle(fixture.win.document.body, 'visibility')).to.equal('visible');\n      expect(isAnimationNone(fixture.win.document.body, true)).to.be.true;\n    });\n  });","file":"integration/test-boilerplates.js","skipped":false,"dir":"test"},{"name":"urls should be configurable","suites":[],"updatePoint":{"line":10,"column":33,"index":358},"line":10,"code":"  it('urls should be configurable', () => {\n    expect(fixture.win.AMP_CONFIG).to.equal(undefined);\n    const config = fixture.win.AMP_CONFIG = {};\n    config.cdnUrl = 'http://foo.bar.com';\n    config.thirdPartyUrl = 'http://bar.baz.com';\n    config.thirdPartyFrameRegex = /a-website\\.com/;\n    config.errorReportingUrl = 'http://error.foo.com';\n    config.geoApiUrl = 'http://geo.bar.com';\n    return fixture.awaitEvent(AmpEvents_Enum.LOAD_START, 1).then(() => {\n      expect(fixture.win.AMP.config.urls.cdn).to.equal(config.cdnUrl);\n      expect(fixture.win.AMP.config.urls.thirdParty).to.equal(config.thirdPartyUrl);\n      expect(fixture.win.AMP.config.urls.thirdPartyFrameRegex).to.equal(config.thirdPartyFrameRegex);\n      expect(fixture.win.AMP.config.urls.errorReporting).to.equal(config.errorReportingUrl);\n      expect(fixture.win.AMP.config.urls.geoApi).to.equal(config.geoApiUrl);\n    });\n  });","file":"integration/test-configuration.js","skipped":false,"dir":"test"},{"name":"should include height of [overflow] child in size before build","suites":[],"updatePoint":{"line":5,"column":68,"index":316},"line":5,"code":"  it('should include height of [overflow] child in size before build', async () => {\n    const fixture = await createFixtureIframe('test/fixtures/overflow.html', 500);\n    // Wait until layout.js CSS is applied.\n    await fixture.awaitEvent(AmpEvents_Enum.ATTACHED, 1);\n    const {\n      doc\n    } = fixture;\n    const iframe = doc.querySelector('amp-iframe');\n    const iframeRect = iframe.getBoundingClientRect();\n    const overflow = doc.querySelector('[overflow]');\n    const overflowRect = overflow.getBoundingClientRect();\n    expect(overflowRect.height).to.be.greaterThan(0);\n    // The amp-iframe has a 1:1 aspect ratio, and its height should be\n    // incremented by the overflow's height.\n    expect(Math.abs(iframeRect.width - iframeRect.height)).to.lessThan(2);\n  });","file":"integration/test-css.js","skipped":false,"dir":"test"},{"name":"should include height of [placeholder] child in size before build","suites":[],"updatePoint":{"line":21,"column":71,"index":1099},"line":21,"code":"  it('should include height of [placeholder] child in size before build', async () => {\n    const fixture = await createFixtureIframe('test/fixtures/placeholder.html', 500);\n    // Wait until layout.js CSS is applied.\n    await expectBodyToBecomeVisible(fixture.win);\n    const {\n      doc\n    } = fixture;\n    const placeholder = doc.querySelector('[placeholder]');\n    expect(computedStyle(fixture.win, placeholder).lineHeight).to.equal('normal');\n  });","file":"integration/test-css.js","skipped":false,"dir":"test"},{"name":"should only execute module code","suites":[],"updatePoint":{"line":13,"column":37,"index":683},"line":13,"code":"  it('should only execute module code', async () => {\n    const testExtension = 'amp-carousel';\n    const fixture = await createFixtureIframe('test/fixtures/doubleload-module.html', 500);\n    expect(fixture.doc.querySelectorAll(testExtension)).to.have.length(1);\n    // Wait for a the LOAD_START event which is enough of a signal that the\n    // runtime has executed.\n    await fixture.awaitEvent(AmpEvents_Enum.LOAD_START, 1);\n    expect(fixture.doc.documentElement.getAttribute('esm')).to.equal('1');\n    checkElementUpgrade(fixture.doc.querySelector(testExtension));\n  });","file":"integration/test-double-loading.js","skipped":false,"dir":"test"},{"name":"should only execute nomodule code","suites":[],"updatePoint":{"line":23,"column":39,"index":1261},"line":23,"code":"  it('should only execute nomodule code', async () => {\n    const testExtension = 'amp-carousel';\n    const fixture = await createFixtureIframe('test/fixtures/doubleload-nomodule.html', 500);\n    expect(fixture.doc.querySelectorAll(testExtension)).to.have.length(1);\n    // Wait for a the LOAD_START event which is enough of a signal that the\n    // runtime has executed.\n    await fixture.awaitEvent(AmpEvents_Enum.LOAD_START, 1);\n    expect(fixture.doc.documentElement.getAttribute('esm')).to.equal('0');\n    checkElementUpgrade(fixture.doc.querySelector(testExtension));\n  });","file":"integration/test-double-loading.js","skipped":false,"dir":"test"},{"name":"should show the body in error test","suites":[],"updatePoint":{"line":29,"column":40,"index":1053},"line":29,"code":"  it('should show the body in error test', () => {\n    return expectBodyToBecomeVisible(fixture.win, TIMEOUT);\n  });","file":"integration/test-errors.js","skipped":false,"dir":"test"},{"name":"one extension, extension loads first, all scripts in header","suites":[],"updatePoint":{"line":40,"column":65,"index":1645},"line":40,"code":"  it('one extension, extension loads first, all scripts in header', () => {\n    return testLoadOrderFixture('test/fixtures/script-load-extension-head-v0-head.html', ['amp-fit-text']);\n  });","file":"integration/test-extensions-loading.js","skipped":false,"dir":"test"},{"name":"one extension, v0 loads first, all scripts in header","suites":[],"updatePoint":{"line":43,"column":58,"index":1828},"line":43,"code":"  it('one extension, v0 loads first, all scripts in header', () => {\n    return testLoadOrderFixture('test/fixtures/script-load-v0-head-extension-head.html', ['amp-fit-text']);\n  });","file":"integration/test-extensions-loading.js","skipped":false,"dir":"test"},{"name":"one extension, extension loads first, all scripts in footer","suites":[],"line":50,"code":"  it.skip('one extension, extension loads first, all scripts in footer', () => {","file":"integration/test-extensions-loading.js","skipped":true,"dir":"test"},{"name":"one extension, v0 loads first, all scripts in footer","suites":[],"line":57,"code":"  it.skip('one extension, v0 loads first, all scripts in footer', () => {","file":"integration/test-extensions-loading.js","skipped":true,"dir":"test"},{"name":"one extension, v0 in header, extension script in footer","suites":[],"updatePoint":{"line":60,"column":61,"index":2785},"line":60,"code":"  it('one extension, v0 in header, extension script in footer', () => {\n    return testLoadOrderFixture('test/fixtures/script-load-v0-head-extension-footer.html', ['amp-fit-text']);\n  });","file":"integration/test-extensions-loading.js","skipped":false,"dir":"test"},{"name":"two extensions, one of extension scripts and v0 in header","suites":[],"line":66,"code":"  it.skip('two extensions, one of extension scripts and v0 in header', () => {","file":"integration/test-extensions-loading.js","skipped":true,"dir":"test"},{"name":"runs animation with scroll","suites":[],"updatePoint":{"line":63,"column":34,"index":1562},"line":63,"code":"    it('runs animation with scroll', () => {\n      // Not visible yet, opacity = 0;\n      expect(getOpacity(env.win)).to.equal(0);\n\n      // Scroll bring to middle of viewport, height of target is 10\n      env.win.scrollTo(0, getViewportHeight(env.win) / 2 + 5);\n      // Half way: opacity = 0.5\n      return waitForOpacity(env.win, 'equals', 0.5).then(() => {\n        // Scroll to the end\n        env.win.scrollTo(0, getViewportHeight(env.win) * 2);\n        // All the way: opacity = 1;\n        return waitForOpacity(env.win, 'equals', 1);\n      }).then(() => {\n        // Scroll back to the top\n        env.win.scrollTo(0, 0);\n        // Back to starting position: opacity: 0\n        return waitForOpacity(env.win, 'equals', 0);\n      });\n    });","file":"integration/test-position-observer.js","skipped":false,"dir":"test"},{"name":"plays/pauses animation scene based on visibility","suites":[],"line":127,"code":"    it.skip('plays/pauses animation scene based on visibility', () => {","file":"integration/test-position-observer.js","skipped":true,"dir":"test"},{"name":"all components should get loaded","suites":["Rendering of released components"],"updatePoint":{"line":13,"column":40,"index":500},"line":13,"code":"    it('all components should get loaded', function () {\n      this.timeout(15000);\n      return pollForLayout(fixture.win, 12, 10000).then(() => {\n        expect(fixture.doc.querySelectorAll('.i-amphtml-element')).to.have.length(16);\n        expect(fixture.doc.querySelectorAll('.i-amphtml-layout')).to.have.length(12);\n        expect(fixture.doc.querySelectorAll('.i-amphtml-error')).to.have.length(0);\n        checkGlobalScope(fixture.win);\n      }).then(() => {\n        return expectBodyToBecomeVisible(fixture.win);\n      });\n    });","file":"integration/test-released.js","skipped":false,"dir":"test"},{"name":"sanity for Firefox while we skip above","suites":["Rendering of released components"],"updatePoint":{"line":24,"column":46,"index":1045},"line":24,"code":"    it('sanity for Firefox while we skip above', function () {\n      this.timeout(15000);\n      // Test this only in firefox.\n      if (!navigator.userAgent.match(/Firefox/)) {\n        return;\n      }\n      return pollForLayout(fixture.win, 11, 10000).then(() => {\n        return expectBodyToBecomeVisible(fixture.win);\n      });\n    });","file":"integration/test-released.js","skipped":false,"dir":"test"},{"name":"should attach shadow AMP document","suites":[],"updatePoint":{"line":36,"column":39,"index":1324},"line":36,"code":"  it('should attach shadow AMP document', () => {\n    return expect(shadowDoc.body.innerText).to.include('Shadow AMP document');\n  });","file":"integration/test-shadow-amp.js","skipped":false,"dir":"test"},{"name":"should layout amp-img component in shadow AMP document","suites":[],"updatePoint":{"line":39,"column":60,"index":1480},"line":39,"code":"  it('should layout amp-img component in shadow AMP document', async () => {\n    const shadowDocController = new BrowserController(env.win, shadowDoc);\n    await shadowDocController.waitForElementLayout('amp-img');\n    return expect(shadowDoc.querySelectorAll('amp-img img[src]')).to.have.length(1);\n  });","file":"integration/test-shadow-amp.js","skipped":false,"dir":"test"},{"name":"should create shadow root","suites":[],"updatePoint":{"line":10,"column":31,"index":474},"line":10,"code":"  it('should create shadow root', async () => {\n    const carousel = fixture.doc.querySelector('amp-base-carousel');\n    await whenUpgradedToCustomElement(carousel);\n    await carousel.whenBuilt();\n    await new Promise(setTimeout);\n    expect(carousel.shadowRoot).to.exist;\n    const slides = carousel.querySelectorAll('amp-img');\n    expect(slides).to.have.length(2);\n    const slots = carousel.shadowRoot.querySelector('c').querySelectorAll('slot');\n    expect(slots).to.have.length(2);\n    expect(slides[0].assignedSlot).to.equal(slots[0]);\n    expect(slides[1].assignedSlot).to.equal(slots[1]);\n    expect(slots[0].assignedNodes()[0]).to.equal(slides[0]);\n    expect(slots[1].assignedNodes()[0]).to.equal(slides[1]);\n    expect(slots[0].getRootNode()).to.equal(carousel.shadowRoot);\n  });","file":"integration/test-shadow-dom-element.js","skipped":false,"dir":"test"},{"name":"should create shadow root","suites":[],"updatePoint":{"line":33,"column":31,"index":1558},"line":33,"code":"  it('should create shadow root', async () => {\n    const carousel = fixture.doc.querySelector('amp-base-carousel');\n    await whenUpgradedToCustomElement(carousel);\n    await carousel.whenBuilt();\n    await new Promise(setTimeout);\n    expect(carousel.shadowRoot).to.exist;\n    const slides = carousel.querySelectorAll('amp-img');\n    expect(slides).to.have.length(2);\n    const slots = carousel.shadowRoot.querySelector('c').querySelectorAll('slot');\n    expect(slots).to.have.length(2);\n    expect(slides[0].assignedSlot).to.equal(slots[0]);\n    expect(slides[1].assignedSlot).to.equal(slots[1]);\n    expect(slots[0].assignedNodes()[0]).to.equal(slides[0]);\n    expect(slots[1].assignedNodes()[0]).to.equal(slides[1]);\n    expect(slots[0].getRootNode()).to.equal(carousel.shadowRoot);\n  });","file":"integration/test-shadow-dom-element.js","skipped":false,"dir":"test"},{"name":"toggles regular display","suites":[],"updatePoint":{"line":23,"column":29,"index":727},"line":23,"code":"  it('toggles regular display', () => {\n    expectToggleDisplay(img);\n  });","file":"integration/test-toggle-display.js","skipped":false,"dir":"test"},{"name":"toggles initial display style","suites":[],"updatePoint":{"line":26,"column":35,"index":809},"line":26,"code":"  it('toggles initial display style', () => {\n    setInitialDisplay(img, 'inline-block');\n    expectToggleDisplay(img);\n  });","file":"integration/test-toggle-display.js","skipped":false,"dir":"test"},{"name":"toggles stylesheet display style","suites":[],"updatePoint":{"line":30,"column":38,"index":938},"line":30,"code":"  it('toggles stylesheet display style', () => {\n    const style = doc.createElement('style');\n    style.innerText = 'amp-img { display: inline-block !important; }';\n    doc.head.appendChild(style);\n    expectToggleDisplay(img);\n  });","file":"integration/test-toggle-display.js","skipped":false,"dir":"test"},{"name":"should ping correct host with amp-pixel user().assert err","suites":[],"updatePoint":{"line":34,"column":65,"index":994},"line":34,"code":"    it('should ping correct host with amp-pixel user().assert err', () => {\n      return RequestBank.withdraw();\n    });","file":"integration/test-user-error-reporting.js","skipped":false,"dir":"test"},{"name":"should ping correct host with amp-img user().error err","suites":[],"updatePoint":{"line":71,"column":62,"index":1961},"line":71,"code":"    it('should ping correct host with amp-img user().error err', () => {\n      return RequestBank.withdraw();\n    });","file":"integration/test-user-error-reporting.js","skipped":false,"dir":"test"},{"name":"should ping correct host with 3p error message","suites":[],"updatePoint":{"line":109,"column":54,"index":2945},"line":109,"code":"    it('should ping correct host with 3p error message', () => {\n      return RequestBank.withdraw();\n    });","file":"integration/test-user-error-reporting.js","skipped":false,"dir":"test"},{"name":"should not duplicate entries if laid out twice","suites":[],"updatePoint":{"line":49,"column":54,"index":2124},"line":49,"code":"    it('should not duplicate entries if laid out twice', async () => {\n      videoManager.register(impl);\n      expect(videoManager.entries_).to.have.length(1);\n      videoManager.register(impl);\n      expect(videoManager.entries_).to.have.length(1);\n    });","file":"integration/test-video-manager.js","skipped":false,"dir":"test"},{"name":"should receive i-amphtml-video-interface class when registered","suites":[],"updatePoint":{"line":55,"column":70,"index":2399},"line":55,"code":"    it('should receive i-amphtml-video-interface class when registered', () => {\n      const expectedClass = 'i-amphtml-video-interface';\n      expect(toArray(video.classList)).to.not.contain(expectedClass);\n      videoManager.register(impl);\n      expect(toArray(video.classList)).to.contain(expectedClass);\n    });","file":"integration/test-video-manager.js","skipped":false,"dir":"test"},{"name":"should register common actions","suites":[],"updatePoint":{"line":61,"column":38,"index":2684},"line":61,"code":"    it('should register common actions', () => {\n      const spy = env.sandbox.spy(impl, 'registerAction');\n      videoManager.register(impl);\n      expect(spy).to.have.been.calledWith('play');\n      expect(spy).to.have.been.calledWith('pause');\n      expect(spy).to.have.been.calledWith('mute');\n      expect(spy).to.have.been.calledWith('unmute');\n    });","file":"integration/test-video-manager.js","skipped":false,"dir":"test"},{"name":"should be paused if autoplay is not set","suites":[],"updatePoint":{"line":69,"column":47,"index":3051},"line":69,"code":"    it('should be paused if autoplay is not set', () => {\n      videoManager.register(impl);\n      const entry = videoManager.getEntry_(impl);\n      entry.isVisible_ = false;\n      const curState = videoManager.getPlayingState(impl);\n      expect(curState).to.equal(PlayingStates_Enum.PAUSED);\n    });","file":"integration/test-video-manager.js","skipped":false,"dir":"test"},{"name":"autoplay - should be PLAYING_MANUAL if user interacted","suites":[],"updatePoint":{"line":76,"column":62,"index":3368},"line":76,"code":"    it('autoplay - should be PLAYING_MANUAL if user interacted', () => {\n      video.setAttribute('autoplay', '');\n      videoManager.register(impl);\n      const entry = videoManager.getEntry_(impl);\n      env.sandbox.stub(entry, 'userInteracted').returns(true);\n      entry.isVisible_ = true;\n      entry.loaded_ = true;\n      impl.play();\n      return listenOncePromise(video, VideoEvents_Enum.PLAYING).then(() => {\n        const curState = videoManager.getPlayingState(impl);\n        expect(curState).to.equal(PlayingStates_Enum.PLAYING_MANUAL);\n      });\n    });","file":"integration/test-video-manager.js","skipped":false,"dir":"test"},{"name":"autoplay - should be PLAYING_AUTO if user did not interact","suites":[],"updatePoint":{"line":89,"column":66,"index":3939},"line":89,"code":"    it('autoplay - should be PLAYING_AUTO if user did not interact', () => {\n      video.setAttribute('autoplay', '');\n      videoManager.register(impl);\n      const visibilityStub = env.sandbox.stub(env.ampdoc, 'isVisible');\n      visibilityStub.onFirstCall().returns(true);\n      const entry = videoManager.getEntry_(impl);\n      entry.isVisible_ = true;\n      entry.loaded_ = true;\n      entry.videoVisibilityChanged_();\n      return listenOncePromise(video, VideoEvents_Enum.PLAYING).then(() => {\n        const curState = videoManager.getPlayingState(impl);\n        expect(curState).to.equal(PlayingStates_Enum.PLAYING_AUTO);\n      });\n    });","file":"integration/test-video-manager.js","skipped":false,"dir":"test"},{"name":"autoplay - should be PAUSED if pause after playing","suites":[],"updatePoint":{"line":127,"column":58,"index":5618},"line":127,"code":"    it('autoplay - should be PAUSED if pause after playing', () => {\n      video.setAttribute('autoplay', '');\n      videoManager.register(impl);\n      impl.play();\n      const entry = videoManager.getEntry_(impl);\n      env.sandbox.stub(entry, 'userInteracted').returns(true);\n      entry.isVisible_ = false;\n      impl.pause();\n      return listenOncePromise(video, VideoEvents_Enum.PAUSE).then(() => {\n        const curState = videoManager.getPlayingState(impl);\n        expect(curState).to.equal(PlayingStates_Enum.PAUSED);\n      });\n    });","file":"integration/test-video-manager.js","skipped":false,"dir":"test"},{"name":"autoplay - initially there should be no user interaction","suites":[],"updatePoint":{"line":140,"column":64,"index":6170},"line":140,"code":"    it('autoplay - initially there should be no user interaction', () => {\n      video.setAttribute('autoplay', '');\n      videoManager.register(impl);\n      const entry = videoManager.getEntry_(impl);\n      entry.isVisible_ = false;\n      expect(videoManager.userInteracted(impl)).to.be.false;\n    });","file":"integration/test-video-manager.js","skipped":false,"dir":"test"},{"name":"autoplay - there should be user interaction if the ad was unmuted","suites":[],"updatePoint":{"line":147,"column":73,"index":6482},"line":147,"code":"    it('autoplay - there should be user interaction if the ad was unmuted', async () => {\n      video.setAttribute('autoplay', '');\n      const playingPromise = listenOncePromise(video, VideoEvents_Enum.PLAYING);\n      const unmutedPromise = listenOncePromise(video, VideoEvents_Enum.UNMUTED);\n      videoManager.register(impl);\n      const entry = videoManager.getEntry_(impl);\n      entry.isVisible_ = true;\n      entry.loaded_ = true;\n      entry.autoplayLoadedVideoVisibilityChanged_();\n      expect(videoManager.userInteracted(impl)).to.be.false;\n      dispatchCustomEvent(video, VideoEvents_Enum.AD_START);\n      await playingPromise;\n      impl.unmute();\n      await unmutedPromise;\n      expect(videoManager.userInteracted(impl)).to.be.true;\n    });","file":"integration/test-video-manager.js","skipped":false,"dir":"test"},{"name":"autoplay - hide autoplay elements when PLAYING after AD_START","suites":[],"updatePoint":{"line":163,"column":69,"index":7236},"line":163,"code":"    it('autoplay - hide autoplay elements when PLAYING after AD_START', async () => {\n      video.setAttribute('autoplay', '');\n      video.setAttribute('controls', '');\n      const playingPromise = listenOncePromise(video, VideoEvents_Enum.PLAYING);\n      videoManager.register(impl);\n      const entry = videoManager.getEntry_(impl);\n      entry.isVisible_ = true;\n      entry.loaded_ = true;\n      dispatchCustomEvent(video, VideoEvents_Enum.AD_START);\n      entry.autoplayLoadedVideoVisibilityChanged_();\n      await playingPromise;\n      let eq, mask;\n      await waitForChildPromise(video, () => {\n        eq = eq || video.querySelector('.amp-video-eq');\n        mask = mask || video.querySelector('.i-amphtml-video-mask');\n        return eq && mask;\n      });\n      expect(eq).to.have.attribute('hidden');\n      expect(mask).to.have.attribute('hidden');\n    });","file":"integration/test-video-manager.js","skipped":false,"dir":"test"},{"name":"autoplay - show autoplay elements when PLAYING","suites":[],"updatePoint":{"line":183,"column":54,"index":8090},"line":183,"code":"    it('autoplay - show autoplay elements when PLAYING', async () => {\n      video.setAttribute('autoplay', '');\n      video.setAttribute('controls', '');\n      const playingPromise = listenOncePromise(video, VideoEvents_Enum.PLAYING);\n      videoManager.register(impl);\n      const entry = videoManager.getEntry_(impl);\n      entry.isVisible_ = true;\n      entry.loaded_ = true;\n      entry.autoplayLoadedVideoVisibilityChanged_();\n      await playingPromise;\n      let eq, mask;\n      await waitForChildPromise(video, () => {\n        eq = eq || video.querySelector('.amp-video-eq');\n        mask = mask || video.querySelector('.i-amphtml-video-mask');\n        return eq && mask;\n      });\n      expect(eq).to.not.have.attribute('hidden');\n      expect(mask).to.not.have.attribute('hidden');\n    });","file":"integration/test-video-manager.js","skipped":false,"dir":"test"},{"name":"autoplay - PAUSED if autoplaying and video is outside of view","suites":[],"updatePoint":{"line":202,"column":69,"index":8906},"line":202,"code":"    it('autoplay - PAUSED if autoplaying and video is outside of view', () => {\n      video.setAttribute('autoplay', '');\n      videoManager.register(impl);\n      const visibilityStub = env.sandbox.stub(env.ampdoc, 'isVisible');\n      visibilityStub.onFirstCall().returns(true);\n      const entry = videoManager.getEntry_(impl);\n      entry.isVisible_ = true;\n      entry.loaded_ = true;\n      entry.videoVisibilityChanged_();\n      entry.isVisible_ = false;\n      entry.videoVisibilityChanged_();\n      const curState = videoManager.getPlayingState(impl);\n      expect(curState).to.equal(PlayingStates_Enum.PAUSED);\n    });","file":"integration/test-video-manager.js","skipped":false,"dir":"test"},{"name":"no autoplay - should pause if user presses pause after playing","suites":[],"updatePoint":{"line":216,"column":70,"index":9532},"line":216,"code":"    it('no autoplay - should pause if user presses pause after playing', () => {\n      videoManager.register(impl);\n      const entry = videoManager.getEntry_(impl);\n      entry.isVisible_ = false;\n      impl.play();\n      return listenOncePromise(video, VideoEvents_Enum.PLAYING).then(() => {\n        impl.pause();\n        listenOncePromise(video, VideoEvents_Enum.PAUSE).then(() => {\n          const curState = videoManager.getPlayingState(impl);\n          expect(curState).to.equal(PlayingStates_Enum.PAUSED);\n        });\n      });\n    });","file":"integration/test-video-manager.js","skipped":false,"dir":"test"},{"name":"no autoplay - should be playing manual whenever playing","suites":[],"updatePoint":{"line":229,"column":63,"index":10068},"line":229,"code":"    it('no autoplay - should be playing manual whenever playing', () => {\n      videoManager.register(impl);\n      const entry = videoManager.getEntry_(impl);\n      entry.isVisible_ = false;\n      impl.play();\n      return listenOncePromise(video, VideoEvents_Enum.PLAYING).then(() => {\n        const curState = videoManager.getPlayingState(impl);\n        expect(curState).to.equal(PlayingStates_Enum.PLAYING_MANUAL);\n      });\n    });","file":"integration/test-video-manager.js","skipped":false,"dir":"test"},{"name":"should create an invisible test video element","suites":[],"updatePoint":{"line":282,"column":51,"index":11455},"line":282,"code":"  it('should create an invisible test video element', () => {\n    return isAutoplaySupported(win).then(() => {\n      expect(video.style.position).to.equal('fixed');\n      expect(video.style.top).to.equal('0');\n      expect(video.style.width).to.equal('0');\n      expect(video.style.height).to.equal('0');\n      expect(video.style.opacity).to.equal('0');\n      expect(setAttributeSpy).to.have.been.calledWith('muted', '');\n      expect(setAttributeSpy).to.have.been.calledWith('playsinline', '');\n      expect(setAttributeSpy).to.have.been.calledWith('webkit-playsinline', '');\n      expect(setAttributeSpy).to.have.been.calledWith('height', '0');\n      expect(setAttributeSpy).to.have.been.calledWith('width', '0');\n      expect(video.muted).to.be.true;\n      expect(video.playsinline).to.be.true;\n      expect(video.webkitPlaysinline).to.be.true;\n      expect(createElementSpy.called).to.be.true;\n    });\n  });","file":"integration/test-video-manager.js","skipped":false,"dir":"test"},{"name":"should return false if `paused` is true after `play()` call","suites":[],"updatePoint":{"line":300,"column":65,"index":12381},"line":300,"code":"  it('should return false if `paused` is true after `play()` call', () => {\n    video.paused = true;\n    return isAutoplaySupported(win).then(supportsAutoplay => {\n      expect(supportsAutoplay).to.be.false;\n      expect(playStub.called).to.be.true;\n      expect(createElementSpy.called).to.be.true;\n    });\n  });","file":"integration/test-video-manager.js","skipped":false,"dir":"test"},{"name":"should return true if `paused` is false after `play()` call","suites":[],"updatePoint":{"line":308,"column":65,"index":12695},"line":308,"code":"  it('should return true if `paused` is false after `play()` call', () => {\n    video.paused = false;\n    return isAutoplaySupported(win).then(supportsAutoplay => {\n      expect(supportsAutoplay).to.be.true;\n      expect(playStub.called).to.be.true;\n      expect(createElementSpy.called).to.be.true;\n    });\n  });","file":"integration/test-video-manager.js","skipped":false,"dir":"test"},{"name":"should suppress errors if detection play call throws","suites":[],"updatePoint":{"line":316,"column":58,"index":13002},"line":316,"code":"  it('should suppress errors if detection play call throws', () => {\n    playStub.throws();\n    video.paused = true;\n    return isAutoplaySupported(win).then(supportsAutoplay => {\n      expect(supportsAutoplay).to.be.false;\n      expect(playStub.called).to.be.true;\n      expect(createElementSpy.called).to.be.true;\n    });\n  });","file":"integration/test-video-manager.js","skipped":false,"dir":"test"},{"name":"should suppress errors if detection play call rejects a promise","suites":[],"updatePoint":{"line":325,"column":69,"index":13343},"line":325,"code":"  it('should suppress errors if detection play call rejects a promise', () => {\n    const p = Promise.reject('play() can only be initiated by a user gesture.');\n    playStub.returns(p);\n    video.paused = true;\n    return isAutoplaySupported(win).then(supportsAutoplay => {\n      expect(supportsAutoplay).to.be.false;\n      expect(playStub.called).to.be.true;\n      expect(createElementSpy.called).to.be.true;\n    });\n  });","file":"integration/test-video-manager.js","skipped":false,"dir":"test"},{"name":"should override the video interface methods","suites":[],"updatePoint":{"line":30,"column":51,"index":1252},"line":30,"code":"    it('should override the video interface methods', function () {\n      this.timeout(timeout);\n      return getVideoPlayer({\n        outsideView: false,\n        autoplay: true\n      }).then(r => {\n        return r.video.getImpl(false);\n      }).then(impl => {\n        const methods = Object.getOwnPropertyNames(Object.getPrototypeOf(new VideoInterface()));\n        expect(methods.length).to.be.above(1);\n        for (let i = 0; i < methods.length; i++) {\n          const methodName = methods[i];\n          expect(impl[methodName]).to.exist;\n        }\n      });\n    });","file":"integration/test-video-players-helper.js","skipped":false,"dir":"test"},{"name":"should support mute, play, pause, unmute actions","suites":[],"line":52,"code":"    it.skip('should support mute, play, pause, unmute actions', function () {","file":"integration/test-video-players-helper.js","skipped":true,"dir":"test"},{"name":"should trigger play analytics on play","suites":[],"line":99,"code":"    it.skip('should trigger play analytics on play', function () {","file":"integration/test-video-players-helper.js","skipped":true,"dir":"test"},{"name":"should trigger pause analytics when the video pauses","suites":[],"updatePoint":{"line":118,"column":60,"index":4591},"line":118,"code":"    it('should trigger pause analytics when the video pauses', function () {\n      let pauseButton;\n      return getVideoPlayer({\n        outsideView: false,\n        autoplay: true\n      }).then(r => {\n        video = r.video;\n        pauseButton = createButton(r, 'pause');\n        return listenOncePromise(video, VideoEvents_Enum.PLAYING);\n      }).then(() => {\n        const promise = listenOncePromise(video, VideoAnalyticsEvents_Enum.PAUSE);\n        pauseButton.click();\n        return promise;\n      });\n    });","file":"integration/test-video-players-helper.js","skipped":false,"dir":"test"},{"name":"should trigger session analytics when a session ends","suites":[],"updatePoint":{"line":133,"column":60,"index":5109},"line":133,"code":"    it('should trigger session analytics when a session ends', function () {\n      let pauseButton;\n      return getVideoPlayer({\n        outsideView: false,\n        autoplay: true\n      }).then(r => {\n        video = r.video;\n        const promise = listenOncePromise(video, VideoEvents_Enum.PLAYING);\n        pauseButton = createButton(r, 'pause');\n        return promise;\n      }).then(() => {\n        const promise = listenOncePromise(video, VideoAnalyticsEvents_Enum.PAUSE);\n        pauseButton.click();\n        return promise;\n      });\n    });","file":"integration/test-video-players-helper.js","skipped":false,"dir":"test"},{"name":"should trigger session analytics when a visible session ends","suites":[],"line":151,"code":"    it.skip('should trigger session analytics when a visible session ends', function () {","file":"integration/test-video-players-helper.js","skipped":true,"dir":"test"},{"name":"when the video ends","suites":["should trigger ended analytics"],"updatePoint":{"line":188,"column":29,"index":6968},"line":188,"code":"      it('when the video ends', function () {\n        video = player.video;\n        return listenOncePromise(video, VideoAnalyticsEvents_Enum.ENDED);\n      });","file":"integration/test-video-players-helper.js","skipped":false,"dir":"test"},{"name":"should include current time, play state, etc.","suites":["should trigger ended analytics"],"line":195,"code":"    it.skip('should include current time, play state, etc.', function () {","file":"integration/test-video-players-helper.js","skipped":true,"dir":"test"},{"name":"should trigger video-seconds-played when visibleand playing","suites":["should trigger ended analytics"],"line":227,"code":"    it.skip('should trigger video-seconds-played when visibleand playing', () => {","file":"integration/test-video-players-helper.js","skipped":true,"dir":"test"},{"name":"should play when in view port initially","suites":["play/pause"],"updatePoint":{"line":264,"column":49,"index":10132},"line":264,"code":"      it('should play when in view port initially', () => {\n        return getVideoPlayer({\n          outsideView: false,\n          autoplay: true\n        }).then(r => {\n          return listenOncePromise(r.video, VideoEvents_Enum.PLAYING);\n        });\n      });","file":"integration/test-video-players-helper.js","skipped":false,"dir":"test"},{"name":"should not play when initially outside viewport","suites":["play/pause"],"updatePoint":{"line":272,"column":57,"index":10403},"line":272,"code":"      it('should not play when initially outside viewport', () => {\n        return getVideoPlayer({\n          outsideView: true,\n          autoplay: true\n        }).then(r => {\n          const timer = Services.timerFor(r.video.ownerDocument.defaultView);\n          const p = listenOncePromise(r.video, VideoEvents_Enum.PLAYING).then(() => {\n            return Promise.reject('should not have autoplayed');\n          });\n          // we have to wait to ensure play is NOT called.\n          return Promise.race([timer.promise(1000), p]);\n        });\n      });","file":"integration/test-video-players-helper.js","skipped":false,"dir":"test"},{"name":"should play/pause when video enters/exits viewport","suites":["play/pause"],"line":288,"code":"      it.skip('should play/pause when video enters/exits viewport', function () {","file":"integration/test-video-players-helper.js","skipped":true,"dir":"test"},{"name":"should create an animated icon overlay","suites":["Animated Icon"],"line":313,"code":"      it.skip('should create an animated icon overlay', () => {","file":"integration/test-video-players-helper.js","skipped":true,"dir":"test"},{"name":"should enter fullscreen on rotation","suites":["Animated Icon"],"line":367,"code":"    it.skip('should enter fullscreen on rotation', function () {","file":"integration/test-video-players-helper.js","skipped":true,"dir":"test"},{"name":"does layout when going to PRERENDER","suites":["from in the PRERENDER state","for prerenderable element"],"updatePoint":{"line":119,"column":47,"index":4548},"line":119,"code":"        it('does layout when going to PRERENDER', async () => {\n          changeViewerVisibilityState(VisibilityState_Enum.PAUSED);\n          changeViewerVisibilityState(VisibilityState_Enum.PRERENDER);\n          await waitForNextPass();\n          expect(layoutCallback).to.have.been.called;\n          expect(unlayoutCallback).not.to.have.been.called;\n          expect(pauseCallback).not.to.have.been.called;\n          expect(resumeCallback).not.to.have.been.called;\n        });","file":"integration/test-visibility-states.js","skipped":false,"dir":"test"},{"name":"calls layout when going to PREVIEW","suites":["from in the PRERENDER state","for prerenderable element"],"updatePoint":{"line":128,"column":46,"index":5026},"line":128,"code":"        it('calls layout when going to PREVIEW', async () => {\n          previewAllowed.returns(true);\n          changeViewerVisibilityState(VisibilityState_Enum.PREVIEW);\n          await waitForNextPass();\n          expect(layoutCallback).to.have.been.called;\n          expect(unlayoutCallback).not.to.have.been.called;\n          expect(pauseCallback).not.to.have.been.called;\n          expect(resumeCallback).not.to.have.been.called;\n        });","file":"integration/test-visibility-states.js","skipped":false,"dir":"test"},{"name":"calls layout when going to VISIBLE","suites":["from in the PRERENDER state","for prerenderable element"],"updatePoint":{"line":137,"column":46,"index":5474},"line":137,"code":"        it('calls layout when going to VISIBLE', async () => {\n          changeViewerVisibilityState(VisibilityState_Enum.VISIBLE);\n          await waitForNextPass();\n          expect(layoutCallback).to.have.been.called;\n          expect(unlayoutCallback).not.to.have.been.called;\n          expect(pauseCallback).not.to.have.been.called;\n          expect(resumeCallback).not.to.have.been.called;\n        });","file":"integration/test-visibility-states.js","skipped":false,"dir":"test"},{"name":"calls callbacks when going to HIDDEN","suites":["from in the PRERENDER state","for prerenderable element"],"updatePoint":{"line":145,"column":48,"index":5884},"line":145,"code":"        it('calls callbacks when going to HIDDEN', async () => {\n          changeViewerVisibilityState(VisibilityState_Enum.VISIBLE);\n          changeVisibility('hidden');\n          await waitForNextPass();\n          expect(unlayoutCallback).not.to.have.been.called;\n          expect(pauseCallback).not.to.have.been.called;\n          expect(resumeCallback).not.to.have.been.called;\n        });","file":"integration/test-visibility-states.js","skipped":false,"dir":"test"},{"name":"does not call callbacks when going to INACTIVE","suites":["from in the PRERENDER state","for prerenderable element"],"updatePoint":{"line":153,"column":58,"index":6288},"line":153,"code":"        it('does not call callbacks when going to INACTIVE', async () => {\n          changeViewerVisibilityState(VisibilityState_Enum.INACTIVE);\n          await waitForNextPass();\n          expect(layoutCallback).not.to.have.been.called;\n          expect(unlayoutCallback).not.to.have.been.called;\n          expect(pauseCallback).not.to.have.been.called;\n          expect(resumeCallback).not.to.have.been.called;\n        });","file":"integration/test-visibility-states.js","skipped":false,"dir":"test"},{"name":"does not call callbacks when going to PAUSED","suites":["from in the PRERENDER state","for prerenderable element"],"updatePoint":{"line":161,"column":56,"index":6711},"line":161,"code":"        it('does not call callbacks when going to PAUSED', async () => {\n          changeViewerVisibilityState(VisibilityState_Enum.PAUSED);\n          await waitForNextPass();\n          expect(layoutCallback).not.to.have.been.called;\n          expect(unlayoutCallback).not.to.have.been.called;\n          expect(pauseCallback).not.to.have.been.called;\n          expect(resumeCallback).not.to.have.been.called;\n        });","file":"integration/test-visibility-states.js","skipped":false,"dir":"test"},{"name":"does not call callbacks when going to PRERENDER","suites":["from in the PRERENDER state","for non-prerenderable element"],"updatePoint":{"line":174,"column":59,"index":7263},"line":174,"code":"        it('does not call callbacks when going to PRERENDER', async () => {\n          await waitForNextPass();\n          expect(layoutCallback).not.to.have.been.called;\n          expect(unlayoutCallback).not.to.have.been.called;\n          expect(pauseCallback).not.to.have.been.called;\n          expect(resumeCallback).not.to.have.been.called;\n        });","file":"integration/test-visibility-states.js","skipped":false,"dir":"test"},{"name":"calls layout when going to PREVIEW","suites":["from in the PRERENDER state","for non-prerenderable element"],"updatePoint":{"line":181,"column":46,"index":7606},"line":181,"code":"        it('calls layout when going to PREVIEW', async () => {\n          previewAllowed.returns(true);\n          changeViewerVisibilityState(VisibilityState_Enum.PREVIEW);\n          await waitForNextPass();\n          expect(layoutCallback).to.have.been.called;\n          expect(unlayoutCallback).not.to.have.been.called;\n          expect(pauseCallback).not.to.have.been.called;\n          expect(resumeCallback).not.to.have.been.called;\n        });","file":"integration/test-visibility-states.js","skipped":false,"dir":"test"},{"name":"calls layout when going to VISIBLE","suites":["from in the PRERENDER state","for non-prerenderable element"],"updatePoint":{"line":190,"column":46,"index":8054},"line":190,"code":"        it('calls layout when going to VISIBLE', async () => {\n          changeViewerVisibilityState(VisibilityState_Enum.VISIBLE);\n          await waitForNextPass();\n          expect(layoutCallback).to.have.been.called;\n          expect(unlayoutCallback).not.to.have.been.called;\n          expect(pauseCallback).not.to.have.been.called;\n          expect(resumeCallback).not.to.have.been.called;\n        });","file":"integration/test-visibility-states.js","skipped":false,"dir":"test"},{"name":"calls callbacks when going to HIDDEN","suites":["from in the PRERENDER state","for non-prerenderable element"],"updatePoint":{"line":198,"column":48,"index":8464},"line":198,"code":"        it('calls callbacks when going to HIDDEN', async () => {\n          changeViewerVisibilityState(VisibilityState_Enum.VISIBLE);\n          changeVisibility('hidden');\n          await waitForNextPass();\n          if (R1_IMG_DEFERRED_BUILD) {\n            expect(layoutCallback).to.have.been.called;\n          } else {\n            expect(layoutCallback).not.to.have.been.called;\n          }\n          expect(unlayoutCallback).not.to.have.been.called;\n          expect(pauseCallback).not.to.have.been.called;\n          expect(resumeCallback).not.to.have.been.called;\n        });","file":"integration/test-visibility-states.js","skipped":false,"dir":"test"},{"name":"does not call callbacks when going to INACTIVE","suites":["from in the PRERENDER state","for non-prerenderable element"],"updatePoint":{"line":211,"column":58,"index":9054},"line":211,"code":"        it('does not call callbacks when going to INACTIVE', async () => {\n          changeViewerVisibilityState(VisibilityState_Enum.INACTIVE);\n          await waitForNextPass();\n          expect(layoutCallback).not.to.have.been.called;\n          expect(unlayoutCallback).not.to.have.been.called;\n          expect(pauseCallback).not.to.have.been.called;\n          expect(resumeCallback).not.to.have.been.called;\n        });","file":"integration/test-visibility-states.js","skipped":false,"dir":"test"},{"name":"does not call callbacks when going to PAUSED","suites":["from in the PRERENDER state","for non-prerenderable element"],"updatePoint":{"line":219,"column":56,"index":9477},"line":219,"code":"        it('does not call callbacks when going to PAUSED', async () => {\n          changeViewerVisibilityState(VisibilityState_Enum.PAUSED);\n          await waitForNextPass();\n          expect(layoutCallback).not.to.have.been.called;\n          expect(unlayoutCallback).not.to.have.been.called;\n          expect(pauseCallback).not.to.have.been.called;\n          expect(resumeCallback).not.to.have.been.called;\n        });","file":"integration/test-visibility-states.js","skipped":false,"dir":"test"},{"name":"does not call callbacks when going to VISIBLE","suites":["from in the VISIBLE state"],"updatePoint":{"line":235,"column":55,"index":10127},"line":235,"code":"      it('does not call callbacks when going to VISIBLE', async () => {\n        await waitForNextPass();\n        expect(layoutCallback).not.to.have.been.called;\n        expect(unlayoutCallback).not.to.have.been.called;\n        expect(pauseCallback).not.to.have.been.called;\n        expect(resumeCallback).not.to.have.been.called;\n      });","file":"integration/test-visibility-states.js","skipped":false,"dir":"test"},{"name":"does not call callbacks when going to HIDDEN","suites":["from in the VISIBLE state"],"updatePoint":{"line":242,"column":54,"index":10466},"line":242,"code":"      it('does not call callbacks when going to HIDDEN', async () => {\n        changeVisibility('hidden');\n        await waitForNextPass();\n        expect(layoutCallback).not.to.have.been.called;\n        expect(unlayoutCallback).not.to.have.been.called;\n        expect(pauseCallback).not.to.have.been.called;\n        expect(resumeCallback).not.to.have.been.called;\n      });","file":"integration/test-visibility-states.js","skipped":false,"dir":"test"},{"name":"calls unload when going to INACTIVE","suites":["from in the VISIBLE state"],"updatePoint":{"line":250,"column":45,"index":10832},"line":250,"code":"      it('calls unload when going to INACTIVE', async () => {\n        changeViewerVisibilityState(VisibilityState_Enum.INACTIVE);\n        await waitForNextPass();\n        expect(unlayoutCallback).to.have.been.called;\n        expect(pauseCallback).to.have.been.called;\n        expect(resumeCallback).not.to.have.been.called;\n      });","file":"integration/test-visibility-states.js","skipped":false,"dir":"test"},{"name":"calls pause when going to PAUSED","suites":["from in the VISIBLE state"],"updatePoint":{"line":257,"column":42,"index":11163},"line":257,"code":"      it('calls pause when going to PAUSED', async () => {\n        changeViewerVisibilityState(VisibilityState_Enum.PAUSED);\n        await waitForNextPass();\n        expect(layoutCallback).not.to.have.been.called;\n        expect(unlayoutCallback).not.to.have.been.called;\n        expect(pauseCallback).to.have.been.called;\n        expect(resumeCallback).not.to.have.been.called;\n      });","file":"integration/test-visibility-states.js","skipped":false,"dir":"test"},{"name":"does not call callbacks going to VISIBLE","suites":["from in the HIDDEN state"],"updatePoint":{"line":274,"column":50,"index":11848},"line":274,"code":"      it('does not call callbacks going to VISIBLE', async () => {\n        changeVisibility('visible');\n        await waitForNextPass();\n        expect(layoutCallback).not.to.have.been.called;\n        expect(unlayoutCallback).not.to.have.been.called;\n        expect(pauseCallback).not.to.have.been.called;\n        expect(resumeCallback).not.to.have.been.called;\n      });","file":"integration/test-visibility-states.js","skipped":false,"dir":"test"},{"name":"does not call callbacks when going to HIDDEN","suites":["from in the HIDDEN state"],"updatePoint":{"line":282,"column":54,"index":12224},"line":282,"code":"      it('does not call callbacks when going to HIDDEN', async () => {\n        await waitForNextPass();\n        expect(layoutCallback).not.to.have.been.called;\n        expect(unlayoutCallback).not.to.have.been.called;\n        expect(pauseCallback).not.to.have.been.called;\n        expect(resumeCallback).not.to.have.been.called;\n      });","file":"integration/test-visibility-states.js","skipped":false,"dir":"test"},{"name":"calls unload when going to INACTIVE","suites":["from in the HIDDEN state"],"updatePoint":{"line":289,"column":45,"index":12554},"line":289,"code":"      it('calls unload when going to INACTIVE', async () => {\n        changeViewerVisibilityState(VisibilityState_Enum.INACTIVE);\n        await waitForNextPass();\n        expect(layoutCallback).not.to.have.been.called;\n        expect(unlayoutCallback).to.have.been.called;\n        expect(pauseCallback).to.have.been.called;\n        expect(resumeCallback).not.to.have.been.called;\n      });","file":"integration/test-visibility-states.js","skipped":false,"dir":"test"},{"name":"calls pause when going to PAUSED","suites":["from in the HIDDEN state"],"updatePoint":{"line":297,"column":42,"index":12941},"line":297,"code":"      it('calls pause when going to PAUSED', async () => {\n        changeVisibility('visible');\n        changeViewerVisibilityState(VisibilityState_Enum.PAUSED);\n        await waitForNextPass();\n        expect(layoutCallback).not.to.have.been.called;\n        expect(unlayoutCallback).not.to.have.been.called;\n        expect(pauseCallback).to.have.been.called;\n        expect(resumeCallback).not.to.have.been.called;\n      });","file":"integration/test-visibility-states.js","skipped":false,"dir":"test"},{"name":"calls layout and resume when going to VISIBLE","suites":["from in the INACTIVE state"],"updatePoint":{"line":315,"column":55,"index":13702},"line":315,"code":"      it('calls layout and resume when going to VISIBLE', async () => {\n        changeViewerVisibilityState(VisibilityState_Enum.VISIBLE);\n        await waitForNextPass();\n        expect(layoutCallback).to.have.been.called;\n        expect(unlayoutCallback).not.to.have.been.called;\n        expect(pauseCallback).not.to.have.been.called;\n        expect(resumeCallback).to.have.been.called;\n      });","file":"integration/test-visibility-states.js","skipped":false,"dir":"test"},{"name":"calls resume when going to HIDDEN","suites":["from in the INACTIVE state"],"updatePoint":{"line":323,"column":43,"index":14089},"line":323,"code":"      it('calls resume when going to HIDDEN', async () => {\n        changeViewerVisibilityState(VisibilityState_Enum.VISIBLE);\n        changeVisibility('hidden');\n        await waitForNextPass();\n        if (R1_IMG_DEFERRED_BUILD) {\n          expect(layoutCallback).to.have.been.called;\n        } else {\n          expect(layoutCallback).not.to.have.been.called;\n        }\n        expect(unlayoutCallback).not.to.have.been.called;\n        expect(pauseCallback).not.to.have.been.called;\n        expect(resumeCallback).to.have.been.called;\n      });","file":"integration/test-visibility-states.js","skipped":false,"dir":"test"},{"name":"does not call callbacks when going to PAUSED","suites":["from in the INACTIVE state"],"updatePoint":{"line":336,"column":54,"index":14647},"line":336,"code":"      it('does not call callbacks when going to PAUSED', async () => {\n        changeViewerVisibilityState(VisibilityState_Enum.PAUSED);\n        await waitForNextPass();\n        expect(layoutCallback).not.to.have.been.called;\n        expect(unlayoutCallback).not.to.have.been.called;\n        expect(pauseCallback).not.to.have.been.called;\n        expect(resumeCallback).not.to.have.been.called;\n      });","file":"integration/test-visibility-states.js","skipped":false,"dir":"test"},{"name":"calls resume when going to VISIBLE","suites":["from in the PAUSED state"],"updatePoint":{"line":353,"column":44,"index":15360},"line":353,"code":"      it('calls resume when going to VISIBLE', async () => {\n        changeViewerVisibilityState(VisibilityState_Enum.VISIBLE);\n        await waitForNextPass();\n        expect(layoutCallback).not.to.have.been.called;\n        expect(unlayoutCallback).not.to.have.been.called;\n        expect(pauseCallback).not.to.have.been.called;\n        expect(resumeCallback).to.have.been.called;\n      });","file":"integration/test-visibility-states.js","skipped":false,"dir":"test"},{"name":"calls unlayout when going to HIDDEN","suites":["from in the PAUSED state"],"updatePoint":{"line":361,"column":45,"index":15753},"line":361,"code":"      it('calls unlayout when going to HIDDEN', async () => {\n        changeVisibility('hidden');\n        await waitForNextPass();\n        expect(layoutCallback).not.to.have.been.called;\n        expect(unlayoutCallback).not.to.have.been.called;\n        expect(pauseCallback).not.to.have.been.called;\n        expect(resumeCallback).not.to.have.been.called;\n      });","file":"integration/test-visibility-states.js","skipped":false,"dir":"test"},{"name":"calls unlayout when going to INACTIVE","suites":["from in the PAUSED state"],"updatePoint":{"line":369,"column":47,"index":16121},"line":369,"code":"      it('calls unlayout when going to INACTIVE', async () => {\n        changeViewerVisibilityState(VisibilityState_Enum.INACTIVE);\n        await waitForNextPass();\n        expect(layoutCallback).not.to.have.been.called;\n        expect(unlayoutCallback).to.have.been.called;\n        expect(pauseCallback).to.have.been.called;\n        expect(resumeCallback).not.to.have.been.called;\n      });","file":"integration/test-visibility-states.js","skipped":false,"dir":"test"},{"name":"does not call callbacks when going to PAUSED","suites":["from in the PAUSED state"],"updatePoint":{"line":377,"column":54,"index":16520},"line":377,"code":"      it('does not call callbacks when going to PAUSED', async () => {\n        await waitForNextPass();\n        expect(layoutCallback).not.to.have.been.called;\n        expect(unlayoutCallback).not.to.have.been.called;\n        expect(pauseCallback).not.to.have.been.called;\n        expect(resumeCallback).not.to.have.been.called;\n      });","file":"integration/test-visibility-states.js","skipped":false,"dir":"test"},{"name":"add attributes","suites":[],"updatePoint":{"line":89,"column":22,"index":2916},"line":89,"code":"    it('add attributes', () => {\n      const div = document.createElement('div');\n      div.setAttribute('data-foo-bar', 'foobar');\n      div.setAttribute('data-hello', 'world');\n      div.setAttribute('foo-bar', 'nope');\n      div.setAttribute('data-vars-hello', 'nope');\n      let obj = {};\n      addDataAndJsonAttributes_(div, obj);\n      expect(obj).to.deep.equal({\n        'fooBar': 'foobar',\n        'hello': 'world'\n      });\n      div.setAttribute('json', '{\"abc\": [1,2,3]}');\n      obj = {};\n      addDataAndJsonAttributes_(div, obj);\n      expect(obj).to.deep.equal({\n        'fooBar': 'foobar',\n        'hello': 'world',\n        'abc': [1, 2, 3]\n      });\n    });","file":"unit/3p/test-3p-frame.js","skipped":false,"dir":"test"},{"name":"should create an iframe","suites":[],"updatePoint":{"line":110,"column":31,"index":3600},"line":110,"code":"    it('should create an iframe', () => {\n      mockMode({\n        esm: false,\n        localDev: true,\n        development: false,\n        test: false,\n        version: '$internalRuntimeVersion$'\n      });\n      toggleExperiment(window, 'exp-a', true);\n      toggleExperiment(window, 'exp-b', true);\n      clock.tick(1234567888);\n      const link = document.createElement('link');\n      link.setAttribute('rel', 'canonical');\n      link.setAttribute('href', 'https://foo.bar/baz');\n      document.head.appendChild(link);\n      const div = document.createElement('my-element');\n      div.setAttribute('data-test-attr', 'value');\n      div.setAttribute('data-ping', 'pong');\n      div.setAttribute('width', '50');\n      div.setAttribute('height', '100');\n      setupElementFunctions(div);\n      const viewer = Services.viewerForDoc(window.document);\n      const viewerMock = env.sandbox.mock(viewer);\n      viewerMock.expects('getUnconfirmedReferrerUrl').returns('http://acme.org/').once();\n      container.appendChild(div);\n      env.sandbox.stub(DomFingerprint, 'generate').callsFake(() => 'MY-MOCK-FINGERPRINT');\n      const locationHref = location.href;\n      expect(locationHref).to.not.be.empty;\n      env.sandbox.stub(WindowInterface, 'getLocation').returns({\n        href: locationHref\n      });\n      const initialIntersection = {\n        test: 'testIntersection'\n      };\n      const iframe = getIframe(window, div, '_ping_', {\n        clientId: 'cidValue'\n      }, {\n        initialIntersection\n      });\n      const {\n        src\n      } = iframe;\n      const docInfo = Services.documentInfoForDoc(window.document);\n      expect(docInfo.pageViewId).to.not.be.empty;\n      const name = JSON.parse(iframe.name);\n      const sentinel = name.attributes._context['sentinel'];\n      const fragment = {\n        'testAttr': 'value',\n        'ping': 'pong',\n        'width': 50,\n        'height': 100,\n        'type': '_ping_',\n        '_context': {\n          'referrer': 'http://acme.org/',\n          'ampcontextVersion': '$internalRuntimeVersion$',\n          'ampcontextFilepath': 'https://3p.ampproject.net/$internalRuntimeVersion$/ampcontext-v0.js',\n          'canonicalUrl': docInfo.canonicalUrl,\n          'sourceUrl': locationHref,\n          'pageViewId': docInfo.pageViewId,\n          'clientId': 'cidValue',\n          'initialLayoutRect': {\n            height: 200,\n            left: 0,\n            top: 0,\n            width: 100\n          },\n          'location': {\n            'href': locationHref\n          },\n          'tagName': 'MY-ELEMENT',\n          'mode': {\n            'localDev': true,\n            'development': false,\n            'test': false,\n            'esm': false\n          },\n          'canary': false,\n          'hidden': false,\n          // Note that DOM fingerprint will change if the document DOM changes\n          // Note also that running it using --files uses different DOM.\n          'domFingerprint': '1725030182',\n          'startTime': 1234567888,\n          'experimentToggles': {\n            'exp-a': true,\n            'exp-b': true\n          },\n          'sentinel': sentinel,\n          initialIntersection\n        }\n      };\n      expect(src).to.equal('http://ads.localhost:9876/dist.3p/current/frame.max.html');\n      // Since DOM fingerprint changes between browsers and documents, to have\n      // stable tests, we can only verify its existence.\n      expect(name.attributes._context.domFingerprint).to.exist;\n      delete name.attributes._context.domFingerprint;\n      delete fragment._context.domFingerprint;\n      // Value changes between tests.\n      // TODO: Switch test to isolated window.\n      expect(name.attributes._context.experimentToggles).to.exist;\n      delete name.attributes._context.experimentToggles;\n      delete fragment._context.experimentToggles;\n      expect(name.attributes).to.deep.jsonEqual(fragment);\n    });","file":"unit/3p/test-3p-frame.js","skipped":false,"dir":"test"},{"name":"should copy attributes to iframe","suites":[],"updatePoint":{"line":213,"column":40,"index":7494},"line":213,"code":"    it('should copy attributes to iframe', () => {\n      const div = document.createElement('my-element');\n      div.setAttribute('width', '50');\n      div.setAttribute('height', '100');\n      div.setAttribute('title', 'a_title');\n      div.setAttribute('not_allowlisted', 'shouldnt_be_in_iframe');\n      setupElementFunctions(div);\n      container.appendChild(div);\n      const iframe = getIframe(window, div, 'none');\n      expect(iframe.width).to.equal('50');\n      expect(iframe.height).to.equal('100');\n      expect(iframe.title).to.equal('a_title');\n      expect(iframe.not_allowlisted).to.equal(undefined);\n    });","file":"unit/3p/test-3p-frame.js","skipped":false,"dir":"test"},{"name":"should set feature policy for sync-xhr","suites":[],"updatePoint":{"line":227,"column":46,"index":8122},"line":227,"code":"    it('should set feature policy for sync-xhr', () => {\n      const div = document.createElement('my-element');\n      setupElementFunctions(div);\n      container.appendChild(div);\n      const iframe = getIframe(window, div, 'none');\n      expect(iframe.getAttribute('allow')).to.equal(\"sync-xhr 'none';\");\n    });","file":"unit/3p/test-3p-frame.js","skipped":false,"dir":"test"},{"name":"should set sandbox","suites":[],"updatePoint":{"line":234,"column":26,"index":8417},"line":234,"code":"    it('should set sandbox', () => {\n      const div = document.createElement('my-element');\n      setupElementFunctions(div);\n      container.appendChild(div);\n      const iframe = getIframe(window, div, 'none');\n      expect(iframe.getAttribute('sandbox')).to.equal('allow-top-navigation-by-user-activation ' + 'allow-popups-to-escape-sandbox allow-forms ' + 'allow-modals allow-pointer-lock allow-popups allow-same-origin ' + 'allow-scripts');\n    });","file":"unit/3p/test-3p-frame.js","skipped":false,"dir":"test"},{"name":"should set sandbox (direct call)","suites":[],"updatePoint":{"line":241,"column":40,"index":8886},"line":241,"code":"    it('should set sandbox (direct call)', () => {\n      const iframe = document.createElement('iframe');\n      applySandbox(iframe);\n      expect(iframe.getAttribute('sandbox')).to.equal('allow-top-navigation-by-user-activation ' + 'allow-popups-to-escape-sandbox allow-forms ' + 'allow-modals allow-pointer-lock allow-popups allow-same-origin ' + 'allow-scripts');\n    });","file":"unit/3p/test-3p-frame.js","skipped":false,"dir":"test"},{"name":"should not set sandbox without feature detection","suites":[],"updatePoint":{"line":246,"column":56,"index":9277},"line":246,"code":"    it('should not set sandbox without feature detection', () => {\n      const iframe = document.createElement('iframe');\n      iframe.sandbox.supports = null;\n      applySandbox(iframe);\n      expect(iframe.getAttribute('sandbox')).to.equal(null);\n    });","file":"unit/3p/test-3p-frame.js","skipped":false,"dir":"test"},{"name":"should not set sandbox with failing feature detection","suites":[],"updatePoint":{"line":252,"column":61,"index":9539},"line":252,"code":"    it('should not set sandbox with failing feature detection', () => {\n      const iframe = document.createElement('iframe');\n      iframe.sandbox.supports = function (flag) {\n        return flag != 'allow-top-navigation-by-user-activation';\n      };\n      applySandbox(iframe);\n      expect(iframe.getAttribute('sandbox')).to.equal(null);\n    });","file":"unit/3p/test-3p-frame.js","skipped":false,"dir":"test"},{"name":"should pick the right bootstrap url for local-dev mode","suites":[],"updatePoint":{"line":260,"column":62,"index":9889},"line":260,"code":"    it('should pick the right bootstrap url for local-dev mode', () => {\n      mockMode({\n        localDev: true\n      });\n      const ampdoc = Services.ampdoc(window.document);\n      expect(getBootstrapBaseUrl(window, ampdoc)).to.equal('http://ads.localhost:9876/dist.3p/current/frame.max.html');\n    });","file":"unit/3p/test-3p-frame.js","skipped":false,"dir":"test"},{"name":"should pick the right bootstrap url for testing mode","suites":[],"updatePoint":{"line":267,"column":60,"index":10193},"line":267,"code":"    it('should pick the right bootstrap url for testing mode', () => {\n      mockMode({\n        test: true\n      });\n      const ampdoc = Services.ampdoc(window.document);\n      expect(getBootstrapBaseUrl(window, ampdoc)).to.equal('http://ads.localhost:9876/dist.3p/current/frame.max.html');\n    });","file":"unit/3p/test-3p-frame.js","skipped":false,"dir":"test"},{"name":"should pick the right bootstrap unique url (prod)","suites":[],"updatePoint":{"line":274,"column":57,"index":10490},"line":274,"code":"    it('should pick the right bootstrap unique url (prod)', () => {\n      mockMode({\n        isProd: true\n      });\n      const ampdoc = Services.ampdoc(window.document);\n      expect(getBootstrapBaseUrl(window, ampdoc)).to.match(/^https:\\/\\/d-\\d+\\.ampproject\\.net\\/\\$\\internal\\w+\\$\\/frame\\.html$/);\n    });","file":"unit/3p/test-3p-frame.js","skipped":false,"dir":"test"},{"name":"should return a stable URL in getBootstrapBaseUrl","suites":[],"updatePoint":{"line":281,"column":57,"index":10798},"line":281,"code":"    it('should return a stable URL in getBootstrapBaseUrl', () => {\n      mockMode({\n        isProd: true\n      });\n      const ampdoc = Services.ampdoc(window.document);\n      expect(getBootstrapBaseUrl(window, ampdoc)).to.equal(getBootstrapBaseUrl(window, ampdoc));\n    });","file":"unit/3p/test-3p-frame.js","skipped":false,"dir":"test"},{"name":"should return a stable URL in getDefaultBootstrapBaseUrl","suites":[],"updatePoint":{"line":288,"column":64,"index":11081},"line":288,"code":"    it('should return a stable URL in getDefaultBootstrapBaseUrl', () => {\n      mockMode({\n        isProd: true\n      });\n      expect(getDefaultBootstrapBaseUrl(window)).to.equal(getDefaultBootstrapBaseUrl(window));\n    });","file":"unit/3p/test-3p-frame.js","skipped":false,"dir":"test"},{"name":"should pick the right bootstrap url (custom)","suites":[],"updatePoint":{"line":294,"column":52,"index":11295},"line":294,"code":"    it('should pick the right bootstrap url (custom)', () => {\n      addCustomBootstrap('https://example.com/boot/remote.html');\n      const ampdoc = Services.ampdoc(window.document);\n      expect(getBootstrapBaseUrl(window, ampdoc)).to.equal('https://example.com/boot/remote.html?$internalRuntimeVersion$');\n    });","file":"unit/3p/test-3p-frame.js","skipped":false,"dir":"test"},{"name":"should return different values for different file names","suites":[],"updatePoint":{"line":299,"column":63,"index":11623},"line":299,"code":"    it('should return different values for different file names', () => {\n      mockMode({\n        isProd: true\n      });\n      let match = /^https:\\/\\/(d-\\d+\\.ampproject\\.net)\\/\\$\\internal\\w+\\$\\/frame\\.html$/.exec(getDefaultBootstrapBaseUrl(window));\n      const domain = match && match[1];\n      expect(domain).to.be.ok;\n      match = /^https:\\/\\/(d-\\d+\\.ampproject\\.net)\\/\\$\\internal\\w+\\$\\/frame2\\.html$/.exec(getDefaultBootstrapBaseUrl(window, 'frame2'));\n      expect(match && match[1]).to.equal(domain);\n    });","file":"unit/3p/test-3p-frame.js","skipped":false,"dir":"test"},{"name":"should pick the right bootstrap url (custom)","suites":[],"updatePoint":{"line":309,"column":52,"index":12130},"line":309,"code":"    it('should pick the right bootstrap url (custom)', () => {\n      addCustomBootstrap('http://example.com/boot/remote.html');\n      const ampdoc = Services.ampdoc(window.document);\n      allowConsoleError(() => {\n        expect(() => {\n          getBootstrapBaseUrl(window, ampdoc);\n        }).to.throw(/meta\\[name=\"amp-3p-iframe-src\"\\] source must start with \"https/);\n      });\n    });","file":"unit/3p/test-3p-frame.js","skipped":false,"dir":"test"},{"name":"should pick the right bootstrap url (custom)","suites":[],"updatePoint":{"line":318,"column":52,"index":12520},"line":318,"code":"    it('should pick the right bootstrap url (custom)', () => {\n      addCustomBootstrap('http://localhost:9876/boot/remote.html');\n      const ampdoc = Services.ampdoc(window.document);\n      allowConsoleError(() => {\n        expect(() => {\n          getBootstrapBaseUrl(window.parent, ampdoc, true);\n        }).to.throw(/must not be on the same origin as the/);\n      });\n    });","file":"unit/3p/test-3p-frame.js","skipped":false,"dir":"test"},{"name":"should create frame with default url if custom disabled","suites":[],"updatePoint":{"line":327,"column":63,"index":12912},"line":327,"code":"    it('should create frame with default url if custom disabled', () => {\n      setupElementFunctions(container);\n      const iframe = getIframe(window, container, '_ping_', {\n        clientId: 'cidValue'\n      });\n      expect(iframe.src).to.equal('http://ads.localhost:9876/dist.3p/current/frame.max.html');\n    });","file":"unit/3p/test-3p-frame.js","skipped":false,"dir":"test"},{"name":"should prefetch bootstrap frame and JS","suites":[],"updatePoint":{"line":334,"column":46,"index":13213},"line":334,"code":"    it('should prefetch bootstrap frame and JS', () => {\n      mockMode({\n        isProd: true\n      });\n      const ampdoc = Services.ampdoc(window.document);\n      preloadBootstrap(window, 'avendor', ampdoc, preconnect);\n      // Wait for visible promise.\n      return ampdoc.whenFirstVisible().then(() => {\n        const fetches = document.querySelectorAll('link[rel=preload]');\n        expect(fetches).to.have.length(2);\n        expect(fetches[0].href).to.match(/^https:\\/\\/d-\\d+\\.ampproject\\.net\\/\\$internalRuntimeVersion\\$\\/frame\\.html$/);\n        expect(fetches[1]).to.have.property('href', 'https://3p.ampproject.net/$internalRuntimeVersion$/vendor/avendor.js');\n      });\n    });","file":"unit/3p/test-3p-frame.js","skipped":false,"dir":"test"},{"name":"should make sub domains (unique)","suites":[],"updatePoint":{"line":348,"column":40,"index":13896},"line":348,"code":"    it('should make sub domains (unique)', () => {\n      expect(getSubDomain(window)).to.match(/^d-\\d+$/);\n      expect(getSubDomain(window)).to.not.equal('d-00');\n    });","file":"unit/3p/test-3p-frame.js","skipped":false,"dir":"test"},{"name":"should make sub domains (Math)","suites":[],"updatePoint":{"line":352,"column":38,"index":14066},"line":352,"code":"    it('should make sub domains (Math)', () => {\n      const fakeWin = {\n        document,\n        Math\n      };\n      expect(getSubDomain(fakeWin)).to.match(/^d-\\d+$/);\n    });","file":"unit/3p/test-3p-frame.js","skipped":false,"dir":"test"},{"name":"should make sub domains (crypto)","suites":[],"updatePoint":{"line":359,"column":40,"index":14246},"line":359,"code":"    it('should make sub domains (crypto)', () => {\n      const fakeWin = {\n        document,\n        crypto: {\n          getRandomValues(arg) {\n            arg[0] = 123;\n            arg[1] = 987;\n          }\n        }\n      };\n      expect(getSubDomain(fakeWin)).to.equal('d-123987');\n    });","file":"unit/3p/test-3p-frame.js","skipped":false,"dir":"test"},{"name":"should make sub domains (fallback)","suites":[],"updatePoint":{"line":371,"column":42,"index":14541},"line":371,"code":"    it('should make sub domains (fallback)', () => {\n      const fakeWin = {\n        document,\n        Math: {\n          random() {\n            return 0.567;\n          }\n        }\n      };\n      expect(getSubDomain(fakeWin)).to.equal('d-5670');\n    });","file":"unit/3p/test-3p-frame.js","skipped":false,"dir":"test"},{"name":"uses a unique name based on domain","suites":[],"updatePoint":{"line":382,"column":42,"index":14794},"line":382,"code":"    it('uses a unique name based on domain', () => {\n      const viewerMock = env.sandbox.mock(Services.viewerForDoc(window.document));\n      viewerMock.expects('getUnconfirmedReferrerUrl').returns('http://acme.org/').twice();\n      mockMode({\n        isProd: true\n      });\n      const link = document.createElement('link');\n      link.setAttribute('rel', 'canonical');\n      link.setAttribute('href', 'https://foo.bar/baz');\n      document.head.appendChild(link);\n      const div = document.createElement('div');\n      div.setAttribute('type', '_ping_');\n      div.setAttribute('width', 100);\n      div.setAttribute('height', 200);\n      div.getIntersectionChangeEntry = function () {\n        return {\n          left: 0,\n          top: 0,\n          width: 0,\n          height: 0,\n          bottom: 0,\n          right: 0,\n          x: 0,\n          y: 0\n        };\n      };\n      div.getAmpDoc = function () {\n        return Services.ampdoc(window.document);\n      };\n      container.appendChild(div);\n      const name = JSON.parse(getIframe(window, div).name);\n      resetBootstrapBaseUrlForTesting(window);\n      resetCountForTesting();\n      const newName = JSON.parse(getIframe(window, div).name);\n      expect(name.host).to.match(/d-\\d+.ampproject.net/);\n      expect(name.type).to.match(/ping/);\n      expect(name.count).to.match(/1/);\n      expect(newName.host).to.match(/d-\\d+.ampproject.net/);\n      expect(newName.type).to.match(/ping/);\n      expect(newName.count).to.match(/1/);\n      expect(newName).not.to.equal(name);\n    });","file":"unit/3p/test-3p-frame.js","skipped":false,"dir":"test"},{"name":"should work without payload","suites":["serializeMessage"],"updatePoint":{"line":425,"column":37,"index":16371},"line":425,"code":"      it('should work without payload', () => {\n        const message = serializeMessage('msgtype', 'msgsentinel');\n        expect(message.indexOf('amp-')).to.equal(0);\n        expect(deserializeMessage(message)).to.deep.equal({\n          type: 'msgtype',\n          sentinel: 'msgsentinel'\n        });\n      });","file":"unit/3p/test-3p-frame.js","skipped":false,"dir":"test"},{"name":"should work with payload","suites":["serializeMessage"],"updatePoint":{"line":433,"column":34,"index":16680},"line":433,"code":"      it('should work with payload', () => {\n        const message = serializeMessage('msgtype', 'msgsentinel', {\n          type: 'type_override',\n          // override should be ignored\n          sentinel: 'sentinel_override',\n          // override should be ignored\n          x: 1,\n          y: 'abc'\n        });\n        expect(deserializeMessage(message)).to.deep.equal({\n          type: 'msgtype',\n          sentinel: 'msgsentinel',\n          x: 1,\n          y: 'abc'\n        });\n      });","file":"unit/3p/test-3p-frame.js","skipped":false,"dir":"test"},{"name":"should work with rtvVersion","suites":["serializeMessage"],"updatePoint":{"line":449,"column":37,"index":17177},"line":449,"code":"      it('should work with rtvVersion', () => {\n        const message = serializeMessage('msgtype', 'msgsentinel', {\n          type: 'type_override',\n          // override should be ignored\n          sentinel: 'sentinel_override',\n          // override should be ignored\n          x: 1,\n          y: 'abc'\n        }, 'rtv123');\n        expect(deserializeMessage(message)).to.deep.equal({\n          type: 'msgtype',\n          sentinel: 'msgsentinel',\n          x: 1,\n          y: 'abc'\n        });\n      });","file":"unit/3p/test-3p-frame.js","skipped":false,"dir":"test"},{"name":"should deserialize valid message","suites":["deserializeMessage"],"updatePoint":{"line":467,"column":42,"index":17740},"line":467,"code":"      it('should deserialize valid message', () => {\n        const message = deserializeMessage('amp-{\"type\":\"msgtype\",\"sentinel\":\"msgsentinel\",\"x\":1,\"y\":\"abc\"}');\n        expect(message).to.deep.equal({\n          type: 'msgtype',\n          sentinel: 'msgsentinel',\n          x: 1,\n          y: 'abc'\n        });\n      });","file":"unit/3p/test-3p-frame.js","skipped":false,"dir":"test"},{"name":"should deserialize valid message with rtv version","suites":["deserializeMessage"],"updatePoint":{"line":476,"column":59,"index":18080},"line":476,"code":"      it('should deserialize valid message with rtv version', () => {\n        const message = deserializeMessage('amp-rtv123{\"type\":\"msgtype\",\"sentinel\":\"msgsentinel\",' + '\"x\":1,\"y\":\"abc\"}');\n        expect(message).to.deep.equal({\n          type: 'msgtype',\n          sentinel: 'msgsentinel',\n          x: 1,\n          y: 'abc'\n        });\n      });","file":"unit/3p/test-3p-frame.js","skipped":false,"dir":"test"},{"name":"should return null if the input not a string","suites":["deserializeMessage"],"updatePoint":{"line":485,"column":54,"index":18426},"line":485,"code":"      it('should return null if the input not a string', () => {\n        expect(deserializeMessage({\n          x: 1,\n          y: 'abc'\n        })).to.be.null;\n      });","file":"unit/3p/test-3p-frame.js","skipped":false,"dir":"test"},{"name":"should return null if the input does not start with amp-","suites":["deserializeMessage"],"updatePoint":{"line":491,"column":66,"index":18608},"line":491,"code":"      it('should return null if the input does not start with amp-', () => {\n        expect(deserializeMessage('noamp-{\"type\":\"msgtype\",\"sentinel\":\"msgsentinel\"}')).to.be.null;\n      });","file":"unit/3p/test-3p-frame.js","skipped":false,"dir":"test"},{"name":"should return null if the input is not a json","suites":["deserializeMessage"],"updatePoint":{"line":494,"column":55,"index":18784},"line":494,"code":"      it('should return null if the input is not a json', () => {\n        expect(deserializeMessage('amp-other')).to.be.null;\n      });","file":"unit/3p/test-3p-frame.js","skipped":false,"dir":"test"},{"name":"should return null if failed to parse the input","suites":["deserializeMessage"],"updatePoint":{"line":497,"column":57,"index":18922},"line":497,"code":"      it('should return null if failed to parse the input', () => {\n        expectAsyncConsoleError(/MESSAGING: Failed to parse message/i, 2);\n        expect(deserializeMessage('amp-{\"type\",\"sentinel\":\"msgsentinel\"}')).to.be.null;\n        expect(deserializeMessage('amp-{\"type\":\"msgtype\"|\"sentinel\":\"msgsentinel\"}')).to.be.null;\n      });","file":"unit/3p/test-3p-frame.js","skipped":false,"dir":"test"},{"name":"should receive messages","suites":[],"updatePoint":{"line":26,"column":29,"index":758},"line":26,"code":"  it('should receive messages', () => {\n    let progress = '';\n    listenParent(testWin, 'test', function (d) {\n      progress += d.s;\n    });\n    postMessage(iframe, 'test', {\n      s: 'a'\n    }, '*', true);\n    postMessage(iframe, 'test', {\n      s: 'b'\n    }, '*', false);\n    postMessage(iframe, 'other', {\n      s: 'c'\n    }, '*', true);\n    postMessage(iframe, 'test', {\n      s: 'd'\n    }, '*', true);\n    return timer.promise(10).then(() => {\n      expect(progress).to.equal('ad');\n    });\n  });","file":"unit/3p/test-3p-messaging.js","skipped":false,"dir":"test"},{"name":"should receive more messages","suites":[],"updatePoint":{"line":47,"column":34,"index":1267},"line":47,"code":"  it('should receive more messages', () => {\n    let progress = '';\n    listenParent(testWin, 'test', function (d) {\n      progress += d.s;\n    });\n    listenParent(testWin, 'test', function (d) {\n      progress += d.s;\n    });\n    listenParent(testWin, 'test2', function (d) {\n      progress += d.s;\n    });\n    postMessage(iframe, 'test', {\n      s: 'a'\n    }, '*', true);\n    postMessage(iframe, 'test2', {\n      s: 'a'\n    }, '*', true);\n    postMessage(iframe, 'test2', {\n      s: 'a'\n    }, '*', true);\n    postMessage(iframe, 'test', {\n      s: 'b'\n    }, '*', false);\n    postMessage(iframe, 'other', {\n      s: 'c'\n    }, '*', true);\n    postMessage(iframe, 'test2', {\n      s: 'a'\n    }, '*', true);\n    postMessage(iframe, 'test', {\n      s: 'd'\n    }, '*', true);\n    return timer.promise(10).then(() => {\n      expect(progress).to.equal('aaaaadd');\n    });\n  });","file":"unit/3p/test-3p-messaging.js","skipped":false,"dir":"test"},{"name":"should support unlisten","suites":[],"updatePoint":{"line":83,"column":29,"index":2138},"line":83,"code":"  it('should support unlisten', () => {\n    let progress = '';\n    const unlisten0 = listenParent(testWin, 'test', function (d) {\n      progress += d.s;\n    });\n    const unlisten1 = listenParent(testWin, 'test', function (d) {\n      progress += d.s;\n    });\n    const unlisten2 = listenParent(testWin, 'test2', function (d) {\n      progress += d.s;\n    });\n    postMessage(iframe, 'test', {\n      s: 'a'\n    }, '*', true);\n    return timer.promise(10).then(() => {\n      expect(progress).to.equal('aa');\n      unlisten0();\n      postMessage(iframe, 'test2', {\n        s: 'a'\n      }, '*', true);\n      postMessage(iframe, 'test2', {\n        s: 'a'\n      }, '*', true);\n      postMessage(iframe, 'test', {\n        s: 'b'\n      }, '*', true);\n      return timer.promise(10).then(() => {\n        unlisten2();\n        unlisten1();\n        postMessage(iframe, 'test2', {\n          s: 'a'\n        }, '*', true);\n        postMessage(iframe, 'test', {\n          s: 'd'\n        }, '*', true);\n        return timer.promise(10).then(() => {\n          expect(progress).to.equal('aaaab');\n        });\n      });\n    });\n  });","file":"unit/3p/test-3p-messaging.js","skipped":false,"dir":"test"},{"name":"should not stop on errors","suites":[],"updatePoint":{"line":124,"column":31,"index":3253},"line":124,"code":"  it('should not stop on errors', () => {\n    let progress = '';\n    const origOnError = window.onError;\n    const expected = new Error('expected');\n    window.onerror = function (message, source, lineno, colno, error) {\n      if (error === expected) {\n        return;\n      }\n      origOnError.apply(this, arguments);\n    };\n    listenParent(testWin, 'test', function () {\n      throw expected;\n    });\n    listenParent(testWin, 'test', function (d) {\n      progress += d.s;\n    });\n    postMessage(iframe, 'test', {\n      s: 'a'\n    }, '*', true);\n    postMessage(iframe, 'test', {\n      s: 'd'\n    }, '*', true);\n    return timer.promise(10).catch(() => {}).then(() => {\n      window.onError = origOnError;\n      expect(progress).to.equal('ad');\n    });\n  });","file":"unit/3p/test-3p-messaging.js","skipped":false,"dir":"test"},{"name":"should allow sharing between configured networks","suites":[],"updatePoint":{"line":3,"column":54,"index":165},"line":3,"code":"  it('should allow sharing between configured networks', () => expect(masterSelection(env.win, 'fake_network').name).to.equal('frame_fake_network_master'));","file":"unit/3p/test-ampcontext-integration.js","skipped":false,"dir":"test"},{"name":"should require a window.name","suites":[],"updatePoint":{"line":5,"column":34,"index":270},"line":5,"code":"  it('should require a window.name', () => {\n    window.name = undefined;\n    expect(initRecaptcha).to.throw('window');\n  });","file":"unit/3p/test-recaptcha.js","skipped":false,"dir":"test"},{"name":"should require a sitekey in the window.name dataObject","suites":[],"updatePoint":{"line":9,"column":60,"index":422},"line":9,"code":"  it('should require a sitekey in the window.name dataObject', () => {\n    allowConsoleError(() => {\n      window.name = '{}';\n      expect(initRecaptcha).to.throw('sitekey');\n      window.name = undefined;\n    });\n  });","file":"unit/3p/test-recaptcha.js","skipped":false,"dir":"test"},{"name":"should require a global property in the window.name dataObject","suites":[],"updatePoint":{"line":16,"column":68,"index":651},"line":16,"code":"  it('should require a global property in the window.name dataObject', () => {\n    allowConsoleError(() => {\n      window.name = '{\"sitekey\":\"sitekey\"}';\n      expect(initRecaptcha).to.throw('global');\n      window.name = undefined;\n    });\n  });","file":"unit/3p/test-recaptcha.js","skipped":false,"dir":"test"},{"name":"should require the origin","suites":["doesOriginDomainMatchIframeSrc()"],"updatePoint":{"line":32,"column":33,"index":1195},"line":32,"code":"    it('should require the origin', () => {\n      return doesOriginDomainMatchIframeSrc({}, {}).catch(err => {\n        expect(err.message.includes('origin')).to.be.ok;\n      });\n    });","file":"unit/3p/test-recaptcha.js","skipped":false,"dir":"test"},{"name":"should allow cache domains","suites":["doesOriginDomainMatchIframeSrc()"],"updatePoint":{"line":37,"column":34,"index":1382},"line":37,"code":"    it('should allow cache domains', () => {\n      return doesOriginDomainMatchIframeSrc(getMockIframeWindowWithLocation('https://example-com.recaptcha.' + urls.thirdPartyFrameHost), {\n        origin: 'https://example-com.cdn.ampproject.org'\n      }).then(() => {\n        expect(true).to.be.ok;\n      });\n    });","file":"unit/3p/test-recaptcha.js","skipped":false,"dir":"test"},{"name":"should allow canonical domains","suites":["doesOriginDomainMatchIframeSrc()"],"updatePoint":{"line":44,"column":38,"index":1699},"line":44,"code":"    it('should allow canonical domains', () => {\n      return doesOriginDomainMatchIframeSrc(getMockIframeWindowWithLocation('https://example-com.recaptcha.' + urls.thirdPartyFrameHost), {\n        origin: 'https://example.com'\n      }).then(() => {\n        expect(true).to.be.ok;\n      });\n    });","file":"unit/3p/test-recaptcha.js","skipped":false,"dir":"test"},{"name":"should allow punycode curls encoded domains","suites":["doesOriginDomainMatchIframeSrc()"],"updatePoint":{"line":51,"column":51,"index":2010},"line":51,"code":"    it('should allow punycode curls encoded domains', () => {\n      return doesOriginDomainMatchIframeSrc(getMockIframeWindowWithLocation('https://xn--bcher-ch-65a.recaptcha.' + urls.thirdPartyFrameHost), {\n        origin: 'https://xn--bcher-kva.ch'\n      }).then(() => {\n        expect(true).to.be.ok;\n      });\n    });","file":"unit/3p/test-recaptcha.js","skipped":false,"dir":"test"},{"name":"should allow sha256 curls encoded domains","suites":["doesOriginDomainMatchIframeSrc()"],"updatePoint":{"line":58,"column":49,"index":2329},"line":58,"code":"    it('should allow sha256 curls encoded domains', () => {\n      return doesOriginDomainMatchIframeSrc(getMockIframeWindowWithLocation('https://a6h5moukddengbsjm77rvbosevwuduec2blkjva4223o4bgafgla.recaptcha.' + urls.thirdPartyFrameHost), {\n        origin: 'https://hello.xn--4gbrim.xn----rmckbbajlc6dj7bxne2c.xn--wgbh1c'\n      }).then(() => {\n        expect(true).to.be.ok;\n      });\n    });","file":"unit/3p/test-recaptcha.js","skipped":false,"dir":"test"},{"name":"should create an AdPlugg ad tag","suites":["adplugg"],"updatePoint":{"line":48,"column":39,"index":1194},"line":48,"code":"    it('should create an AdPlugg ad tag', () => {\n      // Call the function.\n      adplugg(win, testData);\n\n      // Assert that an adplugg ad tag was created.\n      const adTags = win.document.getElementsByClassName('adplugg-tag');\n      expect(adTags).to.have.length(1);\n    });","file":"unit/ads/test-adplugg.js","skipped":false,"dir":"test"},{"name":"should queue an anon function to register the event listeners","suites":["adplugg"],"updatePoint":{"line":56,"column":69,"index":1506},"line":56,"code":"    it('should queue an anon function to register the event listeners', () => {\n      // Create the async command queue.\n      win.AdPlugg = [];\n\n      // Call the function.\n      adplugg(win, testData);\n\n      // Assert that the function was queued as expected.\n      expect(win.AdPlugg).to.have.length(2);\n      expect(win.AdPlugg[0]).to.be.an.instanceof(Function);\n    });","file":"unit/ads/test-adplugg.js","skipped":false,"dir":"test"},{"name":"should queue the run command to fill the tag","suites":["adplugg"],"updatePoint":{"line":67,"column":52,"index":1865},"line":67,"code":"    it('should queue the run command to fill the tag', () => {\n      // Create the async command queue.\n      win.AdPlugg = [];\n\n      // Call the function.\n      adplugg(win, testData);\n\n      // Assert that the run command was queued as expected.\n      expect(win.AdPlugg).to.have.length(2);\n      expect(win.AdPlugg[1]).to.be.an('object');\n      expect(win.AdPlugg[1]).to.include.keys('command');\n      expect(win.AdPlugg[1].command).to.equal('run');\n    });","file":"unit/ads/test-adplugg.js","skipped":false,"dir":"test"},{"name":"implement the renderStart API","suites":["adplugg"],"updatePoint":{"line":80,"column":37,"index":2312},"line":80,"code":"    it('implement the renderStart API', () => {\n      // Set up mocks, spys, etc.\n      const renderStartSpy = env.sandbox.stub(win.context, 'renderStart');\n      win.AdPlugg = {\n        push: function () {},\n        on: function () {}\n      };\n      const AdPluggPushSpy = env.sandbox.spy(win.AdPlugg, 'push');\n      const AdPluggOnSpy = env.sandbox.spy(win.AdPlugg, 'on');\n\n      // Call the function.\n      adplugg(win, testData);\n\n      // Assert that AdPlugg.push was called as expected\n      expect(AdPluggPushSpy).to.be.calledTwice;\n\n      // Call the queued function that registers the event listeners\n      const func = AdPluggPushSpy.getCall(0).args[0];\n      func();\n\n      // Assert that AdPlugg.on was called as expected\n      expect(AdPluggOnSpy).to.be.calledTwice;\n\n      // Call the queued function that registers the event listeners\n      const {\n        args\n      } = AdPluggOnSpy.getCall(0);\n\n      // Assert that the renderStart listener was registered\n      expect(args[1]).to.equal('adplugg:renderStart');\n\n      // Get the listener function and spy on it\n      const listenerFunc = args[2];\n      const listenerFuncSpy = env.sandbox.spy(listenerFunc);\n\n      // Call the listener function (with a mock Event)\n      const event = win.document.createEvent('Event');\n      event.initEvent('adplugg:renderStart', true, true);\n      event.width = 300;\n      event.height = 250;\n      listenerFuncSpy(event);\n\n      // Assert that renderStart API was called as expected\n      expect(renderStartSpy).to.be.calledOnce;\n      const renderStartArgs = renderStartSpy.getCall(0).args[0];\n      expect(renderStartArgs.width).to.equal(300);\n      expect(renderStartArgs.height).to.equal(250);\n    });","file":"unit/ads/test-adplugg.js","skipped":false,"dir":"test"},{"name":"implement the noContentAvailable API","suites":["adplugg"],"updatePoint":{"line":128,"column":44,"index":4030},"line":128,"code":"    it('implement the noContentAvailable API', () => {\n      // Set up mocks, spys, etc.\n      const noContentAvailableSpy = env.sandbox.stub(win.context, 'noContentAvailable');\n      win.AdPlugg = {\n        push: function () {},\n        on: function () {}\n      };\n      const AdPluggPushSpy = env.sandbox.spy(win.AdPlugg, 'push');\n      const AdPluggOnSpy = env.sandbox.spy(win.AdPlugg, 'on');\n\n      // Call the function.\n      adplugg(win, testData);\n\n      // Assert that AdPlugg.push was called as expected\n      expect(AdPluggPushSpy).to.be.calledTwice;\n\n      // Call the queued function that registers the event listeners\n      const func = AdPluggPushSpy.getCall(0).args[0];\n      func();\n\n      // Assert that AdPlugg.on was called as expected\n      expect(AdPluggOnSpy).to.be.calledTwice;\n\n      // Call the queued function that registers the event listeners\n      const {\n        args\n      } = AdPluggOnSpy.getCall(1);\n\n      // Assert that the noContentAvailable listener was registered\n      expect(args[1]).to.equal('adplugg:noContentAvailable');\n\n      // Get the listener function and spy on it\n      const listenerFunc = args[2];\n      const listenerFuncSpy = env.sandbox.spy(listenerFunc);\n\n      // Call the listener function (with a mock Event)\n      const event = win.document.createEvent('Event');\n      event.initEvent('adplugg:noContentAvailable', true, true);\n      listenerFuncSpy(event);\n\n      // Assert that noContentAvailable API was called as expected\n      expect(noContentAvailableSpy).to.be.calledOnce;\n    });","file":"unit/ads/test-adplugg.js","skipped":false,"dir":"test"},{"name":"should validate missing placementkey","suites":[],"updatePoint":{"line":40,"column":42,"index":1227},"line":40,"code":"  it('should validate missing placementkey', () => {\n    expect(() => aduptech(win, {})).to.throw(/Missing attribute/);\n  });","file":"unit/ads/test-aduptech.js","skipped":false,"dir":"test"},{"name":"should add id to html container","suites":[],"updatePoint":{"line":43,"column":37,"index":1348},"line":43,"code":"  it('should add id to html container', () => {\n    aduptech(win, {\n      placementkey: 'crazyPlacementKey'\n    });\n    expect(win.document.getElementById(ADUPTECH_ELEMENT_ID)).not.to.be.null;\n  });","file":"unit/ads/test-aduptech.js","skipped":false,"dir":"test"},{"name":"should load api","suites":[],"updatePoint":{"line":49,"column":21,"index":1531},"line":49,"code":"  it('should load api', () => {\n    aduptech(win, {\n      placementkey: 'crazyPlacementKey'\n    });\n    expect(loadScriptSpy).to.have.been.calledOnceWith(win, ADUPTECH_API_URL, env.sandbox.match.func);\n  });","file":"unit/ads/test-aduptech.js","skipped":false,"dir":"test"},{"name":"should call api with minimum attributes","suites":[],"updatePoint":{"line":55,"column":45,"index":1763},"line":55,"code":"  it('should call api with minimum attributes', () => {\n    aduptech(win, {\n      placementkey: 'crazyPlacementKey'\n    });\n    expect(win.uAd.embed).to.have.been.calledOnceWith(ADUPTECH_ELEMENT_ID, {\n      amp: true,\n      onAds: env.sandbox.match.func,\n      onNoAds: env.sandbox.match.func,\n      placementkey: 'crazyPlacementKey',\n      responsive: true\n    });\n  });","file":"unit/ads/test-aduptech.js","skipped":false,"dir":"test"},{"name":"should call api with all attributes","suites":[],"updatePoint":{"line":67,"column":41,"index":2131},"line":67,"code":"  it('should call api with all attributes', () => {\n    aduptech(win, {\n      placementkey: 'crazyPlacementKey',\n      mincpc: '0.33',\n      query: 'foo;bar',\n      pageurl: 'http://www.adup-tech.com',\n      gdpr: '0',\n      // eslint-disable-next-line local/camelcase\n      gdpr_consent: 'crazyConsentString',\n      adtest: '1'\n    });\n    expect(win.uAd.embed).to.have.been.calledOnceWith(ADUPTECH_ELEMENT_ID, {\n      adtest: '1',\n      amp: true,\n      gdpr: '0',\n      // eslint-disable-next-line local/camelcase\n      gdpr_consent: 'crazyConsentString',\n      mincpc: '0.33',\n      onAds: env.sandbox.match.func,\n      onNoAds: env.sandbox.match.func,\n      pageurl: 'http://www.adup-tech.com',\n      placementkey: 'crazyPlacementKey',\n      query: 'foo;bar',\n      responsive: true\n    });\n  });","file":"unit/ads/test-aduptech.js","skipped":false,"dir":"test"},{"name":"should call api with \"context.sourceUrl\" as fallback for \"pageurl\"","suites":[],"updatePoint":{"line":93,"column":72,"index":2964},"line":93,"code":"  it('should call api with \"context.sourceUrl\" as fallback for \"pageurl\"', () => {\n    win.context.sourceUrl = 'http://www.source.url';\n    aduptech(win, {\n      placementkey: 'crazyPlacementKey'\n    });\n    expect(win.uAd.embed).to.have.been.calledOnce;\n    expect(win.uAd.embed.getCall(0).args[1].pageurl).to.equal(win.context.sourceUrl);\n  });","file":"unit/ads/test-aduptech.js","skipped":false,"dir":"test"},{"name":"should call api with \"context.location.href\" as fallback for \"pageurl\"","suites":[],"updatePoint":{"line":101,"column":76,"index":3315},"line":101,"code":"  it('should call api with \"context.location.href\" as fallback for \"pageurl\"', () => {\n    win.context.sourceUrl = null;\n    win.context.location = {\n      href: 'http://www.win.location.href'\n    };\n    aduptech(win, {\n      placementkey: 'crazyPlacementKey'\n    });\n    expect(win.uAd.embed).to.have.been.calledOnce;\n    expect(win.uAd.embed.getCall(0).args[1].pageurl).to.equal(win.context.location.href);\n  });","file":"unit/ads/test-aduptech.js","skipped":false,"dir":"test"},{"name":"should call api with prefered \"context.consentSharedData.consentString\" as \"gdpr_consent\"","suites":[],"updatePoint":{"line":112,"column":95,"index":3749},"line":112,"code":"  it('should call api with prefered \"context.consentSharedData.consentString\" as \"gdpr_consent\"', () => {\n    win.context.consentSharedData = {\n      consentString: 'realConsentString'\n    };\n    aduptech(win, {\n      placementkey: 'crazyPlacementKey',\n      gdpr: true,\n      // eslint-disable-next-line local/camelcase\n      gdpr_consent: 'customConsentString'\n    });\n    expect(win.uAd.embed).to.have.been.calledOnce;\n    expect(win.uAd.embed.getCall(0).args[1].gdpr).to.be.true;\n    expect(win.uAd.embed.getCall(0).args[1].gdpr_consent).to.equal('realConsentString');\n  });","file":"unit/ads/test-aduptech.js","skipped":false,"dir":"test"},{"name":"should call \"context.renderStart()\" on \"onAds\" callback","suites":[],"updatePoint":{"line":126,"column":61,"index":4294},"line":126,"code":"  it('should call \"context.renderStart()\" on \"onAds\" callback', () => {\n    win.context.renderStart = env.sandbox.spy();\n    win.context.noContentAvailable = env.sandbox.spy();\n    aduptech(win, {\n      placementkey: 'crazyPlacementKey'\n    });\n    expect(win.uAd.embed).to.have.been.calledOnce;\n    win.uAd.embed.getCall(0).args[1].onAds();\n    expect(win.context.renderStart).to.have.been.calledOnce;\n    expect(win.context.noContentAvailable).not.to.have.been.called;\n  });","file":"unit/ads/test-aduptech.js","skipped":false,"dir":"test"},{"name":"should call \"context.noContentAvailable()\" on \"onNoAds\" callback","suites":[],"updatePoint":{"line":137,"column":70,"index":4780},"line":137,"code":"  it('should call \"context.noContentAvailable()\" on \"onNoAds\" callback', () => {\n    win.context.renderStart = env.sandbox.spy();\n    win.context.noContentAvailable = env.sandbox.spy();\n    aduptech(win, {\n      placementkey: 'crazyPlacementKey'\n    });\n    expect(win.uAd.embed).to.have.been.calledOnce;\n    win.uAd.embed.getCall(0).args[1].onNoAds();\n    expect(win.context.renderStart).not.to.have.been.called;\n    expect(win.context.noContentAvailable).to.have.been.calledOnce;\n  });","file":"unit/ads/test-aduptech.js","skipped":false,"dir":"test"},{"name":"should create a csa container","suites":["inputs"],"updatePoint":{"line":53,"column":37,"index":1513},"line":53,"code":"    it('should create a csa container', () => {\n      csa(win, getAds(AD_TYPE.AFS));\n      const container = win.document.getElementById('csacontainer');\n      expect(container).not.to.be.null;\n    });","file":"unit/ads/test-csa.js","skipped":false,"dir":"test"},{"name":"should request AFS","suites":["ad request"],"updatePoint":{"line":69,"column":26,"index":2025},"line":69,"code":"    it('should request AFS', () => {\n      csa(win, getAds(AD_TYPE.AFS));\n      expect(googCsaSpy.args[0][0]).to.equal('ads');\n    });","file":"unit/ads/test-csa.js","skipped":false,"dir":"test"},{"name":"should request AFSh","suites":["ad request"],"updatePoint":{"line":73,"column":27,"index":2161},"line":73,"code":"    it('should request AFSh', () => {\n      csa(win, getAds(AD_TYPE.AFSH));\n      expect(googCsaSpy.args[0][0]).to.equal('plas');\n    });","file":"unit/ads/test-csa.js","skipped":false,"dir":"test"},{"name":"should request AFSh (backfill)","suites":["ad request"],"updatePoint":{"line":77,"column":38,"index":2310},"line":77,"code":"    it('should request AFSh (backfill)', () => {\n      csa(win, getAds(AD_TYPE.AFSH_BACKFILL));\n      expect(googCsaSpy.args[0][0]).to.equal('plas');\n    });","file":"unit/ads/test-csa.js","skipped":false,"dir":"test"},{"name":"when ads are ATF and CSA container > AMP container","suites":["callback"],"updatePoint":{"line":128,"column":58,"index":3934},"line":128,"code":"    it('when ads are ATF and CSA container > AMP container', () => {\n      // Fake CSA ads are 300px, AMP container is 100px\n      setContainerHeight('300px');\n      setContextHeight(100);\n      const requestResizeSpy = env.sandbox.stub(win.context, 'requestResize').returns(Promise.reject());\n\n      // Try to resize when ads are loaded\n      resizeIframe(win, 'csacontainer');\n      return Promise.resolve().then(() => {\n        const overflow = win.document.getElementById('overflow');\n        const container = win.document.getElementById('csacontainer');\n        const requestedHeight = requestResizeSpy.args[0][1];\n\n        // Overflow should exist and be displayed\n        expect(overflow).to.not.be.null;\n        expect(overflow).not.to.have.display('none');\n        // We should have tried to resize to 300 px\n        expect(requestedHeight).to.equal(300);\n        // Container should be set to AMP height (100) - overflow height (40)\n        expect(container.style.height).to.equal('60px');\n      });\n    });","file":"unit/ads/test-csa.js","skipped":false,"dir":"test"},{"name":"when ads are ATF and CSA container < AMP container","suites":["callback"],"updatePoint":{"line":150,"column":58,"index":4953},"line":150,"code":"    it('when ads are ATF and CSA container < AMP container', () => {\n      // Fake CSA ads are 300px, AMP container is 400px\n      setContainerHeight('300px');\n      setContextHeight(400);\n\n      // Set up\n      const requestResizeSpy = env.sandbox.stub(win.context, 'requestResize').returns(Promise.reject());\n      // Try to resize when ads are loaded\n      resizeIframe(win, 'csacontainer');\n      return Promise.resolve().then(() => {\n        const overflow = win.document.getElementById('overflow');\n        const container = win.document.getElementById('csacontainer');\n        const requestedHeight = requestResizeSpy.args[0][1];\n\n        // Overflow should NOT be present\n        expect(overflow).to.be.null;\n        // We should have tried to resize to 300 px\n        expect(requestedHeight).to.equal(300);\n        // Container should not have been changed\n        expect(container.style.height).to.equal('300px');\n      });\n    });","file":"unit/ads/test-csa.js","skipped":false,"dir":"test"},{"name":"when ads are BTF and CSA container > AMP container","suites":["callback"],"updatePoint":{"line":172,"column":58,"index":5895},"line":172,"code":"    it('when ads are BTF and CSA container > AMP container', () => {\n      // Fake CSA ads are 300px, AMP container is 100px\n      setContainerHeight('300px');\n      setContextHeight(100);\n\n      // Set up\n      const requestResizeSpy = env.sandbox.stub(win.context, 'requestResize').returns(Promise.resolve());\n      // Try to resize when ads are loaded\n      resizeIframe(win, 'csacontainer');\n      return Promise.resolve().then(() => {\n        // Resize requests below the fold succeeed\n        const requestedHeight = requestResizeSpy.args[0][1];\n        const overflow = win.document.getElementById('overflow');\n        const container = win.document.getElementById('csacontainer');\n\n        // Overflow should be present, but hidden\n        expect(overflow).to.have.display('none');\n        // We should have tried to resize to 300 px\n        expect(requestedHeight).to.equal(300);\n        // Container should be set to full CSA height\n        expect(container.style.height).to.equal('300px');\n      });\n    });","file":"unit/ads/test-csa.js","skipped":false,"dir":"test"},{"name":"when ads are BTF and CSA container < AMP container","suites":["callback"],"updatePoint":{"line":195,"column":58,"index":6914},"line":195,"code":"    it('when ads are BTF and CSA container < AMP container', () => {\n      // Fake CSA ads are 300px, AMP container is 400px\n      setContainerHeight('300px');\n      setContextHeight(400);\n\n      // Set up\n      const requestResizeSpy = env.sandbox.stub(win.context, 'requestResize').returns(Promise.resolve());\n      // Try to resize when ads are loaded\n      resizeIframe(win, 'csacontainer');\n      return Promise.resolve().then(() => {\n        // Resize requests below the fold succeed\n        const requestedHeight = requestResizeSpy.args[0][1];\n        const overflow = win.document.getElementById('overflow');\n        const container = win.document.getElementById('csacontainer');\n\n        // Overflow should not exist\n        expect(overflow).to.be.null;\n        // We should have tried to resize to 300 px\n        expect(requestedHeight).to.equal(300);\n        // Container should be set to full CSA height\n        expect(container.style.height).to.equal('300px');\n      });\n    });","file":"unit/ads/test-csa.js","skipped":false,"dir":"test"},{"name":"when ads do not load","suites":["callback"],"updatePoint":{"line":218,"column":28,"index":7876},"line":218,"code":"    it('when ads do not load', () => {\n      setContainerHeight('0px');\n      setContextHeight(400);\n\n      // Set up\n      const noAdsSpy = env.sandbox.stub(win.context, 'noContentAvailable');\n      // No backfill, ads don't load\n      callbackWithNoBackfill(win, 'csacontainer', false);\n      expect(noAdsSpy).to.be.called;\n    });","file":"unit/ads/test-csa.js","skipped":false,"dir":"test"},{"name":"when ads do not load but there is backfill","suites":["callback"],"updatePoint":{"line":228,"column":50,"index":8232},"line":228,"code":"    it('when ads do not load but there is backfill', () => {\n      setContainerHeight('0px');\n      setContextHeight(400);\n\n      // Set up stubs and spys\n      const noAdsSpy = env.sandbox.stub(win.context, 'noContentAvailable');\n      win._googCsa = function () {};\n      const _googCsaSpy = env.sandbox.stub(win, '_googCsa').callsFake(() => {});\n\n      // Ads don't load but there is backfill\n      callbackWithBackfill(win, {}, {}, 'csacontainer', false);\n\n      // Should not tell AMP we have no ads\n      expect(noAdsSpy).not.to.be.called;\n      // Should make a new request for ads\n      expect(_googCsaSpy.args[0][0]).to.equal('ads');\n    });","file":"unit/ads/test-csa.js","skipped":false,"dir":"test"},{"name":"should set pubmine publisher config on global if loader in a master frame","suites":[],"updatePoint":{"line":21,"column":79,"index":609},"line":21,"code":"  it('should set pubmine publisher config on global if loader in a master frame', () => {\n    win.context = {\n      isMaster: true\n    };\n    const expectedConfig = {\n      pt: 2,\n      ht: 2,\n      tn: 'amp',\n      amp: true,\n      consent: 0,\n      siteid: 12345,\n      blogid: 23456\n    };\n    pubmine(win, mockData);\n    expect(win.__ATA_PP).to.deep.equal(expectedConfig);\n    expect(win.__ATA.cmd).to.be.an('array');\n    expect(win.__ATA.cmd).to.have.length(1);\n    expect(getPubmineScriptElement()).to.be.ok;\n    expect(getSlotElement()).to.be.ok;\n  });","file":"unit/ads/test-pubmine.js","skipped":false,"dir":"test"},{"name":"should add a command and not to load the script if loaded in a slave frame","suites":[],"updatePoint":{"line":41,"column":80,"index":1170},"line":41,"code":"  it('should add a command and not to load the script if loaded in a slave frame', () => {\n    win.__ATA = {\n      cmd: []\n    };\n    win.context = {\n      isMaster: false,\n      master: win\n    };\n    pubmine(win, mockData);\n    expect(win.context.master.__ATA.cmd).to.have.length(1);\n    expect(getPubmineScriptElement()).to.be.null;\n    expect(getSlotElement()).to.be.ok;\n  });","file":"unit/ads/test-pubmine.js","skipped":false,"dir":"test"},{"name":"should add root div","suites":[],"updatePoint":{"line":48,"column":25,"index":1389},"line":48,"code":"  it('should add root div', () => {\n    ssp(win, commonData);\n    const rootElement = win.document.getElementById('id-1');\n    expect(rootElement).to.not.be.null;\n  });","file":"unit/ads/test-ssp.js","skipped":false,"dir":"test"},{"name":"should call validateData()","suites":[],"updatePoint":{"line":53,"column":32,"index":1565},"line":53,"code":"  it('should call validateData()', () => {\n    ssp(win, commonData);\n    expect(_3p.validateData).to.have.been.calledOnce;\n    expect(_3p.validateData).to.have.been.calledWith({\n      width: '200',\n      height: '200',\n      said: 'said1234',\n      position: '{ \"id\": \"id-1\", \"width\": \"200\", \"height\": \"200\", \"zoneId\": \"1234\" }'\n    }, ['position'], ['site', 'said']);\n  });","file":"unit/ads/test-ssp.js","skipped":false,"dir":"test"},{"name":"should call computeInMasterFrame()","suites":[],"updatePoint":{"line":63,"column":40,"index":1948},"line":63,"code":"  it('should call computeInMasterFrame()', () => {\n    ssp(win, commonData);\n    expect(_3p.computeInMasterFrame).to.have.been.calledOnce;\n    expect(_3p.computeInMasterFrame).to.have.been.calledWith(win, 'ssp-load');\n  });","file":"unit/ads/test-ssp.js","skipped":false,"dir":"test"},{"name":"should call loadScript()","suites":[],"updatePoint":{"line":68,"column":30,"index":2162},"line":68,"code":"  it('should call loadScript()', () => {\n    _3p.computeInMasterFrame.restore();\n    sandbox.stub(_3p, 'computeInMasterFrame').callsFake((global, id, work) => work());\n    ssp(win, commonData);\n    expect(_3p.loadScript).to.have.been.calledOnce;\n    expect(_3p.loadScript).to.have.been.calledWith(win, 'https://ssp.imedia.cz/static/js/ssp.js');\n  });","file":"unit/ads/test-ssp.js","skipped":false,"dir":"test"},{"name":"should call finish work with true","suites":[],"updatePoint":{"line":75,"column":39,"index":2522},"line":75,"code":"  it('should call finish work with true', () => {\n    _3p.computeInMasterFrame.restore();\n    _3p.loadScript.restore();\n    const callbackSpy = sandbox.spy();\n    const sssp = {\n      config: sandbox.spy(),\n      writeAd: sandbox.spy()\n    };\n    sandbox.stub(_3p, 'loadScript').callsFake((window, url, cb) => {\n      // Mock script adding global object\n      window.sssp = sssp;\n      cb();\n    });\n    sandbox.stub(_3p, 'computeInMasterFrame').callsFake((global, id, work) => work(callbackSpy));\n    ssp(win, commonData);\n    expect(callbackSpy).to.have.been.calledOnce;\n    expect(callbackSpy).to.have.been.calledWith(true);\n  });","file":"unit/ads/test-ssp.js","skipped":false,"dir":"test"},{"name":"should call ssp.config()","suites":[],"updatePoint":{"line":93,"column":30,"index":3147},"line":93,"code":"  it('should call ssp.config()', () => {\n    _3p.computeInMasterFrame.restore();\n    _3p.loadScript.restore();\n    const callbackSpy = sandbox.spy();\n    const sssp = {\n      config: sandbox.spy(),\n      writeAd: sandbox.spy()\n    };\n    sandbox.stub(_3p, 'loadScript').callsFake((window, url, cb) => {\n      // Mock script adding global object\n      window.sssp = sssp;\n      cb();\n    });\n    sandbox.stub(_3p, 'computeInMasterFrame').callsFake((global, id, work) => work(callbackSpy));\n    ssp(win, commonData);\n    expect(sssp.config).to.have.been.calledOnce;\n    expect(sssp.config).to.have.been.calledWith({\n      site: 'https://test.com',\n      said: 'said1234'\n    });\n  });","file":"unit/ads/test-ssp.js","skipped":false,"dir":"test"},{"name":"should call context.noContentAvailable() when position is invalid","suites":[],"updatePoint":{"line":114,"column":71,"index":3871},"line":114,"code":"  it('should call context.noContentAvailable() when position is invalid', () => {\n    _3p.computeInMasterFrame.restore();\n    _3p.loadScript.restore();\n    sandbox.stub(_3p, 'computeInMasterFrame').callsFake((global, id, work, cb) => cb(true));\n    commonData.position = '{}';\n    ssp(win, commonData);\n    expect(win.context.renderStart).to.not.have.been.called;\n    expect(win.context.noContentAvailable).to.have.been.calledOnce;\n    expect(win.context.noContentAvailable).to.have.been.calledWith();\n  });","file":"unit/ads/test-ssp.js","skipped":false,"dir":"test"},{"name":"should call context.noContentAvailable() when script is not loaded","suites":[],"updatePoint":{"line":124,"column":72,"index":4380},"line":124,"code":"  it('should call context.noContentAvailable() when script is not loaded', () => {\n    _3p.computeInMasterFrame.restore();\n    _3p.loadScript.restore();\n    const sssp = {\n      config: sandbox.spy(),\n      getAds: sandbox.spy(),\n      writeAd: sandbox.spy()\n    };\n    const callbackSpy = sandbox.spy();\n    sandbox.stub(_3p, 'loadScript').callsFake((window, url, cb) => {\n      // Mock script adding global object\n      window.sssp = sssp;\n      window.context.master.ssp = sssp;\n      window.ssp = sssp;\n      cb();\n    });\n    sandbox.stub(_3p, 'computeInMasterFrame').callsFake((global, id, work, cb) => {\n      work(callbackSpy);\n      cb(false);\n    });\n    ssp(win, commonData);\n    expect(win.context.renderStart).to.not.have.been.called;\n    expect(win.context.noContentAvailable).to.have.been.calledOnce;\n    expect(win.context.noContentAvailable).to.have.been.calledWith();\n  });","file":"unit/ads/test-ssp.js","skipped":false,"dir":"test"},{"name":"should call getAds()","suites":[],"updatePoint":{"line":149,"column":26,"index":5226},"line":149,"code":"  it('should call getAds()', () => {\n    _3p.computeInMasterFrame.restore();\n    _3p.loadScript.restore();\n    const sssp = {\n      config: sandbox.spy(),\n      getAds: sandbox.spy(),\n      writeAd: sandbox.spy()\n    };\n    const callbackSpy = sandbox.spy();\n    sandbox.stub(_3p, 'loadScript').callsFake((window, url, cb) => {\n      // Mock script adding global object\n      window.sssp = sssp;\n      cb();\n    });\n    sandbox.stub(_3p, 'computeInMasterFrame').callsFake((global, id, work, cb) => {\n      work(callbackSpy);\n      cb(true);\n    });\n    ssp(win, commonData);\n    expect(sssp.getAds).to.have.been.calledOnce;\n    expect(sssp.getAds).to.have.been.calledWith([{\n      id: 'id-1',\n      width: '200',\n      height: '200',\n      zoneId: '1234'\n    }], {\n      AMPcallback: sandbox.match.func\n    });\n  });","file":"unit/ads/test-ssp.js","skipped":false,"dir":"test"},{"name":"sizeAgainstWindow() should generate sizing object","suites":[],"updatePoint":{"line":178,"column":55,"index":6072},"line":178,"code":"  it('sizeAgainstWindow() should generate sizing object', () => {\n    const sizing = sizeAgainstWindow(100, {\n      width: 200,\n      height: 100\n    });\n    expect(sizing).to.eql({\n      width: 100,\n      height: 50\n    });\n  });","file":"unit/ads/test-ssp.js","skipped":false,"dir":"test"},{"name":"sizeAgainstWindow() should not generate sizing object","suites":[],"updatePoint":{"line":188,"column":59,"index":6307},"line":188,"code":"  it('sizeAgainstWindow() should not generate sizing object', () => {\n    const sizing = sizeAgainstWindow(100, {\n      width: 100,\n      height: 100\n    });\n    expect(sizing).to.be.undefined;\n  });","file":"unit/ads/test-ssp.js","skipped":false,"dir":"test"},{"name":"handlePosition() should center and size element","suites":[],"updatePoint":{"line":195,"column":53,"index":6501},"line":195,"code":"  it('handlePosition() should center and size element', () => {\n    const div = win.document.createElement('div');\n    win.document.body.appendChild(div);\n    handlePosition(div, true, {\n      width: '100%',\n      height: '100%'\n    });\n    const divStyles = {\n      width: div.style.width,\n      height: div.style.height,\n      position: div.style.position,\n      top: div.style.top,\n      left: div.style.left,\n      transform: div.style.transform,\n      maxWidth: div.style.maxWidth\n    };\n    expect(divStyles).to.eql({\n      width: '100%',\n      height: '100%',\n      position: 'absolute',\n      top: '50%',\n      left: '50%',\n      transform: 'translate(-50%, -50%)',\n      maxWidth: '100%'\n    });\n  });","file":"unit/ads/test-ssp.js","skipped":false,"dir":"test"},{"name":"handlePositionResponsive() should center element","suites":[],"updatePoint":{"line":221,"column":54,"index":7213},"line":221,"code":"  it('handlePositionResponsive() should center element', () => {\n    const div = win.document.createElement('div');\n    win.document.body.appendChild(div);\n    const e = {\n      data: JSON.stringify({\n        height: 200\n      })\n    };\n    handlePositionResponsive(e, div);\n    const divStyles = {\n      height: div.style.height,\n      position: div.style.position,\n      top: div.style.top,\n      left: div.style.left,\n      transform: div.style.transform,\n      maxWidth: div.style.maxWidth\n    };\n    expect(divStyles).to.eql({\n      height: '200px',\n      position: 'absolute',\n      top: '50%',\n      left: '50%',\n      transform: 'translate(-50%, -50%)',\n      maxWidth: '100%'\n    });\n  });","file":"unit/ads/test-ssp.js","skipped":false,"dir":"test"},{"name":"keyBy() should return object from array with specified keys","suites":[],"updatePoint":{"line":247,"column":65,"index":7923},"line":247,"code":"  it('keyBy() should return object from array with specified keys', () => {\n    const data = [{\n      id: 'id-1',\n      key1: 'value1',\n      key2: 'value2'\n    }];\n    const dataById = keyBy(data, item => item.id);\n    expect(dataById['id-1']).to.eql(data[0]);\n  });","file":"unit/ads/test-ssp.js","skipped":false,"dir":"test"},{"name":"runWhenFetchingSettled() should run callbeck only if no registered XHR running","suites":[],"updatePoint":{"line":256,"column":84,"index":8210},"line":256,"code":"  it('runWhenFetchingSettled() should run callbeck only if no registered XHR running', () => {\n    win.fetchingSSPs = {\n      xhr1: true,\n      xhr2: true\n    };\n    const cbSpy = sandbox.spy();\n    const clock = sandbox.useFakeTimers();\n    runWhenFetchingSettled(win.fetchingSSPs, cbSpy);\n    clock.tick(100);\n    expect(cbSpy).to.not.have.been.called;\n    delete win.fetchingSSPs.xhr1;\n    delete win.fetchingSSPs.xhr2;\n    clock.tick(200);\n    expect(cbSpy).to.have.been.calledOnce;\n  });","file":"unit/ads/test-ssp.js","skipped":false,"dir":"test"},{"name":"should set unruly publisher config on global","suites":[],"updatePoint":{"line":3,"column":50,"index":139},"line":3,"code":"  it('should set unruly publisher config on global', () => {\n    const mockGlobal = {};\n    const mockData = {\n      siteId: 'amp-test'\n    };\n    const expectedGlobal = {\n      unruly: {\n        native: {\n          siteId: 'amp-test'\n        }\n      }\n    };\n    const mockScriptLoader = () => {};\n    unruly(mockGlobal, mockData, mockScriptLoader);\n    expect(expectedGlobal).to.deep.equal(mockGlobal);\n  });","file":"unit/ads/test-unruly.js","skipped":false,"dir":"test"},{"name":"should call loadScript","suites":[],"updatePoint":{"line":19,"column":28,"index":528},"line":19,"code":"  it('should call loadScript', () => {\n    const mockGlobal = {};\n    const mockData = {\n      siteId: 'amp-test'\n    };\n    let expectedGlobal;\n    let expectedUrl;\n    const scriptLoader = (...args) => {\n      expectedGlobal = args[0];\n      expectedUrl = args[1];\n    };\n    unruly(mockGlobal, mockData, scriptLoader);\n    expect(expectedGlobal).to.equal(mockGlobal);\n    expect(expectedUrl).to.equal('https://video.unrulymedia.com/native/native-loader.js');\n  });","file":"unit/ads/test-unruly.js","skipped":false,"dir":"test"},{"name":"should throw if siteId is not provided","suites":[],"updatePoint":{"line":34,"column":44,"index":1012},"line":34,"code":"  it('should throw if siteId is not provided', () => {\n    const mockGlobal = {};\n    const mockData = {};\n    const scriptLoader = () => {};\n    allowConsoleError(() => {\n      expect(() => unruly(mockGlobal, mockData, scriptLoader)).to.throw();\n    });\n  });","file":"unit/ads/test-unruly.js","skipped":false,"dir":"test"},{"name":"testElementR1","suites":[],"updatePoint":{"line":43,"column":19,"index":1363},"line":43,"code":"  it('testElementR1', () => {\n    testElementR1(AmpImg, {\n      exceptions: ['Must not have preconnectCallback', 'Must not have layoutCallback', 'Must not have unlayoutCallback', 'Must not use getLayoutSize']\n    });\n  });","file":"unit/builtins/test-amp-img-v1.js","skipped":false,"dir":"test"},{"name":"getBuildPriority","suites":[],"updatePoint":{"line":48,"column":22,"index":1589},"line":48,"code":"  it('getBuildPriority', () => {\n    expect(AmpImg.getBuildPriority()).to.equal(LayoutPriority_Enum.CONTENT);\n  });","file":"unit/builtins/test-amp-img-v1.js","skipped":false,"dir":"test"},{"name":"should load an img","suites":[],"updatePoint":{"line":51,"column":24,"index":1707},"line":51,"code":"  it('should load an img', async () => {\n    const ampImg = await getImg({\n      src: '/examples/img/sample.jpg',\n      width: 300,\n      height: 200,\n      alt: 'An image',\n      title: 'Image title',\n      referrerpolicy: 'origin'\n    });\n    const img = ampImg.querySelector('img');\n    expect(img.getAttribute('src')).to.equal('/examples/img/sample.jpg');\n    expect(img.getAttribute('alt')).to.equal('An image');\n    expect(img.getAttribute('title')).to.equal('Image title');\n    expect(img.getAttribute('referrerpolicy')).to.equal('origin');\n    expect(img.getAttribute('decoding')).to.equal('async');\n    const toggleFallbackSpy = sandbox.spy(ampImg, 'toggleFallback');\n    const togglePlaceholderSpy = sandbox.spy(ampImg, 'togglePlaceholder');\n    expect(ampImg.readyState).to.equal('loading');\n    expect(ampImg.onload).to.not.be.called;\n    dispatchCustomEvent(img, 'load', null, {\n      bubbles: false\n    });\n    expect(ampImg.readyState).to.equal('complete');\n    expect(ampImg.onload).to.be.calledOnce;\n    expect(ampImg.onerror).to.not.be.called;\n    expect(toggleFallbackSpy).to.not.be.called;\n    expect(togglePlaceholderSpy).to.be.calledOnce.calledWith(false);\n  });","file":"unit/builtins/test-amp-img-v1.js","skipped":false,"dir":"test"},{"name":"should unload the img on unmount before loaded","suites":[],"updatePoint":{"line":79,"column":52,"index":2920},"line":79,"code":"  it('should unload the img on unmount before loaded', async () => {\n    const ampImg = await getImg({\n      src: '/examples/img/sample.jpg',\n      width: 300,\n      height: 200,\n      alt: 'An image',\n      title: 'Image title',\n      referrerpolicy: 'origin'\n    });\n    const iniImg = ampImg.querySelector('img');\n    expect(iniImg).to.exist;\n    ampImg.unmount();\n    expect(ampImg.querySelector('img')).to.not.exist;\n    expect(iniImg.src).to.contain('data:image/gif;');\n  });","file":"unit/builtins/test-amp-img-v1.js","skipped":false,"dir":"test"},{"name":"should NOT unload the img on unmount after loaded","suites":[],"updatePoint":{"line":94,"column":55,"index":3405},"line":94,"code":"  it('should NOT unload the img on unmount after loaded', async () => {\n    const ampImg = await getImg({\n      src: '/examples/img/sample.jpg',\n      width: 300,\n      height: 200,\n      alt: 'An image',\n      title: 'Image title',\n      referrerpolicy: 'origin'\n    });\n    const iniImg = ampImg.querySelector('img');\n    expect(iniImg).to.exist;\n    Object.defineProperty(iniImg, 'complete', {\n      value: true\n    });\n    ampImg.unmount();\n    expect(ampImg.querySelector('img')).to.equal(iniImg);\n    expect(iniImg.src).to.not.contain('data:image/gif;');\n  });","file":"unit/builtins/test-amp-img-v1.js","skipped":false,"dir":"test"},{"name":"should set eager loading on ensureLoaded","suites":[],"updatePoint":{"line":112,"column":46,"index":3963},"line":112,"code":"  it('should set eager loading on ensureLoaded', async () => {\n    const ampImg = await getImg({\n      src: '/examples/img/sample.jpg',\n      width: 300,\n      height: 200,\n      alt: 'An image',\n      title: 'Image title',\n      referrerpolicy: 'origin'\n    });\n    const img = ampImg.querySelector('img');\n    expect(img.loading == 'auto' || !img.loading).to.be.true;\n    const promise = ampImg.ensureLoaded();\n    await new Promise(setTimeout);\n    expect(img.loading).to.equal('eager');\n    dispatchCustomEvent(img, 'load', null, {\n      bubbles: false\n    });\n    await promise;\n  });","file":"unit/builtins/test-amp-img-v1.js","skipped":false,"dir":"test"},{"name":"should fail when img fails","suites":[],"updatePoint":{"line":131,"column":32,"index":4539},"line":131,"code":"  it('should fail when img fails', async () => {\n    const ampImg = await getImg({\n      src: 'non-existent.jpg',\n      width: 300,\n      height: 200\n    });\n    const img = ampImg.querySelector('img');\n    expect(img.getAttribute('src')).to.equal('non-existent.jpg');\n    const toggleFallbackSpy = sandbox.spy(ampImg, 'toggleFallback');\n    const togglePlaceholderSpy = sandbox.spy(ampImg, 'togglePlaceholder');\n    expect(ampImg.readyState).to.equal('loading');\n    expect(ampImg.onerror).to.not.be.called;\n    dispatchCustomEvent(img, 'error', null, {\n      bubbles: false\n    });\n    expect(ampImg.readyState).to.equal('error');\n    expect(ampImg.onerror).to.be.calledOnce;\n    expect(toggleFallbackSpy).to.be.calledOnce.calledWith(true);\n    expect(togglePlaceholderSpy).to.be.calledOnce.calledWith(false);\n    expect(ampImg.onload).to.not.be.called;\n  });","file":"unit/builtins/test-amp-img-v1.js","skipped":false,"dir":"test"},{"name":"should fallback once and remove fallback once image loads","suites":[],"updatePoint":{"line":152,"column":63,"index":5432},"line":152,"code":"  it('should fallback once and remove fallback once image loads', async () => {\n    const ampImg = await getImg({\n      src: 'non-existent.jpg',\n      width: 300,\n      height: 200\n    });\n    const toggleFallbackSpy = sandbox.spy(ampImg, 'toggleFallback');\n    const img = ampImg.querySelector('img');\n    dispatchCustomEvent(img, 'error', null, {\n      bubbles: false\n    });\n    expect(ampImg.readyState).to.equal('error');\n    expect(ampImg.onerror).to.be.calledOnce;\n    expect(ampImg.onload).to.not.be.called;\n    expect(toggleFallbackSpy).to.be.calledOnce.calledWith(true);\n    expect(img).to.have.class('i-amphtml-ghost');\n    dispatchCustomEvent(img, 'load', null, {\n      bubbles: false\n    });\n    expect(ampImg.readyState).to.equal('complete');\n    expect(ampImg.onload).to.be.calledOnce;\n    expect(ampImg.onerror).to.be.calledOnce; // no change.\n    expect(toggleFallbackSpy).to.be.calledTwice.calledWith(false);\n    expect(img).to.not.have.class('i-amphtml-ghost');\n\n    // 2nd error doesn't toggle fallback.\n    dispatchCustomEvent(img, 'error', null, {\n      bubbles: false\n    });\n    expect(ampImg.readyState).to.equal('error');\n    expect(ampImg.onerror).to.be.calledTwice;\n    expect(toggleFallbackSpy).to.be.calledTwice; // no change.\n    expect(img).to.not.have.class('i-amphtml-ghost');\n  });","file":"unit/builtins/test-amp-img-v1.js","skipped":false,"dir":"test"},{"name":"should not remove the fallback if fetching fails","suites":[],"updatePoint":{"line":186,"column":54,"index":6740},"line":186,"code":"  it('should not remove the fallback if fetching fails', async () => {\n    const ampImg = await getImg({\n      src: 'non-existent.jpg',\n      width: 300,\n      height: 200\n    });\n    const toggleFallbackSpy = sandbox.spy(ampImg, 'toggleFallback');\n    const img = ampImg.querySelector('img');\n    expect(img).to.not.have.class('i-amphtml-ghost');\n    dispatchCustomEvent(img, 'error', null, {\n      bubbles: false\n    });\n    expect(ampImg.readyState).to.equal('error');\n    expect(ampImg.onerror).to.be.calledOnce;\n    expect(ampImg.onload).to.not.be.called;\n    expect(toggleFallbackSpy).to.be.calledOnce.calledWith(true);\n    expect(img).to.have.class('i-amphtml-ghost');\n    dispatchCustomEvent(img, 'error', null, {\n      bubbles: false\n    });\n    expect(toggleFallbackSpy).to.be.calledOnce; // no change.\n    expect(img).to.have.class('i-amphtml-ghost');\n  });","file":"unit/builtins/test-amp-img-v1.js","skipped":false,"dir":"test"},{"name":"should preconnect the src url","suites":[],"updatePoint":{"line":209,"column":35,"index":7590},"line":209,"code":"  it('should preconnect the src url', () => {\n    const element = createImg({\n      src: '/examples/img/sample.jpg'\n    });\n    expect(AmpImg.getPreconnects(element)).to.deep.equal(['/examples/img/sample.jpg']);\n  });","file":"unit/builtins/test-amp-img-v1.js","skipped":false,"dir":"test"},{"name":"should preconnect to the the first srcset url if src is not set","suites":[],"updatePoint":{"line":215,"column":69,"index":7842},"line":215,"code":"  it('should preconnect to the the first srcset url if src is not set', () => {\n    const element = createImg({\n      srcset: SRCSET_STRING\n    });\n    expect(AmpImg.getPreconnects(element)).to.deep.equal(['/examples/img/hero@1x.jpg']);\n  });","file":"unit/builtins/test-amp-img-v1.js","skipped":false,"dir":"test"},{"name":"should allow prerender by default","suites":[],"updatePoint":{"line":221,"column":39,"index":8055},"line":221,"code":"  it('should allow prerender by default', () => {\n    const el = createImg({\n      src: '/examples/img/sample.jpg'\n    });\n    expect(AmpImg.prerenderAllowed(el)).to.equal(true);\n  });","file":"unit/builtins/test-amp-img-v1.js","skipped":false,"dir":"test"},{"name":"should allow preview by default","suites":[],"updatePoint":{"line":227,"column":37,"index":8238},"line":227,"code":"  it('should allow preview by default', () => {\n    const el = createImg({\n      src: '/examples/img/sample.jpg'\n    });\n    expect(AmpImg.previewAllowed(el)).to.equal(true);\n  });","file":"unit/builtins/test-amp-img-v1.js","skipped":false,"dir":"test"},{"name":"should load an img with srcset","suites":[],"updatePoint":{"line":233,"column":36,"index":8418},"line":233,"code":"  it('should load an img with srcset', async () => {\n    const ampImg = await getImg({\n      srcset: SRCSET_STRING,\n      width: 300,\n      height: 200\n    });\n    const img = ampImg.querySelector('img');\n    expect(img.getAttribute('srcset')).to.equal(SRCSET_STRING);\n  });","file":"unit/builtins/test-amp-img-v1.js","skipped":false,"dir":"test"},{"name":"should handle attribute mutations","suites":[],"updatePoint":{"line":242,"column":39,"index":8696},"line":242,"code":"  it('should handle attribute mutations', async () => {\n    const ampImg = await getImg({\n      src: '/examples/img/sample.jpg',\n      srcset: SRCSET_STRING,\n      width: 300,\n      height: 200\n    });\n    const impl = await ampImg.getImpl();\n    const img = ampImg.querySelector('img');\n    expect(img.getAttribute('src')).to.equal('/examples/img/sample.jpg');\n    expect(img.getAttribute('srcset')).to.equal(SRCSET_STRING);\n    dispatchCustomEvent(img, 'load', null, {\n      bubbles: false\n    });\n    expect(ampImg.readyState).to.equal('complete');\n    expect(ampImg.onload).to.be.calledOnce;\n    ampImg.setAttribute('src', 'foo.jpg');\n    impl.mutatedAttributesCallback({\n      src: 'foo.jpg'\n    });\n    expect(img.getAttribute('src')).to.equal('foo.jpg');\n    // src mutation should override existing srcset attribute.\n    expect(img.hasAttribute('srcset')).to.be.false;\n    expect(ampImg.readyState).to.equal('loading');\n    expect(ampImg.onload).to.be.calledOnce; // no change.\n\n    dispatchCustomEvent(img, 'load', null, {\n      bubbles: false\n    });\n    expect(ampImg.readyState).to.equal('complete');\n    expect(ampImg.onload).to.be.calledTwice;\n  });","file":"unit/builtins/test-amp-img-v1.js","skipped":false,"dir":"test"},{"name":"should propagate srcset and sizes","suites":[],"updatePoint":{"line":274,"column":39,"index":9860},"line":274,"code":"  it('should propagate srcset and sizes', async () => {\n    const ampImg = await getImg({\n      src: '/examples/img/sample.jpg',\n      srcset: SRCSET_STRING,\n      sizes: '(max-width: 320px) 640px, 100vw',\n      width: 320,\n      height: 240\n    });\n    const img = ampImg.querySelector('img');\n    expect(img.getAttribute('srcset')).to.equal(SRCSET_STRING);\n    expect(img.getAttribute('sizes')).to.equal('(max-width: 320px) 640px, 100vw');\n  });","file":"unit/builtins/test-amp-img-v1.js","skipped":false,"dir":"test"},{"name":"should propagate data attributes","suites":[],"updatePoint":{"line":286,"column":38,"index":10307},"line":286,"code":"  it('should propagate data attributes', async () => {\n    const ampImg = await getImg({\n      src: '/examples/img/sample.jpg',\n      width: 320,\n      height: 240,\n      'data-foo': 'abc'\n    });\n    const img = ampImg.querySelector('img');\n    expect(img.getAttribute('data-foo')).to.equal('abc');\n  });","file":"unit/builtins/test-amp-img-v1.js","skipped":false,"dir":"test"},{"name":"should not propagate bind attributes","suites":[],"updatePoint":{"line":296,"column":42,"index":10617},"line":296,"code":"  it('should not propagate bind attributes', async () => {\n    const ampImg = await getImg({\n      src: '/examples/img/sample.jpg',\n      width: 320,\n      height: 240,\n      'data-amp-bind': 'abc',\n      'data-amp-bind-foo': '123'\n    });\n    const img = ampImg.querySelector('img');\n    expect(img.getAttribute('data-amp-bind')).to.equal('abc');\n    expect(img.getAttribute('data-amp-bind-foo')).to.be.null;\n  });","file":"unit/builtins/test-amp-img-v1.js","skipped":false,"dir":"test"},{"name":"should propagate srcset and sizes with disable-inline-width","suites":[],"updatePoint":{"line":308,"column":65,"index":11056},"line":308,"code":"  it('should propagate srcset and sizes with disable-inline-width', async () => {\n    const ampImg = await getImg({\n      src: '/examples/img/sample.jpg',\n      srcset: SRCSET_STRING,\n      sizes: '(max-width: 320px) 640px, 100vw',\n      width: 320,\n      height: 240,\n      'disable-inline-width': null\n    });\n    const img = ampImg.querySelector('img');\n    expect(img.getAttribute('srcset')).to.equal(SRCSET_STRING);\n    expect(img.getAttribute('sizes')).to.equal('(max-width: 320px) 640px, 100vw');\n  });","file":"unit/builtins/test-amp-img-v1.js","skipped":false,"dir":"test"},{"name":"should propagate crossorigin attribute","suites":[],"updatePoint":{"line":321,"column":44,"index":11545},"line":321,"code":"  it('should propagate crossorigin attribute', async () => {\n    const ampImg = await getImg({\n      src: '/examples/img/sample.jpg',\n      width: 320,\n      height: 240,\n      crossorigin: 'anonymous'\n    });\n    const img = ampImg.querySelector('img');\n    expect(img.getAttribute('crossorigin')).to.equal('anonymous');\n  });","file":"unit/builtins/test-amp-img-v1.js","skipped":false,"dir":"test"},{"name":"should propagate ARIA attributes","suites":[],"updatePoint":{"line":331,"column":38,"index":11867},"line":331,"code":"  it('should propagate ARIA attributes', async () => {\n    const ampImg = await getImg({\n      src: 'test.jpg',\n      width: 100,\n      height: 100,\n      'aria-label': 'Hello',\n      'aria-labelledby': 'id2',\n      'aria-describedby': 'id3'\n    });\n    const img = ampImg.querySelector('img');\n    expect(img.getAttribute('aria-label')).to.equal('Hello');\n    expect(img.getAttribute('aria-labelledby')).to.equal('id2');\n    expect(img.getAttribute('aria-describedby')).to.equal('id3');\n  });","file":"unit/builtins/test-amp-img-v1.js","skipped":false,"dir":"test"},{"name":"should propagate the object-fit attribute","suites":[],"updatePoint":{"line":345,"column":47,"index":12370},"line":345,"code":"  it('should propagate the object-fit attribute', async () => {\n    const ampImg = await getImg({\n      src: '/examples/img/sample.jpg',\n      width: 300,\n      height: 200,\n      'object-fit': 'cover'\n    });\n    const img = ampImg.querySelector('img');\n    expect(img.style.objectFit).to.equal('cover');\n  });","file":"unit/builtins/test-amp-img-v1.js","skipped":false,"dir":"test"},{"name":"should not propagate the object-fit attribute if invalid","suites":[],"updatePoint":{"line":355,"column":62,"index":12697},"line":355,"code":"  it('should not propagate the object-fit attribute if invalid', async () => {\n    const ampImg = await getImg({\n      src: '/examples/img/sample.jpg',\n      width: 300,\n      height: 200,\n      'object-fit': 'foo 80%'\n    });\n    const img = ampImg.querySelector('img');\n    expect(img.style.objectFit).to.be.empty;\n  });","file":"unit/builtins/test-amp-img-v1.js","skipped":false,"dir":"test"},{"name":"should propagate the object-position attribute","suites":[],"updatePoint":{"line":365,"column":52,"index":13010},"line":365,"code":"  it('should propagate the object-position attribute', async () => {\n    const ampImg = await getImg({\n      src: '/examples/img/sample.jpg',\n      width: 300,\n      height: 200,\n      'object-position': '20% 80%'\n    });\n    const img = ampImg.querySelector('img');\n    expect(img.style.objectPosition).to.equal('20% 80%');\n  });","file":"unit/builtins/test-amp-img-v1.js","skipped":false,"dir":"test"},{"name":"should not propagate the object-position attribute if invalid","suites":[],"updatePoint":{"line":375,"column":67,"index":13356},"line":375,"code":"  it('should not propagate the object-position attribute if invalid', async () => {\n    const ampImg = await getImg({\n      src: '/examples/img/sample.jpg',\n      width: 300,\n      height: 200,\n      'object-position': 'url(\"example.com\")'\n    });\n    const img = ampImg.querySelector('img');\n    expect(img.style.objectPosition).to.be.empty;\n  });","file":"unit/builtins/test-amp-img-v1.js","skipped":false,"dir":"test"},{"name":"should set placeholder opacity to 0 on image load","suites":["blurred image placeholder"],"updatePoint":{"line":422,"column":57,"index":15165},"line":422,"code":"    it('should set placeholder opacity to 0 on image load', async () => {\n      let el, img;\n      el = getImgWithBlur(true, true);\n      await el.build();\n      dispatchCustomEvent(el.querySelector('img[amp-img-id]'), 'load', null, {\n        bubbles: false\n      });\n      img = el.firstChild;\n      expect(img.style.opacity).to.equal('0');\n      expect(el.togglePlaceholder).to.not.be.called;\n      el = getImgWithBlur(true, false);\n      await el.build();\n      dispatchCustomEvent(el.querySelector('img[amp-img-id]'), 'load', null, {\n        bubbles: false\n      });\n      img = el.firstChild;\n      expect(img.style.opacity).to.be.equal('');\n      expect(el.togglePlaceholder).to.have.been.calledWith(false);\n      el = getImgWithBlur(false, true);\n      await el.build();\n      dispatchCustomEvent(el.querySelector('img[amp-img-id]'), 'load', null, {\n        bubbles: false\n      });\n      img = el.firstChild;\n      expect(img.style.opacity).to.be.equal('');\n      expect(el.togglePlaceholder).to.have.been.calledWith(false);\n      el = getImgWithBlur(false, false);\n      await el.build();\n      dispatchCustomEvent(el.querySelector('img[amp-img-id]'), 'load', null, {\n        bubbles: false\n      });\n      expect(el.togglePlaceholder).to.have.been.calledWith(false);\n    });","file":"unit/builtins/test-amp-img-v1.js","skipped":false,"dir":"test"},{"name":"does not interfere with SSR img creation","suites":["blurred image placeholder"],"updatePoint":{"line":455,"column":48,"index":16441},"line":455,"code":"    it('does not interfere with SSR img creation', async () => {\n      const ampImg = getImgWithBlur(true, true);\n      await ampImg.build();\n      expect(ampImg.querySelector('img[src*=\"sample.jpg\"]')).to.exist;\n      expect(ampImg.querySelector('img[src*=\"image/svg+xml\"]')).to.exist;\n    });","file":"unit/builtins/test-amp-img-v1.js","skipped":false,"dir":"test"},{"name":"does not interfere with SSR img before placeholder","suites":["blurred image placeholder"],"updatePoint":{"line":461,"column":58,"index":16746},"line":461,"code":"    it('does not interfere with SSR img before placeholder', async () => {\n      const ampImg = getImgWithBlur(true, true);\n      ampImg.setAttribute('i-amphtml-ssr', '');\n      const img = doc.createElement('img');\n      img.setAttribute('src', ampImg.getAttribute('src'));\n      ampImg.insertBefore(img, ampImg.querySelector('[placeholder]'));\n      await ampImg.build();\n      expect(ampImg.querySelector('img[src*=\"sample.jpg\"]')).to.exist;\n      expect(ampImg.querySelectorAll('img[src*=\"sample.jpg\"]')).to.have.length(1);\n      expect(ampImg.querySelector('img[src*=\"sample.jpg\"]')).to.equal(img);\n      expect(ampImg.querySelector('img[src*=\"image/svg+xml\"]')).to.exist;\n    });","file":"unit/builtins/test-amp-img-v1.js","skipped":false,"dir":"test"},{"name":"does not interfere with SSR img after placeholder","suites":["blurred image placeholder"],"updatePoint":{"line":473,"column":57,"index":17431},"line":473,"code":"    it('does not interfere with SSR img after placeholder', async () => {\n      const ampImg = getImgWithBlur(true, true);\n      ampImg.setAttribute('i-amphtml-ssr', '');\n      const img = document.createElement('img');\n      img.setAttribute('src', ampImg.getAttribute('src'));\n      ampImg.appendChild(img);\n      await ampImg.build();\n      expect(ampImg.querySelector('img[src*=\"sample.jpg\"]')).to.exist;\n      expect(ampImg.querySelectorAll('img[src*=\"sample.jpg\"]')).to.have.length(1);\n      expect(ampImg.querySelector('img[src*=\"sample.jpg\"]')).to.equal(img);\n      expect(ampImg.querySelector('img[src*=\"image/svg+xml\"]')).to.exist;\n    });","file":"unit/builtins/test-amp-img-v1.js","skipped":false,"dir":"test"},{"name":"should not generate sizes for amp-imgs that already have sizes","suites":["auto-generate sizes"],"updatePoint":{"line":497,"column":70,"index":18434},"line":497,"code":"    it('should not generate sizes for amp-imgs that already have sizes', async () => {\n      const ampImg = await getImg({\n        src: '/examples/img/sample.jpg',\n        srcset: SRCSET_STRING,\n        sizes: '50vw',\n        width: 300,\n        height: 200\n      });\n      const img = ampImg.querySelector('img');\n      expect(img.getAttribute('sizes')).to.equal('50vw');\n    });","file":"unit/builtins/test-amp-img-v1.js","skipped":false,"dir":"test"},{"name":"should not generate sizes for amp-imgs without srcset","suites":["auto-generate sizes"],"updatePoint":{"line":508,"column":61,"index":18806},"line":508,"code":"    it('should not generate sizes for amp-imgs without srcset', async () => {\n      const ampImg = await getImg({\n        src: '/examples/img/sample.jpg',\n        width: 300,\n        height: 200\n      });\n      const img = ampImg.querySelector('img');\n      expect(img.getAttribute('sizes')).to.be.null;\n    });","file":"unit/builtins/test-amp-img-v1.js","skipped":false,"dir":"test"},{"name":"should not generate sizes for amp-imgs with x descriptors","suites":["auto-generate sizes"],"updatePoint":{"line":517,"column":65,"index":19122},"line":517,"code":"    it('should not generate sizes for amp-imgs with x descriptors', async () => {\n      const ampImg = await getImg({\n        srcset: '/examples/img/hero@1x.jpg, /examples/img/hero@2x.jpg 2x',\n        width: 300,\n        height: 200\n      });\n      const img = ampImg.querySelector('img');\n      expect(img.getAttribute('sizes')).to.be.null;\n    });","file":"unit/builtins/test-amp-img-v1.js","skipped":false,"dir":"test"},{"name":"should generate correct sizes for layout fixed","suites":["auto-generate sizes"],"updatePoint":{"line":526,"column":54,"index":19461},"line":526,"code":"    it('should generate correct sizes for layout fixed', async () => {\n      const ampImg = await getStubbedImg({\n        layout: Layout_Enum.FIXED,\n        src: 'test.jpg',\n        srcset: 'large.jpg 2000w, small.jpg 1000w',\n        width: 300,\n        height: 200\n      }, 300);\n      const img = ampImg.querySelector('img');\n      expect(img.getAttribute('sizes')).to.equal('(max-width: 320px) 300px, 300px');\n    });","file":"unit/builtins/test-amp-img-v1.js","skipped":false,"dir":"test"},{"name":"should generate correct sizes for layout responsive","suites":["auto-generate sizes"],"updatePoint":{"line":537,"column":59,"index":19887},"line":537,"code":"    it('should generate correct sizes for layout responsive', async () => {\n      const ampImg = await getStubbedImg({\n        layout: Layout_Enum.RESPONSIVE,\n        src: 'test.jpg',\n        srcset: 'large.jpg 2000w, small.jpg 1000w',\n        width: 300,\n        height: 200\n      }, 160);\n      const img = ampImg.querySelector('img');\n      expect(img.getAttribute('sizes')).to.equal('(max-width: 320px) 160px, 100vw');\n    });","file":"unit/builtins/test-amp-img-v1.js","skipped":false,"dir":"test"},{"name":"should generate correct sizes for layout fixed-height","suites":["auto-generate sizes"],"updatePoint":{"line":548,"column":61,"index":20320},"line":548,"code":"    it('should generate correct sizes for layout fixed-height', async () => {\n      const ampImg = await getStubbedImg({\n        layout: Layout_Enum.FIXED_HEIGHT,\n        src: 'test.jpg',\n        srcset: 'large.jpg 2000w, small.jpg 1000w',\n        width: 300,\n        height: 200\n      }, 160);\n      const img = ampImg.querySelector('img');\n      expect(img.getAttribute('sizes')).to.equal('(max-width: 320px) 160px, 100vw');\n    });","file":"unit/builtins/test-amp-img-v1.js","skipped":false,"dir":"test"},{"name":"should generate correct sizes for layout fill","suites":["auto-generate sizes"],"updatePoint":{"line":559,"column":53,"index":20747},"line":559,"code":"    it('should generate correct sizes for layout fill', async () => {\n      const ampImg = await getStubbedImg({\n        layout: Layout_Enum.FILL,\n        src: 'test.jpg',\n        srcset: 'large.jpg 2000w, small.jpg 1000w',\n        width: 300,\n        height: 200\n      }, 160);\n      const img = ampImg.querySelector('img');\n      expect(img.getAttribute('sizes')).to.equal('(max-width: 320px) 160px, 100vw');\n    });","file":"unit/builtins/test-amp-img-v1.js","skipped":false,"dir":"test"},{"name":"should generate correct sizes for layout flex-item","suites":["auto-generate sizes"],"updatePoint":{"line":570,"column":58,"index":21171},"line":570,"code":"    it('should generate correct sizes for layout flex-item', async () => {\n      const ampImg = await getStubbedImg({\n        layout: Layout_Enum.FLEX_ITEM,\n        src: 'test.jpg',\n        srcset: 'large.jpg 2000w, small.jpg 1000w',\n        width: 300,\n        height: 200\n      }, 160);\n      const img = ampImg.querySelector('img');\n      expect(img.getAttribute('sizes')).to.equal('(max-width: 320px) 160px, 100vw');\n    });","file":"unit/builtins/test-amp-img-v1.js","skipped":false,"dir":"test"},{"name":"should load an img with more attributes","suites":[],"updatePoint":{"line":43,"column":45,"index":1468},"line":43,"code":"  it('should load an img with more attributes', async () => {\n    const ampImg = await getImg({\n      src: '/examples/img/sample.jpg',\n      width: 300,\n      height: 200,\n      alt: 'An image',\n      title: 'Image title',\n      referrerpolicy: 'origin'\n    });\n    const impl = await ampImg.getImpl(false);\n    expect(impl.getLayoutPriority()).to.equal(LayoutPriority_Enum.CONTENT);\n    const img = ampImg.querySelector('img');\n    expect(img.tagName).to.equal('IMG');\n    expect(img.getAttribute('src')).to.equal('/examples/img/sample.jpg');\n    expect(img.getAttribute('alt')).to.equal('An image');\n    expect(img.getAttribute('title')).to.equal('Image title');\n    expect(img.getAttribute('referrerpolicy')).to.equal('origin');\n    expect(img.getAttribute('decoding')).to.equal('async');\n  });","file":"unit/builtins/test-amp-img.js","skipped":false,"dir":"test"},{"name":"should load an img","suites":[],"updatePoint":{"line":62,"column":24,"index":2245},"line":62,"code":"  it('should load an img', async () => {\n    const ampImg = await getImg({\n      src: '/examples/img/sample.jpg',\n      width: 300,\n      height: 200\n    });\n    const impl = await ampImg.getImpl(false);\n    expect(impl.getLayoutPriority()).to.equal(LayoutPriority_Enum.CONTENT);\n    const img = ampImg.querySelector('img');\n    expect(img.tagName).to.equal('IMG');\n    expect(img.getAttribute('src')).to.equal('/examples/img/sample.jpg');\n  });","file":"unit/builtins/test-amp-img.js","skipped":false,"dir":"test"},{"name":"should preconnect the src url","suites":[],"updatePoint":{"line":74,"column":35,"index":2702},"line":74,"code":"  it('should preconnect the src url', async () => {\n    const preconnect = {\n      url: sandbox.stub()\n    };\n    sandbox.stub(Services, 'preconnectFor').returns(preconnect);\n    const ampImg = await getImg({\n      src: '/examples/img/sample.jpg',\n      width: 300,\n      height: 200\n    });\n    const impl = await ampImg.getImpl(false);\n    impl.preconnectCallback(true);\n    expect(preconnect.url).to.be.called;\n    expect(preconnect.url).to.have.been.calledWith(sandbox.match.object, '/examples/img/sample.jpg');\n  });","file":"unit/builtins/test-amp-img.js","skipped":false,"dir":"test"},{"name":"should load an img with srcset","suites":[],"updatePoint":{"line":89,"column":36,"index":3225},"line":89,"code":"  it('should load an img with srcset', () => {\n    windowWidth = 320;\n    screenWidth = 4000;\n    return getImg({\n      srcset: SRCSET_STRING,\n      width: 300,\n      height: 200\n    }).then(ampImg => {\n      const img = ampImg.querySelector('img');\n      expect(img.tagName).to.equal('IMG');\n      expect(img.getAttribute('srcset')).to.equal(SRCSET_STRING);\n      expect(img.hasAttribute('referrerpolicy')).to.be.false;\n    });\n  });","file":"unit/builtins/test-amp-img.js","skipped":false,"dir":"test"},{"name":"should preconnect to the the first srcset url if src is not set","suites":[],"updatePoint":{"line":103,"column":69,"index":3693},"line":103,"code":"  it('should preconnect to the the first srcset url if src is not set', async () => {\n    const preconnect = {\n      url: sandbox.stub()\n    };\n    sandbox.stub(Services, 'preconnectFor').returns(preconnect);\n    const ampImg = await getImg({\n      srcset: SRCSET_STRING,\n      width: 300,\n      height: 200\n    });\n    const impl = await ampImg.getImpl(false);\n    impl.preconnectCallback(true);\n    expect(preconnect.url).to.be.called;\n    expect(preconnect.url).to.have.been.calledWith(sandbox.match.object, '/examples/img/hero@1x.jpg');\n  });","file":"unit/builtins/test-amp-img.js","skipped":false,"dir":"test"},{"name":"should handle attribute mutations","suites":[],"updatePoint":{"line":118,"column":39,"index":4210},"line":118,"code":"  it('should handle attribute mutations', async () => {\n    const ampImg = await getImg({\n      src: '/examples/img/sample.jpg',\n      srcset: SRCSET_STRING,\n      width: 300,\n      height: 200\n    });\n    const impl = await ampImg.getImpl(false);\n    expect(impl.img_.hasAttribute('srcset')).to.be.true;\n    ampImg.setAttribute('src', 'foo.jpg');\n    impl.mutatedAttributesCallback({\n      src: 'foo.jpg'\n    });\n    expect(impl.img_.getAttribute('src')).to.equal('foo.jpg');\n    // src mutation should override existing srcset attribute.\n    expect(impl.img_.hasAttribute('srcset')).to.be.false;\n  });","file":"unit/builtins/test-amp-img.js","skipped":false,"dir":"test"},{"name":"should propagate srcset and sizes","suites":[],"updatePoint":{"line":135,"column":39,"index":4814},"line":135,"code":"  it('should propagate srcset and sizes', () => {\n    return getImg({\n      src: '/examples/img/sample.jpg',\n      srcset: SRCSET_STRING,\n      sizes: '(max-width: 320px) 640px, 100vw',\n      width: 320,\n      height: 240\n    }).then(ampImg => {\n      const img = ampImg.querySelector('img');\n      expect(img.getAttribute('srcset')).to.equal(SRCSET_STRING);\n      expect(img.getAttribute('sizes')).to.equal('(max-width: 320px) 640px, 100vw');\n    });\n  });","file":"unit/builtins/test-amp-img.js","skipped":false,"dir":"test"},{"name":"should propagate importance","suites":[],"updatePoint":{"line":148,"column":33,"index":5266},"line":148,"code":"  it('should propagate importance', () => {\n    return getImg({\n      src: '/examples/img/sample.jpg',\n      importance: 'high',\n      width: 320,\n      height: 240\n    }).then(ampImg => {\n      const img = ampImg.querySelector('img');\n      expect(img.getAttribute('importance')).to.equal('high');\n    });\n  });","file":"unit/builtins/test-amp-img.js","skipped":false,"dir":"test"},{"name":"should propagate data attributes","suites":[],"updatePoint":{"line":159,"column":38,"index":5584},"line":159,"code":"  it('should propagate data attributes', () => {\n    return getImg({\n      src: '/examples/img/sample.jpg',\n      width: 320,\n      height: 240,\n      'data-foo': 'abc'\n    }).then(ampImg => {\n      const img = ampImg.querySelector('img');\n      expect(img.getAttribute('data-foo')).to.equal('abc');\n    });\n  });","file":"unit/builtins/test-amp-img.js","skipped":false,"dir":"test"},{"name":"should not propagate bind attributes","suites":[],"updatePoint":{"line":170,"column":42,"index":5902},"line":170,"code":"  it('should not propagate bind attributes', () => {\n    return getImg({\n      src: '/examples/img/sample.jpg',\n      width: 320,\n      height: 240,\n      'data-amp-bind': 'abc',\n      'data-amp-bind-foo': '123'\n    }).then(ampImg => {\n      const img = ampImg.querySelector('img');\n      expect(img.getAttribute('data-amp-bind')).to.equal('abc');\n      expect(img.getAttribute('data-amp-bind-foo')).to.be.null;\n    });\n  });","file":"unit/builtins/test-amp-img.js","skipped":false,"dir":"test"},{"name":"should propagate srcset and sizes with disable-inline-width","suites":[],"updatePoint":{"line":183,"column":65,"index":6351},"line":183,"code":"  it('should propagate srcset and sizes with disable-inline-width', async () => {\n    const ampImg = await getImg({\n      src: '/examples/img/sample.jpg',\n      srcset: SRCSET_STRING,\n      sizes: '(max-width: 320px) 640px, 100vw',\n      width: 320,\n      height: 240,\n      'disable-inline-width': null\n    });\n    const img = ampImg.querySelector('img');\n    expect(img.getAttribute('srcset')).to.equal(SRCSET_STRING);\n    expect(img.getAttribute('sizes')).to.equal('(max-width: 320px) 640px, 100vw');\n  });","file":"unit/builtins/test-amp-img.js","skipped":false,"dir":"test"},{"name":"should propagate crossorigin attribute","suites":[],"updatePoint":{"line":196,"column":44,"index":6840},"line":196,"code":"  it('should propagate crossorigin attribute', () => {\n    return getImg({\n      src: '/examples/img/sample.jpg',\n      width: 320,\n      height: 240,\n      crossorigin: 'anonymous'\n    }).then(ampImg => {\n      const img = ampImg.querySelector('img');\n      expect(img.getAttribute('crossorigin')).to.equal('anonymous');\n    });\n  });","file":"unit/builtins/test-amp-img.js","skipped":false,"dir":"test"},{"name":"should not display fallback if loading succeeds","suites":["#fallback on initial load"],"updatePoint":{"line":248,"column":55,"index":8415},"line":248,"code":"    it('should not display fallback if loading succeeds', () => {\n      impl.buildCallback();\n      expect(errorSpy).to.have.not.been.called;\n      expect(toggleSpy).to.have.not.been.called;\n      expect(toggleFallbackSpy).to.have.not.been.called;\n      return impl.layoutCallback().then(() => {\n        expect(errorSpy).to.have.not.been.called;\n        expect(toggleSpy).to.have.not.been.called;\n        expect(toggleFallbackSpy).to.have.not.been.called;\n        expect(togglePlaceholderSpy).to.have.not.been.called;\n      });\n    });","file":"unit/builtins/test-amp-img.js","skipped":false,"dir":"test"},{"name":"should display fallback if loading fails","suites":["#fallback on initial load"],"updatePoint":{"line":260,"column":48,"index":8944},"line":260,"code":"    it('should display fallback if loading fails', () => {\n      el.setAttribute('src', 'non-existent.jpg');\n      impl.buildCallback();\n      expect(errorSpy).to.have.not.been.called;\n      expect(toggleSpy).to.have.not.been.called;\n      expect(toggleFallbackSpy).to.have.not.been.called;\n      return impl.layoutCallback().catch(() => {\n        expect(errorSpy).to.be.calledOnce;\n        expect(toggleSpy).to.be.calledOnce;\n        expect(toggleSpy.firstCall.args[0]).to.be.true;\n        expect(toggleFallbackSpy.firstCall.args[0]).to.be.true;\n      });\n    });","file":"unit/builtins/test-amp-img.js","skipped":false,"dir":"test"},{"name":"should hide child placeholder elements if loading fails","suites":["#fallback on initial load"],"updatePoint":{"line":273,"column":63,"index":9524},"line":273,"code":"    it('should hide child placeholder elements if loading fails', () => {\n      el.setAttribute('src', 'non-existent.jpg');\n      impl.buildCallback();\n      expect(errorSpy).to.have.not.been.called;\n      expect(toggleSpy).to.have.not.been.called;\n      expect(togglePlaceholderSpy).to.have.not.been.called;\n      expect(toggleFallbackSpy).to.have.not.been.called;\n      return impl.layoutCallback().catch(() => {\n        expect(errorSpy).to.be.calledOnce;\n        expect(toggleSpy).to.be.calledOnce;\n        expect(toggleSpy.firstCall.args[0]).to.be.true;\n        expect(togglePlaceholderSpy).to.be.calledOnce;\n        expect(togglePlaceholderSpy.firstCall.args[0]).to.be.false;\n        expect(toggleFallbackSpy.firstCall.args[0]).to.be.true;\n      });\n    });","file":"unit/builtins/test-amp-img.js","skipped":false,"dir":"test"},{"name":"should fallback once and remove fallback once image loads","suites":["#fallback on initial load"],"updatePoint":{"line":289,"column":65,"index":10289},"line":289,"code":"    it('should fallback once and remove fallback once image loads', () => {\n      el.setAttribute('src', 'non-existent.jpg');\n      impl.buildCallback();\n      expect(errorSpy).to.have.not.been.called;\n      expect(toggleSpy).to.have.not.been.called;\n      expect(toggleFallbackSpy).to.have.not.been.called;\n      return impl.layoutCallback().catch(() => {\n        expect(errorSpy).to.be.calledOnce;\n        expect(toggleSpy).to.be.calledOnce;\n        expect(toggleSpy.firstCall.args[0]).to.be.true;\n        expect(toggleFallbackSpy).to.be.calledOnce;\n        expect(toggleFallbackSpy.firstCall.args[0]).to.be.true;\n        expect(impl.img_).to.have.class('i-amphtml-ghost');\n\n        // On load, remove fallback\n        const loadEvent = createCustomEvent(fixture.win, 'load');\n        impl.img_.dispatchEvent(loadEvent);\n        expect(errorSpy).to.be.calledOnce;\n        expect(toggleSpy).to.have.callCount(2);\n        expect(toggleSpy.getCall(1).args[0]).to.be.false;\n        expect(toggleFallbackSpy).to.have.callCount(2);\n        expect(toggleFallbackSpy.getCall(1).args[0]).to.be.false;\n        expect(impl.img_).to.not.have.class('i-amphtml-ghost');\n\n        // On further error, do not bring back the fallback image\n        const errorEvent = createCustomEvent(fixture.win, 'error');\n        impl.img_.dispatchEvent(errorEvent);\n        expect(errorSpy).to.be.calledTwice;\n        expect(toggleSpy).to.have.callCount(2);\n        expect(toggleFallbackSpy).to.have.callCount(2);\n        expect(impl.img_).to.not.have.class('i-amphtml-ghost');\n      });\n    });","file":"unit/builtins/test-amp-img.js","skipped":false,"dir":"test"},{"name":"should not remove the fallback if fetching fails","suites":["#fallback on initial load"],"updatePoint":{"line":322,"column":56,"index":11848},"line":322,"code":"    it('should not remove the fallback if fetching fails', () => {\n      el.setAttribute('src', 'non-existent.jpg');\n      impl.buildCallback();\n      expect(el).to.not.have.class('i-amphtml-ghost');\n      expect(toggleFallbackSpy).to.have.not.been.called;\n      return impl.layoutCallback().catch(() => {\n        expect(toggleFallbackSpy).to.be.calledOnce;\n        expect(toggleFallbackSpy.getCall(0).args[0]).to.be.true;\n        expect(impl.img_).to.have.class('i-amphtml-ghost');\n        impl.img_.setAttribute('src', 'test-1000.jpg');\n        return impl.layoutCallback().catch(() => {\n          expect(toggleFallbackSpy).to.be.calledOnce;\n          expect(impl.img_).to.have.class('i-amphtml-ghost');\n        });\n      });\n    });","file":"unit/builtins/test-amp-img.js","skipped":false,"dir":"test"},{"name":"should allow prerender by default","suites":["#fallback on initial load"],"updatePoint":{"line":339,"column":39,"index":12573},"line":339,"code":"  it('should allow prerender by default', () => {\n    const el = document.createElement('amp-img');\n    el.setAttribute('src', 'test.jpg');\n    el.setAttribute('width', 100);\n    el.setAttribute('height', 100);\n    expect(AmpImg.prerenderAllowed(el)).to.equal(true);\n  });","file":"unit/builtins/test-amp-img.js","skipped":false,"dir":"test"},{"name":"should allow preview by default","suites":["#fallback on initial load"],"updatePoint":{"line":346,"column":37,"index":12844},"line":346,"code":"  it('should allow preview by default', () => {\n    const el = document.createElement('amp-img');\n    el.setAttribute('src', 'test.jpg');\n    el.setAttribute('width', 100);\n    el.setAttribute('height', 100);\n    expect(AmpImg.previewAllowed(el)).to.equal(true);\n  });","file":"unit/builtins/test-amp-img.js","skipped":false,"dir":"test"},{"name":"should propogate src as the final attribute","suites":["#fallback on initial load"],"updatePoint":{"line":353,"column":49,"index":13125},"line":353,"code":"  it('should propogate src as the final attribute', () => {\n    expect(ATTRIBUTES_TO_PROPAGATE[ATTRIBUTES_TO_PROPAGATE.length - 1]).to.equal('src');\n  });","file":"unit/builtins/test-amp-img.js","skipped":false,"dir":"test"},{"name":"should propagate ARIA attributes","suites":["#fallback on initial load"],"updatePoint":{"line":356,"column":38,"index":13269},"line":356,"code":"  it('should propagate ARIA attributes', () => {\n    const el = document.createElement('amp-img');\n    el.setAttribute('src', 'test.jpg');\n    el.setAttribute('width', 100);\n    el.setAttribute('height', 100);\n    el.setAttribute('aria-label', 'Hello');\n    el.setAttribute('aria-labelledby', 'id2');\n    el.setAttribute('aria-describedby', 'id3');\n    el.getLayoutSize = () => ({\n      width: 0,\n      height: 0\n    });\n    el.getPlaceholder = sandbox.stub();\n    const impl = new AmpImg(el);\n    impl.getAmpDoc = function () {\n      return window.AMP.ampdoc;\n    };\n    impl.buildCallback();\n    impl.layoutCallback();\n    const img = el.querySelector('img');\n    expect(img.getAttribute('aria-label')).to.equal('Hello');\n    expect(img.getAttribute('aria-labelledby')).to.equal('id2');\n    expect(img.getAttribute('aria-describedby')).to.equal('id3');\n    impl.unlayoutCallback();\n  });","file":"unit/builtins/test-amp-img.js","skipped":false,"dir":"test"},{"name":"should propagate the object-fit attribute","suites":["#fallback on initial load"],"updatePoint":{"line":381,"column":47,"index":14168},"line":381,"code":"  it('should propagate the object-fit attribute', () => {\n    return getImg({\n      src: '/examples/img/sample.jpg',\n      width: 300,\n      height: 200,\n      'object-fit': 'cover'\n    }).then(ampImg => {\n      const img = ampImg.querySelector('img');\n      expect(img.style.objectFit).to.equal('cover');\n    });\n  });","file":"unit/builtins/test-amp-img.js","skipped":false,"dir":"test"},{"name":"should not propagate the object-fit attribute if invalid","suites":["#fallback on initial load"],"updatePoint":{"line":392,"column":62,"index":14503},"line":392,"code":"  it('should not propagate the object-fit attribute if invalid', () => {\n    return getImg({\n      src: '/examples/img/sample.jpg',\n      width: 300,\n      height: 200,\n      'object-fit': 'foo 80%'\n    }).then(ampImg => {\n      const img = ampImg.querySelector('img');\n      expect(img.style.objectFit).to.be.empty;\n    });\n  });","file":"unit/builtins/test-amp-img.js","skipped":false,"dir":"test"},{"name":"should propagate the object-position attribute","suites":["#fallback on initial load"],"updatePoint":{"line":403,"column":52,"index":14824},"line":403,"code":"  it('should propagate the object-position attribute', () => {\n    return getImg({\n      src: '/examples/img/sample.jpg',\n      width: 300,\n      height: 200,\n      'object-position': '20% 80%'\n    }).then(ampImg => {\n      const img = ampImg.querySelector('img');\n      expect(img.style.objectPosition).to.equal('20% 80%');\n    });\n  });","file":"unit/builtins/test-amp-img.js","skipped":false,"dir":"test"},{"name":"should not propagate the object-position attribute if invalid","suites":["#fallback on initial load"],"updatePoint":{"line":414,"column":67,"index":15178},"line":414,"code":"  it('should not propagate the object-position attribute if invalid', () => {\n    return getImg({\n      src: '/examples/img/sample.jpg',\n      width: 300,\n      height: 200,\n      'object-position': 'url(\"example.com\")'\n    }).then(ampImg => {\n      const img = ampImg.querySelector('img');\n      expect(img.style.objectPosition).to.be.empty;\n    });\n  });","file":"unit/builtins/test-amp-img.js","skipped":false,"dir":"test"},{"name":"should not error on unlayoutCallback before layoutCallback","suites":["#fallback on initial load"],"updatePoint":{"line":425,"column":64,"index":15532},"line":425,"code":"  it('should not error on unlayoutCallback before layoutCallback', () => {\n    const el = document.createElement('amp-img');\n    el.setAttribute('src', 'test.jpg');\n    el.setAttribute('width', 100);\n    el.setAttribute('height', 100);\n    el.setAttribute('noprerender', '');\n    const impl = new AmpImg(el);\n    impl.buildCallback();\n    impl.unlayoutCallback();\n  });","file":"unit/builtins/test-amp-img.js","skipped":false,"dir":"test"},{"name":"should set placeholder opacity to 0 on image load","suites":["blurred image placeholder"],"updatePoint":{"line":476,"column":57,"index":17585},"line":476,"code":"    it('should set placeholder opacity to 0 on image load', () => {\n      let impl = getImgWithBlur(true, true);\n      impl.buildCallback();\n      impl.layoutCallback();\n      impl.firstLayoutCompleted();\n      let el = impl.element;\n      let img = el.firstChild;\n      expect(img.style.opacity).to.equal('0');\n      expect(impl.togglePlaceholder).to.not.be.called;\n      impl = getImgWithBlur(true, false);\n      impl.buildCallback();\n      impl.layoutCallback();\n      impl.firstLayoutCompleted();\n      el = impl.element;\n      img = el.firstChild;\n      expect(img.style.opacity).to.be.equal('');\n      expect(impl.togglePlaceholder).to.have.been.calledWith(false);\n      impl = getImgWithBlur(false, true);\n      impl.buildCallback();\n      impl.layoutCallback();\n      impl.firstLayoutCompleted();\n      el = impl.element;\n      img = el.firstChild;\n      expect(img.style.opacity).to.be.equal('');\n      expect(impl.togglePlaceholder).to.have.been.calledWith(false);\n      impl = getImgWithBlur(false, false);\n      impl.buildCallback();\n      impl.layoutCallback();\n      impl.firstLayoutCompleted();\n      el = impl.element;\n      img = el.firstChild;\n      expect(impl.togglePlaceholder).to.have.been.calledWith(false);\n    });","file":"unit/builtins/test-amp-img.js","skipped":false,"dir":"test"},{"name":"does not interfere with SSR img creation","suites":["blurred image placeholder"],"updatePoint":{"line":509,"column":48,"index":18815},"line":509,"code":"    it('does not interfere with SSR img creation', () => {\n      const impl = getImgWithBlur(true, true, true);\n      const ampImg = impl.element;\n      impl.buildCallback();\n      impl.layoutCallback();\n      expect(ampImg.querySelector('img[src*=\"sample.jpg\"]')).to.exist;\n      expect(ampImg.querySelector('img[src*=\"image/svg+xml\"]')).to.exist;\n    });","file":"unit/builtins/test-amp-img.js","skipped":false,"dir":"test"},{"name":"does not interfere with SSR img before placeholder","suites":["blurred image placeholder"],"updatePoint":{"line":517,"column":58,"index":19182},"line":517,"code":"    it('does not interfere with SSR img before placeholder', () => {\n      const impl = getImgWithBlur(true, true);\n      const ampImg = impl.element;\n      ampImg.setAttribute('i-amphtml-ssr', '');\n      const img = document.createElement('img');\n      img.src = ampImg.getAttribute('src');\n      ampImg.insertBefore(img, impl.getPlaceholder());\n      impl.buildCallback();\n      impl.layoutCallback();\n      expect(ampImg.querySelector('img[src*=\"sample.jpg\"]')).to.exist;\n      expect(ampImg.querySelector('img[src*=\"image/svg+xml\"]')).to.exist;\n    });","file":"unit/builtins/test-amp-img.js","skipped":false,"dir":"test"},{"name":"does not interfere with SSR img after placeholder","suites":["blurred image placeholder"],"updatePoint":{"line":529,"column":57,"index":19738},"line":529,"code":"    it('does not interfere with SSR img after placeholder', () => {\n      const impl = getImgWithBlur(true, true);\n      const ampImg = impl.element;\n      ampImg.setAttribute('i-amphtml-ssr', '');\n      const img = document.createElement('img');\n      img.src = ampImg.getAttribute('src');\n      ampImg.appendChild(img);\n      impl.buildCallback();\n      impl.layoutCallback();\n      expect(ampImg.querySelector('img[src*=\"sample.jpg\"]')).to.exist;\n      expect(ampImg.querySelector('img[src*=\"image/svg+xml\"]')).to.exist;\n    });","file":"unit/builtins/test-amp-img.js","skipped":false,"dir":"test"},{"name":"should not generate sizes for amp-imgs that already have sizes on their rendered image children","suites":["auto-generate sizes"],"updatePoint":{"line":565,"column":103,"index":21093},"line":565,"code":"    it('should not generate sizes for amp-imgs that already have sizes on their rendered image children', async () => {\n      const serverRenderedImg = document.createElement('img');\n      serverRenderedImg.setAttribute('src', '/examples/img/sample.jpg');\n      serverRenderedImg.setAttribute('srcset', SRCSET_STRING);\n      serverRenderedImg.setAttribute('sizes', '50vw');\n      const ampImg = await getImg({\n        src: '/examples/img/sample.jpg',\n        srcset: SRCSET_STRING,\n        sizes: '50vw',\n        width: 300,\n        height: 200\n      }, [serverRenderedImg]);\n      const impl = await ampImg.getImpl(false);\n      impl.buildCallback();\n      await impl.layoutCallback();\n      const img = impl.img_;\n      expect(img.getAttribute('sizes')).to.equal('50vw');\n    });","file":"unit/builtins/test-amp-img.js","skipped":false,"dir":"test"},{"name":"should not generate sizes for amp-imgs when rendered from the server","suites":["auto-generate sizes"],"updatePoint":{"line":583,"column":76,"index":21848},"line":583,"code":"    it('should not generate sizes for amp-imgs when rendered from the server', async () => {\n      const serverRenderedImg = document.createElement('img');\n      serverRenderedImg.setAttribute('src', '/examples/img/sample.jpg');\n      serverRenderedImg.setAttribute('srcset', SRCSET_STRING);\n      const ampImg = await getImg({\n        src: '/examples/img/sample.jpg',\n        srcset: SRCSET_STRING,\n        width: 300,\n        height: 200,\n        'i-amphtml-ssr': ''\n      }, [serverRenderedImg]);\n      const impl = await ampImg.getImpl(false);\n      impl.buildCallback();\n      await impl.layoutCallback();\n      const img = impl.img_;\n      expect(img.hasAttribute('sizes')).to.be.false;\n    });","file":"unit/builtins/test-amp-img.js","skipped":false,"dir":"test"},{"name":"should not generate sizes for amp-imgs, rendered with sizes from the server","suites":["auto-generate sizes"],"updatePoint":{"line":600,"column":83,"index":22556},"line":600,"code":"    it('should not generate sizes for amp-imgs, rendered with sizes from the server', async () => {\n      const ampImg = await getImg({\n        src: '/examples/img/sample.jpg',\n        srcset: SRCSET_STRING,\n        sizes: '50vw',\n        width: 300,\n        height: 200\n      });\n      const impl = await ampImg.getImpl(false);\n      impl.buildCallback();\n      await impl.layoutCallback();\n      const img = impl.img_;\n      expect(img.getAttribute('sizes')).to.equal('50vw');\n    });","file":"unit/builtins/test-amp-img.js","skipped":false,"dir":"test"},{"name":"should not generate sizes for amp-imgs without srcset","suites":["auto-generate sizes"],"updatePoint":{"line":614,"column":61,"index":23021},"line":614,"code":"    it('should not generate sizes for amp-imgs without srcset', async () => {\n      const ampImg = await getImg({\n        src: '/examples/img/sample.jpg',\n        width: 300,\n        height: 200\n      });\n      const impl = await ampImg.getImpl(false);\n      impl.buildCallback();\n      await impl.layoutCallback();\n      const img = impl.img_;\n      expect(img.getAttribute('sizes')).to.be.null;\n    });","file":"unit/builtins/test-amp-img.js","skipped":false,"dir":"test"},{"name":"should not generate sizes for amp-imgs with x descriptors","suites":["auto-generate sizes"],"updatePoint":{"line":626,"column":65,"index":23430},"line":626,"code":"    it('should not generate sizes for amp-imgs with x descriptors', async () => {\n      const ampImg = await getImg({\n        srcset: '/examples/img/hero@1x.jpg, /examples/img/hero@2x.jpg 2x',\n        width: 300,\n        height: 200\n      });\n      const impl = await ampImg.getImpl(false);\n      impl.buildCallback();\n      await impl.layoutCallback();\n      const img = impl.img_;\n      expect(img.getAttribute('sizes')).to.be.null;\n    });","file":"unit/builtins/test-amp-img.js","skipped":false,"dir":"test"},{"name":"should generate correct sizes for layout fixed","suites":["auto-generate sizes"],"updatePoint":{"line":638,"column":54,"index":23862},"line":638,"code":"    it('should generate correct sizes for layout fixed', () => {\n      const impl = getStubbedImg({\n        layout: Layout_Enum.FIXED,\n        src: 'test.jpg',\n        srcset: 'large.jpg 2000w, small.jpg 1000w',\n        width: 300,\n        height: 200\n      }, 300);\n      impl.buildCallback();\n      impl.initialize_();\n      const img = impl.img_;\n      expect(impl.getViewport().getWidth()).to.equal(320);\n      expect(img.getAttribute('sizes')).to.equal('(max-width: 320px) 300px, 300px');\n    });","file":"unit/builtins/test-amp-img.js","skipped":false,"dir":"test"},{"name":"should generate correct sizes for layout responsive","suites":["auto-generate sizes"],"updatePoint":{"line":652,"column":59,"index":24369},"line":652,"code":"    it('should generate correct sizes for layout responsive', () => {\n      const impl = getStubbedImg({\n        layout: Layout_Enum.RESPONSIVE,\n        src: 'test.jpg',\n        srcset: 'large.jpg 2000w, small.jpg 1000w',\n        width: 300,\n        height: 200\n      }, 160);\n      impl.buildCallback();\n      impl.initialize_();\n      const img = impl.img_;\n      expect(impl.getViewport().getWidth()).to.equal(320);\n      expect(img.getAttribute('sizes')).to.equal('(max-width: 320px) 160px, 100vw');\n    });","file":"unit/builtins/test-amp-img.js","skipped":false,"dir":"test"},{"name":"should generate correct sizes for layout fixed-height","suites":["auto-generate sizes"],"updatePoint":{"line":666,"column":61,"index":24883},"line":666,"code":"    it('should generate correct sizes for layout fixed-height', () => {\n      const impl = getStubbedImg({\n        layout: Layout_Enum.FIXED_HEIGHT,\n        src: 'test.jpg',\n        srcset: 'large.jpg 2000w, small.jpg 1000w',\n        width: 300,\n        height: 200\n      }, 160);\n      impl.buildCallback();\n      impl.initialize_();\n      const img = impl.img_;\n      expect(impl.getViewport().getWidth()).to.equal(320);\n      expect(img.getAttribute('sizes')).to.equal('(max-width: 320px) 160px, 100vw');\n    });","file":"unit/builtins/test-amp-img.js","skipped":false,"dir":"test"},{"name":"should generate correct sizes for layout fill","suites":["auto-generate sizes"],"updatePoint":{"line":680,"column":53,"index":25391},"line":680,"code":"    it('should generate correct sizes for layout fill', () => {\n      const impl = getStubbedImg({\n        layout: Layout_Enum.FILL,\n        src: 'test.jpg',\n        srcset: 'large.jpg 2000w, small.jpg 1000w',\n        width: 300,\n        height: 200\n      }, 160);\n      impl.buildCallback();\n      impl.initialize_();\n      const img = impl.img_;\n      expect(impl.getViewport().getWidth()).to.equal(320);\n      expect(img.getAttribute('sizes')).to.equal('(max-width: 320px) 160px, 100vw');\n    });","file":"unit/builtins/test-amp-img.js","skipped":false,"dir":"test"},{"name":"should generate correct sizes for layout flex-item","suites":["auto-generate sizes"],"updatePoint":{"line":694,"column":58,"index":25896},"line":694,"code":"    it('should generate correct sizes for layout flex-item', () => {\n      const impl = getStubbedImg({\n        layout: Layout_Enum.FLEX_ITEM,\n        src: 'test.jpg',\n        srcset: 'large.jpg 2000w, small.jpg 1000w',\n        width: 300,\n        height: 200\n      }, 160);\n      impl.buildCallback();\n      impl.initialize_();\n      const img = impl.img_;\n      expect(impl.getViewport().getWidth()).to.equal(320);\n      expect(img.getAttribute('sizes')).to.equal('(max-width: 320px) 160px, 100vw');\n    });","file":"unit/builtins/test-amp-img.js","skipped":false,"dir":"test"},{"name":"should reparent all children under a container for when layout!=container","suites":[],"updatePoint":{"line":21,"column":79,"index":879},"line":21,"code":"  it('should reparent all children under a container for when layout!=container', async () => {\n    const children = '<span>hello</span><span>world</span>';\n    const ampLayout = await getAmpLayout({\n      layout: Layout_Enum.FIXED,\n      height: 100,\n      width: 100\n    }, children);\n    expect(ampLayout.childNodes).have.length(1);\n    expect(ampLayout.childNodes[0].getAttribute('class')).includes('i-amphtml-fill-content');\n    expect(ampLayout.childNodes[0].innerHTML).equal(children);\n  });","file":"unit/builtins/test-amp-layout.js","skipped":false,"dir":"test"},{"name":"should noop when layout=container","suites":[],"updatePoint":{"line":32,"column":39,"index":1338},"line":32,"code":"  it('should noop when layout=container', async () => {\n    const children = '<span>hello</span><span>world</span>';\n    const ampLayout = await getAmpLayout({}, children);\n    expect(ampLayout.childNodes).have.length(2);\n    expect(ampLayout.innerHTML).equal(children);\n  });","file":"unit/builtins/test-amp-layout.js","skipped":false,"dir":"test"},{"name":"buildDom and buildCallback should result in the same outerHTML","suites":[],"updatePoint":{"line":38,"column":68,"index":1644},"line":38,"code":"  it('buildDom and buildCallback should result in the same outerHTML', () => {\n    const layout1 = createElementWithAttributes(env.win.document, 'amp-layout', {\n      width: 100,\n      height: 100\n    });\n    const layout2 = layout1.cloneNode( /* deep */true);\n    new AmpLayout(layout1).buildCallback();\n    buildDom(layout2);\n    expect(layout1.outerHTML).to.equal(layout2.outerHTML);\n  });","file":"unit/builtins/test-amp-layout.js","skipped":false,"dir":"test"},{"name":"buildDom should result in the same outerHTML in WorkerDOM and Browser","suites":[],"updatePoint":{"line":48,"column":75,"index":2044},"line":48,"code":"  it('buildDom should result in the same outerHTML in WorkerDOM and Browser', () => {\n    const browserAmpLayout = createElementWithAttributes(env.win.document, 'amp-layout', {\n      width: 100,\n      height: 100\n    });\n    const workerDomAmpLayout = createElementWithAttributes(createWorkerDomDoc(), 'amp-layout', {\n      width: 100,\n      height: 100\n    });\n    buildDom(browserAmpLayout);\n    buildDom(workerDomAmpLayout);\n    const browserHtml = getDeterministicOuterHTML(browserAmpLayout);\n    const workerDomHtml = getDeterministicOuterHTML(workerDomAmpLayout);\n    expect(browserHtml).to.equal(workerDomHtml);\n  });","file":"unit/builtins/test-amp-layout.js","skipped":false,"dir":"test"},{"name":"buildDom does not modify server rendered elements","suites":[],"updatePoint":{"line":63,"column":55,"index":2649},"line":63,"code":"  it('buildDom does not modify server rendered elements', () => {\n    const layout = createElementWithAttributes(env.win.document, 'amp-layout');\n    buildDom(layout);\n    layout.setAttribute('i-amphtml-ssr', '');\n    const before = layout.outerHTML;\n    buildDom(layout);\n    const after = layout.outerHTML;\n    expect(before).to.equal(after);\n  });","file":"unit/builtins/test-amp-layout.js","skipped":false,"dir":"test"},{"name":"should be non-displayed","suites":[],"updatePoint":{"line":49,"column":29,"index":1667},"line":49,"code":"  it('should be non-displayed', () => {\n    expect(pixel.style.width).to.equal('0px');\n    expect(pixel.style.height).to.equal('0px');\n    expect(pixel.getAttribute('aria-hidden')).to.equal('true');\n    expect(pixel).to.have.display('none');\n  });","file":"unit/builtins/test-amp-pixel.js","skipped":false,"dir":"test"},{"name":"should NOT trigger when src is empty","suites":[],"updatePoint":{"line":55,"column":42,"index":1928},"line":55,"code":"  it('should NOT trigger when src is empty', async () => {\n    const implementation = await pixel.getImpl(false);\n    expect(pixel.children).to.have.length(0);\n    expect(implementation.triggerPromise_).to.be.null;\n    return trigger('').then(img => {\n      expect(implementation.triggerPromise_).to.be.ok;\n      expect(img).to.be.undefined;\n    });\n  });","file":"unit/builtins/test-amp-pixel.js","skipped":false,"dir":"test"},{"name":"should trigger when doc becomes visible","suites":[],"updatePoint":{"line":64,"column":45,"index":2287},"line":64,"code":"  it('should trigger when doc becomes visible', async () => {\n    const implementation = await pixel.getImpl(false);\n    expect(pixel.children).to.have.length(0);\n    expect(implementation.triggerPromise_).to.be.null;\n    return trigger().then(img => {\n      expect(implementation.triggerPromise_).to.be.ok;\n      expect(img.src).to.equal('https://pubads.g.doubleclick.net/activity;dc_iu=1/abc;ord=1?');\n    });\n  });","file":"unit/builtins/test-amp-pixel.js","skipped":false,"dir":"test"},{"name":"should allow protocol-relative URLs","suites":[],"updatePoint":{"line":73,"column":41,"index":2701},"line":73,"code":"  it('should allow protocol-relative URLs', () => {\n    const url = '//pubads.g.doubleclick.net/activity;dc_iu=1/abc;ord=2';\n    return trigger(url).then(img => {\n      // Protocol is resolved to `http:` relative to test server.\n      expect(img.src).to.equal('http://pubads.g.doubleclick.net/activity;dc_iu=1/abc;ord=2');\n    });\n  });","file":"unit/builtins/test-amp-pixel.js","skipped":false,"dir":"test"},{"name":"should disallow http URLs","suites":[],"updatePoint":{"line":80,"column":31,"index":3028},"line":80,"code":"  it('should disallow http URLs', () => {\n    expectAsyncConsoleError(urlErrorRegex);\n    const url = 'http://pubads.g.doubleclick.net/activity;dc_iu=1/abc;ord=2';\n    return expect(trigger(url)).to.eventually.be.rejectedWith(urlErrorRegex);\n  });","file":"unit/builtins/test-amp-pixel.js","skipped":false,"dir":"test"},{"name":"should disallow relative URLs","suites":[],"updatePoint":{"line":85,"column":35,"index":3280},"line":85,"code":"  it('should disallow relative URLs', () => {\n    expectAsyncConsoleError(urlErrorRegex);\n    const url = '/activity;dc_iu=1/abc;ord=2';\n    return expect(trigger(url)).to.eventually.be.rejectedWith(urlErrorRegex);\n  });","file":"unit/builtins/test-amp-pixel.js","skipped":false,"dir":"test"},{"name":"should disallow fake-protocol URLs","suites":[],"updatePoint":{"line":90,"column":40,"index":3506},"line":90,"code":"  it('should disallow fake-protocol URLs', () => {\n    expectAsyncConsoleError(urlErrorRegex);\n    const url = 'https/activity;dc_iu=1/abc;ord=2';\n    return expect(trigger(url)).to.eventually.be.rejectedWith(urlErrorRegex);\n  });","file":"unit/builtins/test-amp-pixel.js","skipped":false,"dir":"test"},{"name":"should replace URL parameters","suites":[],"updatePoint":{"line":95,"column":35,"index":3732},"line":95,"code":"  it('should replace URL parameters', () => {\n    env.sandbox.stub(Math, 'random').callsFake(() => 111);\n    const url = 'https://pubads.g.doubleclick.net/activity;r=RANDOM';\n    return trigger(url).then(img => {\n      expect(img.src).to.equal('https://pubads.g.doubleclick.net/activity;r=111');\n    });\n  });","file":"unit/builtins/test-amp-pixel.js","skipped":false,"dir":"test"},{"name":"should throw for referrerpolicy with value other than no-referrer","suites":[],"updatePoint":{"line":102,"column":71,"index":4078},"line":102,"code":"  it('should throw for referrerpolicy with value other than no-referrer', () => {\n    return allowConsoleError(() => {\n      return createPixel('https://pubads.g.doubleclick.net/activity;dc_iu=1/abc;ord=1?', 'origin').then(() => {\n        throw new Error('must have failed.');\n      }, reason => {\n        expect(reason.message).to.match(/referrerpolicy/);\n      });\n    });\n  });","file":"unit/builtins/test-amp-pixel.js","skipped":false,"dir":"test"},{"name":"should not allow attribution reporting","suites":[],"updatePoint":{"line":111,"column":44,"index":4432},"line":111,"code":"  it('should not allow attribution reporting', () => {\n    const attributionSrc = '//pubads.g.doubleclick.net/activity;dc_iu=1/abc;ord=2';\n    pixel.setAttribute('src', 'https://pubads.g.doubleclick.net/activity;dc_iu=1/abc;ord=1?ars=ATTRIBUTION_REPORTING_STATUS');\n    return trigger(null, attributionSrc).then(img => {\n      // Protocol is resolved to `http:` relative to test server.\n      expect(img.src).to.equal('https://pubads.g.doubleclick.net/activity;dc_iu=1/abc;ord=1?ars=5');\n      expect(img.attributionSrc).to.be.undefined;\n    });\n  });","file":"unit/builtins/test-amp-pixel.js","skipped":false,"dir":"test"},{"name":"should allow attribution reporting with empty attributionsrc","suites":[],"updatePoint":{"line":120,"column":66,"index":5006},"line":120,"code":"  it('should allow attribution reporting with empty attributionsrc', () => {\n    env.sandbox.stub(privacySandboxUtils, 'isAttributionReportingAllowed').returns(true);\n    const attributionSrc = '';\n    pixel.setAttribute('src', 'https://pubads.g.doubleclick.net/activity;dc_iu=1/abc;ord=1?ars=ATTRIBUTION_REPORTING_STATUS');\n    return trigger(null, attributionSrc).then(img => {\n      // Protocol is resolved to `http:` relative to test server.\n      expect(img.src).to.equal('https://pubads.g.doubleclick.net/activity;dc_iu=1/abc;ord=1?ars=6');\n      expect(img.attributionSrc).to.equal('');\n    });\n  });","file":"unit/builtins/test-amp-pixel.js","skipped":false,"dir":"test"},{"name":"should allow attribution reporting with attributionsrc defined","suites":[],"updatePoint":{"line":130,"column":68,"index":5616},"line":130,"code":"  it('should allow attribution reporting with attributionsrc defined', () => {\n    env.sandbox.stub(privacySandboxUtils, 'isAttributionReportingAllowed').returns(true);\n    pixel.setAttribute('src', 'https://pubads.g.doubleclick.net/activity;dc_iu=1/abc;ord=1?ars=ATTRIBUTION_REPORTING_STATUS');\n    const attributionSrc = 'https://adtech.example?ars=ATTRIBUTION_REPORTING_STATUS';\n    return trigger(null, attributionSrc).then(img => {\n      // Protocol is resolved to `http:` relative to test server.\n      expect(img.src).to.equal('https://pubads.g.doubleclick.net/activity;dc_iu=1/abc;ord=1?ars=6');\n      expect(img.attributionSrc).to.equal('https://adtech.example?ars=6');\n    });\n  });","file":"unit/builtins/test-amp-pixel.js","skipped":false,"dir":"test"},{"name":"should use embed's URL replacer","suites":[],"updatePoint":{"line":186,"column":37,"index":7605},"line":186,"code":"  it(\"should use embed's URL replacer\", () => {\n    const url = 'https://pubads.g.doubleclick.net/activity;t=TEST';\n    return trigger(url).then(img => {\n      expect(img.src).to.equal('https://pubads.g.doubleclick.net/activity;t=value1');\n    });\n  });","file":"unit/builtins/test-amp-pixel.js","skipped":false,"dir":"test"},{"name":"should return an empty list for empty component list","suites":[],"updatePoint":{"line":8,"column":58,"index":428},"line":8,"code":"  it('should return an empty list for empty component list', () => {\n    const components = [];\n    expect(getBuilders(components)).to.eql({});\n  });","file":"unit/compiler/test-builders.js","skipped":false,"dir":"test"},{"name":"should return eligible builtins when provided them as components","suites":[],"updatePoint":{"line":12,"column":70,"index":590},"line":12,"code":"  it('should return eligible builtins when provided them as components', () => {\n    const components = [{\n      component: 'amp-layout',\n      version: 'v0'\n    }];\n    const builders = getBuilders(components);\n    expect(builders).have.all.keys(['amp-layout']);\n  });","file":"unit/compiler/test-builders.js","skipped":false,"dir":"test"},{"name":"eligible component with ineligible version is not used","suites":[],"updatePoint":{"line":20,"column":60,"index":850},"line":20,"code":"  it('eligible component with ineligible version is not used', () => {\n    const components = [{\n      component: 'amp-fit-text',\n      version: '1.0'\n    }];\n    const builders = getBuilders(components);\n    expect(builders).to.eql({});\n  });","file":"unit/compiler/test-builders.js","skipped":false,"dir":"test"},{"name":"should return eligible components","suites":[],"updatePoint":{"line":28,"column":39,"index":1073},"line":28,"code":"  it('should return eligible components', () => {\n    const components = [{\n      component: 'amp-fit-text',\n      version: '0.1'\n    }, {\n      component: 'amp-layout',\n      version: 'v0'\n    }];\n    const builders = getBuilders(components);\n    expect(builders).have.all.keys(['amp-layout', 'amp-fit-text']);\n  });","file":"unit/compiler/test-builders.js","skipped":false,"dir":"test"},{"name":"should add i-amphtml-ssr","suites":["buildDom wrapper"],"updatePoint":{"line":51,"column":32,"index":1678},"line":51,"code":"    it('should add i-amphtml-ssr', () => {\n      const elem = doc.createElement('div');\n      builders.noop(elem);\n      expect(elem.hasAttribute('i-amphtml-ssr')).true;\n    });","file":"unit/compiler/test-builders.js","skipped":false,"dir":"test"},{"name":"should apply static layout","suites":["buildDom wrapper"],"updatePoint":{"line":56,"column":34,"index":1858},"line":56,"code":"    it('should apply static layout', () => {\n      const elem = createElementWithAttributes(doc, 'div', {\n        height: 100,\n        width: 100\n      });\n      builders.noop(elem);\n      expect(elem.getAttribute('i-amphtml-layout')).equal('fixed');\n    });","file":"unit/compiler/test-builders.js","skipped":false,"dir":"test"},{"name":"wrapper should behave same in browser as in WorkerDOM","suites":["buildDom wrapper"],"updatePoint":{"line":64,"column":61,"index":2144},"line":64,"code":"    it('wrapper should behave same in browser as in WorkerDOM', () => {\n      const browserDiv = createElementWithAttributes(doc, 'div', {\n        height: 100,\n        width: 100\n      });\n      const workerDomDiv = createElementWithAttributes(createWorkerDomDoc(), 'div', {\n        height: 100,\n        width: 100\n      });\n      builders.noop(browserDiv);\n      builders.noop(workerDomDiv);\n      const browserHtml = getDeterministicOuterHTML(browserDiv);\n      const workerHtml = getDeterministicOuterHTML(workerDomDiv);\n      expect(workerHtml).equal(browserHtml);\n    });","file":"unit/compiler/test-builders.js","skipped":false,"dir":"test"},{"name":"should throw if provided invalid input","suites":[],"updatePoint":{"line":3,"column":44,"index":133},"line":3,"code":"  it('should throw if provided invalid input', () => {\n    const errorMsg = /Must provide component_versions and either document or nodes/;\n    expect(() => compile()).throw(errorMsg);\n    expect(() => compile({})).throw(errorMsg);\n    expect(() => compile({\n      unknown: {}\n    })).throw(errorMsg);\n    expect(() => compile({\n      component_versions: []\n    })).throw(errorMsg); // eslint-disable-line local/camelcase\n    expect(() => compile({\n      nodes: []\n    })).throw(errorMsg);\n    expect(() => compile({\n      document: {}\n    })).throw(errorMsg);\n  });","file":"unit/compiler/test-compile.js","skipped":false,"dir":"test"},{"name":"should return compiled document","suites":[],"updatePoint":{"line":20,"column":37,"index":693},"line":20,"code":"  it('should return compiled document', () => {\n    const document = {\n      root: 0,\n      tree: [{\n        tagid: 92,\n        children: []\n      }],\n      'quirks_mode': false\n    };\n\n    // eslint-disable-next-line local/camelcase\n    expect(compile({\n      document,\n      component_versions: []\n    })).to.deep.equal({\n      document\n    });\n  });","file":"unit/compiler/test-compile.js","skipped":false,"dir":"test"},{"name":"should return compiled nodes","suites":[],"updatePoint":{"line":38,"column":34,"index":1043},"line":38,"code":"  it('should return compiled nodes', () => {\n    const nodes = [{\n      tagid: 1,\n      value: 'a'\n    }, {\n      tagid: 7,\n      value: 'b'\n    }];\n\n    // eslint-disable-next-line local/camelcase\n    expect(compile({\n      nodes,\n      component_versions: []\n    })).to.deep.equal({\n      nodes\n    });\n  });","file":"unit/compiler/test-compile.js","skipped":false,"dir":"test"},{"name":"should get data","suites":["iframe-messaging-client - host window set","getData"],"updatePoint":{"line":22,"column":25,"index":707},"line":22,"code":"      it('should get data', () => {\n        const callbackSpy = env.sandbox.spy();\n        client.getData('type-a', {\n          a: 1\n        }, callbackSpy);\n        expect(postMessageStub).to.be.calledWith(serializeMessage('type-a', 'sentinel-123', {\n          'payload': {\n            a: 1\n          },\n          'messageId': 1\n        }, '01$internalRuntimeVersion$'));\n        postAmpMessage({\n          type: 'type-a-result',\n          sentinel: 'sentinel-123',\n          'messageId': 1,\n          'content': 'result-a'\n        }, hostWindow);\n        expect(callbackSpy).to.be.calledWith('result-a');\n      });","file":"unit/core/3p/test-iframe-messaging-client.js","skipped":false,"dir":"test"},{"name":"should not get data with wrong messageId","suites":["iframe-messaging-client - host window set","getData"],"updatePoint":{"line":41,"column":50,"index":1349},"line":41,"code":"      it('should not get data with wrong messageId', () => {\n        const callbackSpy = env.sandbox.spy();\n        client.getData('type-a', {\n          a: 1\n        }, callbackSpy);\n        expect(postMessageStub).to.be.calledWith(serializeMessage('type-a', 'sentinel-123', {\n          'payload': {\n            a: 1\n          },\n          'messageId': 1\n        }, '01$internalRuntimeVersion$'));\n        postAmpMessage({\n          type: 'type-a-result',\n          sentinel: 'sentinel-123',\n          'messageId': 2,\n          // wrong messageId\n          'content': 'result-a'\n        }, hostWindow);\n        expect(callbackSpy).to.not.be.called;\n      });","file":"unit/core/3p/test-iframe-messaging-client.js","skipped":false,"dir":"test"},{"name":"should not get data with wrong response type","suites":["iframe-messaging-client - host window set","getData"],"updatePoint":{"line":61,"column":54,"index":2012},"line":61,"code":"      it('should not get data with wrong response type', () => {\n        const callbackSpy = env.sandbox.spy();\n        client.getData('type-a', {\n          a: 1\n        }, callbackSpy);\n        expect(postMessageStub).to.be.calledWith(serializeMessage('type-a', 'sentinel-123', {\n          'payload': {\n            a: 1\n          },\n          'messageId': 1\n        }, '01$internalRuntimeVersion$'));\n        postAmpMessage({\n          type: 'type-b-result',\n          // wrong response type\n          sentinel: 'sentinel-123',\n          'messageId': 1,\n          'content': 'result-a'\n        }, hostWindow);\n        expect(callbackSpy).to.not.be.called;\n      });","file":"unit/core/3p/test-iframe-messaging-client.js","skipped":false,"dir":"test"},{"name":"should have callback called once","suites":["iframe-messaging-client - host window set","getData"],"updatePoint":{"line":81,"column":42,"index":2667},"line":81,"code":"      it('should have callback called once', () => {\n        const callbackSpy = env.sandbox.spy();\n        client.getData('type-a', {\n          a: 1\n        }, callbackSpy);\n        expect(postMessageStub).to.be.calledWith(serializeMessage('type-a', 'sentinel-123', {\n          'payload': {\n            a: 1\n          },\n          'messageId': 1\n        }, '01$internalRuntimeVersion$'));\n        postAmpMessage({\n          type: 'type-a-result',\n          sentinel: 'sentinel-123',\n          'messageId': 1,\n          'content': 'result-a'\n        }, hostWindow);\n        postAmpMessage({\n          type: 'type-a-result',\n          sentinel: 'sentinel-123',\n          'messageId': 1,\n          'content': 'result-b'\n        }, hostWindow);\n        expect(callbackSpy).to.be.calledOnce;\n        expect(callbackSpy).to.be.calledWith('result-a');\n      });","file":"unit/core/3p/test-iframe-messaging-client.js","skipped":false,"dir":"test"},{"name":"should send the request via postMessage","suites":["iframe-messaging-client - host window set","makeRequest"],"updatePoint":{"line":109,"column":49,"index":3574},"line":109,"code":"      it('should send the request via postMessage', () => {\n        const callbackSpy = env.sandbox.spy();\n        client.makeRequest('request-type', 'response-type', callbackSpy);\n        expect(postMessageStub).to.be.calledWith(serializeMessage('request-type', 'sentinel-123', {}, '01$internalRuntimeVersion$'));\n        postAmpMessage({\n          type: 'response-type',\n          sentinel: 'sentinel-123'\n        }, hostWindow);\n        expect(callbackSpy).to.be.calledOnce;\n        postAmpMessage({\n          type: 'response-type',\n          sentinel: 'sentinel-123'\n        }, hostWindow);\n        expect(callbackSpy).to.be.calledTwice;\n      });","file":"unit/core/3p/test-iframe-messaging-client.js","skipped":false,"dir":"test"},{"name":"should unlisten after message received","suites":["iframe-messaging-client - host window set","requestOnce"],"updatePoint":{"line":126,"column":48,"index":4269},"line":126,"code":"      it('should unlisten after message received', () => {\n        const callbackSpy = env.sandbox.spy();\n        client.requestOnce('request-type', 'response-type', callbackSpy);\n        expect(postMessageStub).to.be.calledWith(serializeMessage('request-type', 'sentinel-123', {}, '01$internalRuntimeVersion$'));\n        postAmpMessage({\n          type: 'response-type',\n          sentinel: 'sentinel-123'\n        }, hostWindow);\n        expect(callbackSpy).to.be.calledOnce;\n        postAmpMessage({\n          type: 'response-type',\n          sentinel: 'sentinel-123'\n        }, hostWindow);\n        expect(callbackSpy).to.be.calledOnce;\n      });","file":"unit/core/3p/test-iframe-messaging-client.js","skipped":false,"dir":"test"},{"name":"should not invoke callback on receiving a non-AMP message","suites":["iframe-messaging-client - host window set","registerCallback"],"updatePoint":{"line":193,"column":67,"index":6980},"line":193,"code":"      it('should not invoke callback on receiving a non-AMP message', () => {\n        const callbackSpy = env.sandbox.spy();\n        client.registerCallback('response-type', callbackSpy);\n        win.eventListeners.fire({\n          type: 'message',\n          source: hostWindow,\n          origin: 'http://www.example.com',\n          data: 'nonamp-' + JSON.stringify({\n            type: 'response-type',\n            sentinel: 'sentinel-123'\n          })\n        });\n        expect(callbackSpy).to.not.be.called;\n      });","file":"unit/core/3p/test-iframe-messaging-client.js","skipped":false,"dir":"test"},{"name":"should send postMessage to host window","suites":["iframe-messaging-client - host window set","sendMessage"],"updatePoint":{"line":236,"column":48,"index":8671},"line":236,"code":"      it('should send postMessage to host window', () => {\n        client.sendMessage('request-type', {\n          x: 1,\n          y: 'abc'\n        });\n        expect(postMessageStub).to.be.calledWith(serializeMessage('request-type', 'sentinel-123', {\n          x: 1,\n          y: 'abc'\n        }, '01$internalRuntimeVersion$'));\n      });","file":"unit/core/3p/test-iframe-messaging-client.js","skipped":false,"dir":"test"},{"name":"should broadcast the request via postMessage","suites":["iframe-messaging-client - host window not set","makeRequest"],"updatePoint":{"line":270,"column":54,"index":9717},"line":270,"code":"      it('should broadcast the request via postMessage', () => {\n        const callbackSpy = env.sandbox.spy();\n        client.makeRequest('request-type', 'response-type', callbackSpy);\n        expect(postMessageStub1).to.be.calledWith(serializeMessage('request-type', 'sentinel-123', {}, '01$internalRuntimeVersion$'));\n        expect(postMessageStub2).to.be.calledWith(serializeMessage('request-type', 'sentinel-123', {}, '01$internalRuntimeVersion$'));\n\n        // hostWindow2 is the first to send a reply.\n        postAmpMessage({\n          type: 'response-type',\n          sentinel: 'sentinel-123'\n        }, hostWindow2);\n        expect(callbackSpy).to.be.calledOnce;\n        // since hostWindow2 is now set as host, a message from hostWindow1\n        // should not be accepted.\n        postAmpMessage({\n          type: 'response-type',\n          sentinel: 'sentinel-123'\n        }, hostWindow1);\n        expect(callbackSpy).to.be.calledOnce;\n        postAmpMessage({\n          type: 'response-type',\n          sentinel: 'sentinel-123'\n        }, hostWindow2);\n        expect(callbackSpy).to.be.calledTwice;\n        postAmpMessage({\n          type: 'response-type',\n          sentinel: 'sentinel-123'\n        }, hostWindow1);\n        expect(callbackSpy).to.be.calledTwice;\n      });","file":"unit/core/3p/test-iframe-messaging-client.js","skipped":false,"dir":"test"},{"name":"should create an element node","suites":["ContextNode.get"],"updatePoint":{"line":119,"column":37,"index":4007},"line":119,"code":"    it('should create an element node', () => {\n      const el = doc.createElement('div');\n      const cn = ContextNode.get(el);\n      expect(cn.node).to.equal(el);\n      // Parent always starts as null.\n      expectContext(cn, {\n        parent: null,\n        isRoot: false,\n        root: null,\n        children: [],\n        discoverable: true\n      });\n    });","file":"unit/core/context/test-node-discover.js","skipped":false,"dir":"test"},{"name":"should create a fragment node","suites":["ContextNode.get"],"updatePoint":{"line":132,"column":37,"index":4369},"line":132,"code":"    it('should create a fragment node', () => {\n      const frag = doc.createDocumentFragment();\n      const cn = ContextNode.get(frag);\n      expect(cn.node).to.equal(frag);\n      // Parent always starts as null.\n      expectContext(cn, {\n        parent: null,\n        isRoot: false,\n        root: null,\n        children: [],\n        discoverable: true\n      });\n    });","file":"unit/core/context/test-node-discover.js","skipped":false,"dir":"test"},{"name":"should create a document node","suites":["ContextNode.get"],"updatePoint":{"line":145,"column":37,"index":4741},"line":145,"code":"    it('should create a document node', () => {\n      const cn = ContextNode.get(doc);\n      expect(cn.node).to.equal(doc);\n      // Parent always starts as null.\n      expectContext(cn, {\n        parent: null,\n        isRoot: true,\n        root: doc,\n        children: [],\n        discoverable: false\n      });\n    });","file":"unit/core/context/test-node-discover.js","skipped":false,"dir":"test"},{"name":"should create a node only once","suites":["ContextNode.get"],"updatePoint":{"line":157,"column":38,"index":5062},"line":157,"code":"    it('should create a node only once', () => {\n      const el = doc.createElement('div');\n      const frag = doc.createDocumentFragment();\n      const cn1 = ContextNode.get(el);\n      const cn2 = ContextNode.get(frag);\n      const cn3 = ContextNode.get(doc);\n      expect(cn1).to.equal(ContextNode.get(el));\n      expect(cn2).to.equal(ContextNode.get(frag));\n      expect(cn3).to.equal(ContextNode.get(doc));\n    });","file":"unit/core/context/test-node-discover.js","skipped":false,"dir":"test"},{"name":"should find itself","suites":["ContextNode.closest"],"updatePoint":{"line":175,"column":26,"index":5648},"line":175,"code":"    it('should find itself', () => {\n      const elementContext = ContextNode.get(element);\n      expect(ContextNode.closest(element)).to.equal(elementContext);\n    });","file":"unit/core/context/test-node-discover.js","skipped":false,"dir":"test"},{"name":"should skip itself","suites":["ContextNode.closest"],"updatePoint":{"line":179,"column":26,"index":5817},"line":179,"code":"    it('should skip itself', () => {\n      ContextNode.get(element);\n      const grandparentContext = ContextNode.get(grandparent);\n      expect(ContextNode.closest(element, false)).to.equal(grandparentContext);\n      expect(ContextNode.closest(grandparent, false)).to.be.null;\n    });","file":"unit/core/context/test-node-discover.js","skipped":false,"dir":"test"},{"name":"should go up DOM tree","suites":["ContextNode.closest"],"updatePoint":{"line":185,"column":29,"index":6106},"line":185,"code":"    it('should go up DOM tree', () => {\n      const grandparentContext = ContextNode.get(grandparent);\n      expect(ContextNode.closest(element)).to.equal(grandparentContext);\n    });","file":"unit/core/context/test-node-discover.js","skipped":false,"dir":"test"},{"name":"should auto-create root when connected","suites":["ContextNode.closest"],"updatePoint":{"line":189,"column":46,"index":6307},"line":189,"code":"    it('should auto-create root when connected', () => {\n      doc.body.appendChild(tree);\n      expect(ContextNode.closest(element)).to.equal(ContextNode.get(doc));\n      expectContext(ContextNode.get(doc), {\n        isRoot: true\n      });\n    });","file":"unit/core/context/test-node-discover.js","skipped":false,"dir":"test"},{"name":"should auto-create root on a fragment","suites":["ContextNode.closest"],"updatePoint":{"line":196,"column":45,"index":6555},"line":196,"code":"    it('should auto-create root on a fragment', () => {\n      const frag = doc.createDocumentFragment();\n      frag.appendChild(tree);\n      expect(ContextNode.closest(element)).to.equal(ContextNode.get(frag));\n      expectContext(ContextNode.get(frag), {\n        isRoot: false,\n        root: null,\n        parent: null\n      });\n    });","file":"unit/core/context/test-node-discover.js","skipped":false,"dir":"test"},{"name":"should auto-create a custom AMP element","suites":["ContextNode.closest"],"updatePoint":{"line":206,"column":47,"index":6895},"line":206,"code":"    it('should auto-create a custom AMP element', () => {\n      const ampElement = doc.createElement('amp-element');\n      ampElement.appendChild(tree);\n      expect(ContextNode.closest(element)).to.equal(ContextNode.get(ampElement));\n      expectContext(ContextNode.get(ampElement), {\n        isRoot: false,\n        root: null,\n        parent: null\n      });\n    });","file":"unit/core/context/test-node-discover.js","skipped":false,"dir":"test"},{"name":"should be created in an undiscovered mode","suites":["discover"],"updatePoint":{"line":230,"column":49,"index":7577},"line":230,"code":"    it('should be created in an undiscovered mode', () => {\n      expectContext(sibling1, {\n        parent: null,\n        discoverable: true\n      });\n      expectContext(sibling2, {\n        parent: null,\n        discoverable: true\n      });\n      expectContext(cousin1, {\n        parent: null,\n        discoverable: true\n      });\n    });","file":"unit/core/context/test-node-discover.js","skipped":false,"dir":"test"},{"name":"should not auto-discover an orphan","suites":["discover","disconnected tree"],"updatePoint":{"line":248,"column":44,"index":8055},"line":248,"code":"      it('should not auto-discover an orphan', async () => {\n        expectContext(sibling1, {\n          parent: null,\n          children: [],\n          root: null,\n          isRoot: false,\n          discoverable: true\n        });\n        expectContext(sibling2, {\n          parent: null,\n          children: [],\n          root: null,\n          isRoot: false,\n          discoverable: true\n        });\n        expectContext(cousin1, {\n          parent: null,\n          children: [],\n          root: null,\n          isRoot: false,\n          discoverable: true\n        });\n      });","file":"unit/core/context/test-node-discover.js","skipped":false,"dir":"test"},{"name":"should auto-discover the grandparent","suites":["discover","disconnected tree"],"updatePoint":{"line":271,"column":46,"index":8637},"line":271,"code":"      it('should auto-discover the grandparent', async () => {\n        await waitForDiscover(grandparent);\n        await rediscover(sibling1, sibling2, cousin1);\n        expectContext(sibling1, {\n          isRoot: false,\n          root: null,\n          parent: grandparent,\n          children: [],\n          discoverable: true\n        });\n        expectContext(sibling2, {\n          isRoot: false,\n          root: null,\n          parent: grandparent,\n          children: [],\n          discoverable: true\n        });\n        expectContext(cousin1, {\n          isRoot: false,\n          root: null,\n          parent: grandparent,\n          children: [],\n          discoverable: true\n        });\n        expectContext(grandparent, {\n          isRoot: false,\n          root: null,\n          parent: null,\n          children: [sibling1, sibling2, cousin1],\n          discoverable: true\n        });\n        const element3 = el('T-1-1-3');\n        await waitForDiscover(element3);\n        expectContext(element3, {\n          isRoot: false,\n          root: null,\n          parent: grandparent,\n          children: [],\n          discoverable: true\n        });\n        expectContext(grandparent, {\n          isRoot: false,\n          root: null,\n          parent: null,\n          children: [sibling1, sibling2, cousin1, element3],\n          discoverable: true\n        });\n      });","file":"unit/core/context/test-node-discover.js","skipped":false,"dir":"test"},{"name":"should insert an intermediary parent","suites":["discover","disconnected tree"],"updatePoint":{"line":319,"column":46,"index":10007},"line":319,"code":"      it('should insert an intermediary parent', async () => {\n        await waitForDiscover(grandparent);\n        await rediscover(sibling1, sibling2, cousin1);\n        expectContext(sibling1, {\n          parent: grandparent\n        });\n        expectContext(sibling2, {\n          parent: grandparent\n        });\n        expectContext(cousin1, {\n          parent: grandparent\n        });\n        await waitForDiscover(parent);\n        expectContext(sibling1, {\n          parent,\n          children: [],\n          isRoot: false,\n          root: null,\n          discoverable: true\n        });\n        expectContext(sibling2, {\n          parent,\n          children: [],\n          isRoot: false,\n          root: null,\n          discoverable: true\n        });\n        expectContext(parent, {\n          parent: grandparent,\n          children: [sibling1, sibling2],\n          isRoot: false,\n          root: null,\n          discoverable: true\n        });\n        expectContext(grandparent, {\n          parent: null,\n          children: [parent, cousin1],\n          isRoot: false,\n          root: null,\n          discoverable: true\n        });\n      });","file":"unit/core/context/test-node-discover.js","skipped":false,"dir":"test"},{"name":"should assign/unassign a slot","suites":["discover","disconnected tree"],"updatePoint":{"line":361,"column":39,"index":11147},"line":361,"code":"      it('should assign/unassign a slot', async () => {\n        await waitForDiscover(grandparent, parent);\n        await rediscover(sibling1, sibling2, cousin1);\n        expectContext(sibling1, {\n          parent\n        });\n        expectContext(sibling2, {\n          parent\n        });\n        expectContext(cousin1, {\n          grandparent\n        });\n        expectContext(grandparent, {\n          children: [parent, cousin1]\n        });\n        expectContext(parent, {\n          children: [sibling1, sibling2]\n        });\n\n        // Slot cousin1 under parent.\n        ContextNode.assignSlot(cousin1, el('T-1-1-3'));\n        await rediscover(cousin1);\n        expectContext(cousin1, {\n          parent\n        });\n        expectContext(grandparent, {\n          children: [parent]\n        });\n        expectContext(parent, {\n          children: [sibling1, sibling2, cousin1]\n        });\n\n        // Unslot cousin1.\n        ContextNode.unassignSlot(cousin1, el('T-1-1-3'));\n        await rediscover(cousin1);\n        expectContext(cousin1, {\n          parent: grandparent\n        });\n        expectContext(grandparent, {\n          children: [parent, cousin1]\n        });\n        expectContext(parent, {\n          children: [sibling1, sibling2]\n        });\n      });","file":"unit/core/context/test-node-discover.js","skipped":false,"dir":"test"},{"name":"should assign/unassign a slot in Shadow DOM","suites":["discover","disconnected tree"],"updatePoint":{"line":406,"column":53,"index":12431},"line":406,"code":"      it('should assign/unassign a slot in Shadow DOM', async () => {\n        if (Element.prototype.attachShadow) {\n          return;\n        }\n        await waitForDiscover(grandparent, parent);\n        const grandchild = doc.createElement('div');\n        sibling1.appendChild(grandchild);\n        await waitForDiscover(grandchild);\n        const shadowRoot = sibling1.attachShadow({\n          mode: 'open'\n        });\n        await waitForDiscover(shadowRoot);\n        expectContext(grandchild, {\n          parent: sibling1\n        });\n        expectContext(sibling1, {\n          children: [grandchild, shadowRoot]\n        });\n        expectContext(shadowRoot, {\n          children: [],\n          parent: sibling1\n        });\n\n        // Slot.\n        const slot = doc.createElement('slot');\n        shadowRoot.appendChild(slot);\n        await rediscover(grandchild);\n        expectContext(grandchild, {\n          parent: shadowRoot\n        });\n        expectContext(sibling1, {\n          children: [shadowRoot]\n        });\n        expectContext(shadowRoot, {\n          children: [grandchild],\n          parent: sibling1\n        });\n\n        // Unslot.\n        shadowRoot.removeChild(slot);\n        await rediscover(grandchild);\n        expectContext(grandchild, {\n          parent: sibling1\n        });\n        expectContext(sibling1, {\n          children: [grandchild, shadowRoot]\n        });\n        expectContext(shadowRoot, {\n          children: [],\n          parent: sibling1\n        });\n      });","file":"unit/core/context/test-node-discover.js","skipped":false,"dir":"test"},{"name":"should override the root","suites":["discover","disconnected tree"],"updatePoint":{"line":458,"column":34,"index":13918},"line":458,"code":"      it('should override the root', async () => {\n        await waitForDiscover(grandparent, parent);\n        await rediscover(sibling1, sibling2, cousin1);\n        ContextNode.get(grandparent).setIsRoot(true);\n        expectContext(grandparent, {\n          parent: null,\n          children: [parent, cousin1],\n          isRoot: true,\n          root: grandparent,\n          discoverable: false\n        });\n        expectContext(parent, {\n          parent: grandparent,\n          children: [sibling1, sibling2],\n          isRoot: false,\n          root: grandparent,\n          discoverable: true\n        });\n        expectContext(sibling1, {\n          parent,\n          children: [],\n          isRoot: false,\n          root: grandparent,\n          discoverable: true\n        });\n        expectContext(sibling2, {\n          parent,\n          children: [],\n          isRoot: false,\n          root: grandparent,\n          discoverable: true\n        });\n        expectContext(cousin1, {\n          parent: grandparent,\n          children: [],\n          isRoot: false,\n          root: grandparent,\n          discoverable: true\n        });\n      });","file":"unit/core/context/test-node-discover.js","skipped":false,"dir":"test"},{"name":"should override the parent","suites":["discover","disconnected tree"],"updatePoint":{"line":498,"column":36,"index":15062},"line":498,"code":"      it('should override the parent', async () => {\n        await waitForDiscover(grandparent);\n        await rediscover(sibling1, sibling2, cousin1);\n        expectContext(sibling1, {\n          parent: grandparent\n        });\n        expectContext(sibling2, {\n          parent: grandparent\n        });\n        expectContext(cousin1, {\n          parent: grandparent\n        });\n        ContextNode.get(sibling2).setParent(sibling1);\n        expectContext(sibling2, {\n          parent: sibling1,\n          children: [],\n          discoverable: false\n        });\n        expectContext(sibling1, {\n          parent: grandparent,\n          children: [sibling2],\n          discoverable: true\n        });\n        expectContext(grandparent, {\n          children: [sibling1, cousin1],\n          discoverable: true\n        });\n      });","file":"unit/core/context/test-node-discover.js","skipped":false,"dir":"test"},{"name":"should configure the root","suites":["discover","tree connected later"],"updatePoint":{"line":535,"column":35,"index":16156},"line":535,"code":"      it('should configure the root', async () => {\n        expectContext(connectTree(), {\n          discoverable: false,\n          isRoot: true,\n          root: doc,\n          parent: null,\n          children: []\n        });\n      });","file":"unit/core/context/test-node-discover.js","skipped":false,"dir":"test"},{"name":"should auto-discover an orphan","suites":["discover","tree connected later"],"updatePoint":{"line":544,"column":40,"index":16397},"line":544,"code":"      it('should auto-discover an orphan', async () => {\n        expectContext(sibling1, {\n          parent: null,\n          root: null\n        });\n        expectContext(sibling2, {\n          parent: null,\n          root: null\n        });\n        expectContext(cousin1, {\n          parent: null,\n          root: null\n        });\n        connectTree();\n        await rediscover(sibling1, sibling2, cousin1);\n        expectContext(sibling1, {\n          parent: doc,\n          root: doc,\n          children: [],\n          isRoot: false,\n          discoverable: true\n        });\n        expectContext(sibling2, {\n          parent: doc,\n          root: doc,\n          children: [],\n          isRoot: false,\n          discoverable: true\n        });\n        expectContext(cousin1, {\n          parent: doc,\n          root: doc,\n          children: [],\n          isRoot: false,\n          discoverable: true\n        });\n        expectContext(doc, {\n          isRoot: true,\n          root: doc,\n          parent: null,\n          children: [sibling1, sibling2, cousin1]\n        });\n      });","file":"unit/core/context/test-node-discover.js","skipped":false,"dir":"test"},{"name":"should auto-discover the grandparent","suites":["discover","tree connected later"],"updatePoint":{"line":587,"column":46,"index":17483},"line":587,"code":"      it('should auto-discover the grandparent', async () => {\n        await waitForDiscover(grandparent);\n        await rediscover(sibling1, sibling2, cousin1);\n        connectTree();\n        await rediscover(grandparent);\n        expectContext(doc, {\n          isRoot: true,\n          root: doc,\n          parent: null,\n          children: [grandparent],\n          discoverable: false\n        });\n        expectContext(grandparent, {\n          isRoot: false,\n          root: doc,\n          parent: doc,\n          children: [sibling1, sibling2, cousin1],\n          discoverable: true\n        });\n        expectContext(sibling1, {\n          isRoot: false,\n          root: doc,\n          parent: grandparent,\n          children: [],\n          discoverable: true\n        });\n        expectContext(sibling2, {\n          isRoot: false,\n          root: doc,\n          parent: grandparent,\n          children: [],\n          discoverable: true\n        });\n        expectContext(cousin1, {\n          isRoot: false,\n          root: doc,\n          parent: grandparent,\n          children: [],\n          discoverable: true\n        });\n      });","file":"unit/core/context/test-node-discover.js","skipped":false,"dir":"test"},{"name":"should insert an intermediary parent","suites":["discover","tree connected later"],"updatePoint":{"line":628,"column":46,"index":18617},"line":628,"code":"      it('should insert an intermediary parent', async () => {\n        await waitForDiscover(grandparent, parent);\n        await rediscover(sibling1, sibling2, cousin1);\n        connectTree();\n        await rediscover(grandparent);\n        expectContext(doc, {\n          parent: null,\n          children: [grandparent],\n          isRoot: true,\n          root: doc,\n          discoverable: false\n        });\n        expectContext(grandparent, {\n          parent: doc,\n          children: [parent, cousin1],\n          isRoot: false,\n          root: doc,\n          discoverable: true\n        });\n        expectContext(parent, {\n          parent: grandparent,\n          children: [sibling1, sibling2],\n          isRoot: false,\n          root: doc,\n          discoverable: true\n        });\n        expectContext(sibling1, {\n          parent,\n          children: [],\n          isRoot: false,\n          root: doc,\n          discoverable: true\n        });\n        expectContext(sibling2, {\n          parent,\n          children: [],\n          isRoot: false,\n          root: doc,\n          discoverable: true\n        });\n        expectContext(cousin1, {\n          parent: grandparent,\n          children: [],\n          isRoot: false,\n          root: doc,\n          discoverable: true\n        });\n      });","file":"unit/core/context/test-node-discover.js","skipped":false,"dir":"test"},{"name":"should configure root","suites":["discover","tree connected earlier"],"updatePoint":{"line":682,"column":31,"index":20090},"line":682,"code":"      it('should configure root', () => {\n        expectContext(doc, {\n          root: doc,\n          isRoot: true,\n          parent: null,\n          children: [sibling1, sibling2, cousin1],\n          discoverable: false\n        });\n      });","file":"unit/core/context/test-node-discover.js","skipped":false,"dir":"test"},{"name":"should auto-discover an orphan","suites":["discover","tree connected earlier"],"updatePoint":{"line":691,"column":40,"index":20342},"line":691,"code":"      it('should auto-discover an orphan', async () => {\n        expectContext(sibling1, {\n          parent: doc,\n          root: doc,\n          isRoot: false,\n          children: [],\n          discoverable: true\n        });\n        expectContext(sibling2, {\n          parent: doc,\n          root: doc,\n          isRoot: false,\n          children: [],\n          discoverable: true\n        });\n        expectContext(cousin1, {\n          parent: doc,\n          root: doc,\n          isRoot: false,\n          children: [],\n          discoverable: true\n        });\n      });","file":"unit/core/context/test-node-discover.js","skipped":false,"dir":"test"},{"name":"should auto-discover the grandparent","suites":["discover","tree connected earlier"],"updatePoint":{"line":714,"column":46,"index":20918},"line":714,"code":"      it('should auto-discover the grandparent', async () => {\n        await waitForDiscover(grandparent);\n        expectContext(doc, {\n          isRoot: true,\n          root: doc,\n          parent: null,\n          children: [grandparent],\n          discoverable: false\n        });\n        expectContext(grandparent, {\n          isRoot: false,\n          root: doc,\n          parent: doc,\n          children: [sibling1, sibling2, cousin1],\n          discoverable: true\n        });\n        expectContext(sibling1, {\n          isRoot: false,\n          root: doc,\n          parent: grandparent,\n          children: [],\n          discoverable: true\n        });\n        expectContext(sibling2, {\n          isRoot: false,\n          root: doc,\n          parent: grandparent,\n          children: [],\n          discoverable: true\n        });\n        expectContext(cousin1, {\n          isRoot: false,\n          root: doc,\n          parent: grandparent,\n          children: [],\n          discoverable: true\n        });\n      });","file":"unit/core/context/test-node-discover.js","skipped":false,"dir":"test"},{"name":"should insert an intermediary parent","suites":["discover","tree connected earlier"],"updatePoint":{"line":752,"column":46,"index":21935},"line":752,"code":"      it('should insert an intermediary parent', async () => {\n        await waitForDiscover(grandparent, parent);\n        expectContext(doc, {\n          isRoot: true,\n          root: doc,\n          parent: null,\n          children: [grandparent],\n          discoverable: false\n        });\n        expectContext(grandparent, {\n          parent: doc,\n          children: [parent, cousin1],\n          isRoot: false,\n          root: doc,\n          discoverable: true\n        });\n        expectContext(parent, {\n          parent: grandparent,\n          children: [sibling1, sibling2],\n          isRoot: false,\n          root: doc,\n          discoverable: true\n        });\n        expectContext(sibling1, {\n          parent,\n          children: [],\n          isRoot: false,\n          root: doc,\n          discoverable: true\n        });\n        expectContext(sibling2, {\n          parent,\n          children: [],\n          isRoot: false,\n          root: doc,\n          discoverable: true\n        });\n        expectContext(cousin1, {\n          parent: grandparent,\n          children: [],\n          isRoot: false,\n          root: doc,\n          discoverable: true\n        });\n      });","file":"unit/core/context/test-node-discover.js","skipped":false,"dir":"test"},{"name":"should move to new root","suites":["discover","tree connected earlier"],"updatePoint":{"line":797,"column":33,"index":23101},"line":797,"code":"      it('should move to new root', async () => {\n        await waitForDiscover(grandparent, parent);\n        const doc2 = document.implementation.createHTMLDocument('');\n        ContextNode.get(doc2);\n        doc2.body.appendChild(tree);\n        await rediscover(grandparent);\n        expectContext(doc, {\n          parent: null,\n          children: [],\n          isRoot: true,\n          root: doc,\n          discoverable: false\n        });\n        expectContext(doc2, {\n          parent: null,\n          children: [grandparent],\n          isRoot: true,\n          root: doc2,\n          discoverable: false\n        });\n        expectContext(grandparent, {\n          parent: doc2,\n          children: [parent, cousin1],\n          root: doc2\n        });\n        expectContext(parent, {\n          parent: grandparent,\n          children: [sibling1, sibling2],\n          root: doc2\n        });\n        expectContext(sibling1, {\n          parent,\n          children: [],\n          root: doc2\n        });\n        expectContext(sibling2, {\n          parent,\n          children: [],\n          root: doc2\n        });\n        expectContext(cousin1, {\n          parent: grandparent,\n          children: [],\n          root: doc2\n        });\n      });","file":"unit/core/context/test-node-discover.js","skipped":false,"dir":"test"},{"name":"should override the root","suites":["discover","tree connected earlier"],"updatePoint":{"line":843,"column":34,"index":24341},"line":843,"code":"      it('should override the root', async () => {\n        await waitForDiscover(grandparent, parent);\n        ContextNode.get(grandparent).setIsRoot(true);\n        expectContext(grandparent, {\n          parent: doc,\n          children: [parent, cousin1],\n          isRoot: true,\n          root: grandparent,\n          discoverable: false\n        });\n        expectContext(parent, {\n          parent: grandparent,\n          children: [sibling1, sibling2],\n          isRoot: false,\n          root: grandparent,\n          discoverable: true\n        });\n        expectContext(sibling1, {\n          parent,\n          children: [],\n          isRoot: false,\n          root: grandparent,\n          discoverable: true\n        });\n        expectContext(sibling2, {\n          parent,\n          children: [],\n          isRoot: false,\n          root: grandparent,\n          discoverable: true\n        });\n        expectContext(cousin1, {\n          parent: grandparent,\n          children: [],\n          isRoot: false,\n          root: grandparent,\n          discoverable: true\n        });\n      });","file":"unit/core/context/test-node-discover.js","skipped":false,"dir":"test"},{"name":"should rediscover slots when shadow root is added","suites":["discover shadow DOM"],"updatePoint":{"line":893,"column":57,"index":25681},"line":893,"code":"    it('should rediscover slots when shadow root is added', async () => {\n      doc.body.appendChild(tree);\n      await waitForDiscover(parent, sibling1, sibling2);\n      const shadowRoot = parent.attachShadow({\n        mode: 'open'\n      });\n      ContextNode.get(shadowRoot).setParent(parent);\n      const slot1 = doc.createElement('slot');\n      slot1.name = 'slot1';\n      sibling1.setAttribute('slot', 'slot1');\n      shadowRoot.appendChild(slot1);\n      await waitForDiscover(shadowRoot, sibling1);\n\n      // sibling1's parent is shadow root because it matches the slot.\n      expectContext(sibling1, {\n        parent: shadowRoot\n      });\n      // sibling2's parent stays with \"parent\" because it's unslotted.\n      expectContext(sibling2, {\n        parent\n      });\n    });","file":"unit/core/context/test-node-discover.js","skipped":false,"dir":"test"},{"name":"should assign shadow root as a parent via slot","suites":["discover shadow DOM","shadow DOM exists from the start"],"updatePoint":{"line":938,"column":56,"index":27315},"line":938,"code":"      it('should assign shadow root as a parent via slot', () => {\n        // sibling1's parent is shadow root because it matches the slot.\n        expectContext(sibling1, {\n          parent: shadowRoot\n        });\n        // sibling2's parent stays with \"parent\" because it's unslotted.\n        expectContext(sibling2, {\n          parent\n        });\n      });","file":"unit/core/context/test-node-discover.js","skipped":false,"dir":"test"},{"name":"should reassign when slots change","suites":["discover shadow DOM","shadow DOM exists from the start"],"updatePoint":{"line":948,"column":43,"index":27663},"line":948,"code":"      it('should reassign when slots change', async () => {\n        sibling1.removeAttribute('slot');\n        sibling2.setAttribute('slot', 'slot1');\n        await awaitSlotChange();\n        clock.runAll();\n\n        // sibling1's parent stays with \"parent\" because it's unslotted.\n        expectContext(sibling1, {\n          parent\n        });\n        // sibling2's parent is shadow root because it matches the slot.\n        expectContext(sibling2, {\n          parent: shadowRoot\n        });\n      });","file":"unit/core/context/test-node-discover.js","skipped":false,"dir":"test"},{"name":"should reassign when slots are removed","suites":["discover shadow DOM","shadow DOM exists from the start"],"updatePoint":{"line":963,"column":48,"index":28170},"line":963,"code":"      it('should reassign when slots are removed', async () => {\n        slot1Parent.removeChild(slot1);\n        await waitForDiscover(sibling1);\n        // Returns to parent.\n        expectContext(sibling1, {\n          parent\n        });\n      });","file":"unit/core/context/test-node-discover.js","skipped":false,"dir":"test"},{"name":"should reassign to slot if it becomes a context node","suites":["discover shadow DOM","shadow DOM exists from the start"],"updatePoint":{"line":971,"column":62,"index":28433},"line":971,"code":"      it('should reassign to slot if it becomes a context node', async () => {\n        const sibling1Wait = waitForDiscover(sibling1);\n        await rediscover(slot1);\n        await sibling1Wait;\n        // slot belongs to the shadow root.\n        expectContext(slot1, {\n          parent: shadowRoot\n        });\n        // sibling1's parent is slot now.\n        expectContext(sibling1, {\n          parent: slot1\n        });\n        // Not changed: unslotted.\n        expectContext(sibling2, {\n          parent\n        });\n      });","file":"unit/core/context/test-node-discover.js","skipped":false,"dir":"test"},{"name":"should reassign to slot parent becomes a context node","suites":["discover shadow DOM","shadow DOM exists from the start"],"updatePoint":{"line":988,"column":63,"index":28966},"line":988,"code":"      it('should reassign to slot parent becomes a context node', async () => {\n        const sibling1Wait = waitForDiscover(sibling1);\n        await rediscover(slot1Parent);\n        await sibling1Wait;\n        // slot belongs to the shadow root.\n        expectContext(slot1Parent, {\n          parent: shadowRoot\n        });\n        // sibling1's parent is slot now.\n        expectContext(sibling1, {\n          parent: slot1Parent\n        });\n        // Not changed: unslotted.\n        expectContext(sibling2, {\n          parent\n        });\n      });","file":"unit/core/context/test-node-discover.js","skipped":false,"dir":"test"},{"name":"should rediscover children when a new group is added","suites":["discover groups"],"updatePoint":{"line":1021,"column":60,"index":29926},"line":1021,"code":"    it('should rediscover children when a new group is added', async () => {\n      const group1 = ContextNode.get(parent).addGroup('group1', node => node == sibling1, 0);\n      await waitForDiscover(group1, sibling1);\n      clock.runAll();\n      expect(group1.node).to.equal(parent);\n      expectContext(group1, {\n        parent,\n        children: [sibling1]\n      });\n\n      // sibling1 is reassigned to the group.\n      expectContext(sibling1, {\n        parent: group1\n      });\n\n      // sibling2 stays stays unchanged.\n      expectContext(sibling2, {\n        parent\n      });\n    });","file":"unit/core/context/test-node-discover.js","skipped":false,"dir":"test"},{"name":"should discover a new child","suites":["discover groups"],"updatePoint":{"line":1041,"column":35,"index":30489},"line":1041,"code":"    it('should discover a new child', async () => {\n      const sibling3 = el('T-1-1-3');\n      const group1 = ContextNode.get(parent).addGroup('group1', node => node == sibling3, 0);\n      await waitForDiscover(group1);\n\n      // Discover the new node.\n      await rediscover(sibling3);\n      expectContext(sibling3, {\n        parent: group1\n      });\n    });","file":"unit/core/context/test-node-discover.js","skipped":false,"dir":"test"},{"name":"should handle weight","suites":["discover groups"],"updatePoint":{"line":1052,"column":28,"index":30843},"line":1052,"code":"    it('should handle weight', async () => {\n      const group1 = ContextNode.get(parent).addGroup('group1', node => node == sibling1, 0);\n      await waitForDiscover(group1, sibling1);\n      expectContext(sibling1, {\n        parent: group1\n      });\n\n      // A lower weight.\n      const group2 = ContextNode.get(parent).addGroup('group1', node => node == sibling1, -1);\n      await waitForDiscover(group2, sibling1);\n      expectContext(sibling1, {\n        parent: group1\n      });\n\n      // A higher weight.\n      const group3 = ContextNode.get(parent).addGroup('group1', node => node == sibling1, 1);\n      await waitForDiscover(group3, sibling1);\n      expectContext(sibling1, {\n        parent: group3\n      });\n    });","file":"unit/core/context/test-node-discover.js","skipped":false,"dir":"test"},{"name":"should find closest","suites":["scanners"],"updatePoint":{"line":1089,"column":27,"index":32081},"line":1089,"code":"    it('should find closest', () => {\n      const any = () => true;\n      expect(findParent(sibling1, any)).to.equal(sibling1);\n      expect(findParent(sibling1, any, null, EXCLUDE_SELF)).to.equal(parent);\n      const eq = (cn, arg) => cn === arg;\n      expect(findParent(sibling1, eq, sibling1)).to.equal(sibling1);\n      expect(findParent(sibling1, eq, sibling1, EXCLUDE_SELF)).to.be.null;\n      expect(findParent(sibling1, eq, parent)).to.equal(parent);\n    });","file":"unit/core/context/test-node-discover.js","skipped":false,"dir":"test"},{"name":"should scan the subtree completely","suites":["scanners"],"updatePoint":{"line":1098,"column":42,"index":32561},"line":1098,"code":"    it('should scan the subtree completely', () => {\n      const scanned = [];\n      const scan = (cn, exclude) => {\n        scanned.push(cn);\n        if (exclude && exclude.indexOf(cn) != -1) {\n          return false;\n        }\n        return true;\n      };\n\n      // Scan all.\n      scanned.length = 0;\n      deepScan(grandparent, scan);\n      expect(scanned).to.deep.equal([grandparent, parent, sibling1, sibling2, cousin1]);\n\n      // Scan subtree.\n      scanned.length = 0;\n      deepScan(grandparent, scan, null, true, EXCLUDE_SELF);\n      expect(scanned).to.deep.equal([parent, sibling1, sibling2, cousin1]);\n\n      // Scan some.\n      scanned.length = 0;\n      deepScan(grandparent, scan, [parent]);\n      expect(scanned).to.deep.equal([grandparent, parent, cousin1]);\n    });","file":"unit/core/context/test-node-discover.js","skipped":false,"dir":"test"},{"name":"should subscribe with a single dep","suites":["connected","subscriber"],"updatePoint":{"line":121,"column":44,"index":3819},"line":121,"code":"      it('should subscribe with a single dep', () => {\n        subscribe(parent.node, NonRecursive, subscriber);\n        clock.runAll();\n        expect(spy).to.not.be.called;\n        expect(cleanupSpy).to.not.be.called;\n        parent.values.set(NonRecursive, 'OWNER1', 'NR');\n        clock.runAll();\n        expect(spy).to.be.calledOnce.calledWith('NR');\n        expect(cleanupSpy).to.not.be.called;\n\n        // Repeat: no changes.\n        parent.values.set(NonRecursive, 'OWNER1', 'NR');\n        clock.runAll();\n        expect(spy).to.be.calledOnce.calledWith('NR');\n        expect(cleanupSpy).to.not.be.called;\n\n        // Change value.\n        parent.values.set(NonRecursive, 'OWNER1', 'NR2');\n        clock.runAll();\n        expect(spy).to.be.calledTwice.calledWith('NR2');\n        expect(cleanupSpy).to.be.calledOnce;\n\n        // Remove value.\n        parent.values.remove(NonRecursive, 'OWNER1');\n        clock.runAll();\n        expect(spy).to.be.calledTwice; // no change.\n        expect(cleanupSpy).to.be.calledTwice;\n      });","file":"unit/core/context/test-node-subscribers.js","skipped":false,"dir":"test"},{"name":"should subscribe with multiple deps","suites":["connected","subscriber"],"updatePoint":{"line":149,"column":45,"index":4857},"line":149,"code":"      it('should subscribe with multiple deps', () => {\n        subscribe(parent.node, [NonRecursive, Concat], subscriber);\n        clock.runAll();\n        expect(spy).to.not.be.called;\n        expect(cleanupSpy).to.not.be.called;\n        grandparent.values.set(Concat, 'OWNER1', 'A');\n        clock.runAll();\n        expect(spy).to.not.be.called;\n        expect(cleanupSpy).to.not.be.called;\n        parent.values.set(NonRecursive, 'OWNER1', 'NR');\n        clock.runAll();\n        expect(spy).to.be.calledOnce.calledWith('NR', 'A');\n        expect(cleanupSpy).to.not.be.called;\n\n        // Change value.\n        parent.values.set(Concat, 'OWNER1', 'B');\n        clock.runAll();\n        expect(spy).to.be.calledTwice.calledWith('NR', 'AB');\n        expect(cleanupSpy).to.be.calledOnce;\n\n        // Remove value.\n        parent.values.remove(NonRecursive, 'OWNER1');\n        clock.runAll();\n        expect(spy).to.be.calledTwice; // no change.\n        expect(cleanupSpy).to.be.calledTwice;\n      });","file":"unit/core/context/test-node-subscribers.js","skipped":false,"dir":"test"},{"name":"should unsubscribe","suites":["connected","subscriber"],"updatePoint":{"line":175,"column":28,"index":5839},"line":175,"code":"      it('should unsubscribe', () => {\n        subscribe(parent.node, [NonRecursive], subscriber);\n        parent.values.set(NonRecursive, 'OWNER1', 'NR');\n        clock.runAll();\n        expect(spy).to.be.calledOnce;\n        expect(cleanupSpy).to.not.be.called;\n        unsubscribe(parent.node, subscriber);\n        clock.runAll();\n        expect(spy).to.be.calledOnce; // no change.\n        expect(cleanupSpy).to.be.calledOnce;\n\n        // Change value.\n        parent.values.set(NonRecursive, 'OWNER1', 'NR2');\n        clock.runAll();\n        expect(spy).to.be.calledOnce; // no change.\n        expect(cleanupSpy).to.be.calledOnce; // no change.\n      });","file":"unit/core/context/test-node-subscribers.js","skipped":false,"dir":"test"},{"name":"should reconnect the subscriber when the node is reconnected","suites":["connected","subscriber"],"updatePoint":{"line":193,"column":70,"index":6541},"line":193,"code":"      it('should reconnect the subscriber when the node is reconnected', async () => {\n        subscribe(parent.node, [NonRecursive], subscriber);\n        parent.values.set(NonRecursive, 'OWNER1', 'NR');\n        clock.runAll();\n        expect(spy).to.be.calledOnce;\n        expect(cleanupSpy).to.not.be.called;\n        parent.node.remove();\n        await rediscover(parent);\n        clock.runAll();\n        expect(spy).to.be.calledOnce; // no change.\n        expect(cleanupSpy).to.be.calledOnce;\n        grandparent.node.appendChild(parent.node);\n        await rediscover(parent);\n        clock.runAll();\n        expect(spy).to.be.calledTwice;\n        expect(cleanupSpy).to.be.calledOnce; // no change.\n      });","file":"unit/core/context/test-node-subscribers.js","skipped":false,"dir":"test"},{"name":"should resolve with an existing value immediately","suites":["connected, non-recursive"],"updatePoint":{"line":138,"column":57,"index":4861},"line":138,"code":"    it('should resolve with an existing value immediately', async () => {\n      grandparent.values.set(NonRecursive, 'OWNER1', 'A');\n      clock.runAll();\n      const spy = sandbox.stub();\n      grandparent.values.subscribe(NonRecursive, spy);\n      clock.runAll();\n      expect(spy).to.be.calledOnce.calledWith('A');\n      expect(calcSpy).to.have.callCount(1);\n    });","file":"unit/core/context/test-node-values.js","skipped":false,"dir":"test"},{"name":"should read a non-recursive value on the node","suites":["connected, non-recursive"],"updatePoint":{"line":147,"column":53,"index":5227},"line":147,"code":"    it('should read a non-recursive value on the node', async () => {\n      grandparent.values.set(NonRecursive, 'OWNER1', 'A');\n      clock.runAll();\n      expect(grandparentStub).to.be.calledOnce.calledWith('A');\n      expect(parentStub).to.not.be.called;\n      expect(sibling1Stub).to.not.be.called;\n      expect(sibling2Stub).to.not.be.called;\n      expect(cousin1Stub).to.not.be.called;\n      expect(calcSpy).to.have.callCount(1);\n      calcSpy.resetHistory();\n      grandparent.values.set(NonRecursive, 'OWNER1', 'Z');\n      clock.runAll();\n      expect(grandparentStub).to.be.calledTwice.calledWith('Z');\n      expect(parentStub).to.not.be.called;\n      expect(sibling1Stub).to.not.be.called;\n      expect(sibling2Stub).to.not.be.called;\n      expect(cousin1Stub).to.not.be.called;\n      expect(calcSpy).to.have.callCount(1);\n    });","file":"unit/core/context/test-node-values.js","skipped":false,"dir":"test"},{"name":"should not update the same value twice","suites":["connected, non-recursive"],"updatePoint":{"line":166,"column":46,"index":6061},"line":166,"code":"    it('should not update the same value twice', async () => {\n      grandparent.values.set(NonRecursive, 'OWNER1', 'A');\n      clock.runAll();\n      expect(grandparentStub).to.be.calledOnce.calledWith('A');\n      expect(calcSpy).to.have.callCount(1);\n      grandparent.values.set(NonRecursive, 'OWNER1', 'A');\n      clock.runAll();\n      expect(grandparentStub).to.be.calledOnce; // no change.\n      expect(calcSpy).to.have.callCount(1); // no change.\n    });","file":"unit/core/context/test-node-values.js","skipped":false,"dir":"test"},{"name":"should read a recursive value on the node","suites":["connected, recursive"],"updatePoint":{"line":205,"column":49,"index":7651},"line":205,"code":"    it('should read a recursive value on the node', async () => {\n      grandparent.values.set(Recursive, 'OWNER1', 'A');\n      clock.runAll();\n      expect(grandparentStub).to.be.calledOnce.calledWith('A');\n      expect(parentStub).to.be.calledOnce.calledWith('A');\n      expect(sibling1Stub).to.be.calledOnce.calledWith('A');\n      expect(sibling2Stub).to.be.calledOnce.calledWith('A');\n      expect(cousin1Stub).to.be.calledOnce.calledWith('A');\n      expect(calcSpy).to.have.callCount(5);\n      calcSpy.resetHistory();\n      grandparent.values.set(Recursive, 'OWNER1', 'B');\n      clock.runAll();\n      expect(grandparentStub).to.be.calledTwice.calledWith('B');\n      expect(parentStub).to.be.calledTwice.calledWith('B');\n      expect(sibling1Stub).to.be.calledTwice.calledWith('B');\n      expect(sibling2Stub).to.be.calledTwice.calledWith('B');\n      expect(cousin1Stub).to.be.calledTwice.calledWith('B');\n      expect(calcSpy).to.have.callCount(5);\n    });","file":"unit/core/context/test-node-values.js","skipped":false,"dir":"test"},{"name":"should override a recursive value on the node","suites":["connected, recursive"],"updatePoint":{"line":224,"column":53,"index":8618},"line":224,"code":"    it('should override a recursive value on the node', async () => {\n      grandparent.values.set(Recursive, 'OWNER1', 'A');\n      clock.runAll();\n      expect(grandparentStub).to.be.calledOnce.calledWith('A');\n      expect(parentStub).to.be.calledOnce.calledWith('A');\n      expect(sibling1Stub).to.be.calledOnce.calledWith('A');\n      expect(sibling2Stub).to.be.calledOnce.calledWith('A');\n      expect(cousin1Stub).to.be.calledOnce.calledWith('A');\n      expect(calcSpy).to.have.callCount(5);\n      calcSpy.resetHistory();\n      parent.values.set(Recursive, 'OWNER1', 'B');\n      clock.runAll();\n      expect(parentStub).to.be.calledTwice.calledWith('B');\n      expect(sibling1Stub).to.be.calledTwice.calledWith('B');\n      expect(sibling2Stub).to.be.calledTwice.calledWith('B');\n      expect(grandparentStub).to.be.calledOnce; // no change.\n      expect(cousin1Stub).to.be.calledOnce; // no change.\n      expect(calcSpy).to.have.callCount(3);\n    });","file":"unit/core/context/test-node-values.js","skipped":false,"dir":"test"},{"name":"should stop recompute a value when a node is removed","suites":["connected, recursive"],"updatePoint":{"line":243,"column":60,"index":9581},"line":243,"code":"    it('should stop recompute a value when a node is removed', async () => {\n      grandparent.values.set(Recursive, 'OWNER1', 'A');\n      parent.values.set(Recursive, 'OWNER1', 'B');\n      clock.runAll();\n      expect(grandparentStub).to.be.calledOnce.calledWith('A');\n      expect(parentStub).to.be.calledOnce.calledWith('B');\n      expect(sibling1Stub).to.be.calledOnce.calledWith('B');\n      expect(sibling2Stub).to.be.calledOnce.calledWith('B');\n      expect(cousin1Stub).to.be.calledOnce.calledWith('A');\n      expect(calcSpy).to.have.callCount(5);\n      calcSpy.resetHistory();\n      parent.node.remove();\n      await rediscover(parent);\n      clock.runAll();\n      expect(calcSpy).to.have.callCount(0);\n    });","file":"unit/core/context/test-node-values.js","skipped":false,"dir":"test"},{"name":"should recompute a value when a node is reparented","suites":["connected, recursive"],"updatePoint":{"line":259,"column":58,"index":10298},"line":259,"code":"    it('should recompute a value when a node is reparented', async () => {\n      grandparent.values.set(Recursive, 'OWNER1', 'A');\n      parent.values.set(Recursive, 'OWNER1', 'B');\n      clock.runAll();\n      expect(grandparentStub).to.be.calledOnce.calledWith('A');\n      expect(parentStub).to.be.calledOnce.calledWith('B');\n      expect(sibling1Stub).to.be.calledOnce.calledWith('B');\n      expect(sibling2Stub).to.be.calledOnce.calledWith('B');\n      expect(cousin1Stub).to.be.calledOnce.calledWith('A');\n      expect(calcSpy).to.have.callCount(5);\n      calcSpy.resetHistory();\n      grandparent.node.appendChild(sibling1.node);\n      await rediscover(sibling1);\n      clock.runAll();\n      expect(sibling1Stub).to.be.calledTwice.calledWith('A');\n      expect(grandparentStub).to.be.calledOnce; // no changes.\n      expect(parentStub).to.be.calledOnce; // no changes.\n      expect(sibling2Stub).to.be.calledOnce; // no changes.\n      expect(cousin1Stub).to.be.calledOnce; // no changes.\n      expect(calcSpy).to.have.callCount(1);\n    });","file":"unit/core/context/test-node-values.js","skipped":false,"dir":"test"},{"name":"should override a computed value on the node","suites":["connected, computable recursive"],"updatePoint":{"line":313,"column":52,"index":12632},"line":313,"code":"    it('should override a computed value on the node', async () => {\n      grandparent.values.set(Concat, 'OWNER1', 'A');\n      clock.runAll();\n      expect(grandparentStub).to.be.calledOnce.calledWith('A');\n      expect(parentStub).to.be.calledOnce.calledWith('A');\n      expect(sibling1Stub).to.be.calledOnce.calledWith('A');\n      expect(sibling2Stub).to.be.calledOnce.calledWith('A');\n      expect(cousin1Stub).to.be.calledOnce.calledWith('A');\n      expect(calcSpy).to.have.callCount(5);\n      calcSpy.resetHistory();\n      parent.values.set(Concat, 'OWNER1', 'B');\n      clock.runAll();\n      expect(parentStub).to.be.calledTwice.calledWith('AB');\n      expect(sibling1Stub).to.be.calledTwice.calledWith('AB');\n      expect(sibling2Stub).to.be.calledTwice.calledWith('AB');\n      expect(grandparentStub).to.be.calledOnce; // no change.\n      expect(cousin1Stub).to.be.calledOnce; // no change.\n      expect(calcSpy).to.have.callCount(3);\n      calcSpy.resetHistory();\n      sibling1.values.set(Concat, 'OWNER1', 'C');\n      clock.runAll();\n      expect(sibling1Stub).to.be.calledThrice.calledWith('ABC');\n      expect(grandparentStub).to.be.calledOnce; // no change.\n      expect(parentStub).to.be.calledTwice; // no change.\n      expect(sibling2Stub).to.be.calledTwice; // no change.\n      expect(cousin1Stub).to.be.calledOnce; // no change.\n      expect(calcSpy).to.have.callCount(1);\n    });","file":"unit/core/context/test-node-values.js","skipped":false,"dir":"test"},{"name":"should override a computed value in reverse","suites":["connected, computable recursive"],"updatePoint":{"line":341,"column":51,"index":14032},"line":341,"code":"    it('should override a computed value in reverse', async () => {\n      sibling1.values.set(Concat, 'OWNER1', 'C');\n      clock.runAll();\n      expect(sibling1Stub).to.be.calledOnce.calledWith('C');\n      expect(grandparentStub).to.not.be.called;\n      expect(parentStub).to.be.not.called;\n      expect(sibling2Stub).to.not.be.called;\n      expect(cousin1Stub).to.not.be.called;\n      expect(calcSpy).to.have.callCount(1);\n      calcSpy.resetHistory();\n      parent.values.set(Concat, 'OWNER1', 'B');\n      clock.runAll();\n      expect(sibling1Stub).to.be.calledTwice.calledWith('BC');\n      expect(parentStub).to.be.calledOnce.calledWith('B');\n      expect(sibling2Stub).to.be.calledOnce.calledWith('B');\n      expect(grandparentStub).to.not.be.called;\n      expect(cousin1Stub).to.be.not.called;\n      expect(calcSpy).to.have.callCount(3);\n      calcSpy.resetHistory();\n      grandparent.values.set(Concat, 'OWNER1', 'A');\n      clock.runAll();\n      expect(sibling1Stub).to.be.calledThrice.calledWith('ABC');\n      expect(parentStub).to.be.calledTwice.calledWith('AB');\n      expect(grandparentStub).to.be.calledOnce.calledWith('A');\n      expect(sibling2Stub).to.be.calledTwice.calledWith('AB');\n      expect(cousin1Stub).to.be.calledOnce.calledWith('A');\n      expect(calcSpy).to.have.callCount(5);\n    });","file":"unit/core/context/test-node-values.js","skipped":false,"dir":"test"},{"name":"should override a computed value in between","suites":["connected, computable recursive"],"updatePoint":{"line":369,"column":51,"index":15346},"line":369,"code":"    it('should override a computed value in between', async () => {\n      sibling1.values.set(Concat, 'OWNER1', 'C');\n      clock.runAll();\n      expect(sibling1Stub).to.be.calledOnce.calledWith('C');\n      expect(grandparentStub).to.not.be.called;\n      expect(parentStub).to.be.not.called;\n      expect(sibling2Stub).to.not.be.called;\n      expect(cousin1Stub).to.not.be.called;\n      expect(calcSpy).to.have.callCount(1);\n      calcSpy.resetHistory();\n      grandparent.values.set(Concat, 'OWNER1', 'A');\n      clock.runAll();\n      expect(sibling1Stub).to.be.calledTwice.calledWith('AC');\n      expect(grandparentStub).to.be.calledOnce.calledWith('A');\n      expect(parentStub).to.be.calledOnce.calledWith('A');\n      expect(sibling2Stub).to.be.calledOnce.calledWith('A');\n      expect(cousin1Stub).to.be.calledOnce.calledWith('A');\n      expect(calcSpy).to.have.callCount(5);\n      calcSpy.resetHistory();\n      parent.values.set(Concat, 'OWNER1', 'B');\n      clock.runAll();\n      expect(sibling1Stub).to.be.calledThrice.calledWith('ABC');\n      expect(parentStub).to.be.calledTwice.calledWith('AB');\n      expect(sibling2Stub).to.be.calledTwice.calledWith('AB');\n      expect(grandparentStub).to.be.calledOnce; // no change.\n      expect(cousin1Stub).to.be.calledOnce; // no change.\n      expect(calcSpy).to.have.callCount(3);\n    });","file":"unit/core/context/test-node-values.js","skipped":false,"dir":"test"},{"name":"should recompute the value on new input","suites":["connected, computable recursive"],"updatePoint":{"line":397,"column":47,"index":16684},"line":397,"code":"    it('should recompute the value on new input', async () => {\n      grandparent.values.set(Concat, 'OWNER1', 'A');\n      parent.values.set(Concat, 'OWNER1', 'B');\n      sibling1.values.set(Concat, 'OWNER1', 'C');\n      clock.runAll();\n      expect(grandparentStub).to.be.calledOnce.calledWith('A');\n      expect(parentStub).to.be.calledOnce.calledWith('AB');\n      expect(sibling1Stub).to.be.calledOnce.calledWith('ABC');\n      expect(sibling2Stub).to.be.calledOnce.calledWith('AB');\n      expect(cousin1Stub).to.be.calledOnce.calledWith('A');\n      expect(calcSpy).to.have.callCount(5);\n      calcSpy.resetHistory();\n      grandparent.values.set(Concat, 'OWNER1', 'Z');\n      clock.runAll();\n      expect(grandparentStub).to.be.calledTwice.calledWith('Z');\n      expect(parentStub).to.be.calledTwice.calledWith('ZB');\n      expect(sibling1Stub).to.be.calledTwice.calledWith('ZBC');\n      expect(sibling2Stub).to.be.calledTwice.calledWith('ZB');\n      expect(cousin1Stub).to.be.calledTwice.calledWith('Z');\n      expect(calcSpy).to.have.callCount(5);\n    });","file":"unit/core/context/test-node-values.js","skipped":false,"dir":"test"},{"name":"should recompute value when input is removed","suites":["connected, computable recursive"],"updatePoint":{"line":418,"column":52,"index":17750},"line":418,"code":"    it('should recompute value when input is removed', async () => {\n      grandparent.values.set(Concat, 'OWNER1', 'A');\n      parent.values.set(Concat, 'OWNER1', 'B');\n      parent.values.set(Concat, 'OWNER2', 'Y');\n      sibling1.values.set(Concat, 'OWNER1', 'C');\n      clock.runAll();\n      expect(grandparentStub).to.be.calledOnce.calledWith('A');\n      expect(parentStub).to.be.calledOnce.calledWith('A(B|Y)');\n      expect(sibling1Stub).to.be.calledOnce.calledWith('A(B|Y)C');\n      expect(sibling2Stub).to.be.calledOnce.calledWith('A(B|Y)');\n      expect(cousin1Stub).to.be.calledOnce.calledWith('A');\n      expect(calcSpy).to.have.callCount(5);\n      calcSpy.resetHistory();\n      parent.values.remove(Concat, 'OWNER2');\n      clock.runAll();\n      expect(parentStub).to.be.calledTwice.calledWith('AB');\n      expect(sibling1Stub).to.be.calledTwice.calledWith('ABC');\n      expect(sibling2Stub).to.be.calledTwice.calledWith('AB');\n      expect(grandparentStub).to.be.calledOnce;\n      expect(cousin1Stub).to.be.calledOnce;\n      expect(calcSpy).to.have.callCount(3);\n      calcSpy.resetHistory();\n      parent.values.remove(Concat, 'OWNER1');\n      clock.runAll();\n      expect(parentStub).to.be.calledThrice.calledWith('A');\n      expect(sibling1Stub).to.be.calledThrice.calledWith('AC');\n      expect(sibling2Stub).to.be.calledThrice.calledWith('A');\n      expect(grandparentStub).to.be.calledOnce; // no change.\n      expect(cousin1Stub).to.be.calledOnce; // no change.\n      expect(calcSpy).to.have.callCount(3);\n    });","file":"unit/core/context/test-node-values.js","skipped":false,"dir":"test"},{"name":"should recompute the value on parent change","suites":["connected, computable recursive"],"updatePoint":{"line":449,"column":51,"index":19284},"line":449,"code":"    it('should recompute the value on parent change', async () => {\n      grandparent.values.set(Concat, 'OWNER1', 'A');\n      parent.values.set(Concat, 'OWNER1', 'B');\n      sibling1.values.set(Concat, 'OWNER1', 'C');\n      clock.runAll();\n      expect(grandparentStub).to.be.calledOnce.calledWith('A');\n      expect(parentStub).to.be.calledOnce.calledWith('AB');\n      expect(sibling1Stub).to.be.calledOnce.calledWith('ABC');\n      expect(sibling2Stub).to.be.calledOnce.calledWith('AB');\n      expect(cousin1Stub).to.be.calledOnce.calledWith('A');\n      expect(calcSpy).to.have.callCount(5);\n      calcSpy.resetHistory();\n      tree.appendChild(parent.node);\n      rediscover(parent);\n      clock.runAll();\n      expect(parentStub).to.be.calledTwice.calledWith('B');\n      expect(sibling1Stub).to.be.calledTwice.calledWith('BC');\n      expect(sibling2Stub).to.be.calledTwice.calledWith('B');\n      expect(grandparentStub).to.be.calledOnce; // no change.\n      expect(cousin1Stub).to.be.calledOnce; // no change.\n      expect(calcSpy).to.have.callCount(3);\n    });","file":"unit/core/context/test-node-values.js","skipped":false,"dir":"test"},{"name":"should stop/resume when disconnected/reconnected","suites":["connected, computable recursive"],"updatePoint":{"line":471,"column":56,"index":20355},"line":471,"code":"    it('should stop/resume when disconnected/reconnected', async () => {\n      grandparent.values.set(Concat, 'OWNER1', 'A');\n      parent.values.set(Concat, 'OWNER1', 'B');\n      sibling1.values.set(Concat, 'OWNER1', 'C');\n      clock.runAll();\n      expect(grandparentStub).to.be.calledOnce.calledWith('A');\n      expect(parentStub).to.be.calledOnce.calledWith('AB');\n      expect(sibling1Stub).to.be.calledOnce.calledWith('ABC');\n      expect(sibling2Stub).to.be.calledOnce.calledWith('AB');\n      expect(cousin1Stub).to.be.calledOnce.calledWith('A');\n      expect(calcSpy).to.have.callCount(5);\n      calcSpy.resetHistory();\n      parent.node.remove();\n      await rediscover(parent);\n      clock.runAll();\n      expect(calcSpy).to.have.callCount(0);\n      calcSpy.resetHistory();\n      grandparent.values.set(Concat, 'OWNER1', 'Z');\n      parent.values.set(Concat, 'OWNER1', 'Y');\n      clock.runAll();\n      expect(grandparentStub).to.be.calledTwice.calledWith('Z');\n      expect(cousin1Stub).to.be.calledTwice.calledWith('Z');\n      expect(parentStub).to.be.calledOnce; // no change.\n      expect(sibling1Stub).to.be.calledOnce; // no change.\n      expect(sibling2Stub).to.be.calledOnce; // no change.\n      expect(calcSpy).to.have.callCount(2);\n      calcSpy.resetHistory();\n      grandparent.node.appendChild(parent.node);\n      await rediscover(parent);\n      clock.runAll();\n      expect(parentStub).to.be.calledTwice.calledWith('ZY');\n      expect(sibling1Stub).to.be.calledTwice.calledWith('ZYC');\n      expect(sibling2Stub).to.be.calledTwice.calledWith('ZY');\n      expect(grandparentStub).to.be.calledTwice; // no change.\n      expect(cousin1Stub).to.be.calledTwice; // no change.\n      expect(calcSpy).to.have.callCount(3);\n    });","file":"unit/core/context/test-node-values.js","skipped":false,"dir":"test"},{"name":"should recompute when reparented","suites":["connected, computable recursive"],"updatePoint":{"line":508,"column":40,"index":22087},"line":508,"code":"    it('should recompute when reparented', async () => {\n      grandparent.values.set(Concat, 'OWNER1', 'A');\n      parent.values.set(Concat, 'OWNER1', 'B');\n      sibling1.values.set(Concat, 'OWNER1', 'C');\n      clock.runAll();\n      expect(grandparentStub).to.be.calledOnce.calledWith('A');\n      expect(parentStub).to.be.calledOnce.calledWith('AB');\n      expect(sibling1Stub).to.be.calledOnce.calledWith('ABC');\n      expect(sibling2Stub).to.be.calledOnce.calledWith('AB');\n      expect(cousin1Stub).to.be.calledOnce.calledWith('A');\n      expect(calcSpy).to.have.callCount(5);\n      calcSpy.resetHistory();\n      grandparent.node.appendChild(sibling1.node);\n      await rediscover(sibling1);\n      clock.runAll();\n      expect(sibling1Stub).to.be.calledTwice.calledWith('AC');\n      expect(grandparentStub).to.be.calledOnce; // no change.\n      expect(cousin1Stub).to.be.calledOnce; // no change.\n      expect(parentStub).to.be.calledOnce; // no change.\n      expect(sibling2Stub).to.be.calledOnce; // no change.\n      expect(calcSpy).to.have.callCount(1);\n    });","file":"unit/core/context/test-node-values.js","skipped":false,"dir":"test"},{"name":"should accept multiple inputs","suites":["connected, computable recursive"],"updatePoint":{"line":530,"column":37,"index":23155},"line":530,"code":"    it('should accept multiple inputs', async () => {\n      grandparent.values.set(Concat, 'OWNER1', 'A');\n      sibling1.values.set(Concat, 'OWNER1', 'C');\n      clock.runAll();\n      expect(grandparentStub).to.be.calledOnce.calledWith('A');\n      expect(parentStub).to.be.calledOnce.calledWith('A');\n      expect(sibling1Stub).to.be.calledOnce.calledWith('AC');\n      expect(sibling2Stub).to.be.calledOnce.calledWith('A');\n      expect(cousin1Stub).to.be.calledOnce.calledWith('A');\n      expect(calcSpy).to.have.callCount(5);\n      calcSpy.resetHistory();\n      grandparent.values.set(Concat, 'OWNER2', 'Z');\n      clock.runAll();\n      expect(grandparentStub).to.be.calledTwice.calledWith('(A|Z)');\n      expect(parentStub).to.be.calledTwice.calledWith('(A|Z)');\n      expect(sibling1Stub).to.be.calledTwice.calledWith('(A|Z)C');\n      expect(sibling2Stub).to.be.calledTwice.calledWith('(A|Z)');\n      expect(cousin1Stub).to.be.calledTwice.calledWith('(A|Z)');\n      expect(calcSpy).to.have.callCount(5);\n    });","file":"unit/core/context/test-node-values.js","skipped":false,"dir":"test"},{"name":"should compute with all dependencies only","suites":["connected, with deps"],"updatePoint":{"line":578,"column":49,"index":25304},"line":578,"code":"    it('should compute with all dependencies only', () => {\n      expect(grandparentStub).to.not.be.called;\n      expect(parentStub).to.not.be.called;\n      expect(sibling1Stub).to.not.be.called;\n      expect(sibling2Stub).to.not.be.called;\n      expect(cousin1Stub).to.not.be.called;\n\n      // Add a computed recursive dependency.\n      grandparent.values.set(Concat, 'OWNER1', 'A');\n      clock.runAll();\n      expect(grandparentStub).to.not.be.called;\n      expect(parentStub).to.not.be.called;\n      expect(sibling1Stub).to.not.be.called;\n      expect(sibling2Stub).to.not.be.called;\n      expect(cousin1Stub).to.not.be.called;\n\n      // Add a recursive dependency.\n      grandparent.values.set(Recursive, 'OWNER1', 'recursive');\n      clock.runAll();\n      expect(grandparentStub).to.not.be.called;\n      expect(parentStub).to.not.be.called;\n      expect(sibling1Stub).to.not.be.called;\n      expect(sibling2Stub).to.not.be.called;\n      expect(cousin1Stub).to.not.be.called;\n\n      // Add a non-recursive dependency.\n      calcSpy.resetHistory();\n      parent.values.set(NonRecursive, 'OWNER1', 'non-recursive');\n      clock.runAll();\n      expect(parentStub).to.be.calledOnce.calledWith('no-input/non-recursive/recursive/A');\n      expect(grandparentStub).to.not.be.called;\n      expect(sibling1Stub).to.not.be.called;\n      expect(sibling2Stub).to.not.be.called;\n      expect(cousin1Stub).to.not.be.called;\n      // One computation for `NonRecursive` and one for `Computed`.\n      expect(calcSpy).to.have.callCount(2);\n\n      // Set input.\n      calcSpy.resetHistory();\n      parent.values.set(Computed, 'OWNER1', 'computed');\n      clock.runAll();\n      expect(parentStub).to.be.calledTwice.calledWith('computed/non-recursive/recursive/A');\n      expect(grandparentStub).to.not.be.called;\n      expect(sibling1Stub).to.not.be.called;\n      expect(sibling2Stub).to.not.be.called;\n      expect(cousin1Stub).to.not.be.called;\n      expect(calcSpy).to.have.callCount(1);\n    });","file":"unit/core/context/test-node-values.js","skipped":false,"dir":"test"},{"name":"should recompute on a recursive changes","suites":["connected, with deps"],"updatePoint":{"line":626,"column":47,"index":27286},"line":626,"code":"    it('should recompute on a recursive changes', () => {\n      grandparent.values.set(Concat, 'OWNER1', 'A');\n      grandparent.values.set(Recursive, 'OWNER1', 'recursive');\n      parent.values.set(NonRecursive, 'OWNER1', 'non-recursive1');\n      sibling1.values.set(NonRecursive, 'OWNER1', 'non-recursive2');\n      clock.runAll();\n      expect(parentStub).to.be.calledOnce.calledWith('no-input/non-recursive1/recursive/A');\n      expect(sibling1Stub).to.be.calledOnce.calledWith('no-input/non-recursive2/recursive/A');\n      expect(grandparentStub).to.not.be.called;\n      expect(sibling2Stub).to.not.be.called;\n      expect(cousin1Stub).to.not.be.called;\n      calcSpy.resetHistory();\n      grandparent.values.set(Concat, 'OWNER1', 'Z');\n      clock.runAll();\n      expect(parentStub).to.be.calledTwice.calledWith('no-input/non-recursive1/recursive/Z');\n      expect(sibling1Stub).to.be.calledTwice.calledWith('no-input/non-recursive2/recursive/Z');\n      expect(grandparentStub).to.not.be.called;\n      expect(sibling2Stub).to.not.be.called;\n      expect(cousin1Stub).to.not.be.called;\n      // 5x `Concat` + 5x `Computed`\n      expect(calcSpy).to.have.callCount(10);\n    });","file":"unit/core/context/test-node-values.js","skipped":false,"dir":"test"},{"name":"should recompute on a non-recursive changes","suites":["connected, with deps"],"updatePoint":{"line":648,"column":51,"index":28470},"line":648,"code":"    it('should recompute on a non-recursive changes', () => {\n      grandparent.values.set(Concat, 'OWNER1', 'A');\n      grandparent.values.set(Recursive, 'OWNER1', 'recursive');\n      parent.values.set(NonRecursive, 'OWNER1', 'non-recursive1');\n      sibling1.values.set(NonRecursive, 'OWNER1', 'non-recursive2');\n      clock.runAll();\n      expect(parentStub).to.be.calledOnce.calledWith('no-input/non-recursive1/recursive/A');\n      expect(sibling1Stub).to.be.calledOnce.calledWith('no-input/non-recursive2/recursive/A');\n      expect(grandparentStub).to.not.be.called;\n      expect(sibling2Stub).to.not.be.called;\n      expect(cousin1Stub).to.not.be.called;\n      calcSpy.resetHistory();\n      parent.values.set(NonRecursive, 'OWNER1', 'non-recursiveZ');\n      clock.runAll();\n      expect(parentStub).to.be.calledTwice.calledWith('no-input/non-recursiveZ/recursive/A');\n      expect(sibling1Stub).to.be.calledOnce; // no change.\n      expect(grandparentStub).to.not.be.called;\n      expect(sibling2Stub).to.not.be.called;\n      expect(cousin1Stub).to.not.be.called;\n      // 1x `NonRecursive` + 1x `Computed`\n      expect(calcSpy).to.have.callCount(2);\n    });","file":"unit/core/context/test-node-values.js","skipped":false,"dir":"test"},{"name":"should compute without input","suites":["connected, recursive, with deps"],"updatePoint":{"line":698,"column":36,"index":30837},"line":698,"code":"    it('should compute without input', () => {\n      expect(grandparentStub).to.not.be.called;\n      expect(parentStub).to.not.be.called;\n      expect(sibling1Stub).to.not.be.called;\n      expect(sibling2Stub).to.not.be.called;\n      expect(cousin1Stub).to.not.be.called;\n      grandparent.values.set(Recursive, 'OWNER1', 'A');\n      clock.runAll();\n      expect(sibling1Stub).to.be.calledOnce.calledWith('no-input/DEF/A');\n    });","file":"unit/core/context/test-node-values.js","skipped":false,"dir":"test"},{"name":"should override a computed value on a new node","suites":["connected, discovered later"],"updatePoint":{"line":736,"column":54,"index":32379},"line":736,"code":"    it('should override a computed value on a new node', async () => {\n      grandparent.values.set(Concat, 'OWNER1', 'A');\n      sibling1.values.set(Concat, 'OWNER1', 'C');\n      clock.runAll();\n      expect(grandparentStub).to.be.calledOnce.calledWith('A');\n      expect(sibling1Stub).to.be.calledOnce.calledWith('AC');\n      expect(sibling2Stub).to.be.calledOnce.calledWith('A');\n      expect(cousin1Stub).to.be.calledOnce.calledWith('A');\n      expect(calcSpy).to.have.callCount(4);\n      calcSpy.resetHistory();\n      const parent = ContextNode.get(el('T-1-1'));\n      const parentStub = sandbox.stub();\n      parent.values.subscribe(Concat, parentStub);\n      parent.values.set(Concat, 'OWNER1', 'B');\n      await waitForDiscover(parent);\n      clock.runAll();\n      expect(parentStub).to.be.calledOnce.calledWith('AB');\n      expect(sibling1Stub).to.be.calledTwice.calledWith('ABC');\n      expect(sibling2Stub).to.be.calledTwice.calledWith('AB');\n      expect(grandparentStub).to.be.calledOnce; // no change.\n      expect(cousin1Stub).to.be.calledOnce; // no change.\n      expect(calcSpy).to.have.callCount(3);\n    });","file":"unit/core/context/test-node-values.js","skipped":false,"dir":"test"},{"name":"should compute when connected","suites":["not connected"],"updatePoint":{"line":786,"column":37,"index":34557},"line":786,"code":"    it('should compute when connected', async () => {\n      grandparent.values.set(Concat, 'OWNER1', 'A');\n      parent.values.set(Concat, 'OWNER1', 'B');\n      sibling1.values.set(Concat, 'OWNER1', 'C');\n      clock.runAll();\n      expect(grandparentStub).to.not.be.called;\n      expect(sibling1Stub).to.not.be.called;\n      expect(sibling2Stub).to.not.be.called;\n      expect(cousin1Stub).to.not.be.called;\n      expect(calcSpy).to.not.be.called;\n      calcSpy.resetHistory();\n      doc.body.appendChild(tree);\n      await rediscover(grandparent);\n      clock.runAll();\n      expect(grandparentStub).to.be.calledOnce.calledWith('A');\n      expect(parentStub).to.be.calledOnce.calledWith('AB');\n      expect(sibling1Stub).to.be.calledOnce.calledWith('ABC');\n      expect(sibling2Stub).to.be.calledOnce.calledWith('AB');\n      expect(cousin1Stub).to.be.calledOnce.calledWith('A');\n      expect(calcSpy).to.have.callCount(5);\n    });","file":"unit/core/context/test-node-values.js","skipped":false,"dir":"test"},{"name":"should compute when made a root","suites":["not connected"],"updatePoint":{"line":807,"column":39,"index":35492},"line":807,"code":"    it('should compute when made a root', async () => {\n      grandparent.values.set(Concat, 'OWNER1', 'A');\n      parent.values.set(Concat, 'OWNER1', 'B');\n      sibling1.values.set(Concat, 'OWNER1', 'C');\n      clock.runAll();\n      expect(grandparentStub).to.not.be.called;\n      expect(sibling1Stub).to.not.be.called;\n      expect(sibling2Stub).to.not.be.called;\n      expect(cousin1Stub).to.not.be.called;\n      expect(calcSpy).to.not.be.called;\n      calcSpy.resetHistory();\n      grandparent.setIsRoot(true);\n      clock.runAll();\n      expect(grandparentStub).to.be.calledOnce.calledWith('A');\n      expect(parentStub).to.be.calledOnce.calledWith('AB');\n      expect(sibling1Stub).to.be.calledOnce.calledWith('ABC');\n      expect(sibling2Stub).to.be.calledOnce.calledWith('AB');\n      expect(cousin1Stub).to.be.calledOnce.calledWith('A');\n      expect(calcSpy).to.have.callCount(5);\n    });","file":"unit/core/context/test-node-values.js","skipped":false,"dir":"test"},{"name":"bezierCurve","suites":[],"updatePoint":{"line":3,"column":17,"index":159},"line":3,"code":"  it('bezierCurve', () => {\n    let curve = bezierCurve(0.75, 0, 0.75, 0.9);\n    expect(curve(0.2)).to.be.closeTo(0.024374631, 1e-6);\n    expect(curve(0.6)).to.be.closeTo(0.317459494, 1e-6);\n    expect(curve(0.9)).to.be.closeTo(0.905205002, 1e-6);\n    curve = bezierCurve(0, 0, 0.58, 1);\n    expect(curve(0.2)).to.be.closeTo(0.308366667, 1e-6);\n    expect(curve(0.6)).to.be.closeTo(0.785139061, 1e-6);\n    expect(curve(0.9)).to.be.closeTo(0.982973389, 1e-6);\n  });","file":"unit/core/data-structures/test-curve.js","skipped":false,"dir":"test"},{"name":"getCurve on common curves","suites":[],"updatePoint":{"line":13,"column":31,"index":638},"line":13,"code":"  it('getCurve on common curves', () => {\n    // Null case.\n    expect(getCurve(null)).to.equal(null);\n    expect(getCurve(undefined)).to.equal(null);\n\n    // Function is passed through.\n    const func = () => {};\n    expect(getCurve(func)).to.equal(func);\n\n    // String is translated.\n    expect(getCurve('linear')).to.equal(Curves_Enum.LINEAR);\n    expect(getCurve('ease')).to.equal(Curves_Enum.EASE);\n    expect(getCurve('ease-in')).to.equal(Curves_Enum.EASE_IN);\n    expect(getCurve('ease-out')).to.equal(Curves_Enum.EASE_OUT);\n    expect(getCurve('ease-in-out')).to.equal(Curves_Enum.EASE_IN_OUT);\n  });","file":"unit/core/data-structures/test-curve.js","skipped":false,"dir":"test"},{"name":"getCurve on cubic-bezier curves","suites":[],"updatePoint":{"line":29,"column":37,"index":1254},"line":29,"code":"  it('getCurve on cubic-bezier curves', () => {\n    expect(getCurve('cubic-bezier(1)')).to.equal(null);\n    expect(getCurve('cubic-bezier(a)')).to.equal(null);\n    expect(getCurve('cubic-bezier(0.4, 0, 0.2)')).to.equal(null);\n    expect(getCurve('cubic-bezier(0.4, 0, 0.2, a)')).to.equal(null);\n    const curveExpected = bezierCurve(0.4, 0, 0.2, 1);\n    const curveGet = getCurve('cubic-bezier(0.4, 0, 0.2, 1)');\n    expect(curveExpected(0.2)).to.be.closeTo(curveGet(0.2), 1e-6);\n    expect(curveExpected(0.6)).to.be.closeTo(curveGet(0.6), 1e-6);\n    expect(curveExpected(0.9)).to.be.closeTo(curveGet(0.9), 1e-6);\n  });","file":"unit/core/data-structures/test-curve.js","skipped":false,"dir":"test"},{"name":"should use a real WeakRef if available","suites":[],"updatePoint":{"line":8,"column":44,"index":325},"line":8,"code":"  it('should use a real WeakRef if available', () => {\n    if (!window.WeakRef) {\n      return;\n    }\n    const weakref = DomBasedWeakRef.make(env.win, element);\n    expect(weakref).to.be.instanceof(env.win.WeakRef);\n    expect(weakref.deref()).to.equal(element);\n  });","file":"unit/core/data-structures/test-dom-based-weakref.js","skipped":false,"dir":"test"},{"name":"should use the fallback when WeakRef is NOT available","suites":["fallback"],"updatePoint":{"line":20,"column":61,"index":704},"line":20,"code":"    it('should use the fallback when WeakRef is NOT available', () => {\n      const weakref = DomBasedWeakRef.make(env.win, element);\n      expect(weakref.deref()).to.equal(element);\n    });","file":"unit/core/data-structures/test-dom-based-weakref.js","skipped":false,"dir":"test"},{"name":"it should use the id of the element if available","suites":["fallback"],"updatePoint":{"line":24,"column":56,"index":890},"line":24,"code":"    it('it should use the id of the element if available', () => {\n      element.id = 'some-id';\n      const weakref = DomBasedWeakRef.make(env.win, element);\n      expect(weakref.deref()).to.equal(element);\n      expect(element.id).to.equal('some-id');\n    });","file":"unit/core/data-structures/test-dom-based-weakref.js","skipped":false,"dir":"test"},{"name":"should fail to deref if the element has been removed from the DOM","suites":["fallback"],"updatePoint":{"line":30,"column":73,"index":1169},"line":30,"code":"    it('should fail to deref if the element has been removed from the DOM', () => {\n      const weakref = DomBasedWeakRef.make(env.win, element);\n      env.win.document.body.removeChild(element);\n      expect(weakref.deref()).to.equal(undefined);\n    });","file":"unit/core/data-structures/test-dom-based-weakref.js","skipped":false,"dir":"test"},{"name":"invokes callbacks on transition","suites":[],"updatePoint":{"line":13,"column":37,"index":450},"line":13,"code":"  it('invokes callbacks on transition', () => {\n    fsm.setState('start');\n    expect(spy).to.have.been.called;\n  });","file":"unit/core/data-structures/test-finite-state-machine.js","skipped":false,"dir":"test"},{"name":"ignores other transition callbacks","suites":[],"updatePoint":{"line":17,"column":40,"index":571},"line":17,"code":"  it('ignores other transition callbacks', () => {\n    fsm.setState('other');\n    expect(spy).not.to.have.been.called;\n    expect(other).to.have.been.called;\n  });","file":"unit/core/data-structures/test-finite-state-machine.js","skipped":false,"dir":"test"},{"name":"handles unregistered transitions","suites":[],"updatePoint":{"line":22,"column":38,"index":733},"line":22,"code":"  it('handles unregistered transitions', () => {\n    fsm.setState('unknown');\n    expect(spy).not.to.have.been.called;\n    expect(other).not.to.have.been.called;\n  });","file":"unit/core/data-structures/test-finite-state-machine.js","skipped":false,"dir":"test"},{"name":"should create a prototype-less object for caching","suites":[],"updatePoint":{"line":10,"column":55,"index":310},"line":10,"code":"  it('should create a prototype-less object for caching', () => {\n    expect(cache.get('constructor')).to.be.undefined;\n  });","file":"unit/core/data-structures/test-lru-cache.js","skipped":false,"dir":"test"},{"name":"should cache up to capacity","suites":[],"updatePoint":{"line":13,"column":33,"index":414},"line":13,"code":"  it('should cache up to capacity', () => {\n    for (let i = 0; i < 5; i++) {\n      expect(cache.get(i)).to.equal(i);\n    }\n  });","file":"unit/core/data-structures/test-lru-cache.js","skipped":false,"dir":"test"},{"name":"should not-evict when putting same key","suites":[],"updatePoint":{"line":18,"column":44,"index":555},"line":18,"code":"  it('should not-evict when putting same key', () => {\n    for (let i = 0; i < 5; i++) {\n      cache.put(0, i);\n    }\n    expect(cache.get(0)).to.equal(4);\n    for (let i = 1; i < 5; i++) {\n      expect(cache.get(i)).to.equal(i);\n    }\n  });","file":"unit/core/data-structures/test-lru-cache.js","skipped":false,"dir":"test"},{"name":"should never be over cap","suites":[],"updatePoint":{"line":27,"column":30,"index":783},"line":27,"code":"  it('should never be over cap', () => {\n    for (let i = 5; i < 10; i++) {\n      cache.put(i, i);\n    }\n    for (let i = 0; i < 5; i++) {\n      expect(cache.get(i)).to.be.undefined;\n    }\n  });","file":"unit/core/data-structures/test-lru-cache.js","skipped":false,"dir":"test"},{"name":"should evict least recently used","suites":[],"updatePoint":{"line":35,"column":38,"index":986},"line":35,"code":"  it('should evict least recently used', () => {\n    expect(cache.get(0)).to.equal(0);\n    cache.put(5, 5);\n    expect(cache.get(0)).to.equal(0);\n    expect(cache.get(5)).to.equal(5);\n    expect(cache.get(1)).to.be.undefined;\n  });","file":"unit/core/data-structures/test-lru-cache.js","skipped":false,"dir":"test"},{"name":"add-remove-fire","suites":[],"updatePoint":{"line":7,"column":21,"index":229},"line":7,"code":"  it('add-remove-fire', () => {\n    let observer1Called = 0;\n    const observer1 = () => {\n      observer1Called++;\n    };\n    observable.add(observer1);\n    let observer2Called = 0;\n    const observer2 = () => {\n      observer2Called++;\n    };\n    const observer2Key = observable.add(observer2);\n    expect(observer1Called).to.equal(0);\n    expect(observer2Called).to.equal(0);\n    observable.fire('A');\n    expect(observer1Called).to.equal(1);\n    expect(observer2Called).to.equal(1);\n    observable.remove(observer1);\n    observable.fire('B');\n    expect(observer1Called).to.equal(1);\n    expect(observer2Called).to.equal(2);\n    observer2Key();\n    observable.fire('C');\n    expect(observer1Called).to.equal(1);\n    expect(observer2Called).to.equal(2);\n    observable.add(observer1);\n    observable.add(observer2);\n    observable.removeAll();\n    observable.fire('D');\n    expect(observer1Called).to.equal(1);\n    expect(observer2Called).to.equal(2);\n  });","file":"unit/core/data-structures/test-observable.js","skipped":false,"dir":"test"},{"name":"remove while firing","suites":[],"updatePoint":{"line":38,"column":25,"index":1194},"line":38,"code":"  it('remove while firing', () => {\n    let observer1Called = 0;\n    const observer1 = () => {\n      observer1Called++;\n    };\n    observable.add(observer1);\n    const remove = observable.add(() => {\n      remove();\n    });\n    observable.add(observer1);\n    observable.fire();\n    expect(observer1Called).to.equal(2);\n  });","file":"unit/core/data-structures/test-observable.js","skipped":false,"dir":"test"},{"name":"should return the correct length of the queue","suites":[],"updatePoint":{"line":19,"column":51,"index":459},"line":19,"code":"  it('should return the correct length of the queue', () => {\n    expect(pq.length).to.equal(0);\n    pq.enqueue('a', 0);\n    pq.enqueue('b', 1);\n    expect(pq.length).to.equal(2);\n    pq.dequeue();\n    expect(pq.length).to.equal(1);\n    pq.dequeue();\n    expect(pq.length).to.equal(0);\n  });","file":"unit/core/data-structures/test-priority-queue.js","skipped":false,"dir":"test"},{"name":"should support enqueueing arbitrary data types","suites":[],"updatePoint":{"line":29,"column":52,"index":752},"line":29,"code":"  it('should support enqueueing arbitrary data types', () => {\n    pq.enqueue('abc', 0);\n    pq.enqueue(123, 0);\n    pq.enqueue(['x', 'y'], 0);\n    pq.enqueue({\n      foo: 'bar'\n    }, 0);\n    expect(toArray(pq)).to.deep.equal(['abc', 123, ['x', 'y'], {\n      foo: 'bar'\n    }]);\n  });","file":"unit/core/data-structures/test-priority-queue.js","skipped":false,"dir":"test"},{"name":"should support peeking at the max priority item","suites":[],"updatePoint":{"line":40,"column":53,"index":1039},"line":40,"code":"  it('should support peeking at the max priority item', () => {\n    pq.enqueue('a', 0);\n    pq.enqueue('b', 10);\n    pq.enqueue('c', 5);\n    expect(pq.peek()).to.equal('b');\n  });","file":"unit/core/data-structures/test-priority-queue.js","skipped":false,"dir":"test"},{"name":"should dequeue items in descending priority order","suites":[],"updatePoint":{"line":46,"column":55,"index":1221},"line":46,"code":"  it('should dequeue items in descending priority order', () => {\n    pq.enqueue('c', 0);\n    pq.enqueue('a', Number.POSITIVE_INFINITY);\n    pq.enqueue('d', -4);\n    pq.enqueue('b', 200);\n    pq.enqueue('e', Number.NEGATIVE_INFINITY);\n    expect(toArray(pq)).to.deep.equal(['a', 'b', 'c', 'd', 'e']);\n  });","file":"unit/core/data-structures/test-priority-queue.js","skipped":false,"dir":"test"},{"name":"should dequeue items with same priority in FIFO order","suites":[],"updatePoint":{"line":54,"column":59,"index":1532},"line":54,"code":"  it('should dequeue items with same priority in FIFO order', () => {\n    pq.enqueue('b', 1);\n    pq.enqueue('a', 2);\n    pq.enqueue('c', 1);\n    pq.enqueue('e', 0);\n    pq.enqueue('d', 1);\n    expect(toArray(pq)).to.deep.equal(['a', 'b', 'c', 'd', 'e']);\n  });","file":"unit/core/data-structures/test-priority-queue.js","skipped":false,"dir":"test"},{"name":"should return null when dequeueing an empty queue","suites":[],"updatePoint":{"line":62,"column":55,"index":1790},"line":62,"code":"  it('should return null when dequeueing an empty queue', () => {\n    expect(pq.dequeue()).to.be.null;\n    expect(pq.length).to.equal(0);\n  });","file":"unit/core/data-structures/test-priority-queue.js","skipped":false,"dir":"test"},{"name":"should throw error when priority is NaN","suites":[],"updatePoint":{"line":66,"column":45,"index":1924},"line":66,"code":"  it('should throw error when priority is NaN', () => {\n    expect(() => {\n      pq.enqueue(NaN);\n    }).to.throw(Error);\n  });","file":"unit/core/data-structures/test-priority-queue.js","skipped":false,"dir":"test"},{"name":"should iterate through queue","suites":[],"updatePoint":{"line":71,"column":34,"index":2041},"line":71,"code":"  it('should iterate through queue', () => {\n    const spy = env.sandbox.spy();\n    pq.enqueue('p', 1);\n    pq.enqueue('m', 2);\n    pq.enqueue('a', 3);\n    pq.forEach(letter => {\n      spy(letter);\n    });\n    expect(spy.firstCall).to.be.calledWith('a');\n    expect(spy.secondCall).to.be.calledWith('m');\n    expect(spy.thirdCall).to.be.calledWith('p');\n  });","file":"unit/core/data-structures/test-priority-queue.js","skipped":false,"dir":"test"},{"name":"should resolve when its only promise resolves","suites":["LastAddedResolver"],"updatePoint":{"line":5,"column":53,"index":286},"line":5,"code":"    it('should resolve when its only promise resolves', () => {\n      const one = getPromiseObject();\n      const resolver = new LastAddedResolver();\n      resolver.add(one.promise);\n      setTimeout(() => one.resolve('one'), 0);\n      return resolver.then(result => {\n        expect(result).to.equal('one');\n      });\n    });","file":"unit/core/data-structures/test-promise.js","skipped":false,"dir":"test"},{"name":"should resolve when its last promise added resolves","suites":["LastAddedResolver"],"updatePoint":{"line":14,"column":59,"index":619},"line":14,"code":"    it('should resolve when its last promise added resolves', () => {\n      const one = getPromiseObject();\n      const two = getPromiseObject();\n      const firstResolver = new LastAddedResolver();\n      firstResolver.add(one.promise);\n      firstResolver.add(two.promise);\n      setTimeout(() => one.resolve('one'), 0);\n      setTimeout(() => two.resolve('two'), 10);\n      const three = getPromiseObject();\n      const four = getPromiseObject();\n      const five = getPromiseObject();\n      const secondResolver = new LastAddedResolver();\n      secondResolver.add(three.promise);\n      secondResolver.add(four.promise);\n      secondResolver.add(five.promise);\n      setTimeout(() => three.resolve('three'), 0);\n      setTimeout(() => four.resolve('four'), 20);\n      setTimeout(() => five.resolve('five'), 10);\n      return Promise.all([firstResolver.then(result => {\n        expect(result).to.equal('two');\n      }), secondResolver.then(result => {\n        expect(result).to.equal('five');\n      })]);\n    });","file":"unit/core/data-structures/test-promise.js","skipped":false,"dir":"test"},{"name":"should support adding initial promises in the constructor","suites":["LastAddedResolver"],"updatePoint":{"line":38,"column":65,"index":1639},"line":38,"code":"    it('should support adding initial promises in the constructor', () => {\n      const one = getPromiseObject();\n      const two = getPromiseObject();\n      const resolver = new LastAddedResolver([one.promise, two.promise]);\n      setTimeout(() => one.resolve('one'), 0);\n      setTimeout(() => two.resolve('two'), 10);\n      return resolver.then(result => {\n        expect(result).to.equal('two');\n      });\n    });","file":"unit/core/data-structures/test-promise.js","skipped":false,"dir":"test"},{"name":"should reject only when the last promise rejects","suites":["LastAddedResolver"],"updatePoint":{"line":48,"column":56,"index":2048},"line":48,"code":"    it('should reject only when the last promise rejects', () => {\n      const one = getPromiseObject();\n      const two = getPromiseObject();\n      const firstResolver = new LastAddedResolver();\n      firstResolver.add(one.promise);\n      firstResolver.add(two.promise);\n      setTimeout(() => one.resolve('one'), 0);\n      setTimeout(() => two.reject('two'), 20);\n      setTimeout(() => two.resolve('three'), 10);\n      const four = getPromiseObject();\n      const five = getPromiseObject();\n      const six = getPromiseObject();\n      const secondResolver = new LastAddedResolver();\n      secondResolver.add(four.promise);\n      secondResolver.add(five.promise);\n      secondResolver.add(six.promise);\n      setTimeout(() => four.resolve('four'), 0);\n      setTimeout(() => five.resolve('five'), 20);\n      setTimeout(() => six.reject('six'), 10);\n      return Promise.all([firstResolver.then(result => {\n        expect(result).to.equal('three');\n      }, unusedError => {\n        // shouldn't run\n        expect(false).to.be.true;\n      }), secondResolver.then(unusedResult => {\n        // shouldn't run\n        expect(false).to.be.true;\n      }, error => {\n        expect(error).to.equal('six');\n      })]);\n    });","file":"unit/core/data-structures/test-promise.js","skipped":false,"dir":"test"},{"name":"should register signal without promise","suites":[],"updatePoint":{"line":10,"column":44,"index":308},"line":10,"code":"  it('should register signal without promise', () => {\n    signals.signal('sig');\n    expect(signals.get('sig')).to.equal(1);\n    expect(signals.promiseMap_).to.be.null;\n  });","file":"unit/core/data-structures/test-signals.js","skipped":false,"dir":"test"},{"name":"should reject signal without promise","suites":[],"updatePoint":{"line":15,"column":42,"index":482},"line":15,"code":"  it('should reject signal without promise', () => {\n    const error = new Error();\n    signals.rejectSignal('sig', error);\n    expect(signals.get('sig')).to.equal(error);\n    expect(signals.promiseMap_).to.be.null;\n  });","file":"unit/core/data-structures/test-signals.js","skipped":false,"dir":"test"},{"name":"should not duplicate signal","suites":[],"updatePoint":{"line":21,"column":33,"index":695},"line":21,"code":"  it('should not duplicate signal', () => {\n    signals.signal('sig', 11);\n    expect(signals.map_['sig']).to.equal(11);\n    signals.signal('sig', 12);\n    expect(signals.map_['sig']).to.equal(11); // Did not change.\n\n    signals.rejectSignal('sig', new Error());\n    expect(signals.map_['sig']).to.equal(11); // Did not change.\n  });","file":"unit/core/data-structures/test-signals.js","skipped":false,"dir":"test"},{"name":"should override signal time","suites":[],"updatePoint":{"line":31,"column":33,"index":1031},"line":31,"code":"  it('should override signal time', () => {\n    signals.signal('sig', 11);\n    expect(signals.map_['sig']).to.equal(11);\n    signals.signal('sig-1');\n    expect(signals.map_['sig-1']).to.equal(1);\n\n    // zero is respected\n    signals.signal('sig-2', 0);\n    expect(signals.map_['sig-2']).to.equal(0);\n    expect(signals.promiseMap_).to.be.null;\n  });","file":"unit/core/data-structures/test-signals.js","skipped":false,"dir":"test"},{"name":"should resolve signal after it was requested","suites":[],"updatePoint":{"line":42,"column":50,"index":1400},"line":42,"code":"  it('should resolve signal after it was requested', () => {\n    const promise = signals.whenSignal('sig');\n    expect(signals.promiseMap_['sig'].promise).to.equal(promise);\n    expect(signals.promiseMap_['sig'].resolve).to.be.ok;\n    expect(signals.promiseMap_['sig'].reject).to.be.ok;\n    expect(signals.whenSignal('sig')).to.equal(promise); // Reuse promise.\n    signals.signal('sig', 11);\n    return promise.then(time => {\n      expect(time).to.equal(11);\n      expect(signals.promiseMap_['sig'].promise).to.equal(promise);\n      expect(signals.promiseMap_['sig'].resolve).to.be.undefined;\n      expect(signals.promiseMap_['sig'].reject).to.be.undefined;\n      expect(signals.whenSignal('sig')).to.equal(promise); // Reuse promise.\n    });\n  });","file":"unit/core/data-structures/test-signals.js","skipped":false,"dir":"test"},{"name":"should resolve signal before it was requested","suites":[],"updatePoint":{"line":58,"column":51,"index":2152},"line":58,"code":"  it('should resolve signal before it was requested', () => {\n    signals.signal('sig', 11);\n    const promise = signals.whenSignal('sig');\n    expect(signals.promiseMap_['sig'].promise).to.equal(promise);\n    expect(signals.promiseMap_['sig'].resolve).to.be.undefined;\n    expect(signals.promiseMap_['sig'].reject).to.be.undefined;\n    expect(signals.whenSignal('sig')).to.equal(promise); // Reuse promise.\n    return promise.then(time => {\n      expect(time).to.equal(11);\n      expect(signals.promiseMap_['sig'].promise).to.equal(promise);\n      expect(signals.promiseMap_['sig'].resolve).to.be.undefined;\n      expect(signals.promiseMap_['sig'].reject).to.be.undefined;\n      expect(signals.whenSignal('sig')).to.equal(promise); // Reuse promise.\n    });\n  });","file":"unit/core/data-structures/test-signals.js","skipped":false,"dir":"test"},{"name":"should reject signal after it was requested","suites":[],"updatePoint":{"line":74,"column":49,"index":2916},"line":74,"code":"  it('should reject signal after it was requested', () => {\n    const promise = signals.whenSignal('sig');\n    expect(signals.promiseMap_['sig'].promise).to.equal(promise);\n    const error = new Error();\n    signals.rejectSignal('sig', error);\n    return promise.then(() => {\n      throw new Error('should have failed');\n    }, reason => {\n      expect(reason).to.equal(error);\n      expect(signals.promiseMap_['sig'].promise).to.equal(promise);\n      expect(signals.promiseMap_['sig'].resolve).to.be.undefined;\n      expect(signals.promiseMap_['sig'].reject).to.be.undefined;\n      expect(signals.whenSignal('sig')).to.equal(promise); // Reuse promise.\n    });\n  });","file":"unit/core/data-structures/test-signals.js","skipped":false,"dir":"test"},{"name":"should reject signal before it was requested","suites":[],"updatePoint":{"line":90,"column":50,"index":3586},"line":90,"code":"  it('should reject signal before it was requested', () => {\n    const error = new Error();\n    signals.rejectSignal('sig', error);\n    const promise = signals.whenSignal('sig');\n    expect(signals.promiseMap_['sig'].promise).to.equal(promise);\n    return promise.then(() => {\n      throw new Error('should have failed');\n    }, reason => {\n      expect(reason).to.equal(error);\n      expect(signals.promiseMap_['sig'].promise).to.equal(promise);\n      expect(signals.promiseMap_['sig'].resolve).to.be.undefined;\n      expect(signals.promiseMap_['sig'].reject).to.be.undefined;\n      expect(signals.whenSignal('sig')).to.equal(promise); // Reuse promise.\n    });\n  });","file":"unit/core/data-structures/test-signals.js","skipped":false,"dir":"test"},{"name":"should reset signal before it was triggered","suites":[],"updatePoint":{"line":106,"column":49,"index":4255},"line":106,"code":"  it('should reset signal before it was triggered', () => {\n    signals.reset('sig');\n    expect(signals.get('sig')).to.be.null;\n    expect(signals.promiseMap_).to.be.null;\n  });","file":"unit/core/data-structures/test-signals.js","skipped":false,"dir":"test"},{"name":"should reset signal after it was triggered","suites":[],"updatePoint":{"line":111,"column":48,"index":4433},"line":111,"code":"  it('should reset signal after it was triggered', () => {\n    signals.signal('sig');\n    expect(signals.get('sig')).to.be.ok;\n    signals.reset('sig');\n    expect(signals.get('sig')).to.be.null;\n    expect(signals.promiseMap_).to.be.null;\n  });","file":"unit/core/data-structures/test-signals.js","skipped":false,"dir":"test"},{"name":"should reset signal after it was requested","suites":[],"updatePoint":{"line":118,"column":48,"index":4679},"line":118,"code":"  it('should reset signal after it was requested', () => {\n    signals.whenSignal('sig');\n    const iniPromise = signals.promiseMap_['sig'].promise;\n    expect(iniPromise).to.be.ok;\n    signals.reset('sig');\n    // Promise has not changed.\n    expect(signals.promiseMap_['sig'].promise).to.equal(iniPromise);\n    expect(signals.promiseMap_['sig'].resolve).to.be.ok;\n  });","file":"unit/core/data-structures/test-signals.js","skipped":false,"dir":"test"},{"name":"should reset signal after it was resolved","suites":[],"updatePoint":{"line":127,"column":47,"index":5050},"line":127,"code":"  it('should reset signal after it was resolved', () => {\n    signals.whenSignal('sig');\n    signals.signal('sig');\n    const iniPromise = signals.promiseMap_['sig'].promise;\n    expect(iniPromise).to.be.ok;\n    expect(signals.promiseMap_['sig'].resolve).to.be.undefined;\n    signals.reset('sig');\n    // Promise has been reset completely.\n    expect(signals.promiseMap_['sig']).to.be.undefined;\n  });","file":"unit/core/data-structures/test-signals.js","skipped":false,"dir":"test"},{"name":"should reset a pre-resolved signal","suites":[],"updatePoint":{"line":137,"column":40,"index":5445},"line":137,"code":"  it('should reset a pre-resolved signal', () => {\n    signals.signal('sig');\n    signals.whenSignal('sig');\n    const iniPromise = signals.promiseMap_['sig'].promise;\n    expect(iniPromise).to.be.ok;\n    expect(signals.promiseMap_['sig'].resolve).to.be.undefined;\n    signals.reset('sig');\n    // Promise has been reset completely.\n    expect(signals.promiseMap_['sig']).to.be.undefined;\n  });","file":"unit/core/data-structures/test-signals.js","skipped":false,"dir":"test"},{"name":"should register signal without promise","suites":[],"updatePoint":{"line":154,"column":44,"index":6016},"line":154,"code":"  it('should register signal without promise', () => {\n    // The signal value is often 0 in tests due to the fake timer.\n    signals.signal('sig');\n    expect(signals.get('sig')).to.equal(0);\n  });","file":"unit/core/data-structures/test-signals.js","skipped":false,"dir":"test"},{"name":"should interpret readyState correctly","suites":[],"updatePoint":{"line":21,"column":43,"index":700},"line":21,"code":"  it('should interpret readyState correctly', () => {\n    expect(isDocumentReady(testDoc)).to.equal(false);\n    testDoc.readyState = 'uninitialized';\n    expect(isDocumentReady(testDoc)).to.equal(false);\n    testDoc.readyState = 'interactive';\n    expect(isDocumentReady(testDoc)).to.equal(true);\n    testDoc.readyState = 'complete';\n    expect(isDocumentReady(testDoc)).to.equal(true);\n  });","file":"unit/core/document/test-ready.js","skipped":false,"dir":"test"},{"name":"should call callback immediately when ready","suites":[],"updatePoint":{"line":30,"column":49,"index":1099},"line":30,"code":"  it('should call callback immediately when ready', () => {\n    testDoc.readyState = 'complete';\n    const callback = env.sandbox.spy();\n    onDocumentReady(testDoc, callback);\n    expect(callback).to.be.calledOnce;\n    expect(callback.getCall(0).args).to.deep.equal([testDoc]);\n  });","file":"unit/core/document/test-ready.js","skipped":false,"dir":"test"},{"name":"should wait to call callback until ready","suites":[],"updatePoint":{"line":37,"column":46,"index":1381},"line":37,"code":"  it('should wait to call callback until ready', () => {\n    testDoc.readyState = 'loading';\n    const callback = env.sandbox.spy();\n    onDocumentReady(testDoc, callback);\n    expect(callback).to.have.not.been.called;\n    expect(eventListeners['readystatechange']).to.not.equal(undefined);\n\n    // Complete\n    testDoc.readyState = 'complete';\n    eventListeners['readystatechange']();\n    expect(callback).to.be.calledOnce;\n    expect(callback.getCall(0).args).to.deep.equal([testDoc]);\n    expect(eventListeners['readystatechange']).to.equal(undefined);\n  });","file":"unit/core/document/test-ready.js","skipped":false,"dir":"test"},{"name":"should wait to call callback for several loading events","suites":[],"updatePoint":{"line":51,"column":61,"index":1959},"line":51,"code":"  it('should wait to call callback for several loading events', () => {\n    testDoc.readyState = 'loading';\n    const callback = env.sandbox.spy();\n    onDocumentReady(testDoc, callback);\n    expect(callback).to.have.not.been.called;\n    expect(eventListeners['readystatechange']).to.not.equal(undefined);\n\n    // Still loading\n    eventListeners['readystatechange']();\n    expect(callback).to.have.not.been.called;\n    expect(eventListeners['readystatechange']).to.not.equal(undefined);\n\n    // Complete\n    testDoc.readyState = 'complete';\n    eventListeners['readystatechange']();\n    expect(callback).to.be.calledOnce;\n    expect(callback.getCall(0).args).to.deep.equal([testDoc]);\n    expect(eventListeners['readystatechange']).to.equal(undefined);\n  });","file":"unit/core/document/test-ready.js","skipped":false,"dir":"test"},{"name":"should call callback immediately when ready","suites":["whenDocumentReady"],"updatePoint":{"line":71,"column":51,"index":2749},"line":71,"code":"    it('should call callback immediately when ready', () => {\n      testDoc.readyState = 'complete';\n      const spy = env.sandbox.spy();\n      const spy2 = env.sandbox.spy();\n      const spy3 = env.sandbox.spy();\n      whenDocumentReady(testDoc).then(spy).then(spy2);\n      whenDocumentReady(testDoc).then(spy3);\n      expect(spy).to.have.not.been.called;\n      expect(spy2).to.have.not.been.called;\n      expect(spy3).to.have.not.been.called;\n      return timer.promise().then(() => {\n        expect(spy).to.be.calledOnce;\n        expect(spy.getCall(0).args).to.deep.equal([testDoc]);\n        expect(spy2).to.be.calledOnce;\n        expect(spy3).to.be.calledOnce;\n      });\n    });","file":"unit/core/document/test-ready.js","skipped":false,"dir":"test"},{"name":"should not call callback","suites":["whenDocumentReady"],"updatePoint":{"line":88,"column":32,"index":3413},"line":88,"code":"    it('should not call callback', () => {\n      const spy = env.sandbox.spy();\n      whenDocumentReady(testDoc).then(spy);\n      expect(spy).to.have.not.been.called;\n      return timer.promise().then(() => {\n        expect(spy).to.have.not.been.called;\n      });\n    });","file":"unit/core/document/test-ready.js","skipped":false,"dir":"test"},{"name":"should wait to call callback until ready","suites":["whenDocumentReady"],"updatePoint":{"line":96,"column":48,"index":3701},"line":96,"code":"    it('should wait to call callback until ready', () => {\n      testDoc.readyState = 'loading';\n      const callback = env.sandbox.spy();\n      whenDocumentReady(testDoc).then(callback);\n      return timer.promise().then(() => {\n        expect(callback).to.have.not.been.called;\n        expect(eventListeners['readystatechange']).to.not.equal(undefined);\n\n        // Complete\n        testDoc.readyState = 'complete';\n        eventListeners['readystatechange']();\n        return timer.promise().then(() => {\n          expect(callback).to.be.calledOnce;\n          expect(callback.getCall(0).args).to.deep.equal([testDoc]);\n          expect(eventListeners['readystatechange']).to.equal(undefined);\n        });\n      });\n    });","file":"unit/core/document/test-ready.js","skipped":false,"dir":"test"},{"name":"should call callback immediately when complete","suites":["whenDocumentComplete"],"updatePoint":{"line":116,"column":54,"index":4482},"line":116,"code":"    it('should call callback immediately when complete', () => {\n      testDoc.readyState = 'complete';\n      const spy = env.sandbox.spy();\n      const spy2 = env.sandbox.spy();\n      const spy3 = env.sandbox.spy();\n      whenDocumentComplete(testDoc).then(spy).then(spy2);\n      whenDocumentComplete(testDoc).then(spy3);\n      expect(spy).to.have.not.been.called;\n      expect(spy2).to.have.not.been.called;\n      expect(spy3).to.have.not.been.called;\n      return timer.promise().then(() => {\n        expect(spy).to.be.calledOnce;\n        expect(spy.getCall(0).args).to.deep.equal([testDoc]);\n        expect(spy2).to.be.calledOnce;\n        expect(spy3).to.be.calledOnce;\n      });\n    });","file":"unit/core/document/test-ready.js","skipped":false,"dir":"test"},{"name":"should not call callback","suites":["whenDocumentComplete"],"updatePoint":{"line":133,"column":32,"index":5152},"line":133,"code":"    it('should not call callback', () => {\n      const spy = env.sandbox.spy();\n      whenDocumentComplete(testDoc).then(spy);\n      expect(spy).to.have.not.been.called;\n      return timer.promise().then(() => {\n        expect(spy).to.have.not.been.called;\n      });\n    });","file":"unit/core/document/test-ready.js","skipped":false,"dir":"test"},{"name":"should wait to call callback until ready","suites":["whenDocumentComplete"],"updatePoint":{"line":141,"column":48,"index":5443},"line":141,"code":"    it('should wait to call callback until ready', () => {\n      testDoc.readyState = 'loading';\n      const callback = env.sandbox.spy();\n      whenDocumentComplete(testDoc).then(callback);\n      return timer.promise().then(() => {\n        expect(callback).to.have.not.been.called;\n        expect(eventListeners['readystatechange']).to.not.equal(undefined);\n\n        // interactive\n        testDoc.readyState = 'interactive';\n        eventListeners['readystatechange']();\n        return timer.promise().then(() => {\n          expect(callback).to.have.not.been.called;\n          expect(eventListeners['readystatechange']).to.not.equal(undefined);\n\n          // Complete\n          testDoc.readyState = 'complete';\n          eventListeners['readystatechange']();\n          return timer.promise().then(() => {\n            expect(callback).to.be.calledOnce;\n            expect(callback.getCall(0).args).to.deep.equal([testDoc]);\n            expect(eventListeners['readystatechange']).to.equal(undefined);\n          });\n        });\n      });\n    });","file":"unit/core/document/test-ready.js","skipped":false,"dir":"test"},{"name":"should be visible when no properties defined","suites":[],"updatePoint":{"line":15,"column":50,"index":536},"line":15,"code":"  it('should be visible when no properties defined', () => {\n    expect(isDocumentHidden(doc)).to.be.false;\n    expect(getDocumentVisibilityState(doc)).to.equal('visible');\n  });","file":"unit/core/document/test-visibility.js","skipped":false,"dir":"test"},{"name":"should resolve non-vendor hidden property","suites":[],"updatePoint":{"line":19,"column":47,"index":712},"line":19,"code":"  it('should resolve non-vendor hidden property', () => {\n    overridePropertyForDoc('hidden', true);\n    expect(isDocumentHidden(doc)).to.be.true;\n    expect(getDocumentVisibilityState(doc)).to.equal('hidden');\n  });","file":"unit/core/document/test-visibility.js","skipped":false,"dir":"test"},{"name":"should resolve non-vendor visibilityState property","suites":[],"updatePoint":{"line":24,"column":56,"index":939},"line":24,"code":"  it('should resolve non-vendor visibilityState property', () => {\n    overridePropertyForDoc('visibilityState', 'hidden');\n    expect(isDocumentHidden(doc)).to.be.true;\n    expect(getDocumentVisibilityState(doc)).to.equal('hidden');\n  });","file":"unit/core/document/test-visibility.js","skipped":false,"dir":"test"},{"name":"should prefer visibilityState property to hidden","suites":[],"updatePoint":{"line":29,"column":54,"index":1177},"line":29,"code":"  it('should prefer visibilityState property to hidden', () => {\n    overridePropertyForDoc('hidden', true);\n    overridePropertyForDoc('visibilityState', 'visible');\n    expect(isDocumentHidden(doc)).to.be.false;\n    expect(getDocumentVisibilityState(doc)).to.equal('visible');\n  });","file":"unit/core/document/test-visibility.js","skipped":false,"dir":"test"},{"name":"should consider prerender as visible","suites":[],"updatePoint":{"line":35,"column":42,"index":1450},"line":35,"code":"  it('should consider prerender as visible', () => {\n    overridePropertyForDoc('visibilityState', 'prerender');\n    expect(isDocumentHidden(doc)).to.be.true;\n    expect(getDocumentVisibilityState(doc)).to.equal('prerender');\n  });","file":"unit/core/document/test-visibility.js","skipped":false,"dir":"test"},{"name":"should resolve non-vendor visibilitychange event","suites":[],"updatePoint":{"line":40,"column":54,"index":1694},"line":40,"code":"  it('should resolve non-vendor visibilitychange event', () => {\n    function handler() {}\n    overridePropertyForDoc('onvisibilitychange', null);\n    addDocumentVisibilityChangeListener(doc, handler);\n    expect(doc.addEventListener).to.be.calledOnce.calledWith('visibilitychange', handler);\n    removeDocumentVisibilityChangeListener(doc, handler);\n    expect(doc.removeEventListener).to.be.calledOnce.calledWith('visibilitychange', handler);\n  });","file":"unit/core/document/test-visibility.js","skipped":false,"dir":"test"},{"name":"should resolve vendor hidden property","suites":[],"updatePoint":{"line":48,"column":43,"index":2134},"line":48,"code":"  it('should resolve vendor hidden property', () => {\n    overridePropertyForDoc('webkitHidden', true);\n    expect(isDocumentHidden(doc)).to.be.true;\n    expect(getDocumentVisibilityState(doc)).to.equal('hidden');\n  });","file":"unit/core/document/test-visibility.js","skipped":false,"dir":"test"},{"name":"should resolve vendor visibilityState property","suites":[],"updatePoint":{"line":53,"column":52,"index":2363},"line":53,"code":"  it('should resolve vendor visibilityState property', () => {\n    overridePropertyForDoc('webkitVisibilityState', 'prerender');\n    expect(isDocumentHidden(doc)).to.be.true;\n    expect(getDocumentVisibilityState(doc)).to.equal('prerender');\n  });","file":"unit/core/document/test-visibility.js","skipped":false,"dir":"test"},{"name":"should resolve vendor visibilitychange event","suites":[],"updatePoint":{"line":58,"column":50,"index":2609},"line":58,"code":"  it('should resolve vendor visibilitychange event', () => {\n    function handler() {}\n    overridePropertyForDoc('webkitHidden', true);\n    overridePropertyForDoc('onwebkitvisibilitychange', null);\n    addDocumentVisibilityChangeListener(doc, handler);\n    expect(doc.addEventListener).to.be.calledOnce.calledWith('webkitVisibilitychange', handler);\n    removeDocumentVisibilityChangeListener(doc, handler);\n    expect(doc.removeEventListener).to.be.calledOnce.calledWith('webkitVisibilitychange', handler);\n  });","file":"unit/core/document/test-visibility.js","skipped":false,"dir":"test"},{"name":"should measure intersection for an element","suites":[],"updatePoint":{"line":36,"column":48,"index":1223},"line":36,"code":"  it('should measure intersection for an element', async () => {\n    const intersection = measureIntersectionNoRoot(el);\n    fireIntersections([{\n      x: 100,\n      target: el\n    }]);\n    expect(await intersection).eql({\n      x: 100,\n      target: el\n    });\n  });","file":"unit/core/dom/layout/test-intersection-no-root.js","skipped":false,"dir":"test"},{"name":"should dedupe multiple measures","suites":[],"updatePoint":{"line":47,"column":37,"index":1480},"line":47,"code":"  it('should dedupe multiple measures', async () => {\n    const measure1 = measureIntersectionNoRoot(el);\n    const measure2 = measureIntersectionNoRoot(el);\n    expect(measure1).equal(measure2);\n  });","file":"unit/core/dom/layout/test-intersection-no-root.js","skipped":false,"dir":"test"},{"name":"should not dedupe multiple measures with entries in between","suites":[],"updatePoint":{"line":52,"column":65,"index":1710},"line":52,"code":"  it('should not dedupe multiple measures with entries in between', async () => {\n    const measure1 = measureIntersectionNoRoot(el);\n    fireIntersections([{\n      x: 100,\n      target: el\n    }]);\n    const measure2 = measureIntersectionNoRoot(el);\n    expect(measure1).not.equal(measure2);\n  });","file":"unit/core/dom/layout/test-intersection-no-root.js","skipped":false,"dir":"test"},{"name":"should only use the latest entry","suites":[],"updatePoint":{"line":61,"column":38,"index":1982},"line":61,"code":"  it('should only use the latest entry', async () => {\n    const intersection = measureIntersectionNoRoot(el);\n    const firstEntry = {\n      x: 0,\n      target: el\n    };\n    const secondEntry = {\n      x: 100,\n      target: el\n    };\n    fireIntersections([firstEntry, secondEntry]);\n    expect(await intersection).equal(secondEntry);\n  });","file":"unit/core/dom/layout/test-intersection-no-root.js","skipped":false,"dir":"test"},{"name":"should measure multiple elements","suites":[],"updatePoint":{"line":74,"column":38,"index":2325},"line":74,"code":"  it('should measure multiple elements', async () => {\n    const el2 = env.win.document.createElement('p');\n    env.win.document.body.appendChild(el2);\n    const intersection1 = measureIntersectionNoRoot(el);\n    const intersection2 = measureIntersectionNoRoot(el2);\n    const firstEntry = {\n      x: 0,\n      target: el\n    };\n    const secondEntry = {\n      x: 2,\n      target: el2\n    };\n    fireIntersections([secondEntry]);\n    fireIntersections([firstEntry]);\n    expect(await intersection1).equal(firstEntry);\n    expect(await intersection2).equal(secondEntry);\n  });","file":"unit/core/dom/layout/test-intersection-no-root.js","skipped":false,"dir":"test"},{"name":"should support measuring elements from multiple windows","suites":[],"updatePoint":{"line":92,"column":61,"index":2923},"line":92,"code":"  it('should support measuring elements from multiple windows', async () => {\n    const el1 = {\n      ownerDocument: {\n        defaultView: {\n          IntersectionObserver: getInObConstructorStub()\n        }\n      }\n    };\n    const el2 = {\n      ownerDocument: {\n        defaultView: {\n          IntersectionObserver: getInObConstructorStub()\n        }\n      }\n    };\n    const intersection1 = measureIntersectionNoRoot(el1);\n    const intersection2 = measureIntersectionNoRoot(el2);\n    const firstEntry = {\n      target: el1\n    };\n    const secondEntry = {\n      target: el2\n    };\n    fireIntersections([firstEntry]);\n    fireIntersections([secondEntry]);\n    expect(await intersection1).equal(firstEntry);\n    expect(await intersection2).equal(secondEntry);\n  });","file":"unit/core/dom/layout/test-intersection-no-root.js","skipped":false,"dir":"test"},{"name":"should measure intersection for an element","suites":[],"updatePoint":{"line":36,"column":48,"index":1224},"line":36,"code":"  it('should measure intersection for an element', async () => {\n    const intersection = measureIntersection(el);\n    fireIntersections([{\n      x: 100,\n      target: el\n    }]);\n    expect(await intersection).eql({\n      x: 100,\n      target: el\n    });\n  });","file":"unit/core/dom/layout/test-intersection.js","skipped":false,"dir":"test"},{"name":"should dedupe multiple measures","suites":[],"updatePoint":{"line":47,"column":37,"index":1475},"line":47,"code":"  it('should dedupe multiple measures', async () => {\n    const measure1 = measureIntersection(el);\n    const measure2 = measureIntersection(el);\n    expect(measure1).equal(measure2);\n  });","file":"unit/core/dom/layout/test-intersection.js","skipped":false,"dir":"test"},{"name":"should not dedupe multiple measures with entries in between","suites":[],"updatePoint":{"line":52,"column":65,"index":1693},"line":52,"code":"  it('should not dedupe multiple measures with entries in between', async () => {\n    const measure1 = measureIntersection(el);\n    fireIntersections([{\n      x: 100,\n      target: el\n    }]);\n    const measure2 = measureIntersection(el);\n    expect(measure1).not.equal(measure2);\n  });","file":"unit/core/dom/layout/test-intersection.js","skipped":false,"dir":"test"},{"name":"should only use the latest entry","suites":[],"updatePoint":{"line":61,"column":38,"index":1953},"line":61,"code":"  it('should only use the latest entry', async () => {\n    const intersection = measureIntersection(el);\n    const firstEntry = {\n      x: 0,\n      target: el\n    };\n    const secondEntry = {\n      x: 100,\n      target: el\n    };\n    fireIntersections([firstEntry, secondEntry]);\n    expect(await intersection).equal(secondEntry);\n  });","file":"unit/core/dom/layout/test-intersection.js","skipped":false,"dir":"test"},{"name":"should measure multiple elements","suites":[],"updatePoint":{"line":74,"column":38,"index":2290},"line":74,"code":"  it('should measure multiple elements', async () => {\n    const el2 = env.win.document.createElement('p');\n    env.win.document.body.appendChild(el2);\n    const intersection1 = measureIntersection(el);\n    const intersection2 = measureIntersection(el2);\n    const firstEntry = {\n      x: 0,\n      target: el\n    };\n    const secondEntry = {\n      x: 2,\n      target: el2\n    };\n    fireIntersections([secondEntry]);\n    fireIntersections([firstEntry]);\n    expect(await intersection1).equal(firstEntry);\n    expect(await intersection2).equal(secondEntry);\n  });","file":"unit/core/dom/layout/test-intersection.js","skipped":false,"dir":"test"},{"name":"should support measuring elements from multiple windows","suites":[],"updatePoint":{"line":92,"column":61,"index":2876},"line":92,"code":"  it('should support measuring elements from multiple windows', async () => {\n    const el1 = {\n      ownerDocument: {\n        defaultView: {\n          IntersectionObserver: getInObConstructorStub()\n        }\n      }\n    };\n    const el2 = {\n      ownerDocument: {\n        defaultView: {\n          IntersectionObserver: getInObConstructorStub()\n        }\n      }\n    };\n    const intersection1 = measureIntersection(el1);\n    const intersection2 = measureIntersection(el2);\n    const firstEntry = {\n      target: el1\n    };\n    const secondEntry = {\n      target: el2\n    };\n    fireIntersections([firstEntry]);\n    fireIntersections([secondEntry]);\n    expect(await intersection1).equal(firstEntry);\n    expect(await intersection2).equal(secondEntry);\n  });","file":"unit/core/dom/layout/test-intersection.js","skipped":false,"dir":"test"},{"name":"clones an IntersectionObserverEntry","suites":["intersectionEntryToJson"],"updatePoint":{"line":131,"column":43,"index":3808},"line":131,"code":"    it('clones an IntersectionObserverEntry', () => {\n      const entry = {\n        time: 0,\n        intersectionRatio: 0,\n        rootBounds: zeros,\n        intersectionRect: zeros,\n        boundingClientRect: zeros\n      };\n      const json = intersectionEntryToJson(entry);\n      expect(entry).eql(json);\n      expect(entry).not.equal(json);\n    });","file":"unit/core/dom/layout/test-intersection.js","skipped":false,"dir":"test"},{"name":"clones with null rootBounds","suites":["intersectionEntryToJson"],"updatePoint":{"line":143,"column":35,"index":4153},"line":143,"code":"    it('clones with null rootBounds', () => {\n      const entry = {\n        time: 0,\n        intersectionRatio: 0,\n        rootBounds: null,\n        intersectionRect: zeros,\n        boundingClientRect: zeros\n      };\n      const json = intersectionEntryToJson(entry);\n      expect(entry).eql(json);\n      expect(entry).not.equal(json);\n    });","file":"unit/core/dom/layout/test-intersection.js","skipped":false,"dir":"test"},{"name":"parseLayout","suites":[],"updatePoint":{"line":8,"column":17,"index":365},"line":8,"code":"  it('parseLayout', () => {\n    expect(parseLayout('nodisplay')).to.equal('nodisplay');\n    expect(parseLayout('fixed')).to.equal('fixed');\n    expect(parseLayout('fixed-height')).to.equal('fixed-height');\n    expect(parseLayout('responsive')).to.equal('responsive');\n    expect(parseLayout('container')).to.equal('container');\n    expect(parseLayout('fill')).to.equal('fill');\n    expect(parseLayout('fluid')).to.equal('fluid');\n  });","file":"unit/core/dom/layout/test-layout.js","skipped":false,"dir":"test"},{"name":"are loading components allowed","suites":[],"updatePoint":{"line":17,"column":36,"index":820},"line":17,"code":"  it('are loading components allowed', () => {\n    const el = {\n      tagName: 'hold'\n    };\n    const elementsValidTagNames = [\n    // in allowlist.\n    'AMP-AD', 'AMP-ANIM', 'AMP-EMBED', 'AMP-FACEBOOK', 'AMP-FACEBOOK-COMMENTS', 'AMP-FACEBOOK-PAGE', 'AMP-GOOGLE-DOCUMENT-EMBED', 'AMP-IFRAME', 'AMP-IMG', 'AMP-INSTAGRAM', 'AMP-LIST', 'AMP-PINTEREST', 'AMP-PLAYBUZZ', 'AMP-TWITTER',\n    // matched by video player naming convention (fake)\n    'AMP-FOO-PLAYER', 'AMP-VIDEO-FOO',\n    // matched by video player naming convention (actual)\n    'AMP-JWPLAYER', 'AMP-OOYALA-PLAYER', 'AMP-VIDEO-IFRAME', 'AMP-YOUTUBE', 'AMP-VIMEO', 'AMP-BRIGHTCOVE', 'AMP-DAILYMOTION'];\n    elementsValidTagNames.forEach(function (tag) {\n      el.tagName = tag;\n      expect(isLoadingAllowed(el)).to.be.true;\n    });\n\n    // This isn't an exhaustive list of elements that aren't allowed\n    // to have loading indicators.\n    const elementsInvalidTagNames = ['AMP-POSITION-OBSERVER', 'AMP-BODYMOVIN-ANIMATION', 'AMP-VIDEO', 'AMP-REDDIT', 'AMP-GITHUB'];\n    elementsInvalidTagNames.forEach(function (tag) {\n      el.tagName = tag;\n      expect(isLoadingAllowed(el)).to.be.false;\n    });\n  });","file":"unit/core/dom/layout/test-layout.js","skipped":false,"dir":"test"},{"name":"parseLayout - failure","suites":[],"updatePoint":{"line":41,"column":27,"index":1978},"line":41,"code":"  it('parseLayout - failure', () => {\n    expect(parseLayout('abc')).to.be.undefined;\n    expect(parseLayout('xyz')).to.be.undefined;\n  });","file":"unit/core/dom/layout/test-layout.js","skipped":false,"dir":"test"},{"name":"parseLength","suites":[],"updatePoint":{"line":45,"column":17,"index":2108},"line":45,"code":"  it('parseLength', () => {\n    expect(parseLength(10)).to.equal('10px');\n    expect(parseLength('10')).to.equal('10px');\n    expect(parseLength('10px')).to.equal('10px');\n    expect(parseLength('10em')).to.equal('10em');\n    expect(parseLength('10vmin')).to.equal('10vmin');\n    expect(parseLength('10cm')).to.equal('10cm');\n    expect(parseLength('10mm')).to.equal('10mm');\n    expect(parseLength('10in')).to.equal('10in');\n    expect(parseLength('10pt')).to.equal('10pt');\n    expect(parseLength('10pc')).to.equal('10pc');\n    expect(parseLength('10q')).to.equal('10q');\n    expect(parseLength(10.1)).to.equal('10.1px');\n    expect(parseLength('10.2')).to.equal('10.2px');\n    expect(parseLength('10.1px')).to.equal('10.1px');\n    expect(parseLength('10.1em')).to.equal('10.1em');\n    expect(parseLength('10.1vmin')).to.equal('10.1vmin');\n    expect(parseLength(undefined)).to.equal(undefined);\n    expect(parseLength(null)).to.equal(undefined);\n    expect(parseLength('')).to.equal(undefined);\n  });","file":"unit/core/dom/layout/test-layout.js","skipped":false,"dir":"test"},{"name":"getLengthUnits","suites":[],"updatePoint":{"line":66,"column":20,"index":3115},"line":66,"code":"  it('getLengthUnits', () => {\n    expect(getLengthUnits('10px')).to.equal('px');\n    expect(getLengthUnits('10em')).to.equal('em');\n    expect(getLengthUnits('10vmin')).to.equal('vmin');\n    expect(getLengthUnits('10.1px')).to.equal('px');\n    expect(getLengthUnits('10.1em')).to.equal('em');\n    expect(getLengthUnits('10.1vmin')).to.equal('vmin');\n  });","file":"unit/core/dom/layout/test-layout.js","skipped":false,"dir":"test"},{"name":"getLengthNumeral","suites":[],"updatePoint":{"line":74,"column":22,"index":3474},"line":74,"code":"  it('getLengthNumeral', () => {\n    expect(getLengthNumeral('10')).to.equal(10);\n    expect(getLengthNumeral('10px')).to.equal(10);\n    expect(getLengthNumeral('10em')).to.equal(10);\n    expect(getLengthNumeral('10vmin')).to.equal(10);\n    expect(getLengthNumeral('10.1')).to.equal(10.1);\n    expect(getLengthNumeral('10.1px')).to.equal(10.1);\n    expect(getLengthNumeral('10.1em')).to.equal(10.1);\n    expect(getLengthNumeral('10.1vmin')).to.equal(10.1);\n    expect(getLengthNumeral(null)).to.equal(undefined);\n    expect(getLengthNumeral('auto')).to.equal(undefined);\n  });","file":"unit/core/dom/layout/test-layout.js","skipped":false,"dir":"test"},{"name":"assertLength","suites":[],"updatePoint":{"line":86,"column":18,"index":4047},"line":86,"code":"  it('assertLength', () => {\n    expect(assertLength('10px')).to.equal('10px');\n    expect(assertLength('10em')).to.equal('10em');\n    expect(assertLength('10vmin')).to.equal('10vmin');\n    expect(assertLength('10cm')).to.equal('10cm');\n    expect(assertLength('10mm')).to.equal('10mm');\n    expect(assertLength('10in')).to.equal('10in');\n    expect(assertLength('10pt')).to.equal('10pt');\n    expect(assertLength('10pc')).to.equal('10pc');\n    expect(assertLength('10q')).to.equal('10q');\n    expect(assertLength('10.1px')).to.equal('10.1px');\n    expect(assertLength('10.1em')).to.equal('10.1em');\n    expect(assertLength('10.1vmin')).to.equal('10.1vmin');\n    allowConsoleError(() => {\n      expect(function () {\n        assertLength('10%');\n      }).to.throw(/Invalid length value/);\n    });\n    allowConsoleError(() => {\n      expect(function () {\n        assertLength(10);\n      }).to.throw(/Invalid length value/);\n    });\n    allowConsoleError(() => {\n      expect(function () {\n        assertLength('10');\n      }).to.throw(/Invalid length value/);\n    });\n    allowConsoleError(() => {\n      expect(function () {\n        assertLength(undefined);\n      }).to.throw(/Invalid length value/);\n    });\n    allowConsoleError(() => {\n      expect(function () {\n        assertLength(null);\n      }).to.throw(/Invalid length value/);\n    });\n    allowConsoleError(() => {\n      expect(function () {\n        assertLength('');\n      }).to.throw(/Invalid length value/);\n    });\n  });","file":"unit/core/dom/layout/test-layout.js","skipped":false,"dir":"test"},{"name":"assertLengthOrPercent","suites":[],"updatePoint":{"line":130,"column":27,"index":5539},"line":130,"code":"  it('assertLengthOrPercent', () => {\n    expect(assertLengthOrPercent('10px')).to.equal('10px');\n    expect(assertLengthOrPercent('10em')).to.equal('10em');\n    expect(assertLengthOrPercent('10vmin')).to.equal('10vmin');\n    expect(assertLengthOrPercent('10.1px')).to.equal('10.1px');\n    expect(assertLengthOrPercent('10.1em')).to.equal('10.1em');\n    expect(assertLengthOrPercent('10.1vmin')).to.equal('10.1vmin');\n    expect(assertLengthOrPercent('10.1%')).to.equal('10.1%');\n    allowConsoleError(() => {\n      expect(function () {\n        assertLengthOrPercent(10);\n      }).to.throw(/Invalid length or percent value/);\n    });\n    allowConsoleError(() => {\n      expect(function () {\n        assertLengthOrPercent('10');\n      }).to.throw(/Invalid length or percent value/);\n    });\n    allowConsoleError(() => {\n      expect(function () {\n        assertLengthOrPercent(undefined);\n      }).to.throw(/Invalid length or percent value/);\n    });\n    allowConsoleError(() => {\n      expect(function () {\n        assertLengthOrPercent(null);\n      }).to.throw(/Invalid length or percent value/);\n    });\n    allowConsoleError(() => {\n      expect(function () {\n        assertLengthOrPercent('');\n      }).to.throw(/Invalid length or percent value/);\n    });\n  });","file":"unit/core/dom/layout/test-layout.js","skipped":false,"dir":"test"},{"name":"layout=nodisplay","suites":[],"updatePoint":{"line":164,"column":22,"index":6801},"line":164,"code":"  it('layout=nodisplay', () => {\n    div.setAttribute('layout', 'nodisplay');\n    expect(applyStaticLayout(div)).to.equal(Layout_Enum.NODISPLAY);\n    expect(div.style.width).to.equal('');\n    expect(div.style.height).to.equal('');\n    document.body.appendChild(div);\n    expect(div).to.have.display('none');\n    document.body.removeChild(div);\n    expect(div).to.have.class('i-amphtml-layout-nodisplay');\n    expect(div).to.not.have.class('i-amphtml-layout-size-defined');\n    expect(div.children.length).to.equal(0);\n  });","file":"unit/core/dom/layout/test-layout.js","skipped":false,"dir":"test"},{"name":"layout=fixed","suites":[],"updatePoint":{"line":176,"column":18,"index":7321},"line":176,"code":"  it('layout=fixed', () => {\n    div.setAttribute('layout', 'fixed');\n    div.setAttribute('width', 100);\n    div.setAttribute('height', 200);\n    expect(applyStaticLayout(div)).to.equal(Layout_Enum.FIXED);\n    expect(div.style.width).to.equal('100px');\n    expect(div.style.height).to.equal('200px');\n    expect(div).to.have.class('i-amphtml-layout-fixed');\n    expect(div).to.have.class('i-amphtml-layout-size-defined');\n    expect(div.children.length).to.equal(0);\n  });","file":"unit/core/dom/layout/test-layout.js","skipped":false,"dir":"test"},{"name":"layout=fixed - default with width/height","suites":[],"updatePoint":{"line":187,"column":46,"index":7823},"line":187,"code":"  it('layout=fixed - default with width/height', () => {\n    div.setAttribute('width', 100);\n    div.setAttribute('height', 200);\n    expect(applyStaticLayout(div)).to.equal(Layout_Enum.FIXED);\n    expect(div.style.width).to.equal('100px');\n    expect(div.style.height).to.equal('200px');\n  });","file":"unit/core/dom/layout/test-layout.js","skipped":false,"dir":"test"},{"name":"layout=fixed - requires width/height","suites":[],"updatePoint":{"line":194,"column":42,"index":8114},"line":194,"code":"  it('layout=fixed - requires width/height', () => {\n    div.setAttribute('layout', 'fixed');\n    allowConsoleError(() => {\n      expect(() => applyStaticLayout(div)).to.throw(/The \"height\" attribute is missing/);\n    });\n  });","file":"unit/core/dom/layout/test-layout.js","skipped":false,"dir":"test"},{"name":"layout=fixed-height","suites":[],"updatePoint":{"line":200,"column":25,"index":8325},"line":200,"code":"  it('layout=fixed-height', () => {\n    div.setAttribute('layout', 'fixed-height');\n    div.setAttribute('height', 200);\n    expect(applyStaticLayout(div)).to.equal(Layout_Enum.FIXED_HEIGHT);\n    expect(div.style.width).to.equal('');\n    expect(div.style.height).to.equal('200px');\n    expect(div).to.have.class('i-amphtml-layout-fixed-height');\n    expect(div).to.have.class('i-amphtml-layout-size-defined');\n    expect(div.children.length).to.equal(0);\n  });","file":"unit/core/dom/layout/test-layout.js","skipped":false,"dir":"test"},{"name":"layout=fixed-height, with width=auto","suites":[],"updatePoint":{"line":210,"column":42,"index":8803},"line":210,"code":"  it('layout=fixed-height, with width=auto', () => {\n    div.setAttribute('layout', 'fixed-height');\n    div.setAttribute('height', 200);\n    div.setAttribute('width', 'auto');\n    expect(applyStaticLayout(div)).to.equal(Layout_Enum.FIXED_HEIGHT);\n    expect(div.style.width).to.equal('');\n    expect(div.style.height).to.equal('200px');\n    expect(div).to.have.class('i-amphtml-layout-fixed-height');\n    expect(div).to.have.class('i-amphtml-layout-size-defined');\n    expect(div.children.length).to.equal(0);\n  });","file":"unit/core/dom/layout/test-layout.js","skipped":false,"dir":"test"},{"name":"layout=fixed-height, prohibit width!=auto","suites":[],"updatePoint":{"line":221,"column":47,"index":9325},"line":221,"code":"  it('layout=fixed-height, prohibit width!=auto', () => {\n    div.setAttribute('layout', 'fixed-height');\n    div.setAttribute('height', 200);\n    div.setAttribute('width', 300);\n    allowConsoleError(() => {\n      expect(function () {\n        applyStaticLayout(div);\n      }).to.throw(/The \"width\" attribute must be missing or \"auto\"/);\n    });\n  });","file":"unit/core/dom/layout/test-layout.js","skipped":false,"dir":"test"},{"name":"layout=fixed-height - default with height","suites":[],"updatePoint":{"line":231,"column":47,"index":9677},"line":231,"code":"  it('layout=fixed-height - default with height', () => {\n    div.setAttribute('height', 200);\n    expect(applyStaticLayout(div)).to.equal(Layout_Enum.FIXED_HEIGHT);\n    expect(div.style.height).to.equal('200px');\n    expect(div.style.width).to.equal('');\n  });","file":"unit/core/dom/layout/test-layout.js","skipped":false,"dir":"test"},{"name":"layout=fixed-height - default with height and width=auto","suites":[],"updatePoint":{"line":237,"column":62,"index":9954},"line":237,"code":"  it('layout=fixed-height - default with height and width=auto', () => {\n    div.setAttribute('height', 200);\n    div.setAttribute('width', 'auto');\n    expect(applyStaticLayout(div)).to.equal(Layout_Enum.FIXED_HEIGHT);\n    expect(div.style.height).to.equal('200px');\n    expect(div.style.width).to.equal('');\n  });","file":"unit/core/dom/layout/test-layout.js","skipped":false,"dir":"test"},{"name":"layout=fixed-height - requires height","suites":[],"updatePoint":{"line":244,"column":43,"index":10251},"line":244,"code":"  it('layout=fixed-height - requires height', () => {\n    div.setAttribute('layout', 'fixed-height');\n    allowConsoleError(() => {\n      expect(() => applyStaticLayout(div)).to.throw(/The \"height\" attribute is missing/);\n    });\n  });","file":"unit/core/dom/layout/test-layout.js","skipped":false,"dir":"test"},{"name":"layout=responsive","suites":[],"updatePoint":{"line":250,"column":23,"index":10467},"line":250,"code":"  it('layout=responsive', () => {\n    div.setAttribute('layout', 'responsive');\n    div.setAttribute('width', 100);\n    div.setAttribute('height', 200);\n    expect(applyStaticLayout(div)).to.equal(Layout_Enum.RESPONSIVE);\n    expect(div.style.width).to.equal('');\n    expect(div.style.height).to.equal('');\n    expect(div).to.have.class('i-amphtml-layout-responsive');\n    expect(div).to.have.class('i-amphtml-layout-size-defined');\n    expect(div.children.length).to.equal(1);\n    expect(div.children[0].tagName.toLowerCase()).to.equal('i-amphtml-sizer');\n    expect(div.children[0].getAttribute('slot')).to.equal('i-amphtml-svc');\n    expect(div.children[0].style.paddingTop).to.equal('200%');\n  });","file":"unit/core/dom/layout/test-layout.js","skipped":false,"dir":"test"},{"name":"layout=responsive - default with sizes","suites":[],"updatePoint":{"line":264,"column":44,"index":11190},"line":264,"code":"  it('layout=responsive - default with sizes', () => {\n    div.setAttribute('sizes', '50vw');\n    div.setAttribute('width', 100);\n    div.setAttribute('height', 200);\n    expect(applyStaticLayout(div)).to.equal(Layout_Enum.RESPONSIVE);\n    expect(div.style.width).to.equal('');\n    expect(div.style.height).to.equal('');\n    expect(div).to.have.class('i-amphtml-layout-responsive');\n    expect(div).to.have.class('i-amphtml-layout-size-defined');\n    expect(div.children.length).to.equal(1);\n    expect(div.children[0].tagName.toLowerCase()).to.equal('i-amphtml-sizer');\n    expect(div.children[0].getAttribute('slot')).to.equal('i-amphtml-svc');\n    expect(div.children[0].style.paddingTop).to.equal('200%');\n  });","file":"unit/core/dom/layout/test-layout.js","skipped":false,"dir":"test"},{"name":"layout=intrinsic","suites":[],"updatePoint":{"line":278,"column":22,"index":11884},"line":278,"code":"  it('layout=intrinsic', () => {\n    div.setAttribute('layout', 'intrinsic');\n    div.setAttribute('width', 100);\n    div.setAttribute('height', 200);\n    expect(applyStaticLayout(div)).to.equal(Layout_Enum.INTRINSIC);\n    expect(div.style.width).to.equal('');\n    expect(div.style.height).to.equal('');\n    expect(div).to.have.class('i-amphtml-layout-intrinsic');\n    expect(div).to.have.class('i-amphtml-layout-size-defined');\n    expect(div.children.length).to.equal(1);\n    expect(div.children[0].tagName.toLowerCase()).to.equal('i-amphtml-sizer');\n    expect(div.children[0].getAttribute('slot')).to.equal('i-amphtml-svc');\n    expect(div.children[0].children.length).to.equal(1);\n    expect(div.children[0].children[0].tagName.toLowerCase()).to.equal('img');\n    expect(div.children[0].children[0].src).to.equal('data:image/svg+xml;charset=utf-8,<svg height=\"200px\" width=\"100px\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\"/>');\n  });","file":"unit/core/dom/layout/test-layout.js","skipped":false,"dir":"test"},{"name":"layout=intrinsic - default with sizes","suites":[],"updatePoint":{"line":294,"column":43,"index":12851},"line":294,"code":"  it('layout=intrinsic - default with sizes', () => {\n    div.setAttribute('layout', 'intrinsic');\n    div.setAttribute('sizes', '50vw');\n    div.setAttribute('width', 100);\n    div.setAttribute('height', 200);\n    expect(applyStaticLayout(div)).to.equal(Layout_Enum.INTRINSIC);\n    expect(div.style.width).to.equal('');\n    expect(div.style.height).to.equal('');\n    expect(div).to.have.class('i-amphtml-layout-intrinsic');\n    expect(div).to.have.class('i-amphtml-layout-size-defined');\n    expect(div.children.length).to.equal(1);\n    expect(div.children[0].tagName.toLowerCase()).to.equal('i-amphtml-sizer');\n    expect(div.children[0].getAttribute('slot')).to.equal('i-amphtml-svc');\n    expect(div.children[0].children.length).to.equal(1);\n    expect(div.children[0].children[0].tagName.toLowerCase()).to.equal('img');\n    expect(div.children[0].children[0].src).to.equal('data:image/svg+xml;charset=utf-8,<svg height=\"200px\" width=\"100px\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\"/>');\n  });","file":"unit/core/dom/layout/test-layout.js","skipped":false,"dir":"test"},{"name":"layout=fill","suites":[],"updatePoint":{"line":311,"column":17,"index":13831},"line":311,"code":"  it('layout=fill', () => {\n    div.setAttribute('layout', 'fill');\n    expect(applyStaticLayout(div)).to.equal(Layout_Enum.FILL);\n    expect(div.style.width).to.equal('');\n    expect(div.style.height).to.equal('');\n    expect(div).to.have.class('i-amphtml-layout-fill');\n    expect(div).to.have.class('i-amphtml-layout-size-defined');\n    expect(div.children.length).to.equal(0);\n  });","file":"unit/core/dom/layout/test-layout.js","skipped":false,"dir":"test"},{"name":"layout=container","suites":[],"updatePoint":{"line":320,"column":22,"index":14223},"line":320,"code":"  it('layout=container', () => {\n    div.setAttribute('layout', 'container');\n    expect(applyStaticLayout(div)).to.equal(Layout_Enum.CONTAINER);\n    expect(div.style.width).to.equal('');\n    expect(div.style.height).to.equal('');\n    expect(div).to.have.class('i-amphtml-layout-container');\n    expect(div).to.not.have.class('i-amphtml-layout-size-defined');\n    expect(div.children.length).to.equal(0);\n  });","file":"unit/core/dom/layout/test-layout.js","skipped":false,"dir":"test"},{"name":"layout=flex-item","suites":[],"updatePoint":{"line":329,"column":22,"index":14634},"line":329,"code":"  it('layout=flex-item', () => {\n    div.setAttribute('layout', 'flex-item');\n    div.setAttribute('width', 100);\n    div.setAttribute('height', 200);\n    expect(applyStaticLayout(div)).to.equal(Layout_Enum.FLEX_ITEM);\n    expect(div.style.width).to.equal('100px');\n    expect(div.style.height).to.equal('200px');\n    expect(div).to.have.class('i-amphtml-layout-flex-item');\n    expect(div).to.have.class('i-amphtml-layout-size-defined');\n    expect(div.children.length).to.equal(0);\n  });","file":"unit/core/dom/layout/test-layout.js","skipped":false,"dir":"test"},{"name":"layout=fluid - default","suites":[],"updatePoint":{"line":340,"column":28,"index":15130},"line":340,"code":"  it('layout=fluid - default', () => {\n    div.setAttribute('height', 'fluid');\n    const parentDiv = document.createElement('div');\n    parentDiv.appendChild(div);\n    expect(applyStaticLayout(div)).to.equal(Layout_Enum.FLUID);\n    expect(div).to.have.class('i-amphtml-layout-awaiting-size');\n    expect(div.children.length).to.equal(0);\n  });","file":"unit/core/dom/layout/test-layout.js","skipped":false,"dir":"test"},{"name":"layout=fluid - default with width","suites":[],"updatePoint":{"line":348,"column":39,"index":15486},"line":348,"code":"  it('layout=fluid - default with width', () => {\n    div.setAttribute('height', 'fluid');\n    div.setAttribute('width', 300);\n    expect(applyStaticLayout(div)).to.equal(Layout_Enum.FLUID);\n    expect(div).to.have.class('i-amphtml-layout-awaiting-size');\n    expect(div.style.width).to.equal('300px');\n    expect(div.children.length).to.equal(0);\n  });","file":"unit/core/dom/layout/test-layout.js","skipped":false,"dir":"test"},{"name":"layout=unknown","suites":[],"updatePoint":{"line":356,"column":20,"index":15821},"line":356,"code":"  it('layout=unknown', () => {\n    div.setAttribute('layout', 'foo');\n    allowConsoleError(() => {\n      expect(function () {\n        applyStaticLayout(div);\n      }).to.throw(/Invalid \"layout\" value: foo/);\n    });\n  });","file":"unit/core/dom/layout/test-layout.js","skipped":false,"dir":"test"},{"name":"should configure natural dimensions; default layout","suites":[],"updatePoint":{"line":364,"column":57,"index":16081},"line":364,"code":"  it('should configure natural dimensions; default layout', () => {\n    const pixel = document.createElement('amp-pixel');\n    expect(applyStaticLayout(pixel)).to.equal(Layout_Enum.FIXED);\n    expect(pixel.style.width).to.equal('0px');\n    expect(pixel.style.height).to.equal('0px');\n  });","file":"unit/core/dom/layout/test-layout.js","skipped":false,"dir":"test"},{"name":"should configure natural dimensions; default layout; with width","suites":[],"updatePoint":{"line":370,"column":69,"index":16383},"line":370,"code":"  it('should configure natural dimensions; default layout; with width', () => {\n    const pixel = document.createElement('amp-pixel');\n    pixel.setAttribute('width', '11');\n    expect(applyStaticLayout(pixel)).to.equal(Layout_Enum.FIXED);\n    expect(pixel.style.width).to.equal('11px');\n    expect(pixel.style.height).to.equal('0px');\n  });","file":"unit/core/dom/layout/test-layout.js","skipped":false,"dir":"test"},{"name":"should configure natural dimensions; default layout; with height","suites":[],"updatePoint":{"line":377,"column":70,"index":16726},"line":377,"code":"  it('should configure natural dimensions; default layout; with height', () => {\n    const pixel = document.createElement('amp-pixel');\n    pixel.setAttribute('height', '11');\n    expect(applyStaticLayout(pixel)).to.equal(Layout_Enum.FIXED);\n    expect(pixel.style.width).to.equal('0px');\n    expect(pixel.style.height).to.equal('11px');\n  });","file":"unit/core/dom/layout/test-layout.js","skipped":false,"dir":"test"},{"name":"should configure natural dimensions; layout=fixed","suites":[],"updatePoint":{"line":384,"column":55,"index":17055},"line":384,"code":"  it('should configure natural dimensions; layout=fixed', () => {\n    const pixel = document.createElement('amp-pixel');\n    pixel.setAttribute('layout', 'fixed');\n    expect(applyStaticLayout(pixel)).to.equal(Layout_Enum.FIXED);\n    expect(pixel.style.width).to.equal('0px');\n    expect(pixel.style.height).to.equal('0px');\n  });","file":"unit/core/dom/layout/test-layout.js","skipped":false,"dir":"test"},{"name":"should configure natural dimensions; layout=fixed-height","suites":[],"updatePoint":{"line":391,"column":62,"index":17393},"line":391,"code":"  it('should configure natural dimensions; layout=fixed-height', () => {\n    const pixel = document.createElement('amp-pixel');\n    pixel.setAttribute('layout', 'fixed-height');\n    expect(applyStaticLayout(pixel)).to.equal(Layout_Enum.FIXED_HEIGHT);\n    expect(pixel.style.height).to.equal('0px');\n    expect(pixel.style.width).to.equal('');\n  });","file":"unit/core/dom/layout/test-layout.js","skipped":false,"dir":"test"},{"name":"should layout with pixel values","suites":[],"updatePoint":{"line":398,"column":37,"index":17717},"line":398,"code":"  it('should layout with pixel values', () => {\n    const pixel = document.createElement('amp-pixel');\n    pixel.setAttribute('width', '1px');\n    pixel.setAttribute('height', '1px');\n    expect(() => {\n      applyStaticLayout(pixel);\n    }).to.not.throw();\n  });","file":"unit/core/dom/layout/test-layout.js","skipped":false,"dir":"test"},{"name":"should layout with valid with auto width value","suites":[],"updatePoint":{"line":406,"column":52,"index":17996},"line":406,"code":"  it('should layout with valid with auto width value', () => {\n    const pixel = document.createElement('amp-pixel');\n    pixel.setAttribute('width', 'auto');\n    pixel.setAttribute('height', '1px');\n    expect(() => {\n      applyStaticLayout(pixel);\n    }).to.not.throw();\n  });","file":"unit/core/dom/layout/test-layout.js","skipped":false,"dir":"test"},{"name":"should fail invalid width","suites":[],"updatePoint":{"line":414,"column":31,"index":18255},"line":414,"code":"  it('should fail invalid width', () => {\n    const pixel = document.createElement('amp-pixel');\n    // Width=X is invalid.\n    pixel.setAttribute('width', 'X');\n    pixel.setAttribute('height', '1px');\n    allowConsoleError(() => {\n      expect(() => {\n        applyStaticLayout(pixel);\n      }).to.throw(/Invalid \"width\" value: X/);\n    });\n  });","file":"unit/core/dom/layout/test-layout.js","skipped":false,"dir":"test"},{"name":"should fail invalid height","suites":[],"updatePoint":{"line":425,"column":32,"index":18605},"line":425,"code":"  it('should fail invalid height', () => {\n    const pixel = document.createElement('amp-pixel');\n    // Height=X is invalid.\n    pixel.setAttribute('width', '1px');\n    pixel.setAttribute('height', 'X');\n    allowConsoleError(() => {\n      expect(() => {\n        applyStaticLayout(pixel);\n      }).to.throw(/Invalid \"height\" value: X/);\n    });\n  });","file":"unit/core/dom/layout/test-layout.js","skipped":false,"dir":"test"},{"name":"should trust server layout","suites":[],"updatePoint":{"line":436,"column":32,"index":18957},"line":436,"code":"  it('should trust server layout', () => {\n    div.setAttribute('i-amphtml-layout', 'flex-item');\n    div.setAttribute('layout', 'responsive');\n    div.setAttribute('width', 'invalid');\n    div.setAttribute('height', 'invalid');\n    div.className = 'other';\n    div.style.width = '111px';\n    div.style.height = '112px';\n    expect(applyStaticLayout(div)).to.equal(Layout_Enum.FLEX_ITEM);\n    // No other attributes are read or changed.\n    expect(div.style.width).to.equal('111px');\n    expect(div.style.height).to.equal('112px');\n    expect(div.className).to.equal('other');\n    expect(div.style.display).to.equal('');\n    expect(div.children.length).to.equal(0);\n  });","file":"unit/core/dom/layout/test-layout.js","skipped":false,"dir":"test"},{"name":"should read sizer for responsive layout","suites":[],"updatePoint":{"line":452,"column":45,"index":19642},"line":452,"code":"  it('should read sizer for responsive layout', () => {\n    div.setAttribute('i-amphtml-layout', 'responsive');\n    const sizer = document.createElement('i-amphtml-sizer');\n    div.appendChild(sizer);\n    expect(applyStaticLayout(div)).to.equal(Layout_Enum.RESPONSIVE);\n    expect(div.sizerElement).to.equal(sizer);\n    expect(div.sizerElement.getAttribute('slot')).to.equal('i-amphtml-svc');\n  });","file":"unit/core/dom/layout/test-layout.js","skipped":false,"dir":"test"},{"name":"should allow sizer to be missing","suites":[],"updatePoint":{"line":460,"column":38,"index":20034},"line":460,"code":"  it('should allow sizer to be missing', () => {\n    div.setAttribute('i-amphtml-layout', 'responsive');\n    expect(applyStaticLayout(div)).to.equal(Layout_Enum.RESPONSIVE);\n    expect(div.sizerElement).to.be.undefined;\n  });","file":"unit/core/dom/layout/test-layout.js","skipped":false,"dir":"test"},{"name":"should allow sizer to be missing even if other children there","suites":[],"updatePoint":{"line":465,"column":67,"index":20289},"line":465,"code":"  it('should allow sizer to be missing even if other children there', () => {\n    div.setAttribute('i-amphtml-layout', 'responsive');\n    const other = document.createElement('div');\n    div.appendChild(other);\n    expect(applyStaticLayout(div)).to.equal(Layout_Enum.RESPONSIVE);\n    expect(div.sizerElement).to.be.undefined;\n  });","file":"unit/core/dom/layout/test-layout.js","skipped":false,"dir":"test"},{"name":"should fail when server generates invalid layout","suites":[],"updatePoint":{"line":472,"column":54,"index":20608},"line":472,"code":"  it('should fail when server generates invalid layout', () => {\n    div.setAttribute('i-amphtml-layout', 'invalid');\n    allowConsoleError(() => {\n      expect(() => applyStaticLayout(div)).to.throw(/failed/);\n    });\n  });","file":"unit/core/dom/layout/test-layout.js","skipped":false,"dir":"test"},{"name":"should not re-layout cloned content","suites":[],"updatePoint":{"line":478,"column":41,"index":20820},"line":478,"code":"  it('should not re-layout cloned content', () => {\n    div.setAttribute('layout', 'responsive');\n    div.setAttribute('width', 100);\n    div.setAttribute('height', 200);\n    expect(applyStaticLayout(div)).to.equal(Layout_Enum.RESPONSIVE);\n    const clone = div.cloneNode(true);\n    expect(applyStaticLayout(clone)).to.equal(Layout_Enum.RESPONSIVE);\n    expect(div.querySelectorAll('i-amphtml-sizer')).to.have.length(1);\n    expect(clone.querySelectorAll('i-amphtml-sizer')).to.have.length(1);\n  });","file":"unit/core/dom/layout/test-layout.js","skipped":false,"dir":"test"},{"name":"should not allow overflow element to distort a size-defined layout","suites":["overflow"],"updatePoint":{"line":509,"column":74,"index":21907},"line":509,"code":"    it('should not allow overflow element to distort a size-defined layout', () => {\n      element.setAttribute('layout', 'responsive');\n      element.setAttribute('width', 100);\n      element.setAttribute('height', 100);\n      expect(applyStaticLayout(element)).to.equal(Layout_Enum.RESPONSIVE);\n      expect(element.offsetWidth).to.equal(element.offsetHeight);\n      expect(overflow.offsetHeight).to.equal(20);\n      expect(win.getComputedStyle(overflow).position).to.equal('absolute');\n    });","file":"unit/core/dom/layout/test-layout.js","skipped":false,"dir":"test"},{"name":"should allow overflow element to distort container layout","suites":["overflow"],"updatePoint":{"line":518,"column":65,"index":22395},"line":518,"code":"    it('should allow overflow element to distort container layout', () => {\n      element.setAttribute('layout', 'container');\n      overflow.text = 'test';\n      expect(applyStaticLayout(element)).to.equal(Layout_Enum.CONTAINER);\n      expect(element.offsetHeight).to.equal(overflow.offsetHeight);\n      expect(win.getComputedStyle(overflow).position).to.equal('relative');\n    });","file":"unit/core/dom/layout/test-layout.js","skipped":false,"dir":"test"},{"name":"layoutRectLtwh","suites":[],"updatePoint":{"line":3,"column":20,"index":127},"line":3,"code":"  it('layoutRectLtwh', () => {\n    const rect = lr.layoutRectLtwh(1, 2, 3, 4);\n    expect(rect.left).to.equal(1);\n    expect(rect.top).to.equal(2);\n    expect(rect.width).to.equal(3);\n    expect(rect.height).to.equal(4);\n    expect(rect.bottom).to.equal(6);\n    expect(rect.right).to.equal(4);\n  });","file":"unit/core/dom/layout/test-rect.js","skipped":false,"dir":"test"},{"name":"rectsOverlap","suites":[],"updatePoint":{"line":12,"column":18,"index":425},"line":12,"code":"  it('rectsOverlap', () => {\n    const rect1 = lr.layoutRectLtwh(10, 20, 30, 40);\n    const rect2 = lr.layoutRectLtwh(40, 60, 10, 10);\n    const rect3 = lr.layoutRectLtwh(41, 60, 10, 10);\n    expect(lr.rectsOverlap(rect1, rect2)).to.equal(true);\n    expect(lr.rectsOverlap(rect1, rect3)).to.equal(false);\n    expect(lr.rectsOverlap(rect2, rect3)).to.equal(true);\n  });","file":"unit/core/dom/layout/test-rect.js","skipped":false,"dir":"test"},{"name":"expandLayoutRect","suites":[],"updatePoint":{"line":20,"column":22,"index":798},"line":20,"code":"  it('expandLayoutRect', () => {\n    const rect1 = lr.layoutRectLtwh(10, 20, 30, 40);\n    const rect2 = lr.expandLayoutRect(rect1, 2, 3);\n    expect(rect2.left).to.equal(10 - 30 * 2);\n    expect(rect2.right).to.equal(40 + 30 * 2);\n    expect(rect2.width).to.equal(30 + 30 * 4);\n    expect(rect2.top).to.equal(20 - 40 * 3);\n    expect(rect2.bottom).to.equal(60 + 40 * 3);\n    expect(rect2.height).to.equal(40 + 40 * 6);\n  });","file":"unit/core/dom/layout/test-rect.js","skipped":false,"dir":"test"},{"name":"moveLayoutRect","suites":[],"updatePoint":{"line":30,"column":20,"index":1221},"line":30,"code":"  it('moveLayoutRect', () => {\n    const rect1 = lr.layoutRectLtwh(10, 20, 30, 40);\n    const rect2 = lr.moveLayoutRect(rect1, 2, 3);\n    expect(rect2.left).to.equal(rect1.left + 2);\n    expect(rect2.right).to.equal(rect1.right + 2);\n    expect(rect2.width).to.equal(rect1.width);\n    expect(rect2.top).to.equal(rect1.top + 3);\n    expect(rect2.bottom).to.equal(rect1.bottom + 3);\n    expect(rect2.height).to.equal(rect1.height);\n  });","file":"unit/core/dom/layout/test-rect.js","skipped":false,"dir":"test"},{"name":"layoutRectFromDomRect","suites":[],"updatePoint":{"line":40,"column":27,"index":1664},"line":40,"code":"  it('layoutRectFromDomRect', () => {\n    const rect = lr.layoutRectFromDomRect({\n      top: 11,\n      left: 12,\n      width: 111,\n      height: 222\n    });\n    expect(rect.top).to.equal(11);\n    expect(rect.left).to.equal(12);\n    expect(rect.width).to.equal(111);\n    expect(rect.height).to.equal(222);\n    expect(rect.bottom).to.equal(11 + 222);\n    expect(rect.right).to.equal(12 + 111);\n  });","file":"unit/core/dom/layout/test-rect.js","skipped":false,"dir":"test"},{"name":"rectIntersection","suites":[],"updatePoint":{"line":54,"column":22,"index":2057},"line":54,"code":"  it('rectIntersection', () => {\n    const rect1 = lr.layoutRectLtwh(10, 20, 40, 50);\n    const rect2 = lr.layoutRectLtwh(40, 60, 10, 10);\n    const rect3 = lr.layoutRectLtwh(1000, 60, 10, 10);\n    const rect4 = lr.layoutRectLtwh(45, 65, 10, 10);\n    // the LayoutRect array can deal with speical array\n    expect(lr.rectIntersection(null, undefined)).to.be.null;\n    expect(lr.rectIntersection()).to.be.null;\n    expect(lr.rectIntersection(rect1)).to.jsonEqual(rect1);\n    expect(lr.rectIntersection(rect1, rect2)).to.jsonEqual({\n      'left': 40,\n      'top': 60,\n      'width': 10,\n      'height': 10,\n      'bottom': 70,\n      'right': 50,\n      'x': 40,\n      'y': 60\n    });\n    // the layoutRect array can deal with null/undefined input\n    expect(lr.rectIntersection(null, rect1, undefined, rect2)).to.jsonEqual({\n      'left': 40,\n      'top': 60,\n      'width': 10,\n      'height': 10,\n      'bottom': 70,\n      'right': 50,\n      'x': 40,\n      'y': 60\n    });\n    expect(lr.rectIntersection(rect1, rect3)).to.be.null;\n    expect(lr.rectIntersection(rect2, rect3)).to.be.null;\n    expect(lr.rectIntersection(rect1, rect2, rect4)).to.jsonEqual({\n      'left': 45,\n      'top': 65,\n      'width': 5,\n      'height': 5,\n      'bottom': 70,\n      'right': 50,\n      'x': 45,\n      'y': 65\n    });\n    expect(lr.rectIntersection(rect1, rect2, rect3, rect4)).to.be.null;\n  });","file":"unit/core/dom/layout/test-rect.js","skipped":false,"dir":"test"},{"name":"should clone margins change correctly into new object","suites":["cloneLayoutMarginsChangeDef"],"updatePoint":{"line":99,"column":61,"index":3528},"line":99,"code":"    it('should clone margins change correctly into new object', () => {\n      const marginsChange = {\n        top: 1,\n        bottom: 5,\n        left: 4\n      };\n      const marginsChangeClone = lr.cloneLayoutMarginsChangeDef(marginsChange);\n      expect(marginsChangeClone).to.not.equal(marginsChange);\n      expect(marginsChangeClone.top).to.equal(1);\n      expect(marginsChangeClone.bottom).to.equal(5);\n      expect(marginsChangeClone.left).to.equal(4);\n      expect(marginsChangeClone.right).to.be.undefined;\n    });","file":"unit/core/dom/layout/test-rect.js","skipped":false,"dir":"test"},{"name":"should detect changes","suites":["layoutRectSizeEquals"],"updatePoint":{"line":114,"column":29,"index":4067},"line":114,"code":"    it('should detect changes', () => {\n      const from = lr.layoutRectLtwh(10, 20, 1, 1);\n      const to = lr.layoutRectLtwh(10, 20, 40, 50);\n      expect(lr.layoutRectSizeEquals(from, to)).to.be.false;\n    });","file":"unit/core/dom/layout/test-rect.js","skipped":false,"dir":"test"},{"name":"should detect no changes","suites":["layoutRectSizeEquals"],"updatePoint":{"line":119,"column":32,"index":4283},"line":119,"code":"    it('should detect no changes', () => {\n      const from = lr.layoutRectLtwh(10, 20, 1, 1);\n      const to = lr.layoutRectLtwh(10, 20, 1, 1);\n      expect(lr.layoutRectSizeEquals(from, to)).to.be.true;\n    });","file":"unit/core/dom/layout/test-rect.js","skipped":false,"dir":"test"},{"name":"should find margins are not changed when values the same","suites":["areMarginsChanged"],"updatePoint":{"line":126,"column":64,"index":4574},"line":126,"code":"    it('should find margins are not changed when values the same', () => {\n      const margins = {\n        top: 1,\n        right: 2,\n        bottom: 3,\n        left: 4\n      };\n      const changes = {\n        top: 1,\n        right: 2,\n        bottom: 3,\n        left: 4\n      };\n      expect(lr.areMarginsChanged(margins, changes)).to.be.false;\n    });","file":"unit/core/dom/layout/test-rect.js","skipped":false,"dir":"test"},{"name":"should find margins are not changed when all changes undefined","suites":["areMarginsChanged"],"updatePoint":{"line":141,"column":70,"index":4933},"line":141,"code":"    it('should find margins are not changed when all changes undefined', () => {\n      const margins = {\n        top: 1,\n        right: 2,\n        bottom: 3,\n        left: 4\n      };\n      const changes = {};\n      expect(lr.areMarginsChanged(margins, changes)).to.be.false;\n    });","file":"unit/core/dom/layout/test-rect.js","skipped":false,"dir":"test"},{"name":"should find margins to be changed when top different","suites":["areMarginsChanged"],"updatePoint":{"line":151,"column":60,"index":5206},"line":151,"code":"    it('should find margins to be changed when top different', () => {\n      const margins = {\n        top: 1,\n        right: 2,\n        bottom: 3,\n        left: 4\n      };\n      const changes = {\n        top: 5\n      };\n      expect(lr.areMarginsChanged(margins, changes)).to.be.true;\n    });","file":"unit/core/dom/layout/test-rect.js","skipped":false,"dir":"test"},{"name":"should find margins to be changed when right different","suites":["areMarginsChanged"],"updatePoint":{"line":163,"column":62,"index":5502},"line":163,"code":"    it('should find margins to be changed when right different', () => {\n      const margins = {\n        top: 1,\n        right: 2,\n        bottom: 3,\n        left: 4\n      };\n      const changes = {\n        right: 5\n      };\n      expect(lr.areMarginsChanged(margins, changes)).to.be.true;\n    });","file":"unit/core/dom/layout/test-rect.js","skipped":false,"dir":"test"},{"name":"should find margins to be changed when bottom different","suites":["areMarginsChanged"],"updatePoint":{"line":175,"column":63,"index":5801},"line":175,"code":"    it('should find margins to be changed when bottom different', () => {\n      const margins = {\n        top: 1,\n        right: 2,\n        bottom: 3,\n        left: 4\n      };\n      const changes = {\n        bottom: 5\n      };\n      expect(lr.areMarginsChanged(margins, changes)).to.be.true;\n    });","file":"unit/core/dom/layout/test-rect.js","skipped":false,"dir":"test"},{"name":"should find margins to be changed when left different","suites":["areMarginsChanged"],"updatePoint":{"line":187,"column":61,"index":6099},"line":187,"code":"    it('should find margins to be changed when left different', () => {\n      const margins = {\n        top: 1,\n        right: 2,\n        bottom: 3,\n        left: 4\n      };\n      const changes = {\n        left: 5\n      };\n      expect(lr.areMarginsChanged(margins, changes)).to.be.true;\n    });","file":"unit/core/dom/layout/test-rect.js","skipped":false,"dir":"test"},{"name":"should measure content size","suites":["content size"],"updatePoint":{"line":71,"column":35,"index":2063},"line":71,"code":"    it('should measure content size', async () => {\n      const promise = measureContentSize(element);\n      observer.notify([{\n        target: element,\n        contentRect: {\n          width: 101,\n          height: 102\n        }\n      }]);\n      const {\n        height,\n        width\n      } = await promise;\n      expect(width).to.equal(101);\n      expect(height).to.equal(102);\n      expect(observer.elements).to.not.include(element);\n    });","file":"unit/core/dom/layout/test-size-observer.js","skipped":false,"dir":"test"},{"name":"should observe changes","suites":["content size"],"updatePoint":{"line":88,"column":30,"index":2504},"line":88,"code":"    it('should observe changes', async () => {\n      const callbackCaller = createCallbackCaller();\n      observeContentSize(element, callbackCaller);\n\n      // First response.\n      observer.notify([{\n        target: element,\n        contentRect: {\n          width: 101,\n          height: 102\n        }\n      }]);\n      const size1 = await callbackCaller.next();\n      expect(size1.width).to.equal(101);\n      expect(size1.height).to.equal(102);\n\n      // Resize.\n      observer.notify([{\n        target: element,\n        contentRect: {\n          width: 201,\n          height: 102\n        }\n      }]);\n      const size2 = await callbackCaller.next();\n      expect(size2.width).to.equal(201);\n      expect(size2.height).to.equal(102);\n    });","file":"unit/core/dom/layout/test-size-observer.js","skipped":false,"dir":"test"},{"name":"should only observe last change","suites":["content size"],"updatePoint":{"line":116,"column":39,"index":3256},"line":116,"code":"    it('should only observe last change', async () => {\n      const callbackCaller = createCallbackCaller();\n      observeContentSize(element, callbackCaller);\n      observer.notify([{\n        target: element,\n        contentRect: {\n          width: 101,\n          height: 102\n        }\n      }, {\n        target: element,\n        contentRect: {\n          width: 103,\n          height: 102\n        }\n      }]);\n      const size1 = await callbackCaller.next();\n      expect(size1.width).to.equal(103);\n      expect(size1.height).to.equal(102);\n      expect(callbackCaller.isEmpty()).to.be.true;\n    });","file":"unit/core/dom/layout/test-size-observer.js","skipped":false,"dir":"test"},{"name":"should observe multiple callbacks","suites":["content size"],"updatePoint":{"line":137,"column":41,"index":3860},"line":137,"code":"    it('should observe multiple callbacks', async () => {\n      // First callback.\n      const callbackCaller1 = createCallbackCaller();\n      observeContentSize(element, callbackCaller1);\n      observer.notify([{\n        target: element,\n        contentRect: {\n          width: 101,\n          height: 102\n        }\n      }]);\n      const size1 = await callbackCaller1.next();\n      expect(size1.width).to.equal(101);\n      expect(size1.height).to.equal(102);\n\n      // Second callback.\n      const callbackCaller2 = createCallbackCaller();\n      observeContentSize(element, callbackCaller2);\n      const size2 = await callbackCaller2.next();\n      expect(size2.width).to.equal(101);\n      expect(size2.height).to.equal(102);\n    });","file":"unit/core/dom/layout/test-size-observer.js","skipped":false,"dir":"test"},{"name":"should unobserve multiple callbacks","suites":["content size"],"updatePoint":{"line":159,"column":43,"index":4596},"line":159,"code":"    it('should unobserve multiple callbacks', async () => {\n      const callbackCaller1 = createCallbackCaller();\n      const callbackCaller2 = createCallbackCaller();\n      observeContentSize(element, callbackCaller1);\n      observeContentSize(element, callbackCaller2);\n      expect(observer.elements).to.include(element);\n\n      // Unobserve first callback.\n      unobserveContentSize(element, callbackCaller2);\n      expect(observer.elements).to.include(element);\n\n      // Unobserve second callback.\n      unobserveContentSize(element, callbackCaller1);\n      expect(observer.elements).to.not.include(element);\n    });","file":"unit/core/dom/layout/test-size-observer.js","skipped":false,"dir":"test"},{"name":"should measure border size","suites":["border-box size"],"updatePoint":{"line":176,"column":34,"index":5255},"line":176,"code":"    it('should measure border size', async () => {\n      const promise = measureBorderBoxSize(element);\n      observer.notify([{\n        target: element,\n        borderBoxSize: [{\n          inlineSize: 101,\n          blockSize: 102\n        }]\n      }]);\n      const {\n        blockSize,\n        inlineSize\n      } = await promise;\n      expect(inlineSize).to.equal(101);\n      expect(blockSize).to.equal(102);\n      expect(observer.elements).to.not.include(element);\n    });","file":"unit/core/dom/layout/test-size-observer.js","skipped":false,"dir":"test"},{"name":"should fallback to offsetWidth and offsetHeight as a polyfill","suites":["border-box size"],"updatePoint":{"line":193,"column":69,"index":5765},"line":193,"code":"    it('should fallback to offsetWidth and offsetHeight as a polyfill', async () => {\n      env.sandbox.stub(element, 'offsetWidth').value(101);\n      env.sandbox.stub(element, 'offsetHeight').value(102);\n      const promise = measureBorderBoxSize(element);\n      observer.notify([{\n        target: element\n      }]);\n      const {\n        blockSize,\n        inlineSize\n      } = await promise;\n      expect(inlineSize).to.equal(101);\n      expect(blockSize).to.equal(102);\n      expect(observer.elements).to.not.include(element);\n    });","file":"unit/core/dom/layout/test-size-observer.js","skipped":false,"dir":"test"},{"name":"should fallback to offsetWidth and offsetHeight as a polyfill in vertical mode","suites":["border-box size"],"updatePoint":{"line":208,"column":86,"index":6321},"line":208,"code":"    it('should fallback to offsetWidth and offsetHeight as a polyfill in vertical mode', async () => {\n      element.style.writingMode = 'vertical-lr';\n      env.sandbox.stub(element, 'offsetWidth').value(101);\n      env.sandbox.stub(element, 'offsetHeight').value(102);\n      const promise = measureBorderBoxSize(element);\n      observer.notify([{\n        target: element\n      }]);\n      const {\n        blockSize,\n        inlineSize\n      } = await promise;\n      expect(inlineSize).to.equal(102);\n      expect(blockSize).to.equal(101);\n      expect(observer.elements).to.not.include(element);\n    });","file":"unit/core/dom/layout/test-size-observer.js","skipped":false,"dir":"test"},{"name":"should not conflict with content size observers","suites":["border-box size"],"updatePoint":{"line":224,"column":55,"index":6895},"line":224,"code":"    it('should not conflict with content size observers', async () => {\n      const contentSizeCallbackCaller = createCallbackCaller();\n      observeContentSize(element, contentSizeCallbackCaller);\n      const borderBoxSizeCallbackCaller = createCallbackCaller();\n      observeBorderBoxSize(element, borderBoxSizeCallbackCaller);\n      expect(observer.elements).to.include(element);\n      await observer.notify([{\n        target: element,\n        contentRect: {\n          width: 101,\n          height: 102\n        },\n        borderBoxSize: [{\n          inlineSize: 201,\n          blockSize: 202\n        }]\n      }]);\n      const contentSize = await contentSizeCallbackCaller.next();\n      expect(contentSize.width).to.equal(101);\n      expect(contentSize.height).to.equal(102);\n      const borderBoxSize = await borderBoxSizeCallbackCaller.next();\n      expect(borderBoxSize.inlineSize).to.equal(201);\n      expect(borderBoxSize.blockSize).to.equal(202);\n      unobserveContentSize(element, contentSizeCallbackCaller);\n      expect(observer.elements).to.include(element);\n      unobserveBorderBoxSize(element, borderBoxSizeCallbackCaller);\n      expect(observer.elements).to.not.include(element);\n    });","file":"unit/core/dom/layout/test-size-observer.js","skipped":false,"dir":"test"},{"name":"should observe changes","suites":["border-box size"],"updatePoint":{"line":252,"column":30,"index":8075},"line":252,"code":"    it('should observe changes', async () => {\n      const callbackCaller = createCallbackCaller();\n      observeBorderBoxSize(element, callbackCaller);\n\n      // First response.\n      observer.notify([{\n        target: element,\n        borderBoxSize: [{\n          inlineSize: 201,\n          blockSize: 202\n        }]\n      }]);\n      const size1 = await callbackCaller.next();\n      expect(size1.inlineSize).to.equal(201);\n      expect(size1.blockSize).to.equal(202);\n\n      // Resize.\n      observer.notify([{\n        target: element,\n        borderBoxSize: [{\n          inlineSize: 301,\n          blockSize: 202\n        }]\n      }]);\n      const size2 = await callbackCaller.next();\n      expect(size2.inlineSize).to.equal(301);\n      expect(size2.blockSize).to.equal(202);\n    });","file":"unit/core/dom/layout/test-size-observer.js","skipped":false,"dir":"test"},{"name":"should observe multiple callbacks","suites":["border-box size"],"updatePoint":{"line":280,"column":41,"index":8871},"line":280,"code":"    it('should observe multiple callbacks', async () => {\n      // First callback.\n      const callbackCaller1 = createCallbackCaller();\n      observeBorderBoxSize(element, callbackCaller1);\n      observer.notify([{\n        target: element,\n        borderBoxSize: [{\n          inlineSize: 201,\n          blockSize: 202\n        }]\n      }]);\n      const size1 = await callbackCaller1.next();\n      expect(size1.inlineSize).to.equal(201);\n      expect(size1.blockSize).to.equal(202);\n\n      // Second callback.\n      const callbackCaller2 = createCallbackCaller();\n      observeBorderBoxSize(element, callbackCaller2);\n      const size2 = await callbackCaller2.next();\n      expect(size2.inlineSize).to.equal(201);\n      expect(size2.blockSize).to.equal(202);\n    });","file":"unit/core/dom/layout/test-size-observer.js","skipped":false,"dir":"test"},{"name":"should unobserve multiple callbacks","suites":["border-box size"],"updatePoint":{"line":302,"column":43,"index":9639},"line":302,"code":"    it('should unobserve multiple callbacks', async () => {\n      const callbackCaller1 = createCallbackCaller();\n      const callbackCaller2 = createCallbackCaller();\n      observeBorderBoxSize(element, callbackCaller1);\n      observeBorderBoxSize(element, callbackCaller2);\n      expect(observer.elements).to.include(element);\n\n      // Unobserve first callback.\n      unobserveBorderBoxSize(element, callbackCaller2);\n      expect(observer.elements).to.include(element);\n\n      // Unobserve second callback.\n      unobserveBorderBoxSize(element, callbackCaller1);\n      expect(observer.elements).to.not.include(element);\n    });","file":"unit/core/dom/layout/test-size-observer.js","skipped":false,"dir":"test"},{"name":"Uses implicit root.","suites":["createViewportObserver"],"updatePoint":{"line":15,"column":27,"index":470},"line":15,"code":"    it('Uses implicit root.', () => {\n      createViewportObserver(noop, win);\n      expect(ctorSpy).calledWith(noop, {\n        threshold: undefined,\n        root: undefined,\n        rootMargin: undefined\n      });\n    });","file":"unit/core/dom/layout/test-viewport-observer.js","skipped":false,"dir":"test"},{"name":"Pass along threshold argument","suites":["createViewportObserver"],"updatePoint":{"line":23,"column":37,"index":703},"line":23,"code":"    it('Pass along threshold argument', () => {\n      createViewportObserver(noop, win, {\n        threshold: 0.5\n      });\n      expect(ctorSpy).calledWith(noop, {\n        threshold: 0.5,\n        root: undefined,\n        rootMargin: undefined\n      });\n    });","file":"unit/core/dom/layout/test-viewport-observer.js","skipped":false,"dir":"test"},{"name":"Sets document root appropriately","suites":["createViewportObserver"],"updatePoint":{"line":33,"column":40,"index":967},"line":33,"code":"    it('Sets document root appropriately', () => {\n      // Implicit root when not iframed.\n      createViewportObserver(noop, win, {\n        needsRootBounds: true\n      });\n      expect(ctorSpy).calledWith(noop, {\n        threshold: undefined,\n        root: undefined,\n        rootMargin: undefined\n      });\n\n      // Document root when iframed.\n      win.parent = {};\n      createViewportObserver(noop, win, {\n        needsRootBounds: true\n      });\n      expect(ctorSpy).calledWith(noop, {\n        threshold: undefined,\n        root: win.document,\n        rootMargin: undefined\n      });\n    });","file":"unit/core/dom/layout/test-viewport-observer.js","skipped":false,"dir":"test"},{"name":"observed element should have its callback fired each time it enters/exits the viewport.","suites":["Shared viewport observer"],"updatePoint":{"line":98,"column":95,"index":2650},"line":98,"code":"    it('observed element should have its callback fired each time it enters/exits the viewport.', () => {\n      const viewportEvents = [];\n      observeIntersections(el1, entry => viewportEvents.push(entry));\n      toggleViewport(el1, true);\n      toggleViewport(el1, false);\n      expect(viewportEvents[0].target).to.eql(el1);\n      expect(viewportEvents[0].isIntersecting).to.be.true;\n      expect(viewportEvents[1].target).to.eql(el1);\n      expect(viewportEvents[1].isIntersecting).to.be.false;\n    });","file":"unit/core/dom/layout/test-viewport-observer.js","skipped":false,"dir":"test"},{"name":"can independently observe multiple elements","suites":["Shared viewport observer"],"updatePoint":{"line":108,"column":51,"index":3113},"line":108,"code":"    it('can independently observe multiple elements', () => {\n      const el1Events = [];\n      const el2Events = [];\n      observeIntersections(el1, entry => el1Events.push(entry.isIntersecting));\n      observeIntersections(el2, entry => el2Events.push(entry.isIntersecting));\n      toggleViewport(el1, false);\n      toggleViewport(el2, true);\n      toggleViewport(el1, true);\n      expect(el1Events).to.eql([false, true]);\n      expect(el2Events).to.eql([true]);\n    });","file":"unit/core/dom/layout/test-viewport-observer.js","skipped":false,"dir":"test"},{"name":"once unobserved, the callback is no longer fired","suites":["Shared viewport observer"],"updatePoint":{"line":119,"column":56,"index":3591},"line":119,"code":"    it('once unobserved, the callback is no longer fired', () => {\n      const el1Events = [];\n      const unobserveIntersections = observeIntersections(el1, entry => el1Events.push(entry.isIntersecting));\n      toggleViewport(el1, false);\n      unobserveIntersections();\n      toggleViewport(el1, true);\n      toggleViewport(el1, false);\n      expect(el1Events).to.eql([false]);\n    });","file":"unit/core/dom/layout/test-viewport-observer.js","skipped":false,"dir":"test"},{"name":"A quick observe and unobserve pair should not cause an error or fire the callback","suites":["Shared viewport observer"],"updatePoint":{"line":128,"column":89,"index":4012},"line":128,"code":"    it('A quick observe and unobserve pair should not cause an error or fire the callback', () => {\n      const spy = env.sandbox.spy();\n      const unobserveIntersections = observeIntersections(el1, spy);\n      unobserveIntersections();\n      toggleViewport(el1, true);\n      expect(spy).not.called;\n    });","file":"unit/core/dom/layout/test-viewport-observer.js","skipped":false,"dir":"test"},{"name":"can have multiple obsevers for the same element","suites":["Shared viewport observer"],"updatePoint":{"line":135,"column":55,"index":4287},"line":135,"code":"    it('can have multiple obsevers for the same element', () => {\n      let elInObEntries = [];\n      observeIntersections(el1, entry => elInObEntries.push(entry));\n      observeIntersections(el1, entry => elInObEntries.push(entry));\n      toggleViewport(el1, true);\n      expect(elInObEntries).to.have.lengthOf(2);\n      expect(elInObEntries[0].target).to.eql(el1);\n      expect(elInObEntries[0].isIntersecting).to.be.true;\n      expect(elInObEntries[1].target).to.eql(el1);\n      expect(elInObEntries[1].isIntersecting).to.be.true;\n      elInObEntries = [];\n      toggleViewport(el1, false);\n      expect(elInObEntries).to.have.lengthOf(2);\n      expect(elInObEntries[0].isIntersecting).to.be.false;\n      expect(elInObEntries[1].isIntersecting).to.be.false;\n    });","file":"unit/core/dom/layout/test-viewport-observer.js","skipped":false,"dir":"test"},{"name":"can observe and unobserve an element with multiple callbacks","suites":["Shared viewport observer"],"updatePoint":{"line":151,"column":68,"index":5069},"line":151,"code":"    it('can observe and unobserve an element with multiple callbacks', () => {\n      const cb1 = env.sandbox.spy();\n      const cb2 = env.sandbox.spy();\n      const unobserveIntersectionsCb1 = observeIntersections(el1, cb1);\n      const unobserveIntersectionsCb2 = observeIntersections(el1, cb2);\n      toggleViewport(el1, true);\n      expect(cb1).to.be.called;\n      expect(cb2).to.be.called;\n      cb1.resetHistory();\n      cb2.resetHistory();\n      unobserveIntersectionsCb2();\n      toggleViewport(el1, true);\n      expect(cb1).to.be.called;\n      expect(cb2).not.to.be.called;\n      cb1.resetHistory();\n      cb2.resetHistory();\n      unobserveIntersectionsCb1();\n      toggleViewport(el1, true);\n      expect(cb1).not.to.be.called;\n      expect(cb2).not.to.be.called;\n    });","file":"unit/core/dom/layout/test-viewport-observer.js","skipped":false,"dir":"test"},{"name":"calls the chunk cb on every write","suites":["#write"],"updatePoint":{"line":16,"column":41,"index":431},"line":16,"code":"    it('calls the chunk cb on every write', () => {\n      stream.write(`\n        <head>\n          <script async src=\"https://cdn.ampproject.org/v0.js\"></script>\n        </head>\n      `);\n      expect(chunkSpy).calledOnce;\n      const firstChunkDoc = chunkSpy.firstCall.firstArg;\n      const script = firstChunkDoc.querySelector('script');\n      expect(script).to.exist;\n      expect(script.src).to.equal('https://cdn.ampproject.org/v0.js');\n      stream.write(`\n        <body class=\"foo\">\n          <child-one></child-one>\n        </body>\n      `);\n      expect(chunkSpy).calledTwice;\n      const secondChunkDoc = chunkSpy.firstCall.firstArg;\n      expect(secondChunkDoc.body).to.have.class('foo');\n      expect(firstChunkDoc.querySelector('child-one')).to.exist;\n      expect(endSpy).not.called;\n    });","file":"unit/core/dom/stream/test-detached.js","skipped":false,"dir":"test"},{"name":"calls the onEnd cb with full doc when complete","suites":["#close"],"updatePoint":{"line":40,"column":54,"index":1284},"line":40,"code":"    it('calls the onEnd cb with full doc when complete', () => {\n      stream.write(`\n        <head>\n          <script async src=\"https://cdn.ampproject.org/v0.js\"></script>\n        </head>\n      `);\n      expect(endSpy).not.called;\n      stream.write(`\n        <body class=\"foo\">\n          <child-one></child-one>\n        </body>\n      `);\n      expect(endSpy).not.called;\n      stream.close();\n      expect(endSpy).calledOnce;\n      const finalDoc = endSpy.firstCall.firstArg;\n      const script = finalDoc.querySelector('script');\n      expect(script).to.exist;\n      expect(script.src).to.equal('https://cdn.ampproject.org/v0.js');\n      expect(finalDoc.body).to.have.class('foo');\n      expect(finalDoc.querySelector('child-one')).to.exist;\n    });","file":"unit/core/dom/stream/test-detached.js","skipped":false,"dir":"test"},{"name":"throws if write() called after close()","suites":["#close"],"updatePoint":{"line":62,"column":46,"index":2030},"line":62,"code":"    it('throws if write() called after close()', () => {\n      stream.close();\n      allowConsoleError(() => {\n        expect(() => stream.write('<child-one></child-one>')).to.throw('Detached doc already closed.');\n      });\n    });","file":"unit/core/dom/stream/test-detached.js","skipped":false,"dir":"test"},{"name":"decodes response and writes to writer","suites":[],"updatePoint":{"line":31,"column":43,"index":887},"line":31,"code":"  it('decodes response and writes to writer', async () => {\n    let streamController;\n    const encoder = new TextEncoder();\n    const bodyStream = new ReadableStream({\n      start(controller) {\n        streamController = controller;\n        controller.enqueue(encoder.encode(chunk1));\n      }\n    });\n    const mockRes = new Response(bodyStream);\n    streamResponseToWriter(env.win, mockRes, mockWriter);\n    await macroTask();\n    expect(writeSpy).calledOnce;\n    expect(writeSpy).calledWith(chunk1);\n    streamController.enqueue(encoder.encode(chunk2));\n    await macroTask();\n    expect(writeSpy).calledTwice;\n    expect(writeSpy.secondCall).calledWith(chunk2);\n    expect(closeSpy).not.called;\n    streamController.close();\n    expect(closeSpy).not.calledOnce;\n  });","file":"unit/core/dom/stream/test-response.js","skipped":false,"dir":"test"},{"name":"resolves and writes a single chunk when no textEncoder","suites":[],"updatePoint":{"line":53,"column":60,"index":1676},"line":53,"code":"  it('resolves and writes a single chunk when no textEncoder', async () => {\n    let streamController;\n    const encoder = new TextEncoder();\n    const bodyStream = new ReadableStream({\n      start(controller) {\n        streamController = controller;\n        controller.enqueue(encoder.encode(chunk1));\n      }\n    });\n    const mockRes = new Response(bodyStream);\n    env.win.TextDecoder = undefined;\n    streamResponseToWriter(env.win, mockRes, mockWriter);\n    await macroTask();\n    expect(writeSpy).not.called;\n    streamController.enqueue(encoder.encode(chunk2));\n    await macroTask();\n    expect(writeSpy).not.called;\n    expect(closeSpy).not.called;\n    streamController.close();\n    await macroTask();\n    expect(writeSpy).calledWith(chunk1 + chunk2);\n    expect(closeSpy).calledOnce;\n  });","file":"unit/core/dom/stream/test-response.js","skipped":false,"dir":"test"},{"name":"resolves and writes a single chunk when no ReadableStream","suites":[],"updatePoint":{"line":76,"column":63,"index":2480},"line":76,"code":"  it('resolves and writes a single chunk when no ReadableStream', async () => {\n    let streamController;\n    const encoder = new TextEncoder();\n    const bodyStream = new ReadableStream({\n      start(controller) {\n        streamController = controller;\n        controller.enqueue(encoder.encode(chunk1));\n      }\n    });\n    const mockRes = new Response(bodyStream);\n    env.win.ReadableStream = undefined;\n    streamResponseToWriter(env.win, mockRes, mockWriter);\n    await macroTask();\n    expect(writeSpy).not.called;\n    streamController.enqueue(encoder.encode(chunk2));\n    await macroTask();\n    expect(writeSpy).not.called;\n    expect(closeSpy).not.called;\n    streamController.close();\n    await macroTask();\n    expect(writeSpy).calledWith(chunk1 + chunk2);\n    expect(closeSpy).calledOnce;\n  });","file":"unit/core/dom/stream/test-response.js","skipped":false,"dir":"test"},{"name":"handles empty response","suites":[],"updatePoint":{"line":99,"column":28,"index":3252},"line":99,"code":"  it('handles empty response', async () => {\n    const bodyStream = new ReadableStream({\n      start(controller) {\n        controller.close();\n      }\n    });\n    const mockRes = new Response(bodyStream);\n    streamResponseToWriter(env.win, mockRes, mockWriter);\n    await macroTask();\n    expect(writeSpy).not.called;\n    expect(closeSpy).calledOnce;\n  });","file":"unit/core/dom/stream/test-response.js","skipped":false,"dir":"test"},{"name":"resolves to true when response has content","suites":[],"updatePoint":{"line":111,"column":48,"index":3630},"line":111,"code":"  it('resolves to true when response has content', async () => {\n    const mockRes = new Response(chunk1);\n    const hasContent = await streamResponseToWriter(env.win, mockRes, mockWriter);\n    expect(hasContent).to.be.true;\n  });","file":"unit/core/dom/stream/test-response.js","skipped":false,"dir":"test"},{"name":"resolves to false when response has no content","suites":[],"updatePoint":{"line":116,"column":52,"index":3865},"line":116,"code":"  it('resolves to false when response has no content', async () => {\n    const mockRes = new Response('');\n    const hasContent = await streamResponseToWriter(env.win, mockRes, mockWriter);\n    expect(hasContent).to.be.false;\n  });","file":"unit/core/dom/stream/test-response.js","skipped":false,"dir":"test"},{"name":"resolves to true when response has content [fallback]","suites":[],"updatePoint":{"line":121,"column":59,"index":4104},"line":121,"code":"  it('resolves to true when response has content [fallback]', async () => {\n    env.win.TextDecoder = undefined;\n    env.win.ReadableStream = undefined;\n    const mockRes = new Response(chunk1);\n    const hasContent = await streamResponseToWriter(env.win, mockRes, mockWriter);\n    expect(hasContent).to.be.true;\n  });","file":"unit/core/dom/stream/test-response.js","skipped":false,"dir":"test"},{"name":"resolves to false when response has no content [fallback]","suites":[],"updatePoint":{"line":128,"column":63,"index":4427},"line":128,"code":"  it('resolves to false when response has no content [fallback]', async () => {\n    env.win.TextDecoder = undefined;\n    env.win.ReadableStream = undefined;\n    const mockRes = new Response('');\n    const hasContent = await streamResponseToWriter(env.win, mockRes, mockWriter);\n    expect(hasContent).to.be.false;\n  });","file":"unit/core/dom/stream/test-response.js","skipped":false,"dir":"test"},{"name":"should escape","suites":["escapeCssSelectorIdent"],"updatePoint":{"line":4,"column":21,"index":210},"line":4,"code":"    it('should escape', () => {\n      expect(escapeCssSelectorIdent('a b')).to.equal('a\\\\ b');\n    });","file":"unit/core/dom/test-css-selectors.js","skipped":false,"dir":"test"},{"name":"concats simple","suites":["scopeSelector"],"updatePoint":{"line":9,"column":22,"index":356},"line":9,"code":"    it('concats simple', () => {\n      expect(prependSelectorsWith('div', '.i-amphtml-scoped')).to.equal('.i-amphtml-scoped div');\n    });","file":"unit/core/dom/test-css-selectors.js","skipped":false,"dir":"test"},{"name":"concats multiple selectors (2)","suites":["scopeSelector"],"updatePoint":{"line":12,"column":38,"index":511},"line":12,"code":"    it('concats multiple selectors (2)', () => {\n      expect(prependSelectorsWith('div,ul', ':scope')).to.equal(':scope div,:scope ul');\n    });","file":"unit/core/dom/test-css-selectors.js","skipped":false,"dir":"test"},{"name":"concats multiple selectors (4)","suites":["scopeSelector"],"updatePoint":{"line":15,"column":38,"index":657},"line":15,"code":"    it('concats multiple selectors (4)', () => {\n      expect(prependSelectorsWith('div,ul,ol,section', 'div >')).to.equal('div > div,div > ul,div > ol,div > section');\n    });","file":"unit/core/dom/test-css-selectors.js","skipped":false,"dir":"test"},{"name":"should remove all children","suites":[],"updatePoint":{"line":11,"column":32,"index":504},"line":11,"code":"  it('should remove all children', () => {\n    const element = document.createElement('div');\n    element.appendChild(document.createElement('div'));\n    element.appendChild(document.createTextNode('ABC'));\n    expect(element.children.length).to.equal(1);\n    expect(element.firstChild).to.not.equal(null);\n    expect(element.textContent).to.equal('ABC');\n    dom.removeChildren(element);\n    expect(element.children.length).to.equal(0);\n    expect(element.firstChild).to.equal(null);\n    expect(element.textContent).to.equal('');\n  });","file":"unit/core/dom/test-dom.js","skipped":false,"dir":"test"},{"name":"should copy all children","suites":[],"updatePoint":{"line":23,"column":30,"index":1039},"line":23,"code":"  it('should copy all children', () => {\n    const element = document.createElement('div');\n    element.appendChild(document.createElement('div'));\n    element.appendChild(document.createTextNode('ABC'));\n    const other = document.createElement('div');\n    dom.copyChildren(element, other);\n    expect(element.children.length).to.equal(1);\n    expect(element.firstChild).to.not.equal(null);\n    expect(element.textContent).to.equal('ABC');\n    expect(other.children.length).to.equal(1);\n    expect(other.firstChild).to.not.equal(null);\n    expect(other.firstChild.tagName).to.equal('DIV');\n    expect(other.textContent).to.equal('ABC');\n  });","file":"unit/core/dom/test-dom.js","skipped":false,"dir":"test"},{"name":"isConnectedNode","suites":[],"updatePoint":{"line":37,"column":21,"index":1674},"line":37,"code":"  it('isConnectedNode', () => {\n    expect(dom.isConnectedNode(document)).to.be.true;\n    const a = document.createElement('div');\n    expect(dom.isConnectedNode(a)).to.be.false;\n    const b = document.createElement('div');\n    b.appendChild(a);\n    document.body.appendChild(b);\n    expect(dom.isConnectedNode(a)).to.be.true;\n    const shadow = a.attachShadow({\n      mode: 'open'\n    });\n    const c = document.createElement('div');\n    shadow.appendChild(c);\n    expect(dom.isConnectedNode(c)).to.be.true;\n    document.body.removeChild(b);\n    expect(dom.isConnectedNode(c)).to.be.false;\n  });","file":"unit/core/dom/test-dom.js","skipped":false,"dir":"test"},{"name":"isConnectedNode (no Node.p.isConnected)","suites":[],"updatePoint":{"line":54,"column":45,"index":2295},"line":54,"code":"  it('isConnectedNode (no Node.p.isConnected)', () => {\n    env.sandbox.deleteProperty(Node.prototype, 'isConnected');\n    expect(dom.isConnectedNode(document)).to.be.true;\n    const a = document.createElement('div');\n    expect(dom.isConnectedNode(a)).to.be.false;\n    const b = document.createElement('div');\n    b.appendChild(a);\n    document.body.appendChild(b);\n    expect(dom.isConnectedNode(a)).to.be.true;\n    const shadow = a.attachShadow({\n      mode: 'open'\n    });\n    const c = document.createElement('div');\n    shadow.appendChild(c);\n    expect(dom.isConnectedNode(c)).to.be.true;\n    document.body.removeChild(b);\n    expect(dom.isConnectedNode(c)).to.be.false;\n  });","file":"unit/core/dom/test-dom.js","skipped":false,"dir":"test"},{"name":"rootNodeFor","suites":[],"updatePoint":{"line":72,"column":17,"index":2951},"line":72,"code":"  it('rootNodeFor', () => {\n    const a = document.createElement('div');\n    expect(dom.rootNodeFor(a)).to.equal(a);\n    const b = document.createElement('div');\n    a.appendChild(b);\n    expect(dom.rootNodeFor(b)).to.equal(a);\n    const c = document.createElement('div');\n    b.appendChild(c);\n    expect(dom.rootNodeFor(c)).to.equal(a);\n  });","file":"unit/core/dom/test-dom.js","skipped":false,"dir":"test"},{"name":"rootNodeFor (no Node.p.getRootNode)","suites":[],"updatePoint":{"line":82,"column":41,"index":3320},"line":82,"code":"  it('rootNodeFor (no Node.p.getRootNode)', () => {\n    env.sandbox.deleteProperty(Node.prototype, 'getRootNode');\n    const a = document.createElement('div');\n    expect(dom.rootNodeFor(a)).to.equal(a);\n    const b = document.createElement('div');\n    a.appendChild(b);\n    expect(dom.rootNodeFor(b)).to.equal(a);\n    const c = document.createElement('div');\n    b.appendChild(c);\n    expect(dom.rootNodeFor(c)).to.equal(a);\n    const polyfill = document.createElement('i-amphtml-shadow-root');\n    const e = document.createElement('div');\n    polyfill.appendChild(e);\n    a.appendChild(polyfill);\n    expect(dom.rootNodeFor(e)).to.equal(polyfill);\n  });","file":"unit/core/dom/test-dom.js","skipped":false,"dir":"test"},{"name":"should yield false for non-nodes","suites":["isShadowRoot"],"updatePoint":{"line":99,"column":40,"index":4010},"line":99,"code":"    it('should yield false for non-nodes', () => {\n      expect(dom.isShadowRoot(null)).to.be.false;\n      expect(dom.isShadowRoot(undefined)).to.be.false;\n      expect(dom.isShadowRoot('')).to.be.false;\n      expect(dom.isShadowRoot(11)).to.be.false;\n    });","file":"unit/core/dom/test-dom.js","skipped":false,"dir":"test"},{"name":"should yield false for other types of nodes","suites":["isShadowRoot"],"updatePoint":{"line":105,"column":51,"index":4281},"line":105,"code":"    it('should yield false for other types of nodes', () => {\n      expect(dom.isShadowRoot(document.createElement('div'))).to.be.false;\n      expect(dom.isShadowRoot(document.createTextNode('abc'))).to.be.false;\n    });","file":"unit/core/dom/test-dom.js","skipped":false,"dir":"test"},{"name":"should yield true for natively-supported createShadowRoot API","suites":["isShadowRoot"],"updatePoint":{"line":109,"column":69,"index":4520},"line":109,"code":"    it('should yield true for natively-supported createShadowRoot API', () => {\n      const element = document.createElement('div');\n      if (element.createShadowRoot) {\n        const shadowRoot = element.createShadowRoot();\n        expect(dom.isShadowRoot(shadowRoot)).to.be.true;\n      }\n    });","file":"unit/core/dom/test-dom.js","skipped":false,"dir":"test"},{"name":"should yield true for natively-supported attachShadow API","suites":["isShadowRoot"],"updatePoint":{"line":116,"column":65,"index":4815},"line":116,"code":"    it('should yield true for natively-supported attachShadow API', () => {\n      const element = document.createElement('div');\n      if (element.attachShadow) {\n        const shadowRoot = element.attachShadow({\n          mode: 'open'\n        });\n        expect(dom.isShadowRoot(shadowRoot)).to.be.true;\n      }\n    });","file":"unit/core/dom/test-dom.js","skipped":false,"dir":"test"},{"name":"should yield false for document-fragment non-shadow-root node","suites":["isShadowRoot"],"updatePoint":{"line":125,"column":69,"index":5140},"line":125,"code":"    it('should yield false for document-fragment non-shadow-root node', () => {\n      const fragment = document.createDocumentFragment();\n      expect(dom.isShadowRoot(fragment)).to.be.false;\n    });","file":"unit/core/dom/test-dom.js","skipped":false,"dir":"test"},{"name":"should yield true for polyfill","suites":["isShadowRoot"],"updatePoint":{"line":129,"column":38,"index":5309},"line":129,"code":"    it('should yield true for polyfill', () => {\n      expect(dom.isShadowRoot(document.createElement('i-amphtml-shadow-root'))).to.be.true;\n    });","file":"unit/core/dom/test-dom.js","skipped":false,"dir":"test"},{"name":"iterateCursor should loop through every element in a NodeList","suites":["isShadowRoot"],"updatePoint":{"line":133,"column":67,"index":5493},"line":133,"code":"  it('iterateCursor should loop through every element in a NodeList', () => {\n    const fragment = document.createDocumentFragment();\n    [0, 1, 2].forEach(() => fragment.appendChild(document.createElement('i')));\n    const iSpy = env.sandbox.spy();\n    dom.iterateCursor(fragment.querySelectorAll('i'), iSpy);\n    expect(iSpy).to.be.calledThrice;\n    const bSpy = env.sandbox.spy();\n    dom.iterateCursor(fragment.querySelectorAll('b'), bSpy);\n    expect(bSpy).to.have.not.been.called;\n  });","file":"unit/core/dom/test-dom.js","skipped":false,"dir":"test"},{"name":"iterateCursor should allow null elements in a list","suites":["isShadowRoot"],"updatePoint":{"line":143,"column":56,"index":5975},"line":143,"code":"  it('iterateCursor should allow null elements in a list', () => {\n    const list = ['wow', null, 'cool'];\n    const spy = env.sandbox.spy();\n    dom.iterateCursor(list, spy);\n    expect(spy).to.be.calledThrice;\n  });","file":"unit/core/dom/test-dom.js","skipped":false,"dir":"test"},{"name":"should immediately return if child is available","suites":["waitFor"],"updatePoint":{"line":159,"column":55,"index":6444},"line":159,"code":"    it('should immediately return if child is available', () => {\n      parent.appendChild(child);\n      const spy = env.sandbox.spy();\n      dom.waitForChild(parent, contains, spy);\n      expect(spy).to.be.calledOnce;\n    });","file":"unit/core/dom/test-dom.js","skipped":false,"dir":"test"},{"name":"should wait until child is available","suites":["waitFor"],"updatePoint":{"line":165,"column":44,"index":6660},"line":165,"code":"    it('should wait until child is available', () => {\n      const spy = env.sandbox.spy();\n      dom.waitForChild(parent, contains, spy);\n      expect(spy).to.have.not.been.called;\n      return new Promise(resolve => {\n        const interval = setInterval(() => {\n          if (spy.callCount > 0) {\n            clearInterval(interval);\n            resolve();\n          }\n        }, 10);\n        parent.appendChild(child);\n      }).then(() => {\n        expect(spy).to.be.calledOnce;\n      });\n    });","file":"unit/core/dom/test-dom.js","skipped":false,"dir":"test"},{"name":"should prefer MutationObserver and disconnect when done","suites":["waitFor"],"updatePoint":{"line":181,"column":63,"index":7180},"line":181,"code":"    it('should prefer MutationObserver and disconnect when done', () => {\n      let mutationCallback;\n      const mutationObserver = {\n        observe: env.sandbox.spy(),\n        disconnect: env.sandbox.spy()\n      };\n      const parent = {\n        ownerDocument: {\n          defaultView: {\n            MutationObserver: callback => {\n              mutationCallback = callback;\n              return mutationObserver;\n            }\n          }\n        }\n      };\n      let checkFuncValue = false;\n      const checkFunc = () => checkFuncValue;\n      const spy = env.sandbox.spy();\n      dom.waitForChild(parent, checkFunc, spy);\n      expect(spy).to.have.not.been.called;\n      expect(mutationObserver.observe).to.be.calledOnce;\n      expect(mutationObserver.observe.firstCall.args[0]).to.equal(parent);\n      expect(mutationObserver.observe.firstCall.args[1]).to.deep.equal({\n        childList: true\n      });\n      expect(mutationCallback).to.exist;\n\n      // False callback.\n      mutationCallback();\n      expect(spy).to.have.not.been.called;\n      expect(mutationObserver.disconnect).to.have.not.been.called;\n\n      // True callback.\n      checkFuncValue = true;\n      mutationCallback();\n      expect(spy).to.be.calledOnce;\n      expect(mutationObserver.disconnect).to.be.calledOnce;\n    });","file":"unit/core/dom/test-dom.js","skipped":false,"dir":"test"},{"name":"should fallback to polling without MutationObserver","suites":["waitFor"],"updatePoint":{"line":220,"column":59,"index":8472},"line":220,"code":"    it('should fallback to polling without MutationObserver', () => {\n      let intervalCallback;\n      const win = {\n        setInterval: callback => {\n          intervalCallback = callback;\n          return 123;\n        },\n        clearInterval: env.sandbox.spy()\n      };\n      const parent = {\n        ownerDocument: {\n          defaultView: win\n        }\n      };\n      let checkFuncValue = false;\n      const checkFunc = () => checkFuncValue;\n      const spy = env.sandbox.spy();\n      dom.waitForChild(parent, checkFunc, spy);\n      expect(spy).to.have.not.been.called;\n      expect(intervalCallback).to.exist;\n\n      // False callback.\n      intervalCallback();\n      expect(spy).to.have.not.been.called;\n      expect(win.clearInterval).to.have.not.been.called;\n\n      // True callback.\n      checkFuncValue = true;\n      intervalCallback();\n      expect(spy).to.be.calledOnce;\n      expect(win.clearInterval).to.be.calledOnce;\n    });","file":"unit/core/dom/test-dom.js","skipped":false,"dir":"test"},{"name":"should wait for body","suites":["waitFor"],"updatePoint":{"line":252,"column":28,"index":9385},"line":252,"code":"    it('should wait for body', () => {\n      return dom.waitForBodyOpenPromise(document).then(() => {\n        expect(document.body).to.exist;\n      });\n    });","file":"unit/core/dom/test-dom.js","skipped":false,"dir":"test"},{"name":"should wait for body even if doc is complete","suites":["waitFor"],"updatePoint":{"line":257,"column":52,"index":9569},"line":257,"code":"    it('should wait for body even if doc is complete', () => {\n      return new Promise((resolve, reject) => {\n        const doc = {\n          readyState: 'complete',\n          body: null,\n          documentElement: {\n            ownerDocument: {\n              defaultView: {\n                setInterval() {\n                  return window.setInterval.apply(window, arguments);\n                },\n                clearInterval() {\n                  return window.clearInterval.apply(window, arguments);\n                }\n              }\n            }\n          }\n        };\n        setTimeout(() => {\n          doc.body = {};\n        }, 50);\n        dom.waitForBodyOpen(doc, () => {\n          try {\n            expect(doc.body).to.exist;\n            resolve();\n          } catch (e) {\n            reject(new Error(\"body doesn't exist\"));\n          }\n        });\n      });\n    });","file":"unit/core/dom/test-dom.js","skipped":false,"dir":"test"},{"name":"should yield body asap even if doc is not complete","suites":["waitFor"],"updatePoint":{"line":288,"column":58,"index":10455},"line":288,"code":"    it('should yield body asap even if doc is not complete', () => {\n      return new Promise((resolve, reject) => {\n        const doc = {\n          readyState: 'loading',\n          body: null,\n          documentElement: {\n            ownerDocument: {\n              defaultView: {\n                setInterval() {\n                  return window.setInterval.apply(window, arguments);\n                },\n                clearInterval() {\n                  return window.clearInterval.apply(window, arguments);\n                }\n              }\n            }\n          }\n        };\n        setTimeout(() => {\n          doc.body = {};\n        }, 50);\n        dom.waitForBodyOpen(doc, () => {\n          try {\n            expect(doc.body).to.exist;\n            resolve();\n          } catch (e) {\n            reject(new Error(\"body doesn't exist\"));\n          }\n        });\n      });\n    });","file":"unit/core/dom/test-dom.js","skipped":false,"dir":"test"},{"name":"should return key-value for data-param- attributes","suites":["getDataParamsFromAttributes"],"updatePoint":{"line":321,"column":58,"index":11396},"line":321,"code":"    it('should return key-value for data-param- attributes', () => {\n      const element = document.createElement('element');\n      element.setAttribute('attr1', '1');\n      element.setAttribute('data-param-hello', '2');\n      element.setAttribute('data-param-from-the-other-side', '3');\n      const params = dom.getDataParamsFromAttributes(element);\n      expect(params.hello).to.be.equal('2');\n      expect(params.fromTheOtherSide).to.be.equal('3');\n      expect(params.attr1).to.be.undefined;\n    });","file":"unit/core/dom/test-dom.js","skipped":false,"dir":"test"},{"name":"should return key-value for custom data attributes","suites":["getDataParamsFromAttributes"],"updatePoint":{"line":331,"column":58,"index":11900},"line":331,"code":"    it('should return key-value for custom data attributes', () => {\n      const element = document.createElement('element');\n      element.setAttribute('data-vars-event-name', 'click');\n      const params = dom.getDataParamsFromAttributes(element, null, /^vars(.+)/);\n      expect(params.eventName).to.be.equal('click');\n    });","file":"unit/core/dom/test-dom.js","skipped":false,"dir":"test"},{"name":"should return true when the element has a nextSibling","suites":["hasNextNodeInDocumentOrder"],"updatePoint":{"line":339,"column":61,"index":12288},"line":339,"code":"    it('should return true when the element has a nextSibling', () => {\n      const element = document.createElement('div');\n      const parent = document.createElement('div');\n      const sibling = document.createElement('div');\n      expect(dom.hasNextNodeInDocumentOrder(element)).to.be.false;\n      parent.appendChild(element);\n      expect(dom.hasNextNodeInDocumentOrder(element)).to.be.false;\n      parent.appendChild(sibling);\n      expect(dom.hasNextNodeInDocumentOrder(element)).to.be.true;\n    });","file":"unit/core/dom/test-dom.js","skipped":false,"dir":"test"},{"name":"should return true when element ancestor has nextSibling","suites":["hasNextNodeInDocumentOrder"],"updatePoint":{"line":349,"column":64,"index":12799},"line":349,"code":"    it('should return true when element ancestor has nextSibling', () => {\n      const element = document.createElement('div');\n      const parent = document.createElement('div');\n      const uncle = document.createElement('div');\n      const ancestor = document.createElement('div');\n      expect(dom.hasNextNodeInDocumentOrder(element)).to.be.false;\n      ancestor.appendChild(parent);\n      ancestor.appendChild(uncle);\n      parent.appendChild(element);\n      expect(dom.hasNextNodeInDocumentOrder(element)).to.be.true;\n    });","file":"unit/core/dom/test-dom.js","skipped":false,"dir":"test"},{"name":"should return false when ancestor with sibling with stop node","suites":["hasNextNodeInDocumentOrder"],"updatePoint":{"line":360,"column":69,"index":13336},"line":360,"code":"    it('should return false when ancestor with sibling with stop node', () => {\n      const element = document.createElement('div');\n      const parent = document.createElement('div');\n      const uncle = document.createElement('div');\n      const ancestor = document.createElement('div');\n      ancestor.appendChild(parent);\n      ancestor.appendChild(uncle);\n      parent.appendChild(element);\n      expect(dom.hasNextNodeInDocumentOrder(element)).to.be.true;\n      expect(dom.hasNextNodeInDocumentOrder(element, parent)).to.be.false;\n    });","file":"unit/core/dom/test-dom.js","skipped":false,"dir":"test"},{"name":"should return true for <script type=\"application/json\">","suites":["isJsonScriptTag"],"updatePoint":{"line":373,"column":63,"index":13919},"line":373,"code":"    it('should return true for <script type=\"application/json\">', () => {\n      const element = document.createElement('script');\n      element.setAttribute('type', 'application/json');\n      expect(dom.isJsonScriptTag(element)).to.be.true;\n    });","file":"unit/core/dom/test-dom.js","skipped":false,"dir":"test"},{"name":"should return true for <script type=\"aPPLication/jSon\">","suites":["isJsonScriptTag"],"updatePoint":{"line":378,"column":63,"index":14168},"line":378,"code":"    it('should return true for <script type=\"aPPLication/jSon\">', () => {\n      const element = document.createElement('script');\n      element.setAttribute('type', 'aPPLication/jSon');\n      expect(dom.isJsonScriptTag(element)).to.be.true;\n    });","file":"unit/core/dom/test-dom.js","skipped":false,"dir":"test"},{"name":"should return false for <script type=\"text/javascript\">","suites":["isJsonScriptTag"],"updatePoint":{"line":383,"column":63,"index":14417},"line":383,"code":"    it('should return false for <script type=\"text/javascript\">', () => {\n      const element = document.createElement('script');\n      element.setAttribute('type', 'text/javascript');\n      expect(dom.isJsonScriptTag(element)).to.be.false;\n    });","file":"unit/core/dom/test-dom.js","skipped":false,"dir":"test"},{"name":"should return false for <div type=\"application/json\">","suites":["isJsonScriptTag"],"updatePoint":{"line":388,"column":61,"index":14664},"line":388,"code":"    it('should return false for <div type=\"application/json\">', () => {\n      const element = document.createElement('div');\n      element.setAttribute('type', 'application/json');\n      expect(dom.isJsonScriptTag(element)).to.be.false;\n    });","file":"unit/core/dom/test-dom.js","skipped":false,"dir":"test"},{"name":"return json config","suites":["getChildJsonConfig"],"updatePoint":{"line":405,"column":26,"index":15216},"line":405,"code":"    it('return json config', () => {\n      element.appendChild(script);\n      expect(dom.getChildJsonConfig(element)).to.deep.equal({\n        'a': {\n          'b': 'c'\n        }\n      });\n    });","file":"unit/core/dom/test-dom.js","skipped":false,"dir":"test"},{"name":"throw if not one script","suites":["getChildJsonConfig"],"updatePoint":{"line":413,"column":31,"index":15417},"line":413,"code":"    it('throw if not one script', () => {\n      expect(() => dom.getChildJsonConfig(element)).to.throw('Found 0 <script> children. Expected 1');\n      element.appendChild(script);\n      const script2 = document.createElement('script');\n      element.appendChild(script2);\n      expect(() => dom.getChildJsonConfig(element)).to.throw('Found 2 <script> children. Expected 1');\n    });","file":"unit/core/dom/test-dom.js","skipped":false,"dir":"test"},{"name":"throw if type is not application/json","suites":["getChildJsonConfig"],"updatePoint":{"line":420,"column":45,"index":15814},"line":420,"code":"    it('throw if type is not application/json', () => {\n      script.setAttribute('type', '');\n      element.appendChild(script);\n      expect(() => dom.getChildJsonConfig(element)).to.throw('<script> child must have type=\"application/json\"');\n    });","file":"unit/core/dom/test-dom.js","skipped":false,"dir":"test"},{"name":"throw if cannot parse json","suites":["getChildJsonConfig"],"updatePoint":{"line":425,"column":34,"index":16055},"line":425,"code":"    it('throw if cannot parse json', () => {\n      const invalidText = '{\"a\":{\"b\": \"c\",}}';\n      script.textContent = invalidText;\n      element.appendChild(script);\n      expect(() => dom.getChildJsonConfig(element)).to.throw('Failed to parse <script> contents. Is it valid JSON?');\n    });","file":"unit/core/dom/test-dom.js","skipped":false,"dir":"test"},{"name":"should tolerate empty string","suites":["escapeHtml"],"updatePoint":{"line":433,"column":36,"index":16389},"line":433,"code":"    it('should tolerate empty string', () => {\n      expect(dom.escapeHtml('')).to.equal('');\n    });","file":"unit/core/dom/test-dom.js","skipped":false,"dir":"test"},{"name":"should ignore non-escapes","suites":["escapeHtml"],"updatePoint":{"line":436,"column":33,"index":16488},"line":436,"code":"    it('should ignore non-escapes', () => {\n      expect(dom.escapeHtml('abc')).to.equal('abc');\n    });","file":"unit/core/dom/test-dom.js","skipped":false,"dir":"test"},{"name":"should subsctitute escapes","suites":["escapeHtml"],"updatePoint":{"line":439,"column":34,"index":16594},"line":439,"code":"    it('should subsctitute escapes', () => {\n      expect(dom.escapeHtml('a<b>&c\"d\\'e`f')).to.equal('a&lt;b&gt;&amp;c&quot;d&#x27;e&#x60;f');\n    });","file":"unit/core/dom/test-dom.js","skipped":false,"dir":"test"},{"name":"should call focus on the element","suites":["tryFocus"],"updatePoint":{"line":444,"column":40,"index":16787},"line":444,"code":"    it('should call focus on the element', () => {\n      const element = {\n        focus() {}\n      };\n      const focusSpy = env.sandbox.spy(element, 'focus');\n      dom.tryFocus(element);\n      expect(focusSpy).to.have.been.called;\n    });","file":"unit/core/dom/test-dom.js","skipped":false,"dir":"test"},{"name":"should not throw exception if element focus throws exception","suites":["tryFocus"],"updatePoint":{"line":452,"column":68,"index":17057},"line":452,"code":"    it('should not throw exception if element focus throws exception', () => {\n      const element = {\n        focus() {\n          throw new Error('Cannot focus');\n        }\n      };\n      const focusSpy = env.sandbox.spy(element, 'focus');\n      expect(() => dom.tryFocus(element)).to.not.throw();\n      expect(focusSpy).to.have.been.called;\n    });","file":"unit/core/dom/test-dom.js","skipped":false,"dir":"test"},{"name":"finds element by id","suites":["matches"],"updatePoint":{"line":484,"column":27,"index":18041},"line":484,"code":"    it('finds element by id', () => {\n      expect(matches(ampEl, '#ampEl')).to.be.true;\n      [div, img1, iframe].map(el => {\n        expect(matches(el, '#ampEl')).to.be.false;\n      });\n    });","file":"unit/core/dom/test-dom.js","skipped":false,"dir":"test"},{"name":"finds element by tagname","suites":["matches"],"updatePoint":{"line":490,"column":32,"index":18242},"line":490,"code":"    it('finds element by tagname', () => {\n      expect(matches(div, 'div')).to.be.true;\n      [ampEl, img1, iframe].map(el => {\n        expect(matches(el, 'div')).to.be.false;\n      });\n    });","file":"unit/core/dom/test-dom.js","skipped":false,"dir":"test"},{"name":"isEnabled","suites":["matches"],"updatePoint":{"line":497,"column":15,"index":18426},"line":497,"code":"  it('isEnabled', () => {\n    expect(dom.isEnabled(document)).to.be.true;\n    const a = document.createElement('button');\n    expect(dom.isEnabled(a)).to.be.true;\n    a.disabled = true;\n    expect(dom.isEnabled(a)).to.be.false;\n    a.disabled = false;\n    expect(dom.isEnabled(a)).to.be.true;\n    const b = document.createElement('fieldset');\n    b.appendChild(a);\n    expect(dom.isEnabled(a)).to.be.true;\n    b.disabled = true;\n    expect(dom.isEnabled(a)).to.be.false;\n    b.removeChild(a);\n    const c = document.createElement('legend');\n    c.appendChild(a);\n    b.appendChild(c);\n    expect(dom.isEnabled(a)).to.be.true;\n  });","file":"unit/core/dom/test-dom.js","skipped":false,"dir":"test"},{"name":"should implement containsNotSelf","suites":["matches"],"updatePoint":{"line":534,"column":38,"index":20090},"line":534,"code":"  it('should implement containsNotSelf', () => {\n    const parent = document.createElement('div');\n    const child = document.createElement('div');\n    const uncle = document.createElement('div');\n    const grandparent = document.createElement('div');\n    grandparent.appendChild(parent);\n    grandparent.appendChild(uncle);\n    parent.appendChild(child);\n    expect(dom.containsNotSelf(grandparent, grandparent)).to.be.false;\n    expect(dom.containsNotSelf(grandparent, parent)).to.be.true;\n    expect(dom.containsNotSelf(grandparent, uncle)).to.be.true;\n    expect(dom.containsNotSelf(grandparent, child)).to.be.true;\n    expect(dom.containsNotSelf(parent, parent)).to.be.false;\n    expect(dom.containsNotSelf(parent, uncle)).to.be.false;\n    expect(dom.containsNotSelf(parent, grandparent)).to.be.false;\n    expect(dom.containsNotSelf(parent, child)).to.be.true;\n  });","file":"unit/core/dom/test-dom.js","skipped":false,"dir":"test"},{"name":"should sort elements by dom order","suites":["domOrderComparator"],"updatePoint":{"line":552,"column":41,"index":21006},"line":552,"code":"    it('should sort elements by dom order', () => {\n      //\n      // <div id='elem1'>\n      //   <div id='elem2'>\n      //      <div id='elem3'>\n      //   <div id='elem4'>\n      //\n      const elem1 = document.createElement('div');\n      const elem2 = document.createElement('div');\n      const elem3 = document.createElement('div');\n      const elem4 = document.createElement('div');\n      elem1.appendChild(elem2);\n      elem2.appendChild(elem3);\n      elem1.appendChild(elem4);\n      expect(dom.domOrderComparator(elem1, elem1)).to.equal(0);\n      expect(dom.domOrderComparator(elem1, elem2)).to.equal(-1);\n      expect(dom.domOrderComparator(elem1, elem3)).to.equal(-1);\n      expect(dom.domOrderComparator(elem1, elem4)).to.equal(-1);\n      expect(dom.domOrderComparator(elem2, elem1)).to.equal(1);\n      expect(dom.domOrderComparator(elem2, elem2)).to.equal(0);\n      expect(dom.domOrderComparator(elem2, elem3)).to.equal(-1);\n      expect(dom.domOrderComparator(elem2, elem4)).to.equal(-1);\n      expect(dom.domOrderComparator(elem3, elem1)).to.equal(1);\n      expect(dom.domOrderComparator(elem3, elem2)).to.equal(1);\n      expect(dom.domOrderComparator(elem3, elem3)).to.equal(0);\n      expect(dom.domOrderComparator(elem3, elem4)).to.equal(-1);\n      expect(dom.domOrderComparator(elem4, elem1)).to.equal(1);\n      expect(dom.domOrderComparator(elem4, elem2)).to.equal(1);\n      expect(dom.domOrderComparator(elem4, elem3)).to.equal(1);\n      expect(dom.domOrderComparator(elem4, elem4)).to.equal(0);\n    });","file":"unit/core/dom/test-dom.js","skipped":false,"dir":"test"},{"name":"should toggle to remove the attribute with an empty value","suites":["toggleAttribute"],"updatePoint":{"line":596,"column":65,"index":22775},"line":596,"code":"    it('should toggle to remove the attribute with an empty value', () => {\n      el.setAttribute('foo', '');\n      dom.toggleAttribute(el, 'foo');\n      expect(el.getAttribute('foo')).to.be.null;\n    });","file":"unit/core/dom/test-dom.js","skipped":false,"dir":"test"},{"name":"should toggle to remove the attribute with a non-empty value","suites":["toggleAttribute"],"updatePoint":{"line":601,"column":68,"index":22983},"line":601,"code":"    it('should toggle to remove the attribute with a non-empty value', () => {\n      el.setAttribute('foo', 'asdf');\n      dom.toggleAttribute(el, 'foo');\n      expect(el.getAttribute('foo')).to.be.null;\n    });","file":"unit/core/dom/test-dom.js","skipped":false,"dir":"test"},{"name":"should toggle to add the attribute","suites":["toggleAttribute"],"updatePoint":{"line":606,"column":42,"index":23169},"line":606,"code":"    it('should toggle to add the attribute', () => {\n      dom.toggleAttribute(el, 'foo');\n      expect(el.getAttribute('foo')).to.equal('');\n    });","file":"unit/core/dom/test-dom.js","skipped":false,"dir":"test"},{"name":"should remove the attribute when forced","suites":["toggleAttribute"],"updatePoint":{"line":610,"column":47,"index":23324},"line":610,"code":"    it('should remove the attribute when forced', () => {\n      el.setAttribute('foo', '');\n      dom.toggleAttribute(el, 'foo', false);\n      expect(el.getAttribute('foo')).to.be.null;\n    });","file":"unit/core/dom/test-dom.js","skipped":false,"dir":"test"},{"name":"should not add the attribute when forced off","suites":["toggleAttribute"],"updatePoint":{"line":615,"column":52,"index":23523},"line":615,"code":"    it('should not add the attribute when forced off', () => {\n      dom.toggleAttribute(el, 'foo', false);\n      expect(el.getAttribute('foo')).to.be.null;\n    });","file":"unit/core/dom/test-dom.js","skipped":false,"dir":"test"},{"name":"should add the attribute when forced and it does not exist","suites":["toggleAttribute"],"updatePoint":{"line":619,"column":66,"index":23702},"line":619,"code":"    it('should add the attribute when forced and it does not exist', () => {\n      dom.toggleAttribute(el, 'foo', true);\n      expect(el.getAttribute('foo')).to.equal('');\n    });","file":"unit/core/dom/test-dom.js","skipped":false,"dir":"test"},{"name":"should leave the attribute when forced and it exists","suites":["toggleAttribute"],"updatePoint":{"line":623,"column":60,"index":23876},"line":623,"code":"    it('should leave the attribute when forced and it exists', () => {\n      el.setAttribute('foo', 'asdf');\n      dom.toggleAttribute(el, 'foo', true);\n      expect(el.getAttribute('foo')).to.equal('asdf');\n    });","file":"unit/core/dom/test-dom.js","skipped":false,"dir":"test"},{"name":"should return null for null/undefined","suites":["parseBooleanAttribute"],"updatePoint":{"line":630,"column":45,"index":24127},"line":630,"code":"    it('should return null for null/undefined', () => {\n      expect(dom.parseBooleanAttribute(null)).to.be.undefined;\n      expect(dom.parseBooleanAttribute(undefined)).to.be.undefined;\n    });","file":"unit/core/dom/test-dom.js","skipped":false,"dir":"test"},{"name":"should return true for empty string","suites":["parseBooleanAttribute"],"updatePoint":{"line":634,"column":43,"index":24320},"line":634,"code":"    it('should return true for empty string', () => {\n      expect(dom.parseBooleanAttribute('')).to.be.true;\n    });","file":"unit/core/dom/test-dom.js","skipped":false,"dir":"test"},{"name":"should return true for \"true\" string","suites":["parseBooleanAttribute"],"updatePoint":{"line":637,"column":44,"index":24439},"line":637,"code":"    it('should return true for \"true\" string', () => {\n      expect(dom.parseBooleanAttribute('true')).to.be.true;\n    });","file":"unit/core/dom/test-dom.js","skipped":false,"dir":"test"},{"name":"should return false for \"false\" string","suites":["parseBooleanAttribute"],"updatePoint":{"line":640,"column":46,"index":24564},"line":640,"code":"    it('should return false for \"false\" string', () => {\n      expect(dom.parseBooleanAttribute('false')).to.be.false;\n    });","file":"unit/core/dom/test-dom.js","skipped":false,"dir":"test"},{"name":"should return true for a random string","suites":["parseBooleanAttribute"],"updatePoint":{"line":643,"column":46,"index":24691},"line":643,"code":"    it('should return true for a random string', () => {\n      expect(dom.parseBooleanAttribute('a')).to.be.true;\n    });","file":"unit/core/dom/test-dom.js","skipped":false,"dir":"test"},{"name":"should map a sample DOM structure to the right string","suites":[],"updatePoint":{"line":27,"column":59,"index":889},"line":27,"code":"  it('should map a sample DOM structure to the right string', () => {\n    expect(domFingerprintPlain(ampAd)).to.equal('amp-ad.0,td.1,tr.0,tbody.0,table.0,div/id2.0,div/id1.0,body.0,html.0');\n  });","file":"unit/core/dom/test-fingerprint.js","skipped":false,"dir":"test"},{"name":"should map a sample DOM structure to the right hashed value","suites":[],"updatePoint":{"line":30,"column":65,"index":1092},"line":30,"code":"  it('should map a sample DOM structure to the right hashed value', () => {\n    expect(DomFingerprint.generate(ampAd)).to.equal('2437661740');\n  });","file":"unit/core/dom/test-fingerprint.js","skipped":false,"dir":"test"},{"name":"should correctly works with empty second parameter","suites":[],"updatePoint":{"line":23,"column":56,"index":676},"line":23,"code":"  it('should correctly works with empty second parameter', () => {\n    const result = getHtml(window, '#wrapper', []);\n    const expected = '<div> <div>Lorem ipsum</div> dolor sit amet </div>';\n    expect(result).to.equal(expected);\n  });","file":"unit/core/dom/test-get-html.js","skipped":false,"dir":"test"},{"name":"should correctly works with attributes array","suites":[],"updatePoint":{"line":28,"column":50,"index":909},"line":28,"code":"  it('should correctly works with attributes array', () => {\n    const result = getHtml(window, '#wrapper', ['class', 'id']);\n    const expected = '<div id=\"wrapper\"> ' + '<div class=\"tmp\">Lorem ipsum</div> dolor sit amet </div>';\n    expect(result).to.equal(expected);\n  });","file":"unit/core/dom/test-get-html.js","skipped":false,"dir":"test"},{"name":"should correctly works with attributes array","suites":[],"updatePoint":{"line":33,"column":50,"index":1185},"line":33,"code":"  it('should correctly works with attributes array', () => {\n    const result = getHtml(window, '.tmp', ['class', 'id']);\n    expect(result).to.equal('<div class=\"tmp\">Lorem ipsum</div>');\n  });","file":"unit/core/dom/test-get-html.js","skipped":false,"dir":"test"},{"name":"should works only with attributes from allowlist","suites":[],"updatePoint":{"line":37,"column":54,"index":1384},"line":37,"code":"  it('should works only with attributes from allowlist', () => {\n    const result = getHtml(window, '.tmp', ['class', 'test']);\n    expect(result).to.equal('<div class=\"tmp\">Lorem ipsum</div>');\n  });","file":"unit/core/dom/test-get-html.js","skipped":false,"dir":"test"},{"name":"should correctly work with wrong selector","suites":[],"updatePoint":{"line":41,"column":47,"index":1578},"line":41,"code":"  it('should correctly work with wrong selector', () => {\n    const result = getHtml(window, '.no-such-class', ['class', 'id']);\n    expect(result).to.equal('');\n  });","file":"unit/core/dom/test-get-html.js","skipped":false,"dir":"test"},{"name":"returns empty string with nullish","suites":[],"updatePoint":{"line":3,"column":39,"index":176},"line":3,"code":"  it('returns empty string with nullish', () => {\n    expect(jsxStylePropertyString('a', null)).to.equal('');\n    expect(jsxStylePropertyString('b', undefined)).to.equal('');\n    expect(jsxStylePropertyString('c', null, /* isDimensional */true)).to.equal('');\n    expect(jsxStylePropertyString('d', undefined, /* isDimensional */true)).to.equal('');\n  });","file":"unit/core/dom/test-jsx-style-property-string.js","skipped":false,"dir":"test"},{"name":"returns empty string with empty string","suites":[],"updatePoint":{"line":9,"column":44,"index":537},"line":9,"code":"  it('returns empty string with empty string', () => {\n    expect(jsxStylePropertyString('a', '')).to.equal('');\n    expect(jsxStylePropertyString('b', '')).to.equal('');\n    expect(jsxStylePropertyString('c', '', /* isDimensional */true)).to.equal('');\n    expect(jsxStylePropertyString('d', '', /* isDimensional */true)).to.equal('');\n  });","file":"unit/core/dom/test-jsx-style-property-string.js","skipped":false,"dir":"test"},{"name":"returns string value","suites":[],"updatePoint":{"line":15,"column":26,"index":862},"line":15,"code":"  it('returns string value', () => {\n    expect(jsxStylePropertyString('background', 'red')).to.equal('background:red;');\n    expect(jsxStylePropertyString('background', 'red', /* isDimensional */true)).to.equal('background:red;');\n  });","file":"unit/core/dom/test-jsx-style-property-string.js","skipped":false,"dir":"test"},{"name":"returns non-dimensional number value as-is","suites":[],"updatePoint":{"line":19,"column":48,"index":1122},"line":19,"code":"  it('returns non-dimensional number value as-is', () => {\n    expect(jsxStylePropertyString('flex', 1)).to.equal('flex:1;');\n    expect(jsxStylePropertyString('opacity', 0.5)).to.equal('opacity:0.5;');\n  });","file":"unit/core/dom/test-jsx-style-property-string.js","skipped":false,"dir":"test"},{"name":"returns dimensional number value with px","suites":[],"updatePoint":{"line":23,"column":46,"index":1329},"line":23,"code":"  it('returns dimensional number value with px', () => {\n    expect(jsxStylePropertyString('width', 150, /* isDimensional */true)).to.equal('width:150px;');\n    expect(jsxStylePropertyString('height', 321, /* isDimensional */true)).to.equal('height:321px;');\n  });","file":"unit/core/dom/test-jsx-style-property-string.js","skipped":false,"dir":"test"},{"name":"renders without attributes","suites":[],"updatePoint":{"line":11,"column":32,"index":311},"line":11,"code":"  it('renders without attributes', () => {\n    const element = /*#__PURE__*/React.createElement(\"div\", null);\n    expect(element.outerHTML).to.equal('<div></div>');\n  });","file":"unit/core/dom/test-jsx.js","skipped":false,"dir":"test"},{"name":"renders attributes","suites":[],"updatePoint":{"line":15,"column":24,"index":474},"line":15,"code":"  it('renders attributes', () => {\n    const element = /*#__PURE__*/React.createElement(\"div\", {\n      \"data-foo\": \"bar\",\n      \"data-count\": 0\n    });\n    expect(element.outerHTML).to.equal('<div data-foo=\"bar\" data-count=\"0\"></div>');\n  });","file":"unit/core/dom/test-jsx.js","skipped":false,"dir":"test"},{"name":"boolean `true` implies empty attribute","suites":[],"updatePoint":{"line":22,"column":44,"index":737},"line":22,"code":"  it('boolean `true` implies empty attribute', () => {\n    const element = /*#__PURE__*/React.createElement(\"video\", {\n      autoplay: true\n    });\n    expect(element.outerHTML).to.equal('<video autoplay=\"\"></video>');\n  });","file":"unit/core/dom/test-jsx.js","skipped":false,"dir":"test"},{"name":"boolean `false` implies no attribute","suites":[],"updatePoint":{"line":28,"column":42,"index":960},"line":28,"code":"  it('boolean `false` implies no attribute', () => {\n    const element = /*#__PURE__*/React.createElement(\"video\", {\n      autoplay: false\n    });\n    expect(element.outerHTML).to.equal('<video></video>');\n  });","file":"unit/core/dom/test-jsx.js","skipped":false,"dir":"test"},{"name":"nullish implies no attribute","suites":[],"updatePoint":{"line":34,"column":34,"index":1164},"line":34,"code":"  it('nullish implies no attribute', () => {\n    const element = /*#__PURE__*/React.createElement(\"video\", {\n      autoplay: null\n    });\n    expect(element.outerHTML).to.equal('<video></video>');\n  });","file":"unit/core/dom/test-jsx.js","skipped":false,"dir":"test"},{"name":"includes string child","suites":[],"updatePoint":{"line":40,"column":27,"index":1360},"line":40,"code":"  it('includes string child', () => {\n    const element = /*#__PURE__*/React.createElement(\"div\", null, \"foo\");\n    expect(element.outerHTML).to.equal('<div>foo</div>');\n  });","file":"unit/core/dom/test-jsx.js","skipped":false,"dir":"test"},{"name":"includes string children","suites":[],"updatePoint":{"line":44,"column":30,"index":1539},"line":44,"code":"  it('includes string children', () => {\n    const element = /*#__PURE__*/React.createElement(\"div\", null, ['foo', 'bar']);\n    expect(element.outerHTML).to.equal('<div>foobar</div>');\n  });","file":"unit/core/dom/test-jsx.js","skipped":false,"dir":"test"},{"name":"includes DOM node child","suites":[],"updatePoint":{"line":48,"column":29,"index":1729},"line":48,"code":"  it('includes DOM node child', () => {\n    const element = /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(\"span\", null, ['foo']));\n    expect(element.outerHTML).to.equal('<div><span>foo</span></div>');\n  });","file":"unit/core/dom/test-jsx.js","skipped":false,"dir":"test"},{"name":"includes DOM node children","suites":[],"updatePoint":{"line":52,"column":32,"index":1973},"line":52,"code":"  it('includes DOM node children', () => {\n    const element = /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(\"a\", {\n      href: \"#\"\n    }, /*#__PURE__*/React.createElement(\"span\", null, ['click'])));\n    expect(element.outerHTML).to.equal('<div><a href=\"#\"><span>click</span></a></div>');\n  });","file":"unit/core/dom/test-jsx.js","skipped":false,"dir":"test"},{"name":"includes children var args","suites":[],"updatePoint":{"line":58,"column":32,"index":2301},"line":58,"code":"  it('includes children var args', () => {\n    const element = createElement('ul', null, /*#__PURE__*/React.createElement(\"li\", null, \"one\"), /*#__PURE__*/React.createElement(\"li\", {\n      class: \"even\"\n    }, \"two\"), /*#__PURE__*/React.createElement(\"li\", null, \"three\"));\n    expect(element.outerHTML).to.equal('<ul><li>one</li><li class=\"even\">two</li><li>three</li></ul>');\n  });","file":"unit/core/dom/test-jsx.js","skipped":false,"dir":"test"},{"name":"ignores nullish and false children","suites":[],"updatePoint":{"line":64,"column":40,"index":2693},"line":64,"code":"  it('ignores nullish and false children', () => {\n    const element = /*#__PURE__*/React.createElement(\"div\", null, null, undefined, false);\n    expect(element.outerHTML).to.equal('<div></div>');\n  });","file":"unit/core/dom/test-jsx.js","skipped":false,"dir":"test"},{"name":"ignores nested nullish and false children","suites":[],"updatePoint":{"line":68,"column":47,"index":2903},"line":68,"code":"  it('ignores nested nullish and false children', () => {\n    const element = /*#__PURE__*/React.createElement(\"div\", null, null, [false, [undefined]]);\n    expect(element.outerHTML).to.equal('<div></div>');\n  });","file":"unit/core/dom/test-jsx.js","skipped":false,"dir":"test"},{"name":"renders child of value `0`","suites":[],"updatePoint":{"line":72,"column":32,"index":3102},"line":72,"code":"  it('renders child of value `0`', () => {\n    const element = /*#__PURE__*/React.createElement(\"div\", null, 0);\n    expect(element.outerHTML).to.equal('<div>0</div>');\n  });","file":"unit/core/dom/test-jsx.js","skipped":false,"dir":"test"},{"name":"renders functions","suites":[],"updatePoint":{"line":76,"column":23,"index":3268},"line":76,"code":"  it('renders functions', () => {\n    function Component({\n      children,\n      'class': className\n    }) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        class: `component ${className}`\n      }, children);\n    }\n    const element = /*#__PURE__*/React.createElement(Component, {\n      class: \"composed\"\n    }, /*#__PURE__*/React.createElement(\"p\", null, \"foo\"));\n    expect(element.outerHTML).to.equal('<div class=\"component composed\"><p>foo</p></div>');\n  });","file":"unit/core/dom/test-jsx.js","skipped":false,"dir":"test"},{"name":"attaches event handlers from attributes","suites":[],"updatePoint":{"line":90,"column":45,"index":3768},"line":90,"code":"  it('attaches event handlers from attributes', () => {\n    const onFooBar = env.sandbox.spy();\n    const element = /*#__PURE__*/React.createElement(\"div\", {\n      onFooBar: onFooBar\n    });\n    expect(element).to.not.have.attribute('onfoobar');\n    expect(onFooBar).to.not.have.been.called;\n    dispatchCustomEvent(element, 'foobar');\n    expect(onFooBar).to.have.been.calledOnce;\n  });","file":"unit/core/dom/test-jsx.js","skipped":false,"dir":"test"},{"name":"non-function `on` attribute is not treated like an event handler function","suites":[],"updatePoint":{"line":100,"column":79,"index":4190},"line":100,"code":"  it('non-function `on` attribute is not treated like an event handler function', () => {\n    const element = /*#__PURE__*/React.createElement(\"button\", {\n      on: \"tap:lightbox.open\",\n      onClick: \"foo()\"\n    });\n    expect(element.outerHTML).to.equal('<button on=\"tap:lightbox.open\" onclick=\"foo()\"></button>');\n  });","file":"unit/core/dom/test-jsx.js","skipped":false,"dir":"test"},{"name":"text content is safe","suites":[],"updatePoint":{"line":107,"column":26,"index":4460},"line":107,"code":"  it('text content is safe', () => {\n    const element = /*#__PURE__*/React.createElement(\"div\", null, '<script dangerous>');\n    expect(element.outerHTML).to.equal('<div>&lt;script dangerous&gt;</div>');\n  });","file":"unit/core/dom/test-jsx.js","skipped":false,"dir":"test"},{"name":"attributes are safe","suites":[],"updatePoint":{"line":111,"column":25,"index":4670},"line":111,"code":"  it('attributes are safe', () => {\n    const element = /*#__PURE__*/React.createElement(\"div\", {\n      \"data-dangerous\": '\"><script src=\"foo.js'\n    });\n    expect(element.outerHTML).to.equal('<div data-dangerous=\"&quot;><script src=&quot;foo.js\"></div>');\n  });","file":"unit/core/dom/test-jsx.js","skipped":false,"dir":"test"},{"name":"renders with SVG namespace with props.xmlns","suites":[],"updatePoint":{"line":117,"column":49,"index":4958},"line":117,"code":"  it('renders with SVG namespace with props.xmlns', () => {\n    // Using `createElement` directly since `xmlns` is added during\n    // transformation by babel-plugin-dom-jsx-svg-namespace\n    const xmlns = 'http://www.w3.org/2000/svg';\n    const withProp = createElement('svg', {\n      xmlns\n    });\n    expect(withProp.namespaceURI).to.equal(xmlns);\n    const withoutProp = createElement('svg');\n    expect(withoutProp.namespaceURI).to.not.equal(xmlns);\n  });","file":"unit/core/dom/test-jsx.js","skipped":false,"dir":"test"},{"name":"renders with SVG namespace with props.xmlns (compiled)","suites":[],"updatePoint":{"line":128,"column":60,"index":5430},"line":128,"code":"  it('renders with SVG namespace with props.xmlns (compiled)', () => {\n    // This works because <svg> is transformed by\n    // babel-plugin-dom-jsx-svg-namespace\n    const xmlns = 'http://www.w3.org/2000/svg';\n    const withProp = /*#__PURE__*/React.createElement(\"svg\", null);\n    expect(withProp.namespaceURI).to.equal(xmlns);\n    const withoutProp = /*#__PURE__*/React.createElement(\"div\", null);\n    expect(withoutProp.namespaceURI).to.not.equal(xmlns);\n  });","file":"unit/core/dom/test-jsx.js","skipped":false,"dir":"test"},{"name":"does not support Fragments","suites":["unsupported JSX features"],"updatePoint":{"line":138,"column":34,"index":5916},"line":138,"code":"    it('does not support Fragments', () => {\n      allowConsoleError(() => {\n        expect(() => /*#__PURE__*/React.createElement(React.Fragment, null)).to.throw();\n      });\n    });","file":"unit/core/dom/test-jsx.js","skipped":false,"dir":"test"},{"name":"does not support objects as attribute values","suites":["unsupported JSX features"],"updatePoint":{"line":143,"column":52,"index":6118},"line":143,"code":"    it('does not support objects as attribute values', () => {\n      // Using `createElement` directly since objects in `style` JSXAttributes\n      // are otherwise transformed by babel-plugin-jsx-style-object\n      const element = createElement('div', {\n        style: {\n          width: 400\n        },\n        class: {\n          foo: true,\n          bar: false\n        }\n      });\n      expect(element.outerHTML).to.equal('<div style=\"[object Object]\" class=\"[object Object]\"></div>');\n    });","file":"unit/core/dom/test-jsx.js","skipped":false,"dir":"test"},{"name":"supports object as style attribute value (compiled)","suites":["unsupported JSX features"],"updatePoint":{"line":157,"column":59,"index":6621},"line":157,"code":"    it('supports object as style attribute value (compiled)', () => {\n      // This works because it's transformed by babel-plugin-jsx-style-object\n      const element = /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          width: 400,\n          background: null\n        }\n      });\n      expect(element.outerHTML).to.equal('<div style=\"width:400px;\"></div>');\n    });","file":"unit/core/dom/test-jsx.js","skipped":false,"dir":"test"},{"name":"does not support dangerouslySetInnerHTML","suites":["unsupported JSX features"],"updatePoint":{"line":167,"column":48,"index":6994},"line":167,"code":"    it('does not support dangerouslySetInnerHTML', () => {\n      const element = /*#__PURE__*/React.createElement(\"div\", {\n        dangerouslySetInnerHTML: {\n          __html: '<script>'\n        }\n      });\n      expect(element.outerHTML).to.equal('<div dangerouslysetinnerhtml=\"[object Object]\"></div>');\n    });","file":"unit/core/dom/test-jsx.js","skipped":false,"dir":"test"},{"name":"should fail before resolutions start","suites":["resolveListQuery"],"updatePoint":{"line":18,"column":44,"index":515},"line":18,"code":"    it('should fail before resolutions start', () => {\n      expect(() => resolver.resolveListQuery('one')).to.throw();\n    });","file":"unit/core/dom/test-media-query-props.js","skipped":false,"dir":"test"},{"name":"should resolve an empty string","suites":["resolveListQuery"],"updatePoint":{"line":21,"column":38,"index":637},"line":21,"code":"    it('should resolve an empty string', () => {\n      resolver.start();\n      expect(resolver.resolveListQuery('')).to.equal('');\n      expect(resolver.resolveListQuery(' ')).to.equal('');\n    });","file":"unit/core/dom/test-media-query-props.js","skipped":false,"dir":"test"},{"name":"should resolve a simple value","suites":["resolveListQuery"],"updatePoint":{"line":26,"column":37,"index":834},"line":26,"code":"    it('should resolve a simple value', () => {\n      resolver.start();\n      expect(resolver.resolveListQuery('a')).to.equal('a');\n      expect(resolver.resolveListQuery('A')).to.equal('A');\n      expect(resolver.resolveListQuery('on')).to.equal('on');\n      expect(resolver.resolveListQuery('1')).to.equal('1');\n      expect(resolver.resolveListQuery('12')).to.equal('12');\n      expect(resolver.resolveListQuery('1.2')).to.equal('1.2');\n      expect(resolver.resolveListQuery('.12')).to.equal('.12');\n    });","file":"unit/core/dom/test-media-query-props.js","skipped":false,"dir":"test"},{"name":"should resolve a media expression","suites":["resolveListQuery"],"updatePoint":{"line":36,"column":41,"index":1350},"line":36,"code":"    it('should resolve a media expression', () => {\n      resolver.start();\n      expect(resolver.resolveListQuery('(min-width: 301px) a, b')).to.equal('b');\n      expect(resolver.resolveListQuery('(min-width: 299px) a, b')).to.equal('a');\n    });","file":"unit/core/dom/test-media-query-props.js","skipped":false,"dir":"test"},{"name":"should allow % expressions","suites":["resolveListQuery"],"updatePoint":{"line":41,"column":34,"index":1591},"line":41,"code":"    it('should allow % expressions', () => {\n      resolver.start();\n      expect(resolver.resolveListQuery('1%')).to.equal('1%');\n      expect(resolver.resolveListQuery('(min-width: 301px) 1%, 2%')).to.equal('2%');\n    });","file":"unit/core/dom/test-media-query-props.js","skipped":false,"dir":"test"},{"name":"should allow unit expressions","suites":["resolveListQuery"],"updatePoint":{"line":46,"column":37,"index":1818},"line":46,"code":"    it('should allow unit expressions', () => {\n      resolver.start();\n      expect(resolver.resolveListQuery('1.1px')).to.equal('1.1px');\n      expect(resolver.resolveListQuery('(min-width: 301px) 1.1px, 2.2px')).to.equal('2.2px');\n      expect(resolver.resolveListQuery('(min-width: 299px) 1.1px, 2.2px')).to.equal('1.1px');\n    });","file":"unit/core/dom/test-media-query-props.js","skipped":false,"dir":"test"},{"name":"should allow calc() expressions","suites":["resolveListQuery"],"updatePoint":{"line":52,"column":39,"index":2156},"line":52,"code":"    it('should allow calc() expressions', () => {\n      resolver.start();\n      expect(resolver.resolveListQuery('calc(25px * 10)')).to.equal('calc(25px * 10)');\n      expect(resolver.resolveListQuery('(min-width: 301px) calc(25px * 10), calc(25px * 20)')).to.equal('calc(25px * 20)');\n      expect(resolver.resolveListQuery('(min-width: 299px) calc(25px * 10), calc(25px * 20)')).to.equal('calc(25px * 10)');\n    });","file":"unit/core/dom/test-media-query-props.js","skipped":false,"dir":"test"},{"name":"should allow complex media expressions","suites":["resolveListQuery"],"updatePoint":{"line":58,"column":46,"index":2581},"line":58,"code":"    it('should allow complex media expressions', () => {\n      resolver.start();\n      expect(resolver.resolveListQuery('(min-width: 299px) and (max-width: 300px) a, b')).to.equal('a');\n    });","file":"unit/core/dom/test-media-query-props.js","skipped":false,"dir":"test"},{"name":"should resolve a first matching expression","suites":["resolveListQuery"],"updatePoint":{"line":62,"column":50,"index":2779},"line":62,"code":"    it('should resolve a first matching expression', () => {\n      resolver.start();\n      expect(resolver.resolveListQuery('(min-width: 301px) a, (min-width: 299px) b, (min-width: 200px) c, d')).to.equal('b');\n    });","file":"unit/core/dom/test-media-query-props.js","skipped":false,"dir":"test"},{"name":"should notify when the query has changed","suites":["resolveListQuery"],"updatePoint":{"line":66,"column":48,"index":2996},"line":66,"code":"    it('should notify when the query has changed', () => {\n      resolver.start();\n      const expr = '(min-width: 301px) a, b';\n      expect(resolver.resolveListQuery(expr)).to.equal('b');\n      resolver.complete();\n      env.iframe.style.width = '310px';\n      waitFor(() => callback.callCount > 0, 'callback is called');\n      expect(env.win.innerWidth).to.equal(310);\n      resolver.start();\n      expect(resolver.resolveListQuery(expr)).to.equal('a');\n    });","file":"unit/core/dom/test-media-query-props.js","skipped":false,"dir":"test"},{"name":"should unlisten the old queries","suites":["resolveListQuery"],"updatePoint":{"line":77,"column":39,"index":3452},"line":77,"code":"    it('should unlisten the old queries', () => {\n      const query1 = {\n        matches: true,\n        onchange: null\n      };\n      const query2 = {\n        matches: true,\n        onchange: null\n      };\n      const stub = env.sandbox.stub(win, 'matchMedia').callsFake(q => {\n        switch (q) {\n          case '(q1)':\n            return query1;\n          case '(q2)':\n            return query2;\n        }\n      });\n\n      // First pass.\n      resolver.start();\n      resolver.resolveListQuery('(q1) a, b');\n      resolver.resolveListQuery('(q2) a, b');\n      resolver.complete();\n      expect(query1.onchange).to.equal(callback);\n      expect(query2.onchange).to.equal(callback);\n\n      // Second pass.\n      resolver.start();\n      resolver.resolveListQuery('(q2) a, b');\n      resolver.complete();\n      expect(query1.onchange).to.be.null;\n      expect(query2.onchange).to.equal(callback);\n\n      // Called only twice. Second pass are used from cache.\n      expect(stub).to.be.calledTwice;\n\n      // Unlisten all.\n      resolver.dispose();\n      expect(query1.onchange).to.be.null;\n      expect(query2.onchange).to.be.null;\n    });","file":"unit/core/dom/test-media-query-props.js","skipped":false,"dir":"test"},{"name":"should unlisten the old queries with old API","suites":["resolveListQuery"],"updatePoint":{"line":118,"column":52,"index":4603},"line":118,"code":"    it('should unlisten the old queries with old API', () => {\n      const query1 = {\n        matches: true,\n        onchange_: null,\n        addListener(cb) {\n          this.onchange_ = cb;\n        },\n        removeListener(cb) {\n          if (this.onchange_ === cb) {\n            this.onchange_ = null;\n          }\n        }\n      };\n      const query2 = {\n        matches: true,\n        onchange_: null,\n        addListener(cb) {\n          this.onchange_ = cb;\n        },\n        removeListener(cb) {\n          if (this.onchange_ === cb) {\n            this.onchange_ = null;\n          }\n        }\n      };\n      const stub = env.sandbox.stub(win, 'matchMedia').callsFake(q => {\n        switch (q) {\n          case '(q1)':\n            return query1;\n          case '(q2)':\n            return query2;\n        }\n      });\n\n      // First pass.\n      resolver.start();\n      resolver.resolveListQuery('(q1) a, b');\n      resolver.resolveListQuery('(q2) a, b');\n      resolver.complete();\n      expect(query1.onchange_).to.equal(callback);\n      expect(query2.onchange_).to.equal(callback);\n\n      // Second pass.\n      resolver.start();\n      resolver.resolveListQuery('(q2) a, b');\n      resolver.complete();\n      expect(query1.onchange_).to.be.null;\n      expect(query2.onchange_).to.equal(callback);\n\n      // Called only twice. Second pass are used from cache.\n      expect(stub).to.be.calledTwice;\n\n      // Unlisten all.\n      resolver.dispose();\n      expect(query1.onchange_).to.be.null;\n      expect(query2.onchange_).to.be.null;\n    });","file":"unit/core/dom/test-media-query-props.js","skipped":false,"dir":"test"},{"name":"should fail before resolutions start","suites":["resolveMatchQuery"],"updatePoint":{"line":177,"column":44,"index":6188},"line":177,"code":"    it('should fail before resolutions start', () => {\n      expect(() => resolver.resolveMatchQuery('one')).to.throw();\n    });","file":"unit/core/dom/test-media-query-props.js","skipped":false,"dir":"test"},{"name":"should resolve an empty string","suites":["resolveMatchQuery"],"updatePoint":{"line":180,"column":38,"index":6311},"line":180,"code":"    it('should resolve an empty string', () => {\n      resolver.start();\n      expect(resolver.resolveMatchQuery('')).to.be.true;\n      expect(resolver.resolveMatchQuery(' ')).to.be.true;\n    });","file":"unit/core/dom/test-media-query-props.js","skipped":false,"dir":"test"},{"name":"should resolve a simple media query","suites":["resolveMatchQuery"],"updatePoint":{"line":185,"column":43,"index":6512},"line":185,"code":"    it('should resolve a simple media query', () => {\n      resolver.start();\n      expect(resolver.resolveMatchQuery('(min-width: 299px)')).to.be.true;\n      expect(resolver.resolveMatchQuery('(min-width: 301px)')).to.be.false;\n    });","file":"unit/core/dom/test-media-query-props.js","skipped":false,"dir":"test"},{"name":"should resolve an AND media query","suites":["resolveMatchQuery"],"updatePoint":{"line":190,"column":41,"index":6747},"line":190,"code":"    it('should resolve an AND media query', () => {\n      resolver.start();\n      expect(resolver.resolveMatchQuery('(min-width: 299px) AND (max-width: 301px)')).to.be.true;\n      expect(resolver.resolveMatchQuery('(min-width: 299px) AND (max-width: 299px)')).to.be.false;\n    });","file":"unit/core/dom/test-media-query-props.js","skipped":false,"dir":"test"},{"name":"should resolve an OR media query","suites":["resolveMatchQuery"],"updatePoint":{"line":195,"column":40,"index":7027},"line":195,"code":"    it('should resolve an OR media query', () => {\n      resolver.start();\n      expect(resolver.resolveMatchQuery('(min-width: 299px), (max-width: 301px)')).to.be.true;\n      expect(resolver.resolveMatchQuery('(min-width: 299px), (max-width: 299px)')).to.be.true;\n    });","file":"unit/core/dom/test-media-query-props.js","skipped":false,"dir":"test"},{"name":"should throw when no date is specified","suites":["parseDateAttrs"],"updatePoint":{"line":13,"column":46,"index":595},"line":13,"code":"    it('should throw when no date is specified', () => {\n      expect(() => parseDateAttrs(element)).to.throw(/required/);\n    });","file":"unit/core/dom/test-parse-date-attributes.js","skipped":false,"dir":"test"},{"name":"should throw when invalid date is specified","suites":["parseDateAttrs"],"updatePoint":{"line":18,"column":51,"index":761},"line":18,"code":"    it('should throw when invalid date is specified', () => {\n      element.setAttribute('datetime', 'invalid');\n      expect(() => parseDateAttrs(element)).to.throw(/Invalid date/);\n    });","file":"unit/core/dom/test-parse-date-attributes.js","skipped":false,"dir":"test"},{"name":"should parse the \"datetime\" attribute","suites":["parseDateAttrs"],"updatePoint":{"line":22,"column":45,"index":946},"line":22,"code":"    it('should parse the \"datetime\" attribute', () => {\n      element.setAttribute('datetime', DATE_STRING);\n      expect(parseDateAttrs(element)).to.equal(DATE.getTime());\n\n      // With offset.\n      element.setAttribute('offset-seconds', '1');\n      expect(parseDateAttrs(element)).to.equal(DATE.getTime() + 1000);\n    });","file":"unit/core/dom/test-parse-date-attributes.js","skipped":false,"dir":"test"},{"name":"should accept \"datetime=now\"","suites":["parseDateAttrs"],"updatePoint":{"line":30,"column":36,"index":1263},"line":30,"code":"    it('should accept \"datetime=now\"', () => {\n      env.sandbox.useFakeTimers(DATE);\n      element.setAttribute('datetime', 'now');\n      expect(parseDateAttrs(element)).to.equal(DATE.getTime());\n\n      // With offset.\n      element.setAttribute('offset-seconds', '1');\n      expect(parseDateAttrs(element)).to.equal(DATE.getTime() + 1000);\n    });","file":"unit/core/dom/test-parse-date-attributes.js","skipped":false,"dir":"test"},{"name":"should parse the \"end-date\" attribute","suites":["parseDateAttrs"],"updatePoint":{"line":41,"column":45,"index":1652},"line":41,"code":"    it('should parse the \"end-date\" attribute', () => {\n      element.setAttribute('end-date', DATE_STRING);\n      expect(parseDateAttrs(element)).to.equal(DATE.getTime());\n\n      // With offset.\n      element.setAttribute('offset-seconds', '1');\n      expect(parseDateAttrs(element)).to.equal(DATE.getTime() + 1000);\n    });","file":"unit/core/dom/test-parse-date-attributes.js","skipped":false,"dir":"test"},{"name":"should accept \"end-date=now\"","suites":["parseDateAttrs"],"updatePoint":{"line":49,"column":36,"index":1969},"line":49,"code":"    it('should accept \"end-date=now\"', () => {\n      env.sandbox.useFakeTimers(DATE);\n      element.setAttribute('end-date', 'now');\n      expect(parseDateAttrs(element)).to.equal(DATE.getTime());\n\n      // With offset.\n      element.setAttribute('offset-seconds', '1');\n      expect(parseDateAttrs(element)).to.equal(DATE.getTime() + 1000);\n    });","file":"unit/core/dom/test-parse-date-attributes.js","skipped":false,"dir":"test"},{"name":"should parse the \"timeleft-ms\" attribute","suites":["parseDateAttrs"],"updatePoint":{"line":60,"column":48,"index":2364},"line":60,"code":"    it('should parse the \"timeleft-ms\" attribute', () => {\n      // Mock Date.now()\n      const originalDateNow = Date.now;\n      const mockedDateNow = () => DATE.getTime();\n      Date.now = mockedDateNow;\n      element.setAttribute('timeleft-ms', 10000);\n      expect(parseDateAttrs(element)).to.equal(DATE.getTime() + 10000);\n\n      // With offset.\n      element.setAttribute('offset-seconds', '1');\n      expect(parseDateAttrs(element)).to.equal(DATE.getTime() + 10000 + 1000);\n\n      // Replace Date.now with its original native function\n      Date.now = originalDateNow;\n    });","file":"unit/core/dom/test-parse-date-attributes.js","skipped":false,"dir":"test"},{"name":"should throw when invalid \"timeleft-ms\" is specified","suites":["parseDateAttrs"],"updatePoint":{"line":75,"column":60,"index":2960},"line":75,"code":"    it('should throw when invalid \"timeleft-ms\" is specified', () => {\n      element.setAttribute('timeleft-ms', 'invalid');\n      allowConsoleError(() => {\n        expect(() => parseDateAttrs(element)).to.throw(/required/);\n      });\n    });","file":"unit/core/dom/test-parse-date-attributes.js","skipped":false,"dir":"test"},{"name":"should parse the \"timestamp-ms\" attribute","suites":["parseDateAttrs"],"updatePoint":{"line":83,"column":49,"index":3226},"line":83,"code":"    it('should parse the \"timestamp-ms\" attribute', () => {\n      element.setAttribute('timestamp-ms', DATE.getTime());\n      expect(parseDateAttrs(element)).to.equal(DATE.getTime());\n\n      // With offset.\n      element.setAttribute('offset-seconds', '1');\n      expect(parseDateAttrs(element)).to.equal(DATE.getTime() + 1000);\n    });","file":"unit/core/dom/test-parse-date-attributes.js","skipped":false,"dir":"test"},{"name":"should throw when invalid \"timestamp-ms\" is specified","suites":["parseDateAttrs"],"updatePoint":{"line":91,"column":61,"index":3575},"line":91,"code":"    it('should throw when invalid \"timestamp-ms\" is specified', () => {\n      element.setAttribute('timestamp-ms', 'invalid');\n      expect(() => parseDateAttrs(element)).to.throw(/required/);\n    });","file":"unit/core/dom/test-parse-date-attributes.js","skipped":false,"dir":"test"},{"name":"should parse the \"timestamp-seconds\" attribute","suites":["parseDateAttrs"],"updatePoint":{"line":97,"column":54,"index":3808},"line":97,"code":"    it('should parse the \"timestamp-seconds\" attribute', () => {\n      element.setAttribute('timestamp-seconds', DATE.getTime() / 1000);\n      expect(parseDateAttrs(element)).to.equal(DATE.getTime());\n\n      // With offset.\n      element.setAttribute('offset-seconds', '1');\n      expect(parseDateAttrs(element)).to.equal(DATE.getTime() + 1000);\n    });","file":"unit/core/dom/test-parse-date-attributes.js","skipped":false,"dir":"test"},{"name":"should throw when invalid \"timestamp-seconds\" is specified","suites":["parseDateAttrs"],"updatePoint":{"line":105,"column":66,"index":4174},"line":105,"code":"    it('should throw when invalid \"timestamp-seconds\" is specified', () => {\n      element.setAttribute('timestamp-seconds', 'invalid');\n      expect(() => parseDateAttrs(element)).to.throw(/required/);\n    });","file":"unit/core/dom/test-parse-date-attributes.js","skipped":false,"dir":"test"},{"name":"should throw when an invalid attribute is specified","suites":["parseDateAttrs"],"updatePoint":{"line":109,"column":59,"index":4378},"line":109,"code":"    it('should throw when an invalid attribute is specified', () => {\n      expect(() => parseDateAttrsBase(element, ['unknown-attr'])).to.throw('Invalid date attribute');\n    });","file":"unit/core/dom/test-parse-date-attributes.js","skipped":false,"dir":"test"},{"name":"will not propagate undefined attributes","suites":[],"updatePoint":{"line":22,"column":45,"index":600},"line":22,"code":"  it('will not propagate undefined attributes', () => {\n    const target = new FakeElement('div');\n    expect(target.hasAttributes()).to.be.false;\n    propagateAttributes(['data-test1'], sourceElement, target);\n    expect(target.hasAttributes()).to.be.false;\n    propagateAttributes(['data-test2', 'data-test3'], sourceElement, target);\n    expect(target.hasAttributes()).to.be.false;\n  });","file":"unit/core/dom/test-propagate-attributes.js","skipped":false,"dir":"test"},{"name":"propagates defined attributes","suites":[],"updatePoint":{"line":30,"column":35,"index":981},"line":30,"code":"  it('propagates defined attributes', () => {\n    const target = new FakeElement('div');\n    expect(target.hasAttributes()).to.be.false;\n    sourceElement.setAttribute('data-test1', 'abc');\n    sourceElement.setAttribute('data-test2', 'xyz');\n    sourceElement.setAttribute('data-test3', '123');\n    propagateAttributes('data-test1', sourceElement, target);\n    expect(target.hasAttributes()).to.be.true;\n    expect(target.getAttribute('data-test1')).to.equal('abc');\n    expect(target.getAttribute('data-test2')).to.be.null;\n    expect(target.getAttribute('data-test3')).to.be.null;\n    propagateAttributes(['data-test2', 'data-test3'], sourceElement, target);\n    expect(target.getAttribute('data-test2')).to.equal('xyz');\n    expect(target.getAttribute('data-test3')).to.equal('123');\n  });","file":"unit/core/dom/test-propagate-attributes.js","skipped":false,"dir":"test"},{"name":" (polyfill)","suites":[],"updatePoint":{"line":11,"column":31,"index":490},"line":11,"code":"  it(`${description} (polyfill)`, () => {\n    setScopeSelectorSupportedForTesting(false);\n    testFn();\n  });","file":"unit/core/dom/test-query.js","skipped":false,"dir":"test"},{"name":"realChildElements should return nothing","suites":["realChildElements and realChildNodes"],"updatePoint":{"line":45,"column":47,"index":1975},"line":45,"code":"    it('realChildElements should return nothing', () => {\n      expect(query.realChildNodes(element).length).to.equal(0);\n      expect(query.realChildElements(element).length).to.equal(0);\n    });","file":"unit/core/dom/test-query.js","skipped":false,"dir":"test"},{"name":"realChildElements should return content-only nodes","suites":["realChildElements and realChildNodes"],"updatePoint":{"line":49,"column":58,"index":2183},"line":49,"code":"    it('realChildElements should return content-only nodes', () => {\n      const createWithAttr = attr => createElementWithAttributes(document, 'div', {\n        [attr]: ''\n      });\n      element.appendChild(document.createElement('i-amp-service'));\n      element.appendChild(createWithAttr('placeholder'));\n      element.appendChild(createWithAttr('fallback'));\n      element.appendChild(createWithAttr('overflow'));\n      element.appendChild(document.createTextNode('abc'));\n      element.appendChild(document.createElement('content'));\n      const nodes = query.realChildNodes(element);\n      expect(nodes.length).to.equal(2);\n      expect(nodes[0].textContent).to.equal('abc');\n      expect(nodes[1].tagName.toLowerCase()).to.equal('content');\n      const elements = query.realChildElements(element);\n      expect(elements.length).to.equal(1);\n      expect(elements[0].tagName.toLowerCase()).to.equal('content');\n    });","file":"unit/core/dom/test-query.js","skipped":false,"dir":"test"},{"name":"finds element by id","suites":["matches"],"updatePoint":{"line":89,"column":27,"index":3751},"line":89,"code":"    it('finds element by id', () => {\n      expect(query.matches(ampEl, '#ampEl')).to.be.true;\n      [div, img1, iframe].map(el => {\n        expect(query.matches(el, '#ampEl')).to.be.false;\n      });\n    });","file":"unit/core/dom/test-query.js","skipped":false,"dir":"test"},{"name":"finds element by tagname","suites":["matches"],"updatePoint":{"line":95,"column":32,"index":3964},"line":95,"code":"    it('finds element by tagname', () => {\n      expect(query.matches(div, 'div')).to.be.true;\n      [ampEl, img1, iframe].map(el => {\n        expect(query.matches(el, 'div')).to.be.false;\n      });\n    });","file":"unit/core/dom/test-query.js","skipped":false,"dir":"test"},{"name":"should find itself","suites":["closest"],"updatePoint":{"line":103,"column":26,"index":4201},"line":103,"code":"    it('should find itself', () => {\n      const element = document.createElement('div');\n      const child = document.createElement('div');\n      element.appendChild(child);\n      expect(query.closest(child, () => true)).to.equal(child);\n      expect(query.closestNode(child, () => true)).to.equal(child);\n      expect(query.closestAncestorElementBySelector(child, 'div')).to.equal(child);\n      expect(query.closestAncestorElementBySelector(child, 'DIV')).to.equal(child);\n    });","file":"unit/core/dom/test-query.js","skipped":false,"dir":"test"},{"name":"should stop search at opt_stopAt","suites":["closest"],"updatePoint":{"line":112,"column":40,"index":4698},"line":112,"code":"    it('should stop search at opt_stopAt', () => {\n      const cbSpy = env.sandbox.spy();\n      const cb = el => {\n        cbSpy();\n        return el.tagName == 'DIV';\n      };\n      const element = document.createElement('div');\n      const child = document.createElement('p');\n      const grandchild = document.createElement('img');\n      child.appendChild(grandchild);\n      element.appendChild(child);\n      expect(query.closest(grandchild, cb)).to.equal(element);\n      expect(cbSpy).to.be.calledThrice;\n      expect(query.closest(grandchild, cb, child)).to.be.null;\n      expect(cbSpy).to.have.callCount(4);\n    });","file":"unit/core/dom/test-query.js","skipped":false,"dir":"test"},{"name":"should find first match","suites":["closest"],"updatePoint":{"line":128,"column":31,"index":5311},"line":128,"code":"    it('should find first match', () => {\n      const parent = document.createElement('parent');\n      const element = document.createElement('element');\n      parent.appendChild(element);\n      const child = document.createElement('child');\n      element.appendChild(child);\n      expect(query.closest(child, e => e.tagName == 'CHILD')).to.equal(child);\n      expect(query.closestNode(child, e => e.tagName == 'CHILD')).to.equal(child);\n      expect(query.closestAncestorElementBySelector(child, 'child')).to.equal(child);\n      expect(query.closest(child, e => e.tagName == 'ELEMENT')).to.equal(element);\n      expect(query.closestNode(child, e => e.tagName == 'ELEMENT')).to.equal(element);\n      expect(query.closestAncestorElementBySelector(child, 'element')).to.equal(element);\n      expect(query.closest(child, e => e.tagName == 'PARENT')).to.equal(parent);\n      expect(query.closestNode(child, e => e.tagName == 'PARENT')).to.equal(parent);\n      expect(query.closestAncestorElementBySelector(child, 'parent')).to.equal(parent);\n    });","file":"unit/core/dom/test-query.js","skipped":false,"dir":"test"},{"name":"closestNode should find nodes as well as elements","suites":["closest"],"updatePoint":{"line":145,"column":55,"index":6387},"line":145,"code":"  it('closestNode should find nodes as well as elements', () => {\n    const fragment = document.createDocumentFragment();\n    const element = document.createElement('div');\n    fragment.appendChild(element);\n    const text = document.createTextNode('abc');\n    element.appendChild(text);\n    expect(query.closestNode(text, () => true)).to.equal(text);\n    expect(query.closestNode(text, isElement)).to.equal(element);\n    expect(query.closestNode(text, n => n.nodeType == 11)).to.equal(fragment);\n  });","file":"unit/core/dom/test-query.js","skipped":false,"dir":"test"},{"name":"closestAncestorElementBySelector should find first match","suites":["closest"],"updatePoint":{"line":155,"column":62,"index":6897},"line":155,"code":"  it('closestAncestorElementBySelector should find first match', () => {\n    const parent = document.createElement('parent');\n    parent.className = 'parent';\n    parent.id = 'parent';\n    const element = document.createElement('element');\n    element.id = 'element';\n    element.className = 'element';\n    parent.appendChild(element);\n    const child = document.createElement('child');\n    child.id = 'child';\n    child.className = 'child';\n    element.appendChild(child);\n    expect(query.closestAncestorElementBySelector(child, 'child')).to.equal(child);\n    expect(query.closestAncestorElementBySelector(child, '.child')).to.equal(child);\n    expect(query.closestAncestorElementBySelector(child, '#child')).to.equal(child);\n    expect(query.closestAncestorElementBySelector(child, 'element')).to.equal(element);\n    expect(query.closestAncestorElementBySelector(child, '.element')).to.equal(element);\n    expect(query.closestAncestorElementBySelector(child, '#element')).to.equal(element);\n    expect(query.closestAncestorElementBySelector(child, 'parent')).to.equal(parent);\n    expect(query.closestAncestorElementBySelector(child, '.parent')).to.equal(parent);\n    expect(query.closestAncestorElementBySelector(child, '#parent')).to.equal(parent);\n  });","file":"unit/core/dom/test-query.js","skipped":false,"dir":"test"},{"name":"elementByTag should find first match","suites":["closest"],"updatePoint":{"line":177,"column":42,"index":8137},"line":177,"code":"  it('elementByTag should find first match', () => {\n    const parent = document.createElement('parent');\n    const element1 = document.createElement('element');\n    parent.appendChild(element1);\n    const element2 = document.createElement('element');\n    parent.appendChild(element2);\n    expect(query.elementByTag(parent, 'element')).to.equal(element1);\n    expect(query.elementByTag(parent, 'ELEMENT')).to.equal(element1);\n  });","file":"unit/core/dom/test-query.js","skipped":false,"dir":"test"},{"name":"childElement should find first match","suites":["closest"],"updatePoint":{"line":186,"column":42,"index":8569},"line":186,"code":"  it('childElement should find first match', () => {\n    const parent = document.createElement('parent');\n    const element1 = document.createElement('element1');\n    parent.appendChild(element1);\n    const element2 = document.createElement('element2');\n    parent.appendChild(element2);\n    expect(query.childElement(parent, () => true)).to.equal(element1);\n    expect(query.childElement(parent, e => e.tagName == 'ELEMENT1')).to.equal(element1);\n    expect(query.childElement(parent, e => e.tagName == 'ELEMENT2')).to.equal(element2);\n    expect(query.childElement(parent, e => e.tagName == 'ELEMENT3')).to.be.null;\n  });","file":"unit/core/dom/test-query.js","skipped":false,"dir":"test"},{"name":"childElements should find all matches","suites":["closest"],"updatePoint":{"line":197,"column":43,"index":9194},"line":197,"code":"  it('childElements should find all matches', () => {\n    const parent = document.createElement('parent');\n    const element1 = document.createElement('element1');\n    parent.appendChild(element1);\n    const element2 = document.createElement('element2');\n    parent.appendChild(element2);\n    expect(query.childElements(parent, () => true).length).to.equal(2);\n    expect(query.childElements(parent, e => e.tagName == 'ELEMENT1').length).to.equal(1);\n    expect(query.childElements(parent, e => e.tagName == 'ELEMENT2').length).to.equal(1);\n    expect(query.childElements(parent, e => e.tagName == 'ELEMENT3').length).to.be.equal(0);\n  });","file":"unit/core/dom/test-query.js","skipped":false,"dir":"test"},{"name":"childNodes should find all matches","suites":["closest"],"updatePoint":{"line":208,"column":40,"index":9831},"line":208,"code":"  it('childNodes should find all matches', () => {\n    const parent = document.createElement('parent');\n    parent.appendChild(document.createTextNode('text1'));\n    parent.appendChild(document.createTextNode('text2'));\n    parent.appendChild(document.createElement('element'));\n    expect(query.childNodes(parent, () => true).length).to.equal(3);\n    expect(query.childNodes(parent, node => node.textContent == 'text1').length).to.equal(1);\n    expect(query.childNodes(parent, node => node.textContent == 'text2').length).to.equal(1);\n    expect(query.childNodes(parent, node => node.textContent == 'text3').length).to.equal(0);\n    expect(query.childNodes(parent, node => node.tagName == 'ELEMENT').length).to.equal(1);\n    expect(query.childNodes(parent, node => node.tagName == 'ELEMENT2').length).to.equal(0);\n  });","file":"unit/core/dom/test-query.js","skipped":false,"dir":"test"},{"name":"lastChildElementByAttr should find last match","suites":["closest"],"updatePoint":{"line":283,"column":51,"index":14014},"line":283,"code":"  it('lastChildElementByAttr should find last match', () => {\n    const parent = document.createElement('parent');\n    const element1 = document.createElement('element1');\n    element1.setAttribute('attr1', '1');\n    element1.setAttribute('attr12', '1');\n    parent.appendChild(element1);\n    const element2 = document.createElement('element2');\n    element2.setAttribute('attr2', '2');\n    element2.setAttribute('attr12', '2');\n    parent.appendChild(element2);\n    const element3 = document.createElement('element2');\n    element3.setAttribute('on-child', '');\n    element2.appendChild(element3);\n    expect(query.lastChildElementByAttr(parent, 'attr1')).to.equal(element1);\n    expect(query.lastChildElementByAttr(parent, 'attr2')).to.equal(element2);\n    expect(query.lastChildElementByAttr(parent, 'attr12')).to.equal(element2);\n    expect(query.lastChildElementByAttr(parent, 'attr3')).to.be.null;\n    expect(query.lastChildElementByAttr(parent, 'on-child')).to.be.null;\n  });","file":"unit/core/dom/test-query.js","skipped":false,"dir":"test"},{"name":"ancestorElements should find all matches","suites":["closest"],"updatePoint":{"line":302,"column":46,"index":14992},"line":302,"code":"  it('ancestorElements should find all matches', () => {\n    const parent = document.createElement('parent');\n    const element1 = document.createElement('element1');\n    parent.appendChild(element1);\n    const element2 = document.createElement('element2');\n    element1.appendChild(element2);\n    expect(query.ancestorElements(element2, () => true).length).to.equal(2);\n    expect(query.ancestorElements(element2, e => e.tagName == 'ELEMENT1').length).to.equal(1);\n    expect(query.ancestorElements(element1, e => e.tagName == 'PARENT').length).to.equal(1);\n    expect(query.ancestorElements(parent, e => e.tagName == 'ELEMENT3').length).to.be.equal(0);\n  });","file":"unit/core/dom/test-query.js","skipped":false,"dir":"test"},{"name":"ancestorElementsByTag should find all matches","suites":["closest"],"updatePoint":{"line":313,"column":51,"index":15658},"line":313,"code":"  it('ancestorElementsByTag should find all matches', () => {\n    const parent = document.createElement('parent');\n    const element1 = document.createElement('element1');\n    parent.appendChild(element1);\n    const element2 = document.createElement('element2');\n    element1.appendChild(element2);\n    expect(query.ancestorElementsByTag(element2, 'ELEMENT1').length).to.equal(1);\n    expect(query.ancestorElementsByTag(element1, 'PARENT').length).to.equal(1);\n    expect(query.ancestorElementsByTag(element2, 'ELEMENT3').length).to.be.equal(0);\n  });","file":"unit/core/dom/test-query.js","skipped":false,"dir":"test"},{"name":"should include self in shallow mode and include placeholder","suites":["forAllWithin"],"updatePoint":{"line":78,"column":67,"index":2312},"line":78,"code":"    it('should include self in shallow mode and include placeholder', () => {\n      forAllWithin(ampGrandparent, INCLUDE_SELF, !DEEP, callback);\n      expect(callback).to.be.calledTwice.calledWith(ampGrandparent).calledWith(ampGrandparent.placeholderAmpChild);\n      // Shouldn't be called for a placeholder grandchild.\n      expect(callback).to.not.be.calledWith(ampGrandparent.placeholderAmpGrandchild);\n    });","file":"unit/core/dom/test-resource-container-helper.js","skipped":false,"dir":"test"},{"name":"should only include the nearest first element in includeSelf/shallow mode","suites":["forAllWithin"],"updatePoint":{"line":84,"column":81,"index":2740},"line":84,"code":"    it('should only include the nearest first element in includeSelf/shallow mode', () => {\n      forAllWithin(tree, INCLUDE_SELF, !DEEP, callback);\n      expect(callback).to.be.calledTwice.calledWith(ampGrandparent).calledWith(ampGrandparentSibling);\n    });","file":"unit/core/dom/test-resource-container-helper.js","skipped":false,"dir":"test"},{"name":"should only include shallow elements in shallow mode not including self","suites":["forAllWithin"],"updatePoint":{"line":88,"column":79,"index":2998},"line":88,"code":"    it('should only include shallow elements in shallow mode not including self', () => {\n      forAllWithin(ampGrandparent, !INCLUDE_SELF, !DEEP, callback);\n      expect(callback).to.be.calledThrice.calledWith(ampParent).calledWith(ampParentSibling).calledWith(ampGrandparent.placeholderAmpChild);\n    });","file":"unit/core/dom/test-resource-container-helper.js","skipped":false,"dir":"test"},{"name":"should include self in deep mode","suites":["forAllWithin"],"updatePoint":{"line":92,"column":40,"index":3266},"line":92,"code":"    it('should include self in deep mode', () => {\n      forAllWithin(ampParent, INCLUDE_SELF, DEEP, callback);\n      expect(callback).to.not.be.calledWith(ampGrandparent);\n      expect(callback).to.be.calledWith(ampParent);\n      expect(callback).to.be.calledWith(ampChild1);\n      expect(callback).to.be.calledWith(ampChild2);\n\n      // And placeholders.\n      expect(callback).to.be.calledWith(ampParent.placeholderAmpChild);\n    });","file":"unit/core/dom/test-resource-container-helper.js","skipped":false,"dir":"test"},{"name":"should include all children in deep/non-includeSelf mode","suites":["forAllWithin"],"updatePoint":{"line":102,"column":64,"index":3727},"line":102,"code":"    it('should include all children in deep/non-includeSelf mode', () => {\n      forAllWithin(ampParent, !INCLUDE_SELF, DEEP, callback);\n      expect(callback).to.not.be.calledWith(ampParent);\n      expect(callback).to.be.calledWith(ampChild1);\n      expect(callback).to.be.calledWith(ampChild2);\n\n      // And placeholders.\n      expect(callback).to.be.calledWith(ampParent.placeholderAmpChild);\n    });","file":"unit/core/dom/test-resource-container-helper.js","skipped":false,"dir":"test"},{"name":"should support array for container","suites":["forAllWithin"],"updatePoint":{"line":111,"column":42,"index":4110},"line":111,"code":"    it('should support array for container', () => {\n      forAllWithin([ampChild1, ampChild2], INCLUDE_SELF, DEEP, callback);\n      expect(callback).to.be.calledWith(ampChild1);\n      expect(callback).to.be.calledWith(ampChild2);\n    });","file":"unit/core/dom/test-resource-container-helper.js","skipped":false,"dir":"test"},{"name":"should call loadAll with shallow mode and includeSelf","suites":["specific callbacks"],"updatePoint":{"line":118,"column":61,"index":4415},"line":118,"code":"    it('should call loadAll with shallow mode and includeSelf', () => {\n      loadAll(ampGrandparent, INCLUDE_SELF);\n      expect(ampGrandparent.ensureLoaded).to.be.calledOnce;\n      expect(ampGrandparent.placeholderAmpChild.ensureLoaded).to.be.calledOnce;\n      expect(ampParent.ensureLoaded).to.not.be.called;\n      expect(ampParentSibling.ensureLoaded).to.not.be.called;\n      expect(ampGrandparentSibling.ensureLoaded).to.not.be.called;\n    });","file":"unit/core/dom/test-resource-container-helper.js","skipped":false,"dir":"test"},{"name":"should call loadAll with shallow mode and not includeSelf","suites":["specific callbacks"],"updatePoint":{"line":126,"column":65,"index":4868},"line":126,"code":"    it('should call loadAll with shallow mode and not includeSelf', () => {\n      loadAll(ampGrandparent, !INCLUDE_SELF);\n      expect(ampGrandparent.ensureLoaded).to.not.be.called;\n      expect(ampGrandparent.placeholderAmpChild.ensureLoaded).to.be.calledOnce;\n      expect(ampParent.ensureLoaded).to.be.calledOnce;\n      expect(ampParentSibling.ensureLoaded).to.be.calledOnce;\n      expect(ampGrandparentSibling.ensureLoaded).to.not.be.called;\n    });","file":"unit/core/dom/test-resource-container-helper.js","skipped":false,"dir":"test"},{"name":"should call pauseAll with deep mode and includeSelf","suites":["specific callbacks"],"updatePoint":{"line":134,"column":59,"index":5316},"line":134,"code":"    it('should call pauseAll with deep mode and includeSelf', () => {\n      pauseAll(ampGrandparent, INCLUDE_SELF);\n      expect(ampGrandparent.pause).to.be.calledOnce;\n      expect(ampGrandparent.placeholderAmpChild.pause).to.be.calledOnce;\n      expect(ampParent.pause).to.be.calledOnce;\n      expect(ampParentSibling.pause).to.be.calledOnce;\n      expect(ampChild1.pause).to.be.calledOnce;\n      expect(ampChild2.pause).to.be.calledOnce;\n      expect(ampGrandparentSibling.pause).to.not.be.called;\n    });","file":"unit/core/dom/test-resource-container-helper.js","skipped":false,"dir":"test"},{"name":"should call pauseAll with deep mode and not includeSelf","suites":["specific callbacks"],"updatePoint":{"line":144,"column":63,"index":5829},"line":144,"code":"    it('should call pauseAll with deep mode and not includeSelf', () => {\n      pauseAll(ampGrandparent, !INCLUDE_SELF);\n      expect(ampGrandparent.pause).to.not.be.called;\n      expect(ampGrandparent.placeholderAmpChild.pause).to.be.calledOnce;\n      expect(ampParent.pause).to.be.calledOnce;\n      expect(ampParentSibling.pause).to.be.calledOnce;\n      expect(ampChild1.pause).to.be.calledOnce;\n      expect(ampChild2.pause).to.be.calledOnce;\n      expect(ampGrandparentSibling.pause).to.not.be.called;\n    });","file":"unit/core/dom/test-resource-container-helper.js","skipped":false,"dir":"test"},{"name":"should call unmountAll with deep mode and includeSelf","suites":["specific callbacks"],"updatePoint":{"line":154,"column":61,"index":6341},"line":154,"code":"    it('should call unmountAll with deep mode and includeSelf', () => {\n      unmountAll(ampGrandparent, INCLUDE_SELF);\n      expect(ampGrandparent.unmount).to.be.calledOnce;\n      expect(ampGrandparent.placeholderAmpChild.unmount).to.be.calledOnce;\n      expect(ampParent.unmount).to.be.calledOnce;\n      expect(ampParentSibling.unmount).to.be.calledOnce;\n      expect(ampChild1.unmount).to.be.calledOnce;\n      expect(ampChild2.unmount).to.be.calledOnce;\n      expect(ampGrandparentSibling.unmount).to.not.be.called;\n    });","file":"unit/core/dom/test-resource-container-helper.js","skipped":false,"dir":"test"},{"name":"should call unmountAll with deep mode and not includeSelf","suites":["specific callbacks"],"updatePoint":{"line":164,"column":65,"index":6872},"line":164,"code":"    it('should call unmountAll with deep mode and not includeSelf', () => {\n      unmountAll(ampGrandparent, !INCLUDE_SELF);\n      expect(ampGrandparent.unmount).to.not.be.called;\n      expect(ampGrandparent.placeholderAmpChild.unmount).to.be.calledOnce;\n      expect(ampParent.unmount).to.be.calledOnce;\n      expect(ampParentSibling.unmount).to.be.calledOnce;\n      expect(ampChild1.unmount).to.be.calledOnce;\n      expect(ampChild2.unmount).to.be.calledOnce;\n      expect(ampGrandparentSibling.unmount).to.not.be.called;\n    });","file":"unit/core/dom/test-resource-container-helper.js","skipped":false,"dir":"test"},{"name":"should accept single source, default to 1px","suites":["parseSrcset"],"updatePoint":{"line":15,"column":51,"index":603},"line":15,"code":"    it('should accept single source, default to 1px', () => {\n      test(' \\n image \\n ', [{\n        url: 'image',\n        dpr: 1\n      }]);\n    });","file":"unit/core/dom/test-srcset.js","skipped":false,"dir":"test"},{"name":"should ignore empty source","suites":["parseSrcset"],"updatePoint":{"line":21,"column":34,"index":735},"line":21,"code":"    it('should ignore empty source', () => {\n      test(' \\n image \\n, ', [{\n        url: 'image',\n        dpr: 1\n      }]);\n      test(' , \\n image \\n, ', [{\n        url: 'image',\n        dpr: 1\n      }]);\n    });","file":"unit/core/dom/test-srcset.js","skipped":false,"dir":"test"},{"name":"should accept multiple sources, default to 1x","suites":["parseSrcset"],"updatePoint":{"line":31,"column":53,"index":969},"line":31,"code":"    it('should accept multiple sources, default to 1x', () => {\n      test(' \\n image 2x \\n\\t, image2 \\n', [{\n        url: 'image2',\n        dpr: 1\n      }, {\n        url: 'image',\n        dpr: 2\n      }]);\n    });","file":"unit/core/dom/test-srcset.js","skipped":false,"dir":"test"},{"name":"should accept width-based sources","suites":["parseSrcset"],"updatePoint":{"line":40,"column":41,"index":1172},"line":40,"code":"    it('should accept width-based sources', () => {\n      test(' \\n image-100 100w\\n, image 10w', [{\n        url: 'image',\n        width: 10\n      }, {\n        url: 'image-100',\n        width: 100\n      }]);\n    });","file":"unit/core/dom/test-srcset.js","skipped":false,"dir":"test"},{"name":"should accept dpr-based sources","suites":["parseSrcset"],"updatePoint":{"line":49,"column":39,"index":1386},"line":49,"code":"    it('should accept dpr-based sources', () => {\n      test(' \\n image-x1.5 1.5x\\n , image', [{\n        url: 'image',\n        dpr: 1\n      }, {\n        url: 'image-x1.5',\n        dpr: 1.5\n      }]);\n    });","file":"unit/core/dom/test-srcset.js","skipped":false,"dir":"test"},{"name":"should tolerate other sources","suites":["parseSrcset"],"updatePoint":{"line":58,"column":37,"index":1592},"line":58,"code":"    it('should tolerate other sources', () => {\n      test('image2x 2x, image2h 2h', [{\n        url: 'image2x',\n        dpr: 2\n      }]);\n      test('image2x 2x, image2h 2H', [{\n        url: 'image2x',\n        dpr: 2\n      }]);\n    });","file":"unit/core/dom/test-srcset.js","skipped":false,"dir":"test"},{"name":"should parse fractions","suites":["parseSrcset"],"updatePoint":{"line":68,"column":30,"index":1821},"line":68,"code":"    it('should parse fractions', () => {\n      test('image-x1.5 1.5x', [{\n        url: 'image-x1.5',\n        dpr: 1.5\n      }]);\n      test('image-x1.5 001x', [{\n        url: 'image-x1.5',\n        dpr: 1\n      }]);\n      test('image-x1.5 1.00000x', [{\n        url: 'image-x1.5',\n        dpr: 1\n      }]);\n      test('image-x1.5 0.1x', [{\n        url: 'image-x1.5',\n        dpr: 0.1\n      }]);\n      test('image-x1.5 0000.1x', [{\n        url: 'image-x1.5',\n        dpr: 0.1\n      }]);\n    });","file":"unit/core/dom/test-srcset.js","skipped":false,"dir":"test"},{"name":"should tolerate negatives","suites":["parseSrcset"],"updatePoint":{"line":90,"column":33,"index":2316},"line":90,"code":"    it('should tolerate negatives', () => {\n      test('image-x1.5 -1.5x', [{\n        url: 'image-x1.5',\n        dpr: -1.5\n      }]);\n      test('image-x1.5 -001x', [{\n        url: 'image-x1.5',\n        dpr: -1\n      }]);\n    });","file":"unit/core/dom/test-srcset.js","skipped":false,"dir":"test"},{"name":"should accept several sources","suites":["parseSrcset"],"updatePoint":{"line":100,"column":37,"index":2550},"line":100,"code":"    it('should accept several sources', () => {\n      test(' \\n image1 100w\\n , \\n image2 50w\\n , image3 10.5w', [{\n        url: 'image3',\n        width: 10\n      }, {\n        url: 'image2',\n        width: 50\n      }, {\n        url: 'image1',\n        width: 100\n      }]);\n    });","file":"unit/core/dom/test-srcset.js","skipped":false,"dir":"test"},{"name":"should accept commas in URLs","suites":["parseSrcset"],"updatePoint":{"line":112,"column":36,"index":2830},"line":112,"code":"    it('should accept commas in URLs', () => {\n      test(' \\n image,1 100w\\n , \\n image,2 50w \\n', [{\n        url: 'image,2',\n        width: 50\n      }, {\n        url: 'image,1',\n        width: 100\n      }]);\n      test(' \\n image,100w 100w\\n , \\n image,20w 50w \\n', [{\n        url: 'image,20w',\n        width: 50\n      }, {\n        url: 'image,100w',\n        width: 100\n      }]);\n      test(' \\n image,2 2x\\n , \\n image,1', [{\n        url: 'image,1',\n        dpr: 1\n      }, {\n        url: 'image,2',\n        dpr: 2\n      }]);\n      test(' \\n image,2x 2x\\n , \\n image,1x', [{\n        url: 'image,1x',\n        dpr: 1\n      }, {\n        url: 'image,2x',\n        dpr: 2\n      }]);\n      test(' \\n image,2 , \\n  image,1 2x\\n', [{\n        url: 'image,2',\n        dpr: 1\n      }, {\n        url: 'image,1',\n        dpr: 2\n      }]);\n      test(' \\n image,1x , \\n  image,2x 2x\\n', [{\n        url: 'image,1x',\n        dpr: 1\n      }, {\n        url: 'image,2x',\n        dpr: 2\n      }]);\n      test(' \\n image,1 \\n ', [{\n        url: 'image,1',\n        dpr: 1\n      }]);\n      test(' \\n image,1x \\n ', [{\n        url: 'image,1x',\n        dpr: 1\n      }]);\n    });","file":"unit/core/dom/test-srcset.js","skipped":false,"dir":"test"},{"name":"should accept no-whitestpace","suites":["parseSrcset"],"updatePoint":{"line":164,"column":36,"index":3987},"line":164,"code":"    it('should accept no-whitestpace', () => {\n      test('image 100w,image 50w', [{\n        url: 'image',\n        width: 50\n      }, {\n        url: 'image',\n        width: 100\n      }]);\n      test('image,1 100w,image,2 50w', [{\n        url: 'image,2',\n        width: 50\n      }, {\n        url: 'image,1',\n        width: 100\n      }]);\n      test('image,1 2x,image,2', [{\n        url: 'image,2',\n        dpr: 1\n      }, {\n        url: 'image,1',\n        dpr: 2\n      }]);\n      test('image,2 2x', [{\n        url: 'image,2',\n        dpr: 2\n      }]);\n      test('image,1', [{\n        url: 'image,1',\n        dpr: 1\n      }]);\n    });","file":"unit/core/dom/test-srcset.js","skipped":false,"dir":"test"},{"name":"should accept other special chars in URLs","suites":["parseSrcset"],"updatePoint":{"line":195,"column":49,"index":4634},"line":195,"code":"    it('should accept other special chars in URLs', () => {\n      test(' \\n http://im-a+ge;1?&2#3 100w\\n , \\n image;2 50w \\n', [{\n        url: 'image;2',\n        width: 50\n      }, {\n        url: 'http://im-a+ge;1?&2#3',\n        width: 100\n      }]);\n    });","file":"unit/core/dom/test-srcset.js","skipped":false,"dir":"test"},{"name":"should accept false cognitives in URLs","suites":["parseSrcset"],"updatePoint":{"line":204,"column":46,"index":4890},"line":204,"code":"    it('should accept false cognitives in URLs', () => {\n      test(' \\n image,100w 100w\\n , \\n image,20x 50w \\n', [{\n        url: 'image,20x',\n        width: 50\n      }, {\n        url: 'image,100w',\n        width: 100\n      }]);\n      test(' \\n image,1x 2x\\n , \\n image,2x', [{\n        url: 'image,2x',\n        dpr: 1\n      }, {\n        url: 'image,1x',\n        dpr: 2\n      }]);\n      test(' \\n image,1x \\n ', [{\n        url: 'image,1x',\n        dpr: 1\n      }]);\n      test(' \\n image,1w \\n ', [{\n        url: 'image,1w',\n        dpr: 1\n      }]);\n    });","file":"unit/core/dom/test-srcset.js","skipped":false,"dir":"test"},{"name":"should not accept mixed sources","suites":["parseSrcset"],"updatePoint":{"line":228,"column":39,"index":5442},"line":228,"code":"    it('should not accept mixed sources', () => {\n      allowConsoleError(() => {\n        expect(() => {\n          parseSrcset(' \\n image1 100w\\n , \\n image2 1.5x\\n , image3 ');\n        }).to.throw(/Srcset must have width or dpr sources, but not both/);\n      });\n    });","file":"unit/core/dom/test-srcset.js","skipped":false,"dir":"test"},{"name":"should parse misc examples","suites":["parseSrcset"],"updatePoint":{"line":235,"column":34,"index":5709},"line":235,"code":"    it('should parse misc examples', () => {\n      test('image-1x.png 1x, image-2x.png 2x, image-3x.png 3x, image-4x.png 4x', [{\n        url: 'image-1x.png',\n        dpr: 1\n      }, {\n        url: 'image-2x.png',\n        dpr: 2\n      }, {\n        url: 'image-3x.png',\n        dpr: 3\n      }, {\n        url: 'image-4x.png',\n        dpr: 4\n      }]);\n      test('image,one.png', [{\n        url: 'image,one.png',\n        dpr: 1\n      }]);\n    });","file":"unit/core/dom/test-srcset.js","skipped":false,"dir":"test"},{"name":"should select srcset when only srcset available","suites":["srcsetFromElement"],"updatePoint":{"line":274,"column":55,"index":6845},"line":274,"code":"    it('should select srcset when only srcset available', () => {\n      test('image-2x.png 2x, image-1x.png 1x', undefined, [{\n        url: 'image-1x.png',\n        dpr: 1\n      }, {\n        url: 'image-2x.png',\n        dpr: 2\n      }]);\n    });","file":"unit/core/dom/test-srcset.js","skipped":false,"dir":"test"},{"name":"should select srcset when src is empty","suites":["srcsetFromElement"],"updatePoint":{"line":283,"column":46,"index":7081},"line":283,"code":"    it('should select srcset when src is empty', () => {\n      test('image-2x.png 2x, image-1x.png 1x', '', [{\n        url: 'image-1x.png',\n        dpr: 1\n      }, {\n        url: 'image-2x.png',\n        dpr: 2\n      }]);\n    });","file":"unit/core/dom/test-srcset.js","skipped":false,"dir":"test"},{"name":"should select src when only src available","suites":["srcsetFromElement"],"updatePoint":{"line":292,"column":49,"index":7313},"line":292,"code":"    it('should select src when only src available', () => {\n      test(undefined, 'image-0.png', [{\n        url: 'image-0.png',\n        dpr: 1\n      }]);\n    });","file":"unit/core/dom/test-srcset.js","skipped":false,"dir":"test"},{"name":"should select src when only srcset is empty","suites":["srcsetFromElement"],"updatePoint":{"line":298,"column":51,"index":7477},"line":298,"code":"    it('should select src when only srcset is empty', () => {\n      test('', 'image-0.png', [{\n        url: 'image-0.png',\n        dpr: 1\n      }]);\n    });","file":"unit/core/dom/test-srcset.js","skipped":false,"dir":"test"},{"name":"should prefer srcset to src","suites":["srcsetFromElement"],"updatePoint":{"line":304,"column":35,"index":7618},"line":304,"code":"    it('should prefer srcset to src', () => {\n      test('image-2x.png 2x, image-1x.png 1x', 'image-0.png', [{\n        url: 'image-1x.png',\n        dpr: 1\n      }, {\n        url: 'image-2x.png',\n        dpr: 2\n      }]);\n    });","file":"unit/core/dom/test-srcset.js","skipped":false,"dir":"test"},{"name":"should allow non-compliant src with space","suites":["srcsetFromElement"],"updatePoint":{"line":313,"column":49,"index":7861},"line":313,"code":"    it('should allow non-compliant src with space', () => {\n      test(undefined, 'image 0.png', [{\n        url: 'image 0.png',\n        dpr: 1\n      }]);\n    });","file":"unit/core/dom/test-srcset.js","skipped":false,"dir":"test"},{"name":"should require srcset or src to be available","suites":["srcsetFromElement"],"updatePoint":{"line":319,"column":52,"index":8026},"line":319,"code":"    it('should require srcset or src to be available', () => {\n      allowConsoleError(() => {\n        expect(() => {\n          srcsetFromElement(document.createElement('div'));\n        }).to.throw(/Either non-empty \"srcset\" or \"src\" attribute must be specified/);\n      });\n    });","file":"unit/core/dom/test-srcset.js","skipped":false,"dir":"test"},{"name":"should construct with undefined width and 1 dpr","suites":["srcsetFromSrc"],"updatePoint":{"line":328,"column":55,"index":8354},"line":328,"code":"    it('should construct with undefined width and 1 dpr', () => {\n      const srcset = srcsetFromSrc('image-0.png');\n      expect(srcset.sources_.length).to.equal(1);\n      const source = srcset.sources_[0];\n      expect(source.url).to.equal('image-0.png');\n      expect(source.width).to.be.undefined;\n      expect(source.dpr).to.equal(1);\n    });","file":"unit/core/dom/test-srcset.js","skipped":false,"dir":"test"},{"name":"should enforce only one type of descriptor per source","suites":["construct"],"updatePoint":{"line":338,"column":61,"index":8746},"line":338,"code":"    it('should enforce only one type of descriptor per source', () => {\n      allowConsoleError(() => {\n        expect(() => {\n          new Srcset([{\n            url: 'image-1000',\n            width: 100,\n            dpr: 2\n          }]);\n        }).to.throw(/Srcset must have width or dpr sources, but not both/);\n      });\n    });","file":"unit/core/dom/test-srcset.js","skipped":false,"dir":"test"},{"name":"should not allow 0-width descriptor","suites":["construct"],"updatePoint":{"line":349,"column":43,"index":9062},"line":349,"code":"    it('should not allow 0-width descriptor', () => {\n      allowConsoleError(() => {\n        expect(() => {\n          new Srcset([{\n            url: 'image-1000',\n            width: 0\n          }]);\n        }).to.throw(/Srcset must have width or dpr sources, but not both/);\n      });\n    });","file":"unit/core/dom/test-srcset.js","skipped":false,"dir":"test"},{"name":"should not allow 0-dpr descriptor","suites":["construct"],"updatePoint":{"line":359,"column":41,"index":9354},"line":359,"code":"    it('should not allow 0-dpr descriptor', () => {\n      allowConsoleError(() => {\n        expect(() => {\n          new Srcset([{\n            url: 'image-1000',\n            dpr: 0\n          }]);\n        }).to.throw(/Srcset must have width or dpr sources, but not both/);\n      });\n    });","file":"unit/core/dom/test-srcset.js","skipped":false,"dir":"test"},{"name":"should enforce only one type of descriptor total","suites":["construct"],"updatePoint":{"line":369,"column":56,"index":9659},"line":369,"code":"    it('should enforce only one type of descriptor total', () => {\n      allowConsoleError(() => {\n        expect(() => {\n          new Srcset([{\n            url: 'image-1000',\n            width: 100\n          }, {\n            url: 'image-2x',\n            dpr: 2\n          }]);\n        }).to.throw(/Srcset must have width or dpr sources, but not both/);\n      });\n    });","file":"unit/core/dom/test-srcset.js","skipped":false,"dir":"test"},{"name":"should not allow duplicate sources","suites":["construct"],"updatePoint":{"line":382,"column":42,"index":10017},"line":382,"code":"    it('should not allow duplicate sources', () => {\n      allowConsoleError(() => {\n        expect(() => {\n          new Srcset([{\n            url: 'image',\n            width: 100\n          }, {\n            url: 'image',\n            width: 100\n          }]);\n        }).to.throw(/Duplicate width/);\n      });\n      allowConsoleError(() => {\n        expect(() => {\n          new Srcset([{\n            url: 'image',\n            dpr: 2\n          }, {\n            url: 'image',\n            dpr: 2\n          }]);\n        }).to.throw(/Duplicate dpr/);\n      });\n    });","file":"unit/core/dom/test-srcset.js","skipped":false,"dir":"test"},{"name":"select by width","suites":["select"],"updatePoint":{"line":408,"column":23,"index":10598},"line":408,"code":"    it('select by width', () => {\n      const srcset = parseSrcset('image-1000 1000w, image-500 500w, image-250 250w, image 50w');\n\n      // DPR = 1\n      expect(srcset.select(2000, 1)).to.equal('image-1000');\n      expect(srcset.select(1100, 1)).to.equal('image-1000');\n      expect(srcset.select(1000, 1)).to.equal('image-1000');\n      expect(srcset.select(900, 1)).to.equal('image-1000');\n      expect(srcset.select(800, 1)).to.equal('image-1000');\n      // select image-1000\n      expect(srcset.select(700, 1)).to.equal('image-1000');\n      expect(srcset.select(600, 1)).to.equal('image-500');\n      expect(srcset.select(500, 1)).to.equal('image-500');\n      expect(srcset.select(400, 1)).to.equal('image-500');\n      expect(srcset.select(300, 1)).to.equal('image-250');\n      expect(srcset.select(200, 1)).to.equal('image-250');\n      expect(srcset.select(100, 1)).to.equal('image-250');\n      expect(srcset.select(50, 1)).to.equal('image');\n      expect(srcset.select(1, 1)).to.equal('image');\n\n      // DPR = 2\n      expect(srcset.select(2000, 2)).to.equal('image-1000');\n      expect(srcset.select(1100, 2)).to.equal('image-1000');\n      expect(srcset.select(1000, 2)).to.equal('image-1000');\n      expect(srcset.select(900, 2)).to.equal('image-1000');\n      expect(srcset.select(800, 2)).to.equal('image-1000');\n      expect(srcset.select(700, 2)).to.equal('image-1000');\n      expect(srcset.select(600, 2)).to.equal('image-1000');\n      expect(srcset.select(500, 2)).to.equal('image-1000');\n      expect(srcset.select(400, 2)).to.equal('image-1000');\n      expect(srcset.select(300, 2)).to.equal('image-500');\n      expect(srcset.select(200, 2)).to.equal('image-500');\n      expect(srcset.select(100, 2)).to.equal('image-250');\n      expect(srcset.select(50, 2)).to.equal('image-250');\n      expect(srcset.select(1, 2)).to.equal('image');\n    });","file":"unit/core/dom/test-srcset.js","skipped":false,"dir":"test"},{"name":"select by width with preference toward higher width","suites":["select"],"updatePoint":{"line":444,"column":59,"index":12491},"line":444,"code":"    it('select by width with preference toward higher width', () => {\n      const srcset = parseSrcset('image-1000 1000w, image-500 500w, image-250 250w, image 50w');\n\n      // For DPR=1 and 2.\n      // Bull's eye.\n      expect(srcset.select(500, 1)).to.equal('image-500');\n      expect(srcset.select(250, 2)).to.equal('image-500');\n\n      // Right in between: (1000 + 500)/2 = 750 -> preference for the higher\n      // value.\n      expect(srcset.select(750, 1)).to.equal('image-1000');\n      expect(srcset.select(375, 2)).to.equal('image-1000');\n\n      // Even higher: 850 -> higher value.\n      expect(srcset.select(850, 1)).to.equal('image-1000');\n      expect(srcset.select(425, 2)).to.equal('image-1000');\n\n      // Slightly lower: ~10% -> 740 -> still higher value.\n      expect(srcset.select(740, 1)).to.equal('image-1000');\n      expect(srcset.select(370, 2)).to.equal('image-1000');\n\n      // Lower than threshold but difference ratio (730/500 = 1.46) too high ->\n      // higher value\n      expect(srcset.select(730, 1)).to.equal('image-1000');\n      expect(srcset.select(365, 2)).to.equal('image-1000');\n\n      // Lower than threshold and difference ratio (600/500 = 1.2) is low enough\n      // -> lower value\n      expect(srcset.select(600, 1)).to.equal('image-500');\n      expect(srcset.select(300, 2)).to.equal('image-500');\n    });","file":"unit/core/dom/test-srcset.js","skipped":false,"dir":"test"},{"name":"select by dpr","suites":["select"],"updatePoint":{"line":475,"column":21,"index":13800},"line":475,"code":"    it('select by dpr', () => {\n      const srcset = parseSrcset('image-3x 3x, image-2x 2x, image 1x');\n      expect(srcset.select(2000, 4)).to.equal('image-3x', 'dpr=4');\n      expect(srcset.select(2000, 3.5)).to.equal('image-3x', 'dpr=3.5');\n      expect(srcset.select(2000, 3)).to.equal('image-3x', 'dpr=3');\n      expect(srcset.select(2000, 2.7)).to.equal('image-3x', 'dpr=2.7');\n      expect(srcset.select(2000, 2.5)).to.equal('image-3x', 'dpr=2.5');\n      expect(srcset.select(2000, 2.3)).to.equal('image-2x', 'dpr=2.3');\n      expect(srcset.select(2000, 2)).to.equal('image-2x', 'dpr=2');\n      expect(srcset.select(2000, 1.7)).to.equal('image-2x', 'dpr=1.7');\n      expect(srcset.select(2000, 1.5)).to.equal('image-2x', 'dpr=1.5');\n      expect(srcset.select(2000, 1.3)).to.equal('image', 'dpr=1.3');\n      expect(srcset.select(2000, 1.2)).to.equal('image', 'dpr=1.2');\n      expect(srcset.select(2000, 1)).to.equal('image', 'dpr=1');\n    });","file":"unit/core/dom/test-srcset.js","skipped":false,"dir":"test"},{"name":"generates static html tree","suites":["html"],"updatePoint":{"line":4,"column":34,"index":182},"line":4,"code":"    it('generates static html tree', () => {\n      const div = htmlFor(document)`<div attr=\"test\"><p class=\"er\"></p></div>`;\n      expect(div.tagName).to.equal('DIV');\n      expect(div.getAttribute('attr')).to.equal('test');\n      expect(div.parentNode).to.be.null;\n      expect(div.nextSibling).to.be.null;\n      const p = div.firstChild;\n      expect(p.tagName).to.equal('P');\n      expect(p.getAttribute('class')).to.equal('er');\n      expect(p.nextSibling).to.be.null;\n    });","file":"unit/core/dom/test-static-template.js","skipped":false,"dir":"test"},{"name":"works as a variable","suites":["html"],"updatePoint":{"line":15,"column":27,"index":656},"line":15,"code":"    it('works as a variable', () => {\n      const html = htmlFor(document);\n      const div = html` <div attr=\"test\"><p class=\"er\"></p></div> `;\n      expect(div.tagName).to.equal('DIV');\n      expect(div.getAttribute('attr')).to.equal('test');\n      expect(div.parentNode).to.be.null;\n      expect(div.nextSibling).to.be.null;\n      const p = div.firstChild;\n      expect(p.tagName).to.equal('P');\n      expect(p.getAttribute('class')).to.equal('er');\n      expect(p.nextSibling).to.be.null;\n    });","file":"unit/core/dom/test-static-template.js","skipped":false,"dir":"test"},{"name":"creates tree with last ownerDocument","suites":["html"],"updatePoint":{"line":27,"column":44,"index":1174},"line":27,"code":"    it('creates tree with last ownerDocument', () => {\n      // Setup\n      const iframe = document.createElement('iframe');\n      document.body.appendChild(iframe);\n      const iDoc = iframe.contentDocument;\n      const html = htmlFor(document);\n      let div = html` <div></div> `;\n      expect(div.ownerDocument).to.equal(document);\n      div = htmlFor(iDoc)`<div></div>`;\n      expect(div.ownerDocument).to.equal(iDoc);\n      div = html` <div></div> `;\n      expect(div.ownerDocument).to.equal(iDoc);\n\n      // Cleanup\n      document.body.removeChild(iframe);\n    });","file":"unit/core/dom/test-static-template.js","skipped":false,"dir":"test"},{"name":"ignores text before first element","suites":["html"],"updatePoint":{"line":43,"column":41,"index":1743},"line":43,"code":"    it('ignores text before first element', () => {\n      const div = htmlFor(document)`test<div></div>`;\n      expect(div.outerHTML).to.not.include('test');\n    });","file":"unit/core/dom/test-static-template.js","skipped":false,"dir":"test"},{"name":"ignores text after first element","suites":["html"],"updatePoint":{"line":47,"column":40,"index":1908},"line":47,"code":"    it('ignores text after first element', () => {\n      const div = htmlFor(document)`<div></div>test`;\n      expect(div.outerHTML).to.not.include('test');\n    });","file":"unit/core/dom/test-static-template.js","skipped":false,"dir":"test"},{"name":"rejects multiple root elements","suites":["html"],"updatePoint":{"line":51,"column":38,"index":2071},"line":51,"code":"    it('rejects multiple root elements', () => {\n      expect(() => {\n        allowConsoleError(() => {\n          htmlFor(document)`<div></div><div></div>`;\n        });\n      }).to.throw('template');\n    });","file":"unit/core/dom/test-static-template.js","skipped":false,"dir":"test"},{"name":"rejects non-existent root","suites":["html"],"updatePoint":{"line":58,"column":33,"index":2274},"line":58,"code":"    it('rejects non-existent root', () => {\n      expect(() => {\n        allowConsoleError(() => {\n          htmlFor(document)``;\n        });\n      }).to.throw('template');\n    });","file":"unit/core/dom/test-static-template.js","skipped":false,"dir":"test"},{"name":"rejects dynamic templates","suites":["html"],"updatePoint":{"line":65,"column":33,"index":2455},"line":65,"code":"    it('rejects dynamic templates', () => {\n      expect(() => {\n        allowConsoleError(() => {\n          htmlFor(document)`<div>${'text'}</div>`;\n        });\n      }).to.throw('template');\n    });","file":"unit/core/dom/test-static-template.js","skipped":false,"dir":"test"},{"name":"finds all elements with ref attribute","suites":["htmlRefs"],"updatePoint":{"line":74,"column":45,"index":2705},"line":74,"code":"    it('finds all elements with ref attribute', () => {\n      // Prove it doesn't need html helper\n      const el = document.createElement('div');\n      el. /*TEST*/innerHTML = '<div ref=\"test\"><span ref=\"s\"></span></div><div ref=\"d\"></div>';\n      const refs = htmlRefs(el);\n      expect(refs).to.deep.equal({\n        test: el.firstChild,\n        s: el.firstChild.firstChild,\n        d: el.lastChild\n      });\n    });","file":"unit/core/dom/test-static-template.js","skipped":false,"dir":"test"},{"name":"ignores element if it has ref attribute","suites":["htmlRefs"],"updatePoint":{"line":85,"column":47,"index":3126},"line":85,"code":"    it('ignores element if it has ref attribute', () => {\n      const el = htmlFor(document)`<div ref=\"test\"></div>`;\n      const refs = htmlRefs(el);\n      expect(refs).to.deep.equal({});\n    });","file":"unit/core/dom/test-static-template.js","skipped":false,"dir":"test"},{"name":"rejects empty ref attribute","suites":["htmlRefs"],"updatePoint":{"line":90,"column":35,"index":3311},"line":90,"code":"    it('rejects empty ref attribute', () => {\n      const el = htmlFor(document)`<div><div ref=\"\"></div></div>`;\n      expect(() => {\n        allowConsoleError(() => {\n          htmlRefs(el);\n        });\n      }).to.throw('ref');\n    });","file":"unit/core/dom/test-static-template.js","skipped":false,"dir":"test"},{"name":"rejects duplicate ref attribute","suites":["htmlRefs"],"updatePoint":{"line":98,"column":39,"index":3553},"line":98,"code":"    it('rejects duplicate ref attribute', () => {\n      const el = htmlFor(document)`<div>\n            <div ref=\"test\"></div>\n            <div ref=\"test\"</div>\n          </div>`;\n      expect(() => {\n        allowConsoleError(() => {\n          htmlRefs(el);\n        });\n      }).to.throw('ref');\n    });","file":"unit/core/dom/test-static-template.js","skipped":false,"dir":"test"},{"name":"toggle","suites":[],"updatePoint":{"line":3,"column":12,"index":108},"line":3,"code":"  it('toggle', () => {\n    const element = document.createElement('div');\n    st.toggle(element, true);\n    expect(element).to.not.have.attribute('hidden');\n    st.toggle(element, false);\n    expect(element).to.have.attribute('hidden');\n    st.toggle(element, true);\n    expect(element).to.not.have.attribute('hidden');\n    st.toggle(element);\n    expect(element).to.have.attribute('hidden');\n    st.toggle(element);\n    expect(element).to.not.have.attribute('hidden');\n  });","file":"unit/core/dom/test-style.js","skipped":false,"dir":"test"},{"name":"setStyle","suites":[],"updatePoint":{"line":16,"column":14,"index":586},"line":16,"code":"  it('setStyle', () => {\n    const element = document.createElement('div');\n    st.setStyle(element, 'width', '1px');\n    expect(element.style.width).to.equal('1px');\n  });","file":"unit/core/dom/test-style.js","skipped":false,"dir":"test"},{"name":"setStyle with vendor prefix","suites":[],"updatePoint":{"line":21,"column":33,"index":778},"line":21,"code":"  it('setStyle with vendor prefix', () => {\n    const element = {\n      style: {\n        WebkitTransitionDuration: '',\n        setProperty: (name, value) => {\n          element.style[name] = value;\n        }\n      }\n    };\n    st.setStyle(element, 'transitionDuration', '1s', undefined, true);\n    expect(element.style['-webkit-transition-duration']).to.equal('1s');\n  });","file":"unit/core/dom/test-style.js","skipped":false,"dir":"test"},{"name":"setStyle with custom var","suites":[],"updatePoint":{"line":33,"column":30,"index":1148},"line":33,"code":"  it('setStyle with custom var', () => {\n    const element = document.createElement('div');\n    st.setStyle(element, '--x', '1px');\n    expect(element.style.getPropertyValue('--x')).to.equal('1px');\n    expect(st.getStyle(element, '--x')).to.equal('1px');\n  });","file":"unit/core/dom/test-style.js","skipped":false,"dir":"test"},{"name":"setStyles","suites":[],"updatePoint":{"line":39,"column":15,"index":1395},"line":39,"code":"  it('setStyles', () => {\n    const element = document.createElement('div');\n    st.setStyles(element, {\n      width: st.px(101),\n      height: st.px(102)\n    });\n    expect(element.style.width).to.equal('101px');\n    expect(element.style.height).to.equal('102px');\n  });","file":"unit/core/dom/test-style.js","skipped":false,"dir":"test"},{"name":"setImportantStyles","suites":[],"updatePoint":{"line":48,"column":24,"index":1676},"line":48,"code":"  it('setImportantStyles', () => {\n    const element = document.createElement('div');\n    st.setImportantStyles(element, {\n      width: st.px(101)\n    });\n    expect(element.style.width).to.equal('101px');\n    expect(element.style.getPropertyPriority('width')).to.equal('important');\n  });","file":"unit/core/dom/test-style.js","skipped":false,"dir":"test"},{"name":"setImportantStyles with vendor prefix","suites":[],"updatePoint":{"line":56,"column":43,"index":1985},"line":56,"code":"  it('setImportantStyles with vendor prefix', () => {\n    const spy = env.sandbox.spy();\n    const element = {\n      style: {\n        WebkitTransitionDurationImportant: '',\n        setProperty: spy\n      }\n    };\n    st.setImportantStyles(element, {\n      transitionDurationImportant: '1s'\n    });\n    expect(spy).to.have.been.calledWith('-webkit-transition-duration-important', '1s', 'important');\n  });","file":"unit/core/dom/test-style.js","skipped":false,"dir":"test"},{"name":"px","suites":[],"updatePoint":{"line":69,"column":8,"index":2355},"line":69,"code":"  it('px', () => {\n    expect(st.px(0)).to.equal('0px');\n    expect(st.px(101)).to.equal('101px');\n  });","file":"unit/core/dom/test-style.js","skipped":false,"dir":"test"},{"name":"translateX","suites":[],"updatePoint":{"line":73,"column":16,"index":2468},"line":73,"code":"  it('translateX', () => {\n    expect(st.translateX(101)).to.equal('translateX(101px)');\n    expect(st.translateX('101vw')).to.equal('translateX(101vw)');\n  });","file":"unit/core/dom/test-style.js","skipped":false,"dir":"test"},{"name":"translate","suites":[],"updatePoint":{"line":77,"column":15,"index":2628},"line":77,"code":"  it('translate', () => {\n    expect(st.translate(101, 201)).to.equal('translate(101px, 201px)');\n    expect(st.translate('101vw, 201em')).to.equal('translate(101vw, 201em)');\n    expect(st.translate(101)).to.equal('translate(101px)');\n    expect(st.translate('101vw')).to.equal('translate(101vw)');\n  });","file":"unit/core/dom/test-style.js","skipped":false,"dir":"test"},{"name":"camelCaseToTitleCase","suites":[],"updatePoint":{"line":83,"column":26,"index":2945},"line":83,"code":"  it('camelCaseToTitleCase', () => {\n    const str = 'theQuickBrownFox';\n    expect(st.camelCaseToTitleCase(str)).to.equal('TheQuickBrownFox');\n  });","file":"unit/core/dom/test-style.js","skipped":false,"dir":"test"},{"name":"camelCaseToHyphenCase","suites":[],"updatePoint":{"line":87,"column":27,"index":3096},"line":87,"code":"  it('camelCaseToHyphenCase', () => {\n    expect(st.camelCaseToHyphenCase('paddingTop')).to.equal('padding-top');\n    expect(st.camelCaseToHyphenCase('WebkitTransition')).to.equal('-webkit-transition');\n    expect(st.camelCaseToHyphenCase('webkitTransition')).to.equal('-webkit-transition');\n    expect(st.camelCaseToHyphenCase('oTransition')).to.equal('-o-transition');\n  });","file":"unit/core/dom/test-style.js","skipped":false,"dir":"test"},{"name":"removeAlphaFromColor","suites":[],"updatePoint":{"line":93,"column":26,"index":3472},"line":93,"code":"  it('removeAlphaFromColor', () => {\n    expect(st.removeAlphaFromColor('rgba(1, 1, 1, 0)')).to.equal('rgba(1, 1, 1, 1)');\n    expect(st.removeAlphaFromColor('rgb(1, 1, 1)')).to.equal('rgb(1, 1, 1)');\n    expect(st.removeAlphaFromColor('rgba(0, 0, 0,-0.5)')).to.equal('rgba(0, 0, 0, 1)');\n  });","file":"unit/core/dom/test-style.js","skipped":false,"dir":"test"},{"name":"no prefix","suites":["getVendorJsPropertyName"],"updatePoint":{"line":99,"column":17,"index":3804},"line":99,"code":"    it('no prefix', () => {\n      const element = {\n        style: {\n          transitionDuration: ''\n        }\n      };\n      const prop = st.getVendorJsPropertyName(element.style, 'transitionDuration', true);\n      expect(prop).to.equal('transitionDuration');\n    });","file":"unit/core/dom/test-style.js","skipped":false,"dir":"test"},{"name":"should use cached previous result","suites":["getVendorJsPropertyName"],"updatePoint":{"line":108,"column":41,"index":4098},"line":108,"code":"    it('should use cached previous result', () => {\n      let element = {\n        style: {\n          transitionDuration: ''\n        }\n      };\n      let prop = st.getVendorJsPropertyName(element.style, 'transitionDuration');\n      expect(prop).to.equal('transitionDuration');\n      element = {\n        style: {\n          WebkitTransitionDuration: ''\n        }\n      };\n      prop = st.getVendorJsPropertyName(element.style, 'transitionDuration');\n      expect(prop).to.equal('transitionDuration');\n    });","file":"unit/core/dom/test-style.js","skipped":false,"dir":"test"},{"name":"Webkit","suites":["getVendorJsPropertyName"],"updatePoint":{"line":124,"column":14,"index":4577},"line":124,"code":"    it('Webkit', () => {\n      const element = {\n        style: {\n          WebkitTransitionDuration: ''\n        }\n      };\n      const prop = st.getVendorJsPropertyName(element.style, 'transitionDuration', true);\n      expect(prop).to.equal('WebkitTransitionDuration');\n    });","file":"unit/core/dom/test-style.js","skipped":false,"dir":"test"},{"name":"Moz","suites":["getVendorJsPropertyName"],"updatePoint":{"line":133,"column":11,"index":4853},"line":133,"code":"    it('Moz', () => {\n      const element = {\n        style: {\n          MozTransitionDuration: ''\n        }\n      };\n      const prop = st.getVendorJsPropertyName(element.style, 'transitionDuration', true);\n      expect(prop).to.equal('MozTransitionDuration');\n    });","file":"unit/core/dom/test-style.js","skipped":false,"dir":"test"},{"name":"ms","suites":["getVendorJsPropertyName"],"updatePoint":{"line":142,"column":10,"index":5122},"line":142,"code":"    it('ms', () => {\n      const element = {\n        style: {\n          msTransitionDuration: ''\n        }\n      };\n      const prop = st.getVendorJsPropertyName(element.style, 'transitionDuration', true);\n      expect(prop).to.equal('msTransitionDuration');\n    });","file":"unit/core/dom/test-style.js","skipped":false,"dir":"test"},{"name":"O opera","suites":["getVendorJsPropertyName"],"updatePoint":{"line":151,"column":15,"index":5394},"line":151,"code":"    it('O opera', () => {\n      const element = {\n        style: {\n          OTransitionDuration: ''\n        }\n      };\n      const prop = st.getVendorJsPropertyName(element.style, 'transitionDuration', true);\n      expect(prop).to.equal('OTransitionDuration');\n    });","file":"unit/core/dom/test-style.js","skipped":false,"dir":"test"},{"name":"should concat two string transitions","suites":["concat"],"updatePoint":{"line":8,"column":44,"index":394},"line":8,"code":"    it('should concat two string transitions', () => {\n      const func = concat([translation, scaling]);\n      expect(func(0, false)).to.equal('translate(0px, 20px) scale(0)');\n      expect(func(0.5, false)).to.equal('translate(5px, 25px) scale(5)');\n      expect(func(1, true)).to.equal('translate(10px, 30px) scale(10)');\n    });","file":"unit/core/dom/test-transition.js","skipped":false,"dir":"test"},{"name":"should handle single transitions","suites":["concat"],"updatePoint":{"line":14,"column":40,"index":723},"line":14,"code":"    it('should handle single transitions', () => {\n      const func = concat([translation]);\n      expect(func(0, false)).to.equal('translate(0px, 20px)');\n      expect(func(0.5, false)).to.equal('translate(5px, 25px)');\n      expect(func(1, true)).to.equal('translate(10px, 30px)');\n    });","file":"unit/core/dom/test-transition.js","skipped":false,"dir":"test"},{"name":"should handle empty input","suites":["concat"],"updatePoint":{"line":20,"column":33,"index":1008},"line":20,"code":"    it('should handle empty input', () => {\n      const func = concat([]);\n      expect(func(0, false)).to.equal('');\n      expect(func(0.5, false)).to.equal('');\n      expect(func(1, true)).to.equal('');\n    });","file":"unit/core/dom/test-transition.js","skipped":false,"dir":"test"},{"name":"should ignore non-string transitions","suites":["concat"],"updatePoint":{"line":26,"column":44,"index":1232},"line":26,"code":"    it('should ignore non-string transitions', () => {\n      const func = concat([translation, numericLow]);\n      expect(func(0, false)).to.equal('translate(0px, 20px)');\n      expect(func(0.5, false)).to.equal('translate(5px, 25px)');\n      expect(func(1, true)).to.equal('translate(10px, 30px)');\n    });","file":"unit/core/dom/test-transition.js","skipped":false,"dir":"test"},{"name":"should support other delimeters","suites":["concat"],"updatePoint":{"line":32,"column":39,"index":1535},"line":32,"code":"    it('should support other delimeters', () => {\n      const func = concat([px(numericLow), px(numericHigh)], ', ');\n      expect(func(0, false)).to.equal('0px, 20px');\n      expect(func(0.5, false)).to.equal('5px, 25px');\n      expect(func(1, true)).to.equal('10px, 30px');\n    });","file":"unit/core/dom/test-transition.js","skipped":false,"dir":"test"},{"name":"setStyles","suites":["concat"],"updatePoint":{"line":39,"column":15,"index":1801},"line":39,"code":"  it('setStyles', () => {\n    const element = document.createElement('div');\n    const func = setStyles(element, {\n      width: px(n => n * 100 + 1),\n      height: px(n => n * 100 + 2)\n    });\n    func(0);\n    expect(element.style.width).to.equal('1px');\n    expect(element.style.height).to.equal('2px');\n    func(0.2);\n    expect(element.style.width).to.equal('21px');\n    expect(element.style.height).to.equal('22px');\n    func(0.9);\n    expect(element.style.width).to.equal('91px');\n    expect(element.style.height).to.equal('92px');\n    func(1);\n    expect(element.style.width).to.equal('101px');\n    expect(element.style.height).to.equal('102px');\n  });","file":"unit/core/dom/test-transition.js","skipped":false,"dir":"test"},{"name":"numeric","suites":["concat"],"updatePoint":{"line":58,"column":13,"index":2458},"line":58,"code":"  it('numeric', () => {\n    let func = numeric(2, 10);\n    expect(func(0)).to.equal(2);\n    expect(func(0.3)).to.be.closeTo(4.4, 1e-3);\n    expect(func(0.6)).to.be.closeTo(6.8, 1e-3);\n    expect(func(0.9)).to.be.closeTo(9.2, 1e-3);\n    expect(func(1)).to.equal(10);\n    func = numeric(2, -10);\n    expect(func(0)).to.equal(2);\n    expect(func(0.3)).to.be.closeTo(-1.6, 1e-3);\n    expect(func(0.6)).to.be.closeTo(-5.2, 1e-3);\n    expect(func(0.9)).to.be.closeTo(-8.8, 1e-3);\n    expect(func(1)).to.equal(-10);\n  });","file":"unit/core/dom/test-transition.js","skipped":false,"dir":"test"},{"name":"px","suites":["concat"],"updatePoint":{"line":72,"column":8,"index":2968},"line":72,"code":"  it('px', () => {\n    const func = px(numericLow);\n    expect(func(0)).to.equal('0px');\n    expect(func(0.3)).to.equal('3px');\n    expect(func(0.6)).to.equal('6px');\n    expect(func(0.9)).to.equal('9px');\n    expect(func(1)).to.equal('10px');\n  });","file":"unit/core/dom/test-transition.js","skipped":false,"dir":"test"},{"name":"should translate with X and Y","suites":["concat"],"updatePoint":{"line":80,"column":35,"index":3245},"line":80,"code":"  it('should translate with X and Y', () => {\n    let func = translate(numericLow, numericHigh);\n    expect(func(0)).to.equal('translate(0px, 20px)');\n    expect(func(0.3)).to.equal('translate(3px, 23px)');\n    expect(func(0.6)).to.equal('translate(6px, 26px)');\n    expect(func(0.9)).to.equal('translate(9px, 29px)');\n    expect(func(1)).to.equal('translate(10px, 30px)');\n    func = translate(() => '101vw', () => '201em');\n    expect(func(0)).to.equal('translate(101vw, 201em)');\n  });","file":"unit/core/dom/test-transition.js","skipped":false,"dir":"test"},{"name":"should translate with only X","suites":["concat"],"updatePoint":{"line":90,"column":34,"index":3733},"line":90,"code":"  it('should translate with only X', () => {\n    let func = translate(numericLow);\n    expect(func(0)).to.equal('translate(0px)');\n    expect(func(0.3)).to.equal('translate(3px)');\n    expect(func(0.6)).to.equal('translate(6px)');\n    expect(func(0.9)).to.equal('translate(9px)');\n    expect(func(1)).to.equal('translate(10px)');\n    func = translate(() => '101vw');\n    expect(func(0)).to.equal('translate(101vw)');\n  });","file":"unit/core/dom/test-transition.js","skipped":false,"dir":"test"},{"name":"should report whether native shadow dom supported","suites":[],"updatePoint":{"line":6,"column":55,"index":407},"line":6,"code":"  it('should report whether native shadow dom supported', () => {\n    const shadowDomV0 = !!Element.prototype.createShadowRoot;\n    const shadowDomV1 = !!Element.prototype.attachShadow;\n    expect(isShadowDomSupported()).to.equal(shadowDomV0 || shadowDomV1);\n  });","file":"unit/core/dom/test-web-components.js","skipped":false,"dir":"test"},{"name":"reports NONE when no spec is available","suites":["Shadow DOM"],"updatePoint":{"line":19,"column":46,"index":866},"line":19,"code":"    it('reports NONE when no spec is available', () => {\n      win.Element.prototype.createShadowRoot = undefined;\n      win.Element.prototype.attachShadow = undefined;\n      expect(getShadowDomSupportedVersion(win.Element)).to.equal(ShadowDomVersion_Enum.NONE);\n    });","file":"unit/core/dom/test-web-components.js","skipped":false,"dir":"test"},{"name":"gives preference to v1 over v0 when both specs are available","suites":["Shadow DOM"],"updatePoint":{"line":24,"column":68,"index":1159},"line":24,"code":"    it('gives preference to v1 over v0 when both specs are available', () => {\n      if (!!win.Element.prototype.createShadowRoot && !!win.Element.prototype.attachShadow) {\n        expect(getShadowDomSupportedVersion(win.Element)).to.equal(ShadowDomVersion_Enum.V1);\n      }\n    });","file":"unit/core/dom/test-web-components.js","skipped":false,"dir":"test"},{"name":"reports v0 when available but v1 is not","suites":["Shadow DOM"],"updatePoint":{"line":29,"column":47,"index":1421},"line":29,"code":"    it('reports v0 when available but v1 is not', () => {\n      if (!!win.Element.prototype.createShadowRoot) {\n        win.Element.prototype.attachShadow = undefined;\n        expect(getShadowDomSupportedVersion(win.Element)).to.equal(ShadowDomVersion_Enum.V0);\n      }\n    });","file":"unit/core/dom/test-web-components.js","skipped":false,"dir":"test"},{"name":"should report whether native shadow css supported","suites":["Shadow CSS"],"updatePoint":{"line":40,"column":57,"index":1829},"line":40,"code":"    it('should report whether native shadow css supported', () => {\n      const shadowDomV0 = !!win.Element.prototype.createShadowRoot;\n      const shadowDomV1 = !!win.Element.prototype.attachShadow;\n      expect(isShadowCssSupported()).to.equal(shadowDomV0 || shadowDomV1);\n    });","file":"unit/core/dom/test-web-components.js","skipped":false,"dir":"test"},{"name":"should report whether native shadow css supported using proxied Elements","suites":["Shadow CSS"],"updatePoint":{"line":45,"column":80,"index":2135},"line":45,"code":"    it('should report whether native shadow css supported using proxied Elements', () => {\n      const shadowDomV0 = !!win.Element.prototype.createShadowRoot;\n      const shadowDomV1 = !!win.Element.prototype.attachShadow;\n      if (shadowDomV0) {\n        const {\n          createShadowRoot\n        } = win.Element.prototype;\n        win.Element.prototype.createShadowRoot = (...args) => createShadowRoot(...args);\n      }\n      if (shadowDomV1) {\n        const {\n          attachShadow\n        } = win.Element.prototype;\n        win.Element.prototype.attachShadow = (...args) => attachShadow(...args);\n      }\n      expect(isShadowCssSupported()).to.equal(shadowDomV0 || shadowDomV1);\n    });","file":"unit/core/dom/test-web-components.js","skipped":false,"dir":"test"},{"name":"should start observing","suites":[],"updatePoint":{"line":17,"column":28,"index":589},"line":17,"code":"  it('should start observing', () => {\n    expect(resizeObserverStub.isObserved(element)).to.be.false;\n    helper.updatePlaying(true);\n    expect(resizeObserverStub.isObserved(element)).to.be.true;\n    resizeObserverStub.notifySync({\n      target: element,\n      borderBoxSize: [{\n        inlineSize: 101,\n        blockSize: 102\n      }]\n    });\n    expect(element.pause).to.not.be.called;\n  });","file":"unit/core/dom/video/test-pause-helper.js","skipped":false,"dir":"test"},{"name":"should pause only after the element receives a non-zero size","suites":[],"updatePoint":{"line":30,"column":66,"index":1023},"line":30,"code":"  it('should pause only after the element receives a non-zero size', () => {\n    expect(resizeObserverStub.isObserved(element)).to.be.false;\n    helper.updatePlaying(true);\n    expect(resizeObserverStub.isObserved(element)).to.be.true;\n\n    // No size, but didn't have size before.\n    resizeObserverStub.notifySync({\n      target: element,\n      borderBoxSize: [{\n        inlineSize: 0,\n        blockSize: 0\n      }]\n    });\n    expect(element.pause).to.not.be.called;\n\n    // Has size.\n    resizeObserverStub.notifySync({\n      target: element,\n      borderBoxSize: [{\n        inlineSize: 1,\n        blockSize: 2\n      }]\n    });\n    expect(element.pause).to.not.be.called;\n\n    // No size, and had size before.\n    resizeObserverStub.notifySync({\n      target: element,\n      borderBoxSize: [{\n        inlineSize: 0,\n        blockSize: 0\n      }]\n    });\n    expect(element.pause).to.be.calledOnce;\n  });","file":"unit/core/dom/video/test-pause-helper.js","skipped":false,"dir":"test"},{"name":"should unobserve","suites":[],"updatePoint":{"line":65,"column":22,"index":1887},"line":65,"code":"  it('should unobserve', () => {\n    helper.updatePlaying(true);\n    expect(resizeObserverStub.isObserved(element)).to.be.true;\n    helper.updatePlaying(false);\n    expect(resizeObserverStub.isObserved(element)).to.be.false;\n  });","file":"unit/core/dom/video/test-pause-helper.js","skipped":false,"dir":"test"},{"name":"should not fail for truthy values","suites":["devAssert"],"updatePoint":{"line":5,"column":41,"index":241},"line":5,"code":"    it('should not fail for truthy values', () => {\n      devAssert(true, 'True!');\n      devAssert(1, '1');\n      devAssert('abc', 'abc');\n    });","file":"unit/core/test-assert.js","skipped":false,"dir":"test"},{"name":"should fail for falsey values dev","suites":["devAssert"],"updatePoint":{"line":10,"column":41,"index":389},"line":10,"code":"    it('should fail for falsey values dev', () => {\n      expect(() => devAssert(false, 'xyz')).to.throw('xyz');\n      expect(() => userAssert(false, '123')).to.throw(`123${USER_ERROR_SENTINEL}`);\n    });","file":"unit/core/test-assert.js","skipped":false,"dir":"test"},{"name":"should not fail for truthy values","suites":["userAssert"],"updatePoint":{"line":16,"column":41,"index":633},"line":16,"code":"    it('should not fail for truthy values', () => {\n      userAssert(true, 'True!');\n      userAssert(1, '1');\n      userAssert('abc', 'abc');\n    });","file":"unit/core/test-assert.js","skipped":false,"dir":"test"},{"name":"should fail for falsey values dev","suites":["userAssert"],"updatePoint":{"line":21,"column":41,"index":784},"line":21,"code":"    it('should fail for falsey values dev', () => {\n      expect(() => userAssert(false, 'xyz')).to.throw(`xyz${USER_ERROR_SENTINEL}`);\n    });","file":"unit/core/test-assert.js","skipped":false,"dir":"test"},{"name":"should substitute","suites":["userAssert"],"updatePoint":{"line":25,"column":23,"index":916},"line":25,"code":"  it('should substitute', () => {\n    expect(() => devAssert(false, 'should fail %s', 'XYZ')).to.throw('should fail XYZ');\n    expect(() => devAssert(false, 'should fail %s %s', 'XYZ', 'YYY')).to.throw('should fail XYZ YYY');\n    expect(() => userAssert(false, '%s a %s b %s', 1, 2, 3)).to.throw(`1 a 2 b 3${USER_ERROR_SENTINEL}`);\n  });","file":"unit/core/test-assert.js","skipped":false,"dir":"test"},{"name":"should add element and message info","suites":["userAssert"],"updatePoint":{"line":30,"column":41,"index":1272},"line":30,"code":"  it('should add element and message info', () => {\n    const div = document.createElement('div');\n    div.id = 'testId';\n    let error;\n    try {\n      devAssert(false, '%s a %s b %s', div, 2, 3);\n    } catch (e) {\n      error = e;\n    }\n    expect(error.toString()).to.match(/div#testId a 2 b 3/);\n    expect(error.messageArray).to.deep.equal([div, 'a', 2, 'b', 3]);\n  });","file":"unit/core/test-assert.js","skipped":false,"dir":"test"},{"name":"should rethrow error with single message","suites":["rethrowAsync"],"updatePoint":{"line":14,"column":48,"index":525},"line":14,"code":"    it('should rethrow error with single message', () => {\n      rethrowAsync('intended');\n      expect(() => {\n        clock.tick(1);\n      }).to.throw(Error, /^intended/);\n    });","file":"unit/core/test-error.js","skipped":false,"dir":"test"},{"name":"should rethrow a single error","suites":["rethrowAsync"],"updatePoint":{"line":20,"column":37,"index":696},"line":20,"code":"    it('should rethrow a single error', () => {\n      const orig = new Error('intended');\n      rethrowAsync(orig);\n      let error;\n      try {\n        clock.tick(1);\n      } catch (e) {\n        error = e;\n      }\n      expect(error).to.equal(orig);\n      expect(error.message).to.match(/^intended/);\n    });","file":"unit/core/test-error.js","skipped":false,"dir":"test"},{"name":"should rethrow error with many messages","suites":["rethrowAsync"],"updatePoint":{"line":32,"column":47,"index":1016},"line":32,"code":"    it('should rethrow error with many messages', () => {\n      rethrowAsync('first', 'second', 'third');\n      let error;\n      try {\n        clock.tick(1);\n      } catch (e) {\n        error = e;\n      }\n      expect(error.message).to.match(/^first second third/);\n    });","file":"unit/core/test-error.js","skipped":false,"dir":"test"},{"name":"should rethrow error with original error and messages","suites":["rethrowAsync"],"updatePoint":{"line":42,"column":61,"index":1304},"line":42,"code":"    it('should rethrow error with original error and messages', () => {\n      const orig = new Error('intended');\n      rethrowAsync('first', orig, 'second', 'third');\n      let error;\n      try {\n        clock.tick(1);\n      } catch (e) {\n        error = e;\n      }\n      expect(error).to.equal(orig);\n      expect(error.message).to.match(/^first second third: intended/);\n    });","file":"unit/core/test-error.js","skipped":false,"dir":"test"},{"name":"should preserve error suffix","suites":["rethrowAsync"],"updatePoint":{"line":54,"column":36,"index":1661},"line":54,"code":"    it('should preserve error suffix', () => {\n      const orig = user().createError('intended');\n      expect(isUserErrorMessage(orig.message)).to.be.true;\n      rethrowAsync('first', orig, 'second');\n      let error;\n      try {\n        clock.tick(1);\n      } catch (e) {\n        error = e;\n      }\n      expect(error).to.equal(orig);\n      expect(isUserErrorMessage(error.message)).to.be.true;\n    });","file":"unit/core/test-error.js","skipped":false,"dir":"test"},{"name":"should not duplicate if message is writeable","suites":["duplicateErrorIfNecessary"],"updatePoint":{"line":69,"column":52,"index":2136},"line":69,"code":"    it('should not duplicate if message is writeable', () => {\n      const error = {\n        message: 'test'\n      };\n      expect(duplicateErrorIfNecessary(error)).to.equal(error);\n    });","file":"unit/core/test-error.js","skipped":false,"dir":"test"},{"name":"should duplicate if message is non-writable","suites":["duplicateErrorIfNecessary"],"updatePoint":{"line":75,"column":51,"index":2325},"line":75,"code":"    it('should duplicate if message is non-writable', () => {\n      const error = {};\n      Object.defineProperty(error, 'message', {\n        value: 'test',\n        writable: false\n      });\n      expect(duplicateErrorIfNecessary(error)).to.not.equal(error);\n    });","file":"unit/core/test-error.js","skipped":false,"dir":"test"},{"name":"copies all the tidbits","suites":["duplicateErrorIfNecessary"],"updatePoint":{"line":83,"column":30,"index":2571},"line":83,"code":"    it('copies all the tidbits', () => {\n      const error = {\n        stack: 'stack',\n        args: [1, 2, 3],\n        associatedElement: error\n      };\n      Object.defineProperty(error, 'message', {\n        value: 'test',\n        writable: false\n      });\n      const duplicate = duplicateErrorIfNecessary(error);\n      expect(duplicate.stack).to.equal(error.stack);\n      expect(duplicate.args).to.equal(error.args);\n      expect(duplicate.associatedElement).to.equal(error.associatedElement);\n    });","file":"unit/core/test-error.js","skipped":false,"dir":"test"},{"name":"reuses errors","suites":["helpers","devError"],"updatePoint":{"line":105,"column":23,"index":3239},"line":105,"code":"      it('reuses errors', () => {\n        let error = new Error('test');\n        devError('TAG', error);\n        expect(reportedError).to.equal(error);\n        expect(error.message).to.equal('test');\n        devError('TAG', 'should fail', 'XYZ', error);\n        expect(reportedError).to.equal(error);\n        expect(error.message).to.equal('should fail XYZ: test');\n\n        // #8917\n        try {\n          // This is an intentionally bad query selector\n          document.body.querySelector('#');\n        } catch (e) {\n          error = e;\n        }\n        devError('TAG', error);\n        expect(reportedError).not.to.equal(error);\n        expect(reportedError.message).to.equal(error.message);\n        devError('TAG', 'should fail', 'XYZ', error);\n        expect(reportedError).not.to.equal(error);\n        expect(reportedError.message).to.contain('should fail XYZ:');\n      });","file":"unit/core/test-error.js","skipped":false,"dir":"test"},{"name":"reuses errors","suites":["helpers","devExpectedError"],"updatePoint":{"line":130,"column":23,"index":4171},"line":130,"code":"      it('reuses errors', () => {\n        let error = new Error('test');\n        devExpectedError('TAG', error);\n        expect(reportedError).to.equal(error);\n        expect(error.message).to.equal('test');\n        devExpectedError('TAG', 'should fail', 'XYZ', error);\n        expect(reportedError).to.equal(error);\n        expect(error.message).to.equal('should fail XYZ: test');\n\n        // #8917\n        try {\n          // This is an intentionally bad query selector\n          document.body.querySelector('#');\n        } catch (e) {\n          error = e;\n        }\n        devExpectedError('TAG', error);\n        expect(reportedError).not.to.equal(error);\n        expect(reportedError.message).to.equal(error.message);\n        devExpectedError('TAG', 'should fail', 'XYZ', error);\n        expect(reportedError).not.to.equal(error);\n        expect(reportedError.message).to.contain('should fail XYZ:');\n      });","file":"unit/core/test-error.js","skipped":false,"dir":"test"},{"name":"sets `expected` to true","suites":["helpers","devExpectedError"],"updatePoint":{"line":153,"column":33,"index":5096},"line":153,"code":"      it('sets `expected` to true', () => {\n        const error = new Error('test');\n        devExpectedError('TAG', error);\n        expect(error.expected).to.be.true;\n      });","file":"unit/core/test-error.js","skipped":false,"dir":"test"},{"name":"should map a number to the current value","suites":["mapRange"],"updatePoint":{"line":4,"column":48,"index":209},"line":4,"code":"    it('should map a number to the current value', () => {\n      expect(mapRange(5, 0, 10, 40, 80)).to.equal(60);\n      expect(mapRange(5, 0, 10, 10, 20)).to.equal(15);\n    });","file":"unit/core/test-math.js","skipped":false,"dir":"test"},{"name":"should automatically detect source range bounds order","suites":["mapRange"],"updatePoint":{"line":8,"column":61,"index":399},"line":8,"code":"    it('should automatically detect source range bounds order', () => {\n      expect(mapRange(5, 10, 0, 40, 80)).to.equal(60);\n      expect(mapRange(8, 10, 0, 10, 20)).to.equal(12);\n    });","file":"unit/core/test-math.js","skipped":false,"dir":"test"},{"name":"should accept decreasing target ranges","suites":["mapRange"],"updatePoint":{"line":12,"column":46,"index":574},"line":12,"code":"    it('should accept decreasing target ranges', () => {\n      expect(mapRange(8, 0, 10, 10, 0)).to.equal(2);\n    });","file":"unit/core/test-math.js","skipped":false,"dir":"test"},{"name":"should constrain input to the source range","suites":["mapRange"],"updatePoint":{"line":15,"column":50,"index":696},"line":15,"code":"    it('should constrain input to the source range', () => {\n      expect(mapRange(-2, 0, 10, 10, 20)).to.equal(10);\n      expect(mapRange(50, 0, 10, 10, 20)).to.equal(20);\n      expect(mapRange(19, 0, 5, 40, 80)).to.equal(80);\n    });","file":"unit/core/test-math.js","skipped":false,"dir":"test"},{"name":"a -> positive number, b -> positive number","suites":["mod"],"updatePoint":{"line":22,"column":50,"index":964},"line":22,"code":"    it('a -> positive number, b -> positive number', () => {\n      expect(mod(0, 5)).to.equal(0);\n      expect(mod(1, 5)).to.equal(1);\n      expect(mod(2, 5)).to.equal(2);\n      expect(mod(3, 5)).to.equal(3);\n      expect(mod(4, 5)).to.equal(4);\n      expect(mod(5, 5)).to.equal(0);\n      expect(mod(6, 5)).to.equal(1);\n      expect(mod(7, 5)).to.equal(2);\n      expect(mod(1001, 5)).to.equal(1);\n    });","file":"unit/core/test-math.js","skipped":false,"dir":"test"},{"name":"a -> negative number, b -> positive number","suites":["mod"],"updatePoint":{"line":33,"column":50,"index":1369},"line":33,"code":"    it('a -> negative number, b -> positive number', () => {\n      expect(mod(-1, 5)).to.equal(4);\n      expect(mod(-2, 5)).to.equal(3);\n      expect(mod(-3, 5)).to.equal(2);\n      expect(mod(-4, 5)).to.equal(1);\n      expect(mod(-5, 5)).to.equal(0);\n      expect(mod(-6, 5)).to.equal(4);\n      expect(mod(-7, 5)).to.equal(3);\n      expect(mod(-1001, 5)).to.equal(4);\n    });","file":"unit/core/test-math.js","skipped":false,"dir":"test"},{"name":"a -> positive number, b -> negative number","suites":["mod"],"updatePoint":{"line":43,"column":50,"index":1745},"line":43,"code":"    it('a -> positive number, b -> negative number', () => {\n      expect(mod(0, -5)).to.equal(0);\n      expect(mod(1, -5)).to.equal(-4);\n      expect(mod(2, -5)).to.equal(-3);\n      expect(mod(3, -5)).to.equal(-2);\n      expect(mod(4, -5)).to.equal(-1);\n      expect(mod(5, -5)).to.equal(0);\n      expect(mod(6, -5)).to.equal(-4);\n      expect(mod(7, -5)).to.equal(-3);\n      expect(mod(1001, -5)).to.equal(-4);\n    });","file":"unit/core/test-math.js","skipped":false,"dir":"test"},{"name":"a -> negative number, b -> negative number","suites":["mod"],"updatePoint":{"line":54,"column":50,"index":2166},"line":54,"code":"    it('a -> negative number, b -> negative number', () => {\n      expect(mod(-1, -5)).to.equal(-1);\n      expect(mod(-2, -5)).to.equal(-2);\n      expect(mod(-3, -5)).to.equal(-3);\n      expect(mod(-4, -5)).to.equal(-4);\n      expect(mod(-5, -5)).to.equal(0);\n      expect(mod(-6, -5)).to.equal(-1);\n      expect(mod(-7, -5)).to.equal(-2);\n      expect(mod(-1001, -5)).to.equal(-1);\n    });","file":"unit/core/test-math.js","skipped":false,"dir":"test"},{"name":"should not clamp if within the range","suites":["clamp"],"updatePoint":{"line":66,"column":44,"index":2585},"line":66,"code":"    it('should not clamp if within the range', () => {\n      expect(clamp(0.5, 0, 1)).to.equal(0.5);\n      expect(clamp(-10, -20, 0)).to.equal(-10);\n      expect(clamp(1000, -Infinity, Infinity)).to.equal(1000);\n    });","file":"unit/core/test-math.js","skipped":false,"dir":"test"},{"name":"should be inclusive of the range","suites":["clamp"],"updatePoint":{"line":71,"column":40,"index":2801},"line":71,"code":"    it('should be inclusive of the range', () => {\n      expect(clamp(1, 0, 1)).to.equal(1);\n      expect(clamp(0, 0, 1)).to.equal(0);\n      expect(clamp(-20, -20, 0)).to.equal(-20);\n      expect(clamp(0, -20, 0)).to.equal(0);\n    });","file":"unit/core/test-math.js","skipped":false,"dir":"test"},{"name":"should clamp larger values","suites":["clamp"],"updatePoint":{"line":77,"column":34,"index":3030},"line":77,"code":"    it('should clamp larger values', () => {\n      expect(clamp(1.2, 0, 1)).to.equal(1);\n      expect(clamp(4, 0, 1)).to.equal(1);\n      expect(clamp(1.0001, 0, 1)).to.equal(1);\n      expect(clamp(0.1, -20, 0)).to.equal(0);\n    });","file":"unit/core/test-math.js","skipped":false,"dir":"test"},{"name":"should clamp smaller values","suites":["clamp"],"updatePoint":{"line":83,"column":35,"index":3263},"line":83,"code":"    it('should clamp smaller values', () => {\n      expect(clamp(-0.2, 0, 1)).to.equal(0);\n      expect(clamp(-5, 0, 1)).to.equal(0);\n      expect(clamp(-0.0001, 0, 1)).to.equal(0);\n      expect(clamp(-21, -20, 0)).to.equal(-20);\n    });","file":"unit/core/test-math.js","skipped":false,"dir":"test"},{"name":"should fail if the minimum is greater than the maximum","suites":["clamp"],"updatePoint":{"line":89,"column":62,"index":3528},"line":89,"code":"    it('should fail if the minimum is greater than the maximum', () => {\n      allowConsoleError(() => {\n        expect(() => clamp(1, 1, 0)).to.throw();\n        expect(() => clamp(0.3, 0.5, 0.1)).to.throw();\n        expect(() => clamp(0, 10, -10)).to.throw();\n      });\n    });","file":"unit/core/test-math.js","skipped":false,"dir":"test"},{"name":"should not bound if within the range","suites":["boundValue"],"updatePoint":{"line":98,"column":44,"index":3828},"line":98,"code":"    it('should not bound if within the range', () => {\n      expect(boundValue(0.5, 0, 1, 0.3)).to.equal(0.5);\n      expect(boundValue(-10, -20, 0, 3)).to.equal(-10);\n      expect(boundValue(1000, -Infinity, Infinity, Infinity)).to.equal(1000);\n    });","file":"unit/core/test-math.js","skipped":false,"dir":"test"},{"name":"should not bound if larger than the range but within the extent","suites":["boundValue"],"updatePoint":{"line":103,"column":71,"index":4108},"line":103,"code":"    it('should not bound if larger than the range but within the extent', () => {\n      expect(boundValue(1.2, 0, 1, 0.3)).to.equal(1.2);\n      expect(boundValue(1, -20, 0, 3)).to.equal(1);\n    });","file":"unit/core/test-math.js","skipped":false,"dir":"test"},{"name":"should not bound if smaller than the range but within the extent","suites":["boundValue"],"updatePoint":{"line":107,"column":72,"index":4307},"line":107,"code":"    it('should not bound if smaller than the range but within the extent', () => {\n      expect(boundValue(-0.2, 0, 1, 0.3)).to.equal(-0.2);\n      expect(boundValue(-22, -20, 0, 3)).to.equal(-22);\n    });","file":"unit/core/test-math.js","skipped":false,"dir":"test"},{"name":"should be inclusive of the extended range","suites":["boundValue"],"updatePoint":{"line":111,"column":49,"index":4489},"line":111,"code":"    it('should be inclusive of the extended range', () => {\n      expect(boundValue(1.3, 0, 1, 0.3)).to.equal(1.3);\n      expect(boundValue(-0.3, 0, 1, 0.3)).to.equal(-0.3);\n      expect(boundValue(-23, -20, 0, 3)).to.equal(-23);\n      expect(boundValue(3, -20, 0, 3)).to.equal(3);\n    });","file":"unit/core/test-math.js","skipped":false,"dir":"test"},{"name":"should bound values larger than the extended range","suites":["boundValue"],"updatePoint":{"line":117,"column":58,"index":4788},"line":117,"code":"    it('should bound values larger than the extended range', () => {\n      expect(boundValue(1.4, 0, 1, 0.3)).to.equal(1.3);\n      expect(boundValue(4, 0, 1, 0.3)).to.equal(1.3);\n      expect(boundValue(1.3001, 0, 1, 0.3)).to.equal(1.3);\n      expect(boundValue(3.1, -20, 0, 3)).to.equal(3);\n    });","file":"unit/core/test-math.js","skipped":false,"dir":"test"},{"name":"should bound values smaller the extended range","suites":["boundValue"],"updatePoint":{"line":123,"column":54,"index":5084},"line":123,"code":"    it('should bound values smaller the extended range', () => {\n      expect(boundValue(-0.5, 0, 1, 0.3)).to.equal(-0.3);\n      expect(boundValue(-5, 0, 1, 0.3)).to.equal(-0.3);\n      expect(boundValue(-0.3001, 0, 1, 0.3)).to.equal(-0.3);\n      expect(boundValue(-24, -20, 0, 3)).to.equal(-23);\n    });","file":"unit/core/test-math.js","skipped":false,"dir":"test"},{"name":"should fail if the minimum is greater than the maximum","suites":["boundValue"],"updatePoint":{"line":129,"column":62,"index":5396},"line":129,"code":"    it('should fail if the minimum is greater than the maximum', () => {\n      allowConsoleError(() => {\n        expect(() => boundValue(1, 1, 0, 1)).to.throw();\n        expect(() => boundValue(0.3, 0.5, 0.1, 1)).to.throw();\n        expect(() => boundValue(0, 10, -10, 1)).to.throw();\n      });\n    });","file":"unit/core/test-math.js","skipped":false,"dir":"test"},{"name":"should operate on all-positive vectors","suites":["magnitude"],"updatePoint":{"line":138,"column":46,"index":5721},"line":138,"code":"    it('should operate on all-positive vectors', () => {\n      expect(magnitude(3, 4)).to.equal(5);\n      expect(magnitude(5, 12)).to.equal(13);\n      expect(magnitude(1.5, 2.5)).be.closeTo(2.915, 0.001);\n    });","file":"unit/core/test-math.js","skipped":false,"dir":"test"},{"name":"should operate on partially-negative vectors","suites":["magnitude"],"updatePoint":{"line":143,"column":52,"index":5940},"line":143,"code":"    it('should operate on partially-negative vectors', () => {\n      expect(magnitude(-3, 4)).to.equal(5);\n      expect(magnitude(5, -12)).to.equal(13);\n      expect(magnitude(-1.5, 2.5)).be.closeTo(2.915, 0.001);\n      expect(magnitude(1.5, -2.5)).be.closeTo(2.915, 0.001);\n    });","file":"unit/core/test-math.js","skipped":false,"dir":"test"},{"name":"should operate on all-negative vectors","suites":["magnitude"],"updatePoint":{"line":149,"column":46,"index":6217},"line":149,"code":"    it('should operate on all-negative vectors', () => {\n      expect(magnitude(-3, -4)).to.equal(5);\n      expect(magnitude(-5, -12)).to.equal(13);\n      expect(magnitude(-1.5, -2.5)).be.closeTo(2.915, 0.001);\n    });","file":"unit/core/test-math.js","skipped":false,"dir":"test"},{"name":"should yield the absolute value of one delta if the other is zero","suites":["magnitude"],"updatePoint":{"line":154,"column":73,"index":6463},"line":154,"code":"    it('should yield the absolute value of one delta if the other is zero', () => {\n      expect(magnitude(3, 0)).to.equal(3);\n      expect(magnitude(0, 4)).to.equal(4);\n      expect(magnitude(-1.5, 0)).to.equal(1.5);\n      expect(magnitude(0, -0.0005)).to.equal(0.0005);\n    });","file":"unit/core/test-math.js","skipped":false,"dir":"test"},{"name":"should yield zero for the zero-vector","suites":["magnitude"],"updatePoint":{"line":160,"column":45,"index":6715},"line":160,"code":"    it('should yield zero for the zero-vector', () => {\n      expect(magnitude(0, 0)).to.equal(0);\n    });","file":"unit/core/test-math.js","skipped":false,"dir":"test"},{"name":"should yield zero distance for identical points","suites":["distance"],"updatePoint":{"line":165,"column":55,"index":6869},"line":165,"code":"    it('should yield zero distance for identical points', () => {\n      expect(distance(1, 2, 1, 2)).to.equal(0);\n      expect(distance(0.5, 0.001, 0.5, 0.001)).to.equal(0);\n      expect(distance(3.6, 0, 3.6, 0)).to.equal(0);\n    });","file":"unit/core/test-math.js","skipped":false,"dir":"test"},{"name":"should compute distance when one point is the origin","suites":["distance"],"updatePoint":{"line":170,"column":60,"index":7108},"line":170,"code":"    it('should compute distance when one point is the origin', () => {\n      expect(distance(0, 0, 3, 4)).to.equal(5);\n      expect(distance(5, 12, 0, 0)).to.equal(13);\n      expect(distance(0, 0, 1.5, 2.5)).be.closeTo(2.915, 0.001);\n    });","file":"unit/core/test-math.js","skipped":false,"dir":"test"},{"name":"should compute distance when all coordinates are positive","suites":["distance"],"updatePoint":{"line":175,"column":65,"index":7355},"line":175,"code":"    it('should compute distance when all coordinates are positive', () => {\n      expect(distance(3, 4, 6, 8)).to.equal(5);\n      expect(distance(7.5, 13.5, 2.5, 1.5)).to.equal(13);\n      expect(distance(3, 5, 1.5, 2.5)).be.closeTo(2.915, 0.001);\n    });","file":"unit/core/test-math.js","skipped":false,"dir":"test"},{"name":"should compute distance when all coordinates are negative","suites":["distance"],"updatePoint":{"line":180,"column":65,"index":7610},"line":180,"code":"    it('should compute distance when all coordinates are negative', () => {\n      expect(distance(-3, -4, -6, -8)).to.equal(5);\n      expect(distance(-7.5, -13.5, -2.5, -1.5)).to.equal(13);\n      expect(distance(-3, -5, -1.5, -2.5)).be.closeTo(2.915, 0.001);\n    });","file":"unit/core/test-math.js","skipped":false,"dir":"test"},{"name":"should compute distance when some coordinates are negative","suites":["distance"],"updatePoint":{"line":185,"column":66,"index":7878},"line":185,"code":"    it('should compute distance when some coordinates are negative', () => {\n      expect(distance(-1.5, -3, 1.5, 1)).to.equal(5);\n      expect(distance(4, 6, -1, -6)).to.equal(13);\n      expect(distance(-0.5, -0.5, 1, 2)).be.closeTo(2.915, 0.001);\n    });","file":"unit/core/test-math.js","skipped":false,"dir":"test"},{"name":"should sum up an array of numbers","suites":["sum"],"updatePoint":{"line":192,"column":41,"index":8142},"line":192,"code":"    it('should sum up an array of numbers', () => {\n      expect(sum([2, 10, 100])).to.equal(112);\n      expect(sum([-3, 2, 44])).to.equal(43);\n    });","file":"unit/core/test-math.js","skipped":false,"dir":"test"},{"name":"should backoff exponentially","suites":[],"updatePoint":{"line":8,"column":34,"index":361},"line":8,"code":"  it('should backoff exponentially', () => {\n    let count = 0;\n    const backoff = exponentialBackoff();\n    const backoff2 = exponentialBackoff();\n    const increment = () => {\n      count++;\n    };\n    backoff(increment);\n    expect(count).to.equal(0);\n    clock.tick(600);\n    expect(count).to.equal(0);\n    // Account for jitter\n    clock.tick(701);\n    expect(count).to.equal(1);\n\n    // Round 2\n    backoff(increment);\n    expect(count).to.equal(1);\n    clock.tick(1200);\n    expect(count).to.equal(1);\n    clock.tick(1800);\n    expect(count).to.equal(2);\n\n    // Round 3\n    backoff(increment);\n    expect(count).to.equal(2);\n    clock.tick(2200);\n    expect(count).to.equal(2);\n    clock.tick(3200);\n    expect(count).to.equal(3);\n\n    // 2nd independent backoff\n    backoff2(increment);\n    expect(count).to.equal(3);\n    clock.tick(600);\n    expect(count).to.equal(3);\n    clock.tick(701);\n    expect(count).to.equal(4);\n  });","file":"unit/core/types/function/test-exponential-backoff.js","skipped":false,"dir":"test"},{"name":"should exponentiate correctly","suites":[],"updatePoint":{"line":47,"column":35,"index":1300},"line":47,"code":"  it('should exponentiate correctly', () => {\n    const backoff = exponentialBackoffClock();\n    const backoff2 = exponentialBackoffClock();\n\n    // base of 2 = 1000 - 300 (30% jitter) = 700\n    expect(backoff()).to.equal(700);\n    expect(backoff()).to.equal(1400);\n    // tick backoff2\n    expect(backoff2()).to.equal(700);\n    // back to backoff\n    expect(backoff()).to.equal(2800);\n    expect(backoff()).to.equal(5600);\n    expect(backoff()).to.equal(11200);\n    expect(backoff()).to.equal(22400);\n    expect(backoff2()).to.equal(1400);\n    expect(backoff2()).to.equal(2800);\n  });","file":"unit/core/types/function/test-exponential-backoff.js","skipped":false,"dir":"test"},{"name":"should work","suites":["throttle"],"updatePoint":{"line":8,"column":19,"index":260},"line":8,"code":"    it('should work', () => {\n      const callback = env.sandbox.spy();\n      const throttledCallback = throttle(window, callback, 100);\n      throttledCallback(1);\n      expect(callback).to.be.calledWith(1); // let 1st call through immediately\n      callback.resetHistory();\n      clock.tick(20);\n      throttledCallback(2);\n      clock.tick(20);\n      throttledCallback(3);\n      clock.tick(20);\n      throttledCallback(4);\n      clock.tick(20);\n      throttledCallback(5);\n      clock.tick(19);\n      expect(callback).not.to.be.called; // not 100ms yet\n\n      clock.tick(1);\n      expect(callback).to.be.calledOnce;\n      expect(callback).to.be.calledWith(5);\n      callback.resetHistory();\n      clock.tick(10);\n      throttledCallback(6);\n      expect(callback).not.to.be.called;\n      clock.tick(89);\n      throttledCallback(7, 'another param');\n      expect(callback).not.to.be.called;\n      clock.tick(1);\n      expect(callback).to.be.calledOnce;\n      expect(callback).to.be.calledWith(7, 'another param');\n    });","file":"unit/core/types/function/test-function.js","skipped":false,"dir":"test"},{"name":"should throttle recursive callback","suites":["throttle"],"updatePoint":{"line":39,"column":42,"index":1307},"line":39,"code":"    it('should throttle recursive callback', () => {\n      let totalCalls = 0;\n      function recursive(countdown) {\n        totalCalls++;\n        if (countdown > 0) {\n          throttledCallback(countdown - 1);\n        }\n      }\n      const throttledCallback = throttle(window, recursive, 100);\n\n      // recursive 3 times\n      throttledCallback(3);\n      // should immediately invoke callback only once.\n      expect(totalCalls).to.equal(1);\n      // 2nd invocation happen after the min interval\n      clock.tick(100);\n      expect(totalCalls).to.equal(2);\n      // 3rd invocation\n      clock.tick(100);\n      expect(totalCalls).to.equal(3);\n    });","file":"unit/core/types/function/test-function.js","skipped":false,"dir":"test"},{"name":"should wait before calling","suites":["debounce"],"updatePoint":{"line":66,"column":34,"index":2078},"line":66,"code":"    it('should wait before calling', () => {\n      const callback = env.sandbox.spy();\n      const debounced = debounce(window, callback, 100);\n      debounced(1);\n      expect(callback).to.not.have.been.called;\n      clock.tick(100);\n      expect(callback).to.have.been.calledWith(1);\n      callback.resetHistory();\n      debounced(1);\n      expect(callback).to.not.have.been.called;\n      debounced(2);\n      expect(callback).to.not.have.been.called;\n      clock.tick(10);\n      debounced(3);\n      expect(callback).to.not.have.been.called;\n      clock.tick(99);\n      expect(callback).to.not.have.been.called;\n      clock.tick(1);\n      expect(callback).to.have.been.calledWith(3);\n    });","file":"unit/core/types/function/test-function.js","skipped":false,"dir":"test"},{"name":"should debounce recursive callback","suites":["debounce"],"updatePoint":{"line":86,"column":42,"index":2779},"line":86,"code":"    it('should debounce recursive callback', () => {\n      let totalCalls = 0;\n      function recursive(countdown) {\n        totalCalls++;\n        if (countdown > 0) {\n          debounced(countdown - 1);\n        }\n      }\n      const debounced = debounce(window, recursive, 100);\n\n      // recursive 3 times\n      debounced(2);\n      expect(totalCalls).to.equal(0);\n      // 1st invocation happen after the min interval\n      clock.tick(100);\n      expect(totalCalls).to.equal(1);\n      // 2nd invocation\n      clock.tick(100);\n      expect(totalCalls).to.equal(2);\n    });","file":"unit/core/types/function/test-function.js","skipped":false,"dir":"test"},{"name":"should return object for valid json","suites":["tryParseJson"],"updatePoint":{"line":4,"column":43,"index":212},"line":4,"code":"    it('should return object for valid json', () => {\n      const json = '{\"key\": \"value\"}';\n      const result = tryParseJson(json);\n      expect(result.key).to.equal('value');\n    });","file":"unit/core/types/object/test-json.js","skipped":false,"dir":"test"},{"name":"should not throw and return null for invalid json","suites":["tryParseJson"],"updatePoint":{"line":9,"column":57,"index":412},"line":9,"code":"    it('should not throw and return null for invalid json', () => {\n      const json = '{\"key\": \"val';\n      expect(tryParseJson.bind(null, json)).to.not.throw();\n      const result = tryParseJson(json);\n      expect(result).to.be.null;\n    });","file":"unit/core/types/object/test-json.js","skipped":false,"dir":"test"},{"name":"should call onFailed for invalid and not call for valid json","suites":["tryParseJson"],"updatePoint":{"line":15,"column":68,"index":668},"line":15,"code":"    it('should call onFailed for invalid and not call for valid json', () => {\n      let onFailedCalled = false;\n      const validJson = '{\"key\": \"value\"}';\n      tryParseJson(validJson, () => {\n        onFailedCalled = true;\n      });\n      expect(onFailedCalled).to.be.false;\n      const invalidJson = '{\"key\": \"val';\n      tryParseJson(invalidJson, err => {\n        onFailedCalled = true;\n        expect(err).to.exist;\n      });\n      expect(onFailedCalled).to.be.true;\n    });","file":"unit/core/types/object/test-json.js","skipped":false,"dir":"test"},{"name":"should throw on non-finite depth arg","suites":["deepEquals"],"updatePoint":{"line":31,"column":44,"index":1164},"line":31,"code":"    it('should throw on non-finite depth arg', () => {\n      expect(() => {\n        deepEquals({}, {}, Number.POSITIVE_INFINITY);\n      }).to.throw(/Invalid depth/);\n    });","file":"unit/core/types/object/test-json.js","skipped":false,"dir":"test"},{"name":"should handle null and empty objects","suites":["deepEquals"],"updatePoint":{"line":36,"column":44,"index":1338},"line":36,"code":"    it('should handle null and empty objects', () => {\n      expect(deepEquals(null, null)).to.be.true;\n      expect(deepEquals({}, {})).to.be.true;\n      expect(deepEquals({}, null)).to.be.false;\n      expect(deepEquals([], [])).to.be.true;\n      expect(deepEquals([], null)).to.be.false;\n    });","file":"unit/core/types/object/test-json.js","skipped":false,"dir":"test"},{"name":"should check strict equality","suites":["deepEquals"],"updatePoint":{"line":43,"column":36,"index":1628},"line":43,"code":"    it('should check strict equality', () => {\n      expect(deepEquals({\n        x: 1\n      }, {\n        x: 1\n      })).to.be.true;\n      expect(deepEquals({\n        x: false\n      }, {\n        x: false\n      })).to.be.true;\n      expect(deepEquals({\n        x: 'abc'\n      }, {\n        x: 'abc'\n      })).to.be.true;\n      expect(deepEquals({\n        x: ''\n      }, {\n        x: false\n      })).to.be.false;\n      expect(deepEquals({\n        x: false\n      }, {\n        x: ''\n      })).to.be.false;\n      expect(deepEquals({\n        x: ''\n      }, {\n        x: 0\n      })).to.be.false;\n      expect(deepEquals({\n        x: 0\n      }, {\n        x: ''\n      })).to.be.false;\n      expect(deepEquals({\n        x: 1\n      }, {\n        x: true\n      })).to.be.false;\n      expect(deepEquals({\n        x: true\n      }, {\n        x: 1\n      })).to.be.false;\n      expect(deepEquals({\n        x: 1\n      }, {\n        x: '1'\n      })).to.be.false;\n      expect(deepEquals({\n        x: '1'\n      }, {\n        x: 1\n      })).to.be.false;\n      expect(deepEquals({\n        x: undefined\n      }, {\n        x: null\n      })).to.be.false;\n      expect(deepEquals({\n        x: null\n      }, {\n        x: undefined\n      })).to.be.false;\n      expect(deepEquals({\n        x: {}\n      }, {\n        x: '[object Object]'\n      })).to.be.false;\n      expect(deepEquals({\n        x: '[object Object]'\n      }, {\n        x: {}\n      })).to.be.false;\n    });","file":"unit/core/types/object/test-json.js","skipped":false,"dir":"test"},{"name":"should check deep equality in nested arrays and objects","suites":["deepEquals"],"updatePoint":{"line":120,"column":63,"index":3091},"line":120,"code":"    it('should check deep equality in nested arrays and objects', () => {\n      expect(deepEquals({\n        x: {\n          y: 1\n        }\n      }, {\n        x: {\n          y: 1\n        }\n      })).to.be.true;\n      expect(deepEquals({\n        x: {\n          y: 1\n        }\n      }, {\n        x: {}\n      })).to.be.false;\n      expect(deepEquals({\n        x: {\n          y: 1\n        }\n      }, {\n        x: {\n          y: 0\n        }\n      })).to.be.false;\n      expect(deepEquals({\n        x: {\n          y: 1\n        }\n      }, {\n        x: {\n          y: 1,\n          z: 2\n        }\n      })).to.be.false;\n      expect(deepEquals({\n        x: [1, 2, 3]\n      }, {\n        x: [1, 2, 3]\n      })).to.be.true;\n      expect(deepEquals({\n        x: [1, 2, 3]\n      }, {\n        x: []\n      })).to.be.false;\n      expect(deepEquals({\n        x: [1, 2, 3]\n      }, {\n        x: [1, 2, 3, 4]\n      })).to.be.false;\n      expect(deepEquals([1, 2, [3, 4]], [1, 2, [3, 4]])).to.be.true;\n      expect(deepEquals([1, 2, []], [1, 2, []])).to.be.true;\n      expect(deepEquals([1, 2, [3, 4]], [1, 2, [3, 4, 5]])).to.be.false;\n    });","file":"unit/core/types/object/test-json.js","skipped":false,"dir":"test"},{"name":"should check array order","suites":["deepEquals"],"updatePoint":{"line":175,"column":32,"index":4181},"line":175,"code":"    it('should check array order', () => {\n      expect(deepEquals([1, 2], [2, 1])).to.be.false;\n      expect(deepEquals([1, 2, [3, 4]], [1, 2, [4, 3]])).to.be.false;\n    });","file":"unit/core/types/object/test-json.js","skipped":false,"dir":"test"},{"name":"should not check object key order","suites":["deepEquals"],"updatePoint":{"line":179,"column":41,"index":4365},"line":179,"code":"    it('should not check object key order', () => {\n      expect(deepEquals({\n        x: 1,\n        y: 2,\n        z: 3\n      }, {\n        y: 2,\n        z: 3,\n        x: 1\n      })).to.be.true;\n    });","file":"unit/core/types/object/test-json.js","skipped":false,"dir":"test"},{"name":"should stop diving once depth arg is exceeded","suites":["deepEquals"],"updatePoint":{"line":190,"column":53,"index":4578},"line":190,"code":"    it('should stop diving once depth arg is exceeded', () => {\n      let depth = 0;\n      expect(deepEquals(1, 1, depth)).to.be.true;\n      expect(deepEquals('a', 'a', depth)).to.be.true;\n      expect(deepEquals([], [], depth)).to.be.false;\n      expect(deepEquals({}, {}, depth)).to.be.false;\n      depth = 1;\n      expect(deepEquals({\n        x: 1\n      }, {\n        x: 1\n      }, depth)).to.be.true;\n      expect(deepEquals([1, 2], [1, 2], depth)).to.be.true;\n      expect(deepEquals({\n        x: {\n          y: 1\n        }\n      }, {\n        x: {\n          y: 1\n        }\n      }, depth)).to.be.false;\n      expect(deepEquals({\n        x: []\n      }, {\n        x: []\n      }, depth)).to.be.false;\n    });","file":"unit/core/types/object/test-json.js","skipped":false,"dir":"test"},{"name":"hasOwn","suites":[],"updatePoint":{"line":3,"column":12,"index":210},"line":3,"code":"  it('hasOwn', () => {\n    expect(hasOwn(map(), 'a')).to.be.false;\n    expect(hasOwn(map({\n      'a': 'b'\n    }), 'b')).to.be.false;\n    expect(hasOwn(map({\n      'a': {}\n    }), 'a')).to.be.true;\n  });","file":"unit/core/types/object/test-object.js","skipped":false,"dir":"test"},{"name":"ownProperty","suites":[],"updatePoint":{"line":12,"column":17,"index":418},"line":12,"code":"  it('ownProperty', () => {\n    expect(ownProperty({}, '__proto__')).to.be.undefined;\n    expect(ownProperty({}, 'constructor')).to.be.undefined;\n    expect(ownProperty({\n      foo: 'bar'\n    }, 'foo')).to.equal('bar');\n  });","file":"unit/core/types/object/test-object.js","skipped":false,"dir":"test"},{"name":"should make map like objects","suites":["map"],"updatePoint":{"line":20,"column":36,"index":689},"line":20,"code":"    it('should make map like objects', () => {\n      expect(map().prototype).to.be.undefined;\n      expect(map().__proto__).to.be.undefined;\n      expect(map().toString).to.be.undefined;\n    });","file":"unit/core/types/object/test-object.js","skipped":false,"dir":"test"},{"name":"should make map like objects from objects","suites":["map"],"updatePoint":{"line":25,"column":49,"index":897},"line":25,"code":"    it('should make map like objects from objects', () => {\n      expect(map({}).prototype).to.be.undefined;\n      expect(map({}).__proto__).to.be.undefined;\n      expect(map({}).toString).to.be.undefined;\n      expect(map({\n        foo: 'bar'\n      }).foo).to.equal('bar');\n      const obj = {\n        foo: 'bar',\n        test: 1\n      };\n      expect(map(obj).test).to.equal(1);\n      expect(map(obj)).to.not.equal(obj);\n    });","file":"unit/core/types/object/test-object.js","skipped":false,"dir":"test"},{"name":"should deep merge objects","suites":["deepMerge"],"updatePoint":{"line":41,"column":33,"index":1350},"line":41,"code":"    it('should deep merge objects', () => {\n      const destObject = {\n        a: 'hello world',\n        b: 'goodbye world',\n        c: {\n          d: 'foo',\n          e: {\n            f: 'bar'\n          }\n        }\n      };\n      const fromObject = {\n        b: 'hello world',\n        c: {\n          d: 'bah',\n          e: {\n            g: 'baz'\n          }\n        }\n      };\n      expect(deepMerge(destObject, fromObject)).to.deep.equal({\n        a: 'hello world',\n        b: 'hello world',\n        c: {\n          d: 'bah',\n          e: {\n            f: 'bar',\n            g: 'baz'\n          }\n        }\n      });\n    });","file":"unit/core/types/object/test-object.js","skipped":false,"dir":"test"},{"name":"should NOT deep merge arrays","suites":["deepMerge"],"updatePoint":{"line":73,"column":36,"index":1978},"line":73,"code":"    it('should NOT deep merge arrays', () => {\n      const destObject = {\n        a: [1, 2, 3, 4, 5],\n        b: {\n          c: [9, 8, 7, 6, 5]\n        }\n      };\n      const fromObject = {\n        b: {\n          c: ['h', 'i']\n        }\n      };\n      expect(deepMerge(destObject, fromObject)).to.deep.equal({\n        a: [1, 2, 3, 4, 5],\n        b: {\n          c: ['h', 'i']\n        }\n      });\n    });","file":"unit/core/types/object/test-object.js","skipped":false,"dir":"test"},{"name":"should use Object.assign if merged object exceeds max depth","suites":["deepMerge"],"updatePoint":{"line":92,"column":67,"index":2412},"line":92,"code":"    it('should use Object.assign if merged object exceeds max depth', () => {\n      const destObject = {\n        a: {\n          b: {\n            c: {\n              d: 'e',\n              f: 'g'\n            }\n          }\n        }\n      };\n      const fromObject = {\n        a: {\n          b: {\n            c: {\n              d: 'z',\n              h: 'i'\n            }\n          }\n        }\n      };\n      expect(deepMerge(destObject, fromObject, 1)).to.deep.equal({\n        a: {\n          b: {\n            c: {\n              d: 'z',\n              h: 'i'\n            }\n          }\n        }\n      });\n    });","file":"unit/core/types/object/test-object.js","skipped":false,"dir":"test"},{"name":"should handle destination objects with circular references","suites":["deepMerge"],"updatePoint":{"line":124,"column":66,"index":3018},"line":124,"code":"    it('should handle destination objects with circular references', () => {\n      const destObject = {};\n      destObject.a = destObject;\n      const fromObject = {};\n      fromObject.a = {};\n      expect(deepMerge(destObject, fromObject)).to.deep.equal({\n        a: destObject\n      });\n    });","file":"unit/core/types/object/test-object.js","skipped":false,"dir":"test"},{"name":"should throw on source objects with circular references","suites":["deepMerge"],"updatePoint":{"line":133,"column":63,"index":3312},"line":133,"code":"    it('should throw on source objects with circular references', () => {\n      const destObject = {};\n      destObject.a = {};\n      const fromObject = {};\n      fromObject.a = fromObject;\n      expect(() => deepMerge(destObject, fromObject)).to.throw(/Source object has a circular reference./);\n    });","file":"unit/core/types/object/test-object.js","skipped":false,"dir":"test"},{"name":"should merge null and undefined correctly","suites":["deepMerge"],"updatePoint":{"line":140,"column":49,"index":3603},"line":140,"code":"    it('should merge null and undefined correctly', () => {\n      const destObject = {\n        a: null,\n        b: {\n          c: 'd'\n        },\n        e: undefined,\n        f: {\n          g: 'h'\n        }\n      };\n      const fromObject = {\n        a: {\n          i: 'j'\n        },\n        b: null,\n        e: {\n          k: 'm'\n        },\n        f: undefined\n      };\n      expect(deepMerge(destObject, fromObject)).to.deep.equal({\n        a: {\n          i: 'j'\n        },\n        b: null,\n        e: {\n          k: 'm'\n        },\n        f: undefined\n      });\n    });","file":"unit/core/types/object/test-object.js","skipped":false,"dir":"test"},{"name":"should short circuit when merging the same object","suites":["deepMerge"],"updatePoint":{"line":172,"column":57,"index":4185},"line":172,"code":"    it('should short circuit when merging the same object', () => {\n      const destObject = {\n        set a(val) {\n          throw new Error('deep merge tried to merge object with itself');\n        }\n      };\n      expect(() => deepMerge(destObject, destObject)).to.not.throw();\n    });","file":"unit/core/types/object/test-object.js","skipped":false,"dir":"test"},{"name":"should compare deep objects","suites":["objectsEqualDeep"],"updatePoint":{"line":198,"column":35,"index":4767},"line":198,"code":"    it('should compare deep objects', () => {\n      expect(objectsEqualDeep(deepObject, getDeepObject())).to.be.true;\n    });","file":"unit/core/types/object/test-object.js","skipped":false,"dir":"test"},{"name":"should compare shallow objects","suites":["objectsEqualDeep"],"updatePoint":{"line":201,"column":38,"index":4896},"line":201,"code":"    it('should compare shallow objects', () => {\n      expect(objectsEqualDeep(deepObject, deepObject)).to.be.true;\n      expect(objectsEqualDeep(deepObject, {\n        ...deepObject\n      })).to.be.true;\n      expect(objectsEqualDeep({\n        ...deepObject\n      }, {\n        ...deepObject\n      })).to.be.true;\n    });","file":"unit/core/types/object/test-object.js","skipped":false,"dir":"test"},{"name":"should not matter what order the keys are in","suites":["objectsEqualDeep"],"updatePoint":{"line":212,"column":52,"index":5231},"line":212,"code":"    it('should not matter what order the keys are in', () => {\n      expect(objectsEqualDeep(deepObject, {\n        c: deepObject.c,\n        f: deepObject.f,\n        d: deepObject.d,\n        a: deepObject.a,\n        b: deepObject.b\n      })).to.be.true;\n    });","file":"unit/core/types/object/test-object.js","skipped":false,"dir":"test"},{"name":"should fail if there are extra keys","suites":["objectsEqualDeep"],"updatePoint":{"line":221,"column":43,"index":5483},"line":221,"code":"    it('should fail if there are extra keys', () => {\n      expect(objectsEqualDeep(deepObject, {\n        ...deepObject,\n        foo: 'foo'\n      })).to.be.false;\n    });","file":"unit/core/types/object/test-object.js","skipped":false,"dir":"test"},{"name":"should fail if there are too-few keys","suites":["objectsEqualDeep"],"updatePoint":{"line":227,"column":45,"index":5656},"line":227,"code":"    it('should fail if there are too-few keys', () => {\n      const missingKeys = {\n        ...deepObject\n      };\n      delete missingKeys['a'];\n      expect(objectsEqualDeep(deepObject, missingKeys)).to.be.false;\n    });","file":"unit/core/types/object/test-object.js","skipped":false,"dir":"test"},{"name":"should fail if values are different","suites":["objectsEqualDeep"],"updatePoint":{"line":234,"column":43,"index":5877},"line":234,"code":"    it('should fail if values are different', () => {\n      expect(objectsEqualDeep(deepObject, {\n        ...deepObject,\n        a: 'AAA'\n      })).to.be.false;\n      expect(objectsEqualDeep(deepObject, {\n        ...deepObject,\n        b: ['B']\n      })).to.be.false;\n      expect(objectsEqualDeep(deepObject, {\n        ...deepObject,\n        c: 'C,c,see,si'\n      })).to.be.false;\n    });","file":"unit/core/types/object/test-object.js","skipped":false,"dir":"test"},{"name":"should fail if a deep value is different","suites":["objectsEqualDeep"],"updatePoint":{"line":248,"column":48,"index":6272},"line":248,"code":"    it('should fail if a deep value is different', () => {\n      const o2 = getDeepObject();\n      o2.f.g.h[0].i[0] = 'JJJ';\n      expect(objectsEqualDeep(deepObject, o2)).to.be.false;\n    });","file":"unit/core/types/object/test-object.js","skipped":false,"dir":"test"},{"name":"should compare arrays","suites":["objectsEqualDeep"],"updatePoint":{"line":257,"column":29,"index":6566},"line":257,"code":"    it('should compare arrays', () => {\n      expect(objectsEqualDeep(deepArray, getDeepArray())).to.be.true;\n      expect(objectsEqualDeep(deepArray, [...getDeepArray()])).to.be.true;\n    });","file":"unit/core/types/object/test-object.js","skipped":false,"dir":"test"},{"name":"should fail if the arrays are different","suites":["objectsEqualDeep"],"updatePoint":{"line":261,"column":47,"index":6777},"line":261,"code":"    it('should fail if the arrays are different', () => {\n      const o2 = getDeepArray();\n      expect(objectsEqualDeep(deepArray, o2.slice(1))).to.be.false;\n      expect(objectsEqualDeep(deepArray, o2.slice(0, 2))).to.be.false;\n      expect(objectsEqualDeep(deepArray, [...o2, 'extra'])).to.be.false;\n      expect(objectsEqualDeep(deepArray, ['extra', ...o2])).to.be.false;\n      expect(objectsEqualDeep(deepArray, [...o2, ...o2])).to.be.false;\n      o2[1] = 'BB';\n      expect(objectsEqualDeep(deepArray, o2)).to.be.false;\n\n      // Just to make sure nothing funky happened:\n      o2[1] = 'B';\n      expect(objectsEqualDeep(deepArray, o2)).to.be.true;\n    });","file":"unit/core/types/object/test-object.js","skipped":false,"dir":"test"},{"name":"should allocate object on first and first use only","suites":["memo"],"updatePoint":{"line":290,"column":58,"index":7726},"line":290,"code":"    it('should allocate object on first and first use only', () => {\n      // First access: allocate and reuse.\n      expect(memo(obj, PROP, factory)).to.equal('OBJ:1');\n      expect(memo(obj, PROP, factory)).to.equal('OBJ:1');\n\n      // Same object, different property: allocate again.\n      expect(memo(obj, PROP + '2', factory)).to.equal('OBJ:2');\n      expect(memo(obj, PROP + '2', factory)).to.equal('OBJ:2');\n\n      // A new object: allocate again.\n      expect(memo({\n        name: 'OBJ'\n      }, PROP, factory)).to.equal('OBJ:3');\n    });","file":"unit/core/types/object/test-object.js","skipped":false,"dir":"test"},{"name":"should return self for \".\"","suites":["getValueForExpr"],"updatePoint":{"line":306,"column":34,"index":8293},"line":306,"code":"    it('should return self for \".\"', () => {\n      const obj = {\n        str: 'A',\n        num: 1,\n        bool: true,\n        val: null\n      };\n      expect(getValueForExpr(obj, '.')).to.equal(obj);\n    });","file":"unit/core/types/object/test-object.js","skipped":false,"dir":"test"},{"name":"should return a simple value","suites":["getValueForExpr"],"updatePoint":{"line":315,"column":36,"index":8504},"line":315,"code":"    it('should return a simple value', () => {\n      const obj = {\n        str: 'A',\n        num: 1,\n        bool: true,\n        val: null\n      };\n      expect(getValueForExpr(obj, 'str')).to.equal('A');\n      expect(getValueForExpr(obj, 'num')).to.equal(1);\n      expect(getValueForExpr(obj, 'bool')).to.equal(true);\n      expect(getValueForExpr(obj, 'val')).to.be.null;\n      expect(getValueForExpr(obj, 'other')).to.be.undefined;\n    });","file":"unit/core/types/object/test-object.js","skipped":false,"dir":"test"},{"name":"should return a nested value","suites":["getValueForExpr"],"updatePoint":{"line":328,"column":36,"index":8946},"line":328,"code":"    it('should return a nested value', () => {\n      const child = {\n        str: 'A',\n        num: 1,\n        bool: true,\n        val: null\n      };\n      const obj = {\n        child\n      };\n      expect(getValueForExpr(obj, 'child')).to.deep.equal(child);\n      expect(getValueForExpr(obj, 'child.str')).to.equal('A');\n      expect(getValueForExpr(obj, 'child.num')).to.equal(1);\n      expect(getValueForExpr(obj, 'child.bool')).to.equal(true);\n      expect(getValueForExpr(obj, 'child.val')).to.be.null;\n      expect(getValueForExpr(obj, 'child.other')).to.be.undefined;\n    });","file":"unit/core/types/object/test-object.js","skipped":false,"dir":"test"},{"name":"should return a nested value without proto","suites":["getValueForExpr"],"updatePoint":{"line":345,"column":50,"index":9543},"line":345,"code":"    it('should return a nested value without proto', () => {\n      const child = {\n        str: 'A',\n        num: 1,\n        bool: true,\n        val: null\n      };\n      const obj = recreateNonProtoObject({\n        child\n      });\n      expect(getValueForExpr(obj, 'child')).to.deep.equal(child);\n      expect(getValueForExpr(obj, 'child.str')).to.equal('A');\n      expect(getValueForExpr(obj, 'child.num')).to.equal(1);\n      expect(getValueForExpr(obj, 'child.bool')).to.equal(true);\n      expect(getValueForExpr(obj, 'child.val')).to.be.null;\n      expect(getValueForExpr(obj, 'child.other')).to.be.undefined;\n    });","file":"unit/core/types/object/test-object.js","skipped":false,"dir":"test"},{"name":"should shortcircuit if a parent in chain missing","suites":["getValueForExpr"],"updatePoint":{"line":362,"column":56,"index":10170},"line":362,"code":"    it('should shortcircuit if a parent in chain missing', () => {\n      const child = {\n        str: 'A'\n      };\n      const obj = {\n        child\n      };\n      expect(getValueForExpr(obj, 'child.str')).to.equal('A');\n      expect(getValueForExpr(obj, 'unknown.str')).to.be.undefined;\n      expect(getValueForExpr(obj, 'unknown.chain.str')).to.be.undefined;\n    });","file":"unit/core/types/object/test-object.js","skipped":false,"dir":"test"},{"name":"should shortcircuit if a parent in chain is not an object","suites":["getValueForExpr"],"updatePoint":{"line":373,"column":65,"index":10548},"line":373,"code":"    it('should shortcircuit if a parent in chain is not an object', () => {\n      const child = {\n        str: 'A'\n      };\n      const obj = {\n        child,\n        nonobj: 'B'\n      };\n      expect(getValueForExpr(obj, 'child.str')).to.equal('A');\n      expect(getValueForExpr(obj, 'nonobj')).to.equal('B');\n      expect(getValueForExpr(obj, 'nonobj.str')).to.be.undefined;\n    });","file":"unit/core/types/object/test-object.js","skipped":false,"dir":"test"},{"name":"should only search in own properties","suites":["getValueForExpr"],"updatePoint":{"line":385,"column":44,"index":10912},"line":385,"code":"    it('should only search in own properties', () => {\n      const ancestor = {\n        num: 1\n      };\n      const obj = Object.create(ancestor);\n      obj.str = 'A';\n      expect(getValueForExpr(obj, 'str')).to.equal('A');\n      expect(getValueForExpr(ancestor, 'num')).to.equal(1);\n      expect(getValueForExpr(obj, 'num')).to.be.undefined;\n      expect(getValueForExpr(obj, '__proto__')).to.be.undefined;\n    });","file":"unit/core/types/object/test-object.js","skipped":false,"dir":"test"},{"name":"should support array index","suites":["getValueForExpr"],"updatePoint":{"line":396,"column":34,"index":11319},"line":396,"code":"    it('should support array index', () => {\n      const child = {\n        num: 1,\n        str: 'A'\n      };\n      const obj = {\n        foo: [child]\n      };\n      expect(getValueForExpr(obj, 'foo.0.num')).to.equal(1);\n      expect(getValueForExpr(obj, 'foo.0.str')).to.equal('A');\n      expect(getValueForExpr(obj, 'foo.0a.str')).to.be.undefined;\n      expect(getValueForExpr(obj, 'foo.1.num')).to.be.undefined;\n      expect(getValueForExpr(obj, 'foo.1.str')).to.be.undefined;\n    });","file":"unit/core/types/object/test-object.js","skipped":false,"dir":"test"},{"name":"should only search in own properties of arrays","suites":["getValueForExpr"],"updatePoint":{"line":410,"column":54,"index":11826},"line":410,"code":"    it('should only search in own properties of arrays', () => {\n      const arr = ['A'];\n      expect(getValueForExpr(arr, '0')).to.equal('A');\n      expect(getValueForExpr(arr, '1')).to.be.undefined;\n      expect(getValueForExpr(arr, 'concat')).to.be.undefined;\n      expect(getValueForExpr(arr, '__proto__')).to.be.undefined;\n    });","file":"unit/core/types/object/test-object.js","skipped":false,"dir":"test"},{"name":"should recreate an empty object","suites":["recreateNonProtoObject"],"updatePoint":{"line":419,"column":39,"index":12199},"line":419,"code":"    it('should recreate an empty object', () => {\n      const original = {};\n      const copy = recreateNonProtoObject(original);\n      expect(copy).to.deep.equal(original);\n      expect(copy).to.not.equal(original);\n      expect(copy.__proto__).to.be.undefined;\n    });","file":"unit/core/types/object/test-object.js","skipped":false,"dir":"test"},{"name":"should recreate an object","suites":["recreateNonProtoObject"],"updatePoint":{"line":426,"column":33,"index":12464},"line":426,"code":"    it('should recreate an object', () => {\n      const original = {\n        str: 'A',\n        num: 1,\n        bool: true,\n        val: null\n      };\n      const copy = recreateNonProtoObject(original);\n      expect(copy).to.deep.equal(original);\n      expect(copy).to.not.equal(original);\n      expect(copy.__proto__).to.be.undefined;\n      expect(copy.val).to.be.null;\n    });","file":"unit/core/types/object/test-object.js","skipped":false,"dir":"test"},{"name":"should recreate a nested object","suites":["recreateNonProtoObject"],"updatePoint":{"line":439,"column":39,"index":12849},"line":439,"code":"    it('should recreate a nested object', () => {\n      const original = {\n        child: {\n          str: 'A',\n          num: 1,\n          bool: true,\n          val: null\n        }\n      };\n      const copy = recreateNonProtoObject(original);\n      expect(copy).to.deep.equal(original);\n      expect(copy).to.not.equal(original);\n      expect(copy.__proto__).to.be.undefined;\n      expect(copy.child).to.deep.equal(original.child);\n      expect(copy.child).to.not.equal(original.child);\n      expect(copy.child.__proto__).to.be.undefined;\n    });","file":"unit/core/types/object/test-object.js","skipped":false,"dir":"test"},{"name":"should map a sample string appropriately","suites":["base64","base64UrlDecodeToBytes"],"updatePoint":{"line":59,"column":50,"index":2710},"line":59,"code":"      it('should map a sample string appropriately', () => {\n        expect(base64UrlDecodeToBytes('AQAB')).to.deep.equal(new Uint8Array([1, 0, 1]));\n        expect(base64UrlDecodeToBytes('_-..')).to.deep.equal(new Uint8Array([255]));\n      });","file":"unit/core/types/string/test-base64.js","skipped":false,"dir":"test"},{"name":"should handle padded and unpadded input","suites":["base64","base64UrlDecodeToBytes"],"updatePoint":{"line":63,"column":49,"index":2954},"line":63,"code":"      it('should handle padded and unpadded input', () => {\n        expect(base64UrlDecodeToBytes('cw')).to.deep.equal(stringToBytes('s'));\n        expect(base64UrlDecodeToBytes('cw')).to.deep.equal(base64UrlDecodeToBytes('cw..'));\n        expect(base64UrlDecodeToBytes('c3U')).to.deep.equal(stringToBytes('su'));\n        expect(base64UrlDecodeToBytes('c3U')).to.deep.equal(base64UrlDecodeToBytes('c3U.'));\n        expect(base64UrlDecodeToBytes('c3Vy')).to.deep.equal(stringToBytes('sur'));\n      });","file":"unit/core/types/string/test-base64.js","skipped":false,"dir":"test"},{"name":"should signal an error with bad input characters","suites":["base64","base64UrlDecodeToBytes"],"updatePoint":{"line":70,"column":58,"index":3464},"line":70,"code":"      it('should signal an error with bad input characters', () => {\n        expect(() => base64UrlDecodeToBytes('@#*#')).to.throw();\n      });","file":"unit/core/types/string/test-base64.js","skipped":false,"dir":"test"},{"name":"should signal an error with bad padding","suites":["base64","base64UrlDecodeToBytes"],"updatePoint":{"line":73,"column":49,"index":3599},"line":73,"code":"      it('should signal an error with bad padding', () => {\n        expect(() => base64UrlDecodeToBytes('c3Vy.')).to.throw();\n      });","file":"unit/core/types/string/test-base64.js","skipped":false,"dir":"test"},{"name":"should map a sample string appropriately","suites":["base64","base64DecodeToBytes"],"updatePoint":{"line":78,"column":50,"index":3788},"line":78,"code":"      it('should map a sample string appropriately', () => {\n        expect(base64DecodeToBytes('AQAB')).to.deep.equal(new Uint8Array([1, 0, 1]));\n        expect(base64DecodeToBytes('/+==')).to.deep.equal(new Uint8Array([255]));\n      });","file":"unit/core/types/string/test-base64.js","skipped":false,"dir":"test"},{"name":"should handle padded and unpadded input","suites":["base64","base64DecodeToBytes"],"updatePoint":{"line":82,"column":49,"index":4026},"line":82,"code":"      it('should handle padded and unpadded input', () => {\n        expect(base64DecodeToBytes('cw')).to.deep.equal(stringToBytes('s'));\n        expect(base64DecodeToBytes('cw')).to.deep.equal(base64DecodeToBytes('cw=='));\n        expect(base64DecodeToBytes('c3U')).to.deep.equal(stringToBytes('su'));\n        expect(base64DecodeToBytes('c3U')).to.deep.equal(base64DecodeToBytes('c3U='));\n        expect(base64DecodeToBytes('c3Vy')).to.deep.equal(stringToBytes('sur'));\n      });","file":"unit/core/types/string/test-base64.js","skipped":false,"dir":"test"},{"name":"should signal an error with bad input characters","suites":["base64","base64DecodeToBytes"],"updatePoint":{"line":89,"column":58,"index":4515},"line":89,"code":"      it('should signal an error with bad input characters', () => {\n        expect(() => base64DecodeToBytes('@#*#')).to.throw();\n      });","file":"unit/core/types/string/test-base64.js","skipped":false,"dir":"test"},{"name":"should signal an error with bad padding","suites":["base64","base64DecodeToBytes"],"updatePoint":{"line":92,"column":49,"index":4647},"line":92,"code":"      it('should signal an error with bad padding', () => {\n        expect(() => base64DecodeToBytes('c3Vy=')).to.throw();\n      });","file":"unit/core/types/string/test-base64.js","skipped":false,"dir":"test"},{"name":"should encode a bytes array to base64url string correctly","suites":["base64","base64EncodeFromBytes"],"updatePoint":{"line":97,"column":67,"index":4852},"line":97,"code":"      it('should encode a bytes array to base64url string correctly', () => {\n        expect(base64UrlEncodeFromBytes(new Uint8Array())).to.equal('');\n        expect(base64UrlEncodeFromBytes(stringToBytes('s'))).to.equal('cw..');\n        expect(base64UrlEncodeFromBytes(stringToBytes('su'))).to.equal('c3U.');\n        expect(base64UrlEncodeFromBytes(stringToBytes('sur'))).to.equal('c3Vy');\n        expect(base64UrlEncodeFromBytes(new Uint8Array([255, 239]))).to.equal('_-8.');\n      });","file":"unit/core/types/string/test-base64.js","skipped":false,"dir":"test"},{"name":"should encode a bytes array to base64 string correctly","suites":["base64","base64EncodeFromBytes"],"updatePoint":{"line":104,"column":64,"index":5337},"line":104,"code":"      it('should encode a bytes array to base64 string correctly', () => {\n        expect(base64EncodeFromBytes(new Uint8Array())).to.equal('');\n        expect(base64EncodeFromBytes(stringToBytes('s'))).to.equal('cw==');\n        expect(base64EncodeFromBytes(stringToBytes('su'))).to.equal('c3U=');\n        expect(base64EncodeFromBytes(stringToBytes('sur'))).to.equal('c3Vy');\n        expect(base64EncodeFromBytes(new Uint8Array([255, 239]))).to.equal('/+8=');\n      });","file":"unit/core/types/string/test-base64.js","skipped":false,"dir":"test"},{"name":"should handle unicode and non-unicode strings encoding","suites":["base64","base64(Encode/Decode)FromString"],"updatePoint":{"line":113,"column":64,"index":5871},"line":113,"code":"      it('should handle unicode and non-unicode strings encoding', () => {\n        expect(base64UrlEncodeFromString('')).to.equal('');\n        expect(base64UrlEncodeFromString('      ')).to.equal('ICAgICAg');\n        expect(base64UrlEncodeFromString('helloworld')).to.equal('aGVsbG93b3JsZA..');\n        expect(base64UrlEncodeFromString('hello world')).to.equal('aGVsbG8gd29ybGQ.');\n        expect(base64UrlEncodeFromString(' hello world ')).to.equal('IGhlbGxvIHdvcmxkIA..');\n        expect(base64UrlEncodeFromString('✓ à la mode')).to.equal('4pyTIMOgIGxhIG1vZGU.');\n        expect(base64UrlEncodeFromString('\\n')).to.equal('Cg..');\n        expect(base64UrlEncodeFromString('$#!@#$%^&*()')).to.equal('JCMhQCMkJV4mKigp');\n      });","file":"unit/core/types/string/test-base64.js","skipped":false,"dir":"test"},{"name":"should handle unicode and non-unicode strings decoding","suites":["base64","base64(Encode/Decode)FromString"],"updatePoint":{"line":123,"column":64,"index":6601},"line":123,"code":"      it('should handle unicode and non-unicode strings decoding', () => {\n        expect(base64UrlDecodeFromString('')).to.equal('');\n        expect(base64UrlDecodeFromString('ICAgICAg')).to.equal('      ');\n        expect(base64UrlDecodeFromString('aGVsbG93b3JsZA..')).to.equal('helloworld');\n        expect(base64UrlDecodeFromString('aGVsbG8gd29ybGQ.')).to.equal('hello world');\n        expect(base64UrlDecodeFromString('IGhlbGxvIHdvcmxkIA..')).to.equal(' hello world ');\n        expect(base64UrlDecodeFromString('4pyTIMOgIGxhIG1vZGU.')).to.equal('✓ à la mode');\n        expect(base64UrlDecodeFromString('Cg..')).to.equal('\\n');\n        expect(base64UrlDecodeFromString('JCMhQCMkJV4mKigp')).to.equal('$#!@#$%^&*()');\n      });","file":"unit/core/types/string/test-base64.js","skipped":false,"dir":"test"},{"name":"should map a sample string appropriately","suites":["stringToBytes"],"updatePoint":{"line":16,"column":48,"index":548},"line":16,"code":"    it('should map a sample string appropriately', () => {\n      const bytes = stringToBytes('abÿ');\n      expect(bytes.length).to.equal(3);\n      expect(bytes[0]).to.equal(97);\n      expect(bytes[1]).to.equal(98);\n      expect(bytes[2]).to.equal(255);\n    });","file":"unit/core/types/string/test-bytes.js","skipped":false,"dir":"test"},{"name":"should signal an error with a character >255","suites":["stringToBytes"],"updatePoint":{"line":23,"column":52,"index":813},"line":23,"code":"    it('should signal an error with a character >255', () => {\n      allowConsoleError(() => {\n        expect(() => {\n          return stringToBytes('ab☺');\n        }).to.throw();\n      });\n    });","file":"unit/core/types/string/test-bytes.js","skipped":false,"dir":"test"},{"name":"should convert bytes array to string","suites":["stringToBytes"],"updatePoint":{"line":30,"column":44,"index":1003},"line":30,"code":"    it('should convert bytes array to string', () => {\n      const str = bytesToString(new Uint8Array([102, 111, 111]));\n      expect(str).to.equal('foo');\n    });","file":"unit/core/types/string/test-bytes.js","skipped":false,"dir":"test"},{"name":"should generate random bytes array when win.crypto is availble","suites":["stringToBytes"],"updatePoint":{"line":34,"column":70,"index":1193},"line":34,"code":"    it('should generate random bytes array when win.crypto is availble', () => {\n      expect(getCryptoRandomBytesArray(fakeWin, 1)).to.deep.equal(new Uint8Array([1]));\n      expect(getCryptoRandomBytesArray(fakeWin, 2)).to.deep.equal(new Uint8Array([1, 2]));\n      expect(getCryptoRandomBytesArray(fakeWin, 3)).to.deep.equal(new Uint8Array([1, 2, 3]));\n    });","file":"unit/core/types/string/test-bytes.js","skipped":false,"dir":"test"},{"name":"should encode given string into utf-8 byte array","suites":["utf8"],"updatePoint":{"line":51,"column":56,"index":3738},"line":51,"code":"    it('should encode given string into utf-8 byte array', () => {\n      for (let i = 0; i < strings.length; i++) {\n        expect(utf8Encode(strings[i])).to.deep.equal(new Uint8Array(bytes[i]));\n      }\n    });","file":"unit/core/types/string/test-bytes.js","skipped":false,"dir":"test"},{"name":"should decode given utf-8 bytes into string","suites":["utf8"],"updatePoint":{"line":56,"column":51,"index":3945},"line":56,"code":"    it('should decode given utf-8 bytes into string', () => {\n      for (let i = 0; i < bytes.length; i++) {\n        expect(utf8Decode(new Uint8Array(bytes[i]))).to.equal(strings[i]);\n      }\n    });","file":"unit/core/types/string/test-bytes.js","skipped":false,"dir":"test"},{"name":"should convert Uint8Arrays into unsigned 32-bit integers","suites":["bytesToUInt32"],"updatePoint":{"line":63,"column":64,"index":4206},"line":63,"code":"    it('should convert Uint8Arrays into unsigned 32-bit integers', () => {\n      expect(bytesToUInt32(new Uint8Array([0xff, 0xff, 0xff, 0xff]))).to.equal(0xffffffff);\n      expect(bytesToUInt32(new Uint8Array([0xde, 0xad, 0xbe, 0xef]))).to.equal(0xdeadbeef);\n      expect(bytesToUInt32(new Uint8Array([0x47, 0x47, 0x47, 0x47]))).to.equal(0x47474747);\n      expect(bytesToUInt32(new Uint8Array([0x00, 0x00, 0x00, 0x00]))).to.equal(0x00000000);\n    });","file":"unit/core/types/string/test-bytes.js","skipped":false,"dir":"test"},{"name":"should transform dashes to camel case.","suites":["dashToCamelCase"],"updatePoint":{"line":4,"column":46,"index":299},"line":4,"code":"    it('should transform dashes to camel case.', () => {\n      expect(dashToCamelCase('foo')).to.equal('foo');\n      expect(dashToCamelCase('foo-bar')).to.equal('fooBar');\n      expect(dashToCamelCase('foo-bar-baz')).to.equal('fooBarBaz');\n      expect(dashToCamelCase('-foo')).to.equal('Foo');\n    });","file":"unit/core/types/string/test-string.js","skipped":false,"dir":"test"},{"name":"should determine whether string ends with.","suites":["endsWith"],"updatePoint":{"line":12,"column":50,"index":643},"line":12,"code":"    it('should determine whether string ends with.', () => {\n      expect(endsWith('a', 'a')).to.be.true;\n      expect(endsWith('b', 'a')).to.be.false;\n      expect(endsWith('ab', 'a')).to.be.false;\n      expect(endsWith('aba', 'a')).to.be.true;\n      expect(endsWith('aba', 'aba')).to.be.true;\n      expect(endsWith('Xaba', 'aba')).to.be.true;\n      expect(endsWith('Xaba', '')).to.be.true;\n      expect(endsWith('', 'a')).to.be.false;\n      expect(endsWith('aa', 'aaa')).to.be.false;\n      expect(endsWith('aa', 'aaaa')).to.be.false;\n      expect(endsWith('', '')).to.be.true;\n    });","file":"unit/core/types/string/test-string.js","skipped":false,"dir":"test"},{"name":"should determine whether string includes.","suites":["includes"],"updatePoint":{"line":27,"column":49,"index":1266},"line":27,"code":"    it('should determine whether string includes.', () => {\n      expect(includes('a', 'a')).to.be.true;\n      expect(includes('a', 'a', 0)).to.be.true;\n      expect(includes('a', 'a', 1)).to.be.false;\n      expect(includes('b', 'a')).to.be.false;\n      expect(includes('ab', 'a')).to.be.true;\n      expect(includes('aba', 'a')).to.be.true;\n      expect(includes('aba', 'aba')).to.be.true;\n      expect(includes('Xaba', 'aba')).to.be.true;\n      expect(includes('Xaba', '')).to.be.true;\n      expect(includes('', 'a')).to.be.false;\n      expect(includes('aa', 'aaa')).to.be.false;\n      expect(includes('aa', 'aaaa')).to.be.false;\n      expect(includes('', '')).to.be.true;\n    });","file":"unit/core/types/string/test-string.js","skipped":false,"dir":"test"},{"name":"should replace place holders with values.","suites":["expandTemplate"],"updatePoint":{"line":60,"column":49,"index":2373},"line":60,"code":"    it('should replace place holders with values.', () => {\n      expect(expandTemplate('${x}', testGetter)).to.equal('Test 1');\n      expect(expandTemplate('${y}', testGetter)).to.equal('Test 2');\n      expect(expandTemplate('${x} ${y}', testGetter)).to.equal('Test 1 Test 2');\n      expect(expandTemplate('a${x}', testGetter)).to.equal('aTest 1');\n      expect(expandTemplate('${x}a', testGetter)).to.equal('Test 1a');\n      expect(expandTemplate('a${x}a', testGetter)).to.equal('aTest 1a');\n      expect(expandTemplate('${unknown}', testGetter)).to.equal('not found');\n    });","file":"unit/core/types/string/test-string.js","skipped":false,"dir":"test"},{"name":"should handle malformed place holders.","suites":["expandTemplate"],"updatePoint":{"line":69,"column":46,"index":2950},"line":69,"code":"    it('should handle malformed place holders.', () => {\n      expect(expandTemplate('${x', testGetter)).to.equal('${x');\n      expect(expandTemplate('${', testGetter)).to.equal('${');\n      expect(expandTemplate('$x}', testGetter)).to.equal('$x}');\n      expect(expandTemplate('$x', testGetter)).to.equal('$x');\n      expect(expandTemplate('{x}', testGetter)).to.equal('{x}');\n      expect(expandTemplate('${{x}', testGetter)).to.equal('${{x}');\n      expect(expandTemplate('${${x}', testGetter)).to.equal('${Test 1');\n    });","file":"unit/core/types/string/test-string.js","skipped":false,"dir":"test"},{"name":"should default to one iteration.","suites":["expandTemplate"],"updatePoint":{"line":78,"column":40,"index":3472},"line":78,"code":"    it('should default to one iteration.', () => {\n      expect(expandTemplate('${tox}', testGetter)).to.equal('${x}');\n      expect(expandTemplate('${toxy}', testGetter)).to.equal('${x}${y}');\n    });","file":"unit/core/types/string/test-string.js","skipped":false,"dir":"test"},{"name":"should handle multiple iterations when asked to.","suites":["expandTemplate"],"updatePoint":{"line":82,"column":56,"index":3690},"line":82,"code":"    it('should handle multiple iterations when asked to.', () => {\n      expect(expandTemplate('${tox}', testGetter, 2)).to.equal('Test 1');\n      expect(expandTemplate('${toxy}', testGetter, 2)).to.equal('Test 1Test 2');\n      expect(expandTemplate('${totoxy}', testGetter, 2)).to.equal('${x}${y}');\n      expect(expandTemplate('${totoxy}', testGetter, 3)).to.equal('Test 1Test 2');\n      expect(expandTemplate('${totoxy}', testGetter, 10)).to.equal('Test 1Test 2');\n    });","file":"unit/core/types/string/test-string.js","skipped":false,"dir":"test"},{"name":"should handle circular expansions without hanging","suites":["expandTemplate"],"updatePoint":{"line":89,"column":57,"index":4167},"line":89,"code":"    it('should handle circular expansions without hanging', () => {\n      expect(expandTemplate('${loop}', testGetter)).to.equal('${loop}');\n      expect(expandTemplate('${loop}', testGetter), 10).to.equal('${loop}');\n      expect(expandTemplate('${loop1}', testGetter), 10).to.equal('${loop2}');\n    });","file":"unit/core/types/string/test-string.js","skipped":false,"dir":"test"},{"name":"should convert camelCase strings to dash-case strings","suites":["camelCaseToDash"],"updatePoint":{"line":96,"column":61,"index":4520},"line":96,"code":"    it('should convert camelCase strings to dash-case strings', () => {\n      expect(camelCaseToDash('foo')).to.equal('foo');\n      expect(camelCaseToDash('fooBar')).to.equal('foo-bar');\n      expect(camelCaseToDash('fooBarBaz')).to.equal('foo-bar-baz');\n      // Not really valid camel case\n      expect(camelCaseToDash('FooBarBaz')).to.equal('Foo-bar-baz');\n      expect(camelCaseToDash('f00B4rB4z')).to.equal('f00-b4r-b4z');\n      expect(camelCaseToDash('f00b4rb4z')).to.equal('f00b4rb4z');\n      expect(camelCaseToDash('ABC')).to.equal('A-b-c');\n      expect(camelCaseToDash('aBC')).to.equal('a-b-c');\n    });","file":"unit/core/types/string/test-string.js","skipped":false,"dir":"test"},{"name":"remove trailing spaces","suites":["trimEnd"],"updatePoint":{"line":109,"column":30,"index":5139},"line":109,"code":"    it('remove trailing spaces', () => {\n      expect(trimEnd('abc ')).to.equal('abc');\n    });","file":"unit/core/types/string/test-string.js","skipped":false,"dir":"test"},{"name":"remove trailing whitespace characters","suites":["trimEnd"],"updatePoint":{"line":112,"column":45,"index":5250},"line":112,"code":"    it('remove trailing whitespace characters', () => {\n      expect(trimEnd('abc\\n\\t')).to.equal('abc');\n    });","file":"unit/core/types/string/test-string.js","skipped":false,"dir":"test"},{"name":"should keep leading spaces","suites":["trimEnd"],"updatePoint":{"line":115,"column":34,"index":5353},"line":115,"code":"    it('should keep leading spaces', () => {\n      expect(trimEnd(' abc')).to.equal(' abc');\n    });","file":"unit/core/types/string/test-string.js","skipped":false,"dir":"test"},{"name":"should keep leading whitespace characters","suites":["trimEnd"],"updatePoint":{"line":118,"column":49,"index":5469},"line":118,"code":"    it('should keep leading whitespace characters', () => {\n      expect(trimEnd('\\n\\tabc')).to.equal('\\n\\tabc');\n    });","file":"unit/core/types/string/test-string.js","skipped":false,"dir":"test"},{"name":"should not replace with no match","suites":["asyncStringReplace"],"updatePoint":{"line":123,"column":40,"index":5629},"line":123,"code":"    it('should not replace with no match', () => {\n      const result = asyncStringReplace('the quick silver fox', /brown/, 'red');\n      return expect(result).to.eventually.equal('the quick silver fox');\n    });","file":"unit/core/types/string/test-string.js","skipped":false,"dir":"test"},{"name":"should replace with string as callback","suites":["asyncStringReplace"],"updatePoint":{"line":127,"column":46,"index":5848},"line":127,"code":"    it('should replace with string as callback', () => {\n      const result = asyncStringReplace('the quick brown fox', /brown/, 'red');\n      return expect(result).to.eventually.equal('the quick red fox');\n    });","file":"unit/core/types/string/test-string.js","skipped":false,"dir":"test"},{"name":"should use replacer with special pattern","suites":["asyncStringReplace"],"updatePoint":{"line":131,"column":48,"index":6065},"line":131,"code":"    it('should use replacer with special pattern', async () => {\n      await expect(asyncStringReplace('the quick brown fox', /brown/, '$$')).to.eventually.equal('the quick $ fox');\n      await expect(asyncStringReplace('the quick brown fox', /brown/, 'purple $& grey')).to.eventually.equal('the quick purple brown grey fox');\n      await expect(asyncStringReplace('the quick brown fox', /brown/, \"sweet $'\")).to.eventually.equal('the quick sweet  fox fox');\n      await expect(asyncStringReplace('the quick brown fox', /brown/, '$`empathetic')).to.eventually.equal('the quick the quick empathetic fox');\n    });","file":"unit/core/types/string/test-string.js","skipped":false,"dir":"test"},{"name":"should replace with sync function as callback","suites":["asyncStringReplace"],"updatePoint":{"line":137,"column":53,"index":6683},"line":137,"code":"    it('should replace with sync function as callback', () => {\n      const result = asyncStringReplace('the quick brown fox', /brown/, () => 'red');\n      return expect(result).to.eventually.equal('the quick red fox');\n    });","file":"unit/core/types/string/test-string.js","skipped":false,"dir":"test"},{"name":"should replace with no capture groups","suites":["asyncStringReplace"],"updatePoint":{"line":141,"column":45,"index":6903},"line":141,"code":"    it('should replace with no capture groups', () => {\n      const result = asyncStringReplace('the quick brown fox', /brown/, () => Promise.resolve('red'));\n      return expect(result).to.eventually.equal('the quick red fox');\n    });","file":"unit/core/types/string/test-string.js","skipped":false,"dir":"test"},{"name":"should replace with one capture group","suites":["asyncStringReplace"],"updatePoint":{"line":145,"column":45,"index":7140},"line":145,"code":"    it('should replace with one capture group', () => {\n      const result = asyncStringReplace('item 798', /item (\\d*)/, (match, p1) => Promise.resolve(p1));\n      return expect(result).to.eventually.equal('798');\n    });","file":"unit/core/types/string/test-string.js","skipped":false,"dir":"test"},{"name":"should replace with two capture groups","suites":["asyncStringReplace"],"updatePoint":{"line":149,"column":46,"index":7364},"line":149,"code":"    it('should replace with two capture groups', () => {\n      const result = asyncStringReplace('John Smith', /(\\w+)\\s(\\w+)/, (match, p1, p2) => Promise.resolve(`${p2}, ${p1}`));\n      return expect(result).to.eventually.equal('Smith, John');\n    });","file":"unit/core/types/string/test-string.js","skipped":false,"dir":"test"},{"name":"should replace twice","suites":["asyncStringReplace"],"updatePoint":{"line":153,"column":28,"index":7598},"line":153,"code":"    it('should replace twice', () => {\n      const result = asyncStringReplace('John 123 Smith 456 III', /(\\d+)/g, () => Promise.resolve('**'));\n      return expect(result).to.eventually.equal('John ** Smith ** III');\n    });","file":"unit/core/types/string/test-string.js","skipped":false,"dir":"test"},{"name":"should pad string to target length","suites":["padStart"],"updatePoint":{"line":159,"column":42,"index":7875},"line":159,"code":"    it('should pad string to target length', () => {\n      expect(padStart('abc', 4, ' ')).to.equal(' abc');\n      expect(padStart('abc', 8, ' ')).to.equal('     abc');\n    });","file":"unit/core/types/string/test-string.js","skipped":false,"dir":"test"},{"name":"should trim padString if necessary to fit target length","suites":["padStart"],"updatePoint":{"line":163,"column":63,"index":8073},"line":163,"code":"    it('should trim padString if necessary to fit target length', () => {\n      expect(padStart('abc', 4, 'xy')).to.equal('xabc');\n      expect(padStart('abc', 6, 'xy')).to.equal('xyxabc');\n    });","file":"unit/core/types/string/test-string.js","skipped":false,"dir":"test"},{"name":"should return original string if equal or greater than target length","suites":["padStart"],"updatePoint":{"line":167,"column":76,"index":8284},"line":167,"code":"    it('should return original string if equal or greater than target length', () => {\n      expect(padStart('abc', 3, ' ')).to.equal('abc');\n      expect(padStart('abc', 0, ' ')).to.equal('abc');\n    });","file":"unit/core/types/string/test-string.js","skipped":false,"dir":"test"},{"name":"returns true for strings","suites":["isString"],"updatePoint":{"line":173,"column":32,"index":8482},"line":173,"code":"    it('returns true for strings', () => {\n      ['hello', '', `template ${1}`].forEach(s => expect(isString(s)).to.be.true);\n    });","file":"unit/core/types/string/test-string.js","skipped":false,"dir":"test"},{"name":"returns true for anything else","suites":["isString"],"updatePoint":{"line":176,"column":38,"index":8622},"line":176,"code":"    it('returns true for anything else', () => {\n      [[], {}, true, -1, null, undefined, function () {}].forEach(s => expect(isString(s)).to.be.false);\n    });","file":"unit/core/types/string/test-string.js","skipped":false,"dir":"test"},{"name":"should return empty params when query string is empty or null","suites":["parseQueryString"],"updatePoint":{"line":4,"column":69,"index":248},"line":4,"code":"    it('should return empty params when query string is empty or null', () => {\n      expect(parseQueryString(null)).to.deep.equal({});\n      expect(parseQueryString('')).to.deep.equal({});\n    });","file":"unit/core/types/string/test-url.js","skipped":false,"dir":"test"},{"name":"should parse single key-value","suites":["parseQueryString"],"updatePoint":{"line":8,"column":37,"index":414},"line":8,"code":"    it('should parse single key-value', () => {\n      expect(parseQueryString('a=1')).to.deep.equal({\n        'a': '1'\n      });\n    });","file":"unit/core/types/string/test-url.js","skipped":false,"dir":"test"},{"name":"should parse two key-values","suites":["parseQueryString"],"updatePoint":{"line":13,"column":35,"index":549},"line":13,"code":"    it('should parse two key-values', () => {\n      expect(parseQueryString('a=1&b=2')).to.deep.equal({\n        'a': '1',\n        'b': '2'\n      });\n    });","file":"unit/core/types/string/test-url.js","skipped":false,"dir":"test"},{"name":"should ignore leading ?","suites":["parseQueryString"],"updatePoint":{"line":19,"column":31,"index":702},"line":19,"code":"    it('should ignore leading ?', () => {\n      expect(parseQueryString('?a=1&b=2')).to.deep.equal({\n        'a': '1',\n        'b': '2'\n      });\n    });","file":"unit/core/types/string/test-url.js","skipped":false,"dir":"test"},{"name":"should ignore leading #","suites":["parseQueryString"],"updatePoint":{"line":25,"column":31,"index":856},"line":25,"code":"    it('should ignore leading #', () => {\n      expect(parseQueryString('#a=1&b=2')).to.deep.equal({\n        'a': '1',\n        'b': '2'\n      });\n    });","file":"unit/core/types/string/test-url.js","skipped":false,"dir":"test"},{"name":"should parse empty value","suites":["parseQueryString"],"updatePoint":{"line":31,"column":32,"index":1011},"line":31,"code":"    it('should parse empty value', () => {\n      expect(parseQueryString('a=&b=2')).to.deep.equal({\n        'a': '',\n        'b': '2'\n      });\n      expect(parseQueryString('a&b=2')).to.deep.equal({\n        'a': '',\n        'b': '2'\n      });\n    });","file":"unit/core/types/string/test-url.js","skipped":false,"dir":"test"},{"name":"should decode names and values","suites":["parseQueryString"],"updatePoint":{"line":41,"column":38,"index":1269},"line":41,"code":"    it('should decode names and values', () => {\n      expect(parseQueryString('a%26=1%26&b=2')).to.deep.equal({\n        'a&': '1&',\n        'b': '2'\n      });\n    });","file":"unit/core/types/string/test-url.js","skipped":false,"dir":"test"},{"name":"should return last dupe","suites":["parseQueryString"],"updatePoint":{"line":47,"column":31,"index":1430},"line":47,"code":"    it('should return last dupe', () => {\n      expect(parseQueryString('a=1&b=2&a=3')).to.deep.equal({\n        'a': '3',\n        'b': '2'\n      });\n    });","file":"unit/core/types/string/test-url.js","skipped":false,"dir":"test"},{"name":"parses the `originalHash`","suites":["getHashParams"],"updatePoint":{"line":55,"column":33,"index":1631},"line":55,"code":"    it('parses the `originalHash`', () => {\n      const params = getHashParams({\n        location: {\n          originalHash: '#development=1&original',\n          hash: '#development=1&missingOriginal'\n        }\n      });\n      expect(params).to.deep.equal({\n        'development': '1',\n        'original': ''\n      });\n    });","file":"unit/core/types/string/test-url.js","skipped":false,"dir":"test"},{"name":"parses the hash if `originalHash` is unset","suites":["getHashParams"],"updatePoint":{"line":67,"column":50,"index":1975},"line":67,"code":"    it('parses the hash if `originalHash` is unset', () => {\n      const params = getHashParams({\n        location: {\n          hash: '#development=1&missingOriginal'\n        }\n      });\n      expect(params).to.deep.equal({\n        'development': '1',\n        'missingOriginal': ''\n      });\n    });","file":"unit/core/types/string/test-url.js","skipped":false,"dir":"test"},{"name":"should return empty array if null is passed","suites":["toArray"],"updatePoint":{"line":4,"column":51,"index":276},"line":4,"code":"    it('should return empty array if null is passed', () => {\n      expect(toArray(null).length).to.equal(0);\n      expect(toArray(undefined).length).to.equal(0);\n    });","file":"unit/core/types/test-array.js","skipped":false,"dir":"test"},{"name":"should convert NodeList to array","suites":["toArray"],"updatePoint":{"line":8,"column":40,"index":436},"line":8,"code":"    it('should convert NodeList to array', () => {\n      const parent = document.createElement('div');\n      parent.appendChild(document.createElement('p'));\n      parent.appendChild(document.createElement('span'));\n      parent.appendChild(document.createElement('div'));\n      const arr = toArray(parent.childNodes);\n      expect(arr[0]).to.equal(parent.childNodes[0]);\n      expect(arr.length).to.equal(3);\n      expect(Array.isArray(arr)).to.be.true;\n    });","file":"unit/core/types/test-array.js","skipped":false,"dir":"test"},{"name":"should convert HTMLCollection to array","suites":["toArray"],"updatePoint":{"line":18,"column":46,"index":905},"line":18,"code":"    it('should convert HTMLCollection to array', () => {\n      const parent = document.createElement('div');\n      parent.appendChild(document.createElement('form'));\n      parent.appendChild(document.createElement('form'));\n      document.body.appendChild(parent);\n      const arr = toArray(document.forms);\n      expect(arr[0]).to.equal(document.forms[0]);\n      expect(arr.length).to.equal(2);\n      expect(Array.isArray(arr)).to.be.true;\n      document.body.removeChild(parent);\n    });","file":"unit/core/types/test-array.js","skipped":false,"dir":"test"},{"name":"should convert HTMLOptionsCollection to array","suites":["toArray"],"updatePoint":{"line":29,"column":53,"index":1403},"line":29,"code":"    it('should convert HTMLOptionsCollection to array', () => {\n      const parent = document.createElement('select');\n      parent.appendChild(document.createElement('option'));\n      parent.appendChild(document.createElement('option'));\n      parent.appendChild(document.createElement('option'));\n      parent.appendChild(document.createElement('option'));\n      const arr = toArray(parent.options);\n      expect(arr[0]).to.equal(parent.options[0]);\n      expect(arr.length).to.equal(4);\n      expect(Array.isArray(arr)).to.be.true;\n    });","file":"unit/core/types/test-array.js","skipped":false,"dir":"test"},{"name":"should return empty array for an empty array","suites":["arrayOrSingleItemToArray"],"updatePoint":{"line":42,"column":52,"index":1998},"line":42,"code":"    it('should return empty array for an empty array', () => {\n      const input = [];\n      const result = arrayOrSingleItemToArray(input);\n      expect(result).to.deep.equal([]);\n      expect(result).to.equal(input);\n    });","file":"unit/core/types/test-array.js","skipped":false,"dir":"test"},{"name":"should return the array array as specified","suites":["arrayOrSingleItemToArray"],"updatePoint":{"line":48,"column":50,"index":2223},"line":48,"code":"    it('should return the array array as specified', () => {\n      const input = [1, 2, 3];\n      const result = arrayOrSingleItemToArray(input);\n      expect(result).to.deep.equal([1, 2, 3]);\n      expect(result).to.equal(input);\n    });","file":"unit/core/types/test-array.js","skipped":false,"dir":"test"},{"name":"should return the item as an array","suites":["arrayOrSingleItemToArray"],"updatePoint":{"line":54,"column":42,"index":2454},"line":54,"code":"    it('should return the item as an array', () => {\n      const result = arrayOrSingleItemToArray(1);\n      expect(result).to.deep.equal([1]);\n    });","file":"unit/core/types/test-array.js","skipped":false,"dir":"test"},{"name":"should return a null as an array","suites":["arrayOrSingleItemToArray"],"updatePoint":{"line":58,"column":40,"index":2604},"line":58,"code":"    it('should return a null as an array', () => {\n      const result = arrayOrSingleItemToArray(null);\n      expect(result).to.deep.equal([null]);\n    });","file":"unit/core/types/test-array.js","skipped":false,"dir":"test"},{"name":"should return true on empty arrays","suites":["areEqualOrdered"],"updatePoint":{"line":64,"column":42,"index":2812},"line":64,"code":"    it('should return true on empty arrays', () => {\n      const result = areEqualOrdered([], []);\n      expect(result).to.be.true;\n    });","file":"unit/core/types/test-array.js","skipped":false,"dir":"test"},{"name":"should return true on same array with primitive types of same seq","suites":["areEqualOrdered"],"updatePoint":{"line":68,"column":73,"index":2983},"line":68,"code":"    it('should return true on same array with primitive types of same seq', () => {\n      const result = areEqualOrdered([1, 'string', true, undefined, null], [1, 'string', true, undefined, null]);\n      expect(result).to.be.true;\n    });","file":"unit/core/types/test-array.js","skipped":false,"dir":"test"},{"name":"should return true on same array with objects of same seq","suites":["areEqualOrdered"],"updatePoint":{"line":72,"column":65,"index":3214},"line":72,"code":"    it('should return true on same array with objects of same seq', () => {\n      const o1 = {\n        a: 1\n      };\n      const o2 = () => {\n        return 'arrow func';\n      };\n      const o3 = new Function('whatever');\n      const o4 = {};\n      const o5 = [];\n      const result = areEqualOrdered([o1, o2, o3, o4, o5], [o1, o2, o3, o4, o5]);\n      expect(result).to.be.true;\n    });","file":"unit/core/types/test-array.js","skipped":false,"dir":"test"},{"name":"should return false on same array with primitive types of different seq","suites":["areEqualOrdered"],"updatePoint":{"line":85,"column":79,"index":3616},"line":85,"code":"    it('should return false on same array with primitive types of different seq', () => {\n      const result = areEqualOrdered([null, true, 'string', undefined, 1], [1, 'string', true, undefined, null]);\n      expect(result).to.be.false;\n    });","file":"unit/core/types/test-array.js","skipped":false,"dir":"test"},{"name":"should return false on same array with objects of different seq","suites":["areEqualOrdered"],"updatePoint":{"line":89,"column":71,"index":3854},"line":89,"code":"    it('should return false on same array with objects of different seq', () => {\n      const o1 = {\n        a: 1\n      };\n      const o2 = () => {\n        return 'arrow func';\n      };\n      const o3 = new Function('whatever');\n      const o4 = {};\n      const o5 = [];\n      const result = areEqualOrdered([o4, o5, o3, o2, o1], [o1, o2, o3, o4, o5]);\n      expect(result).to.be.false;\n    });","file":"unit/core/types/test-array.js","skipped":false,"dir":"test"},{"name":"should return false on array of different length","suites":["areEqualOrdered"],"updatePoint":{"line":102,"column":56,"index":4234},"line":102,"code":"    it('should return false on array of different length', () => {\n      const result = areEqualOrdered([1, 2, 3], [1, 2, 3, 3]);\n      expect(result).to.be.false;\n    });","file":"unit/core/types/test-array.js","skipped":false,"dir":"test"},{"name":"should remove elements that return true","suites":["remove"],"updatePoint":{"line":112,"column":47,"index":4515},"line":112,"code":"    it('should remove elements that return true', () => {\n      const removed = remove(array, i => i > 2);\n      expect(array).to.deep.equal([1, 2]);\n      expect(removed).to.deep.equal([3, 4, 5]);\n    });","file":"unit/core/types/test-array.js","skipped":false,"dir":"test"},{"name":"handles no removals","suites":["remove"],"updatePoint":{"line":117,"column":27,"index":4701},"line":117,"code":"    it('handles no removals', () => {\n      const removed = remove(array, () => false);\n      expect(array).to.deep.equal([1, 2, 3, 4, 5]);\n      expect(removed).to.deep.equal([]);\n    });","file":"unit/core/types/test-array.js","skipped":false,"dir":"test"},{"name":"handles consecutive removals","suites":["remove"],"updatePoint":{"line":122,"column":36,"index":4899},"line":122,"code":"    it('handles consecutive removals', () => {\n      const removed = remove(array, () => true);\n      expect(array).to.deep.equal([]);\n      expect(removed).to.deep.equal([1, 2, 3, 4, 5]);\n    });","file":"unit/core/types/test-array.js","skipped":false,"dir":"test"},{"name":"should return the index of first matching element","suites":["findIndex"],"updatePoint":{"line":129,"column":57,"index":5161},"line":129,"code":"    it('should return the index of first matching element', () => {\n      const found = findIndex([4, 1, 5, 3, 4, 5], element => element > 4);\n      expect(found).to.equal(2);\n    });","file":"unit/core/types/test-array.js","skipped":false,"dir":"test"},{"name":"should return -1 if no matching element","suites":["findIndex"],"updatePoint":{"line":133,"column":47,"index":5335},"line":133,"code":"    it('should return -1 if no matching element', () => {\n      const found = findIndex([4, 1, 5, 3, 4, 5], element => element > 5);\n      expect(found).to.equal(-1);\n    });","file":"unit/core/types/test-array.js","skipped":false,"dir":"test"},{"name":"should pass index as the 2nd param to the predicate function","suites":["findIndex"],"updatePoint":{"line":137,"column":68,"index":5531},"line":137,"code":"    it('should pass index as the 2nd param to the predicate function', () => {\n      const found = findIndex([0, 0, 0, 0, 0, 0], (element, i) => {\n        return i == 4;\n      });\n      expect(found).to.equal(4);\n    });","file":"unit/core/types/test-array.js","skipped":false,"dir":"test"},{"name":"should pass the original array as the 3rd param to the predicate","suites":["findIndex"],"updatePoint":{"line":143,"column":72,"index":5756},"line":143,"code":"    it('should pass the original array as the 3rd param to the predicate', () => {\n      findIndex([1, 2, 3], (element, i, array) => {\n        expect(array).to.deep.equal([1, 2, 3]);\n      });\n    });","file":"unit/core/types/test-array.js","skipped":false,"dir":"test"},{"name":"should return empty array for empty iterator","suites":["fromIterator"],"updatePoint":{"line":150,"column":52,"index":5984},"line":150,"code":"    it('should return empty array for empty iterator', () => {\n      const iterator = {\n        next() {\n          return {\n            value: undefined,\n            done: true\n          };\n        }\n      };\n      expect(fromIterator(iterator)).to.be.an('array').that.is.empty;\n    });","file":"unit/core/types/test-array.js","skipped":false,"dir":"test"},{"name":"should return non-empty array for non-empty iterator","suites":["fromIterator"],"updatePoint":{"line":161,"column":60,"index":6279},"line":161,"code":"    it('should return non-empty array for non-empty iterator', () => {\n      let index = 0;\n      const iterator = {\n        next() {\n          return index < 3 ? {\n            value: index++ * 2,\n            done: false\n          } : {\n            value: undefined,\n            done: true\n          };\n        }\n      };\n      expect(fromIterator(iterator)).to.deep.equal([0, 2, 4]);\n    });","file":"unit/core/types/test-array.js","skipped":false,"dir":"test"},{"name":"should push element","suites":["pushIfNotExist"],"updatePoint":{"line":178,"column":27,"index":6682},"line":178,"code":"    it('should push element', () => {\n      const array = [1, 2, 3, 4];\n      pushIfNotExist(array, 5);\n      expect(array).to.deep.equal([1, 2, 3, 4, 5]);\n      pushIfNotExist(array, 2.3);\n      expect(array).to.deep.equal([1, 2, 3, 4, 5, 2.3]);\n    });","file":"unit/core/types/test-array.js","skipped":false,"dir":"test"},{"name":"should not push element","suites":["pushIfNotExist"],"updatePoint":{"line":185,"column":31,"index":6941},"line":185,"code":"    it('should not push element', () => {\n      const array = [1, 2, 3, 4];\n      pushIfNotExist(array, 1);\n      expect(array).to.deep.equal([1, 2, 3, 4]);\n    });","file":"unit/core/types/test-array.js","skipped":false,"dir":"test"},{"name":"should return null for empty values","suites":["parseDate"],"updatePoint":{"line":7,"column":43,"index":286},"line":7,"code":"    it('should return null for empty values', () => {\n      expect(parseDate(null)).to.be.null;\n      expect(parseDate(undefined)).to.be.null;\n      expect(parseDate('')).to.be.null;\n    });","file":"unit/core/types/test-date.js","skipped":false,"dir":"test"},{"name":"should return null for invalid values","suites":["parseDate"],"updatePoint":{"line":12,"column":45,"index":479},"line":12,"code":"    it('should return null for invalid values', () => {\n      expect(parseDate('abc')).to.be.null;\n    });","file":"unit/core/types/test-date.js","skipped":false,"dir":"test"},{"name":"should return current date for \"now\"","suites":["parseDate"],"updatePoint":{"line":15,"column":44,"index":585},"line":15,"code":"    it('should return current date for \"now\"', () => {\n      expect(parseDate('now')).to.equal(Date.now());\n    });","file":"unit/core/types/test-date.js","skipped":false,"dir":"test"},{"name":"should parse a date","suites":["parseDate"],"updatePoint":{"line":18,"column":27,"index":684},"line":18,"code":"    it('should parse a date', () => {\n      // +1 second.\n      expect(parseDate('2018-01-01T08:00:01Z')).to.equal(Date.now() + 1000);\n    });","file":"unit/core/types/test-date.js","skipped":false,"dir":"test"},{"name":"should return null for null input","suites":["getDate"],"updatePoint":{"line":28,"column":41,"index":980},"line":28,"code":"    it('should return null for null input', () => {\n      expect(getDate(null)).to.be.null;\n      expect(getDate(0)).to.be.null;\n      expect(getDate('')).to.be.null;\n      expect(getDate(undefined)).to.be.null;\n      expect(getDate(NaN)).to.be.null;\n    });","file":"unit/core/types/test-date.js","skipped":false,"dir":"test"},{"name":"should return the value from Date and number types","suites":["getDate"],"updatePoint":{"line":35,"column":58,"index":1256},"line":35,"code":"    it('should return the value from Date and number types', () => {\n      expect(getDate(date)).to.equal(date.getTime());\n      expect(getDate(date.getTime())).to.equal(date.getTime());\n    });","file":"unit/core/types/test-date.js","skipped":false,"dir":"test"},{"name":"should parse a string value","suites":["getDate"],"updatePoint":{"line":39,"column":35,"index":1428},"line":39,"code":"    it('should parse a string value', () => {\n      expect(getDate(date.toISOString())).to.equal(date.getTime());\n    });","file":"unit/core/types/test-date.js","skipped":false,"dir":"test"},{"name":"should parse a \"now\" keywrod","suites":["getDate"],"updatePoint":{"line":42,"column":36,"index":1551},"line":42,"code":"    it('should parse a \"now\" keywrod', () => {\n      env.sandbox.useFakeTimers(date);\n      expect(getDate('now')).to.be.equal(date.getTime());\n    });","file":"unit/core/types/test-date.js","skipped":false,"dir":"test"},{"name":"should return true for valid enum values","suites":["isEnumValue"],"updatePoint":{"line":10,"column":48,"index":283},"line":10,"code":"    it('should return true for valid enum values', () => {\n      ['x', 'y', 'z'].forEach(value => {\n        expect(isEnumValue(enumObj, value), 'enum value = ' + value).to.be.true;\n      });\n    });","file":"unit/core/types/test-enum.js","skipped":false,"dir":"test"},{"name":"should return false for non-enum values","suites":["isEnumValue"],"updatePoint":{"line":15,"column":47,"index":481},"line":15,"code":"    it('should return false for non-enum values', () => {\n      ['a', 'X', 'Z', {\n        'x': 'x'\n      }, ['y'], null, undefined, [], /x/, /y/, 42].forEach(value => {\n        expect(isEnumValue(enumObj, value), 'enum value = ' + value).to.be.false;\n      });\n    });","file":"unit/core/types/test-enum.js","skipped":false,"dir":"test"},{"name":"should yield false for non-numbers","suites":["isFiniteNumber"],"updatePoint":{"line":4,"column":42,"index":174},"line":4,"code":"    it('should yield false for non-numbers', () => {\n      expect(isFiniteNumber(null)).to.be.false;\n      expect(isFiniteNumber(undefined)).to.be.false;\n      expect(isFiniteNumber('')).to.be.false;\n      expect(isFiniteNumber('2')).to.be.false;\n      expect(isFiniteNumber([])).to.be.false;\n      expect(isFiniteNumber([2])).to.be.false;\n      expect(isFiniteNumber({})).to.be.false;\n      expect(isFiniteNumber({\n        'a': 2\n      })).to.be.false;\n      expect(isFiniteNumber(true)).to.be.false;\n      expect(isFiniteNumber(NaN)).to.be.false;\n    });","file":"unit/core/types/test-types.js","skipped":false,"dir":"test"},{"name":"should yield true for numbers","suites":["isFiniteNumber"],"updatePoint":{"line":18,"column":37,"index":726},"line":18,"code":"    it('should yield true for numbers', () => {\n      expect(isFiniteNumber(3)).to.be.true;\n      expect(isFiniteNumber(3.2)).to.be.true;\n      expect(isFiniteNumber(123e5)).to.be.true;\n    });","file":"unit/core/types/test-types.js","skipped":false,"dir":"test"},{"name":"should initialize correctly","suites":[],"updatePoint":{"line":39,"column":33,"index":1245},"line":39,"code":"  it('should initialize correctly', () => {\n    expect(history.stackIndex_).to.equal(0);\n    expect(history.stackOnPop_.length).to.equal(0);\n    expect(onStateUpdated).to.not.equal(null);\n  });","file":"unit/core/window/test-history.js","skipped":false,"dir":"test"},{"name":"should push new state","suites":[],"updatePoint":{"line":44,"column":27,"index":1433},"line":44,"code":"  it('should push new state', () => {\n    const onPop = env.sandbox.spy();\n    bindingMock.expects('push').returns(Promise.resolve({\n      stackIndex: 11\n    })).once();\n    return history.push(onPop).then(unusedHistoryId => {\n      expect(history.stackIndex_).to.equal(11);\n      expect(history.stackOnPop_.length).to.equal(12);\n      expect(history.stackOnPop_[11]).to.equal(onPop);\n      expect(onPop).to.have.not.been.called;\n    });\n  });","file":"unit/core/window/test-history.js","skipped":false,"dir":"test"},{"name":"should pop previously pushed state","suites":[],"updatePoint":{"line":56,"column":40,"index":1890},"line":56,"code":"  it('should pop previously pushed state', () => {\n    const onPop = env.sandbox.spy();\n    bindingMock.expects('push').returns(Promise.resolve({\n      stackIndex: 11\n    })).once();\n    bindingMock.expects('pop').withExactArgs(11).returns(Promise.resolve({\n      stackIndex: 10\n    })).once();\n    return history.push(onPop).then(historyId => {\n      expect(historyId).to.equal(11);\n      expect(history.stackOnPop_.length).to.equal(12);\n      expect(history.stackOnPop_[11]).to.equal(onPop);\n      expect(onPop).to.have.not.been.called;\n      return history.pop(historyId).then(() => {\n        expect(history.stackIndex_).to.equal(10);\n        expect(history.stackOnPop_.length).to.equal(11);\n        clock.tick(1);\n        expect(onPop).to.be.calledOnce;\n      });\n    });\n  });","file":"unit/core/window/test-history.js","skipped":false,"dir":"test"},{"name":"should return and call callback when history popped","suites":[],"updatePoint":{"line":77,"column":57,"index":2689},"line":77,"code":"  it('should return and call callback when history popped', () => {\n    const onPop = env.sandbox.spy();\n    bindingMock.expects('push').withExactArgs(undefined).returns(Promise.resolve({\n      stackIndex: 11\n    })).once();\n    bindingMock.expects('pop').withExactArgs(11).returns(Promise.resolve({\n      stackIndex: 10\n    })).once();\n    return history.push(onPop).then(stackIndex => {\n      expect(onPop).to.have.not.been.called;\n      return history.pop(stackIndex).then(() => {\n        expect(history.stackIndex_).to.equal(10);\n        expect(history.stackOnPop_.length).to.equal(11);\n        clock.tick(1);\n        expect(onPop).to.be.calledOnce;\n        expect(onPop.getCall(0).args[0]).to.deep.equal({\n          stackIndex: 10\n        });\n      });\n    });\n  });","file":"unit/core/window/test-history.js","skipped":false,"dir":"test"},{"name":"should return and call callback with state when history popped","suites":[],"updatePoint":{"line":98,"column":68,"index":3472},"line":98,"code":"  it('should return and call callback with state when history popped', () => {\n    const onPop = env.sandbox.spy();\n    const title = 'TITLE';\n    bindingMock.expects('push').withExactArgs(undefined).returns(Promise.resolve({\n      stackIndex: 11\n    })).once();\n    bindingMock.expects('pop').withExactArgs(11).returns(Promise.resolve({\n      stackIndex: 10,\n      title\n    })).once();\n    return history.push(onPop).then(stackIndex => {\n      expect(onPop).to.have.not.been.called;\n      return history.pop(stackIndex).then(() => {\n        expect(history.stackIndex_).to.equal(10);\n        expect(history.stackOnPop_.length).to.equal(11);\n        clock.tick(1);\n        expect(onPop).to.be.calledOnce;\n        expect(onPop.getCall(0).args[0]).to.deep.equal({\n          stackIndex: 10,\n          title\n        });\n      });\n    });\n  });","file":"unit/core/window/test-history.js","skipped":false,"dir":"test"},{"name":"should replace previously pushed state","suites":[],"updatePoint":{"line":122,"column":44,"index":4288},"line":122,"code":"  it('should replace previously pushed state', () => {\n    const onPop = env.sandbox.spy();\n    const pushState = {\n      title: 'pushState'\n    };\n    const replaceState = {\n      title: 'replaceState'\n    };\n    bindingMock.expects('push').withExactArgs(pushState).returns(Promise.resolve({\n      stackIndex: 11\n    })).once();\n    bindingMock.expects('replace').withExactArgs(replaceState).returns(Promise.resolve()).once();\n    return history.push(onPop, pushState).then(historyId => {\n      expect(historyId).to.equal(11);\n      expect(history.stackOnPop_.length).to.equal(12);\n      expect(history.stackOnPop_[11]).to.equal(onPop);\n      expect(onPop).to.not.be.called;\n      return history.replace(replaceState).then(() => {\n        // Replacing the state should not affect registered pop handlers\n        expect(history.stackIndex_).to.equal(11);\n        expect(history.stackOnPop_.length).to.equal(12);\n        expect(history.stackOnPop_[11]).to.equal(onPop);\n        expect(onPop).to.not.be.called;\n      });\n    });\n  });","file":"unit/core/window/test-history.js","skipped":false,"dir":"test"},{"name":"should get previously pushed state","suites":[],"updatePoint":{"line":148,"column":40,"index":5317},"line":148,"code":"  it('should get previously pushed state', () => {\n    const onPop = env.sandbox.spy();\n    const state = {\n      title: 'title'\n    };\n    bindingMock.expects('push').withExactArgs(state).returns(Promise.resolve({\n      ...state,\n      stackIndex: 11\n    })).once();\n    bindingMock.expects('get').returns(Promise.resolve({\n      ...state,\n      stackIndex: 11\n    })).once();\n    return history.push(onPop, state).then(historyId => {\n      expect(historyId).to.equal(11);\n      expect(history.stackOnPop_.length).to.equal(12);\n      expect(history.stackOnPop_[11]).to.equal(onPop);\n      expect(onPop).to.not.be.called;\n      return history.get().then(() => {\n        // Reading the state should not affect registered pop handlers\n        expect(history.stackIndex_).to.equal(11);\n        expect(history.stackOnPop_.length).to.equal(12);\n        expect(onPop).to.not.be.called;\n      });\n    });\n  });","file":"unit/core/window/test-history.js","skipped":false,"dir":"test"},{"name":"should push a new state and replace it for target","suites":[],"updatePoint":{"line":174,"column":55,"index":6236},"line":174,"code":"  it('should push a new state and replace it for target', () => {\n    bindingMock.expects('push').returns(Promise.resolve({\n      stackIndex: 11\n    })).once();\n    bindingMock.expects('pop').returns(Promise.resolve({\n      stackIndex: 10\n    })).once();\n    bindingMock.expects('replaceStateForTarget').withExactArgs('#hello');\n    return history.replaceStateForTarget('#hello').then(() => {\n      return history.pop(history.stackIndex_).then(() => {\n        clock.tick(1);\n        expect(env.win.location.hash).to.equal('#first');\n      });\n    });\n  });","file":"unit/core/window/test-history.js","skipped":false,"dir":"test"},{"name":"should pop previously pushed state via goBack","suites":[],"updatePoint":{"line":189,"column":51,"index":6789},"line":189,"code":"  it('should pop previously pushed state via goBack', () => {\n    const onPop = env.sandbox.spy();\n    const popState = {\n      title: 'title'\n    };\n    bindingMock.expects('push').returns(Promise.resolve({\n      stackIndex: 11\n    })).once();\n    bindingMock.expects('pop').withExactArgs(11).returns(Promise.resolve({\n      ...popState,\n      stackIndex: 10\n    })).once();\n    return history.push(onPop).then(historyId => {\n      expect(historyId).to.equal(11);\n      expect(history.stackOnPop_.length).to.equal(12);\n      expect(history.stackOnPop_[11]).to.equal(onPop);\n      expect(onPop).to.not.be.called;\n      return history.goBack().then(() => {\n        expect(history.stackIndex_).to.equal(10);\n        expect(history.stackOnPop_.length).to.equal(11);\n        clock.tick(1);\n        expect(onPop).to.be.calledOnce;\n        expect(onPop).to.be.calledWith({\n          ...popState,\n          stackIndex: 10\n        });\n      });\n    });\n  });","file":"unit/core/window/test-history.js","skipped":false,"dir":"test"},{"name":"should NOT pop first state via goBack","suites":[],"updatePoint":{"line":218,"column":43,"index":7732},"line":218,"code":"  it('should NOT pop first state via goBack', () => {\n    bindingMock.expects('pop').never();\n    return history.goBack().then(() => {\n      expect(history.stackIndex_).to.equal(0);\n    });\n  });","file":"unit/core/window/test-history.js","skipped":false,"dir":"test"},{"name":"should call pop if stack is empty and passed true","suites":[],"updatePoint":{"line":224,"column":55,"index":7940},"line":224,"code":"  it('should call pop if stack is empty and passed true', () => {\n    bindingMock.expects('pop').once().returns(Promise.resolve({\n      stackIndex: 0\n    }));\n    return history.goBack(true);\n  });","file":"unit/core/window/test-history.js","skipped":false,"dir":"test"},{"name":"should not call pop() if stack is empty and passed a falsy arg","suites":[],"updatePoint":{"line":230,"column":68,"index":8151},"line":230,"code":"  it('should not call pop() if stack is empty and passed a falsy arg', async () => {\n    bindingMock.expects('pop').never();\n    await history.goBack();\n    await history.goBack(false);\n  });","file":"unit/core/window/test-history.js","skipped":false,"dir":"test"},{"name":"should get fragment","suites":[],"updatePoint":{"line":235,"column":25,"index":8300},"line":235,"code":"  it('should get fragment', () => {\n    bindingMock.expects('getFragment').withExactArgs().returns(Promise.resolve('fragment')).once();\n    return history.getFragment().then(fragment => {\n      expect(fragment).to.be.equal('fragment');\n    });\n  });","file":"unit/core/window/test-history.js","skipped":false,"dir":"test"},{"name":"should update fragment","suites":[],"updatePoint":{"line":241,"column":28,"index":8553},"line":241,"code":"  it('should update fragment', () => {\n    bindingMock.expects('updateFragment').withExactArgs('fragment').returns(Promise.resolve()).once();\n    return history.updateFragment('fragment').then(() => {});\n  });","file":"unit/core/window/test-history.js","skipped":false,"dir":"test"},{"name":"should create natural binding and make it singleton","suites":["install"],"updatePoint":{"line":282,"column":59,"index":9743},"line":282,"code":"    it('should create natural binding and make it singleton', () => {\n      const history = Services.historyForDoc(ampdoc);\n      expect(history.binding_).to.be.instanceOf(HistoryBindingNatural_);\n      expect(win.__AMP_SERVICES.history.obj).to.equal(history);\n      // Ensure that binding is installed as a singleton.\n      expect(win.__AMP_SERVICES['global-history-binding'].obj).to.equal(history.binding_);\n    });","file":"unit/core/window/test-history.js","skipped":false,"dir":"test"},{"name":"should create virtual binding","suites":["install"],"updatePoint":{"line":289,"column":37,"index":10139},"line":289,"code":"    it('should create virtual binding', () => {\n      viewer.isOvertakeHistory = () => true;\n      const history = Services.historyForDoc(ampdoc);\n      expect(history.binding_).to.be.instanceOf(HistoryBindingVirtual_);\n      expect(win.__AMP_SERVICES.history.obj).to.equal(history);\n      // Ensure that the global singleton has not been created.\n      expect(win.__AMP_SERVICES['global-history-binding']).to.not.exist;\n    });","file":"unit/core/window/test-history.js","skipped":false,"dir":"test"},{"name":"should initialize correctly","suites":["HistoryBindingNatural"],"updatePoint":{"line":311,"column":35,"index":10944},"line":311,"code":"    it('should initialize correctly', () => {\n      expect(history.stackIndex_).to.equal(window.history.length - 1);\n      expect(history.startIndex_).to.equal(window.history.length - 1);\n      expect(history.unsupportedState_['AMP.History']).to.equal(window.history.length - 1);\n      expect(onStateUpdated).to.have.not.been.called;\n    });","file":"unit/core/window/test-history.js","skipped":false,"dir":"test"},{"name":"should initialize correctly with preexisting state","suites":["HistoryBindingNatural"],"updatePoint":{"line":317,"column":58,"index":11309},"line":317,"code":"    it('should initialize correctly with preexisting state', () => {\n      history.origPushState_({\n        'AMP.History': window.history.length\n      }, undefined);\n      history.origReplaceState_({\n        'AMP.History': window.history.length - 2\n      }, undefined);\n      const history2 = new HistoryBindingNatural_(window);\n      expect(history2.stackIndex_).to.equal(window.history.length - 2);\n      expect(history2.startIndex_).to.equal(window.history.length - 2);\n      expect(history.unsupportedState_['AMP.History']).to.equal(window.history.length - 2);\n      history2.cleanup();\n      history.origReplaceState_({\n        'AMP.History': window.history.length - 1\n      }, undefined);\n      expect(onStateUpdated).to.have.not.been.called;\n    });","file":"unit/core/window/test-history.js","skipped":false,"dir":"test"},{"name":"should preserve the initial state if possible","suites":["HistoryBindingNatural"],"updatePoint":{"line":334,"column":53,"index":12061},"line":334,"code":"    it('should preserve the initial state if possible', () => {\n      history.origReplaceState_({\n        'a': 11\n      }, undefined);\n      const history2 = new HistoryBindingNatural_(window);\n      expect(history.getState_()['a']).to.equal(11);\n      history2.cleanup();\n      expect(onStateUpdated).to.have.not.been.called;\n    });","file":"unit/core/window/test-history.js","skipped":false,"dir":"test"},{"name":"should override history.pushState and set its properties","suites":["HistoryBindingNatural"],"updatePoint":{"line":343,"column":64,"index":12407},"line":343,"code":"    it('should override history.pushState and set its properties', () => {\n      window.history.pushState({\n        a: 111\n      });\n      expect(history.unsupportedState_.a).to.equal(111);\n      expect(history.unsupportedState_['AMP.History']).to.equal(window.history.length - 1);\n      expect(onStateUpdated).to.be.calledOnce;\n      expect(onStateUpdated.getCall(0).args[0].stackIndex).to.equal(window.history.length - 1);\n    });","file":"unit/core/window/test-history.js","skipped":false,"dir":"test"},{"name":"should override history.replaceState and set its properties","suites":["HistoryBindingNatural"],"updatePoint":{"line":352,"column":67,"index":12843},"line":352,"code":"    it('should override history.replaceState and set its properties', () => {\n      window.history.replaceState({\n        a: 112\n      });\n      expect(history.unsupportedState_.a).to.equal(112);\n      expect(history.unsupportedState_['AMP.History']).to.equal(window.history.length - 1);\n      expect(onStateUpdated).to.have.not.been.called;\n    });","file":"unit/core/window/test-history.js","skipped":false,"dir":"test"},{"name":"should push new state in the window.history and notify","suites":["HistoryBindingNatural"],"updatePoint":{"line":381,"column":62,"index":13973},"line":381,"code":"    it('should push new state in the window.history and notify', () => {\n      const title = 'title';\n      return history.push({\n        title\n      }).then(historyState => {\n        expect(history.stackIndex_).to.equal(historyState.stackIndex);\n        expect(history.stackIndex_).to.equal(window.history.length - 1);\n        expect(history.unsupportedState_['AMP.History']).to.equal(window.history.length - 1);\n        expect(history.unsupportedState_.title).to.deep.equal(title);\n        expect(onStateUpdated).to.be.calledOnce;\n        expect(onStateUpdated).to.be.calledWithMatch({\n          stackIndex: window.history.length - 1,\n          title\n        });\n      });\n    });","file":"unit/core/window/test-history.js","skipped":false,"dir":"test"},{"name":"should pop a state from the window.history and notify","suites":["HistoryBindingNatural"],"updatePoint":{"line":397,"column":61,"index":14655},"line":397,"code":"    it('should pop a state from the window.history and notify', () => {\n      const title = 'title';\n      return history.push({\n        title\n      }).then(historyState => {\n        expect(onStateUpdated).to.be.calledOnce;\n        expect(onStateUpdated).to.be.calledWithMatch({\n          stackIndex: window.history.length - 1,\n          title\n        });\n        const histPromise = listenOncePromise(window, 'popstate').then(() => clock.tick(100));\n        const popPromise = history.pop(historyState.stackIndex);\n        return histPromise.then(unusedHist => {\n          return popPromise.then(pop => {\n            expect(pop.stackIndex).to.equal(window.history.length - 2);\n            expect(history.stackIndex_).to.equal(window.history.length - 2);\n            expect(history.unsupportedState_['AMP.History']).to.equal(window.history.length - 2);\n            expect(onStateUpdated).to.have.callCount(2);\n            expect(onStateUpdated.getCall(1).args[0].stackIndex).to.equal(window.history.length - 2);\n          });\n        });\n      });\n    });","file":"unit/core/window/test-history.js","skipped":false,"dir":"test"},{"name":"should restore previous state after pop and notify","suites":["HistoryBindingNatural"],"updatePoint":{"line":420,"column":58,"index":15708},"line":420,"code":"    it('should restore previous state after pop and notify', () => {\n      return history.push({\n        title: 'foo'\n      }).then(first => {\n        return history.push({\n          title: 'bar'\n        }).then(second => {\n          expect(onStateUpdated).to.have.callCount(2);\n          const histPromise = listenOncePromise(window, 'popstate').then(() => clock.tick(100));\n          const popPromise = history.pop(second.stackIndex);\n          return histPromise.then(unusedHist => {\n            return popPromise.then(pop => {\n              expect(pop.stackIndex).to.equal(first.stackIndex);\n              expect(history.stackIndex_).to.equal(first.stackIndex);\n              expect(history.unsupportedState_['AMP.History']).to.equal(first.stackIndex);\n              expect(onStateUpdated).to.have.callCount(3);\n              expect(onStateUpdated.lastCall).to.be.calledWithMatch({\n                stackIndex: first.stackIndex,\n                title: 'foo'\n              });\n            });\n          });\n        });\n      });\n    });","file":"unit/core/window/test-history.js","skipped":false,"dir":"test"},{"name":"should get current state","suites":["HistoryBindingNatural"],"updatePoint":{"line":445,"column":32,"index":16721},"line":445,"code":"    it('should get current state', () => {\n      const title = 'title';\n      return history.push({\n        title\n      }).then(historyState => {\n        expect(history.unsupportedState_).to.deep.include({\n          'AMP.History': historyState.stackIndex,\n          title\n        });\n        return history.get().then(current => {\n          expect(current).to.deep.include({\n            'AMP.History': historyState.stackIndex,\n            title\n          });\n        });\n      });\n    });","file":"unit/core/window/test-history.js","skipped":false,"dir":"test"},{"name":"should replace current state","suites":["HistoryBindingNatural"],"updatePoint":{"line":462,"column":36,"index":17214},"line":462,"code":"    it('should replace current state', () => {\n      const pushTitle = 'pushTitle';\n      const replaceTitle = 'replaceTitle';\n      return history.push({\n        title: pushTitle\n      }).then(historyState => {\n        expect(history.unsupportedState_).to.deep.include({\n          'AMP.History': historyState.stackIndex,\n          title: pushTitle\n        });\n        return history.replace({\n          title: replaceTitle\n        }).then(() => {\n          expect(history.unsupportedState_).to.deep.include({\n            'AMP.History': historyState.stackIndex,\n            title: replaceTitle\n          });\n          return history.pop(historyState.stackIndex);\n        });\n      });\n    });","file":"unit/core/window/test-history.js","skipped":false,"dir":"test"},{"name":"should update its state and notify on history.back","suites":["HistoryBindingNatural"],"updatePoint":{"line":483,"column":58,"index":17929},"line":483,"code":"    it('should update its state and notify on history.back', () => {\n      // Push twice.\n      return Promise.all([history.push(), history.push()]).then(() => {\n        const h = window.history.length;\n        expect(onStateUpdated).to.be.calledTwice;\n        expect(onStateUpdated.getCall(0).args[0].stackIndex).to.equal(h - 2);\n        expect(onStateUpdated.getCall(1).args[0].stackIndex).to.equal(h - 1);\n\n        // Pop once.\n        const popstate = listenOncePromise(window, 'popstate').then(() => {\n          clock.tick(100);\n        });\n        window.history.go(-1);\n        return popstate;\n      }).then(() => {\n        const h = window.history.length - 2;\n        clock.tick(100);\n        expect(history.stackIndex_).to.equal(h);\n        expect(history.unsupportedState_['AMP.History']).to.equal(h);\n        expect(onStateUpdated).to.be.calledThrice;\n        expect(onStateUpdated.getCall(2).args[0].stackIndex).to.equal(h);\n\n        // Pop again.\n        const popstate = listenOncePromise(window, 'popstate').then(() => {\n          clock.tick(100);\n        });\n        window.history.go(-1);\n        return popstate;\n      }).then(() => {\n        const h = window.history.length - 3;\n        clock.tick(100);\n        expect(history.stackIndex_).to.equal(h);\n        expect(history.unsupportedState_['AMP.History']).to.equal(h);\n        expect(onStateUpdated).to.have.callCount(4);\n        expect(onStateUpdated.getCall(3).args[0].stackIndex).to.equal(h);\n      });\n    });","file":"unit/core/window/test-history.js","skipped":false,"dir":"test"},{"name":"should update path from URL parameter","suites":["HistoryBindingNatural"],"updatePoint":{"line":520,"column":45,"index":19404},"line":520,"code":"    it('should update path from URL parameter', () => {\n      const path = '/path';\n      const query = '?query=1';\n      const prevHref = document.location.href;\n      return history.replace({\n        url: path + query\n      }).then(() => {\n        expect(document.location.pathname).to.equal(path);\n        expect(document.location.search).to.equal(query);\n        return history.replace({\n          url: prevHref\n        });\n      });\n    });","file":"unit/core/window/test-history.js","skipped":false,"dir":"test"},{"name":"should strip fragment from URL parameter","suites":["HistoryBindingNatural"],"updatePoint":{"line":534,"column":48,"index":19853},"line":534,"code":"    it('should strip fragment from URL parameter', () => {\n      const prevHref = document.location.href;\n      return history.replace({\n        url: '/path?query=1#fragment'\n      }).then(() => {\n        expect(document.location.hash).to.equal('');\n        return history.replace({\n          url: prevHref\n        });\n      });\n    });","file":"unit/core/window/test-history.js","skipped":false,"dir":"test"},{"name":"should append the fragment parameter to the URL parameter","suites":["HistoryBindingNatural"],"updatePoint":{"line":545,"column":65,"index":20207},"line":545,"code":"    it('should append the fragment parameter to the URL parameter', () => {\n      const fragment = 'test';\n      const {\n        hash,\n        href\n      } = document.location;\n      return history.replace({\n        url: '/path?query=1',\n        fragment\n      }).then(() => {\n        expect(document.location.hash).to.equal(`#${fragment}`);\n        return history.replace({\n          url: href,\n          fragment: hash\n        });\n      });\n    });","file":"unit/core/window/test-history.js","skipped":false,"dir":"test"},{"name":"should initialize correctly","suites":["HistoryBindingVirtual"],"updatePoint":{"line":584,"column":35,"index":21326},"line":584,"code":"    it('should initialize correctly', () => {\n      expect(history.stackIndex_).to.equal(0);\n      expect(onStateUpdated).to.have.not.been.called;\n      expect(viewer.onMessage).to.be.calledOnce;\n      expect(viewer.onMessage).to.be.calledWith('historyPopped');\n    });","file":"unit/core/window/test-history.js","skipped":false,"dir":"test"},{"name":"viewer does not support responses","suites":["HistoryBindingVirtual","`pushHistory` API"],"updatePoint":{"line":591,"column":43,"index":21646},"line":591,"code":"      it('viewer does not support responses', () => {\n        return history.push().then(state => {\n          expect(viewer.sendMessageAwaitResponse).to.be.calledOnce;\n          expect(viewer.sendMessageAwaitResponse).to.be.calledWithMatch('pushHistory', {\n            stackIndex: 1\n          });\n          expect(state.stackIndex).to.equal(1);\n          expect(history.stackIndex_).to.equal(1);\n          expect(onStateUpdated).to.be.calledOnce;\n          expect(onStateUpdated).to.be.calledWithMatch({\n            stackIndex: 1\n          });\n        });\n      });","file":"unit/core/window/test-history.js","skipped":false,"dir":"test"},{"name":"viewer supports responses","suites":["HistoryBindingVirtual","`pushHistory` API"],"updatePoint":{"line":605,"column":35,"index":22204},"line":605,"code":"      it('viewer supports responses', () => {\n        const title = 'title';\n        viewer.sendMessageAwaitResponse.withArgs('pushHistory', {\n          stackIndex: 1,\n          title\n        }).returns(Promise.resolve({\n          stackIndex: 1,\n          title\n        }));\n        return history.push({\n          title\n        }).then(state => {\n          expect(viewer.sendMessageAwaitResponse).to.be.calledOnce;\n          expect(viewer.sendMessageAwaitResponse).to.be.calledWithMatch('pushHistory', {\n            stackIndex: 1,\n            title\n          });\n          expect(state.stackIndex).to.equal(1);\n          expect(history.stackIndex_).to.equal(1);\n          expect(onStateUpdated).to.be.calledOnce;\n          expect(onStateUpdated).to.be.calledWithMatch({\n            stackIndex: 1,\n            title\n          });\n        });\n      });","file":"unit/core/window/test-history.js","skipped":false,"dir":"test"},{"name":"handles bad viewer responses","suites":["HistoryBindingVirtual","`pushHistory` API"],"updatePoint":{"line":631,"column":38,"index":23059},"line":631,"code":"      it('handles bad viewer responses', () => {\n        const title = 'title';\n        viewer.sendMessageAwaitResponse.withArgs('pushHistory', {\n          stackIndex: 1,\n          title\n        }).returns(Promise.resolve(true));\n        return history.push({\n          title\n        }).then(state => {\n          expect(viewer.sendMessageAwaitResponse).to.be.calledOnce;\n          expect(viewer.sendMessageAwaitResponse).to.be.calledWithMatch('pushHistory', {\n            stackIndex: 1,\n            title\n          });\n          expect(state.stackIndex).to.equal(1);\n          expect(history.stackIndex_).to.equal(1);\n          expect(onStateUpdated).to.be.calledOnce;\n          expect(onStateUpdated).to.be.calledWithMatch({\n            stackIndex: 1,\n            title\n          });\n        });\n      });","file":"unit/core/window/test-history.js","skipped":false,"dir":"test"},{"name":"viewer does not support responses","suites":["HistoryBindingVirtual","`popHistory` API"],"updatePoint":{"line":656,"column":43,"index":23920},"line":656,"code":"      it('viewer does not support responses', () => {\n        return history.pop(0).then(state => {\n          expect(state.stackIndex).to.equal(-1);\n          expect(history.stackIndex_).to.equal(-1);\n          expect(onStateUpdated).to.be.calledOnce;\n          expect(onStateUpdated).to.be.calledWithMatch({\n            stackIndex: -1\n          });\n        });\n      });","file":"unit/core/window/test-history.js","skipped":false,"dir":"test"},{"name":"viewer supports responses","suites":["HistoryBindingVirtual","`popHistory` API"],"updatePoint":{"line":666,"column":35,"index":24284},"line":666,"code":"      it('viewer supports responses', () => {\n        viewer.sendMessageAwaitResponse.withArgs('popHistory', env.sandbox.match({\n          stackIndex: 0\n        })).returns(Promise.resolve({\n          stackIndex: -123,\n          title: 'title'\n        }));\n        return history.pop(0).then(state => {\n          expect(state).to.deep.equal({\n            stackIndex: -123,\n            title: 'title'\n          });\n          expect(history.stackIndex_).to.equal(-123);\n          expect(onStateUpdated).to.be.calledOnce;\n          expect(onStateUpdated).to.be.calledWithMatch({\n            stackIndex: -123,\n            title: 'title'\n          });\n        });\n      });","file":"unit/core/window/test-history.js","skipped":false,"dir":"test"},{"name":"handles bad viewer responses","suites":["HistoryBindingVirtual","`popHistory` API"],"updatePoint":{"line":686,"column":38,"index":24956},"line":686,"code":"      it('handles bad viewer responses', () => {\n        viewer.sendMessageAwaitResponse.withArgs('popHistory', env.sandbox.match({\n          stackIndex: 0\n        })).returns(Promise.resolve(true));\n        return history.pop(0).then(state => {\n          expect(state).to.deep.equal({\n            stackIndex: -1\n          });\n          expect(history.stackIndex_).to.equal(-1);\n          expect(onStateUpdated).to.be.calledOnce;\n          expect(onStateUpdated).to.be.calledWithMatch({\n            stackIndex: -1\n          });\n        });\n      });","file":"unit/core/window/test-history.js","skipped":false,"dir":"test"},{"name":"viewer does not support responses","suites":["HistoryBindingVirtual","`replaceHistory` API"],"updatePoint":{"line":703,"column":43,"index":25564},"line":703,"code":"      it('viewer does not support responses', () => {\n        viewer.sendMessageAwaitResponse.withArgs('replaceHistory', {\n          stackIndex: 123,\n          title: 'title'\n        });\n        return history.replace({\n          title: 'title'\n        }).then(state => {\n          expect(history.stackIndex_).to.equal(0);\n          expect(state).to.deep.equal({\n            stackIndex: 0,\n            title: 'title'\n          });\n          expect(onStateUpdated).to.not.be.called;\n        });\n      });","file":"unit/core/window/test-history.js","skipped":false,"dir":"test"},{"name":"viewer supports responses","suites":["HistoryBindingVirtual","`replaceHistory` API"],"updatePoint":{"line":719,"column":35,"index":26060},"line":719,"code":"      it('viewer supports responses', () => {\n        viewer.sendMessageAwaitResponse.withArgs('replaceHistory', {\n          stackIndex: 123,\n          title: 'title'\n        }).returns(Promise.resolve({\n          stackIndex: 123,\n          title: 'different'\n        }));\n        return history.replace({\n          stackIndex: 123,\n          title: 'title'\n        }).then(state => {\n          expect(history.stackIndex_).to.equal(123);\n          expect(state).to.deep.equal({\n            stackIndex: 123,\n            title: 'different'\n          });\n          expect(onStateUpdated).to.be.calledOnce;\n          expect(onStateUpdated).to.be.calledWithMatch({\n            stackIndex: 123,\n            title: 'different'\n          });\n        });\n      });","file":"unit/core/window/test-history.js","skipped":false,"dir":"test"},{"name":"handles bad viewer responses","suites":["HistoryBindingVirtual","`replaceHistory` API"],"updatePoint":{"line":743,"column":38,"index":26819},"line":743,"code":"      it('handles bad viewer responses', () => {\n        viewer.sendMessageAwaitResponse.withArgs('replaceHistory', {\n          stackIndex: 123,\n          title: 'title'\n        }).returns(Promise.resolve(true));\n        return history.replace({\n          stackIndex: 123,\n          title: 'title'\n        }).then(state => {\n          expect(history.stackIndex_).to.equal(123);\n          expect(state).to.deep.equal({\n            stackIndex: 123,\n            title: 'title'\n          });\n          expect(onStateUpdated).to.be.calledOnce;\n          expect(onStateUpdated).to.be.calledWithMatch({\n            stackIndex: 123,\n            title: 'title'\n          });\n        });\n      });","file":"unit/core/window/test-history.js","skipped":false,"dir":"test"},{"name":"supports full URL replacement","suites":["HistoryBindingVirtual","`replaceHistory` API"],"updatePoint":{"line":764,"column":39,"index":27508},"line":764,"code":"      it('supports full URL replacement', () => {\n        capabilityStub.withArgs('fullReplaceHistory').returns(true);\n        viewer.sendMessageAwaitResponse.withArgs('replaceHistory', {\n          stackIndex: 123,\n          title: 'title',\n          url: '/page',\n          fragment: 'fr2'\n        }).returns(Promise.resolve({\n          stackIndex: 123,\n          title: 'different',\n          url: '/otherpage',\n          fragment: 'fr2'\n        }));\n        return history.replace({\n          stackIndex: 123,\n          title: 'title',\n          url: '/page#fr1',\n          fragment: 'fr2'\n        }).then(state => {\n          expect(state).to.deep.equal({\n            fragment: 'fr2',\n            stackIndex: 123,\n            title: 'different',\n            url: '/otherpage'\n          });\n          expect(onStateUpdated).to.be.calledOnce;\n          expect(onStateUpdated).to.be.calledWithMatch({\n            fragment: 'fr2',\n            stackIndex: 123,\n            title: 'different',\n            url: '/otherpage'\n          });\n        });\n      });","file":"unit/core/window/test-history.js","skipped":false,"dir":"test"},{"name":"does not support full URL replacement","suites":["HistoryBindingVirtual","`replaceHistory` API"],"updatePoint":{"line":798,"column":47,"index":28574},"line":798,"code":"      it('does not support full URL replacement', () => {\n        capabilityStub.withArgs('fullReplaceHistory').returns(false);\n        return history.replace({\n          stackIndex: 123,\n          title: 'title',\n          url: '/page'\n        }).then(state => {\n          expect(state).to.deep.equal({\n            stackIndex: 0\n          });\n          expect(viewer.sendMessageAwaitResponse).to.not.be.called;\n          expect(onStateUpdated).to.not.be.called;\n        });\n      });","file":"unit/core/window/test-history.js","skipped":false,"dir":"test"},{"name":"pushes and pops","suites":["HistoryBindingVirtual","`historyPopped` API"],"updatePoint":{"line":814,"column":25,"index":29089},"line":814,"code":"      it('pushes and pops', () => {\n        const title = 'title';\n        viewer.sendMessageAwaitResponse.withArgs('pushHistory', {\n          stackIndex: 1,\n          title\n        }).returns(Promise.resolve({\n          stackIndex: 1,\n          title\n        }));\n        return history.push({\n          title\n        }).then(state => {\n          expect(viewer.sendMessageAwaitResponse).to.be.calledOnce;\n          expect(viewer.sendMessageAwaitResponse).to.be.calledWithMatch('pushHistory', {\n            stackIndex: 1,\n            title\n          });\n          expect(state).to.deep.equal({\n            stackIndex: 1,\n            title\n          });\n          expect(onStateUpdated).to.be.calledOnce;\n          expect(onStateUpdated).to.be.calledWithMatch({\n            stackIndex: 1,\n            title\n          });\n          onHistoryPopped({\n            stackIndex: 0,\n            title\n          });\n          expect(history.stackIndex_).to.equal(0);\n          expect(onStateUpdated).to.be.calledTwice;\n          expect(onStateUpdated.lastCall).to.be.calledWithMatch({\n            stackIndex: 0,\n            title\n          });\n        });\n      });","file":"unit/core/window/test-history.js","skipped":false,"dir":"test"},{"name":"sends {stackIndex: <number>, title: <string>}","suites":["HistoryBindingVirtual","`historyPopped` API"],"updatePoint":{"line":852,"column":55,"index":30276},"line":852,"code":"      it('sends {stackIndex: <number>, title: <string>}', () => {\n        const title = 'title';\n        onHistoryPopped({\n          stackIndex: 123,\n          title\n        });\n        expect(history.stackIndex_).to.equal(123);\n        expect(onStateUpdated).to.be.calledOnce;\n        expect(onStateUpdated).to.be.calledWithMatch({\n          stackIndex: 123,\n          title\n        });\n      });","file":"unit/core/window/test-history.js","skipped":false,"dir":"test"},{"name":"sends {newStackIndex: <number>}","suites":["HistoryBindingVirtual","`historyPopped` API"],"updatePoint":{"line":865,"column":41,"index":30660},"line":865,"code":"      it('sends {newStackIndex: <number>}', () => {\n        onHistoryPopped({\n          newStackIndex: 123\n        });\n        expect(history.stackIndex_).to.equal(123);\n        expect(onStateUpdated).to.be.calledOnce;\n        expect(onStateUpdated).to.be.calledWithMatch({\n          stackIndex: 123\n        });\n      });","file":"unit/core/window/test-history.js","skipped":false,"dir":"test"},{"name":"sends invalid data","suites":["HistoryBindingVirtual","`historyPopped` API"],"updatePoint":{"line":875,"column":28,"index":30969},"line":875,"code":"      it('sends invalid data', () => {\n        onHistoryPopped({\n          invalid: 'data'\n        });\n        expect(onStateUpdated).to.not.be.called;\n      });","file":"unit/core/window/test-history.js","skipped":false,"dir":"test"},{"name":"should push a new state and replace it for target on Natural","suites":["HistoryBindingVirtual","`historyPopped` API"],"line":902,"code":"  it.skip('should push a new state and replace it for target on Natural', () => {","file":"unit/core/window/test-history.js","skipped":true,"dir":"test"},{"name":"should push a new state and replace it for target on Virtual","suites":["HistoryBindingVirtual","`historyPopped` API"],"updatePoint":{"line":917,"column":66,"index":32275},"line":917,"code":"  it('should push a new state and replace it for target on Virtual', () => {\n    const viewer = {\n      onMessage: () => {\n        return () => {};\n      },\n      sendMessageAwaitResponse: () => Promise.resolve()\n    };\n    const viewerMock = env.sandbox.mock(viewer);\n    history = new History(new AmpDocSingle(env.win), new HistoryBindingVirtual_(env.win, viewer));\n    const startIndex = history.stackIndex_;\n    viewerMock.expects('sendMessageAwaitResponse').withExactArgs('pushHistory', {\n      stackIndex: startIndex + 1\n    }).once().returns(Promise.resolve({\n      stackIndex: startIndex + 1\n    }));\n    viewerMock.expects('sendMessageAwaitResponse').withArgs('popHistory', {\n      stackIndex: startIndex + 1\n    }).once().returns(Promise.resolve({\n      stackIndex: startIndex\n    }));\n    return history.replaceStateForTarget('#hello').then(() => {\n      clock.tick(1);\n      expect(env.win.location.hash).to.equal('#hello');\n      expect(history.stackIndex_).to.equal(startIndex + 1);\n      return history.pop(history.stackIndex_).then(() => {\n        clock.tick(1);\n        expect(env.win.location.hash).to.equal('#first');\n        expect(history.stackIndex_).to.equal(startIndex);\n      });\n    });\n  });","file":"unit/core/window/test-history.js","skipped":false,"dir":"test"},{"name":"should get fragment on Natural","suites":["HistoryBindingVirtual","`historyPopped` API"],"updatePoint":{"line":970,"column":36,"index":33950},"line":970,"code":"  it('should get fragment on Natural', () => {\n    env.win.location.href = 'http://www.example.com#foo';\n    history = new History(new AmpDocSingle(env.win), new HistoryBindingNatural_(env.win));\n    return history.getFragment().then(fragment => {\n      expect(fragment).to.be.equal('foo');\n    });\n  });","file":"unit/core/window/test-history.js","skipped":false,"dir":"test"},{"name":"should update fragment on Natural","suites":["HistoryBindingVirtual","`historyPopped` API"],"updatePoint":{"line":977,"column":39,"index":34258},"line":977,"code":"  it('should update fragment on Natural', () => {\n    env.win.location.href = 'http://www.example.com#foo';\n    const replaceStateSpy = env.sandbox.spy();\n    env.win.history.replaceState = replaceStateSpy;\n    history = new History(new AmpDocSingle(env.win), new HistoryBindingNatural_(env.win));\n    return history.updateFragment('bar').then(() => {\n      expect(replaceStateSpy).to.be.calledTwice;\n      expect(replaceStateSpy.lastCall.args).to.jsonEqual([{\n        'AMP.History': 1,\n        fragment: 'bar',\n        data: {}\n      }, null, '#bar']);\n    });\n  });","file":"unit/core/window/test-history.js","skipped":false,"dir":"test"},{"name":"should listen to window resize event","suites":[],"updatePoint":{"line":13,"column":42,"index":523},"line":13,"code":"  it('should listen to window resize event', () => {\n    expect(addEventListenerSpy).to.have.been.calledWith('resize', env.sandbox.match.any);\n  });","file":"unit/inabox/test-inabox-frame-overlay-manager.js","skipped":false,"dir":"test"},{"name":"should expand frame and execute callback","suites":[],"updatePoint":{"line":16,"column":46,"index":676},"line":16,"code":"  it('should expand frame and execute callback', () => {\n    const expandedRect = {\n      a: 2,\n      b: 3\n    };\n    const iframe = {};\n    const expandFrame = env.sandbox.spy((win, iframe, onFinish) => {\n      onFinish({}, expandedRect);\n    });\n    const callback = env.sandbox.spy();\n    stubExpandFrameForTesting(expandFrame);\n    manager.expandFrame(iframe, callback);\n    expect(callback).to.have.been.calledWith(expandedRect);\n    expect(expandFrame).to.have.been.calledWith(win, iframe, env.sandbox.match.any);\n  });","file":"unit/inabox/test-inabox-frame-overlay-manager.js","skipped":false,"dir":"test"},{"name":"should collapse frame and execute callback with remeasured box","suites":[],"updatePoint":{"line":31,"column":68,"index":1224},"line":31,"code":"  it('should collapse frame and execute callback with remeasured box', () => {\n    const remeasuredCollapsedRect = {\n      a: 2,\n      b: 3\n    };\n    const iframe = {};\n    const collapseFrame = env.sandbox.spy((win, iframe, onFinish, onRemeasure) => {\n      onFinish();\n      onRemeasure(remeasuredCollapsedRect);\n    });\n    const callback = env.sandbox.spy();\n    stubCollapseFrameForTesting(collapseFrame);\n    stubExpandFrameForTesting((win, iframe, onFinish) => onFinish({}, {}));\n    manager.expandFrame(iframe, NOOP);\n    manager.onWindowResize();\n    manager.collapseFrame(iframe, callback);\n    expect(callback).to.have.been.calledWith(remeasuredCollapsedRect);\n    expect(collapseFrame).to.have.been.calledWith(win, iframe, env.sandbox.match.any, env.sandbox.match.any);\n  });","file":"unit/inabox/test-inabox-frame-overlay-manager.js","skipped":false,"dir":"test"},{"name":"should collapse frame and execute callback with known box rect","suites":[],"updatePoint":{"line":50,"column":68,"index":2013},"line":50,"code":"  it('should collapse frame and execute callback with known box rect', () => {\n    const knownBoxRect = {\n      a: 2,\n      b: 3\n    };\n    const iframe = {};\n    const collapseFrame = env.sandbox.spy((win, iframe, onFinish, onRemeasure) => {\n      onFinish();\n      onRemeasure({});\n    });\n    const callback = env.sandbox.spy();\n    stubCollapseFrameForTesting(collapseFrame);\n    stubExpandFrameForTesting((win, iframe, onFinish) => onFinish(knownBoxRect, {}));\n    manager.expandFrame(iframe, NOOP);\n    manager.collapseFrame(iframe, callback);\n    expect(callback).to.have.been.calledWith(knownBoxRect);\n    expect(collapseFrame).to.have.been.calledWith(win, iframe, env.sandbox.match.any, env.sandbox.match.any);\n  });","file":"unit/inabox/test-inabox-frame-overlay-manager.js","skipped":false,"dir":"test"},{"name":"should process queue","suites":[],"updatePoint":{"line":8,"column":26,"index":342},"line":8,"code":"  it('should process queue', () => {\n    const messages = [{\n      source: {\n        postMessage: () => {}\n      }\n    }, {\n      source: {\n        postMessage: () => {}\n      }\n    }, {\n      source: {\n        postMessage: () => {}\n      }\n    }];\n    const invalidMessages = [{}, {\n      source: {}\n    }];\n    env.win['ampInaboxPendingMessages'] = invalidMessages.concat(messages);\n    new InaboxHost(env.win);\n    expect(processMessageSpy.callCount).to.equal(3);\n    messages.forEach(e => expect(processMessageSpy.withArgs(e)).to.be.called);\n    invalidMessages.forEach(e => expect(processMessageSpy.withArgs(e)).to.not.be.called);\n    // Calling push should have no effect\n    expect(env.win['ampInaboxPendingMessages'].length).to.equal(0);\n    env.win['ampInaboxPendingMessages'].push({});\n    expect(env.win['ampInaboxPendingMessages'].length).to.equal(0);\n  });","file":"unit/inabox/test-inabox-host.js","skipped":false,"dir":"test"},{"name":"should handle no queue","suites":[],"updatePoint":{"line":35,"column":28,"index":1214},"line":35,"code":"  it('should handle no queue', () => {\n    new InaboxHost(env.win);\n    expect(processMessageSpy).to.not.be.called;\n  });","file":"unit/inabox/test-inabox-host.js","skipped":false,"dir":"test"},{"name":"should handle non-array queue","suites":[],"updatePoint":{"line":39,"column":35,"index":1343},"line":39,"code":"  it('should handle non-array queue', () => {\n    env.win['ampInaboxPendingMessages'] = 1234;\n    new InaboxHost(env.win);\n    expect(processMessageSpy).to.not.be.called;\n  });","file":"unit/inabox/test-inabox-host.js","skipped":false,"dir":"test"},{"name":"should handle duplicate executions","suites":[],"updatePoint":{"line":44,"column":40,"index":1525},"line":44,"code":"  it('should handle duplicate executions', () => {\n    // Does not throw.\n    new InaboxHost(env.win);\n    new InaboxHost(env.win);\n    // Calling push should have no effect\n    expect(env.win['ampInaboxPendingMessages'].length).to.equal(0);\n    env.win['ampInaboxPendingMessages'].push({});\n    expect(env.win['ampInaboxPendingMessages'].length).to.equal(0);\n  });","file":"unit/inabox/test-inabox-host.js","skipped":false,"dir":"test"},{"name":"should process valid message","suites":["processMessage"],"updatePoint":{"line":31,"column":36,"index":1388},"line":31,"code":"    it('should process valid message', () => {\n      expect(host.processMessage({\n        source: iframe1.contentWindow,\n        origin: 'www.example.com',\n        data: 'amp-' + JSON.stringify({\n          sentinel: '0-123',\n          type: 'send-positions'\n        })\n      })).to.be.true;\n    });","file":"unit/inabox/test-inabox-messaging-host.js","skipped":false,"dir":"test"},{"name":"should process valid message 2","suites":["processMessage"],"updatePoint":{"line":41,"column":38,"index":1689},"line":41,"code":"    it('should process valid message 2', () => {\n      expect(host.processMessage({\n        source: iframe1.contentWindow,\n        origin: 'www.example.com',\n        data: 'amp-' + JSON.stringify({\n          sentinel: '0-123',\n          type: 'full-overlay-frame'\n        })\n      })).to.be.true;\n    });","file":"unit/inabox/test-inabox-messaging-host.js","skipped":false,"dir":"test"},{"name":"should ignore non-string message","suites":["processMessage"],"updatePoint":{"line":51,"column":40,"index":1996},"line":51,"code":"    it('should ignore non-string message', () => {\n      expect(host.processMessage({\n        source: iframe1.contentWindow,\n        origin: 'www.example.com',\n        data: {\n          x: 1\n        }\n      })).to.be.false;\n    });","file":"unit/inabox/test-inabox-messaging-host.js","skipped":false,"dir":"test"},{"name":"should ignore message without sentinel","suites":["processMessage"],"updatePoint":{"line":60,"column":46,"index":2234},"line":60,"code":"    it('should ignore message without sentinel', () => {\n      expect(host.processMessage({\n        source: iframe1.contentWindow,\n        origin: 'www.example.com',\n        data: 'amp-' + JSON.stringify({\n          type: 'send-positions'\n        })\n      })).to.be.false;\n    });","file":"unit/inabox/test-inabox-messaging-host.js","skipped":false,"dir":"test"},{"name":"should ignore message does not start with amp-","suites":["processMessage"],"updatePoint":{"line":69,"column":54,"index":2523},"line":69,"code":"    it('should ignore message does not start with amp-', () => {\n      expect(host.processMessage({\n        source: iframe1.contentWindow,\n        origin: 'www.example.com',\n        data: 'map-' + JSON.stringify({\n          sentinel: '0-123',\n          type: 'send-positions'\n        })\n      })).to.be.false;\n    });","file":"unit/inabox/test-inabox-messaging-host.js","skipped":false,"dir":"test"},{"name":"should ignore message from untrusted iframe","suites":["processMessage"],"updatePoint":{"line":79,"column":51,"index":2838},"line":79,"code":"    it('should ignore message from untrusted iframe', () => {\n      expect(host.processMessage({\n        source: iframeUntrusted.contentWindow,\n        origin: 'www.example.com',\n        data: 'amp-' + JSON.stringify({\n          sentinel: '0-123',\n          type: 'send-positions'\n        })\n      })).to.be.false;\n    });","file":"unit/inabox/test-inabox-messaging-host.js","skipped":false,"dir":"test"},{"name":"should tolerate message with null source","suites":["processMessage"],"updatePoint":{"line":89,"column":48,"index":3158},"line":89,"code":"    it('should tolerate message with null source', () => {\n      host.processMessage({\n        source: null,\n        origin: 'www.example.com',\n        data: 'amp-' + JSON.stringify({\n          sentinel: '0-123',\n          type: 'send-positions'\n        })\n      });\n    });","file":"unit/inabox/test-inabox-messaging-host.js","skipped":false,"dir":"test"},{"name":"should process messages with allowed actions","suites":["processMessage"],"updatePoint":{"line":99,"column":52,"index":3437},"line":99,"code":"    it('should process messages with allowed actions', () => {\n      expect(host.processMessage({\n        source: iframe2.contentWindow,\n        origin: 'www.example.com',\n        data: 'amp-' + JSON.stringify({\n          sentinel: '0-124',\n          type: 'send-positions'\n        })\n      })).to.be.true;\n    });","file":"unit/inabox/test-inabox-messaging-host.js","skipped":false,"dir":"test"},{"name":"should ignore messages with disallowed actions","suites":["processMessage"],"updatePoint":{"line":109,"column":54,"index":3754},"line":109,"code":"    it('should ignore messages with disallowed actions', () => {\n      expect(host.processMessage({\n        source: iframe2.contentWindow,\n        origin: 'www.example.com',\n        data: 'amp-' + JSON.stringify({\n          sentinel: '0-124',\n          type: 'full-overlay-frame'\n        })\n      })).to.be.false;\n    });","file":"unit/inabox/test-inabox-messaging-host.js","skipped":false,"dir":"test"},{"name":"should allow read-only messages from frames with no allowlist","suites":["processMessage"],"updatePoint":{"line":119,"column":69,"index":4091},"line":119,"code":"    it('should allow read-only messages from frames with no allowlist', () => {\n      expect(host.processMessage({\n        source: iframe3.contentWindow,\n        origin: 'www.example.com',\n        data: 'amp-' + JSON.stringify({\n          sentinel: '0-125',\n          type: 'send-positions'\n        })\n      })).to.be.true;\n    });","file":"unit/inabox/test-inabox-messaging-host.js","skipped":false,"dir":"test"},{"name":"should ignore write messages from frames with no allowlist","suites":["processMessage"],"updatePoint":{"line":129,"column":66,"index":4420},"line":129,"code":"    it('should ignore write messages from frames with no allowlist', () => {\n      expect(host.processMessage({\n        source: iframe3.contentWindow,\n        origin: 'www.example.com',\n        data: 'amp-' + JSON.stringify({\n          sentinel: '0-125',\n          type: 'full-overlay-frame'\n        })\n      })).to.be.false;\n    });","file":"unit/inabox/test-inabox-messaging-host.js","skipped":false,"dir":"test"},{"name":"should send position back","suites":["send-positions"],"updatePoint":{"line":145,"column":33,"index":4898},"line":145,"code":"    it('should send position back', () => {\n      env.sandbox.stub(host.positionObserver_, 'getViewportRect').callsFake(() => {\n        return layoutRectLtwh(10, 10, 100, 100);\n      });\n      env.sandbox.stub(host.positionObserver_, 'observe').callsFake(() => {});\n      iframe1.getBoundingClientRect = () => {\n        return layoutRectLtwh(5, 5, 20, 20);\n      };\n      env.sandbox.stub(host.positionObserver_, 'getTargetRect').callsFake(() => {\n        return iframe1.getBoundingClientRect();\n      });\n      host.processMessage({\n        source: iframe1.contentWindow,\n        origin: 'www.example.com',\n        data: 'amp-' + JSON.stringify({\n          sentinel: '0-123',\n          type: 'send-positions'\n        })\n      });\n      const message = postMessageSpy.getCall(0).args[0];\n      const targetOrigin = postMessageSpy.getCall(0).args[1];\n      expect(deserializeMessage(message)).to.deep.equal({\n        type: 'position',\n        sentinel: '0-123',\n        viewportRect: layoutRectLtwh(10, 10, 100, 100),\n        targetRect: layoutRectLtwh(5, 5, 20, 20)\n      });\n      expect(targetOrigin).to.equal('*');\n    });","file":"unit/inabox/test-inabox-messaging-host.js","skipped":false,"dir":"test"},{"name":"should postMessage on position change","suites":["send-positions position observer callback"],"updatePoint":{"line":190,"column":45,"index":6460},"line":190,"code":"    it('should postMessage on position change', () => {\n      host.processMessage({\n        source: iframe1.contentWindow,\n        origin: 'www.example.com',\n        data: 'amp-' + JSON.stringify({\n          sentinel: '0-123',\n          type: 'send-positions'\n        })\n      });\n      expect(target).to.equal(iframe1);\n      callback({\n        x: 1\n      });\n      expect(postMessageSpy).to.be.calledTwice;\n      const message = postMessageSpy.getCall(1).args[0];\n      const targetOrigin = postMessageSpy.getCall(1).args[1];\n      expect(deserializeMessage(message)).to.deep.equal({\n        type: 'position',\n        sentinel: '0-123',\n        x: 1\n      });\n      expect(targetOrigin).to.equal('*');\n    });","file":"unit/inabox/test-inabox-messaging-host.js","skipped":false,"dir":"test"},{"name":"should not double register","suites":["send-positions position observer callback"],"updatePoint":{"line":213,"column":34,"index":7161},"line":213,"code":"    it('should not double register', () => {\n      host.processMessage({\n        source: iframe1.contentWindow,\n        origin: 'www.example.com',\n        data: 'amp-' + JSON.stringify({\n          sentinel: '0-123',\n          type: 'send-positions'\n        })\n      });\n      host.processMessage({\n        source: iframe1.contentWindow,\n        origin: 'www.example.com',\n        data: 'amp-' + JSON.stringify({\n          sentinel: '0-123',\n          type: 'send-positions'\n        })\n      });\n      postMessageSpy.resetHistory();\n      callback({\n        x: 1\n      });\n      expect(postMessageSpy).to.be.calledOnce;\n    });","file":"unit/inabox/test-inabox-messaging-host.js","skipped":false,"dir":"test"},{"name":"should accept request and expand","suites":["full-overlay-frame"],"updatePoint":{"line":242,"column":40,"index":7987},"line":242,"code":"    it('should accept request and expand', () => {\n      const boxRect = {\n        a: 1,\n        b: 2\n      }; // we don't care\n\n      const expandFrame = env.sandbox. /*OK*/stub(host.frameOverlayManager_, 'expandFrame').callsFake((iframe, callback) => {\n        callback(boxRect);\n      });\n      host.processMessage({\n        source: iframe1.contentWindow,\n        origin: 'www.example.com',\n        data: 'amp-' + JSON.stringify({\n          sentinel: '0-123',\n          type: 'full-overlay-frame'\n        })\n      });\n      const message = deserializeMessage(iframePostMessageSpy.getCall(0).args[0]);\n      expect(expandFrame).calledWith(iframe1, env.sandbox.match.any);\n      expect(message.type).to.equal('full-overlay-frame-response');\n      expect(message.success).to.be.true;\n      expect(message.boxRect).to.deep.equal(boxRect);\n    });","file":"unit/inabox/test-inabox-messaging-host.js","skipped":false,"dir":"test"},{"name":"should accept reset request and collapse","suites":["full-overlay-frame"],"updatePoint":{"line":265,"column":48,"index":8841},"line":265,"code":"    it('should accept reset request and collapse', () => {\n      const boxRect = {\n        c: 1,\n        d: 2\n      }; // we don't care\n\n      const collapseFrame = env.sandbox. /*OK*/stub(host.frameOverlayManager_, 'collapseFrame').callsFake((iframe, callback) => {\n        callback(boxRect);\n      });\n      host.processMessage({\n        source: iframe1.contentWindow,\n        origin: 'www.example.com',\n        data: 'amp-' + JSON.stringify({\n          sentinel: '0-123',\n          type: 'cancel-full-overlay-frame'\n        })\n      });\n      const message = deserializeMessage(iframePostMessageSpy.getCall(0).args[0]);\n      expect(collapseFrame).calledWith(iframe1, env.sandbox.match.any);\n      expect(message.type).to.equal('cancel-full-overlay-frame-response');\n      expect(message.success).to.be.true;\n      expect(message.boxRect).to.deep.equal(boxRect);\n    });","file":"unit/inabox/test-inabox-messaging-host.js","skipped":false,"dir":"test"},{"name":"should return correct frame when many iframes at same level","suites":["getMeasureableFrame"],"updatePoint":{"line":337,"column":67,"index":10875},"line":337,"code":"    it('should return correct frame when many iframes at same level', () => {\n      const {\n        source\n      } = createNestedIframeMocks(6, 3);\n      const expectedMeasureableWin = source.parent.parent;\n      const correctFrame = expectedMeasureableWin.parent.document.querySelectorAll()[0];\n      expectedMeasureableWin.parent.document.querySelectorAll = () => {\n        const f1 = {};\n        const f2 = {};\n        const f3 = {};\n        return [f1, f2, correctFrame, f3];\n      };\n      expect(host.getMeasureableFrame(source).contentWindow).to.deep.equal(expectedMeasureableWin);\n    });","file":"unit/inabox/test-inabox-messaging-host.js","skipped":false,"dir":"test"},{"name":"should return correct frame multiple level of xdomain","suites":["getMeasureableFrame"],"updatePoint":{"line":351,"column":61,"index":11466},"line":351,"code":"    it('should return correct frame multiple level of xdomain', () => {\n      const {\n        source\n      } = createNestedIframeMocks(6, 3);\n      const expectedMeasurableWin = source.parent.parent;\n      expect(host.getMeasureableFrame(source).contentWindow).to.deep.equal(expectedMeasurableWin);\n    });","file":"unit/inabox/test-inabox-messaging-host.js","skipped":false,"dir":"test"},{"name":"should return correct frame for single xdomain frame","suites":["getMeasureableFrame"],"updatePoint":{"line":358,"column":60,"index":11772},"line":358,"code":"    it('should return correct frame for single xdomain frame', () => {\n      const {\n        source\n      } = createNestedIframeMocks(10, 1);\n      expect(host.getMeasureableFrame(source).contentWindow).to.deep.equal(source);\n    });","file":"unit/inabox/test-inabox-messaging-host.js","skipped":false,"dir":"test"},{"name":"should return correct frame for no xdomain frames","suites":["getMeasureableFrame"],"updatePoint":{"line":364,"column":57,"index":12003},"line":364,"code":"    it('should return correct frame for no xdomain frames', () => {\n      const {\n        source\n      } = createNestedIframeMocks(5);\n      expect(host.getMeasureableFrame(source).contentWindow).to.deep.equal(source);\n    });","file":"unit/inabox/test-inabox-messaging-host.js","skipped":false,"dir":"test"},{"name":"should return correct frame when intermediate xdomain frames","suites":["getFrameElement"],"updatePoint":{"line":373,"column":68,"index":12325},"line":373,"code":"    it('should return correct frame when intermediate xdomain frames', () => {\n      const iframeObj = createNestedIframeMocks(6, 3);\n      const {\n        source: sourceMock,\n        topWin: topWinMock\n      } = iframeObj;\n      const frameMock = topWinMock.document.querySelectorAll()[0];\n      const expectedWin = sourceMock.parent.parent;\n      host = new InaboxMessagingHost(win, [frameMock]);\n      const {\n        measurableFrame\n      } = host.getFrameElement_(sourceMock, sentinel);\n      expect(measurableFrame.contentWindow).to.deep.equal(expectedWin);\n    });","file":"unit/inabox/test-inabox-messaging-host.js","skipped":false,"dir":"test"},{"name":"should return correct frame when all frames friendly","suites":["getFrameElement"],"updatePoint":{"line":387,"column":60,"index":12889},"line":387,"code":"    it('should return correct frame when all frames friendly', () => {\n      const iframeObj = createNestedIframeMocks(6);\n      const {\n        source: sourceMock,\n        topWin: topWinMock\n      } = iframeObj;\n      const frameMock = topWinMock.document.querySelectorAll()[0];\n      const expectedWin = sourceMock;\n      host = new InaboxMessagingHost(win, [frameMock]);\n      const {\n        measurableFrame\n      } = host.getFrameElement_(sourceMock, sentinel);\n      expect(measurableFrame.contentWindow).to.deep.equal(expectedWin);\n    });","file":"unit/inabox/test-inabox-messaging-host.js","skipped":false,"dir":"test"},{"name":"should return correct frame when many frames registered","suites":["getFrameElement"],"updatePoint":{"line":401,"column":63,"index":13439},"line":401,"code":"    it('should return correct frame when many frames registered', () => {\n      const iframeObj = createNestedIframeMocks(6);\n      const {\n        source: sourceMock,\n        topWin: topWinMock\n      } = iframeObj;\n      const frameMockWrong1 = {};\n      const frameMockWrong2 = {};\n      const frameMock = topWinMock.document.querySelectorAll()[0];\n      const expectedWin = sourceMock;\n      host = new InaboxMessagingHost(win, [frameMockWrong1, frameMockWrong2, frameMock]);\n      const {\n        measurableFrame\n      } = host.getFrameElement_(sourceMock, sentinel);\n      expect(measurableFrame.contentWindow).to.deep.equal(expectedWin);\n    });","file":"unit/inabox/test-inabox-messaging-host.js","skipped":false,"dir":"test"},{"name":"should return cached frame","suites":["getFrameElement"],"updatePoint":{"line":417,"column":34,"index":14062},"line":417,"code":"    it('should return cached frame', () => {\n      host.getMeasureableFrame = () => {\n        throw new Error('Error!!');\n      };\n      const creativeWinMock = {};\n      const creativeIframeMock = {};\n      host.iframeMap_[sentinel] = {\n        'iframe': creativeIframeMock,\n        'measurableFrame': creativeIframeMock\n      };\n      const {\n        measurableFrame\n      } = host.getFrameElement_(creativeWinMock, sentinel);\n      expect(measurableFrame).to.equal(creativeIframeMock);\n    });","file":"unit/inabox/test-inabox-messaging-host.js","skipped":false,"dir":"test"},{"name":"should return null if frame is not registered","suites":["getFrameElement"],"updatePoint":{"line":432,"column":53,"index":14578},"line":432,"code":"    it('should return null if frame is not registered', () => {\n      const iframeObj = createNestedIframeMocks(6, 3);\n      const sourceMock = iframeObj.source;\n      expect(host.getFrameElement_(sourceMock, sentinel)).to.be.null;\n    });","file":"unit/inabox/test-inabox-messaging-host.js","skipped":false,"dir":"test"},{"name":"should return null if frame is more than 10 levels deep","suites":["getFrameElement"],"updatePoint":{"line":437,"column":63,"index":14828},"line":437,"code":"    it('should return null if frame is more than 10 levels deep', () => {\n      const iframeObj = createNestedIframeMocks(12, 1);\n      const {\n        source: sourceMock,\n        topWin: topWinMock\n      } = iframeObj;\n      const frameMock = topWinMock.document.querySelectorAll()[0];\n      host = new InaboxMessagingHost(win, [frameMock]);\n      expect(host.getFrameElement_(sourceMock, sentinel)).to.be.null;\n    });","file":"unit/inabox/test-inabox-messaging-host.js","skipped":false,"dir":"test"},{"name":"unregisters frames","suites":["unregisterIframe"],"updatePoint":{"line":449,"column":26,"index":15257},"line":449,"code":"    it('unregisters frames', () => {\n      // Setup 3 frames with mock sentinel values.\n      const iframeObjA = createNestedIframeMocks(6, 3);\n      const frameMockA = iframeObjA.topWin.document.querySelectorAll()[0];\n      const iframeObjB = createNestedIframeMocks(6, 6);\n      const frameMockB = iframeObjB.topWin.document.querySelectorAll()[0];\n      const iframeObjC = createNestedIframeMocks(6, 0);\n      const frameMockC = iframeObjC.topWin.document.querySelectorAll()[0];\n      const observeUnregisterMock = env.sandbox.spy();\n      host = new InaboxMessagingHost(win, [frameMockA, frameMockB, frameMockC]);\n      host.getFrameElement_(iframeObjA.source, 'sentinelA');\n      host.getFrameElement_(iframeObjB.source, 'sentinelB');\n      host.iframeMap_['sentinelB'].observeUnregisterFn = observeUnregisterMock;\n      host.getFrameElement_(iframeObjC.source, 'sentinelC');\n      expect(host.iframes_.length).to.equal(3);\n      expect('sentinelA' in host.iframeMap_).to.be.true;\n      expect('sentinelB' in host.iframeMap_).to.be.true;\n      expect('sentinelC' in host.iframeMap_).to.be.true;\n      // Unregister each frame one at a time and verify state.\n      host.unregisterIframe(frameMockA);\n      expect(host.iframes_.length).to.equal(2);\n      expect('sentinelA' in host.iframeMap_).to.be.false;\n      expect('sentinelB' in host.iframeMap_).to.be.true;\n      expect('sentinelC' in host.iframeMap_).to.be.true;\n      expect(observeUnregisterMock).to.not.be.called;\n      host.unregisterIframe(frameMockB);\n      expect(host.iframes_.length).to.equal(1);\n      expect('sentinelA' in host.iframeMap_).to.be.false;\n      expect('sentinelB' in host.iframeMap_).to.be.false;\n      expect('sentinelC' in host.iframeMap_).to.be.true;\n      expect(observeUnregisterMock).to.be.calledOnce;\n      host.unregisterIframe(frameMockC);\n      expect(host.iframes_).to.be.empty;\n      expect(host.iframeMap_).to.be.empty;\n      expect(observeUnregisterMock).to.be.calledOnce;\n    });","file":"unit/inabox/test-inabox-messaging-host.js","skipped":false,"dir":"test"},{"name":"no errors or effects if called with a non-registered iframe","suites":["unregisterIframe"],"updatePoint":{"line":485,"column":67,"index":17278},"line":485,"code":"    it('no errors or effects if called with a non-registered iframe', () => {\n      const iframeObj = createNestedIframeMocks(6, 3);\n      const frameMock = iframeObj.topWin.document.querySelectorAll()[0];\n      host = new InaboxMessagingHost(win, [frameMock]);\n      host.getFrameElement_(iframeObj.source, 'sentinelA');\n      host.unregisterIframe(createNestedIframeMocks(1, 1));\n      expect(host.iframes_.length).to.equal(1);\n      expect('sentinelA' in host.iframeMap_).to.be.true;\n    });","file":"unit/inabox/test-inabox-messaging-host.js","skipped":false,"dir":"test"},{"name":"forceChangeSize","suites":[],"updatePoint":{"line":26,"column":21,"index":825},"line":26,"code":"  it('forceChangeSize', async () => {\n    const callback = env.sandbox.spy();\n    mutator.forceChangeSize(element, 12, 34, callback, {\n      top: 4,\n      right: 5,\n      bottom: 6,\n      left: 7\n    });\n    env.flushVsync();\n    await Promise.resolve();\n    expect(resource.changeSize).to.be.calledWith(12, 34, {\n      top: 4,\n      right: 5,\n      bottom: 6,\n      left: 7\n    });\n    expect(callback).to.be.calledOnce;\n    expect(schedulePassStub).to.be.calledOnce;\n  });","file":"unit/inabox/test-inabox-mutator.js","skipped":false,"dir":"test"},{"name":"requestChangeSize","suites":[],"updatePoint":{"line":45,"column":23,"index":1302},"line":45,"code":"  it('requestChangeSize', async () => {\n    const resultPromise = mutator.requestChangeSize(element, 12, 34, {\n      top: 4,\n      right: 5,\n      bottom: 6,\n      left: 7\n    });\n    env.flushVsync();\n    await resultPromise;\n    expect(resource.changeSize).to.be.calledWith(12, 34, {\n      top: 4,\n      right: 5,\n      bottom: 6,\n      left: 7\n    });\n    expect(schedulePassStub).to.be.calledOnce;\n  });","file":"unit/inabox/test-inabox-mutator.js","skipped":false,"dir":"test"},{"name":"expandElement","suites":[],"updatePoint":{"line":62,"column":19,"index":1706},"line":62,"code":"  it('expandElement', async () => {\n    mutator.expandElement(element);\n    expect(resource.completeExpand).to.be.calledOnce;\n    expect(schedulePassStub).to.be.calledOnce;\n  });","file":"unit/inabox/test-inabox-mutator.js","skipped":false,"dir":"test"},{"name":"attemptCollapse","suites":[],"updatePoint":{"line":67,"column":21,"index":1887},"line":67,"code":"  it('attemptCollapse', async () => {\n    const resultPromise = mutator.attemptCollapse(element);\n    env.flushVsync();\n    await resultPromise;\n    expect(resource.completeCollapse).to.be.calledOnce;\n    expect(schedulePassStub).to.be.calledOnce;\n  });","file":"unit/inabox/test-inabox-mutator.js","skipped":false,"dir":"test"},{"name":"collapseElement","suites":[],"updatePoint":{"line":74,"column":21,"index":2141},"line":74,"code":"  it('collapseElement', async () => {\n    mutator.collapseElement(element);\n    expect(resource.completeCollapse).to.be.calledOnce;\n    expect(schedulePassStub).to.be.calledOnce;\n  });","file":"unit/inabox/test-inabox-mutator.js","skipped":false,"dir":"test"},{"name":"measureElement","suites":[],"updatePoint":{"line":79,"column":20,"index":2325},"line":79,"code":"  it('measureElement', async () => {\n    const measurerSpy = env.sandbox.spy();\n    const resultPromise = mutator.measureElement(measurerSpy);\n    env.flushVsync();\n    await resultPromise;\n    expect(measurerSpy).to.be.calledOnce;\n  });","file":"unit/inabox/test-inabox-mutator.js","skipped":false,"dir":"test"},{"name":"mutateElement","suites":[],"updatePoint":{"line":86,"column":19,"index":2562},"line":86,"code":"  it('mutateElement', async () => {\n    const mutatorSpy = env.sandbox.spy();\n    const resultPromise = mutator.mutateElement(element, mutatorSpy);\n    env.flushVsync();\n    await resultPromise;\n    expect(mutatorSpy).to.be.calledOnce;\n  });","file":"unit/inabox/test-inabox-mutator.js","skipped":false,"dir":"test"},{"name":"measureMutateElement","suites":[],"updatePoint":{"line":93,"column":26,"index":2811},"line":93,"code":"  it('measureMutateElement', async () => {\n    const measurerSpy = env.sandbox.spy();\n    const mutatorSpy = env.sandbox.spy();\n    const resultPromise = mutator.measureMutateElement(element, measurerSpy, mutatorSpy);\n    env.flushVsync();\n    await resultPromise;\n    expect(measurerSpy).to.be.calledOnce;\n    expect(mutatorSpy).to.be.calledOnce;\n  });","file":"unit/inabox/test-inabox-mutator.js","skipped":false,"dir":"test"},{"name":"add & remove","suites":[],"updatePoint":{"line":16,"column":18,"index":519},"line":16,"code":"  it('add & remove', async () => {\n    const element1 = env.createAmpElement('amp-foo');\n    const element2 = env.createAmpElement('amp-bar');\n    const element3 = win.document.createElement('div');\n    expect(resources.get()).to.have.length(0);\n    resources.add(element1);\n    expect(resources.get()).to.have.length(1);\n    resources.add(element2);\n    expect(resources.get()).to.have.length(2);\n    const resource1 = resources.getResourceForElement(element1);\n    const resource2 = resources.getResourceForElement(element2);\n    expect(resource1.getId()).to.not.equal(resource2.getId());\n    allowConsoleError(() => {\n      expect(() => {\n        resources.getResourceForElement(element3);\n      }).to.throw(/Missing resource prop on/);\n    });\n    resources.remove(element1);\n    expect(resources.get()).to.have.length(1);\n    resources.remove(element1);\n    expect(resources.get()).to.have.length(1);\n    resources.remove(element3);\n    expect(resources.get()).to.have.length(1);\n    resources.remove(element2);\n    expect(resources.get()).to.have.length(0);\n  });","file":"unit/inabox/test-inabox-resources.js","skipped":false,"dir":"test"},{"name":"upgraded","suites":[],"updatePoint":{"line":42,"column":14,"index":1585},"line":42,"code":"  it('upgraded', async () => {\n    const schedulePassSpy = env.sandbox.stub(resources, 'schedulePass');\n    const element1 = env.createAmpElement('amp-foo');\n    resources.add(element1);\n    const resource1 = resources.getResourceForElement(element1);\n    const buildStub = env.sandbox.stub(resource1, 'build');\n    let resolveBuild;\n    buildStub.returns(new Promise(resolve => {\n      resolveBuild = resolve;\n    }));\n    resources.upgraded(element1);\n    await env.ampdoc.whenReady();\n    expect(buildStub).to.be.calledOnce;\n    await macroTask();\n    schedulePassSpy.resetHistory();\n    resolveBuild();\n    await macroTask();\n    expect(schedulePassSpy).to.be.calledOnce;\n  });","file":"unit/inabox/test-inabox-resources.js","skipped":false,"dir":"test"},{"name":"upgraded: should handle when build() returns undefined","suites":[],"updatePoint":{"line":61,"column":60,"index":2313},"line":61,"code":"  it('upgraded: should handle when build() returns undefined', async () => {\n    const schedulePassSpy = env.sandbox.stub(resources, 'schedulePass');\n    const element1 = env.createAmpElement('amp-foo');\n    resources.add(element1);\n    const resource1 = resources.getResourceForElement(element1);\n    const buildStub = env.sandbox.stub(resource1, 'build');\n    buildStub.returns(undefined);\n    resources.upgraded(element1);\n    await env.ampdoc.whenReady();\n    await macroTask();\n    expect(buildStub).to.be.calledOnce;\n    expect(schedulePassSpy).to.be.calledTwice;\n  });","file":"unit/inabox/test-inabox-resources.js","skipped":false,"dir":"test"},{"name":"eagerly builds amp elements","suites":[],"updatePoint":{"line":74,"column":33,"index":2862},"line":74,"code":"  it('eagerly builds amp elements', async () => {\n    toggleExperiment(win, 'inabox-resources-eager', true);\n    const readySignal = new Deferred();\n    env.sandbox.stub(env.ampdoc, 'whenReady').returns(readySignal.promise);\n    resources = new InaboxResources(env.ampdoc);\n    const element1 = env.createAmpElement('amp-one');\n    resources.add(element1);\n    const resource1 = resources.getResourceForElement(element1);\n    const build1 = env.sandbox.stub(resource1, 'build').resolves();\n    win.document.body.appendChild(element1);\n    resources.upgraded(element1);\n    expect(build1).not.to.be.called;\n    const element2 = env.createAmpElement('amp-two');\n    resources.add(element2);\n    const resource2 = resources.getResourceForElement(element2);\n    const build2 = env.sandbox.stub(resource2, 'build').resolves();\n    win.document.body.appendChild(element2);\n    resources.upgraded(element2);\n    expect(build1).to.be.called;\n    expect(build2).not.to.be.called;\n    readySignal.resolve();\n    await macroTask();\n    expect(build2).to.be.called;\n  });","file":"unit/inabox/test-inabox-resources.js","skipped":false,"dir":"test"},{"name":"should pause and resume resources on doc visibility","suites":[],"updatePoint":{"line":98,"column":57,"index":3946},"line":98,"code":"  it('should pause and resume resources on doc visibility', () => {\n    const element1 = env.createAmpElement('amp-foo');\n    const element2 = env.createAmpElement('amp-bar');\n    resources.add(element1);\n    resources.add(element2);\n    env.sandbox.stub(element1, 'pause');\n    env.sandbox.stub(element1, 'resume');\n    env.sandbox.stub(element2, 'pause');\n    env.sandbox.stub(element2, 'resume');\n    env.ampdoc.overrideVisibilityState('paused');\n    expect(element1.pause).to.be.calledOnce;\n    expect(element2.pause).to.be.calledOnce;\n    env.ampdoc.overrideVisibilityState('visible');\n    expect(element1.resume).to.be.calledOnce;\n    expect(element2.resume).to.be.calledOnce;\n  });","file":"unit/inabox/test-inabox-resources.js","skipped":false,"dir":"test"},{"name":"should unload all resources on dispose","suites":[],"updatePoint":{"line":114,"column":44,"index":4622},"line":114,"code":"  it('should unload all resources on dispose', async () => {\n    const element1 = env.createAmpElement('amp-foo');\n    const element2 = env.createAmpElement('amp-bar');\n    resources.add(element1);\n    resources.add(element2);\n    const resource1 = resources.get()[0];\n    const resource2 = resources.get()[1];\n    env.sandbox.stub(resource1, 'unload');\n    env.sandbox.stub(resource2, 'unload');\n    resources.dispose();\n    expect(resource1.unload).to.be.calledOnce;\n    expect(resource2.unload).to.be.calledOnce;\n  });","file":"unit/inabox/test-inabox-resources.js","skipped":false,"dir":"test"},{"name":"should ignore R1 resources for layout pass","suites":[],"updatePoint":{"line":127,"column":48,"index":5148},"line":127,"code":"  it('should ignore R1 resources for layout pass', async () => {\n    const element1 = env.createAmpElement('amp-foo');\n    const element2 = env.createAmpElement('amp-bar');\n    env.sandbox.stub(element2, 'R1').returns(true);\n    win.document.body.appendChild(element1);\n    win.document.body.appendChild(element2);\n    resources.add(element1);\n    resources.add(element2);\n    const resource1 = resources.get()[0];\n    const resource2 = resources.get()[1];\n    env.sandbox.stub(resource1, 'measure');\n    env.sandbox.stub(resource2, 'measure');\n    env.sandbox.stub(resource1, 'startLayout');\n    env.sandbox.stub(resource2, 'startLayout');\n    env.sandbox.stub(resource1, 'build').resolves();\n    env.sandbox.stub(resource2, 'build').resolves();\n    env.sandbox.stub(resource1, 'getState').returns(ResourceState_Enum.READY_FOR_LAYOUT);\n    env.sandbox.stub(resource2, 'getState').returns(ResourceState_Enum.READY_FOR_LAYOUT);\n    env.sandbox.stub(resource1, 'isDisplayed').returns(true);\n    env.sandbox.stub(resource2, 'isDisplayed').returns(true);\n    resources.upgraded(element1);\n    resources.schedulePass(0);\n    await sleep(10);\n    expect(resource1.measure).to.be.called;\n    expect(resource2.measure).to.not.be.called;\n    expect(resource1.startLayout).to.be.called;\n    expect(resource2.startLayout).to.not.be.called;\n  });","file":"unit/inabox/test-inabox-resources.js","skipped":false,"dir":"test"},{"name":"cross domain","suites":["should work for size, layoutRect and position observer"],"updatePoint":{"line":82,"column":20,"index":2775},"line":82,"code":"    it('cross domain', () => {\n      stubIframeClientMakeRequest('send-positions', 'position', (req, res, cb) => {\n        positionCallback = cb;\n      }, /* opt_sync */true);\n      return binding.connect().then(() => {\n        testPositionCallback();\n      });\n    });","file":"unit/inabox/test-inabox-viewport.js","skipped":false,"dir":"test"},{"name":"same domain","suites":["should work for size, layoutRect and position observer"],"updatePoint":{"line":90,"column":19,"index":3044},"line":90,"code":"    it('same domain', () => {\n      binding = bindingFriendly;\n      env.sandbox.stub(PositionObserver.prototype, 'observe').callsFake((e, callback) => {\n        topWindowObservable.add(() => callback({\n          viewportRect,\n          targetRect\n        }));\n      });\n      positionCallback = data => {\n        viewportRect = data.viewportRect;\n        targetRect = data.targetRect;\n        topWindowObservable.fire();\n      };\n      return binding.connect().then(() => {\n        testPositionCallback();\n      });\n    });","file":"unit/inabox/test-inabox-viewport.js","skipped":false,"dir":"test"},{"name":"should center content, resize and remeasure on overlay mode","suites":["should work for size, layoutRect and position observer"],"updatePoint":{"line":166,"column":65,"index":5922},"line":166,"code":"  it('should center content, resize and remeasure on overlay mode', () => {\n    const allResourcesMock = Array(5).fill(undefined).map(() => ({\n      measure: env.sandbox.spy()\n    }));\n    env.sandbox.stub(binding, 'getChildResources').callsFake(() => allResourcesMock);\n    const prepareContainer = env.sandbox.stub(binding, 'prepareBodyForOverlay_').returns(Promise.resolve());\n    const makeRequest = stubIframeClientMakeRequest('full-overlay-frame', 'full-overlay-frame-response', (req, res, cb) => cb({\n      success: true,\n      boxRect: {\n        left: 0,\n        top: 0,\n        right: 1000,\n        bottom: 2000,\n        width: 1000,\n        height: 2000\n      }\n    }), /* opt_sync */undefined, /* opt_once */true);\n    return binding.updateLightboxMode(true).then(() => {\n      expect(prepareContainer).to.be.calledOnce;\n      expect(prepareContainer).to.be.calledBefore(makeRequest);\n      allResourcesMock.forEach(resource => {\n        expect(resource.measure).to.have.been.calledOnce;\n      });\n    });\n  });","file":"unit/inabox/test-inabox-viewport.js","skipped":false,"dir":"test"},{"name":"should reset content and request resize on leave overlay mode","suites":["should work for size, layoutRect and position observer"],"updatePoint":{"line":191,"column":67,"index":6947},"line":191,"code":"  it('should reset content and request resize on leave overlay mode', () => {\n    const resetContainer = env.sandbox.stub(binding, 'resetBodyForOverlay_').returns(Promise.resolve());\n    const makeRequest = stubIframeClientMakeRequest('cancel-full-overlay-frame', 'cancel-full-overlay-frame-response', (req, res, cb) => cb({\n      success: true\n    }), /* opt_sync */undefined, /* opt_once */true);\n    return binding.updateLightboxMode(false).then(() => {\n      expect(resetContainer).to.be.calledOnce;\n      expect(resetContainer).to.be.calledAfter(makeRequest);\n    });\n  });","file":"unit/inabox/test-inabox-viewport.js","skipped":false,"dir":"test"},{"name":"should update box rect when expanding/collapsing","suites":["should work for size, layoutRect and position observer"],"updatePoint":{"line":201,"column":54,"index":7513},"line":201,"code":"  it('should update box rect when expanding/collapsing', function* () {\n    const boxRect = {\n      left: 20,\n      top: 10,\n      bottom: 310,\n      right: 420,\n      width: 400,\n      height: 300\n    };\n    const updateBoxRectStub = env.sandbox.stub(binding, 'updateBoxRect_').callsFake(NOOP);\n    stubIframeClientMakeRequest('full-overlay-frame', 'full-overlay-frame-response', (req, res, cb) => cb({\n      success: true,\n      boxRect\n    }), /* opt_sync */undefined, /* opt_once */true);\n    env.sandbox.stub(binding, 'prepareBodyForOverlay_').returns(Promise.resolve());\n    yield binding.updateLightboxMode(true);\n    expect(updateBoxRectStub).to.be.calledWith(boxRect);\n  });","file":"unit/inabox/test-inabox-viewport.js","skipped":false,"dir":"test"},{"name":"should update box rect when collapsing","suites":["should work for size, layoutRect and position observer"],"updatePoint":{"line":219,"column":44,"index":8187},"line":219,"code":"  it('should update box rect when collapsing', function* () {\n    const boxRect = {\n      left: 20,\n      top: 10,\n      bottom: 310,\n      right: 420,\n      width: 400,\n      height: 300\n    };\n    const updateBoxRectStub = env.sandbox.stub(binding, 'updateBoxRect_').callsFake(NOOP);\n    stubIframeClientMakeRequest('cancel-full-overlay-frame', 'cancel-full-overlay-frame-response', (req, res, cb) => cb({\n      success: true,\n      boxRect\n    }), /* opt_sync */undefined, /* opt_once */true);\n    env.sandbox.stub(binding, 'resetBodyForOverlay_').returns(Promise.resolve());\n    yield binding.updateLightboxMode(false);\n    expect(updateBoxRectStub).to.be.calledWith(boxRect);\n  });","file":"unit/inabox/test-inabox-viewport.js","skipped":false,"dir":"test"},{"name":"should update box rect when expanding/collapsing - friendly iframe case","suites":["should work for size, layoutRect and position observer"],"updatePoint":{"line":237,"column":77,"index":8907},"line":237,"code":"  it('should update box rect when expanding/collapsing - friendly iframe case', function* () {\n    const boxRect = {\n      left: 20,\n      top: 10,\n      bottom: 310,\n      right: 420,\n      width: 400,\n      height: 300\n    };\n    const boxRect2 = {\n      left: 2,\n      top: 1,\n      bottom: 31,\n      right: 42,\n      width: 40,\n      height: 30\n    };\n    env.sandbox.stub(FrameOverlayManager.prototype, 'expandFrame').callsFake((i, callback) => {\n      callback(boxRect);\n    });\n    env.sandbox.stub(FrameOverlayManager.prototype, 'collapseFrame').callsFake((i, callback) => {\n      callback(boxRect2);\n    });\n    const updateBoxRectStub = env.sandbox.stub(bindingFriendly, 'updateBoxRect_').callsFake(NOOP);\n    env.sandbox.stub(bindingFriendly, 'prepareBodyForOverlay_').returns(Promise.resolve());\n    env.sandbox.stub(bindingFriendly, 'resetBodyForOverlay_').returns(Promise.resolve());\n    yield bindingFriendly.updateLightboxMode(true);\n    expect(updateBoxRectStub).to.be.calledWith(boxRect);\n    yield bindingFriendly.updateLightboxMode(false);\n    expect(updateBoxRectStub).to.be.calledWith(boxRect2);\n  });","file":"unit/inabox/test-inabox-viewport.js","skipped":false,"dir":"test"},{"name":"should center the fixed container properly","suites":["should work for size, layoutRect and position observer"],"line":270,"code":"  it.skip('should center the fixed container properly', function* () {","file":"unit/inabox/test-inabox-viewport.js","skipped":true,"dir":"test"},{"name":"should undo styling when the fixed container is reset","suites":["should work for size, layoutRect and position observer"],"updatePoint":{"line":287,"column":59,"index":10853},"line":287,"code":"  it('should undo styling when the fixed container is reset', function* () {\n    const el = document.createElement('div');\n    yield resetBodyForOverlay(win, el);\n    expect(el.style['position']).to.be.empty;\n    expect(el.style['left']).to.be.empty;\n    expect(el.style['top']).to.be.empty;\n    expect(el.style['bottom']).to.be.empty;\n    expect(el.style['right']).to.be.empty;\n    expect(el.style['width']).to.be.empty;\n    expect(el.style['height']).to.be.empty;\n    expect(el.style['margin-left']).to.be.empty;\n    expect(el.style['margin-top']).to.be.empty;\n  });","file":"unit/inabox/test-inabox-viewport.js","skipped":false,"dir":"test"},{"name":"should request the position async from host","suites":["should work for size, layoutRect and position observer"],"updatePoint":{"line":300,"column":49,"index":11412},"line":300,"code":"  it('should request the position async from host', () => {\n    const requestSpy = stubIframeClientMakeRequest('send-positions', 'position', (req, res, cb) => cb({\n      targetRect: layoutRectLtwh(10, 20, 100, 100),\n      viewportRect: layoutRectLtwh(1, 1, 1, 1)\n    }), undefined, true);\n    return binding.getRootClientRectAsync().then(rect => {\n      expect(rect).to.jsonEqual(layoutRectLtwh(10, 20, 100, 100));\n      expect(requestSpy).to.be.calledOnce;\n    });\n  });","file":"unit/inabox/test-inabox-viewport.js","skipped":false,"dir":"test"},{"name":"should request the position directly from host if friendly","suites":["should work for size, layoutRect and position observer"],"updatePoint":{"line":310,"column":64,"index":11899},"line":310,"code":"  it('should request the position directly from host if friendly', () => {\n    env.sandbox.stub(PositionObserver.prototype, 'getTargetRect').returns(layoutRectLtwh(10, 20, 100, 100));\n    return bindingFriendly.getRootClientRectAsync().then(rect => {\n      expect(rect).to.jsonEqual(layoutRectLtwh(10, 20, 100, 100));\n    });\n  });","file":"unit/inabox/test-inabox-viewport.js","skipped":false,"dir":"test"},{"name":"should disconnect friendly listener and reconnect again properly","suites":["should work for size, layoutRect and position observer"],"updatePoint":{"line":316,"column":70,"index":12237},"line":316,"code":"  it('should disconnect friendly listener and reconnect again properly', () => {\n    const unobserveFunction = env.sandbox.spy();\n    const observeFunction = env.sandbox.stub(PositionObserver.prototype, 'observe');\n    observeFunction.returns(unobserveFunction);\n    return bindingFriendly.connect().then(() => {\n      expect(observeFunction).to.be.calledOnce;\n      expect(unobserveFunction).to.not.be.called;\n      bindingFriendly.disconnect();\n      expect(unobserveFunction).to.be.called;\n      return bindingFriendly.connect();\n    }).then(() => {\n      expect(observeFunction).to.be.calledTwice;\n    });\n  });","file":"unit/inabox/test-inabox-viewport.js","skipped":false,"dir":"test"},{"name":"observe should work","suites":[],"updatePoint":{"line":31,"column":25,"index":915},"line":31,"code":"  it('observe should work', async () => {\n    let position1 = {\n      viewportRect: layoutRectLtwh(0, 0, 200, 300),\n      targetRect: layoutRectLtwh(1, 2, 30, 40)\n    };\n    let position2 = {\n      viewportRect: layoutRectLtwh(0, 0, 200, 300),\n      targetRect: layoutRectLtwh(3, 4, 30, 40)\n    };\n    const callbackSpy11 = env.sandbox.stub();\n    const callbackSpy12 = env.sandbox.stub();\n    const callbackSpy21 = env.sandbox.stub();\n    observer.observe(target1, callbackSpy11);\n    expect(callbackSpy11).to.be.calledWith(position1);\n    observer.observe(target1, callbackSpy12);\n    expect(callbackSpy12).to.be.calledWith(position1);\n    observer.observe(target2, callbackSpy21);\n    expect(callbackSpy21).to.be.calledWith(position2);\n    win.scrollTo(10, 20);\n    await sleep(100);\n    position1 = {\n      viewportRect: layoutRectLtwh(10, 20, 200, 300),\n      targetRect: layoutRectLtwh(1, 2, 30, 40)\n    };\n    position2 = {\n      viewportRect: layoutRectLtwh(10, 20, 200, 300),\n      targetRect: layoutRectLtwh(3, 4, 30, 40)\n    };\n    expect(callbackSpy11).to.be.calledWith(position1);\n    expect(callbackSpy12).to.be.calledWith(position1);\n    expect(callbackSpy21).to.be.calledWith(position2);\n  });","file":"unit/inabox/test-position-observer.js","skipped":false,"dir":"test"},{"name":"getTargetRect should work within nested iframes","suites":[],"updatePoint":{"line":63,"column":53,"index":2153},"line":63,"code":"  it('getTargetRect should work within nested iframes', () => {\n    const iframe1 = win.document.createElement('iframe');\n    const iframe2 = win.document.createElement('iframe');\n    const iframe3 = win.document.createElement('iframe');\n    const element = win.document.createElement('div');\n    element.getBoundingClientRect = () => layoutRectLtwh(1, 2, 30, 40);\n    win.document.body.appendChild(iframe1);\n    iframe1.contentDocument.body.appendChild(iframe2);\n    iframe2.contentDocument.body.appendChild(iframe3);\n    iframe3.contentDocument.body.appendChild(element);\n    iframe1.getBoundingClientRect = () => layoutRectLtwh(1, 2, 70, 80);\n    iframe2.getBoundingClientRect = () => layoutRectLtwh(5, 6, 30, 40);\n    iframe3.getBoundingClientRect = () => layoutRectLtwh(7, 8, 10, 20);\n    expect(observer.getTargetRect(element)).to.deep.equal(layoutRectLtwh(14, 18, 30, 40));\n  });","file":"unit/inabox/test-position-observer.js","skipped":false,"dir":"test"},{"name":"should get existing observer","suites":[],"updatePoint":{"line":78,"column":34,"index":3021},"line":78,"code":"  it('should get existing observer', () => {\n    const observer1 = getPositionObserver(win);\n    const observer2 = getPositionObserver(win);\n    const observer3 = new PositionObserver(win);\n    expect(observer1).to.equal(observer2);\n    expect(observer2).to.not.equal(observer3);\n  });","file":"unit/inabox/test-position-observer.js","skipped":false,"dir":"test"},{"name":"should fire custom event and postMessage","suites":[],"updatePoint":{"line":45,"column":46,"index":1624},"line":45,"code":"  it('should fire custom event and postMessage', async () => {\n    registerIniLoadListener(ampdoc);\n    expect(dispatchEventStub).to.not.be.called;\n    expect(parentPostMessageStub).to.not.be.called;\n    iniLoadDeferred.resolve([]);\n    await sleep(10);\n    expect(dispatchEventStub).to.be.calledOnce;\n    expect(initCustomEventStub).to.be.calledWith('amp-ini-load');\n    expect(parentPostMessageStub).to.be.calledWith('amp-ini-load', '*');\n  });","file":"unit/inabox/test-utils.js","skipped":false,"dir":"test"},{"name":"Should not return an a4aId if no a4a meta tag in head","suites":[],"updatePoint":{"line":55,"column":59,"index":2084},"line":55,"code":"  it('Should not return an a4aId if no a4a meta tag in head', () => {\n    expect(getA4AId(env.win)).to.be.not.ok;\n  });","file":"unit/inabox/test-utils.js","skipped":false,"dir":"test"},{"name":"Should be able to get the a4aId if on the document","suites":[],"updatePoint":{"line":58,"column":56,"index":2201},"line":58,"code":"  it('Should be able to get the a4aId if on the document', () => {\n    addA4AMetaTagToDocument();\n    expect(getA4AId(env.win)).to.be.ok;\n  });","file":"unit/inabox/test-utils.js","skipped":false,"dir":"test"},{"name":"should create AbortController and signal","suites":[],"updatePoint":{"line":13,"column":46,"index":389},"line":13,"code":"  it('should create AbortController and signal', () => {\n    expect(signal).to.exist;\n    expect(signal.aborted).to.be.false;\n    expect(signal.onabort).to.be.null;\n  });","file":"unit/polyfills/test-abort-controller.js","skipped":false,"dir":"test"},{"name":"should abort signal without listener","suites":[],"updatePoint":{"line":18,"column":42,"index":556},"line":18,"code":"  it('should abort signal without listener', () => {\n    controller.abort();\n    expect(signal.aborted).to.be.true;\n  });","file":"unit/polyfills/test-abort-controller.js","skipped":false,"dir":"test"},{"name":"should abort signal with listener","suites":[],"updatePoint":{"line":22,"column":39,"index":675},"line":22,"code":"  it('should abort signal with listener', () => {\n    const spy = env.sandbox.spy();\n    signal.onabort = spy;\n    expect(signal.onabort).to.equal(spy);\n    controller.abort();\n    expect(signal.aborted).to.be.true;\n    expect(spy).to.be.calledOnce;\n    const event = spy.firstCall.firstArg;\n    expect(event).to.contain({\n      type: 'abort',\n      bubbles: false,\n      cancelable: false,\n      target: signal,\n      currentTarget: signal\n    });\n  });","file":"unit/polyfills/test-abort-controller.js","skipped":false,"dir":"test"},{"name":"should only call listener once","suites":[],"updatePoint":{"line":38,"column":36,"index":1127},"line":38,"code":"  it('should only call listener once', () => {\n    const spy = env.sandbox.spy();\n    signal.onabort = spy;\n    expect(signal.onabort).to.equal(spy);\n    controller.abort();\n    expect(spy).to.be.calledOnce;\n    controller.abort();\n    expect(spy).to.be.calledOnce;\n  });","file":"unit/polyfills/test-abort-controller.js","skipped":false,"dir":"test"},{"name":"finds primitives when they are present","suites":[],"updatePoint":{"line":7,"column":44,"index":223},"line":7,"code":"  it('finds primitives when they are present', () => {\n    const arrayWithPrimitives = [false, 17, 'hello world'];\n    expect(arrayWithPrimitives.includes(17)).to.be.true;\n    expect(arrayWithPrimitives.includes(28)).to.be.false;\n    expect(arrayWithPrimitives.includes(false)).to.be.true;\n    expect(arrayWithPrimitives.includes(true)).to.be.false;\n    expect(arrayWithPrimitives.includes('hello world')).to.be.true;\n    expect(arrayWithPrimitives.includes('google')).to.be.false;\n  });","file":"unit/polyfills/test-array-includes.js","skipped":false,"dir":"test"},{"name":"finds objects when they are present","suites":[],"updatePoint":{"line":16,"column":41,"index":708},"line":16,"code":"  it('finds objects when they are present', () => {\n    const point = {\n      x: 47,\n      y: 8472\n    };\n    const arrayWithObject = [point];\n    expect(arrayWithObject.includes(point)).to.be.true;\n    // Same properties, different objects\n    expect(arrayWithObject.includes({\n      x: 47,\n      y: 8472\n    })).to.be.false;\n  });","file":"unit/polyfills/test-array-includes.js","skipped":false,"dir":"test"},{"name":"finds NaN when NaN is present","suites":[],"updatePoint":{"line":29,"column":35,"index":1035},"line":29,"code":"  it('finds NaN when NaN is present', () => {\n    const arrayWithNaN = [NaN];\n    expect(arrayWithNaN.includes(NaN)).to.be.true;\n  });","file":"unit/polyfills/test-array-includes.js","skipped":false,"dir":"test"},{"name":"should only find null when null is desired","suites":[],"updatePoint":{"line":33,"column":48,"index":1183},"line":33,"code":"  it('should only find null when null is desired', () => {\n    const arrayWithNull = [null];\n    const arrayWithUndefined = [undefined];\n    expect(arrayWithNull.includes(null)).to.be.true;\n    expect(arrayWithUndefined.includes(null)).to.be.false;\n  });","file":"unit/polyfills/test-array-includes.js","skipped":false,"dir":"test"},{"name":"should only find undefined when undefined is desired","suites":[],"updatePoint":{"line":39,"column":58,"index":1448},"line":39,"code":"  it('should only find undefined when undefined is desired', () => {\n    const arrayWithNull = [null];\n    const arrayWithUndefined = [undefined];\n    expect(arrayWithUndefined.includes(undefined)).to.be.true;\n    expect(arrayWithNull.includes(undefined)).to.be.false;\n  });","file":"unit/polyfills/test-array-includes.js","skipped":false,"dir":"test"},{"name":"should treat 0 and -0 as equal","suites":[],"updatePoint":{"line":45,"column":36,"index":1701},"line":45,"code":"  it('should treat 0 and -0 as equal', () => {\n    const arrayWithZero = [0];\n    const arrayWithNegativeZero = [-0];\n    expect(arrayWithZero.includes(0)).to.be.true;\n    expect(arrayWithZero.includes(-0)).to.be.true;\n    expect(arrayWithNegativeZero.includes(0)).to.be.true;\n    expect(arrayWithNegativeZero.includes(-0)).to.be.true;\n  });","file":"unit/polyfills/test-array-includes.js","skipped":false,"dir":"test"},{"name":"should respect the fromIndex argument","suites":[],"updatePoint":{"line":53,"column":43,"index":2050},"line":53,"code":"  it('should respect the fromIndex argument', () => {\n    const arrayWithNumbers = [0, 1, 2, 3, 4, 5];\n    expect(arrayWithNumbers.includes(2, 0)).to.be.true;\n    expect(arrayWithNumbers.includes(2, 1)).to.be.true;\n    expect(arrayWithNumbers.includes(2, 2)).to.be.true;\n    expect(arrayWithNumbers.includes(2, 3)).to.be.false;\n    expect(arrayWithNumbers.includes(2, 4)).to.be.false;\n    expect(arrayWithNumbers.includes(2, 5)).to.be.false;\n    expect(arrayWithNumbers.includes(2, 6)).to.be.false;\n    expect(arrayWithNumbers.includes(2, -1)).to.be.false;\n    expect(arrayWithNumbers.includes(2, -2)).to.be.false;\n    expect(arrayWithNumbers.includes(2, -3)).to.be.false;\n    expect(arrayWithNumbers.includes(2, -4)).to.be.true;\n    expect(arrayWithNumbers.includes(2, -5)).to.be.true;\n    expect(arrayWithNumbers.includes(2, -6)).to.be.true;\n    expect(arrayWithNumbers.includes(2, -6)).to.be.true;\n  });","file":"unit/polyfills/test-array-includes.js","skipped":false,"dir":"test"},{"name":"handles non-configurable innerHTML accessor (Safari 9)","suites":[],"updatePoint":{"line":30,"column":60,"index":889},"line":30,"code":"  it('handles non-configurable innerHTML accessor (Safari 9)', () => {\n    // Use strict is important, as strict mode code will throw an error when\n    // trying to redefine a non-configurable property.\n    'use strict';\n\n    Object.defineProperty(innerHTMLProto, 'innerHTML', {\n      configurable: false\n    });\n    install(win, function () {});\n    class Test extends win.HTMLElement {}\n    expect(() => {\n      win.customElements.define('x-test', Test);\n    }).not.to.throw();\n    expect(win.HTMLElementOrig).to.exist;\n    expect(Object.getPrototypeOf(win.HTMLElement)).to.equal(win.HTMLElementOrig);\n  });","file":"unit/polyfills/test-custom-elements.js","skipped":false,"dir":"test"},{"name":"handles missing innerHTML descriptor (Yandex)","suites":[],"updatePoint":{"line":46,"column":51,"index":1490},"line":46,"code":"  it('handles missing innerHTML descriptor (Yandex)', () => {\n    // Use strict is important, as strict mode code will throw an error when\n    // trying to redefine a non-configurable property.\n    'use strict';\n\n    delete innerHTMLProto.innerHTML;\n    install(win, function () {});\n    class Test extends win.HTMLElement {}\n    expect(() => {\n      win.customElements.define('x-test', Test);\n    }).not.to.throw();\n    expect(win.HTMLElementOrig).to.exist;\n    expect(Object.getPrototypeOf(win.HTMLElement)).to.equal(win.HTMLElementOrig);\n  });","file":"unit/polyfills/test-custom-elements.js","skipped":false,"dir":"test"},{"name":"handles innerHTML descriptor on HTMLElement (IE11)","suites":[],"updatePoint":{"line":60,"column":56,"index":2042},"line":60,"code":"  it('handles innerHTML descriptor on HTMLElement (IE11)', () => {\n    // Use strict is important, as strict mode code will throw an error when\n    // trying to redefine a non-configurable property.\n    'use strict';\n\n    const desc = Object.getOwnPropertyDescriptor(innerHTMLProto, 'innerHTML');\n    delete innerHTMLProto.innerHTML;\n    Object.defineProperty(win.HTMLElement.prototype, 'innerHTML', desc);\n    install(win, function () {});\n    class Test extends win.HTMLElement {}\n    expect(() => {\n      win.customElements.define('x-test', Test);\n    }).not.to.throw();\n    expect(win.HTMLElementOrig).to.exist;\n    expect(Object.getPrototypeOf(win.HTMLElement)).to.equal(win.HTMLElementOrig);\n  });","file":"unit/polyfills/test-custom-elements.js","skipped":false,"dir":"test"},{"name":"copies own properties from proto object","suites":[],"updatePoint":{"line":78,"column":45,"index":2787},"line":78,"code":"  it('copies own properties from proto object', () => {\n    const obj = {};\n    const proto = {\n      test: 1\n    };\n    copyProperties(obj, proto);\n    expect(obj).to.have.ownPropertyDescriptor('test', {\n      value: 1,\n      configurable: true,\n      enumerable: true,\n      writable: true\n    });\n  });","file":"unit/polyfills/test-custom-elements.js","skipped":false,"dir":"test"},{"name":"copies own descriptor from proto object","suites":[],"updatePoint":{"line":91,"column":45,"index":3093},"line":91,"code":"  it('copies own descriptor from proto object', () => {\n    const obj = {};\n    const proto = {};\n    Object.defineProperty(proto, 'test', {\n      value: 1\n    });\n    copyProperties(obj, proto);\n    expect(obj).to.have.ownPropertyDescriptor('test', {\n      value: 1,\n      configurable: false,\n      enumerable: false,\n      writable: false\n    });\n  });","file":"unit/polyfills/test-custom-elements.js","skipped":false,"dir":"test"},{"name":"copies own getter/setter from proto object","suites":[],"updatePoint":{"line":105,"column":48,"index":3452},"line":105,"code":"  it('copies own getter/setter from proto object', () => {\n    const obj = {};\n    const proto = {};\n    let value = 1;\n    Object.defineProperty(proto, 'test', {\n      get() {\n        return value;\n      },\n      set(v) {\n        value = v;\n      }\n    });\n    copyProperties(obj, proto);\n    expect(obj).to.have.ownPropertyDescriptor('test');\n    expect(obj.test).to.equal(1);\n    obj.test = 2;\n    expect(obj.test).to.equal(2);\n    expect(value).to.equal(2);\n  });","file":"unit/polyfills/test-custom-elements.js","skipped":false,"dir":"test"},{"name":"does not override already defined property","suites":[],"updatePoint":{"line":124,"column":48,"index":3920},"line":124,"code":"  it('does not override already defined property', () => {\n    const obj = {\n      test: 1\n    };\n    const proto = {\n      test: 2\n    };\n    copyProperties(obj, proto);\n    expect(obj.test).to.equal(1);\n  });","file":"unit/polyfills/test-custom-elements.js","skipped":false,"dir":"test"},{"name":"copies own properties from proto.__proto__ object","suites":[],"updatePoint":{"line":134,"column":55,"index":4138},"line":134,"code":"  it('copies own properties from proto.__proto__ object', () => {\n    const obj = {};\n    const proto = Object.create({\n      test: 1\n    });\n    copyProperties(obj, proto);\n    expect(obj).to.have.ownPropertyDescriptor('test', {\n      value: 1,\n      configurable: true,\n      enumerable: true,\n      writable: true\n    });\n  });","file":"unit/polyfills/test-custom-elements.js","skipped":false,"dir":"test"},{"name":"copies own descriptor from proto object","suites":[],"updatePoint":{"line":147,"column":45,"index":4459},"line":147,"code":"  it('copies own descriptor from proto object', () => {\n    const obj = {};\n    const proto = Object.create({}, {\n      test: {\n        value: 1\n      }\n    });\n    copyProperties(obj, proto);\n    expect(obj).to.have.ownPropertyDescriptor('test', {\n      value: 1,\n      configurable: false,\n      enumerable: false,\n      writable: false\n    });\n  });","file":"unit/polyfills/test-custom-elements.js","skipped":false,"dir":"test"},{"name":"copies own getter/setter from proto object","suites":[],"updatePoint":{"line":162,"column":48,"index":4815},"line":162,"code":"  it('copies own getter/setter from proto object', () => {\n    let value = 1;\n    const obj = {};\n    const proto = Object.create({}, {\n      test: {\n        get() {\n          return value;\n        },\n        set(v) {\n          value = v;\n        }\n      }\n    });\n    copyProperties(obj, proto);\n    expect(obj).to.have.ownPropertyDescriptor('test');\n    expect(obj.test).to.equal(1);\n    obj.test = 2;\n    expect(obj.test).to.equal(2);\n    expect(value).to.equal(2);\n  });","file":"unit/polyfills/test-custom-elements.js","skipped":false,"dir":"test"},{"name":"does not override already defined property","suites":[],"updatePoint":{"line":182,"column":48,"index":5290},"line":182,"code":"  it('does not override already defined property', () => {\n    const obj = {\n      test: 1\n    };\n    const proto = Object.create({\n      test: 2\n    });\n    copyProperties(obj, proto);\n    expect(obj.test).to.equal(1);\n  });","file":"unit/polyfills/test-custom-elements.js","skipped":false,"dir":"test"},{"name":"does not override closer property with __proto__ property","suites":[],"updatePoint":{"line":192,"column":63,"index":5531},"line":192,"code":"  it('does not override closer property with __proto__ property', () => {\n    const obj = {};\n    const proto = Object.create({\n      test: 2\n    }, {\n      test: {\n        value: 1\n      }\n    });\n    copyProperties(obj, proto);\n    expect(obj.test).to.equal(1);\n  });","file":"unit/polyfills/test-custom-elements.js","skipped":false,"dir":"test"},{"name":"should NOT override an existing method","suites":[],"updatePoint":{"line":38,"column":44,"index":1303},"line":38,"code":"  it('should NOT override an existing method', () => {\n    install(fakeWinWithContains);\n    expect(fakeWinWithContains.HTMLDocument.prototype.contains).to.equal(nativeContains);\n  });","file":"unit/polyfills/test-document-contains.js","skipped":false,"dir":"test"},{"name":"should override a existing method","suites":[],"updatePoint":{"line":42,"column":39,"index":1483},"line":42,"code":"  it('should override a existing method', () => {\n    expect(polyfillContains).to.be.ok;\n    expect(polyfillContains).to.not.equal(nativeContains);\n  });","file":"unit/polyfills/test-document-contains.js","skipped":false,"dir":"test"},{"name":"should polyfill document.contains API","suites":[],"updatePoint":{"line":46,"column":43,"index":1641},"line":46,"code":"  it('should polyfill document.contains API', () => {\n    expect(polyfillContains.call(document, connectedElement)).to.be.true;\n    expect(polyfillContains.call(document, connectedChild)).to.be.true;\n    expect(polyfillContains.call(document, disconnectedElement)).to.be.false;\n    expect(polyfillContains.call(document, disconnectedChild)).to.be.false;\n  });","file":"unit/polyfills/test-document-contains.js","skipped":false,"dir":"test"},{"name":"should allow a null arg","suites":[],"updatePoint":{"line":52,"column":29,"index":1987},"line":52,"code":"  it('should allow a null arg', () => {\n    expect(document.contains(null)).to.be.false;\n    expect(polyfillContains.call(document, null)).to.be.false;\n  });","file":"unit/polyfills/test-document-contains.js","skipped":false,"dir":"test"},{"name":"should be inclusionary for documentElement","suites":[],"updatePoint":{"line":56,"column":48,"index":2164},"line":56,"code":"  it('should be inclusionary for documentElement', () => {\n    expect(document.contains(document.documentElement)).to.be.true;\n    expect(polyfillContains.call(document, document.documentElement)).to.be.true;\n  });","file":"unit/polyfills/test-document-contains.js","skipped":false,"dir":"test"},{"name":"should be inclusionary for document itself","suites":[],"updatePoint":{"line":60,"column":48,"index":2379},"line":60,"code":"  it('should be inclusionary for document itself', () => {\n    expect(document.contains(document)).to.be.true;\n    expect(polyfillContains.call(document, document)).to.be.true;\n  });","file":"unit/polyfills/test-document-contains.js","skipped":false,"dir":"test"},{"name":"should not load with native","suites":[],"updatePoint":{"line":46,"column":33,"index":1197},"line":46,"code":"  it('should not load with native', () => {\n    const win = {\n      IntersectionObserver: NativeIntersectionObserver,\n      IntersectionObserverEntry: NativeIntersectionObserverEntry,\n      navigator: CHROME_NAVIGATOR\n    };\n    expect(shouldLoadPolyfill(win)).to.be.false;\n  });","file":"unit/polyfills/test-intersection-observer.js","skipped":false,"dir":"test"},{"name":"should always load in WebKit/Safari","suites":[],"updatePoint":{"line":54,"column":41,"index":1485},"line":54,"code":"  it('should always load in WebKit/Safari', () => {\n    const win = {\n      IntersectionObserver: NativeIntersectionObserver,\n      IntersectionObserverEntry: NativeIntersectionObserverEntry,\n      navigator: CHROME_NAVIGATOR\n    };\n    expect(shouldLoadPolyfill(win)).to.be.false;\n    win.navigator = APPLE_NAVIGATOR;\n    expect(shouldLoadPolyfill(win)).to.be.true;\n  });","file":"unit/polyfills/test-intersection-observer.js","skipped":false,"dir":"test"},{"name":"should load when native does not support {root: document}","suites":[],"updatePoint":{"line":64,"column":63,"index":1880},"line":64,"code":"  it('should load when native does not support {root: document}', () => {\n    class NativeNoDocumentRoot {\n      constructor(_unused, opts) {\n        if (opts && opts.root && opts.root.nodeType !== 1) {\n          throw new TypeError('Root must be an Element');\n        }\n      }\n    }\n    const win = {\n      IntersectionObserver: NativeNoDocumentRoot,\n      IntersectionObserverEntry: NativeIntersectionObserverEntry,\n      document: {\n        nodeType: 9\n      },\n      navigator: CHROME_NAVIGATOR\n    };\n    expect(shouldLoadPolyfill(win)).to.be.true;\n  });","file":"unit/polyfills/test-intersection-observer.js","skipped":false,"dir":"test"},{"name":"should load when no native","suites":[],"updatePoint":{"line":82,"column":32,"index":2410},"line":82,"code":"  it('should load when no native', () => {\n    const win = {};\n    expect(shouldLoadPolyfill(win)).to.be.true;\n  });","file":"unit/polyfills/test-intersection-observer.js","skipped":false,"dir":"test"},{"name":"should load with the stub","suites":[],"updatePoint":{"line":86,"column":31,"index":2526},"line":86,"code":"  it('should load with the stub', () => {\n    const win = {\n      IntersectionObserver: IntersectionObserverStub,\n      IntersectionObserverEntry: NativeIntersectionObserverEntry,\n      navigator: CHROME_NAVIGATOR\n    };\n    installStub(win);\n    expect(shouldLoadPolyfill(win)).to.be.true;\n  });","file":"unit/polyfills/test-intersection-observer.js","skipped":false,"dir":"test"},{"name":"should load when no native entry","suites":[],"updatePoint":{"line":95,"column":38,"index":2830},"line":95,"code":"  it('should load when no native entry', () => {\n    const win = {\n      IntersectionObserver: NativeIntersectionObserver,\n      navigator: CHROME_NAVIGATOR\n    };\n    expect(shouldLoadPolyfill(win)).to.be.true;\n  });","file":"unit/polyfills/test-intersection-observer.js","skipped":false,"dir":"test"},{"name":"should install IntersectionObserverStub when no native","suites":[],"updatePoint":{"line":104,"column":60,"index":3116},"line":104,"code":"  it('should install IntersectionObserverStub when no native', () => {\n    const {\n      win\n    } = env;\n    delete win.IntersectionObserver;\n    install(win);\n    expect(win.IntersectionObserver).to.equal(IntersectionObserverStub);\n  });","file":"unit/polyfills/test-intersection-observer.js","skipped":false,"dir":"test"},{"name":"Unsupported root:document: should return native when non-document root requested","suites":[],"updatePoint":{"line":112,"column":86,"index":3382},"line":112,"code":"  it('Unsupported root:document: should return native when non-document root requested', () => {\n    const {\n      win\n    } = env;\n    const native = function () {};\n    win.IntersectionObserver = native;\n    install(win);\n    expect(new win.IntersectionObserver(() => {})).instanceOf(native);\n    expect(new win.IntersectionObserver(() => {\n      root: null;\n    })).instanceOf(native);\n    expect(new win.IntersectionObserver(() => {\n      root: {\n        nodeType: 1;\n      }\n    })).instanceOf(native);\n  });","file":"unit/polyfills/test-intersection-observer.js","skipped":false,"dir":"test"},{"name":"should return stub when {root:document} requested","suites":[],"updatePoint":{"line":129,"column":55,"index":3865},"line":129,"code":"  it('should return stub when {root:document} requested', () => {\n    const {\n      win\n    } = env;\n    const native = function () {\n      return 'native';\n    };\n    win.IntersectionObserver = native;\n    install(win);\n    expect(new win.IntersectionObserver(() => {}, {\n      root: document\n    })).to.be.instanceOf(IntersectionObserverStub);\n  });","file":"unit/polyfills/test-intersection-observer.js","skipped":false,"dir":"test"},{"name":"should polyfill isIntersecting when absent in native","suites":[],"updatePoint":{"line":142,"column":58,"index":4220},"line":142,"code":"  it('should polyfill isIntersecting when absent in native', () => {\n    const {\n      win\n    } = env;\n    const native = function () {};\n    const nativeEntry = function () {};\n    win.IntersectionObserver = native;\n    win.IntersectionObserverEntry = nativeEntry;\n    expect('isIntersecting' in win.IntersectionObserverEntry.prototype).to.be.false;\n    install(win);\n    expect(win.IntersectionObserverEntry).to.equal(nativeEntry);\n    expect('isIntersecting' in win.IntersectionObserverEntry.prototype).to.be.true;\n    const entry = new win.IntersectionObserverEntry();\n    expect(entry).to.be.instanceOf(nativeEntry);\n    entry.intersectionRatio = 0;\n    expect(entry.isIntersecting).to.be.false;\n    entry.intersectionRatio = 1;\n    expect(entry.isIntersecting).to.be.true;\n  });","file":"unit/polyfills/test-intersection-observer.js","skipped":false,"dir":"test"},{"name":"should keep native isIntersecting when available","suites":[],"updatePoint":{"line":161,"column":54,"index":5002},"line":161,"code":"  it('should keep native isIntersecting when available', () => {\n    const {\n      win\n    } = env;\n    const native = function () {};\n    const nativeEntry = function () {};\n    Object.defineProperty(nativeEntry.prototype, 'isIntersecting', {\n      value: 'A'\n    });\n    win.IntersectionObserver = native;\n    win.IntersectionObserverEntry = nativeEntry;\n    expect('isIntersecting' in win.IntersectionObserverEntry.prototype).to.be.true;\n    install(win);\n    const entry = new win.IntersectionObserverEntry();\n    expect(entry).to.be.instanceOf(nativeEntry);\n    entry.intersectionRatio = 0;\n    expect(entry.isIntersecting).to.equal('A');\n    entry.intersectionRatio = 1;\n    expect(entry.isIntersecting).to.equal('A');\n  });","file":"unit/polyfills/test-intersection-observer.js","skipped":false,"dir":"test"},{"name":"should install IntersectionObserverStub when no native","suites":[],"updatePoint":{"line":187,"column":60,"index":5998},"line":187,"code":"  it('should install IntersectionObserverStub when no native', () => {\n    const {\n      win\n    } = env;\n    delete win.IntersectionObserver;\n    const parentWin = {\n      IntersectionObserver: IntersectionObserver1,\n      IntersectionObserverEntry: IntersectionObserverEntry1\n    };\n    installForChildWin(parentWin, win);\n    expect(win.IntersectionObserver).to.equal(IntersectionObserver1);\n    expect(win.IntersectionObserverEntry).to.equal(IntersectionObserverEntry1);\n\n    // Change parent.\n    parentWin.IntersectionObserver = IntersectionObserver2;\n    parentWin.IntersectionObserverEntry = IntersectionObserverEntry2;\n    expect(win.IntersectionObserver).to.equal(IntersectionObserver2);\n    expect(win.IntersectionObserverEntry).to.equal(IntersectionObserverEntry2);\n  });","file":"unit/polyfills/test-intersection-observer.js","skipped":false,"dir":"test"},{"name":"should install IntersectionObserverStub when native does not support document root","suites":[],"updatePoint":{"line":206,"column":88,"index":6810},"line":206,"code":"  it('should install IntersectionObserverStub when native does not support document root', () => {\n    const {\n      win\n    } = env;\n    win.IntersectionObserver = function (callback, opts) {\n      if (opts && opts.root && opts.root.nodeType !== 1) {\n        throw new TypeError('Root must be an Element');\n      }\n    };\n    const parentWin = {\n      IntersectionObserver: IntersectionObserver1,\n      IntersectionObserverEntry: IntersectionObserverEntry1\n    };\n    installForChildWin(parentWin, win);\n    expect(win.IntersectionObserver).to.equal(IntersectionObserver1);\n    expect(win.IntersectionObserverEntry).to.equal(IntersectionObserverEntry1);\n\n    // Change parent.\n    parentWin.IntersectionObserver = IntersectionObserver2;\n    parentWin.IntersectionObserverEntry = IntersectionObserverEntry2;\n    expect(win.IntersectionObserver).to.equal(IntersectionObserver2);\n    expect(win.IntersectionObserverEntry).to.equal(IntersectionObserverEntry2);\n  });","file":"unit/polyfills/test-intersection-observer.js","skipped":false,"dir":"test"},{"name":"should keep native when available","suites":[],"updatePoint":{"line":229,"column":39,"index":7725},"line":229,"code":"  it('should keep native when available', () => {\n    const {\n      win\n    } = env;\n    const native = function () {};\n    const nativeEntry = function () {};\n    win.IntersectionObserver = native;\n    win.IntersectionObserverEntry = nativeEntry;\n    const parentWin = {\n      IntersectionObserver: IntersectionObserver1,\n      IntersectionObserverEntry: IntersectionObserverEntry1\n    };\n    installForChildWin(parentWin, win);\n    expect(win.IntersectionObserver).to.equal(native);\n    expect(win.IntersectionObserverEntry).to.equal(nativeEntry);\n  });","file":"unit/polyfills/test-intersection-observer.js","skipped":false,"dir":"test"},{"name":"should reset stub before running the installer","suites":[],"updatePoint":{"line":257,"column":52,"index":8667},"line":257,"code":"  it('should reset stub before running the installer', () => {\n    const {\n      win\n    } = env;\n    delete win.IntersectionObserver;\n    install(win);\n    expect(win.IntersectionObserver).to.equal(IntersectionObserverStub);\n    upgradePolyfill(win, function () {\n      expect(win.IntersectionObserver).to.not.be.ok;\n      expect(win.IntersectionObserverEntry).to.not.be.ok;\n    });\n  });","file":"unit/polyfills/test-intersection-observer.js","skipped":false,"dir":"test"},{"name":"should upgrade all stubs","suites":[],"updatePoint":{"line":269,"column":30,"index":9035},"line":269,"code":"  it('should upgrade all stubs', async () => {\n    const {\n      win\n    } = env;\n    delete win.IntersectionObserver;\n    install(win);\n    const callback = function () {};\n    const element1 = win.document.createElement('div');\n    const io1 = new win.IntersectionObserver(callback);\n    const io2 = new win.IntersectionObserver(callback);\n    expect(io1).to.be.instanceOf(IntersectionObserverStub);\n    expect(io2).to.be.instanceOf(IntersectionObserverStub);\n    io1.observe(element1);\n    io2.observe(element1);\n    expect(NativeIntersectionObserver.prototype.observe).to.not.be.called;\n    upgradePolyfill(win, function () {\n      win.IntersectionObserver = NativeIntersectionObserver;\n      win.IntersectionObserverEntry = NativeIntersectionObserverEntry;\n    });\n    await nextMicroTask();\n    expect(NativeIntersectionObserver.prototype.observe).to.be.calledTwice;\n    expect(NativeIntersectionObserver.prototype.observe).to.be.calledWith(element1);\n    expect(NativeIntersectionObserver.prototype.disconnect).to.not.be.called;\n    io1.disconnect();\n    io2.disconnect();\n    expect(NativeIntersectionObserver.prototype.disconnect).to.be.calledTwice;\n  });","file":"unit/polyfills/test-intersection-observer.js","skipped":false,"dir":"test"},{"name":"should auto-upgrade any stub post upgrade","suites":[],"updatePoint":{"line":296,"column":47,"index":10217},"line":296,"code":"  it('should auto-upgrade any stub post upgrade', async () => {\n    const {\n      win\n    } = env;\n    delete win.IntersectionObserver;\n    install(win);\n    expect(win.IntersectionObserver).to.equal(IntersectionObserverStub);\n    upgradePolyfill(win, function () {\n      win.IntersectionObserver = NativeIntersectionObserver;\n      win.IntersectionObserverEntry = NativeIntersectionObserverEntry;\n    });\n    const callback = function () {};\n    const element1 = win.document.createElement('div');\n    const io = new IntersectionObserverStub(callback);\n    await nextMicroTask();\n    io.observe(element1);\n    expect(NativeIntersectionObserver.prototype.observe).to.be.calledOnce;\n    expect(NativeIntersectionObserver.prototype.observe).to.be.calledWith(element1);\n  });","file":"unit/polyfills/test-intersection-observer.js","skipped":false,"dir":"test"},{"name":"should choose best InOb possible before and after upgrade, as well as upgrade rootdoc stubs.","suites":[],"updatePoint":{"line":315,"column":98,"index":11041},"line":315,"code":"  it('should choose best InOb possible before and after upgrade, as well as upgrade rootdoc stubs.', async () => {\n    const {\n      win\n    } = env;\n    function NativeInOb(_ioCallback, opts) {\n      if (opts && opts.root && opts.root.nodeType === 9) {\n        throw new Error('May not have root:document');\n      }\n    }\n    win.IntersectionObserver = NativeInOb;\n    const docRoot = {\n      root: {\n        nodeType: 9\n      }\n    };\n    install(win);\n    expect(new win.IntersectionObserver(() => {})).instanceOf(NativeInOb);\n    expect(new win.IntersectionObserver(() => {}, docRoot)).instanceOf(IntersectionObserverStub);\n    upgradePolyfill(win, function () {\n      win.IntersectionObserver = NativeIntersectionObserver; // Native is the wrong name, its really Polyfilled.\n      win.IntersectionObserverEntry = NativeIntersectionObserverEntry;\n    });\n    const el = win.document.createElement('div');\n    const io = new IntersectionObserverStub(() => {}, docRoot);\n    io.observe(el);\n    await nextMicroTask();\n    expect(NativeIntersectionObserver.prototype.observe).to.be.calledOnce;\n    expect(NativeIntersectionObserver.prototype.observe).to.be.calledWith(el);\n    expect(new win.IntersectionObserver(() => {})).instanceOf(NativeInOb);\n  });","file":"unit/polyfills/test-intersection-observer.js","skipped":false,"dir":"test"},{"name":"should run installer even when native is available","suites":[],"updatePoint":{"line":345,"column":56,"index":12254},"line":345,"code":"  it('should run installer even when native is available', () => {\n    const {\n      win\n    } = env;\n    win.IntersectionObserver = NativeIntersectionObserver;\n    win.IntersectionObserverEntry = NativeIntersectionObserverEntry;\n    installStub(win);\n    const upgradeCall = env.sandbox.spy();\n    upgradePolyfill(win, function () {\n      upgradeCall();\n    });\n    expect(upgradeCall).to.be.calledOnce;\n  });","file":"unit/polyfills/test-intersection-observer.js","skipped":false,"dir":"test"},{"name":"should allow Document root","suites":["constructor"],"updatePoint":{"line":371,"column":34,"index":12979},"line":371,"code":"    it('should allow Document root', () => {\n      const io = new IntersectionObserverStub(callback, {\n        root: win.document\n      });\n      expect(io.root).to.eql(win.document);\n      expect(io.rootMargin).to.equal('0px 0px 0px 0px');\n      expect(io.thresholds).to.deep.equal([0]);\n    });","file":"unit/polyfills/test-intersection-observer.js","skipped":false,"dir":"test"},{"name":"should allow default options","suites":["constructor"],"updatePoint":{"line":379,"column":36,"index":13278},"line":379,"code":"    it('should allow default options', () => {\n      const io = new IntersectionObserverStub(callback);\n      expect(io.root).to.be.null;\n      expect(io.rootMargin).to.equal('0px 0px 0px 0px');\n      expect(io.thresholds).to.deep.equal([0]);\n    });","file":"unit/polyfills/test-intersection-observer.js","skipped":false,"dir":"test"},{"name":"should allow null root","suites":["constructor"],"updatePoint":{"line":385,"column":30,"index":13523},"line":385,"code":"    it('should allow null root', () => {\n      const io = new IntersectionObserverStub(callback, {\n        root: null\n      });\n      expect(io.root).to.be.null;\n      expect(io.rootMargin).to.equal('0px 0px 0px 0px');\n      expect(io.thresholds).to.deep.equal([0]);\n    });","file":"unit/polyfills/test-intersection-observer.js","skipped":false,"dir":"test"},{"name":"should allow element root","suites":["constructor"],"updatePoint":{"line":393,"column":33,"index":13801},"line":393,"code":"    it('should allow element root', () => {\n      const element = win.document.createElement('div');\n      const io = new IntersectionObserverStub(callback, {\n        root: element\n      });\n      expect(io.root).to.equal(element);\n    });","file":"unit/polyfills/test-intersection-observer.js","skipped":false,"dir":"test"},{"name":"should override rootMargin","suites":["constructor"],"updatePoint":{"line":400,"column":34,"index":14042},"line":400,"code":"    it('should override rootMargin', () => {\n      const io = new IntersectionObserverStub(callback, {\n        rootMargin: '10px'\n      });\n      expect(io.rootMargin).to.equal('10px');\n    });","file":"unit/polyfills/test-intersection-observer.js","skipped":false,"dir":"test"},{"name":"should override threshold as number","suites":["constructor"],"updatePoint":{"line":406,"column":43,"index":14245},"line":406,"code":"    it('should override threshold as number', () => {\n      const io = new IntersectionObserverStub(callback, {\n        threshold: 0.1\n      });\n      expect(io.thresholds).to.deep.equal([0.1]);\n    });","file":"unit/polyfills/test-intersection-observer.js","skipped":false,"dir":"test"},{"name":"should override threshold as array","suites":["constructor"],"updatePoint":{"line":412,"column":42,"index":14447},"line":412,"code":"    it('should override threshold as array', () => {\n      const io = new IntersectionObserverStub(callback, {\n        threshold: [0.1, 0.2]\n      });\n      expect(io.thresholds).to.deep.equal([0.1, 0.2]);\n    });","file":"unit/polyfills/test-intersection-observer.js","skipped":false,"dir":"test"},{"name":"should always be empty","suites":["takeRecords"],"updatePoint":{"line":420,"column":30,"index":14689},"line":420,"code":"    it('should always be empty', () => {\n      const io = new IntersectionObserverStub(callback);\n      expect(io.takeRecords()).to.deep.equal([]);\n    });","file":"unit/polyfills/test-intersection-observer.js","skipped":false,"dir":"test"},{"name":"should queue up elements when observed, but only once","suites":["observe/unobserve/disconnect"],"updatePoint":{"line":426,"column":61,"index":14933},"line":426,"code":"    it('should queue up elements when observed, but only once', () => {\n      const io = new IntersectionObserverStub(callback);\n      io.observe(element1);\n      expect(io.elements_).to.deep.equal([element1]);\n      io.observe(element1);\n      expect(io.elements_).to.deep.equal([element1]);\n      io.observe(element2);\n      expect(io.elements_).to.deep.equal([element1, element2]);\n    });","file":"unit/polyfills/test-intersection-observer.js","skipped":false,"dir":"test"},{"name":"should dequeue elements when observed","suites":["observe/unobserve/disconnect"],"updatePoint":{"line":435,"column":45,"index":15310},"line":435,"code":"    it('should dequeue elements when observed', () => {\n      const io = new IntersectionObserverStub(callback);\n      io.observe(element1);\n      io.observe(element2);\n      expect(io.elements_).to.deep.equal([element1, element2]);\n      io.unobserve(element1);\n      expect(io.elements_).to.deep.equal([element2]);\n      io.unobserve(element2);\n      expect(io.elements_).to.deep.equal([]);\n      io.unobserve(element1);\n      io.unobserve(element2);\n      expect(io.elements_).to.deep.equal([]);\n    });","file":"unit/polyfills/test-intersection-observer.js","skipped":false,"dir":"test"},{"name":"should dequeue elements when disconnected","suites":["observe/unobserve/disconnect"],"updatePoint":{"line":448,"column":49,"index":15821},"line":448,"code":"    it('should dequeue elements when disconnected', () => {\n      const io = new IntersectionObserverStub(callback);\n      io.observe(element1);\n      io.observe(element2);\n      expect(io.elements_).to.deep.equal([element1, element2]);\n      io.disconnect();\n      expect(io.elements_).to.deep.equal([]);\n      io.disconnect();\n      expect(io.elements_).to.deep.equal([]);\n    });","file":"unit/polyfills/test-intersection-observer.js","skipped":false,"dir":"test"},{"name":"should forward callback and default options","suites":["upgrade"],"updatePoint":{"line":469,"column":51,"index":16600},"line":469,"code":"    it('should forward callback and default options', () => {\n      const io = new IntersectionObserverStub(callback);\n      const native = upgrade(io);\n      expect(native.callback).to.equal(callback);\n      expect(native.options).to.deep.equal({\n        root: null,\n        rootMargin: '0px 0px 0px 0px'\n      });\n    });","file":"unit/polyfills/test-intersection-observer.js","skipped":false,"dir":"test"},{"name":"should forward custom options","suites":["upgrade"],"updatePoint":{"line":478,"column":37,"index":16910},"line":478,"code":"    it('should forward custom options', () => {\n      const io = new IntersectionObserverStub(callback, {\n        root: element1,\n        rootMargin: '10px',\n        threshold: 0.1\n      });\n      const native = upgrade(io);\n      expect(native.options).to.deep.equal({\n        root: element1,\n        rootMargin: '10px',\n        threshold: 0.1\n      });\n    });","file":"unit/polyfills/test-intersection-observer.js","skipped":false,"dir":"test"},{"name":"should delegate getters to the native","suites":["upgrade"],"updatePoint":{"line":491,"column":45,"index":17281},"line":491,"code":"    it('should delegate getters to the native', () => {\n      const io = new IntersectionObserverStub(callback);\n      upgrade(io);\n      expect(io.root).to.equal('native.root');\n      expect(io.rootMargin).to.equal('native.rootMargin');\n      expect(io.thresholds).to.equal('native.thresholds');\n      expect(io.takeRecords()).to.equal('native.takeRecords');\n    });","file":"unit/polyfills/test-intersection-observer.js","skipped":false,"dir":"test"},{"name":"should not re-observe if nothing is currently observed","suites":["upgrade"],"updatePoint":{"line":499,"column":62,"index":17666},"line":499,"code":"    it('should not re-observe if nothing is currently observed', () => {\n      const io = new IntersectionObserverStub(callback);\n      io.observe(element1);\n      io.unobserve(element1);\n      const native = upgrade(io);\n      expect(native.observe).to.not.be.called;\n      expect(io.elements_.length).to.equal(0);\n    });","file":"unit/polyfills/test-intersection-observer.js","skipped":false,"dir":"test"},{"name":"should re-observe previously observed elements","suites":["upgrade"],"updatePoint":{"line":507,"column":54,"index":17982},"line":507,"code":"    it('should re-observe previously observed elements', () => {\n      const io = new IntersectionObserverStub(callback);\n      io.observe(element1);\n      io.observe(element2);\n      const native = upgrade(io);\n      expect(native.observe).to.be.calledTwice;\n      expect(native.observe).to.be.calledWith(element1);\n      expect(native.observe).to.be.calledWith(element2);\n      expect(io.elements_.length).to.equal(0);\n    });","file":"unit/polyfills/test-intersection-observer.js","skipped":false,"dir":"test"},{"name":"should observe new elements only on native","suites":["upgrade"],"updatePoint":{"line":517,"column":50,"index":18407},"line":517,"code":"    it('should observe new elements only on native', () => {\n      const io = new IntersectionObserverStub(callback);\n      const native = upgrade(io);\n      io.observe(element1);\n      expect(native.observe).to.be.calledOnce.calledWith(element1);\n    });","file":"unit/polyfills/test-intersection-observer.js","skipped":false,"dir":"test"},{"name":"should unobserve new elements only on native","suites":["upgrade"],"updatePoint":{"line":523,"column":52,"index":18665},"line":523,"code":"    it('should unobserve new elements only on native', () => {\n      const io = new IntersectionObserverStub(callback);\n      const native = upgrade(io);\n      io.unobserve(element1);\n      expect(native.unobserve).to.be.calledOnce.calledWith(element1);\n    });","file":"unit/polyfills/test-intersection-observer.js","skipped":false,"dir":"test"},{"name":"should disconnect on native","suites":["upgrade"],"updatePoint":{"line":529,"column":35,"index":18910},"line":529,"code":"    it('should disconnect on native', () => {\n      const io = new IntersectionObserverStub(callback);\n      const native = upgrade(io);\n      io.disconnect();\n      expect(native.disconnect).to.be.calledOnce;\n    });","file":"unit/polyfills/test-intersection-observer.js","skipped":false,"dir":"test"},{"name":"returns 1 for positive x","suites":[],"updatePoint":{"line":3,"column":30,"index":121},"line":3,"code":"  it('returns 1 for positive x', () => {\n    expect(sign(1)).to.equal(1);\n    expect(sign(10)).to.equal(1);\n    expect(sign(100)).to.equal(1);\n    expect(sign(Infinity)).to.equal(1);\n  });","file":"unit/polyfills/test-math-sign.js","skipped":false,"dir":"test"},{"name":"returns -1 for negative x","suites":[],"updatePoint":{"line":9,"column":31,"index":311},"line":9,"code":"  it('returns -1 for negative x', () => {\n    expect(sign(-1)).to.equal(-1);\n    expect(sign(-10)).to.equal(-1);\n    expect(sign(-100)).to.equal(-1);\n    expect(sign(-Infinity)).to.equal(-1);\n  });","file":"unit/polyfills/test-math-sign.js","skipped":false,"dir":"test"},{"name":"returns 0 for 0","suites":[],"updatePoint":{"line":15,"column":21,"index":499},"line":15,"code":"  it('returns 0 for 0', () => {\n    expect(sign(0)).to.deep.equal(0);\n  });","file":"unit/polyfills/test-math-sign.js","skipped":false,"dir":"test"},{"name":"returns -0 for -0","suites":[],"updatePoint":{"line":18,"column":23,"index":577},"line":18,"code":"  it('returns -0 for -0', () => {\n    expect(sign(-0)).to.deep.equal(-0);\n  });","file":"unit/polyfills/test-math-sign.js","skipped":false,"dir":"test"},{"name":"returns NaN for NaN","suites":[],"updatePoint":{"line":21,"column":25,"index":659},"line":21,"code":"  it('returns NaN for NaN', () => {\n    expect(sign(NaN)).to.deep.equal(NaN);\n  });","file":"unit/polyfills/test-math-sign.js","skipped":false,"dir":"test"},{"name":"returns NaN for non-numbers","suites":[],"updatePoint":{"line":24,"column":33,"index":751},"line":24,"code":"  it('returns NaN for non-numbers', () => {\n    expect(sign({})).to.deep.equal(NaN);\n    expect(sign(function () {})).to.deep.equal(NaN);\n    expect(sign('test1')).to.deep.equal(NaN);\n    expect(sign('1test')).to.deep.equal(NaN);\n  });","file":"unit/polyfills/test-math-sign.js","skipped":false,"dir":"test"},{"name":"should throw an error if target is null or undefined","suites":[],"updatePoint":{"line":3,"column":58,"index":159},"line":3,"code":"  it('should throw an error if target is null or undefined', () => {\n    expect(() => assign(null, {\n      a: 1\n    })).to.throw(/Cannot convert undefined or null to object/);\n    expect(() => assign(undefined, {\n      a: 1\n    })).to.throw(/Cannot convert undefined or null to object/);\n  });","file":"unit/polyfills/test-object-assign.js","skipped":false,"dir":"test"},{"name":"should ignore null or undefined sources","suites":[],"updatePoint":{"line":11,"column":45,"index":440},"line":11,"code":"  it('should ignore null or undefined sources', () => {\n    expect(assign({}, null, undefined)).to.deep.equal({});\n    expect(assign({\n      a: 1\n    }, null, undefined)).to.deep.equal({\n      a: 1\n    });\n  });","file":"unit/polyfills/test-object-assign.js","skipped":false,"dir":"test"},{"name":"should copy and override keys from source to target","suites":[],"updatePoint":{"line":19,"column":57,"index":664},"line":19,"code":"  it('should copy and override keys from source to target', () => {\n    expect(assign({\n      a: 1\n    }, {\n      a: 2,\n      b: 3\n    })).to.deep.equal({\n      a: 2,\n      b: 3\n    });\n    expect(assign({\n      a: 1\n    }, {\n      b: 3\n    })).to.deep.equal({\n      a: 1,\n      b: 3\n    });\n    expect(assign({\n      a: 1\n    }, {\n      b: 3\n    }, {\n      a: 2\n    }, {\n      a: 4\n    })).to.deep.equal({\n      a: 4,\n      b: 3\n    });\n    const target = {\n      a: 1,\n      d: 3\n    };\n    const source = {\n      a: 2,\n      c: 5\n    };\n    assign(target, source);\n    expect(target).to.deep.equal({\n      a: 2,\n      c: 5,\n      d: 3\n    });\n    expect(source).to.deep.equal({\n      a: 2,\n      c: 5\n    });\n  });","file":"unit/polyfills/test-object-assign.js","skipped":false,"dir":"test"},{"name":"should disallow null and undefined","suites":[],"updatePoint":{"line":3,"column":40,"index":141},"line":3,"code":"  it('should disallow null and undefined', () => {\n    expect(() => values(null)).to.throw();\n    expect(() => values(undefined)).to.throw();\n  });","file":"unit/polyfills/test-object-values.js","skipped":false,"dir":"test"},{"name":"should allow primitives","suites":[],"updatePoint":{"line":7,"column":29,"index":278},"line":7,"code":"  it('should allow primitives', () => {\n    expect(values(1)).to.deep.equal([]);\n    expect(values('A')).to.deep.equal(['A']);\n    expect(values(true)).to.deep.equal([]);\n    expect(values(false)).to.deep.equal([]);\n  });","file":"unit/polyfills/test-object-values.js","skipped":false,"dir":"test"},{"name":"should return values of objects","suites":[],"updatePoint":{"line":13,"column":37,"index":508},"line":13,"code":"  it('should return values of objects', () => {\n    expect(values({\n      a: 1,\n      b: 2,\n      c: 1\n    })).to.deep.equal([1, 2, 1]);\n  });","file":"unit/polyfills/test-object-values.js","skipped":false,"dir":"test"},{"name":"should not load with native","suites":[],"updatePoint":{"line":15,"column":33,"index":509},"line":15,"code":"  it('should not load with native', () => {\n    const win = {\n      ResizeObserver: NativeResizeObserver,\n      ResizeObserverEntry: NativeResizeObserverEntry\n    };\n    expect(shouldLoadPolyfill(win)).to.be.false;\n  });","file":"unit/polyfills/test-resize-observer.js","skipped":false,"dir":"test"},{"name":"should load when no native","suites":[],"updatePoint":{"line":22,"column":32,"index":729},"line":22,"code":"  it('should load when no native', () => {\n    const win = {};\n    expect(shouldLoadPolyfill(win)).to.be.true;\n  });","file":"unit/polyfills/test-resize-observer.js","skipped":false,"dir":"test"},{"name":"should load with the stub","suites":[],"updatePoint":{"line":26,"column":31,"index":845},"line":26,"code":"  it('should load with the stub', () => {\n    const win = {};\n    installStub(win);\n    expect(shouldLoadPolyfill(win)).to.be.true;\n  });","file":"unit/polyfills/test-resize-observer.js","skipped":false,"dir":"test"},{"name":"should install ResizeObserverStub when no native","suites":[],"updatePoint":{"line":33,"column":54,"index":1052},"line":33,"code":"  it('should install ResizeObserverStub when no native', () => {\n    const {\n      win\n    } = env;\n    delete win.ResizeObserver;\n    install(win);\n    expect(win.ResizeObserver).to.equal(ResizeObserverStub);\n  });","file":"unit/polyfills/test-resize-observer.js","skipped":false,"dir":"test"},{"name":"should keep native when available","suites":[],"updatePoint":{"line":41,"column":39,"index":1253},"line":41,"code":"  it('should keep native when available', () => {\n    const {\n      win\n    } = env;\n    win.ResizeObserver = NativeResizeObserver;\n    win.ResizeObserverEntry = NativeResizeObserverEntry;\n    install(win);\n    expect(win.ResizeObserver).to.equal(NativeResizeObserver);\n    expect(win.ResizeObserverEntry).to.equal(NativeResizeObserverEntry);\n  });","file":"unit/polyfills/test-resize-observer.js","skipped":false,"dir":"test"},{"name":"should install ResizeObserverStub when no native","suites":[],"updatePoint":{"line":57,"column":54,"index":1852},"line":57,"code":"  it('should install ResizeObserverStub when no native', () => {\n    const {\n      win\n    } = env;\n    delete win.ResizeObserver;\n    const parentWin = {\n      ResizeObserver: ResizeObserver1,\n      ResizeObserverEntry: ResizeObserverEntry1\n    };\n    installForChildWin(parentWin, win);\n    expect(win.ResizeObserver).to.equal(ResizeObserver1);\n    expect(win.ResizeObserverEntry).to.equal(ResizeObserverEntry1);\n\n    // Change parent.\n    parentWin.ResizeObserver = ResizeObserver2;\n    parentWin.ResizeObserverEntry = ResizeObserverEntry2;\n    expect(win.ResizeObserver).to.equal(ResizeObserver2);\n    expect(win.ResizeObserverEntry).to.equal(ResizeObserverEntry2);\n  });","file":"unit/polyfills/test-resize-observer.js","skipped":false,"dir":"test"},{"name":"should keep native when available","suites":[],"updatePoint":{"line":76,"column":39,"index":2513},"line":76,"code":"  it('should keep native when available', () => {\n    const {\n      win\n    } = env;\n    win.ResizeObserver = NativeResizeObserver;\n    win.ResizeObserverEntry = NativeResizeObserverEntry;\n    const parentWin = {\n      ResizeObserver: ResizeObserver1,\n      ResizeObserverEntry: ResizeObserverEntry1\n    };\n    installForChildWin(parentWin, win);\n    expect(win.ResizeObserver).to.equal(NativeResizeObserver);\n    expect(win.ResizeObserverEntry).to.equal(NativeResizeObserverEntry);\n  });","file":"unit/polyfills/test-resize-observer.js","skipped":false,"dir":"test"},{"name":"should reset stub before running the installer","suites":[],"updatePoint":{"line":102,"column":52,"index":3376},"line":102,"code":"  it('should reset stub before running the installer', () => {\n    const {\n      win\n    } = env;\n    delete win.ResizeObserver;\n    install(win);\n    expect(win.ResizeObserver).to.equal(ResizeObserverStub);\n    upgradePolyfill(win, function () {\n      expect(win.ResizeObserver).to.not.be.ok;\n      expect(win.ResizeObserverEntry).to.not.be.ok;\n    });\n  });","file":"unit/polyfills/test-resize-observer.js","skipped":false,"dir":"test"},{"name":"should upgrade all stubs","suites":[],"updatePoint":{"line":114,"column":30,"index":3714},"line":114,"code":"  it('should upgrade all stubs', async () => {\n    const {\n      win\n    } = env;\n    delete win.ResizeObserver;\n    install(win);\n    const callback = function () {};\n    const element1 = win.document.createElement('div');\n    const ro1 = new win.ResizeObserver(callback);\n    const ro2 = new win.ResizeObserver(callback);\n    expect(ro1).to.be.instanceOf(ResizeObserverStub);\n    expect(ro2).to.be.instanceOf(ResizeObserverStub);\n    ro1.observe(element1);\n    ro2.observe(element1);\n    expect(NativeResizeObserver.prototype.observe).to.not.be.called;\n    upgradePolyfill(win, function () {\n      win.ResizeObserver = NativeResizeObserver;\n      win.ResizeObserverEntry = NativeResizeObserverEntry;\n    });\n    await nextMicroTask();\n    expect(NativeResizeObserver.prototype.observe).to.be.calledTwice;\n    expect(NativeResizeObserver.prototype.observe).to.be.calledWith(element1);\n    expect(NativeResizeObserver.prototype.disconnect).to.not.be.called;\n    ro1.disconnect();\n    ro2.disconnect();\n    expect(NativeResizeObserver.prototype.disconnect).to.be.calledTwice;\n  });","file":"unit/polyfills/test-resize-observer.js","skipped":false,"dir":"test"},{"name":"should auto-upgrade any stub post upgrade","suites":[],"updatePoint":{"line":141,"column":47,"index":4812},"line":141,"code":"  it('should auto-upgrade any stub post upgrade', async () => {\n    const {\n      win\n    } = env;\n    delete win.ResizeObserver;\n    install(win);\n    expect(win.ResizeObserver).to.equal(ResizeObserverStub);\n    upgradePolyfill(win, function () {\n      win.ResizeObserver = NativeResizeObserver;\n      win.ResizeObserverEntry = NativeResizeObserverEntry;\n    });\n    const callback = function () {};\n    const element1 = win.document.createElement('div');\n    const ro = new ResizeObserverStub(callback);\n    await nextMicroTask();\n    ro.observe(element1);\n    expect(NativeResizeObserver.prototype.observe).to.be.calledOnce;\n    expect(NativeResizeObserver.prototype.observe).to.be.calledWith(element1);\n  });","file":"unit/polyfills/test-resize-observer.js","skipped":false,"dir":"test"},{"name":"should run installer even when native is available","suites":[],"updatePoint":{"line":160,"column":56,"index":5534},"line":160,"code":"  it('should run installer even when native is available', () => {\n    const {\n      win\n    } = env;\n    win.ResizeObserver = NativeResizeObserver;\n    win.ResizeObserverEntry = NativeResizeObserverEntry;\n    installStub(win);\n    const upgradeCall = env.sandbox.spy();\n    upgradePolyfill(win, function () {\n      upgradeCall();\n    });\n    expect(upgradeCall).to.be.calledOnce;\n  });","file":"unit/polyfills/test-resize-observer.js","skipped":false,"dir":"test"},{"name":"should allow default constructor","suites":[],"updatePoint":{"line":185,"column":38,"index":6199},"line":185,"code":"  it('should allow default constructor', () => {\n    expect(() => new ResizeObserverStub(callback)).to.not.throw();\n  });","file":"unit/polyfills/test-resize-observer.js","skipped":false,"dir":"test"},{"name":"should queue up elements when observed, but only once","suites":["observe/unobserve/disconnect"],"updatePoint":{"line":189,"column":61,"index":6395},"line":189,"code":"    it('should queue up elements when observed, but only once', () => {\n      const ro = new ResizeObserverStub(callback);\n      ro.observe(element1);\n      expect(ro.elements_).to.deep.equal([element1]);\n      ro.observe(element1);\n      expect(ro.elements_).to.deep.equal([element1]);\n      ro.observe(element2);\n      expect(ro.elements_).to.deep.equal([element1, element2]);\n    });","file":"unit/polyfills/test-resize-observer.js","skipped":false,"dir":"test"},{"name":"should dequeue elements when observed","suites":["observe/unobserve/disconnect"],"updatePoint":{"line":198,"column":45,"index":6766},"line":198,"code":"    it('should dequeue elements when observed', () => {\n      const ro = new ResizeObserverStub(callback);\n      ro.observe(element1);\n      ro.observe(element2);\n      expect(ro.elements_).to.deep.equal([element1, element2]);\n      ro.unobserve(element1);\n      expect(ro.elements_).to.deep.equal([element2]);\n      ro.unobserve(element2);\n      expect(ro.elements_).to.deep.equal([]);\n      ro.unobserve(element1);\n      ro.unobserve(element2);\n      expect(ro.elements_).to.deep.equal([]);\n    });","file":"unit/polyfills/test-resize-observer.js","skipped":false,"dir":"test"},{"name":"should dequeue elements when disconnected","suites":["observe/unobserve/disconnect"],"updatePoint":{"line":211,"column":49,"index":7271},"line":211,"code":"    it('should dequeue elements when disconnected', () => {\n      const ro = new ResizeObserverStub(callback);\n      ro.observe(element1);\n      ro.observe(element2);\n      expect(ro.elements_).to.deep.equal([element1, element2]);\n      ro.disconnect();\n      expect(ro.elements_).to.deep.equal([]);\n      ro.disconnect();\n      expect(ro.elements_).to.deep.equal([]);\n    });","file":"unit/polyfills/test-resize-observer.js","skipped":false,"dir":"test"},{"name":"should forward callback","suites":["upgrade"],"updatePoint":{"line":232,"column":31,"index":8000},"line":232,"code":"    it('should forward callback', () => {\n      const ro = new ResizeObserverStub(callback);\n      const native = upgrade(ro);\n      expect(native.callback).to.equal(callback);\n    });","file":"unit/polyfills/test-resize-observer.js","skipped":false,"dir":"test"},{"name":"should not re-observe if nothing is currently observed","suites":["upgrade"],"updatePoint":{"line":237,"column":62,"index":8216},"line":237,"code":"    it('should not re-observe if nothing is currently observed', () => {\n      const ro = new ResizeObserverStub(callback);\n      ro.observe(element1);\n      ro.unobserve(element1);\n      const native = upgrade(ro);\n      expect(native.observe).to.not.be.called;\n      expect(ro.elements_.length).to.equal(0);\n    });","file":"unit/polyfills/test-resize-observer.js","skipped":false,"dir":"test"},{"name":"should re-observe previously observed elements","suites":["upgrade"],"updatePoint":{"line":245,"column":54,"index":8526},"line":245,"code":"    it('should re-observe previously observed elements', () => {\n      const ro = new ResizeObserverStub(callback);\n      ro.observe(element1);\n      ro.observe(element2);\n      const native = upgrade(ro);\n      expect(native.observe).to.be.calledTwice;\n      expect(native.observe).to.be.calledWith(element1);\n      expect(native.observe).to.be.calledWith(element2);\n      expect(ro.elements_.length).to.equal(0);\n    });","file":"unit/polyfills/test-resize-observer.js","skipped":false,"dir":"test"},{"name":"should observe new elements only on native","suites":["upgrade"],"updatePoint":{"line":255,"column":50,"index":8945},"line":255,"code":"    it('should observe new elements only on native', () => {\n      const ro = new ResizeObserverStub(callback);\n      const native = upgrade(ro);\n      ro.observe(element1);\n      expect(native.observe).to.be.calledOnce.calledWith(element1);\n    });","file":"unit/polyfills/test-resize-observer.js","skipped":false,"dir":"test"},{"name":"should unobserve new elements only on native","suites":["upgrade"],"updatePoint":{"line":261,"column":52,"index":9197},"line":261,"code":"    it('should unobserve new elements only on native', () => {\n      const ro = new ResizeObserverStub(callback);\n      const native = upgrade(ro);\n      ro.unobserve(element1);\n      expect(native.unobserve).to.be.calledOnce.calledWith(element1);\n    });","file":"unit/polyfills/test-resize-observer.js","skipped":false,"dir":"test"},{"name":"should disconnect on native","suites":["upgrade"],"updatePoint":{"line":267,"column":35,"index":9436},"line":267,"code":"    it('should disconnect on native', () => {\n      const ro = new ResizeObserverStub(callback);\n      const native = upgrade(ro);\n      ro.disconnect();\n      expect(native.disconnect).to.be.calledOnce;\n    });","file":"unit/polyfills/test-resize-observer.js","skipped":false,"dir":"test"},{"name":"should render a sync renderer","suites":[],"updatePoint":{"line":12,"column":35,"index":374},"line":12,"code":"  it('should render a sync renderer', () => {\n    const render = env.sandbox.stub().callsFake(data => data.value);\n    const data = {\n      value: 'one'\n    };\n    const props = {\n      data,\n      render\n    };\n    const wrapper = mount( /*#__PURE__*/React.createElement(Component, props));\n    expect(wrapper.html()).to.equal('<div>one</div>');\n    expect(render).to.be.calledOnce.calledWith(data);\n\n    // Empty re-render with old data.\n    wrapper.setProps({\n      ...props,\n      inc: 1\n    });\n    expect(wrapper.html()).to.equal('<div>one</div>'); // no change.\n    expect(render).to.be.calledOnce; // no change.\n\n    // Re-render with new data.\n    wrapper.setProps({\n      ...props,\n      data: {\n        value: 'two'\n      }\n    });\n    expect(wrapper.html()).to.equal('<div>two</div>');\n    expect(render).to.be.calledTwice;\n  });","file":"unit/preact/component/test-renderer.js","skipped":false,"dir":"test"},{"name":"should render an async renderer","suites":[],"updatePoint":{"line":43,"column":37,"index":1218},"line":43,"code":"  it('should render an async renderer', () => {\n    let renderCallback;\n    const render = env.sandbox.stub().callsFake(data => ({\n      then(callback) {\n        renderCallback = () => callback(data.value);\n      }\n    }));\n    function resolve() {\n      renderCallback();\n      renderCallback = null;\n      wrapper.update();\n    }\n    const data = {\n      value: 'one'\n    };\n    const props = {\n      data,\n      render\n    };\n\n    // First render: start.\n    const wrapper = mount( /*#__PURE__*/React.createElement(Component, props));\n    expect(wrapper.html()).to.equal('<div></div>');\n    expect(render).to.be.calledOnce.calledWith(data);\n\n    // First render: complete.\n    resolve();\n    expect(wrapper.html()).to.equal('<div>one</div>');\n    expect(render).to.be.calledOnce; // no change.\n\n    // Empty re-render with old data.\n    wrapper.setProps({\n      ...props,\n      inc: 1\n    });\n    expect(wrapper.html()).to.equal('<div>one</div>'); // no change.\n    expect(render).to.be.calledOnce; // no change.\n\n    // Re-render: start.\n    wrapper.setProps({\n      ...props,\n      data: {\n        value: 'two'\n      }\n    });\n    expect(wrapper.html()).to.equal('<div>one</div>'); // no change.\n    expect(render).to.be.calledTwice;\n\n    // Re-render: end.\n    resolve();\n    expect(wrapper.html()).to.equal('<div>two</div>');\n    expect(render).to.be.calledTwice;\n  });","file":"unit/preact/component/test-renderer.js","skipped":false,"dir":"test"},{"name":"should supersede an async renderer","suites":[],"updatePoint":{"line":96,"column":40,"index":2598},"line":96,"code":"  it('should supersede an async renderer', () => {\n    const renderCallbacks = [];\n    const render = env.sandbox.stub().callsFake(data => ({\n      then(callback) {\n        renderCallbacks.push(() => callback(data.value));\n      }\n    }));\n    function resolve(renderCallback) {\n      renderCallback();\n      renderCallback = null;\n      wrapper.update();\n    }\n    const data = {\n      value: 'one'\n    };\n    const props = {\n      data,\n      render\n    };\n\n    // First render: start.\n    const wrapper = mount( /*#__PURE__*/React.createElement(Component, props));\n    expect(wrapper.html()).to.equal('<div></div>');\n    expect(render).to.be.calledOnce;\n\n    // Re-render: start.\n    wrapper.setProps({\n      ...props,\n      data: {\n        value: 'two'\n      }\n    });\n    expect(wrapper.html()).to.equal('<div></div>'); // no change.\n    expect(render).to.be.calledTwice;\n\n    // Re-render: end.\n    resolve(renderCallbacks[1]);\n    expect(wrapper.html()).to.equal('<div>two</div>');\n    expect(render).to.be.calledTwice;\n\n    // First render: end.\n    resolve(renderCallbacks[0]);\n    expect(wrapper.html()).to.equal('<div>two</div>');\n    expect(render).to.be.calledTwice; // no change.\n  });","file":"unit/preact/component/test-renderer.js","skipped":false,"dir":"test"},{"name":"testElementR1","suites":["R1"],"updatePoint":{"line":63,"column":21,"index":1979},"line":63,"code":"    it('testElementR1', () => {\n      testElementR1(PreactBaseElement);\n    });","file":"unit/preact/test-base-element-mapping.js","skipped":false,"dir":"test"},{"name":"by default prerenderAllowed is tied to the \"loadable\" flag","suites":["R1"],"updatePoint":{"line":66,"column":66,"index":2104},"line":66,"code":"    it('by default prerenderAllowed is tied to the \"loadable\" flag', () => {\n      Impl['loadable'] = false;\n      expect(Impl.prerenderAllowed()).to.be.true;\n      Impl['loadable'] = true;\n      expect(Impl.prerenderAllowed()).to.be.false;\n    });","file":"unit/preact/test-base-element-mapping.js","skipped":false,"dir":"test"},{"name":"by default previewAllowed is NOT tied to the \"loadable\" flag","suites":["R1"],"updatePoint":{"line":72,"column":68,"index":2355},"line":72,"code":"    it('by default previewAllowed is NOT tied to the \"loadable\" flag', () => {\n      Impl['loadable'] = false;\n      expect(Impl.previewAllowed()).to.be.false;\n      Impl['loadable'] = true;\n      expect(Impl.previewAllowed()).to.be.false;\n    });","file":"unit/preact/test-base-element-mapping.js","skipped":false,"dir":"test"},{"name":"should allow container for layoutSizeDefined","suites":["layout mapping"],"updatePoint":{"line":85,"column":52,"index":2772},"line":85,"code":"    it('should allow container for layoutSizeDefined', async () => {\n      Impl['layoutSizeDefined'] = true;\n      doc.body.appendChild(element);\n      await element.buildInternal();\n      const impl = await element.getImpl();\n      expect(impl.isLayoutSupported('fixed')).to.be.true;\n      expect(impl.isLayoutSupported('container')).to.be.true;\n    });","file":"unit/preact/test-base-element-mapping.js","skipped":false,"dir":"test"},{"name":"should render content inline","suites":["attribute mapping"],"updatePoint":{"line":157,"column":36,"index":4843},"line":157,"code":"    it('should render content inline', async () => {\n      expect(component).to.be.calledOnce;\n      expect(element.querySelector('#component')).to.be.ok;\n      expect(element.shadowRoot).to.not.be.ok;\n    });","file":"unit/preact/test-base-element-mapping.js","skipped":false,"dir":"test"},{"name":"should parse attributes on first render","suites":["attribute mapping"],"updatePoint":{"line":162,"column":47,"index":5064},"line":162,"code":"    it('should parse attributes on first render', async () => {\n      expect(component).to.be.calledOnce;\n      expect(lastProps).to.contain({\n        valueWithDef: 'DEFAULT',\n        propA: 'A',\n        minFontSize: 72,\n        aDate: DATE,\n        disabled: true,\n        boolDefTrue: true,\n        combined: 'A+B'\n      });\n      expect(lastProps.enabled).to.not.exist;\n      expect(lastProps.params.test).to.equal('helloworld');\n      expect(lastProps.params.testTwo).to.equal('confirm');\n      expect(lastProps).to.not.haveOwnProperty('prefix');\n    });","file":"unit/preact/test-base-element-mapping.js","skipped":false,"dir":"test"},{"name":"should mutate attributes","suites":["attribute mapping"],"updatePoint":{"line":178,"column":32,"index":5608},"line":178,"code":"    it('should mutate attributes', async () => {\n      element.setAttribute('prop-a', 'B');\n      element.setAttribute('min-font-size', '72.5');\n      element.setAttribute('a-date', '2018-01-01T08:00:01Z');\n      element.setAttribute('enabled', '');\n      element.removeAttribute('disabled');\n      element.setAttribute('bool-def-true', 'false');\n      element.setAttribute('part-b', 'C');\n      element.setAttribute('data-param-test', 'worldhello');\n      element.setAttribute('data-param-test-two', 'confirmAgain');\n      element.setAttribute('prefix', 'prefTwo');\n      await waitFor(() => component.callCount > 1, 'component re-rendered');\n      expect(component).to.be.calledTwice;\n      expect(lastProps).to.contain({\n        valueWithDef: 'DEFAULT',\n        propA: 'B',\n        minFontSize: 72.5,\n        aDate: DATE + 1000,\n        enabled: true,\n        boolDefTrue: false,\n        combined: 'A+C'\n      });\n      expect(lastProps.disabled).to.not.exist;\n      expect(lastProps.params.test).to.equal('worldhello');\n      expect(lastProps.params.testTwo).to.equal('confirmAgain');\n      expect(lastProps).to.not.haveOwnProperty('prefix');\n    });","file":"unit/preact/test-base-element-mapping.js","skipped":false,"dir":"test"},{"name":"should accept boolean string values","suites":["attribute mapping"],"updatePoint":{"line":205,"column":43,"index":6774},"line":205,"code":"    it('should accept boolean string values', async () => {\n      element.setAttribute('enabled', 'true');\n      element.setAttribute('bool-def-true', 'true');\n      await waitFor(() => component.callCount > 1, 'component re-rendered');\n      expect(component).to.be.calledTwice;\n      expect(lastProps).to.contain({\n        enabled: true,\n        boolDefTrue: true\n      });\n      element.setAttribute('enabled', 'false');\n      element.setAttribute('bool-def-true', 'false');\n      await waitFor(() => component.callCount > 2, 'component re-rendered');\n      expect(component).to.be.calledThrice;\n      expect(lastProps).to.contain({\n        enabled: false,\n        boolDefTrue: false\n      });\n    });","file":"unit/preact/test-base-element-mapping.js","skipped":false,"dir":"test"},{"name":"should ignore non-declared attributes","suites":["attribute mapping"],"updatePoint":{"line":223,"column":45,"index":7481},"line":223,"code":"    it('should ignore non-declared attributes', async () => {\n      // Perform ignored mutations.\n      await waitForMutation(element, () => {\n        element.removeAttribute('unknown');\n        element.setAttribute('unknown2', '2');\n        element.style.background = 'red';\n        element.classList.add('class1');\n      });\n\n      // Execute a handled mutation and check that execution happened only\n      // twice.\n      element.setAttribute('prop-a', 'B');\n      await waitFor(() => component.callCount > 1, 'component re-rendered');\n      expect(component).to.be.calledTwice;\n      expect(lastProps).to.have.property('propA', 'B');\n      expect(lastProps).to.not.have.property('unknown2');\n    });","file":"unit/preact/test-base-element-mapping.js","skipped":false,"dir":"test"},{"name":"should parse attributes on first render","suites":["media-query attribute mapping"],"updatePoint":{"line":274,"column":47,"index":9044},"line":274,"code":"    it('should parse attributes on first render', async () => {\n      expect(component).to.be.calledOnce;\n      expect(lastProps.propA).to.equal('A');\n      expect(lastProps.minFontSize).to.equal(72);\n      // No attribute.\n      expect(lastProps.propB).to.be.undefined;\n    });","file":"unit/preact/test-base-element-mapping.js","skipped":false,"dir":"test"},{"name":"should rerender on media change","suites":["media-query attribute mapping"],"updatePoint":{"line":281,"column":39,"index":9315},"line":281,"code":"    it('should rerender on media change', async () => {\n      env.iframe.style.width = '310px';\n      await waitFor(() => component.callCount > 1, 'component re-rendered');\n      expect(component).to.be.calledTwice;\n      expect(lastProps.propA).to.equal('B');\n      expect(lastProps.minFontSize).to.equal(84);\n      // No attribute.\n      expect(lastProps.propB).to.be.undefined;\n    });","file":"unit/preact/test-base-element-mapping.js","skipped":false,"dir":"test"},{"name":"include staticProps","suites":["props with staticProps"],"updatePoint":{"line":310,"column":27,"index":10228},"line":310,"code":"    it('include staticProps', () => {\n      expect(lastProps).to.include(Impl['staticProps']);\n    });","file":"unit/preact/test-base-element-mapping.js","skipped":false,"dir":"test"},{"name":"include init() props","suites":["props with staticProps"],"updatePoint":{"line":313,"column":28,"index":10332},"line":313,"code":"    it('include init() props', () => {\n      expect(lastProps).to.include(initProps);\n    });","file":"unit/preact/test-base-element-mapping.js","skipped":false,"dir":"test"},{"name":"should pick-up template attribute mutations","suites":["usesTemplate"],"updatePoint":{"line":328,"column":51,"index":10833},"line":328,"code":"    it('should pick-up template attribute mutations', async () => {\n      element.setAttribute('template', 't1');\n      await waitFor(() => component.callCount > 1, 'component re-rendered');\n    });","file":"unit/preact/test-base-element-mapping.js","skipped":false,"dir":"test"},{"name":"should pick-up template child mutations","suites":["usesTemplate"],"updatePoint":{"line":332,"column":47,"index":11028},"line":332,"code":"    it('should pick-up template child mutations', async () => {\n      element.appendChild(document.createElement('template'));\n      await waitFor(() => component.callCount > 1, 'component re-rendered');\n    });","file":"unit/preact/test-base-element-mapping.js","skipped":false,"dir":"test"},{"name":"should return requiresShadowDom","suites":["shadow container rendering"],"updatePoint":{"line":350,"column":39,"index":11630},"line":350,"code":"    it('should return requiresShadowDom', () => {\n      expect(Impl.requiresShadowDom()).to.be.true;\n    });","file":"unit/preact/test-base-element-mapping.js","skipped":false,"dir":"test"},{"name":"should render from scratch","suites":["shadow container rendering"],"updatePoint":{"line":353,"column":34,"index":11734},"line":353,"code":"    it('should render from scratch', async () => {\n      doc.body.appendChild(element);\n      await element.buildInternal();\n      await waitFor(() => component.callCount > 0, 'component rendered');\n      expect(component).to.be.calledOnce;\n      const container = element.shadowRoot.querySelector(':scope c');\n      expect(container).to.be.ok;\n      expect(container.style.display).to.equal('contents');\n      expect(container.querySelector(':scope #component')).to.be.ok;\n      expect(element.shadowRoot.querySelectorAll('slot[name=\"i-amphtml-svc\"]')).to.have.lengthOf(1);\n    });","file":"unit/preact/test-base-element-mapping.js","skipped":false,"dir":"test"},{"name":"should pass placeholder, fallback, and overflow elements to service slot","suites":["shadow container rendering"],"updatePoint":{"line":364,"column":80,"index":12363},"line":364,"code":"    it('should pass placeholder, fallback, and overflow elements to service slot', async () => {\n      doc.body.appendChild(element);\n      await element.buildInternal();\n      await waitFor(() => component.callCount > 0, 'component rendered');\n      const serviceSlot = element.shadowRoot.querySelectorAll('slot[name=\"i-amphtml-svc\"]');\n      expect(serviceSlot).to.have.lengthOf(1);\n      const placeholder = element.querySelector('[placeholder]');\n      const fallback = element.querySelector('[fallback]');\n      const overflow = element.querySelector('[overflow]');\n      expect(placeholder.getAttribute('slot')).to.equal('i-amphtml-svc');\n      expect(fallback.getAttribute('slot')).to.equal('i-amphtml-svc');\n      expect(overflow.getAttribute('slot')).to.equal('i-amphtml-svc');\n      expect(serviceSlot[0].assignedElements()).to.have.lengthOf(3);\n      expect(serviceSlot[0].assignedElements()[0]).to.equal(placeholder);\n      expect(serviceSlot[0].assignedElements()[1]).to.equal(fallback);\n      expect(serviceSlot[0].assignedElements()[2]).to.equal(overflow);\n    });","file":"unit/preact/test-base-element-mapping.js","skipped":false,"dir":"test"},{"name":"should hydrate SSR shadow root","suites":["shadow container rendering","SSR"],"updatePoint":{"line":402,"column":40,"index":14212},"line":402,"code":"      it('should hydrate SSR shadow root', () => {\n        expect(component).to.be.calledOnce;\n        expect(element.shadowRoot.querySelector(':scope > c')).to.equal(container);\n        expect(element.shadowRoot.querySelector(':scope > c > #component')).to.equal(componentEl);\n        expect(element.shadowRoot.querySelectorAll('slot[name=\"i-amphtml-svc\"]')).to.have.lengthOf(1);\n        expect(element.shadowRoot.querySelector(':scope > slot[name=\"i-amphtml-svc\"]')).to.equal(serviceSlotEl);\n        expect(element.shadowRoot.querySelector(':scope > style')).to.equal(styleEl);\n      });","file":"unit/preact/test-base-element-mapping.js","skipped":true,"dir":"test"},{"name":"should rerender after SSR hydration","suites":["shadow container rendering","SSR"],"updatePoint":{"line":410,"column":45,"index":14807},"line":410,"code":"      it('should rerender after SSR hydration', async () => {\n        // Only rendering updates attributes.\n        const impl = await element.getImpl();\n        impl.mutateProps({\n          name: 'A'\n        });\n        await waitFor(() => component.callCount > 1, 'component rendered');\n        expect(component).to.be.calledTwice;\n        expect(componentEl.getAttribute('data-name')).to.equal('A');\n\n        // No changes.\n        expect(element.shadowRoot.querySelector(':scope > c')).to.equal(container);\n        expect(element.shadowRoot.querySelector(':scope > c > #component')).to.equal(componentEl);\n        expect(element.shadowRoot.querySelector(':scope > slot[name=\"i-amphtml-svc\"]')).to.equal(serviceSlotEl);\n        expect(element.shadowRoot.querySelector(':scope > style')).to.equal(styleEl);\n      });","file":"unit/preact/test-base-element-mapping.js","skipped":true,"dir":"test"},{"name":"should return requiresShadowDom","suites":["lightDom mapping"],"updatePoint":{"line":449,"column":39,"index":16308},"line":449,"code":"    it('should return requiresShadowDom', () => {\n      expect(Impl.requiresShadowDom()).to.be.false;\n    });","file":"unit/preact/test-base-element-mapping.js","skipped":false,"dir":"test"},{"name":"should render from scratch","suites":["lightDom mapping"],"updatePoint":{"line":452,"column":34,"index":16413},"line":452,"code":"    it('should render from scratch', async () => {\n      doc.body.appendChild(element);\n      await element.buildInternal();\n      await waitFor(() => element.querySelector(':scope > time'), 'lightDom element created');\n      await waitFor(() => component.callCount > 0, 'component rendered');\n      expect(component).to.be.calledOnce;\n      const lightDom = element.querySelector(':scope > time');\n      expect(lightDom.className).to.equal('');\n      expect(lightDom.hasAttribute('i-amphtml-rendered')).to.be.true;\n      expect(lightDom.querySelector(':scope > #component')).to.be.ok;\n      expect(lastProps.as).to.equal('time');\n      await waitFor(() => updateEventSpy.callCount > 0, 'amp:dom-update called');\n    });","file":"unit/preact/test-base-element-mapping.js","skipped":false,"dir":"test"},{"name":"should add fill class","suites":["lightDom mapping"],"updatePoint":{"line":465,"column":29,"index":17129},"line":465,"code":"    it('should add fill class', async () => {\n      Impl['layoutSizeDefined'] = true;\n      doc.body.appendChild(element);\n      await element.buildInternal();\n      await waitFor(() => element.querySelector(':scope > time'), 'lightDom element created');\n      const lightDom = element.querySelector(':scope > time');\n      expect(lightDom.querySelector(':scope > #component')).to.be.ok;\n      expect(lightDom.className).to.equal('i-amphtml-fill-content');\n      expect(lightDom.hasAttribute('i-amphtml-rendered')).to.be.true;\n      expect(lastProps.class).to.equal('i-amphtml-fill-content');\n      expect(lastProps.as).to.equal('time');\n      await waitFor(() => updateEventSpy.callCount > 0, 'amp:dom-update called');\n    });","file":"unit/preact/test-base-element-mapping.js","skipped":false,"dir":"test"},{"name":"should use the existing element if exists","suites":["lightDom mapping"],"updatePoint":{"line":478,"column":49,"index":17877},"line":478,"code":"    it('should use the existing element if exists', async () => {\n      Impl['layoutSizeDefined'] = true;\n      const existing = createElementWithAttributes(document, 'time', {\n        'i-amphtml-rendered': ''\n      });\n      element.appendChild(existing);\n      doc.body.appendChild(element);\n      await element.buildInternal();\n      await waitFor(() => component.callCount > 0, 'component rendered');\n      expect(element.querySelector(':scope > time')).to.equal(existing);\n      expect(existing.querySelector(':scope > #component')).to.be.ok;\n      expect(existing.className).to.equal('i-amphtml-fill-content');\n      expect(lastProps.class).to.equal('i-amphtml-fill-content');\n      expect(lastProps.as).to.equal('time');\n      await waitFor(() => updateEventSpy.callCount > 0, 'amp:dom-update called');\n    });","file":"unit/preact/test-base-element-mapping.js","skipped":false,"dir":"test"},{"name":"should return requiresShadowDom","suites":["children mapping"],"updatePoint":{"line":633,"column":39,"index":22429},"line":633,"code":"    it('should return requiresShadowDom', () => {\n      expect(Impl.requiresShadowDom()).to.be.true;\n    });","file":"unit/preact/test-base-element-mapping.js","skipped":false,"dir":"test"},{"name":"should render into shadow DOM","suites":["children mapping"],"updatePoint":{"line":636,"column":37,"index":22536},"line":636,"code":"    it('should render into shadow DOM', () => {\n      expect(component).to.be.calledOnce;\n      expect(element.shadowRoot).to.be.ok;\n      expect(element.shadowRoot.querySelector('#component')).to.be.ok;\n      expect(element.querySelector('#component')).to.not.be.ok;\n    });","file":"unit/preact/test-base-element-mapping.js","skipped":false,"dir":"test"},{"name":"should skip unavailable children","suites":["children mapping"],"updatePoint":{"line":642,"column":40,"index":22815},"line":642,"code":"    it('should skip unavailable children', () => {\n      expect(lastProps).to.not.have.property('special2');\n    });","file":"unit/preact/test-base-element-mapping.js","skipped":false,"dir":"test"},{"name":"should pass children as prop slot for single-element mapping and parse attributes","suites":["children mapping"],"updatePoint":{"line":645,"column":89,"index":22981},"line":645,"code":"    it('should pass children as prop slot for single-element mapping and parse attributes', () => {\n      const {\n        special1\n      } = lastProps;\n      expect(special1.type).to.equal(Slot);\n      expect(special1.props).to.deep.equal({\n        name: 'i-amphtml-special1',\n        valueWithDef: 'DEFAULT',\n        propA: 'A',\n        minFontSize: 72,\n        aDate: DATE,\n        disabled: true\n      });\n      expect(element.querySelector('[special1]').slot).to.equal('i-amphtml-special1');\n    });","file":"unit/preact/test-base-element-mapping.js","skipped":false,"dir":"test"},{"name":"should pass children as functional prop slot for single-element mapping with \"as\" and parse attributes","suites":["children mapping"],"updatePoint":{"line":660,"column":110,"index":23506},"line":660,"code":"    it('should pass children as functional prop slot for single-element mapping with \"as\" and parse attributes', () => {\n      const {\n        specialAs: Comp\n      } = lastProps;\n      expect(typeof Comp).to.equal('function');\n      expect(Comp.name).to.equal('SlotWithProps');\n      const special3 = Comp();\n      expect(special3.props).to.deep.equal({\n        valueWithDef: 'DEFAULT',\n        propA: 'A',\n        minFontSize: 72,\n        disabled: true,\n        name: 'i-amphtml-specialAs'\n      });\n      const special3WithProps = Comp({\n        'aria-disabled': 'false',\n        disabled: false\n      });\n      expect(special3WithProps.props).to.deep.equal({\n        valueWithDef: 'DEFAULT',\n        propA: 'A',\n        minFontSize: 72,\n        name: 'i-amphtml-specialAs',\n        'aria-disabled': 'false',\n        disabled: false\n      });\n      expect(element.querySelector('[special3]').slot).to.equal('i-amphtml-specialAs');\n    });","file":"unit/preact/test-base-element-mapping.js","skipped":false,"dir":"test"},{"name":"should pass new functional prop slot for \"as\" on mutation","suites":["children mapping"],"updatePoint":{"line":688,"column":65,"index":24404},"line":688,"code":"    it('should pass new functional prop slot for \"as\" on mutation', async () => {\n      const {\n        specialAs: prevComp\n      } = lastProps;\n      const prevSpecial3 = prevComp();\n      expect(prevSpecial3.props).to.deep.equal({\n        valueWithDef: 'DEFAULT',\n        propA: 'A',\n        minFontSize: 72,\n        disabled: true,\n        name: 'i-amphtml-specialAs'\n      });\n\n      // Mutate slot prop, but this won't trigger a rerender\n      element.querySelector('[special3]').setAttribute('value-with-def', 'CUSTOM');\n      // Mutate an observed attr to trigger rerender\n      element.setAttribute('prop-a', 'B');\n      await waitFor(() => component.callCount > 1, 'component re-rendered');\n      expect(component).to.be.calledTwice;\n      const {\n        specialAs: Comp\n      } = lastProps;\n      expect(Comp).not.to.deep.equal(prevComp);\n      const special3 = Comp();\n      expect(special3.props).to.deep.equal({\n        valueWithDef: 'CUSTOM',\n        propA: 'A',\n        minFontSize: 72,\n        disabled: true,\n        name: 'i-amphtml-specialAs'\n      });\n    });","file":"unit/preact/test-base-element-mapping.js","skipped":false,"dir":"test"},{"name":"should pass children as prop slot array and parse attributes","suites":["children mapping"],"updatePoint":{"line":720,"column":68,"index":25488},"line":720,"code":"    it('should pass children as prop slot array and parse attributes', () => {\n      const {\n        children\n      } = lastProps;\n      expect(children).to.have.lengthOf(2);\n      const {\n        0: child1,\n        1: child2\n      } = children;\n      expect(child1.type).to.equal(Slot);\n      expect(omit(child1.props, 'name')).to.deep.equal({\n        boolDefTrue: true,\n        combined: 'A+B',\n        params: {\n          test: 'helloworld',\n          testTwo: 'confirm'\n        }\n      });\n      expect(child2.type).to.equal(Slot);\n      expect(omit(child2.props, 'name')).to.deep.equal({\n        boolDefTrue: true,\n        combined: 'C+D',\n        params: {\n          test: 'helloworld2',\n          testTwo: 'confirm2'\n        }\n      });\n\n      // Names are random and most importantly not equal to each other.\n      expect(child1.props.name).to.match(/i-amphtml-children-\\d/);\n      expect(child2.props.name).to.match(/i-amphtml-children-\\d/);\n      expect(child1.props.name).to.not.equal(child2.props.name);\n      expect(element.querySelector('#child1').slot).to.equal(child1.props.name);\n      expect(element.querySelector('#child2').slot).to.equal(child2.props.name);\n    });","file":"unit/preact/test-base-element-mapping.js","skipped":false,"dir":"test"},{"name":"should rerender on new children","suites":["children mapping"],"updatePoint":{"line":755,"column":39,"index":26645},"line":755,"code":"    it('should rerender on new children', async () => {\n      await waitFor(() => component.callCount > 0, 'component rendered');\n      const {\n        children: prevChildren\n      } = lastProps;\n      expect(prevChildren).to.have.lengthOf(2);\n      const {\n        0: prevChild1,\n        1: prevChild2\n      } = prevChildren;\n      const newChild = createElementWithAttributes(doc, 'div', {\n        'id': 'child3',\n        'part-a': 'E',\n        'part-b': 'F'\n      });\n      element.appendChild(newChild);\n      await waitFor(() => component.callCount > 1, 'component re-rendered');\n      expect(component).to.be.calledTwice;\n      const {\n        children\n      } = lastProps;\n      expect(children).to.have.lengthOf(3);\n      const {\n        0: child1,\n        1: child2,\n        2: child3\n      } = children;\n\n      // New child.\n      expect(child3.type).to.equal(Slot);\n      expect(omit(child3.props, 'name')).to.deep.equal({\n        boolDefTrue: true,\n        combined: 'E+F'\n      });\n      expect(child3.props.name).to.match(/i-amphtml-children-\\d/);\n      expect(child3.props.name).to.not.equal(prevChild1.props.name);\n      expect(child3.props.name).to.not.equal(prevChild2.props.name);\n      expect(newChild.slot).to.equal(child3.props.name);\n\n      // No changes.\n      expect(child1.type).to.equal(Slot);\n      expect(child1.props).to.deep.equal({\n        name: prevChild1.props.name,\n        boolDefTrue: true,\n        combined: 'A+B',\n        params: {\n          test: 'helloworld',\n          testTwo: 'confirm'\n        }\n      });\n      expect(element.querySelector('#child1').slot).to.equal(child1.props.name);\n      expect(child2.type).to.equal(Slot);\n      expect(child2.props).to.deep.equal({\n        name: prevChild2.props.name,\n        boolDefTrue: true,\n        combined: 'C+D',\n        params: {\n          test: 'helloworld2',\n          testTwo: 'confirm2'\n        }\n      });\n      expect(element.querySelector('#child2').slot).to.equal(child2.props.name);\n    });","file":"unit/preact/test-base-element-mapping.js","skipped":false,"dir":"test"},{"name":"should rerender when children are removed","suites":["children mapping"],"updatePoint":{"line":818,"column":49,"index":28648},"line":818,"code":"    it('should rerender when children are removed', async () => {\n      await waitFor(() => component.callCount > 0, 'component rendered');\n      const {\n        children: prevChildren\n      } = lastProps;\n      expect(prevChildren).to.have.lengthOf(2);\n      const {\n        1: prevChild2\n      } = prevChildren;\n      const oldChild = element.querySelector('#child1');\n      element.removeChild(oldChild);\n      await waitFor(() => component.callCount > 1, 'component re-rendered');\n      expect(component).to.be.calledTwice;\n      const {\n        children\n      } = lastProps;\n      expect(children).to.have.lengthOf(1);\n      const {\n        0: child2\n      } = children;\n\n      // No changes.\n      expect(child2.type).to.equal(Slot);\n      expect(child2.props).to.deep.equal({\n        name: prevChild2.props.name,\n        boolDefTrue: true,\n        combined: 'C+D',\n        params: {\n          test: 'helloworld2',\n          testTwo: 'confirm2'\n        }\n      });\n      expect(element.querySelector('#child2').slot).to.equal(prevChild2.props.name);\n    });","file":"unit/preact/test-base-element-mapping.js","skipped":false,"dir":"test"},{"name":"should rerender on reorder","suites":["children mapping"],"updatePoint":{"line":852,"column":34,"index":29697},"line":852,"code":"    it('should rerender on reorder', async () => {\n      await waitFor(() => component.callCount > 0, 'component rendered');\n      const {\n        children: prevChildren\n      } = lastProps;\n      expect(prevChildren).to.have.lengthOf(2);\n      const {\n        0: prevChild1,\n        1: prevChild2\n      } = prevChildren;\n      element.insertBefore(element.querySelector('#child2'), element.querySelector('#child1'));\n      await waitFor(() => component.callCount > 1, 'component re-rendered');\n      expect(component).to.be.calledTwice;\n      const {\n        children\n      } = lastProps;\n      expect(children).to.have.lengthOf(2);\n      const {\n        0: child2,\n        1: child1\n      } = children;\n\n      // No changes, except for ordering.\n      expect(child1.type).to.equal(Slot);\n      expect(child1.props).to.deep.equal({\n        name: prevChild1.props.name,\n        boolDefTrue: true,\n        combined: 'A+B',\n        params: {\n          test: 'helloworld',\n          testTwo: 'confirm'\n        }\n      });\n      expect(element.querySelector('#child1').slot).to.equal(prevChild1.props.name);\n      expect(child2.type).to.equal(Slot);\n      expect(child2.props).to.deep.equal({\n        name: prevChild2.props.name,\n        boolDefTrue: true,\n        combined: 'C+D',\n        params: {\n          test: 'helloworld2',\n          testTwo: 'confirm2'\n        }\n      });\n      expect(element.querySelector('#child2').slot).to.equal(prevChild2.props.name);\n    });","file":"unit/preact/test-base-element-mapping.js","skipped":false,"dir":"test"},{"name":"should ignore service children mutations","suites":["children mapping"],"updatePoint":{"line":898,"column":48,"index":31181},"line":898,"code":"    it('should ignore service children mutations', async () => {\n      await waitForMutation(element, () => {\n        const newChild1 = doc.createElement('i-amphtml-size');\n        element.appendChild(newChild1);\n        const newChild2 = doc.createElement('div');\n        newChild2.setAttribute('slot', 'i-amphtml-svc');\n        element.appendChild(newChild2);\n      });\n\n      // Execute a handled mutation and check that execution happened only\n      // twice.\n      element.setAttribute('prop-a', 'B');\n      await waitFor(() => component.callCount > 1, 'component re-rendered');\n      expect(component).to.be.calledTwice;\n    });","file":"unit/preact/test-base-element-mapping.js","skipped":false,"dir":"test"},{"name":"clones children (without descendant) as vnodes into prop","suites":["children mapping"],"updatePoint":{"line":913,"column":64,"index":31832},"line":913,"code":"    it('clones children (without descendant) as vnodes into prop', async () => {\n      expect(component.withArgs(env.sandbox.match({\n        cloned: [env.sandbox.match({\n          type: 'div',\n          key: element.querySelector('#cloned1'),\n          props: {\n            cloned: '',\n            id: 'cloned1'\n          }\n        }), env.sandbox.match({\n          type: 'div',\n          key: element.querySelector('#cloned2'),\n          props: {\n            cloned: '',\n            id: 'cloned2'\n          }\n        })]\n      }))).to.be.calledOnce;\n    });","file":"unit/preact/test-base-element-mapping.js","skipped":false,"dir":"test"},{"name":"should return requiresShadowDom","suites":["passthrough mapping"],"updatePoint":{"line":954,"column":39,"index":32941},"line":954,"code":"    it('should return requiresShadowDom', () => {\n      expect(Impl.requiresShadowDom()).to.be.true;\n    });","file":"unit/preact/test-base-element-mapping.js","skipped":false,"dir":"test"},{"name":"should render into shadow DOM","suites":["passthrough mapping"],"updatePoint":{"line":957,"column":37,"index":33048},"line":957,"code":"    it('should render into shadow DOM', () => {\n      expect(component).to.be.calledOnce;\n      expect(element.shadowRoot).to.be.ok;\n      expect(element.shadowRoot.querySelector('#component')).to.be.ok;\n      expect(element.querySelector('#component')).to.not.be.ok;\n    });","file":"unit/preact/test-base-element-mapping.js","skipped":false,"dir":"test"},{"name":"should pass children as prop slot for single-element mapping","suites":["passthrough mapping"],"updatePoint":{"line":963,"column":68,"index":33355},"line":963,"code":"    it('should pass children as prop slot for single-element mapping', () => {\n      const {\n        children\n      } = lastProps;\n      expect(children).to.have.lengthOf(1);\n      const child = children[0];\n      expect(child.type).to.equal(Slot);\n      expect(child.props).to.deep.equal({\n        loading: 'lazy'\n      });\n      expect(element.querySelector('b').slot).to.equal('');\n    });","file":"unit/preact/test-base-element-mapping.js","skipped":false,"dir":"test"},{"name":"should re-render on content changes","suites":["passthrough mapping"],"updatePoint":{"line":975,"column":43,"index":33723},"line":975,"code":"    it('should re-render on content changes', async () => {\n      element.textContent = 'Different content';\n      await waitFor(() => component.callCount > 1, 'component re-rendered');\n      expect(component).to.be.calledTwice;\n\n      // No changes.\n      const {\n        children\n      } = lastProps;\n      expect(children).to.have.lengthOf(1);\n      const child = children[0];\n      expect(child.type).to.equal(Slot);\n      expect(child.props).to.deep.equal({\n        loading: 'lazy'\n      });\n    });","file":"unit/preact/test-base-element-mapping.js","skipped":false,"dir":"test"},{"name":"should re-render on empty content","suites":["passthrough mapping"],"updatePoint":{"line":991,"column":41,"index":34226},"line":991,"code":"    it('should re-render on empty content', async () => {\n      element.textContent = '';\n      await waitFor(() => component.callCount > 1, 'component re-rendered');\n      expect(component).to.be.calledTwice;\n\n      // No changes.\n      const {\n        children\n      } = lastProps;\n      expect(children).to.have.lengthOf(1);\n      const child = children[0];\n      expect(child.type).to.equal(Slot);\n      expect(child.props).to.deep.equal({\n        loading: 'lazy'\n      });\n    });","file":"unit/preact/test-base-element-mapping.js","skipped":false,"dir":"test"},{"name":"should ignore service children mutations","suites":["passthrough mapping"],"updatePoint":{"line":1007,"column":48,"index":34719},"line":1007,"code":"    it('should ignore service children mutations', async () => {\n      await waitForMutation(element, () => {\n        const newChild1 = doc.createElement('i-amphtml-size');\n        element.appendChild(newChild1);\n        const newChild2 = doc.createElement('div');\n        newChild2.setAttribute('slot', 'i-amphtml-svc');\n        element.appendChild(newChild2);\n      });\n\n      // Execute a handled mutation and check that execution happened only\n      // twice.\n      element.setAttribute('prop-a', 'B');\n      await waitFor(() => component.callCount > 1, 'component re-rendered');\n      expect(component).to.be.calledTwice;\n    });","file":"unit/preact/test-base-element-mapping.js","skipped":false,"dir":"test"},{"name":"should return requiresShadowDom","suites":["passthrough with empty mapping"],"updatePoint":{"line":1042,"column":39,"index":35909},"line":1042,"code":"    it('should return requiresShadowDom', () => {\n      expect(Impl.requiresShadowDom()).to.be.true;\n    });","file":"unit/preact/test-base-element-mapping.js","skipped":false,"dir":"test"},{"name":"should render into shadow DOM","suites":["passthrough with empty mapping"],"updatePoint":{"line":1045,"column":37,"index":36016},"line":1045,"code":"    it('should render into shadow DOM', () => {\n      expect(component).to.be.calledOnce;\n      expect(element.shadowRoot).to.be.ok;\n      expect(element.shadowRoot.querySelector('#component')).to.be.ok;\n      expect(element.querySelector('#component')).to.not.be.ok;\n    });","file":"unit/preact/test-base-element-mapping.js","skipped":false,"dir":"test"},{"name":"should pass children when not empty","suites":["passthrough with empty mapping"],"updatePoint":{"line":1051,"column":43,"index":36298},"line":1051,"code":"    it('should pass children when not empty', () => {\n      const {\n        children\n      } = lastProps;\n      expect(children).to.have.lengthOf(1);\n      const child = children[0];\n      expect(child.type).to.equal(Slot);\n      expect(child.props).to.deep.equal({\n        loading: 'lazy'\n      });\n    });","file":"unit/preact/test-base-element-mapping.js","skipped":false,"dir":"test"},{"name":"should pass children as undefined when empty","suites":["passthrough with empty mapping"],"updatePoint":{"line":1062,"column":52,"index":36615},"line":1062,"code":"    it('should pass children as undefined when empty', async () => {\n      element.textContent = '   ';\n      await waitFor(() => component.callCount > 1, 'component re-rendered');\n      expect(component).to.be.calledTwice;\n      expect(lastProps.children).to.be.undefined;\n    });","file":"unit/preact/test-base-element-mapping.js","skipped":false,"dir":"test"},{"name":"should re-render on content changes","suites":["passthrough with empty mapping"],"updatePoint":{"line":1068,"column":43,"index":36888},"line":1068,"code":"    it('should re-render on content changes', async () => {\n      element.textContent = 'Different content';\n      await waitFor(() => component.callCount > 1, 'component re-rendered');\n      expect(component).to.be.calledTwice;\n\n      // No changes.\n      const {\n        children\n      } = lastProps;\n      expect(children).to.have.lengthOf(1);\n      const child = children[0];\n      expect(child.type).to.equal(Slot);\n      expect(child.props).to.deep.equal({\n        loading: 'lazy'\n      });\n    });","file":"unit/preact/test-base-element-mapping.js","skipped":false,"dir":"test"},{"name":"should ignore service children mutations","suites":["passthrough with empty mapping"],"updatePoint":{"line":1084,"column":48,"index":37398},"line":1084,"code":"    it('should ignore service children mutations', async () => {\n      await waitForMutation(element, () => {\n        const newChild1 = doc.createElement('i-amphtml-size');\n        element.appendChild(newChild1);\n        const newChild2 = doc.createElement('div');\n        newChild2.setAttribute('slot', 'i-amphtml-svc');\n        element.appendChild(newChild2);\n      });\n\n      // Execute a handled mutation and check that execution happened only\n      // twice.\n      element.setAttribute('prop-a', 'B');\n      await waitFor(() => component.callCount > 1, 'component re-rendered');\n      expect(component).to.be.calledTwice;\n    });","file":"unit/preact/test-base-element-mapping.js","skipped":false,"dir":"test"},{"name":"should focus on the host when an element in the shadow DOM receives focus","suites":["delegatesFocus mapping"],"updatePoint":{"line":1117,"column":81,"index":38598},"line":1117,"code":"    it('should focus on the host when an element in the shadow DOM receives focus', async () => {\n      // expect the shadowRoot to have delegatesFocus property set to true\n      expect(element.shadowRoot.delegatesFocus).to.be.true;\n\n      // initial focus is not on host\n      expect(doc.activeElement).to.not.equal(element);\n\n      // focus an element within the shadow DOM\n      const inner = element.shadowRoot.querySelector('#component');\n      // required to receive focus\n      inner.setAttribute('tabIndex', 0);\n      inner.focus();\n\n      // host receives focus and custom style for outline\n      expect(doc.activeElement).to.equal(element);\n    });","file":"unit/preact/test-base-element-mapping.js","skipped":false,"dir":"test"},{"name":"should render into shadow DOM","suites":["children with passthrough mapping"],"updatePoint":{"line":1221,"column":37,"index":41581},"line":1221,"code":"    it('should render into shadow DOM', () => {\n      expect(component).to.be.calledOnce;\n      expect(element.shadowRoot).to.be.ok;\n      expect(element.shadowRoot.querySelector('#component')).to.be.ok;\n      expect(element.querySelector('#component')).to.not.be.ok;\n    });","file":"unit/preact/test-base-element-mapping.js","skipped":false,"dir":"test"},{"name":"should skip unavailable children","suites":["children with passthrough mapping"],"updatePoint":{"line":1227,"column":40,"index":41860},"line":1227,"code":"    it('should skip unavailable children', () => {\n      expect(lastProps).to.not.have.property('special2');\n    });","file":"unit/preact/test-base-element-mapping.js","skipped":false,"dir":"test"},{"name":"should pass children as prop slot for single-element mapping and parse attributes","suites":["children with passthrough mapping"],"updatePoint":{"line":1230,"column":89,"index":42026},"line":1230,"code":"    it('should pass children as prop slot for single-element mapping and parse attributes', () => {\n      const {\n        special1\n      } = lastProps;\n      expect(special1.type).to.equal(Slot);\n      expect(special1.props).to.deep.equal({\n        name: 'i-amphtml-special1',\n        valueWithDef: 'DEFAULT',\n        propA: 'A',\n        minFontSize: 72,\n        aDate: DATE,\n        disabled: true\n      });\n      expect(element.querySelector('[special1]').slot).to.equal('i-amphtml-special1');\n    });","file":"unit/preact/test-base-element-mapping.js","skipped":false,"dir":"test"},{"name":"should pass children as prop slot array and parse attributes","suites":["children with passthrough mapping"],"updatePoint":{"line":1245,"column":68,"index":42509},"line":1245,"code":"    it('should pass children as prop slot array and parse attributes', () => {\n      const {\n        children\n      } = lastProps;\n      expect(children).to.have.lengthOf(1);\n      const child = children[0];\n      expect(child.type).to.equal(Slot);\n      expect(child.props).to.deep.equal({\n        loading: 'lazy'\n      });\n      expect(element.querySelector('#child1').slot).to.equal('');\n      expect(element.querySelector('#child2').slot).to.equal('');\n      expect(element.textContent).to.contain('text (should be passed through)');\n    });","file":"unit/preact/test-base-element-mapping.js","skipped":false,"dir":"test"},{"name":"should rerender on new children","suites":["children with passthrough mapping"],"updatePoint":{"line":1259,"column":39,"index":43026},"line":1259,"code":"    it('should rerender on new children', async () => {\n      await waitFor(() => component.callCount > 0, 'component rendered');\n      const {\n        children: prevChildren,\n        specialAs: prevSpecialAs\n      } = lastProps;\n      expect(prevChildren).to.have.lengthOf(1);\n      const newChild = createElementWithAttributes(doc, 'div', {\n        'id': 'child3',\n        'part-a': 'E',\n        'part-b': 'F'\n      });\n      element.appendChild(newChild);\n      await waitFor(() => component.callCount > 1, 'component re-rendered');\n      expect(component).to.be.calledTwice;\n      const {\n        children,\n        specialAs\n      } = lastProps;\n      expect(children).to.have.lengthOf(1);\n      const child = children[0];\n\n      // New child.\n      expect(child.type).to.equal(Slot);\n      expect(child.props).to.deep.equal({\n        loading: 'lazy'\n      });\n      expect(element.querySelector('#child3').slot).to.equal('');\n\n      // No changes.\n      expect(element.querySelector('#child1').slot).to.equal('');\n      expect(element.querySelector('#child2').slot).to.equal('');\n      expect(element.textContent).to.contain('text (should be passed through)');\n      expect(specialAs).to.deep.equal(prevSpecialAs);\n    });","file":"unit/preact/test-base-element-mapping.js","skipped":false,"dir":"test"},{"name":"should rerender on text change","suites":["children with passthrough mapping"],"updatePoint":{"line":1294,"column":38,"index":44253},"line":1294,"code":"    it('should rerender on text change', async () => {\n      await waitFor(() => component.callCount > 0, 'component rendered');\n      const {\n        children: prevChildren\n      } = lastProps;\n      expect(prevChildren).to.have.lengthOf(1);\n      const newChild = doc.createTextNode('more text');\n      element.appendChild(newChild);\n      await waitFor(() => component.callCount > 1, 'component re-rendered');\n      expect(component).to.be.calledTwice;\n      const {\n        children\n      } = lastProps;\n      expect(children).to.have.lengthOf(1);\n      const child = children[0];\n\n      // New child.\n      expect(child.type).to.equal(Slot);\n      expect(child.props).to.deep.equal({\n        loading: 'lazy'\n      });\n      expect(element.textContent).to.contain('more text');\n\n      // No changes.\n      expect(element.querySelector('#child1').slot).to.equal('');\n      expect(element.querySelector('#child2').slot).to.equal('');\n      expect(element.textContent).to.contain('text (should be passed through)');\n    });","file":"unit/preact/test-base-element-mapping.js","skipped":false,"dir":"test"},{"name":"should rerender when children are removed","suites":["children with passthrough mapping"],"updatePoint":{"line":1322,"column":49,"index":45289},"line":1322,"code":"    it('should rerender when children are removed', async () => {\n      await waitFor(() => component.callCount > 0, 'component rendered');\n      const {\n        children: prevChildren\n      } = lastProps;\n      expect(prevChildren).to.have.lengthOf(1);\n      const oldChild = element.querySelector('#child1');\n      element.removeChild(oldChild);\n      await waitFor(() => component.callCount > 1, 'component re-rendered');\n      expect(component).to.be.calledTwice;\n      const {\n        children\n      } = lastProps;\n      expect(children).to.have.lengthOf(1);\n      const child = children[0];\n      expect(child.type).to.equal(Slot);\n      expect(child.props).to.deep.equal({\n        loading: 'lazy'\n      });\n\n      // No changes.\n      expect(element.querySelector('#child2').slot).to.equal('');\n      expect(element.textContent).to.contain('text (should be passed through)');\n    });","file":"unit/preact/test-base-element-mapping.js","skipped":false,"dir":"test"},{"name":"should rerender on reorder","suites":["children with passthrough mapping"],"updatePoint":{"line":1346,"column":34,"index":46165},"line":1346,"code":"    it('should rerender on reorder', async () => {\n      await waitFor(() => component.callCount > 0, 'component rendered');\n      const {\n        children: prevChildren\n      } = lastProps;\n      expect(prevChildren).to.have.lengthOf(1);\n      const child1 = element.querySelector('#child1');\n      const child2 = element.querySelector('#child2');\n      expect(child1.nextElementSibling).to.equal(child2);\n      element.insertBefore(element.querySelector('#child2'), element.querySelector('#child1'));\n      await waitFor(() => component.callCount > 1, 'component re-rendered');\n      expect(component).to.be.calledTwice;\n      const {\n        children\n      } = lastProps;\n      expect(children).to.have.lengthOf(1);\n      const child = children[0];\n      expect(child.type).to.equal(Slot);\n      expect(child.props).to.deep.equal({\n        loading: 'lazy'\n      });\n\n      // No changes, except for ordering\n      expect(child1.slot).to.equal('');\n      expect(child2.slot).to.equal('');\n      expect(child2.nextElementSibling).to.equal(child1);\n      expect(element.textContent).to.contain('text (should be passed through)');\n    });","file":"unit/preact/test-base-element-mapping.js","skipped":false,"dir":"test"},{"name":"should ignore service children mutations","suites":["children with passthrough mapping"],"updatePoint":{"line":1374,"column":48,"index":47317},"line":1374,"code":"    it('should ignore service children mutations', async () => {\n      await waitForMutation(element, () => {\n        const newChild1 = doc.createElement('i-amphtml-size');\n        element.appendChild(newChild1);\n        const newChild2 = doc.createElement('div');\n        newChild2.setAttribute('slot', 'i-amphtml-svc');\n        element.appendChild(newChild2);\n      });\n\n      // Execute a handled mutation and check that execution happened only\n      // twice.\n      element.setAttribute('prop-a', 'B');\n      await waitFor(() => component.callCount > 1, 'component re-rendered');\n      expect(component).to.be.calledTwice;\n    });","file":"unit/preact/test-base-element-mapping.js","skipped":false,"dir":"test"},{"name":"clones children (without descendant) as vnodes into prop","suites":["children with passthrough mapping"],"updatePoint":{"line":1389,"column":64,"index":47968},"line":1389,"code":"    it('clones children (without descendant) as vnodes into prop', async () => {\n      expect(component.withArgs(env.sandbox.match({\n        cloned: [env.sandbox.match({\n          type: 'div',\n          key: element.querySelector('#cloned1'),\n          props: {\n            cloned: '',\n            id: 'cloned1'\n          }\n        }), env.sandbox.match({\n          type: 'div',\n          key: element.querySelector('#cloned2'),\n          props: {\n            cloned: '',\n            id: 'cloned2'\n          }\n        })]\n      }))).to.be.calledOnce;\n    });","file":"unit/preact/test-base-element-mapping.js","skipped":false,"dir":"test"},{"name":"preact ref passing vnode smoke test","suites":[],"updatePoint":{"line":78,"column":41,"index":2481},"line":78,"code":"  it('preact ref passing vnode smoke test', () => {\n    function App() {\n      // Don't call useImperativeHandle.\n    }\n    const ref = env.sandbox.spy();\n    Preact.render( /*#__PURE__*/React.createElement(App, {\n      ref: ref\n    }), document.body);\n    // When this test fails, that means Preact has fixed their ref setting.\n    // See https://github.com/preactjs/preact/issues/3084\n    // Please remove the hack in src/preact/base-element.js inside `checkApiWrapper_`,\n    // and add a `.not` below so we don't regress again.\n    expect(ref).to.be.called;\n  });","file":"unit/preact/test-base-element-runtime.js","skipped":false,"dir":"test"},{"name":"should render with default context","suites":["context"],"updatePoint":{"line":103,"column":42,"index":3359},"line":103,"code":"    it('should render with default context', async () => {\n      await element.mountInternal();\n      await waitFor(() => component.callCount > 0, 'component rendered');\n      expect(lastContext).to.contain({\n        renderable: true,\n        playable: true,\n        loading: 'auto'\n      });\n      expect(lastLoading).to.equal('auto');\n      expect(loader).to.not.be.calledWith(true);\n    });","file":"unit/preact/test-base-element-runtime.js","skipped":false,"dir":"test"},{"name":"should propagate context to children","suites":["context"],"updatePoint":{"line":114,"column":44,"index":3755},"line":114,"code":"    it('should propagate context to children', async () => {\n      await element.mountInternal();\n      await waitFor(() => component.callCount > 0, 'component rendered');\n      const child1 = element.querySelector('#child1');\n      const child2 = element.querySelector('#child2');\n      await waitForProp(child1, CanRender, true);\n      await waitForProp(child2, CanRender, false);\n    });","file":"unit/preact/test-base-element-runtime.js","skipped":false,"dir":"test"},{"name":"should rediscover children when slot is removed","suites":["context"],"updatePoint":{"line":122,"column":55,"index":4157},"line":122,"code":"    it('should rediscover children when slot is removed', async () => {\n      function getSlot() {\n        return element.shadowRoot && element.shadowRoot.querySelector('slot[name=\"slot1\"]');\n      }\n      await element.mountInternal();\n      const child1 = element.querySelector('#child1');\n      await waitFor(() => getSlot(), 'slot rendered');\n      await waitForProp(child1, CanRender, true);\n\n      // Slot is removed and the child1 goes to the \"unslotted\" group.\n      element.setAttribute('empty', '');\n      await waitFor(() => !getSlot(), 'slot removed');\n      await waitForProp(child1, CanRender, false);\n    });","file":"unit/preact/test-base-element-runtime.js","skipped":false,"dir":"test"},{"name":"should load when requested","suites":["context"],"updatePoint":{"line":136,"column":34,"index":4760},"line":136,"code":"    it('should load when requested', async () => {\n      const loadEventSpy = env.sandbox.spy();\n      const errorEventSpy = env.sandbox.spy();\n      element.addEventListener('load', loadEventSpy);\n      element.addEventListener('error', errorEventSpy);\n\n      // Build.\n      await element.mountInternal();\n      expect(element.readyState).to.equal('loading');\n      expect(loader).to.be.calledWith('auto');\n      expect(lastLoading).to.equal('auto');\n\n      // Complete.\n      const props = loader.firstCall.args[1];\n      props.onReadyState('complete');\n      expect(element.readyState).to.equal('complete');\n      expect(loadEventSpy).to.be.calledOnce;\n      expect(loadEventSpy.firstCall.firstArg).to.contain({\n        bubbles: false\n      });\n      expect(errorEventSpy).to.not.be.called;\n    });","file":"unit/preact/test-base-element-runtime.js","skipped":false,"dir":"test"},{"name":"should handle load failure","suites":["context"],"updatePoint":{"line":158,"column":34,"index":5563},"line":158,"code":"    it('should handle load failure', async () => {\n      const loadEventSpy = env.sandbox.spy();\n      const errorEventSpy = env.sandbox.spy();\n      element.addEventListener('load', loadEventSpy);\n      element.addEventListener('error', errorEventSpy);\n\n      // Build.\n      await element.mountInternal();\n      expect(element.readyState).to.equal('loading');\n      expect(loader).to.be.calledWith('auto');\n      expect(lastLoading).to.equal('auto');\n\n      // Complete.\n      const props = loader.firstCall.args[1];\n      props.onReadyState('error', new Error('intentional'));\n      expect(element.readyState).to.equal('error');\n      expect(errorEventSpy).to.be.calledOnce;\n      expect(errorEventSpy.firstCall.firstArg).to.contain({\n        bubbles: false\n      });\n      expect(loadEventSpy).to.not.be.called;\n    });","file":"unit/preact/test-base-element-runtime.js","skipped":false,"dir":"test"},{"name":"should update readyState=complete from the component ref API","suites":["context"],"updatePoint":{"line":180,"column":68,"index":6421},"line":180,"code":"    it('should update readyState=complete from the component ref API', async () => {\n      const loadEventSpy = env.sandbox.spy();\n      const errorEventSpy = env.sandbox.spy();\n      element.addEventListener('load', loadEventSpy);\n      element.addEventListener('error', errorEventSpy);\n      api = {\n        readyState: 'complete'\n      };\n\n      // Build.\n      await element.mountInternal();\n      expect(element.readyState).to.equal('complete');\n      expect(loadEventSpy).to.be.calledOnce;\n      expect(loadEventSpy.firstCall.firstArg).to.contain({\n        bubbles: false\n      });\n      expect(errorEventSpy).to.not.be.called;\n    });","file":"unit/preact/test-base-element-runtime.js","skipped":false,"dir":"test"},{"name":"should update readyState=error from the component ref API","suites":["context"],"updatePoint":{"line":198,"column":65,"index":7060},"line":198,"code":"    it('should update readyState=error from the component ref API', async () => {\n      const loadEventSpy = env.sandbox.spy();\n      const errorEventSpy = env.sandbox.spy();\n      element.addEventListener('load', loadEventSpy);\n      element.addEventListener('error', errorEventSpy);\n      api = {\n        readyState: 'error'\n      };\n\n      // Build.\n      await element.mountInternal();\n      expect(element.readyState).to.equal('error');\n      expect(errorEventSpy).to.be.calledOnce;\n      expect(errorEventSpy.firstCall.firstArg).to.contain({\n        bubbles: false\n      });\n      expect(loadEventSpy).to.not.be.called;\n    });","file":"unit/preact/test-base-element-runtime.js","skipped":false,"dir":"test"},{"name":"should continue as loading from the ref API withouth readyState","suites":["context"],"updatePoint":{"line":216,"column":71,"index":7700},"line":216,"code":"    it('should continue as loading from the ref API withouth readyState', async () => {\n      const loadEventSpy = env.sandbox.spy();\n      const errorEventSpy = env.sandbox.spy();\n      element.addEventListener('load', loadEventSpy);\n      element.addEventListener('error', errorEventSpy);\n      api = {};\n\n      // Build.\n      await element.mountInternal();\n      expect(element.readyState).to.equal('loading');\n      expect(loadEventSpy).to.not.be.called;\n      expect(errorEventSpy).to.not.be.called;\n    });","file":"unit/preact/test-base-element-runtime.js","skipped":false,"dir":"test"},{"name":"should load with loading=auto by default","suites":["context"],"updatePoint":{"line":229,"column":48,"index":8191},"line":229,"code":"    it('should load with loading=auto by default', async () => {\n      await element.mountInternal();\n      expect(lastLoading).to.equal('auto');\n    });","file":"unit/preact/test-base-element-runtime.js","skipped":false,"dir":"test"},{"name":"should load with loading=eager on ensureLoaded","suites":["context"],"updatePoint":{"line":233,"column":54,"index":8351},"line":233,"code":"    it('should load with loading=eager on ensureLoaded', async () => {\n      await element.mountInternal();\n      expect(lastLoading).to.equal('auto');\n\n      // Should set loading=eager.\n      component.resetHistory();\n      element.ensureLoaded();\n      await waitFor(() => component.callCount > 0, 'component rerendered');\n      expect(lastLoading).to.equal('eager');\n\n      // Should reset back to loading=auto.\n      component.resetHistory();\n      lastProps.onReadyState('complete');\n      await waitFor(() => component.callCount > 0, 'component rerendered');\n      expect(lastLoading).to.equal('auto');\n    });","file":"unit/preact/test-base-element-runtime.js","skipped":false,"dir":"test"},{"name":"should call pause API on pauseCallback","suites":["pause"],"updatePoint":{"line":263,"column":46,"index":9375},"line":263,"code":"    it('should call pause API on pauseCallback', async () => {\n      const pauseStub = env.sandbox.stub();\n      api = {\n        pause: pauseStub\n      };\n      await element.mountInternal();\n      element.pause();\n      expect(pauseStub).to.be.calledOnce;\n    });","file":"unit/preact/test-base-element-runtime.js","skipped":false,"dir":"test"},{"name":"should unload on pauseCallback with unloadOnPause","suites":["pause"],"updatePoint":{"line":272,"column":57,"index":9651},"line":272,"code":"    it('should unload on pauseCallback with unloadOnPause', async () => {\n      Impl['unloadOnPause'] = true;\n      await element.mountInternal();\n      await waitFor(() => component.callCount > 0, 'component rendered');\n      element.pause();\n      component.resetHistory();\n      await waitFor(() => component.callCount > 0, 'component rendered');\n      expect(lastLoading).to.equal('unload');\n\n      // Reset loading after pause.\n      component.resetHistory();\n      lastProps.onReadyState('loading');\n      await waitFor(() => component.callCount > 0, 'component rendered');\n      expect(lastLoading).to.equal('auto');\n    });","file":"unit/preact/test-base-element-runtime.js","skipped":false,"dir":"test"},{"name":"should NOT track size until playing","suites":["pause"],"updatePoint":{"line":287,"column":43,"index":10269},"line":287,"code":"    it('should NOT track size until playing', async () => {\n      await element.mountInternal();\n      await waitFor(() => component.callCount > 0, 'component rendered');\n      expect(resizeObserverStub.isObserved(element)).to.be.false;\n      lastProps.onPlayingState(true);\n      expect(resizeObserverStub.isObserved(element)).to.be.true;\n      lastProps.onPlayingState(false);\n      expect(resizeObserverStub.isObserved(element)).to.be.false;\n    });","file":"unit/preact/test-base-element-runtime.js","skipped":false,"dir":"test"},{"name":"should track size when unloadOnPause when loaded","suites":["pause"],"updatePoint":{"line":296,"column":56,"index":10735},"line":296,"code":"    it('should track size when unloadOnPause when loaded', async () => {\n      Impl['unloadOnPause'] = true;\n      await element.mountInternal();\n      await waitFor(() => component.callCount > 0, 'component rendered');\n      expect(resizeObserverStub.isObserved(element)).to.be.false;\n      lastProps.onReadyState('complete');\n      expect(resizeObserverStub.isObserved(element)).to.be.true;\n      lastProps.onReadyState('loading');\n      expect(resizeObserverStub.isObserved(element)).to.be.false;\n    });","file":"unit/preact/test-base-element-runtime.js","skipped":false,"dir":"test"},{"name":"should NOT track size when disconnected","suites":["pause"],"updatePoint":{"line":306,"column":47,"index":11234},"line":306,"code":"    it('should NOT track size when disconnected', async () => {\n      await element.mountInternal();\n      await waitFor(() => component.callCount > 0, 'component rendered');\n      lastProps.onPlayingState(true);\n      expect(resizeObserverStub.isObserved(element)).to.be.true;\n      element.parentNode.removeChild(element);\n      expect(resizeObserverStub.isObserved(element)).to.be.false;\n    });","file":"unit/preact/test-base-element-runtime.js","skipped":false,"dir":"test"},{"name":"should pause element when size becomes zero","suites":["pause"],"updatePoint":{"line":314,"column":51,"index":11637},"line":314,"code":"    it('should pause element when size becomes zero', async () => {\n      const pauseStub = env.sandbox.stub();\n      api = {\n        pause: pauseStub\n      };\n      await element.mountInternal();\n      await waitFor(() => component.callCount > 0, 'component rendered');\n      lastProps.onPlayingState(true);\n      expect(resizeObserverStub.isObserved(element)).to.be.true;\n      expect(pauseStub).to.not.be.called;\n\n      // Non-zero size.\n      resizeObserverStub.notifySync({\n        target: element,\n        borderBoxSize: [{\n          inlineSize: 10,\n          blockSize: 10\n        }]\n      });\n      expect(pauseStub).to.not.be.called;\n\n      // Zero size.\n      resizeObserverStub.notifySync({\n        target: element,\n        borderBoxSize: [{\n          inlineSize: 0,\n          blockSize: 0\n        }]\n      });\n      expect(pauseStub).to.be.calledOnce;\n    });","file":"unit/preact/test-base-element-runtime.js","skipped":false,"dir":"test"},{"name":"should unrender component on disconnect","suites":["connect/disconnect"],"updatePoint":{"line":360,"column":47,"index":12954},"line":360,"code":"    it('should unrender component on disconnect', async () => {\n      await element.mountInternal();\n      await waitFor(() => getSlot(), 'content rendered');\n\n      // Disconnect.\n      removeElement(element);\n      await waitFor(() => getSlot() === null, 'content unrendered');\n    });","file":"unit/preact/test-base-element-runtime.js","skipped":false,"dir":"test"},{"name":"should rerender component on reconnect","suites":["connect/disconnect"],"updatePoint":{"line":368,"column":46,"index":13241},"line":368,"code":"    it('should rerender component on reconnect', async () => {\n      await element.mountInternal();\n      await waitFor(() => getSlot(), 'content rendered');\n      removeElement(element);\n      await waitFor(() => getSlot() === null, 'content unrendered');\n\n      // Reconnect.\n      doc.body.appendChild(element);\n      await waitFor(() => getSlot(), 'content rerendered');\n    });","file":"unit/preact/test-base-element-runtime.js","skipped":false,"dir":"test"},{"name":"should render with loading=auto when mounted","suites":["mount/unmount"],"updatePoint":{"line":387,"column":52,"index":13863},"line":387,"code":"    it('should render with loading=auto when mounted', async () => {\n      await element.mountInternal();\n      expect(lastLoading).to.equal('auto');\n    });","file":"unit/preact/test-base-element-runtime.js","skipped":false,"dir":"test"},{"name":"should render with loading=unload when unmounted","suites":["mount/unmount"],"updatePoint":{"line":391,"column":56,"index":14025},"line":391,"code":"    it('should render with loading=unload when unmounted', async () => {\n      // Block from rescheduling.\n      const scheduler = getSchedulerForDoc(env.ampdoc);\n      env.sandbox.stub(scheduler, 'schedule');\n\n      // Mount the first time.\n      await element.mountInternal();\n\n      // Unmount.\n      component.resetHistory();\n      element.unmount();\n      await waitFor(() => component.callCount > 0, 'component rendered');\n      expect(lastLoading).to.equal('unload');\n\n      // Mount again.\n      component.resetHistory();\n      await element.mountInternal();\n      await waitFor(() => component.callCount > 0, 'component rendered');\n      expect(lastLoading).to.equal('auto');\n    });","file":"unit/preact/test-base-element-runtime.js","skipped":false,"dir":"test"},{"name":"waits for CE definition","suites":["mount/unmount"],"updatePoint":{"line":439,"column":29,"index":15246},"line":439,"code":"  it('waits for CE definition', async () => {\n    const el = doc.createElement('amp-preact');\n    doc.body.appendChild(el);\n    const p = whenUpgraded(el);\n    upgradeOrRegisterElement(win, 'amp-preact', Impl);\n    el.mountInternal();\n    const api = await p;\n    expect(api.key).to.be.true;\n  });","file":"unit/preact/test-base-element-runtime.js","skipped":false,"dir":"test"},{"name":"waits for build","suites":["mount/unmount"],"updatePoint":{"line":448,"column":21,"index":15536},"line":448,"code":"  it('waits for build', async () => {\n    const el = doc.createElement('amp-preact');\n    doc.body.appendChild(el);\n    upgradeOrRegisterElement(win, 'amp-preact', Impl);\n    const p = whenUpgraded(el);\n    el.mountInternal();\n    const api = await p;\n    expect(api.key).to.be.true;\n  });","file":"unit/preact/test-base-element-runtime.js","skipped":false,"dir":"test"},{"name":"resolves after mount","suites":["mount/unmount"],"updatePoint":{"line":457,"column":26,"index":15831},"line":457,"code":"  it('resolves after mount', async () => {\n    const el = doc.createElement('amp-preact');\n    doc.body.appendChild(el);\n    upgradeOrRegisterElement(win, 'amp-preact', Impl);\n    await el.mountInternal();\n    const p = whenUpgraded(el);\n    const api = await p;\n    expect(api.key).to.be.true;\n  });","file":"unit/preact/test-base-element-runtime.js","skipped":false,"dir":"test"},{"name":"wraps API to preserve object identity accross rerenders","suites":["mount/unmount"],"updatePoint":{"line":466,"column":61,"index":16167},"line":466,"code":"  it('wraps API to preserve object identity accross rerenders', async () => {\n    let imperativeApi;\n    let setState;\n    Component = env.sandbox.stub().callsFake((props, ref) => {\n      const [state, set] = Preact.useState(0);\n      setState = set;\n      Preact.useImperativeHandle(ref, () => {\n        return imperativeApi = {\n          state\n        };\n      });\n    });\n    Impl['Component'] = forwardRef(Component);\n    const el = doc.createElement('amp-preact');\n    doc.body.appendChild(el);\n    upgradeOrRegisterElement(win, 'amp-preact', Impl);\n    const p = whenUpgraded(el);\n    el.mountInternal();\n    const api = await p;\n    expect(api).not.to.equal(imperativeApi);\n    expect(api.state).to.equal(0);\n    const current = Component.callCount;\n    setState(1);\n    await waitFor(() => Component.callCount > current, 'rerender after setState');\n    const api2 = await whenUpgraded(el);\n    expect(api2).to.equal(api);\n    expect(api.state).to.equal(1);\n  });","file":"unit/preact/test-base-element-runtime.js","skipped":false,"dir":"test"},{"name":"throws when API surface changes after rerender","suites":["mount/unmount"],"updatePoint":{"line":494,"column":52,"index":17129},"line":494,"code":"  it('throws when API surface changes after rerender', async () => {\n    let setState;\n    Component = env.sandbox.stub().callsFake((props, ref) => {\n      const [api, set] = Preact.useState({\n        first: true\n      });\n      setState = set;\n      Preact.useImperativeHandle(ref, () => {\n        return api;\n      });\n    });\n    Impl['Component'] = forwardRef(Component);\n    const el = doc.createElement('amp-preact');\n    doc.body.appendChild(el);\n    upgradeOrRegisterElement(win, 'amp-preact', Impl);\n    const p = whenUpgraded(el);\n    el.mountInternal();\n    const api = await p;\n    expect(api.first).to.be.true;\n    expect(el).not.to.have.display('none');\n    const current = Component.callCount;\n    setState({\n      second: true\n    });\n    await waitFor(() => Component.callCount > current, 'rerender after setState');\n    expect(el).to.have.class('i-amphtml-error');\n  });","file":"unit/preact/test-base-element-runtime.js","skipped":false,"dir":"test"},{"name":"should use default values","suites":[],"updatePoint":{"line":16,"column":31,"index":898},"line":16,"code":"  it('should use default values', () => {\n    const wrapper = mount( /*#__PURE__*/React.createElement(WithAmpContext, null, /*#__PURE__*/React.createElement(Component, null)));\n    expect(wrapper.find(ContextReader).props()).to.contain({\n      renderable: true,\n      playable: true,\n      loading: 'auto',\n      computedLoading: 'auto'\n    });\n  });","file":"unit/preact/test-context.js","skipped":false,"dir":"test"},{"name":"should override renderable","suites":[],"updatePoint":{"line":25,"column":32,"index":1250},"line":25,"code":"  it('should override renderable', () => {\n    const wrapper = mount( /*#__PURE__*/React.createElement(WithAmpContext, {\n      renderable: false\n    }, /*#__PURE__*/React.createElement(Component, null)));\n    expect(wrapper.find(ContextReader).props()).to.contain({\n      renderable: false,\n      playable: false,\n      loading: 'lazy',\n      computedLoading: 'lazy'\n    });\n  });","file":"unit/preact/test-context.js","skipped":false,"dir":"test"},{"name":"should override playable","suites":[],"updatePoint":{"line":36,"column":30,"index":1629},"line":36,"code":"  it('should override playable', () => {\n    const wrapper = mount( /*#__PURE__*/React.createElement(WithAmpContext, {\n      playable: false\n    }, /*#__PURE__*/React.createElement(Component, null)));\n    expect(wrapper.find(ContextReader).props()).to.contain({\n      renderable: true,\n      playable: false,\n      loading: 'auto',\n      computedLoading: 'auto'\n    });\n  });","file":"unit/preact/test-context.js","skipped":false,"dir":"test"},{"name":"should override loading=lazy","suites":[],"updatePoint":{"line":47,"column":34,"index":2009},"line":47,"code":"  it('should override loading=lazy', () => {\n    const wrapper = mount( /*#__PURE__*/React.createElement(WithAmpContext, {\n      loading: 'lazy'\n    }, /*#__PURE__*/React.createElement(Component, null)));\n    expect(wrapper.find(ContextReader).props()).to.contain({\n      renderable: true,\n      playable: true,\n      loading: 'lazy',\n      computedLoading: 'lazy'\n    });\n  });","file":"unit/preact/test-context.js","skipped":false,"dir":"test"},{"name":"should override loading=eager","suites":[],"updatePoint":{"line":58,"column":35,"index":2389},"line":58,"code":"  it('should override loading=eager', () => {\n    const wrapper = mount( /*#__PURE__*/React.createElement(WithAmpContext, {\n      loading: 'eager'\n    }, /*#__PURE__*/React.createElement(Component, null)));\n    expect(wrapper.find(ContextReader).props()).to.contain({\n      renderable: true,\n      playable: true,\n      loading: 'eager',\n      computedLoading: 'eager'\n    });\n  });","file":"unit/preact/test-context.js","skipped":false,"dir":"test"},{"name":"should override prop.loading","suites":[],"updatePoint":{"line":69,"column":34,"index":2771},"line":69,"code":"  it('should override prop.loading', () => {\n    const wrapper = mount( /*#__PURE__*/React.createElement(WithAmpContext, {\n      loading: 'eager'\n    }, /*#__PURE__*/React.createElement(Component, {\n      loading: 'unload'\n    })));\n    expect(wrapper.find(ContextReader).props()).to.contain({\n      renderable: true,\n      playable: true,\n      loading: 'eager',\n      computedLoading: 'unload'\n    });\n  });","file":"unit/preact/test-context.js","skipped":false,"dir":"test"},{"name":"should keep in load mode when started","suites":[],"updatePoint":{"line":82,"column":43,"index":3190},"line":82,"code":"  it('should keep in load mode when started', () => {\n    const wrapper = mount( /*#__PURE__*/React.createElement(WithAmpContext, null, /*#__PURE__*/React.createElement(Component, null)));\n    expect(wrapper.find(ContextReader).props()).to.contain({\n      loading: 'auto',\n      computedLoading: 'auto'\n    });\n    wrapper.setProps({\n      loading: 'lazy'\n    });\n    expect(wrapper.find(ContextReader).props()).to.contain({\n      loading: 'lazy',\n      computedLoading: 'lazy'\n    });\n  });","file":"unit/preact/test-context.js","skipped":false,"dir":"test"},{"name":"should cancel load on unload even when started","suites":[],"updatePoint":{"line":96,"column":52,"index":3691},"line":96,"code":"  it('should cancel load on unload even when started', () => {\n    const wrapper = mount( /*#__PURE__*/React.createElement(WithAmpContext, null, /*#__PURE__*/React.createElement(Component, null)));\n    expect(wrapper.find(ContextReader).props()).to.contain({\n      loading: 'auto',\n      computedLoading: 'auto'\n    });\n    wrapper.setProps({\n      loading: 'unload'\n    });\n    expect(wrapper.find(ContextReader).props()).to.contain({\n      loading: 'unload',\n      computedLoading: 'unload'\n    });\n  });","file":"unit/preact/test-context.js","skipped":false,"dir":"test"},{"name":"check config","suites":["CanRender"],"updatePoint":{"line":4,"column":20,"index":188},"line":4,"code":"    it('check config', () => {\n      expect(CanRender.defaultValue).to.be.true;\n      expect(CanRender.deps).to.have.lengthOf(0);\n    });","file":"unit/preact/test-contextprops.js","skipped":false,"dir":"test"},{"name":"should calc recursive","suites":["CanRender"],"updatePoint":{"line":8,"column":29,"index":335},"line":8,"code":"    it('should calc recursive', () => {\n      expect(CanRender.recursive([true])).to.be.true;\n      expect(CanRender.recursive([false])).to.be.false;\n      expect(CanRender.recursive([true, true])).to.be.true;\n      expect(CanRender.recursive([true, false])).to.be.false;\n      expect(CanRender.recursive([false, false])).to.be.false;\n    });","file":"unit/preact/test-contextprops.js","skipped":false,"dir":"test"},{"name":"should compute from the parent value","suites":["CanRender"],"updatePoint":{"line":15,"column":44,"index":693},"line":15,"code":"    it('should compute from the parent value', () => {\n      expect(CanRender.compute(null, [true], /* parentValue */true)).to.be.true;\n      expect(CanRender.compute(null, [true], /* parentValue */false)).to.be.false;\n    });","file":"unit/preact/test-contextprops.js","skipped":false,"dir":"test"},{"name":"should compute from the onput","suites":["CanRender"],"updatePoint":{"line":19,"column":37,"index":913},"line":19,"code":"    it('should compute from the onput', () => {\n      const parentValue = true;\n      expect(CanRender.compute(null, [], parentValue)).to.be.true;\n      expect(CanRender.compute(null, [true], parentValue)).to.be.true;\n      expect(CanRender.compute(null, [true, true], parentValue)).to.be.true;\n      expect(CanRender.compute(null, [false], parentValue)).to.be.false;\n      expect(CanRender.compute(null, [true, false], parentValue)).to.be.false;\n    });","file":"unit/preact/test-contextprops.js","skipped":false,"dir":"test"},{"name":"check config","suites":["CanPlay"],"updatePoint":{"line":29,"column":20,"index":1387},"line":29,"code":"    it('check config', () => {\n      expect(CanPlay.defaultValue).to.be.true;\n      expect(CanPlay.deps).to.deep.equal([CanRender]);\n    });","file":"unit/preact/test-contextprops.js","skipped":false,"dir":"test"},{"name":"should calc recursive","suites":["CanPlay"],"updatePoint":{"line":33,"column":29,"index":1537},"line":33,"code":"    it('should calc recursive', () => {\n      expect(CanPlay.recursive([true])).to.be.true;\n      expect(CanPlay.recursive([false])).to.be.false;\n      expect(CanPlay.recursive([true, true])).to.be.true;\n      expect(CanPlay.recursive([true, false])).to.be.false;\n      expect(CanPlay.recursive([false, false])).to.be.false;\n    });","file":"unit/preact/test-contextprops.js","skipped":false,"dir":"test"},{"name":"should compute from the parent value","suites":["CanPlay"],"updatePoint":{"line":40,"column":44,"index":1885},"line":40,"code":"    it('should compute from the parent value', () => {\n      const canRender = true;\n      expect(CanPlay.compute(null, [true], /* parentValue */true, canRender)).to.be.true;\n      expect(CanPlay.compute(null, [true], /* parentValue */false, canRender)).to.be.false;\n    });","file":"unit/preact/test-contextprops.js","skipped":false,"dir":"test"},{"name":"should compute from the canRender dep","suites":["CanPlay"],"updatePoint":{"line":45,"column":45,"index":2161},"line":45,"code":"    it('should compute from the canRender dep', () => {\n      const parentValue = true;\n      expect(CanPlay.compute(null, [true], parentValue, /* canRender */true)).to.be.true;\n      expect(CanPlay.compute(null, [true], parentValue, /* canRender */false)).to.be.false;\n    });","file":"unit/preact/test-contextprops.js","skipped":false,"dir":"test"},{"name":"should compute from the onput","suites":["CanPlay"],"updatePoint":{"line":50,"column":37,"index":2431},"line":50,"code":"    it('should compute from the onput', () => {\n      const parentValue = true;\n      const canRender = true;\n      expect(CanPlay.compute(null, [], parentValue, canRender)).to.be.true;\n      expect(CanPlay.compute(null, [true], parentValue, canRender)).to.be.true;\n      expect(CanPlay.compute(null, [true, true], parentValue, canRender)).to.be.true;\n      expect(CanPlay.compute(null, [false], parentValue, canRender)).to.be.false;\n      expect(CanPlay.compute(null, [true, false], parentValue, canRender)).to.be.false;\n    });","file":"unit/preact/test-contextprops.js","skipped":false,"dir":"test"},{"name":"check config","suites":["LoadingProp"],"updatePoint":{"line":61,"column":20,"index":2984},"line":61,"code":"    it('check config', () => {\n      expect(LoadingProp.defaultValue).to.equal('auto');\n      expect(LoadingProp.deps).to.deep.equal([CanRender]);\n    });","file":"unit/preact/test-contextprops.js","skipped":false,"dir":"test"},{"name":"should be always recursive","suites":["LoadingProp"],"updatePoint":{"line":65,"column":34,"index":3153},"line":65,"code":"    it('should be always recursive', () => {\n      expect(LoadingProp.recursive).to.be.true;\n    });","file":"unit/preact/test-contextprops.js","skipped":false,"dir":"test"},{"name":"should compute from the parent value","suites":["LoadingProp"],"updatePoint":{"line":68,"column":44,"index":3264},"line":68,"code":"    it('should compute from the parent value', () => {\n      const canRender = true;\n      const parentValue = 'lazy';\n      expect(LoadingProp.compute(null, ['auto'], parentValue, canRender)).to.equal('lazy');\n      expect(LoadingProp.compute(null, ['eager'], parentValue, canRender)).to.equal('eager');\n    });","file":"unit/preact/test-contextprops.js","skipped":false,"dir":"test"},{"name":"should compute from the canRender dep","suites":["LoadingProp"],"updatePoint":{"line":74,"column":45,"index":3578},"line":74,"code":"    it('should compute from the canRender dep', () => {\n      const parentValue = 'auto';\n      expect(LoadingProp.compute(null, ['auto'], parentValue, /* canRender */true)).to.equal('auto');\n      expect(LoadingProp.compute(null, ['auto'], parentValue, /* canRender */false)).to.equal('lazy');\n    });","file":"unit/preact/test-contextprops.js","skipped":false,"dir":"test"},{"name":"should compute from the onput","suites":["LoadingProp"],"updatePoint":{"line":79,"column":37,"index":3873},"line":79,"code":"    it('should compute from the onput', () => {\n      const parentValue = 'auto';\n      const canRender = true;\n      expect(LoadingProp.compute(null, [], parentValue, canRender)).to.equal('auto');\n      expect(LoadingProp.compute(null, ['auto'], parentValue, canRender)).to.equal('auto');\n      expect(LoadingProp.compute(null, ['lazy'], parentValue, canRender)).to.equal('lazy');\n      expect(LoadingProp.compute(null, ['auto', 'lazy'], parentValue, canRender)).to.equal('lazy');\n      expect(LoadingProp.compute(null, ['eager', 'lazy'], parentValue, canRender)).to.equal('eager');\n      expect(LoadingProp.compute(null, ['eager', 'unload'], parentValue, canRender)).to.equal('unload');\n    });","file":"unit/preact/test-contextprops.js","skipped":false,"dir":"test"},{"name":"should pass-through the props and render the component","suites":[],"updatePoint":{"line":18,"column":60,"index":561},"line":18,"code":"  it('should pass-through the props and render the component', () => {\n    expect(wrapper.find('div').props()).to.deep.equal({\n      foo: 'foo'\n    });\n    expect(Component).callCount(1);\n  });","file":"unit/preact/test-memo.js","skipped":false,"dir":"test"},{"name":"should rerender if the props change","suites":[],"updatePoint":{"line":24,"column":41,"index":736},"line":24,"code":"  it('should rerender if the props change', () => {\n    wrapper.setProps({\n      foo: 'BAR'\n    });\n    expect(Component).callCount(2);\n  });","file":"unit/preact/test-memo.js","skipped":false,"dir":"test"},{"name":"should not rerender if the props haven't changed","suites":[],"updatePoint":{"line":30,"column":54,"index":891},"line":30,"code":"  it(\"should not rerender if the props haven't changed\", () => {\n    wrapper.setProps({\n      foo: 'foo'\n    });\n    expect(Component).callCount(1);\n  });","file":"unit/preact/test-memo.js","skipped":false,"dir":"test"},{"name":"should rerender if an extra prop is added","suites":[],"updatePoint":{"line":36,"column":47,"index":1039},"line":36,"code":"  it('should rerender if an extra prop is added', () => {\n    wrapper.setProps({\n      bar: 'bar'\n    });\n    expect(Component).callCount(2);\n  });","file":"unit/preact/test-memo.js","skipped":false,"dir":"test"},{"name":"should set context props on a slot","suites":[],"updatePoint":{"line":25,"column":40,"index":1363},"line":25,"code":"  it('should set context props on a slot', async () => {\n    const slot = wrapper.find(Slot).getDOMNode();\n    await expect(getProp(slot, CanRender)).to.be.eventually.true;\n    await expect(getProp(slot, CanPlay)).to.be.eventually.true;\n    await expect(getProp(slot, LoadingProp)).to.be.eventually.equal('auto');\n  });","file":"unit/preact/test-slot.js","skipped":false,"dir":"test"},{"name":"should update CanRender on a slot","suites":[],"updatePoint":{"line":31,"column":39,"index":1682},"line":31,"code":"  it('should update CanRender on a slot', async () => {\n    wrapper.setProps({\n      renderable: false\n    });\n    const slot = wrapper.find(Slot).getDOMNode();\n    await expect(getProp(slot, CanRender)).to.be.eventually.false;\n    await expect(getProp(slot, CanPlay)).to.be.eventually.false;\n    await expect(getProp(slot, LoadingProp)).to.be.eventually.equal('lazy');\n  });","file":"unit/preact/test-slot.js","skipped":false,"dir":"test"},{"name":"should update CanPlay on a slot","suites":[],"updatePoint":{"line":40,"column":37,"index":2056},"line":40,"code":"  it('should update CanPlay on a slot', async () => {\n    wrapper.setProps({\n      playable: false\n    });\n    const slot = wrapper.find(Slot).getDOMNode();\n    await expect(getProp(slot, CanRender)).to.be.eventually.true;\n    await expect(getProp(slot, CanPlay)).to.be.eventually.false;\n    await expect(getProp(slot, LoadingProp)).to.be.eventually.equal('auto');\n  });","file":"unit/preact/test-slot.js","skipped":false,"dir":"test"},{"name":"should update LoadingProp on a slot","suites":[],"updatePoint":{"line":49,"column":41,"index":2431},"line":49,"code":"  it('should update LoadingProp on a slot', async () => {\n    wrapper.setProps({\n      loading: 'eager'\n    });\n    const slot = wrapper.find(Slot).getDOMNode();\n    await expect(getProp(slot, CanRender)).to.be.eventually.true;\n    await expect(getProp(slot, CanPlay)).to.be.eventually.true;\n    await expect(getProp(slot, LoadingProp)).to.be.eventually.equal('eager');\n  });","file":"unit/preact/test-slot.js","skipped":false,"dir":"test"},{"name":"should reset props on unmount","suites":[],"updatePoint":{"line":58,"column":35,"index":2801},"line":58,"code":"  it('should reset props on unmount', async () => {\n    wrapper.setProps({\n      renderable: false\n    });\n    const slot = wrapper.find(Slot).getDOMNode();\n    await expect(getProp(slot, CanRender)).to.be.eventually.false;\n    wrapper.unmount();\n    await expect(getProp(slot, CanRender)).to.be.eventually.true;\n  });","file":"unit/preact/test-slot.js","skipped":false,"dir":"test"},{"name":"should load AMP elements on mount","suites":["with Shadow DOM"],"updatePoint":{"line":121,"column":41,"index":4683},"line":121,"code":"    it('should load AMP elements on mount', () => {\n      clock.runAll();\n      expect(child1.ensureLoaded).to.be.calledOnce;\n      expect(child2.ensureLoaded).to.be.calledOnce;\n      expect(child1.unmount).to.not.be.called;\n      expect(child2.unmount).to.not.be.called;\n      expect(child1.pause).to.not.be.called;\n      expect(child2.pause).to.not.be.called;\n    });","file":"unit/preact/test-slot.js","skipped":false,"dir":"test"},{"name":"should unmount AMP elements on unmount","suites":["with Shadow DOM"],"updatePoint":{"line":130,"column":46,"index":5058},"line":130,"code":"    it('should unmount AMP elements on unmount', () => {\n      wrapper.unmount();\n      clock.runAll();\n      expect(child1.unmount).to.be.calledOnce;\n      expect(child2.unmount).to.be.calledOnce;\n      expect(child1.pause).to.not.be.called;\n      expect(child2.pause).to.not.be.called;\n    });","file":"unit/preact/test-slot.js","skipped":false,"dir":"test"},{"name":"should pause AMP elements when playable changes","suites":["with Shadow DOM"],"updatePoint":{"line":138,"column":55,"index":5363},"line":138,"code":"    it('should pause AMP elements when playable changes', () => {\n      wrapper.setProps({\n        playable: false\n      });\n      clock.runAll();\n      expect(child1.pause).to.be.calledOnce;\n      expect(child2.pause).to.be.calledOnce;\n      expect(child1.unmount).to.not.be.called;\n      expect(child2.unmount).to.not.be.called;\n    });","file":"unit/preact/test-slot.js","skipped":false,"dir":"test"},{"name":"should pause before mount","suites":["with Shadow DOM"],"updatePoint":{"line":148,"column":33,"index":5680},"line":148,"code":"    it('should pause before mount', () => {\n      wrapper.unmount();\n      clock.runAll();\n      child1.ensureLoaded.resetHistory();\n      child1.pause.resetHistory();\n      child1.unmount.resetHistory();\n      const order = [];\n      child1.ensureLoaded.callsFake(() => order.push('ensureLoaded'));\n      child1.pause.callsFake(() => order.push('pause'));\n\n      // Mount in non-playable mode.\n      wrapper.setProps({\n        playable: false\n      });\n      wrapper.mount();\n      clock.runAll();\n      expect(child1.pause).to.be.calledOnce;\n      expect(child1.ensureLoaded).to.be.calledOnce;\n      expect(child1.unmount).to.not.be.called;\n      expect(order).to.deep.equal(['pause', 'ensureLoaded']);\n    });","file":"unit/preact/test-slot.js","skipped":false,"dir":"test"},{"name":"should load AMP elements on mount","suites":["with Shadow DOM and loading=lazy slot"],"updatePoint":{"line":201,"column":41,"index":7351},"line":201,"code":"    it('should load AMP elements on mount', () => {\n      clock.runAll();\n      expect(child1.ensureLoaded).to.not.be.called;\n      expect(child2.ensureLoaded).to.not.be.called;\n      expect(child1.unmount).to.not.be.called;\n      expect(child2.unmount).to.not.be.called;\n      expect(child1.pause).to.not.be.called;\n      expect(child2.pause).to.not.be.called;\n    });","file":"unit/preact/test-slot.js","skipped":false,"dir":"test"},{"name":"should unmount AMP elements on unmount","suites":["with Shadow DOM and loading=lazy slot"],"updatePoint":{"line":210,"column":46,"index":7726},"line":210,"code":"    it('should unmount AMP elements on unmount', () => {\n      wrapper.unmount();\n      clock.runAll();\n      expect(child1.unmount).to.be.calledOnce;\n      expect(child2.unmount).to.be.calledOnce;\n      expect(child1.pause).to.not.be.called;\n      expect(child2.pause).to.not.be.called;\n    });","file":"unit/preact/test-slot.js","skipped":false,"dir":"test"},{"name":"should pause AMP elements when playable changes","suites":["with Shadow DOM and loading=lazy slot"],"updatePoint":{"line":218,"column":55,"index":8031},"line":218,"code":"    it('should pause AMP elements when playable changes', () => {\n      wrapper.setProps({\n        playable: false\n      });\n      clock.runAll();\n      expect(child1.pause).to.be.calledOnce;\n      expect(child2.pause).to.be.calledOnce;\n      expect(child1.unmount).to.not.be.called;\n      expect(child2.unmount).to.not.be.called;\n    });","file":"unit/preact/test-slot.js","skipped":false,"dir":"test"},{"name":"should load AMP elements on mount","suites":["with Light DOM"],"updatePoint":{"line":265,"column":41,"index":9523},"line":265,"code":"    it('should load AMP elements on mount', () => {\n      const child1 = child1Ref.current;\n      const child2 = child2Ref.current;\n      clock.runAll();\n      expect(child1.ensureLoaded).to.be.calledOnce;\n      expect(child2.ensureLoaded).to.be.calledOnce;\n      expect(child1.unmount).to.not.be.called;\n      expect(child2.unmount).to.not.be.called;\n      expect(child1.pause).to.not.be.called;\n      expect(child2.pause).to.not.be.called;\n    });","file":"unit/preact/test-slot.js","skipped":false,"dir":"test"},{"name":"should unmount AMP elements on unmount","suites":["with Light DOM"],"updatePoint":{"line":276,"column":46,"index":9978},"line":276,"code":"    it('should unmount AMP elements on unmount', () => {\n      const child1 = child1Ref.current;\n      const child2 = child2Ref.current;\n      wrapper.unmount();\n      clock.runAll();\n      expect(child1.unmount).to.be.calledOnce;\n      expect(child2.unmount).to.be.calledOnce;\n      expect(child1.pause).to.not.be.called;\n      expect(child2.pause).to.not.be.called;\n    });","file":"unit/preact/test-slot.js","skipped":false,"dir":"test"},{"name":"should pause AMP elements when playable changes","suites":["with Light DOM"],"updatePoint":{"line":286,"column":55,"index":10363},"line":286,"code":"    it('should pause AMP elements when playable changes', () => {\n      const child1 = child1Ref.current;\n      const child2 = child2Ref.current;\n      wrapper.setProps({\n        playable: false\n      });\n      clock.runAll();\n      expect(child1.pause).to.be.calledOnce;\n      expect(child2.pause).to.be.calledOnce;\n      expect(child1.unmount).to.not.be.called;\n      expect(child2.unmount).to.not.be.called;\n    });","file":"unit/preact/test-slot.js","skipped":false,"dir":"test"},{"name":"should create slot and set corresponding slot attr","suites":["with Light DOM"],"updatePoint":{"line":306,"column":56,"index":10924},"line":306,"code":"  it('should create slot and set corresponding slot attr', () => {\n    const element = doc.createElement('div');\n    const slot = createSlot(element, 'element');\n    expect(element.getAttribute('slot')).to.equal('element');\n    expect(slot.type).to.equal(Slot);\n    expect(slot.props).to.deep.equal({\n      'name': 'element'\n    });\n  });","file":"unit/preact/test-slot.js","skipped":false,"dir":"test"},{"name":"should create slot with props","suites":["with Light DOM"],"updatePoint":{"line":315,"column":35,"index":11242},"line":315,"code":"  it('should create slot with props', () => {\n    const element = doc.createElement('div');\n    const slot = createSlot(element, 'element', {\n      'propA': true\n    });\n    expect(element.getAttribute('slot')).to.equal('element');\n    expect(slot.type).to.equal(Slot);\n    expect(slot.props).to.deep.equal({\n      'name': 'element',\n      'propA': true\n    });\n  });","file":"unit/preact/test-slot.js","skipped":false,"dir":"test"},{"name":"should create slot function and set corresponding slot attr","suites":["with Light DOM"],"updatePoint":{"line":327,"column":65,"index":11640},"line":327,"code":"  it('should create slot function and set corresponding slot attr', () => {\n    const element = doc.createElement('div');\n    const slotComp = createSlot(element, 'element', {}, /* as */true);\n    expect(element.getAttribute('slot')).to.equal('element');\n    expect(typeof slotComp).to.equal('function');\n    expect(slotComp.name).to.equal('SlotWithProps');\n    const slot = slotComp();\n    expect(slot.type).to.equal(Slot);\n    expect(slot.props).to.deep.equal({\n      'name': 'element'\n    });\n  });","file":"unit/preact/test-slot.js","skipped":false,"dir":"test"},{"name":"should create slot function with props","suites":["with Light DOM"],"updatePoint":{"line":339,"column":44,"index":12121},"line":339,"code":"  it('should create slot function with props', () => {\n    const element = doc.createElement('div');\n    const slotComp = createSlot(element, 'element', {\n      'propA': true\n    }, /* as */true);\n    expect(element.getAttribute('slot')).to.equal('element');\n    expect(typeof slotComp).to.equal('function');\n    expect(slotComp.name).to.equal('SlotWithProps');\n    const slot = slotComp();\n    expect(slot.type).to.equal(Slot);\n    expect(slot.props).to.deep.equal({\n      'name': 'element',\n      'propA': true\n    });\n  });","file":"unit/preact/test-slot.js","skipped":false,"dir":"test"},{"name":"should return cached slot function","suites":["with Light DOM"],"updatePoint":{"line":354,"column":40,"index":12644},"line":354,"code":"  it('should return cached slot function', () => {\n    const element = doc.createElement('div');\n    const slotComp = createSlot(element, 'element', {}, /* as */true);\n    const slotComp2 = createSlot(element, 'element', {}, /* as */true);\n    expect(slotComp2).to.deep.equal(slotComp);\n  });","file":"unit/preact/test-slot.js","skipped":false,"dir":"test"},{"name":"should update cached slot function with new defaultProps","suites":["with Light DOM"],"updatePoint":{"line":360,"column":62,"index":12959},"line":360,"code":"  it('should update cached slot function with new defaultProps', () => {\n    const element = doc.createElement('div');\n    const slotComp = createSlot(element, 'element', {\n      'propA': false\n    }, /* as */true);\n    const slotComp2 = createSlot(element, 'element', {\n      'propA': true\n    }, /* as */true);\n    expect(slotComp2).not.to.deep.equal(slotComp);\n  });","file":"unit/preact/test-slot.js","skipped":false,"dir":"test"},{"name":"should return unique slot functions for unique elements","suites":["with Light DOM"],"updatePoint":{"line":370,"column":61,"index":13328},"line":370,"code":"  it('should return unique slot functions for unique elements', () => {\n    const element = doc.createElement('div');\n    const slotComp = createSlot(element, 'element', {}, /* as */true);\n    const element2 = doc.createElement('div');\n    const slotComp2 = createSlot(element2, 'element', {}, /* as */true);\n    expect(slotComp2).not.to.deep.equal(slotComp);\n  });","file":"unit/preact/test-slot.js","skipped":false,"dir":"test"},{"name":"should instrument a window","suites":[],"updatePoint":{"line":16,"column":32,"index":563},"line":16,"code":"  it('should instrument a window', () => {\n    expect(testWin.setTimeout).to.match(/native/);\n    manageWin(testWin);\n    testWindow(testWin);\n  });","file":"unit/test-3p-environment.js","skipped":false,"dir":"test"},{"name":"should instrument dynamically created child iframes: srcdoc","suites":[],"updatePoint":{"line":21,"column":65,"index":745},"line":21,"code":"  it('should instrument dynamically created child iframes: srcdoc', () => {\n    expect(testWin.setTimeout).to.match(/native/);\n    manageWin(testWin);\n    const iframe = makeChildIframeSrcdoc(testWin);\n    testWindow(testWin);\n    return waitForMutationObserver(iframe).then(() => {\n      testWindow(iframe.contentWindow);\n    });\n  });","file":"unit/test-3p-environment.js","skipped":false,"dir":"test"},{"name":"should instrument dynamically created child iframes: doc.write","suites":[],"updatePoint":{"line":30,"column":68,"index":1085},"line":30,"code":"  it('should instrument dynamically created child iframes: doc.write', () => {\n    expect(testWin.setTimeout).to.match(/native/);\n    manageWin(testWin);\n    const iframe = makeChildIframeDocWrite(testWin);\n    testWindow(testWin);\n    return waitForMutationObserver(iframe).then(() => {\n      testWindow(iframe.contentWindow);\n    });\n  });","file":"unit/test-3p-environment.js","skipped":false,"dir":"test"},{"name":"should instrument nested child iframes: doc.write","suites":[],"updatePoint":{"line":39,"column":55,"index":1414},"line":39,"code":"  it('should instrument nested child iframes: doc.write', () => {\n    expect(testWin.setTimeout).to.match(/native/);\n    manageWin(testWin);\n    const iframe = makeChildIframeDocWrite(testWin);\n    testWindow(testWin);\n    return waitForMutationObserver(iframe).then(() => {\n      testWindow(iframe.contentWindow);\n      const i0 = makeChildIframeDocWrite(iframe.contentWindow);\n      const i1 = makeChildIframeDocWrite(iframe.contentWindow);\n      return waitForMutationObserver(i1).then(() => {\n        testWindow(i0.contentWindow);\n        testWindow(i1.contentWindow);\n        const i2 = makeChildIframeDocWrite(iframe.contentWindow);\n        return waitForMutationObserver(i2).then(() => {\n          testWindow(i2.contentWindow);\n        });\n      });\n    });\n  });","file":"unit/test-3p-environment.js","skipped":false,"dir":"test"},{"name":"should instrument nested child iframes: mixed","suites":[],"updatePoint":{"line":58,"column":51,"index":2181},"line":58,"code":"  it('should instrument nested child iframes: mixed', () => {\n    expect(testWin.setTimeout).to.match(/native/);\n    manageWin(testWin);\n    const iframe = makeChildIframeSrcdoc(testWin);\n    testWindow(testWin);\n    return waitForMutationObserver(iframe).then(() => {\n      testWindow(iframe.contentWindow);\n      const i0 = makeChildIframeDocWrite(iframe.contentWindow);\n      const i1 = makeChildIframeDocWrite(iframe.contentWindow);\n      return waitForMutationObserver(i1).then(() => {\n        testWindow(i0.contentWindow);\n        testWindow(i1.contentWindow);\n        const i2 = makeChildIframeDocWrite(iframe.contentWindow);\n        return waitForMutationObserver(i2).then(() => {\n          testWindow(i2.contentWindow);\n        });\n      });\n    });\n  });","file":"unit/test-3p-environment.js","skipped":false,"dir":"test"},{"name":"throttle setTimeout","suites":["timers"],"updatePoint":{"line":97,"column":27,"index":3449},"line":97,"code":"    it('throttle setTimeout', () => {\n      manageWin(testWin);\n      testWin.setTimeout(add('a'), 50);\n      testWin.setTimeout(add('b'), 60);\n      testWin.setTimeout(add('c'), 100);\n      clock.tick(99);\n      expect(progress).to.equal('ab');\n      clock.tick(1);\n      expect(progress).to.equal('abc');\n      setInViewportForTesting(false);\n      testWin.setTimeout(add('d'), 100);\n      const t0 = testWin.setTimeout(add('canceled'), 100);\n      testWin.clearTimeout(t0);\n      clock.tick(100);\n      expect(progress).to.equal('abc');\n      clock.tick(999);\n      expect(progress).to.equal('abc');\n      clock.tick(1);\n      expect(progress).to.equal('abcd');\n      setInViewportForTesting(true);\n      testWin.setTimeout(add('e'), 100);\n      const t1 = testWin.setTimeout(add('canceled'), 100);\n      testWin.clearTimeout(t1);\n      clock.tick(100);\n      expect(progress).to.equal('abcde');\n    });","file":"unit/test-3p-environment.js","skipped":false,"dir":"test"},{"name":"throttle setInterval","suites":["timers"],"updatePoint":{"line":123,"column":28,"index":4357},"line":123,"code":"    it('throttle setInterval', () => {\n      manageWin(testWin);\n      const ia = testWin.setInterval(add('a'), 1);\n      testWin.setInterval(add('b'), 10);\n      const ic = testWin.setInterval(add('c'), 20);\n      clock.tick(20);\n      expect(progress).to.equal('aaaaaaaaabaaaaaaaaaacba');\n      setInViewportForTesting(false);\n      clock.tick(20);\n      expect(progress).to.equal('aaaaaaaaabaaaaaaaaaacbaabc');\n      clock.tick(980);\n      expect(progress).to.equal('aaaaaaaaabaaaaaaaaaacbaabc');\n      setInViewportForTesting(true);\n      clock.tick(20);\n      expect(progress).to.equal('aaaaaaaaabaaaaaaaaaacbaabcaaaaaaaaaaaaaaaaaaba');\n      testWin.clearInterval(ia);\n      testWin.clearInterval(ic);\n      clock.tick(20);\n      expect(progress).to.equal('aaaaaaaaabaaaaaaaaaacbaabcaaaaaaaaaaaaaaaaaababb');\n      testWin.ran = false;\n      testWin.setInterval('ran=true', 1);\n      clock.tick(1);\n      expect(window.ran).to.be.equal(undefined);\n      expect(testWin.ran).to.be.true;\n    });","file":"unit/test-3p-environment.js","skipped":false,"dir":"test"},{"name":"should support multi arg forms","suites":["timers"],"updatePoint":{"line":148,"column":38,"index":5367},"line":148,"code":"    it('should support multi arg forms', () => {\n      manageWin(testWin);\n      testWin.setTimeout(add('a'), 50, '!', '?');\n      testWin.setTimeout(add('b'), 60, 'B');\n      testWin.setInterval(add('i'), 70, 'X', 'Z');\n      clock.tick(140);\n      expect(progress).to.equal('a!?bBiXZiXZ');\n    });","file":"unit/test-3p-environment.js","skipped":false,"dir":"test"},{"name":"should cancel uninstrumented timeouts","suites":["timers"],"updatePoint":{"line":156,"column":45,"index":5674},"line":156,"code":"    it('should cancel uninstrumented timeouts', () => {\n      const timeout = testWin.setTimeout(() => {\n        throw new Error('should not happen: timeout');\n      }, 0);\n      const interval = testWin.setInterval(() => {\n        throw new Error('should not happen: interval');\n      }, 0);\n      manageWin(testWin);\n      testWin.clearTimeout(timeout);\n      testWin.clearInterval(interval);\n      clock.tick(100);\n    });","file":"unit/test-3p-environment.js","skipped":false,"dir":"test"},{"name":"should throw when a string prefix does not match","suites":["validateSrcPrefix()"],"updatePoint":{"line":11,"column":56,"index":390},"line":11,"code":"    it('should throw when a string prefix does not match', () => {\n      expect(() => {\n        validateSrcPrefix('https:', 'http://example.org');\n      }).to.throw(/Invalid src/);\n    });","file":"unit/test-3p.js","skipped":false,"dir":"test"},{"name":"should throw when array prefixes do not match","suites":["validateSrcPrefix()"],"updatePoint":{"line":16,"column":53,"index":576},"line":16,"code":"    it('should throw when array prefixes do not match', () => {\n      expect(() => {\n        validateSrcPrefix(['https:', 'ftp:'], 'http://example.org');\n      }).to.throw(/Invalid src/);\n    });","file":"unit/test-3p.js","skipped":false,"dir":"test"},{"name":"should not throw when a string prefix matches","suites":["validateSrcPrefix()"],"updatePoint":{"line":21,"column":53,"index":772},"line":21,"code":"    it('should not throw when a string prefix matches', () => {\n      validateSrcPrefix('http:', 'http://example.org');\n    });","file":"unit/test-3p.js","skipped":false,"dir":"test"},{"name":"should not throw when any of the array prefixes match","suites":["validateSrcPrefix()"],"updatePoint":{"line":24,"column":61,"index":908},"line":24,"code":"    it('should not throw when any of the array prefixes match', () => {\n      validateSrcPrefix(['https:', 'http:'], 'http://example.org');\n      validateSrcPrefix(['http:', 'https:'], 'http://example.org');\n    });","file":"unit/test-3p.js","skipped":false,"dir":"test"},{"name":"should throw an error if src does not contain addyn","suites":["validateSrcPrefix()"],"updatePoint":{"line":29,"column":57,"index":1126},"line":29,"code":"  it('should throw an error if src does not contain addyn', () => {\n    expect(() => {\n      validateSrcContains('/addyn/', 'http://adserver.adtechus.com/');\n    }).to.throw(/Invalid src/);\n  });","file":"unit/test-3p.js","skipped":false,"dir":"test"},{"name":"should not throw if source contains /addyn/","suites":["validateSrcPrefix()"],"updatePoint":{"line":34,"column":49,"index":1314},"line":34,"code":"  it('should not throw if source contains /addyn/', () => {\n    validateSrcContains('/addyn/', 'http://adserver.adtechus.com/addyn/');\n  });","file":"unit/test-3p.js","skipped":false,"dir":"test"},{"name":"should check mandatory fields","suites":["validateData"],"updatePoint":{"line":38,"column":37,"index":1478},"line":38,"code":"    it('should check mandatory fields', () => {\n      validateData({\n        width: '',\n        height: false,\n        type: 'taboola',\n        referrer: true,\n        canonicalUrl: true,\n        pageViewId: true,\n        location: true,\n        mode: true\n      }, []);\n      clock.tick(1);\n      validateData({\n        width: '',\n        type: 'taboola',\n        foo: true,\n        bar: true\n      }, ['foo', 'bar']);\n      clock.tick(1);\n      allowConsoleError(() => {\n        expect(() => {\n          validateData({\n            width: '',\n            type: 'xxxxxx',\n            foo: true,\n            bar: true\n          }, ['foo', 'bar', 'persika']);\n        }).to.throw(/Missing attribute for xxxxxx: persika./);\n      });\n      allowConsoleError(() => {\n        expect(() => {\n          validateData({\n            width: '',\n            type: 'xxxxxx',\n            foo: true,\n            bar: true\n          }, [['red', 'green', 'blue']]);\n        }).to.throw(/xxxxxx must contain exactly one of attributes: red, green, blue./);\n      });\n    });","file":"unit/test-3p.js","skipped":false,"dir":"test"},{"name":"should allow mandatory fields to have 0 as a value","suites":["validateData"],"updatePoint":{"line":78,"column":58,"index":2555},"line":78,"code":"    it('should allow mandatory fields to have 0 as a value', () => {\n      validateData({\n        width: 0,\n        height: 0,\n        type: 'cats'\n      }, ['height', 'width']);\n    });","file":"unit/test-3p.js","skipped":false,"dir":"test"},{"name":"should check mandatory fields with alternative options","suites":["validateData"],"updatePoint":{"line":85,"column":62,"index":2746},"line":85,"code":"    it('should check mandatory fields with alternative options', () => {\n      validateData({\n        width: '',\n        type: 'taboola',\n        foo: true,\n        bar: true\n      }, [['foo', 'day', 'night']]);\n      clock.tick(1);\n    });","file":"unit/test-3p.js","skipped":false,"dir":"test"},{"name":"should check optional fields","suites":["validateData"],"updatePoint":{"line":94,"column":36,"index":2961},"line":94,"code":"    it('should check optional fields', () => {\n      validateData({\n        width: '',\n        height: false,\n        type: true,\n        referrer: true,\n        canonicalUrl: true,\n        pageViewId: true,\n        location: true,\n        mode: true\n      }, /* mandatory */[], /* optional */[]);\n      validateData({\n        width: '',\n        foo: true,\n        bar: true\n      }, /* mandatory */[], ['foo', 'bar']);\n      allowConsoleError(() => {\n        expect(() => {\n          validateData({\n            type: 'TEST',\n            foo: true,\n            'not-allowed': true\n          }, [], ['foo']);\n        }).to.throw(/Unknown attribute for TEST: not-allowed./);\n      });\n    });","file":"unit/test-3p.js","skipped":false,"dir":"test"},{"name":"should check mandatory and optional fields","suites":["validateData"],"updatePoint":{"line":120,"column":50,"index":3666},"line":120,"code":"    it('should check mandatory and optional fields', () => {\n      validateData({\n        width: '',\n        foo: true,\n        bar: true,\n        halo: 'world'\n      }, [['foo', 'fo'], 'bar'], ['halo']);\n    });","file":"unit/test-3p.js","skipped":false,"dir":"test"},{"name":"should run in next tick","suites":["validateData"],"updatePoint":{"line":129,"column":29,"index":3864},"line":129,"code":"  it('should run in next tick', () => {\n    let called = 0;\n    nextTick(window, () => {\n      called++;\n    });\n    return Promise.resolve(() => {\n      expect(called).to.equal(1);\n    });\n  });","file":"unit/test-3p.js","skipped":false,"dir":"test"},{"name":"should run in next tick (setTimeout)","suites":["validateData"],"updatePoint":{"line":138,"column":42,"index":4073},"line":138,"code":"  it('should run in next tick (setTimeout)', () => {\n    let called = 0;\n    nextTick({\n      setTimeout: fn => {\n        fn();\n      }\n    }, () => {\n      called++;\n    });\n    expect(called).to.equal(1);\n  });","file":"unit/test-3p.js","skipped":false,"dir":"test"},{"name":"should do work only in master","suites":["validateData"],"updatePoint":{"line":149,"column":35,"index":4279},"line":149,"code":"  it('should do work only in master', () => {\n    const taskId = 'exampleId';\n    const master = {\n      context: {\n        isMaster: true\n      }\n    };\n    master.context.master = master;\n    const slave0 = {\n      context: {\n        isMaster: false,\n        master\n      }\n    };\n    const slave1 = {\n      context: {\n        isMaster: false,\n        master\n      }\n    };\n    const slave2 = {\n      context: {\n        isMaster: false,\n        master\n      }\n    };\n    let done;\n    let workCalls = 0;\n    const work = d => {\n      workCalls++;\n      done = d;\n    };\n    let progress = '';\n    const frame = id => {\n      return result => {\n        progress += result + id;\n      };\n    };\n    computeInMasterFrame(slave0, taskId, work, frame('slave0'));\n    expect(workCalls).to.equal(0);\n    computeInMasterFrame(master, taskId, work, frame('master'));\n    expect(workCalls).to.equal(1);\n    computeInMasterFrame(slave1, taskId, work, frame('slave1'));\n    expect(progress).to.equal('');\n    done(';');\n    expect(progress).to.equal(';slave0;master;slave1');\n    computeInMasterFrame(slave2, taskId, work, frame('slave2'));\n    expect(progress).to.equal(';slave0;master;slave1;slave2');\n    expect(workCalls).to.equal(1);\n  });","file":"unit/test-3p.js","skipped":false,"dir":"test"},{"name":"should add <script /> with url to the body","suites":["loadScript"],"updatePoint":{"line":200,"column":50,"index":5562},"line":200,"code":"    it('should add <script /> with url to the body', () => {\n      const url = 'http://test.com/example.js';\n      let s = window.document.body.querySelector(`script[src=\"${url}\"]`);\n      expect(s).to.equal(null);\n      loadScript(window, url);\n      s = window.document.body.querySelector(`script[src=\"${url}\"]`);\n      expect(s.src).to.equal(url);\n    });","file":"unit/test-3p.js","skipped":false,"dir":"test"},{"name":"should handle onSuccess callback","suites":["loadScript"],"updatePoint":{"line":208,"column":40,"index":5911},"line":208,"code":"    it('should handle onSuccess callback', done => {\n      loadScript(window, 'http://localhost:9876/examples/amp-ad/sticky.js', () => {\n        done();\n      }, () => {\n        done('onError should not be called!');\n      });\n    });","file":"unit/test-3p.js","skipped":false,"dir":"test"},{"name":"should handle onFailure callback","suites":["loadScript"],"updatePoint":{"line":215,"column":40,"index":6146},"line":215,"code":"    it('should handle onFailure callback', done => {\n      loadScript(window, 'http://localhost:9876/404', () => {\n        done('onSuccess should not be called');\n      }, () => {\n        done();\n      });\n    });","file":"unit/test-3p.js","skipped":false,"dir":"test"},{"name":"should parse full form","suites":[],"updatePoint":{"line":70,"column":28,"index":2236},"line":70,"code":"  it('should parse full form', () => {\n    const a = parseAction('event1:target1.method1');\n    expect(a.event).to.equal('event1');\n    expect(a.target).to.equal('target1');\n    expect(a.method).to.equal('method1');\n  });","file":"unit/test-action.js","skipped":false,"dir":"test"},{"name":"should parse full form with two actions","suites":[],"updatePoint":{"line":76,"column":45,"index":2475},"line":76,"code":"  it('should parse full form with two actions', () => {\n    const a = parseMultipleActions('event1:target1.methodA,target2.methodB');\n    expect(a[0].event).to.equal('event1');\n    expect(a[0].target).to.equal('target1');\n    expect(a[0].method).to.equal('methodA');\n    expect(a[1].event).to.equal('event1');\n    expect(a[1].target).to.equal('target2');\n    expect(a[1].method).to.equal('methodB');\n  });","file":"unit/test-action.js","skipped":false,"dir":"test"},{"name":"should parse with default method","suites":[],"updatePoint":{"line":85,"column":38,"index":2874},"line":85,"code":"  it('should parse with default method', () => {\n    const a = parseAction('event1:target1');\n    expect(a.event).to.equal('event1');\n    expect(a.target).to.equal('target1');\n    expect(a.method).to.equal(DEFAULT_ACTION);\n  });","file":"unit/test-action.js","skipped":false,"dir":"test"},{"name":"should parse with default method for two different targets","suites":[],"updatePoint":{"line":91,"column":64,"index":3129},"line":91,"code":"  it('should parse with default method for two different targets', () => {\n    const a = parseMultipleActions('event1:target1,target2');\n    expect(a[0].event).to.equal('event1');\n    expect(a[0].target).to.equal('target1');\n    expect(a[0].method).to.equal(DEFAULT_ACTION);\n    expect(a[1].event).to.equal('event1');\n    expect(a[1].target).to.equal('target2');\n    expect(a[1].method).to.equal(DEFAULT_ACTION);\n  });","file":"unit/test-action.js","skipped":false,"dir":"test"},{"name":"should parse with numeric target","suites":[],"updatePoint":{"line":100,"column":38,"index":3522},"line":100,"code":"  it('should parse with numeric target', () => {\n    const a = parseAction('event1:1234.method1');\n    expect(a.event).to.equal('event1');\n    expect(a.target).to.equal('1234');\n    expect(a.method).to.equal('method1');\n  });","file":"unit/test-action.js","skipped":false,"dir":"test"},{"name":"should parse with two numeric targets","suites":[],"updatePoint":{"line":106,"column":43,"index":3753},"line":106,"code":"  it('should parse with two numeric targets', () => {\n    const a = parseMultipleActions('event1:1234.method1,9876.method2');\n    expect(a[0].event).to.equal('event1');\n    expect(a[0].target).to.equal('1234');\n    expect(a[0].method).to.equal('method1');\n    expect(a[1].event).to.equal('event1');\n    expect(a[1].target).to.equal('9876');\n    expect(a[1].method).to.equal('method2');\n  });","file":"unit/test-action.js","skipped":false,"dir":"test"},{"name":"should parse with lots of whitespace","suites":[],"updatePoint":{"line":115,"column":42,"index":4144},"line":115,"code":"  it('should parse with lots of whitespace', () => {\n    const a = parseAction('  event1  :  target1  .  method1  ');\n    expect(a.event).to.equal('event1');\n    expect(a.target).to.equal('target1');\n    expect(a.method).to.equal('method1');\n  });","file":"unit/test-action.js","skipped":false,"dir":"test"},{"name":"should parse with an arg","suites":[],"updatePoint":{"line":121,"column":30,"index":4380},"line":121,"code":"  it('should parse with an arg', () => {\n    const a = parseAction('event1:target1.method1(key1=value1)');\n    expect(a.event).to.equal('event1');\n    expect(a.target).to.equal('target1');\n    expect(a.method).to.equal('method1');\n    expect(a.args['key1']).to.equal('value1');\n  });","file":"unit/test-action.js","skipped":false,"dir":"test"},{"name":"should parse args in more than one action","suites":[],"updatePoint":{"line":128,"column":47,"index":4681},"line":128,"code":"  it('should parse args in more than one action', () => {\n    const a = parseMultipleActions('event1:target1.methodA(key1=value1),target2.methodB(keyA=valueA)');\n    expect(a[0].event).to.equal('event1');\n    expect(a[0].target).to.equal('target1');\n    expect(a[0].method).to.equal('methodA');\n    expect(a[0].args['key1']).to.equal('value1');\n    expect(a[1].event).to.equal('event1');\n    expect(a[1].target).to.equal('target2');\n    expect(a[1].method).to.equal('methodB');\n    expect(a[1].args['keyA']).to.equal('valueA');\n  });","file":"unit/test-action.js","skipped":false,"dir":"test"},{"name":"should parse multiple event types with multiple actions","suites":[],"updatePoint":{"line":139,"column":61,"index":5229},"line":139,"code":"  it('should parse multiple event types with multiple actions', () => {\n    const a = parseActionMap('event1:foo, baz.firstMethod, corge.secondMethod(keyA=valueA);' + 'event2:bar, qux.thirdMethod, grault.fourthMethod(keyB=valueB)');\n    expect(Object.keys(a)).to.have.length(2);\n    expect(a['event1']).to.have.length(3);\n    expect(a['event2']).to.have.length(3);\n\n    // action definitions for event1\n    expect(a['event1'][0].event).to.equal('event1');\n    expect(a['event1'][0].target).to.equal('foo');\n    expect(a['event1'][0].method).to.equal(DEFAULT_ACTION);\n    expect(a['event1'][0].args).to.be.null;\n    expect(a['event1'][1].event).to.equal('event1');\n    expect(a['event1'][1].target).to.equal('baz');\n    expect(a['event1'][1].method).to.equal('firstMethod');\n    expect(a['event1'][1].args).to.be.null;\n    expect(a['event1'][2].event).to.equal('event1');\n    expect(a['event1'][2].target).to.equal('corge');\n    expect(a['event1'][2].method).to.equal('secondMethod');\n    expect(a['event1'][2].args['keyA']).to.equal('valueA');\n\n    // action definitions for event2\n    expect(a['event2'][0].event).to.equal('event2');\n    expect(a['event2'][0].target).to.equal('bar');\n    expect(a['event2'][0].method).to.equal(DEFAULT_ACTION);\n    expect(a['event2'][0].args).to.be.null;\n    expect(a['event2'][1].event).to.equal('event2');\n    expect(a['event2'][1].target).to.equal('qux');\n    expect(a['event2'][1].method).to.equal('thirdMethod');\n    expect(a['event2'][1].args).to.be.null;\n    expect(a['event2'][2].event).to.equal('event2');\n    expect(a['event2'][2].target).to.equal('grault');\n    expect(a['event2'][2].method).to.equal('fourthMethod');\n    expect(a['event2'][2].args['keyB']).to.equal('valueB');\n  });","file":"unit/test-action.js","skipped":false,"dir":"test"},{"name":"should parse with multiple args","suites":[],"updatePoint":{"line":173,"column":37,"index":6935},"line":173,"code":"  it('should parse with multiple args', () => {\n    const a = parseAction('event1:target1.method1(key1=value1, key2 = value2)');\n    expect(a.event).to.equal('event1');\n    expect(a.target).to.equal('target1');\n    expect(a.method).to.equal('method1');\n    expect(a.args['key1']).to.equal('value1');\n    expect(a.args['key2']).to.equal('value2');\n  });","file":"unit/test-action.js","skipped":false,"dir":"test"},{"name":"should parse with multiple args with whitespace","suites":[],"updatePoint":{"line":181,"column":53,"index":7304},"line":181,"code":"  it('should parse with multiple args with whitespace', () => {\n    const a = parseAction('event1:target1.method1  (  key1 =  value1  ,  key2 = value2  ) ');\n    expect(a.event).to.equal('event1');\n    expect(a.target).to.equal('target1');\n    expect(a.method).to.equal('method1');\n    expect(a.args['key1']).to.equal('value1');\n    expect(a.args['key2']).to.equal('value2');\n  });","file":"unit/test-action.js","skipped":false,"dir":"test"},{"name":"should parse with no args","suites":[],"updatePoint":{"line":189,"column":31,"index":7664},"line":189,"code":"  it('should parse with no args', () => {\n    const a = parseAction('event1:target1.method1()');\n    expect(a.event).to.equal('event1');\n    expect(a.target).to.equal('target1');\n    expect(a.method).to.equal('method1');\n    expect(a.args).to.be.null;\n  });","file":"unit/test-action.js","skipped":false,"dir":"test"},{"name":"should parse with no args with whitespace","suites":[],"updatePoint":{"line":196,"column":47,"index":7938},"line":196,"code":"  it('should parse with no args with whitespace', () => {\n    const a = parseAction('event1:target1.method1 (  ) ');\n    expect(a.event).to.equal('event1');\n    expect(a.target).to.equal('target1');\n    expect(a.method).to.equal('method1');\n    expect(a.args).to.be.null;\n  });","file":"unit/test-action.js","skipped":false,"dir":"test"},{"name":"should parse with double-quoted args","suites":[],"updatePoint":{"line":203,"column":42,"index":8211},"line":203,"code":"  it('should parse with double-quoted args', () => {\n    const a = parseAction('event1:target1.method1(key1=value1, key2 = \"value (2)\\'\")');\n    expect(a.event).to.equal('event1');\n    expect(a.target).to.equal('target1');\n    expect(a.method).to.equal('method1');\n    expect(a.args['key1']).to.equal('value1');\n    expect(a.args['key2']).to.equal(\"value (2)'\");\n  });","file":"unit/test-action.js","skipped":false,"dir":"test"},{"name":"should parse with single-quoted args","suites":[],"updatePoint":{"line":211,"column":42,"index":8580},"line":211,"code":"  it('should parse with single-quoted args', () => {\n    const a = parseAction(\"event1:target1.method1(key1=value1, key2 = 'value (2)\\\"')\");\n    expect(a.event).to.equal('event1');\n    expect(a.target).to.equal('target1');\n    expect(a.method).to.equal('method1');\n    expect(a.args['key1']).to.equal('value1');\n    expect(a.args['key2']).to.equal('value (2)\"');\n  });","file":"unit/test-action.js","skipped":false,"dir":"test"},{"name":"should parse with args with trailing comma","suites":[],"updatePoint":{"line":219,"column":48,"index":8955},"line":219,"code":"  it('should parse with args with trailing comma', () => {\n    const a = parseAction('event1:target1.method1(key1=value1, )');\n    expect(a.event).to.equal('event1');\n    expect(a.target).to.equal('target1');\n    expect(a.method).to.equal('method1');\n    expect(a.args['key1']).to.equal('value1');\n    expect(Object.keys(a.args)).to.have.length(1);\n  });","file":"unit/test-action.js","skipped":false,"dir":"test"},{"name":"should parse with boolean args","suites":[],"updatePoint":{"line":227,"column":36,"index":9298},"line":227,"code":"  it('should parse with boolean args', () => {\n    expect(parseAction('e:t.m(k=true)').args['k']).to.equal(true);\n    expect(parseAction('e:t.m(k=false)').args['k']).to.equal(false);\n  });","file":"unit/test-action.js","skipped":false,"dir":"test"},{"name":"should parse with numeric args","suites":[],"updatePoint":{"line":231,"column":36,"index":9487},"line":231,"code":"  it('should parse with numeric args', () => {\n    expect(parseAction('e:t.m(k=123)').args['k']).to.equal(123);\n    expect(parseAction('e:t.m(k=1.23)').args['k']).to.equal(1.23);\n    expect(parseAction('e:t.m(k=.123)').args['k']).to.equal(0.123);\n  });","file":"unit/test-action.js","skipped":false,"dir":"test"},{"name":"should parse with term semicolon","suites":[],"updatePoint":{"line":236,"column":38,"index":9742},"line":236,"code":"  it('should parse with term semicolon', () => {\n    expect(parseAction('e:t.m(k=1); ').args['k']).to.equal(1);\n  });","file":"unit/test-action.js","skipped":false,"dir":"test"},{"name":"should parse with args as a proto-less object","suites":[],"updatePoint":{"line":239,"column":51,"index":9873},"line":239,"code":"  it('should parse with args as a proto-less object', () => {\n    expect(parseAction('e:t.m(k=1)').args.__proto__).to.be.undefined;\n  });","file":"unit/test-action.js","skipped":false,"dir":"test"},{"name":"should interprete key always as string","suites":[],"updatePoint":{"line":242,"column":44,"index":10004},"line":242,"code":"  it('should interprete key always as string', () => {\n    expect(parseAction('true:t.m').event).to.equal('true');\n    expect(parseAction('e:true.m').target).to.equal('true');\n    expect(parseAction('e:t.true').method).to.equal('true');\n    expect(parseAction('e:t.m(true=1)').args['true']).to.equal(1);\n    expect(parseAction('e:t.m(01=1)').args['01']).to.equal(1);\n  });","file":"unit/test-action.js","skipped":false,"dir":"test"},{"name":"should parse with object literal args","suites":[],"updatePoint":{"line":249,"column":43,"index":10376},"line":249,"code":"  it('should parse with object literal args', () => {\n    const a = parseAction('e:t.m({\"foo\": {\"bar\": \"qux\"}})');\n    expect(a.args[RAW_OBJECT_ARGS_KEY]).to.equal('{\"foo\": {\"bar\": \"qux\"}}');\n  });","file":"unit/test-action.js","skipped":false,"dir":"test"},{"name":"should parse with expression args","suites":[],"updatePoint":{"line":253,"column":39,"index":10570},"line":253,"code":"  it('should parse with expression args', () => {\n    const a = parseAction('e:t.m(key1=foo.bar)');\n    expect(a.args['key1']).to.deep.equal({\n      expression: 'foo.bar'\n    });\n  });","file":"unit/test-action.js","skipped":false,"dir":"test"},{"name":"should return null for undefined references in dereferenced arg","suites":[],"updatePoint":{"line":259,"column":69,"index":10785},"line":259,"code":"  it('should return null for undefined references in dereferenced arg', () => {\n    const a = parseAction('e:t.m(key1=foo.bar)');\n    expect(dereferenceArgsVariables(a.args, null)).to.deep.equal({\n      key1: null\n    });\n    expect(dereferenceArgsVariables(a.args, {})).to.deep.equal({\n      key1: null\n    });\n    expect(dereferenceArgsVariables(a.args, {\n      foo: null\n    })).to.deep.equal({\n      key1: null\n    });\n  });","file":"unit/test-action.js","skipped":false,"dir":"test"},{"name":"should return null for non-primitives in dereferenced args","suites":[],"updatePoint":{"line":273,"column":64,"index":11209},"line":273,"code":"  it('should return null for non-primitives in dereferenced args', () => {\n    const a = parseAction('e:t.m(key1=foo.bar)');\n    expect(dereferenceArgsVariables(a.args, {\n      foo: {\n        bar: undefined\n      }\n    })).to.deep.equal({\n      key1: null\n    });\n    expect(dereferenceArgsVariables(a.args, {\n      foo: {\n        bar: {}\n      }\n    })).to.deep.equal({\n      key1: null\n    });\n    expect(dereferenceArgsVariables(a.args, {\n      foo: {\n        bar: []\n      }\n    })).to.deep.equal({\n      key1: null\n    });\n    expect(dereferenceArgsVariables(a.args, {\n      foo: {\n        bar: () => {}\n      }\n    })).to.deep.equal({\n      key1: null\n    });\n  });","file":"unit/test-action.js","skipped":false,"dir":"test"},{"name":"should support event data and opt_args","suites":[],"updatePoint":{"line":304,"column":44,"index":11861},"line":304,"code":"  it('should support event data and opt_args', () => {\n    const a = parseAction('e:t.m(key1=foo,key2=x)');\n    const event = createCustomEvent(window, 'MyEvent');\n    expect(dereferenceArgsVariables(a.args, event, {\n      x: 'bar'\n    })).to.deep.equal({\n      key1: 'foo',\n      key2: 'bar'\n    });\n  });","file":"unit/test-action.js","skipped":false,"dir":"test"},{"name":"evaluated args should be proto-less objects","suites":[],"updatePoint":{"line":314,"column":49,"index":12173},"line":314,"code":"  it('evaluated args should be proto-less objects', () => {\n    const a = parseAction('e:t.m(key1=foo)');\n    expect(dereferenceArgsVariables(a.args, null).__proto__).to.be.undefined;\n    expect(dereferenceArgsVariables(a.args, null).constructor).to.be.undefined;\n  });","file":"unit/test-action.js","skipped":false,"dir":"test"},{"name":"should dereference arg expressions","suites":[],"updatePoint":{"line":319,"column":40,"index":12434},"line":319,"code":"  it('should dereference arg expressions', () => {\n    const a = parseAction('e:t.m(key1=foo)');\n    expect(dereferenceArgsVariables(a.args, null)).to.deep.equal({\n      key1: 'foo'\n    });\n  });","file":"unit/test-action.js","skipped":false,"dir":"test"},{"name":"should dereference arg expressions with an event without data","suites":[],"updatePoint":{"line":325,"column":67,"index":12657},"line":325,"code":"  it('should dereference arg expressions with an event without data', () => {\n    const a = parseAction('e:t.m(key1=foo)');\n    const event = createCustomEvent(window, 'MyEvent');\n    expect(dereferenceArgsVariables(a.args, {\n      event\n    })).to.deep.equal({\n      key1: 'foo'\n    });\n  });","file":"unit/test-action.js","skipped":false,"dir":"test"},{"name":"should dereference arg expressions with an event with data","suites":[],"updatePoint":{"line":334,"column":64,"index":12948},"line":334,"code":"  it('should dereference arg expressions with an event with data', () => {\n    const a = parseAction('e:t.m(key1=event.foo)');\n    const event = createCustomEvent(window, 'MyEvent', {\n      foo: 'bar'\n    });\n    expect(dereferenceArgsVariables(a.args, event)).to.deep.equal({\n      key1: 'bar'\n    });\n  });","file":"unit/test-action.js","skipped":false,"dir":"test"},{"name":"should parse empty to null","suites":[],"updatePoint":{"line":343,"column":32,"index":13225},"line":343,"code":"  it('should parse empty to null', () => {\n    const a = parseAction('');\n    expect(a).to.equal(null);\n  });","file":"unit/test-action.js","skipped":false,"dir":"test"},{"name":"should fail parse without event","suites":[],"updatePoint":{"line":347,"column":37,"index":13340},"line":347,"code":"  it('should fail parse without event', () => {\n    allowConsoleError(() => {\n      expect(() => {\n        parseAction('target1.method1');\n      }).to.throw(/expected \\[\\:\\]/);\n    });\n  });","file":"unit/test-action.js","skipped":false,"dir":"test"},{"name":"should fail parse without target","suites":[],"updatePoint":{"line":354,"column":38,"index":13532},"line":354,"code":"  it('should fail parse without target', () => {\n    allowConsoleError(() => {\n      expect(() => {\n        parseAction('event1:');\n      }).to.throw(/Invalid action/);\n      expect(() => {\n        parseAction('.method1');\n      }).to.throw(/Invalid action/);\n      expect(() => {\n        parseAction('event1:.method1');\n      }).to.throw(/Invalid action/);\n    });\n  });","file":"unit/test-action.js","skipped":false,"dir":"test"},{"name":"should fail parse with period in event or method","suites":[],"updatePoint":{"line":367,"column":54,"index":13920},"line":367,"code":"  it('should fail parse with period in event or method', () => {\n    allowConsoleError(() => {\n      expect(() => {\n        parseAction('event.1:target1.method');\n      }).to.throw(/Invalid action/);\n      expect(() => {\n        parseAction('event:target1.method.1');\n      }).to.throw(/Invalid action/);\n    });\n  });","file":"unit/test-action.js","skipped":false,"dir":"test"},{"name":"should fail parse with invalid args","suites":[],"updatePoint":{"line":377,"column":41,"index":14226},"line":377,"code":"  it('should fail parse with invalid args', () => {\n    allowConsoleError(() => {\n      // No args allowed without explicit action.\n      expect(() => {\n        parseAction('event:target1()');\n      }).to.throw(/Invalid action/);\n      // Missing parens\n      expect(() => {\n        parseAction('event:target1.method(');\n      }).to.throw(/Invalid action/);\n      expect(() => {\n        parseAction('event:target1.method(key = value');\n      }).to.throw(/Invalid action/);\n      // No arg value.\n      expect(() => {\n        parseAction('event:target1.method(key)');\n      }).to.throw(/Invalid action/);\n      expect(() => {\n        parseAction('event:target1.method(key=)');\n      }).to.throw(/Invalid action/);\n      // Missing quote\n      expect(() => {\n        parseAction('event:target1.method(key = \"value)');\n      }).to.throw(/Invalid action/);\n      // Broken quotes.\n      expect(() => {\n        parseAction('event:target1.method(key = \"value\"\")');\n      }).to.throw(/Invalid action/);\n      // Missing comma.\n      expect(() => {\n        parseAction('event:target1.method(key = value key2 = value2)');\n      }).to.throw(/Invalid action/);\n      // Empty (2...n)nd target\n      expect(() => {\n        parseAction('event:target1,');\n      }).to.throw(/Invalid action/);\n    });\n  });","file":"unit/test-action.js","skipped":false,"dir":"test"},{"name":"should set actions","suites":[],"updatePoint":{"line":417,"column":24,"index":15566},"line":417,"code":"  it('should set actions', () => {\n    const action = actionService();\n    const element = document.createElement('div');\n    element.setAttribute('on', 'event1:action1');\n\n    // Invoke findAction_ once at the start to cache the actions.\n    action.findAction_(element, 'event1');\n\n    // Reset the actions with a new actions string.\n    action.setActions(element, 'event2:action2');\n\n    // `on` attribute should reflect the new action defs.\n    expect(element.getAttribute('on')).to.equal('event2:action2');\n\n    // Action cache should have been cleared.\n    expect(action.findAction_(element, 'event1')).to.be.null;\n    expect(action.findAction_(element, 'event2')).to.be.not.null;\n  });","file":"unit/test-action.js","skipped":false,"dir":"test"},{"name":"should parse with a single action","suites":[],"updatePoint":{"line":437,"column":39,"index":16334},"line":437,"code":"  it('should parse with a single action', () => {\n    const m = parseActionMap('event1:action1');\n    expect(m['event1'][0].target).to.equal('action1');\n  });","file":"unit/test-action.js","skipped":false,"dir":"test"},{"name":"should parse with two actions","suites":[],"updatePoint":{"line":441,"column":35,"index":16489},"line":441,"code":"  it('should parse with two actions', () => {\n    const m = parseActionMap('event1:action1; event2: action2');\n    expect(m['event1'][0].target).to.equal('action1');\n    expect(m['event2'][0].target).to.equal('action2');\n  });","file":"unit/test-action.js","skipped":false,"dir":"test"},{"name":"should parse with dupe actions by overriding with last","suites":[],"updatePoint":{"line":446,"column":60,"index":16741},"line":446,"code":"  it('should parse with dupe actions by overriding with last', () => {\n    const m = parseActionMap('event1:action1; event1: action2');\n    expect(m['event1']).to.have.length(1);\n    // Currently, we overwrite the events.\n    expect(m['event1'][0].target).to.equal('action2');\n  });","file":"unit/test-action.js","skipped":false,"dir":"test"},{"name":"should parse empty forms to null","suites":[],"updatePoint":{"line":452,"column":38,"index":17002},"line":452,"code":"  it('should parse empty forms to null', () => {\n    expect(parseActionMap('')).to.equal(null);\n    expect(parseActionMap('  ')).to.equal(null);\n    expect(parseActionMap(';;;')).to.equal(null);\n  });","file":"unit/test-action.js","skipped":false,"dir":"test"},{"name":"should create action map in getActionMap_","suites":[],"updatePoint":{"line":463,"column":47,"index":17340},"line":463,"code":"  it('should create action map in getActionMap_', () => {\n    const element = document.createElement('div');\n    element.setAttribute('on', 'event1:action1');\n    const m = action.getActionMap_(element);\n    expect(m['event1']).to.have.length(1);\n    expect(m['event1'][0].target).to.equal('action1');\n  });","file":"unit/test-action.js","skipped":false,"dir":"test"},{"name":"should cache action map","suites":[],"updatePoint":{"line":470,"column":29,"index":17630},"line":470,"code":"  it('should cache action map', () => {\n    const element = document.createElement('div');\n    element.setAttribute('on', 'event1:action1');\n    const m1 = action.getActionMap_(element);\n    const m2 = action.getActionMap_(element);\n    expect(m1).to.equal(m2);\n  });","file":"unit/test-action.js","skipped":false,"dir":"test"},{"name":"should find action on the same element","suites":[],"updatePoint":{"line":477,"column":44,"index":17913},"line":477,"code":"  it('should find action on the same element', () => {\n    const element = document.createElement('div');\n    element.setAttribute('on', 'event1:action1');\n    const a = action.findAction_(element, 'event1');\n    expect(a.node).to.equal(element);\n    expect(a.actionInfos).to.have.length(1);\n    expect(a.actionInfos[0].target).to.equal('action1');\n    expect(action.findAction_(element, 'event3')).to.equal(null);\n  });","file":"unit/test-action.js","skipped":false,"dir":"test"},{"name":"should find action in subtree","suites":[],"updatePoint":{"line":486,"column":35,"index":18325},"line":486,"code":"  it('should find action in subtree', () => {\n    const parent = document.createElement('div');\n    parent.setAttribute('on', 'event1:action1');\n    const element = document.createElement('div');\n    element.setAttribute('on', 'event2:action2');\n    parent.appendChild(element);\n    let a = action.findAction_(element, 'event1');\n    expect(a.node).to.equal(parent);\n    expect(a.actionInfos).to.have.length(1);\n    expect(a.actionInfos[0].target).to.equal('action1');\n    a = action.findAction_(element, 'event2');\n    expect(a.node).to.equal(element);\n    expect(a.actionInfos).to.have.length(1);\n    expect(a.actionInfos[0].target).to.equal('action2');\n    expect(action.findAction_(element, 'event3')).to.equal(null);\n  });","file":"unit/test-action.js","skipped":false,"dir":"test"},{"name":"should skip action on disabled elements","suites":[],"updatePoint":{"line":502,"column":45,"index":19063},"line":502,"code":"  it('should skip action on disabled elements', () => {\n    const parent = document.createElement('button');\n    parent.setAttribute('on', 'event1:action1');\n    parent.disabled = true;\n    expect(action.findAction_(parent, 'event1')).to.equal(null);\n  });","file":"unit/test-action.js","skipped":false,"dir":"test"},{"name":"should skip parent action on descendants of disabled elements","suites":[],"updatePoint":{"line":508,"column":67,"index":19342},"line":508,"code":"  it('should skip parent action on descendants of disabled elements', () => {\n    const parent = document.createElement('button');\n    parent.setAttribute('on', 'event1:action1');\n    parent.disabled = true;\n    const element = document.createElement('div');\n    parent.appendChild(element);\n    expect(action.findAction_(element, 'event1')).to.equal(null);\n  });","file":"unit/test-action.js","skipped":false,"dir":"test"},{"name":"should skip action on form control in a disabled fieldset","suites":[],"updatePoint":{"line":516,"column":63,"index":19702},"line":516,"code":"  it('should skip action on form control in a disabled fieldset', () => {\n    const parent = document.createElement('fieldset');\n    parent.setAttribute('on', 'event1:action1');\n    parent.disabled = true;\n    const element = document.createElement('button');\n    element.setAttribute('on', 'event2:action2');\n    parent.appendChild(element);\n    expect(action.findAction_(element, 'event1')).to.equal(null);\n    expect(action.findAction_(element, 'event2')).to.equal(null);\n  });","file":"unit/test-action.js","skipped":false,"dir":"test"},{"name":"returns true if the target element has the target action","suites":[],"updatePoint":{"line":532,"column":62,"index":20309},"line":532,"code":"  it('returns true if the target element has the target action', () => {\n    const element = document.createElement('div');\n    element.setAttribute('on', 'event1:action1');\n    expect(action.hasAction(element, 'event1')).to.equal(true);\n  });","file":"unit/test-action.js","skipped":false,"dir":"test"},{"name":"returns true if an intermediate element has target action","suites":[],"updatePoint":{"line":537,"column":63,"index":20554},"line":537,"code":"  it('returns true if an intermediate element has target action', () => {\n    const child = document.createElement('div');\n    const element = document.createElement('div');\n    element.appendChild(child);\n    element.setAttribute('on', 'event1:action1');\n    const parent = document.createElement('div');\n    parent.appendChild(element);\n    parent.setAttribute('on', 'event2:action2');\n    expect(action.hasAction(element, 'event1', parent)).to.equal(true);\n    expect(action.hasAction(element, 'event2', parent)).to.equal(false);\n  });","file":"unit/test-action.js","skipped":false,"dir":"test"},{"name":"returns false if the target element does not have the target action","suites":[],"updatePoint":{"line":548,"column":73,"index":21103},"line":548,"code":"  it('returns false if the target element does not have the target action', () => {\n    const element = document.createElement('div');\n    element.setAttribute('on', 'event1:action1');\n    expect(action.hasAction(element, 'event2')).to.equal(false);\n  });","file":"unit/test-action.js","skipped":false,"dir":"test"},{"name":"returns true if the target element exists (single)","suites":[],"updatePoint":{"line":566,"column":56,"index":21708},"line":566,"code":"  it('returns true if the target element exists (single)', () => {\n    const element = html` <div on=\"event1: valid-target\"></div> `;\n    expect(action.hasResolvableAction(element, 'event1')).to.equal(true);\n  });","file":"unit/test-action.js","skipped":false,"dir":"test"},{"name":"returns true if the target element exists (action up the tree)","suites":[],"updatePoint":{"line":570,"column":68,"index":21934},"line":570,"code":"  it('returns true if the target element exists (action up the tree)', () => {\n    const wrapper = html` <div on=\"event1: valid-target\"></div> `;\n    const child = html` <div></div> `;\n    wrapper.appendChild(child);\n    expect(action.hasResolvableAction(child, 'event1')).to.equal(true);\n  });","file":"unit/test-action.js","skipped":false,"dir":"test"},{"name":"returns true if the target element exists (one amongst many)","suites":[],"updatePoint":{"line":576,"column":66,"index":22227},"line":576,"code":"  it('returns true if the target element exists (one amongst many)', () => {\n    const element = html`\n      <div on=\"event1: i-dont-exist, valid-target, i-dont-exist-either\"></div>\n    `;\n    expect(action.hasResolvableAction(element, 'event1')).to.equal(true);\n  });","file":"unit/test-action.js","skipped":false,"dir":"test"},{"name":"returns false if the target element does not exist (one)","suites":[],"updatePoint":{"line":582,"column":62,"index":22492},"line":582,"code":"  it('returns false if the target element does not exist (one)', () => {\n    const element = html` <div on=\"event1: i-do-not-exist\"></div> `;\n    expect(action.hasResolvableAction(element, 'event1')).to.equal(false);\n  });","file":"unit/test-action.js","skipped":false,"dir":"test"},{"name":"returns false if the target element does not exist (multiple)","suites":[],"updatePoint":{"line":586,"column":67,"index":22720},"line":586,"code":"  it('returns false if the target element does not exist (multiple)', () => {\n    const element = html`\n      <div on=\"event1: i-do-not-exist, i-dont-exist-either\"></div>\n    `;\n    expect(action.hasResolvableAction(element, 'event1')).to.equal(false);\n  });","file":"unit/test-action.js","skipped":false,"dir":"test"},{"name":"returns false if target element does not have the target action","suites":[],"updatePoint":{"line":592,"column":69,"index":22981},"line":592,"code":"  it('returns false if target element does not have the target action', () => {\n    const element = html` <div on=\"event1: valid-target\"></div> `;\n    expect(action.hasResolvableAction(element, 'event2')).to.equal(false);\n  });","file":"unit/test-action.js","skipped":false,"dir":"test"},{"name":"should invoke on the AMP element","suites":[],"updatePoint":{"line":621,"column":38,"index":24042},"line":621,"code":"  it('should invoke on the AMP element', () => {\n    action.invoke_(new ActionInvocation(execElement, 'method1', /* args */null, 'source1', 'caller1', 'event1'));\n    expect(onEnqueue).to.be.calledOnce;\n    const inv = onEnqueue.getCall(0).args[0];\n    expect(inv.node).to.equal(execElement);\n    expect(inv.method).to.equal('method1');\n    expect(inv.source).to.equal('source1');\n    expect(inv.caller).to.equal('caller1');\n    expect(inv.event).to.equal('event1');\n    expect(inv.args).to.be.null;\n  });","file":"unit/test-action.js","skipped":false,"dir":"test"},{"name":"should invoke on the AMP element with args","suites":[],"updatePoint":{"line":632,"column":48,"index":24558},"line":632,"code":"  it('should invoke on the AMP element with args', () => {\n    action.invoke_(new ActionInvocation(execElement, 'method1', {\n      'key1': 11\n    }, 'source1', 'caller1', 'event1'));\n    expect(onEnqueue).to.be.calledOnce;\n    const inv = onEnqueue.getCall(0).args[0];\n    expect(inv.node).to.equal(execElement);\n    expect(inv.method).to.equal('method1');\n    expect(inv.source).to.equal('source1');\n    expect(inv.caller).to.equal('caller1');\n    expect(inv.event).to.equal('event1');\n    expect(inv.args['key1']).to.equal(11);\n  });","file":"unit/test-action.js","skipped":false,"dir":"test"},{"name":"should not allow invoke on non-AMP and non-allowlisted element","suites":[],"updatePoint":{"line":645,"column":68,"index":25114},"line":645,"code":"  it('should not allow invoke on non-AMP and non-allowlisted element', () => {\n    allowConsoleError(() => {\n      expect(() => {\n        action.invoke_(new ActionInvocation(document.createElement('img'), 'method1', /* args */null, 'source1', 'event1'));\n      }).to.throw(/doesn't support \"method1\" action/);\n    });\n    expect(onEnqueue).to.have.not.been.called;\n  });","file":"unit/test-action.js","skipped":false,"dir":"test"},{"name":"should not allow invoke on unresolved AMP element","suites":[],"updatePoint":{"line":653,"column":55,"index":25472},"line":653,"code":"  it('should not allow invoke on unresolved AMP element', () => {\n    allowConsoleError(() => {\n      expect(() => {\n        action.invoke_(new ActionInvocation(document.createElement('amp-foo'), 'method1', /* args */null, 'source1', 'event1'));\n      }).to.throw(/Unrecognized AMP element/);\n    });\n    expect(onEnqueue).to.have.not.been.called;\n  });","file":"unit/test-action.js","skipped":false,"dir":"test"},{"name":"should trigger event","suites":[],"updatePoint":{"line":661,"column":26,"index":25797},"line":661,"code":"  it('should trigger event', () => {\n    action.trigger(child, 'tap', null);\n    expect(onEnqueue).to.be.calledOnce;\n    const inv = onEnqueue.getCall(0).args[0];\n    expect(inv.node).to.equal(execElement);\n    expect(inv.method).to.equal('method1');\n    expect(inv.source).to.equal(child);\n    expect(inv.caller).to.equal(targetElement);\n  });","file":"unit/test-action.js","skipped":false,"dir":"test"},{"name":"should execute method","suites":[],"updatePoint":{"line":670,"column":27,"index":26143},"line":670,"code":"  it('should execute method', () => {\n    action.execute(execElement, 'method1', {\n      'key1': 11\n    }, child, null);\n    expect(onEnqueue).to.be.calledOnce;\n    const inv = onEnqueue.getCall(0).args[0];\n    expect(inv.node).to.equal(execElement);\n    expect(inv.method).to.equal('method1');\n    expect(inv.args['key1']).to.equal(11);\n    expect(inv.source).to.equal(child);\n  });","file":"unit/test-action.js","skipped":false,"dir":"test"},{"name":"should invoke proper action","suites":["macros"],"updatePoint":{"line":692,"column":35,"index":27056},"line":692,"code":"    it('should invoke proper action', () => {\n      // Given that an amp action macro is triggered.\n      const invoke_ = env.sandbox.stub(action, 'invoke_');\n      env.sandbox.stub(action.root_, 'getElementById').withArgs('action-macro-id').returns(ampActionMacro);\n      action.trigger(ampActionMacro, 'tap', null, ActionTrust_Enum.HIGH, /* opt_args */{\n        arg1: 'realArgValue'\n      });\n      return whenCalled(invoke_).then(() => {\n        expect(action.invoke_).to.have.been.calledOnce;\n        const invocation = action.invoke_.getCall(0).args[0];\n        const {\n          actionEventType,\n          args,\n          caller,\n          event,\n          method,\n          node,\n          source,\n          tagOrTarget,\n          trust\n        } = invocation;\n        expect(node).to.equal(ampActionMacro);\n        expect(caller).to.equal(ampActionMacro);\n        expect(event).to.be.null;\n        expect(method).to.equal('method');\n        expect(actionEventType).to.equal('tap');\n        expect(args).to.deep.equal({\n          realArgName: 'realArgValue'\n        });\n        expect(trust).to.equal(ActionTrust_Enum.HIGH);\n        expect(tagOrTarget).to.equal('AMP-ACTION-MACRO');\n        expect(actionEventType).to.equal('tap');\n        expect(source).to.equal(ampActionMacro);\n      });\n    });","file":"unit/test-action.js","skipped":false,"dir":"test"},{"name":"should invoke on non-AMP but allowlisted element","suites":["macros"],"updatePoint":{"line":734,"column":54,"index":28519},"line":734,"code":"  it('should invoke on non-AMP but allowlisted element', () => {\n    const handlerSpy = env.sandbox.spy();\n    const target = document.createElement('form');\n    action.installActionHandler(target, handlerSpy);\n    action.invoke_(new ActionInvocation(target, 'submit', /* args */null, 'button', 'button', 'tap', ActionTrust_Enum.HIGH));\n    expect(handlerSpy).to.be.calledOnce;\n    const callArgs = handlerSpy.getCall(0).args[0];\n    expect(callArgs.node).to.be.equal(target);\n    expect(callArgs.method).to.be.equal('submit');\n    expect(callArgs.args).to.be.equal(null);\n    expect(callArgs.source).to.be.equal('button');\n    expect(callArgs.caller).to.be.equal('button');\n    expect(callArgs.event).to.be.equal('tap');\n    expect(callArgs.trust).to.be.equal(ActionTrust_Enum.HIGH);\n  });","file":"unit/test-action.js","skipped":false,"dir":"test"},{"name":"should not check trust level (handler should check)","suites":["macros"],"updatePoint":{"line":749,"column":57,"index":29313},"line":749,"code":"  it('should not check trust level (handler should check)', () => {\n    const handlerSpy = env.sandbox.spy();\n    const target = document.createElement('form');\n    action.installActionHandler(target, handlerSpy);\n    const invocation = new ActionInvocation(target, 'submit', /* args */null, 'button', 'button', 'tapEvent', ActionTrust_Enum.HIGH);\n    action.invoke_(invocation);\n    expect(handlerSpy).to.be.calledOnce;\n    invocation.trust = ActionTrust_Enum.LOW;\n    action.invoke_(invocation);\n    expect(handlerSpy).to.be.calledTwice;\n  });","file":"unit/test-action.js","skipped":false,"dir":"test"},{"name":"should trigger event","suites":["macros"],"updatePoint":{"line":786,"column":26,"index":30845},"line":786,"code":"  it('should trigger event', () => {\n    action.trigger(child, 'tap', null);\n    expect(onEnqueue1).to.be.calledOnce;\n    assertInvocation(onEnqueue1.getCall(0).args[0], execElement1, 'method1', child, targetElement);\n    assertInvocation(onEnqueue2.getCall(0).args[0], execElement2, 'method2', child, targetElement);\n  });","file":"unit/test-action.js","skipped":false,"dir":"test"},{"name":"should chain asynchronous actions","suites":["macros"],"updatePoint":{"line":792,"column":39,"index":31182},"line":792,"code":"  it('should chain asynchronous actions', () => {\n    let resolveAbc;\n    const promiseAbc = new Promise(resolve => {\n      resolveAbc = resolve;\n    });\n    const abc = env.sandbox.stub().returns(promiseAbc);\n    action.addGlobalTarget('ABC', abc);\n    let resolveXyz;\n    const promiseXyz = new Promise(resolve => {\n      resolveXyz = resolve;\n    });\n    const xyz = env.sandbox.stub().returns(promiseXyz);\n    action.addGlobalTarget('XYZ', xyz);\n    const element = document.createElement('target');\n    element.setAttribute('on', 'tap:ABC.abc, foo.method1, XYZ.xyz, bar.method2');\n    parent.appendChild(element);\n    action.trigger(element, 'tap', null);\n    expect(abc).calledOnce;\n    expect(onEnqueue1).to.not.have.been.called;\n    expect(xyz).to.not.have.been.called;\n    expect(onEnqueue2).to.not.have.been.called;\n    resolveAbc();\n    return macroTask().then(() => {\n      expect(abc).calledOnce;\n      expect(onEnqueue1).calledOnce;\n      expect(xyz).calledOnce;\n      expect(onEnqueue2).to.not.have.been.called;\n      resolveXyz();\n      return macroTask();\n    }).then(() => {\n      expect(abc).calledOnce;\n      expect(onEnqueue1).calledOnce;\n      expect(xyz).calledOnce;\n      expect(onEnqueue2).calledOnce;\n    });\n  });","file":"unit/test-action.js","skipped":false,"dir":"test"},{"name":"should not initialize until called","suites":["macros"],"updatePoint":{"line":845,"column":40,"index":32866},"line":845,"code":"  it('should not initialize until called', () => {\n    expect(getQueue()).to.be.undefined;\n  });","file":"unit/test-action.js","skipped":false,"dir":"test"},{"name":"should queue actions","suites":["macros"],"updatePoint":{"line":848,"column":26,"index":32949},"line":848,"code":"  it('should queue actions', () => {\n    action.invoke_(new ActionInvocation(target, 'method1', /* args */null, 'source1', 'caller1', 'event1'));\n    action.invoke_(new ActionInvocation(target, 'method2', /* args */null, 'source2', 'caller2', 'event2'));\n    const queue = getQueue();\n    expect(Array.isArray(queue)).to.be.true;\n    expect(queue).to.have.length(2);\n    const inv0 = queue[0];\n    expect(inv0.node).to.equal(target);\n    expect(inv0.method).to.equal('method1');\n    expect(inv0.source).to.equal('source1');\n    expect(inv0.caller).to.equal('caller1');\n    expect(inv0.event).to.equal('event1');\n    const inv1 = queue[1];\n    expect(inv1.node).to.equal(target);\n    expect(inv1.method).to.equal('method2');\n    expect(inv1.source).to.equal('source2');\n    expect(inv1.caller).to.equal('caller2');\n    expect(inv1.event).to.equal('event2');\n  });","file":"unit/test-action.js","skipped":false,"dir":"test"},{"name":"should dequeue actions after handler set","suites":["macros"],"updatePoint":{"line":867,"column":46,"index":33832},"line":867,"code":"  it('should dequeue actions after handler set', () => {\n    action.invoke_(new ActionInvocation(target, 'method1', /* args */null, 'source1', 'caller1', 'event1', ActionTrust_Enum.HIGH));\n    action.invoke_(new ActionInvocation(target, 'method2', /* args */null, 'source2', 'caller2', 'event2', ActionTrust_Enum.HIGH));\n    expect(Array.isArray(getQueue())).to.be.true;\n    expect(getActionHandler()).to.be.undefined;\n    expect(getQueue()).to.have.length(2);\n    const handler = env.sandbox.spy();\n    action.installActionHandler(target, handler);\n    expect(getActionHandler()).to.exist;\n    expect(handler).to.have.not.been.called;\n    clock.tick(10);\n    expect(handler).to.have.callCount(2);\n    const inv0 = handler.getCall(0).args[0];\n    expect(inv0.node).to.equal(target);\n    expect(inv0.method).to.equal('method1');\n    expect(inv0.source).to.equal('source1');\n    expect(inv0.caller).to.equal('caller1');\n    expect(inv0.event).to.equal('event1');\n    const inv1 = handler.getCall(1).args[0];\n    expect(inv1.node).to.equal(target);\n    expect(inv1.method).to.equal('method2');\n    expect(inv1.source).to.equal('source2');\n    expect(inv1.caller).to.equal('caller2');\n    expect(inv1.event).to.equal('event2');\n    action.invoke_(new ActionInvocation(target, 'method3', /* args */null, 'source3', 'caller3', 'event3', ActionTrust_Enum.HIGH));\n    expect(handler).to.have.callCount(3);\n    const inv2 = handler.getCall(2).args[0];\n    expect(inv2.node).to.equal(target);\n    expect(inv2.method).to.equal('method3');\n    expect(inv2.source).to.equal('source3');\n    expect(inv2.caller).to.equal('caller3');\n    expect(inv2.event).to.equal('event3');\n  });","file":"unit/test-action.js","skipped":false,"dir":"test"},{"name":"should execute actions registered","suites":["macros"],"updatePoint":{"line":912,"column":39,"index":35797},"line":912,"code":"  it('should execute actions registered', () => {\n    const action1 = env.sandbox.spy();\n    const action2 = env.sandbox.spy();\n    action.addGlobalMethodHandler('action1', action1);\n    action.addGlobalMethodHandler('action2', action2);\n    action.invoke_(new ActionInvocation(target, 'action1', /* args */null, 'source1', 'caller1', 'event1', ActionTrust_Enum.HIGH));\n    expect(action1).to.be.calledOnce;\n    expect(action2).to.have.not.been.called;\n    action.invoke_(new ActionInvocation(target, 'action2', /* args */null, 'source2', 'caller2', 'event2', ActionTrust_Enum.HIGH));\n    expect(action2).to.be.calledOnce;\n    expect(action1).to.be.calledOnce;\n    expect(target['__AMP_ACTION_QUEUE__']).to.not.exist;\n  });","file":"unit/test-action.js","skipped":false,"dir":"test"},{"name":"should check trust before invoking action","suites":["macros"],"updatePoint":{"line":925,"column":47,"index":36529},"line":925,"code":"  it('should check trust before invoking action', () => {\n    const handler = env.sandbox.spy();\n    action.addGlobalMethodHandler('foo', handler, ActionTrust_Enum.HIGH);\n    action.invoke_(new ActionInvocation(target, 'foo', /* args */null, 'source1', 'caller1', 'event1', ActionTrust_Enum.HIGH));\n    expect(handler).to.be.calledOnce;\n    return allowConsoleError(() => {\n      action.invoke_(new ActionInvocation(target, 'foo', /* args */null, 'source1', 'caller1', 'event1', ActionTrust_Enum.LOW));\n      expect(handler).to.be.calledOnce;\n    });\n  });","file":"unit/test-action.js","skipped":false,"dir":"test"},{"name":"should register global target","suites":["macros"],"updatePoint":{"line":941,"column":35,"index":37206},"line":941,"code":"  it('should register global target', () => {\n    const target1 = env.sandbox.spy();\n    const target2 = env.sandbox.spy();\n    const event = {};\n    action.addGlobalTarget('target1', target1);\n    action.addGlobalTarget('target2', target2);\n    const element = document.createElement('div');\n    element.setAttribute('on', 'tap:target1.action1(a=b)');\n    action.trigger(element, 'tap', event);\n    expect(target2).to.not.be.called;\n    expect(target1).to.be.calledOnce;\n    assertInvocation(target1.args[0][0], document, 'action1', element, element, event, {\n      a: 'b'\n    });\n    const element2 = document.createElement('div');\n    element2.setAttribute('on', 'tap:target2.action1');\n    action.trigger(element2, 'tap', event);\n    expect(target2).to.be.calledOnce;\n    expect(target1).to.be.calledOnce;\n    const element3 = document.createElement('div');\n    element3.setAttribute('on', 'tap:target1.action1,target2.action1');\n    action.trigger(element3, 'tap', event);\n    expect(target2).to.be.calledTwice;\n    expect(target1).to.be.calledTwice;\n    const element4 = document.createElement('div');\n    element4.setAttribute('on', 'tap:target1.action1,target2.action2(x=y)');\n    action.trigger(element4, 'tap', event);\n    expect(target2).to.be.calledThrice;\n    expect(target1).to.be.calledThrice;\n    assertInvocation(target2.args[2][0], document, 'action2', element4, element4, event, {\n      x: 'y'\n    });\n  });","file":"unit/test-action.js","skipped":false,"dir":"test"},{"name":"should trigger tap event on click","suites":["macros"],"updatePoint":{"line":1006,"column":39,"index":39422},"line":1006,"code":"  it('should trigger tap event on click', () => {\n    expect(window.document.addEventListener).to.have.been.calledWith('click');\n    const handler = window.document.addEventListener.getCall(0).args[1];\n    const element = {\n      tagName: 'target1',\n      nodeType: 1\n    };\n    const event = {\n      target: element\n    };\n    handler(event);\n    expect(action.trigger).to.have.been.calledWith(element, 'tap', event);\n  });","file":"unit/test-action.js","skipped":false,"dir":"test"},{"name":"should trigger submit event","suites":["macros"],"updatePoint":{"line":1087,"column":33,"index":42852},"line":1087,"code":"  it('should trigger submit event', () => {\n    expect(window.document.addEventListener).to.have.been.calledWith('submit');\n    const handler = window.document.addEventListener.getCall(2).args[1];\n    const element = {\n      tagName: 'target1',\n      nodeType: 1\n    };\n    const event = {\n      target: element\n    };\n    handler(event);\n    expect(action.trigger).to.have.been.calledWith(element, 'submit', event);\n  });","file":"unit/test-action.js","skipped":false,"dir":"test"},{"name":"should trigger change event","suites":["macros"],"updatePoint":{"line":1100,"column":33,"index":43275},"line":1100,"code":"  it('should trigger change event', () => {\n    expect(window.document.addEventListener).to.have.been.calledWith('change');\n    const handler = window.document.addEventListener.getCall(3).args[1];\n    const element = {\n      tagName: 'target2',\n      nodeType: 1\n    };\n    const event = {\n      target: element\n    };\n    handler(event);\n    expect(action.trigger).to.have.been.calledWith(element, 'change', event);\n  });","file":"unit/test-action.js","skipped":false,"dir":"test"},{"name":"should trigger change event for <input type=\"checkbox\"> elements","suites":["macros"],"updatePoint":{"line":1113,"column":70,"index":43735},"line":1113,"code":"  it('should trigger change event for <input type=\"checkbox\"> elements', () => {\n    const handler = window.document.addEventListener.getCall(3).args[1];\n    const element = document.createElement('input');\n    element.setAttribute('type', 'checkbox');\n    element.setAttribute('value', 'foo');\n    element.checked = true;\n    const event = {\n      target: element\n    };\n    handler(event);\n    expect(action.trigger).to.have.been.calledWith(element, 'change', env.sandbox.match(object => object.detail.checked && object.detail.value == 'foo'));\n  });","file":"unit/test-action.js","skipped":false,"dir":"test"},{"name":"should trigger change event for <input type=\"range\"> elements","suites":["macros"],"updatePoint":{"line":1125,"column":67,"index":44285},"line":1125,"code":"  it('should trigger change event for <input type=\"range\"> elements', () => {\n    const handler = window.document.addEventListener.getCall(3).args[1];\n    const element = document.createElement('input');\n    element.setAttribute('type', 'range');\n    element.setAttribute('min', '0');\n    element.setAttribute('max', '10');\n    element.setAttribute('value', '5');\n    const event = {\n      target: element\n    };\n    handler(event);\n    expect(action.trigger).to.have.been.calledWith(element, 'change', env.sandbox.match(e => {\n      const {\n        max,\n        min,\n        value,\n        valueAsNumber\n      } = e.detail;\n      return min === '0' && max === '10' && value === '5' && valueAsNumber === 5;\n    }));\n  });","file":"unit/test-action.js","skipped":false,"dir":"test"},{"name":"should trigger change event for <input type=\"search\"> elements","suites":["macros"],"updatePoint":{"line":1146,"column":68,"index":45008},"line":1146,"code":"  it('should trigger change event for <input type=\"search\"> elements', () => {\n    const handler = window.document.addEventListener.getCall(3).args[1];\n    const element = document.createElement('input');\n    element.setAttribute('type', 'search');\n    element.value = 'foo';\n    const event = {\n      target: element\n    };\n    handler(event);\n    expect(action.trigger).to.have.been.calledWith(element, 'change', env.sandbox.match(e => e.detail.value == 'foo'));\n  });","file":"unit/test-action.js","skipped":false,"dir":"test"},{"name":"should trigger change event for <input type=\"file\"> elements","suites":["macros"],"updatePoint":{"line":1157,"column":66,"index":45477},"line":1157,"code":"  it('should trigger change event for <input type=\"file\"> elements', () => {\n    const handler = window.document.addEventListener.getCall(3).args[1];\n    const element = document.createElement('input');\n    element.setAttribute('type', 'file');\n    const event = {\n      target: element\n    };\n    handler(event);\n    expect(action.trigger).to.have.been.calledWith(element, 'change', env.sandbox.match(e => e.detail.files.length == 0));\n    element.setAttribute('multiple', '');\n    Object.defineProperty(element, 'files', {\n      value: {\n        0: new File(['foo'], 'foo.txt', {\n          type: 'text/plain'\n        }),\n        1: new File(['bar'], 'bar.txt', {\n          type: 'text/plain'\n        }),\n        length: 2\n      }\n    });\n    handler({\n      target: element\n    });\n    expect(action.trigger).to.have.been.calledWith(element, 'change', env.sandbox.match({\n      detail: {\n        files: [{\n          name: 'foo.txt',\n          size: 3,\n          type: 'text/plain'\n        }, {\n          name: 'bar.txt',\n          size: 3,\n          type: 'text/plain'\n        }]\n      }\n    }));\n  });","file":"unit/test-action.js","skipped":false,"dir":"test"},{"name":"should trigger change event with details for <select> elements","suites":["macros"],"updatePoint":{"line":1195,"column":68,"index":46584},"line":1195,"code":"  it('should trigger change event with details for <select> elements', () => {\n    const handler = window.document.addEventListener.getCall(3).args[1];\n    const element = document.createElement('select');\n    element.innerHTML = `<option value=\"foo\"></option>\n        <option value=\"bar\"></option>\n        <option value=\"qux\"></option>`;\n    element.selectedIndex = 2;\n    const event = {\n      target: element\n    };\n    handler(event);\n    expect(action.trigger).to.have.been.calledWith(element, 'change', env.sandbox.match(object => {\n      const {\n        detail\n      } = object;\n      return detail.value == 'qux';\n    }));\n  });","file":"unit/test-action.js","skipped":false,"dir":"test"},{"name":"should trigger change event with details for <textarea> elements","suites":["macros"],"updatePoint":{"line":1213,"column":70,"index":47223},"line":1213,"code":"  it('should trigger change event with details for <textarea> elements', () => {\n    const handler = window.document.addEventListener.getCall(3).args[1];\n    const element = document.createElement('textarea');\n    element.value = 'foo';\n    const event = {\n      target: element\n    };\n    handler(event);\n    expect(action.trigger).to.have.been.calledWith(element, 'change', env.sandbox.match(object => {\n      const {\n        detail\n      } = object;\n      return detail.value == 'foo';\n    }));\n  });","file":"unit/test-action.js","skipped":false,"dir":"test"},{"name":"should trigger input-debounced event on input","suites":["macros"],"updatePoint":{"line":1228,"column":51,"index":47708},"line":1228,"code":"  it('should trigger input-debounced event on input', () => {\n    env.sandbox.stub(action, 'invoke_');\n    const handler = window.document.addEventListener.getCall(4).args[1];\n    const element = document.createElement('input');\n    element.id = 'test';\n    element.setAttribute('on', 'input-debounced:test.hide');\n    element.value = 'foo bar baz';\n    const event = {\n      target: element\n    };\n    document.body.appendChild(element);\n    handler(event);\n    return triggerPromise.then(() => {\n      expect(action.trigger).to.have.been.calledWith(element, 'input-debounced', env.sandbox.match(event => {\n        const {\n          value\n        } = event.target;\n        return value == 'foo bar baz';\n      }));\n    });\n  });","file":"unit/test-action.js","skipped":false,"dir":"test"},{"name":"should trigger input-throttled event on input","suites":["macros"],"updatePoint":{"line":1249,"column":51,"index":48438},"line":1249,"code":"  it('should trigger input-throttled event on input', () => {\n    env.sandbox.stub(action, 'invoke_');\n    const handler = window.document.addEventListener.getCall(5).args[1];\n    const element = document.createElement('input');\n    element.id = 'test';\n    element.setAttribute('on', 'input-throttled:test.hide');\n    element.value = 'foo bar baz';\n    const event = {\n      target: element\n    };\n    document.body.appendChild(element);\n    handler(event);\n    return triggerPromise.then(() => {\n      expect(action.trigger).to.have.been.calledWith(element, 'input-throttled', env.sandbox.match(event => {\n        const {\n          value\n        } = event.target;\n        return value == 'foo bar baz';\n      }));\n    });\n  });","file":"unit/test-action.js","skipped":false,"dir":"test"},{"name":"should copy the properties of an event object","suites":["DeferredEvent"],"updatePoint":{"line":1271,"column":53,"index":49206},"line":1271,"code":"    it('should copy the properties of an event object', () => {\n      const event = createCustomEvent(window, 'MyEvent', {\n        foo: 'bar'\n      });\n      const deferredEvent = new DeferredEvent(event);\n      for (const key in deferredEvent) {\n        if (typeof deferredEvent[key] !== 'function') {\n          expect(deferredEvent[key]).to.deep.equal(event[key]);\n        }\n      }\n    });","file":"unit/test-action.js","skipped":false,"dir":"test"},{"name":"should replace functions with throws","suites":["DeferredEvent"],"updatePoint":{"line":1282,"column":44,"index":49590},"line":1282,"code":"    it('should replace functions with throws', function* () {\n      const event = createCustomEvent(window, 'MyEvent', {\n        foo: 'bar'\n      });\n      const deferredEvent = new DeferredEvent(event);\n      const errorText = 'cannot access native event functions';\n\n      // Specifically test these commonly used functions\n      yield allowConsoleError(() => {\n        expect(() => deferredEvent.preventDefault()).to.throw(errorText);\n      });\n      yield allowConsoleError(() => {\n        expect(() => deferredEvent.stopPropagation()).to.throw(errorText);\n      });\n\n      // Test all functions\n      for (const key in deferredEvent) {\n        const value = deferredEvent[key];\n        if (typeof value === 'function') {\n          yield allowConsoleError(() => {\n            expect(() => value()).to.throw(errorText);\n          });\n        }\n      }\n    });","file":"unit/test-action.js","skipped":false,"dir":"test"},{"name":"should allow all actions by default","suites":["with null action allowlist"],"updatePoint":{"line":1330,"column":43,"index":51166},"line":1330,"code":"    it('should allow all actions by default', () => {\n      const i = getActionInvocation(target, 'setState', 'AMP');\n      action.invoke_(i);\n      expect(spy).to.be.calledWithExactly(i);\n    });","file":"unit/test-action.js","skipped":false,"dir":"test"},{"name":"should allow all actions case insensitive","suites":["with null action allowlist"],"updatePoint":{"line":1335,"column":49,"index":51369},"line":1335,"code":"    it('should allow all actions case insensitive', () => {\n      const i = getActionInvocation(target, 'setState', 'amp');\n      action.invoke_(i);\n      expect(spy).to.be.calledWithExactly(i);\n    });","file":"unit/test-action.js","skipped":false,"dir":"test"},{"name":"should allow default actions if alias is registered default","suites":["with non-null action allowlist"],"updatePoint":{"line":1358,"column":67,"index":52045},"line":1358,"code":"    it('should allow default actions if alias is registered default', () => {\n      // Given that 'defaultAction' is a registered default action.\n      getDefaultActionAlias.returns('defaultAction');\n      // Expect the 'activate' call to invoke it.\n      const i = getActionInvocation(target, 'activate', null);\n      action.invoke_(i);\n      expect(spy).to.be.calledWithExactly(i);\n    });","file":"unit/test-action.js","skipped":false,"dir":"test"},{"name":"should allow allowlisted actions with wildcard target","suites":["with non-null action allowlist"],"updatePoint":{"line":1366,"column":61,"index":52431},"line":1366,"code":"    it('should allow allowlisted actions with wildcard target', () => {\n      const i = getActionInvocation(target, 'show', 'DIV');\n      action.invoke_(i);\n      expect(spy).to.be.calledWithExactly(i);\n    });","file":"unit/test-action.js","skipped":false,"dir":"test"},{"name":"should not allow non-allowlisted actions","suites":["with non-null action allowlist"],"updatePoint":{"line":1371,"column":48,"index":52629},"line":1371,"code":"    it('should not allow non-allowlisted actions', () => {\n      const i = getActionInvocation(target, 'print', 'AMP');\n      env.sandbox.stub(action, 'error_');\n      expect(action.invoke_(i)).to.be.null;\n      expect(action.error_).to.be.calledWithMatch(/\"AMP.print\" is not allowlisted/);\n    });","file":"unit/test-action.js","skipped":false,"dir":"test"},{"name":"should allow adding actions to the allowlist","suites":["with non-null action allowlist"],"updatePoint":{"line":1377,"column":52,"index":52932},"line":1377,"code":"    it('should allow adding actions to the allowlist', () => {\n      const i = getActionInvocation(target, 'print', 'AMP');\n      action.addToAllowlist('AMP', 'print');\n      action.invoke_(i);\n      expect(spy).to.be.calledWithExactly(i);\n    });","file":"unit/test-action.js","skipped":false,"dir":"test"},{"name":"should allow adding action lists to the allowlist","suites":["with non-null action allowlist"],"updatePoint":{"line":1383,"column":57,"index":53185},"line":1383,"code":"    it('should allow adding action lists to the allowlist', () => {\n      const i = getActionInvocation(target, 'print', 'AMP');\n      action.addToAllowlist('AMP', ['print']);\n      action.invoke_(i);\n      expect(spy).to.be.calledWithExactly(i);\n    });","file":"unit/test-action.js","skipped":false,"dir":"test"},{"name":"should not allow any action with empty allowlist","suites":["with non-null action allowlist"],"updatePoint":{"line":1390,"column":54,"index":53443},"line":1390,"code":"  it('should not allow any action with empty allowlist', () => {\n    action = new ActionService(env.ampdoc, env.win.document);\n    action.setAllowlist([]);\n    const i = getActionInvocation(target, 'print', 'AMP');\n    env.sandbox.stub(action, 'error_');\n    expect(action.invoke_(i)).to.be.null;\n    expect(action.error_).to.be.calledWith('\"AMP.print\" is not allowlisted [].');\n  });","file":"unit/test-action.js","skipped":false,"dir":"test"},{"name":"should throw error with unparseable allowlist entries","suites":["with non-null action allowlist"],"updatePoint":{"line":1398,"column":59,"index":53833},"line":1398,"code":"  it('should throw error with unparseable allowlist entries', () => {\n    action = new ActionService(env.ampdoc, env.win.document);\n    expect(() => action.setAllowlist([{\n      tagOrTarget: 'AMP',\n      method: 'pushState'\n    }, {\n      invalidEntry: 'invalid'\n    }, {}, {\n      tagOrTarget: 'AMP',\n      method: 'setState'\n    }, {\n      tagOrTarget: '*',\n      method: 'show'\n    }, {\n      tagOrTarget: '*'\n    }, {\n      method: 'show'\n    }])).to.throw('Action allowlist entries should be of shape { tagOrTarget: string, method: string }');\n    expect(action.allowlist_).to.be.null;\n  });","file":"unit/test-action.js","skipped":false,"dir":"test"},{"name":"should supply default actions allowlist","suites":["email documents"],"updatePoint":{"line":1423,"column":47,"index":54621},"line":1423,"code":"    it('should supply default actions allowlist', () => {\n      const i = getActionInvocation(target, 'toggleClass', 'AMP');\n      action.invoke_(i);\n      expect(spy).to.be.calledWithExactly(i);\n    });","file":"unit/test-action.js","skipped":false,"dir":"test"},{"name":"should supply default actions allowlist","suites":["email documents"],"updatePoint":{"line":1428,"column":47,"index":54825},"line":1428,"code":"    it('should supply default actions allowlist', () => {\n      const i = getActionInvocation(target, 'toggleChecked', 'AMP');\n      action.invoke_(i);\n      expect(spy).to.be.calledWithExactly(i);\n    });","file":"unit/test-action.js","skipped":false,"dir":"test"},{"name":"should not allow non-default actions","suites":["email documents"],"updatePoint":{"line":1433,"column":44,"index":55028},"line":1433,"code":"    it('should not allow non-default actions', () => {\n      const i = getActionInvocation(target, 'print', 'AMP');\n      env.sandbox.stub(action, 'error_');\n      expect(action.invoke_(i)).to.be.null;\n      expect(action.error_).to.be.calledWithMatch(/\"AMP.print\" is not allowlisted/);\n    });","file":"unit/test-action.js","skipped":false,"dir":"test"},{"name":"should have 0 engaged time if there is no activity","suites":[],"updatePoint":{"line":108,"column":56,"index":3685},"line":108,"code":"  it('should have 0 engaged time if there is no activity', () => {\n    return expect(activity.getTotalEngagedTime()).to.equal(0);\n  });","file":"unit/test-activity.js","skipped":false,"dir":"test"},{"name":"should have 5 seconds of engaged time after doc becomes visible","suites":[],"updatePoint":{"line":111,"column":69,"index":3834},"line":111,"code":"  it('should have 5 seconds of engaged time after doc becomes visible', () => {\n    whenFirstVisibleResolve();\n    return ampdoc.whenFirstVisible().then(() => {\n      clock.tick(10000);\n      return expect(activity.getTotalEngagedTime()).to.equal(5);\n    });\n  });","file":"unit/test-activity.js","skipped":false,"dir":"test"},{"name":"should have 4 seconds of engaged time 4 seconds after visible","suites":[],"updatePoint":{"line":118,"column":67,"index":4097},"line":118,"code":"  it('should have 4 seconds of engaged time 4 seconds after visible', () => {\n    whenFirstVisibleResolve();\n    return ampdoc.whenFirstVisible().then(() => {\n      clock.tick(4000);\n      return expect(activity.getTotalEngagedTime()).to.equal(4);\n    });\n  });","file":"unit/test-activity.js","skipped":false,"dir":"test"},{"name":"should have 10 seconds of engaged time","suites":[],"updatePoint":{"line":125,"column":44,"index":4336},"line":125,"code":"  it('should have 10 seconds of engaged time', () => {\n    whenFirstVisibleResolve();\n    return ampdoc.whenFirstVisible().then(() => {\n      clock.tick(6000);\n      mousedownObservable.fire();\n      clock.tick(20000);\n      return expect(activity.getTotalEngagedTime()).to.equal(10);\n    });\n  });","file":"unit/test-activity.js","skipped":false,"dir":"test"},{"name":"should have the same engaged time in separate requests","suites":[],"updatePoint":{"line":134,"column":60,"index":4651},"line":134,"code":"  it('should have the same engaged time in separate requests', () => {\n    whenFirstVisibleResolve();\n    return ampdoc.whenFirstVisible().then(() => {\n      clock.tick(3456);\n      mousedownObservable.fire();\n      clock.tick(10232);\n      const first = activity.getTotalEngagedTime();\n      clock.tick(25255);\n      return expect(activity.getTotalEngagedTime()).to.equal(first);\n    });\n  });","file":"unit/test-activity.js","skipped":false,"dir":"test"},{"name":"should not accumulate engaged time after inactivity","suites":[],"updatePoint":{"line":145,"column":57,"index":5043},"line":145,"code":"  it('should not accumulate engaged time after inactivity', () => {\n    const isVisibleStub = env.sandbox.stub(ampdoc, 'isVisible').returns(true);\n    whenFirstVisibleResolve();\n    return ampdoc.whenFirstVisible().then(() => {\n      clock.tick(3000);\n      mousedownObservable.fire();\n      clock.tick(1000);\n      isVisibleStub.returns(false);\n      visibilityObservable.fire();\n      clock.tick(10000);\n      return expect(activity.getTotalEngagedTime()).to.equal(4);\n    }).then(() => {\n      mousedownObservable.fire();\n      mouseleaveObservable.fire();\n      clock.tick(2000);\n      return expect(activity.getTotalEngagedTime()).to.equal(4);\n    });\n  });","file":"unit/test-activity.js","skipped":false,"dir":"test"},{"name":"should accumulate engaged time over multiple activities","suites":[],"updatePoint":{"line":163,"column":61,"index":5710},"line":163,"code":"  it('should accumulate engaged time over multiple activities', () => {\n    whenFirstVisibleResolve();\n    return ampdoc.whenFirstVisible().then(() => {\n      clock.tick(10000);\n      mousedownObservable.fire();\n      clock.tick(10000);\n      scrollObservable.fire();\n      clock.tick(10000);\n      mousedownObservable.fire();\n      clock.tick(10000);\n      return expect(activity.getTotalEngagedTime()).to.equal(20);\n    });\n  });","file":"unit/test-activity.js","skipped":false,"dir":"test"},{"name":"should have 0 seconds of incremental engaged time with no activity","suites":[],"updatePoint":{"line":287,"column":72,"index":10286},"line":287,"code":"  it('should have 0 seconds of incremental engaged time with no activity', () => {\n    return expect(activity.getIncrementalEngagedTime('tests')).to.equal(0);\n  });","file":"unit/test-activity.js","skipped":false,"dir":"test"},{"name":"should have 4 seconds of incremental engaged time after 4 seconds","suites":[],"updatePoint":{"line":297,"column":71,"index":10745},"line":297,"code":"  it('should have 4 seconds of incremental engaged time after 4 seconds', () => {\n    whenFirstVisibleResolve();\n    return ampdoc.whenFirstVisible().then(() => {\n      clock.tick(4000);\n      return expect(activity.getIncrementalEngagedTime('tests')).to.equal(4);\n    });\n  });","file":"unit/test-activity.js","skipped":false,"dir":"test"},{"name":"should reset incremental engaged time after each poll","suites":[],"updatePoint":{"line":304,"column":59,"index":11012},"line":304,"code":"  it('should reset incremental engaged time after each poll', () => {\n    whenFirstVisibleResolve();\n    return ampdoc.whenFirstVisible().then(() => {\n      clock.tick(10000);\n      mousedownObservable.fire();\n      const first = activity.getIncrementalEngagedTime('tests');\n      expect(first).to.equal(5);\n      expect(first).to.equal(activity.getTotalEngagedTime());\n      expect(activity.getIncrementalEngagedTime('tests')).to.equal(0);\n      clock.tick(10000);\n      const second = activity.getIncrementalEngagedTime('tests');\n      expect(second).to.equal(5);\n      return expect(second).not.to.equal(activity.getTotalEngagedTime());\n    });\n  });","file":"unit/test-activity.js","skipped":false,"dir":"test"},{"name":"should not reset incremental engaged time if reset is false","suites":[],"updatePoint":{"line":319,"column":65,"index":11672},"line":319,"code":"  it('should not reset incremental engaged time if reset is false', () => {\n    whenFirstVisibleResolve();\n    return ampdoc.whenFirstVisible().then(() => {\n      // don't reset\n      mousedownObservable.fire();\n      clock.tick(10000);\n      // more engaged time, don't reset\n      const second = activity.getIncrementalEngagedTime('tests', false);\n      expect(second).to.equal(5);\n      mousedownObservable.fire();\n      clock.tick(10000);\n      // more engaged time, don't reset\n      const third = activity.getIncrementalEngagedTime('tests', false);\n      expect(third).to.equal(10);\n      // more engaged time, reset\n      const fourth = activity.getIncrementalEngagedTime('tests', true);\n      expect(fourth).to.equal(10);\n      mousedownObservable.fire();\n      clock.tick(10000);\n      // more engaged time, don't reset\n      const fifth = activity.getIncrementalEngagedTime('tests', false);\n      expect(fifth).to.equal(5);\n      // reset with default value\n      const sixth = activity.getIncrementalEngagedTime('tests');\n      expect(sixth).to.equal(5);\n      // should be reset\n      const seventh = activity.getIncrementalEngagedTime('tests', false);\n      return expect(seventh).to.equal(0);\n    });\n  });","file":"unit/test-activity.js","skipped":false,"dir":"test"},{"name":"should keep individual incremental engaged times per name","suites":[],"updatePoint":{"line":349,"column":63,"index":12891},"line":349,"code":"  it('should keep individual incremental engaged times per name', () => {\n    whenFirstVisibleResolve();\n    return ampdoc.whenFirstVisible().then(() => {\n      clock.tick(10000);\n      mousedownObservable.fire();\n      const alpha = activity.getIncrementalEngagedTime('alpha');\n      const bravo = activity.getIncrementalEngagedTime('bravo');\n      // both names should be equal\n      expect(alpha).to.equal(bravo);\n      mousedownObservable.fire();\n      clock.tick(10000);\n      // check alpha and not bravo to reset alpha\n      const alpha2 = activity.getIncrementalEngagedTime('alpha');\n      expect(alpha2).to.equal(5);\n      mousedownObservable.fire();\n      clock.tick(10000);\n      // check bravo and alpha, alpha should be half bravo\n      const bravo2 = activity.getIncrementalEngagedTime('bravo');\n      const alpha3 = activity.getIncrementalEngagedTime('alpha');\n      expect(bravo2).to.equal(10);\n      return expect(alpha3).to.equal(5);\n    });\n  });","file":"unit/test-activity.js","skipped":false,"dir":"test"},{"name":"should get correct cid","suites":[],"updatePoint":{"line":36,"column":28,"index":948},"line":36,"code":"  it('should get correct cid', () => {\n    config.clientIdScope = cidScope;\n    let getCidStruct;\n    env.sandbox.stub(cidService, 'get').callsFake(struct => {\n      getCidStruct = struct;\n      return Promise.resolve('test123');\n    });\n    return getAdCid(adElement).then(cid => {\n      expect(cid).to.equal('test123');\n      expect(getCidStruct).to.deep.equal({\n        scope: cidScope,\n        createCookieIfNotPresent: true,\n        cookieName: undefined\n      });\n    });\n  });","file":"unit/test-ad-cid.js","skipped":false,"dir":"test"},{"name":"should respect clientIdCookieName field","suites":[],"updatePoint":{"line":52,"column":45,"index":1449},"line":52,"code":"  it('should respect clientIdCookieName field', () => {\n    config.clientIdScope = cidScope;\n    config.clientIdCookieName = 'different-cookie-name';\n    let getCidStruct;\n    env.sandbox.stub(cidService, 'get').callsFake(struct => {\n      getCidStruct = struct;\n      return Promise.resolve('test123');\n    });\n    return getAdCid(adElement).then(cid => {\n      expect(cid).to.equal('test123');\n      expect(getCidStruct).to.deep.equal({\n        scope: cidScope,\n        createCookieIfNotPresent: true,\n        cookieName: 'different-cookie-name'\n      });\n    });\n  });","file":"unit/test-ad-cid.js","skipped":false,"dir":"test"},{"name":"should return on timeout","suites":[],"updatePoint":{"line":69,"column":30,"index":2006},"line":69,"code":"  it('should return on timeout', () => {\n    config.clientIdScope = cidScope;\n    env.sandbox.stub(cidService, 'get').callsFake(() => {\n      return Services.timerFor(win).promise(2000);\n    });\n    const p = getAdCid(adElement).then(cid => {\n      expect(cid).to.be.undefined;\n      expect(win.Date.now()).to.equal(1000);\n    });\n    clock.tick(999);\n    // Let promises resolve before ticking 1 more ms.\n    Promise.resolve().then(() => {\n      clock.tick(1);\n    });\n    return p;\n  });","file":"unit/test-ad-cid.js","skipped":false,"dir":"test"},{"name":"should return undefined on failed CID","suites":[],"updatePoint":{"line":85,"column":43,"index":2509},"line":85,"code":"  it('should return undefined on failed CID', () => {\n    expectAsyncConsoleError(/nope/);\n    config.clientIdScope = cidScope;\n    env.sandbox.stub(cidService, 'get').callsFake(() => {\n      return Promise.reject(new Error('nope'));\n    });\n    return expect(getAdCid(adElement)).to.eventually.be.undefined;\n  });","file":"unit/test-ad-cid.js","skipped":false,"dir":"test"},{"name":"should allow position fixed element that is allowlisted","suites":["isAdPositionAllowed function"],"updatePoint":{"line":6,"column":63,"index":339},"line":6,"code":"    it('should allow position fixed element that is allowlisted', () => {\n      return createIframePromise().then(iframe => {\n        const allowlistedElement = iframe.doc.createElement('amp-lightbox');\n        allowlistedElement.style.position = 'fixed';\n        iframe.doc.body.appendChild(allowlistedElement);\n        expect(isAdPositionAllowed(allowlistedElement, iframe.win)).to.be.true;\n      });\n    });","file":"unit/test-ad-helper.js","skipped":false,"dir":"test"},{"name":"should allow position fixed element inside allowlisted element","suites":["isAdPositionAllowed function"],"updatePoint":{"line":14,"column":70,"index":757},"line":14,"code":"    it('should allow position fixed element inside allowlisted element', () => {\n      return createIframePromise().then(iframe => {\n        const allowlistedElement = iframe.doc.createElement('amp-lightbox');\n        allowlistedElement.style.position = 'fixed';\n        const childElement = iframe.doc.createElement('div');\n        const childChildElement = iframe.doc.createElement('div');\n        childElement.appendChild(childChildElement);\n        allowlistedElement.appendChild(childElement);\n        iframe.doc.body.appendChild(allowlistedElement);\n        expect(isAdPositionAllowed(childChildElement, iframe.win)).to.be.true;\n      });\n    });","file":"unit/test-ad-helper.js","skipped":false,"dir":"test"},{"name":"should return null if no container","suites":["getAdContainer function"],"updatePoint":{"line":61,"column":42,"index":3192},"line":61,"code":"    it('should return null if no container', () => {\n      return createIframePromise().then(iframe => {\n        const parentElement = iframe.doc.createElement('div');\n        const childElement = iframe.doc.createElement('div');\n        parentElement.appendChild(childElement);\n        iframe.doc.body.appendChild(parentElement);\n        expect(getAdContainer(childElement)).to.be.null;\n      });\n    });","file":"unit/test-ad-helper.js","skipped":false,"dir":"test"},{"name":"should return the closest container","suites":["getAdContainer function"],"updatePoint":{"line":70,"column":43,"index":3599},"line":70,"code":"    it('should return the closest container', () => {\n      return createIframePromise().then(iframe => {\n        const parentElement = iframe.doc.createElement('amp-lightbox');\n        const childElement = iframe.doc.createElement('amp-sticky-ad');\n        const childChildElement = iframe.doc.createElement('div');\n        iframe.doc.body.appendChild(parentElement);\n        parentElement.appendChild(childElement);\n        childElement.appendChild(childChildElement);\n        expect(getAdContainer(childChildElement)).to.equal(childElement.tagName);\n      });\n    });","file":"unit/test-ad-helper.js","skipped":false,"dir":"test"},{"name":"should return pre-calculated value","suites":["getAdContainer function"],"updatePoint":{"line":81,"column":42,"index":4169},"line":81,"code":"    it('should return pre-calculated value', () => {\n      return createIframePromise().then(iframe => {\n        const parentElement = iframe.doc.createElement('amp-fx-flying-carpet');\n        const childElement = iframe.doc.createElement('amp-sticky-ad');\n        parentElement.appendChild(childElement);\n        iframe.doc.body.appendChild(parentElement);\n        childElement['__AMP__AD_CONTAINER'] = 'AMP-LIGHTBOX';\n        expect(getAdContainer(childElement)).to.equal('AMP-LIGHTBOX');\n      });\n    });","file":"unit/test-ad-helper.js","skipped":false,"dir":"test"},{"name":"should have all ad networks configured","suites":[],"updatePoint":{"line":4,"column":44,"index":182},"line":4,"code":"  it('should have all ad networks configured', () => {\n    window.ampTestRuntimeConfig.adTypes.forEach(adType => {\n      expect(adConfig, `Missing config for [${adType}]`).to.contain.key(adType);\n    });\n  });","file":"unit/test-ads-config.js","skipped":false,"dir":"test"},{"name":"should sort adConfig in alphabetic order","suites":[],"line":11,"code":"  it.skip('should sort adConfig in alphabetic order', () => {","file":"unit/test-ads-config.js","skipped":true,"dir":"test"},{"name":"preconnect should have no duplicates with prefetch","suites":[],"updatePoint":{"line":18,"column":56,"index":768},"line":18,"code":"  it('preconnect should have no duplicates with prefetch', () => {\n    for (const adNetwork in adConfig) {\n      if (!hasOwn(adConfig, adNetwork)) {\n        continue;\n      }\n      const config = adConfig[adNetwork];\n      if (config.prefetch) {\n        checkDuplicates(config.preconnect, config.prefetch, adNetwork);\n      }\n    }\n  });","file":"unit/test-ads-config.js","skipped":false,"dir":"test"},{"name":"should use HTTPS URLs","suites":[],"updatePoint":{"line":29,"column":27,"index":1077},"line":29,"code":"  it('should use HTTPS URLs', () => {\n    for (const adNetwork in adConfig) {\n      if (!hasOwn(adConfig, adNetwork)) {\n        continue;\n      }\n      const config = adConfig[adNetwork];\n      let urls = [];\n      if (config.preconnect) {\n        urls = urls.concat(config.preconnect);\n      }\n      if (config.prefetch) {\n        urls = urls.concat(config.prefetch);\n      }\n      for (let i = 0; i < urls.length; i++) {\n        expect(urls[i].substr(0, 8), `${urls[i]} is not HTTPS`).to.equal('https://');\n      }\n    }\n  });","file":"unit/test-ads-config.js","skipped":false,"dir":"test"},{"name":"should navigate to correct destination","suites":[],"updatePoint":{"line":83,"column":44,"index":2696},"line":83,"code":"  it('should navigate to correct destination', () => {\n    simpleSuccess();\n  });","file":"unit/test-alp-handler.js","skipped":false,"dir":"test"},{"name":"should navigate to correct destination (left mouse button)","suites":[],"updatePoint":{"line":86,"column":64,"index":2798},"line":86,"code":"  it('should navigate to correct destination (left mouse button)', () => {\n    event.button = 1;\n    simpleSuccess();\n  });","file":"unit/test-alp-handler.js","skipped":false,"dir":"test"},{"name":"should perform a2a navigation if appropriate","suites":[],"updatePoint":{"line":90,"column":50,"index":2908},"line":90,"code":"  it('should perform a2a navigation if appropriate', () => {\n    win.location.ancestorOrigins = ['https://cdn.ampproject.org', 'https://www.google.com'];\n    a2aSuccess(win.parent);\n  });","file":"unit/test-alp-handler.js","skipped":false,"dir":"test"},{"name":"should perform a2a navigation if appropriate (.de)","suites":[],"updatePoint":{"line":94,"column":56,"index":3102},"line":94,"code":"  it('should perform a2a navigation if appropriate (.de)', () => {\n    win.location.ancestorOrigins = ['https://cdn.ampproject.org', 'https://www.google.de'];\n    a2aSuccess(win.parent);\n  });","file":"unit/test-alp-handler.js","skipped":false,"dir":"test"},{"name":"should perform a2a navigation if appropriate nested: 1","suites":[],"updatePoint":{"line":98,"column":60,"index":3299},"line":98,"code":"  it('should perform a2a navigation if appropriate nested: 1', () => {\n    win.location.ancestorOrigins = ['https://3p.ampproject.net', 'https://cdn.ampproject.org', 'https://www.google.de'];\n    a2aSuccess(win.parent.parent);\n  });","file":"unit/test-alp-handler.js","skipped":false,"dir":"test"},{"name":"should perform a2a navigation if appropriate nested: 2","suites":[],"updatePoint":{"line":102,"column":60,"index":3532},"line":102,"code":"  it('should perform a2a navigation if appropriate nested: 2', () => {\n    win.location.ancestorOrigins = ['https://some-domain.com', 'https://3p.ampproject.net', 'https://cdn.ampproject.org', 'https://www.google.de'];\n    a2aSuccess(win.parent.parent.parent);\n  });","file":"unit/test-alp-handler.js","skipped":false,"dir":"test"},{"name":"should perform a2a navigation if appropriate nested: 3","suites":[],"updatePoint":{"line":106,"column":60,"index":3799},"line":106,"code":"  it('should perform a2a navigation if appropriate nested: 3', () => {\n    win.location.ancestorOrigins = ['https://some-domain.com', 'https://some-domain.com', 'https://3p.ampproject.net', 'https://cdn.ampproject.org', 'https://www.google.de'];\n    a2aSuccess(win.parent.parent.parent.parent);\n  });","file":"unit/test-alp-handler.js","skipped":false,"dir":"test"},{"name":"should not perform a2a for other origins","suites":[],"updatePoint":{"line":110,"column":46,"index":4086},"line":110,"code":"  it('should not perform a2a for other origins', () => {\n    win.location.ancestorOrigins = ['https://cdn.ampproject.org', 'https://www.other.com'];\n    simpleSuccess();\n  });","file":"unit/test-alp-handler.js","skipped":false,"dir":"test"},{"name":"should not perform a2a for other origins (2)","suites":[],"updatePoint":{"line":114,"column":50,"index":4266},"line":114,"code":"  it('should not perform a2a for other origins (2)', () => {\n    win.location.ancestorOrigins = ['https://cdn.ampproject2.org', 'https://www.google.com'];\n    simpleSuccess();\n  });","file":"unit/test-alp-handler.js","skipped":false,"dir":"test"},{"name":"should perform special navigation if specially asked for","suites":[],"updatePoint":{"line":118,"column":62,"index":4460},"line":118,"code":"  it('should perform special navigation if specially asked for', () => {\n    const navigateSpy = env.sandbox.spy();\n    const opt_navigate = val => {\n      navigateSpy();\n      expect(val).to.equal('https://cdn.ampproject.org/c/www.example.com/amp.html#click=' + 'https%3A%2F%2Ftest.com%3Famp%3D1%26adurl%3Dhttps%253A%252F%252F' + 'cdn.ampproject.org%252Fc%252Fwww.example.com%252Famp.html');\n    };\n    handleClick(event, opt_navigate);\n    expect(event.preventDefault).to.be.calledOnce;\n    expect(open).to.not.be.called;\n    expect(navigateSpy).to.be.calledOnce;\n  });","file":"unit/test-alp-handler.js","skipped":false,"dir":"test"},{"name":"should navigate if trusted is not set.","suites":[],"updatePoint":{"line":129,"column":44,"index":5014},"line":129,"code":"  it('should navigate if trusted is not set.', () => {\n    delete event.trusted;\n    simpleSuccess();\n  });","file":"unit/test-alp-handler.js","skipped":false,"dir":"test"},{"name":"should fail with trusted being false","suites":[],"updatePoint":{"line":133,"column":42,"index":5120},"line":133,"code":"  it('should fail with trusted being false', () => {\n    event.isTrusted = false;\n    noNavigation();\n  });","file":"unit/test-alp-handler.js","skipped":false,"dir":"test"},{"name":"should support custom arg name","suites":[],"updatePoint":{"line":137,"column":36,"index":5222},"line":137,"code":"  it('should support custom arg name', () => {\n    anchor.getAttribute.withArgs('data-url-param-name').returns('TEST');\n    anchor.href = 'https://test.com?TEST=' + encodeURIComponent('https://cdn.ampproject.org/c/www.example.com/amp.html');\n    handleClick(event);\n    expect(open.lastCall.args).to.jsonEqual(['https://cdn.ampproject.org/c/www.example.com/amp.html#click=' + 'https%3A%2F%2Ftest.com%3Famp%3D1%26TEST%3Dhttps%253A%252F%252F' + 'cdn.ampproject.org%252Fc%252Fwww.example.com%252Famp.html', '_top', undefined]);\n  });","file":"unit/test-alp-handler.js","skipped":false,"dir":"test"},{"name":"should support existing fragments","suites":[],"updatePoint":{"line":143,"column":39,"index":5756},"line":143,"code":"  it('should support existing fragments', () => {\n    anchor.href = 'https://test.com?adurl=' + encodeURIComponent('https://cdn.ampproject.org/c/www.example.com/amp.html#test=1');\n    handleClick(event);\n    expect(open.lastCall.args).to.jsonEqual(['https://cdn.ampproject.org/c/www.example.com/amp.html#test=1&click=' + 'https%3A%2F%2Ftest.com%3Famp%3D1%26adurl%3Dhttps%253A%252F%252F' + 'cdn.ampproject.org%252Fc%252Fwww.example.com%252Famp.html' + '%2523test%253D1', '_top', undefined]);\n  });","file":"unit/test-alp-handler.js","skipped":false,"dir":"test"},{"name":"should support other targets","suites":[],"updatePoint":{"line":148,"column":34,"index":6248},"line":148,"code":"  it('should support other targets', () => {\n    anchor.target = '_blank';\n    handleClick(event);\n    expect(open.lastCall.args[1]).to.equal('_blank');\n  });","file":"unit/test-alp-handler.js","skipped":false,"dir":"test"},{"name":"should find the closest a tag","suites":[],"updatePoint":{"line":153,"column":35,"index":6408},"line":153,"code":"  it('should find the closest a tag', () => {\n    const a = anchor;\n    event.target = {\n      nodeType: 1,\n      parentElement: {\n        nodeType: 1,\n        parentElement: a\n      }\n    };\n    simpleSuccess();\n  });","file":"unit/test-alp-handler.js","skipped":false,"dir":"test"},{"name":"should require an a tag","suites":[],"updatePoint":{"line":164,"column":29,"index":6621},"line":164,"code":"  it('should require an a tag', () => {\n    event.target = {\n      nodeType: 1\n    };\n    noNavigation();\n  });","file":"unit/test-alp-handler.js","skipped":false,"dir":"test"},{"name":"should ignore other mouse buttons","suites":[],"updatePoint":{"line":170,"column":39,"index":6743},"line":170,"code":"  it('should ignore other mouse buttons', () => {\n    event.buttons = 2;\n    noNavigation();\n  });","file":"unit/test-alp-handler.js","skipped":false,"dir":"test"},{"name":"should ignore special keys","suites":[],"updatePoint":{"line":174,"column":32,"index":6835},"line":174,"code":"  it('should ignore special keys', () => {\n    event.ctrlKey = true;\n    noNavigation();\n  });","file":"unit/test-alp-handler.js","skipped":false,"dir":"test"},{"name":"should only navigate to AMP","suites":[],"updatePoint":{"line":178,"column":33,"index":6931},"line":178,"code":"  it('should only navigate to AMP', () => {\n    anchor.href = 'https://test.com?adurl=' + encodeURIComponent('https://notamp.com/c/www.example.com/amp.html');\n    noNavigation();\n  });","file":"unit/test-alp-handler.js","skipped":false,"dir":"test"},{"name":"should require a destination","suites":[],"updatePoint":{"line":182,"column":34,"index":7117},"line":182,"code":"  it('should require a destination', () => {\n    anchor.href = 'https://test.com?adurl=';\n    noNavigation();\n  });","file":"unit/test-alp-handler.js","skipped":false,"dir":"test"},{"name":"should warmup statically","suites":[],"updatePoint":{"line":186,"column":30,"index":7229},"line":186,"code":"  it('should warmup statically', () => {\n    warmupStatic(win);\n    expect(image).to.exist;\n    expect(image.src).to.equal('https://cdn.ampproject.org/preconnect.gif');\n    expect(win.document.head.appendChild).to.be.calledOnce;\n    const link = win.document.head.appendChild.lastCall.args[0];\n    expect(link.rel).to.equal('preload');\n    expect(link.href).to.equal('https://cdn.ampproject.org/v0.js');\n  });","file":"unit/test-alp-handler.js","skipped":false,"dir":"test"},{"name":"should warmup dynamically","suites":[],"updatePoint":{"line":195,"column":31,"index":7640},"line":195,"code":"  it('should warmup dynamically', () => {\n    warmupDynamic(event);\n    expect(win.document.head.appendChild).to.be.callCount(2);\n    const link0 = win.document.head.appendChild.firstCall.args[0];\n    expect(link0.rel).to.equal('preload');\n    expect(link0.href).to.equal('https://cdn.ampproject.org/c/www.example.com/amp.html');\n    const link1 = win.document.head.appendChild.secondCall.args[0];\n    expect(link1.rel).to.equal('preload');\n    expect(link1.as).to.equal('fetch');\n    expect(link1.href).to.equal('https://cdn.ampproject.org/c/www.example.com/amp.html');\n  });","file":"unit/test-alp-handler.js","skipped":false,"dir":"test"},{"name":"should ignore irrelevant events for warmup (bad target)","suites":[],"updatePoint":{"line":206,"column":61,"index":8247},"line":206,"code":"  it('should ignore irrelevant events for warmup (bad target)', () => {\n    event.target = {\n      nodeType: 1\n    };\n    warmupDynamic(event);\n    expect(win.document.head.appendChild).to.have.not.been.called;\n  });","file":"unit/test-alp-handler.js","skipped":false,"dir":"test"},{"name":"should ignore irrelevant events for warmup (bad href)","suites":[],"updatePoint":{"line":213,"column":59,"index":8462},"line":213,"code":"  it('should ignore irrelevant events for warmup (bad href)', () => {\n    anchor.href = 'https://www.example.com';\n    warmupDynamic(event);\n    expect(win.document.head.appendChild).to.have.not.been.called;\n  });","file":"unit/test-alp-handler.js","skipped":false,"dir":"test"},{"name":"should send error message with report3pError","suites":[],"updatePoint":{"line":36,"column":50,"index":1126},"line":36,"code":"  it('should send error message with report3pError', () => {\n    win.name = generateSerializedAttributes();\n    const context = new AmpContext(win);\n    expect(context).to.be.ok;\n\n    // Resetting since a message is sent on construction.\n    windowPostMessageSpy.resetHistory();\n    context.report3pError(new Error('test'));\n    expect(windowPostMessageSpy).to.be.called;\n    expect(windowPostMessageSpy).to.be.calledWith(serializeMessage('user-error-in-iframe', '1-291921', {\n      'message': 'test'\n    }, '01$internalRuntimeVersion$'));\n  });","file":"unit/test-amp-context.js","skipped":false,"dir":"test"},{"name":"should add metadata to window.context using name as per 3P.","suites":[],"updatePoint":{"line":49,"column":65,"index":1687},"line":49,"code":"  it('should add metadata to window.context using name as per 3P.', () => {\n    win.name = generateSerializedAttributes();\n    const context = new AmpContext(win);\n    expect(context.location).to.deep.equal({\n      'hash': '',\n      'host': 'foo.com',\n      'hostname': 'foo.com',\n      'href': 'https://foo.com/a?b=c',\n      'origin': 'https://foo.com',\n      'pathname': '/a',\n      'port': '',\n      'protocol': 'https:',\n      'search': '?b=c'\n    });\n    expect(context.canonicalUrl).to.equal('https://bar.com');\n    expect(context.pageViewId).to.equal('1');\n    expect(context.sentinel).to.equal('1-291921');\n    expect(context.startTime).to.equal(0);\n    expect(context.referrer).to.equal('baz.net');\n  });","file":"unit/test-amp-context.js","skipped":false,"dir":"test"},{"name":"should add metadata to window.context using name as per A4A.","suites":[],"updatePoint":{"line":69,"column":66,"index":2402},"line":69,"code":"  it('should add metadata to window.context using name as per A4A.', () => {\n    win.name = generateSerializedAttributesA4A();\n    const context = new AmpContext(win);\n    expect(context.location).to.deep.equal({\n      'hash': '',\n      'host': 'foo.com',\n      'hostname': 'foo.com',\n      'href': 'https://foo.com/a?b=c',\n      'origin': 'https://foo.com',\n      'pathname': '/a',\n      'port': '',\n      'protocol': 'https:',\n      'search': '?b=c'\n    });\n    expect(context.canonicalUrl).to.equal('https://bar.com');\n    expect(context.pageViewId).to.equal('1');\n    expect(context.sentinel).to.equal('1-291921');\n    expect(context.startTime).to.equal(0);\n    expect(context.referrer).to.equal('baz.net');\n  });","file":"unit/test-amp-context.js","skipped":false,"dir":"test"},{"name":"should add metadata to window.context using window var.","suites":[],"updatePoint":{"line":89,"column":61,"index":3115},"line":89,"code":"  it('should add metadata to window.context using window var.', () => {\n    win.AMP_CONTEXT_DATA = generateAttributes();\n    const context = new AmpContext(win);\n    expect(context.location).to.deep.equal({\n      'hash': '',\n      'host': 'foo.com',\n      'hostname': 'foo.com',\n      'href': 'https://foo.com/a?b=c',\n      'origin': 'https://foo.com',\n      'pathname': '/a',\n      'port': '',\n      'protocol': 'https:',\n      'search': '?b=c'\n    });\n    expect(context.canonicalUrl).to.equal('https://bar.com');\n    expect(context.pageViewId).to.equal('1');\n    expect(context.pageViewId64).to.equal('abcdef');\n    expect(context.sentinel).to.equal('1-291921');\n    expect(context.startTime).to.equal(0);\n    expect(context.referrer).to.equal('baz.net');\n  });","file":"unit/test-amp-context.js","skipped":false,"dir":"test"},{"name":"should set up only sentinel if no metadata provided.","suites":[],"updatePoint":{"line":110,"column":58,"index":3877},"line":110,"code":"  it('should set up only sentinel if no metadata provided.', () => {\n    const sentinel = '1-456';\n    win.AMP_CONTEXT_DATA = sentinel;\n    const context = new AmpContext(win);\n    expect(context.sentinel).to.equal(sentinel);\n  });","file":"unit/test-amp-context.js","skipped":false,"dir":"test"},{"name":"should throw error if sentinel invalid","suites":[],"updatePoint":{"line":116,"column":44,"index":4095},"line":116,"code":"  it('should throw error if sentinel invalid', () => {\n    win.name = generateSerializedAttributes('foobar');\n    allowConsoleError(() => {\n      expect(() => new AmpContext(win)).to.throw('Incorrect sentinel format');\n    });\n  });","file":"unit/test-amp-context.js","skipped":false,"dir":"test"},{"name":"should be able to send an intersection observer request","suites":[],"updatePoint":{"line":129,"column":61,"index":4677},"line":129,"code":"  it('should be able to send an intersection observer request', () => {\n    win.name = generateSerializedAttributes();\n    const context = new AmpContext(win);\n    const callbackSpy = env.sandbox.spy();\n\n    // Resetting since a message is sent on construction.\n    windowPostMessageSpy.resetHistory();\n    const stopObserving = context.observeIntersection(callbackSpy);\n\n    // window.context should have sent postMessage asking for intersection\n    // observer\n    expect(windowPostMessageSpy).to.be.calledOnce;\n    expect(windowPostMessageSpy).to.be.calledWith('amp-01$internalRuntimeVersion$' + '{\"type\":\"send-intersections\",\"sentinel\":\"1-291921\"}', '*');\n\n    // send an intersection message down\n    const messagePayload = {\n      sentinel: '1-291921',\n      type: MessageType_Enum.INTERSECTION,\n      changes: 'changes'\n    };\n    const messageData = 'amp-' + JSON.stringify(messagePayload);\n    const message = {\n      source: context.client_.hostWindow_,\n      data: messageData\n    };\n    windowMessageHandler(message);\n\n    // window.context should have received intersection observer postMessage\n    // back, and should have called the callback function\n    expect(callbackSpy).to.be.calledOnce;\n    expect(callbackSpy).to.be.calledWith('changes');\n\n    // Stop listening for intersection observer messages\n    stopObserving();\n\n    // Send intersection observer message\n    windowMessageHandler(message);\n    expect(callbackSpy).to.be.calledOnce;\n  });","file":"unit/test-amp-context.js","skipped":false,"dir":"test"},{"name":"should send a pM and set callback when onPageVisibilityChange()","suites":[],"updatePoint":{"line":168,"column":69,"index":6151},"line":168,"code":"  it('should send a pM and set callback when onPageVisibilityChange()', () => {\n    win.name = generateSerializedAttributes();\n    const context = new AmpContext(win);\n    const callbackSpy = env.sandbox.spy();\n    const stopObserving = context.onPageVisibilityChange(callbackSpy);\n\n    // window.context should have sent postMessage asking for visibility\n    // observer\n    expect(windowPostMessageSpy).to.be.calledOnce;\n    expect(windowPostMessageSpy).to.be.calledWith('amp-01$internalRuntimeVersion$' + '{\"type\":\"send-embed-state\",\"sentinel\":\"1-291921\"}', '*');\n\n    // send a page visibility message down\n    const messagePayload = {\n      sentinel: '1-291921',\n      type: MessageType_Enum.EMBED_STATE,\n      pageHidden: true\n    };\n    const messageData = 'amp-' + JSON.stringify(messagePayload);\n    const message = {\n      source: context.client_.hostWindow_,\n      data: messageData\n    };\n    windowMessageHandler(message);\n\n    // window.context should have received visibility observer postMessage\n    // back, and should have called the callback function\n    expect(callbackSpy).to.be.calledOnce;\n    expect(callbackSpy).to.be.calledWith({\n      hidden: true\n    });\n\n    // Stop listening for page visibility observer messages\n    stopObserving();\n\n    // Send visibility observer message\n    windowMessageHandler(message);\n\n    // callback should not have been called a second time\n    expect(callbackSpy).to.be.calledOnce;\n  });","file":"unit/test-amp-context.js","skipped":false,"dir":"test"},{"name":"should return promise for resize request","suites":[],"updatePoint":{"line":208,"column":46,"index":7575},"line":208,"code":"  it('should return promise for resize request', async () => {\n    win.name = generateSerializedAttributes();\n    const context = new AmpContext(win);\n\n    // Resetting since a message is sent on construction.\n    windowPostMessageSpy.resetHistory();\n    const successCallbackSpy = env.sandbox.spy();\n    const failureCallbackSpy = env.sandbox.spy();\n    const initialId = context.nextResizeRequestId_;\n    const height = 100;\n    const width = 200;\n    const promise = Promise.all([context.requestResize(height, width).then(successCallbackSpy).then(() => {\n      expect(successCallbackSpy).to.be.calledOnce;\n    }), context.requestResize(height, width).catch(failureCallbackSpy).then(() => {\n      expect(failureCallbackSpy).to.be.calledOnce;\n    })]);\n\n    // send a resize success message down\n    const messagePayloadSuccess = {\n      sentinel: '1-291921',\n      type: MessageType_Enum.EMBED_SIZE_CHANGED,\n      id: initialId,\n      requestedHeight: 300,\n      requestedWidth: 200\n    };\n    windowMessageHandler({\n      source: context.client_.hostWindow_,\n      data: 'amp-' + JSON.stringify(messagePayloadSuccess)\n    });\n\n    // send a resize failure message down\n    const messagePayloadFailure = {\n      sentinel: '1-291921',\n      type: MessageType_Enum.EMBED_SIZE_DENIED,\n      id: initialId + 1,\n      requestedHeight: 300,\n      requestedWidth: 200\n    };\n    windowMessageHandler({\n      source: context.client_.hostWindow_,\n      data: 'amp-' + JSON.stringify(messagePayloadFailure)\n    });\n    return promise;\n  });","file":"unit/test-amp-context.js","skipped":false,"dir":"test"},{"name":"should call resize success callback on resize success","suites":[],"updatePoint":{"line":252,"column":59,"index":9121},"line":252,"code":"  it('should call resize success callback on resize success', () => {\n    win.name = generateSerializedAttributes();\n    const context = new AmpContext(win);\n\n    // Resetting since a message is sent on construction.\n    windowPostMessageSpy.resetHistory();\n    context.sendDeprecationNotice_ = env.sandbox.spy();\n    const successCallbackSpy = env.sandbox.spy();\n    const deniedCallbackSpy = env.sandbox.spy();\n    context.onResizeSuccess(successCallbackSpy);\n    context.onResizeDenied(deniedCallbackSpy);\n    expect(context.sendDeprecationNotice_).to.be.calledTwice;\n    const height = 100;\n    const width = 200;\n    context.requestResize(height, width);\n\n    // window.context should have sent postMessage requesting resize\n    expect(windowPostMessageSpy).to.be.calledOnce;\n    expect(windowPostMessageSpy).to.be.calledWith('amp-01$internalRuntimeVersion$' + '{\"id\":0,\"width\":100,\"height\":200,\"type\":\"embed-size\",\"sentinel\":\"1-291921\"}', '*');\n\n    // send a resize success message down\n    const messagePayload = {\n      sentinel: '1-291921',\n      type: MessageType_Enum.EMBED_SIZE_CHANGED,\n      requestedHeight: 300,\n      requestedWidth: 200\n    };\n    const messageData = 'amp-' + JSON.stringify(messagePayload);\n    const message = {\n      source: context.client_.hostWindow_,\n      data: messageData\n    };\n    windowMessageHandler(message);\n\n    // window.context should have received resize success message, and then\n    // called the success callback\n    expect(successCallbackSpy).to.be.calledOnce;\n    expect(successCallbackSpy).to.be.calledWith(300, 200);\n    expect(deniedCallbackSpy).to.not.be.called;\n  });","file":"unit/test-amp-context.js","skipped":false,"dir":"test"},{"name":"should call resize denied callback on resize denied","suites":[],"updatePoint":{"line":292,"column":57,"index":10750},"line":292,"code":"  it('should call resize denied callback on resize denied', () => {\n    win.name = generateSerializedAttributes();\n    const context = new AmpContext(win);\n\n    // Resetting since a message is sent on construction.\n    windowPostMessageSpy.resetHistory();\n    const successCallbackSpy = env.sandbox.spy();\n    const deniedCallbackSpy = env.sandbox.spy();\n    context.onResizeSuccess(successCallbackSpy);\n    context.onResizeDenied(deniedCallbackSpy);\n    const height = 100;\n    const width = 200;\n    context.requestResize(height, width);\n\n    // window.context should have sent resize request postMessage\n    expect(windowPostMessageSpy).to.be.calledWith('amp-01$internalRuntimeVersion$' + '{\"id\":0,\"width\":100,\"height\":200,\"type\":\"embed-size\",\"sentinel\":\"1-291921\"}', '*');\n\n    // send a resize denied message down\n    const messagePayload = {\n      sentinel: '1-291921',\n      type: MessageType_Enum.EMBED_SIZE_DENIED,\n      requestedHeight: 300,\n      requestedWidth: 200\n    };\n    const messageData = 'amp-' + JSON.stringify(messagePayload);\n    const message = {\n      source: context.client_.hostWindow_,\n      data: messageData\n    };\n    windowMessageHandler(message);\n\n    // resize denied callback should have been called\n    expect(deniedCallbackSpy).to.be.calledOnce;\n    expect(deniedCallbackSpy).to.be.calledWith(300, 200);\n    expect(successCallbackSpy).to.not.be.called;\n  });","file":"unit/test-amp-context.js","skipped":false,"dir":"test"},{"name":"should not continue if element is not AMP element","suites":["whenUpgradeToCustomElement function"],"updatePoint":{"line":16,"column":57,"index":540},"line":16,"code":"    it('should not continue if element is not AMP element', () => {\n      const element = doc.createElement('div');\n      allowConsoleError(() => {\n        expect(() => whenUpgradedToCustomElement(element)).to.throw('element is not AmpElement');\n      });\n    });","file":"unit/test-amp-element-helpers.js","skipped":false,"dir":"test"},{"name":"should resolve if element has already upgrade","suites":["whenUpgradeToCustomElement function"],"updatePoint":{"line":22,"column":53,"index":800},"line":22,"code":"    it('should resolve if element has already upgrade', () => {\n      const element = doc.createElement('amp-img');\n      element.setAttribute('layout', 'nodisplay');\n      doc.body.appendChild(element);\n      return whenUpgradedToCustomElement(element).then(element => {\n        expect(element.whenBuilt).to.exist;\n      });\n    });","file":"unit/test-amp-element-helpers.js","skipped":false,"dir":"test"},{"name":"should resolve when element upgrade","suites":["whenUpgradeToCustomElement function"],"updatePoint":{"line":30,"column":43,"index":1124},"line":30,"code":"    it('should resolve when element upgrade', () => {\n      const element = doc.createElement('amp-test');\n      element.setAttribute('layout', 'nodisplay');\n      doc.body.appendChild(element);\n      env.win.setTimeout(() => {\n        env.win.customElements.define('amp-test', createAmpElementForTesting(env.win, TestElement));\n      }, 100);\n      return whenUpgradedToCustomElement(element).then(element => {\n        expect(element.whenBuilt).to.exist;\n      });\n    });","file":"unit/test-amp-element-helpers.js","skipped":false,"dir":"test"},{"name":"should not exceed given width and height even if image      natural size is larger","suites":[],"updatePoint":{"line":42,"column":28,"index":1718},"line":41,"code":"    it('should not exceed given width and height even if image\\\n      natural size is larger', async () => {\n      const ampImg = await getImg({\n        src: '/examples/img/sample.jpg',\n        // 641 x 481\n        width: 100,\n        height: 100,\n        layout: 'intrinsic'\n      });\n      await browser.waitForElementLayout('amp-img');\n      expect(ampImg.getBoundingClientRect()).to.include({\n        width: 100,\n        height: 100\n      });\n      const img = ampImg.querySelector('img');\n      expect(img.getBoundingClientRect()).to.include({\n        width: 100,\n        height: 100\n      });\n    });","file":"unit/test-amp-img-intrinsic.js","skipped":false,"dir":"test"},{"name":"should reach given width and height even if image      natural size is smaller","suites":[],"updatePoint":{"line":62,"column":29,"index":2321},"line":61,"code":"    it('should reach given width and height even if image\\\n      natural size is smaller', async () => {\n      const ampImg = await getImg({\n        src: '/examples/img/sample.jpg',\n        // 641 x 481\n        width: 800,\n        height: 600,\n        layout: 'intrinsic'\n      });\n      await browser.waitForElementLayout('amp-img');\n      expect(ampImg.getBoundingClientRect()).to.include({\n        width: 800,\n        height: 600\n      });\n      const img = ampImg.querySelector('img');\n      expect(img.getBoundingClientRect()).to.include({\n        width: 800,\n        height: 600\n      });\n    });","file":"unit/test-amp-img-intrinsic.js","skipped":false,"dir":"test"},{"name":"expands a parent div with no explicit dimensions","suites":[],"updatePoint":{"line":81,"column":56,"index":2892},"line":81,"code":"    it('expands a parent div with no explicit dimensions', async () => {\n      const parentDiv = fixture.doc.getElementById('parent');\n      // inline-block to force width and height to size of children\n      // font-size 0 to get rid of the 4px added by inline-block for whitespace\n      parentDiv.setAttribute('style', 'display: inline-block; font-size: 0;');\n      const ampImg = await getImg({\n        src: '/examples/img/sample.jpg',\n        // 641 x 481\n        width: 600,\n        height: 400,\n        layout: 'intrinsic'\n      });\n      await browser.waitForElementLayout('amp-img');\n      expect(ampImg.getBoundingClientRect()).to.include({\n        width: 600,\n        height: 400\n      });\n      expect(parentDiv.getBoundingClientRect()).to.include({\n        width: 600,\n        height: 400\n      });\n    });","file":"unit/test-amp-img-intrinsic.js","skipped":false,"dir":"test"},{"name":"is bounded by explicit dimensions of a parent container","suites":[],"updatePoint":{"line":103,"column":63,"index":3718},"line":103,"code":"    it('is bounded by explicit dimensions of a parent container', async () => {\n      const parentDiv = fixture.doc.getElementById('parent');\n      parentDiv.setAttribute('style', 'width: 80px; height: 80px');\n      const ampImg = await getImg({\n        src: '/examples/img/sample.jpg',\n        // 641 x 481\n        width: 800,\n        height: 600,\n        layout: 'intrinsic'\n      });\n      await browser.waitForElementLayout('amp-img');\n      expect(ampImg.getBoundingClientRect()).to.include({\n        width: 80,\n        height: 60\n      });\n      expect(parentDiv.getBoundingClientRect()).to.include({\n        width: 80,\n        height: 80\n      });\n    });","file":"unit/test-amp-img-intrinsic.js","skipped":false,"dir":"test"},{"name":"SSR sizer does not interfere with img creation","suites":[],"updatePoint":{"line":123,"column":54,"index":4372},"line":123,"code":"    it('SSR sizer does not interfere with img creation', async () => {\n      const parentDiv = fixture.doc.getElementById('parent');\n      parentDiv.setAttribute('style', 'width: 80px; height: 80px');\n\n      // Hack so we don't duplicate intrinsic's layout code here.\n      const tmp = createElementWithAttributes(fixture.doc, 'div', {\n        src: '/examples/img/sample.jpg',\n        // 641 x 481\n        width: 800,\n        height: 600,\n        layout: 'intrinsic'\n      });\n      const serverRenderedImg = createElementWithAttributes(fixture.doc, 'img', {\n        src: '/examples/img/sample.jpg'\n      });\n      applyStaticLayout(tmp);\n      const attributes = {\n        'i-amphtml-ssr': ''\n      };\n      for (let i = 0; i < tmp.attributes.length; i++) {\n        attributes[tmp.attributes[i].name] = tmp.attributes[i].value;\n      }\n      const ampImg = await getImg(attributes, [serverRenderedImg].concat(toArray(tmp.children)));\n      await browser.waitForElementLayout('amp-img');\n      expect(ampImg.querySelector('img[src*=\"sample.jpg\"]')).to.exist;\n      expect(ampImg.querySelector('img[src*=\"image/svg+xml\"]')).to.exist;\n    });","file":"unit/test-amp-img-intrinsic.js","skipped":false,"dir":"test"},{"name":"SSR sizer does not interfere with SSR img before","suites":[],"updatePoint":{"line":150,"column":56,"index":5515},"line":150,"code":"    it('SSR sizer does not interfere with SSR img before', async () => {\n      const parentDiv = fixture.doc.getElementById('parent');\n      parentDiv.setAttribute('style', 'width: 80px; height: 80px');\n\n      // Hack so we don't duplicate intrinsic's layout code here.\n      const tmp = createElementWithAttributes(fixture.doc, 'div', {\n        src: '/examples/img/sample.jpg',\n        // 641 x 481\n        width: 800,\n        height: 600,\n        layout: 'intrinsic'\n      });\n      applyStaticLayout(tmp);\n      const attributes = {\n        'i-amphtml-ssr': ''\n      };\n      for (let i = 0; i < tmp.attributes.length; i++) {\n        attributes[tmp.attributes[i].name] = tmp.attributes[i].value;\n      }\n      const children = toArray(tmp.children);\n      children.unshift(createElementWithAttributes(fixture.doc, 'img', {\n        decoding: 'async',\n        class: 'i-amphtml-fill-content i-amphtml-replaced-content',\n        src: tmp.getAttribute('src')\n      }));\n      const ampImg = await getImg(attributes, children);\n      await browser.waitForElementLayout('amp-img');\n      expect(ampImg.querySelector('img[src*=\"sample.jpg\"]')).to.exist;\n      expect(ampImg.querySelector('img[src*=\"image/svg+xml\"]')).to.exist;\n    });","file":"unit/test-amp-img-intrinsic.js","skipped":false,"dir":"test"},{"name":"SSR sizer does not interfere with SSR img after","suites":[],"updatePoint":{"line":180,"column":55,"index":6746},"line":180,"code":"    it('SSR sizer does not interfere with SSR img after', async () => {\n      const parentDiv = fixture.doc.getElementById('parent');\n      parentDiv.setAttribute('style', 'width: 80px; height: 80px');\n\n      // Hack so we don't duplicate intrinsic's layout code here.\n      const tmp = createElementWithAttributes(fixture.doc, 'div', {\n        src: '/examples/img/sample.jpg',\n        // 641 x 481\n        width: 800,\n        height: 600,\n        layout: 'intrinsic'\n      });\n      applyStaticLayout(tmp);\n      const attributes = {\n        'i-amphtml-ssr': ''\n      };\n      for (let i = 0; i < tmp.attributes.length; i++) {\n        attributes[tmp.attributes[i].name] = tmp.attributes[i].value;\n      }\n      const children = toArray(tmp.children);\n      children.push(createElementWithAttributes(fixture.doc, 'img', {\n        decoding: 'async',\n        class: 'i-amphtml-fill-content i-amphtml-replaced-content',\n        src: tmp.getAttribute('src')\n      }));\n      const ampImg = await getImg(attributes, children);\n      await browser.waitForElementLayout('amp-img');\n      expect(ampImg.querySelector('img[src*=\"sample.jpg\"]')).to.exist;\n      expect(ampImg.querySelector('img[src*=\"image/svg+xml\"]')).to.exist;\n    });","file":"unit/test-amp-img-intrinsic.js","skipped":false,"dir":"test"},{"name":"should install same services for inabox","suites":[],"updatePoint":{"line":10,"column":47,"index":472},"line":10,"code":"    it('should install same services for inabox', () => {\n      let installedServices = [];\n      const ampdoc = new AmpDocSingle(env.win);\n      env.sandbox.stub(Service, 'registerServiceBuilderForDoc').callsFake((ampdoc, id) => {\n        installedServices.push(id);\n      });\n      env.sandbox.stub(Service, 'rejectServicePromiseForDoc').callsFake((ampdoc, id) => {\n        installedServices.push(id);\n      });\n      env.sandbox.stub(Service, 'getServiceForDoc').returns({});\n      installAmpdocServices(ampdoc);\n      const installedServicesByRegularAmp = installedServices.slice(0);\n      // The inabox mode does not need the loading indicator.\n      removeItem(installedServicesByRegularAmp, 'loadingIndicator');\n      installedServices = [];\n      installAmpdocServicesForInabox(ampdoc);\n      expect(installedServices).to.deep.equal(installedServicesByRegularAmp);\n    });","file":"unit/test-amp-inabox.js","skipped":false,"dir":"test"},{"name":"initializes observer with implicit root","suites":[],"updatePoint":{"line":49,"column":45,"index":1175},"line":49,"code":"  it('initializes observer with implicit root', () => {\n    const noop = () => {};\n    new AmpStoryPlayerViewportObserver(win, el, noop);\n    const inObCallback = env.sandbox.match.any;\n\n    // Initializing InOb with only 1 argument defaults to implicit root.\n    expect(inOb).to.have.been.calledOnceWithExactly(inObCallback);\n  });","file":"unit/test-amp-story-player-viewport-observer.js","skipped":false,"dir":"test"},{"name":"fires callback when element is visible in viewport.","suites":[],"updatePoint":{"line":57,"column":57,"index":1520},"line":57,"code":"  it('fires callback when element is visible in viewport.', () => {\n    const cbSpy = env.sandbox.spy();\n    new AmpStoryPlayerViewportObserver(win, el, cbSpy);\n    toggleViewport(el, true);\n    expect(cbSpy).to.be.calledOnce;\n  });","file":"unit/test-amp-story-player-viewport-observer.js","skipped":false,"dir":"test"},{"name":"does not fire callback when element is not visible in viewport.","suites":[],"updatePoint":{"line":63,"column":69,"index":1765},"line":63,"code":"  it('does not fire callback when element is not visible in viewport.', () => {\n    const cbSpy = env.sandbox.spy();\n    new AmpStoryPlayerViewportObserver(win, el, cbSpy);\n    toggleViewport(el, false);\n    expect(cbSpy).to.not.be.called;\n  });","file":"unit/test-amp-story-player-viewport-observer.js","skipped":false,"dir":"test"},{"name":"once callback is fired, the InOb stops observing","suites":[],"updatePoint":{"line":69,"column":54,"index":1996},"line":69,"code":"  it('once callback is fired, the InOb stops observing', () => {\n    const cb = env.sandbox.spy();\n    new AmpStoryPlayerViewportObserver(win, el, cb);\n    toggleViewport(el, true);\n    expect(observing.has(el)).to.be.false;\n  });","file":"unit/test-amp-story-player-viewport-observer.js","skipped":false,"dir":"test"},{"name":"uses fallback if InOb is not supported","suites":[],"updatePoint":{"line":75,"column":44,"index":2217},"line":75,"code":"  it('uses fallback if InOb is not supported', () => {\n    win.IntersectionObserver = null;\n    const scrollSpy = env.sandbox.spy(win, 'addEventListener');\n    new AmpStoryPlayerViewportObserver(win, el, () => {});\n    expect(scrollSpy).to.be.calledWith('scroll');\n  });","file":"unit/test-amp-story-player-viewport-observer.js","skipped":false,"dir":"test"},{"name":"fallback removes event listener once callback is fired","suites":[],"updatePoint":{"line":81,"column":60,"index":2504},"line":81,"code":"  it('fallback removes event listener once callback is fired', () => {\n    win.IntersectionObserver = null;\n    const removeSpy = env.sandbox.spy(win, 'removeEventListener');\n    new AmpStoryPlayerViewportObserver(win, el, () => {});\n    expect(removeSpy).to.be.called;\n  });","file":"unit/test-amp-story-player-viewport-observer.js","skipped":false,"dir":"test"},{"name":"should build an iframe for each story","suites":[],"updatePoint":{"line":177,"column":43,"index":5196},"line":177,"code":"  it('should build an iframe for each story', async () => {\n    buildStoryPlayer();\n    await manager.loadPlayers();\n    expect(playerEl.querySelector('iframe')).to.exist;\n  });","file":"unit/test-amp-story-player.js","skipped":false,"dir":"test"},{"name":"should correctly append params at the end of the story url","suites":[],"updatePoint":{"line":182,"column":64,"index":5395},"line":182,"code":"  it('should correctly append params at the end of the story url', async () => {\n    buildStoryPlayer();\n    await manager.loadPlayers();\n    await macroTask();\n    const storyIframe = playerEl.querySelector('iframe');\n    expect(storyIframe.getAttribute('src')).to.equals(DEFAULT_CACHE_URL + '?amp_js_v=0.1#visibilityState=prerender&origin=http%3A%2F%2Flocalhost%3A9876' + '&showStoryUrlInfo=0&storyPlayer=v0&cap=swipe');\n  });","file":"unit/test-amp-story-player.js","skipped":false,"dir":"test"},{"name":"should correctly append params at the end of a story url with existing params","suites":[],"updatePoint":{"line":189,"column":83,"index":5843},"line":189,"code":"  it('should correctly append params at the end of a story url with existing params', async () => {\n    const existingQuery = '?testParam=true';\n    const existingHash = '#myhash=hashValue';\n    buildStoryPlayer(1, DEFAULT_CACHE_URL + existingQuery + existingHash);\n    await manager.loadPlayers();\n    await macroTask();\n    const storyIframe = playerEl.querySelector('iframe');\n    expect(storyIframe.getAttribute('src')).to.equals(DEFAULT_CACHE_URL + existingQuery + '&amp_js_v=0.1' + existingHash + '&visibilityState=prerender&origin=http%3A%2F%2Flocalhost%3A9876' + '&showStoryUrlInfo=0&storyPlayer=v0&cap=swipe');\n  });","file":"unit/test-amp-story-player.js","skipped":false,"dir":"test"},{"name":"should set first story as visible","suites":[],"updatePoint":{"line":198,"column":39,"index":6425},"line":198,"code":"  it('should set first story as visible', async () => {\n    const sendRequestSpy = env.sandbox.spy(fakeMessaging, 'sendRequest');\n    buildStoryPlayer(3);\n    await manager.loadPlayers();\n    await macroTask();\n    expect(sendRequestSpy).to.have.been.calledWith('visibilitychange', {\n      'state': 'visible'\n    });\n  });","file":"unit/test-amp-story-player.js","skipped":false,"dir":"test"},{"name":"should prerender next story after first one is loaded","suites":[],"updatePoint":{"line":207,"column":59,"index":6768},"line":207,"code":"  it('should prerender next story after first one is loaded', async () => {\n    buildStoryPlayer(3);\n    await manager.loadPlayers();\n    await macroTask();\n    fireHandler['storyContentLoaded']('storyContentLoaded', {});\n    await macroTask();\n    const storyIframes = playerEl.querySelectorAll('iframe');\n    expect(storyIframes[1].getAttribute('src')).to.include('#visibilityState=prerender');\n  });","file":"unit/test-amp-story-player.js","skipped":false,"dir":"test"},{"name":"should apply desktop aspect ratio based on the active story","suites":[],"updatePoint":{"line":216,"column":65,"index":7177},"line":216,"code":"  it('should apply desktop aspect ratio based on the active story', async () => {\n    const numStories = 2;\n    const storyAspectRatios = ['0.75', '0.5'];\n    buildStoryPlayer(numStories);\n    await manager.loadPlayers();\n    await macroTask();\n\n    // Aspect ratio should be applied after the first story is loaded.\n    fakeMessaging.sendRequest = () => Promise.resolve({\n      value: storyAspectRatios[0]\n    });\n    const sendRequestSpy = env.sandbox.spy(fakeMessaging, 'sendRequest');\n    fireHandler['storyContentLoaded']('storyContentLoaded', {});\n    await macroTask();\n    expect(sendRequestSpy).to.have.been.calledWith('getDocumentState', {\n      'state': 'DESKTOP_ASPECT_RATIO'\n    });\n    let playerContainer = win.document.querySelector('.i-amphtml-story-player-main-container');\n    expect(computedStyle(win, playerContainer).getPropertyValue('--i-amphtml-story-player-panel-ratio').trim()).equal(storyAspectRatios[0]);\n\n    // Aspect ratio should be applied after navigating to the second story and it's loaded.\n    fakeMessaging.sendRequest = () => Promise.resolve({\n      value: storyAspectRatios[1]\n    });\n    fireHandler['selectDocument']('selectDocument', {\n      next: true\n    });\n    await macroTask();\n    fireHandler['storyContentLoaded']('storyContentLoaded', {});\n    await macroTask();\n    playerContainer = win.document.querySelector('.i-amphtml-story-player-main-container');\n    expect(computedStyle(win, playerContainer).getPropertyValue('--i-amphtml-story-player-panel-ratio').trim()).equal(storyAspectRatios[1]);\n\n    // Aspect ratio should be applied after navigating back to the already loaded first story.\n    fireHandler['selectDocument']('selectDocument', {\n      previous: true\n    });\n    await macroTask();\n    playerContainer = win.document.querySelector('.i-amphtml-story-player-main-container');\n    expect(computedStyle(win, playerContainer).getPropertyValue('--i-amphtml-story-player-panel-ratio').trim()).equal(storyAspectRatios[0]);\n  });","file":"unit/test-amp-story-player.js","skipped":false,"dir":"test"},{"name":"should not load next story if first one has not finished loading","suites":[],"updatePoint":{"line":257,"column":70,"index":9170},"line":257,"code":"  it('should not load next story if first one has not finished loading', async () => {\n    buildStoryPlayer(3);\n    await manager.loadPlayers();\n    await macroTask();\n    const storyIframes = playerEl.querySelectorAll('iframe');\n    expect(storyIframes[1].getAttribute('src')).to.not.exist;\n  });","file":"unit/test-amp-story-player.js","skipped":false,"dir":"test"},{"name":"should load new story if user navigated before first finished loading","suites":[],"updatePoint":{"line":264,"column":75,"index":9473},"line":264,"code":"  it('should load new story if user navigated before first finished loading', async () => {\n    buildStoryPlayer(3);\n    await manager.loadPlayers();\n    await macroTask();\n\n    // Swiping without waiting for story loaded event.\n    swipeLeft();\n    await macroTask();\n    const storyIframes = playerEl.querySelectorAll('iframe');\n    expect(storyIframes[1].getAttribute('src')).to.exist;\n  });","file":"unit/test-amp-story-player.js","skipped":false,"dir":"test"},{"name":"should register handlers at build time","suites":[],"updatePoint":{"line":298,"column":44,"index":10882},"line":298,"code":"  it('should register handlers at build time', async () => {\n    const registerHandlerSpy = env.sandbox.spy(fakeMessaging, 'registerHandler');\n    buildStoryPlayer();\n    await manager.loadPlayers();\n    await macroTask();\n    expect(registerHandlerSpy).to.have.been.calledWith('touchstart');\n    expect(registerHandlerSpy).to.have.been.calledWith('touchmove');\n    expect(registerHandlerSpy).to.have.been.calledWith('touchend');\n    expect(registerHandlerSpy).to.have.been.calledWith('selectDocument');\n    expect(registerHandlerSpy).to.have.been.calledWith('storyContentLoaded');\n    expect(registerHandlerSpy).to.have.been.calledWith('documentStateUpdate');\n  });","file":"unit/test-amp-story-player.js","skipped":false,"dir":"test"},{"name":"should set up onDocumentState listeners at at build time","suites":[],"updatePoint":{"line":310,"column":62,"index":11567},"line":310,"code":"  it('should set up onDocumentState listeners at at build time', async () => {\n    const sendRequestSpy = env.sandbox.spy(fakeMessaging, 'sendRequest');\n    buildStoryPlayer();\n    await manager.loadPlayers();\n    await macroTask();\n    expect(sendRequestSpy).to.have.been.calledWith('onDocumentState', {\n      'state': 'PAGE_ATTACHMENT_STATE'\n    });\n    expect(sendRequestSpy).to.have.been.calledWith('onDocumentState', {\n      'state': 'CURRENT_PAGE_ID'\n    });\n  });","file":"unit/test-amp-story-player.js","skipped":false,"dir":"test"},{"name":"should navigate to next story when the last page of a story is tapped","suites":[],"updatePoint":{"line":322,"column":75,"index":12051},"line":322,"code":"  it('should navigate to next story when the last page of a story is tapped', async () => {\n    buildStoryPlayer(2);\n    await manager.loadPlayers();\n    await macroTask();\n    const navigationSpy = env.sandbox.spy();\n    playerEl.addEventListener('navigation', navigationSpy);\n    const fakeData = {\n      next: true\n    };\n    fireHandler['selectDocument']('selectDocument', fakeData);\n    expect(navigationSpy).to.have.been.calledWithMatch({\n      type: 'navigation',\n      detail: {\n        index: 1,\n        remaining: 0\n      }\n    });\n  });","file":"unit/test-amp-story-player.js","skipped":false,"dir":"test"},{"name":"should dispatch noNextStory when in last story","suites":[],"updatePoint":{"line":340,"column":52,"index":12576},"line":340,"code":"  it('should dispatch noNextStory when in last story', async () => {\n    buildStoryPlayer(1);\n    await manager.loadPlayers();\n    await macroTask();\n    const noNextSpy = env.sandbox.spy();\n    playerEl.addEventListener('noNextStory', noNextSpy);\n    fireHandler['selectDocument']('selectDocument', {\n      next: true\n    });\n    expect(noNextSpy).to.have.been.called;\n  });","file":"unit/test-amp-story-player.js","skipped":false,"dir":"test"},{"name":"should not dispatch noNextStory when not in last story","suites":[],"updatePoint":{"line":351,"column":60,"index":12960},"line":351,"code":"  it('should not dispatch noNextStory when not in last story', async () => {\n    buildStoryPlayer(2);\n    await manager.loadPlayers();\n    await macroTask();\n    const noNextSpy = env.sandbox.spy();\n    playerEl.addEventListener('noNextStory', noNextSpy);\n    fireHandler['selectDocument']('selectDocument', {\n      next: true\n    });\n    expect(noNextSpy).to.not.have.been.called;\n  });","file":"unit/test-amp-story-player.js","skipped":false,"dir":"test"},{"name":"should not dispatch noNextStory when circular wrapping is enabled","suites":[],"updatePoint":{"line":362,"column":71,"index":13359},"line":362,"code":"  it('should not dispatch noNextStory when circular wrapping is enabled', async () => {\n    buildStoryPlayer(1);\n    playerEl.appendChild(buildCircularWrappingConfig());\n    await manager.loadPlayers();\n    await macroTask();\n    const noNextSpy = env.sandbox.spy();\n    playerEl.addEventListener('noNextStory', noNextSpy);\n    fireHandler['selectDocument']('selectDocument', {\n      next: true\n    });\n    expect(noNextSpy).to.not.have.been.called;\n  });","file":"unit/test-amp-story-player.js","skipped":false,"dir":"test"},{"name":"should scroll the page when pageScroll is enabled (default)","suites":[],"updatePoint":{"line":374,"column":65,"index":13809},"line":374,"code":"  it('should scroll the page when pageScroll is enabled (default)', async () => {\n    buildStoryPlayer(1);\n    const touchStartSpy = env.sandbox.spy(PageScroller.prototype, 'onTouchStart');\n    const touchMoveSpy = env.sandbox.spy(PageScroller.prototype, 'onTouchMove');\n    const touchEndSpy = env.sandbox.spy(PageScroller.prototype, 'onTouchEnd');\n    await manager.loadPlayers();\n    await macroTask();\n    swipeDown();\n    await macroTask();\n    expect(touchStartSpy).to.have.been.called;\n    expect(touchMoveSpy).to.have.been.called;\n    expect(touchEndSpy).to.have.been.called;\n  });","file":"unit/test-amp-story-player.js","skipped":false,"dir":"test"},{"name":"should not scroll the page when pageScroll option is off","suites":[],"updatePoint":{"line":387,"column":62,"index":14396},"line":387,"code":"  it('should not scroll the page when pageScroll option is off', async () => {\n    buildStoryPlayer(1);\n    playerEl.appendChild(buildPageScrollConfig( /* pageScroll */false));\n    const touchStartSpy = env.sandbox.spy(PageScroller.prototype, 'onTouchStart');\n    const touchMoveSpy = env.sandbox.spy(PageScroller.prototype, 'onTouchMove');\n    const touchEndSpy = env.sandbox.spy(PageScroller.prototype, 'onTouchEnd');\n    await manager.loadPlayers();\n    await macroTask();\n    swipeDown();\n    await macroTask();\n    expect(touchStartSpy).to.not.have.been.called;\n    expect(touchMoveSpy).to.not.have.been.called;\n    expect(touchEndSpy).to.not.have.been.called;\n  });","file":"unit/test-amp-story-player.js","skipped":false,"dir":"test"},{"name":"should not play first story when autoplay is off","suites":[],"updatePoint":{"line":401,"column":54,"index":15060},"line":401,"code":"  it('should not play first story when autoplay is off', async () => {\n    buildStoryPlayer(1);\n    playerEl.appendChild(buildAutoplayConfig( /* autoplay */false));\n    const sendRequestSpy = env.sandbox.spy(fakeMessaging, 'sendRequest');\n    await manager.loadPlayers();\n    await macroTask();\n    expect(sendRequestSpy).to.not.have.been.calledWith('visibilitychange', {\n      'state': 'visible'\n    });\n  });","file":"unit/test-amp-story-player.js","skipped":false,"dir":"test"},{"name":"should play first story when autoplay is off and play() is called","suites":[],"updatePoint":{"line":411,"column":71,"index":15488},"line":411,"code":"  it('should play first story when autoplay is off and play() is called', async () => {\n    const sendRequestSpy = env.sandbox.spy(fakeMessaging, 'sendRequest');\n    buildStoryPlayer(1);\n    playerEl.appendChild(buildAutoplayConfig( /* autoplay */false));\n    await manager.loadPlayers();\n    await macroTask();\n    playerEl.play();\n    await macroTask();\n    expect(sendRequestSpy).to.have.been.calledWith('visibilitychange', {\n      'state': 'visible'\n    });\n  });","file":"unit/test-amp-story-player.js","skipped":false,"dir":"test"},{"name":"should ignore autoplay if it contains invalid value","suites":[],"updatePoint":{"line":423,"column":57,"index":15942},"line":423,"code":"  it('should ignore autoplay if it contains invalid value', async () => {\n    buildStoryPlayer(1);\n    playerEl.appendChild(buildAutoplayConfig( /* autoplay */'flour tortillas'));\n    const sendRequestSpy = env.sandbox.spy(fakeMessaging, 'sendRequest');\n    await manager.loadPlayers();\n    await macroTask();\n    expect(sendRequestSpy).to.have.been.calledWith('visibilitychange', {\n      'state': 'visible'\n    });\n  });","file":"unit/test-amp-story-player.js","skipped":false,"dir":"test"},{"name":"should dispatch noPreviousStory when in first story","suites":[],"updatePoint":{"line":433,"column":57,"index":16364},"line":433,"code":"  it('should dispatch noPreviousStory when in first story', async () => {\n    buildStoryPlayer(1);\n    await manager.loadPlayers();\n    await macroTask();\n    const noPreviousSpy = env.sandbox.spy();\n    playerEl.addEventListener('noPreviousStory', noPreviousSpy);\n    fireHandler['selectDocument']('selectDocument', {\n      previous: true\n    });\n    expect(noPreviousSpy).to.have.been.called;\n  });","file":"unit/test-amp-story-player.js","skipped":false,"dir":"test"},{"name":"should not dispatch noPreviousStory when not in first story","suites":[],"updatePoint":{"line":444,"column":65,"index":16773},"line":444,"code":"  it('should not dispatch noPreviousStory when not in first story', async () => {\n    buildStoryPlayer(2);\n    await manager.loadPlayers();\n    await macroTask();\n    const noPreviousSpy = env.sandbox.spy();\n    playerEl.addEventListener('noPreviousStory', noPreviousSpy);\n    fireHandler['selectDocument']('selectDocument', {\n      next: true\n    });\n    fireHandler['selectDocument']('selectDocument', {\n      previous: true\n    });\n    expect(noPreviousSpy).to.not.have.been.called;\n  });","file":"unit/test-amp-story-player.js","skipped":false,"dir":"test"},{"name":"should not dispatch noPreviousStory when circular wrapping is enabled","suites":[],"updatePoint":{"line":458,"column":75,"index":17275},"line":458,"code":"  it('should not dispatch noPreviousStory when circular wrapping is enabled', async () => {\n    buildStoryPlayer(2);\n    playerEl.appendChild(buildCircularWrappingConfig());\n    await manager.loadPlayers();\n    await macroTask();\n    const noPreviousSpy = env.sandbox.spy();\n    playerEl.addEventListener('noPreviousStory', noPreviousSpy);\n    fireHandler['selectDocument']('selectDocument', {\n      previous: true\n    });\n    expect(noPreviousSpy).to.not.have.been.called;\n  });","file":"unit/test-amp-story-player.js","skipped":false,"dir":"test"},{"name":"should dispatch amp-story-player-touchstart event","suites":[],"updatePoint":{"line":470,"column":55,"index":17735},"line":470,"code":"  it('should dispatch amp-story-player-touchstart event', async () => {\n    buildStoryPlayer(1);\n    await manager.loadPlayers();\n    await macroTask();\n    const touchSpy = env.sandbox.spy();\n    playerEl.addEventListener('amp-story-player-touchstart', touchSpy);\n    await swipeDown();\n    await macroTask();\n    expect(touchSpy).to.have.been.called;\n  });","file":"unit/test-amp-story-player.js","skipped":false,"dir":"test"},{"name":"should dispatch amp-story-player-touchmove event when navigating","suites":[],"updatePoint":{"line":480,"column":70,"index":18109},"line":480,"code":"  it('should dispatch amp-story-player-touchmove event when navigating', async () => {\n    buildStoryPlayer(1);\n    await manager.loadPlayers();\n    await macroTask();\n    const touchSpy = env.sandbox.spy();\n    playerEl.addEventListener('amp-story-player-touchmove', touchSpy);\n    await swipeLeft();\n    await macroTask();\n    expect(touchSpy).to.have.been.calledWithMatch({\n      type: 'amp-story-player-touchmove',\n      detail: {\n        touches: [{\n          screenX: 95,\n          screenY: 100\n        }],\n        isNavigationalSwipe: true\n      }\n    });\n  });","file":"unit/test-amp-story-player.js","skipped":false,"dir":"test"},{"name":"should dispatch amp-story-player-touchmove event when not navigating","suites":[],"updatePoint":{"line":499,"column":74,"index":18682},"line":499,"code":"  it('should dispatch amp-story-player-touchmove event when not navigating', async () => {\n    buildStoryPlayer(1);\n    await manager.loadPlayers();\n    await macroTask();\n    const touchSpy = env.sandbox.spy();\n    playerEl.addEventListener('amp-story-player-touchmove', touchSpy);\n    await swipeDown();\n    await macroTask();\n    expect(touchSpy).to.have.been.calledWithMatch({\n      type: 'amp-story-player-touchmove',\n      detail: {\n        touches: [{\n          screenX: 200,\n          screenY: 205\n        }],\n        isNavigationalSwipe: false\n      }\n    });\n  });","file":"unit/test-amp-story-player.js","skipped":false,"dir":"test"},{"name":"should dispatch amp-story-player-touchend events","suites":[],"updatePoint":{"line":518,"column":54,"index":19237},"line":518,"code":"  it('should dispatch amp-story-player-touchend events', async () => {\n    buildStoryPlayer(1);\n    await manager.loadPlayers();\n    await macroTask();\n    const touchSpy = env.sandbox.spy();\n    playerEl.addEventListener('amp-story-player-touchend', touchSpy);\n    await swipeDown();\n    await macroTask();\n    expect(touchSpy).to.have.been.called;\n  });","file":"unit/test-amp-story-player.js","skipped":false,"dir":"test"},{"name":"should navigate when swiping","suites":[],"updatePoint":{"line":528,"column":34,"index":19573},"line":528,"code":"  it('should navigate when swiping', async () => {\n    buildStoryPlayer(4);\n    await manager.loadPlayers();\n    await macroTask();\n    const navigationSpy = env.sandbox.spy();\n    playerEl.addEventListener('navigation', navigationSpy);\n    swipeLeft();\n    expect(navigationSpy).to.have.been.calledWithMatch({\n      type: 'navigation',\n      detail: {\n        index: 1,\n        remaining: 2\n      }\n    });\n  });","file":"unit/test-amp-story-player.js","skipped":false,"dir":"test"},{"name":"should not navigate when swiping last story","suites":[],"updatePoint":{"line":543,"column":49,"index":20002},"line":543,"code":"  it('should not navigate when swiping last story', async () => {\n    buildStoryPlayer(2);\n    await manager.loadPlayers();\n    await macroTask();\n    const navigationSpy = env.sandbox.spy();\n    playerEl.addEventListener('navigation', navigationSpy);\n    swipeLeft();\n    swipeLeft();\n    swipeLeft();\n    expect(navigationSpy).to.have.been.calledOnce;\n  });","file":"unit/test-amp-story-player.js","skipped":false,"dir":"test"},{"name":"should transform origin to cache url when specified by the publisher","suites":["Cache URLs"],"updatePoint":{"line":555,"column":76,"index":20422},"line":555,"code":"    it('should transform origin to cache url when specified by the publisher', async () => {\n      buildStoryPlayer(1, DEFAULT_ORIGIN_URL, 'cdn.ampproject.org');\n      await manager.loadPlayers();\n      await macroTask();\n      const storyIframe = playerEl.querySelector('iframe');\n      expect(storyIframe.getAttribute('src')).to.equals(DEFAULT_CACHE_URL + '?amp_js_v=0.1#visibilityState=prerender&origin=http%3A%2F%2Flocalhost%3A9876' + '&showStoryUrlInfo=0&storyPlayer=v0&cap=swipe');\n    });","file":"unit/test-amp-story-player.js","skipped":false,"dir":"test"},{"name":"should respect original url when there is no amp-cache value","suites":["Cache URLs"],"updatePoint":{"line":562,"column":68,"index":20910},"line":562,"code":"    it('should respect original url when there is no amp-cache value', async () => {\n      buildStoryPlayer(1, DEFAULT_ORIGIN_URL);\n      await manager.loadPlayers();\n      await macroTask();\n      const storyIframe = playerEl.querySelector('iframe');\n      expect(storyIframe.getAttribute('src')).to.equals(DEFAULT_ORIGIN_URL + '#visibilityState=prerender&origin=http%3A%2F%2Flocalhost%3A9876' + '&showStoryUrlInfo=0&storyPlayer=v0&cap=swipe');\n    });","file":"unit/test-amp-story-player.js","skipped":false,"dir":"test"},{"name":"should throw error when invalid url is provided","suites":["Cache URLs"],"updatePoint":{"line":569,"column":55,"index":21351},"line":569,"code":"    it('should throw error when invalid url is provided', async () => {\n      console.error.restore();\n      env.sandbox.spy(console, 'error');\n      buildStoryPlayer(1, DEFAULT_ORIGIN_URL, 'www.tacos.org');\n      await manager.loadPlayers();\n      await macroTask();\n      expect(console.error).to.be.calledWithMatch(/\\[amp-story-player\\]/, /Unsupported cache specified, use one of following: cdn.ampproject.org,www.bing-amp.com/);\n    });","file":"unit/test-amp-story-player.js","skipped":false,"dir":"test"},{"name":"signals when its ready to be interacted with","suites":["Player API"],"updatePoint":{"line":598,"column":52,"index":22497},"line":598,"code":"    it('signals when its ready to be interacted with', async () => {\n      buildStoryPlayer();\n      const readySpy = env.sandbox.spy();\n      playerEl.addEventListener('ready', readySpy);\n      await manager.loadPlayers();\n      expect(readySpy).to.have.been.calledOnce;\n    });","file":"unit/test-amp-story-player.js","skipped":false,"dir":"test"},{"name":"does not signal when attaching listener after it was built","suites":["Player API"],"updatePoint":{"line":605,"column":66,"index":22791},"line":605,"code":"    it('does not signal when attaching listener after it was built', async () => {\n      buildStoryPlayer();\n      const readySpy = env.sandbox.spy();\n      await manager.loadPlayers();\n      playerEl.addEventListener('ready', readySpy);\n      expect(readySpy).to.not.have.been.called;\n    });","file":"unit/test-amp-story-player.js","skipped":false,"dir":"test"},{"name":"has isReady property after it is built","suites":["Player API"],"updatePoint":{"line":612,"column":46,"index":23065},"line":612,"code":"    it('has isReady property after it is built', async () => {\n      buildStoryPlayer();\n      await manager.loadPlayers();\n      expect(playerEl.isReady).to.be.true;\n    });","file":"unit/test-amp-story-player.js","skipped":false,"dir":"test"},{"name":"load callback throws if player is not appended to the DOM","suites":["Player API"],"updatePoint":{"line":617,"column":65,"index":23259},"line":617,"code":"    it('load callback throws if player is not appended to the DOM', async () => {\n      const playerEl = win.document.createElement('amp-story-player');\n      const story = win.document.createElement('a');\n      story.setAttribute('href', DEFAULT_CACHE_URL);\n      playerEl.appendChild(story);\n      const player = new AmpStoryPlayer(win, playerEl);\n      return expect(() => player.load()).to.throw(`[${TAG}] element must be connected to the DOM before calling load().`);\n    });","file":"unit/test-amp-story-player.js","skipped":false,"dir":"test"},{"name":"load callback builds iframe inside the player","suites":["Player API"],"updatePoint":{"line":625,"column":53,"index":23728},"line":625,"code":"    it('load callback builds iframe inside the player', async () => {\n      const playerEl = win.document.createElement('amp-story-player');\n      attachPlayerWithStories(playerEl, 1);\n      const player = new AmpStoryPlayer(win, playerEl);\n      await player.load();\n      expect(playerEl.querySelector('iframe')).to.exist;\n    });","file":"unit/test-amp-story-player.js","skipped":false,"dir":"test"},{"name":"show callback builds corresponding adjacent iframes","suites":["Player API"],"updatePoint":{"line":632,"column":59,"index":24067},"line":632,"code":"    it('show callback builds corresponding adjacent iframes', async () => {\n      const playerEl = win.document.createElement('amp-story-player');\n      attachPlayerWithStories(playerEl, 5);\n      const player = new AmpStoryPlayer(win, playerEl);\n      await player.load();\n      player.show('https://example.com/story3.html');\n      await macroTask();\n      fireHandler['storyContentLoaded']('storyContentLoaded', {});\n      await macroTask();\n      const stories = playerEl.getStories();\n      expect(playerEl.contains(stories[0].iframe)).to.be.false;\n      expect(playerEl.contains(stories[1].iframe)).to.be.false;\n      expect(playerEl.contains(stories[2].iframe)).to.be.true;\n      expect(playerEl.contains(stories[3].iframe)).to.be.true;\n      expect(playerEl.contains(stories[4].iframe)).to.be.true;\n    });","file":"unit/test-amp-story-player.js","skipped":false,"dir":"test"},{"name":"show() callback should prerender next story after current one is loaded","suites":["Player API"],"updatePoint":{"line":648,"column":79,"index":24902},"line":648,"code":"    it('show() callback should prerender next story after current one is loaded', async () => {\n      const playerEl = win.document.createElement('amp-story-player');\n      attachPlayerWithStories(playerEl, 5);\n      const player = new AmpStoryPlayer(win, playerEl);\n      await player.load();\n      player.show('https://example.com/story3.html');\n      await macroTask();\n      fireHandler['storyContentLoaded']('storyContentLoaded', {});\n      await macroTask();\n      const storyIframes = playerEl.querySelectorAll('iframe');\n      expect(storyIframes[0].getAttribute('src')).to.include('https://example.com/story3.html#visibilityState=prerender');\n      expect(storyIframes[1].getAttribute('src')).to.include('https://example.com/story4.html#visibilityState=prerender');\n      expect(storyIframes[2].getAttribute('src')).to.include('https://example.com/story2.html#visibilityState=prerender');\n    });","file":"unit/test-amp-story-player.js","skipped":false,"dir":"test"},{"name":"rewind() callback should rewind current story","suites":["Player API"],"updatePoint":{"line":662,"column":53,"index":25782},"line":662,"code":"    it('rewind() callback should rewind current story', async () => {\n      const playerEl = win.document.createElement('amp-story-player');\n      attachPlayerWithStories(playerEl, 1);\n      const player = new AmpStoryPlayer(win, playerEl);\n      await player.load();\n      await macroTask();\n      const sendRequestSpy = env.sandbox.spy(fakeMessaging, 'sendRequest');\n      player.rewind('https://example.com/story0.html');\n      await macroTask();\n      expect(sendRequestSpy).to.have.been.calledWith('rewind', {});\n    });","file":"unit/test-amp-story-player.js","skipped":false,"dir":"test"},{"name":"rewind() throws when invalid url is provided","suites":["Player API"],"updatePoint":{"line":673,"column":52,"index":26307},"line":673,"code":"    it('rewind() throws when invalid url is provided', async () => {\n      const playerEl = win.document.createElement('amp-story-player');\n      attachPlayerWithStories(playerEl, 1);\n      const player = new AmpStoryPlayer(win, playerEl);\n      await player.load();\n      await macroTask();\n      return expect(() => player.rewind('https://example.com/story6.html')).to.throw('Story URL not found in the player: https://example.com/story6.html');\n    });","file":"unit/test-amp-story-player.js","skipped":false,"dir":"test"},{"name":"rewind() callback should eventually rewind story when it gets connected","suites":["Player API"],"updatePoint":{"line":681,"column":79,"index":26790},"line":681,"code":"    it('rewind() callback should eventually rewind story when it gets connected', async () => {\n      const playerEl = win.document.createElement('amp-story-player');\n      attachPlayerWithStories(playerEl, 3);\n      const player = new AmpStoryPlayer(win, playerEl);\n      await player.load();\n      await macroTask();\n      const sendRequestSpy = env.sandbox.spy(fakeMessaging, 'sendRequest');\n      player.rewind('https://example.com/story2.html');\n      await player.go(2);\n      await macroTask();\n      expect(sendRequestSpy).to.have.been.calledWith('rewind', {});\n    });","file":"unit/test-amp-story-player.js","skipped":false,"dir":"test"},{"name":"show callback should throw when story is not found","suites":["Player API"],"updatePoint":{"line":695,"column":58,"index":27412},"line":695,"code":"    it('show callback should throw when story is not found', async () => {\n      const playerEl = win.document.createElement('amp-story-player');\n      attachPlayerWithStories(playerEl, 5);\n      const player = new AmpStoryPlayer(win, playerEl);\n      await player.load();\n      return expect(() => player.show('https://example.com/story6.html')).to.throw('Story URL not found in the player: https://example.com/story6.html');\n    });","file":"unit/test-amp-story-player.js","skipped":false,"dir":"test"},{"name":"adds stories programmatically","suites":["Player API"],"updatePoint":{"line":702,"column":37,"index":27826},"line":702,"code":"    it('adds stories programmatically', async () => {\n      buildStoryPlayer(3);\n      await manager.loadPlayers();\n      const storyObjects = createStoryObjects(1);\n      playerEl.add(storyObjects);\n      const stories = playerEl.getStories();\n      expect(stories.length).to.eql(4);\n    });","file":"unit/test-amp-story-player.js","skipped":false,"dir":"test"},{"name":"throws an error if the add method is not passed an array","suites":["Player API"],"updatePoint":{"line":710,"column":64,"index":28146},"line":710,"code":"    it('throws an error if the add method is not passed an array', async () => {\n      buildStoryPlayer();\n      await manager.loadPlayers();\n      return expect(() => playerEl.add(7)).to.throw('\"stories\" parameter has the wrong structure');\n    });","file":"unit/test-amp-story-player.js","skipped":false,"dir":"test"},{"name":"throws an error if the add method is passed an array with incorrectly structured story objects","suites":["Player API"],"updatePoint":{"line":715,"column":102,"index":28434},"line":715,"code":"    it('throws an error if the add method is passed an array with incorrectly structured story objects', async () => {\n      buildStoryPlayer();\n      await manager.loadPlayers();\n      const wrongStoryObjects = [{\n        notHref: true\n      }];\n      return expect(() => playerEl.add(wrongStoryObjects)).to.throw('\"stories\" parameter has the wrong structure');\n    });","file":"unit/test-amp-story-player.js","skipped":false,"dir":"test"},{"name":"adds no stories when sending an empty array of new stories","suites":["Player API"],"updatePoint":{"line":723,"column":66,"index":28769},"line":723,"code":"    it('adds no stories when sending an empty array of new stories', async () => {\n      buildStoryPlayer(3);\n      await manager.loadPlayers();\n      const storyObjects = createStoryObjects(0);\n      playerEl.add(storyObjects);\n      const stories = playerEl.getStories();\n      expect(stories.length).to.eql(3);\n    });","file":"unit/test-amp-story-player.js","skipped":false,"dir":"test"},{"name":"pauses programmatically","suites":["Player API"],"updatePoint":{"line":752,"column":31,"index":30033},"line":752,"code":"    it('pauses programmatically', async () => {\n      const spy = env.sandbox.spy(fakeMessaging, 'sendRequest');\n      buildStoryPlayer();\n      await manager.loadPlayers();\n      playerEl.pause();\n      await macroTask();\n      expect(spy).to.have.been.calledWith('visibilitychange', {\n        state: 'paused'\n      });\n    });","file":"unit/test-amp-story-player.js","skipped":false,"dir":"test"},{"name":"plays programmatically","suites":["Player API"],"updatePoint":{"line":762,"column":30,"index":30361},"line":762,"code":"    it('plays programmatically', async () => {\n      const spy = env.sandbox.spy(fakeMessaging, 'sendRequest');\n      buildStoryPlayer();\n      await manager.loadPlayers();\n      playerEl.play();\n      await macroTask();\n      expect(spy).to.have.been.calledWith('visibilitychange', {\n        state: 'visible'\n      });\n    });","file":"unit/test-amp-story-player.js","skipped":false,"dir":"test"},{"name":"calling mute should set story muted state to true","suites":["Player API"],"updatePoint":{"line":772,"column":57,"index":30716},"line":772,"code":"    it('calling mute should set story muted state to true', async () => {\n      const spy = env.sandbox.spy(fakeMessaging, 'sendRequest');\n      buildStoryPlayer();\n      await manager.loadPlayers();\n      await playerEl.mute();\n      await macroTask();\n      expect(spy).to.have.been.calledWith('setDocumentState', {\n        state: 'MUTED_STATE',\n        value: true\n      });\n    });","file":"unit/test-amp-story-player.js","skipped":false,"dir":"test"},{"name":"calling unmute should set the story muted state to false","suites":["Player API"],"updatePoint":{"line":783,"column":64,"index":31109},"line":783,"code":"    it('calling unmute should set the story muted state to false', async () => {\n      const spy = env.sandbox.spy(fakeMessaging, 'sendRequest');\n      buildStoryPlayer();\n      await manager.loadPlayers();\n      await playerEl.unmute();\n      await macroTask();\n      expect(spy).to.have.been.calledWith('setDocumentState', {\n        state: 'MUTED_STATE',\n        value: false\n      });\n    });","file":"unit/test-amp-story-player.js","skipped":false,"dir":"test"},{"name":"back button should be created and close button should not","suites":["Player API"],"updatePoint":{"line":794,"column":65,"index":31506},"line":794,"code":"    it('back button should be created and close button should not', async () => {\n      const playerEl = win.document.createElement('amp-story-player');\n      playerEl.setAttribute('exit-control', 'back-button');\n      attachPlayerWithStories(playerEl, 5);\n      const player = new AmpStoryPlayer(win, playerEl);\n      await player.load();\n      expect(playerEl.querySelector('button.amp-story-player-back-button')).to.exist;\n      expect(playerEl.querySelector('button.amp-story-player-close-button')).to.not.exist;\n    });","file":"unit/test-amp-story-player.js","skipped":false,"dir":"test"},{"name":"close button should be created and back button should not","suites":["Player API"],"updatePoint":{"line":803,"column":65,"index":32031},"line":803,"code":"    it('close button should be created and back button should not', async () => {\n      const playerEl = win.document.createElement('amp-story-player');\n      playerEl.setAttribute('exit-control', 'close-button');\n      attachPlayerWithStories(playerEl, 5);\n      const player = new AmpStoryPlayer(win, playerEl);\n      await player.load();\n      expect(playerEl.querySelector('button.amp-story-player-close-button')).to.exist;\n      expect(playerEl.querySelector('button.amp-story-player-back-button')).to.not.exist;\n    });","file":"unit/test-amp-story-player.js","skipped":false,"dir":"test"},{"name":"no button should be created","suites":["Player API"],"updatePoint":{"line":812,"column":35,"index":32527},"line":812,"code":"    it('no button should be created', async () => {\n      const playerEl = win.document.createElement('amp-story-player');\n      playerEl.setAttribute('exit-control', 'brokenattribute');\n      attachPlayerWithStories(playerEl, 5);\n      const player = new AmpStoryPlayer(win, playerEl);\n      await player.load();\n      expect(playerEl.querySelector('button.amp-story-player-close-button')).to.not.exist;\n      expect(playerEl.querySelector('button.amp-story-player-back-button')).to.not.exist;\n    });","file":"unit/test-amp-story-player.js","skipped":false,"dir":"test"},{"name":"back button should fire back event once","suites":["Player API"],"updatePoint":{"line":821,"column":47,"index":33042},"line":821,"code":"    it('back button should fire back event once', async () => {\n      const playerEl = win.document.createElement('amp-story-player');\n      playerEl.setAttribute('exit-control', 'back-button');\n      attachPlayerWithStories(playerEl, 5);\n      const player = new AmpStoryPlayer(win, playerEl);\n      await player.load();\n      const readySpy = env.sandbox.spy();\n      playerEl.addEventListener('amp-story-player-back', readySpy);\n      playerEl.querySelector('button.amp-story-player-back-button').click();\n      expect(readySpy).to.have.been.calledOnce;\n    });","file":"unit/test-amp-story-player.js","skipped":false,"dir":"test"},{"name":"close button should fire close event once","suites":["Player API"],"updatePoint":{"line":832,"column":49,"index":33609},"line":832,"code":"    it('close button should fire close event once', async () => {\n      const playerEl = win.document.createElement('amp-story-player');\n      playerEl.setAttribute('exit-control', 'close-button');\n      attachPlayerWithStories(playerEl, 5);\n      const player = new AmpStoryPlayer(win, playerEl);\n      await player.load();\n      const readySpy = env.sandbox.spy();\n      playerEl.addEventListener('amp-story-player-close', readySpy);\n      playerEl.querySelector('button.amp-story-player-close-button').click();\n      expect(readySpy).to.have.been.calledOnce;\n    });","file":"unit/test-amp-story-player.js","skipped":false,"dir":"test"},{"name":"get page attachment state should send message","suites":["Player API"],"updatePoint":{"line":843,"column":53,"index":34183},"line":843,"code":"    it('get page attachment state should send message', async () => {\n      const sendRequestSpy = env.sandbox.spy(fakeMessaging, 'sendRequest');\n      buildStoryPlayer();\n      await manager.loadPlayers();\n      fakeResponse = {\n        value: true\n      };\n      await playerEl.getStoryState('page-attachment');\n      await macroTask();\n      expect(sendRequestSpy).to.have.been.calledWith('getDocumentState', {\n        'state': 'PAGE_ATTACHMENT_STATE'\n      });\n    });","file":"unit/test-amp-story-player.js","skipped":false,"dir":"test"},{"name":"should display button when page attachment is closed","suites":["Player API"],"updatePoint":{"line":856,"column":60,"index":34663},"line":856,"code":"    it('should display button when page attachment is closed', async () => {\n      const playerEl = win.document.createElement('amp-story-player');\n      playerEl.setAttribute('exit-control', 'back-button');\n      attachPlayerWithStories(playerEl, 1);\n      const player = new AmpStoryPlayer(win, playerEl);\n      await player.load();\n      expect(playerEl.querySelector('button.amp-story-player-hide-button')).to.not.exist;\n    });","file":"unit/test-amp-story-player.js","skipped":false,"dir":"test"},{"name":"should hide button when page attachment is open","suites":["Player API"],"updatePoint":{"line":864,"column":55,"index":35091},"line":864,"code":"    it('should hide button when page attachment is open', async () => {\n      buildStoryPlayer();\n      playerEl.setAttribute('exit-control', 'back-button');\n      await manager.loadPlayers();\n      await macroTask();\n      openPageAttachment();\n      expect(playerEl.querySelector('button.amp-story-player-hide-button')).to.exist;\n    });","file":"unit/test-amp-story-player.js","skipped":false,"dir":"test"},{"name":"should fire page attachment open event once","suites":["Player API"],"updatePoint":{"line":872,"column":51,"index":35427},"line":872,"code":"    it('should fire page attachment open event once', async () => {\n      buildStoryPlayer();\n      await manager.loadPlayers();\n      await macroTask();\n      const pageAttachmentSpy = env.sandbox.spy();\n      playerEl.addEventListener('page-attachment-open', pageAttachmentSpy);\n      openPageAttachment();\n      expect(pageAttachmentSpy).to.have.been.calledOnce;\n    });","file":"unit/test-amp-story-player.js","skipped":false,"dir":"test"},{"name":"should fire page attachment close event once","suites":["Player API"],"updatePoint":{"line":881,"column":52,"index":35802},"line":881,"code":"    it('should fire page attachment close event once', async () => {\n      buildStoryPlayer();\n      await manager.loadPlayers();\n      await macroTask();\n      const pageAttachmentSpy = env.sandbox.spy();\n      playerEl.addEventListener('page-attachment-close', pageAttachmentSpy);\n      closePageAttachment();\n      expect(pageAttachmentSpy).to.have.been.calledOnce;\n    });","file":"unit/test-amp-story-player.js","skipped":false,"dir":"test"},{"name":"navigate forward given a positive number in range","suites":["Player API"],"updatePoint":{"line":890,"column":57,"index":36184},"line":890,"code":"    it('navigate forward given a positive number in range', async () => {\n      const playerEl = win.document.createElement('amp-story-player');\n      attachPlayerWithStories(playerEl, 5);\n      const player = new AmpStoryPlayer(win, playerEl);\n      await player.load();\n      await macroTask();\n      const navigationSpy = env.sandbox.spy();\n      playerEl.addEventListener('navigation', navigationSpy);\n      player.go(2);\n      expect(navigationSpy).to.have.been.calledWithMatch({\n        type: 'navigation',\n        detail: {\n          index: 2,\n          remaining: 2\n        }\n      });\n    });","file":"unit/test-amp-story-player.js","skipped":false,"dir":"test"},{"name":"navigate backward given a negative number in range","suites":["Player API"],"updatePoint":{"line":907,"column":58,"index":36787},"line":907,"code":"    it('navigate backward given a negative number in range', async () => {\n      const playerEl = win.document.createElement('amp-story-player');\n      attachPlayerWithStories(playerEl, 5);\n      const player = new AmpStoryPlayer(win, playerEl);\n      await player.load();\n      await macroTask();\n      const navigationSpy = env.sandbox.spy();\n      playerEl.addEventListener('navigation', navigationSpy);\n      player.go(3);\n      player.go(-1);\n      expect(navigationSpy).to.have.been.calledWithMatch({\n        type: 'navigation',\n        detail: {\n          index: 2,\n          remaining: 2\n        }\n      });\n    });","file":"unit/test-amp-story-player.js","skipped":false,"dir":"test"},{"name":"not navigate given zero","suites":["Player API"],"updatePoint":{"line":925,"column":31,"index":37384},"line":925,"code":"    it('not navigate given zero', async () => {\n      const playerEl = win.document.createElement('amp-story-player');\n      attachPlayerWithStories(playerEl, 5);\n      const player = new AmpStoryPlayer(win, playerEl);\n      await player.load();\n      await macroTask();\n      const navigationSpy = env.sandbox.spy();\n      playerEl.addEventListener('navigation', navigationSpy);\n      player.go(0);\n      expect(navigationSpy).to.have.not.been.called;\n    });","file":"unit/test-amp-story-player.js","skipped":false,"dir":"test"},{"name":"go should throw when positive number is out of story range","suites":["Player API"],"updatePoint":{"line":936,"column":66,"index":37880},"line":936,"code":"    it('go should throw when positive number is out of story range', async () => {\n      const playerEl = win.document.createElement('amp-story-player');\n      attachPlayerWithStories(playerEl, 5);\n      const player = new AmpStoryPlayer(win, playerEl);\n      await player.load();\n      return expect(() => player.go(6)).to.throw('Out of Story range.');\n    });","file":"unit/test-amp-story-player.js","skipped":false,"dir":"test"},{"name":"go should throw when negative number is out of story range","suites":["Player API"],"updatePoint":{"line":943,"column":66,"index":38242},"line":943,"code":"    it('go should throw when negative number is out of story range', async () => {\n      const playerEl = win.document.createElement('amp-story-player');\n      attachPlayerWithStories(playerEl, 5);\n      const player = new AmpStoryPlayer(win, playerEl);\n      await player.load();\n      return expect(() => player.go(-1)).to.throw('Out of Story range.');\n    });","file":"unit/test-amp-story-player.js","skipped":false,"dir":"test"},{"name":"go with page delta should change current story page","suites":["Player API"],"updatePoint":{"line":950,"column":59,"index":38598},"line":950,"code":"    it('go with page delta should change current story page', async () => {\n      const playerEl = win.document.createElement('amp-story-player');\n      attachPlayerWithStories(playerEl, 1);\n      const player = new AmpStoryPlayer(win, playerEl);\n      await player.load();\n      await macroTask();\n      const sendRequestSpy = env.sandbox.spy(fakeMessaging, 'sendRequest');\n      player.go(0, 4);\n      await macroTask();\n      expect(sendRequestSpy).to.have.been.calledWith('selectPage', {\n        'delta': 4\n      });\n    });","file":"unit/test-amp-story-player.js","skipped":false,"dir":"test"},{"name":"navigate to id when calling gotToPageId","suites":["Player API"],"updatePoint":{"line":963,"column":47,"index":39115},"line":963,"code":"    it('navigate to id when calling gotToPageId', async () => {\n      const playerEl = win.document.createElement('amp-story-player');\n      attachPlayerWithStories(playerEl, 1);\n      const player = new AmpStoryPlayer(win, playerEl);\n      await player.load();\n      await macroTask();\n      const sendRequestSpy = env.sandbox.spy(fakeMessaging, 'sendRequest');\n      player.show('', 'page-2');\n      await macroTask();\n      expect(sendRequestSpy).to.have.been.calledWith('selectPage', {\n        'id': 'page-2'\n      });\n    });","file":"unit/test-amp-story-player.js","skipped":false,"dir":"test"},{"name":"takes to first story when swiping on the last one with circular wrapping","suites":["Player API"],"updatePoint":{"line":976,"column":80,"index":39679},"line":976,"code":"    it('takes to first story when swiping on the last one with circular wrapping', async () => {\n      const playerEl = win.document.createElement('amp-story-player');\n      attachPlayerWithStories(playerEl, 5);\n      playerEl.appendChild(buildCircularWrappingConfig());\n      const player = new AmpStoryPlayer(win, playerEl);\n      await player.load();\n      await macroTask();\n      const navigationSpy = env.sandbox.spy();\n      playerEl.addEventListener('navigation', navigationSpy);\n      player.go(4);\n      swipeLeft();\n      expect(navigationSpy).to.have.been.calledWithMatch({\n        type: 'navigation',\n        detail: {\n          index: 0,\n          remaining: 4\n        }\n      });\n    });","file":"unit/test-amp-story-player.js","skipped":false,"dir":"test"},{"name":"takes to last story when swiping on the first one with circular wrapping","suites":["Player API"],"updatePoint":{"line":995,"column":80,"index":40382},"line":995,"code":"    it('takes to last story when swiping on the first one with circular wrapping', async () => {\n      const playerEl = win.document.createElement('amp-story-player');\n      attachPlayerWithStories(playerEl, 5);\n      playerEl.appendChild(buildCircularWrappingConfig());\n      const player = new AmpStoryPlayer(win, playerEl);\n      await player.load();\n      await macroTask();\n      const navigationSpy = env.sandbox.spy();\n      playerEl.addEventListener('navigation', navigationSpy);\n      swipeRight();\n      expect(navigationSpy).to.have.been.calledWithMatch({\n        type: 'navigation',\n        detail: {\n          index: 4,\n          remaining: 0\n        }\n      });\n    });","file":"unit/test-amp-story-player.js","skipped":false,"dir":"test"},{"name":"navigate to first story when last story is finished","suites":["Player API"],"updatePoint":{"line":1013,"column":59,"index":41045},"line":1013,"code":"    it('navigate to first story when last story is finished', async () => {\n      const playerEl = win.document.createElement('amp-story-player');\n      attachPlayerWithStories(playerEl, 5);\n      playerEl.appendChild(buildCircularWrappingConfig());\n      const player = new AmpStoryPlayer(win, playerEl);\n      await player.load();\n      await macroTask();\n      const navigationSpy = env.sandbox.spy();\n      playerEl.addEventListener('navigation', navigationSpy);\n      player.go(4);\n      player.go(1);\n      expect(navigationSpy).to.have.been.calledWithMatch({\n        type: 'navigation',\n        detail: {\n          index: 0,\n          remaining: 4\n        }\n      });\n    });","file":"unit/test-amp-story-player.js","skipped":false,"dir":"test"},{"name":"navigate to last story when first story is requested to go back","suites":["Player API"],"updatePoint":{"line":1032,"column":71,"index":41740},"line":1032,"code":"    it('navigate to last story when first story is requested to go back', async () => {\n      const playerEl = win.document.createElement('amp-story-player');\n      attachPlayerWithStories(playerEl, 5);\n      playerEl.appendChild(buildCircularWrappingConfig());\n      const player = new AmpStoryPlayer(win, playerEl);\n      await player.load();\n      await macroTask();\n      const navigationSpy = env.sandbox.spy();\n      playerEl.addEventListener('navigation', navigationSpy);\n      player.go(-1);\n      expect(navigationSpy).to.have.been.calledWithMatch({\n        type: 'navigation',\n        detail: {\n          index: 4,\n          remaining: 0\n        }\n      });\n    });","file":"unit/test-amp-story-player.js","skipped":false,"dir":"test"},{"name":"should dispatch amp-story-muted-state when story is unmuted","suites":["Player API"],"updatePoint":{"line":1050,"column":67,"index":42412},"line":1050,"code":"    it('should dispatch amp-story-muted-state when story is unmuted', async () => {\n      const playerEl = win.document.createElement('amp-story-player');\n      attachPlayerWithStories(playerEl, 1);\n      const player = new AmpStoryPlayer(win, playerEl);\n      await player.load();\n      await macroTask();\n      const spy = env.sandbox.spy();\n      playerEl.addEventListener('amp-story-muted-state', spy);\n      const fakeData = {\n        state: 'MUTED_STATE',\n        value: false\n      };\n      fireHandler['documentStateUpdate']('documentStateUpdate', fakeData);\n      await macroTask();\n      expect(spy).to.have.been.calledWithMatch({\n        type: 'amp-story-muted-state',\n        detail: {\n          muted: false\n        }\n      });\n    });","file":"unit/test-amp-story-player.js","skipped":false,"dir":"test"},{"name":"should dispatch amp-story-muted-state when story is muted","suites":["Player API"],"updatePoint":{"line":1071,"column":65,"index":43159},"line":1071,"code":"    it('should dispatch amp-story-muted-state when story is muted', async () => {\n      const playerEl = win.document.createElement('amp-story-player');\n      attachPlayerWithStories(playerEl, 1);\n      const player = new AmpStoryPlayer(win, playerEl);\n      await player.load();\n      await macroTask();\n      const spy = env.sandbox.spy();\n      playerEl.addEventListener('amp-story-muted-state', spy);\n      const fakeData = {\n        state: 'MUTED_STATE',\n        value: true\n      };\n      fireHandler['documentStateUpdate']('documentStateUpdate', fakeData);\n      await macroTask();\n      expect(spy).to.have.been.calledWithMatch({\n        type: 'amp-story-muted-state',\n        detail: {\n          muted: true\n        }\n      });\n    });","file":"unit/test-amp-story-player.js","skipped":false,"dir":"test"},{"name":"should react to CURRENT_PAGE_ID events","suites":["Player API"],"updatePoint":{"line":1092,"column":46,"index":43885},"line":1092,"code":"    it('should react to CURRENT_PAGE_ID events', async () => {\n      const playerEl = win.document.createElement('amp-story-player');\n      attachPlayerWithStories(playerEl, 1);\n      const player = new AmpStoryPlayer(win, playerEl);\n      await player.load();\n      await macroTask();\n      const navigationSpy = env.sandbox.spy();\n      playerEl.addEventListener('storyNavigation', navigationSpy);\n      fakeResponse = {\n        value: 0.12\n      };\n      const fakeData = {\n        state: 'CURRENT_PAGE_ID',\n        value: 'page-2'\n      };\n      fireHandler['documentStateUpdate']('documentStateUpdate', fakeData);\n      await macroTask();\n      expect(navigationSpy).to.have.been.calledWithMatch({\n        type: 'storyNavigation',\n        detail: {\n          pageId: 'page-2',\n          progress: 0.12\n        }\n      });\n    });","file":"unit/test-amp-story-player.js","skipped":false,"dir":"test"},{"name":"supress navigation animation if called go with options.animate = false","suites":["Player API"],"updatePoint":{"line":1117,"column":78,"index":44752},"line":1117,"code":"    it('supress navigation animation if called go with options.animate = false', async () => {\n      const playerEl = win.document.createElement('amp-story-player');\n      attachPlayerWithStories(playerEl, 2);\n      playerEl.appendChild(buildCircularWrappingConfig());\n      const player = new AmpStoryPlayer(win, playerEl);\n      await player.load();\n      await macroTask();\n      player.go(1, 0, {\n        animate: false\n      });\n      expect(player.getElement().querySelector('.i-amphtml-story-player-main-container').classList.contains('i-amphtml-story-player-no-navigation-transition')).to.be.true;\n    });","file":"unit/test-amp-story-player.js","skipped":false,"dir":"test"},{"name":"not supress navigation animation if called go with options.animate = true","suites":["Player API"],"updatePoint":{"line":1129,"column":81,"index":45369},"line":1129,"code":"    it('not supress navigation animation if called go with options.animate = true', async () => {\n      const playerEl = win.document.createElement('amp-story-player');\n      attachPlayerWithStories(playerEl, 2);\n      playerEl.appendChild(buildCircularWrappingConfig());\n      const player = new AmpStoryPlayer(win, playerEl);\n      await player.load();\n      await macroTask();\n      player.go(1, 0, {\n        animate: true\n      });\n      expect(player.getElement().querySelector('.i-amphtml-story-player-main-container').classList.contains('i-amphtml-story-player-no-navigation-transition')).to.be.false;\n    });","file":"unit/test-amp-story-player.js","skipped":false,"dir":"test"},{"name":"revert navigation animation after transition ends","suites":["Player API"],"updatePoint":{"line":1141,"column":57,"index":45962},"line":1141,"code":"    it('revert navigation animation after transition ends', async () => {\n      const playerEl = win.document.createElement('amp-story-player');\n      attachPlayerWithStories(playerEl, 2);\n      playerEl.appendChild(buildCircularWrappingConfig());\n      const player = new AmpStoryPlayer(win, playerEl);\n      await player.load();\n      await macroTask();\n      player.go(1, 0, {\n        animate: false\n      });\n      const rootEl = player.getElement().querySelector('.i-amphtml-story-player-main-container');\n\n      // Wait for event dispatched to be listened\n      await listenOncePromise(playerEl, 'transitionend');\n      await macroTask();\n      expect(rootEl.classList.contains('i-amphtml-story-player-no-navigation-transition')).to.be.false;\n    });","file":"unit/test-amp-story-player.js","skipped":false,"dir":"test"},{"name":"should create previous and next story buttons when desktop panel story player experiment is on","suites":["Player API"],"updatePoint":{"line":1158,"column":102,"index":46764},"line":1158,"code":"    it('should create previous and next story buttons when desktop panel story player experiment is on', async () => {\n      const playerEl = win.document.createElement('amp-story-player');\n      attachPlayerWithStories(playerEl, 5);\n      win.DESKTOP_PANEL_STORY_PLAYER_EXP_ON = true;\n      const player = new AmpStoryPlayer(win, playerEl);\n      await player.load();\n      expect(playerEl.querySelector('.i-amphtml-story-player-panel-prev')).to.exist;\n      expect(playerEl.querySelector('.i-amphtml-story-player-panel-next')).to.exist;\n    });","file":"unit/test-amp-story-player.js","skipped":false,"dir":"test"},{"name":"Should get UI state on resize","suites":["Player API"],"updatePoint":{"line":1167,"column":37,"index":47246},"line":1167,"code":"    it('Should get UI state on resize', async () => {\n      const playerEl = win.document.createElement('amp-story-player');\n      attachPlayerWithStories(playerEl, 5);\n      win.DESKTOP_PANEL_STORY_PLAYER_EXP_ON = true;\n      const player = new AmpStoryPlayer(win, playerEl);\n      await player.load();\n      const sendRequestSpy = env.sandbox.spy(fakeMessaging, 'sendRequest');\n      win.dispatchEvent(createCustomEvent(win, 'resize', null));\n      await macroTask();\n      expect(sendRequestSpy).to.have.been.calledWith('onDocumentState', {\n        'state': 'UI_STATE'\n      });\n    });","file":"unit/test-amp-story-player.js","skipped":false,"dir":"test"},{"name":"should read params from window name and fragment","suites":["params"],"updatePoint":{"line":16,"column":56,"index":832},"line":16,"code":"    it('should read params from window name and fragment', () => {\n      win.name = '__AMP__param1=value1&other=one';\n      win.location.hash = '#paddingTop=17&other=two';\n      const ampdoc = new AmpDocService(win, true).getSingleDoc();\n\n      // Fragment parameters take precedence.\n      expect(ampdoc.getParam('param1')).to.equal('value1');\n      expect(ampdoc.getParam('other')).to.equal('two');\n      expect(ampdoc.getParam('paddingTop')).to.equal('17');\n    });","file":"unit/test-ampdoc.js","skipped":false,"dir":"test"},{"name":"should ignore window name and fragment with explicit params","suites":["params"],"updatePoint":{"line":26,"column":67,"index":1312},"line":26,"code":"    it('should ignore window name and fragment with explicit params', () => {\n      win.name = '__AMP__param1=value1&other=one';\n      win.location.hash = '#paddingTop=17&other=two';\n      const ampdoc = new AmpDocService(win, true, {\n        'other': 'zero'\n      }).getSingleDoc();\n\n      // Fragment parameters take precedence.\n      expect(ampdoc.getParam('other')).to.equal('zero');\n      expect(ampdoc.getParam('param1')).to.be.null;\n      expect(ampdoc.getParam('paddingTop')).to.be.null;\n    });","file":"unit/test-ampdoc.js","skipped":false,"dir":"test"},{"name":"should initialize as single-doc","suites":["single-doc mode"],"updatePoint":{"line":44,"column":39,"index":1943},"line":44,"code":"    it('should initialize as single-doc', () => {\n      expect(service.isSingleDoc()).to.be.true;\n      expect(service.getSingleDoc()).to.exist;\n      expect(service.getSingleDoc()).to.be.instanceOf(AmpDocSingle);\n    });","file":"unit/test-ampdoc.js","skipped":false,"dir":"test"},{"name":"should not return a conflicting value on a form","suites":["single-doc mode"],"updatePoint":{"line":49,"column":55,"index":2181},"line":49,"code":"    it('should not return a conflicting value on a form', () => {\n      const node = doc.createElement('form');\n      doc.body.appendChild(node);\n      // Note: Instead of actually creating an input element with a name that\n      // conflicts, just set this directly in case the test is ever run in\n      // an compiled environment.\n      node.getAmpDoc = 5;\n      const ampDoc = service.getAmpDocIfAvailable(node);\n      expect(ampDoc).to.equal(service.getSingleDoc());\n    });","file":"unit/test-ampdoc.js","skipped":false,"dir":"test"},{"name":"should always yield the single document","suites":["single-doc mode"],"updatePoint":{"line":59,"column":47,"index":2652},"line":59,"code":"    it('should always yield the single document', () => {\n      expect(() => service.getAmpDoc(null)).to.throw();\n      expect(service.getAmpDoc(doc)).to.equal(service.getSingleDoc());\n      const div = doc.createElement('div');\n      doc.body.appendChild(div);\n      expect(service.getAmpDoc(div)).to.equal(service.getSingleDoc());\n    });","file":"unit/test-ampdoc.js","skipped":false,"dir":"test"},{"name":"should return meta content values","suites":["single-doc mode"],"updatePoint":{"line":66,"column":41,"index":2987},"line":66,"code":"    it('should return meta content values', () => {\n      const meta = doc.createElement('meta');\n      meta.setAttribute('name', 'abc');\n      meta.setAttribute('content', '123');\n      doc.head.appendChild(meta);\n      expect(service.getAmpDoc(meta).getMetaByName('abc')).to.equal('123');\n    });","file":"unit/test-ampdoc.js","skipped":false,"dir":"test"},{"name":"should yield the closest shadow doc","suites":["single-doc mode","shadow documents"],"updatePoint":{"line":101,"column":45,"index":4149},"line":101,"code":"      it('should yield the closest shadow doc', () => {\n        if (!shadowRoot) {\n          return;\n        }\n        const newAmpDoc = service.installShadowDoc('https://a.org/', shadowRoot);\n        const ampDoc = service.getAmpDoc(content);\n        expect(ampDoc).to.equal(newAmpDoc);\n      });","file":"unit/test-ampdoc.js","skipped":false,"dir":"test"},{"name":"should pass shadow doc params","suites":["single-doc mode","shadow documents"],"updatePoint":{"line":109,"column":39,"index":4441},"line":109,"code":"      it('should pass shadow doc params', () => {\n        if (!shadowRoot) {\n          return;\n        }\n        const ampdoc = service.installShadowDoc('https://a.org/', shadowRoot, {\n          params: {\n            'other': 'one'\n          }\n        });\n        expect(ampdoc.getParam('other')).to.equal('one');\n      });","file":"unit/test-ampdoc.js","skipped":false,"dir":"test"},{"name":"should not initialize as single-doc","suites":["shadow-doc mode"],"updatePoint":{"line":147,"column":43,"index":5570},"line":147,"code":"    it('should not initialize as single-doc', () => {\n      expect(service.isSingleDoc()).to.be.false;\n      expect(service.singleDoc_).to.not.exist;\n    });","file":"unit/test-ampdoc.js","skipped":false,"dir":"test"},{"name":"should yield custom-element shadow-doc when exists","suites":["shadow-doc mode"],"updatePoint":{"line":151,"column":58,"index":5743},"line":151,"code":"    it('should yield custom-element shadow-doc when exists', () => {\n      const ampDoc = {};\n      content.everAttached = true;\n      content.getAmpDoc = () => ampDoc;\n      host.appendChild(content);\n      expect(service.getAmpDoc(content)).to.equal(ampDoc);\n    });","file":"unit/test-ampdoc.js","skipped":false,"dir":"test"},{"name":"should yield cached or custom-element shadow-doc when exists","suites":["shadow-doc mode"],"updatePoint":{"line":158,"column":68,"index":6022},"line":158,"code":"    it('should yield cached or custom-element shadow-doc when exists', () => {\n      if (!shadowRoot) {\n        return;\n      }\n      const ampDoc = {};\n      shadowRoot['__AMPDOC'] = ampDoc;\n      expect(service.getAmpDoc(content)).to.equal(ampDoc);\n      expect(service.getAmpDoc(shadowRoot)).to.equal(ampDoc);\n\n      // Override via custom element.\n      const ampDoc2 = {};\n      content.everAttached = true;\n      content.getAmpDoc = () => ampDoc2;\n      expect(service.getAmpDoc(content)).to.equal(ampDoc2);\n\n      // Fallback to cached version when custom element returns null.\n      content.getAmpDoc = () => null;\n      expect(service.getAmpDoc(content)).to.equal(ampDoc);\n    });","file":"unit/test-ampdoc.js","skipped":false,"dir":"test"},{"name":"should create and cache shadow-doc","suites":["shadow-doc mode"],"updatePoint":{"line":177,"column":42,"index":6686},"line":177,"code":"    it('should create and cache shadow-doc', () => {\n      if (!shadowRoot) {\n        return;\n      }\n      expect(() => {\n        service.getAmpDoc(content);\n      }).to.throw(/No ampdoc found/);\n      const newAmpDoc = service.installShadowDoc('https://a.org/', shadowRoot);\n      const ampDoc = service.getAmpDoc(content);\n      expect(ampDoc).to.equal(newAmpDoc);\n      expect(ampDoc).to.exist;\n      expect(service.getAmpDoc(shadowRoot)).to.equal(ampDoc);\n      expect(ampDoc).to.be.instanceOf(AmpDocShadow);\n      expect(ampDoc.shadowRoot_).to.equal(shadowRoot);\n      expect(shadowRoot['__AMPDOC']).to.equal(ampDoc);\n    });","file":"unit/test-ampdoc.js","skipped":false,"dir":"test"},{"name":"should fail if shadow root not found","suites":["shadow-doc mode"],"updatePoint":{"line":193,"column":44,"index":7320},"line":193,"code":"    it('should fail if shadow root not found', () => {\n      if (!shadowRoot) {\n        return;\n      }\n      expect(() => {\n        service.getAmpDoc(host);\n      }).to.throw(/No ampdoc found/);\n    });","file":"unit/test-ampdoc.js","skipped":false,"dir":"test"},{"name":"should allow checking for an AmpDoc for an external node","suites":["shadow-doc mode"],"updatePoint":{"line":201,"column":64,"index":7544},"line":201,"code":"    it('should allow checking for an AmpDoc for an external node', () => {\n      if (!shadowRoot) {\n        return;\n      }\n      const ampDoc = service.getAmpDocIfAvailable(host);\n      expect(ampDoc).to.be.null;\n    });","file":"unit/test-ampdoc.js","skipped":false,"dir":"test"},{"name":"should fail to install shadow doc twice","suites":["shadow-doc mode"],"updatePoint":{"line":208,"column":47,"index":7749},"line":208,"code":"    it('should fail to install shadow doc twice', () => {\n      if (!shadowRoot) {\n        return;\n      }\n      service.installShadowDoc('https://a.org/', shadowRoot);\n      allowConsoleError(() => {\n        expect(() => {\n          service.installShadowDoc('https://a.org/', shadowRoot);\n        }).to.throw(/The shadow root already contains ampdoc/);\n      });\n    });","file":"unit/test-ampdoc.js","skipped":false,"dir":"test"},{"name":"should navigate via host","suites":["shadow-doc mode"],"updatePoint":{"line":219,"column":32,"index":8106},"line":219,"code":"    it('should navigate via host', () => {\n      if (!shadowRoot) {\n        return;\n      }\n      const newAmpDoc = service.installShadowDoc('https://a.org/', shadowRoot);\n      const ampDoc = service.getAmpDoc(content);\n      expect(ampDoc).to.equal(newAmpDoc);\n      const content2 = doc.createElement('span');\n      const host2 = doc.createElement('div');\n      let shadowRoot2;\n      if (isShadowDomSupported()) {\n        if (getShadowDomSupportedVersion() == ShadowDomVersion_Enum.V1) {\n          shadowRoot2 = host2.attachShadow({\n            mode: 'open'\n          });\n        } else {\n          shadowRoot2 = host2.createShadowRoot();\n        }\n      }\n      shadowRoot2.appendChild(content2);\n      shadowRoot.appendChild(host2);\n      expect(content2.parentNode).to.equal(shadowRoot2);\n      expect(shadowRoot2.host).to.equal(host2);\n      expect(host2.shadowRoot).to.equal(shadowRoot2);\n      expect(host2.parentNode).to.equal(shadowRoot);\n      expect(service.getAmpDoc(host2)).to.equal(ampDoc);\n      expect(service.getAmpDoc(content2)).to.equal(ampDoc);\n      expect(service.getAmpDoc(shadowRoot2)).to.equal(ampDoc);\n    });","file":"unit/test-ampdoc.js","skipped":false,"dir":"test"},{"name":"should initialize as single-doc","suites":["fie-doc mode"],"updatePoint":{"line":274,"column":39,"index":10041},"line":274,"code":"    it('should initialize as single-doc', () => {\n      expect(service.isSingleDoc()).to.be.true;\n      expect(service.getSingleDoc()).to.exist;\n    });","file":"unit/test-ampdoc.js","skipped":false,"dir":"test"},{"name":"should yield custom-element doc when exists","suites":["fie-doc mode"],"updatePoint":{"line":278,"column":51,"index":10206},"line":278,"code":"    it('should yield custom-element doc when exists', () => {\n      const ampDoc = {};\n      content.everAttached = true;\n      content.getAmpDoc = () => ampDoc;\n      host.appendChild(content);\n      expect(service.getAmpDoc(content)).to.equal(ampDoc);\n    });","file":"unit/test-ampdoc.js","skipped":false,"dir":"test"},{"name":"should yield cached or custom-element shadow-doc when exists","suites":["fie-doc mode"],"updatePoint":{"line":285,"column":68,"index":10485},"line":285,"code":"    it('should yield cached or custom-element shadow-doc when exists', () => {\n      if (!shadowRoot) {\n        return;\n      }\n      const ampDoc = {};\n      shadowRoot['__AMPDOC'] = ampDoc;\n      expect(service.getAmpDoc(content)).to.equal(ampDoc);\n      expect(service.getAmpDoc(shadowRoot)).to.equal(ampDoc);\n\n      // Override via custom element.\n      const ampDoc2 = {};\n      content.everAttached = true;\n      content.getAmpDoc = () => ampDoc2;\n      expect(service.getAmpDoc(content)).to.equal(ampDoc2);\n\n      // Fallback to cached version when custom element returns null.\n      content.getAmpDoc = () => null;\n      expect(service.getAmpDoc(content)).to.equal(ampDoc);\n    });","file":"unit/test-ampdoc.js","skipped":false,"dir":"test"},{"name":"should create and cache shadow-doc","suites":["fie-doc mode"],"updatePoint":{"line":304,"column":42,"index":11149},"line":304,"code":"    it('should create and cache shadow-doc', () => {\n      if (!shadowRoot) {\n        return;\n      }\n      const newAmpDoc = service.installShadowDoc('https://a.org/', shadowRoot);\n      const ampDoc = service.getAmpDoc(content);\n      expect(ampDoc).to.equal(newAmpDoc);\n      expect(ampDoc).to.exist;\n      expect(service.getAmpDoc(shadowRoot)).to.equal(ampDoc);\n      expect(ampDoc).to.be.instanceOf(AmpDocShadow);\n      expect(ampDoc.shadowRoot_).to.equal(shadowRoot);\n      expect(shadowRoot['__AMPDOC']).to.equal(ampDoc);\n    });","file":"unit/test-ampdoc.js","skipped":false,"dir":"test"},{"name":"should navigate to parent if shadow root not found","suites":["fie-doc mode"],"updatePoint":{"line":317,"column":58,"index":11702},"line":317,"code":"    it('should navigate to parent if shadow root not found', () => {\n      if (!shadowRoot) {\n        return;\n      }\n      expect(service.getAmpDoc(host)).to.equal(service.getSingleDoc());\n    });","file":"unit/test-ampdoc.js","skipped":false,"dir":"test"},{"name":"should fail to install shadow doc twice","suites":["fie-doc mode"],"updatePoint":{"line":323,"column":47,"index":11889},"line":323,"code":"    it('should fail to install shadow doc twice', () => {\n      if (!shadowRoot) {\n        return;\n      }\n      service.installShadowDoc('https://a.org/', shadowRoot);\n      allowConsoleError(() => {\n        expect(() => {\n          service.installShadowDoc('https://a.org/', shadowRoot);\n        }).to.throw(/The shadow root already contains ampdoc/);\n      });\n    });","file":"unit/test-ampdoc.js","skipped":false,"dir":"test"},{"name":"should navigate via host","suites":["fie-doc mode"],"updatePoint":{"line":334,"column":32,"index":12246},"line":334,"code":"    it('should navigate via host', () => {\n      if (!shadowRoot) {\n        return;\n      }\n      const newAmpDoc = service.installShadowDoc('https://a.org/', shadowRoot);\n      const ampDoc = service.getAmpDoc(content);\n      expect(ampDoc).to.equal(newAmpDoc);\n      const content2 = doc.createElement('span');\n      const host2 = doc.createElement('div');\n      let shadowRoot2;\n      if (isShadowDomSupported()) {\n        if (getShadowDomSupportedVersion() == ShadowDomVersion_Enum.V1) {\n          shadowRoot2 = host2.attachShadow({\n            mode: 'open'\n          });\n        } else {\n          shadowRoot2 = host2.createShadowRoot();\n        }\n      }\n      shadowRoot2.appendChild(content2);\n      shadowRoot.appendChild(host2);\n      expect(content2.parentNode).to.equal(shadowRoot2);\n      expect(shadowRoot2.host).to.equal(host2);\n      expect(host2.shadowRoot).to.equal(shadowRoot2);\n      expect(host2.parentNode).to.equal(shadowRoot);\n      expect(service.getAmpDoc(host2)).to.equal(ampDoc);\n      expect(service.getAmpDoc(content2)).to.equal(ampDoc);\n      expect(service.getAmpDoc(shadowRoot2)).to.equal(ampDoc);\n    });","file":"unit/test-ampdoc.js","skipped":false,"dir":"test"},{"name":"should set up and destroy listeners","suites":["fie-doc mode"],"updatePoint":{"line":411,"column":41,"index":14715},"line":411,"code":"  it('should set up and destroy listeners', () => {\n    // 1 for top, 1 for embedSameWindow.\n    expect(doc.addEventListener.callCount).to.equal(2);\n    expect(doc.removeEventListener.callCount).to.equal(0);\n    // 1 for embedOtherWindow, 1 for embedChild.\n    expect(childDoc.addEventListener.callCount).to.equal(2);\n    expect(childDoc.removeEventListener.callCount).to.equal(0);\n    // 1 for embedSameWindow, 1 for embedOtherWindow.\n    expect(top.visibilityStateHandlers_.getHandlerCount()).to.equal(2);\n    // No children.\n    expect(embedSameWindow.visibilityStateHandlers_.getHandlerCount()).to.equal(0);\n    // 1 for embedChild.\n    expect(embedOtherWindow.visibilityStateHandlers_.getHandlerCount()).to.equal(1);\n    // No children.\n    expect(embedChild.visibilityStateHandlers_.getHandlerCount()).to.equal(0);\n\n    // Destroy the nested child.\n    embedChild.dispose();\n    expect(doc.removeEventListener.callCount).to.equal(0);\n    expect(childDoc.removeEventListener.callCount).to.equal(1);\n    expect(top.visibilityStateHandlers_.getHandlerCount()).to.equal(2);\n    expect(embedOtherWindow.visibilityStateHandlers_.getHandlerCount()).to.equal(0);\n\n    // Destroy the embedOtherWindow.\n    embedOtherWindow.dispose();\n    expect(doc.removeEventListener.callCount).to.equal(0);\n    expect(childDoc.removeEventListener.callCount).to.equal(2);\n    expect(top.visibilityStateHandlers_.getHandlerCount()).to.equal(1);\n\n    // Destroy the embedSameWindow.\n    embedSameWindow.dispose();\n    expect(doc.removeEventListener.callCount).to.equal(1);\n    expect(top.visibilityStateHandlers_.getHandlerCount()).to.equal(0);\n\n    // Destroy the top.\n    top.dispose();\n    expect(doc.removeEventListener.callCount).to.equal(2);\n  });","file":"unit/test-ampdoc.js","skipped":false,"dir":"test"},{"name":"should set up and dipose services","suites":["fie-doc mode"],"updatePoint":{"line":449,"column":39,"index":16447},"line":449,"code":"  it('should set up and dipose services', () => {\n    const disposableFactory = function () {\n      return {\n        dispose: env.sandbox.spy()\n      };\n    };\n\n    // Register a disposable service.\n    registerServiceBuilderForDoc(embedChild, 'a', disposableFactory);\n    const disposableService = getServiceForDoc(embedChild, 'a');\n\n    // Destroy the nested child.\n    embedChild.dispose();\n    expect(disposableService.dispose).to.be.calledOnce;\n  });","file":"unit/test-ampdoc.js","skipped":false,"dir":"test"},{"name":"should prefer timeOrigin doc initialized to visible","suites":["firstVisibleTime"],"updatePoint":{"line":465,"column":59,"index":16962},"line":465,"code":"    it('should prefer timeOrigin doc initialized to visible', () => {\n      // Move page load time to 2021-01-01T12:30Z\n      win.performance.timeOrigin = 1609504200000;\n      // Page has been active for 30min\n      env.sandbox.stub(win.performance, 'now').returns(30 * 60 * 1000);\n      // Move epoch time to 2021-01-01T13:00Z\n      clock.tick(1609506000000 - Date.now());\n      top = new AmpDocSingle(win, {\n        visibilityState: 'visible'\n      });\n      expect(top.getFirstVisibleTime()).to.equal(win.performance.timeOrigin);\n      expect(top.getFirstVisibleTime()).not.to.equal(Date.now());\n    });","file":"unit/test-ampdoc.js","skipped":false,"dir":"test"},{"name":"should wait for visible","suites":["firstVisibleTime"],"updatePoint":{"line":478,"column":31,"index":17541},"line":478,"code":"    it('should wait for visible', () => {\n      // Move page load time to 2021-01-01T12:30Z\n      win.performance.timeOrigin = 1609504200000;\n      // Page has been active for 30min\n      env.sandbox.stub(win.performance, 'now').returns(30 * 60 * 1000);\n      // Move epoch time to 2021-01-01T13:00Z\n      clock.tick(1609506000000 - Date.now());\n      top = new AmpDocSingle(win, {\n        visibilityState: 'prerender'\n      });\n      expect(top.getFirstVisibleTime()).to.equal(null);\n      top.overrideVisibilityState('visible');\n      expect(top.getFirstVisibleTime()).to.equal(1609506000000);\n      expect(top.getFirstVisibleTime()).to.equal(Date.now());\n    });","file":"unit/test-ampdoc.js","skipped":false,"dir":"test"},{"name":"should be visible by default","suites":["firstVisibleTime"],"updatePoint":{"line":494,"column":34,"index":18216},"line":494,"code":"  it('should be visible by default', () => {\n    expect(top.getVisibilityState()).to.equal('visible');\n    expect(embedSameWindow.getVisibilityState()).to.equal('visible');\n    expect(embedOtherWindow.getVisibilityState()).to.equal('visible');\n    expect(embedChild.getVisibilityState()).to.equal('visible');\n    expect(top.isVisible()).to.be.true;\n    expect(embedSameWindow.isVisible()).to.be.true;\n    expect(embedOtherWindow.isVisible()).to.be.true;\n    expect(embedChild.isVisible()).to.be.true;\n    expect(top.getFirstVisibleTime()).to.equal(1);\n    expect(embedSameWindow.getFirstVisibleTime()).to.equal(1);\n    expect(embedOtherWindow.getFirstVisibleTime()).to.equal(2);\n    expect(embedChild.getFirstVisibleTime()).to.equal(2);\n    expect(top.getLastVisibleTime()).to.equal(1);\n    expect(embedSameWindow.getLastVisibleTime()).to.equal(1);\n    expect(embedOtherWindow.getLastVisibleTime()).to.equal(2);\n    expect(embedChild.getLastVisibleTime()).to.equal(2);\n    return Promise.all([top.whenFirstVisible(), embedSameWindow.whenFirstVisible(), embedOtherWindow.whenFirstVisible(), embedChild.whenFirstVisible()]).then(() => {\n      return Promise.all([top.whenNextVisible(), embedSameWindow.whenNextVisible(), embedOtherWindow.whenNextVisible(), embedChild.whenNextVisible()]);\n    });\n  });","file":"unit/test-ampdoc.js","skipped":false,"dir":"test"},{"name":"should override at construction time","suites":["firstVisibleTime"],"updatePoint":{"line":515,"column":42,"index":19525},"line":515,"code":"  it('should override at construction time', () => {\n    top = new AmpDocSingle(win, {\n      visibilityState: 'hidden'\n    });\n    embedSameWindow = new AmpDocFie(win, EMBED_URL, top);\n    embedOtherWindow = new AmpDocFie(childWin, EMBED_URL, top);\n    embedChild = new AmpDocFie(childWin, EMBED_URL, embedOtherWindow);\n    expect(top.getVisibilityState()).to.equal('hidden');\n    expect(embedSameWindow.getVisibilityState()).to.equal('hidden');\n    expect(embedOtherWindow.getVisibilityState()).to.equal('hidden');\n    expect(embedChild.getVisibilityState()).to.equal('hidden');\n    expect(top.isVisible()).to.be.false;\n    expect(embedSameWindow.isVisible()).to.be.false;\n    expect(embedOtherWindow.isVisible()).to.be.false;\n    expect(embedChild.isVisible()).to.be.false;\n    expect(top.getFirstVisibleTime()).to.be.null;\n    expect(embedSameWindow.getFirstVisibleTime()).to.be.null;\n    expect(embedOtherWindow.getFirstVisibleTime()).to.be.null;\n    expect(embedChild.getFirstVisibleTime()).to.be.null;\n    expect(top.getLastVisibleTime()).to.be.null;\n    expect(embedSameWindow.getLastVisibleTime()).to.be.null;\n    expect(embedOtherWindow.getLastVisibleTime()).to.be.null;\n    expect(embedChild.getLastVisibleTime()).to.be.null;\n  });","file":"unit/test-ampdoc.js","skipped":false,"dir":"test"},{"name":"should override at construction time via params","suites":["firstVisibleTime"],"updatePoint":{"line":539,"column":53,"index":20778},"line":539,"code":"  it('should override at construction time via params', () => {\n    top = new AmpDocSingle(win, {\n      params: {\n        'visibilityState': 'hidden'\n      }\n    });\n    embedSameWindow = new AmpDocFie(win, EMBED_URL, top);\n    embedOtherWindow = new AmpDocFie(childWin, EMBED_URL, top);\n    embedChild = new AmpDocFie(childWin, EMBED_URL, embedOtherWindow);\n    expect(top.getVisibilityState()).to.equal('hidden');\n    expect(embedSameWindow.getVisibilityState()).to.equal('hidden');\n    expect(embedOtherWindow.getVisibilityState()).to.equal('hidden');\n    expect(embedChild.getVisibilityState()).to.equal('hidden');\n    expect(top.isVisible()).to.be.false;\n    expect(embedSameWindow.isVisible()).to.be.false;\n    expect(embedOtherWindow.isVisible()).to.be.false;\n    expect(embedChild.isVisible()).to.be.false;\n    expect(top.getFirstVisibleTime()).to.be.null;\n    expect(embedSameWindow.getFirstVisibleTime()).to.be.null;\n    expect(embedOtherWindow.getFirstVisibleTime()).to.be.null;\n    expect(embedChild.getFirstVisibleTime()).to.be.null;\n    expect(top.getLastVisibleTime()).to.be.null;\n    expect(embedSameWindow.getLastVisibleTime()).to.be.null;\n    expect(embedOtherWindow.getLastVisibleTime()).to.be.null;\n    expect(embedChild.getLastVisibleTime()).to.be.null;\n  });","file":"unit/test-ampdoc.js","skipped":false,"dir":"test"},{"name":"should override visibilityState after construction","suites":["firstVisibleTime"],"updatePoint":{"line":565,"column":56,"index":22062},"line":565,"code":"  it('should override visibilityState after construction', () => {\n    top = new AmpDocSingle(win, {\n      visibilityState: 'hidden'\n    });\n    embedSameWindow = new AmpDocFie(win, EMBED_URL, top);\n    embedOtherWindow = new AmpDocFie(childWin, EMBED_URL, top);\n    embedChild = new AmpDocFie(childWin, EMBED_URL, embedOtherWindow);\n    clock.tick(1);\n    top.overrideVisibilityState('visible');\n    expect(top.getVisibilityState()).to.equal('visible');\n    expect(embedSameWindow.getVisibilityState()).to.equal('visible');\n    expect(embedOtherWindow.getVisibilityState()).to.equal('visible');\n    expect(embedChild.getVisibilityState()).to.equal('visible');\n    expect(top.isVisible()).to.be.true;\n    expect(embedSameWindow.isVisible()).to.be.true;\n    expect(embedOtherWindow.isVisible()).to.be.true;\n    expect(embedChild.isVisible()).to.be.true;\n    const epoch = win.performance.timeOrigin + performance.now();\n    const childEpoch = childWin.performance.timeOrigin + performance.now();\n    expect(epoch).to.equal(3);\n    expect(childEpoch).to.equal(4);\n    expect(top.getFirstVisibleTime()).to.equal(epoch);\n    expect(embedSameWindow.getFirstVisibleTime()).to.equal(epoch);\n    expect(embedOtherWindow.getFirstVisibleTime()).to.equal(childEpoch);\n    expect(embedChild.getFirstVisibleTime()).to.equal(childEpoch);\n    expect(top.getLastVisibleTime()).to.equal(epoch);\n    expect(embedSameWindow.getLastVisibleTime()).to.equal(epoch);\n    expect(embedOtherWindow.getLastVisibleTime()).to.equal(childEpoch);\n    expect(embedChild.getLastVisibleTime()).to.equal(childEpoch);\n    return Promise.all([top.whenFirstVisible(), embedSameWindow.whenFirstVisible(), embedOtherWindow.whenFirstVisible(), embedChild.whenFirstVisible()]).then(() => {\n      return Promise.all([top.whenNextVisible(), embedSameWindow.whenNextVisible(), embedOtherWindow.whenNextVisible(), embedChild.whenNextVisible()]);\n    });\n  });","file":"unit/test-ampdoc.js","skipped":false,"dir":"test"},{"name":"should update last visibility after construction","suites":["firstVisibleTime"],"updatePoint":{"line":598,"column":54,"index":23974},"line":598,"code":"  it('should update last visibility after construction', () => {\n    expect(top.getFirstVisibleTime()).to.equal(1);\n    expect(top.getLastVisibleTime()).to.equal(1);\n    clock.tick(1);\n    top.overrideVisibilityState('hidden');\n    expect(top.getVisibilityState()).to.equal('hidden');\n    expect(embedSameWindow.getVisibilityState()).to.equal('hidden');\n    expect(embedOtherWindow.getVisibilityState()).to.equal('hidden');\n    expect(embedChild.getVisibilityState()).to.equal('hidden');\n    expect(top.getFirstVisibleTime()).to.equal(1);\n    expect(top.getLastVisibleTime()).to.equal(1);\n    clock.tick(1);\n    top.overrideVisibilityState('visible');\n    expect(top.getVisibilityState()).to.equal('visible');\n    expect(embedSameWindow.getVisibilityState()).to.equal('visible');\n    expect(embedOtherWindow.getVisibilityState()).to.equal('visible');\n    expect(embedChild.getVisibilityState()).to.equal('visible');\n    const epoch = win.performance.timeOrigin + performance.now();\n    expect(epoch).to.equal(4);\n    expect(top.getFirstVisibleTime()).to.equal(1);\n    expect(top.getLastVisibleTime()).to.equal(epoch);\n  });","file":"unit/test-ampdoc.js","skipped":false,"dir":"test"},{"name":"should update visibility in children","suites":["firstVisibleTime"],"updatePoint":{"line":620,"column":42,"index":25086},"line":620,"code":"  it('should update visibility in children', () => {\n    clock.tick(1);\n    embedOtherWindow.overrideVisibilityState('hidden');\n    expect(top.getVisibilityState()).to.equal('visible');\n    expect(embedSameWindow.getVisibilityState()).to.equal('visible');\n    expect(embedOtherWindow.getVisibilityState()).to.equal('hidden');\n    expect(embedChild.getVisibilityState()).to.equal('hidden');\n    expect(top.getFirstVisibleTime()).to.equal(1);\n    expect(top.getLastVisibleTime()).to.equal(1);\n    expect(embedSameWindow.getFirstVisibleTime()).to.equal(1);\n    expect(embedSameWindow.getLastVisibleTime()).to.equal(1);\n    expect(embedOtherWindow.getFirstVisibleTime()).to.equal(2);\n    expect(embedOtherWindow.getLastVisibleTime()).to.equal(2);\n    expect(embedChild.getFirstVisibleTime()).to.equal(2);\n    expect(embedChild.getLastVisibleTime()).to.equal(2);\n    clock.tick(1);\n    embedOtherWindow.overrideVisibilityState('visible');\n    expect(embedOtherWindow.getVisibilityState()).to.equal('visible');\n    expect(embedChild.getVisibilityState()).to.equal('visible');\n    expect(top.getFirstVisibleTime()).to.equal(1);\n    expect(top.getLastVisibleTime()).to.equal(1);\n    expect(embedSameWindow.getFirstVisibleTime()).to.equal(1);\n    expect(embedSameWindow.getLastVisibleTime()).to.equal(1);\n    expect(embedOtherWindow.getFirstVisibleTime()).to.equal(2);\n    expect(embedOtherWindow.getLastVisibleTime()).to.equal(5);\n    expect(embedChild.getFirstVisibleTime()).to.equal(2);\n    expect(embedChild.getLastVisibleTime()).to.equal(5);\n  });","file":"unit/test-ampdoc.js","skipped":false,"dir":"test"},{"name":"should update when document visibility changes","suites":["firstVisibleTime"],"updatePoint":{"line":648,"column":52,"index":26640},"line":648,"code":"  it('should update when document visibility changes', () => {\n    clock.tick(1);\n    updateDocumentVisibility(doc, 'hidden');\n    expect(top.getVisibilityState()).to.equal('hidden');\n    expect(embedSameWindow.getVisibilityState()).to.equal('hidden');\n    expect(embedOtherWindow.getVisibilityState()).to.equal('hidden');\n    expect(embedChild.getVisibilityState()).to.equal('hidden');\n    clock.tick(1);\n    updateDocumentVisibility(doc, 'visible');\n    expect(top.getVisibilityState()).to.equal('visible');\n    expect(embedSameWindow.getVisibilityState()).to.equal('visible');\n    expect(embedOtherWindow.getVisibilityState()).to.equal('visible');\n    expect(embedChild.getVisibilityState()).to.equal('visible');\n  });","file":"unit/test-ampdoc.js","skipped":false,"dir":"test"},{"name":"should update embed document visibility","suites":["firstVisibleTime"],"updatePoint":{"line":662,"column":45,"index":27355},"line":662,"code":"  it('should update embed document visibility', () => {\n    clock.tick(1);\n    updateDocumentVisibility(childDoc, 'hidden');\n    expect(top.getVisibilityState()).to.equal('visible');\n    expect(embedSameWindow.getVisibilityState()).to.equal('visible');\n    expect(embedOtherWindow.getVisibilityState()).to.equal('hidden');\n    expect(embedChild.getVisibilityState()).to.equal('hidden');\n    clock.tick(1);\n    updateDocumentVisibility(childDoc, 'visible');\n    expect(top.getVisibilityState()).to.equal('visible');\n    expect(embedSameWindow.getVisibilityState()).to.equal('visible');\n    expect(embedOtherWindow.getVisibilityState()).to.equal('visible');\n    expect(embedChild.getVisibilityState()).to.equal('visible');\n  });","file":"unit/test-ampdoc.js","skipped":false,"dir":"test"},{"name":"should override to prerender/inactive/paused","suites":["firstVisibleTime"],"updatePoint":{"line":676,"column":50,"index":28087},"line":676,"code":"  it('should override to prerender/inactive/paused', () => {\n    top.overrideVisibilityState('prerender');\n    expect(top.getVisibilityState()).to.equal('prerender');\n    expect(embedSameWindow.getVisibilityState()).to.equal('prerender');\n    expect(embedOtherWindow.getVisibilityState()).to.equal('prerender');\n    expect(embedChild.getVisibilityState()).to.equal('prerender');\n    top.overrideVisibilityState('inactive');\n    expect(top.getVisibilityState()).to.equal('inactive');\n    expect(embedSameWindow.getVisibilityState()).to.equal('inactive');\n    expect(embedOtherWindow.getVisibilityState()).to.equal('inactive');\n    expect(embedChild.getVisibilityState()).to.equal('inactive');\n    top.overrideVisibilityState('paused');\n    expect(top.getVisibilityState()).to.equal('paused');\n    expect(embedSameWindow.getVisibilityState()).to.equal('paused');\n    expect(embedOtherWindow.getVisibilityState()).to.equal('paused');\n    expect(embedChild.getVisibilityState()).to.equal('paused');\n  });","file":"unit/test-ampdoc.js","skipped":false,"dir":"test"},{"name":"should prioritize document hidden for paused","suites":["firstVisibleTime"],"updatePoint":{"line":693,"column":50,"index":29088},"line":693,"code":"  it('should prioritize document hidden for paused', () => {\n    updateDocumentVisibility(doc, 'hidden');\n    top.overrideVisibilityState('paused');\n    expect(top.getVisibilityState()).to.equal('hidden');\n    expect(embedSameWindow.getVisibilityState()).to.equal('hidden');\n    expect(embedOtherWindow.getVisibilityState()).to.equal('hidden');\n    expect(embedChild.getVisibilityState()).to.equal('hidden');\n  });","file":"unit/test-ampdoc.js","skipped":false,"dir":"test"},{"name":"should be hidden when the browser document is unknown state","suites":["firstVisibleTime"],"updatePoint":{"line":701,"column":65,"index":29518},"line":701,"code":"  it('should be hidden when the browser document is unknown state', () => {\n    updateDocumentVisibility(doc, 'what is this');\n    expect(top.getVisibilityState()).to.equal('hidden');\n    expect(embedSameWindow.getVisibilityState()).to.equal('hidden');\n    expect(embedOtherWindow.getVisibilityState()).to.equal('hidden');\n    expect(embedChild.getVisibilityState()).to.equal('hidden');\n  });","file":"unit/test-ampdoc.js","skipped":false,"dir":"test"},{"name":"should yield undefined for whenVisible methods","suites":["firstVisibleTime"],"updatePoint":{"line":708,"column":52,"index":29898},"line":708,"code":"  it('should yield undefined for whenVisible methods', () => {\n    return Promise.all([top.whenFirstVisible(), top.whenNextVisible()]).then(results => {\n      expect(results).to.deep.equal([undefined, undefined]);\n    });\n  });","file":"unit/test-ampdoc.js","skipped":false,"dir":"test"},{"name":"should return window","suites":["firstVisibleTime"],"updatePoint":{"line":722,"column":26,"index":30287},"line":722,"code":"  it('should return window', () => {\n    expect(ampdoc.win).to.equal(win);\n    expect(ampdoc.getUrl()).to.equal(win.location.href);\n  });","file":"unit/test-ampdoc.js","skipped":false,"dir":"test"},{"name":"should return document as root","suites":["firstVisibleTime"],"updatePoint":{"line":726,"column":36,"index":30435},"line":726,"code":"  it('should return document as root', () => {\n    expect(ampdoc.getRootNode()).to.equal(win.document);\n    expect(ampdoc.getHeadNode()).to.equal(win.document.head);\n    expect(ampdoc.isSingleDoc()).to.be.true;\n  });","file":"unit/test-ampdoc.js","skipped":false,"dir":"test"},{"name":"should find element by id","suites":["firstVisibleTime"],"updatePoint":{"line":731,"column":31,"index":30647},"line":731,"code":"  it('should find element by id', () => {\n    const id = 'ampdoc_test_element_' + Date.now();\n    const element = doc.createElement('div');\n    element.setAttribute('id', id);\n    doc.body.appendChild(element);\n    expect(ampdoc.getElementById(id)).to.equal(element);\n  });","file":"unit/test-ampdoc.js","skipped":false,"dir":"test"},{"name":"should initialize ready state and body immediately","suites":["firstVisibleTime"],"updatePoint":{"line":738,"column":56,"index":30946},"line":738,"code":"  it('should initialize ready state and body immediately', () => {\n    expect(ampdoc.getBody()).to.equal(win.document.body);\n    expect(ampdoc.isBodyAvailable()).to.be.true;\n    expect(ampdoc.isReady()).to.be.true;\n    return Promise.all([ampdoc.waitForBodyOpen(), ampdoc.whenReady()]).then(results => {\n      expect(results[0]).to.equal(win.document.body);\n      expect(ampdoc.getBody()).to.equal(win.document.body);\n      expect(ampdoc.isBodyAvailable()).to.be.true;\n      expect(ampdoc.isReady()).to.be.true;\n    });\n  });","file":"unit/test-ampdoc.js","skipped":false,"dir":"test"},{"name":"should wait for body and ready state","suites":["firstVisibleTime"],"updatePoint":{"line":749,"column":42,"index":31458},"line":749,"code":"  it('should wait for body and ready state', () => {\n    const doc = {\n      body: null,\n      addEventListener: function () {},\n      removeEventListener: function () {}\n    };\n    const win = {\n      document: doc,\n      performance: env.win.performance\n    };\n    let bodyCallback;\n    env.sandbox.stub(dom, 'waitForBodyOpenPromise').callsFake(() => {\n      return new Promise(resolve => {\n        bodyCallback = resolve;\n      });\n    });\n    let ready = false;\n    env.sandbox.stub(docready, 'isDocumentReady').callsFake(() => {\n      return ready;\n    });\n    let readyCallback;\n    env.sandbox.stub(docready, 'whenDocumentReady').callsFake(() => {\n      return new Promise(resolve => {\n        readyCallback = resolve;\n      });\n    });\n    const ampdoc = new AmpDocSingle(win);\n    expect(ampdoc.isBodyAvailable()).to.be.false;\n    allowConsoleError(() => {\n      expect(() => ampdoc.getBody()).to.throw(/body not available/);\n    });\n    const bodyPromise = ampdoc.waitForBodyOpen();\n    const readyPromise = ampdoc.whenReady();\n    doc.body = {\n      nodeType: 1\n    };\n    bodyCallback();\n    ready = true;\n    readyCallback();\n    expect(ampdoc.isBodyAvailable()).to.be.true;\n    expect(ampdoc.getBody()).to.equal(doc.body);\n    expect(ampdoc.isReady()).to.be.true;\n    return Promise.all([bodyPromise, readyPromise]).then(results => {\n      expect(results[0]).to.equal(doc.body);\n      expect(ampdoc.isBodyAvailable()).to.be.true;\n      expect(ampdoc.getBody()).to.equal(doc.body);\n      expect(ampdoc.isReady()).to.be.true;\n    });\n  });","file":"unit/test-ampdoc.js","skipped":false,"dir":"test"},{"name":"should declare extension","suites":["firstVisibleTime"],"updatePoint":{"line":798,"column":30,"index":32998},"line":798,"code":"  it('should declare extension', () => {\n    expect(ampdoc.declaresExtension('ext1')).to.be.false;\n    expect(ampdoc.declaresExtension('ext1', '0.2')).to.be.false;\n    expect(ampdoc.declaresExtension('ext2')).to.be.false;\n    ampdoc.declareExtension('ext1', '0.2');\n    expect(ampdoc.declaresExtension('ext1')).to.be.true;\n    expect(ampdoc.declaresExtension('ext1', '0.2')).to.be.true;\n    expect(ampdoc.declaresExtension('ext1', '0.1')).to.be.false;\n    expect(ampdoc.declaresExtension('ext2')).to.be.false;\n    ampdoc.declareExtension('ext2', '0.3');\n    expect(ampdoc.declaresExtension('ext1')).to.be.true;\n    expect(ampdoc.declaresExtension('ext2')).to.be.true;\n    expect(ampdoc.declaresExtension('ext2', '0.3')).to.be.true;\n    expect(ampdoc.declaresExtension('ext2', '0.1')).to.be.false;\n  });","file":"unit/test-ampdoc.js","skipped":false,"dir":"test"},{"name":"should ignore duplicate extensions","suites":["firstVisibleTime"],"updatePoint":{"line":813,"column":40,"index":33811},"line":813,"code":"  it('should ignore duplicate extensions', () => {\n    expect(ampdoc.declaresExtension('ext1')).to.be.false;\n    ampdoc.declareExtension('ext1', '0.2');\n    expect(ampdoc.declaresExtension('ext1')).to.be.true;\n    expect(ampdoc.declaresExtension('ext1', '0.2')).to.be.true;\n\n    // Repeat.\n    ampdoc.declareExtension('ext1', '0.2');\n    expect(ampdoc.declaresExtension('ext1')).to.be.true;\n    expect(ampdoc.declaresExtension('ext1', '0.2')).to.be.true;\n\n    // A different version is not allowed.\n    expect(() => ampdoc.declareExtension('ext1', '0.1')).to.throw();\n  });","file":"unit/test-ampdoc.js","skipped":false,"dir":"test"},{"name":"should return window","suites":["firstVisibleTime"],"updatePoint":{"line":842,"column":26,"index":34809},"line":842,"code":"  it('should return window', () => {\n    if (!ampdoc) {\n      return;\n    }\n    expect(ampdoc.win).to.equal(win);\n    expect(ampdoc.isSingleDoc()).to.be.false;\n    expect(ampdoc.getUrl()).to.equal(URL);\n  });","file":"unit/test-ampdoc.js","skipped":false,"dir":"test"},{"name":"should return document as root","suites":["firstVisibleTime"],"updatePoint":{"line":850,"column":36,"index":35028},"line":850,"code":"  it('should return document as root', () => {\n    if (!ampdoc) {\n      return;\n    }\n    expect(ampdoc.getRootNode()).to.equal(shadowRoot);\n    expect(ampdoc.getHeadNode()).to.equal(shadowRoot);\n  });","file":"unit/test-ampdoc.js","skipped":false,"dir":"test"},{"name":"should find element by id","suites":["firstVisibleTime"],"updatePoint":{"line":857,"column":31,"index":35225},"line":857,"code":"  it('should find element by id', () => {\n    if (!ampdoc) {\n      return;\n    }\n    const id = 'ampdoc_test_element_' + Date.now();\n    const element = doc.createElement('div');\n    element.setAttribute('id', id);\n    content.appendChild(element);\n    expect(ampdoc.getElementById(id)).to.equal(element);\n  });","file":"unit/test-ampdoc.js","skipped":false,"dir":"test"},{"name":"should update when body is available","suites":["firstVisibleTime"],"updatePoint":{"line":867,"column":42,"index":35548},"line":867,"code":"  it('should update when body is available', () => {\n    // Body is still expected.\n    expect(ampdoc.isBodyAvailable()).to.be.false;\n    allowConsoleError(() => {\n      expect(() => ampdoc.getBody()).to.throw(/body not available/);\n    });\n    expect(ampdoc.bodyResolver_).to.be.ok;\n\n    // Set body.\n    const bodyPromise = ampdoc.waitForBodyOpen();\n    const body = {\n      nodeType: 1\n    };\n    ampdoc.setBody(body);\n    expect(ampdoc.isBodyAvailable()).to.be.true;\n    expect(ampdoc.getBody()).to.equal(body);\n    expect(ampdoc.bodyResolver_).to.be.undefined;\n    expect(ampdoc.bodyPromise_).to.be.ok;\n    return bodyPromise.then(() => {\n      expect(ampdoc.isBodyAvailable()).to.be.true;\n      expect(ampdoc.getBody()).to.equal(body);\n    });\n  });","file":"unit/test-ampdoc.js","skipped":false,"dir":"test"},{"name":"should only allow one body update","suites":["firstVisibleTime"],"updatePoint":{"line":890,"column":39,"index":36301},"line":890,"code":"  it('should only allow one body update', () => {\n    const body = {\n      nodeType: 1\n    };\n    ampdoc.setBody(body);\n    allowConsoleError(() => {\n      expect(() => {\n        ampdoc.setBody(body);\n      }).to.throw(/Duplicate body/);\n    });\n  });","file":"unit/test-ampdoc.js","skipped":false,"dir":"test"},{"name":"should update when doc is ready","suites":["firstVisibleTime"],"updatePoint":{"line":901,"column":37,"index":36551},"line":901,"code":"  it('should update when doc is ready', () => {\n    // \"Ready\" is still expected.\n    expect(ampdoc.isReady()).to.be.false;\n    expect(ampdoc.readyResolver_).to.be.ok;\n\n    // Set ready.\n    const readyPromise = ampdoc.whenReady();\n    ampdoc.setReady();\n    expect(ampdoc.isReady()).to.be.true;\n    expect(ampdoc.readyResolver_).to.be.undefined;\n    expect(ampdoc.readyPromise_).to.be.ok;\n    return readyPromise.then(() => {\n      expect(ampdoc.isReady()).to.be.true;\n    });\n  });","file":"unit/test-ampdoc.js","skipped":false,"dir":"test"},{"name":"should only allow one ready update","suites":["firstVisibleTime"],"updatePoint":{"line":916,"column":40,"index":37038},"line":916,"code":"  it('should only allow one ready update', () => {\n    ampdoc.setReady();\n    allowConsoleError(() => {\n      expect(() => {\n        ampdoc.setReady();\n      }).to.throw(/Duplicate ready state/);\n    });\n  });","file":"unit/test-ampdoc.js","skipped":false,"dir":"test"},{"name":"should create AmpDocFie","suites":["firstVisibleTime"],"updatePoint":{"line":946,"column":29,"index":37951},"line":946,"code":"  it('should create AmpDocFie', () => {\n    const ampdoc = service.installFieDoc(URL, childWin);\n    expect(ampdoc.win).to.equal(childWin);\n    expect(ampdoc.isSingleDoc()).to.be.false;\n    expect(ampdoc.getUrl()).to.equal(URL);\n    expect(ampdoc.getParent()).to.equal(parent);\n  });","file":"unit/test-ampdoc.js","skipped":false,"dir":"test"},{"name":"should create AmpDocFie with provided signals","suites":["firstVisibleTime"],"updatePoint":{"line":953,"column":51,"index":38257},"line":953,"code":"  it('should create AmpDocFie with provided signals', () => {\n    const signals = new Signals();\n    ampdoc = new AmpDocFie(childWin, URL, parent, {\n      signals\n    });\n    expect(ampdoc.signals()).to.equal(signals);\n  });","file":"unit/test-ampdoc.js","skipped":false,"dir":"test"},{"name":"should return window","suites":["firstVisibleTime"],"updatePoint":{"line":960,"column":26,"index":38457},"line":960,"code":"  it('should return window', () => {\n    expect(ampdoc.win).to.equal(childWin);\n    expect(ampdoc.isSingleDoc()).to.be.false;\n    expect(ampdoc.getUrl()).to.equal(URL);\n    expect(ampdoc.getParent()).to.equal(parent);\n  });","file":"unit/test-ampdoc.js","skipped":false,"dir":"test"},{"name":"should return document as root","suites":["firstVisibleTime"],"updatePoint":{"line":966,"column":36,"index":38691},"line":966,"code":"  it('should return document as root', () => {\n    expect(ampdoc.getRootNode()).to.equal(childWin.document);\n    expect(ampdoc.getHeadNode()).to.equal(childWin.document.head);\n  });","file":"unit/test-ampdoc.js","skipped":false,"dir":"test"},{"name":"should find element by id","suites":["firstVisibleTime"],"updatePoint":{"line":970,"column":31,"index":38868},"line":970,"code":"  it('should find element by id', () => {\n    const id = 'ampdoc_test_element_' + Date.now();\n    const element = doc.createElement('div');\n    element.setAttribute('id', id);\n    childWin.document.body.appendChild(element);\n    expect(ampdoc.getElementById(id)).to.equal(element);\n  });","file":"unit/test-ampdoc.js","skipped":false,"dir":"test"},{"name":"should update when body is available","suites":["firstVisibleTime"],"updatePoint":{"line":977,"column":42,"index":39167},"line":977,"code":"  it('should update when body is available', () => {\n    expect(ampdoc.isBodyAvailable()).to.be.true;\n    expect(ampdoc.getBody()).to.equal(childWin.document.body);\n    return ampdoc.waitForBodyOpen().then(body => {\n      expect(body).to.equal(childWin.document.body);\n    });\n  });","file":"unit/test-ampdoc.js","skipped":false,"dir":"test"},{"name":"should update when doc is ready","suites":["firstVisibleTime"],"updatePoint":{"line":984,"column":37,"index":39445},"line":984,"code":"  it('should update when doc is ready', () => {\n    // \"Ready\" is still expected.\n    expect(ampdoc.isReady()).to.be.false;\n    expect(ampdoc.readyResolver_).to.be.ok;\n\n    // Set ready.\n    const readyPromise = ampdoc.whenReady();\n    ampdoc.setReady();\n    expect(ampdoc.isReady()).to.be.true;\n    expect(ampdoc.readyResolver_).to.be.undefined;\n    expect(ampdoc.readyPromise_).to.be.ok;\n    return readyPromise.then(() => {\n      expect(ampdoc.isReady()).to.be.true;\n    });\n  });","file":"unit/test-ampdoc.js","skipped":false,"dir":"test"},{"name":"should only allow one ready update","suites":["firstVisibleTime"],"updatePoint":{"line":999,"column":40,"index":39932},"line":999,"code":"  it('should only allow one ready update', () => {\n    ampdoc.setReady();\n    allowConsoleError(() => {\n      expect(() => {\n        ampdoc.setReady();\n      }).to.throw(/Duplicate ready state/);\n    });\n  });","file":"unit/test-ampdoc.js","skipped":false,"dir":"test"},{"name":"should delegate update priority to resources","suites":[],"updatePoint":{"line":22,"column":50,"index":878},"line":22,"code":"  it('should delegate update priority to resources', () => {\n    const resources = win.__AMP_SERVICES.resources.obj;\n    customElement.getResources = () => resources;\n    const updateLayoutPriorityStub = env.sandbox.stub(resources, 'updateLayoutPriority');\n    element.updateLayoutPriority(LayoutPriority_Enum.METADATA);\n    expect(updateLayoutPriorityStub).to.be.calledOnce;\n  });","file":"unit/test-base-element.js","skipped":false,"dir":"test"},{"name":"should register action","suites":[],"updatePoint":{"line":29,"column":28,"index":1238},"line":29,"code":"  it('should register action', () => {\n    const handler = () => {};\n    element.registerAction('method1', handler);\n    expect(element.actionMap_['method1']).to.not.be.null;\n  });","file":"unit/test-base-element.js","skipped":false,"dir":"test"},{"name":"should fail execution of unregistered action","suites":[],"updatePoint":{"line":34,"column":50,"index":1441},"line":34,"code":"  it('should fail execution of unregistered action', () => {\n    allowConsoleError(() => {\n      expect(() => {\n        element.executeAction({\n          method: 'method1'\n        }, false);\n      }).to.throw(/Method not found/);\n    });\n  });","file":"unit/test-base-element.js","skipped":false,"dir":"test"},{"name":"`this` context of handler should not be the holder","suites":[],"updatePoint":{"line":43,"column":56,"index":1691},"line":43,"code":"  it('`this` context of handler should not be the holder', () => {\n    const handler = () => {\n      const holder = element.actionMap_['foo'];\n      expect(this).to.not.equal(holder);\n    };\n    element.registerAction('foo', handler);\n    const invocation = {\n      method: 'foo',\n      satisfiesTrust: () => true\n    };\n    element.executeAction(invocation, null, false);\n  });","file":"unit/test-base-element.js","skipped":false,"dir":"test"},{"name":"should execute registered action","suites":[],"updatePoint":{"line":55,"column":38,"index":2052},"line":55,"code":"  it('should execute registered action', () => {\n    const handler = env.sandbox.spy();\n    element.registerAction('method1', handler);\n    const invocation = {\n      method: 'method1',\n      satisfiesTrust: () => true\n    };\n    element.executeAction(invocation, null, false);\n    expect(handler).to.be.calledOnce;\n  });","file":"unit/test-base-element.js","skipped":false,"dir":"test"},{"name":"should execute default method by \"activate\"","suites":[],"updatePoint":{"line":65,"column":49,"index":2385},"line":65,"code":"  it('should execute default method by \"activate\"', () => {\n    const handler = env.sandbox.spy();\n    element.registerDefaultAction(handler);\n    const invocation = {\n      method: DEFAULT_ACTION,\n      satisfiesTrust: () => true\n    };\n    element.executeAction(invocation, null, false);\n    expect(handler).to.be.calledOnce;\n  });","file":"unit/test-base-element.js","skipped":false,"dir":"test"},{"name":"should not allow two default actions","suites":[],"updatePoint":{"line":75,"column":42,"index":2712},"line":75,"code":"  it('should not allow two default actions', () => {\n    const handler = env.sandbox.spy();\n    const anotherHandler = env.sandbox.spy();\n    element.registerDefaultAction(handler);\n    return allowConsoleError(() => {\n      expect(() => {\n        element.registerDefaultAction(anotherHandler);\n      }).to.throw(/Default action \"activate\" already registered./);\n    });\n  });","file":"unit/test-base-element.js","skipped":false,"dir":"test"},{"name":"should check trust before invocation","suites":[],"updatePoint":{"line":85,"column":42,"index":3089},"line":85,"code":"  it('should check trust before invocation', () => {\n    const handler = env.sandbox.spy();\n    const minTrust = 100;\n    element.foo = () => {};\n    element.registerDefaultAction(handler, 'foo', minTrust);\n\n    // Registered action.\n    element.executeAction({\n      method: 'foo',\n      satisfiesTrust: () => false\n    }, null, false);\n    expect(handler).to.not.be.called;\n    element.executeAction({\n      method: 'foo',\n      satisfiesTrust: t => t == minTrust\n    }, null, false);\n    expect(handler).to.be.called;\n\n    // Action 'foo' is invoked by default 'activate' method.\n    element.executeAction({\n      method: 'activate',\n      satisfiesTrust: () => true\n    }, null, false);\n    expect(handler).to.be.called;\n  });","file":"unit/test-base-element.js","skipped":false,"dir":"test"},{"name":"should return correct layoutBox","suites":[],"updatePoint":{"line":110,"column":37,"index":3815},"line":110,"code":"  it('should return correct layoutBox', () => {\n    const resources = win.__AMP_SERVICES.resources.obj;\n    customElement.getResources = () => resources;\n    const resource = new Resource(1, customElement, resources);\n    env.sandbox.stub(resources, 'getResourceForElement').withArgs(customElement).returns(resource);\n    const layoutBox = layoutRectLtwh(0, 50, 100, 200);\n    env.sandbox.stub(resource, 'getLayoutBox').callsFake(() => layoutBox);\n    expect(element.getLayoutBox()).to.eql(layoutBox);\n    expect(customElement.getLayoutBox()).to.eql(layoutBox);\n  });","file":"unit/test-base-element.js","skipped":false,"dir":"test"},{"name":"should return true for inabox experiment renderOutsideViewport","suites":[],"updatePoint":{"line":120,"column":68,"index":4414},"line":120,"code":"  it('should return true for inabox experiment renderOutsideViewport', () => {\n    expect(element.renderOutsideViewport()).to.eql(3);\n    // Should be true with inabox\n    env.win.__AMP_MODE.runtime = 'inabox';\n    expect(element.renderOutsideViewport()).to.be.true;\n  });","file":"unit/test-base-element.js","skipped":false,"dir":"test"},{"name":"forwards single event","suites":["forwardEvents"],"updatePoint":{"line":145,"column":29,"index":5376},"line":145,"code":"    it('forwards single event', () => {\n      element.forwardEvents('event1', target);\n      target.dispatchEvent(event1);\n      target.dispatchEvent(event2);\n      return Promise.all([event1Promise, expect(event2Promise).to.eventually.be.rejectedWith(/timeout/)]);\n    });","file":"unit/test-base-element.js","skipped":false,"dir":"test"},{"name":"forwards multiple events","suites":["forwardEvents"],"updatePoint":{"line":151,"column":32,"index":5653},"line":151,"code":"    it('forwards multiple events', () => {\n      element.forwardEvents(['event1', 'event2'], target);\n      target.dispatchEvent(event1);\n      target.dispatchEvent(event2);\n      return Promise.all([event1Promise, event2Promise]);\n    });","file":"unit/test-base-element.js","skipped":false,"dir":"test"},{"name":"should not replace URL vars if opt_urlReplacement == NONE","suites":["URL replacement"],"updatePoint":{"line":49,"column":65,"index":1388},"line":49,"code":"    it('should not replace URL vars if opt_urlReplacement == NONE', () => {\n      const el = element('https://data.com?x=FOO&y=BAR');\n      return batchFetchJsonFor(ampdoc, el).then(() => {\n        expect(fetchJson).to.be.calledWith('https://data.com?x=FOO&y=BAR');\n        expect(urlReplacements.expandUrlAsync).to.not.be.called;\n        expect(urlReplacements.collectDisallowedVarsSync).to.not.be.called;\n      });\n    });","file":"unit/test-batched-json.js","skipped":false,"dir":"test"},{"name":"should replace all URL vars if opt_urlReplacement == ALL","suites":["URL replacement"],"updatePoint":{"line":67,"column":64,"index":2480},"line":67,"code":"    it('should replace all URL vars if opt_urlReplacement == ALL', () => {\n      const el = element('https://data.com?x=FOO&y=BAR');\n      urlReplacements.expandUrlAsync.withArgs('https://data.com?x=FOO&y=BAR').returns(Promise.resolve('https://data.com?x=abc&y=BAR'));\n      const userError = env.sandbox.stub(user(), 'error');\n      const all = UrlReplacementPolicy_Enum.ALL;\n      return batchFetchJsonFor(ampdoc, el, {\n        urlReplacement: all\n      }).then(() => {\n        expect(fetchJson).to.be.calledWith('https://data.com?x=abc&y=BAR');\n        expect(urlReplacements.collectDisallowedVarsSync).to.not.be.called;\n        expect(userError).to.not.be.called;\n      });\n    });","file":"unit/test-batched-json.js","skipped":false,"dir":"test"},{"name":"should fetch a generic request once for identical URLs","suites":[],"updatePoint":{"line":36,"column":62,"index":976},"line":36,"code":"    it('should fetch a generic request once for identical URLs', () => {\n      return Promise.all([xhr.fetch('/get?k=v1').then(response => response.text()), xhr.fetch('/get?k=v1').then(response => response.text()), xhr.fetch('/get?k=v1').then(response => response.text())]).then(results => {\n        expect(fetchStub).to.be.calledOnce;\n        expect(results[0]).to.equal(TEST_RESPONSE);\n        expect(results[1]).to.equal(TEST_RESPONSE);\n        expect(results[2]).to.equal(TEST_RESPONSE);\n      });\n    });","file":"unit/test-batched-xhr.js","skipped":false,"dir":"test"},{"name":"should fetch once for a relative and absolute URL that point to the same location.","suites":[],"updatePoint":{"line":44,"column":90,"index":1514},"line":44,"code":"    it('should fetch once for a relative and absolute URL that point to the same location.', async () => {\n      const originUrl = 'https://testwebsite.com';\n      const cdnUrl = 'https://testwebsite-com.cdn.ampproject.org/v/s/testwebsite.com/hello-world';\n      env.win.location.href = cdnUrl;\n      await Promise.all([xhr.fetch(`${originUrl}/get?k=v1`), xhr.fetch('/get?k=v1')]);\n      expect(fetchStub).to.be.calledOnce;\n    });","file":"unit/test-batched-xhr.js","skipped":false,"dir":"test"},{"name":"should cache the same as the convenience methods","suites":[],"updatePoint":{"line":60,"column":56,"index":2617},"line":60,"code":"    it('should cache the same as the convenience methods', () => {\n      return Promise.all([xhr.fetch('/get?k=v1', jsonInit).then(response => response.json()), xhr.fetchJson('/get?k=v1').then(res => res.json())]).then(results => {\n        expect(fetchStub).to.be.calledOnce;\n        expect(results[0]).to.jsonEqual(TEST_OBJECT);\n        expect(results[1]).to.jsonEqual(TEST_OBJECT);\n      });\n    });","file":"unit/test-batched-xhr.js","skipped":false,"dir":"test"},{"name":"should fetch JSON GET requests once for identical URLs","suites":[],"updatePoint":{"line":91,"column":62,"index":3605},"line":91,"code":"    it('should fetch JSON GET requests once for identical URLs', () => {\n      return Promise.all([xhr.fetchJson('/get?k=v1').then(res => res.json()), xhr.fetchJson('/get?k=v1').then(res => res.json())]).then(results => {\n        expect(fetchStub).to.be.calledOnce;\n        expect(results[0]).to.jsonEqual(TEST_OBJECT);\n        expect(results[1]).to.jsonEqual(TEST_OBJECT);\n      });\n    });","file":"unit/test-batched-xhr.js","skipped":false,"dir":"test"},{"name":"should not be affected by fragments passed in the URL","suites":[],"updatePoint":{"line":98,"column":61,"index":3996},"line":98,"code":"    it('should not be affected by fragments passed in the URL', () => {\n      return Promise.all([xhr.fetchJson('/get?k=v1#a.b[0].c').then(res => res.json()), xhr.fetchJson('/get?k=v1#a.b[1].d').then(res => res.json())]).then(results => {\n        expect(fetchStub).to.be.calledOnce;\n        expect(results[0]).to.jsonEqual(TEST_OBJECT);\n        expect(results[1]).to.jsonEqual(TEST_OBJECT);\n      });\n    });","file":"unit/test-batched-xhr.js","skipped":false,"dir":"test"},{"name":"should not cache for POST requests","suites":[],"updatePoint":{"line":105,"column":42,"index":4386},"line":105,"code":"    it('should not cache for POST requests', () => {\n      return Promise.all([xhr.fetchJson('/get?k=v1', {\n        method: 'POST',\n        body: {}\n      }), xhr.fetchJson('/get?k=v1', {\n        method: 'POST',\n        body: {}\n      })]).then(() => {\n        expect(fetchStub).to.be.calledTwice;\n      });\n    });","file":"unit/test-batched-xhr.js","skipped":false,"dir":"test"},{"name":"should fetch text GET requests once for identical URLs","suites":[],"updatePoint":{"line":125,"column":62,"index":5051},"line":125,"code":"    it('should fetch text GET requests once for identical URLs', () => {\n      return Promise.all([xhr.fetchText('/get?k=v1').then(res => res.text()), xhr.fetchText('/get?k=v1').then(res => res.text())]).then(results => {\n        expect(fetchStub).to.be.calledOnce;\n        expect(results[0]).to.equal(TEST_RESPONSE);\n        expect(results[1]).to.equal(TEST_RESPONSE);\n      });\n    });","file":"unit/test-batched-xhr.js","skipped":false,"dir":"test"},{"name":"should not cache for POST requests","suites":[],"updatePoint":{"line":132,"column":42,"index":5419},"line":132,"code":"    it('should not cache for POST requests', () => {\n      return Promise.all([xhr.fetchText('/get?k=v1', {\n        method: 'POST',\n        body: {}\n      }), xhr.fetchText('/get?k=v1', {\n        method: 'POST',\n        body: {}\n      })]).then(() => {\n        expect(fetchStub).to.be.calledTwice;\n      });\n    });","file":"unit/test-batched-xhr.js","skipped":false,"dir":"test"},{"name":"should return true if page is in CCT and is served by a proxy","suites":["isSupported"],"updatePoint":{"line":27,"column":69,"index":946},"line":27,"code":"    it('should return true if page is in CCT and is served by a proxy', () => {\n      viewerMock.isCctEmbedded.returns(true);\n      viewerMock.isProxyOrigin.returns(true);\n      return expect(api.isSupported()).to.be.true;\n    });","file":"unit/test-cache-cid-api.js","skipped":false,"dir":"test"},{"name":"should return false if page is not embedded in CCT","suites":["isSupported"],"updatePoint":{"line":32,"column":58,"index":1166},"line":32,"code":"    it('should return false if page is not embedded in CCT', () => {\n      viewerMock.isCctEmbedded.returns(false);\n      viewerMock.isProxyOrigin.returns(true);\n      return expect(api.isSupported()).to.be.false;\n    });","file":"unit/test-cache-cid-api.js","skipped":false,"dir":"test"},{"name":"should return false if page is not served by a proxy","suites":["isSupported"],"updatePoint":{"line":37,"column":60,"index":1390},"line":37,"code":"    it('should return false if page is not served by a proxy', () => {\n      viewerMock.isCctEmbedded.returns(true);\n      viewerMock.isProxyOrigin.returns(false);\n      return expect(api.isSupported()).to.be.false;\n    });","file":"unit/test-cache-cid-api.js","skipped":false,"dir":"test"},{"name":"should use client ID API from api if everything great","suites":["getScopedCid"],"updatePoint":{"line":48,"column":61,"index":1779},"line":48,"code":"    it('should use client ID API from api if everything great', () => {\n      fetchJsonStub.returns(Promise.resolve({\n        json: () => {\n          return Promise.resolve({\n            publisherClientId: 'publisher-client-id-from-cache'\n          });\n        }\n      }));\n      return api.getScopedCid('AMP_ECID_GOOGLE').then(cid => {\n        expect(cid).to.equal('amp-mJW1ZjoviqBJydzRI8KnitWEpqyhQqDegGCl' + 'rvvfkCif_N9oYLdZEB976uJDhYgL');\n        expect(fetchJsonStub).to.be.calledWith('https://ampcid.google.com/v1/cache:getClientId?key=AIzaSyDKtqGxnoeIqVM33Uf7hRSa3GJxuzR7mLc', {\n          method: 'POST',\n          ampCors: false,\n          credentials: 'include',\n          mode: 'cors',\n          body: {\n            publisherOrigin: 'about:srcdoc'\n          }\n        });\n      });\n    });","file":"unit/test-cache-cid-api.js","skipped":false,"dir":"test"},{"name":"should return null if opted out","suites":["getScopedCid"],"updatePoint":{"line":69,"column":39,"index":2558},"line":69,"code":"    it('should return null if opted out', () => {\n      fetchJsonStub.returns(Promise.resolve({\n        json: () => {\n          return Promise.resolve({\n            optOut: true\n          });\n        }\n      }));\n      return api.getScopedCid('AMP_ECID_GOOGLE').then(cid => {\n        expect(cid).to.equal(null);\n        expect(fetchJsonStub).to.be.calledWith('https://ampcid.google.com/v1/cache:getClientId?key=AIzaSyDKtqGxnoeIqVM33Uf7hRSa3GJxuzR7mLc', {\n          method: 'POST',\n          ampCors: false,\n          credentials: 'include',\n          mode: 'cors',\n          body: {\n            publisherOrigin: 'about:srcdoc'\n          }\n        });\n      });\n    });","file":"unit/test-cache-cid-api.js","skipped":false,"dir":"test"},{"name":"should try alternative url if API provides","suites":["getScopedCid"],"updatePoint":{"line":90,"column":50,"index":3238},"line":90,"code":"    it('should try alternative url if API provides', () => {\n      fetchJsonStub.onCall(0).returns(Promise.resolve({\n        json: () => {\n          return Promise.resolve({\n            alternateUrl: 'https://ampcid.google.co.uk/v1/cache:getClientId'\n          });\n        }\n      }));\n      fetchJsonStub.onCall(1).returns(Promise.resolve({\n        json: () => {\n          return Promise.resolve({\n            publisherClientId: 'publisher-client-id-from-cache'\n          });\n        }\n      }));\n      return api.getScopedCid('AMP_ECID_GOOGLE').then(cid => {\n        expect(cid).to.equal('amp-mJW1ZjoviqBJydzRI8KnitWEpqyhQqDegGCl' + 'rvvfkCif_N9oYLdZEB976uJDhYgL');\n        expect(fetchJsonStub.getCall(1).args[0]).to.equal('https://ampcid.google.co.uk/v1/cache:getClientId?key=AIzaSyDKtqGxnoeIqVM33Uf7hRSa3GJxuzR7mLc');\n      });\n    });","file":"unit/test-cache-cid-api.js","skipped":false,"dir":"test"},{"name":"should fail if the request times out","suites":["getScopedCid"],"updatePoint":{"line":110,"column":44,"index":4073},"line":110,"code":"    it('should fail if the request times out', () => {\n      expectAsyncConsoleError(/fetchCidTimeout​​​/);\n      fetchJsonStub.callsFake(() => {\n        return new Promise((resolve, unused) => {\n          clock.setTimeout(resolve, 35000, {\n            json: () => {\n              return Promise.resolve({\n                publisherClientId: 'publisher-client-id-from-cache'\n              });\n            }\n          });\n        });\n      });\n      const response = api.getScopedCid('AMP_ECID_GOOGLE').then(cid => {\n        expect(cid).to.equal(null);\n        expect(fetchJsonStub).to.be.calledWith('https://ampcid.google.com/v1/cache:getClientId?key=AIzaSyDKtqGxnoeIqVM33Uf7hRSa3GJxuzR7mLc', {\n          method: 'POST',\n          ampCors: false,\n          credentials: 'include',\n          mode: 'cors',\n          body: {\n            publisherOrigin: 'about:srcdoc'\n          }\n        });\n      }).catch(() => {});\n      clock.tick(30000);\n      return response;\n    });","file":"unit/test-cache-cid-api.js","skipped":false,"dir":"test"},{"name":"should have all lowercase keys","suites":[],"updatePoint":{"line":7,"column":36,"index":335},"line":7,"code":"  it('should have all lowercase keys', () => Object.keys(RTC_VENDORS).forEach(key => expect(key).to.equal(key.toLowerCase())));","file":"unit/test-callout-vendors.js","skipped":false,"dir":"test"},{"name":"should all use https","suites":[],"updatePoint":{"line":8,"column":26,"index":453},"line":8,"code":"  it('should all use https', () => Object.keys(RTC_VENDORS).forEach(key => {\n    expect(isSecureUrlDeprecated(RTC_VENDORS[key].url)).to.be.true;\n    expect(!RTC_VENDORS[key].errorReportingUrl || isSecureUrlDeprecated(RTC_VENDORS[key].errorReportingUrl)).to.be.true;\n  }));","file":"unit/test-callout-vendors.js","skipped":false,"dir":"test"},{"name":"should execute a chunk","suites":[],"updatePoint":{"line":29,"column":30,"index":1024},"line":29,"code":"    it('should execute a chunk', done => {\n      startupChunk(fakeWin.document, unusedIdleDeadline => {\n        done();\n      });\n    });","file":"unit/test-chunk.js","skipped":false,"dir":"test"},{"name":"should execute chunks","suites":[],"updatePoint":{"line":34,"column":29,"index":1161},"line":34,"code":"    it('should execute chunks', () => {\n      let count = 0;\n      let progress = '';\n      return new Promise(resolve => {\n        function complete(str) {\n          return function (unusedIdleDeadline) {\n            progress += str;\n            if (++count == 6) {\n              resolve();\n            }\n          };\n        }\n        startupChunk(fakeWin.document, complete('a'));\n        startupChunk(fakeWin.document, complete('b'));\n        startupChunk(fakeWin.document, function () {\n          complete('c')();\n          startupChunk(fakeWin.document, function () {\n            complete('d')();\n            startupChunk(fakeWin.document, complete('e'));\n            startupChunk(fakeWin.document, complete('f'));\n          });\n        });\n      }).then(() => {\n        expect(progress).to.equal('abcdef');\n      });\n    });","file":"unit/test-chunk.js","skipped":false,"dir":"test"},{"name":"should support nested micro tasks in chunks","suites":[],"updatePoint":{"line":70,"column":51,"index":2297},"line":70,"code":"    it('should support nested micro tasks in chunks', done => {\n      let progress = '';\n      startupChunk(env.win.document, () => {\n        progress += '1';\n        Promise.resolve().then(() => progress += 2).then(() => progress += 3).then(() => progress += 4).then(() => progress += 5);\n      });\n      startupChunk(env.win.document, () => {\n        expect(progress).to.equal('12345');\n        done();\n      });\n    });","file":"unit/test-chunk.js","skipped":false,"dir":"test"},{"name":"should execute a chunk with an ampdoc","suites":["visible"],"updatePoint":{"line":121,"column":47,"index":3815},"line":121,"code":"      it('should execute a chunk with an ampdoc', done => {\n        startupChunk(env.ampdoc, unusedIdleDeadline => {\n          done();\n        });\n      });","file":"unit/test-chunk.js","skipped":false,"dir":"test"},{"name":"should proceed on error and rethrowAsync","suites":["error handling"],"updatePoint":{"line":148,"column":50,"index":4576},"line":148,"code":"      it('should proceed on error and rethrowAsync', d => {\n        startupChunk(fakeWin.document, () => {\n          throw new Error('test async');\n        });\n        startupChunk(fakeWin.document, () => {\n          done = d;\n        });\n      });","file":"unit/test-chunk.js","skipped":false,"dir":"test"},{"name":"should not break out of microtask loop when body is invisible","suites":["invisible to visible after a while"],"updatePoint":{"line":335,"column":69,"index":10280},"line":335,"code":"    it('should not break out of microtask loop when body is invisible', done => {\n      startupChunk(env.win.document, complete('init', true));\n      startupChunk(env.win.document, complete('a', true));\n      startupChunk(env.win.document, complete('b', true));\n      startupChunk(env.win.document, () => {\n        expect(progress).to.equal('initab');\n        done();\n      });\n    });","file":"unit/test-chunk.js","skipped":false,"dir":"test"},{"name":"should execute chunks after long task in a macro task","suites":["invisible to visible after a while"],"updatePoint":{"line":344,"column":61,"index":10658},"line":344,"code":"    it('should execute chunks after long task in a macro task', done => {\n      startupChunk(env.win.document, complete('1', true));\n      startupChunk(env.win.document, complete('2', false));\n      startupChunk(env.win.document, function () {\n        complete('3', false)();\n        expect(progress).to.equal('123');\n        expect(postMessageCalls).to.equal(0);\n      }, /* make body visible */true);\n      startupChunk(env.win.document, () => {\n        expect(postMessageCalls).to.equal(1);\n        expect(progress).to.equal('123');\n        complete('4', false)();\n      });\n      startupChunk(env.win.document, () => {\n        expect(postMessageCalls).to.equal(1);\n        expect(progress).to.equal('1234');\n      });\n      startupChunk(env.win.document, complete('5', true));\n      startupChunk(env.win.document, () => {\n        expect(postMessageCalls).to.equal(2);\n        expect(progress).to.equal('12345');\n        done();\n      });\n    });","file":"unit/test-chunk.js","skipped":false,"dir":"test"},{"name":"should not issue a macro task after having been idle","suites":["invisible to visible after a while"],"updatePoint":{"line":368,"column":60,"index":11607},"line":368,"code":"    it('should not issue a macro task after having been idle', done => {\n      (async function () {\n        startupChunk(env.win.document, complete('1', false), /* make body visible */true);\n        // Unwind the promise queue so that subsequent invocations\n        // are scheduled into an empty task queue.\n        for (let i = 0; i < 100; i++) {\n          await Promise.resolve();\n        }\n        expect(progress).to.equal('1');\n        complete('2', true)();\n        startupChunk(env.win.document, () => {\n          expect(postMessageCalls).to.equal(0);\n          expect(progress).to.equal('12');\n          done();\n        });\n      })();\n    });","file":"unit/test-chunk.js","skipped":false,"dir":"test"},{"name":"should not break out of microtask loop when body is invisible","suites":["invisible to visible after a while"],"updatePoint":{"line":437,"column":69,"index":13814},"line":437,"code":"    it('should not break out of microtask loop when body is invisible', done => {\n      startupChunk(env.win.document, complete('init', true));\n      startupChunk(env.win.document, complete('a', true));\n      startupChunk(env.win.document, complete('b', true));\n      startupChunk(env.win.document, () => {\n        expect(progress).to.equal('initab');\n        done();\n      });\n    });","file":"unit/test-chunk.js","skipped":false,"dir":"test"},{"name":"should execute chunks after pending input in a macro task","suites":["invisible to visible after a while"],"updatePoint":{"line":446,"column":65,"index":14196},"line":446,"code":"    it('should execute chunks after pending input in a macro task', done => {\n      startupChunk(env.win.document, complete('1', true));\n      startupChunk(env.win.document, complete('2', false));\n      startupChunk(env.win.document, function () {\n        complete('3', false)();\n        expect(progress).to.equal('123');\n        expect(postMessageCalls).to.equal(0);\n      }, /* make body visible */true);\n      startupChunk(env.win.document, () => {\n        expect(postMessageCalls).to.equal(1);\n        expect(progress).to.equal('123');\n        complete('4', false)();\n      });\n      startupChunk(env.win.document, () => {\n        expect(postMessageCalls).to.equal(1);\n        expect(progress).to.equal('1234');\n      });\n      startupChunk(env.win.document, complete('5', true));\n      startupChunk(env.win.document, () => {\n        expect(postMessageCalls).to.equal(2);\n        expect(progress).to.equal('12345');\n        done();\n      });\n    });","file":"unit/test-chunk.js","skipped":false,"dir":"test"},{"name":"should fire for sufficient remaining time","suites":["invisible to visible after a while"],"updatePoint":{"line":498,"column":47,"index":15723},"line":498,"code":"  it('should fire for sufficient remaining time', () => {\n    onIdle(win, 66, 1000, markCalled);\n    expect(calls).to.have.length(1);\n    expect(callbackCalled).to.be.false;\n    expect(calls[0].options.timeout).to.equal(1000);\n    calls[0].invoke(66);\n    expect(callbackCalled).to.be.true;\n    expect(calls).to.have.length(1);\n  });","file":"unit/test-chunk.js","skipped":false,"dir":"test"},{"name":"should try again with not enough time","suites":["invisible to visible after a while"],"updatePoint":{"line":507,"column":43,"index":16053},"line":507,"code":"  it('should try again with not enough time', () => {\n    onIdle(win, 66, 1000, markCalled);\n    expect(calls).to.have.length(1);\n    expect(callbackCalled).to.be.false;\n    expect(calls[0].options.timeout).to.equal(1000);\n    clock.tick(100);\n    calls[0].invoke(65);\n    expect(callbackCalled).to.be.false;\n    expect(calls).to.have.length(2);\n    expect(calls[1].options.timeout).to.equal(900);\n    calls[1].invoke(66);\n    expect(callbackCalled).to.be.true;\n    expect(calls).to.have.length(2);\n  });","file":"unit/test-chunk.js","skipped":false,"dir":"test"},{"name":"should try again with not enough time (2 recursions)","suites":["invisible to visible after a while"],"updatePoint":{"line":521,"column":58,"index":16573},"line":521,"code":"  it('should try again with not enough time (2 recursions)', () => {\n    onIdle(win, 66, 1000, markCalled);\n    expect(calls).to.have.length(1);\n    expect(callbackCalled).to.be.false;\n    expect(calls[0].options.timeout).to.equal(1000);\n    clock.tick(100);\n    calls[0].invoke(65);\n    expect(callbackCalled).to.be.false;\n    expect(calls).to.have.length(2);\n    expect(calls[1].options.timeout).to.equal(900);\n    clock.tick(50);\n    calls[1].invoke(0);\n    expect(callbackCalled).to.be.false;\n    expect(calls).to.have.length(3);\n    expect(calls[2].options.timeout).to.equal(850);\n    calls[2].invoke(66);\n    expect(callbackCalled).to.be.true;\n    expect(calls).to.have.length(3);\n  });","file":"unit/test-chunk.js","skipped":false,"dir":"test"},{"name":"should timeout when callback is called after timeout","suites":["invisible to visible after a while"],"updatePoint":{"line":540,"column":58,"index":17266},"line":540,"code":"  it('should timeout when callback is called after timeout', () => {\n    onIdle(win, 66, 1000, markCalled);\n    expect(calls).to.have.length(1);\n    expect(callbackCalled).to.be.false;\n    expect(calls[0].options.timeout).to.equal(1000);\n    clock.tick(1000);\n    // Not enough time remaining but timed out via time.\n    calls[0].invoke(1);\n    expect(callbackCalled).to.be.true;\n    expect(calls).to.have.length(1);\n  });","file":"unit/test-chunk.js","skipped":false,"dir":"test"},{"name":"should timeout when callback is called with didTimeout","suites":["invisible to visible after a while"],"updatePoint":{"line":551,"column":60,"index":17691},"line":551,"code":"  it('should timeout when callback is called with didTimeout', () => {\n    onIdle(win, 66, 1000, markCalled);\n    expect(calls).to.have.length(1);\n    expect(callbackCalled).to.be.false;\n    expect(calls[0].options.timeout).to.equal(1000);\n    // Not enough time remaining but timed out via didTimeout.\n    calls[0].invoke(1, /* didTimeout */true);\n    expect(callbackCalled).to.be.true;\n    expect(calls).to.have.length(1);\n  });","file":"unit/test-chunk.js","skipped":false,"dir":"test"},{"name":"should get CID when no AMP_TOKEN exists","suites":["getScopedCid"],"updatePoint":{"line":28,"column":47,"index":875},"line":28,"code":"    it('should get CID when no AMP_TOKEN exists', () => {\n      fetchJsonStub.returns(Promise.resolve({\n        json: () => {\n          return {\n            clientId: 'amp-12345',\n            securityToken: 'amp-token-123'\n          };\n        }\n      }));\n      return api.getScopedCid('api-key', 'scope-a').then(cid => {\n        expect(cid).to.equal('amp-12345');\n        expect(getCookie(win, 'AMP_TOKEN')).to.equal('amp-token-123');\n        expect(fetchJsonStub).to.be.calledWith('https://ampcid.google.com/v1/publisher:getClientId?key=api-key', {\n          method: 'POST',\n          ampCors: false,\n          credentials: 'include',\n          mode: 'cors',\n          body: {\n            originScope: 'scope-a',\n            canonicalOrigin: 'http://localhost:9876'\n          }\n        });\n      });\n    });","file":"unit/test-cid-api.js","skipped":false,"dir":"test"},{"name":"should get CID when AMP_TOKEN exists","suites":["getScopedCid"],"updatePoint":{"line":52,"column":44,"index":1683},"line":52,"code":"    it('should get CID when AMP_TOKEN exists', () => {\n      persistCookie('AMP_TOKEN', 'amp-token-123');\n      fetchJsonStub.returns(Promise.resolve({\n        json: () => {\n          return {\n            clientId: 'amp-12345'\n          };\n        }\n      }));\n      return api.getScopedCid('api-key', 'scope-a').then(cid => {\n        expect(cid).to.equal('amp-12345');\n        expect(getCookie(win, 'AMP_TOKEN')).to.equal('amp-token-123');\n        expect(fetchJsonStub).to.be.calledWith('https://ampcid.google.com/v1/publisher:getClientId?key=api-key', {\n          method: 'POST',\n          ampCors: false,\n          credentials: 'include',\n          mode: 'cors',\n          body: {\n            originScope: 'scope-a',\n            securityToken: 'amp-token-123',\n            canonicalOrigin: 'http://localhost:9876'\n          }\n        });\n      });\n    });","file":"unit/test-cid-api.js","skipped":false,"dir":"test"},{"name":"should return $OPT_OUT if API returns optOut","suites":["getScopedCid"],"updatePoint":{"line":78,"column":50,"index":2554},"line":78,"code":"  it('should return $OPT_OUT if API returns optOut', () => {\n    fetchJsonStub.returns(Promise.resolve({\n      json: () => {\n        return {\n          optOut: true\n        };\n      }\n    }));\n    return api.getScopedCid('api-key', 'scope-a').then(cid => {\n      expect(cid).to.equal('$OPT_OUT');\n      expect(getCookie(win, 'AMP_TOKEN')).to.equal('$OPT_OUT');\n    });\n  });","file":"unit/test-cid-api.js","skipped":false,"dir":"test"},{"name":"should return null if API returns no CID","suites":["getScopedCid"],"updatePoint":{"line":91,"column":46,"index":2925},"line":91,"code":"  it('should return null if API returns no CID', () => {\n    fetchJsonStub.returns(Promise.resolve({\n      json: () => {\n        return {};\n      }\n    }));\n    return api.getScopedCid('api-key', 'scope-a').then(cid => {\n      expect(cid).to.be.null;\n      expect(getCookie(win, 'AMP_TOKEN')).to.equal('$NOT_FOUND');\n    });\n  });","file":"unit/test-cid-api.js","skipped":false,"dir":"test"},{"name":"should try alternative url if API provides","suites":["getScopedCid"],"updatePoint":{"line":102,"column":48,"index":3258},"line":102,"code":"  it('should try alternative url if API provides', () => {\n    fetchJsonStub.onCall(0).returns(Promise.resolve({\n      json: () => {\n        return {\n          alternateUrl: 'https://ampcid.google.co.uk/v1/publisher:getClientId'\n        };\n      }\n    }));\n    fetchJsonStub.onCall(1).returns(Promise.resolve({\n      json: () => {\n        return {\n          clientId: 'amp-alt-12345'\n        };\n      }\n    }));\n    return api.getScopedCid('api-key', 'scope-a').then(cid => {\n      expect(cid).to.equal('amp-alt-12345');\n      expect(fetchJsonStub.getCall(1).args[0]).to.equal('https://ampcid.google.co.uk/v1/publisher:getClientId?key=api-key');\n    });\n  });","file":"unit/test-cid-api.js","skipped":false,"dir":"test"},{"name":"should return null if API rejects","suites":["getScopedCid"],"updatePoint":{"line":122,"column":39,"index":3909},"line":122,"code":"  it('should return null if API rejects', () => {\n    expectAsyncConsoleError(/fetch failed/);\n    fetchJsonStub.rejects('fetch failed');\n    return api.getScopedCid('api-key', 'scope-a').then(cid => {\n      expect(cid).to.be.null;\n      expect(getCookie(win, 'AMP_TOKEN')).to.equal('$ERROR');\n    }).catch(() => {}); // Prevent the rejection from being thrown.\n  });","file":"unit/test-cid-api.js","skipped":false,"dir":"test"},{"name":"should return null if AMP_TOKEN=$ERROR","suites":["getScopedCid"],"updatePoint":{"line":131,"column":44,"index":4283},"line":131,"code":"  it('should return null if AMP_TOKEN=$ERROR', () => {\n    persistCookie('AMP_TOKEN', '$ERROR');\n    return api.getScopedCid('api-key', 'scope-a').then(cid => {\n      expect(cid).to.be.null;\n      expect(getCookie(win, 'AMP_TOKEN')).to.equal('$ERROR');\n    });\n  });","file":"unit/test-cid-api.js","skipped":false,"dir":"test"},{"name":"should return null if AMP_TOKEN=$NOT_FOUND","suites":["getScopedCid"],"updatePoint":{"line":138,"column":48,"index":4554},"line":138,"code":"  it('should return null if AMP_TOKEN=$NOT_FOUND', () => {\n    persistCookie('AMP_TOKEN', '$NOT_FOUND');\n    const windowInterface = mockWindowInterface(env.sandbox);\n    windowInterface.getDocumentReferrer.returns('https://example.org/');\n    return api.getScopedCid('api-key', 'scope-a').then(cid => {\n      expect(cid).to.be.null;\n      expect(getCookie(win, 'AMP_TOKEN')).to.equal('$NOT_FOUND');\n    });\n  });","file":"unit/test-cid-api.js","skipped":false,"dir":"test"},{"name":"should return $OPT_OUT if AMP_TOKEN=$OPT_OUT ","suites":["getScopedCid"],"updatePoint":{"line":164,"column":51,"index":5639},"line":164,"code":"  it('should return $OPT_OUT if AMP_TOKEN=$OPT_OUT ', () => {\n    persistCookie('AMP_TOKEN', '$OPT_OUT');\n    return api.getScopedCid('api-key', 'scope-a').then(cid => {\n      expect(cid).to.equal('$OPT_OUT');\n      expect(getCookie(win, 'AMP_TOKEN')).to.equal('$OPT_OUT');\n    });\n  });","file":"unit/test-cid-api.js","skipped":false,"dir":"test"},{"name":"should not send another request if one is already out","suites":["getScopedCid"],"updatePoint":{"line":171,"column":59,"index":5935},"line":171,"code":"  it('should not send another request if one is already out', () => {\n    let responseResolver;\n    fetchJsonStub.returns(new Promise(res => {\n      responseResolver = res;\n    }));\n    const promise1 = api.getScopedCid('api-key', 'scope-a');\n    const promise2 = api.getScopedCid('api-key', 'scope-a');\n    responseResolver({\n      json: () => {\n        return {\n          clientId: 'amp-12345'\n        };\n      }\n    });\n    return Promise.all([promise1, promise2]).then(cids => {\n      expect(cids[0]).to.equal('amp-12345');\n      expect(cids[1]).to.equal('amp-12345');\n      expect(fetchJsonStub).to.be.calledOnce;\n    });\n  });","file":"unit/test-cid-api.js","skipped":false,"dir":"test"},{"name":"should work when 2 scopes are requested same time","suites":["getScopedCid"],"updatePoint":{"line":191,"column":55,"index":6564},"line":191,"code":"  it('should work when 2 scopes are requested same time', () => {\n    let responseResolverA;\n    let responseResolverB;\n    fetchJsonStub.onCall(0).returns(new Promise(res => {\n      responseResolverA = res;\n    }));\n    fetchJsonStub.onCall(1).returns(new Promise(res => {\n      responseResolverB = res;\n    }));\n    const promiseA = api.getScopedCid('api-key', 'scope-a');\n    const promiseB = api.getScopedCid('api-key', 'scope-b');\n    responseResolverA({\n      json: () => {\n        return {\n          clientId: 'amp-12345-a',\n          securityToken: 'amp-token-123'\n        };\n      }\n    });\n    responseResolverB({\n      json: () => {\n        return {\n          clientId: 'amp-12345-b'\n        };\n      }\n    });\n    return Promise.all([promiseA, promiseB]).then(cids => {\n      expect(cids[0]).to.equal('amp-12345-a');\n      expect(cids[1]).to.equal('amp-12345-b');\n    });\n  });","file":"unit/test-cid-api.js","skipped":false,"dir":"test"},{"name":"should hash domain name and scope","suites":["with real crypto"],"updatePoint":{"line":131,"column":41,"index":4898},"line":131,"code":"    it('should hash domain name and scope', () => {\n      // domain name: 'http://www.origin.com'\n      // scope: 'custom-cid-scope'\n      return compare('custom-cid-scope', 'tSSEaSFEU2-vkEO0Mb9HZejJui-npGRhXf3fD3H3iWeYQrjkQOTaRYdPyFTogNXA');\n    });","file":"unit/test-cid.js","skipped":false,"dir":"test"},{"name":"should hash domain name and scope","suites":["with real crypto"],"updatePoint":{"line":136,"column":41,"index":5149},"line":136,"code":"    it('should hash domain name and scope', () => {\n      fakeWin.location.href = 'https://cdn.ampproject.org/v/www.DIFFERENT.com/foo/?f=0';\n      // domain name: 'http://www.different.com'\n      // scope: 'another-custom-cid-scope'\n      return compare('another-custom-cid-scope', '25lYHB6Luck8Z5ddpiB-FBbj2pa9zx3WdnJlZVgFneJRcFsDT3kIoPoi6k6-oxrB');\n    });","file":"unit/test-cid.js","skipped":false,"dir":"test"},{"name":"should depend on external id e1","suites":["with crypto stub"],"updatePoint":{"line":154,"column":39,"index":5926},"line":154,"code":"    it('should depend on external id e1', () => {\n      clock.tick(123);\n      return compare('e1', 'sha384(sha384([1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,15])http://www.origin.come1)').then(() => {\n        expect(storage['amp-cid']).to.be.a('string');\n        const stored = JSON.parse(storage['amp-cid']);\n        expect(stored.cid).to.equal('sha384([1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,15])');\n        expect(stored.time).to.equal(123);\n      });\n    });","file":"unit/test-cid.js","skipped":false,"dir":"test"},{"name":"should depend on external id e2","suites":["with crypto stub"],"updatePoint":{"line":163,"column":39,"index":6369},"line":163,"code":"    it('should depend on external id e2', () => {\n      return compare('e2', 'sha384(sha384([1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,15])http://www.origin.come2)');\n    });","file":"unit/test-cid.js","skipped":false,"dir":"test"},{"name":"should depend on domain","suites":["with crypto stub"],"updatePoint":{"line":166,"column":31,"index":6524},"line":166,"code":"    it('should depend on domain', () => {\n      fakeWin.location.href = 'https://cdn.ampproject.org/v/www.DIFFERENT.com/foo/?f=0';\n      return compare('e2', 'sha384(sha384([1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,15])http://www.different.come2)');\n    });","file":"unit/test-cid.js","skipped":false,"dir":"test"},{"name":"should fallback to cookie value on custom domain.","suites":["with crypto stub"],"updatePoint":{"line":170,"column":57,"index":6797},"line":170,"code":"    it('should fallback to cookie value on custom domain.', () => {\n      fakeWin.location.href = 'https://abc.org/v/www.DIFFERENT.com/foo/?f=0';\n      fakeWin.document.cookie = 'cookie_name=12345;scope_name=54321;';\n      return cid.get({\n        scope: 'scope_name'\n      }, hasConsent).then(c => {\n        expect(c).to.equal('54321');\n      });\n    });","file":"unit/test-cid.js","skipped":false,"dir":"test"},{"name":"should fallback to cookie of given name on custom domain.","suites":["with crypto stub"],"updatePoint":{"line":179,"column":65,"index":7161},"line":179,"code":"    it('should fallback to cookie of given name on custom domain.', () => {\n      fakeWin.location.href = 'https://abc.org/v/www.DIFFERENT.com/foo/?f=0';\n      fakeWin.document.cookie = 'cookie_name=12345;scope_name=54321;';\n      return cid.get({\n        scope: 'scope_name',\n        cookieName: 'cookie_name'\n      }, hasConsent).then(c => {\n        expect(c).to.equal('12345');\n      });\n    });","file":"unit/test-cid.js","skipped":false,"dir":"test"},{"name":"should produce golden value","suites":["with crypto stub"],"updatePoint":{"line":194,"column":35,"index":7817},"line":194,"code":"    it('should produce golden value', () => {\n      crypto.sha384Base64 = new Crypto(fakeWin).sha384Base64;\n      return compare('e2', 'q0pPfZTWGruPrtURDJHexzs-MgOkt9SJAsAZodzr8tx8hKv8BS62AVpbttaFX8fK');\n    });","file":"unit/test-cid.js","skipped":false,"dir":"test"},{"name":"should be stable with respect to a saved seed","suites":["with crypto stub"],"updatePoint":{"line":198,"column":53,"index":8047},"line":198,"code":"    it('should be stable with respect to a saved seed', () => {\n      const expected = 'sha384(sha384([1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,15])http://www.origin.come2)';\n      return compare('e2', expected).then(() => {\n        seed = 2;\n        return compare('e2', expected).then(() => {\n          storage['amp-cid'] = undefined;\n          removeMemoryCacheOfCid();\n          return compare('e2', 'sha384(sha384([' +\n          // 2 because we set the seed to 2\n          '2' + ',2,3,0,0,0,0,0,0,0,0,0,0,0,0,15])http://www.origin.come2)');\n        });\n      });\n    });","file":"unit/test-cid.js","skipped":false,"dir":"test"},{"name":"should pick up the cid value from storage","suites":["with crypto stub"],"updatePoint":{"line":211,"column":49,"index":8608},"line":211,"code":"    it('should pick up the cid value from storage', () => {\n      storage['amp-cid'] = JSON.stringify({\n        cid: 'YYY',\n        time: Date.now()\n      });\n      return compare('e2', 'sha384(YYYhttp://www.origin.come2)');\n    });","file":"unit/test-cid.js","skipped":false,"dir":"test"},{"name":"should return empty if opted out","suites":["with crypto stub"],"updatePoint":{"line":218,"column":40,"index":8832},"line":218,"code":"    it('should return empty if opted out', () => {\n      storageGetStub.withArgs('amp-cid-optout').returns(Promise.resolve(true));\n      storage['amp-cid'] = JSON.stringify({\n        cid: 'YYY',\n        time: Date.now()\n      });\n      return compare('e2', '');\n    });","file":"unit/test-cid.js","skipped":false,"dir":"test"},{"name":"should read from viewer storage if embedded","suites":["with crypto stub"],"updatePoint":{"line":226,"column":51,"index":9113},"line":226,"code":"    it('should read from viewer storage if embedded', () => {\n      expectAsyncConsoleError(doesNotProvideError);\n      fakeWin.parent = {};\n      const expectedBaseCid = 'from-viewer';\n      viewerStorage = JSON.stringify({\n        time: 0,\n        cid: expectedBaseCid\n      });\n      return Promise.all([compare('e1', `sha384(${expectedBaseCid}http://www.origin.come1)`), compare('e2', `sha384(${expectedBaseCid}http://www.origin.come2)`)]).then(() => {\n        expect(viewerSendMessageStub).to.be.calledOnce;\n        expect(viewerSendMessageStub).to.be.calledWith('cid');\n        seed = 2;\n        // Ensure it's called only once since we cache it in memory.\n        return compare('e3', `sha384(${expectedBaseCid}http://www.origin.come3)`);\n      }).then(() => {\n        expect(viewerSendMessageStub).to.be.calledOnce;\n        return expect(cid.baseCid_).to.eventually.equal(expectedBaseCid);\n      });\n    });","file":"unit/test-cid.js","skipped":false,"dir":"test"},{"name":"should not read from untrusted viewer","suites":["with crypto stub"],"updatePoint":{"line":257,"column":45,"index":10687},"line":257,"code":"    it('should not read from untrusted viewer', () => {\n      fakeWin.parent = {};\n      trustedViewer = false;\n      const viewerBaseCid = 'from-viewer';\n      viewerStorage = JSON.stringify({\n        time: 0,\n        cid: viewerBaseCid\n      });\n      return Promise.all([compare('e1', 'sha384(sha384([1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,15])http://www.origin.come1)'), compare('e2', 'sha384(sha384([1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,15])http://www.origin.come2)')]).then(() => {\n        expect(viewerSendMessageStub).to.not.be.called;\n      });\n    });","file":"unit/test-cid.js","skipped":false,"dir":"test"},{"name":"should store to viewer storage if embedded","suites":["with crypto stub"],"updatePoint":{"line":269,"column":50,"index":11238},"line":269,"code":"    it('should store to viewer storage if embedded', () => {\n      expectAsyncConsoleError(doesNotProvideError, 2);\n      fakeWin.parent = {};\n      const expectedBaseCid = 'sha384([1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,15])';\n      return compare('e2', `sha384(${expectedBaseCid}http://www.origin.come2)`).then(() => {\n        expect(viewerSendMessageStub).to.be.calledWith('cid', JSON.stringify({\n          time: 0,\n          cid: expectedBaseCid\n        }));\n        seed = 2;\n        // Ensure it's called only once since we cache it in memory.\n        return compare('e3', `sha384(${expectedBaseCid}http://www.origin.come3)`);\n      }).then(() => {\n        expect(viewerSendMessageStub).to.be.calledWith(env.sandbox.match.string);\n        return expect(cid.baseCid_).to.eventually.equal(expectedBaseCid);\n      });\n    });","file":"unit/test-cid.js","skipped":false,"dir":"test"},{"name":"should prefer value in storage if present","suites":["with crypto stub"],"updatePoint":{"line":286,"column":49,"index":12057},"line":286,"code":"    it('should prefer value in storage if present', () => {\n      fakeWin.parent = {};\n      storage['amp-cid'] = JSON.stringify({\n        cid: 'in-storage',\n        time: Date.now()\n      });\n      return compare('e2', 'sha384(in-storagehttp://www.origin.come2)');\n    });","file":"unit/test-cid.js","skipped":false,"dir":"test"},{"name":"should expire on read after 365 days","suites":["with crypto stub"],"updatePoint":{"line":294,"column":44,"index":12326},"line":294,"code":"    it('should expire on read after 365 days', () => {\n      const expected = 'sha384(sha384([1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,15])http://www.origin.come2)';\n      return compare('e2', expected).then(() => {\n        clock.tick(364 * DAY);\n        seed = 2;\n        return compare('e2', expected).then(() => {\n          clock.tick(365 * DAY + 1);\n          removeMemoryCacheOfCid();\n          return compare('e2', 'sha384(sha384([' +\n          // 2 because we set the seed to 2\n          '2' + ',2,3,0,0,0,0,0,0,0,0,0,0,0,0,15])http://www.origin.come2)');\n        });\n      });\n    });","file":"unit/test-cid.js","skipped":false,"dir":"test"},{"name":"should expire on read after 365 days when embedded","suites":["with crypto stub"],"updatePoint":{"line":308,"column":58,"index":12922},"line":308,"code":"    it('should expire on read after 365 days when embedded', () => {\n      expectAsyncConsoleError(doesNotProvideError, 3);\n      fakeWin.parent = {};\n      const expectedBaseCid = 'from-viewer';\n      viewerStorage = JSON.stringify({\n        time: 0,\n        cid: expectedBaseCid\n      });\n      const expectedIdFromViewer = 'sha384(from-viewerhttp://www.origin.come2)';\n      const expectedNewId = 'sha384(sha384([1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,15])http://www.origin.come2)';\n      return compare('e2', expectedIdFromViewer).then(() => {\n        clock.tick(364 * DAY);\n        return compare('e2', expectedIdFromViewer).then(() => {\n          clock.tick(365 * DAY + 1);\n          removeMemoryCacheOfCid();\n          return compare('e2', expectedNewId);\n        });\n      });\n    });","file":"unit/test-cid.js","skipped":false,"dir":"test"},{"name":"should set last access time once a day","suites":["with crypto stub"],"updatePoint":{"line":327,"column":46,"index":13694},"line":327,"code":"    it('should set last access time once a day', () => {\n      const expected = 'sha384(sha384([1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,15])http://www.origin.come2)';\n      function getStoredTime() {\n        return JSON.parse(storage['amp-cid']).time;\n      }\n      clock.tick(100);\n      return compare('e2', expected).then(() => {\n        seed = 2;\n        expect(getStoredTime()).to.equal(100);\n        removeMemoryCacheOfCid();\n        clock.tick(3600);\n        return compare('e2', expected).then(() => {\n          expect(getStoredTime()).to.equal(100);\n          removeMemoryCacheOfCid();\n          clock.tick(DAY);\n          return compare('e2', expected).then(() => {\n            expect(getStoredTime()).to.equal(100 + 3600 + DAY);\n          });\n        });\n      });\n    });","file":"unit/test-cid.js","skipped":false,"dir":"test"},{"name":"should set last access time once a day when embedded","suites":["with crypto stub"],"updatePoint":{"line":348,"column":60,"index":14482},"line":348,"code":"    it('should set last access time once a day when embedded', () => {\n      expectAsyncConsoleError(doesNotProvideError, 5);\n      fakeWin.parent = {};\n      const expected = 'sha384(sha384([1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,15])http://www.origin.come2)';\n      function getStoredTime() {\n        return JSON.parse(viewerStorage).time;\n      }\n      clock.tick(100);\n      return compare('e2', expected).then(() => {\n        seed = 2;\n        expect(getStoredTime()).to.equal(100);\n        removeMemoryCacheOfCid();\n        clock.tick(3600);\n        return compare('e2', expected).then(() => {\n          expect(getStoredTime()).to.equal(100);\n          removeMemoryCacheOfCid();\n          clock.tick(DAY);\n          return compare('e2', expected).then(() => {\n            expect(getStoredTime()).to.equal(100 + 3600 + DAY);\n          });\n        });\n      });\n    });","file":"unit/test-cid.js","skipped":false,"dir":"test"},{"name":"should wait until after pre-rendering","suites":["with crypto stub"],"updatePoint":{"line":371,"column":45,"index":15332},"line":371,"code":"    it('should wait until after pre-rendering', () => {\n      let nonce = 'not visible';\n      whenFirstVisible = timer.promise(100).then(() => {\n        nonce = 'visible';\n      });\n      const p = cid.get({\n        scope: 'test'\n      }, hasConsent).then(unusedC => {\n        expect(nonce).to.equal('visible');\n      });\n      clock.tick(100);\n      return p;\n    });","file":"unit/test-cid.js","skipped":false,"dir":"test"},{"name":"should wait for consent","suites":["with crypto stub"],"updatePoint":{"line":384,"column":31,"index":15688},"line":384,"code":"    it('should wait for consent', () => {\n      let nonce = 'before';\n      const consent = timer.promise(100).then(() => {\n        nonce = 'timer fired';\n      });\n      const p = cid.get({\n        scope: 'test'\n      }, consent).then(unusedC => {\n        expect(nonce).to.equal('timer fired');\n      });\n      clock.tick(100);\n      return p;\n    });","file":"unit/test-cid.js","skipped":false,"dir":"test"},{"name":"should fail on failed consent","suites":["with crypto stub"],"updatePoint":{"line":397,"column":37,"index":16047},"line":397,"code":"    it('should fail on failed consent', () => {\n      return expect(cid.get({\n        scope: 'abc'\n      }, Promise.reject())).to.be.rejected;\n    });","file":"unit/test-cid.js","skipped":false,"dir":"test"},{"name":"should fail on invalid scope","suites":["with crypto stub"],"updatePoint":{"line":402,"column":36,"index":16197},"line":402,"code":"    it('should fail on invalid scope', () => {\n      allowConsoleError(() => {\n        expect(() => {\n          cid.get({\n            scope: '$$$'\n          }, Promise.resolve());\n        }).to.throw(/\\$\\$\\$/);\n      });\n    });","file":"unit/test-cid.js","skipped":false,"dir":"test"},{"name":"should not store until persistence promise resolves","suites":["with crypto stub"],"updatePoint":{"line":411,"column":59,"index":16449},"line":411,"code":"    it('should not store until persistence promise resolves', () => {\n      let resolve;\n      const persistencePromise = new Promise(r => {\n        resolve = r;\n      });\n      let sha384Promise;\n      crypto.sha384Base64 = val => {\n        if (val instanceof Uint8Array) {\n          val = '[' + Array.apply([], val).join(',') + ']';\n        }\n        return sha384Promise = Promise.resolve('sha384(' + val + ')');\n      };\n      return cid.get({\n        scope: 'e2'\n      }, hasConsent, persistencePromise).then(c => {\n        expect(c).to.equal('sha384(sha384([1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,15])http://www.origin.come2)');\n        expect(storage['amp-cid']).to.be.undefined;\n        clock.tick(777);\n        resolve();\n        return Promise.all([persistencePromise, sha384Promise]).then(() => {\n          expect(storage['amp-cid']).to.be.a('string');\n          const stored = JSON.parse(storage['amp-cid']);\n          expect(stored.cid).to.equal('sha384([1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,15])');\n          expect(stored.time).to.equal(777);\n        });\n      });\n    });","file":"unit/test-cid.js","skipped":false,"dir":"test"},{"name":"should not wait persistence consent for viewer storage","suites":["with crypto stub"],"updatePoint":{"line":438,"column":62,"index":17524},"line":438,"code":"    it('should not wait persistence consent for viewer storage', () => {\n      expectAsyncConsoleError(doesNotProvideError, 2);\n      fakeWin.parent = {};\n      const persistencePromise = new Promise(() => {\n        /* never resolves */\n      });\n      return cid.get({\n        scope: 'e2'\n      }, hasConsent, persistencePromise).then(() => {\n        expect(viewerStorage).to.equal(JSON.stringify({\n          time: 0,\n          cid: 'sha384([1,2,3,0,0,0,0,0,0,0,0,0,0,0,0,15])'\n        }));\n      });\n    });","file":"unit/test-cid.js","skipped":false,"dir":"test"},{"name":"fallback with no window.crypto","suites":["with crypto stub"],"updatePoint":{"line":453,"column":38,"index":18010},"line":453,"code":"    it('fallback with no window.crypto', () => {\n      fakeWin.crypto = undefined;\n      fakeWin.screen = {\n        width: '111',\n        height: '222'\n      };\n      fakeWin.Math = {\n        random: () => {\n          return 999;\n        }\n      };\n      clock.tick(7777);\n      return compare('e2', 'sha384(sha384(https://cdn.ampproject.org/v' + '/www.origin.com/foo/?f=07777999111222)http://www.origin.come2)');\n    });","file":"unit/test-cid.js","skipped":false,"dir":"test"},{"name":"should NOT create fallback cookie by default with string scope","suites":["with crypto stub"],"updatePoint":{"line":467,"column":70,"index":18464},"line":467,"code":"    it('should NOT create fallback cookie by default with string scope', () => {\n      fakeWin.location.href = 'https://abc.org/v/www.DIFFERENT.com/foo/?f=0';\n      return cid.get({\n        scope: 'cookie_name'\n      }, hasConsent).then(c => {\n        expect(c).to.not.exist;\n        expect(fakeWin.document.cookie).to.not.exist;\n      });\n    });","file":"unit/test-cid.js","skipped":false,"dir":"test"},{"name":"should NOT create fallback cookie by default with struct scope","suites":["with crypto stub"],"updatePoint":{"line":476,"column":70,"index":18812},"line":476,"code":"    it('should NOT create fallback cookie by default with struct scope', () => {\n      fakeWin.location.href = 'https://abc.org/v/www.DIFFERENT.com/foo/?f=0';\n      return cid.get({\n        scope: 'cookie_name'\n      }, hasConsent).then(c => {\n        expect(c).to.not.exist;\n        expect(fakeWin.document.cookie).to.not.exist;\n      });\n    });","file":"unit/test-cid.js","skipped":false,"dir":"test"},{"name":"should create fallback cookie when asked","suites":["with crypto stub"],"updatePoint":{"line":485,"column":48,"index":19138},"line":485,"code":"    it('should create fallback cookie when asked', () => {\n      fakeWin.location.href = 'https://foo.abc.org/v/www.DIFFERENT.com/foo/?f=0';\n      fakeWin.location.hostname = 'foo.abc.org';\n      fakeWin.crypto.getRandomValues = array => {\n        array[0] = 0;\n        array[1] = 2;\n        array[2] = 4;\n        array[3] = 8;\n        array[4] = 16;\n        array[5] = 32;\n        array[6] = 64;\n        array[7] = 128;\n        array[8] = 255;\n        array[9] = 7;\n        array[10] = 11;\n        array[11] = 22;\n        array[12] = 33;\n        array[13] = 66;\n        array[14] = 200;\n        array[15] = 39;\n      };\n      return cid.get({\n        scope: 'scope_name',\n        createCookieIfNotPresent: true\n      }, hasConsent).then(c => {\n        expect(c).to.exist;\n        // Since various parties depend on the cookie values, please be careful\n        // about changing the format.\n        expect(c).to.equal('amp-AAIECBAgQID_BwsWIULIJw');\n        expect(fakeWin.document.cookie).to.equal('scope_name=' + encodeURIComponent(c) + '; path=/' + '; domain=abc.org' + '; expires=Fri, 01 Jan 1971 00:00:00 GMT'); // 1 year from 0.\n      });\n    });","file":"unit/test-cid.js","skipped":false,"dir":"test"},{"name":"should create fallback cookie with provided name","suites":["with crypto stub"],"updatePoint":{"line":518,"column":56,"index":20299},"line":518,"code":"    it('should create fallback cookie with provided name', () => {\n      fakeWin.location.href = 'https://foo.abc.org/v/www.DIFFERENT.com/foo/?f=0';\n      fakeWin.location.hostname = 'foo.abc.org';\n      return cid.get({\n        scope: 'scope_name',\n        createCookieIfNotPresent: true,\n        cookieName: 'cookie_name'\n      }, hasConsent).then(c => {\n        expect(c).to.exist;\n        expect(c).to.equal('amp-AQIDAAAAAAAAAAAAAAAADw');\n        expect(fakeWin.document.cookie).to.equal('cookie_name=' + encodeURIComponent(c) + '; path=/' + '; domain=abc.org' + '; expires=Fri, 01 Jan 1971 00:00:00 GMT'); // 1 year from 0.\n      });\n    });","file":"unit/test-cid.js","skipped":false,"dir":"test"},{"name":"should update fallback cookie expiration when present","suites":["with crypto stub"],"updatePoint":{"line":532,"column":61,"index":20952},"line":532,"code":"    it('should update fallback cookie expiration when present', () => {\n      fakeWin.location.href = 'https://foo.abc.org/v/www.DIFFERENT.com/foo/?f=0';\n      fakeWin.location.hostname = 'foo.abc.org';\n      fakeWin.document.cookie = 'cookie_name=amp-12345';\n      return cid.get({\n        scope: 'cookie_name'\n      }, hasConsent).then(c => {\n        expect(fakeWin.document.cookie).to.equal('cookie_name=' + encodeURIComponent(c) + '; path=/' + '; domain=abc.org' + '; expires=Fri, 01 Jan 1971 00:00:00 GMT' // 1 year from 0.\n        );\n      });\n    });","file":"unit/test-cid.js","skipped":false,"dir":"test"},{"name":"should not update expiration when created externally","suites":["with crypto stub"],"updatePoint":{"line":544,"column":60,"index":21510},"line":544,"code":"    it('should not update expiration when created externally', () => {\n      fakeWin.location.href = 'https://foo.abc.org/v/www.DIFFERENT.com/foo/?f=0';\n      fakeWin.location.hostname = 'foo.abc.org';\n      fakeWin.document.cookie = 'cookie_name=12345';\n      return cid.get({\n        scope: 'cookie_name'\n      }, hasConsent).then(() => {\n        expect(fakeWin.document.cookie).to.equal('cookie_name=12345');\n      });\n    });","file":"unit/test-cid.js","skipped":false,"dir":"test"},{"name":"should return same value for multiple calls on non-proxied urls","suites":["with crypto stub"],"updatePoint":{"line":554,"column":71,"index":21951},"line":554,"code":"    it('should return same value for multiple calls on non-proxied urls', () => {\n      fakeWin.location.href = 'https://abc.org/foo/?f=0';\n      fakeWin.location.hostname = 'foo.abc.org';\n      const cid1 = cid.get({\n        scope: 'cookie',\n        createCookieIfNotPresent: true\n      }, hasConsent);\n      const cid2 = cid.get({\n        scope: 'cookie',\n        createCookieIfNotPresent: true\n      }, hasConsent);\n      return cid1.then(c1 => {\n        return cid2.then(c2 => {\n          expect(c1).to.equal(c2);\n        });\n      });\n    });","file":"unit/test-cid.js","skipped":false,"dir":"test"},{"name":"should return same value for multiple calls on proxied urls","suites":["with crypto stub"],"updatePoint":{"line":571,"column":67,"index":22495},"line":571,"code":"    it('should return same value for multiple calls on proxied urls', () => {\n      fakeWin.location.href = 'https://cdn.ampproject.org/v/abc.org/foo/?f=0';\n      fakeWin.location.hostname = 'cdn.ampproject.org';\n      const cid1 = cid.get({\n        scope: 'cookie',\n        createCookieIfNotPresent: true\n      }, hasConsent);\n      return cid1.then(c1 => {\n        const cid2 = cid.get({\n          scope: 'cookie',\n          createCookieIfNotPresent: true\n        }, hasConsent);\n        return cid2.then(c2 => {\n          expect(c1).to.equal(c2);\n        });\n      });\n    });","file":"unit/test-cid.js","skipped":false,"dir":"test"},{"name":"should retreive cookie value with . in name","suites":["with crypto stub"],"updatePoint":{"line":588,"column":51,"index":23059},"line":588,"code":"    it('should retreive cookie value with . in name', () => {\n      fakeWin.location.href = 'https://abc.org/';\n      fakeWin.document.cookie = '_sp_id.44=4567;';\n      return compare('_sp_id.44', '4567');\n    });","file":"unit/test-cid.js","skipped":false,"dir":"test"},{"name":"should fail on non-proxy origin","suites":["with crypto stub"],"updatePoint":{"line":606,"column":37,"index":23599},"line":606,"code":"  it('should fail on non-proxy origin', () => {\n    allowConsoleError(() => {\n      expect(() => {\n        getProxySourceOrigin(parseUrlDeprecated('https://abc.org/v/foo.com/'));\n      }).to.throw(/Expected proxy origin/);\n    });\n  });","file":"unit/test-cid.js","skipped":false,"dir":"test"},{"name":"should store CID in cookie when not in Viewer","suites":["with crypto stub"],"updatePoint":{"line":654,"column":51,"index":24895},"line":654,"code":"  it('should store CID in cookie when not in Viewer', function* () {\n    env.sandbox.stub(cid.viewerCidApi_, 'isSupported').returns(Promise.resolve(false));\n    setCookie(win, 'foo', '', 0);\n    const fooCid = yield cid.get({\n      scope: 'foo',\n      createCookieIfNotPresent: true\n    }, hasConsent);\n    expect(fooCid).to.have.string('amp-');\n    const fooCid2 = yield cid.get({\n      scope: 'foo',\n      createCookieIfNotPresent: true\n    }, hasConsent);\n    expect(fooCid).to.equal(fooCid2);\n  });","file":"unit/test-cid.js","skipped":false,"dir":"test"},{"name":"generates a new CID and backup","suites":["CID backup"],"updatePoint":{"line":673,"column":38,"index":25574},"line":673,"code":"    it('generates a new CID and backup', async () => {\n      setCookie(win, 'foo', '', 0);\n      const fooCid = await cid.get({\n        scope: 'foo',\n        createCookieIfNotPresent: true\n      }, hasConsent);\n      expect(fooCid).to.have.string('amp-');\n      expect(storageValue['amp-cid:foo']).to.equal(fooCid);\n    });","file":"unit/test-cid.js","skipped":false,"dir":"test"},{"name":"should find AMP generated CID in cookie and backup","suites":["CID backup"],"updatePoint":{"line":682,"column":58,"index":25918},"line":682,"code":"    it('should find AMP generated CID in cookie and backup', async () => {\n      const cidString = 'amp-abc123';\n      win.document.cookie = `foo=${cidString};`;\n      const fooCid = await cid.get({\n        scope: 'foo',\n        createCookieIfNotPresent: true\n      }, hasConsent);\n      expect(fooCid).to.equal(cidString);\n      expect(storageValue['amp-cid:foo']).to.equal(fooCid);\n      const nonAmpCidString = 'xyz987';\n      win.document.cookie = `bar=${nonAmpCidString};`;\n      expect(await cid.get({\n        scope: 'bar',\n        createCookieIfNotPresent: true\n      }, hasConsent)).to.equal(nonAmpCidString);\n      expect(storageValue['amp-cid:bar']).to.not.equal(nonAmpCidString);\n    });","file":"unit/test-cid.js","skipped":false,"dir":"test"},{"name":"only use backup when necessary and update accordingly","suites":["CID backup"],"updatePoint":{"line":699,"column":61,"index":26620},"line":699,"code":"    it('only use backup when necessary and update accordingly', async () => {\n      storageValue['amp-cid:foo'] = 'amp-foo-bar';\n      const cidString = 'amp-abc123';\n      win.document.cookie = `foo=${cidString};`;\n      storageMock.expects('setNonBoolean').withExactArgs('amp-cid:foo', cidString).once();\n      const fooCid = await cid.get({\n        scope: 'foo',\n        createCookieIfNotPresent: true\n      }, hasConsent);\n      expect(fooCid).to.equal(cidString);\n    });","file":"unit/test-cid.js","skipped":false,"dir":"test"},{"name":"should use CID backup","suites":["CID backup"],"updatePoint":{"line":710,"column":29,"index":27065},"line":710,"code":"    it('should use CID backup', async () => {\n      const cidString = 'amp-abc123';\n      storageMock.expects('setNonBoolean').once();\n      setCookie(win, 'foo', '', 0);\n      env.sandbox.stub(cookie, 'setCookie').callsFake((win, name, value) => {\n        win.document.cookie = `${name}=${value}`;\n      });\n      storageValue['amp-cid:foo'] = cidString;\n      const fooCid = await cid.get({\n        scope: 'foo',\n        createCookieIfNotPresent: true\n      }, hasConsent);\n      expect(fooCid).to.equal(cidString);\n      expect(getCookie(win, 'foo')).to.equal(cidString);\n    });","file":"unit/test-cid.js","skipped":false,"dir":"test"},{"name":"should not use or store CID backup if opt-out","suites":["CID backup"],"updatePoint":{"line":725,"column":53,"index":27672},"line":725,"code":"    it('should not use or store CID backup if opt-out', async () => {\n      const cidString = 'amp-abc123';\n      setCookie(win, 'foo', '', 0);\n      env.sandbox.stub(cookie, 'setCookie').callsFake((win, name, value) => {\n        win.document.cookie = `${name}=${value}`;\n      });\n      storageMock.expects('setNonBoolean').never();\n      // To check amp-cid-optout\n      storageMock.expects('get').once();\n      storageValue['amp-cid:foo'] = cidString;\n      const fooCid = await cid.get({\n        scope: 'foo',\n        createCookieIfNotPresent: true,\n        disableBackup: true\n      }, hasConsent);\n      expect(fooCid).to.not.equal(cidString);\n    });","file":"unit/test-cid.js","skipped":false,"dir":"test"},{"name":"get method should return CID when in Viewer ","suites":["CID backup"],"updatePoint":{"line":743,"column":50,"index":28333},"line":743,"code":"  it('get method should return CID when in Viewer ', () => {\n    env.sandbox.stub(cid.viewerCidApi_, 'isSupported').returns(Promise.resolve(true));\n    win.parent = {};\n    stubServiceForDoc(env.sandbox, ampdoc, 'viewer', 'sendMessageAwaitResponse').returns(Promise.resolve('cid-from-viewer'));\n    stubServiceForDoc(env.sandbox, ampdoc, 'viewer', 'isTrustedViewer').returns(Promise.resolve(true));\n    stubServiceForDoc(env.sandbox, ampdoc, 'viewer', 'hasCapability').withArgs('cid').returns(true);\n    env.sandbox.stub(url, 'isProxyOrigin').returns(true);\n    return expect(cid.get({\n      scope: 'foo'\n    }, hasConsent)).to.eventually.equal('cid-from-viewer');\n  });","file":"unit/test-cid.js","skipped":false,"dir":"test"},{"name":"get method should time out when in Viewer","suites":["CID backup"],"updatePoint":{"line":754,"column":47,"index":29001},"line":754,"code":"  it('get method should time out when in Viewer', function* () {\n    env.sandbox.stub(cid.viewerCidApi_, 'isSupported').returns(Promise.resolve(true));\n    win.parent = {};\n    stubServiceForDoc(env.sandbox, ampdoc, 'viewer', 'sendMessageAwaitResponse').returns(new Promise(() => {}));\n    stubServiceForDoc(env.sandbox, ampdoc, 'viewer', 'isTrustedViewer').returns(Promise.resolve(true));\n    storage['amp-cid-optout'] = false;\n    env.sandbox.stub(url, 'isProxyOrigin').returns(true);\n    let scopedCid = undefined;\n    let resolved = false;\n    cid.get({\n      scope: 'foo'\n    }, hasConsent).then(result => {\n      scopedCid = result;\n      resolved = true;\n    });\n    yield macroTask();\n    clock.tick(9999);\n    yield macroTask();\n    expect(resolved).to.be.false;\n    expect(scopedCid).to.be.undefined;\n    yield macroTask();\n  });","file":"unit/test-cid.js","skipped":false,"dir":"test"},{"name":"should use cid api on pub origin if opted in","suites":["pub origin, CID API opt in"],"updatePoint":{"line":785,"column":52,"index":30201},"line":785,"code":"    it('should use cid api on pub origin if opted in', () => {\n      cid.apiKeyMap_ = {\n        'AMP_ECID_GOOGLE': 'cid-api-key'\n      };\n      const getScopedCidStub = env.sandbox.stub(cid.cidApi_, 'getScopedCid');\n      getScopedCidStub.returns(Promise.resolve('cid-from-api'));\n      return cid.get({\n        scope: 'AMP_ECID_GOOGLE',\n        cookieName: '_ga',\n        createCookieIfNotPresent: true\n      }, hasConsent).then(scopedCid => {\n        expect(getScopedCidStub).to.be.calledWith('cid-api-key', 'AMP_ECID_GOOGLE');\n        expect(scopedCid).to.equal('cid-from-api');\n        expect(getCookie(win, '_ga')).to.equal('cid-from-api');\n      });\n    });","file":"unit/test-cid.js","skipped":false,"dir":"test"},{"name":"should fallback to cookie if cid api returns nothing","suites":["pub origin, CID API opt in"],"updatePoint":{"line":801,"column":60,"index":30873},"line":801,"code":"    it('should fallback to cookie if cid api returns nothing', () => {\n      env.sandbox.stub(cid.cidApi_, 'getScopedCid').returns(Promise.resolve());\n      return cid.get({\n        scope: 'AMP_ECID_GOOGLE',\n        cookieName: '_ga',\n        createCookieIfNotPresent: true\n      }, hasConsent).then(scopedCid => {\n        expect(scopedCid).to.contain('amp-');\n        expect(getCookie(win, '_ga')).to.equal(scopedCid);\n      });\n    });","file":"unit/test-cid.js","skipped":false,"dir":"test"},{"name":"should respect CID API opt out","suites":["pub origin, CID API opt in"],"updatePoint":{"line":812,"column":38,"index":31289},"line":812,"code":"    it('should respect CID API opt out', () => {\n      env.sandbox.stub(cid.cidApi_, 'getScopedCid').returns(Promise.resolve('$OPT_OUT'));\n      return cid.get({\n        scope: 'AMP_ECID_GOOGLE',\n        cookieName: '_ga',\n        createCookieIfNotPresent: true\n      }, hasConsent).then(scopedCid => {\n        expect(scopedCid).to.be.null;\n        expect(getCookie(win, '_ga')).to.be.null;\n      });\n    });","file":"unit/test-cid.js","skipped":false,"dir":"test"},{"name":"should read predefined clients and custom API keys correctly","suites":["isScopeOptedIn"],"updatePoint":{"line":838,"column":68,"index":32291},"line":838,"code":"    it('should read predefined clients and custom API keys correctly', () => {\n      ampdoc.win.document.head.innerHTML += '<meta name=\"amp-google-client-id-api\" ' + 'content=\"googleanalytics, ' + 'foo = foo-api-key,' + 'bar=bar-api-key ,' + 'hello=hello-api-key\">';\n      expect(cid.isScopeOptedIn_('AMP_ECID_GOOGLE')).to.equal('AIzaSyA65lEHUEizIsNtlbNo-l2K18dT680nsaM');\n      expect(cid.isScopeOptedIn_('foo')).to.equal('foo-api-key');\n      expect(cid.isScopeOptedIn_('bar')).to.equal('bar-api-key');\n      expect(cid.isScopeOptedIn_('hello')).to.equal('hello-api-key');\n      expect(cid.isScopeOptedIn_('non-existing')).to.be.undefined;\n    });","file":"unit/test-cid.js","skipped":false,"dir":"test"},{"name":"should work if meta only contains predefined clients","suites":["isScopeOptedIn"],"updatePoint":{"line":846,"column":60,"index":32933},"line":846,"code":"    it('should work if meta only contains predefined clients', () => {\n      ampdoc.win.document.head.innerHTML += '<meta name=\"amp-google-client-id-api\" content=\"googleanalytics\">';\n      expect(cid.isScopeOptedIn_('AMP_ECID_GOOGLE')).to.equal('AIzaSyA65lEHUEizIsNtlbNo-l2K18dT680nsaM');\n    });","file":"unit/test-cid.js","skipped":false,"dir":"test"},{"name":"should work if meta only contains custom scopes","suites":["isScopeOptedIn"],"updatePoint":{"line":850,"column":55,"index":33225},"line":850,"code":"    it('should work if meta only contains custom scopes', () => {\n      ampdoc.win.document.head.innerHTML += '<meta name=\"amp-google-client-id-api\" ' + 'content=\"' + 'foo=foo-api-key,' + 'bar=bar-api-key\">';\n      expect(cid.isScopeOptedIn_('foo')).to.equal('foo-api-key');\n      expect(cid.isScopeOptedIn_('bar')).to.equal('bar-api-key');\n    });","file":"unit/test-cid.js","skipped":false,"dir":"test"},{"name":"should not work if vendor not allowlisted","suites":["isScopeOptedIn"],"updatePoint":{"line":855,"column":49,"index":33568},"line":855,"code":"    it('should not work if vendor not allowlisted', () => {\n      ampdoc.win.document.head.innerHTML += '<meta name=\"amp-google-client-id-api\" content=\"abodeanalytics\">';\n      expect(cid.isScopeOptedIn_('AMP_ECID_GOOGLE')).to.equal(undefined);\n    });","file":"unit/test-cid.js","skipped":false,"dir":"test"},{"name":"should send a message to viewer","suites":["optOutOfCid()"],"updatePoint":{"line":875,"column":39,"index":34306},"line":875,"code":"    it('should send a message to viewer', () => {\n      return optOutOfCid(ampdoc).then(() => {\n        expect(viewerSendMessageStub).to.be.calledWith('cidOptOut');\n      });\n    });","file":"unit/test-cid.js","skipped":false,"dir":"test"},{"name":"should save bit in storage","suites":["optOutOfCid()"],"updatePoint":{"line":880,"column":34,"index":34484},"line":880,"code":"    it('should save bit in storage', () => {\n      optOutOfCid(ampdoc).then(() => {\n        expect(storageSetStub).to.be.calledWith('amp-cid-optout', true);\n      });\n    });","file":"unit/test-cid.js","skipped":false,"dir":"test"},{"name":"should reject promise if storage set fails","suites":["optOutOfCid()"],"updatePoint":{"line":885,"column":50,"index":34675},"line":885,"code":"    it('should reject promise if storage set fails', () => {\n      storageSetStub.returns(Promise.reject('failed!'));\n      return optOutOfCid(ampdoc).should.eventually.be.rejectedWith('failed!');\n    });","file":"unit/test-cid.js","skipped":false,"dir":"test"},{"name":"should return true if bit is set in storage","suites":["isOptedOutOfCid()"],"updatePoint":{"line":891,"column":51,"index":34927},"line":891,"code":"    it('should return true if bit is set in storage', () => {\n      storageGetStub.withArgs('amp-cid-optout').returns(Promise.resolve(true));\n      return isOptedOutOfCid(ampdoc).then(isOut => {\n        expect(isOut).to.be.true;\n      });\n    });","file":"unit/test-cid.js","skipped":false,"dir":"test"},{"name":"should return false if bit is not set in storage","suites":["isOptedOutOfCid()"],"updatePoint":{"line":897,"column":56,"index":35179},"line":897,"code":"    it('should return false if bit is not set in storage', () => {\n      storageGetStub.withArgs('amp-cid-optout').returns(Promise.resolve(null));\n      return isOptedOutOfCid(ampdoc).then(isOut => {\n        expect(isOut).to.be.false;\n      });\n    });","file":"unit/test-cid.js","skipped":false,"dir":"test"},{"name":"should return false if storage get fails","suites":["isOptedOutOfCid()"],"updatePoint":{"line":903,"column":48,"index":35424},"line":903,"code":"    it('should return false if storage get fails', () => {\n      storageGetStub.withArgs('amp-cid-optout').returns(Promise.reject('Fail'));\n      return isOptedOutOfCid(ampdoc).then(isOut => {\n        expect(isOut).to.be.false;\n      });\n    });","file":"unit/test-cid.js","skipped":false,"dir":"test"},{"name":"block by tagName","suites":["block by meta tags"],"updatePoint":{"line":16,"column":24,"index":462},"line":16,"code":"    it('block by tagName', () => {\n      doc.head.appendChild(meta);\n      const element = doc.createElement('amp-test');\n      element.getAmpDoc = () => {\n        return env.ampdoc;\n      };\n      doc.body.appendChild(element);\n      expect(shouldBlockOnConsentByMeta(element)).to.be.true;\n    });","file":"unit/test-consent.js","skipped":false,"dir":"test"},{"name":"block by lowercase tagName","suites":["block by meta tags"],"updatePoint":{"line":25,"column":34,"index":771},"line":25,"code":"    it('block by lowercase tagName', () => {\n      head.appendChild(meta);\n      const element = doc.createElement('amp-ad');\n      element.getAmpDoc = () => {\n        return env.ampdoc;\n      };\n      doc.body.appendChild(element);\n      expect(shouldBlockOnConsentByMeta(element)).to.be.true;\n    });","file":"unit/test-consent.js","skipped":false,"dir":"test"},{"name":"not block unspecified element","suites":["block by meta tags"],"updatePoint":{"line":34,"column":37,"index":1077},"line":34,"code":"    it('not block unspecified element', () => {\n      head.appendChild(meta);\n      const element = doc.createElement('amp-not-exist');\n      element.getAmpDoc = () => {\n        return env.ampdoc;\n      };\n      doc.body.appendChild(element);\n      expect(shouldBlockOnConsentByMeta(element)).to.be.false;\n    });","file":"unit/test-consent.js","skipped":false,"dir":"test"},{"name":"handles white space","suites":["block by meta tags"],"updatePoint":{"line":43,"column":27,"index":1381},"line":43,"code":"    it('handles white space', () => {\n      meta = doc.createElement('meta');\n      meta.setAttribute('name', 'amp-consent-blocking');\n      meta.setAttribute('content', ' amp-this,    amp-that  ');\n      head.appendChild(meta);\n      const element = doc.createElement('amp-that');\n      element.getAmpDoc = () => {\n        return env.ampdoc;\n      };\n      doc.body.appendChild(element);\n      expect(shouldBlockOnConsentByMeta(element)).to.be.true;\n    });","file":"unit/test-consent.js","skipped":false,"dir":"test"},{"name":"only work with tagName","suites":["block by meta tags"],"updatePoint":{"line":55,"column":30,"index":1843},"line":55,"code":"    it('only work with tagName', () => {\n      meta = doc.createElement('meta');\n      meta.setAttribute('name', 'amp-consent-blocking');\n      meta.setAttribute('content', 'amp-this:name,amp-this[name]');\n      head.appendChild(meta);\n      const element = doc.createElement('amp-this');\n      element.getAmpDoc = () => {\n        return env.ampdoc;\n      };\n      doc.body.appendChild(element);\n      expect(shouldBlockOnConsentByMeta(element)).to.be.false;\n    });","file":"unit/test-consent.js","skipped":false,"dir":"test"},{"name":"should return null for no cookie, malformed, or not found","suites":[],"updatePoint":{"line":20,"column":63,"index":580},"line":20,"code":"  it('should return null for no cookie, malformed, or not found', () => {\n    expect(doc.cookie).to.equal('');\n    expect(getCookie(win, 'c1')).to.be.null;\n    expect(getCookie(win, 'c1')).to.be.null;\n    doc.cookie = 'c1';\n    expect(getCookie(win, 'c1')).to.be.null;\n    doc.cookie = 'e2=1';\n    expect(getCookie(win, 'c1')).to.be.null;\n  });","file":"unit/test-cookies.js","skipped":false,"dir":"test"},{"name":"should return value when found","suites":[],"updatePoint":{"line":29,"column":36,"index":898},"line":29,"code":"  it('should return value when found', () => {\n    doc.cookie = 'c1=1';\n    expect(getCookie(win, 'c1')).to.equal('1');\n    doc.cookie = ' c2 = 2 ';\n    expect(doc.cookie).to.equal('c1=1; c2 = 2 ');\n    expect(getCookie(win, 'c1')).to.equal('1');\n    expect(getCookie(win, 'c2')).to.equal('2');\n  });","file":"unit/test-cookies.js","skipped":false,"dir":"test"},{"name":"should return value for an escaped cookie name","suites":[],"updatePoint":{"line":37,"column":52,"index":1215},"line":37,"code":"  it('should return value for an escaped cookie name', () => {\n    doc.cookie = 'c%26=1';\n    expect(doc.cookie).to.equal('c%26=1');\n    expect(getCookie(win, 'c&')).to.equal('1');\n  });","file":"unit/test-cookies.js","skipped":false,"dir":"test"},{"name":"should return an unescaped value","suites":[],"updatePoint":{"line":42,"column":38,"index":1388},"line":42,"code":"  it('should return an unescaped value', () => {\n    doc.cookie = 'c1=1%26';\n    expect(doc.cookie).to.equal('c1=1%26');\n    expect(getCookie(win, 'c1')).to.equal('1&');\n  });","file":"unit/test-cookies.js","skipped":false,"dir":"test"},{"name":"should write the cookie","suites":[],"updatePoint":{"line":47,"column":29,"index":1555},"line":47,"code":"  it('should write the cookie', () => {\n    setCookie(win, 'c&1', 'v&1', Date.now() + BASE_CID_MAX_AGE_MILLIS);\n    expect(doc.lastSetCookieRaw).to.equal('c%261=v%261; path=/; expires=Tue, 01 Jan 2019 08:00:00 GMT');\n    expect(doc.cookie).to.equal('c%261=v%261');\n  });","file":"unit/test-cookies.js","skipped":false,"dir":"test"},{"name":"should respect the secure option","suites":[],"updatePoint":{"line":52,"column":38,"index":1835},"line":52,"code":"  it('should respect the secure option', () => {\n    const date = Date.now() + BASE_CID_MAX_AGE_MILLIS;\n    const utcDate = new Date(date).toUTCString();\n    setCookie(win, 'name', 'val', date, {\n      secure: 'true'\n    });\n    expect(doc.lastSetCookieRaw).to.equal(`name=val; path=/; expires=${utcDate}; Secure`);\n    expect(doc.cookie).to.equal('name=val');\n  });","file":"unit/test-cookies.js","skipped":false,"dir":"test"},{"name":"getHighestAvailableDomain without meta tag","suites":[],"updatePoint":{"line":61,"column":48,"index":2212},"line":61,"code":"  it('getHighestAvailableDomain without meta tag', () => {\n    // Proxy Origin\n    win.location = 'https://foo-bar.cdn.ampproject.org/c/foo.bar.com';\n    expect(getHighestAvailableDomain(win)).to.be.null;\n    win.location = 'https://bar.com';\n    expect(getHighestAvailableDomain(win)).to.equal('bar.com');\n    win.location = 'https://bar.net';\n    expect(getHighestAvailableDomain(win)).to.equal('bar.net');\n    win.location = 'https://foo.bar.com';\n    expect(getHighestAvailableDomain(win)).to.equal('bar.com');\n    doc.publicSuffixList = ['bar.com'];\n    win.location = 'https://bar.com';\n    expect(getHighestAvailableDomain(win)).to.be.null;\n    win.location = 'https://bar.net';\n    expect(getHighestAvailableDomain(win)).to.equal('bar.net');\n    win.location = 'https://foo.bar.com';\n    expect(getHighestAvailableDomain(win)).to.equal('foo.bar.com');\n    expect(doc.cookie).to.equal('');\n\n    // Special case, has test cookie name conflict\n    win.location = 'https://foo.bar.com';\n    doc.cookie = '-amp-cookie-test-tmp=test';\n    expect(getHighestAvailableDomain(win)).to.equal('foo.bar.com');\n    expect(doc.cookie).to.equal('-amp-cookie-test-tmp=test');\n  });","file":"unit/test-cookies.js","skipped":false,"dir":"test"},{"name":"getHigestAvaibleDomain in valid meta tag","suites":[],"updatePoint":{"line":86,"column":46,"index":3383},"line":86,"code":"  it('getHigestAvaibleDomain in valid meta tag', () => {\n    win.location = 'https://abc.foo.bar.com';\n    expect(getHighestAvailableDomain(win)).to.equal('bar.com');\n    let meta = doc.createElement('meta');\n    meta.setAttribute('name', 'amp-cookie-scope');\n    meta.setAttribute('content', 'foo.bar.com');\n    doc.head.appendChild(meta);\n    expect(getHighestAvailableDomain(win)).to.equal('foo.bar.com');\n    meta.remove();\n    win.location = 'https://abc-foo-bar.cdn.ampproject.org/c/foo.bar.com';\n    expect(getHighestAvailableDomain(win)).to.be.null;\n    meta = doc.createElement('meta');\n    meta.setAttribute('name', 'amp-cookie-scope');\n    meta.setAttribute('content', 'foo.bar.com');\n    doc.head.appendChild(meta);\n    expect(getHighestAvailableDomain(win)).to.equal('foo.bar.com');\n  });","file":"unit/test-cookies.js","skipped":false,"dir":"test"},{"name":"getHigestAvaibleDomain with invalid meta tag","suites":[],"updatePoint":{"line":103,"column":50,"index":4189},"line":103,"code":"  it('getHigestAvaibleDomain with invalid meta tag', () => {\n    win.location = 'https://foo.bar.com';\n    expect(getHighestAvailableDomain(win)).to.equal('bar.com');\n    let meta = doc.createElement('meta');\n    meta.setAttribute('name', 'amp-cookie-scope');\n    meta.setAttribute('content', 'invalid.com');\n    doc.head.appendChild(meta);\n    expect(getHighestAvailableDomain(win)).to.equal('foo.bar.com');\n    meta.remove();\n    win.location = 'https://foo-bar.cdn.ampproject.org/c/foo.bar.com';\n    expect(getHighestAvailableDomain(win)).to.be.null;\n    meta = doc.createElement('meta');\n    meta.setAttribute('name', 'amp-cookie-scope');\n    meta.setAttribute('content', 'invalid.com');\n    doc.head.appendChild(meta);\n    expect(getHighestAvailableDomain(win)).to.equal('foo.bar.com');\n  });","file":"unit/test-cookies.js","skipped":false,"dir":"test"},{"name":"should write the cookie to the right domain on origin","suites":[],"updatePoint":{"line":120,"column":59,"index":4996},"line":120,"code":"  it('should write the cookie to the right domain on origin', () => {\n    function test(url, targetDomain, opt_allowProxyOrigin) {\n      expect(doc.cookie).to.equal('');\n      win.location = url;\n      setCookie(win, 'c&1', 'v&1', Date.now() + BASE_CID_MAX_AGE_MILLIS, {\n        highestAvailableDomain: true,\n        allowOnProxyOrigin: opt_allowProxyOrigin\n      });\n      expect(doc.lastSetCookieRaw).to.equal(`c%261=v%261; path=/; domain=${targetDomain}; ` + 'expires=Tue, 01 Jan 2019 08:00:00 GMT');\n      expect(doc.cookie).to.equal('c%261=v%261');\n      // Erase cookie\n      setCookie(win, 'c&1', 'v&1', Date.now() - 1000, {\n        highestAvailableDomain: true,\n        allowOnProxyOrigin: opt_allowProxyOrigin\n      });\n      expect(doc.cookie).to.equal('');\n    }\n\n    //example.com\n    test('https://www.example.com/test.html', 'example.com');\n    test('https://123.www.example.com/test.html', 'example.com');\n    test('https://example.com/test.html', 'example.com');\n    test('https://www.example.net', 'example.net');\n    doc.publicSuffixList = ['example.com'];\n    test('https://123.www.example.com/test.html', 'www.example.com');\n  });","file":"unit/test-cookies.js","skipped":false,"dir":"test"},{"name":"write cookie to right domain on proxy","suites":[],"updatePoint":{"line":146,"column":43,"index":6131},"line":146,"code":"  it('write cookie to right domain on proxy', () => {\n    win.location = 'https://foo.cdn.ampproject.org/test.html';\n    setCookie(win, 'c&1', 'v&1', Date.now() + BASE_CID_MAX_AGE_MILLIS, {\n      domain: 'foo.cdn.ampproject.org',\n      allowOnProxyOrigin: true\n    });\n    expect(doc.lastSetCookieRaw).to.equal(`c%261=v%261; path=/; domain=foo.cdn.ampproject.org; ` + 'expires=Tue, 01 Jan 2019 08:00:00 GMT');\n    expect(doc.cookie).to.equal('c%261=v%261');\n\n    // Fail if allowOnProxyOrigin is false\n    expect(() => {\n      allowConsoleError(() => {\n        setCookie(win, 'c&1', 'v&1', Date.now() + BASE_CID_MAX_AGE_MILLIS, {});\n      });\n    }).to.throw(/Should never attempt to set cookie on proxy origin\\: c\\&1/);\n    win.location = 'https://CDN.ampproject.org/test.html';\n    expect(() => {\n      allowConsoleError(() => {\n        setCookie(win, 'c&1', 'v&1', Date.now() + BASE_CID_MAX_AGE_MILLIS, {});\n      });\n    }).to.throw(/Should never attempt to set cookie on proxy origin\\: c\\&1/);\n    win.location = 'https://foo.bar.cdn.ampproject.org/test.html';\n    expect(() => {\n      allowConsoleError(() => {\n        setCookie(win, 'c&1', 'v&1', Date.now() + BASE_CID_MAX_AGE_MILLIS, {});\n      });\n    }).to.throw(/in depth check/);\n    win.location = 'http://&&&.CDN.ampproject.org/test.html';\n    expect(() => {\n      allowConsoleError(() => {\n        setCookie(win, 'c&1', 'v&1', Date.now() + BASE_CID_MAX_AGE_MILLIS, {});\n      });\n    }).to.throw(/in depth check/);\n\n    // Can't use higestAvailableDomain when allowOnProxyOrigin\n    expect(() => {\n      allowConsoleError(() => {\n        setCookie(win, 'c&1', 'v&1', Date.now() + BASE_CID_MAX_AGE_MILLIS, {\n          allowOnProxyOrigin: true,\n          highestAvailableDomain: true\n        });\n      });\n    }).to.throw(/specify domain explicitly/);\n\n    // Cannot write to 'ampproject.org'\n    setCookie(win, 'c&1', 'v&1', Date.now() + BASE_CID_MAX_AGE_MILLIS, {\n      domain: 'ampproject.org',\n      allowOnProxyOrigin: true\n    });\n    expect(doc.lastSetCookieRaw).to.equal(`c%261=delete; path=/; domain=ampproject.org; ` + 'expires=Thu, 01 Jan 1970 00:00:00 GMT');\n    expect(doc.cookie).to.equal('');\n  });","file":"unit/test-cookies.js","skipped":false,"dir":"test"},{"name":"should hash \"abc\" in sha384","suites":[],"updatePoint":{"line":26,"column":37,"index":938},"line":26,"code":"      it('should hash \"abc\" in sha384', () => {\n        if (expectedError) {\n          expectAsyncConsoleError(expectedError);\n        }\n        return crypto.sha384('abc').then(buffer => {\n          expect(buffer.length).to.equal(48);\n          expect(buffer[0]).to.equal(203);\n          expect(buffer[1]).to.equal(0);\n          expect(buffer[47]).to.equal(167);\n        });\n      });","file":"unit/test-crypto.js","skipped":false,"dir":"test"},{"name":"should hash [1,2,3] in sha384","suites":[],"updatePoint":{"line":37,"column":39,"index":1326},"line":37,"code":"      it('should hash [1,2,3] in sha384', () => {\n        if (expectedError) {\n          expectAsyncConsoleError(expectedError);\n        }\n        return crypto.sha384(uint8Array([1, 2, 3])).then(buffer => {\n          expect(buffer.length).to.equal(48);\n          expect(buffer[0]).to.equal(134);\n          expect(buffer[1]).to.equal(34);\n          expect(buffer[47]).to.equal(246);\n        });\n      });","file":"unit/test-crypto.js","skipped":false,"dir":"test"},{"name":"should hash \"abc\" in sha384Base64","suites":[],"updatePoint":{"line":48,"column":43,"index":1735},"line":48,"code":"      it('should hash \"abc\" in sha384Base64', () => {\n        if (expectedError) {\n          expectAsyncConsoleError(expectedError);\n        }\n        return expect(crypto.sha384Base64('abc')).to.eventually.equal('ywB1P0WjXou1oD1pmsZQBycsMqsO3tFjGotgWkP_W-2AhgcroefMI1i67KE0yCWn');\n      });","file":"unit/test-crypto.js","skipped":false,"dir":"test"},{"name":"should hash \"foobar\" in sha384Base64","suites":[],"updatePoint":{"line":54,"column":46,"index":2030},"line":54,"code":"      it('should hash \"foobar\" in sha384Base64', () => {\n        if (expectedError) {\n          expectAsyncConsoleError(expectedError);\n        }\n        return expect(crypto.sha384Base64('foobar')).to.eventually.equal('PJww2fZl501RXIQpYNSkUcg6ASX9Pec5LXs3IxrxDHLqWK7fzfiaV2W_kCr5Ps8G');\n      });","file":"unit/test-crypto.js","skipped":false,"dir":"test"},{"name":"should hash [1,2,3] in sha384","suites":[],"updatePoint":{"line":60,"column":39,"index":2321},"line":60,"code":"      it('should hash [1,2,3] in sha384', () => {\n        if (expectedError) {\n          expectAsyncConsoleError(expectedError);\n        }\n        return expect(crypto.sha384Base64(uint8Array([1, 2, 3]))).to.eventually.equal('hiKdxtL_vqxzgHRBVKpwApHAZDUqDb3H' + 'e57T8sjh2sTcMlhn053f8dJim3o5PUf2');\n      });","file":"unit/test-crypto.js","skipped":false,"dir":"test"},{"name":"should throw when input contains chars out of range [0,255]","suites":[],"updatePoint":{"line":66,"column":69,"index":2660},"line":66,"code":"      it('should throw when input contains chars out of range [0,255]', () => {\n        allowConsoleError(() => {\n          expect(() => crypto.sha384('abc今')).to.throw();\n          expect(() => crypto.sha384Base64('abc今')).to.throw();\n          expect(() => crypto.uniform('abc今')).to.throw();\n        });\n      });","file":"unit/test-crypto.js","skipped":false,"dir":"test"},{"name":"should hash \"abc\" to uniform number","suites":[],"updatePoint":{"line":73,"column":45,"index":2953},"line":73,"code":"      it('should hash \"abc\" to uniform number', () => {\n        if (expectedError) {\n          expectAsyncConsoleError(expectedError);\n        }\n        return crypto.uniform('abc').then(result => {\n          expect(result.toFixed(6)).to.equal('0.792976');\n        });\n      });","file":"unit/test-crypto.js","skipped":false,"dir":"test"},{"name":"native API result should exactly equal to crypto lib result","suites":[],"updatePoint":{"line":125,"column":65,"index":4458},"line":125,"code":"  it('native API result should exactly equal to crypto lib result', () => {\n    const fakeWin = {\n      ...win,\n      crypto: null\n    };\n    return Promise.all([createCrypto(win).sha384('abc'), createCrypto(fakeWin).sha384('abc')]).then(results => {\n      expect(results[0]).to.jsonEqual(results[1]);\n    });\n  });","file":"unit/test-crypto.js","skipped":false,"dir":"test"},{"name":"should register a new class immediately if no need to wait","suites":[],"updatePoint":{"line":37,"column":64,"index":1423},"line":37,"code":"  it('should register a new class immediately if no need to wait', () => {\n    upgradeOrRegisterElement(win, 'amp-element1', ConcreteElement);\n    expect(getElementClassForTesting(win, 'amp-element1')).to.equal(ConcreteElement);\n  });","file":"unit/test-custom-element-registry.js","skipped":false,"dir":"test"},{"name":"should register a new class immediately for requiresShadowDom if no polyfilling needed","suites":[],"updatePoint":{"line":41,"column":92,"index":1686},"line":41,"code":"  it('should register a new class immediately for requiresShadowDom if no polyfilling needed', () => {\n    if (!win.Element.prototype.attachShadow) {\n      win.Element.prototype.attachShadow = () => {};\n    }\n    upgradeOrRegisterElement(win, 'amp-element1', ConcreteElementWithShadow);\n    expect(getElementClassForTesting(win, 'amp-element1')).to.equal(ConcreteElementWithShadow);\n  });","file":"unit/test-custom-element-registry.js","skipped":false,"dir":"test"},{"name":"should wait for the shadow DOM polyfill before registering a class","suites":[],"updatePoint":{"line":48,"column":72,"index":2055},"line":48,"code":"  it('should wait for the shadow DOM polyfill before registering a class', async () => {\n    if (win.Element.prototype.attachShadow) {\n      delete win.Element.prototype.attachShadow;\n    }\n    const extensions = Services.extensionsFor(win);\n    const extensionsMock = env.sandbox.mock(extensions);\n    const polyfillPromise = Promise.resolve();\n    extensionsMock.expects('importUnwrapped').withExactArgs(win, 'amp-shadow-dom-polyfill').returns(polyfillPromise).once();\n    upgradeOrRegisterElement(win, 'amp-element1', ConcreteElementWithShadow);\n    expect(getElementClassForTesting(win, 'amp-element1')).to.not.exist;\n\n    // Resolve polyfill.\n    await polyfillPromise;\n    expect(getElementClassForTesting(win, 'amp-element1')).to.equal(ConcreteElementWithShadow);\n    extensionsMock.verify();\n  });","file":"unit/test-custom-element-registry.js","skipped":false,"dir":"test"},{"name":"should go through stub/upgrade cycle","suites":[],"updatePoint":{"line":64,"column":42,"index":2831},"line":64,"code":"  it('should go through stub/upgrade cycle', () => {\n    registerElement(win, 'amp-element1', ElementStub);\n    expect(getElementClassForTesting(win, 'amp-element1')).to.equal(ElementStub);\n\n    // Pre-download elements are created as ElementStub.\n    const element1 = doc.createElement('amp-element1');\n    element1.setAttribute('layout', 'nodisplay');\n    doc.body.appendChild(element1);\n    expect(getImplSyncForTesting(element1)).to.be.null;\n\n    // Post-download, elements are upgraded.\n    upgradeOrRegisterElement(win, 'amp-element1', ConcreteElement);\n    expect(getElementClassForTesting(win, 'amp-element1')).to.equal(ConcreteElement);\n    expect(getImplSyncForTesting(element1)).to.be.instanceOf(ConcreteElement);\n\n    // Elements created post-download and immediately upgraded.\n    const element2 = doc.createElement('amp-element1');\n    element2.setAttribute('layout', 'nodisplay');\n    doc.body.appendChild(element2);\n    expect(getImplSyncForTesting(element2)).to.be.instanceOf(ConcreteElement);\n  });","file":"unit/test-custom-element-registry.js","skipped":false,"dir":"test"},{"name":"should only set extensionsKnown when body is available","suites":[],"updatePoint":{"line":85,"column":60,"index":3866},"line":85,"code":"  it('should only set extensionsKnown when body is available', () => {\n    const head = document.createElement('fake-head');\n    const script = document.createElement('script');\n    script.setAttribute('custom-element', 'amp-element2');\n    Object.defineProperty(script, 'src', {\n      value: 'https://cdn.ampproject.org/v0/amp-element2-0.2.js'\n    });\n    head.appendChild(script);\n    env.sandbox.stub(ampdoc, 'getHeadNode').returns(head);\n    env.sandbox.stub(ampdoc, 'setExtensionsKnown');\n    const isBodyAvailableStub = env.sandbox.stub(ampdoc, 'isBodyAvailable');\n\n    // Body is not available.\n    isBodyAvailableStub.returns(false);\n    stubElementsForDoc(ampdoc);\n    expect(ampdoc.declaresExtension('amp-element2')).to.be.true;\n    expect(ampdoc.declaresExtension('amp-element2', '0.2')).to.be.true;\n    expect(ampdoc.setExtensionsKnown).to.not.be.called;\n\n    // Body is not available.\n    isBodyAvailableStub.returns(true);\n    stubElementsForDoc(ampdoc);\n    expect(ampdoc.declaresExtension('amp-element2')).to.be.true;\n    expect(ampdoc.setExtensionsKnown).to.be.calledOnce;\n  });","file":"unit/test-custom-element-registry.js","skipped":false,"dir":"test"},{"name":"should mark stubbed element as declared","suites":[],"updatePoint":{"line":110,"column":45,"index":4947},"line":110,"code":"  it('should mark stubbed element as declared', () => {\n    expect(ampdoc.declaresExtension('amp-element2')).to.be.false;\n    const head = document.createElement('fake-head');\n    const script = document.createElement('script');\n    script.setAttribute('custom-element', 'amp-element2');\n    Object.defineProperty(script, 'src', {\n      value: 'https://cdn.ampproject.org/v0/amp-element2-0.2.js'\n    });\n    head.appendChild(script);\n    env.sandbox.stub(ampdoc, 'getHeadNode').callsFake(() => head);\n    stubElementsForDoc(ampdoc);\n    expect(ampdoc.declaresExtension('amp-element2')).to.be.true;\n    expect(ampdoc.declaresExtension('amp-element2', '0.2')).to.be.true;\n    expect(win.__AMP_EXTENDED_ELEMENTS['amp-element2']).to.equal(ElementStub);\n  });","file":"unit/test-custom-element-registry.js","skipped":false,"dir":"test"},{"name":"should install pre-stubbed element extension","suites":[],"updatePoint":{"line":125,"column":50,"index":5707},"line":125,"code":"  it('should install pre-stubbed element extension', () => {\n    const stub = env.sandbox.stub(extensions, 'installExtensionForDoc');\n    stubElementIfNotKnown(win, 'amp-element2');\n    expect(win.__AMP_EXTENDED_ELEMENTS['amp-element2']).to.equal(ElementStub);\n    expect(ampdoc.declaresExtension('amp-element2')).to.be.false;\n    expect(stub).to.not.be.called;\n    const element = doc.createElement('amp-element2');\n    doc.body.appendChild(element);\n    expect(stub).to.be.calledOnce;\n    expect(stub).to.be.calledWithExactly(ampdoc, 'amp-element2', '0.1');\n  });","file":"unit/test-custom-element-registry.js","skipped":false,"dir":"test"},{"name":"should not install declared pre-stubbed element extension","suites":[],"updatePoint":{"line":136,"column":63,"index":6286},"line":136,"code":"  it('should not install declared pre-stubbed element extension', () => {\n    ampdoc.declareExtension('amp-element2', '0.2');\n    const stub = env.sandbox.stub(extensions, 'installExtensionForDoc');\n    stubElementIfNotKnown(win, 'amp-element2');\n    expect(win.__AMP_EXTENDED_ELEMENTS['amp-element2']).to.equal(ElementStub);\n    expect(ampdoc.declaresExtension('amp-element2')).to.be.true;\n    expect(stub).to.not.be.called;\n    const element = doc.createElement('amp-element2');\n    element.setAttribute('layout', 'nodisplay');\n    doc.body.appendChild(element);\n    expect(stub).to.not.be.called;\n  });","file":"unit/test-custom-element-registry.js","skipped":false,"dir":"test"},{"name":"should not install declared pre-installed element","suites":[],"updatePoint":{"line":148,"column":55,"index":6884},"line":148,"code":"  it('should not install declared pre-installed element', () => {\n    const stub = env.sandbox.stub(extensions, 'installExtensionForDoc');\n    registerElement(win, 'amp-element1', ConcreteElement);\n    expect(win.__AMP_EXTENDED_ELEMENTS['amp-element1']).to.equal(ConcreteElement);\n    expect(ampdoc.declaresExtension('amp-element1')).to.be.true;\n    expect(stub).to.not.be.called;\n    const element = doc.createElement('amp-element1');\n    element.setAttribute('layout', 'nodisplay');\n    doc.body.appendChild(element);\n    expect(stub).to.not.be.called;\n  });","file":"unit/test-custom-element-registry.js","skipped":false,"dir":"test"},{"name":"insert script for amp-ad when script is not included","suites":[],"updatePoint":{"line":159,"column":58,"index":7448},"line":159,"code":"  it('insert script for amp-ad when script is not included', () => {\n    insertElement('amp-ad');\n    expect(doc.head.querySelectorAll('[custom-element=\"amp-ad\"]')).to.have.length(1);\n  });","file":"unit/test-custom-element-registry.js","skipped":false,"dir":"test"},{"name":"insert script for amp-embed when script is not included","suites":[],"updatePoint":{"line":163,"column":61,"index":7641},"line":163,"code":"  it('insert script for amp-embed when script is not included', () => {\n    insertElement('amp-embed');\n    expect(doc.head.querySelectorAll('[custom-element=\"amp-embed\"]')).to.have.length(0);\n    expect(doc.head.querySelectorAll('[custom-element=\"amp-ad\"]')).to.have.length(1);\n  });","file":"unit/test-custom-element-registry.js","skipped":false,"dir":"test"},{"name":"insert script for amp-video when script is not included","suites":[],"updatePoint":{"line":168,"column":61,"index":7926},"line":168,"code":"  it('insert script for amp-video when script is not included', () => {\n    insertElement('amp-video');\n    expect(doc.head.querySelectorAll('[custom-element=\"amp-video\"]')).to.have.length(1);\n  });","file":"unit/test-custom-element-registry.js","skipped":false,"dir":"test"},{"name":"should be stub elements when body available","suites":["no body"],"updatePoint":{"line":228,"column":51,"index":9558},"line":228,"code":"    it('should be stub elements when body available', () => {\n      stubElementsForDoc(ampdoc);\n      expect(win.__AMP_EXTENDED_ELEMENTS).to.exist;\n      expect(win.__AMP_EXTENDED_ELEMENTS['amp-test1']).to.equal(ElementStub);\n      expect(win.__AMP_EXTENDED_ELEMENTS['amp-test2']).to.be.undefined;\n      expect(win.customElements.define).to.be.calledOnce;\n      expect(win.customElements.define.firstCall.args[0]).to.equal('amp-test1');\n      expect(ampdoc.declaresExtension('amp-test1')).to.be.true;\n      expect(ampdoc.declaresExtension('amp-test1', '0.2')).to.be.true;\n      expect(ampdoc.declaresExtension('amp-test2')).to.be.false;\n    });","file":"unit/test-custom-element-registry.js","skipped":false,"dir":"test"},{"name":"should repeat stubbing when body is not available","suites":["no body"],"updatePoint":{"line":239,"column":57,"index":10209},"line":239,"code":"    it('should repeat stubbing when body is not available', () => {\n      doc.body = null; // Body not available\n\n      stubElementsForDoc(ampdoc);\n      expect(win.__AMP_EXTENDED_ELEMENTS).to.exist;\n      expect(win.__AMP_EXTENDED_ELEMENTS['amp-test1']).to.equal(ElementStub);\n      expect(win.__AMP_EXTENDED_ELEMENTS['amp-test2']).to.be.undefined;\n      expect(win.customElements.define).to.be.calledOnce;\n      expect(win.customElements.define.firstCall.args[0]).to.equal('amp-test1');\n      expect(ampdoc.declaresExtension('amp-test1')).to.be.true;\n      expect(ampdoc.declaresExtension('amp-test1', '0.2')).to.be.true;\n      expect(ampdoc.declaresExtension('amp-test2')).to.be.false;\n\n      // Add more elements\n      const elem2 = {\n        getAttribute(name) {\n          if (name == 'custom-element') {\n            return 'amp-test2';\n          }\n        },\n        hasAttribute(name) {\n          return name == 'custom-element' || name == 'src';\n        },\n        addEventListener() {},\n        src: 'https://cdn.ampproject.org/v0/amp-test2-0.3.js',\n        ownerDocument: doc\n      };\n      elements.push(elem2);\n\n      // Body available. Stub again.\n      doc.body = {};\n      stubElementsForDoc(ampdoc);\n      expect(win.__AMP_EXTENDED_ELEMENTS['amp-test1']).to.equal(ElementStub);\n      expect(win.__AMP_EXTENDED_ELEMENTS['amp-test2']).to.equal(ElementStub);\n      expect(win.customElements.define).to.have.callCount(2);\n      expect(win.customElements.define.getCall(1).args[0]).to.equal('amp-test2');\n      expect(ampdoc.declaresExtension('amp-test2')).to.be.true;\n      expect(ampdoc.declaresExtension('amp-test2', '0.3')).to.be.true;\n    });","file":"unit/test-custom-element-registry.js","skipped":false,"dir":"test"},{"name":"should stub element when not stubbed yet","suites":["no body"],"updatePoint":{"line":278,"column":48,"index":11859},"line":278,"code":"    it('should stub element when not stubbed yet', () => {\n      // First stub is allowed.\n      stubElementIfNotKnown(win, 'amp-test1');\n      expect(win.__AMP_EXTENDED_ELEMENTS).to.exist;\n      expect(win.__AMP_EXTENDED_ELEMENTS['amp-test1']).to.equal(ElementStub);\n      expect(win.customElements.define).to.be.calledOnce;\n      expect(win.customElements.define.firstCall.args[0]).to.equal('amp-test1');\n\n      // Second stub is ignored.\n      stubElementIfNotKnown(win, 'amp-test1');\n      expect(win.customElements.define).to.be.calledOnce;\n    });","file":"unit/test-custom-element-registry.js","skipped":false,"dir":"test"},{"name":"should copy or stub element definitions in a child window","suites":["no body"],"updatePoint":{"line":290,"column":65,"index":12430},"line":290,"code":"    it('should copy or stub element definitions in a child window', () => {\n      stubElementIfNotKnown(win, 'amp-test1');\n      const define = env.sandbox.spy();\n      const childWin = {\n        Object,\n        HTMLElement,\n        customElements: {\n          define\n        }\n      };\n      copyElementToChildWindow(win, childWin, 'amp-test1');\n      expect(childWin.__AMP_EXTENDED_ELEMENTS['amp-test1']).to.equal(ElementStub);\n      const firstCallCount = define.callCount;\n      expect(firstCallCount).to.equal(1);\n      expect(define.getCall(firstCallCount - 1).args[0]).to.equal('amp-test1');\n      copyElementToChildWindow(win, childWin, 'amp-test2');\n      expect(childWin.__AMP_EXTENDED_ELEMENTS['amp-test1']).to.equal(ElementStub);\n      expect(define.callCount).to.be.above(firstCallCount);\n      expect(define.getCall(define.callCount - 1).args[0]).to.equal('amp-test2');\n    });","file":"unit/test-custom-element-registry.js","skipped":false,"dir":"test"},{"name":"should not create impl immediately when attached","suites":["upgrade"],"updatePoint":{"line":59,"column":56,"index":2140},"line":59,"code":"    it('should not create impl immediately when attached', () => {\n      const element = new ElementClass();\n      const removeSpy = env.sandbox.spy(element.classList, 'remove');\n      builderMock.expects('schedule').withExactArgs(element).once();\n      expect(element.isUpgraded()).to.be.false;\n      expect(getImplClassSyncForTesting(element)).to.equal(TestElement);\n      expect(getImplSyncForTesting(element)).to.be.null;\n      expect(element.getBuildPriority()).equal(LayoutPriority_Enum.CONTENT);\n      doc.body.appendChild(element);\n      expect(getImplClassSyncForTesting(element)).to.equal(TestElement);\n      expect(getImplSyncForTesting(element)).to.be.null;\n      expect(element.isUpgraded()).to.be.false;\n      expect(element.readyState).to.equal('building');\n      expect(element.isBuilt()).to.be.false;\n      expect(element.getBuildPriority()).equal(LayoutPriority_Enum.CONTENT);\n      expect(removeSpy).to.have.been.calledWith('amp-unresolved', 'i-amphtml-unresolved');\n    });","file":"unit/test-custom-element-v1.js","skipped":false,"dir":"test"},{"name":"should not upgrade immediately when attached","suites":["upgrade"],"updatePoint":{"line":76,"column":52,"index":3130},"line":76,"code":"    it('should not upgrade immediately when attached', () => {\n      const element = new StubElementClass();\n      builderMock.expects('schedule').withExactArgs(element).once();\n      expect(element.isUpgraded()).to.be.false;\n      expect(getImplClassSyncForTesting(element)).to.be.null;\n      expect(getImplSyncForTesting(element)).to.be.null;\n      expect(element.getBuildPriority()).equal(LayoutPriority_Enum.BACKGROUND);\n      doc.body.appendChild(element);\n      element.upgrade(TestElement);\n      expect(getImplClassSyncForTesting(element)).to.equal(TestElement);\n      expect(getImplSyncForTesting(element)).to.be.null;\n      expect(element.isUpgraded()).to.be.false;\n      expect(element.readyState).to.equal('building');\n      expect(element.isBuilt()).to.be.false;\n      expect(element.getBuildPriority()).equal(LayoutPriority_Enum.CONTENT);\n    });","file":"unit/test-custom-element-v1.js","skipped":false,"dir":"test"},{"name":"should reschedule build when re-attached","suites":["upgrade"],"updatePoint":{"line":92,"column":48,"index":3987},"line":92,"code":"    it('should reschedule build when re-attached', () => {\n      const element = new ElementClass();\n      builderMock.expects('schedule').withExactArgs(element).twice();\n      builderMock.expects('unschedule').withExactArgs(element).once();\n      doc.body.appendChild(element);\n      expect(element.readyState).to.equal('building');\n      doc.body.removeChild(element);\n      expect(element.readyState).to.equal('building');\n      doc.body.appendChild(element);\n      expect(element.readyState).to.equal('building');\n    });","file":"unit/test-custom-element-v1.js","skipped":false,"dir":"test"},{"name":"should reschedule build when re-attached after build","suites":["upgrade"],"updatePoint":{"line":103,"column":60,"index":4525},"line":103,"code":"    it('should reschedule build when re-attached after build', async () => {\n      const element = new ElementClass();\n      builderMock.expects('schedule').withExactArgs(element).twice();\n      builderMock.expects('unschedule').withExactArgs(element).once();\n      doc.body.appendChild(element);\n      expect(element.readyState).to.equal('building');\n      const promise = element.buildInternal();\n      expect(element.readyState).to.equal('building');\n      await promise;\n      expect(element.readyState).to.equal('mounting');\n      doc.body.removeChild(element);\n      expect(element.readyState).to.equal('mounting');\n      doc.body.appendChild(element);\n      expect(element.readyState).to.equal('mounting');\n    });","file":"unit/test-custom-element-v1.js","skipped":false,"dir":"test"},{"name":"should reschedule build when re-attached after build with usesLoading","suites":["upgrade"],"updatePoint":{"line":118,"column":77,"index":5264},"line":118,"code":"    it('should reschedule build when re-attached after build with usesLoading', async () => {\n      env.sandbox.stub(TestElement, 'usesLoading').returns(true);\n      const element = new ElementClass();\n      builderMock.expects('schedule').withExactArgs(element).twice();\n      builderMock.expects('unschedule').withExactArgs(element).once();\n      doc.body.appendChild(element);\n      expect(element.readyState).to.equal('building');\n      const promise = element.buildInternal();\n      expect(element.readyState).to.equal('building');\n      await promise;\n      expect(element.readyState).to.equal('mounting');\n      doc.body.removeChild(element);\n      expect(element.readyState).to.equal('mounting');\n      doc.body.appendChild(element);\n      expect(element.readyState).to.equal('loading');\n    });","file":"unit/test-custom-element-v1.js","skipped":false,"dir":"test"},{"name":"should preconnect on upgrade","suites":["preconnect"],"updatePoint":{"line":147,"column":36,"index":6415},"line":147,"code":"    it('should preconnect on upgrade', () => {\n      env.sandbox.stub(TestElement, 'getPreconnects').returns(['url1', 'url2']);\n      preconnectMock.expects('url').withExactArgs(ampdoc, 'url1', false).once();\n      preconnectMock.expects('url').withExactArgs(ampdoc, 'url2', false).once();\n      const element = new ElementClass();\n      doc.body.appendChild(element);\n      expect(chunkStub).to.be.calledOnce;\n      chunkStub.firstCall.firstArg();\n    });","file":"unit/test-custom-element-v1.js","skipped":false,"dir":"test"},{"name":"should NOT preconnect on upgrade if not urls","suites":["preconnect"],"updatePoint":{"line":156,"column":52,"index":6888},"line":156,"code":"    it('should NOT preconnect on upgrade if not urls', () => {\n      preconnectMock.expects('url').never();\n      const element = new ElementClass();\n      doc.body.appendChild(element);\n      expect(chunkStub).to.not.be.called;\n    });","file":"unit/test-custom-element-v1.js","skipped":false,"dir":"test"},{"name":"should NOT allow build on unupgraded element","suites":["buildInternal"],"updatePoint":{"line":171,"column":52,"index":7470},"line":171,"code":"    it('should NOT allow build on unupgraded element', async () => {\n      expectAsyncConsoleError(/unupgraded/);\n      const element = new StubElementClass();\n      doc.body.appendChild(element);\n      expect(() => element.buildInternal()).to.throw(/unupgraded/);\n      expect(element.isBuilding()).to.be.false;\n      expect(getImplSyncForTesting(element)).to.be.null;\n      expect(buildCallbackStub).to.not.be.called;\n      expect(element.isUpgraded()).to.be.false;\n      expect(element.isBuilt()).to.be.false;\n      expect(element.readyState).to.equal('upgrading');\n    });","file":"unit/test-custom-element-v1.js","skipped":false,"dir":"test"},{"name":"should build a pre-upgraded element","suites":["buildInternal"],"updatePoint":{"line":183,"column":43,"index":8038},"line":183,"code":"    it('should build a pre-upgraded element', async () => {\n      const attachedCallbackStub = env.sandbox.stub(TestElement.prototype, 'attachedCallback');\n      const element = new ElementClass();\n      const getSizerStub = env.sandbox.stub(element, 'getSizer_');\n      doc.body.appendChild(element);\n      const promise = element.buildInternal();\n      expect(element.isBuilding()).to.be.true;\n      expect(getImplSyncForTesting(element)).to.be.null;\n      expect(element.isUpgraded()).to.be.false;\n      expect(element.isBuilt()).to.be.false;\n      expect(element.readyState).to.equal('building');\n      expect(element).to.have.class('i-amphtml-notbuilt');\n      expect(element).to.have.class('amp-notbuilt');\n      expect(element).to.not.have.class('i-amphtml-built');\n      expect(element.signals().get(CommonSignals_Enum.BUILT)).to.be.null;\n      expect(attachedCallbackStub).to.not.be.called;\n      expect(getSizerStub).to.be.calledOnce;\n      await promise;\n      expect(getImplSyncForTesting(element)).to.be.instanceOf(TestElement);\n      expect(buildCallbackStub).to.be.calledOnce;\n      expect(element.isUpgraded()).to.be.true;\n      expect(element.isBuilt()).to.be.true;\n      expect(element.readyState).to.equal('mounting');\n      expect(element).to.not.have.class('i-amphtml-notbuilt');\n      expect(element).to.not.have.class('amp-notbuilt');\n      expect(element).to.have.class('i-amphtml-built');\n      expect(element.signals().get(CommonSignals_Enum.BUILT)).to.exist;\n      expect(attachedCallbackStub).to.be.calledOnce;\n    });","file":"unit/test-custom-element-v1.js","skipped":false,"dir":"test"},{"name":"should mount a pre-upgraded element","suites":["buildInternal"],"updatePoint":{"line":212,"column":43,"index":9585},"line":212,"code":"    it('should mount a pre-upgraded element', async () => {\n      const attachedCallbackStub = env.sandbox.stub(TestElement.prototype, 'attachedCallback');\n      const element = new ElementClass();\n      const getSizerStub = env.sandbox.stub(element, 'getSizer_');\n      doc.body.appendChild(element);\n      const promise = element.mountInternal();\n      expect(element.isBuilding()).to.be.true;\n      expect(getImplSyncForTesting(element)).to.be.null;\n      expect(element.isUpgraded()).to.be.false;\n      expect(element.isBuilt()).to.be.false;\n      expect(element.readyState).to.equal('building');\n      expect(element).to.have.class('i-amphtml-notbuilt');\n      expect(element).to.have.class('amp-notbuilt');\n      expect(element).to.not.have.class('i-amphtml-built');\n      expect(element.signals().get(CommonSignals_Enum.BUILT)).to.be.null;\n      expect(attachedCallbackStub).to.not.be.called;\n      expect(getSizerStub).to.be.calledOnce;\n      await promise;\n      expect(getImplSyncForTesting(element)).to.be.instanceOf(TestElement);\n      expect(buildCallbackStub).to.be.calledOnce;\n      expect(element.isUpgraded()).to.be.true;\n      expect(element.isBuilt()).to.be.true;\n      expect(element.readyState).to.equal('complete');\n      expect(element).to.not.have.class('i-amphtml-notbuilt');\n      expect(element).to.not.have.class('amp-notbuilt');\n      expect(element).to.have.class('i-amphtml-built');\n      expect(element.signals().get(CommonSignals_Enum.BUILT)).to.exist;\n      expect(attachedCallbackStub).to.be.calledOnce;\n    });","file":"unit/test-custom-element-v1.js","skipped":false,"dir":"test"},{"name":"should build an element after upgrade","suites":["buildInternal"],"updatePoint":{"line":241,"column":45,"index":11134},"line":241,"code":"    it('should build an element after upgrade', async () => {\n      const attachedCallbackStub = env.sandbox.stub(TestElement.prototype, 'attachedCallback');\n      const element = new StubElementClass();\n      const getSizerStub = env.sandbox.stub(element, 'getSizer_');\n      doc.body.appendChild(element);\n      element.upgrade(TestElement);\n      const promise = element.buildInternal();\n      expect(element.isBuilding()).to.be.true;\n      expect(getImplSyncForTesting(element)).to.be.null;\n      expect(element.isUpgraded()).to.be.false;\n      expect(element.isBuilt()).to.be.false;\n      expect(element.readyState).to.equal('building');\n      expect(attachedCallbackStub).to.not.be.called;\n      expect(getSizerStub).to.be.calledOnce;\n      await promise;\n      expect(getImplSyncForTesting(element)).to.be.instanceOf(TestElement);\n      expect(buildCallbackStub).to.be.calledOnce;\n      expect(element.isUpgraded()).to.be.true;\n      expect(element.isBuilt()).to.be.true;\n      expect(element.readyState).to.equal('mounting');\n      expect(element).to.not.have.class('i-amphtml-notbuilt');\n      expect(element).to.not.have.class('amp-notbuilt');\n      expect(element).to.have.class('i-amphtml-built');\n      expect(element.signals().get(CommonSignals_Enum.BUILT)).to.exist;\n      expect(attachedCallbackStub).to.be.calledOnce;\n    });","file":"unit/test-custom-element-v1.js","skipped":false,"dir":"test"},{"name":"should mount an element after upgrade","suites":["buildInternal"],"updatePoint":{"line":267,"column":45,"index":12477},"line":267,"code":"    it('should mount an element after upgrade', async () => {\n      const attachedCallbackStub = env.sandbox.stub(TestElement.prototype, 'attachedCallback');\n      const element = new StubElementClass();\n      const getSizerStub = env.sandbox.stub(element, 'getSizer_');\n      doc.body.appendChild(element);\n      element.upgrade(TestElement);\n      const promise = element.mountInternal();\n      expect(element.isBuilding()).to.be.true;\n      expect(getImplSyncForTesting(element)).to.be.null;\n      expect(element.isUpgraded()).to.be.false;\n      expect(element.isBuilt()).to.be.false;\n      expect(element.readyState).to.equal('building');\n      expect(attachedCallbackStub).to.not.be.called;\n      expect(getSizerStub).to.be.calledOnce;\n      await promise;\n      expect(getImplSyncForTesting(element)).to.be.instanceOf(TestElement);\n      expect(buildCallbackStub).to.be.calledOnce;\n      expect(element.isUpgraded()).to.be.true;\n      expect(element.isBuilt()).to.be.true;\n      expect(element.readyState).to.equal('complete');\n      expect(element).to.not.have.class('i-amphtml-notbuilt');\n      expect(element).to.not.have.class('amp-notbuilt');\n      expect(element).to.have.class('i-amphtml-built');\n      expect(element.signals().get(CommonSignals_Enum.BUILT)).to.exist;\n      expect(attachedCallbackStub).to.be.calledOnce;\n    });","file":"unit/test-custom-element-v1.js","skipped":false,"dir":"test"},{"name":"should continue in loading state for usesLoading","suites":["buildInternal"],"updatePoint":{"line":293,"column":56,"index":13831},"line":293,"code":"    it('should continue in loading state for usesLoading', async () => {\n      env.sandbox.stub(TestElement, 'usesLoading').returns(true);\n      const element = new ElementClass();\n      const getSizerStub = env.sandbox.stub(element, 'getSizer_');\n      doc.body.appendChild(element);\n      await element.mountInternal();\n      expect(buildCallbackStub).to.be.calledOnce;\n      expect(element.readyState).to.equal('loading');\n      expect(getSizerStub).to.be.calledOnce;\n    });","file":"unit/test-custom-element-v1.js","skipped":false,"dir":"test"},{"name":"should continue in a state if modified by buildCallback","suites":["buildInternal"],"updatePoint":{"line":303,"column":63,"index":14317},"line":303,"code":"    it('should continue in a state if modified by buildCallback', async () => {\n      buildCallbackStub.callsFake(function () {\n        this.setReadyState('loading');\n      });\n      const element = new ElementClass();\n      doc.body.appendChild(element);\n      await element.buildInternal();\n      expect(buildCallbackStub).to.be.calledOnce;\n      expect(element.readyState).to.equal('loading');\n    });","file":"unit/test-custom-element-v1.js","skipped":false,"dir":"test"},{"name":"should continue in a state if modified by buildCallback with usesLoading","suites":["buildInternal"],"updatePoint":{"line":313,"column":80,"index":14739},"line":313,"code":"    it('should continue in a state if modified by buildCallback with usesLoading', async () => {\n      env.sandbox.stub(TestElement, 'usesLoading').returns(true);\n      buildCallbackStub.callsFake(function () {\n        this.setReadyState('complete');\n      });\n      const element = new ElementClass();\n      doc.body.appendChild(element);\n      await element.buildInternal();\n      expect(buildCallbackStub).to.be.calledOnce;\n      expect(element.readyState).to.equal('complete');\n    });","file":"unit/test-custom-element-v1.js","skipped":false,"dir":"test"},{"name":"should continue in a state if modified by mountCallback with usesLoading","suites":["buildInternal"],"updatePoint":{"line":324,"column":80,"index":15229},"line":324,"code":"    it('should continue in a state if modified by mountCallback with usesLoading', async () => {\n      env.sandbox.stub(TestElement, 'usesLoading').returns(true);\n      mountCallbackStub.callsFake(function () {\n        this.setReadyState('complete');\n      });\n      const element = new ElementClass();\n      doc.body.appendChild(element);\n      await element.mountInternal();\n      expect(buildCallbackStub).to.be.calledOnce;\n      expect(element.readyState).to.equal('complete');\n    });","file":"unit/test-custom-element-v1.js","skipped":false,"dir":"test"},{"name":"should set the failing state if buildCallback fails","suites":["buildInternal"],"updatePoint":{"line":335,"column":59,"index":15698},"line":335,"code":"    it('should set the failing state if buildCallback fails', async () => {\n      expectAsyncConsoleError(/intentional/);\n      buildCallbackStub.throws(new Error('intentional'));\n      const element = new ElementClass();\n      doc.body.appendChild(element);\n      try {\n        await element.buildInternal();\n        throw new Error('must have failed');\n      } catch (e) {\n        expect(e.toString()).to.match(/intentional/);\n      }\n      expect(element.readyState).to.equal('error');\n      expect(element.signals().get(CommonSignals_Enum.BUILT)).to.exist;\n      expect(element.signals().get(CommonSignals_Enum.BUILT).toString()).to.match(/intentional/);\n    });","file":"unit/test-custom-element-v1.js","skipped":false,"dir":"test"},{"name":"should set the failing state if buildCallback rejects","suites":["buildInternal"],"updatePoint":{"line":350,"column":61,"index":16367},"line":350,"code":"    it('should set the failing state if buildCallback rejects', async () => {\n      expectAsyncConsoleError(/intentional/);\n      buildCallbackStub.rejects(new Error('intentional'));\n      const element = new ElementClass();\n      doc.body.appendChild(element);\n      try {\n        await element.buildInternal();\n        throw new Error('must have failed');\n      } catch (e) {\n        expect(e.toString()).to.match(/intentional/);\n      }\n      expect(element.readyState).to.equal('error');\n    });","file":"unit/test-custom-element-v1.js","skipped":false,"dir":"test"},{"name":"should set the failing state if mountCallback fails","suites":["buildInternal"],"updatePoint":{"line":363,"column":59,"index":16865},"line":363,"code":"    it('should set the failing state if mountCallback fails', async () => {\n      expectAsyncConsoleError(/intentional/);\n      mountCallbackStub.throws(new Error('intentional'));\n      const element = new ElementClass();\n      doc.body.appendChild(element);\n      try {\n        await element.mountInternal();\n        throw new Error('must have failed');\n      } catch (e) {\n        expect(e.toString()).to.match(/intentional/);\n      }\n      expect(element.readyState).to.equal('error');\n      expect(element.signals().get(CommonSignals_Enum.MOUNTED)).to.exist;\n      expect(element.signals().get(CommonSignals_Enum.MOUNTED).toString()).to.match(/intentional/);\n    });","file":"unit/test-custom-element-v1.js","skipped":false,"dir":"test"},{"name":"should only execute build once","suites":["buildInternal"],"updatePoint":{"line":378,"column":38,"index":17515},"line":378,"code":"    it('should only execute build once', async () => {\n      const element = new ElementClass();\n      doc.body.appendChild(element);\n      const promise = element.buildInternal();\n      const promise2 = element.buildInternal();\n      expect(promise2).to.equal(promise);\n      await promise;\n      await promise2;\n      const promise3 = element.buildInternal();\n      expect(promise3).to.equal(promise);\n      expect(buildCallbackStub).to.be.calledOnce;\n    });","file":"unit/test-custom-element-v1.js","skipped":false,"dir":"test"},{"name":"should continue build with a pre-created implementation","suites":["buildInternal"],"updatePoint":{"line":390,"column":63,"index":18002},"line":390,"code":"    it('should continue build with a pre-created implementation', async () => {\n      const element = new ElementClass();\n      doc.body.appendChild(element);\n      await element.getImpl(false);\n      await element.buildInternal();\n      expect(buildCallbackStub).to.be.calledOnce;\n      expect(element.readyState).to.equal('mounting');\n    });","file":"unit/test-custom-element-v1.js","skipped":false,"dir":"test"},{"name":"should build on consent sufficient","suites":["buildInternal","consent"],"updatePoint":{"line":399,"column":44,"index":18360},"line":399,"code":"      it('should build on consent sufficient', async () => {\n        const element = new ElementClass();\n        env.sandbox.stub(Services, 'consentPolicyServiceForDocOrNull').callsFake(() => {\n          return Promise.resolve({\n            whenPolicyUnblock: () => {\n              return Promise.resolve(true);\n            }\n          });\n        });\n        env.sandbox.stub(element, 'getConsentPolicy_').callsFake(() => {\n          return 'default';\n        });\n        doc.body.appendChild(element);\n        await element.buildInternal();\n        expect(buildCallbackStub).to.be.calledOnce;\n        expect(element.readyState).to.equal('mounting');\n      });","file":"unit/test-custom-element-v1.js","skipped":false,"dir":"test"},{"name":"should not build on consent insufficient","suites":["buildInternal","consent"],"updatePoint":{"line":416,"column":50,"index":19028},"line":416,"code":"      it('should not build on consent insufficient', async () => {\n        const element = new ElementClass();\n        env.sandbox.stub(Services, 'consentPolicyServiceForDocOrNull').callsFake(() => {\n          return Promise.resolve({\n            whenPolicyUnblock: () => {\n              return Promise.resolve(false);\n            }\n          });\n        });\n        env.sandbox.stub(element, 'getConsentPolicy_').callsFake(() => {\n          return 'default';\n        });\n        doc.body.appendChild(element);\n        try {\n          await element.buildInternal();\n          throw new Error('must have failed');\n        } catch (e) {\n          expect(e.toString()).to.match(/BLOCK_BY_CONSENT/);\n        }\n      });","file":"unit/test-custom-element-v1.js","skipped":false,"dir":"test"},{"name":"should respect user specified consent policy","suites":["buildInternal","consent"],"updatePoint":{"line":436,"column":54,"index":19748},"line":436,"code":"      it('should respect user specified consent policy', async () => {\n        const element = new ElementClass();\n        doc.body.appendChild(element);\n        await element.getImpl(false);\n        expect(element.getConsentPolicy_()).to.equal(null);\n        element.setAttribute('data-block-on-consent', '');\n        expect(element.getConsentPolicy_()).to.equal('default');\n        element.setAttribute('data-block-on-consent', '_none');\n        expect(element.getConsentPolicy_()).to.equal('_none');\n      });","file":"unit/test-custom-element-v1.js","skipped":false,"dir":"test"},{"name":"should repsect metaTag specified consent","suites":["buildInternal","consent"],"updatePoint":{"line":446,"column":50,"index":20257},"line":446,"code":"      it('should repsect metaTag specified consent', async () => {\n        const meta = doc.createElement('meta');\n        meta.setAttribute('name', 'amp-consent-blocking');\n        meta.setAttribute('content', 'amp-test');\n        doc.head.appendChild(meta);\n        const element = new ElementClass();\n        doc.body.appendChild(element);\n        await element.getImpl(false);\n        expect(element.getConsentPolicy_()).to.equal('default');\n        expect(element.getAttribute('data-block-on-consent')).to.equal('default');\n      });","file":"unit/test-custom-element-v1.js","skipped":false,"dir":"test"},{"name":"should only execute build once","suites":["build"],"updatePoint":{"line":460,"column":38,"index":20826},"line":460,"code":"    it('should only execute build once', async () => {\n      const element = new ElementClass();\n      doc.body.appendChild(element);\n      builderMock.expects('scheduleAsap').never();\n      builderMock.expects('schedule').never();\n      const promise = element.buildInternal();\n      const promise2 = element.build();\n      expect(promise2).to.equal(promise);\n      await promise;\n      await promise2;\n      const promise3 = element.build();\n      expect(promise3).to.equal(promise);\n    });","file":"unit/test-custom-element-v1.js","skipped":false,"dir":"test"},{"name":"should wait until the element is upgraded","suites":["build"],"updatePoint":{"line":473,"column":49,"index":21331},"line":473,"code":"    it('should wait until the element is upgraded', async () => {\n      const element = new StubElementClass();\n      builderMock.expects('scheduleAsap').withExactArgs(element).once();\n      const promise = element.build();\n      doc.body.appendChild(element);\n      element.upgrade(TestElement);\n      await element.buildInternal();\n      await promise;\n    });","file":"unit/test-custom-element-v1.js","skipped":false,"dir":"test"},{"name":"should build if amp-bind mutation","suites":["build"],"updatePoint":{"line":482,"column":41,"index":21686},"line":482,"code":"    it('should build if amp-bind mutation', async () => {\n      const element = new ElementClass();\n      builderMock.expects('scheduleAsap').withExactArgs(element).once();\n      doc.body.appendChild(element);\n      element.mutatedAttributesCallback({});\n    });","file":"unit/test-custom-element-v1.js","skipped":false,"dir":"test"},{"name":"should only execute mount once","suites":["mount/unmount"],"updatePoint":{"line":495,"column":38,"index":22239},"line":495,"code":"    it('should only execute mount once', async () => {\n      const element = new ElementClass();\n      doc.body.appendChild(element);\n      builderMock.expects('scheduleAsap').never();\n      builderMock.expects('schedule').never();\n      const promise = element.mountInternal();\n      const promise2 = element.mount();\n      expect(promise2).to.equal(promise);\n      await promise;\n      await promise2;\n      const promise3 = element.mount();\n      expect(promise3).to.equal(promise);\n      await element.whenMounted();\n    });","file":"unit/test-custom-element-v1.js","skipped":false,"dir":"test"},{"name":"should wait until the element is upgraded","suites":["mount/unmount"],"updatePoint":{"line":509,"column":49,"index":22779},"line":509,"code":"    it('should wait until the element is upgraded', async () => {\n      const element = new StubElementClass();\n      builderMock.expects('scheduleAsap').withExactArgs(element).once();\n      const promise = element.mount();\n      doc.body.appendChild(element);\n      element.upgrade(TestElement);\n      await element.mountInternal();\n      await promise;\n      expect(mountCallbackStub).to.be.calledOnce;\n      await element.whenMounted();\n    });","file":"unit/test-custom-element-v1.js","skipped":false,"dir":"test"},{"name":"should consider element loading if mountCallback has no result","suites":["mount/unmount"],"updatePoint":{"line":520,"column":70,"index":23248},"line":520,"code":"    it('should consider element loading if mountCallback has no result', async () => {\n      env.sandbox.stub(TestElement, 'usesLoading').returns(true);\n      const element = new ElementClass();\n      doc.body.appendChild(element);\n      await element.mountInternal();\n      expect(mountCallbackStub).to.be.calledOnce;\n      expect(element.readyState).to.equal('loading');\n    });","file":"unit/test-custom-element-v1.js","skipped":false,"dir":"test"},{"name":"should consider element completed if mountCallback returns promise","suites":["mount/unmount"],"updatePoint":{"line":528,"column":74,"index":23633},"line":528,"code":"    it('should consider element completed if mountCallback returns promise', async () => {\n      env.sandbox.stub(TestElement, 'usesLoading').returns(true);\n      mountCallbackStub.resolves();\n      const element = new ElementClass();\n      doc.body.appendChild(element);\n      await element.mountInternal();\n      expect(mountCallbackStub).to.be.calledOnce;\n      expect(element.readyState).to.equal('complete');\n    });","file":"unit/test-custom-element-v1.js","skipped":false,"dir":"test"},{"name":"should mount -> unmount -> mount when connected","suites":["mount/unmount"],"updatePoint":{"line":537,"column":55,"index":24036},"line":537,"code":"    it('should mount -> unmount -> mount when connected', async () => {\n      const element = new ElementClass();\n      doc.body.appendChild(element);\n      builderMock.expects('scheduleAsap').never();\n      const scheduleStub = env.sandbox.stub(builder, 'schedule');\n      const unscheduleStub = env.sandbox.stub(builder, 'unschedule');\n\n      // Mount.\n      await element.mountInternal();\n      expect(mountCallbackStub).to.be.calledOnce;\n      expect(element.signals().get('mounted')).to.exist;\n      expect(element.readyState).to.equal('complete');\n\n      // Unmount.\n      element.unmount();\n      expect(unmountCallbackStub).to.be.calledOnce;\n      expect(unscheduleStub).to.be.calledOnce;\n      expect(scheduleStub).to.be.calledOnce;\n      expect(element.signals().get('mounted')).to.not.exist;\n      expect(element.readyState).to.equal('mounting');\n\n      // Remount.\n      await element.mountInternal();\n      expect(mountCallbackStub).to.be.calledTwice;\n      expect(element.signals().get('mounted')).to.exist;\n      expect(element.readyState).to.equal('complete');\n      await element.whenMounted();\n    });","file":"unit/test-custom-element-v1.js","skipped":false,"dir":"test"},{"name":"should mount -> unmount -> mount with usesLoading","suites":["mount/unmount"],"updatePoint":{"line":565,"column":57,"index":25158},"line":565,"code":"    it('should mount -> unmount -> mount with usesLoading', async () => {\n      env.sandbox.stub(TestElement, 'usesLoading').returns(true);\n      mountCallbackStub.resolves();\n      const element = new ElementClass();\n      doc.body.appendChild(element);\n      builderMock.expects('scheduleAsap').never();\n      const scheduleStub = env.sandbox.stub(builder, 'schedule');\n      const unscheduleStub = env.sandbox.stub(builder, 'unschedule');\n\n      // Mount.\n      await element.mountInternal();\n      expect(mountCallbackStub).to.be.calledOnce;\n      expect(element.signals().get('mounted')).to.exist;\n      expect(element.readyState).to.equal('complete');\n\n      // Unmount.\n      element.unmount();\n      expect(unmountCallbackStub).to.be.calledOnce;\n      expect(unscheduleStub).to.be.calledOnce;\n      expect(scheduleStub).to.be.calledOnce;\n      expect(element.signals().get('mounted')).to.not.exist;\n      expect(element.readyState).to.equal('loading');\n\n      // Remount.\n      await element.mountInternal();\n      expect(mountCallbackStub).to.be.calledTwice;\n      expect(element.signals().get('mounted')).to.exist;\n      expect(element.readyState).to.equal('complete');\n      await element.whenMounted();\n    });","file":"unit/test-custom-element-v1.js","skipped":false,"dir":"test"},{"name":"should unmount on disconnect","suites":["mount/unmount"],"updatePoint":{"line":595,"column":36,"index":26360},"line":595,"code":"    it('should unmount on disconnect', async () => {\n      const element = new ElementClass();\n      doc.body.appendChild(element);\n      builderMock.expects('scheduleAsap').never();\n      const scheduleStub = env.sandbox.stub(builder, 'schedule');\n      const unscheduleStub = env.sandbox.stub(builder, 'unschedule');\n\n      // Mount.\n      await element.mountInternal();\n      expect(mountCallbackStub).to.be.calledOnce;\n      expect(element.signals().get('mounted')).to.exist;\n\n      // Disconnect\n      element.remove();\n      expect(unmountCallbackStub).to.be.calledOnce;\n      expect(unscheduleStub).to.be.calledOnce;\n\n      // Not rescheduled.\n      expect(scheduleStub).to.not.be.called;\n      expect(element.signals().get('mounted')).to.not.exist;\n    });","file":"unit/test-custom-element-v1.js","skipped":false,"dir":"test"},{"name":"should NOT call unmountCallback if was not mounted before","suites":["mount/unmount"],"updatePoint":{"line":616,"column":65,"index":27154},"line":616,"code":"    it('should NOT call unmountCallback if was not mounted before', async () => {\n      const element = new ElementClass();\n      doc.body.appendChild(element);\n      builderMock.expects('scheduleAsap').never();\n      const scheduleStub = env.sandbox.stub(builder, 'schedule');\n      const unscheduleStub = env.sandbox.stub(builder, 'unschedule');\n\n      // Unmount.\n      element.unmount();\n      expect(unmountCallbackStub).to.not.be.called;\n      expect(unscheduleStub).to.be.calledOnce;\n      expect(scheduleStub).to.be.calledOnce;\n      expect(element.signals().get('mounted')).to.not.exist;\n    });","file":"unit/test-custom-element-v1.js","skipped":false,"dir":"test"},{"name":"should cancel mount","suites":["mount/unmount"],"updatePoint":{"line":630,"column":27,"index":27721},"line":630,"code":"    it('should cancel mount', async () => {\n      const element = new ElementClass();\n      doc.body.appendChild(element);\n      builderMock.expects('scheduleAsap').never();\n      const scheduleStub = env.sandbox.stub(builder, 'schedule');\n      const unscheduleStub = env.sandbox.stub(builder, 'unschedule');\n\n      // Mount and unmount in the same task.\n      const promise = element.mountInternal();\n      element.unmount();\n      expect(unscheduleStub).to.be.calledOnce;\n      expect(scheduleStub).to.be.calledOnce;\n      await new Promise(setTimeout);\n      expect(mountCallbackStub).to.not.be.called;\n      try {\n        await promise;\n      } catch (e) {\n        expect(() => {\n          throw e;\n        }).to.throw(/CANCELLED/);\n      }\n\n      // Mount again.\n      await element.mountInternal();\n      expect(mountCallbackStub).to.be.calledOnce;\n    });","file":"unit/test-custom-element-v1.js","skipped":false,"dir":"test"},{"name":"should pause on unmount when connected","suites":["mount/unmount"],"updatePoint":{"line":656,"column":46,"index":28604},"line":656,"code":"    it('should pause on unmount when connected', async () => {\n      const element = new ElementClass();\n      doc.body.appendChild(element);\n      const pauseStub = env.sandbox.stub(element, 'pause');\n      element.unmount();\n      expect(pauseStub).to.be.calledOnce;\n    });","file":"unit/test-custom-element-v1.js","skipped":false,"dir":"test"},{"name":"should NOT pause on disconnect","suites":["mount/unmount"],"updatePoint":{"line":663,"column":38,"index":28873},"line":663,"code":"    it('should NOT pause on disconnect', async () => {\n      const element = new ElementClass();\n      doc.body.appendChild(element);\n      const pauseStub = env.sandbox.stub(element, 'pause');\n      element.remove();\n      expect(pauseStub).to.not.be.called;\n    });","file":"unit/test-custom-element-v1.js","skipped":false,"dir":"test"},{"name":"should NOT pause an unbuilt element","suites":["pause"],"updatePoint":{"line":676,"column":43,"index":29322},"line":676,"code":"    it('should NOT pause an unbuilt element', () => {\n      const element = new StubElementClass();\n      doc.body.appendChild(element);\n      element.pause();\n      expect(pauseCallbackStub).to.not.be.called;\n    });","file":"unit/test-custom-element-v1.js","skipped":false,"dir":"test"},{"name":"should pause a built element","suites":["pause"],"updatePoint":{"line":682,"column":36,"index":29533},"line":682,"code":"    it('should pause a built element', async () => {\n      const element = new ElementClass();\n      doc.body.appendChild(element);\n      await element.buildInternal();\n      element.pause();\n      expect(pauseCallbackStub).to.be.calledOnce;\n    });","file":"unit/test-custom-element-v1.js","skipped":false,"dir":"test"},{"name":"should force build and wait for whenLoaded even if not marked as loading","suites":["ensureLoaded"],"updatePoint":{"line":702,"column":80,"index":30300},"line":702,"code":"    it('should force build and wait for whenLoaded even if not marked as loading', async () => {\n      usesLoadingStub.returns(false);\n      const promise = element.ensureLoaded();\n      doc.body.appendChild(element);\n      element.upgrade(TestElement);\n      await element.mountInternal();\n      await promise;\n      expect(ensureLoadedStub).to.not.be.called;\n      await element.whenLoaded();\n    });","file":"unit/test-custom-element-v1.js","skipped":false,"dir":"test"},{"name":"should force build and ensureLoaded if loading","suites":["ensureLoaded"],"updatePoint":{"line":712,"column":54,"index":30677},"line":712,"code":"    it('should force build and ensureLoaded if loading', async () => {\n      ensureLoadedStub.callsFake(function () {\n        this.setReadyState('complete');\n      });\n      const promise = element.ensureLoaded();\n      doc.body.appendChild(element);\n      element.upgrade(TestElement);\n      await element.mountInternal();\n      await promise;\n      expect(ensureLoadedStub).to.be.calledOnce;\n      await element.whenLoaded();\n    });","file":"unit/test-custom-element-v1.js","skipped":false,"dir":"test"},{"name":"should propagate setAsContainerInternal without scroller","suites":["setAsContainerInternal"],"updatePoint":{"line":735,"column":64,"index":31485},"line":735,"code":"    it('should propagate setAsContainerInternal without scroller', () => {\n      builderMock.expects('setContainer').withExactArgs(element, undefined).once();\n      impl.setAsContainer();\n    });","file":"unit/test-custom-element-v1.js","skipped":false,"dir":"test"},{"name":"should propagate setAsContainerInternal with scroller","suites":["setAsContainerInternal"],"updatePoint":{"line":739,"column":61,"index":31678},"line":739,"code":"    it('should propagate setAsContainerInternal with scroller', () => {\n      builderMock.expects('setContainer').withExactArgs(element, scroller).once();\n      impl.setAsContainer(scroller);\n    });","file":"unit/test-custom-element-v1.js","skipped":false,"dir":"test"},{"name":"should propagate removeAsContainerInternal","suites":["setAsContainerInternal"],"updatePoint":{"line":743,"column":50,"index":31867},"line":743,"code":"    it('should propagate removeAsContainerInternal', () => {\n      builderMock.expects('removeContainer').withExactArgs(element).once();\n      impl.removeAsContainer();\n    });","file":"unit/test-custom-element-v1.js","skipped":false,"dir":"test"},{"name":"should update loading state","suites":["setReadyStateInternal"],"updatePoint":{"line":759,"column":35,"index":32413},"line":759,"code":"    it('should update loading state', () => {\n      expect(element.readyState).equal('other');\n      expect(element.toggleLoading).to.not.be.called;\n      expect(element.signals().get(CommonSignals_Enum.LOAD_START)).to.be.null;\n      element.signals().signal(CommonSignals_Enum.UNLOAD);\n      element.classList.remove('i-amphtml-layout');\n      element.setReadyStateInternal('loading');\n      expect(element.readyState).equal('loading');\n      expect(element.toggleLoading).to.be.calledOnce.calledWith(true);\n      expect(element.signals().get(CommonSignals_Enum.LOAD_START)).to.exist;\n      expect(element.signals().get(CommonSignals_Enum.UNLOAD)).to.be.null;\n      expect(element.signals().get(CommonSignals_Enum.LOAD_END)).to.be.null;\n      expect(element).to.have.class('i-amphtml-layout');\n    });","file":"unit/test-custom-element-v1.js","skipped":false,"dir":"test"},{"name":"should update complete state","suites":["setReadyStateInternal"],"updatePoint":{"line":773,"column":36,"index":33217},"line":773,"code":"    it('should update complete state', () => {\n      const loadEventSpy = env.sandbox.spy();\n      element.addEventListener('load', loadEventSpy);\n      expect(element.readyState).equal('other');\n      expect(element.toggleLoading).to.not.be.called;\n      expect(element.signals().get(CommonSignals_Enum.LOAD_END)).to.be.null;\n      element.classList.remove('i-amphtml-layout');\n      element.setReadyStateInternal('complete');\n      expect(element.readyState).equal('complete');\n      expect(element.toggleLoading).to.be.calledOnce.calledWith(false);\n      expect(element.signals().get(CommonSignals_Enum.LOAD_END)).to.exist;\n      expect(element.signals().get(CommonSignals_Enum.LOAD_START)).to.exist;\n      expect(element.signals().get(CommonSignals_Enum.UNLOAD)).to.not.exist;\n      expect(element).to.have.class('i-amphtml-layout');\n      expect(loadEventSpy).to.be.calledOnce;\n      expect(loadEventSpy.firstCall.firstArg.bubbles).to.be.false;\n    });","file":"unit/test-custom-element-v1.js","skipped":false,"dir":"test"},{"name":"should update error state","suites":["setReadyStateInternal"],"updatePoint":{"line":790,"column":33,"index":34172},"line":790,"code":"    it('should update error state', () => {\n      const errorEventSpy = env.sandbox.spy();\n      element.addEventListener('error', errorEventSpy);\n      expect(element.readyState).equal('other');\n      expect(element.toggleLoading).to.not.be.called;\n      expect(element.signals().get(CommonSignals_Enum.LOAD_END)).to.be.null;\n      const error = new Error();\n      element.setReadyStateInternal('error', error);\n      expect(element.readyState).equal('error');\n      expect(element.toggleLoading).to.be.calledOnce.calledWith(false);\n      expect(element.signals().get(CommonSignals_Enum.LOAD_END)).to.equal(error);\n      expect(errorEventSpy).to.be.calledOnce;\n      expect(errorEventSpy.firstCall.firstArg.bubbles).to.be.false;\n    });","file":"unit/test-custom-element-v1.js","skipped":false,"dir":"test"},{"name":"should not duplicate events","suites":["setReadyStateInternal"],"updatePoint":{"line":804,"column":35,"index":34912},"line":804,"code":"    it('should not duplicate events', () => {\n      const loadEventSpy = env.sandbox.spy();\n      element.addEventListener('load', loadEventSpy);\n      element.setReadyStateInternal('complete');\n      expect(loadEventSpy).to.be.calledOnce;\n\n      // Repeat.\n      element.setReadyStateInternal('complete');\n      expect(loadEventSpy).to.be.calledOnce; // no change.\n    });","file":"unit/test-custom-element-v1.js","skipped":false,"dir":"test"},{"name":"should return back to loading after complete","suites":["setReadyStateInternal"],"updatePoint":{"line":815,"column":52,"index":35304},"line":815,"code":"    it('should return back to loading after complete', () => {\n      element.setReadyStateInternal('complete');\n      expect(element.readyState).equal('complete');\n      expect(element.signals().get(CommonSignals_Enum.LOAD_END)).to.exist;\n      element.signals().reset(CommonSignals_Enum.LOAD_START);\n      element.setReadyStateInternal('loading');\n      expect(element.readyState).equal('loading');\n      expect(element.signals().get(CommonSignals_Enum.LOAD_END)).to.be.null;\n      expect(element.signals().get(CommonSignals_Enum.LOAD_START)).to.exist;\n    });","file":"unit/test-custom-element-v1.js","skipped":false,"dir":"test"},{"name":"should enqueue actions until built and schedule build","suites":["executeAction"],"updatePoint":{"line":830,"column":61,"index":36004},"line":830,"code":"    it('should enqueue actions until built and schedule build', () => {\n      const element = new ElementClass();\n      const handler = env.sandbox.stub(TestElement.prototype, 'executeAction');\n      builderMock.expects('scheduleAsap').withExactArgs(element).once();\n      doc.body.appendChild(element);\n      const inv = {};\n      element.enqueAction(inv);\n      const actionQueue = getActionQueueForTesting(element);\n      expect(actionQueue.length).to.equal(1);\n      expect(actionQueue[0]).to.equal(inv);\n      expect(handler).to.not.be.called;\n    });","file":"unit/test-custom-element-v1.js","skipped":false,"dir":"test"},{"name":"should execute action immediately after built","suites":["executeAction"],"updatePoint":{"line":842,"column":53,"index":36553},"line":842,"code":"    it('should execute action immediately after built', async () => {\n      builderMock.expects('scheduleAsap').never();\n      const element = new ElementClass();\n      const handler = env.sandbox.stub(TestElement.prototype, 'executeAction');\n      doc.body.appendChild(element);\n      await element.buildInternal();\n      const inv = {};\n      element.enqueAction(inv);\n      expect(handler).to.be.calledOnce.calledWith(inv, false);\n      expect(getActionQueueForTesting(element)).to.not.exist;\n    });","file":"unit/test-custom-element-v1.js","skipped":false,"dir":"test"},{"name":"should dequeue all actions after build","suites":["executeAction"],"updatePoint":{"line":853,"column":46,"index":37050},"line":853,"code":"    it('should dequeue all actions after build', async () => {\n      const element = new ElementClass();\n      builderMock.expects('scheduleAsap').withExactArgs(element).atLeast(1);\n      const handler = env.sandbox.stub(TestElement.prototype, 'executeAction');\n      const inv1 = {};\n      const inv2 = {};\n      element.enqueAction(inv1);\n      element.enqueAction(inv2);\n      const actionQueue = getActionQueueForTesting(element);\n      expect(actionQueue).to.have.length(2);\n      expect(actionQueue[0]).to.equal(inv1);\n      expect(actionQueue[1]).to.equal(inv2);\n      expect(handler).to.not.be.called;\n      doc.body.appendChild(element);\n      await element.buildInternal();\n      await sleep(10);\n      expect(getActionQueueForTesting(element)).to.not.exist;\n      expect(handler).to.be.calledTwice.calledWith(inv1, true).calledWith(inv2, true);\n    });","file":"unit/test-custom-element-v1.js","skipped":false,"dir":"test"},{"name":"should initialize ampdoc and resources on attach only","suites":["CustomElement"],"updatePoint":{"line":140,"column":61,"index":5239},"line":140,"code":"    it('should initialize ampdoc and resources on attach only', () => {\n      const element = new ElementClass();\n      expect(element.ampdoc_).to.be.null;\n      allowConsoleError(() => {\n        expect(() => element.getAmpDoc()).to.throw(/no ampdoc yet/);\n      });\n      expect(element.resources_).to.be.null;\n      allowConsoleError(() => {\n        expect(() => element.getResources()).to.throw(/no resources yet/);\n      });\n\n      // Resources available after attachment.\n      container.appendChild(element);\n      expect(element.ampdoc_).to.be.ok;\n      expect(element.getAmpDoc()).to.be.ok;\n      expect(element.resources_).to.be.ok;\n      expect(element.getResources()).to.be.ok;\n    });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"Element - createdCallback","suites":["CustomElement"],"updatePoint":{"line":158,"column":33,"index":5908},"line":158,"code":"    it('Element - createdCallback', () => {\n      const element = new ElementClass();\n      const build = env.sandbox.stub(element, 'buildInternal').returns(Promise.resolve());\n      expect(element.isBuilt()).to.equal(false);\n      expect(element.hasAttributes()).to.equal(false);\n      expect(element.isUpgraded()).to.equal(false);\n      expect(element.upgradeState_).to.equal( /* NOT_UPGRADED */1);\n      expect(element.readyState).to.equal('upgrading');\n      expect(element.everAttached).to.equal(false);\n      expect(element.getLayout()).to.equal(Layout_Enum.NODISPLAY);\n      container.appendChild(element);\n      expect(element).to.have.class('i-amphtml-element');\n      expect(element).to.have.class('i-amphtml-notbuilt');\n      expect(element).to.have.class('amp-notbuilt');\n      expect(element).to.not.have.class('i-amphtml-built');\n      expect(element.everAttached).to.equal(true);\n      expect(element.isUpgraded()).to.equal(true);\n      expect(build.calledOnce).to.equal(true);\n      expect(element.getResourceId()).to.equal(resources.getResourceForElement(element).getId());\n    });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"StubElement - createdCallback","suites":["CustomElement"],"updatePoint":{"line":178,"column":37,"index":7011},"line":178,"code":"    it('StubElement - createdCallback', () => {\n      const element = new StubElementClass();\n      env.sandbox.stub(element, 'buildInternal');\n      expect(element.isBuilt()).to.equal(false);\n      expect(element.hasAttributes()).to.equal(false);\n      expect(element.isUpgraded()).to.equal(false);\n      expect(element.readyState).to.equal('upgrading');\n      expect(element.everAttached).to.equal(false);\n      expect(element.getLayout()).to.equal(Layout_Enum.NODISPLAY);\n      container.appendChild(element);\n      expect(element).to.have.class('i-amphtml-element');\n      expect(element).to.have.class('i-amphtml-notbuilt');\n      expect(element).to.have.class('amp-notbuilt');\n      expect(element).to.not.have.class('i-amphtml-built');\n      expect(element.everAttached).to.equal(true);\n      expect(element.isUpgraded()).to.equal(false);\n      // TODO(jeffkaufman, #13422): this test was silently failing.  `build` was\n      // the return value from `env.sandbox.stub(element, 'buildInternal')`.\n      //\n      // expect(build.calledOnce).to.equal(true);\n    });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"StubElement - should try to install an unregistered legacy extensions","suites":["CustomElement"],"updatePoint":{"line":200,"column":77,"index":8123},"line":200,"code":"    it('StubElement - should try to install an unregistered legacy extensions', () => {\n      delete win.__AMP_BASE_CE_CLASS;\n      const LegacyElementClass = createAmpElementForTesting(win, ElementStub, elementConnectedCallback);\n      win.customElements.define('amp-legacy', LegacyElementClass);\n      win.__AMP_EXTENDED_ELEMENTS['amp-legacy'] = ElementStub;\n      const extensions = Services.extensionsFor(win);\n      env.sandbox.stub(extensions, 'installExtensionForDoc');\n      const element = new LegacyElementClass();\n      env.sandbox.stub(element, 'buildInternal');\n      container.appendChild(element);\n      expect(element.readyState).to.equal('upgrading');\n      expect(extensions.installExtensionForDoc).to.be.calledOnce.calledWith(ampdoc, 'amp-legacy', '0.1');\n    });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"StubElement - should not try to install a pre-registered legacy extensions","suites":["CustomElement"],"updatePoint":{"line":213,"column":82,"index":8911},"line":213,"code":"    it('StubElement - should not try to install a pre-registered legacy extensions', () => {\n      delete win.__AMP_BASE_CE_CLASS;\n      const LegacyElementClass = createAmpElementForTesting(win, ElementStub, elementConnectedCallback);\n      win.customElements.define('amp-legacy', LegacyElementClass);\n      win.__AMP_EXTENDED_ELEMENTS['amp-legacy'] = ElementStub;\n      ampdoc.declareExtension('amp-legacy', '0.1');\n      const extensions = Services.extensionsFor(win);\n      env.sandbox.stub(extensions, 'installExtensionForDoc');\n      const element = new LegacyElementClass();\n      env.sandbox.stub(element, 'buildInternal');\n      container.appendChild(element);\n      expect(element.readyState).to.equal('upgrading');\n      expect(extensions.installExtensionForDoc).to.not.be.called;\n    });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"Element - should only add classes on first attachedCallback","suites":["CustomElement"],"updatePoint":{"line":227,"column":67,"index":9696},"line":227,"code":"    it('Element - should only add classes on first attachedCallback', () => {\n      const element = new ElementClass();\n      const buildPromise = Promise.resolve();\n      const buildStub = env.sandbox.stub(element, 'buildInternal').returns(buildPromise);\n      expect(element).to.not.have.class('i-amphtml-element');\n      expect(element).to.not.have.class('i-amphtml-notbuilt');\n      expect(element).to.not.have.class('amp-notbuilt');\n      expect(element).to.not.have.class('i-amphtml-built');\n      container.appendChild(element);\n      expect(element).to.have.class('i-amphtml-element');\n      expect(element).to.have.class('i-amphtml-notbuilt');\n      expect(element).to.have.class('amp-notbuilt');\n      element.classList.remove('i-amphtml-element');\n      element.classList.remove('i-amphtml-notbuilt');\n      element.classList.remove('amp-notbuilt');\n      container.appendChild(element);\n      return buildPromise.then(() => {\n        expect(buildStub).to.be.called;\n        expect(element).to.not.have.class('i-amphtml-element');\n        expect(element).to.not.have.class('i-amphtml-notbuilt');\n        expect(element).to.not.have.class('amp-notbuilt');\n      });\n    });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"Element - handles async connectedCallback when disconnected","suites":["CustomElement"],"updatePoint":{"line":250,"column":67,"index":10880},"line":250,"code":"    it('Element - handles async connectedCallback when disconnected', () => {\n      const element = new ElementClass();\n      env.sandbox.defineProperty(element, 'isConnected', {\n        value: false\n      });\n      expect(element).to.not.have.class('i-amphtml-element');\n      expect(element).to.not.have.class('i-amphtml-notbuilt');\n      expect(element).to.not.have.class('amp-notbuilt');\n      expect(element).to.not.have.class('i-amphtml-built');\n      container.appendChild(element);\n      expect(element).to.not.have.class('i-amphtml-element');\n      expect(element).to.not.have.class('i-amphtml-notbuilt');\n      expect(element).to.not.have.class('amp-notbuilt');\n      expect(element).to.not.have.class('i-amphtml-built');\n    });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"Element - should reset on 2nd attachedCallback when requested","suites":["CustomElement"],"updatePoint":{"line":265,"column":69,"index":11622},"line":265,"code":"    it('Element - should reset on 2nd attachedCallback when requested', () => {\n      clock.tick(1);\n      const element = new ElementClass();\n      const buildPromise = Promise.resolve();\n      const buildStub = env.sandbox.stub(element, 'buildInternal').returns(buildPromise);\n      container.appendChild(element);\n      container.removeChild(element);\n      env.sandbox.stub(element, 'reconstructWhenReparented').callsFake(() => true);\n      element.layoutCount_ = 10;\n      element.isFirstLayoutCompleted_ = true;\n      element.signals().signal(CommonSignals_Enum.RENDER_START);\n      element.signals().signal(CommonSignals_Enum.LOAD_END);\n      container.appendChild(element);\n      return buildPromise.then(() => {\n        expect(buildStub).to.be.called;\n        expect(element.layoutCount_).to.equal(0);\n        expect(element.isFirstLayoutCompleted_).to.be.false;\n        expect(element.signals().get(CommonSignals_Enum.RENDER_START)).to.be.null;\n        expect(element.signals().get(CommonSignals_Enum.LOAD_END)).to.be.null;\n      });\n    });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"Element - should NOT reset on 2nd attachedCallback w/o request","suites":["CustomElement"],"updatePoint":{"line":286,"column":70,"index":12675},"line":286,"code":"    it('Element - should NOT reset on 2nd attachedCallback w/o request', () => {\n      clock.tick(1);\n      const element = new ElementClass();\n      env.sandbox.stub(element, 'buildInternal').returns(Promise.resolve());\n      container.appendChild(element);\n      container.removeChild(element);\n      env.sandbox.stub(element, 'reconstructWhenReparented').callsFake(() => false);\n      element.layoutCount_ = 10;\n      element.isFirstLayoutCompleted_ = true;\n      element.signals().signal(CommonSignals_Enum.RENDER_START);\n      expect(element.signals().get(CommonSignals_Enum.RENDER_START)).to.be.ok;\n      element.signals().signal(CommonSignals_Enum.LOAD_END);\n      container.appendChild(element);\n      expect(element.layoutCount_).to.equal(10);\n      expect(element.isFirstLayoutCompleted_).to.be.true;\n      expect(element.signals().get(CommonSignals_Enum.RENDER_START)).to.be.ok;\n      expect(element.signals().get(CommonSignals_Enum.LOAD_END)).to.be.ok;\n    });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"Element - getIntersectionChangeEntry","suites":["CustomElement"],"updatePoint":{"line":304,"column":44,"index":13622},"line":304,"code":"    it('Element - getIntersectionChangeEntry', () => {\n      const element = new ElementClass();\n      container.appendChild(element);\n      element.updateLayoutBox({\n        top: 0,\n        left: 0,\n        width: 111,\n        height: 51\n      });\n      element.getIntersectionChangeEntry();\n      expect(testElementGetInsersectionElementLayoutBox).to.be.calledOnce;\n    });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"Element - updateLayoutBox","suites":["CustomElement"],"updatePoint":{"line":316,"column":33,"index":13987},"line":316,"code":"    it('Element - updateLayoutBox', () => {\n      const element = new ElementClass();\n      container.appendChild(element);\n      expect(element.getLayoutSize()).to.deep.equal({\n        width: 0,\n        height: 0\n      });\n      const rect = {\n        top: 0,\n        left: 0,\n        width: 111,\n        height: 51\n      };\n      element.updateLayoutBox(rect);\n      expect(testOnLayoutMeasureCallback).to.not.be.called;\n      env.sandbox.stub(element, 'isBuilt').returns(true);\n      element.updateLayoutBox(rect);\n      expect(testOnLayoutMeasureCallback).to.be.calledOnce;\n    });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"should tolerate errors in onLayoutMeasure","suites":["CustomElement"],"updatePoint":{"line":335,"column":49,"index":14589},"line":335,"code":"    it('should tolerate errors in onLayoutMeasure', () => {\n      const element = new ElementClass();\n      env.sandbox.stub(TestElement.prototype, 'onLayoutMeasure').callsFake(() => {\n        throw new Error('intentional');\n      });\n      const errorStub = env.sandbox.stub(element, 'dispatchCustomEventForTesting');\n      container.appendChild(element);\n      return element.buildingPromise_.then(() => {\n        allowConsoleError(() => {\n          element.updateLayoutBox({\n            top: 0,\n            left: 0,\n            width: 111,\n            height: 51\n          });\n          expect(element.getLayoutSize()).to.be.ok;\n          expect(errorStub).to.be.calledWith(AmpEvents_Enum.ERROR, 'intentional');\n        });\n      });\n    });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"StubElement - upgrade after attached","suites":["CustomElement"],"updatePoint":{"line":355,"column":44,"index":15329},"line":355,"code":"    it('StubElement - upgrade after attached', () => {\n      const element = new StubElementClass();\n      expect(element.isUpgraded()).to.equal(false);\n      expect(getImplSyncForTesting(element)).to.be.null;\n      element.setAttribute('layout', 'fill');\n      element.updateLayoutBox({\n        top: 0,\n        left: 0,\n        width: 111,\n        height: 51\n      });\n      container.appendChild(element);\n      resourcesMock.expects('upgraded').withExactArgs(element).once();\n      element.upgrade(TestElement);\n      expect(element.isUpgraded()).to.equal(true);\n      expect(element.readyState).to.equal('building');\n      const impl = getImplSyncForTesting(element);\n      expect(impl).to.be.instanceOf(TestElement);\n      expect(impl.getLayout()).to.equal(Layout_Enum.FILL);\n      expect(element.isBuilt()).to.equal(false);\n    });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"StubElement - should not upgrade before attached","suites":["CustomElement"],"updatePoint":{"line":376,"column":56,"index":16179},"line":376,"code":"    it('StubElement - should not upgrade before attached', () => {\n      const element = new StubElementClass();\n      expect(element.isUpgraded()).to.equal(false);\n      expect(getImplSyncForTesting(element)).to.be.null;\n      element.setAttribute('layout', 'fill');\n      element.updateLayoutBox({\n        top: 0,\n        left: 0,\n        width: 111,\n        height: 51\n      });\n      resourcesMock.expects('upgraded').withExactArgs(element).never();\n      element.upgrade(TestElement);\n      expect(element.isUpgraded()).to.equal(false);\n      expect(element.readyState).to.equal('upgrading');\n      expect(getImplSyncForTesting(element)).to.be.null;\n      expect(element.isBuilt()).to.equal(false);\n    });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"StubElement - upgrade if ever attached","suites":["CustomElement"],"updatePoint":{"line":394,"column":46,"index":16881},"line":394,"code":"    it('StubElement - upgrade if ever attached', () => {\n      const element = new StubElementClass();\n      expect(element.isUpgraded()).to.equal(false);\n      expect(getImplSyncForTesting(element)).to.be.null;\n      element.setAttribute('layout', 'fill');\n      element.updateLayoutBox({\n        top: 0,\n        left: 0,\n        width: 111,\n        height: 51\n      });\n\n      // Attach once and remove.\n      container.appendChild(element);\n      container.removeChild(element);\n      resourcesMock.expects('upgraded').withExactArgs(element).once();\n      element.upgrade(TestElement);\n      expect(element.isUpgraded()).to.equal(true);\n      expect(element.readyState).to.equal('building');\n      expect(getImplSyncForTesting(element)).to.be.instanceOf(TestElement);\n      expect(element.isBuilt()).to.equal(false);\n    });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"StubElement - should NOT allow upgrade for a template element","suites":["CustomElement"],"updatePoint":{"line":416,"column":69,"index":17732},"line":416,"code":"    it('StubElement - should NOT allow upgrade for a template element', () => {\n      const element = new StubElementClass();\n      expect(element.isUpgraded()).to.equal(false);\n      element.isInTemplate_ = true;\n      resourcesMock.expects('upgraded').withExactArgs(element).never();\n      element.upgrade(TestElement);\n      expect(element.isUpgraded()).to.equal(false);\n      expect(element.readyState).to.equal('upgrading');\n      expect(element.isBuilt()).to.equal(false);\n    });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"Element - re-upgrade to new direct instance","suites":["CustomElement"],"updatePoint":{"line":426,"column":51,"index":18201},"line":426,"code":"    it('Element - re-upgrade to new direct instance', () => {\n      const element = new ElementClassWithReUpgrade();\n      expect(element.isUpgraded()).to.equal(false);\n      container.appendChild(element);\n      expect(element.isUpgraded()).to.equal(true);\n      const impl = getImplSyncForTesting(element);\n      expect(impl).to.be.instanceOf(TestElement);\n      expect(impl.source).to.equal('re-upgrade');\n      expect(element.upgradeDelayMs_).to.equal(0);\n    });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"Element - re-upgrade to new promised instance","suites":["CustomElement"],"updatePoint":{"line":436,"column":53,"index":18671},"line":436,"code":"    it('Element - re-upgrade to new promised instance', async () => {\n      let promise;\n      env.sandbox.stub(TestElementWithReUpgrade.prototype, 'upgradeCallback').callsFake(function () {\n        promise = Promise.resolve(new TestElement(this.element, 're-upgrade-with-promise'));\n        return promise;\n      });\n      const element = new ElementClassWithReUpgrade();\n      expect(element.isUpgraded()).to.equal(false);\n      container.appendChild(element);\n      expect(getImplSyncForTesting(element)).to.be.null;\n      expect(element.isUpgraded()).to.equal(false);\n      expect(element.upgradeState_).to.equal( /* UPGRADE_IN_PROGRESS */4);\n      expect(promise).to.exist;\n      await promise;\n      await skipMicroTask();\n      expect(element.isUpgraded()).to.equal(true);\n      expect(element.upgradeState_).to.equal( /* UPGRADED */2);\n      const impl = getImplSyncForTesting(element);\n      expect(impl).to.be.instanceOf(TestElement);\n      expect(impl.source).to.equal('re-upgrade-with-promise');\n    });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"Element - re-upgrade to new promised null","suites":["CustomElement"],"updatePoint":{"line":457,"column":49,"index":19683},"line":457,"code":"    it('Element - re-upgrade to new promised null', async () => {\n      let promise;\n      env.sandbox.stub(TestElementWithReUpgrade.prototype, 'upgradeCallback').callsFake(function () {\n        promise = Promise.resolve(null);\n        return promise;\n      });\n      const element = new ElementClassWithReUpgrade();\n      expect(element.isUpgraded()).to.equal(false);\n      container.appendChild(element);\n      expect(getImplSyncForTesting(element)).to.be.null;\n      expect(element.isUpgraded()).to.equal(false);\n      expect(element.upgradeState_).to.equal( /* UPGRADE_IN_PROGRESS */4);\n      expect(promise).to.exist;\n      await promise;\n      await skipMicroTask();\n      expect(element.isUpgraded()).to.equal(true);\n      expect(element.upgradeState_).to.equal( /* UPGRADED */2);\n      const impl = getImplSyncForTesting(element);\n      expect(impl).to.be.instanceOf(TestElementWithReUpgrade);\n    });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"StubElement - re-upgrade","suites":["CustomElement"],"updatePoint":{"line":477,"column":32,"index":20576},"line":477,"code":"    it('StubElement - re-upgrade', () => {\n      const element = new StubElementClass();\n      expect(element.isUpgraded()).to.equal(false);\n      resourcesMock.expects('upgraded').withExactArgs(element).never();\n      element.upgrade(TestElementWithReUpgrade);\n      expect(element.isUpgraded()).to.equal(false);\n    });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"Element - build allowed","suites":["CustomElement"],"updatePoint":{"line":484,"column":31,"index":20897},"line":484,"code":"    it('Element - build allowed', () => {\n      const element = new ElementClass();\n      const getSizerStub = env.sandbox.stub(element, 'getSizer_');\n      expect(element.isBuilt()).to.equal(false);\n      expect(testElementBuildCallback).to.have.not.been.called;\n      expect(element.signals().get(CommonSignals_Enum.BUILT)).to.not.be.ok;\n      clock.tick(1);\n      container.appendChild(element);\n      return element.buildingPromise_.then(() => {\n        expect(element.isBuilt()).to.equal(true);\n        expect(element).to.not.have.class('i-amphtml-notbuilt');\n        expect(element).to.not.have.class('amp-notbuilt');\n        expect(element).to.have.class('i-amphtml-built');\n        expect(getSizerStub).to.be.calledOnce;\n        expect(testElementBuildCallback).to.be.calledOnce;\n        expect(element.signals().get(CommonSignals_Enum.BUILT)).to.be.ok;\n        return element.whenBuilt(); // Should eventually resolve.\n      });\n    });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"Element - attachedCallback is called post build and on reconnect","suites":["CustomElement"],"updatePoint":{"line":504,"column":72,"index":21885},"line":504,"code":"    it('Element - attachedCallback is called post build and on reconnect', async () => {\n      const element = new ElementClass();\n\n      // First build.\n      clock.tick(1);\n      container.appendChild(element);\n      await element.buildingPromise_;\n      expect(testElementAttachedCallback).to.be.calledOnce;\n\n      // Detach.\n      container.removeChild(element);\n      clock.tick(1);\n      expect(testElementDetachedCallback).to.be.calledOnce;\n\n      // Reconnect.\n      container.appendChild(element);\n      clock.tick(1);\n      expect(testElementAttachedCallback).to.be.calledTwice;\n    });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"should build on consent sufficient","suites":["CustomElement"],"updatePoint":{"line":523,"column":42,"index":22452},"line":523,"code":"    it('should build on consent sufficient', () => {\n      const element = new ElementClass();\n      env.sandbox.stub(Services, 'consentPolicyServiceForDocOrNull').callsFake(() => {\n        return Promise.resolve({\n          whenPolicyUnblock: () => {\n            return Promise.resolve(true);\n          }\n        });\n      });\n      env.sandbox.stub(element, 'getConsentPolicy_').callsFake(() => {\n        return 'default';\n      });\n      clock.tick(1);\n      container.appendChild(element);\n      return element.whenBuilt();\n    });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"should build on no consent policy","suites":["CustomElement"],"updatePoint":{"line":539,"column":41,"index":22987},"line":539,"code":"    it('should build on no consent policy', () => {\n      const element = new ElementClass();\n      env.sandbox.stub(Services, 'consentPolicyServiceForDocOrNull').resolves(null);\n      env.sandbox.stub(element, 'getConsentPolicy_').callsFake(() => {\n        return 'default';\n      });\n      clock.tick(1);\n      container.appendChild(element);\n      return element.whenBuilt();\n    });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"should not build on consent insufficient","suites":["CustomElement"],"updatePoint":{"line":549,"column":48,"index":23381},"line":549,"code":"    it('should not build on consent insufficient', () => {\n      const element = new ElementClass();\n      env.sandbox.stub(Services, 'consentPolicyServiceForDocOrNull').callsFake(() => {\n        return Promise.resolve({\n          whenPolicyUnblock: () => {\n            return Promise.resolve(false);\n          }\n        });\n      });\n      env.sandbox.stub(element, 'getConsentPolicy_').callsFake(() => {\n        return 'default';\n      });\n      clock.tick(1);\n      container.appendChild(element);\n      return expect(element.whenBuilt()).to.eventually.be.rejectedWith(/BLOCK_BY_CONSENT/);\n    });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"should respect user specified consent policy","suites":["CustomElement"],"updatePoint":{"line":565,"column":52,"index":23986},"line":565,"code":"    it('should respect user specified consent policy', () => {\n      const element = new ElementClass();\n      container.appendChild(element);\n      expect(element.getConsentPolicy_()).to.equal(null);\n      element.setAttribute('data-block-on-consent', '');\n      expect(element.getConsentPolicy_()).to.equal('default');\n      element.setAttribute('data-block-on-consent', '_none');\n      expect(element.getConsentPolicy_()).to.equal('_none');\n    });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"should repsect metaTag specified consent","suites":["CustomElement"],"updatePoint":{"line":574,"column":48,"index":24434},"line":574,"code":"    it('should repsect metaTag specified consent', () => {\n      const meta = doc.createElement('meta');\n      meta.setAttribute('name', 'amp-consent-blocking');\n      meta.setAttribute('content', 'amp-test');\n      doc.head.appendChild(meta);\n      const element = new ElementClass();\n      container.appendChild(element);\n      expect(element.getConsentPolicy_()).to.equal('default');\n      expect(element.getAttribute('data-block-on-consent')).to.equal('default');\n    });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"should find no consent purposes w/ no attribute","suites":["CustomElement","consent","getPurposeConsent_"],"updatePoint":{"line":590,"column":59,"index":25098},"line":590,"code":"        it('should find no consent purposes w/ no attribute', () => {\n          expect(element.getPurposesConsent_()).to.be.undefined;\n        });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"should find no consent purposes w/ no value on attribute","suites":["CustomElement","consent","getPurposeConsent_"],"updatePoint":{"line":593,"column":68,"index":25254},"line":593,"code":"        it('should find no consent purposes w/ no value on attribute', () => {\n          element.setAttribute('data-block-on-consent-purposes', '');\n          expect(element.getPurposesConsent_()).to.be.undefined;\n        });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"should find correct consent purposes","suites":["CustomElement","consent","getPurposeConsent_"],"updatePoint":{"line":597,"column":48,"index":25460},"line":597,"code":"        it('should find correct consent purposes', () => {\n          element.setAttribute('data-block-on-consent-purposes', 'purpose-foo,purpose-bar');\n          expect(element.getPurposesConsent_()).to.deep.equals(['purpose-foo', 'purpose-bar']);\n        });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"should find correct consent purposes w/ whitespaces","suites":["CustomElement","consent","getPurposeConsent_"],"updatePoint":{"line":601,"column":63,"index":25735},"line":601,"code":"        it('should find correct consent purposes w/ whitespaces', () => {\n          element.setAttribute('data-block-on-consent-purposes', '     purpose-foo, purpose-bar');\n          expect(element.getPurposesConsent_()).to.deep.equals(['purpose-foo', 'purpose-bar']);\n        });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"should default to policyId","suites":["CustomElement","consent","getPurposeConsent_"],"updatePoint":{"line":606,"column":36,"index":25999},"line":606,"code":"      it('should default to policyId', () => {\n        const element = new ElementClass();\n        const purposesSpy = env.sandbox.spy();\n        env.sandbox.stub(Services, 'consentPolicyServiceForDocOrNull').resolves({\n          whenPolicyUnblock: () => {\n            return Promise.resolve(true);\n          },\n          whenPurposesUnblock: () => purposesSpy\n        });\n        element.setAttribute('data-block-on-consent', '');\n        element.setAttribute('data-block-on-consent-purposes', 'purpose-foo,purpose-bar');\n        clock.tick(1);\n        container.appendChild(element);\n        return element.whenBuilt().then(() => {\n          expect(purposesSpy).to.not.be.called;\n        });\n      });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"should build on purpose consents","suites":["CustomElement","consent","getPurposeConsent_"],"updatePoint":{"line":623,"column":42,"index":26709},"line":623,"code":"      it('should build on purpose consents', () => {\n        const element = new ElementClass();\n        const defaultPolicySpy = env.sandbox.spy();\n        env.sandbox.stub(Services, 'consentPolicyServiceForDocOrNull').resolves({\n          whenPolicyUnblock: () => {\n            return defaultPolicySpy;\n          },\n          whenPurposesUnblock: () => {\n            return Promise.resolve(true);\n          }\n        });\n        element.setAttribute('data-block-on-consent-purposes', 'purpose-foo,purpose-bar');\n        clock.tick(1);\n        container.appendChild(element);\n        return element.whenBuilt().then(() => {\n          expect(defaultPolicySpy).to.not.be.called;\n        });\n      });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"should not build on insufficient purpose consents","suites":["CustomElement","consent","getPurposeConsent_"],"updatePoint":{"line":641,"column":59,"index":27426},"line":641,"code":"      it('should not build on insufficient purpose consents', () => {\n        const element = new ElementClass();\n        env.sandbox.stub(Services, 'consentPolicyServiceForDocOrNull').resolves({\n          whenPurposesUnblock: () => {\n            return Promise.resolve(false);\n          }\n        });\n        element.setAttribute('data-block-on-consent-purposes', 'purpose-foo,purpose-bar');\n        clock.tick(1);\n        container.appendChild(element);\n        return expect(element.whenBuilt()).to.eventually.be.rejectedWith(/BLOCK_BY_CONSENT/);\n      });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"should anticipate sync build errors","suites":["CustomElement","consent","getPurposeConsent_"],"updatePoint":{"line":654,"column":43,"index":27978},"line":654,"code":"    it('should anticipate sync build errors', () => {\n      expectAsyncConsoleError(/intentional/, 2);\n      const element = new ElementClass();\n      env.sandbox.stub(TestElement.prototype, 'buildCallback').callsFake(() => {\n        throw new Error('intentional');\n      });\n      container.appendChild(element);\n      expect(element.isBuilt()).to.be.false;\n      expect(element).to.have.class('i-amphtml-notbuilt');\n      expect(element).to.have.class('amp-notbuilt');\n      return expect(element.whenBuilt()).to.eventually.be.rejectedWith(/intentional/);\n    });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"Element - build creates a placeholder if one does not exist","suites":["CustomElement","consent","getPurposeConsent_"],"updatePoint":{"line":666,"column":67,"index":28568},"line":666,"code":"    it('Element - build creates a placeholder if one does not exist', () => {\n      const element = new ElementClass();\n      expect(testElementCreatePlaceholderCallback).to.have.not.been.called;\n      container.appendChild(element);\n      return element.buildingPromise_.then(() => {\n        expect(element.isBuilt()).to.equal(true);\n        expect(testElementCreatePlaceholderCallback).to.be.calledOnce;\n      });\n    });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"Element - build does not create a placeholder when one exists","suites":["CustomElement","consent","getPurposeConsent_"],"updatePoint":{"line":675,"column":69,"index":28994},"line":675,"code":"    it('Element - build does not create a placeholder when one exists', () => {\n      const element = new ElementClass();\n      const placeholder = doc.createElement('div');\n      placeholder.setAttribute('placeholder', '');\n      element.appendChild(placeholder);\n      expect(testElementCreatePlaceholderCallback).to.have.not.been.called;\n      container.appendChild(element);\n      return element.buildingPromise_.then(() => {\n        expect(element.isBuilt()).to.equal(true);\n        expect(element.readyState).to.equal('loading');\n        expect(testElementCreatePlaceholderCallback).to.have.not.been.called;\n      });\n    });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"Element - buildCallback cannot be called twice","suites":["CustomElement","consent","getPurposeConsent_"],"updatePoint":{"line":688,"column":54,"index":29611},"line":688,"code":"    it('Element - buildCallback cannot be called twice', () => {\n      const element = new ElementClass();\n      expect(element.isBuilt()).to.equal(false);\n      expect(testElementBuildCallback).to.have.not.been.called;\n      container.appendChild(element);\n      return element.buildingPromise_.then(() => {\n        expect(element.isBuilt()).to.equal(true);\n        expect(testElementBuildCallback).to.be.calledOnce;\n\n        // Call again.\n        return element.buildInternal().then(() => {\n          expect(element.isBuilt()).to.equal(true);\n          expect(element.readyState).to.equal('loading');\n          expect(testElementBuildCallback).to.be.calledOnce;\n          setTimeout(() => {\n            expect(testElementPreconnectCallback).to.be.calledOnce;\n          }, 0);\n        });\n      });\n    });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"Element - build is repeatable","suites":["CustomElement","consent","getPurposeConsent_"],"updatePoint":{"line":708,"column":37,"index":30403},"line":708,"code":"    it('Element - build is repeatable', async () => {\n      const element = new ElementClass();\n      expect(element.isBuilt()).to.equal(false);\n      expect(testElementBuildCallback).to.have.not.been.called;\n      container.appendChild(element);\n      const buildingPromise = element.buildingPromise_;\n      expect(element.buildInternal()).to.equal(buildingPromise);\n      // Skip a task.\n      await new Promise(setTimeout);\n      expect(testElementBuildCallback).to.be.calledOnce;\n    });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"Element - build NOT allowed when in template","suites":["CustomElement","consent","getPurposeConsent_"],"updatePoint":{"line":719,"column":52,"index":30910},"line":719,"code":"    it('Element - build NOT allowed when in template', () => {\n      const element = new ElementClass();\n      expect(element.isBuilt()).to.equal(false);\n      expect(testElementBuildCallback).to.have.not.been.called;\n      element.isInTemplate_ = true;\n      allowConsoleError(() => {\n        expect(() => {\n          element.buildInternal();\n        }).to.throw(/Must never be called in template/);\n      });\n      expect(element.isBuilt()).to.equal(false);\n      expect(testElementBuildCallback).to.have.not.been.called;\n    });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"StubElement - build never allowed","suites":["CustomElement","consent","getPurposeConsent_"],"updatePoint":{"line":732,"column":41,"index":31431},"line":732,"code":"    it('StubElement - build never allowed', () => {\n      const element = new StubElementClass();\n      expect(element.isBuilt()).to.equal(false);\n      expect(testElementBuildCallback).to.have.not.been.called;\n      allowConsoleError(() => {\n        expect(() => {\n          element.buildInternal();\n        }).to.throw(/Cannot build unupgraded element/);\n      });\n      expect(element.isBuilt()).to.equal(false);\n      expect(testElementBuildCallback).to.have.not.been.called;\n    });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"Element - createPlaceholder","suites":["CustomElement","consent","getPurposeConsent_"],"updatePoint":{"line":744,"column":35,"index":31913},"line":744,"code":"    it('Element - createPlaceholder', () => {\n      const element = new ElementClass();\n      container.appendChild(element);\n      element.createPlaceholder();\n      expect(testElementCreatePlaceholderCallback).to.be.calledOnce;\n    });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"Element - attachedCallback","suites":["CustomElement","consent","getPurposeConsent_"],"updatePoint":{"line":750,"column":34,"index":32150},"line":750,"code":"    it('Element - attachedCallback', () => {\n      const element = new ElementClass();\n      element.setAttribute('layout', 'fill');\n      expect(element.everAttached).to.equal(false);\n      expect(element.getLayout()).to.equal(Layout_Enum.NODISPLAY);\n      resourcesMock.expects('add').withExactArgs(element).atLeast(1);\n      resourcesMock.expects('upgraded').withExactArgs(element).atLeast(1);\n      container.appendChild(element);\n      expect(element.everAttached).to.equal(true);\n      expect(element.getLayout()).to.equal(Layout_Enum.FILL);\n      expect(element.getLayout()).to.equal(Layout_Enum.FILL);\n      expect(getImplSyncForTesting(element).getLayout()).to.equal(Layout_Enum.FILL);\n    });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"StubElement - attachedCallback","suites":["CustomElement","consent","getPurposeConsent_"],"updatePoint":{"line":763,"column":38,"index":32857},"line":763,"code":"    it('StubElement - attachedCallback', () => {\n      const element = new StubElementClass();\n      element.setAttribute('layout', 'fill');\n      expect(element.everAttached).to.equal(false);\n      expect(element.getLayout()).to.equal(Layout_Enum.NODISPLAY);\n      resourcesMock.expects('add').withExactArgs(element).atLeast(1);\n      container.appendChild(element);\n      expect(element.everAttached).to.equal(true);\n      expect(element.getLayout()).to.equal(Layout_Enum.FILL);\n      // Not upgraded yet, but extension hasn't failed.\n      expect(element).not.to.have.class('amp-unresolved');\n      expect(element).not.to.have.class('i-amphtml-unresolved');\n\n      // Upgrade\n      resourcesMock.expects('upgraded').withExactArgs(element).once();\n      element.upgrade(TestElement);\n      expect(element.getLayout()).to.equal(Layout_Enum.FILL);\n      expect(element.getLayout()).to.equal(Layout_Enum.FILL);\n      expect(getImplSyncForTesting(element).getLayout()).to.equal(Layout_Enum.FILL);\n\n      // Now it's called.\n      expect(element).to.not.have.class('amp-unresolved');\n      expect(element).to.not.have.class('i-amphtml-unresolved');\n    });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"StubElement - attachedCallback after failed to load","suites":["CustomElement","consent","getPurposeConsent_"],"updatePoint":{"line":787,"column":59,"index":34032},"line":787,"code":"    it('StubElement - attachedCallback after failed to load', () => {\n      const element = new StubElementClass();\n      markUnresolvedElements('amp-stub');\n      element.setAttribute('layout', 'fill');\n      expect(element.everAttached).to.equal(false);\n      expect(element.getLayout()).to.equal(Layout_Enum.NODISPLAY);\n      resourcesMock.expects('add').withExactArgs(element).atLeast(1);\n      container.appendChild(element);\n      expect(element.everAttached).to.equal(true);\n      expect(element.getLayout()).to.equal(Layout_Enum.FILL);\n      // Extension already failed before attachedCallback\n      expect(element).to.have.class('amp-unresolved');\n      expect(element).to.have.class('i-amphtml-unresolved');\n    });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"StubElement - attachedCallback before failed to load","suites":["CustomElement","consent","getPurposeConsent_"],"updatePoint":{"line":801,"column":60,"index":34759},"line":801,"code":"    it('StubElement - attachedCallback before failed to load', () => {\n      const element = new StubElementClass();\n      element.setAttribute('layout', 'fill');\n      expect(element.everAttached).to.equal(false);\n      expect(element.getLayout()).to.equal(Layout_Enum.NODISPLAY);\n      resourcesMock.expects('add').withExactArgs(element).atLeast(1);\n      container.appendChild(element);\n      expect(element.everAttached).to.equal(true);\n      expect(element.getLayout()).to.equal(Layout_Enum.FILL);\n      // Not upgraded yet, but extension hasn't failed.\n      expect(element).not.to.have.class('amp-unresolved');\n      expect(element).not.to.have.class('i-amphtml-unresolved');\n\n      // Now it's called.\n      markUnresolvedElements('amp-stub');\n      expect(element).to.have.class('amp-unresolved');\n      expect(element).to.have.class('i-amphtml-unresolved');\n    });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"Element - detachedCallback","suites":["CustomElement","consent","getPurposeConsent_"],"updatePoint":{"line":819,"column":34,"index":35609},"line":819,"code":"    it('Element - detachedCallback', () => {\n      const element = new ElementClass();\n      element.setAttribute('layout', 'fill');\n      expect(element.everAttached).to.equal(false);\n      expect(element.getLayout()).to.equal(Layout_Enum.NODISPLAY);\n      resourcesMock.expects('add').withExactArgs(element).atLeast(1);\n      resourcesMock.expects('upgraded').withExactArgs(element).atLeast(1);\n      container.appendChild(element);\n      resourcesMock.expects('remove').withExactArgs(element).once();\n      container.removeChild(element);\n      expect(element.everAttached).to.equal(true);\n      expect(element.getLayout()).to.equal(Layout_Enum.FILL);\n      expect(getImplSyncForTesting(element).getLayout()).to.equal(Layout_Enum.FILL);\n    });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"Element - handles async detachedCallback when connected","suites":["CustomElement","consent","getPurposeConsent_"],"updatePoint":{"line":833,"column":63,"index":36386},"line":833,"code":"    it('Element - handles async detachedCallback when connected', () => {\n      const element = new ElementClass();\n      element.setAttribute('layout', 'fill');\n      expect(element.everAttached).to.equal(false);\n      expect(element.getLayout()).to.equal(Layout_Enum.NODISPLAY);\n      resourcesMock.expects('add').withExactArgs(element).atLeast(1);\n      resourcesMock.expects('upgraded').withExactArgs(element).atLeast(1);\n      container.appendChild(element);\n      resourcesMock.expects('remove').withExactArgs(element).never();\n      env.sandbox.defineProperty(element, 'isConnected', {\n        value: true\n      });\n      container.removeChild(element);\n      expect(element.everAttached).to.equal(true);\n      expect(element.getLayout()).to.equal(Layout_Enum.FILL);\n      expect(getImplSyncForTesting(element).getLayout()).to.equal(Layout_Enum.FILL);\n    });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"Element - layoutCallback before build","suites":["CustomElement","consent","getPurposeConsent_"],"updatePoint":{"line":850,"column":45,"index":37235},"line":850,"code":"    it('Element - layoutCallback before build', () => {\n      const element = new ElementClass();\n      element.setAttribute('layout', 'fill');\n      expect(testElementLayoutCallback).to.have.not.been.called;\n      expect(element.isBuilt()).to.equal(false);\n      allowConsoleError(() => {\n        expect(() => {\n          element.layoutCallback();\n        }).to.throw(/Must be built to receive viewport events/);\n      });\n      expect(testElementLayoutCallback).to.have.not.been.called;\n    });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"StubElement - layoutCallback before build or upgrade","suites":["CustomElement","consent","getPurposeConsent_"],"updatePoint":{"line":862,"column":60,"index":37747},"line":862,"code":"    it('StubElement - layoutCallback before build or upgrade', () => {\n      const element = new StubElementClass();\n      element.setAttribute('layout', 'fill');\n      expect(testElementLayoutCallback).to.have.not.been.called;\n      expect(element.isUpgraded()).to.equal(false);\n      expect(element.isBuilt()).to.equal(false);\n      allowConsoleError(() => {\n        expect(() => {\n          element.layoutCallback();\n        }).to.throw(/Must be built to receive viewport events/);\n      });\n      resourcesMock.expects('upgraded').withExactArgs(element).never();\n      element.upgrade(TestElement);\n      expect(element.isUpgraded()).to.equal(false);\n      expect(element.isBuilt()).to.equal(false);\n      allowConsoleError(() => {\n        expect(() => {\n          element.layoutCallback();\n        }).to.throw(/Must be built to receive viewport events/);\n      });\n      expect(testElementLayoutCallback).to.have.not.been.called;\n    });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"Element - layoutCallback","suites":["CustomElement","consent","getPurposeConsent_"],"updatePoint":{"line":884,"column":32,"index":38662},"line":884,"code":"    it('Element - layoutCallback', () => {\n      const element = new ElementClass();\n      element.setAttribute('layout', 'fill');\n      container.appendChild(element);\n      expect(element.readyState).to.equal('building');\n      return element.buildInternal().then(() => {\n        expect(element.isBuilt()).to.equal(true);\n        expect(element.readyState).to.equal('loading');\n        expect(testElementLayoutCallback).to.have.not.been.called;\n        const p = element.layoutCallback();\n        expect(testElementLayoutCallback).to.be.calledOnce;\n        expect(element.signals().get(CommonSignals_Enum.LOAD_START)).to.be.ok;\n        expect(element.signals().get(CommonSignals_Enum.LOAD_END)).to.be.null;\n        setTimeout(() => {\n          expect(testElementPreconnectCallback).to.have.callCount(2);\n          expect(testElementPreconnectCallback.getCall(1).args[0]).to.be.true;\n        }, 0);\n        return p.then(() => {\n          expect(element.readyState).to.equal('complete');\n          expect(element.signals().get(CommonSignals_Enum.LOAD_END)).to.be.ok;\n        });\n      });\n    });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"Element - layoutCallback aborted waiting for mutate phase","suites":["CustomElement","consent","getPurposeConsent_"],"updatePoint":{"line":907,"column":65,"index":39793},"line":907,"code":"    it('Element - layoutCallback aborted waiting for mutate phase', () => {\n      const element = new ElementClass();\n      element.setAttribute('layout', 'fill');\n      container.appendChild(element);\n      return element.buildInternal().then(() => {\n        expect(element.isBuilt()).to.equal(true);\n        expect(testElementLayoutCallback).to.have.not.been.called;\n        const controller = new AbortController();\n        controller.abort();\n        const p = element.layoutCallback(controller.signal);\n        expect(testElementLayoutCallback).not.to.be.called;\n        expect(element.signals().get(CommonSignals_Enum.LOAD_START)).to.be.null;\n        expect(element.signals().get(CommonSignals_Enum.LOAD_END)).to.be.null;\n        setTimeout(() => {\n          expect(testElementPreconnectCallback).to.have.callCount(1);\n        }, 0);\n        return expect(p).to.be.rejected.then(() => {\n          expect(element.readyState).to.equal('loading');\n          expect(element.signals().get(CommonSignals_Enum.LOAD_END)).to.be.null;\n        });\n      });\n    });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"Element - layoutCallback aborted before completing layout","suites":["CustomElement","consent","getPurposeConsent_"],"updatePoint":{"line":929,"column":65,"index":40855},"line":929,"code":"    it('Element - layoutCallback aborted before completing layout', () => {\n      const element = new ElementClass();\n      element.setAttribute('layout', 'fill');\n      container.appendChild(element);\n      return element.buildInternal().then(() => {\n        expect(element.isBuilt()).to.equal(true);\n        expect(testElementLayoutCallback).to.have.not.been.called;\n        const controller = new AbortController();\n        const stub = env.sandbox.stub(TestElement.prototype, 'layoutCallback').callsFake(() => {\n          controller.abort();\n        });\n        const p = element.layoutCallback(controller.signal);\n        expect(testElementLayoutCallback).not.to.be.called;\n        expect(element.signals().get(CommonSignals_Enum.LOAD_START)).to.be.ok;\n        expect(element.signals().get(CommonSignals_Enum.LOAD_END)).to.be.null;\n        setTimeout(() => {\n          expect(testElementPreconnectCallback).to.have.callCount(2);\n        }, 0);\n        return expect(p).to.be.rejected.then(() => {\n          expect(stub).to.have.been.called;\n          expect(element.readyState).to.equal('loading');\n          expect(element.signals().get(CommonSignals_Enum.LOAD_END)).to.be.null;\n        });\n      });\n    });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"Element - layoutCallback aborted before throwing in layout","suites":["CustomElement","consent","getPurposeConsent_"],"updatePoint":{"line":954,"column":66,"index":42071},"line":954,"code":"    it('Element - layoutCallback aborted before throwing in layout', () => {\n      const element = new ElementClass();\n      element.setAttribute('layout', 'fill');\n      container.appendChild(element);\n      return element.buildInternal().then(() => {\n        expect(element.isBuilt()).to.equal(true);\n        expect(testElementLayoutCallback).to.have.not.been.called;\n        const controller = new AbortController();\n        const stub = env.sandbox.stub(TestElement.prototype, 'layoutCallback').callsFake(() => {\n          controller.abort();\n          throw new Error('throwaway');\n        });\n        const p = element.layoutCallback(controller.signal);\n        expect(testElementLayoutCallback).not.to.be.called;\n        expect(element.signals().get(CommonSignals_Enum.LOAD_START)).to.be.ok;\n        expect(element.signals().get(CommonSignals_Enum.LOAD_END)).to.be.null;\n        setTimeout(() => {\n          expect(testElementPreconnectCallback).to.have.callCount(2);\n        }, 0);\n        return expect(p).to.be.rejected.then(() => {\n          expect(stub).to.have.been.called;\n          expect(element.readyState).to.equal('loading');\n          expect(element.signals().get(CommonSignals_Enum.LOAD_END)).to.be.null;\n        });\n      });\n    });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"Element - layoutCallback should call firstLayoutCompleted only once","suites":["CustomElement","consent","getPurposeConsent_"],"updatePoint":{"line":980,"column":75,"index":43336},"line":980,"code":"    it('Element - layoutCallback should call firstLayoutCompleted only once', () => {\n      const element = new ElementClass();\n      element.setAttribute('layout', 'fill');\n      container.appendChild(element);\n      return element.buildingPromise_.then(() => {\n        const p = element.layoutCallback();\n        expect(testElementLayoutCallback).to.be.calledOnce;\n        expect(testElementFirstLayoutCompleted).to.have.not.been.called;\n        return p;\n      }).then(() => {\n        expect(testElementFirstLayoutCompleted).to.be.calledOnce;\n\n        // But not second time.\n        const p2 = element.layoutCallback();\n        expect(testElementLayoutCallback).to.have.callCount(2);\n        expect(testElementFirstLayoutCompleted).to.be.calledOnce;\n        return p2;\n      }).then(() => {\n        expect(testElementFirstLayoutCompleted).to.be.calledOnce;\n      });\n    });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"Element - layoutCallback is NOT allowed in template","suites":["CustomElement","consent","getPurposeConsent_"],"updatePoint":{"line":1001,"column":59,"index":44199},"line":1001,"code":"    it('Element - layoutCallback is NOT allowed in template', () => {\n      const element = new ElementClass();\n      element.setAttribute('layout', 'fill');\n      container.appendChild(element);\n      return element.buildInternal().then(() => {\n        expect(element.isBuilt()).to.equal(true);\n        expect(testElementLayoutCallback).to.have.not.been.called;\n        element.isInTemplate_ = true;\n        allowConsoleError(() => {\n          expect(() => {\n            element.layoutCallback();\n          }).to.throw(/Must never be called in template/);\n        });\n      });\n    });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"StubElement - layoutCallback after attached","suites":["CustomElement","consent","getPurposeConsent_"],"updatePoint":{"line":1016,"column":51,"index":44778},"line":1016,"code":"    it('StubElement - layoutCallback after attached', () => {\n      const element = new StubElementClass();\n      element.setAttribute('layout', 'fill');\n      element.everAttached = true;\n      element.ampdoc_ = env.ampdoc;\n      element.resources_ = resources;\n      resourcesMock.expects('upgraded').withExactArgs(element).once();\n      element.upgrade(TestElement);\n      return element.buildInternal().then(() => {\n        expect(element.isUpgraded()).to.equal(true);\n        expect(element.isBuilt()).to.equal(true);\n        expect(testElementLayoutCallback).to.have.not.been.called;\n        const p = element.layoutCallback();\n        expect(testElementLayoutCallback).to.be.calledOnce;\n        return p;\n      }).then(() => {\n        expect(element.readyState).to.equal('complete');\n      });\n    });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"should enqueue actions until built","suites":["CustomElement","consent","getPurposeConsent_"],"updatePoint":{"line":1035,"column":42,"index":45578},"line":1035,"code":"    it('should enqueue actions until built', () => {\n      const element = new ElementClass();\n      const handler = env.sandbox.stub(TestElement.prototype, 'executeAction');\n      container.appendChild(element);\n      expect(element.actionQueue_).to.not.equal(null);\n      const inv = {};\n      element.enqueAction(inv);\n      expect(element.actionQueue_.length).to.equal(1);\n      expect(element.actionQueue_[0]).to.equal(inv);\n      expect(handler).to.have.not.been.called;\n    });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"should execute action immediately after built","suites":["CustomElement","consent","getPurposeConsent_"],"updatePoint":{"line":1046,"column":53,"index":46074},"line":1046,"code":"    it('should execute action immediately after built', () => {\n      const element = new ElementClass();\n      const handler = env.sandbox.stub(TestElement.prototype, 'executeAction');\n      container.appendChild(element);\n      return element.buildInternal().then(() => {\n        const inv = {};\n        element.enqueAction(inv);\n        expect(handler).to.be.calledOnce;\n        expect(handler.getCall(0).args[0]).to.equal(inv);\n        expect(handler.getCall(0).args[1]).to.equal(false);\n      });\n    });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"should dequeue all actions after build","suites":["CustomElement","consent","getPurposeConsent_"],"updatePoint":{"line":1058,"column":46,"index":46577},"line":1058,"code":"    it('should dequeue all actions after build', () => {\n      const element = new ElementClass();\n      const handler = env.sandbox.stub(TestElement.prototype, 'executeAction');\n      const inv1 = {};\n      const inv2 = {};\n      element.enqueAction(inv1);\n      element.enqueAction(inv2);\n      expect(element.actionQueue_.length).to.equal(2);\n      expect(element.actionQueue_[0]).to.equal(inv1);\n      expect(element.actionQueue_[1]).to.equal(inv2);\n      expect(handler).to.have.not.been.called;\n      container.appendChild(element);\n      return element.buildingPromise_.then(() => {\n        clock.tick(10);\n        expect(handler).to.have.callCount(2);\n        expect(handler.getCall(0).args[0]).to.equal(inv1);\n        expect(handler.getCall(0).args[1]).to.equal(true);\n        expect(handler.getCall(1).args[0]).to.equal(inv2);\n        expect(handler.getCall(1).args[1]).to.equal(true);\n        expect(element.actionQueue_).to.equal(null);\n      });\n    });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"should NOT enqueue actions when in template","suites":["CustomElement","consent","getPurposeConsent_"],"updatePoint":{"line":1080,"column":51,"index":47549},"line":1080,"code":"    it('should NOT enqueue actions when in template', () => {\n      const element = new ElementClass();\n      expect(element.actionQueue_).to.not.equal(null);\n      const inv = {};\n      element.isInTemplate_ = true;\n      allowConsoleError(() => {\n        expect(() => {\n          element.enqueAction(inv);\n        }).to.throw(/Must never be called in template/);\n      });\n    });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"should not request remeasure when no media attributes","suites":["CustomElement","apply sizes and media query"],"updatePoint":{"line":1113,"column":63,"index":48734},"line":1113,"code":"      it('should not request remeasure when no media attributes', () => {\n        doc.body.appendChild(element1);\n        expect(requestMeasureStub).to.not.be.called;\n      });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"should not apply sizes when \"disable-inline-width\" is present","suites":["CustomElement","apply sizes and media query"],"updatePoint":{"line":1117,"column":71,"index":48919},"line":1117,"code":"      it('should not apply sizes when \"disable-inline-width\" is present', () => {\n        element1.setAttribute('disable-inline-width', null);\n        element1.setAttribute('sizes', '(min-width: 1px) 200px, 50vw');\n        doc.body.appendChild(element1);\n        expect(element1.style.width).not.to.equal('200px');\n        expect(requestMeasureStub).to.not.be.called;\n      });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"should apply media condition","suites":["CustomElement","apply sizes and media query"],"updatePoint":{"line":1124,"column":38,"index":49264},"line":1124,"code":"      it('should apply media condition', () => {\n        element1.setAttribute('media', '(min-width: 1px)');\n        doc.body.appendChild(element1);\n        expect(element1).to.not.have.class('i-amphtml-hidden-by-media-query');\n        expect(requestMeasureStub).to.be.calledOnce;\n        element2.setAttribute('media', '(min-width: 1111111px)');\n        doc.body.appendChild(element2);\n        expect(element2).to.have.class('i-amphtml-hidden-by-media-query');\n        expect(requestMeasureStub).to.be.calledTwice;\n      });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"should re-apply media condition","suites":["CustomElement","apply sizes and media query"],"updatePoint":{"line":1134,"column":41,"index":49793},"line":1134,"code":"      it('should re-apply media condition', () => {\n        element1.setAttribute('media', '(min-width: 1px)');\n        doc.body.appendChild(element1);\n        expect(element1).to.not.have.class('i-amphtml-hidden-by-media-query');\n        expect(requestMeasureStub).to.be.calledOnce;\n        matchMinWidth1px.matches = false;\n        matchMinWidth1px.onchange();\n        expect(element1).to.have.class('i-amphtml-hidden-by-media-query');\n        expect(requestMeasureStub).to.be.calledTwice;\n      });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"should apply sizes condition","suites":["CustomElement","apply sizes and media query"],"updatePoint":{"line":1144,"column":38,"index":50292},"line":1144,"code":"      it('should apply sizes condition', () => {\n        element1.setAttribute('sizes', '(min-width: 1px) 200px, 50vw');\n        doc.body.appendChild(element1);\n        expect(element1.style.width).to.equal('200px');\n        expect(requestMeasureStub).to.be.calledOnce;\n        element2.setAttribute('sizes', '(min-width: 1111111px) 200px, 50vw');\n        doc.body.appendChild(element2);\n        expect(element2.style.width).to.equal('50vw');\n        expect(requestMeasureStub).to.be.calledTwice;\n      });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"should apply heights condition","suites":["CustomElement","apply sizes and media query"],"updatePoint":{"line":1154,"column":40,"index":50801},"line":1154,"code":"      it('should apply heights condition', () => {\n        element1.sizerElement = doc.createElement('div');\n        element1.setAttribute('layout', 'responsive');\n        element1.setAttribute('width', '200px');\n        element1.setAttribute('height', '200px');\n        element1.setAttribute('heights', '(min-width: 1px) 99%, 1%');\n        container.appendChild(element1);\n        doc.body.appendChild(element1);\n        expect(element1.sizerElement.style.paddingTop).to.equal('99%');\n        expect(requestMeasureStub).to.be.calledOnce;\n        element2.sizerElement = doc.createElement('div');\n        element2.setAttribute('layout', 'responsive');\n        element2.setAttribute('width', '200px');\n        element2.setAttribute('height', '200px');\n        element2.setAttribute('heights', '(min-width: 1111111px) 99%, 1%');\n        container.appendChild(element2);\n        doc.body.appendChild(element2);\n        expect(element2.sizerElement.style.paddingTop).to.equal('1%');\n        expect(requestMeasureStub).to.be.calledTwice;\n      });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"should reapply layout=nodisplay in SSR","suites":["CustomElement","apply sizes and media query"],"updatePoint":{"line":1175,"column":46,"index":51858},"line":1175,"code":"    it('should reapply layout=nodisplay in SSR', () => {\n      const element1 = new ElementClass();\n      element1.setAttribute('i-amphtml-layout', 'nodisplay');\n      element1.setAttribute('layout', 'nodisplay');\n      container.appendChild(element1);\n      expect(element1).to.have.display('none');\n    });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"should change size without sizer","suites":["CustomElement","apply sizes and media query"],"updatePoint":{"line":1182,"column":40,"index":52161},"line":1182,"code":"    it('should change size without sizer', () => {\n      const element = new ElementClass();\n      element.applySize(111, 222, {\n        top: 1,\n        right: 2,\n        bottom: 3,\n        left: 4\n      });\n      expect(element.style.height).to.equal('111px');\n      expect(element.style.width).to.equal('222px');\n      expect(element.style.marginTop).to.equal('1px');\n      expect(element.style.marginRight).to.equal('2px');\n      expect(element.style.marginBottom).to.equal('3px');\n      expect(element.style.marginLeft).to.equal('4px');\n    });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"should change size - height only without sizer","suites":["CustomElement","apply sizes and media query"],"updatePoint":{"line":1197,"column":54,"index":52724},"line":1197,"code":"    it('should change size - height only without sizer', () => {\n      const element = new ElementClass();\n      element.applySize(111);\n      expect(element.style.height).to.equal('111px');\n    });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"should change size - width only without sizer","suites":["CustomElement","apply sizes and media query"],"updatePoint":{"line":1202,"column":53,"index":52922},"line":1202,"code":"    it('should change size - width only without sizer', () => {\n      const element = new ElementClass();\n      element.applySize(undefined, 111);\n      expect(element.style.width).to.equal('111px');\n    });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"should change size - margins only without sizer","suites":["CustomElement","apply sizes and media query"],"updatePoint":{"line":1207,"column":55,"index":53132},"line":1207,"code":"    it('should change size - margins only without sizer', () => {\n      const element = new ElementClass();\n      element.applySize(undefined, undefined, {\n        top: 1,\n        right: 2,\n        bottom: 3,\n        left: 4\n      });\n      expect(element.style.marginTop).to.equal('1px');\n      expect(element.style.marginRight).to.equal('2px');\n      expect(element.style.marginBottom).to.equal('3px');\n      expect(element.style.marginLeft).to.equal('4px');\n    });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"should change size - some margins only without sizer","suites":["CustomElement","apply sizes and media query"],"updatePoint":{"line":1220,"column":60,"index":53606},"line":1220,"code":"    it('should change size - some margins only without sizer', () => {\n      const element = new ElementClass();\n      element.style.margin = '1px 2px 3px 4px';\n      element.applySize(undefined, undefined, {\n        top: 5,\n        left: 6\n      });\n      expect(element.style.marginTop).to.equal('5px');\n      expect(element.style.marginRight).to.equal('2px');\n      expect(element.style.marginBottom).to.equal('3px');\n      expect(element.style.marginLeft).to.equal('6px');\n    });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"should change size - some margins only without sizer","suites":["CustomElement","apply sizes and media query"],"updatePoint":{"line":1232,"column":60,"index":54091},"line":1232,"code":"    it('should change size - some margins only without sizer', () => {\n      const element = new ElementClass();\n      element.style.margin = '1px 2px 3px 4px';\n      element.applySize(undefined, undefined, {\n        top: 5,\n        left: 6\n      });\n      expect(element.style.marginTop).to.equal('5px');\n      expect(element.style.marginRight).to.equal('2px');\n      expect(element.style.marginBottom).to.equal('3px');\n      expect(element.style.marginLeft).to.equal('6px');\n    });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"should change size with sizer","suites":["CustomElement","apply sizes and media query"],"updatePoint":{"line":1244,"column":37,"index":54553},"line":1244,"code":"    it('should change size with sizer', () => {\n      const element = new ElementClass();\n      const sizer = doc.createElement('div');\n      element.sizerElement = sizer;\n      element.applySize(111, 222, {\n        top: 1,\n        right: 2,\n        bottom: 3,\n        left: 4\n      });\n      expect(element.style.height).to.equal('111px');\n      expect(element.style.width).to.equal('222px');\n      expect(element.style.marginTop).to.equal('1px');\n      expect(element.style.marginRight).to.equal('2px');\n      expect(element.style.marginBottom).to.equal('3px');\n      expect(element.style.marginLeft).to.equal('4px');\n    });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"should reset sizer for responsive layout","suites":["CustomElement","apply sizes and media query"],"updatePoint":{"line":1261,"column":48,"index":55192},"line":1261,"code":"    it('should reset sizer for responsive layout', () => {\n      const element = new ElementClass();\n      element.layout_ = Layout_Enum.RESPONSIVE;\n      const sizer = doc.createElement('div');\n      element.sizerElement = sizer;\n      element.applySize(111, 222, {\n        top: 1,\n        right: 2,\n        bottom: 3,\n        left: 4\n      });\n      expect(sizer.style.paddingTop).to.equal('0px');\n      expect(element.sizerElement).to.be.null;\n    });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"should reset sizer for intrinsic layout","suites":["CustomElement","apply sizes and media query"],"updatePoint":{"line":1275,"column":47,"index":55646},"line":1275,"code":"    it('should reset sizer for intrinsic layout', () => {\n      const element = new ElementClass();\n      element.layout_ = Layout_Enum.INTRINSIC;\n      const sizer = doc.createElement('i-amphtml-sizer');\n      const intrinsicSizer = doc.createElement('img');\n      intrinsicSizer.classList.add('i-amphtml-intrinsic-sizer');\n      intrinsicSizer.setAttribute('src', 'data:image/svg+xml;charset=utf-8,<svg height=&quot;610&quot; width=&quot;1080&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot; version=&quot;1.1&quot;/>');\n      sizer.appendChild(intrinsicSizer);\n      element.appendChild(sizer);\n      element.applySize(111);\n      expect(intrinsicSizer.getAttribute('src')).to.equal('');\n    });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"should change size to zero","suites":["CustomElement","apply sizes and media query"],"updatePoint":{"line":1287,"column":34,"index":56334},"line":1287,"code":"    it('should change size to zero', () => {\n      const element = new ElementClass();\n      element.applySize(0, 0);\n      expect(element.style.height).to.equal('0px');\n      expect(element.style.width).to.equal('0px');\n    });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"should change width to zero","suites":["CustomElement","apply sizes and media query"],"updatePoint":{"line":1293,"column":35,"index":56564},"line":1293,"code":"    it('should change width to zero', () => {\n      const element = new ElementClass();\n      element.applySize(undefined, 0);\n      expect(element.style.width).to.equal('0px');\n    });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"should dispatch custom event size-changed when size changed","suites":["CustomElement","apply sizes and media query"],"updatePoint":{"line":1306,"column":67,"index":57224},"line":1306,"code":"    it('should dispatch custom event size-changed when size changed', () => {\n      const element = new ElementClass();\n      const spyDispatchEvent = env.sandbox.spy();\n      element.addEventListener(AmpEvents_Enum.SIZE_CHANGED, spyDispatchEvent);\n      element.applySize();\n      expect(spyDispatchEvent).to.be.calledOnce;\n    });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"should unlayout built element and reset layoutCount","suites":["CustomElement","unlayoutCallback"],"updatePoint":{"line":1314,"column":61,"index":57592},"line":1314,"code":"      it('should unlayout built element and reset layoutCount', () => {\n        const element = new ElementClass();\n        // Non-built element doesn't receive unlayoutCallback.\n        element.unlayoutCallback();\n        expect(testElementUnlayoutCallback).to.have.not.been.called;\n        env.sandbox.stub(TestElement.prototype, 'layoutCallback').callsFake(() => {\n          testElementLayoutCallback();\n          element.layoutCount_++;\n          return Promise.resolve();\n        });\n        env.sandbox.stub(TestElement.prototype, 'unlayoutCallback').callsFake(() => {\n          testElementUnlayoutCallback();\n          return true;\n        });\n\n        // Built element receives unlayoutCallback.\n        container.appendChild(element);\n        return element.buildingPromise_.then(() => {\n          element.unlayoutCallback();\n          expect(testElementUnlayoutCallback).to.be.calledOnce;\n          expect(element.layoutCount_).to.equal(0);\n        });\n      });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"should not reset layoutCount if relayout not requested","suites":["CustomElement","unlayoutCallback"],"updatePoint":{"line":1337,"column":64,"index":58568},"line":1337,"code":"      it('should not reset layoutCount if relayout not requested', () => {\n        const element = new ElementClass();\n        env.sandbox.stub(TestElement.prototype, 'layoutCallback').callsFake(() => {\n          testElementLayoutCallback();\n          element.layoutCount_++;\n          return Promise.resolve();\n        });\n        env.sandbox.stub(TestElement.prototype, 'unlayoutCallback').callsFake(() => {\n          testElementUnlayoutCallback();\n          return false;\n        });\n        container.appendChild(element);\n        return element.buildingPromise_.then(() => {\n          element.layoutCallback();\n          element.unlayoutCallback();\n          expect(testElementUnlayoutCallback).to.be.calledOnce;\n          expect(element.layoutCount_).to.equal(1);\n        });\n      });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"StubElement","suites":["CustomElement","unlayoutCallback"],"updatePoint":{"line":1356,"column":21,"index":59317},"line":1356,"code":"      it('StubElement', () => {\n        const element = new StubElementClass();\n\n        // Unupgraded document doesn't receive unlayoutCallback.\n        element.unlayoutCallback();\n        expect(testElementUnlayoutCallback).to.have.not.been.called;\n      });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"should not pause unbuilt element","suites":["CustomElement","pauseCallback"],"updatePoint":{"line":1365,"column":42,"index":59645},"line":1365,"code":"      it('should not pause unbuilt element', () => {\n        const element = new ElementClass();\n        expect(() => element.pause()).to.not.throw();\n        expect(testElementPauseCallback).to.not.be.called;\n      });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"should pause upgraded element","suites":["CustomElement","pauseCallback"],"updatePoint":{"line":1370,"column":39,"index":59862},"line":1370,"code":"      it('should pause upgraded element', async () => {\n        const element = new ElementClass();\n        container.appendChild(element);\n        await element.buildInternal();\n        element.pause();\n        expect(testElementPauseCallback).to.be.calledOnce;\n      });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"should pause stub element","suites":["CustomElement","pauseCallback"],"updatePoint":{"line":1377,"column":35,"index":60131},"line":1377,"code":"      it('should pause stub element', () => {\n        const element = new StubElementClass();\n\n        // Unupgraded document doesn't receive pauseCallback.\n        element.pause();\n        expect(testElementPauseCallback).to.have.not.been.called;\n      });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"should unload when pause with unlayoutOnPause","suites":["CustomElement","pauseCallback"],"updatePoint":{"line":1384,"column":55,"index":60409},"line":1384,"code":"      it('should unload when pause with unlayoutOnPause', async () => {\n        const element = new ElementClass();\n        container.appendChild(element);\n        await element.buildInternal();\n        const impl = await element.getImpl();\n        env.sandbox.stub(impl, 'unlayoutOnPause').returns(true);\n        const resourceUnlayoutStub = env.sandbox.stub(element.getResource_(), 'unlayout');\n        element.pause();\n        expect(testElementPauseCallback).to.be.calledOnce;\n        expect(resourceUnlayoutStub).to.be.calledOnce;\n      });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"should pause and unlayout on unmount","suites":["CustomElement","pauseCallback"],"updatePoint":{"line":1395,"column":46,"index":60946},"line":1395,"code":"      it('should pause and unlayout on unmount', async () => {\n        const element = new ElementClass();\n        container.appendChild(element);\n        await element.buildInternal();\n        const resourceUnlayoutStub = env.sandbox.stub(element.getResource_(), 'unlayout');\n        const schedulePassStub = env.sandbox.stub(resources, 'schedulePass');\n        element.unmount();\n        expect(testElementPauseCallback).to.be.calledOnce;\n        expect(resourceUnlayoutStub).to.be.calledOnce;\n        expect(schedulePassStub).to.be.calledOnce;\n      });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"should pause and unlayout on unmount with unlayoutOnPause","suites":["CustomElement","pauseCallback"],"updatePoint":{"line":1406,"column":67,"index":61524},"line":1406,"code":"      it('should pause and unlayout on unmount with unlayoutOnPause', async () => {\n        const element = new ElementClass();\n        container.appendChild(element);\n        await element.buildInternal();\n        element.getResource_().layoutScheduled(Date.now());\n        const impl = await element.getImpl();\n        env.sandbox.stub(impl, 'unlayoutOnPause').returns(true);\n        const schedulePassStub = env.sandbox.stub(resources, 'schedulePass');\n        element.unmount();\n        expect(testElementPauseCallback).to.be.calledOnce;\n        expect(testElementUnlayoutCallback).to.be.calledOnce;\n        // `schedulePass` is triggered twice: once for pause and once for\n        // unlayout. However, it's benign because only one pass will be\n        // scheduled as a result.\n        expect(schedulePassStub).to.be.calledTwice;\n      });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"should NOT schedule pass on unmount when disconnected","suites":["CustomElement","pauseCallback"],"updatePoint":{"line":1422,"column":63,"index":62366},"line":1422,"code":"      it('should NOT schedule pass on unmount when disconnected', async () => {\n        const element = new ElementClass();\n        container.appendChild(element);\n        await element.buildInternal();\n        const resourceUnlayoutStub = env.sandbox.stub(element.getResource_(), 'unlayout');\n        const schedulePassStub = env.sandbox.stub(resources, 'schedulePass');\n        container.removeChild(element);\n        element.unmount();\n        expect(testElementPauseCallback).to.be.calledOnce;\n        expect(resourceUnlayoutStub).to.be.calledOnce;\n        expect(schedulePassStub).to.not.be.called;\n      });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"should resume upgraded element","suites":["CustomElement","resumeCallback"],"updatePoint":{"line":1436,"column":40,"index":63004},"line":1436,"code":"      it('should resume upgraded element', async () => {\n        const element = new ElementClass();\n        element.pause();\n\n        // Non-built element doesn't receive resumeCallback.\n        element.resume();\n        expect(testElementResumeCallback).to.have.not.been.called;\n\n        // Built element receives resumeCallback.\n        container.appendChild(element);\n        await element.buildInternal();\n        element.pause();\n        element.resume();\n        expect(testElementResumeCallback).to.be.calledOnce;\n      });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"should resume stub element","suites":["CustomElement","resumeCallback"],"updatePoint":{"line":1451,"column":36,"index":63532},"line":1451,"code":"      it('should resume stub element', () => {\n        const element = new StubElementClass();\n\n        // Unupgraded document doesn't receive resumeCallback.\n        element.pause();\n        element.resume();\n        expect(testElementResumeCallback).to.have.not.been.called;\n      });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"should NOT be allowed for an upgraded element","suites":["CustomElement","prerenderAllowed"],"updatePoint":{"line":1461,"column":55,"index":63887},"line":1461,"code":"      it('should NOT be allowed for an upgraded element', () => {\n        const element = new StubElementClass();\n        expect(element.prerenderAllowed()).to.be.false;\n      });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"should be allowed base on the upgraded class","suites":["CustomElement","prerenderAllowed"],"updatePoint":{"line":1465,"column":54,"index":64066},"line":1465,"code":"      it('should be allowed base on the upgraded class', () => {\n        const stub = env.sandbox.stub(TestElement, 'prerenderAllowed');\n        const element = new StubElementClass();\n        element.upgrade(TestElement);\n        stub.returns(false);\n        expect(element.prerenderAllowed()).to.be.false;\n        stub.returns(true);\n        expect(element.prerenderAllowed()).to.be.true;\n      });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"should NOT be allowed with noprerender attribute","suites":["CustomElement","prerenderAllowed"],"updatePoint":{"line":1474,"column":58,"index":64471},"line":1474,"code":"      it('should NOT be allowed with noprerender attribute', () => {\n        env.sandbox.stub(TestElement, 'prerenderAllowed').returns(true);\n        const element = new StubElementClass();\n        element.upgrade(TestElement);\n        expect(element.prerenderAllowed()).to.be.true;\n        element.setAttribute('noprerender', '');\n        expect(element.prerenderAllowed()).to.be.false;\n      });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"should NOT be allowed for an upgraded element","suites":["CustomElement","previewAllowed"],"updatePoint":{"line":1484,"column":55,"index":64913},"line":1484,"code":"      it('should NOT be allowed for an upgraded element', () => {\n        const element = new StubElementClass();\n        expect(element.previewAllowed()).to.be.false;\n      });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"should be allowed base on the upgraded class","suites":["CustomElement","previewAllowed"],"updatePoint":{"line":1488,"column":54,"index":65090},"line":1488,"code":"      it('should be allowed base on the upgraded class', () => {\n        const stub = env.sandbox.stub(TestElement, 'previewAllowed');\n        const element = new StubElementClass();\n        element.upgrade(TestElement);\n        stub.returns(false);\n        expect(element.previewAllowed()).to.be.false;\n        stub.returns(true);\n        expect(element.previewAllowed()).to.be.true;\n      });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"should build and load","suites":["CustomElement","ensureLoaded"],"updatePoint":{"line":1499,"column":31,"index":65507},"line":1499,"code":"      it('should build and load', async () => {\n        const element = new ElementClass();\n        element.setAttribute('layout', 'fixed');\n        element.setAttribute('width', '10');\n        element.setAttribute('height', '10');\n        container.appendChild(element);\n        const resource = element.getResource_();\n        expect(element.isBuilt()).to.be.false;\n        const parentPriority = 1;\n        resourcesMock.expects('scheduleLayoutOrPreload').withExactArgs(resource, /* layout */true, parentPriority, /* forceOutsideViewport */true).once();\n        const promise = element.ensureLoaded(parentPriority);\n        await resource.build();\n        await resource.whenBuilt();\n        await element.layoutCallback();\n        await promise;\n        expect(element.isBuilt()).to.be.true;\n      });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"should mount and load","suites":["CustomElement","ensureLoaded"],"updatePoint":{"line":1516,"column":31,"index":66313},"line":1516,"code":"      it('should mount and load', async () => {\n        const element = new ElementClass();\n        element.setAttribute('layout', 'fixed');\n        element.setAttribute('width', '10');\n        element.setAttribute('height', '10');\n        container.appendChild(element);\n        const resource = element.getResource_();\n        expect(element.isBuilt()).to.be.false;\n        const parentPriority = 1;\n        resourcesMock.expects('scheduleLayoutOrPreload').withExactArgs(resource, /* layout */true, parentPriority, /* forceOutsideViewport */true).once();\n        const promise = element.ensureLoaded(parentPriority);\n        await element.mount();\n        await resource.whenBuilt();\n        await element.layoutCallback();\n        await promise;\n        expect(element.isBuilt()).to.be.true;\n      });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"should load pre-built element","suites":["CustomElement","ensureLoaded"],"updatePoint":{"line":1533,"column":39,"index":67126},"line":1533,"code":"      it('should load pre-built element', async () => {\n        const element = new ElementClass();\n        element.setAttribute('layout', 'fixed');\n        element.setAttribute('width', '10');\n        element.setAttribute('height', '10');\n        container.appendChild(element);\n        const resource = element.getResource_();\n        await resource.build();\n        await resource.whenBuilt();\n        expect(element.isBuilt()).to.be.true;\n        const parentPriority = 1;\n        resourcesMock.expects('scheduleLayoutOrPreload').withExactArgs(resource, /* layout */true, parentPriority, /* forceOutsideViewport */true).once();\n        const promise = element.ensureLoaded(parentPriority);\n        await element.layoutCallback();\n        await promise;\n      });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"should do nothing for already-loaded element","suites":["CustomElement","ensureLoaded"],"updatePoint":{"line":1549,"column":54,"index":67908},"line":1549,"code":"      it('should do nothing for already-loaded element', async () => {\n        const element = new ElementClass();\n        element.setAttribute('layout', 'fixed');\n        element.setAttribute('width', '10');\n        element.setAttribute('height', '10');\n        container.appendChild(element);\n        const resource = element.getResource_();\n        await resource.build();\n        await resource.whenBuilt();\n        resource.measure();\n        resource.layoutScheduled(Date.now());\n        await resource.startLayout();\n        resourcesMock.expects('scheduleLayoutOrPreload').never();\n        await element.ensureLoaded();\n      });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"should reload a previously failed element","suites":["CustomElement","ensureLoaded"],"updatePoint":{"line":1564,"column":51,"index":68543},"line":1564,"code":"      it('should reload a previously failed element', async () => {\n        const element = new ElementClass();\n        element.setAttribute('layout', 'fixed');\n        element.setAttribute('width', '10');\n        element.setAttribute('height', '10');\n        container.appendChild(element);\n        const resource = element.getResource_();\n        await resource.build();\n        await resource.whenBuilt();\n        resource.measure();\n        resource.layoutScheduled(Date.now());\n        const layoutCallbackStub = env.sandbox.stub(element, 'layoutCallback');\n        layoutCallbackStub.returns(Promise.reject(new Error('intentional')));\n        try {\n          await resource.startLayout();\n        } catch (e) {\n          // Expected.\n        }\n        layoutCallbackStub. /*OK*/restore();\n        resourcesMock.expects('scheduleLayoutOrPreload').withExactArgs(resource, /* layout */true, /* parentPriority */undefined, /* forceOutsideViewport */true).once();\n        const promise = element.ensureLoaded();\n        await element.layoutCallback();\n        await promise;\n      });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"should do nothing for a non-displayed element","suites":["CustomElement","ensureLoaded"],"updatePoint":{"line":1588,"column":55,"index":69633},"line":1588,"code":"      it('should do nothing for a non-displayed element', async () => {\n        const element = new ElementClass();\n        element.setAttribute('layout', 'nodisplay');\n        container.appendChild(element);\n        const resource = element.getResource_();\n        await resource.build();\n        await resource.whenBuilt();\n        resourcesMock.expects('scheduleLayoutOrPreload').never();\n        await element.ensureLoaded();\n      });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"should remeasure if needed","suites":["CustomElement","ensureLoaded"],"updatePoint":{"line":1598,"column":36,"index":70054},"line":1598,"code":"      it('should remeasure if needed', async () => {\n        const element = new ElementClass();\n        element.setAttribute('layout', 'nodisplay');\n        container.appendChild(element);\n        const resource = element.getResource_();\n        await resource.build();\n        await resource.whenBuilt();\n        const measureSpy = env.sandbox.spy(resource, 'measure');\n        resourcesMock.expects('scheduleLayoutOrPreload').never();\n        resource.requestMeasure();\n        await element.ensureLoaded();\n        expect(measureSpy).to.be.calledOnce;\n      });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"getPlaceholder should return nothing","suites":["CustomElement","ensureLoaded"],"updatePoint":{"line":1633,"column":42,"index":71203},"line":1633,"code":"  it('getPlaceholder should return nothing', () => {\n    expect(element.getPlaceholder()).to.be.null;\n  });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"getPlaceholder should return the last placeholder","suites":["CustomElement","ensureLoaded"],"updatePoint":{"line":1636,"column":55,"index":71324},"line":1636,"code":"  it('getPlaceholder should return the last placeholder', () => {\n    element.appendChild(createWithAttr('placeholder'));\n    const placeholder2 = element.appendChild(createWithAttr('placeholder'));\n    expect(element.getPlaceholder()).to.equal(placeholder2);\n  });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"getPlaceholder should denylist some tags","suites":["CustomElement","ensureLoaded"],"updatePoint":{"line":1641,"column":46,"index":71581},"line":1641,"code":"  it('getPlaceholder should denylist some tags', () => {\n    const placeholder1 = element.appendChild(createWithAttr('placeholder'));\n    const input = doc.createElement('input');\n    input.setAttribute('placeholder', '');\n    element.appendChild(input);\n    expect(element.getPlaceholder()).to.not.equal(input);\n    expect(element.getPlaceholder()).to.equal(placeholder1);\n  });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"togglePlaceholder should do nothing when no placeholder is found","suites":["CustomElement","ensureLoaded"],"updatePoint":{"line":1649,"column":70,"index":71985},"line":1649,"code":"  it('togglePlaceholder should do nothing when no placeholder is found', () => {\n    expect(element.getPlaceholder()).to.be.null;\n    element.togglePlaceholder(false);\n  });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"togglePlaceholder should do hide all placeholders when found","suites":["CustomElement","ensureLoaded"],"updatePoint":{"line":1653,"column":66,"index":72155},"line":1653,"code":"  it('togglePlaceholder should do hide all placeholders when found', () => {\n    const placeholder1 = element.appendChild(createWithAttr('placeholder'));\n    const placeholder2 = element.appendChild(createWithAttr('placeholder'));\n    element.togglePlaceholder(false);\n    expect(placeholder1).to.have.class('amp-hidden');\n    expect(placeholder2).to.have.class('amp-hidden');\n    element.togglePlaceholder(true);\n    expect(placeholder1).to.have.class('amp-hidden');\n    expect(placeholder2).to.not.have.class('amp-hidden');\n  });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"toggleFallback should toggle unsupported class","suites":["CustomElement","ensureLoaded"],"updatePoint":{"line":1663,"column":52,"index":72673},"line":1663,"code":"  it('toggleFallback should toggle unsupported class', () => {\n    element.resource = {\n      getState: () => {\n        return ResourceState_Enum.LAYOUT_COMPLETE;\n      }\n    };\n    element.resources_ = {\n      getResourceForElement: element => {\n        return element.resource;\n      }\n    };\n    element.getAmpDoc = () => doc;\n    const owners = Services.ownersForDoc(doc);\n    owners.scheduleLayout = env.sandbox.mock();\n    const fallback = element.appendChild(createWithAttr('fallback'));\n    element.toggleFallback(true);\n    expect(element).to.have.class('amp-notsupported');\n    expect(owners.scheduleLayout).to.be.calledOnce;\n    expect(owners.scheduleLayout).to.have.been.calledWith(element, fallback);\n    element.toggleFallback(false);\n    expect(element).to.not.have.class('amp-notsupported');\n  });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"toggleFallback should toggle unsupported class on R1 elements","suites":["CustomElement","ensureLoaded"],"updatePoint":{"line":1685,"column":67,"index":73502},"line":1685,"code":"  it('toggleFallback should toggle unsupported class on R1 elements', () => {\n    element.resource = {\n      getState: () => {\n        return ResourceState_Enum.NOT_LAID_OUT;\n      }\n    };\n    element.resources_ = {\n      getResourceForElement: element => {\n        return element.resource;\n      }\n    };\n    element.R1 = () => {\n      return true;\n    };\n    element.getAmpDoc = () => doc;\n    const owners = Services.ownersForDoc(doc);\n    owners.scheduleLayout = env.sandbox.mock();\n    const fallback = element.appendChild(createWithAttr('fallback'));\n    element.toggleFallback(true);\n    expect(element).to.have.class('amp-notsupported');\n    expect(owners.scheduleLayout).to.be.calledOnce;\n    expect(owners.scheduleLayout).to.have.been.calledWith(element, fallback);\n    element.toggleFallback(false);\n    expect(element).to.not.have.class('amp-notsupported');\n  });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"toggleFallback should not display fallback before element layout","suites":["CustomElement","ensureLoaded"],"updatePoint":{"line":1710,"column":70,"index":74382},"line":1710,"code":"  it('toggleFallback should not display fallback before element layout', () => {\n    let resourceState = ResourceState_Enum.NOT_LAID_OUT;\n    element.resource = {\n      getState: () => {\n        return resourceState;\n      }\n    };\n    element.resources_ = {\n      getResourceForElement: element => {\n        return element.resource;\n      }\n    };\n    element.getAmpDoc = () => doc;\n    const owners = Services.ownersForDoc(doc);\n    owners.scheduleLayout = env.sandbox.mock();\n    element.appendChild(createWithAttr('fallback'));\n    element.toggleFallback(true);\n    expect(element).to.not.have.class('amp-notsupported');\n    resourceState = ResourceState_Enum.READY_FOR_LAYOUT;\n    element.toggleFallback(true);\n    expect(element).to.not.have.class('amp-notsupported');\n    resourceState = ResourceState_Enum.LAYOUT_COMPLETE;\n    element.toggleFallback(true);\n    expect(element).to.have.class('amp-notsupported');\n  });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"togglePlaceholder should NOT call in template","suites":["CustomElement","ensureLoaded"],"updatePoint":{"line":1735,"column":51,"index":75289},"line":1735,"code":"  it('togglePlaceholder should NOT call in template', () => {\n    element.isInTemplate_ = true;\n    allowConsoleError(() => {\n      expect(() => {\n        element.togglePlaceholder(false);\n      }).to.throw(/Must never be called in template/);\n    });\n  });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"should be enabled by default","suites":["Loading Indicator","toggleLoading"],"updatePoint":{"line":1805,"column":38,"index":77454},"line":1805,"code":"      it('should be enabled by default', () => {\n        element.toggleLoading(true);\n        expect(loadingIndicatorServiceStub.track).to.be.calledOnce.calledWith(element);\n      });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"should disable when explicitly disabled by the attribute","suites":["Loading Indicator","toggleLoading"],"updatePoint":{"line":1809,"column":66,"index":77666},"line":1809,"code":"      it('should disable when explicitly disabled by the attribute', () => {\n        element.setAttribute('noloading', '');\n        element.toggleLoading(true);\n        expect(loadingIndicatorServiceStub.track).to.not.be.called;\n      });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"should disable when element is not allowlisted","suites":["Loading Indicator","toggleLoading"],"updatePoint":{"line":1814,"column":56,"index":77895},"line":1814,"code":"      it('should disable when element is not allowlisted', () => {\n        delete LOADING_ELEMENTS_ENUM.AMP_TEST_LOADER;\n        element.toggleLoading(true);\n        expect(loadingIndicatorServiceStub.track).to.not.be.called;\n      });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"should disable when element has already been laid out","suites":["Loading Indicator","toggleLoading"],"updatePoint":{"line":1819,"column":63,"index":78138},"line":1819,"code":"      it('should disable when element has already been laid out', () => {\n        element.layoutCount_ = 1;\n        element.toggleLoading(true);\n        expect(loadingIndicatorServiceStub.track).to.not.be.called;\n      });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"should disable when element is a placeholder itself","suites":["Loading Indicator","toggleLoading"],"updatePoint":{"line":1824,"column":61,"index":78359},"line":1824,"code":"      it('should disable when element is a placeholder itself', () => {\n        element.setAttribute('placeholder', '');\n        element.toggleLoading(true);\n        expect(loadingIndicatorServiceStub.track).to.not.be.called;\n      });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"should disable when element is layout=nodisplay","suites":["Loading Indicator","toggleLoading"],"updatePoint":{"line":1829,"column":57,"index":78591},"line":1829,"code":"      it('should disable when element is layout=nodisplay', () => {\n        element.layout_ = Layout_Enum.NODISPLAY;\n        element.toggleLoading(true);\n        expect(loadingIndicatorServiceStub.track).to.not.be.called;\n      });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"should enable when element is layout=container","suites":["Loading Indicator","toggleLoading"],"updatePoint":{"line":1834,"column":56,"index":78822},"line":1834,"code":"      it('should enable when element is layout=container', () => {\n        element.layout_ = Layout_Enum.CONTAINER;\n        element.toggleLoading(true);\n        expect(loadingIndicatorServiceStub.track).to.be.calledOnce;\n      });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"should ignore loading-on if already rendered","suites":["Loading Indicator","toggleLoading"],"updatePoint":{"line":1839,"column":54,"index":79051},"line":1839,"code":"      it('should ignore loading-on if already rendered', () => {\n        clock.tick(1);\n        element.signals().signal(CommonSignals_Enum.RENDER_START);\n        element.toggleLoading(true);\n        expect(loadingIndicatorServiceStub.track).to.not.be.called;\n      });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"should ignore loading-on if already loaded","suites":["Loading Indicator","toggleLoading"],"updatePoint":{"line":1845,"column":52,"index":79319},"line":1845,"code":"      it('should ignore loading-on if already loaded', () => {\n        element.layoutCount_ = 1;\n        element.toggleLoading(true);\n        expect(loadingIndicatorServiceStub.track).to.not.be.called;\n      });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"should cancel loading on render-start","suites":["Loading Indicator","toggleLoading"],"updatePoint":{"line":1850,"column":47,"index":79526},"line":1850,"code":"      it('should cancel loading on render-start', () => {\n        clock.tick(1);\n        const stub = env.sandbox.stub(element, 'toggleLoading');\n        element.renderStarted();\n        expect(element.signals().get(CommonSignals_Enum.RENDER_START)).to.be.ok;\n        expect(stub).to.be.calledOnce.calledWith(false);\n      });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"should untrack when toggled off","suites":["Loading Indicator","toggleLoading"],"updatePoint":{"line":1857,"column":41,"index":79847},"line":1857,"code":"      it('should untrack when toggled off', () => {\n        element.toggleLoading(false);\n        expect(loadingIndicatorServiceStub.untrack).to.be.calledOnce.calledWith(element);\n      });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"should toggle loading off after layout complete","suites":["Loading Indicator","toggleLoading with layout"],"updatePoint":{"line":1867,"column":57,"index":80224},"line":1867,"code":"      it('should toggle loading off after layout complete', () => {\n        element.setAttribute('height', '10');\n        element.setAttribute('width', '10');\n        container.appendChild(element);\n        return element.buildingPromise_.then(() => {\n          toggle.resetHistory();\n          return element.layoutCallback();\n        }).then(() => {\n          expect(toggle).to.be.calledTwice;\n          expect(toggle.firstCall).calledWith(true);\n          expect(toggle.secondCall).calledWith(false);\n        });\n      });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"should toggle loading off after layout failed","suites":["Loading Indicator","toggleLoading with layout"],"updatePoint":{"line":1880,"column":55,"index":80748},"line":1880,"code":"      it('should toggle loading off after layout failed', () => {\n        env.sandbox.stub(TestElement.prototype, 'layoutCallback').returns(Promise.reject());\n        element.setAttribute('height', '10');\n        element.setAttribute('width', '10');\n        container.appendChild(element);\n        return element.buildingPromise_.then(() => {\n          toggle.resetHistory();\n          return element.layoutCallback();\n        }).then(() => {\n          throw new Error('Must have failed.');\n        }, () => {\n          expect(toggle).to.be.calledTwice;\n          expect(toggle.firstCall).calledWith(true);\n          expect(toggle.secondCall).calledWith(false);\n        });\n      });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"should disable toggle loading on after layout failed","suites":["Loading Indicator","toggleLoading with layout"],"updatePoint":{"line":1896,"column":62,"index":81439},"line":1896,"code":"      it('should disable toggle loading on after layout failed', () => {\n        env.sandbox.stub(TestElement.prototype, 'layoutCallback').returns(Promise.reject());\n        element.setAttribute('height', '10');\n        element.setAttribute('width', '10');\n        container.appendChild(element);\n        return element.buildingPromise_.then(() => {\n          expect(element.layoutCount_).to.equal(0);\n          expect(element.isLoadingEnabled_()).to.equal(true);\n          return element.layoutCallback();\n        }).then(() => {\n          throw new Error('Must have failed.');\n        }, () => {\n          expect(element.layoutCount_).to.equal(1);\n          expect(element.isLoadingEnabled_()).to.equal(false);\n        });\n      });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"should NOT be initialized by default","suites":["Loading Indicator","toggleLoading with layout"],"updatePoint":{"line":1958,"column":42,"index":83340},"line":1958,"code":"  it('should NOT be initialized by default', () => {\n    expect(element.overflowElement_).to.be.undefined;\n  });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"should be initialized to null when absent","suites":["Loading Indicator","toggleLoading with layout"],"updatePoint":{"line":1961,"column":47,"index":83458},"line":1961,"code":"  it('should be initialized to null when absent', () => {\n    element.removeChild(overflowElement);\n    expect(element.getOverflowElement()).to.be.null;\n    expect(element.overflowElement_).to.be.null;\n  });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"should be initialized correctly when present","suites":["Loading Indicator","toggleLoading with layout"],"updatePoint":{"line":1966,"column":50,"index":83669},"line":1966,"code":"  it('should be initialized correctly when present', () => {\n    expect(element.getOverflowElement()).to.exist;\n    expect(element.overflowElement_).to.equal(overflowElement);\n    expect(overflowElement).to.not.have.class('amp-visible');\n    expect(overflowElement.getAttribute('tabindex')).to.equal('0');\n    expect(overflowElement.getAttribute('role')).to.equal('button');\n  });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"should NOT override role and tabindex","suites":["Loading Indicator","toggleLoading with layout"],"updatePoint":{"line":1973,"column":43,"index":84043},"line":1973,"code":"  it('should NOT override role and tabindex', () => {\n    overflowElement.setAttribute('tabindex', '1');\n    overflowElement.setAttribute('role', 'list');\n    expect(element.getOverflowElement()).to.equal(overflowElement);\n    expect(overflowElement.getAttribute('tabindex')).to.equal('1');\n    expect(overflowElement.getAttribute('role')).to.equal('list');\n  });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"should noop when overflow is missing","suites":["Loading Indicator","toggleLoading with layout"],"updatePoint":{"line":1980,"column":42,"index":84406},"line":1980,"code":"  it('should noop when overflow is missing', () => {\n    element.removeChild(overflowElement);\n    expect(() => {\n      element.overflowCallback(true, 111);\n      element.overflowCallback(false, 111);\n    }).to.not.throw();\n  });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"should set overflow","suites":["Loading Indicator","toggleLoading with layout"],"updatePoint":{"line":1987,"column":25,"index":84619},"line":1987,"code":"  it('should set overflow', () => {\n    element.overflowCallback(true);\n    expect(element.overflowElement_).to.equal(overflowElement);\n    expect(overflowElement).to.have.class('amp-visible');\n    expect(overflowElement.onclick).to.exist;\n  });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"should unset overflow","suites":["Loading Indicator","toggleLoading with layout"],"updatePoint":{"line":1993,"column":27,"index":84867},"line":1993,"code":"  it('should unset overflow', () => {\n    element.getOverflowElement();\n    overflowElement.classList.toggle('amp-visible', true);\n    element.overflowCallback(false, 117, 113);\n    expect(element.overflowElement_).to.equal(overflowElement);\n    expect(overflowElement).to.not.have.class('amp-visible');\n    expect(overflowElement.onclick).to.not.exist;\n  });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"should force change size when clicked","suites":["Loading Indicator","toggleLoading with layout"],"updatePoint":{"line":2001,"column":43,"index":85243},"line":2001,"code":"  it('should force change size when clicked', () => {\n    element.overflowCallback(true, 117, 113);\n    expect(overflowElement).to.have.class('amp-visible');\n    mutatorMock.expects('forceChangeSize').withExactArgs(element, 117, 113).once();\n    expect(overflowElement.onclick).to.exist;\n    expect(overflowElement).to.have.class('amp-visible');\n    overflowElement.onclick();\n    expect(overflowElement.onclick).to.not.exist;\n    expect(overflowElement).to.not.have.class('amp-visible');\n  });","file":"unit/test-custom-element.js","skipped":false,"dir":"test"},{"name":"should mock fetches","suites":[],"updatePoint":{"line":5,"column":27,"index":178},"line":5,"code":"    it('should mock fetches', () => {\n      const mock = env.expectFetch('fake.com', {\n        payload: 'foo'\n      });\n      return env.win.fetch('fake.com').then(response => {\n        return response.json();\n      }).then(data => {\n        expect(data.payload).to.equal('foo');\n        expect(mock.called('fake.com')).to.be.true;\n      });\n    });","file":"unit/test-describes.js","skipped":false,"dir":"test"},{"name":"should provide the canonicalUrl","suites":[],"updatePoint":{"line":45,"column":37,"index":1651},"line":45,"code":"  it('should provide the canonicalUrl', () => {\n    return getWin({\n      'canonical': ['https://twitter.com/']\n    }).then(win => {\n      expect(Services.documentInfoForDoc(win.document).canonicalUrl).to.equal('https://twitter.com/');\n    });\n  });","file":"unit/test-document-info.js","skipped":false,"dir":"test"},{"name":"should provide the sourceUrl","suites":[],"updatePoint":{"line":52,"column":34,"index":1898},"line":52,"code":"  it('should provide the sourceUrl', () => {\n    const win = {\n      document: {\n        nodeType: /* DOCUMENT */9,\n        head: {\n          nodeType: /* ELEMENT */1,\n          querySelector() {\n            return null;\n          },\n          querySelectorAll() {\n            return [];\n          }\n        },\n        querySelector() {\n          return 'http://www.origin.com/foo/?f=0';\n        },\n        getRootNode() {\n          return win.document;\n        }\n      },\n      Math: {\n        random() {\n          return 0.123456789;\n        }\n      },\n      location: {\n        href: 'https://cdn.ampproject.org/v/www.origin.com/foo/?f=0'\n      },\n      performance: new FakePerformance(window)\n    };\n    win.document.defaultView = win;\n    installDocService(win, /* isSingleDoc */true);\n    installDocumentInfoServiceForDoc(win.document);\n    expect(Services.documentInfoForDoc(win.document).sourceUrl).to.equal('http://www.origin.com/foo/?f=0');\n  });","file":"unit/test-document-info.js","skipped":false,"dir":"test"},{"name":"should provide the updated sourceUrl","suites":[],"updatePoint":{"line":87,"column":42,"index":2864},"line":87,"code":"  it('should provide the updated sourceUrl', () => {\n    const win = {\n      document: {\n        nodeType: /* document */9,\n        head: {\n          nodeType: /* ELEMENT */1,\n          querySelector() {\n            return null;\n          },\n          querySelectorAll() {\n            return [];\n          }\n        },\n        querySelector() {\n          return 'http://www.origin.com/foo/?f=0';\n        },\n        getRootNode() {\n          return win.document;\n        }\n      },\n      Math: {\n        random() {\n          return 0.123456789;\n        }\n      },\n      location: {\n        href: 'https://cdn.ampproject.org/v/www.origin.com/foo/?f=0'\n      },\n      performance: new FakePerformance(window)\n    };\n    win.document.defaultView = win;\n    installDocService(win, /* isSingleDoc */true);\n    installDocumentInfoServiceForDoc(win.document);\n    expect(Services.documentInfoForDoc(win.document).sourceUrl).to.equal('http://www.origin.com/foo/?f=0');\n    win.location.href = 'https://cdn.ampproject.org/v/www.origin.com/foo/?f=1';\n    expect(Services.documentInfoForDoc(win.document).sourceUrl).to.equal('http://www.origin.com/foo/?f=1');\n  });","file":"unit/test-document-info.js","skipped":false,"dir":"test"},{"name":"should provide the pageViewId","suites":[],"updatePoint":{"line":124,"column":35,"index":4011},"line":124,"code":"  it('should provide the pageViewId', () => {\n    return getWin({\n      'canonical': ['https://twitter.com/']\n    }).then(win => {\n      expect(Services.documentInfoForDoc(win.document).pageViewId).to.equal('1234');\n      expect(Services.documentInfoForDoc(win.document).pageViewId).to.equal('1234');\n    });\n  });","file":"unit/test-document-info.js","skipped":false,"dir":"test"},{"name":"should provide the pageViewId64","suites":[],"updatePoint":{"line":132,"column":37,"index":4328},"line":132,"code":"  it('should provide the pageViewId64', () => {\n    return getWin({\n      'canonical': ['https://twitter.com/']\n    }).then(win => {\n      expect(Services.documentInfoForDoc(win.document).pageViewId64).to.equal('abcdef');\n      expect(Services.documentInfoForDoc(win.document).pageViewId64).to.equal('abcdef');\n    });\n  });","file":"unit/test-document-info.js","skipped":false,"dir":"test"},{"name":"should provide the relative canonicalUrl as absolute","suites":[],"updatePoint":{"line":140,"column":58,"index":4674},"line":140,"code":"  it('should provide the relative canonicalUrl as absolute', () => {\n    return getWin({\n      'canonical': ['./foo.html']\n    }).then(win => {\n      expect(Services.documentInfoForDoc(win.document).canonicalUrl).to.equal('http://localhost:' + location.port + '/foo.html');\n    });\n  });","file":"unit/test-document-info.js","skipped":false,"dir":"test"},{"name":"should provide the linkRels containing link tag rels","suites":[],"updatePoint":{"line":147,"column":58,"index":4962},"line":147,"code":"  it('should provide the linkRels containing link tag rels', () => {\n    return getWin({\n      'canonical': ['https://twitter.com/'],\n      'icon': ['https://foo.html/bar.gif']\n    }).then(win => {\n      expect(Services.documentInfoForDoc(win.document).linkRels['canonical']).to.equal('https://twitter.com/');\n      expect(Services.documentInfoForDoc(win.document).linkRels['icon']).to.equal('https://foo.html/bar.gif');\n    });\n  });","file":"unit/test-document-info.js","skipped":false,"dir":"test"},{"name":"should provide empty linkRels if there are no link tags","suites":[],"updatePoint":{"line":156,"column":61,"index":5400},"line":156,"code":"  it('should provide empty linkRels if there are no link tags', () => {\n    return getWin().then(win => {\n      expect(Services.documentInfoForDoc(win.document).linkRels).to.be.empty;\n    });\n  });","file":"unit/test-document-info.js","skipped":false,"dir":"test"},{"name":"should provide the linkRels containing link tag rels as absolute","suites":[],"updatePoint":{"line":161,"column":70,"index":5607},"line":161,"code":"  it('should provide the linkRels containing link tag rels as absolute', () => {\n    return getWin({\n      'canonical': ['./foo.html'],\n      'icon': ['./bar.gif']\n    }).then(win => {\n      expect(Services.documentInfoForDoc(win.document).linkRels['canonical']).to.equal('http://localhost:' + location.port + '/foo.html');\n      expect(Services.documentInfoForDoc(win.document).linkRels['icon']).to.equal('http://localhost:' + location.port + '/bar.gif');\n    });\n  });","file":"unit/test-document-info.js","skipped":false,"dir":"test"},{"name":"should provide the viewport","suites":[],"updatePoint":{"line":209,"column":33,"index":8321},"line":209,"code":"  it('should provide the viewport', () => {\n    return getWin({}, {\n      'viewport': ['width=device-width']\n    }).then(win => {\n      expect(Services.documentInfoForDoc(win.document).viewport).to.equal('width=device-width');\n    });\n  });","file":"unit/test-document-info.js","skipped":false,"dir":"test"},{"name":"should provide the replaceParams for an AMP landing page","suites":[],"updatePoint":{"line":216,"column":62,"index":8591},"line":216,"code":"  it('should provide the replaceParams for an AMP landing page', () => {\n    const base = 'https://cdn.ampproject.org/a/www.origin.com/foo/';\n    const win = {\n      document: {\n        nodeType: /* document */9,\n        head: {\n          nodeType: /* ELEMENT */1,\n          querySelector() {\n            return null;\n          },\n          querySelectorAll() {\n            return [];\n          }\n        },\n        querySelector() {\n          return 'http://www.origin.com/foo/?f=0';\n        },\n        getRootNode() {\n          return win.document;\n        }\n      },\n      Math: {\n        random() {\n          return 0.123456789;\n        }\n      },\n      location: {\n        href: base + '?f=0&amp_r=test%3Dhello%20world'\n      },\n      performance: new FakePerformance(window)\n    };\n    win.document.defaultView = win;\n    installDocService(win, /* isSingleDoc */true);\n    installDocumentInfoServiceForDoc(win.document);\n    expect(Services.documentInfoForDoc(win.document).replaceParams).to.deep.equal({\n      'test': 'hello world'\n    });\n  });","file":"unit/test-document-info.js","skipped":false,"dir":"test"},{"name":"should not have replaceParams for non-AMP landing page","suites":[],"updatePoint":{"line":254,"column":60,"index":9642},"line":254,"code":"  it('should not have replaceParams for non-AMP landing page', () => {\n    const base = 'https://cdn.ampproject.org/v/www.origin.com/foo/';\n    const win = {\n      document: {\n        nodeType: /* document */9,\n        head: {\n          nodeType: /* ELEMENT */1,\n          querySelector() {\n            return null;\n          },\n          querySelectorAll() {\n            return [];\n          }\n        },\n        querySelector() {\n          return 'http://www.origin.com/foo/?f=0';\n        },\n        getRootNode() {\n          return win.document;\n        }\n      },\n      Math: {\n        random() {\n          return 0.123456789;\n        }\n      },\n      location: {\n        href: base + '?f=0&amp_r=test%3Dhello%20world'\n      },\n      performance: new FakePerformance(window)\n    };\n    win.document.defaultView = win;\n    installDocService(win, /* isSingleDoc */true);\n    installDocumentInfoServiceForDoc(win.document);\n    expect(Services.documentInfoForDoc(win.document).replaceParams).to.be.null;\n  });","file":"unit/test-document-info.js","skipped":false,"dir":"test"},{"name":"should not provide the replaceParams if invalid","suites":[],"updatePoint":{"line":290,"column":53,"index":10646},"line":290,"code":"  it('should not provide the replaceParams if invalid', () => {\n    const base = 'https://cdn.ampproject.org/a/www.origin.com/foo/';\n    const win = {\n      document: {\n        nodeType: /* document */9,\n        head: {\n          nodeType: /* ELEMENT */1,\n          querySelector() {\n            return null;\n          },\n          querySelectorAll() {\n            return [];\n          }\n        },\n        querySelector() {\n          return 'http://www.origin.com/foo/?f=0';\n        },\n        getRootNode() {\n          return win.document;\n        }\n      },\n      Math: {\n        random() {\n          return 0.123456789;\n        }\n      },\n      location: {\n        href: base + '?f=0&amp_r=%3Dinvalid'\n      },\n      performance: new FakePerformance(window)\n    };\n    win.document.defaultView = win;\n    installDocService(win, /* isSingleDoc */true);\n    installDocumentInfoServiceForDoc(win.document);\n    expect(Services.documentInfoForDoc(win.document).replaceParams).to.deep.equal({});\n  });","file":"unit/test-document-info.js","skipped":false,"dir":"test"},{"name":"should not register submit listener if amp-form is not registered.","suites":["installGlobalSubmitListenerForDoc"],"updatePoint":{"line":18,"column":74,"index":701},"line":18,"code":"    it('should not register submit listener if amp-form is not registered.', () => {\n      env.sandbox.stub(ampdoc, 'declaresExtension').withArgs('amp-form').returns(false);\n      env.sandbox.spy(rootNode, 'addEventListener');\n      return installGlobalSubmitListenerForDoc(ampdoc).then(() => {\n        expect(rootNode.addEventListener).not.to.have.been.called;\n      });\n    });","file":"unit/test-document-submit.js","skipped":false,"dir":"test"},{"name":"should register submit listener if amp-form extension is registered.","suites":["installGlobalSubmitListenerForDoc"],"updatePoint":{"line":25,"column":76,"index":1083},"line":25,"code":"    it('should register submit listener if amp-form extension is registered.', () => {\n      env.sandbox.stub(ampdoc, 'declaresExtension').withArgs('amp-form').returns(true);\n      env.sandbox.spy(rootNode, 'addEventListener');\n      return installGlobalSubmitListenerForDoc(ampdoc).then(() => {\n        expect(rootNode.addEventListener).called;\n      });\n    });","file":"unit/test-document-submit.js","skipped":false,"dir":"test"},{"name":"should check target and action attributes","suites":["installGlobalSubmitListenerForDoc"],"updatePoint":{"line":58,"column":49,"index":2204},"line":58,"code":"    it('should check target and action attributes', () => {\n      tgt.removeAttribute('action');\n      allowConsoleError(() => {\n        expect(() => onDocumentFormSubmit_(evt)).to.throw(/form action-xhr or action attribute is required for method=GET/);\n      });\n      tgt.setAttribute('action', 'http://example.com');\n      tgt.__AMP_INIT_ACTION__ = undefined;\n      allowConsoleError(() => {\n        expect(() => onDocumentFormSubmit_(evt)).to.throw(/form action must start with \"https:/);\n      });\n      tgt.setAttribute('action', 'https://cdn.ampproject.org');\n      tgt.__AMP_INIT_ACTION__ = undefined;\n      allowConsoleError(() => {\n        expect(() => onDocumentFormSubmit_(evt)).to.throw(/form action should not be on AMP CDN/);\n      });\n      tgt.setAttribute('action', 'https://valid.example.com');\n      tgt.__AMP_INIT_ACTION__ = undefined;\n      tgt.removeAttribute('target');\n      expect(() => onDocumentFormSubmit_(evt)).to.not.throw();\n      tgt.setAttribute('action', 'https://valid.example.com');\n      tgt.__AMP_INIT_ACTION__ = undefined;\n      tgt.setAttribute('target', '_self');\n      allowConsoleError(() => {\n        expect(() => onDocumentFormSubmit_(evt)).to.throw(/form target=_self is invalid/);\n      });\n      tgt.setAttribute('action', 'https://valid.example.com');\n      tgt.__AMP_INIT_ACTION__ = undefined;\n      tgt.setAttribute('target', '_blank');\n      expect(() => onDocumentFormSubmit_(evt)).to.not.throw();\n    });","file":"unit/test-document-submit.js","skipped":false,"dir":"test"},{"name":"should assert none of the inputs named __amp_source_origin","suites":["installGlobalSubmitListenerForDoc"],"updatePoint":{"line":88,"column":66,"index":3681},"line":88,"code":"    it('should assert none of the inputs named __amp_source_origin', () => {\n      const illegalInput = document.createElement('input');\n      illegalInput.setAttribute('type', 'hidden');\n      illegalInput.setAttribute('name', '__amp_source_origin');\n      illegalInput.value = 'https://example.com';\n      tgt.appendChild(illegalInput);\n      allowConsoleError(() => {\n        expect(() => onDocumentFormSubmit_(evt)).to.throw(/Illegal input name, __amp_source_origin found/);\n      });\n    });","file":"unit/test-document-submit.js","skipped":false,"dir":"test"},{"name":"should assert __amp_source_origin is not set in action","suites":["installGlobalSubmitListenerForDoc"],"updatePoint":{"line":98,"column":62,"index":4174},"line":98,"code":"    it('should assert __amp_source_origin is not set in action', () => {\n      evt.target.setAttribute('action', 'https://example.com/?__amp_source_origin=12');\n      allowConsoleError(() => {\n        expect(() => onDocumentFormSubmit_(evt)).to.throw(/Source origin is not allowed in/);\n      });\n    });","file":"unit/test-document-submit.js","skipped":false,"dir":"test"},{"name":"should fail when POST and action-xhr is not set","suites":["installGlobalSubmitListenerForDoc"],"updatePoint":{"line":104,"column":55,"index":4472},"line":104,"code":"    it('should fail when POST and action-xhr is not set', () => {\n      evt.target.removeAttribute('action');\n      evt.target.setAttribute('method', 'post');\n      allowConsoleError(() => {\n        expect(() => onDocumentFormSubmit_(evt)).to.throw(/Only XHR based \\(via action-xhr attribute\\) submissions/);\n      });\n      expect(preventDefaultSpy).to.have.been.called;\n      const {\n        callCount\n      } = preventDefaultSpy;\n      evt.target.setAttribute('method', 'post');\n      evt.target.setAttribute('action-xhr', 'https://example.com');\n      expect(() => onDocumentFormSubmit_(evt)).to.not.throw();\n      expect(preventDefaultSpy.callCount).to.equal(callCount + 1);\n    });","file":"unit/test-document-submit.js","skipped":false,"dir":"test"},{"name":"should do nothing if already prevented","suites":["installGlobalSubmitListenerForDoc"],"updatePoint":{"line":119,"column":46,"index":5151},"line":119,"code":"    it('should do nothing if already prevented', () => {\n      evt.defaultPrevented = true;\n      onDocumentFormSubmit_(evt);\n      expect(preventDefaultSpy).to.have.not.been.called;\n      expect(tgt.checkValidity).to.have.not.been.called;\n    });","file":"unit/test-document-submit.js","skipped":false,"dir":"test"},{"name":"should default target to _top when missing","suites":["installGlobalSubmitListenerForDoc"],"updatePoint":{"line":125,"column":50,"index":5403},"line":125,"code":"    it('should default target to _top when missing', () => {\n      evt.target.removeAttribute('target');\n      onDocumentFormSubmit_(evt);\n      expect(evt.target.getAttribute('target')).to.equal('_top');\n    });","file":"unit/test-document-submit.js","skipped":false,"dir":"test"},{"name":"should throw if no target","suites":["installGlobalSubmitListenerForDoc"],"updatePoint":{"line":130,"column":33,"index":5599},"line":130,"code":"    it('should throw if no target', () => {\n      evt.target = null;\n      allowConsoleError(() => {\n        expect(() => onDocumentFormSubmit_(evt)).to.throw(/Element expected/);\n      });\n      expect(preventDefaultSpy).to.have.not.been.called;\n      expect(tgt.checkValidity).to.have.not.been.called;\n    });","file":"unit/test-document-submit.js","skipped":false,"dir":"test"},{"name":"should prevent submit","suites":["installGlobalSubmitListenerForDoc"],"updatePoint":{"line":138,"column":29,"index":5907},"line":138,"code":"    it('should prevent submit', () => {\n      tgt.checkValidity = env.sandbox.stub().returns(false);\n      onDocumentFormSubmit_(evt);\n      expect(preventDefaultSpy).to.be.calledOnce;\n      expect(tgt.checkValidity).to.be.calledOnce;\n      preventDefaultSpy.resetHistory();\n      tgt.checkValidity.reset();\n      tgt.checkValidity = env.sandbox.stub().returns(false);\n      onDocumentFormSubmit_(evt);\n      expect(preventDefaultSpy).to.be.calledOnce;\n      expect(tgt.checkValidity).to.be.calledOnce;\n    });","file":"unit/test-document-submit.js","skipped":false,"dir":"test"},{"name":"should not check validity if novalidate provided","suites":["installGlobalSubmitListenerForDoc"],"updatePoint":{"line":150,"column":56,"index":6445},"line":150,"code":"    it('should not check validity if novalidate provided', () => {\n      tgt.setAttribute('novalidate', '');\n      tgt.checkValidity = env.sandbox.stub().returns(false);\n      onDocumentFormSubmit_(evt);\n      expect(preventDefaultSpy).to.have.not.been.called;\n      expect(tgt.checkValidity).to.have.not.been.called;\n    });","file":"unit/test-document-submit.js","skipped":false,"dir":"test"},{"name":"should not prevent default","suites":["installGlobalSubmitListenerForDoc"],"updatePoint":{"line":157,"column":34,"index":6749},"line":157,"code":"    it('should not prevent default', () => {\n      tgt.checkValidity = env.sandbox.stub().returns(true);\n      onDocumentFormSubmit_(evt);\n      expect(preventDefaultSpy).to.have.not.been.called;\n      expect(tgt.checkValidity).to.be.calledOnce;\n    });","file":"unit/test-document-submit.js","skipped":false,"dir":"test"},{"name":"should delegate xhr submit through action service","suites":["installGlobalSubmitListenerForDoc"],"updatePoint":{"line":163,"column":57,"index":7026},"line":163,"code":"    it('should delegate xhr submit through action service', () => {\n      evt.target.setAttribute('action-xhr', 'https://example.com');\n      const actionService = Services.actionServiceForDoc(tgt);\n      env.sandbox.stub(actionService, 'execute');\n      onDocumentFormSubmit_(evt);\n      expect(actionService.execute).to.have.been.calledOnce;\n      expect(actionService.execute).to.have.been.calledWith(tgt, 'submit', null, tgt, tgt, evt);\n      expect(preventDefaultSpy).to.have.been.calledOnce;\n      expect(stopImmediatePropagationSpy).to.have.been.calledOnce;\n    });","file":"unit/test-document-submit.js","skipped":false,"dir":"test"},{"name":"should not delegate non-XHR submit through action service","suites":["installGlobalSubmitListenerForDoc"],"updatePoint":{"line":173,"column":65,"index":7607},"line":173,"code":"    it('should not delegate non-XHR submit through action service', () => {\n      const actionService = Services.actionServiceForDoc(tgt);\n      env.sandbox.stub(actionService, 'execute');\n      onDocumentFormSubmit_(evt);\n      expect(actionService.execute).to.have.not.been.called;\n    });","file":"unit/test-document-submit.js","skipped":false,"dir":"test"},{"name":"should wait for body","suites":[],"updatePoint":{"line":23,"column":26,"index":944},"line":23,"code":"  it('should wait for body', async () => {\n    const {\n      body\n    } = doc;\n    doc.documentElement.removeChild(body);\n    let resolvedService;\n    const p1 = getElementServiceIfAvailable(win, 'e1', 'element1', '0.1').then(service => {\n      resolvedService = service;\n      return service;\n    });\n    await Promise.resolve();\n    expect(resolvedService).to.be.undefined;\n\n    // Resolve body.\n    doc.documentElement.appendChild(body);\n    expect(doc.body).to.exist;\n    clock.tick(1000);\n    const service = await p1;\n    expect(resolvedService).to.be.null;\n    expect(service).to.be.null;\n  });","file":"unit/test-element-service.js","skipped":false,"dir":"test"},{"name":"should resolve with body when not available","suites":[],"updatePoint":{"line":44,"column":49,"index":1569},"line":44,"code":"  it('should resolve with body when not available', async () => {\n    const service = await getElementServiceIfAvailable(win, 'e1', 'element1', '0.1');\n    expect(service).to.be.null;\n  });","file":"unit/test-element-service.js","skipped":false,"dir":"test"},{"name":"should resolve when available","suites":[],"updatePoint":{"line":48,"column":35,"index":1745},"line":48,"code":"  it('should resolve when available', async () => {\n    const script = createElementWithAttributes(doc, 'script', {\n      'custom-element': 'element1'\n    });\n    env.sandbox.stub(script, 'src').value('https://cdn.ampproject.org/v0/element1-0.1.js');\n    doc.head.appendChild(script);\n    extensionsMock.expects('waitForExtension').withExactArgs('element1', '0.1').returns(Promise.resolve({})).once();\n    const promise = getElementServiceIfAvailable(win, 'e1', 'element1', '0.1');\n    registerServiceBuilder(win, 'e1', function () {\n      return {\n        str: 'fake1'\n      };\n    });\n    const service = await promise;\n    expect(service).to.deep.equal({\n      str: 'fake1'\n    });\n  });","file":"unit/test-element-service.js","skipped":false,"dir":"test"},{"name":"should not wait for the element-service","suites":[],"updatePoint":{"line":66,"column":45,"index":2446},"line":66,"code":"  it('should not wait for the element-service', async () => {\n    const script = createElementWithAttributes(doc, 'script', {\n      'custom-element': 'element1'\n    });\n    env.sandbox.stub(script, 'src').value('https://cdn.ampproject.org/v0/element1-0.1.js');\n    doc.head.appendChild(script);\n    extensionsMock.expects('waitForExtension').withExactArgs('element1', '0.1').returns(Promise.resolve({})).once();\n    const promise = getElementServiceIfAvailable(win, 'e1', 'element1', '0.1', true);\n    const service = await promise;\n    expect(service).to.deep.be.null;\n  });","file":"unit/test-element-service.js","skipped":false,"dir":"test"},{"name":"should be provided by element if available","suites":["getElementServiceIfAvailable()"],"updatePoint":{"line":95,"column":50,"index":3434},"line":95,"code":"    it('should be provided by element if available', async () => {\n      const script = createElementWithAttributes(doc, 'script', {\n        'custom-element': 'element1'\n      });\n      env.sandbox.stub(script, 'src').value('https://cdn.ampproject.org/v0/element1-0.1.js');\n      doc.head.appendChild(script);\n      extensionsMock.expects('waitForExtension').withExactArgs('element1', '0.1').returns(Promise.resolve({})).once();\n      const p1 = getElementServiceIfAvailable(env.win, 'e1', 'element1', '0.1');\n      const p2 = getElementServiceIfAvailable(env.win, 'e2', 'not-available', '0.1');\n      registerServiceBuilder(env.win, 'e1', function () {\n        return {\n          str: 'from e1'\n        };\n      });\n      const s1 = await p1;\n      expect(s1).to.deep.equal({\n        str: 'from e1'\n      });\n      const s2 = await p2;\n      expect(s2).to.be.null;\n    });","file":"unit/test-element-service.js","skipped":false,"dir":"test"},{"name":"should be provided by element","suites":["getElementServiceForDoc()"],"updatePoint":{"line":118,"column":37,"index":4349},"line":118,"code":"    it('should be provided by element', async () => {\n      // Make sure that `whenExtensionsKnown` is observerd.\n      ampdoc.signals().reset('-ampdoc-ext-known');\n      extensionsMock.expects('waitForExtension').withExactArgs('element1', '0.2').returns(Promise.resolve({})).twice();\n      const p1 = getElementServiceForDoc(ampdoc, 'e1', 'element1');\n      const p2 = getElementServiceForDoc(ampdoc, 'e1', 'element1');\n      ampdoc.declareExtension('element1', '0.2');\n      ampdoc.setExtensionsKnown();\n      registerServiceBuilder(env.win, 'e1', function () {\n        return {\n          str: 'from e1'\n        };\n      });\n      const s1 = await p1;\n      expect(s1).to.deep.equal({\n        str: 'from e1'\n      });\n      const s2 = await p2;\n      expect(s2).to.equal(s1);\n    });","file":"unit/test-element-service.js","skipped":false,"dir":"test"},{"name":"should fail if element is not in page.","suites":["getElementServiceForDoc()"],"updatePoint":{"line":138,"column":46,"index":5144},"line":138,"code":"    it('should fail if element is not in page.', () => {\n      expectAsyncConsoleError(/e1 was requested to be provided through element-bar/);\n      return getElementServiceForDoc(ampdoc, 'e1', 'element-bar').then(() => {\n        return 'SUCCESS';\n      }, error => {\n        return 'ERROR ' + error;\n      }).then(result => {\n        expect(result).to.match(/Service e1 was requested to be provided through element-bar/);\n      });\n    });","file":"unit/test-element-service.js","skipped":false,"dir":"test"},{"name":"should be provided by element if available","suites":["getElementServiceIfAvailableForDoc()"],"updatePoint":{"line":150,"column":50,"index":5654},"line":150,"code":"    it('should be provided by element if available', async () => {\n      // Make sure that `whenExtensionsKnown` is observerd.\n      ampdoc.signals().reset('-ampdoc-ext-known');\n      extensionsMock.expects('waitForExtension').withExactArgs('element1', '0.2').returns(Promise.resolve({})).once();\n      const p1 = getElementServiceIfAvailableForDoc(ampdoc, 'e1', 'element1');\n      const p2 = getElementServiceIfAvailableForDoc(ampdoc, 'e2', 'not-available');\n      ampdoc.declareExtension('element1', '0.2');\n      ampdoc.setExtensionsKnown();\n      registerServiceBuilder(env.win, 'e1', function () {\n        return {\n          str: 'from e1'\n        };\n      });\n      const s1 = await p1;\n      expect(s1).to.deep.equal({\n        str: 'from e1'\n      });\n      const s2 = await p2;\n      expect(s2).to.be.null;\n    });","file":"unit/test-element-service.js","skipped":false,"dir":"test"},{"name":"resolve w/ body when not available","suites":["getElementServiceIfAvailableForDoc()"],"updatePoint":{"line":170,"column":42,"index":6469},"line":170,"code":"    it('resolve w/ body when not available', async () => {\n      const service = await getElementServiceIfAvailableForDoc(ampdoc, 'e1', 'element1');\n      expect(service).to.be.null;\n    });","file":"unit/test-element-service.js","skipped":false,"dir":"test"},{"name":"should resolve with body when available","suites":["getElementServiceIfAvailableForDoc()"],"updatePoint":{"line":174,"column":47,"index":6665},"line":174,"code":"    it('should resolve with body when available', async () => {\n      // Make sure that `whenExtensionsKnown` is observerd.\n      ampdoc.signals().reset('-ampdoc-ext-known');\n      extensionsMock.expects('waitForExtension').withExactArgs('element1', '0.2').returns(Promise.resolve({})).once();\n      const p1 = getElementServiceIfAvailableForDoc(ampdoc, 'e1', 'element1');\n      ampdoc.declareExtension('element1', '0.2');\n      ampdoc.setExtensionsKnown();\n      registerServiceBuilder(env.win, 'e1', function () {\n        return {\n          str: 'fake1'\n        };\n      });\n      const service = await p1;\n      expect(service).to.deep.equal({\n        str: 'fake1'\n      });\n    });","file":"unit/test-element-service.js","skipped":false,"dir":"test"},{"name":"should return existing service","suites":["getElementServiceIfAvailableForDoc()"],"updatePoint":{"line":230,"column":36,"index":8365},"line":230,"code":"  it('should return existing service', () => {\n    installServiceInEmbedDoc(embedAmpDoc, 'foo', service);\n    return getElementServiceIfAvailableForDocInEmbedScope(nodeInEmbedWin, 'foo', 'amp-foo').then(returned => {\n      expect(returned).to.equal(service);\n    });\n  });","file":"unit/test-element-service.js","skipped":false,"dir":"test"},{"name":"should return service for scheduled element","suites":["getElementServiceIfAvailableForDoc()"],"updatePoint":{"line":236,"column":49,"index":8651},"line":236,"code":"  it('should return service for scheduled element', async () => {\n    // Make sure that `whenExtensionsKnown` is observerd.\n    embedAmpDoc.signals().reset('-ampdoc-ext-known');\n    extensionsMock.expects('waitForExtension').withExactArgs('amp-foo', '0.2').returns(Promise.resolve({})).once();\n    const promise = getElementServiceIfAvailableForDocInEmbedScope(nodeInEmbedWin, 'foo', 'amp-foo');\n    embedAmpDoc.declareExtension('amp-foo', '0.2');\n    embedAmpDoc.setExtensionsKnown();\n    installServiceInEmbedDoc(embedAmpDoc, 'foo', service);\n    const returned = await promise;\n    expect(returned).to.equal(service);\n  });","file":"unit/test-element-service.js","skipped":false,"dir":"test"},{"name":"should return ampdoc-scope service if node in top window","suites":["getElementServiceIfAvailableForDoc()"],"updatePoint":{"line":247,"column":62,"index":9291},"line":247,"code":"  it('should return ampdoc-scope service if node in top window', async () => {\n    registerServiceBuilderForDoc(nodeInTopWin, 'foo', function () {\n      return service;\n    }, /* opt_instantiate */true);\n    const returned = await getElementServiceIfAvailableForDocInEmbedScope(nodeInTopWin, 'foo', 'amp-foo');\n    expect(returned).to.equal(service);\n  });","file":"unit/test-element-service.js","skipped":false,"dir":"test"},{"name":"should NOT return ampdoc-scope service if node in embed window","suites":["getElementServiceIfAvailableForDoc()"],"updatePoint":{"line":254,"column":68,"index":9654},"line":254,"code":"  it('should NOT return ampdoc-scope service if node in embed window', async () => {\n    registerServiceBuilderForDoc(nodeInTopWin, 'foo', function () {\n      return service;\n    }, /* opt_instantiate */true);\n    embedAmpDoc.setExtensionsKnown();\n    const returned = await getElementServiceIfAvailableForDocInEmbedScope(nodeInEmbedWin, 'foo', 'amp-foo');\n    expect(returned).to.be.null;\n  });","file":"unit/test-element-service.js","skipped":false,"dir":"test"},{"name":"should install window.onerror handler","suites":[],"updatePoint":{"line":23,"column":43,"index":1081},"line":23,"code":"  it('should install window.onerror handler', () => {\n    expect(win.onerror).to.not.be.null;\n  });","file":"unit/test-error-reporting.js","skipped":false,"dir":"test"},{"name":"should install unhandledrejection handler","suites":[],"updatePoint":{"line":26,"column":47,"index":1185},"line":26,"code":"  it('should install unhandledrejection handler', () => {\n    expect(win.eventListeners.count('unhandledrejection')).to.equal(1);\n  });","file":"unit/test-error-reporting.js","skipped":false,"dir":"test"},{"name":"should report the normal promise rejection","suites":[],"updatePoint":{"line":29,"column":48,"index":1322},"line":29,"code":"  it('should report the normal promise rejection', () => {\n    expectAsyncConsoleError(/error reason/);\n    win.eventListeners.fire(rejectedPromiseEvent);\n    expect(rejectedPromiseError.reported).to.be.true;\n    expect(rejectedPromiseEventCancelledSpy).to.not.be.called;\n  });","file":"unit/test-error-reporting.js","skipped":false,"dir":"test"},{"name":"should allow null errors","suites":[],"updatePoint":{"line":35,"column":30,"index":1582},"line":35,"code":"  it('should allow null errors', () => {\n    expectAsyncConsoleError(/rejected promise/);\n    rejectedPromiseEvent.reason = null;\n    win.eventListeners.fire(rejectedPromiseEvent);\n    expect(rejectedPromiseEventCancelledSpy).to.not.be.called;\n  });","file":"unit/test-error-reporting.js","skipped":false,"dir":"test"},{"name":"should allow string errors","suites":[],"updatePoint":{"line":41,"column":32,"index":1834},"line":41,"code":"  it('should allow string errors', () => {\n    expectAsyncConsoleError(/string error/);\n    rejectedPromiseEvent.reason = 'string error';\n    win.eventListeners.fire(rejectedPromiseEvent);\n    expect(rejectedPromiseEventCancelledSpy).to.not.be.called;\n  });","file":"unit/test-error-reporting.js","skipped":false,"dir":"test"},{"name":"should ignore cancellation","suites":[],"updatePoint":{"line":47,"column":32,"index":2092},"line":47,"code":"  it('should ignore cancellation', () => {\n    rejectedPromiseEvent.reason = rejectedPromiseError = cancellation();\n    win.eventListeners.fire(rejectedPromiseEvent);\n    expect(rejectedPromiseError.reported).to.be.not.be.ok;\n    expect(rejectedPromiseEventCancelledSpy).to.be.calledOnce;\n  });","file":"unit/test-error-reporting.js","skipped":false,"dir":"test"},{"name":"should ignore blockByConsent","suites":[],"updatePoint":{"line":53,"column":34,"index":2389},"line":53,"code":"  it('should ignore blockByConsent', () => {\n    rejectedPromiseEvent.reason = rejectedPromiseError = blockedByConsentError();\n    win.eventListeners.fire(rejectedPromiseEvent);\n    expect(rejectedPromiseError.reported).to.be.not.be.ok;\n    expect(rejectedPromiseEventCancelledSpy).to.be.calledOnce;\n  });","file":"unit/test-error-reporting.js","skipped":false,"dir":"test"},{"name":"should report to server if AMP doc is not single","suites":[],"updatePoint":{"line":88,"column":54,"index":3769},"line":88,"code":"  it('should report to server if AMP doc is not single', () => {\n    ampdocServiceForStub.returns({\n      isSingleDoc: () => false\n    });\n    return reportErrorToServerOrViewer(win, data).then(() => {\n      expect(createXhr).to.be.calledOnce;\n      expect(sendMessageStub).to.not.have.been.called;\n    });\n  });","file":"unit/test-error-reporting.js","skipped":false,"dir":"test"},{"name":"should report to server if AMP doc is not opted in","suites":[],"updatePoint":{"line":97,"column":56,"index":4084},"line":97,"code":"  it('should report to server if AMP doc is not opted in', () => {\n    const nonOptedInDoc = window.document.implementation.createHTMLDocument('');\n    const ampdoc = {\n      getRootNode: () => nonOptedInDoc\n    };\n    ampdocServiceForStub.returns({\n      isSingleDoc: () => true,\n      getAmpDoc: () => ampdoc,\n      getSingleDoc: () => ampdoc\n    });\n    return reportErrorToServerOrViewer(win, data).then(() => {\n      expect(createXhr).to.be.calledOnce;\n      expect(sendMessageStub).to.not.have.been.called;\n    });\n  });","file":"unit/test-error-reporting.js","skipped":false,"dir":"test"},{"name":"should report to server if viewer is not capable","suites":[],"updatePoint":{"line":112,"column":54,"index":4609},"line":112,"code":"  it('should report to server if viewer is not capable', () => {\n    env.sandbox.stub(viewer, 'hasCapability').withArgs('errorReporting').returns(false);\n    return reportErrorToServerOrViewer(win, data).then(() => {\n      expect(createXhr).to.be.calledOnce;\n      expect(sendMessageStub).to.not.have.been.called;\n    });\n  });","file":"unit/test-error-reporting.js","skipped":false,"dir":"test"},{"name":"should report to server if viewer is not trusted","suites":[],"updatePoint":{"line":119,"column":54,"index":4937},"line":119,"code":"  it('should report to server if viewer is not trusted', () => {\n    env.sandbox.stub(viewer, 'isTrustedViewer').returns(Promise.resolve(false));\n    return reportErrorToServerOrViewer(win, data).then(() => {\n      expect(createXhr).to.be.calledOnce;\n      expect(sendMessageStub).to.not.have.been.called;\n    });\n  });","file":"unit/test-error-reporting.js","skipped":false,"dir":"test"},{"name":"reportError with error object","suites":[],"updatePoint":{"line":153,"column":35,"index":6265},"line":153,"code":"  it('reportError with error object', function SHOULD_BE_IN_STACK() {\n    const e = new Error('XYZ');\n    if (!e.stack || e.stack.indexOf('SHOULD_BE_IN_STACK') == -1) {\n      e.stack = 'SHOULD_BE_IN_STACK';\n    }\n    const data = getErrorReportData(undefined, undefined, undefined, undefined, e, true);\n    expect(data.m).to.equal('XYZ');\n    expect(data.el).to.equal('u');\n    expect(data.a).to.equal('0');\n    expect(data.s).to.contain('SHOULD_BE_IN_STACK');\n    expect(data['3p']).to.equal(undefined);\n    expect(e.message).to.contain('_reported_');\n    if (location.ancestorOrigins) {\n      expect(data.or).to.contain('http://localhost');\n    }\n    expect(data.vs).to.be.undefined;\n    expect(data.ae).to.equal('');\n    expect(data.r).to.contain('http://localhost');\n    expect(data.noAmp).to.equal('1');\n    expect(data.args).to.be.undefined;\n  });","file":"unit/test-error-reporting.js","skipped":false,"dir":"test"},{"name":"reportError with error and ignore stack","suites":[],"updatePoint":{"line":174,"column":45,"index":7129},"line":174,"code":"  it('reportError with error and ignore stack', () => {\n    const e = new Error('XYZ');\n    e.ignoreStack = true;\n    const data = getErrorReportData(undefined, undefined, undefined, undefined, e, true);\n    expect(data.m).to.equal('XYZ');\n    expect(data.el).to.equal('u');\n    expect(data.a).to.equal('0');\n    expect(data['3p']).to.equal(undefined);\n    expect(e.message).to.contain('_reported_');\n  });","file":"unit/test-error-reporting.js","skipped":false,"dir":"test"},{"name":"reportError with error object w/args","suites":[],"updatePoint":{"line":184,"column":42,"index":7533},"line":184,"code":"  it('reportError with error object w/args', () => {\n    const e = new Error('XYZ');\n    e.args = {\n      x: 1\n    };\n    const data = getErrorReportData(undefined, undefined, undefined, undefined, e, true);\n    expect(data.args).to.equal(JSON.stringify({\n      x: 1\n    }));\n  });","file":"unit/test-error-reporting.js","skipped":false,"dir":"test"},{"name":"reportError with a string instead of error","suites":[],"updatePoint":{"line":194,"column":48,"index":7821},"line":194,"code":"  it('reportError with a string instead of error', () => {\n    const data = getErrorReportData(undefined, undefined, undefined, undefined, 'string error', true);\n    expect(data.m).to.equal('string error');\n  });","file":"unit/test-error-reporting.js","skipped":false,"dir":"test"},{"name":"reportError with no error","suites":[],"updatePoint":{"line":198,"column":31,"index":8017},"line":198,"code":"  it('reportError with no error', () => {\n    const data = getErrorReportData(undefined, undefined, undefined, undefined, undefined, true);\n    expect(data.m).to.equal('Unknown error');\n  });","file":"unit/test-error-reporting.js","skipped":false,"dir":"test"},{"name":"reportError with associatedElement","suites":[],"updatePoint":{"line":202,"column":40,"index":8218},"line":202,"code":"  it('reportError with associatedElement', () => {\n    const e = new Error('XYZ');\n    const el = document.createElement('foo-bar');\n    e.associatedElement = el;\n    const data = getErrorReportData(undefined, undefined, undefined, undefined, e, false);\n    expect(data.m).to.equal('XYZ');\n    expect(data.el).to.equal('FOO-BAR');\n    expect(data.a).to.equal('0');\n    expect(data.v).to.equal(getRtvVersionForTesting(window));\n    expect(data.noAmp).to.equal('0');\n  });","file":"unit/test-error-reporting.js","skipped":false,"dir":"test"},{"name":"reportError mark asserts","suites":[],"updatePoint":{"line":213,"column":30,"index":8679},"line":213,"code":"  it('reportError mark asserts', () => {\n    let e = '';\n    allowConsoleError(() => {\n      try {\n        userAssert(false, 'XYZ');\n      } catch (error) {\n        e = error;\n      }\n    });\n    const data = getErrorReportData(undefined, undefined, undefined, undefined, e);\n    expect(data.m).to.equal('XYZ');\n    expect(data.a).to.equal('1');\n    expect(data.v).to.equal(getRtvVersionForTesting(window));\n  });","file":"unit/test-error-reporting.js","skipped":false,"dir":"test"},{"name":"reportError mark asserts without error object","suites":[],"updatePoint":{"line":227,"column":51,"index":9114},"line":227,"code":"  it('reportError mark asserts without error object', () => {\n    let e = '';\n    allowConsoleError(() => {\n      try {\n        userAssert(false, 'XYZ');\n      } catch (error) {\n        e = error;\n      }\n    });\n    const data = getErrorReportData(e.message, undefined, undefined, undefined);\n    expect(data.m).to.equal('XYZ');\n    expect(data.a).to.equal('1');\n    expect(data.v).to.equal(getRtvVersionForTesting(window));\n  });","file":"unit/test-error-reporting.js","skipped":false,"dir":"test"},{"name":"reportError marks 3p","suites":[],"updatePoint":{"line":241,"column":26,"index":9521},"line":241,"code":"  it('reportError marks 3p', () => {\n    window.context = {\n      location: {}\n    };\n    const e = new Error('XYZ');\n    const data = getErrorReportData(undefined, undefined, undefined, undefined, e);\n    expect(data.m).to.equal('XYZ');\n    expect(data['3p']).to.equal('1');\n  });","file":"unit/test-error-reporting.js","skipped":false,"dir":"test"},{"name":"reportError marks canary and viewerState","suites":[],"updatePoint":{"line":250,"column":46,"index":9823},"line":250,"code":"  it('reportError marks canary and viewerState', () => {\n    window.viewerState = 'some-state';\n    window.AMP_CONFIG = {\n      canary: true\n    };\n    const e = new Error('XYZ');\n    const data = getErrorReportData(undefined, undefined, undefined, undefined, e);\n    expect(data.m).to.equal('XYZ');\n    expect(data['ca']).to.equal('1');\n    expect(data['vs']).to.equal('some-state');\n  });","file":"unit/test-error-reporting.js","skipped":false,"dir":"test"},{"name":"reportError marks binary type","suites":[],"updatePoint":{"line":261,"column":35,"index":10203},"line":261,"code":"  it('reportError marks binary type', () => {\n    window.AMP_CONFIG = {\n      type: 'experimental'\n    };\n    const e = new Error('XYZ');\n    const data = getErrorReportData(undefined, undefined, undefined, undefined, e);\n    expect(data.m).to.equal('XYZ');\n    expect(data['bt']).to.equal('experimental');\n    window.AMP_CONFIG = {\n      type: 'control'\n    };\n    const e1 = new Error('XYZ');\n    const data1 = getErrorReportData(undefined, undefined, undefined, undefined, e1);\n    expect(data1.m).to.equal('XYZ');\n    expect(data1['bt']).to.equal('control');\n    window.AMP_CONFIG = {};\n    const e2 = new Error('ABC');\n    const data2 = getErrorReportData(undefined, undefined, undefined, undefined, e2);\n    expect(data2.m).to.equal('ABC');\n    expect(data2['bt']).to.equal('unknown');\n  });","file":"unit/test-error-reporting.js","skipped":false,"dir":"test"},{"name":"reportError without error object","suites":[],"updatePoint":{"line":282,"column":38,"index":11004},"line":282,"code":"  it('reportError without error object', () => {\n    const data = getErrorReportData('foo bar', 'foo.js', '11', '22', undefined);\n    expect(data.m).to.equal('foo bar');\n    expect(data.f).to.equal('foo.js');\n    expect(data.l).to.equal('11');\n    expect(data.c).to.equal('22');\n  });","file":"unit/test-error-reporting.js","skipped":false,"dir":"test"},{"name":"should accumulate errors","suites":[],"updatePoint":{"line":289,"column":30,"index":11281},"line":289,"code":"  it('should accumulate errors', () => {\n    getErrorReportData(undefined, undefined, undefined, undefined, new Error('1'), true);\n    getErrorReportData(undefined, undefined, undefined, undefined, new Error('2'), true);\n    const data = getErrorReportData(undefined, undefined, undefined, undefined, new Error('3'), true);\n    expect(data.m).to.equal('3');\n    expect(data.ae).to.equal('1,2');\n  });","file":"unit/test-error-reporting.js","skipped":false,"dir":"test"},{"name":"should not double report","suites":[],"updatePoint":{"line":296,"column":30,"index":11682},"line":296,"code":"  it('should not double report', () => {\n    const e = new Error('something _reported_');\n    const data = getErrorReportData(undefined, undefined, undefined, undefined, e);\n    expect(data).to.be.undefined;\n  });","file":"unit/test-error-reporting.js","skipped":false,"dir":"test"},{"name":"should construct cancellation","suites":[],"updatePoint":{"line":301,"column":35,"index":11901},"line":301,"code":"  it('should construct cancellation', () => {\n    const e = cancellation();\n    expect(isCancellation(e)).to.be.true;\n    expect(isCancellation(e.message)).to.be.true;\n\n    // Suffix is tollerated.\n    e.message += '___';\n    expect(isCancellation(e)).to.be.true;\n    expect(isCancellation(e.message)).to.be.true;\n\n    // Prefix is not tollerated.\n    e.message = '___' + e.message;\n    expect(isCancellation(e)).to.be.false;\n    expect(isCancellation(e.message)).to.be.false;\n    expect(isCancellation('')).to.be.false;\n    expect(isCancellation(null)).to.be.false;\n    expect(isCancellation(1)).to.be.false;\n    expect(isCancellation({})).to.be.false;\n  });","file":"unit/test-error-reporting.js","skipped":false,"dir":"test"},{"name":"reportError with error object","suites":[],"updatePoint":{"line":320,"column":35,"index":12561},"line":320,"code":"  it('reportError with error object', () => {\n    const e = cancellation();\n    const data = getErrorReportData(undefined, undefined, undefined, undefined, e);\n    expect(data).to.be.undefined;\n  });","file":"unit/test-error-reporting.js","skipped":false,"dir":"test"},{"name":"should throttle user errors","suites":[],"updatePoint":{"line":325,"column":33,"index":12759},"line":325,"code":"  it('should throttle user errors', () => {\n    nextRandomNumber = 0.2;\n    let e = '';\n    allowConsoleError(() => {\n      try {\n        userAssert(false, 'XYZ');\n      } catch (error) {\n        e = error;\n      }\n    });\n    const data = getErrorReportData(undefined, undefined, undefined, undefined, e);\n    expect(data).to.be.undefined;\n  });","file":"unit/test-error-reporting.js","skipped":false,"dir":"test"},{"name":"should not report load errors","suites":[],"updatePoint":{"line":338,"column":35,"index":13108},"line":338,"code":"  it('should not report load errors', () => {\n    nextRandomNumber = 1e-3 + 1e-4;\n    const e = new Error('Failed to load:');\n    const data = getErrorReportData(undefined, undefined, undefined, undefined, e);\n    expect(data).to.be.undefined;\n  });","file":"unit/test-error-reporting.js","skipped":false,"dir":"test"},{"name":"should report throttled load errors at threshold","suites":[],"updatePoint":{"line":344,"column":54,"index":13377},"line":344,"code":"  it('should report throttled load errors at threshold', () => {\n    nextRandomNumber = 1e-3;\n    const e = new Error('Failed to load:');\n    const data = getErrorReportData(undefined, undefined, undefined, undefined, e);\n    expect(data).to.be.ok;\n    expect(data.ex).to.equal('1');\n  });","file":"unit/test-error-reporting.js","skipped":false,"dir":"test"},{"name":"should not report Script errors","suites":[],"updatePoint":{"line":351,"column":37,"index":13650},"line":351,"code":"  it('should not report Script errors', () => {\n    nextRandomNumber = 1e-3 + 1e-4;\n    const e = new Error('Script error.');\n    const data = getErrorReportData(undefined, undefined, undefined, undefined, e);\n    expect(data).to.be.undefined;\n  });","file":"unit/test-error-reporting.js","skipped":false,"dir":"test"},{"name":"should report throttled Script errors at threshold","suites":[],"updatePoint":{"line":357,"column":56,"index":13919},"line":357,"code":"  it('should report throttled Script errors at threshold', () => {\n    nextRandomNumber = 1e-3;\n    const e = new Error('Script error.');\n    const data = getErrorReportData(undefined, undefined, undefined, undefined, e);\n    expect(data).to.be.ok;\n    expect(data.ex).to.contain('1');\n  });","file":"unit/test-error-reporting.js","skipped":false,"dir":"test"},{"name":"should report throttled load errors under threshold","suites":[],"updatePoint":{"line":364,"column":57,"index":14212},"line":364,"code":"  it('should report throttled load errors under threshold', () => {\n    nextRandomNumber = 1e-3 - 1e-4;\n    const e = new Error('Failed to load:');\n    const data = getErrorReportData(undefined, undefined, undefined, undefined, e);\n    expect(data).to.be.ok;\n    expect(data.ex).to.contain('1');\n  });","file":"unit/test-error-reporting.js","skipped":false,"dir":"test"},{"name":"should omit the error stack for user errors","suites":[],"updatePoint":{"line":371,"column":49,"index":14506},"line":371,"code":"  it('should omit the error stack for user errors', () => {\n    const e = user().createError('123');\n    const data = getErrorReportData(undefined, undefined, undefined, undefined, e, true);\n    expect(data.s).to.be.undefined;\n  });","file":"unit/test-error-reporting.js","skipped":false,"dir":"test"},{"name":"should report experiments","suites":[],"line":378,"code":"  it.skip('should report experiments', () => {","file":"unit/test-error-reporting.js","skipped":true,"dir":"test"},{"name":"should let AMP's JS pass","suites":[],"updatePoint":{"line":407,"column":32,"index":15749},"line":407,"code":"    it(\"should let AMP's JS pass\", () => {\n      expect(detectNonAmpJs(win)).to.be.false;\n    });","file":"unit/test-error-reporting.js","skipped":false,"dir":"test"},{"name":"should be case insensitive","suites":[],"updatePoint":{"line":410,"column":34,"index":15849},"line":410,"code":"    it('should be case insensitive', () => {\n      scripts[0].src = 'https://CDN.ampproject.ORG/v0.js';\n      expect(detectNonAmpJs(win)).to.be.false;\n    });","file":"unit/test-error-reporting.js","skipped":false,"dir":"test"},{"name":"should detect other JS","suites":[],"updatePoint":{"line":414,"column":30,"index":16004},"line":414,"code":"    it('should detect other JS', () => {\n      scripts[0].src = './foo.js';\n      expect(detectNonAmpJs(win)).to.be.true;\n    });","file":"unit/test-error-reporting.js","skipped":false,"dir":"test"},{"name":"should detect other JS (2)","suites":[],"updatePoint":{"line":418,"column":34,"index":16138},"line":418,"code":"    it('should detect other JS (2)', () => {\n      scripts[0].src = 'http://jquery.com/foo.js';\n      expect(detectNonAmpJs(win)).to.be.true;\n    });","file":"unit/test-error-reporting.js","skipped":false,"dir":"test"},{"name":"should gracefully handle no JS","suites":[],"updatePoint":{"line":422,"column":38,"index":16292},"line":422,"code":"    it('should gracefully handle no JS', () => {\n      scripts = [];\n      expect(detectNonAmpJs(win)).to.be.false;\n    });","file":"unit/test-error-reporting.js","skipped":false,"dir":"test"},{"name":"should detect non-AMP JS in karma","suites":[],"updatePoint":{"line":426,"column":41,"index":16419},"line":426,"code":"    it('should detect non-AMP JS in karma', () => {\n      scripts = [];\n      expect(detectNonAmpJs(window)).to.be.true;\n    });","file":"unit/test-error-reporting.js","skipped":false,"dir":"test"},{"name":"should accept Error type","suites":[],"updatePoint":{"line":437,"column":30,"index":16676},"line":437,"code":"  it('should accept Error type', () => {\n    const error = new Error('error');\n    let result;\n    allowConsoleError(() => {\n      result = reportError(error);\n    });\n    expect(result).to.equal(error);\n    expect(result.origError).to.be.undefined;\n    expect(result.reported).to.be.true;\n    clock.tick();\n  });","file":"unit/test-error-reporting.js","skipped":false,"dir":"test"},{"name":"should accept string and report incorrect use","suites":[],"updatePoint":{"line":448,"column":51,"index":17011},"line":448,"code":"  it('should accept string and report incorrect use', () => {\n    window.__AMP_MODE = {\n      localDev: true,\n      test: false\n    };\n    let result;\n    allowConsoleError(() => {\n      result = reportError('error');\n    });\n    expect(result).to.be.instanceOf(Error);\n    expect(result.message).to.contain('error');\n    expect(result.origError).to.be.equal('error');\n    expect(result.reported).to.be.true;\n    expect(() => {\n      clock.tick();\n    }).to.throw(/_reported_ Error reported incorrectly/);\n  });","file":"unit/test-error-reporting.js","skipped":false,"dir":"test"},{"name":"should accept number and report incorrect use","suites":[],"updatePoint":{"line":465,"column":51,"index":17523},"line":465,"code":"  it('should accept number and report incorrect use', () => {\n    window.__AMP_MODE = {\n      localDev: true,\n      test: false\n    };\n    let result;\n    allowConsoleError(() => {\n      result = reportError(101);\n    });\n    expect(result).to.be.instanceOf(Error);\n    expect(result.message).to.contain('101');\n    expect(result.origError).to.be.equal(101);\n    expect(result.reported).to.be.true;\n    expect(() => {\n      clock.tick();\n    }).to.throw(/_reported_ Error reported incorrectly/);\n  });","file":"unit/test-error-reporting.js","skipped":false,"dir":"test"},{"name":"should accept null and report incorrect use","suites":[],"updatePoint":{"line":482,"column":49,"index":18023},"line":482,"code":"  it('should accept null and report incorrect use', () => {\n    window.__AMP_MODE = {\n      localDev: true,\n      test: false\n    };\n    let result;\n    allowConsoleError(() => {\n      result = reportError(null);\n    });\n    expect(result).to.be.instanceOf(Error);\n    expect(result.message).to.contain('Unknown error');\n    expect(result.origError).to.be.undefined;\n    expect(result.reported).to.be.true;\n    expect(() => {\n      clock.tick();\n    }).to.throw(/_reported_ Error reported incorrectly/);\n  });","file":"unit/test-error-reporting.js","skipped":false,"dir":"test"},{"name":"should trigger triggerAnalyticsEvent with correct arguments","suites":[],"updatePoint":{"line":510,"column":65,"index":18830},"line":510,"code":"  it('should trigger triggerAnalyticsEvent with correct arguments', () => {\n    reportErrorToAnalytics(error, win);\n    expect(analyticsEventSpy).to.have.been.called;\n    expect(analyticsEventSpy).to.have.been.calledWith(env.sandbox.match.any, 'user-error', {\n      errorName: error.name,\n      errorMessage: error.message\n    });\n  });","file":"unit/test-error-reporting.js","skipped":false,"dir":"test"},{"name":"should return experiment status map","suites":[],"updatePoint":{"line":13,"column":41,"index":658},"line":13,"code":"  it('should return experiment status map', () => {\n    const win = {\n      AMP_CONFIG: {\n        exp1: 1,\n        // Initialized here\n        exp2: 0,\n        // Initialized here\n        exp3: 1,\n        // Initialized here\n        exp4: 0,\n        // Initialized here\n        exp5: 1,\n        // Initialized here\n        exp6: 0,\n        // Initialized here\n        v: '12345667'\n      },\n      AMP_EXP: {\n        exp3: 0,\n        // Overrides AMP_CONFIG\n        exp4: 1,\n        // Overrides AMP_CONFIG\n        exp5: 0,\n        // Overrides AMP_CONFIG\n        exp6: 1,\n        // Overrides AMP_CONFIG\n        exp7: 1,\n        // Initialized here\n        exp8: 0,\n        // Initialized here\n        exp9: 1,\n        // Initialized here\n        exp10: 0 // Initialized here\n      },\n\n      localStorage: fakeLocalStorage({\n        'amp-experiment-toggles': ['exp5',\n        // Overrides AMP_CONFIG and AMP_EXP\n        '-exp6',\n        // Overrides AMP_CONFIG and AMP_EXP\n        '-exp9',\n        // Overrides AMP_EXP\n        'exp10',\n        // Overrides AMP_EXP\n        'exp11',\n        // Initialized here\n        '-exp12' // Initialized here\n        ].join(',')\n      })\n    };\n    resetExperimentTogglesForTesting(window);\n    expect(experimentToggles(win)).to.deep.equal({\n      exp1: true,\n      exp2: false,\n      exp3: false,\n      exp4: true,\n      exp5: true,\n      exp6: false,\n      exp7: true,\n      exp8: false,\n      exp9: false,\n      exp10: true,\n      exp11: true,\n      exp12: false\n      // \"v\" should not appear here\n    });\n  });","file":"unit/test-experiments.js","skipped":false,"dir":"test"},{"name":"should cache experiment toggles on window","suites":[],"updatePoint":{"line":81,"column":47,"index":2219},"line":81,"code":"  it('should cache experiment toggles on window', () => {\n    const win = {\n      localStorage: fakeLocalStorage({\n        'amp-experiment-toggles': '-exp3,exp4,exp5'\n      }),\n      AMP_CONFIG: {\n        exp1: 1,\n        exp2: 0,\n        exp3: 1,\n        exp4: 0,\n        v: '12345667'\n      }\n    };\n    resetExperimentTogglesForTesting(window);\n    expect(experimentToggles(win)).to.deep.equal({\n      exp1: true,\n      exp2: false,\n      exp3: false,\n      // overridden in cookie\n      exp4: true,\n      // overridden in cookie\n      exp5: true\n      // \"v\" should not appear here\n    });\n\n    expect(win['__AMP__EXPERIMENT_TOGGLES']).to.deep.equal({\n      exp1: true,\n      exp2: false,\n      exp3: false,\n      exp4: true,\n      exp5: true\n    });\n    win['__AMP__EXPERIMENT_TOGGLES'].exp1 = false;\n    expect(experimentToggles(win)).to.deep.equal({\n      exp1: false,\n      exp2: false,\n      exp3: false,\n      exp4: true,\n      exp5: true\n    });\n  });","file":"unit/test-experiments.js","skipped":false,"dir":"test"},{"name":"should return \"off\" with no cookies, malformed or empty","suites":["with only cookie flag"],"updatePoint":{"line":142,"column":63,"index":3788},"line":142,"code":"    it('should return \"off\" with no cookies, malformed or empty', () => {\n      expectExperiment(null, 'e1').to.be.false;\n      expectExperiment(undefined, 'e1').to.be.false;\n      expectExperiment('', 'e1').to.be.false;\n    });","file":"unit/test-experiments.js","skipped":false,"dir":"test"},{"name":"should return \"off\" when value is not in the list","suites":["with only cookie flag"],"updatePoint":{"line":147,"column":57,"index":4011},"line":147,"code":"    it('should return \"off\" when value is not in the list', () => {\n      expectExperiment('e1a,e2', 'e1').to.be.false;\n    });","file":"unit/test-experiments.js","skipped":false,"dir":"test"},{"name":"should return \"on\" when value is in the list","suites":["with only cookie flag"],"updatePoint":{"line":150,"column":52,"index":4134},"line":150,"code":"    it('should return \"on\" when value is in the list', () => {\n      expectExperiment('e1', 'e1').to.be.true;\n      expectExperiment('e1,e2', 'e1').to.be.true;\n      expectExperiment('e2,e1', 'e1').to.be.true;\n      expectExperiment('e2 , e1', 'e1').to.be.true;\n    });","file":"unit/test-experiments.js","skipped":false,"dir":"test"},{"name":"should return \"off\" when disabling value is in the list","suites":["with only cookie flag"],"updatePoint":{"line":156,"column":63,"index":4415},"line":156,"code":"    it('should return \"off\" when disabling value is in the list', () => {\n      expectExperiment('-e1', 'e1').to.be.false;\n      expectExperiment('e2,-e1', 'e1').to.be.false;\n      expectExperiment('-e1,e2', 'e1').to.be.false;\n      expectExperiment('e2 , -e1', 'e1').to.be.false;\n    });","file":"unit/test-experiments.js","skipped":false,"dir":"test"},{"name":"should prioritize cookie flag","suites":["with global flag"],"updatePoint":{"line":164,"column":37,"index":4723},"line":164,"code":"    it('should prioritize cookie flag', () => {\n      win.AMP_CONFIG['e1'] = true;\n      expectExperiment('e1', 'e1').to.be.true;\n    });","file":"unit/test-experiments.js","skipped":false,"dir":"test"},{"name":"should fall back to global flag","suites":["with global flag"],"updatePoint":{"line":168,"column":39,"index":4863},"line":168,"code":"    it('should fall back to global flag', () => {\n      const cookie = 'e2,e4';\n      win.AMP_CONFIG['e1'] = 1;\n      win.AMP_CONFIG['e2'] = 1;\n      win.AMP_CONFIG['e3'] = 0;\n      win.AMP_CONFIG['e4'] = 0;\n      expectExperiment(cookie, 'e1').to.be.true;\n      expectExperiment(cookie, 'e2').to.be.true;\n      expectExperiment(cookie, 'e3').to.be.false;\n      expectExperiment(cookie, 'e4').to.be.true;\n    });","file":"unit/test-experiments.js","skipped":false,"dir":"test"},{"name":"should return \"off\" when disabling value is in the list","suites":["with global flag"],"updatePoint":{"line":179,"column":63,"index":5300},"line":179,"code":"    it('should return \"off\" when disabling value is in the list', () => {\n      win.AMP_CONFIG['e1'] = true;\n      expectExperiment('-e1', 'e1').to.be.false;\n    });","file":"unit/test-experiments.js","skipped":false,"dir":"test"},{"name":"should return \"off\" when not in cookie flag or global flag","suites":["with global flag"],"updatePoint":{"line":183,"column":66,"index":5469},"line":183,"code":"    it('should return \"off\" when not in cookie flag or global flag', () => {\n      expectExperiment('', 'e1').to.be.false;\n    });","file":"unit/test-experiments.js","skipped":false,"dir":"test"},{"name":"should calc if experiment should be \"on\"","suites":["with global flag"],"updatePoint":{"line":186,"column":48,"index":5582},"line":186,"code":"    it('should calc if experiment should be \"on\"', () => {\n      win.AMP_CONFIG['e1'] = 1;\n      expectExperiment('', 'e1').to.be.true;\n      win.AMP_CONFIG['e2'] = 0;\n      expectExperiment('', 'e2').to.be.false;\n      env.sandbox.stub(Math, 'random').returns(0.5);\n      win.AMP_CONFIG['e3'] = 0.3;\n      expectExperiment('', 'e3').to.be.false;\n      win.AMP_CONFIG['e4'] = 0.6;\n      expectExperiment('', 'e4').to.be.true;\n      win.AMP_CONFIG['e5'] = 0.5;\n      expectExperiment('', 'e5').to.be.false;\n      win.AMP_CONFIG['e6'] = 0.51;\n      expectExperiment('', 'e6').to.be.true;\n    });","file":"unit/test-experiments.js","skipped":false,"dir":"test"},{"name":"should cache calc value","suites":["with global flag"],"updatePoint":{"line":201,"column":31,"index":6159},"line":201,"code":"    it('should cache calc value', () => {\n      env.sandbox.stub(Math, 'random').returns(0.4);\n      win.AMP_CONFIG['e1'] = 0.5;\n      win.AMP_CONFIG['e2'] = 0.1;\n      expectExperiment('', 'e1').to.be.true;\n      expectExperiment('', 'e2').to.be.false;\n    });","file":"unit/test-experiments.js","skipped":false,"dir":"test"},{"name":"should toggle to \"on\" with no cookies, malformed or empty","suites":["with global flag"],"updatePoint":{"line":236,"column":63,"index":7280},"line":236,"code":"  it('should toggle to \"on\" with no cookies, malformed or empty', () => {\n    expectToggle(null, 'e1').to.equal('true; e1');\n    expectToggle(undefined, 'e2').to.equal('true; e2');\n    expectToggle('', 'e3').to.equal('true; e3');\n    expectToggle('', 'e4').to.equal('true; e4');\n  });","file":"unit/test-experiments.js","skipped":false,"dir":"test"},{"name":"should toggle \"on\" when value is not in the list","suites":["with global flag"],"updatePoint":{"line":242,"column":54,"index":7556},"line":242,"code":"  it('should toggle \"on\" when value is not in the list', () => {\n    expectToggle('e1a,e2', 'e1').to.equal('true; e1a,e2,e1');\n  });","file":"unit/test-experiments.js","skipped":false,"dir":"test"},{"name":"should toggle \"off\" when value is in the list","suites":["with global flag"],"updatePoint":{"line":245,"column":51,"index":7686},"line":245,"code":"  it('should toggle \"off\" when value is in the list', () => {\n    expectToggle('e1', 'e1').to.equal('false; -e1');\n    expectToggle('e1,e2', 'e1').to.equal('false; -e1,e2');\n    expectToggle('e2,e1', 'e1').to.equal('false; e2,-e1');\n  });","file":"unit/test-experiments.js","skipped":false,"dir":"test"},{"name":"should set \"on\" when requested","suites":["with global flag"],"updatePoint":{"line":250,"column":36,"index":7910},"line":250,"code":"  it('should set \"on\" when requested', () => {\n    expectToggle('e2', 'e1', true).to.equal('true; e2,e1');\n    expectToggle('e1', 'e1', true).to.equal('true; e1');\n  });","file":"unit/test-experiments.js","skipped":false,"dir":"test"},{"name":"should set \"off\" when requested","suites":["with global flag"],"updatePoint":{"line":254,"column":37,"index":8081},"line":254,"code":"  it('should set \"off\" when requested', () => {\n    expectToggle('e2,e1', 'e1', false).to.equal('false; e2,-e1');\n    expectToggle('e1', 'e1', false).to.equal('false; -e1');\n  });","file":"unit/test-experiments.js","skipped":false,"dir":"test"},{"name":"should not set localStorage when transientExperiment==true","suites":["with global flag"],"updatePoint":{"line":258,"column":64,"index":8288},"line":258,"code":"  it('should not set localStorage when transientExperiment==true', () => {\n    const win = {\n      localStorage: fakeLocalStorage()\n    };\n    toggleExperiment(win, 'e1', true, true);\n    expect(win.localStorage.getItem('amp-experiment-toggles')).to.equal(null);\n    toggleExperiment(win, 'e2', false, true);\n    expect(win.localStorage.getItem('amp-experiment-toggles')).to.equal(null);\n    toggleExperiment(win, 'e3', undefined, true);\n    expect(win.localStorage.getItem('amp-experiment-toggles')).to.equal(null);\n    // But all of those experiment states should be durable in the window\n    // environment.\n    expect(isExperimentOn(win, 'e1'), 'e1 is on').to.be.true;\n    expect(isExperimentOn(win, 'e2'), 'e2 is off').to.be.false;\n    expect(isExperimentOn(win, 'e3'), 'e3 is on').to.be.true;\n    toggleExperiment(win, 'e1', false, true);\n    expect(win.localStorage.getItem('amp-experiment-toggles')).to.equal(null);\n    toggleExperiment(win, 'e2', true, true);\n    expect(win.localStorage.getItem('amp-experiment-toggles')).to.equal(null);\n    toggleExperiment(win, 'e3', undefined, true);\n    expect(win.localStorage.getItem('amp-experiment-toggles')).to.equal(null);\n    expect(isExperimentOn(win, 'e1'), 'e1 is off').to.be.false;\n    expect(isExperimentOn(win, 'e2'), 'e2 is on').to.be.true;\n    expect(isExperimentOn(win, 'e3'), 'e3 is off').to.be.false;\n  });","file":"unit/test-experiments.js","skipped":false,"dir":"test"},{"name":"should set localStorage when !transientExperiment","suites":["with global flag"],"updatePoint":{"line":283,"column":55,"index":9652},"line":283,"code":"  it('should set localStorage when !transientExperiment', () => {\n    const win = {\n      localStorage: fakeLocalStorage(),\n      location: {\n        hostname: 'test.test',\n        href: 'https://test.test/test.html'\n      }\n    };\n    toggleExperiment(win, 'transient', true, true);\n    toggleExperiment(win, 'e1', true);\n    toggleExperiment(win, 'e2', true, false);\n    toggleExperiment(win, 'e3', true, undefined);\n    toggleExperiment(win, 'e4', undefined, false);\n    expect(getExperimentTogglesForTesting(win)).to.not.have.property('transient');\n    expect(getExperimentTogglesForTesting(win)).to.have.property('e1', true);\n    expect(getExperimentTogglesForTesting(win)).to.have.property('e2', true);\n    expect(getExperimentTogglesForTesting(win)).to.have.property('e3', true);\n    expect(getExperimentTogglesForTesting(win)).to.have.property('e4', true);\n\n    // All of those experiment states should be durable in the window\n    // environment.\n    expect(isExperimentOn(win, 'transient'), 'transient is on').to.be.true;\n    expect(isExperimentOn(win, 'e1'), 'e1 is on').to.be.true;\n    expect(isExperimentOn(win, 'e2'), 'e2 is on').to.be.true;\n    expect(isExperimentOn(win, 'e3'), 'e3 is on').to.be.true;\n    expect(isExperimentOn(win, 'e4'), 'e4 is on').to.be.true;\n    toggleExperiment(win, 'transient', false, true);\n    toggleExperiment(win, 'e1', false);\n    toggleExperiment(win, 'e2', false, false);\n    toggleExperiment(win, 'e3', false, undefined);\n    toggleExperiment(win, 'e4', undefined, false);\n    expect(getExperimentTogglesForTesting(win)).to.not.have.property('transient');\n    expect(getExperimentTogglesForTesting(win)).to.have.property('e1', false);\n    expect(getExperimentTogglesForTesting(win)).to.have.property('e2', false);\n    expect(getExperimentTogglesForTesting(win)).to.have.property('e3', false);\n    expect(getExperimentTogglesForTesting(win)).to.have.property('e4', false);\n    expect(isExperimentOn(win, 'transient'), 'transient is on').to.be.false;\n    expect(isExperimentOn(win, 'e1'), 'e1 is on').to.be.false;\n    expect(isExperimentOn(win, 'e2'), 'e2 is on').to.be.false;\n    expect(isExperimentOn(win, 'e3'), 'e3 is on').to.be.false;\n    expect(isExperimentOn(win, 'e4'), 'e4 is on').to.be.false;\n  });","file":"unit/test-experiments.js","skipped":false,"dir":"test"},{"name":"should not mess up localStorage when transientExperiment==true ","suites":["with global flag"],"updatePoint":{"line":325,"column":69,"index":11922},"line":325,"code":"  it('should not mess up localStorage when transientExperiment==true ', () => {\n    const win = {\n      localStorage: fakeLocalStorage(),\n      location: {\n        hostname: 'test.test',\n        href: 'https://test.test/test.html'\n      }\n    };\n    // Make sure some experiments are enabled in the cookie.\n    toggleExperiment(win, 'e0', true);\n    toggleExperiment(win, 'e1', true);\n    toggleExperiment(win, 'e2', true);\n    toggleExperiment(win, 'e3', true);\n    expect(win.localStorage.getItem('amp-experiment-toggles')).to.contain('e0');\n    expect(win.localStorage.getItem('amp-experiment-toggles')).to.contain('e1');\n    expect(win.localStorage.getItem('amp-experiment-toggles')).to.contain('e2');\n    expect(win.localStorage.getItem('amp-experiment-toggles')).to.contain('e3');\n    expect(isExperimentOn(win, 'e0'), 'e0').to.be.true;\n    expect(isExperimentOn(win, 'e1'), 'e1').to.be.true;\n    expect(isExperimentOn(win, 'e2'), 'e2').to.be.true;\n    expect(isExperimentOn(win, 'e3'), 'e3').to.be.true;\n    toggleExperiment(win, 'x0', false, true);\n    toggleExperiment(win, 'x1', true, true);\n    toggleExperiment(win, 'x2', undefined, true);\n    expect(win.localStorage.getItem('amp-experiment-toggles')).to.contain('e0');\n    expect(win.localStorage.getItem('amp-experiment-toggles')).to.contain('e1');\n    expect(win.localStorage.getItem('amp-experiment-toggles')).to.contain('e2');\n    expect(win.localStorage.getItem('amp-experiment-toggles')).to.contain('e3');\n    expect(win.localStorage.getItem('amp-experiment-toggles')).to.not.contain('x0');\n    expect(win.localStorage.getItem('amp-experiment-toggles')).to.not.contain('x1');\n    expect(win.localStorage.getItem('amp-experiment-toggles')).to.not.contain('x2');\n    expect(isExperimentOn(win, 'x0'), 'x0').to.be.false;\n    expect(isExperimentOn(win, 'x1'), 'x1').to.be.true;\n    expect(isExperimentOn(win, 'x2'), 'x2').to.be.true;\n    // The toggle(win, foo, false) cases here should hit the 'foo not in\n    // EXPERIMENT_TOGGLES' cases in toggleExperiments.\n    toggleExperiment(win, 'e4', false);\n    toggleExperiment(win, 'e5', true);\n    toggleExperiment(win, 'e6', false);\n    expect(win.localStorage.getItem('amp-experiment-toggles')).to.contain('e0');\n    expect(win.localStorage.getItem('amp-experiment-toggles')).to.contain('e1');\n    expect(win.localStorage.getItem('amp-experiment-toggles')).to.contain('e2');\n    expect(win.localStorage.getItem('amp-experiment-toggles')).to.contain('e3');\n    expect(win.localStorage.getItem('amp-experiment-toggles')).to.not.contain('e4');\n    expect(win.localStorage.getItem('amp-experiment-toggles')).to.contain('e5');\n    expect(win.localStorage.getItem('amp-experiment-toggles')).to.not.contain('e6');\n    expect(isExperimentOn(win, 'e4'), 'e4').to.be.false;\n    expect(isExperimentOn(win, 'e5'), 'e5').to.be.true;\n    expect(isExperimentOn(win, 'e6'), 'e6').to.be.false;\n  });","file":"unit/test-experiments.js","skipped":false,"dir":"test"},{"name":"should override global settings","suites":["with global flag"],"updatePoint":{"line":375,"column":37,"index":14788},"line":375,"code":"  it('should override global settings', () => {\n    const win = {\n      'AMP_CONFIG': {\n        'e1': 1\n      },\n      localStorage: fakeLocalStorage(),\n      location: {\n        hostname: 'test.test',\n        href: 'http://foo.bar'\n      }\n    };\n\n    // e1 is on, according to the AMP_CONFIG global setting\n    expect(isExperimentOn(win, 'e1')).to.be.true;\n    // toggleExperiment should override the global setting\n    expect(toggleExperiment(win, 'e1')).to.be.false;\n    expect(isExperimentOn(win, 'e1')).to.be.false;\n\n    // Calling cache reset testing function clears cookies on window object\n    // it is called with.\n    resetExperimentTogglesForTesting(win);\n    expect(isExperimentOn(win, 'e1')).to.be.true;\n\n    // Now let's explicitly toggle to true\n    expect(toggleExperiment(win, 'e1', true)).to.be.true;\n    expect(isExperimentOn(win, 'e1')).to.be.true;\n    resetExperimentTogglesForTesting(win);\n    expect(isExperimentOn(win, 'e1')).to.be.true;\n\n    // Toggle transiently should still work\n    expect(toggleExperiment(win, 'e1', false, true)).to.be.false;\n    expect(isExperimentOn(win, 'e1')).to.be.false;\n    resetExperimentTogglesForTesting(win); // cache reset should bring it back to true\n    expect(isExperimentOn(win, 'e1')).to.be.true;\n\n    // Sanity check, the global setting should never be changed.\n    expect(win.AMP_CONFIG.e1).to.equal(1);\n  });","file":"unit/test-experiments.js","skipped":false,"dir":"test"},{"name":"should allow override iff the experiment is allowlisted","suites":["with global flag"],"updatePoint":{"line":419,"column":61,"index":16298},"line":419,"code":"  it('should allow override iff the experiment is allowlisted', () => {\n    win.AMP_CONFIG = {\n      'allow-doc-opt-in': ['e1', 'e3'],\n      e1: 0,\n      e2: 0\n    };\n    win.document.head.appendChild(createElementWithAttributes(win.document, 'meta', {\n      name: 'amp-experiments-opt-in',\n      content: 'e1,e2,e3'\n    }));\n    resetExperimentTogglesForTesting(window);\n    expect(isExperimentOn(win, 'e1')).to.be.true;\n    expect(isExperimentOn(win, 'e2')).to.be.false; // e2 is not allowlisted\n    expect(isExperimentOn(win, 'e3')).to.be.true;\n    toggleExperiment(win, 'e1', false);\n    toggleExperiment(win, 'e2', true);\n    toggleExperiment(win, 'e3', false);\n    expect(isExperimentOn(win, 'e1')).to.be.false;\n    expect(isExperimentOn(win, 'e2')).to.be.true;\n    expect(isExperimentOn(win, 'e3')).to.be.false;\n  });","file":"unit/test-experiments.js","skipped":false,"dir":"test"},{"name":"should allow override iff the experiment is allowlisted","suites":["with global flag"],"updatePoint":{"line":446,"column":61,"index":17231},"line":446,"code":"  it('should allow override iff the experiment is allowlisted', () => {\n    win.AMP_CONFIG = {\n      'allow-url-opt-in': ['e1', 'e3', 'e4', 'e6', 'e7', 'e8'],\n      e1: 0,\n      e2: 0,\n      e4: 1,\n      e5: 1\n    };\n    delete win.location.originalHash;\n    win.location.href = '#e-e1=1&e-e2=1&e-e3=1&e-e4=0&e-e5=0&e-e6=0&e-e7=1&e-e8=0';\n    win.document.cookie = 'AMP_EXP=-e7,e8';\n    resetExperimentTogglesForTesting(window);\n    expect(isExperimentOn(win, 'e1')).to.be.true;\n    expect(isExperimentOn(win, 'e2')).to.be.false; // e2 is not allowlisted\n    expect(isExperimentOn(win, 'e3')).to.be.true;\n    expect(isExperimentOn(win, 'e4')).to.be.false;\n    expect(isExperimentOn(win, 'e5')).to.be.true; // e5 is not allowlisted\n    expect(isExperimentOn(win, 'e6')).to.be.false;\n    expect(isExperimentOn(win, 'e7')).to.be.true; // overrides cookies\n    expect(isExperimentOn(win, 'e8')).to.be.false; // overrides cookies\n\n    toggleExperiment(win, 'e1', false);\n    toggleExperiment(win, 'e2', true);\n    toggleExperiment(win, 'e3', false);\n    toggleExperiment(win, 'e4', true);\n    toggleExperiment(win, 'e5', false);\n    toggleExperiment(win, 'e6', true);\n    toggleExperiment(win, 'e7', false);\n    toggleExperiment(win, 'e8', true);\n    expect(isExperimentOn(win, 'e1')).to.be.false;\n    expect(isExperimentOn(win, 'e2')).to.be.true;\n    expect(isExperimentOn(win, 'e3')).to.be.false;\n    expect(isExperimentOn(win, 'e4')).to.be.true;\n    expect(isExperimentOn(win, 'e5')).to.be.false;\n    expect(isExperimentOn(win, 'e6')).to.be.true;\n    expect(isExperimentOn(win, 'e7')).to.be.false;\n    expect(isExperimentOn(win, 'e8')).to.be.true;\n  });","file":"unit/test-experiments.js","skipped":false,"dir":"test"},{"name":"should return value based on binary version","suites":["with global flag"],"updatePoint":{"line":486,"column":49,"index":18919},"line":486,"code":"  it('should return value based on binary version', () => {\n    const win = {\n      AMP_CONFIG: {\n        canary: 0\n      }\n    };\n    expect(isCanary(win)).to.be.false;\n    win.AMP_CONFIG.canary = 1;\n    expect(isCanary(win)).to.be.true;\n  });","file":"unit/test-experiments.js","skipped":false,"dir":"test"},{"name":"should return correct type","suites":["with global flag"],"updatePoint":{"line":498,"column":32,"index":19200},"line":498,"code":"  it('should return correct type', () => {\n    const win = {\n      AMP_CONFIG: {\n        type: 'production'\n      }\n    };\n    expect(getBinaryType(win)).to.equal('production');\n    win.AMP_CONFIG.type = 'experimental';\n    expect(getBinaryType(win)).to.equal('experimental');\n    win.AMP_CONFIG.type = 'control';\n    expect(getBinaryType(win)).to.equal('control');\n    win.AMP_CONFIG.type = 'rc';\n    expect(getBinaryType(win)).to.equal('rc');\n    delete win.AMP_CONFIG.type;\n    expect(getBinaryType(win)).to.equal('unknown');\n  });","file":"unit/test-experiments.js","skipped":false,"dir":"test"},{"name":"should return \"unknown\"","suites":["with global flag"],"updatePoint":{"line":514,"column":29,"index":19732},"line":514,"code":"  it('should return \"unknown\"', () => {\n    expect(getBinaryType({})).to.equal('unknown');\n  });","file":"unit/test-experiments.js","skipped":false,"dir":"test"},{"name":"handles empty experiments list","suites":["#randomlySelectUnsetExperiments"],"updatePoint":{"line":549,"column":38,"index":20861},"line":549,"code":"    it('handles empty experiments list', () => {\n      // Opt out of experiment.\n      toggleExperiment(env.sandbox.win, 'testExperimentId', false, true);\n      randomlySelectUnsetExperiments(env.sandbox.win, []);\n      expect(isExperimentOn(env.sandbox.win, 'testExperimentId'), 'experiment is on').to.be.false;\n      expect(env.sandbox.win.__AMP_EXPERIMENT_BRANCHES).to.be.empty;\n    });","file":"unit/test-experiments.js","skipped":false,"dir":"test"},{"name":"handles experiment not diverted path","suites":["#randomlySelectUnsetExperiments"],"updatePoint":{"line":556,"column":44,"index":21257},"line":556,"code":"    it('handles experiment not diverted path', () => {\n      // Opt out of experiment.\n      toggleExperiment(env.sandbox.win, 'testExperimentId', false, true);\n      randomlySelectUnsetExperiments(env.sandbox.win, testExperimentList);\n      expect(isExperimentOn(env.sandbox.win, 'testExperimentId'), 'experiment is on').to.be.false;\n      expect(getExperimentBranch(env.sandbox.win, 'testExperimentId')).to.not.be.ok;\n    });","file":"unit/test-experiments.js","skipped":false,"dir":"test"},{"name":"handles experiment diverted path 1","suites":["#randomlySelectUnsetExperiments"],"updatePoint":{"line":563,"column":42,"index":21683},"line":563,"code":"    it('handles experiment diverted path 1', () => {\n      // Force experiment on.\n      toggleExperiment(env.sandbox.win, 'testExperimentId', true, true);\n      // force the control branch to be chosen by making the accurate PRNG\n      // return a value < 0.5.\n      RANDOM_NUMBER_GENERATORS.accuratePrng.onFirstCall().returns(0.3);\n      randomlySelectUnsetExperiments(env.sandbox.win, testExperimentList);\n      expect(isExperimentOn(env.sandbox.win, 'testExperimentId'), 'experiment is on').to.be.true;\n      expect(getExperimentBranch(env.sandbox.win, 'testExperimentId')).to.equal('branch1_id');\n    });","file":"unit/test-experiments.js","skipped":false,"dir":"test"},{"name":"handles experiment diverted path 2","suites":["#randomlySelectUnsetExperiments"],"updatePoint":{"line":573,"column":42,"index":22293},"line":573,"code":"    it('handles experiment diverted path 2', () => {\n      // Force experiment on.\n      toggleExperiment(env.sandbox.win, 'testExperimentId', true, true);\n      // Force the experiment branch to be chosen by making the accurate PRNG\n      // return a value > 0.5.\n      RANDOM_NUMBER_GENERATORS.accuratePrng.onFirstCall().returns(0.6);\n      randomlySelectUnsetExperiments(env.sandbox.win, testExperimentList);\n      expect(isExperimentOn(env.sandbox.win, 'testExperimentId'), 'experiment is on').to.be.true;\n      expect(getExperimentBranch(env.sandbox.win, 'testExperimentId')).to.equal('branch2_id');\n    });","file":"unit/test-experiments.js","skipped":false,"dir":"test"},{"name":"picks a branch if traffic eligible","suites":["#randomlySelectUnsetExperiments"],"updatePoint":{"line":583,"column":42,"index":22906},"line":583,"code":"    it('picks a branch if traffic eligible', () => {\n      toggleExperiment(env.sandbox.win, 'expt_0', true, true);\n      env.sandbox.win.trafficEligible = true;\n      const experimentInfo = [{\n        experimentId: 'expt_0',\n        isTrafficEligible: win => {\n          return win.trafficEligible;\n        },\n        branches: ['0_0', '0_1']\n      }];\n      RANDOM_NUMBER_GENERATORS.accuratePrng.returns(0.3);\n      randomlySelectUnsetExperiments(env.sandbox.win, experimentInfo);\n      expect(isExperimentOn(env.sandbox.win, 'expt_0')).to.be.true;\n      expect(getExperimentBranch(env.sandbox.win, 'expt_0')).to.equal('0_0');\n    });","file":"unit/test-experiments.js","skipped":false,"dir":"test"},{"name":"doesn't pick a branch if traffic ineligible","suites":["#randomlySelectUnsetExperiments"],"updatePoint":{"line":598,"column":51,"index":23552},"line":598,"code":"    it(\"doesn't pick a branch if traffic ineligible\", () => {\n      toggleExperiment(env.sandbox.win, 'expt_0', true, true);\n      env.sandbox.win.trafficEligible = false;\n      const experimentInfo = [{\n        experimentId: 'expt_0',\n        isTrafficEligible: win => {\n          return win.trafficEligible;\n        },\n        branches: ['0_0', '0_1']\n      }];\n      RANDOM_NUMBER_GENERATORS.accuratePrng.returns(0.3);\n      randomlySelectUnsetExperiments(env.sandbox.win, experimentInfo);\n      expect(isExperimentOn(env.sandbox.win, 'expt_0')).to.be.true;\n      expect(getExperimentBranch(env.sandbox.win, 'expt_0')).to.be.null;\n    });","file":"unit/test-experiments.js","skipped":false,"dir":"test"},{"name":"doesn't pick a branch if no traffic eligibility function","suites":["#randomlySelectUnsetExperiments"],"updatePoint":{"line":613,"column":64,"index":24207},"line":613,"code":"    it(\"doesn't pick a branch if no traffic eligibility function\", () => {\n      toggleExperiment(env.sandbox.win, 'expt_0', true, true);\n      const experimentInfo = [{\n        experimentId: 'expt_0',\n        isTrafficEligible: undefined,\n        branches: ['0_0', '0_1']\n      }];\n      RANDOM_NUMBER_GENERATORS.accuratePrng.returns(0.3);\n      randomlySelectUnsetExperiments(env.sandbox.win, experimentInfo);\n      expect(isExperimentOn(env.sandbox.win, 'expt_0')).to.be.true;\n      expect(getExperimentBranch(env.sandbox.win, 'expt_0')).to.be.null;\n    });","file":"unit/test-experiments.js","skipped":false,"dir":"test"},{"name":"handles multiple experiments","suites":["#randomlySelectUnsetExperiments"],"updatePoint":{"line":644,"column":36,"index":25673},"line":644,"code":"    it('handles multiple experiments', () => {\n      toggleExperiment(env.sandbox.win, 'expt_0', true, true);\n      toggleExperiment(env.sandbox.win, 'expt_1', false, true);\n      toggleExperiment(env.sandbox.win, 'expt_2', true, true);\n      toggleExperiment(env.sandbox.win, 'expt_3', true, true);\n      const experimentInfo = [{\n        experimentId: 'expt_0',\n        isTrafficEligible: () => true,\n        branches: ['0_c', '0_e']\n      }, {\n        experimentId: 'expt_1',\n        isTrafficEligible: () => true,\n        branches: ['1_c', '1_e']\n      }, {\n        experimentId: 'expt_2',\n        isTrafficEligible: () => true,\n        branches: ['2_c', '2_e']\n      }\n      // expt_3 omitted.\n      ];\n\n      RANDOM_NUMBER_GENERATORS.accuratePrng.returns(0.6);\n      randomlySelectUnsetExperiments(env.sandbox.win, experimentInfo);\n      expect(isExperimentOn(env.sandbox.win, 'expt_0'), 'expt_0 is on').to.be.true;\n      expect(isExperimentOn(env.sandbox.win, 'expt_1'), 'expt_1 is on').to.be.false;\n      expect(isExperimentOn(env.sandbox.win, 'expt_2'), 'expt_2 is on').to.be.true;\n      // Note: calling isExperimentOn('expt_3') would actually evaluate the\n      // frequency for expt_3, possibly enabling it.  Since we wanted it to be\n      // omitted altogether, we'll evaluate it only via its branch.\n      expect(getExperimentBranch(env.sandbox.win, 'expt_0')).to.equal('0_e');\n      expect(getExperimentBranch(env.sandbox.win, 'expt_1')).to.not.be.ok;\n      expect(getExperimentBranch(env.sandbox.win, 'expt_2')).to.equal('2_e');\n      expect(getExperimentBranch(env.sandbox.win, 'expt_3')).to.not.be.ok;\n    });","file":"unit/test-experiments.js","skipped":false,"dir":"test"},{"name":"handles multi-way branches","suites":["#randomlySelectUnsetExperiments"],"updatePoint":{"line":678,"column":34,"index":27299},"line":678,"code":"    it('handles multi-way branches', () => {\n      toggleExperiment(env.sandbox.win, 'expt_0', true, true);\n      const experimentInfo = [{\n        experimentId: 'expt_0',\n        isTrafficEligible: () => true,\n        branches: ['0_0', '0_1', '0_2', '0_3', '0_4']\n      }];\n      RANDOM_NUMBER_GENERATORS.accuratePrng.returns(0.7);\n      randomlySelectUnsetExperiments(env.sandbox.win, experimentInfo);\n      expect(isExperimentOn(env.sandbox.win, 'expt_0'), 'expt_0 is on').to.be.true;\n      expect(getExperimentBranch(env.sandbox.win, 'expt_0')).to.equal('0_3');\n    });","file":"unit/test-experiments.js","skipped":false,"dir":"test"},{"name":"handles multiple experiments with multi-way branches","suites":["#randomlySelectUnsetExperiments"],"updatePoint":{"line":690,"column":60,"index":27899},"line":690,"code":"    it('handles multiple experiments with multi-way branches', () => {\n      toggleExperiment(env.sandbox.win, 'expt_0', true, true);\n      toggleExperiment(env.sandbox.win, 'expt_1', false, true);\n      toggleExperiment(env.sandbox.win, 'expt_2', true, true);\n      toggleExperiment(env.sandbox.win, 'expt_3', true, true);\n      const experimentInfo = [{\n        experimentId: 'expt_0',\n        isTrafficEligible: () => true,\n        branches: ['0_0', '0_1', '0_2', '0_3', '0_4']\n      }, {\n        experimentId: 'expt_1',\n        isTrafficEligible: () => true,\n        branches: ['1_0', '1_1', '1_2', '1_3', '1_4']\n      }, {\n        experimentId: 'expt_2',\n        isTrafficEligible: () => true,\n        branches: ['2_0', '2_1', '2_2', '2_3', '2_4']\n      }];\n      RANDOM_NUMBER_GENERATORS.accuratePrng.onFirstCall().returns(0.7);\n      RANDOM_NUMBER_GENERATORS.accuratePrng.onSecondCall().returns(0.3);\n      randomlySelectUnsetExperiments(env.sandbox.win, experimentInfo);\n      expect(isExperimentOn(env.sandbox.win, 'expt_0'), 'expt_0 is on').to.be.true;\n      expect(isExperimentOn(env.sandbox.win, 'expt_1'), 'expt_1 is on').to.be.false;\n      expect(isExperimentOn(env.sandbox.win, 'expt_2'), 'expt_2 is on').to.be.true;\n      // Note: calling isExperimentOn('expt_3') would actually evaluate the\n      // frequency for expt_3, possibly enabling it.  Since we wanted it to be\n      // omitted altogether, we'll evaluate it only via its branch.\n      expect(getExperimentBranch(env.sandbox.win, 'expt_0')).to.equal('0_3');\n      expect(getExperimentBranch(env.sandbox.win, 'expt_1')).to.not.be.ok;\n      expect(getExperimentBranch(env.sandbox.win, 'expt_2')).to.equal('2_1');\n      expect(getExperimentBranch(env.sandbox.win, 'expt_3')).to.not.be.ok;\n    });","file":"unit/test-experiments.js","skipped":false,"dir":"test"},{"name":"should not process the same experiment twice","suites":["#randomlySelectUnsetExperiments"],"updatePoint":{"line":722,"column":52,"index":29660},"line":722,"code":"    it('should not process the same experiment twice', () => {\n      const exptAInfo = [{\n        experimentId: 'fooExpt',\n        isTrafficEligible: () => true,\n        branches: ['012345', '987654']\n      }];\n      const exptBInfo = [{\n        experimentId: 'fooExpt',\n        isTrafficEligible: () => true,\n        branches: ['246810', '108642']\n      }];\n      toggleExperiment(env.sandbox.win, 'fooExpt', false, true);\n      randomlySelectUnsetExperiments(env.sandbox.win, exptAInfo);\n      randomlySelectUnsetExperiments(env.sandbox.win, exptBInfo);\n      // Even though we tried to set up a second time, using a config\n      // parameter that should ensure that the experiment was activated, the\n      // experiment framework should evaluate each experiment only once per\n      // page and should not enable it.\n      expect(isExperimentOn(env.sandbox.win, 'fooExpt')).to.be.false;\n      expect(getExperimentBranch(env.sandbox.win, 'fooExpt')).to.not.be.ok;\n    });","file":"unit/test-experiments.js","skipped":false,"dir":"test"},{"name":"returns empty experiments map","suites":["#randomlySelectUnsetExperiments"],"updatePoint":{"line":743,"column":37,"index":30618},"line":743,"code":"    it('returns empty experiments map', () => {\n      // Opt out of experiment.\n      toggleExperiment(env.sandbox.win, 'testExperimentId', false, true);\n      const exps = randomlySelectUnsetExperiments(env.sandbox.win, []);\n      expect(exps).to.be.empty;\n    });","file":"unit/test-experiments.js","skipped":false,"dir":"test"},{"name":"returns map with experiment diverted path 1","suites":["#randomlySelectUnsetExperiments"],"updatePoint":{"line":749,"column":51,"index":30898},"line":749,"code":"    it('returns map with experiment diverted path 1', () => {\n      // Force experiment on.\n      toggleExperiment(env.sandbox.win, 'testExperimentId', true, true);\n      // force the control branch to be chosen by making the accurate PRNG\n      // return a value < 0.5.\n      RANDOM_NUMBER_GENERATORS.accuratePrng.onFirstCall().returns(0.3);\n      const exps = randomlySelectUnsetExperiments(env.sandbox.win, testExperimentList);\n      expect(exps).to.deep.equal({\n        'testExperimentId': 'branch1_id'\n      });\n    });","file":"unit/test-experiments.js","skipped":false,"dir":"test"},{"name":"returns map with multiple experiments with multi-way branches","suites":["#randomlySelectUnsetExperiments"],"updatePoint":{"line":760,"column":69,"index":31441},"line":760,"code":"    it('returns map with multiple experiments with multi-way branches', () => {\n      toggleExperiment(env.sandbox.win, 'expt_0', true, true);\n      toggleExperiment(env.sandbox.win, 'expt_1', false, true);\n      toggleExperiment(env.sandbox.win, 'expt_2', true, true);\n      toggleExperiment(env.sandbox.win, 'expt_3', true, true);\n      const experimentInfo = [{\n        experimentId: 'expt_0',\n        isTrafficEligible: () => true,\n        branches: ['0_0', '0_1', '0_2', '0_3', '0_4']\n      }, {\n        experimentId: 'expt_1',\n        isTrafficEligible: () => true,\n        branches: ['1_0', '1_1', '1_2', '1_3', '1_4']\n      }, {\n        experimentId: 'expt_2',\n        isTrafficEligible: () => true,\n        branches: ['2_0', '2_1', '2_2', '2_3', '2_4']\n      }];\n      RANDOM_NUMBER_GENERATORS.accuratePrng.onFirstCall().returns(0.7);\n      RANDOM_NUMBER_GENERATORS.accuratePrng.onSecondCall().returns(0.3);\n      const exps = randomlySelectUnsetExperiments(env.sandbox.win, experimentInfo);\n      expect(exps).to.deep.equal({\n        'expt_0': '0_3',\n        'expt_2': '2_1'\n      });\n    });","file":"unit/test-experiments.js","skipped":false,"dir":"test"},{"name":"should return an empty object if no active branches","suites":["#randomlySelectUnsetExperiments"],"updatePoint":{"line":789,"column":57,"index":32604},"line":789,"code":"  it('should return an empty object if no active branches', () => {\n    expect(getActiveExperimentBranches(env.win)).to.eql({});\n  });","file":"unit/test-experiments.js","skipped":false,"dir":"test"},{"name":"should return obj containing all branches","suites":["#randomlySelectUnsetExperiments"],"updatePoint":{"line":792,"column":47,"index":32729},"line":792,"code":"  it('should return obj containing all branches', () => {\n    forceExperimentBranch(env.win, 'exp1', '1234');\n    forceExperimentBranch(env.win, 'exp2', '5678');\n    expect(getActiveExperimentBranches(env.win)).to.eql({\n      exp1: '1234',\n      exp2: '5678'\n    });\n  });","file":"unit/test-experiments.js","skipped":false,"dir":"test"},{"name":"track event with one request","suites":["CustomEventReporterBuilder"],"updatePoint":{"line":64,"column":36,"index":2667},"line":64,"code":"    it('track event with one request', () => {\n      builder.track('test', 'fake.test');\n      expect(builder.config_).to.jsonEqual({\n        'requests': {\n          'test-request-0': 'fake.test'\n        },\n        'triggers': {\n          'test': {\n            'on': 'test',\n            'request': ['test-request-0']\n          }\n        }\n      });\n    });","file":"unit/test-extension-analytics.js","skipped":false,"dir":"test"},{"name":"track event with multiple request","suites":["CustomEventReporterBuilder"],"updatePoint":{"line":78,"column":41,"index":3029},"line":78,"code":"    it('track event with multiple request', () => {\n      builder.track('test', ['fake.test', 'fake1.test']);\n      expect(builder.config_).to.jsonEqual({\n        'requests': {\n          'test-request-0': 'fake.test',\n          'test-request-1': 'fake1.test'\n        },\n        'triggers': {\n          'test': {\n            'on': 'test',\n            'request': ['test-request-0', 'test-request-1']\n          }\n        }\n      });\n    });","file":"unit/test-extension-analytics.js","skipped":false,"dir":"test"},{"name":"track multi event","suites":["CustomEventReporterBuilder"],"updatePoint":{"line":93,"column":25,"index":3451},"line":93,"code":"    it('track multi event', () => {\n      builder.track('test', 'fake.test').track('test1', 'fake1.test');\n      expect(builder.config_).to.jsonEqual({\n        'requests': {\n          'test-request-0': 'fake.test',\n          'test1-request-0': 'fake1.test'\n        },\n        'triggers': {\n          'test': {\n            'on': 'test',\n            'request': ['test-request-0']\n          },\n          'test1': {\n            'on': 'test1',\n            'request': ['test1-request-0']\n          }\n        }\n      });\n    });","file":"unit/test-extension-analytics.js","skipped":false,"dir":"test"},{"name":"should not add already tracked event","suites":["CustomEventReporterBuilder"],"updatePoint":{"line":112,"column":44,"index":3992},"line":112,"code":"    it('should not add already tracked event', () => {\n      try {\n        builder.track('test', 'fake.test').track('test', 'example.test');\n      } catch (e) {\n        expect(e.message).to.equal('customEventReporterBuilder should not track same eventType twice');\n      }\n    });","file":"unit/test-extension-analytics.js","skipped":false,"dir":"test"},{"name":"should return a customEventReporter instance","suites":["CustomEventReporterBuilder"],"updatePoint":{"line":119,"column":52,"index":4281},"line":119,"code":"    it('should return a customEventReporter instance', () => {\n      parent.getResourceId = () => {\n        return 1;\n      };\n      parent.signals = () => {\n        return {\n          whenSignal: () => {\n            return Promise.resolve();\n          }\n        };\n      };\n      const reporter = builder.track('test', 'fake.test').build();\n      expect(reporter.trigger).to.exist;\n    });","file":"unit/test-extension-analytics.js","skipped":false,"dir":"test"},{"name":"Should allow to specify transport config","suites":["CustomEventReporterBuilder"],"updatePoint":{"line":133,"column":48,"index":4668},"line":133,"code":"    it('Should allow to specify transport config', () => {\n      parent.getResourceId = () => {\n        return 1;\n      };\n      parent.signals = () => {\n        return {\n          whenSignal: () => {\n            return Promise.resolve();\n          }\n        };\n      };\n      builder.setTransportConfig({\n        'beacon': true,\n        'image': true,\n        'xhrpost': false\n      });\n      const reporter = builder.build();\n      expect(reporter.config_.transport).to.jsonEqual({\n        'beacon': true,\n        'image': true,\n        'xhrpost': false\n      });\n    });","file":"unit/test-extension-analytics.js","skipped":false,"dir":"test"},{"name":"Should allow to specify extraUrlParams config","suites":["CustomEventReporterBuilder"],"updatePoint":{"line":156,"column":53,"index":5247},"line":156,"code":"    it('Should allow to specify extraUrlParams config', () => {\n      parent.getResourceId = () => {\n        return 1;\n      };\n      parent.signals = () => {\n        return {\n          whenSignal: () => {\n            return Promise.resolve();\n          }\n        };\n      };\n      builder.setExtraUrlParams({\n        'a': 'b'\n      });\n      const reporter = builder.build();\n      expect(reporter.config_.extraUrlParams).to.jsonEqual({\n        'a': 'b'\n      });\n    });","file":"unit/test-extension-analytics.js","skipped":false,"dir":"test"},{"name":"replace eventType with new name","suites":["CustomEventReporter test"],"updatePoint":{"line":203,"column":39,"index":6809},"line":203,"code":"    it('replace eventType with new name', function* () {\n      parentEle.layoutCallback();\n      yield macroTask();\n      const element = parentEle.querySelector('amp-analytics');\n      expect(element).to.not.be.null;\n      const script = element.querySelector('script');\n      const id = parentEle.getResourceId();\n      expect(script.textContent).to.jsonEqual(JSON.stringify({\n        'requests': {\n          'test-request-0': 'fake.test'\n        },\n        'triggers': {\n          'test': {\n            'on': `sandbox-${id}-test`,\n            'request': ['test-request-0']\n          }\n        }\n      }));\n    });","file":"unit/test-extension-analytics.js","skipped":false,"dir":"test"},{"name":"trigger event with new name","suites":["CustomEventReporter test"],"updatePoint":{"line":222,"column":35,"index":7422},"line":222,"code":"    it('trigger event with new name', function* () {\n      const id = parentEle.getResourceId();\n      reporter.trigger('test');\n      yield macroTask();\n      expect(triggerEventSpy).to.be.calledWith(parentEle, `sandbox-${id}-test`);\n    });","file":"unit/test-extension-analytics.js","skipped":false,"dir":"test"},{"name":"should not trigger not added event","suites":["CustomEventReporter test"],"updatePoint":{"line":228,"column":42,"index":7672},"line":228,"code":"    it('should not trigger not added event', function* () {\n      try {\n        reporter.trigger('fake');\n      } catch (e) {\n        expect(e.message).to.equal('Cannot trigger non initiated eventType');\n      }\n    });","file":"unit/test-extension-analytics.js","skipped":false,"dir":"test"},{"name":"should insert analytics after LOAD_START","suites":["useAnalyticsInSandbox","parent does NOT relayout, call in buildCallback"],"updatePoint":{"line":277,"column":50,"index":9085},"line":277,"code":"      it('should insert analytics after LOAD_START', function* () {\n        resolver(config);\n        yield macroTask();\n        expect(parentEle.querySelector('amp-analytics')).to.be.null;\n        parentEle.layoutCallback();\n        //parentEle.signals().signal(CommonSignals.LOAD_START);\n        yield macroTask();\n        expect(parentEle.querySelector('amp-analytics')).to.not.be.null;\n      });","file":"unit/test-extension-analytics.js","skipped":false,"dir":"test"},{"name":"should insert analytics when config arrives late","suites":["useAnalyticsInSandbox","parent does NOT relayout, call in buildCallback"],"updatePoint":{"line":286,"column":58,"index":9493},"line":286,"code":"      it('should insert analytics when config arrives late', function* () {\n        parentEle.layoutCallback();\n        yield macroTask();\n        expect(parentEle.querySelector('amp-analytics')).to.be.null;\n        resolver(config);\n        yield macroTask();\n        expect(parentEle.querySelector('amp-analytics')).to.not.be.null;\n      });","file":"unit/test-extension-analytics.js","skipped":false,"dir":"test"},{"name":"should remove analytics after UNLOAD","suites":["useAnalyticsInSandbox","parent does NOT relayout, call in buildCallback"],"updatePoint":{"line":294,"column":46,"index":9825},"line":294,"code":"      it('should remove analytics after UNLOAD', function* () {\n        resolver(config);\n        parentEle.layoutCallback();\n        yield macroTask();\n        expect(parentEle.querySelector('amp-analytics')).to.not.be.null;\n        parentEle.unlayoutCallback();\n        yield macroTask();\n        expect(parentEle.querySelector('amp-analytics')).to.be.null;\n      });","file":"unit/test-extension-analytics.js","skipped":false,"dir":"test"},{"name":"should NOT insert analytics after UNLOAD","suites":["useAnalyticsInSandbox","parent does NOT relayout, call in buildCallback"],"updatePoint":{"line":303,"column":50,"index":10199},"line":303,"code":"      it('should NOT insert analytics after UNLOAD', function* () {\n        parentEle.layoutCallback();\n        yield macroTask();\n        parentEle.unlayoutCallback();\n        yield macroTask();\n        resolver(config);\n        yield macroTask();\n        expect(parentEle.querySelector('amp-analytics')).to.be.null;\n      });","file":"unit/test-extension-analytics.js","skipped":false,"dir":"test"},{"name":"should insert and remove analytics","suites":["useAnalyticsInSandbox","parent does NOT relayout, call in layoutCallback"],"updatePoint":{"line":330,"column":44,"index":11202},"line":330,"code":"      it('should insert and remove analytics', function* () {\n        expect(parentEle.querySelector('amp-analytics')).to.be.null;\n        parentEle.layoutCallback();\n        yield macroTask();\n        expect(parentEle.querySelector('amp-analytics')).to.be.null;\n        resolver(config);\n        yield macroTask();\n        expect(parentEle.querySelector('amp-analytics')).to.not.be.null;\n        parentEle.unlayoutCallback();\n        yield macroTask();\n        expect(parentEle.querySelector('amp-analytics')).to.be.null;\n      });","file":"unit/test-extension-analytics.js","skipped":false,"dir":"test"},{"name":"should NOT insert analytics when relayout","suites":["useAnalyticsInSandbox","parent relayout, call in buildCallback"],"updatePoint":{"line":362,"column":51,"index":12437},"line":362,"code":"      it('should NOT insert analytics when relayout', function* () {\n        resolver(config);\n        parentEle.layoutCallback();\n        yield macroTask();\n        expect(parentEle.querySelector('amp-analytics')).to.not.be.null;\n        parentEle.unlayoutCallback();\n        yield macroTask();\n        expect(parentEle.querySelector('amp-analytics')).to.be.null;\n        parentEle.layoutCallback();\n        yield macroTask();\n        expect(parentEle.querySelector('amp-analytics')).to.be.null;\n      });","file":"unit/test-extension-analytics.js","skipped":false,"dir":"test"},{"name":"should NOT insert when config arrives at relayout","suites":["useAnalyticsInSandbox","parent relayout, call in buildCallback"],"updatePoint":{"line":374,"column":59,"index":12952},"line":374,"code":"      it('should NOT insert when config arrives at relayout', function* () {\n        parentEle.layoutCallback();\n        parentEle.unlayoutCallback();\n        yield macroTask();\n        parentEle.layoutCallback();\n        yield macroTask();\n        expect(parentEle.querySelector('amp-analytics')).to.be.null;\n        resolver(config);\n        yield macroTask();\n        expect(parentEle.querySelector('amp-analytics')).to.be.null;\n      });","file":"unit/test-extension-analytics.js","skipped":false,"dir":"test"},{"name":"should insert analytics when relayout","suites":["useAnalyticsInSandbox","parent relayout, call in layoutCallback"],"updatePoint":{"line":406,"column":47,"index":14134},"line":406,"code":"      it('should insert analytics when relayout', function* () {\n        parentEle.layoutCallback();\n        resolver(config);\n        yield macroTask();\n        let element = parentEle.querySelector('amp-analytics');\n        expect(element).to.not.be.null;\n        let script = element.querySelector('script');\n        expect(script.textContent).to.jsonEqual(JSON.stringify(config));\n        parentEle.unlayoutCallback();\n        yield macroTask();\n        expect(parentEle.querySelector('amp-analytics')).to.be.null;\n        parentEle.layoutCallback();\n        yield macroTask();\n        expect(parentEle.querySelector('amp-analytics')).to.be.null;\n        resolver(config2);\n        yield macroTask();\n        expect(parentEle.querySelector('amp-analytics')).to.not.be.null;\n        element = parentEle.querySelector('amp-analytics');\n        expect(element).to.not.be.null;\n        script = element.querySelector('script');\n        expect(script.textContent).to.jsonEqual(JSON.stringify(config2));\n      });","file":"unit/test-extension-analytics.js","skipped":false,"dir":"test"},{"name":"should only insert with latest config","suites":["useAnalyticsInSandbox","parent relayout, call in layoutCallback"],"updatePoint":{"line":428,"column":47,"index":15146},"line":428,"code":"      it('should only insert with latest config', function* () {\n        parentEle.layoutCallback();\n        yield macroTask();\n        const resolver1 = resolver;\n        parentEle.unlayoutCallback();\n        parentEle.layoutCallback();\n        yield macroTask();\n        const resolver2 = resolver;\n        resolver1(config);\n        resolver2(config2);\n        yield macroTask();\n        const element = parentEle.querySelector('amp-analytics');\n        expect(element).to.not.be.null;\n        const script = element.querySelector('script');\n        expect(script.textContent).to.jsonEqual(JSON.stringify(config2));\n      });","file":"unit/test-extension-analytics.js","skipped":false,"dir":"test"},{"name":"with local mode","suites":["get correct script source"],"updatePoint":{"line":14,"column":23,"index":654},"line":14,"code":"    it('with local mode', () => {\n      window.__AMP_MODE = {\n        rtvVersion: '123'\n      };\n      const script = calculateExtensionScriptUrl({\n        pathname: 'examples/ads.amp.html',\n        host: 'localhost:8000',\n        protocol: 'http:'\n      }, 'amp-ad', '0.1', true);\n      expect(script).to.equal('http://localhost:8000/dist/rtv/123/v0/amp-ad-0.1.js');\n    });","file":"unit/test-extension-script.js","skipped":false,"dir":"test"},{"name":"with remote mode","suites":["get correct script source"],"updatePoint":{"line":25,"column":24,"index":1031},"line":25,"code":"    it('with remote mode', () => {\n      window.__AMP_MODE = {\n        rtvVersion: '123'\n      };\n      const script = calculateExtensionScriptUrl({\n        pathname: 'examples/ads.amp.html',\n        host: 'localhost:8000',\n        protocol: 'http:'\n      }, 'amp-ad', '1.0', false);\n      expect(script).to.equal('https://cdn.ampproject.org/rtv/123/v0/amp-ad-1.0.js');\n    });","file":"unit/test-extension-script.js","skipped":false,"dir":"test"},{"name":"should allow no versions","suites":["get correct script source"],"updatePoint":{"line":36,"column":32,"index":1417},"line":36,"code":"    it('should allow no versions', () => {\n      window.__AMP_MODE = {\n        rtvVersion: '123'\n      };\n      const script = calculateExtensionScriptUrl({\n        pathname: 'examples/ads.amp.html',\n        host: 'localhost:8000',\n        protocol: 'http:'\n      }, 'no-version', /* version is empty but defined */'', true);\n      expect(script).to.equal('http://localhost:8000/dist/rtv/123/v0/no-version.js');\n    });","file":"unit/test-extension-script.js","skipped":false,"dir":"test"},{"name":"with local mode","suites":["get correct entry point source"],"updatePoint":{"line":56,"column":23,"index":2078},"line":56,"code":"    it('with local mode', () => {\n      const script = calculateEntryPointScriptUrl({\n        pathname: 'examples/ads.amp.html',\n        host: 'localhost:8000',\n        protocol: 'http:'\n      }, 'sw', true);\n      expect(script).to.equal('http://localhost:8000/dist/sw.js');\n    });","file":"unit/test-extension-script.js","skipped":false,"dir":"test"},{"name":"with remote mode","suites":["get correct entry point source"],"updatePoint":{"line":64,"column":24,"index":2363},"line":64,"code":"    it('with remote mode', () => {\n      window.__AMP_MODE = {\n        rtvVersion: '123'\n      };\n      const script = calculateEntryPointScriptUrl({\n        pathname: 'examples/ads.amp.html',\n        host: 'localhost:8000',\n        protocol: 'http:'\n      }, 'sw', /* isLocalDev */false);\n      expect(script).to.equal('https://cdn.ampproject.org/sw.js');\n    });","file":"unit/test-extension-script.js","skipped":false,"dir":"test"},{"name":"with remote mode & rtv","suites":["get correct entry point source"],"updatePoint":{"line":75,"column":30,"index":2734},"line":75,"code":"    it('with remote mode & rtv', () => {\n      window.__AMP_MODE = {\n        rtvVersion: '123'\n      };\n      const script = calculateEntryPointScriptUrl({\n        pathname: 'examples/ads.amp.html',\n        host: 'localhost:8000',\n        protocol: 'http:'\n      }, 'ww', /* isLocalDev */false, /* opt_rtv */true);\n      expect(script).to.equal('https://cdn.ampproject.org/rtv/123/ww.js');\n    });","file":"unit/test-extension-script.js","skipped":false,"dir":"test"},{"name":"non-RTV urls","suites":["get correct URL parts"],"updatePoint":{"line":88,"column":20,"index":3172},"line":88,"code":"    it('non-RTV urls', () => {\n      const urlParts = parseExtensionUrl('https://cdn.ampproject.org/v0/amp-ad-1.0.js');\n      expect(urlParts.extensionId).to.equal('amp-ad');\n      expect(urlParts.extensionVersion).to.equal('1.0');\n    });","file":"unit/test-extension-script.js","skipped":false,"dir":"test"},{"name":"RTV urls","suites":["get correct URL parts"],"updatePoint":{"line":93,"column":16,"index":3408},"line":93,"code":"    it('RTV urls', () => {\n      const urlParts = parseExtensionUrl('https://cdn.ampproject.org/rtv/123/v0/amp-ad-0.1.js');\n      expect(urlParts.extensionId).to.equal('amp-ad');\n      expect(urlParts.extensionVersion).to.equal('0.1');\n    });","file":"unit/test-extension-script.js","skipped":false,"dir":"test"},{"name":"extensions with \"latest\" version","suites":["get correct URL parts"],"updatePoint":{"line":98,"column":40,"index":3676},"line":98,"code":"    it('extensions with \"latest\" version', () => {\n      const urlParts = parseExtensionUrl('https://cdn.ampproject.org/v0/amp-ad-latest.js');\n      expect(urlParts.extensionId).to.equal('amp-ad');\n      expect(urlParts.extensionVersion).to.equal('latest');\n    });","file":"unit/test-extension-script.js","skipped":false,"dir":"test"},{"name":"extensions with .max suffix","suites":["get correct URL parts"],"updatePoint":{"line":103,"column":35,"index":3937},"line":103,"code":"    it('extensions with .max suffix', () => {\n      const urlParts = parseExtensionUrl('https://cdn.ampproject.org/v0/amp-ad-latest.max.js');\n      expect(urlParts.extensionId).to.equal('amp-ad');\n      expect(urlParts.extensionVersion).to.equal('latest');\n    });","file":"unit/test-extension-script.js","skipped":false,"dir":"test"},{"name":"returns null for non-extensions","suites":["get correct URL parts"],"updatePoint":{"line":108,"column":39,"index":4206},"line":108,"code":"    it('returns null for non-extensions', () => {\n      const urlParts = parseExtensionUrl('https://cdn.ampproject.org/v0.js');\n      expect(urlParts).to.be.null;\n    });","file":"unit/test-extension-script.js","skipped":false,"dir":"test"},{"name":"with local mode","suites":["get correct script source"],"updatePoint":{"line":124,"column":23,"index":4701},"line":124,"code":"    it('with local mode', () => {\n      window.__AMP_MODE = {\n        rtvVersion: '123',\n        esm: 1\n      };\n      const script = calculateExtensionScriptUrl({\n        pathname: 'examples/ads.amp.html',\n        host: 'localhost:8000',\n        protocol: 'http:'\n      }, 'amp-ad', '1.0', true);\n      expect(script).to.equal('http://localhost:8000/dist/rtv/123/v0/amp-ad-1.0.mjs');\n    });","file":"unit/test-extension-script.js","skipped":false,"dir":"test"},{"name":"with remote mode","suites":["get correct script source"],"updatePoint":{"line":136,"column":24,"index":5095},"line":136,"code":"    it('with remote mode', () => {\n      window.__AMP_MODE = {\n        rtvVersion: '123',\n        esm: 1\n      };\n      const script = calculateExtensionScriptUrl({\n        pathname: 'examples/ads.amp.html',\n        host: 'localhost:8000',\n        protocol: 'http:'\n      }, 'amp-ad', '0.1', false);\n      expect(script).to.equal('https://cdn.ampproject.org/rtv/123/v0/amp-ad-0.1.mjs');\n    });","file":"unit/test-extension-script.js","skipped":false,"dir":"test"},{"name":"should allow no versions","suites":["get correct script source"],"updatePoint":{"line":148,"column":32,"index":5498},"line":148,"code":"    it('should allow no versions', () => {\n      window.__AMP_MODE = {\n        rtvVersion: '123',\n        esm: 1\n      };\n      const script = calculateExtensionScriptUrl({\n        pathname: 'examples/ads.amp.html',\n        host: 'localhost:8000',\n        protocol: 'http:'\n      }, 'no-version', /* version is empty but defined */'', true);\n      expect(script).to.equal('http://localhost:8000/dist/rtv/123/v0/no-version.mjs');\n    });","file":"unit/test-extension-script.js","skipped":false,"dir":"test"},{"name":"with local mode","suites":["get correct entry point source"],"updatePoint":{"line":169,"column":23,"index":6176},"line":169,"code":"    it('with local mode', () => {\n      window.__AMP_MODE = {\n        esm: 1\n      };\n      const script = calculateEntryPointScriptUrl({\n        pathname: 'examples/ads.amp.html',\n        host: 'localhost:8000',\n        protocol: 'http:'\n      }, 'sw', true);\n      expect(script).to.equal('http://localhost:8000/dist/sw.mjs');\n    });","file":"unit/test-extension-script.js","skipped":false,"dir":"test"},{"name":"with remote mode","suites":["get correct entry point source"],"updatePoint":{"line":180,"column":24,"index":6514},"line":180,"code":"    it('with remote mode', () => {\n      window.__AMP_MODE = {\n        rtvVersion: '123',\n        esm: 1\n      };\n      const script = calculateEntryPointScriptUrl({\n        pathname: 'examples/ads.amp.html',\n        host: 'localhost:8000',\n        protocol: 'http:'\n      }, 'sw', /* isLocalDev */false);\n      expect(script).to.equal('https://cdn.ampproject.org/sw.mjs');\n    });","file":"unit/test-extension-script.js","skipped":false,"dir":"test"},{"name":"with remote mode & rtv","suites":["get correct entry point source"],"updatePoint":{"line":192,"column":30,"index":6902},"line":192,"code":"    it('with remote mode & rtv', () => {\n      window.__AMP_MODE = {\n        rtvVersion: '123',\n        esm: 1\n      };\n      const script = calculateEntryPointScriptUrl({\n        pathname: 'examples/ads.amp.html',\n        host: 'localhost:8000',\n        protocol: 'http:'\n      }, 'ww', /* isLocalDev */false, /* opt_rtv */true);\n      expect(script).to.equal('https://cdn.ampproject.org/rtv/123/ww.mjs');\n    });","file":"unit/test-extension-script.js","skipped":false,"dir":"test"},{"name":"non-RTV urls","suites":["get correct URL parts"],"updatePoint":{"line":206,"column":20,"index":7357},"line":206,"code":"    it('non-RTV urls', () => {\n      window.__AMP_MODE = {\n        esm: 1\n      };\n      const urlParts = parseExtensionUrl('https://cdn.ampproject.org/v0/amp-ad-1.0.mjs');\n      expect(urlParts.extensionId).to.equal('amp-ad');\n      expect(urlParts.extensionVersion).to.equal('1.0');\n    });","file":"unit/test-extension-script.js","skipped":false,"dir":"test"},{"name":"RTV urls","suites":["get correct URL parts"],"updatePoint":{"line":214,"column":16,"index":7646},"line":214,"code":"    it('RTV urls', () => {\n      window.__AMP_MODE = {\n        esm: 1\n      };\n      const urlParts = parseExtensionUrl('https://cdn.ampproject.org/rtv/123/v0/amp-ad-0.1.mjs');\n      expect(urlParts.extensionId).to.equal('amp-ad');\n      expect(urlParts.extensionVersion).to.equal('0.1');\n    });","file":"unit/test-extension-script.js","skipped":false,"dir":"test"},{"name":"extensions with \"latest\" version","suites":["get correct URL parts"],"updatePoint":{"line":222,"column":40,"index":7967},"line":222,"code":"    it('extensions with \"latest\" version', () => {\n      window.__AMP_MODE = {\n        esm: 1\n      };\n      const urlParts = parseExtensionUrl('https://cdn.ampproject.org/v0/amp-ad-latest.mjs');\n      expect(urlParts.extensionId).to.equal('amp-ad');\n      expect(urlParts.extensionVersion).to.equal('latest');\n    });","file":"unit/test-extension-script.js","skipped":false,"dir":"test"},{"name":"extensions with .max suffix","suites":["get correct URL parts"],"updatePoint":{"line":230,"column":35,"index":8281},"line":230,"code":"    it('extensions with .max suffix', () => {\n      window.__AMP_MODE = {\n        esm: 1\n      };\n      const urlParts = parseExtensionUrl('https://cdn.ampproject.org/v0/amp-ad-latest.max.mjs');\n      expect(urlParts.extensionId).to.equal('amp-ad');\n      expect(urlParts.extensionVersion).to.equal('latest');\n    });","file":"unit/test-extension-script.js","skipped":false,"dir":"test"},{"name":"with local mode","suites":["get correct file location"],"updatePoint":{"line":250,"column":23,"index":8925},"line":250,"code":"    it('with local mode', () => {\n      window.__AMP_MODE = {\n        rtvVersion: '123'\n      };\n      const script = calculateExtensionFileUrl(window, {\n        pathname: 'examples/ads.amp.html',\n        host: 'localhost:8000',\n        protocol: 'http:'\n      }, 'some-file.json', true);\n      expect(script).to.equal('http://localhost:8000/dist/rtv/123/v0/some-file.json');\n    });","file":"unit/test-extension-script.js","skipped":false,"dir":"test"},{"name":"with remote mode","suites":["get correct file location"],"updatePoint":{"line":261,"column":24,"index":9310},"line":261,"code":"    it('with remote mode', () => {\n      window.__AMP_MODE = {\n        rtvVersion: '123'\n      };\n      const script = calculateExtensionFileUrl(window, {\n        pathname: 'examples/ads.amp.html',\n        host: 'localhost:8000',\n        protocol: 'http:'\n      }, 'some-file.json', false);\n      expect(script).to.equal('https://cdn.ampproject.org/rtv/123/v0/some-file.json');\n    });","file":"unit/test-extension-script.js","skipped":false,"dir":"test"},{"name":"should find a specific version","suites":["get correct file location"],"updatePoint":{"line":324,"column":36,"index":11691},"line":324,"code":"  it('should find a specific version', () => {\n    expect(ids(getExtensionScripts(win, 'amp-ext1', '0.1', false))).to.deep.equal(['amp-ext1-0_1']);\n    expect(ids(getExtensionScripts(win, 'amp-ext1', '0.2', false))).to.deep.equal(['amp-ext1-0_2']);\n    expect(ids(getExtensionScripts(win, 'amp-ext2', '0.1', false))).to.deep.equal([]);\n  });","file":"unit/test-extension-script.js","skipped":false,"dir":"test"},{"name":"should find a specific version with latest","suites":["get correct file location"],"updatePoint":{"line":329,"column":48,"index":12045},"line":329,"code":"  it('should find a specific version with latest', () => {\n    expect(ids(getExtensionScripts(win, 'amp-ext1', '0.1', true))).to.deep.equal(['amp-ext1-0_1', 'amp-ext1-latest']);\n    expect(ids(getExtensionScripts(win, 'amp-ext1', '0.2', true))).to.deep.equal(['amp-ext1-latest', 'amp-ext1-0_2']);\n    expect(ids(getExtensionScripts(win, 'amp-ext2', '0.1', true))).to.deep.equal(['amp-ext2-latest']);\n  });","file":"unit/test-extension-script.js","skipped":false,"dir":"test"},{"name":"should find a specific version with ssr-css query param","suites":["get correct file location"],"updatePoint":{"line":334,"column":61,"index":12464},"line":334,"code":"  it('should find a specific version with ssr-css query param', () => {\n    expect(ids(getExtensionScripts(win, 'amp-ext3', '0.3', true))).to.deep.equal(['amp-ext3-with-ssr-css-query-param-on', 'amp-ext3-with-ssr-css-query-param-off']);\n  });","file":"unit/test-extension-script.js","skipped":false,"dir":"test"},{"name":"should find an intermediate extension","suites":["get correct file location"],"updatePoint":{"line":337,"column":43,"index":12689},"line":337,"code":"  it('should find an intermediate extension', () => {\n    expect(ids(getExtensionScripts(win, '_intermediate', '', false))).to.deep.equal(['intermediate1']);\n  });","file":"unit/test-extension-script.js","skipped":false,"dir":"test"},{"name":"should ignore an inserted script","suites":["get correct file location"],"updatePoint":{"line":340,"column":38,"index":12848},"line":340,"code":"  it('should ignore an inserted script', () => {\n    expect(ids(getExtensionScripts(win, 'amp-ext1', '0.1', true, /* includeInserted */false))).to.deep.equal(['amp-ext1-0_1']);\n  });","file":"unit/test-extension-script.js","skipped":false,"dir":"test"},{"name":"should register successfully without promise","suites":[],"updatePoint":{"line":34,"column":52,"index":1404},"line":34,"code":"    it('should register successfully without promise', () => {\n      const amp = {};\n      let factoryExecuted = false;\n      let currentHolder;\n      extensions.registerExtension('amp-ext', '0.1', true, arg => {\n        expect(factoryExecuted).to.be.false;\n        expect(arg).to.equal(amp);\n        expect(extensions.currentExtensionId_).to.equal('amp-ext');\n        currentHolder = extensions.getCurrentExtensionHolder_();\n        factoryExecuted = true;\n      }, amp);\n      expect(factoryExecuted).to.be.true;\n      expect(extensions.currentExtensionId_).to.be.null;\n      const holder = extensions.extensions_['amp-ext:0.1'];\n      expect(extensions.getExtensionHolder_('amp-ext', '0.1')).to.equal(holder);\n      expect(currentHolder).to.equal(holder);\n      expect(holder.loaded).to.be.true;\n      expect(holder.error).to.be.undefined;\n      expect(holder.resolve).to.be.undefined;\n      expect(holder.reject).to.be.undefined;\n      expect(holder.promise).to.be.undefined;\n      expect(holder.scriptPresent).to.be.undefined;\n\n      // However, the promise is created lazily.\n      return extensions.waitForExtension('amp-ext', '0.1').then(extension => {\n        expect(extension).to.exist;\n        expect(extension.elements).to.exist;\n      });\n    });","file":"unit/test-extensions.js","skipped":false,"dir":"test"},{"name":"should register only once","suites":[],"updatePoint":{"line":63,"column":33,"index":2645},"line":63,"code":"    it('should register only once', () => {\n      const amp = {};\n      const factoryStub = env.sandbox.stub();\n      extensions.registerExtension('amp-ext', '0.1', true, factoryStub, amp);\n      expect(factoryStub).to.be.calledOnce;\n      const holder1 = extensions.extensions_['amp-ext:0.1'];\n      expect(extensions.getExtensionHolder_('amp-ext', '0.1')).to.equal(holder1);\n\n      // Try register again.\n      extensions.registerExtension('amp-ext', '0.1', true, factoryStub, amp);\n      expect(factoryStub).to.be.calledOnce; // no change.\n      const holder2 = extensions.extensions_['amp-ext:0.1'];\n      expect(holder2).to.equal(holder1);\n    });","file":"unit/test-extensions.js","skipped":false,"dir":"test"},{"name":"should register successfully with promise","suites":[],"updatePoint":{"line":77,"column":49,"index":3314},"line":77,"code":"    it('should register successfully with promise', () => {\n      const promise = extensions.waitForExtension('amp-ext', '0.1');\n      extensions.registerExtension('amp-ext', '0.1', true, () => {}, {});\n      expect(extensions.currentExtensionId_).to.be.null;\n      const holder = extensions.extensions_['amp-ext:0.1'];\n      expect(holder.loaded).to.be.true;\n      expect(holder.error).to.be.undefined;\n      expect(holder.resolve).to.exist;\n      expect(holder.reject).to.exist;\n      expect(holder.promise).to.exist;\n      return promise.then(extension => {\n        expect(extension).to.exist;\n        expect(extension.elements).to.exist;\n      });\n    });","file":"unit/test-extensions.js","skipped":false,"dir":"test"},{"name":"should fail registration without promise","suites":[],"updatePoint":{"line":92,"column":48,"index":3973},"line":92,"code":"    it('should fail registration without promise', () => {\n      expect(() => {\n        extensions.registerExtension('amp-ext', '0.1', true, () => {\n          throw new Error('intentional');\n        }, {});\n      }).to.throw(/intentional/);\n      expect(extensions.currentExtensionId_).to.be.null;\n      const holder = extensions.extensions_['amp-ext:0.1'];\n      expect(extensions.getExtensionHolder_('amp-ext', '0.1')).to.equal(holder);\n      expect(holder.error).to.exist;\n      expect(holder.error.message).to.equal('intentional');\n      expect(holder.loaded).to.be.undefined;\n      expect(holder.resolve).to.be.undefined;\n      expect(holder.reject).to.be.undefined;\n      expect(holder.promise).to.be.undefined;\n\n      // However, the promise is created lazily.\n      return extensions.waitForExtension('amp-ext', '0.1').then(() => {\n        throw new Error('must have been rejected');\n      }, reason => {\n        expect(reason.message).to.equal('intentional');\n      });\n    });","file":"unit/test-extensions.js","skipped":false,"dir":"test"},{"name":"should fail registration with promise","suites":[],"updatePoint":{"line":115,"column":45,"index":4957},"line":115,"code":"    it('should fail registration with promise', () => {\n      const promise = extensions.waitForExtension('amp-ext', '0.1');\n      expect(() => {\n        extensions.registerExtension('amp-ext', '0.1', true, () => {\n          throw new Error('intentional');\n        }, {});\n      }).to.throw(/intentional/);\n      expect(extensions.currentExtensionId_).to.be.null;\n      const holder = extensions.extensions_['amp-ext:0.1'];\n      expect(holder.error).to.exist;\n      expect(holder.error.message).to.equal('intentional');\n      expect(holder.loaded).to.be.undefined;\n      expect(holder.resolve).to.exist;\n      expect(holder.reject).to.exist;\n      expect(holder.promise).to.exist;\n      expect(promise).to.eventually.equal(holder.promise);\n      return extensions.waitForExtension('amp-ext', '0.1').then(() => {\n        throw new Error('must have been rejected');\n      }, reason => {\n        expect(reason.message).to.equal('intentional');\n      });\n    });","file":"unit/test-extensions.js","skipped":false,"dir":"test"},{"name":"should redirect \"latest\" holder when exists","suites":[],"updatePoint":{"line":137,"column":51,"index":5923},"line":137,"code":"    it('should redirect \"latest\" holder when exists', async () => {\n      const iniPromise = extensions.waitForExtension('amp-ext', 'latest');\n      const iniHolder = extensions.getExtensionHolder_('amp-ext', 'latest');\n      expect(iniHolder.latest).to.be.true;\n      const amp = {};\n      let factoryExecuted = false;\n      let currentHolder;\n      extensions.registerExtension('amp-ext', '0.2', true, arg => {\n        expect(factoryExecuted).to.be.false;\n        expect(arg).to.equal(amp);\n        expect(extensions.currentExtensionId_).to.equal('amp-ext');\n        currentHolder = extensions.getCurrentExtensionHolder_();\n        factoryExecuted = true;\n      }, amp);\n      expect(factoryExecuted).to.be.true;\n      expect(extensions.currentExtensionId_).to.be.null;\n      const versionHolder = extensions.getExtensionHolder_('amp-ext', '0.2');\n      const latestHolder = extensions.getExtensionHolder_('amp-ext', 'latest');\n      expect(iniHolder).to.not.equal(versionHolder);\n      expect(latestHolder).to.equal(versionHolder);\n      expect(currentHolder).to.equal(versionHolder);\n      expect(versionHolder.latest).to.be.true;\n\n      // \"auto\" is inherited from the \"latest\" holder.\n      expect(versionHolder.auto).to.be.false;\n      expect(versionHolder.loaded).to.be.true;\n      expect(versionHolder.error).to.be.undefined;\n\n      // However, the promise is created lazily.\n      const extension = await extensions.waitForExtension('amp-ext', '0.2');\n      expect(extension).to.exist;\n      expect(extension.elements).to.exist;\n      await extensions.waitForExtension('amp-ext', 'latest');\n\n      // Initial \"latest\" promise has been resolved as well.\n      await iniPromise;\n    });","file":"unit/test-extensions.js","skipped":false,"dir":"test"},{"name":"should create \"latest\" when does not exists","suites":[],"updatePoint":{"line":174,"column":51,"index":7618},"line":174,"code":"    it('should create \"latest\" when does not exists', async () => {\n      const amp = {};\n      let factoryExecuted = false;\n      let currentHolder;\n      extensions.registerExtension('amp-ext', '0.2', true, arg => {\n        expect(factoryExecuted).to.be.false;\n        expect(arg).to.equal(amp);\n        expect(extensions.currentExtensionId_).to.equal('amp-ext');\n        currentHolder = extensions.getCurrentExtensionHolder_();\n        factoryExecuted = true;\n      }, amp);\n      expect(factoryExecuted).to.be.true;\n      expect(extensions.currentExtensionId_).to.be.null;\n      const versionHolder = extensions.getExtensionHolder_('amp-ext', '0.2');\n      const latestHolder = extensions.getExtensionHolder_('amp-ext', 'latest');\n      expect(latestHolder).to.equal(versionHolder);\n      expect(currentHolder).to.equal(versionHolder);\n      expect(versionHolder.latest).to.be.true;\n\n      // \"auto\" is defaulted to true.\n      expect(versionHolder.auto).to.be.true;\n      expect(versionHolder.loaded).to.be.true;\n      expect(versionHolder.error).to.be.undefined;\n\n      // However, the promise is created lazily.\n      const extension = await extensions.waitForExtension('amp-ext', '0.2');\n      expect(extension).to.exist;\n      expect(extension.elements).to.exist;\n      const latest = await extensions.waitForExtension('amp-ext', 'latest');\n      expect(latest).to.equal(extension);\n    });","file":"unit/test-extensions.js","skipped":false,"dir":"test"},{"name":"should NOT create \"latest\" holder when not latest version","suites":[],"updatePoint":{"line":205,"column":65,"index":9032},"line":205,"code":"    it('should NOT create \"latest\" holder when not latest version', async () => {\n      const amp = {};\n      let factoryExecuted = false;\n      let currentHolder;\n      extensions.registerExtension('amp-ext', '0.2', false, arg => {\n        expect(factoryExecuted).to.be.false;\n        expect(arg).to.equal(amp);\n        expect(extensions.currentExtensionId_).to.equal('amp-ext');\n        currentHolder = extensions.getCurrentExtensionHolder_();\n        factoryExecuted = true;\n      }, amp);\n      expect(factoryExecuted).to.be.true;\n      expect(extensions.currentExtensionId_).to.be.null;\n      const versionHolder = extensions.getExtensionHolder_('amp-ext', '0.2');\n      expect(currentHolder).to.equal(versionHolder);\n      expect(versionHolder.latest).to.be.false;\n\n      // \"auto\" is defaulted to true.\n      expect(versionHolder.auto).to.be.true;\n      expect(versionHolder.loaded).to.be.true;\n      expect(versionHolder.error).to.be.undefined;\n\n      // However, the promise is created lazily.\n      const extension = await extensions.waitForExtension('amp-ext', '0.2');\n      expect(extension).to.exist;\n      expect(extension.elements).to.exist;\n\n      // \"latest\" was never created.\n      expect(extensions.extensions_['amp-ext:latest']).to.not.exist;\n    });","file":"unit/test-extensions.js","skipped":false,"dir":"test"},{"name":"should NOT redirect \"latest\" holder when not latest version","suites":[],"updatePoint":{"line":235,"column":67,"index":10306},"line":235,"code":"    it('should NOT redirect \"latest\" holder when not latest version', async () => {\n      const iniHolder = extensions.getExtensionHolder_('amp-ext', 'latest');\n      expect(iniHolder.latest).to.be.true;\n      const amp = {};\n      let factoryExecuted = false;\n      let currentHolder;\n      extensions.registerExtension('amp-ext', '0.2', false, arg => {\n        expect(factoryExecuted).to.be.false;\n        expect(arg).to.equal(amp);\n        expect(extensions.currentExtensionId_).to.equal('amp-ext');\n        currentHolder = extensions.getCurrentExtensionHolder_();\n        factoryExecuted = true;\n      }, amp);\n      expect(factoryExecuted).to.be.true;\n      expect(extensions.currentExtensionId_).to.be.null;\n      const versionHolder = extensions.getExtensionHolder_('amp-ext', '0.2');\n      expect(currentHolder).to.equal(versionHolder);\n      expect(versionHolder.latest).to.be.false;\n      expect(versionHolder.loaded).to.be.true;\n      expect(versionHolder.error).to.be.undefined;\n\n      // \"auto\" is defaulted to true.\n      expect(versionHolder.auto).to.be.true;\n\n      // However, the promise is created lazily.\n      const extension = await extensions.waitForExtension('amp-ext', '0.2');\n      expect(extension).to.exist;\n      expect(extension.elements).to.exist;\n\n      // \"latest\" was never created.\n      expect(extensions.extensions_['amp-ext:latest']).to.equal(iniHolder);\n      expect(iniHolder).to.not.equal(versionHolder);\n      expect(iniHolder.loaded).to.be.undefined;\n    });","file":"unit/test-extensions.js","skipped":false,"dir":"test"},{"name":"should install a doc factory from a \"latest\" version","suites":[],"updatePoint":{"line":269,"column":60,"index":11801},"line":269,"code":"    it('should install a doc factory from a \"latest\" version', async () => {\n      const shadowRoot = document.createDocumentFragment();\n      const ampdoc = new AmpDocShadow(win, 'https://a.org/', shadowRoot);\n      const promise = extensions.installExtensionInDoc(ampdoc, 'amp-ext', 'latest');\n      const docFactoryStub = env.sandbox.stub();\n      const amp = {};\n      let factoryExecuted = false;\n      extensions.registerExtension('amp-ext', '0.2', true, () => {\n        extensions.addDocFactory(docFactoryStub);\n        factoryExecuted = true;\n      }, amp);\n      expect(factoryExecuted).to.be.true;\n      await promise;\n      expect(docFactoryStub).to.be.calledOnce.calledWith(ampdoc);\n    });","file":"unit/test-extensions.js","skipped":false,"dir":"test"},{"name":"should log on timeout","suites":[],"updatePoint":{"line":284,"column":29,"index":12473},"line":284,"code":"    it('should log on timeout', async () => {\n      expectAsyncConsoleError(/Waited over/);\n      timeoutCallback = null;\n      let promiseCompleted = false;\n      extensions.waitForExtension('amp-ext', '0.1').then(() => promiseCompleted = true, () => promiseCompleted = true);\n      expect(timeoutCallback).to.be.a('function');\n      timeoutCallback();\n      await new Promise(setTimeout);\n      expect(promiseCompleted).to.be.false; // Still waiting for extension to load.\n    });","file":"unit/test-extensions.js","skipped":false,"dir":"test"},{"name":"should add element in registration","suites":[],"updatePoint":{"line":295,"column":42,"index":12970},"line":295,"code":"    it('should add element in registration', () => {\n      const ctor = function () {};\n      ctor.requiresShadowDom = () => false;\n      extensions.registerExtension('amp-ext', '0.1', true, () => {\n        extensions.addElement('e1', ctor);\n      }, {});\n      return extensions.waitForExtension('amp-ext', '0.1').then(extension => {\n        expect(extension.elements['e1']).to.exist;\n        expect(extension.elements['e1'].implementationClass).to.equal(ctor);\n      });\n    });","file":"unit/test-extensions.js","skipped":false,"dir":"test"},{"name":"should add element out of registration","suites":[],"updatePoint":{"line":306,"column":46,"index":13455},"line":306,"code":"    it('should add element out of registration', () => {\n      const ctor = function () {};\n      allowConsoleError(() => extensions.addElement('e1', ctor));\n      expect(Object.keys(extensions.extensions_)).to.deep.equal(['_UNKNOWN_:']);\n      const unknown = extensions.extensions_['_UNKNOWN_:'];\n      expect(unknown.extension.elements['e1']).to.exist;\n      expect(unknown.extension.elements['e1'].implementationClass).to.equal(ctor);\n    });","file":"unit/test-extensions.js","skipped":false,"dir":"test"},{"name":"should add template in registration","suites":[],"updatePoint":{"line":314,"column":43,"index":13899},"line":314,"code":"    it('should add template in registration', async () => {\n      const ampdoc = Services.ampdocServiceFor(win).getSingleDoc();\n      installTemplatesServiceForDoc(ampdoc);\n      const templates = Services.templatesForDoc(ampdoc);\n      const ctor = function () {};\n      extensions.registerExtension('amp-ext', '0.1', true, () => {\n        extensions.addTemplate('e1', ctor);\n      }, {});\n      await extensions.waitForExtension('amp-ext', '0.1');\n      const holder = extensions.getExtensionHolder_('amp-ext', '0.1');\n      expect(holder.docFactories).to.have.length(1);\n      const implClass = await getTemplateClassForTesting(templates, 'e1');\n      expect(implClass).to.equal(ctor);\n    });","file":"unit/test-extensions.js","skipped":false,"dir":"test"},{"name":"should add element out of registration","suites":[],"updatePoint":{"line":328,"column":46,"index":14599},"line":328,"code":"    it('should add element out of registration', () => {\n      const ampdoc = Services.ampdocServiceFor(win).getSingleDoc();\n      installTemplatesServiceForDoc(ampdoc);\n      const ctor = function () {};\n      allowConsoleError(() => extensions.addTemplate('e1', ctor));\n      expect(Object.keys(extensions.extensions_)).to.deep.equal(['_UNKNOWN_:']);\n    });","file":"unit/test-extensions.js","skipped":false,"dir":"test"},{"name":"should install template in shadow doc","suites":[],"updatePoint":{"line":335,"column":45,"index":14959},"line":335,"code":"    it('should install template in shadow doc', async () => {\n      env.sandbox.stub(Services.ampdocServiceFor(win), 'isSingleDoc').callsFake(() => false);\n\n      // Resolve the promise.\n      const ctor = function () {};\n      extensions.registerExtension('amp-test', '0.2', true, () => {\n        extensions.addTemplate('amp-test', ctor);\n      }, {});\n\n      // Install into shadow doc.\n      const shadowRoot = document.createDocumentFragment();\n      const ampdoc = new AmpDocShadow(win, 'https://a.org/', shadowRoot);\n      installTemplatesServiceForDoc(ampdoc);\n      const promise = extensions.installExtensionsInDoc(ampdoc, [{\n        extensionId: 'amp-test',\n        extensionVersion: '0.2'\n      }]);\n\n      // Extension is immediately declared.\n      expect(ampdoc.declaresExtension('amp-test', '0.2')).to.be.true;\n      await promise;\n      const templates = Services.templatesForDoc(ampdoc);\n      const implClass = await getTemplateClassForTesting(templates, 'amp-test');\n      expect(implClass).to.equal(ctor);\n    });","file":"unit/test-extensions.js","skipped":false,"dir":"test"},{"name":"should install auto undeclared elements for single-doc","suites":[],"updatePoint":{"line":360,"column":62,"index":16010},"line":360,"code":"    it('should install auto undeclared elements for single-doc', () => {\n      const ampdoc = Services.ampdocServiceFor(win).getSingleDoc();\n      expect(win.__AMP_EXTENDED_ELEMENTS && win.__AMP_EXTENDED_ELEMENTS['amp-test']).to.be.undefined;\n      expect(win.__AMP_EXTENDED_ELEMENTS && win.__AMP_EXTENDED_ELEMENTS['amp-test-sub']).to.be.undefined;\n      expect(win.customElements.elements['amp-test']).to.not.exist;\n\n      // Resolve the promise.\n      extensions.registerExtension('amp-test', '0.1', true, () => {\n        extensions.addElement('amp-test', AmpTest);\n        extensions.addElement('amp-test-sub', AmpTestSub);\n      }, {});\n      expect(win.__AMP_EXTENDED_ELEMENTS['amp-test']).to.equal(AmpTest);\n      expect(win.__AMP_EXTENDED_ELEMENTS['amp-test-sub']).to.equal(AmpTestSub);\n      expect(win.customElements.elements['amp-test']).to.exist;\n      expect(ampdoc.declaresExtension('amp-test')).to.be.false;\n    });","file":"unit/test-extensions.js","skipped":false,"dir":"test"},{"name":"should skip non-auto undeclared elements for single-doc","suites":[],"updatePoint":{"line":376,"column":63,"index":16941},"line":376,"code":"    it('should skip non-auto undeclared elements for single-doc', () => {\n      const ampdoc = Services.ampdocServiceFor(win).getSingleDoc();\n      expect(win.__AMP_EXTENDED_ELEMENTS && win.__AMP_EXTENDED_ELEMENTS['amp-test']).to.be.undefined;\n      expect(win.__AMP_EXTENDED_ELEMENTS && win.__AMP_EXTENDED_ELEMENTS['amp-test-sub']).to.be.undefined;\n      expect(win.customElements.elements['amp-test']).to.not.exist;\n\n      // Manually preload extension, which would make it non-auto.\n      extensions.preloadExtension('amp-test');\n\n      // Resolve the promise.\n      extensions.registerExtension('amp-test', '0.1', true, () => {\n        extensions.addElement('amp-test', AmpTest);\n        extensions.addElement('amp-test-sub', AmpTestSub);\n      }, {});\n      expect(win.__AMP_EXTENDED_ELEMENTS && win.__AMP_EXTENDED_ELEMENTS['amp-test']).to.be.undefined;\n      expect(win.__AMP_EXTENDED_ELEMENTS && win.__AMP_EXTENDED_ELEMENTS['amp-test-sub']).to.be.undefined;\n      expect(win.customElements.elements['amp-test']).to.not.exist;\n      expect(ampdoc.declaresExtension('amp-test')).to.be.false;\n    });","file":"unit/test-extensions.js","skipped":false,"dir":"test"},{"name":"should install declared elements for single-doc","suites":[],"updatePoint":{"line":395,"column":55,"index":18038},"line":395,"code":"    it('should install declared elements for single-doc', () => {\n      const ampdoc = Services.ampdocServiceFor(win).getSingleDoc();\n      ampdoc.declareExtension('amp-test', '0.1');\n      expect(win.__AMP_EXTENDED_ELEMENTS && win.__AMP_EXTENDED_ELEMENTS['amp-test']).to.be.undefined;\n      expect(win.__AMP_EXTENDED_ELEMENTS && win.__AMP_EXTENDED_ELEMENTS['amp-test-sub']).to.be.undefined;\n      expect(win.customElements.elements['amp-test']).to.not.exist;\n      expect(win.__AMP_SERVICES['amp-test']).to.not.exist;\n\n      // Resolve the promise.\n      extensions.registerExtension('amp-test', '0.1', true, () => {\n        extensions.addElement('amp-test', AmpTest);\n        extensions.addElement('amp-test-sub', AmpTestSub);\n      }, {});\n      expect(win.__AMP_EXTENDED_ELEMENTS['amp-test']).to.equal(AmpTest);\n      expect(win.__AMP_EXTENDED_ELEMENTS['amp-test-sub']).to.equal(AmpTestSub);\n      expect(win.customElements.elements['amp-test']).to.exist;\n      expect(win.__AMP_SERVICES['amp-test']).to.exist;\n    });","file":"unit/test-extensions.js","skipped":false,"dir":"test"},{"name":"should install non-auto declared elements for single-doc","suites":[],"updatePoint":{"line":413,"column":64,"index":19070},"line":413,"code":"    it('should install non-auto declared elements for single-doc', () => {\n      const ampdoc = Services.ampdocServiceFor(win).getSingleDoc();\n      ampdoc.declareExtension('amp-test', '0.1');\n      expect(win.__AMP_EXTENDED_ELEMENTS && win.__AMP_EXTENDED_ELEMENTS['amp-test']).to.be.undefined;\n      expect(win.__AMP_EXTENDED_ELEMENTS && win.__AMP_EXTENDED_ELEMENTS['amp-test-sub']).to.be.undefined;\n      expect(win.customElements.elements['amp-test']).to.not.exist;\n\n      // Manually preload extension, which would make it non-auto.\n      extensions.preloadExtension('amp-test');\n\n      // Resolve the promise.\n      extensions.registerExtension('amp-test', '0.1', true, () => {\n        extensions.addElement('amp-test', AmpTest);\n        extensions.addElement('amp-test-sub', AmpTestSub);\n      }, {});\n      expect(win.__AMP_EXTENDED_ELEMENTS['amp-test']).to.equal(AmpTest);\n      expect(win.__AMP_EXTENDED_ELEMENTS['amp-test-sub']).to.equal(AmpTestSub);\n      expect(win.customElements.elements['amp-test']).to.exist;\n      expect(ampdoc.declaresExtension('amp-test')).to.be.true;\n    });","file":"unit/test-extensions.js","skipped":false,"dir":"test"},{"name":"should install elements in shadow doc","suites":[],"updatePoint":{"line":433,"column":45,"index":20147},"line":433,"code":"    it('should install elements in shadow doc', async () => {\n      env.sandbox.stub(Services.ampdocServiceFor(win), 'isSingleDoc').callsFake(() => false);\n      expect(win.__AMP_EXTENDED_ELEMENTS && win.__AMP_EXTENDED_ELEMENTS['amp-test']).to.be.undefined;\n      expect(win.__AMP_EXTENDED_ELEMENTS && win.__AMP_EXTENDED_ELEMENTS['amp-test-sub']).to.be.undefined;\n      expect(win.customElements.elements['amp-test']).to.not.exist;\n\n      // Resolve the promise.\n      extensions.registerExtension('amp-test', '0.2', true, () => {\n        extensions.addElement('amp-test', AmpTest);\n        extensions.addElement('amp-test-sub', AmpTestSub);\n      }, {});\n      expect(win.__AMP_EXTENDED_ELEMENTS && win.__AMP_EXTENDED_ELEMENTS['amp-test']).to.be.undefined;\n      expect(win.__AMP_EXTENDED_ELEMENTS && win.__AMP_EXTENDED_ELEMENTS['amp-test-sub']).to.be.undefined;\n      expect(win.customElements.elements['amp-test']).to.not.exist;\n\n      // Install into shadow doc.\n      const shadowRoot = document.createDocumentFragment();\n      installRuntimeStylesTo(shadowRoot);\n      const ampdoc = new AmpDocShadow(win, 'https://a.org/', shadowRoot);\n      const promise = extensions.installExtensionsInDoc(ampdoc, [{\n        extensionId: 'amp-test',\n        extensionVersion: '0.2'\n      }]);\n\n      // Extension is immediately declared.\n      expect(ampdoc.declaresExtension('amp-test', '0.2')).to.be.true;\n      await promise;\n\n      // Resolved later.\n      expect(win.__AMP_EXTENDED_ELEMENTS['amp-test']).to.equal(AmpTest);\n      expect(win.__AMP_EXTENDED_ELEMENTS['amp-test-sub']).to.equal(AmpTestSub);\n    });","file":"unit/test-extensions.js","skipped":false,"dir":"test"},{"name":"should add doc factory in registration","suites":[],"updatePoint":{"line":465,"column":46,"index":21757},"line":465,"code":"    it('should add doc factory in registration', () => {\n      const factory = function () {};\n      extensions.registerExtension('amp-ext', '0.1', true, () => {\n        extensions.addDocFactory(factory);\n      }, {});\n      const holder = extensions.getExtensionHolder_('amp-ext', '0.1');\n      expect(holder.docFactories).to.exist;\n      expect(holder.docFactories).to.have.length(1);\n      expect(holder.docFactories[0]).to.equal(factory);\n    });","file":"unit/test-extensions.js","skipped":false,"dir":"test"},{"name":"should add doc factory out of registration","suites":[],"updatePoint":{"line":475,"column":50,"index":22212},"line":475,"code":"    it('should add doc factory out of registration', () => {\n      const factory = function () {};\n      allowConsoleError(() => extensions.addDocFactory(factory));\n      const holder = extensions.getExtensionHolder_('_UNKNOWN_', '');\n      expect(holder.docFactories).to.exist;\n      expect(holder.docFactories).to.have.length(1);\n      expect(holder.docFactories[0]).to.equal(factory);\n    });","file":"unit/test-extensions.js","skipped":false,"dir":"test"},{"name":"should install all doc factories to shadow doc","suites":[],"line":485,"code":"    it.skip('should install all doc factories to shadow doc', async () => {","file":"unit/test-extensions.js","skipped":true,"dir":"test"},{"name":"should add service factory in registration","suites":[],"updatePoint":{"line":510,"column":50,"index":23736},"line":510,"code":"    it('should add service factory in registration', () => {\n      const factory = function () {};\n      extensions.registerExtension('amp-ext', '0.1', true, () => {\n        extensions.addService('service1', factory);\n      }, {});\n      const holder = extensions.getExtensionHolder_('amp-ext', '0.1');\n      expect(holder.extension.services).to.exist;\n      expect(holder.extension.services).to.have.length(1);\n      expect(holder.extension.services[0]).to.deep.equal({\n        serviceName: 'service1',\n        serviceClass: factory\n      });\n    });","file":"unit/test-extensions.js","skipped":false,"dir":"test"},{"name":"should add service factory out of registration","suites":[],"updatePoint":{"line":523,"column":54,"index":24292},"line":523,"code":"    it('should add service factory out of registration', () => {\n      const factory = function () {};\n      allowConsoleError(() => extensions.addService('service1', factory));\n      const holder = extensions.getExtensionHolder_('_UNKNOWN_', '');\n      expect(holder.extension.services).to.exist;\n      expect(holder.extension.services).to.have.length(1);\n      expect(holder.extension.services[0]).to.deep.equal({\n        serviceName: 'service1',\n        serviceClass: factory\n      });\n    });","file":"unit/test-extensions.js","skipped":false,"dir":"test"},{"name":"should install auto undeclared services for single-doc","suites":[],"updatePoint":{"line":534,"column":62,"index":24797},"line":534,"code":"    it('should install auto undeclared services for single-doc', () => {\n      const ampdoc = Services.ampdocServiceFor(win).getSingleDoc();\n      const factory1Spy = env.sandbox.spy();\n      const factory2Spy = env.sandbox.spy();\n      const factory1 = function () {\n        factory1Spy();\n        return {\n          a: 1\n        };\n      };\n      const factory2 = function () {\n        factory2Spy();\n        return {\n          a: 2\n        };\n      };\n\n      // Resolve the promise.\n      extensions.registerExtension('amp-test', '0.1', true, () => {\n        extensions.addService('service1', factory1);\n        extensions.addService('service2', factory2);\n      }, {});\n      expect(ampdoc.declaresExtension('amp-test')).to.be.false;\n      expect(factory1Spy).to.be.calledOnce;\n      expect(factory2Spy).to.be.calledOnce;\n      expect(getServiceForDoc(ampdoc, 'service1').a).to.equal(1);\n      expect(getServiceForDoc(ampdoc, 'service2').a).to.equal(2);\n    });","file":"unit/test-extensions.js","skipped":false,"dir":"test"},{"name":"should skip non-auto undeclared services for single-doc","suites":[],"updatePoint":{"line":562,"column":63,"index":25764},"line":562,"code":"    it('should skip non-auto undeclared services for single-doc', () => {\n      const ampdoc = Services.ampdocServiceFor(win).getSingleDoc();\n      const factory1 = env.sandbox.spy();\n      const factory2 = env.sandbox.spy();\n\n      // Manually preload extension, which would make it non-auto.\n      extensions.preloadExtension('amp-test');\n\n      // Resolve the promise.\n      extensions.registerExtension('amp-test', '0.1', true, () => {\n        extensions.addService('service1', factory1);\n        extensions.addService('service2', factory2);\n      }, {});\n      expect(ampdoc.declaresExtension('amp-test')).to.be.false;\n      expect(factory1).to.be.not.called;\n      expect(factory2).to.be.not.called;\n      allowConsoleError(() => {\n        expect(() => getServiceForDoc(ampdoc, 'service1')).to.throw(/to be registered/);\n        expect(() => getServiceForDoc(ampdoc, 'service2')).to.throw(/to be registered/);\n      });\n    });","file":"unit/test-extensions.js","skipped":false,"dir":"test"},{"name":"should install declared services for single-doc","suites":[],"updatePoint":{"line":583,"column":55,"index":26690},"line":583,"code":"    it('should install declared services for single-doc', () => {\n      const ampdoc = Services.ampdocServiceFor(win).getSingleDoc();\n      ampdoc.declareExtension('amp-test', '0.1');\n      const factory1Spy = env.sandbox.spy();\n      const factory2Spy = env.sandbox.spy();\n      const factory1 = function () {\n        factory1Spy();\n        return {\n          a: 1\n        };\n      };\n      const factory2 = function () {\n        factory2Spy();\n        return {\n          a: 2\n        };\n      };\n\n      // Resolve the promise.\n      extensions.registerExtension('amp-test', '0.1', true, () => {\n        extensions.addService('service1', factory1);\n        extensions.addService('service2', factory2);\n      }, {});\n      expect(factory1Spy).to.be.calledOnce;\n      expect(factory2Spy).to.be.calledOnce;\n      expect(getServiceForDoc(ampdoc, 'service1').a).to.equal(1);\n      expect(getServiceForDoc(ampdoc, 'service2').a).to.equal(2);\n    });","file":"unit/test-extensions.js","skipped":false,"dir":"test"},{"name":"should install all services to doc","suites":[],"line":613,"code":"    it.skip('should install all services to doc', async () => {","file":"unit/test-extensions.js","skipped":true,"dir":"test"},{"name":"should load extension class via load extension","suites":[],"updatePoint":{"line":643,"column":54,"index":28924},"line":643,"code":"    it('should load extension class via load extension', () => {\n      const ctor = function () {};\n      ctor.requiresShadowDom = () => false;\n      extensions.registerExtension('amp-ext', '0.1', true, () => {\n        extensions.addElement('amp-ext', ctor);\n      }, {});\n      return extensions.loadElementClass('amp-ext').then(elementClass => {\n        expect(elementClass).to.equal(ctor);\n      });\n    });","file":"unit/test-extensions.js","skipped":false,"dir":"test"},{"name":"should keep awaiting promise through reload","suites":[],"updatePoint":{"line":653,"column":51,"index":29332},"line":653,"code":"    it('should keep awaiting promise through reload', () => {\n      const script = document.createElement('script');\n      script.setAttribute('custom-element', 'amp-ext');\n      script.setAttribute('src', 'https://cdn.ampproject.org/v0/amp-ext-0.1.js');\n      win.document.head.appendChild(script);\n\n      // Start waiting immediately.\n      const initialPromise = extensions.preloadExtension('amp-ext');\n\n      // Reload the extension. E.g. due to the version mismatch.\n      const reloadPromise = extensions.reloadExtension('amp-ext', '0.1', true);\n\n      // Register extension.\n      extensions.registerExtension('amp-ext', '0.1', true, () => {}, {});\n      return reloadPromise.then(reloadedExtension => {\n        expect(reloadedExtension).to.exist;\n        return initialPromise.then(initialExtension => {\n          expect(initialExtension).to.equal(reloadedExtension);\n          const newScript = win.document.head.querySelector('script[custom-element=\"amp-ext\"]:not([i-amphtml-loaded-new-version])');\n          expect(newScript).to.exist;\n        });\n      });\n    });","file":"unit/test-extensions.js","skipped":false,"dir":"test"},{"name":"should support [custom-element] script","suites":["regular scripts"],"updatePoint":{"line":688,"column":48,"index":30801},"line":688,"code":"      it('should support [custom-element] script', () => {\n        const list = document.createElement('script');\n        list.setAttribute('custom-element', 'amp-list');\n        list.setAttribute('src', 'https://cdn.ampproject.org/v0/amp-list-0.2.js');\n        win.document.head.appendChild(list);\n        extensions.reloadExtension('amp-list', '0.2', true);\n        expect(list.getAttribute('i-amphtml-loaded-new-version')).to.equal('amp-list');\n        expect(extensions.preloadExtension).to.be.calledWith('amp-list', '0.2');\n      });","file":"unit/test-extensions.js","skipped":false,"dir":"test"},{"name":"should only support [custom-element] script of the right version","suites":["regular scripts"],"updatePoint":{"line":697,"column":74,"index":31366},"line":697,"code":"      it('should only support [custom-element] script of the right version', () => {\n        const list1 = document.createElement('script');\n        list1.setAttribute('custom-element', 'amp-list');\n        list1.setAttribute('src', 'https://cdn.ampproject.org/v0/amp-list-0.2.js');\n        win.document.head.appendChild(list1);\n        const list2 = document.createElement('script');\n        list2.setAttribute('custom-element', 'amp-list');\n        list2.setAttribute('src', 'https://cdn.ampproject.org/v0/amp-list-0.1.js');\n        win.document.head.appendChild(list2);\n        extensions.reloadExtension('amp-list', '0.2', true);\n        expect(list1.getAttribute('i-amphtml-loaded-new-version')).to.equal('amp-list');\n        expect(list2.getAttribute('i-amphtml-loaded-new-version')).to.be.null;\n        expect(extensions.preloadExtension).to.be.calledOnce.calledWith('amp-list', '0.2');\n      });","file":"unit/test-extensions.js","skipped":false,"dir":"test"},{"name":"should support \"latest\" version scripts","suites":["regular scripts"],"updatePoint":{"line":711,"column":49,"index":32245},"line":711,"code":"      it('should support \"latest\" version scripts', () => {\n        const list = document.createElement('script');\n        list.setAttribute('custom-element', 'amp-list');\n        list.setAttribute('src', 'https://cdn.ampproject.org/v0/amp-list-latest.js');\n        win.document.head.appendChild(list);\n        extensions.reloadExtension('amp-list', '0.1', true);\n        expect(list.getAttribute('i-amphtml-loaded-new-version')).to.equal('amp-list');\n        expect(extensions.preloadExtension).to.be.calledWith('amp-list', '0.1');\n      });","file":"unit/test-extensions.js","skipped":false,"dir":"test"},{"name":"should support [custom-template] scripts","suites":["regular scripts"],"updatePoint":{"line":720,"column":50,"index":32789},"line":720,"code":"      it('should support [custom-template] scripts', () => {\n        const mustache = document.createElement('script');\n        mustache.setAttribute('custom-template', 'amp-mustache');\n        mustache.setAttribute('src', 'https://cdn.ampproject.org/v0/amp-mustache-0.2.js');\n        win.document.head.appendChild(mustache);\n        extensions.reloadExtension('amp-mustache', '0.2', true);\n        expect(mustache.getAttribute('i-amphtml-loaded-new-version')).to.equal('amp-mustache');\n        expect(extensions.preloadExtension).to.be.calledWith('amp-mustache', '0.2');\n      });","file":"unit/test-extensions.js","skipped":false,"dir":"test"},{"name":"should support no-attribute scripts","suites":["regular scripts"],"updatePoint":{"line":729,"column":45,"index":33366},"line":729,"code":"      it('should support no-attribute scripts', () => {\n        const viewer = document.createElement('script');\n        viewer.setAttribute('src', 'https://cdn.ampproject.org/v0/amp-viewer-integration-0.1.js');\n        win.document.head.appendChild(viewer);\n        extensions.reloadExtension('amp-viewer-integration', '0.1', true);\n        expect(viewer.getAttribute('i-amphtml-loaded-new-version')).to.equal('amp-viewer-integration');\n        expect(extensions.preloadExtension).to.be.calledWith('amp-viewer-integration', '0.1');\n      });","file":"unit/test-extensions.js","skipped":false,"dir":"test"},{"name":"should support [custom-element] scripts","suites":["module/nomdule script pairs"],"updatePoint":{"line":739,"column":49,"index":33973},"line":739,"code":"      it('should support [custom-element] scripts', () => {\n        const mod = document.createElement('script');\n        mod.setAttribute('custom-element', 'amp-list');\n        mod.setAttribute('src', 'https://cdn.ampproject.org/v0/amp-list-0.1.mjs');\n        mod.setAttribute('type', 'module');\n        win.document.head.appendChild(mod);\n        const nomod = document.createElement('script');\n        nomod.setAttribute('custom-element', 'amp-list');\n        nomod.setAttribute('src', 'https://cdn.ampproject.org/v0/amp-list-0.1.js');\n        nomod.setAttribute('nomodule', '');\n        win.document.head.appendChild(nomod);\n        extensions.reloadExtension('amp-list', '0.1', true);\n        expect(mod.getAttribute('i-amphtml-loaded-new-version')).to.equal('amp-list');\n        expect(nomod.getAttribute('i-amphtml-loaded-new-version')).to.equal('amp-list');\n        expect(extensions.preloadExtension).to.be.calledOnce;\n        expect(extensions.preloadExtension).to.be.calledWith('amp-list', '0.1');\n      });","file":"unit/test-extensions.js","skipped":false,"dir":"test"},{"name":"should support \"latest\" version scripts","suites":["module/nomdule script pairs"],"updatePoint":{"line":756,"column":49,"index":34992},"line":756,"code":"      it('should support \"latest\" version scripts', () => {\n        const mod = document.createElement('script');\n        mod.setAttribute('custom-element', 'amp-list');\n        mod.setAttribute('src', 'https://cdn.ampproject.org/v0/amp-list-latest.mjs');\n        mod.setAttribute('type', 'module');\n        win.document.head.appendChild(mod);\n        const nomod = document.createElement('script');\n        nomod.setAttribute('custom-element', 'amp-list');\n        nomod.setAttribute('src', 'https://cdn.ampproject.org/v0/amp-list-latest.js');\n        nomod.setAttribute('nomodule', '');\n        win.document.head.appendChild(nomod);\n        extensions.reloadExtension('amp-list', '0.1', true);\n        expect(mod.getAttribute('i-amphtml-loaded-new-version')).to.equal('amp-list');\n        expect(nomod.getAttribute('i-amphtml-loaded-new-version')).to.equal('amp-list');\n        expect(extensions.preloadExtension).to.be.calledOnce;\n        expect(extensions.preloadExtension).to.be.calledWith('amp-list', '0.1');\n      });","file":"unit/test-extensions.js","skipped":false,"dir":"test"},{"name":"should support [custom-template] scripts","suites":["module/nomdule script pairs"],"updatePoint":{"line":773,"column":50,"index":36018},"line":773,"code":"      it('should support [custom-template] scripts', () => {\n        const mod = document.createElement('script');\n        mod.setAttribute('custom-template', 'amp-mustache');\n        mod.setAttribute('src', 'https://cdn.ampproject.org/v0/amp-mustache-0.2.mjs');\n        mod.setAttribute('type', 'module');\n        win.document.head.appendChild(mod);\n        const nomod = document.createElement('script');\n        nomod.setAttribute('custom-template', 'amp-mustache');\n        nomod.setAttribute('src', 'https://cdn.ampproject.org/v0/amp-mustache-0.2.js');\n        nomod.setAttribute('nomodule', '');\n        win.document.head.appendChild(nomod);\n        extensions.reloadExtension('amp-mustache', '0.2', true);\n        expect(mod.getAttribute('i-amphtml-loaded-new-version')).to.equal('amp-mustache');\n        expect(nomod.getAttribute('i-amphtml-loaded-new-version')).to.equal('amp-mustache');\n        expect(extensions.preloadExtension).to.be.calledOnce;\n        expect(extensions.preloadExtension).to.be.calledWith('amp-mustache', '0.2');\n      });","file":"unit/test-extensions.js","skipped":false,"dir":"test"},{"name":"should support no-attribute scripts","suites":["module/nomdule script pairs"],"updatePoint":{"line":790,"column":45,"index":37067},"line":790,"code":"      it('should support no-attribute scripts', () => {\n        const mod = document.createElement('script');\n        mod.setAttribute('src', 'https://cdn.ampproject.org/v0/amp-viewer-integration-0.1.mjs');\n        mod.setAttribute('type', 'module');\n        win.document.head.appendChild(mod);\n        const nomod = document.createElement('script');\n        nomod.setAttribute('src', 'https://cdn.ampproject.org/v0/amp-viewer-integration-0.1.js');\n        nomod.setAttribute('nomodule', '');\n        win.document.head.appendChild(nomod);\n        extensions.reloadExtension('amp-viewer-integration', '0.1', true);\n        expect(mod.getAttribute('i-amphtml-loaded-new-version')).to.equal('amp-viewer-integration');\n        expect(nomod.getAttribute('i-amphtml-loaded-new-version')).to.equal('amp-viewer-integration');\n        expect(extensions.preloadExtension).to.be.calledOnce;\n        expect(extensions.preloadExtension).to.be.calledWith('amp-viewer-integration', '0.1');\n      });","file":"unit/test-extensions.js","skipped":false,"dir":"test"},{"name":"should insert extension script correctly","suites":["module/nomdule script pairs"],"updatePoint":{"line":817,"column":48,"index":38313},"line":817,"code":"    it('should insert extension script correctly', () => {\n      expect(doc.head.querySelectorAll('[custom-element=\"amp-test\"]')).to.have.length(0);\n      expect(extensions.extensions_['amp-test:0.1']).to.be.undefined;\n      extensions.preloadExtension('amp-test');\n      expect(doc.head.querySelectorAll('[custom-element=\"amp-test\"]')).to.have.length(1);\n      expect(doc.head.querySelector('[custom-element=\"amp-test\"]').getAttribute('src')).to.contain('-0.1');\n      expect(extensions.extensions_['amp-test:0.1'].scriptPresent).to.be.true;\n      expect(win.customElements.elements['amp-test']).to.be.undefined;\n    });","file":"unit/test-extensions.js","skipped":false,"dir":"test"},{"name":"should insert extension script with the specified version","suites":["module/nomdule script pairs"],"updatePoint":{"line":826,"column":65,"index":38952},"line":826,"code":"    it('should insert extension script with the specified version', () => {\n      expect(doc.head.querySelectorAll('[custom-element=\"amp-test\"]')).to.have.length(0);\n      expect(extensions.extensions_['amp-test:0.2']).to.be.undefined;\n      extensions.preloadExtension('amp-test', '0.2');\n      expect(doc.head.querySelectorAll('[custom-element=\"amp-test\"]')).to.have.length(1);\n      expect(doc.head.querySelector('[custom-element=\"amp-test\"]').getAttribute('src')).to.contain('-0.2');\n      expect(extensions.extensions_['amp-test:0.2'].scriptPresent).to.be.true;\n      expect(win.customElements.elements['amp-test']).to.be.undefined;\n    });","file":"unit/test-extensions.js","skipped":false,"dir":"test"},{"name":"should insert template extension script correctly","suites":["module/nomdule script pairs"],"updatePoint":{"line":835,"column":57,"index":39590},"line":835,"code":"    it('should insert template extension script correctly', () => {\n      expect(doc.head.querySelectorAll('[custom-template=\"amp-mustache\"]')).to.have.length(0);\n      expect(extensions.extensions_['amp-mustache:0.1']).to.be.undefined;\n      extensions.preloadExtension('amp-mustache');\n      expect(doc.head.querySelectorAll('[custom-template=\"amp-mustache\"]')).to.have.length(1);\n      expect(extensions.extensions_['amp-mustache:0.1'].scriptPresent).to.be.true;\n      expect(win.customElements.elements['amp-mustache']).to.be.undefined;\n    });","file":"unit/test-extensions.js","skipped":false,"dir":"test"},{"name":"should insert extension script and not collide with prefixes","suites":["module/nomdule script pairs"],"updatePoint":{"line":843,"column":68,"index":40150},"line":843,"code":"    it('should insert extension script and not collide with prefixes', () => {\n      // First add an extension with the same suffix.\n      extensions.preloadExtension('amp-test-suffix');\n      expect(doc.head.querySelectorAll('[custom-element=\"amp-test-suffix\"]')).to.have.length(1);\n\n      // Then try to add the prefix-based extension.\n      extensions.preloadExtension('amp-test');\n      expect(doc.head.querySelectorAll('[custom-element=\"amp-test\"]')).to.have.length(1);\n    });","file":"unit/test-extensions.js","skipped":false,"dir":"test"},{"name":"should insert extension version correctly","suites":["module/nomdule script pairs"],"updatePoint":{"line":852,"column":49,"index":40614},"line":852,"code":"    it('should insert extension version correctly', () => {\n      expect(doc.head.querySelectorAll('[custom-element=\"amp-test\"]')).to.have.length(0);\n      expect(extensions.extensions_['amp-test:1.0']).to.be.undefined;\n      extensions.preloadExtension('amp-test', '1.0');\n      expect(doc.head.querySelectorAll('[custom-element=\"amp-test\"][src*=\"0.1\"]')).to.have.length(0);\n      expect(doc.head.querySelectorAll('[custom-element=\"amp-test\"][src*=\"1.0\"]')).to.have.length(1);\n      expect(extensions.extensions_['amp-test:1.0'].scriptPresent).to.be.true;\n      expect(win.customElements.elements['amp-test']).to.be.undefined;\n    });","file":"unit/test-extensions.js","skipped":false,"dir":"test"},{"name":"should not insert version for _bundle","suites":["module/nomdule script pairs"],"updatePoint":{"line":861,"column":45,"index":41246},"line":861,"code":"    it('should not insert version for _bundle', () => {\n      expect(doc.head.querySelectorAll('[custom-element=\"_bundle\"]')).to.have.length(0);\n      expect(extensions.extensions_['amp-test']).to.be.undefined;\n      extensions.preloadExtension('_bundle');\n      expect(doc.head.querySelectorAll('[custom-element=\"_bundle\"]')).to.have.length(0);\n      expect(doc.head.querySelectorAll('script[src*=\"_bundle\"]')).to.have.length(1);\n    });","file":"unit/test-extensions.js","skipped":false,"dir":"test"},{"name":"should only insert script once","suites":["module/nomdule script pairs"],"updatePoint":{"line":868,"column":38,"index":41678},"line":868,"code":"    it('should only insert script once', () => {\n      expect(doc.head.querySelectorAll('[custom-element=\"amp-test\"]')).to.have.length(0);\n      expect(extensions.extensions_['amp-test:0.1']).to.be.undefined;\n      extensions.preloadExtension('amp-test');\n      expect(doc.head.querySelectorAll('[custom-element=\"amp-test\"]')).to.have.length(1);\n      expect(extensions.extensions_['amp-test:0.1'].scriptPresent).to.be.true;\n      extensions.preloadExtension('amp-test');\n      expect(doc.head.querySelectorAll('[custom-element=\"amp-test\"]')).to.have.length(1);\n    });","file":"unit/test-extensions.js","skipped":false,"dir":"test"},{"name":"should only insert script once with the right version","suites":["module/nomdule script pairs"],"updatePoint":{"line":877,"column":61,"index":42271},"line":877,"code":"    it('should only insert script once with the right version', () => {\n      expect(doc.head.querySelectorAll('[custom-element=\"amp-test\"]')).to.have.length(0);\n      expect(extensions.extensions_['amp-test:0.1']).to.be.undefined;\n      extensions.preloadExtension('amp-test');\n      expect(doc.head.querySelectorAll('[custom-element=\"amp-test\"]')).to.have.length(1);\n      expect(doc.head.querySelector('[custom-element=\"amp-test\"]').getAttribute('src')).to.contain('-0.1');\n      expect(extensions.extensions_['amp-test:0.1'].scriptPresent).to.be.true;\n      extensions.preloadExtension('amp-test', '0.1');\n      expect(doc.head.querySelector('[custom-element=\"amp-test\"]').getAttribute('src')).to.contain('-0.1');\n    });","file":"unit/test-extensions.js","skipped":false,"dir":"test"},{"name":"should not insert when script exists in head","suites":["module/nomdule script pairs"],"updatePoint":{"line":887,"column":52,"index":42988},"line":887,"code":"    it('should not insert when script exists in head', () => {\n      const ampTestScript = doc.createElement('script');\n      ampTestScript.setAttribute('custom-element', 'amp-test');\n      ampTestScript.setAttribute('i-amphtml-loaded-new-version', 'amp-test');\n      expect(doc.head.querySelectorAll('[custom-element=\"amp-test\"]')).to.have.length(0);\n      doc.head.appendChild(ampTestScript);\n      expect(doc.head.querySelectorAll('[custom-element=\"amp-test\"]')).to.have.length(1);\n      expect(extensions.extensions_['amp-test:0.1']).to.be.undefined;\n      extensions.preloadExtension('amp-test');\n      expect(doc.head.querySelectorAll('[custom-element=\"amp-test\"]')).to.have.length(2);\n      expect(doc.head.querySelectorAll('[custom-element=\"amp-test\"]' + ':not([i-amphtml-loaded-new-version])' + '[i-amphtml-inserted]')).to.have.length(1);\n      expect(extensions.extensions_['amp-test:0.1'].scriptPresent).to.be.true;\n      expect(win.customElements.elements['amp-test']).to.not.exist;\n      expect(win.__AMP_EXTENDED_ELEMENTS['amp-test']).to.be.undefined;\n    });","file":"unit/test-extensions.js","skipped":false,"dir":"test"},{"name":"should give script correct attributes","suites":["module/nomdule script pairs"],"updatePoint":{"line":902,"column":45,"index":44055},"line":902,"code":"    it('should give script correct attributes', () => {\n      expect(doc.head.querySelectorAll('[custom-element=\"amp-test\"]')).to.have.length(0);\n      extensions.preloadExtension('amp-test');\n      expect(doc.head.querySelectorAll('[custom-element=\"amp-test\"]')).to.have.length(1);\n      const script = doc.head.querySelector('[custom-element=\"amp-test\"]');\n      expect(script.getAttribute('data-script')).to.equal('amp-test');\n      expect(script.getAttribute('async')).to.equal('');\n      expect(script.getAttribute('crossorigin')).to.equal('anonymous');\n    });","file":"unit/test-extensions.js","skipped":false,"dir":"test"},{"name":"should insert special-case for amp-embed script","suites":["module/nomdule script pairs"],"updatePoint":{"line":911,"column":55,"index":44632},"line":911,"code":"    it('should insert special-case for amp-embed script', () => {\n      expect(doc.head.querySelectorAll('[custom-element=\"amp-embed\"]')).to.have.length(0);\n      extensions.preloadExtension('amp-embed');\n      expect(doc.head.querySelectorAll('[custom-element=\"amp-ad\"]')).to.have.length(1);\n      expect(extensions.extensions_['amp-ad:0.1'].scriptPresent).to.be.true;\n\n      // The amp-embed module has never been created.\n      expect(doc.head.querySelectorAll('[custom-element=\"amp-embed\"]')).to.have.length(0);\n      expect(extensions.extensions_['amp-embed:0.1']).to.be.undefined;\n    });","file":"unit/test-extensions.js","skipped":false,"dir":"test"},{"name":"should insert extension script correctly","suites":["module/nomdule script pairs"],"updatePoint":{"line":932,"column":48,"index":45469},"line":932,"code":"    it('should insert extension script correctly', () => {\n      expect(doc.head.querySelectorAll('[custom-element=\"amp-test\"]')).to.have.length(0);\n      const promise = extensions.importUnwrapped(win, 'amp-test');\n      expect(doc.head.querySelectorAll('[custom-element=\"amp-test\"]')).to.have.length(1);\n      const script = doc.head.querySelector('[custom-element=\"amp-test\"]');\n      dispatchCustomEvent(script, 'load', null, {\n        bubbles: false\n      });\n      return promise;\n    });","file":"unit/test-extensions.js","skipped":false,"dir":"test"},{"name":"should only insert script once","suites":["module/nomdule script pairs"],"updatePoint":{"line":942,"column":38,"index":45954},"line":942,"code":"    it('should only insert script once', () => {\n      expect(doc.head.querySelectorAll('[custom-element=\"amp-test\"]')).to.have.length(0);\n      const promise1 = extensions.importUnwrapped(win, 'amp-test');\n      expect(doc.head.querySelectorAll('[custom-element=\"amp-test\"]')).to.have.length(1);\n      const promise2 = extensions.importUnwrapped(win, 'amp-test');\n      expect(doc.head.querySelectorAll('[custom-element=\"amp-test\"]')).to.have.length(1);\n      expect(promise2).to.equal(promise1);\n    });","file":"unit/test-extensions.js","skipped":false,"dir":"test"},{"name":"should give script correct attributes","suites":["module/nomdule script pairs"],"updatePoint":{"line":950,"column":45,"index":46467},"line":950,"code":"    it('should give script correct attributes', () => {\n      expect(doc.head.querySelectorAll('[custom-element=\"amp-test\"]')).to.have.length(0);\n      extensions.importUnwrapped(win, 'amp-test');\n      expect(doc.head.querySelectorAll('[custom-element=\"amp-test\"]')).to.have.length(1);\n      const script = doc.head.querySelector('[custom-element=\"amp-test\"]');\n      expect(script.getAttribute('data-script')).to.equal('amp-test');\n      expect(script.getAttribute('async')).to.equal('');\n      expect(script.getAttribute('crossorigin')).to.equal('anonymous');\n    });","file":"unit/test-extensions.js","skipped":false,"dir":"test"},{"name":"should insert extension script correctly","suites":["module/nomdule script pairs"],"updatePoint":{"line":971,"column":48,"index":47332},"line":971,"code":"    it('should insert extension script correctly', () => {\n      const loadSpy = env.sandbox.spy(extensions, 'preloadExtension');\n      expect(doc.head.querySelectorAll('[custom-element=\"amp-test\"]')).to.have.length(0);\n      expect(extensions.extensions_['amp-test:0.1']).to.be.undefined;\n      extensions.installExtensionForDoc(ampdoc, 'amp-test');\n      expect(loadSpy).to.be.calledOnce;\n      expect(loadSpy).to.be.calledWithExactly('amp-test', '0.1');\n      expect(doc.head.querySelectorAll('[custom-element=\"amp-test\"][src*=\"-0.1\"]')).to.have.length(1);\n      expect(doc.head.querySelector('[custom-element=\"amp-test\"]').getAttribute('src')).to.contain('-0.1');\n      expect(extensions.extensions_['amp-test:0.1'].scriptPresent).to.be.true;\n      expect(win.__AMP_EXTENDED_ELEMENTS['amp-test']).to.equal(ElementStub);\n    });","file":"unit/test-extensions.js","skipped":false,"dir":"test"},{"name":"should insert extension script correctly for non-default version","suites":["module/nomdule script pairs"],"updatePoint":{"line":983,"column":72,"index":48188},"line":983,"code":"    it('should insert extension script correctly for non-default version', () => {\n      const loadSpy = env.sandbox.spy(extensions, 'preloadExtension');\n      expect(doc.head.querySelectorAll('[custom-element=\"amp-test\"]')).to.have.length(0);\n      expect(extensions.extensions_['amp-test:0.2']).to.be.undefined;\n      extensions.installExtensionForDoc(ampdoc, 'amp-test', '0.2');\n\n      // Extension is declared immediately.\n      expect(ampdoc.declaresExtension('amp-test', '0.2')).to.be.true;\n      expect(loadSpy).to.be.calledOnce;\n      expect(loadSpy).to.be.calledWithExactly('amp-test', '0.2');\n      expect(doc.head.querySelectorAll('[custom-element=\"amp-test\"][src*=\"-0.2\"]')).to.have.length(1);\n      expect(doc.head.querySelector('[custom-element=\"amp-test\"]').getAttribute('src')).to.contain('-0.2');\n      expect(extensions.extensions_['amp-test:0.2'].scriptPresent).to.be.true;\n      expect(win.__AMP_EXTENDED_ELEMENTS['amp-test']).to.equal(ElementStub);\n    });","file":"unit/test-extensions.js","skipped":false,"dir":"test"},{"name":"should insert extension script with a specified version","suites":["module/nomdule script pairs"],"updatePoint":{"line":998,"column":63,"index":49157},"line":998,"code":"    it('should insert extension script with a specified version', () => {\n      const loadSpy = env.sandbox.spy(extensions, 'preloadExtension');\n      expect(doc.head.querySelectorAll('[custom-element=\"amp-test\"]')).to.have.length(0);\n      expect(extensions.extensions_['amp-test:0.2']).to.be.undefined;\n      extensions.installExtensionForDoc(ampdoc, 'amp-test', '0.2');\n      expect(loadSpy).to.be.calledOnce;\n      expect(loadSpy).to.be.calledWithExactly('amp-test', '0.2');\n      expect(doc.head.querySelectorAll('[custom-element=\"amp-test\"]')).to.have.length(1);\n      expect(doc.head.querySelector('[custom-element=\"amp-test\"]').getAttribute('src')).to.contain('-0.2');\n      expect(extensions.extensions_['amp-test:0.2'].scriptPresent).to.be.true;\n      expect(win.__AMP_EXTENDED_ELEMENTS['amp-test']).to.equal(ElementStub);\n    });","file":"unit/test-extensions.js","skipped":false,"dir":"test"},{"name":"should stub main extension immediately","suites":["module/nomdule script pairs"],"updatePoint":{"line":1010,"column":46,"index":49981},"line":1010,"code":"    it('should stub main extension immediately', () => {\n      const extHolder = extensions.getExtensionHolder_('amp-test', '0.1');\n      extHolder.scriptPresent = true;\n      expect(ampdoc.declaresExtension('amp-test')).to.be.false;\n      const promise = extensions.installExtensionForDoc(ampdoc, 'amp-test');\n\n      // Extension is declared immediately.\n      expect(ampdoc.declaresExtension('amp-test', '0.1')).to.be.true;\n\n      // Stubbed immediately.\n      expect(win.__AMP_EXTENDED_ELEMENTS['amp-test']).to.equal(ElementStub);\n      expect(win.__AMP_EXTENDED_ELEMENTS['amp-test-sub']).to.be.undefined;\n      expect(win.customElements.elements['amp-test']).to.exist;\n\n      // Resolve the promise.\n      extensions.registerExtension('amp-test', '0.1', true, AMP => {\n        // Main extension with CSS.\n        AMP.registerElement('amp-test', AmpTest, 'a{}');\n        // Secondary extension w/o CSS.\n        AMP.registerElement('amp-test-sub', AmpTestSub);\n      }, win.AMP);\n      return promise.then(() => {\n        // Resolved later.\n        expect(win.__AMP_EXTENDED_ELEMENTS['amp-test']).to.equal(AmpTest);\n        expect(win.__AMP_EXTENDED_ELEMENTS['amp-test-sub']).to.equal(AmpTestSub);\n      });\n    });","file":"unit/test-extensions.js","skipped":false,"dir":"test"},{"name":"should reuse the load if already started","suites":["module/nomdule script pairs"],"updatePoint":{"line":1037,"column":48,"index":51201},"line":1037,"code":"    it('should reuse the load if already started', () => {\n      const loadSpy = env.sandbox.spy(extensions, 'preloadExtension');\n      const extHolder = extensions.getExtensionHolder_('amp-test', '0.1');\n      extHolder.scriptPresent = true;\n      const promise1 = extensions.installExtensionForDoc(ampdoc, 'amp-test');\n      const promise2 = extensions.installExtensionForDoc(ampdoc, 'amp-test');\n      expect(promise2).to.equal(promise1);\n      expect(loadSpy).to.be.calledOnce;\n\n      // Resolve.\n      extensions.registerExtension('amp-test', '0.1', true, () => {}, {});\n      return promise1.then(() => {\n        const promise3 = extensions.installExtensionForDoc(ampdoc, 'amp-test');\n        expect(promise3).to.equal(promise1);\n        expect(loadSpy).to.be.calledOnce;\n        return promise3;\n      });\n    });","file":"unit/test-extensions.js","skipped":false,"dir":"test"},{"name":"should install doc services","suites":["module/nomdule script pairs"],"updatePoint":{"line":1055,"column":35,"index":52009},"line":1055,"code":"    it('should install doc services', () => {\n      const factory1Spy = env.sandbox.spy();\n      const factory2Spy = env.sandbox.spy();\n      const factory1 = function () {\n        factory1Spy();\n        return {\n          a: 1\n        };\n      };\n      const factory2 = function () {\n        factory2Spy();\n        return {\n          a: 2\n        };\n      };\n      const extHolder = extensions.getExtensionHolder_('amp-test', '0.1');\n      extHolder.scriptPresent = true;\n      expect(ampdoc.declaresExtension('amp-test')).to.be.false;\n      const promise = extensions.installExtensionForDoc(ampdoc, 'amp-test');\n\n      // Extension is declared immediately.\n      expect(ampdoc.declaresExtension('amp-test', '0.1')).to.be.true;\n\n      // Services do not exist yet.\n      allowConsoleError(() => {\n        expect(() => getServiceForDoc(ampdoc, 'service1')).to.throw(/to be registered/);\n        expect(() => getServiceForDoc(ampdoc, 'service2')).to.throw(/to be registered/);\n      });\n      expect(factory1Spy).to.not.be.called;\n      expect(factory2Spy).to.not.be.called;\n\n      // Resolve the promise.\n      extensions.registerExtension('amp-test', '0.1', true, AMP => {\n        AMP.registerServiceForDoc('service1', factory1);\n        AMP.registerServiceForDoc('service2', factory2);\n      }, win.AMP);\n      return promise.then(() => {\n        // Services registered.\n        expect(getServiceForDoc(ampdoc, 'service1').a).to.equal(1);\n        expect(getServiceForDoc(ampdoc, 'service2').a).to.equal(2);\n        expect(factory1Spy).to.be.calledOnce;\n        expect(factory2Spy).to.be.calledOnce;\n        // Extension is marked as declared.\n        expect(ampdoc.declaresExtension('amp-test')).to.be.true;\n      });\n    });","file":"unit/test-extensions.js","skipped":false,"dir":"test"},{"name":"should survive factory failures","suites":["module/nomdule script pairs"],"line":1103,"code":"    it.skip('should survive factory failures', () => {","file":"unit/test-extensions.js","skipped":true,"dir":"test"},{"name":"should install builtins","suites":["module/nomdule script pairs"],"updatePoint":{"line":1160,"column":31,"index":55800},"line":1160,"code":"    it('should install builtins', () => {\n      extensions.preinstallEmbed(ampdoc, []);\n      expect(win.customElements.elements['amp-img']).to.exist;\n    });","file":"unit/test-extensions.js","skipped":false,"dir":"test"},{"name":"should install legacy elements","suites":["module/nomdule script pairs"],"updatePoint":{"line":1164,"column":38,"index":55966},"line":1164,"code":"    it('should install legacy elements', () => {\n      extensions.preinstallEmbed(ampdoc, []);\n      expect(win.customElements.elements['amp-video']).to.exist;\n    });","file":"unit/test-extensions.js","skipped":false,"dir":"test"},{"name":"should declare and stub extensions","suites":["module/nomdule script pairs"],"updatePoint":{"line":1168,"column":42,"index":56138},"line":1168,"code":"    it('should declare and stub extensions', () => {\n      extensions.preinstallEmbed(ampdoc, [{\n        extensionId: 'amp-test',\n        extensionVersion: '0.2'\n      }, {\n        extensionId: 'amp-other',\n        extensionVersion: '0.3'\n      }]);\n      expect(ampdoc.declaresExtension('amp-test', '0.2')).to.be.true;\n      expect(win.customElements.elements['amp-test']).to.not.be.undefined;\n      expect(ampdoc.declaresExtension('amp-other', '0.3')).to.be.true;\n      expect(win.customElements.elements['amp-other']).to.not.be.undefined;\n    });","file":"unit/test-extensions.js","skipped":false,"dir":"test"},{"name":"should initialize fixed layer to null","suites":["no-transfer"],"updatePoint":{"line":371,"column":45,"index":11437},"line":371,"code":"    it('should initialize fixed layer to null', () => {\n      expect(fixedLayer.transferLayer_).to.be.null;\n    });","file":"unit/test-fixed-layer.js","skipped":false,"dir":"test"},{"name":"should discover all potentials","suites":["no-transfer"],"updatePoint":{"line":374,"column":38,"index":11546},"line":374,"code":"    it('should discover all potentials', () => {\n      function expectFe(actual, expected) {\n        expect(actual.id).to.equal(expected.id, `${expected.id} wrong`);\n        expect(actual.element).to.equal(expected.element, `${expected.id}: wrong element`);\n        expect(actual.position).to.equal(expected.position, `${expected.id}: wrong position`);\n        expect(JSON.stringify(actual.selectors)).to.equal(JSON.stringify(expected.selectors), `${expected.id}: wrong selectors`);\n      }\n      expect(fixedLayer.elements_).to.have.length(5);\n      expectFe(fixedLayer.elements_[0], {\n        id: 'F0',\n        element: element1,\n        position: 'fixed',\n        selectors: ['#amp-custom-rule1', '#doc-body-id #amp-custom-rule1', '#amp-custom-rule2', '#amp-custom-media-rule1', '#other-rule1']\n      });\n      expectFe(fixedLayer.elements_[1], {\n        id: 'F1',\n        element: element2,\n        position: 'fixed',\n        selectors: ['#amp-custom-rule2', '#amp-custom-supports-rule1', '#other-rule2']\n      });\n      expectFe(fixedLayer.elements_[2], {\n        id: 'F2',\n        element: element2,\n        position: 'sticky',\n        selectors: ['#amp-custom-rule4']\n      });\n      expectFe(fixedLayer.elements_[3], {\n        id: 'F3',\n        element: element4,\n        position: 'sticky',\n        selectors: ['#amp-custom-rule4']\n      });\n      expectFe(fixedLayer.elements_[4], {\n        id: 'F4',\n        element: element5,\n        position: 'sticky',\n        selectors: ['#amp-custom-rule5']\n      });\n      expect(fixedLayer.isDeclaredFixed(element1)).to.be.true;\n      expect(fixedLayer.isDeclaredSticky(element1)).to.be.false;\n      expect(fixedLayer.isDeclaredFixed(element2)).to.be.true;\n      expect(fixedLayer.isDeclaredSticky(element2)).to.be.true;\n      expect(fixedLayer.isDeclaredFixed(element3)).to.be.false;\n      expect(fixedLayer.isDeclaredSticky(element3)).to.be.false;\n      expect(fixedLayer.isDeclaredSticky(element4)).to.be.true;\n      expect(fixedLayer.isDeclaredSticky(element5)).to.be.true;\n    });","file":"unit/test-fixed-layer.js","skipped":false,"dir":"test"},{"name":"should add and remove element directly","suites":["no-transfer"],"updatePoint":{"line":421,"column":46,"index":13591},"line":421,"code":"    it('should add and remove element directly', () => {\n      const updateStub = env.sandbox.stub(fixedLayer, 'update');\n      expect(fixedLayer.elements_).to.have.length(5);\n\n      // Add.\n      fixedLayer.addElement(element6);\n      expect(updateStub).to.be.calledOnce;\n      expect(fixedLayer.elements_).to.have.length(6);\n      const fe = fixedLayer.elements_[5];\n      expect(fe.id).to.equal('F5');\n      expect(fe.element).to.equal(element6);\n      expect(fe.selectors).to.deep.equal(['*']);\n      expect(fe.forceTransfer).to.be.undefined;\n\n      // Remove.\n      fixedLayer.removeElement(element6);\n      expect(fixedLayer.elements_).to.have.length(5);\n\n      // Add with forceTransfer=true.\n      fixedLayer.addElement(element6, true);\n      expect(updateStub).to.have.callCount(2);\n      expect(fixedLayer.elements_).to.have.length(6);\n      const fe1 = fixedLayer.elements_[5];\n      expect(fe1.id).to.equal('F6');\n      expect(fe1.element).to.equal(element6);\n      expect(fe1.selectors).to.deep.equal(['*']);\n      expect(fe1.forceTransfer).to.be.true;\n\n      // Remove.\n      fixedLayer.removeElement(element6);\n      expect(fixedLayer.elements_).to.have.length(5);\n\n      // Add with forceTransfer=false.\n      fixedLayer.addElement(element6, false);\n      expect(updateStub).to.have.callCount(3);\n      expect(fixedLayer.elements_).to.have.length(6);\n      const fe2 = fixedLayer.elements_[5];\n      expect(fe2.id).to.equal('F7');\n      expect(fe2.element).to.equal(element6);\n      expect(fe2.selectors).to.deep.equal(['*']);\n      expect(fe2.forceTransfer).to.be.false;\n\n      // Remove.\n      fixedLayer.removeElement(element6);\n      expect(fixedLayer.elements_).to.have.length(5);\n    });","file":"unit/test-fixed-layer.js","skipped":false,"dir":"test"},{"name":"should remove node when disappeared from DOM","suites":["no-transfer"],"updatePoint":{"line":467,"column":52,"index":15307},"line":467,"code":"    it('should remove node when disappeared from DOM', () => {\n      docBody.removeChild(element1);\n      expect(fixedLayer.elements_).to.have.length(5);\n      fixedLayer.update();\n      expect(fixedLayer.elements_).to.have.length(4);\n    });","file":"unit/test-fixed-layer.js","skipped":false,"dir":"test"},{"name":"should remove all candidates","suites":["no-transfer"],"updatePoint":{"line":473,"column":36,"index":15534},"line":473,"code":"    it('should remove all candidates', () => {\n      // element2 is both fixed and sticky.\n      docBody.removeChild(element2);\n      expect(fixedLayer.elements_).to.have.length(5);\n      fixedLayer.update();\n      expect(fixedLayer.elements_).to.have.length(3);\n    });","file":"unit/test-fixed-layer.js","skipped":false,"dir":"test"},{"name":"should collect updates","suites":["no-transfer"],"updatePoint":{"line":480,"column":30,"index":15799},"line":480,"code":"    it('should collect updates', () => {\n      element1.computedStyle['position'] = 'fixed';\n      element1.offsetWidth = 10;\n      element1.offsetHeight = 10;\n      element5.computedStyle['position'] = 'sticky';\n      expect(vsyncTasks).to.have.length(1);\n      const state = {};\n      vsyncTasks[0].measure(state);\n\n      // F0: element1\n      expect(state['F0'].fixed).to.be.true;\n      expect(state['F0'].sticky).to.be.false;\n      expect(state['F0'].top).to.equal('');\n      expect(state['F0'].zIndex).to.equal('');\n\n      // F1: element2\n      expect(state['F1'].fixed).to.equal(false);\n      expect(state['F1'].sticky).to.equal(false);\n\n      // F2: element3\n      expect(state['F2'].fixed).to.equal(false);\n      expect(state['F2'].sticky).to.equal(false);\n\n      // F3: element4\n      expect(state['F3'].fixed).to.be.false;\n      expect(state['F3'].sticky).to.be.false;\n      expect(state['F3'].top).to.equal('');\n      expect(state['F3'].zIndex).to.equal('');\n\n      // F4: element5\n      expect(state['F4'].fixed).to.be.false;\n      expect(state['F4'].sticky).to.be.true;\n      expect(state['F4'].top).to.equal('');\n      expect(state['F4'].zIndex).to.equal('');\n    });","file":"unit/test-fixed-layer.js","skipped":false,"dir":"test"},{"name":"should support vendor-based sticky","suites":["no-transfer"],"updatePoint":{"line":515,"column":42,"index":16993},"line":515,"code":"    it('should support vendor-based sticky', () => {\n      element5.computedStyle['position'] = '-webkit-sticky';\n      expect(vsyncTasks).to.have.length(1);\n      const state = {};\n      vsyncTasks[0].measure(state);\n      expect(state['F4'].sticky).to.be.true;\n    });","file":"unit/test-fixed-layer.js","skipped":false,"dir":"test"},{"name":"should disregard non-fixed position","suites":["no-transfer"],"updatePoint":{"line":522,"column":43,"index":17265},"line":522,"code":"    it('should disregard non-fixed position', () => {\n      element1.computedStyle['position'] = 'static';\n      element1.offsetWidth = 10;\n      element1.offsetHeight = 10;\n      element5.computedStyle['position'] = 'static';\n      expect(vsyncTasks).to.have.length(1);\n      const state = {};\n      vsyncTasks[0].measure(state);\n      expect(state['F0'].fixed).to.be.false;\n      expect(state['F1'].fixed).to.be.false;\n      expect(state['F4'].fixed).to.be.false;\n    });","file":"unit/test-fixed-layer.js","skipped":false,"dir":"test"},{"name":"should disregard invisible element, but for fixed only","suites":["no-transfer"],"updatePoint":{"line":534,"column":62,"index":17758},"line":534,"code":"    it('should disregard invisible element, but for fixed only', () => {\n      element1.computedStyle['position'] = 'fixed';\n      element1.offsetWidth = 0;\n      element1.offsetHeight = 0;\n      element5.computedStyle['position'] = 'sticky';\n      element5.offsetWidth = 0;\n      element5.offsetHeight = 0;\n      expect(vsyncTasks).to.have.length(1);\n      const state = {};\n      vsyncTasks[0].measure(state);\n      expect(state['F0'].fixed).to.be.false;\n      expect(state['F1'].fixed).to.be.false;\n      expect(state['F4'].sticky).to.be.true;\n    });","file":"unit/test-fixed-layer.js","skipped":false,"dir":"test"},{"name":"should disregard display:none element","suites":["no-transfer"],"updatePoint":{"line":548,"column":45,"index":18296},"line":548,"code":"    it('should disregard display:none element', () => {\n      element1.computedStyle['position'] = 'fixed';\n      element1.offsetWidth = 10;\n      element1.offsetHeight = 10;\n      element1.computedStyle['display'] = 'none';\n      element5.computedStyle['position'] = 'sticky';\n      element5.offsetWidth = 10;\n      element5.offsetHeight = 10;\n      element5.computedStyle['display'] = 'none';\n      expect(vsyncTasks).to.have.length(1);\n      const state = {};\n      vsyncTasks[0].measure(state);\n      expect(state['F0'].fixed).to.be.false;\n      expect(state['F1'].fixed).to.be.false;\n      expect(state['F4'].sticky).to.be.false;\n    });","file":"unit/test-fixed-layer.js","skipped":false,"dir":"test"},{"name":"should tolerate getComputedStyle = null","suites":["no-transfer"],"updatePoint":{"line":564,"column":47,"index":18941},"line":564,"code":"    it('should tolerate getComputedStyle = null', () => {\n      // See #3096 and https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n      documentApi.defaultView.getComputedStyle = () => null;\n      element1.computedStyle['position'] = 'fixed';\n      element1.offsetWidth = 10;\n      element1.offsetHeight = 10;\n      expect(vsyncTasks).to.have.length(1);\n      const state = {};\n      vsyncTasks[0].measure(state);\n      expect(state['F0'].fixed).to.be.false;\n      expect(state['F0'].sticky).to.be.false;\n      expect(state['F0'].transferrable).to.be.false;\n      expect(state['F0'].top).to.equal('');\n      expect(state['F0'].zIndex).to.equal('');\n      expect(state['F1'].fixed).to.be.false;\n      expect(state['F1'].sticky).to.be.false;\n    });","file":"unit/test-fixed-layer.js","skipped":false,"dir":"test"},{"name":"should collect for top != auto","suites":["no-transfer"],"updatePoint":{"line":581,"column":38,"index":19683},"line":581,"code":"    it('should collect for top != auto', () => {\n      element1.computedStyle['position'] = 'fixed';\n      element1.computedStyle['top'] = '11px';\n      element1.offsetWidth = 10;\n      element1.offsetHeight = 10;\n      element5.computedStyle['position'] = 'sticky';\n      element5.computedStyle['top'] = '11px';\n      expect(vsyncTasks).to.have.length(1);\n      const state = {};\n      vsyncTasks[0].measure(state);\n      expect(state['F0'].fixed).to.be.true;\n      expect(state['F0'].sticky).to.be.false;\n      expect(state['F0'].top).to.equal('11px');\n      expect(state['F4'].fixed).to.be.false;\n      expect(state['F4'].sticky).to.be.true;\n      expect(state['F4'].top).to.equal('11px');\n    });","file":"unit/test-fixed-layer.js","skipped":false,"dir":"test"},{"name":"should collect for top = auto, but not update top","suites":["no-transfer"],"updatePoint":{"line":598,"column":57,"index":20403},"line":598,"code":"    it('should collect for top = auto, but not update top', () => {\n      element1.computedStyle['position'] = 'fixed';\n      element1.computedStyle['top'] = 'auto';\n      element1.offsetWidth = 10;\n      element1.offsetHeight = 10;\n      element5.computedStyle['position'] = 'sticky';\n      element5.computedStyle['top'] = 'auto';\n      expect(vsyncTasks).to.have.length(1);\n      const state = {};\n      vsyncTasks[0].measure(state);\n      expect(state['F0'].fixed).to.be.true;\n      expect(state['F0'].sticky).to.be.false;\n      expect(state['F0'].top).to.equal('');\n      expect(state['F4'].fixed).to.be.false;\n      expect(state['F4'].sticky).to.be.true;\n      expect(state['F4'].top).to.equal('');\n    });","file":"unit/test-fixed-layer.js","skipped":false,"dir":"test"},{"name":"should work around top=0 for sticky","suites":["no-transfer"],"updatePoint":{"line":615,"column":43,"index":21101},"line":615,"code":"    it('should work around top=0 for sticky', () => {\n      // See http://crbug.com/703816.\n      element5.computedStyle['position'] = 'sticky';\n      element5.computedStyle['top'] = '0px';\n      element5.autoTop = '12px';\n      expect(vsyncTasks).to.have.length(1);\n      const state = {};\n      vsyncTasks[0].measure(state);\n      expect(state['F4'].sticky).to.be.true;\n      expect(state['F4'].top).to.equal('');\n    });","file":"unit/test-fixed-layer.js","skipped":false,"dir":"test"},{"name":"should work around top=0 for sticky when offset = 0","suites":["no-transfer"],"updatePoint":{"line":626,"column":59,"index":21541},"line":626,"code":"    it('should work around top=0 for sticky when offset = 0', () => {\n      // See http://crbug.com/703816.\n      element5.computedStyle['position'] = 'sticky';\n      element5.computedStyle['top'] = '0px';\n      element5.autoTop = '0px';\n      expect(vsyncTasks).to.have.length(1);\n      const state = {};\n      vsyncTasks[0].measure(state);\n      expect(state['F4'].sticky).to.be.true;\n      expect(state['F4'].top).to.equal('0px');\n    });","file":"unit/test-fixed-layer.js","skipped":false,"dir":"test"},{"name":"should NOT work around top=0 for sticky for non-implicit top","suites":["no-transfer"],"updatePoint":{"line":637,"column":68,"index":21992},"line":637,"code":"    it('should NOT work around top=0 for sticky for non-implicit top', () => {\n      // See http://crbug.com/703816.\n      element5.computedStyle['position'] = 'sticky';\n      element5.computedStyle['top'] = '0px';\n      element5.autoTop = '12px';\n      expect(vsyncTasks).to.have.length(1);\n      const state = {};\n      vsyncTasks[0].measure(state);\n      expect(state['F4'].sticky).to.be.true;\n      expect(state['F4'].top).to.equal('');\n    });","file":"unit/test-fixed-layer.js","skipped":false,"dir":"test"},{"name":"should collect for implicit top = auto, but not update top","suites":["no-transfer"],"updatePoint":{"line":648,"column":66,"index":22439},"line":648,"code":"    it('should collect for implicit top = auto, but not update top', () => {\n      element1.computedStyle['position'] = 'fixed';\n      element1.computedStyle['top'] = '0px';\n      element1.autoTop = '12px';\n      element1.offsetWidth = 10;\n      element1.offsetHeight = 10;\n      element5.computedStyle['position'] = 'sticky';\n      element5.autoTop = '12px';\n      expect(vsyncTasks).to.have.length(1);\n      const state = {};\n      vsyncTasks[0].measure(state);\n      expect(state['F0'].fixed).to.be.true;\n      expect(state['F0'].top).to.equal('');\n      expect(state['F4'].sticky).to.be.true;\n      expect(state['F4'].top).to.equal('');\n    });","file":"unit/test-fixed-layer.js","skipped":false,"dir":"test"},{"name":"should override implicit top = auto to 0 when equals padding","suites":["no-transfer"],"updatePoint":{"line":664,"column":68,"index":23090},"line":664,"code":"    it('should override implicit top = auto to 0 when equals padding', () => {\n      element1.computedStyle['position'] = 'fixed';\n      element1.computedStyle['top'] = '11px';\n      element1.autoTop = '0px';\n      element1.offsetWidth = 10;\n      element1.offsetHeight = 10;\n      element5.computedStyle['position'] = 'sticky';\n      element5.computedStyle['top'] = '11px';\n      element5.autoTop = '11px';\n      expect(vsyncTasks).to.have.length(1);\n      const state = {};\n      vsyncTasks[0].measure(state);\n      expect(state['F0'].fixed).to.be.true;\n      expect(state['F0'].top).to.equal('0px');\n      expect(state['F4'].sticky).to.be.true;\n      expect(state['F4'].top).to.equal('11px');\n    });","file":"unit/test-fixed-layer.js","skipped":false,"dir":"test"},{"name":"should override implicit top = auto to 0 and padding + border","suites":["no-transfer"],"updatePoint":{"line":681,"column":69,"index":23795},"line":681,"code":"    it('should override implicit top = auto to 0 and padding + border', () => {\n      fixedLayer.borderTop_ = 1;\n      element1.computedStyle['position'] = 'fixed';\n      element1.computedStyle['top'] = '12px';\n      element1.autoTop = '0px';\n      element1.offsetWidth = 10;\n      element1.offsetHeight = 10;\n      element5.computedStyle['position'] = 'sticky';\n      element5.computedStyle['top'] = '12px';\n      element5.autoTop = '12px';\n      expect(vsyncTasks).to.have.length(1);\n      const state = {};\n      vsyncTasks[0].measure(state);\n      expect(state['F0'].fixed).to.be.true;\n      expect(state['F0'].top).to.equal('0px');\n      expect(state['F4'].sticky).to.be.true;\n      expect(state['F4'].top).to.equal('12px');\n    });","file":"unit/test-fixed-layer.js","skipped":false,"dir":"test"},{"name":"should override implicit top = auto to 0 w/transient padding","suites":["no-transfer"],"updatePoint":{"line":699,"column":68,"index":24532},"line":699,"code":"    it('should override implicit top = auto to 0 w/transient padding', () => {\n      element1.computedStyle['position'] = 'fixed';\n      element1.computedStyle['top'] = '11px';\n      element1.autoTop = '0px';\n      element1.offsetWidth = 10;\n      element1.offsetHeight = 10;\n      element5.computedStyle['position'] = 'sticky';\n      element5.computedStyle['top'] = '11px';\n      element5.autoTop = '11px';\n      expect(vsyncTasks).to.have.length(1);\n      const state = {};\n      vsyncTasks[0].measure(state);\n      expect(state['F0'].fixed).to.equal(true);\n      expect(state['F0'].top).to.equal('0px');\n\n      // Update to transient padding.\n      env.sandbox.stub(fixedLayer, 'update').callsFake(() => {});\n      fixedLayer.updatePaddingTop(22, /* transient */true);\n      vsyncTasks[0].measure(state);\n      expect(state['F0'].fixed).to.be.true;\n      expect(state['F0'].top).to.equal('0px');\n      expect(state['F4'].sticky).to.be.true;\n      expect(state['F4'].top).to.equal('11px');\n      expect(fixedLayer.paddingTop_).to.equal(22);\n      expect(fixedLayer.committedPaddingTop_).to.equal(11);\n\n      // Update to non-transient padding.\n      fixedLayer.updatePaddingTop(22, /* transient */false);\n      vsyncTasks[0].measure(state);\n      expect(state['F0'].fixed).to.be.true;\n      expect(state['F0'].top).to.equal(''); // Reset completely.\n      expect(state['F4'].sticky).to.be.true;\n      expect(state['F4'].top).to.equal('11px');\n      expect(fixedLayer.paddingTop_).to.equal(22);\n      expect(fixedLayer.committedPaddingTop_).to.equal(22);\n    });","file":"unit/test-fixed-layer.js","skipped":false,"dir":"test"},{"name":"should always collect and update top = 0","suites":["no-transfer"],"updatePoint":{"line":735,"column":48,"index":26076},"line":735,"code":"    it('should always collect and update top = 0', () => {\n      element1.computedStyle['position'] = 'fixed';\n      element1.computedStyle['top'] = '0px';\n      element1.autoTop = '0px';\n      element1.offsetWidth = 10;\n      element1.offsetHeight = 10;\n      element5.computedStyle['position'] = 'sticky';\n      element5.computedStyle['top'] = '0px';\n      element5.autoTop = '0px';\n      expect(vsyncTasks).to.have.length(1);\n      const state = {};\n      vsyncTasks[0].measure(state);\n      expect(state['F0'].fixed).to.be.true;\n      expect(state['F0'].top).to.equal('0px');\n      expect(state['F4'].sticky).to.be.true;\n      expect(state['F4'].top).to.equal('0px');\n    });","file":"unit/test-fixed-layer.js","skipped":false,"dir":"test"},{"name":"should handle transitions","suites":["no-transfer"],"updatePoint":{"line":752,"column":33,"index":26741},"line":752,"code":"    it('should handle transitions', () => {\n      element1.computedStyle['position'] = 'fixed';\n      element1.computedStyle['transition'] = 'all .4s ease';\n      element1.computedStyle['top'] = '0px';\n      element1.autoTop = '0px';\n      element1.offsetWidth = 10;\n      element1.offsetHeight = 10;\n      element5.computedStyle['position'] = 'sticky';\n      element5.computedStyle['transition'] = 'all .4s ease';\n      element5.computedStyle['top'] = '0px';\n      element5.autoTop = '0px';\n      expect(vsyncTasks).to.have.length(1);\n      const state = {};\n      vsyncTasks[0].measure(state);\n      expect(state['F0'].fixed).to.be.true;\n      expect(state['F0'].top).to.equal('0px');\n      expect(element1.style.transition).to.equal('none !important');\n      expect(state['F4'].sticky).to.be.true;\n      expect(state['F4'].top).to.equal('0px');\n      expect(element5.style.transition).to.equal('none !important');\n      vsyncTasks[0].mutate({});\n      expect(element1.style.transition).to.equal('');\n      expect(element5.style.transition).to.equal('');\n    });","file":"unit/test-fixed-layer.js","skipped":false,"dir":"test"},{"name":"should mutate element to fixed without top","suites":["no-transfer"],"updatePoint":{"line":776,"column":50,"index":27823},"line":776,"code":"    it('should mutate element to fixed without top', () => {\n      const fe = fixedLayer.elements_[0];\n      fixedLayer.mutateElement_(fe, 1, {\n        fixed: true,\n        sticky: false,\n        top: ''\n      });\n      expect(fe.fixedNow).to.be.true;\n      expect(fe.stickyNow).to.be.false;\n      expect(fe.element.style.top).to.equal('15px');\n      expect(fixedLayer.transferLayer_).to.be.null;\n    });","file":"unit/test-fixed-layer.js","skipped":false,"dir":"test"},{"name":"should mutate element to sticky without top","suites":["no-transfer"],"updatePoint":{"line":788,"column":51,"index":28229},"line":788,"code":"    it('should mutate element to sticky without top', () => {\n      const fe = fixedLayer.elements_[4];\n      fixedLayer.mutateElement_(fe, 1, {\n        fixed: false,\n        sticky: true,\n        top: ''\n      });\n      expect(fe.fixedNow).to.be.false;\n      expect(fe.stickyNow).to.be.true;\n      expect(fe.element.style.top).to.equal('15px');\n      expect(fixedLayer.transferLayer_).to.be.null;\n    });","file":"unit/test-fixed-layer.js","skipped":false,"dir":"test"},{"name":"should mutate element to fixed with top","suites":["no-transfer"],"updatePoint":{"line":800,"column":47,"index":28631},"line":800,"code":"    it('should mutate element to fixed with top', () => {\n      const fe = fixedLayer.elements_[0];\n      element1.style.top = '';\n      fixedLayer.mutateElement_(fe, 1, {\n        fixed: true,\n        top: '17px'\n      });\n      expect(fe.fixedNow).to.be.true;\n      expect(fe.element.style.top).to.equal('calc(17px + 11px)');\n    });","file":"unit/test-fixed-layer.js","skipped":false,"dir":"test"},{"name":"should add needed padding to sticky top if transferring","suites":["no-transfer"],"updatePoint":{"line":810,"column":63,"index":28982},"line":810,"code":"    it('should add needed padding to sticky top if transferring', () => {\n      const fe = fixedLayer.elements_[4];\n      fixedLayer.transfer_ = true;\n      fe.element.style.top = '';\n      fixedLayer.mutateElement_(fe, 1, {\n        sticky: true,\n        top: '17px'\n      });\n      expect(fe.stickyNow).to.be.true;\n      expect(fe.element.style.top).to.equal('17px');\n    });","file":"unit/test-fixed-layer.js","skipped":false,"dir":"test"},{"name":"should not add unneeded padding to sticky top if transferring","suites":["no-transfer"],"updatePoint":{"line":821,"column":69,"index":29365},"line":821,"code":"    it('should not add unneeded padding to sticky top if transferring', () => {\n      const fe = fixedLayer.elements_[4];\n      fixedLayer.transfer_ = true;\n      fixedLayer.paddingTop_ = 0;\n      fe.element.style.top = '';\n      fixedLayer.mutateElement_(fe, 1, {\n        sticky: true,\n        top: '17px'\n      });\n      expect(fe.stickyNow).to.be.true;\n      expect(fe.element.style.top).to.equal('calc(17px - 11px)');\n    });","file":"unit/test-fixed-layer.js","skipped":false,"dir":"test"},{"name":"should mutate element to sticky with top","suites":["no-transfer"],"updatePoint":{"line":833,"column":48,"index":29774},"line":833,"code":"    it('should mutate element to sticky with top', () => {\n      const fe = fixedLayer.elements_[4];\n      fixedLayer.mutateElement_(fe, 1, {\n        sticky: true,\n        top: '17px'\n      });\n      expect(fe.stickyNow).to.be.true;\n      expect(fe.element.style.top).to.equal('calc(17px + 11px)');\n    });","file":"unit/test-fixed-layer.js","skipped":false,"dir":"test"},{"name":"should reset top upon being removed from fixedlayer","suites":["no-transfer"],"updatePoint":{"line":842,"column":59,"index":30092},"line":842,"code":"    it('should reset top upon being removed from fixedlayer', () => {\n      expect(fixedLayer.elements_).to.have.length(5);\n\n      // Add.\n      fixedLayer.addElement(element6, '*');\n      expect(fixedLayer.elements_).to.have.length(6);\n      const fe = fixedLayer.elements_[5];\n      expect(fe.id).to.equal('F5');\n      expect(fe.element).to.equal(element6);\n      expect(fe.selectors).to.deep.equal(['*']);\n      fixedLayer.mutateElement_(fe, 1, {\n        fixed: true,\n        top: '17px'\n      });\n      expect(fe.fixedNow).to.be.true;\n      expect(fe.element.style.top).to.equal('calc(17px + 11px)');\n      // Remove.\n      fixedLayer.vsync_ = {\n        mutate(callback) {\n          callback();\n        }\n      };\n      fixedLayer.removeElement(element6);\n      expect(fixedLayer.elements_).to.have.length(5);\n      expect(element6.style.top).to.equal('');\n    });","file":"unit/test-fixed-layer.js","skipped":false,"dir":"test"},{"name":"should reset sticky top upon being removed from fixedlayer","suites":["no-transfer"],"updatePoint":{"line":868,"column":66,"index":30968},"line":868,"code":"    it('should reset sticky top upon being removed from fixedlayer', () => {\n      expect(fixedLayer.elements_).to.have.length(5);\n      const fe = fixedLayer.elements_[4];\n      fixedLayer.mutateElement_(fe, 1, {\n        sticky: true,\n        top: '17px'\n      });\n      expect(fe.stickyNow).to.be.true;\n      expect(fe.element.style.top).to.equal('calc(17px + 11px)');\n\n      // Remove.\n      fixedLayer.vsync_ = {\n        mutate(callback) {\n          callback();\n        }\n      };\n      fixedLayer.removeElement(element5);\n      expect(fixedLayer.elements_).to.have.length(4);\n      expect(element5.style.top).to.equal('');\n    });","file":"unit/test-fixed-layer.js","skipped":false,"dir":"test"},{"name":"should transform fixed elements with anchored top","suites":["no-transfer"],"updatePoint":{"line":888,"column":57,"index":31595},"line":888,"code":"    it('should transform fixed elements with anchored top', () => {\n      const fe = fixedLayer.elements_[0];\n      fixedLayer.mutateElement_(fe, 1, {\n        fixed: true,\n        top: '17px'\n      });\n      expect(fe.fixedNow).to.be.true;\n      expect(fe.element.style.top).to.equal('calc(17px + 11px)');\n      fixedLayer.transformMutate('translateY(-10px)');\n      expect(fe.element.style.transform).to.equal('translateY(-10px)');\n      expect(fe.element.style.transition).to.equal('none');\n\n      // Reset back.\n      fixedLayer.transformMutate(null);\n      expect(fe.element.style.transform).to.equal('');\n      expect(fe.element.style.transition).to.equal('');\n    });","file":"unit/test-fixed-layer.js","skipped":false,"dir":"test"},{"name":"should NOT transform sticky elements with anchored top","suites":["no-transfer"],"updatePoint":{"line":905,"column":62,"index":32274},"line":905,"code":"    it('should NOT transform sticky elements with anchored top', () => {\n      const fe = fixedLayer.elements_[4];\n      fixedLayer.mutateElement_(fe, 1, {\n        sticky: true,\n        top: '17px'\n      });\n      expect(fe.stickyNow).to.be.true;\n      expect(fe.element.style.top).to.equal('calc(17px + 11px)');\n      fixedLayer.transformMutate('translateY(-10px)');\n      expect(fe.element.style.transform).to.be.undefined;\n      expect(fe.element.style.transition).to.equal('');\n\n      // Reset back.\n      fixedLayer.transformMutate(null);\n      expect(fe.element.style.transform).to.be.undefined;\n      expect(fe.element.style.transition).to.equal('');\n    });","file":"unit/test-fixed-layer.js","skipped":false,"dir":"test"},{"name":"should compound transform with anchored top","suites":["no-transfer"],"updatePoint":{"line":922,"column":51,"index":32929},"line":922,"code":"    it('should compound transform with anchored top', () => {\n      const fe = fixedLayer.elements_[0];\n      fixedLayer.mutateElement_(fe, 1, {\n        fixed: true,\n        top: '17px',\n        transform: 'scale(2)'\n      });\n      fixedLayer.transformMutate('translateY(-10px)');\n      expect(fe.element.style.transform).to.equal('scale(2) translateY(-10px)');\n    });","file":"unit/test-fixed-layer.js","skipped":false,"dir":"test"},{"name":"should NOT transform fixed elements w/o anchored top","suites":["no-transfer"],"updatePoint":{"line":932,"column":60,"index":33309},"line":932,"code":"    it('should NOT transform fixed elements w/o anchored top', () => {\n      const fe = fixedLayer.elements_[0];\n      fe.element.style.transform = '';\n      fixedLayer.mutateElement_(fe, 1, {\n        fixed: true,\n        top: ''\n      });\n      expect(fe.fixedNow).to.be.true;\n      fixedLayer.transformMutate('translateY(-10px)');\n      expect(fe.element.style.transform).to.equal('');\n    });","file":"unit/test-fixed-layer.js","skipped":false,"dir":"test"},{"name":"should user error when inline styles may be overriden","suites":["no-transfer"],"updatePoint":{"line":943,"column":61,"index":33706},"line":943,"code":"    it('should user error when inline styles may be overriden', () => {\n      // Set both attribute and property since element1 is a fake element.\n      element1.setAttribute('style', 'bottom: 10px');\n      element1.style.bottom = '10px';\n      const userError = env.sandbox.stub(user(), 'error');\n      fixedLayer.setup();\n      // Expect error regarding inline styles.\n      expect(userError).calledWithMatch('FixedLayer', /not supported yet for fixed or sticky elements/);\n    });","file":"unit/test-fixed-layer.js","skipped":false,"dir":"test"},{"name":"should trigger an update","suites":["no-transfer","hidden toggle"],"updatePoint":{"line":958,"column":34,"index":34414},"line":958,"code":"      it('should trigger an update', () => {\n        element1.computedStyle['position'] = 'fixed';\n        element1.offsetWidth = 10;\n        element1.offsetHeight = 10;\n        element1.computedStyle['display'] = 'none';\n        expect(vsyncTasks).to.have.length(1);\n        const state = {};\n        vsyncTasks[0].measure(state);\n        expect(state['F0'].fixed).to.be.false;\n        element1.computedStyle['display'] = '';\n        env.sandbox.stub(timer, 'delay').callsFake(callback => {\n          callback();\n        });\n        return mutationObserver.__mutate({\n          attributeName: 'hidden'\n        }).then(() => {\n          expect(vsyncTasks).to.have.length(2);\n          const state = {};\n          vsyncTasks[0].measure(state);\n          expect(state['F0'].fixed).to.be.true;\n          expect(state['F0'].top).to.equal('');\n          expect(state['F0'].zIndex).to.equal('');\n        });\n      });","file":"unit/test-fixed-layer.js","skipped":false,"dir":"test"},{"name":"should ignore descendants of already-tracked elements","suites":["no-transfer","hidden toggle"],"updatePoint":{"line":983,"column":61,"index":35361},"line":983,"code":"    it('should ignore descendants of already-tracked elements', () => {\n      const updateStub = env.sandbox.stub(fixedLayer, 'update');\n      expect(fixedLayer.elements_).to.have.length(5);\n      element1.appendChild(element6);\n\n      // Add.\n      fixedLayer.addElement(element6);\n      expect(updateStub).not.to.have.been.called;\n      expect(fixedLayer.elements_).to.have.length(5);\n    });","file":"unit/test-fixed-layer.js","skipped":false,"dir":"test"},{"name":"should replace descendants of tracked elements","suites":["no-transfer","hidden toggle"],"updatePoint":{"line":993,"column":54,"index":35749},"line":993,"code":"    it('should replace descendants of tracked elements', () => {\n      const updateStub = env.sandbox.stub(fixedLayer, 'update');\n      expect(fixedLayer.elements_).to.have.length(5);\n      element6.appendChild(element1);\n\n      // Add.\n      fixedLayer.addElement(element6);\n      expect(updateStub).to.be.calledOnce;\n      expect(fixedLayer.elements_).to.have.length(5);\n      const fe = fixedLayer.elements_[4];\n      expect(fe.id).to.equal('F5');\n      expect(fe.element).to.equal(element6);\n      expect(fe.selectors).to.deep.equal(['*']);\n      expect(fe.forceTransfer).to.be.undefined;\n    });","file":"unit/test-fixed-layer.js","skipped":false,"dir":"test"},{"name":"should not instantiate transfer layer on setup","suites":["with-transfer"],"updatePoint":{"line":1021,"column":54,"index":36760},"line":1021,"code":"    it('should not instantiate transfer layer on setup', () => {\n      const win = new FakeWindow();\n      const ampdoc = new AmpDocSingle(win);\n      installPlatformService(win);\n      installTimerService(win);\n      installViewerServiceForDoc(ampdoc);\n      viewer = Services.viewerForDoc(ampdoc);\n      viewer.isEmbedded = () => true;\n      const fixedLayer = new FixedLayer(ampdoc, vsyncApi, borderTop, paddingTop, transfer);\n      fixedLayer.setup();\n      expect(fixedLayer.transferLayer_).to.be.null;\n    });","file":"unit/test-fixed-layer.js","skipped":false,"dir":"test"},{"name":"should collect turn off transferrable","suites":["with-transfer"],"updatePoint":{"line":1033,"column":45,"index":37267},"line":1033,"code":"    it('should collect turn off transferrable', () => {\n      element1.computedStyle['position'] = 'fixed';\n      element1.offsetWidth = 10;\n      element1.offsetHeight = 10;\n      element5.computedStyle['position'] = 'sticky';\n      expect(vsyncTasks).to.have.length(1);\n      const state = {};\n      vsyncTasks[0].measure(state);\n      expect(state['F0'].fixed).to.be.true;\n      expect(state['F0'].transferrable).to.be.false;\n      expect(state['F1'].fixed).to.equal(false);\n      expect(state['F4'].sticky).to.be.true;\n      expect(state['F4'].transferrable).to.be.false;\n    });","file":"unit/test-fixed-layer.js","skipped":false,"dir":"test"},{"name":"should collect turn on transferrable with top = 0","suites":["with-transfer"],"updatePoint":{"line":1047,"column":57,"index":37863},"line":1047,"code":"    it('should collect turn on transferrable with top = 0', () => {\n      element1.computedStyle['position'] = 'fixed';\n      element1.offsetWidth = 10;\n      element1.offsetHeight = 10;\n      element1.computedStyle['top'] = '0px';\n      element5.computedStyle['position'] = 'sticky';\n      element5.computedStyle['top'] = '0px';\n      expect(vsyncTasks).to.have.length(1);\n      const state = {};\n      vsyncTasks[0].measure(state);\n      expect(state['F0'].fixed).to.be.true;\n      expect(state['F0'].transferrable).to.be.true;\n      expect(state['F0'].top).to.equal('0px');\n      expect(state['F4'].sticky).to.be.true;\n      expect(state['F4'].transferrable).to.be.false;\n      expect(state['F4'].top).to.equal('0px');\n    });","file":"unit/test-fixed-layer.js","skipped":false,"dir":"test"},{"name":"should collect turn on transferrable with top != 0","suites":["with-transfer"],"updatePoint":{"line":1064,"column":58,"index":38594},"line":1064,"code":"    it('should collect turn on transferrable with top != 0', () => {\n      element1.computedStyle['position'] = 'fixed';\n      element1.offsetWidth = 10;\n      element1.offsetHeight = 10;\n      element1.computedStyle['top'] = '2px';\n      element5.computedStyle['position'] = 'sticky';\n      element5.computedStyle['top'] = '2px';\n      expect(vsyncTasks).to.have.length(1);\n      const state = {};\n      vsyncTasks[0].measure(state);\n      expect(state['F0'].fixed).to.be.true;\n      expect(state['F0'].transferrable).to.be.true;\n      expect(state['F0'].top).to.equal('2px');\n      expect(state['F4'].sticky).to.be.true;\n      expect(state['F4'].transferrable).to.be.false;\n      expect(state['F4'].top).to.equal('2px');\n    });","file":"unit/test-fixed-layer.js","skipped":false,"dir":"test"},{"name":"should collect turn on transferrable with bottom = 0","suites":["with-transfer"],"updatePoint":{"line":1081,"column":60,"index":39327},"line":1081,"code":"    it('should collect turn on transferrable with bottom = 0', () => {\n      element1.computedStyle['position'] = 'fixed';\n      element1.offsetWidth = 10;\n      element1.offsetHeight = 10;\n      element1.computedStyle['top'] = '';\n      element1.computedStyle['bottom'] = '0px';\n      element5.computedStyle['position'] = 'sticky';\n      element5.computedStyle['top'] = '';\n      element5.computedStyle['bottom'] = '0px';\n      expect(vsyncTasks).to.have.length(1);\n      const state = {};\n      vsyncTasks[0].measure(state);\n      expect(state['F0'].fixed).to.be.true;\n      expect(state['F0'].transferrable).to.be.true;\n      expect(state['F4'].sticky).to.be.true;\n      expect(state['F4'].transferrable).to.be.false;\n    });","file":"unit/test-fixed-layer.js","skipped":false,"dir":"test"},{"name":"should not disregard invisible element if it has forceTransfer","suites":["with-transfer"],"updatePoint":{"line":1098,"column":70,"index":40066},"line":1098,"code":"    it('should not disregard invisible element if it has forceTransfer', () => {\n      element1.computedStyle['position'] = 'fixed';\n      element1.offsetWidth = 0;\n      element1.offsetHeight = 0;\n      element5.computedStyle['position'] = 'sticky';\n      expect(vsyncTasks).to.have.length(1);\n      let state = {};\n      vsyncTasks[0].measure(state);\n      expect(state['F0'].fixed).to.be.false;\n      expect(state['F0'].transferrable).to.be.false;\n      expect(state['F4'].sticky).to.be.true;\n      expect(state['F4'].transferrable).to.be.false;\n\n      // Add.\n      state = {};\n      fixedLayer.setupElement_(element1, '*', 'fixed', true);\n      expect(vsyncTasks).to.have.length(1);\n      vsyncTasks[0].measure(state);\n      expect(state['F0'].fixed).to.be.true;\n      expect(state['F0'].transferrable).to.be.true;\n    });","file":"unit/test-fixed-layer.js","skipped":false,"dir":"test"},{"name":"should disregard element if it has forceTransfer=false","suites":["with-transfer"],"updatePoint":{"line":1119,"column":62,"index":40886},"line":1119,"code":"    it('should disregard element if it has forceTransfer=false', () => {\n      element1.computedStyle['position'] = 'fixed';\n      element1.offsetWidth = 10;\n      element1.offsetHeight = 10;\n      element1.computedStyle['top'] = '0px';\n      element5.computedStyle['position'] = 'sticky';\n      expect(vsyncTasks).to.have.length(1);\n      let state = {};\n      vsyncTasks[0].measure(state);\n      expect(state['F0'].fixed).to.be.true;\n      expect(state['F0'].transferrable).to.be.true;\n      expect(state['F4'].sticky).to.be.true;\n      expect(state['F4'].transferrable).to.be.false;\n\n      // Add.\n      state = {};\n      fixedLayer.setupElement_(element1, '*', 'fixed', false);\n      expect(vsyncTasks).to.have.length(1);\n      vsyncTasks[0].measure(state);\n      expect(state['F0'].fixed).to.be.true;\n      expect(state['F0'].transferrable).to.be.false;\n    });","file":"unit/test-fixed-layer.js","skipped":false,"dir":"test"},{"name":"should collect turn on transferrable with bottom != 0","suites":["with-transfer"],"updatePoint":{"line":1141,"column":61,"index":41752},"line":1141,"code":"    it('should collect turn on transferrable with bottom != 0', () => {\n      element1.computedStyle['position'] = 'fixed';\n      element1.offsetWidth = 10;\n      element1.offsetHeight = 10;\n      element1.style['top'] = '';\n      element1.computedStyle['top'] = '';\n      element1.computedStyle['bottom'] = '2px';\n      element5.computedStyle['position'] = 'sticky';\n      element5.style['top'] = '';\n      element5.computedStyle['top'] = '';\n      element5.computedStyle['bottom'] = '2px';\n      expect(vsyncTasks).to.have.length(1);\n      const state = {};\n      vsyncTasks[0].measure(state);\n      expect(state['F0'].fixed).to.be.true;\n      expect(state['F0'].transferrable).to.be.true;\n      expect(state['F4'].sticky).to.be.true;\n      expect(state['F4'].transferrable).to.be.false;\n    });","file":"unit/test-fixed-layer.js","skipped":false,"dir":"test"},{"name":"should collect z-index","suites":["with-transfer"],"updatePoint":{"line":1160,"column":30,"index":42519},"line":1160,"code":"    it('should collect z-index', () => {\n      element1.computedStyle['position'] = 'fixed';\n      element1.offsetWidth = 10;\n      element1.offsetHeight = 10;\n      element1.computedStyle['zIndex'] = '101';\n      expect(vsyncTasks).to.have.length(1);\n      const state = {};\n      vsyncTasks[0].measure(state);\n      expect(state['F0'].fixed).to.be.true;\n      expect(state['F0'].zIndex).to.equal('101');\n    });","file":"unit/test-fixed-layer.js","skipped":false,"dir":"test"},{"name":"should transfer element","suites":["with-transfer"],"updatePoint":{"line":1171,"column":31,"index":42934},"line":1171,"code":"    it('should transfer element', () => {\n      const fe = fixedLayer.elements_[0];\n      fixedLayer.mutateElement_(fe, 1, {\n        fixed: true,\n        transferrable: true,\n        zIndex: '11'\n      });\n      expect(fe.fixedNow).to.be.true;\n      expect(fe.placeholder).to.exist;\n      expect(fe.placeholder).to.have.attribute('hidden');\n      expect(fixedLayer.transferLayer_).to.exist;\n      const layer = fixedLayer.transferLayer_.layer_;\n      expect(layer.style.pointerEvents).to.equal('none');\n      expect(fe.element.parentElement).to.equal(layer);\n      expect(fe.element.style.pointerEvents).to.equal('initial');\n      expect(fe.element.style.zIndex).to.equal('calc(10001 + 11)');\n    });","file":"unit/test-fixed-layer.js","skipped":false,"dir":"test"},{"name":"should ignore transfer when non-transferrable","suites":["with-transfer"],"updatePoint":{"line":1188,"column":53,"index":43657},"line":1188,"code":"    it('should ignore transfer when non-transferrable', () => {\n      const fe = fixedLayer.elements_[0];\n      fixedLayer.mutateElement_(fe, 1, {\n        fixed: true,\n        transferrable: false\n      });\n      expect(fe.fixedNow).to.be.true;\n      expect(fe.placeholder).to.not.exist;\n      expect(fixedLayer.transferLayer_).to.not.exist;\n    });","file":"unit/test-fixed-layer.js","skipped":false,"dir":"test"},{"name":"should return transfered element if it no longer matches","suites":["with-transfer"],"updatePoint":{"line":1198,"column":64,"index":44018},"line":1198,"code":"    it('should return transfered element if it no longer matches', () => {\n      const fe = fixedLayer.elements_[0];\n      fe.element.matches = () => false;\n      fixedLayer.mutateElement_(fe, 1, {\n        fixed: true,\n        transferrable: true,\n        zIndex: '11'\n      });\n      expect(fe.fixedNow).to.be.true;\n      expect(fe.placeholder).to.exist;\n      expect(fixedLayer.transferLayer_).to.exist;\n      expect(fe.element.parentElement).to.not.equal(fixedLayer.transferLayer_.layer_);\n      expect(fe.placeholder.parentElement).to.be.null;\n      expect(fe.element.style.zIndex).to.equal('');\n    });","file":"unit/test-fixed-layer.js","skipped":false,"dir":"test"},{"name":"should remove transfered element if it no longer exists","suites":["with-transfer"],"updatePoint":{"line":1213,"column":63,"index":44625},"line":1213,"code":"    it('should remove transfered element if it no longer exists', () => {\n      const fe = fixedLayer.elements_[0];\n\n      // Add.\n      fixedLayer.mutateElement_(fe, 1, {\n        fixed: true,\n        transferrable: true,\n        zIndex: '11'\n      });\n      expect(fe.fixedNow).to.be.true;\n      expect(fe.placeholder).to.exist;\n      expect(fe.element.parentElement).to.equal(fixedLayer.transferLayer_.layer_);\n      expect(fixedLayer.transferLayer_).to.exist;\n      expect(fixedLayer.transferLayer_.layer_.id).to.equal('doc-body-id');\n\n      // Remove from DOM.\n      fe.element.parentElement.removeChild(fe.element);\n      fixedLayer.mutateElement_(fe, 1, {\n        fixed: false,\n        transferrable: false\n      });\n      expect(fe.fixedNow).to.be.false;\n      expect(fe.placeholder.parentElement).to.not.exist;\n    });","file":"unit/test-fixed-layer.js","skipped":false,"dir":"test"},{"name":"should disregard transparent element","suites":["with-transfer"],"updatePoint":{"line":1237,"column":44,"index":45433},"line":1237,"code":"    it('should disregard transparent element', () => {\n      element1.computedStyle['position'] = 'fixed';\n      element1.offsetWidth = 10;\n      element1.offsetHeight = 10;\n      element1.computedStyle['top'] = '0px';\n      element1.computedStyle['opacity'] = '0';\n      expect(vsyncTasks).to.have.length(1);\n      const state = {};\n      vsyncTasks[0].measure(state);\n      expect(state['F0'].fixed).to.equal(true);\n      expect(state['F0'].transferrable).to.equal(false);\n    });","file":"unit/test-fixed-layer.js","skipped":false,"dir":"test"},{"name":"should force transfer for visibility=hidden element","suites":["with-transfer"],"updatePoint":{"line":1249,"column":59,"index":45931},"line":1249,"code":"    it('should force transfer for visibility=hidden element', () => {\n      element1.computedStyle['position'] = 'fixed';\n      element1.offsetWidth = 10;\n      element1.offsetHeight = 10;\n      element1.computedStyle['top'] = '0px';\n      element1.computedStyle['visibility'] = 'hidden';\n      expect(vsyncTasks).to.have.length(1);\n      const state = {};\n      vsyncTasks[0].measure(state);\n      expect(state['F0'].fixed).to.equal(true);\n      expect(state['F0'].transferrable).to.equal(true);\n    });","file":"unit/test-fixed-layer.js","skipped":false,"dir":"test"},{"name":"should user error when inline styles may be overriden","suites":["with-transfer"],"updatePoint":{"line":1261,"column":61,"index":46438},"line":1261,"code":"    it('should user error when inline styles may be overriden', () => {\n      // Set both attribute and property since element1 is a fake element.\n      element1.setAttribute('style', 'bottom: 10px');\n      element1.style.bottom = '10px';\n      const userError = env.sandbox.stub(user(), 'error');\n      fixedLayer.setup();\n      // Expect error regarding inline styles.\n      expect(userError).calledWithMatch('FixedLayer', /not supported yet for fixed or sticky elements/);\n    });","file":"unit/test-fixed-layer.js","skipped":false,"dir":"test"},{"name":"should trigger an update","suites":["with-transfer","hidden toggle"],"updatePoint":{"line":1276,"column":34,"index":47146},"line":1276,"code":"      it('should trigger an update', () => {\n        element1.computedStyle['position'] = 'fixed';\n        element1.offsetWidth = 10;\n        element1.offsetHeight = 10;\n        element1.computedStyle['display'] = 'none';\n        expect(vsyncTasks).to.have.length(1);\n        const state = {};\n        vsyncTasks[0].measure(state);\n        expect(state['F0'].fixed).to.be.false;\n        element1.computedStyle['display'] = '';\n        env.sandbox.stub(timer, 'delay').callsFake(callback => {\n          callback();\n        });\n        return mutationObserver.__mutate({\n          attributeName: 'hidden'\n        }).then(() => {\n          expect(vsyncTasks).to.have.length(2);\n          const state = {};\n          vsyncTasks[0].measure(state);\n          expect(state['F0'].fixed).to.be.true;\n          expect(state['F0'].top).to.equal('');\n          expect(state['F0'].zIndex).to.equal('');\n        });\n      });","file":"unit/test-fixed-layer.js","skipped":false,"dir":"test"},{"name":"should sync attributes between body and layer","suites":["with-transfer","hidden toggle"],"updatePoint":{"line":1301,"column":53,"index":48085},"line":1301,"code":"    it('should sync attributes between body and layer', () => {\n      const {\n        body\n      } = ampdoc.win.document;\n\n      // Necessary to create the fixed layer\n      element1.computedStyle['position'] = 'fixed';\n      element1.offsetWidth = 10;\n      element1.offsetHeight = 10;\n      element1.computedStyle['top'] = '0px';\n      fixedLayer.vsync_ = {\n        runPromise({\n          measure,\n          mutate\n        }, state) {\n          measure(state);\n          mutate(state);\n          return Promise.resolve();\n        }\n      };\n      body.setAttribute('test', 'hello');\n      fixedLayer.update();\n      expect(fixedLayer.transferLayer_).to.exist;\n      const layer = fixedLayer.transferLayer_.layer_;\n      expect(layer.getAttribute('test')).to.equal('hello');\n      body.removeAttribute('test');\n      body.setAttribute('test1', 'hello1');\n      body.setAttribute('test2', 'hello2');\n      fixedLayer.update();\n      expect(layer.getAttribute('test')).to.equal(null);\n      expect(layer.getAttribute('test1')).to.equal('hello1');\n      expect(layer.getAttribute('test2')).to.equal('hello2');\n      body.removeAttribute('test1');\n      body.removeAttribute('test2');\n      fixedLayer.update();\n      expect(layer.getAttribute('test')).to.equal(null);\n      expect(layer.getAttribute('test1')).to.equal(null);\n      expect(layer.getAttribute('test2')).to.equal(null);\n      body.attributes.push(new FakeAttr('[class]', 'amp-bind'));\n      fixedLayer.update();\n      expect(layer.getAttribute('[class]')).to.equal('amp-bind');\n\n      // [i-amphtml-lightbox] is an exception and should be preserved.\n      layer.setAttribute('i-amphtml-lightbox', '');\n      fixedLayer.update();\n      expect(layer.hasAttribute('i-amphtml-lightbox')).to.be.true;\n      expect(body.hasAttribute('i-amphtml-lightbox')).to.be.false;\n    });","file":"unit/test-fixed-layer.js","skipped":false,"dir":"test"},{"name":"should sync invalid-named attributes to layer","suites":["with-transfer","hidden toggle"],"updatePoint":{"line":1349,"column":53,"index":49918},"line":1349,"code":"    it('should sync invalid-named attributes to layer', () => {\n      // Holy poop it's hard to inject an invalid-named attribute.\n      // This is a sanity check using real Elements to ensure we can insert\n      // a cloned attribute into another element.\n      let div = document.createElement('div');\n      div.innerHTML = '<div [class]=\"amp-bind\"></div>';\n      div = div.firstElementChild;\n      const attr = div.attributes[0];\n      expect(attr.name).to.equal('[class]');\n      expect(attr.value).to.equal('amp-bind');\n      const body = document.createElement('body');\n      body.attributes.setNamedItem(attr.cloneNode(false));\n      expect(div.getAttribute('[class]')).to.equal('amp-bind');\n      expect(body.getAttribute('[class]')).to.equal('amp-bind');\n      expect(body.attributes.getNamedItem('[class]')).to.not.equal(div.attributes.getNamedItem('[class]'));\n    });","file":"unit/test-fixed-layer.js","skipped":false,"dir":"test"},{"name":"should not perform setup when served canonically","suites":["with-transfer","hidden toggle"],"updatePoint":{"line":1393,"column":54,"index":51385},"line":1393,"code":"  it('should not perform setup when served canonically', () => {\n    ampdoc = new AmpDocSingle(win);\n    installPlatformService(win);\n    installTimerService(win);\n    installViewerServiceForDoc(ampdoc);\n    viewer = Services.viewerForDoc(ampdoc);\n    viewer.isEmbedded = () => false;\n    const fixedLayer = new FixedLayer(ampdoc, vsyncApi, /* borderTop */0, /* paddingTop */11, /* transfer */false);\n    const executed = fixedLayer.setup();\n    expect(executed).to.be.false;\n  });","file":"unit/test-fixed-layer.js","skipped":false,"dir":"test"},{"name":"should perform setup when served within a viewer","suites":["with-transfer","hidden toggle"],"updatePoint":{"line":1404,"column":54,"index":51867},"line":1404,"code":"  it('should perform setup when served within a viewer', () => {\n    ampdoc = new AmpDocSingle(win);\n    installPlatformService(win);\n    installTimerService(win);\n    installViewerServiceForDoc(ampdoc);\n    viewer = Services.viewerForDoc(ampdoc);\n    viewer.isEmbedded = () => true;\n    const fixedLayer = new FixedLayer(ampdoc, vsyncApi, /* borderTop */0, /* paddingTop */11, /* transfer */false);\n    const executed = fixedLayer.setup();\n    expect(executed).to.be.true;\n  });","file":"unit/test-fixed-layer.js","skipped":false,"dir":"test"},{"name":"should perform setup when served canonically","suites":["with-transfer","hidden toggle"],"updatePoint":{"line":1442,"column":50,"index":52945},"line":1442,"code":"  it('should perform setup when served canonically', () => {\n    ampdoc = new AmpDocSingle(win);\n    installPlatformService(win);\n    installTimerService(win);\n    installViewerServiceForDoc(ampdoc);\n    viewer = Services.viewerForDoc(ampdoc);\n    viewer.isEmbedded = () => false;\n    const fixedLayer = new FixedLayer(ampdoc, vsyncApi, /* borderTop */0, /* paddingTop */11, /* transfer */false);\n    const executed = fixedLayer.setup();\n    expect(executed).to.be.true;\n  });","file":"unit/test-fixed-layer.js","skipped":false,"dir":"test"},{"name":"should perform setup when served within a viewer","suites":["with-transfer","hidden toggle"],"updatePoint":{"line":1453,"column":54,"index":53426},"line":1453,"code":"  it('should perform setup when served within a viewer', () => {\n    ampdoc = new AmpDocSingle(win);\n    installPlatformService(win);\n    installTimerService(win);\n    installViewerServiceForDoc(ampdoc);\n    viewer = Services.viewerForDoc(ampdoc);\n    viewer.isEmbedded = () => true;\n    const fixedLayer = new FixedLayer(ampdoc, vsyncApi, /* borderTop */0, /* paddingTop */11, /* transfer */false);\n    const executed = fixedLayer.setup();\n    expect(executed).to.be.true;\n  });","file":"unit/test-fixed-layer.js","skipped":false,"dir":"test"},{"name":"should call Animation.animate in animateFixedElements","suites":["with-transfer","hidden toggle"],"updatePoint":{"line":1490,"column":59,"index":54502},"line":1490,"code":"  it('should call Animation.animate in animateFixedElements', () => {\n    const animateSpy = env.sandbox.spy(Animation, 'animate');\n    ampdoc = new AmpDocSingle(win);\n    installPlatformService(win);\n    installTimerService(win);\n    installViewerServiceForDoc(ampdoc);\n    viewer = Services.viewerForDoc(ampdoc);\n    viewer.isEmbedded = () => true;\n    const fixedLayer = new FixedLayer(ampdoc, vsyncApi, /* borderTop */0, /* paddingTop */11, /* transfer */false);\n    fixedLayer.animateFixedElements(123, 456, 789, 'ease-in', false);\n    expect(animateSpy).to.be.calledOnce;\n  });","file":"unit/test-fixed-layer.js","skipped":false,"dir":"test"},{"name":"should subscribe to focus events","suites":[],"updatePoint":{"line":34,"column":38,"index":1039},"line":34,"code":"  it('should subscribe to focus events', () => {\n    expect(eventListeners['focus']).to.exist;\n    expect(windowEventListeners['blur']).to.exist;\n    expect(focusHistory.getLast()).to.be.null;\n  });","file":"unit/test-focus-history.js","skipped":false,"dir":"test"},{"name":"should push focused elements with timestamp","suites":[],"updatePoint":{"line":39,"column":49,"index":1249},"line":39,"code":"  it('should push focused elements with timestamp', () => {\n    const el1 = document.createElement('div');\n    const el2 = document.createElement('div');\n    eventListeners['focus']({\n      target: el1\n    });\n    clock.tick(100);\n    eventListeners['focus']({\n      target: el2\n    });\n    expect(focusHistory.getLast()).to.equal(el2);\n    expect(focusHistory.history_.length).to.equal(2);\n    expect(focusHistory.history_[0]).to.deep.equal({\n      el: el1,\n      time: 0\n    });\n    expect(focusHistory.history_[1]).to.deep.equal({\n      el: el1,\n      time: 100\n    });\n  });","file":"unit/test-focus-history.js","skipped":false,"dir":"test"},{"name":"should push focused elements with timestamp after window.blur","suites":[],"updatePoint":{"line":60,"column":67,"index":1846},"line":60,"code":"  it('should push focused elements with timestamp after window.blur', () => {\n    windowEventListeners['blur']({});\n    expect(focusHistory.history_.length).to.equal(0);\n    const el1 = document.createElement('div');\n    testDoc.activeElement = el1;\n    clock.tick(1000);\n    expect(focusHistory.history_.length).to.equal(1);\n    expect(focusHistory.history_[0].el).to.deep.equal(el1);\n  });","file":"unit/test-focus-history.js","skipped":false,"dir":"test"},{"name":"should push and purge","suites":[],"updatePoint":{"line":69,"column":27,"index":2198},"line":69,"code":"  it('should push and purge', () => {\n    const el1 = document.createElement('div');\n    const el2 = document.createElement('div');\n    eventListeners['focus']({\n      target: el1\n    });\n    clock.tick(100000);\n    eventListeners['focus']({\n      target: el2\n    });\n    expect(focusHistory.getLast()).to.equal(el2);\n    expect(focusHistory.history_.length).to.equal(1);\n    expect(focusHistory.history_[0]).to.deep.equal({\n      el: el1,\n      time: 100000\n    });\n  });","file":"unit/test-focus-history.js","skipped":false,"dir":"test"},{"name":"should replace second push with a new timestamp","suites":[],"updatePoint":{"line":86,"column":53,"index":2697},"line":86,"code":"  it('should replace second push with a new timestamp', () => {\n    const el1 = document.createElement('div');\n    const el2 = document.createElement('div');\n    eventListeners['focus']({\n      target: el1\n    });\n    clock.tick(100);\n    eventListeners['focus']({\n      target: el2\n    });\n    expect(focusHistory.history_.length).to.equal(2);\n    clock.tick(100);\n    eventListeners['focus']({\n      target: el2\n    });\n    expect(focusHistory.history_.length).to.equal(2);\n    expect(focusHistory.getLast()).to.equal(el2);\n    expect(focusHistory.history_[0]).to.deep.equal({\n      el: el1,\n      time: 0\n    });\n    expect(focusHistory.history_[1]).to.deep.equal({\n      el: el1,\n      time: 200\n    });\n  });","file":"unit/test-focus-history.js","skipped":false,"dir":"test"},{"name":"should purge elements before timestamp","suites":[],"updatePoint":{"line":112,"column":44,"index":3402},"line":112,"code":"  it('should purge elements before timestamp', () => {\n    const el1 = document.createElement('div');\n    const el2 = document.createElement('div');\n    clock.tick(100);\n    eventListeners['focus']({\n      target: el1\n    }); // time=100\n    clock.tick(100);\n    eventListeners['focus']({\n      target: el2\n    }); // time=200\n\n    focusHistory.purgeBefore(50);\n    expect(focusHistory.history_.length).to.equal(2);\n    focusHistory.purgeBefore(100);\n    expect(focusHistory.history_.length).to.equal(2);\n    focusHistory.purgeBefore(101);\n    expect(focusHistory.history_.length).to.equal(1);\n    expect(focusHistory.history_[0].el).to.equal(el2);\n    focusHistory.purgeBefore(201);\n    expect(focusHistory.history_.length).to.equal(0);\n  });","file":"unit/test-focus-history.js","skipped":false,"dir":"test"},{"name":"should return false when nothing matches descendants","suites":[],"updatePoint":{"line":134,"column":58,"index":4160},"line":134,"code":"  it('should return false when nothing matches descendants', () => {\n    const el0 = document.createElement('div');\n    expect(focusHistory.hasDescendantsOf(el0)).to.be.false;\n    eventListeners['focus']({\n      target: document.createElement('div')\n    });\n    expect(focusHistory.hasDescendantsOf(el0)).to.be.false;\n  });","file":"unit/test-focus-history.js","skipped":false,"dir":"test"},{"name":"should check active element for descendants","suites":[],"updatePoint":{"line":142,"column":49,"index":4475},"line":142,"code":"  it('should check active element for descendants', () => {\n    const el0 = document.createElement('div');\n    const el01 = document.createElement('div');\n    el0.appendChild(el01);\n    testDoc.activeElement = el0;\n    expect(focusHistory.hasDescendantsOf(el0)).to.be.true;\n    expect(focusHistory.hasDescendantsOf(document.createElement('div'))).to.be.false;\n    testDoc.activeElement = el01;\n    expect(focusHistory.hasDescendantsOf(el0)).to.be.true;\n  });","file":"unit/test-focus-history.js","skipped":false,"dir":"test"},{"name":"should check history descendants","suites":[],"updatePoint":{"line":152,"column":38,"index":4923},"line":152,"code":"  it('should check history descendants', () => {\n    const el0 = document.createElement('div');\n    const el01 = document.createElement('div');\n    el0.appendChild(el01);\n    eventListeners['focus']({\n      target: el01\n    });\n    expect(focusHistory.hasDescendantsOf(el0)).to.be.true;\n    expect(focusHistory.hasDescendantsOf(el01)).to.be.true;\n    expect(focusHistory.hasDescendantsOf(document.createElement('div'))).to.be.false;\n  });","file":"unit/test-focus-history.js","skipped":false,"dir":"test"},{"name":"should time out if style sheets do not load","suites":["font-stylesheet-timeout"],"updatePoint":{"line":46,"column":51,"index":1781},"line":46,"code":"    it('should time out if style sheets do not load', () => {\n      const link = addLink(undefined, '/does-not-exist.css');\n      fontStylesheetTimeout(win);\n      clock.tick(defaultTimeout - 1);\n      expect(win.document.querySelectorAll('link[rel=\"stylesheet\"][i-amphtml-timeout]')).to.have.length(0);\n      clock.tick(1);\n      expect(win.document.querySelectorAll('link[rel=\"stylesheet\"][i-amphtml-timeout]')).to.have.length(1);\n      const after = win.document.querySelector('link[rel=\"stylesheet\"]');\n      expect(after).to.equal(link);\n      expect(after.href).to.equal(link.href);\n      expect(after.media).to.equal('print');\n      after.href = immediatelyLoadingHref('/* make-it-load */');\n      return new Promise(resolve => {\n        after.addEventListener('load', () => {\n          resolve();\n        });\n      }).then(() => {\n        expect(after.media).to.equal('all');\n      });\n    });","file":"unit/test-font-stylesheet-timeout.js","skipped":false,"dir":"test"},{"name":"should time out from response start","suites":["font-stylesheet-timeout"],"updatePoint":{"line":66,"column":43,"index":2675},"line":66,"code":"    it('should time out from response start', () => {\n      const startTime = 100000;\n      clock.tick(startTime);\n      navigationStart = startTime;\n      clock.tick(250);\n      const link = addLink(undefined, '/does-not-exist.css');\n      fontStylesheetTimeout(win);\n      clock.tick(2500 - 400 - 250 - 1);\n      expect(win.document.querySelectorAll('link[rel=\"stylesheet\"][i-amphtml-timeout]')).to.have.length(0);\n      clock.tick(1);\n      expect(win.document.querySelectorAll('link[rel=\"stylesheet\"][i-amphtml-timeout]')).to.have.length(1);\n      expect(win.document.querySelector('link[rel=\"stylesheet\"]')).to.equal(link);\n      expect(win.document.querySelector('link[rel=\"stylesheet\"]').href).to.equal(link.href);\n    });","file":"unit/test-font-stylesheet-timeout.js","skipped":false,"dir":"test"},{"name":"should time out multiple style sheets and ignore CDN URLs","suites":["font-stylesheet-timeout"],"updatePoint":{"line":80,"column":65,"index":3427},"line":80,"code":"    it('should time out multiple style sheets and ignore CDN URLs', () => {\n      navigationStart = 500;\n      clock.tick(10000);\n      const link0 = addLink(undefined, '/does-not-exist.css');\n      const link1 = addLink(undefined, '/does-not-exist.css');\n      const cdnLink = addLink(undefined, 'https://cdn.ampproject.org/does-not-exist.css');\n      fontStylesheetTimeout(win);\n      expect(win.document.querySelectorAll('link[rel=\"stylesheet\"][i-amphtml-timeout]')).to.have.length(0);\n      clock.tick(1);\n      expect(win.document.querySelectorAll('link[rel=\"stylesheet\"][i-amphtml-timeout]')).to.have.length(2);\n      expect(win.document.querySelectorAll('link[rel=\"stylesheet\"][i-amphtml-timeout]')[0]).to.equal(link0);\n      expect(win.document.querySelectorAll('link[rel=\"stylesheet\"][i-amphtml-timeout]')[1]).to.equal(link1);\n      expect(win.document.querySelectorAll('link[rel=\"stylesheet\"]')[2]).to.equal(cdnLink);\n    });","file":"unit/test-font-stylesheet-timeout.js","skipped":false,"dir":"test"},{"name":"should not change loaded fonts","suites":["font-stylesheet-timeout","font-display: swap"],"updatePoint":{"line":127,"column":40,"index":5136},"line":127,"code":"      it('should not change loaded fonts', () => {\n        fontStylesheetTimeout(win);\n        clock.tick(250);\n        expect(fonts[0].display).to.equal('auto');\n      });","file":"unit/test-font-stylesheet-timeout.js","skipped":false,"dir":"test"},{"name":"should change loading fonts to swap","suites":["font-stylesheet-timeout","font-display: swap"],"updatePoint":{"line":132,"column":45,"index":5314},"line":132,"code":"      it('should change loading fonts to swap', () => {\n        fontStylesheetTimeout(win);\n        expect(fonts[1].display).to.equal('auto');\n        expect(fonts[2].display).to.equal('auto');\n        clock.tick(defaultTimeout);\n        expect(fonts[1].display).to.equal('swap');\n        expect(fonts[2].display).to.equal('swap');\n      });","file":"unit/test-font-stylesheet-timeout.js","skipped":false,"dir":"test"},{"name":"should not override non-default values","suites":["font-stylesheet-timeout","font-display: swap"],"updatePoint":{"line":140,"column":48,"index":5659},"line":140,"code":"      it('should not override non-default values', () => {\n        fontStylesheetTimeout(win);\n        clock.tick(defaultTimeout);\n        expect(fonts[3].display).to.equal('optional');\n      });","file":"unit/test-font-stylesheet-timeout.js","skipped":false,"dir":"test"},{"name":"returns empty if no form passed and no entries appended","suites":["entries"],"updatePoint":{"line":48,"column":67,"index":1748},"line":48,"code":"        it('returns empty if no form passed and no entries appended', () => {\n          const formData = createFormDataWrapper(env.win);\n          expect(fromIterator(formData.entries())).to.be.an('array').that.is.empty;\n        });","file":"unit/test-form-data-wrapper.js","skipped":false,"dir":"test"},{"name":"returns appended string entries","suites":["entries","when entries appended"],"updatePoint":{"line":55,"column":45,"index":2104},"line":55,"code":"          it('returns appended string entries', () => {\n            formData.append('a', '1');\n            formData.append('b', 'true');\n            expect(fromIterator(formData.entries())).to.have.deep.members([['a', '1'], ['b', 'true']]);\n          });","file":"unit/test-form-data-wrapper.js","skipped":false,"dir":"test"},{"name":"returns appended non-string entries","suites":["entries","when entries appended"],"updatePoint":{"line":60,"column":49,"index":2363},"line":60,"code":"          it('returns appended non-string entries', () => {\n            formData.append(1, true);\n            formData.append(-3.4, null);\n            formData.append(false, undefined);\n            expect(fromIterator(formData.entries())).to.have.deep.members([['1', 'true'], ['-3.4', 'null'], ['false', 'undefined']]);\n          });","file":"unit/test-form-data-wrapper.js","skipped":false,"dir":"test"},{"name":"returns appended entries without deleted entries","suites":["entries","when entries appended"],"updatePoint":{"line":66,"column":62,"index":2710},"line":66,"code":"          it('returns appended entries without deleted entries', () => {\n            formData.append('a', '1');\n            formData.append('b', 'true');\n            formData.delete('a');\n            expect(fromIterator(formData.entries())).to.have.deep.members([['b', 'true']]);\n          });","file":"unit/test-form-data-wrapper.js","skipped":false,"dir":"test"},{"name":"does not delete items if a non-present name is deleted","suites":["entries","when entries appended"],"updatePoint":{"line":72,"column":68,"index":3010},"line":72,"code":"          it('does not delete items if a non-present name is deleted', () => {\n            formData.append('a', '1');\n            formData.append('b', 'true');\n            formData.delete('does-not-exist');\n            expect(fromIterator(formData.entries())).to.have.deep.members([['a', '1'], ['b', 'true']]);\n          });","file":"unit/test-form-data-wrapper.js","skipped":false,"dir":"test"},{"name":"returns empty if no entries in form","suites":["entries","when form passed to constructor"],"updatePoint":{"line":85,"column":49,"index":3563},"line":85,"code":"          it('returns empty if no entries in form', () => {\n            const formData = createFormDataWrapper(env.win, form);\n            expect(fromIterator(formData.entries())).to.be.an('array').that.is.empty;\n          });","file":"unit/test-form-data-wrapper.js","skipped":false,"dir":"test"},{"name":"returns text input entries in form","suites":["entries","when form passed to constructor"],"updatePoint":{"line":89,"column":48,"index":3789},"line":89,"code":"          it('returns text input entries in form', () => {\n            const input = env.win.document.createElement('input');\n            input.type = 'text';\n            input.name = 'foo';\n            input.value = 'bar';\n            form.appendChild(input);\n            const formData = createFormDataWrapper(env.win, form);\n            expect(fromIterator(formData.entries())).to.have.deep.members([['foo', 'bar']]);\n          });","file":"unit/test-form-data-wrapper.js","skipped":false,"dir":"test"},{"name":"returns textarea entries in form","suites":["entries","when form passed to constructor"],"updatePoint":{"line":98,"column":46,"index":4222},"line":98,"code":"          it('returns textarea entries in form', () => {\n            const textarea = env.win.document.createElement('textarea');\n            textarea.name = 'foo';\n            textarea.value = 'bar';\n            form.appendChild(textarea);\n            const formData = createFormDataWrapper(env.win, form);\n            expect(fromIterator(formData.entries())).to.have.deep.members([['foo', 'bar']]);\n          });","file":"unit/test-form-data-wrapper.js","skipped":false,"dir":"test"},{"name":"returns checked checkbox entries in form","suites":["entries","when form passed to constructor"],"updatePoint":{"line":106,"column":54,"index":4645},"line":106,"code":"          it('returns checked checkbox entries in form', () => {\n            const input = env.win.document.createElement('input');\n            input.type = 'checkbox';\n            input.name = 'foo';\n            input.value = 'bar';\n            input.checked = true;\n            form.appendChild(input);\n            const formData = createFormDataWrapper(env.win, form);\n            expect(fromIterator(formData.entries())).to.have.deep.members([['foo', 'bar']]);\n          });","file":"unit/test-form-data-wrapper.js","skipped":false,"dir":"test"},{"name":"returns selected single-select entries in form","suites":["entries","when form passed to constructor"],"updatePoint":{"line":116,"column":60,"index":5130},"line":116,"code":"          it('returns selected single-select entries in form', () => {\n            const select = env.win.document.createElement('select');\n            select.name = 'foo';\n            select.multiple = false;\n            const selectedOption = env.win.document.createElement('option');\n            selectedOption.value = 'bar';\n            selectedOption.selected = true;\n            const unselectedOption = env.win.document.createElement('option');\n            unselectedOption.value = 'bang';\n            unselectedOption.selected = false;\n            select.appendChild(selectedOption);\n            select.appendChild(unselectedOption);\n            form.appendChild(select);\n            const formData = createFormDataWrapper(env.win, form);\n            expect(fromIterator(formData.entries())).to.have.deep.members([['foo', 'bar']]);\n          });","file":"unit/test-form-data-wrapper.js","skipped":false,"dir":"test"},{"name":"returns selected multi-select entries in form","suites":["entries","when form passed to constructor"],"updatePoint":{"line":132,"column":59,"index":5983},"line":132,"code":"          it('returns selected multi-select entries in form', () => {\n            const select = env.win.document.createElement('select');\n            select.name = 'foo';\n            select.multiple = true;\n            const selectedOption = env.win.document.createElement('option');\n            selectedOption.value = 'bar';\n            selectedOption.selected = true;\n            const unselectedOption = env.win.document.createElement('option');\n            unselectedOption.value = 'bang';\n            unselectedOption.selected = true;\n            select.appendChild(selectedOption);\n            select.appendChild(unselectedOption);\n            form.appendChild(select);\n            const formData = createFormDataWrapper(env.win, form);\n            expect(fromIterator(formData.entries())).to.have.deep.members([['foo', 'bar'], ['foo', 'bang']]);\n          });","file":"unit/test-form-data-wrapper.js","skipped":false,"dir":"test"},{"name":"deletes form element values","suites":["entries","when form passed to constructor"],"updatePoint":{"line":148,"column":41,"index":6833},"line":148,"code":"          it('deletes form element values', () => {\n            const input = env.win.document.createElement('input');\n            input.type = 'text';\n            input.name = 'foo';\n            input.value = 'bar';\n            form.appendChild(input);\n            const input2 = env.win.document.createElement('input');\n            input2.type = 'text';\n            input2.name = 'baz';\n            input2.value = 'qux';\n            form.appendChild(input2);\n            const formData = createFormDataWrapper(env.win, form);\n            formData.delete('foo');\n            expect(fromIterator(formData.entries())).to.have.deep.members([['baz', 'qux']]);\n          });","file":"unit/test-form-data-wrapper.js","skipped":false,"dir":"test"},{"name":"deletes form element values","suites":["entries","when form passed to constructor"],"updatePoint":{"line":163,"column":41,"index":7504},"line":163,"code":"          it('deletes form element values', () => {\n            const input = env.win.document.createElement('input');\n            input.type = 'text';\n            input.name = 'foo';\n            input.value = 'bar';\n            form.appendChild(input);\n            const input2 = env.win.document.createElement('input');\n            input2.type = 'text';\n            input2.name = 'baz';\n            input2.value = 'qux';\n            form.appendChild(input2);\n            const formData = createFormDataWrapper(env.win, form);\n            formData.delete('foo');\n            expect(fromIterator(formData.entries())).to.have.deep.members([['baz', 'qux']]);\n          });","file":"unit/test-form-data-wrapper.js","skipped":false,"dir":"test"},{"name":"returns multiple form entries and appended entries","suites":["entries","when form passed to constructor"],"updatePoint":{"line":179,"column":62,"index":8208},"line":179,"code":"        it('returns multiple form entries and appended entries', () => {\n          const form = env.win.document.createElement('form');\n          const input = env.win.document.createElement('input');\n          input.type = 'text';\n          input.name = 'foo1';\n          input.value = 'bar';\n          const textarea = env.win.document.createElement('textarea');\n          textarea.name = 'foo2';\n          textarea.value = 'bar';\n          form.appendChild(input);\n          form.appendChild(textarea);\n          env.win.document.body.appendChild(form);\n          const formData = createFormDataWrapper(env.win, form);\n          formData.append('foo1', 'baz');\n          formData.append('42', 'bang');\n          expect(fromIterator(formData.entries())).to.have.deep.members([['foo1', 'bar'], ['foo2', 'bar'], ['foo1', 'baz'], ['42', 'bang']]);\n        });","file":"unit/test-form-data-wrapper.js","skipped":false,"dir":"test"},{"name":"includes the focused submit input at submit-time","suites":["entries","when form passed to constructor"],"updatePoint":{"line":196,"column":60,"index":9065},"line":196,"code":"        it('includes the focused submit input at submit-time', () => {\n          const form = env.win.document.createElement('form');\n          const input = env.win.document.createElement('input');\n          input.type = 'text';\n          input.name = 'foo1';\n          input.value = 'bar';\n          const submit = env.win.document.createElement('input');\n          submit.type = 'submit';\n          submit.name = 'foo2';\n          submit.value = 'baz';\n          form.appendChild(input);\n          form.appendChild(submit);\n          env.win.document.body.appendChild(form);\n          submit.focus();\n          const formData = createFormDataWrapper(env.win, form);\n          expect(fromIterator(formData.entries())).to.have.deep.members([['foo1', 'bar'], ['foo2', 'baz']]);\n        });","file":"unit/test-form-data-wrapper.js","skipped":false,"dir":"test"},{"name":"includes the focused submit button at submit-time","suites":["entries","when form passed to constructor"],"updatePoint":{"line":213,"column":61,"index":9856},"line":213,"code":"        it('includes the focused submit button at submit-time', () => {\n          const form = env.win.document.createElement('form');\n          const input = env.win.document.createElement('input');\n          input.type = 'text';\n          input.name = 'foo1';\n          input.value = 'bar';\n          const submit = env.win.document.createElement('button');\n          submit.name = 'foo2';\n          submit.innerText = 'baz';\n          form.appendChild(input);\n          form.appendChild(submit);\n          env.win.document.body.appendChild(form);\n          submit.focus();\n          const formData = createFormDataWrapper(env.win, form);\n          expect(fromIterator(formData.entries())).to.have.deep.members([['foo1', 'bar'], ['foo2', '']]);\n        });","file":"unit/test-form-data-wrapper.js","skipped":false,"dir":"test"},{"name":"excludes the submit input if it has no name attribute","suites":["entries","when form passed to constructor"],"updatePoint":{"line":244,"column":65,"index":11374},"line":244,"code":"        it('excludes the submit input if it has no name attribute', () => {\n          const form = env.win.document.createElement('form');\n          const input = env.win.document.createElement('input');\n          input.type = 'text';\n          input.name = 'foo1';\n          input.value = 'bar';\n          const submit = env.win.document.createElement('input');\n          submit.type = 'submit';\n          // no name attribute\n          submit.value = 'baz';\n          form.appendChild(input);\n          form.appendChild(submit);\n          env.win.document.body.appendChild(form);\n          submit.focus();\n          const formData = createFormDataWrapper(env.win, form);\n          expect(fromIterator(formData.entries())).to.have.deep.members([['foo1', 'bar']]);\n        });","file":"unit/test-form-data-wrapper.js","skipped":false,"dir":"test"},{"name":"replaces empty file objects in forms with empty blobs","suites":["entries","Ios11NativeFormDataWrapper"],"updatePoint":{"line":274,"column":63,"index":12448},"line":274,"code":"      it('replaces empty file objects in forms with empty blobs', () => {\n        const form = env.win.document.createElement('form');\n        const input = env.win.document.createElement('input');\n        input.type = 'file';\n        input.name = 'foo1';\n        form.appendChild(input);\n        env.win.document.body.appendChild(form);\n        const formData = createFormDataWrapper(env.win, form);\n        const actual = fromIterator(formData.entries());\n        expect(actual[0][0]).to.equal('foo1');\n        expect(actual[0][1] instanceof Blob).to.be.true;\n      });","file":"unit/test-form-data-wrapper.js","skipped":false,"dir":"test"},{"name":"appends empty blobs instead of empty file objects","suites":["entries","Ios11NativeFormDataWrapper"],"updatePoint":{"line":286,"column":59,"index":13016},"line":286,"code":"      it('appends empty blobs instead of empty file objects', () => {\n        const file = new File([], '');\n        const formData = createFormDataWrapper(env.win);\n        formData.append('myFile', file);\n        const actual = fromIterator(formData.entries());\n        expect(actual[0][0]).to.equal('myFile');\n        expect(actual[0][1] instanceof Blob).to.be.true;\n      });","file":"unit/test-form-data-wrapper.js","skipped":false,"dir":"test"},{"name":"getFormData matches native behavior","suites":["entries","PolyfillFormDataWrapper"],"updatePoint":{"line":296,"column":45,"index":13438},"line":296,"code":"      it('getFormData matches native behavior', () => {\n        const form = env.win.document.createElement('form');\n        const input = env.win.document.createElement('input');\n        input.type = 'text';\n        input.name = 'foo1';\n        input.value = 'bar';\n        const textarea = env.win.document.createElement('textarea');\n        textarea.name = 'foo2';\n        textarea.value = 'bar';\n        form.appendChild(input);\n        form.appendChild(textarea);\n        env.win.document.body.appendChild(form);\n        const polyfillFormDataWrapper = new PolyfillFormDataWrapper(form);\n        if (FormData.prototype.entries) {\n          const polyfillFormData = polyfillFormDataWrapper.getFormData();\n          expect(fromIterator(polyfillFormData.entries())).to.deep.equal(fromIterator(new FormData(form).entries()));\n        } else {\n          // For testing in non-supporting browsers like IE.\n          // We can't query the state of FormData, but we can check that\n          // the polyfill appended to the real FormData enough.\n          const appendSpy = env.sandbox.spy(FormData.prototype, 'append');\n          polyfillFormDataWrapper.getFormData();\n          expect(appendSpy).to.have.been.calledTwice;\n        }\n      });","file":"unit/test-form-data-wrapper.js","skipped":false,"dir":"test"},{"name":"excludes disabled input","suites":[],"updatePoint":{"line":8,"column":29,"index":307},"line":8,"code":"  it('excludes disabled input', () => {\n    const input = env.win.document.createElement('input');\n    input.type = 'text';\n    input.name = 'foo';\n    input.value = 'bar';\n    input.disabled = true;\n    form.appendChild(input);\n    expect(getFormAsObject(form)).to.be.an('object').that.is.empty;\n  });","file":"unit/test-form.js","skipped":false,"dir":"test"},{"name":"excludes input with disabled ancestral fieldset","suites":[],"updatePoint":{"line":17,"column":53,"index":634},"line":17,"code":"  it('excludes input with disabled ancestral fieldset', () => {\n    const fieldset = env.win.document.createElement('fieldset');\n    fieldset.disabled = true;\n    const input = env.win.document.createElement('input');\n    input.type = 'text';\n    input.name = 'foo';\n    input.value = 'bar';\n    fieldset.appendChild(input);\n    form.appendChild(fieldset);\n    expect(getFormAsObject(form)).to.be.an('object').that.is.empty;\n  });","file":"unit/test-form.js","skipped":false,"dir":"test"},{"name":"excludes input without name","suites":[],"updatePoint":{"line":28,"column":33,"index":1045},"line":28,"code":"  it('excludes input without name', () => {\n    const input = env.win.document.createElement('input');\n    input.type = 'text';\n    input.value = 'bar';\n    form.appendChild(input);\n    expect(getFormAsObject(form)).to.be.an('object').that.is.empty;\n  });","file":"unit/test-form.js","skipped":false,"dir":"test"},{"name":"returns text input entries","suites":[],"updatePoint":{"line":35,"column":32,"index":1300},"line":35,"code":"  it('returns text input entries', () => {\n    const input = env.win.document.createElement('input');\n    input.type = 'text';\n    input.name = 'foo';\n    input.value = 'bar';\n    form.appendChild(input);\n    expect(getFormAsObject(form)).to.deep.equal({\n      'foo': ['bar']\n    });\n  });","file":"unit/test-form.js","skipped":false,"dir":"test"},{"name":"returns text input entries with empty value","suites":[],"updatePoint":{"line":45,"column":49,"index":1607},"line":45,"code":"  it('returns text input entries with empty value', () => {\n    const input = env.win.document.createElement('input');\n    input.type = 'text';\n    input.name = 'foo';\n    form.appendChild(input);\n    expect(getFormAsObject(form)).to.deep.equal({\n      'foo': ['']\n    });\n  });","file":"unit/test-form.js","skipped":false,"dir":"test"},{"name":"returns textarea entries","suites":[],"updatePoint":{"line":54,"column":30,"index":1867},"line":54,"code":"  it('returns textarea entries', () => {\n    const textarea = env.win.document.createElement('textarea');\n    textarea.name = 'foo';\n    textarea.value = 'bar';\n    form.appendChild(textarea);\n    expect(getFormAsObject(form)).to.deep.equal({\n      'foo': ['bar']\n    });\n  });","file":"unit/test-form.js","skipped":false,"dir":"test"},{"name":"returns checked checkbox entries","suites":[],"updatePoint":{"line":63,"column":38,"index":2153},"line":63,"code":"  it('returns checked checkbox entries', () => {\n    const input = env.win.document.createElement('input');\n    input.type = 'checkbox';\n    input.name = 'foo';\n    input.value = 'bar';\n    input.checked = true;\n    form.appendChild(input);\n    expect(getFormAsObject(form)).to.deep.equal({\n      'foo': ['bar']\n    });\n  });","file":"unit/test-form.js","skipped":false,"dir":"test"},{"name":"excludes unchecked checkbox entries","suites":[],"updatePoint":{"line":74,"column":41,"index":2482},"line":74,"code":"  it('excludes unchecked checkbox entries', () => {\n    const input = env.win.document.createElement('input');\n    input.type = 'checkbox';\n    input.name = 'foo';\n    input.value = 'bar';\n    input.checked = false;\n    form.appendChild(input);\n    expect(getFormAsObject(form)).to.be.an('object').that.is.empty;\n  });","file":"unit/test-form.js","skipped":false,"dir":"test"},{"name":"returns checked radio button entries","suites":[],"updatePoint":{"line":83,"column":42,"index":2802},"line":83,"code":"  it('returns checked radio button entries', () => {\n    const input = env.win.document.createElement('input');\n    input.type = 'radio';\n    input.name = 'foo';\n    input.value = 'bar';\n    input.checked = true;\n    form.appendChild(input);\n    expect(getFormAsObject(form)).to.deep.equal({\n      'foo': ['bar']\n    });\n  });","file":"unit/test-form.js","skipped":false,"dir":"test"},{"name":"excludes unchecked radio button entries","suites":[],"updatePoint":{"line":94,"column":45,"index":3132},"line":94,"code":"  it('excludes unchecked radio button entries', () => {\n    const input = env.win.document.createElement('input');\n    input.type = 'radio';\n    input.name = 'foo';\n    input.value = 'bar';\n    input.checked = false;\n    form.appendChild(input);\n    expect(getFormAsObject(form)).to.be.an('object').that.is.empty;\n  });","file":"unit/test-form.js","skipped":false,"dir":"test"},{"name":"returns first option for select with nothing selected","suites":[],"updatePoint":{"line":103,"column":59,"index":3466},"line":103,"code":"  it('returns first option for select with nothing selected', () => {\n    const select = env.win.document.createElement('select');\n    select.name = 'foo';\n    select.multiple = false;\n    const selectedOption = env.win.document.createElement('option');\n    selectedOption.value = 'bar';\n    selectedOption.selected = false;\n    const unselectedOption = env.win.document.createElement('option');\n    unselectedOption.value = 'bang';\n    unselectedOption.selected = false;\n    select.appendChild(selectedOption);\n    select.appendChild(unselectedOption);\n    form.appendChild(select);\n    expect(getFormAsObject(form)).to.deep.equal({\n      'foo': ['bar']\n    });\n  });","file":"unit/test-form.js","skipped":false,"dir":"test"},{"name":"returns empty for multi-select with nothing selected","suites":[],"updatePoint":{"line":120,"column":58,"index":4134},"line":120,"code":"  it('returns empty for multi-select with nothing selected', () => {\n    const select = env.win.document.createElement('select');\n    select.name = 'foo';\n    select.multiple = true;\n    const selectedOption = env.win.document.createElement('option');\n    selectedOption.value = 'bar';\n    selectedOption.selected = false;\n    const unselectedOption = env.win.document.createElement('option');\n    unselectedOption.value = 'bang';\n    unselectedOption.selected = false;\n    select.appendChild(selectedOption);\n    select.appendChild(unselectedOption);\n    form.appendChild(select);\n    expect(getFormAsObject(form)).to.deep.equal({});\n  });","file":"unit/test-form.js","skipped":false,"dir":"test"},{"name":"returns selected entry in single-select","suites":[],"updatePoint":{"line":135,"column":45,"index":4762},"line":135,"code":"  it('returns selected entry in single-select', () => {\n    const select = env.win.document.createElement('select');\n    select.name = 'foo';\n    select.multiple = false;\n    const selectedOption = env.win.document.createElement('option');\n    selectedOption.value = 'bar';\n    selectedOption.selected = true;\n    const unselectedOption = env.win.document.createElement('option');\n    unselectedOption.value = 'bang';\n    unselectedOption.selected = false;\n    select.appendChild(selectedOption);\n    select.appendChild(unselectedOption);\n    form.appendChild(select);\n    expect(getFormAsObject(form)).to.deep.equal({\n      'foo': ['bar']\n    });\n  });","file":"unit/test-form.js","skipped":false,"dir":"test"},{"name":"returns single selected entry in multi-select","suites":[],"updatePoint":{"line":152,"column":51,"index":5422},"line":152,"code":"  it('returns single selected entry in multi-select', () => {\n    const select = env.win.document.createElement('select');\n    select.name = 'foo';\n    select.multiple = true;\n    const selectedOption = env.win.document.createElement('option');\n    selectedOption.value = 'bar';\n    selectedOption.selected = true;\n    const unselectedOption = env.win.document.createElement('option');\n    unselectedOption.value = 'bang';\n    unselectedOption.selected = false;\n    select.appendChild(selectedOption);\n    select.appendChild(unselectedOption);\n    form.appendChild(select);\n    expect(getFormAsObject(form)).to.deep.equal({\n      'foo': ['bar']\n    });\n  });","file":"unit/test-form.js","skipped":false,"dir":"test"},{"name":"returns multiple selected entries in multi-select","suites":[],"updatePoint":{"line":169,"column":55,"index":6085},"line":169,"code":"  it('returns multiple selected entries in multi-select', () => {\n    const select = env.win.document.createElement('select');\n    select.name = 'foo';\n    select.multiple = true;\n    const selectedOption = env.win.document.createElement('option');\n    selectedOption.value = 'bar';\n    selectedOption.selected = true;\n    const unselectedOption = env.win.document.createElement('option');\n    unselectedOption.value = 'bang';\n    unselectedOption.selected = true;\n    select.appendChild(selectedOption);\n    select.appendChild(unselectedOption);\n    form.appendChild(select);\n    expect(getFormAsObject(form)).to.deep.equal({\n      'foo': ['bar', 'bang']\n    });\n  });","file":"unit/test-form.js","skipped":false,"dir":"test"},{"name":"returns the first submit input entries if none focused","suites":[],"updatePoint":{"line":186,"column":60,"index":6760},"line":186,"code":"  it('returns the first submit input entries if none focused', () => {\n    const input = env.win.document.createElement('input');\n    input.type = 'submit';\n    input.name = 'foo';\n    input.value = 'bar';\n    form.appendChild(input);\n    const input2 = env.win.document.createElement('input');\n    input2.type = 'submit';\n    input2.name = 'baz';\n    input2.value = 'quux';\n    form.appendChild(input2);\n    env.sandbox.defineProperty(form, 'ownerDocument', {\n      get() {\n        return {\n          activeElement: input\n        };\n      }\n    });\n    expect(getFormAsObject(form)).to.deep.equal({\n      'foo': ['bar']\n    });\n  });","file":"unit/test-form.js","skipped":false,"dir":"test"},{"name":"returns focused submit input entries","suites":[],"updatePoint":{"line":208,"column":42,"index":7377},"line":208,"code":"  it('returns focused submit input entries', () => {\n    const input = env.win.document.createElement('input');\n    input.type = 'submit';\n    input.name = 'foo';\n    input.value = 'bar';\n    form.appendChild(input);\n    const input2 = env.win.document.createElement('input');\n    input2.type = 'submit';\n    input2.name = 'baz';\n    input2.value = 'quux';\n    form.appendChild(input2);\n    expect(getFormAsObject(form)).to.deep.equal({\n      'foo': ['bar']\n    });\n    env.sandbox.defineProperty(form, 'ownerDocument', {\n      get() {\n        return {\n          activeElement: input2\n        };\n      }\n    });\n    expect(getFormAsObject(form)).to.deep.equal({\n      'baz': ['quux']\n    });\n  });","file":"unit/test-form.js","skipped":false,"dir":"test"},{"name":"returns the first submit button entries if none focused","suites":[],"updatePoint":{"line":233,"column":61,"index":8094},"line":233,"code":"  it('returns the first submit button entries if none focused', () => {\n    const input = env.win.document.createElement('button');\n    input.name = 'foo';\n    input.value = 'bar';\n    form.appendChild(input);\n    const input2 = env.win.document.createElement('button');\n    input2.name = 'baz';\n    input2.value = 'quux';\n    form.appendChild(input2);\n    env.sandbox.defineProperty(form, 'ownerDocument', {\n      get() {\n        return {\n          activeElement: env.win.document.body\n        };\n      }\n    });\n    expect(getFormAsObject(form)).to.deep.equal({\n      'foo': ['bar']\n    });\n  });","file":"unit/test-form.js","skipped":false,"dir":"test"},{"name":"returns focused button input entries","suites":[],"updatePoint":{"line":253,"column":42,"index":8674},"line":253,"code":"  it('returns focused button input entries', () => {\n    const input = env.win.document.createElement('button');\n    input.name = 'foo';\n    input.value = 'bar';\n    form.appendChild(input);\n    const input2 = env.win.document.createElement('button');\n    input2.name = 'baz';\n    input2.value = 'quux';\n    form.appendChild(input2);\n    expect(getFormAsObject(form)).to.deep.equal({\n      'foo': ['bar']\n    });\n    env.sandbox.defineProperty(form, 'ownerDocument', {\n      get() {\n        return {\n          activeElement: input2\n        };\n      }\n    });\n    expect(getFormAsObject(form)).to.deep.equal({\n      'baz': ['quux']\n    });\n  });","file":"unit/test-form.js","skipped":false,"dir":"test"},{"name":"returns multiple form entries","suites":[],"updatePoint":{"line":276,"column":35,"index":9312},"line":276,"code":"  it('returns multiple form entries', () => {\n    const form = env.win.document.createElement('form');\n    const input = env.win.document.createElement('input');\n    input.type = 'text';\n    input.name = 'foo1';\n    input.value = 'bar';\n    const checkbox = env.win.document.createElement('input');\n    checkbox.type = 'checkbox';\n    checkbox.name = 'foo';\n    checkbox.value = 'bar';\n    checkbox.checked = true;\n    const textarea = env.win.document.createElement('textarea');\n    textarea.name = 'foo2';\n    textarea.value = 'bar';\n    const select = env.win.document.createElement('select');\n    select.name = 'foo';\n    select.multiple = false;\n    const selectedOption = env.win.document.createElement('option');\n    selectedOption.value = 'baz';\n    selectedOption.selected = true;\n    select.appendChild(selectedOption);\n    form.appendChild(input);\n    form.appendChild(checkbox);\n    form.appendChild(textarea);\n    form.appendChild(select);\n    const formDataObject = getFormAsObject(form);\n    expect(formDataObject).to.be.an('object').that.has.all.keys('foo', 'foo1', 'foo2');\n    expect(formDataObject).to.have.property('foo').that.has.deep.members(['bar', 'baz']);\n    expect(formDataObject).to.have.property('foo1').that.has.deep.members(['bar']);\n    expect(formDataObject).to.have.property('foo2').that.has.deep.members(['bar']);\n  });","file":"unit/test-form.js","skipped":false,"dir":"test"},{"name":"returns true for disabled elements","suites":["elements without ancestral fieldset"],"updatePoint":{"line":318,"column":42,"index":10939},"line":318,"code":"    it('returns true for disabled elements', () => {\n      element.disabled = true;\n      expect(isDisabled(element)).to.be.true;\n    });","file":"unit/test-form.js","skipped":false,"dir":"test"},{"name":"returns false for enabled elements","suites":["elements without ancestral fieldset"],"updatePoint":{"line":322,"column":42,"index":11077},"line":322,"code":"    it('returns false for enabled elements', () => {\n      element.disabled = false;\n      expect(isDisabled(element)).to.be.false;\n    });","file":"unit/test-form.js","skipped":false,"dir":"test"},{"name":"returns true for enabled elements with disabled ancestral fieldset","suites":["elements with ancestral fieldset"],"updatePoint":{"line":334,"column":74,"index":11545},"line":334,"code":"    it('returns true for enabled elements with disabled ancestral fieldset', () => {\n      element.disabled = false;\n      elementAncestralFieldset.disabled = true;\n      expect(isDisabled(element)).to.be.true;\n    });","file":"unit/test-form.js","skipped":false,"dir":"test"},{"name":"returns false for enabled elements with enabled ancestral fieldset","suites":["elements with ancestral fieldset"],"updatePoint":{"line":339,"column":74,"index":11764},"line":339,"code":"    it('returns false for enabled elements with enabled ancestral fieldset', () => {\n      element.disabled = false;\n      elementAncestralFieldset.disabled = false;\n      expect(isDisabled(element)).to.be.false;\n    });","file":"unit/test-form.js","skipped":false,"dir":"test"},{"name":"returns true for disabled elements with enabled ancestral fieldset","suites":["elements with ancestral fieldset"],"updatePoint":{"line":344,"column":74,"index":11985},"line":344,"code":"    it('returns true for disabled elements with enabled ancestral fieldset', () => {\n      element.disabled = true;\n      elementAncestralFieldset.disabled = false;\n      expect(isDisabled(element)).to.be.true;\n    });","file":"unit/test-form.js","skipped":false,"dir":"test"},{"name":"returns true if text field's value matches its default value","suites":["text field"],"updatePoint":{"line":362,"column":68,"index":12502},"line":362,"code":"    it(\"returns true if text field's value matches its default value\", () => {\n      textField.value = 'default';\n      expect(isFieldDefault(textField)).to.be.true;\n    });","file":"unit/test-form.js","skipped":false,"dir":"test"},{"name":"returns false if text field's value does not match its default value","suites":["text field"],"updatePoint":{"line":366,"column":76,"index":12684},"line":366,"code":"    it(\"returns false if text field's value does not match its default value\", () => {\n      textField.value = 'not default';\n      expect(isFieldDefault(textField)).to.be.false;\n    });","file":"unit/test-form.js","skipped":false,"dir":"test"},{"name":"returns true if textarea's value matches its default value","suites":["textarea"],"updatePoint":{"line":377,"column":66,"index":13035},"line":377,"code":"    it(\"returns true if textarea's value matches its default value\", () => {\n      textarea.value = 'default';\n      expect(isFieldDefault(textarea)).to.be.true;\n    });","file":"unit/test-form.js","skipped":false,"dir":"test"},{"name":"returns false if textarea's value does not match its default value","suites":["textarea"],"updatePoint":{"line":381,"column":74,"index":13213},"line":381,"code":"    it(\"returns false if textarea's value does not match its default value\", () => {\n      textarea.value = 'not default';\n      expect(isFieldDefault(textarea)).to.be.false;\n    });","file":"unit/test-form.js","skipped":false,"dir":"test"},{"name":"returns true if the radio button is in its default state","suites":["radio button"],"updatePoint":{"line":403,"column":64,"index":14048},"line":403,"code":"    it('returns true if the radio button is in its default state', () => {\n      optionA.checked = true;\n      expect(isFieldDefault(optionA)).to.be.true;\n      expect(isFieldDefault(optionB)).to.be.true;\n    });","file":"unit/test-form.js","skipped":false,"dir":"test"},{"name":"returns false if the radio button is not in its default state","suites":["radio button"],"updatePoint":{"line":408,"column":69,"index":14266},"line":408,"code":"    it('returns false if the radio button is not in its default state', () => {\n      optionB.checked = true;\n      expect(isFieldDefault(optionA)).to.be.false;\n      expect(isFieldDefault(optionB)).to.be.false;\n    });","file":"unit/test-form.js","skipped":false,"dir":"test"},{"name":"returns true if checkbox is in its default state","suites":["checkbox"],"updatePoint":{"line":421,"column":56,"index":14704},"line":421,"code":"    it('returns true if checkbox is in its default state', () => {\n      checkbox.checked = true;\n      expect(isFieldDefault(checkbox)).to.be.true;\n    });","file":"unit/test-form.js","skipped":false,"dir":"test"},{"name":"returns false if checkbox is not in its default state","suites":["checkbox"],"updatePoint":{"line":425,"column":61,"index":14866},"line":425,"code":"    it('returns false if checkbox is not in its default state', () => {\n      checkbox.checked = false;\n      expect(isFieldDefault(checkbox)).to.be.false;\n    });","file":"unit/test-form.js","skipped":false,"dir":"test"},{"name":"returns true if the dropdown's selections match its default selections","suites":["single select dropdown"],"updatePoint":{"line":440,"column":78,"index":15421},"line":440,"code":"    it(\"returns true if the dropdown's selections match its default selections\", () => {\n      dropdown.options[0].selected = true;\n      expect(isFieldDefault(dropdown)).to.be.true;\n    });","file":"unit/test-form.js","skipped":false,"dir":"test"},{"name":"returns false if the dropdown's selections does not match its default selections","suites":["single select dropdown"],"updatePoint":{"line":444,"column":88,"index":15622},"line":444,"code":"    it(\"returns false if the dropdown's selections does not match its default selections\", () => {\n      dropdown.options[1].selected = true;\n      expect(isFieldDefault(dropdown)).to.be.false;\n    });","file":"unit/test-form.js","skipped":false,"dir":"test"},{"name":"returns true if the dropdown's selections match its default selections","suites":["multi select dropdown"],"updatePoint":{"line":460,"column":78,"index":16240},"line":460,"code":"    it(\"returns true if the dropdown's selections match its default selections\", () => {\n      dropdown.options[0].selected = true;\n      expect(isFieldDefault(dropdown)).to.be.true;\n    });","file":"unit/test-form.js","skipped":false,"dir":"test"},{"name":"returns false if the dropdown's selections does not match its default selections","suites":["multi select dropdown"],"updatePoint":{"line":464,"column":88,"index":16441},"line":464,"code":"    it(\"returns false if the dropdown's selections does not match its default selections\", () => {\n      dropdown.options[0].selected = true;\n      dropdown.options[1].selected = true;\n      expect(isFieldDefault(dropdown)).to.be.false;\n    });","file":"unit/test-form.js","skipped":false,"dir":"test"},{"name":"returns false if the checkbox is checked","suites":["checkbox"],"updatePoint":{"line":482,"column":48,"index":16928},"line":482,"code":"    it('returns false if the checkbox is checked', () => {\n      checkbox.checked = true;\n      expect(isFieldEmpty(checkbox)).to.be.false;\n    });","file":"unit/test-form.js","skipped":false,"dir":"test"},{"name":"returns true if the checkbox is not checked","suites":["checkbox"],"updatePoint":{"line":486,"column":51,"index":17079},"line":486,"code":"    it('returns true if the checkbox is not checked', () => {\n      checkbox.checked = false;\n      expect(isFieldEmpty(checkbox)).to.be.true;\n    });","file":"unit/test-form.js","skipped":false,"dir":"test"},{"name":"returns false if the radio is checked","suites":["radio button"],"updatePoint":{"line":497,"column":45,"index":17381},"line":497,"code":"    it('returns false if the radio is checked', () => {\n      radio.checked = true;\n      expect(isFieldEmpty(radio)).to.be.false;\n    });","file":"unit/test-form.js","skipped":false,"dir":"test"},{"name":"returns true if the radio is not checked","suites":["radio button"],"updatePoint":{"line":501,"column":48,"index":17523},"line":501,"code":"    it('returns true if the radio is not checked', () => {\n      radio.checked = false;\n      expect(isFieldEmpty(radio)).to.be.true;\n    });","file":"unit/test-form.js","skipped":false,"dir":"test"},{"name":"returns true if the text field is empty","suites":["text field"],"updatePoint":{"line":512,"column":47,"index":17830},"line":512,"code":"    it('returns true if the text field is empty', () => {\n      textField.value = '';\n      expect(isFieldEmpty(textField)).to.be.true;\n    });","file":"unit/test-form.js","skipped":false,"dir":"test"},{"name":"returns false if the text field is not empty","suites":["text field"],"updatePoint":{"line":516,"column":52,"index":17979},"line":516,"code":"    it('returns false if the text field is not empty', () => {\n      textField.value = 'some text';\n      expect(isFieldEmpty(textField)).to.be.false;\n    });","file":"unit/test-form.js","skipped":false,"dir":"test"},{"name":"returns true if the textarea is empty","suites":["textarea"],"updatePoint":{"line":526,"column":45,"index":18265},"line":526,"code":"    it('returns true if the textarea is empty', () => {\n      textarea.value = '';\n      expect(isFieldEmpty(textarea)).to.be.true;\n    });","file":"unit/test-form.js","skipped":false,"dir":"test"},{"name":"returns false if the textarea is not empty","suites":["textarea"],"updatePoint":{"line":530,"column":50,"index":18410},"line":530,"code":"    it('returns false if the textarea is not empty', () => {\n      textarea.value = 'some text';\n      expect(isFieldEmpty(textarea)).to.be.false;\n    });","file":"unit/test-form.js","skipped":false,"dir":"test"},{"name":"always returns false","suites":["dropdown menu"],"updatePoint":{"line":536,"column":28,"index":18585},"line":536,"code":"    it('always returns false', () => {\n      const dropdown = doc.createElement('select');\n      const optionA = doc.createElement('option');\n      const optionB = doc.createElement('option');\n      dropdown.appendChild(optionA);\n      dropdown.appendChild(optionB);\n      optionA.selected = false;\n      optionB.selected = false;\n      expect(isFieldEmpty(dropdown)).to.be.false;\n    });","file":"unit/test-form.js","skipped":false,"dir":"test"},{"name":"throws an error","suites":["unsupported elements"],"updatePoint":{"line":549,"column":23,"index":19076},"line":549,"code":"    it('throws an error', () => {\n      const unrecognized = doc.createElement('div');\n      expect(() => isFieldEmpty(unrecognized)).to.throw(UNSUPPORTED);\n    });","file":"unit/test-form.js","skipped":false,"dir":"test"},{"name":"should follow main install steps","suites":[],"updatePoint":{"line":64,"column":38,"index":2857},"line":64,"code":"  it('should follow main install steps', () => {\n    // Resources are not involved.\n    extensionsMock.expects('preloadExtension').never();\n    resourcesMock.expects('add').never();\n    const embedPromise = installFriendlyIframeEmbed(iframe, document.body, {\n      url: 'https://acme.org/url1',\n      html: '<a href=\"/url2\"></a>',\n      extensions: []\n    });\n\n    // Attributes set.\n    expect(iframe.style.visibility).to.equal('hidden');\n    expect(iframe.getAttribute('referrerpolicy')).to.equal('unsafe-url');\n    expect(iframe.getAttribute('marginheight')).to.equal('0');\n    expect(iframe.getAttribute('marginwidth')).to.equal('0');\n\n    // Iframe has been appended to DOM.\n    expect(iframe.parentElement).to.equal(document.body);\n    return embedPromise.then(embed => {\n      expect(embed.win).to.be.ok;\n      expect(embed.win).to.equal(iframe.contentWindow);\n      expect(embed.iframe).to.equal(iframe);\n      expect(embed.spec.url).to.equal('https://acme.org/url1');\n      expect(embed.host).to.be.null;\n      expect(embed.signals()).to.be.ok;\n      expect(getFriendlyIframeEmbedOptional(embed.iframe)).to.equal(embed);\n\n      // Iframe is rendered.\n      expect(embed.signals().get('render-start')).to.be.ok;\n      expect(iframe.style.visibility).to.equal('');\n      expect(embed.win.document.body.style.visibility).to.equal('visible');\n      expect(String(embed.win.document.body.style.opacity)).to.equal('1');\n      expect(isAnimationNone(embed.win.document.body)).to.be.true;\n      expect(embed.win.document.documentElement.classList.contains('i-amphtml-fie')).to.be.true;\n\n      // BASE element has been inserted.\n      expect(embed.win.document.querySelector('base').href).to.equal('https://acme.org/url1');\n      expect(embed.win.document.querySelector('a').href).to.equal('https://acme.org/url2');\n\n      // Check that extensions-known has been set.\n      return embed.ampdoc.whenExtensionsKnown();\n    }).then(() => loadPromise(iframe)).then(() => {\n      // Iframe is marked as complete.\n      expect(iframe.readyState).to.equal('complete');\n    });\n  });","file":"unit/test-friendly-iframe-embed.js","skipped":false,"dir":"test"},{"name":"should write doc if srcdoc is not available","suites":[],"line":110,"code":"  it.skip('should write doc if srcdoc is not available', () => {","file":"unit/test-friendly-iframe-embed.js","skipped":true,"dir":"test"},{"name":"should create ampdoc and install extensions","suites":[],"updatePoint":{"line":126,"column":49,"index":5627},"line":126,"code":"  it('should create ampdoc and install extensions', () => {\n    // AmpDoc is created.\n    const ampdocSignals = new Signals();\n    let childWinForAmpDoc;\n    const ampdoc = {\n      get win() {\n        return childWinForAmpDoc;\n      },\n      getParent: () => env.ampdoc,\n      setReady: env.sandbox.spy(),\n      signals: () => ampdocSignals,\n      getHeadNode: () => childWinForAmpDoc.document.head,\n      setExtensionsKnown: env.sandbox.stub()\n    };\n    ampdocServiceMock.expects('installFieDoc').withExactArgs('https://acme.org/url1', env.sandbox.match(arg => {\n      // Match childWin argument.\n      childWinForAmpDoc = arg;\n      return true;\n    }), env.sandbox.match(arg => {\n      // Match options with no signals.\n      expect(arg && arg.signals).to.not.be.ok;\n      return true;\n    })).returns(ampdoc).once();\n\n    // Extensions preloading have been requested.\n    extensionsMock.expects('preloadExtension').withExactArgs('amp-test', '0.2').returns(Promise.resolve()).once();\n    extensionsMock.expects('preinstallEmbed').withExactArgs(ampdoc, [{\n      extensionId: 'amp-test',\n      extensionVersion: '0.2'\n    }]).once();\n    extensionsMock.expects('installExtensionsInDoc').withExactArgs(ampdoc, [{\n      extensionId: 'amp-test',\n      extensionVersion: '0.2'\n    }]).returns(Promise.resolve()).once();\n    let renderCompleteResolver = null;\n    const renderCompletePromise = new Promise(resolve => {\n      renderCompleteResolver = resolve;\n    });\n    env.sandbox.stub(FriendlyIframeEmbed.prototype, 'whenRenderComplete').callsFake(() => renderCompletePromise);\n    const embedPromise = installFriendlyIframeEmbed(iframe, document.body, {\n      url: 'https://acme.org/url1',\n      html: '<amp-test></amp-test>',\n      extensions: [{\n        extensionId: 'amp-test',\n        extensionVersion: '0.2'\n      }]\n    }, preinstallCallback);\n    return embedPromise.then(embed => {\n      expect(childWinForAmpDoc).to.equal(embed.win);\n      expect(ampdoc).to.equal(embed.ampdoc);\n      expect(installServicesStub).to.be.calledOnce.calledWith(ampdoc);\n      expect(ampdoc.setReady).to.not.be.called;\n\n      // Check that extensions-known has been set.\n      expect(embed.ampdoc.setExtensionsKnown).to.be.calledOnce;\n\n      // Complete rendering.\n      renderCompleteResolver();\n      return renderCompletePromise;\n    }).then(() => {\n      expect(ampdoc.setReady).to.be.calledOnce;\n    });\n  });","file":"unit/test-friendly-iframe-embed.js","skipped":false,"dir":"test"},{"name":"should create ampdoc and install extensions with host","suites":[],"updatePoint":{"line":189,"column":59,"index":8041},"line":189,"code":"  it('should create ampdoc and install extensions with host', () => {\n    // host.\n    const hostSignals = new Signals();\n    const host = document.createElement('div');\n    host.signals = () => hostSignals;\n    host.renderStarted = env.sandbox.spy();\n    host.getLayoutBox = () => layoutRectLtwh(10, 10, 100, 200);\n\n    // AmpDoc is created.\n    let ampdocSignals = null;\n    const ampdoc = {\n      get win() {\n        return childWinForAmpDoc;\n      },\n      getParent: () => env.ampdoc,\n      setReady: env.sandbox.spy(),\n      signals: () => ampdocSignals,\n      getHeadNode: () => childWinForAmpDoc.document.head,\n      setExtensionsKnown: env.sandbox.stub()\n    };\n    let childWinForAmpDoc;\n    ampdocServiceMock.expects('installFieDoc').withExactArgs('https://acme.org/url1', env.sandbox.match(arg => {\n      // Match childWin argument.\n      childWinForAmpDoc = arg;\n      return true;\n    }), env.sandbox.match(arg => {\n      // Match options with no signals.\n      ampdocSignals = arg && arg.signals;\n      expect(ampdocSignals).to.be.ok;\n      return true;\n    })).returns(ampdoc).once();\n\n    // Extensions preloading have been requested.\n    extensionsMock.expects('preloadExtension').withExactArgs('amp-test', 'latest').returns(Promise.resolve()).once();\n    extensionsMock.expects('preinstallEmbed').withExactArgs(ampdoc, [{\n      extensionId: 'amp-test',\n      extensionVersion: 'latest'\n    }]).once();\n    extensionsMock.expects('installExtensionsInDoc').withExactArgs(ampdoc, [{\n      extensionId: 'amp-test',\n      extensionVersion: 'latest'\n    }]).returns(Promise.resolve()).once();\n    let renderCompleteResolver = null;\n    const renderCompletePromise = new Promise(resolve => {\n      renderCompleteResolver = resolve;\n    });\n    env.sandbox.stub(FriendlyIframeEmbed.prototype, 'whenRenderComplete').callsFake(() => renderCompletePromise);\n    const embedPromise = installFriendlyIframeEmbed(iframe, document.body, {\n      url: 'https://acme.org/url1',\n      html: '<amp-test></amp-test>',\n      extensions: [{\n        extensionId: 'amp-test',\n        extensionVersion: 'latest'\n      }],\n      host\n    }, preinstallCallback);\n    return embedPromise.then(embed => {\n      expect(childWinForAmpDoc).to.equal(embed.win);\n      expect(ampdoc).to.equal(embed.ampdoc);\n      expect(installServicesStub).to.be.calledOnce.calledWith(ampdoc);\n      expect(ampdoc.setReady).to.not.be.called;\n      renderCompleteResolver();\n      return renderCompletePromise;\n    }).then(() => {\n      expect(ampdoc.setReady).to.be.calledOnce;\n      expect(host.renderStarted).to.be.calledOnce;\n      expect(ampdoc.signals()).to.equal(hostSignals);\n    });\n  });","file":"unit/test-friendly-iframe-embed.js","skipped":false,"dir":"test"},{"name":"should install extensions","suites":[],"updatePoint":{"line":258,"column":31,"index":10679},"line":258,"code":"  it('should install extensions', async () => {\n    // Extensions preloading have been requested.\n    extensionsMock.expects('preloadExtension').withExactArgs('amp-test', 'latest').returns(Promise.resolve()).atLeast(1);\n    await installFriendlyIframeEmbed(iframe, document.body, {\n      url: 'https://acme.org/url1',\n      html: '<amp-test></amp-test>',\n      extensions: [{\n        extensionId: 'amp-test',\n        extensionVersion: 'latest'\n      }]\n    }, preinstallCallback);\n    expect(customElementsDefineStub.callCount).to.be.above(0);\n    expect(customElementsDefineStub).to.be.calledWith('amp-img');\n    expect(customElementsDefineStub).to.be.calledWith('amp-test');\n  });","file":"unit/test-friendly-iframe-embed.js","skipped":false,"dir":"test"},{"name":"should install and dispose services","suites":[],"updatePoint":{"line":273,"column":41,"index":11372},"line":273,"code":"  it('should install and dispose services', () => {\n    const disposeSpy = env.sandbox.spy();\n    const embedService = {\n      dispose: disposeSpy\n    };\n    const embedPromise = installFriendlyIframeEmbed(iframe, document.body, {\n      url: 'https://acme.org/url1',\n      html: '<amp-test></amp-test>',\n      extensions: []\n    }, embedWin => {\n      registerServiceBuilderInEmbedWin(embedWin, 'c', function () {\n        return embedService;\n      });\n    });\n    return embedPromise.then(embed => {\n      expect(getServiceInEmbedWin(embed.win, 'c')).to.equal(embedService);\n      expect(disposeSpy).to.not.be.called;\n      embed.destroy();\n      expect(disposeSpy).to.be.calledOnce;\n    });\n  });","file":"unit/test-friendly-iframe-embed.js","skipped":false,"dir":"test"},{"name":"should pause and resume FIE using ampdoc visibility","suites":[],"updatePoint":{"line":294,"column":57,"index":12087},"line":294,"code":"  it('should pause and resume FIE using ampdoc visibility', async () => {\n    // AmpDoc is created.\n    const ampdocSignals = new Signals();\n    let childWinForAmpDoc;\n    const ampdoc = {\n      get win() {\n        return childWinForAmpDoc;\n      },\n      getParent: () => env.ampdoc,\n      setReady: env.sandbox.spy(),\n      signals: () => ampdocSignals,\n      getHeadNode: () => childWinForAmpDoc.document.head,\n      setExtensionsKnown: env.sandbox.stub(),\n      overrideVisibilityState: env.sandbox.spy(),\n      dispose: env.sandbox.spy()\n    };\n    ampdocServiceMock.expects('installFieDoc').withExactArgs('https://acme.org/url1', env.sandbox.match(arg => {\n      // Match childWin argument.\n      childWinForAmpDoc = arg;\n      return true;\n    }), env.sandbox.match(() => true)).returns(ampdoc).once();\n    env.sandbox.stub(FriendlyIframeEmbed.prototype, 'whenRenderStarted').returns(Promise.resolve());\n    const embed = await installFriendlyIframeEmbed(iframe, document.body, {\n      url: 'https://acme.org/url1',\n      html: '',\n      extensions: []\n    }, preinstallCallback);\n    embed.pause();\n    expect(ampdoc.overrideVisibilityState).to.be.calledOnce.calledWith('paused');\n    embed.resume();\n    expect(ampdoc.overrideVisibilityState).to.be.calledTwice.calledWith('visible');\n  });","file":"unit/test-friendly-iframe-embed.js","skipped":false,"dir":"test"},{"name":"should signal fie doc ready during install when not streaming","suites":[],"updatePoint":{"line":326,"column":67,"index":13396},"line":326,"code":"  it('should signal fie doc ready during install when not streaming', async () => {\n    const setReadySpy = env.sandbox.spy(AmpDocFie.prototype, 'setReady');\n    await installFriendlyIframeEmbed(iframe, document.body, {\n      url: 'https://acme.test/url1',\n      html: '<amp-test></amp-test>',\n      extensions: [{\n        extensionId: 'amp-test',\n        extensionVersion: 'latest'\n      }]\n    }, preinstallCallback);\n    expect(setReadySpy).to.be.called;\n  });","file":"unit/test-friendly-iframe-embed.js","skipped":false,"dir":"test"},{"name":"should wait complete streaming before signaling fie doc ready","suites":[],"updatePoint":{"line":338,"column":67,"index":13860},"line":338,"code":"  it('should wait complete streaming before signaling fie doc ready', async () => {\n    const setReadySpy = env.sandbox.spy(AmpDocFie.prototype, 'setReady');\n    const fie = await installFriendlyIframeEmbed(iframe, document.body, {\n      url: 'https://acme.test/url1',\n      html: '<amp-test></amp-test>',\n      extensions: [{\n        extensionId: 'amp-test',\n        extensionVersion: 'latest'\n      }],\n      skipHtmlMerge: true\n    }, preinstallCallback);\n    expect(setReadySpy).not.to.be.called;\n    await fie.renderCompleted();\n    expect(setReadySpy).to.be.called;\n  });","file":"unit/test-friendly-iframe-embed.js","skipped":false,"dir":"test"},{"name":"should dispose ampdoc","suites":[],"updatePoint":{"line":353,"column":27,"index":14398},"line":353,"code":"  it('should dispose ampdoc', () => {\n    // AmpDoc is created.\n    const ampdocSignals = new Signals();\n    let childWinForAmpDoc;\n    const ampdoc = {\n      get win() {\n        return childWinForAmpDoc;\n      },\n      getParent: () => env.ampdoc,\n      setReady: env.sandbox.spy(),\n      signals: () => ampdocSignals,\n      getHeadNode: () => childWinForAmpDoc.document.head,\n      setExtensionsKnown: env.sandbox.stub(),\n      dispose: env.sandbox.spy()\n    };\n    ampdocServiceMock.expects('installFieDoc').withExactArgs('https://acme.org/url1', env.sandbox.match(arg => {\n      // Match childWin argument.\n      childWinForAmpDoc = arg;\n      return true;\n    }), env.sandbox.match(() => true)).returns(ampdoc).once();\n\n    // Extensions preloading have been requested.\n    extensionsMock.expects('preloadExtension').withExactArgs('amp-test', 'latest').returns(Promise.resolve()).once();\n    extensionsMock.expects('preinstallEmbed').withExactArgs(ampdoc, [{\n      extensionId: 'amp-test',\n      extensionVersion: 'latest'\n    }]).once();\n    extensionsMock.expects('installExtensionsInDoc').withExactArgs(ampdoc, [{\n      extensionId: 'amp-test',\n      extensionVersion: 'latest'\n    }]).returns(Promise.resolve()).once();\n    env.sandbox.stub(FriendlyIframeEmbed.prototype, 'whenRenderStarted').returns(Promise.resolve());\n    const embedPromise = installFriendlyIframeEmbed(iframe, document.body, {\n      url: 'https://acme.org/url1',\n      html: '<amp-test></amp-test>',\n      extensions: [{\n        extensionId: 'amp-test',\n        extensionVersion: 'latest'\n      }]\n    }, preinstallCallback);\n    return embedPromise.then(embed => {\n      expect(installServicesStub).to.be.calledOnce.calledWith(ampdoc);\n      embed.destroy();\n    }).then(() => {\n      expect(ampdoc.dispose).to.be.calledOnce;\n    });\n  });","file":"unit/test-friendly-iframe-embed.js","skipped":false,"dir":"test"},{"name":"should support host","suites":[],"line":400,"code":"  it.skip('should support host', () => {","file":"unit/test-friendly-iframe-embed.js","skipped":true,"dir":"test"},{"name":"should await initial load","suites":[],"line":417,"code":"  it.skip('should await initial load', () => {","file":"unit/test-friendly-iframe-embed.js","skipped":true,"dir":"test"},{"name":"should await initial with host","suites":[],"line":433,"code":"  it.skip('should await initial with host', () => {","file":"unit/test-friendly-iframe-embed.js","skipped":true,"dir":"test"},{"name":"should call for remeasure upon resize","suites":[],"updatePoint":{"line":458,"column":43,"index":18713},"line":458,"code":"  it('should call for remeasure upon resize', async () => {\n    const iframe = document.createElement('iframe');\n    const {\n      promise,\n      resolve\n    } = new Deferred();\n    await installFriendlyIframeEmbed(iframe, document.body, {\n      url: 'https://acme.org/url1',\n      html: '<a id=\"a1\"></a>',\n      extensions: []\n    });\n    const mutateSpy = env.sandbox.stub(Services.mutatorForDoc(env.ampdoc), 'mutateElement');\n    expect(mutateSpy).to.not.be.called;\n    setStyles(iframe, {\n      height: '100px',\n      width: '100px'\n    });\n    // Need to wait for resize event.\n    iframe.contentWindow.addEventListener('resize', () => {\n      resolve();\n    });\n    await promise;\n    expect(mutateSpy).to.be.called;\n  });","file":"unit/test-friendly-iframe-embed.js","skipped":false,"dir":"test"},{"name":"should preload versioned extensions","suites":[],"updatePoint":{"line":482,"column":41,"index":19440},"line":482,"code":"  it('should preload versioned extensions', () => {\n    extensionsMock.expects('preloadExtension').withExactArgs('amp-ext1', '0.2').once();\n    extensionsMock.expects('preloadExtension').withExactArgs('amp-ext2', '0.3').once();\n    preloadFriendlyIframeEmbedExtensions(window, [{\n      extensionId: 'amp-ext1',\n      extensionVersion: '0.2'\n    }, {\n      extensionId: 'amp-ext2',\n      extensionVersion: '0.3'\n    }]);\n  });","file":"unit/test-friendly-iframe-embed.js","skipped":false,"dir":"test"},{"name":"should install base","suites":["mergeHtml"],"updatePoint":{"line":509,"column":27,"index":20314},"line":509,"code":"    it('should install base', () => {\n      const html = mergeHtmlForTesting(spec);\n      expect(html.indexOf('<base href=\"https://acme.org/embed1\">')).to.equal(0);\n    });","file":"unit/test-friendly-iframe-embed.js","skipped":false,"dir":"test"},{"name":"should install fonts","suites":["mergeHtml"],"updatePoint":{"line":513,"column":28,"index":20488},"line":513,"code":"    it('should install fonts', () => {\n      const FONT1 = 'https://acme.org/font1';\n      const FONT2 = 'https://acme.org/font2';\n      spec.fonts = [FONT1, FONT2];\n      const html = mergeHtmlForTesting(spec);\n      const templ = '<link href=\"FONT\" rel=\"stylesheet\" type=\"text/css\">';\n      expect(html.indexOf(templ.replace('FONT', FONT1))).to.be.greaterThan(0);\n      expect(html.indexOf(templ.replace('FONT', FONT2))).to.be.greaterThan(0);\n    });","file":"unit/test-friendly-iframe-embed.js","skipped":false,"dir":"test"},{"name":"should escape urls","suites":["mergeHtml"],"updatePoint":{"line":522,"column":26,"index":20939},"line":522,"code":"    it('should escape urls', () => {\n      spec.url = 'https://acme.org/embed<1';\n      spec.fonts = ['https://acme.org/font<1'];\n      const html = mergeHtmlForTesting(spec);\n      expect(html.indexOf('<base href=\"https://acme.org/embed&lt;1\">')).to.greaterThan(-1);\n      expect(html.indexOf('<link href=\"https://acme.org/font&lt;1\"')).to.greaterThan(-1);\n    });","file":"unit/test-friendly-iframe-embed.js","skipped":false,"dir":"test"},{"name":"should pre-pend to html","suites":["mergeHtml"],"updatePoint":{"line":529,"column":31,"index":21310},"line":529,"code":"    it('should pre-pend to html', () => {\n      const html = mergeHtmlForTesting(spec);\n      expect(html).to.contain('<base href=\"https://acme.org/embed1\">');\n      expect(html).to.contain('<meta http-equiv=Content-Security-Policy content=');\n      expect(html).to.contain(\"object-src 'none';child-src 'none'\");\n      expect(html).to.contain(\"child-src 'none'\\\"><a></a>\");\n    });","file":"unit/test-friendly-iframe-embed.js","skipped":false,"dir":"test"},{"name":"should insert into head","suites":["mergeHtml"],"updatePoint":{"line":536,"column":31,"index":21692},"line":536,"code":"    it('should insert into head', () => {\n      spec.html = '<html><head>head</head><body>body';\n      const html = mergeHtmlForTesting(spec);\n      expect(html).to.contain('<html><head><base href=\"https://acme.org/embed1\">' + '<meta http-equiv=Content-Security-Policy content=');\n      expect(html).to.contain(\"child-src 'none'\\\">head</head><body>body\");\n    });","file":"unit/test-friendly-iframe-embed.js","skipped":false,"dir":"test"},{"name":"should insert into head w/o html","suites":["mergeHtml"],"updatePoint":{"line":542,"column":40,"index":22065},"line":542,"code":"    it('should insert into head w/o html', () => {\n      spec.html = '<head>head</head><body>body';\n      const html = mergeHtmlForTesting(spec);\n      expect(html).to.contain('<head><base href=\"https://acme.org/embed1\">' + '<meta http-equiv=Content-Security-Policy content=\"script-src');\n      expect(html).to.contain(\";object-src 'none';child-src 'none'\\\">head</head><body>body\");\n    });","file":"unit/test-friendly-iframe-embed.js","skipped":false,"dir":"test"},{"name":"should insert before body","suites":["mergeHtml"],"updatePoint":{"line":548,"column":33,"index":22449},"line":548,"code":"    it('should insert before body', () => {\n      spec.html = '<html><body>body';\n      const html = mergeHtmlForTesting(spec);\n      expect(html).to.contain('<html><base href=\"https://acme.org/embed1\">' + '<meta http-equiv=Content-Security-Policy content=\"script-src ');\n      expect(html).to.contain(\";object-src 'none';child-src 'none'\\\"><body>body\");\n    });","file":"unit/test-friendly-iframe-embed.js","skipped":false,"dir":"test"},{"name":"should insert before body w/o html","suites":["mergeHtml"],"updatePoint":{"line":554,"column":42,"index":22821},"line":554,"code":"    it('should insert before body w/o html', () => {\n      spec.html = '<body>body';\n      const html = mergeHtmlForTesting(spec);\n      expect(html).to.contain('<base href=\"https://acme.org/embed1\">' + '<meta http-equiv=Content-Security-Policy content=\"script-src ');\n      expect(html).to.contain(\";object-src 'none';child-src 'none'\\\"><body>body\");\n    });","file":"unit/test-friendly-iframe-embed.js","skipped":false,"dir":"test"},{"name":"should insert after html","suites":["mergeHtml"],"updatePoint":{"line":560,"column":32,"index":23171},"line":560,"code":"    it('should insert after html', () => {\n      spec.html = '<html>content';\n      const html = mergeHtmlForTesting(spec);\n      expect(html).to.contain('<html><base href=\"https://acme.org/embed1\">' + '<meta http-equiv=Content-Security-Policy content=\"script-src ');\n      expect(html).to.contain(\";object-src 'none';child-src 'none'\\\">content\");\n    });","file":"unit/test-friendly-iframe-embed.js","skipped":false,"dir":"test"},{"name":"should insert CSP","suites":["mergeHtml"],"updatePoint":{"line":566,"column":25,"index":23520},"line":566,"code":"    it('should insert CSP', () => {\n      spec.html = '<html><head></head><body></body></html>';\n      expect(mergeHtmlForTesting(spec)).to.contain('<meta http-equiv=Content-Security-Policy content=\"script-src ');\n      expect(mergeHtmlForTesting(spec)).to.contain(\";object-src 'none';\" + \"child-src 'none'\\\">\" + '</head><body></body></html>');\n      spec.html = '<html>foo';\n      expect(mergeHtmlForTesting(spec)).to.contain('<html><base href=\"https://acme.org/embed1\">' + '<meta http-equiv=Content-Security-Policy ' + 'content=\"script-src ');\n      expect(mergeHtmlForTesting(spec)).to.contain(\";object-src 'none';child-src 'none'\\\">foo\");\n      spec.html = '<body>foo';\n      expect(mergeHtmlForTesting(spec)).to.contain('<base href=\"https://acme.org/embed1\">' + '<meta http-equiv=Content-Security-Policy ' + 'content=\"script-src ');\n      expect(mergeHtmlForTesting(spec)).to.contain(\";object-src 'none';child-src 'none'\\\"><body>foo\");\n    });","file":"unit/test-friendly-iframe-embed.js","skipped":false,"dir":"test"},{"name":"should create the correct script-src CSP in dev mode","suites":["mergeHtml"],"updatePoint":{"line":577,"column":60,"index":24504},"line":577,"code":"    it('should create the correct script-src CSP in dev mode', () => {\n      env.sandbox.stub(self, '__AMP_MODE').value({\n        localDev: true\n      });\n      spec.html = '<html><head></head><body></body></html>';\n      const src = extractScriptSrc(mergeHtmlForTesting(spec));\n      expect(src).to.equal('http://localhost:8000/dist/lts/' + ' http://localhost:8000/dist/rtv/' + ' http://localhost:8000/dist/sw/');\n    });","file":"unit/test-friendly-iframe-embed.js","skipped":false,"dir":"test"},{"name":"should create the correct script-src CSP in non-dev mode","suites":["mergeHtml"],"updatePoint":{"line":585,"column":64,"index":24931},"line":585,"code":"    it('should create the correct script-src CSP in non-dev mode', () => {\n      env.sandbox.stub(self, '__AMP_MODE').value({\n        localDev: false\n      });\n      spec.html = '<html><head></head><body></body></html>';\n      const src = extractScriptSrc(mergeHtmlForTesting(spec));\n      expect(src).to.equal('https://cdn.ampproject.org/lts/' + ' https://cdn.ampproject.org/rtv/' + ' https://cdn.ampproject.org/sw/');\n    });","file":"unit/test-friendly-iframe-embed.js","skipped":false,"dir":"test"},{"name":"should wait until ready","suites":["child document ready and loaded states"],"updatePoint":{"line":595,"column":31,"index":25398},"line":595,"code":"    it('should wait until ready', () => {\n      const embedPromise = installFriendlyIframeEmbed(iframe, document.body, {\n        url: 'https://acme.org/url1',\n        html: '<a id=\"a1\"></a>',\n        extensions: []\n      });\n      return embedPromise.then(() => {\n        expect(iframe.contentDocument.getElementById('a1')).to.be.ok;\n      });\n    });","file":"unit/test-friendly-iframe-embed.js","skipped":true,"dir":"test"},{"name":"should wait until ready for doc.write case","suites":["child document ready and loaded states"],"updatePoint":{"line":605,"column":50,"index":25769},"line":605,"code":"    it('should wait until ready for doc.write case', () => {\n      setSrcdocSupportedForTesting(false);\n      const embedPromise = installFriendlyIframeEmbed(iframe, document.body, {\n        url: 'https://acme.org/url1',\n        html: '<a id=\"a1\"></a>',\n        extensions: []\n      });\n      return embedPromise.then(() => {\n        expect(iframe.contentDocument.getElementById('a1')).to.be.ok;\n      });\n    });","file":"unit/test-friendly-iframe-embed.js","skipped":true,"dir":"test"},{"name":"should wait for loaded state","suites":["child document ready and loaded states"],"updatePoint":{"line":616,"column":36,"index":26169},"line":616,"code":"    it('should wait for loaded state', () => {\n      const embedPromise = installFriendlyIframeEmbed(iframe, document.body, {\n        url: 'https://acme.org/url1',\n        html: '<a id=\"a1\"></a>',\n        extensions: []\n      });\n      return embedPromise.then(embed => {\n        return embed.whenWindowLoaded();\n      });\n    });","file":"unit/test-friendly-iframe-embed.js","skipped":true,"dir":"test"},{"name":"should wait for loaded state for doc.write case","suites":["child document ready and loaded states"],"updatePoint":{"line":626,"column":55,"index":26519},"line":626,"code":"    it('should wait for loaded state for doc.write case', () => {\n      setSrcdocSupportedForTesting(false);\n      const embedPromise = installFriendlyIframeEmbed(iframe, document.body, {\n        url: 'https://acme.org/url1',\n        html: '<a id=\"a1\"></a>',\n        extensions: []\n      });\n      return embedPromise.then(embed => {\n        return embed.whenWindowLoaded();\n      });\n    });","file":"unit/test-friendly-iframe-embed.js","skipped":true,"dir":"test"},{"name":"should add violation listener","suites":["child document ready and loaded states"],"updatePoint":{"line":637,"column":37,"index":26894},"line":637,"code":"    it('should add violation listener', () => {\n      let eventListenerSpy;\n      const container = {\n        appendChild: child => {\n          document.body.appendChild(child);\n          eventListenerSpy = env.sandbox.spy(child.contentWindow, 'addEventListener');\n        }\n      };\n      const embedPromise = installFriendlyIframeEmbed(iframe, container, {\n        url: 'https://acme.org/url1',\n        html: '<a id=\"a1\"></a>'\n      });\n      return embedPromise.then(() => {\n        expect(eventListenerSpy).to.be.calledOnce;\n      });\n    });","file":"unit/test-friendly-iframe-embed.js","skipped":true,"dir":"test"},{"name":"should poll until ready","suites":["child document ready polling"],"updatePoint":{"line":727,"column":31,"index":29359},"line":727,"code":"    it('should poll until ready', () => {\n      iframe.contentWindow = contentWindow;\n      const embedPromise = installFriendlyIframeEmbed(iframe, container, {\n        url: 'https://acme.org/url1',\n        html: '<body></body>'\n      }, preinstallCallback);\n      let ready = false;\n      embedPromise.then(() => {\n        ready = true;\n      });\n      expect(polls).to.have.length(1);\n      return Promise.race([Promise.resolve(), embedPromise]).then(() => {\n        expect(ready).to.be.false;\n        expect(polls).to.have.length(1);\n\n        // Window is now available.\n        iframe.contentWindow = contentWindow;\n        clock.tick(5);\n        return Promise.race([Promise.resolve(), embedPromise]);\n      }).then(() => {\n        expect(ready).to.be.false;\n        expect(polls).to.have.length(1);\n\n        // Document is now available.\n        contentWindow.document = contentDocument;\n        clock.tick(5);\n        return Promise.race([Promise.resolve(), embedPromise]);\n      }).then(() => {\n        expect(ready).to.be.false;\n        expect(polls).to.have.length(1);\n\n        // Body is now available.\n        Object.defineProperty(contentDocument, 'body', {\n          value: contentBody\n        });\n        clock.tick(5);\n        return Promise.race([Promise.resolve(), embedPromise]);\n      }).then(() => {\n        expect(ready).to.be.false;\n        expect(polls).to.have.length(1);\n\n        // Body is now not empty.\n        contentBody.firstChild = {};\n        window.setInterval(() => {\n          clock.tick(5);\n        }, 5);\n        return embedPromise;\n      }).then(() => {\n        expect(ready).to.equal(true, 'Finally ready');\n        expect(polls).to.have.length(0);\n      });\n    });","file":"unit/test-friendly-iframe-embed.js","skipped":false,"dir":"test"},{"name":"should stop polling when loaded","suites":["child document ready polling"],"updatePoint":{"line":779,"column":39,"index":31076},"line":779,"code":"    it('should stop polling when loaded', async () => {\n      iframe.contentWindow = contentWindow;\n      const embedPromise = installFriendlyIframeEmbed(iframe, container, {\n        url: 'https://acme.org/url1',\n        html: '<body></body>'\n      });\n      expect(polls).to.have.length(1);\n      iframe.contentWindow = contentWindow;\n      window.setInterval(() => {\n        clock.tick(5);\n      }, 5);\n      loadListener();\n      await embedPromise;\n      expect(polls).to.have.length(0);\n      expect(installStub).to.be.calledOnce;\n    });","file":"unit/test-friendly-iframe-embed.js","skipped":false,"dir":"test"},{"name":"should not throw if inside an amp-ad","suites":["full overlay mode"],"updatePoint":{"line":836,"column":44,"index":32834},"line":836,"code":"    it('should not throw if inside an amp-ad', () => {\n      const bodyElementMock = document.createElement('div');\n      const fie = createFie(bodyElementMock, 'amp-ad');\n      const scrollTop = 0;\n      stubViewportScrollTop(scrollTop);\n      expect(() => fie.enterFullOverlayMode()).to.not.throw();\n    });","file":"unit/test-friendly-iframe-embed.js","skipped":false,"dir":"test"},{"name":"should throw if not inside an amp-ad","suites":["full overlay mode"],"updatePoint":{"line":843,"column":44,"index":33144},"line":843,"code":"    it('should throw if not inside an amp-ad', () => {\n      const bodyElementMock = document.createElement('div');\n      const fie = createFie(bodyElementMock, 'not-an-amp-ad');\n      const scrollTop = 0;\n      stubViewportScrollTop(scrollTop);\n      allowConsoleError(() => {\n        expect(() => fie.enterFullOverlayMode()).to.throw(/Only .?amp-ad.? is allowed/);\n      });\n    });","file":"unit/test-friendly-iframe-embed.js","skipped":false,"dir":"test"},{"name":"should reset body and fixed container when leaving","suites":["full overlay mode"],"updatePoint":{"line":877,"column":58,"index":34788},"line":877,"code":"    it('should reset body and fixed container when leaving', function* () {\n      const bodyElementMock = document.createElement('div');\n      const fie = createFie(bodyElementMock);\n      const scrollTop = 19;\n      stubViewportScrollTop(scrollTop);\n      yield fie.enterFullOverlayMode();\n      yield fie.leaveFullOverlayMode();\n      expect(bodyElementMock.style.position).to.be.empty;\n      expect(bodyElementMock.style.width).to.be.empty;\n      expect(bodyElementMock.style.height).to.be.empty;\n      expect(bodyElementMock.style.top).to.be.empty;\n      expect(bodyElementMock.style.left).to.be.empty;\n      expect(bodyElementMock.style.right).to.be.empty;\n      expect(bodyElementMock.style.bottom).to.be.empty;\n      const {\n        iframe\n      } = fie;\n      expect(iframe.style.position).to.be.empty;\n      expect(iframe.style.left).to.be.empty;\n      expect(iframe.style.right).to.be.empty;\n      expect(iframe.style.top).to.be.empty;\n      expect(iframe.style.bottom).to.be.empty;\n      expect(iframe.style.width).to.be.empty;\n      expect(iframe.style.height).to.be.empty;\n    });","file":"unit/test-friendly-iframe-embed.js","skipped":false,"dir":"test"},{"name":"should set window hierarchy","suites":["full overlay mode"],"updatePoint":{"line":961,"column":33,"index":37709},"line":961,"code":"  it('should set window hierarchy', async () => {\n    await Installers.installExtensionsInEmbed(fie, extensions, ampdoc, []);\n    expect(iframeWin.__AMP_PARENT).to.equal(parentWin);\n    expect(iframeWin.__AMP_TOP).to.equal(parentWin);\n    expect(startRender).to.be.calledOnce;\n  });","file":"unit/test-friendly-iframe-embed.js","skipped":false,"dir":"test"},{"name":"should install runtime styles","suites":["full overlay mode"],"updatePoint":{"line":967,"column":35,"index":37994},"line":967,"code":"  it('should install runtime styles', async () => {\n    await Installers.installExtensionsInEmbed(fie, extensions, ampdoc, []);\n    expect(iframeWin.document.querySelector('style[amp-runtime]')).to.exist;\n  });","file":"unit/test-friendly-iframe-embed.js","skipped":false,"dir":"test"},{"name":"should install built-ins","suites":["full overlay mode"],"updatePoint":{"line":971,"column":30,"index":38200},"line":971,"code":"  it('should install built-ins', async () => {\n    await Installers.installExtensionsInEmbed(fie, extensions, ampdoc, []);\n    expect(iframeWin.__AMP_EXTENDED_ELEMENTS).to.exist;\n    expect(iframeWin.__AMP_EXTENDED_ELEMENTS['amp-img']).to.exist;\n    expect(iframeWin.__AMP_EXTENDED_ELEMENTS['amp-img']).to.not.equal(ElementStub);\n    expect(iframeWin.__AMP_EXTENDED_ELEMENTS['amp-pixel']).to.exist;\n    expect(iframeWin.__AMP_EXTENDED_ELEMENTS['amp-pixel']).to.not.equal(ElementStub);\n    // Legacy elements are installed as well.\n    expect(iframeWin.__AMP_EXTENDED_ELEMENTS['amp-ad']).to.equal(ElementStub);\n    expect(iframeWin.__AMP_EXTENDED_ELEMENTS['amp-embed']).to.equal(ElementStub);\n    expect(iframeWin.__AMP_EXTENDED_ELEMENTS['amp-video']).to.equal(ElementStub);\n  });","file":"unit/test-friendly-iframe-embed.js","skipped":false,"dir":"test"},{"name":"should create new standard services","suites":["full overlay mode"],"updatePoint":{"line":983,"column":41,"index":38991},"line":983,"code":"  it('should create new standard services', async () => {\n    await Installers.installExtensionsInEmbed(fie, extensions, ampdoc, []);\n    const url = Services.urlForDoc(iframeDocEl);\n    const actions = Services.actionServiceForDoc(iframeDocEl);\n    const standardActions = Services.standardActionsForDoc(iframeDocEl);\n    const navigation = Services.navigationForDoc(iframeDocEl);\n    expect(url).to.exist;\n    expect(actions).to.exist;\n    expect(standardActions).to.exist;\n    expect(navigation).to.exist;\n    expect(Services.timerFor(iframeWin)).to.exist;\n    const parentUrl = Services.urlForDoc(parentWin.document.head);\n    expect(parentUrl).to.exist;\n    expect(url).to.not.equal(parentUrl);\n  });","file":"unit/test-friendly-iframe-embed.js","skipped":false,"dir":"test"},{"name":"should adopt parent standard services","suites":["full overlay mode"],"updatePoint":{"line":998,"column":43,"index":39699},"line":998,"code":"  it('should adopt parent standard services', async () => {\n    await Installers.installExtensionsInEmbed(fie, extensions, ampdoc, []);\n    const viewer = Services.urlForDoc(iframeDocEl);\n    const parentViewer = Services.urlForDoc(parentWin.document.head);\n    expect(viewer).to.exist;\n    expect(parentViewer).to.exist;\n    expect(viewer).to.not.equal(parentViewer);\n  });","file":"unit/test-friendly-iframe-embed.js","skipped":false,"dir":"test"},{"name":"should install extensions in child window","suites":["full overlay mode"],"updatePoint":{"line":1006,"column":47,"index":40078},"line":1006,"code":"  it('should install extensions in child window', async () => {\n    const extHolder = extensions.getExtensionHolder_('amp-test', 'latest');\n    extHolder.scriptPresent = true;\n    await Installers.installExtensionsInEmbed(fie, extensions, ampdoc, [{\n      extensionId: 'amp-test',\n      extensionVersion: 'latest'\n    }], null, installComplete);\n\n    // Must be stubbed already.\n    expect(iframeWin.__AMP_EXTENDED_ELEMENTS['amp-test']).to.equal(ElementStub);\n    expect(iframeWin.document.createElement('amp-test').implClass_).to.be.null;\n    expect(iframeWin.__AMP_EXTENDED_ELEMENTS['amp-test-sub']).to.be.undefined;\n\n    // Resolve the promise.\n    extensions.registerExtension('amp-test', '0.1', true, AMP => {\n      // Main extension with CSS.\n      AMP.registerElement('amp-test', AmpTest, 'a{}');\n      // Secondary extension w/o CSS.\n      AMP.registerElement('amp-test-sub', AmpTestSub);\n    }, parentWin.AMP);\n    await installCompletePromise;\n\n    // Main extension.\n    expect(parentWin.__AMP_EXTENDED_ELEMENTS['amp-test']).to.be.undefined;\n    expect(iframeWin.__AMP_EXTENDED_ELEMENTS['amp-test']).to.equal(AmpTest);\n    expect(iframeWin.document.querySelector('style[amp-extension=amp-test]')).to.exist;\n    // Must be upgraded already.\n    expect(iframeWin.document.createElement('amp-test').implClass_).to.equal(AmpTest);\n\n    // Secondary extension.\n    expect(parentWin.__AMP_EXTENDED_ELEMENTS['amp-test-sub']).to.be.undefined;\n    expect(iframeWin.__AMP_EXTENDED_ELEMENTS['amp-test-sub']).to.equal(AmpTestSub);\n    expect(iframeWin.document.querySelector('style[amp-extension=amp-test-sub]')).to.not.exist;\n    // Must be upgraded already.\n    expect(iframeWin.document.createElement('amp-test-sub').implClass_).to.equal(AmpTestSub);\n  });","file":"unit/test-friendly-iframe-embed.js","skipped":false,"dir":"test"},{"name":"should adopt extension services","suites":["full overlay mode"],"updatePoint":{"line":1042,"column":37,"index":41827},"line":1042,"code":"  it('should adopt extension services', async () => {\n    const fooConstructorSpy = env.sandbox.spy();\n    class FooService {\n      constructor(arg) {\n        fooConstructorSpy(arg);\n      }\n    }\n    registerServiceBuilder(parentWin, 'fake-service-foo', FooService, /* opt_instantiate */false);\n    const barConstructorSpy = env.sandbox.spy();\n    class BarService {\n      constructor(arg) {\n        barConstructorSpy(arg);\n      }\n    }\n    registerServiceBuilder(parentWin, 'fake-service-bar', BarService, /* opt_instantiate */false);\n    const extHolder = extensions.getExtensionHolder_('amp-test', 'latest');\n    extHolder.scriptPresent = true;\n    await Installers.installExtensionsInEmbed(fie, extensions, ampdoc, [{\n      extensionId: 'amp-test',\n      extensionVersion: 'latest'\n    }], null, installComplete);\n\n    // Resolve the promise `install`.\n    extensions.registerExtension('amp-test', '0.1', true, AMP => {\n      AMP.registerServiceForDoc('fake-service-foo', FooService);\n    }, parentWin.AMP);\n    await installCompletePromise;\n    expect(fooConstructorSpy).calledOnce.calledWith(ampdoc);\n    expect(barConstructorSpy).to.not.be.called;\n  });","file":"unit/test-friendly-iframe-embed.js","skipped":false,"dir":"test"},{"name":"should call pre-install callback before other installs","suites":["full overlay mode"],"updatePoint":{"line":1072,"column":60,"index":43013},"line":1072,"code":"  it('should call pre-install callback before other installs', async () => {\n    let preinstallCount = 0;\n    const extHolder = extensions.getExtensionHolder_('amp-test', 'latest');\n    extHolder.scriptPresent = true;\n    await Installers.installExtensionsInEmbed(fie, extensions, ampdoc, [{\n      extensionId: 'amp-test',\n      extensionVersion: 'latest'\n    }], function (winArg, ampdocArg) {\n      expect(winArg).to.equal(iframeWin);\n      expect(ampdocArg).to.equal(ampdoc);\n      // Built-ins not installed yet.\n      expect(iframeWin.__AMP_EXTENDED_ELEMENTS && iframeWin.__AMP_EXTENDED_ELEMENTS['amp-img']).to.not.exist;\n      // Extension is not loaded yet.\n      expect(iframeWin.__AMP_EXTENDED_ELEMENTS && iframeWin.__AMP_EXTENDED_ELEMENTS['amp-test']).to.not.exist;\n      preinstallCount++;\n    }, installComplete);\n    expect(preinstallCount).to.equal(1);\n    expect(iframeWin.__AMP_EXTENDED_ELEMENTS).to.exist;\n    expect(iframeWin.__AMP_EXTENDED_ELEMENTS['amp-img']).to.exist;\n    expect(iframeWin.__AMP_EXTENDED_ELEMENTS['amp-img']).to.not.equal(ElementStub);\n    expect(iframeWin.__AMP_EXTENDED_ELEMENTS['amp-test']).to.equal(ElementStub);\n\n    // Resolve the promise.\n    extensions.registerExtension('amp-test', '0.1', true, AMP => {\n      AMP.registerElement('amp-test', AmpTest);\n    }, parentWin.AMP);\n    await installCompletePromise;\n\n    // Extension elements are stubbed immediately, but registered only\n    // after extension is loaded.\n    expect(iframeWin.__AMP_EXTENDED_ELEMENTS['amp-test']).to.equal(AmpTest);\n  });","file":"unit/test-friendly-iframe-embed.js","skipped":false,"dir":"test"},{"name":"should allow single-point touchstart","suites":[],"updatePoint":{"line":22,"column":42,"index":704},"line":22,"code":"  it('should allow single-point touchstart', () => {\n    const res = recognizer.onTouchStart({\n      touches: [{\n        clientX: 101,\n        clientY: 201\n      }]\n    });\n    expect(res).to.equal(true);\n    expect(recognizer.startX_).to.equal(101);\n    expect(recognizer.startY_).to.equal(201);\n  });","file":"unit/test-gesture-recognizers.js","skipped":false,"dir":"test"},{"name":"should deny two-point touchstart","suites":[],"updatePoint":{"line":33,"column":38,"index":1003},"line":33,"code":"  it('should deny two-point touchstart', () => {\n    const res = recognizer.onTouchStart({\n      touches: [{\n        clientX: 101,\n        clientY: 201\n      }, {}]\n    });\n    expect(res).to.equal(false);\n    expect(recognizer.startX_).to.equal(0);\n    expect(recognizer.startY_).to.equal(0);\n  });","file":"unit/test-gesture-recognizers.js","skipped":false,"dir":"test"},{"name":"should allow small drift","suites":[],"updatePoint":{"line":44,"column":30,"index":1295},"line":44,"code":"  it('should allow small drift', () => {\n    let res = recognizer.onTouchStart({\n      touches: [{\n        clientX: 101,\n        clientY: 201\n      }]\n    });\n    expect(res).to.equal(true);\n    expect(recognizer.startX_).to.equal(101);\n    expect(recognizer.startY_).to.equal(201);\n    res = recognizer.onTouchMove({\n      touches: [{\n        clientX: 102,\n        clientY: 202\n      }]\n    });\n    expect(res).to.equal(true);\n    expect(recognizer.lastX_).to.equal(102);\n    expect(recognizer.lastY_).to.equal(202);\n  });","file":"unit/test-gesture-recognizers.js","skipped":false,"dir":"test"},{"name":"should deny large drift","suites":[],"updatePoint":{"line":64,"column":29,"index":1818},"line":64,"code":"  it('should deny large drift', () => {\n    let res = recognizer.onTouchStart({\n      touches: [{\n        clientX: 101,\n        clientY: 201\n      }]\n    });\n    expect(res).to.equal(true);\n    expect(recognizer.startX_).to.equal(101);\n    expect(recognizer.startY_).to.equal(201);\n    res = recognizer.onTouchMove({\n      touches: [{\n        clientX: 111,\n        clientY: 211\n      }]\n    });\n    expect(res).to.equal(false);\n  });","file":"unit/test-gesture-recognizers.js","skipped":false,"dir":"test"},{"name":"should signal ready on touchend","suites":[],"updatePoint":{"line":82,"column":37,"index":2260},"line":82,"code":"  it('should signal ready on touchend', () => {\n    gesturesMock.expects('signalReady_').withExactArgs(recognizer, 0).once();\n    recognizer.onTouchEnd({});\n  });","file":"unit/test-gesture-recognizers.js","skipped":false,"dir":"test"},{"name":"should emit and end on start","suites":[],"updatePoint":{"line":86,"column":34,"index":2420},"line":86,"code":"  it('should emit and end on start', () => {\n    recognizer.lastX_ = 101;\n    recognizer.lastY_ = 201;\n    const target = element;\n    recognizer.target_ = target;\n    gesturesMock.expects('signalEmit_').withExactArgs(recognizer, env.sandbox.match(data => {\n      return data.clientX == 101 && data.clientY == 201 && data.target === target;\n    }), null).once();\n    gesturesMock.expects('signalEnd_').withExactArgs(recognizer).once();\n    recognizer.acceptStart();\n  });","file":"unit/test-gesture-recognizers.js","skipped":false,"dir":"test"},{"name":"should allow single-point touchstart","suites":[],"updatePoint":{"line":117,"column":42,"index":3392},"line":117,"code":"  it('should allow single-point touchstart', () => {\n    const res = recognizer.onTouchStart({\n      touches: [{\n        clientX: 101,\n        clientY: 201\n      }]\n    });\n    expect(res).to.equal(true);\n    expect(recognizer.startX_).to.equal(101);\n    expect(recognizer.startY_).to.equal(201);\n  });","file":"unit/test-gesture-recognizers.js","skipped":false,"dir":"test"},{"name":"should deny two-point touchstart","suites":[],"updatePoint":{"line":128,"column":38,"index":3691},"line":128,"code":"  it('should deny two-point touchstart', () => {\n    const res = recognizer.onTouchStart({\n      touches: [{\n        clientX: 101,\n        clientY: 201\n      }, {}]\n    });\n    expect(res).to.equal(false);\n    expect(recognizer.startX_).to.equal(0);\n    expect(recognizer.startY_).to.equal(0);\n  });","file":"unit/test-gesture-recognizers.js","skipped":false,"dir":"test"},{"name":"should allow small drift","suites":[],"updatePoint":{"line":139,"column":30,"index":3983},"line":139,"code":"  it('should allow small drift', () => {\n    let res = recognizer.onTouchStart({\n      touches: [{\n        clientX: 101,\n        clientY: 201\n      }]\n    });\n    expect(res).to.equal(true);\n    expect(recognizer.startX_).to.equal(101);\n    expect(recognizer.startY_).to.equal(201);\n    res = recognizer.onTouchMove({\n      touches: [{\n        clientX: 102,\n        clientY: 202\n      }]\n    });\n    expect(res).to.equal(true);\n    expect(recognizer.lastX_).to.equal(102);\n    expect(recognizer.lastY_).to.equal(202);\n  });","file":"unit/test-gesture-recognizers.js","skipped":false,"dir":"test"},{"name":"should deny large drift","suites":[],"updatePoint":{"line":159,"column":29,"index":4506},"line":159,"code":"  it('should deny large drift', () => {\n    let res = recognizer.onTouchStart({\n      touches: [{\n        clientX: 101,\n        clientY: 201\n      }]\n    });\n    expect(res).to.equal(true);\n    expect(recognizer.startX_).to.equal(101);\n    expect(recognizer.startY_).to.equal(201);\n    res = recognizer.onTouchMove({\n      touches: [{\n        clientX: 111,\n        clientY: 211\n      }]\n    });\n    expect(res).to.equal(false);\n  });","file":"unit/test-gesture-recognizers.js","skipped":false,"dir":"test"},{"name":"should ask pending for first touchend","suites":[],"updatePoint":{"line":177,"column":43,"index":4954},"line":177,"code":"  it('should ask pending for first touchend', () => {\n    gesturesMock.expects('signalPending_').withExactArgs(recognizer, 200).once();\n    gesturesMock.expects('signalReady_').never();\n    recognizer.onTouchEnd({});\n    expect(recognizer.tapCount_).to.equal(1);\n  });","file":"unit/test-gesture-recognizers.js","skipped":false,"dir":"test"},{"name":"should send ready for second touchend","suites":[],"updatePoint":{"line":183,"column":43,"index":5223},"line":183,"code":"  it('should send ready for second touchend', () => {\n    gesturesMock.expects('signalPending_').once();\n    recognizer.onTouchEnd({});\n    gesturesMock.expects('signalReady_').withExactArgs(recognizer, 0).once();\n    recognizer.onTouchEnd({});\n    expect(recognizer.tapCount_).to.equal(2);\n  });","file":"unit/test-gesture-recognizers.js","skipped":false,"dir":"test"},{"name":"should emit and end on start","suites":[],"updatePoint":{"line":190,"column":34,"index":5511},"line":190,"code":"  it('should emit and end on start', () => {\n    recognizer.lastX_ = 101;\n    recognizer.lastY_ = 201;\n    gesturesMock.expects('signalEmit_').withExactArgs(recognizer, env.sandbox.match(data => {\n      return data.clientX == 101 && data.clientY == 201;\n    }), null).once();\n    gesturesMock.expects('signalEnd_').withExactArgs(recognizer).once();\n    recognizer.acceptStart();\n    expect(recognizer.tapCount_).to.equal(0);\n  });","file":"unit/test-gesture-recognizers.js","skipped":false,"dir":"test"},{"name":"should allow single-point touchstart","suites":[],"updatePoint":{"line":225,"column":42,"index":6584},"line":225,"code":"  it('should allow single-point touchstart', () => {\n    const res = recognizer.onTouchStart({\n      touches: [{\n        clientX: 101,\n        clientY: 201\n      }]\n    });\n    expect(res).to.equal(true);\n    expect(recognizer.startX_).to.equal(101);\n    expect(recognizer.startY_).to.equal(201);\n  });","file":"unit/test-gesture-recognizers.js","skipped":false,"dir":"test"},{"name":"should deny two-point touchstart","suites":[],"updatePoint":{"line":236,"column":38,"index":6883},"line":236,"code":"  it('should deny two-point touchstart', () => {\n    const res = recognizer.onTouchStart({\n      touches: [{\n        clientX: 101,\n        clientY: 201\n      }, {}]\n    });\n    expect(res).to.equal(false);\n    expect(recognizer.startX_).to.equal(0);\n    expect(recognizer.startY_).to.equal(0);\n  });","file":"unit/test-gesture-recognizers.js","skipped":false,"dir":"test"},{"name":"should allow small drift before requesting ready","suites":[],"updatePoint":{"line":247,"column":54,"index":7199},"line":247,"code":"  it('should allow small drift before requesting ready', () => {\n    gesturesMock.expects('signalReady_').never();\n    let res = recognizer.onTouchStart({\n      touches: [{\n        clientX: 101,\n        clientY: 201\n      }]\n    });\n    expect(res).to.equal(true);\n    expect(recognizer.startX_).to.equal(101);\n    expect(recognizer.startY_).to.equal(201);\n    res = recognizer.onTouchMove({\n      touches: [{\n        clientX: 102,\n        clientY: 202\n      }]\n    });\n    expect(res).to.equal(true);\n    expect(recognizer.lastX_).to.equal(102);\n    expect(recognizer.lastY_).to.equal(202);\n  });","file":"unit/test-gesture-recognizers.js","skipped":false,"dir":"test"},{"name":"should send ready after significant move","suites":[],"updatePoint":{"line":268,"column":46,"index":7789},"line":268,"code":"  it('should send ready after significant move', () => {\n    gesturesMock.expects('signalReady_').withExactArgs(recognizer, -10).once();\n    let res = recognizer.onTouchStart({\n      touches: [{\n        clientX: 101,\n        clientY: 201\n      }]\n    });\n    expect(res).to.equal(true);\n    res = recognizer.onTouchMove({\n      touches: [{\n        clientX: 112,\n        clientY: 212\n      }]\n    });\n    expect(res).to.equal(true);\n    expect(recognizer.lastX_).to.equal(112);\n    expect(recognizer.lastY_).to.equal(212);\n  });","file":"unit/test-gesture-recognizers.js","skipped":false,"dir":"test"},{"name":"should emit on start","suites":[],"updatePoint":{"line":287,"column":26,"index":8297},"line":287,"code":"  it('should emit on start', () => {\n    recognizer.startTime_ = 1;\n    recognizer.startX_ = recognizer.prevX_ = 101;\n    recognizer.startY_ = recognizer.prevY_ = 201;\n    recognizer.lastX_ = 111;\n    recognizer.lastY_ = 211;\n    gesturesMock.expects('signalEmit_').withExactArgs(recognizer, env.sandbox.match(data => {\n      return data.first === true && data.last === false && data.deltaX == 0 && data.deltaY == 0 && data.time == 10 && diff(data.velocityX, 0.86, 1e-2) && diff(data.velocityY, 0.86, 1e-2);\n    }), null).once();\n    gesturesMock.expects('signalEnd_').never();\n    clock.tick(10);\n    recognizer.acceptStart();\n    expect(recognizer.eventing_).to.equal(true);\n    expect(recognizer.startTime_).to.equal(1);\n    expect(recognizer.startX_).to.equal(111);\n    expect(recognizer.startY_).to.equal(211);\n    expect(recognizer.prevTime_).to.equal(10);\n    expect(recognizer.prevX_).to.equal(111);\n    expect(recognizer.prevY_).to.equal(211);\n  });","file":"unit/test-gesture-recognizers.js","skipped":false,"dir":"test"},{"name":"should emit on touchmove after start","suites":[],"updatePoint":{"line":307,"column":42,"index":9272},"line":307,"code":"  it('should emit on touchmove after start', () => {\n    const event = {\n      touches: [{\n        clientX: 111,\n        clientY: 211\n      }]\n    };\n    recognizer.startX_ = recognizer.prevX_ = 101;\n    recognizer.startY_ = recognizer.prevY_ = 201;\n    recognizer.eventing_ = true;\n    gesturesMock.expects('signalEmit_').withExactArgs(recognizer, env.sandbox.match(data => {\n      return data.first === false && data.last === false && data.deltaX == 10 && data.deltaY == 10 && data.velocityX > 0 && data.velocityY > 0;\n    }), event).once();\n    gesturesMock.expects('signalEnd_').never();\n    clock.tick(10);\n    const res = recognizer.onTouchMove(event);\n    expect(res).to.equal(true);\n    expect(recognizer.lastX_).to.equal(111);\n    expect(recognizer.lastY_).to.equal(211);\n  });","file":"unit/test-gesture-recognizers.js","skipped":false,"dir":"test"},{"name":"should stop on touchend; velocity doesn't change","suites":[],"updatePoint":{"line":327,"column":54,"index":10071},"line":327,"code":"  it(\"should stop on touchend; velocity doesn't change\", () => {\n    const event = {\n      touches: []\n    };\n    recognizer.startX_ = recognizer.prevX_ = 101;\n    recognizer.startY_ = recognizer.prevY_ = 201;\n    recognizer.lastX_ = 111;\n    recognizer.lastY_ = 211;\n    recognizer.velocityX_ = 0.5;\n    recognizer.velocityY_ = 0.5;\n    recognizer.eventing_ = true;\n    gesturesMock.expects('signalEmit_').withExactArgs(recognizer, env.sandbox.match(data => {\n      return data.first === false && data.last === true && data.deltaX == 10 && data.deltaY == 10 && data.velocityX == 0.5 && data.velocityY == 0.5;\n    }), event).once();\n    gesturesMock.expects('signalEnd_').once();\n    clock.tick(10);\n    recognizer.onTouchEnd(event);\n    expect(recognizer.eventing_).to.equal(false);\n  });","file":"unit/test-gesture-recognizers.js","skipped":false,"dir":"test"},{"name":"should stop on touchend; velocity changes","suites":[],"updatePoint":{"line":346,"column":47,"index":10854},"line":346,"code":"  it('should stop on touchend; velocity changes', () => {\n    const event = {\n      touches: []\n    };\n    recognizer.startX_ = 101;\n    recognizer.startY_ = 201;\n    recognizer.lastX_ = recognizer.prevX_ = 111;\n    recognizer.lastY_ = recognizer.prevY_ = 211;\n    recognizer.velocityX_ = 0.5;\n    recognizer.velocityY_ = 0.5;\n    recognizer.eventing_ = true;\n    gesturesMock.expects('signalEmit_').withExactArgs(recognizer, env.sandbox.match(data => {\n      return data.first === false && data.last === true && data.deltaX == 10 && data.deltaY == 10 && data.velocityX == 0 && data.velocityY == 0;\n    }), event).once();\n    gesturesMock.expects('signalEnd_').once();\n    clock.tick(50);\n    recognizer.onTouchEnd(event);\n    expect(recognizer.eventing_).to.equal(false);\n  });","file":"unit/test-gesture-recognizers.js","skipped":false,"dir":"test"},{"name":"should ignore additional touches if eventing","suites":[],"updatePoint":{"line":365,"column":50,"index":11636},"line":365,"code":"  it('should ignore additional touches if eventing', () => {\n    const event = {\n      touches: [{\n        clientX: 111,\n        clientY: 211\n      }]\n    };\n    recognizer.startX_ = recognizer.prevX_ = 101;\n    recognizer.startY_ = recognizer.prevY_ = 201;\n    recognizer.eventing_ = true;\n    gesturesMock.expects('signalEmit_').twice();\n    clock.tick(10);\n    let res = recognizer.onTouchMove(event);\n    expect(res).to.equal(true);\n    expect(recognizer.lastX_).to.equal(111);\n    expect(recognizer.lastY_).to.equal(211);\n    res = recognizer.onTouchStart({\n      touches: [{\n        clientX: 111,\n        clientY: 211\n      }, {\n        clientX: 122,\n        clientY: 254\n      }]\n    });\n\n    // Additional touch start should not have any effect\n    expect(res).to.equal(true);\n    res = recognizer.onTouchMove({\n      touches: [{\n        clientX: 111,\n        clientY: 211\n      }, {\n        clientX: 122,\n        clientY: 234\n      }]\n    });\n\n    // Additional touch move should not have any effect\n    expect(res).to.equal(true);\n    clock.tick(50);\n\n    // If further touches are remaining, do not fire signal end.\n    recognizer.onTouchEnd({\n      touches: [{\n        clientX: 111,\n        clientY: 211\n      }]\n    });\n    expect(recognizer.eventing_).to.equal(true);\n    gesturesMock.expects('signalEnd_').never();\n  });","file":"unit/test-gesture-recognizers.js","skipped":false,"dir":"test"},{"name":"should allow single-point touchstart","suites":[],"updatePoint":{"line":439,"column":42,"index":13506},"line":439,"code":"  it('should allow single-point touchstart', () => {\n    const res = recognizer.onTouchStart({\n      touches: [{\n        clientX: 101,\n        clientY: 201\n      }]\n    });\n    expect(res).to.equal(true);\n    expect(recognizer.startX_).to.equal(101);\n    expect(recognizer.startY_).to.equal(201);\n  });","file":"unit/test-gesture-recognizers.js","skipped":false,"dir":"test"},{"name":"should deny two-point touchstart","suites":[],"updatePoint":{"line":450,"column":38,"index":13805},"line":450,"code":"  it('should deny two-point touchstart', () => {\n    const res = recognizer.onTouchStart({\n      touches: [{\n        clientX: 101,\n        clientY: 201\n      }, {}]\n    });\n    expect(res).to.equal(false);\n    expect(recognizer.startX_).to.equal(0);\n    expect(recognizer.startY_).to.equal(0);\n  });","file":"unit/test-gesture-recognizers.js","skipped":false,"dir":"test"},{"name":"should allow small drift for tap","suites":[],"updatePoint":{"line":461,"column":38,"index":14105},"line":461,"code":"  it('should allow small drift for tap', () => {\n    let res = recognizer.onTouchStart({\n      touches: [{\n        clientX: 101,\n        clientY: 201\n      }]\n    });\n    expect(res).to.equal(true);\n    expect(recognizer.startX_).to.equal(101);\n    expect(recognizer.startY_).to.equal(201);\n    res = recognizer.onTouchMove({\n      touches: [{\n        clientX: 102,\n        clientY: 202\n      }]\n    });\n    expect(res).to.equal(true);\n    expect(recognizer.lastX_).to.equal(102);\n    expect(recognizer.lastY_).to.equal(202);\n  });","file":"unit/test-gesture-recognizers.js","skipped":false,"dir":"test"},{"name":"should deny large drift for tap","suites":[],"updatePoint":{"line":481,"column":37,"index":14636},"line":481,"code":"  it('should deny large drift for tap', () => {\n    let res = recognizer.onTouchStart({\n      touches: [{\n        clientX: 101,\n        clientY: 201\n      }]\n    });\n    expect(res).to.equal(true);\n    expect(recognizer.startX_).to.equal(101);\n    expect(recognizer.startY_).to.equal(201);\n    res = recognizer.onTouchMove({\n      touches: [{\n        clientX: 111,\n        clientY: 211\n      }]\n    });\n    expect(res).to.equal(false);\n  });","file":"unit/test-gesture-recognizers.js","skipped":false,"dir":"test"},{"name":"should ask pending for first touchend","suites":[],"updatePoint":{"line":499,"column":43,"index":15084},"line":499,"code":"  it('should ask pending for first touchend', () => {\n    gesturesMock.expects('signalPending_').withExactArgs(recognizer, 400).once();\n    gesturesMock.expects('signalReady_').never();\n    recognizer.onTouchEnd({});\n    expect(recognizer.tapCount_).to.equal(1);\n  });","file":"unit/test-gesture-recognizers.js","skipped":false,"dir":"test"},{"name":"should ignore small drift after first tap","suites":[],"updatePoint":{"line":505,"column":47,"index":15357},"line":505,"code":"  it('should ignore small drift after first tap', () => {\n    recognizer.tapCount_ = 1;\n    gesturesMock.expects('signalReady_').never();\n    let res = recognizer.onTouchStart({\n      touches: [{\n        clientX: 101,\n        clientY: 201\n      }]\n    });\n    expect(res).to.equal(true);\n    expect(recognizer.startX_).to.equal(101);\n    expect(recognizer.startY_).to.equal(201);\n    res = recognizer.onTouchMove({\n      touches: [{\n        clientX: 102,\n        clientY: 202\n      }]\n    });\n    expect(res).to.equal(true);\n    expect(recognizer.lastX_).to.equal(102);\n    expect(recognizer.lastY_).to.equal(202);\n  });","file":"unit/test-gesture-recognizers.js","skipped":false,"dir":"test"},{"name":"should send ready after significant move","suites":[],"updatePoint":{"line":527,"column":46,"index":15977},"line":527,"code":"  it('should send ready after significant move', () => {\n    recognizer.tapCount_ = 1;\n    gesturesMock.expects('signalReady_').withExactArgs(recognizer, 0).once();\n    let res = recognizer.onTouchStart({\n      touches: [{\n        clientX: 101,\n        clientY: 201\n      }]\n    });\n    expect(res).to.equal(true);\n    res = recognizer.onTouchMove({\n      touches: [{\n        clientX: 112,\n        clientY: 212\n      }]\n    });\n    expect(res).to.equal(true);\n    expect(recognizer.lastX_).to.equal(112);\n    expect(recognizer.lastY_).to.equal(212);\n  });","file":"unit/test-gesture-recognizers.js","skipped":false,"dir":"test"},{"name":"should emit on start","suites":[],"updatePoint":{"line":547,"column":26,"index":16513},"line":547,"code":"  it('should emit on start', () => {\n    recognizer.startX_ = recognizer.prevX_ = 101;\n    recognizer.startY_ = recognizer.prevY_ = 201;\n    recognizer.lastX_ = 111;\n    recognizer.lastY_ = 211;\n    gesturesMock.expects('signalEmit_').withExactArgs(recognizer, env.sandbox.match(data => {\n      return data.first === true && data.last === false && data.centerClientX == 101 && data.centerClientY == 201 && data.deltaX == 10 && data.deltaY == 10 && data.velocityX == 0 && data.velocityY == 0;\n    }), null).once();\n    gesturesMock.expects('signalEnd_').never();\n    clock.tick(10);\n    recognizer.acceptStart();\n    expect(recognizer.eventing_).to.equal(true);\n  });","file":"unit/test-gesture-recognizers.js","skipped":false,"dir":"test"},{"name":"should emit on touchmove after start","suites":[],"updatePoint":{"line":560,"column":42,"index":17196},"line":560,"code":"  it('should emit on touchmove after start', () => {\n    const event = {\n      touches: [{\n        clientX: 111,\n        clientY: 211\n      }]\n    };\n    recognizer.startX_ = recognizer.prevX_ = 101;\n    recognizer.startY_ = recognizer.prevY_ = 201;\n    recognizer.eventing_ = true;\n    gesturesMock.expects('signalEmit_').withExactArgs(recognizer, env.sandbox.match(data => {\n      return data.first === false && data.last === false && data.centerClientX == 101 && data.centerClientY == 201 && data.deltaX == 10 && data.deltaY == 10 && data.velocityX > 0 && data.velocityY > 0;\n    }), event).once();\n    gesturesMock.expects('signalEnd_').never();\n    clock.tick(10);\n    const res = recognizer.onTouchMove(event);\n    expect(res).to.equal(true);\n    expect(recognizer.lastX_).to.equal(111);\n    expect(recognizer.lastY_).to.equal(211);\n  });","file":"unit/test-gesture-recognizers.js","skipped":false,"dir":"test"},{"name":"should stop on touchend","suites":[],"updatePoint":{"line":580,"column":29,"index":18028},"line":580,"code":"  it('should stop on touchend', () => {\n    const event = {};\n    recognizer.startX_ = recognizer.prevX_ = 101;\n    recognizer.startY_ = recognizer.prevY_ = 201;\n    recognizer.lastX_ = 111;\n    recognizer.lastY_ = 211;\n    recognizer.eventing_ = true;\n    gesturesMock.expects('signalEmit_').withExactArgs(recognizer, env.sandbox.match(data => {\n      return data.first === false && data.last === true && data.centerClientX == 101 && data.centerClientY == 201 && data.deltaX == 10 && data.deltaY == 10 && data.velocityX > 0 && data.velocityY > 0;\n    }), event).once();\n    gesturesMock.expects('signalEnd_').once();\n    clock.tick(10);\n    recognizer.onTouchEnd(event);\n    expect(recognizer.eventing_).to.equal(false);\n    expect(recognizer.tapCount_).to.equal(0);\n  });","file":"unit/test-gesture-recognizers.js","skipped":false,"dir":"test"},{"name":"should wait and listen on single-point touchstart","suites":[],"updatePoint":{"line":621,"column":55,"index":19458},"line":621,"code":"  it('should wait and listen on single-point touchstart', () => {\n    gesturesMock.expects('signalReady_').never();\n    const res = recognizer.onTouchStart({\n      touches: [{\n        clientX: 101,\n        clientY: 201\n      }]\n    });\n    expect(res).to.equal(true);\n    expect(recognizer.startX1_).to.equal(0);\n    expect(recognizer.startY1_).to.equal(0);\n    expect(recognizer.startX2_).to.equal(0);\n    expect(recognizer.startY2_).to.equal(0);\n  });","file":"unit/test-gesture-recognizers.js","skipped":false,"dir":"test"},{"name":"should allow two-point touchstart","suites":[],"updatePoint":{"line":635,"column":39,"index":19896},"line":635,"code":"  it('should allow two-point touchstart', () => {\n    const res = recognizer.onTouchStart({\n      touches: [{\n        clientX: 90,\n        clientY: 80\n      }, {\n        clientX: 110,\n        clientY: 120\n      }]\n    });\n    expect(res).to.equal(true);\n    expect(recognizer.startX1_).to.equal(90);\n    expect(recognizer.startY1_).to.equal(80);\n    expect(recognizer.startX2_).to.equal(110);\n    expect(recognizer.startY2_).to.equal(120);\n  });","file":"unit/test-gesture-recognizers.js","skipped":false,"dir":"test"},{"name":"should allow small drift before requesting ready","suites":[],"updatePoint":{"line":651,"column":54,"index":20357},"line":651,"code":"  it('should allow small drift before requesting ready', () => {\n    gesturesMock.expects('signalReady_').never();\n    let res = recognizer.onTouchStart({\n      touches: [{\n        clientX: 90,\n        clientY: 80\n      }, {\n        clientX: 110,\n        clientY: 120\n      }]\n    });\n    expect(res).to.equal(true);\n    expect(recognizer.startX1_).to.equal(90);\n    expect(recognizer.startY1_).to.equal(80);\n    expect(recognizer.startX2_).to.equal(110);\n    expect(recognizer.startY2_).to.equal(120);\n    res = recognizer.onTouchMove({\n      touches: [{\n        clientX: 89,\n        clientY: 79\n      }, {\n        clientX: 112,\n        clientY: 122\n      }]\n    });\n    expect(res).to.equal(true);\n    expect(recognizer.lastX1_).to.equal(89);\n    expect(recognizer.lastY1_).to.equal(79);\n    expect(recognizer.lastX2_).to.equal(112);\n    expect(recognizer.lastY2_).to.equal(122);\n  });","file":"unit/test-gesture-recognizers.js","skipped":false,"dir":"test"},{"name":"should send ready after significant move","suites":[],"updatePoint":{"line":682,"column":46,"index":21237},"line":682,"code":"  it('should send ready after significant move', () => {\n    gesturesMock.expects('signalReady_').withExactArgs(recognizer, 0).once();\n    let res = recognizer.onTouchStart({\n      touches: [{\n        clientX: 90,\n        clientY: 80\n      }, {\n        clientX: 110,\n        clientY: 120\n      }]\n    });\n    expect(res).to.equal(true);\n    res = recognizer.onTouchMove({\n      touches: [{\n        clientX: 80,\n        clientY: 70\n      }, {\n        clientX: 120,\n        clientY: 130\n      }]\n    });\n    expect(res).to.equal(true);\n  });","file":"unit/test-gesture-recognizers.js","skipped":false,"dir":"test"},{"name":"should allow small drift before cancelling and then cancel","suites":[],"updatePoint":{"line":705,"column":64,"index":21795},"line":705,"code":"  it('should allow small drift before cancelling and then cancel', () => {\n    gesturesMock.expects('signalReady_').never();\n    let res = recognizer.onTouchStart({\n      touches: [{\n        clientX: 90,\n        clientY: 80\n      }, {\n        clientX: 110,\n        clientY: 120\n      }]\n    });\n    expect(res).to.equal(true);\n\n    // Move in the same direction by 2px.\n    res = recognizer.onTouchMove({\n      touches: [{\n        clientX: 88,\n        clientY: 78\n      }, {\n        clientX: 108,\n        clientY: 118\n      }]\n    });\n    expect(res).to.equal(true);\n\n    // Move in the same direction by 10px.\n    res = recognizer.onTouchMove({\n      touches: [{\n        clientX: 80,\n        clientY: 70\n      }, {\n        clientX: 100,\n        clientY: 110\n      }]\n    });\n    expect(res).to.equal(false);\n  });","file":"unit/test-gesture-recognizers.js","skipped":false,"dir":"test"},{"name":"should emit on start","suites":[],"updatePoint":{"line":742,"column":26,"index":22572},"line":742,"code":"  it('should emit on start', () => {\n    clock.tick(1);\n    recognizer.onTouchStart({\n      touches: [{\n        clientX: 90,\n        clientY: 80\n      }, {\n        clientX: 110,\n        clientY: 120\n      }]\n    });\n    recognizer.onTouchMove({\n      touches: [{\n        clientX: 80,\n        clientY: 70\n      }, {\n        clientX: 120,\n        clientY: 130\n      }]\n    });\n    gesturesMock.expects('signalEmit_').withExactArgs(recognizer, env.sandbox.match(data => {\n      return data.first === true && data.last === false && data.centerClientX == 100 && data.centerClientY == 100 && data.dir == 1 && data.deltaX == 10 && data.deltaY == 10 && data.time == 11 && diff(data.velocityX, 0.79, 1e-2) && diff(data.velocityY, 0.79, 1e-2);\n    }), null).once();\n    gesturesMock.expects('signalEnd_').never();\n    clock.tick(10);\n    recognizer.acceptStart();\n    expect(recognizer.eventing_).to.equal(true);\n    expect(recognizer.startTime_).to.equal(1);\n    expect(recognizer.startX1_).to.equal(90);\n    expect(recognizer.startY1_).to.equal(80);\n    expect(recognizer.startX2_).to.equal(110);\n    expect(recognizer.startY2_).to.equal(120);\n    expect(recognizer.lastX1_).to.equal(80);\n    expect(recognizer.lastY1_).to.equal(70);\n    expect(recognizer.lastX2_).to.equal(120);\n    expect(recognizer.lastY2_).to.equal(130);\n    expect(recognizer.prevTime_).to.equal(11);\n    expect(recognizer.prevDeltaX_).to.equal(20);\n    expect(recognizer.prevDeltaY_).to.equal(20);\n  });","file":"unit/test-gesture-recognizers.js","skipped":false,"dir":"test"},{"name":"should emit on touchmove after start","suites":[],"updatePoint":{"line":782,"column":42,"index":24057},"line":782,"code":"  it('should emit on touchmove after start', () => {\n    clock.tick(1);\n    recognizer.onTouchStart({\n      touches: [{\n        clientX: 90,\n        clientY: 80\n      }, {\n        clientX: 110,\n        clientY: 120\n      }]\n    });\n    recognizer.onTouchMove({\n      touches: [{\n        clientX: 80,\n        clientY: 70\n      }, {\n        clientX: 120,\n        clientY: 130\n      }]\n    });\n    gesturesMock.expects('signalEmit_').withExactArgs(recognizer, env.sandbox.match(unusedData => true), null).once();\n    clock.tick(10);\n    recognizer.acceptStart();\n    const event = {\n      touches: [{\n        clientX: 70,\n        clientY: 60\n      }, {\n        clientX: 130,\n        clientY: 140\n      }]\n    };\n    gesturesMock.expects('signalEmit_').withExactArgs(recognizer, env.sandbox.match(data => {\n      return data.first === false && data.last === false && data.centerClientX == 100 && data.centerClientY == 100 && data.dir == 1 && data.deltaX == 20 && data.deltaY == 20 && data.velocityX > 0 && data.velocityY > 0;\n    }), event).once();\n    gesturesMock.expects('signalEnd_').never();\n    clock.tick(10);\n    const res = recognizer.onTouchMove(event);\n    expect(res).to.equal(true);\n  });","file":"unit/test-gesture-recognizers.js","skipped":false,"dir":"test"},{"name":"should stop on touchend; velocity doesn't change","suites":[],"updatePoint":{"line":822,"column":54,"index":25267},"line":822,"code":"  it(\"should stop on touchend; velocity doesn't change\", () => {\n    clock.tick(1);\n    recognizer.onTouchStart({\n      touches: [{\n        clientX: 90,\n        clientY: 80\n      }, {\n        clientX: 110,\n        clientY: 120\n      }]\n    });\n    recognizer.onTouchMove({\n      touches: [{\n        clientX: 80,\n        clientY: 70\n      }, {\n        clientX: 120,\n        clientY: 130\n      }]\n    });\n    gesturesMock.expects('signalEmit_').withExactArgs(recognizer, env.sandbox.match(unusedData => true), null).once();\n    clock.tick(10);\n    recognizer.acceptStart();\n    const event = {\n      touches: []\n    };\n    gesturesMock.expects('signalEmit_').withExactArgs(recognizer, env.sandbox.match(data => {\n      return data.first === false && data.last === true && data.dir == 1 && data.deltaX == 10 && data.deltaY == 10 && diff(data.velocityX, 0.79, 1e-2) && diff(data.velocityY, 0.79, 1e-2);\n    }), event).once();\n    gesturesMock.expects('signalEnd_').once();\n    clock.tick(10);\n    recognizer.onTouchEnd(event);\n    expect(recognizer.eventing_).to.equal(false);\n  });","file":"unit/test-gesture-recognizers.js","skipped":false,"dir":"test"},{"name":"should stop on touchend; velocity changes","suites":[],"updatePoint":{"line":856,"column":47,"index":26339},"line":856,"code":"  it('should stop on touchend; velocity changes', () => {\n    clock.tick(1);\n    recognizer.onTouchStart({\n      touches: [{\n        clientX: 90,\n        clientY: 80\n      }, {\n        clientX: 110,\n        clientY: 120\n      }]\n    });\n    recognizer.onTouchMove({\n      touches: [{\n        clientX: 80,\n        clientY: 70\n      }, {\n        clientX: 120,\n        clientY: 130\n      }]\n    });\n    gesturesMock.expects('signalEmit_').withExactArgs(recognizer, env.sandbox.match(unusedData => true), null).once();\n    clock.tick(10);\n    recognizer.acceptStart();\n    const event = {\n      touches: []\n    };\n    gesturesMock.expects('signalEmit_').withExactArgs(recognizer, env.sandbox.match(data => {\n      return data.first === false && data.last === true && data.dir == 1 && data.deltaX == 10 && data.deltaY == 10 && data.velocityX == 0 && data.velocityY == 0;\n    }), event).once();\n    gesturesMock.expects('signalEnd_').once();\n    clock.tick(50);\n    recognizer.onTouchEnd(event);\n    expect(recognizer.eventing_).to.equal(false);\n  });","file":"unit/test-gesture-recognizers.js","skipped":false,"dir":"test"},{"name":"should ignore additional touches if eventing","suites":[],"updatePoint":{"line":890,"column":50,"index":27388},"line":890,"code":"  it('should ignore additional touches if eventing', () => {\n    clock.tick(1);\n    let res = recognizer.onTouchStart({\n      touches: [{\n        clientX: 90,\n        clientY: 80\n      }, {\n        clientX: 110,\n        clientY: 120\n      }]\n    });\n    expect(res).to.equal(true);\n    res = recognizer.onTouchMove({\n      touches: [{\n        clientX: 80,\n        clientY: 70\n      }, {\n        clientX: 120,\n        clientY: 130\n      }]\n    });\n    expect(res).to.equal(true);\n\n    // On acceptStart, we get a null event\n    gesturesMock.expects('signalEmit_').withExactArgs(recognizer, env.sandbox.match(data => {\n      return data.centerClientX == 100 && data.centerClientY == 100 && data.deltaX == 10 && data.deltaY == 10 && data.dir == 1 && data.first == true && data.last == false && data.time == 1;\n    }), null).once();\n\n    // On onTouchMove, we didn't actually move the original touches\n    gesturesMock.expects('signalEmit_').withExactArgs(recognizer, env.sandbox.match(data => {\n      return data.centerClientX == 100 && data.centerClientY == 100 && data.deltaX == 10 && data.deltaY == 10 && data.dir == 1 && data.first == false && data.last == false;\n    }), {\n      touches: [{\n        clientX: 80,\n        clientY: 70\n      }, {\n        clientX: 120,\n        clientY: 130\n      }, {\n        clientX: 160,\n        clientY: 160\n      }]\n    }).once();\n    recognizer.acceptStart();\n    expect(recognizer.eventing_).to.equal(true);\n\n    // Trigger additional touch start; nothing should happen\n    // for the additional touch\n    res = recognizer.onTouchStart({\n      touches: [{\n        clientX: 80,\n        clientY: 70\n      }, {\n        clientX: 120,\n        clientY: 130\n      }, {\n        clientX: 160,\n        clientY: 160\n      }]\n    });\n    expect(res).to.equal(true);\n\n    // Trigger additional touch move; nothing should happen since the\n    // existing touches did not move.\n    res = recognizer.onTouchMove({\n      touches: [{\n        clientX: 80,\n        clientY: 70\n      }, {\n        clientX: 120,\n        clientY: 130\n      }, {\n        clientX: 160,\n        clientY: 160\n      }]\n    });\n    expect(res).to.equal(true);\n\n    // Trigger touch end; should not end since two touches are remaining\n    res = recognizer.onTouchEnd({\n      touches: [{\n        clientX: 80,\n        clientY: 70\n      }, {\n        clientX: 120,\n        clientY: 130\n      }]\n    });\n    clock.tick(50);\n    // Additional touch start and touch move should not trigger a signal\n    gesturesMock.expects('signalEnd_').never();\n  });","file":"unit/test-gesture-recognizers.js","skipped":false,"dir":"test"},{"name":"onPointerDown should be called","suites":[],"updatePoint":{"line":59,"column":36,"index":1797},"line":59,"code":"  it('onPointerDown should be called', () => {\n    const handler = env.sandbox.spy();\n    gestures.onPointerDown(handler);\n    sendEvent({\n      type: 'touchstart'\n    });\n    expect(handler).to.be.calledOnce;\n  });","file":"unit/test-gesture.js","skipped":false,"dir":"test"},{"name":"should proceed with series if touchstart returns true","suites":[],"updatePoint":{"line":67,"column":59,"index":2036},"line":67,"code":"  it('should proceed with series if touchstart returns true', () => {\n    recognizerMock.expects('onTouchStart').returns(true).once();\n    recognizerMock.expects('onTouchMove').returns(true).once();\n    recognizerMock.expects('onTouchEnd').once();\n    sendEvent({\n      type: 'touchstart'\n    });\n    sendEvent({\n      type: 'touchmove'\n    });\n    sendEvent({\n      type: 'touchend'\n    });\n  });","file":"unit/test-gesture.js","skipped":false,"dir":"test"},{"name":"should cancel series if touchstart returns false","suites":[],"updatePoint":{"line":81,"column":54,"index":2429},"line":81,"code":"  it('should cancel series if touchstart returns false', () => {\n    recognizerMock.expects('onTouchStart').returns(false).once();\n    recognizerMock.expects('onTouchMove').never();\n    recognizerMock.expects('onTouchEnd').never();\n    sendEvent({\n      type: 'touchstart'\n    });\n    sendEvent({\n      type: 'touchmove'\n    });\n    sendEvent({\n      type: 'touchend'\n    });\n  });","file":"unit/test-gesture.js","skipped":false,"dir":"test"},{"name":"should cancel series if touchmove returns false","suites":[],"updatePoint":{"line":95,"column":53,"index":2810},"line":95,"code":"  it('should cancel series if touchmove returns false', () => {\n    recognizerMock.expects('onTouchStart').returns(true).once();\n    recognizerMock.expects('onTouchMove').returns(false).once();\n    recognizerMock.expects('onTouchEnd').never();\n    sendEvent({\n      type: 'touchstart'\n    });\n    sendEvent({\n      type: 'touchmove'\n    });\n    sendEvent({\n      type: 'touchend'\n    });\n  });","file":"unit/test-gesture.js","skipped":false,"dir":"test"},{"name":"should enter tracking mode on touchstart true","suites":[],"updatePoint":{"line":109,"column":51,"index":3202},"line":109,"code":"  it('should enter tracking mode on touchstart true', () => {\n    recognizerMock.expects('onTouchStart').returns(true).once();\n    sendEvent({\n      type: 'touchstart'\n    });\n    expect(gestures.tracking_[0]).to.equal(true);\n  });","file":"unit/test-gesture.js","skipped":false,"dir":"test"},{"name":"should stay in tracking mode on touchmove true","suites":[],"updatePoint":{"line":116,"column":52,"index":3435},"line":116,"code":"  it('should stay in tracking mode on touchmove true', () => {\n    gestures.tracking_[0] = true;\n    recognizerMock.expects('onTouchMove').returns(true).once();\n    sendEvent({\n      type: 'touchmove'\n    });\n    expect(gestures.tracking_[0]).to.equal(true);\n  });","file":"unit/test-gesture.js","skipped":false,"dir":"test"},{"name":"should exit tracking mode on touchmove false","suites":[],"updatePoint":{"line":124,"column":50,"index":3698},"line":124,"code":"  it('should exit tracking mode on touchmove false', () => {\n    gestures.tracking_[0] = true;\n    recognizerMock.expects('onTouchMove').returns(false).once();\n    sendEvent({\n      type: 'touchmove'\n    });\n    expect(gestures.tracking_[0]).to.equal(false);\n  });","file":"unit/test-gesture.js","skipped":false,"dir":"test"},{"name":"should exit tracking mode on touchend without pending","suites":[],"updatePoint":{"line":132,"column":59,"index":3972},"line":132,"code":"  it('should exit tracking mode on touchend without pending', () => {\n    gestures.tracking_[0] = true;\n    recognizerMock.expects('onTouchEnd').once();\n    sendEvent({\n      type: 'touchend'\n    });\n    expect(gestures.tracking_[0]).to.equal(false);\n  });","file":"unit/test-gesture.js","skipped":false,"dir":"test"},{"name":"should stay in tracking mode on touchend with pending","suites":[],"updatePoint":{"line":140,"column":59,"index":4229},"line":140,"code":"  it('should stay in tracking mode on touchend with pending', () => {\n    gestures.tracking_[0] = true;\n    gestures.pending_[0] = 1;\n    recognizerMock.expects('onTouchEnd').once();\n    sendEvent({\n      type: 'touchend'\n    });\n    expect(gestures.tracking_[0]).to.equal(true);\n  });","file":"unit/test-gesture.js","skipped":false,"dir":"test"},{"name":"should reset pending state in events if expired","suites":[],"updatePoint":{"line":149,"column":53,"index":4509},"line":149,"code":"  it('should reset pending state in events if expired', () => {\n    gestures.pending_[0] = 1;\n    clock.tick(2);\n    sendEvent({\n      type: 'touchstart'\n    });\n    expect(gestures.pending_[0]).to.equal(0);\n    gestures.pending_[0] = 1;\n    gestures.tracking_[0] = true;\n    sendEvent({\n      type: 'touchmove'\n    });\n    expect(gestures.pending_[0]).to.equal(0);\n    gestures.pending_[0] = 1;\n    gestures.tracking_[0] = true;\n    sendEvent({\n      type: 'touchend'\n    });\n    expect(gestures.pending_[0]).to.equal(0);\n  });","file":"unit/test-gesture.js","skipped":false,"dir":"test"},{"name":"should cancel tracking for ready recognizers","suites":[],"updatePoint":{"line":169,"column":50,"index":5035},"line":169,"code":"  it('should cancel tracking for ready recognizers', () => {\n    gestures.ready_[0] = 1;\n    gestures.tracking_[0] = false;\n    recognizerMock.expects('onTouchStart').never();\n    sendEvent({\n      type: 'touchstart'\n    });\n    expect(gestures.tracking_[0]).to.equal(false);\n  });","file":"unit/test-gesture.js","skipped":false,"dir":"test"},{"name":"should deny ready state if already eventing","suites":[],"updatePoint":{"line":178,"column":49,"index":5316},"line":178,"code":"  it('should deny ready state if already eventing', () => {\n    gestures.eventing_ = {};\n    recognizerMock.expects('acceptCancel').once();\n    gestures.signalReady_(recognizer, 0);\n  });","file":"unit/test-gesture.js","skipped":false,"dir":"test"},{"name":"should enter ready state","suites":[],"updatePoint":{"line":183,"column":30,"index":5485},"line":183,"code":"  it('should enter ready state', () => {\n    clock.tick(1);\n    recognizerMock.expects('acceptCancel').never();\n    gestures.pending_[0] = 10;\n    gestures.signalReady_(recognizer, 0);\n    expect(gestures.ready_[0]).to.equal(1);\n    expect(gestures.pending_[0]).to.equal(0);\n    expect(gestures.passAfterEvent_).to.equal(true);\n  });","file":"unit/test-gesture.js","skipped":false,"dir":"test"},{"name":"should deny pending state if already eventing","suites":[],"updatePoint":{"line":192,"column":51,"index":5840},"line":192,"code":"  it('should deny pending state if already eventing', () => {\n    gestures.eventing_ = {};\n    gestures.pending_[0] = 0;\n    recognizerMock.expects('acceptCancel').once();\n    gestures.signalPending_(recognizer, 10);\n    expect(gestures.pending_[0]).to.equal(0);\n  });","file":"unit/test-gesture.js","skipped":false,"dir":"test"},{"name":"should enter ready state","suites":[],"updatePoint":{"line":199,"column":30,"index":6088},"line":199,"code":"  it('should enter ready state', () => {\n    clock.tick(1);\n    recognizerMock.expects('acceptCancel').never();\n    gestures.signalPending_(recognizer, 10);\n    expect(gestures.pending_[0]).to.equal(11);\n  });","file":"unit/test-gesture.js","skipped":false,"dir":"test"},{"name":"should stop eventing","suites":[],"updatePoint":{"line":205,"column":26,"index":6294},"line":205,"code":"  it('should stop eventing', () => {\n    gestures.eventing_ = recognizer;\n    gestures.signalEnd_(recognizer);\n    expect(gestures.eventing_).to.equal(null);\n  });","file":"unit/test-gesture.js","skipped":false,"dir":"test"},{"name":"should deny emit if another eventing","suites":[],"updatePoint":{"line":210,"column":42,"index":6474},"line":210,"code":"  it('should deny emit if another eventing', () => {\n    gestures.eventing_ = {};\n    allowConsoleError(() => {\n      expect(() => {\n        gestures.signalEmit_(recognizer, {}, null);\n      }).to.throw(/Recognizer is not currently allowed/);\n    });\n    expect(onGesture).to.have.not.been.called;\n  });","file":"unit/test-gesture.js","skipped":false,"dir":"test"},{"name":"should allow emit","suites":[],"updatePoint":{"line":219,"column":23,"index":6759},"line":219,"code":"  it('should allow emit', () => {\n    const data = {};\n    const event = {};\n    clock.tick(1);\n    gestures.eventing_ = recognizer;\n    gestures.signalEmit_(recognizer, data, event);\n    expect(onGesture).to.be.calledOnce;\n    const gesture = onGesture.getCall(0).args[0];\n    expect(gesture.type).to.equal('test');\n    expect(gesture.data).to.equal(data);\n    expect(gesture.event).to.equal(event);\n    expect(gesture.time).to.equal(1);\n  });","file":"unit/test-gesture.js","skipped":false,"dir":"test"},{"name":"should ignore pass - nothing to do","suites":[],"updatePoint":{"line":232,"column":40,"index":7221},"line":232,"code":"  it('should ignore pass - nothing to do', () => {\n    recognizerMock.expects('acceptStart').never();\n    gestures.doPass_();\n    expect(gestures.pass_.isPending()).to.equal(false);\n    expect(gestures.eventing_).to.equal(null);\n  });","file":"unit/test-gesture.js","skipped":false,"dir":"test"},{"name":"should allow to start with no competition","suites":[],"updatePoint":{"line":238,"column":47,"index":7463},"line":238,"code":"  it('should allow to start with no competition', () => {\n    gestures.ready_[0] = 1;\n    recognizerMock.expects('acceptStart').once();\n    gestures.doPass_();\n    expect(gestures.pass_.isPending()).to.equal(false);\n    expect(gestures.eventing_).to.equal(recognizer);\n  });","file":"unit/test-gesture.js","skipped":false,"dir":"test"},{"name":"should wait while others are pending","suites":[],"updatePoint":{"line":245,"column":42,"index":7733},"line":245,"code":"  it('should wait while others are pending', () => {\n    gestures.ready_[0] = 1;\n    gestures.recognizers_[1] = {};\n    gestures.tracking_[1] = true;\n    gestures.pending_[1] = 9;\n    clock.tick(1);\n    recognizerMock.expects('acceptStart').never();\n    gestures.doPass_();\n    expect(gestures.pass_.isPending()).to.equal(true);\n    expect(gestures.pass_.nextTime_).to.equal(9);\n    expect(gestures.eventing_).to.equal(null);\n  });","file":"unit/test-gesture.js","skipped":false,"dir":"test"},{"name":"should allow youngest to start","suites":[],"updatePoint":{"line":257,"column":36,"index":8159},"line":257,"code":"  it('should allow youngest to start', () => {\n    gestures.onGesture(Test2Recognizer, () => {});\n    const recognizer2Mock = env.sandbox.mock(gestures.recognizers_[1]);\n    gestures.ready_[0] = 10;\n    gestures.ready_[1] = 9;\n    recognizerMock.expects('acceptStart').once();\n    recognizer2Mock.expects('acceptStart').never();\n    recognizer2Mock.expects('acceptCancel').once();\n    gestures.doPass_();\n    expect(gestures.pass_.isPending()).to.equal(false);\n    expect(gestures.eventing_).to.equal(recognizer);\n  });","file":"unit/test-gesture.js","skipped":false,"dir":"test"},{"name":"should allow event to propagate when nothing happening","suites":[],"updatePoint":{"line":269,"column":60,"index":8703},"line":269,"code":"  it('should allow event to propagate when nothing happening', () => {\n    const event = {\n      type: 'touchend',\n      preventDefault: env.sandbox.spy(),\n      stopPropagation: env.sandbox.spy()\n    };\n    eventListeners[event.type](event);\n    expect(event.preventDefault).to.have.not.been.called;\n    expect(event.stopPropagation).to.have.not.been.called;\n  });","file":"unit/test-gesture.js","skipped":false,"dir":"test"},{"name":"should cancel event when eventing","suites":[],"updatePoint":{"line":279,"column":39,"index":9048},"line":279,"code":"  it('should cancel event when eventing', () => {\n    gestures.eventing_ = recognizer;\n    const event = {\n      type: 'touchend',\n      preventDefault: env.sandbox.spy(),\n      stopPropagation: env.sandbox.spy()\n    };\n    eventListeners[event.type](event);\n    expect(event.preventDefault).to.be.calledOnce;\n    expect(event.stopPropagation).to.be.calledOnce;\n  });","file":"unit/test-gesture.js","skipped":false,"dir":"test"},{"name":"should cancel event after eventing stopped","suites":[],"updatePoint":{"line":290,"column":48,"index":9425},"line":290,"code":"  it('should cancel event after eventing stopped', () => {\n    gestures.eventing_ = recognizer;\n    gestures.signalEnd_(recognizer);\n    expect(gestures.eventing_).to.equal(null);\n    expect(gestures.wasEventing_).to.equal(true);\n    const event = {\n      type: 'touchend',\n      preventDefault: env.sandbox.spy(),\n      stopPropagation: env.sandbox.spy()\n    };\n    eventListeners[event.type](event);\n    expect(event.preventDefault).to.be.calledOnce;\n    expect(event.stopPropagation).to.be.calledOnce;\n    expect(gestures.wasEventing_).to.equal(false);\n  });","file":"unit/test-gesture.js","skipped":false,"dir":"test"},{"name":"should cancel event when anyone is ready","suites":[],"updatePoint":{"line":305,"column":46,"index":9985},"line":305,"code":"  it('should cancel event when anyone is ready', () => {\n    gestures.ready_[0] = 1;\n    const event = {\n      type: 'touchend',\n      preventDefault: env.sandbox.spy(),\n      stopPropagation: env.sandbox.spy()\n    };\n    eventListeners[event.type](event);\n    expect(event.preventDefault).to.be.calledOnce;\n    expect(event.stopPropagation).to.be.calledOnce;\n  });","file":"unit/test-gesture.js","skipped":false,"dir":"test"},{"name":"should cancel event when anyone is pending","suites":[],"updatePoint":{"line":316,"column":48,"index":10353},"line":316,"code":"  it('should cancel event when anyone is pending', () => {\n    gestures.pending_[0] = 1;\n    let event = {\n      type: 'touchend',\n      preventDefault: env.sandbox.spy(),\n      stopPropagation: env.sandbox.spy()\n    };\n    eventListeners[event.type](event);\n    expect(event.preventDefault).to.be.calledOnce;\n    expect(event.stopPropagation).to.be.calledOnce;\n    clock.tick(10);\n    event = {\n      type: 'touchend',\n      preventDefault: env.sandbox.spy(),\n      stopPropagation: env.sandbox.spy()\n    };\n    eventListeners[event.type](event);\n    expect(event.preventDefault).to.have.not.been.called;\n    expect(event.stopPropagation).to.have.not.been.called;\n  });","file":"unit/test-gesture.js","skipped":false,"dir":"test"},{"name":"should gesture recognizer on removeGesture","suites":[],"updatePoint":{"line":336,"column":48,"index":11024},"line":336,"code":"  it('should gesture recognizer on removeGesture', () => {\n    expect(gestures.recognizers_.length).to.equal(1);\n    expect(gestures.removeGesture(TestRecognizer)).to.equal(true);\n    expect(gestures.removeGesture(Test2Recognizer)).to.equal(false);\n    expect(gestures.recognizers_.length).to.equal(0);\n    expect(gestures.ready_.length).to.equal(0);\n    expect(gestures.tracking_.length).to.equal(0);\n    expect(gestures.pending_.length).to.equal(0);\n  });","file":"unit/test-gesture.js","skipped":false,"dir":"test"},{"name":"should remove listeners and shared cache instance on cleanup","suites":[],"updatePoint":{"line":345,"column":66,"index":11500},"line":345,"code":"  it('should remove listeners and shared cache instance on cleanup', () => {\n    const eventNames = ['touchstart', 'touchend', 'touchmove', 'touchcancel'];\n    const prop = '__AMP_Gestures';\n    const removeSpy = env.sandbox.spy(element, 'removeEventListener');\n    expect(element[prop]).to.exist;\n    gestures.cleanup();\n    eventNames.forEach(eventName => {\n      expect(removeSpy.withArgs(eventName)).to.be.calledOnce;\n    });\n    expect(element[prop]).to.not.exist;\n  });","file":"unit/test-gesture.js","skipped":false,"dir":"test"},{"name":"should cancel event when eventing","suites":["Gestures - with shouldNotPreventdefault"],"updatePoint":{"line":385,"column":41,"index":12833},"line":385,"code":"    it('should cancel event when eventing', () => {\n      gestures.eventing_ = recognizer;\n      const event = {\n        type: 'touchend',\n        preventDefault: env.sandbox.spy(),\n        stopPropagation: env.sandbox.spy()\n      };\n      eventListeners[event.type](event);\n      expect(event.preventDefault).to.have.not.been.called;\n      expect(event.stopPropagation).to.be.calledOnce;\n    });","file":"unit/test-gesture.js","skipped":false,"dir":"test"},{"name":"should cancel event after eventing stopped","suites":["Gestures - with shouldNotPreventdefault"],"updatePoint":{"line":396,"column":50,"index":13239},"line":396,"code":"    it('should cancel event after eventing stopped', () => {\n      gestures.eventing_ = recognizer;\n      gestures.signalEnd_(recognizer);\n      expect(gestures.eventing_).to.equal(null);\n      expect(gestures.wasEventing_).to.equal(true);\n      const event = {\n        type: 'touchend',\n        preventDefault: env.sandbox.spy(),\n        stopPropagation: env.sandbox.spy()\n      };\n      eventListeners[event.type](event);\n      expect(event.preventDefault).to.have.not.been.called;\n      expect(event.stopPropagation).to.be.calledOnce;\n      expect(gestures.wasEventing_).to.equal(false);\n    });","file":"unit/test-gesture.js","skipped":false,"dir":"test"},{"name":"should cancel event when anyone is ready","suites":["Gestures - with shouldNotPreventdefault"],"updatePoint":{"line":411,"column":48,"index":13836},"line":411,"code":"    it('should cancel event when anyone is ready', () => {\n      gestures.ready_[0] = 1;\n      const event = {\n        type: 'touchend',\n        preventDefault: env.sandbox.spy(),\n        stopPropagation: env.sandbox.spy()\n      };\n      eventListeners[event.type](event);\n      expect(event.preventDefault).to.have.not.been.called;\n      expect(event.stopPropagation).to.be.calledOnce;\n    });","file":"unit/test-gesture.js","skipped":false,"dir":"test"},{"name":"should cancel event when anyone is pending","suites":["Gestures - with shouldNotPreventdefault"],"updatePoint":{"line":422,"column":50,"index":14233},"line":422,"code":"    it('should cancel event when anyone is pending', () => {\n      gestures.pending_[0] = 1;\n      let event = {\n        type: 'touchend',\n        preventDefault: env.sandbox.spy(),\n        stopPropagation: env.sandbox.spy()\n      };\n      eventListeners[event.type](event);\n      expect(event.preventDefault).to.have.not.been.called;\n      expect(event.stopPropagation).to.be.calledOnce;\n      clock.tick(10);\n      event = {\n        type: 'touchend',\n        preventDefault: env.sandbox.spy(),\n        stopPropagation: env.sandbox.spy()\n      };\n      eventListeners[event.type](event);\n      expect(event.preventDefault).to.have.not.been.called;\n      expect(event.stopPropagation).to.have.not.been.called;\n    });","file":"unit/test-gesture.js","skipped":false,"dir":"test"},{"name":"should stop event from propagating","suites":["Gestures - with shouldStopPropagation"],"updatePoint":{"line":470,"column":42,"index":15780},"line":470,"code":"    it('should stop event from propagating', () => {\n      const event = {\n        type: 'touchend',\n        stopPropagation: env.sandbox.spy()\n      };\n      eventListeners[event.type](event);\n      expect(event.stopPropagation).to.have.be.calledOnce;\n    });","file":"unit/test-gesture.js","skipped":false,"dir":"test"},{"name":"initializes mutation observer on first listen","suites":[],"updatePoint":{"line":19,"column":51,"index":639},"line":19,"code":"  it('initializes mutation observer on first listen', () => {\n    const mo = setupSingletonMutationObserver();\n    const observe = env.sandbox.spy(mo, 'observe');\n    hiddenObserver.add(() => {});\n    expect(MutationObserver).to.have.been.calledOnce;\n    expect(observe).to.have.been.calledOnceWith(env.win.document);\n  });","file":"unit/test-hidden-observer.js","skipped":false,"dir":"test"},{"name":"keeps mutation observer on second listen","suites":[],"updatePoint":{"line":26,"column":46,"index":958},"line":26,"code":"  it('keeps mutation observer on second listen', () => {\n    const mo = setupSingletonMutationObserver();\n    const observe = env.sandbox.spy(mo, 'observe');\n    hiddenObserver.add(() => {});\n    hiddenObserver.add(() => {});\n    expect(MutationObserver).to.have.been.calledOnce;\n    expect(observe).to.have.been.calledOnce;\n  });","file":"unit/test-hidden-observer.js","skipped":false,"dir":"test"},{"name":"frees mutation observer after last unlisten","suites":[],"updatePoint":{"line":34,"column":49,"index":1292},"line":34,"code":"  it('frees mutation observer after last unlisten', () => {\n    const mo = setupSingletonMutationObserver();\n    const disconnect = env.sandbox.spy(mo, 'disconnect');\n    const unlisten = hiddenObserver.add(() => {});\n    unlisten();\n    expect(disconnect).to.have.been.calledOnce;\n  });","file":"unit/test-hidden-observer.js","skipped":false,"dir":"test"},{"name":"keeps mutation observer after second-to-last unlisten","suites":[],"updatePoint":{"line":41,"column":59,"index":1590},"line":41,"code":"  it('keeps mutation observer after second-to-last unlisten', () => {\n    const mo = setupSingletonMutationObserver();\n    const disconnect = env.sandbox.spy(mo, 'disconnect');\n    const unlisten = hiddenObserver.add(() => {});\n    const unlisten2 = hiddenObserver.add(() => {});\n    unlisten();\n    expect(disconnect).not.to.have.been.called;\n    unlisten2();\n    expect(disconnect).to.have.been.calledOnce;\n  });","file":"unit/test-hidden-observer.js","skipped":false,"dir":"test"},{"name":"passes MutationRecords to handler","suites":[],"updatePoint":{"line":51,"column":39,"index":1985},"line":51,"code":"  it('passes MutationRecords to handler', function* () {\n    const stub = env.sandbox.stub();\n    const mo = setupSingletonMutationObserver(stub);\n    const mutation = {};\n    const mutation2 = {};\n    mo.__mutate(mutation);\n    yield mo.__mutate(mutation2);\n    expect(stub).to.have.been.calledOnceWith([mutation, mutation2]);\n  });","file":"unit/test-hidden-observer.js","skipped":false,"dir":"test"},{"name":"should assert src in iframe","suites":[],"updatePoint":{"line":20,"column":33,"index":837},"line":20,"code":"  it('should assert src in iframe', () => {\n    const iframe = container.doc.createElement('iframe');\n    iframe.srcdoc = '<html>';\n    allowConsoleError(() => {\n      expect(() => {\n        IframeHelper.listenFor(iframe, 'test', () => {});\n      }).to.throw('only iframes with src supported');\n    });\n  });","file":"unit/test-iframe-helper.js","skipped":false,"dir":"test"},{"name":"should assert iframe is detached","suites":[],"updatePoint":{"line":29,"column":38,"index":1151},"line":29,"code":"  it('should assert iframe is detached', () => {\n    const iframe = container.doc.createElement('iframe');\n    iframe.src = iframeSrc;\n    insert(iframe);\n    allowConsoleError(() => {\n      expect(() => {\n        IframeHelper.listenFor(iframe, 'test', () => {});\n      }).to.throw('cannot register events on an attached iframe');\n    });\n  });","file":"unit/test-iframe-helper.js","skipped":false,"dir":"test"},{"name":"should listen to iframe messages from non-3P frame","suites":[],"updatePoint":{"line":39,"column":56,"index":1514},"line":39,"code":"  it('should listen to iframe messages from non-3P frame', () => {\n    let unlisten;\n    let calls = 0;\n    return new Promise(resolve => {\n      unlisten = IframeHelper.listenFor(testIframe, 'send-intersections', () => {\n        calls++;\n        resolve();\n      });\n      insert(testIframe);\n    }).then(() => {\n      const total = calls;\n      unlisten();\n      return new Promise(resolve => {\n        setTimeout(resolve, 50);\n      }).then(() => {\n        expect(calls).to.equal(total);\n      });\n    });\n  });","file":"unit/test-iframe-helper.js","skipped":false,"dir":"test"},{"name":"should listen to iframe messages from 3P frame","suites":[],"updatePoint":{"line":58,"column":52,"index":2025},"line":58,"code":"  it('should listen to iframe messages from 3P frame', () => {\n    let unlisten;\n    let calls = 0;\n    return new Promise(resolve => {\n      const sentinel = generateSentinel(testIframe.ownerDocument.defaultView);\n      testIframe.src = iframeSrc + '#amp-3p-sentinel=' + sentinel;\n      testIframe.setAttribute('data-amp-3p-sentinel', sentinel);\n      unlisten = IframeHelper.listenFor(testIframe, 'send-intersections', () => {\n        calls++;\n        resolve();\n      }, true /* opt_is3P */);\n\n      insert(testIframe);\n    }).then(() => {\n      const total = calls;\n      unlisten();\n      return new Promise(resolve => {\n        setTimeout(resolve, 50);\n      }).then(() => {\n        expect(calls).to.equal(total);\n      });\n    });\n  });","file":"unit/test-iframe-helper.js","skipped":false,"dir":"test"},{"name":"should listen to iframe messages from nested 3P frame","suites":[],"updatePoint":{"line":81,"column":59,"index":2776},"line":81,"code":"  it('should listen to iframe messages from nested 3P frame', () => {\n    let unlisten;\n    let calls = 0;\n    return new Promise(resolve => {\n      const sentinel = generateSentinel(testIframe.ownerDocument.defaultView);\n      // Note that we're using a different document here which will load the\n      // usual iframe-intersection.html within a nested iframe.\n      testIframe.src = nestedIframeSrc + '#amp-3p-sentinel=' + sentinel;\n      testIframe.setAttribute('data-amp-3p-sentinel', sentinel);\n      unlisten = IframeHelper.listenFor(testIframe, 'send-intersections', () => {\n        calls++;\n        resolve();\n      }, true /* opt_is3P */, true /* opt_includingNestedWindows */);\n\n      insert(testIframe);\n    }).then(() => {\n      const total = calls;\n      unlisten();\n      return new Promise(resolve => {\n        setTimeout(resolve, 50);\n      }).then(() => {\n        expect(calls).to.equal(total);\n      });\n    });\n  });","file":"unit/test-iframe-helper.js","skipped":false,"dir":"test"},{"name":"should un-listen and resolve promise after first hit","suites":[],"line":108,"code":"  it.skip('should un-listen and resolve promise after first hit', () => {","file":"unit/test-iframe-helper.js","skipped":true,"dir":"test"},{"name":"should un-listen on next message when iframe is unattached","suites":[],"line":127,"code":"  it.skip('should un-listen on next message when iframe is unattached', () => {","file":"unit/test-iframe-helper.js","skipped":true,"dir":"test"},{"name":"should set sentinel on postMessage data","suites":[],"updatePoint":{"line":155,"column":45,"index":5241},"line":155,"code":"  it('should set sentinel on postMessage data', () => {\n    insert(testIframe);\n    const postMessageSpy = env.sandbox /*OK*/.spy(testIframe.contentWindow, 'postMessage');\n    IframeHelper.postMessage(testIframe, 'testMessage', {}, 'http://google.com');\n    expect(postMessageSpy.getCall(0).args[0].sentinel).to.equal('amp');\n    expect(postMessageSpy.getCall(0).args[0].type).to.equal('testMessage');\n    // Very important to do this outside of the sandbox, or else hell\n    // breaks loose.\n    postMessageSpy /*OK*/.restore();\n  });","file":"unit/test-iframe-helper.js","skipped":false,"dir":"test"},{"name":"should get message from fragment and post back to parent window","suites":[],"updatePoint":{"line":23,"column":69,"index":640},"line":23,"code":"  it('should get message from fragment and post back to parent window', () => {\n    iframe.postMessageToParent(data1);\n    return expectPostMessage(iframe.contentWindow, window, data1).then(receivedMessage => {\n      expect(receivedMessage).to.jsonEqual(data1);\n    }).then(() => {\n      iframe.postMessageToParent(data2);\n      return expectPostMessage(iframe.contentWindow, window, data2);\n    }).then(receivedMessage => {\n      expect(receivedMessage).to.jsonEqual(data2);\n    });\n  });","file":"unit/test-iframe-stub.js","skipped":false,"dir":"test"},{"name":"should echo back message to parent window","suites":[],"updatePoint":{"line":34,"column":47,"index":1108},"line":34,"code":"  it('should echo back message to parent window', () => {\n    iframe.contentWindow.postMessage(data1, '*');\n    return iframe.expectMessageFromParent('test').then(() => {\n      iframe.contentWindow.postMessage(data2, '*');\n      return iframe.expectMessageFromParent((data, msg) => {\n        expect(data).to.jsonEqual(data2);\n        expect(msg).to.jsonEqual(data2);\n        return true;\n      });\n    }).then(() => {\n      iframe.contentWindow.postMessage('test-' + JSON.stringify(data2), '*');\n      return iframe.expectMessageFromParent((data, msg) => {\n        expect(data).to.equal(null);\n        expect(msg).to.equal('test-' + JSON.stringify(data2));\n        return true;\n      });\n    }).then(() => {\n      iframe.contentWindow.postMessage('amp-' + JSON.stringify(data2), '*');\n      return iframe.expectMessageFromParent((data, msg) => {\n        expect(data).to.jsonEqual(data2);\n        expect(msg).to.equal('amp-' + JSON.stringify(data2));\n        return true;\n      });\n    }).then(() => {\n      iframe.contentWindow.postMessage(data2, '*');\n      return iframe.expectMessageFromParent(() => {\n        throw new Error('test');\n      }).then(() => {\n        throw new Error('should not get here');\n      }, () => {\n        expect(true).to.equal(true);\n      });\n    });\n  });","file":"unit/test-iframe-stub.js","skipped":false,"dir":"test"},{"name":"should do nothing if the experiment is off","suites":[],"updatePoint":{"line":48,"column":48,"index":1754},"line":48,"code":"  it('should do nothing if the experiment is off', () => {\n    viewer.getParam.throws(new Error('Should not be called'));\n    maybeTrackImpression(window);\n    return expect(getTrackImpressionPromise()).to.eventually.be.fulfilled;\n  });","file":"unit/test-impression.js","skipped":false,"dir":"test"},{"name":"should resolve if no click no replaceUrl","suites":[],"updatePoint":{"line":53,"column":46,"index":1989},"line":53,"code":"  it('should resolve if no click no replaceUrl', () => {\n    toggleExperiment(window, 'alp', true);\n    viewer.getParam.withArgs('click').returns('');\n    viewer.hasCapability.withArgs('replaceUrl').returns(false);\n    maybeTrackImpression(window);\n    return expect(getTrackImpressionPromise()).to.eventually.be.fulfilled;\n  });","file":"unit/test-impression.js","skipped":false,"dir":"test"},{"name":"should resolve trackImpressionPromise after timeout","suites":[],"updatePoint":{"line":60,"column":57,"index":2330},"line":60,"code":"  it('should resolve trackImpressionPromise after timeout', () => {\n    toggleExperiment(window, 'alp', true);\n    viewer.hasCapability.withArgs('replaceUrl').returns(true);\n    viewer.getParam.withArgs('replaceUrl').returns('https://www.example.com');\n    viewer.getParam.withArgs('click').returns('https://www.example.com');\n    env.sandbox.stub(viewer, 'sendMessageAwaitResponse').callsFake(() => new Promise(() => {}));\n    const clock = fakeTimers.withGlobal(window).install();\n    maybeTrackImpression(window);\n    clock.tick(8001);\n    const promise = getTrackImpressionPromise();\n    clock.uninstall();\n    return promise;\n  });","file":"unit/test-impression.js","skipped":false,"dir":"test"},{"name":"should resolve after clickUrl and replaceUrl","suites":[],"updatePoint":{"line":73,"column":50,"index":2960},"line":73,"code":"  it('should resolve after clickUrl and replaceUrl', () => {\n    toggleExperiment(window, 'alp', true);\n    viewer.hasCapability.withArgs('replaceUrl').returns(true);\n    viewer.getParam.withArgs('replaceUrl').returns('https://www.example.com');\n    viewer.getParam.withArgs('click').returns('https://www.example.com');\n    env.sandbox.stub(viewer, 'sendMessageAwaitResponse').callsFake(message => {\n      if (message == 'getReplaceUrl') {\n        return Promise.resolve({\n          'replaceUrl': undefined\n        });\n      }\n    });\n    xhr.fetchJson.returns(Promise.resolve({\n      json() {\n        return Promise.resolve({\n          'location': ''\n        });\n      }\n    }));\n    maybeTrackImpression(window);\n    return expect(getTrackImpressionPromise()).to.eventually.be.fulfilled;\n  });","file":"unit/test-impression.js","skipped":false,"dir":"test"},{"name":"should do nothing if there is no click arg","suites":["clickUrl"],"updatePoint":{"line":96,"column":50,"index":3787},"line":96,"code":"    it('should do nothing if there is no click arg', () => {\n      toggleExperiment(window, 'alp', true);\n      viewer.getParam.withArgs('click').returns('');\n      maybeTrackImpression(window);\n      expect(xhr.fetchJson).to.have.not.been.called;\n      return expect(getTrackImpressionPromise()).to.eventually.be.fulfilled;\n    });","file":"unit/test-impression.js","skipped":false,"dir":"test"},{"name":"should do nothing if there is the click arg is http","suites":["clickUrl"],"updatePoint":{"line":103,"column":59,"index":4129},"line":103,"code":"    it('should do nothing if there is the click arg is http', () => {\n      toggleExperiment(window, 'alp', true);\n      viewer.getParam.withArgs('click').returns('http://www.example.com');\n      maybeTrackImpression(window);\n      expect(xhr.fetchJson).to.have.not.been.called;\n      return expect(getTrackImpressionPromise()).to.eventually.be.fulfilled;\n    });","file":"unit/test-impression.js","skipped":false,"dir":"test"},{"name":"should invoke click URL with experiment on","suites":["clickUrl"],"updatePoint":{"line":110,"column":50,"index":4484},"line":110,"code":"    it('should invoke click URL with experiment on', function* () {\n      env.sandbox.spy(viewer, 'sendMessageAwaitResponse');\n      toggleExperiment(window, 'alp', true);\n      isTrustedViewer = false;\n      viewer.getParam.withArgs('click').returns('https://www.example.com');\n      maybeTrackImpression(window);\n      expect(xhr.fetchJson).to.have.not.been.called;\n      yield macroTask();\n      expect(xhr.fetchJson).to.be.calledOnce;\n      const url = xhr.fetchJson.lastCall.args[0];\n      const params = xhr.fetchJson.lastCall.args[1];\n      expect(url).to.equal('https://www.example.com');\n      expect(params).to.jsonEqual({\n        credentials: 'include'\n      });\n    });","file":"unit/test-impression.js","skipped":false,"dir":"test"},{"name":"should invoke click URL in trusted viewer","suites":["clickUrl"],"updatePoint":{"line":126,"column":49,"index":5165},"line":126,"code":"    it('should invoke click URL in trusted viewer', function* () {\n      toggleExperiment(window, 'alp', false);\n      isTrustedViewer = true;\n      viewer.getParam.withArgs('click').returns('https://www.example.com');\n      maybeTrackImpression(window);\n      expect(xhr.fetchJson).to.have.not.been.called;\n      yield macroTask();\n      expect(xhr.fetchJson).to.be.calledOnce;\n      const url = xhr.fetchJson.lastCall.args[0];\n      const params = xhr.fetchJson.lastCall.args[1];\n      expect(url).to.equal('https://www.example.com');\n      expect(params).to.jsonEqual({\n        credentials: 'include'\n      });\n    });","file":"unit/test-impression.js","skipped":false,"dir":"test"},{"name":"should invoke click URL for trusted referrer","suites":["clickUrl"],"updatePoint":{"line":141,"column":52,"index":5790},"line":141,"code":"    it('should invoke click URL for trusted referrer', function* () {\n      toggleExperiment(window, 'alp', false);\n      isTrustedViewer = false;\n      referrer = 'https://t.co/docref';\n      viewer.getParam.withArgs('click').returns('https://www.example.com');\n      maybeTrackImpression(window);\n      expect(xhr.fetchJson).to.have.not.been.called;\n      yield macroTask();\n      expect(xhr.fetchJson).to.be.calledOnce;\n      const url = xhr.fetchJson.lastCall.args[0];\n      const params = xhr.fetchJson.lastCall.args[1];\n      expect(url).to.equal('https://www.example.com');\n      expect(params).to.jsonEqual({\n        credentials: 'include'\n      });\n    });","file":"unit/test-impression.js","skipped":false,"dir":"test"},{"name":"should do nothing if response is not received","suites":["clickUrl"],"updatePoint":{"line":157,"column":53,"index":6457},"line":157,"code":"    it('should do nothing if response is not received', () => {\n      toggleExperiment(window, 'alp', true);\n      viewer.getParam.withArgs('click').returns('https://www.example.com');\n      xhr.fetchJson.returns(new Promise(() => {\n        // never resolves\n      }));\n      const {\n        href\n      } = window.location;\n      const clock = fakeTimers.withGlobal(window).install();\n      maybeTrackImpression(window);\n      clock.tick(8001);\n      const promise = getTrackImpressionPromise();\n      clock.uninstall();\n      return promise.then(() => {\n        expect(window.location.href).to.equal(href);\n      });\n    });","file":"unit/test-impression.js","skipped":false,"dir":"test"},{"name":"should do nothing if get empty response","suites":["clickUrl"],"updatePoint":{"line":175,"column":47,"index":7077},"line":175,"code":"    it('should do nothing if get empty response', function* () {\n      toggleExperiment(window, 'alp', true);\n      viewer.getParam.withArgs('click').returns('https://www.example.com');\n      const prevHref = window.location.href;\n      maybeTrackImpression(window);\n      yield macroTask();\n      expect(window.location.href).to.equal(prevHref);\n    });","file":"unit/test-impression.js","skipped":false,"dir":"test"},{"name":"should resolve if get no content response","suites":["clickUrl"],"updatePoint":{"line":183,"column":49,"index":7434},"line":183,"code":"    it('should resolve if get no content response', function* () {\n      toggleExperiment(window, 'alp', true);\n      viewer.getParam.withArgs('click').returns('https://www.example.com');\n      xhr.fetchJson.returns(Promise.resolve({\n        // No-content response\n        status: 204\n      }));\n      maybeTrackImpression(window);\n      return getTrackImpressionPromise().then(() => {\n        expect(warnStub).to.not.be.called;\n      });\n    });","file":"unit/test-impression.js","skipped":false,"dir":"test"},{"name":"should still resolve on request error","suites":["clickUrl"],"updatePoint":{"line":195,"column":45,"index":7877},"line":195,"code":"    it('should still resolve on request error', function* () {\n      toggleExperiment(window, 'alp', true);\n      viewer.getParam.withArgs('click').returns('https://www.example.com');\n      xhr.fetchJson.returns(Promise.resolve({\n        status: 404\n      }));\n      maybeTrackImpression(window);\n      return getTrackImpressionPromise().then(() => {\n        expect(warnStub).to.be.calledOnce;\n      });\n    });","file":"unit/test-impression.js","skipped":false,"dir":"test"},{"name":"should resolve trackImpressionPromise if resolve click","suites":["clickUrl"],"updatePoint":{"line":206,"column":62,"index":8306},"line":206,"code":"    it('should resolve trackImpressionPromise if resolve click', () => {\n      toggleExperiment(window, 'alp', true);\n      viewer.getParam.withArgs('click').returns('https://www.example.com');\n      viewer.hasCapability.withArgs('replaceUrl').returns(false);\n      xhr.fetchJson.returns(Promise.resolve({\n        json() {\n          return Promise.resolve({\n            'location': ''\n          });\n        }\n      }));\n      maybeTrackImpression(window);\n      return expect(getTrackImpressionPromise()).to.eventually.be.fulfilled;\n    });","file":"unit/test-impression.js","skipped":false,"dir":"test"},{"name":"should replace location href only with query params","suites":["clickUrl"],"updatePoint":{"line":220,"column":59,"index":8844},"line":220,"code":"    it('should replace location href only with query params', () => {\n      toggleExperiment(window, 'alp', true);\n      viewer.getParam.withArgs('click').returns('https://www.example.com');\n      xhr.fetchJson.returns(Promise.resolve({\n        json() {\n          return Promise.resolve({\n            'location': 'test_location?gclid=123456&foo=bar&example=123'\n          });\n        }\n      }));\n      const location = {\n        hash: '',\n        search: '?bar=foo&test=4321',\n        href: 'https://example.org?bar=foo&test=4321'\n      };\n      env.sandbox.stub(WindowInterface, 'getLocation').returns(location);\n      const replaceStateStub = env.sandbox.stub(window.history, 'replaceState');\n      maybeTrackImpression(window);\n      return getTrackImpressionPromise().then(() => {\n        expect(replaceStateStub).to.be.calledOnce.calledWith(null, '', 'https://example.org?bar=foo&test=4321&gclid=123456&foo=bar&example=123');\n      });\n    });","file":"unit/test-impression.js","skipped":false,"dir":"test"},{"name":"do nothing if no init replaceUrl param","suites":["replaceUrl"],"updatePoint":{"line":244,"column":46,"index":9820},"line":244,"code":"    it('do nothing if no init replaceUrl param', function* () {\n      toggleExperiment(window, 'alp', true);\n      env.sandbox.spy(viewer, 'replaceUrl');\n      viewer.hasCapability.withArgs('replaceUrl').returns(true);\n      maybeTrackImpression(window);\n      yield macroTask();\n      expect(viewer.replaceUrl).to.have.not.been.called;\n      return expect(getTrackImpressionPromise()).to.eventually.be.fulfilled;\n    });","file":"unit/test-impression.js","skipped":false,"dir":"test"},{"name":"should use init replaceUrl parm if viewer has no capability","suites":["replaceUrl"],"updatePoint":{"line":253,"column":67,"index":10263},"line":253,"code":"    it('should use init replaceUrl parm if viewer has no capability', () => {\n      toggleExperiment(window, 'alp', true);\n      viewer.hasCapability.withArgs('replaceUrl').returns(false);\n      viewer.getParam.withArgs('replaceUrl').returns('http://localhost:9876/v/s/f.com/?gclid=1234&amp_js_v=1&init');\n      const location = {\n        hash: '',\n        search: '?',\n        href: 'http://localhost:9876'\n      };\n      env.sandbox.stub(WindowInterface, 'getLocation').returns(location);\n      const replaceUrlStub = env.sandbox.stub(viewer, 'replaceUrl');\n      maybeTrackImpression(window);\n      return getTrackImpressionPromise().then(() => {\n        expect(replaceUrlStub).to.be.calledOnce.calledWith('http://localhost:9876/v/s/f.com/?gclid=1234&amp_js_v=1&init');\n      });\n    });","file":"unit/test-impression.js","skipped":false,"dir":"test"},{"name":"should request replaceUrl if viewer signals","suites":["replaceUrl"],"updatePoint":{"line":269,"column":51,"index":11038},"line":269,"code":"    it('should request replaceUrl if viewer signals', function* () {\n      toggleExperiment(window, 'alp', true);\n      env.sandbox.spy(viewer, 'sendMessageAwaitResponse');\n      viewer.getParam.withArgs('replaceUrl').returns('http://www.example.com');\n      viewer.hasCapability.withArgs('replaceUrl').returns(true);\n      maybeTrackImpression(window);\n      yield macroTask();\n      expect(viewer.sendMessageAwaitResponse).has.been.calledOnce;\n    });","file":"unit/test-impression.js","skipped":false,"dir":"test"},{"name":"should resolve if receive viewer response","suites":["replaceUrl"],"updatePoint":{"line":278,"column":49,"index":11490},"line":278,"code":"    it('should resolve if receive viewer response', () => {\n      toggleExperiment(window, 'alp', true);\n      viewer.getParam.withArgs('click').returns(undefined);\n      viewer.getParam.withArgs('replaceUrl').returns('http://www.example.com');\n      viewer.hasCapability.withArgs('replaceUrl').returns(true);\n      env.sandbox.stub(viewer, 'sendMessageAwaitResponse').callsFake(message => {\n        if (message == 'getReplaceUrl') {\n          return Promise.resolve({\n            'replaceUrl': undefined\n          });\n        }\n      });\n      maybeTrackImpression(window);\n      return expect(getTrackImpressionPromise()).to.eventually.be.fulfilled;\n    });","file":"unit/test-impression.js","skipped":false,"dir":"test"},{"name":"should replace location href with replaceUrl from viewer","suites":["replaceUrl"],"updatePoint":{"line":293,"column":64,"index":12165},"line":293,"code":"    it('should replace location href with replaceUrl from viewer', () => {\n      toggleExperiment(window, 'alp', true);\n      viewer.getParam.withArgs('replaceUrl').returns('http://www.example.com');\n      viewer.hasCapability.withArgs('replaceUrl').returns(true);\n      env.sandbox.stub(viewer, 'sendMessageAwaitResponse').callsFake(message => {\n        if (message == 'getReplaceUrl') {\n          return Promise.resolve({\n            'replaceUrl': 'http://localhost:9876/v/s/f.com/?gclid=1234&amp_js_v=1'\n          });\n        }\n      });\n      const replaceUrlStub = env.sandbox.stub(viewer, 'replaceUrl');\n      const location = {\n        hash: '#hash',\n        search: '?bar=foo&test=4321',\n        href: 'http://localhost:9876?bar=foo&test=4321#hash'\n      };\n      env.sandbox.stub(WindowInterface, 'getLocation').returns(location);\n      maybeTrackImpression(window);\n      return getTrackImpressionPromise().then(() => {\n        expect(replaceUrlStub).to.be.calledOnce.calledWith('http://localhost:9876/v/s/f.com/?gclid=1234&amp_js_v=1');\n      });\n    });","file":"unit/test-impression.js","skipped":false,"dir":"test"},{"name":"shouldAppendExtraParams","suites":["replaceUrl"],"updatePoint":{"line":317,"column":29,"index":13202},"line":317,"code":"  it('shouldAppendExtraParams', () => {\n    const div = document.createElement('amp-analytics');\n    div.setAttribute('type', 'fake');\n    const ampdocApi = {\n      whenReady: () => {\n        return Promise.resolve();\n      },\n      getBody: () => {\n        return document.body;\n      }\n    };\n    document.body.appendChild(div);\n    return shouldAppendExtraParams(ampdocApi).then(res => {\n      expect(res).to.be.false;\n      const div2 = document.createElement('amp-analytics');\n      div2.setAttribute('type', 'googleanalytics');\n      document.body.appendChild(div2);\n      return shouldAppendExtraParams(ampdocApi).then(res => {\n        expect(res).to.be.true;\n      });\n    });\n  });","file":"unit/test-impression.js","skipped":false,"dir":"test"},{"name":"should append gclid and gclsrc from window href","suites":["getExtraParamsUrl"],"updatePoint":{"line":346,"column":55,"index":14115},"line":346,"code":"    it('should append gclid and gclsrc from window href', () => {\n      const target = document.createElement('a');\n      target.href = 'https://www.test.com?a=1&b=2&c=QUERY_PARAM(c)';\n      windowApi.location.href = 'www.current.com?gclid=123&gclsrc=abc';\n      expect(getExtraParamsUrl(windowApi, target)).to.equal('gclid=QUERY_PARAM(gclid)&gclsrc=QUERY_PARAM(gclsrc)');\n    });","file":"unit/test-impression.js","skipped":false,"dir":"test"},{"name":"should respect window location href","suites":["getExtraParamsUrl"],"updatePoint":{"line":352,"column":43,"index":14484},"line":352,"code":"    it('should respect window location href', () => {\n      const target = document.createElement('a');\n      target.href = 'https://www.test.com?a=1&b=2&c=QUERY_PARAM(c)';\n      windowApi.location.href = 'www.current.com';\n      expect(getExtraParamsUrl(windowApi, target)).to.equal('');\n      windowApi.location.href = 'www.current.com?gclid=123';\n      expect(getExtraParamsUrl(windowApi, target)).to.equal('gclid=QUERY_PARAM(gclid)');\n      windowApi.location.href = 'www.current.com?gclid=123&gclsrc=abc';\n      expect(getExtraParamsUrl(windowApi, target)).to.equal('gclid=QUERY_PARAM(gclid)&gclsrc=QUERY_PARAM(gclsrc)');\n    });","file":"unit/test-impression.js","skipped":false,"dir":"test"},{"name":"should respect param in url","suites":["getExtraParamsUrl"],"updatePoint":{"line":362,"column":35,"index":15111},"line":362,"code":"    it('should respect param in url', () => {\n      const target = document.createElement('a');\n      target.href = 'https://www.test.com?a=1&b=2&gclid=123';\n      windowApi.location.href = 'www.current.com?gclid=123&gclsrc=abc';\n      expect(getExtraParamsUrl(windowApi, target)).to.equal('gclsrc=QUERY_PARAM(gclsrc)');\n    });","file":"unit/test-impression.js","skipped":false,"dir":"test"},{"name":"should respect param in data-amp-addparams","suites":["getExtraParamsUrl"],"updatePoint":{"line":368,"column":50,"index":15455},"line":368,"code":"    it('should respect param in data-amp-addparams', () => {\n      const target = document.createElement('a');\n      target.href = 'https://www.test.com?a=1&b=2&gclid=123';\n      target.setAttribute('data-amp-addparams', 'gclid=QUERY_PARAM(gclid)');\n      windowApi.location.href = 'www.current.com?gclid=123&gclsrc=abc';\n      expect(getExtraParamsUrl(windowApi, target)).to.equal('gclsrc=QUERY_PARAM(gclsrc)');\n    });","file":"unit/test-impression.js","skipped":false,"dir":"test"},{"name":"should return true for allowlisted hosts","suites":["isTrustedReferrer"],"updatePoint":{"line":387,"column":48,"index":16254},"line":387,"code":"    it('should return true for allowlisted hosts', () => {\n      test('https://t.co/docref', true);\n    });","file":"unit/test-impression.js","skipped":false,"dir":"test"},{"name":"should not trust host as referrer with http","suites":["isTrustedReferrer"],"updatePoint":{"line":390,"column":51,"index":16365},"line":390,"code":"    it('should not trust host as referrer with http', () => {\n      test('http://t.co/asdf', false);\n    });","file":"unit/test-impression.js","skipped":false,"dir":"test"},{"name":"should not trust non-allowlisted hosts","suites":["isTrustedReferrer"],"updatePoint":{"line":393,"column":46,"index":16469},"line":393,"code":"    it('should not trust non-allowlisted hosts', () => {\n      test('https://www.t.co/asdf', false);\n      test('https://t.com/asdf', false);\n      test('https://t.cn/asdf', false);\n    });","file":"unit/test-impression.js","skipped":false,"dir":"test"},{"name":"should find and await all visible content elements in given rect","suites":["whenContentIniLoadMeasure"],"updatePoint":{"line":37,"column":72,"index":1114},"line":37,"code":"    it('should find and await all visible content elements in given rect', async () => {\n      let content1;\n      let content2;\n      const context = doc.createElement('div');\n      doc.body.appendChild(context);\n      const resources = Services.resourcesForDoc(ampdoc);\n      env.sandbox.stub(resources, 'get').returns([content1 = resource(win, 'amp-img', '1'), content2 = resource(win, 'amp-video', '2'), resource(win, 'amp-img', '3', false),\n      // resource outside rect\n      resource(win, 'amp-img', '4', true, false),\n      // hidden resource\n      resource(win, 'amp-ad', '5') // denylisted resource\n      ]);\n\n      let contentIniLoadComplete = false;\n      whenContentIniLoadMeasure(ampdoc, win, {}).then(() => {\n        contentIniLoadComplete = true;\n      });\n      ampdoc.signals().signal('ready-scan');\n      await new Promise(setTimeout);\n      content1.load();\n      await new Promise(setTimeout);\n      expect(contentIniLoadComplete).to.be.false;\n      content2.load();\n      await new Promise(setTimeout);\n      expect(contentIniLoadComplete).to.be.true;\n    });","file":"unit/test-ini-load.js","skipped":false,"dir":"test"},{"name":"should find and await all visible content elements","suites":["whenContentIniLoadInOb"],"updatePoint":{"line":110,"column":58,"index":3767},"line":110,"code":"    it('should find and await all visible content elements', async () => {\n      let contentIniLoadComplete = false;\n      whenContentIniLoadInOb(ampdoc).then(() => {\n        contentIniLoadComplete = true;\n      });\n      ampdoc.signals().signal('ready-scan');\n      await new Promise(setTimeout);\n      expect(observer).to.exist;\n      expect(observer.options.root).to.equal(doc);\n      expect(observer.options.threshold).to.equal(0.01);\n      await observer.notify([{\n        target: content1.element,\n        isIntersecting: true\n      }, {\n        target: content2.element,\n        isIntersecting: true\n      }]);\n      await new Promise(setTimeout);\n      expect(contentIniLoadComplete).to.be.false;\n      content1.load();\n      await new Promise(setTimeout);\n      expect(contentIniLoadComplete).to.be.false;\n      content2.load();\n      await new Promise(setTimeout);\n      expect(contentIniLoadComplete).to.be.true;\n      expect(observer.disconnected).to.be.true;\n    });","file":"unit/test-ini-load.js","skipped":false,"dir":"test"},{"name":"should find and await some visible content elements","suites":["whenContentIniLoadInOb"],"updatePoint":{"line":137,"column":59,"index":4748},"line":137,"code":"    it('should find and await some visible content elements', async () => {\n      let contentIniLoadComplete = false;\n      whenContentIniLoadInOb(ampdoc).then(() => {\n        contentIniLoadComplete = true;\n      });\n      ampdoc.signals().signal('ready-scan');\n      await new Promise(setTimeout);\n      expect(observer).to.exist;\n      expect(observer.options.root).to.equal(doc);\n      expect(observer.options.threshold).to.equal(0.01);\n      await observer.notify([{\n        target: content1.element,\n        isIntersecting: true\n      }, {\n        target: content2.element,\n        isIntersecting: false\n      }]);\n      await new Promise(setTimeout);\n      expect(contentIniLoadComplete).to.be.false;\n      content1.load();\n      await new Promise(setTimeout);\n      expect(contentIniLoadComplete).to.be.true;\n      expect(observer.disconnected).to.be.true;\n    });","file":"unit/test-ini-load.js","skipped":false,"dir":"test"},{"name":"should complete without any elements","suites":["whenContentIniLoadInOb"],"updatePoint":{"line":161,"column":44,"index":5605},"line":161,"code":"    it('should complete without any elements', async () => {\n      getResourcesStub.returns([]);\n      let contentIniLoadComplete = false;\n      whenContentIniLoadInOb(ampdoc).then(() => {\n        contentIniLoadComplete = true;\n      });\n      ampdoc.signals().signal('ready-scan');\n      await new Promise(setTimeout);\n      expect(observer).to.not.exist;\n      expect(contentIniLoadComplete).to.be.true;\n    });","file":"unit/test-ini-load.js","skipped":false,"dir":"test"},{"name":"should initialize in touch mode","suites":[],"updatePoint":{"line":33,"column":37,"index":947},"line":33,"code":"  it('should initialize in touch mode', () => {\n    expect(input.isTouchDetected()).to.equal(true);\n    expect(input.isMouseDetected()).to.equal(false);\n    expect(input.isKeyboardActive()).to.equal(false);\n    expect(eventListeners['keydown']).to.not.equal(undefined);\n    expect(eventListeners['mousedown']).to.not.equal(undefined);\n    expect(eventListeners['mousemove']).to.not.equal(undefined);\n    expect(eventListeners['click']).to.equal(undefined);\n  });","file":"unit/test-input.js","skipped":false,"dir":"test"},{"name":"should fire states immediately","suites":[],"updatePoint":{"line":42,"column":36,"index":1409},"line":42,"code":"  it('should fire states immediately', () => {\n    let touchDetected = undefined;\n    input.onTouchDetected(detected => {\n      touchDetected = detected;\n    }, true);\n    expect(touchDetected).to.equal(true);\n    let mouseDetected = undefined;\n    input.onMouseDetected(detected => {\n      mouseDetected = detected;\n    }, true);\n    expect(mouseDetected).to.equal(false);\n    let kbActive = undefined;\n    input.onKeyboardStateChanged(active => {\n      kbActive = active;\n    }, true);\n    expect(kbActive).to.equal(false);\n  });","file":"unit/test-input.js","skipped":false,"dir":"test"},{"name":"should release mousemove event asap","suites":[],"updatePoint":{"line":59,"column":41,"index":1946},"line":59,"code":"  it('should release mousemove event asap', () => {\n    expect(eventListeners['mousemove']).to.not.equal(undefined);\n    eventListeners['mousemove']({});\n    expect(eventListeners['mousemove']).to.equal(undefined);\n  });","file":"unit/test-input.js","skipped":false,"dir":"test"},{"name":"should detect mouse","suites":[],"updatePoint":{"line":64,"column":25,"index":2151},"line":64,"code":"  it('should detect mouse', () => {\n    expect(input.isMouseDetected()).to.equal(false);\n    let mouseDetected = undefined;\n    input.onMouseDetected(detected => {\n      mouseDetected = detected;\n    });\n    expect(mouseDetected).to.equal(undefined);\n    const p = input.onMouseMove_({});\n    expect(eventListeners['click']).to.not.equal(undefined);\n    clock.tick(350);\n    return p.then(() => {\n      expect(input.mouseConfirmAttemptCount_).to.equal(0);\n      expect(input.isMouseDetected()).to.equal(true);\n      expect(mouseDetected).to.equal(true);\n      expect(eventListeners['click']).to.equal(undefined);\n    });\n  });","file":"unit/test-input.js","skipped":false,"dir":"test"},{"name":"should try to detect mouse again","suites":[],"updatePoint":{"line":81,"column":38,"index":2791},"line":81,"code":"  it('should try to detect mouse again', () => {\n    expect(input.isMouseDetected()).to.equal(false);\n    let mouseDetected = undefined;\n    input.onMouseDetected(detected => {\n      mouseDetected = detected;\n    });\n    expect(mouseDetected).to.equal(undefined);\n    const p = input.onMouseMove_({});\n    eventListeners['click']();\n    return p.then(() => {\n      expect(input.mouseConfirmAttemptCount_).to.equal(1);\n      expect(input.isMouseDetected()).to.equal(false);\n      expect(mouseDetected).to.equal(undefined);\n      expect(eventListeners['click']).to.equal(undefined);\n      expect(eventListeners['mousemove']).to.not.equal(undefined);\n    });\n  });","file":"unit/test-input.js","skipped":false,"dir":"test"},{"name":"should ignore mouse move if it belongs to touch","suites":[],"updatePoint":{"line":98,"column":53,"index":3468},"line":98,"code":"  it('should ignore mouse move if it belongs to touch', () => {\n    expect(input.isMouseDetected()).to.equal(false);\n    let mouseDetected = undefined;\n    input.onMouseDetected(detected => {\n      mouseDetected = detected;\n    });\n    expect(mouseDetected).to.equal(undefined);\n    const p = input.onMouseMove_({\n      sourceCapabilities: {\n        firesTouchEvents: true\n      }\n    });\n    expect(p).to.be.undefined;\n    expect(input.mouseConfirmAttemptCount_).to.equal(1);\n    expect(input.isMouseDetected()).to.equal(false);\n    expect(mouseDetected).to.equal(undefined);\n    expect(eventListeners['mousemove']).to.not.equal(undefined);\n  });","file":"unit/test-input.js","skipped":false,"dir":"test"},{"name":"should stop trying to detect mouse after few attempts","suites":[],"updatePoint":{"line":116,"column":59,"index":4122},"line":116,"code":"  it('should stop trying to detect mouse after few attempts', () => {\n    expect(input.isMouseDetected()).to.equal(false);\n    let mouseDetected = undefined;\n    input.onMouseDetected(detected => {\n      mouseDetected = detected;\n    });\n    expect(mouseDetected).to.equal(undefined);\n    const p = input.onMouseMove_({});\n    input.mouseConfirmAttemptCount_ = 100;\n    eventListeners['mousemove'] = undefined;\n    eventListeners['click']();\n    return p.then(() => {\n      expect(input.mouseConfirmAttemptCount_).to.equal(101);\n      expect(input.isMouseDetected()).to.equal(false);\n      expect(mouseDetected).to.equal(undefined);\n      expect(eventListeners['click']).to.equal(undefined);\n      expect(eventListeners['mousemove']).to.equal(undefined);\n    });\n  });","file":"unit/test-input.js","skipped":false,"dir":"test"},{"name":"should detect keyboard states","suites":[],"updatePoint":{"line":135,"column":35,"index":4867},"line":135,"code":"  it('should detect keyboard states', () => {\n    expect(input.isKeyboardActive()).to.equal(false);\n    let kbActive = undefined;\n    input.onKeyboardStateChanged(active => {\n      kbActive = active;\n    });\n    expect(kbActive).to.equal(undefined);\n\n    // Should send active.\n    eventListeners['keydown']({});\n    expect(input.isKeyboardActive()).to.equal(true);\n    expect(kbActive).to.equal(true);\n\n    // Should not resend active.\n    kbActive = undefined;\n    eventListeners['keydown']({});\n    expect(input.isKeyboardActive()).to.equal(true);\n    expect(kbActive).to.equal(undefined);\n\n    // Should send inactive.\n    kbActive = undefined;\n    eventListeners['mousedown']({});\n    expect(input.isKeyboardActive()).to.equal(false);\n    expect(kbActive).to.equal(false);\n  });","file":"unit/test-input.js","skipped":false,"dir":"test"},{"name":"should ignore keyboard state on input","suites":[],"updatePoint":{"line":160,"column":43,"index":5659},"line":160,"code":"  it('should ignore keyboard state on input', () => {\n    expect(input.isKeyboardActive()).to.equal(false);\n    let kbActive = undefined;\n    input.onKeyboardStateChanged(active => {\n      kbActive = active;\n    });\n    expect(kbActive).to.equal(undefined);\n\n    // Should send active.\n    eventListeners['keydown']({\n      target: {\n        tagName: 'INPUT'\n      }\n    });\n    expect(input.isKeyboardActive()).to.equal(false);\n    expect(kbActive).to.equal(undefined);\n  });","file":"unit/test-input.js","skipped":false,"dir":"test"},{"name":"should add amp-mode-mouse class to body when mouseConfirmed","suites":[],"updatePoint":{"line":195,"column":65,"index":6591},"line":195,"code":"  it('should add amp-mode-mouse class to body when mouseConfirmed', async () => {\n    expect(body).to.not.have.class('amp-mode-mouse');\n    input.mouseConfirmed_();\n    await new Promise(setTimeout);\n    expect(body).to.have.class('amp-mode-mouse');\n  });","file":"unit/test-input.js","skipped":false,"dir":"test"},{"name":"should add amp-mode-keyboard-active class to body when onKeyDown","suites":[],"updatePoint":{"line":201,"column":70,"index":6852},"line":201,"code":"  it('should add amp-mode-keyboard-active class to body when onKeyDown', async () => {\n    expect(body).to.not.have.class('amp-mode-keyboard-active');\n    simulateKeyDown();\n    await new Promise(setTimeout);\n    expect(body).to.have.class('amp-mode-keyboard-active');\n  });","file":"unit/test-input.js","skipped":false,"dir":"test"},{"name":"should register integrations","suites":[],"updatePoint":{"line":11,"column":34,"index":472},"line":11,"code":"  it('should register integrations', () => {\n    window.ampTestRuntimeConfig.adTypes.forEach(adType => {\n      expect(registrations, `Missing registration for [${adType}]`).to.contain.key(adType);\n    });\n  });","file":"unit/test-integration.js","skipped":false,"dir":"test"},{"name":"should not throw validateParentOrigin without ancestorOrigins","suites":[],"updatePoint":{"line":16,"column":67,"index":716},"line":16,"code":"  it('should not throw validateParentOrigin without ancestorOrigins', () => {\n    let parent = {};\n    validateParentOrigin({\n      location: {}\n    }, parent);\n    parent = {};\n    validateParentOrigin({\n      location: {\n        ancestorOrigins: []\n      }\n    }, parent);\n  });","file":"unit/test-integration.js","skipped":false,"dir":"test"},{"name":"should validateParentOrigin with correct ancestorOrigins","suites":[],"updatePoint":{"line":28,"column":62,"index":992},"line":28,"code":"  it('should validateParentOrigin with correct ancestorOrigins', () => {\n    const parent = {\n      origin: 'abc'\n    };\n    validateParentOrigin({\n      location: {\n        ancestorOrigins: ['abc', 'xyz']\n      }\n    }, parent);\n  });","file":"unit/test-integration.js","skipped":false,"dir":"test"},{"name":"should throw in validateParentOrigin with incorrect ancestorOrigins","suites":[],"updatePoint":{"line":38,"column":73,"index":1239},"line":38,"code":"  it('should throw in validateParentOrigin with incorrect ancestorOrigins', () => {\n    const parent = {\n      origin: 'abc'\n    };\n    allowConsoleError(() => {\n      expect(() => {\n        validateParentOrigin({\n          location: {\n            ancestorOrigins: ['xyz']\n          }\n        }, parent);\n      }).to.throw(/Parent origin mismatch/);\n    });\n  });","file":"unit/test-integration.js","skipped":false,"dir":"test"},{"name":"should parse JSON from fragment unencoded (most browsers)","suites":[],"updatePoint":{"line":52,"column":63,"index":1593},"line":52,"code":"  it('should parse JSON from fragment unencoded (most browsers)', () => {\n    const unencoded = '#{\"tweetid\":\"638793490521001985\",\"width\":390,' + '\"height\":50,' + '\"type\":\"twitter\",\"_context\":{\"referrer\":\"http://localhost:8000/' + 'examples/\",\"canonicalUrl\":\"http://localhost:8000/' + 'examples/amps.html\",\"location\":{\"href\":\"http://' + 'localhost:8000/examples/twitter.amp.html\"},' + '\"mode\":{\"localDev\":true,\"development\":false,\"minified\":false}}}';\n    const data = parseFragment(unencoded);\n    expect(data).to.be.an('object');\n    expect(data.tweetid).to.equal('638793490521001985');\n    expect(data._context.location.href).to.equal('http://localhost:8000/examples/twitter.amp.html');\n  });","file":"unit/test-integration.js","skipped":false,"dir":"test"},{"name":"should parse JSON from fragment encoded (Firefox)","suites":[],"updatePoint":{"line":59,"column":55,"index":2281},"line":59,"code":"  it('should parse JSON from fragment encoded (Firefox)', () => {\n    const encoded = '#{%22tweetid%22:%22638793490521001985%22,%22width' + '%22:390,%22height%22:50,%22initialWindowWidth%22:1290,%22initial' + 'WindowHeight%22:165,%22type%22:%22twitter%22,%22_context%22:{%22' + 'referrer%22:%22http://localhost:8000/examples/%22,%22canoni' + 'calUrl%22:%22http://localhost:8000/examples/amps.html%22,%22' + 'location%22:{%22href%22:%22http://localhost:8000/examples/t' + 'witter.amp.html%22},%22mode%22:{%22localDev%22:true,%22develop' + 'ment%22:false,%22minified%22:false}}}';\n    const data = parseFragment(encoded);\n    expect(data).to.be.an('object');\n    expect(data.tweetid).to.equal('638793490521001985');\n    expect(data._context.location.href).to.equal('http://localhost:8000/examples/twitter.amp.html');\n  });","file":"unit/test-integration.js","skipped":false,"dir":"test"},{"name":"should be ok with empty fragment","suites":[],"updatePoint":{"line":66,"column":38,"index":3085},"line":66,"code":"  it('should be ok with empty fragment', () => {\n    expect(parseFragment('')).to.be.empty;\n    expect(parseFragment('#')).to.be.empty;\n  });","file":"unit/test-integration.js","skipped":false,"dir":"test"},{"name":"should call the right action based on type","suites":[],"updatePoint":{"line":70,"column":48,"index":3237},"line":70,"code":"  it('should call the right action based on type', () => {\n    const data = {\n      type: 'testAction'\n    };\n    const win = {\n      context: {\n        location: {\n          originValidated: true\n        },\n        data\n      }\n    };\n    let called = false;\n    register('testAction', function (myWin, myData) {\n      called = true;\n      expect(myWin).to.equal(win);\n      expect(myData).to.equal(myData);\n    });\n    expect(called).to.be.false;\n    draw3pInternal(win, data);\n    expect(called).to.be.true;\n  });","file":"unit/test-integration.js","skipped":false,"dir":"test"},{"name":"should support config processing in draw3pInternal","suites":[],"updatePoint":{"line":92,"column":56,"index":3762},"line":92,"code":"  it('should support config processing in draw3pInternal', () => {\n    const data = {\n      type: 'testAction2'\n    };\n    const win = {\n      context: {\n        location: {\n          originValidated: true\n        },\n        data\n      }\n    };\n    let called = false;\n    register('testAction2', function (myWin, myData) {\n      expect(called).to.be.false;\n      called = true;\n      expect(myWin).to.equal(win);\n      expect(myData).to.not.equal(data);\n      expect(myData).to.have.property('custom');\n    });\n    expect(called).to.be.false;\n    let finish;\n    draw3pInternal(win, data, (_config, done) => {\n      finish = () => {\n        done({\n          custom: true\n        });\n      };\n    });\n    expect(called).to.be.false;\n    finish();\n    expect(called).to.be.true;\n  });","file":"unit/test-integration.js","skipped":false,"dir":"test"},{"name":"should throw if origin was never validated","suites":[],"updatePoint":{"line":125,"column":48,"index":4538},"line":125,"code":"  it('should throw if origin was never validated', () => {\n    const data = {\n      type: 'testAction'\n    };\n    const win = {\n      context: {\n        location: {\n          originValidated: true\n        },\n        data,\n        tagName: 'AMP-EMBED'\n      }\n    };\n    allowConsoleError(() => {\n      expect(() => {\n        draw3pInternal(win, data);\n      }).to.throw(/Embed type testAction not allowed with tag AMP-EMBED/);\n    });\n  });","file":"unit/test-integration.js","skipped":false,"dir":"test"},{"name":"should allow all types on localhost","suites":[],"updatePoint":{"line":144,"column":41,"index":4972},"line":144,"code":"  it('should allow all types on localhost', () => {\n    const localhost = {\n      location: {\n        hostname: 'ads.localhost'\n      }\n    };\n    validateAllowedTypes(localhost, 'twitter');\n    validateAllowedTypes(localhost, 'facebook');\n    validateAllowedTypes(localhost, 'a9');\n    validateAllowedTypes(localhost, 'not present');\n  });","file":"unit/test-integration.js","skipped":false,"dir":"test"},{"name":"should allow all types on default host","suites":[],"updatePoint":{"line":155,"column":44,"index":5316},"line":155,"code":"  it('should allow all types on default host', () => {\n    const defaultHost = {\n      location: {\n        hostname: '3p.ampproject.net'\n      }\n    };\n    validateAllowedTypes(defaultHost, 'twitter');\n    validateAllowedTypes(defaultHost, 'facebook');\n    validateAllowedTypes(defaultHost, 'a9');\n    validateAllowedTypes(defaultHost, 'not present');\n  });","file":"unit/test-integration.js","skipped":false,"dir":"test"},{"name":"should allow all types on unique default host","suites":[],"updatePoint":{"line":166,"column":51,"index":5681},"line":166,"code":"  it('should allow all types on unique default host', () => {\n    function get(domain) {\n      return {\n        location: {\n          hostname: domain\n        }\n      };\n    }\n    validateAllowedTypes(get('d-123.ampproject.net'), 'twitter');\n    validateAllowedTypes(get('d-46851196780996873.ampproject.net'), 'adtech');\n    validateAllowedTypes(get('d-46851196780996873.ampproject.net'), 'a9');\n    allowConsoleError(() => {\n      expect(() => {\n        validateAllowedTypes(get('d-124.ampproject.net.com'), 'not present');\n      }).to.throw(/3p type for custom iframe not allowed/);\n    });\n  });","file":"unit/test-integration.js","skipped":false,"dir":"test"},{"name":"should validate types on custom host","suites":[],"updatePoint":{"line":183,"column":42,"index":6271},"line":183,"code":"  it('should validate types on custom host', () => {\n    const defaultHost = {\n      location: {\n        hostname: 'other.com'\n      }\n    };\n    validateAllowedTypes(defaultHost, 'twitter');\n    validateAllowedTypes(defaultHost, 'facebook');\n    validateAllowedTypes(defaultHost, 'doubleclick');\n    allowConsoleError(() => {\n      expect(() => {\n        validateAllowedTypes(defaultHost, 'not present');\n      }).to.throw(/3p type for custom iframe not allowed/);\n    });\n    allowConsoleError(() => {\n      expect(() => {\n        validateAllowedTypes(defaultHost, 'adtech');\n      }).to.throw(/3p type for custom iframe not allowed/);\n    });\n    validateAllowedTypes(defaultHost, 'adtech', ['adtech']);\n  });","file":"unit/test-integration.js","skipped":false,"dir":"test"},{"name":"should ensure the 3p frame is actually framed","suites":[],"updatePoint":{"line":204,"column":51,"index":6993},"line":204,"code":"  it('should ensure the 3p frame is actually framed', () => {\n    ensureFramed(window); // Test window is always framed.\n    ensureFramed({\n      parent: 'other'\n    });\n    const win = {\n      location: {\n        href: 'sentinel'\n      }\n    };\n    win.parent = win;\n    expect(() => {\n      ensureFramed(win);\n    }).to.throw(/Must be framed: sentinel/);\n  });","file":"unit/test-integration.js","skipped":false,"dir":"test"},{"name":"should validateAllowedEmbeddingOrigins: non-cache","suites":[],"updatePoint":{"line":219,"column":55,"index":7360},"line":219,"code":"  it('should validateAllowedEmbeddingOrigins: non-cache', () => {\n    const win = {\n      document: {\n        referrer: 'https://should-be-ignored'\n      },\n      location: {\n        ancestorOrigins: ['https://www.foo.com']\n      }\n    };\n    function invalid(fn) {\n      expect(fn).to.throw(/Invalid embedding hostname/);\n    }\n    validateAllowedEmbeddingOrigins(win, ['foo.com']);\n    validateAllowedEmbeddingOrigins(win, ['foo.net', 'foo.com']);\n    validateAllowedEmbeddingOrigins(win, ['www.foo.com']);\n    invalid(() => validateAllowedEmbeddingOrigins(win, ['bar.com']));\n    invalid(() => validateAllowedEmbeddingOrigins(win, ['amp.www.foo.com']));\n    invalid(() => validateAllowedEmbeddingOrigins(win, ['ampwww.foo.com']));\n  });","file":"unit/test-integration.js","skipped":false,"dir":"test"},{"name":"should validateAllowedEmbeddingOrigins: cache","suites":[],"updatePoint":{"line":238,"column":51,"index":8096},"line":238,"code":"  it('should validateAllowedEmbeddingOrigins: cache', () => {\n    const win = {\n      location: {\n        ancestorOrigins: ['https://cdn.ampproject.org']\n      },\n      document: {\n        referrer: 'https://cdn.ampproject.org/c/www.foo.com/test'\n      }\n    };\n    function invalid(fn) {\n      expect(fn).to.throw(/Invalid embedding hostname/);\n    }\n    validateAllowedEmbeddingOrigins(win, ['foo.com']);\n    validateAllowedEmbeddingOrigins(win, ['www.foo.com']);\n    invalid(() => validateAllowedEmbeddingOrigins(win, ['bar.com']));\n    invalid(() => validateAllowedEmbeddingOrigins(win, ['amp.www.foo.com']));\n    invalid(() => validateAllowedEmbeddingOrigins(win, ['ampwww.foo.com']));\n    win.document.referrer = 'https://cdn.ampproject.net/c/www.foo.com/test';\n    invalid(() => validateAllowedEmbeddingOrigins(win, ['foo.com']));\n  });","file":"unit/test-integration.js","skipped":false,"dir":"test"},{"name":"should validateAllowedEmbeddingOrigins: referrer non-cache","suites":[],"updatePoint":{"line":258,"column":64,"index":8953},"line":258,"code":"  it('should validateAllowedEmbeddingOrigins: referrer non-cache', () => {\n    const win = {\n      location: {},\n      document: {\n        referrer: 'https://www.foo.com/test'\n      }\n    };\n    function invalid(fn) {\n      expect(fn).to.throw(/Invalid embedding hostname/);\n    }\n    validateAllowedEmbeddingOrigins(win, ['foo.com']);\n    validateAllowedEmbeddingOrigins(win, ['www.foo.com']);\n    invalid(() => validateAllowedEmbeddingOrigins(win, ['bar.com']));\n    invalid(() => validateAllowedEmbeddingOrigins(win, ['amp.www.foo.com']));\n    invalid(() => validateAllowedEmbeddingOrigins(win, ['ampwww.foo.com']));\n  });","file":"unit/test-integration.js","skipped":false,"dir":"test"},{"name":"should validateAllowedEmbeddingOrigins: referrer cache","suites":[],"updatePoint":{"line":274,"column":60,"index":9575},"line":274,"code":"  it('should validateAllowedEmbeddingOrigins: referrer cache', () => {\n    const win = {\n      location: {},\n      document: {\n        referrer: 'https://cdn.ampproject.org/c/www.foo.com/test'\n      }\n    };\n    function invalid(fn) {\n      expect(fn).to.throw(/Invalid embedding hostname/);\n    }\n    validateAllowedEmbeddingOrigins(win, ['foo.com']);\n    validateAllowedEmbeddingOrigins(win, ['www.foo.com']);\n    invalid(() => validateAllowedEmbeddingOrigins(win, ['bar.com']));\n    invalid(() => validateAllowedEmbeddingOrigins(win, ['amp.www.foo.com']));\n    invalid(() => validateAllowedEmbeddingOrigins(win, ['ampwww.foo.com']));\n    win.document.referrer = 'https://cdn.ampproject.net/c/www.foo.com/test';\n    invalid(() => validateAllowedEmbeddingOrigins(win, ['foo.com']));\n  });","file":"unit/test-integration.js","skipped":false,"dir":"test"},{"name":"should destroy correctly","suites":[],"updatePoint":{"line":71,"column":30,"index":1887},"line":71,"code":"  it('should destroy correctly', () => {\n    const subscriptionApiDestroySpy = env.sandbox.spy(ioApi.subscriptionApi_, 'destroy');\n    const polyfillDisconnectSpy = env.sandbox.spy(ioApi.intersectionObserver_, 'disconnect');\n    ioApi.destroy();\n    expect(subscriptionApiDestroySpy).to.be.called;\n    expect(polyfillDisconnectSpy).to.be.called;\n    expect(ioApi.intersectionObserver_).to.be.null;\n    expect(ioApi.subscriptionApi_).to.be.null;\n    ioApi = null;\n  });","file":"unit/test-intersection-observer-polyfill.js","skipped":false,"dir":"test"},{"name":"without owner","suites":[],"updatePoint":{"line":87,"column":19,"index":2582},"line":87,"code":"  it('without owner', () => {\n    expect(getIntersectionChangeEntry(layoutRectLtwh(0, 100, 50, 50), null, layoutRectLtwh(0, 100, 100, 100))).to.jsonEqual({\n      time: 100,\n      rootBounds: layoutRectLtwh(0, 0, 100, 100),\n      boundingClientRect: layoutRectLtwh(0, 0, 50, 50),\n      intersectionRect: layoutRectLtwh(0, 0, 50, 50),\n      intersectionRatio: 1\n    });\n    expect(getIntersectionChangeEntry(layoutRectLtwh(50, 200, 150, 200), null, layoutRectLtwh(0, 100, 100, 100))).to.jsonEqual({\n      time: 100,\n      rootBounds: layoutRectLtwh(0, 0, 100, 100),\n      boundingClientRect: layoutRectLtwh(50, 100, 150, 200),\n      intersectionRect: layoutRectLtwh(50, 100, 50, 0),\n      intersectionRatio: 0\n    });\n  });","file":"unit/test-intersection-observer-polyfill.js","skipped":false,"dir":"test"},{"name":"with owner","suites":[],"updatePoint":{"line":103,"column":16,"index":3301},"line":103,"code":"  it('with owner', () => {\n    expect(getIntersectionChangeEntry(layoutRectLtwh(50, 50, 150, 200), layoutRectLtwh(0, 50, 100, 100), layoutRectLtwh(0, 100, 100, 100))).to.jsonEqual({\n      time: 100,\n      rootBounds: layoutRectLtwh(0, 0, 100, 100),\n      boundingClientRect: layoutRectLtwh(50, -50, 150, 200),\n      intersectionRect: layoutRectLtwh(50, 0, 50, 50),\n      intersectionRatio: 1 / 12\n    });\n  });","file":"unit/test-intersection-observer-polyfill.js","skipped":false,"dir":"test"},{"name":"should return a valid ratio","suites":[],"updatePoint":{"line":126,"column":33,"index":3985},"line":126,"code":"  it('should return a valid ratio', () => {\n    const ratio = intersectionRatio(smallRectMock, largeRectMock);\n    expect(ratio).to.be.equal(0.25);\n  });","file":"unit/test-intersection-observer-polyfill.js","skipped":false,"dir":"test"},{"name":"should not return NaN","suites":[],"updatePoint":{"line":130,"column":27,"index":4133},"line":130,"code":"  it('should not return NaN', () => {\n    const notVisibleMock = {\n      width: 0,\n      height: 0\n    };\n    const ratio = intersectionRatio(notVisibleMock, notVisibleMock);\n    expect(ratio).to.not.be.equal(NaN);\n  });","file":"unit/test-intersection-observer-polyfill.js","skipped":false,"dir":"test"},{"name":"By default, sets initDelay to how long loaderService download takes","suites":[],"updatePoint":{"line":28,"column":73,"index":900},"line":28,"code":"  it('By default, sets initDelay to how long loaderService download takes', async () => {\n    createLoaderElement(ampdoc, el, /* width */400, /* height */400);\n    clock.tick(loaderDownloadTime);\n    await clock.runAllAsync();\n    expect(loaderService.initializeLoader).calledOnceWith(el, env.sandbox.match.any, /* initDelay */100, /* width */400, /* height */400);\n  });","file":"unit/test-loader.js","skipped":false,"dir":"test"},{"name":"If specified, startTime should contribute to the initDelay","suites":[],"updatePoint":{"line":34,"column":64,"index":1263},"line":34,"code":"  it('If specified, startTime should contribute to the initDelay', async () => {\n    // startTime: 0, now: 50, loaderDownloadTime: 100 --> initDelay: 150.\n    createLoaderElement(ampdoc, el, /* width */400, /* height */400, 0);\n    clock.tick(loaderDownloadTime);\n    await clock.runAllAsync();\n    expect(loaderService.initializeLoader).calledOnceWith(el, env.sandbox.match.any, /* initDelay */150, /* width */400, /* height */400);\n  });","file":"unit/test-loader.js","skipped":false,"dir":"test"},{"name":"tracking should observe an element","suites":[],"updatePoint":{"line":50,"column":40,"index":1390},"line":50,"code":"  it('tracking should observe an element', () => {\n    service = new LoadingIndicatorImpl(ampdoc);\n    service.track(el);\n    expect(io.observed).to.include(el);\n  });","file":"unit/test-loading-indicator.js","skipped":false,"dir":"test"},{"name":"should not create the loader on out-of-viewport","suites":[],"updatePoint":{"line":55,"column":53,"index":1571},"line":55,"code":"  it('should not create the loader on out-of-viewport', async () => {\n    service.track(el);\n    // No loader yet.\n    expect(getLoader()).to.not.exist;\n\n    // Observe out-of-viewport.\n    io.record({\n      target: el,\n      isIntersecting: false,\n      boundingClientRect: {\n        width: 100,\n        height: 100\n      }\n    });\n    expect(getLoader()).to.not.exist;\n    expect(loaderService.initializeLoader).to.not.be.called;\n  });","file":"unit/test-loading-indicator.js","skipped":false,"dir":"test"},{"name":"should create the loader on the first in-viewport","suites":[],"updatePoint":{"line":72,"column":55,"index":2011},"line":72,"code":"  it('should create the loader on the first in-viewport', async () => {\n    service.track(el);\n    // No loader yet.\n    expect(getLoader()).to.not.exist;\n\n    // Observe in-viewport.\n    io.record({\n      target: el,\n      isIntersecting: true,\n      boundingClientRect: {\n        width: 100,\n        height: 100\n      }\n    });\n    expect(getLoader()).to.exist;\n    expect(loaderService.initializeLoader).to.be.calledOnce;\n  });","file":"unit/test-loading-indicator.js","skipped":false,"dir":"test"},{"name":"should NOT create the loader when size is too small","suites":[],"updatePoint":{"line":89,"column":57,"index":2444},"line":89,"code":"  it('should NOT create the loader when size is too small', async () => {\n    service.track(el);\n    // No loader yet.\n    expect(getLoader()).to.not.exist;\n\n    // Observe in-viewport.\n    io.record({\n      target: el,\n      isIntersecting: true,\n      boundingClientRect: {\n        width: 1,\n        height: 1\n      }\n    });\n    expect(getLoader()).to.not.exist;\n    expect(loaderService.initializeLoader).to.not.be.called;\n  });","file":"unit/test-loading-indicator.js","skipped":false,"dir":"test"},{"name":"should hide the loader on out-of-viewport","suites":[],"updatePoint":{"line":106,"column":47,"index":2867},"line":106,"code":"  it('should hide the loader on out-of-viewport', async () => {\n    service.track(el);\n    io.record({\n      target: el,\n      isIntersecting: true,\n      boundingClientRect: {\n        width: 100,\n        height: 100\n      }\n    });\n    expect(getLoader()).to.exist;\n    expect(getLoader()).to.not.have.class('amp-hidden');\n    expect(getLoader().firstElementChild).to.have.class('amp-active');\n\n    // Out-of-viewport.\n    io.record({\n      target: el,\n      isIntersecting: false,\n      boundingClientRect: {\n        width: 100,\n        height: 100\n      }\n    });\n    expect(getLoader()).to.have.class('amp-hidden');\n    expect(getLoader().firstElementChild).to.not.have.class('amp-active');\n\n    // In-viewport.\n    io.record({\n      target: el,\n      isIntersecting: true,\n      boundingClientRect: {\n        width: 100,\n        height: 100\n      }\n    });\n    expect(getLoader()).to.not.have.class('amp-hidden');\n    expect(getLoader().firstElementChild).to.have.class('amp-active');\n  });","file":"unit/test-loading-indicator.js","skipped":false,"dir":"test"},{"name":"should cleanup when tracking is stopped","suites":[],"updatePoint":{"line":144,"column":45,"index":3861},"line":144,"code":"  it('should cleanup when tracking is stopped', async () => {\n    service.track(el);\n    io.record({\n      target: el,\n      isIntersecting: true,\n      boundingClientRect: {\n        width: 100,\n        height: 100\n      }\n    });\n    expect(getLoader()).to.exist;\n\n    // Untrack.\n    service.untrack(el);\n    expect(getLoader()).to.not.exist;\n  });","file":"unit/test-loading-indicator.js","skipped":false,"dir":"test"},{"name":"should configure loader as a service element","suites":[],"updatePoint":{"line":160,"column":50,"index":4217},"line":160,"code":"  it('should configure loader as a service element', async () => {\n    // Ensure loader is created.\n    io.record({\n      target: el,\n      isIntersecting: true,\n      boundingClientRect: {\n        width: 100,\n        height: 100\n      }\n    });\n    const loader = getLoader();\n    expect(loader.getAttribute('slot')).to.equal('i-amphtml-svc');\n    expect(loader).to.have.class('i-amphtml-svc');\n  });","file":"unit/test-loading-indicator.js","skipped":false,"dir":"test"},{"name":"should have unique values","suites":["localized string IDs"],"updatePoint":{"line":15,"column":33,"index":637},"line":15,"code":"    it('should have unique values', () => {\n      // Transform string IDs from a map of keys to values to a multimap of\n      // values to a list of keys that have that value.\n      const localizedStringIdKeys = Object.keys(LocalizedStringId_Enum);\n      const valuesToKeys = localizedStringIdKeys.reduce((freq, LocalizedStringIdKey) => {\n        const LocalizedStringIdValue = LocalizedStringId_Enum[LocalizedStringIdKey];\n        if (!freq[LocalizedStringIdValue]) {\n          freq[LocalizedStringIdValue] = [];\n        }\n        freq[LocalizedStringIdValue].push(LocalizedStringIdKey);\n        return freq;\n      }, {});\n\n      // Assert that each of the lists of keys from the created multimap has\n      // exactly one value.\n      const localizedStringIdValues = Object.keys(valuesToKeys);\n      localizedStringIdValues.forEach(value => {\n        const keys = valuesToKeys[value];\n        expect(keys, `${value} is never used in a localized string ID`).to.not.be.empty;\n        expect(keys).to.have.lengthOf(1, `${value} is used as a value for more than one ` + `localized string ID: ${keys}`);\n      });\n    });","file":"unit/test-localization.js","skipped":false,"dir":"test"},{"name":"should get string text","suites":["localization service synchronous"],"updatePoint":{"line":39,"column":30,"index":1813},"line":39,"code":"    it('should get string text', () => {\n      const localizationService = new LocalizationService(win.document.body);\n      localizationService.registerLocalizedStringBundles({\n        'en': {\n          'test_string_id': {\n            string: 'test string content'\n          },\n          'test_string_unwrapped': 'test string in unwrapped format'\n        }\n      });\n      expect(localizationService.getLocalizedString('test_string_id')).to.equal('test string content');\n      expect(localizationService.getLocalizedString('test_string_unwrapped')).to.equal('test string in unwrapped format');\n    });","file":"unit/test-localization.js","skipped":false,"dir":"test"},{"name":"should handle registration of uppercase locales","suites":["localization service synchronous"],"updatePoint":{"line":52,"column":55,"index":2441},"line":52,"code":"    it('should handle registration of uppercase locales', () => {\n      env.win.document.documentElement.setAttribute('lang', 'zh-CN');\n      const localizationService = new LocalizationService(win.document.body);\n      localizationService.registerLocalizedStringBundles({\n        'zh-CN': {\n          '123': {\n            string: '买票'\n          },\n          'test_string_unwrapped': 'test string in unwrapped format'\n        }\n      });\n      expect(localizationService.getLocalizedString('123')).to.equal('买票');\n      expect(localizationService.getLocalizedString('test_string_unwrapped')).to.equal('test string in unwrapped format');\n    });","file":"unit/test-localization.js","skipped":false,"dir":"test"},{"name":"should have language fallbacks","suites":["localization service synchronous"],"updatePoint":{"line":66,"column":38,"index":3069},"line":66,"code":"    it('should have language fallbacks', () => {\n      expect(getLanguageCodesFromString('de-hi-1')).to.deep.equal(['de-hi-1', 'de-hi', 'de', 'default']);\n    });","file":"unit/test-localization.js","skipped":false,"dir":"test"},{"name":"should default to English","suites":["localization service synchronous"],"updatePoint":{"line":69,"column":33,"index":3227},"line":69,"code":"    it('should default to English', () => {\n      expect(getLanguageCodesFromString()).to.deep.equal(['en', 'default']);\n    });","file":"unit/test-localization.js","skipped":false,"dir":"test"},{"name":"should transform strings","suites":["pseudolocales"],"updatePoint":{"line":74,"column":32,"index":3397},"line":74,"code":"    it('should transform strings', () => {\n      const originalStringBundle = {\n        'test_string_id': {\n          string: 'foo'\n        },\n        'test_string_unwrapped': 'unwrapped'\n      };\n      const pseudoLocaleBundle = createPseudoLocale(originalStringBundle, s => `${s} ${s}`);\n      expect(pseudoLocaleBundle['test_string_id']).to.equal('foo foo');\n      expect(pseudoLocaleBundle['test_string_unwrapped']).to.equal('unwrapped unwrapped');\n    });","file":"unit/test-localization.js","skipped":false,"dir":"test"},{"name":"should contain all string IDs from original locale","suites":["pseudolocales"],"updatePoint":{"line":85,"column":58,"index":3884},"line":85,"code":"    it('should contain all string IDs from original locale', () => {\n      const originalStringBundle = {\n        'msg_id_1': {\n          string: 'msg1'\n        },\n        'msg_id_2': {\n          string: 'msg2'\n        },\n        'msg_id_3': {\n          string: 'msg3'\n        },\n        'msg_id_4': {\n          string: 'msg4'\n        },\n        'msg_id_5': {\n          string: 'msg5'\n        }\n      };\n      const pseudoLocaleBundle = createPseudoLocale(originalStringBundle, s => `${s} ${s}`);\n      expect(Object.keys(originalStringBundle)).to.deep.equal(Object.keys(pseudoLocaleBundle));\n    });","file":"unit/test-localization.js","skipped":false,"dir":"test"},{"name":"should set the text content if the bundle is installed for the default language","suites":["localize element async"],"updatePoint":{"line":113,"column":87,"index":4709},"line":113,"code":"    it('should set the text content if the bundle is installed for the default language', async () => {\n      const localizationService = getLocalizationService(win.document.body);\n      localizationService.registerLocalizedStringBundles({\n        'en': {\n          'test_string_id': {\n            string: 'test string content'\n          }\n        }\n      });\n      const element = win.document.createElement('div');\n      element.appendChild(createElementWithAttributes(win.document, 'div', {\n        'i-amphtml-i18n-text-content': 'test_string_id'\n      }));\n      win.document.body.appendChild(element);\n      await localizeTemplate(element, win.document.body);\n      expect(element.textContent).to.equal('test string content');\n    });","file":"unit/test-localization.js","skipped":false,"dir":"test"},{"name":"should set the text content if the bundle is installed for the element language","suites":["localize element async"],"updatePoint":{"line":130,"column":87,"index":5449},"line":130,"code":"    it('should set the text content if the bundle is installed for the element language', async () => {\n      const element = env.win.document.createElement('div');\n      win.document.body.parentElement.setAttribute('lang', 'es');\n      element.appendChild(createElementWithAttributes(win.document, 'div', {\n        'i-amphtml-i18n-text-content': 'test_string_id'\n      }));\n      const localizationService = getLocalizationService(win.document.body);\n      localizationService.registerLocalizedStringBundles({\n        'es': {\n          'test_string_id': {\n            string: 'contenido de prueba'\n          }\n        }\n      });\n      await localizeTemplate(element, win.document.body);\n      expect(element.textContent).to.equal('contenido de prueba');\n    });","file":"unit/test-localization.js","skipped":false,"dir":"test"},{"name":"should set the text content if bundles are installed for fallback language","suites":["localize element async"],"updatePoint":{"line":147,"column":82,"index":6208},"line":147,"code":"    it('should set the text content if bundles are installed for fallback language', async () => {\n      const element = env.win.document.createElement('div');\n      win.document.body.parentElement.setAttribute('lang', 'es-419');\n      element.appendChild(createElementWithAttributes(win.document, 'div', {\n        'i-amphtml-i18n-text-content': 'test_string_id'\n      }));\n      const localizationService = getLocalizationService(win.document.body);\n      localizationService.registerLocalizedStringBundles({\n        'es': {\n          'test_string_id': {\n            string: 'contenido de prueba'\n          }\n        }\n      });\n      await localizeTemplate(element, win.document.body);\n      expect(element.textContent).to.equal('contenido de prueba');\n    });","file":"unit/test-localization.js","skipped":false,"dir":"test"},{"name":"should set the aria-label if the attribute is provided","suites":["localize element async"],"updatePoint":{"line":164,"column":62,"index":6951},"line":164,"code":"    it('should set the aria-label if the attribute is provided', async () => {\n      const localizationService = getLocalizationService(win.document.body);\n      const element = env.win.document.createElement('div');\n      win.document.body.parentElement.setAttribute('lang', 'es');\n      const localizedEl = createElementWithAttributes(win.document, 'div', {\n        'i-amphtml-i18n-aria-label': 'test_string_id'\n      });\n      element.appendChild(localizedEl);\n      localizationService.registerLocalizedStringBundles({\n        'es': {\n          'test_string_id': {\n            string: 'contenido de prueba'\n          }\n        }\n      });\n      await localizeTemplate(element, win.document.body);\n      expect(localizedEl.getAttribute('aria-label')).to.equal('contenido de prueba');\n    });","file":"unit/test-localization.js","skipped":false,"dir":"test"},{"name":"should set the text content if the bundle is installed after localizing","suites":["localize element async"],"updatePoint":{"line":182,"column":79,"index":7763},"line":182,"code":"    it('should set the text content if the bundle is installed after localizing', async () => {\n      const element = env.win.document.createElement('div');\n      win.document.body.parentElement.setAttribute('lang', 'es');\n      element.appendChild(createElementWithAttributes(win.document, 'div', {\n        'i-amphtml-i18n-text-content': 'test_string_id'\n      }));\n      const localizationService = getLocalizationService(win.document.body);\n      localizeTemplate(element, win.document.body);\n      localizationService.registerLocalizedStringBundles({\n        'es': {\n          'test_string_id': {\n            string: 'contenido de prueba'\n          }\n        }\n      });\n      await waitFor(() => element.textContent);\n      expect(element.textContent).to.equal('contenido de prueba');\n    });","file":"unit/test-localization.js","skipped":false,"dir":"test"},{"name":"should use the more specific language registered","suites":["localize element async"],"updatePoint":{"line":200,"column":56,"index":8538},"line":200,"code":"    it('should use the more specific language registered', async () => {\n      const element = env.win.document.createElement('div');\n      win.document.body.parentElement.setAttribute('lang', 'es');\n      const localizedEl = createElementWithAttributes(win.document, 'div', {\n        'i-amphtml-i18n-aria-label': 'test_string_id'\n      });\n      element.appendChild(localizedEl);\n      win.document.body.appendChild(element);\n      const localizationService = getLocalizationService(win.document.body);\n      localizationService.registerLocalizedStringBundles({\n        'default': {\n          'test_string_id': {\n            string: 'test string content'\n          }\n        },\n        'es': {\n          'test_string_id': {\n            string: 'contenido de prueba'\n          }\n        }\n      });\n      await localizeTemplate(element, win.document.body);\n      expect(localizedEl.getAttribute('aria-label')).to.equal('contenido de prueba');\n    });","file":"unit/test-localization.js","skipped":false,"dir":"test"},{"name":"should not update twice the element when a more specific language is registered later","suites":["localize element async"],"updatePoint":{"line":224,"column":93,"index":9526},"line":224,"code":"    it('should not update twice the element when a more specific language is registered later', async () => {\n      const element = env.win.document.createElement('div');\n      win.document.body.setAttribute('lang', 'es');\n      const localizedEl = createElementWithAttributes(win.document, 'div', {\n        'i-amphtml-i18n-aria-label': 'test_string_id'\n      });\n      element.appendChild(localizedEl);\n      const localizationService = getLocalizationService(win.document.body);\n      localizationService.registerLocalizedStringBundles({\n        'default': {\n          'test_string_id': {\n            string: 'test string content'\n          }\n        }\n      });\n      await localizeTemplate(element, win.document.body);\n      localizationService.registerLocalizedStringBundles({\n        'es': {\n          'test_string_id': {\n            string: 'contenido de prueba'\n          }\n        }\n      });\n\n      // Should not localize it in spanish because it was already localized in english.\n      expect(localizedEl.getAttribute('aria-label')).to.equal('test string content');\n    });","file":"unit/test-localization.js","skipped":false,"dir":"test"},{"name":"should take precedence over document language","suites":["viewer language override"],"updatePoint":{"line":262,"column":53,"index":10845},"line":262,"code":"    it('should take precedence over document language', () => {\n      const localizationService = new LocalizationService(win.document.body);\n      localizationService.registerLocalizedStringBundles({\n        'fr': {\n          'test_string_id': {\n            string: 'oui'\n          }\n        },\n        'en': {\n          'test_string_id': {\n            string: 'yes'\n          }\n        }\n      });\n      expect(localizationService.getLocalizedString('test_string_id')).to.equal('oui');\n    });","file":"unit/test-localization.js","skipped":false,"dir":"test"},{"name":"should fall back if string is not found","suites":["viewer language override"],"updatePoint":{"line":278,"column":47,"index":11335},"line":278,"code":"    it('should fall back if string is not found', () => {\n      const localizationService = new LocalizationService(win.document.body);\n      localizationService.registerLocalizedStringBundles({\n        'fr': {\n          'incorrect_test_string_id': {\n            string: 'non'\n          }\n        },\n        'en': {\n          'correct_test_string_id': {\n            string: 'yes'\n          }\n        }\n      });\n      expect(localizationService.getLocalizedString('correct_test_string_id')).to.equal('yes');\n    });","file":"unit/test-localization.js","skipped":false,"dir":"test"},{"name":"should fall back if language code is not registered","suites":["viewer language override"],"updatePoint":{"line":294,"column":59,"index":11863},"line":294,"code":"    it('should fall back if language code is not registered', () => {\n      const localizationService = new LocalizationService(win.document.body);\n      localizationService.registerLocalizedStringBundles({\n        'en': {\n          'test_string_id': {\n            string: 'yes'\n          }\n        }\n      });\n      expect(localizationService.getLocalizedString('test_string_id')).to.equal('yes');\n    });","file":"unit/test-localization.js","skipped":false,"dir":"test"},{"name":"should parse the schema and find the image","suites":[],"updatePoint":{"line":86,"column":48,"index":2423},"line":86,"code":"  it('should parse the schema and find the image', () => {\n    expect(parseSchemaImage(ampdoc.win.document)).to.equal('http://example.com/image.png');\n  });","file":"unit/test-mediasession-helper.js","skipped":false,"dir":"test"},{"name":"should parse the og-image","suites":[],"updatePoint":{"line":89,"column":31,"index":2563},"line":89,"code":"  it('should parse the og-image', () => {\n    expect(parseOgImage(ampdoc.win.document)).to.equal('http://example.com/og-image.png');\n  });","file":"unit/test-mediasession-helper.js","skipped":false,"dir":"test"},{"name":"should parse the favicon","suites":[],"updatePoint":{"line":92,"column":30,"index":2701},"line":92,"code":"  it('should parse the favicon', () => {\n    expect(parseFavicon(ampdoc.win.document)).to.equal('http://example.com/favicon.ico');\n  });","file":"unit/test-mediasession-helper.js","skipped":false,"dir":"test"},{"name":"should set the media session","suites":[],"updatePoint":{"line":95,"column":34,"index":2842},"line":95,"code":"  it('should set the media session', () => {\n    expect(ampdoc.win.navigator.mediaSession.metadata).to.deep.equal({\n      'artist': '',\n      'album': '',\n      'artwork': [],\n      'title': ''\n    });\n    const fakeMetaData = {\n      'artist': 'Some artist',\n      'album': 'Some album',\n      'artwork': ['http://example.com/image.png'],\n      'title': 'Some title'\n    };\n    setMediaSession(ampdoc.win, fakeMetaData);\n    const newMetaData = ampdoc.win.navigator.mediaSession.metadata;\n    expect(newMetaData).to.deep.equal(fakeMetaData);\n  });","file":"unit/test-mediasession-helper.js","skipped":false,"dir":"test"},{"name":"validate correct metadata","suites":[],"updatePoint":{"line":112,"column":31,"index":3388},"line":112,"code":"  it('validate correct metadata', () => {\n    expect(() => validateMediaMetadata(element, {\n      'artist': 'Some artist',\n      'album': 'Some album',\n      'artwork': ['http://example.com/image.png'],\n      'title': 'Some title'\n    })).to.not.throw();\n  });","file":"unit/test-mediasession-helper.js","skipped":false,"dir":"test"},{"name":"should throw if artwork src is invalid - object","suites":[],"updatePoint":{"line":120,"column":53,"index":3671},"line":120,"code":"  it('should throw if artwork src is invalid - object', () => {\n    const fakeMetaData = {\n      'artist': '',\n      'album': '',\n      'artwork': [/*eslint no-script-url: 0*/\n      {\n        'src': 'javascript://alert(1)'\n      }],\n      'title': ''\n    };\n    return allowConsoleError(() => {\n      expect(() => {\n        validateMediaMetadata(element, fakeMetaData);\n      }).to.throw();\n    });\n  });","file":"unit/test-mediasession-helper.js","skipped":false,"dir":"test"},{"name":"should throw if artwork src is invalid - string","suites":[],"updatePoint":{"line":136,"column":53,"index":4076},"line":136,"code":"  it('should throw if artwork src is invalid - string', () => {\n    const fakeMetaData = {\n      'artist': '',\n      'album': '',\n      'artwork': [/*eslint no-script-url: 0*/\n      'javascript://alert(1)'],\n      'title': ''\n    };\n    return allowConsoleError(() => {\n      expect(() => {\n        validateMediaMetadata(element, fakeMetaData);\n      }).to.throw();\n    });\n  });","file":"unit/test-mediasession-helper.js","skipped":false,"dir":"test"},{"name":"should throw if artwork is not array","suites":[],"updatePoint":{"line":150,"column":42,"index":4445},"line":150,"code":"  it('should throw if artwork is not array', () => {\n    const fakeMetaData = {\n      'artist': '',\n      'album': '',\n      'artwork': 'https://NotArray',\n      'title': ''\n    };\n    return allowConsoleError(() => {\n      expect(() => {\n        validateMediaMetadata(element, fakeMetaData);\n      }).to.throw();\n    });\n  });","file":"unit/test-mediasession-helper.js","skipped":false,"dir":"test"},{"name":"should return all siblings","suites":["getElementsToAriaHide"],"updatePoint":{"line":25,"column":34,"index":700},"line":25,"code":"    it('should return all siblings', () => {\n      const root = html`\n        <div>\n          <div class=\"to-hide\"></div>\n          <div id=\"target\"></div>\n          <div class=\"to-hide\"></div>\n        </div>\n      `;\n      const target = root.querySelector('#target');\n      const toHide = root.querySelectorAll('.to-hide');\n      const nodes = getElementsToAriaHide(target);\n      expect(nodes).to.have.members(toArray(toHide));\n    });","file":"unit/test-modal.js","skipped":false,"dir":"test"},{"name":"should return aunts/uncles","suites":["getElementsToAriaHide"],"updatePoint":{"line":38,"column":34,"index":1139},"line":38,"code":"    it('should return aunts/uncles', () => {\n      const root = html`\n        <div>\n          <div class=\"to-hide\"></div>\n          <div>\n            <div class=\"to-hide\"></div>\n            <div>\n              <div id=\"target\"></div>\n            </div>\n            <div class=\"to-hide\"></div>\n          </div>\n          <div class=\"to-hide\"></div>\n        </div>\n      `;\n      const target = root.querySelector('#target');\n      const toHide = root.querySelectorAll('.to-hide');\n      const nodes = getElementsToAriaHide(target);\n      expect(nodes).to.have.members(toArray(toHide));\n    });","file":"unit/test-modal.js","skipped":false,"dir":"test"},{"name":"should not return children","suites":["getElementsToAriaHide"],"updatePoint":{"line":57,"column":34,"index":1732},"line":57,"code":"    it('should not return children', () => {\n      const root = html`\n        <div>\n          <div id=\"target\">\n            <div></div>\n          </div>\n        </div>\n      `;\n      const target = root.querySelector('#target');\n      const toHide = root.querySelectorAll('.to-hide');\n      const nodes = getElementsToAriaHide(target);\n      expect(nodes).to.have.members(toArray(toHide));\n    });","file":"unit/test-modal.js","skipped":false,"dir":"test"},{"name":"should not return cousins","suites":["getElementsToAriaHide"],"updatePoint":{"line":70,"column":33,"index":2129},"line":70,"code":"    it('should not return cousins', () => {\n      const root = html`\n        <div>\n          <div class=\"to-hide\">\n            <div></div>\n          </div>\n          <div>\n            <div id=\"target\"></div>\n          </div>\n        </div>\n      `;\n      const target = root.querySelector('#target');\n      const toHide = root.querySelectorAll('.to-hide');\n      const nodes = getElementsToAriaHide(target);\n      expect(nodes).to.have.members(toArray(toHide));\n    });","file":"unit/test-modal.js","skipped":false,"dir":"test"},{"name":"should hide via aria for elements without aria-hidden","suites":["setModalAsOpen"],"updatePoint":{"line":88,"column":61,"index":2670},"line":88,"code":"    it('should hide via aria for elements without aria-hidden', () => {\n      const root = container.appendChild(html`\n        <div>\n          <div class=\"to-hide\">\n            <div></div>\n          </div>\n          <div>\n            <div class=\"to-hide\"></div>\n            <div id=\"target\"></div>\n          </div>\n        </div>\n      `);\n      const target = root.querySelector('#target');\n      try {\n        setModalAsOpen(target);\n        const toHide = root.querySelectorAll('.to-hide');\n        const ariaHidden = root.querySelectorAll('[aria-hidden=\"true\"]');\n        expect(toArray(ariaHidden)).to.have.members(toArray(toHide));\n      } finally {\n        setModalAsClosed(target);\n      }\n    });","file":"unit/test-modal.js","skipped":false,"dir":"test"},{"name":"should hide via aria for elements with aria-hidden=\"true\"","suites":["setModalAsOpen"],"updatePoint":{"line":110,"column":65,"index":3380},"line":110,"code":"    it('should hide via aria for elements with aria-hidden=\"true\"', () => {\n      const root = container.appendChild(html`\n        <div>\n          <div class=\"to-hide\" aria-hidden=\"true\">\n            <div></div>\n          </div>\n          <div>\n            <div class=\"to-hide\" aria-hidden=\"true\"></div>\n            <div id=\"target\"></div>\n          </div>\n        </div>\n      `);\n      const target = root.querySelector('#target');\n      try {\n        setModalAsOpen(target);\n        const toHide = root.querySelectorAll('.to-hide');\n        const ariaHidden = root.querySelectorAll('[aria-hidden=\"true\"]');\n        expect(toArray(ariaHidden)).to.have.members(toArray(toHide));\n      } finally {\n        setModalAsClosed(target);\n      }\n    });","file":"unit/test-modal.js","skipped":false,"dir":"test"},{"name":"should hide via aria for elements with aria-hidden=\"false\"","suites":["setModalAsOpen"],"updatePoint":{"line":132,"column":66,"index":4129},"line":132,"code":"    it('should hide via aria for elements with aria-hidden=\"false\"', () => {\n      const root = container.appendChild(html`\n        <div>\n          <div class=\"to-hide\" aria-hidden=\"false\">\n            <div></div>\n          </div>\n          <div>\n            <div class=\"to-hide\" aria-hidden=\"false\"></div>\n            <div id=\"target\"></div>\n          </div>\n        </div>\n      `);\n      const target = root.querySelector('#target');\n      try {\n        setModalAsOpen(target);\n        const toHide = root.querySelectorAll('.to-hide');\n        const ariaHidden = root.querySelectorAll('[aria-hidden=\"true\"]');\n        expect(toArray(ariaHidden)).to.have.members(toArray(toHide));\n      } finally {\n        setModalAsClosed(target);\n      }\n    });","file":"unit/test-modal.js","skipped":false,"dir":"test"},{"name":"should unhide ancestors","suites":["setModalAsOpen"],"updatePoint":{"line":154,"column":31,"index":4845},"line":154,"code":"    it('should unhide ancestors', () => {\n      const root = container.appendChild(html`\n        <div aria-hidden=\"true\">\n          <div>\n            <div></div>\n          </div>\n          <div aria-hidden=\"true\">\n            <div aria-hidden=\"true\"></div>\n            <div id=\"target\"></div>\n          </div>\n        </div>\n      `);\n      const target = root.querySelector('#target');\n      try {\n        setModalAsOpen(target);\n        const targetWithHiddenAncestor = root.querySelector('[aria-hidden=\"true\"] #target');\n        expect(targetWithHiddenAncestor).to.be.null;\n      } finally {\n        setModalAsClosed(target);\n      }\n    });","file":"unit/test-modal.js","skipped":false,"dir":"test"},{"name":"should hide elements outside of the containing ShadowRoot","suites":["setModalAsOpen"],"updatePoint":{"line":175,"column":65,"index":5524},"line":175,"code":"    it('should hide elements outside of the containing ShadowRoot', () => {\n      if (!('attachShadow' in HTMLElement.prototype)) {\n        return;\n      }\n      const outerRoot = container.appendChild(html`\n        <div>\n          <div class=\"expected\"></div>\n          <div id=\"target\"></div>\n        </div>\n      `);\n      const shadowRoot = outerRoot.querySelector('#target').attachShadow({\n        mode: 'open'\n      });\n      const innerRoot = shadowRoot.appendChild(html`\n        <div>\n          <div id=\"target\"></div>\n        </div>\n      `);\n      const target = innerRoot.querySelector('#target');\n      try {\n        setModalAsOpen(target);\n        const expected = outerRoot.querySelectorAll('.expected');\n        const actual = outerRoot.querySelectorAll('[aria-hidden=\"true\"]');\n        expect(toArray(actual)).to.have.members(toArray(expected));\n      } finally {\n        setModalAsClosed(target);\n      }\n    });","file":"unit/test-modal.js","skipped":false,"dir":"test"},{"name":"should make elements outside of the tree non-tabbable","suites":["setModalAsOpen"],"updatePoint":{"line":203,"column":61,"index":6450},"line":203,"code":"    it('should make elements outside of the tree non-tabbable', () => {\n      const root = container.appendChild(html`\n        <div aria-hidden=\"true\">\n          <div>\n            <button class=\"expected\"></button>\n            <a class=\"expected\" href=\"#foo\">bar</a>\n          </div>\n          <div>\n            <div class=\"expected\" tabindex=\"0\">Hello</div>\n            <div id=\"target\">\n              <a href=\"#foo\">bar</a>\n            </div>\n          </div>\n        </div>\n      `);\n      const target = root.querySelector('#target');\n      try {\n        setModalAsOpen(target);\n        const actual = root.querySelectorAll('[tabindex=\"-1\"]');\n        const expected = root.querySelectorAll('.expected');\n        expect(toArray(actual)).to.have.members(toArray(expected));\n      } finally {\n        setModalAsClosed(target);\n      }\n    });","file":"unit/test-modal.js","skipped":false,"dir":"test"},{"name":"should make elements outside of the ShadowRoot non-tabbable","suites":["setModalAsOpen"],"updatePoint":{"line":228,"column":67,"index":7301},"line":228,"code":"    it('should make elements outside of the ShadowRoot non-tabbable', () => {\n      if (!('attachShadow' in HTMLElement.prototype)) {\n        return;\n      }\n      const outerRoot = container.appendChild(html`\n        <div>\n          <div class=\"expected\" tabindex=\"1\"></div>\n          <div id=\"target\"></div>\n        </div>\n      `);\n      const shadowRoot = outerRoot.querySelector('#target').attachShadow({\n        mode: 'open'\n      });\n      const innerRoot = shadowRoot.appendChild(html`\n        <div>\n          <div id=\"target\"></div>\n        </div>\n      `);\n      const target = innerRoot.querySelector('#target');\n      try {\n        setModalAsOpen(target);\n        const expected = outerRoot.querySelectorAll('.expected');\n        const actual = outerRoot.querySelectorAll('[tabindex=\"-1\"]');\n        expect(toArray(actual)).to.have.members(toArray(expected));\n      } finally {\n        setModalAsClosed(target);\n      }\n    });","file":"unit/test-modal.js","skipped":false,"dir":"test"},{"name":"should remove aria-hidden for elements without it","suites":["setModalAsClosed"],"updatePoint":{"line":258,"column":57,"index":8276},"line":258,"code":"    it('should remove aria-hidden for elements without it', () => {\n      const root = container.appendChild(html`\n        <div>\n          <div>\n            <div></div>\n          </div>\n          <div>\n            <div></div>\n            <div id=\"target\"></div>\n          </div>\n        </div>\n      `);\n      const target = root.querySelector('#target');\n      setModalAsOpen(target);\n      setModalAsClosed(target);\n      const ariaHidden = root.querySelectorAll('[aria-hidden]');\n      expect(toArray(ariaHidden)).to.be.empty;\n    });","file":"unit/test-modal.js","skipped":false,"dir":"test"},{"name":"should restore aria-hidden=\"true\"","suites":["setModalAsClosed"],"updatePoint":{"line":276,"column":41,"index":8798},"line":276,"code":"    it('should restore aria-hidden=\"true\"', () => {\n      const root = container.appendChild(html`\n        <div>\n          <div class=\"expected\" aria-hidden=\"true\">\n            <div></div>\n          </div>\n          <div>\n            <div></div>\n            <div id=\"target\"></div>\n          </div>\n        </div>\n      `);\n      const target = root.querySelector('#target');\n      setModalAsOpen(target);\n      setModalAsClosed(target);\n      const expected = root.querySelectorAll('.expected');\n      const ariaHiddenTrue = root.querySelectorAll('[aria-hidden=\"true\"]');\n      expect(toArray(ariaHiddenTrue)).to.have.members(toArray(expected));\n    });","file":"unit/test-modal.js","skipped":false,"dir":"test"},{"name":"should restore aria-hidden=\"false\"","suites":["setModalAsClosed"],"updatePoint":{"line":295,"column":42,"index":9454},"line":295,"code":"    it('should restore aria-hidden=\"false\"', () => {\n      const root = container.appendChild(html`\n        <div>\n          <div class=\"expected\" aria-hidden=\"false\">\n            <div></div>\n          </div>\n          <div>\n            <div></div>\n            <div id=\"target\"></div>\n          </div>\n        </div>\n      `);\n      const target = root.querySelector('#target');\n      setModalAsOpen(target);\n      setModalAsClosed(target);\n      const expected = root.querySelectorAll('.expected');\n      const ariaHiddenFalse = root.querySelectorAll('[aria-hidden=\"false\"]');\n      expect(toArray(ariaHiddenFalse)).to.have.members(toArray(expected));\n    });","file":"unit/test-modal.js","skipped":false,"dir":"test"},{"name":"should clear tabindex if none was present","suites":["setModalAsClosed"],"updatePoint":{"line":314,"column":49,"index":10121},"line":314,"code":"    it('should clear tabindex if none was present', () => {\n      const root = container.appendChild(html`\n        <div>\n          <div>\n            <button class=\"expected\"></button>\n            <a class=\"expected\" href=\"#foo\">bar</a>\n          </div>\n          <div>\n            <div id=\"target\">\n              <a href=\"#foo\" tabindex=\"0\">bar</a>\n            </div>\n          </div>\n        </div>\n      `);\n      const target = root.querySelector('#target');\n      setModalAsOpen(target);\n      setModalAsClosed(target);\n      const actual = root.querySelectorAll(':not([tabindex])');\n      const expected = root.querySelectorAll('.expected');\n      expect(toArray(actual)).to.include.members(toArray(expected));\n    });","file":"unit/test-modal.js","skipped":false,"dir":"test"},{"name":"should restore tabindex","suites":["setModalAsClosed"],"updatePoint":{"line":335,"column":31,"index":10827},"line":335,"code":"    it('should restore tabindex', () => {\n      const root = container.appendChild(html`\n        <div>\n          <div class=\"expected\" tabindex=\"0\">Hello</div>\n          <div id=\"target\">\n            <a href=\"#foo\">bar</a>\n          </div>\n        </div>\n      `);\n      const target = root.querySelector('#target');\n      setModalAsOpen(target);\n      setModalAsClosed(target);\n      const actual = root.querySelectorAll('[tabindex=\"0\"]');\n      const expected = root.querySelectorAll('.expected');\n      expect(toArray(actual)).to.have.members(toArray(expected));\n    });","file":"unit/test-modal.js","skipped":false,"dir":"test"},{"name":"should handle nested opens for aria-hidden","suites":["nested opens/closes"],"updatePoint":{"line":353,"column":50,"index":11468},"line":353,"code":"    it('should handle nested opens for aria-hidden', () => {\n      const root = container.appendChild(html`\n        <div>\n          <div id=\"targetOneParent\">\n            <div id=\"targetOne\"></div>\n          </div>\n          <div id=\"targetTwoParent\">\n            <div id=\"targetTwo\"></div>\n          </div>\n          <div id=\"otherElement\"></div>\n        </div>\n      `);\n      const targetOne = root.querySelector('#targetOne');\n      const targetTwo = root.querySelector('#targetTwo');\n      const targetOneParent = root.querySelector('#targetOneParent');\n      const targetTwoParent = root.querySelector('#targetTwoParent');\n      const otherElement = root.querySelector('#otherElement');\n      setModalAsOpen(targetOne);\n      expect(root.getAttribute('aria-hidden')).to.equal(null);\n      expect(targetOneParent.getAttribute('aria-hidden')).to.equal(null);\n      expect(targetTwoParent.getAttribute('aria-hidden')).to.equal('true');\n      expect(otherElement.getAttribute('aria-hidden')).to.equal('true');\n      setModalAsOpen(targetTwo);\n      expect(root.getAttribute('aria-hidden')).to.equal(null);\n      expect(targetOneParent.getAttribute('aria-hidden')).to.equal('true');\n      expect(targetTwoParent.getAttribute('aria-hidden')).to.equal(null);\n      expect(otherElement.getAttribute('aria-hidden')).to.equal('true');\n      setModalAsClosed(targetTwo);\n      expect(root.getAttribute('aria-hidden')).to.equal(null);\n      expect(targetOneParent.getAttribute('aria-hidden')).to.equal(null);\n      expect(targetTwoParent.getAttribute('aria-hidden')).to.equal('true');\n      expect(otherElement.getAttribute('aria-hidden')).to.equal('true');\n      setModalAsClosed(targetOne);\n      expect(root.getAttribute('aria-hidden')).to.equal(null);\n      expect(targetOneParent.getAttribute('aria-hidden')).to.equal(null);\n      expect(targetTwoParent.getAttribute('aria-hidden')).to.equal(null);\n      expect(otherElement.getAttribute('aria-hidden')).to.equal(null);\n    });","file":"unit/test-modal.js","skipped":false,"dir":"test"},{"name":"should handle nested opens for tabindex","suites":["nested opens/closes"],"updatePoint":{"line":391,"column":47,"index":13442},"line":391,"code":"    it('should handle nested opens for tabindex', () => {\n      const root = container.appendChild(html`\n        <div>\n          <div id=\"targetOne\">\n            <a href=\"#foo\" id=\"targetOneLink\">foo</a>\n          </div>\n          <div id=\"targetTwo\">\n            <a href=\"#foo\" id=\"targetTwoLink\">foo</a>\n          </div>\n          <div id=\"targetThree\">\n            <a href=\"#foo\" id=\"targetThreeLink\">foo</a>\n          </div>\n        </div>\n      `);\n      const targetOne = root.querySelector('#targetOne');\n      const targetTwo = root.querySelector('#targetTwo');\n      const targetOneLink = root.querySelector('#targetOneLink');\n      const targetTwoLink = root.querySelector('#targetTwoLink');\n      const targetThreeLink = root.querySelector('#targetThreeLink');\n      setModalAsOpen(targetOne);\n      expect(root.getAttribute('tabindex')).to.be.null;\n      expect(targetOneLink.getAttribute('tabindex')).to.be.null;\n      expect(targetTwoLink.getAttribute('tabindex')).to.equal('-1');\n      expect(targetThreeLink.getAttribute('tabindex')).to.equal('-1');\n      setModalAsOpen(targetTwo);\n      expect(root.getAttribute('tabindex')).to.be.null;\n      expect(targetOneLink.getAttribute('tabindex')).to.equal('-1');\n      expect(targetTwoLink.getAttribute('tabindex')).to.be.null;\n      expect(targetThreeLink.getAttribute('tabindex')).to.equal('-1');\n      setModalAsClosed(targetTwo);\n      expect(root.getAttribute('tabindex')).to.be.null;\n      expect(targetOneLink.getAttribute('tabindex')).to.be.null;\n      expect(targetTwoLink.getAttribute('tabindex')).to.equal('-1');\n      expect(targetThreeLink.getAttribute('tabindex')).to.equal('-1');\n      setModalAsClosed(targetOne);\n      expect(targetOneLink.getAttribute('tabindex')).to.be.null;\n      expect(targetTwoLink.getAttribute('tabindex')).to.be.null;\n      expect(targetThreeLink.getAttribute('tabindex')).to.be.null;\n    });","file":"unit/test-modal.js","skipped":false,"dir":"test"},{"name":"should support different html formats for development","suites":[],"updatePoint":{"line":10,"column":59,"index":359},"line":10,"code":"  it('should support different html formats for development', () => {\n    let url = 'https://www.amp-site.org#development=1';\n    expect(getMode(getWin(url)).development).to.be.true;\n    url = 'https://www.amp-site.org#development=amp';\n    expect(getMode(getWin(url)).development).to.be.true;\n    url = 'https://www.amp-site.org#development=amp4email';\n    expect(getMode(getWin(url)).development).to.be.true;\n    url = 'https://www.amp-site.org#development=amp4ads';\n    expect(getMode(getWin(url)).development).to.be.true;\n    url = 'https://www.amp-site.org#development=actions';\n    expect(getMode(getWin(url)).development).to.be.true;\n  });","file":"unit/test-mode.js","skipped":false,"dir":"test"},{"name":"should not support invalid format for development","suites":[],"updatePoint":{"line":22,"column":55,"index":1002},"line":22,"code":"  it('should not support invalid format for development', () => {\n    const url = 'https://www.amp-site.org#development=amp4invalid';\n    expect(getMode(getWin(url)).development).to.be.false;\n  });","file":"unit/test-mode.js","skipped":false,"dir":"test"},{"name":"should default to version","suites":[],"updatePoint":{"line":31,"column":31,"index":1288},"line":31,"code":"  it('should default to version', () => {\n    // $internalRuntimeVersion$ doesn't get replaced during test\n    expect(getRtvVersionForTesting(window)).to.equal('01$internalRuntimeVersion$');\n  });","file":"unit/test-mode.js","skipped":false,"dir":"test"},{"name":"should use window.AMP_CONFIG.v","suites":[],"updatePoint":{"line":35,"column":36,"index":1490},"line":35,"code":"  it('should use window.AMP_CONFIG.v', () => {\n    const win = {\n      AMP_CONFIG: {\n        v: '12345',\n        test: true\n      },\n      location: parseUrlDeprecated('https://acme.org/doc1')\n    };\n    expect(getRtvVersionForTesting(win)).to.equal('12345');\n  });","file":"unit/test-mode.js","skipped":false,"dir":"test"},{"name":"should dampen velocity when prevVelocity is 0","suites":[],"updatePoint":{"line":3,"column":51,"index":172},"line":3,"code":"  it('should dampen velocity when prevVelocity is 0', () => {\n    expect(calcVelocity(200, 10, 0)).to.be.closeTo(15.999, 1e-3);\n  });","file":"unit/test-motion.js","skipped":false,"dir":"test"},{"name":"should not affect velocity when prevVelocity the same","suites":[],"updatePoint":{"line":6,"column":59,"index":314},"line":6,"code":"  it('should not affect velocity when prevVelocity the same', () => {\n    expect(calcVelocity(200, 10, 20)).to.be.closeTo(20, 1e-3);\n  });","file":"unit/test-motion.js","skipped":false,"dir":"test"},{"name":"should slow down deceleration when prevVelocity is available","suites":[],"updatePoint":{"line":9,"column":66,"index":460},"line":9,"code":"  it('should slow down deceleration when prevVelocity is available', () => {\n    expect(calcVelocity(0, 10, 20)).to.be.closeTo(4.001, 1e-3);\n  });","file":"unit/test-motion.js","skipped":false,"dir":"test"},{"name":"should be zero when both new and old velocity are zero","suites":[],"updatePoint":{"line":12,"column":60,"index":601},"line":12,"code":"  it('should be zero when both new and old velocity are zero', () => {\n    expect(calcVelocity(0, 10, 0)).to.equal(0);\n  });","file":"unit/test-motion.js","skipped":false,"dir":"test"},{"name":"should calculate even when time is zero","suites":[],"updatePoint":{"line":15,"column":45,"index":711},"line":15,"code":"  it('should calculate even when time is zero', () => {\n    expect(calcVelocity(20, 0, 20)).to.be.closeTo(20, 1e-3);\n  });","file":"unit/test-motion.js","skipped":false,"dir":"test"},{"name":"should calculate continuosly","suites":[],"updatePoint":{"line":18,"column":34,"index":823},"line":18,"code":"  it('should calculate continuosly', () => {\n    let v = 0;\n    v = calcVelocity(-11.25, 16, v);\n    expect(v).to.be.closeTo(-0.689, 1e-3);\n    v = calcVelocity(-11.25, 17, v);\n    expect(v).to.be.closeTo(-0.662, 1e-3);\n    v = calcVelocity(-11.25, 18, v);\n    expect(v).to.be.closeTo(-0.625, 1e-3);\n  });","file":"unit/test-motion.js","skipped":false,"dir":"test"},{"name":"should follow positive inertia","suites":[],"updatePoint":{"line":79,"column":36,"index":2654},"line":79,"code":"  it('should follow positive inertia', () => {\n    const values = testContinuation(0.665, 0);\n    expect(values.length).to.equal(12);\n    expect(values[0]).to.be.closeTo(66, 1);\n    expect(values[1]).to.be.closeTo(115, 1);\n    expect(values[2]).to.be.closeTo(151, 1);\n    expect(values[values.length - 2]).to.be.closeTo(243, 1);\n    expect(values[values.length - 1]).to.be.closeTo(245, 1);\n  });","file":"unit/test-motion.js","skipped":false,"dir":"test"},{"name":"should halt when requested while following positive inertia","suites":[],"updatePoint":{"line":88,"column":65,"index":3079},"line":88,"code":"  it('should halt when requested while following positive inertia', () => {\n    const values = testContinuation(0.665, 300);\n    expect(values.length).to.equal(3);\n    expect(values[0]).to.be.closeTo(66, 1);\n    expect(values[1]).to.be.closeTo(115, 1);\n    expect(values[2]).to.be.closeTo(151, 1);\n  });","file":"unit/test-motion.js","skipped":false,"dir":"test"},{"name":"should follow negative inertia","suites":[],"updatePoint":{"line":95,"column":36,"index":3354},"line":95,"code":"  it('should follow negative inertia', () => {\n    const values = testContinuation(-0.665, 0);\n    expect(values.length).to.equal(12);\n    expect(values[0]).to.be.closeTo(-66, 1);\n    expect(values[1]).to.be.closeTo(-115, 1);\n    expect(values[2]).to.be.closeTo(-151, 1);\n    expect(values[values.length - 2]).to.be.closeTo(-243, 1);\n    expect(values[values.length - 1]).to.be.closeTo(-245, 1);\n  });","file":"unit/test-motion.js","skipped":false,"dir":"test"},{"name":"should halt when requested while following negative inertia","suites":[],"updatePoint":{"line":104,"column":65,"index":3785},"line":104,"code":"  it('should halt when requested while following negative inertia', () => {\n    const values = testContinuation(-0.665, 300);\n    expect(values.length).to.equal(3);\n    expect(values[0]).to.be.closeTo(-66, 1);\n    expect(values[1]).to.be.closeTo(-115, 1);\n    expect(values[2]).to.be.closeTo(-151, 1);\n  });","file":"unit/test-motion.js","skipped":false,"dir":"test"},{"name":"should escape html","suites":[],"updatePoint":{"line":13,"column":24,"index":396},"line":13,"code":"  it('should escape html', () => {\n    expect(mustache.render('{{value}}', {\n      value: '<b>abc</b>'\n    })).to.equal('&lt;b&gt;abc&lt;&#x2F;b&gt;');\n  });","file":"unit/test-mustache.js","skipped":false,"dir":"test"},{"name":"should transform unescaped html","suites":[],"updatePoint":{"line":18,"column":37,"index":567},"line":18,"code":"  it('should transform unescaped html', () => {\n    expect(mustache.render('{{{value}}}', {\n      value: '<b>abc</b>'\n    })).to.equal('<B>ABC</B>');\n  });","file":"unit/test-mustache.js","skipped":false,"dir":"test"},{"name":"should only expand own properties","suites":[],"updatePoint":{"line":23,"column":39,"index":725},"line":23,"code":"  it('should only expand own properties', () => {\n    const parent = {\n      value: 'bc'\n    };\n    const child = Object.create(parent);\n    const container = {\n      parent,\n      child\n    };\n    expect(mustache.render('a{{value}}', parent)).to.equal('abc');\n    expect(mustache.render('a{{value}}', child)).to.equal('a');\n    expect(mustache.render('a{{parent.value}}', container)).to.equal('abc');\n    expect(mustache.render('a{{child.value}}', container)).to.equal('a');\n  });","file":"unit/test-mustache.js","skipped":false,"dir":"test"},{"name":"should NOT allow calls to builtin functions","suites":[],"updatePoint":{"line":37,"column":49,"index":1217},"line":37,"code":"  it('should NOT allow calls to builtin functions', () => {\n    // Calls on x.pop in classical Mustache would lead to builtin call and\n    // mutate on the 't' object. Here we will not allow it. We explicitly\n    // prohibit such calls.\n    const obj = {\n      't': {\n        '0': '0',\n        '1': '1',\n        'length': 2,\n        'x': []\n      }\n    };\n    expect(mustache.render('{{#t}}{{x.pop}}X{{x.pop}}{{/t}}{{#t}}{{0}}Y{{1}}{{/t}}', obj)).to.equal('X0Y1');\n  });","file":"unit/test-mustache.js","skipped":false,"dir":"test"},{"name":"should NOT allow delimiter substituion","suites":[],"updatePoint":{"line":51,"column":44,"index":1683},"line":51,"code":"  it('should NOT allow delimiter substituion', () => {\n    expect(mustache.render('{{value}}{{=<% %>=}}<% value %>', {\n      value: 'abc'\n    })).to.equal('abc<% value %>');\n  });","file":"unit/test-mustache.js","skipped":false,"dir":"test"},{"name":"should schedule separate requests","suites":[],"updatePoint":{"line":102,"column":39,"index":3483},"line":102,"code":"  it('should schedule separate requests', () => {\n    mutator.scheduleChangeSize_(resource1, 111, 100, undefined, NO_EVENT, false);\n    mutator.scheduleChangeSize_(resource2, 222, undefined, undefined, NO_EVENT, true);\n    expect(resources.requestsChangeSize_.length).to.equal(2);\n    expect(resources.requestsChangeSize_[0].resource).to.equal(resource1);\n    expect(resources.requestsChangeSize_[0].newHeight).to.equal(111);\n    expect(resources.requestsChangeSize_[0].newWidth).to.equal(100);\n    expect(resources.requestsChangeSize_[0].force).to.equal(false);\n    expect(resources.requestsChangeSize_[1].resource).to.equal(resource2);\n    expect(resources.requestsChangeSize_[1].newHeight).to.equal(222);\n    expect(resources.requestsChangeSize_[1].newWidth).to.be.undefined;\n    expect(resources.requestsChangeSize_[1].force).to.equal(true);\n  });","file":"unit/test-mutator.js","skipped":false,"dir":"test"},{"name":"should schedule height only size change","suites":[],"updatePoint":{"line":115,"column":45,"index":4341},"line":115,"code":"  it('should schedule height only size change', () => {\n    mutator.scheduleChangeSize_(resource1, 111, undefined, undefined, NO_EVENT, false);\n    expect(resources.requestsChangeSize_.length).to.equal(1);\n    expect(resources.requestsChangeSize_[0].resource).to.equal(resource1);\n    expect(resources.requestsChangeSize_[0].newHeight).to.equal(111);\n    expect(resources.requestsChangeSize_[0].newWidth).to.be.undefined;\n    expect(resources.requestsChangeSize_[0].newMargins).to.be.undefined;\n    expect(resources.requestsChangeSize_[0].force).to.equal(false);\n  });","file":"unit/test-mutator.js","skipped":false,"dir":"test"},{"name":"should remove request change size for unloaded resources","suites":[],"updatePoint":{"line":124,"column":62,"index":4927},"line":124,"code":"  it('should remove request change size for unloaded resources', () => {\n    mutator.scheduleChangeSize_(resource1, 111, undefined, undefined, NO_EVENT, false);\n    mutator.scheduleChangeSize_(resource2, 111, undefined, undefined, NO_EVENT, false);\n    expect(resources.requestsChangeSize_.length).to.equal(2);\n    resource1.state_ = ResourceState_Enum.LAYOUT_SCHEDULED;\n    resource1.unlayout();\n    resources.cleanupTasks_(resource1);\n    expect(resources.requestsChangeSize_.length).to.equal(1);\n    expect(resources.requestsChangeSize_[0].resource).to.equal(resource2);\n  });","file":"unit/test-mutator.js","skipped":false,"dir":"test"},{"name":"should schedule width only size change","suites":[],"updatePoint":{"line":134,"column":44,"index":5489},"line":134,"code":"  it('should schedule width only size change', () => {\n    mutator.scheduleChangeSize_(resource1, undefined, 111, undefined, NO_EVENT, false);\n    expect(resources.requestsChangeSize_.length).to.equal(1);\n    expect(resources.requestsChangeSize_[0].resource).to.equal(resource1);\n    expect(resources.requestsChangeSize_[0].newWidth).to.equal(111);\n    expect(resources.requestsChangeSize_[0].newHeight).to.be.undefined;\n    expect(resources.requestsChangeSize_[0].marginChange).to.be.undefined;\n    expect(resources.requestsChangeSize_[0].force).to.equal(false);\n  });","file":"unit/test-mutator.js","skipped":false,"dir":"test"},{"name":"should schedule margin only size change","suites":[],"updatePoint":{"line":143,"column":45,"index":6060},"line":143,"code":"  it('should schedule margin only size change', () => {\n    mutator.scheduleChangeSize_(resource1, undefined, undefined, {\n      top: 1,\n      right: 2,\n      bottom: 3,\n      left: 4\n    }, NO_EVENT, false);\n    resources.vsync_.runScheduledTasks_();\n    expect(resources.requestsChangeSize_.length).to.equal(1);\n    expect(resources.requestsChangeSize_[0].resource).to.equal(resource1);\n    expect(resources.requestsChangeSize_[0].newWidth).to.be.undefined;\n    expect(resources.requestsChangeSize_[0].newHeight).to.be.undefined;\n    expect(resources.requestsChangeSize_[0].marginChange).to.eql({\n      newMargins: {\n        top: 1,\n        right: 2,\n        bottom: 3,\n        left: 4\n      },\n      currentMargins: {\n        top: 0,\n        right: 0,\n        bottom: 0,\n        left: 0\n      }\n    });\n    expect(resources.requestsChangeSize_[0].force).to.equal(false);\n  });","file":"unit/test-mutator.js","skipped":false,"dir":"test"},{"name":"should only schedule latest request for the same resource","suites":[],"updatePoint":{"line":171,"column":63,"index":6958},"line":171,"code":"  it('should only schedule latest request for the same resource', () => {\n    mutator.scheduleChangeSize_(resource1, 111, 100, undefined, NO_EVENT, true);\n    mutator.scheduleChangeSize_(resource1, 222, 300, undefined, NO_EVENT, false);\n    expect(resources.requestsChangeSize_.length).to.equal(1);\n    expect(resources.requestsChangeSize_[0].resource).to.equal(resource1);\n    expect(resources.requestsChangeSize_[0].newHeight).to.equal(222);\n    expect(resources.requestsChangeSize_[0].newWidth).to.equal(300);\n    expect(resources.requestsChangeSize_[0].force).to.equal(true);\n  });","file":"unit/test-mutator.js","skipped":false,"dir":"test"},{"name":"should NOT change size if it didn't change","suites":[],"updatePoint":{"line":180,"column":48,"index":7529},"line":180,"code":"  it(\"should NOT change size if it didn't change\", () => {\n    mutator.scheduleChangeSize_(resource1, 100, 100, undefined, NO_EVENT, true);\n    resources.mutateWork_();\n    expect(resources.relayoutTop_).to.equal(-1);\n    expect(resources.requestsChangeSize_.length).to.equal(0);\n    expect(resource1.changeSize).to.have.not.been.called;\n  });","file":"unit/test-mutator.js","skipped":false,"dir":"test"},{"name":"should change size","suites":[],"updatePoint":{"line":187,"column":24,"index":7849},"line":187,"code":"  it('should change size', () => {\n    mutator.scheduleChangeSize_(resource1, 111, 222, undefined, NO_EVENT, true);\n    resources.mutateWork_();\n    expect(resources.relayoutTop_).to.equal(resource1.layoutBox_.top);\n    expect(resources.requestsChangeSize_.length).to.equal(0);\n    expect(resource1.changeSize).to.be.calledOnce;\n    expect(resource1.changeSize.firstCall.args[0]).to.equal(111);\n    expect(resource1.changeSize.firstCall.args[1]).to.equal(222);\n  });","file":"unit/test-mutator.js","skipped":false,"dir":"test"},{"name":"should change size when only width changes","suites":[],"updatePoint":{"line":196,"column":48,"index":8340},"line":196,"code":"  it('should change size when only width changes', () => {\n    mutator.scheduleChangeSize_(resource1, 111, 100, undefined, NO_EVENT, true);\n    resources.mutateWork_();\n    expect(resource1.changeSize).to.be.calledOnce;\n    expect(resource1.changeSize.firstCall).to.have.been.calledWith(111, 100);\n  });","file":"unit/test-mutator.js","skipped":false,"dir":"test"},{"name":"should change size when only height changes","suites":[],"updatePoint":{"line":202,"column":49,"index":8645},"line":202,"code":"  it('should change size when only height changes', () => {\n    mutator.scheduleChangeSize_(resource1, 100, 111, undefined, NO_EVENT, true);\n    resources.mutateWork_();\n    expect(resource1.changeSize).to.be.calledOnce;\n    expect(resource1.changeSize.firstCall).to.have.been.calledWith(100, 111);\n  });","file":"unit/test-mutator.js","skipped":false,"dir":"test"},{"name":"should pick the smallest relayoutTop","suites":[],"updatePoint":{"line":208,"column":42,"index":8943},"line":208,"code":"  it('should pick the smallest relayoutTop', () => {\n    mutator.scheduleChangeSize_(resource2, 111, 222, undefined, NO_EVENT, true);\n    mutator.scheduleChangeSize_(resource1, 111, 222, undefined, NO_EVENT, true);\n    resources.mutateWork_();\n    expect(resources.relayoutTop_).to.equal(resource1.layoutBox_.top);\n  });","file":"unit/test-mutator.js","skipped":false,"dir":"test"},{"name":"should measure non-measured elements","suites":[],"updatePoint":{"line":214,"column":42,"index":9264},"line":214,"code":"  it('should measure non-measured elements', () => {\n    resource1.initialLayoutBox_ = null;\n    resource1.measure = env.sandbox.spy();\n    resource2.measure = env.sandbox.spy();\n    mutator.scheduleChangeSize_(resource1, 111, 200, undefined, NO_EVENT, true);\n    mutator.scheduleChangeSize_(resource2, 111, 222, undefined, NO_EVENT, true);\n    expect(resource1.hasBeenMeasured()).to.be.false;\n    expect(resource2.hasBeenMeasured()).to.be.true;\n\n    // Not yet scheduled, will wait until vsync.\n    expect(resource1.measure).to.not.be.called;\n\n    // Scheduling is done after vsync.\n    resources.vsync_.runScheduledTasks_();\n    expect(resource1.measure).to.be.calledOnce;\n    expect(resource2.measure).to.not.be.called;\n\n    // Notice that the `resource2` was scheduled first since it didn't\n    // require vsync.\n    expect(resources.requestsChangeSize_).to.have.length(2);\n    expect(resources.requestsChangeSize_[0].resource).to.equal(resource2);\n    expect(resources.requestsChangeSize_[1].resource).to.equal(resource1);\n  });","file":"unit/test-mutator.js","skipped":false,"dir":"test"},{"name":"should NOT change size when height is unchanged","suites":["requestChangeSize rules wrt viewport"],"updatePoint":{"line":262,"column":55,"index":11003},"line":262,"code":"    it('should NOT change size when height is unchanged', () => {\n      const callback = env.sandbox.spy();\n      resource1.layoutBox_ = {\n        top: 10,\n        left: 0,\n        right: 100,\n        bottom: 210,\n        height: 50\n      };\n      mutator.scheduleChangeSize_(resource1, 50, /* width */undefined, undefined, NO_EVENT, false, callback);\n      resources.mutateWork_();\n      expect(resource1.changeSize).to.not.been.called;\n      expect(overflowCallbackSpy).to.not.been.called;\n      expect(callback).to.be.calledOnce;\n      expect(callback.args[0][0]).to.be.true;\n    });","file":"unit/test-mutator.js","skipped":false,"dir":"test"},{"name":"should NOT change size when height and margins are unchanged","suites":["requestChangeSize rules wrt viewport"],"updatePoint":{"line":278,"column":68,"index":11603},"line":278,"code":"    it('should NOT change size when height and margins are unchanged', () => {\n      const callback = env.sandbox.spy();\n      resource1.layoutBox_ = {\n        top: 10,\n        left: 0,\n        right: 100,\n        bottom: 210,\n        height: 50\n      };\n      resource1.element.fakeComputedStyle = {\n        marginTop: '1px',\n        marginRight: '2px',\n        marginBottom: '3px',\n        marginLeft: '4px'\n      };\n      mutator.scheduleChangeSize_(resource1, 50, /* width */undefined, {\n        top: 1,\n        right: 2,\n        bottom: 3,\n        left: 4\n      }, NO_EVENT, false, callback);\n      expect(vsyncSpy).to.be.calledOnce;\n      const task = vsyncSpy.lastCall.args[0];\n      task.measure({});\n      resources.mutateWork_();\n      expect(resource1.changeSize).to.not.been.called;\n      expect(overflowCallbackSpy).to.not.been.called;\n      expect(callback).to.be.calledOnce;\n      expect(callback.args[0][0]).to.be.true;\n    });","file":"unit/test-mutator.js","skipped":false,"dir":"test"},{"name":"should change size when margins but not height changed","suites":["requestChangeSize rules wrt viewport"],"updatePoint":{"line":308,"column":62,"index":12541},"line":308,"code":"    it('should change size when margins but not height changed', () => {\n      const callback = env.sandbox.spy();\n      resource1.layoutBox_ = {\n        top: 10,\n        left: 0,\n        right: 100,\n        bottom: 210,\n        height: 50\n      };\n      resource1.element.fakeComputedStyle = {\n        marginTop: '1px',\n        marginRight: '2px',\n        marginBottom: '3px',\n        marginLeft: '4px'\n      };\n      mutator.scheduleChangeSize_(resource1, 50, /* width */undefined, {\n        top: 1,\n        right: 2,\n        bottom: 4,\n        left: 4\n      }, NO_EVENT, false, callback);\n      expect(vsyncSpy).to.be.calledOnce;\n      const task = vsyncSpy.lastCall.args[0];\n      task.measure({});\n      resources.mutateWork_();\n      expect(resource1.changeSize).to.be.calledOnce;\n    });","file":"unit/test-mutator.js","skipped":false,"dir":"test"},{"name":"should change size when forced","suites":["requestChangeSize rules wrt viewport"],"updatePoint":{"line":335,"column":38,"index":13312},"line":335,"code":"    it('should change size when forced', () => {\n      mutator.scheduleChangeSize_(resource1, 111, 222, undefined, NO_EVENT, true);\n      resources.mutateWork_();\n      expect(resources.requestsChangeSize_).to.be.empty;\n      expect(resource1.changeSize).to.be.calledOnce;\n      expect(overflowCallbackSpy).to.be.calledOnce;\n      expect(overflowCallbackSpy.firstCall.args[0]).to.equal(false);\n    });","file":"unit/test-mutator.js","skipped":false,"dir":"test"},{"name":"should change size when document is invisible","suites":["requestChangeSize rules wrt viewport"],"updatePoint":{"line":343,"column":53,"index":13729},"line":343,"code":"    it('should change size when document is invisible', () => {\n      resources.visible_ = false;\n      env.sandbox.stub(resources.ampdoc, 'getVisibilityState').returns(VisibilityState_Enum.PRERENDER);\n      mutator.scheduleChangeSize_(resource1, 111, 222, undefined, NO_EVENT, false);\n      resources.mutateWork_();\n      expect(resources.requestsChangeSize_).to.be.empty;\n      expect(resource1.changeSize).to.be.calledOnce;\n      expect(overflowCallbackSpy).to.be.calledOnce;\n      expect(overflowCallbackSpy.firstCall.args[0]).to.equal(false);\n    });","file":"unit/test-mutator.js","skipped":false,"dir":"test"},{"name":"should change size when document is in preview mode","suites":["requestChangeSize rules wrt viewport"],"updatePoint":{"line":353,"column":59,"index":14291},"line":353,"code":"    it('should change size when document is in preview mode', () => {\n      env.sandbox.stub(resources.ampdoc, 'getVisibilityState').returns(VisibilityState_Enum.PREVIEW);\n      mutator.scheduleChangeSize_(resource1, 111, 222, undefined, NO_EVENT, false);\n      resources.mutateWork_();\n      expect(resources.requestsChangeSize_).to.be.empty;\n      expect(resource1.changeSize).to.be.calledOnce;\n      expect(overflowCallbackSpy).to.be.calledOnce;\n      expect(overflowCallbackSpy.firstCall.args[0]).to.equal(false);\n    });","file":"unit/test-mutator.js","skipped":false,"dir":"test"},{"name":"should change size when active","suites":["requestChangeSize rules wrt viewport"],"updatePoint":{"line":362,"column":38,"index":14796},"line":362,"code":"    it('should change size when active', () => {\n      resource1.element.contains = () => true;\n      mutator.scheduleChangeSize_(resource1, 111, 222, undefined, NO_EVENT, false);\n      resources.mutateWork_();\n      expect(resources.requestsChangeSize_).to.be.empty;\n      expect(resource1.changeSize).to.be.calledOnce;\n      expect(overflowCallbackSpy).to.be.calledOnce;\n      expect(overflowCallbackSpy.firstCall.args[0]).to.equal(false);\n    });","file":"unit/test-mutator.js","skipped":false,"dir":"test"},{"name":"should NOT change size via activation if has not been active","suites":["requestChangeSize rules wrt viewport"],"updatePoint":{"line":371,"column":68,"index":15276},"line":371,"code":"    it('should NOT change size via activation if has not been active', () => {\n      viewportMock.expects('getContentHeight').returns(10000).atLeast(0);\n      const event = {\n        userActivation: {\n          hasBeenActive: false\n        }\n      };\n      mutator.scheduleChangeSize_(resource1, 111, 222, undefined, event, false);\n      resources.mutateWork_();\n      expect(resource1.changeSize).to.not.be.called;\n      expect(overflowCallbackSpy).to.be.calledOnce.calledWith(true);\n    });","file":"unit/test-mutator.js","skipped":false,"dir":"test"},{"name":"should change size via activation if has been active","suites":["requestChangeSize rules wrt viewport"],"updatePoint":{"line":383,"column":60,"index":15761},"line":383,"code":"    it('should change size via activation if has been active', () => {\n      viewportMock.expects('getContentHeight').returns(10000).atLeast(0);\n      const event = {\n        userActivation: {\n          hasBeenActive: true\n        }\n      };\n      mutator.scheduleChangeSize_(resource1, 111, 222, undefined, event, false);\n      resources.mutateWork_();\n      expect(resources.requestsChangeSize_).to.be.empty;\n      expect(resource1.changeSize).to.be.calledOnce;\n      expect(overflowCallbackSpy).to.be.calledOnce.calledWith(false);\n    });","file":"unit/test-mutator.js","skipped":false,"dir":"test"},{"name":"should change size when below the viewport","suites":["requestChangeSize rules wrt viewport"],"updatePoint":{"line":396,"column":50,"index":16293},"line":396,"code":"    it('should change size when below the viewport', () => {\n      resource1.layoutBox_ = {\n        top: 10,\n        left: 0,\n        right: 100,\n        bottom: 1050,\n        height: 50\n      };\n      mutator.scheduleChangeSize_(resource1, 111, 222, undefined, NO_EVENT, false);\n      resources.mutateWork_();\n      expect(resources.requestsChangeSize_).to.be.empty;\n      expect(resource1.changeSize).to.be.calledOnce;\n      expect(overflowCallbackSpy).to.be.calledOnce;\n      expect(overflowCallbackSpy.firstCall.args[0]).to.equal(false);\n    });","file":"unit/test-mutator.js","skipped":false,"dir":"test"},{"name":"should change size when below the viewport and top margin also changed","suites":["requestChangeSize rules wrt viewport"],"updatePoint":{"line":411,"column":78,"index":16871},"line":411,"code":"    it('should change size when below the viewport and top margin also changed', () => {\n      resource1.layoutBox_ = {\n        top: 200,\n        left: 0,\n        right: 100,\n        bottom: 300,\n        height: 100\n      };\n      mutator.scheduleChangeSize_(resource1, 111, 222, {\n        top: 20\n      }, NO_EVENT, false);\n      expect(vsyncSpy).to.be.calledOnce;\n      const marginsTask = vsyncSpy.lastCall.args[0];\n      marginsTask.measure({});\n      resources.mutateWork_();\n      expect(resources.requestsChangeSize_).to.be.empty;\n      expect(resource1.changeSize).to.be.calledOnce;\n      expect(overflowCallbackSpy).to.be.calledOnce;\n      expect(overflowCallbackSpy.firstCall.args[0]).to.equal(false);\n    });","file":"unit/test-mutator.js","skipped":false,"dir":"test"},{"name":"should defer when above the viewport and scrolling on","suites":["requestChangeSize rules wrt viewport"],"updatePoint":{"line":479,"column":61,"index":19335},"line":479,"code":"    it('should defer when above the viewport and scrolling on', () => {\n      resource1.layoutBox_ = {\n        top: -1200,\n        left: 0,\n        right: 100,\n        bottom: -1050,\n        height: 50\n      };\n      resources.lastVelocity_ = 10;\n      resources.lastScrollTime_ = Date.now();\n      mutator.scheduleChangeSize_(resource1, 111, 222, undefined, NO_EVENT, false);\n      resources.mutateWork_();\n      expect(resources.requestsChangeSize_.length).to.equal(1);\n      expect(resource1.changeSize).to.not.been.called;\n      expect(overflowCallbackSpy).to.not.been.called;\n    });","file":"unit/test-mutator.js","skipped":false,"dir":"test"},{"name":"should change size when above the vp and adjust scrolling","suites":["requestChangeSize rules wrt viewport"],"updatePoint":{"line":531,"column":65,"index":21356},"line":531,"code":"    it('should change size when above the vp and adjust scrolling', () => {\n      viewportMock.expects('getScrollHeight').returns(2999).once();\n      viewportMock.expects('getScrollTop').returns(1777).once();\n      resource1.layoutBox_ = {\n        top: -1200,\n        left: 0,\n        right: 100,\n        bottom: -1050,\n        height: 50\n      };\n      resources.lastVelocity_ = 0;\n      clock.tick(5000);\n      mutator.scheduleChangeSize_(resource1, 111, 222, undefined, NO_EVENT, false);\n      resources.mutateWork_();\n      expect(resources.requestsChangeSize_).to.be.empty;\n      expect(resource1.changeSize).to.not.been.called;\n      expect(vsyncSpy.callCount).to.be.greaterThan(1);\n      const task = vsyncSpy.lastCall.args[0];\n      const state = {};\n      task.measure(state);\n      expect(state.scrollTop).to.equal(1777);\n      expect(state.scrollHeight).to.equal(2999);\n      viewportMock.expects('getScrollHeight').returns(3999).once();\n      viewportMock.expects('setScrollTop').withExactArgs(2777).once();\n      task.mutate(state);\n      expect(resource1.changeSize).to.be.calledOnce;\n      expect(resource1.changeSize).to.be.calledWith(111, 222);\n      expect(resources.relayoutTop_).to.equal(resource1.layoutBox_.top);\n    });","file":"unit/test-mutator.js","skipped":false,"dir":"test"},{"name":"should NOT resize when above vp but cannot adjust scrolling","suites":["requestChangeSize rules wrt viewport"],"updatePoint":{"line":560,"column":67,"index":22601},"line":560,"code":"    it('should NOT resize when above vp but cannot adjust scrolling', () => {\n      resource1.layoutBox_ = {\n        top: -1200,\n        left: 0,\n        right: 100,\n        bottom: -1100,\n        height: 100\n      };\n      resources.lastVelocity_ = 0;\n      clock.tick(5000);\n      mutator.scheduleChangeSize_(resource1, 0, 222, undefined, NO_EVENT, false);\n      expect(vsyncSpy).to.be.calledOnce;\n      vsyncSpy.resetHistory();\n      resources.mutateWork_();\n      expect(resources.requestsChangeSize_).to.be.empty;\n      expect(resource1.changeSize).to.not.be.called;\n      expect(vsyncSpy).to.not.be.called;\n    });","file":"unit/test-mutator.js","skipped":false,"dir":"test"},{"name":"should resize if multi request above vp can adjust scroll","suites":["requestChangeSize rules wrt viewport"],"updatePoint":{"line":578,"column":65,"index":23220},"line":578,"code":"    it('should resize if multi request above vp can adjust scroll', () => {\n      resource1.layoutBox_ = {\n        top: -1200,\n        left: 0,\n        right: 100,\n        bottom: -1100,\n        height: 100\n      };\n      resource2.layoutBox_ = {\n        top: -1300,\n        left: 0,\n        right: 100,\n        bottom: -1200,\n        height: 100\n      };\n      resources.lastVelocity_ = 0;\n      clock.tick(5000);\n      mutator.scheduleChangeSize_(resource2, 200, 222, undefined, NO_EVENT, false);\n      mutator.scheduleChangeSize_(resource1, 0, 222, undefined, NO_EVENT, false);\n      resources.mutateWork_();\n      const task = vsyncSpy.lastCall.args[0];\n      const state = {};\n      task.mutate(state);\n      expect(resource1.changeSize).to.be.calledOnce;\n      expect(resource2.changeSize).to.be.calledOnce;\n    });","file":"unit/test-mutator.js","skipped":false,"dir":"test"},{"name":"should NOT resize if multi req above vp cannot adjust scroll","suites":["requestChangeSize rules wrt viewport"],"updatePoint":{"line":604,"column":68,"index":24045},"line":604,"code":"    it('should NOT resize if multi req above vp cannot adjust scroll', () => {\n      // Only to satisfy expectation in beforeEach\n      resources.viewport_.getRect();\n      viewportMock.expects('getRect').returns({\n        top: 10,\n        left: 0,\n        right: 100,\n        bottom: 210,\n        height: 200\n      });\n      resource1.layoutBox_ = {\n        top: -1200,\n        left: 0,\n        right: 100,\n        bottom: -1100,\n        height: 100\n      };\n      resource2.layoutBox_ = {\n        top: -1300,\n        left: 0,\n        right: 100,\n        bottom: -1200,\n        height: 100\n      };\n      resources.lastVelocity_ = 0;\n      clock.tick(5000);\n      mutator.scheduleChangeSize_(resource1, 92, 222, undefined, NO_EVENT, false);\n      mutator.scheduleChangeSize_(resource2, 92, 222, undefined, NO_EVENT, false);\n      resources.mutateWork_();\n      const task = vsyncSpy.lastCall.args[0];\n      const state = {};\n      task.mutate(state);\n      expect(resource1.changeSize).to.be.calledOnce;\n      expect(resource2.changeSize).to.not.be.called;\n    });","file":"unit/test-mutator.js","skipped":false,"dir":"test"},{"name":"should NOT adjust scrolling if height not change above vp","suites":["requestChangeSize rules wrt viewport"],"updatePoint":{"line":639,"column":65,"index":25108},"line":639,"code":"    it('should NOT adjust scrolling if height not change above vp', () => {\n      viewportMock.expects('getScrollHeight').returns(2999).once();\n      viewportMock.expects('getScrollTop').returns(1777).once();\n      resource1.layoutBox_ = {\n        top: -1200,\n        left: 0,\n        right: 100,\n        bottom: -1050,\n        height: 50\n      };\n      resources.lastVelocity_ = 0;\n      clock.tick(5000);\n      mutator.scheduleChangeSize_(resource1, 111, 222, undefined, NO_EVENT, false);\n      resources.mutateWork_();\n      expect(resources.requestsChangeSize_).to.be.empty;\n      expect(resource1.changeSize).to.not.been.called;\n      expect(vsyncSpy.callCount).to.be.greaterThan(1);\n      const task = vsyncSpy.lastCall.args[0];\n      const state = {};\n      task.measure(state);\n      expect(state.scrollTop).to.equal(1777);\n      expect(state.scrollHeight).to.equal(2999);\n      viewportMock.expects('getScrollHeight').returns(2999).once();\n      viewportMock.expects('setScrollTop').never();\n      task.mutate(state);\n      expect(resource1.changeSize).to.be.calledOnce;\n      expect(resource1.changeSize).to.be.calledWith(111, 222);\n      expect(resources.relayoutTop_).to.equal(resource1.layoutBox_.top);\n    });","file":"unit/test-mutator.js","skipped":false,"dir":"test"},{"name":"should adjust scrolling if height change above vp","suites":["requestChangeSize rules wrt viewport"],"updatePoint":{"line":668,"column":57,"index":26324},"line":668,"code":"    it('should adjust scrolling if height change above vp', () => {\n      viewportMock.expects('getScrollHeight').returns(2999).once();\n      viewportMock.expects('getScrollTop').returns(1000).once();\n      resource1.layoutBox_ = {\n        top: -1200,\n        left: 0,\n        right: 100,\n        bottom: -1050,\n        height: 50\n      };\n      resources.lastVelocity_ = 0;\n      clock.tick(5000);\n      mutator.scheduleChangeSize_(resource1, 111, 222, undefined, NO_EVENT, false);\n      resources.mutateWork_();\n      const task = vsyncSpy.lastCall.args[0];\n      const state = {};\n      task.measure(state);\n      viewportMock.expects('getScrollHeight').returns(2000).once();\n      viewportMock.expects('setScrollTop').withExactArgs(1).once();\n      task.mutate(state);\n    });","file":"unit/test-mutator.js","skipped":false,"dir":"test"},{"name":"in vp should NOT call overflowCallback if new height smaller","suites":["requestChangeSize rules wrt viewport"],"updatePoint":{"line":689,"column":68,"index":27116},"line":689,"code":"    it('in vp should NOT call overflowCallback if new height smaller', () => {\n      viewportMock.expects('getContentHeight').returns(10000).atLeast(1);\n      mutator.scheduleChangeSize_(resource1, 10, 11, undefined, NO_EVENT, false);\n      resources.mutateWork_();\n      expect(resources.requestsChangeSize_).to.be.empty;\n      expect(resource1.changeSize).to.not.been.called;\n      expect(overflowCallbackSpy).to.not.been.called;\n    });","file":"unit/test-mutator.js","skipped":false,"dir":"test"},{"name":"in viewport should change size if in the last 15% and in the last 1000px","suites":["requestChangeSize rules wrt viewport"],"updatePoint":{"line":697,"column":80,"index":27568},"line":697,"code":"    it('in viewport should change size if in the last 15% and in the last 1000px', () => {\n      viewportRect.top = 9600;\n      viewportRect.bottom = 9800;\n      resource1.layoutBox_ = {\n        top: 9650,\n        left: 0,\n        right: 100,\n        bottom: 9700,\n        height: 50\n      };\n      mutator.scheduleChangeSize_(resource1, 111, 222, {\n        top: 1,\n        right: 2,\n        bottom: 3,\n        left: 4\n      }, NO_EVENT, false);\n      expect(vsyncSpy).to.be.calledOnce;\n      const marginsTask = vsyncSpy.lastCall.args[0];\n      marginsTask.measure({});\n      resources.mutateWork_();\n      expect(resources.requestsChangeSize_).to.be.empty;\n      expect(resource1.changeSize).to.be.calledOnce;\n      expect(overflowCallbackSpy).to.be.calledOnce;\n      expect(overflowCallbackSpy.firstCall.args[0]).to.equal(false);\n    });","file":"unit/test-mutator.js","skipped":false,"dir":"test"},{"name":"in viewport should NOT change size and calls overflowCallback","suites":["requestChangeSize rules wrt viewport"],"updatePoint":{"line":753,"column":69,"index":29407},"line":753,"code":"    it('in viewport should NOT change size and calls overflowCallback', () => {\n      viewportMock.expects('getContentHeight').returns(10000).atLeast(1);\n      mutator.scheduleChangeSize_(resource1, 111, 222, {\n        top: 1,\n        right: 2,\n        bottom: 3,\n        left: 4\n      }, NO_EVENT, false);\n      expect(vsyncSpy).to.be.calledOnce;\n      const task = vsyncSpy.lastCall.args[0];\n      task.measure({});\n      resources.mutateWork_();\n      expect(resources.requestsChangeSize_.length).to.equal(0);\n      expect(resource1.changeSize).to.not.been.called;\n      expect(overflowCallbackSpy).to.be.calledOnce;\n      expect(overflowCallbackSpy).to.be.calledWith(true, 111, 222, {\n        top: 1,\n        right: 2,\n        bottom: 3,\n        left: 4\n      });\n      expect(resource1.getPendingChangeSize()).to.jsonEqual({\n        height: 111,\n        width: 222,\n        margins: {\n          top: 1,\n          right: 2,\n          bottom: 3,\n          left: 4\n        }\n      });\n    });","file":"unit/test-mutator.js","skipped":false,"dir":"test"},{"name":"should change size when resized margin above viewport","suites":["requestChangeSize rules wrt viewport"],"updatePoint":{"line":905,"column":61,"index":34537},"line":905,"code":"    it('should change size when resized margin above viewport', () => {\n      resource1.layoutBox_ = {\n        top: -49,\n        left: 0,\n        right: 100,\n        bottom: 1,\n        height: 50\n      };\n      resource1.element.fakeComputedStyle = {\n        marginBottom: '21px'\n      };\n      viewportMock.expects('getScrollHeight').returns(2999).once();\n      viewportMock.expects('getScrollTop').returns(1777).once();\n      resources.lastVelocity_ = 0;\n      clock.tick(5000);\n      mutator.scheduleChangeSize_(resource1, undefined, undefined, {\n        top: 1\n      }, NO_EVENT, false);\n      expect(vsyncSpy).to.be.calledOnce;\n      const marginsTask = vsyncSpy.lastCall.args[0];\n      marginsTask.measure({});\n      resources.mutateWork_();\n      expect(resources.requestsChangeSize_).to.be.empty;\n      expect(resource1.changeSize).to.not.been.called;\n      expect(vsyncSpy.callCount).to.be.greaterThan(2);\n      const scrollAdjustTask = vsyncSpy.lastCall.args[0];\n      const state = {};\n      scrollAdjustTask.measure(state);\n      expect(state.scrollTop).to.equal(1777);\n      expect(state.scrollHeight).to.equal(2999);\n      viewportMock.expects('getScrollHeight').returns(3999).once();\n      viewportMock.expects('setScrollTop').withExactArgs(2777).once();\n      scrollAdjustTask.mutate(state);\n      expect(resource1.changeSize).to.be.calledOnce;\n      expect(resource1.changeSize).to.be.calledWith(undefined, undefined, {\n        top: 1\n      });\n      expect(resources.relayoutTop_).to.equal(resource1.layoutBox_.top);\n    });","file":"unit/test-mutator.js","skipped":false,"dir":"test"},{"name":"should reset pending change size when rescheduling","suites":["requestChangeSize rules wrt viewport"],"updatePoint":{"line":944,"column":58,"index":36077},"line":944,"code":"    it('should reset pending change size when rescheduling', () => {\n      viewportMock.expects('getContentHeight').returns(10000).atLeast(1);\n      mutator.scheduleChangeSize_(resource1, 111, 222, undefined, NO_EVENT, false);\n      resources.mutateWork_();\n      expect(resource1.getPendingChangeSize().height).to.equal(111);\n      expect(resource1.getPendingChangeSize().width).to.equal(222);\n      mutator.scheduleChangeSize_(resource1, 112, 223, undefined, NO_EVENT, false);\n      expect(resource1.getPendingChangeSize()).to.be.undefined;\n    });","file":"unit/test-mutator.js","skipped":false,"dir":"test"},{"name":"should force resize after focus","suites":["requestChangeSize rules wrt viewport"],"updatePoint":{"line":953,"column":39,"index":36609},"line":953,"code":"    it('should force resize after focus', () => {\n      viewportMock.expects('getContentHeight').returns(10000).atLeast(1);\n      mutator.scheduleChangeSize_(resource1, 111, 222, undefined, NO_EVENT, false);\n      resources.mutateWork_();\n      expect(resource1.getPendingChangeSize()).to.jsonEqual({\n        height: 111,\n        width: 222\n      });\n      expect(resources.requestsChangeSize_).to.be.empty;\n      mutator.checkPendingChangeSize_(resource1.element);\n      expect(resource1.getPendingChangeSize()).to.be.undefined;\n      expect(resources.requestsChangeSize_.length).to.equal(1);\n      resources.mutateWork_();\n      expect(resources.requestsChangeSize_).to.be.empty;\n      expect(resource1.changeSize).to.be.calledOnce;\n      expect(resource1.changeSize).to.be.calledWith(111, 222);\n      expect(overflowCallbackSpy).to.be.calledTwice;\n      expect(overflowCallbackSpy.lastCall.args[0]).to.equal(false);\n    });","file":"unit/test-mutator.js","skipped":false,"dir":"test"},{"name":"should NOT change size when far the bottom of the document","suites":["requestChangeSize rules for element wrt document"],"updatePoint":{"line":984,"column":66,"index":37917},"line":984,"code":"    it('should NOT change size when far the bottom of the document', () => {\n      viewportMock.expects('getContentHeight').returns(10000).once();\n      mutator.scheduleChangeSize_(resource1, 111, 222, undefined, NO_EVENT, false);\n      resources.mutateWork_();\n      expect(resource1.changeSize).to.not.been.called;\n    });","file":"unit/test-mutator.js","skipped":false,"dir":"test"},{"name":"should change size when close to the bottom of the document","suites":["requestChangeSize rules for element wrt document"],"updatePoint":{"line":990,"column":67,"index":38243},"line":990,"code":"    it('should change size when close to the bottom of the document', () => {\n      viewportMock.expects('getContentHeight').returns(110).once();\n      mutator.scheduleChangeSize_(resource1, 111, 222, undefined, NO_EVENT, false);\n      resources.mutateWork_();\n      expect(resource1.changeSize).to.be.calledOnce;\n    });","file":"unit/test-mutator.js","skipped":false,"dir":"test"},{"name":"should mutate from visible to invisible","suites":["requestChangeSize rules for element wrt document"],"updatePoint":{"line":1100,"column":45,"index":42283},"line":1100,"code":"  it('should mutate from visible to invisible', () => {\n    const mutateSpy = env.sandbox.spy();\n    const promise = mutator.mutateElement(parent1, () => {\n      parent1.getBoundingClientRect = () => layoutRectLtwh(0, 0, 0, 0);\n      mutateSpy();\n    });\n    return promise.then(() => {\n      expect(mutateSpy).to.be.calledOnce;\n      expect(resource1RequestMeasureStub).to.be.calledOnce;\n      expect(resource2RequestMeasureStub).to.have.not.been.called;\n      expect(relayoutTopStub).to.be.calledOnce;\n      expect(relayoutTopStub.getCall(0).args[0]).to.equal(10);\n    });\n  });","file":"unit/test-mutator.js","skipped":false,"dir":"test"},{"name":"should mutate from visible to invisible on itself","suites":["requestChangeSize rules for element wrt document"],"updatePoint":{"line":1114,"column":55,"index":42874},"line":1114,"code":"  it('should mutate from visible to invisible on itself', () => {\n    const mutateSpy = env.sandbox.spy();\n    const promise = mutator.mutateElement(resource1.element, () => {\n      resource1.element.getBoundingClientRect = () => layoutRectLtwh(0, 0, 0, 0);\n      mutateSpy();\n    });\n    return promise.then(() => {\n      expect(mutateSpy).to.be.calledOnce;\n      expect(resource1RequestMeasureStub).to.be.calledOnce;\n      expect(resource2RequestMeasureStub).to.have.not.been.called;\n      expect(relayoutTopStub).to.be.calledOnce;\n      expect(relayoutTopStub.getCall(0).args[0]).to.equal(10);\n    });\n  });","file":"unit/test-mutator.js","skipped":false,"dir":"test"},{"name":"should mutate from invisible to visible","suites":["requestChangeSize rules for element wrt document"],"updatePoint":{"line":1128,"column":45,"index":43475},"line":1128,"code":"  it('should mutate from invisible to visible', () => {\n    const mutateSpy = env.sandbox.spy();\n    parent1.getBoundingClientRect = () => layoutRectLtwh(0, 0, 0, 0);\n    const promise = mutator.mutateElement(parent1, () => {\n      parent1.getBoundingClientRect = () => layoutRectLtwh(10, 10, 100, 100);\n      mutateSpy();\n    });\n    return promise.then(() => {\n      expect(mutateSpy).to.be.calledOnce;\n      expect(resource1RequestMeasureStub).to.be.calledOnce;\n      expect(resource2RequestMeasureStub).to.have.not.been.called;\n      expect(relayoutTopStub).to.be.calledOnce;\n      expect(relayoutTopStub.getCall(0).args[0]).to.equal(10);\n    });\n  });","file":"unit/test-mutator.js","skipped":false,"dir":"test"},{"name":"should mutate from visible to visible","suites":["requestChangeSize rules for element wrt document"],"updatePoint":{"line":1143,"column":43,"index":44130},"line":1143,"code":"  it('should mutate from visible to visible', () => {\n    const mutateSpy = env.sandbox.spy();\n    parent1.getBoundingClientRect = () => layoutRectLtwh(10, 10, 100, 100);\n    const promise = mutator.mutateElement(parent1, () => {\n      parent1.getBoundingClientRect = () => layoutRectLtwh(10, 1010, 100, 100);\n      mutateSpy();\n    });\n    return promise.then(() => {\n      expect(mutateSpy).to.be.calledOnce;\n      expect(resource1RequestMeasureStub).to.be.calledOnce;\n      expect(resource2RequestMeasureStub).to.have.not.been.called;\n      expect(relayoutTopStub).to.have.callCount(2);\n      expect(relayoutTopStub.getCall(0).args[0]).to.equal(10);\n      expect(relayoutTopStub.getCall(1).args[0]).to.equal(1010);\n    });\n  });","file":"unit/test-mutator.js","skipped":false,"dir":"test"},{"name":"attemptCollapse should not call requestChangeSize","suites":["requestChangeSize rules for element wrt document"],"updatePoint":{"line":1159,"column":55,"index":44874},"line":1159,"code":"  it('attemptCollapse should not call requestChangeSize', () => {\n    // This test ensure that #attemptCollapse won't do any optimization or\n    // refactor by calling requestChangeSize.\n    // This to support collapsing element above viewport\n    // When requestChangeSize succeed, resources manager will measure the new\n    // scrollHeight, and we need to make sure the newScrollHeight is measured\n    // after setting element display:none\n    env.sandbox.stub(resources.viewport_, 'getRect').callsFake(() => {\n      return {\n        top: 1500,\n        bottom: 1800,\n        left: 0,\n        right: 500,\n        width: 500,\n        height: 300\n      };\n    });\n    let promiseResolve = null;\n    const promise = new Promise(resolve => {\n      promiseResolve = resolve;\n    });\n    let index = 0;\n    env.sandbox.stub(resources.viewport_, 'getScrollHeight').callsFake(() => {\n      // In change element size above viewport path, getScrollHeight will be\n      // called twice. And we care that the last measurement is correct,\n      // which requires it to be measured after element dispaly set to none.\n      if (index == 1) {\n        expect(resource1.completeCollapse).to.be.calledOnce;\n        promiseResolve();\n        return;\n      }\n      expect(resource1.completeCollapse).to.not.been.called;\n      index++;\n    });\n    resource1.layoutBox_ = {\n      top: 1000,\n      left: 0,\n      right: 100,\n      bottom: 1050,\n      height: 50\n    };\n    resources.lastVelocity_ = 0;\n    mutator.attemptCollapse(resource1.element);\n    resources.mutateWork_();\n    return promise;\n  });","file":"unit/test-mutator.js","skipped":false,"dir":"test"},{"name":"attemptCollapse should complete collapse if resize succeed","suites":["requestChangeSize rules for element wrt document"],"updatePoint":{"line":1205,"column":64,"index":46465},"line":1205,"code":"  it('attemptCollapse should complete collapse if resize succeed', () => {\n    env.sandbox.stub(mutator, 'scheduleChangeSize_').callsFake((resource, newHeight, newWidth, newMargins, event, force, callback) => {\n      callback(true);\n    });\n    mutator.attemptCollapse(resource1.element);\n    expect(resource1.completeCollapse).to.be.calledOnce;\n  });","file":"unit/test-mutator.js","skipped":false,"dir":"test"},{"name":"attemptCollapse should NOT complete collapse if resize fail","suites":["requestChangeSize rules for element wrt document"],"updatePoint":{"line":1212,"column":65,"index":46818},"line":1212,"code":"  it('attemptCollapse should NOT complete collapse if resize fail', () => {\n    env.sandbox.stub(mutator, 'scheduleChangeSize_').callsFake((resource, newHeight, newWidth, newMargins, event, force, callback) => {\n      callback(false);\n    });\n    mutator.attemptCollapse(resource1.element);\n    expect(resource1.completeCollapse).to.not.been.called;\n  });","file":"unit/test-mutator.js","skipped":false,"dir":"test"},{"name":"should complete collapse and trigger relayout","suites":["requestChangeSize rules for element wrt document"],"updatePoint":{"line":1219,"column":51,"index":47160},"line":1219,"code":"  it('should complete collapse and trigger relayout', () => {\n    const oldTop = resource1.getLayoutBox().top;\n    mutator.collapseElement(resource1.element);\n    expect(resource1.completeCollapse).to.be.calledOnce;\n    expect(relayoutTopStub).to.be.calledOnce;\n    expect(relayoutTopStub.args[0][0]).to.equal(oldTop);\n  });","file":"unit/test-mutator.js","skipped":false,"dir":"test"},{"name":"should ignore relayout on an already collapsed element","suites":["requestChangeSize rules for element wrt document"],"updatePoint":{"line":1226,"column":60,"index":47494},"line":1226,"code":"  it('should ignore relayout on an already collapsed element', () => {\n    resource1.layoutBox_.width = 0;\n    resource1.layoutBox_.height = 0;\n    mutator.collapseElement(resource1.element);\n    expect(resource1.completeCollapse).to.be.calledOnce;\n    expect(relayoutTopStub).to.have.not.been.called;\n  });","file":"unit/test-mutator.js","skipped":false,"dir":"test"},{"name":"should select a direct link","suites":["discovery"],"updatePoint":{"line":78,"column":37,"index":3022},"line":78,"code":"      it('should select a direct link', () => {\n        // TODO(alabiaga): throughout the file -- invoke the handler via the\n        // document used to get the navigation service. e.g document.click().\n        handler.handle_(event);\n        expect(handleNavSpy).to.be.calledOnce;\n        expect(handleNavSpy).to.be.calledWith(event, anchor);\n        expect(handleCustomProtocolSpy).to.be.calledOnce;\n        expect(handleCustomProtocolSpy).to.be.calledWith(event, anchor);\n      });","file":"unit/test-navigation.js","skipped":false,"dir":"test"},{"name":"should select a custom linker target","suites":["discovery"],"updatePoint":{"line":87,"column":46,"index":3516},"line":87,"code":"      it('should select a custom linker target', () => {\n        event.target = null;\n        event['__AMP_CUSTOM_LINKER_TARGET__'] = customAnchor;\n        handler.handle_(event);\n        expect(handleNavSpy).to.be.calledOnce;\n        expect(handleNavSpy).to.be.calledWith(event, customAnchor);\n      });","file":"unit/test-navigation.js","skipped":false,"dir":"test"},{"name":"should NOT handle custom protocol when not iframed","suites":["discovery"],"updatePoint":{"line":94,"column":60,"index":3835},"line":94,"code":"      it('should NOT handle custom protocol when not iframed', () => {\n        handler.isIframed_ = false;\n        handler.handle_(event);\n        expect(handleCustomProtocolSpy).to.be.calledOnce;\n        expect(handleCustomProtocolSpy).to.have.returned(false);\n      });","file":"unit/test-navigation.js","skipped":false,"dir":"test"},{"name":"should discover a link from a nested target","suites":["discovery"],"updatePoint":{"line":100,"column":53,"index":4100},"line":100,"code":"      it('should discover a link from a nested target', () => {\n        const target = doc.createElement('span');\n        anchor.appendChild(target);\n        event.target = target;\n        handler.handle_(event);\n        expect(handleNavSpy).to.be.calledOnce;\n        expect(handleNavSpy).to.be.calledWith(event, anchor);\n        expect(handleCustomProtocolSpy).to.be.calledOnce;\n        expect(handleCustomProtocolSpy).to.be.calledWith(event, anchor);\n      });","file":"unit/test-navigation.js","skipped":false,"dir":"test"},{"name":"should NOT proceed if event is cancelled","suites":["discovery"],"updatePoint":{"line":110,"column":50,"index":4560},"line":110,"code":"      it('should NOT proceed if event is cancelled', () => {\n        event.preventDefault();\n        handler.handle_(event);\n        expect(handleNavSpy).to.not.be.called;\n        expect(handleCustomProtocolSpy).to.not.be.called;\n      });","file":"unit/test-navigation.js","skipped":false,"dir":"test"},{"name":"should ignore a target without link","suites":["discovery"],"updatePoint":{"line":116,"column":45,"index":4795},"line":116,"code":"      it('should ignore a target without link', () => {\n        const target = doc.createElement('span');\n        doc.body.appendChild(target);\n        event.target = target;\n        handler.handle_(event);\n        expect(handleNavSpy).to.not.be.called;\n        expect(handleCustomProtocolSpy).to.not.be.called;\n      });","file":"unit/test-navigation.js","skipped":false,"dir":"test"},{"name":"should ignore a link without href","suites":["discovery"],"updatePoint":{"line":124,"column":43,"index":5115},"line":124,"code":"      it('should ignore a link without href', () => {\n        anchor.removeAttribute('href');\n        handler.handle_(event);\n        expect(handleNavSpy).to.not.be.called;\n        expect(handleCustomProtocolSpy).to.not.be.called;\n      });","file":"unit/test-navigation.js","skipped":false,"dir":"test"},{"name":"should not throw error if priority is already in use","suites":["anchor mutators"],"updatePoint":{"line":132,"column":62,"index":5423},"line":132,"code":"      it('should not throw error if priority is already in use', () => {\n        const priority = 10;\n        handler.registerAnchorMutator(element => {\n          element.href += '?am=1';\n        }, priority);\n        expect(() => handler.registerAnchorMutator(element => {\n          element.href += '?am=2';\n        }, priority)).to.not.throw();\n      });","file":"unit/test-navigation.js","skipped":false,"dir":"test"},{"name":"should execute in order","suites":["anchor mutators"],"updatePoint":{"line":141,"column":33,"index":5751},"line":141,"code":"      it('should execute in order', () => {\n        anchor.href = 'https://www.testing-1-2-3.org';\n        let transformedHref;\n        handler.registerAnchorMutator(element => {\n          element.href += '&second=2';\n          transformedHref = element.href;\n        }, 2);\n        handler.registerAnchorMutator(element => {\n          element.href += '&first=1';\n          transformedHref = element.href;\n        }, 1);\n        handler.registerAnchorMutator(element => {\n          element.href += '?third=3';\n          transformedHref = element.href;\n        }, 3);\n        // If using a same priority, the order of registration is respected.\n        handler.registerAnchorMutator(element => {\n          element.href += '&third=3-1';\n          transformedHref = element.href;\n        }, 3);\n        handler.handle_(event);\n        expect(transformedHref).to.equal('https://www.testing-1-2-3.org/?third=3&third=3-1&second=2' + '&first=1');\n      });","file":"unit/test-navigation.js","skipped":false,"dir":"test"},{"name":"verify order of operations","suites":["anchor mutators"],"updatePoint":{"line":164,"column":36,"index":6704},"line":164,"code":"      it('verify order of operations', () => {\n        const expandVars = env.sandbox.spy(handler, 'expandVarsForAnchor_');\n        const parseUrl = env.sandbox.spy(handler, 'parseUrl_');\n        const obj = {\n          callback: () => {}\n        };\n        const linkRuleSpy = env.sandbox.spy(obj, 'callback');\n        handler.registerAnchorMutator(linkRuleSpy, 1);\n        handler.handle_(event);\n        // Verify that the expansion of variables occurs first\n        // followed by the anchor transformation and then the parsing\n        // of the possibly mutated anchor href into the location object\n        // for navigation.handleNavClick.\n        env.sandbox.assert.callOrder(expandVars, linkRuleSpy, parseUrl);\n        expect(expandVars).to.be.calledOnce;\n        // Verify that parseUrl is called once when the variables are\n        // expanded, then after the anchor mutators and then once more\n        // in handleNavClick\n        expect(parseUrl).to.be.calledThrice;\n      });","file":"unit/test-navigation.js","skipped":false,"dir":"test"},{"name":"should expand a link","suites":["link expansion"],"updatePoint":{"line":186,"column":30,"index":7734},"line":186,"code":"      it('should expand a link', () => {\n        anchor.href = 'https://www.google.com/link?out=QUERY_PARAM(hello)';\n        anchor.setAttribute('data-amp-replace', 'QUERY_PARAM');\n        handler.handle_(event);\n        expect(anchor.href).to.equal('https://www.google.com/link?out=world');\n        expect(handleNavSpy).to.be.calledOnce;\n      });","file":"unit/test-navigation.js","skipped":false,"dir":"test"},{"name":"should only expand with allowlist","suites":["link expansion"],"updatePoint":{"line":193,"column":43,"index":8096},"line":193,"code":"      it('should only expand with allowlist', () => {\n        anchor.href = 'https://www.google.com/link?out=QUERY_PARAM(hello)';\n        handler.handle_(event);\n        expect(anchor.href).to.equal('https://www.google.com/link?out=QUERY_PARAM(hello)');\n        expect(handleNavSpy).to.be.calledOnce;\n      });","file":"unit/test-navigation.js","skipped":false,"dir":"test"},{"name":"should expand link if event type is right click","suites":["link expansion"],"updatePoint":{"line":199,"column":57,"index":8421},"line":199,"code":"      it('should expand link if event type is right click', () => {\n        anchor.href = 'https://www.google.com/link?out=QUERY_PARAM(hello)';\n        anchor.setAttribute('data-amp-replace', 'QUERY_PARAM');\n        event.type = 'contextmenu';\n        handler.handle_(event);\n        expect(anchor.href).to.equal('https://www.google.com/link?out=world');\n      });","file":"unit/test-navigation.js","skipped":false,"dir":"test"},{"name":"should decorate for page w/ ga tag","suites":["link decoration"],"updatePoint":{"line":225,"column":44,"index":9438},"line":225,"code":"      it('should decorate for page w/ ga tag', function* () {\n        handler.isEmbed_ = false;\n        yield macroTask();\n        handler.handle_(event);\n        expect(decorationSpy).to.be.calledOnce;\n      });","file":"unit/test-navigation.js","skipped":false,"dir":"test"},{"name":"should not decorate for page w/o ga tag","suites":["link decoration"],"updatePoint":{"line":231,"column":49,"index":9656},"line":231,"code":"      it('should not decorate for page w/o ga tag', function* () {\n        handler.isEmbed_ = false;\n        const ga = win.document.getElementsByTagName('amp-analytics');\n        ga[0].parentNode.removeChild(ga[0]);\n        yield macroTask();\n        handler.handle_(event);\n        expect(decorationSpy).to.not.be.called;\n      });","file":"unit/test-navigation.js","skipped":false,"dir":"test"},{"name":"should not decorate for embed","suites":["link decoration"],"updatePoint":{"line":239,"column":39,"index":9980},"line":239,"code":"      it('should not decorate for embed', () => {\n        handler.isEmbed_ = true;\n        handler.handle_(event);\n        expect(decorationSpy).to.not.be.called;\n      });","file":"unit/test-navigation.js","skipped":false,"dir":"test"},{"name":"should only decorate w/ params exists in sourceUrl","suites":["link decoration"],"updatePoint":{"line":244,"column":60,"index":10174},"line":244,"code":"      it('should only decorate w/ params exists in sourceUrl', () => {\n        win.location.href = test1Url;\n        handler.handle_(event);\n        expect(decorationSpy).to.be.called;\n        expect(anchor.href).to.equal('https://www.google.com/other?gclid=123');\n        expect(handleNavSpy).to.be.calledOnce;\n      });","file":"unit/test-navigation.js","skipped":false,"dir":"test"},{"name":"should append gclid and gclsrc to outgoing link","suites":["link decoration"],"updatePoint":{"line":251,"column":57,"index":10493},"line":251,"code":"      it('should append gclid and gclsrc to outgoing link', () => {\n        win.location.href = test2Url;\n        handler.handle_(event);\n        expect(anchor.href).to.equal('https://www.google.com/other?gclid=123&gclsrc=abcd');\n        expect(handleNavSpy).to.be.calledOnce;\n      });","file":"unit/test-navigation.js","skipped":false,"dir":"test"},{"name":"should respect params in outgoing link","suites":["link decoration"],"updatePoint":{"line":257,"column":48,"index":10771},"line":257,"code":"      it('should respect params in outgoing link', () => {\n        anchor.href = 'https://www.google.com/other?gclid=456';\n        win.location.href = test2Url;\n        handler.handle_(event);\n        expect(anchor.href).to.equal('https://www.google.com/other?gclid=456&gclsrc=abcd');\n        expect(handleNavSpy).to.be.calledOnce;\n      });","file":"unit/test-navigation.js","skipped":false,"dir":"test"},{"name":"should repsect data-amp-addparams","suites":["link decoration"],"updatePoint":{"line":264,"column":43,"index":11108},"line":264,"code":"      it('should repsect data-amp-addparams', () => {\n        anchor.setAttribute('data-amp-addparams', 'gclsrc=test');\n        win.location.href = test2Url;\n        handler.handle_(event);\n        expect(anchor.href).to.equal('https://www.google.com/other?gclsrc=test&gclid=123');\n        expect(handleNavSpy).to.be.calledOnce;\n      });","file":"unit/test-navigation.js","skipped":false,"dir":"test"},{"name":"should respect async gclid and gclsrc assignment","suites":["link decoration"],"updatePoint":{"line":271,"column":58,"index":11462},"line":271,"code":"      it('should respect async gclid and gclsrc assignment', () => {\n        handler.handle_(event);\n        expect(anchor.href).to.equal('https://www.google.com/other');\n        expect(handleNavSpy).to.be.calledOnce;\n        win.location.href = test2Url;\n        handler.handle_(event);\n        expect(anchor.href).to.equal('https://www.google.com/other?gclid=123&gclsrc=abcd');\n        expect(handleNavSpy).to.be.calledTwice;\n      });","file":"unit/test-navigation.js","skipped":false,"dir":"test"},{"name":"should always open in _blank when embedded","suites":["when linking to ftp: protocol"],"updatePoint":{"line":285,"column":52,"index":12036},"line":285,"code":"      it('should always open in _blank when embedded', () => {\n        handler.handle_(event);\n        expect(winOpenStub).to.be.calledOnce;\n        expect(winOpenStub).to.be.calledWith('ftp://example.com/a', '_blank');\n        expect(event.defaultPrevented).to.be.true;\n      });","file":"unit/test-navigation.js","skipped":false,"dir":"test"},{"name":"should not do anything not embedded","suites":["when linking to ftp: protocol"],"updatePoint":{"line":291,"column":45,"index":12310},"line":291,"code":"      it('should not do anything not embedded', () => {\n        handler.isIframed_ = false;\n        handler.handle_(event);\n        expect(winOpenStub).to.not.be.called;\n        expect(winOpenStub).to.not.be.calledWith('ftp://example.com/a', '_blank');\n        expect(event.defaultPrevented).to.be.false;\n      });","file":"unit/test-navigation.js","skipped":false,"dir":"test"},{"name":"should open link in _top on Safari iOS when embedded","suites":["when linking to custom protocols e.g. whatsapp:"],"updatePoint":{"line":304,"column":62,"index":12846},"line":304,"code":"      it('should open link in _top on Safari iOS when embedded', () => {\n        handler.handle_(event);\n        expect(winOpenStub).to.be.calledOnce;\n        expect(winOpenStub.calledWith('whatsapp://send?text=hello', '_top')).to.be.true;\n        expect(event.defaultPrevented).to.be.true;\n      });","file":"unit/test-navigation.js","skipped":false,"dir":"test"},{"name":"should not do anything on when not embedded","suites":["when linking to custom protocols e.g. whatsapp:"],"updatePoint":{"line":310,"column":53,"index":13138},"line":310,"code":"      it('should not do anything on when not embedded', () => {\n        handler.isIframed_ = false;\n        handler.handle_(event);\n        expect(winOpenStub).to.not.be.called;\n        expect(winOpenStub).to.not.be.calledWith('whatsapp://send?text=hello', '_top');\n        expect(event.defaultPrevented).to.be.false;\n      });","file":"unit/test-navigation.js","skipped":false,"dir":"test"},{"name":"should not do anything for mailto: protocol","suites":["when linking to custom protocols e.g. whatsapp:"],"updatePoint":{"line":317,"column":53,"index":13466},"line":317,"code":"      it('should not do anything for mailto: protocol', () => {\n        anchor.href = 'mailto:hello@example.com';\n        handler.handle_(event);\n        expect(winOpenStub).to.not.be.called;\n        expect(event.defaultPrevented).to.be.false;\n      });","file":"unit/test-navigation.js","skipped":false,"dir":"test"},{"name":"should not do anything on other non-safari iOS","suites":["when linking to custom protocols e.g. whatsapp:"],"updatePoint":{"line":323,"column":56,"index":13723},"line":323,"code":"      it('should not do anything on other non-safari iOS', () => {\n        handler.isIosSafari_ = false;\n        handler.handle_(event);\n        expect(winOpenStub).to.not.be.called;\n        expect(event.defaultPrevented).to.be.false;\n      });","file":"unit/test-navigation.js","skipped":false,"dir":"test"},{"name":"should not do anything on other platforms","suites":["when linking to custom protocols e.g. whatsapp:"],"updatePoint":{"line":329,"column":51,"index":13963},"line":329,"code":"      it('should not do anything on other platforms', () => {\n        handler.isIosSafari_ = false;\n        handler.handle_(event);\n        expect(winOpenStub).to.not.be.called;\n        expect(event.defaultPrevented).to.be.false;\n      });","file":"unit/test-navigation.js","skipped":false,"dir":"test"},{"name":"should not do anything on path change","suites":["when linking to a different origin or path"],"updatePoint":{"line":337,"column":47,"index":14274},"line":337,"code":"      it('should not do anything on path change', () => {\n        anchor.href = 'https://www.google.com/some-other-path';\n        handler.handle_(event);\n        expect(event.defaultPrevented).to.be.false;\n        expect(winOpenStub).to.not.be.called;\n        expect(scrollIntoViewStub).to.not.be.called;\n        expect(anchor.getAttribute('target')).to.be.null;\n      });","file":"unit/test-navigation.js","skipped":false,"dir":"test"},{"name":"should not do anything on origin change","suites":["when linking to a different origin or path"],"updatePoint":{"line":345,"column":49,"index":14649},"line":345,"code":"      it('should not do anything on origin change', () => {\n        anchor.href = 'https://maps.google.com/some-path#link';\n        handler.handle_(event);\n        expect(event.defaultPrevented).to.be.false;\n        expect(winOpenStub).to.not.be.called;\n        expect(scrollIntoViewStub).to.not.be.called;\n        expect(anchor.getAttribute('target')).to.be.null;\n      });","file":"unit/test-navigation.js","skipped":false,"dir":"test"},{"name":"should not do anything when there is no hash","suites":["when linking to a different origin or path"],"updatePoint":{"line":353,"column":54,"index":15029},"line":353,"code":"      it('should not do anything when there is no hash', () => {\n        anchor.href = 'https://www.google.com/some-path';\n        handler.handle_(event);\n        expect(event.defaultPrevented).to.be.false;\n        expect(winOpenStub).to.not.be.called;\n        expect(scrollIntoViewStub).to.not.be.called;\n        expect(anchor.getAttribute('target')).to.be.null;\n      });","file":"unit/test-navigation.js","skipped":false,"dir":"test"},{"name":"should not do anything on a query change","suites":["when linking to a different origin or path"],"updatePoint":{"line":361,"column":50,"index":15399},"line":361,"code":"      it('should not do anything on a query change', () => {\n        anchor.href = 'https://www.google.com/some-path?hello=foo#link';\n        handler.handle_(event);\n        expect(event.defaultPrevented).to.be.false;\n        expect(winOpenStub).to.not.be.called;\n        expect(scrollIntoViewStub).to.not.be.called;\n        expect(anchor.getAttribute('target')).to.be.null;\n      });","file":"unit/test-navigation.js","skipped":false,"dir":"test"},{"name":"should find element by id","suites":["when linking to identifier"],"updatePoint":{"line":374,"column":35,"index":15938},"line":374,"code":"      it('should find element by id', () => {\n        handler.handle_(event);\n        expect(event.defaultPrevented).to.be.true;\n        expect(replaceStateForTargetStub).to.be.calledOnce;\n        expect(replaceStateForTargetStub).to.be.calledWith('#test');\n        expect(scrollIntoViewStub).to.not.be.called;\n        return replaceStateForTargetPromise.then(() => {\n          expect(scrollIntoViewStub).to.be.called;\n          expect(scrollIntoViewStub).to.be.calledWith(elementWithId);\n        });\n      });","file":"unit/test-navigation.js","skipped":false,"dir":"test"},{"name":"should always call preventDefault","suites":["when linking to identifier"],"updatePoint":{"line":385,"column":43,"index":16457},"line":385,"code":"      it('should always call preventDefault', () => {\n        elementWithId.id = 'something-else';\n        handler.handle_(event);\n        expect(event.defaultPrevented).to.be.true;\n        expect(replaceStateForTargetStub).to.be.calledOnce;\n        expect(replaceStateForTargetStub).to.be.calledWith('#test');\n        return replaceStateForTargetPromise.then(() => {\n          expect(scrollIntoViewStub).to.not.be.called;\n        });\n      });","file":"unit/test-navigation.js","skipped":false,"dir":"test"},{"name":"should call scrollIntoView twice if element with id is found","suites":["when linking to identifier"],"updatePoint":{"line":406,"column":70,"index":17516},"line":406,"code":"      it('should call scrollIntoView twice if element with id is found', () => {\n        handler.handle_(event);\n        expect(replaceStateForTargetStub).to.be.calledOnce;\n        expect(replaceStateForTargetStub).to.be.calledWith('#test');\n        return replaceStateForTargetPromise.then(() => {\n          expect(scrollIntoViewStub).to.have.callCount(1);\n          return new Promise(resolve => {\n            setTimeout(resolve, 2);\n          });\n        }).then(() => {\n          expect(scrollIntoViewStub).to.have.callCount(2);\n        });\n      });","file":"unit/test-navigation.js","skipped":false,"dir":"test"},{"name":"should use escaped css selectors with spaces","suites":["when linking to identifier"],"updatePoint":{"line":419,"column":54,"index":18055},"line":419,"code":"      it('should use escaped css selectors with spaces', () => {\n        anchor.href = 'https://www.google.com/some-path?hello=world#test%20hello';\n        anchorWithName.setAttribute('name', 'test%20hello');\n        handler.handle_(event);\n        expect(replaceStateForTargetStub).to.be.calledWith('#test%20hello');\n        return replaceStateForTargetPromise.then(() => {\n          expect(scrollIntoViewStub).to.be.calledWith(anchorWithName);\n        });\n      });","file":"unit/test-navigation.js","skipped":false,"dir":"test"},{"name":"should use escaped css selectors with quotes","suites":["when linking to identifier"],"updatePoint":{"line":428,"column":54,"index":18523},"line":428,"code":"      it('should use escaped css selectors with quotes', () => {\n        anchor.href = 'https://www.google.com/some-path?hello=world#test%22hello';\n        anchorWithName.setAttribute('name', 'test%22hello');\n        handler.handle_(event);\n        expect(replaceStateForTargetStub).to.be.calledWith('#test%22hello');\n        return replaceStateForTargetPromise.then(() => {\n          expect(scrollIntoViewStub).to.be.calledWith(anchorWithName);\n        });\n      });","file":"unit/test-navigation.js","skipped":false,"dir":"test"},{"name":"should push and pop history state with pre-existing hash","suites":["when linking to identifier"],"updatePoint":{"line":437,"column":66,"index":19003},"line":437,"code":"      it('should push and pop history state with pre-existing hash', () => {\n        win.location.href = 'https://www.google.com/some-path?hello=world#first';\n        handler.isIosSafari_ = true;\n        handler.isIframed_ = false;\n        handler.handle_(event);\n        expect(replaceStateForTargetStub).to.be.calledOnce;\n        expect(replaceStateForTargetStub).to.be.calledWith('#test');\n      });","file":"unit/test-navigation.js","skipped":false,"dir":"test"},{"name":"should only scroll same hash, no history changes","suites":["when linking to identifier"],"updatePoint":{"line":445,"column":58,"index":19398},"line":445,"code":"      it('should only scroll same hash, no history changes', () => {\n        win.location.href = 'https://www.google.com/some-path?hello=world#test';\n        handler.handle_(event);\n        expect(replaceStateForTargetStub).to.not.be.called;\n        expect(scrollIntoViewStub).to.be.calledOnce;\n        expect(scrollIntoViewStub).to.be.calledWith(elementWithId);\n      });","file":"unit/test-navigation.js","skipped":false,"dir":"test"},{"name":"should delegate navigation if viewer supports A2A","suites":["when linking to rel=amphtml"],"updatePoint":{"line":458,"column":59,"index":19982},"line":458,"code":"      it('should delegate navigation if viewer supports A2A', () => {\n        const stub = env.sandbox.stub(handler, 'navigateToAmpUrl').returns(true);\n        handler.handle_(event);\n        expect(stub).to.be.calledOnce;\n        expect(stub).calledWithExactly('https://amp.pub.com/amp_page', '<a rel=amphtml>');\n\n        // If viewer handles it, we should prevent default and not handle nav\n        // ourselves.\n        expect(event.defaultPrevented).to.be.true;\n        expect(handleNavSpy).to.not.be.called;\n      });","file":"unit/test-navigation.js","skipped":false,"dir":"test"},{"name":"should behave normally if viewer does not support A2A","suites":["when linking to rel=amphtml"],"updatePoint":{"line":469,"column":63,"index":20509},"line":469,"code":"      it('should behave normally if viewer does not support A2A', () => {\n        const stub = env.sandbox.stub(handler, 'navigateToAmpUrl').returns(false);\n        handler.handle_(event);\n        expect(stub).to.be.calledOnce;\n        expect(stub).calledWithExactly('https://amp.pub.com/amp_page', '<a rel=amphtml>');\n\n        // If viewer doesn't handles it, we should not prevent default and\n        // handle nav ourselves.\n        expect(event.defaultPrevented).to.be.false;\n        expect(handleNavSpy).to.be.calledOnce;\n      });","file":"unit/test-navigation.js","skipped":false,"dir":"test"},{"name":"should reject invalid protocols","suites":["navigateTo"],"updatePoint":{"line":487,"column":41,"index":21211},"line":487,"code":"      it('should reject invalid protocols', () => {\n        const newUrl = /*eslint no-script-url: 0*/'javascript:alert(1)';\n        expect(win.location.href).to.equal('https://www.pub.com/');\n        allowConsoleError(() => {\n          handler.navigateTo(win, newUrl);\n        });\n        // No navigation so window location should be unchanged.\n        expect(win.location.href).to.equal('https://www.pub.com/');\n      });","file":"unit/test-navigation.js","skipped":false,"dir":"test"},{"name":"should navigate relative to source url","suites":["navigateTo"],"updatePoint":{"line":496,"column":48,"index":21643},"line":496,"code":"      it('should navigate relative to source url', () => {\n        // URLs relative to root.\n        win.location.href = 'https://cdn.ampproject.org/c/s/www.pub.com/dir/page.html';\n        handler.navigateTo(win, '/abc.html');\n        expect(win.location.href).to.equal('https://www.pub.com/abc.html');\n\n        // URLs relative to current directory.\n        win.location.href = 'https://cdn.ampproject.org/c/s/www.pub.com/dir/page.html';\n        handler.navigateTo(win, 'abc.html');\n        expect(win.location.href).to.equal('https://www.pub.com/dir/abc.html');\n      });","file":"unit/test-navigation.js","skipped":false,"dir":"test"},{"name":"should delegate navigation to viewer if necessary","suites":["navigateTo"],"updatePoint":{"line":507,"column":59,"index":22228},"line":507,"code":"      it('should delegate navigation to viewer if necessary', () => {\n        const meta = doc.createElement('meta');\n        meta.setAttribute('name', 'amp-to-amp-navigation');\n        meta.setAttribute('content', 'feature-foo, action-bar');\n        ampdoc.getRootNode().head.appendChild(meta);\n        const send = env.sandbox.stub(handler.viewer_, 'sendMessage');\n        const hasCapability = env.sandbox.stub(handler.viewer_, 'hasCapability');\n        hasCapability.returns(true);\n        expect(win.location.href).to.equal('https://www.pub.com/');\n\n        // Delegate to viewer if opt_requestedBy matches the <meta> tag content\n        // and the viewer supports A2A.\n        handler.navigateTo(win, 'https://amp.pub.com/amp_page', 'feature-foo');\n        expect(hasCapability).to.be.calledWithExactly('a2a');\n        expect(send).to.be.calledOnce;\n        expect(send).to.be.calledWithExactly('a2aNavigate', {\n          requestedBy: 'feature-foo',\n          url: 'https://amp.pub.com/amp_page'\n        });\n        expect(win.location.href).to.equal('https://www.pub.com/');\n\n        // If opt_requestedBy doesn't match, navigate top normally.\n        handler.navigateTo(win, 'https://amp.pub.com/amp_page', 'no-match');\n        expect(send).to.be.calledOnce;\n        expect(win.location.href).to.equal('https://amp.pub.com/amp_page');\n\n        // If opt_requestedBy matches but viewer doesn't support A2A, navigate\n        // top normally.\n        send.reset();\n        hasCapability.returns(false);\n        handler.navigateTo(win, 'https://amp.pub.com/different', 'action-bar');\n        expect(send).to.not.be.called;\n        expect(win.location.href).to.equal('https://amp.pub.com/different');\n      });","file":"unit/test-navigation.js","skipped":false,"dir":"test"},{"name":"should allow with trusted viewer","suites":["viewer intercept navigation"],"updatePoint":{"line":557,"column":42,"index":24644},"line":557,"code":"      it('should allow with trusted viewer', () => {\n        handler.isTrustedViewer_ = true;\n        handler.isLocalViewer_ = false;\n        handler.handle_(event);\n        expect(viewerInterceptsNavigationSpy).to.be.calledOnce;\n        expect(viewerInterceptsNavigationSpy).to.be.calledWithExactly('https://www.google.com/other', 'intercept_click');\n        expect(sendMessageStub).to.be.calledOnce;\n        expect(sendMessageStub).to.be.calledWithExactly('navigateTo', {\n          url: 'https://www.google.com/other',\n          requestedBy: 'intercept_click'\n        });\n        expect(event.defaultPrevented).to.be.true;\n      });","file":"unit/test-navigation.js","skipped":false,"dir":"test"},{"name":"should allow with local viewer","suites":["viewer intercept navigation"],"updatePoint":{"line":570,"column":40,"index":25277},"line":570,"code":"      it('should allow with local viewer', () => {\n        handler.isTrustedViewer_ = false;\n        handler.isLocalViewer_ = true;\n        handler.handle_(event);\n        expect(ampdoc.getRootNode().documentElement.hasAttribute('allow-navigation-interception')).to.be.true;\n        expect(viewerInterceptsNavigationSpy).to.be.calledOnce;\n        expect(viewerInterceptsNavigationSpy).to.be.calledWithExactly('https://www.google.com/other', 'intercept_click');\n        expect(sendMessageStub).to.be.calledOnce;\n        expect(sendMessageStub).to.be.calledWithExactly('navigateTo', {\n          url: 'https://www.google.com/other',\n          requestedBy: 'intercept_click'\n        });\n        expect(event.defaultPrevented).to.be.true;\n      });","file":"unit/test-navigation.js","skipped":false,"dir":"test"},{"name":"should require trusted or local viewer","suites":["viewer intercept navigation"],"updatePoint":{"line":584,"column":48,"index":26029},"line":584,"code":"      it('should require trusted or local viewer', () => {\n        handler.isTrustedViewer_ = false;\n        handler.isLocalViewer_ = false;\n        handler.handle_(event);\n        expect(viewerInterceptsNavigationSpy).to.be.calledOnce;\n        expect(viewerInterceptsNavigationSpy).to.be.calledWithExactly('https://www.google.com/other', 'intercept_click');\n        expect(sendMessageStub).to.not.be.called;\n        expect(event.defaultPrevented).to.be.false;\n      });","file":"unit/test-navigation.js","skipped":false,"dir":"test"},{"name":"should require interceptNavigation viewer capability","suites":["viewer intercept navigation"],"updatePoint":{"line":593,"column":62,"index":26514},"line":593,"code":"      it('should require interceptNavigation viewer capability', () => {\n        hasCapabilityStub.returns(false);\n        handler.handle_(event);\n        expect(viewerInterceptsNavigationSpy).to.be.calledOnce;\n        expect(viewerInterceptsNavigationSpy).to.be.calledWithExactly('https://www.google.com/other', 'intercept_click');\n        expect(sendMessageStub).to.not.be.called;\n        expect(event.defaultPrevented).to.be.false;\n      });","file":"unit/test-navigation.js","skipped":false,"dir":"test"},{"name":"should not intercept requests a shadow doc","suites":["viewer intercept navigation"],"updatePoint":{"line":601,"column":52,"index":26949},"line":601,"code":"      it('should not intercept requests a shadow doc', () => {\n        handler.isTrustedViewer_ = true;\n        handler.ampdoc.isSingleDoc = () => false;\n        // isSingleDoc affects where the services get stored. So stub the getters.\n        env.sandbox.stub(Services, 'urlForDoc').returns(handler.ampdoc.win.__AMP_SERVICES.url.obj);\n        env.sandbox.stub(Services, 'viewerForDoc').returns(handler.ampdoc.win.__AMP_SERVICES.viewer.obj);\n        handler.handle_(event);\n        expect(viewerInterceptsNavigationSpy).to.be.calledOnce;\n        expect(viewerInterceptsNavigationSpy).to.be.calledWithExactly('https://www.google.com/other', 'intercept_click');\n        expect(sendMessageStub).to.not.be.called;\n        expect(event.defaultPrevented).to.be.false;\n      });","file":"unit/test-navigation.js","skipped":false,"dir":"test"},{"name":"should require opted in ampdoc","suites":["viewer intercept navigation"],"updatePoint":{"line":613,"column":40,"index":27710},"line":613,"code":"      it('should require opted in ampdoc', () => {\n        ampdoc.getRootNode().documentElement.removeAttribute('allow-navigation-interception');\n        handler.handle_(event);\n        expect(viewerInterceptsNavigationSpy).to.be.calledOnce;\n        expect(viewerInterceptsNavigationSpy).to.be.calledWithExactly('https://www.google.com/other', 'intercept_click');\n        expect(sendMessageStub).to.not.be.called;\n        expect(event.defaultPrevented).to.be.false;\n      });","file":"unit/test-navigation.js","skipped":false,"dir":"test"},{"name":"should adopt correctly to embed","suites":["fie embed"],"updatePoint":{"line":675,"column":41,"index":30207},"line":675,"code":"      it('should adopt correctly to embed', () => {\n        expect(handler.ampdoc).to.equal(ampdoc);\n        expect(handler.rootNode_).to.equal(embed.win.document);\n        expect(handler.isEmbed_).to.be.true;\n      });","file":"unit/test-navigation.js","skipped":false,"dir":"test"},{"name":"should update target to _blank","suites":["fie embed","when linking to a different origin or path"],"updatePoint":{"line":681,"column":42,"index":30497},"line":681,"code":"        it('should update target to _blank', () => {\n          anchor.href = 'https://www.google.com/some-other-path';\n          handler.handle_(event);\n          expect(event.defaultPrevented).to.be.false;\n          expect(winOpenStub).to.not.be.called;\n          expect(scrollIntoViewStub).to.not.be.called;\n          expect(anchor.getAttribute('target')).to.equal('_blank');\n        });","file":"unit/test-navigation.js","skipped":false,"dir":"test"},{"name":"should keep the target when specified","suites":["fie embed","when linking to a different origin or path"],"updatePoint":{"line":689,"column":49,"index":30894},"line":689,"code":"        it('should keep the target when specified', () => {\n          anchor.href = 'https://www.google.com/some-other-path';\n          anchor.setAttribute('target', '_top');\n          handler.handle_(event);\n          expect(event.defaultPrevented).to.be.false;\n          expect(winOpenStub).to.not.be.called;\n          expect(scrollIntoViewStub).to.not.be.called;\n          expect(anchor.getAttribute('target')).to.equal('_top');\n        });","file":"unit/test-navigation.js","skipped":false,"dir":"test"},{"name":"should reset the target when illegal specified","suites":["fie embed","when linking to a different origin or path"],"updatePoint":{"line":698,"column":58,"index":31347},"line":698,"code":"        it('should reset the target when illegal specified', () => {\n          anchor.href = 'https://www.google.com/some-other-path';\n          anchor.setAttribute('target', '_self');\n          handler.handle_(event);\n          expect(event.defaultPrevented).to.be.false;\n          expect(winOpenStub).to.not.be.called;\n          expect(scrollIntoViewStub).to.not.be.called;\n          expect(anchor.getAttribute('target')).to.equal('_blank');\n        });","file":"unit/test-navigation.js","skipped":false,"dir":"test"},{"name":"should NOT do anything, but cancel the event","suites":["fie embed","when linking to identifier"],"updatePoint":{"line":712,"column":56,"index":31969},"line":712,"code":"        it('should NOT do anything, but cancel the event', () => {\n          handler.handle_(event);\n          expect(event.defaultPrevented).to.be.true;\n          expect(replaceStateForTargetStub).to.not.be.called;\n          expect(scrollIntoViewStub).to.not.be.called;\n        });","file":"unit/test-navigation.js","skipped":false,"dir":"test"},{"name":"should replace CLICK_X and CLICK_Y in href","suites":["fie embed","when linking to identifier"],"updatePoint":{"line":732,"column":48,"index":32501},"line":732,"code":"  it('should replace CLICK_X and CLICK_Y in href', () => {\n    const a = createElementWithAttributes(doc, 'a', {\n      href: 'http://example.com/?x=CLICK_X&y=CLICK_Y'\n    });\n    const div = createElementWithAttributes(doc, 'div', {});\n    a.appendChild(div);\n    doc.body.appendChild(a);\n\n    // first click\n    maybeExpandUrlParamsForTesting(ampdoc, {\n      target: div,\n      pageX: 12,\n      pageY: 34\n    });\n    expect(a.href).to.equal('http://example.com/?x=12&y=34');\n\n    // second click\n    maybeExpandUrlParamsForTesting(ampdoc, {\n      target: div,\n      pageX: 23,\n      pageY: 45\n    });\n    expect(a.href).to.equal('http://example.com/?x=23&y=45');\n  });","file":"unit/test-navigation.js","skipped":false,"dir":"test"},{"name":"show UI in sequence","suites":["Notification UI Manager"],"updatePoint":{"line":39,"column":27,"index":1018},"line":39,"code":"    it('show UI in sequence', function* () {\n      manager.registerUI(show1);\n      manager.registerUI(show2);\n      manager.registerUI(show3);\n      yield macroTask();\n      expect(showSpy1).to.be.calledOnce;\n      expect(showSpy2).to.not.be.called;\n      expect(showSpy3).to.not.be.called;\n      resolve1();\n      yield macroTask();\n      expect(showSpy1).to.be.calledOnce;\n      expect(showSpy2).to.be.calledOnce;\n      expect(showSpy3).to.not.be.called;\n      resolve2();\n      yield macroTask();\n      expect(showSpy1).to.be.calledOnce;\n      expect(showSpy2).to.be.calledOnce;\n      expect(showSpy3).to.be.calledOnce;\n      resolve3();\n      yield macroTask();\n      expect(showSpy1).to.be.calledOnce;\n      expect(showSpy2).to.be.calledOnce;\n      expect(showSpy3).to.be.calledOnce;\n    });","file":"unit/test-notification-ui-manager.js","skipped":false,"dir":"test"},{"name":"queue empty handler","suites":["Notification UI Manager"],"updatePoint":{"line":63,"column":27,"index":1816},"line":63,"code":"    it('queue empty handler', function* () {\n      const handler = env.sandbox.spy();\n      manager.registerUI(show1);\n      manager.registerUI(show2);\n      manager.onQueueEmpty(handler);\n      expect(handler).to.not.be.called;\n      resolve1();\n      resolve2();\n      yield macroTask();\n      expect(handler).to.be.calledOnce;\n    });","file":"unit/test-notification-ui-manager.js","skipped":false,"dir":"test"},{"name":"queue not empty handler","suites":["Notification UI Manager"],"updatePoint":{"line":74,"column":31,"index":2158},"line":74,"code":"    it('queue not empty handler', function* () {\n      const handler = env.sandbox.spy();\n      manager.onQueueNotEmpty(handler);\n      manager.registerUI(show1);\n      manager.registerUI(show2);\n      expect(handler).to.be.calledOnce;\n      resolve1();\n      resolve2();\n      yield macroTask();\n      expect(handler).to.be.calledOnce;\n      manager.registerUI(show1);\n      expect(handler).to.be.calledTwice;\n    });","file":"unit/test-notification-ui-manager.js","skipped":false,"dir":"test"},{"name":"should return on first success","suites":[],"updatePoint":{"line":16,"column":36,"index":406},"line":16,"code":"  it('should return on first success', () => {\n    const dialog = {};\n    windowMock.expects('open').withExactArgs('https://example.com/', '_blank', 'width=1').returns(dialog).once();\n    const res = openWindowDialog(windowApi, 'https://example.com/', '_blank', 'width=1');\n    expect(res).to.equal(dialog);\n  });","file":"unit/test-open-window-dialog.js","skipped":false,"dir":"test"},{"name":"should retry on first null","suites":[],"updatePoint":{"line":22,"column":32,"index":716},"line":22,"code":"  it('should retry on first null', () => {\n    const dialog = {};\n    windowMock.expects('open').withExactArgs('https://example.com/', '_blank', 'width=1').returns(null).once();\n    windowMock.expects('open').withExactArgs('https://example.com/', '_top').returns(dialog).once();\n    const res = openWindowDialog(windowApi, 'https://example.com/', '_blank', 'width=1');\n    expect(res).to.equal(dialog);\n  });","file":"unit/test-open-window-dialog.js","skipped":false,"dir":"test"},{"name":"should retry on first undefined","suites":[],"updatePoint":{"line":29,"column":37,"index":1130},"line":29,"code":"  it('should retry on first undefined', () => {\n    const dialog = {};\n    windowMock.expects('open').withExactArgs('https://example.com/', '_blank', 'width=1').returns(undefined).once();\n    windowMock.expects('open').withExactArgs('https://example.com/', '_top').returns(dialog).once();\n    const res = openWindowDialog(windowApi, 'https://example.com/', '_blank', 'width=1');\n    expect(res).to.equal(dialog);\n  });","file":"unit/test-open-window-dialog.js","skipped":false,"dir":"test"},{"name":"should retry on first exception","suites":[],"updatePoint":{"line":36,"column":37,"index":1549},"line":36,"code":"  it('should retry on first exception', () => {\n    const dialog = {};\n    windowMock.expects('open').withExactArgs('https://example.com/', '_blank', 'width=1').throws(new Error('intentional')).once();\n    windowMock.expects('open').withExactArgs('https://example.com/', '_top').returns(dialog).once();\n    allowConsoleError(() => {\n      const res = openWindowDialog(windowApi, 'https://example.com/', '_blank', 'width=1');\n      expect(res).to.equal(dialog);\n    });\n  });","file":"unit/test-open-window-dialog.js","skipped":false,"dir":"test"},{"name":"should return the final result","suites":[],"updatePoint":{"line":45,"column":36,"index":2023},"line":45,"code":"  it('should return the final result', () => {\n    windowMock.expects('open').withExactArgs('https://example.com/', '_blank', 'width=1').returns(undefined).once();\n    windowMock.expects('open').withExactArgs('https://example.com/', '_top').returns(null).once();\n    const res = openWindowDialog(windowApi, 'https://example.com/', '_blank', 'width=1');\n    expect(res).to.be.null;\n  });","file":"unit/test-open-window-dialog.js","skipped":false,"dir":"test"},{"name":"should return the final exception","suites":[],"updatePoint":{"line":51,"column":39,"index":2413},"line":51,"code":"  it('should return the final exception', () => {\n    windowMock.expects('open').withExactArgs('https://example.com/', '_blank', 'width=1').throws(new Error('intentional1')).once();\n    windowMock.expects('open').withExactArgs('https://example.com/', '_top').throws(new Error('intentional2')).once();\n    allowConsoleError(() => {\n      expect(() => {\n        openWindowDialog(windowApi, 'https://example.com/', '_blank', 'width=1');\n      }).to.throw(/intentional2/);\n    });\n  });","file":"unit/test-open-window-dialog.js","skipped":false,"dir":"test"},{"name":"should not retry with noopener set","suites":[],"updatePoint":{"line":60,"column":40,"index":2897},"line":60,"code":"  it('should not retry with noopener set', () => {\n    windowMock.expects('open').withExactArgs('https://example.com/', '_blank', 'noopener,width=1').returns(null).once();\n    const res = openWindowDialog(windowApi, 'https://example.com/', '_blank', 'noopener,width=1');\n    expect(res).to.be.null;\n  });","file":"unit/test-open-window-dialog.js","skipped":false,"dir":"test"},{"name":"should retry only non-top target","suites":[],"updatePoint":{"line":65,"column":38,"index":3200},"line":65,"code":"  it('should retry only non-top target', () => {\n    windowMock.expects('open').withExactArgs('https://example.com/', '_top', 'width=1').returns(null).once();\n    const res = openWindowDialog(windowApi, 'https://example.com/', '_top', 'width=1');\n    expect(res).to.be.null;\n  });","file":"unit/test-open-window-dialog.js","skipped":false,"dir":"test"},{"name":"should return false if no token is found","suites":[],"updatePoint":{"line":32,"column":46,"index":1529},"line":32,"code":"  it('should return false if no token is found', function* () {\n    const experiments = originExperiments.getExperiments();\n    expect(experiments).to.eventually.deep.equal([]);\n    yield experiments;\n    expect(error).to.not.be.called;\n  });","file":"unit/test-origin-experiments.js","skipped":false,"dir":"test"},{"name":"should return false if crypto is unavailable","suites":[],"updatePoint":{"line":38,"column":50,"index":1776},"line":38,"code":"  it('should return false if crypto is unavailable', function* () {\n    isPkcsAvailable.returns(false);\n    const experiments = originExperiments.getExperiments();\n    expect(experiments).to.eventually.deep.equal([]);\n    expect(error).calledWithMatch(TAG, 'Crypto is unavailable');\n  });","file":"unit/test-origin-experiments.js","skipped":false,"dir":"test"},{"name":"should return false for missing token","suites":[],"updatePoint":{"line":44,"column":43,"index":2058},"line":44,"code":"  it('should return false for missing token', function* () {\n    setupMetaTagWith('');\n    const experiments = originExperiments.getExperiments();\n    expect(experiments).to.eventually.deep.equal([]);\n    yield experiments;\n    expect(error).calledWithMatch(TAG, 'Missing content for experiment token');\n  });","file":"unit/test-origin-experiments.js","skipped":false,"dir":"test"},{"name":"should return false if origin does not match","suites":[],"updatePoint":{"line":51,"column":50,"index":2375},"line":51,"code":"  it('should return false if origin does not match', function* () {\n    setupMetaTagWith(token);\n    win.location.href = 'https://not-origin.com';\n    const experiments = originExperiments.getExperiments();\n    expect(experiments).to.eventually.deep.equal([]);\n    yield experiments;\n    expect(error).calledWithMatch(TAG, 'Failed to verify experiment token');\n  });","file":"unit/test-origin-experiments.js","skipped":false,"dir":"test"},{"name":"should return true for valid token with matching origin","suites":[],"updatePoint":{"line":59,"column":61,"index":2753},"line":59,"code":"  it('should return true for valid token with matching origin', function* () {\n    setupMetaTagWith(token);\n    win.location.href = 'https://origin.com';\n    const experiments = originExperiments.getExperiments();\n    expect(experiments).to.eventually.deep.equal(['foo']);\n    yield experiments;\n    expect(error).to.not.be.called;\n  });","file":"unit/test-origin-experiments.js","skipped":false,"dir":"test"},{"name":"should return false if experiment is not in config","suites":[],"updatePoint":{"line":67,"column":56,"index":3086},"line":67,"code":"  it('should return false if experiment is not in config', function* () {\n    setupMetaTagWith(token);\n    win.location.href = 'https://origin.com';\n    const experiments = originExperiments.getExperiments();\n    expect(experiments).to.eventually.deep.equal([]);\n    yield experiments;\n    expect(error).to.not.be.called;\n  });","file":"unit/test-origin-experiments.js","skipped":false,"dir":"test"},{"name":"should throw for an unknown token version number","suites":["TokenMaster"],"updatePoint":{"line":125,"column":56,"index":5163},"line":125,"code":"    it('should throw for an unknown token version number', () => {\n      const verify = tokenMaster.verifyToken(tokenWithBadVersion, 'https://origin.com', publicKey);\n      return expect(verify).to.eventually.be.rejectedWith('Unrecognized token version: 42');\n    });","file":"unit/test-origin-experiments.js","skipped":false,"dir":"test"},{"name":"should throw if config length exceeds byte length","suites":["TokenMaster"],"updatePoint":{"line":129,"column":57,"index":5432},"line":129,"code":"    it('should throw if config length exceeds byte length', () => {\n      const verify = tokenMaster.verifyToken(tokenWithBadConfigLength, 'https://origin.com', publicKey);\n      return expect(verify).to.eventually.be.rejectedWith('Unexpected config length: 999');\n    });","file":"unit/test-origin-experiments.js","skipped":false,"dir":"test"},{"name":"should throw if signature cannot be verified","suites":["TokenMaster"],"updatePoint":{"line":133,"column":52,"index":5700},"line":133,"code":"    it('should throw if signature cannot be verified', () => {\n      const verify = tokenMaster.verifyToken(tokenWithBadSignature, 'https://origin.com', publicKey);\n      return expect(verify).to.eventually.be.rejectedWith('Failed to verify token signature.');\n    });","file":"unit/test-origin-experiments.js","skipped":false,"dir":"test"},{"name":"should throw if approved origin is not current origin","suites":["TokenMaster"],"updatePoint":{"line":137,"column":61,"index":5978},"line":137,"code":"    it('should throw if approved origin is not current origin', () => {\n      const verify = tokenMaster.verifyToken(token, 'https://not-origin.com', publicKey);\n      return expect(verify).to.eventually.be.rejectedWith(/does not match window/);\n    });","file":"unit/test-origin-experiments.js","skipped":false,"dir":"test"},{"name":"should return false if trial has expired","suites":["TokenMaster"],"updatePoint":{"line":141,"column":48,"index":6219},"line":141,"code":"    it('should return false if trial has expired', () => {\n      const verify = tokenMaster.verifyToken(tokenWithExpiredExperiment, 'https://origin.com', publicKey);\n      return expect(verify).to.eventually.be.rejectedWith('Experiment \"expired\" has expired.');\n    });","file":"unit/test-origin-experiments.js","skipped":false,"dir":"test"},{"name":"should return true for a well-formed, unexpired token","suites":["TokenMaster"],"updatePoint":{"line":145,"column":61,"index":6502},"line":145,"code":"    it('should return true for a well-formed, unexpired token', () => {\n      const verify = tokenMaster.verifyToken(token, 'https://origin.com', publicKey);\n      return expect(verify).to.eventually.be.fulfilled;\n    });","file":"unit/test-origin-experiments.js","skipped":false,"dir":"test"},{"name":"should ignore trailing slash on location","suites":["TokenMaster"],"updatePoint":{"line":149,"column":48,"index":6711},"line":149,"code":"    it('should ignore trailing slash on location', () => {\n      const verify = tokenMaster.verifyToken(token, 'https://origin.com/', publicKey);\n      return expect(verify).to.eventually.be.fulfilled;\n    });","file":"unit/test-origin-experiments.js","skipped":false,"dir":"test"},{"name":"should not throw with a single element","suites":["schedulePause"],"updatePoint":{"line":66,"column":46,"index":2141},"line":66,"code":"    it('should not throw with a single element', () => {\n      expect(() => {\n        owners.schedulePause(parent, children[1]);\n      }).to.not.throw();\n    });","file":"unit/test-owners.js","skipped":false,"dir":"test"},{"name":"should not throw with an array of elements","suites":["schedulePause"],"updatePoint":{"line":71,"column":50,"index":2307},"line":71,"code":"    it('should not throw with an array of elements', () => {\n      expect(() => {\n        owners.schedulePause(parent, [children[1], children[2]]);\n      }).to.not.throw();\n    });","file":"unit/test-owners.js","skipped":false,"dir":"test"},{"name":"should be ok with non amp children","suites":["schedulePause"],"updatePoint":{"line":76,"column":42,"index":2480},"line":76,"code":"    it('should be ok with non amp children', () => {\n      expect(() => {\n        owners.schedulePause(parent, children);\n        owners.schedulePause(parent, children[0]);\n      }).to.not.throw();\n    });","file":"unit/test-owners.js","skipped":false,"dir":"test"},{"name":"should call pause on custom element","suites":["schedulePause"],"updatePoint":{"line":82,"column":43,"index":2687},"line":82,"code":"    it('should call pause on custom element', () => {\n      const stub1 = env.sandbox.stub(children[1], 'pause');\n      const stub2 = env.sandbox.stub(children[2], 'pause');\n      owners.schedulePause(parent, children);\n      expect(stub1.calledOnce).to.be.true;\n      expect(stub2.calledOnce).to.be.true;\n    });","file":"unit/test-owners.js","skipped":false,"dir":"test"},{"name":"should not throw with a single element","suites":["scheduleResume"],"updatePoint":{"line":95,"column":46,"index":3153},"line":95,"code":"    it('should not throw with a single element', () => {\n      expect(() => {\n        owners.scheduleResume(parent, children[1]);\n      }).to.not.throw();\n    });","file":"unit/test-owners.js","skipped":false,"dir":"test"},{"name":"should not throw with an array of elements","suites":["scheduleResume"],"updatePoint":{"line":100,"column":50,"index":3320},"line":100,"code":"    it('should not throw with an array of elements', () => {\n      expect(() => {\n        owners.scheduleResume(parent, [children[1], children[2]]);\n      }).to.not.throw();\n    });","file":"unit/test-owners.js","skipped":false,"dir":"test"},{"name":"should be ok with non amp children","suites":["scheduleResume"],"updatePoint":{"line":105,"column":42,"index":3494},"line":105,"code":"    it('should be ok with non amp children', () => {\n      expect(() => {\n        owners.scheduleResume(parent, children);\n        owners.scheduleResume(parent, children[0]);\n      }).to.not.throw();\n    });","file":"unit/test-owners.js","skipped":false,"dir":"test"},{"name":"should call resume on paused custom elements","suites":["scheduleResume"],"updatePoint":{"line":111,"column":52,"index":3712},"line":111,"code":"    it('should call resume on paused custom elements', () => {\n      const stub1 = env.sandbox.stub(children[1], 'resume');\n      owners.scheduleResume(parent, children);\n      expect(stub1.calledOnce).to.be.true;\n    });","file":"unit/test-owners.js","skipped":false,"dir":"test"},{"name":"should call resume on non-paused custom elements","suites":["scheduleResume"],"updatePoint":{"line":116,"column":56,"index":3938},"line":116,"code":"    it('should call resume on non-paused custom elements', () => {\n      const stub2 = env.sandbox.stub(children[2], 'resume');\n      owners.scheduleResume(parent, children);\n      expect(stub2.calledOnce).to.be.true;\n    });","file":"unit/test-owners.js","skipped":false,"dir":"test"},{"name":"should schedule when resource is READY_FOR_LAYOUT","suites":["scheduleLayout"],"updatePoint":{"line":123,"column":57,"index":4208},"line":123,"code":"    it('should schedule when resource is READY_FOR_LAYOUT', () => {\n      const resource1 = setElementResourceState(children[1], ResourceState_Enum.READY_FOR_LAYOUT);\n      const ensureLoadedStub = env.sandbox.stub(resource1.element, 'ensureLoaded').resolves();\n      owners.scheduleLayout(parent, children[1]);\n      expect(ensureLoadedStub).to.be.calledWith(parent.getLayoutPriority());\n    });","file":"unit/test-owners.js","skipped":false,"dir":"test"},{"name":"should schedule even when not build","suites":["scheduleLayout"],"updatePoint":{"line":129,"column":43,"index":4591},"line":129,"code":"    it('should schedule even when not build', async () => {\n      const resource1 = setElementResourceState(children[1], ResourceState_Enum.NOT_BUILT);\n      env.sandbox.stub(resource1, 'whenBuilt').returns(new Promise(() => {}));\n      const ensureLoadedStub = env.sandbox.stub(resource1.element, 'ensureLoaded').resolves();\n      owners.scheduleLayout(parent, children[1]);\n      expect(ensureLoadedStub).to.be.calledWith(parent.getLayoutPriority());\n    });","file":"unit/test-owners.js","skipped":false,"dir":"test"},{"name":"should not throw with a single element","suites":["scheduleUnlayout"],"updatePoint":{"line":138,"column":46,"index":5100},"line":138,"code":"    it('should not throw with a single element', () => {\n      expect(() => {\n        owners.scheduleUnlayout(parent, children[1]);\n      }).to.not.throw();\n    });","file":"unit/test-owners.js","skipped":false,"dir":"test"},{"name":"should not throw with an array of elements","suites":["scheduleUnlayout"],"updatePoint":{"line":143,"column":50,"index":5269},"line":143,"code":"    it('should not throw with an array of elements', () => {\n      expect(() => {\n        owners.scheduleUnlayout(parent, [children[1], children[2]]);\n      }).to.not.throw();\n    });","file":"unit/test-owners.js","skipped":false,"dir":"test"},{"name":"should be ok with non amp children","suites":["scheduleUnlayout"],"updatePoint":{"line":148,"column":42,"index":5445},"line":148,"code":"    it('should be ok with non amp children', () => {\n      expect(() => {\n        owners.scheduleUnlayout(parent, children);\n      }).to.not.throw();\n    });","file":"unit/test-owners.js","skipped":false,"dir":"test"},{"name":"should schedule on custom element with multiple children","suites":["scheduleUnlayout"],"updatePoint":{"line":153,"column":64,"index":5625},"line":153,"code":"    it('should schedule on custom element with multiple children', () => {\n      const stub1 = env.sandbox.stub(children[1], 'unlayoutCallback');\n      const stub2 = env.sandbox.stub(children[2], 'unlayoutCallback');\n      owners.scheduleUnlayout(parent, children);\n      expect(stub1.called).to.be.true;\n      expect(stub2.called).to.be.true;\n    });","file":"unit/test-owners.js","skipped":false,"dir":"test"},{"name":"should not throw with a single element","suites":["schedulePreload"],"updatePoint":{"line":168,"column":46,"index":6242},"line":168,"code":"    it('should not throw with a single element', () => {\n      expect(() => {\n        owners.schedulePreload(parent, children[1]);\n      }).to.not.throw();\n    });","file":"unit/test-owners.js","skipped":false,"dir":"test"},{"name":"should not throw with an array of elements","suites":["schedulePreload"],"updatePoint":{"line":173,"column":50,"index":6410},"line":173,"code":"    it('should not throw with an array of elements', () => {\n      expect(() => {\n        owners.schedulePreload(parent, [children[1], children[2]]);\n      }).to.not.throw();\n    });","file":"unit/test-owners.js","skipped":false,"dir":"test"},{"name":"should be ok with non amp children","suites":["schedulePreload"],"updatePoint":{"line":178,"column":42,"index":6585},"line":178,"code":"    it('should be ok with non amp children', () => {\n      expect(() => {\n        owners.schedulePreload(parent, children);\n      }).to.not.throw();\n    });","file":"unit/test-owners.js","skipped":false,"dir":"test"},{"name":"should schedule on custom element with multiple children","suites":["schedulePreload"],"updatePoint":{"line":183,"column":64,"index":6764},"line":183,"code":"    it('should schedule on custom element with multiple children', () => {\n      const ensureLoadedStub1 = env.sandbox.stub(children[1], 'ensureLoaded').resolves();\n      const ensureLoadedStub2 = env.sandbox.stub(children[2], 'ensureLoaded').resolves();\n      owners.schedulePreload(parent, children);\n      expect(ensureLoadedStub1).to.be.calledOnce.calledWith(parent.getLayoutPriority());\n      expect(ensureLoadedStub2).to.be.calledOnce.calledWith(parent.getLayoutPriority());\n    });","file":"unit/test-owners.js","skipped":false,"dir":"test"},{"name":"should schedule on nested custom element placeholder","suites":["schedulePreload"],"updatePoint":{"line":190,"column":60,"index":7249},"line":190,"code":"    it('should schedule on nested custom element placeholder', () => {\n      const placeholder1 = createElementWithResource(10, ResourceState_Enum.READY_FOR_LAYOUT);\n      children[1].getPlaceholder = () => placeholder1;\n      const placeholder2 = createElementWithResource(11, ResourceState_Enum.READY_FOR_LAYOUT);\n      children[2].getPlaceholder = () => placeholder2;\n      const stub1 = env.sandbox.stub(children[1], 'ensureLoaded');\n      const stub2 = env.sandbox.stub(children[2], 'ensureLoaded');\n      const stub3 = env.sandbox.stub(placeholder1, 'ensureLoaded');\n      const stub4 = env.sandbox.stub(placeholder2, 'ensureLoaded');\n      owners.schedulePreload(parent, children);\n      expect(stub1).to.be.calledOnce;\n      expect(stub2).to.be.calledOnce;\n      expect(stub3).to.be.calledOnce;\n      expect(stub4).to.be.calledOnce;\n    });","file":"unit/test-owners.js","skipped":false,"dir":"test"},{"name":"should schedule amp-* placeholder inside non-amp element","suites":["schedulePreload"],"updatePoint":{"line":205,"column":64,"index":8102},"line":205,"code":"    it('should schedule amp-* placeholder inside non-amp element', () => {\n      const insidePlaceholder1 = createElementWithResource(10, ResourceState_Enum.READY_FOR_LAYOUT);\n      const placeholder1 = doc.createElement('div');\n      children[0].getElementsByClassName = () => [insidePlaceholder1];\n      children[0].getPlaceholder = () => placeholder1;\n      const stub1 = env.sandbox.stub(insidePlaceholder1, 'ensureLoaded');\n      owners.schedulePreload(parent, children);\n      expect(stub1).to.be.calledOnce;\n    });","file":"unit/test-owners.js","skipped":false,"dir":"test"},{"name":"should layout AMP element itself","suites":["requireLayout"],"updatePoint":{"line":227,"column":40,"index":9096},"line":227,"code":"    it('should layout AMP element itself', async () => {\n      setAllResourceState(ResourceState_Enum.READY_FOR_LAYOUT);\n      const scheduledElements = await owners.requireLayout(parent);\n      expect(scheduledElements).to.deep.equal([0]);\n    });","file":"unit/test-owners.js","skipped":false,"dir":"test"},{"name":"should layout non-AMP element's all AMP children","suites":["requireLayout"],"updatePoint":{"line":232,"column":56,"index":9361},"line":232,"code":"    it(\"should layout non-AMP element's all AMP children\", async () => {\n      setAllResourceState(ResourceState_Enum.READY_FOR_LAYOUT);\n      const scheduledElements = await owners.requireLayout(children[0]);\n      expect(scheduledElements).to.deep.equal([3, 4]);\n    });","file":"unit/test-owners.js","skipped":false,"dir":"test"},{"name":"should layout element w/ state=LAYOUT_FAILED","suites":["requireLayout"],"updatePoint":{"line":237,"column":52,"index":9630},"line":237,"code":"    it('should layout element w/ state=LAYOUT_FAILED', async () => {\n      setElementResourceState(parent, ResourceState_Enum.LAYOUT_FAILED);\n      const scheduledElements = await owners.requireLayout(parent);\n      expect(scheduledElements).to.deep.equal([0]);\n    });","file":"unit/test-owners.js","skipped":false,"dir":"test"},{"name":"should layout element w/ state=LAYOUT_COMPLETE","suites":["requireLayout"],"updatePoint":{"line":242,"column":54,"index":9902},"line":242,"code":"    it('should layout element w/ state=LAYOUT_COMPLETE', async () => {\n      setElementResourceState(parent, ResourceState_Enum.LAYOUT_COMPLETE);\n      const scheduledElements = await owners.requireLayout(parent);\n      expect(scheduledElements).to.deep.equal([0]);\n    });","file":"unit/test-owners.js","skipped":false,"dir":"test"},{"name":"should not double schedule element w/ state=LAYOUT_SCHEDULED","suites":["requireLayout"],"updatePoint":{"line":247,"column":68,"index":10190},"line":247,"code":"    it('should not double schedule element w/ state=LAYOUT_SCHEDULED', async () => {\n      setElementResourceState(parent, ResourceState_Enum.LAYOUT_SCHEDULED);\n      const scheduledElements = await owners.requireLayout(parent);\n      expect(scheduledElements).to.deep.equal([0]);\n    });","file":"unit/test-owners.js","skipped":false,"dir":"test"},{"name":"should not require layout for undisplayed element","suites":["requireLayout"],"updatePoint":{"line":252,"column":57,"index":10468},"line":252,"code":"    it('should not require layout for undisplayed element', async () => {\n      const resource = setElementResourceState(parent, ResourceState_Enum.READY_FOR_LAYOUT);\n      resource.isDisplayedForTesting = false;\n      const scheduledElements = await owners.requireLayout(parent);\n      expect(scheduledElements).to.deep.equal([0]);\n    });","file":"unit/test-owners.js","skipped":false,"dir":"test"},{"name":"handler called","suites":[],"updatePoint":{"line":18,"column":20,"index":455},"line":18,"code":"  it('handler called', () => {\n    let delayedFunc = null;\n    timerMock.expects('delay').withExactArgs(env.sandbox.match(value => {\n      delayedFunc = value;\n      return true;\n    }), 0).returns(1).once();\n    pass.schedule();\n    expect(pass.isPending()).to.equal(true);\n    delayedFunc();\n    expect(handlerCalled).to.equal(1);\n    expect(pass.isPending()).to.equal(false);\n\n    // RESET\n    handlerCalled = 0;\n  });","file":"unit/test-pass.js","skipped":false,"dir":"test"},{"name":"schedule no delay","suites":[],"updatePoint":{"line":33,"column":23,"index":880},"line":33,"code":"  it('schedule no delay', () => {\n    timerMock.expects('delay').withExactArgs(env.sandbox.match.func, 0).returns(1).once();\n    timerMock.expects('cancel').never();\n    pass.schedule();\n  });","file":"unit/test-pass.js","skipped":false,"dir":"test"},{"name":"schedule with delay","suites":[],"updatePoint":{"line":38,"column":25,"index":1075},"line":38,"code":"  it('schedule with delay', () => {\n    timerMock.expects('delay').withExactArgs(env.sandbox.match.func, 111).returns(1).once();\n    timerMock.expects('cancel').never();\n    pass.schedule(111);\n  });","file":"unit/test-pass.js","skipped":false,"dir":"test"},{"name":"schedule later","suites":[],"updatePoint":{"line":43,"column":20,"index":1270},"line":43,"code":"  it('schedule later', () => {\n    timerMock.expects('delay').withExactArgs(env.sandbox.match.func, 111).returns(1).once();\n    timerMock.expects('cancel').never();\n    pass.schedule(111);\n    // Will never schedule b/c there's an earlier pass still pending.\n    const isScheduled = pass.schedule(222);\n    expect(isScheduled).to.equal(false);\n  });","file":"unit/test-pass.js","skipped":false,"dir":"test"},{"name":"schedule earlier","suites":[],"updatePoint":{"line":51,"column":22,"index":1622},"line":51,"code":"  it('schedule earlier', () => {\n    timerMock.expects('delay').withExactArgs(env.sandbox.match.func, 222).returns(1).once();\n    timerMock.expects('delay').withExactArgs(env.sandbox.match.func, 111).returns(2).once();\n    timerMock.expects('cancel').withExactArgs(1).once();\n    pass.schedule(222);\n    // Will re-schedule b/c the existing pass is later.\n    const isScheduled = pass.schedule(111);\n    expect(isScheduled).to.equal(true);\n  });","file":"unit/test-pass.js","skipped":false,"dir":"test"},{"name":"should have a min delay for recursive schedule","suites":[],"updatePoint":{"line":60,"column":52,"index":2098},"line":60,"code":"  it('should have a min delay for recursive schedule', () => {\n    pass = new Pass(window, () => {\n      expect(pass.running_).to.equal(true);\n      if (handlerCalled++ == 0) {\n        pass.schedule();\n      }\n    });\n    let delayedFunc0 = null;\n    let delayedFunc1 = null;\n    timerMock.expects('delay').withExactArgs(env.sandbox.match(value => {\n      delayedFunc0 = value;\n      return true;\n    }), 0).returns(1).once();\n    timerMock.expects('delay').withExactArgs(env.sandbox.match(value => {\n      delayedFunc1 = value;\n      return true;\n    }), 10).returns(1).once();\n    pass.schedule();\n    expect(pass.isPending()).to.equal(true);\n    delayedFunc0();\n    expect(handlerCalled).to.equal(1);\n    delayedFunc1();\n    expect(handlerCalled).to.equal(2);\n    expect(pass.isPending()).to.equal(false);\n    expect(pass.running_).to.equal(false);\n\n    // RESET\n    handlerCalled = 0;\n  });","file":"unit/test-pass.js","skipped":false,"dir":"test"},{"name":"should be resilient to unsupported PerformanceObserver entry types","suites":[],"updatePoint":{"line":13,"column":72,"index":685},"line":13,"code":"  it('should be resilient to unsupported PerformanceObserver entry types', () => {\n    env.sandbox.stub(env.win.PerformanceObserver.prototype, 'observe').throws();\n    allowConsoleError(() => {\n      expect(() => {\n        new Performance(env.win);\n      }).to.not.throw();\n    });\n  });","file":"unit/test-performance.js","skipped":false,"dir":"test"},{"name":"should queue up tick events","suites":["when viewer is not ready"],"updatePoint":{"line":50,"column":35,"index":1812},"line":50,"code":"    it('should queue up tick events', () => {\n      expect(perf.events_.length).to.equal(0);\n      perf.tick('start');\n      expect(perf.events_.length).to.equal(1);\n      perf.tick('startEnd');\n      expect(perf.events_.length).to.equal(2);\n    });","file":"unit/test-performance.js","skipped":false,"dir":"test"},{"name":"should map tickDelta to tick","suites":["when viewer is not ready"],"updatePoint":{"line":57,"column":36,"index":2063},"line":57,"code":"    it('should map tickDelta to tick', () => {\n      expect(perf.events_.length).to.equal(0);\n      perf.tickDelta('test', 99);\n      expect(perf.events_.length).to.equal(1);\n      expect(perf.events_[0]).to.be.jsonEqual({\n        label: 'test',\n        delta: 99\n      });\n    });","file":"unit/test-performance.js","skipped":false,"dir":"test"},{"name":"should map tickDelta to non-zero tick","suites":["when viewer is not ready"],"updatePoint":{"line":66,"column":45,"index":2354},"line":66,"code":"    it('should map tickDelta to non-zero tick', () => {\n      let c = 0;\n      expect(perf.events_.length).to.equal(c);\n      perf.tickDelta('test1', 0);\n      expect(perf.events_.length).to.equal(c + 1);\n      expect(perf.events_[c]).to.be.jsonEqual({\n        label: 'test1',\n        delta: 0\n      });\n      c++;\n      perf.tickDelta('test2', -1);\n      expect(perf.events_.length).to.equal(c + 1);\n      expect(perf.events_[c]).to.be.jsonEqual({\n        label: 'test2',\n        delta: 0\n      });\n      c++;\n      perf.tickDelta('test3', 2);\n      expect(perf.events_.length).to.equal(c + 1);\n      expect(perf.events_[c]).to.be.jsonEqual({\n        label: 'test3',\n        delta: 2\n      });\n    });","file":"unit/test-performance.js","skipped":false,"dir":"test"},{"name":"should have max 50 queued events","suites":["when viewer is not ready"],"updatePoint":{"line":90,"column":40,"index":3052},"line":90,"code":"    it('should have max 50 queued events', () => {\n      expect(perf.events_.length).to.equal(0);\n      for (let i = 0; i < 200; i++) {\n        perf.tick(`start${i}`);\n      }\n      expect(perf.events_.length).to.equal(50);\n    });","file":"unit/test-performance.js","skipped":false,"dir":"test"},{"name":"should add default absolute start time on the queued tick event","suites":["when viewer is not ready"],"updatePoint":{"line":97,"column":71,"index":3315},"line":97,"code":"    it('should add default absolute start time on the queued tick event', () => {\n      clock.tick(150);\n      perf.tick('start0');\n      expect(perf.events_[0]).to.be.jsonEqual({\n        label: 'start0',\n        value: timeOrigin + 150\n      });\n    });","file":"unit/test-performance.js","skipped":false,"dir":"test"},{"name":"should drop events in the head of the queue","suites":["when viewer is not ready"],"updatePoint":{"line":105,"column":51,"index":3550},"line":105,"code":"    it('should drop events in the head of the queue', () => {\n      const tickTime = 100;\n      clock.tick(tickTime);\n      expect(perf.events_.length).to.equal(0);\n      for (let i = 0; i < 50; i++) {\n        perf.tick(`start${i}`);\n      }\n      expect(perf.events_.length).to.equal(50);\n      expect(perf.events_[0]).to.be.jsonEqual({\n        label: 'start0',\n        value: timeOrigin + tickTime\n      });\n      clock.tick(1);\n      perf.tick('start50');\n      expect(perf.events_[0]).to.be.jsonEqual({\n        label: 'start1',\n        value: timeOrigin + tickTime\n      });\n      expect(perf.events_[49]).to.be.jsonEqual({\n        label: 'start50',\n        value: timeOrigin + tickTime + 1\n      });\n    });","file":"unit/test-performance.js","skipped":false,"dir":"test"},{"name":"should configure correctly when viewer is not embedded","suites":["when viewer is ready,","config"],"updatePoint":{"line":158,"column":64,"index":5660},"line":158,"code":"      it('should configure correctly when viewer is not embedded', () => {\n        env.sandbox.stub(viewer, 'getParam').withArgs('csi').returns(null);\n        env.sandbox.stub(viewer, 'isEmbedded').returns(false);\n        perf.coreServicesAvailable().then(() => {\n          expect(perf.isPerformanceTrackingOn()).to.be.false;\n        });\n      });","file":"unit/test-performance.js","skipped":false,"dir":"test"},{"name":"should flush events when channel is ready","suites":["when viewer is ready,","channel established"],"updatePoint":{"line":167,"column":51,"index":6047},"line":167,"code":"      it('should flush events when channel is ready', () => {\n        env.sandbox.stub(viewer, 'getParam').withArgs('csi').returns(null);\n        env.sandbox.stub(viewer, 'whenMessagingReady').returns(Promise.resolve());\n        expect(perf.isMessagingReady_).to.be.false;\n        const promise = perf.coreServicesAvailable();\n        expect(perf.events_.length).to.equal(0);\n        perf.tick('start');\n        expect(perf.events_.length).to.equal(1);\n        perf.tick('startEnd');\n        expect(perf.events_.length).to.equal(2);\n        expect(perf.isMessagingReady_).to.be.false;\n        const flushSpy = env.sandbox.spy(perf, 'flush');\n        expect(flushSpy).to.have.callCount(0);\n        perf.flush();\n        expect(flushSpy).to.have.callCount(1);\n        expect(perf.events_.length).to.equal(2);\n        perf.isPerformanceTrackingOn_ = true;\n        clock.tick(1);\n        return promise.then(() => {\n          expect(perf.isMessagingReady_).to.be.true;\n          const msrCalls = viewerSendMessageStub.withArgs('tick', env.sandbox.match(arg => arg.label === 'msr'));\n          expect(msrCalls).to.be.calledOnce;\n          expect(msrCalls.args[0][1]).to.be.jsonEqual({\n            label: 'msr',\n            delta: 1\n          });\n          const timeOriginCall = viewerSendMessageStub.withArgs('tick', env.sandbox.match(arg => arg.label === 'timeOrigin'));\n          expect(timeOriginCall).to.be.calledOnce;\n          expect(timeOriginCall).calledWithMatch('tick', {\n            label: 'timeOrigin',\n            value: 100\n          });\n          expect(flushSpy).to.have.callCount(5);\n          expect(perf.events_.length).to.equal(0);\n        });\n      });","file":"unit/test-performance.js","skipped":false,"dir":"test"},{"name":"should not flush anything","suites":["when viewer is ready,","channel not established"],"updatePoint":{"line":205,"column":35,"index":7757},"line":205,"code":"      it('should not flush anything', () => {\n        env.sandbox.stub(viewer, 'whenMessagingReady').returns(null);\n        expect(perf.isMessagingReady_).to.be.false;\n        expect(perf.events_.length).to.equal(0);\n        perf.tick('start');\n        expect(perf.events_.length).to.equal(1);\n        perf.tick('startEnd');\n        expect(perf.events_.length).to.equal(2);\n        expect(perf.isMessagingReady_).to.be.false;\n        const flushSpy = env.sandbox.spy(perf, 'flush');\n        expect(flushSpy).to.have.callCount(0);\n        perf.flush();\n        expect(flushSpy).to.have.callCount(1);\n        expect(perf.events_.length).to.equal(2);\n        return Promise.all([perf.coreServicesAvailable(), ampdoc.whenFirstVisible()]).then(() => {\n          expect(flushSpy).to.have.callCount(4);\n          expect(perf.isMessagingReady_).to.be.false;\n          const count = 5;\n          expect(perf.events_.length).to.equal(count);\n        });\n      });","file":"unit/test-performance.js","skipped":false,"dir":"test"},{"name":"should not offset by visible time when viewer is not set","suites":["when viewer is ready,","tickSinceVisible"],"updatePoint":{"line":239,"column":66,"index":9171},"line":239,"code":"      it('should not offset by visible time when viewer is not set', () => {\n        perf.viewer_ = {\n          isEmbedded: () => false\n        };\n        clock.tick(10);\n        perf.tickSinceVisible('test');\n        expect(tickDeltaStub).to.have.been.calledOnce;\n        expect(tickDeltaStub.firstCall.args[1]).to.equal(10);\n      });","file":"unit/test-performance.js","skipped":false,"dir":"test"},{"name":"should always be zero before visible","suites":["when viewer is ready,","tickSinceVisible"],"updatePoint":{"line":248,"column":46,"index":9488},"line":248,"code":"      it('should always be zero before visible', () => {\n        clock.tick(10);\n        perf.tickSinceVisible('test');\n        expect(tickDeltaStub).to.have.been.calledOnce;\n        expect(tickDeltaStub.firstCall.args[1]).to.equal(0);\n      });","file":"unit/test-performance.js","skipped":false,"dir":"test"},{"name":"should calculate after visible","suites":["when viewer is ready,","tickSinceVisible"],"updatePoint":{"line":254,"column":40,"index":9728},"line":254,"code":"      it('should calculate after visible', () => {\n        firstVisibleTime = timeOrigin + 5;\n        clock.tick(10);\n        perf.tickSinceVisible('test');\n        expect(tickDeltaStub).to.have.been.calledOnce;\n        expect(tickDeltaStub.firstCall.args[1]).to.equal(5);\n      });","file":"unit/test-performance.js","skipped":false,"dir":"test"},{"name":"should be zero after visible but for earlier event","suites":["when viewer is ready,","tickSinceVisible"],"updatePoint":{"line":261,"column":60,"index":10031},"line":261,"code":"      it('should be zero after visible but for earlier event', () => {\n        firstVisibleTime = timeOrigin + 5;\n\n        // An earlier event, since event time (4) is less than visible time (5).\n        clock.tick(4);\n        perf.tickSinceVisible('test');\n        expect(tickDeltaStub).to.have.been.calledOnce;\n        expect(tickDeltaStub.firstCall.args[1]).to.equal(0);\n      });","file":"unit/test-performance.js","skipped":false,"dir":"test"},{"name":"should not forward queued ticks","suites":["when viewer is ready,","and performanceTracking is off"],"updatePoint":{"line":276,"column":41,"index":10633},"line":276,"code":"      it('should not forward queued ticks', () => {\n        perf.tick('start0');\n        clock.tick(1);\n        perf.tick('start1', 'start0');\n        expect(perf.events_.length).to.equal(2);\n        return perf.coreServicesAvailable().then(() => {\n          perf.flushQueuedTicks_();\n          perf.flush();\n          expect(perf.events_.length).to.equal(0);\n          expect(viewerSendMessageStub.withArgs('tick')).to.not.be.called;\n          expect(viewerSendMessageStub.withArgs('sendCsi', undefined, /* cancelUnsent */true)).to.not.be.called;\n        });\n      });","file":"unit/test-performance.js","skipped":false,"dir":"test"},{"name":"should ignore all calls to tick","suites":["when viewer is ready,","and performanceTracking is off"],"updatePoint":{"line":289,"column":41,"index":11203},"line":289,"code":"      it('should ignore all calls to tick', () => {\n        perf.tick('start0');\n        return perf.coreServicesAvailable().then(() => {\n          expect(viewerSendMessageStub.withArgs('tick')).to.not.be.called;\n        });\n      });","file":"unit/test-performance.js","skipped":false,"dir":"test"},{"name":"should ignore all calls to flush","suites":["when viewer is ready,","and performanceTracking is off"],"updatePoint":{"line":295,"column":42,"index":11439},"line":295,"code":"      it('should ignore all calls to flush', () => {\n        perf.tick('start0');\n        perf.flush();\n        return perf.coreServicesAvailable().then(() => {\n          expect(viewerSendMessageStub.withArgs('sendCsi', undefined, /* cancelUnsent */true)).to.not.be.called;\n        });\n      });","file":"unit/test-performance.js","skipped":false,"dir":"test"},{"name":"should forward all queued tick events","suites":["when viewer is ready,","and performanceTracking is on"],"updatePoint":{"line":309,"column":47,"index":12057},"line":309,"code":"      it('should forward all queued tick events', () => {\n        perf.tick('start0');\n        clock.tick(1);\n        perf.tick('start1');\n        expect(perf.events_.length).to.equal(2);\n        return perf.coreServicesAvailable().then(() => {\n          expect(viewerSendMessageStub.withArgs('tick').getCall(0).args[1]).to.be.jsonEqual({\n            label: 'start0',\n            value: timeOrigin\n          });\n          expect(viewerSendMessageStub.withArgs('tick').getCall(1).args[1]).to.be.jsonEqual({\n            label: 'start1',\n            value: timeOrigin + 1\n          });\n          expect(viewerSendMessageStub.withArgs('tick').getCall(4).args[1]).to.be.jsonEqual({\n            label: 'msr',\n            delta: 1\n          });\n        });\n      });","file":"unit/test-performance.js","skipped":false,"dir":"test"},{"name":"should have no more queued tick events after flush","suites":["when viewer is ready,","and performanceTracking is on"],"updatePoint":{"line":329,"column":60,"index":12830},"line":329,"code":"      it('should have no more queued tick events after flush', () => {\n        perf.tick('start0');\n        perf.tick('start1');\n        expect(perf.events_.length).to.equal(2);\n        return perf.coreServicesAvailable().then(() => {\n          expect(perf.events_.length).to.equal(0);\n        });\n      });","file":"unit/test-performance.js","skipped":false,"dir":"test"},{"name":"should forward tick events","suites":["when viewer is ready,","and performanceTracking is on"],"updatePoint":{"line":337,"column":36,"index":13114},"line":337,"code":"      it('should forward tick events', () => {\n        return perf.coreServicesAvailable().then(() => {\n          clock.tick(100);\n          perf.tick('start0');\n          perf.tick('start1', 300);\n          expect(viewerSendMessageStub.withArgs('tick', env.sandbox.match(arg => arg.label == 'start0')).args[0][1]).to.be.jsonEqual({\n            label: 'start0',\n            value: timeOrigin + 100\n          });\n          expect(viewerSendMessageStub.withArgs('tick', env.sandbox.match(arg => arg.label == 'start1')).args[0][1]).to.be.jsonEqual({\n            label: 'start1',\n            delta: 300\n          });\n        });\n      });","file":"unit/test-performance.js","skipped":false,"dir":"test"},{"name":"should call the flush callback","suites":["when viewer is ready,","and performanceTracking is on"],"updatePoint":{"line":352,"column":40,"index":13753},"line":352,"code":"      it('should call the flush callback', () => {\n        // Make sure \"first visible\" arrives after \"channel ready\".\n        const firstVisiblePromise = new Promise(() => {});\n        env.sandbox.stub(ampdoc, 'whenFirstVisible').returns(firstVisiblePromise);\n        expect(viewerSendMessageStub.withArgs('sendCsi')).to.have.callCount(0);\n        // coreServicesAvailable calls flush once.\n        return perf.coreServicesAvailable().then(() => {\n          expect(viewerSendMessageStub.withArgs('sendCsi')).to.have.callCount(1);\n          perf.flush();\n          expect(viewerSendMessageStub.withArgs('sendCsi')).to.have.callCount(2);\n          perf.flush();\n          expect(viewerSendMessageStub.withArgs('sendCsi')).to.have.callCount(3);\n        });\n      });","file":"unit/test-performance.js","skipped":false,"dir":"test"},{"name":"should flush with the story experiment enabled","suites":["when viewer is ready,","and performanceTracking is on"],"updatePoint":{"line":366,"column":56,"index":14534},"line":366,"code":"      it('should flush with the story experiment enabled', () => {\n        const storyEl = win.document.createElement('amp-story');\n        const bodyEl = win.document.body;\n        bodyEl.insertBefore(storyEl, bodyEl.firstElementChild || null);\n        return perf.coreServicesAvailable().then(() => {\n          expect(viewerSendMessageStub.withArgs('sendCsi')).to.have.callCount(1);\n          const call = viewerSendMessageStub.withArgs('sendCsi').getCall(0);\n          expect(call.args[1]).to.have.property('ampexp');\n          expect(call.args[1].ampexp).to.contain('story');\n        });\n      });","file":"unit/test-performance.js","skipped":false,"dir":"test"},{"name":"should wait for visible resources","suites":["when viewer is ready,","and performanceTracking is on"],"updatePoint":{"line":379,"column":39,"index":15133},"line":379,"code":"  it('should wait for visible resources', () => {\n    const resources = Services.resourcesForDoc(ampdoc);\n    env.sandbox.stub(resources, 'whenFirstPass').returns(Promise.resolve());\n    const whenContentIniLoadStub = env.sandbox.stub(IniLoad, 'whenContentIniLoad').returns(Promise.resolve());\n    perf.resources_ = resources;\n    return perf.whenViewportLayoutComplete_().then(() => {\n      expect(whenContentIniLoadStub).to.be.calledWith(perf.win.document.documentElement, perf.win, env.sandbox.match(arg => arg.left == 0 && arg.top == 0 && arg.width == perf.win.innerWidth && arg.height == perf.win.innerHeight), /* inPrerender */true);\n    });\n  });","file":"unit/test-performance.js","skipped":false,"dir":"test"},{"name":"should call prerenderComplete on viewer","suites":["coreServicesAvailable","document started in prerender"],"updatePoint":{"line":423,"column":49,"index":17243},"line":423,"code":"      it('should call prerenderComplete on viewer', () => {\n        clock.tick(100);\n        whenFirstVisibleResolve();\n        env.sandbox.stub(viewer, 'getParam').withArgs('csi').returns('1');\n        env.sandbox.stub(viewer, 'isEmbedded').returns(true);\n        return ampdoc.whenFirstVisible().then(() => {\n          clock.tick(400);\n          whenViewportLayoutCompleteResolve();\n          return perf.whenViewportLayoutComplete_().then(() => {\n            expect(viewerSendMessageStub.withArgs('prerenderComplete').firstCall.args[1].value).to.equal(400);\n            expect(getPerformanceMarks()).to.have.members(['dr', 'ol', 'visible', 'ofv', 'pc']);\n          });\n        });\n      });","file":"unit/test-performance.js","skipped":false,"dir":"test"},{"name":"should call prerenderComplete on viewer even if csi is off","suites":["coreServicesAvailable","document started in prerender"],"updatePoint":{"line":437,"column":68,"index":17956},"line":437,"code":"      it('should call prerenderComplete on viewer even if csi is off', () => {\n        clock.tick(100);\n        whenFirstVisibleResolve();\n        env.sandbox.stub(viewer, 'getParam').withArgs('csi').returns(null);\n        return ampdoc.whenFirstVisible().then(() => {\n          clock.tick(400);\n          whenViewportLayoutCompleteResolve();\n          return perf.whenViewportLayoutComplete_().then(() => {\n            expect(viewerSendMessageStub.withArgs('prerenderComplete').firstCall.args[1].value).to.equal(400);\n          });\n        });\n      });","file":"unit/test-performance.js","skipped":false,"dir":"test"},{"name":"should call prerenderComplete on viewer","suites":["coreServicesAvailable","document did not start in prerender"],"updatePoint":{"line":488,"column":49,"index":20354},"line":488,"code":"      it('should call prerenderComplete on viewer', async () => {\n        env.sandbox.stub(viewer, 'getParam').withArgs('csi').returns('1');\n        env.sandbox.stub(viewer, 'isEmbedded').returns(true);\n        clock.tick(100);\n        whenFirstVisibleResolve();\n        await whenFirstVisiblePromise.then(() => {\n          clock.tick(300);\n        });\n        whenViewportLayoutCompleteResolve();\n        return perf.whenViewportLayoutComplete_().then(() => {\n          expect(viewerSendMessageStub.withArgs('prerenderComplete').firstCall.args[1].value).to.equal(300);\n          expect(getPerformanceMarks()).to.have.members(['dr', 'ol', 'visible', 'ofv', 'pc']);\n        });\n      });","file":"unit/test-performance.js","skipped":false,"dir":"test"},{"name":"rtvVersion experiment","suites":["coreServicesAvailable","document did not start in prerender"],"updatePoint":{"line":532,"column":27,"index":22179},"line":532,"code":"  it('rtvVersion experiment', () => {\n    return perf.coreServicesAvailable().then(() => {\n      viewerSendMessageStub.reset();\n      perf.flush();\n      expect(viewerSendMessageStub.lastCall.args[0]).to.equal('sendCsi');\n      expect(viewerSendMessageStub.lastCall.args[1].ampexp).to.equal('rtv-' + getMode(win).rtvVersion);\n    });\n  });","file":"unit/test-performance.js","skipped":false,"dir":"test"},{"name":"addEnabledExperiment should work","suites":["coreServicesAvailable","document did not start in prerender"],"updatePoint":{"line":540,"column":38,"index":22530},"line":540,"code":"  it('addEnabledExperiment should work', () => {\n    return perf.coreServicesAvailable().then(() => {\n      perf.addEnabledExperiment('experiment-a');\n      perf.addEnabledExperiment('experiment-b');\n      perf.addEnabledExperiment('experiment-a'); // duplicated entry\n      viewerSendMessageStub.reset();\n      perf.flush();\n      expect(viewerSendMessageStub).to.be.calledWith('sendCsi', env.sandbox.match(payload => {\n        const experiments = payload.ampexp.split(',');\n        expect(experiments).to.have.length(3);\n        expect(experiments).to.have.members(['rtv-' + getMode(win).rtvVersion, 'experiment-a', 'experiment-b']);\n        return true;\n      }));\n    });\n  });","file":"unit/test-performance.js","skipped":false,"dir":"test"},{"name":"adds ssr experiments","suites":["coreServicesAvailable","document did not start in prerender"],"updatePoint":{"line":555,"column":26,"index":23200},"line":555,"code":"  it('adds ssr experiments', () => {\n    env.sandbox.stub(env.ampdoc, 'getMetaByName').withArgs('amp-usqp').returns('1=1,2=0');\n    return perf.coreServicesAvailable().then(() => {\n      viewerSendMessageStub.reset();\n      perf.flush();\n      expect(viewerSendMessageStub).to.be.calledWith('sendCsi', env.sandbox.match(payload => {\n        const experiments = payload.ampexp.split(',');\n        expect(experiments).to.have.length(3);\n        expect(experiments).to.have.members(['rtv-' + getMode(win).rtvVersion, 'ssr-1=1', 'ssr-2=0']);\n        return true;\n      }));\n    });\n  });","file":"unit/test-performance.js","skipped":false,"dir":"test"},{"name":"created before performance service registered","suites":["should forward paint metrics for performance entries"],"updatePoint":{"line":641,"column":53,"index":26125},"line":641,"code":"    it('created before performance service registered', () => {\n      // Pretend that the PaintTiming API exists.\n      env.win.PerformancePaintTiming = true;\n      const entries = [{\n        duration: 1,\n        entryType: 'paint',\n        name: 'first-paint',\n        startTime: 10\n      }, {\n        duration: 5,\n        entryType: 'paint',\n        name: 'first-contentful-paint',\n        startTime: 10\n      }];\n      const getEntriesByType = env.sandbox.stub();\n      getEntriesByType.withArgs('paint').returns(entries);\n      getEntriesByType.returns([]);\n      env.sandbox.stub(env.win.performance, 'getEntriesByType').callsFake(getEntriesByType);\n      installPerformanceService(env.win);\n      const perf = Services.performanceFor(env.win);\n      expect(perf.events_.length).to.equal(3);\n      expect(perf.events_[0]).to.be.jsonEqual({\n        label: 'fp',\n        delta: 11\n      }, {\n        label: 'fcp',\n        delta: 15\n      }, {\n        label: 'fcpv',\n        delta: 15\n      });\n      delete env.win.PerformancePaintTiming;\n    });","file":"unit/test-performance.js","skipped":false,"dir":"test"},{"name":"created after performance service registered","suites":["should forward paint metrics for performance entries"],"updatePoint":{"line":674,"column":52,"index":27174},"line":674,"code":"    it('created after performance service registered', () => {\n      // Pretend that the PaintTiming API exists.\n      env.win.PerformancePaintTiming = true;\n\n      // Stub and fake the PerformanceObserver constructor.\n      const PerformanceObserverStub = env.sandbox.stub();\n      let performanceObserver;\n      PerformanceObserverStub.callsFake(callback => {\n        performanceObserver = new PerformanceObserverImpl(callback);\n        return performanceObserver;\n      });\n      env.sandbox.stub(env.win, 'PerformanceObserver').callsFake(PerformanceObserverStub);\n      env.sandbox.stub(env.ampdoc, 'getFirstVisibleTime').callsFake(() => null);\n      installPerformanceService(env.win);\n      const perf = Services.performanceFor(env.win);\n      const entries = [{\n        duration: 1,\n        entryType: 'paint',\n        name: 'first-paint',\n        startTime: 10\n      }, {\n        duration: 5,\n        entryType: 'paint',\n        name: 'first-contentful-paint',\n        startTime: 10\n      }];\n      const list = {\n        getEntries() {\n          return entries;\n        }\n      };\n      // Fake a triggering of the first-input event.\n      performanceObserver.triggerCallback(list);\n      expect(perf.events_.length).to.equal(3);\n      expect(perf.events_[0]).to.be.jsonEqual({\n        label: 'fp',\n        delta: 11\n      }, {\n        label: 'fcp',\n        delta: 15\n      }, {\n        label: 'fcpv',\n        delta: 15\n      });\n    });","file":"unit/test-performance.js","skipped":false,"dir":"test"},{"name":"after performance service registered","suites":["should forward largest-contentful-paint metric for performance entries"],"updatePoint":{"line":724,"column":44,"index":28793},"line":724,"code":"    it('after performance service registered', async () => {\n      // Fake the Performance API.\n      env.win.PerformanceObserver.supportedEntryTypes = ['largest-contentful-paint'];\n      installPerformanceService(env.win);\n      const perf = Services.performanceFor(env.win);\n      perf.coreServicesAvailable();\n      expect(perf.events_.length).to.equal(0);\n\n      // Fake a largest-contentful-paint entry specifying a renderTime/startTime,\n      // simulating an image on the same origin or with a Timing-Allow-Origin header.\n      performanceObserver.triggerCallback({\n        getEntries() {\n          return [{\n            entryType: 'largest-contentful-paint',\n            loadTime: 10,\n            renderTime: 12,\n            startTime: 12\n          }];\n        }\n      });\n\n      // Fake a largest-contentful-paint entry with a loadTime/startTime\n      // simulating an image on a different origin without a Timing-Allow-Origin header.\n      performanceObserver.triggerCallback({\n        getEntries() {\n          return [{\n            entryType: 'largest-contentful-paint',\n            loadTime: 23,\n            renderTime: undefined,\n            startTime: 23\n          }];\n        }\n      });\n\n      // The document has become hidden, e.g. via the user switching tabs.\n      toggleVisibility(perf, false);\n      const lcpEvents = perf.events_.filter(({\n        label\n      }) => label === 'lcp');\n      expect(lcpEvents.length).to.equal(2);\n      expect(lcpEvents).deep.include({\n        label: 'lcp',\n        delta: 12\n      });\n      expect(lcpEvents).deep.include({\n        label: 'lcp',\n        delta: 23\n      });\n    });","file":"unit/test-performance.js","skipped":false,"dir":"test"},{"name":"should include lcp type","suites":["should forward largest-contentful-paint metric for performance entries"],"updatePoint":{"line":773,"column":31,"index":30417},"line":773,"code":"    it('should include lcp type', async () => {\n      // Fake the Performance API.\n      env.win.PerformanceObserver.supportedEntryTypes = ['largest-contentful-paint'];\n      installPerformanceService(env.win);\n      const perf = Services.performanceFor(env.win);\n      perf.coreServicesAvailable();\n      expect(perf.events_.length).to.equal(0);\n\n      // Fake an img being the LCP Element\n      performanceObserver.triggerCallback({\n        getEntries() {\n          return [{\n            entryType: 'largest-contentful-paint',\n            startTime: 12,\n            element: document.createElement('img')\n          }];\n        }\n      });\n      // Flush LCP\n      toggleVisibility(perf, false);\n      toggleVisibility(perf, true);\n\n      // Fake an amp-img nested within an amp-carousel.\n      const parent = document.createElement('amp-carousel');\n      const child = document.createElement('amp-img');\n      parent.appendChild(child);\n      performanceObserver.triggerCallback({\n        getEntries() {\n          return [{\n            entryType: 'largest-contentful-paint',\n            loadTime: 23,\n            renderTime: undefined,\n            startTime: 23,\n            element: child\n          }];\n        }\n      });\n      // Flush LCP again.\n      toggleVisibility(perf, false);\n\n      // A textual paragraph\n      const p = document.createElement('p');\n      p.textContent = 'hello';\n      performanceObserver.triggerCallback({\n        getEntries() {\n          return [{\n            entryType: 'largest-contentful-paint',\n            startTime: 25,\n            element: p\n          }];\n        }\n      });\n      // Flush LCP again.\n      toggleVisibility(perf, false);\n      const lcptEvents = perf.events_.filter(({\n        label\n      }) => label.startsWith('lcpt'));\n      expect(lcptEvents).deep.include({\n        label: 'lcpt',\n        delta: ELEMENT_TYPE_ENUM.image\n      });\n      expect(lcptEvents).deep.include({\n        label: 'lcpt',\n        delta: ELEMENT_TYPE_ENUM.carousel\n      });\n      expect(lcptEvents).deep.include({\n        label: 'lcpt',\n        delta: ELEMENT_TYPE_ENUM.text\n      });\n    });","file":"unit/test-performance.js","skipped":false,"dir":"test"},{"name":"created before performance service registered for Chromium 77","suites":["should forward first input metrics for performance entries"],"updatePoint":{"line":856,"column":69,"index":33222},"line":856,"code":"    it('created before performance service registered for Chromium 77', () => {\n      // Pretend that the EventTiming API exists.\n      PerformanceObserverConstructorStub.supportedEntryTypes = ['first-input'];\n      installPerformanceService(env.win);\n      const perf = Services.performanceFor(env.win);\n\n      // Fake fid that occured before the Performance service is started.\n      performanceObserver.triggerCallback({\n        getEntries() {\n          return [{\n            cancelable: true,\n            duration: 8,\n            entryType: 'first-input',\n            name: 'mousedown',\n            processingEnd: 105,\n            processingStart: 103,\n            startTime: 100\n          }];\n        }\n      });\n      expect(perf.events_.length).to.equal(1);\n      expect(perf.events_[0]).to.be.jsonEqual({\n        label: 'fid',\n        delta: 3\n      });\n    });","file":"unit/test-performance.js","skipped":false,"dir":"test"},{"name":"should not throw when layout-shift occurs before core services available","suites":["forwards cumulative layout shift metric"],"updatePoint":{"line":891,"column":80,"index":34379},"line":891,"code":"    it('should not throw when layout-shift occurs before core services available', () => {\n      // Fake the Performance API.\n      env.win.PerformanceObserver.supportedEntryTypes = ['layout-shift'];\n      const perf = getPerformance();\n\n      // Fake layout-shift that occured before core services registered\n      performanceObserver.triggerCallback({\n        getEntries() {\n          return [{\n            entryType: 'layout-shift',\n            value: 0.3,\n            hadRecentInput: false\n          }];\n        }\n      });\n      perf.coreServicesAvailable();\n    });","file":"unit/test-performance.js","skipped":false,"dir":"test"},{"name":"when the viewer visibility changes to inactive","suites":["forwards cumulative layout shift metric"],"updatePoint":{"line":908,"column":54,"index":34925},"line":908,"code":"    it('when the viewer visibility changes to inactive', () => {\n      // Specify an Android Chrome user agent.\n      env.sandbox.stub(Services.platformFor(env.win), 'isAndroid').returns(true);\n      env.sandbox.stub(Services.platformFor(env.win), 'isChrome').returns(true);\n      env.sandbox.stub(Services.platformFor(env.win), 'isSafari').returns(false);\n\n      // Fake the Performance API.\n      env.win.PerformanceObserver.supportedEntryTypes = ['layout-shift'];\n      const perf = getPerformance();\n      perf.coreServicesAvailable();\n      toggleVisibility(perf, true);\n      const parent = document.createElement('amp-carousel');\n      const child = document.createElement('amp-img');\n      parent.appendChild(child);\n\n      // Fake layout-shift that occured before the Performance service is started.\n      performanceObserver.triggerCallback({\n        getEntries() {\n          return [{\n            entryType: 'layout-shift',\n            value: 0.3,\n            startTime: 1,\n            hadRecentInput: false,\n            sources: [{\n              node: child\n            }]\n          }, {\n            entryType: 'layout-shift',\n            value: 0.25,\n            startTime: 6000,\n            hadRecentInput: false,\n            sources: [{\n              node: parent\n            }]\n          }];\n        }\n      });\n      viewerVisibilityState = VisibilityState_Enum.INACTIVE;\n      perf.onAmpDocVisibilityChange_();\n      const clsEvents = perf.events_.filter(evt => evt.label.startsWith('cls'));\n      expect(clsEvents.length).to.equal(3);\n      expect(perf.events_).deep.include({\n        label: 'cls',\n        delta: 0.3\n      });\n      expect(perf.events_).deep.include({\n        label: 'clstu',\n        delta: 8\n      });\n      expect(perf.events_).deep.include({\n        label: 'cls-1',\n        delta: 0.55\n      });\n    });","file":"unit/test-performance.js","skipped":false,"dir":"test"},{"name":"returns a promise that resolves to the value","suites":["getMetric"],"updatePoint":{"line":971,"column":52,"index":37013},"line":971,"code":"    it('returns a promise that resolves to the value', async () => {\n      const perf = getPerformance();\n      perf.tick('mbv', 1);\n      const value = await perf.getMetric('mbv');\n      expect(value).to.eq(1);\n    });","file":"unit/test-performance.js","skipped":false,"dir":"test"},{"name":"after performance service registered","suites":["forwards navigation metrics"],"updatePoint":{"line":990,"column":44,"index":37834},"line":990,"code":"    it('after performance service registered', () => {\n      // Pretend that the Navigation API exists.\n      PerformanceObserverConstructorStub.supportedEntryTypes = ['navigation'];\n      installPerformanceService(env.win);\n      const perf = Services.performanceFor(env.win);\n\n      // Fake fid that occured before the Performance service is started.\n      performanceObserver.triggerCallback({\n        getEntries() {\n          return [{\n            entryType: 'navigation',\n            domComplete: 0,\n            domContentLoadedEventEnd: 1,\n            domContentLoadedEventStart: 2,\n            domInteractive: 3,\n            loadEventEnd: 4,\n            loadEventStart: 5,\n            requestStart: 6,\n            responseStart: 7\n          }];\n        }\n      });\n      expect(perf.events_.length).to.equal(8);\n      expect(perf.events_).to.be.jsonEqual([{\n        label: 'domComplete',\n        delta: 0\n      }, {\n        label: 'domContentLoadedEventEnd',\n        delta: 1\n      }, {\n        label: 'domContentLoadedEventStart',\n        delta: 2\n      }, {\n        label: 'domInteractive',\n        delta: 3\n      }, {\n        label: 'loadEventEnd',\n        delta: 4\n      }, {\n        label: 'loadEventStart',\n        delta: 5\n      }, {\n        label: 'requestStart',\n        delta: 6\n      }, {\n        label: 'responseStart',\n        delta: 7\n      }]);\n    });","file":"unit/test-performance.js","skipped":false,"dir":"test"},{"name":"disables many observers","suites":["inabox environment"],"updatePoint":{"line":1045,"column":31,"index":39411},"line":1045,"code":"    it('disables many observers', () => {\n      PerformanceObserverConstructorStub.supportedEntryTypes = ['navigation', 'largest-contentful-paint', 'first-input', 'layout-shift'];\n      installPerformanceService(env.win);\n      env.win.__AMP_MODE.runtime = 'inabox';\n      Services.performanceFor(env.win);\n      // Each supported entryType currently leads to creation of new observer.\n      expect(PerformanceObserverConstructorStub).not.to.be.called;\n    });","file":"unit/test-performance.js","skipped":false,"dir":"test"},{"name":"should add the canonical URL to sendCsi messages","suites":["inabox environment"],"updatePoint":{"line":1076,"column":54,"index":40652},"line":1076,"code":"  it('should add the canonical URL to sendCsi messages', () => {\n    return perf.coreServicesAvailable().then(() => {\n      viewerSendMessageStub.reset();\n      perf.flush();\n      expect(viewerSendMessageStub.lastCall.args[0]).to.equal('sendCsi');\n      expect(viewerSendMessageStub.lastCall.args[1].canonicalUrl).to.equal(canonicalUrl);\n    });\n  });","file":"unit/test-performance.js","skipped":false,"dir":"test"},{"name":"should add the random eventid to sendCsi","suites":["inabox environment"],"updatePoint":{"line":1084,"column":46,"index":40997},"line":1084,"code":"  it('should add the random eventid to sendCsi', () => {\n    return perf.coreServicesAvailable().then(() => {\n      viewerSendMessageStub.reset();\n      perf.flush();\n      expect(viewerSendMessageStub.lastCall.args[0]).to.equal('sendCsi');\n      const {\n        eventid\n      } = viewerSendMessageStub.lastCall.args[1];\n      expect(() => {\n        base64UrlDecodeToBytes(eventid);\n      }).not.to.throw();\n    });\n  });","file":"unit/test-performance.js","skipped":false,"dir":"test"},{"name":"should tolerate empty or null","suites":[],"updatePoint":{"line":61,"column":35,"index":1781},"line":61,"code":"  it('should tolerate empty or null', () => {\n    testUserAgent(null);\n    testUserAgent('');\n    testUserAgent(' ');\n    testStandalone(null, null);\n    testStandalone('', null);\n    testStandalone(' ', null);\n  });","file":"unit/test-platform.js","skipped":false,"dir":"test"},{"name":"iPhone 6 Plus v8","suites":[],"updatePoint":{"line":69,"column":22,"index":1985},"line":69,"code":"  it('iPhone 6 Plus v8', () => {\n    isIos = true;\n    isSafari = true;\n    isWebKit = true;\n    majorVersion = 8;\n    iosVersion = '8.0';\n    iosMajorVersion = 8;\n    isStandalone = true;\n    userAgent = 'Mozilla/5.0 (iPhone; CPU iPhone OS 8_0 like Mac OS X)' + ' AppleWebKit/600.1.3 (KHTML, like Gecko) Version/8.0' + ' Mobile/12A4345d Safari/600.1.4';\n    testUserAgent(userAgent);\n    testStandalone(userAgent, isStandalone);\n  });","file":"unit/test-platform.js","skipped":false,"dir":"test"},{"name":"iPhone 6 Plus v9","suites":[],"updatePoint":{"line":81,"column":22,"index":2421},"line":81,"code":"  it('iPhone 6 Plus v9', () => {\n    isIos = true;\n    isSafari = true;\n    isWebKit = true;\n    majorVersion = 9;\n    iosVersion = '9.3';\n    iosMajorVersion = 9;\n    isStandalone = true;\n    userAgent = 'Mozilla/5.0 (iPhone; CPU iPhone OS 9_3 like Mac OS X)' + ' AppleWebKit/601.1.46 (KHTML, like Gecko) Version/9.0' + ' Mobile/13E230 Safari/601.1';\n    testUserAgent(userAgent);\n    testStandalone(userAgent, isStandalone);\n  });","file":"unit/test-platform.js","skipped":false,"dir":"test"},{"name":"iPhone 6 Plus no version","suites":[],"updatePoint":{"line":93,"column":30,"index":2862},"line":93,"code":"  it('iPhone 6 Plus no version', () => {\n    isIos = true;\n    isSafari = true;\n    isWebKit = true;\n    majorVersion = 9;\n    iosVersion = '9.3';\n    iosMajorVersion = 9;\n    isStandalone = true;\n    userAgent = 'Mozilla/5.0 (iPhone; CPU iPhone OS 9_3 like Mac OS X)' + ' AppleWebKit/601.1.46 (KHTML, like Gecko)' + ' Mobile/13E230 Safari/601.1';\n    testUserAgent(userAgent);\n    testStandalone(userAgent, isStandalone);\n  });","file":"unit/test-platform.js","skipped":false,"dir":"test"},{"name":"iPhone ios 10.2.1","suites":[],"updatePoint":{"line":105,"column":23,"index":3284},"line":105,"code":"  it('iPhone ios 10.2.1', () => {\n    isIos = true;\n    isSafari = true;\n    isWebKit = true;\n    majorVersion = 10;\n    iosVersion = '10.2.1';\n    iosMajorVersion = 10;\n    isStandalone = true;\n    userAgent = 'Mozilla/5.0 (iPhone; CPU iPhone OS 10_2_1 like Mac OS X)' + ' AppleWebKit/602.4.6 (KHTML, like Gecko) Version/10.0' + ' Mobile/14D27 Safari/602.1';\n    testUserAgent(userAgent);\n    testStandalone(userAgent, isStandalone);\n  });","file":"unit/test-platform.js","skipped":false,"dir":"test"},{"name":"iPad 2","suites":[],"updatePoint":{"line":117,"column":12,"index":3714},"line":117,"code":"  it('iPad 2', () => {\n    isIos = true;\n    isSafari = true;\n    isWebKit = true;\n    majorVersion = 7;\n    iosVersion = '7.0';\n    iosMajorVersion = 7;\n    isStandalone = true;\n    userAgent = 'Mozilla/5.0 (iPad; CPU OS 7_0 like Mac OS X)' + ' AppleWebKit/537.51.1 (KHTML, like Gecko) Version/7.0' + ' Mobile/11A465 Safari/9537.53';\n    testUserAgent(userAgent);\n    testStandalone(userAgent, isStandalone);\n  });","file":"unit/test-platform.js","skipped":false,"dir":"test"},{"name":"iPhone ios 10.2, Chrome ios","suites":[],"updatePoint":{"line":129,"column":33,"index":4151},"line":129,"code":"  it('iPhone ios 10.2, Chrome ios', () => {\n    isIos = true;\n    isChrome = true;\n    isWebKit = true;\n    majorVersion = 56;\n    iosVersion = '10.2';\n    iosMajorVersion = 10;\n    isStandalone = true;\n    userAgent = 'Mozilla/5.0 (iPhone; CPU iPhone OS 10_2 like Mac OS X)' + ' AppleWebKit/602.1.50 (KHTML, like Gecko) CriOS/56.0.2924.73' + ' Mobile/16D32 Safari/602.1';\n    testUserAgent(userAgent);\n    testStandalone(userAgent, isStandalone);\n  });","file":"unit/test-platform.js","skipped":false,"dir":"test"},{"name":"Desktop Safari","suites":[],"updatePoint":{"line":141,"column":20,"index":4592},"line":141,"code":"  it('Desktop Safari', () => {\n    isSafari = true;\n    isWebKit = true;\n    majorVersion = 7;\n    userAgent = 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_3) ' + 'AppleWebKit/537.75.14 (KHTML, like Gecko) Version/7.0.3 ' + 'Safari/7046A194A';\n    testUserAgent(userAgent);\n    testStandalone(userAgent, isStandalone);\n  });","file":"unit/test-platform.js","skipped":false,"dir":"test"},{"name":"Desktop Safari 12","suites":[],"updatePoint":{"line":149,"column":23,"index":4920},"line":149,"code":"  it('Desktop Safari 12', () => {\n    isSafari = true;\n    isWebKit = true;\n    majorVersion = 12;\n    userAgent = 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) ' + 'AppleWebKit/605.1.15 (KHTML, like Gecko) Version/12.0 ' + 'Safari/605.1.15';\n    testUserAgent(userAgent);\n    testStandalone(userAgent, isStandalone);\n  });","file":"unit/test-platform.js","skipped":false,"dir":"test"},{"name":"Nexus 6 Chrome","suites":[],"updatePoint":{"line":157,"column":20,"index":5244},"line":157,"code":"  it('Nexus 6 Chrome', () => {\n    isAndroid = true;\n    isChrome = true;\n    isWebKit = true;\n    majorVersion = 44;\n    isStandalone = true;\n    userAgent = 'Mozilla/5.0 (Linux; Android 5.1.1; Nexus 6 Build/LYZ28E)' + ' AppleWebKit/537.36 (KHTML, like Gecko) Chrome/44.0.2403.20' + ' Mobile Safari/537.36';\n    testUserAgent(userAgent);\n    testStandalone(userAgent, isStandalone);\n  });","file":"unit/test-platform.js","skipped":false,"dir":"test"},{"name":"Pixel Chrome 61","suites":[],"updatePoint":{"line":167,"column":21,"index":5635},"line":167,"code":"  it('Pixel Chrome 61', () => {\n    isAndroid = true;\n    isChrome = true;\n    isWebKit = true;\n    majorVersion = 61;\n    isStandalone = true;\n    userAgent = 'Mozilla/5.0 (Linux; Android 8.0.0; Pixel XL Build/OPR6.' + '170623.011) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/61.0.3163' + '.98 Mobile Safari/537.36';\n    testUserAgent(userAgent);\n    testStandalone(userAgent, isStandalone);\n  });","file":"unit/test-platform.js","skipped":false,"dir":"test"},{"name":"Firefox","suites":[],"updatePoint":{"line":177,"column":13,"index":6028},"line":177,"code":"  it('Firefox', () => {\n    isFirefox = true;\n    majorVersion = 40;\n    userAgent = 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:40.0) ' + 'Gecko/20100101 Firefox/40.1';\n    testUserAgent(userAgent);\n    testStandalone(userAgent, isStandalone);\n  });","file":"unit/test-platform.js","skipped":false,"dir":"test"},{"name":"Firefox ios","suites":[],"updatePoint":{"line":184,"column":17,"index":6279},"line":184,"code":"  it('Firefox ios', () => {\n    isIos = true;\n    isFirefox = true;\n    isWebKit = true;\n    majorVersion = 7;\n    iosVersion = '10.3.1';\n    iosMajorVersion = 10;\n    isStandalone = true;\n    userAgent = 'Mozilla/5.0 (iPhone; CPU iPhone OS 10_3_1 like Mac OS X)' + ' AppleWebKit/603.1.30 (KHTML, like Gecko) FxiOS/7.5b3349' + ' Mobile/14E304 Safari/603.1.30';\n    testUserAgent(userAgent);\n    testStandalone(userAgent, isStandalone);\n  });","file":"unit/test-platform.js","skipped":false,"dir":"test"},{"name":"Opera android","suites":[],"updatePoint":{"line":196,"column":19,"index":6723},"line":196,"code":"  it('Opera android', () => {\n    isOpera = true;\n    majorVersion = 42;\n    isAndroid = true;\n    isWebKit = true;\n    userAgent = 'Mozilla/5.0 (Linux; Android 6.0.1; Nexus 5X Build/MTC19T)' + ' AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.91 Mobile' + ' Safari/537.36 OPR/42.7.2246.114996';\n    testUserAgent(userAgent);\n    testStandalone(userAgent, isStandalone);\n  });","file":"unit/test-platform.js","skipped":false,"dir":"test"},{"name":"Opera ios","suites":[],"updatePoint":{"line":205,"column":15,"index":7104},"line":205,"code":"  it('Opera ios', () => {\n    isIos = true;\n    isOpera = true;\n    isWebKit = true;\n    majorVersion = 14;\n    iosVersion = '10.3.2';\n    iosMajorVersion = 10;\n    isStandalone = true;\n    userAgent = 'Mozilla/5.0 (iPhone; CPU iPhone OS 10_3_2 like Mac OS X)' + ' AppleWebKit/603.2.4 (KHTML, like Gecko) OPiOS/14.0.0.104835' + ' Mobile/14F89 Safari/9537.53';\n    testUserAgent(userAgent);\n    testStandalone(userAgent, isStandalone);\n  });","file":"unit/test-platform.js","skipped":false,"dir":"test"},{"name":"Edge","suites":[],"updatePoint":{"line":217,"column":10,"index":7540},"line":217,"code":"  it('Edge', () => {\n    isEdge = true;\n    majorVersion = 12;\n    userAgent = 'Mozilla/5.0 (Windows NT 10.0) AppleWebKit/537.36' + ' (KHTML, like Gecko) Chrome/42.0.2311.135 Safari/537.36' + ' Edge/12.10136';\n    testUserAgent(userAgent);\n    testStandalone(userAgent, isStandalone);\n  });","file":"unit/test-platform.js","skipped":false,"dir":"test"},{"name":"should observe identical element and start","suites":["PositionObserver for AMP doc","API functions includes observe/unobserve/changeFidelity"],"updatePoint":{"line":49,"column":52,"index":1564},"line":49,"code":"      it('should observe identical element and start', () => {\n        const spy = env.sandbox.spy(posOb, 'startCallback_');\n        posOb.observe(elem, PositionObserverFidelity_Enum.LOW, () => {});\n        posOb.observe(elem1, PositionObserverFidelity_Enum.LOW, () => {});\n        expect(posOb.workers_).to.have.length(2);\n        expect(spy).to.be.calledOnce;\n      });","file":"unit/test-position-observer.js","skipped":false,"dir":"test"},{"name":"should unobserve and stop","suites":["PositionObserver for AMP doc","API functions includes observe/unobserve/changeFidelity"],"updatePoint":{"line":56,"column":35,"index":1919},"line":56,"code":"      it('should unobserve and stop', () => {\n        const spy = env.sandbox.spy(posOb, 'stopCallback_');\n        posOb.observe(elem, PositionObserverFidelity_Enum.LOW, () => {});\n        posOb.observe(elem1, PositionObserverFidelity_Enum.LOW, () => {});\n        posOb.unobserve(elem);\n        expect(posOb.workers_).to.have.length(1);\n        expect(spy).to.not.be.called;\n        posOb.unobserve(elem1);\n        expect(spy).to.be.calledOnce;\n      });","file":"unit/test-position-observer.js","skipped":false,"dir":"test"},{"name":"should update new position with scroll event","suites":["PositionObserver for AMP doc","update position info at correct time"],"updatePoint":{"line":75,"column":54,"index":2687},"line":75,"code":"      it('should update new position with scroll event', function* () {\n        const spy = env.sandbox.spy();\n        posOb.observe(elem, PositionObserverFidelity_Enum.HIGH, spy);\n        clock.tick(2);\n        yield macroTask();\n        expect(spy).to.be.calledOnce;\n        spy.resetHistory();\n        top++;\n        win.dispatchEvent(new Event('scroll'));\n        yield macroTask();\n        expect(spy).to.be.calledOnce;\n        spy.resetHistory();\n        top++;\n        clock.tick(1);\n        yield macroTask();\n        expect(spy).to.be.calledOnce;\n        // stop fire scroll update after 500ms timeout\n        // Make the number larger to avoid window scroll event\n        clock.tick(5001);\n        spy.resetHistory();\n        top++;\n        clock.tick(1);\n        yield macroTask();\n        expect(spy).to.not.be.called;\n      });","file":"unit/test-position-observer.js","skipped":false,"dir":"test"},{"name":"should not update if element position does not change","suites":["PositionObserver for AMP doc","update position info at correct time"],"updatePoint":{"line":100,"column":63,"index":3537},"line":100,"code":"      it('should not update if element position does not change', function* () {\n        const spy = env.sandbox.spy();\n        posOb.observe(elem, PositionObserverFidelity_Enum.HIGH, spy);\n        yield macroTask();\n        expect(spy).to.be.calledOnce;\n        win.dispatchEvent(new Event('scroll'));\n        yield macroTask();\n        expect(spy).to.be.calledOnce;\n      });","file":"unit/test-position-observer.js","skipped":false,"dir":"test"},{"name":"overlap with viewport","suites":["PositionObserver for AMP doc","should provide correct position data"],"updatePoint":{"line":118,"column":31,"index":4179},"line":118,"code":"      it('overlap with viewport', function* () {\n        const viewport = Services.viewportForDoc(ampdoc);\n        const sizes = viewport.getSize();\n        const spy = env.sandbox.spy();\n        top = 1;\n        posOb.observe(elem, PositionObserverFidelity_Enum.HIGH, spy);\n        yield macroTask();\n        expect(spy).to.be.calledWith({\n          positionRect: layoutRectLtwh(2, 1, 20, 10),\n          relativePos: 'inside',\n          viewportRect: layoutRectLtwh(0, 0, sizes.width, sizes.height)\n        });\n        spy.resetHistory();\n        top = -5;\n        posOb.updateAllEntries();\n        yield macroTask();\n        expect(spy).to.be.calledWith({\n          positionRect: layoutRectLtwh(2, -5, 20, 10),\n          relativePos: 'top',\n          viewportRect: layoutRectLtwh(0, 0, sizes.width, sizes.height)\n        });\n        spy.resetHistory();\n        top = sizes.height - 5;\n        posOb.updateAllEntries();\n        yield macroTask();\n        expect(spy).to.be.calledWith({\n          positionRect: layoutRectLtwh(2, sizes.height - 5, 20, 10),\n          relativePos: 'bottom',\n          viewportRect: layoutRectLtwh(0, 0, sizes.width, sizes.height)\n        });\n      });","file":"unit/test-position-observer.js","skipped":false,"dir":"test"},{"name":"out of viewport","suites":["PositionObserver for AMP doc","should provide correct position data"],"updatePoint":{"line":149,"column":25,"index":5356},"line":149,"code":"      it('out of viewport', function* () {\n        setStyles(elem, {\n          'position': 'absolute',\n          'top': '1px',\n          'left': '2px',\n          'width': '20px',\n          'height': '10px'\n        });\n        const viewport = Services.viewportForDoc(ampdoc);\n        const sizes = viewport.getSize();\n        const spy = env.sandbox.spy();\n        posOb.observe(elem, PositionObserverFidelity_Enum.HIGH, spy);\n        yield macroTask();\n        spy.resetHistory();\n        top = -11;\n        posOb.updateAllEntries();\n        yield macroTask();\n        expect(spy).to.be.calledWith({\n          positionRect: null,\n          relativePos: 'top',\n          viewportRect: layoutRectLtwh(0, 0, sizes.width, sizes.height)\n        });\n        spy.resetHistory();\n        elem.style.top = sizes.height + 1;\n        posOb.updateAllEntries();\n        yield macroTask();\n        expect(spy).to.not.be.called;\n        top = 0;\n        posOb.updateAllEntries();\n        yield macroTask();\n        expect(spy).to.be.calledWith({\n          positionRect: layoutRectLtwh(2, 0, 20, 10),\n          relativePos: 'inside',\n          viewportRect: layoutRectLtwh(0, 0, sizes.width, sizes.height)\n        });\n        spy.resetHistory();\n        top = sizes.height + 5;\n        posOb.updateAllEntries();\n        yield macroTask();\n        expect(spy).to.be.calledWith({\n          positionRect: null,\n          relativePos: 'bottom',\n          viewportRect: layoutRectLtwh(0, 0, sizes.width, sizes.height)\n        });\n      });","file":"unit/test-position-observer.js","skipped":false,"dir":"test"},{"name":"should preconnect","suites":[],"updatePoint":{"line":60,"column":23,"index":1912},"line":60,"code":"  it('should preconnect', () => {\n    isSafari = false;\n    return getPreconnectIframe().then(iframe => {\n      const open = sandbox.spy(XMLHttpRequest.prototype, 'open');\n      preconnect.url(ampdoc, 'https://a.preconnect.com/foo/bar');\n      preconnect.url(ampdoc, 'https://a.preconnect.com/other');\n      preconnect.url(ampdoc, javascriptUrlPrefix + ':alert()');\n      expect(iframe.doc.querySelectorAll('link[rel=dns-prefetch]')).to.have.length(0);\n      return visiblePromise.then(() => {\n        expect(iframe.doc.querySelectorAll('link[rel=dns-prefetch]')).to.have.length(1);\n        expect(iframe.doc.querySelector('link[rel=dns-prefetch]').href).to.equal('https://a.preconnect.com/');\n        expect(iframe.doc.querySelectorAll('link[rel=preconnect]')).to.have.length(1);\n        expect(iframe.doc.querySelector('link[rel=preconnect]').href).to.equal('https://a.preconnect.com/');\n        expect(iframe.doc.querySelector('link[rel=preconnect]').getAttribute('referrerpolicy')).to.equal('origin');\n        expect(iframe.doc.querySelectorAll('link[rel=preload]')).to.have.length(0);\n        expect(open).to.have.not.been.called;\n      });\n    });\n  });","file":"unit/test-preconnect.js","skipped":false,"dir":"test"},{"name":"should preconnect to origins","suites":[],"updatePoint":{"line":79,"column":34,"index":3083},"line":79,"code":"  it('should preconnect to origins', async function () {\n    isSafari = false;\n    const iframe = await getPreconnectIframe();\n    sandbox.stub(Services, 'documentInfoForDoc').returns({\n      sourceUrl: 'https://sourceurl.com/',\n      canonicalUrl: 'https://canonicalurl.com/'\n    });\n    await preconnectToOrigin(iframe.doc);\n    await Promise.resolve(); // Wait to become visible.\n    const preconnects = iframe.doc.querySelectorAll('link[rel=preconnect]');\n    expect(preconnects).to.have.length(2);\n    expect(preconnects[0].href).to.equal('https://sourceurl.com/');\n    expect(preconnects[1].href).to.equal('https://canonicalurl.com/');\n  });","file":"unit/test-preconnect.js","skipped":false,"dir":"test"},{"name":"should preconnect with known support","suites":[],"updatePoint":{"line":93,"column":42,"index":3739},"line":93,"code":"  it('should preconnect with known support', () => {\n    isSafari = false;\n    preconnectSupported = true;\n    return getPreconnectIframe().then(iframe => {\n      const open = sandbox.spy(XMLHttpRequest.prototype, 'open');\n      preconnect.url(ampdoc, 'https://a.preconnect.com/foo/bar');\n      preconnect.url(ampdoc, 'https://a.preconnect.com/other');\n      preconnect.url(ampdoc, javascriptUrlPrefix + ':alert()');\n      expect(iframe.doc.querySelectorAll('link[rel=preconnect]')).to.have.length(0);\n      return visiblePromise.then(() => {\n        expect(iframe.doc.querySelectorAll('link[rel=dns-prefetch]')).to.have.length(0);\n        expect(iframe.doc.querySelectorAll('link[rel=preconnect]')).to.have.length(1);\n        expect(iframe.doc.querySelector('link[rel=preconnect]').href).to.equal('https://a.preconnect.com/');\n        expect(iframe.doc.querySelector('link[rel=preconnect]').getAttribute('referrerpolicy')).to.equal('origin');\n        expect(iframe.doc.querySelectorAll('link[rel=preload]')).to.have.length(0);\n        expect(open).to.have.not.been.called;\n      });\n    });\n  });","file":"unit/test-preconnect.js","skipped":false,"dir":"test"},{"name":"should preconnect with polyfill","suites":[],"updatePoint":{"line":112,"column":37,"index":4832},"line":112,"code":"  it('should preconnect with polyfill', () => {\n    isSafari = true;\n    return getPreconnectIframe().then(iframe => {\n      clock.tick(1485531293690);\n      const open = sandbox.spy(XMLHttpRequest.prototype, 'open');\n      const send = sandbox.spy(XMLHttpRequest.prototype, 'send');\n      preconnect.url(ampdoc, 'https://s.preconnect.com/foo/bar');\n      preconnect.url(ampdoc, 'https://s.preconnect.com/other');\n      preconnect.url(ampdoc, javascriptUrlPrefix + ':alert()');\n      expect(iframe.doc.querySelectorAll('link[rel=dns-prefetch]')).to.have.length(0);\n      return visiblePromise.then(() => {\n        expect(iframe.doc.querySelectorAll('link[rel=dns-prefetch]')).to.have.length(1);\n        expect(iframe.doc.querySelector('link[rel=dns-prefetch]').href).to.equal('https://s.preconnect.com/');\n        expect(iframe.doc.querySelectorAll('link[rel=preconnect]')).to.have.length(1);\n        expect(iframe.doc.querySelector('link[rel=preconnect]').href).to.equal('https://s.preconnect.com/');\n        expect(iframe.doc.querySelectorAll('link[rel=preload]')).to.have.length(0);\n        expect(open).to.be.calledOnce;\n        expect(send).to.be.calledOnce;\n        expect(open.args[0][1]).to.equal('https://s.preconnect.com/robots.txt?_AMP_safari_' + 'preconnect_polyfill_cachebust=' + '1485531180000');\n      });\n    });\n  });","file":"unit/test-preconnect.js","skipped":false,"dir":"test"},{"name":"should cleanup","suites":[],"updatePoint":{"line":134,"column":20,"index":6150},"line":134,"code":"  it('should cleanup', () => {\n    return getPreconnectIframe().then(iframe => {\n      preconnect.url(ampdoc, 'https://c.preconnect.com/foo/bar');\n      return visiblePromise.then(() => {\n        expect(iframe.doc.querySelectorAll('link[rel=dns-prefetch]')).to.have.length(1);\n        expect(iframe.doc.querySelectorAll('link[rel=preconnect]')).to.have.length(1);\n        iframeClock.tick(9000);\n        expect(iframe.doc.querySelectorAll('link[rel=dns-prefetch]')).to.have.length(1);\n        expect(iframe.doc.querySelectorAll('link[rel=preconnect]')).to.have.length(1);\n        iframeClock.tick(1000);\n        expect(iframe.doc.querySelectorAll('link[rel=dns-prefetch]')).to.have.length(0);\n        expect(iframe.doc.querySelectorAll('link[rel=preconnect]')).to.have.length(0);\n      });\n    });\n  });","file":"unit/test-preconnect.js","skipped":false,"dir":"test"},{"name":"should preconnect to 2 different origins","suites":[],"updatePoint":{"line":149,"column":46,"index":6980},"line":149,"code":"  it('should preconnect to 2 different origins', () => {\n    return getPreconnectIframe().then(iframe => {\n      preconnect.url(ampdoc, 'https://d.preconnect.com/foo/bar');\n      // Different origin\n      preconnect.url(ampdoc, 'https://e.preconnect.com/other');\n      return visiblePromise.then(() => {\n        expect(iframe.doc.querySelectorAll('link[rel=dns-prefetch]')).to.have.length(2);\n        expect(iframe.doc.querySelectorAll('link[rel=dns-prefetch]')[0].href).to.equal('https://d.preconnect.com/');\n        expect(iframe.doc.querySelectorAll('link[rel=dns-prefetch]')[1].href).to.equal('https://e.preconnect.com/');\n        expect(iframe.doc.querySelectorAll('link[rel=preconnect]')).to.have.length(2);\n      });\n    });\n  });","file":"unit/test-preconnect.js","skipped":false,"dir":"test"},{"name":"should timeout preconnects","suites":[],"updatePoint":{"line":162,"column":32,"index":7704},"line":162,"code":"  it('should timeout preconnects', () => {\n    return getPreconnectIframe().then(iframe => {\n      preconnect.url(ampdoc, 'https://x.preconnect.com/foo/bar');\n      return visiblePromise.then(() => {\n        expect(iframe.doc.querySelectorAll('link[rel=preconnect]')).to.have.length(1);\n        iframeClock.tick(9000);\n        preconnect.url(ampdoc, 'https://x.preconnect.com/foo/bar');\n        return visiblePromise.then(() => {\n          expect(iframe.doc.querySelectorAll('link[rel=preconnect]')).to.have.length(1);\n          iframeClock.tick(1000);\n          expect(iframe.doc.querySelectorAll('link[rel=preconnect]')).to.have.length(0);\n          // After timeout preconnect creates a new tag.\n          clock.tick(10000);\n          preconnect.url(ampdoc, 'https://x.preconnect.com/foo/bar');\n          return visiblePromise.then(() => {\n            expect(iframe.doc.querySelectorAll('link[rel=preconnect]')).to.have.length(1);\n          });\n        });\n      });\n    });\n  });","file":"unit/test-preconnect.js","skipped":false,"dir":"test"},{"name":"should timeout preconnects longer with active connect","suites":[],"updatePoint":{"line":183,"column":59,"index":8715},"line":183,"code":"  it('should timeout preconnects longer with active connect', () => {\n    return getPreconnectIframe().then(iframe => {\n      preconnect.url(ampdoc, 'https://y.preconnect.com/foo/bar', /* opt_alsoConnecting */true);\n      return visiblePromise.then(() => {\n        expect(iframe.doc.querySelectorAll('link[rel=preconnect]')).to.have.length(1);\n        iframeClock.tick(10000);\n        expect(iframe.doc.querySelectorAll('link[rel=preconnect]')).to.have.length(0);\n        clock.tick(10000);\n        return visiblePromise.then(() => {\n          preconnect.url(ampdoc, 'https://y.preconnect.com/foo/bar');\n          expect(iframe.doc.querySelectorAll('link[rel=preconnect]')).to.have.length(0);\n          clock.tick(180 * 1000);\n          return visiblePromise.then(() => {\n            preconnect.url(ampdoc, 'https://y.preconnect.com/foo/bar');\n            expect(iframe.doc.querySelectorAll('link[rel=preconnect]')).to.have.length(1);\n          });\n        });\n      });\n    });\n  });","file":"unit/test-preconnect.js","skipped":false,"dir":"test"},{"name":"should add links if feature if detected","suites":[],"updatePoint":{"line":203,"column":45,"index":9686},"line":203,"code":"  it('should add links if feature if detected', () => {\n    // Don't stub preload support allow the test to run through the browser\n    // default regardless of support or not.\n    return getPreconnectIframe( /* detectFeatures */true).then(iframe => {\n      preconnect.preload(ampdoc, 'https://a.prefetch.com/foo/bar', 'script');\n      preconnect.preload(ampdoc, 'https://a.prefetch.com/foo/bar');\n      preconnect.preload(ampdoc, 'https://a.prefetch.com/other', 'style');\n      preconnect.preload(ampdoc, javascriptUrlPrefix + ':alert()');\n      const fetches = iframe.doc.querySelectorAll('link[rel=preload]');\n      expect(fetches).to.have.length(0);\n      return visiblePromise.then(() => {\n        expect(iframe.doc.querySelectorAll('link[rel=preconnect]')).to.have.length(1);\n        expect(iframe.doc.querySelector('link[rel=preconnect]').href).to.equal('https://a.prefetch.com/');\n        const fetches = iframe.doc.querySelectorAll('link[rel=preload]');\n        expect(fetches).to.have.length(2);\n        expect(fetches[0].href).to.equal('https://a.prefetch.com/foo/bar');\n        expect(fetches[1].href).to.equal('https://a.prefetch.com/other');\n        expect(fetches[0].getAttribute('referrerpolicy')).to.equal('origin');\n      });\n    });\n  });","file":"unit/test-preconnect.js","skipped":false,"dir":"test"},{"name":"should preload","suites":[],"updatePoint":{"line":224,"column":20,"index":10919},"line":224,"code":"  it('should preload', () => {\n    preloadSupported = true;\n    return getPreconnectIframe().then(iframe => {\n      preconnect.preload(ampdoc, 'https://a.prefetch.com/foo/bar', 'script');\n      preconnect.preload(ampdoc, 'https://a.prefetch.com/foo/bar');\n      preconnect.preload(ampdoc, 'https://a.prefetch.com/other', 'style');\n      preconnect.preload(ampdoc, javascriptUrlPrefix + ':alert()');\n      return visiblePromise.then(() => {\n        // Also preconnects.\n        expect(iframe.doc.querySelectorAll('link[rel=dns-prefetch]')).to.have.length(1);\n        expect(iframe.doc.querySelector('link[rel=dns-prefetch]').href).to.equal('https://a.prefetch.com/');\n        expect(iframe.doc.querySelectorAll('link[rel=preconnect]')).to.have.length(1);\n        expect(iframe.doc.querySelector('link[rel=preconnect]').href).to.equal('https://a.prefetch.com/');\n        // Actual preload\n        const preloads = iframe.doc.querySelectorAll('link[rel=preload]');\n        expect(preloads).to.have.length(2);\n        expect(preloads[0].href).to.equal('https://a.prefetch.com/foo/bar');\n        expect(preloads[1].href).to.equal('https://a.prefetch.com/other');\n        const {\n          as\n        } = preloads[0];\n        expect(as == '' || as == 'fetch').to.be.ok;\n        preloads[0].as = 'not-valid';\n        if (preloads[0].as != 'not-valid') {\n          expect(as == '' || as == 'fetch').to.be.ok;\n        }\n      });\n    });\n  });","file":"unit/test-preconnect.js","skipped":false,"dir":"test"},{"name":"should only subscribe to touchstart initially","suites":[],"updatePoint":{"line":33,"column":51,"index":1031},"line":33,"code":"  it('should only subscribe to touchstart initially', () => {\n    expect(eventListeners['touchstart']).to.not.equal(undefined);\n    expect(eventListeners['touchmove']).to.equal(undefined);\n    expect(eventListeners['touchend']).to.equal(undefined);\n    expect(eventListeners['touchcancel']).to.equal(undefined);\n  });","file":"unit/test-pull-to-refresh.js","skipped":false,"dir":"test"},{"name":"should start tracking on touch start","suites":[],"updatePoint":{"line":39,"column":42,"index":1340},"line":39,"code":"  it('should start tracking on touch start', () => {\n    sendEvent({\n      type: 'touchstart',\n      touches: [{\n        clientY: 111\n      }]\n    });\n    expect(blocker.tracking_).to.equal(true);\n    expect(blocker.startPos_).to.equal(111);\n    expect(eventListeners['touchstart']).to.not.equal(undefined);\n    expect(eventListeners['touchmove']).to.not.equal(undefined);\n    expect(eventListeners['touchend']).to.not.equal(undefined);\n    expect(eventListeners['touchcancel']).to.not.equal(undefined);\n  });","file":"unit/test-pull-to-refresh.js","skipped":false,"dir":"test"},{"name":"should NOT start tracking with non-single-touch","suites":[],"updatePoint":{"line":53,"column":53,"index":1861},"line":53,"code":"  it('should NOT start tracking with non-single-touch', () => {\n    // No touches.\n    sendEvent({\n      type: 'touchstart'\n    });\n    expect(blocker.tracking_).to.equal(false);\n    sendEvent({\n      type: 'touchstart',\n      touches: []\n    });\n    expect(blocker.tracking_).to.equal(false);\n\n    // Multi-touch.\n    sendEvent({\n      type: 'touchstart',\n      touches: [{}, {}]\n    });\n    expect(blocker.tracking_).to.equal(false);\n  });","file":"unit/test-pull-to-refresh.js","skipped":false,"dir":"test"},{"name":"should NOT start tracking when scrolled","suites":[],"updatePoint":{"line":72,"column":45,"index":2295},"line":72,"code":"  it('should NOT start tracking when scrolled', () => {\n    viewportMock.expects('getScrollTop').returns(11).once();\n    sendEvent({\n      type: 'touchstart',\n      touches: [{\n        clientY: 111\n      }]\n    });\n    expect(blocker.tracking_).to.equal(false);\n  });","file":"unit/test-pull-to-refresh.js","skipped":false,"dir":"test"},{"name":"should stop tracking on touch end","suites":[],"updatePoint":{"line":82,"column":39,"index":2557},"line":82,"code":"  it('should stop tracking on touch end', () => {\n    sendEvent({\n      type: 'touchstart',\n      touches: [{\n        clientY: 111\n      }]\n    });\n    expect(blocker.tracking_).to.equal(true);\n    sendEvent({\n      type: 'touchend'\n    });\n    expect(blocker.tracking_).to.equal(false);\n    expect(eventListeners['touchstart']).to.not.equal(undefined);\n    expect(eventListeners['touchmove']).to.equal(undefined);\n    expect(eventListeners['touchend']).to.equal(undefined);\n    expect(eventListeners['touchcancel']).to.equal(undefined);\n  });","file":"unit/test-pull-to-refresh.js","skipped":false,"dir":"test"},{"name":"should stop tracking on touch cancel","suites":[],"updatePoint":{"line":99,"column":42,"index":3104},"line":99,"code":"  it('should stop tracking on touch cancel', () => {\n    sendEvent({\n      type: 'touchstart',\n      touches: [{\n        clientY: 111\n      }]\n    });\n    expect(blocker.tracking_).to.equal(true);\n    sendEvent({\n      type: 'touchend'\n    });\n    expect(blocker.tracking_).to.equal(false);\n    expect(eventListeners['touchstart']).to.not.equal(undefined);\n    expect(eventListeners['touchmove']).to.equal(undefined);\n    expect(eventListeners['touchend']).to.equal(undefined);\n    expect(eventListeners['touchcancel']).to.equal(undefined);\n  });","file":"unit/test-pull-to-refresh.js","skipped":false,"dir":"test"},{"name":"should cancel pull down on touch move","suites":[],"updatePoint":{"line":116,"column":43,"index":3652},"line":116,"code":"  it('should cancel pull down on touch move', () => {\n    sendEvent({\n      type: 'touchstart',\n      touches: [{\n        clientY: 111\n      }]\n    });\n    expect(blocker.tracking_).to.equal(true);\n    const preventDefault = env.sandbox.spy();\n    sendEvent({\n      type: 'touchmove',\n      touches: [{\n        clientY: 112\n      }]\n    }, preventDefault);\n    expect(blocker.tracking_).to.equal(false);\n    expect(preventDefault).to.be.calledOnce;\n    expect(eventListeners['touchstart']).to.not.equal(undefined);\n    expect(eventListeners['touchmove']).to.equal(undefined);\n    expect(eventListeners['touchend']).to.equal(undefined);\n    expect(eventListeners['touchcancel']).to.equal(undefined);\n  });","file":"unit/test-pull-to-refresh.js","skipped":false,"dir":"test"},{"name":"should NOT cancel pull up on touch move","suites":[],"updatePoint":{"line":138,"column":45,"index":4359},"line":138,"code":"  it('should NOT cancel pull up on touch move', () => {\n    sendEvent({\n      type: 'touchstart',\n      touches: [{\n        clientY: 111\n      }]\n    });\n    expect(blocker.tracking_).to.equal(true);\n    const preventDefault = env.sandbox.spy();\n    sendEvent({\n      type: 'touchmove',\n      touches: [{\n        clientY: 100\n      }]\n    }, preventDefault);\n    expect(blocker.tracking_).to.equal(false);\n    expect(preventDefault).to.have.not.been.called;\n    expect(eventListeners['touchstart']).to.not.equal(undefined);\n    expect(eventListeners['touchmove']).to.equal(undefined);\n    expect(eventListeners['touchend']).to.equal(undefined);\n    expect(eventListeners['touchcancel']).to.equal(undefined);\n  });","file":"unit/test-pull-to-refresh.js","skipped":false,"dir":"test"},{"name":"should keep tracking on touch move if ","suites":[],"updatePoint":{"line":160,"column":44,"index":5072},"line":160,"code":"  it('should keep tracking on touch move if ', () => {\n    sendEvent({\n      type: 'touchstart',\n      touches: [{\n        clientY: 111\n      }]\n    });\n    expect(blocker.tracking_).to.equal(true);\n    const preventDefault = env.sandbox.spy();\n    sendEvent({\n      type: 'touchmove',\n      touches: [{\n        clientY: 111\n      }]\n    }, preventDefault);\n    expect(blocker.tracking_).to.equal(true);\n    expect(preventDefault).to.have.not.been.called;\n    expect(eventListeners['touchstart']).to.not.equal(undefined);\n    expect(eventListeners['touchmove']).to.not.equal(undefined);\n    expect(eventListeners['touchend']).to.not.equal(undefined);\n    expect(eventListeners['touchcancel']).to.not.equal(undefined);\n  });","file":"unit/test-pull-to-refresh.js","skipped":false,"dir":"test"},{"name":"should output basic text","suites":["sanitizer tests"],"updatePoint":{"line":52,"column":32,"index":1540},"line":52,"code":"    it('should output basic text', () => {\n      expect(purify('abc')).to.be.equal('abc');\n    });","file":"unit/test-purifier.js","skipped":false,"dir":"test"},{"name":"should output valid markup","suites":["sanitizer tests"],"updatePoint":{"line":55,"column":34,"index":1641},"line":55,"code":"    it('should output valid markup', () => {\n      expect(purify('<h1>abc</h1>')).to.be.equal('<h1>abc</h1>');\n      expect(purify('<h1>a<i>b</i>c</h1>')).to.be.equal('<h1>a<i>b</i>c</h1>');\n      expect(purify('<h1>a<i>b</i><br>c</h1>')).to.be.equal('<h1>a<i>b</i><br>c</h1>');\n      expect(purify('<h1>a<i>b</i>c' + '<amp-img src=\"http://example.com/1.png\"></amp-img></h1>')).to.be.equal('<h1>a<i>b</i>c' + '<amp-img src=\"http://example.com/1.png\" i-amphtml-ignore=\"\"></amp-img></h1>');\n      expect(rewriteAttributeValueSpy).to.be.calledWith('amp-img', 'src', 'http://example.com/1.png');\n    });","file":"unit/test-purifier.js","skipped":false,"dir":"test"},{"name":"should NOT output security-sensitive markup","suites":["sanitizer tests"],"updatePoint":{"line":62,"column":51,"index":2258},"line":62,"code":"    it('should NOT output security-sensitive markup', () => {\n      expect(purify('a<script>b</script>c')).to.be.equal('ac');\n      expect(purify('a<script>b<img>d</script>c')).to.be.equal('ac');\n      expect(purify('a<img>c')).to.be.equal('ac');\n      expect(purify('a<iframe></iframe>c')).to.be.equal('ac');\n      expect(purify('a<frame></frame>c')).to.be.equal('ac');\n      expect(purify('a<video></video>c')).to.be.equal('ac');\n      expect(purify('a<audio></audio>c')).to.be.equal('ac');\n      expect(purify('a<applet></applet>c')).to.be.equal('ac');\n      expect(purify('a<link>c')).to.be.equal('ac');\n      expect(purify('a<meta>c')).to.be.equal('ac');\n    });","file":"unit/test-purifier.js","skipped":false,"dir":"test"},{"name":"should NOT output security-sensitive markup when nested","suites":["sanitizer tests"],"updatePoint":{"line":74,"column":63,"index":2938},"line":74,"code":"    it('should NOT output security-sensitive markup when nested', () => {\n      expect(purify('a<script><style>b</style></script>c')).to.be.equal('ac');\n      expect(purify('a<style><iframe>b</iframe></style>c')).to.be.equal('ac');\n      expect(purify('a<script><img></script>c')).to.be.equal('ac');\n    });","file":"unit/test-purifier.js","skipped":false,"dir":"test"},{"name":"should NOT output security-sensitive markup when broken","suites":["sanitizer tests"],"updatePoint":{"line":79,"column":63,"index":3246},"line":79,"code":"    it('should NOT output security-sensitive markup when broken', () => {\n      expect(purify('a<script>bc')).to.be.equal('a');\n      expect(purify('a<SCRIPT>bc')).to.be.equal('a');\n    });","file":"unit/test-purifier.js","skipped":false,"dir":"test"},{"name":"should output \"on\" attribute","suites":["sanitizer tests"],"updatePoint":{"line":83,"column":36,"index":3409},"line":83,"code":"    it('should output \"on\" attribute', () => {\n      expect(purify('a<a on=\"tap:AMP.print\">b</a>')).to.be.equal('a<a on=\"tap:AMP.print\">b</a>');\n      expect(rewriteAttributeValueSpy.callCount).to.be.equal(1);\n    });","file":"unit/test-purifier.js","skipped":false,"dir":"test"},{"name":"should output \"data-, aria-, and role\" attributes","suites":["sanitizer tests"],"updatePoint":{"line":87,"column":57,"index":3648},"line":87,"code":"    it('should output \"data-, aria-, and role\" attributes', () => {\n      // Can't use string equality since DOMPurify will reorder attributes.\n      const actual = serialize(purify('<a aria-label=\"bar\" data-foo=\"bar\" role=\"button\">b</a>'));\n      const expected = serialize('<a aria-label=\"bar\" data-foo=\"bar\" role=\"button\">b</a>');\n      expectEqualNodeLists(actual, expected);\n      expect(rewriteAttributeValueSpy.callCount).to.be.equal(3);\n    });","file":"unit/test-purifier.js","skipped":false,"dir":"test"},{"name":"should output \"href\" attribute","suites":["sanitizer tests"],"updatePoint":{"line":94,"column":38,"index":4082},"line":94,"code":"    it('should output \"href\" attribute', () => {\n      // Can't use string equality since DOMPurify will reorder attributes.\n      const actual = serialize(purify('a<a href=\"http://acme.com/\">b</a>'));\n      const expected = serialize('a<a target=\"_top\" href=\"http://acme.com/\">b</a>');\n      expectEqualNodeLists(actual, expected);\n      expect(rewriteAttributeValueSpy.callCount).to.be.equal(2);\n    });","file":"unit/test-purifier.js","skipped":false,"dir":"test"},{"name":"should allow arbitrary protocols","suites":["sanitizer tests"],"updatePoint":{"line":101,"column":40,"index":4490},"line":101,"code":"    it('should allow arbitrary protocols', () => {\n      expect(purify('<a href=\"foo://bar\">link</a>')).to.be.equal('<a target=\"_top\" href=\"foo://bar\">link</a>');\n      expect(rewriteAttributeValueSpy.callCount).to.be.equal(2);\n    });","file":"unit/test-purifier.js","skipped":false,"dir":"test"},{"name":"should output \"rel\" attribute","suites":["sanitizer tests"],"updatePoint":{"line":105,"column":37,"index":4723},"line":105,"code":"    it('should output \"rel\" attribute', () => {\n      // Can't use string equality since DOMPurify will reorder attributes.\n      const actual = serialize(purify('a<a href=\"http://acme.com/\" rel=\"amphtml\">b</a>'));\n      const expected = serialize('a<a href=\"http://acme.com/\" rel=\"amphtml\" target=\"_top\">b</a>');\n      expectEqualNodeLists(actual, expected);\n      expect(rewriteAttributeValueSpy.callCount).to.be.equal(3);\n    });","file":"unit/test-purifier.js","skipped":false,"dir":"test"},{"name":"should output \"layout\" attribute","suites":["sanitizer tests"],"updatePoint":{"line":112,"column":40,"index":5159},"line":112,"code":"    it('should output \"layout\" attribute', () => {\n      expect(purify('<amp-img layout=\"responsive\"></amp-img>')).to.equal('<amp-img layout=\"responsive\" i-amphtml-ignore=\"\"></amp-img>');\n      expect(rewriteAttributeValueSpy.callCount).to.be.equal(1);\n    });","file":"unit/test-purifier.js","skipped":false,"dir":"test"},{"name":"should output \"media\" attribute","suites":["sanitizer tests"],"updatePoint":{"line":116,"column":39,"index":5419},"line":116,"code":"    it('should output \"media\" attribute', () => {\n      expect(purify('<amp-img media=\"(min-width: 650px)\"></amp-img>')).to.equal('<amp-img media=\"(min-width: 650px)\" i-amphtml-ignore=\"\"></amp-img>');\n      expect(rewriteAttributeValueSpy.callCount).to.be.equal(1);\n    });","file":"unit/test-purifier.js","skipped":false,"dir":"test"},{"name":"should output \"sizes\" attribute","suites":["sanitizer tests"],"updatePoint":{"line":120,"column":39,"index":5693},"line":120,"code":"    it('should output \"sizes\" attribute', () => {\n      expect(purify('<amp-img sizes=\"(min-width: 650px) 50vw, 100vw\"></amp-img>')).to.equal('<amp-img sizes=\"(min-width: 650px) 50vw, 100vw\" i-amphtml-ignore=\"\"></amp-img>');\n      expect(rewriteAttributeValueSpy.callCount).to.be.equal(1);\n    });","file":"unit/test-purifier.js","skipped":false,"dir":"test"},{"name":"should output \"heights\" attribute","suites":["sanitizer tests"],"updatePoint":{"line":124,"column":41,"index":5993},"line":124,"code":"    it('should output \"heights\" attribute', () => {\n      expect(purify('<amp-img heights=\"(min-width:500px) 200px, 80%\"></amp-img>')).to.equal('<amp-img heights=\"(min-width:500px) 200px, 80%\" i-amphtml-ignore=\"\"></amp-img>');\n      expect(rewriteAttributeValueSpy.callCount).to.be.equal(1);\n    });","file":"unit/test-purifier.js","skipped":false,"dir":"test"},{"name":"should default target to _top with href","suites":["sanitizer tests"],"updatePoint":{"line":128,"column":47,"index":6299},"line":128,"code":"    it('should default target to _top with href', () => {\n      // Can't use string equality since DOMPurify will reorder attributes.\n      const actual = serialize(purify('<a href=\"\">a</a><a href=\"\" target=\"\">c</a>'));\n      const expected = serialize('<a href=\"\" target=\"_top\">a</a><a href=\"\" target=\"_top\">c</a>');\n      expectEqualNodeLists(actual, expected);\n    });","file":"unit/test-purifier.js","skipped":false,"dir":"test"},{"name":"should NOT default target to _top w/o href","suites":["sanitizer tests"],"updatePoint":{"line":134,"column":50,"index":6674},"line":134,"code":"    it('should NOT default target to _top w/o href', () => {\n      expect(purify('<a>b</a><a target=\"\">d</a>')).to.equal('<a>b</a><a target=\"_top\">d</a>');\n      expect(rewriteAttributeValueSpy.callCount).to.be.equal(1);\n    });","file":"unit/test-purifier.js","skipped":false,"dir":"test"},{"name":"should output a valid target","suites":["sanitizer tests"],"updatePoint":{"line":138,"column":36,"index":6889},"line":138,"code":"    it('should output a valid target', () => {\n      expect(purify('<a target=\"_top\">a</a><a target=\"_blank\">b</a>')).to.equal('<a target=\"_top\">a</a><a target=\"_blank\">b</a>');\n      expect(rewriteAttributeValueSpy.callCount).to.be.equal(2);\n    });","file":"unit/test-purifier.js","skipped":false,"dir":"test"},{"name":"should output a valid target in different case","suites":["sanitizer tests"],"updatePoint":{"line":142,"column":54,"index":7158},"line":142,"code":"    it('should output a valid target in different case', () => {\n      expect(purify('<a target=\"_TOP\">a</a><a target=\"_BLANK\">b</a>')).to.equal('<a target=\"_top\">a</a><a target=\"_blank\">b</a>');\n      expect(rewriteAttributeValueSpy.callCount).to.be.equal(2);\n    });","file":"unit/test-purifier.js","skipped":false,"dir":"test"},{"name":"should override a unallowed target","suites":["sanitizer tests"],"updatePoint":{"line":146,"column":42,"index":7415},"line":146,"code":"    it('should override a unallowed target', () => {\n      expect(purify('<a target=\"_self\">_self</a>' + '<a target=\"_parent\">_parent</a>' + '<a target=\"_other\">_other</a>' + '<a target=\"_OTHER\">_OTHER</a>' + '<a target=\"other\">other</a>')).to.equal('<a target=\"_top\">_self</a>' + '<a target=\"_top\">_parent</a>' + '<a target=\"_top\">_other</a>' + '<a target=\"_top\">_OTHER</a>' + '<a target=\"_top\">other</a>');\n      expect(rewriteAttributeValueSpy.callCount).to.be.equal(5);\n    });","file":"unit/test-purifier.js","skipped":false,"dir":"test"},{"name":"should NOT output security-sensitive attributes","suites":["sanitizer tests"],"updatePoint":{"line":150,"column":55,"index":7910},"line":150,"code":"    it('should NOT output security-sensitive attributes', () => {\n      allowConsoleError(() => {\n        expect(purify('a<a onclick=\"alert\">b</a>')).to.be.equal('a<a>b</a>');\n        expect(purify('a<a href=\"javascript:alert\">b</a>')).to.be.equal('a<a target=\"_top\">b</a>');\n        expect(purify('a<a href=\" JAVASCRIPT:alert\">b</a>')).to.be.equal('a<a target=\"_top\">b</a>');\n        expect(purify('a<a href=\"vbscript:alert\">b</a>')).to.be.equal('a<a target=\"_top\">b</a>');\n        expect(purify('a<a href=\" VBSCRIPT:alert\">b</a>')).to.be.equal('a<a target=\"_top\">b</a>');\n        expect(purify('a<a href=\"data:alert\">b</a>')).to.be.equal('a<a target=\"_top\">b</a>');\n        expect(purify('a<a href=\" DATA:alert\">b</a>')).to.be.equal('a<a target=\"_top\">b</a>');\n        expect(purify('a<a href=\"blob:alert\">b</a>')).to.be.equal('a<a target=\"_top\">b</a>');\n        expect(purify('a<a href=\" BLOB:alert\">b</a>')).to.be.equal('a<a target=\"_top\">b</a>');\n        expect(purify('a<a href=\"?__amp_source_origin=foo\">b</a>')).to.be.equal('a<a target=\"_top\">b</a>');\n      });\n    });","file":"unit/test-purifier.js","skipped":false,"dir":"test"},{"name":"should NOT output denylisted values for class attributes","suites":["sanitizer tests"],"updatePoint":{"line":164,"column":64,"index":8997},"line":164,"code":"    it('should NOT output denylisted values for class attributes', () => {\n      allowConsoleError(() => {\n        expect(purify('<p class=\"i-amphtml-\">hello</p>')).to.be.equal('<p>hello</p>');\n        expect(purify('<p class=\"i-amphtml-class\">hello</p>')).to.be.equal('<p>hello</p>');\n        expect(purify('<p class=\"foo-i-amphtml-bar\">hello</p>')).to.be.equal('<p>hello</p>');\n        expect(rewriteAttributeValueSpy.callCount).to.be.equal(0);\n      });\n    });","file":"unit/test-purifier.js","skipped":false,"dir":"test"},{"name":"should allow amp-subscriptions attributes","suites":["sanitizer tests"],"updatePoint":{"line":172,"column":49,"index":9447},"line":172,"code":"    it('should allow amp-subscriptions attributes', () => {\n      expect(purify('<div subscriptions-action=\"login\">link</div>')).to.equal('<div subscriptions-action=\"login\">link</div>');\n      expect(purify('<div subscriptions-section=\"actions\">link</div>')).to.equal('<div subscriptions-section=\"actions\">link</div>');\n      expect(purify('<div subscriptions-actions=\"\">link</div>')).to.equal('<div subscriptions-actions=\"\">link</div>');\n      expect(purify('<div subscriptions-display=\"\">link</div>')).to.equal('<div subscriptions-display=\"\">link</div>');\n      expect(purify('<div subscriptions-dialog=\"\">link</div>')).to.equal('<div subscriptions-dialog=\"\">link</div>');\n      expect(rewriteAttributeValueSpy.callCount).to.be.equal(2);\n    });","file":"unit/test-purifier.js","skipped":false,"dir":"test"},{"name":"should allow source::src with valid protocol","suites":["sanitizer tests"],"updatePoint":{"line":180,"column":52,"index":10198},"line":180,"code":"    it('should allow source::src with valid protocol', () => {\n      expect(purify('<source src=\"https://www.foo.com/\">')).to.equal('<source src=\"https://www.foo.com/\">');\n      expect(rewriteAttributeValueSpy.callCount).to.be.equal(1);\n    });","file":"unit/test-purifier.js","skipped":false,"dir":"test"},{"name":"should not allow source::src with invalid protocol","suites":["sanitizer tests"],"line":188,"code":"    it.skip('should not allow source::src with invalid protocol', () => {","file":"unit/test-purifier.js","skipped":true,"dir":"test"},{"name":"should allow div::template","suites":["sanitizer tests"],"updatePoint":{"line":193,"column":34,"index":10940},"line":193,"code":"    it('should allow div::template', () => {\n      expect(purify('<div template=\"my-template-id\"></div>')).to.equal('<div template=\"my-template-id\"></div>');\n      expect(rewriteAttributeValueSpy.callCount).to.be.equal(1);\n    });","file":"unit/test-purifier.js","skipped":false,"dir":"test"},{"name":"should allow form::action-xhr","suites":["sanitizer tests"],"updatePoint":{"line":197,"column":37,"index":11174},"line":197,"code":"    it('should allow form::action-xhr', () => {\n      expect(purify('<form action-xhr=\"https://foo.com\"></form>')).to.equal('<form action-xhr=\"https://foo.com\"></form>');\n      expect(rewriteAttributeValueSpy.callCount).to.be.equal(1);\n    });","file":"unit/test-purifier.js","skipped":false,"dir":"test"},{"name":"should allow input::mask-output","suites":["sanitizer tests"],"updatePoint":{"line":201,"column":39,"index":11420},"line":201,"code":"    it('should allow input::mask-output', () => {\n      expect(purify('<input mask-output=\"alphanumeric\">')).to.equal('<input mask-output=\"alphanumeric\">');\n      expect(rewriteAttributeValueSpy.callCount).to.be.equal(1);\n    });","file":"unit/test-purifier.js","skipped":false,"dir":"test"},{"name":"should not allow unsupported attributes after a valid one","suites":["sanitizer tests"],"updatePoint":{"line":208,"column":65,"index":11830},"line":208,"code":"    it('should not allow unsupported attributes after a valid one', () => {\n      const html = '<form action-xhr=\"https://foo.com\"></form>' + '<p action-xhr=\"https://foo.com\"></p>';\n      expect(purify(html)).to.equal('<form action-xhr=\"https://foo.com\"></form><p></p>');\n      expect(rewriteAttributeValueSpy.callCount).to.be.equal(2);\n    });","file":"unit/test-purifier.js","skipped":false,"dir":"test"},{"name":"should allow <amp-form>-related attributes","suites":["sanitizer tests"],"updatePoint":{"line":213,"column":50,"index":12160},"line":213,"code":"    it('should allow <amp-form>-related attributes', () => {\n      expect(purify('<div submitting></div>')).to.equal('<div submitting=\"\"></div>');\n      expect(purify('<div submit-success></div>')).to.equal('<div submit-success=\"\"></div>');\n      expect(purify('<div submit-error></div>')).to.equal('<div submit-error=\"\"></div>');\n      expect(purify('<div verify-error></div>')).to.equal('<div verify-error=\"\"></div>');\n      expect(purify('<span visible-when-invalid=\"valueMissing\"></span>')).to.equal('<span visible-when-invalid=\"valueMissing\"></span>');\n      expect(purify('<span validation-for=\"form1\"></span>')).to.equal('<span validation-for=\"form1\"></span>');\n      expect(rewriteAttributeValueSpy.callCount).to.be.equal(2);\n    });","file":"unit/test-purifier.js","skipped":false,"dir":"test"},{"name":"should avoid disallowing default-supported attributes","suites":["sanitizer tests"],"updatePoint":{"line":222,"column":61,"index":12913},"line":222,"code":"    it('should avoid disallowing default-supported attributes', () => {\n      // We allowlist all attributes of AMP elements, but make sure we don't\n      // remove default-supported attributes from the allowlist afterwards.\n      expect(purify('<amp-img style=\"color: red\"></amp-img><p style=\"color: blue\"></p>')).to.equal('<amp-img style=\"color: red\" i-amphtml-ignore=\"\"></amp-img><p style=\"color: blue\"></p>');\n      expect(rewriteAttributeValueSpy.callCount).to.be.equal(2);\n    });","file":"unit/test-purifier.js","skipped":false,"dir":"test"},{"name":"should allow <amp-lightbox> attributes","suites":["sanitizer tests"],"updatePoint":{"line":228,"column":46,"index":13385},"line":228,"code":"    it('should allow <amp-lightbox> attributes', () => {\n      expect(purify('<amp-lightbox scrollable></amp-lightbox>')).to.match(/<amp-lightbox scrollable=\"\" i-amphtml-key=\"(\\d+)\"><\\/amp-lightbox>/);\n    });","file":"unit/test-purifier.js","skipped":false,"dir":"test"},{"name":"should output diff marker attributes for some elements","suites":["sanitizer tests"],"updatePoint":{"line":231,"column":62,"index":13611},"line":231,"code":"    it('should output diff marker attributes for some elements', () => {\n      // Elements with bindings should have [i-amphtml-key=<number>].\n      expect(purify('<p [x]=\"y\"></p>')).to.match(/<p data-amp-bind-x=\"y\" i-amphtml-binding=\"\" i-amphtml-key=\"(\\d+)\"><\\/p>/);\n      // AMP elements should have [i-amphtml-key=<number>].\n      expect(purify('<amp-pixel></amp-pixel>')).to.match(/<amp-pixel i-amphtml-key=\"(\\d+)\"><\\/amp-pixel>/);\n      // AMP elements with bindings should have [i-amphtml-key=<number>].\n      expect(purify('<amp-pixel [x]=\"y\"></amp-pixel>')).to.match(/<amp-pixel data-amp-bind-x=\"y\" i-amphtml-binding=\"\" i-amphtml-key=\"(\\d+)\"><\\/amp-pixel>/);\n      // amp-img should have [i-amphtml-ignore].\n      expect(purify('<amp-img></amp-img>')).to.equal('<amp-img i-amphtml-ignore=\"\"></amp-img>');\n      // Other elements should NOT have [i-amphtml-key].\n      expect(purify('<p></p>')).to.equal('<p></p>');\n      expect(rewriteAttributeValueSpy.callCount).to.be.equal(2);\n    });","file":"unit/test-purifier.js","skipped":false,"dir":"test"},{"name":"should resolve URLs","suites":["sanitizer tests"],"updatePoint":{"line":244,"column":27,"index":14572},"line":244,"code":"    it('should resolve URLs', () => {\n      expect(purify('<a href=\"/path\"></a>')).to.match(/http/);\n      expect(purify('<amp-img src=\"/path\"></amp-img>')).to.match(/http/);\n      expect(purify('<amp-img srcset=\"/path\"></amp-img>')).to.match(/http/);\n    });","file":"unit/test-purifier.js","skipped":false,"dir":"test"},{"name":"should output basic text","suites":["purifyTagsForTripleMustache()"],"updatePoint":{"line":251,"column":32,"index":14895},"line":251,"code":"    it('should output basic text', () => {\n      expect(purifyTripleMustache('abc')).to.be.equal('abc');\n    });","file":"unit/test-purifier.js","skipped":false,"dir":"test"},{"name":"should output HTML entities","suites":["purifyTagsForTripleMustache()"],"updatePoint":{"line":254,"column":35,"index":15011},"line":254,"code":"    it('should output HTML entities', () => {\n      const entity = '&lt;tag&gt;';\n      expect(purifyTripleMustache(entity)).to.be.equal(entity);\n      // DOMPurify short-circuits when there are no '<' characters.\n      expect(purifyTripleMustache(`<p>${entity}</p>`)).to.be.equal(`<p>${entity}</p>`);\n    });","file":"unit/test-purifier.js","skipped":false,"dir":"test"},{"name":"should output valid markup","suites":["purifyTagsForTripleMustache()"],"updatePoint":{"line":260,"column":34,"index":15320},"line":260,"code":"    it('should output valid markup', () => {\n      expect(purifyTripleMustache('<b>abc</b>')).to.be.equal('<b>abc</b>');\n      expect(purifyTripleMustache('<b>ab<br>c</b>')).to.be.equal('<b>ab<br>c</b>');\n      expect(purifyTripleMustache('<b>a<i>b</i>c</b>')).to.be.equal('<b>a<i>b</i>c</b>');\n      const markupWithClassAttribute = '<p class=\"some-class\">heading</p>';\n      expect(purifyTripleMustache(markupWithClassAttribute)).to.be.equal(markupWithClassAttribute);\n      const markupWithClassesAttribute = '<div class=\"some-class another\"><span>heading</span></div>';\n      expect(purifyTripleMustache(markupWithClassesAttribute)).to.be.equal(markupWithClassesAttribute);\n      const markupParagraph = '<p class=\"valid-class\">paragraph</p>';\n      expect(purifyTripleMustache(markupParagraph)).to.be.equal(markupParagraph);\n    });","file":"unit/test-purifier.js","skipped":false,"dir":"test"},{"name":"should NOT output non-allowlisted markup","suites":["purifyTagsForTripleMustache()"],"updatePoint":{"line":271,"column":48,"index":16172},"line":271,"code":"    it('should NOT output non-allowlisted markup', () => {\n      expect(purifyTripleMustache('a<style>b</style>c')).to.be.equal('ac');\n      expect(purifyTripleMustache('a<img>c')).to.be.equal('ac');\n    });","file":"unit/test-purifier.js","skipped":false,"dir":"test"},{"name":"should compensate for broken markup","suites":["purifyTagsForTripleMustache()"],"updatePoint":{"line":275,"column":43,"index":16375},"line":275,"code":"    it('should compensate for broken markup', () => {\n      expect(purifyTripleMustache('<b>a<i>b')).to.be.equal('<b>a<i>b</i></b>');\n    });","file":"unit/test-purifier.js","skipped":false,"dir":"test"},{"name":"should support list tags","suites":["purifyTagsForTripleMustache()"],"updatePoint":{"line":278,"column":32,"index":16506},"line":278,"code":"    it('should support list tags', () => {\n      const html = '<ol><li></li></ol><ul></ul>';\n      expect(purifyTripleMustache(html)).to.be.equal(html);\n    });","file":"unit/test-purifier.js","skipped":false,"dir":"test"},{"name":"should allowlist formatting related elements","suites":["purifyTagsForTripleMustache()","with  format"],"updatePoint":{"line":287,"column":56,"index":16864},"line":287,"code":"        it('should allowlist formatting related elements', () => {\n          const nonAllowlistedTag = '<img>';\n          const allowlistedFormattingTags = '<b>abc</b><div>def</div>' + '<br><code></code><del></del><em></em>' + '<i></i><ins></ins><mark></mark><s></s>' + '<small></small><strong></strong><sub></sub>' + '<sup></sup><time></time><u></u><hr>';\n          const html = `${allowlistedFormattingTags}${nonAllowlistedTag}`;\n          // Expect the purifier to unescape the allowlisted tags and to\n          // sanitize and remove the img tag.\n          expect(purifyTripleMustache(html)).to.be.equal(allowlistedFormattingTags);\n        });","file":"unit/test-purifier.js","skipped":false,"dir":"test"},{"name":"should allowlist h1, h2 and h3 elements","suites":["purifyTagsForTripleMustache()","with  format"],"updatePoint":{"line":295,"column":51,"index":17507},"line":295,"code":"        it('should allowlist h1, h2 and h3 elements', () => {\n          const html = '<h1>Heading 1</h1><h2>Heading 2</h2><h3>Heading 3</h3>';\n          expect(purifyTripleMustache(html)).to.be.equal(html);\n        });","file":"unit/test-purifier.js","skipped":false,"dir":"test"},{"name":"should allowlist table related elements and anchor tags","suites":["purifyTagsForTripleMustache()","with  format"],"updatePoint":{"line":299,"column":67,"index":17742},"line":299,"code":"        it('should allowlist table related elements and anchor tags', () => {\n          const html = '<table class=\"valid-class\">' + '<colgroup><col><col></colgroup>' + '<caption>caption</caption>' + '<thead><tr><th colspan=\"2\">header</th></tr></thead>' + '<tbody><tr><td>' + '<a href=\"http://www.google.com\">google</a>' + '</td></tr></tbody>' + '<tfoot><tr>' + '<td colspan=\"2\"><span>footer</span></td>' + '</tr></tfoot>' + '</table>';\n          expect(purifyTripleMustache(html)).to.be.equal(html);\n        });","file":"unit/test-purifier.js","skipped":false,"dir":"test"},{"name":"should allowlist container elements","suites":["purifyTagsForTripleMustache()","with  format"],"updatePoint":{"line":303,"column":47,"index":18235},"line":303,"code":"        it('should allowlist container elements', () => {\n          const html = '<article>Article</article>' + '<aside></aside>' + '<blockquote>A quote</blockquote>' + '<details></details>' + '<figcaption></figcaption>' + '<figure></figure>' + '<footer>Footer</footer>' + '<header></header>' + '<main class=\"content\"></main>' + '<nav></nav>' + '<pre></pre>' + '<section id=\"sec\"></section>' + '<summary></summary>';\n          expect(purifyTripleMustache(html)).to.be.equal(html);\n        });","file":"unit/test-purifier.js","skipped":false,"dir":"test"},{"name":"should allowlist amp-img element","suites":["purifyTagsForTripleMustache()","with  format"],"updatePoint":{"line":309,"column":40,"index":18739},"line":309,"code":"    it('should allowlist amp-img element', () => {\n      html.setAttribute('amp', '');\n      const markup = '<amp-img></amp-img>';\n      expect(purifyTripleMustache(markup)).to.be.equal(markup);\n    });","file":"unit/test-purifier.js","skipped":false,"dir":"test"},{"name":"should not allowlist amp-img element for AMP4Email","suites":["purifyTagsForTripleMustache()","with  format"],"updatePoint":{"line":314,"column":58,"index":18960},"line":314,"code":"    it('should not allowlist amp-img element for AMP4Email', () => {\n      html.setAttribute('amp4email', '');\n      const markup = '<amp-img></amp-img>';\n      expect(purifyTripleMustache(markup)).to.be.empty;\n    });","file":"unit/test-purifier.js","skipped":false,"dir":"test"},{"name":"should sanitize tags, removing unsafe attributes","suites":["purifyTagsForTripleMustache()","with  format"],"updatePoint":{"line":319,"column":56,"index":19177},"line":319,"code":"    it('should sanitize tags, removing unsafe attributes', () => {\n      const html = '<a href=\"javascript:alert(\\'XSS\\')\">test</a>' + '<img src=\"x\" onerror=\"alert(\\'XSS\\')\" />';\n      expect(purifyTripleMustache(html)).to.be.equal('<a>test</a>');\n    });","file":"unit/test-purifier.js","skipped":false,"dir":"test"},{"name":"should allow valid styles","suites":["purifyTagsForTripleMustache()","should sanitize `style` attribute"],"updatePoint":{"line":324,"column":35,"index":19470},"line":324,"code":"      it('should allow valid styles', () => {\n        expect(purify('<div style=\"color:blue\">Test</div>')).to.equal('<div style=\"color:blue\">Test</div>');\n      });","file":"unit/test-purifier.js","skipped":false,"dir":"test"},{"name":"should ignore styles containing `!important`","suites":["purifyTagsForTripleMustache()","should sanitize `style` attribute"],"updatePoint":{"line":327,"column":54,"index":19654},"line":327,"code":"      it('should ignore styles containing `!important`', () => {\n        allowConsoleError(() => {\n          expect(purify('<div style=\"color:blue!important\">Test</div>')).to.equal('<div>Test</div>');\n        });\n      });","file":"unit/test-purifier.js","skipped":false,"dir":"test"},{"name":"should ignore styles containing `position:fixed`","suites":["purifyTagsForTripleMustache()","should sanitize `style` attribute"],"updatePoint":{"line":332,"column":58,"index":19881},"line":332,"code":"      it('should ignore styles containing `position:fixed`', () => {\n        allowConsoleError(() => {\n          expect(purify('<div style=\"position:fixed\">Test</div>')).to.equal('<div>Test</div>');\n        });\n      });","file":"unit/test-purifier.js","skipped":false,"dir":"test"},{"name":"should ignore styles containing `position:sticky`","suites":["purifyTagsForTripleMustache()","should sanitize `style` attribute"],"updatePoint":{"line":337,"column":59,"index":20103},"line":337,"code":"      it('should ignore styles containing `position:sticky`', () => {\n        allowConsoleError(() => {\n          expect(purify('<div style=\"position:sticky\">Test</div>')).to.equal('<div>Test</div>');\n        });\n      });","file":"unit/test-purifier.js","skipped":false,"dir":"test"},{"name":"should not allow plain <script> tags","suites":["<script>"],"updatePoint":{"line":345,"column":44,"index":20356},"line":345,"code":"    it('should not allow plain <script> tags', () => {\n      expect(purify('<script>alert(1)</script>')).to.equal('');\n    });","file":"unit/test-purifier.js","skipped":false,"dir":"test"},{"name":"should not allow script[type=\"text/javascript\"]","suites":["<script>"],"updatePoint":{"line":348,"column":55,"index":20494},"line":348,"code":"    it('should not allow script[type=\"text/javascript\"]', () => {\n      expect(purify('<script type=\"text/javascript\">alert(1)</script>')).to.equal('');\n    });","file":"unit/test-purifier.js","skipped":false,"dir":"test"},{"name":"should not allow script[type=\"application/javascript\"]","suites":["<script>"],"updatePoint":{"line":351,"column":62,"index":20662},"line":351,"code":"    it('should not allow script[type=\"application/javascript\"]', () => {\n      const html = '<script type=\"application/javascript\">alert(1)</script>';\n      expect(purify(html)).to.equal('');\n    });","file":"unit/test-purifier.js","skipped":false,"dir":"test"},{"name":"should allow script[type=\"application/json\"]","suites":["<script>"],"updatePoint":{"line":355,"column":52,"index":20852},"line":355,"code":"    it('should allow script[type=\"application/json\"]', () => {\n      const html = '<script type=\"application/json\">{}</script>';\n      expect(purify(html)).to.equal(html);\n    });","file":"unit/test-purifier.js","skipped":false,"dir":"test"},{"name":"should allow script[type=\"application/ld+json\"]","suites":["<script>"],"updatePoint":{"line":359,"column":55,"index":21035},"line":359,"code":"    it('should allow script[type=\"application/ld+json\"]', () => {\n      const html = '<script type=\"application/ld+json\">{}</script>';\n      expect(purify(html)).to.equal(html);\n    });","file":"unit/test-purifier.js","skipped":false,"dir":"test"},{"name":"should not allow insecure <script> tags around secure ones","suites":["<script>"],"updatePoint":{"line":363,"column":66,"index":21232},"line":363,"code":"    it('should not allow insecure <script> tags around secure ones', () => {\n      const html = '<script type=\"application/json\">{}</script>';\n      // Should not allow an insecure tag following a secure one.\n      expect(purify(html + '<script>alert(1)</script>')).to.equal(html);\n      // Should not allow an insecure tag preceding a secure one.\n      expect(purify('<script>alert(1)</script>' + html)).to.equal(html);\n      // Should not allow an insecure tag containing a secure one.\n      expect(purify('<script>alert(1)' + '<script type=\"application/json\">{}</script></script>')).to.equal('');\n    });","file":"unit/test-purifier.js","skipped":false,"dir":"test"},{"name":"should rewrite [text] and [class] attributes","suites":["for <amp-bind>"],"updatePoint":{"line":374,"column":52,"index":21869},"line":374,"code":"    it('should rewrite [text] and [class] attributes', () => {\n      expect(purify('<p [text]=\"foo\"></p>')).to.match(/<p data-amp-bind-text=\"foo\" i-amphtml-binding=\"\" i-amphtml-key=\"(\\d+)\"><\\/p>/);\n      expect(purify('<p [class]=\"bar\"></p>')).to.match(/<p data-amp-bind-class=\"bar\" i-amphtml-binding=\"\" i-amphtml-key=\"(\\d+)\"><\\/p>/);\n    });","file":"unit/test-purifier.js","skipped":false,"dir":"test"},{"name":"should add \"i-amphtml-binding\" for data-amp-bind-*","suites":["for <amp-bind>"],"updatePoint":{"line":378,"column":58,"index":22218},"line":378,"code":"    it('should add \"i-amphtml-binding\" for data-amp-bind-*', () => {\n      expect(purify('<p data-amp-bind-text=\"foo\"></p>')).to.match(/<p i-amphtml-binding=\"\" data-amp-bind-text=\"foo\" i-amphtml-key=\"(\\d+)\"><\\/p>/);\n    });","file":"unit/test-purifier.js","skipped":false,"dir":"test"},{"name":"should NOT rewrite values of binding attributes","suites":["for <amp-bind>"],"updatePoint":{"line":381,"column":55,"index":22439},"line":381,"code":"    it('should NOT rewrite values of binding attributes', () => {\n      // Should not change \"foo.bar\".\n      expect(purify('<a [href]=\"foo.bar\">link</a>')).to.match(/<a data-amp-bind-href=\"foo.bar\" i-amphtml-binding=\"\" i-amphtml-key=\"(\\d+)\">link<\\/a>/);\n    });","file":"unit/test-purifier.js","skipped":false,"dir":"test"},{"name":"[itemprop] global attribute","suites":["structured data"],"updatePoint":{"line":387,"column":35,"index":22726},"line":387,"code":"    it('[itemprop] global attribute', () => {\n      const h1 = '<h1 itemprop=\"foo\">h1</h1>';\n      expect(purify(h1)).to.equal(h1);\n      const span = '<span itemprop=\"bar\">span</span>';\n      expect(purify(span)).to.equal(span);\n      const a = '<a itemprop=\"baz\">a</a>';\n      expect(purify(a)).to.equal(a);\n    });","file":"unit/test-purifier.js","skipped":false,"dir":"test"},{"name":"should prevent XSS via <G> tag and onload attribute","suites":["SVG"],"updatePoint":{"line":399,"column":59,"index":23159},"line":399,"code":"    it('should prevent XSS via <G> tag and onload attribute', () => {\n      const svg = '<svg xmlns=\"http://www.w3.org/2000/svg\">' + '<g onload=\"javascript:alert(1)\"></g></svg>';\n      expect(purify(svg)).to.equal('<svg xmlns=\"http://www.w3.org/2000/svg\"><g></g></svg>');\n    });","file":"unit/test-purifier.js","skipped":false,"dir":"test"},{"name":"should prevent XSS via <SCRIPT> tag","suites":["SVG"],"updatePoint":{"line":403,"column":43,"index":23423},"line":403,"code":"    it('should prevent XSS via <SCRIPT> tag', () => {\n      const svg = '<svg xmlns=\"http://www.w3.org/2000/svg\">' + '<script>alert(1)</script></svg>';\n      expect(purify(svg)).to.equal('<svg xmlns=\"http://www.w3.org/2000/svg\"></svg>');\n    });","file":"unit/test-purifier.js","skipped":false,"dir":"test"},{"name":"should prevent simple passive XSS via XLink","suites":["SVG"],"updatePoint":{"line":411,"column":51,"index":23978},"line":411,"code":"    it('should prevent simple passive XSS via XLink', () => {\n      const svg = '<svg xmlns=\"http://www.w3.org/2000/svg\">' + '<a xmlns:xlink=\"http://www.w3.org/1999/xlink\" ' + 'xlink:href=\"javascript:alert(1)\">' + '<rect width=\"1000\" height=\"1000\" fill=\"white\"/></a></svg>';\n      expect(purify(svg)).to.equal('<svg xmlns=\"http://www.w3.org/2000/svg\">' + '<a xmlns:xlink=\"http://www.w3.org/1999/xlink\">' + '<rect fill=\"white\" height=\"1000\" width=\"1000\"></rect></a></svg>');\n    });","file":"unit/test-purifier.js","skipped":false,"dir":"test"},{"name":"should prevent XSS via \"from\" attribute in SVG and inline-SVG","suites":["SVG"],"updatePoint":{"line":415,"column":69,"index":24478},"line":415,"code":"    it('should prevent XSS via \"from\" attribute in SVG and inline-SVG', () => {\n      const svg = '<svg>' + '<a xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"?\">' + '<circle r=\"400\"></circle>' + '<animate attributeName=\"xlink:href\" begin=\"0\" ' + 'from=\"javascript:alert(1)\" to=\"&\" />' + '</a></svg>';\n      expect(purify(svg)).to.equal('<svg><a xlink:href=\"?\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">' + '<circle r=\"400\"></circle></a></svg>');\n    });","file":"unit/test-purifier.js","skipped":false,"dir":"test"},{"name":"should output <use> only if href is relative","suites":["SVG"],"updatePoint":{"line":419,"column":52,"index":24925},"line":419,"code":"    it('should output <use> only if href is relative', () => {\n      allowConsoleError(() => {\n        const href = '<svg xmlns=\"http://www.w3.org/2000/svg\"><use href=\"#foo\"></use></svg>';\n        expect(purify(href)).to.equal(href);\n        const xlink = '<svg xmlns=\"http://www.w3.org/2000/svg\"><use xlink:href=\"#foo\"></use></svg>';\n        expect(purify(xlink)).to.equal(xlink);\n        expect(purify('<svg xmlns=\"http://www.w3.org/2000/svg\"><use href=\"//evil\"></svg>')).to.equal('<svg xmlns=\"http://www.w3.org/2000/svg\"></svg>');\n        expect(purify('<svg xmlns=\"http://www.w3.org/2000/svg\"><use xlink:href=\"//evil\"></svg>')).to.equal('<svg xmlns=\"http://www.w3.org/2000/svg\"></svg>');\n      });\n    });","file":"unit/test-purifier.js","skipped":false,"dir":"test"},{"name":"should denylist input[type=\"image\"] and input[type=\"button\"] in AMP","suites":["AMP formats"],"updatePoint":{"line":450,"column":75,"index":26215},"line":450,"code":"    it('should denylist input[type=\"image\"] and input[type=\"button\"] in AMP', () => {\n      // Given the AMP format type.\n      html.setAttribute('amp', '');\n      allowConsoleError(() => {\n        expect(purify('<input type=\"image\">')).to.equal('<input>');\n        expect(purify('<input type=\"button\">')).to.equal('<input>');\n      });\n    });","file":"unit/test-purifier.js","skipped":false,"dir":"test"},{"name":"should allow input[type=\"file\"] and input[type=\"password\"]","suites":["AMP formats"],"updatePoint":{"line":458,"column":66,"index":26551},"line":458,"code":"    it('should allow input[type=\"file\"] and input[type=\"password\"]', () => {\n      // Given that the AMP format does not denylist input types file and\n      // password.\n      html.setAttribute('amp', '');\n      expect(purify('<input type=\"file\">')).to.equal('<input type=\"file\">');\n      expect(purify('<input type=\"password\">')).to.equal('<input type=\"password\">');\n    });","file":"unit/test-purifier.js","skipped":false,"dir":"test"},{"name":"should sanitize certain tag attributes for AMP4Email","suites":["AMP formats"],"updatePoint":{"line":465,"column":60,"index":26921},"line":465,"code":"    it('should sanitize certain tag attributes for AMP4Email', () => {\n      html.setAttribute('amp4email', '');\n      allowConsoleError(() => {\n        expect(purify('<input type=\"password\">')).to.equal('<input>');\n        expect(purify('<input type=\"file\">')).to.equal('<input>');\n        expect(purify('<form name=\"form-name\"></form>')).to.equal('<form></form>');\n        expect(purify('<amp-anim controls></amp-anim>')).to.match(/<amp-anim i-amphtml-key=\"(\\d+)\"><\\/amp-anim>/);\n      });\n    });","file":"unit/test-purifier.js","skipped":false,"dir":"test"},{"name":"should only allow allowlisted AMP elements in AMP4EMAIL","suites":["AMP formats"],"updatePoint":{"line":474,"column":63,"index":27424},"line":474,"code":"    it('should only allow allowlisted AMP elements in AMP4EMAIL', () => {\n      html.setAttribute('amp4email', '');\n      expect(purify('<amp-analytics>')).to.equal('');\n      expect(purify('<amp-iframe>')).to.equal('');\n      expect(purify('<amp-list>')).to.equal('');\n      expect(purify('<amp-pixel>')).to.equal('');\n      expect(purify('<amp-twitter>')).to.equal('');\n      expect(purify('<amp-video>')).to.equal('');\n      expect(purify('<amp-youtube>')).to.equal('');\n      expect(purify('<amp-img>')).to.equal('<amp-img i-amphtml-ignore=\"\"></amp-img>');\n      expect(purify('<amp-accordion>')).to.match(/<amp-accordion i-amphtml-key=\"(\\d+)\"><\\/amp-accordion>/);\n      expect(purify('<amp-anim>')).to.match(/<amp-anim i-amphtml-key=\"(\\d+)\"><\\/amp-anim>/);\n      expect(purify('<amp-bind-macro>')).to.match(/<amp-bind-macro i-amphtml-key=\"(\\d+)\"><\\/amp-bind-macro>/);\n      expect(purify('<amp-carousel>')).to.match(/<amp-carousel i-amphtml-key=\"(\\d+)\"><\\/amp-carousel>/);\n      expect(purify('<amp-fit-text>')).to.match(/<amp-fit-text i-amphtml-key=\"(\\d+)\"><\\/amp-fit-text>/);\n      expect(purify('<amp-layout>')).to.match(/<amp-layout i-amphtml-key=\"(\\d+)\"><\\/amp-layout>/);\n      expect(purify('<amp-selector>')).to.match(/<amp-selector i-amphtml-key=\"(\\d+)\"><\\/amp-selector>/);\n      expect(purify('<amp-sidebar>')).to.match(/<amp-sidebar i-amphtml-key=\"(\\d+)\"><\\/amp-sidebar>/);\n      expect(purify('<amp-timeago>')).to.match(/<amp-timeago i-amphtml-key=\"(\\d+)\"><\\/amp-timeago>/);\n    });","file":"unit/test-purifier.js","skipped":false,"dir":"test"},{"name":"should validate script[type]","suites":["AMP formats"],"updatePoint":{"line":505,"column":34,"index":29246},"line":505,"code":"  it('should validate script[type]', () => {\n    expect(vac('script', 'type', 'application/ld+json')).to.be.true;\n    expect(vac('script', 'type', 'application/json')).to.be.true;\n    expect(vac('script', 'type', '')).to.be.false;\n    expect(vac('script', 'type', null)).to.be.false;\n    expect(vac('script', 'type', 'text/javascript')).to.be.false;\n  });","file":"unit/test-purifier.js","skipped":false,"dir":"test"},{"name":"should validate a[target]","suites":["AMP formats"],"updatePoint":{"line":512,"column":31,"index":29599},"line":512,"code":"  it('should validate a[target]', () => {\n    expect(vac('a', 'target', '_top')).to.be.true;\n    expect(vac('a', 'target', '_blank')).to.be.true;\n    expect(vac('a', 'target', '')).to.be.false;\n    expect(vac('a', 'target', null)).to.be.false;\n    expect(vac('a', 'target', '_self')).to.be.false;\n    expect(vac('a', 'target', '_parent')).to.be.false;\n  });","file":"unit/test-purifier.js","skipped":false,"dir":"test"},{"name":"should disallow binding attributes","suites":["AMP formats"],"updatePoint":{"line":520,"column":40,"index":29966},"line":520,"code":"  it('should disallow binding attributes', () => {\n    expect(vac('p', '[text]', 'foo')).to.be.false;\n    expect(vac('p', 'data-amp-bind-text', 'foo')).to.be.false;\n  });","file":"unit/test-purifier.js","skipped":false,"dir":"test"},{"name":"should allow allowlisted-by-tag attributes","suites":["AMP formats"],"updatePoint":{"line":524,"column":48,"index":30145},"line":524,"code":"  it('should allow allowlisted-by-tag attributes', () => {\n    purifier.isValidAttribute = () => false;\n    expect(vac('a', 'rel', 'amphtml')).to.be.true;\n    expect(vac('div', 'template', 'my-template-id')).to.be.true;\n    expect(vac('textarea', 'autoexpand', '')).to.be.true;\n  });","file":"unit/test-purifier.js","skipped":false,"dir":"test"},{"name":"should allow AMP element attributes","suites":["AMP formats"],"updatePoint":{"line":530,"column":41,"index":30422},"line":530,"code":"  it('should allow AMP element attributes', () => {\n    purifier.isValidAttribute = () => false;\n    expect(vac('amp-carousel', 'slide', '1')).to.be.true;\n    expect(vac('amp-accordion', 'expanded', '')).to.be.true;\n    expect(vac('amp-img', 'on', 'tap: AMP.print')).to.be.true;\n  });","file":"unit/test-purifier.js","skipped":false,"dir":"test"},{"name":"should perform AMP runtime validations","suites":["AMP formats"],"updatePoint":{"line":536,"column":44,"index":30710},"line":536,"code":"  it('should perform AMP runtime validations', () => {\n    // !important style modifier.\n    expect(vac('h1', 'style', 'color: red !important')).to.be.false;\n    // i-amphtml-* class names.\n    expect(vac('p', 'class', 'i-amphtml-illegal')).to.be.false;\n    // __amp_source_origin in URLs.\n    expect(vac('amp-img', 'src', '?__amp_source_origin=evil')).to.be.false;\n    // DENYLISTED_TAG_SPECIFIC_ATTRS.\n    expect(vac('select', 'form', 'foo')).to.be.false;\n    // DENYLISTED_TAG_SPECIFIC_ATTR_VALUES.\n    expect(vac('input', 'type', 'image')).to.be.false;\n  });","file":"unit/test-purifier.js","skipped":false,"dir":"test"},{"name":"should contain html tags","suites":["AMP formats"],"updatePoint":{"line":554,"column":30,"index":31418},"line":554,"code":"  it('should contain html tags', () => {\n    expect(allowedTags).to.have.property('a', true);\n    expect(allowedTags).to.have.property('p', true);\n  });","file":"unit/test-purifier.js","skipped":false,"dir":"test"},{"name":"should contain svg tags","suites":["AMP formats"],"updatePoint":{"line":558,"column":29,"index":31570},"line":558,"code":"  it('should contain svg tags', () => {\n    expect(allowedTags).to.have.property('svg', true);\n    expect(allowedTags).to.have.property('feblend', true);\n  });","file":"unit/test-purifier.js","skipped":false,"dir":"test"},{"name":"should have denylisted tags set to false","suites":["AMP formats"],"updatePoint":{"line":562,"column":46,"index":31747},"line":562,"code":"  it('should have denylisted tags set to false', () => {\n    // Tags allowed in DOMPurify but disallowed in AMP.\n    expect(allowedTags).to.have.property('audio', false);\n    expect(allowedTags).to.have.property('img', false);\n  });","file":"unit/test-purifier.js","skipped":false,"dir":"test"},{"name":"truncates URL","suites":["#truncUrl_"],"updatePoint":{"line":64,"column":21,"index":2713},"line":64,"code":"    it('truncates URL', () => {\n      let url = 'https://www.example.biz/?';\n      for (let i = 0; i < 1000; i++) {\n        url += '&23456=8901234567';\n      }\n      expect(url.length).to.be.above(16384);\n      url = truncUrl_(url);\n      expect(url.length).to.be.at.most(16384);\n      expect(url).to.contain('&__trunc__=1');\n    });","file":"unit/test-real-time-config.js","skipped":false,"dir":"test"},{"name":"should convert url to callout param when parseable","suites":["#getCalloutParam_"],"updatePoint":{"line":76,"column":58,"index":3130},"line":76,"code":"    it('should convert url to callout param when parseable', () => {\n      const url = 'https://www.example.test/endpoint.php?unincluded';\n      const ard = getCalloutParam_(url);\n      expect(ard).to.equal('www.example.test/endpoint.php');\n    });","file":"unit/test-real-time-config.js","skipped":false,"dir":"test"},{"name":"should convert & trunc url when parseable","suites":["#getCalloutParam_"],"updatePoint":{"line":81,"column":49,"index":3370},"line":81,"code":"    it('should convert & trunc url when parseable', () => {\n      const url = 'https://www.example.test/thisIsTooMany' + 'Characters1234567891011121314.php';\n      const ard = getCalloutParam_(url);\n      expect(ard).to.equal('www.example.test/thisIsTooManyCharacters1234567891');\n    });","file":"unit/test-real-time-config.js","skipped":false,"dir":"test"},{"name":"should send RTC callouts for all specified URLS without macros","suites":["#execute_"],"updatePoint":{"line":161,"column":70,"index":6502},"line":161,"code":"    it('should send RTC callouts for all specified URLS without macros', () => {\n      const calloutCount = 5;\n      const urls = generateUrls(5);\n      const rtcCalloutResponses = [{\n        'response1': {\n          'fooArray': ['foo']\n        }\n      }, {\n        'response2': {\n          'test': 'test2'\n        }\n      }, {\n        'response3': {\n          'apple': 'banana'\n        }\n      }, {\n        'response4': {\n          'animalArray': ['cat', 'dog'],\n          'foodObject': {\n            'apple': true,\n            'car': false\n          }\n        }\n      }, {\n        'response5': [1, 2, 3]\n      }];\n      const expectedRtcArray = [];\n      urls.forEach((url, i) => {\n        expectedRtcArray.push({\n          callout: getCalloutParam_(url),\n          rtcTime: 10,\n          response: rtcCalloutResponses[i]\n        });\n      });\n      return executeTest({\n        urls,\n        inflatedUrls: urls,\n        rtcCalloutResponses,\n        calloutCount,\n        expectedCalloutUrls: urls,\n        expectedRtcArray\n      });\n    });","file":"unit/test-real-time-config.js","skipped":false,"dir":"test"},{"name":"should send only 5 RTC callouts for all URLS without macros","suites":["#execute_"],"updatePoint":{"line":204,"column":67,"index":7543},"line":204,"code":"    it('should send only 5 RTC callouts for all URLS without macros', () => {\n      const urls = generateUrls(7);\n      const expectedCalloutUrls = generateUrls(5);\n      const rtcCalloutResponses = generateCalloutResponses(7);\n      const calloutCount = 5;\n      const expectedRtcArray = [];\n      for (let i = 0; i < 5; i++) {\n        expectedRtcArray.push(rtcEntry(rtcCalloutResponses[i], urls[i]));\n      }\n      expectedRtcArray.push(rtcEntry(null, urls[5], RTC_ERROR_ENUM.MAX_CALLOUTS_EXCEEDED));\n      expectedRtcArray.push(rtcEntry(null, urls[6], RTC_ERROR_ENUM.MAX_CALLOUTS_EXCEEDED));\n      return executeTest({\n        urls,\n        inflatedUrls: urls,\n        rtcCalloutResponses,\n        calloutCount,\n        expectedCalloutUrls,\n        expectedRtcArray\n      });\n    });","file":"unit/test-real-time-config.js","skipped":false,"dir":"test"},{"name":"should send RTC callouts to inflated publisher URLs","suites":["#execute_"],"updatePoint":{"line":224,"column":59,"index":8322},"line":224,"code":"    it('should send RTC callouts to inflated publisher URLs', () => {\n      const urls = generateUrls(1, 2);\n      const inflatedUrls = ['https://www.0.com/', 'https://www.1.com/?slot_id=1', 'https://www.2.com/?slot_id=1&page_id=2'];\n      const rtcCalloutResponses = generateCalloutResponses(3);\n      const customMacros = {\n        SLOT_ID: 1,\n        PAGE_ID: () => 2,\n        FOO_ID: () => 3\n      };\n      const expectedRtcArray = [];\n      rtcCalloutResponses.forEach((rtcResponse, i) => {\n        expectedRtcArray.push(rtcEntry(rtcResponse, inflatedUrls[i]));\n      });\n      const calloutCount = 3;\n      return executeTest({\n        urls,\n        customMacros,\n        inflatedUrls,\n        rtcCalloutResponses,\n        calloutCount,\n        expectedCalloutUrls: inflatedUrls,\n        expectedRtcArray\n      });\n    });","file":"unit/test-real-time-config.js","skipped":false,"dir":"test"},{"name":"should fetch RTC from amp-script URIs","suites":["#execute_"],"updatePoint":{"line":248,"column":45,"index":9137},"line":248,"code":"    it('should fetch RTC from amp-script URIs', async () => {\n      const ampScriptFetch = env.sandbox.stub();\n      ampScriptFetch.returns(Promise.resolve({\n        targeting: ['sports']\n      }));\n      env.sandbox.stub(Services, 'scriptForDocOrNull').returns(Promise.resolve({\n        fetch: ampScriptFetch\n      }));\n      const urls = ['amp-script:scriptId.functionName'];\n      setRtcConfig({\n        urls,\n        vendors: {},\n        timeoutMillis: 500\n      });\n      const rtcResponse = await execute_(element, /* customMacros */{}, /* consentState */undefined, /* consentString */undefined, /* consentMetadata */undefined, () => {});\n      expect(ampScriptFetch).calledWithExactly('amp-script:scriptId.functionName');\n      expect(rtcResponse[0].response).deep.equal({\n        targeting: ['sports']\n      });\n    });","file":"unit/test-real-time-config.js","skipped":false,"dir":"test"},{"name":"should send RTC callouts to inflated vendor URLs","suites":["#execute_"],"updatePoint":{"line":268,"column":56,"index":9976},"line":268,"code":"    it('should send RTC callouts to inflated vendor URLs', () => {\n      const vendors = {\n        'fAkeVeNdOR': {\n          SLOT_ID: 1,\n          PAGE_ID: 2\n        }\n      };\n      const inflatedUrls = ['https://localhost:8000/examples/rtcE1.json?slot_id=1&page_id=3&foo_id=4'];\n      const rtcCalloutResponses = [{\n        'response1': {\n          'fooArray': ['foo']\n        }\n      }];\n      const customMacros = {\n        PAGE_ID: () => 3,\n        FOO_ID: () => 4\n      };\n      const calloutCount = 1;\n      const expectedRtcArray = [];\n      expectedRtcArray.push(rtcEntry(rtcCalloutResponses[0], Object.keys(vendors)[0].toLowerCase(), undefined, true));\n      return executeTest({\n        vendors,\n        customMacros,\n        inflatedUrls,\n        rtcCalloutResponses,\n        calloutCount,\n        expectedCalloutUrls: inflatedUrls,\n        expectedRtcArray\n      });\n    });","file":"unit/test-real-time-config.js","skipped":false,"dir":"test"},{"name":"should send callouts to vendor URLs with object/array macros","suites":["#execute_"],"updatePoint":{"line":298,"column":68,"index":10876},"line":298,"code":"    it('should send callouts to vendor URLs with object/array macros', () => {\n      const vendors = {\n        'fAkeVeNdOR': {\n          SLOT_ID: {\n            'key': 'value'\n          },\n          PAGE_ID: [1, 2, 3],\n          FOO_ID: 'String'\n        }\n      };\n      const inflatedUrls = ['https://localhost:8000/examples/rtcE1.json?slot_id=%7B%22key%22%3A%22' + 'value%22%7D&page_id=%5B1%2C2%2C3%5D&foo_id=String'];\n      const rtcCalloutResponses = [{\n        'response1': {\n          'fooArray': ['foo']\n        }\n      }];\n      const calloutCount = 1;\n      const expectedRtcArray = [];\n      expectedRtcArray.push(rtcEntry(rtcCalloutResponses[0], Object.keys(vendors)[0].toLowerCase(), undefined, true));\n      return executeTest({\n        vendors,\n        inflatedUrls,\n        rtcCalloutResponses,\n        calloutCount,\n        expectedCalloutUrls: inflatedUrls,\n        expectedRtcArray\n      });\n    });","file":"unit/test-real-time-config.js","skipped":false,"dir":"test"},{"name":"should send RTC callouts to inflated publisher and vendor URLs","suites":["#execute_"],"updatePoint":{"line":326,"column":70,"index":11795},"line":326,"code":"    it('should send RTC callouts to inflated publisher and vendor URLs', () => {\n      const urls = generateUrls(2, 2);\n      const vendors = {\n        'fAkeVeNdOR': {\n          SLOT_ID: 0,\n          PAGE_ID: 1\n        }\n      };\n      const inflatedUrls = ['https://www.0.com/', 'https://www.1.com/', 'https://www.2.com/?slot_id=1', 'https://www.3.com/?slot_id=1&page_id=2', 'https://localhost:8000/examples/rtcE1.json?slot_id=1&page_id=2&foo_id=3'];\n      const rtcCalloutResponses = generateCalloutResponses(5);\n      const customMacros = {\n        SLOT_ID: 1,\n        PAGE_ID: () => 2,\n        FOO_ID: () => 3\n      };\n      const expectedRtcArray = [];\n      for (let i = 0; i < 4; i++) {\n        expectedRtcArray.push(rtcEntry(rtcCalloutResponses[i], inflatedUrls[i]));\n      }\n      expectedRtcArray.push(rtcEntry(rtcCalloutResponses[4], Object.keys(vendors)[0].toLowerCase(), undefined, true));\n      const calloutCount = 5;\n      return executeTest({\n        urls,\n        vendors,\n        customMacros,\n        inflatedUrls,\n        rtcCalloutResponses,\n        calloutCount,\n        expectedCalloutUrls: inflatedUrls,\n        expectedRtcArray\n      });\n    });","file":"unit/test-real-time-config.js","skipped":false,"dir":"test"},{"name":"should ignore bad macros for vendor urls","suites":["#execute_"],"updatePoint":{"line":358,"column":48,"index":12945},"line":358,"code":"    it('should ignore bad macros for vendor urls', () => {\n      const vendors = {\n        'fAkeVeNdOR': {\n          'slot_id=SLOT_ID': 0,\n          PAGE_ID: 1\n        }\n      };\n      const inflatedUrls = ['https://localhost:8000/examples/rtcE1.json?slot_id=SLOT_ID&page_id=1&foo_id=FOO_ID'];\n      const rtcCalloutResponses = generateCalloutResponses(1);\n      const expectedRtcArray = [];\n      for (let i = 0; i < 1; i++) {\n        expectedRtcArray.push(rtcEntry(rtcCalloutResponses[i], Object.keys(vendors)[0].toLowerCase(), undefined, true));\n      }\n      const calloutCount = 1;\n      env.sandbox.stub(user(), 'error').callsFake(() => {});\n      return executeTest({\n        vendors,\n        inflatedUrls,\n        rtcCalloutResponses,\n        calloutCount,\n        expectedCalloutUrls: inflatedUrls,\n        expectedRtcArray\n      });\n    });","file":"unit/test-real-time-config.js","skipped":false,"dir":"test"},{"name":"should favor publisher URLs over vendor URLs","suites":["#execute_"],"updatePoint":{"line":382,"column":52,"index":13800},"line":382,"code":"    it('should favor publisher URLs over vendor URLs', () => {\n      const urls = generateUrls(3, 2);\n      const vendors = {\n        'fAkeVeNdOR': {\n          SLOT_ID: 0,\n          PAGE_ID: 1\n        }\n      };\n      const inflatedUrls = ['https://www.0.com/', 'https://www.1.com/', 'https://www.2.com/', 'https://www.3.com/?slot_id=1', 'https://www.4.com/?slot_id=1&page_id=2'];\n      const rtcCalloutResponses = generateCalloutResponses(6);\n      const customMacros = {\n        SLOT_ID: 1,\n        PAGE_ID: () => 2,\n        FOO_ID: () => 3\n      };\n      const expectedRtcArray = [];\n      for (let i = 0; i < 5; i++) {\n        expectedRtcArray.push(rtcEntry(rtcCalloutResponses[i], inflatedUrls[i]));\n      }\n      expectedRtcArray.push(rtcEntry(null, Object.keys(vendors)[0].toLowerCase(), RTC_ERROR_ENUM.MAX_CALLOUTS_EXCEEDED, true));\n      const calloutCount = 5;\n      return executeTest({\n        urls,\n        vendors,\n        customMacros,\n        rtcCalloutResponses,\n        calloutCount,\n        expectedCalloutUrls: inflatedUrls,\n        expectedRtcArray\n      });\n    });","file":"unit/test-real-time-config.js","skipped":false,"dir":"test"},{"name":"should not send more than one RTC callout to the same url","suites":["#execute_"],"updatePoint":{"line":413,"column":65,"index":14901},"line":413,"code":"    it('should not send more than one RTC callout to the same url', () => {\n      const urls = ['https://www.0.com/', 'https://www.0.com/'];\n      const rtcCalloutResponses = generateCalloutResponses(1);\n      const calloutCount = 1;\n      const expectedCalloutUrls = ['https://www.0.com/'];\n      const expectedRtcArray = [{\n        response: rtcCalloutResponses[0],\n        callout: getCalloutParam_(urls[0]),\n        rtcTime: 10\n      }, {\n        callout: getCalloutParam_(urls[1]),\n        error: RTC_ERROR_ENUM.DUPLICATE_URL,\n        rtcTime: 10\n      }];\n      return executeTest({\n        urls,\n        inflatedUrls: urls,\n        rtcCalloutResponses,\n        calloutCount,\n        expectedCalloutUrls,\n        expectedRtcArray\n      });\n    });","file":"unit/test-real-time-config.js","skipped":false,"dir":"test"},{"name":"should not send an RTC callout to an insecure url","suites":["#execute_"],"updatePoint":{"line":436,"column":57,"index":15647},"line":436,"code":"    it('should not send an RTC callout to an insecure url', () => {\n      const urls = ['https://www.1.com/', 'https://www.2.com', 'http://www.insecure.biz/'];\n      const rtcCalloutResponses = [{\n        'response1': {\n          'fooArray': ['foo']\n        }\n      }, {\n        'response2': {\n          'insecure': ['virus']\n        }\n      }];\n      const calloutCount = 2;\n      const expectedCalloutUrls = ['https://www.1.com/', 'https://www.2.com'];\n      const expectedRtcArray = [{\n        response: rtcCalloutResponses[0],\n        callout: getCalloutParam_(urls[0]),\n        rtcTime: 10\n      }, {\n        response: rtcCalloutResponses[1],\n        callout: getCalloutParam_(urls[1]),\n        rtcTime: 10\n      }, {\n        callout: getCalloutParam_(urls[2]),\n        error: RTC_ERROR_ENUM.INSECURE_URL,\n        rtcTime: 10\n      }];\n      return executeTest({\n        urls,\n        inflatedUrls: urls,\n        rtcCalloutResponses,\n        calloutCount,\n        expectedCalloutUrls,\n        expectedRtcArray\n      });\n    });","file":"unit/test-real-time-config.js","skipped":false,"dir":"test"},{"name":"should not send RTC callout to unknown vendor","suites":["#execute_"],"updatePoint":{"line":471,"column":53,"index":16676},"line":471,"code":"    it('should not send RTC callout to unknown vendor', () => {\n      const vendors = {\n        'unknownvendor': {\n          SLOT_ID: 1,\n          PAGE_ID: 2\n        }\n      };\n      const calloutCount = 0;\n      const expectedRtcArray = [];\n      expectedRtcArray.push(rtcEntry(null, Object.keys(vendors)[0].toLowerCase(), RTC_ERROR_ENUM.UNKNOWN_VENDOR, true));\n      return executeTest({\n        vendors,\n        calloutCount,\n        expectedRtcArray\n      });\n    });","file":"unit/test-real-time-config.js","skipped":false,"dir":"test"},{"name":"should handle bad JSON response","suites":["#execute_"],"updatePoint":{"line":487,"column":39,"index":17134},"line":487,"code":"    it('should handle bad JSON response', () => {\n      const urls = generateUrls(1);\n      const rtcCalloutResponses = ['{foo:bar'];\n      const expectedRtcArray = [];\n      rtcCalloutResponses.forEach((rtcResponse, i) => {\n        expectedRtcArray.push(rtcEntry(null, urls[i], RTC_ERROR_ENUM.MALFORMED_JSON_RESPONSE));\n      });\n      const calloutCount = 1;\n      return executeTest({\n        urls,\n        inflatedUrls: urls,\n        rtcCalloutResponses,\n        calloutCount,\n        expectedCalloutUrls: urls,\n        expectedRtcArray,\n        responseIsString: true\n      });\n    });","file":"unit/test-real-time-config.js","skipped":false,"dir":"test"},{"name":"should catch errors due to network failure","suites":["#execute_"],"updatePoint":{"line":505,"column":50,"index":17736},"line":505,"code":"    it('should catch errors due to network failure', () => {\n      const urls = generateUrls(1);\n      const rtcCalloutResponses = generateCalloutResponses(1);\n      const expectedRtcArray = [];\n      rtcCalloutResponses.forEach((rtcResponse, i) => {\n        expectedRtcArray.push(rtcEntry(null, urls[i], RTC_ERROR_ENUM.NETWORK_FAILURE));\n      });\n      const calloutCount = 1;\n      return executeTest({\n        urls,\n        inflatedUrls: urls,\n        rtcCalloutResponses,\n        calloutCount,\n        expectedCalloutUrls: urls,\n        expectedRtcArray,\n        failXhr: true\n      });\n    });","file":"unit/test-real-time-config.js","skipped":false,"dir":"test"},{"name":"should handle consentState ","suites":["#execute_"],"updatePoint":{"line":524,"column":52,"index":18393},"line":524,"code":"      it(`should handle consentState ${consentState}`, () => {\n        setRtcConfig({\n          urls: ['https://foo.com']\n        });\n        const rtcResult = execute_(element, {}, CONSENT_POLICY_STATE[consentState], /* consentString */undefined, /* consentMetadata */undefined, () => {});\n        switch (CONSENT_POLICY_STATE[consentState]) {\n          case CONSENT_POLICY_STATE.SUFFICIENT:\n          case CONSENT_POLICY_STATE.UNKNOWN_NOT_REQUIRED:\n            expect(rtcResult).to.be.ok;\n            return rtcResult.then(() => expect(fetchJsonStub).to.be.calledOnce);\n          case CONSENT_POLICY_STATE.UNKNOWN:\n          case CONSENT_POLICY_STATE.INSUFFICIENT:\n            return rtcResult.then(result => {\n              expect(result).to.deep.equal([]);\n              expect(fetchJsonStub).to.not.be.called;\n            });\n            break;\n          default:\n            throw new Error(`unknown consent state ${consentState}`);\n        }\n      });","file":"unit/test-real-time-config.js","skipped":false,"dir":"test"},{"name":"should return parsed rtcConfig for valid rtcConfig","suites":["#validateRtcConfig"],"updatePoint":{"line":552,"column":58,"index":19514},"line":552,"code":"    it('should return parsed rtcConfig for valid rtcConfig', () => {\n      const rtcConfig = {\n        'vendors': {\n          'fakeVendor': {\n            'SLOT_ID': '1',\n            'PAGE_ID': '1'\n          },\n          'nonexistent-vendor': {\n            'SLOT_ID': '1'\n          },\n          'fakeVendor2': {\n            'SLOT_ID': '1'\n          }\n        },\n        'urls': ['https://localhost:4443/posts?slot_id=SLOT_ID', 'https://broken.zzzzzzz'],\n        'timeoutMillis': 500\n      };\n      setRtcConfig(rtcConfig);\n      validateRtcConfig_(element);\n      expect(rtc.rtcConfig_).to.be.ok;\n      expect(rtc.rtcConfig_).to.deep.equal(rtcConfig);\n    });","file":"unit/test-real-time-config.js","skipped":false,"dir":"test"},{"name":"should allow timeout of 0","suites":["#validateRtcConfig"],"updatePoint":{"line":574,"column":33,"index":20148},"line":574,"code":"    it('should allow timeout of 0', () => {\n      const rtcConfig = {\n        'vendors': {\n          'fakeVendor': {\n            'SLOT_ID': '1',\n            'PAGE_ID': '1'\n          },\n          'nonexistent-vendor': {\n            'SLOT_ID': '1'\n          },\n          'fakeVendor2': {\n            'SLOT_ID': '1'\n          }\n        },\n        'urls': ['https://localhost:4443/posts?slot_id=SLOT_ID', 'https://broken.zzzzzzz'],\n        'timeoutMillis': 0\n      };\n      setRtcConfig(rtcConfig);\n      validateRtcConfig_(element);\n      expect(rtc.rtcConfig_).to.be.ok;\n      expect(rtc.rtcConfig_).to.deep.equal(rtcConfig);\n    });","file":"unit/test-real-time-config.js","skipped":false,"dir":"test"},{"name":"should not allow timeout greater than default","suites":["#validateRtcConfig"],"updatePoint":{"line":596,"column":53,"index":20800},"line":596,"code":"    it('should not allow timeout greater than default', () => {\n      const rtcConfig = {\n        'vendors': {\n          'fakeVendor': {\n            'SLOT_ID': '1',\n            'PAGE_ID': '1'\n          },\n          'nonexistent-vendor': {\n            'SLOT_ID': '1'\n          },\n          'fakeVendor2': {\n            'SLOT_ID': '1'\n          }\n        },\n        'urls': ['https://localhost:4443/posts?slot_id=SLOT_ID', 'https://broken.zzzzzzz'],\n        'timeoutMillis': 1000000\n      };\n      const expectedRtcConfig = {\n        'vendors': {\n          'fakeVendor': {\n            'SLOT_ID': '1',\n            'PAGE_ID': '1'\n          },\n          'nonexistent-vendor': {\n            'SLOT_ID': '1'\n          },\n          'fakeVendor2': {\n            'SLOT_ID': '1'\n          }\n        },\n        'urls': ['https://localhost:4443/posts?slot_id=SLOT_ID', 'https://broken.zzzzzzz'],\n        'timeoutMillis': 1000\n      };\n      setRtcConfig(rtcConfig);\n      validateRtcConfig_(element);\n      expect(rtc.rtcConfig_).to.be.ok;\n      expect(rtc.rtcConfig_).to.deep.equal(expectedRtcConfig);\n    });","file":"unit/test-real-time-config.js","skipped":false,"dir":"test"},{"name":"should return false if rtc-config not specified","suites":["#validateRtcConfig"],"updatePoint":{"line":634,"column":55,"index":21899},"line":634,"code":"    it('should return false if rtc-config not specified', () => {\n      expect(validateRtcConfig_(element)).to.be.false;\n    });","file":"unit/test-real-time-config.js","skipped":false,"dir":"test"},{"name":"should return false for rtcConfig missing required values","suites":["#validateRtcConfig"],"updatePoint":{"line":652,"column":67,"index":22344},"line":652,"code":"      it('should return false for rtcConfig missing required values', () => {\n        setRtcConfig(rtcConfig);\n        allowConsoleError(() => {\n          dev().error('RTCTESTS', 'Error');\n          validatedRtcConfig = validateRtcConfig_(element);\n        });\n        expect(validatedRtcConfig).to.be.false;\n      });","file":"unit/test-real-time-config.js","skipped":false,"dir":"test"},{"name":"should return false for bad JSON rtcConfig","suites":["#validateRtcConfig"],"updatePoint":{"line":661,"column":50,"index":22654},"line":661,"code":"    it('should return false for bad JSON rtcConfig', () => {\n      const rtcConfig = '{\"urls\" : [\"https://google.com\"]';\n      element.setAttribute('rtc-config', rtcConfig);\n      validatedRtcConfig = validateRtcConfig_(element);\n      expect(validatedRtcConfig).to.be.false;\n    });","file":"unit/test-real-time-config.js","skipped":false,"dir":"test"},{"name":"should not send RTC if macro expansion exceeds timeout","suites":["#inflateAndSendRtc_"],"updatePoint":{"line":669,"column":62,"index":22998},"line":669,"code":"    it('should not send RTC if macro expansion exceeds timeout', () => {\n      const url = 'https://www.example.biz/?dummy=DUMMY';\n      rtc.rtcConfig_ = {\n        timeoutMillis: 10\n      };\n      const macroDelay = 20;\n      const macros = {\n        DUMMY: () => {\n          return Services.timerFor(env.win).promise(macroDelay).then(() => {\n            return 'foo';\n          });\n        }\n      };\n      inflateAndSendRtc_(url, macros);\n      return rtc.promiseArray_[0].then(errorResponse => {\n        expect(errorResponse.error).to.equal(RTC_ERROR_ENUM.MACRO_EXPAND_TIMEOUT);\n      });\n    });","file":"unit/test-real-time-config.js","skipped":false,"dir":"test"},{"name":"should not send RTC if no longer current","suites":["#inflateAndSendRtc_"],"updatePoint":{"line":687,"column":48,"index":23584},"line":687,"code":"    it('should not send RTC if no longer current', () => {\n      const url = 'https://www.example.biz/';\n      rtc.rtcConfig_ = {\n        timeoutMillis: 1000\n      };\n      const macros = {};\n      inflateAndSendRtc_(url, macros, /* errorReportingUrl */undefined, () => {\n        throw cancellation();\n      });\n      return rtc.promiseArray_[0].then(errorResponse => {\n        expect(errorResponse).to.be.undefined;\n      });\n    });","file":"unit/test-real-time-config.js","skipped":false,"dir":"test"},{"name":"should expand globally allowed macros","suites":["#inflateAndSendRtc_"],"updatePoint":{"line":700,"column":45,"index":24016},"line":700,"code":"    it('should expand globally allowed macros', async () => {\n      /**\n       * todo(keshavvi):\n       * This test conflicts with `should resolve element dependent vars and macros` in test-linker-manager.js\n       * Both save and retrieve to a cookie named `foo`. They should be isolated and the cookies should not be shared.\n       * But, for some reason they are. So, for now use a cookie called bar here.\n       */\n      const url = 'https://www.foo.example/?title=TITLE&src=SOURCE_URL&cid=CLIENT_ID(bar)';\n      rtc.rtcConfig_ = {\n        timeoutMillis: 1000\n      };\n      const macros = {};\n      inflateAndSendRtc_(url, macros, /* errorReportingUrl */undefined, () => {} // checkStillCurrent\n      );\n\n      await rtc.promiseArray_[0];\n      expect(fetchJsonStub).to.be.called;\n      expect(fetchJsonStub).to.be.calledWithMatch(/https:\\/\\/www\\.foo\\.example\\/\\?title=[^&]*&src=[^&]*&cid=amp-\\S+$/);\n    });","file":"unit/test-real-time-config.js","skipped":false,"dir":"test"},{"name":"should not modify rtcConfig if consent state is valid","suites":["modifyRtcConfigForConsentStateSettings"],"updatePoint":{"line":739,"column":61,"index":25443},"line":739,"code":"    it('should not modify rtcConfig if consent state is valid', () => {\n      const expectedRtcConfig = {\n        ...rtc.rtcConfig_\n      };\n      rtc.consentState_ = CONSENT_POLICY_STATE.SUFFICIENT;\n      rtc.modifyRtcConfigForConsentStateSettings();\n      expect(rtc.rtcConfig_).to.deep.equal(expectedRtcConfig);\n    });","file":"unit/test-real-time-config.js","skipped":false,"dir":"test"},{"name":"should clear all callouts if global setting mismatched","suites":["modifyRtcConfigForConsentStateSettings"],"updatePoint":{"line":747,"column":62,"index":25767},"line":747,"code":"    it('should clear all callouts if global setting mismatched', () => {\n      rtc.rtcConfig_.sendRegardlessOfConsentState = ['INSUFFICIENT'];\n      const expectedRtcConfig = {\n        ...rtc.rtcConfig_\n      };\n      expectedRtcConfig.vendors = {};\n      expectedRtcConfig.urls = [];\n      rtc.consentState_ = CONSENT_POLICY_STATE.UNKNOWN;\n      rtc.modifyRtcConfigForConsentStateSettings();\n      expect(rtc.rtcConfig_).to.deep.equal(expectedRtcConfig);\n    });","file":"unit/test-real-time-config.js","skipped":false,"dir":"test"},{"name":"should handle empty urls array","suites":["modifyRtcConfigForConsentStateSettings"],"updatePoint":{"line":758,"column":38,"index":26207},"line":758,"code":"    it('should handle empty urls array', () => {\n      rtc.consentState_ = CONSENT_POLICY_STATE.UNKNOWN;\n      rtc.rtcConfig_.urls = [];\n      expect(() => rtc.modifyRtcConfigForConsentStateSettings()).not.to.throw();\n    });","file":"unit/test-real-time-config.js","skipped":false,"dir":"test"},{"name":"should handle empty vendors object","suites":["modifyRtcConfigForConsentStateSettings"],"updatePoint":{"line":763,"column":42,"index":26437},"line":763,"code":"    it('should handle empty vendors object', () => {\n      rtc.consentState_ = CONSENT_POLICY_STATE.UNKNOWN;\n      rtc.rtcConfig_.vendors = {};\n      expect(() => rtc.modifyRtcConfigForConsentStateSettings()).not.to.throw();\n    });","file":"unit/test-real-time-config.js","skipped":false,"dir":"test"},{"name":"should handle missing urls array","suites":["modifyRtcConfigForConsentStateSettings"],"updatePoint":{"line":768,"column":40,"index":26668},"line":768,"code":"    it('should handle missing urls array', () => {\n      rtc.consentState_ = CONSENT_POLICY_STATE.UNKNOWN;\n      rtc.rtcConfig_.urls = undefined;\n      expect(() => rtc.modifyRtcConfigForConsentStateSettings()).not.to.throw();\n    });","file":"unit/test-real-time-config.js","skipped":false,"dir":"test"},{"name":"should handle missing vendors object","suites":["modifyRtcConfigForConsentStateSettings"],"updatePoint":{"line":773,"column":44,"index":26907},"line":773,"code":"    it('should handle missing vendors object', () => {\n      rtc.consentState_ = CONSENT_POLICY_STATE.UNKNOWN;\n      rtc.rtcConfig_.vendors = undefined;\n      expect(() => rtc.modifyRtcConfigForConsentStateSettings()).not.to.throw();\n    });","file":"unit/test-real-time-config.js","skipped":false,"dir":"test"},{"name":"should clear just invalid custom URLs","suites":["modifyRtcConfigForConsentStateSettings"],"updatePoint":{"line":778,"column":45,"index":27150},"line":778,"code":"    it('should clear just invalid custom URLs', () => {\n      rtc.rtcConfig_.vendors = {\n        'vendorA': {\n          'sendRegardlessOfConsentState': true,\n          'macros': {\n            'SLOT_ID': '1',\n            'PAGE_ID': '1'\n          }\n        },\n        'vendorB': {\n          'sendRegardlessOfConsentState': ['INSUFFICIENT', 'UNKNOWN'],\n          'macros': {\n            'SLOT_ID': '1'\n          }\n        },\n        'vendorC': {\n          'sendRegardlessOfConsentState': ['UNKNOWN'],\n          'macros': {\n            'SLOT_ID': '1'\n          }\n        }\n      };\n      const expectedRtcConfig = {\n        ...rtc.rtcConfig_\n      };\n      expectedRtcConfig.urls = [];\n      rtc.consentState_ = CONSENT_POLICY_STATE.UNKNOWN;\n      rtc.modifyRtcConfigForConsentStateSettings();\n      expect(rtc.rtcConfig_).to.deep.equal(expectedRtcConfig);\n    });","file":"unit/test-real-time-config.js","skipped":false,"dir":"test"},{"name":"should clear just invalid vendor callouts","suites":["modifyRtcConfigForConsentStateSettings"],"updatePoint":{"line":808,"column":49,"index":28015},"line":808,"code":"    it('should clear just invalid vendor callouts', () => {\n      rtc.rtcConfig_.urls = [{\n        'sendRegardlessOfConsentState': true,\n        'url': 'https://www.rtc.com/example1'\n      }, {\n        'sendRegardlessOfConsentState': ['INSUFFICIENT', 'UNKNOWN'],\n        'url': 'https://www.other-rtc.com/example2'\n      }];\n      const expectedRtcConfig = {\n        ...rtc.rtcConfig_\n      };\n      expectedRtcConfig.vendors = {};\n      rtc.consentState_ = CONSENT_POLICY_STATE.INSUFFICIENT;\n      rtc.modifyRtcConfigForConsentStateSettings();\n      expect(rtc.rtcConfig_).to.deep.equal(expectedRtcConfig);\n    });","file":"unit/test-real-time-config.js","skipped":false,"dir":"test"},{"name":"should not clear callouts if per-callout setting valid","suites":["modifyRtcConfigForConsentStateSettings"],"updatePoint":{"line":824,"column":62,"index":28644},"line":824,"code":"    it('should not clear callouts if per-callout setting valid', () => {\n      rtc.rtcConfig_.vendors = {\n        'vendorA': {\n          'sendRegardlessOfConsentState': true,\n          'macros': {\n            'SLOT_ID': '1',\n            'PAGE_ID': '1'\n          }\n        },\n        'vendorB': {\n          'sendRegardlessOfConsentState': ['UNKNOWN'],\n          'macros': {\n            'SLOT_ID': '1'\n          }\n        },\n        'vendorC': {\n          'SLOT_ID': '1'\n        }\n      };\n      rtc.rtcConfig_.urls = [{\n        'sendRegardlessOfConsentState': true,\n        'url': 'https://www.rtc.com/example1'\n      }, 'https://www.other-rtc.com/example2'];\n      const expectedRtcConfig = {\n        ...rtc.rtcConfig_\n      };\n      expectedRtcConfig.vendors = {\n        'vendorA': {\n          'sendRegardlessOfConsentState': true,\n          'macros': {\n            'SLOT_ID': '1',\n            'PAGE_ID': '1'\n          }\n        }\n      };\n      expectedRtcConfig.urls = [{\n        'sendRegardlessOfConsentState': true,\n        'url': 'https://www.rtc.com/example1'\n      }];\n      rtc.consentState_ = CONSENT_POLICY_STATE.INSUFFICIENT;\n      rtc.modifyRtcConfigForConsentStateSettings();\n      expect(rtc.rtcConfig_).to.deep.equal(expectedRtcConfig);\n    });","file":"unit/test-real-time-config.js","skipped":false,"dir":"test"},{"name":"should handle mix of global and individual consent settings","suites":["modifyRtcConfigForConsentStateSettings"],"updatePoint":{"line":867,"column":67,"index":29910},"line":867,"code":"    it('should handle mix of global and individual consent settings', () => {\n      rtc.rtcConfig_.vendors = {\n        'vendorA': {\n          'sendRegardlessOfConsentState': true,\n          'macros': {\n            'SLOT_ID': '1',\n            'PAGE_ID': '1'\n          }\n        },\n        'vendorB': {\n          'sendRegardlessOfConsentState': ['UNKNOWN'],\n          'macros': {\n            'SLOT_ID': '1'\n          }\n        },\n        'vendorC': {\n          'SLOT_ID': '1'\n        }\n      };\n      rtc.rtcConfig_.urls = [{\n        'sendRegardlessOfConsentState': true,\n        'url': 'https://www.rtc.com/example1'\n      }, 'https://www.other-rtc.com/example2'];\n      rtc.rtcConfig_.sendRegardlessOfConsentState = ['INSUFFICIENT'];\n      const expectedRtcConfig = {\n        ...rtc.rtcConfig_\n      };\n      expectedRtcConfig.vendors = {\n        'vendorA': {\n          'sendRegardlessOfConsentState': true,\n          'macros': {\n            'SLOT_ID': '1',\n            'PAGE_ID': '1'\n          }\n        },\n        'vendorC': {\n          'SLOT_ID': '1'\n        }\n      };\n      expectedRtcConfig.urls = [{\n        'sendRegardlessOfConsentState': true,\n        'url': 'https://www.rtc.com/example1'\n      }, 'https://www.other-rtc.com/example2'];\n      rtc.consentState_ = CONSENT_POLICY_STATE.INSUFFICIENT;\n      rtc.modifyRtcConfigForConsentStateSettings();\n      expect(rtc.rtcConfig_).to.deep.equal(expectedRtcConfig);\n    });","file":"unit/test-real-time-config.js","skipped":false,"dir":"test"},{"name":"should always clear RTC for a new consent state","suites":["modifyRtcConfigForConsentStateSettings"],"updatePoint":{"line":914,"column":55,"index":31329},"line":914,"code":"    it('should always clear RTC for a new consent state', () => {\n      rtc.consentState_ = 'FAKE_NEW_CONSENT_STATE';\n      const expectedRtcConfig = {\n        ...rtc.rtcConfig_\n      };\n      rtc.modifyRtcConfigForConsentStateSettings();\n      expectedRtcConfig.urls = [];\n      expectedRtcConfig.vendors = {};\n      expect(rtc.rtcConfig_).to.deep.equal(expectedRtcConfig);\n    });","file":"unit/test-real-time-config.js","skipped":false,"dir":"test"},{"name":"should not clear RTC for a null consent state","suites":["modifyRtcConfigForConsentStateSettings"],"updatePoint":{"line":924,"column":53,"index":31710},"line":924,"code":"    it('should not clear RTC for a null consent state', () => {\n      rtc.consentState_ = null;\n      const expectedRtcConfig = {\n        ...rtc.rtcConfig_\n      };\n      rtc.modifyRtcConfigForConsentStateSettings();\n      expect(rtc.rtcConfig_).to.deep.equal(expectedRtcConfig);\n    });","file":"unit/test-real-time-config.js","skipped":false,"dir":"test"},{"name":"should send error message pingback to correct url","suites":["sendErrorMessage"],"updatePoint":{"line":947,"column":57,"index":32588},"line":947,"code":"    it('should send error message pingback to correct url', () => {\n      sendErrorMessage(errorType, errorReportingUrl);\n      expect(imageStub).to.be.calledOnce;\n      const href = encodeURIComponent(env.win.location.href);\n      expect(imageMock.src).to.equal(`https://www.example.test?e=${errorType}&h=${href}`);\n    });","file":"unit/test-real-time-config.js","skipped":false,"dir":"test"},{"name":"should resolve if no blocking services is presented","suites":[],"updatePoint":{"line":33,"column":57,"index":1283},"line":33,"code":"  it('should resolve if no blocking services is presented', () => {\n    // <script custom-element=\"amp-experiment\"> should not block\n    addExtensionScript(win, 'amp-experiment');\n    expect(hasRenderDelayingServices(win)).to.be.false;\n    return expect(waitForServices(win)).to.eventually.have.lengthOf(0);\n  });","file":"unit/test-render-delaying-services.js","skipped":false,"dir":"test"},{"name":"should timeout if some blocking services are missing","suites":[],"updatePoint":{"line":39,"column":58,"index":1598},"line":39,"code":"  it('should timeout if some blocking services are missing', function* () {\n    addExtensionScript(win, 'amp-dynamic-css-classes');\n    win.document.body.appendChild(win.document.createElement('amp-experiment'));\n    expect(hasRenderDelayingServices(win)).to.be.true;\n    addExtensionScript(win, 'non-blocking-extension');\n    const promise = waitForServices(win);\n    dynamicCssResolve();\n    experimentResolve(); // 'amp-experiment' is actually blocked by 'variant'\n\n    // Push ourselves back on the event queue,\n    // to allow the dynamic-css service.whenReady\n    // to resolve\n    yield macroTask();\n    clock.tick(3000);\n    return expect(promise).to.eventually.be.rejectedWith('variant');\n  });","file":"unit/test-render-delaying-services.js","skipped":false,"dir":"test"},{"name":"should resolve when all extensions are ready","suites":[],"updatePoint":{"line":55,"column":50,"index":2294},"line":55,"code":"  it('should resolve when all extensions are ready', () => {\n    addExtensionScript(win, 'amp-dynamic-css-classes');\n    win.document.body.appendChild(win.document.createElement('amp-experiment'));\n    expect(hasRenderDelayingServices(win)).to.be.true;\n    addExtensionScript(win, 'non-blocking-extension');\n    const promise = waitForServices(win);\n    dynamicCssResolve();\n    variantResolve(); // this unblocks 'amp-experiment'\n\n    return expect(promise).to.eventually.have.lengthOf(2);\n  });","file":"unit/test-render-delaying-services.js","skipped":false,"dir":"test"},{"name":"should resolve if no service.whenReady","suites":[],"updatePoint":{"line":66,"column":44,"index":2785},"line":66,"code":"  it('should resolve if no service.whenReady', () => {\n    addExtensionScript(win, 'amp-dynamic-css-classes');\n    expect(hasRenderDelayingServices(win)).to.be.true;\n    addExtensionScript(win, 'non-blocking-extension');\n    const promise = waitForServices(win);\n    dynamicCssResolve();\n    return expect(promise).to.eventually.have.lengthOf(1);\n  });","file":"unit/test-render-delaying-services.js","skipped":false,"dir":"test"},{"name":"should wait to resolve for service.whenReady","suites":[],"updatePoint":{"line":74,"column":50,"index":3144},"line":74,"code":"  it('should wait to resolve for service.whenReady', () => {\n    addExtensionScript(win, 'amp-dynamic-css-classes');\n    win.document.body.appendChild(win.document.createElement('amp-experiment'));\n    expect(hasRenderDelayingServices(win)).to.be.true;\n    addExtensionScript(win, 'non-blocking-extension');\n    const promise = waitForServices(win);\n    dynamicCssResolve();\n    variantResolve(); // this unblocks 'amp-experiment'\n\n    return promise.then(services => {\n      expect(services.length).to.be.equal(2);\n      expect(variantStub).to.be.calledOnce;\n    });\n  });","file":"unit/test-render-delaying-services.js","skipped":false,"dir":"test"},{"name":"should initialize correctly","suites":[],"updatePoint":{"line":44,"column":33,"index":1604},"line":44,"code":"  it('should initialize correctly', () => {\n    expect(resource.getId()).to.equal(1);\n    expect(resource.debugid).to.equal('amp-fake-element#1');\n    expect(resource.getLayoutPriority()).to.equal(LayoutPriority_Enum.ADS);\n    expect(resource.getState()).to.equal(ResourceState_Enum.NOT_BUILT);\n    expect(resource.getLayoutBox().width).to.equal(0);\n    expect(resource.getLayoutBox().height).to.equal(0);\n    expect(resource.isInViewport()).to.equal(false);\n  });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should initialize correctly when already built","suites":[],"updatePoint":{"line":53,"column":52,"index":2088},"line":53,"code":"  it('should initialize correctly when already built', () => {\n    elementMock.expects('isBuilt').returns(true).once();\n    expect(new Resource(1, element, resources).getState()).to.equal(ResourceState_Enum.NOT_LAID_OUT);\n  });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should not build before upgraded","suites":[],"updatePoint":{"line":57,"column":38,"index":2302},"line":57,"code":"  it('should not build before upgraded', () => {\n    elementMock.expects('isUpgraded').returns(false).atLeast(1);\n    elementMock.expects('buildInternal').never();\n    elementMock.expects('updateLayoutBox').never();\n    expect(resource.build()).to.be.null;\n    expect(resource.getState()).to.equal(ResourceState_Enum.NOT_BUILT);\n  });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should build after upgraded","suites":[],"updatePoint":{"line":64,"column":33,"index":2632},"line":64,"code":"  it('should build after upgraded', () => {\n    const buildPromise = Promise.resolve();\n    elementMock.expects('isUpgraded').returns(true).atLeast(1);\n    elementMock.expects('buildInternal').returns(buildPromise).once();\n    elementMock.expects('updateLayoutBox').never();\n    return resource.build().then(() => {\n      expect(resource.getState()).to.equal(ResourceState_Enum.NOT_LAID_OUT);\n    });\n  });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should build if element is currently building","suites":[],"updatePoint":{"line":73,"column":51,"index":3057},"line":73,"code":"  it('should build if element is currently building', () => {\n    elementMock.expects('isBuilt').returns(false).once();\n    elementMock.expects('isBuilding').returns(true).once();\n    elementMock.expects('isUpgraded').returns(true).once();\n    elementMock.expects('buildInternal').returns(Promise.resolve()).once();\n    const r = new Resource(2, element, resources);\n    expect(r.isBuilding()).to.be.true;\n  });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should denylist on build failure","suites":[],"updatePoint":{"line":81,"column":38,"index":3456},"line":81,"code":"  it('should denylist on build failure', () => {\n    env.sandbox.stub(resource, 'maybeReportErrorOnBuildFailure').callsFake(() => {});\n    elementMock.expects('isUpgraded').returns(true).atLeast(1);\n    elementMock.expects('buildInternal').returns(Promise.reject(new Error('intentional'))).once();\n    elementMock.expects('updateLayoutBox').never();\n    const buildPromise = resource.build();\n    expect(resource.isBuilding()).to.be.true;\n    return buildPromise.then(() => {\n      throw new Error('must have failed');\n    }, () => {\n      expect(resource.isBuilding()).to.be.false;\n      expect(resource.getState()).to.equal(ResourceState_Enum.NOT_BUILT);\n    });\n  });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should mark as not ready for layout even if already measured","suites":[],"updatePoint":{"line":95,"column":66,"index":4155},"line":95,"code":"  it('should mark as not ready for layout even if already measured', () => {\n    const box = layoutRectLtwh(0, 0, 100, 200);\n    elementMock.expects('isUpgraded').returns(true).atLeast(1);\n    elementMock.expects('buildInternal').returns(Promise.resolve()).once();\n    resource.layoutBox_ = box;\n    return resource.build().then(() => {\n      expect(resource.getState()).to.equal(ResourceState_Enum.NOT_LAID_OUT);\n    });\n  });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should mark as not laid out if not yet measured","suites":[],"updatePoint":{"line":104,"column":53,"index":4570},"line":104,"code":"  it('should mark as not laid out if not yet measured', () => {\n    elementMock.expects('isUpgraded').returns(true).atLeast(1);\n    elementMock.expects('buildInternal').returns(Promise.resolve()).once();\n    return resource.build().then(() => {\n      expect(resource.getState()).to.equal(ResourceState_Enum.NOT_LAID_OUT);\n    });\n  });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should track size changes on measure","suites":[],"updatePoint":{"line":111,"column":42,"index":4895},"line":111,"code":"  it('should track size changes on measure', () => {\n    elementMock.expects('isUpgraded').returns(true).atLeast(1);\n    elementMock.expects('buildInternal').returns(Promise.resolve()).once();\n    return resource.build().then(() => {\n      elementMock.expects('getBoundingClientRect').returns({\n        left: 11,\n        top: 12,\n        width: 111,\n        height: 222\n      }).once();\n      elementMock.expects('updateLayoutBox').withExactArgs(env.sandbox.match(data => {\n        return data.width == 111 && data.height == 222;\n      }), true).once();\n      resource.measure();\n    });\n  });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should track no size changes on measure","suites":[],"updatePoint":{"line":127,"column":45,"index":5492},"line":127,"code":"  it('should track no size changes on measure', () => {\n    layoutRectLtwh(0, 0, 0, 0);\n    elementMock.expects('isUpgraded').returns(true).atLeast(1);\n    elementMock.expects('buildInternal').returns(Promise.resolve()).once();\n    return resource.build().then(() => {\n      elementMock.expects('getBoundingClientRect').returns({\n        left: 0,\n        top: 0,\n        width: 0,\n        height: 0\n      }).once();\n      elementMock.expects('updateLayoutBox').withExactArgs(env.sandbox.match(data => {\n        return data.width == 0 && data.height == 0;\n      }), false).once();\n      resource.measure();\n    });\n  });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should allow to measure when not upgraded","suites":[],"updatePoint":{"line":144,"column":47,"index":6114},"line":144,"code":"  it('should allow to measure when not upgraded', () => {\n    elementMock.expects('isUpgraded').returns(false).atLeast(1);\n    const viewport = Services.viewportForDoc(resource.element);\n    env.sandbox.stub(viewport, 'getLayoutRect').returns(layoutRectLtwh(0, 100, 300, 100));\n    env.sandbox.stub(viewport, 'isDeclaredFixed').returns(false);\n    env.sandbox.stub(viewport, 'supportsPositionFixed').returns(true);\n    expect(() => {\n      resource.measure();\n    }).to.not.throw();\n    expect(resource.getLayoutBox()).to.eql(layoutRectLtwh(0, 100, 300, 100));\n  });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should allow measure even when not built","suites":[],"updatePoint":{"line":155,"column":46,"index":6680},"line":155,"code":"  it('should allow measure even when not built', () => {\n    elementMock.expects('isUpgraded').returns(true).atLeast(1);\n    elementMock.expects('getBoundingClientRect').returns(layoutRectLtwh(0, 0, 0, 0)).once();\n    resource.measure();\n    expect(resource.getState()).to.equal(ResourceState_Enum.NOT_BUILT);\n    expect(resource.isFixed()).to.be.false;\n  });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should measure and update state","suites":[],"updatePoint":{"line":162,"column":37,"index":7031},"line":162,"code":"  it('should measure and update state', () => {\n    elementMock.expects('isUpgraded').returns(true).atLeast(1);\n    elementMock.expects('buildInternal').returns(Promise.resolve()).once();\n    return resource.build().then(() => {\n      elementMock.expects('getBoundingClientRect').returns({\n        left: 11,\n        top: 12,\n        width: 111,\n        height: 222\n      }).once();\n      elementMock.expects('updateLayoutBox').withExactArgs(env.sandbox.match(data => {\n        return data.width == 111 && data.height == 222;\n      }), true).once();\n      resource.measure();\n      expect(resource.getState()).to.equal(ResourceState_Enum.READY_FOR_LAYOUT);\n      expect(resource.getLayoutBox().left).to.equal(11);\n      expect(resource.getLayoutBox().top).to.equal(12);\n      expect(resource.getLayoutBox().width).to.equal(111);\n      expect(resource.getLayoutBox().height).to.equal(222);\n      expect(resource.isFixed()).to.be.false;\n    });\n  });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should update initial box only on first measure","suites":[],"updatePoint":{"line":184,"column":53,"index":7995},"line":184,"code":"  it('should update initial box only on first measure', () => {\n    elementMock.expects('isUpgraded').returns(true).atLeast(1);\n    elementMock.expects('buildInternal').returns(Promise.resolve()).once();\n    return resource.build().then(() => {\n      element.getBoundingClientRect = () => ({\n        left: 11,\n        top: 12,\n        width: 111,\n        height: 222\n      });\n      resource.measure();\n      expect(resource.getLayoutBox().top).to.equal(12);\n      expect(resource.getInitialLayoutBox().top).to.equal(12);\n      element.getBoundingClientRect = () => ({\n        left: 11,\n        top: 22,\n        width: 111,\n        height: 222\n      });\n      resource.measure();\n      expect(resource.getLayoutBox().top).to.equal(22);\n      expect(resource.getInitialLayoutBox().top).to.equal(12);\n    });\n  });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should request measure even when not built","suites":[],"updatePoint":{"line":208,"column":48,"index":8803},"line":208,"code":"  it('should request measure even when not built', () => {\n    expect(resource.isMeasureRequested()).to.be.false;\n    elementMock.expects('getBoundingClientRect').never();\n    resource.requestMeasure();\n    expect(resource.isMeasureRequested()).to.be.true;\n  });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should request measure when built","suites":[],"updatePoint":{"line":214,"column":39,"index":9057},"line":214,"code":"  it('should request measure when built', () => {\n    expect(resource.isMeasureRequested()).to.be.false;\n    elementMock.expects('getBoundingClientRect').never();\n    resource.state_ = ResourceState_Enum.READY_FOR_LAYOUT;\n    resource.requestMeasure();\n    expect(resource.isMeasureRequested()).to.be.true;\n  });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should always layout if has not been laid out before","suites":[],"updatePoint":{"line":221,"column":58,"index":9389},"line":221,"code":"  it('should always layout if has not been laid out before', () => {\n    elementMock.expects('isUpgraded').returns(true).atLeast(1);\n    resource.state_ = ResourceState_Enum.NOT_LAID_OUT;\n    resource.layoutBox_ = {\n      left: 11,\n      top: 12,\n      width: 111,\n      height: 222\n    };\n    elementMock.expects('getBoundingClientRect').returns(resource.layoutBox_).once();\n    resource.measure();\n    expect(resource.getState()).to.equal(ResourceState_Enum.READY_FOR_LAYOUT);\n  });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should not relayout if has box has not changed","suites":[],"updatePoint":{"line":234,"column":52,"index":9868},"line":234,"code":"  it('should not relayout if has box has not changed', () => {\n    resource.state_ = ResourceState_Enum.LAYOUT_COMPLETE;\n    resource.layoutBox_ = {\n      left: 11,\n      top: 12,\n      width: 111,\n      height: 222\n    };\n\n    // Left is not part of validation.\n    elementMock.expects('getBoundingClientRect').returns({\n      left: 11 + 10,\n      top: 12,\n      width: 111,\n      height: 222\n    }).once();\n    resource.measure();\n    expect(resource.getState()).to.equal(ResourceState_Enum.LAYOUT_COMPLETE);\n    expect(resource.getLayoutBox().left).to.equal(11 + 10);\n  });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should not relayout if box changed but element didn't opt in","suites":[],"updatePoint":{"line":254,"column":66,"index":10459},"line":254,"code":"  it(\"should not relayout if box changed but element didn't opt in\", () => {\n    elementMock.expects('isUpgraded').returns(true).atLeast(1);\n    resource.state_ = ResourceState_Enum.LAYOUT_COMPLETE;\n    resource.layoutBox_ = {\n      left: 11,\n      top: 12,\n      width: 111,\n      height: 222\n    };\n\n    // Width changed.\n    elementMock.expects('getBoundingClientRect').returns({\n      left: 11,\n      top: 12,\n      width: 111 + 10,\n      height: 222\n    }).once();\n    elementMock.expects('isRelayoutNeeded').returns(false).atLeast(1);\n    resource.measure();\n    expect(resource.getState()).to.equal(ResourceState_Enum.LAYOUT_COMPLETE);\n    expect(resource.getLayoutBox().width).to.equal(111 + 10);\n  });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should relayout if box changed when element opted in","suites":[],"updatePoint":{"line":276,"column":58,"index":11162},"line":276,"code":"  it('should relayout if box changed when element opted in', () => {\n    elementMock.expects('isUpgraded').returns(true).atLeast(1);\n    resource.state_ = ResourceState_Enum.LAYOUT_COMPLETE;\n    resource.layoutBox_ = {\n      left: 11,\n      top: 12,\n      width: 111,\n      height: 222\n    };\n\n    // Width changed.\n    elementMock.expects('getBoundingClientRect').returns({\n      left: 11,\n      top: 12,\n      width: 111 + 10,\n      height: 222\n    }).once();\n    elementMock.expects('isRelayoutNeeded').returns(true).atLeast(1);\n    resource.measure();\n    expect(resource.getState()).to.equal(ResourceState_Enum.READY_FOR_LAYOUT);\n    expect(resource.getLayoutBox().width).to.equal(111 + 10);\n  });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should not relayout if element has not completed layout","suites":[],"updatePoint":{"line":298,"column":61,"index":11868},"line":298,"code":"  it('should not relayout if element has not completed layout', () => {\n    elementMock.expects('isUpgraded').returns(true).atLeast(1);\n    resource.state_ = ResourceState_Enum.LAYOUT_SCHEDULED;\n    resource.layoutBox_ = {\n      left: 11,\n      top: 12,\n      width: 111,\n      height: 222\n    };\n\n    // Width changed.\n    elementMock.expects('getBoundingClientRect').returns({\n      left: 11,\n      top: 12,\n      width: 111 + 10,\n      height: 222\n    }).once();\n    elementMock.expects('isRelayoutNeeded').returns(true).atLeast(0);\n    resource.measure();\n    expect(resource.getState()).to.equal(ResourceState_Enum.LAYOUT_SCHEDULED);\n    expect(resource.getLayoutBox().width).to.equal(111 + 10);\n  });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should calculate NOT fixed for non-displayed elements","suites":[],"updatePoint":{"line":320,"column":59,"index":12573},"line":320,"code":"  it('should calculate NOT fixed for non-displayed elements', () => {\n    elementMock.expects('isUpgraded').returns(true).atLeast(1);\n    elementMock.expects('getBoundingClientRect').returns(layoutRectLtwh(0, 0, 0, 0)).once();\n    element.isAlwaysFixed = () => true;\n    resource.measure();\n    expect(resource.isFixed()).to.be.false;\n  });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should calculate fixed for always-fixed parent","suites":[],"updatePoint":{"line":327,"column":52,"index":12907},"line":327,"code":"  it('should calculate fixed for always-fixed parent', () => {\n    elementMock.expects('isUpgraded').returns(true).atLeast(1);\n    elementMock.expects('getBoundingClientRect').returns(layoutRectLtwh(0, 0, 10, 10)).once();\n    const viewport = Services.viewportForDoc(resource.element);\n    env.sandbox.stub(viewport, 'getScrollTop').returns(11);\n    env.sandbox.defineProperty(element, 'offsetParent', {\n      value: {\n        isAlwaysFixed: () => true\n      }\n    });\n    resource.measure();\n    expect(resource.isFixed()).to.be.true;\n    expect(resource.getLayoutBox()).to.eql(layoutRectLtwh(0, 11, 10, 10));\n  });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should calculate fixed for fixed-style parent","suites":[],"updatePoint":{"line":341,"column":51,"index":13523},"line":341,"code":"  it('should calculate fixed for fixed-style parent', () => {\n    elementMock.expects('isUpgraded').returns(true).atLeast(1);\n    elementMock.expects('getBoundingClientRect').returns(layoutRectLtwh(0, 0, 10, 10)).once();\n    const viewport = Services.viewportForDoc(resource.element);\n    env.sandbox.stub(viewport, 'getScrollTop').returns(11);\n    const fixedParent = doc.createElement('div');\n    fixedParent.style.position = 'fixed';\n    doc.body.appendChild(fixedParent);\n    fixedParent.appendChild(element);\n    env.sandbox.stub(viewport, 'isDeclaredFixed').callsFake(el => {\n      if (el == element) {\n        return false;\n      }\n      if (el == fixedParent) {\n        return true;\n      }\n    });\n    resource.measure();\n    expect(resource.isFixed()).to.be.true;\n    expect(resource.getLayoutBox()).to.eql(layoutRectLtwh(0, 11, 10, 10));\n  });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should return layout box when the resource has NOT been measured","suites":["ensureMeasured"],"updatePoint":{"line":363,"column":72,"index":14436},"line":363,"code":"    it('should return layout box when the resource has NOT been measured', () => {\n      env.sandbox.stub(element, 'isUpgraded').returns(true);\n      env.sandbox.stub(element, 'getBoundingClientRect').returns(layoutRectLtwh(0, 0, 10, 10));\n      return resource.ensureMeasured();\n    });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should return layout box when the resource has been measured","suites":["ensureMeasured"],"updatePoint":{"line":368,"column":68,"index":14720},"line":368,"code":"    it('should return layout box when the resource has been measured', () => {\n      env.sandbox.stub(element, 'isUpgraded').returns(true);\n      env.sandbox.stub(element, 'getBoundingClientRect').returns(layoutRectLtwh(0, 0, 10, 10));\n      resource.measure();\n      return resource.ensureMeasured();\n    });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should measure placeholder with stubbed parent","suites":["placeholder measure"],"updatePoint":{"line":396,"column":54,"index":15704},"line":396,"code":"    it('should measure placeholder with stubbed parent', () => {\n      elementMock.expects('getBoundingClientRect').returns(rect).once();\n      resource.measure();\n      expect(resource.getState()).to.equal(ResourceState_Enum.READY_FOR_LAYOUT);\n      expect(resource.hasBeenMeasured()).to.be.true;\n    });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should NOT measure placeholder with unstubbed parent","suites":["placeholder measure"],"updatePoint":{"line":402,"column":60,"index":16016},"line":402,"code":"    it('should NOT measure placeholder with unstubbed parent', () => {\n      // Parent is not stubbed yet, w/o __AMP__RESOURCE.\n      delete element.parentElement.__AMP__RESOURCE;\n      elementMock.expects('getBoundingClientRect').never();\n      resource.measure();\n      expect(resource.getState()).to.equal(ResourceState_Enum.NOT_LAID_OUT);\n      expect(resource.hasBeenMeasured()).to.be.false;\n    });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should support abnormal case with no parent","suites":["placeholder measure"],"updatePoint":{"line":410,"column":51,"index":16412},"line":410,"code":"    it('should support abnormal case with no parent', () => {\n      delete element.parentElement;\n      elementMock.expects('getBoundingClientRect').returns(rect).once();\n      resource.measure();\n      expect(resource.getState()).to.equal(ResourceState_Enum.READY_FOR_LAYOUT);\n      expect(resource.hasBeenMeasured()).to.be.true;\n    });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should support abnormal case with non-AMP parent","suites":["placeholder measure"],"updatePoint":{"line":417,"column":56,"index":16756},"line":417,"code":"    it('should support abnormal case with non-AMP parent', () => {\n      element.parentElement = document.createElement('div');\n      elementMock.expects('getBoundingClientRect').returns(rect).once();\n      resource.measure();\n      expect(resource.getState()).to.equal(ResourceState_Enum.READY_FOR_LAYOUT);\n      expect(resource.hasBeenMeasured()).to.be.true;\n    });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should hide and update layout box on collapse","suites":["placeholder measure"],"updatePoint":{"line":425,"column":51,"index":17126},"line":425,"code":"  it('should hide and update layout box on collapse', () => {\n    resource.layoutBox_ = {\n      left: 11,\n      top: 12,\n      width: 111,\n      height: 222\n    };\n    resource.isFixed_ = true;\n    elementMock.expects('updateLayoutBox').withExactArgs(env.sandbox.match(data => {\n      return data.width == 0 && data.height == 0;\n    })).once();\n    const owner = {\n      collapsedCallback: env.sandbox.spy()\n    };\n    env.sandbox.stub(resource, 'getOwner').callsFake(() => {\n      return owner;\n    });\n    resource.completeCollapse();\n    expect(resource.element).to.have.attribute('hidden');\n    expect(resource.getLayoutBox().width).to.equal(0);\n    expect(resource.getLayoutBox().height).to.equal(0);\n    expect(resource.isFixed()).to.be.false;\n    expect(owner.collapsedCallback).to.be.calledOnce;\n  });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should show and request measure on expand","suites":["placeholder measure"],"updatePoint":{"line":449,"column":47,"index":17932},"line":449,"code":"  it('should show and request measure on expand', () => {\n    resource.completeCollapse();\n    resource.layoutBox_ = {\n      left: 11,\n      top: 12,\n      width: 0,\n      height: 0\n    };\n    resource.isFixed_ = false;\n    resource.requestMeasure = env.sandbox.stub();\n    resource.completeExpand();\n    expect(resource.element).to.not.have.display('none');\n    expect(resource.requestMeasure).to.be.calledOnce;\n  });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should ignore startLayout if already completed or failed or going","suites":["placeholder measure"],"updatePoint":{"line":463,"column":71,"index":18375},"line":463,"code":"  it('should ignore startLayout if already completed or failed or going', () => {\n    elementMock.expects('layoutCallback').never();\n    resource.layoutBox_ = {\n      left: 11,\n      top: 12,\n      width: 10,\n      height: 10\n    };\n    resource.state_ = ResourceState_Enum.LAYOUT_COMPLETE;\n    resource.startLayout();\n    resource.state_ = ResourceState_Enum.LAYOUT_FAILED;\n    resource.startLayout();\n    resource.state_ = ResourceState_Enum.READY_FOR_LAYOUT;\n    allowConsoleError(() => {\n      resource.startLayout();\n    });\n    resource.state_ = ResourceState_Enum.LAYOUT_SCHEDULED;\n    resource.layoutPromise_ = {};\n    resource.startLayout();\n  });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should fail startLayout if not built","suites":["placeholder measure"],"updatePoint":{"line":483,"column":42,"index":19003},"line":483,"code":"  it('should fail startLayout if not built', () => {\n    elementMock.expects('layoutCallback').never();\n    resource.state_ = ResourceState_Enum.NOT_BUILT;\n    allowConsoleError(() => {\n      expect(() => {\n        resource.startLayout();\n      }).to.throw(/Not ready to start layout/);\n    });\n  });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should ignore startLayout if not visible","suites":["placeholder measure"],"updatePoint":{"line":492,"column":46,"index":19308},"line":492,"code":"  it('should ignore startLayout if not visible', () => {\n    elementMock.expects('layoutCallback').never();\n    resource.state_ = ResourceState_Enum.LAYOUT_SCHEDULED;\n    resource.layoutBox_ = {\n      left: 11,\n      top: 12,\n      width: 0,\n      height: 0\n    };\n    allowConsoleError(() => {\n      expect(() => {\n        resource.startLayout();\n      }).to.throw(/Not displayed/);\n    });\n  });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should force startLayout for first layout","suites":["placeholder measure"],"updatePoint":{"line":507,"column":47,"index":19707},"line":507,"code":"  it('should force startLayout for first layout', () => {\n    elementMock.expects('layoutCallback').returns(Promise.resolve()).once();\n    resource.state_ = ResourceState_Enum.LAYOUT_SCHEDULED;\n    resource.layoutBox_ = {\n      left: 11,\n      top: 12,\n      width: 10,\n      height: 10\n    };\n    resource.startLayout();\n    expect(resource.getState()).to.equal(ResourceState_Enum.LAYOUT_SCHEDULED);\n  });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should abort startLayout with unload","suites":["placeholder measure"],"updatePoint":{"line":519,"column":42,"index":20109},"line":519,"code":"  it('should abort startLayout with unload', async () => {\n    const neverEndingPromise = new Promise(() => {});\n    elementMock.expects('layoutCallback').returns(neverEndingPromise).once();\n    resource.state_ = ResourceState_Enum.LAYOUT_SCHEDULED;\n    resource.layoutBox_ = {\n      left: 11,\n      top: 12,\n      width: 10,\n      height: 10\n    };\n    const layoutPromise = resource.startLayout();\n    expect(resource.getState()).to.equal(ResourceState_Enum.LAYOUT_SCHEDULED);\n    resource.unload();\n    let error;\n    try {\n      await layoutPromise;\n    } catch (e) {\n      error = e;\n    }\n    expect(error).to.exist;\n    expect(isCancellation(error)).to.be.true;\n  });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should ignore startLayout for re-layout when not opt-in","suites":["placeholder measure"],"updatePoint":{"line":541,"column":61,"index":20803},"line":541,"code":"  it('should ignore startLayout for re-layout when not opt-in', () => {\n    elementMock.expects('layoutCallback').never();\n    resource.state_ = ResourceState_Enum.LAYOUT_SCHEDULED;\n    resource.layoutBox_ = {\n      left: 11,\n      top: 12,\n      width: 10,\n      height: 10\n    };\n    resource.layoutCount_ = 1;\n    elementMock.expects('isRelayoutNeeded').returns(false).atLeast(1);\n    resource.startLayout();\n    expect(resource.getState()).to.equal(ResourceState_Enum.LAYOUT_COMPLETE);\n  });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should force startLayout for re-layout when opt-in","suites":["placeholder measure"],"updatePoint":{"line":555,"column":56,"index":21294},"line":555,"code":"  it('should force startLayout for re-layout when opt-in', () => {\n    elementMock.expects('layoutCallback').returns(Promise.resolve()).once();\n    resource.state_ = ResourceState_Enum.LAYOUT_SCHEDULED;\n    resource.layoutBox_ = {\n      left: 11,\n      top: 12,\n      width: 10,\n      height: 10\n    };\n    resource.layoutCount_ = 1;\n    elementMock.expects('isRelayoutNeeded').returns(true).atLeast(1);\n    resource.startLayout();\n    expect(resource.getState()).to.equal(ResourceState_Enum.LAYOUT_SCHEDULED);\n  });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should complete startLayout","suites":["placeholder measure"],"updatePoint":{"line":569,"column":33,"index":21788},"line":569,"code":"  it('should complete startLayout', () => {\n    elementMock.expects('layoutCallback').returns(Promise.resolve()).once();\n    resource.state_ = ResourceState_Enum.LAYOUT_SCHEDULED;\n    resource.layoutBox_ = {\n      left: 11,\n      top: 12,\n      width: 10,\n      height: 10\n    };\n    const loaded = resource.loadedOnce();\n    const promise = resource.startLayout();\n    expect(resource.layoutPromise_).to.not.equal(null);\n    expect(resource.getState()).to.equal(ResourceState_Enum.LAYOUT_SCHEDULED);\n    return promise.then(() => {\n      expect(resource.getState()).to.equal(ResourceState_Enum.LAYOUT_COMPLETE);\n      expect(resource.layoutPromise_).to.equal(null);\n      return loaded; // Just making sure this doesn't time out.\n    });\n  });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should complete startLayout with height == 0","suites":["placeholder measure"],"updatePoint":{"line":589,"column":50,"index":22551},"line":589,"code":"  it('should complete startLayout with height == 0', () => {\n    elementMock.expects('layoutCallback').returns(Promise.resolve()).once();\n    elementMock.expects('getLayout').returns('fluid').once();\n    resource.state_ = ResourceState_Enum.LAYOUT_SCHEDULED;\n    resource.layoutBox_ = {\n      left: 11,\n      top: 12,\n      width: 10,\n      height: 0\n    };\n    const loaded = resource.loadedOnce();\n    const promise = resource.startLayout();\n    expect(resource.layoutPromise_).to.not.equal(null);\n    expect(resource.getState()).to.equal(ResourceState_Enum.LAYOUT_SCHEDULED);\n    return promise.then(() => {\n      expect(resource.getState()).to.equal(ResourceState_Enum.LAYOUT_COMPLETE);\n      expect(resource.layoutPromise_).to.equal(null);\n      return loaded;\n    });\n  });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should fail startLayout","suites":["placeholder measure"],"updatePoint":{"line":609,"column":29,"index":23310},"line":609,"code":"  it('should fail startLayout', () => {\n    const error = new Error('intentional');\n    elementMock.expects('layoutCallback').returns(Promise.reject(error)).once();\n    resource.state_ = ResourceState_Enum.LAYOUT_SCHEDULED;\n    resource.layoutBox_ = {\n      left: 11,\n      top: 12,\n      width: 10,\n      height: 10\n    };\n    const promise = resource.startLayout();\n    expect(resource.layoutPromise_).to.not.equal(null);\n    expect(resource.getState()).to.equal(ResourceState_Enum.LAYOUT_SCHEDULED);\n\n    /* global fail: false */\n    return promise.then(() => {\n      fail('should not be here');\n    }, () => {\n      expect(resource.getState()).to.equal(ResourceState_Enum.LAYOUT_FAILED);\n      expect(resource.layoutPromise_).to.equal(null);\n      expect(resource.lastLayoutError_).to.equal(error);\n\n      // Should fail with the same error again.\n      return resource.startLayout();\n    }).then(() => {\n      fail('should not be here');\n    }, reason => {\n      expect(reason).to.equal(error);\n    });\n  });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should record layout schedule time","suites":["placeholder measure"],"updatePoint":{"line":639,"column":40,"index":24335},"line":639,"code":"  it('should record layout schedule time', () => {\n    resource.layoutScheduled(300);\n    expect(resource.element.layoutScheduleTime).to.equal(300);\n\n    // The time should be updated if scheduled multiple times.\n    resource.layoutScheduled(400);\n    expect(resource.element.layoutScheduleTime).to.equal(400);\n    expect(resource.getState()).to.equal(ResourceState_Enum.LAYOUT_SCHEDULED);\n  });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should not record layout schedule time in startLayout","suites":["placeholder measure"],"updatePoint":{"line":648,"column":59,"index":24750},"line":648,"code":"  it('should not record layout schedule time in startLayout', () => {\n    resource.state_ = ResourceState_Enum.LAYOUT_SCHEDULED;\n    resource.layoutBox_ = {\n      left: 11,\n      top: 12,\n      width: 10,\n      height: 10\n    };\n    allowConsoleError(() => resource.startLayout());\n    expect(resource.element.layoutScheduleTime).to.be.undefined;\n    expect(resource.getState()).to.equal(ResourceState_Enum.LAYOUT_SCHEDULED);\n  });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should change size and update state","suites":["placeholder measure"],"updatePoint":{"line":660,"column":41,"index":25164},"line":660,"code":"  it('should change size and update state', () => {\n    expect(resource.isMeasureRequested()).to.be.false;\n    resource.state_ = ResourceState_Enum.READY_FOR_LAYOUT;\n    elementMock.expects('applySize').withExactArgs(111, 222, {\n      top: 1,\n      right: 2,\n      bottom: 3,\n      left: 4\n    }).once();\n    resource.changeSize(111, 222, {\n      top: 1,\n      right: 2,\n      bottom: 3,\n      left: 4\n    });\n    expect(resource.isMeasureRequested()).to.be.true;\n  });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should change size but not state","suites":["placeholder measure"],"updatePoint":{"line":677,"column":38,"index":25631},"line":677,"code":"  it('should change size but not state', () => {\n    resource.state_ = ResourceState_Enum.NOT_BUILT;\n    elementMock.expects('applySize').withExactArgs(111, 222, {\n      top: 1,\n      right: 2,\n      bottom: 3,\n      left: 4\n    }).once();\n    resource.changeSize(111, 222, {\n      top: 1,\n      right: 2,\n      bottom: 3,\n      left: 4\n    });\n    expect(resource.getState()).to.equal(ResourceState_Enum.NOT_BUILT);\n  });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should update priority","suites":["placeholder measure"],"updatePoint":{"line":693,"column":28,"index":26044},"line":693,"code":"  it('should update priority', () => {\n    expect(resource.getLayoutPriority()).to.equal(LayoutPriority_Enum.ADS);\n    resource.updateLayoutPriority(LayoutPriority_Enum.ADS);\n    expect(resource.getLayoutPriority()).to.equal(LayoutPriority_Enum.ADS);\n    resource.updateLayoutPriority(LayoutPriority_Enum.BACKGROUND);\n    expect(resource.getLayoutPriority()).to.equal(LayoutPriority_Enum.BACKGROUND);\n    resource.updateLayoutPriority(LayoutPriority_Enum.METADATA);\n    expect(resource.getLayoutPriority()).to.equal(LayoutPriority_Enum.METADATA);\n    resource.updateLayoutPriority(LayoutPriority_Enum.CONTENT);\n    expect(resource.getLayoutPriority()).to.equal(LayoutPriority_Enum.CONTENT);\n  });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should set inViewport to true","suites":["setInViewport"],"updatePoint":{"line":707,"column":37,"index":26936},"line":707,"code":"    it('should set inViewport to true', () => {\n      resource.setInViewport(true);\n      expect(resource.isInViewport()).to.equal(true);\n      expect(resolveWithinViewportSpy).to.be.calledOnce;\n    });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should set resource before Resource created for child element","suites":["Resource set/get ownership"],"updatePoint":{"line":766,"column":69,"index":28598},"line":766,"code":"    it('should set resource before Resource created for child element', () => {\n      owners.setOwner(child, parentResource.element);\n      const childResource = new Resource(1, child, resources);\n      expect(childResource.getOwner()).to.equal(parentResource.element);\n    });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should always get the lastest owner value","suites":["Resource set/get ownership"],"updatePoint":{"line":771,"column":49,"index":28856},"line":771,"code":"    it('should always get the lastest owner value', () => {\n      const childResource = new Resource(1, child, resources);\n      expect(childResource.getOwner()).to.be.null;\n      owners.setOwner(childResource.element, parentResource.element);\n      expect(childResource.owner_).to.equal(parentResource.element);\n      expect(childResource.getOwner()).to.equal(parentResource.element);\n    });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should remove cached value for grandchild","suites":["Resource set/get ownership"],"updatePoint":{"line":778,"column":49,"index":29250},"line":778,"code":"    it('should remove cached value for grandchild', () => {\n      const childResource = new Resource(1, child, resources);\n      const grandChildResource = new Resource(1, grandChild, resources);\n      expect(grandChildResource.getOwner()).to.be.null;\n      owners.setOwner(childResource.element, parentResource.element);\n      expect(childResource.getOwner()).to.equal(parentResource.element);\n      expect(grandChildResource.getOwner()).to.equal(parentResource.element);\n    });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should not change owner if it is set via setOwner","suites":["Resource set/get ownership"],"updatePoint":{"line":786,"column":57,"index":29739},"line":786,"code":"    it('should not change owner if it is set via setOwner', () => {\n      const childResource = new Resource(1, child, resources);\n      const grandChildResource = new Resource(1, grandChild, resources);\n      owners.setOwner(grandChildResource.element, parentResource.element);\n      expect(grandChildResource.getOwner()).to.equal(parentResource.element);\n      owners.setOwner(childResource.element, parentResource.element);\n      expect(grandChildResource.getOwner()).to.equal(parentResource.element);\n    });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should NOT call unlayoutCallback on unbuilt element","suites":["unlayoutCallback"],"updatePoint":{"line":796,"column":59,"index":30299},"line":796,"code":"    it('should NOT call unlayoutCallback on unbuilt element', () => {\n      resource.state_ = ResourceState_Enum.NOT_BUILT;\n      elementMock.expects('unlayoutCallback').never();\n      resource.unlayout();\n      expect(resource.getState()).to.equal(ResourceState_Enum.NOT_BUILT);\n    });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should call unlayoutCallback on built element and update state","suites":["unlayoutCallback"],"updatePoint":{"line":802,"column":70,"index":30598},"line":802,"code":"    it('should call unlayoutCallback on built element and update state', () => {\n      resource.state_ = ResourceState_Enum.LAYOUT_COMPLETE;\n      elementMock.expects('unlayoutCallback').returns(true).once();\n      elementMock.expects('togglePlaceholder').withArgs(true).once();\n      resource.unlayout();\n      expect(resource.getState()).to.equal(ResourceState_Enum.NOT_LAID_OUT);\n    });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"updated state should bypass isRelayoutNeeded","suites":["unlayoutCallback"],"updatePoint":{"line":809,"column":52,"index":30971},"line":809,"code":"    it('updated state should bypass isRelayoutNeeded', () => {\n      resource.state_ = ResourceState_Enum.LAYOUT_COMPLETE;\n      elementMock.expects('unlayoutCallback').returns(true).once();\n      elementMock.expects('togglePlaceholder').withArgs(true).once();\n      elementMock.expects('isUpgraded').returns(true).atLeast(1);\n      elementMock.expects('getBoundingClientRect').returns({\n        left: 1,\n        top: 1,\n        width: 1,\n        height: 1\n      }).once();\n      resource.unlayout();\n      resource.state_ = ResourceState_Enum.LAYOUT_SCHEDULED;\n      elementMock.expects('layoutCallback').returns(Promise.resolve()).once();\n      resource.measure();\n      resource.startLayout();\n    });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should call unlayoutCallback on built element but NOT update state","suites":["unlayoutCallback"],"updatePoint":{"line":826,"column":74,"index":31698},"line":826,"code":"    it('should call unlayoutCallback on built element but NOT update state', () => {\n      resource.state_ = ResourceState_Enum.LAYOUT_COMPLETE;\n      elementMock.expects('unlayoutCallback').returns(false).once();\n      elementMock.expects('togglePlaceholder').withArgs(true).never();\n      resource.unlayout();\n      expect(resource.getState()).to.equal(ResourceState_Enum.LAYOUT_COMPLETE);\n    });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should delegate unload to unlayoutCallback","suites":["unlayoutCallback"],"updatePoint":{"line":833,"column":50,"index":32074},"line":833,"code":"    it('should delegate unload to unlayoutCallback', () => {\n      resource.state_ = ResourceState_Enum.LAYOUT_COMPLETE;\n      elementMock.expects('unlayoutCallback').returns(false).once();\n      elementMock.expects('togglePlaceholder').withArgs(true).never();\n      resource.unload();\n      expect(resource.getState()).to.equal(ResourceState_Enum.LAYOUT_COMPLETE);\n    });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should call pause on unbuilt element","suites":["pause"],"updatePoint":{"line":842,"column":44,"index":32476},"line":842,"code":"    it('should call pause on unbuilt element', () => {\n      resource.state_ = ResourceState_Enum.NOT_BUILT;\n      elementMock.expects('pause').once();\n      resource.pause();\n    });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should call pause on built element","suites":["pause"],"updatePoint":{"line":847,"column":42,"index":32658},"line":847,"code":"    it('should call pause on built element', () => {\n      resource.state_ = ResourceState_Enum.LAYOUT_COMPLETE;\n      elementMock.expects('pause').once();\n      resource.pause();\n    });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should NOT call unlayoutCallback","suites":["pause"],"updatePoint":{"line":852,"column":40,"index":32844},"line":852,"code":"    it('should NOT call unlayoutCallback', () => {\n      resource.state_ = ResourceState_Enum.LAYOUT_COMPLETE;\n      elementMock.expects('pause').once();\n      elementMock.expects('unlayoutCallback').never();\n      resource.pause();\n    });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should call pause on remove for unbuilt ele","suites":["pause","when remove from DOM"],"updatePoint":{"line":859,"column":53,"index":33143},"line":859,"code":"      it('should call pause on remove for unbuilt ele', () => {\n        resource.state_ = ResourceState_Enum.NOT_BUILT;\n        elementMock.expects('pause').once();\n        resource.pauseOnRemove();\n      });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should call pause on remove for built ele","suites":["pause","when remove from DOM"],"updatePoint":{"line":864,"column":51,"index":33350},"line":864,"code":"      it('should call pause on remove for built ele', () => {\n        resource.state_ = ResourceState_Enum.LAYOUT_COMPLETE;\n        elementMock.expects('pause').once();\n        resource.pauseOnRemove();\n      });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should call disconnect on remove for built ele","suites":["pause","manual disconnect"],"updatePoint":{"line":879,"column":56,"index":33922},"line":879,"code":"      it('should call disconnect on remove for built ele', () => {\n        env.sandbox.stub(element, 'isConnected').value(false);\n        const remove = env.sandbox.spy(resources, 'remove');\n        resource.disconnect();\n        expect(remove).to.have.been.called;\n        expect(Resource.forElementOptional(resource.element)).to.not.exist;\n      });","file":"unit/test-resource.js","skipped":true,"dir":"test"},{"name":"should call disconnected regardless of isConnected","suites":["pause","manual disconnect"],"updatePoint":{"line":886,"column":60,"index":34278},"line":886,"code":"      it('should call disconnected regardless of isConnected', () => {\n        // element is already connected to DOM\n        const spy = env.sandbox.spy(resources, 'remove');\n        resource.disconnect();\n        expect(spy).to.have.been.called;\n        expect(Resource.forElementOptional(resource.element)).to.not.exist;\n      });","file":"unit/test-resource.js","skipped":true,"dir":"test"},{"name":"should call resume on unbuilt element","suites":["resume"],"updatePoint":{"line":896,"column":45,"index":34640},"line":896,"code":"    it('should call resume on unbuilt element', () => {\n      resource.state_ = ResourceState_Enum.NOT_BUILT;\n      elementMock.expects('resume').once();\n      resource.resume();\n    });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should call resume on un-paused element","suites":["resume"],"updatePoint":{"line":901,"column":47,"index":34829},"line":901,"code":"    it('should call resume on un-paused element', () => {\n      resource.state_ = ResourceState_Enum.LAYOUT_COMPLETE;\n      elementMock.expects('resume').once();\n      resource.resume();\n    });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should return true if isWithinViewportRatio","suites":["resume"],"updatePoint":{"line":944,"column":49,"index":36212},"line":944,"code":"  it('should return true if isWithinViewportRatio', () => {\n    idleRenderOutsideViewport.returns(5);\n    isWithinViewportRatio.withArgs(5).returns(true);\n    expect(resource.idleRenderOutsideViewport()).to.equal(true);\n  });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should return false for false element idleRenderOutsideViewport","suites":["resume"],"updatePoint":{"line":949,"column":69,"index":36458},"line":949,"code":"  it('should return false for false element idleRenderOutsideViewport', () => {\n    idleRenderOutsideViewport.returns(false);\n    isWithinViewportRatio.withArgs(false).returns(false);\n    expect(resource.idleRenderOutsideViewport()).to.equal(false);\n  });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should allow rendering when bottom falls outside","suites":["boolean API","when element returns true","when element is inside viewport"],"updatePoint":{"line":980,"column":60,"index":37677},"line":980,"code":"        it('should allow rendering when bottom falls outside', () => {\n          resource.layoutBox_ = layoutRectLtwh(0, 10, 100, 100);\n          expect(resource.renderOutsideViewport()).to.equal(true);\n          expect(resolveWithinViewportSpy).to.be.calledOnce;\n        });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should allow rendering when top falls outside","suites":["boolean API","when element returns true","when element is inside viewport"],"updatePoint":{"line":985,"column":57,"index":37950},"line":985,"code":"        it('should allow rendering when top falls outside', () => {\n          resource.layoutBox_ = layoutRectLtwh(0, -10, 100, 100);\n          expect(resource.renderOutsideViewport()).to.equal(true);\n          expect(resolveWithinViewportSpy).to.be.calledOnce;\n        });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should allow rendering when bottom falls outside","suites":["boolean API","when element returns true","when element is inside viewport","when element is owned"],"updatePoint":{"line":994,"column":62,"index":38396},"line":994,"code":"          it('should allow rendering when bottom falls outside', () => {\n            resource.layoutBox_ = layoutRectLtwh(0, 10, 100, 100);\n            expect(resource.renderOutsideViewport()).to.equal(true);\n            expect(resolveWithinViewportSpy).to.be.calledOnce;\n          });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should allow rendering when top falls outside","suites":["boolean API","when element returns true","when element is inside viewport","when element is owned"],"updatePoint":{"line":999,"column":59,"index":38679},"line":999,"code":"          it('should allow rendering when top falls outside', () => {\n            resource.layoutBox_ = layoutRectLtwh(0, -10, 100, 100);\n            expect(resource.renderOutsideViewport()).to.equal(true);\n            expect(resolveWithinViewportSpy).to.be.calledOnce;\n          });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should allow rendering when scrolling towards","suites":["boolean API","when element returns true","when element is just below viewport"],"updatePoint":{"line":1010,"column":57,"index":39150},"line":1010,"code":"        it('should allow rendering when scrolling towards', () => {\n          resources.lastVelocity_ = 2;\n          expect(resource.renderOutsideViewport()).to.equal(true);\n          expect(resolveWithinViewportSpy).to.be.calledOnce;\n        });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should allow rendering when scrolling away","suites":["boolean API","when element returns true","when element is just below viewport"],"updatePoint":{"line":1015,"column":54,"index":39394},"line":1015,"code":"        it('should allow rendering when scrolling away', () => {\n          resources.lastVelocity_ = -2;\n          expect(resource.renderOutsideViewport()).to.equal(true);\n          expect(resolveWithinViewportSpy).to.be.calledOnce;\n        });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should allow rendering when scrolling towards","suites":["boolean API","when element returns true","when element is just below viewport","when element is owned"],"updatePoint":{"line":1024,"column":59,"index":39811},"line":1024,"code":"          it('should allow rendering when scrolling towards', () => {\n            resources.lastVelocity_ = 2;\n            expect(resource.renderOutsideViewport()).to.equal(true);\n            expect(resolveWithinViewportSpy).to.be.calledOnce;\n          });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should allow rendering when scrolling away","suites":["boolean API","when element returns true","when element is just below viewport","when element is owned"],"updatePoint":{"line":1029,"column":56,"index":40065},"line":1029,"code":"          it('should allow rendering when scrolling away', () => {\n            resources.lastVelocity_ = -2;\n            expect(resource.renderOutsideViewport()).to.equal(true);\n            expect(resolveWithinViewportSpy).to.be.calledOnce;\n          });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should allow rendering when scrolling towards","suites":["boolean API","when element returns true","when element is marginally below viewport"],"updatePoint":{"line":1040,"column":57,"index":40516},"line":1040,"code":"        it('should allow rendering when scrolling towards', () => {\n          resources.lastVelocity_ = 2;\n          expect(resource.renderOutsideViewport()).to.equal(true);\n          expect(resolveWithinViewportSpy).to.be.calledOnce;\n        });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should allow rendering when scrolling away","suites":["boolean API","when element returns true","when element is marginally below viewport"],"updatePoint":{"line":1045,"column":54,"index":40760},"line":1045,"code":"        it('should allow rendering when scrolling away', () => {\n          resources.lastVelocity_ = -2;\n          expect(resource.renderOutsideViewport()).to.equal(true);\n          expect(resolveWithinViewportSpy).to.be.calledOnce;\n        });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should allow rendering when scrolling towards","suites":["boolean API","when element returns true","when element is marginally below viewport","when element is owned"],"updatePoint":{"line":1054,"column":59,"index":41177},"line":1054,"code":"          it('should allow rendering when scrolling towards', () => {\n            resources.lastVelocity_ = 2;\n            expect(resource.renderOutsideViewport()).to.equal(true);\n            expect(resolveWithinViewportSpy).to.be.calledOnce;\n          });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should allow rendering when scrolling away","suites":["boolean API","when element returns true","when element is marginally below viewport","when element is owned"],"updatePoint":{"line":1059,"column":56,"index":41431},"line":1059,"code":"          it('should allow rendering when scrolling away', () => {\n            resources.lastVelocity_ = -2;\n            expect(resource.renderOutsideViewport()).to.equal(true);\n            expect(resolveWithinViewportSpy).to.be.calledOnce;\n          });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should allow rendering","suites":["boolean API","when element returns true","when element is wayyy below viewport"],"updatePoint":{"line":1070,"column":34,"index":41855},"line":1070,"code":"        it('should allow rendering', () => {\n          expect(resource.renderOutsideViewport()).to.equal(true);\n          expect(resolveWithinViewportSpy).to.be.calledOnce;\n        });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should allow rendering when scrolling towards","suites":["boolean API","when element returns true","when element is wayyy below viewport"],"updatePoint":{"line":1074,"column":57,"index":42063},"line":1074,"code":"        it('should allow rendering when scrolling towards', () => {\n          resources.lastVelocity_ = 2;\n          expect(resource.renderOutsideViewport()).to.equal(true);\n          expect(resolveWithinViewportSpy).to.be.calledOnce;\n        });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should allow rendering when scrolling away","suites":["boolean API","when element returns true","when element is wayyy below viewport"],"updatePoint":{"line":1079,"column":54,"index":42307},"line":1079,"code":"        it('should allow rendering when scrolling away', () => {\n          resources.lastVelocity_ = -2;\n          expect(resource.renderOutsideViewport()).to.equal(true);\n          expect(resolveWithinViewportSpy).to.be.calledOnce;\n        });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should allow rendering","suites":["boolean API","when element returns true","when element is wayyy below viewport","when element is owned"],"updatePoint":{"line":1088,"column":36,"index":42701},"line":1088,"code":"          it('should allow rendering', () => {\n            expect(resource.renderOutsideViewport()).to.equal(true);\n            expect(resolveWithinViewportSpy).to.be.calledOnce;\n          });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should allow rendering when scrolling towards","suites":["boolean API","when element returns true","when element is wayyy below viewport","when element is owned"],"updatePoint":{"line":1092,"column":59,"index":42917},"line":1092,"code":"          it('should allow rendering when scrolling towards', () => {\n            resources.lastVelocity_ = 2;\n            expect(resource.renderOutsideViewport()).to.equal(true);\n            expect(resolveWithinViewportSpy).to.be.calledOnce;\n          });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should allow rendering when scrolling away","suites":["boolean API","when element returns true","when element is wayyy below viewport","when element is owned"],"updatePoint":{"line":1097,"column":56,"index":43171},"line":1097,"code":"          it('should allow rendering when scrolling away', () => {\n            resources.lastVelocity_ = -2;\n            expect(resource.renderOutsideViewport()).to.equal(true);\n            expect(resolveWithinViewportSpy).to.be.calledOnce;\n          });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should allow rendering when scrolling towards","suites":["boolean API","when element returns true","when element is just above viewport"],"updatePoint":{"line":1108,"column":57,"index":43616},"line":1108,"code":"        it('should allow rendering when scrolling towards', () => {\n          resources.lastVelocity_ = -2;\n          expect(resource.renderOutsideViewport()).to.equal(true);\n          expect(resolveWithinViewportSpy).to.be.calledOnce;\n        });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should allow rendering when scrolling away","suites":["boolean API","when element returns true","when element is just above viewport"],"updatePoint":{"line":1113,"column":54,"index":43861},"line":1113,"code":"        it('should allow rendering when scrolling away', () => {\n          resources.lastVelocity_ = 2;\n          expect(resource.renderOutsideViewport()).to.equal(true);\n          expect(resolveWithinViewportSpy).to.be.calledOnce;\n        });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should allow rendering when scrolling towards","suites":["boolean API","when element returns true","when element is just above viewport","when element is owned"],"updatePoint":{"line":1122,"column":59,"index":44277},"line":1122,"code":"          it('should allow rendering when scrolling towards', () => {\n            resources.lastVelocity_ = -2;\n            expect(resource.renderOutsideViewport()).to.equal(true);\n            expect(resolveWithinViewportSpy).to.be.calledOnce;\n          });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should allow rendering when scrolling away","suites":["boolean API","when element returns true","when element is just above viewport","when element is owned"],"updatePoint":{"line":1127,"column":56,"index":44532},"line":1127,"code":"          it('should allow rendering when scrolling away', () => {\n            resources.lastVelocity_ = 2;\n            expect(resource.renderOutsideViewport()).to.equal(true);\n            expect(resolveWithinViewportSpy).to.be.calledOnce;\n          });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should allow rendering when scrolling towards","suites":["boolean API","when element returns true","when element is marginally above viewport"],"updatePoint":{"line":1138,"column":57,"index":44983},"line":1138,"code":"        it('should allow rendering when scrolling towards', () => {\n          resources.lastVelocity_ = -2;\n          expect(resource.renderOutsideViewport()).to.equal(true);\n          expect(resolveWithinViewportSpy).to.be.calledOnce;\n        });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should allow rendering when scrolling away","suites":["boolean API","when element returns true","when element is marginally above viewport"],"updatePoint":{"line":1143,"column":54,"index":45228},"line":1143,"code":"        it('should allow rendering when scrolling away', () => {\n          resources.lastVelocity_ = 2;\n          expect(resource.renderOutsideViewport()).to.equal(true);\n          expect(resolveWithinViewportSpy).to.be.calledOnce;\n        });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should allow rendering when scrolling towards","suites":["boolean API","when element returns true","when element is marginally above viewport","when element is owned"],"updatePoint":{"line":1152,"column":59,"index":45644},"line":1152,"code":"          it('should allow rendering when scrolling towards', () => {\n            resources.lastVelocity_ = -2;\n            expect(resource.renderOutsideViewport()).to.equal(true);\n            expect(resolveWithinViewportSpy).to.be.calledOnce;\n          });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should allow rendering when scrolling away","suites":["boolean API","when element returns true","when element is marginally above viewport","when element is owned"],"updatePoint":{"line":1157,"column":56,"index":45899},"line":1157,"code":"          it('should allow rendering when scrolling away', () => {\n            resources.lastVelocity_ = 2;\n            expect(resource.renderOutsideViewport()).to.equal(true);\n            expect(resolveWithinViewportSpy).to.be.calledOnce;\n          });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should allow rendering","suites":["boolean API","when element returns true","when element is wayyy above viewport"],"updatePoint":{"line":1168,"column":34,"index":46323},"line":1168,"code":"        it('should allow rendering', () => {\n          expect(resource.renderOutsideViewport()).to.equal(true);\n          expect(resolveWithinViewportSpy).to.be.calledOnce;\n        });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should allow rendering when scrolling towards","suites":["boolean API","when element returns true","when element is wayyy above viewport"],"updatePoint":{"line":1172,"column":57,"index":46531},"line":1172,"code":"        it('should allow rendering when scrolling towards', () => {\n          resources.lastVelocity_ = -2;\n          expect(resource.renderOutsideViewport()).to.equal(true);\n          expect(resolveWithinViewportSpy).to.be.calledOnce;\n        });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should allow rendering when scrolling away","suites":["boolean API","when element returns true","when element is wayyy above viewport"],"updatePoint":{"line":1177,"column":54,"index":46776},"line":1177,"code":"        it('should allow rendering when scrolling away', () => {\n          resources.lastVelocity_ = 2;\n          expect(resource.renderOutsideViewport()).to.equal(true);\n          expect(resolveWithinViewportSpy).to.be.calledOnce;\n        });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should allow rendering","suites":["boolean API","when element returns true","when element is wayyy above viewport","when element is owned"],"updatePoint":{"line":1186,"column":36,"index":47169},"line":1186,"code":"          it('should allow rendering', () => {\n            expect(resource.renderOutsideViewport()).to.equal(true);\n            expect(resolveWithinViewportSpy).to.be.calledOnce;\n          });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should allow rendering when scrolling towards","suites":["boolean API","when element returns true","when element is wayyy above viewport","when element is owned"],"updatePoint":{"line":1190,"column":59,"index":47385},"line":1190,"code":"          it('should allow rendering when scrolling towards', () => {\n            resources.lastVelocity_ = -2;\n            expect(resource.renderOutsideViewport()).to.equal(true);\n            expect(resolveWithinViewportSpy).to.be.calledOnce;\n          });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should allow rendering when scrolling away","suites":["boolean API","when element returns true","when element is wayyy above viewport","when element is owned"],"updatePoint":{"line":1195,"column":56,"index":47640},"line":1195,"code":"          it('should allow rendering when scrolling away', () => {\n            resources.lastVelocity_ = 2;\n            expect(resource.renderOutsideViewport()).to.equal(true);\n            expect(resolveWithinViewportSpy).to.be.calledOnce;\n          });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should allow rendering when bottom falls outside","suites":["boolean API","when element returns false","when element is inside viewport"],"updatePoint":{"line":1208,"column":60,"index":48118},"line":1208,"code":"        it('should allow rendering when bottom falls outside', () => {\n          resource.layoutBox_ = layoutRectLtwh(0, 10, 100, 100);\n          expect(resource.renderOutsideViewport()).to.equal(false);\n          expect(resolveWithinViewportSpy).to.be.called;\n        });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should allow rendering when top falls outside","suites":["boolean API","when element returns false","when element is inside viewport"],"updatePoint":{"line":1213,"column":57,"index":48388},"line":1213,"code":"        it('should allow rendering when top falls outside', () => {\n          resource.layoutBox_ = layoutRectLtwh(0, -10, 100, 100);\n          expect(resource.renderOutsideViewport()).to.equal(false);\n          expect(resolveWithinViewportSpy).to.be.called;\n        });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should allow rendering when bottom falls outside","suites":["boolean API","when element returns false","when element is inside viewport","when element is owned"],"updatePoint":{"line":1222,"column":62,"index":48831},"line":1222,"code":"          it('should allow rendering when bottom falls outside', () => {\n            resource.layoutBox_ = layoutRectLtwh(0, 10, 100, 100);\n            expect(resource.renderOutsideViewport()).to.equal(true);\n            expect(resolveWithinViewportSpy).to.be.calledOnce;\n          });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should allow rendering when top falls outside","suites":["boolean API","when element returns false","when element is inside viewport","when element is owned"],"updatePoint":{"line":1227,"column":59,"index":49114},"line":1227,"code":"          it('should allow rendering when top falls outside', () => {\n            resource.layoutBox_ = layoutRectLtwh(0, -10, 100, 100);\n            expect(resource.renderOutsideViewport()).to.equal(true);\n            expect(resolveWithinViewportSpy).to.be.calledOnce;\n          });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should disallow rendering when scrolling towards","suites":["boolean API","when element returns false","when element is just below viewport"],"updatePoint":{"line":1238,"column":60,"index":49588},"line":1238,"code":"        it('should disallow rendering when scrolling towards', () => {\n          resources.lastVelocity_ = 2;\n          expect(resource.renderOutsideViewport()).to.equal(false);\n          expect(resolveWithinViewportSpy).to.be.called;\n        });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should disallow rendering when scrolling away","suites":["boolean API","when element returns false","when element is just below viewport"],"updatePoint":{"line":1243,"column":57,"index":49832},"line":1243,"code":"        it('should disallow rendering when scrolling away', () => {\n          resources.lastVelocity_ = -2;\n          expect(resource.renderOutsideViewport()).to.equal(false);\n          expect(resolveWithinViewportSpy).to.be.called;\n        });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should allow rendering when scrolling towards","suites":["boolean API","when element returns false","when element is just below viewport","when element is owned"],"updatePoint":{"line":1252,"column":59,"index":50246},"line":1252,"code":"          it('should allow rendering when scrolling towards', () => {\n            resources.lastVelocity_ = 2;\n            expect(resource.renderOutsideViewport()).to.equal(true);\n            expect(resolveWithinViewportSpy).to.be.calledOnce;\n          });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should allow rendering when scrolling away","suites":["boolean API","when element returns false","when element is just below viewport","when element is owned"],"updatePoint":{"line":1257,"column":56,"index":50500},"line":1257,"code":"          it('should allow rendering when scrolling away', () => {\n            resources.lastVelocity_ = -2;\n            expect(resource.renderOutsideViewport()).to.equal(true);\n            expect(resolveWithinViewportSpy).to.be.calledOnce;\n          });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should disallow rendering when scrolling towards","suites":["boolean API","when element returns false","when element is marginally below viewport"],"updatePoint":{"line":1268,"column":60,"index":50954},"line":1268,"code":"        it('should disallow rendering when scrolling towards', () => {\n          resources.lastVelocity_ = 2;\n          expect(resource.renderOutsideViewport()).to.equal(false);\n          expect(resolveWithinViewportSpy).to.be.called;\n        });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should disallow rendering when scrolling away","suites":["boolean API","when element returns false","when element is marginally below viewport"],"updatePoint":{"line":1273,"column":57,"index":51198},"line":1273,"code":"        it('should disallow rendering when scrolling away', () => {\n          resources.lastVelocity_ = -2;\n          expect(resource.renderOutsideViewport()).to.equal(false);\n          expect(resolveWithinViewportSpy).to.be.called;\n        });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should allow rendering when scrolling towards","suites":["boolean API","when element returns false","when element is marginally below viewport","when element is owned"],"updatePoint":{"line":1282,"column":59,"index":51612},"line":1282,"code":"          it('should allow rendering when scrolling towards', () => {\n            resources.lastVelocity_ = 2;\n            expect(resource.renderOutsideViewport()).to.equal(true);\n            expect(resolveWithinViewportSpy).to.be.calledOnce;\n          });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should allow rendering when scrolling away","suites":["boolean API","when element returns false","when element is marginally below viewport","when element is owned"],"updatePoint":{"line":1287,"column":56,"index":51866},"line":1287,"code":"          it('should allow rendering when scrolling away', () => {\n            resources.lastVelocity_ = -2;\n            expect(resource.renderOutsideViewport()).to.equal(true);\n            expect(resolveWithinViewportSpy).to.be.calledOnce;\n          });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should disallow rendering","suites":["boolean API","when element returns false","when element is wayyy below viewport"],"updatePoint":{"line":1298,"column":37,"index":52293},"line":1298,"code":"        it('should disallow rendering', () => {\n          expect(resource.renderOutsideViewport()).to.equal(false);\n          expect(resolveWithinViewportSpy).to.be.called;\n        });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should disallow rendering when scrolling towards","suites":["boolean API","when element returns false","when element is wayyy below viewport"],"updatePoint":{"line":1302,"column":60,"index":52501},"line":1302,"code":"        it('should disallow rendering when scrolling towards', () => {\n          resources.lastVelocity_ = 2;\n          expect(resource.renderOutsideViewport()).to.equal(false);\n          expect(resolveWithinViewportSpy).to.be.called;\n        });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should disallow rendering when scrolling away","suites":["boolean API","when element returns false","when element is wayyy below viewport"],"updatePoint":{"line":1307,"column":57,"index":52745},"line":1307,"code":"        it('should disallow rendering when scrolling away', () => {\n          resources.lastVelocity_ = -2;\n          expect(resource.renderOutsideViewport()).to.equal(false);\n          expect(resolveWithinViewportSpy).to.be.called;\n        });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should allow rendering","suites":["boolean API","when element returns false","when element is wayyy below viewport","when element is owned"],"updatePoint":{"line":1316,"column":36,"index":53136},"line":1316,"code":"          it('should allow rendering', () => {\n            expect(resource.renderOutsideViewport()).to.equal(true);\n            expect(resolveWithinViewportSpy).to.be.calledOnce;\n          });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should allow rendering when scrolling towards","suites":["boolean API","when element returns false","when element is wayyy below viewport","when element is owned"],"updatePoint":{"line":1320,"column":59,"index":53352},"line":1320,"code":"          it('should allow rendering when scrolling towards', () => {\n            resources.lastVelocity_ = 2;\n            expect(resource.renderOutsideViewport()).to.equal(true);\n            expect(resolveWithinViewportSpy).to.be.calledOnce;\n          });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should allow rendering when scrolling away","suites":["boolean API","when element returns false","when element is wayyy below viewport","when element is owned"],"updatePoint":{"line":1325,"column":56,"index":53606},"line":1325,"code":"          it('should allow rendering when scrolling away', () => {\n            resources.lastVelocity_ = -2;\n            expect(resource.renderOutsideViewport()).to.equal(true);\n            expect(resolveWithinViewportSpy).to.be.calledOnce;\n          });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should disallow rendering when scrolling towards","suites":["boolean API","when element returns false","when element is just above viewport"],"updatePoint":{"line":1336,"column":60,"index":54054},"line":1336,"code":"        it('should disallow rendering when scrolling towards', () => {\n          resources.lastVelocity_ = -2;\n          expect(resource.renderOutsideViewport()).to.equal(false);\n          expect(resolveWithinViewportSpy).to.be.called;\n        });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should disallow rendering when scrolling away","suites":["boolean API","when element returns false","when element is just above viewport"],"updatePoint":{"line":1341,"column":57,"index":54299},"line":1341,"code":"        it('should disallow rendering when scrolling away', () => {\n          resources.lastVelocity_ = 2;\n          expect(resource.renderOutsideViewport()).to.equal(false);\n          expect(resolveWithinViewportSpy).to.be.called;\n        });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should allow rendering when scrolling towards","suites":["boolean API","when element returns false","when element is just above viewport","when element is owned"],"updatePoint":{"line":1350,"column":59,"index":54712},"line":1350,"code":"          it('should allow rendering when scrolling towards', () => {\n            resources.lastVelocity_ = -2;\n            expect(resource.renderOutsideViewport()).to.equal(true);\n            expect(resolveWithinViewportSpy).to.be.calledOnce;\n          });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should allow rendering when scrolling away","suites":["boolean API","when element returns false","when element is just above viewport","when element is owned"],"updatePoint":{"line":1355,"column":56,"index":54967},"line":1355,"code":"          it('should allow rendering when scrolling away', () => {\n            resources.lastVelocity_ = 2;\n            expect(resource.renderOutsideViewport()).to.equal(true);\n            expect(resolveWithinViewportSpy).to.be.calledOnce;\n          });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should disallow rendering when scrolling towards","suites":["boolean API","when element returns false","when element is marginally above viewport"],"updatePoint":{"line":1366,"column":60,"index":55421},"line":1366,"code":"        it('should disallow rendering when scrolling towards', () => {\n          resources.lastVelocity_ = -2;\n          expect(resource.renderOutsideViewport()).to.equal(false);\n          expect(resolveWithinViewportSpy).to.be.called;\n        });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should disallow rendering when scrolling away","suites":["boolean API","when element returns false","when element is marginally above viewport"],"updatePoint":{"line":1371,"column":57,"index":55666},"line":1371,"code":"        it('should disallow rendering when scrolling away', () => {\n          resources.lastVelocity_ = 2;\n          expect(resource.renderOutsideViewport()).to.equal(false);\n          expect(resolveWithinViewportSpy).to.be.called;\n        });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should allow rendering when scrolling towards","suites":["boolean API","when element returns false","when element is marginally above viewport","when element is owned"],"updatePoint":{"line":1380,"column":59,"index":56079},"line":1380,"code":"          it('should allow rendering when scrolling towards', () => {\n            resources.lastVelocity_ = -2;\n            expect(resource.renderOutsideViewport()).to.equal(true);\n            expect(resolveWithinViewportSpy).to.be.calledOnce;\n          });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should allow rendering when scrolling away","suites":["boolean API","when element returns false","when element is marginally above viewport","when element is owned"],"updatePoint":{"line":1385,"column":56,"index":56334},"line":1385,"code":"          it('should allow rendering when scrolling away', () => {\n            resources.lastVelocity_ = 2;\n            expect(resource.renderOutsideViewport()).to.equal(true);\n            expect(resolveWithinViewportSpy).to.be.calledOnce;\n          });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should disallow rendering","suites":["boolean API","when element returns false","when element is wayyy above viewport"],"updatePoint":{"line":1396,"column":37,"index":56761},"line":1396,"code":"        it('should disallow rendering', () => {\n          expect(resource.renderOutsideViewport()).to.equal(false);\n          expect(resolveWithinViewportSpy).to.be.called;\n        });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should disallow rendering when scrolling towards","suites":["boolean API","when element returns false","when element is wayyy above viewport"],"updatePoint":{"line":1400,"column":60,"index":56969},"line":1400,"code":"        it('should disallow rendering when scrolling towards', () => {\n          resources.lastVelocity_ = -2;\n          expect(resource.renderOutsideViewport()).to.equal(false);\n          expect(resolveWithinViewportSpy).to.be.called;\n        });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should disallow rendering when scrolling away","suites":["boolean API","when element returns false","when element is wayyy above viewport"],"updatePoint":{"line":1405,"column":57,"index":57214},"line":1405,"code":"        it('should disallow rendering when scrolling away', () => {\n          resources.lastVelocity_ = 2;\n          expect(resource.renderOutsideViewport()).to.equal(false);\n          expect(resolveWithinViewportSpy).to.be.called;\n        });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should allow rendering","suites":["boolean API","when element returns false","when element is wayyy above viewport","when element is owned"],"updatePoint":{"line":1414,"column":36,"index":57604},"line":1414,"code":"          it('should allow rendering', () => {\n            expect(resource.renderOutsideViewport()).to.equal(true);\n            expect(resolveWithinViewportSpy).to.be.calledOnce;\n          });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should allow rendering when scrolling towards","suites":["boolean API","when element returns false","when element is wayyy above viewport","when element is owned"],"updatePoint":{"line":1418,"column":59,"index":57820},"line":1418,"code":"          it('should allow rendering when scrolling towards', () => {\n            resources.lastVelocity_ = -2;\n            expect(resource.renderOutsideViewport()).to.equal(true);\n            expect(resolveWithinViewportSpy).to.be.calledOnce;\n          });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should allow rendering when scrolling away","suites":["boolean API","when element returns false","when element is wayyy above viewport","when element is owned"],"updatePoint":{"line":1423,"column":56,"index":58075},"line":1423,"code":"          it('should allow rendering when scrolling away', () => {\n            resources.lastVelocity_ = 2;\n            expect(resource.renderOutsideViewport()).to.equal(true);\n            expect(resolveWithinViewportSpy).to.be.calledOnce;\n          });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should allow rendering when bottom falls outside","suites":["number API","when element is inside viewport"],"updatePoint":{"line":1437,"column":58,"index":58527},"line":1437,"code":"      it('should allow rendering when bottom falls outside', () => {\n        resource.layoutBox_ = layoutRectLtwh(0, 10, 100, 100);\n        expect(resource.renderOutsideViewport()).to.equal(true);\n        expect(resolveWithinViewportSpy).to.be.calledOnce;\n      });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should allow rendering when top falls outside","suites":["number API","when element is inside viewport"],"updatePoint":{"line":1442,"column":55,"index":58790},"line":1442,"code":"      it('should allow rendering when top falls outside', () => {\n        resource.layoutBox_ = layoutRectLtwh(0, -10, 100, 100);\n        expect(resource.renderOutsideViewport()).to.equal(true);\n        expect(resolveWithinViewportSpy).to.be.calledOnce;\n      });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should allow rendering when bottom falls outside","suites":["number API","when element is inside viewport","when element is owned"],"updatePoint":{"line":1451,"column":60,"index":59218},"line":1451,"code":"        it('should allow rendering when bottom falls outside', () => {\n          resource.layoutBox_ = layoutRectLtwh(0, 10, 100, 100);\n          expect(resource.renderOutsideViewport()).to.equal(true);\n          expect(resolveWithinViewportSpy).to.be.calledOnce;\n        });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should allow rendering when top falls outside","suites":["number API","when element is inside viewport","when element is owned"],"updatePoint":{"line":1456,"column":57,"index":59491},"line":1456,"code":"        it('should allow rendering when top falls outside', () => {\n          resource.layoutBox_ = layoutRectLtwh(0, -10, 100, 100);\n          expect(resource.renderOutsideViewport()).to.equal(true);\n          expect(resolveWithinViewportSpy).to.be.calledOnce;\n        });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should allow rendering when scrolling towards","suites":["number API","when element is just below viewport"],"updatePoint":{"line":1467,"column":55,"index":59940},"line":1467,"code":"      it('should allow rendering when scrolling towards', () => {\n        resources.lastVelocity_ = 2;\n        expect(resource.renderOutsideViewport()).to.equal(true);\n        expect(resolveWithinViewportSpy).to.be.calledOnce;\n      });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should allow rendering when scrolling away","suites":["number API","when element is just below viewport"],"updatePoint":{"line":1472,"column":52,"index":60174},"line":1472,"code":"      it('should allow rendering when scrolling away', () => {\n        resources.lastVelocity_ = -2;\n        expect(resource.renderOutsideViewport()).to.equal(true);\n        expect(resolveWithinViewportSpy).to.be.calledOnce;\n      });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should allow rendering when scrolling towards","suites":["number API","when element is just below viewport","when element is owned"],"updatePoint":{"line":1481,"column":57,"index":60573},"line":1481,"code":"        it('should allow rendering when scrolling towards', () => {\n          resources.lastVelocity_ = 2;\n          expect(resource.renderOutsideViewport()).to.equal(true);\n          expect(resolveWithinViewportSpy).to.be.calledOnce;\n        });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should allow rendering when scrolling away","suites":["number API","when element is just below viewport","when element is owned"],"updatePoint":{"line":1486,"column":54,"index":60817},"line":1486,"code":"        it('should allow rendering when scrolling away', () => {\n          resources.lastVelocity_ = -2;\n          expect(resource.renderOutsideViewport()).to.equal(true);\n          expect(resolveWithinViewportSpy).to.be.calledOnce;\n        });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should allow rendering when scrolling towards","suites":["number API","when element is marginally below viewport"],"updatePoint":{"line":1497,"column":55,"index":61246},"line":1497,"code":"      it('should allow rendering when scrolling towards', () => {\n        resources.lastVelocity_ = 2;\n        expect(resource.renderOutsideViewport()).to.equal(true);\n        expect(resolveWithinViewportSpy).to.be.calledOnce;\n      });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should disallow rendering when scrolling away","suites":["number API","when element is marginally below viewport"],"updatePoint":{"line":1502,"column":55,"index":61483},"line":1502,"code":"      it('should disallow rendering when scrolling away', () => {\n        resources.lastVelocity_ = -2;\n        expect(resource.renderOutsideViewport()).to.equal(false);\n        expect(resolveWithinViewportSpy).to.be.called;\n      });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should allow rendering when scrolling towards","suites":["number API","when element is marginally below viewport","when element is owned"],"updatePoint":{"line":1511,"column":57,"index":61879},"line":1511,"code":"        it('should allow rendering when scrolling towards', () => {\n          resources.lastVelocity_ = 2;\n          expect(resource.renderOutsideViewport()).to.equal(true);\n          expect(resolveWithinViewportSpy).to.be.calledOnce;\n        });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should allow rendering when scrolling away","suites":["number API","when element is marginally below viewport","when element is owned"],"updatePoint":{"line":1516,"column":54,"index":62123},"line":1516,"code":"        it('should allow rendering when scrolling away', () => {\n          resources.lastVelocity_ = -2;\n          expect(resource.renderOutsideViewport()).to.equal(true);\n          expect(resolveWithinViewportSpy).to.be.calledOnce;\n        });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should disallow rendering","suites":["number API","when element is wayyy below viewport"],"updatePoint":{"line":1527,"column":35,"index":62528},"line":1527,"code":"      it('should disallow rendering', () => {\n        expect(resource.renderOutsideViewport()).to.equal(false);\n        expect(resolveWithinViewportSpy).to.be.called;\n      });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should disallow rendering when scrolling towards","suites":["number API","when element is wayyy below viewport"],"updatePoint":{"line":1531,"column":58,"index":62728},"line":1531,"code":"      it('should disallow rendering when scrolling towards', () => {\n        resources.lastVelocity_ = 2;\n        expect(resource.renderOutsideViewport()).to.equal(false);\n        expect(resolveWithinViewportSpy).to.be.called;\n      });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should disallow rendering when scrolling away","suites":["number API","when element is wayyy below viewport"],"updatePoint":{"line":1536,"column":55,"index":62962},"line":1536,"code":"      it('should disallow rendering when scrolling away', () => {\n        resources.lastVelocity_ = -2;\n        expect(resource.renderOutsideViewport()).to.equal(false);\n        expect(resolveWithinViewportSpy).to.be.called;\n      });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should allow rendering","suites":["number API","when element is wayyy below viewport","when element is owned"],"updatePoint":{"line":1545,"column":34,"index":63335},"line":1545,"code":"        it('should allow rendering', () => {\n          expect(resource.renderOutsideViewport()).to.equal(true);\n          expect(resolveWithinViewportSpy).to.be.calledOnce;\n        });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should allow rendering when scrolling towards","suites":["number API","when element is wayyy below viewport","when element is owned"],"updatePoint":{"line":1549,"column":57,"index":63543},"line":1549,"code":"        it('should allow rendering when scrolling towards', () => {\n          resources.lastVelocity_ = 2;\n          expect(resource.renderOutsideViewport()).to.equal(true);\n          expect(resolveWithinViewportSpy).to.be.calledOnce;\n        });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should allow rendering when scrolling away","suites":["number API","when element is wayyy below viewport","when element is owned"],"updatePoint":{"line":1554,"column":54,"index":63787},"line":1554,"code":"        it('should allow rendering when scrolling away', () => {\n          resources.lastVelocity_ = -2;\n          expect(resource.renderOutsideViewport()).to.equal(true);\n          expect(resolveWithinViewportSpy).to.be.calledOnce;\n        });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should allow rendering when scrolling towards","suites":["number API","when element is just above viewport"],"updatePoint":{"line":1565,"column":55,"index":64210},"line":1565,"code":"      it('should allow rendering when scrolling towards', () => {\n        resources.lastVelocity_ = -2;\n        expect(resource.renderOutsideViewport()).to.equal(true);\n        expect(resolveWithinViewportSpy).to.be.calledOnce;\n      });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should allow rendering when scrolling away","suites":["number API","when element is just above viewport"],"updatePoint":{"line":1570,"column":52,"index":64445},"line":1570,"code":"      it('should allow rendering when scrolling away', () => {\n        resources.lastVelocity_ = 2;\n        expect(resource.renderOutsideViewport()).to.equal(true);\n        expect(resolveWithinViewportSpy).to.be.calledOnce;\n      });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should allow rendering when scrolling towards","suites":["number API","when element is just above viewport","when element is owned"],"updatePoint":{"line":1579,"column":57,"index":64843},"line":1579,"code":"        it('should allow rendering when scrolling towards', () => {\n          resources.lastVelocity_ = -2;\n          expect(resource.renderOutsideViewport()).to.equal(true);\n          expect(resolveWithinViewportSpy).to.be.calledOnce;\n        });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should allow rendering when scrolling away","suites":["number API","when element is just above viewport","when element is owned"],"updatePoint":{"line":1584,"column":54,"index":65088},"line":1584,"code":"        it('should allow rendering when scrolling away', () => {\n          resources.lastVelocity_ = 2;\n          expect(resource.renderOutsideViewport()).to.equal(true);\n          expect(resolveWithinViewportSpy).to.be.calledOnce;\n        });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should allow rendering when scrolling towards","suites":["number API","when element is marginally above viewport"],"updatePoint":{"line":1595,"column":55,"index":65517},"line":1595,"code":"      it('should allow rendering when scrolling towards', () => {\n        resources.lastVelocity_ = -2;\n        expect(resource.renderOutsideViewport()).to.equal(true);\n        expect(resolveWithinViewportSpy).to.be.calledOnce;\n      });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should disallow rendering when scrolling away","suites":["number API","when element is marginally above viewport"],"updatePoint":{"line":1600,"column":55,"index":65755},"line":1600,"code":"      it('should disallow rendering when scrolling away', () => {\n        resources.lastVelocity_ = 2;\n        expect(resource.renderOutsideViewport()).to.equal(false);\n        expect(resolveWithinViewportSpy).to.be.called;\n      });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should allow rendering when scrolling towards","suites":["number API","when element is marginally above viewport","when element is owned"],"updatePoint":{"line":1609,"column":57,"index":66150},"line":1609,"code":"        it('should allow rendering when scrolling towards', () => {\n          resources.lastVelocity_ = -2;\n          expect(resource.renderOutsideViewport()).to.equal(true);\n          expect(resolveWithinViewportSpy).to.be.calledOnce;\n        });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should allow rendering when scrolling away","suites":["number API","when element is marginally above viewport","when element is owned"],"updatePoint":{"line":1614,"column":54,"index":66395},"line":1614,"code":"        it('should allow rendering when scrolling away', () => {\n          resources.lastVelocity_ = 2;\n          expect(resource.renderOutsideViewport()).to.equal(true);\n          expect(resolveWithinViewportSpy).to.be.calledOnce;\n        });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should disallow rendering","suites":["number API","when element is wayyy above viewport"],"updatePoint":{"line":1625,"column":35,"index":66800},"line":1625,"code":"      it('should disallow rendering', () => {\n        expect(resource.renderOutsideViewport()).to.equal(false);\n        expect(resolveWithinViewportSpy).to.be.called;\n      });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should disallow rendering when scrolling towards","suites":["number API","when element is wayyy above viewport"],"updatePoint":{"line":1629,"column":58,"index":67000},"line":1629,"code":"      it('should disallow rendering when scrolling towards', () => {\n        resources.lastVelocity_ = -2;\n        expect(resource.renderOutsideViewport()).to.equal(false);\n        expect(resolveWithinViewportSpy).to.be.called;\n      });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should disallow rendering when scrolling away","suites":["number API","when element is wayyy above viewport"],"updatePoint":{"line":1634,"column":55,"index":67235},"line":1634,"code":"      it('should disallow rendering when scrolling away', () => {\n        resources.lastVelocity_ = 2;\n        expect(resource.renderOutsideViewport()).to.equal(false);\n        expect(resolveWithinViewportSpy).to.be.called;\n      });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should allow rendering","suites":["number API","when element is wayyy above viewport","when element is owned"],"updatePoint":{"line":1643,"column":34,"index":67607},"line":1643,"code":"        it('should allow rendering', () => {\n          expect(resource.renderOutsideViewport()).to.equal(true);\n          expect(resolveWithinViewportSpy).to.be.calledOnce;\n        });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should allow rendering when scrolling towards","suites":["number API","when element is wayyy above viewport","when element is owned"],"updatePoint":{"line":1647,"column":57,"index":67815},"line":1647,"code":"        it('should allow rendering when scrolling towards', () => {\n          resources.lastVelocity_ = -2;\n          expect(resource.renderOutsideViewport()).to.equal(true);\n          expect(resolveWithinViewportSpy).to.be.calledOnce;\n        });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should allow rendering when scrolling away","suites":["number API","when element is wayyy above viewport","when element is owned"],"updatePoint":{"line":1652,"column":54,"index":68060},"line":1652,"code":"        it('should allow rendering when scrolling away', () => {\n          resources.lastVelocity_ = 2;\n          expect(resource.renderOutsideViewport()).to.equal(true);\n          expect(resolveWithinViewportSpy).to.be.calledOnce;\n        });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should disallow rendering","suites":["number API","when element is on the left of viewport"],"updatePoint":{"line":1663,"column":35,"index":68467},"line":1663,"code":"      it('should disallow rendering', () => {\n        expect(resource.renderOutsideViewport()).to.equal(false);\n        expect(resolveWithinViewportSpy).to.be.called;\n      });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should disallow rendering when scrolling towards on y-axis","suites":["number API","when element is on the left of viewport"],"updatePoint":{"line":1667,"column":68,"index":68677},"line":1667,"code":"      it('should disallow rendering when scrolling towards on y-axis', () => {\n        resources.lastVelocity_ = -2;\n        expect(resource.renderOutsideViewport()).to.equal(false);\n        expect(resolveWithinViewportSpy).to.be.called;\n      });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should disallow rendering when scrolling away on y-axis","suites":["number API","when element is on the left of viewport"],"updatePoint":{"line":1672,"column":65,"index":68922},"line":1672,"code":"      it('should disallow rendering when scrolling away on y-axis', () => {\n        resources.lastVelocity_ = 2;\n        expect(resource.renderOutsideViewport()).to.equal(false);\n        expect(resolveWithinViewportSpy).to.be.called;\n      });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should allow rendering","suites":["number API","when element is on the left of viewport","when element is owned"],"updatePoint":{"line":1681,"column":34,"index":69294},"line":1681,"code":"        it('should allow rendering', () => {\n          expect(resource.renderOutsideViewport()).to.equal(true);\n          expect(resolveWithinViewportSpy).to.be.calledOnce;\n        });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should allow rendering when scrolling towards on y-axis","suites":["number API","when element is on the left of viewport","when element is owned"],"updatePoint":{"line":1685,"column":67,"index":69512},"line":1685,"code":"        it('should allow rendering when scrolling towards on y-axis', () => {\n          resources.lastVelocity_ = -2;\n          expect(resource.renderOutsideViewport()).to.equal(true);\n          expect(resolveWithinViewportSpy).to.be.calledOnce;\n        });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should allow rendering when scrolling away on y-axis","suites":["number API","when element is on the left of viewport","when element is owned"],"updatePoint":{"line":1690,"column":64,"index":69767},"line":1690,"code":"        it('should allow rendering when scrolling away on y-axis', () => {\n          resources.lastVelocity_ = 2;\n          expect(resource.renderOutsideViewport()).to.equal(true);\n          expect(resolveWithinViewportSpy).to.be.calledOnce;\n        });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should disallow rendering","suites":["number API","when element is on the right of viewport"],"updatePoint":{"line":1701,"column":35,"index":70174},"line":1701,"code":"      it('should disallow rendering', () => {\n        expect(resource.renderOutsideViewport()).to.equal(false);\n        expect(resolveWithinViewportSpy).to.be.called;\n      });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should disallow rendering when scrolling towards on y-axis","suites":["number API","when element is on the right of viewport"],"updatePoint":{"line":1705,"column":68,"index":70384},"line":1705,"code":"      it('should disallow rendering when scrolling towards on y-axis', () => {\n        resources.lastVelocity_ = -2;\n        expect(resource.renderOutsideViewport()).to.equal(false);\n        expect(resolveWithinViewportSpy).to.be.called;\n      });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should disallow rendering when scrolling away on y-axis","suites":["number API","when element is on the right of viewport"],"updatePoint":{"line":1710,"column":65,"index":70629},"line":1710,"code":"      it('should disallow rendering when scrolling away on y-axis', () => {\n        resources.lastVelocity_ = 2;\n        expect(resource.renderOutsideViewport()).to.equal(false);\n        expect(resolveWithinViewportSpy).to.be.called;\n      });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should allow rendering","suites":["number API","when element is on the right of viewport","when element is owned"],"updatePoint":{"line":1719,"column":34,"index":71001},"line":1719,"code":"        it('should allow rendering', () => {\n          expect(resource.renderOutsideViewport()).to.equal(true);\n          expect(resolveWithinViewportSpy).to.be.calledOnce;\n        });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should allow rendering when scrolling towards on y-axis","suites":["number API","when element is on the right of viewport","when element is owned"],"updatePoint":{"line":1723,"column":67,"index":71219},"line":1723,"code":"        it('should allow rendering when scrolling towards on y-axis', () => {\n          resources.lastVelocity_ = -2;\n          expect(resource.renderOutsideViewport()).to.equal(true);\n          expect(resolveWithinViewportSpy).to.be.calledOnce;\n        });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should allow rendering when scrolling away on y-axis","suites":["number API","when element is on the right of viewport","when element is owned"],"updatePoint":{"line":1728,"column":64,"index":71474},"line":1728,"code":"        it('should allow rendering when scrolling away on y-axis', () => {\n          resources.lastVelocity_ = 2;\n          expect(resource.renderOutsideViewport()).to.equal(true);\n          expect(resolveWithinViewportSpy).to.be.calledOnce;\n        });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should allow rendering","suites":["number API","when element is fully in viewport"],"updatePoint":{"line":1739,"column":32,"index":71869},"line":1739,"code":"      it('should allow rendering', () => {\n        expect(resource.renderOutsideViewport()).to.equal(true);\n        expect(resolveWithinViewportSpy).to.be.calledOnce;\n      });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should allow rendering when scrolling towards","suites":["number API","when element is fully in viewport"],"updatePoint":{"line":1743,"column":55,"index":72069},"line":1743,"code":"      it('should allow rendering when scrolling towards', () => {\n        resources.lastVelocity_ = -2;\n        expect(resource.renderOutsideViewport()).to.equal(true);\n        expect(resolveWithinViewportSpy).to.be.calledOnce;\n      });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should allow rendering when scrolling away","suites":["number API","when element is fully in viewport"],"updatePoint":{"line":1748,"column":52,"index":72304},"line":1748,"code":"      it('should allow rendering when scrolling away', () => {\n        resources.lastVelocity_ = 2;\n        expect(resource.renderOutsideViewport()).to.equal(true);\n        expect(resolveWithinViewportSpy).to.be.calledOnce;\n      });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should allow rendering","suites":["number API","when element is fully in viewport","when element is owned"],"updatePoint":{"line":1757,"column":34,"index":72679},"line":1757,"code":"        it('should allow rendering', () => {\n          expect(resource.renderOutsideViewport()).to.equal(true);\n          expect(resolveWithinViewportSpy).to.be.calledOnce;\n        });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should allow rendering when scrolling towards on y-axis","suites":["number API","when element is fully in viewport","when element is owned"],"updatePoint":{"line":1761,"column":67,"index":72897},"line":1761,"code":"        it('should allow rendering when scrolling towards on y-axis', () => {\n          resources.lastVelocity_ = -2;\n          expect(resource.renderOutsideViewport()).to.equal(true);\n          expect(resolveWithinViewportSpy).to.be.calledOnce;\n        });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should allow rendering when scrolling away on y-axis","suites":["number API","when element is fully in viewport","when element is owned"],"updatePoint":{"line":1766,"column":64,"index":73152},"line":1766,"code":"        it('should allow rendering when scrolling away on y-axis', () => {\n          resources.lastVelocity_ = 2;\n          expect(resource.renderOutsideViewport()).to.equal(true);\n          expect(resolveWithinViewportSpy).to.be.calledOnce;\n        });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should allow rendering","suites":["number API","when element is partially in viewport"],"updatePoint":{"line":1777,"column":32,"index":73555},"line":1777,"code":"      it('should allow rendering', () => {\n        expect(resource.renderOutsideViewport()).to.equal(true);\n        expect(resolveWithinViewportSpy).to.be.calledOnce;\n      });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should allow rendering when scrolling towards","suites":["number API","when element is partially in viewport"],"updatePoint":{"line":1781,"column":55,"index":73755},"line":1781,"code":"      it('should allow rendering when scrolling towards', () => {\n        resources.lastVelocity_ = -2;\n        expect(resource.renderOutsideViewport()).to.equal(true);\n        expect(resolveWithinViewportSpy).to.be.calledOnce;\n      });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should allow rendering when scrolling away","suites":["number API","when element is partially in viewport"],"updatePoint":{"line":1786,"column":52,"index":73990},"line":1786,"code":"      it('should allow rendering when scrolling away', () => {\n        resources.lastVelocity_ = 2;\n        expect(resource.renderOutsideViewport()).to.equal(true);\n        expect(resolveWithinViewportSpy).to.be.calledOnce;\n      });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should allow rendering","suites":["number API","when element is partially in viewport","when element is owned"],"updatePoint":{"line":1795,"column":34,"index":74365},"line":1795,"code":"        it('should allow rendering', () => {\n          expect(resource.renderOutsideViewport()).to.equal(true);\n          expect(resolveWithinViewportSpy).to.be.calledOnce;\n        });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should allow rendering when scrolling towards on y-axis","suites":["number API","when element is partially in viewport","when element is owned"],"updatePoint":{"line":1799,"column":67,"index":74583},"line":1799,"code":"        it('should allow rendering when scrolling towards on y-axis', () => {\n          resources.lastVelocity_ = -2;\n          expect(resource.renderOutsideViewport()).to.equal(true);\n          expect(resolveWithinViewportSpy).to.be.calledOnce;\n        });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should allow rendering when scrolling away on y-axis","suites":["number API","when element is partially in viewport","when element is owned"],"updatePoint":{"line":1804,"column":64,"index":74838},"line":1804,"code":"        it('should allow rendering when scrolling away on y-axis', () => {\n          resources.lastVelocity_ = 2;\n          expect(resource.renderOutsideViewport()).to.equal(true);\n          expect(resolveWithinViewportSpy).to.be.calledOnce;\n        });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should resolve correctly","suites":["whenWithinViewport"],"updatePoint":{"line":1813,"column":32,"index":75125},"line":1813,"code":"    it('should resolve correctly', () => {\n      env.sandbox.stub(resource, 'isWithinViewportRatio').withArgs(3).onCall(0).returns(false).onCall(1).returns(false).onCall(2).returns(true).onCall(3).callsFake(() => {\n        throw new Error('should not call!');\n      });\n      const promise = resource.whenWithinViewport(3);\n      // Multiple calls should return the same promise.\n      expect(resource.whenWithinViewport(3)).to.equal(promise);\n      expect(Object.keys(resource.withViewportDeferreds_)).to.jsonEqual(['3']);\n      // Call again should do nothing.\n      resource.resolveDeferredsWhenWithinViewports_();\n      resource.resolveDeferredsWhenWithinViewports_();\n      return promise;\n    });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should resolve immediately if already laid out","suites":["whenWithinViewport"],"updatePoint":{"line":1826,"column":54,"index":75850},"line":1826,"code":"    it('should resolve immediately if already laid out', () => {\n      env.sandbox.stub(resource, 'isLayoutPending').returns(false);\n      return resource.whenWithinViewport();\n    });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should resolve correctly with float","suites":["whenWithinViewport"],"updatePoint":{"line":1830,"column":43,"index":76024},"line":1830,"code":"    it('should resolve correctly with float', () => {\n      const isWithinViewportRatioStub = env.sandbox.stub(resource, 'isWithinViewportRatio');\n      const ratio = {};\n      env.sandbox.stub(resource, 'getDistanceViewportRatio').returns(ratio);\n      isWithinViewportRatioStub.withArgs(1.25).returns(false);\n      isWithinViewportRatioStub.withArgs(1.25, ratio).returns(true);\n      const promise = resource.whenWithinViewport(1.25);\n      resource.resolveDeferredsWhenWithinViewports_();\n      return promise;\n    });","file":"unit/test-resource.js","skipped":false,"dir":"test"},{"name":"should calculate correct calcTaskScore","suites":[],"updatePoint":{"line":83,"column":44,"index":2973},"line":83,"code":"  it('should calculate correct calcTaskScore', () => {\n    const viewportRect = layoutRectLtwh(0, 100, 300, 400);\n    env.sandbox.stub(resources.viewport_, 'getRect').returns(viewportRect);\n\n    // Task 1 is right in the middle of the viewport and priority 0\n    const task_in_viewport_p0 = {\n      resource: {\n        getLayoutBox() {\n          return layoutRectLtwh(0, 200, 300, 100);\n        },\n        isFixed() {\n          return false;\n        }\n      },\n      priority: 0\n    };\n    // Task 2 is in the viewport and priority 1\n    const task_in_viewport_p1 = {\n      resource: {\n        getLayoutBox() {\n          return layoutRectLtwh(0, 200, 300, 100);\n        },\n        isFixed() {\n          return false;\n        }\n      },\n      priority: 1\n    };\n    // Task 3 is above viewport and priority 0\n    const task_above_viewport_p0 = {\n      resource: {\n        getLayoutBox() {\n          return layoutRectLtwh(0, 0, 300, 50);\n        },\n        isFixed() {\n          return false;\n        }\n      },\n      priority: 0\n    };\n    // Task 4 is above viewport and priority 1\n    const task_above_viewport_p1 = {\n      resource: {\n        getLayoutBox() {\n          return layoutRectLtwh(0, 0, 300, 50);\n        },\n        isFixed() {\n          return false;\n        }\n      },\n      priority: 1\n    };\n    // Task 5 is below viewport and priority 0\n    const task_below_viewport_p0 = {\n      resource: {\n        getLayoutBox() {\n          return layoutRectLtwh(0, 600, 300, 50);\n        },\n        isFixed() {\n          return false;\n        }\n      },\n      priority: 0\n    };\n    // Task 6 is below viewport and priority 1\n    const task_below_viewport_p1 = {\n      resource: {\n        getLayoutBox() {\n          return layoutRectLtwh(0, 600, 300, 50);\n        },\n        isFixed() {\n          return false;\n        }\n      },\n      priority: 1\n    };\n    // Task 7 is fixed right in the middle of the viewport and priority 0\n    const task_fixed_in_viewport_p0 = {\n      resource: {\n        getLayoutBox() {\n          return layoutRectLtwh(0, 200, 300, 100);\n        },\n        isFixed() {\n          return false;\n        }\n      },\n      priority: 0\n    };\n    // Task 8 is fixed in the viewport and priority 1\n    const task_fixed_in_viewport_p1 = {\n      resource: {\n        getLayoutBox() {\n          return layoutRectLtwh(0, 200, 300, 100);\n        },\n        isFixed() {\n          return false;\n        }\n      },\n      priority: 1\n    };\n    // Task 9 is fixed above viewport and priority 0\n    const task_fixed_above_viewport_p0 = {\n      resource: {\n        getLayoutBox() {\n          return layoutRectLtwh(0, 0, 300, 50);\n        },\n        isFixed() {\n          return false;\n        }\n      },\n      priority: 0\n    };\n    // Task 10 is fixed above viewport and priority 1\n    const task_fixed_above_viewport_p1 = {\n      resource: {\n        getLayoutBox() {\n          return layoutRectLtwh(0, 0, 300, 50);\n        },\n        isFixed() {\n          return false;\n        }\n      },\n      priority: 1\n    };\n    // Task 11 is fixed below viewport and priority 0\n    const task_fixed_below_viewport_p0 = {\n      resource: {\n        getLayoutBox() {\n          return layoutRectLtwh(0, 600, 300, 50);\n        },\n        isFixed() {\n          return false;\n        }\n      },\n      priority: 0\n    };\n    // Task 12 is fixed below viewport and priority 1\n    const task_fixed_below_viewport_p1 = {\n      resource: {\n        getLayoutBox() {\n          return layoutRectLtwh(0, 600, 300, 50);\n        },\n        isFixed() {\n          return false;\n        }\n      },\n      priority: 1\n    };\n\n    // 0 for in viewport\n    expect(resources.calcTaskScore_(task_in_viewport_p0)).to.equal(0);\n    expect(resources.calcTaskScore_(task_in_viewport_p1)).to.equal(10);\n\n    // +2 for \"one viewport away\" * 2 because dir is opposite\n    expect(resources.calcTaskScore_(task_above_viewport_p0)).to.equal(2);\n    expect(resources.calcTaskScore_(task_above_viewport_p1)).to.equal(12);\n\n    // +1 for \"one viewport away\" * 1 because dir is the same\n    expect(resources.calcTaskScore_(task_below_viewport_p0)).to.equal(1);\n    expect(resources.calcTaskScore_(task_below_viewport_p1)).to.equal(11);\n\n    // 0 for fixed in viewport\n    expect(resources.calcTaskScore_(task_fixed_in_viewport_p0)).to.equal(0);\n    expect(resources.calcTaskScore_(task_fixed_in_viewport_p1)).to.equal(10);\n\n    // +2 for fixed \"one viewport away\", * 2 because dir is opposite\n    expect(resources.calcTaskScore_(task_fixed_above_viewport_p0)).to.equal(2);\n    expect(resources.calcTaskScore_(task_fixed_above_viewport_p1)).to.equal(12);\n\n    // +1 for fixed \"one viewport away\" * 1 because dir is the same\n    expect(resources.calcTaskScore_(task_fixed_below_viewport_p0)).to.equal(1);\n    expect(resources.calcTaskScore_(task_fixed_below_viewport_p1)).to.equal(11);\n  });","file":"unit/test-resources.js","skipped":false,"dir":"test"},{"name":"should calculate correct calcTaskTimeout","suites":[],"updatePoint":{"line":256,"column":46,"index":7828},"line":256,"code":"  it('should calculate correct calcTaskTimeout', () => {\n    // Task 1 is priority 0\n    const task_p0 = {\n      priority: 0,\n      startTime: 0\n    };\n    // Task 2 is priority 1\n    const task_p1 = {\n      priority: 1,\n      startTime: 0\n    };\n\n    // Empty pool\n    expect(resources.calcTaskTimeout_(task_p0)).to.equal(0);\n    expect(resources.calcTaskTimeout_(task_p1)).to.equal(0);\n\n    // Idle render penalty after first visible\n    resources.firstVisibleTime_ = 0;\n    expect(resources.calcTaskTimeout_(task_p0)).to.equal(0);\n    expect(resources.calcTaskTimeout_(task_p1)).to.equal(1000);\n\n    // Hight priority task in pool\n    resources.exec_.tasks_ = [task_p0];\n    expect(resources.calcTaskTimeout_(task_p0)).to.equal(0);\n    expect(resources.calcTaskTimeout_(task_p1)).to.equal(1000);\n    clock.tick(100);\n    expect(resources.calcTaskTimeout_(task_p1)).to.equal(900);\n    clock.tick(1000);\n    expect(resources.calcTaskTimeout_(task_p1)).to.equal(0);\n\n    // Lower priority task in pool\n    resources.exec_.tasks_ = [task_p1];\n    expect(resources.calcTaskTimeout_(task_p0)).to.equal(0);\n    expect(resources.calcTaskTimeout_(task_p1)).to.equal(0);\n\n    // Multiple tasks in queue - maximum is picked\n    task_p0.startTime = 1100;\n    resources.exec_.tasks_ = [task_p0, task_p1];\n    expect(resources.calcTaskTimeout_(task_p0)).to.equal(0);\n    expect(resources.calcTaskTimeout_(task_p1)).to.equal(1000);\n  });","file":"unit/test-resources.js","skipped":false,"dir":"test"},{"name":"should schedule previewable resource when document is in preview","suites":[],"updatePoint":{"line":315,"column":70,"index":10152},"line":315,"code":"  it('should schedule previewable resource when document is in preview', () => {\n    const resource = createResource({\n      state: ResourceState_Enum.READY_FOR_LAYOUT,\n      previewAllowed: true,\n      renderOutsideViewport: true,\n      layoutPriority: LayoutPriority_Enum.METADATA\n    });\n    resources.visible_ = false;\n    env.sandbox.stub(resources.ampdoc, 'getVisibilityState').returns(VisibilityState_Enum.PREVIEW);\n    resources.scheduleLayoutOrPreload(resource, true);\n    expect(resources.queue_.getSize()).to.equal(1);\n    expect(resources.queue_.tasks_[0].forceOutsideViewport).to.be.false;\n  });","file":"unit/test-resources.js","skipped":false,"dir":"test"},{"name":"should not schedule previewable resource when document is hidden","suites":[],"updatePoint":{"line":328,"column":70,"index":10761},"line":328,"code":"  it('should not schedule previewable resource when document is hidden', () => {\n    const resource = createResource({\n      state: ResourceState_Enum.READY_FOR_LAYOUT,\n      previewAllowed: true,\n      renderOutsideViewport: true,\n      layoutPriority: LayoutPriority_Enum.METADATA\n    });\n    resources.visible_ = false;\n    env.sandbox.stub(resources.ampdoc, 'getVisibilityState').returns(VisibilityState_Enum.HIDDEN);\n    resources.scheduleLayoutOrPreload(resource, true);\n    expect(resources.queue_.getSize()).to.equal(0);\n  });","file":"unit/test-resources.js","skipped":false,"dir":"test"},{"name":"should update priority and schedule pass","suites":[],"updatePoint":{"line":386,"column":46,"index":13273},"line":386,"code":"  it('should update priority and schedule pass', () => {\n    const element = document.createElement('div');\n    element.isBuilt = () => true;\n    element.getLayoutPriority = () => LayoutPriority_Enum.ADS;\n    const resource = new Resource(1, element, resources);\n    resources.pass_.cancel();\n    expect(resource.getLayoutPriority()).to.equal(LayoutPriority_Enum.ADS);\n    resources.updateLayoutPriority(element, LayoutPriority_Enum.METADATA);\n    expect(resource.getLayoutPriority()).to.equal(LayoutPriority_Enum.METADATA);\n    expect(resources.pass_.isPending()).to.be.true;\n  });","file":"unit/test-resources.js","skipped":false,"dir":"test"},{"name":"should update priority and update tasks","suites":[],"updatePoint":{"line":397,"column":45,"index":13855},"line":397,"code":"  it('should update priority and update tasks', () => {\n    resources.pass_.cancel();\n\n    // Target element.\n    const element = document.createElement('div');\n    element.isBuilt = () => true;\n    element.getLayoutPriority = () => LayoutPriority_Enum.ADS;\n    const resource = new Resource(1, element, resources);\n    resources.schedule_(resource, 'L', 0, 0, () => {});\n    const task = resources.queue_.tasks_[0];\n    expect(task.priority).to.equal(LayoutPriority_Enum.ADS);\n\n    // Another element.\n    const element2 = document.createElement('div');\n    element2.isBuilt = () => true;\n    element2.getLayoutPriority = () => LayoutPriority_Enum.ADS;\n    const resource2 = new Resource(2, element2, resources);\n    resources.schedule_(resource2, 'L', 0, 0, () => {});\n    const task2 = resources.queue_.tasks_[1];\n    expect(task2.priority).to.equal(LayoutPriority_Enum.ADS);\n    resources.updateLayoutPriority(element, LayoutPriority_Enum.METADATA);\n    expect(resource.getLayoutPriority()).to.equal(LayoutPriority_Enum.METADATA);\n    expect(resources.pass_.isPending()).to.be.true;\n    expect(task.priority).to.equal(LayoutPriority_Enum.METADATA);\n    // The other task is not updated.\n    expect(task2.priority).to.equal(LayoutPriority_Enum.ADS);\n  });","file":"unit/test-resources.js","skipped":false,"dir":"test"},{"name":"should run a full reload pass on window.onload","suites":[],"updatePoint":{"line":444,"column":52,"index":15581},"line":444,"code":"  it('should run a full reload pass on window.onload', () => {\n    expect(resources.relayoutAll_).to.be.false;\n    expect(schedulePassStub).to.not.be.called;\n    win.readyState = 'complete';\n    win.eventListeners.fire({\n      type: 'load'\n    });\n    win.document.eventListeners.fire({\n      type: 'readystatechange'\n    });\n    return resources.ampdoc.whenReady().then(() => {\n      return loadPromise(win);\n    }).then(() => {\n      expect(resources.relayoutAll_).to.be.true;\n      expect(schedulePassStub).to.have.been.called;\n    });\n  });","file":"unit/test-resources.js","skipped":false,"dir":"test"},{"name":"should run a full reload pass on fonts timeout","suites":[],"updatePoint":{"line":461,"column":52,"index":16126},"line":461,"code":"  it('should run a full reload pass on fonts timeout', () => {\n    win.readyState = 'complete';\n    win.document.eventListeners.fire({\n      type: 'readystatechange'\n    });\n    let basePassCount = 0;\n    return resources.ampdoc.whenReady().then(() => {\n      expect(resources.relayoutAll_).to.be.false;\n      basePassCount = schedulePassStub.callCount;\n      clock.tick(3100);\n    }).then(() => {\n      expect(resources.relayoutAll_).to.be.true;\n      expect(schedulePassStub).to.have.callCount(basePassCount + 1);\n    });\n  });","file":"unit/test-resources.js","skipped":false,"dir":"test"},{"name":"should run a full reload pass on document.fonts.ready","suites":[],"updatePoint":{"line":476,"column":59,"index":16663},"line":476,"code":"  it('should run a full reload pass on document.fonts.ready', () => {\n    win.readyState = 'interactive';\n    win.document.eventListeners.fire({\n      type: 'readystatechange'\n    });\n    win.document.fonts.status = 'loading';\n    let basePassCount = 0;\n    return resources.ampdoc.whenReady().then(() => {}).then(() => {\n      // This is the regular remeasure on doc-ready.\n      expect(resources.relayoutAll_).to.be.true;\n      resources.relayoutAll_ = false;\n      basePassCount = schedulePassStub.callCount;\n      return win.document.fonts.ready;\n    }).then(() => {\n      // Wait one micro task.\n      return Promise.resolve();\n    }).then(() => {\n      expect(resources.relayoutAll_).to.be.true;\n      // Remeasure on doc-ready and fonts-ready.\n      expect(schedulePassStub).to.have.callCount(basePassCount + 1);\n    });\n  });","file":"unit/test-resources.js","skipped":false,"dir":"test"},{"name":"should not remeasure if fonts load before doc-ready","suites":[],"updatePoint":{"line":498,"column":57,"index":17495},"line":498,"code":"  it('should not remeasure if fonts load before doc-ready', () => {\n    win.readyState = 'interactive';\n    win.document.eventListeners.fire({\n      type: 'readystatechange'\n    });\n    win.document.fonts.status = 'loaded';\n    let basePassCount = 0;\n    return resources.ampdoc.whenReady().then(() => {}).then(() => {\n      // This is the regular remeasure on doc-ready.\n      expect(resources.relayoutAll_).to.be.true;\n      resources.relayoutAll_ = false;\n      basePassCount = schedulePassStub.callCount;\n      return win.document.fonts.ready;\n    }).then(() => {\n      // Wait one micro task.\n      return Promise.resolve();\n    }).then(() => {\n      expect(resources.relayoutAll_).to.be.false;\n      // Only remeasure on doc-ready.\n      expect(schedulePassStub).to.have.callCount(basePassCount);\n    });\n  });","file":"unit/test-resources.js","skipped":false,"dir":"test"},{"name":"should run a full reload when a new element is connected","suites":[],"updatePoint":{"line":520,"column":62,"index":18317},"line":520,"code":"  it('should run a full reload when a new element is connected', () => {\n    expect(resources.relayoutAll_).to.be.false;\n    expect(schedulePassStub).to.not.be.called;\n    const el = win.document.createElement('amp-img');\n    el.isBuilt = () => {\n      return true;\n    };\n    el.isUpgraded = () => {\n      return true;\n    };\n    el.isRelayoutNeeded = () => {\n      return true;\n    };\n    el.updateLayoutBox = () => {};\n    win.document.body.appendChild(el);\n    resources.add(el);\n    expect(resources.relayoutAll_).to.be.false;\n    clock.tick(1000);\n    expect(resources.relayoutAll_).to.be.true;\n  });","file":"unit/test-resources.js","skipped":false,"dir":"test"},{"name":"should set ready-scan signal on first ready pass after amp init","suites":[],"updatePoint":{"line":614,"column":69,"index":21684},"line":614,"code":"  it('should set ready-scan signal on first ready pass after amp init', () => {\n    resources.isRuntimeOn_ = true;\n    resources.documentReady_ = true;\n    resources.firstPassAfterDocumentReady_ = true;\n    sandbox.stub(resources.visibilityStateMachine_, 'setState');\n    resources.doPass();\n    expect(resources.ampdoc.signals().get('ready-scan')).to.be.null;\n    resources.ampInitComplete();\n    resources.doPass();\n    resources.isRuntimeOn_ = false;\n    expect(resources.ampdoc.signals().get('ready-scan')).to.be.ok;\n  });","file":"unit/test-resources.js","skipped":false,"dir":"test"},{"name":"should measure unbuilt elements","suites":[],"updatePoint":{"line":626,"column":37,"index":22179},"line":626,"code":"  it('should measure unbuilt elements', () => {\n    resources.visible_ = true;\n    sandbox.stub(resources.ampdoc, 'getVisibilityState').returns(VisibilityState_Enum.VISIBLE);\n    viewportMock.expects('getRect').returns(layoutRectLtwh(0, 0, 300, 400));\n    resource1.isBuilt = () => false;\n    expect(resource1.hasBeenMeasured()).to.be.false;\n    resource1.isBuilt = () => false;\n    resources.discoverWork_();\n    expect(resource1.hasBeenMeasured()).to.be.true;\n  });","file":"unit/test-resources.js","skipped":false,"dir":"test"},{"name":"should render two screens when visible","suites":[],"updatePoint":{"line":636,"column":44,"index":22654},"line":636,"code":"  it('should render two screens when visible', () => {\n    resources.visible_ = true;\n    sandbox.stub(resources.ampdoc, 'getVisibilityState').returns(VisibilityState_Enum.VISIBLE);\n    viewportMock.expects('getRect').returns(layoutRectLtwh(0, 0, 300, 400));\n    resources.discoverWork_();\n    expect(resources.queue_.getSize()).to.equal(2);\n    expect(resources.queue_.tasks_[0].resource).to.equal(resource1);\n    expect(resources.queue_.tasks_[1].resource).to.equal(resource2);\n  });","file":"unit/test-resources.js","skipped":false,"dir":"test"},{"name":"should NOT rerender anything","suites":[],"updatePoint":{"line":645,"column":34,"index":23130},"line":645,"code":"  it('should NOT rerender anything', () => {\n    resource1.state_ = ResourceState_Enum.LAYOUT_COMPLETE;\n    resource2.state_ = ResourceState_Enum.LAYOUT_COMPLETE;\n    resources.visible_ = true;\n    sandbox.stub(resources.ampdoc, 'getVisibilityState').returns(VisibilityState_Enum.VISIBLE);\n    viewportMock.expects('getRect').returns(layoutRectLtwh(0, 0, 300, 400));\n    resources.discoverWork_();\n    expect(resources.queue_.getSize()).to.equal(0);\n  });","file":"unit/test-resources.js","skipped":false,"dir":"test"},{"name":"should re-render from requested position","suites":[],"updatePoint":{"line":654,"column":46,"index":23598},"line":654,"code":"  it('should re-render from requested position', () => {\n    resource1.state_ = ResourceState_Enum.LAYOUT_COMPLETE;\n    resource2.state_ = ResourceState_Enum.LAYOUT_COMPLETE;\n    resource1.hasBeenMeasured = () => true;\n    resource2.hasBeenMeasured = () => true;\n    resource1.element.getBoundingClientRect = () => layoutRectLtwh(10, 10, 100, 101);\n    resource2.element.getBoundingClientRect = () => layoutRectLtwh(10, 1010, 100, 101);\n    resources.visible_ = true;\n    sandbox.stub(resources.ampdoc, 'getVisibilityState').returns(VisibilityState_Enum.VISIBLE);\n    resources.relayoutAll_ = false;\n    resources.relayoutTop_ = 1000;\n    viewportMock.expects('getRect').returns(layoutRectLtwh(0, 0, 300, 400));\n    resources.discoverWork_();\n    expect(resources.relayoutTop_).to.equal(-1);\n    expect(resources.queue_.getSize()).to.equal(1);\n    expect(resources.queue_.tasks_[0].resource).to.equal(resource2);\n    expect(resource1.state_).to.equal(ResourceState_Enum.LAYOUT_COMPLETE);\n    expect(resource2.state_).to.equal(ResourceState_Enum.LAYOUT_SCHEDULED);\n  });","file":"unit/test-resources.js","skipped":false,"dir":"test"},{"name":"should prerender only one screen in visibilityState=prerender","suites":[],"updatePoint":{"line":673,"column":67,"index":24689},"line":673,"code":"  it('should prerender only one screen in visibilityState=prerender', () => {\n    resources.visible_ = false;\n    sandbox.stub(resources.ampdoc, 'getVisibilityState').returns(VisibilityState_Enum.PRERENDER);\n    viewportMock.expects('getRect').returns(layoutRectLtwh(0, 0, 300, 1009));\n    resources.discoverWork_();\n    expect(resources.queue_.getSize()).to.equal(1);\n    expect(resources.queue_.tasks_[0].resource).to.equal(resource1);\n  });","file":"unit/test-resources.js","skipped":false,"dir":"test"},{"name":"should remeasure when requested and scheduled unloads","suites":[],"line":683,"code":"  it.skip('should remeasure when requested and scheduled unloads', () => {","file":"unit/test-resources.js","skipped":true,"dir":"test"},{"name":"should eject stale tasks when element unloaded","suites":[],"updatePoint":{"line":720,"column":52,"index":27115},"line":720,"code":"  it('should eject stale tasks when element unloaded', () => {\n    const pendingResource = createResource(5, layoutRectLtwh(0, 0, 0, 0));\n    pendingResource.state_ = ResourceState_Enum.NOT_BUILT;\n    resources.pendingBuildResources_ = [pendingResource];\n    resources.visible_ = true;\n    // Don't resolve layout - immulating DOM being removed and load\n    // promise not resolving.\n    resource2.layoutCallback = new Promise(unusedResolve => {});\n    resource2.unlayoutCallback = () => true;\n    resource2.prerenderAllowed = () => false;\n    resource1.layoutCallback = new Promise(unusedResolve => {});\n    resource1.unlayoutCallback = () => true;\n    sandbox.stub(resources.ampdoc, 'getVisibilityState').returns(VisibilityState_Enum.VISIBLE);\n    viewportMock.expects('getRect').returns(layoutRectLtwh(0, 0, 300, 400)).atLeast(1);\n    resources.discoverWork_();\n    expect(resources.queue_.getSize()).to.equal(2);\n    expect(resources.queue_.tasks_[0].resource).to.equal(resource1);\n    expect(resources.queue_.tasks_[1].resource).to.equal(resource2);\n    expect(resources.pendingBuildResources_.length).to.equal(1);\n    resources.work_();\n    expect(resources.exec_.getSize()).to.equal(2);\n\n    // Remove unloaded resources from exec queue.\n    resource2.abortController_ = null;\n    resource2.unlayout();\n    resources.cleanupTasks_(resource2);\n    expect(resources.exec_.getSize()).to.equal(1);\n\n    // Shouldn't remove tasks if the resource is not unloaded.\n    resources.cleanupTasks_(resource1);\n    expect(resources.exec_.getSize()).to.equal(1);\n\n    // Can successfully reschedules unloaded elements.\n    resources.discoverWork_();\n    expect(resources.queue_.getSize()).to.equal(1);\n    expect(resources.queue_.tasks_[0].resource).to.equal(resource2);\n\n    // Removes them even from scheduling queue.\n    resource2.abortController_ = null;\n    resource2.unlayout();\n    resources.cleanupTasks_(resource2, /* opt_removePending */true);\n    expect(resources.queue_.getSize()).to.equal(0);\n    expect(resources.pendingBuildResources_.length).to.equal(1);\n    const pendingElement = {\n      '__AMP__RESOURCE': pendingResource\n    };\n    resources.remove(pendingElement);\n    expect(resources.pendingBuildResources_.length).to.equal(0);\n  });","file":"unit/test-resources.js","skipped":false,"dir":"test"},{"name":"should schedule resource for execution","suites":[],"updatePoint":{"line":769,"column":44,"index":29357},"line":769,"code":"  it('should schedule resource for execution', () => {\n    resources.scheduleLayoutOrPreload(resource1, true);\n    expect(resources.queue_.getSize()).to.equal(1);\n    expect(resources.queue_.tasks_[0].resource).to.equal(resource1);\n    const measureSpy = sandbox.spy(resource1, 'measure');\n    resources.work_();\n    expect(resources.exec_.getSize()).to.equal(1);\n    expect(measureSpy).to.be.calledOnce;\n    expect(resource1.getState()).to.equal(ResourceState_Enum.LAYOUT_SCHEDULED);\n  });","file":"unit/test-resources.js","skipped":false,"dir":"test"},{"name":"should record layout schedule time on the resource element","suites":[],"updatePoint":{"line":779,"column":64,"index":29868},"line":779,"code":"  it('should record layout schedule time on the resource element', () => {\n    resources.scheduleLayoutOrPreload(resource1, true);\n    resources.work_();\n    expect(resource1.getState()).to.equal(ResourceState_Enum.LAYOUT_SCHEDULED);\n    expect(resource1.element.layoutScheduleTime).to.be.greaterThan(0);\n  });","file":"unit/test-resources.js","skipped":false,"dir":"test"},{"name":"should not schedule resource execution outside viewport","suites":[],"updatePoint":{"line":785,"column":61,"index":30176},"line":785,"code":"  it('should not schedule resource execution outside viewport', () => {\n    resources.scheduleLayoutOrPreload(resource1, true);\n    expect(resources.queue_.getSize()).to.equal(1);\n    expect(resources.queue_.tasks_[0].resource).to.equal(resource1);\n    const measureSpy = sandbox.spy(resource1, 'measure');\n    const layoutCanceledSpy = sandbox.spy(resource1, 'layoutCanceled');\n    sandbox.stub(resource1, 'isInViewport').returns(false);\n    sandbox.stub(resource1, 'renderOutsideViewport').returns(false);\n    sandbox.stub(resource1, 'idleRenderOutsideViewport').returns(false);\n    resources.work_();\n    expect(resources.exec_.getSize()).to.equal(0);\n    expect(measureSpy).to.be.calledOnce;\n    expect(layoutCanceledSpy).to.be.calledOnce;\n    expect(resource1.getState()).to.equal(ResourceState_Enum.READY_FOR_LAYOUT);\n  });","file":"unit/test-resources.js","skipped":false,"dir":"test"},{"name":"should force schedule resource execution outside viewport","suites":[],"updatePoint":{"line":800,"column":63,"index":31008},"line":800,"code":"  it('should force schedule resource execution outside viewport', () => {\n    resources.scheduleLayoutOrPreload(resource1, true, 0, /* ignoreQuota */true);\n    expect(resources.queue_.getSize()).to.equal(1);\n    expect(resources.queue_.tasks_[0].resource).to.equal(resource1);\n    const measureSpy = sandbox.spy(resource1, 'measure');\n    sandbox.stub(resource1, 'isInViewport').returns(false);\n    sandbox.stub(resource1, 'renderOutsideViewport').returns(false);\n    sandbox.stub(resource1, 'idleRenderOutsideViewport').returns(false);\n    resources.work_();\n    expect(resources.exec_.getSize()).to.equal(1);\n    expect(measureSpy).to.be.calledOnce;\n    expect(resource1.getState()).to.equal(ResourceState_Enum.LAYOUT_SCHEDULED);\n  });","file":"unit/test-resources.js","skipped":false,"dir":"test"},{"name":"should schedule resource prerender when doc in prerender mode","suites":[],"updatePoint":{"line":813,"column":67,"index":31750},"line":813,"code":"  it('should schedule resource prerender when doc in prerender mode', () => {\n    resources.scheduleLayoutOrPreload(resource1, true);\n    expect(resources.queue_.getSize()).to.equal(1);\n    expect(resources.queue_.tasks_[0].resource).to.equal(resource1);\n    resources.visible_ = false;\n    sandbox.stub(resources.ampdoc, 'getVisibilityState').returns('prerender');\n    sandbox.stub(resource1, 'isInViewport').returns(true);\n    sandbox.stub(resource1, 'prerenderAllowed').returns(true);\n    const measureSpy = sandbox.spy(resource1, 'measure');\n    const layoutCanceledSpy = sandbox.spy(resource1, 'layoutCanceled');\n    resources.work_();\n    expect(resources.exec_.getSize()).to.equal(1);\n    expect(measureSpy).to.be.calledOnce;\n    expect(layoutCanceledSpy).to.not.be.called;\n    expect(resource1.getState()).to.equal(ResourceState_Enum.LAYOUT_SCHEDULED);\n  });","file":"unit/test-resources.js","skipped":false,"dir":"test"},{"name":"should not schedule resource prerender","suites":[],"updatePoint":{"line":829,"column":44,"index":32594},"line":829,"code":"  it('should not schedule resource prerender', () => {\n    resources.scheduleLayoutOrPreload(resource1, true);\n    expect(resources.queue_.getSize()).to.equal(1);\n    expect(resources.queue_.tasks_[0].resource).to.equal(resource1);\n    resources.visible_ = false;\n    sandbox.stub(resources.ampdoc, 'getVisibilityState').returns('prerender');\n    sandbox.stub(resource1, 'isInViewport').returns(true);\n    sandbox.stub(resource1, 'prerenderAllowed').returns(false);\n    const measureSpy = sandbox.spy(resource1, 'measure');\n    const layoutCanceledSpy = sandbox.spy(resource1, 'layoutCanceled');\n    resources.work_();\n    expect(resources.exec_.getSize()).to.equal(0);\n    expect(measureSpy).to.be.calledOnce;\n    expect(layoutCanceledSpy).to.be.calledOnce;\n    expect(resource1.getState()).to.equal(ResourceState_Enum.READY_FOR_LAYOUT);\n  });","file":"unit/test-resources.js","skipped":false,"dir":"test"},{"name":"should schedule resource preview when doc in preview mode","suites":[],"updatePoint":{"line":845,"column":63,"index":33458},"line":845,"code":"  it('should schedule resource preview when doc in preview mode', () => {\n    resources.scheduleLayoutOrPreload(resource1, true);\n    expect(resources.queue_.getSize()).to.equal(1);\n    expect(resources.queue_.tasks_[0].resource).to.equal(resource1);\n    resources.visible_ = false;\n    sandbox.stub(resources.ampdoc, 'getVisibilityState').returns('preview');\n    sandbox.stub(resource1, 'isInViewport').returns(true);\n    sandbox.stub(resource1, 'previewAllowed').returns(true);\n    const measureSpy = sandbox.spy(resource1, 'measure');\n    const layoutCanceledSpy = sandbox.spy(resource1, 'layoutCanceled');\n    resources.work_();\n    expect(resources.exec_.getSize()).to.equal(1);\n    expect(measureSpy).to.be.calledOnce;\n    expect(layoutCanceledSpy).to.not.be.called;\n    expect(resource1.getState()).to.equal(ResourceState_Enum.LAYOUT_SCHEDULED);\n  });","file":"unit/test-resources.js","skipped":false,"dir":"test"},{"name":"should not schedule resource preview","suites":[],"updatePoint":{"line":861,"column":42,"index":34296},"line":861,"code":"  it('should not schedule resource preview', () => {\n    resources.scheduleLayoutOrPreload(resource1, true);\n    expect(resources.queue_.getSize()).to.equal(1);\n    expect(resources.queue_.tasks_[0].resource).to.equal(resource1);\n    resources.visible_ = false;\n    sandbox.stub(resources.ampdoc, 'getVisibilityState').returns('preview');\n    sandbox.stub(resource1, 'isInViewport').returns(true);\n    sandbox.stub(resource1, 'previewAllowed').returns(false);\n    const measureSpy = sandbox.spy(resource1, 'measure');\n    const layoutCanceledSpy = sandbox.spy(resource1, 'layoutCanceled');\n    resources.work_();\n    expect(resources.exec_.getSize()).to.equal(0);\n    expect(measureSpy).to.be.calledOnce;\n    expect(layoutCanceledSpy).to.be.calledOnce;\n    expect(resource1.getState()).to.equal(ResourceState_Enum.READY_FOR_LAYOUT);\n  });","file":"unit/test-resources.js","skipped":false,"dir":"test"},{"name":"should schedule resource execution when doc is hidden","suites":[],"updatePoint":{"line":877,"column":59,"index":35152},"line":877,"code":"  it('should schedule resource execution when doc is hidden', () => {\n    resources.scheduleLayoutOrPreload(resource1, true);\n    expect(resources.queue_.getSize()).to.equal(1);\n    expect(resources.queue_.tasks_[0].resource).to.equal(resource1);\n    resources.visible_ = false;\n    sandbox.stub(resources.ampdoc, 'getVisibilityState').returns('hidden');\n    sandbox.stub(resource1, 'isInViewport').returns(true);\n    sandbox.stub(resource1, 'prerenderAllowed').returns(true);\n    const measureSpy = sandbox.spy(resource1, 'measure');\n    const layoutCanceledSpy = sandbox.spy(resource1, 'layoutCanceled');\n    resources.work_();\n    expect(resources.exec_.getSize()).to.equal(0);\n    expect(measureSpy).to.be.calledOnce;\n    expect(layoutCanceledSpy).to.be.calledOnce;\n  });","file":"unit/test-resources.js","skipped":false,"dir":"test"},{"name":"should update inViewport before scheduling layouts","suites":[],"updatePoint":{"line":892,"column":56,"index":35925},"line":892,"code":"  it('should update inViewport before scheduling layouts', () => {\n    resources.visible_ = true;\n    sandbox.stub(resources.ampdoc, 'getVisibilityState').returns(VisibilityState_Enum.VISIBLE);\n    viewportMock.expects('getRect').returns(layoutRectLtwh(0, 0, 300, 400));\n    const setInViewport = sandbox.spy(resource1, 'setInViewport');\n    const schedule = sandbox.spy(resources, 'scheduleLayoutOrPreload');\n    resources.discoverWork_();\n    expect(setInViewport).to.have.been.calledBefore(schedule);\n    expect(setInViewport).to.have.been.calledWith(true);\n  });","file":"unit/test-resources.js","skipped":false,"dir":"test"},{"name":"should build resource when not built","suites":[],"updatePoint":{"line":902,"column":42,"index":36478},"line":902,"code":"  it('should build resource when not built', () => {\n    const buildResourceSpy = sandbox.spy(resources, 'buildResourceUnsafe_');\n    sandbox.stub(resources, 'schedule_');\n    resources.documentReady_ = true;\n    resource1.element.isBuilt = sandbox.stub().onFirstCall().returns(true).onSecondCall().returns(false);\n    resource2.element.idleRenderOutsideViewport = () => false;\n    resource1.state_ = ResourceState_Enum.NOT_BUILT;\n    resource1.build = sandbox.spy();\n    resources.discoverWork_();\n    expect(resource1.build).to.be.calledOnce;\n    expect(buildResourceSpy).calledWithExactly(resource1, /* ignoreQuota */false);\n  });","file":"unit/test-resources.js","skipped":false,"dir":"test"},{"name":"should build resource when not built and before doc ready","suites":[],"updatePoint":{"line":914,"column":63,"index":37133},"line":914,"code":"  it('should build resource when not built and before doc ready', () => {\n    const buildResourceSpy = sandbox.spy(resources, 'buildResourceUnsafe_');\n    sandbox.stub(resources, 'schedule_');\n    resources.documentReady_ = false;\n    sandbox.stub(resource1.element, 'nextSibling').returns({});\n    resource1.element.isBuilt = sandbox.stub().onFirstCall().returns(false).onSecondCall().returns(true);\n    resource2.element.idleRenderOutsideViewport = () => false;\n    resource1.state_ = ResourceState_Enum.NOT_BUILT;\n    resource1.build = sandbox.spy();\n    resources.discoverWork_();\n    expect(resource1.build).to.be.calledOnce;\n    expect(buildResourceSpy).calledWithExactly(resource1);\n  });","file":"unit/test-resources.js","skipped":false,"dir":"test"},{"name":"should NOT build non-prerenderable resources in prerender","suites":[],"updatePoint":{"line":927,"column":63,"index":37829},"line":927,"code":"  it('should NOT build non-prerenderable resources in prerender', () => {\n    sandbox.stub(resources.ampdoc, 'getVisibilityState').returns(VisibilityState_Enum.PRERENDER);\n    sandbox.stub(resources, 'schedule_');\n    resources.documentReady_ = true;\n    resource1.element.isBuilt = () => false;\n    resource1.prerenderAllowed = () => false;\n    resource1.state_ = ResourceState_Enum.NOT_BUILT;\n    resource1.build = sandbox.spy();\n    resource2.element.idleRenderOutsideViewport = () => false;\n    resources.discoverWork_();\n    expect(resource1.build).to.not.be.called;\n  });","file":"unit/test-resources.js","skipped":false,"dir":"test"},{"name":"should NOT build non-previewable resources in preview","suites":[],"updatePoint":{"line":939,"column":59,"index":38403},"line":939,"code":"  it('should NOT build non-previewable resources in preview', () => {\n    sandbox.stub(resources.ampdoc, 'getVisibilityState').returns(VisibilityState_Enum.PREVIEW);\n    sandbox.stub(resources, 'schedule_');\n    resources.documentReady_ = true;\n    resource1.element.isBuilt = () => false;\n    resource1.previewAllowed = () => false;\n    resource1.state_ = ResourceState_Enum.NOT_BUILT;\n    resource1.build = sandbox.spy();\n    resource2.element.idleRenderOutsideViewport = () => false;\n    resources.discoverWork_();\n    expect(resource1.build).to.not.be.called;\n  });","file":"unit/test-resources.js","skipped":false,"dir":"test"},{"name":"should NOT build when quota reached","suites":[],"updatePoint":{"line":951,"column":41,"index":38955},"line":951,"code":"  it('should NOT build when quota reached', () => {\n    sandbox.stub(resources.ampdoc, 'hasBeenVisible').returns(false);\n    sandbox.stub(resources, 'schedule_');\n    resources.documentReady_ = true;\n    resources.buildAttemptsCount_ = 21; // quota is 20\n\n    resource1.element.isBuilt = () => false;\n    resource1.element.idleRenderOutsideViewport = () => true;\n    resource1.prerenderAllowed = () => true;\n    resource1.isBuildRenderBlocking = () => false;\n    resource1.state_ = ResourceState_Enum.NOT_BUILT;\n    resource1.build = sandbox.spy();\n    resources.buildOrScheduleBuildForResource_(resource1);\n    expect(resource1.build).to.not.be.called;\n  });","file":"unit/test-resources.js","skipped":false,"dir":"test"},{"name":"should build render blocking resource even if quota is reached","suites":[],"updatePoint":{"line":966,"column":68,"index":39642},"line":966,"code":"  it('should build render blocking resource even if quota is reached', () => {\n    sandbox.stub(resources.ampdoc, 'hasBeenVisible').returns(false);\n    sandbox.stub(resources, 'schedule_');\n    resources.documentReady_ = true;\n    resources.buildAttemptsCount_ = 21; // quota is 20\n\n    resource1.element.isBuilt = () => false;\n    resource1.element.idleRenderOutsideViewport = () => true;\n    resource1.prerenderAllowed = () => true;\n    resource1.isBuildRenderBlocking = () => true;\n    resource1.state_ = ResourceState_Enum.NOT_BUILT;\n    resource1.build = sandbox.spy();\n    resources.buildOrScheduleBuildForResource_(resource1);\n    expect(resource1.build).to.be.called;\n  });","file":"unit/test-resources.js","skipped":false,"dir":"test"},{"name":"should layout resource if outside viewport but idle","suites":[],"updatePoint":{"line":981,"column":57,"index":40313},"line":981,"code":"  it('should layout resource if outside viewport but idle', () => {\n    const schedulePassStub = sandbox.stub(resources, 'schedulePass');\n    resources.documentReady_ = true;\n    sandbox.stub(resource1.element, 'nextSibling').returns({});\n    resource1.element.isBuilt = () => true;\n    resource1.element.renderOutsideViewport = () => false;\n    resource1.element.idleRenderOutsideViewport = () => true;\n    resource2.element.renderOutsideViewport = () => false;\n    resource2.element.idleRenderOutsideViewport = () => false;\n    resource1.state_ = ResourceState_Enum.READY_FOR_LAYOUT;\n    resources.discoverWork_();\n    expect(schedulePassStub).to.be.calledOnce;\n  });","file":"unit/test-resources.js","skipped":false,"dir":"test"},{"name":"should force build resources during discoverWork layout phase","suites":[],"updatePoint":{"line":994,"column":67,"index":40993},"line":994,"code":"  it('should force build resources during discoverWork layout phase', () => {\n    const buildResourceSpy = sandbox.spy(resources, 'buildResourceUnsafe_');\n    sandbox.stub(resources, 'schedule_');\n    resources.documentReady_ = true;\n    // Emulates a resource not building.\n    resource1.element.isBuilt = sandbox.stub().returns(false);\n    resource2.element.idleRenderOutsideViewport = () => false;\n    resource1.state_ = ResourceState_Enum.NOT_BUILT;\n    resource1.build = sandbox.spy();\n    resources.discoverWork_();\n    expect(resource1.build).to.be.calledTwice;\n    // discoverWork_ phase 1 build.\n    expect(buildResourceSpy).calledWithExactly(resource1, /* ignoreQuota */false);\n    // discoverWork_ phase 4 layout grants build.\n    expect(buildResourceSpy).calledWithExactly(resource1, /* ignoreQuota */true);\n  });","file":"unit/test-resources.js","skipped":false,"dir":"test"},{"name":"should only run callbacks once.","suites":["onNextPass"],"updatePoint":{"line":1011,"column":39,"index":41824},"line":1011,"code":"    it('should only run callbacks once.', () => {\n      resources.isRuntimeOn_ = true;\n      resources.documentReady_ = true;\n      resources.firstPassAfterDocumentReady_ = true;\n      const passCallback = sandbox.spy();\n      resources.onNextPass(passCallback);\n      resources.doPass();\n      expect(passCallback).to.be.calledOnce;\n      resources.doPass();\n      expect(passCallback).to.be.calledOnce;\n    });","file":"unit/test-resources.js","skipped":false,"dir":"test"},{"name":"should measure initial contentHeight","suites":["onNextPass"],"updatePoint":{"line":1043,"column":42,"index":42839},"line":1043,"code":"  it('should measure initial contentHeight', () => {\n    const contentHeight = resources.viewport_.getContentHeight();\n    expect(resources.maybeChangeHeight_).to.equal(false);\n    expect(resources.documentReady_).to.equal(true);\n    expect(resources.contentHeight_).to.equal(contentHeight);\n  });","file":"unit/test-resources.js","skipped":false,"dir":"test"},{"name":"should only send contentHeight to the viewer once amp finishes init","suites":["onNextPass"],"updatePoint":{"line":1049,"column":73,"index":43168},"line":1049,"code":"  it('should only send contentHeight to the viewer once amp finishes init', () => {\n    resources.firstPassAfterDocumentReady_ = false;\n    resources.documentReady_ = false;\n    resources.ampInitialized_ = false;\n    resources.doPass();\n    expect(viewerSendMessageStub).not.called;\n    resources.firstPassAfterDocumentReady_ = true;\n    resources.documentReady_ = true;\n    resources.ampInitialized_ = true;\n    resources.doPass();\n    expect(viewerSendMessageStub).calledWithExactly('documentHeight', {\n      height: 0\n    }, true);\n  });","file":"unit/test-resources.js","skipped":false,"dir":"test"},{"name":"should send contentHeight to viewer if height was changed","suites":["onNextPass"],"updatePoint":{"line":1063,"column":63,"index":43699},"line":1063,"code":"  it('should send contentHeight to viewer if height was changed', () => {\n    sandbox.stub(resources.viewport_, 'getContentHeight').returns(200);\n    resources.maybeChangeHeight_ = true;\n    resources.doPass();\n    expect(resources.maybeChangeHeight_).to.equal(false);\n    expect(resources.contentHeight_).to.equal(200);\n    expect(viewerSendMessageStub).to.be.calledOnce;\n    expect(viewerSendMessageStub.lastCall.args[0]).to.equal('documentHeight');\n    expect(viewerSendMessageStub.lastCall.args[1].height).to.equal(200);\n    expect(viewerSendMessageStub.lastCall.args[2]).to.equal(true);\n    expect(viewportContentHeightChangedStub).to.be.calledOnce;\n  });","file":"unit/test-resources.js","skipped":false,"dir":"test"},{"name":"should not send contentHeight to viewer if height is not changed","suites":["onNextPass"],"updatePoint":{"line":1075,"column":70,"index":44367},"line":1075,"code":"  it('should not send contentHeight to viewer if height is not changed', () => {\n    const contentHeight = resources.viewport_.getContentHeight();\n    resources.maybeChangeHeight_ = true;\n    resources.doPass();\n    expect(resources.maybeChangeHeight_).to.equal(false);\n    expect(resources.contentHeight_).to.equal(contentHeight);\n    expect(viewerSendMessageStub).to.not.be.called;\n    expect(viewportContentHeightChangedStub).to.not.be.called;\n  });","file":"unit/test-resources.js","skipped":false,"dir":"test"},{"name":"should send contentHeight to viewer if viewport resizes","suites":["onNextPass"],"updatePoint":{"line":1084,"column":61,"index":44811},"line":1084,"code":"  it('should send contentHeight to viewer if viewport resizes', () => {\n    sandbox.stub(resources.viewport_, 'getContentHeight').returns(200);\n    resources.viewport_.changed_( /* relayoutAll */true, /* velocity */0);\n    resources.doPass();\n    expect(resources.maybeChangeHeight_).to.equal(false);\n    expect(resources.contentHeight_).to.equal(200);\n    expect(viewerSendMessageStub).to.be.calledOnce;\n    expect(viewerSendMessageStub.lastCall.args[0]).to.equal('documentHeight');\n    expect(viewerSendMessageStub.lastCall.args[1].height).to.equal(200);\n    expect(viewerSendMessageStub.lastCall.args[2]).to.equal(true);\n    expect(viewportContentHeightChangedStub).to.be.calledOnce;\n  });","file":"unit/test-resources.js","skipped":false,"dir":"test"},{"name":"should enforce that viewport is ready for first add","suites":["onNextPass"],"updatePoint":{"line":1173,"column":57,"index":47562},"line":1173,"code":"  it('should enforce that viewport is ready for first add', () => {\n    const ensureViewportReady = sandbox.stub(resources.viewport_, 'ensureReadyForElements');\n    resources.add(child1);\n    expect(ensureViewportReady).to.be.calledOnce;\n\n    // Second `add` is ignored.\n    resources.add(child2);\n    expect(ensureViewportReady).to.be.calledOnce;\n  });","file":"unit/test-resources.js","skipped":false,"dir":"test"},{"name":"should build elements immediately if the document is ready","suites":["onNextPass"],"updatePoint":{"line":1182,"column":64,"index":47923},"line":1182,"code":"  it('should build elements immediately if the document is ready', () => {\n    const schedulePassStub = sandbox.stub(resources, 'schedulePass');\n    child1.isBuilt = () => false;\n    child2.isBuilt = () => false;\n    resources.documentReady_ = false;\n    resources.add(child1);\n    resources.upgraded(child1);\n    expect(child1.buildInternal).to.not.be.called;\n    resources.documentReady_ = true;\n    resources.add(child2);\n    const resource2 = stubBuild(Resource.forElementOptional(child2));\n    resources.upgraded(child2);\n    expect(child2.buildInternal).to.be.calledOnce;\n    expect(schedulePassStub).to.not.be.called;\n    return resource2.buildPromise.then(() => {\n      expect(schedulePassStub).to.be.calledOnce;\n    });\n  });","file":"unit/test-resources.js","skipped":false,"dir":"test"},{"name":"should not schedule pass when immediate build fails","suites":["onNextPass"],"updatePoint":{"line":1200,"column":57,"index":48651},"line":1200,"code":"  it('should not schedule pass when immediate build fails', () => {\n    const schedulePassStub = sandbox.stub(resources, 'schedulePass');\n    child1.isBuilt = () => false;\n    const child1BuildSpy = sandbox.spy();\n    child1.buildInternal = () => {\n      // Emulate an error happening during an element build.\n      child1BuildSpy();\n      return Promise.reject(new Error('child1-build-error'));\n    };\n    resources.documentReady_ = true;\n    resources.add(child1);\n    const resource1 = stubBuild(Resource.forElementOptional(child1));\n    resources.upgraded(child1);\n    expect(resources.get()).to.contain(resource1);\n    return resource1.buildPromise.then(() => {\n      throw new Error('must have failed');\n    }, () => {\n      expect(child1BuildSpy).to.be.calledOnce;\n      expect(schedulePassStub).to.not.be.called;\n      expect(resources.get()).to.not.contain(resource1);\n    });\n  });","file":"unit/test-resources.js","skipped":false,"dir":"test"},{"name":"should add element to pending build when document is not ready","suites":["onNextPass"],"updatePoint":{"line":1222,"column":68,"index":49554},"line":1222,"code":"  it('should add element to pending build when document is not ready', () => {\n    child1.isBuilt = () => false;\n    child2.isBuilt = () => false;\n    resources.buildReadyResources_ = sandbox.spy();\n    resources.documentReady_ = false;\n    resources.add(child1);\n    resources.upgraded(child1);\n    expect(child1.buildInternal.called).to.be.false;\n    expect(resources.pendingBuildResources_.length).to.be.equal(1);\n    resources.add(child2);\n    resources.upgraded(child2);\n    expect(child2.buildInternal.called).to.be.false;\n    expect(resources.pendingBuildResources_.length).to.be.equal(2);\n    expect(resources.buildReadyResources_.calledTwice).to.be.true;\n    const resource1 = Resource.forElementOptional(child1);\n    const resource2 = Resource.forElementOptional(child2);\n    expect(resources.get()).to.contain(resource1);\n    expect(resources.get()).to.contain(resource2);\n    expect(resource1.isBuilding()).to.be.false;\n    expect(resource2.isBuilding()).to.be.false;\n  });","file":"unit/test-resources.js","skipped":false,"dir":"test"},{"name":"should build ready resources and remove them from pending","suites":["buildReadyResources_"],"updatePoint":{"line":1254,"column":65,"index":50961},"line":1254,"code":"    it('should build ready resources and remove them from pending', () => {\n      resources.pendingBuildResources_ = [resource1, resource2];\n      resources.buildReadyResources_();\n      expect(child1.buildInternal.called).to.be.false;\n      expect(child2.buildInternal.called).to.be.false;\n      expect(resources.pendingBuildResources_.length).to.be.equal(2);\n      expect(resources.schedulePass.called).to.be.false;\n      child1.nextSibling = child2;\n      resources.buildReadyResources_();\n      expect(child1.buildInternal.called).to.be.true;\n      expect(child2.buildInternal.called).to.be.false;\n      expect(resources.pendingBuildResources_.length).to.be.equal(1);\n      expect(resources.pendingBuildResources_[0]).to.be.equal(resource2);\n      expect(resource1.isBuilding()).to.be.true;\n      expect(resource2.isBuilding()).to.be.false;\n      return resource1.buildPromise.then(() => {\n        expect(resources.schedulePass.calledOnce).to.be.true;\n        child2.parentNode = parent;\n        parent.nextSibling = true;\n        resources.buildReadyResources_();\n        expect(child1.buildInternal).to.be.calledOnce;\n        expect(child2.buildInternal.called).to.be.true;\n        expect(resources.pendingBuildResources_.length).to.be.equal(0);\n        expect(resource2.isBuilding()).to.be.true;\n        return resource2.buildPromise;\n      }).then(() => {\n        expect(resources.get()).to.contain(resource1);\n        expect(resources.get()).to.contain(resource2);\n        expect(resource1.isBuilding()).to.be.false;\n        expect(resource2.isBuilding()).to.be.false;\n        expect(resources.schedulePass.calledTwice).to.be.true;\n      });\n    });","file":"unit/test-resources.js","skipped":false,"dir":"test"},{"name":"should NOT build past the root node when pending","suites":["buildReadyResources_"],"updatePoint":{"line":1287,"column":56,"index":52611},"line":1287,"code":"    it('should NOT build past the root node when pending', () => {\n      resources.pendingBuildResources_ = [resource1];\n      resources.buildReadyResources_();\n      expect(child1.buildInternal.called).to.be.false;\n      expect(resources.pendingBuildResources_.length).to.be.equal(1);\n      expect(resources.schedulePass.called).to.be.false;\n      child1.parentNode = parent;\n      parent.nextSibling = true;\n      sandbox.stub(resources.ampdoc, 'getRootNode').returns(parent);\n      resources.buildReadyResources_();\n      expect(child1.buildInternal.called).to.be.false;\n      expect(resources.pendingBuildResources_.length).to.be.equal(1);\n      expect(resources.schedulePass.called).to.be.false;\n    });","file":"unit/test-resources.js","skipped":false,"dir":"test"},{"name":"should not try to build resources already being built","suites":["buildReadyResources_"],"updatePoint":{"line":1301,"column":61,"index":53325},"line":1301,"code":"    it('should not try to build resources already being built', () => {\n      resources.pendingBuildResources_ = [resource1, resource2];\n      resources.buildReadyResources_();\n      expect(child1.buildInternal.called).to.be.false;\n      expect(child2.buildInternal.called).to.be.false;\n      expect(resources.pendingBuildResources_.length).to.be.equal(2);\n      const newChild = createElementWithResource(3)[0];\n      newChild.nextSibling = true;\n      const newResource = newChild['__AMP__RESOURCE'];\n      const child1BuildSpy = sandbox.spy();\n      child1.nextSibling = child2;\n      child1.buildInternal = () => {\n        // Simulate parent elements adding children elements to simulate\n        // the infinite loop of building pending resources and make sure\n        // that we're handling it well.\n        child1BuildSpy();\n        resources.pendingBuildResources_.push(newResource);\n        resources.buildReadyResources_();\n        return Promise.resolve();\n      };\n      resources.buildReadyResources_();\n      expect(child1BuildSpy.called).to.be.true;\n      expect(child2.buildInternal.called).to.be.false;\n      expect(newChild.buildInternal.called).to.be.true;\n      expect(resources.pendingBuildResources_.length).to.be.equal(1);\n      expect(resources.pendingBuildResources_[0]).to.be.equal(resource2);\n      child2.parentNode = parent;\n      parent.nextSibling = true;\n      resources.buildReadyResources_();\n      expect(child1BuildSpy.calledTwice).to.be.false;\n      expect(child2.buildInternal.called).to.be.true;\n      expect(newChild.buildInternal.calledTwice).to.be.false;\n      expect(resources.pendingBuildResources_.length).to.be.equal(0);\n    });","file":"unit/test-resources.js","skipped":false,"dir":"test"},{"name":"should build everything pending when document is ready","suites":["buildReadyResources_"],"updatePoint":{"line":1335,"column":62,"index":55000},"line":1335,"code":"    it('should build everything pending when document is ready', () => {\n      resources.documentReady_ = true;\n      resources.pendingBuildResources_ = [parentResource, resource1, resource2];\n      const child1BuildSpy = sandbox.spy();\n      child1.buildInternal = () => {\n        // Emulate an error happening during an element build.\n        child1BuildSpy();\n        return Promise.reject(new Error('child1-build-error'));\n      };\n      resources.buildReadyResources_();\n      expect(child1BuildSpy.called).to.be.true;\n      expect(child2.buildInternal.called).to.be.true;\n      expect(parent.buildInternal.called).to.be.true;\n      expect(resources.pendingBuildResources_.length).to.be.equal(0);\n      return Promise.all([parentResource.buildPromise, resource2.buildPromise, resource1.buildPromise.then(() => {\n        throw new Error('must have failed');\n      }, () => {\n        // Ignore error.\n      })]).then(() => {\n        expect(schedulePassStub).to.be.calledTwice;\n        // Failed build.\n        expect(resources.get()).to.not.contain(resource1);\n        expect(resource1.isBuilding()).to.be.false;\n        // Successful build.\n        expect(resources.get()).to.contain(resource2);\n        expect(resource2.isBuilding()).to.be.false;\n      });\n    });","file":"unit/test-resources.js","skipped":false,"dir":"test"},{"name":"should not schedule pass if all builds failed","suites":["buildReadyResources_"],"updatePoint":{"line":1363,"column":53,"index":56261},"line":1363,"code":"    it('should not schedule pass if all builds failed', () => {\n      resources.documentReady_ = true;\n      resources.pendingBuildResources_ = [resource1];\n      const child1BuildSpy = sandbox.spy();\n      child1.buildInternal = () => {\n        // Emulate an error happening during an element build.\n        child1BuildSpy();\n        return Promise.reject(new Error('child1-build-error'));\n      };\n      resources.buildReadyResources_();\n      expect(child1BuildSpy.called).to.be.true;\n      expect(resources.pendingBuildResources_.length).to.be.equal(0);\n      return resource1.buildPromise.then(() => {\n        throw new Error('must have failed');\n      }, () => {\n        expect(schedulePassStub).to.not.be.called;\n        expect(resources.get()).to.not.contain(resource1);\n        expect(resource1.isBuilding()).to.be.false;\n      });\n    });","file":"unit/test-resources.js","skipped":false,"dir":"test"},{"name":"should remove resource and pause","suites":["remove"],"updatePoint":{"line":1385,"column":40,"index":57132},"line":1385,"code":"    it('should remove resource and pause', () => {\n      child1.isBuilt = () => true;\n      resources.add(child1);\n      const resource = child1['__AMP__RESOURCE'];\n      const pauseOnRemoveStub = sandbox.stub(resource, 'pauseOnRemove');\n      const disconnectStub = sandbox.stub(resource, 'disconnect');\n      resources.remove(child1);\n      expect(resources.get()).to.not.contain(resource);\n      expect(pauseOnRemoveStub).to.be.calledOnce;\n      expect(disconnectStub).to.not.be.called;\n    });","file":"unit/test-resources.js","skipped":false,"dir":"test"},{"name":"remove should remove all of a resource's tasks","suites":["remove"],"updatePoint":{"line":1397,"column":52,"index":57648},"line":1397,"code":"  it(\"remove should remove all of a resource's tasks\", () => {\n    const states = [ResourceState_Enum.NOT_LAID_OUT, ResourceState_Enum.READY_FOR_LAYOUT, ResourceState_Enum.LAYOUT_SCHEDULED];\n    states.forEach(state => {\n      resource1.state_ = state;\n      resources.exec_.enqueue({\n        id: 1,\n        resource: resource1\n      });\n      resources.queue_.enqueue({\n        id: 1,\n        resource: resource1\n      });\n      expect(resources.exec_.getSize()).to.equal(1);\n      expect(resources.queue_.getSize()).to.equal(1);\n      resources.remove(child1);\n      expect(resources.exec_.getSize()).to.equal(0);\n      expect(resources.queue_.getSize()).to.equal(0);\n    });\n  });","file":"unit/test-resources.js","skipped":false,"dir":"test"},{"name":"should keep reference to the resource","suites":["reparent"],"updatePoint":{"line":1427,"column":45,"index":58703},"line":1427,"code":"    it('should keep reference to the resource', () => {\n      expect(resource).to.not.be.null;\n      expect(Resource.forElementOptional(child1)).to.equal(resource);\n      expect(resources.get()).to.not.contain(resource);\n      expect(scheduleBuildStub).to.be.calledOnce;\n      expect(resource.isMeasureRequested()).to.be.false;\n    });","file":"unit/test-resources.js","skipped":false,"dir":"test"},{"name":"should convert AMP from array to AMP object in single-doc","suites":[],"updatePoint":{"line":69,"column":63,"index":2487},"line":69,"code":"  it('should convert AMP from array to AMP object in single-doc', () => {\n    expect(win.AMP.push).to.equal([].push);\n    adopt(win);\n    expect(win.AMP.push).to.not.equal([].push);\n    expect(win.__AMP_TAG).to.be.true;\n  });","file":"unit/test-runtime.js","skipped":false,"dir":"test"},{"name":"should convert AMP from array to AMP object in shadow-doc","suites":[],"updatePoint":{"line":75,"column":63,"index":2713},"line":75,"code":"  it('should convert AMP from array to AMP object in shadow-doc', () => {\n    expect(win.AMP.push).to.equal([].push);\n    adoptShadowMode(win);\n    expect(win.AMP.push).to.not.equal([].push);\n    expect(win.__AMP_TAG).to.be.true;\n  });","file":"unit/test-runtime.js","skipped":false,"dir":"test"},{"name":"should install legacy stubs in single-doc","suites":[],"updatePoint":{"line":81,"column":47,"index":2933},"line":81,"code":"  it('should install legacy stubs in single-doc', () => {\n    const initial = win.__AMP_EXTENDED_ELEMENTS || {};\n    expect(initial['amp-ad']).to.be.undefined;\n    expect(initial['amp-embed']).to.be.undefined;\n    expect(initial['amp-video']).to.be.undefined;\n    adopt(win);\n    expect(win.__AMP_EXTENDED_ELEMENTS['amp-ad']).to.equal(ElementStub);\n    expect(win.__AMP_EXTENDED_ELEMENTS['amp-embed']).to.equal(ElementStub);\n    expect(win.__AMP_EXTENDED_ELEMENTS['amp-video']).to.equal(ElementStub);\n  });","file":"unit/test-runtime.js","skipped":false,"dir":"test"},{"name":"should install legacy stubs in shadow-doc","suites":[],"updatePoint":{"line":91,"column":47,"index":3440},"line":91,"code":"  it('should install legacy stubs in shadow-doc', () => {\n    const initial = win.__AMP_EXTENDED_ELEMENTS || {};\n    expect(initial['amp-ad']).to.be.undefined;\n    expect(initial['amp-embed']).to.be.undefined;\n    expect(initial['amp-video']).to.be.undefined;\n    adoptShadowMode(win);\n    expect(win.__AMP_EXTENDED_ELEMENTS['amp-ad']).to.equal(ElementStub);\n    expect(win.__AMP_EXTENDED_ELEMENTS['amp-embed']).to.equal(ElementStub);\n    expect(win.__AMP_EXTENDED_ELEMENTS['amp-video']).to.equal(ElementStub);\n  });","file":"unit/test-runtime.js","skipped":false,"dir":"test"},{"name":"should NOT set cursor:pointer on document element on non-IOS","suites":[],"updatePoint":{"line":101,"column":66,"index":3976},"line":101,"code":"  it('should NOT set cursor:pointer on document element on non-IOS', () => {\n    const platform = Services.platformFor(win);\n    env.sandbox.stub(platform, 'isIos').returns(false);\n    adopt(win);\n    expect(win.document.documentElement.style.cursor).to.not.be.ok;\n  });","file":"unit/test-runtime.js","skipped":false,"dir":"test"},{"name":"should set cursor:pointer on document element on IOS","suites":[],"updatePoint":{"line":107,"column":58,"index":4239},"line":107,"code":"  it('should set cursor:pointer on document element on IOS', () => {\n    const platform = Services.platformFor(win);\n    env.sandbox.stub(platform, 'isIos').returns(true);\n    adopt(win);\n    expect(win.document.documentElement.style.cursor).to.equal('pointer');\n  });","file":"unit/test-runtime.js","skipped":false,"dir":"test"},{"name":"should set cursor:pointer on IOS in shadow-doc","suites":[],"updatePoint":{"line":113,"column":52,"index":4502},"line":113,"code":"  it('should set cursor:pointer on IOS in shadow-doc', () => {\n    const platform = Services.platformFor(win);\n    env.sandbox.stub(platform, 'isIos').returns(true);\n    adoptShadowMode(win);\n    expect(win.document.documentElement.style.cursor).to.equal('pointer');\n  });","file":"unit/test-runtime.js","skipped":false,"dir":"test"},{"name":"should execute scheduled extensions & execute new extensions","suites":[],"updatePoint":{"line":159,"column":66,"index":5985},"line":159,"code":"  it('should execute scheduled extensions & execute new extensions', extensionRegistrationTest);","file":"unit/test-runtime.js","skipped":false,"dir":"test"},{"name":"should not maybePumpEarlyFrame when body not yet present","suites":[],"updatePoint":{"line":160,"column":62,"index":6078},"line":160,"code":"  it('should not maybePumpEarlyFrame when body not yet present', () => {\n    // Make document.body be null on first invocation to simulate\n    // JS executing before the rest of the doc has been parsed.\n    const {\n      body\n    } = win.document;\n    let accessedOnce = false;\n    env.sandbox.defineProperty(win.document, 'body', {\n      get: () => {\n        if (accessedOnce) {\n          return body;\n        }\n        accessedOnce = true;\n        return null;\n      }\n    });\n    extensionRegistrationTest();\n  });","file":"unit/test-runtime.js","skipped":false,"dir":"test"},{"name":"should maybePumpEarlyFrame and delay extension execution","suites":[],"updatePoint":{"line":182,"column":62,"index":6806},"line":182,"code":"  it('should maybePumpEarlyFrame and delay extension execution', () => {\n    let progress = '';\n    const queueExtensions = win.AMP;\n    const highPriority = regularExtension(amp => {\n      expect(amp).to.equal(win.AMP);\n      progress += 'high';\n    });\n    highPriority.p = 'high';\n    win.AMP.push(highPriority);\n    win.AMP.push(regularExtension(amp => {\n      expect(amp).to.equal(win.AMP);\n      progress += '1';\n    }));\n    win.AMP.push(regularExtension(amp => {\n      expect(amp).to.equal(win.AMP);\n      progress += '2';\n    }));\n    win.AMP.push(() => {\n      progress += 'function';\n    });\n    win.AMP.push(regularExtension(amp => {\n      expect(amp).to.equal(win.AMP);\n      progress += '3';\n    }));\n    expect(queueExtensions).to.have.length(5);\n    const promise = adopt(win);\n    runChunksForTesting(win.document);\n    return promise.then(() => {\n      // Skip a microtask.\n      return Promise.resolve();\n    }).then(() => {\n      expect(progress).to.equal('highfunction');\n      expect(queueExtensions).to.have.length(3);\n      clock.tick();\n      expect(queueExtensions).to.have.length(3);\n      expect(progress).to.equal('highfunction');\n      // New extension arrives before inital ran.\n      win.AMP.push(regularExtension(amp => {\n        expect(amp).to.equal(win.AMP);\n        progress += '4';\n      }));\n      expect(queueExtensions).to.have.length(4);\n      clock.tick(1);\n      expect(queueExtensions).to.have.length(0);\n      runChunks(win.document);\n      return promise;\n    }).then(() => {\n      expect(progress).to.equal('highfunction1234');\n      win.AMP.push(regularExtension(amp => {\n        expect(amp).to.equal(win.AMP);\n        progress += '5';\n      }));\n      runChunks(win.document);\n      return promise;\n    }).then(() => {\n      expect(progress).to.equal('highfunction12345');\n      expect(queueExtensions).to.have.length(0);\n    });\n  });","file":"unit/test-runtime.js","skipped":false,"dir":"test"},{"name":"support struct AMP.push raw functions and high priority","suites":[],"updatePoint":{"line":241,"column":61,"index":8690},"line":241,"code":"  it('support struct AMP.push raw functions and high priority', () => {\n    // New format: {n:string, f:function()}.\n    let progress = '';\n    const queueExtensions = win.AMP;\n\n    // Queue mode.\n    win.AMP.push(amp => {\n      expect(amp).to.equal(win.AMP);\n      progress += '1';\n    });\n    win.AMP.push({\n      n: 'ext2',\n      ev: '0.1',\n      l: true,\n      p: 'high',\n      f: amp => {\n        expect(amp).to.equal(win.AMP);\n        progress += 'HIGH';\n      },\n      v: '$internalRuntimeVersion$'\n    });\n    expect(queueExtensions).to.have.length(2);\n    expect(progress).to.equal('');\n    const promise = adopt(win);\n    clock.tick(1); // await early frame\n    return promise.then(() => {\n      // Notice the queue is down to 0 but there is a micro task to execute\n      // raw and high prio functions. Also notice that no `runChunksForTesting`\n      // was called to process the queue.\n      expect(queueExtensions).to.have.length(0);\n      expect(progress).to.equal('');\n      // Even though raw functions and high priority don't go through chunking\n      // there is a micro task for its queue.\n      return Promise.resolve();\n    }).then(() => {\n      expect(queueExtensions).to.have.length(0);\n      expect(progress).to.equal('1HIGH');\n      win.AMP.push({\n        n: 'ext1',\n        ev: '0.1',\n        l: true,\n        f: amp => {\n          expect(amp).to.equal(win.AMP);\n          progress += 'A';\n        },\n        v: '$internalRuntimeVersion$'\n      });\n      runChunks(win.document);\n      return promise.then(() => {\n        expect(progress).to.equal('1HIGHA');\n      });\n    });\n  });","file":"unit/test-runtime.js","skipped":false,"dir":"test"},{"name":"should wait for body before processing extensions","suites":[],"updatePoint":{"line":294,"column":55,"index":10293},"line":294,"code":"  it('should wait for body before processing extensions', function* () {\n    let bodyResolver;\n    const bodyPromise = new Promise(resolve => {\n      bodyResolver = resolve;\n    });\n    env.sandbox.stub(dom, 'waitForBodyOpenPromise').callsFake(() => bodyPromise);\n    function skipMicro() {\n      return Promise.resolve().then(() => Promise.resolve());\n    }\n    function waitNext(promise) {\n      return Promise.race([promise, skipMicro()]);\n    }\n    let progress = '';\n    const queueExtensions = win.AMP;\n    win.AMP.push(regularExtension(amp => {\n      expect(amp).to.equal(win.AMP);\n      progress += '1';\n    }));\n    win.AMP.push(regularExtension(amp => {\n      expect(amp).to.equal(win.AMP);\n      progress += '2';\n    }));\n    win.AMP.push(regularExtension(amp => {\n      expect(amp).to.equal(win.AMP);\n      progress += '3';\n    }));\n    const promise = adopt(win);\n    runChunks(win.document);\n    yield waitNext(promise);\n    // Extensions are still unprocessed\n    expect(progress).to.equal('');\n\n    // Add one more\n    win.AMP.push(regularExtension(amp => {\n      expect(amp).to.equal(win.AMP);\n      progress += '4';\n    }));\n    runChunks(win.document);\n    yield waitNext(promise);\n    expect(progress).to.equal('');\n\n    // Body is available now.\n    bodyResolver();\n    runChunks(win.document);\n    yield waitNext(promise);\n    expect(progress).to.equal('1234');\n    expect(queueExtensions).to.have.length(0);\n  });","file":"unit/test-runtime.js","skipped":false,"dir":"test"},{"name":"should load correct extension version","suites":[],"updatePoint":{"line":342,"column":43,"index":11718},"line":342,"code":"  it('should load correct extension version', async function () {\n    self.__AMP_MODE = {\n      rtvVersion: 'test-version'\n    };\n    function addExisting(index) {\n      const s = document.createElement('script');\n      const name = 'amp-test-element' + index;\n      s.setAttribute('custom-element', name);\n      s.setAttribute('src', `https://cdn.ampproject.org/v0/${name}-0.1.js`);\n      win.document.head.appendChild(s);\n      return s;\n    }\n    const s1 = addExisting(1);\n    const s2 = addExisting(4);\n    const s3 = addExisting(5);\n    let bodyResolver;\n    const bodyPromise = new Promise(resolve => {\n      bodyResolver = resolve;\n    });\n    env.sandbox.stub(dom, 'waitForBodyOpenPromise').callsFake(() => bodyPromise);\n    function skipMicro() {\n      return Promise.resolve().then(() => Promise.resolve());\n    }\n    function waitNext(promise) {\n      return Promise.race([promise, skipMicro()]);\n    }\n    let progress = '';\n    const queueExtensions = win.AMP;\n    win.AMP.push(regularExtension(amp => {\n      expect(amp).to.equal(win.AMP);\n      progress += '1';\n    }));\n    win.AMP.push(regularExtension(amp => {\n      expect(amp).to.equal(win.AMP);\n      progress += 'not expected 1';\n    }, 'version123'));\n    win.AMP.push(regularExtension(amp => {\n      expect(amp).to.equal(win.AMP);\n      progress += '3';\n    }));\n    const promise = adopt(win);\n    runChunks(win.document);\n    await waitNext(promise);\n    // Extensions are still unprocessed\n    expect(progress).to.equal('');\n\n    // Add one more\n    win.AMP.push(regularExtension(amp => {\n      expect(amp).to.equal(win.AMP);\n      progress += '4';\n    }));\n    win.AMP.push(regularExtension(amp => {\n      expect(amp).to.equal(win.AMP);\n      progress += 'not expected 2';\n    }, 'version123'));\n    // Add legacy element (5) and eagarly ask for its load as ElementStub does.\n    Services.extensionsFor(win).preloadExtension('amp-test-element5', '0.1');\n    win.AMP.push(regularExtension(amp => {\n      expect(amp).to.equal(win.AMP);\n      progress += '5';\n    }, 'version123'));\n    runChunks(win.document);\n    await waitNext(promise);\n    expect(progress).to.equal('');\n\n    // Body is available now.\n    bodyResolver();\n    runChunks(win.document);\n    await waitNext(promise);\n    expect(progress).to.equal('134');\n    expect(queueExtensions).to.have.length(0);\n    expect(s1.getAttribute('i-amphtml-loaded-new-version')).to.equal('amp-test-element1');\n    expect(s2.getAttribute('i-amphtml-loaded-new-version')).to.equal('amp-test-element4');\n    expect(s3.getAttribute('i-amphtml-loaded-new-version')).to.equal('amp-test-element5');\n    const inserted = toArray(win.document.head.querySelectorAll('[i-amphtml-inserted]')).map(s => s.src);\n    expect(inserted).to.include('https://cdn.ampproject.org/rtv/test-version/v0/amp-test-element1-0.1.js');\n    expect(inserted).to.include('https://cdn.ampproject.org/rtv/test-version/v0/amp-test-element4-0.1.js');\n    expect(inserted).to.include('https://cdn.ampproject.org/rtv/test-version/v0/amp-test-element5-0.1.js');\n  });","file":"unit/test-runtime.js","skipped":false,"dir":"test"},{"name":"should be robust against errors in early extensions","suites":[],"updatePoint":{"line":421,"column":57,"index":14787},"line":421,"code":"  it('should be robust against errors in early extensions', function* () {\n    let progress = '';\n    win.AMP.push(regularExtension(() => {\n      progress += '1';\n    }));\n    win.AMP.push(regularExtension(() => {\n      throw new Error('extension error');\n    }));\n    win.AMP.push(regularExtension(() => {\n      progress += '3';\n    }));\n    const promise = adopt(win);\n    runChunks(win.document);\n    yield promise;\n    expect(progress).to.equal('13');\n  });","file":"unit/test-runtime.js","skipped":false,"dir":"test"},{"name":"should export properties to global AMP object","suites":["single-mode"],"updatePoint":{"line":445,"column":53,"index":15475},"line":445,"code":"    it('should export properties to global AMP object', () => {\n      expect(win.AMP.BaseElement).to.be.a('function');\n      expect(win.AMP.registerElement).to.be.a('function');\n      expect(win.AMP.registerTemplate).to.be.a('function');\n      expect(win.AMP.setTickFunction).to.be.a('function');\n      expect(win.AMP.win).to.equal(win);\n      expect(win.AMP.viewer).to.be.a('object');\n      expect(win.AMP.viewport).to.be.a('object');\n      // Single-doc mode does not create `attachShadowDoc`.\n      expect(win.AMP.attachShadowDoc).to.not.exist;\n      expect(win.AMP.attachShadowDocAsStream).to.not.exist;\n    });","file":"unit/test-runtime.js","skipped":false,"dir":"test"},{"name":"should register template","suites":["single-mode"],"updatePoint":{"line":457,"column":32,"index":16070},"line":457,"code":"    it('should register template', async () => {\n      const ampdoc = ampdocService.getSingleDoc();\n      installTemplatesServiceForDoc(ampdoc);\n      const templates = Services.templatesForDoc(ampdoc);\n      class TemplateType {}\n      ampdoc.declareExtension('amp-ext', '0.1');\n      win.AMP.push({\n        n: 'amp-ext',\n        ev: '0.1',\n        l: true,\n        f: amp => {\n          amp.registerTemplate('amp-ext', TemplateType);\n        },\n        v: '$internalRuntimeVersion$'\n      });\n      runChunks(win.document);\n      await extensions.waitForExtension('amp-ext', '0.1');\n\n      // Extension is added immediately. Can't find for micro-tasks here.\n      const extHolder = extensions.extensions_['amp-ext:0.1'];\n      const ext = extHolder.extension;\n      expect(ext.elements['amp-ext']).not.exist;\n      const templateElement = win.document.createElement('template');\n      templateElement.setAttribute('type', 'amp-ext');\n      await templates.whenReady(templateElement);\n      const shadowRoot = document.createDocumentFragment();\n      const ampdoc2 = new AmpDocShadow(win, 'https://acme.org/', shadowRoot);\n      installTemplatesServiceForDoc(ampdoc2);\n      const templates2 = Services.templatesForDoc(ampdoc2);\n      expect(extHolder.docFactories).to.have.length(1);\n      extHolder.docFactories[0](ampdoc2);\n      const templateElement2 = win.document.createElement('template');\n      templateElement2.setAttribute('type', 'amp-ext');\n      await templates2.whenReady(templateElement2);\n    });","file":"unit/test-runtime.js","skipped":false,"dir":"test"},{"name":"should register element without CSS","suites":["single-mode"],"updatePoint":{"line":492,"column":43,"index":17596},"line":492,"code":"    it('should register element without CSS', function* () {\n      const ampdoc = ampdocService.getSingleDoc();\n      const servicePromise = getServicePromise(win, 'amp-ext');\n      const installStylesStub = env.sandbox.stub(styles, 'installStylesForDoc');\n      ampdoc.declareExtension('amp-ext', '0.1');\n      win.AMP.push({\n        n: 'amp-ext',\n        ev: '0.1',\n        l: true,\n        f: amp => {\n          amp.registerElement('amp-ext', win.AMP.BaseElement);\n        },\n        v: '$internalRuntimeVersion$'\n      });\n      runChunks(win.document);\n      yield extensions.waitForExtension('amp-ext', '0.1');\n\n      // Extension is added immediately. Can't find for micro-tasks here.\n      const ext = extensions.extensions_['amp-ext:0.1'].extension;\n      expect(ext.elements['amp-ext']).exist;\n      expect(ext.elements['amp-ext'].implementationClass).to.equal(win.AMP.BaseElement);\n\n      // No installStyles calls.\n      expect(installStylesStub).to.have.not.been.called;\n\n      // Register is called immediately as well.\n      expect(win.__AMP_EXTENDED_ELEMENTS['amp-ext']).to.equal(AMP.BaseElement);\n\n      // Service and extensions are resolved.\n      yield Promise.all([extensions.waitForExtension('amp-ext', '0.1'), servicePromise]);\n    });","file":"unit/test-runtime.js","skipped":false,"dir":"test"},{"name":"should register element with CSS","suites":["single-mode"],"updatePoint":{"line":523,"column":40,"index":18852},"line":523,"code":"    it('should register element with CSS', function* () {\n      const ampdoc = Services.ampdocServiceFor(win).getSingleDoc();\n      const servicePromise = getServicePromise(win, 'amp-ext');\n      let installStylesCallback;\n      const installStylesStub = env.sandbox.stub(styles, 'installStylesForDoc').callsFake((doc, cssText, cb) => {\n        installStylesCallback = cb;\n      });\n      ampdoc.declareExtension('amp-ext', '0.1');\n      win.AMP.push({\n        n: 'amp-ext',\n        ev: '0.1',\n        l: true,\n        f: amp => {\n          amp.registerElement('amp-ext', win.AMP.BaseElement, 'a{}');\n        },\n        v: '$internalRuntimeVersion$'\n      });\n      runChunks(win.document);\n\n      // Extension is added immediately. Can't find for micro-tasks here.\n      yield extensions.waitForExtension('amp-ext', '0.1');\n      const ext = extensions.extensions_['amp-ext:0.1'].extension;\n      expect(ext.elements['amp-ext']).exist;\n      expect(ext.elements['amp-ext'].implementationClass).to.equal(win.AMP.BaseElement);\n      expect(ext.elements['amp-ext'].css).to.equal('a{}');\n      expect(installStylesStub).to.be.calledOnce;\n      expect(installStylesStub).to.be.calledWithExactly(ampdoc, 'a{}', installStylesCallback, /* isRuntimeCss */false, /* ext */'amp-ext');\n\n      // Element resistration is not done until callback.\n      expect(win.__AMP_EXTENDED_ELEMENTS['amp-ext']).to.be.undefined;\n      installStylesCallback();\n      expect(win.__AMP_EXTENDED_ELEMENTS['amp-ext']).to.equal(AMP.BaseElement);\n\n      // Service and extensions are resolved.\n      yield Promise.all([extensions.waitForExtension('amp-ext', '0.1'), servicePromise]);\n    });","file":"unit/test-runtime.js","skipped":false,"dir":"test"},{"name":"should register doc-service as ctor and install imm","suites":["single-mode"],"updatePoint":{"line":559,"column":59,"index":20531},"line":559,"code":"    it('should register doc-service as ctor and install imm', function* () {\n      class Service1 {}\n      const ampdoc = new AmpDocSingle(win);\n      ampdoc.declareExtension('amp-ext', '0.1');\n      ampdocServiceMock.expects('getAmpDoc').returns(ampdoc).atLeast(1);\n      win.AMP.push({\n        n: 'amp-ext',\n        ev: '0.1',\n        l: true,\n        f: amp => {\n          amp.registerServiceForDoc('service1', Service1);\n        },\n        v: '$internalRuntimeVersion$'\n      });\n      runChunks(win.document);\n\n      // No factories\n      yield extensions.waitForExtension('amp-ext', '0.1');\n      const extHolder = extensions.extensions_['amp-ext:0.1'];\n      expect(extHolder.docFactories).to.have.length(1);\n\n      // Already installed.\n      expect(getServiceForDoc(ampdoc, 'service1')).to.be.instanceOf(Service1);\n\n      // The main top-level service is also pinged to unblock render.\n      yield getServicePromise(win, 'service1');\n    });","file":"unit/test-runtime.js","skipped":false,"dir":"test"},{"name":"should register doc-service factory and install","suites":["single-mode"],"updatePoint":{"line":586,"column":55,"index":21478},"line":586,"code":"    it('should register doc-service factory and install', function* () {\n      let count = 0;\n      function factory() {\n        count++;\n        return {\n          str: 'A'\n        };\n      }\n      const ampdoc = new AmpDocSingle(win);\n      ampdoc.declareExtension('amp-ext', '0.1');\n      ampdocServiceMock.expects('getAmpDoc').returns(ampdoc).atLeast(1);\n      win.AMP.push({\n        n: 'amp-ext',\n        ev: '0.1',\n        l: true,\n        f: amp => {\n          amp.registerServiceForDoc('service1', factory);\n        },\n        v: '$internalRuntimeVersion$'\n      });\n      runChunks(win.document);\n\n      // No factories\n      yield extensions.waitForExtension('amp-ext', '0.1');\n      const extHolder = extensions.extensions_['amp-ext:0.1'];\n      expect(extHolder.docFactories).to.have.length(1);\n\n      // Already installed.\n      expect(count).to.equal(1);\n      expect(getServiceForDoc(ampdoc, 'service1')).to.deep.equal({\n        str: 'A'\n      });\n    });","file":"unit/test-runtime.js","skipped":false,"dir":"test"},{"name":"should export properties to global AMP object","suites":["shadow-mode"],"updatePoint":{"line":628,"column":53,"index":22693},"line":628,"code":"    it('should export properties to global AMP object', () => {\n      expect(win.AMP.BaseElement).to.be.a('function');\n      expect(win.AMP.registerElement).to.be.a('function');\n      expect(win.AMP.registerTemplate).to.be.a('function');\n      expect(win.AMP.setTickFunction).to.be.a('function');\n      expect(win.AMP.win).to.equal(win);\n      expect(win.AMP.attachShadowDoc).to.be.a('function');\n      expect(win.AMP.attachShadowDocAsStream).to.be.a('function');\n      expect(win.AMP.viewer).to.not.exist;\n      expect(win.AMP.viewport).to.not.exist;\n    });","file":"unit/test-runtime.js","skipped":false,"dir":"test"},{"name":"should register element without CSS","suites":["shadow-mode"],"updatePoint":{"line":639,"column":43,"index":23243},"line":639,"code":"    it('should register element without CSS', function* () {\n      const servicePromise = getServicePromise(win, 'amp-ext');\n      const installStylesStub = env.sandbox.stub(styles, 'installStylesForDoc');\n      win.AMP.push({\n        n: 'amp-ext',\n        ev: '0.1',\n        l: true,\n        f: amp => {\n          amp.registerElement('amp-ext', win.AMP.BaseElement);\n        },\n        v: '$internalRuntimeVersion$'\n      });\n      runChunks(win.document);\n\n      // Extension is added immediately. Can't find for micro-tasks here.\n      yield extensions.waitForExtension('amp-ext', '0.1');\n      const extHolder = extensions.extensions_['amp-ext:0.1'];\n      const ext = extHolder.extension;\n      expect(ext.elements['amp-ext']).exist;\n      expect(ext.elements['amp-ext'].implementationClass).to.equal(win.AMP.BaseElement);\n\n      // No installStyles calls and no factories.\n      expect(installStylesStub).to.not.be.called;\n      expect(extHolder.docFactories).to.have.length(1);\n      expect(win.__AMP_EXTENDED_ELEMENTS['amp-ext']).to.be.undefined;\n\n      // Execute factory to install style.\n      const shadowRoot = document.createDocumentFragment();\n      const ampdoc = new AmpDocShadow(win, 'https://acme.org/', shadowRoot);\n      extHolder.docFactories[0](ampdoc);\n      expect(installStylesStub).to.not.be.called;\n      expect(win.__AMP_EXTENDED_ELEMENTS['amp-ext']).to.equal(AMP.BaseElement);\n\n      // Service and extensions are resolved.\n      yield Promise.all([extensions.waitForExtension('amp-ext', '0.1'), servicePromise]);\n    });","file":"unit/test-runtime.js","skipped":false,"dir":"test"},{"name":"should register element with CSS","suites":["shadow-mode"],"updatePoint":{"line":675,"column":40,"index":24792},"line":675,"code":"    it('should register element with CSS', function* () {\n      const servicePromise = getServicePromise(win, 'amp-ext');\n      let installStylesCallback;\n      const installStylesStub = env.sandbox.stub(styles, 'installStylesForDoc').callsFake((doc, cssText, cb) => {\n        installStylesCallback = cb;\n      });\n      win.AMP.push({\n        n: 'amp-ext',\n        ev: '0.1',\n        l: true,\n        f: amp => {\n          amp.registerElement('amp-ext', win.AMP.BaseElement, 'a{}');\n        },\n        v: '$internalRuntimeVersion$'\n      });\n      runChunks(win.document);\n\n      // Extension is added immediately. Can't find for micro-tasks here.\n      yield extensions.waitForExtension('amp-ext', '0.1');\n      const extHolder = extensions.extensions_['amp-ext:0.1'];\n      const ext = extHolder.extension;\n      expect(ext.elements['amp-ext']).exist;\n      expect(ext.elements['amp-ext'].implementationClass).to.equal(win.AMP.BaseElement);\n      expect(ext.elements['amp-ext'].css).to.equal('a{}');\n      // No installations yet, but there's a factory.\n      expect(extHolder.docFactories).to.have.length(1);\n      expect(win.__AMP_EXTENDED_ELEMENTS['amp-ext']).to.be.undefined;\n      expect(installStylesStub).to.have.not.been.called;\n\n      // Execute factory to install style.\n      const shadowRoot = document.createDocumentFragment();\n      const ampdoc = new AmpDocShadow(win, 'https://acme.org/', shadowRoot);\n      extHolder.docFactories[0](ampdoc);\n      expect(installStylesStub).to.be.calledOnce;\n      expect(installStylesStub).to.be.calledWithExactly(ampdoc, 'a{}', installStylesCallback, /* isRuntimeCss */false, /* ext */'amp-ext');\n\n      // Run install.\n      installStylesCallback();\n      expect(win.__AMP_EXTENDED_ELEMENTS['amp-ext']).to.equal(AMP.BaseElement);\n\n      // Service and extensions are resolved.\n      yield Promise.all([extensions.waitForExtension('amp-ext', '0.1'), servicePromise]);\n    });","file":"unit/test-runtime.js","skipped":false,"dir":"test"},{"name":"should register doc-service as ctor and defer install","suites":["shadow-mode"],"updatePoint":{"line":718,"column":61,"index":26744},"line":718,"code":"    it('should register doc-service as ctor and defer install', function* () {\n      class Service1 {}\n      win.AMP.push({\n        n: 'amp-ext',\n        ev: '0.1',\n        l: true,\n        f: amp => {\n          amp.registerServiceForDoc('service1', Service1);\n        },\n        v: '$internalRuntimeVersion$'\n      });\n      runChunks(win.document);\n\n      // Factory recorded.\n      yield extensions.waitForExtension('amp-ext', '0.1');\n      const extHolder = extensions.extensions_['amp-ext:0.1'];\n      expect(extHolder.docFactories).to.have.length(1);\n      const shadowRoot = document.createDocumentFragment();\n      const ampdoc = new AmpDocShadow(win, 'https://a.org/', shadowRoot);\n\n      // Not installed.\n      expect(getServicePromiseOrNullForDoc(ampdoc, 'service1')).to.be.null;\n\n      // Install.\n      extHolder.docFactories[0](ampdoc);\n      expect(getServiceForDoc(ampdoc, 'service1')).to.be.instanceOf(Service1);\n    });","file":"unit/test-runtime.js","skipped":false,"dir":"test"},{"name":"should install services and styles","suites":["attachShadowDoc"],"updatePoint":{"line":789,"column":42,"index":29016},"line":789,"code":"    it('should install services and styles', () => {\n      const ret = win.AMP.attachShadowDoc(hostElement, importDoc, docUrl);\n      expect(ret).to.exist;\n      const shadowRoot = getShadowRoot(hostElement);\n\n      // URL is set.\n      expect(shadowRoot.AMP.url).to.equal(docUrl);\n\n      // Stylesheet has been installed.\n      expect(shadowRoot.querySelector('style[amp-runtime]')).to.exist;\n\n      // Doc services have been installed.\n      expect(ampdoc.__AMP_SERVICES.action).to.exist;\n      expect(ampdoc.__AMP_SERVICES.action.obj).to.exist;\n      expect(ampdoc.__AMP_SERVICES.viewer).to.exist;\n      expect(ampdoc.__AMP_SERVICES.viewer.obj).to.exist;\n\n      // Single-doc bidings have been installed.\n      expect(ret.ampdoc).to.equal(ampdoc);\n      expect(ret.viewer).to.not.exist;\n    });","file":"unit/test-runtime.js","skipped":false,"dir":"test"},{"name":"should install doc services","suites":["attachShadowDoc"],"updatePoint":{"line":810,"column":35,"index":29807},"line":810,"code":"    it('should install doc services', async () => {\n      class Service1 {}\n      win.AMP.push({\n        n: 'amp-ext',\n        ev: '0.1',\n        l: true,\n        f: amp => {\n          amp.registerServiceForDoc('service1', Service1);\n        },\n        v: '$internalRuntimeVersion$'\n      });\n      const script = win.document.createElement('script');\n      script.setAttribute('custom-element', 'amp-ext');\n      script.setAttribute('src', 'https://cdn.ampproject.org/v0/amp-ext-0.1.js');\n      importDoc.head.appendChild(script);\n      win.AMP.attachShadowDoc(hostElement, importDoc, docUrl);\n\n      // Extensions-known has been set.\n      await ampdoc.whenExtensionsKnown();\n\n      // Factories have been applied.\n      await extensions.waitForExtension('amp-ext', '0.1');\n      expect(getServiceForDoc(ampdoc, 'service1')).to.be.instanceOf(Service1);\n    });","file":"unit/test-runtime.js","skipped":false,"dir":"test"},{"name":"should pass init parameters to viewer","suites":["attachShadowDoc"],"updatePoint":{"line":834,"column":45,"index":30680},"line":834,"code":"    it('should pass init parameters to viewer', () => {\n      win.AMP.attachShadowDoc(hostElement, importDoc, docUrl, {\n        'test1': '12'\n      });\n      expect(ampdoc.getParam('test1')).to.equal('12');\n      const viewer = getServiceForDoc(ampdoc, 'viewer');\n      expect(viewer.getParam('test1')).to.equal('12');\n    });","file":"unit/test-runtime.js","skipped":false,"dir":"test"},{"name":"should update host visibility","suites":["attachShadowDoc"],"updatePoint":{"line":842,"column":37,"index":30999},"line":842,"code":"    it('should update host visibility', () => {\n      win.AMP.attachShadowDoc(hostElement, importDoc, docUrl);\n\n      // Document is invisible at first.\n      expect(hostElement.style.visibility).to.equal('hidden');\n\n      // After timeout the doc rendered is started.\n      clock.tick(3000);\n      expect(hostElement.style.visibility).to.equal('visible');\n      expect(ampdoc.signals().get('render-start')).to.be.ok;\n      return ampdoc.whenReady().then(() => {\n        expect(ampdoc.isReady()).to.be.true;\n      });\n    });","file":"unit/test-runtime.js","skipped":false,"dir":"test"},{"name":"should import body","suites":["attachShadowDoc"],"updatePoint":{"line":856,"column":26,"index":31514},"line":856,"code":"    it('should import body', () => {\n      win.AMP.attachShadowDoc(hostElement, importDoc, docUrl);\n      const shadowRoot = getShadowRoot(hostElement);\n      const body = shadowRoot.querySelector('body') || shadowRoot.querySelector('amp-body');\n      expect(body).to.exist;\n      expect(body).to.have.class('amp-shadow');\n      expect(body.style.position).to.equal('relative');\n      expect(body.querySelector('child')).to.exist;\n      expect(ampdoc.getBody()).to.exist;\n    });","file":"unit/test-runtime.js","skipped":false,"dir":"test"},{"name":"should read title element","suites":["attachShadowDoc"],"updatePoint":{"line":866,"column":33,"index":32001},"line":866,"code":"    it('should read title element', () => {\n      const titleEl = win.document.createElement('title');\n      titleEl.textContent = 'test title';\n      importDoc.head.appendChild(titleEl);\n      const ret = win.AMP.attachShadowDoc(hostElement, importDoc, docUrl);\n      expect(ret.title).to.equal('test title');\n      expect(getShadowRoot(hostElement).AMP.title).to.equal('test title');\n    });","file":"unit/test-runtime.js","skipped":false,"dir":"test"},{"name":"should read canonical element","suites":["attachShadowDoc"],"updatePoint":{"line":874,"column":37,"index":32399},"line":874,"code":"    it('should read canonical element', () => {\n      const canonicalEl = win.document.createElement('link');\n      canonicalEl.setAttribute('rel', 'canonical');\n      canonicalEl.setAttribute('href', 'http://example.org/canonical');\n      importDoc.head.appendChild(canonicalEl);\n      const ret = win.AMP.attachShadowDoc(hostElement, importDoc, docUrl);\n      expect(ret.canonicalUrl).to.equal('http://example.org/canonical');\n    });","file":"unit/test-runtime.js","skipped":false,"dir":"test"},{"name":"should import fonts","suites":["attachShadowDoc"],"updatePoint":{"line":882,"column":27,"index":32826},"line":882,"code":"    it('should import fonts', () => {\n      const fontEl1 = win.document.createElement('link');\n      fontEl1.setAttribute('rel', 'stylesheet');\n      fontEl1.setAttribute('href', 'http://example.org/font1');\n      importDoc.head.appendChild(fontEl1);\n      const fontEl2 = win.document.createElement('link');\n      fontEl2.setAttribute('rel', 'stylesheet');\n      fontEl2.setAttribute('href', 'http://example.org/font2');\n      importDoc.head.appendChild(fontEl2);\n      win.document.head.appendChild(fontEl2.cloneNode(true));\n      win.AMP.attachShadowDoc(hostElement, importDoc, docUrl);\n      expect(win.document.querySelector('link[href=\"http://example.org/font1\"]')).to.exist;\n      // Duplicates are ignored.\n      expect(win.document.querySelectorAll('link[href=\"http://example.org/font2\"]')).to.have.length(1);\n      const fontEl = win.document.querySelector('link[href=\"http://example.org/font1\"]');\n      expect(fontEl.getAttribute('type')).to.equal('text/css');\n      expect(fontEl.getAttribute('rel')).to.equal('stylesheet');\n      fontEl.parentElement.removeChild(fontEl);\n    });","file":"unit/test-runtime.js","skipped":false,"dir":"test"},{"name":"should ignore boilerplate style","suites":["attachShadowDoc"],"updatePoint":{"line":901,"column":39,"index":33933},"line":901,"code":"    it('should ignore boilerplate style', () => {\n      const styleEl = win.document.createElement('style');\n      styleEl.setAttribute('amp-boilerplate', '');\n      importDoc.head.appendChild(styleEl);\n      win.AMP.attachShadowDoc(hostElement, importDoc, docUrl);\n      const shadowRoot = getShadowRoot(hostElement);\n      expect(shadowRoot.querySelector('style[amp-boilerplate]')).to.not.exist;\n    });","file":"unit/test-runtime.js","skipped":false,"dir":"test"},{"name":"should import custom style","suites":["attachShadowDoc"],"updatePoint":{"line":909,"column":34,"index":34334},"line":909,"code":"    it('should import custom style', () => {\n      const styleEl = win.document.createElement('style');\n      styleEl.setAttribute('amp-custom', '');\n      styleEl.textContent = '.custom{}';\n      importDoc.head.appendChild(styleEl);\n      win.AMP.attachShadowDoc(hostElement, importDoc, docUrl);\n      const shadowRoot = getShadowRoot(hostElement);\n      expect(shadowRoot.querySelector('style[amp-custom]')).to.exist;\n      expect(shadowRoot.querySelector('style[amp-custom]').textContent).to.contain('.custom');\n    });","file":"unit/test-runtime.js","skipped":false,"dir":"test"},{"name":"should import keyframes style","suites":["attachShadowDoc"],"updatePoint":{"line":919,"column":37,"index":34860},"line":919,"code":"    it('should import keyframes style', () => {\n      const styleEl = win.document.createElement('style');\n      styleEl.setAttribute('amp-keyframes', '');\n      styleEl.textContent = '.keyframes{}';\n      importDoc.head.appendChild(styleEl);\n      win.AMP.attachShadowDoc(hostElement, importDoc, docUrl);\n      const shadowRoot = getShadowRoot(hostElement);\n      expect(shadowRoot.querySelector('style[amp-custom]')).to.not.exist;\n      expect(shadowRoot.querySelector('style[amp-keyframes]')).to.exist;\n      expect(shadowRoot.querySelector('style[amp-keyframes]').textContent).to.contain('.keyframes');\n    });","file":"unit/test-runtime.js","skipped":false,"dir":"test"},{"name":"should ignore runtime","suites":["attachShadowDoc"],"updatePoint":{"line":930,"column":29,"index":35467},"line":930,"code":"    it('should ignore runtime', () => {\n      extensionsMock.expects('preloadExtension').never();\n      const scriptEl = win.document.createElement('script');\n      scriptEl.setAttribute('src', 'https://cdn.ampproject.org/v0.js');\n      importDoc.head.appendChild(scriptEl);\n      win.AMP.attachShadowDoc(hostElement, importDoc, docUrl);\n    });","file":"unit/test-runtime.js","skipped":false,"dir":"test"},{"name":"should ignore mjs runtime","suites":["attachShadowDoc"],"updatePoint":{"line":937,"column":33,"index":35817},"line":937,"code":"    it('should ignore mjs runtime', () => {\n      extensionsMock.expects('preloadExtension').never();\n      const scriptEl = win.document.createElement('script');\n      scriptEl.setAttribute('src', 'https://cdn.ampproject.org/v0.mjs');\n      importDoc.head.appendChild(scriptEl);\n      win.AMP.attachShadowDoc(hostElement, importDoc, docUrl);\n    });","file":"unit/test-runtime.js","skipped":false,"dir":"test"},{"name":"should ignore unknown script","suites":["attachShadowDoc"],"updatePoint":{"line":944,"column":36,"index":36171},"line":944,"code":"    it('should ignore unknown script', () => {\n      extensionsMock.expects('preloadExtension').never();\n      const scriptEl = win.document.createElement('script');\n      scriptEl.setAttribute('data-id', 'unknown1');\n      scriptEl.setAttribute('src', 'https://cdn.ampproject.org/other.js');\n      importDoc.head.appendChild(scriptEl);\n      allowConsoleError(() => {\n        win.AMP.attachShadowDoc(hostElement, importDoc, docUrl);\n      });\n      expect(getShadowRoot(hostElement).querySelector('script[data-id=\"unknown1\"]')).to.not.exist;\n      expect(win.document.querySelector('script[data-id=\"unknown1\"]')).to.not.exist;\n    });","file":"unit/test-runtime.js","skipped":false,"dir":"test"},{"name":"should import extension element","suites":["attachShadowDoc"],"updatePoint":{"line":956,"column":39,"index":36810},"line":956,"code":"    it('should import extension element', async () => {\n      extensionsMock.expects('preloadExtension').withExactArgs('amp-ext1', '0.1').returns(Promise.resolve({\n        elements: {\n          'amp-ext1': function () {}\n        }\n      })).once();\n      const scriptEl = win.document.createElement('script');\n      scriptEl.setAttribute('custom-element', 'amp-ext1');\n      scriptEl.setAttribute('src', 'https://cdn.ampproject.org/v0/amp-ext-0.1.js');\n      importDoc.head.appendChild(scriptEl);\n      win.AMP.attachShadowDoc(hostElement, importDoc, docUrl);\n      expect(win.document.querySelector('script[custom-element=\"amp-ext1\"]')).to.not.exist;\n\n      // Extensions-known has been set.\n      await ampdoc.whenExtensionsKnown();\n    });","file":"unit/test-runtime.js","skipped":false,"dir":"test"},{"name":"should import module/nomodule extension element","suites":["attachShadowDoc"],"updatePoint":{"line":972,"column":55,"index":37569},"line":972,"code":"    it('should import module/nomodule extension element', () => {\n      extensionsMock.expects('preloadExtension').withExactArgs('amp-ext1', '0.1').returns(Promise.resolve({\n        elements: {\n          'amp-ext1': function () {}\n        }\n      })).once();\n      const mod = win.document.createElement('script');\n      mod.setAttribute('custom-element', 'amp-ext1');\n      mod.setAttribute('src', 'https://cdn.ampproject.org/v0/amp-ext-0.1.mjs');\n      mod.setAttribute('type', 'module');\n      const nomod = win.document.createElement('script');\n      nomod.setAttribute('custom-element', 'amp-ext1');\n      nomod.setAttribute('src', 'https://cdn.ampproject.org/v0/amp-ext-0.1.js');\n      nomod.setAttribute('nomodule', '');\n      importDoc.head.appendChild(mod);\n      importDoc.head.appendChild(nomod);\n      win.AMP.attachShadowDoc(hostElement, importDoc, docUrl);\n      expect(win.document.querySelector('script[custom-element=\"amp-ext1\"]')).to.not.exist;\n    });","file":"unit/test-runtime.js","skipped":false,"dir":"test"},{"name":"should import extension element with version ≠ 0.1","suites":["attachShadowDoc"],"updatePoint":{"line":991,"column":58,"index":38543},"line":991,"code":"    it('should import extension element with version ≠ 0.1', () => {\n      extensionsMock.expects('preloadExtension').withExactArgs('amp-ext1', '1.0').returns(Promise.resolve({\n        elements: {\n          'amp-ext1': function () {}\n        }\n      })).once();\n      const scriptEl = win.document.createElement('script');\n      scriptEl.setAttribute('custom-element', 'amp-ext1');\n      scriptEl.setAttribute('src', 'https://cdn.ampproject.org/v0/amp-ext1-1.0.js');\n      importDoc.head.appendChild(scriptEl);\n      win.AMP.attachShadowDoc(hostElement, importDoc, docUrl);\n      expect(win.document.querySelector('script[custom-element=\"amp-ext1\"]')).to.not.exist;\n    });","file":"unit/test-runtime.js","skipped":false,"dir":"test"},{"name":"should import extension template","suites":["attachShadowDoc"],"updatePoint":{"line":1004,"column":40,"index":39199},"line":1004,"code":"    it('should import extension template', () => {\n      extensionsMock.expects('preloadExtension').withExactArgs('amp-ext1', '0.1').returns(Promise.resolve({\n        elements: {}\n      })).once();\n      const scriptEl = win.document.createElement('script');\n      scriptEl.setAttribute('custom-template', 'amp-ext1');\n      scriptEl.setAttribute('src', 'https://cdn.ampproject.org/v0/amp-ext1-0.1.js');\n      importDoc.head.appendChild(scriptEl);\n      win.AMP.attachShadowDoc(hostElement, importDoc, docUrl);\n      expect(win.document.querySelector('script[custom-template=\"amp-ext1\"]')).to.not.exist;\n    });","file":"unit/test-runtime.js","skipped":false,"dir":"test"},{"name":"should import inline script","suites":["attachShadowDoc"],"updatePoint":{"line":1015,"column":35,"index":39806},"line":1015,"code":"    it('should import inline script', () => {\n      const scriptEl = win.document.createElement('script');\n      scriptEl.setAttribute('type', 'application/json');\n      scriptEl.setAttribute('data-id', 'test1');\n      scriptEl.textContent = '{}';\n      importDoc.head.appendChild(scriptEl);\n      win.AMP.attachShadowDoc(hostElement, importDoc, docUrl);\n      expect(getShadowRoot(hostElement).querySelector('script[data-id=\"test1\"]')).to.exist;\n      expect(getShadowRoot(hostElement).querySelector('script[data-id=\"test1\"]').textContent).to.equal('{}');\n    });","file":"unit/test-runtime.js","skipped":false,"dir":"test"},{"name":"should ignore inline script if javascript","suites":["attachShadowDoc"],"updatePoint":{"line":1025,"column":49,"index":40385},"line":1025,"code":"    it('should ignore inline script if javascript', () => {\n      const scriptEl1 = win.document.createElement('script');\n      scriptEl1.setAttribute('type', 'application/javascript');\n      scriptEl1.setAttribute('data-id', 'test1');\n      importDoc.head.appendChild(scriptEl1);\n      const scriptEl2 = win.document.createElement('script');\n      scriptEl2.setAttribute('data-id', 'test1');\n      importDoc.head.appendChild(scriptEl2);\n      allowConsoleError(() => {\n        win.AMP.attachShadowDoc(hostElement, importDoc, docUrl);\n      });\n      expect(getShadowRoot(hostElement).querySelector('script[data-id=\"test1\"]')).to.not.exist;\n    });","file":"unit/test-runtime.js","skipped":false,"dir":"test"},{"name":"should import meta content","suites":["attachShadowDoc"],"updatePoint":{"line":1038,"column":34,"index":41019},"line":1038,"code":"    it('should import meta content', () => {\n      const metaEl = win.document.createElement('meta');\n      metaEl.setAttribute('name', 'abc');\n      metaEl.setAttribute('content', '123');\n      importDoc.head.appendChild(metaEl);\n      const amp = win.AMP.attachShadowDoc(hostElement, importDoc, docUrl);\n      expect(amp.ampdoc.getMetaByName('abc')).to.equal('123');\n    });","file":"unit/test-runtime.js","skipped":false,"dir":"test"},{"name":"should start as visible by default","suites":["attachShadowDoc"],"updatePoint":{"line":1046,"column":42,"index":41404},"line":1046,"code":"    it('should start as visible by default', () => {\n      win.AMP.attachShadowDoc(hostElement, importDoc, docUrl);\n      expect(ampdoc.getVisibilityState()).to.equal('visible');\n    });","file":"unit/test-runtime.js","skipped":false,"dir":"test"},{"name":"should start as prerender when requested","suites":["attachShadowDoc"],"updatePoint":{"line":1050,"column":48,"index":41597},"line":1050,"code":"    it('should start as prerender when requested', () => {\n      win.AMP.attachShadowDoc(hostElement, importDoc, docUrl, {\n        'visibilityState': 'prerender'\n      });\n      expect(ampdoc.getVisibilityState()).to.equal('prerender');\n    });","file":"unit/test-runtime.js","skipped":false,"dir":"test"},{"name":"should expose visibility method","suites":["attachShadowDoc"],"updatePoint":{"line":1056,"column":39,"index":41833},"line":1056,"code":"    it('should expose visibility method', () => {\n      const amp = win.AMP.attachShadowDoc(hostElement, importDoc, docUrl);\n      expect(amp.setVisibilityState).to.be.a('function');\n      expect(ampdoc.getVisibilityState()).to.equal('visible');\n      amp.setVisibilityState('inactive');\n      expect(ampdoc.getVisibilityState()).to.equal('inactive');\n    });","file":"unit/test-runtime.js","skipped":false,"dir":"test"},{"name":"should expose close method and dispose services","suites":["attachShadowDoc"],"updatePoint":{"line":1063,"column":55,"index":42209},"line":1063,"code":"    it('should expose close method and dispose services', () => {\n      const amp = win.AMP.attachShadowDoc(hostElement, importDoc, docUrl);\n      const viewer = getServiceForDoc(ampdoc, 'viewer');\n      expect(amp.close).to.be.a('function');\n      expect(ampdoc.getVisibilityState()).to.equal('visible');\n      viewer.dispose = env.sandbox.spy();\n      amp.close().then(() => {\n        expect(ampdoc.getVisibilityState()).to.equal('inactive');\n        expect(viewer.dispose).to.be.calledOnce;\n      });\n    });","file":"unit/test-runtime.js","skipped":false,"dir":"test"},{"name":"should expose head tag ","suites":["attachShadowDoc"],"updatePoint":{"line":1074,"column":31,"index":42697},"line":1074,"code":"    it('should expose head tag ', () => {\n      const amp = win.AMP.attachShadowDoc(hostElement, importDoc, docUrl);\n      expect(amp.head).to.exist;\n      expect(amp.head.children).to.exist;\n      expect(amp.head.children.length).to.greaterThan(0);\n    });","file":"unit/test-runtime.js","skipped":false,"dir":"test"},{"name":"should install services and styles","suites":["attachShadowDoc"],"updatePoint":{"line":1103,"column":42,"index":43845},"line":1103,"code":"    it('should install services and styles', () => {\n      shadowDoc = win.AMP.attachShadowDocAsStream(hostElement, docUrl);\n      writer = shadowDoc.writer;\n      const shadowRoot = getShadowRoot(hostElement);\n\n      // URL is set.\n      expect(shadowRoot.AMP.url).to.equal(docUrl);\n\n      // Stylesheet has been installed.\n      expect(shadowRoot.querySelector('style[amp-runtime]')).to.exist;\n\n      // Doc services have been installed.\n      expect(ampdoc.__AMP_SERVICES.action).to.exist;\n      expect(ampdoc.__AMP_SERVICES.action.obj).to.exist;\n      expect(ampdoc.__AMP_SERVICES.viewer).to.exist;\n      expect(ampdoc.__AMP_SERVICES.viewer.obj).to.exist;\n\n      // Single-doc bidings have been installed.\n      expect(shadowDoc.ampdoc).to.equal(ampdoc);\n      expect(shadowDoc.viewer).to.not.exist;\n    });","file":"unit/test-runtime.js","skipped":false,"dir":"test"},{"name":"should install doc services","suites":["attachShadowDoc"],"updatePoint":{"line":1124,"column":35,"index":44650},"line":1124,"code":"    it('should install doc services', async () => {\n      shadowDoc = win.AMP.attachShadowDocAsStream(hostElement, docUrl);\n      writer = shadowDoc.writer;\n      class Service1 {}\n      win.AMP.push({\n        n: 'amp-ext',\n        ev: '0.1',\n        l: true,\n        f: amp => {\n          amp.registerServiceForDoc('service1', Service1);\n        },\n        v: '$internalRuntimeVersion$'\n      });\n      writer.write('<script custom-element=\"amp-ext\" src=\"https://cdn.ampproject.org/v0/amp-ext-0.1.js\"></script>');\n      writer.write('<body>');\n      await ampdoc.waitForBodyOpen();\n\n      // Extensions-known has been set.\n      await ampdoc.whenExtensionsKnown();\n\n      // Factories have been applied.\n      await extensions.waitForExtension('amp-ext', '0.1');\n      expect(getServiceForDoc(ampdoc, 'service1')).to.be.instanceOf(Service1);\n    });","file":"unit/test-runtime.js","skipped":false,"dir":"test"},{"name":"should pass init parameters to viewer","suites":["attachShadowDoc"],"updatePoint":{"line":1148,"column":45,"index":45511},"line":1148,"code":"    it('should pass init parameters to viewer', () => {\n      win.AMP.attachShadowDocAsStream(hostElement, docUrl, {\n        'test1': '12'\n      });\n      const viewer = getServiceForDoc(ampdoc, 'viewer');\n      expect(viewer.getParam('test1')).to.equal('12');\n    });","file":"unit/test-runtime.js","skipped":false,"dir":"test"},{"name":"should update host visibility","suites":["attachShadowDoc"],"updatePoint":{"line":1155,"column":37,"index":45772},"line":1155,"code":"    it('should update host visibility', () => {\n      shadowDoc = win.AMP.attachShadowDocAsStream(hostElement, docUrl);\n      writer = shadowDoc.writer;\n      writer.write('<body><div>');\n\n      // Document is invisible at first.\n      expect(hostElement.style.visibility).to.equal('hidden');\n      return ampdoc.waitForBodyOpen().then(() => {\n        // After timeout the doc rendered is started.\n        expect(hostElement.style.visibility).to.equal('hidden');\n        return ampdoc.signals().whenSignal('render-start');\n      }).then(() => {\n        expect(hostElement.style.visibility).to.equal('visible');\n      });\n    });","file":"unit/test-runtime.js","skipped":false,"dir":"test"},{"name":"should import body","suites":["attachShadowDoc"],"updatePoint":{"line":1170,"column":26,"index":46390},"line":1170,"code":"    it('should import body', () => {\n      shadowDoc = win.AMP.attachShadowDocAsStream(hostElement, docUrl);\n      writer = shadowDoc.writer;\n      writer.write('<body><child>');\n      return ampdoc.waitForBodyOpen().then(() => {\n        const shadowRoot = getShadowRoot(hostElement);\n        const body = shadowRoot.querySelector('body') || shadowRoot.querySelector('amp-body');\n        expect(body).to.exist;\n        expect(body).to.have.class('amp-shadow');\n        expect(body.style.position).to.equal('relative');\n        env.flushVsync();\n        expect(body.querySelector('child')).to.exist;\n        expect(ampdoc.getBody()).to.exist;\n      });\n    });","file":"unit/test-runtime.js","skipped":false,"dir":"test"},{"name":"should mark doc as ready","suites":["attachShadowDoc"],"updatePoint":{"line":1185,"column":32,"index":47056},"line":1185,"code":"    it('should mark doc as ready', () => {\n      shadowDoc = win.AMP.attachShadowDocAsStream(hostElement, docUrl);\n      writer = shadowDoc.writer;\n      writer.write('<body><child>');\n      return ampdoc.waitForBodyOpen().then(() => {\n        expect(ampdoc.isReady()).to.be.false;\n        writer.write('</child></body>');\n        writer.write('</html>');\n        writer.close();\n        return ampdoc.whenReady().then(() => {\n          expect(ampdoc.isReady()).to.be.true;\n        });\n      });\n    });","file":"unit/test-runtime.js","skipped":false,"dir":"test"},{"name":"should read title element","suites":["attachShadowDoc"],"updatePoint":{"line":1199,"column":33,"index":47561},"line":1199,"code":"    it('should read title element', () => {\n      shadowDoc = win.AMP.attachShadowDocAsStream(hostElement, docUrl);\n      writer = shadowDoc.writer;\n      writer.write('<title>test title</title><body>');\n      return ampdoc.waitForBodyOpen().then(() => {\n        expect(shadowDoc.title).to.equal('test title');\n        expect(getShadowRoot(hostElement).AMP.title).to.equal('test title');\n      });\n    });","file":"unit/test-runtime.js","skipped":false,"dir":"test"},{"name":"should read canonical element","suites":["attachShadowDoc"],"updatePoint":{"line":1208,"column":37,"index":47971},"line":1208,"code":"    it('should read canonical element', () => {\n      shadowDoc = win.AMP.attachShadowDocAsStream(hostElement, docUrl);\n      writer = shadowDoc.writer;\n      writer.write('<link rel=\"canonical\" href=\"http://example.org/canonical\"><body>');\n      return ampdoc.waitForBodyOpen().then(() => {\n        expect(shadowDoc.canonicalUrl).to.equal('http://example.org/canonical');\n      });\n    });","file":"unit/test-runtime.js","skipped":false,"dir":"test"},{"name":"should import fonts","suites":["attachShadowDoc"],"updatePoint":{"line":1216,"column":27,"index":48352},"line":1216,"code":"    it('should import fonts', () => {\n      shadowDoc = win.AMP.attachShadowDocAsStream(hostElement, docUrl);\n      writer = shadowDoc.writer;\n      writer.write('<link rel=\"stylesheet\" href=\"http://example.org/font1\"><body>');\n      writer.write('<link rel=\"stylesheet\" href=\"http://example.org/font2\"><body>');\n      const fontEl2 = win.document.createElement('link');\n      fontEl2.setAttribute('rel', 'stylesheet');\n      fontEl2.setAttribute('href', 'http://example.org/font2');\n      win.document.head.appendChild(fontEl2);\n      return ampdoc.waitForBodyOpen().then(() => {\n        expect(win.document.querySelector('link[href=\"http://example.org/font1\"]')).to.exist;\n        // Duplicates are ignored.\n        expect(win.document.querySelectorAll('link[href=\"http://example.org/font2\"]')).to.have.length(1);\n        const fontEl = win.document.querySelector('link[href=\"http://example.org/font1\"]');\n        expect(fontEl.getAttribute('type')).to.equal('text/css');\n        expect(fontEl.getAttribute('rel')).to.equal('stylesheet');\n        fontEl.parentElement.removeChild(fontEl);\n      });\n    });","file":"unit/test-runtime.js","skipped":false,"dir":"test"},{"name":"should ignore boilerplate style","suites":["attachShadowDoc"],"updatePoint":{"line":1235,"column":39,"index":49473},"line":1235,"code":"    it('should ignore boilerplate style', () => {\n      shadowDoc = win.AMP.attachShadowDocAsStream(hostElement, docUrl);\n      writer = shadowDoc.writer;\n      writer.write('<style amp-boilerplate></style><body>');\n      return ampdoc.waitForBodyOpen().then(() => {\n        const shadowRoot = getShadowRoot(hostElement);\n        expect(shadowRoot.querySelector('style[amp-boilerplate]')).to.not.exist;\n      });\n    });","file":"unit/test-runtime.js","skipped":false,"dir":"test"},{"name":"should import custom style","suites":["attachShadowDoc"],"updatePoint":{"line":1244,"column":34,"index":49889},"line":1244,"code":"    it('should import custom style', () => {\n      shadowDoc = win.AMP.attachShadowDocAsStream(hostElement, docUrl);\n      writer = shadowDoc.writer;\n      writer.write('<style amp-custom>.custom{}</style><body>');\n      return ampdoc.waitForBodyOpen().then(() => {\n        const shadowRoot = getShadowRoot(hostElement);\n        expect(shadowRoot.querySelector('style[amp-custom]')).to.exist;\n        expect(shadowRoot.querySelector('style[amp-custom]').textContent).to.contain('.custom');\n      });\n    });","file":"unit/test-runtime.js","skipped":false,"dir":"test"},{"name":"should ignore runtime extension","suites":["attachShadowDoc"],"updatePoint":{"line":1254,"column":39,"index":50402},"line":1254,"code":"    it('should ignore runtime extension', async () => {\n      shadowDoc = win.AMP.attachShadowDocAsStream(hostElement, docUrl);\n      writer = shadowDoc.writer;\n      extensionsMock.expects('preloadExtension').never();\n      writer.write('<script src=\"https://cdn.ampproject.org/v0.js\"></script>');\n      writer.write('<body>');\n      await ampdoc.waitForBodyOpen();\n\n      // Extensions-known has been set.\n      await ampdoc.whenExtensionsKnown();\n    });","file":"unit/test-runtime.js","skipped":false,"dir":"test"},{"name":"should ignore unknown script","suites":["attachShadowDoc"],"updatePoint":{"line":1265,"column":36,"index":50857},"line":1265,"code":"    it('should ignore unknown script', () => {\n      shadowDoc = win.AMP.attachShadowDocAsStream(hostElement, docUrl);\n      writer = shadowDoc.writer;\n      extensionsMock.expects('preloadExtension').never();\n      writer.write('<script data-id=\"unknown1\"' + ' src=\"https://cdn.ampproject.org/other.js\"></script>');\n      writer.write('<body>');\n      return ampdoc.waitForBodyOpen().then(() => {\n        expect(getShadowRoot(hostElement).querySelector('script[data-id=\"unknown1\"]')).to.not.exist;\n        expect(win.document.querySelector('script[data-id=\"unknown1\"]')).to.not.exist;\n      });\n    });","file":"unit/test-runtime.js","skipped":false,"dir":"test"},{"name":"should import extension element","suites":["attachShadowDoc"],"updatePoint":{"line":1276,"column":39,"index":51464},"line":1276,"code":"    it('should import extension element', async () => {\n      shadowDoc = win.AMP.attachShadowDocAsStream(hostElement, docUrl);\n      writer = shadowDoc.writer;\n      extensionsMock.expects('preloadExtension').withExactArgs('amp-ext1', '0.1').returns(Promise.resolve({\n        elements: {\n          'amp-ext1': function () {}\n        }\n      })).once();\n      writer.write('<script custom-element=\"amp-ext1\" src=\"https://cdn.ampproject.org/v0/amp-ext1-0.1.js\"></script>');\n      writer.write('<body>');\n      await ampdoc.waitForBodyOpen();\n\n      // Extensions-known has been set.\n      await ampdoc.whenExtensionsKnown();\n      expect(win.document.querySelector('script[custom-element=\"amp-ext1\"]')).to.not.exist;\n    });","file":"unit/test-runtime.js","skipped":false,"dir":"test"},{"name":"should import extension template","suites":["attachShadowDoc"],"updatePoint":{"line":1292,"column":40,"index":52189},"line":1292,"code":"    it('should import extension template', () => {\n      shadowDoc = win.AMP.attachShadowDocAsStream(hostElement, docUrl);\n      writer = shadowDoc.writer;\n      extensionsMock.expects('preloadExtension').withExactArgs('amp-ext1', '0.1').returns(Promise.resolve({\n        elements: {}\n      })).once();\n      writer.write('<script custom-template=\"amp-ext1\" src=\"https://cdn.ampproject.org/v0/amp-ext1-0.1.js\"></script>');\n      writer.write('<body>');\n      return ampdoc.waitForBodyOpen().then(() => {\n        expect(win.document.querySelector('script[custom-template=\"amp-ext1\"]')).to.not.exist;\n      });\n    });","file":"unit/test-runtime.js","skipped":false,"dir":"test"},{"name":"should import inline script","suites":["attachShadowDoc"],"updatePoint":{"line":1304,"column":35,"index":52801},"line":1304,"code":"    it('should import inline script', () => {\n      shadowDoc = win.AMP.attachShadowDocAsStream(hostElement, docUrl);\n      writer = shadowDoc.writer;\n      writer.write('<script type=\"application/json\" data-id=\"test1\">{}</script>');\n      writer.write('<body>');\n      return ampdoc.waitForBodyOpen().then(() => {\n        expect(getShadowRoot(hostElement).querySelector('script[data-id=\"test1\"]')).to.exist;\n        expect(getShadowRoot(hostElement).querySelector('script[data-id=\"test1\"]').textContent).to.equal('{}');\n      });\n    });","file":"unit/test-runtime.js","skipped":false,"dir":"test"},{"name":"should ignore inline script if javascript","suites":["attachShadowDoc"],"updatePoint":{"line":1314,"column":49,"index":53354},"line":1314,"code":"    it('should ignore inline script if javascript', () => {\n      expectAsyncConsoleError('[multidoc-manager] - unallowed inline javascript:  ' + '[object HTMLScriptElement]', 2);\n      shadowDoc = win.AMP.attachShadowDocAsStream(hostElement, docUrl);\n      writer = shadowDoc.writer;\n      writer.write('<script type=\"application/javascript\" data-id=\"test1\"></script>');\n      writer.write('<script data-id=\"test1\"></script>');\n      writer.write('<body>');\n      return ampdoc.waitForBodyOpen(() => {\n        expect(getShadowRoot(hostElement).querySelector('script[data-id=\"test1\"]')).to.not.exist;\n      });\n    });","file":"unit/test-runtime.js","skipped":false,"dir":"test"},{"name":"should start as visible by default","suites":["attachShadowDoc"],"updatePoint":{"line":1325,"column":42,"index":53966},"line":1325,"code":"    it('should start as visible by default', () => {\n      shadowDoc = win.AMP.attachShadowDocAsStream(hostElement, docUrl);\n      writer = shadowDoc.writer;\n      writer.write('<body>');\n      return ampdoc.waitForBodyOpen().then(() => {\n        expect(ampdoc.getVisibilityState()).to.equal('visible');\n      });\n    });","file":"unit/test-runtime.js","skipped":false,"dir":"test"},{"name":"should start as prerender when requested","suites":["attachShadowDoc"],"updatePoint":{"line":1333,"column":48,"index":54294},"line":1333,"code":"    it('should start as prerender when requested', () => {\n      shadowDoc = win.AMP.attachShadowDocAsStream(hostElement, docUrl, {\n        'visibilityState': 'prerender'\n      });\n      writer = shadowDoc.writer;\n      writer.write('<body>');\n      return ampdoc.waitForBodyOpen().then(() => {\n        expect(ampdoc.getVisibilityState()).to.equal('prerender');\n      });\n    });","file":"unit/test-runtime.js","skipped":false,"dir":"test"},{"name":"should expose visibility method","suites":["attachShadowDoc"],"updatePoint":{"line":1343,"column":39,"index":54665},"line":1343,"code":"    it('should expose visibility method', () => {\n      shadowDoc = win.AMP.attachShadowDocAsStream(hostElement, docUrl);\n      writer = shadowDoc.writer;\n      writer.write('<body>');\n      return ampdoc.waitForBodyOpen().then(() => {\n        expect(shadowDoc.setVisibilityState).to.be.a('function');\n        expect(ampdoc.getVisibilityState()).to.equal('visible');\n        shadowDoc.setVisibilityState('inactive');\n        expect(ampdoc.getVisibilityState()).to.equal('inactive');\n      });\n    });","file":"unit/test-runtime.js","skipped":false,"dir":"test"},{"name":"should expose close method and dispose services","suites":["attachShadowDoc"],"updatePoint":{"line":1354,"column":55,"index":55182},"line":1354,"code":"    it('should expose close method and dispose services', () => {\n      shadowDoc = win.AMP.attachShadowDocAsStream(hostElement, docUrl);\n      writer = shadowDoc.writer;\n      writer.write('<body>');\n      return ampdoc.waitForBodyOpen().then(() => {\n        const viewer = getServiceForDoc(ampdoc, 'viewer');\n        expect(shadowDoc.close).to.be.a('function');\n        expect(ampdoc.getVisibilityState()).to.equal('visible');\n        viewer.dispose = env.sandbox.spy();\n        shadowDoc.close().then(() => {\n          expect(ampdoc.getVisibilityState()).to.equal('inactive');\n          expect(viewer.dispose).to.be.calledOnce;\n        });\n      });\n    });","file":"unit/test-runtime.js","skipped":false,"dir":"test"},{"name":"should broadcast to all but sender","suites":["attachShadowDoc"],"updatePoint":{"line":1419,"column":42,"index":57934},"line":1419,"code":"    it('should broadcast to all but sender', () => {\n      doc1.viewer.broadcast({\n        test: 1\n      });\n      return doc1.viewer.sendMessageAwaitResponse('ignore', {}).then(() => {\n        // Sender is not called.\n        expect(doc1.broadcastReceived).to.not.be.called;\n\n        // All others are called.\n        expect(doc2.broadcastReceived).to.be.calledOnce;\n        expect(doc2.broadcastReceived.args[0][0]).deep.equal({\n          test: 1\n        });\n        expect(doc3.broadcastReceived).to.be.calledOnce;\n        expect(doc3.broadcastReceived.args[0][0]).deep.equal({\n          test: 1\n        });\n\n        // None of the onMessage are called.\n        expect(doc1.onMessage).to.not.be.called;\n        expect(doc2.onMessage).to.not.be.called;\n        expect(doc3.onMessage).to.not.be.called;\n      });\n    });","file":"unit/test-runtime.js","skipped":false,"dir":"test"},{"name":"should stop broadcasting after close","suites":["attachShadowDoc"],"updatePoint":{"line":1443,"column":44,"index":58758},"line":1443,"code":"    it('should stop broadcasting after close', () => {\n      doc3.amp.close();\n      doc1.viewer.broadcast({\n        test: 1\n      });\n      return doc1.viewer.sendMessageAwaitResponse('ignore', {}).then(() => {\n        // Sender is not called, closed is not called.\n        expect(doc1.broadcastReceived).to.not.be.called;\n        expect(doc3.broadcastReceived).to.not.be.called;\n\n        // All others are called.\n        expect(doc2.broadcastReceived).to.be.calledOnce;\n        expect(doc2.broadcastReceived.args[0][0]).deep.equal({\n          test: 1\n        });\n      });\n    });","file":"unit/test-runtime.js","skipped":false,"dir":"test"},{"name":"should stop broadcasting after force-close","suites":["attachShadowDoc"],"updatePoint":{"line":1460,"column":50,"index":59348},"line":1460,"code":"    it('should stop broadcasting after force-close', () => {\n      doc3.hostElement.parentNode.removeChild(doc3.hostElement);\n      doc1.viewer.broadcast({\n        test: 1\n      });\n      return doc1.viewer.sendMessageAwaitResponse('ignore', {}).then(() => {\n        // Sender is not called, closed is not called.\n        expect(doc1.broadcastReceived).to.not.be.called;\n        expect(doc3.broadcastReceived).to.not.be.called;\n\n        // All others are called.\n        expect(doc2.broadcastReceived).to.be.calledOnce;\n        expect(doc2.broadcastReceived.args[0][0]).deep.equal({\n          test: 1\n        });\n      });\n    });","file":"unit/test-runtime.js","skipped":false,"dir":"test"},{"name":"should send message","suites":["attachShadowDoc"],"updatePoint":{"line":1477,"column":27,"index":59956},"line":1477,"code":"    it('should send message', () => {\n      doc1.onMessage.returns(Promise.resolve());\n      return doc1.viewer.sendMessageAwaitResponse('test3', {\n        test: 3\n      }).then(() => {\n        expect(doc1.onMessage).to.be.calledOnce;\n        expect(doc1.onMessage.args[0][0]).to.equal('test3');\n        expect(doc1.onMessage.args[0][1]).to.deep.equal({\n          test: 3\n        });\n      });\n    });","file":"unit/test-runtime.js","skipped":false,"dir":"test"},{"name":"should receive message","suites":["attachShadowDoc"],"updatePoint":{"line":1489,"column":30,"index":60361},"line":1489,"code":"    it('should receive message', () => {\n      doc1.amp.postMessage('broadcast', {\n        test: 4\n      }, true);\n      expect(doc1.broadcastReceived).to.be.calledOnce;\n      expect(doc1.broadcastReceived.args[0][0]).to.deep.equal({\n        test: 4\n      });\n    });","file":"unit/test-runtime.js","skipped":false,"dir":"test"},{"name":"should apply html4/caja restrictions","suites":["Caja-specific sanitization"],"updatePoint":{"line":16,"column":44,"index":528},"line":16,"code":"    it('should apply html4/caja restrictions', () => {\n      expect(sanitize('a<dialog>b</dialog>c')).to.be.equal('ac');\n      expect(sanitize('a<dialog>b<img>d</dialog>c')).to.be.equal('ac');\n      expect(sanitize('<div class=\"c\" src=\"d\">b</div>')).to.be.equal('<div class=\"c\" src=\"\">b</div>');\n    });","file":"unit/test-sanitizer.js","skipped":false,"dir":"test"},{"name":"should catch attribute value whitespace variations","suites":["Caja-specific sanitization"],"updatePoint":{"line":23,"column":58,"index":924},"line":23,"code":"    it('should catch attribute value whitespace variations', () => {\n      allowConsoleError(() => {\n        expect(sanitize('a<a href=\" j\\na\\tv\\ra s&#00;cript:alert\">b</a>')).to.be.equal('a<a target=\"_top\">b</a>');\n      });\n    });","file":"unit/test-sanitizer.js","skipped":false,"dir":"test"},{"name":"should ignore invalid characters in attributes","suites":["Caja-specific sanitization"],"updatePoint":{"line":30,"column":54,"index":1213},"line":30,"code":"    it('should ignore invalid characters in attributes', () => {\n      allowConsoleError(() => {\n        expect(sanitize('a<a href=\"<script\">b</a>')).to.be.equal('a<a target=\"_top\">b</a>');\n        expect(sanitize('a<a href=\"</script\">b</a>')).to.be.equal('a<a target=\"_top\">b</a>');\n        expect(sanitize('a<a [onclick]=\"alert\">b</a>')).to.be.equal('a<a>b</a>');\n      });\n    });","file":"unit/test-sanitizer.js","skipped":false,"dir":"test"},{"name":"should output [text] and [class] attributes","suites":["for <amp-bind>"],"updatePoint":{"line":39,"column":51,"index":1637},"line":39,"code":"    it('should output [text] and [class] attributes', () => {\n      expect(sanitize('<p [text]=\"foo\" [class]=\"bar\"></p>')).to.be.equal('<p [text]=\"foo\" [class]=\"bar\" i-amphtml-binding=\"\"></p>');\n    });","file":"unit/test-sanitizer.js","skipped":false,"dir":"test"},{"name":"should add \"i-amphtml-binding\" for data-amp-bind-*","suites":["for <amp-bind>"],"updatePoint":{"line":42,"column":58,"index":1847},"line":42,"code":"    it('should add \"i-amphtml-binding\" for data-amp-bind-*', () => {\n      expect(sanitize('<p data-amp-bind-text=\"foo\"></p>')).to.be.equal('<p data-amp-bind-text=\"foo\" i-amphtml-binding=\"\"></p>');\n    });","file":"unit/test-sanitizer.js","skipped":false,"dir":"test"},{"name":"should NOT rewrite values of binding attributes","suites":["for <amp-bind>"],"updatePoint":{"line":45,"column":55,"index":2050},"line":45,"code":"    it('should NOT rewrite values of binding attributes', () => {\n      // Should not change \"foo.bar\". Adding `target` attribute is not necessary\n      // (but harmless) since <amp-bind> will use rewriteAttributesForElement().\n      expect(sanitize('<a [href]=\"foo.bar\">link</a>')).to.equal('<a [href]=\"foo.bar\" target=\"_top\" i-amphtml-binding=\"\">link</a>');\n    });","file":"unit/test-sanitizer.js","skipped":false,"dir":"test"},{"name":"should output basic text","suites":["sanitizeHtml"],"updatePoint":{"line":74,"column":32,"index":2951},"line":74,"code":"    it('should output basic text', () => {\n      expect(sanitize('abc')).to.be.equal('abc');\n    });","file":"unit/test-sanitizer.js","skipped":false,"dir":"test"},{"name":"should output valid markup","suites":["sanitizeHtml"],"updatePoint":{"line":77,"column":34,"index":3054},"line":77,"code":"    it('should output valid markup', () => {\n      expect(sanitize('<h1>abc</h1>')).to.be.equal('<h1>abc</h1>');\n      expect(sanitize('<h1>a<i>b</i>c</h1>')).to.be.equal('<h1>a<i>b</i>c</h1>');\n      expect(sanitize('<h1>a<i>b</i><br>c</h1>')).to.be.equal('<h1>a<i>b</i><br>c</h1>');\n      expect(sanitize('<h1>a<i>b</i>c' + '<amp-img src=\"http://example.com/1.png\"></amp-img></h1>')).to.be.equal('<h1>a<i>b</i>c' + '<amp-img src=\"http://example.com/1.png\"></amp-img></h1>');\n    });","file":"unit/test-sanitizer.js","skipped":false,"dir":"test"},{"name":"should NOT output security-sensitive markup","suites":["sanitizeHtml"],"updatePoint":{"line":83,"column":51,"index":3556},"line":83,"code":"    it('should NOT output security-sensitive markup', () => {\n      expect(sanitize('a<script>b</script>c')).to.be.equal('ac');\n      expect(sanitize('a<script>b<img>d</script>c')).to.be.equal('ac');\n      expect(sanitize('a<img>c')).to.be.equal('ac');\n      expect(sanitize('a<iframe></iframe>c')).to.be.equal('ac');\n      expect(sanitize('a<frame></frame>c')).to.be.equal('ac');\n      expect(sanitize('a<video></video>c')).to.be.equal('ac');\n      expect(sanitize('a<audio></audio>c')).to.be.equal('ac');\n      expect(sanitize('a<applet></applet>c')).to.be.equal('ac');\n      expect(sanitize('a<link>c')).to.be.equal('ac');\n      expect(sanitize('a<meta>c')).to.be.equal('ac');\n    });","file":"unit/test-sanitizer.js","skipped":false,"dir":"test"},{"name":"should NOT output security-sensitive markup when nested","suites":["sanitizeHtml"],"updatePoint":{"line":95,"column":63,"index":4256},"line":95,"code":"    it('should NOT output security-sensitive markup when nested', () => {\n      expect(sanitize('a<script><style>b</style></script>c')).to.be.equal('ac');\n      expect(sanitize('a<style><iframe>b</iframe></style>c')).to.be.equal('ac');\n      expect(sanitize('a<script><img></script>c')).to.be.equal('ac');\n    });","file":"unit/test-sanitizer.js","skipped":false,"dir":"test"},{"name":"should NOT output security-sensitive markup when broken","suites":["sanitizeHtml"],"updatePoint":{"line":100,"column":63,"index":4570},"line":100,"code":"    it('should NOT output security-sensitive markup when broken', () => {\n      expect(sanitize('a<script>bc')).to.be.equal('a');\n      expect(sanitize('a<SCRIPT>bc')).to.be.equal('a');\n    });","file":"unit/test-sanitizer.js","skipped":false,"dir":"test"},{"name":"should output \"on\" attribute","suites":["sanitizeHtml"],"updatePoint":{"line":104,"column":36,"index":4737},"line":104,"code":"    it('should output \"on\" attribute', () => {\n      expect(sanitize('a<a on=\"tap:AMP.print\">b</a>')).to.be.equal('a<a on=\"tap:AMP.print\">b</a>');\n    });","file":"unit/test-sanitizer.js","skipped":false,"dir":"test"},{"name":"should output \"data-, aria-, and role\" attributes","suites":["sanitizeHtml"],"updatePoint":{"line":107,"column":57,"index":4913},"line":107,"code":"    it('should output \"data-, aria-, and role\" attributes', () => {\n      // Can't use string equality since DOMPurify will reorder attributes.\n      const actual = serialize(sanitize('<a aria-label=\"bar\" data-foo=\"bar\" role=\"button\">b</a>'));\n      const expected = serialize('<a aria-label=\"bar\" data-foo=\"bar\" role=\"button\">b</a>');\n      expectEqualNodeLists(actual, expected);\n    });","file":"unit/test-sanitizer.js","skipped":false,"dir":"test"},{"name":"should output \"href\" attribute","suites":["sanitizeHtml"],"updatePoint":{"line":113,"column":38,"index":5284},"line":113,"code":"    it('should output \"href\" attribute', () => {\n      // Can't use string equality since DOMPurify will reorder attributes.\n      const actual = serialize(sanitize('a<a href=\"http://acme.com/\">b</a>'));\n      const expected = serialize('a<a target=\"_top\" href=\"http://acme.com/\">b</a>');\n      expectEqualNodeLists(actual, expected);\n    });","file":"unit/test-sanitizer.js","skipped":false,"dir":"test"},{"name":"should output \"rel\" attribute","suites":["sanitizeHtml"],"updatePoint":{"line":119,"column":37,"index":5626},"line":119,"code":"    it('should output \"rel\" attribute', () => {\n      // Can't use string equality since DOMPurify will reorder attributes.\n      const actual = serialize(sanitize('a<a href=\"http://acme.com/\" rel=\"amphtml\">b</a>'));\n      const expected = serialize('a<a href=\"http://acme.com/\" rel=\"amphtml\" target=\"_top\">b</a>');\n      expectEqualNodeLists(actual, expected);\n    });","file":"unit/test-sanitizer.js","skipped":false,"dir":"test"},{"name":"should output \"layout\" attribute","suites":["sanitizeHtml"],"updatePoint":{"line":125,"column":40,"index":5999},"line":125,"code":"    it('should output \"layout\" attribute', () => {\n      const img = '<amp-img layout=\"responsive\"></amp-img>';\n      expect(sanitize(img)).to.equal(img);\n    });","file":"unit/test-sanitizer.js","skipped":false,"dir":"test"},{"name":"should output \"media\" attribute","suites":["sanitizeHtml"],"updatePoint":{"line":129,"column":39,"index":6161},"line":129,"code":"    it('should output \"media\" attribute', () => {\n      const img = '<amp-img media=\"(min-width: 650px)\"></amp-img>';\n      expect(sanitize(img)).to.equal(img);\n    });","file":"unit/test-sanitizer.js","skipped":false,"dir":"test"},{"name":"should output \"sizes\" attribute","suites":["sanitizeHtml"],"updatePoint":{"line":133,"column":39,"index":6330},"line":133,"code":"    it('should output \"sizes\" attribute', () => {\n      const img = '<amp-img sizes=\"(min-width: 650px) 50vw, 100vw\"></amp-img>';\n      expect(sanitize(img)).to.equal(img);\n    });","file":"unit/test-sanitizer.js","skipped":false,"dir":"test"},{"name":"should output \"heights\" attribute","suites":["sanitizeHtml"],"updatePoint":{"line":137,"column":41,"index":6513},"line":137,"code":"    it('should output \"heights\" attribute', () => {\n      const img = '<amp-img heights=\"(min-width:500px) 200px, 80%\"></amp-img>';\n      expect(sanitize(img)).to.equal(img);\n    });","file":"unit/test-sanitizer.js","skipped":false,"dir":"test"},{"name":"should default target to _top with href","suites":["sanitizeHtml"],"updatePoint":{"line":141,"column":47,"index":6702},"line":141,"code":"    it('should default target to _top with href', () => {\n      // Can't use string equality since DOMPurify will reorder attributes.\n      const actual = serialize(sanitize('<a href=\"\">a</a><a href=\"\" target=\"\">c</a>'));\n      const expected = serialize('<a href=\"\" target=\"_top\">a</a><a href=\"\" target=\"_top\">c</a>');\n      expectEqualNodeLists(actual, expected);\n    });","file":"unit/test-sanitizer.js","skipped":false,"dir":"test"},{"name":"should NOT default target to _top w/o href","suites":["sanitizeHtml"],"updatePoint":{"line":147,"column":50,"index":7079},"line":147,"code":"    it('should NOT default target to _top w/o href', () => {\n      expect(sanitize('<a>b</a><a target=\"\">d</a>')).to.equal('<a>b</a><a target=\"_top\">d</a>');\n    });","file":"unit/test-sanitizer.js","skipped":false,"dir":"test"},{"name":"should output a valid target","suites":["sanitizeHtml"],"updatePoint":{"line":150,"column":36,"index":7231},"line":150,"code":"    it('should output a valid target', () => {\n      expect(sanitize('<a target=\"_top\">a</a><a target=\"_blank\">b</a>')).to.equal('<a target=\"_top\">a</a><a target=\"_blank\">b</a>');\n    });","file":"unit/test-sanitizer.js","skipped":false,"dir":"test"},{"name":"should output a valid target in different case","suites":["sanitizeHtml"],"updatePoint":{"line":153,"column":54,"index":7437},"line":153,"code":"    it('should output a valid target in different case', () => {\n      expect(sanitize('<a target=\"_TOP\">a</a><a target=\"_BLANK\">b</a>')).to.equal('<a target=\"_top\">a</a><a target=\"_blank\">b</a>');\n    });","file":"unit/test-sanitizer.js","skipped":false,"dir":"test"},{"name":"should override a unallowed target","suites":["sanitizeHtml"],"updatePoint":{"line":156,"column":42,"index":7631},"line":156,"code":"    it('should override a unallowed target', () => {\n      expect(sanitize('<a target=\"_self\">_self</a>' + '<a target=\"_parent\">_parent</a>' + '<a target=\"_other\">_other</a>' + '<a target=\"_OTHER\">_OTHER</a>' + '<a target=\"other\">other</a>')).to.equal('<a target=\"_top\">_self</a>' + '<a target=\"_top\">_parent</a>' + '<a target=\"_top\">_other</a>' + '<a target=\"_top\">_OTHER</a>' + '<a target=\"_top\">other</a>');\n    });","file":"unit/test-sanitizer.js","skipped":false,"dir":"test"},{"name":"should NOT output security-sensitive attributes","suites":["sanitizeHtml"],"updatePoint":{"line":159,"column":55,"index":8063},"line":159,"code":"    it('should NOT output security-sensitive attributes', () => {\n      allowConsoleError(() => {\n        expect(sanitize('a<a onclick=\"alert\">b</a>')).to.be.equal('a<a>b</a>');\n        expect(sanitize('a<a href=\"javascript:alert\">b</a>')).to.be.equal('a<a target=\"_top\">b</a>');\n        expect(sanitize('a<a href=\" JAVASCRIPT:alert\">b</a>')).to.be.equal('a<a target=\"_top\">b</a>');\n        expect(sanitize('a<a href=\"vbscript:alert\">b</a>')).to.be.equal('a<a target=\"_top\">b</a>');\n        expect(sanitize('a<a href=\" VBSCRIPT:alert\">b</a>')).to.be.equal('a<a target=\"_top\">b</a>');\n        expect(sanitize('a<a href=\"data:alert\">b</a>')).to.be.equal('a<a target=\"_top\">b</a>');\n        expect(sanitize('a<a href=\" DATA:alert\">b</a>')).to.be.equal('a<a target=\"_top\">b</a>');\n        expect(sanitize('a<a href=\"blob:alert\">b</a>')).to.be.equal('a<a target=\"_top\">b</a>');\n        expect(sanitize('a<a href=\" BLOB:alert\">b</a>')).to.be.equal('a<a target=\"_top\">b</a>');\n        expect(sanitize('a<a href=\"?__amp_source_origin=foo\">b</a>')).to.be.equal('a<a target=\"_top\">b</a>');\n      });\n    });","file":"unit/test-sanitizer.js","skipped":false,"dir":"test"},{"name":"should NOT output denylisted values for class attributes","suites":["sanitizeHtml"],"updatePoint":{"line":173,"column":64,"index":9170},"line":173,"code":"    it('should NOT output denylisted values for class attributes', () => {\n      allowConsoleError(() => {\n        expect(sanitize('<p class=\"i-amphtml-\">hello</p>')).to.be.equal('<p>hello</p>');\n        expect(sanitize('<p class=\"i-amphtml-class\">hello</p>')).to.be.equal('<p>hello</p>');\n        expect(sanitize('<p class=\"foo-i-amphtml-bar\">hello</p>')).to.be.equal('<p>hello</p>');\n      });\n    });","file":"unit/test-sanitizer.js","skipped":false,"dir":"test"},{"name":"should allow amp-subscriptions attributes","suites":["sanitizeHtml"],"updatePoint":{"line":180,"column":49,"index":9559},"line":180,"code":"    it('should allow amp-subscriptions attributes', () => {\n      expect(sanitize('<div subscriptions-action=\"login\">link</div>')).to.equal('<div subscriptions-action=\"login\">link</div>');\n      expect(sanitize('<div subscriptions-section=\"actions\">link</div>')).to.equal('<div subscriptions-section=\"actions\">link</div>');\n      expect(sanitize('<div subscriptions-actions=\"\">link</div>')).to.equal('<div subscriptions-actions=\"\">link</div>');\n      expect(sanitize('<div subscriptions-display=\"\">link</div>')).to.equal('<div subscriptions-display=\"\">link</div>');\n      expect(sanitize('<div subscriptions-dialog=\"\">link</div>')).to.equal('<div subscriptions-dialog=\"\">link</div>');\n    });","file":"unit/test-sanitizer.js","skipped":false,"dir":"test"},{"name":"should allow source::src with valid protocol","suites":["sanitizeHtml"],"updatePoint":{"line":187,"column":52,"index":10255},"line":187,"code":"    it('should allow source::src with valid protocol', () => {\n      expect(sanitize('<source src=\"https://www.foo.com/\">')).to.equal('<source src=\"https://www.foo.com/\">');\n    });","file":"unit/test-sanitizer.js","skipped":false,"dir":"test"},{"name":"should not allow source::src with invalid protocol","suites":["sanitizeHtml"],"updatePoint":{"line":190,"column":58,"index":10443},"line":190,"code":"    it('should not allow source::src with invalid protocol', () => {\n      expect(sanitize('<source src=\"http://www.foo.com\">')).to.equal('<source src=\"\">');\n      expect(sanitize('<source src=\"<script>bad()</script>\">')).to.equal('<source src=\"\">');\n    });","file":"unit/test-sanitizer.js","skipped":false,"dir":"test"},{"name":"should allow div::template","suites":["sanitizeHtml"],"updatePoint":{"line":194,"column":34,"index":10678},"line":194,"code":"    it('should allow div::template', () => {\n      expect(sanitize('<div template=\"my-template-id\"></div>')).to.equal('<div template=\"my-template-id\"></div>');\n    });","file":"unit/test-sanitizer.js","skipped":false,"dir":"test"},{"name":"should allow form::action-xhr","suites":["sanitizeHtml"],"updatePoint":{"line":197,"column":37,"index":10849},"line":197,"code":"    it('should allow form::action-xhr', () => {\n      expect(sanitize('<form action-xhr=\"https://foo.com/bar\"></form>')).to.equal('<form action-xhr=\"https://foo.com/bar\"></form>');\n    });","file":"unit/test-sanitizer.js","skipped":false,"dir":"test"},{"name":"should allow <amp-form>-related attributes","suites":["sanitizeHtml"],"updatePoint":{"line":200,"column":50,"index":11051},"line":200,"code":"    it('should allow <amp-form>-related attributes', () => {\n      expect(sanitize('<div submitting></div>')).to.equal('<div submitting=\"\"></div>');\n      expect(sanitize('<div submit-success></div>')).to.equal('<div submit-success=\"\"></div>');\n      expect(sanitize('<div submit-error></div>')).to.equal('<div submit-error=\"\"></div>');\n      expect(sanitize('<div verify-error></div>')).to.equal('<div verify-error=\"\"></div>');\n      expect(sanitize('<span visible-when-invalid=\"valueMissing\"></span>')).to.equal('<span visible-when-invalid=\"valueMissing\"></span>');\n      expect(sanitize('<span validation-for=\"form1\"></span>')).to.equal('<span validation-for=\"form1\"></span>');\n    });","file":"unit/test-sanitizer.js","skipped":false,"dir":"test"},{"name":"should allow <amp-lightbox> attributes","suites":["sanitizeHtml"],"updatePoint":{"line":208,"column":46,"index":11736},"line":208,"code":"    it('should allow <amp-lightbox> attributes', () => {\n      expect(sanitize('<amp-lightbox scrollable></amp-lightbox>')).to.equal('<amp-lightbox scrollable=\"\"></amp-lightbox>');\n    });","file":"unit/test-sanitizer.js","skipped":false,"dir":"test"},{"name":"should sanitize invalid attributes","suites":["sanitizeHtml"],"updatePoint":{"line":211,"column":42,"index":11921},"line":211,"code":"    it('should sanitize invalid attributes', () => {\n      allowConsoleError(() => {\n        expect(sanitize('<input type=\"button\">')).to.equal('<input>');\n        expect(sanitize('<input type=\"image\">')).to.equal('<input>');\n      });\n    });","file":"unit/test-sanitizer.js","skipped":false,"dir":"test"},{"name":"should allow for input type file and password","suites":["should sanitize based on AMP doc format type"],"updatePoint":{"line":222,"column":53,"index":12320},"line":222,"code":"    it('should allow for input type file and password', () => {\n      expect(sanitize('<input type=\"file\">')).to.equal('<input type=\"file\">');\n      expect(sanitize('<input type=\"password\">')).to.equal('<input type=\"password\">');\n    });","file":"unit/test-sanitizer.js","skipped":false,"dir":"test"},{"name":"should disallow certain attributes on form for AMP4Email","suites":["should sanitize based on AMP doc format type"],"updatePoint":{"line":226,"column":64,"index":12569},"line":226,"code":"    it('should disallow certain attributes on form for AMP4Email', () => {\n      html.setAttribute('amp4email', '');\n      allowConsoleError(() => {\n        expect(sanitize('<input type=\"password\">')).to.equal('<input>');\n        expect(sanitize('<input type=\"file\">')).to.equal('<input>');\n        expect(sanitize('<form name=\"form-name\"></form>')).to.equal('<form></form>');\n        expect(sanitize('<amp-anim controls></amp-anim>')).to.equal('<amp-anim></amp-anim>');\n      });\n    });","file":"unit/test-sanitizer.js","skipped":false,"dir":"test"},{"name":"should only allow allowlisted AMP elements in AMP4EMAIL","suites":["should sanitize based on AMP doc format type"],"updatePoint":{"line":235,"column":63,"index":13057},"line":235,"code":"    it('should only allow allowlisted AMP elements in AMP4EMAIL', () => {\n      html.setAttribute('amp4email', '');\n      expect(sanitize('<amp-analytics>')).to.equal('');\n      expect(sanitize('<amp-iframe>')).to.equal('');\n      expect(sanitize('<amp-list>')).to.equal('');\n      expect(sanitize('<amp-pixel>')).to.equal('');\n      expect(sanitize('<amp-twitter>')).to.equal('');\n      expect(sanitize('<amp-video>')).to.equal('');\n      expect(sanitize('<amp-youtube>')).to.equal('');\n      expect(sanitize('<amp-accordion>')).to.equal('<amp-accordion>');\n      expect(sanitize('<amp-anim>')).to.equal('<amp-anim>');\n      expect(sanitize('<amp-bind-macro>')).to.equal('<amp-bind-macro>');\n      expect(sanitize('<amp-carousel>')).to.equal('<amp-carousel>');\n      expect(sanitize('<amp-fit-text>')).to.equal('<amp-fit-text>');\n      expect(sanitize('<amp-img>')).to.equal('<amp-img>');\n      expect(sanitize('<amp-layout>')).to.equal('<amp-layout>');\n      expect(sanitize('<amp-selector>')).to.equal('<amp-selector>');\n      expect(sanitize('<amp-sidebar>')).to.equal('<amp-sidebar>');\n      expect(sanitize('<amp-timeago>')).to.equal('<amp-timeago>');\n    });","file":"unit/test-sanitizer.js","skipped":false,"dir":"test"},{"name":"should output basic text","suites":["sanitizeTagsForTripleMustache"],"updatePoint":{"line":257,"column":32,"index":14250},"line":257,"code":"    it('should output basic text', () => {\n      expect(sanitizeTagsForTripleMustache('abc', documentEl)).to.be.equal('abc');\n    });","file":"unit/test-sanitizer.js","skipped":false,"dir":"test"},{"name":"should output valid markup","suites":["sanitizeTagsForTripleMustache"],"updatePoint":{"line":260,"column":34,"index":14386},"line":260,"code":"    it('should output valid markup', () => {\n      expect(sanitizeTagsForTripleMustache('<b>abc</b>', documentEl)).to.be.equal('<b>abc</b>');\n      expect(sanitizeTagsForTripleMustache('<b>ab<br>c</b>', documentEl)).to.be.equal('<b>ab<br>c</b>');\n      expect(sanitizeTagsForTripleMustache('<b>a<i>b</i>c</b>', documentEl)).to.be.equal('<b>a<i>b</i>c</b>');\n      const markupWithClassAttribute = '<p class=\"some-class\">heading</p>';\n      expect(sanitizeTagsForTripleMustache(markupWithClassAttribute, documentEl)).to.be.equal(markupWithClassAttribute);\n      const markupWithClassesAttribute = '<div class=\"some-class another\"><span>heading</span></div>';\n      expect(sanitizeTagsForTripleMustache(markupWithClassesAttribute, documentEl)).to.be.equal(markupWithClassesAttribute);\n      const markupParagraph = '<p class=\"valid-class\">paragraph</p>';\n      expect(sanitizeTagsForTripleMustache(markupParagraph, documentEl)).to.be.equal(markupParagraph);\n    });","file":"unit/test-sanitizer.js","skipped":false,"dir":"test"},{"name":"should NOT output non-allowlisted markup","suites":["sanitizeTagsForTripleMustache"],"updatePoint":{"line":271,"column":48,"index":15364},"line":271,"code":"    it('should NOT output non-allowlisted markup', () => {\n      expect(sanitizeTagsForTripleMustache('a<style>b</style>c', documentEl)).to.be.equal('ac');\n      expect(sanitizeTagsForTripleMustache('a<img>c', documentEl)).to.be.equal('ac');\n    });","file":"unit/test-sanitizer.js","skipped":false,"dir":"test"},{"name":"should not allowlist amp-img element for AMP4Email","suites":["sanitizeTagsForTripleMustache"],"updatePoint":{"line":275,"column":58,"index":15624},"line":275,"code":"    it('should not allowlist amp-img element for AMP4Email', () => {\n      html.setAttribute('amp4email', '');\n      expect(sanitizeTagsForTripleMustache('a<amp-img></amp-img>c', documentEl)).to.be.equal('ac');\n    });","file":"unit/test-sanitizer.js","skipped":false,"dir":"test"},{"name":"should compensate for broken markup","suites":["sanitizeTagsForTripleMustache"],"updatePoint":{"line":279,"column":43,"index":15828},"line":279,"code":"    it('should compensate for broken markup', () => {\n      expect(sanitizeTagsForTripleMustache('<b>a<i>b', documentEl)).to.be.equal('<b>a<i>b</i></b>');\n    });","file":"unit/test-sanitizer.js","skipped":false,"dir":"test"},{"name":"should allow valid styles","suites":["sanitizeTagsForTripleMustache","should sanitize `style` attribute"],"updatePoint":{"line":283,"column":35,"index":16041},"line":283,"code":"      it('should allow valid styles', () => {\n        expect(sanitize('<div style=\"color:blue\">Test</div>')).to.equal('<div style=\"color:blue\">Test</div>');\n      });","file":"unit/test-sanitizer.js","skipped":false,"dir":"test"},{"name":"should ignore styles containing `!important`","suites":["sanitizeTagsForTripleMustache","should sanitize `style` attribute"],"updatePoint":{"line":286,"column":54,"index":16227},"line":286,"code":"      it('should ignore styles containing `!important`', () => {\n        allowConsoleError(() => {\n          expect(sanitize('<div style=\"color:blue!important\">Test</div>')).to.equal('<div>Test</div>');\n        });\n      });","file":"unit/test-sanitizer.js","skipped":false,"dir":"test"},{"name":"should ignore styles containing `position:fixed`","suites":["sanitizeTagsForTripleMustache","should sanitize `style` attribute"],"updatePoint":{"line":291,"column":58,"index":16456},"line":291,"code":"      it('should ignore styles containing `position:fixed`', () => {\n        allowConsoleError(() => {\n          expect(sanitize('<div style=\"position:fixed\">Test</div>')).to.equal('<div>Test</div>');\n        });\n      });","file":"unit/test-sanitizer.js","skipped":false,"dir":"test"},{"name":"should ignore styles containing `position:sticky`","suites":["sanitizeTagsForTripleMustache","should sanitize `style` attribute"],"updatePoint":{"line":296,"column":59,"index":16680},"line":296,"code":"      it('should ignore styles containing `position:sticky`', () => {\n        allowConsoleError(() => {\n          expect(sanitize('<div style=\"position:sticky\">Test</div>')).to.equal('<div>Test</div>');\n        });\n      });","file":"unit/test-sanitizer.js","skipped":false,"dir":"test"},{"name":"should schedule a deferredMount element","suites":["schedule"],"updatePoint":{"line":54,"column":47,"index":2001},"line":54,"code":"    it('should schedule a deferredMount element', () => {\n      const element = createAmpElement({\n        deferredMount: true\n      });\n      scheduler.schedule(element);\n      expect(intersectionObserverStub.isObserved(element)).to.be.true;\n      scheduler.unschedule(element);\n      expect(intersectionObserverStub.isObserved(element)).to.be.false;\n    });","file":"unit/test-scheduler.js","skipped":false,"dir":"test"},{"name":"should use the correct observer parameters","suites":["schedule"],"updatePoint":{"line":63,"column":50,"index":2364},"line":63,"code":"    it('should use the correct observer parameters', () => {\n      const element = createAmpElement({\n        deferredMount: true\n      });\n      scheduler.schedule(element);\n      expect(intersectionObserverStub.isObserved(element, {\n        root: doc,\n        rootMargin: '250% 31.25%',\n        thresholds: [0]\n      })).to.be.true;\n    });","file":"unit/test-scheduler.js","skipped":false,"dir":"test"},{"name":"should schedule a non-deferredMount element","suites":["schedule"],"updatePoint":{"line":74,"column":51,"index":2708},"line":74,"code":"    it('should schedule a non-deferredMount element', () => {\n      const element = createAmpElement({\n        deferredMount: false\n      });\n      scheduler.schedule(element);\n      expect(intersectionObserverStub.isObserved(element)).to.be.false;\n    });","file":"unit/test-scheduler.js","skipped":false,"dir":"test"},{"name":"should unschedule when built","suites":["schedule"],"updatePoint":{"line":81,"column":36,"index":2950},"line":81,"code":"    it('should unschedule when built', async () => {\n      const element = createAmpElement({\n        deferredMount: true\n      });\n      scheduler.schedule(element);\n      expect(intersectionObserverStub.isObserved(element)).to.be.true;\n      await setAmpdocReady();\n      intersectionObserverStub.notifySync({\n        target: element,\n        isIntersecting: true\n      });\n      expect(intersectionObserverStub.isObserved(element)).to.be.false;\n    });","file":"unit/test-scheduler.js","skipped":false,"dir":"test"},{"name":"should NOT signal READY_SCAN_SIGNAL until document is ready","suites":["schedule"],"updatePoint":{"line":94,"column":67,"index":3437},"line":94,"code":"    it('should NOT signal READY_SCAN_SIGNAL until document is ready', async () => {\n      ampdoc.signals().reset(READY_SCAN_SIGNAL);\n      const element = createAmpElement({\n        deferredMount: false\n      });\n      scheduler.schedule(element);\n      expect(ampdoc.signals().get(READY_SCAN_SIGNAL)).to.be.null;\n      clock.tick(50);\n      expect(ampdoc.signals().get(READY_SCAN_SIGNAL)).to.be.null;\n    });","file":"unit/test-scheduler.js","skipped":false,"dir":"test"},{"name":"should signal READY_SCAN_SIGNAL after document ready","suites":["schedule"],"updatePoint":{"line":104,"column":60,"index":3840},"line":104,"code":"    it('should signal READY_SCAN_SIGNAL after document ready', async () => {\n      ampdoc.signals().reset(READY_SCAN_SIGNAL);\n      await setAmpdocReady();\n      clock.tick(50);\n      expect(ampdoc.signals().get(READY_SCAN_SIGNAL)).to.exist;\n    });","file":"unit/test-scheduler.js","skipped":false,"dir":"test"},{"name":"should build when document ready","suites":["wait for parsing"],"updatePoint":{"line":112,"column":40,"index":4115},"line":112,"code":"    it('should build when document ready', async () => {\n      await setAmpdocReady();\n      const element = createAmpElement({\n        deferredMount: false\n      });\n      scheduler.schedule(element);\n      clock.tick(1);\n      expect(element.mountInternal).to.be.calledOnce;\n    });","file":"unit/test-scheduler.js","skipped":false,"dir":"test"},{"name":"should build when document becomes ready","suites":["wait for parsing"],"updatePoint":{"line":121,"column":48,"index":4408},"line":121,"code":"    it('should build when document becomes ready', async () => {\n      const element = createAmpElement({\n        deferredMount: false\n      });\n      scheduler.schedule(element);\n      clock.tick(1);\n      expect(element.mountInternal).to.be.not.called;\n      await setAmpdocReady();\n      clock.tick(1);\n      expect(element.mountInternal).to.be.calledOnce;\n    });","file":"unit/test-scheduler.js","skipped":false,"dir":"test"},{"name":"should build asap when document ready","suites":["wait for parsing"],"updatePoint":{"line":132,"column":45,"index":4773},"line":132,"code":"    it('should build asap when document ready', async () => {\n      await setAmpdocReady();\n      const element = createAmpElement({\n        deferredMount: true\n      });\n      scheduler.scheduleAsap(element);\n      clock.tick(1);\n      expect(element.mountInternal).to.be.calledOnce;\n    });","file":"unit/test-scheduler.js","skipped":false,"dir":"test"},{"name":"should build asap when document becomes ready","suites":["wait for parsing"],"updatePoint":{"line":141,"column":53,"index":5074},"line":141,"code":"    it('should build asap when document becomes ready', async () => {\n      const element = createAmpElement({\n        deferredMount: true\n      });\n      scheduler.scheduleAsap(element);\n      clock.tick(1);\n      expect(element.mountInternal).to.be.not.called;\n      await setAmpdocReady();\n      clock.tick(1);\n      expect(element.mountInternal).to.be.calledOnce;\n    });","file":"unit/test-scheduler.js","skipped":false,"dir":"test"},{"name":"should build when has next siblings","suites":["wait for parsing"],"updatePoint":{"line":152,"column":43,"index":5440},"line":152,"code":"    it('should build when has next siblings', async () => {\n      const element = createAmpElement({\n        deferredMount: false\n      });\n      doc.body.appendChild(element);\n      scheduler.schedule(element);\n      clock.tick(1);\n      expect(element.mountInternal).to.not.be.called;\n      const element2 = createAmpElement({\n        deferredMount: false\n      });\n      doc.body.appendChild(element2);\n      scheduler.schedule(element2);\n      clock.tick(1);\n      expect(element.mountInternal).to.be.calledOnce;\n      expect(element2.mountInternal).to.not.be.called;\n    });","file":"unit/test-scheduler.js","skipped":false,"dir":"test"},{"name":"should build asap when has next siblings","suites":["wait for parsing"],"updatePoint":{"line":169,"column":48,"index":6025},"line":169,"code":"    it('should build asap when has next siblings', async () => {\n      const element = createAmpElement({\n        deferredMount: false\n      });\n      doc.body.appendChild(element);\n      scheduler.scheduleAsap(element);\n      clock.tick(1);\n      expect(element.mountInternal).to.not.be.called;\n      const element2 = createAmpElement({\n        deferredMount: false\n      });\n      doc.body.appendChild(element2);\n      scheduler.scheduleAsap(element2);\n      clock.tick(1);\n      expect(element.mountInternal).to.be.calledOnce;\n      expect(element2.mountInternal).to.not.be.called;\n    });","file":"unit/test-scheduler.js","skipped":false,"dir":"test"},{"name":"should wait the deferred even when parsed","suites":["wait for parsing"],"updatePoint":{"line":186,"column":49,"index":6619},"line":186,"code":"    it('should wait the deferred even when parsed', async () => {\n      await setAmpdocReady();\n      const element = createAmpElement({\n        deferredMount: true\n      });\n      doc.body.appendChild(element);\n      scheduler.schedule(element);\n      clock.tick(1);\n      expect(element.mountInternal).to.not.be.called;\n    });","file":"unit/test-scheduler.js","skipped":false,"dir":"test"},{"name":"should build if prerenderAllowed","suites":["wait for document visibility","visibility state: prerender"],"updatePoint":{"line":203,"column":42,"index":7177},"line":203,"code":"      it('should build if prerenderAllowed', () => {\n        const element = createAmpElement({\n          deferredMount: false,\n          prerenderAllowed: true\n        });\n        scheduler.schedule(element);\n        clock.tick(1);\n        expect(element.mountInternal).to.be.calledOnce;\n      });","file":"unit/test-scheduler.js","skipped":false,"dir":"test"},{"name":"should build asap if prerenderAllowed","suites":["wait for document visibility","visibility state: prerender"],"updatePoint":{"line":212,"column":47,"index":7481},"line":212,"code":"      it('should build asap if prerenderAllowed', () => {\n        const element = createAmpElement({\n          deferredMount: true,\n          prerenderAllowed: true\n        });\n        scheduler.scheduleAsap(element);\n        clock.tick(1);\n        expect(element.mountInternal).to.be.calledOnce;\n      });","file":"unit/test-scheduler.js","skipped":false,"dir":"test"},{"name":"should NOT build if not prerenderAllowed","suites":["wait for document visibility","visibility state: prerender"],"updatePoint":{"line":221,"column":50,"index":7791},"line":221,"code":"      it('should NOT build if not prerenderAllowed', () => {\n        const element = createAmpElement({\n          deferredMount: false,\n          prerenderAllowed: false\n        });\n        scheduler.schedule(element);\n        clock.tick(1);\n        expect(element.mountInternal).to.be.not.called;\n      });","file":"unit/test-scheduler.js","skipped":false,"dir":"test"},{"name":"should NOT build asap if not prerenderAllowed","suites":["wait for document visibility","visibility state: prerender"],"updatePoint":{"line":230,"column":55,"index":8104},"line":230,"code":"      it('should NOT build asap if not prerenderAllowed', () => {\n        const element = createAmpElement({\n          deferredMount: true,\n          prerenderAllowed: false\n        });\n        scheduler.scheduleAsap(element);\n        clock.tick(1);\n        expect(element.mountInternal).to.be.not.called;\n      });","file":"unit/test-scheduler.js","skipped":false,"dir":"test"},{"name":"should build when becomes preview if previewAllowed","suites":["wait for document visibility","visibility state: prerender"],"updatePoint":{"line":239,"column":61,"index":8426},"line":239,"code":"      it('should build when becomes preview if previewAllowed', () => {\n        const element = createAmpElement({\n          prerenderAllowed: false,\n          previewAllowed: true\n        });\n        scheduler.schedule(element);\n        clock.tick(1);\n        expect(element.mountInternal).to.not.be.called;\n        ampdoc.overrideVisibilityState('preview');\n        clock.tick(1);\n        expect(element.mountInternal).to.be.calledOnce;\n      });","file":"unit/test-scheduler.js","skipped":false,"dir":"test"},{"name":"should NOT build when becomes preview if not previewAllowed","suites":["wait for document visibility","visibility state: prerender"],"updatePoint":{"line":251,"column":69,"index":8883},"line":251,"code":"      it('should NOT build when becomes preview if not previewAllowed', () => {\n        const element = createAmpElement({\n          prerenderAllowed: false,\n          previewAllowed: false\n        });\n        scheduler.schedule(element);\n        clock.tick(1);\n        expect(element.mountInternal).to.not.be.called;\n        ampdoc.overrideVisibilityState('preview');\n        clock.tick(1);\n        expect(element.mountInternal).to.not.be.called;\n      });","file":"unit/test-scheduler.js","skipped":false,"dir":"test"},{"name":"should build when becomes visible","suites":["wait for document visibility","visibility state: prerender"],"updatePoint":{"line":263,"column":43,"index":9315},"line":263,"code":"      it('should build when becomes visible', () => {\n        const element = createAmpElement({\n          prerenderAllowed: false\n        });\n        scheduler.schedule(element);\n        clock.tick(1);\n        expect(element.mountInternal).to.not.be.called;\n        ampdoc.overrideVisibilityState('visible');\n        clock.tick(1);\n        expect(element.mountInternal).to.be.calledOnce;\n      });","file":"unit/test-scheduler.js","skipped":false,"dir":"test"},{"name":"should build when becomes hidden","suites":["wait for document visibility","visibility state: prerender"],"updatePoint":{"line":274,"column":42,"index":9713},"line":274,"code":"      it('should build when becomes hidden', () => {\n        const element = createAmpElement({\n          prerenderAllowed: false\n        });\n        scheduler.schedule(element);\n        clock.tick(1);\n        expect(element.mountInternal).to.not.be.called;\n        ampdoc.overrideVisibilityState('hidden');\n        clock.tick(1);\n        expect(element.mountInternal).to.be.calledOnce;\n      });","file":"unit/test-scheduler.js","skipped":false,"dir":"test"},{"name":"should NOT build when becomes paused or inactive","suites":["wait for document visibility","visibility state: prerender"],"updatePoint":{"line":285,"column":58,"index":10126},"line":285,"code":"      it('should NOT build when becomes paused or inactive', () => {\n        const element = createAmpElement({\n          prerenderAllowed: false\n        });\n        scheduler.schedule(element);\n        clock.tick(1);\n        expect(element.mountInternal).to.not.be.called;\n        ampdoc.overrideVisibilityState('paused');\n        clock.tick(1);\n        expect(element.mountInternal).to.not.be.called;\n        ampdoc.overrideVisibilityState('inactive');\n        clock.tick(1);\n        expect(element.mountInternal).to.not.be.called;\n      });","file":"unit/test-scheduler.js","skipped":false,"dir":"test"},{"name":"should NOT build when scheduled in paused","suites":["wait for document visibility","visibility state: prerender"],"updatePoint":{"line":299,"column":51,"index":10663},"line":299,"code":"      it('should NOT build when scheduled in paused', () => {\n        ampdoc.overrideVisibilityState('paused');\n        const element = createAmpElement({\n          prerenderAllowed: false\n        });\n        scheduler.schedule(element);\n        clock.tick(1);\n        expect(element.mountInternal).to.not.be.called;\n        ampdoc.overrideVisibilityState('visible');\n        clock.tick(1);\n        expect(element.mountInternal).to.be.calledOnce;\n      });","file":"unit/test-scheduler.js","skipped":false,"dir":"test"},{"name":"should NOT build when scheduled in inactive","suites":["wait for document visibility","visibility state: prerender"],"updatePoint":{"line":311,"column":53,"index":11122},"line":311,"code":"      it('should NOT build when scheduled in inactive', () => {\n        ampdoc.overrideVisibilityState('inactive');\n        const element = createAmpElement({\n          prerenderAllowed: false\n        });\n        scheduler.schedule(element);\n        clock.tick(1);\n        expect(element.mountInternal).to.not.be.called;\n        ampdoc.overrideVisibilityState('visible');\n        clock.tick(1);\n        expect(element.mountInternal).to.be.calledOnce;\n      });","file":"unit/test-scheduler.js","skipped":false,"dir":"test"},{"name":"should build if previewAllowed","suites":["wait for document visibility","visibility state: preview"],"updatePoint":{"line":329,"column":40,"index":11752},"line":329,"code":"      it('should build if previewAllowed', () => {\n        const element = createAmpElement({\n          deferredMount: false,\n          previewAllowed: true\n        });\n        scheduler.schedule(element);\n        clock.tick(1);\n        expect(element.mountInternal).to.be.calledOnce;\n      });","file":"unit/test-scheduler.js","skipped":false,"dir":"test"},{"name":"should build asap if previewAllowed","suites":["wait for document visibility","visibility state: preview"],"updatePoint":{"line":338,"column":45,"index":12052},"line":338,"code":"      it('should build asap if previewAllowed', () => {\n        const element = createAmpElement({\n          deferredMount: true,\n          previewAllowed: true\n        });\n        scheduler.scheduleAsap(element);\n        clock.tick(1);\n        expect(element.mountInternal).to.be.calledOnce;\n      });","file":"unit/test-scheduler.js","skipped":false,"dir":"test"},{"name":"should NOT build if not previewAllowed","suites":["wait for document visibility","visibility state: preview"],"updatePoint":{"line":347,"column":48,"index":12358},"line":347,"code":"      it('should NOT build if not previewAllowed', () => {\n        const element = createAmpElement({\n          deferredMount: false,\n          previewAllowed: false\n        });\n        scheduler.schedule(element);\n        clock.tick(1);\n        expect(element.mountInternal).to.be.not.called;\n      });","file":"unit/test-scheduler.js","skipped":false,"dir":"test"},{"name":"should NOT build asap if not previewAllowed","suites":["wait for document visibility","visibility state: preview"],"updatePoint":{"line":356,"column":53,"index":12667},"line":356,"code":"      it('should NOT build asap if not previewAllowed', () => {\n        const element = createAmpElement({\n          deferredMount: true,\n          previewAllowed: false\n        });\n        scheduler.scheduleAsap(element);\n        clock.tick(1);\n        expect(element.mountInternal).to.be.not.called;\n      });","file":"unit/test-scheduler.js","skipped":false,"dir":"test"},{"name":"should build when becomes prerender if prerenderAllowed","suites":["wait for document visibility","visibility state: preview"],"updatePoint":{"line":365,"column":65,"index":12991},"line":365,"code":"      it('should build when becomes prerender if prerenderAllowed', () => {\n        const element = createAmpElement({\n          prerenderAllowed: true,\n          previewAllowed: false\n        });\n        scheduler.schedule(element);\n        clock.tick(1);\n        expect(element.mountInternal).to.not.be.called;\n        ampdoc.overrideVisibilityState('prerender');\n        clock.tick(1);\n        expect(element.mountInternal).to.be.calledOnce;\n      });","file":"unit/test-scheduler.js","skipped":false,"dir":"test"},{"name":"should NOT build when becomes prerender if not prerenderAllowed","suites":["wait for document visibility","visibility state: preview"],"updatePoint":{"line":377,"column":73,"index":13454},"line":377,"code":"      it('should NOT build when becomes prerender if not prerenderAllowed', () => {\n        const element = createAmpElement({\n          prerenderAllowed: false,\n          previewAllowed: false\n        });\n        scheduler.schedule(element);\n        clock.tick(1);\n        expect(element.mountInternal).to.not.be.called;\n        ampdoc.overrideVisibilityState('prerender');\n        clock.tick(1);\n        expect(element.mountInternal).to.not.be.called;\n      });","file":"unit/test-scheduler.js","skipped":false,"dir":"test"},{"name":"should build when becomes visible","suites":["wait for document visibility","visibility state: preview"],"updatePoint":{"line":389,"column":43,"index":13888},"line":389,"code":"      it('should build when becomes visible', () => {\n        const element = createAmpElement({\n          previewAllowed: false\n        });\n        scheduler.schedule(element);\n        clock.tick(1);\n        expect(element.mountInternal).to.not.be.called;\n        ampdoc.overrideVisibilityState('visible');\n        clock.tick(1);\n        expect(element.mountInternal).to.be.calledOnce;\n      });","file":"unit/test-scheduler.js","skipped":false,"dir":"test"},{"name":"should build when becomes hidden","suites":["wait for document visibility","visibility state: preview"],"updatePoint":{"line":400,"column":42,"index":14284},"line":400,"code":"      it('should build when becomes hidden', () => {\n        const element = createAmpElement({\n          previewAllowed: false\n        });\n        scheduler.schedule(element);\n        clock.tick(1);\n        expect(element.mountInternal).to.not.be.called;\n        ampdoc.overrideVisibilityState('hidden');\n        clock.tick(1);\n        expect(element.mountInternal).to.be.calledOnce;\n      });","file":"unit/test-scheduler.js","skipped":false,"dir":"test"},{"name":"should NOT build when becomes paused or inactive","suites":["wait for document visibility","visibility state: preview"],"updatePoint":{"line":411,"column":58,"index":14695},"line":411,"code":"      it('should NOT build when becomes paused or inactive', () => {\n        const element = createAmpElement({\n          previewAllowed: false\n        });\n        scheduler.schedule(element);\n        clock.tick(1);\n        expect(element.mountInternal).to.not.be.called;\n        ampdoc.overrideVisibilityState('paused');\n        clock.tick(1);\n        expect(element.mountInternal).to.not.be.called;\n        ampdoc.overrideVisibilityState('inactive');\n        clock.tick(1);\n        expect(element.mountInternal).to.not.be.called;\n      });","file":"unit/test-scheduler.js","skipped":false,"dir":"test"},{"name":"should NOT build when scheduled in paused","suites":["wait for document visibility","visibility state: preview"],"updatePoint":{"line":425,"column":51,"index":15230},"line":425,"code":"      it('should NOT build when scheduled in paused', () => {\n        ampdoc.overrideVisibilityState('paused');\n        const element = createAmpElement({\n          previewAllowed: false\n        });\n        scheduler.schedule(element);\n        clock.tick(1);\n        expect(element.mountInternal).to.not.be.called;\n        ampdoc.overrideVisibilityState('visible');\n        clock.tick(1);\n        expect(element.mountInternal).to.be.calledOnce;\n      });","file":"unit/test-scheduler.js","skipped":false,"dir":"test"},{"name":"should NOT build when scheduled in inactive","suites":["wait for document visibility","visibility state: preview"],"updatePoint":{"line":437,"column":53,"index":15687},"line":437,"code":"      it('should NOT build when scheduled in inactive', () => {\n        ampdoc.overrideVisibilityState('inactive');\n        const element = createAmpElement({\n          previewAllowed: false\n        });\n        scheduler.schedule(element);\n        clock.tick(1);\n        expect(element.mountInternal).to.not.be.called;\n        ampdoc.overrideVisibilityState('visible');\n        clock.tick(1);\n        expect(element.mountInternal).to.be.calledOnce;\n      });","file":"unit/test-scheduler.js","skipped":false,"dir":"test"},{"name":"should wait for intersection when deferred","suites":["wait for intersection"],"updatePoint":{"line":455,"column":50,"index":16268},"line":455,"code":"    it('should wait for intersection when deferred', () => {\n      const element = createAmpElement({\n        deferredMount: true\n      });\n      scheduler.schedule(element);\n      expect(intersectionObserverStub.isObserved(element)).to.be.true;\n      clock.tick(1);\n      expect(element.mountInternal).to.not.be.called;\n      intersectionObserverStub.notifySync({\n        target: element,\n        isIntersecting: false\n      });\n      clock.tick(1);\n      expect(element.mountInternal).to.not.be.called;\n      intersectionObserverStub.notifySync({\n        target: element,\n        isIntersecting: true\n      });\n      clock.tick(1);\n      expect(element.mountInternal).to.be.calledOnce;\n    });","file":"unit/test-scheduler.js","skipped":false,"dir":"test"},{"name":"should not wait for intersection when not deferred","suites":["wait for intersection"],"updatePoint":{"line":476,"column":58,"index":16972},"line":476,"code":"    it('should not wait for intersection when not deferred', () => {\n      const element = createAmpElement({\n        deferredMount: false\n      });\n      scheduler.schedule(element);\n      expect(intersectionObserverStub.isObserved(element)).to.be.false;\n      clock.tick(1);\n      expect(element.mountInternal).to.be.calledOnce;\n    });","file":"unit/test-scheduler.js","skipped":false,"dir":"test"},{"name":"should not wait for intersection when asap","suites":["wait for intersection"],"updatePoint":{"line":485,"column":50,"index":17303},"line":485,"code":"    it('should not wait for intersection when asap', () => {\n      const element = createAmpElement({\n        deferredMount: true\n      });\n      scheduler.scheduleAsap(element);\n      expect(intersectionObserverStub.isObserved(element)).to.be.false;\n      clock.tick(1);\n      expect(element.mountInternal).to.be.calledOnce;\n    });","file":"unit/test-scheduler.js","skipped":false,"dir":"test"},{"name":"should run deferred CONTENT at high priority","suites":["priority"],"updatePoint":{"line":499,"column":52,"index":17743},"line":499,"code":"    it('should run deferred CONTENT at high priority', () => {\n      const element = createAmpElement({\n        deferredMount: true\n      });\n      scheduler.schedule(element);\n      intersectionObserverStub.notifySync({\n        target: element,\n        isIntersecting: true\n      });\n      clock.tick(1);\n      expect(element.mountInternal).to.be.calledOnce;\n    });","file":"unit/test-scheduler.js","skipped":false,"dir":"test"},{"name":"should run deferred METADATA at low priority","suites":["priority"],"updatePoint":{"line":511,"column":52,"index":18111},"line":511,"code":"    it('should run deferred METADATA at low priority', () => {\n      const element = createAmpElement({\n        deferredMount: true,\n        buildPriority: LayoutPriority_Enum.METADATA\n      });\n      scheduler.schedule(element);\n      intersectionObserverStub.notifySync({\n        target: element,\n        isIntersecting: true\n      });\n      clock.tick(1);\n      expect(element.mountInternal).to.not.be.called;\n      clock.tick(100);\n      expect(element.mountInternal).to.be.calledOnce;\n    });","file":"unit/test-scheduler.js","skipped":false,"dir":"test"},{"name":"should run non-deferred METADATA at low priority","suites":["priority"],"updatePoint":{"line":526,"column":56,"index":18613},"line":526,"code":"    it('should run non-deferred METADATA at low priority', () => {\n      const element = createAmpElement({\n        deferredMount: false,\n        buildPriority: LayoutPriority_Enum.METADATA\n      });\n      scheduler.schedule(element);\n      clock.tick(1);\n      expect(element.mountInternal).to.not.be.called;\n      clock.tick(100);\n      expect(element.mountInternal).to.be.calledOnce;\n    });","file":"unit/test-scheduler.js","skipped":false,"dir":"test"},{"name":"should run asap METADATA at high priority","suites":["priority"],"updatePoint":{"line":537,"column":49,"index":19001},"line":537,"code":"    it('should run asap METADATA at high priority', () => {\n      const element = createAmpElement({\n        deferredMount: false,\n        buildPriority: LayoutPriority_Enum.METADATA\n      });\n      scheduler.scheduleAsap(element);\n      clock.tick(1);\n      expect(element.mountInternal).to.be.calledOnce;\n    });","file":"unit/test-scheduler.js","skipped":false,"dir":"test"},{"name":"should be observed by the document observer","suites":["container"],"updatePoint":{"line":578,"column":51,"index":20284},"line":578,"code":"    it('should be observed by the document observer', () => {\n      scheduler.schedule(topElement);\n      scheduler.schedule(containerElement);\n      scheduler.schedule(containerElementChild);\n\n      // Observed on the document observer.\n      expect(intersectionObserverStub.isObserved(topElement, {\n        root: doc\n      })).to.be.true;\n      expect(intersectionObserverStub.isObserved(containerElement, {\n        root: doc\n      })).to.be.true;\n      expect(intersectionObserverStub.isObserved(containerElementChild, {\n        root: doc\n      })).to.be.true;\n    });","file":"unit/test-scheduler.js","skipped":false,"dir":"test"},{"name":"should be observed and unobserved by the container observer","suites":["container"],"updatePoint":{"line":594,"column":67,"index":20872},"line":594,"code":"    it('should be observed and unobserved by the container observer', () => {\n      scheduler.schedule(topElement);\n      scheduler.schedule(containerElement);\n      scheduler.schedule(containerElementChild);\n      scheduler.schedule(container);\n\n      // Set container.\n      scheduler.setContainer(container);\n\n      // Observed on the document observer.\n      expect(intersectionObserverStub.isObserved(topElement, {\n        root: doc\n      })).to.be.true;\n      expect(intersectionObserverStub.isObserved(containerElement, {\n        root: doc\n      })).to.be.true;\n      expect(intersectionObserverStub.isObserved(containerElementChild, {\n        root: doc\n      })).to.be.true;\n\n      // A contained element is observed by the container.\n      expect(intersectionObserverStub.isObserved(containerElement, {\n        root: container\n      })).to.be.true;\n      expect(intersectionObserverStub.isObserved(containerElementChild, {\n        root: container\n      })).to.be.true;\n      // Not observed by the container because not contained by it.\n      expect(intersectionObserverStub.isObserved(topElement, {\n        root: container\n      })).to.be.false;\n\n      // Should not observe the container itself on the container observer.\n      expect(intersectionObserverStub.isObserved(container, {\n        root: container\n      })).to.be.false;\n      expect(intersectionObserverStub.isObserved(container, {\n        root: doc\n      })).to.be.true;\n\n      // Remove container.\n      scheduler.removeContainer(container);\n      expect(intersectionObserverStub.isObserved(containerElement, {\n        root: container\n      })).to.be.false;\n      expect(intersectionObserverStub.isObserved(containerElementChild, {\n        root: container\n      })).to.be.false;\n\n      // Set container again.\n      scheduler.setContainer(container);\n      expect(intersectionObserverStub.isObserved(containerElement, {\n        root: container\n      })).to.be.true;\n      expect(intersectionObserverStub.isObserved(containerElementChild, {\n        root: container\n      })).to.be.true;\n    });","file":"unit/test-scheduler.js","skipped":false,"dir":"test"},{"name":"should be observed with scroller when specified","suites":["container"],"updatePoint":{"line":652,"column":55,"index":22928},"line":652,"code":"    it('should be observed with scroller when specified', () => {\n      scheduler.schedule(topElement);\n      scheduler.schedule(containerElement);\n      scheduler.schedule(containerElementChild);\n      scheduler.schedule(container);\n\n      // Set container.\n      scheduler.setContainer(container, containerScroller);\n\n      // Observed on the document observer.\n      expect(intersectionObserverStub.isObserved(topElement, {\n        root: doc\n      })).to.be.true;\n      expect(intersectionObserverStub.isObserved(containerElement, {\n        root: doc\n      })).to.be.true;\n      expect(intersectionObserverStub.isObserved(containerElementChild, {\n        root: doc\n      })).to.be.true;\n\n      // A contained element is observed by the container.\n      expect(intersectionObserverStub.isObserved(containerElement, {\n        root: containerScroller\n      })).to.be.true;\n      expect(intersectionObserverStub.isObserved(containerElementChild, {\n        root: containerScroller\n      })).to.be.true;\n      // Not observed by the container because not contained by it.\n      expect(intersectionObserverStub.isObserved(topElement, {\n        root: containerScroller\n      })).to.be.false;\n\n      // No observers for the container itself.\n      expect(intersectionObserverStub.isObserved(containerElement, {\n        root: container\n      })).to.be.false;\n      expect(intersectionObserverStub.isObserved(containerElementChild, {\n        root: container\n      })).to.be.false;\n      expect(intersectionObserverStub.isObserved(topElement, {\n        root: container\n      })).to.be.false;\n\n      // Should not observe the container itself on the container observer.\n      expect(intersectionObserverStub.isObserved(container, {\n        root: containerScroller\n      })).to.be.false;\n      expect(intersectionObserverStub.isObserved(container, {\n        root: doc\n      })).to.be.true;\n    });","file":"unit/test-scheduler.js","skipped":false,"dir":"test"},{"name":"should be observed by the container for elements added after it was set","suites":["container"],"updatePoint":{"line":703,"column":79,"index":24839},"line":703,"code":"    it('should be observed by the container for elements added after it was set', () => {\n      // Set container.\n      scheduler.setContainer(container);\n\n      // Schedule elements.\n      scheduler.schedule(topElement);\n      scheduler.schedule(containerElement);\n      scheduler.schedule(containerElementChild);\n      scheduler.schedule(container);\n\n      // Observed on the document observer.\n      expect(intersectionObserverStub.isObserved(topElement, {\n        root: doc\n      })).to.be.true;\n      expect(intersectionObserverStub.isObserved(containerElement, {\n        root: doc\n      })).to.be.true;\n      expect(intersectionObserverStub.isObserved(containerElementChild, {\n        root: doc\n      })).to.be.true;\n\n      // A contained element is observed by the container.\n      expect(intersectionObserverStub.isObserved(containerElement, {\n        root: container\n      })).to.be.true;\n      expect(intersectionObserverStub.isObserved(containerElementChild, {\n        root: container\n      })).to.be.true;\n      // Not observed by the container because not contained by it.\n      expect(intersectionObserverStub.isObserved(topElement, {\n        root: container\n      })).to.be.false;\n\n      // Should not observe the container itself on the container observer.\n      expect(intersectionObserverStub.isObserved(container, {\n        root: container\n      })).to.be.false;\n      expect(intersectionObserverStub.isObserved(container, {\n        root: doc\n      })).to.be.true;\n\n      // Remove container.\n      scheduler.removeContainer(container);\n      expect(intersectionObserverStub.isObserved(containerElement, {\n        root: container\n      })).to.be.false;\n      expect(intersectionObserverStub.isObserved(containerElementChild, {\n        root: container\n      })).to.be.false;\n    });","file":"unit/test-scheduler.js","skipped":false,"dir":"test"},{"name":"should be unobserved by all observers when unscheduled","suites":["container"],"updatePoint":{"line":753,"column":62,"index":26623},"line":753,"code":"    it('should be unobserved by all observers when unscheduled', () => {\n      // Set container.\n      scheduler.setContainer(container);\n\n      // Schedule elements.\n      scheduler.schedule(containerElement);\n      expect(intersectionObserverStub.isObserved(containerElement, {\n        root: doc\n      })).to.be.true;\n      expect(intersectionObserverStub.isObserved(containerElement, {\n        root: container\n      })).to.be.true;\n\n      // Unschedule\n      scheduler.unschedule(containerElement);\n      expect(intersectionObserverStub.isObserved(containerElement, {\n        root: doc\n      })).to.be.false;\n      expect(intersectionObserverStub.isObserved(containerElement, {\n        root: container\n      })).to.be.false;\n    });","file":"unit/test-scheduler.js","skipped":false,"dir":"test"},{"name":"should mount if the document observer fires first","suites":["container"],"updatePoint":{"line":775,"column":57,"index":27354},"line":775,"code":"    it('should mount if the document observer fires first', async () => {\n      await setAmpdocReady();\n\n      // Set container and schedule.\n      scheduler.setContainer(container);\n      scheduler.schedule(containerElement);\n      expect(intersectionObserverStub.isObserved(containerElement, {\n        root: doc\n      })).to.be.true;\n      expect(intersectionObserverStub.isObserved(containerElement, {\n        root: container\n      })).to.be.true;\n      intersectionObserverStub.notifySync({\n        target: containerElement,\n        isIntersecting: true\n      }, {\n        root: doc\n      });\n      clock.tick(1);\n      expect(containerElement.mountInternal).to.be.calledOnce;\n\n      // Unscheduled from both.\n      expect(intersectionObserverStub.isObserved(containerElement, {\n        root: doc\n      })).to.be.false;\n      expect(intersectionObserverStub.isObserved(containerElement, {\n        root: container\n      })).to.be.false;\n    });","file":"unit/test-scheduler.js","skipped":false,"dir":"test"},{"name":"should mount if the container observer fires first","suites":["container"],"updatePoint":{"line":804,"column":58,"index":28303},"line":804,"code":"    it('should mount if the container observer fires first', async () => {\n      await setAmpdocReady();\n\n      // Set container and schedule.\n      scheduler.setContainer(container);\n      scheduler.schedule(containerElement);\n      expect(intersectionObserverStub.isObserved(containerElement, {\n        root: doc\n      })).to.be.true;\n      expect(intersectionObserverStub.isObserved(containerElement, {\n        root: container\n      })).to.be.true;\n      intersectionObserverStub.notifySync({\n        target: containerElement,\n        isIntersecting: true\n      }, {\n        root: container\n      });\n      clock.tick(1);\n      expect(containerElement.mountInternal).to.be.calledOnce;\n      expect(intersectionObserverStub.isObserved(containerElement, {\n        root: doc\n      })).to.be.false;\n      expect(intersectionObserverStub.isObserved(containerElement, {\n        root: container\n      })).to.be.false;\n    });","file":"unit/test-scheduler.js","skipped":false,"dir":"test"},{"name":"should wait for the first intersecing observation","suites":["container"],"updatePoint":{"line":831,"column":57,"index":29224},"line":831,"code":"    it('should wait for the first intersecing observation', async () => {\n      await setAmpdocReady();\n\n      // Set container and schedule.\n      scheduler.setContainer(container);\n      scheduler.schedule(containerElement);\n      intersectionObserverStub.notifySync({\n        target: containerElement,\n        isIntersecting: false\n      }, {\n        root: doc\n      });\n      clock.tick(1);\n      expect(containerElement.mountInternal).to.not.be.called;\n      intersectionObserverStub.notifySync({\n        target: containerElement,\n        isIntersecting: false\n      }, {\n        root: container\n      });\n      clock.tick(1);\n      expect(containerElement.mountInternal).to.not.be.called;\n      intersectionObserverStub.notifySync({\n        target: containerElement,\n        isIntersecting: true\n      }, {\n        root: container\n      });\n      clock.tick(1);\n      expect(containerElement.mountInternal).to.be.calledOnce;\n    });","file":"unit/test-scheduler.js","skipped":false,"dir":"test"},{"name":"should test disposable interface","suites":["disposable interface"],"updatePoint":{"line":13,"column":40,"index":888},"line":13,"code":"    it('should test disposable interface', () => {\n      expect(isDisposable(disposable)).to.be.true;\n      expect(isDisposable(nonDisposable)).to.be.false;\n    });","file":"unit/test-service.js","skipped":false,"dir":"test"},{"name":"should assert disposable interface","suites":["disposable interface"],"updatePoint":{"line":17,"column":42,"index":1055},"line":17,"code":"    it('should assert disposable interface', () => {\n      expect(assertDisposable(disposable)).to.equal(disposable);\n      allowConsoleError(() => {\n        expect(() => assertDisposable(nonDisposable)).to.throw(/required to implement Disposable/);\n      });\n    });","file":"unit/test-service.js","skipped":false,"dir":"test"},{"name":"should make per window singletons","suites":["window singletons"],"updatePoint":{"line":43,"column":41,"index":1811},"line":43,"code":"    it('should make per window singletons', () => {\n      registerServiceBuilder(window, 'a', factory);\n      const a1 = getService(window, 'a');\n      registerServiceBuilder(window, 'a', factory);\n      const a2 = getService(window, 'a');\n      expect(a1).to.equal(a2);\n      expect(a1).to.deep.equal({\n        count: 1\n      });\n      expect(factory).to.be.calledOnce;\n      expect(factory.args[0][0]).to.equal(window);\n      registerServiceBuilder(window, 'b', factory);\n      const b1 = getService(window, 'b');\n      registerServiceBuilder(window, 'b', factory);\n      const b2 = getService(window, 'b');\n      expect(b1).to.equal(b2);\n      expect(b1).to.not.equal(a1);\n      expect(factory).to.have.callCount(2);\n      expect(factory.args[1][0]).to.equal(window);\n    });","file":"unit/test-service.js","skipped":false,"dir":"test"},{"name":"should not instantiate service when registered","suites":["window singletons"],"updatePoint":{"line":63,"column":54,"index":2603},"line":63,"code":"    it('should not instantiate service when registered', () => {\n      registerServiceBuilder(window, 'a', Class);\n      expect(count).to.equal(0);\n      getService(window, 'a');\n      expect(count).to.equal(1);\n    });","file":"unit/test-service.js","skipped":false,"dir":"test"},{"name":"should only instantiate the service once","suites":["window singletons"],"updatePoint":{"line":69,"column":48,"index":2817},"line":69,"code":"    it('should only instantiate the service once', () => {\n      registerServiceBuilder(window, 'b', Class);\n      expect(count).to.equal(0);\n      getService(window, 'b');\n      getService(window, 'b');\n      expect(count).to.equal(1);\n    });","file":"unit/test-service.js","skipped":false,"dir":"test"},{"name":"should return the service when it exists","suites":["window singletons"],"updatePoint":{"line":76,"column":48,"index":3062},"line":76,"code":"    it('should return the service when it exists', () => {\n      registerServiceBuilder(window, 'c', factory);\n      const c1 = getService(window, 'c');\n      const c2 = getExistingServiceOrNull(window, 'c');\n      expect(c1).to.equal(c2);\n    });","file":"unit/test-service.js","skipped":false,"dir":"test"},{"name":"should throw before creation if factory is not provided","suites":["window singletons"],"updatePoint":{"line":82,"column":63,"index":3325},"line":82,"code":"    it('should throw before creation if factory is not provided', () => {\n      allowConsoleError(() => {\n        expect(() => {\n          getService(window, 'c');\n        }).to.throw();\n      });\n    });","file":"unit/test-service.js","skipped":false,"dir":"test"},{"name":"should fail without factory on initial setup","suites":["window singletons"],"updatePoint":{"line":89,"column":52,"index":3519},"line":89,"code":"    it('should fail without factory on initial setup', () => {\n      allowConsoleError(() => {\n        expect(() => {\n          getService(window, 'not-present');\n        }).to.throw(/Expected service not-present to be registered/);\n      });\n    });","file":"unit/test-service.js","skipped":false,"dir":"test"},{"name":"should provide a promise that resolves when instantiated","suites":["window singletons"],"updatePoint":{"line":96,"column":64,"index":3782},"line":96,"code":"    it('should provide a promise that resolves when instantiated', () => {\n      const p1 = getServicePromise(window, 'e1');\n      const p2 = getServicePromise(window, 'e1');\n      registerServiceBuilder(window, 'e1', function () {\n        return {\n          str: 'from e1'\n        };\n      });\n      return p1.then(s1 => {\n        expect(s1).to.deep.equal({\n          str: 'from e1'\n        });\n        return p2.then(s2 => {\n          expect(s2).to.equal(s1);\n          expect(factory).to.have.not.been.called;\n        });\n      });\n    });","file":"unit/test-service.js","skipped":false,"dir":"test"},{"name":"should resolve existing service promise on registering service","suites":["window singletons"],"updatePoint":{"line":114,"column":70,"index":4331},"line":114,"code":"    it('should resolve existing service promise on registering service', () => {\n      const p = getServicePromise(window, 'a');\n      registerServiceBuilder(window, 'a', Class);\n      expect(count).to.equal(1);\n      return p.then(() => {\n        expect(count).to.equal(1);\n      });\n    });","file":"unit/test-service.js","skipped":false,"dir":"test"},{"name":"should resolve service promise if service is registered","suites":["window singletons"],"updatePoint":{"line":122,"column":63,"index":4617},"line":122,"code":"    it('should resolve service promise if service is registered', () => {\n      registerServiceBuilder(window, 'a', Class);\n      expect(count).to.equal(0);\n      return getServicePromise(window, 'a').then(() => {\n        expect(count).to.equal(1);\n      });\n    });","file":"unit/test-service.js","skipped":false,"dir":"test"},{"name":"should provide promise without clobbering registered services","suites":["window singletons"],"updatePoint":{"line":129,"column":69,"index":4890},"line":129,"code":"    it('should provide promise without clobbering registered services', () => {\n      registerServiceBuilder(window, 'a', Class);\n      expect(count).to.equal(0);\n      const p = getServicePromise(window, 'a');\n      expect(() => getService(window, 'a')).to.not.throw();\n      return p.then(() => {\n        expect(count).to.equal(1);\n      });\n    });","file":"unit/test-service.js","skipped":false,"dir":"test"},{"name":"should NOT return null promise for registered services","suites":["window singletons"],"updatePoint":{"line":138,"column":62,"index":5235},"line":138,"code":"    it('should NOT return null promise for registered services', () => {\n      registerServiceBuilder(window, 'a', Class);\n      const p = getServicePromiseOrNull(window, 'a');\n      expect(p).to.not.be.null;\n    });","file":"unit/test-service.js","skipped":false,"dir":"test"},{"name":"should not set service builders to null after instantiation","suites":["window singletons"],"updatePoint":{"line":143,"column":67,"index":5457},"line":143,"code":"    it('should not set service builders to null after instantiation', () => {\n      registerServiceBuilder(window, 'a', Class);\n      expect(window.__AMP_SERVICES['a'].obj).to.be.null;\n      expect(window.__AMP_SERVICES['a'].ctor).to.not.be.null;\n      getService(window, 'a');\n      expect(window.__AMP_SERVICES['a'].obj).to.not.be.null;\n      expect(window.__AMP_SERVICES['a'].ctor).to.not.be.null;\n    });","file":"unit/test-service.js","skipped":false,"dir":"test"},{"name":"should resolve service for a child window","suites":["window singletons"],"updatePoint":{"line":151,"column":49,"index":5848},"line":151,"code":"    it('should resolve service for a child window', () => {\n      registerServiceBuilder(window, 'c', factory);\n      const c = getService(window, 'c');\n\n      // A child.\n      const child = {};\n      setParentWindow(child, window);\n      expect(getService(child, 'c')).to.equal(c);\n      expect(getExistingServiceOrNull(child, 'c')).to.equal(c);\n\n      // A grandchild.\n      const grandchild = {};\n      setParentWindow(grandchild, child);\n      expect(getService(grandchild, 'c')).to.equal(c);\n      expect(getExistingServiceOrNull(grandchild, 'c')).to.equal(c);\n    });","file":"unit/test-service.js","skipped":false,"dir":"test"},{"name":"should make per ampdoc singletons and store them in window","suites":["ampdoc singletons"],"updatePoint":{"line":215,"column":66,"index":7634},"line":215,"code":"    it('should make per ampdoc singletons and store them in window', () => {\n      ampdocMock.expects('isSingleDoc').returns(true).atLeast(1);\n      registerServiceBuilderForDoc(node, 'a', factory);\n      const a1 = getServiceForDoc(node, 'a');\n      registerServiceBuilderForDoc(node, 'a', factory);\n      const a2 = getServiceForDoc(node, 'a');\n      expect(a1).to.equal(a2);\n      expect(a1).to.deep.equal({\n        count: 1\n      });\n      expect(factory).to.be.calledOnce;\n      expect(factory.args[0][0]).to.equal(ampdoc);\n      expect(windowApi.__AMP_SERVICES['a']).to.exist;\n      expect(ampdoc.__AMP_SERVICES).to.not.exist;\n      registerServiceBuilderForDoc(node, 'b', factory);\n      const b1 = getServiceForDoc(node, 'b');\n      const b2 = getServiceForDoc(node, 'b');\n      expect(b1).to.equal(b2);\n      expect(b1).to.not.equal(a1);\n      expect(factory).to.have.callCount(2);\n      expect(factory.args[1][0]).to.equal(ampdoc);\n      expect(windowApi.__AMP_SERVICES['b']).to.exist;\n      expect(ampdoc.__AMP_SERVICES).to.not.exist;\n    });","file":"unit/test-service.js","skipped":false,"dir":"test"},{"name":"should make per ampdoc singletons via ampdoc","suites":["ampdoc singletons"],"updatePoint":{"line":239,"column":52,"index":8674},"line":239,"code":"    it('should make per ampdoc singletons via ampdoc', () => {\n      ampdocMock.expects('isSingleDoc').returns(true).atLeast(1);\n      registerServiceBuilderForDoc(ampdoc, 'a', factory);\n      const a1 = getServiceForDoc(ampdoc, 'a');\n      registerServiceBuilderForDoc(ampdoc, 'a', factory);\n      const a2 = getServiceForDoc(ampdoc, 'a');\n      expect(a1).to.equal(a2);\n      expect(a1).to.deep.equal({\n        count: 1\n      });\n      expect(factory).to.be.calledOnce;\n      expect(factory.args[0][0]).to.equal(ampdoc);\n      expect(windowApi.__AMP_SERVICES['a']).to.exist;\n      expect(ampdoc.__AMP_SERVICES).to.not.exist;\n    });","file":"unit/test-service.js","skipped":false,"dir":"test"},{"name":"should make per ampdoc singletons and store them in ampdoc","suites":["ampdoc singletons"],"updatePoint":{"line":254,"column":66,"index":9323},"line":254,"code":"    it('should make per ampdoc singletons and store them in ampdoc', () => {\n      ampdocMock.expects('isSingleDoc').returns(false).atLeast(1);\n      registerServiceBuilderForDoc(node, 'a', factory);\n      const a1 = getServiceForDoc(node, 'a');\n      registerServiceBuilderForDoc(node, 'a', factory);\n      const a2 = getServiceForDoc(node, 'a');\n      expect(a1).to.equal(a2);\n      expect(a1).to.deep.equal({\n        count: 1\n      });\n      expect(factory).to.be.calledOnce;\n      expect(factory.args[0][0]).to.equal(ampdoc);\n      expect(windowApi.__AMP_SERVICES['a']).to.not.exist;\n      expect(ampdoc.__AMP_SERVICES['a']).to.exist;\n      registerServiceBuilderForDoc(node, 'b', factory);\n      const b1 = getServiceForDoc(node, 'b');\n      registerServiceBuilderForDoc(node, 'b', factory);\n      const b2 = getServiceForDoc(node, 'b');\n      expect(b1).to.equal(b2);\n      expect(b1).to.not.equal(a1);\n      expect(factory).to.have.callCount(2);\n      expect(factory.args[1][0]).to.equal(ampdoc);\n      expect(windowApi.__AMP_SERVICES['b']).to.not.exist;\n      expect(ampdoc.__AMP_SERVICES['b']).to.exist;\n    });","file":"unit/test-service.js","skipped":false,"dir":"test"},{"name":"should not instantiate service when registered","suites":["ampdoc singletons"],"updatePoint":{"line":279,"column":54,"index":10432},"line":279,"code":"    it('should not instantiate service when registered', () => {\n      registerServiceBuilderForDoc(ampdoc, 'fake service', factory);\n      expect(count).to.equal(0);\n      getServicePromiseForDoc(ampdoc, 'fake service');\n      getServiceForDoc(ampdoc, 'fake service');\n      expect(count).to.equal(1);\n    });","file":"unit/test-service.js","skipped":false,"dir":"test"},{"name":"should not instantiate service when registered (race)","suites":["ampdoc singletons"],"updatePoint":{"line":286,"column":61,"index":10750},"line":286,"code":"    it('should not instantiate service when registered (race)', () => {\n      getServicePromiseForDoc(ampdoc, 'fake service');\n      registerServiceBuilderForDoc(ampdoc, 'fake service', factory);\n      expect(count).to.equal(1);\n      getServiceForDoc(ampdoc, 'fake service');\n      return Promise.resolve().then(() => {\n        expect(count).to.equal(1);\n      });\n    });","file":"unit/test-service.js","skipped":false,"dir":"test"},{"name":"should fail without factory on initial setup","suites":["ampdoc singletons"],"updatePoint":{"line":295,"column":52,"index":11115},"line":295,"code":"    it('should fail without factory on initial setup', () => {\n      allowConsoleError(() => {\n        expect(() => {\n          getServiceForDoc(node, 'not-present');\n        }).to.throw(/Expected service not-present to be registered/);\n      });\n    });","file":"unit/test-service.js","skipped":false,"dir":"test"},{"name":"should provide a promise that resolves when instantiated","suites":["ampdoc singletons"],"updatePoint":{"line":302,"column":64,"index":11382},"line":302,"code":"    it('should provide a promise that resolves when instantiated', () => {\n      const p1 = getServicePromiseForDoc(node, 'e1');\n      const p2 = getServicePromiseForDoc(node, 'e1');\n      registerServiceBuilderForDoc(node, 'e1', function () {\n        return {\n          str: 'from e1'\n        };\n      });\n      return p1.then(s1 => {\n        expect(s1).to.deep.equal({\n          str: 'from e1'\n        });\n        return p2.then(s2 => {\n          expect(s2).to.equal(s1);\n          expect(factory).to.have.not.been.called;\n        });\n      });\n    });","file":"unit/test-service.js","skipped":false,"dir":"test"},{"name":"should NOT return null promise for registered services","suites":["ampdoc singletons"],"updatePoint":{"line":320,"column":62,"index":11935},"line":320,"code":"    it('should NOT return null promise for registered services', () => {\n      registerServiceBuilderForDoc(ampdoc, 'a', factory);\n      const p = getServicePromiseOrNullForDoc(ampdoc, 'a');\n      expect(p).to.not.be.null;\n    });","file":"unit/test-service.js","skipped":false,"dir":"test"},{"name":"should reject service promise - reject before get","suites":["ampdoc singletons"],"updatePoint":{"line":325,"column":57,"index":12161},"line":325,"code":"    it('should reject service promise - reject before get', () => {\n      rejectServicePromiseForDoc(ampdoc, 'a', {\n        code: 1\n      });\n      const p = getServicePromiseForDoc(ampdoc, 'a');\n      return expect(p).to.eventually.be.rejectedWith({\n        code: 1\n      });\n    });","file":"unit/test-service.js","skipped":false,"dir":"test"},{"name":"should reject service promise - reject after get","suites":["ampdoc singletons"],"updatePoint":{"line":334,"column":56,"index":12445},"line":334,"code":"    it('should reject service promise - reject after get', () => {\n      const p = getServicePromiseForDoc(ampdoc, 'a');\n      rejectServicePromiseForDoc(ampdoc, 'a', {\n        code: 1\n      });\n      return expect(p).to.eventually.be.rejectedWith({\n        code: 1\n      });\n    });","file":"unit/test-service.js","skipped":false,"dir":"test"},{"name":"should reject service promise - reject multiple times","suites":["ampdoc singletons"],"updatePoint":{"line":343,"column":61,"index":12734},"line":343,"code":"    it('should reject service promise - reject multiple times', () => {\n      const p = getServicePromiseForDoc(ampdoc, 'a');\n      rejectServicePromiseForDoc(ampdoc, 'a', {\n        code: 1\n      });\n      rejectServicePromiseForDoc(ampdoc, 'a', {\n        code: 2\n      });\n      return expect(p).to.eventually.be.rejectedWith({\n        code: 1\n      });\n    });","file":"unit/test-service.js","skipped":false,"dir":"test"},{"name":"should reject service promise - reject before register","suites":["ampdoc singletons"],"updatePoint":{"line":355,"column":62,"index":13098},"line":355,"code":"    it('should reject service promise - reject before register', () => {\n      const p = getServicePromiseForDoc(ampdoc, 'a');\n      rejectServicePromiseForDoc(ampdoc, 'a', {\n        code: 1\n      });\n      registerServiceBuilderForDoc(ampdoc, 'a', factory);\n      return expect(p).to.eventually.be.rejectedWith({\n        code: 1\n      });\n    });","file":"unit/test-service.js","skipped":false,"dir":"test"},{"name":"should not reject service promise if already registered","suites":["ampdoc singletons"],"updatePoint":{"line":365,"column":63,"index":13447},"line":365,"code":"    it('should not reject service promise if already registered', () => {\n      const p = getServicePromiseForDoc(ampdoc, 'a');\n      registerServiceBuilderForDoc(ampdoc, 'a', factory);\n      rejectServicePromiseForDoc(ampdoc, 'a', {\n        code: 1\n      });\n      return expect(p).to.eventually.be.ok;\n    });","file":"unit/test-service.js","skipped":false,"dir":"test"},{"name":"should resolve service for a child window","suites":["ampdoc singletons"],"updatePoint":{"line":373,"column":49,"index":13745},"line":373,"code":"    it('should resolve service for a child window', () => {\n      ampdocMock.expects('isSingleDoc').returns(true).atLeast(1);\n      registerServiceBuilderForDoc(node, 'c', factory);\n      const c = getServiceForDoc(node, 'c');\n\n      // A child.\n      const childWin = {};\n      const childWinNode = {\n        nodeType: 1,\n        ownerDocument: {\n          defaultView: childWin\n        }\n      };\n      setParentWindow(childWin, windowApi);\n      expect(getServiceForDoc(childWinNode, 'c')).to.equal(c);\n\n      // A grandchild.\n      const grandchildWin = {};\n      const grandChildWinNode = {\n        nodeType: 1,\n        ownerDocument: {\n          defaultView: grandchildWin\n        }\n      };\n      setParentWindow(grandchildWin, childWin);\n      expect(getServiceForDoc(grandChildWinNode, 'c')).to.equal(c);\n    });","file":"unit/test-service.js","skipped":false,"dir":"test"},{"name":"should dispose disposable services","suites":["ampdoc singletons"],"updatePoint":{"line":400,"column":42,"index":14560},"line":400,"code":"    it('should dispose disposable services', () => {\n      expectAsyncConsoleError(/intentional/);\n      const disposableFactory = function () {\n        return {\n          dispose: env.sandbox.spy()\n        };\n      };\n      registerServiceBuilderForDoc(node, 'a', disposableFactory);\n      const disposable = getServiceForDoc(node, 'a');\n      registerServiceBuilderForDoc(node, 'b', function () {\n        return {\n          dispose: env.sandbox.stub().throws('intentional')\n        };\n      });\n      const disposableWithError = getServiceForDoc(node, 'b');\n      const disposableDeferredPromise = getServicePromiseForDoc(node, 'c');\n      registerServiceBuilderForDoc(node, 'd', function () {\n        return {};\n      });\n      const nonDisposable = getServiceForDoc(node, 'd');\n      registerServiceBuilder(windowApi, 'e', disposableFactory);\n      const windowDisposable = getService(windowApi, 'e');\n      disposeServicesForDoc(ampdoc);\n\n      // Disposable and initialized are disposed right away.\n      expect(disposable.dispose).to.be.calledOnce;\n\n      // Failing disposable doesn't fail the overall dispose.\n      expect(disposableWithError.dispose).to.be.calledOnce;\n\n      // Non-disposable are not touched.\n      expect(nonDisposable.dispose).to.be.undefined;\n\n      // Window disposable is not touched.\n      expect(windowDisposable.dispose).to.not.be.called;\n\n      // Deferred.\n      registerServiceBuilderForDoc(node, 'c', disposableFactory);\n      const disposableDeferred = getServiceForDoc(node, 'c');\n      expect(disposableDeferred.dispose).to.not.be.called;\n      return disposableDeferredPromise.then(() => {\n        expect(disposableDeferred.dispose).to.be.calledOnce;\n      });\n    });","file":"unit/test-service.js","skipped":false,"dir":"test"},{"name":"should return the service via node","suites":["ampdoc singletons","embed service"],"updatePoint":{"line":494,"column":44,"index":17675},"line":494,"code":"      it('should return the service via node', () => {\n        const fromNode = getServiceForDocOrNull(node, 'c');\n        expect(fromNode).to.equal(topService);\n      });","file":"unit/test-service.js","skipped":false,"dir":"test"},{"name":"should find ampdoc and return its service","suites":["ampdoc singletons","embed service"],"updatePoint":{"line":498,"column":51,"index":17854},"line":498,"code":"      it('should find ampdoc and return its service', () => {\n        const fromChildNode = getServiceForDocOrNull(childWinNode, 'c');\n        expect(fromChildNode).to.equal(topService);\n        const fromGrandchildNode = getServiceForDocOrNull(grandChildWinNode, 'c');\n        expect(fromGrandchildNode).to.equal(topService);\n      });","file":"unit/test-service.js","skipped":false,"dir":"test"},{"name":"should not fallback embedded ampdoc to parent","suites":["ampdoc singletons","embed service"],"updatePoint":{"line":504,"column":55,"index":18195},"line":504,"code":"      it('should not fallback embedded ampdoc to parent', () => {\n        const childAmpdoc = {\n          isSingleDoc: () => false,\n          win: windowApi\n        };\n        env.sandbox.stub(ampdocServiceApi, 'getAmpDoc').callsFake(node => {\n          if (node == childWinNode || node == grandChildWinNode) {\n            return childAmpdoc;\n          }\n          return ampdoc;\n        });\n        const fromChildNode = getServiceForDocOrNull(childWinNode, 'c');\n        expect(fromChildNode).to.equal(null);\n        const fromGrandchildNode = getServiceForDocOrNull(grandChildWinNode, 'c');\n        expect(fromGrandchildNode).to.equal(null);\n      });","file":"unit/test-service.js","skipped":false,"dir":"test"},{"name":"should override services on embedded ampdoc","suites":["ampdoc singletons","embed service"],"updatePoint":{"line":520,"column":53,"index":18848},"line":520,"code":"      it('should override services on embedded ampdoc', () => {\n        const childAmpdoc = {\n          isSingleDoc: () => false,\n          win: windowApi\n        };\n        registerServiceBuilderForDoc(childAmpdoc, 'c', factory);\n        env.sandbox.stub(ampdocServiceApi, 'getAmpDoc').callsFake(node => {\n          if (node == childWinNode || node == grandChildWinNode) {\n            return childAmpdoc;\n          }\n          return ampdoc;\n        });\n        const fromChildNode = getServiceForDocOrNull(childWinNode, 'c');\n        expect(fromChildNode).to.deep.equal({\n          count: 2\n        });\n        expect(fromChildNode).to.not.equal(topService);\n        const fromGrandchildNode = getServiceForDocOrNull(grandChildWinNode, 'c');\n        expect(fromGrandchildNode).to.deep.equal({\n          count: 2\n        });\n        expect(fromGrandchildNode).to.not.equal(topService);\n\n        // The service is NOT also registered on the embed window.\n        expect(childWin.__AMP_SERVICES && childWin.__AMP_SERVICES['c']).to.not.exist;\n      });","file":"unit/test-service.js","skipped":false,"dir":"test"},{"name":"should override services on embedded window","suites":["ampdoc singletons","embed service"],"updatePoint":{"line":546,"column":53,"index":19899},"line":546,"code":"      it('should override services on embedded window', () => {\n        const topService = {};\n        const embedService = {};\n        registerServiceBuilder(windowApi, 'A', function () {\n          return topService;\n        });\n        registerServiceBuilderInEmbedWin(childWin, 'A', function () {\n          return embedService;\n        });\n        expect(getService(windowApi, 'A')).to.equal(topService);\n        expect(getService(childWin, 'A')).to.equal(topService);\n        expect(getServiceInEmbedWin(windowApi, 'A')).to.equal(topService);\n        expect(getServiceInEmbedWin(childWin, 'A')).to.equal(embedService);\n      });","file":"unit/test-service.js","skipped":false,"dir":"test"},{"name":"should dispose disposable services","suites":["ampdoc singletons","embed service"],"updatePoint":{"line":560,"column":44,"index":20523},"line":560,"code":"      it('should dispose disposable services', () => {\n        const disposableFactory = function () {\n          return {\n            dispose: env.sandbox.spy()\n          };\n        };\n\n        // A disposable service in parent.\n        registerServiceBuilderForDoc(parentAmpdoc, 'a', disposableFactory);\n        const parentDisposable = getServiceForDoc(parentAmpdoc, 'a');\n\n        // A disposable service.\n        registerServiceBuilderForDoc(ampdoc, 'b', disposableFactory);\n        const b = getServiceForDoc(node, 'b');\n\n        // A shared disposable service instance.\n        adoptServiceForEmbedDoc(ampdoc, 'a');\n        const shared = getServiceForDoc(ampdoc, 'a');\n\n        // A shared disposable service factory.\n        registerServiceBuilderForDoc(parentAmpdoc, 'f', disposableFactory);\n        adoptServiceFactoryForEmbedDoc(ampdoc, 'f');\n        const f = getServiceForDoc(ampdoc, 'f');\n        disposeServicesForDoc(ampdoc);\n\n        // Parent's services are not disposed.\n        expect(parentDisposable.dispose).to.not.be.called;\n        expect(shared).to.equal(parentDisposable);\n\n        // Disposable and initialized are disposed right away.\n        expect(b.dispose).to.be.calledOnce;\n        expect(f.dispose).to.be.calledOnce;\n      });","file":"unit/test-service.js","skipped":false,"dir":"test"},{"name":"should share adoptable instances","suites":["ampdoc singletons","embed service"],"updatePoint":{"line":593,"column":42,"index":21783},"line":593,"code":"      it('should share adoptable instances', () => {\n        class Factory {}\n        registerServiceBuilderForDoc(parentAmpdoc, 'A', Factory);\n        adoptServiceForEmbedDoc(ampdoc, 'A');\n        const parent = getServiceForDoc(parentAmpdoc, 'A');\n        const child = getServiceForDoc(ampdoc, 'A');\n        expect(parent).to.be.instanceof(Factory);\n        expect(child).to.be.instanceof(Factory);\n        expect(child).to.equal(parent);\n      });","file":"unit/test-service.js","skipped":false,"dir":"test"},{"name":"should share adoptable factories but not instances","suites":["ampdoc singletons","embed service"],"updatePoint":{"line":603,"column":60,"index":22253},"line":603,"code":"      it('should share adoptable factories but not instances', () => {\n        class Factory {}\n        registerServiceBuilderForDoc(parentAmpdoc, 'A', Factory);\n        adoptServiceFactoryForEmbedDoc(ampdoc, 'A');\n        const parent = getServiceForDoc(parentAmpdoc, 'A');\n        const child = getServiceForDoc(ampdoc, 'A');\n        expect(parent).to.be.instanceof(Factory);\n        expect(child).to.be.instanceof(Factory);\n        expect(child).not.to.equal(parent);\n      });","file":"unit/test-service.js","skipped":false,"dir":"test"},{"name":"should return frameElement","suites":["getParentWindowFrameElement"],"updatePoint":{"line":641,"column":34,"index":23519},"line":641,"code":"    it('should return frameElement', () => {\n      const div = iframe.contentWindow.document.getElementById('one');\n      expect(getParentWindowFrameElement(div, window)).to.equal(iframe);\n    });","file":"unit/test-service.js","skipped":false,"dir":"test"},{"name":"should return null when not parented","suites":["getParentWindowFrameElement"],"updatePoint":{"line":645,"column":44,"index":23726},"line":645,"code":"    it('should return null when not parented', () => {\n      iframe.contentWindow.__AMP_TOP = null;\n      const div = iframe.contentWindow.document.getElementById('one');\n      expect(getParentWindowFrameElement(div, window)).to.equal(null);\n    });","file":"unit/test-service.js","skipped":false,"dir":"test"},{"name":"should survive exceptions","suites":["getParentWindowFrameElement"],"updatePoint":{"line":650,"column":33,"index":23965},"line":650,"code":"    it('should survive exceptions', () => {\n      const childWin = {};\n      Object.defineProperties(childWin, {\n        frameElement: {\n          get: () => {\n            throw new Error('intentional');\n          }\n        }\n      });\n      setParentWindow(childWin, window);\n      const el = {\n        ownerDocument: {\n          defaultView: childWin\n        }\n      };\n      expect(getParentWindowFrameElement(el, window)).to.equal(null);\n    });","file":"unit/test-service.js","skipped":false,"dir":"test"},{"name":"should transform CSS installStylesForDoc for shadow root","suites":["shadow APIs"],"updatePoint":{"line":29,"column":68,"index":1535},"line":29,"code":"        it('should transform CSS installStylesForDoc for shadow root', () => {\n          const shadowRoot = createShadowRoot(hostElement);\n          const ampdoc = new AmpDocShadow(window, 'https://a.org/', shadowRoot);\n          const style = installStylesForDoc(ampdoc, 'body {}', null, true);\n          expect(shadowRoot.contains(style)).to.be.true;\n          const css = style.textContent.replace(/\\s/g, '');\n          if (scenario == ShadowDomVersion_Enum.NONE) {\n            expect(css).to.match(/amp-body/);\n          } else {\n            expect(css).to.equal('body{}');\n          }\n        });","file":"unit/test-shadow-embed.js","skipped":false,"dir":"test"},{"name":"should clear duplicate root","suites":["shadow APIs","createShadowRoot"],"updatePoint":{"line":42,"column":41,"index":2155},"line":42,"code":"          it('should clear duplicate root', () => {\n            const shadowRoot1 = createShadowRoot(hostElement);\n            const span = document.createElement('span');\n            shadowRoot1.appendChild(span);\n            expect(shadowRoot1.contains(span)).to.be.true;\n            const shadowRoot2 = createShadowRoot(hostElement);\n            expect(shadowRoot2).to.equal(shadowRoot1);\n            expect(shadowRoot2.contains(span)).to.be.false;\n          });","file":"unit/test-shadow-embed.js","skipped":false,"dir":"test"},{"name":"should have host","suites":["shadow APIs","createShadowRoot"],"updatePoint":{"line":51,"column":30,"index":2610},"line":51,"code":"          it('should have host', () => {\n            const shadowRoot = createShadowRoot(hostElement);\n            expect(shadowRoot.host).to.equal(hostElement);\n          });","file":"unit/test-shadow-embed.js","skipped":false,"dir":"test"},{"name":"should have getElementById","suites":["shadow APIs","createShadowRoot"],"updatePoint":{"line":55,"column":40,"index":2796},"line":55,"code":"          it('should have getElementById', () => {\n            const shadowRoot = createShadowRoot(hostElement);\n            expect(shadowRoot.getElementById).to.be.ok;\n            const spanId = 'test' + Math.floor(Math.random() * 10000);\n            const span = document.createElement('span');\n            span.id = spanId;\n            shadowRoot.appendChild(span);\n            expect(shadowRoot.getElementById(spanId)).to.equal(span);\n          });","file":"unit/test-shadow-embed.js","skipped":false,"dir":"test"},{"name":"should add id for polyfill","suites":["shadow APIs","createShadowRoot"],"updatePoint":{"line":65,"column":42,"index":3307},"line":65,"code":"            it('should add id for polyfill', () => {\n              const shadowRoot = createShadowRoot(hostElement);\n              expect(shadowRoot.tagName).to.equal('I-AMPHTML-SHADOW-ROOT');\n              expect(shadowRoot.id).to.match(/i-amphtml-sd-\\d+/);\n            });","file":"unit/test-shadow-embed.js","skipped":false,"dir":"test"},{"name":"should add host style for polyfill","suites":["shadow APIs","createShadowRoot"],"updatePoint":{"line":70,"column":50,"index":3590},"line":70,"code":"            it('should add host style for polyfill', () => {\n              const doc = hostElement.ownerDocument;\n              doc.body.appendChild(hostElement);\n              const slot = doc.createElement('div');\n              hostElement.appendChild(slot);\n              expect(slot).to.have.display('block');\n              const shadowRoot = createShadowRoot(hostElement);\n              expect(hostElement).to.have.class('i-amphtml-shadow-host-polyfill');\n              expect(slot).to.have.display('none');\n              expect(shadowRoot).to.not.have.display('none');\n              doc.body.removeChild(hostElement);\n            });","file":"unit/test-shadow-embed.js","skipped":false,"dir":"test"},{"name":"Should add an id and class for CSS                 encapsulation to the shadow root","suites":["shadow APIs","createShadowRoot"],"updatePoint":{"line":86,"column":48,"index":4354},"line":85,"code":"          it('Should add an id and class for CSS \\\n                encapsulation to the shadow root', () => {\n            setShadowCssSupportedForTesting(false);\n            const shadowRoot = createShadowRoot(hostElement);\n            expect(shadowRoot.id).to.match(/i-amphtml-sd-\\d+/);\n            const shadowRootClassListArray = toArray(shadowRoot.host.classList);\n            let foundShadowCssClass = false;\n            for (let i = 0; i < shadowRootClassListArray.length; i++) {\n              if (shadowRootClassListArray[i].match(/i-amphtml-sd-\\d+/)) {\n                foundShadowCssClass = true;\n                break;\n              }\n            }\n            expect(foundShadowCssClass).to.be.ok;\n          });","file":"unit/test-shadow-embed.js","skipped":false,"dir":"test"},{"name":"Should transform CSS for the shadow root","suites":["shadow APIs","createShadowRoot"],"updatePoint":{"line":100,"column":54,"index":5031},"line":100,"code":"          it('Should transform CSS for the shadow root', () => {\n            setShadowCssSupportedForTesting(false);\n            const shadowRoot = createShadowRoot(hostElement);\n            const ampdoc = new AmpDocShadow(window, 'https://a.org/', shadowRoot);\n            const style = installStylesForDoc(ampdoc, 'body {}', null, true);\n            expect(shadowRoot.contains(style)).to.be.true;\n            const css = style.textContent.replace(/\\s/g, '');\n            expect(css).to.match(/amp-body/);\n          });","file":"unit/test-shadow-embed.js","skipped":false,"dir":"test"},{"name":"should have shadow stylesheets and not global","suites":["shadow APIs","stylesheets"],"updatePoint":{"line":122,"column":59,"index":6075},"line":122,"code":"          it('should have shadow stylesheets and not global', () => {\n            const shadowRoot = createShadowRoot(hostElement);\n            const shadowStyle = document.createElement('style');\n            shadowStyle.textContent = '.x {background: green}';\n            shadowRoot.appendChild(shadowStyle);\n            const {\n              styleSheets\n            } = shadowRoot;\n            expect(styleSheets).to.exist;\n            expect(styleSheets).to.have.length(1);\n            expect(styleSheets[0].ownerNode).to.equal(shadowStyle);\n          });","file":"unit/test-shadow-embed.js","skipped":false,"dir":"test"},{"name":"should import body with all children","suites":["shadow APIs","importShadowBody"],"updatePoint":{"line":147,"column":50,"index":7136},"line":147,"code":"          it('should import body with all children', () => {\n            expect(shadowRoot.body).to.be.undefined;\n            const body = importShadowBody(shadowRoot, source, true);\n            expect(shadowRoot.body).to.equal(body);\n            expect(body.tagName).to.equal(scenario == ShadowDomVersion_Enum.NONE ? 'AMP-BODY' : 'BODY');\n            expect(body.style.position).to.equal('relative');\n            if (scenario == ShadowDomVersion_Enum.NONE) {\n              expect(body.style.display).to.equal('block');\n            }\n            expect(shadowRoot.contains(body)).to.be.true;\n            expect(body.children).to.have.length(2);\n            expect(body.children[0].id).to.equal('child1');\n            expect(body.children[1].id).to.equal('child2');\n          });","file":"unit/test-shadow-embed.js","skipped":false,"dir":"test"},{"name":"should import shallow body","suites":["shadow APIs","importShadowBody"],"updatePoint":{"line":161,"column":40,"index":7905},"line":161,"code":"          it('should import shallow body', () => {\n            expect(shadowRoot.body).to.be.undefined;\n            const body = importShadowBody(shadowRoot, source, false);\n            expect(shadowRoot.body).to.equal(body);\n            expect(body.tagName).to.equal(scenario == ShadowDomVersion_Enum.NONE ? 'AMP-BODY' : 'BODY');\n            expect(body.style.position).to.equal('relative');\n            if (scenario == ShadowDomVersion_Enum.NONE) {\n              expect(body.style.display).to.equal('block');\n            }\n            expect(shadowRoot.contains(body)).to.be.true;\n            expect(body.children).to.have.length(0);\n          });","file":"unit/test-shadow-embed.js","skipped":false,"dir":"test"},{"name":"should allow reusing same body","suites":["shadow APIs","importShadowBody"],"updatePoint":{"line":173,"column":44,"index":8559},"line":173,"code":"          it('should allow reusing same body', () => {\n            const firstBody = importShadowBody(shadowRoot, source, true);\n            const newSource = document.createElement('body');\n            newSource.appendChild(document.createElement('span'));\n            const secondBody = importShadowBody(shadowRoot, newSource, true);\n            expect(shadowRoot.body).to.equal(secondBody);\n            expect(shadowRoot.children).to.have.length(1);\n            expect(firstBody).not.to.equal(secondBody);\n            expect(secondBody.children).to.have.length(1);\n            expect(secondBody.firstChild.tagName).to.equal('SPAN');\n          });","file":"unit/test-shadow-embed.js","skipped":false,"dir":"test"},{"name":"should replace root selectors","suites":["scopeShadowCss"],"updatePoint":{"line":197,"column":37,"index":9506},"line":197,"code":"    it('should replace root selectors', () => {\n      expect(scope('html {}')).to.equal('.h amp-html {}');\n      expect(scope('body {}')).to.equal('.h amp-body {}');\n      expect(scope('html {} body {}')).to.equal('.h amp-html {}.h amp-body {}');\n      expect(scope('html, body {}')).to.equal('.h amp-html, .h amp-body {}');\n      expect(scope('body.x {}')).to.equal('.h amp-body.x {}');\n      expect(scope('body::after {}')).to.equal('.h amp-body::after {}');\n      expect(scope('body[x] {}')).to.equal('.h amp-body[x] {}');\n    });","file":"unit/test-shadow-embed.js","skipped":false,"dir":"test"},{"name":"should avoid false positives for root selectors","suites":["scopeShadowCss"],"updatePoint":{"line":206,"column":55,"index":10058},"line":206,"code":"    it('should avoid false positives for root selectors', () => {\n      expect(scope('.body {}')).to.equal('.h .body {}');\n      expect(scope('x-body {}')).to.equal('.h x-body {}');\n      expect(scope('body-x {}')).to.equal('.h body-x {}');\n      expect(scope('body_x {}')).to.equal('.h body_x {}');\n      expect(scope('body1 {}')).to.equal('.h body1 {}');\n    });","file":"unit/test-shadow-embed.js","skipped":false,"dir":"test"},{"name":"should re-use constructable stylesheet when supported","suites":["installShadowStyle","adopted stylesheets supported"],"updatePoint":{"line":229,"column":63,"index":10892},"line":229,"code":"      it('should re-use constructable stylesheet when supported', function () {\n        shadowRoot.adoptedStyleSheets = [];\n        installShadowStyle(shadowRoot, 'A', '* {color: red}');\n        expect(shadowRoot.adoptedStyleSheets).to.have.length(1);\n        const styleSheet1 = shadowRoot.adoptedStyleSheets[0];\n        expect(styleSheet1.rules).to.have.length(1);\n        expect(styleSheet1.rules[0].cssText.replace(/(\\s|;)/g, '')).to.equal('*{color:red}');\n        expect(shadowRoot.querySelector('style')).to.be.null;\n\n        // A different stylesheet.\n        installShadowStyle(shadowRoot, 'B', '* {color: blue}');\n        expect(shadowRoot.adoptedStyleSheets).to.have.length(2);\n\n        // Repeated call uses the cache.\n        shadowRoot2.adoptedStyleSheets = [];\n        installShadowStyle(shadowRoot2, 'A', 'not even CSS');\n        expect(shadowRoot2.adoptedStyleSheets).to.have.length(1);\n        expect(shadowRoot2.adoptedStyleSheets[0]).to.equal(styleSheet1);\n\n        // A different stylesheet in a different root.\n        shadowRoot2.adoptedStyleSheets = [];\n        installShadowStyle(shadowRoot2, 'B', '* {color: blue}');\n        expect(shadowRoot2.adoptedStyleSheets).to.have.length(1);\n        expect(shadowRoot2.adoptedStyleSheets[0]).to.not.equal(styleSheet1);\n      });","file":"unit/test-shadow-embed.js","skipped":false,"dir":"test"},{"name":"should create a legacy stylesheet when constructable not supported","suites":["installShadowStyle","adopted stylesheets supported"],"updatePoint":{"line":255,"column":74,"index":12206},"line":255,"code":"    it('should create a legacy stylesheet when constructable not supported', () => {\n      installShadowStyle(shadowRoot, 'A', '* {color: red}');\n      const styleEl = shadowRoot.querySelector('style');\n      expect(styleEl.textContent).to.equal('* {color: red}');\n    });","file":"unit/test-shadow-embed.js","skipped":false,"dir":"test"},{"name":"should resolve to streamer","suites":["createShadowDomWriter"],"updatePoint":{"line":300,"column":34,"index":13339},"line":300,"code":"    it('should resolve to streamer', () => {\n      expect(createShadowDomWriter(win)).to.be.instanceOf(DomWriterStreamer);\n      expect(createHTMLDocumentSpy).to.be.calledOnce;\n      expect(createHTMLDocumentSpy).to.be.calledWith('');\n    });","file":"unit/test-shadow-embed.js","skipped":false,"dir":"test"},{"name":"should resolve to bulk without API","suites":["createShadowDomWriter"],"updatePoint":{"line":305,"column":42,"index":13590},"line":305,"code":"    it('should resolve to bulk without API', () => {\n      delete win.document.implementation.createHTMLDocument;\n      expect(createShadowDomWriter(win)).to.be.instanceOf(DomWriterBulk);\n      delete win.document.implementation;\n      expect(createShadowDomWriter(win)).to.be.instanceOf(DomWriterBulk);\n      expect(createHTMLDocumentSpy).to.not.be.called;\n    });","file":"unit/test-shadow-embed.js","skipped":false,"dir":"test"},{"name":"should resolve to bulk on firefox","suites":["createShadowDomWriter"],"updatePoint":{"line":312,"column":41,"index":13955},"line":312,"code":"    it('should resolve to bulk on firefox', () => {\n      isFirefox = true;\n      expect(createShadowDomWriter(win)).to.be.instanceOf(DomWriterBulk);\n      expect(createHTMLDocumentSpy).to.not.be.called;\n    });","file":"unit/test-shadow-embed.js","skipped":false,"dir":"test"},{"name":"should return true if doc level opt-in","suites":["isEnabled"],"updatePoint":{"line":28,"column":46,"index":982},"line":28,"code":"    it('should return true if doc level opt-in', () => {\n      win.document.documentElement.setAttribute('allow-viewer-render-template', true);\n      hasCapabilityStub.withArgs('viewerRenderTemplate').returns(true);\n      expect(ssrTemplateHelper.isEnabled()).to.be.true;\n    });","file":"unit/test-ssr-template-helper.js","skipped":false,"dir":"test"},{"name":"should return false if not doc level opt-in","suites":["isEnabled"],"updatePoint":{"line":33,"column":51,"index":1267},"line":33,"code":"    it('should return false if not doc level opt-in', () => {\n      hasCapabilityStub.withArgs('viewerRenderTemplate').returns(true);\n      expect(ssrTemplateHelper.isEnabled()).to.be.false;\n    });","file":"unit/test-ssr-template-helper.js","skipped":false,"dir":"test"},{"name":"Should refuse to SSR with an untrusted viewer","suites":["ssr"],"updatePoint":{"line":44,"column":53,"index":1824},"line":44,"code":"    it('Should refuse to SSR with an untrusted viewer', async () => {\n      viewer.isTrustedViewer = () => Promise.resolve(false);\n      const errorMsg = /Refused to attempt SSR in untrusted viewer: /;\n      expectAsyncConsoleError(errorMsg);\n      return ssrTemplateHelper.ssr({}, {}, {}).then(() => Promise.reject(), err => {\n        expect(err).match(errorMsg);\n      });\n    });","file":"unit/test-ssr-template-helper.js","skipped":false,"dir":"test"},{"name":"should build payload","suites":["ssr"],"updatePoint":{"line":52,"column":28,"index":2182},"line":52,"code":"    it('should build payload', async () => {\n      const request = {\n        'xhrUrl': 'https://www.abracadabra.org/some-json',\n        'fetchOpt': {\n          'body': {},\n          'credentials': undefined,\n          'headers': undefined,\n          'method': 'GET',\n          'ampCors': true\n        }\n      };\n      const sendMessage = env.sandbox.stub(viewer, 'sendMessageAwaitResponse').returns(Promise.resolve({}));\n      maybeFindTemplateStub.returns(null);\n      const templates = {\n        successTemplate: {\n          'innerHTML': '<div>much success</div>'\n        },\n        errorTemplate: {\n          'innerHTML': '<div>try again</div>'\n        }\n      };\n      await ssrTemplateHelper.ssr({}, request, templates, {\n        attr: 'test'\n      });\n      expect(sendMessage).calledWith('viewerRenderTemplate', {\n        'ampComponent': {\n          'type': 'amp-list',\n          'successTemplate': {\n            'type': 'amp-mustache',\n            'payload': '<div>much success</div>'\n          },\n          'errorTemplate': {\n            'type': 'amp-mustache',\n            'payload': '<div>try again</div>'\n          },\n          'attr': 'test'\n        },\n        'originalRequest': {\n          'init': {\n            'ampCors': true,\n            'body': {},\n            'credentials': undefined,\n            'headers': undefined,\n            'method': 'GET'\n          },\n          'input': 'https://www.abracadabra.org/some-json'\n        }\n      });\n    });","file":"unit/test-ssr-template-helper.js","skipped":false,"dir":"test"},{"name":"should set html template","suites":["rendering templates","applySsrOrCsrTemplate"],"updatePoint":{"line":114,"column":34,"index":4312},"line":114,"code":"      it('should set html template', () => {\n        // Not a real document element. This variable is used to ensure the\n        // value returned by findAndSetHtmlForTemplate is returned by\n        // applySsrOrCsrTemplate.\n        const element = {};\n        findAndSetHtmlForTemplate.returns(element);\n        return ssrTemplateHelper.applySsrOrCsrTemplate({}, {\n          html: '<div>some template</div>'\n        }).then(renderedHTML => {\n          expect(findAndSetHtmlForTemplate).to.have.been.calledWith({}, '<div>some template</div>');\n          expect(renderedHTML).to.equal(element);\n        });\n      });","file":"unit/test-ssr-template-helper.js","skipped":false,"dir":"test"},{"name":"should throw error if html template is not defined","suites":["rendering templates","applySsrOrCsrTemplate"],"updatePoint":{"line":127,"column":60,"index":4954},"line":127,"code":"      it('should throw error if html template is not defined', () => {\n        allowConsoleError(() => {\n          expect(() => {\n            ssrTemplateHelper.applySsrOrCsrTemplate({}, {\n              html: null\n            });\n          }).to.throw(/Skipping template rendering due to failed fetch/);\n        });\n      });","file":"unit/test-ssr-template-helper.js","skipped":false,"dir":"test"},{"name":"should throw if trying to ssr from an untrusted viewer","suites":["rendering templates","applySsrOrCsrTemplate"],"updatePoint":{"line":136,"column":64,"index":5283},"line":136,"code":"      it('should throw if trying to ssr from an untrusted viewer', () => {\n        viewer.isTrustedViewer = () => Promise.resolve(false);\n        const errorMsg = /Refused to attempt SSR in untrusted viewer: /;\n        expectAsyncConsoleError(errorMsg);\n        ssrTemplateHelper.applySsrOrCsrTemplate({}, {\n          html: '<div>some templates</div>'\n        }).then(() => Promise.reject(), error => expect(error).to.match(errorMsg));\n      });","file":"unit/test-ssr-template-helper.js","skipped":false,"dir":"test"},{"name":"should render template ","suites":["rendering templates","applySsrOrCsrTemplate"],"updatePoint":{"line":144,"column":33,"index":5698},"line":144,"code":"      it('should render template ', () => {\n        hasCapabilityStub.withArgs('viewerRenderTemplate').returns(false);\n        ssrTemplateHelper.applySsrOrCsrTemplate({}, {\n          data: '<div>some template</div>'\n        });\n        expect(findAndRenderTemplate).to.have.been.calledWith({}, {\n          data: '<div>some template</div>'\n        });\n      });","file":"unit/test-ssr-template-helper.js","skipped":false,"dir":"test"},{"name":"should set template array ","suites":["rendering templates","applySsrOrCsrTemplate"],"updatePoint":{"line":153,"column":36,"index":6062},"line":153,"code":"      it('should set template array ', () => {\n        hasCapabilityStub.withArgs('viewerRenderTemplate').returns(false);\n        ssrTemplateHelper.applySsrOrCsrTemplate({}, [{\n          data: '<div>some template</div>'\n        }]);\n        expect(findAndRenderTemplateArray).to.have.been.calledWith({}, [{\n          data: '<div>some template</div>'\n        }]);\n      });","file":"unit/test-ssr-template-helper.js","skipped":false,"dir":"test"},{"name":"returns element (direct)","suites":["getAutofocusElementForShowAction"],"updatePoint":{"line":100,"column":32,"index":3740},"line":100,"code":"    it('returns element (direct)', () => {\n      const el = html` <input autofocus /> `;\n      expect(getAutofocusElementForShowAction(el)).to.equal(el);\n    });","file":"unit/test-standard-actions.js","skipped":false,"dir":"test"},{"name":"returns element (wrapped)","suites":["getAutofocusElementForShowAction"],"updatePoint":{"line":104,"column":33,"index":3903},"line":104,"code":"    it('returns element (wrapped)', () => {\n      const el = html` <input autofocus /> `;\n      const wrapper = html` <div><div></div></div> `;\n      wrapper.firstElementChild.appendChild(el);\n      expect(getAutofocusElementForShowAction(wrapper)).to.equal(el);\n    });","file":"unit/test-standard-actions.js","skipped":false,"dir":"test"},{"name":"returns null","suites":["getAutofocusElementForShowAction"],"updatePoint":{"line":110,"column":20,"index":4161},"line":110,"code":"    it('returns null', () => {\n      const el = html`\n        <div>\n          <div><input /></div>\n        </div>\n      `;\n      expect(getAutofocusElementForShowAction(el)).to.be.null;\n    });","file":"unit/test-standard-actions.js","skipped":false,"dir":"test"},{"name":"should handle normal element","suites":["\"hide\" action"],"updatePoint":{"line":120,"column":36,"index":4413},"line":120,"code":"    it('should handle normal element', () => {\n      const element = createElement();\n      const invocation = trustedInvocation({\n        node: element\n      });\n      standardActions.handleHide_(invocation);\n      expectElementToHaveBeenHidden(element);\n    });","file":"unit/test-standard-actions.js","skipped":false,"dir":"test"},{"name":"should handle AmpElement","suites":["\"hide\" action"],"updatePoint":{"line":128,"column":32,"index":4673},"line":128,"code":"    it('should handle AmpElement', () => {\n      const element = createAmpElement();\n      const invocation = trustedInvocation({\n        node: element\n      });\n      standardActions.handleHide_(invocation);\n      expectAmpElementToHaveBeenHidden(element);\n    });","file":"unit/test-standard-actions.js","skipped":false,"dir":"test"},{"name":"should handle normal element (toggle)","suites":["\"show\" action"],"updatePoint":{"line":138,"column":45,"index":4994},"line":138,"code":"    it('should handle normal element (toggle)', () => {\n      const element = createElement();\n      toggle(element, false);\n      const invocation = trustedInvocation({\n        node: element\n      });\n      standardActions.handleShow_(invocation);\n      expectElementToHaveBeenShown(element);\n    });","file":"unit/test-standard-actions.js","skipped":false,"dir":"test"},{"name":"should handle normal element (hidden attribute)","suites":["\"show\" action"],"updatePoint":{"line":147,"column":55,"index":5306},"line":147,"code":"    it('should handle normal element (hidden attribute)', () => {\n      const element = createElement();\n      element.setAttribute('hidden', '');\n      const invocation = trustedInvocation({\n        node: element\n      });\n      standardActions.handleShow_(invocation);\n      expectElementToHaveBeenShown(element);\n    });","file":"unit/test-standard-actions.js","skipped":false,"dir":"test"},{"name":"should handle AmpElement (toggle)","suites":["\"show\" action"],"updatePoint":{"line":156,"column":41,"index":5616},"line":156,"code":"    it('should handle AmpElement (toggle)', () => {\n      const element = createAmpElement();\n      toggle(element, false);\n      const invocation = trustedInvocation({\n        node: element\n      });\n      standardActions.handleShow_(invocation);\n      expectAmpElementToHaveBeenShown(element);\n    });","file":"unit/test-standard-actions.js","skipped":false,"dir":"test"},{"name":"should handle AmpElement (hidden attribute)","suites":["\"show\" action"],"updatePoint":{"line":165,"column":51,"index":5930},"line":165,"code":"    it('should handle AmpElement (hidden attribute)', () => {\n      const element = createAmpElement();\n      element.setAttribute('hidden', '');\n      const invocation = trustedInvocation({\n        node: element\n      });\n      standardActions.handleShow_(invocation);\n      expectAmpElementToHaveBeenShown(element);\n    });","file":"unit/test-standard-actions.js","skipped":false,"dir":"test"},{"name":"executes asynchronously when no autofocus (wrapped)","suites":["\"show\" action","iOS force sync"],"updatePoint":{"line":180,"column":61,"index":6419},"line":180,"code":"      it('executes asynchronously when no autofocus (wrapped)', () => {\n        const node = html`\n          <div>\n            <div><input /></div>\n          </div>\n        `;\n        standardActions.handleShow_(trustedInvocation({\n          node\n        }));\n        expectElementToHaveBeenShown(node);\n      });","file":"unit/test-standard-actions.js","skipped":false,"dir":"test"},{"name":"executes asynchronously when no autofocus (direct)","suites":["\"show\" action","iOS force sync"],"updatePoint":{"line":191,"column":60,"index":6732},"line":191,"code":"      it('executes asynchronously when no autofocus (direct)', () => {\n        const node = html` <input /> `;\n        standardActions.handleShow_(trustedInvocation({\n          node\n        }));\n        expectElementToHaveBeenShown(node);\n      });","file":"unit/test-standard-actions.js","skipped":false,"dir":"test"},{"name":"executes synchronously when autofocus (wrapped)","suites":["\"show\" action","iOS force sync"],"updatePoint":{"line":198,"column":57,"index":6978},"line":198,"code":"      it('executes synchronously when autofocus (wrapped)', () => {\n        mutateElementStub = stubMutateNoop();\n        const node = html`\n          <div>\n            <div><input autofocus /></div>\n          </div>\n        `;\n        standardActions.handleShow_(trustedInvocation({\n          node\n        }));\n        expectElementToHaveBeenShown(node);\n      });","file":"unit/test-standard-actions.js","skipped":false,"dir":"test"},{"name":"executes synchronously when autofocus (direct)","suites":["\"show\" action","iOS force sync"],"updatePoint":{"line":210,"column":56,"index":7343},"line":210,"code":"      it('executes synchronously when autofocus (direct)', () => {\n        mutateElementStub = stubMutateNoop();\n        const node = html` <input autofocus /> `;\n        standardActions.handleShow_(trustedInvocation({\n          node\n        }));\n        expectElementToHaveBeenShown(node);\n      });","file":"unit/test-standard-actions.js","skipped":false,"dir":"test"},{"name":"focuses [autofocus] element synchronously (direct)","suites":["\"show\" action","autofocus","iOS force sync"],"updatePoint":{"line":228,"column":62,"index":7888},"line":228,"code":"        it('focuses [autofocus] element synchronously (direct)', () => {\n          mutateElementStub = stubMutateNoop();\n          const node = html` <input autofocus /> `;\n          node.focus = env.sandbox.spy();\n          standardActions.handleShow_(trustedInvocation({\n            node\n          }));\n          expectElementToHaveBeenShown(node);\n          expect(node.focus).to.have.been.calledOnce;\n        });","file":"unit/test-standard-actions.js","skipped":false,"dir":"test"},{"name":"focuses [autofocus] element synchronously (wrapped)","suites":["\"show\" action","autofocus","iOS force sync"],"updatePoint":{"line":238,"column":63,"index":8306},"line":238,"code":"        it('focuses [autofocus] element synchronously (wrapped)', () => {\n          mutateElementStub = stubMutateNoop();\n          const wrapper = html` <div><div></div></div> `;\n          const node = html` <input autofocus /> `;\n          node.focus = env.sandbox.spy();\n          wrapper.firstElementChild.appendChild(node);\n          standardActions.handleShow_(trustedInvocation({\n            node: wrapper\n          }));\n          expectElementToHaveBeenShown(wrapper);\n          expect(node.focus).to.have.been.calledOnce;\n        });","file":"unit/test-standard-actions.js","skipped":false,"dir":"test"},{"name":"does not focus element","suites":["\"show\" action","autofocus","iOS force sync"],"updatePoint":{"line":250,"column":34,"index":8820},"line":250,"code":"        it('does not focus element', () => {\n          const node = html` <input /> `;\n          node.focus = env.sandbox.spy();\n          standardActions.handleShow_(trustedInvocation({\n            node\n          }));\n          expectElementMutatedAsync(node);\n          expect(node.focus).to.not.have.been.called;\n        });","file":"unit/test-standard-actions.js","skipped":false,"dir":"test"},{"name":"focuses [autofocus] element asynchronously (direct)","suites":["\"show\" action","autofocus","iOS force sync"],"updatePoint":{"line":260,"column":61,"index":9185},"line":260,"code":"      it('focuses [autofocus] element asynchronously (direct)', () => {\n        stubPlatformIsIos(false);\n        const node = html` <input autofocus /> `;\n        node.focus = env.sandbox.spy();\n        standardActions.handleShow_(trustedInvocation({\n          node\n        }));\n        expectElementMutatedAsync(node);\n        expect(node.focus).to.have.been.calledOnce;\n      });","file":"unit/test-standard-actions.js","skipped":false,"dir":"test"},{"name":"focuses [autofocus] element asynchronously (wrapped)","suites":["\"show\" action","autofocus","iOS force sync"],"updatePoint":{"line":270,"column":62,"index":9569},"line":270,"code":"      it('focuses [autofocus] element asynchronously (wrapped)', () => {\n        stubPlatformIsIos(false);\n        const wrapper = html` <div><div></div></div> `;\n        const node = html` <input autofocus /> `;\n        node.focus = env.sandbox.spy();\n        wrapper.firstElementChild.appendChild(node);\n        standardActions.handleShow_(trustedInvocation({\n          node: wrapper\n        }));\n        expectElementMutatedAsync(wrapper);\n        expect(node.focus).to.have.been.calledOnce;\n      });","file":"unit/test-standard-actions.js","skipped":false,"dir":"test"},{"name":"does not focus element","suites":["\"show\" action","autofocus","iOS force sync"],"updatePoint":{"line":282,"column":32,"index":10044},"line":282,"code":"      it('does not focus element', () => {\n        const node = html` <input /> `;\n        node.focus = env.sandbox.spy();\n        standardActions.handleShow_(trustedInvocation({\n          node\n        }));\n        expectElementMutatedAsync(node);\n        expect(node.focus).to.not.have.been.called;\n      });","file":"unit/test-standard-actions.js","skipped":false,"dir":"test"},{"name":"should show normal element when hidden (toggle)","suites":["\"toggle\" action"],"updatePoint":{"line":294,"column":55,"index":10429},"line":294,"code":"    it('should show normal element when hidden (toggle)', () => {\n      const element = createElement();\n      toggle(element, false);\n      const invocation = trustedInvocation({\n        node: element\n      });\n      standardActions.handleToggle_(invocation);\n      expectElementToHaveBeenShown(element);\n    });","file":"unit/test-standard-actions.js","skipped":false,"dir":"test"},{"name":"should show normal element when hidden (hidden attribute)","suites":["\"toggle\" action"],"updatePoint":{"line":303,"column":65,"index":10753},"line":303,"code":"    it('should show normal element when hidden (hidden attribute)', () => {\n      const element = createElement();\n      element.setAttribute('hidden', '');\n      const invocation = trustedInvocation({\n        node: element\n      });\n      standardActions.handleToggle_(invocation);\n      expectElementToHaveBeenShown(element);\n    });","file":"unit/test-standard-actions.js","skipped":false,"dir":"test"},{"name":"should hide normal element when shown","suites":["\"toggle\" action"],"updatePoint":{"line":312,"column":45,"index":11069},"line":312,"code":"    it('should hide normal element when shown', () => {\n      const element = createElement();\n      const invocation = trustedInvocation({\n        node: element\n      });\n      standardActions.handleToggle_(invocation);\n      expectElementToHaveBeenHidden(element);\n    });","file":"unit/test-standard-actions.js","skipped":false,"dir":"test"},{"name":"should show AmpElement when hidden (toggle)","suites":["\"toggle\" action"],"updatePoint":{"line":320,"column":51,"index":11350},"line":320,"code":"    it('should show AmpElement when hidden (toggle)', () => {\n      const element = createAmpElement();\n      toggle(element, false);\n      const invocation = trustedInvocation({\n        node: element\n      });\n      standardActions.handleToggle_(invocation);\n      expectAmpElementToHaveBeenShown(element);\n    });","file":"unit/test-standard-actions.js","skipped":false,"dir":"test"},{"name":"should show AmpElement when hidden (hidden attribute)","suites":["\"toggle\" action"],"updatePoint":{"line":329,"column":61,"index":11676},"line":329,"code":"    it('should show AmpElement when hidden (hidden attribute)', () => {\n      const element = createAmpElement();\n      element.setAttribute('hidden', '');\n      const invocation = trustedInvocation({\n        node: element\n      });\n      standardActions.handleToggle_(invocation);\n      expectAmpElementToHaveBeenShown(element);\n    });","file":"unit/test-standard-actions.js","skipped":false,"dir":"test"},{"name":"should hide AmpElement when shown","suites":["\"toggle\" action"],"updatePoint":{"line":338,"column":41,"index":11994},"line":338,"code":"    it('should hide AmpElement when shown', () => {\n      const element = createAmpElement();\n      const invocation = trustedInvocation({\n        node: element\n      });\n      standardActions.handleToggle_(invocation);\n      expectAmpElementToHaveBeenHidden(element);\n    });","file":"unit/test-standard-actions.js","skipped":false,"dir":"test"},{"name":"should add class when not in classList","suites":["\"toggleClass\" action"],"updatePoint":{"line":349,"column":46,"index":12369},"line":349,"code":"    it('should add class when not in classList', () => {\n      const element = createElement();\n      const invocation = {\n        node: element,\n        satisfiesTrust: () => true,\n        args: {\n          'class': dummyClass\n        }\n      };\n      standardActions.handleToggleClass_(invocation);\n      expectElementToHaveClass(element, dummyClass);\n    });","file":"unit/test-standard-actions.js","skipped":false,"dir":"test"},{"name":"should delete class when in classList","suites":["\"toggleClass\" action"],"updatePoint":{"line":361,"column":45,"index":12730},"line":361,"code":"    it('should delete class when in classList', () => {\n      const element = createElement();\n      element.classList.add(dummyClass);\n      const invocation = {\n        node: element,\n        satisfiesTrust: () => true,\n        args: {\n          'class': dummyClass\n        }\n      };\n      standardActions.handleToggleClass_(invocation);\n      expectElementToDropClass(element, dummyClass);\n    });","file":"unit/test-standard-actions.js","skipped":false,"dir":"test"},{"name":"should add classes with amp- and -amp- prefixes","suites":["\"toggleClass\" action"],"updatePoint":{"line":374,"column":55,"index":13142},"line":374,"code":"    it('should add classes with amp- and -amp- prefixes', () => {\n      const element = createElement();\n      const invocation1 = {\n        node: element,\n        satisfiesTrust: () => true,\n        args: {\n          'class': 'amp-test-class-toggle'\n        }\n      };\n      standardActions.handleToggleClass_(invocation1);\n      expect(element.classList.contains('amp-test-class-toggle')).to.be.true;\n      const invocation2 = {\n        node: element,\n        satisfiesTrust: () => true,\n        args: {\n          'class': '-amp-test-class-toggle'\n        }\n      };\n      standardActions.handleToggleClass_(invocation2);\n      expect(element.classList.contains('-amp-test-class-toggle')).to.be.true;\n    });","file":"unit/test-standard-actions.js","skipped":false,"dir":"test"},{"name":"should delete classes with amp- and -amp- prefixes","suites":["\"toggleClass\" action"],"updatePoint":{"line":395,"column":58,"index":13856},"line":395,"code":"    it('should delete classes with amp- and -amp- prefixes', () => {\n      const element = createElement();\n      element.classList.add('amp-test-class-toggle');\n      const invocation1 = {\n        node: element,\n        satisfiesTrust: () => true,\n        args: {\n          'class': 'amp-test-class-toggle'\n        }\n      };\n      standardActions.handleToggleClass_(invocation1);\n      expect(element.classList.contains('amp-test-class-toggle')).to.be.false;\n      element.classList.add('-amp-test-class-toggle');\n      const invocation2 = {\n        node: element,\n        satisfiesTrust: () => true,\n        args: {\n          'class': '-amp-test-class-toggle'\n        }\n      };\n      standardActions.handleToggleClass_(invocation2);\n      expect(element.classList.contains('amp-test-class-toggle')).to.be.false;\n    });","file":"unit/test-standard-actions.js","skipped":false,"dir":"test"},{"name":"should not add amp internal classes","suites":["\"toggleClass\" action"],"updatePoint":{"line":418,"column":43,"index":14665},"line":418,"code":"    it('should not add amp internal classes', () => {\n      const element = createElement();\n      const invocation = {\n        node: element,\n        satisfiesTrust: () => true,\n        args: {\n          'class': 'i-amphtml-test-class-toggle'\n        }\n      };\n      standardActions.handleToggleClass_(invocation);\n      expect(element.classList.contains('i-amphtml-test-class-toggle')).to.be.false;\n    });","file":"unit/test-standard-actions.js","skipped":false,"dir":"test"},{"name":"should not delete amp internal classes","suites":["\"toggleClass\" action"],"updatePoint":{"line":430,"column":46,"index":15078},"line":430,"code":"    it('should not delete amp internal classes', () => {\n      const element = createElement();\n      element.classList.add('i-amphtml-test-class-toggle');\n      const invocation = {\n        node: element,\n        satisfiesTrust: () => true,\n        args: {\n          'class': 'i-amphtml-test-class-toggle'\n        }\n      };\n      standardActions.handleToggleClass_(invocation);\n      expect(element.classList.contains('i-amphtml-test-class-toggle')).to.be.true;\n    });","file":"unit/test-standard-actions.js","skipped":false,"dir":"test"},{"name":"should add class when not in classList, when force=true","suites":["\"toggleClass\" action"],"updatePoint":{"line":443,"column":63,"index":15567},"line":443,"code":"    it('should add class when not in classList, when force=true', () => {\n      const element = createElement();\n      const invocation = {\n        node: element,\n        satisfiesTrust: () => true,\n        args: {\n          'class': dummyClass,\n          'force': true\n        }\n      };\n      standardActions.handleToggleClass_(invocation);\n      expectElementToHaveClass(element, dummyClass);\n    });","file":"unit/test-standard-actions.js","skipped":false,"dir":"test"},{"name":"should keep class when in classList, when force=true","suites":["\"toggleClass\" action"],"updatePoint":{"line":456,"column":60,"index":15968},"line":456,"code":"    it('should keep class when in classList, when force=true', () => {\n      const element = createElement();\n      element.classList.add(dummyClass);\n      const invocation = {\n        node: element,\n        satisfiesTrust: () => true,\n        args: {\n          'class': dummyClass,\n          'force': true\n        }\n      };\n      standardActions.handleToggleClass_(invocation);\n      expectElementToHaveClass(element, dummyClass);\n    });","file":"unit/test-standard-actions.js","skipped":false,"dir":"test"},{"name":"should not add when not in classList, when force=false","suites":["\"toggleClass\" action"],"updatePoint":{"line":470,"column":62,"index":16412},"line":470,"code":"    it('should not add when not in classList, when force=false', () => {\n      const element = createElement();\n      const invocation = {\n        node: element,\n        satisfiesTrust: () => true,\n        args: {\n          'class': dummyClass,\n          'force': false\n        }\n      };\n      standardActions.handleToggleClass_(invocation);\n      expectElementToDropClass(element, dummyClass);\n    });","file":"unit/test-standard-actions.js","skipped":false,"dir":"test"},{"name":"should delete class when in classList, when force=false","suites":["\"toggleClass\" action"],"updatePoint":{"line":483,"column":63,"index":16817},"line":483,"code":"    it('should delete class when in classList, when force=false', () => {\n      const element = createElement();\n      element.classList.add(dummyClass);\n      const invocation = {\n        node: element,\n        satisfiesTrust: () => true,\n        args: {\n          'class': dummyClass,\n          'force': false\n        }\n      };\n      standardActions.handleToggleClass_(invocation);\n      expectElementToDropClass(element, dummyClass);\n    });","file":"unit/test-standard-actions.js","skipped":false,"dir":"test"},{"name":"should set checked property to false when checked property is true","suites":["\"toggleChecked\" action"],"updatePoint":{"line":499,"column":74,"index":17325},"line":499,"code":"    it('should set checked property to false when checked property is true', () => {\n      const element = createElement();\n      element.type = 'checkbox';\n      element.checked = true;\n      const invocation = {\n        node: element,\n        satisfiesTrust: () => true,\n        args: {}\n      };\n      standardActions.handleToggleChecked_(invocation);\n      expectCheckboxToHaveCheckedStateFalse(element);\n    });","file":"unit/test-standard-actions.js","skipped":false,"dir":"test"},{"name":"should set checked property to true when checked property is false","suites":["\"toggleChecked\" action"],"updatePoint":{"line":511,"column":74,"index":17742},"line":511,"code":"    it('should set checked property to true when checked property is false', () => {\n      const element = createElement();\n      element.type = 'checkbox';\n      element.checked = false;\n      const invocation = {\n        node: element,\n        satisfiesTrust: () => true,\n        args: {}\n      };\n      standardActions.handleToggleChecked_(invocation);\n      expectCheckboxToHaveCheckedStateTrue(element);\n    });","file":"unit/test-standard-actions.js","skipped":false,"dir":"test"},{"name":"should set checked property to false when checked property is true and args is null","suites":["\"toggleChecked\" action"],"updatePoint":{"line":523,"column":91,"index":18176},"line":523,"code":"    it('should set checked property to false when checked property is true and args is null', () => {\n      const element = createElement();\n      element.type = 'checkbox';\n      element.checked = true;\n      const invocation = {\n        node: element,\n        satisfiesTrust: () => true,\n        args: null\n      };\n      standardActions.handleToggleChecked_(invocation);\n      expectCheckboxToHaveCheckedStateFalse(element);\n    });","file":"unit/test-standard-actions.js","skipped":false,"dir":"test"},{"name":"should set checked property to true when checked property is false and args is null","suites":["\"toggleChecked\" action"],"updatePoint":{"line":535,"column":91,"index":18612},"line":535,"code":"    it('should set checked property to true when checked property is false and args is null', () => {\n      const element = createElement();\n      element.type = 'checkbox';\n      element.checked = false;\n      const invocation = {\n        node: element,\n        satisfiesTrust: () => true,\n        args: null\n      };\n      standardActions.handleToggleChecked_(invocation);\n      expectCheckboxToHaveCheckedStateTrue(element);\n    });","file":"unit/test-standard-actions.js","skipped":false,"dir":"test"},{"name":"should set checked property to true when force=true","suites":["\"toggleChecked\" action"],"updatePoint":{"line":547,"column":59,"index":19016},"line":547,"code":"    it('should set checked property to true when force=true', () => {\n      const element = createElement();\n      element.type = 'checkbox';\n      const invocation = {\n        node: element,\n        satisfiesTrust: () => true,\n        args: {\n          'force': true\n        }\n      };\n      standardActions.handleToggleChecked_(invocation);\n      expectCheckboxToHaveCheckedStateTrue(element);\n    });","file":"unit/test-standard-actions.js","skipped":false,"dir":"test"},{"name":"should set checked property to false when force=false","suites":["\"toggleChecked\" action"],"updatePoint":{"line":560,"column":61,"index":19422},"line":560,"code":"    it('should set checked property to false when force=false', () => {\n      const element = createElement();\n      element.type = 'checkbox';\n      const invocation = {\n        node: element,\n        satisfiesTrust: () => true,\n        args: {\n          'force': false\n        }\n      };\n      standardActions.handleToggleChecked_(invocation);\n      expectCheckboxToHaveCheckedStateFalse(element);\n    });","file":"unit/test-standard-actions.js","skipped":false,"dir":"test"},{"name":"should handle normal element","suites":["\"scrollTo\" action"],"updatePoint":{"line":575,"column":36,"index":19851},"line":575,"code":"    it('should handle normal element', () => {\n      const element = createElement();\n      const invocation = trustedInvocation({\n        node: element\n      });\n      standardActions.handleScrollTo_(invocation);\n      expectAmpElementToHaveBeenScrolledIntoView(element);\n    });","file":"unit/test-standard-actions.js","skipped":false,"dir":"test"},{"name":"should handle AmpElement","suites":["\"scrollTo\" action"],"updatePoint":{"line":583,"column":32,"index":20128},"line":583,"code":"    it('should handle AmpElement', () => {\n      const element = createAmpElement();\n      const invocation = trustedInvocation({\n        node: element\n      });\n      standardActions.handleScrollTo_(invocation);\n      expectAmpElementToHaveBeenScrolledIntoView(element);\n    });","file":"unit/test-standard-actions.js","skipped":false,"dir":"test"},{"name":"should handle normal element","suites":["\"focus\" action"],"updatePoint":{"line":593,"column":36,"index":20455},"line":593,"code":"    it('should handle normal element', () => {\n      const element = createElement();\n      const invocation = trustedInvocation({\n        node: element\n      });\n      const focusStub = env.sandbox.stub(element, 'focus');\n      standardActions.handleFocus_(invocation);\n      expect(focusStub).to.be.calledOnce;\n    });","file":"unit/test-standard-actions.js","skipped":false,"dir":"test"},{"name":"should handle AmpElement","suites":["\"focus\" action"],"updatePoint":{"line":602,"column":32,"index":20772},"line":602,"code":"    it('should handle AmpElement', () => {\n      const element = createAmpElement();\n      const invocation = trustedInvocation({\n        node: element\n      });\n      const focusStub = env.sandbox.stub(element, 'focus');\n      standardActions.handleFocus_(invocation);\n      expect(focusStub).to.be.calledOnce;\n    });","file":"unit/test-standard-actions.js","skipped":false,"dir":"test"},{"name":"should be implemented","suites":["\"AMP\" global target","navigateTo"],"updatePoint":{"line":645,"column":31,"index":21864},"line":645,"code":"      it('should be implemented', () => {\n        // Should check trust and fail.\n        invocation.satisfiesTrust = () => false;\n        standardActions.handleAmpTarget_(invocation);\n        expect(navigator.navigateTo).to.be.not.called;\n\n        // Should succeed.\n        invocation.satisfiesTrust = () => true;\n        return standardActions.handleAmpTarget_(invocation).then(() => {\n          expect(navigator.navigateTo).to.be.calledOnce;\n          expect(navigator.navigateTo).to.be.calledWithExactly(win, 'http://bar.com', 'AMP.navigateTo', {\n            target: undefined,\n            opener: undefined\n          });\n        });\n      });","file":"unit/test-standard-actions.js","skipped":false,"dir":"test"},{"name":"should pass if node does not have throwIfCannotNavigate()","suites":["\"AMP\" global target","navigateTo"],"updatePoint":{"line":661,"column":67,"index":22549},"line":661,"code":"      it('should pass if node does not have throwIfCannotNavigate()', () => {\n        invocation.caller.tagName = 'AMP-FOO';\n        invocation.caller.getImpl = () => Promise.resolve({});\n        return standardActions.handleAmpTarget_(invocation).then(() => {\n          expect(navigator.navigateTo).to.be.calledOnce;\n          expect(navigator.navigateTo).to.be.calledWithExactly(win, 'http://bar.com', 'AMP.navigateTo', {\n            target: undefined,\n            opener: undefined\n          });\n        });\n      });","file":"unit/test-standard-actions.js","skipped":false,"dir":"test"},{"name":"should check throwIfCannotNavigate() for AMP elements","suites":["\"AMP\" global target","navigateTo"],"updatePoint":{"line":685,"column":63,"index":23688},"line":685,"code":"      it('should check throwIfCannotNavigate() for AMP elements', function* () {\n        const userError = env.sandbox.stub(user(), 'error');\n        invocation.caller.tagName = 'AMP-FOO';\n\n        // Should succeed if throwIfCannotNavigate() is not implemented.\n        invocation.caller.getImpl = () => Promise.resolve({});\n        yield standardActions.handleAmpTarget_(invocation);\n        expect(navigator.navigateTo).to.be.calledOnce;\n        expect(navigator.navigateTo).to.be.calledWithExactly(win, 'http://bar.com', 'AMP.navigateTo', {\n          target: undefined,\n          opener: undefined\n        });\n\n        // Should succeed if throwIfCannotNavigate() returns null.\n        invocation.caller.getImpl = () => Promise.resolve({\n          throwIfCannotNavigate: () => null\n        });\n        yield standardActions.handleAmpTarget_(invocation);\n        expect(navigator.navigateTo).to.be.calledTwice;\n        expect(navigator.navigateTo.getCall(1)).to.be.calledWithExactly(win, 'http://bar.com', 'AMP.navigateTo', {\n          target: undefined,\n          opener: undefined\n        });\n\n        // Should fail if throwIfCannotNavigate() throws an error.\n        invocation.caller.getImpl = () => Promise.resolve({\n          throwIfCannotNavigate: () => {\n            throw new Error('Fake error.');\n          }\n        });\n        yield standardActions.handleAmpTarget_(invocation);\n        expect(navigator.navigateTo).to.be.calledTwice;\n        expect(userError).to.be.calledWith('STANDARD-ACTIONS', env.sandbox.match(arg => arg.message === 'Fake error.'));\n      });","file":"unit/test-standard-actions.js","skipped":false,"dir":"test"},{"name":"should be implemented","suites":["\"AMP\" global target","closeOrNavigateTo"],"updatePoint":{"line":740,"column":31,"index":25961},"line":740,"code":"      it('should be implemented', async () => {\n        await standardActions.handleAmpTarget_(invocation);\n        expect(closeOrNavigateToSpy).to.be.calledOnce;\n        expect(closeOrNavigateToSpy).to.be.calledWithExactly(invocation);\n      });","file":"unit/test-standard-actions.js","skipped":false,"dir":"test"},{"name":"should close window if allowed","suites":["\"AMP\" global target","closeOrNavigateTo"],"updatePoint":{"line":745,"column":40,"index":26217},"line":745,"code":"      it('should close window if allowed', async () => {\n        win.opener = {};\n        win.parent = win;\n        await standardActions.handleAmpTarget_(invocation);\n        expect(winCloseStub).to.be.calledOnce;\n        expect(navigateToStub).to.be.not.called;\n      });","file":"unit/test-standard-actions.js","skipped":false,"dir":"test"},{"name":"should NOT close if no opener","suites":["\"AMP\" global target","closeOrNavigateTo"],"updatePoint":{"line":752,"column":39,"index":26490},"line":752,"code":"      it('should NOT close if no opener', async () => {\n        win.opener = null;\n        win.parent = win;\n        await standardActions.handleAmpTarget_(invocation);\n        expect(winCloseStub).to.be.not.called;\n      });","file":"unit/test-standard-actions.js","skipped":false,"dir":"test"},{"name":"should NOT close if has a parent","suites":["\"AMP\" global target","closeOrNavigateTo"],"updatePoint":{"line":758,"column":42,"index":26719},"line":758,"code":"      it('should NOT close if has a parent', async () => {\n        win.opener = {};\n        win.parent = {};\n        await standardActions.handleAmpTarget_(invocation);\n        expect(winCloseStub).to.be.not.called;\n      });","file":"unit/test-standard-actions.js","skipped":false,"dir":"test"},{"name":"should NOT close if in multi-doc","suites":["\"AMP\" global target","closeOrNavigateTo"],"updatePoint":{"line":764,"column":42,"index":26945},"line":764,"code":"      it('should NOT close if in multi-doc', async () => {\n        win.opener = {};\n        win.parent = win;\n        env.sandbox.stub(ampdoc, 'isSingleDoc').returns(false);\n        await standardActions.handleAmpTarget_(invocation);\n        expect(winCloseStub).to.be.not.called;\n      });","file":"unit/test-standard-actions.js","skipped":false,"dir":"test"},{"name":"should navigate if not allowed to close","suites":["\"AMP\" global target","closeOrNavigateTo"],"updatePoint":{"line":771,"column":49,"index":27243},"line":771,"code":"      it('should navigate if not allowed to close', async () => {\n        win.opener = null;\n        win.parent = win;\n        env.sandbox.stub(ampdoc, 'isSingleDoc').returns(false);\n        await standardActions.handleAmpTarget_(invocation);\n        expect(winCloseStub).to.be.not.called;\n        expect(navigateToStub).to.be.called;\n      });","file":"unit/test-standard-actions.js","skipped":false,"dir":"test"},{"name":"should navigate if win.close rejects","suites":["\"AMP\" global target","closeOrNavigateTo"],"updatePoint":{"line":779,"column":46,"index":27585},"line":779,"code":"      it('should navigate if win.close rejects', async () => {\n        win.opener = {};\n        win.parent = win;\n        winCloseStub.callsFake(() => {\n          win.closed = false;\n        });\n        await standardActions.handleAmpTarget_(invocation);\n        expect(navigateToStub).to.be.called;\n      });","file":"unit/test-standard-actions.js","skipped":false,"dir":"test"},{"name":"should implement goBack","suites":["\"AMP\" global target","closeOrNavigateTo"],"updatePoint":{"line":789,"column":31,"index":27888},"line":789,"code":"    it('should implement goBack', () => {\n      installHistoryServiceForDoc(ampdoc);\n      const history = Services.historyForDoc(ampdoc);\n      const goBackStub = env.sandbox.stub(history, 'goBack');\n      invocation.method = 'goBack';\n      standardActions.handleAmpTarget_(invocation);\n      expect(goBackStub).to.be.calledWithExactly(false);\n      goBackStub.resetHistory();\n      invocation.args = {\n        navigate: true\n      };\n      standardActions.handleAmpTarget_(invocation);\n      expect(goBackStub).to.be.calledWith(true);\n    });","file":"unit/test-standard-actions.js","skipped":false,"dir":"test"},{"name":"should implement optoutOfCid","suites":["\"AMP\" global target","closeOrNavigateTo"],"updatePoint":{"line":803,"column":36,"index":28439},"line":803,"code":"    it('should implement optoutOfCid', function* () {\n      const cid = cidServiceForDocForTesting(ampdoc);\n      const optoutStub = env.sandbox.stub(cid, 'optOut');\n      invocation.method = 'optoutOfCid';\n      standardActions.handleAmpTarget_(invocation);\n      yield macroTask();\n      expect(optoutStub).to.be.calledOnce;\n    });","file":"unit/test-standard-actions.js","skipped":false,"dir":"test"},{"name":"should implement setState()","suites":["\"AMP\" global target","closeOrNavigateTo"],"updatePoint":{"line":811,"column":35,"index":28773},"line":811,"code":"    it('should implement setState()', () => {\n      const element = createElement();\n      const bind = {\n        invoke: env.sandbox.stub()\n      };\n      // Bind.invoke() doesn't actually resolve with a value,\n      // but add one here to check that the promise is chained.\n      bind.invoke.returns(Promise.resolve('set-state-complete'));\n      env.sandbox.stub(Services, 'bindForDocOrNull').withArgs(element).returns(Promise.resolve(bind));\n      invocation.method = 'setState';\n      invocation.args = {\n        [RAW_OBJECT_ARGS_KEY]: '{foo: 123}'\n      };\n      invocation.node = element;\n      return standardActions.handleAmpTarget_(invocation).then(result => {\n        expect(result).to.equal('set-state-complete');\n        expect(bind.invoke).to.be.calledOnce;\n        expect(bind.invoke).to.be.calledWith(invocation);\n      });\n    });","file":"unit/test-standard-actions.js","skipped":false,"dir":"test"},{"name":"should implement pushState()","suites":["\"AMP\" global target","closeOrNavigateTo"],"updatePoint":{"line":831,"column":36,"index":29621},"line":831,"code":"    it('should implement pushState()', () => {\n      const element = createElement();\n      const bind = {\n        invoke: env.sandbox.stub()\n      };\n      // Bind.invoke() doesn't actually resolve with a value,\n      // but add one here to check that the promise is chained.\n      bind.invoke.returns(Promise.resolve('push-state-complete'));\n      env.sandbox.stub(Services, 'bindForDocOrNull').withArgs(element).returns(Promise.resolve(bind));\n      invocation.method = 'pushState';\n      invocation.args = {\n        [RAW_OBJECT_ARGS_KEY]: '{foo: 123}'\n      };\n      invocation.node = element;\n      return standardActions.handleAmpTarget_(invocation).then(result => {\n        expect(result).to.equal('push-state-complete');\n        expect(bind.invoke).to.be.calledOnce;\n        expect(bind.invoke).to.be.calledWith(invocation);\n      });\n    });","file":"unit/test-standard-actions.js","skipped":false,"dir":"test"},{"name":"should implement print","suites":["\"AMP\" global target","closeOrNavigateTo"],"updatePoint":{"line":851,"column":30,"index":30466},"line":851,"code":"    it('should implement print', () => {\n      const windowApi = {\n        print: () => {}\n      };\n      const printStub = env.sandbox.stub(windowApi, 'print');\n      invocation.method = 'print';\n      invocation.node = {\n        ownerDocument: {\n          defaultView: windowApi\n        }\n      };\n      standardActions.handleAmpTarget_(invocation);\n      expect(printStub).to.be.calledOnce;\n    });","file":"unit/test-standard-actions.js","skipped":false,"dir":"test"},{"name":"should implement scrollTo with element target","suites":["\"AMP\" global target","closeOrNavigateTo"],"updatePoint":{"line":865,"column":53,"index":30891},"line":865,"code":"    it('should implement scrollTo with element target', () => {\n      invocation.method = 'scrollTo';\n      invocation.args = {\n        id: 'testIdElement'\n      };\n      invocation.node = ampdoc;\n      const element = createElement();\n      const elStub = env.sandbox.stub(ampdoc, 'getElementById').returns(element);\n      const scrollStub = env.sandbox.stub(standardActions, 'handleScrollTo_').returns('scrollToResponsePromise');\n      const result = standardActions.handleAmpTarget_(invocation);\n      expect(elStub).to.be.calledWith('testIdElement');\n      invocation.node = element;\n      expect(scrollStub).to.be.calledWith(invocation);\n      expect(result).to.eql('scrollToResponsePromise');\n    });","file":"unit/test-standard-actions.js","skipped":false,"dir":"test"},{"name":"should set amp-dark-mode property in localStorage with yes","suites":["\"AMP\" global target","closeOrNavigateTo"],"updatePoint":{"line":904,"column":64,"index":32285},"line":904,"code":"  it('should set amp-dark-mode property in localStorage with yes', async () => {\n    getItemStub.withArgs('amp-dark-mode').returns('no');\n    await standardActions.handleAmpTarget_(invocation);\n    expect(getItemStub).to.be.calledOnce.and.calledWith('amp-dark-mode').and.returned('no');\n    expect(body).to.have.class('amp-dark-mode');\n    expect(setItemStub).to.be.calledOnce.and.calledWith('amp-dark-mode', 'yes');\n  });","file":"unit/test-standard-actions.js","skipped":false,"dir":"test"},{"name":"should set amp-dark-mode property in localStorage with no","suites":["\"AMP\" global target","closeOrNavigateTo"],"updatePoint":{"line":911,"column":63,"index":32707},"line":911,"code":"  it('should set amp-dark-mode property in localStorage with no', async () => {\n    getItemStub.withArgs('amp-dark-mode').returns('yes');\n    await standardActions.handleAmpTarget_(invocation);\n    expect(getItemStub).to.be.calledOnce.and.calledWith('amp-dark-mode').and.returned('yes');\n    expect(body).to.not.have.class('amp-dark-mode');\n    expect(setItemStub).to.be.calledOnce.and.calledWith('amp-dark-mode', 'no');\n  });","file":"unit/test-standard-actions.js","skipped":false,"dir":"test"},{"name":"should set amp-dark-mode property in localStorage with yes if it is null and user prefers light mode","suites":["\"AMP\" global target","closeOrNavigateTo"],"updatePoint":{"line":918,"column":106,"index":33177},"line":918,"code":"  it('should set amp-dark-mode property in localStorage with yes if it is null and user prefers light mode', async () => {\n    getItemStub.withArgs('amp-dark-mode').returns(null);\n    matchMediaStub.withArgs('(prefers-color-scheme: dark)').returns({\n      matches: false\n    });\n    await standardActions.handleAmpTarget_(invocation);\n    expect(getItemStub).to.be.calledOnce.and.calledWith('amp-dark-mode').and.returned(null);\n    expect(body).to.have.class('amp-dark-mode');\n    expect(setItemStub).to.be.calledOnce.and.calledWith('amp-dark-mode', 'yes');\n  });","file":"unit/test-standard-actions.js","skipped":false,"dir":"test"},{"name":"should set amp-dark-mode property in localStorage with no if it is null and user prefers dark mode","suites":["\"AMP\" global target","closeOrNavigateTo"],"updatePoint":{"line":928,"column":104,"index":33739},"line":928,"code":"  it('should set amp-dark-mode property in localStorage with no if it is null and user prefers dark mode', async () => {\n    getItemStub.withArgs('amp-dark-mode').returns(null);\n    matchMediaStub.withArgs('(prefers-color-scheme: dark)').returns({\n      matches: true\n    });\n    await standardActions.handleAmpTarget_(invocation);\n    expect(getItemStub).to.be.calledOnce.and.calledWith('amp-dark-mode').and.returned(null);\n    expect(body).to.not.have.class('amp-dark-mode');\n    expect(setItemStub).to.be.calledOnce.and.calledWith('amp-dark-mode', 'no');\n  });","file":"unit/test-standard-actions.js","skipped":false,"dir":"test"},{"name":"should add custom dark mode class to the body","suites":["\"AMP\" global target","closeOrNavigateTo"],"updatePoint":{"line":938,"column":51,"index":34250},"line":938,"code":"  it('should add custom dark mode class to the body', async () => {\n    body.setAttribute('data-prefers-dark-mode-class', 'is-dark-mode');\n    getItemStub.withArgs('amp-dark-mode').returns('no');\n    await standardActions.handleAmpTarget_(invocation);\n    expect(body).to.have.class('is-dark-mode');\n    expect(setItemStub).to.be.calledOnce.and.calledWith('amp-dark-mode', 'yes');\n  });","file":"unit/test-standard-actions.js","skipped":false,"dir":"test"},{"name":"should copy `static text` using navigator.clipboard api","suites":["\"AMP\" global target","closeOrNavigateTo"],"updatePoint":{"line":962,"column":61,"index":35065},"line":962,"code":"  it('should copy `static text` using navigator.clipboard api', async () => {\n    env.sandbox.spy(env.win.navigator.clipboard, 'writeText');\n    const doc = win.document;\n    const invocation = trustedInvocation({\n      args: {\n        'text': 'Hello World!'\n      },\n      tagOrTarget: 'AMP',\n      node: doc,\n      caller: doc\n    });\n    standardActions.handleCopy_(invocation);\n    await expect(env.win.navigator.clipboard.writeText).to.be.calledWith('Hello World!');\n  });","file":"unit/test-standard-actions.js","skipped":false,"dir":"test"},{"name":"should copy `DIV Content` using navigator.clipboard api","suites":["\"AMP\" global target","closeOrNavigateTo"],"updatePoint":{"line":976,"column":61,"index":35543},"line":976,"code":"  it('should copy `DIV Content` using navigator.clipboard api', async () => {\n    env.sandbox.spy(env.win.navigator.clipboard, 'writeText');\n    const divElement = win.document.createElement('div');\n    divElement.textContent = 'Hello World!';\n    const invocation = trustedInvocation({\n      node: divElement,\n      caller: divElement\n    });\n    standardActions.handleCopy_(invocation);\n    await expect(env.win.navigator.clipboard.writeText).to.be.calledWith('Hello World!');\n  });","file":"unit/test-standard-actions.js","skipped":false,"dir":"test"},{"name":"should copy `INPUT Value` using navigator.clipboard api","suites":["\"AMP\" global target","closeOrNavigateTo"],"updatePoint":{"line":987,"column":61,"index":36028},"line":987,"code":"  it('should copy `INPUT Value` using navigator.clipboard api', async () => {\n    env.sandbox.spy(env.win.navigator.clipboard, 'writeText');\n    const inputElement = win.document.createElement('input');\n    inputElement.value = 'Hello World!';\n    const invocation = trustedInvocation({\n      node: inputElement,\n      caller: inputElement\n    });\n    standardActions.handleCopy_(invocation);\n    await expect(env.win.navigator.clipboard.writeText).to.be.calledWith('Hello World!');\n  });","file":"unit/test-standard-actions.js","skipped":false,"dir":"test"},{"name":"should fall back to legacy \"doc.execCommand\" if clipboard is not on the window.navigator","suites":["\"AMP\" global target","closeOrNavigateTo"],"updatePoint":{"line":998,"column":94,"index":36550},"line":998,"code":"  it('should fall back to legacy \"doc.execCommand\" if clipboard is not on the window.navigator', async () => {\n    Object.defineProperties(env.win.navigator, {\n      clipboard: {\n        value: undefined,\n        writable: true\n      }\n    });\n    env.sandbox.spy(env.win.document, 'execCommand');\n    const divElement = win.document.createElement('div');\n    divElement.textContent = 'Live long and prosper!';\n    const invocation = trustedInvocation({\n      node: divElement,\n      caller: divElement\n    });\n    standardActions.handleCopy_(invocation);\n    await expect(env.win.document.execCommand).to.be.calledWith('copy');\n  });","file":"unit/test-standard-actions.js","skipped":false,"dir":"test"},{"name":"should configure store correctly","suites":["Storage"],"updatePoint":{"line":49,"column":40,"index":1484},"line":49,"code":"    it('should configure store correctly', () => {\n      const store1 = new Store({});\n      store1.set('key1', 'value1');\n      store1.set('key2', 'value2');\n      bindingMock.expects('loadBlob').withExactArgs('https://acme.com').returns(Promise.resolve(btoa(JSON.stringify(store1.obj)))).once();\n      return storage.get('key1').then(() => {\n        return storage.storePromise_;\n      }).then(store => {\n        expect(store.maxValues_).to.equal(8);\n      });\n    });","file":"unit/test-storage.js","skipped":false,"dir":"test"},{"name":"should initialize empty store with prototype-less objects","suites":["Storage"],"updatePoint":{"line":60,"column":65,"index":1980},"line":60,"code":"    it('should initialize empty store with prototype-less objects', () => {\n      bindingMock.expects('loadBlob').withExactArgs('https://acme.com').returns(Promise.resolve(null)).once();\n      return storage.get('key1').then(() => {\n        return storage.storePromise_;\n      }).then(store => {\n        expect(store.obj.__proto__).to.be.undefined;\n        expect(store.values_.__proto__).to.be.undefined;\n      });\n    });","file":"unit/test-storage.js","skipped":false,"dir":"test"},{"name":"should restore store with prototype-less objects","suites":["Storage"],"updatePoint":{"line":69,"column":56,"index":2395},"line":69,"code":"    it('should restore store with prototype-less objects', () => {\n      const store1 = new Store({});\n      store1.set('key1', 'value1');\n      store1.set('key2', 'value2');\n      bindingMock.expects('loadBlob').withExactArgs('https://acme.com').returns(Promise.resolve(btoa(JSON.stringify(store1.obj)))).once();\n      return storage.get('key1').then(() => {\n        return storage.storePromise_;\n      }).then(store => {\n        expect(store.obj.__proto__).to.be.undefined;\n        expect(store.values_.__proto__).to.be.undefined;\n      });\n    });","file":"unit/test-storage.js","skipped":false,"dir":"test"},{"name":"should get the value first time and reuse store","suites":["Storage"],"updatePoint":{"line":81,"column":55,"index":2945},"line":81,"code":"    it('should get the value first time and reuse store', () => {\n      const store1 = new Store({});\n      store1.set('key1', 'value1');\n      store1.set('key2', 'value2');\n      bindingMock.expects('loadBlob').withExactArgs('https://acme.com').returns(Promise.resolve(btoa(JSON.stringify(store1.obj)))).once();\n      expect(storage.storePromise_).to.not.exist;\n      const promise = storage.get('key1');\n      return promise.then(value => {\n        expect(value).to.equal('value1');\n        const store1Promise = storage.storePromise_;\n        expect(store1Promise).to.exist;\n\n        // Repeat.\n        return storage.get('key2').then(value2 => {\n          expect(value2).to.equal('value2');\n          expect(storage.storePromise_).to.equal(store1Promise);\n        });\n      });\n    });","file":"unit/test-storage.js","skipped":false,"dir":"test"},{"name":"should get the value from first ever request and reuse store","suites":["Storage"],"updatePoint":{"line":100,"column":68,"index":3748},"line":100,"code":"    it('should get the value from first ever request and reuse store', () => {\n      bindingMock.expects('loadBlob').withExactArgs('https://acme.com').returns(Promise.resolve(null)).once();\n      expect(storage.storePromise_).to.not.exist;\n      const promise = storage.get('key1');\n      return promise.then(value => {\n        expect(value).to.be.undefined;\n        const store1Promise = storage.storePromise_;\n        expect(store1Promise).to.exist;\n\n        // Repeat.\n        return storage.get('key2').then(value2 => {\n          expect(value2).to.be.undefined;\n          expect(storage.storePromise_).to.equal(store1Promise);\n        });\n      });\n    });","file":"unit/test-storage.js","skipped":false,"dir":"test"},{"name":"should recover from binding failure","suites":["Storage"],"updatePoint":{"line":116,"column":43,"index":4384},"line":116,"code":"    it('should recover from binding failure', () => {\n      expectAsyncConsoleError(/Failed to load store/);\n      bindingMock.expects('loadBlob').withExactArgs('https://acme.com').returns(Promise.reject('intentional')).once();\n      expect(storage.storePromise_).to.not.exist;\n      const promise = storage.get('key1');\n      return promise.then(value => {\n        expect(value).to.be.undefined;\n        expect(storage.storePromise_).to.exist;\n      });\n    });","file":"unit/test-storage.js","skipped":false,"dir":"test"},{"name":"should recover from binding error","suites":["Storage"],"updatePoint":{"line":126,"column":41,"index":4845},"line":126,"code":"    it('should recover from binding error', () => {\n      expectAsyncConsoleError(/Failed to load store/);\n      bindingMock.expects('loadBlob').withExactArgs('https://acme.com').returns(Promise.resolve('UNKNOWN FORMAT')).once();\n      expect(storage.storePromise_).to.not.exist;\n      const promise = storage.get('key1');\n      return promise.then(value => {\n        expect(value).to.be.undefined;\n        expect(storage.storePromise_).to.exist;\n      });\n    });","file":"unit/test-storage.js","skipped":false,"dir":"test"},{"name":"should save the value first time and reuse store","suites":["Storage"],"updatePoint":{"line":136,"column":56,"index":5325},"line":136,"code":"    it('should save the value first time and reuse store', () => {\n      const store1 = new Store({});\n      store1.set('key1', 'value1');\n      store1.set('key2', 'value2');\n      bindingMock.expects('loadBlob').withExactArgs('https://acme.com').returns(Promise.resolve(btoa(JSON.stringify(store1.obj)))).once();\n      bindingMock.expects('saveBlob').withExactArgs('https://acme.com', env.sandbox.match(arg => {\n        const store2 = new Store(JSON.parse(atob(arg)));\n        return store2.get('key1') !== undefined && store2.get('key2') !== undefined;\n      })).returns(Promise.resolve()).twice();\n      viewerMock.expects('broadcast').withExactArgs(env.sandbox.match(arg => {\n        return arg['type'] == 'amp-storage-reset' && arg['origin'] == 'https://acme.com';\n      })).twice();\n      expect(storage.storePromise_).to.not.exist;\n      const promise = storage.set('key1', true);\n      return promise.then(() => {\n        const store1Promise = storage.storePromise_;\n        expect(store1Promise).to.exist;\n\n        // Repeat.\n        return storage.set('key2', true).then(() => {\n          expect(storage.storePromise_).to.equal(store1Promise);\n        });\n      }).then(() => {\n        return expectStorage({\n          'key1': true,\n          'key2': true\n        });\n      });\n    });","file":"unit/test-storage.js","skipped":false,"dir":"test"},{"name":"should remove the key first time and reuse store","suites":["Storage"],"updatePoint":{"line":165,"column":56,"index":6621},"line":165,"code":"    it('should remove the key first time and reuse store', () => {\n      const store1 = new Store({});\n      store1.set('key1', 'value1');\n      store1.set('key2', 'value2');\n      bindingMock.expects('loadBlob').withExactArgs('https://acme.com').returns(Promise.resolve(btoa(JSON.stringify(store1.obj)))).once();\n      bindingMock.expects('saveBlob').withExactArgs('https://acme.com', env.sandbox.match(arg => {\n        const store2 = new Store(JSON.parse(atob(arg)));\n        return store2.get('key1') === undefined;\n      })).returns(Promise.resolve()).twice();\n      viewerMock.expects('broadcast').withExactArgs(env.sandbox.match(arg => {\n        return arg['type'] == 'amp-storage-reset' && arg['origin'] == 'https://acme.com';\n      })).twice();\n      expect(storage.storePromise_).to.not.exist;\n      const promise = storage.remove('key1');\n      return promise.then(() => {\n        const store1Promise = storage.storePromise_;\n        expect(store1Promise).to.exist;\n\n        // Repeat.\n        return storage.remove('key2').then(() => {\n          expect(storage.storePromise_).to.equal(store1Promise);\n        });\n      }).then(() => {\n        return expectStorage({\n          'key1': undefined,\n          'key2': undefined\n        });\n      });\n    });","file":"unit/test-storage.js","skipped":false,"dir":"test"},{"name":"should get unexpired value based on duration","suites":["Storage"],"updatePoint":{"line":194,"column":52,"index":7881},"line":194,"code":"    it('should get unexpired value based on duration', async () => {\n      clock = env.sandbox.useFakeTimers();\n      const store1 = new Store({});\n      store1.set('key1', 'value1');\n      expect(store1.values_).to.deep.equal({\n        'key1': {\n          v: 'value1',\n          t: 0\n        }\n      });\n      bindingMock.expects('loadBlob').withExactArgs('https://acme.com').returns(Promise.resolve(btoa(JSON.stringify(store1.obj)))).once();\n      bindingMock.expects('saveBlob').withExactArgs('https://acme.com', env.sandbox.match(arg => {\n        const store2 = new Store(JSON.parse(atob(arg)));\n        return store2.get('key1') === undefined;\n      })).returns(Promise.resolve()).twice();\n      viewerMock.expects('broadcast').withExactArgs(env.sandbox.match(arg => {\n        return arg['type'] == 'amp-storage-reset' && arg['origin'] == 'https://acme.com';\n      })).once();\n      expect(await storage.get('key1', 10)).to.equal('value1');\n      clock.tick(100);\n      expect(await storage.get('key1', 5)).to.be.undefined;\n    });","file":"unit/test-storage.js","skipped":false,"dir":"test"},{"name":"should react to reset messages","suites":["Storage"],"updatePoint":{"line":216,"column":38,"index":8904},"line":216,"code":"    it('should react to reset messages', () => {\n      const store1 = new Store({});\n      store1.set('key1', 'value1');\n      bindingMock.expects('loadBlob').withExactArgs('https://acme.com').returns(Promise.resolve(btoa(JSON.stringify(store1.obj)))).twice();\n      return storage.get('key1').then(value => {\n        expect(value).to.equal('value1');\n        const store1Promise = storage.storePromise_;\n        expect(store1Promise).to.exist;\n\n        // Issue broadcast event.\n        viewerBroadcastHandler({\n          'type': 'amp-storage-reset',\n          'origin': 'https://acme.com'\n        });\n        expect(storage.storePromise_).to.not.exist;\n        return storage.get('key1').then(value => {\n          expect(value).to.equal('value1');\n          expect(storage.storePromise_).to.exist;\n        });\n      });\n    });","file":"unit/test-storage.js","skipped":false,"dir":"test"},{"name":"should ignore unrelated reset messages","suites":["Storage"],"updatePoint":{"line":237,"column":46,"index":9742},"line":237,"code":"    it('should ignore unrelated reset messages', () => {\n      const store1 = new Store({});\n      store1.set('key1', 'value1');\n      bindingMock.expects('loadBlob').withExactArgs('https://acme.com').returns(Promise.resolve(btoa(JSON.stringify(store1.obj)))).twice();\n      return storage.get('key1').then(value => {\n        expect(value).to.equal('value1');\n        const store1Promise = storage.storePromise_;\n        expect(store1Promise).to.exist;\n\n        // Issue broadcast event.\n        viewerBroadcastHandler({\n          'type': 'amp-storage-reset',\n          'origin': 'OTHER'\n        });\n        expect(storage.storePromise_).to.exist;\n      });\n    });","file":"unit/test-storage.js","skipped":false,"dir":"test"},{"name":"should get undefined with empty store","suites":["Storage"],"updatePoint":{"line":263,"column":43,"index":10581},"line":263,"code":"  it('should get undefined with empty store', () => {\n    expect(store.get('key1')).to.be.undefined;\n    expect(Object.keys(store.values_).length).to.equal(0);\n    expect(store.values_).to.deep.equal({});\n  });","file":"unit/test-storage.js","skipped":false,"dir":"test"},{"name":"should set a new value with timestamp","suites":["Storage"],"updatePoint":{"line":268,"column":43,"index":10792},"line":268,"code":"  it('should set a new value with timestamp', () => {\n    store.set('key2', 'value2');\n    clock.tick(101);\n    store.set('key1', 'value1');\n    expect(store.get('key1')).to.equal('value1');\n    expect(Object.keys(store.values_).length).to.equal(2);\n    expect(store.values_['key2']['t']).to.equal(0);\n    expect(store.values_['key1']['t']).to.equal(101);\n    expect(store.values_).to.deep.equal({\n      'key2': {\n        v: 'value2',\n        t: 0\n      },\n      'key1': {\n        v: 'value1',\n        t: 101\n      }\n    });\n  });","file":"unit/test-storage.js","skipped":false,"dir":"test"},{"name":"should overwrite a value with new timestamp","suites":["Storage"],"updatePoint":{"line":287,"column":49,"index":11329},"line":287,"code":"  it('should overwrite a value with new timestamp', () => {\n    store.set('key1', 'value1');\n    store.set('key2', 'value2');\n    clock.tick(101);\n    store.set('key1', 'value1b');\n    expect(store.get('key1')).to.equal('value1b');\n    expect(Object.keys(store.values_).length).to.equal(2);\n    expect(store.values_['key1']['t']).to.equal(101);\n    expect(store.values_['key2']['t']).to.equal(0);\n    expect(store.values_).to.deep.equal({\n      'key1': {\n        v: 'value1b',\n        t: 101\n      },\n      'key2': {\n        v: 'value2',\n        t: 0\n      }\n    });\n  });","file":"unit/test-storage.js","skipped":false,"dir":"test"},{"name":"should update a value w/o changing timestamp","suites":["Storage"],"updatePoint":{"line":307,"column":50,"index":11903},"line":307,"code":"  it('should update a value w/o changing timestamp', () => {\n    store.set('key1', 'value1', true);\n    clock.tick(101);\n    store.set('key2', 'value2', true);\n    store.set('key1', 'value1b', true);\n    expect(store.get('key1')).to.equal('value1b');\n    expect(Object.keys(store.values_).length).to.equal(2);\n    expect(store.values_['key1']['t']).to.equal(0);\n    expect(store.values_['key2']['t']).to.equal(101);\n    expect(store.values_).to.deep.equal({\n      'key1': {\n        v: 'value1b',\n        t: 0\n      },\n      'key2': {\n        v: 'value2',\n        t: 101\n      }\n    });\n  });","file":"unit/test-storage.js","skipped":false,"dir":"test"},{"name":"should remove a value","suites":["Storage"],"updatePoint":{"line":327,"column":27,"index":12472},"line":327,"code":"  it('should remove a value', () => {\n    store.set('key1', 'value1');\n    store.set('key2', 'value2');\n    clock.tick(101);\n    expect(Object.keys(store.values_).length).to.equal(2);\n    store.remove('key1');\n    expect(store.get('key1')).to.be.undefined;\n    expect(store.get('key2')).to.be.equal('value2');\n    expect(Object.keys(store.values_).length).to.equal(1);\n    expect(store.values_['key2']['t']).to.equal(0);\n    expect(store.values_).to.deep.equal({\n      'key2': {\n        v: 'value2',\n        t: 0\n      }\n    });\n  });","file":"unit/test-storage.js","skipped":false,"dir":"test"},{"name":"should store limited amount of values","suites":["Storage"],"updatePoint":{"line":344,"column":43,"index":13023},"line":344,"code":"  it('should store limited amount of values', () => {\n    clock.tick(1);\n    store.set('k1', 1);\n    expect(Object.keys(store.values_).length).to.equal(1);\n    clock.tick(1);\n    store.set('k2', 2);\n    expect(Object.keys(store.values_).length).to.equal(2);\n\n    // The oldest (k2) will be removed.\n    clock.tick(1);\n    store.set('k1', 4);\n    store.set('k3', 3);\n    expect(Object.keys(store.values_).length).to.equal(2);\n    expect(store.get('k3')).to.equal(3);\n    expect(store.get('k1')).to.equal(4);\n    expect(store.get('k2')).to.be.undefined;\n\n    // The new oldest (k1) will be removed\n    clock.tick(1);\n    store.set('k4', 4);\n    expect(Object.keys(store.values_).length).to.equal(2);\n    expect(store.get('k4')).to.equal(4);\n    expect(store.get('k3')).to.equal(3);\n    expect(store.get('k1')).to.be.undefined;\n    expect(store.get('k2')).to.be.undefined;\n  });","file":"unit/test-storage.js","skipped":false,"dir":"test"},{"name":"should prohibit unsafe values","suites":["Storage"],"updatePoint":{"line":370,"column":35,"index":13891},"line":370,"code":"  it('should prohibit unsafe values', () => {\n    allowConsoleError(() => {\n      expect(() => {\n        store.set('__proto__', 'value1');\n      }).to.throw(/Name is not allowed/);\n      expect(() => {\n        store.set('prototype', 'value1');\n      }).to.throw(/Name is not allowed/);\n    });\n  });","file":"unit/test-storage.js","skipped":false,"dir":"test"},{"name":"should throw if localStorage is not supported","suites":["Storage"],"updatePoint":{"line":395,"column":51,"index":14573},"line":395,"code":"  it('should throw if localStorage is not supported', () => {\n    const errorSpy = env.sandbox.spy(dev(), 'expectedError');\n    expect(errorSpy).to.have.not.been.called;\n    new LocalStorageBinding(windowApi);\n    expect(errorSpy).to.have.not.been.called;\n    delete windowApi.localStorage;\n    allowConsoleError(() => new LocalStorageBinding(windowApi));\n    expect(errorSpy).to.be.calledOnce;\n    expect(errorSpy.args[0][1].message).to.match(/localStorage not supported/);\n  });","file":"unit/test-storage.js","skipped":false,"dir":"test"},{"name":"should load store when available","suites":["Storage"],"updatePoint":{"line":405,"column":38,"index":15041},"line":405,"code":"  it('should load store when available', () => {\n    localStorageMock.expects('getItem').withExactArgs('amp-store:https://acme.com').returns('BLOB1').once();\n    return binding.loadBlob('https://acme.com').then(blob => {\n      expect(blob).to.equal('BLOB1');\n    });\n  });","file":"unit/test-storage.js","skipped":false,"dir":"test"},{"name":"should load default store when not yet available","suites":["Storage"],"updatePoint":{"line":411,"column":54,"index":15330},"line":411,"code":"  it('should load default store when not yet available', () => {\n    localStorageMock.expects('getItem').withExactArgs('amp-store:https://acme.com').returns(undefined).once();\n    return binding.loadBlob('https://acme.com').then(blob => {\n      expect(blob).to.not.exist;\n    });\n  });","file":"unit/test-storage.js","skipped":false,"dir":"test"},{"name":"should reject on local storage failure w/ localStorage support","suites":["Storage"],"updatePoint":{"line":417,"column":68,"index":15630},"line":417,"code":"  it('should reject on local storage failure w/ localStorage support', () => {\n    binding.isLocalStorageSupported_ = true;\n    localStorageMock.expects('getItem').withExactArgs('amp-store:https://acme.com').throws(new Error('unknown')).once();\n    return binding.loadBlob('https://acme.com').then(() => 'SUCCESS', () => 'ERROR').then(res => {\n      expect(res).to.equal('ERROR');\n    });\n  });","file":"unit/test-storage.js","skipped":false,"dir":"test"},{"name":"should succeed loadBlob w/o localStorage support","suites":["Storage"],"updatePoint":{"line":424,"column":54,"index":16011},"line":424,"code":"  it('should succeed loadBlob w/o localStorage support', () => {\n    binding.isLocalStorageSupported_ = false;\n    localStorageMock.expects('getItem').withExactArgs('amp-store:https://acme.com').throws(new Error('unknown')).once();\n    return binding.loadBlob('https://acme.com').then(res => `SUCCESS ${res}`, () => 'ERROR').then(res => {\n      // Resolves with null\n      expect(res).to.equal('SUCCESS null');\n    });\n  });","file":"unit/test-storage.js","skipped":false,"dir":"test"},{"name":"should bypass loading from localStorage if getItem throws","suites":["Storage"],"updatePoint":{"line":432,"column":63,"index":16445},"line":432,"code":"  it('should bypass loading from localStorage if getItem throws', () => {\n    expectAsyncConsoleError(/localStorage not supported/);\n    localStorageMock.expects('getItem').throws(new Error('unknown')).once();\n    binding = new LocalStorageBinding(windowApi);\n    localStorageMock.expects('getItem').never();\n    return binding.loadBlob('https://acme.com').then(() => 'SUCCESS', () => 'ERROR').then(res => {\n      expect(res).to.equal('SUCCESS');\n    });\n  });","file":"unit/test-storage.js","skipped":false,"dir":"test"},{"name":"should save store","suites":["Storage"],"updatePoint":{"line":441,"column":23,"index":16866},"line":441,"code":"  it('should save store', () => {\n    localStorageMock.expects('setItem').withExactArgs('amp-store:https://acme.com', 'BLOB1').once();\n    return binding.saveBlob('https://acme.com', 'BLOB1');\n  });","file":"unit/test-storage.js","skipped":false,"dir":"test"},{"name":"should reject on save store failure","suites":["Storage"],"updatePoint":{"line":445,"column":41,"index":17083},"line":445,"code":"  it('should reject on save store failure', () => {\n    localStorageMock.expects('setItem').withExactArgs('amp-store:https://acme.com', 'BLOB1').throws(new Error('unknown')).once();\n    return binding.saveBlob('https://acme.com', 'BLOB1').then(() => 'SUCCESS', () => 'ERROR').then(res => {\n      expect(res).to.equal('ERROR');\n    });\n  });","file":"unit/test-storage.js","skipped":false,"dir":"test"},{"name":"should succeed saveBlob w/o localStorage support","suites":["Storage"],"updatePoint":{"line":451,"column":54,"index":17437},"line":451,"code":"  it('should succeed saveBlob w/o localStorage support', () => {\n    binding.isLocalStorageSupported_ = false;\n    localStorageMock.expects('setItem').withExactArgs('amp-store:https://acme.com', 'BLOB1').throws(new Error('unknown')).once();\n    // Never reaches setItem\n    return binding.saveBlob('https://acme.com', 'BLOB1').then(() => 'SUCCESS', () => 'ERROR').then(res => {\n      expect(res).to.equal('SUCCESS');\n    });\n  });","file":"unit/test-storage.js","skipped":false,"dir":"test"},{"name":"should bypass saving to localStorage if getItem throws","suites":["Storage"],"updatePoint":{"line":459,"column":60,"index":17874},"line":459,"code":"  it('should bypass saving to localStorage if getItem throws', () => {\n    expectAsyncConsoleError(/localStorage not supported/);\n    const setItemSpy = env.sandbox.spy(windowApi.localStorage, 'setItem');\n    localStorageMock.expects('getItem').throws(new Error('unknown')).once();\n    binding = new LocalStorageBinding(windowApi);\n    // Never reaches setItem\n    return binding.saveBlob('https://acme.com', 'BLOB1').then(() => 'SUCCESS', () => 'ERROR').then(res => {\n      expect(setItemSpy).to.have.not.been.called;\n      expect(res).to.equal('SUCCESS');\n    });\n  });","file":"unit/test-storage.js","skipped":false,"dir":"test"},{"name":"should load store from viewer","suites":["Storage"],"updatePoint":{"line":482,"column":35,"index":18710},"line":482,"code":"  it('should load store from viewer', () => {\n    viewerMock.expects('sendMessageAwaitResponse').withExactArgs('loadStore', env.sandbox.match(arg => {\n      return arg['origin'] == 'https://acme.com';\n    })).returns(Promise.resolve({\n      'blob': 'BLOB1'\n    })).once();\n    return binding.loadBlob('https://acme.com').then(blob => {\n      expect(blob).to.equal('BLOB1');\n    });\n  });","file":"unit/test-storage.js","skipped":false,"dir":"test"},{"name":"should load default store when not yet available","suites":["Storage"],"updatePoint":{"line":492,"column":54,"index":19117},"line":492,"code":"  it('should load default store when not yet available', () => {\n    viewerMock.expects('sendMessageAwaitResponse').withExactArgs('loadStore', env.sandbox.match(arg => {\n      return arg['origin'] == 'https://acme.com';\n    })).returns(Promise.resolve({})).once();\n    return binding.loadBlob('https://acme.com').then(blob => {\n      expect(blob).to.not.exist;\n    });\n  });","file":"unit/test-storage.js","skipped":false,"dir":"test"},{"name":"should reject on viewer failure","suites":["Storage"],"updatePoint":{"line":500,"column":37,"index":19475},"line":500,"code":"  it('should reject on viewer failure', () => {\n    viewerMock.expects('sendMessageAwaitResponse').withExactArgs('loadStore', env.sandbox.match(arg => {\n      return arg['origin'] == 'https://acme.com';\n    })).returns(Promise.reject('unknown')).once();\n    return binding.loadBlob('https://acme.com').then(() => 'SUCCESS', () => 'ERROR').then(res => {\n      expect(res).to.equal('ERROR');\n    });\n  });","file":"unit/test-storage.js","skipped":false,"dir":"test"},{"name":"should save store","suites":["Storage"],"updatePoint":{"line":508,"column":23,"index":19865},"line":508,"code":"  it('should save store', () => {\n    viewerMock.expects('sendMessageAwaitResponse').withExactArgs('saveStore', env.sandbox.match(arg => {\n      return arg['origin'] == 'https://acme.com' && arg['blob'] == 'BLOB1';\n    })).returns(Promise.resolve()).once();\n    return binding.saveBlob('https://acme.com', 'BLOB1');\n  });","file":"unit/test-storage.js","skipped":false,"dir":"test"},{"name":"should reject on save store failure","suites":["Storage"],"updatePoint":{"line":514,"column":41,"index":20205},"line":514,"code":"  it('should reject on save store failure', () => {\n    viewerMock.expects('sendMessageAwaitResponse').withExactArgs('saveStore', env.sandbox.match(() => true)).returns(Promise.reject('unknown')).once();\n    return binding.saveBlob('https://acme.com', 'BLOB1').then(() => 'SUCCESS', () => 'ERROR').then(res => {\n      expect(res).to.equal('ERROR');\n    });\n  });","file":"unit/test-storage.js","skipped":false,"dir":"test"},{"name":"should make visible in recovery call","suites":[],"updatePoint":{"line":34,"column":44,"index":1430},"line":34,"code":"    it('should make visible in recovery call', () => {\n      expect(getStyle(doc.body, 'opacity')).to.equal('');\n      expect(getStyle(doc.body, 'visibility')).to.equal('');\n      expect(getStyle(doc.body, 'animation')).to.equal('');\n      expect(ampdoc.signals().get('render-start')).to.be.null;\n      styles.makeBodyVisibleRecovery(doc);\n      expect(doc.body).to.exist;\n      expect(getStyle(doc.body, 'opacity')).to.equal('1');\n      expect(getStyle(doc.body, 'visibility')).to.equal('visible');\n      expect(isAnimationNone(doc.body)).to.be.true;\n    });","file":"unit/test-style-installer.js","skipped":false,"dir":"test"},{"name":"should wait for render delaying services","suites":[],"updatePoint":{"line":45,"column":48,"index":1994},"line":45,"code":"    it('should wait for render delaying services', async () => {\n      expect(getStyle(doc.body, 'opacity')).to.equal('');\n      expect(getStyle(doc.body, 'visibility')).to.equal('');\n      expect(getStyle(doc.body, 'animation')).to.equal('');\n      expect(ampdoc.signals().get('render-start')).to.be.null;\n      waitForServicesStub.withArgs(win).returns(Promise.resolve(['service1', 'service2']));\n      styles.makeBodyVisible(doc);\n      await macroTask();\n      expect(getStyle(doc.body, 'opacity')).to.equal('1');\n      expect(getStyle(doc.body, 'visibility')).to.equal('visible');\n      expect(isAnimationNone(doc.body)).to.be.true;\n      expect(tickSpy.withArgs('mbv')).to.be.calledOnce;\n      expect(schedulePassSpy.withArgs(1, true)).to.be.calledOnce;\n      expect(ampdoc.signals().get('render-start')).to.be.ok;\n    });","file":"unit/test-style-installer.js","skipped":false,"dir":"test"},{"name":"should skip schedulePass if no render delaying services","suites":[],"updatePoint":{"line":60,"column":63,"index":2838},"line":60,"code":"    it('should skip schedulePass if no render delaying services', async () => {\n      waitForServicesStub.withArgs(win).returns(Promise.resolve([]));\n      styles.makeBodyVisible(doc);\n      await macroTask();\n      expect(tickSpy.withArgs('mbv')).to.be.calledOnce;\n      expect(schedulePassSpy).to.not.be.calledWith(env.sandbox.match.number, true);\n      expect(ampdoc.signals().get('render-start')).to.be.ok;\n    });","file":"unit/test-style-installer.js","skipped":false,"dir":"test"},{"name":"should install runtime styles","suites":[],"updatePoint":{"line":114,"column":39,"index":4764},"line":114,"code":"      it('should install runtime styles', () => {\n        const cssText = 'amp-element{}';\n        return installStylesAsPromise(cssText, true).then(styleEl => {\n          expect(styleEl.parentNode).to.equal(head);\n          expect(head.__AMP_CSS_SM['amp-runtime']).to.equal(styleEl);\n          expect(styleEl.hasAttribute('amp-runtime')).to.be.true;\n          expect(styleEl.textContent).to.match(/amp-element\\s*\\{/);\n        });\n      });","file":"unit/test-style-installer.js","skipped":false,"dir":"test"},{"name":"should install extension styles after runtime","suites":[],"updatePoint":{"line":123,"column":55,"index":5221},"line":123,"code":"      it('should install extension styles after runtime', () => {\n        const runtimeCssText = 'amp-runtime{}';\n        const extCssText = 'amp-ext1{}';\n        return installStylesAsPromise(runtimeCssText, true).then(() => {\n          const otherEl = doc.createElement('link');\n          head.appendChild(otherEl);\n          // Install extension styles.\n          return installStylesAsPromise(extCssText, false, 'amp-ext1');\n        }).then(styleEl => {\n          expect(styleEl.parentNode).to.equal(head);\n          expect(styleEl.previousElementSibling).to.equal(head.__AMP_CSS_SM['amp-runtime']);\n          expect(styleEl.getAttribute('amp-extension')).to.equal('amp-ext1');\n          expect(styleEl.textContent).to.match(/amp-ext1\\s*\\{/);\n        });\n      });","file":"unit/test-style-installer.js","skipped":false,"dir":"test"},{"name":"should install user styles after everything else","suites":[],"updatePoint":{"line":138,"column":58,"index":5993},"line":138,"code":"      it('should install user styles after everything else', () => {\n        const runtimeCssText = 'amp-runtime{}';\n        const userCssText = 'user{}';\n        const otherEl = doc.createElement('link');\n        return installStylesAsPromise(runtimeCssText, true).then(() => {\n          head.appendChild(otherEl);\n          return installStylesAsPromise(userCssText, false, 'amp-custom');\n        }).then(styleEl => {\n          expect(styleEl.parentNode).to.equal(head);\n          expect(styleEl.previousElementSibling).to.equal(otherEl);\n          expect(styleEl.hasAttribute('amp-custom')).to.be.true;\n          expect(styleEl.hasAttribute('amp-extension')).to.be.false;\n          expect(styleEl.textContent).to.match(/user\\s*\\{/);\n        });\n      });","file":"unit/test-style-installer.js","skipped":false,"dir":"test"},{"name":"should not create duplicate runtime style","suites":[],"updatePoint":{"line":153,"column":51,"index":6744},"line":153,"code":"      it('should not create duplicate runtime style', () => {\n        let firstStyleEl;\n        return installStylesAsPromise('', true).then(styleEl => {\n          firstStyleEl = styleEl;\n          // Duplicate call.\n          return installStylesAsPromise('other{}', true);\n        }).then(styleEl => {\n          expect(styleEl).to.equal(firstStyleEl);\n          expect(styleEl.textContent).to.equal('other{}');\n          expect(head.querySelectorAll('style[amp-runtime]')).to.have.length(1);\n        });\n      });","file":"unit/test-style-installer.js","skipped":false,"dir":"test"},{"name":"should discover existing runtime style","suites":[],"updatePoint":{"line":165,"column":48,"index":7257},"line":165,"code":"      it('should discover existing runtime style', () => {\n        const serverEl = doc.createElement('style');\n        serverEl.setAttribute('amp-runtime', '');\n        head.appendChild(serverEl);\n        return installStylesAsPromise('other{}', true).then(styleEl => {\n          expect(head.__AMP_CSS_SM['amp-runtime']).to.equal(serverEl);\n          expect(styleEl).to.equal(serverEl);\n          expect(styleEl.textContent).to.equal('other{}');\n          expect(head.querySelectorAll('style[amp-runtime]')).to.have.length(1);\n        });\n      });","file":"unit/test-style-installer.js","skipped":false,"dir":"test"},{"name":"should re-create runtime style if absent","suites":[],"updatePoint":{"line":176,"column":50,"index":7809},"line":176,"code":"      it('should re-create runtime style if absent', () => {\n        return installStylesAsPromise('other{}', true).then(styleEl => {\n          expect(head.__AMP_CSS_SM['amp-runtime']).to.equal(styleEl);\n          expect(styleEl.textContent).to.match(/other\\s*\\{/);\n          expect(head.querySelectorAll('style[amp-runtime]')).to.have.length(1);\n        });\n      });","file":"unit/test-style-installer.js","skipped":false,"dir":"test"},{"name":"should discover existing extension style","suites":[],"updatePoint":{"line":183,"column":50,"index":8178},"line":183,"code":"      it('should discover existing extension style', () => {\n        const serverEl = doc.createElement('style');\n        serverEl.setAttribute('amp-extension', 'amp-ext1');\n        head.appendChild(serverEl);\n        const promise = installStylesAsPromise('other{}', false, 'amp-ext1');\n        return promise.then(styleEl => {\n          expect(head.__AMP_CSS_SM['amp-runtime']).to.not.exist;\n          expect(styleEl).to.equal(serverEl);\n          expect(styleEl.textContent).to.equal('other{}');\n          expect(head.querySelectorAll('style[amp-extension=amp-ext1]')).to.have.length(1);\n        });\n      });","file":"unit/test-style-installer.js","skipped":false,"dir":"test"},{"name":"should discover existing extension link[rel=stylesheet] and not overwrite it","suites":[],"updatePoint":{"line":195,"column":86,"index":8827},"line":195,"code":"      it('should discover existing extension link[rel=stylesheet] and not overwrite it', () => {\n        const serverEl = doc.createElement('link');\n        serverEl.setAttribute('amp-extension', 'amp-story');\n        serverEl.setAttribute('href', '/examples/amp-story/amp-story-1.0.css');\n        serverEl.setAttribute('rel', 'stylesheet');\n        head.appendChild(serverEl);\n        const promise = installStylesAsPromise('other{}', false, 'amp-story');\n        return promise.then(styleEl => {\n          expect(head.__AMP_CSS_SM['amp-runtime']).to.not.exist;\n          expect(head.__AMP_CSS_SM['amp-extension=amp-story']).to.equal(serverEl);\n          expect(styleEl).to.equal(serverEl);\n          expect(head.querySelectorAll('link[amp-extension=amp-story]')).to.have.length(1);\n        });\n      });","file":"unit/test-style-installer.js","skipped":false,"dir":"test"},{"name":"should re-create extension style","suites":[],"updatePoint":{"line":209,"column":42,"index":9589},"line":209,"code":"      it('should re-create extension style', () => {\n        installStylesAsPromise('runtime{}', true);\n        const promise = installStylesAsPromise('other{}', false, 'amp-ext1');\n        return promise.then(styleEl => {\n          expect(styleEl.getAttribute('amp-extension')).to.equal('amp-ext1');\n          expect(styleEl.textContent).to.match(/other\\s*\\{/);\n          expect(head.querySelectorAll('style[amp-extension=amp-ext1]')).to.have.length(1);\n        });\n      });","file":"unit/test-style-installer.js","skipped":false,"dir":"test"},{"name":"should re-create extension style w/o cache","suites":[],"updatePoint":{"line":218,"column":52,"index":10076},"line":218,"code":"      it('should re-create extension style w/o cache', () => {\n        const runtimeStyle = doc.createElement('style');\n        runtimeStyle.setAttribute('amp-runtime', '');\n        head.appendChild(runtimeStyle);\n        // Additional element to test the correct insertion order.\n        head.appendChild(doc.createElement('link'));\n        const promise = installStylesAsPromise('other{}', false, 'amp-ext1');\n        return promise.then(styleEl => {\n          expect(styleEl.getAttribute('amp-extension')).to.equal('amp-ext1');\n          expect(styleEl.textContent).to.match(/other\\s*\\{/);\n          expect(head.querySelectorAll('style[amp-extension=amp-ext1]')).to.have.length(1);\n          expect(styleEl.previousElementSibling).to.equal(runtimeStyle);\n        });\n      });","file":"unit/test-style-installer.js","skipped":false,"dir":"test"},{"name":"should use the cached extension style","suites":[],"updatePoint":{"line":232,"column":47,"index":10851},"line":232,"code":"      it('should use the cached extension style', () => {\n        const cachedExtStyle = doc.createElement('style');\n        cachedExtStyle.textContent = 'ext1{}';\n        head.appendChild(cachedExtStyle);\n        head.__AMP_CSS_SM = {\n          'amp-extension=amp-ext1': cachedExtStyle\n        };\n        const promise = installStylesAsPromise('other{}', false, 'amp-ext1');\n        return promise.then(styleEl => {\n          expect(styleEl).to.equal(cachedExtStyle);\n          expect(head.__AMP_CSS_SM['amp-extension=amp-ext1']).to.equal(cachedExtStyle);\n          // Ensure the style is not re-inserted.\n          expect(head.querySelectorAll('style[amp-extension=amp-ext1]')).to.have.length(0);\n        });\n      });","file":"unit/test-style-installer.js","skipped":false,"dir":"test"},{"name":"should create a amp-custom style","suites":[],"updatePoint":{"line":247,"column":42,"index":11567},"line":247,"code":"      it('should create a amp-custom style', () => {\n        const promise = installStylesAsPromise('other{}', false, 'amp-custom');\n        return promise.then(styleEl => {\n          expect(styleEl.getAttribute('amp-custom')).to.equal('');\n          expect(head.lastElementChild).to.equal(styleEl);\n          expect(styleEl.textContent).to.match(/other\\s*\\{/);\n          expect(head.querySelectorAll('style[amp-custom]')).to.have.length(1);\n        });\n      });","file":"unit/test-style-installer.js","skipped":false,"dir":"test"},{"name":"should create a amp-keyframes style","suites":[],"updatePoint":{"line":256,"column":45,"index":12034},"line":256,"code":"      it('should create a amp-keyframes style', () => {\n        const promise = installStylesAsPromise('other{}', false, 'amp-keyframes');\n        return promise.then(styleEl => {\n          expect(styleEl.getAttribute('amp-keyframes')).to.equal('');\n          expect(head.lastElementChild).to.equal(styleEl);\n          expect(styleEl.textContent).to.match(/other\\s*\\{/);\n          expect(head.querySelectorAll('style[amp-keyframes]')).to.have.length(1);\n        });\n      });","file":"unit/test-style-installer.js","skipped":false,"dir":"test"},{"name":"should use a transform","suites":[],"updatePoint":{"line":265,"column":32,"index":12497},"line":265,"code":"      it('should use a transform', () => {\n        styles.installCssTransformer(head, function (css) {\n          return css.toUpperCase();\n        });\n        const promise1 = installStylesAsPromise('style1{}', true);\n        const promise2 = installStylesAsPromise('style2{}', false, 'amp-ext1');\n        const promise3 = installStylesAsPromise('style3{}', false, 'amp-custom');\n        return Promise.all([promise1, promise2, promise3]).then(styleEls => {\n          expect(styleEls).to.have.length(3);\n          expect(styleEls[0].textContent).to.contain('STYLE1');\n          expect(styleEls[1].textContent).to.contain('STYLE2');\n          expect(styleEls[2].textContent).to.contain('STYLE3');\n        });\n      });","file":"unit/test-style-installer.js","skipped":false,"dir":"test"},{"name":"should enqueue and dequeue","suites":[],"updatePoint":{"line":9,"column":32,"index":251},"line":9,"code":"  it('should enqueue and dequeue', () => {\n    clock.tick(1000);\n    expect(queue.getSize()).to.equal(0);\n    expect(queue.getLastEnqueueTime()).to.equal(0);\n    expect(queue.getLastDequeueTime()).to.equal(0);\n    queue.enqueue({\n      id: '1'\n    });\n    expect(queue.getTaskById('1').id).to.equal('1');\n    expect(queue.getSize()).to.equal(1);\n    expect(queue.getLastEnqueueTime()).to.equal(1000);\n    expect(queue.getLastDequeueTime()).to.equal(0);\n    allowConsoleError(() => {\n      expect(() => {\n        queue.enqueue({\n          id: '1'\n        });\n      }).to.throw(/Task already enqueued/);\n    });\n    queue.dequeue({\n      id: '1'\n    });\n    expect(queue.getTaskById('1')).to.equal(null);\n    expect(queue.getSize()).to.equal(0);\n    expect(queue.getLastEnqueueTime()).to.equal(1000);\n    expect(queue.getLastDequeueTime()).to.equal(1000);\n  });","file":"unit/test-task-queue.js","skipped":false,"dir":"test"},{"name":"should perform score-based peek","suites":[],"updatePoint":{"line":36,"column":37,"index":1116},"line":36,"code":"  it('should perform score-based peek', () => {\n    queue.enqueue({\n      id: 'A',\n      v: 0\n    });\n    queue.enqueue({\n      id: 'B',\n      v: 2\n    });\n    queue.enqueue({\n      id: 'C',\n      v: 1\n    });\n    const task = queue.peek(task => 10 - task.v);\n    expect(task.id).to.equal('B');\n  });","file":"unit/test-task-queue.js","skipped":false,"dir":"test"},{"name":"should render immediately","suites":[],"updatePoint":{"line":49,"column":31,"index":1406},"line":49,"code":"  it('should render immediately', () => {\n    const templateElement = createTemplateElement();\n    registerExtendedTemplateForDoc(ampdoc, templateElement.getAttribute('type'), TemplateImpl);\n    return templates.renderTemplate(templateElement, {\n      value: 1\n    }).then(res => {\n      expect(res.textContent).to.equal('abc1');\n    });\n  });","file":"unit/test-template.js","skipped":false,"dir":"test"},{"name":"should render as string","suites":[],"updatePoint":{"line":58,"column":29,"index":1748},"line":58,"code":"  it('should render as string', () => {\n    const templateElement = createTemplateElement();\n    registerExtendedTemplateForDoc(ampdoc, templateElement.getAttribute('type'), TemplateImpl);\n    return templates.renderTemplateAsString(templateElement, {\n      value: 1\n    }).then(res => {\n      expect(res).to.equal('str(abc1)');\n    });\n  });","file":"unit/test-template.js","skipped":false,"dir":"test"},{"name":"should render when detached","suites":[],"updatePoint":{"line":67,"column":33,"index":2095},"line":67,"code":"  it('should render when detached', () => {\n    const templateElement = createTemplateElement();\n    // Use TemplateImplCheckingViewer to make sure viewerCanRenderTemplates\n    // works correctly when the template is later detached.\n    registerExtendedTemplateForDoc(ampdoc, templateElement.getAttribute('type'), TemplateImplCheckingViewer);\n    const viewerService = getServiceForDoc(templateElement, 'viewer');\n    env.sandbox.stub(viewerService, 'hasCapability').returns(true);\n    return templates.renderTemplate(templateElement, {\n      value: 1\n    }).then(() => {\n      templateElement.parentElement.removeChild(templateElement);\n      return templates.renderTemplate(templateElement, {\n        value: 2\n      });\n    }).then(res => {\n      expect(res.textContent).to.equal('abc2');\n    });\n  });","file":"unit/test-template.js","skipped":false,"dir":"test"},{"name":"should render array","suites":[],"updatePoint":{"line":85,"column":25,"index":2892},"line":85,"code":"  it('should render array', () => {\n    const templateElement = createTemplateElement();\n    registerExtendedTemplateForDoc(ampdoc, templateElement.getAttribute('type'), TemplateImpl);\n    return templates.renderTemplateArray(templateElement, [{\n      value: 1\n    }, {\n      value: 2\n    }]).then(res => {\n      expect(res).to.have.length.of(2);\n      expect(res[0].textContent).to.equal('abc1');\n      expect(res[1].textContent).to.equal('abc2');\n    });\n  });","file":"unit/test-template.js","skipped":false,"dir":"test"},{"name":"should NOT allow registering template class twice","suites":[],"updatePoint":{"line":98,"column":55,"index":3385},"line":98,"code":"  it('should NOT allow registering template class twice', () => {\n    const templateElement = createTemplateElement();\n    registerExtendedTemplateForDoc(ampdoc, templateElement.getAttribute('type'), TemplateImpl);\n    allowConsoleError(() => {\n      expect(() => {\n        registerExtendedTemplateForDoc(ampdoc, templateElement.getAttribute('type'), TemplateImpl);\n      }).to.throw(/Duplicate template type/);\n    });\n  });","file":"unit/test-template.js","skipped":false,"dir":"test"},{"name":"should block render until template registered","suites":[],"updatePoint":{"line":107,"column":51,"index":3807},"line":107,"code":"  it('should block render until template registered', () => {\n    const templateElement = createTemplateElement();\n    const scriptElement = doc.createElement('script');\n    scriptElement.setAttribute('custom-template', templateElement.getAttribute('type'));\n    doc.body.appendChild(scriptElement);\n    let result = undefined;\n    templates.renderTemplate(templateElement, {\n      value: 0\n    }).then(res => {\n      result = res;\n    });\n    return Promise.resolve().then(() => {\n      return Promise.resolve().then(() => {\n        expect(result).to.be.undefined;\n      });\n    });\n  });","file":"unit/test-template.js","skipped":false,"dir":"test"},{"name":"should unblock render when template registered","suites":[],"updatePoint":{"line":124,"column":52,"index":4398},"line":124,"code":"  it('should unblock render when template registered', () => {\n    const templateElement = createTemplateElement();\n    const scriptElement = doc.createElement('script');\n    scriptElement.setAttribute('custom-template', templateElement.getAttribute('type'));\n    doc.body.appendChild(scriptElement);\n    const p = templates.renderTemplate(templateElement, {\n      value: 1\n    });\n    registerExtendedTemplateForDoc(ampdoc, templateElement.getAttribute('type'), TemplateImpl);\n    return p.then(res => {\n      expect(res.textContent).to.equal('abc1');\n    });\n  });","file":"unit/test-template.js","skipped":false,"dir":"test"},{"name":"should unblock render for parallel templates","suites":[],"updatePoint":{"line":137,"column":50,"index":4963},"line":137,"code":"  it('should unblock render for parallel templates', () => {\n    const templateElement = createTemplateElement();\n    const scriptElement = doc.createElement('script');\n    scriptElement.setAttribute('custom-template', templateElement.getAttribute('type'));\n    doc.body.appendChild(scriptElement);\n    const p1 = templates.renderTemplate(templateElement, {\n      value: 1\n    });\n    const p2 = templates.renderTemplate(templateElement, {\n      value: 2\n    });\n    registerExtendedTemplateForDoc(ampdoc, templateElement.getAttribute('type'), TemplateImpl);\n    // This is just a complicated way to say Promise -> all.\n    return p1.then(res1 => {\n      return p2.then(res2 => {\n        return [res1, res2];\n      });\n    }).then(res => {\n      expect(res[0].textContent).to.equal('abc1');\n      expect(res[1].textContent).to.equal('abc2');\n    });\n  });","file":"unit/test-template.js","skipped":false,"dir":"test"},{"name":"should discover template via ID","suites":[],"updatePoint":{"line":159,"column":37,"index":5806},"line":159,"code":"  it('should discover template via ID', () => {\n    const templateElement = createTemplateElement();\n    const type = templateElement.getAttribute('type');\n    const id = type + Math.random();\n    templateElement.setAttribute('id', id);\n    doc.body.appendChild(templateElement);\n    registerExtendedTemplateForDoc(ampdoc, type, TemplateImpl);\n    const parentElement = doc.createElement('div');\n    parentElement.setAttribute('template', id);\n    doc.body.appendChild(parentElement);\n    return templates.findAndRenderTemplate(parentElement, {\n      value: 1\n    }).then(res => {\n      expect(res.textContent).to.equal('abc1');\n    });\n  });","file":"unit/test-template.js","skipped":false,"dir":"test"},{"name":"should require discovered template via ID to be \"template\"","suites":[],"updatePoint":{"line":175,"column":64,"index":6476},"line":175,"code":"  it('should require discovered template via ID to be \"template\"', () => {\n    const nonTemplateElement = doc.createElement('div');\n    const id = 'nontemplate' + Math.random();\n    nonTemplateElement.setAttribute('id', id);\n    doc.body.appendChild(nonTemplateElement);\n    const parentElement = doc.createElement('div');\n    parentElement.setAttribute('template', id);\n    doc.body.appendChild(parentElement);\n    const regexError = new RegExp('Template must be defined in a <template> or ' + '<script type=\"text/plain\"> tag');\n    allowConsoleError(() => {\n      expect(() => {\n        templates.findAndRenderTemplate(parentElement, {\n          value: 0\n        });\n      }).to.throw(regexError);\n    });\n  });","file":"unit/test-template.js","skipped":false,"dir":"test"},{"name":"should require discovered \"script\" with type defined","suites":[],"updatePoint":{"line":192,"column":58,"index":7184},"line":192,"code":"  it('should require discovered \"script\" with type defined', () => {\n    // Given a script template with the type not defined.\n    const templateElement = doc.createElement('script');\n    const id = 'template' + Math.random();\n    templateElement.setAttribute('id', id);\n    doc.body.appendChild(templateElement);\n    const parentElement = doc.createElement('div');\n    parentElement.setAttribute('template', id);\n    doc.body.appendChild(parentElement);\n    const regexError = new RegExp('Template must be defined in a <template> or ' + '<script type=\"text/plain\"> tag');\n    allowConsoleError(() => {\n      expect(() => {\n        templates.findAndRenderTemplate(parentElement, {\n          value: 0\n        });\n      }).to.throw(regexError);\n    });\n  });","file":"unit/test-template.js","skipped":false,"dir":"test"},{"name":"should discover template via children","suites":[],"updatePoint":{"line":210,"column":43,"index":7926},"line":210,"code":"  it('should discover template via children', () => {\n    const templateElement = createTemplateElement();\n    const type = templateElement.getAttribute('type');\n    registerExtendedTemplateForDoc(ampdoc, type, TemplateImpl);\n    const parentElement = doc.createElement('div');\n    parentElement.appendChild(templateElement);\n    container.appendChild(parentElement);\n    return templates.findAndRenderTemplate(parentElement, {\n      value: 1\n    }).then(res => {\n      expect(res.textContent).to.equal('abc1');\n    });\n  });","file":"unit/test-template.js","skipped":false,"dir":"test"},{"name":"should fail when template not found","suites":[],"updatePoint":{"line":223,"column":41,"index":8450},"line":223,"code":"  it('should fail when template not found', () => {\n    const parentElement = doc.createElement('div');\n    doc.body.appendChild(parentElement);\n    allowConsoleError(() => {\n      expect(() => {\n        templates.findAndRenderTemplate(parentElement, {\n          value: 0\n        });\n      }).to.throw(/Template not found/);\n    });\n    parentElement.setAttribute('template', 'notemplate' + Math.random());\n    allowConsoleError(() => {\n      expect(() => {\n        templates.findAndRenderTemplate(parentElement, {\n          value: 0\n        });\n      }).to.throw(/Template not found/);\n    });\n  });","file":"unit/test-template.js","skipped":false,"dir":"test"},{"name":"should detect if a template is present in a container","suites":[],"updatePoint":{"line":242,"column":59,"index":9069},"line":242,"code":"  it('should detect if a template is present in a container', () => {\n    const parentElement = doc.createElement('div');\n    doc.body.appendChild(parentElement);\n    expect(templates.hasTemplate(parentElement)).to.be.false;\n    parentElement.setAttribute('template', 'notemplate' + Math.random());\n    expect(templates.hasTemplate(parentElement)).to.be.false;\n    const templateElement = createTemplateElement();\n    const type = templateElement.getAttribute('type');\n    registerExtendedTemplateForDoc(env.ampdoc, type, TemplateImpl);\n\n    // With template, but different ID\n    parentElement.appendChild(templateElement);\n    expect(templates.hasTemplate(parentElement)).to.be.false;\n\n    // With template and correct ID\n    parentElement.removeAttribute('template');\n    expect(templates.hasTemplate(parentElement)).to.be.true;\n  });","file":"unit/test-template.js","skipped":false,"dir":"test"},{"name":"should discover and render template for an array","suites":[],"updatePoint":{"line":260,"column":54,"index":9902},"line":260,"code":"  it('should discover and render template for an array', () => {\n    const templateElement = createTemplateElement();\n    const type = templateElement.getAttribute('type');\n    const id = type + Math.random();\n    templateElement.setAttribute('id', id);\n    doc.body.appendChild(templateElement);\n    registerExtendedTemplateForDoc(env.ampdoc, type, TemplateImpl);\n    const parentElement = doc.createElement('div');\n    parentElement.setAttribute('template', id);\n    doc.body.appendChild(parentElement);\n    return templates.findAndRenderTemplateArray(parentElement, [{\n      value: 1\n    }, {\n      value: 2\n    }]).then(res => {\n      expect(res).to.have.length.of(2);\n      expect(res[0].textContent).to.equal('abc1');\n      expect(res[1].textContent).to.equal('abc2');\n    });\n  });","file":"unit/test-template.js","skipped":false,"dir":"test"},{"name":"should unwrap single element","suites":["tryUnwrap()"],"updatePoint":{"line":294,"column":36,"index":10977},"line":294,"code":"    it('should unwrap single element', () => {\n      const root = doc.createElement('div');\n      const element1 = doc.createElement('div');\n      root.appendChild(element1);\n      expect(new BaseTemplate(templateElement).tryUnwrap(root)).to.equal(element1);\n    });","file":"unit/test-template.js","skipped":false,"dir":"test"},{"name":"should unwrap with empty/whitespace text","suites":["tryUnwrap()"],"updatePoint":{"line":300,"column":48,"index":11256},"line":300,"code":"    it('should unwrap with empty/whitespace text', () => {\n      const root = doc.createElement('div');\n      const element1 = doc.createElement('div');\n      root.appendChild(doc.createTextNode('   '));\n      root.appendChild(element1);\n      root.appendChild(doc.createTextNode(' \\n\\t  '));\n      expect(new BaseTemplate(templateElement).tryUnwrap(root)).to.equal(element1);\n    });","file":"unit/test-template.js","skipped":false,"dir":"test"},{"name":"should NOT unwrap single non-div element","suites":["tryUnwrap()"],"updatePoint":{"line":308,"column":48,"index":11641},"line":308,"code":"    it('should NOT unwrap single non-div element', () => {\n      const root = doc.createElement('a');\n      root.textContent = 'abc';\n      expect(new BaseTemplate(templateElement).tryUnwrap(root)).to.equal(root);\n    });","file":"unit/test-template.js","skipped":false,"dir":"test"},{"name":"should NOT unwrap multiple elements","suites":["tryUnwrap()"],"updatePoint":{"line":313,"column":43,"index":11858},"line":313,"code":"    it('should NOT unwrap multiple elements', () => {\n      const root = doc.createElement('div');\n      root.appendChild(doc.createElement('div'));\n      root.appendChild(doc.createElement('div'));\n      expect(new BaseTemplate(templateElement).tryUnwrap(root)).to.equal(root);\n    });","file":"unit/test-template.js","skipped":false,"dir":"test"},{"name":"should NOT unwrap with non-empty/whitespace text","suites":["tryUnwrap()"],"updatePoint":{"line":319,"column":56,"index":12158},"line":319,"code":"    it('should NOT unwrap with non-empty/whitespace text', () => {\n      const root = doc.createElement('div');\n      root.appendChild(doc.createTextNode('a'));\n      root.appendChild(doc.createElement('div'));\n      expect(new BaseTemplate(templateElement).tryUnwrap(root)).to.equal(root);\n    });","file":"unit/test-template.js","skipped":false,"dir":"test"},{"name":"should unwrap single element","suites":["unwrapChildren()"],"updatePoint":{"line":327,"column":36,"index":12482},"line":327,"code":"    it('should unwrap single element', () => {\n      const root = doc.createElement('div');\n      const element1 = doc.createElement('div');\n      root.appendChild(element1);\n      expect(new BaseTemplate(templateElement).unwrapChildren(root)).to.have.ordered.members([element1]);\n    });","file":"unit/test-template.js","skipped":false,"dir":"test"},{"name":"should unwrap single non-div element","suites":["unwrapChildren()"],"updatePoint":{"line":333,"column":44,"index":12779},"line":333,"code":"    it('should unwrap single non-div element', () => {\n      const root = doc.createElement('a');\n      root.textContent = 'abc';\n      const result = new BaseTemplate(templateElement).unwrapChildren(root);\n      expect(result).to.have.length(1);\n      expect(result[0].tagName).to.equal('DIV');\n      expect(result[0].textContent).to.equal('abc');\n    });","file":"unit/test-template.js","skipped":false,"dir":"test"},{"name":"should unwrap with empty/whitespace text","suites":["unwrapChildren()"],"updatePoint":{"line":341,"column":48,"index":13140},"line":341,"code":"    it('should unwrap with empty/whitespace text', () => {\n      const root = doc.createElement('div');\n      const element1 = doc.createElement('div');\n      root.appendChild(doc.createTextNode('   '));\n      root.appendChild(element1);\n      root.appendChild(doc.createTextNode(' \\n\\t  '));\n      expect(new BaseTemplate(templateElement).unwrapChildren(root)).to.have.ordered.members([element1]);\n    });","file":"unit/test-template.js","skipped":false,"dir":"test"},{"name":"should unwrap multiple elements","suites":["unwrapChildren()"],"updatePoint":{"line":349,"column":39,"index":13538},"line":349,"code":"    it('should unwrap multiple elements', () => {\n      const root = doc.createElement('div');\n      const children = [doc.createElement('div'), doc.createElement('div')];\n      children.forEach(child => root.appendChild(child));\n      expect(new BaseTemplate(templateElement).unwrapChildren(root)).to.have.ordered.members(children);\n    });","file":"unit/test-template.js","skipped":false,"dir":"test"},{"name":"should unwrap multiple elements and wrap any non-empty/whitespace text","suites":["unwrapChildren()"],"updatePoint":{"line":355,"column":78,"index":13919},"line":355,"code":"    it('should unwrap multiple elements and wrap any non-empty/whitespace text', () => {\n      const root = doc.createElement('div');\n      const children = [doc.createTextNode('a'), doc.createElement('div')];\n      children.forEach(child => root.appendChild(child));\n      const result = new BaseTemplate(templateElement).unwrapChildren(root);\n      expect(result).to.have.length(2);\n      expect(result[0].tagName).to.equal('DIV');\n      expect(result[0].textContent).to.equal('a');\n      expect(result[1]).to.equal(children[1]);\n    });","file":"unit/test-template.js","skipped":false,"dir":"test"},{"name":"delay","suites":[],"updatePoint":{"line":18,"column":11,"index":600},"line":18,"code":"  it('delay', () => {\n    const handler = () => {};\n    windowMock.expects('setTimeout').returns(1).once();\n    windowMock.expects('clearTimeout').never();\n    timer.delay(handler, 111);\n  });","file":"unit/test-timer.js","skipped":false,"dir":"test"},{"name":"delay 0 real window","suites":[],"updatePoint":{"line":24,"column":25,"index":807},"line":24,"code":"  it('delay 0 real window', done => {\n    timer = new Timer(self);\n    timer.delay(done, 0);\n  });","file":"unit/test-timer.js","skipped":false,"dir":"test"},{"name":"delay 1 real window","suites":[],"updatePoint":{"line":28,"column":25,"index":906},"line":28,"code":"  it('delay 1 real window', done => {\n    timer = new Timer(self);\n    timer.delay(done, 1);\n  });","file":"unit/test-timer.js","skipped":false,"dir":"test"},{"name":"delay default","suites":[],"updatePoint":{"line":32,"column":19,"index":999},"line":32,"code":"  it('delay default', done => {\n    windowMock.expects('setTimeout').never();\n    windowMock.expects('clearTimeout').never();\n    timer.delay(done);\n  });","file":"unit/test-timer.js","skipped":false,"dir":"test"},{"name":"cancel","suites":[],"updatePoint":{"line":37,"column":12,"index":1147},"line":37,"code":"  it('cancel', () => {\n    windowMock.expects('clearTimeout').withExactArgs(1).once();\n    timer.cancel(1);\n  });","file":"unit/test-timer.js","skipped":false,"dir":"test"},{"name":"cancel default","suites":[],"updatePoint":{"line":41,"column":20,"index":1269},"line":41,"code":"  it('cancel default', done => {\n    windowMock.expects('setTimeout').never();\n    windowMock.expects('clearTimeout').never();\n    const id = timer.delay(() => {\n      throw new Error('should have been cancelled');\n    });\n    timer.cancel(id);\n\n    // This makes sure the error has time to throw while this test\n    // is still running.\n    timer.delay(done);\n  });","file":"unit/test-timer.js","skipped":false,"dir":"test"},{"name":"promise","suites":[],"updatePoint":{"line":53,"column":13,"index":1629},"line":53,"code":"  it('promise', () => {\n    windowMock.expects('setTimeout').withExactArgs(env.sandbox.match(value => {\n      value();\n      return true;\n    }), 111).returns(1).once();\n    let c = 0;\n    return timer.promise(111).then(result => {\n      c++;\n      expect(c).to.equal(1);\n      expect(result).to.be.undefined;\n    });\n  });","file":"unit/test-timer.js","skipped":false,"dir":"test"},{"name":"timeoutPromise - no race","suites":[],"updatePoint":{"line":65,"column":30,"index":1970},"line":65,"code":"  it('timeoutPromise - no race', () => {\n    windowMock.expects('setTimeout').withExactArgs(env.sandbox.match(value => {\n      value();\n      return true;\n    }), 111).returns(1).once();\n    let c = 0;\n    return timer.timeoutPromise(111).then(result => {\n      c++;\n      assert.fail('must never be here: ' + result);\n    }).catch(reason => {\n      c++;\n      expect(c).to.equal(1);\n      expect(reason.message).to.contain('timeout');\n    });\n  });","file":"unit/test-timer.js","skipped":false,"dir":"test"},{"name":"timeoutPromise - race no timeout","suites":[],"updatePoint":{"line":80,"column":38,"index":2428},"line":80,"code":"  it('timeoutPromise - race no timeout', () => {\n    windowMock.expects('setTimeout').withExactArgs(env.sandbox.match(unusedValue => {\n      // No timeout\n      return true;\n    }), 111).returns(1).once();\n    let c = 0;\n    return timer.timeoutPromise(111, Promise.resolve('A')).then(result => {\n      c++;\n      expect(c).to.equal(1);\n      expect(result).to.equal('A');\n    });\n  });","file":"unit/test-timer.js","skipped":false,"dir":"test"},{"name":"timeoutPromise - race with timeout","suites":[],"updatePoint":{"line":92,"column":40,"index":2817},"line":92,"code":"  it('timeoutPromise - race with timeout', () => {\n    windowMock.expects('setTimeout').withExactArgs(env.sandbox.match(value => {\n      // Immediate timeout\n      value();\n      return true;\n    }), 111).returns(1).once();\n    let c = 0;\n    return timer.timeoutPromise(111, new Promise(() => {})).then(result => {\n      c++;\n      assert.fail('must never be here: ' + result);\n    }).catch(reason => {\n      c++;\n      expect(c).to.equal(1);\n      expect(reason.message).to.contain('timeout');\n    });\n  });","file":"unit/test-timer.js","skipped":false,"dir":"test"},{"name":"poll - resolves only when condition is true","suites":[],"updatePoint":{"line":108,"column":49,"index":3336},"line":108,"code":"  it('poll - resolves only when condition is true', () => {\n    const realTimer = new Timer(env.win);\n    let predicate = false;\n    setTimeout(() => {\n      predicate = true;\n    }, 15);\n    return realTimer.poll(10, () => {\n      return predicate;\n    }).then(() => {\n      expect(predicate).to.be.true;\n    });\n  });","file":"unit/test-timer.js","skipped":false,"dir":"test"},{"name":"poll - clears out interval when complete","suites":[],"updatePoint":{"line":120,"column":46,"index":3653},"line":120,"code":"  it('poll - clears out interval when complete', () => {\n    const realTimer = new Timer(env.win);\n    const clearIntervalStub = env.sandbox.stub();\n    env.win.clearInterval = clearIntervalStub;\n    return realTimer.poll(111, () => {\n      return true;\n    }).then(() => {\n      expect(clearIntervalStub).to.have.been.calledOnce;\n    });\n  });","file":"unit/test-timer.js","skipped":false,"dir":"test"},{"name":"limit replacement params size","suites":["UrlReplacements"],"updatePoint":{"line":158,"column":37,"index":6033},"line":158,"code":"    it('limit replacement params size', () => {\n      return getReplacements().then(replacements => {\n        replacements.getVariableSource().initialize();\n        const variables = Object.keys(replacements.getVariableSource().replacements_);\n        // Restrict the number of replacement params to globalVariableSource\n        // Please consider adding the logic to amp-analytics instead.\n        // Please contact @lannka or @zhouyx if the test fail.\n        expect(variables.length).to.equal(60);\n      });\n    });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should replace RANDOM","suites":["UrlReplacements"],"updatePoint":{"line":168,"column":29,"index":6544},"line":168,"code":"    it('should replace RANDOM', () => {\n      return expandUrlAsync('ord=RANDOM?').then(res => {\n        expect(res).to.match(/ord=(\\d+(\\.\\d+)?)\\?$/);\n      });\n    });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should replace COUNTER","suites":["UrlReplacements"],"updatePoint":{"line":173,"column":30,"index":6714},"line":173,"code":"    it('should replace COUNTER', () => {\n      return expandUrlAsync('COUNTER(foo),COUNTER(bar),COUNTER(foo),COUNTER(bar),COUNTER(bar)').then(res => {\n        expect(res).to.equal('1,1,2,2,3');\n      });\n    });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should replace CANONICAL_URL","suites":["UrlReplacements"],"updatePoint":{"line":178,"column":36,"index":6932},"line":178,"code":"    it('should replace CANONICAL_URL', () => {\n      return expandUrlAsync('?href=CANONICAL_URL').then(res => {\n        expect(res).to.equal('?href=https%3A%2F%2Fpinterest.com%3A8080%2Fpin1');\n      });\n    });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should replace CANONICAL_HOST","suites":["UrlReplacements"],"updatePoint":{"line":183,"column":37,"index":7144},"line":183,"code":"    it('should replace CANONICAL_HOST', () => {\n      return expandUrlAsync('?host=CANONICAL_HOST').then(res => {\n        expect(res).to.equal('?host=pinterest.com%3A8080');\n      });\n    });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should replace CANONICAL_HOSTNAME","suites":["UrlReplacements"],"updatePoint":{"line":188,"column":41,"index":7340},"line":188,"code":"    it('should replace CANONICAL_HOSTNAME', () => {\n      return expandUrlAsync('?host=CANONICAL_HOSTNAME').then(res => {\n        expect(res).to.equal('?host=pinterest.com');\n      });\n    });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should replace CANONICAL_PATH","suites":["UrlReplacements"],"updatePoint":{"line":193,"column":37,"index":7529},"line":193,"code":"    it('should replace CANONICAL_PATH', () => {\n      return expandUrlAsync('?path=CANONICAL_PATH').then(res => {\n        expect(res).to.equal('?path=%2Fpin1');\n      });\n    });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should replace DOCUMENT_REFERRER","suites":["UrlReplacements"],"updatePoint":{"line":198,"column":40,"index":7711},"line":198,"code":"    it('should replace DOCUMENT_REFERRER', async () => {\n      const replacements = await getReplacements();\n      env.sandbox.stub(viewerService, 'getReferrerUrl').returns('http://fake.example/?foo=bar');\n      const res = await replacements.expandUrlAsync('?ref=DOCUMENT_REFERRER');\n      expect(res).to.equal('?ref=http%3A%2F%2Ffake.example%2F%3Ffoo%3Dbar');\n    });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should replace EXTERNAL_REFERRER","suites":["UrlReplacements"],"updatePoint":{"line":204,"column":40,"index":8081},"line":204,"code":"    it('should replace EXTERNAL_REFERRER', () => {\n      const windowInterface = mockWindowInterface(env.sandbox);\n      windowInterface.getHostname.returns('different.org');\n      return getReplacements().then(replacements => {\n        stubServiceForDoc(env.sandbox, ampdoc, 'viewer', 'getReferrerUrl').returns(Promise.resolve('http://example.org/page.html'));\n        return replacements.expandUrlAsync('?ref=EXTERNAL_REFERRER');\n      }).then(res => {\n        expect(res).to.equal('?ref=http%3A%2F%2Fexample.org%2Fpage.html');\n      });\n    });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should replace TITLE","suites":["UrlReplacements"],"updatePoint":{"line":244,"column":28,"index":10391},"line":244,"code":"    it('should replace TITLE', () => {\n      return expandUrlAsync('?title=TITLE').then(res => {\n        expect(res).to.equal('?title=Pixel%20Test');\n      });\n    });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should prefer original title for TITLE","suites":["UrlReplacements"],"updatePoint":{"line":249,"column":46,"index":10577},"line":249,"code":"    it('should prefer original title for TITLE', () => {\n      return expandUrlAsync('?title=TITLE', /*opt_bindings*/undefined, {\n        withOriginalTitle: true\n      }).then(res => {\n        expect(res).to.equal('?title=Original%20Pixel%20Test');\n      });\n    });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should replace AMPDOC_URL","suites":["UrlReplacements","AMPDOC_URL"],"updatePoint":{"line":257,"column":35,"index":10868},"line":257,"code":"      it('should replace AMPDOC_URL', () => {\n        return expandUrlAsync('?ref=AMPDOC_URL').then(res => {\n          expect(res).to.not.match(/AMPDOC_URL/);\n        });\n      });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should add extra params to AMPDOC_URL","suites":["UrlReplacements","AMPDOC_URL"],"updatePoint":{"line":262,"column":47,"index":11061},"line":262,"code":"      it('should add extra params to AMPDOC_URL', () => {\n        const win = getFakeWindow();\n        win.location = parseUrlDeprecated('https://cdn.ampproject.org/a/o.com/foo/?amp_r=hello%3Dworld');\n        return Services.urlReplacementsForDoc(win.document.documentElement).expandUrlAsync('?url=AMPDOC_URL').then(res => {\n          expect(res).to.contain(encodeURIComponent('https://cdn.ampproject.org/a/o.com/foo/?hello=world'));\n        });\n      });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should merge extra params in AMPDOC_URL","suites":["UrlReplacements","AMPDOC_URL"],"updatePoint":{"line":269,"column":49,"index":11519},"line":269,"code":"      it('should merge extra params in AMPDOC_URL', () => {\n        const win = getFakeWindow();\n        win.location = parseUrlDeprecated('https://cdn.ampproject.org/a/o.com/foo/?test=case&amp_r=hello%3Dworld');\n        return Services.urlReplacementsForDoc(win.document.documentElement).expandUrlAsync('?url=AMPDOC_URL').then(res => {\n          expect(res).to.contain(encodeURIComponent('https://cdn.ampproject.org/a/o.com/foo/?test=case&hello=world'));\n        });\n      });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should allow an embedded amp_r parameter","suites":["UrlReplacements","AMPDOC_URL"],"updatePoint":{"line":276,"column":50,"index":11998},"line":276,"code":"      it('should allow an embedded amp_r parameter', () => {\n        const win = getFakeWindow();\n        win.location = parseUrlDeprecated('https://cdn.ampproject.org/a/o.com/foo/?amp_r=amp_r%3Dweird');\n        return Services.urlReplacementsForDoc(win.document.documentElement).expandUrlAsync('?url=AMPDOC_URL').then(res => {\n          expect(res).to.contain(encodeURIComponent('https://cdn.ampproject.org/a/o.com/foo/?amp_r=weird'));\n        });\n      });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should prefer original params in AMPDOC_URL","suites":["UrlReplacements","AMPDOC_URL"],"updatePoint":{"line":283,"column":53,"index":12460},"line":283,"code":"      it('should prefer original params in AMPDOC_URL', () => {\n        const win = getFakeWindow();\n        win.location = parseUrlDeprecated('https://cdn.ampproject.org/a/o.com/foo/?test=case&amp_r=test%3Devil');\n        return Services.urlReplacementsForDoc(win.document.documentElement).expandUrlAsync('?url=AMPDOC_URL').then(res => {\n          expect(res).to.contain(encodeURIComponent('https://cdn.ampproject.org/a/o.com/foo/?test=case'));\n        });\n      });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should merge multiple extra params safely in AMPDOC_URL","suites":["UrlReplacements","AMPDOC_URL"],"updatePoint":{"line":290,"column":65,"index":12940},"line":290,"code":"      it('should merge multiple extra params safely in AMPDOC_URL', () => {\n        const win = getFakeWindow();\n        win.location = parseUrlDeprecated('https://cdn.ampproject.org/a/o.com/foo/?test=case&a&hello=you&amp_r=hello%3Dworld%26goodnight%3Dmoon');\n        return Services.urlReplacementsForDoc(win.document.documentElement).expandUrlAsync('?url=AMPDOC_URL').then(res => {\n          expect(res).to.contain(encodeURIComponent('https://cdn.ampproject.org/a/o.com/foo/?test=case&a&hello=you&goodnight=moon'));\n        });\n      });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should replace AMPDOC_HOST","suites":["UrlReplacements","AMPDOC_URL"],"updatePoint":{"line":298,"column":34,"index":13457},"line":298,"code":"    it('should replace AMPDOC_HOST', () => {\n      return expandUrlAsync('?ref=AMPDOC_HOST').then(res => {\n        expect(res).to.not.match(/AMPDOC_HOST/);\n      });\n    });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should replace AMPDOC_HOSTNAME","suites":["UrlReplacements","AMPDOC_URL"],"updatePoint":{"line":303,"column":38,"index":13635},"line":303,"code":"    it('should replace AMPDOC_HOSTNAME', () => {\n      return expandUrlAsync('?ref=AMPDOC_HOSTNAME').then(res => {\n        expect(res).to.not.match(/AMPDOC_HOSTNAME/);\n      });\n    });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should replace SOURCE_URL and SOURCE_HOST","suites":["UrlReplacements","SOURCE_URL"],"updatePoint":{"line":309,"column":51,"index":13869},"line":309,"code":"      it('should replace SOURCE_URL and SOURCE_HOST', () => {\n        const win = getFakeWindow();\n        win.location = parseUrlDeprecated('https://wrong.com');\n        env.sandbox.stub(trackPromise, 'getTrackImpressionPromise').callsFake(() => {\n          return new Promise(resolve => {\n            win.location = parseUrlDeprecated('https://example.com/test');\n            resolve();\n          });\n        });\n        return Services.urlReplacementsForDoc(win.document.documentElement).expandUrlAsync('?url=SOURCE_URL&host=SOURCE_HOST').then(res => {\n          expect(res).to.equal('?url=https%3A%2F%2Fexample.com%2Ftest&host=example.com');\n        });\n      });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should replace SOURCE_URL and SOURCE_HOSTNAME","suites":["UrlReplacements","SOURCE_URL"],"updatePoint":{"line":322,"column":55,"index":14541},"line":322,"code":"      it('should replace SOURCE_URL and SOURCE_HOSTNAME', () => {\n        const win = getFakeWindow();\n        win.location = parseUrlDeprecated('https://wrong.com');\n        env.sandbox.stub(trackPromise, 'getTrackImpressionPromise').callsFake(() => {\n          return new Promise(resolve => {\n            win.location = parseUrlDeprecated('https://example.com/test');\n            resolve();\n          });\n        });\n        return Services.urlReplacementsForDoc(win.document.documentElement).expandUrlAsync('?url=SOURCE_URL&hostname=SOURCE_HOSTNAME').then(res => {\n          expect(res).to.equal('?url=https%3A%2F%2Fexample.com%2Ftest&hostname=example.com');\n        });\n      });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should update SOURCE_URL after track impression","suites":["UrlReplacements","SOURCE_URL"],"updatePoint":{"line":335,"column":57,"index":15227},"line":335,"code":"      it('should update SOURCE_URL after track impression', () => {\n        const win = getFakeWindow();\n        win.location = parseUrlDeprecated('https://wrong.com');\n        env.sandbox.stub(trackPromise, 'getTrackImpressionPromise').callsFake(() => {\n          return new Promise(resolve => {\n            win.location = parseUrlDeprecated('https://example.com?gclid=123456');\n            resolve();\n          });\n        });\n        return Services.urlReplacementsForDoc(win.document.documentElement).expandUrlAsync('?url=SOURCE_URL').then(res => {\n          expect(res).to.contain('example.com');\n        });\n      });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should add extra params to SOURCE_URL","suites":["UrlReplacements","SOURCE_URL"],"updatePoint":{"line":348,"column":47,"index":15841},"line":348,"code":"      it('should add extra params to SOURCE_URL', () => {\n        const win = getFakeWindow();\n        win.location = parseUrlDeprecated('https://cdn.ampproject.org/a/o.com/foo/?a&amp_r=hello%3Dworld');\n        env.sandbox.stub(trackPromise, 'getTrackImpressionPromise').callsFake(() => {\n          return Promise.resolve();\n        });\n        return Services.urlReplacementsForDoc(win.document.documentElement).expandUrlAsync('?url=SOURCE_URL').then(res => {\n          expect(res).to.equal('?url=' + encodeURIComponent('http://o.com/foo/?a&hello=world'));\n        });\n      });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should ignore extra params that already exists in SOURCE_URL","suites":["UrlReplacements","SOURCE_URL"],"updatePoint":{"line":358,"column":70,"index":16444},"line":358,"code":"      it('should ignore extra params that already exists in SOURCE_URL', () => {\n        const win = getFakeWindow();\n        win.location = parseUrlDeprecated('https://cdn.ampproject.org/a/o.com/foo/?a=1&safe=1&amp_r=hello%3Dworld%26safe=evil');\n        env.sandbox.stub(trackPromise, 'getTrackImpressionPromise').callsFake(() => {\n          return Promise.resolve();\n        });\n        return Services.urlReplacementsForDoc(win.document.documentElement).expandUrlAsync('?url=SOURCE_URL').then(res => {\n          expect(res).to.equal('?url=' + encodeURIComponent('http://o.com/foo/?a=1&safe=1&hello=world'));\n        });\n      });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should not change SOURCE_URL if is not ad landing page","suites":["UrlReplacements","SOURCE_URL"],"updatePoint":{"line":368,"column":64,"index":17071},"line":368,"code":"      it('should not change SOURCE_URL if is not ad landing page', () => {\n        const win = getFakeWindow();\n        win.location = parseUrlDeprecated('https://cdn.ampproject.org/v/o.com/foo/?a&amp_r=hello%3Dworld');\n        env.sandbox.stub(trackPromise, 'getTrackImpressionPromise').callsFake(() => {\n          return Promise.resolve();\n        });\n        return Services.urlReplacementsForDoc(win.document.documentElement).expandUrlAsync('?url=SOURCE_URL').then(res => {\n          expect(res).to.equal('?url=' + encodeURIComponent('http://o.com/foo/?a'));\n        });\n      });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should replace SOURCE_PATH","suites":["UrlReplacements","SOURCE_URL"],"updatePoint":{"line":379,"column":34,"index":17634},"line":379,"code":"    it('should replace SOURCE_PATH', () => {\n      return expandUrlAsync('?path=SOURCE_PATH').then(res => {\n        expect(res).to.not.match(/SOURCE_PATH/);\n      });\n    });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should replace PAGE_VIEW_ID","suites":["UrlReplacements","SOURCE_URL"],"updatePoint":{"line":384,"column":35,"index":17810},"line":384,"code":"    it('should replace PAGE_VIEW_ID', () => {\n      return expandUrlAsync('?pid=PAGE_VIEW_ID').then(res => {\n        expect(res).to.match(/pid=\\d+/);\n      });\n    });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should replace PAGE_VIEW_ID_64","suites":["UrlReplacements","SOURCE_URL"],"updatePoint":{"line":389,"column":38,"index":17981},"line":389,"code":"    it('should replace PAGE_VIEW_ID_64', () => {\n      return expandUrlAsync('?pid=PAGE_VIEW_ID_64').then(res => {\n        expect(res).to.match(/pid=([a-zA-Z0-9_-]{10,})/);\n      });\n    });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should replace CLIENT_ID","suites":["UrlReplacements","SOURCE_URL"],"updatePoint":{"line":394,"column":32,"index":18166},"line":394,"code":"    it('should replace CLIENT_ID', () => {\n      setCookie(window, 'url-abc', 'cid-for-abc');\n      // Make sure cookie does not exist\n      setCookie(window, 'url-xyz', '');\n      return expandUrlAsync('?a=CLIENT_ID(url-abc)&b=CLIENT_ID(url-xyz)', /*opt_bindings*/undefined, {\n        withCid: true\n      }).then(res => {\n        expect(res).to.match(/^\\?a=cid-for-abc\\&b=amp-([a-zA-Z0-9_-]{10,})/);\n      });\n    });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should allow empty CLIENT_ID","suites":["UrlReplacements","SOURCE_URL"],"updatePoint":{"line":404,"column":36,"index":18589},"line":404,"code":"    it('should allow empty CLIENT_ID', () => {\n      return getReplacements().then(replacements => {\n        stubServiceForDoc(env.sandbox, ampdoc, 'cid', 'get').returns(Promise.resolve());\n        return replacements.expandUrlAsync('?a=CLIENT_ID(_ga)');\n      }).then(res => {\n        expect(res).to.equal('?a=');\n      });\n    });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should replace CLIENT_ID with opt_cookieName","suites":["UrlReplacements","SOURCE_URL"],"updatePoint":{"line":412,"column":52,"index":18938},"line":412,"code":"    it('should replace CLIENT_ID with opt_cookieName', () => {\n      setCookie(window, 'url-abc', 'cid-for-abc');\n      // Make sure cookie does not exist\n      setCookie(window, 'url-xyz', '');\n      return expandUrlAsync('?a=CLIENT_ID(abc,,url-abc)&b=CLIENT_ID(xyz,,url-xyz)', /*opt_bindings*/undefined, {\n        withCid: true\n      }).then(res => {\n        expect(res).to.match(/^\\?a=cid-for-abc\\&b=amp-([a-zA-Z0-9_-]{10,})/);\n      });\n    });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should parse _ga cookie correctly","suites":["UrlReplacements","SOURCE_URL"],"updatePoint":{"line":422,"column":41,"index":19376},"line":422,"code":"    it('should parse _ga cookie correctly', () => {\n      setCookie(window, '_ga', 'GA1.2.12345.54321');\n      return expandUrlAsync('?a=CLIENT_ID(AMP_ECID_GOOGLE,,_ga)&b=CLIENT_ID(_ga)', /*opt_bindings*/undefined, {\n        withCid: true\n      }).then(res => {\n        expect(res).to.match(/^\\?a=12345.54321&b=12345.54321/);\n      });\n    });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should replace CLIENT_ID synchronously when available","suites":["UrlReplacements","SOURCE_URL"],"updatePoint":{"line":430,"column":61,"index":19740},"line":430,"code":"    it('should replace CLIENT_ID synchronously when available', () => {\n      return getReplacements({\n        withCid: true\n      }).then(urlReplacements => {\n        setCookie(window, 'url-abc', 'cid-for-abc');\n        setCookie(window, 'url-xyz', 'cid-for-xyz');\n        // Only requests cid-for-xyz in async path\n        return urlReplacements.expandUrlAsync('b=CLIENT_ID(url-xyz)').then(res => {\n          expect(res).to.equal('b=cid-for-xyz');\n        }).then(() => {\n          const result = urlReplacements.expandUrlSync('?a=CLIENT_ID(url-abc)&b=CLIENT_ID(url-xyz)' + '&c=CLIENT_ID(other)');\n          expect(result).to.equal('?a=&b=cid-for-xyz&c=');\n        });\n      });\n    });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should replace AMP_STATE(key)","suites":["UrlReplacements","SOURCE_URL"],"updatePoint":{"line":445,"column":37,"index":20405},"line":445,"code":"    it('should replace AMP_STATE(key)', () => {\n      const win = getFakeWindow();\n      env.sandbox.stub(Services, 'bindForDocOrNull').returns(Promise.resolve({\n        getStateValue(key) {\n          expect(key).to.equal('foo.bar');\n          return Promise.resolve('baz');\n        }\n      }));\n      return Services.urlReplacementsForDoc(win.document.documentElement).expandUrlAsync('?state=AMP_STATE(foo.bar)').then(res => {\n        expect(res).to.equal('?state=baz');\n      });\n    });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should replace VARIANT","suites":["UrlReplacements","SOURCE_URL"],"line":457,"code":"    it.skip('should replace VARIANT', () => {","file":"unit/test-url-replacements.js","skipped":true,"dir":"test"},{"name":"should replace VARIANTS","suites":["UrlReplacements","SOURCE_URL"],"updatePoint":{"line":465,"column":31,"index":21371},"line":465,"code":"    it('should replace VARIANTS', () => {\n      return expect(expandUrlAsync('?VARIANTS', /*opt_bindings*/undefined, {\n        withVariant: true\n      })).to.eventually.equal('?x1.v1!x2.none');\n    });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should replace TIMESTAMP","suites":["UrlReplacements","SOURCE_URL"],"updatePoint":{"line":473,"column":32,"index":21764},"line":473,"code":"    it('should replace TIMESTAMP', () => {\n      return expandUrlAsync('?ts=TIMESTAMP').then(res => {\n        expect(res).to.match(/ts=\\d+/);\n      });\n    });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should replace TIMESTAMP_ISO","suites":["UrlReplacements","SOURCE_URL"],"updatePoint":{"line":478,"column":36,"index":21928},"line":478,"code":"    it('should replace TIMESTAMP_ISO', () => {\n      return expandUrlAsync('?tsf=TIMESTAMP_ISO').then(res => {\n        expect(res).to.match(/tsf=\\d+/);\n      });\n    });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should return correct ISO timestamp","suites":["UrlReplacements","SOURCE_URL"],"updatePoint":{"line":483,"column":43,"index":22105},"line":483,"code":"    it('should return correct ISO timestamp', () => {\n      const fakeTime = 1499979336612;\n      env.sandbox.useFakeTimers(fakeTime);\n      return expect(expandUrlAsync('?tsf=TIMESTAMP_ISO')).to.eventually.equal('?tsf=2017-07-13T20%3A55%3A36.612Z');\n    });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should replace TIMEZONE","suites":["UrlReplacements","SOURCE_URL"],"updatePoint":{"line":488,"column":31,"index":22352},"line":488,"code":"    it('should replace TIMEZONE', () => {\n      return expandUrlAsync('?tz=TIMEZONE').then(res => {\n        expect(res).to.match(/tz=-?\\d+/);\n      });\n    });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should replace SCROLL_HEIGHT","suites":["UrlReplacements","SOURCE_URL"],"updatePoint":{"line":493,"column":36,"index":22517},"line":493,"code":"    it('should replace SCROLL_HEIGHT', () => {\n      return expandUrlAsync('?scrollHeight=SCROLL_HEIGHT').then(res => {\n        expect(res).to.match(/scrollHeight=\\d+/);\n      });\n    });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should replace SCREEN_WIDTH","suites":["UrlReplacements","SOURCE_URL"],"updatePoint":{"line":498,"column":35,"index":22704},"line":498,"code":"    it('should replace SCREEN_WIDTH', () => {\n      return expandUrlAsync('?sw=SCREEN_WIDTH').then(res => {\n        expect(res).to.match(/sw=\\d+/);\n      });\n    });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should replace SCREEN_HEIGHT","suites":["UrlReplacements","SOURCE_URL"],"updatePoint":{"line":503,"column":36,"index":22871},"line":503,"code":"    it('should replace SCREEN_HEIGHT', () => {\n      return expandUrlAsync('?sh=SCREEN_HEIGHT').then(res => {\n        expect(res).to.match(/sh=\\d+/);\n      });\n    });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should replace VIEWPORT_WIDTH","suites":["UrlReplacements","SOURCE_URL"],"updatePoint":{"line":508,"column":37,"index":23040},"line":508,"code":"    it('should replace VIEWPORT_WIDTH', () => {\n      return expandUrlAsync('?vw=VIEWPORT_WIDTH').then(res => {\n        expect(res).to.match(/vw=\\d+/);\n      });\n    });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should replace VIEWPORT_HEIGHT","suites":["UrlReplacements","SOURCE_URL"],"updatePoint":{"line":513,"column":38,"index":23211},"line":513,"code":"    it('should replace VIEWPORT_HEIGHT', () => {\n      return expandUrlAsync('?vh=VIEWPORT_HEIGHT').then(res => {\n        expect(res).to.match(/vh=\\d+/);\n      });\n    });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should replace PAGE_LOAD_TIME","suites":["UrlReplacements","SOURCE_URL"],"updatePoint":{"line":518,"column":37,"index":23382},"line":518,"code":"    it('should replace PAGE_LOAD_TIME', () => {\n      return expandUrlAsync('?sh=PAGE_LOAD_TIME').then(res => {\n        expect(res).to.match(/sh=\\d+/);\n      });\n    });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should reject protocol changes","suites":["UrlReplacements","SOURCE_URL"],"updatePoint":{"line":523,"column":38,"index":23553},"line":523,"code":"    it('should reject protocol changes', () => {\n      const win = getFakeWindow();\n      const {\n        documentElement\n      } = win.document;\n      const urlReplacements = Services.urlReplacementsForDoc(documentElement);\n      return urlReplacements.expandUrlAsync('PROTOCOL://example.com/?r=RANDOM', {\n        'PROTOCOL': Promise.resolve('abc')\n      }).then(expanded => {\n        expect(expanded).to.equal('PROTOCOL://example.com/?r=RANDOM');\n      });\n    });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"Should replace BACKGROUND_STATE with 0","suites":["UrlReplacements","SOURCE_URL"],"updatePoint":{"line":535,"column":46,"index":24028},"line":535,"code":"    it('Should replace BACKGROUND_STATE with 0', () => {\n      const win = getFakeWindow();\n      const {\n        ampdoc\n      } = win;\n      env.sandbox.stub(ampdoc, 'isVisible').returns(true);\n      return Services.urlReplacementsForDoc(win.document.documentElement).expandUrlAsync('?sh=BACKGROUND_STATE').then(res => {\n        expect(res).to.equal('?sh=0');\n      });\n    });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"Should replace BACKGROUND_STATE with 1","suites":["UrlReplacements","SOURCE_URL"],"updatePoint":{"line":545,"column":46,"index":24407},"line":545,"code":"    it('Should replace BACKGROUND_STATE with 1', () => {\n      const win = getFakeWindow();\n      const {\n        ampdoc\n      } = win;\n      env.sandbox.stub(ampdoc, 'isVisible').returns(false);\n      return Services.urlReplacementsForDoc(win.document.documentElement).expandUrlAsync('?sh=BACKGROUND_STATE').then(res => {\n        expect(res).to.equal('?sh=1');\n      });\n    });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"Should replace VIDEO_STATE(video,parameter) with video data","suites":["UrlReplacements","SOURCE_URL"],"updatePoint":{"line":555,"column":67,"index":24808},"line":555,"code":"    it('Should replace VIDEO_STATE(video,parameter) with video data', () => {\n      const win = getFakeWindow();\n      env.sandbox.stub(Services, 'videoManagerForDoc').returns({\n        getVideoStateProperty() {\n          return Promise.resolve('1.5');\n        }\n      });\n      env.sandbox.stub(win.document, 'getElementById').withArgs('video').returns(document.createElement('video'));\n      return Services.urlReplacementsForDoc(win.document.documentElement).expandUrlAsync('?sh=VIDEO_STATE(video,currentTime)').then(res => {\n        expect(res).to.equal('?sh=1.5');\n      });\n    });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"is replaced if timing info is not available","suites":["UrlReplacements","PAGE_LOAD_TIME"],"updatePoint":{"line":583,"column":53,"index":25930},"line":583,"code":"      it('is replaced if timing info is not available', () => {\n        win.document.readyState = 'complete';\n        return Services.urlReplacementsForDoc(win.document.documentElement).expandUrlAsync('?sh=PAGE_LOAD_TIME&s').then(res => {\n          expect(res).to.match(/sh=&s/);\n        });\n      });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"is replaced if PAGE_LOAD_TIME is available within a delay","suites":["UrlReplacements","PAGE_LOAD_TIME"],"updatePoint":{"line":589,"column":67,"index":26246},"line":589,"code":"      it('is replaced if PAGE_LOAD_TIME is available within a delay', () => {\n        const {\n          documentElement\n        } = win.document;\n        const urlReplacements = Services.urlReplacementsForDoc(documentElement);\n        const validMetric = urlReplacements.expandUrlAsync('?sh=PAGE_LOAD_TIME&s');\n        urlReplacements.ampdoc.win.performance.timing.loadEventStart = 109;\n        win.document.readyState = 'complete';\n        loadObservable.fire({\n          type: 'load'\n        });\n        return validMetric.then(res => {\n          expect(res).to.match(/sh=9&s/);\n        });\n      });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should replace NAV_REDIRECT_COUNT","suites":["UrlReplacements","PAGE_LOAD_TIME"],"updatePoint":{"line":605,"column":41,"index":26831},"line":605,"code":"    it('should replace NAV_REDIRECT_COUNT', () => {\n      return expandUrlAsync('?sh=NAV_REDIRECT_COUNT').then(res => {\n        expect(res).to.match(/sh=\\d+/);\n      });\n    });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should replace NAV_TIMING","suites":["UrlReplacements","PAGE_LOAD_TIME"],"line":610,"code":"    it.skip('should replace NAV_TIMING', () => {","file":"unit/test-url-replacements.js","skipped":true,"dir":"test"},{"name":"should replace NAV_TIMING when attribute names are invalid","suites":["UrlReplacements","PAGE_LOAD_TIME"],"updatePoint":{"line":615,"column":66,"index":27271},"line":615,"code":"    it('should replace NAV_TIMING when attribute names are invalid', () => {\n      return expandUrlAsync('?a=NAV_TIMING(invalid)' + '&b=NAV_TIMING(invalid,invalid)' + '&c=NAV_TIMING(navigationStart,invalid)' + '&d=NAV_TIMING(invalid,responseStart)').then(res => {\n        expect(res).to.match(/a=&b=&c=&d=/);\n      });\n    });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should replace NAV_TYPE","suites":["UrlReplacements","PAGE_LOAD_TIME"],"updatePoint":{"line":620,"column":31,"index":27563},"line":620,"code":"    it('should replace NAV_TYPE', () => {\n      return expandUrlAsync('?sh=NAV_TYPE').then(res => {\n        expect(res).to.match(/sh=\\d+/);\n      });\n    });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should replace DOMAIN_LOOKUP_TIME","suites":["UrlReplacements","PAGE_LOAD_TIME"],"updatePoint":{"line":625,"column":41,"index":27731},"line":625,"code":"    it('should replace DOMAIN_LOOKUP_TIME', () => {\n      return expandUrlAsync('?sh=DOMAIN_LOOKUP_TIME').then(res => {\n        expect(res).to.match(/sh=\\d+/);\n      });\n    });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should replace TCP_CONNECT_TIME","suites":["UrlReplacements","PAGE_LOAD_TIME"],"updatePoint":{"line":630,"column":39,"index":27907},"line":630,"code":"    it('should replace TCP_CONNECT_TIME', () => {\n      return expandUrlAsync('?sh=TCP_CONNECT_TIME').then(res => {\n        expect(res).to.match(/sh=\\d+/);\n      });\n    });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should replace SERVER_RESPONSE_TIME","suites":["UrlReplacements","PAGE_LOAD_TIME"],"updatePoint":{"line":635,"column":43,"index":28085},"line":635,"code":"    it('should replace SERVER_RESPONSE_TIME', () => {\n      return expandUrlAsync('?sh=SERVER_RESPONSE_TIME').then(res => {\n        expect(res).to.match(/sh=\\d+/);\n      });\n    });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should replace PAGE_DOWNLOAD_TIME","suites":["UrlReplacements","PAGE_LOAD_TIME"],"updatePoint":{"line":640,"column":41,"index":28265},"line":640,"code":"    it('should replace PAGE_DOWNLOAD_TIME', () => {\n      return expandUrlAsync('?sh=PAGE_DOWNLOAD_TIME').then(res => {\n        expect(res).to.match(/sh=\\d+/);\n      });\n    });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should replace REDIRECT_TIME","suites":["UrlReplacements","PAGE_LOAD_TIME"],"line":645,"code":"    it.skip('should replace REDIRECT_TIME', () => {","file":"unit/test-url-replacements.js","skipped":true,"dir":"test"},{"name":"should replace DOM_INTERACTIVE_TIME","suites":["UrlReplacements","PAGE_LOAD_TIME"],"updatePoint":{"line":650,"column":43,"index":28618},"line":650,"code":"    it('should replace DOM_INTERACTIVE_TIME', () => {\n      return expandUrlAsync('?sh=DOM_INTERACTIVE_TIME').then(res => {\n        expect(res).to.match(/sh=\\d+/);\n      });\n    });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should replace CONTENT_LOAD_TIME","suites":["UrlReplacements","PAGE_LOAD_TIME"],"updatePoint":{"line":655,"column":40,"index":28797},"line":655,"code":"    it('should replace CONTENT_LOAD_TIME', () => {\n      return expandUrlAsync('?sh=CONTENT_LOAD_TIME').then(res => {\n        expect(res).to.match(/sh=\\d+/);\n      });\n    });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should replace AVAILABLE_SCREEN_HEIGHT","suites":["UrlReplacements","PAGE_LOAD_TIME"],"updatePoint":{"line":660,"column":46,"index":28979},"line":660,"code":"    it('should replace AVAILABLE_SCREEN_HEIGHT', () => {\n      return expandUrlAsync('?sh=AVAILABLE_SCREEN_HEIGHT').then(res => {\n        expect(res).to.match(/sh=\\d+/);\n      });\n    });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should replace AVAILABLE_SCREEN_WIDTH","suites":["UrlReplacements","PAGE_LOAD_TIME"],"updatePoint":{"line":665,"column":45,"index":29166},"line":665,"code":"    it('should replace AVAILABLE_SCREEN_WIDTH', () => {\n      return expandUrlAsync('?sh=AVAILABLE_SCREEN_WIDTH').then(res => {\n        expect(res).to.match(/sh=\\d+/);\n      });\n    });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should replace SCREEN_COLOR_DEPTH","suites":["UrlReplacements","PAGE_LOAD_TIME"],"updatePoint":{"line":670,"column":41,"index":29348},"line":670,"code":"    it('should replace SCREEN_COLOR_DEPTH', () => {\n      return expandUrlAsync('?sh=SCREEN_COLOR_DEPTH').then(res => {\n        expect(res).to.match(/sh=\\d+/);\n      });\n    });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should replace BROWSER_LANGUAGE","suites":["UrlReplacements","PAGE_LOAD_TIME"],"updatePoint":{"line":675,"column":39,"index":29524},"line":675,"code":"    it('should replace BROWSER_LANGUAGE', () => {\n      return expandUrlAsync('?sh=BROWSER_LANGUAGE').then(res => {\n        expect(res).to.match(/sh=\\w+/);\n      });\n    });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should replace UACH platform","suites":["UrlReplacements","PAGE_LOAD_TIME"],"updatePoint":{"line":680,"column":36,"index":29695},"line":680,"code":"    it('should replace UACH platform', () => {\n      return expandUrlAsync('?sh=UACH(platform)').then(res => {\n        expect(res).to.match(/sh=\\w?/);\n      });\n    });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should replace UACH brands","suites":["UrlReplacements","PAGE_LOAD_TIME"],"updatePoint":{"line":685,"column":34,"index":29862},"line":685,"code":"    it('should replace UACH brands', () => {\n      return expandUrlAsync('?sh=UACH(brands)').then(res => {\n        expect(res).to.match(/sh=\\w?/);\n      });\n    });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should replace USER_AGENT","suites":["UrlReplacements","PAGE_LOAD_TIME"],"updatePoint":{"line":690,"column":33,"index":30026},"line":690,"code":"    it('should replace USER_AGENT', () => {\n      return expandUrlAsync('?sh=USER_AGENT').then(res => {\n        expect(res).to.match(/sh=\\w+/);\n      });\n    });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should replace VIEWER with origin","suites":["UrlReplacements","PAGE_LOAD_TIME"],"updatePoint":{"line":695,"column":41,"index":30196},"line":695,"code":"    it('should replace VIEWER with origin', () => {\n      return getReplacements().then(replacements => {\n        env.sandbox.stub(viewerService, 'getViewerOrigin').returns(Promise.resolve('https://www.google.com'));\n        return replacements.expandUrlAsync('?sh=VIEWER').then(res => {\n          expect(res).to.equal('?sh=https%3A%2F%2Fwww.google.com');\n        });\n      });\n    });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should replace VIEWER with empty string","suites":["UrlReplacements","PAGE_LOAD_TIME"],"updatePoint":{"line":703,"column":47,"index":30588},"line":703,"code":"    it('should replace VIEWER with empty string', () => {\n      return getReplacements().then(replacements => {\n        env.sandbox.stub(viewerService, 'getViewerOrigin').returns(Promise.resolve(''));\n        return replacements.expandUrlAsync('?sh=VIEWER').then(res => {\n          expect(res).to.equal('?sh=');\n        });\n      });\n    });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should replace TOTAL_ENGAGED_TIME","suites":["UrlReplacements","PAGE_LOAD_TIME"],"updatePoint":{"line":711,"column":41,"index":30924},"line":711,"code":"    it('should replace TOTAL_ENGAGED_TIME', () => {\n      return expandUrlAsync('?sh=TOTAL_ENGAGED_TIME', /*opt_bindings*/undefined, {\n        withActivity: true\n      }).then(res => {\n        expect(res).to.match(/sh=\\d+/);\n      });\n    });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should replace INCREMENTAL_ENGAGED_TIME","suites":["UrlReplacements","PAGE_LOAD_TIME"],"updatePoint":{"line":718,"column":47,"index":31173},"line":718,"code":"    it('should replace INCREMENTAL_ENGAGED_TIME', () => {\n      return expandUrlAsync('?sh=INCREMENTAL_ENGAGED_TIME', /*opt_bindings*/undefined, {\n        withActivity: true\n      }).then(res => {\n        expect(res).to.match(/sh=\\d+/);\n      });\n    });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should replace AMP_VERSION","suites":["UrlReplacements","PAGE_LOAD_TIME"],"updatePoint":{"line":725,"column":34,"index":31415},"line":725,"code":"    it('should replace AMP_VERSION', () => {\n      return expandUrlAsync('?sh=AMP_VERSION').then(res => {\n        expect(res).to.equal('?sh=%24internalRuntimeVersion%24');\n      });\n    });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should replace FRAGMENT_PARAM with 2","suites":["UrlReplacements","PAGE_LOAD_TIME"],"updatePoint":{"line":730,"column":44,"index":31615},"line":730,"code":"    it('should replace FRAGMENT_PARAM with 2', () => {\n      const win = getFakeWindow();\n      win.location = {\n        originalHash: '#margarine=1&ice=2&cream=3'\n      };\n      return Services.urlReplacementsForDoc(win.document.documentElement).expandUrlAsync('?sh=FRAGMENT_PARAM(ice)&s').then(res => {\n        expect(res).to.equal('?sh=2&s');\n      });\n    });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should async replace AMP_GEO(ISOCountry) and AMP_GEO","suites":["UrlReplacements","PAGE_LOAD_TIME"],"updatePoint":{"line":739,"column":60,"index":31995},"line":739,"code":"    it('should async replace AMP_GEO(ISOCountry) and AMP_GEO', () => {\n      env.sandbox.stub(Services, 'geoForDocOrNull').returns(Promise.resolve({\n        'ISOCountry': 'unknown',\n        'ISOCountryGroups': ['nafta', 'waldo'],\n        'nafta': true,\n        'waldo': true,\n        'matchedISOCountryGroups': ['nafta', 'waldo']\n      }));\n      return expandUrlAsync('?geo=AMP_GEO,country=AMP_GEO(ISOCountry)').then(res => {\n        expect(res).to.equal('?geo=nafta%2Cwaldo,country=unknown');\n      });\n    });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should sync replace AMP_GEO(ISOCountry) and AMP_GEO","suites":["UrlReplacements","PAGE_LOAD_TIME"],"updatePoint":{"line":751,"column":59,"index":32507},"line":751,"code":"    it('should sync replace AMP_GEO(ISOCountry) and AMP_GEO', () => {\n      env.sandbox.stub(Services, 'geoForDocOrNull').returns(Promise.resolve({\n        'ISOCountry': 'unknown',\n        'ISOCountryGroups': ['nafta', 'waldo'],\n        'nafta': true,\n        'waldo': true,\n        'matchedISOCountryGroups': ['nafta', 'waldo']\n      }));\n      getReplacements().then(replacements => expect(replacements.expandUrlSync('?geo=AMP_GEO,country=AMP_GEO(ISOCountry)')).to.equal('?geo=nafta%2Cwaldo,country=unknown'));\n    });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should sync replace AMP_GEO(ISOCountry) and AMP_GEO with unknown when geo is not available","suites":["UrlReplacements","PAGE_LOAD_TIME"],"updatePoint":{"line":761,"column":98,"index":33067},"line":761,"code":"    it('should sync replace AMP_GEO(ISOCountry) and AMP_GEO with unknown when geo is not available', () => {\n      env.sandbox.stub(Services, 'geoForDocOrNull').returns(null);\n      getReplacements().then(replacements => expect(replacements.expandUrlSync('?geo=AMP_GEO,country=AMP_GEO(ISOCountry)')).to.equal('?geo=unknown,country=unknown'));\n    });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should sync replace AMP_GEO(ISOCountry) and AMP_GEO with unknown when geo is unknown","suites":["UrlReplacements","PAGE_LOAD_TIME"],"updatePoint":{"line":765,"column":92,"index":33412},"line":765,"code":"    it('should sync replace AMP_GEO(ISOCountry) and AMP_GEO with unknown when geo is unknown', () => {\n      getReplacements().then(replacements => expect(replacements.expandUrlSync('?geo=AMP_GEO,country=AMP_GEO(ISOCountry)')).to.equal('?geo=unknown,country=unknown'));\n    });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should accept $expressions","suites":["UrlReplacements","PAGE_LOAD_TIME"],"updatePoint":{"line":768,"column":34,"index":33632},"line":768,"code":"    it('should accept $expressions', () => {\n      return expandUrlAsync('?href=$CANONICAL_URL').then(res => {\n        expect(res).to.equal('?href=https%3A%2F%2Fpinterest.com%3A8080%2Fpin1');\n      });\n    });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should ignore unknown substitutions","suites":["UrlReplacements","PAGE_LOAD_TIME"],"updatePoint":{"line":773,"column":43,"index":33851},"line":773,"code":"    it('should ignore unknown substitutions', () => {\n      return expandUrlAsync('?a=UNKNOWN').then(res => {\n        expect(res).to.equal('?a=UNKNOWN');\n      });\n    });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should replace several substitutions","suites":["UrlReplacements","PAGE_LOAD_TIME"],"updatePoint":{"line":778,"column":44,"index":34024},"line":778,"code":"    it('should replace several substitutions', () => {\n      return expandUrlAsync('?a=UNKNOWN&href=CANONICAL_URL&title=TITLE').then(res => {\n        expect(res).to.equal('?a=UNKNOWN' + '&href=https%3A%2F%2Fpinterest.com%3A8080%2Fpin1' + '&title=Pixel%20Test');\n      });\n    });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should replace new substitutions","suites":["UrlReplacements","PAGE_LOAD_TIME"],"updatePoint":{"line":783,"column":40,"index":34300},"line":783,"code":"    it('should replace new substitutions', () => {\n      return getReplacements().then(replacements => {\n        replacements.getVariableSource().set('ONE', () => 'a');\n        expect(replacements.expandUrlAsync('?a=ONE')).to.eventually.equal('?a=a');\n        replacements.getVariableSource().set('ONE', () => 'b');\n        replacements.getVariableSource().set('TWO', () => 'b');\n        return expect(replacements.expandUrlAsync('?a=ONE&b=TWO')).to.eventually.equal('?a=b&b=b');\n      });\n    });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should report errors & replace them with empty string (sync)","suites":["UrlReplacements","PAGE_LOAD_TIME"],"line":792,"code":"    it.skip('should report errors & replace them with empty string (sync)', () => {","file":"unit/test-url-replacements.js","skipped":true,"dir":"test"},{"name":"should report errors & replace them with empty string (promise)","suites":["UrlReplacements","PAGE_LOAD_TIME"],"line":809,"code":"    it.skip('should report errors & replace them with empty string (promise)', () => {","file":"unit/test-url-replacements.js","skipped":true,"dir":"test"},{"name":"should support positional arguments","suites":["UrlReplacements","PAGE_LOAD_TIME"],"updatePoint":{"line":826,"column":43,"index":36050},"line":826,"code":"    it('should support positional arguments', () => {\n      return getReplacements().then(replacements => {\n        replacements.getVariableSource().set('FN', one => one);\n        return expect(replacements.expandUrlAsync('?a=FN(xyz1)')).to.eventually.equal('?a=xyz1');\n      });\n    });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should support multiple positional arguments","suites":["UrlReplacements","PAGE_LOAD_TIME"],"updatePoint":{"line":832,"column":52,"index":36347},"line":832,"code":"    it('should support multiple positional arguments', () => {\n      return getReplacements().then(replacements => {\n        replacements.getVariableSource().set('FN', (one, two) => {\n          return one + '-' + two;\n        });\n        return expect(replacements.expandUrlAsync('?a=FN(xyz,abc)')).to.eventually.equal('?a=xyz-abc');\n      });\n    });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should support multiple positional arguments with dots","suites":["UrlReplacements","PAGE_LOAD_TIME"],"updatePoint":{"line":840,"column":62,"index":36709},"line":840,"code":"    it('should support multiple positional arguments with dots', () => {\n      return getReplacements().then(replacements => {\n        replacements.getVariableSource().set('FN', (one, two) => {\n          return one + '-' + two;\n        });\n        return expect(replacements.expandUrlAsync('?a=FN(xy.z,ab.c)')).to.eventually.equal('?a=xy.z-ab.c');\n      });\n    });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should support promises as replacements","suites":["UrlReplacements","PAGE_LOAD_TIME"],"updatePoint":{"line":848,"column":47,"index":37060},"line":848,"code":"    it('should support promises as replacements', () => {\n      return getReplacements().then(replacements => {\n        replacements.getVariableSource().set('P1', () => Promise.resolve('abc '));\n        replacements.getVariableSource().set('P2', () => Promise.resolve('xyz'));\n        replacements.getVariableSource().set('P3', () => Promise.resolve('123'));\n        replacements.getVariableSource().set('OTHER', () => 'foo');\n        return expect(replacements.expandUrlAsync('?a=P1&b=P2&c=P3&d=OTHER')).to.eventually.equal('?a=abc%20&b=xyz&c=123&d=foo');\n      });\n    });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should override an existing binding","suites":["UrlReplacements","PAGE_LOAD_TIME"],"updatePoint":{"line":857,"column":43,"index":37631},"line":857,"code":"    it('should override an existing binding', () => {\n      return expandUrlAsync('ord=RANDOM?', {\n        'RANDOM': 'abc'\n      }).then(res => {\n        expect(res).to.match(/ord=abc\\?$/);\n      });\n    });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should add an additional binding","suites":["UrlReplacements","PAGE_LOAD_TIME"],"updatePoint":{"line":864,"column":40,"index":37836},"line":864,"code":"    it('should add an additional binding', () => {\n      return expandUrlAsync('rid=NONSTANDARD?', {\n        'NONSTANDARD': 'abc'\n      }).then(res => {\n        expect(res).to.match(/rid=abc\\?$/);\n      });\n    });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should NOT overwrite the cached expression with new bindings","suites":["UrlReplacements","PAGE_LOAD_TIME"],"updatePoint":{"line":871,"column":68,"index":38079},"line":871,"code":"    it('should NOT overwrite the cached expression with new bindings', () => {\n      return expandUrlAsync('rid=NONSTANDARD?', {\n        'NONSTANDARD': 'abc'\n      }).then(res => {\n        expect(res).to.match(/rid=abc\\?$/);\n        return expandUrlAsync('rid=NONSTANDARD?').then(res => {\n          expect(res).to.match(/rid=NONSTANDARD\\?$/);\n        });\n      });\n    });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should expand bindings as functions","suites":["UrlReplacements","PAGE_LOAD_TIME"],"updatePoint":{"line":881,"column":43,"index":38427},"line":881,"code":"    it('should expand bindings as functions', () => {\n      return expandUrlAsync('rid=FUNC(abc)?', {\n        'FUNC': value => 'func_' + value\n      }).then(res => {\n        expect(res).to.match(/rid=func_abc\\?$/);\n      });\n    });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should expand bindings as functions with promise","suites":["UrlReplacements","PAGE_LOAD_TIME"],"updatePoint":{"line":888,"column":56,"index":38673},"line":888,"code":"    it('should expand bindings as functions with promise', () => {\n      return expandUrlAsync('rid=FUNC(abc)?', {\n        'FUNC': value => Promise.resolve('func_' + value)\n      }).then(res => {\n        expect(res).to.match(/rid=func_abc\\?$/);\n      });\n    });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should expand null as empty string","suites":["UrlReplacements","PAGE_LOAD_TIME"],"updatePoint":{"line":895,"column":42,"index":38922},"line":895,"code":"    it('should expand null as empty string', () => {\n      return expandUrlAsync('v=VALUE', {\n        'VALUE': null\n      }).then(res => {\n        expect(res).to.equal('v=');\n      });\n    });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should expand undefined as empty string","suites":["UrlReplacements","PAGE_LOAD_TIME"],"updatePoint":{"line":902,"column":47,"index":39120},"line":902,"code":"    it('should expand undefined as empty string', () => {\n      return expandUrlAsync('v=VALUE', {\n        'VALUE': undefined\n      }).then(res => {\n        expect(res).to.equal('v=');\n      });\n    });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should expand empty string as empty string","suites":["UrlReplacements","PAGE_LOAD_TIME"],"updatePoint":{"line":909,"column":50,"index":39326},"line":909,"code":"    it('should expand empty string as empty string', () => {\n      return expandUrlAsync('v=VALUE', {\n        'VALUE': ''\n      }).then(res => {\n        expect(res).to.equal('v=');\n      });\n    });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should expand zero as zero","suites":["UrlReplacements","PAGE_LOAD_TIME"],"updatePoint":{"line":916,"column":34,"index":39509},"line":916,"code":"    it('should expand zero as zero', () => {\n      return expandUrlAsync('v=VALUE', {\n        'VALUE': 0\n      }).then(res => {\n        expect(res).to.equal('v=0');\n      });\n    });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should expand false as false","suites":["UrlReplacements","PAGE_LOAD_TIME"],"updatePoint":{"line":923,"column":36,"index":39694},"line":923,"code":"    it('should expand false as false', () => {\n      return expandUrlAsync('v=VALUE', {\n        'VALUE': false\n      }).then(res => {\n        expect(res).to.equal('v=false');\n      });\n    });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should resolve sub-included bindings","suites":["UrlReplacements","PAGE_LOAD_TIME"],"updatePoint":{"line":930,"column":44,"index":39895},"line":930,"code":"    it('should resolve sub-included bindings', () => {\n      // RANDOM is a standard property and we add RANDOM_OTHER.\n      return expandUrlAsync('r=RANDOM&ro=RANDOM_OTHER?', {\n        'RANDOM_OTHER': 'ABC'\n      }).then(res => {\n        expect(res).to.match(/r=(\\d+(\\.\\d+)?)&ro=ABC\\?$/);\n      });\n    });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should expand multiple vars","suites":["UrlReplacements","PAGE_LOAD_TIME"],"updatePoint":{"line":938,"column":35,"index":40194},"line":938,"code":"    it('should expand multiple vars', () => {\n      return expandUrlAsync('a=VALUEA&b=VALUEB?', {\n        'VALUEA': 'aaa',\n        'VALUEB': 'bbb'\n      }).then(res => {\n        expect(res).to.match(/a=aaa&b=bbb\\?$/);\n      });\n    });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should replace QUERY_PARAM with foo","suites":["UrlReplacements","QUERY_PARAM"],"updatePoint":{"line":947,"column":45,"index":40476},"line":947,"code":"      it('should replace QUERY_PARAM with foo', () => {\n        const win = getFakeWindow();\n        win.location = parseUrlDeprecated('https://example.com?query_string_param1=wrong');\n        env.sandbox.stub(trackPromise, 'getTrackImpressionPromise').callsFake(() => {\n          return new Promise(resolve => {\n            win.location = parseUrlDeprecated('https://example.com?query_string_param1=foo');\n            resolve();\n          });\n        });\n        return Services.urlReplacementsForDoc(win.document.documentElement).expandUrlAsync('?sh=QUERY_PARAM(query_string_param1)&s').then(res => {\n          expect(res).to.match(/sh=foo&s/);\n        });\n      });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should replace QUERY_PARAM with \"\"","suites":["UrlReplacements","QUERY_PARAM"],"updatePoint":{"line":960,"column":44,"index":41144},"line":960,"code":"      it('should replace QUERY_PARAM with \"\"', () => {\n        const win = getFakeWindow();\n        win.location = parseUrlDeprecated('https://example.com');\n        env.sandbox.stub(trackPromise, 'getTrackImpressionPromise').callsFake(() => {\n          return Promise.resolve();\n        });\n        return Services.urlReplacementsForDoc(win.document.documentElement).expandUrlAsync('?sh=QUERY_PARAM(query_string_param1)&s').then(res => {\n          expect(res).to.match(/sh=&s/);\n        });\n      });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should replace QUERY_PARAM with default_value","suites":["UrlReplacements","QUERY_PARAM"],"updatePoint":{"line":970,"column":55,"index":41657},"line":970,"code":"      it('should replace QUERY_PARAM with default_value', () => {\n        const win = getFakeWindow();\n        win.location = parseUrlDeprecated('https://example.com');\n        env.sandbox.stub(trackPromise, 'getTrackImpressionPromise').callsFake(() => {\n          return Promise.resolve();\n        });\n        return Services.urlReplacementsForDoc(win.document.documentElement).expandUrlAsync('?sh=QUERY_PARAM(query_string_param1,default_value)&s').then(res => {\n          expect(res).to.match(/sh=default_value&s/);\n        });\n      });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should replace QUERY_PARAM with extra param","suites":["UrlReplacements","QUERY_PARAM"],"updatePoint":{"line":980,"column":53,"index":42195},"line":980,"code":"      it('should replace QUERY_PARAM with extra param', () => {\n        const win = getFakeWindow();\n        win.location = parseUrlDeprecated('https://cdn.ampproject.org/a/o.com/foo/?x=wrong');\n        env.sandbox.stub(trackPromise, 'getTrackImpressionPromise').callsFake(() => {\n          return new Promise(resolve => {\n            win.location = parseUrlDeprecated('https://cdn.ampproject.org/a/o.com/foo/?amp_r=x%3Dfoo');\n            resolve();\n          });\n        });\n        return Services.urlReplacementsForDoc(win.document.documentElement).expandUrlAsync('?sh=QUERY_PARAM(x)&s').then(res => {\n          expect(res).to.match(/sh=foo&s/);\n        });\n      });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should replace QUERY_PARAM, preferring original over extra","suites":["UrlReplacements","QUERY_PARAM"],"updatePoint":{"line":993,"column":68,"index":42881},"line":993,"code":"      it('should replace QUERY_PARAM, preferring original over extra', () => {\n        const win = getFakeWindow();\n        win.location = parseUrlDeprecated('https://cdn.ampproject.org/a/o.com/foo/?x=wrong');\n        env.sandbox.stub(trackPromise, 'getTrackImpressionPromise').callsFake(() => {\n          return new Promise(resolve => {\n            win.location = parseUrlDeprecated('https://cdn.ampproject.org/a/o.com/foo/?x=foo&amp_r=x%3Devil');\n            resolve();\n          });\n        });\n        return Services.urlReplacementsForDoc(win.document.documentElement).expandUrlAsync('?sh=QUERY_PARAM(x)&s').then(res => {\n          expect(res).to.match(/sh=foo&s/);\n        });\n      });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should collect vars","suites":["UrlReplacements","QUERY_PARAM"],"updatePoint":{"line":1007,"column":27,"index":43541},"line":1007,"code":"    it('should collect vars', () => {\n      const win = getFakeWindow();\n      win.location = parseUrlDeprecated('https://example.com?p1=foo');\n      env.sandbox.stub(trackPromise, 'getTrackImpressionPromise').callsFake(() => {\n        return Promise.resolve();\n      });\n      return Services.urlReplacementsForDoc(win.document.documentElement).collectVars('?SOURCE_HOST&QUERY_PARAM(p1)&SIMPLE&FUNC&PROMISE', {\n        'SIMPLE': 21,\n        'FUNC': () => 22,\n        'PROMISE': () => Promise.resolve(23)\n      }).then(res => {\n        expect(res).to.deep.equal({\n          'SOURCE_HOST': 'example.com',\n          'QUERY_PARAM(p1)': 'foo',\n          'SIMPLE': 21,\n          'FUNC': 22,\n          'PROMISE': 23\n        });\n      });\n    });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should collect unallowlisted vars","suites":["UrlReplacements","QUERY_PARAM"],"updatePoint":{"line":1027,"column":41,"index":44295},"line":1027,"code":"    it('should collect unallowlisted vars', () => {\n      const win = getFakeWindow();\n      win.location = parseUrlDeprecated('https://example.com/base?foo=bar&bar=abc&gclid=123');\n      const element = document.createElement('amp-foo');\n      element.setAttribute('src', '?SOURCE_HOST&QUERY_PARAM(p1)&COUNTER');\n      element.setAttribute('data-amp-replace', 'QUERY_PARAM');\n      const {\n        documentElement\n      } = win.document;\n      const urlReplacements = Services.urlReplacementsForDoc(documentElement);\n      const unallowlisted = urlReplacements.collectDisallowedVarsSync(element);\n      expect(unallowlisted).to.deep.equal(['SOURCE_HOST', 'COUNTER']);\n    });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should reject javascript protocol","suites":["UrlReplacements","QUERY_PARAM"],"updatePoint":{"line":1040,"column":41,"index":44972},"line":1040,"code":"    it('should reject javascript protocol', () => {\n      const protocolErrorRegex = /invalid protocol/;\n      expectAsyncConsoleError(protocolErrorRegex);\n      const win = getFakeWindow();\n      const {\n        documentElement\n      } = win.document;\n      const urlReplacements = Services.urlReplacementsForDoc(documentElement);\n      /*eslint no-script-url: 0*/\n      return urlReplacements.expandUrlAsync('javascript://example.com/?r=RANDOM').then(() => {\n        throw new Error('never here');\n      }, err => {\n        expect(err.message).to.match(protocolErrorRegex);\n      });\n    });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should expand w/ collect vars (skip async macro)","suites":["UrlReplacements","sync expansion"],"updatePoint":{"line":1056,"column":58,"index":45622},"line":1056,"code":"      it('should expand w/ collect vars (skip async macro)', () => {\n        const win = getFakeWindow();\n        const {\n          documentElement\n        } = win.document;\n        const urlReplacements = Services.urlReplacementsForDoc(documentElement);\n        urlReplacements.ampdoc.win.performance.timing.loadEventStart = 109;\n        const expanded = urlReplacements.expandUrlSync('r=RANDOM&c=CONST&f=FUNCT(hello,world)&a=b&d=PROM&e=PAGE_LOAD_TIME', {\n          'CONST': 'ABC',\n          'FUNCT': function (a, b) {\n            return a + b;\n          },\n          // Will ignore promise based result and instead insert empty string.\n          'PROM': function () {\n            return Promise.resolve('boo');\n          }\n        });\n        expect(expanded).to.match(/^r=\\d(\\.\\d+)?&c=ABC&f=helloworld&a=b&d=&e=9$/);\n      });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should reject protocol changes","suites":["UrlReplacements","sync expansion"],"updatePoint":{"line":1075,"column":40,"index":46434},"line":1075,"code":"      it('should reject protocol changes', () => {\n        const win = getFakeWindow();\n        const {\n          documentElement\n        } = win.document;\n        const urlReplacements = Services.urlReplacementsForDoc(documentElement);\n        let expanded = urlReplacements.expandUrlSync('PROTOCOL://example.com/?r=RANDOM', {\n          'PROTOCOL': 'abc'\n        });\n        expect(expanded).to.equal('PROTOCOL://example.com/?r=RANDOM');\n        expanded = urlReplacements.expandUrlSync('FUNCT://example.com/?r=RANDOM', {\n          'FUNCT': function () {\n            return 'abc';\n          }\n        });\n        expect(expanded).to.equal('FUNCT://example.com/?r=RANDOM');\n      });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should reject javascript protocol","suites":["UrlReplacements","sync expansion"],"updatePoint":{"line":1092,"column":43,"index":47121},"line":1092,"code":"      it('should reject javascript protocol', () => {\n        const win = getFakeWindow();\n        const {\n          documentElement\n        } = win.document;\n        const urlReplacements = Services.urlReplacementsForDoc(documentElement);\n        allowConsoleError(() => {\n          expect(() => {\n            /*eslint no-script-url: 0*/\n            urlReplacements.expandUrlSync('javascript://example.com/?r=RANDOM');\n          }).to.throw('invalid protocol');\n        });\n      });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should expand sync and respect allowlisted","suites":["UrlReplacements","sync expansion"],"updatePoint":{"line":1106,"column":50,"index":47621},"line":1106,"code":"    it('should expand sync and respect allowlisted', () => {\n      const win = getFakeWindow();\n      const {\n        documentElement\n      } = win.document;\n      const urlReplacements = Services.urlReplacementsForDoc(documentElement);\n      const expanded = urlReplacements.expandUrlSync('r=RANDOM&c=CONST&f=FUNCT(hello,world)&a=b&d=PROM&e=PAGE_LOAD_TIME', {\n        'CONST': 'ABC',\n        'FUNCT': () => {\n          throw Error('Should not be called');\n        }\n      }, {\n        'CONST': true\n      });\n      expect(expanded).to.equal('r=RANDOM&c=ABC&f=FUNCT(hello,world)&a=b&d=PROM&e=PAGE_LOAD_TIME');\n    });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should replace ACCESS_READER_ID","suites":["UrlReplacements","access values via amp-access"],"updatePoint":{"line":1156,"column":41,"index":49483},"line":1156,"code":"      it('should replace ACCESS_READER_ID', () => {\n        accessServiceMock.expects('getAccessReaderId').returns(Promise.resolve('reader1')).once();\n        return expandUrlAsync('?a=ACCESS_READER_ID').then(res => {\n          expect(res).to.match(/a=reader1/);\n          expect(userErrorStub).to.have.not.been.called;\n        });\n      });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should replace AUTHDATA","suites":["UrlReplacements","access values via amp-access"],"updatePoint":{"line":1163,"column":33,"index":49817},"line":1163,"code":"      it('should replace AUTHDATA', () => {\n        accessServiceMock.expects('getAuthdataField').withExactArgs('field1').returns(Promise.resolve('value1')).once();\n        return expandUrlAsync('?a=AUTHDATA(field1)').then(res => {\n          expect(res).to.match(/a=value1/);\n          expect(userErrorStub).to.have.not.been.called;\n        });\n      });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should report error if not available","suites":["UrlReplacements","access values via amp-access"],"updatePoint":{"line":1170,"column":46,"index":50185},"line":1170,"code":"      it('should report error if not available', () => {\n        accessServiceMock.expects('getAccessReaderId').never();\n        return expandUrlAsync('?a=ACCESS_READER_ID;', /* disabled */true).then(res => {\n          expect(res).to.match(/a=;/);\n          expect(userErrorStub).to.be.calledOnce;\n        });\n      });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should replace ACCESS_READER_ID","suites":["UrlReplacements","access values via amp-subscriptions"],"updatePoint":{"line":1212,"column":41,"index":51831},"line":1212,"code":"      it('should replace ACCESS_READER_ID', () => {\n        subscriptionsServiceMock.expects('getAccessReaderId').returns(Promise.resolve('reader1')).once();\n        return expandUrlAsync('?a=ACCESS_READER_ID').then(res => {\n          expect(res).to.match(/a=reader1/);\n          expect(userErrorStub).to.have.not.been.called;\n        });\n      });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should replace AUTHDATA","suites":["UrlReplacements","access values via amp-subscriptions"],"updatePoint":{"line":1219,"column":33,"index":52172},"line":1219,"code":"      it('should replace AUTHDATA', () => {\n        subscriptionsServiceMock.expects('getAuthdataField').withExactArgs('field1').returns(Promise.resolve('value1')).once();\n        return expandUrlAsync('?a=AUTHDATA(field1)').then(res => {\n          expect(res).to.match(/a=value1/);\n          expect(userErrorStub).to.have.not.been.called;\n        });\n      });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should report error if not available","suites":["UrlReplacements","access values via amp-subscriptions"],"updatePoint":{"line":1226,"column":46,"index":52547},"line":1226,"code":"      it('should report error if not available', () => {\n        subscriptionsServiceMock.expects('getAccessReaderId').never();\n        return expandUrlAsync('?a=ACCESS_READER_ID;', /* disabled */true).then(res => {\n          expect(res).to.match(/a=;/);\n          expect(userErrorStub).to.be.calledOnce;\n        });\n      });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should prefer amp-subscriptions if amp-access also available","suites":["UrlReplacements","access values via amp-subscriptions"],"updatePoint":{"line":1233,"column":70,"index":52898},"line":1233,"code":"      it('should prefer amp-subscriptions if amp-access also available', () => {\n        const accessService = {\n          getAccessReaderId: () => {},\n          getAuthdataField: () => {}\n        };\n        const accessServiceMock = env.sandbox.mock(accessService);\n        env.sandbox.stub(Services, 'accessServiceForDocOrNull').callsFake(() => {\n          return Promise.resolve(accessService);\n        });\n        accessServiceMock.expects('getAuthdataField').never();\n        subscriptionsServiceMock.expects('getAuthdataField').withExactArgs('field1').returns(Promise.resolve('value1')).once();\n        return expandUrlAsync('?a=AUTHDATA(field1)').then(res => {\n          expect(res).to.match(/a=value1/);\n          expect(userErrorStub).to.have.not.been.called;\n          accessServiceMock.verify();\n        });\n      });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should replace href","suites":["UrlReplacements","link expansion"],"updatePoint":{"line":1264,"column":29,"index":54135},"line":1264,"code":"      it('should replace href', () => {\n        a.href = 'https://example.com/link?out=QUERY_PARAM(foo)';\n        a.setAttribute('data-amp-replace', 'QUERY_PARAM');\n        urlReplacements.maybeExpandLink(a, null);\n        expect(a.href).to.equal('https://example.com/link?out=bar');\n      });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should append default outgoing decoration","suites":["UrlReplacements","link expansion"],"updatePoint":{"line":1270,"column":51,"index":54451},"line":1270,"code":"      it('should append default outgoing decoration', () => {\n        a.href = 'https://example.com/link?out=QUERY_PARAM(foo)';\n        a.setAttribute('data-amp-replace', 'QUERY_PARAM');\n        urlReplacements.maybeExpandLink(a, 'gclid=QUERY_PARAM(gclid)');\n        expect(a.href).to.equal('https://example.com/link?out=bar&gclid=123');\n      });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should replace href 2x","suites":["UrlReplacements","link expansion"],"updatePoint":{"line":1276,"column":32,"index":54780},"line":1276,"code":"      it('should replace href 2x', () => {\n        a.href = 'https://example.com/link?out=QUERY_PARAM(foo)';\n        a.setAttribute('data-amp-replace', 'QUERY_PARAM');\n        urlReplacements.maybeExpandLink(a, null);\n        expect(a.href).to.equal('https://example.com/link?out=bar');\n        urlReplacements.maybeExpandLink(a, null);\n        expect(a.href).to.equal('https://example.com/link?out=bar');\n      });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should replace href 2","suites":["UrlReplacements","link expansion"],"updatePoint":{"line":1284,"column":31,"index":55195},"line":1284,"code":"      it('should replace href 2', () => {\n        a.href = 'https://example.com/link?out=QUERY_PARAM(foo)&' + 'out2=QUERY_PARAM(bar)';\n        a.setAttribute('data-amp-replace', 'QUERY_PARAM');\n        urlReplacements.maybeExpandLink(a, null);\n        expect(a.href).to.equal('https://example.com/link?out=bar&out2=abc');\n      });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"has nothing to replace","suites":["UrlReplacements","link expansion"],"updatePoint":{"line":1290,"column":32,"index":55528},"line":1290,"code":"      it('has nothing to replace', () => {\n        a.href = 'https://example.com/link';\n        a.setAttribute('data-amp-replace', 'QUERY_PARAM');\n        urlReplacements.maybeExpandLink(a, null);\n        expect(a.href).to.equal('https://example.com/link');\n      });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should not replace without user allowance","suites":["UrlReplacements","link expansion"],"updatePoint":{"line":1296,"column":51,"index":55815},"line":1296,"code":"      it('should not replace without user allowance', () => {\n        a.href = 'https://example.com/link?out=QUERY_PARAM(foo)';\n        urlReplacements.maybeExpandLink(a, null);\n        expect(a.href).to.equal('https://example.com/link?out=QUERY_PARAM(foo)');\n      });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should not replace without user allowance 2","suites":["UrlReplacements","link expansion"],"updatePoint":{"line":1301,"column":53,"index":56087},"line":1301,"code":"      it('should not replace without user allowance 2', () => {\n        a.href = 'https://example.com/link?out=QUERY_PARAM(foo)';\n        a.setAttribute('data-amp-replace', 'ABC');\n        urlReplacements.maybeExpandLink(a, null);\n        expect(a.href).to.equal('https://example.com/link?out=QUERY_PARAM(foo)');\n      });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should replace default append params regardless of allowlist","suites":["UrlReplacements","link expansion"],"updatePoint":{"line":1307,"column":70,"index":56427},"line":1307,"code":"      it('should replace default append params regardless of allowlist', () => {\n        a.href = 'https://example.com/link?out=QUERY_PARAM(foo)';\n        urlReplacements.maybeExpandLink(a, 'gclid=QUERY_PARAM(gclid)');\n        expect(a.href).to.equal('https://example.com/link?out=QUERY_PARAM(foo)&gclid=123');\n      });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should not replace unallowlisted fields","suites":["UrlReplacements","link expansion"],"updatePoint":{"line":1312,"column":49,"index":56727},"line":1312,"code":"      it('should not replace unallowlisted fields', () => {\n        a.href = 'https://example.com/link?out=RANDOM';\n        a.setAttribute('data-amp-replace', 'RANDOM');\n        urlReplacements.maybeExpandLink(a, null);\n        expect(a.href).to.equal('https://example.com/link?out=RANDOM');\n      });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should replace for http (non-secure) allowlisted origin","suites":["UrlReplacements","link expansion"],"updatePoint":{"line":1318,"column":65,"index":57045},"line":1318,"code":"      it('should replace for http (non-secure) allowlisted origin', () => {\n        canonical = 'http://example.com/link';\n        a.href = 'http://example.com/link?out=QUERY_PARAM(foo)';\n        a.setAttribute('data-amp-replace', 'QUERY_PARAM');\n        urlReplacements.maybeExpandLink(a, null);\n        expect(a.href).to.equal('http://example.com/link?out=bar');\n      });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should replace with canonical origin","suites":["UrlReplacements","link expansion"],"updatePoint":{"line":1325,"column":46,"index":57401},"line":1325,"code":"      it('should replace with canonical origin', () => {\n        a.href = 'https://canonical.com/link?out=QUERY_PARAM(foo)';\n        a.setAttribute('data-amp-replace', 'QUERY_PARAM');\n        urlReplacements.maybeExpandLink(a, null);\n        expect(a.href).to.equal('https://canonical.com/link?out=bar');\n      });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should replace with allowlisted origin","suites":["UrlReplacements","link expansion"],"updatePoint":{"line":1331,"column":48,"index":57718},"line":1331,"code":"      it('should replace with allowlisted origin', () => {\n        a.href = 'https://allowlisted.com/link?out=QUERY_PARAM(foo)';\n        a.setAttribute('data-amp-replace', 'QUERY_PARAM');\n        urlReplacements.maybeExpandLink(a, null);\n        expect(a.href).to.equal('https://allowlisted.com/link?out=bar');\n      });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should not replace to different origin","suites":["UrlReplacements","link expansion"],"updatePoint":{"line":1337,"column":48,"index":58039},"line":1337,"code":"      it('should not replace to different origin', () => {\n        a.href = 'https://example2.com/link?out=QUERY_PARAM(foo)';\n        a.setAttribute('data-amp-replace', 'QUERY_PARAM');\n        urlReplacements.maybeExpandLink(a, null);\n        expect(a.href).to.equal('https://example2.com/link?out=QUERY_PARAM(foo)');\n      });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should not append default param to different origin","suites":["UrlReplacements","link expansion"],"updatePoint":{"line":1343,"column":61,"index":58380},"line":1343,"code":"      it('should not append default param to different origin', () => {\n        a.href = 'https://example2.com/link?out=QUERY_PARAM(foo)';\n        a.setAttribute('data-amp-replace', 'QUERY_PARAM');\n        urlReplacements.maybeExpandLink(a, 'gclid=QUERY_PARAM(gclid)');\n        expect(a.href).to.equal('https://example2.com/link?out=QUERY_PARAM(foo)');\n      });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should replace allowlisted fields","suites":["UrlReplacements","link expansion"],"updatePoint":{"line":1349,"column":43,"index":58725},"line":1349,"code":"      it('should replace allowlisted fields', () => {\n        a.href = 'https://canonical.com/link?' + 'out=QUERY_PARAM(foo)' + '&c=PAGE_VIEW_IDCLIENT_ID(abc)NAV_TIMING(navigationStart)';\n        a.setAttribute('data-amp-replace', 'QUERY_PARAM CLIENT_ID PAGE_VIEW_ID NAV_TIMING');\n        // No replacement without previous async replacement\n        urlReplacements.maybeExpandLink(a, null);\n        expect(a.href).to.equal('https://canonical.com/link?out=bar&c=1234100');\n        // Get a cid, then proceed.\n        return urlReplacements.expandUrlAsync('CLIENT_ID(abc)').then(() => {\n          urlReplacements.maybeExpandLink(a, null);\n          expect(a.href).to.equal('https://canonical.com/link?out=bar&c=1234test-cid(abc)100');\n        });\n      });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should add URL parameters for different origin","suites":["UrlReplacements","link expansion"],"updatePoint":{"line":1361,"column":56,"index":59494},"line":1361,"code":"      it('should add URL parameters for different origin', () => {\n        a.href = 'https://example2.com/link';\n        a.setAttribute('data-amp-addparams', 'guid=123');\n        urlReplacements.maybeExpandLink(a, null);\n        expect(a.href).to.equal('https://example2.com/link?guid=123');\n      });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should add URL parameters for http URL's(non-secure)","suites":["UrlReplacements","link expansion"],"updatePoint":{"line":1367,"column":62,"index":59802},"line":1367,"code":"      it(\"should add URL parameters for http URL's(non-secure)\", () => {\n        a.href = 'http://allowlisted.com/link?out=QUERY_PARAM(foo)';\n        a.setAttribute('data-amp-addparams', 'guid=123');\n        urlReplacements.maybeExpandLink(a, null);\n        expect(a.href).to.equal('http://allowlisted.com/link?out=QUERY_PARAM(foo)&guid=123');\n      });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should concatenate and expand additional params w/ allowlist","suites":["UrlReplacements","link expansion"],"updatePoint":{"line":1373,"column":70,"index":60164},"line":1373,"code":"      it('should concatenate and expand additional params w/ allowlist', () => {\n        a.href = 'http://example.com/link?first=QUERY_PARAM(src,YYYY)';\n        a.setAttribute('data-amp-replace', 'QUERY_PARAM');\n        a.setAttribute('data-amp-addparams', 'second=QUERY_PARAM(baz,XXXX)&third=CLIENT_ID(AMP_ECID_GOOGLE,,_ga)&' + 'fourth=link123');\n        urlReplacements.maybeExpandLink(a, null);\n        expect(a.href).to.equal('http://example.com/link?first=YYYY&second=XXXX&' + 'third=CLIENT_ID(AMP_ECID_GOOGLE%2C%2C_ga)&fourth=link123');\n      });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should append query parameters and repalce allowlisted values","suites":["UrlReplacements","link expansion"],"updatePoint":{"line":1400,"column":71,"index":61955},"line":1400,"code":"      it('should append query parameters and repalce allowlisted values', () => {\n        a.href = 'https://allowlisted.com/link?out=QUERY_PARAM(foo)';\n        a.setAttribute('data-amp-replace', 'QUERY_PARAM CLIENT_ID');\n        a.setAttribute('data-amp-addparams', 'guid=123&c=CLIENT_ID(abc)');\n        // Get a cid, then proceed.\n        return urlReplacements.expandUrlAsync('CLIENT_ID(abc)').then(() => {\n          urlReplacements.maybeExpandLink(a, null);\n          expect(a.href).to.equal('https://allowlisted.com/link?out=bar&guid=123&c=test-cid(abc)');\n        });\n      });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should not reject protocol changes with expandStringSync","suites":["UrlReplacements","Expanding String"],"updatePoint":{"line":1412,"column":66,"index":62582},"line":1412,"code":"      it('should not reject protocol changes with expandStringSync', () => {\n        const win = getFakeWindow();\n        const {\n          documentElement\n        } = win.document;\n        const urlReplacements = Services.urlReplacementsForDoc(documentElement);\n        let expanded = urlReplacements.expandStringSync('PROTOCOL://example.com/?r=RANDOM', {\n          'PROTOCOL': 'abc'\n        });\n        expect(expanded).to.match(/abc:\\/\\/example\\.com\\/\\?r=(\\d+(\\.\\d+)?)$/);\n        expanded = urlReplacements.expandStringSync('FUNCT://example.com/?r=RANDOM', {\n          'FUNCT': function () {\n            return 'abc';\n          }\n        });\n        expect(expanded).to.match(/abc:\\/\\/example\\.com\\/\\?r=(\\d+(\\.\\d+)?)$/);\n      });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should not encode values returned by expandStringSync","suites":["UrlReplacements","Expanding String"],"updatePoint":{"line":1429,"column":63,"index":63314},"line":1429,"code":"      it('should not encode values returned by expandStringSync', () => {\n        const win = getFakeWindow();\n        const {\n          documentElement\n        } = win.document;\n        const urlReplacements = Services.urlReplacementsForDoc(documentElement);\n        const expanded = urlReplacements.expandStringSync('title=TITLE', {\n          'TITLE': 'test with spaces'\n        });\n        expect(expanded).to.equal('title=test with spaces');\n      });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should not check protocol changes with expandStringAsync","suites":["UrlReplacements","Expanding String"],"updatePoint":{"line":1440,"column":66,"index":63773},"line":1440,"code":"      it('should not check protocol changes with expandStringAsync', () => {\n        const win = getFakeWindow();\n        const {\n          documentElement\n        } = win.document;\n        const urlReplacements = Services.urlReplacementsForDoc(documentElement);\n        return urlReplacements.expandStringAsync('RANDOM:X:Y', {\n          'RANDOM': Promise.resolve('abc')\n        }).then(expanded => {\n          expect(expanded).to.equal('abc:X:Y');\n        });\n      });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should not encode values returned by expandStringAsync","suites":["UrlReplacements","Expanding String"],"updatePoint":{"line":1452,"column":64,"index":64242},"line":1452,"code":"      it('should not encode values returned by expandStringAsync', () => {\n        const win = getFakeWindow();\n        const {\n          documentElement\n        } = win.document;\n        const urlReplacements = Services.urlReplacementsForDoc(documentElement);\n        return urlReplacements.expandStringAsync('title=TITLE', {\n          'TITLE': Promise.resolve('test with spaces')\n        }).then(expanded => {\n          expect(expanded).to.equal('title=test with spaces');\n        });\n      });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should fail for non-inputs","suites":["UrlReplacements","Expanding Input Value"],"updatePoint":{"line":1466,"column":36,"index":64765},"line":1466,"code":"      it('should fail for non-inputs', () => {\n        const win = getFakeWindow();\n        const {\n          documentElement\n        } = win.document;\n        const urlReplacements = Services.urlReplacementsForDoc(documentElement);\n        const input = document.createElement('textarea');\n        input.value = 'RANDOM';\n        input.setAttribute('data-amp-replace', 'RANDOM');\n        allowConsoleError(() => {\n          expect(() => urlReplacements.expandInputValueSync(input)).to.throw(/Input value expansion only works on hidden input fields/);\n        });\n        expect(input.value).to.equal('RANDOM');\n      });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should fail for non-hidden inputs","suites":["UrlReplacements","Expanding Input Value"],"updatePoint":{"line":1480,"column":43,"index":65394},"line":1480,"code":"      it('should fail for non-hidden inputs', () => {\n        const win = getFakeWindow();\n        const {\n          documentElement\n        } = win.document;\n        const urlReplacements = Services.urlReplacementsForDoc(documentElement);\n        const input = document.createElement('input');\n        input.value = 'RANDOM';\n        input.setAttribute('data-amp-replace', 'RANDOM');\n        allowConsoleError(() => {\n          expect(() => urlReplacements.expandInputValueSync(input)).to.throw(/Input value expansion only works on hidden input fields/);\n        });\n        expect(input.value).to.equal('RANDOM');\n      });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should not replace not allowlisted vars","suites":["UrlReplacements","Expanding Input Value"],"updatePoint":{"line":1494,"column":49,"index":66026},"line":1494,"code":"      it('should not replace not allowlisted vars', () => {\n        const win = getFakeWindow();\n        const {\n          documentElement\n        } = win.document;\n        const urlReplacements = Services.urlReplacementsForDoc(documentElement);\n        const input = document.createElement('input');\n        input.value = 'RANDOM';\n        input.type = 'hidden';\n        input.setAttribute('data-amp-replace', 'CANONICAL_URL');\n        let expandedValue = urlReplacements.expandInputValueSync(input);\n        expect(expandedValue).to.equal('RANDOM');\n        input.setAttribute('data-amp-replace', 'CANONICAL_URL RANDOM');\n        expandedValue = urlReplacements.expandInputValueSync(input);\n        expect(expandedValue).to.match(/(\\d+(\\.\\d+)?)/);\n        expect(input.value).to.match(/(\\d+(\\.\\d+)?)/);\n        expect(input['amp-original-value']).to.equal('RANDOM');\n      });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should replace input value with var subs - sync","suites":["UrlReplacements","Expanding Input Value"],"updatePoint":{"line":1512,"column":57,"index":66913},"line":1512,"code":"      it('should replace input value with var subs - sync', () => {\n        const win = getFakeWindow();\n        const {\n          documentElement\n        } = win.document;\n        const urlReplacements = Services.urlReplacementsForDoc(documentElement);\n        const input = document.createElement('input');\n        input.value = 'RANDOM';\n        input.type = 'hidden';\n        input.setAttribute('data-amp-replace', 'RANDOM');\n        let expandedValue = urlReplacements.expandInputValueSync(input);\n        expect(expandedValue).to.match(/(\\d+(\\.\\d+)?)/);\n        input['amp-original-value'] = 'RANDOM://example.com/RANDOM';\n        expandedValue = urlReplacements.expandInputValueSync(input);\n        expect(expandedValue).to.match(/(\\d+(\\.\\d+)?):\\/\\/example\\.com\\/(\\d+(\\.\\d+)?)$/);\n        expect(input.value).to.match(/(\\d+(\\.\\d+)?):\\/\\/example\\.com\\/(\\d+(\\.\\d+)?)$/);\n        expect(input['amp-original-value']).to.equal('RANDOM://example.com/RANDOM');\n      });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should replace input value with var subs - sync","suites":["UrlReplacements","Expanding Input Value"],"updatePoint":{"line":1530,"column":57,"index":67884},"line":1530,"code":"      it('should replace input value with var subs - sync', () => {\n        const win = getFakeWindow();\n        const {\n          documentElement\n        } = win.document;\n        const urlReplacements = Services.urlReplacementsForDoc(documentElement);\n        const input = document.createElement('input');\n        input.value = 'RANDOM';\n        input.type = 'hidden';\n        input.setAttribute('data-amp-replace', 'RANDOM');\n        return urlReplacements.expandInputValueAsync(input).then(expandedValue => {\n          expect(input['amp-original-value']).to.equal('RANDOM');\n          expect(input.value).to.match(/(\\d+(\\.\\d+)?)/);\n          expect(expandedValue).to.match(/(\\d+(\\.\\d+)?)/);\n        });\n      });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should extract correct Client ID","suites":["UrlReplacements","extractClientIdFromGaCookie"],"updatePoint":{"line":1548,"column":42,"index":68647},"line":1548,"code":"      it('should extract correct Client ID', () => {\n        expect(extractClientIdFromGaCookie('GA1.2.430749005.1489527047')).to.equal('430749005.1489527047');\n        expect(extractClientIdFromGaCookie('GA1.12.430749005.1489527047')).to.equal('430749005.1489527047');\n        expect(extractClientIdFromGaCookie('GA1.1-2.430749005.1489527047')).to.equal('430749005.1489527047');\n        expect(extractClientIdFromGaCookie('1.1.430749005.1489527047')).to.equal('430749005.1489527047');\n        expect(extractClientIdFromGaCookie('GA1.3.amp-JTHCVn-4iMhzv5oEIZIspaXUSnEF0PwNVoxs' + 'NDrFP4BtPQJMyxE4jb9FDlp37OJL')).to.equal('amp-JTHCVn-4iMhzv5oEIZIspaXUSnEF0PwNVoxs' + 'NDrFP4BtPQJMyxE4jb9FDlp37OJL');\n        expect(extractClientIdFromGaCookie('1.3.amp-JTHCVn-4iMhzv5oEIZIspaXUSnEF0PwNVoxs' + 'NDrFP4BtPQJMyxE4jb9FDlp37OJL')).to.equal('amp-JTHCVn-4iMhzv5oEIZIspaXUSnEF0PwNVoxs' + 'NDrFP4BtPQJMyxE4jb9FDlp37OJL');\n        expect(extractClientIdFromGaCookie('amp-JTHCVn-4iMhzv5oEIZIspaXUSnEF0PwNVoxs' + 'NDrFP4BtPQJMyxE4jb9FDlp37OJL')).to.equal('amp-JTHCVn-4iMhzv5oEIZIspaXUSnEF0PwNVoxs' + 'NDrFP4BtPQJMyxE4jb9FDlp37OJL');\n      });","file":"unit/test-url-replacements.js","skipped":false,"dir":"test"},{"name":"should throw if __amp_source_origin is set","suites":[],"updatePoint":{"line":3,"column":48,"index":184},"line":3,"code":"  it('should throw if __amp_source_origin is set', () => {\n    allowConsoleError(() => {\n      expect(() => resolveUrlAttr('a', 'href', '/doc2?__amp_source_origin=https://google.com', 'http://acme.org/doc1')).to.throw(/Source origin is not allowed/);\n    });\n  });","file":"unit/test-url-rewrite.js","skipped":false,"dir":"test"},{"name":"should resolve non-hash href","suites":[],"updatePoint":{"line":8,"column":34,"index":435},"line":8,"code":"  it('should resolve non-hash href', () => {\n    expect(resolveUrlAttr('a', 'href', '/doc2', 'http://acme.org/doc1')).to.equal('http://acme.org/doc2');\n    expect(resolveUrlAttr('a', 'href', '/doc2', 'https://cdn.ampproject.org/c/acme.org/doc1')).to.equal('http://acme.org/doc2');\n    expect(resolveUrlAttr('a', 'href', 'http://non-acme.org/doc2', 'http://acme.org/doc1')).to.equal('http://non-acme.org/doc2');\n  });","file":"unit/test-url-rewrite.js","skipped":false,"dir":"test"},{"name":"should ignore hash URLs","suites":[],"updatePoint":{"line":13,"column":29,"index":847},"line":13,"code":"  it('should ignore hash URLs', () => {\n    expect(resolveUrlAttr('a', 'href', '#hash1', 'http://acme.org/doc1')).to.equal('#hash1');\n  });","file":"unit/test-url-rewrite.js","skipped":false,"dir":"test"},{"name":"should resolve src","suites":[],"updatePoint":{"line":16,"column":24,"index":982},"line":16,"code":"  it('should resolve src', () => {\n    expect(resolveUrlAttr('amp-video', 'src', '/video1', 'http://acme.org/doc1')).to.equal('http://acme.org/video1');\n    expect(resolveUrlAttr('amp-video', 'src', '/video1', 'https://cdn.ampproject.org/c/acme.org/doc1')).to.equal('http://acme.org/video1');\n    expect(resolveUrlAttr('amp-video', 'src', 'http://non-acme.org/video1', 'http://acme.org/doc1')).to.equal('http://non-acme.org/video1');\n  });","file":"unit/test-url-rewrite.js","skipped":false,"dir":"test"},{"name":"should rewrite image http(s) src","suites":[],"updatePoint":{"line":21,"column":38,"index":1436},"line":21,"code":"  it('should rewrite image http(s) src', () => {\n    expect(resolveUrlAttr('amp-img', 'src', '/image1?a=b#h1', 'https://cdn.ampproject.org/c/acme.org/doc1')).to.equal('https://cdn.ampproject.org/i/acme.org/image1?a=b#h1');\n    expect(resolveUrlAttr('amp-img', 'src', 'https://acme.org/image1?a=b#h1', 'https://cdn.ampproject.org/c/acme.org/doc1')).to.equal('https://cdn.ampproject.org/i/s/acme.org/image1?a=b#h1');\n  });","file":"unit/test-url-rewrite.js","skipped":false,"dir":"test"},{"name":"should rewrite image http(s) srcset","suites":[],"updatePoint":{"line":25,"column":41,"index":1860},"line":25,"code":"  it('should rewrite image http(s) srcset', () => {\n    expect(resolveUrlAttr('amp-img', 'srcset', '/image2?a=b#h1 2x, /image1?a=b#h1 1x', 'https://cdn.ampproject.org/c/acme.org/doc1')).to.equal('https://cdn.ampproject.org/i/acme.org/image1?a=b#h1 1x, ' + 'https://cdn.ampproject.org/i/acme.org/image2?a=b#h1 2x');\n    expect(resolveUrlAttr('amp-img', 'srcset', 'https://acme.org/image2?a=b#h1 2x, /image1?a=b#h1 1x', 'https://cdn.ampproject.org/c/acme.org/doc1')).to.equal('https://cdn.ampproject.org/i/acme.org/image1?a=b#h1 1x, ' + 'https://cdn.ampproject.org/i/s/acme.org/image2?a=b#h1 2x');\n  });","file":"unit/test-url-rewrite.js","skipped":false,"dir":"test"},{"name":"should NOT rewrite image http(s) src when not on proxy","suites":[],"updatePoint":{"line":29,"column":60,"index":2481},"line":29,"code":"  it('should NOT rewrite image http(s) src when not on proxy', () => {\n    expect(resolveUrlAttr('amp-img', 'src', '/image1', 'http://acme.org/doc1')).to.equal('http://acme.org/image1');\n  });","file":"unit/test-url-rewrite.js","skipped":false,"dir":"test"},{"name":"should NOT rewrite image data src","suites":[],"updatePoint":{"line":32,"column":39,"index":2653},"line":32,"code":"  it('should NOT rewrite image data src', () => {\n    expect(resolveUrlAttr('amp-img', 'src', 'data:12345', 'https://cdn.ampproject.org/c/acme.org/doc1')).to.equal('data:12345');\n  });","file":"unit/test-url-rewrite.js","skipped":false,"dir":"test"},{"name":"should not modify `target` on publisher origin","suites":[],"updatePoint":{"line":38,"column":52,"index":2955},"line":38,"code":"  it('should not modify `target` on publisher origin', () => {\n    const element = document.createElement('a');\n    element.setAttribute('href', '#hash');\n    rewriteAttributesForElement(element, 'href', 'https://not.hash/', location);\n    expect(element.getAttribute('href')).to.equal('https://not.hash/');\n    expect(element.hasAttribute('target')).to.equal(false);\n  });","file":"unit/test-url-rewrite.js","skipped":false,"dir":"test"},{"name":"should set `target` when rewrite <a> from hash to non-hash","suites":["on CDN origin"],"updatePoint":{"line":49,"column":66,"index":3457},"line":49,"code":"    it('should set `target` when rewrite <a> from hash to non-hash', () => {\n      const element = document.createElement('a');\n      element.setAttribute('href', '#hash');\n      rewriteAttributesForElement(element, 'href', 'https://not.hash/', location);\n      expect(element.getAttribute('href')).to.equal('https://not.hash/');\n      expect(element.getAttribute('target')).to.equal('_top');\n    });","file":"unit/test-url-rewrite.js","skipped":false,"dir":"test"},{"name":"should remove `target` when rewrite <a> from non-hash to hash","suites":["on CDN origin"],"updatePoint":{"line":56,"column":69,"index":3861},"line":56,"code":"    it('should remove `target` when rewrite <a> from non-hash to hash', () => {\n      const element = document.createElement('a');\n      element.setAttribute('href', 'https://not.hash/');\n      rewriteAttributesForElement(element, 'href', '#hash', location);\n      expect(element.getAttribute('href')).to.equal('#hash');\n      expect(element.hasAttribute('target')).to.equal(false);\n    });","file":"unit/test-url-rewrite.js","skipped":false,"dir":"test"},{"name":"should return origin if available","suites":[],"updatePoint":{"line":4,"column":39,"index":597},"line":4,"code":"  it('should return origin if available', () => {\n    expect(getWinOrigin({\n      'origin': 'https://foo.com',\n      'location': {\n        'href': 'https://foo1.com/abc?123#foo'\n      }\n    })).to.equal('https://foo.com');\n  });","file":"unit/test-url.js","skipped":false,"dir":"test"},{"name":"should return origin from href when win.origin is not available","suites":[],"updatePoint":{"line":12,"column":69,"index":856},"line":12,"code":"  it('should return origin from href when win.origin is not available', () => {\n    expect(getWinOrigin({\n      'location': {\n        'href': 'https://foo1.com/abc?123#foo'\n      }\n    })).to.equal('https://foo1.com');\n  });","file":"unit/test-url.js","skipped":false,"dir":"test"},{"name":"should return origin from href when win.origin is empty","suites":[],"updatePoint":{"line":19,"column":61,"index":1073},"line":19,"code":"  it('should return origin from href when win.origin is empty', () => {\n    expect(getWinOrigin({\n      'origin': '',\n      'location': {\n        'href': 'https://foo1.com/abc?123#foo'\n      }\n    })).to.equal('https://foo1.com');\n  });","file":"unit/test-url.js","skipped":false,"dir":"test"},{"name":"should return origin from href when win.origin is null","suites":[],"updatePoint":{"line":27,"column":60,"index":1309},"line":27,"code":"  it('should return origin from href when win.origin is null', () => {\n    expect(getWinOrigin({\n      'origin': null,\n      'location': {\n        'href': 'https://foo1.com/abc?123#foo'\n      }\n    })).to.equal('https://foo1.com');\n  });","file":"unit/test-url.js","skipped":false,"dir":"test"},{"name":"should return \"null\" when win.origin is \"null\"","suites":[],"updatePoint":{"line":35,"column":52,"index":1539},"line":35,"code":"  it('should return \"null\" when win.origin is \"null\"', () => {\n    expect(getWinOrigin({\n      'origin': 'null',\n      'location': {\n        'href': 'https://foo1.com/abc?123#foo'\n      }\n    })).to.equal('null');\n  });","file":"unit/test-url.js","skipped":false,"dir":"test"},{"name":"should parse correctly","suites":[],"updatePoint":{"line":53,"column":28,"index":2120},"line":53,"code":"  it('should parse correctly', () => {\n    compareParse('https://foo.com/abc?123#foo', {\n      href: 'https://foo.com/abc?123#foo',\n      protocol: 'https:',\n      host: 'foo.com',\n      hostname: 'foo.com',\n      port: '',\n      pathname: '/abc',\n      search: '?123',\n      hash: '#foo',\n      origin: 'https://foo.com'\n    });\n  });","file":"unit/test-url.js","skipped":false,"dir":"test"},{"name":"caches results","suites":[],"updatePoint":{"line":66,"column":20,"index":2448},"line":66,"code":"  it('caches results', () => {\n    const url = 'https://foo.com:123/abc?123#foo';\n    parseUrlDeprecated(url);\n    const a1 = parseUrlDeprecated(url);\n    const a2 = parseUrlDeprecated(url);\n    expect(a1).to.equal(a2);\n  });","file":"unit/test-url.js","skipped":false,"dir":"test"},{"name":"caches up to 100 results","suites":[],"updatePoint":{"line":73,"column":30,"index":2684},"line":73,"code":"  it('caches up to 100 results', () => {\n    const url = 'https://foo.com:123/abc?123#foo';\n    const a1 = parseUrlDeprecated(url);\n\n    // should grab url from the cache\n    expect(a1).to.equal(parseUrlDeprecated(url));\n\n    // cache 99 more urls in order to reach max capacity of LRU cache: 100\n    for (let i = 0; i < 100; i++) {\n      parseUrlDeprecated(`${url}-${i}`);\n    }\n    const a2 = parseUrlDeprecated(url);\n\n    // the old cached url should not be in the cache anymore\n    // the newer instance should\n    expect(a1).to.not.equal(parseUrlDeprecated(url));\n    expect(a2).to.equal(parseUrlDeprecated(url));\n    expect(a1).to.not.equal(a2);\n  });","file":"unit/test-url.js","skipped":false,"dir":"test"},{"name":"should handle ports","suites":[],"updatePoint":{"line":92,"column":25,"index":3337},"line":92,"code":"  it('should handle ports', () => {\n    compareParse('https://foo.com:123/abc?123#foo', {\n      href: 'https://foo.com:123/abc?123#foo',\n      protocol: 'https:',\n      host: 'foo.com:123',\n      hostname: 'foo.com',\n      port: '123',\n      pathname: '/abc',\n      search: '?123',\n      hash: '#foo',\n      origin: 'https://foo.com:123'\n    });\n  });","file":"unit/test-url.js","skipped":false,"dir":"test"},{"name":"should omit HTTP default port","suites":[],"updatePoint":{"line":105,"column":35,"index":3699},"line":105,"code":"  it('should omit HTTP default port', () => {\n    compareParse('http://foo.com:80/abc?123#foo', {\n      href: 'http://foo.com/abc?123#foo',\n      protocol: 'http:',\n      host: 'foo.com',\n      hostname: 'foo.com',\n      port: '',\n      pathname: '/abc',\n      search: '?123',\n      hash: '#foo',\n      origin: 'http://foo.com'\n    });\n  });","file":"unit/test-url.js","skipped":false,"dir":"test"},{"name":"should omit HTTPS default port","suites":[],"updatePoint":{"line":118,"column":36,"index":4042},"line":118,"code":"  it('should omit HTTPS default port', () => {\n    compareParse('https://foo.com:443/abc?123#foo', {\n      href: 'https://foo.com/abc?123#foo',\n      protocol: 'https:',\n      host: 'foo.com',\n      hostname: 'foo.com',\n      port: '',\n      pathname: '/abc',\n      search: '?123',\n      hash: '#foo',\n      origin: 'https://foo.com'\n    });\n  });","file":"unit/test-url.js","skipped":false,"dir":"test"},{"name":"should support http","suites":[],"updatePoint":{"line":131,"column":25,"index":4379},"line":131,"code":"  it('should support http', () => {\n    compareParse('http://foo.com:123/abc?123#foo', {\n      href: 'http://foo.com:123/abc?123#foo',\n      protocol: 'http:',\n      host: 'foo.com:123',\n      hostname: 'foo.com',\n      port: '123',\n      pathname: '/abc',\n      search: '?123',\n      hash: '#foo',\n      origin: 'http://foo.com:123'\n    });\n  });","file":"unit/test-url.js","skipped":false,"dir":"test"},{"name":"should resolve relative urls","suites":[],"updatePoint":{"line":144,"column":34,"index":4736},"line":144,"code":"  it('should resolve relative urls', () => {\n    compareParse('./abc?123#foo', {\n      href: 'http://localhost:' + currentPort + '/abc?123#foo',\n      protocol: 'http:',\n      host: 'localhost:' + currentPort,\n      hostname: 'localhost',\n      port: currentPort,\n      pathname: '/abc',\n      search: '?123',\n      hash: '#foo',\n      origin: 'http://localhost:' + currentPort\n    });\n  });","file":"unit/test-url.js","skipped":false,"dir":"test"},{"name":"should resolve path relative urls","suites":[],"updatePoint":{"line":157,"column":39,"index":5133},"line":157,"code":"  it('should resolve path relative urls', () => {\n    compareParse('/abc?123#foo', {\n      href: 'http://localhost:' + currentPort + '/abc?123#foo',\n      protocol: 'http:',\n      host: 'localhost:' + currentPort,\n      hostname: 'localhost',\n      port: currentPort,\n      pathname: '/abc',\n      search: '?123',\n      hash: '#foo',\n      origin: 'http://localhost:' + currentPort\n    });\n  });","file":"unit/test-url.js","skipped":false,"dir":"test"},{"name":"should handle URLs with just the domain","suites":[],"updatePoint":{"line":170,"column":45,"index":5535},"line":170,"code":"  it('should handle URLs with just the domain', () => {\n    compareParse('http://foo.com:123', {\n      href: 'http://foo.com:123/',\n      protocol: 'http:',\n      host: 'foo.com:123',\n      hostname: 'foo.com',\n      port: '123',\n      pathname: '/',\n      search: '',\n      hash: '',\n      origin: 'http://foo.com:123'\n    });\n  });","file":"unit/test-url.js","skipped":false,"dir":"test"},{"name":"should parse origin https://twitter.com/path#abc","suites":[],"updatePoint":{"line":183,"column":54,"index":5878},"line":183,"code":"  it('should parse origin https://twitter.com/path#abc', () => {\n    expect(parseUrlDeprecated('https://twitter.com/path#abc').origin).to.equal('https://twitter.com');\n  });","file":"unit/test-url.js","skipped":false,"dir":"test"},{"name":"should parse origin data:12345","suites":[],"updatePoint":{"line":186,"column":36,"index":6034},"line":186,"code":"  it('should parse origin data:12345', () => {\n    expect(parseUrlDeprecated('data:12345').origin).to.equal('data:12345');\n  });","file":"unit/test-url.js","skipped":false,"dir":"test"},{"name":"should parse relative","suites":[],"updatePoint":{"line":189,"column":27,"index":6154},"line":189,"code":"  it('should parse relative', () => {\n    expect(parseUrlDeprecated('chilaquiles/rojos')).to.include({\n      pathname: '/chilaquiles/rojos'\n    });\n  });","file":"unit/test-url.js","skipped":false,"dir":"test"},{"name":"should return empty string for empty params","suites":[],"updatePoint":{"line":196,"column":49,"index":6390},"line":196,"code":"  it('should return empty string for empty params', () => {\n    expect(serializeQueryString({})).to.equal('');\n    expect(serializeQueryString({\n      nullValue: null,\n      undefValue: undefined\n    })).to.equal('');\n  });","file":"unit/test-url.js","skipped":false,"dir":"test"},{"name":"should serialize a single value","suites":[],"updatePoint":{"line":203,"column":37,"index":6602},"line":203,"code":"  it('should serialize a single value', () => {\n    expect(serializeQueryString({\n      a: 'A'\n    })).to.equal('a=A');\n  });","file":"unit/test-url.js","skipped":false,"dir":"test"},{"name":"should serialize multiple values","suites":[],"updatePoint":{"line":208,"column":38,"index":6729},"line":208,"code":"  it('should serialize multiple values', () => {\n    expect(serializeQueryString({\n      a: 'A',\n      b: 'B'\n    })).to.equal('a=A&b=B');\n  });","file":"unit/test-url.js","skipped":false,"dir":"test"},{"name":"should coerce to string","suites":[],"updatePoint":{"line":214,"column":29,"index":6865},"line":214,"code":"  it('should coerce to string', () => {\n    expect(serializeQueryString({\n      a: 1,\n      b: true\n    })).to.equal('a=1&b=true');\n  });","file":"unit/test-url.js","skipped":false,"dir":"test"},{"name":"should encode values and keys","suites":[],"updatePoint":{"line":220,"column":35,"index":7009},"line":220,"code":"  it('should encode values and keys', () => {\n    expect(serializeQueryString({\n      'a+b': 'A+B'\n    })).to.equal('a%2Bb=A%2BB');\n  });","file":"unit/test-url.js","skipped":false,"dir":"test"},{"name":"should serialize multiple valued parameters","suites":[],"updatePoint":{"line":225,"column":49,"index":7161},"line":225,"code":"  it('should serialize multiple valued parameters', () => {\n    expect(serializeQueryString({\n      a: [1, 2, 3],\n      b: true\n    })).to.equal('a=1&a=2&a=3&b=true');\n  });","file":"unit/test-url.js","skipped":false,"dir":"test"},{"name":"should NOT allow null or undefined, but allow empty string","suites":[],"updatePoint":{"line":234,"column":64,"index":7474},"line":234,"code":"  it('should NOT allow null or undefined, but allow empty string', () => {\n    allowConsoleError(() => {\n      expect(() => {\n        assertHttpsUrl(null, referenceElement);\n      }).to.throw(/source must be available/);\n      expect(() => {\n        assertHttpsUrl(undefined, referenceElement);\n      }).to.throw(/source must be available/);\n    });\n    assertHttpsUrl('', referenceElement);\n  });","file":"unit/test-url.js","skipped":false,"dir":"test"},{"name":"should allow https","suites":[],"updatePoint":{"line":245,"column":24,"index":7832},"line":245,"code":"  it('should allow https', () => {\n    assertHttpsUrl('https://twitter.com', referenceElement);\n    expect(isSecureUrlDeprecated('https://twitter.com')).to.be.true;\n  });","file":"unit/test-url.js","skipped":false,"dir":"test"},{"name":"should allow protocol relative","suites":[],"updatePoint":{"line":249,"column":36,"index":8015},"line":249,"code":"  it('should allow protocol relative', () => {\n    assertHttpsUrl('//twitter.com', referenceElement);\n    // `isSecureUrl` always resolves relative URLs.\n    expect(isSecureUrlDeprecated('//twitter.com')).to.be.equal(window.location.protocol == 'https:');\n  });","file":"unit/test-url.js","skipped":false,"dir":"test"},{"name":"should allow localhost with http","suites":[],"updatePoint":{"line":254,"column":38,"index":8279},"line":254,"code":"  it('should allow localhost with http', () => {\n    assertHttpsUrl('http://localhost:8000/sfasd', referenceElement);\n    expect(isSecureUrlDeprecated('http://localhost:8000/sfasd')).to.be.true;\n  });","file":"unit/test-url.js","skipped":false,"dir":"test"},{"name":"should allow localhost with http suffix","suites":[],"updatePoint":{"line":258,"column":45,"index":8487},"line":258,"code":"  it('should allow localhost with http suffix', () => {\n    assertHttpsUrl('http://iframe.localhost:8000/sfasd', referenceElement);\n    expect(isSecureUrlDeprecated('http://iframe.localhost:8000/sfasd')).to.be.true;\n  });","file":"unit/test-url.js","skipped":false,"dir":"test"},{"name":"should fail on http","suites":[],"updatePoint":{"line":262,"column":25,"index":8689},"line":262,"code":"  it('should fail on http', () => {\n    allowConsoleError(() => {\n      expect(() => {\n        assertHttpsUrl('http://twitter.com', referenceElement);\n      }).to.throw(/source must start with/);\n    });\n    expect(isSecureUrlDeprecated('http://twitter.com')).to.be.false;\n  });","file":"unit/test-url.js","skipped":false,"dir":"test"},{"name":"should fail on http with localhost in the name","suites":[],"updatePoint":{"line":270,"column":52,"index":8995},"line":270,"code":"  it('should fail on http with localhost in the name', () => {\n    allowConsoleError(() => {\n      expect(() => {\n        assertHttpsUrl('http://foolocalhost', referenceElement);\n      }).to.throw(/source must start with/);\n    });\n    expect(isSecureUrlDeprecated('http://foolocalhost')).to.be.false;\n  });","file":"unit/test-url.js","skipped":false,"dir":"test"},{"name":"should allow http","suites":[],"updatePoint":{"line":280,"column":23,"index":9342},"line":280,"code":"  it('should allow http', () => {\n    expect(assertAbsoluteHttpOrHttpsUrl('http://twitter.com/')).to.equal('http://twitter.com/');\n    expect(assertAbsoluteHttpOrHttpsUrl('HTTP://twitter.com/')).to.equal('http://twitter.com/');\n  });","file":"unit/test-url.js","skipped":false,"dir":"test"},{"name":"should allow https","suites":[],"updatePoint":{"line":284,"column":24,"index":9577},"line":284,"code":"  it('should allow https', () => {\n    expect(assertAbsoluteHttpOrHttpsUrl('https://twitter.com/')).to.equal('https://twitter.com/');\n    expect(assertAbsoluteHttpOrHttpsUrl('HTTPS://twitter.com/')).to.equal('https://twitter.com/');\n  });","file":"unit/test-url.js","skipped":false,"dir":"test"},{"name":"should fail on relative protocol","suites":[],"updatePoint":{"line":288,"column":38,"index":9830},"line":288,"code":"  it('should fail on relative protocol', () => {\n    allowConsoleError(() => {\n      expect(() => {\n        assertAbsoluteHttpOrHttpsUrl('//twitter.com/');\n      }).to.throw(/URL must start with/);\n    });\n  });","file":"unit/test-url.js","skipped":false,"dir":"test"},{"name":"should fail on relative url","suites":[],"updatePoint":{"line":295,"column":33,"index":10037},"line":295,"code":"  it('should fail on relative url', () => {\n    allowConsoleError(() => {\n      expect(() => {\n        assertAbsoluteHttpOrHttpsUrl('/path');\n      }).to.throw(/URL must start with/);\n    });\n  });","file":"unit/test-url.js","skipped":false,"dir":"test"},{"name":"should fail on not allowed protocol","suites":[],"updatePoint":{"line":302,"column":41,"index":10243},"line":302,"code":"  it('should fail on not allowed protocol', () => {\n    allowConsoleError(() => {\n      expect(() => {\n        assertAbsoluteHttpOrHttpsUrl( /*eslint no-script-url: 0*/'javascript:alert');\n      }).to.throw(/URL must start with/);\n    });\n  });","file":"unit/test-url.js","skipped":false,"dir":"test"},{"name":"should remove fragment","suites":[],"updatePoint":{"line":311,"column":28,"index":10529},"line":311,"code":"  it('should remove fragment', () => {\n    expect(removeFragment('https://twitter.com/path#abc')).to.equal('https://twitter.com/path');\n  });","file":"unit/test-url.js","skipped":false,"dir":"test"},{"name":"should remove empty fragment","suites":[],"updatePoint":{"line":314,"column":34,"index":10677},"line":314,"code":"  it('should remove empty fragment', () => {\n    expect(removeFragment('https://twitter.com/path#')).to.equal('https://twitter.com/path');\n  });","file":"unit/test-url.js","skipped":false,"dir":"test"},{"name":"should ignore when no fragment","suites":[],"updatePoint":{"line":317,"column":36,"index":10824},"line":317,"code":"  it('should ignore when no fragment', () => {\n    expect(removeFragment('https://twitter.com/path')).to.equal('https://twitter.com/path');\n  });","file":"unit/test-url.js","skipped":false,"dir":"test"},{"name":"should remove search","suites":[],"updatePoint":{"line":322,"column":26,"index":11012},"line":322,"code":"  it('should remove search', () => {\n    expect(removeSearch('https://twitter.com/path?abc')).to.equal('https://twitter.com/path');\n  });","file":"unit/test-url.js","skipped":false,"dir":"test"},{"name":"should remove search with value","suites":[],"updatePoint":{"line":325,"column":37,"index":11161},"line":325,"code":"  it('should remove search with value', () => {\n    expect(removeSearch('https://twitter.com/path?abc=123')).to.equal('https://twitter.com/path');\n  });","file":"unit/test-url.js","skipped":false,"dir":"test"},{"name":"should remove multiple params","suites":[],"updatePoint":{"line":328,"column":35,"index":11312},"line":328,"code":"  it('should remove multiple params', () => {\n    expect(removeSearch('https://twitter.com/path?abc=123&d&e=4')).to.equal('https://twitter.com/path');\n  });","file":"unit/test-url.js","skipped":false,"dir":"test"},{"name":"should remove empty search","suites":[],"updatePoint":{"line":331,"column":32,"index":11466},"line":331,"code":"  it('should remove empty search', () => {\n    expect(removeSearch('https://twitter.com/path?')).to.equal('https://twitter.com/path');\n  });","file":"unit/test-url.js","skipped":false,"dir":"test"},{"name":"should ignore when no search","suites":[],"updatePoint":{"line":334,"column":34,"index":11609},"line":334,"code":"  it('should ignore when no search', () => {\n    expect(removeSearch('https://twitter.com/path')).to.equal('https://twitter.com/path');\n  });","file":"unit/test-url.js","skipped":false,"dir":"test"},{"name":"should preserve fragment","suites":[],"updatePoint":{"line":337,"column":30,"index":11747},"line":337,"code":"  it('should preserve fragment', () => {\n    expect(removeSearch('https://twitter.com/path?abc#f')).to.equal('https://twitter.com/path#f');\n  });","file":"unit/test-url.js","skipped":false,"dir":"test"},{"name":"should preserve fragment with multiple params","suites":[],"updatePoint":{"line":340,"column":51,"index":11914},"line":340,"code":"  it('should preserve fragment with multiple params', () => {\n    expect(removeSearch('https://twitter.com/path?a&d=1&e=5#f=x')).to.equal('https://twitter.com/path#f=x');\n  });","file":"unit/test-url.js","skipped":false,"dir":"test"},{"name":"should preserve fragment when no search","suites":[],"updatePoint":{"line":343,"column":45,"index":12085},"line":343,"code":"  it('should preserve fragment when no search', () => {\n    expect(removeSearch('https://twitter.com/path#f')).to.equal('https://twitter.com/path#f');\n  });","file":"unit/test-url.js","skipped":false,"dir":"test"},{"name":"should handle empty fragment","suites":[],"updatePoint":{"line":346,"column":34,"index":12231},"line":346,"code":"  it('should handle empty fragment', () => {\n    expect(removeSearch('https://twitter.com/path#')).to.equal('https://twitter.com/path#');\n    expect(removeSearch('https://twitter.com/path?#')).to.equal('https://twitter.com/path#');\n  });","file":"unit/test-url.js","skipped":false,"dir":"test"},{"name":"should preserve hash value","suites":[],"updatePoint":{"line":356,"column":32,"index":12618},"line":356,"code":"  it('should preserve hash value', () => {\n    url = addParamToUrl(url, 'elementId', 'n1');\n    expect(url).to.equal('https://www.ampproject.org/get/here?elementId=n1#hash-value');\n    url = addParamToUrl(url, 'ampUserId', '12345');\n    expect(url).to.equal('https://www.ampproject.org/get/here?elementId=n1&ampUserId=12345#hash-value');\n  });","file":"unit/test-url.js","skipped":false,"dir":"test"},{"name":"should preserve query values","suites":[],"updatePoint":{"line":362,"column":34,"index":12964},"line":362,"code":"  it('should preserve query values', () => {\n    url = 'https://www.ampproject.org/get/here?hello=world&foo=bar';\n    url = addParamToUrl(url, 'elementId', 'n1');\n    expect(url).to.equal('https://www.ampproject.org/get/here?hello=world&foo=bar&elementId=n1');\n    url = addParamToUrl(url, 'ampUserId', '12345');\n    expect(url).to.equal('https://www.ampproject.org/get/here?hello=world&foo=bar&elementId=n1&ampUserId=12345');\n  });","file":"unit/test-url.js","skipped":false,"dir":"test"},{"name":"should optionally add params to the front","suites":[],"updatePoint":{"line":369,"column":47,"index":13410},"line":369,"code":"  it('should optionally add params to the front', () => {\n    let url = addParamToUrl('https://www.ampproject.org/get/here?hello=world&foo=bar', 'elementId', 'n1', /* addToFront */true);\n    expect(url).to.equal('https://www.ampproject.org/get/here?elementId=n1&hello=world&foo=bar');\n    url = addParamToUrl('https://www.ampproject.org/get/here', 'elementId', 'n1', /* addToFront */true);\n    expect(url).to.equal('https://www.ampproject.org/get/here?elementId=n1');\n  });","file":"unit/test-url.js","skipped":false,"dir":"test"},{"name":"should encode uri values","suites":[],"updatePoint":{"line":375,"column":30,"index":13867},"line":375,"code":"  it('should encode uri values', () => {\n    url = addParamToUrl(url, 'foo', 'b ar');\n    expect(url).to.equal('https://www.ampproject.org/get/here?foo=b%20ar#hash-value');\n  });","file":"unit/test-url.js","skipped":false,"dir":"test"},{"name":"should keep host and path intact","suites":[],"updatePoint":{"line":379,"column":38,"index":14054},"line":379,"code":"  it('should keep host and path intact', () => {\n    url = addParamToUrl('https://${host}/${path}', 'foo', 'bar');\n    expect(url).to.equal('https://${host}/${path}?foo=bar');\n  });","file":"unit/test-url.js","skipped":false,"dir":"test"},{"name":"should loop over the keys and values correctly","suites":[],"updatePoint":{"line":393,"column":52,"index":14461},"line":393,"code":"  it('should loop over the keys and values correctly', () => {\n    url = addParamsToUrl(url, params);\n    expect(url).to.equal('https://www.ampproject.org/get/here?hello=world&foo=bar#hash-value');\n    expect(addParamsToUrl('http://example.com', {\n      firstname: 'Cool',\n      lastname: 'Beans',\n      interests: ['Basketball', 'Food', 'Running']\n    })).to.equal('http://example.com?firstname=Cool&lastname=Beans&' + 'interests=Basketball&interests=Food&interests=Running');\n  });","file":"unit/test-url.js","skipped":false,"dir":"test"},{"name":"should keep host and path intact","suites":[],"updatePoint":{"line":402,"column":38,"index":14931},"line":402,"code":"  it('should keep host and path intact', () => {\n    url = addParamsToUrl('https://${host}/${path}#hash-value', params);\n    expect(url).to.equal('https://${host}/${path}?hello=world&foo=bar#hash-value');\n  });","file":"unit/test-url.js","skipped":false,"dir":"test"},{"name":"should not replace existing params","suites":[],"updatePoint":{"line":418,"column":40,"index":15418},"line":418,"code":"  it('should not replace existing params', () => {\n    expect(addMissingParamsToUrl(url, params)).to.equal('https://www.ampproject.org/get/here?replace=1&safe&hello=world&foo=bar#hash-value');\n  });","file":"unit/test-url.js","skipped":false,"dir":"test"},{"name":"should fail on invalid source origin","suites":[],"updatePoint":{"line":534,"column":42,"index":22716},"line":534,"code":"  it('should fail on invalid source origin', () => {\n    allowConsoleError(() => {\n      expect(() => {\n        getSourceOrigin(parseUrlDeprecated('https://cdn.ampproject.org/v/yyy/'));\n      }).to.throw(/Expected a \\. in origin http:\\/\\/yyy/);\n    });\n  });","file":"unit/test-url.js","skipped":false,"dir":"test"},{"name":"should error if __amp_source_origin is set","suites":[],"updatePoint":{"line":573,"column":48,"index":24831},"line":573,"code":"  it('should error if __amp_source_origin is set', () => {\n    allowConsoleError(() => {\n      expect(() => getCorsUrl(window, 'http://example.com/?__amp_source_origin')).to.throw(/Source origin is not allowed in/);\n    });\n    expect(() => getCorsUrl(window, 'http://example.com/?name=hello')).to.not.throw();\n  });","file":"unit/test-url.js","skipped":false,"dir":"test"},{"name":"should set __amp_source_origin as a url param","suites":[],"updatePoint":{"line":579,"column":51,"index":25151},"line":579,"code":"  it('should set __amp_source_origin as a url param', () => {\n    expect(getCorsUrl(window, 'http://example.com/?name=hello')).to.equal('http://example.com/?name=hello&' + '__amp_source_origin=http%3A%2F%2Flocalhost%3A9876');\n  });","file":"unit/test-url.js","skipped":false,"dir":"test"},{"name":"should handle unaffected URLs","suites":[],"updatePoint":{"line":584,"column":35,"index":25431},"line":584,"code":"  it('should handle unaffected URLs', () => {\n    expect(removeAmpJsParamsFromUrl('http://example.com')).to.equal('http://example.com/');\n    expect(removeAmpJsParamsFromUrl('http://example.com?x=123')).to.equal('http://example.com/?x=123');\n    expect(removeAmpJsParamsFromUrl('http://example.com#x=123')).to.equal('http://example.com/#x=123');\n    expect(removeAmpJsParamsFromUrl('http://example.com?y=abc#x=123')).to.equal('http://example.com/?y=abc#x=123');\n  });","file":"unit/test-url.js","skipped":false,"dir":"test"},{"name":"should remove all internal params","suites":[],"updatePoint":{"line":590,"column":39,"index":25903},"line":590,"code":"  it('should remove all internal params', () => {\n    expect(removeAmpJsParamsFromUrl('http://example.com?amp_js=1&amp_gsa=2&amp_r=3&amp_kit=4&usqp=4')).to.equal('http://example.com/');\n    expect(removeAmpJsParamsFromUrl('http://example.com?amp_js&amp_gsa&amp_r&amp_kit&usqp')).to.equal('http://example.com/');\n  });","file":"unit/test-url.js","skipped":false,"dir":"test"},{"name":"should remove all internal params, leaving others intact","suites":[],"updatePoint":{"line":594,"column":62,"index":26244},"line":594,"code":"  it('should remove all internal params, leaving others intact', () => {\n    expect(removeAmpJsParamsFromUrl('http://example.com?a=a&amp_js=1&b=b&amp_gsa=2&c=c&amp_r=3&amp_kit=4&d=d&usqp=4&e=e')).to.equal('http://example.com/?a=a&b=b&c=c&d=d&e=e');\n  });","file":"unit/test-url.js","skipped":false,"dir":"test"},{"name":"should preserve the fragment","suites":[],"updatePoint":{"line":597,"column":34,"index":26471},"line":597,"code":"  it('should preserve the fragment', () => {\n    expect(removeAmpJsParamsFromUrl('http://example.com?a=a&amp_js=1&b=b&amp_gsa=2&c=c&amp_r=3&amp_kit=4&d=d&usqp=4&e=e#frag=yes')).to.equal('http://example.com/?a=a&b=b&c=c&d=d&e=e#frag=yes');\n  });","file":"unit/test-url.js","skipped":false,"dir":"test"},{"name":"should preserve the path","suites":[],"updatePoint":{"line":600,"column":30,"index":26712},"line":600,"code":"  it('should preserve the path', () => {\n    expect(removeAmpJsParamsFromUrl('http://example.com/toast?a=a&amp_js=1&b=b&amp_gsa=2&c=c&amp_r=3&amp_kit=4&d=d&usqp=4&e=e#frag=yes')).to.equal('http://example.com/toast?a=a&b=b&c=c&d=d&e=e#frag=yes');\n  });","file":"unit/test-url.js","skipped":false,"dir":"test"},{"name":"should remove the leading ? or &","suites":[],"updatePoint":{"line":605,"column":38,"index":27034},"line":605,"code":"  it('should remove the leading ? or &', () => {\n    expect(removeParamsFromSearch('?a=1&', 'a')).to.equal('');\n  });","file":"unit/test-url.js","skipped":false,"dir":"test"},{"name":"should remove the param from searchUrl","suites":[],"updatePoint":{"line":608,"column":44,"index":27158},"line":608,"code":"  it('should remove the param from searchUrl', () => {\n    expect(removeParamsFromSearch('?a=1&b=2&c', 'a')).to.equal('?b=2&c');\n  });","file":"unit/test-url.js","skipped":false,"dir":"test"},{"name":"should remove all param with same name from searchUrl","suites":[],"updatePoint":{"line":611,"column":59,"index":27308},"line":611,"code":"  it('should remove all param with same name from searchUrl', () => {\n    expect(removeParamsFromSearch('?a=1&b=2&a=2&a=3&c&ab=3', 'a')).to.equal('?b=2&c&ab=3');\n  });","file":"unit/test-url.js","skipped":false,"dir":"test"},{"name":"should ignore non-proxy origins","suites":[],"updatePoint":{"line":616,"column":37,"index":27513},"line":616,"code":"  it('should ignore non-proxy origins', () => {\n    expect(getProxyServingType('http://www.example.com')).to.be.null;\n    expect(getProxyServingType('http://cdn.ampproject.org/c/o.com/foo/')).to.be.null;\n  });","file":"unit/test-url.js","skipped":false,"dir":"test"},{"name":"should correctly extract known types","suites":[],"updatePoint":{"line":620,"column":42,"index":27728},"line":620,"code":"  it('should correctly extract known types', () => {\n    expect(getProxyServingType('https://cdn.ampproject.org/c/o.com/foo/')).to.equal('c');\n    expect(getProxyServingType('https://cdn.ampproject.org/a/o.com/foo/')).to.equal('a');\n    expect(getProxyServingType('https://cdn.ampproject.org/v/o.com/foo/')).to.equal('v');\n  });","file":"unit/test-url.js","skipped":false,"dir":"test"},{"name":"should correctly extract unknown types","suites":[],"updatePoint":{"line":625,"column":44,"index":28059},"line":625,"code":"  it('should correctly extract unknown types', () => {\n    expect(getProxyServingType('https://cdn.ampproject.org/test/o.com/foo/')).to.equal('test');\n    expect(getProxyServingType('https://not.cdn.ampproject.org/test/o.com/foo/')).to.equal('test');\n    expect(getProxyServingType('https://not.cdn.ampproject.org/test/blah.com/foo/')).to.equal('test');\n  });","file":"unit/test-url.js","skipped":false,"dir":"test"},{"name":"should properly join url and path","suites":[],"updatePoint":{"line":638,"column":39,"index":28588},"line":638,"code":"  it('should properly join url and path', () => {\n    expect(appendPathToUrl(urlService.parse('https://cdn.ampproject.org'), '/foo')).to.be.equal('https://cdn.ampproject.org/foo');\n  });","file":"unit/test-url.js","skipped":false,"dir":"test"},{"name":"should join url and path if none contain /","suites":[],"updatePoint":{"line":641,"column":48,"index":28784},"line":641,"code":"  it('should join url and path if none contain /', () => {\n    expect(appendPathToUrl(urlService.parse('https://cdn.ampproject.org'), 'foo')).to.be.equal('https://cdn.ampproject.org/foo');\n  });","file":"unit/test-url.js","skipped":false,"dir":"test"},{"name":"should properly join url with path, and path","suites":[],"updatePoint":{"line":644,"column":50,"index":28981},"line":644,"code":"  it('should properly join url with path, and path', () => {\n    expect(appendPathToUrl(urlService.parse('https://cdn.ampproject.org/bar/'), '/foo')).to.be.equal('https://cdn.ampproject.org/bar/foo');\n  });","file":"unit/test-url.js","skipped":false,"dir":"test"},{"name":"should add path before query params","suites":[],"updatePoint":{"line":647,"column":41,"index":29179},"line":647,"code":"  it('should add path before query params', () => {\n    expect(appendPathToUrl(urlService.parse('https://cdn.ampproject.org?a=b'), '/foo')).to.be.equal('https://cdn.ampproject.org/foo?a=b');\n  });","file":"unit/test-url.js","skipped":false,"dir":"test"},{"name":"should add path before fragment","suites":[],"updatePoint":{"line":650,"column":37,"index":29372},"line":650,"code":"  it('should add path before fragment', () => {\n    expect(appendPathToUrl(urlService.parse('https://cdn.ampproject.org/#hello'), '/foo')).to.be.equal('https://cdn.ampproject.org/foo#hello');\n  });","file":"unit/test-url.js","skipped":false,"dir":"test"},{"name":"should add path before query params and fragment","suites":[],"updatePoint":{"line":653,"column":54,"index":29587},"line":653,"code":"  it('should add path before query params and fragment', () => {\n    expect(appendPathToUrl(urlService.parse('https://cdn.ampproject.org?a=b#hello'), 'foo')).to.be.equal('https://cdn.ampproject.org/foo?a=b#hello');\n  });","file":"unit/test-url.js","skipped":false,"dir":"test"},{"name":"should not load validator script if not in dev mode","suites":["maybeValidate"],"updatePoint":{"line":20,"column":59,"index":732},"line":20,"code":"    it('should not load validator script if not in dev mode', () => {\n      getModeStub.returns({});\n      isModeDevelopmentStub.returns(false);\n      maybeValidate(win);\n      expect(loadScriptStub).not.to.have.been.called;\n    });","file":"unit/test-validator-integration.js","skipped":false,"dir":"test"},{"name":"should not load validator script if bypassed","suites":["maybeValidate"],"updatePoint":{"line":26,"column":52,"index":958},"line":26,"code":"    it('should not load validator script if bypassed', () => {\n      getModeStub.returns({\n        test: true\n      });\n      isModeDevelopmentStub.returns(true);\n      win.location = 'https://www.example.com/#development=1&validate=0';\n      maybeValidate(win);\n      expect(loadScriptStub).not.to.have.been.called;\n    });","file":"unit/test-validator-integration.js","skipped":false,"dir":"test"},{"name":"should load validator script if dev mode","suites":["maybeValidate"],"updatePoint":{"line":35,"column":48,"index":1279},"line":35,"code":"    it('should load validator script if dev mode', () => {\n      getModeStub.returns({});\n      isModeDevelopmentStub.returns(true);\n      loadScriptStub.returns(Promise.resolve());\n      maybeValidate(win);\n      expect(loadScriptStub).to.have.been.called;\n    });","file":"unit/test-validator-integration.js","skipped":false,"dir":"test"},{"name":"should load WebAssembly validator","suites":["maybeValidate"],"updatePoint":{"line":42,"column":41,"index":1538},"line":42,"code":"    it('should load WebAssembly validator', () => {\n      getModeStub.returns({\n        test: true\n      });\n      isModeDevelopmentStub.returns(true);\n      win.location = 'https://www.example.com/#development=1';\n      maybeValidate(win);\n      expect(loadScriptStub).to.have.been.calledWith(env.sandbox.match(el => el.getAttribute('src') === 'https://cdn.ampproject.org/v0/validator_wasm.js'));\n    });","file":"unit/test-validator-integration.js","skipped":false,"dir":"test"},{"name":"should propagate pre-existing nonces","suites":["loadScript"],"updatePoint":{"line":53,"column":44,"index":1986},"line":53,"code":"    it('should propagate pre-existing nonces', () => {\n      const scriptEl = env.win.document.createElement('script');\n      scriptEl.setAttribute('nonce', '');\n      scriptEl.nonce = '123';\n      win.document.head.append(scriptEl);\n      loadScriptStub = env.sandbox.stub(eventHelper, 'loadPromise').returns(Promise.resolve());\n      loadScript(win.document, 'https://cdn.ampproject.org/v0/validator_wasm.js');\n      expect(loadScriptStub).calledWith(env.sandbox.match(el => el.nonce === '123'));\n    });","file":"unit/test-validator-integration.js","skipped":false,"dir":"test"},{"name":"Works without any variables","suites":[],"updatePoint":{"line":11,"column":33,"index":289},"line":11,"code":"  it('Works without any variables', () => {\n    expect(varSource.getExpr()).to.be.ok;\n    expect(varSource.get('')).to.be.undefined;\n  });","file":"unit/test-variable-source.js","skipped":false,"dir":"test"},{"name":"Works with sync variables","suites":[],"updatePoint":{"line":15,"column":31,"index":426},"line":15,"code":"  it('Works with sync variables', () => {\n    varSource.set('Foo', () => 'bar');\n    expect(varSource.getExpr()).to.be.ok;\n    expect(varSource.get('Foo')['sync']()).to.equal('bar');\n    expect(varSource.get('foo')).to.be.undefined;\n    expect(varSource.get('AFoo')).to.be.undefined;\n  });","file":"unit/test-variable-source.js","skipped":false,"dir":"test"},{"name":"Works with async variables","suites":[],"updatePoint":{"line":22,"column":32,"index":717},"line":22,"code":"  it('Works with async variables', () => {\n    varSource.setAsync('Foo', () => Promise.resolve('bar'));\n    expect(varSource.getExpr()).to.be.ok;\n    return varSource.get('Foo')['async']().then(value => {\n      expect(value).to.equal('bar');\n    });\n  });","file":"unit/test-variable-source.js","skipped":false,"dir":"test"},{"name":"Works with both sync and async variables","suites":[],"updatePoint":{"line":29,"column":46,"index":987},"line":29,"code":"  it('Works with both sync and async variables', () => {\n    varSource.setBoth('Foo', () => 'bar', () => Promise.resolve('bar'));\n    expect(varSource.getExpr()).to.be.ok;\n    expect(varSource.get('Foo')['sync']()).to.equal('bar');\n    return varSource.get('Foo')['async']().then(value => {\n      expect(value).to.equal('bar');\n    });\n  });","file":"unit/test-variable-source.js","skipped":false,"dir":"test"},{"name":"Works with multiple variables","suites":[],"updatePoint":{"line":37,"column":35,"index":1318},"line":37,"code":"  it('Works with multiple variables', () => {\n    varSource.setBoth('Foo', () => 'bar', () => Promise.resolve('bar'));\n    varSource.set('Baz', () => 'Foo');\n    expect(varSource.getExpr()).to.be.ok;\n    expect(varSource.get('Foo')['sync']()).to.equal('bar');\n    expect(varSource.get('Baz')['sync']()).to.equal('Foo');\n    return varSource.get('Foo')['async']().then(value => {\n      expect(value).to.equal('bar');\n    });\n  });","file":"unit/test-variable-source.js","skipped":false,"dir":"test"},{"name":"Works with sync variable that is set multiple times","suites":[],"updatePoint":{"line":47,"column":57,"index":1770},"line":47,"code":"  it('Works with sync variable that is set multiple times', () => {\n    varSource.set('Foo', () => 'bar').set('Foo', () => 'baz');\n    expect(varSource.getExpr()).to.be.ok;\n    expect(varSource.get('Foo')['sync']()).to.equal('baz');\n  });","file":"unit/test-variable-source.js","skipped":false,"dir":"test"},{"name":"Works with async variable that is set multiple times","suites":[],"updatePoint":{"line":52,"column":58,"index":2010},"line":52,"code":"  it('Works with async variable that is set multiple times', () => {\n    varSource.setAsync('Foo', () => Promise.resolve('bar')).setAsync('Foo', () => Promise.resolve('baz'));\n    return varSource.get('Foo')['async']().then(value => {\n      expect(value).to.equal('baz');\n    });\n  });","file":"unit/test-variable-source.js","skipped":false,"dir":"test"},{"name":"Does not cache a built Expr","suites":[],"updatePoint":{"line":58,"column":33,"index":2271},"line":58,"code":"  it('Does not cache a built Expr', () => {\n    varSource.set('ONE', () => 'foo');\n    const firstExpr = varSource.getExpr();\n    varSource.set('TWO', () => 'bar');\n    expect(firstExpr).not.to.equal(varSource.getExpr());\n  });","file":"unit/test-variable-source.js","skipped":false,"dir":"test"},{"name":"Works with allowlisted variables","suites":[],"updatePoint":{"line":74,"column":40,"index":2803},"line":74,"code":"    it('Works with allowlisted variables', () => {\n      variableSource.setAsync('ABCD', () => Promise.resolve('abcd'));\n      expect(variableSource.getExpr()).to.be.ok;\n      expect(variableSource.getExpr().toString()).to.contain('ABCD');\n      return variableSource.get('ABCD')['async']().then(value => {\n        expect(value).to.equal('abcd');\n      });\n    });","file":"unit/test-variable-source.js","skipped":false,"dir":"test"},{"name":"Should not work with unallowlisted variables","suites":[],"updatePoint":{"line":82,"column":52,"index":3180},"line":82,"code":"    it('Should not work with unallowlisted variables', () => {\n      variableSource.setAsync('RANDOM', () => Promise.resolve('0.1234'));\n      expect(variableSource.getExpr()).to.be.ok;\n      expect(variableSource.getExpr().toString()).not.to.contain('RANDOM');\n      return variableSource.get('RANDOM')['async']().then(value => {\n        expect(value).to.equal('0.1234');\n      });\n    });","file":"unit/test-variable-source.js","skipped":false,"dir":"test"},{"name":"Should ignore allowlisted variables for email documents","suites":[],"updatePoint":{"line":90,"column":63,"index":3582},"line":90,"code":"    it('Should ignore allowlisted variables for email documents', () => {\n      env.win.document.documentElement.setAttribute('amp4email', '');\n      expect(variableSource.getExpr()).to.be.ok;\n      expect(variableSource.getExpr().toString()).not.to.contain('ABC');\n      expect(variableSource.getExpr().toString()).not.to.contain('ABCD');\n      expect(variableSource.getExpr().toString()).not.to.contain('CANONICAL');\n    });","file":"unit/test-variable-source.js","skipped":false,"dir":"test"},{"name":"Should not work with empty variable allowlist","suites":[],"updatePoint":{"line":98,"column":51,"index":4003},"line":98,"code":"  it('Should not work with empty variable allowlist', () => {\n    const variableSource = new VariableSource(env.ampdoc);\n    variableSource.variableAllowlist_ = [''];\n    variableSource.setAsync('RANDOM', () => Promise.resolve('0.1234'));\n    expect(variableSource.getExpr()).to.be.ok;\n    expect(variableSource.getExpr().toString()).not.to.contain('RANDOM');\n    return variableSource.get('RANDOM')['async']().then(value => {\n      expect(value).to.equal('0.1234');\n    });\n  });","file":"unit/test-variable-source.js","skipped":false,"dir":"test"},{"name":"should wait for load event","suites":[],"updatePoint":{"line":119,"column":34,"index":4703},"line":119,"code":"    it('should wait for load event', () => {\n      win.readyState = 'other';\n      const p = getTimingDataAsync(win, 'navigationStart', 'loadEventStart');\n      expect(win.eventListeners.count('load')).to.equal(1);\n      win.performance.timing.loadEventStart = 12;\n      win.eventListeners.fire({\n        type: 'load'\n      });\n      return p.then(value => {\n        expect(value).to.equal(11);\n      });\n    });","file":"unit/test-variable-source.js","skipped":false,"dir":"test"},{"name":"waits for LOADEDMETADATA","suites":["#start"],"updatePoint":{"line":63,"column":32,"index":1924},"line":63,"code":"    it('waits for LOADEDMETADATA', () => {\n      const {\n        video\n      } = mockEntry;\n      const {\n        element\n      } = video;\n      tracker.start();\n      expect(mockTimer.delay).to.not.have.been.called;\n      const validDurationSeconds = 10;\n      const validCurrentTimeSeconds = 0;\n      setDuration(video, validDurationSeconds);\n      setCurrentTime(video, validCurrentTimeSeconds);\n      dispatchLoadedMetadata(element);\n      expect(mockTimer.delay).to.have.been.calledOnce;\n    });","file":"unit/test-video-analytics-percentage-tracker.js","skipped":false,"dir":"test"},{"name":"works if LOADEDMETADATA fires before the tracker starts","suites":["#start"],"updatePoint":{"line":79,"column":63,"index":2456},"line":79,"code":"    it('works if LOADEDMETADATA fires before the tracker starts', () => {\n      const {\n        video\n      } = mockEntry;\n      const {\n        element\n      } = video;\n      dispatchLoadedMetadata(element);\n      const validDurationSeconds = 10;\n      const validCurrentTimeSeconds = 0;\n      setDuration(video, validDurationSeconds);\n      setCurrentTime(video, validCurrentTimeSeconds);\n      expect(mockTimer.delay).to.not.have.been.called;\n      tracker.start();\n      expect(mockTimer.delay).to.have.been.calledOnce;\n    });","file":"unit/test-video-analytics-percentage-tracker.js","skipped":false,"dir":"test"},{"name":"aborts if duration is invalid ()","suites":["#start"],"updatePoint":{"line":96,"column":60,"index":3048},"line":96,"code":"      it(`aborts if duration is invalid (${invalidDuration})`, () => {\n        const {\n          video\n        } = mockEntry;\n        const {\n          element\n        } = video;\n        tracker.start();\n        setDuration(video, invalidDuration);\n        dispatchLoadedMetadata(element);\n        expect(mockTimer.delay).to.not.have.been.called;\n      });","file":"unit/test-video-analytics-percentage-tracker.js","skipped":false,"dir":"test"},{"name":"aborts if duration is  after initially valid","suites":["#start"],"updatePoint":{"line":114,"column":72,"index":3678},"line":114,"code":"      it(`aborts if duration is ${invalidDuration} after initially valid`, () => {\n        const {\n          video\n        } = mockEntry;\n        const durationStub = env.sandbox.stub(video, 'getDuration');\n        durationStub.onFirstCall().returns(1000 /* valid duration */);\n        durationStub.returns(invalidDuration);\n        const {\n          element\n        } = video;\n        setPlayingState(mockEntry, PlayingStates_Enum.PLAYING_MANUAL);\n        tracker.start();\n        dispatchLoadedMetadata(element);\n        expect(mockTimer.delay).to.always.have.been.calledWith(env.sandbox.match.func, PERCENTAGE_FREQUENCY_WHEN_PAUSED_MS);\n      });","file":"unit/test-video-analytics-percentage-tracker.js","skipped":false,"dir":"test"},{"name":"does not trigger if the video is paused","suites":["#start"],"updatePoint":{"line":130,"column":47,"index":4311},"line":130,"code":"    it('does not trigger if the video is paused', () => {\n      const {\n        video\n      } = mockEntry;\n      const {\n        element\n      } = video;\n      tracker.start();\n      const triggerMock = mockTrigger(tracker);\n      const validDurationSeconds = 10;\n      const validCurrentTimeSeconds = 0;\n      setDuration(video, validDurationSeconds);\n      setCurrentTime(video, validCurrentTimeSeconds);\n      dispatchLoadedMetadata(element);\n      expect(triggerMock).to.not.have.been.called;\n    });","file":"unit/test-video-analytics-percentage-tracker.js","skipped":false,"dir":"test"},{"name":"does not trigger if percentage < %","suites":["#start"],"updatePoint":{"line":146,"column":53,"index":4822},"line":146,"code":"    it(`does not trigger if percentage < ${interval}%`, () => {\n      const {\n        video\n      } = mockEntry;\n      const {\n        element\n      } = video;\n      tracker.start();\n      const triggerMock = mockTrigger(tracker);\n      const validDurationSeconds = 10;\n      setDuration(video, validDurationSeconds);\n      setCurrentTime(video, 0);\n      dispatchLoadedMetadata(element);\n      setPlayingState(mockEntry, PlayingStates_Enum.PLAYING_MANUAL);\n      const cutoff = validDurationSeconds / 100 * interval;\n      for (let currentTimeSeconds = 0; currentTimeSeconds < cutoff; currentTimeSeconds += 0.1) {\n        setCurrentTime(video, currentTimeSeconds);\n        expect(triggerMock).to.not.have.been.called;\n        mockTimerCallback();\n      }\n    });","file":"unit/test-video-analytics-percentage-tracker.js","skipped":false,"dir":"test"},{"name":"triggers every % starting on s","suites":["#start"],"updatePoint":{"line":168,"column":70,"index":5687},"line":168,"code":"      it(`triggers every ${interval}% starting on ${startTimeSeconds}s`, () => {\n        const {\n          video\n        } = mockEntry;\n        const {\n          element\n        } = video;\n        tracker.start();\n        const triggerMock = mockTrigger(tracker);\n        const validDurationSeconds = 100;\n        setDuration(video, validDurationSeconds);\n        setCurrentTime(video, startTimeSeconds);\n        dispatchLoadedMetadata(element);\n        setPlayingState(mockEntry, PlayingStates_Enum.PLAYING_MANUAL);\n        for (let timeSeconds = startTimeSeconds; timeSeconds < validDurationSeconds; timeSeconds += 1) {\n          setCurrentTime(video, timeSeconds);\n          mockTimerCallback();\n        }\n        for (let percentage = Math.max(interval, Math.ceil(startTimeSeconds / interval) * interval); percentage < 100; percentage += interval) {\n          expect(triggerMock.withArgs(percentage), `triggerMock.withArgs(${percentage}%)`).to.have.been.calledOnce;\n        }\n      });","file":"unit/test-video-analytics-percentage-tracker.js","skipped":false,"dir":"test"},{"name":"triggers 100% on ended","suites":["#start"],"updatePoint":{"line":191,"column":30,"index":6643},"line":191,"code":"    it('triggers 100% on ended', () => {\n      const {\n        video\n      } = mockEntry;\n      const {\n        element\n      } = video;\n      const triggerMock = mockTrigger(tracker);\n      const startTimeSeconds = 0;\n      const validDurationSeconds = 100;\n      setDuration(video, validDurationSeconds);\n      setCurrentTime(video, startTimeSeconds);\n      setPlayingState(mockEntry, PlayingStates_Enum.PLAYING_MANUAL);\n      tracker.start();\n      dispatchLoadedMetadata(element);\n      mockTimerCallback();\n      dispatchCustom(element, VideoEvents_Enum.ENDED);\n      expect(triggerMock.withArgs(100)).to.have.been.calledOnce;\n    });","file":"unit/test-video-analytics-percentage-tracker.js","skipped":false,"dir":"test"},{"name":"cancels upcoming events","suites":["#stop"],"updatePoint":{"line":212,"column":31,"index":7318},"line":212,"code":"    it('cancels upcoming events', () => {\n      const {\n        video\n      } = mockEntry;\n      const {\n        element\n      } = video;\n      const triggerMock = mockTrigger(tracker);\n      const startTimeSeconds = 0;\n      const validDurationSeconds = 100;\n      setDuration(video, validDurationSeconds);\n      setCurrentTime(video, startTimeSeconds);\n      setPlayingState(mockEntry, PlayingStates_Enum.PLAYING_MANUAL);\n      tracker.start();\n      dispatchLoadedMetadata(element);\n      tracker.stop();\n      mockTimerCallback();\n      dispatchCustom(element, VideoEvents_Enum.ENDED);\n      expect(triggerMock).to.not.have.been.called;\n    });","file":"unit/test-video-analytics-percentage-tracker.js","skipped":false,"dir":"test"},{"name":"should execute callbacks pushed before adoption","suites":["adopt(win)","<script async> support"],"updatePoint":{"line":16,"column":57,"index":620},"line":16,"code":"      it('should execute callbacks pushed before adoption', () => {\n        const global = {};\n        const callback = env.sandbox.spy();\n        pushToGlobal(global, callback);\n        adopt(global);\n        expectCalledWithAmpVideoIntegration(callback);\n      });","file":"unit/test-video-iframe-integration.js","skipped":false,"dir":"test"},{"name":"should execute callbacks pushed after adoption","suites":["adopt(win)","<script async> support"],"updatePoint":{"line":23,"column":56,"index":886},"line":23,"code":"      it('should execute callbacks pushed after adoption', () => {\n        const global = {};\n        adopt(global);\n        const callback = env.sandbox.spy();\n        pushToGlobal(global, callback);\n        expectCalledWithAmpVideoIntegration(callback);\n      });","file":"unit/test-video-iframe-integration.js","skipped":false,"dir":"test"},{"name":"gets metadata from window name","suites":["AmpVideoIntegration","#getMetadata"],"updatePoint":{"line":34,"column":40,"index":1229},"line":34,"code":"      it('gets metadata from window name', () => {\n        const metadata = {\n          canonicalUrl: 'foo.html',\n          sourceUrl: 'bar.html'\n        };\n        const win = {\n          name: JSON.stringify(metadata)\n        };\n        const integration = new AmpVideoIntegration(win);\n\n        // Sinon does not support env.sandbox.match on to.equal\n        const dummySpy = env.sandbox.spy();\n        dummySpy(integration.getMetadata());\n        expect(dummySpy.withArgs(env.sandbox.match(metadata))).to.have.been.calledOnce;\n      });","file":"unit/test-video-iframe-integration.js","skipped":false,"dir":"test"},{"name":"should execute on message","suites":["AmpVideoIntegration","#method"],"updatePoint":{"line":51,"column":35,"index":1805},"line":51,"code":"      it('should execute on message', () => {\n        const integration = new AmpVideoIntegration();\n        const listenToOnce = env.sandbox.stub(integration, 'listenToOnce_');\n        const validMethods = ['pause', 'play', 'mute', 'unmute', 'fullscreenenter', 'fullscreenexit', 'showcontrols', 'hidecontrols'];\n        validMethods.forEach(method => {\n          const spy = env.sandbox.spy();\n          integration.method(method, spy);\n          integration.onMessage_({\n            event: 'method',\n            method\n          });\n          expect(spy).to.have.been.calledOnce;\n        });\n        expect(listenToOnce.callCount).to.equal(validMethods.length);\n      });","file":"unit/test-video-iframe-integration.js","skipped":false,"dir":"test"},{"name":"should reject invalid methods","suites":["AmpVideoIntegration","#method"],"updatePoint":{"line":66,"column":39,"index":2483},"line":66,"code":"      it('should reject invalid methods', () => {\n        const integration = new AmpVideoIntegration();\n        const listenToOnce = env.sandbox.stub(integration, 'listenToOnce_');\n        const invalidMethods = 'tacos al pastor'.split(' ');\n        invalidMethods.forEach(method => {\n          const spy = env.sandbox.spy();\n          expect(() => integration.method(method, spy)).to.throw(/Invalid method/);\n        });\n        expect(listenToOnce).to.not.have.been.called;\n      });","file":"unit/test-video-iframe-integration.js","skipped":false,"dir":"test"},{"name":"should post any event","suites":["AmpVideoIntegration","#postEvent"],"updatePoint":{"line":78,"column":31,"index":3005},"line":78,"code":"      it('should post any event', () => {\n        const integration = new AmpVideoIntegration();\n        const postToParent = env.sandbox.stub(integration, 'postToParent_');\n        const events = ['canplay', 'load', 'playing', 'pause', 'ended', 'muted', 'unmuted', 'tacos', 'al', 'pastor'];\n        for (let i = 0; i < events.length; i++) {\n          const event = events[i];\n          integration.postEvent(event);\n          expect(postToParent.withArgs(env.sandbox.match({\n            event\n          }))).to.have.been.calledOnce;\n        }\n      });","file":"unit/test-video-iframe-integration.js","skipped":false,"dir":"test"},{"name":"getIntersection should request and receive intersection","suites":["AmpVideoIntegration","get async value from host document"],"updatePoint":{"line":101,"column":65,"index":3974},"line":101,"code":"      it('getIntersection should request and receive intersection', () => {\n        const id = integration.getFromHostForTesting_('getIntersection', callback);\n        expect(postToParent.withArgs(env.sandbox.match({\n          method: 'getIntersection'\n        }))).to.have.been.calledOnce;\n        expect(integration.listenToOnce_).to.have.been.calledOnce;\n        const response = {\n          tacos: 'al pastor'\n        };\n        integration.onMessage_({\n          id,\n          args: response\n        });\n        expect(callback.withArgs(response)).to.have.been.calledOnce;\n      });","file":"unit/test-video-iframe-integration.js","skipped":false,"dir":"test"},{"name":"getConsentData should request and receive consent data","suites":["AmpVideoIntegration","get async value from host document"],"updatePoint":{"line":116,"column":64,"index":4561},"line":116,"code":"      it('getConsentData should request and receive consent data', () => {\n        const id = integration.getFromHostForTesting_('getConsentData', callback);\n        expect(postToParent.withArgs(env.sandbox.match({\n          method: 'getConsentData'\n        }))).to.have.been.calledOnce;\n        expect(integration.listenToOnce_).to.have.been.calledOnce;\n        const response = {\n          tacos: 'al pastor'\n        };\n        integration.onMessage_({\n          id,\n          args: response\n        });\n        expect(callback.withArgs(response)).to.have.been.calledOnce;\n      });","file":"unit/test-video-iframe-integration.js","skipped":false,"dir":"test"},{"name":"registers all events and methods","suites":["AmpVideoIntegration","#listenTo","jwplayer"],"updatePoint":{"line":134,"column":44,"index":5203},"line":134,"code":"        it('registers all events and methods', () => {\n          const player = {\n            on: env.sandbox.spy(),\n            play: env.sandbox.spy(),\n            pause: env.sandbox.spy(),\n            setMuted: env.sandbox.spy(),\n            setControls: env.sandbox.spy(),\n            setFullscreen: env.sandbox.spy()\n          };\n          const expectedEvents = ['error', 'setupError', 'adSkipped', 'adComplete', 'adError', 'adStarted', 'play', 'ready', 'pause', 'volume'];\n          const expectedMethods = ['play', 'pause', 'mute', 'unmute', 'showcontrols', 'hidecontrols', 'fullscreenenter', 'fullscreenexit'];\n          const integration = new AmpVideoIntegration();\n          const listenToOnce = env.sandbox.stub(integration, 'listenToOnce_');\n          const methodSpy = env.sandbox.spy(integration, 'method');\n          integration.listenTo('jwplayer', player);\n          expectedEvents.forEach(event => {\n            expect(player.on.withArgs(event, env.sandbox.match.any)).to.have.been.calledOnce;\n          });\n          expectedMethods.forEach(method => {\n            expect(methodSpy.withArgs(method, env.sandbox.match.any)).to.have.been.calledOnce;\n          });\n          expect(listenToOnce.callCount).to.equal(expectedMethods.length);\n        });","file":"unit/test-video-iframe-integration.js","skipped":false,"dir":"test"},{"name":"uses global jwplayer() to get instance when not passed in","suites":["AmpVideoIntegration","#listenTo","jwplayer"],"updatePoint":{"line":158,"column":67,"index":6506},"line":158,"code":"      it('uses global jwplayer() to get instance when not passed in', () => {\n        const instance = {\n          on: env.sandbox.spy()\n        };\n        env.win.jwplayer = env.sandbox.stub().returns(instance);\n        new AmpVideoIntegration(env.win).listenTo('jwplayer');\n        expect(instance.on).to.have.been.called;\n      });","file":"unit/test-video-iframe-integration.js","skipped":false,"dir":"test"},{"name":"registers all methods","suites":["AmpVideoIntegration","#listenTo","video.js"],"updatePoint":{"line":178,"column":33,"index":7060},"line":178,"code":"        it('registers all methods', () => {\n          const expectedMethods = ['play', 'pause', 'mute', 'unmute', 'showcontrols', 'hidecontrols', 'fullscreenenter', 'fullscreenexit'];\n          const player = mockVideoJsPlayer();\n          const integration = new AmpVideoIntegration();\n          const listenToOnce = env.sandbox.stub(integration, 'listenToOnce_');\n          const methodSpy = env.sandbox.spy(integration, 'method');\n          const dummyElement = env.win.document.createElement('video');\n          integration.listenTo('videojs', dummyElement, /* initializer */() => player);\n          expectedMethods.forEach(method => {\n            expect(methodSpy.withArgs(method, env.sandbox.match.any)).to.have.been.calledOnce;\n          });\n          expect(listenToOnce.callCount).to.equal(expectedMethods.length);\n        });","file":"unit/test-video-iframe-integration.js","skipped":false,"dir":"test"},{"name":"returns window global if no initializer provided","suites":["AmpVideoIntegration","#listenTo","video.js","getVideoJs"],"updatePoint":{"line":192,"column":62,"index":7964},"line":192,"code":"          it('returns window global if no initializer provided', () => {\n            const initializer = NOOP;\n            const win = {\n              videojs: initializer\n            };\n            expect(getVideoJs(win).toString()).to.equal(initializer.toString());\n          });","file":"unit/test-video-iframe-integration.js","skipped":false,"dir":"test"},{"name":"returns initializer if provided","suites":["AmpVideoIntegration","#listenTo","video.js","getVideoJs"],"updatePoint":{"line":199,"column":45,"index":8229},"line":199,"code":"          it('returns initializer if provided', () => {\n            const win = {};\n            const initializer = NOOP;\n            expect(getVideoJs(win, initializer).toString()).to.equal(initializer.toString());\n          });","file":"unit/test-video-iframe-integration.js","skipped":false,"dir":"test"},{"name":"fails if no initializer provided or Video.JS not present","suites":["AmpVideoIntegration","#listenTo","video.js","getVideoJs"],"updatePoint":{"line":204,"column":70,"index":8484},"line":204,"code":"          it('fails if no initializer provided or Video.JS not present', () => {\n            const win = {};\n            expect(() => getVideoJs(win)).to.throw();\n          });","file":"unit/test-video-iframe-integration.js","skipped":false,"dir":"test"},{"name":"should enter fullscreen if a video is centered in portrait","suites":[],"updatePoint":{"line":59,"column":64,"index":1538},"line":59,"code":"  it('should enter fullscreen if a video is centered in portrait', () => {\n    const video = createVideo();\n    const entry = {\n      video\n    };\n    const enter = env.sandbox.stub(autoFullscreenManager, 'enter_');\n    mockCenteredVideo(video.element);\n    env.sandbox.stub(autoFullscreenManager, 'selectBestCenteredInPortrait_');\n    autoFullscreenManager.register(entry);\n    mockOrientation('landscape');\n    autoFullscreenManager.onRotation_();\n    expect(enter).to.have.been.calledOnce;\n  });","file":"unit/test-video-rotate-to-fullscreen.js","skipped":false,"dir":"test"},{"name":"should not enter fullscreen if no video is centered in portrait","suites":[],"updatePoint":{"line":72,"column":69,"index":2042},"line":72,"code":"  it('should not enter fullscreen if no video is centered in portrait', () => {\n    const video = createVideo();\n    const entry = {\n      video\n    };\n    const enter = env.sandbox.stub(autoFullscreenManager, 'enter_');\n    mockCenteredVideo(null);\n    env.sandbox.stub(autoFullscreenManager, 'selectBestCenteredInPortrait_');\n    autoFullscreenManager.register(entry);\n    mockOrientation('landscape');\n    autoFullscreenManager.onRotation_();\n    expect(enter).to.not.have.been.called;\n  });","file":"unit/test-video-rotate-to-fullscreen.js","skipped":false,"dir":"test"},{"name":"should exit fullscreen on rotation","suites":[],"updatePoint":{"line":85,"column":40,"index":2508},"line":85,"code":"  it('should exit fullscreen on rotation', () => {\n    const video = createVideo();\n    const entry = {\n      video\n    };\n    const exit = env.sandbox.stub(autoFullscreenManager, 'exit_');\n    env.sandbox.stub(autoFullscreenManager, 'selectBestCenteredInPortrait_');\n    autoFullscreenManager.register(entry);\n    autoFullscreenManager.currentlyInFullscreen_ = entry;\n    mockOrientation('portrait');\n    autoFullscreenManager.onRotation_();\n    expect(exit).to.have.been.calledOnce;\n  });","file":"unit/test-video-rotate-to-fullscreen.js","skipped":false,"dir":"test"},{"name":"should not exit on rotation if no video was in fullscreen","suites":[],"updatePoint":{"line":98,"column":63,"index":3022},"line":98,"code":"  it('should not exit on rotation if no video was in fullscreen', () => {\n    const video = createVideo();\n    const entry = {\n      video\n    };\n    const exit = env.sandbox.stub(autoFullscreenManager, 'exit_');\n    env.sandbox.stub(autoFullscreenManager, 'selectBestCenteredInPortrait_');\n    autoFullscreenManager.register(entry);\n    autoFullscreenManager.currentlyInFullscreen_ = null;\n    mockOrientation('portrait');\n    autoFullscreenManager.onRotation_();\n    expect(exit).to.not.have.been.called;\n  });","file":"unit/test-video-rotate-to-fullscreen.js","skipped":false,"dir":"test"},{"name":"selects the only video playing manually amongst visible","suites":[],"updatePoint":{"line":111,"column":61,"index":3533},"line":111,"code":"  it('selects the only video playing manually amongst visible', async () => {\n    const video1 = createVideo();\n    const video2 = createVideo();\n    const video3 = createVideo();\n    env.sandbox.stub(Services.viewportForDoc(ampdoc), 'getSize').returns({\n      width: 1000,\n      height: 1000\n    });\n    const video3Entry = {\n      // Visible:\n      target: video3.element,\n      intersectionRatio: 1,\n      boundingClientRect: {\n        top: 400,\n        bottom: 600,\n        width: 300,\n        height: 200\n      }\n    };\n    const getPlayingState = env.sandbox.stub(autoFullscreenManager, 'getPlayingState_');\n    getPlayingState.withArgs(video1).returns(PlayingStates_Enum.PAUSED);\n    getPlayingState.withArgs(video2).returns(PlayingStates_Enum.PLAYING_AUTO);\n    getPlayingState.withArgs(video3).returns(PlayingStates_Enum.PLAYING_MANUAL);\n    autoFullscreenManager.register({\n      video: video1\n    });\n    autoFullscreenManager.register({\n      video: video2\n    });\n    autoFullscreenManager.register({\n      video: video3\n    });\n    const bestCenteredPromise = autoFullscreenManager.selectBestCenteredInPortrait_();\n    fireIntersection(video3Entry);\n    expect(await bestCenteredPromise).equal(video3);\n  });","file":"unit/test-video-rotate-to-fullscreen.js","skipped":false,"dir":"test"},{"name":"selects center-most video among those visible and playing","suites":[],"updatePoint":{"line":147,"column":63,"index":4758},"line":147,"code":"  it('selects center-most video among those visible and playing', async () => {\n    const video1 = createVideo();\n    const video2 = createVideo();\n    const video3 = createVideo();\n    env.sandbox.stub(Services.viewportForDoc(ampdoc), 'getSize').returns({\n      width: 1000,\n      height: 600\n    });\n    const video1Entry = {\n      // Visible:\n      target: video1.element,\n      intersectionRatio: 1,\n      boundingClientRect: {\n        top: 0,\n        bottom: 200,\n        width: 300,\n        height: 200\n      }\n    };\n    const video2Entry = {\n      // Visible:\n      target: video2.element,\n      intersectionRatio: 1,\n      boundingClientRect: {\n        top: 200,\n        bottom: 400,\n        width: 300,\n        height: 200\n      }\n    };\n    const video3Entry = {\n      // Visible:\n      target: video3.element,\n      intersectionRatio: 1,\n      boundingClientRect: {\n        top: 400,\n        bottom: 600,\n        width: 300,\n        height: 200\n      }\n    };\n    const getPlayingState = env.sandbox.stub(autoFullscreenManager, 'getPlayingState_');\n    getPlayingState.withArgs(video1).returns(PlayingStates_Enum.PLAYING_MANUAL);\n    getPlayingState.withArgs(video2).returns(PlayingStates_Enum.PLAYING_MANUAL);\n    getPlayingState.withArgs(video3).returns(PlayingStates_Enum.PLAYING_MANUAL);\n    autoFullscreenManager.register({\n      video: video1\n    });\n    autoFullscreenManager.register({\n      video: video2\n    });\n    autoFullscreenManager.register({\n      video: video3\n    });\n    const bestCenteredPromise = autoFullscreenManager.selectBestCenteredInPortrait_();\n    [video1Entry, video2Entry, video3Entry].forEach(fireIntersection);\n    expect(await bestCenteredPromise).to.equal(video2);\n  });","file":"unit/test-video-rotate-to-fullscreen.js","skipped":false,"dir":"test"},{"name":"selects top-most video if two videos are equally centered","suites":[],"updatePoint":{"line":205,"column":63,"index":6477},"line":205,"code":"  it('selects top-most video if two videos are equally centered', async () => {\n    const video1 = createVideo();\n    const video2 = createVideo();\n    env.sandbox.stub(Services.viewportForDoc(ampdoc), 'getSize').returns({\n      width: 1000,\n      height: 400\n    });\n    const video1Entry = {\n      // Visible:\n      target: video1.element,\n      intersectionRatio: 1,\n      boundingClientRect: {\n        top: 0,\n        bottom: 200,\n        width: 300,\n        height: 200\n      }\n    };\n    const video2Entry = {\n      // Visible:\n      target: video2.element,\n      intersectionRatio: 1,\n      boundingClientRect: {\n        top: 200,\n        bottom: 400,\n        width: 300,\n        height: 200\n      }\n    };\n    const getPlayingState = env.sandbox.stub(autoFullscreenManager, 'getPlayingState_');\n    getPlayingState.withArgs(video1).returns(PlayingStates_Enum.PLAYING_MANUAL);\n    getPlayingState.withArgs(video2).returns(PlayingStates_Enum.PLAYING_MANUAL);\n    autoFullscreenManager.register({\n      video: video1\n    });\n    autoFullscreenManager.register({\n      video: video2\n    });\n    const bestCenteredPromise = autoFullscreenManager.selectBestCenteredInPortrait_();\n    [video1Entry, video2Entry].forEach(fireIntersection);\n    expect(await bestCenteredPromise).to.equal(video1);\n  });","file":"unit/test-video-rotate-to-fullscreen.js","skipped":false,"dir":"test"},{"name":"selects the highest intersection ratio if two videos are visible","suites":[],"updatePoint":{"line":247,"column":70,"index":7786},"line":247,"code":"  it('selects the highest intersection ratio if two videos are visible', async () => {\n    const video1 = createVideo();\n    const video2 = createVideo();\n    env.sandbox.stub(Services.viewportForDoc(ampdoc), 'getSize').returns({\n      width: 1000,\n      height: 400\n    });\n    const video1Entry = {\n      target: video1.element,\n      intersectionRatio: 0.9,\n      boundingClientRect: {\n        top: -30,\n        bottom: 170,\n        width: 300,\n        height: 200\n      }\n    };\n    const video2Entry = {\n      // Visible:\n      target: video2.element,\n      intersectionRatio: 1,\n      boundingClientRect: {\n        top: 200,\n        bottom: 400,\n        width: 300,\n        height: 200\n      }\n    };\n    const getPlayingState = env.sandbox.stub(autoFullscreenManager, 'getPlayingState_');\n    getPlayingState.withArgs(video1).returns(PlayingStates_Enum.PLAYING_MANUAL);\n    getPlayingState.withArgs(video2).returns(PlayingStates_Enum.PLAYING_MANUAL);\n    autoFullscreenManager.register({\n      video: video1\n    });\n    autoFullscreenManager.register({\n      video: video2\n    });\n    const bestCenteredPromise = autoFullscreenManager.selectBestCenteredInPortrait_();\n    [video1Entry, video2Entry].forEach(fireIntersection);\n    expect(await bestCenteredPromise).to.equal(video2);\n  });","file":"unit/test-video-rotate-to-fullscreen.js","skipped":false,"dir":"test"},{"name":"should trigger a listener when a session ends","suites":[],"updatePoint":{"line":7,"column":51,"index":261},"line":7,"code":"  it('should trigger a listener when a session ends', () => {\n    const sessionSpy = env.sandbox.spy();\n    manager.onSessionEnd(sessionSpy);\n    manager.beginSession();\n    manager.endSession();\n    expect(sessionSpy).to.be.calledOnce;\n  });","file":"unit/test-video-session-manager.js","skipped":false,"dir":"test"},{"name":"should only begin a session once even after repeated calls","suites":[],"updatePoint":{"line":14,"column":64,"index":517},"line":14,"code":"  it('should only begin a session once even after repeated calls', () => {\n    const sessionSpy = env.sandbox.spy();\n    manager.onSessionEnd(sessionSpy);\n    manager.beginSession();\n    manager.beginSession();\n    manager.beginSession();\n    manager.endSession();\n    expect(sessionSpy).to.be.calledOnce;\n  });","file":"unit/test-video-session-manager.js","skipped":false,"dir":"test"},{"name":"should only end a session once even after repeated calls","suites":[],"updatePoint":{"line":23,"column":62,"index":827},"line":23,"code":"  it('should only end a session once even after repeated calls', () => {\n    const sessionSpy = env.sandbox.spy();\n    manager.onSessionEnd(sessionSpy);\n    manager.beginSession();\n    manager.beginSession();\n    manager.endSession();\n    manager.endSession();\n    manager.endSession();\n    expect(sessionSpy).to.be.calledOnce;\n  });","file":"unit/test-video-session-manager.js","skipped":false,"dir":"test"},{"name":"should return true if Viewer is trusted and has CID capability","suites":["isSupported"],"updatePoint":{"line":15,"column":70,"index":551},"line":15,"code":"    it('should return true if Viewer is trusted and has CID capability', () => {\n      viewerMock.isTrustedViewer.returns(Promise.resolve(true));\n      viewerMock.hasCapability.withArgs('cid').returns(true);\n      return expect(api.isSupported()).to.eventually.be.true;\n    });","file":"unit/test-viewer-cid-api.js","skipped":false,"dir":"test"},{"name":"should return false if Viewer has no CID capability","suites":["isSupported"],"updatePoint":{"line":20,"column":59,"index":818},"line":20,"code":"    it('should return false if Viewer has no CID capability', () => {\n      viewerMock.isTrustedViewer.returns(new Promise(() => {}));\n      viewerMock.hasCapability.withArgs('cid').returns(false);\n      return expect(api.isSupported()).to.eventually.be.false;\n    });","file":"unit/test-viewer-cid-api.js","skipped":false,"dir":"test"},{"name":"should return false if Viewer is not trusted","suites":["isSupported"],"updatePoint":{"line":25,"column":52,"index":1080},"line":25,"code":"    it('should return false if Viewer is not trusted', () => {\n      viewerMock.isTrustedViewer.returns(Promise.resolve(false));\n      viewerMock.hasCapability.withArgs('cid').returns(true);\n      return expect(api.isSupported()).to.eventually.be.false;\n    });","file":"unit/test-viewer-cid-api.js","skipped":false,"dir":"test"},{"name":"should use client ID API from api if everything great","suites":["getScopedCid"],"updatePoint":{"line":47,"column":61,"index":2009},"line":47,"code":"    it('should use client ID API from api if everything great', () => {\n      return verifyClientIdApiInUse(true);\n    });","file":"unit/test-viewer-cid-api.js","skipped":false,"dir":"test"},{"name":"should not use client ID API if no opt in meta tag","suites":["getScopedCid"],"updatePoint":{"line":50,"column":58,"index":2129},"line":50,"code":"    it('should not use client ID API if no opt in meta tag', () => {\n      return verifyClientIdApiInUse(false);\n    });","file":"unit/test-viewer-cid-api.js","skipped":false,"dir":"test"},{"name":"should not use client ID API if scope not allowlisted","suites":["getScopedCid"],"updatePoint":{"line":53,"column":61,"index":2253},"line":53,"code":"    it('should not use client ID API if scope not allowlisted', () => {\n      viewerMock.sendMessageAwaitResponse.withArgs('cid', {\n        'scope': 'NON_ALLOWLISTED_SCOPE',\n        'clientIdApi': false,\n        'canonicalOrigin': 'http://localhost:9876'\n      }).returns(Promise.resolve('client-id-from-viewer'));\n      return expect(api.getScopedCid(undefined, 'NON_ALLOWLISTED_SCOPE')).to.eventually.equal('client-id-from-viewer');\n    });","file":"unit/test-viewer-cid-api.js","skipped":false,"dir":"test"},{"name":"should return undefined if Viewer returns undefined","suites":["getScopedCid"],"updatePoint":{"line":61,"column":59,"index":2694},"line":61,"code":"    it('should return undefined if Viewer returns undefined', () => {\n      viewerMock.sendMessageAwaitResponse.returns(Promise.resolve());\n      return expect(api.getScopedCid('api-key', 'AMP_ECID_GOOGLE')).to.eventually.be.undefined;\n    });","file":"unit/test-viewer-cid-api.js","skipped":false,"dir":"test"},{"name":"should reject if Viewer rejects","suites":["getScopedCid"],"updatePoint":{"line":65,"column":39,"index":2918},"line":65,"code":"    it('should reject if Viewer rejects', () => {\n      viewerMock.sendMessageAwaitResponse.returns(Promise.reject('Client API error'));\n      return expect(api.getScopedCid('api-key', 'AMP_ECID_GOOGLE')).to.eventually.be.rejectedWith(/Client API error/);\n    });","file":"unit/test-viewer-cid-api.js","skipped":false,"dir":"test"},{"name":"should configure correctly based on ampdoc","suites":[],"updatePoint":{"line":129,"column":48,"index":3948},"line":129,"code":"  it('should configure correctly based on ampdoc', () => {\n    params['paddingTop'] = '17';\n    params['other'] = 'something';\n    const viewer = new ViewerImpl(ampdoc);\n    expect(viewer.getParam('paddingTop')).to.equal('17');\n    expect(viewer.getParam('other')).to.equal('something');\n  });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should expose viewer capabilities","suites":[],"updatePoint":{"line":136,"column":39,"index":4233},"line":136,"code":"  it('should expose viewer capabilities', () => {\n    params['cap'] = 'foo,bar';\n    const viewer = new ViewerImpl(ampdoc);\n    expect(viewer.hasCapability('foo')).to.be.true;\n    expect(viewer.hasCapability('bar')).to.be.true;\n    expect(viewer.hasCapability('other')).to.be.false;\n  });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should not clear fragment in non-embedded mode","suites":[],"updatePoint":{"line":143,"column":52,"index":4535},"line":143,"code":"  it('should not clear fragment in non-embedded mode', () => {\n    windowApi.parent = windowApi;\n    setUrl('http://www.example.com#test=1');\n    const viewer = new ViewerImpl(ampdoc);\n    expect(windowApi.history.replaceState).to.have.not.been.called;\n    expect(viewer.getParam('test')).to.equal('1');\n    expect(viewer.hasCapability('foo')).to.be.false;\n  });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should not clear fragment in embedded mode","suites":[],"updatePoint":{"line":151,"column":48,"index":4894},"line":151,"code":"  it('should not clear fragment in embedded mode', () => {\n    windowApi.parent = {};\n    setUrl('http://www.example.com#origin=g.com&test=1');\n    const viewer = new ViewerImpl(ampdoc);\n    expect(windowApi.history.replaceState).to.not.be.called;\n    expect(viewer.getParam('test')).to.equal('1');\n  });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should set ampshare fragment within custom tab","suites":[],"updatePoint":{"line":158,"column":52,"index":5203},"line":158,"code":"  it('should set ampshare fragment within custom tab', function* () {\n    windowApi.parent = windowApi;\n    setUrl('http://www.example.com/?amp_gsa=1&amp_js_v=a0');\n    // windowApi.location.href = 'http://www.example.com/';\n    // windowApi.location.search = '?amp_gsa=1&amp_js_v=a0';\n    // windowApi.location.hash = '';\n    const viewer = new ViewerImpl(ampdoc);\n    expect(viewer.isCctEmbedded()).to.be.true;\n    yield ampdoc.whenFirstVisible();\n    expect(windowApi.history.replaceState).to.be.calledWith({}, '', '#ampshare=http%3A%2F%2Fwww.example.com%2F');\n  });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should merge fragments within custom tab","suites":[],"updatePoint":{"line":169,"column":46,"index":5767},"line":169,"code":"  it('should merge fragments within custom tab', function* () {\n    windowApi.parent = windowApi;\n    setUrl('http://www.example.com/?amp_gsa=1&amp_js_v=a0#test=1');\n    const viewer = new ViewerImpl(ampdoc);\n    expect(viewer.getParam('test')).to.equal('1');\n    expect(viewer.isCctEmbedded()).to.be.true;\n    yield ampdoc.whenFirstVisible();\n    expect(windowApi.history.replaceState).to.be.calledWith({}, '', '#test=1&ampshare=http%3A%2F%2Fwww.example.com%2F');\n  });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should not duplicate ampshare when merging","suites":[],"updatePoint":{"line":178,"column":48,"index":6240},"line":178,"code":"  it('should not duplicate ampshare when merging', function* () {\n    windowApi.parent = windowApi;\n    setUrl('http://www.example.com/' + '?amp_gsa=1&amp_js_v=a0' + '#test=1&ampshare=old');\n    const viewer = new ViewerImpl(ampdoc);\n    expect(viewer.getParam('test')).to.equal('1');\n    expect(viewer.isCctEmbedded()).to.be.true;\n    yield ampdoc.whenFirstVisible();\n    expect(windowApi.history.replaceState).to.be.calledWith({}, '', '#test=1&ampshare=http%3A%2F%2Fwww.example.com%2F');\n  });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should remove multiple ampshares when merging","suites":[],"updatePoint":{"line":187,"column":51,"index":6739},"line":187,"code":"  it('should remove multiple ampshares when merging', function* () {\n    windowApi.parent = windowApi;\n    setUrl('http://www.example.com/?amp_gsa=1&amp_js_v=a0' + '#test=1&ampshare=a&ampshare=b&ampshare=c');\n    const viewer = new ViewerImpl(ampdoc);\n    expect(viewer.getParam('test')).to.equal('1');\n    expect(viewer.isCctEmbedded()).to.be.true;\n    yield ampdoc.whenFirstVisible();\n    expect(windowApi.history.replaceState).to.be.calledWith({}, '', '#test=1&ampshare=http%3A%2F%2Fwww.example.com%2F');\n  });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should remove extra ampshare even when it's first","suites":[],"updatePoint":{"line":196,"column":55,"index":7257},"line":196,"code":"  it(\"should remove extra ampshare even when it's first\", function* () {\n    windowApi.parent = windowApi;\n    setUrl('http://www.example.com/' + '?amp_gsa=1&amp_js_v=a0' + '#ampshare=old&test=1');\n    // windowApi.location.href = 'http://www.example.com/#ampshare=old&test=1';\n    // windowApi.location.hash = '#ampshare=old&test=1';\n    // windowApi.location.search = '?amp_gsa=1&amp_js_v=a0';\n    // params['test'] = '1';\n    // params['ampshare'] = 'old';\n    const viewer = new ViewerImpl(ampdoc);\n    expect(viewer.getParam('test')).to.equal('1');\n    expect(viewer.isCctEmbedded()).to.be.true;\n    yield ampdoc.whenFirstVisible();\n    expect(windowApi.history.replaceState).to.be.calledWith({}, '', '#ampshare=http%3A%2F%2Fwww.example.com%2F&test=1');\n  });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should remove extra ampshare even when it's sandwiched","suites":[],"updatePoint":{"line":210,"column":60,"index":8027},"line":210,"code":"  it(\"should remove extra ampshare even when it's sandwiched\", function* () {\n    windowApi.parent = windowApi;\n    setUrl('http://www.example.com/' + '?amp_gsa=1&amp_js_v=a0' + '#note=ok&ampshare=old&test=1');\n    const viewer = new ViewerImpl(ampdoc);\n    expect(viewer.getParam('test')).to.equal('1');\n    expect(viewer.getParam('note')).to.equal('ok');\n    expect(viewer.isCctEmbedded()).to.be.true;\n    yield ampdoc.whenFirstVisible();\n    expect(windowApi.history.replaceState).to.be.calledWith({}, '', '#note=ok&ampshare=http%3A%2F%2Fwww.example.com%2F&test=1');\n  });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should clear fragment when click param is present","suites":[],"updatePoint":{"line":220,"column":55,"index":8598},"line":220,"code":"  it('should clear fragment when click param is present', () => {\n    windowApi.parent = windowApi;\n    setUrl('http://www.example.com/#click=abc');\n    const viewer = new ViewerImpl(ampdoc);\n    expect(windowApi.history.replaceState).to.be.calledOnce;\n    const replace = windowApi.history.replaceState.lastCall;\n    expect(replace.args).to.jsonEqual([{}, '', 'http://www.example.com/']);\n    expect(viewer.getParam('click')).to.equal('abc');\n  });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should restore fragment within custom tab with click param","suites":[],"updatePoint":{"line":229,"column":64,"index":9057},"line":229,"code":"  it('should restore fragment within custom tab with click param', function* () {\n    windowApi.parent = windowApi;\n    setUrl('http://www.example.com/?amp_gsa=1&amp_js_v=a0#click=abc');\n    const viewer = new ViewerImpl(ampdoc);\n    expect(windowApi.history.replaceState).to.be.calledWith({}, '', 'http://www.example.com/?amp_gsa=1&amp_js_v=a0');\n    expect(viewer.getParam('click')).to.equal('abc');\n    yield ampdoc.whenFirstVisible();\n    expect(windowApi.history.replaceState).to.be.calledWith({}, '', '#ampshare=http%3A%2F%2Fwww.example.com%2F');\n  });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should return promise that resolve on visible","suites":[],"updatePoint":{"line":238,"column":51,"index":9603},"line":238,"code":"  it('should return promise that resolve on visible', function* () {\n    const viewer = new ViewerImpl(ampdoc);\n    expect(ampdoc.isVisible()).to.be.true;\n    let promise = ampdoc.whenNextVisible();\n    yield promise;\n    viewer.receiveMessage('visibilitychange', {\n      state: 'hidden'\n    });\n    promise = ampdoc.whenNextVisible();\n    expect(ampdoc.isVisible()).to.be.false;\n    viewer.receiveMessage('visibilitychange', {\n      state: 'visible'\n    });\n    return promise;\n  });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should initialize firstVisibleTime when doc becomes visible","suites":[],"line":255,"code":"  it.skip('should initialize firstVisibleTime when doc becomes visible', () => {","file":"unit/test-viewer.js","skipped":true,"dir":"test"},{"name":"should receive viewport event","suites":[],"updatePoint":{"line":289,"column":35,"index":11290},"line":289,"code":"  it('should receive viewport event', () => {\n    let viewportEvent = null;\n    viewer.onMessage('viewport', event => {\n      viewportEvent = event;\n    });\n    viewer.receiveMessage('viewport', {\n      paddingTop: 19\n    });\n    expect(viewportEvent).to.not.equal(null);\n  });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should replace URL for the same non-proxy origin","suites":["replaceUrl"],"updatePoint":{"line":300,"column":56,"index":11622},"line":300,"code":"    it('should replace URL for the same non-proxy origin', () => {\n      const fragment = '#replaceUrl=http://www.example.com/two%3Fa%3D1&b=1';\n      setUrl('http://www.example.com/one' + fragment);\n      const viewer = new ViewerImpl(ampdoc);\n      viewer.replaceUrl(viewer.getParam('replaceUrl'));\n      expect(windowApi.history.replaceState).to.be.calledOnce;\n      expect(windowApi.history.replaceState).to.be.calledWith({}, '', 'http://www.example.com/two?a=1' + fragment);\n      expect(ampdoc.getUrl()).to.equal('http://www.example.com/two?a=1' + fragment);\n      expect(windowApi.location.originalHref).to.equal('http://www.example.com/one' + fragment);\n    });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should ignore replacement fragment","suites":["replaceUrl"],"updatePoint":{"line":310,"column":42,"index":12277},"line":310,"code":"    it('should ignore replacement fragment', () => {\n      const fragment = '#replaceUrl=http://www.example.com/two%23b=2&b=1';\n      setUrl('http://www.example.com/one' + fragment);\n      const viewer = new ViewerImpl(ampdoc);\n      viewer.replaceUrl(viewer.getParam('replaceUrl'));\n      expect(windowApi.history.replaceState).to.be.calledOnce;\n      expect(windowApi.history.replaceState).to.be.calledWith({}, '', 'http://www.example.com/two' + fragment);\n      expect(windowApi.location.originalHref).to.equal('http://www.example.com/one' + fragment);\n    });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should replace relative URL for the same non-proxy origin","suites":["replaceUrl"],"updatePoint":{"line":319,"column":65,"index":12864},"line":319,"code":"    it('should replace relative URL for the same non-proxy origin', () => {\n      const fragment = '#replaceUrl=/two&b=1';\n      setUrl(removeFragment(window.location.href) + fragment);\n      const viewer = new ViewerImpl(ampdoc);\n      viewer.replaceUrl(viewer.getParam('replaceUrl'));\n      expect(windowApi.history.replaceState).to.be.calledOnce;\n      expect(windowApi.history.replaceState).to.be.calledWith({}, '', window.location.origin + '/two' + fragment);\n      expect(windowApi.location.originalHref).to.equal(removeFragment(window.location.href) + fragment);\n    });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should fail to replace URL for a wrong non-proxy origin","suites":["replaceUrl"],"updatePoint":{"line":328,"column":63,"index":13440},"line":328,"code":"    it('should fail to replace URL for a wrong non-proxy origin', () => {\n      const fragment = '#replaceUrl=http://other.example.com/two&b=1';\n      setUrl('http://www.example.com/one' + fragment);\n      const viewer = new ViewerImpl(ampdoc);\n      viewer.replaceUrl(viewer.getParam('replaceUrl'));\n      expect(windowApi.history.replaceState).to.not.be.called;\n      expect(windowApi.location.originalHref).to.be.undefined;\n    });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should tolerate errors when trying to replace URL","suites":["replaceUrl"],"updatePoint":{"line":336,"column":57,"index":13869},"line":336,"code":"    it('should tolerate errors when trying to replace URL', () => {\n      const fragment = '#replaceUrl=http://www.example.com/two&b=1';\n      setUrl('http://www.example.com/one' + fragment);\n      windowApi.history.replaceState.restore();\n      env.sandbox.stub(windowApi.history, 'replaceState').callsFake(() => {\n        throw new Error('intentional');\n      });\n      const viewer = new ViewerImpl(ampdoc);\n      expect(() => {\n        viewer.replaceUrl(viewer.getParam('replaceUrl'));\n      }).to.not.throw();\n      expect(windowApi.location.originalHref).to.be.undefined;\n    });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should replace URL for the same source origin on proxy","suites":["replaceUrl"],"updatePoint":{"line":349,"column":62,"index":14460},"line":349,"code":"    it('should replace URL for the same source origin on proxy', () => {\n      const fragment = '#replaceUrl=https://cdn.ampproject.org/c/www.example.com/two&b=1';\n      setUrl('https://cdn.ampproject.org/c/www.example.com/one' + fragment);\n      const viewer = new ViewerImpl(ampdoc);\n      viewer.replaceUrl(viewer.getParam('replaceUrl'));\n      expect(windowApi.history.replaceState).to.be.calledOnce;\n      expect(windowApi.history.replaceState).to.be.calledWith({}, '', 'https://cdn.ampproject.org/c/www.example.com/two' + fragment);\n      expect(windowApi.location.originalHref).to.equal('https://cdn.ampproject.org/c/www.example.com/one' + fragment);\n    });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should fail replace URL for wrong source origin on proxy","suites":["replaceUrl"],"updatePoint":{"line":358,"column":64,"index":15128},"line":358,"code":"    it('should fail replace URL for wrong source origin on proxy', () => {\n      const fragment = '#replaceUrl=https://cdn.ampproject.org/c/other.example.com/two&b=1';\n      setUrl('https://cdn.ampproject.org/c/www.example.com/one' + fragment);\n      const viewer = new ViewerImpl(ampdoc);\n      viewer.replaceUrl(viewer.getParam('replaceUrl'));\n      expect(windowApi.history.replaceState).to.not.be.called;\n      expect(windowApi.location.originalHref).to.be.undefined;\n    });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should NOT replace URL in shadow doc","suites":["replaceUrl"],"updatePoint":{"line":366,"column":44,"index":15588},"line":366,"code":"    it('should NOT replace URL in shadow doc', () => {\n      const fragment = '#replaceUrl=http://www.example.com/two&b=1';\n      setUrl('http://www.example.com/one' + fragment);\n      env.sandbox.stub(ampdoc, 'isSingleDoc').callsFake(() => false);\n      const viewer = new ViewerImpl(ampdoc);\n      viewer.replaceUrl(viewer.getParam('replaceUrl'));\n      expect(windowApi.history.replaceState).to.not.be.called;\n    });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should change visibilityState","suites":["should receive the visibilitychange event"],"updatePoint":{"line":376,"column":37,"index":16072},"line":376,"code":"    it('should change visibilityState', () => {\n      viewer.receiveMessage('visibilitychange', {\n        state: 'paused'\n      });\n      expect(ampdoc.getVisibilityState()).to.equal('paused');\n    });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should receive \"paused\" visibilityState","suites":["should receive the visibilitychange event"],"updatePoint":{"line":382,"column":47,"index":16284},"line":382,"code":"    it('should receive \"paused\" visibilityState', () => {\n      viewer.receiveMessage('visibilitychange', {\n        state: 'paused'\n      });\n      expect(ampdoc.getVisibilityState()).to.equal('paused');\n    });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should receive \"inactive\" visibilityState","suites":["should receive the visibilitychange event"],"updatePoint":{"line":388,"column":49,"index":16498},"line":388,"code":"    it('should receive \"inactive\" visibilityState', () => {\n      viewer.receiveMessage('visibilitychange', {\n        state: 'inactive'\n      });\n      expect(ampdoc.getVisibilityState()).to.equal('inactive');\n    });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should parse \"hidden\" as \"prerender\" before first visible","suites":["should receive the visibilitychange event"],"updatePoint":{"line":394,"column":65,"index":16732},"line":394,"code":"    it('should parse \"hidden\" as \"prerender\" before first visible', () => {\n      env.sandbox.stub(ampdoc, 'getLastVisibleTime').callsFake(() => null);\n      viewer.receiveMessage('visibilitychange', {\n        state: 'hidden'\n      });\n      expect(ampdoc.getVisibilityState()).to.equal('prerender');\n    });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should parse \"hidden\" as \"inactive\" after first visible","suites":["should receive the visibilitychange event"],"updatePoint":{"line":401,"column":63,"index":17039},"line":401,"code":"    it('should parse \"hidden\" as \"inactive\" after first visible', () => {\n      env.sandbox.stub(ampdoc, 'getLastVisibleTime').callsFake(() => 1);\n      viewer.receiveMessage('visibilitychange', {\n        state: 'hidden'\n      });\n      expect(ampdoc.getVisibilityState()).to.equal('inactive');\n    });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should reject unknown values","suites":["should receive the visibilitychange event"],"updatePoint":{"line":408,"column":36,"index":17315},"line":408,"code":"    it('should reject unknown values', () => {\n      viewer.receiveMessage('visibilitychange', {\n        state: 'paused'\n      });\n      allowConsoleError(() => {\n        expect(() => {\n          viewer.receiveMessage('visibilitychange', {\n            state: 'what is this'\n          });\n        }).to.throw('Assertion failed');\n      });\n      expect(ampdoc.getVisibilityState()).to.equal('paused');\n    });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should be inactive when the viewer tells us we are inactive","suites":["should receive the visibilitychange event"],"updatePoint":{"line":421,"column":67,"index":17755},"line":421,"code":"    it('should be inactive when the viewer tells us we are inactive', () => {\n      viewer.receiveMessage('visibilitychange', {\n        state: 'inactive'\n      });\n      expect(ampdoc.getVisibilityState()).to.equal('inactive');\n      changeVisibility('hidden');\n      expect(ampdoc.getVisibilityState()).to.equal('inactive');\n    });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should be prerender when the viewer tells us we are prerender","suites":["should receive the visibilitychange event"],"updatePoint":{"line":429,"column":69,"index":18091},"line":429,"code":"    it('should be prerender when the viewer tells us we are prerender', () => {\n      viewer.receiveMessage('visibilitychange', {\n        state: 'prerender'\n      });\n      expect(ampdoc.getVisibilityState()).to.equal('prerender');\n      changeVisibility('visible');\n      expect(ampdoc.getVisibilityState()).to.equal('prerender');\n    });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should be hidden when the browser document is hidden","suites":["should receive the visibilitychange event"],"updatePoint":{"line":437,"column":60,"index":18422},"line":437,"code":"    it('should be hidden when the browser document is hidden', () => {\n      changeVisibility('hidden');\n      viewer.receiveMessage('visibilitychange', {\n        state: 'visible'\n      });\n      expect(ampdoc.getVisibilityState()).to.equal('hidden');\n      viewer.receiveMessage('visibilitychange', {\n        state: 'paused'\n      });\n      expect(ampdoc.getVisibilityState()).to.equal('hidden');\n      viewer.receiveMessage('visibilitychange', {\n        state: 'visible'\n      });\n      expect(ampdoc.getVisibilityState()).to.equal('hidden');\n    });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should be visible when the browser document is visible","suites":["should receive the visibilitychange event"],"updatePoint":{"line":459,"column":62,"index":19263},"line":459,"code":"    it('should be visible when the browser document is visible', () => {\n      changeVisibility('visible');\n      viewer.receiveMessage('visibilitychange', {\n        state: 'visible'\n      });\n      expect(ampdoc.getVisibilityState()).to.equal('visible');\n    });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should change visibility on visibilitychange event","suites":["should receive the visibilitychange event"],"updatePoint":{"line":466,"column":58,"index":19523},"line":466,"code":"    it('should change visibility on visibilitychange event', () => {\n      changeVisibility('hidden');\n      expect(ampdoc.getVisibilityState()).to.equal('hidden');\n      changeVisibility('visible');\n      expect(ampdoc.getVisibilityState()).to.equal('visible');\n      clock.tick(1);\n      viewer.receiveMessage('visibilitychange', {\n        state: 'hidden'\n      });\n      changeVisibility('hidden');\n      expect(ampdoc.getVisibilityState()).to.equal('inactive');\n      changeVisibility('visible');\n      expect(ampdoc.getVisibilityState()).to.equal('inactive');\n      viewer.receiveMessage('visibilitychange', {\n        state: 'inactive'\n      });\n      changeVisibility('hidden');\n      expect(ampdoc.getVisibilityState()).to.equal('inactive');\n      changeVisibility('visible');\n      expect(ampdoc.getVisibilityState()).to.equal('inactive');\n      viewer.receiveMessage('visibilitychange', {\n        state: 'paused'\n      });\n      changeVisibility('hidden');\n      expect(ampdoc.getVisibilityState()).to.equal('hidden');\n      changeVisibility('visible');\n      expect(ampdoc.getVisibilityState()).to.equal('paused');\n      viewer.receiveMessage('visibilitychange', {\n        state: 'visible'\n      });\n      changeVisibility('hidden');\n      expect(ampdoc.getVisibilityState()).to.equal('hidden');\n      changeVisibility('visible');\n      expect(ampdoc.getVisibilityState()).to.equal('visible');\n    });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should become visible on touchstart","suites":["User action makes doc visible"],"updatePoint":{"line":516,"column":43,"index":21565},"line":516,"code":"    it('should become visible on touchstart', eventTest.bind(null, 'touchstart'));","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should become visible on mousedown","suites":["User action makes doc visible"],"updatePoint":{"line":517,"column":42,"index":21647},"line":517,"code":"    it('should become visible on mousedown', eventTest.bind(null, 'mousedown'));","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should become visible on keydown","suites":["User action makes doc visible"],"updatePoint":{"line":518,"column":40,"index":21726},"line":518,"code":"    it('should become visible on keydown', eventTest.bind(null, 'keydown'));","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should not become visible when not a single doc","suites":["User action makes doc visible"],"updatePoint":{"line":519,"column":55,"index":21818},"line":519,"code":"    it('should not become visible when not a single doc', () => {\n      env.sandbox.stub(ampdoc, 'isSingleDoc').callsFake(() => false);\n      ampdoc.overrideVisibilityState('prerender');\n      viewer = new ViewerImpl(ampdoc);\n      expect(ampdoc.getVisibilityState()).to.equal('prerender');\n      expect(events.touchstart).to.be.undefined;\n      expect(events.keydown).to.be.undefined;\n      expect(events.mousedown).to.be.undefined;\n    });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should not expect messaging","suites":["Messaging not embedded"],"updatePoint":{"line":530,"column":35,"index":22291},"line":530,"code":"    it('should not expect messaging', () => {\n      expect(viewer.messagingReadyPromise_).to.be.null;\n    });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should fail sendMessageAwaitResponse","suites":["Messaging not embedded"],"updatePoint":{"line":533,"column":44,"index":22410},"line":533,"code":"    it('should fail sendMessageAwaitResponse', () => {\n      return viewer.sendMessageAwaitResponse('event', {}).then(() => {\n        throw new Error('should not succeed');\n      }, error => {\n        expect(error.message).to.match(/No messaging channel/);\n      });\n    });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should do nothing in sendMessage but not fail","suites":["Messaging not embedded"],"updatePoint":{"line":540,"column":53,"index":22694},"line":540,"code":"    it('should do nothing in sendMessage but not fail', () => {\n      viewer.sendMessage('event', {});\n      expect(viewer.messageQueue_.length).to.equal(0);\n    });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should post broadcast event but not fail","suites":["Messaging not embedded"],"updatePoint":{"line":544,"column":48,"index":22855},"line":544,"code":"    it('should post broadcast event but not fail', () => {\n      viewer.broadcast({\n        type: 'type1'\n      });\n      expect(viewer.messageQueue_.length).to.equal(0);\n    });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should receive broadcast event","suites":["Messaging embedded"],"updatePoint":{"line":556,"column":38,"index":23170},"line":556,"code":"    it('should receive broadcast event', () => {\n      let broadcastMessage = null;\n      viewer.onBroadcast(message => {\n        broadcastMessage = message;\n      });\n      viewer.receiveMessage('broadcast', {\n        type: 'type1'\n      });\n      expect(broadcastMessage).to.exist;\n      expect(broadcastMessage.type).to.equal('type1');\n    });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should post broadcast event","suites":["Messaging embedded"],"updatePoint":{"line":567,"column":35,"index":23514},"line":567,"code":"    it('should post broadcast event', () => {\n      const delivered = [];\n      viewer.setMessageDeliverer((eventType, data) => {\n        delivered.push({\n          eventType,\n          data\n        });\n        return Promise.resolve();\n      }, 'https://www.example.com');\n      viewer.broadcast({\n        type: 'type1'\n      });\n      expect(viewer.messageQueue_.length).to.equal(0);\n      return viewer.messagingReadyPromise_.then(() => {\n        expect(delivered.length).to.equal(1);\n        const m = delivered[0];\n        expect(m.eventType).to.equal('broadcast');\n        expect(m.data.type).to.equal('type1');\n      });\n    });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should post broadcast event but not fail w/o messaging","suites":["Messaging embedded"],"updatePoint":{"line":587,"column":62,"index":24177},"line":587,"code":"    it('should post broadcast event but not fail w/o messaging', () => {\n      expectAsyncConsoleError(/No messaging channel/);\n      const result = viewer.broadcast({\n        type: 'type1'\n      });\n      expect(viewer.messageQueue_.length).to.equal(0);\n      clock.tick(20001);\n      return expect(result).eventually.to.be.false;\n    });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"sendMessageAwaitResponse should wait for messaging channel","suites":["Messaging embedded"],"updatePoint":{"line":596,"column":66,"index":24521},"line":596,"code":"    it('sendMessageAwaitResponse should wait for messaging channel', () => {\n      let mResolved = false;\n      const m = viewer.sendMessageAwaitResponse('event', {}).then(() => {\n        mResolved = true;\n      });\n      return Promise.resolve().then(() => {\n        // Not resolved yet.\n        expect(mResolved).to.be.false;\n\n        // Set message deliverer.\n        viewer.setMessageDeliverer(() => {\n          return Promise.resolve();\n        }, 'https://www.example.com');\n        expect(mResolved).to.be.false;\n        return m;\n      }).then(() => {\n        // All resolved now.\n        expect(mResolved).to.be.true;\n      });\n    });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should timeout messaging channel","suites":["Messaging embedded"],"updatePoint":{"line":616,"column":40,"index":25140},"line":616,"code":"    it('should timeout messaging channel', () => {\n      expectAsyncConsoleError(/No messaging channel/);\n      let mResolved = false;\n      const m = viewer.sendMessageAwaitResponse('event', {}).then(() => {\n        mResolved = true;\n      });\n      return Promise.resolve().then(() => {\n        // Not resolved yet.\n        expect(mResolved).to.be.false;\n\n        // Timeout.\n        clock.tick(20001);\n        return m;\n      }).then(() => {\n        throw new Error('must never be here');\n      }, () => {\n        // Not resolved ever.\n        expect(mResolved).to.be.false;\n      });\n    });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should send event when deliverer is set","suites":["Messaging embedded","sendMessage"],"updatePoint":{"line":637,"column":49,"index":25781},"line":637,"code":"      it('should send event when deliverer is set', () => {\n        const delivered = [];\n        viewer.setMessageDeliverer((eventType, data) => {\n          delivered.push({\n            eventType,\n            data\n          });\n          return Promise.resolve();\n        }, 'https://www.example.com');\n        viewer.sendMessage('event', {\n          value: 1\n        });\n        expect(viewer.messageQueue_.length).to.equal(0);\n        expect(delivered.length).to.equal(1);\n        expect(delivered[0].eventType).to.equal('event');\n      });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should queue non-dupe events","suites":["Messaging embedded","sendMessage with cancelUnsent"],"updatePoint":{"line":655,"column":38,"index":26376},"line":655,"code":"      it('should queue non-dupe events', () => {\n        viewer.sendMessage('event-a', {\n          value: 1\n        }, /* cancelUnsent*/true);\n        viewer.sendMessage('event-b', {\n          value: 2\n        }, /* cancelUnsent*/true);\n        expect(viewer.messageQueue_.length).to.equal(2);\n        expect(viewer.messageQueue_[0].eventType).to.equal('event-a');\n        expect(viewer.messageQueue_[0].data.value).to.equal(1);\n        expect(viewer.messageQueue_[1].eventType).to.equal('event-b');\n        expect(viewer.messageQueue_[1].data.value).to.equal(2);\n      });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should queue dupe events","suites":["Messaging embedded","sendMessage with cancelUnsent"],"updatePoint":{"line":668,"column":34,"index":26946},"line":668,"code":"      it('should queue dupe events', () => {\n        viewer.sendMessage('event', {\n          value: 1\n        }, /* cancelUnsent*/true);\n        viewer.sendMessage('event', {\n          value: 2\n        }, /* cancelUnsent*/true);\n        expect(viewer.messageQueue_.length).to.equal(1);\n        expect(viewer.messageQueue_[0].eventType).to.equal('event');\n        expect(viewer.messageQueue_[0].data.value).to.equal(2);\n      });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should dequeue events when deliverer is set","suites":["Messaging embedded","sendMessage with cancelUnsent"],"updatePoint":{"line":679,"column":53,"index":27394},"line":679,"code":"      it('should dequeue events when deliverer is set', () => {\n        viewer.sendMessage('event-a', {\n          value: 1\n        }, /* cancelUnsent*/true);\n        viewer.sendMessage('event-b', {\n          value: 2\n        }, /* cancelUnsent*/true);\n        expect(viewer.messageQueue_.length).to.equal(2);\n        const delivered = [];\n        viewer.setMessageDeliverer((eventType, data) => {\n          delivered.push({\n            eventType,\n            data\n          });\n          return Promise.resolve();\n        }, 'https://www.example.com');\n        expect(viewer.messageQueue_.length).to.equal(0);\n        expect(delivered.length).to.equal(2);\n        expect(delivered[0].eventType).to.equal('event-a');\n        expect(delivered[1].eventType).to.equal('event-b');\n      });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should return undefined","suites":["Messaging embedded","sendMessage with cancelUnsent"],"updatePoint":{"line":700,"column":33,"index":28160},"line":700,"code":"      it('should return undefined', () => {\n        const response = viewer.sendMessage('event', {\n          value: 1\n        }, /* cancelUnsent */true);\n        expect(response).to.be.undefined;\n      });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should send event when deliverer is set","suites":["Messaging embedded","sendMessageAwaitResponse"],"updatePoint":{"line":708,"column":49,"index":28439},"line":708,"code":"      it('should send event when deliverer is set', () => {\n        const delivered = [];\n        viewer.setMessageDeliverer((eventType, data) => {\n          delivered.push({\n            eventType,\n            data\n          });\n          return Promise.resolve();\n        }, 'https://www.example.com');\n        viewer.sendMessageAwaitResponse('event', {\n          value: 'foo'\n        }).then(() => {\n          expect(viewer.messageQueue_.length).to.equal(0);\n          expect(delivered.length).to.equal(1);\n          expect(delivered[0].eventType).to.equal('event');\n        });\n      });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should send queued messages","suites":["Messaging embedded","sendMessageAwaitResponse with cancelUnsent"],"updatePoint":{"line":727,"column":37,"index":29093},"line":727,"code":"      it('should send queued messages', () => {\n        viewer.sendMessageAwaitResponse('event-a', {\n          value: 1\n        }, /* cancelUnsent */true);\n        viewer.sendMessageAwaitResponse('event-b', {\n          value: 2\n        }, /* cancelUnsent */true);\n        viewer.sendMessageAwaitResponse('event-a', {\n          value: 3\n        }, /* cancelUnsent */true);\n        const delivererSpy = env.sandbox.stub();\n        delivererSpy.returns(Promise.resolve());\n        viewer.setMessageDeliverer(delivererSpy, 'https://www.example.com');\n        env.sandbox.assert.callOrder(delivererSpy.withArgs('event-b', {\n          value: 2\n        }, true), delivererSpy.withArgs('event-a', {\n          value: 3\n        }, true));\n        expect(delivererSpy).to.not.be.calledWith('event-a', {\n          value: 1\n        }, true);\n        viewer.sendMessageAwaitResponse('event-a', {\n          value: 4\n        }, /* cancelUnsent */true);\n        expect(delivererSpy).to.be.calledWith('event-a', {\n          value: 4\n        }, true);\n      });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should return promise that resolves on response","suites":["Messaging embedded","sendMessageAwaitResponse with cancelUnsent"],"updatePoint":{"line":755,"column":57,"index":30156},"line":755,"code":"      it('should return promise that resolves on response', () => {\n        const response1 = viewer.sendMessageAwaitResponse('event-a', {\n          value: 1\n        }, /* cancelUnsent */true);\n        const response2 = viewer.sendMessageAwaitResponse('event-a', {\n          value: 2\n        }, /* cancelUnsent */true);\n        const delivererSpy = env.sandbox.stub();\n        delivererSpy.withArgs('event-a', {\n          value: 2\n        }, true).returns(Promise.resolve('result-2'));\n        delivererSpy.withArgs('event-a', {\n          value: 3\n        }, true).returns(Promise.resolve('result-3'));\n        viewer.setMessageDeliverer(delivererSpy, 'https://www.example.com');\n        const response3 = viewer.sendMessageAwaitResponse('event-a', {\n          value: 3\n        }, /* cancelUnsent */true);\n        return expect(Promise.all([response1, response2, response3])).to.eventually.deep.equal(['result-2', 'result-2', 'result-3']);\n      });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should NOT be embedded when not iframed","suites":["isEmbedded"],"updatePoint":{"line":778,"column":47,"index":31143},"line":778,"code":"    it('should NOT be embedded when not iframed', () => {\n      windowApi.parent = windowApi;\n      params = {\n        'origin': 'g.com'\n      };\n      expect(new ViewerImpl(ampdoc).isEmbedded()).to.be.false;\n    });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should be embedded when iframed w/ \"origin\" in URL hash","suites":["isEmbedded"],"updatePoint":{"line":785,"column":63,"index":31376},"line":785,"code":"    it('should be embedded when iframed w/ \"origin\" in URL hash', () => {\n      windowApi.parent = {};\n      params = {\n        'origin': 'g.com'\n      };\n      expect(new ViewerImpl(ampdoc).isEmbedded()).to.be.true;\n    });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should be embedded when iframed w/ \"visibilityState\"","suites":["isEmbedded"],"updatePoint":{"line":792,"column":60,"index":31598},"line":792,"code":"    it('should be embedded when iframed w/ \"visibilityState\"', () => {\n      windowApi.parent = {};\n      params = {\n        'visibilityState': 'hidden'\n      };\n      expect(new ViewerImpl(ampdoc).isEmbedded()).to.be.true;\n    });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should NOT be embedded when iframed w/o \"origin\" param","suites":["isEmbedded"],"updatePoint":{"line":799,"column":62,"index":31832},"line":799,"code":"    it('should NOT be embedded when iframed w/o \"origin\" param', () => {\n      windowApi.parent = {};\n      params = {};\n      expect(new ViewerImpl(ampdoc).isEmbedded()).to.be.false;\n    });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should be embedded with \"webview=1\" param","suites":["isEmbedded"],"updatePoint":{"line":804,"column":49,"index":32011},"line":804,"code":"    it('should be embedded with \"webview=1\" param', () => {\n      windowApi.parent = windowApi;\n      params = {\n        'webview': '1'\n      };\n      expect(new ViewerImpl(ampdoc).isEmbedded()).to.be.true;\n    });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should be embedded with query param","suites":["isEmbedded"],"updatePoint":{"line":811,"column":43,"index":32220},"line":811,"code":"    it('should be embedded with query param', () => {\n      windowApi.parent = {};\n      windowApi.location.search = '?amp_js_v=1';\n      expect(new ViewerImpl(ampdoc).isEmbedded()).to.be.true;\n    });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should be embedded when isCctEmbedded","suites":["isEmbedded"],"updatePoint":{"line":816,"column":45,"index":32424},"line":816,"code":"    it('should be embedded when isCctEmbedded', () => {\n      windowApi.parent = {};\n      windowApi.location.search = '?amp_gsa=1&amp_js_v=a0';\n      expect(new ViewerImpl(ampdoc).isEmbedded()).to.be.true;\n    });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should be webview w/ \"webview=1\"","suites":["isWebviewEmbedded"],"updatePoint":{"line":823,"column":40,"index":32680},"line":823,"code":"    it('should be webview w/ \"webview=1\"', () => {\n      windowApi.parent = windowApi;\n      params = {\n        'webview': '1'\n      };\n      expect(new ViewerImpl(ampdoc).isWebviewEmbedded()).to.be.true;\n    });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should NOT be webview w/o \"webview=1\"","suites":["isWebviewEmbedded"],"updatePoint":{"line":830,"column":45,"index":32898},"line":830,"code":"    it('should NOT be webview w/o \"webview=1\"', () => {\n      windowApi.parent = windowApi;\n      params = {\n        'foo': '1'\n      };\n      expect(new ViewerImpl(ampdoc).isWebviewEmbedded()).to.be.false;\n    });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should NOT be webview w/ \"webview=0\"","suites":["isWebviewEmbedded"],"updatePoint":{"line":837,"column":44,"index":33112},"line":837,"code":"    it('should NOT be webview w/ \"webview=0\"', () => {\n      windowApi.parent = windowApi;\n      params = {\n        'webview': '0'\n      };\n      expect(new ViewerImpl(ampdoc).isWebviewEmbedded()).to.be.false;\n    });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should NOT be webview if iframed regardless of \"webview=1\"","suites":["isWebviewEmbedded"],"updatePoint":{"line":844,"column":66,"index":33352},"line":844,"code":"    it('should NOT be webview if iframed regardless of \"webview=1\"', () => {\n      windowApi.parent = {};\n      params = {\n        'webview': '1'\n      };\n      expect(new ViewerImpl(ampdoc).isEmbedded()).to.be.false;\n    });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should be CCT embedded with \"amp_gsa=1\" and \"amp_js_v=a\\d*\"","suites":["isCctEmbedded"],"updatePoint":{"line":853,"column":68,"index":33622},"line":853,"code":"    it('should be CCT embedded with \"amp_gsa=1\" and \"amp_js_v=a\\\\d*\"', () => {\n      windowApi.parent = windowApi;\n      windowApi.location.search = '?amp_gsa=1&amp_js_v=a0';\n      expect(new ViewerImpl(ampdoc).isCctEmbedded()).to.be.true;\n    });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should NOT be CCT embedded w/o \"amp_gsa=1\"","suites":["isCctEmbedded"],"updatePoint":{"line":858,"column":50,"index":33852},"line":858,"code":"    it('should NOT be CCT embedded w/o \"amp_gsa=1\"', () => {\n      windowApi.parent = windowApi;\n      windowApi.location.search = '?amp_js_v=a0';\n      expect(new ViewerImpl(ampdoc).isCctEmbedded()).to.be.false;\n    });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should NOT be CCT embedded w/ \"amp_gsa=0\"","suites":["isCctEmbedded"],"updatePoint":{"line":863,"column":49,"index":34072},"line":863,"code":"    it('should NOT be CCT embedded w/ \"amp_gsa=0\"', () => {\n      windowApi.parent = windowApi;\n      windowApi.location.search = '?amp_gsa=0&amp_js_v=a0';\n      expect(new ViewerImpl(ampdoc).isCctEmbedded()).to.be.false;\n    });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should NOT be CCT embedded w/ \"amp_js_v\" not starting with \"a\"","suites":["isCctEmbedded"],"updatePoint":{"line":868,"column":70,"index":34323},"line":868,"code":"    it('should NOT be CCT embedded w/ \"amp_js_v\" not starting with \"a\"', () => {\n      windowApi.parent = windowApi;\n      windowApi.location.search = '?amp_gsa=1&amp_js_v=0';\n      expect(new ViewerImpl(ampdoc).isCctEmbedded()).to.be.false;\n    });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should NOT be CCT embedded if iframed regardless of \"amp_gsa=1\"","suites":["isCctEmbedded"],"updatePoint":{"line":873,"column":71,"index":34574},"line":873,"code":"    it('should NOT be CCT embedded if iframed regardless of \"amp_gsa=1\"', () => {\n      windowApi.parent = {};\n      windowApi.location.search = '?amp_gsa=0&amp_js_v=a0';\n      expect(new ViewerImpl(ampdoc).isCctEmbedded()).to.be.false;\n    });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should consider non-trusted when not iframed","suites":["isTrustedViewer"],"updatePoint":{"line":880,"column":52,"index":34844},"line":880,"code":"    it('should consider non-trusted when not iframed', () => {\n      windowApi.parent = windowApi;\n      windowApi.location.ancestorOrigins = ['https://google.com'];\n      return new ViewerImpl(ampdoc).isTrustedViewer().then(res => {\n        expect(res).to.be.false;\n      });\n    });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should consider trusted by ancestor","suites":["isTrustedViewer"],"updatePoint":{"line":887,"column":43,"index":35120},"line":887,"code":"    it('should consider trusted by ancestor', () => {\n      windowApi.parent = {};\n      windowApi.location.ancestorOrigins = ['https://google.com'];\n      return new ViewerImpl(ampdoc).isTrustedViewer().then(res => {\n        expect(res).to.be.true;\n      });\n    });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should consider trusted by ancestor","suites":["isTrustedViewer"],"updatePoint":{"line":894,"column":43,"index":35388},"line":894,"code":"    it('should consider trusted by ancestor', () => {\n      windowApi.parent = {};\n      windowApi.location.ancestorOrigins = ['https://gmail.dev'];\n      return new ViewerImpl(ampdoc).isTrustedViewer().then(res => {\n        expect(res).to.be.true;\n      });\n    });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should consider non-trusted without ancestor","suites":["isTrustedViewer"],"updatePoint":{"line":901,"column":52,"index":35664},"line":901,"code":"    it('should consider non-trusted without ancestor', () => {\n      windowApi.parent = {};\n      windowApi.location.ancestorOrigins = [];\n      return new ViewerImpl(ampdoc).isTrustedViewer().then(res => {\n        expect(res).to.be.false;\n      });\n    });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should consider non-trusted with wrong ancestor","suites":["isTrustedViewer"],"updatePoint":{"line":908,"column":55,"index":35925},"line":908,"code":"    it('should consider non-trusted with wrong ancestor', () => {\n      windowApi.parent = {};\n      windowApi.location.ancestorOrigins = ['https://untrusted.com'];\n      return new ViewerImpl(ampdoc).isTrustedViewer().then(res => {\n        expect(res).to.be.false;\n      });\n    });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should decide trusted on connection with origin","suites":["isTrustedViewer"],"updatePoint":{"line":915,"column":55,"index":36209},"line":915,"code":"    it('should decide trusted on connection with origin', () => {\n      windowApi.parent = {};\n      windowApi.location.ancestorOrigins = null;\n      const viewer = new ViewerImpl(ampdoc);\n      viewer.setMessageDeliverer(() => {}, 'https://google.com');\n      return viewer.isTrustedViewer().then(res => {\n        expect(res).to.be.true;\n      });\n    });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should NOT allow channel without origin","suites":["isTrustedViewer"],"updatePoint":{"line":924,"column":47,"index":36558},"line":924,"code":"    it('should NOT allow channel without origin', () => {\n      windowApi.parent = {};\n      windowApi.location.ancestorOrigins = null;\n      const viewer = new ViewerImpl(ampdoc);\n      expect(() => {\n        viewer.setMessageDeliverer(() => {});\n      }).to.throw(/message channel must have an origin/);\n    });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should allow channel without origin thats an empty string","suites":["isTrustedViewer"],"updatePoint":{"line":932,"column":65,"index":36890},"line":932,"code":"    it('should allow channel without origin thats an empty string', () => {\n      windowApi.parent = {};\n      windowApi.location.ancestorOrigins = null;\n      const viewer = new ViewerImpl(ampdoc);\n      expect(() => {\n        viewer.setMessageDeliverer(() => {}, '');\n      }).to.not.throw(/message channel must have an origin/);\n    });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should decide non-trusted on connection with wrong origin","suites":["isTrustedViewer"],"updatePoint":{"line":940,"column":65,"index":37230},"line":940,"code":"    it('should decide non-trusted on connection with wrong origin', () => {\n      windowApi.parent = {};\n      windowApi.location.ancestorOrigins = null;\n      const viewer = new ViewerImpl(ampdoc);\n      viewer.setMessageDeliverer(() => {}, 'https://untrusted.com');\n      return viewer.isTrustedViewer().then(res => {\n        expect(res).to.be.false;\n      });\n    });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should give precedence to ancestor","suites":["isTrustedViewer"],"updatePoint":{"line":949,"column":42,"index":37578},"line":949,"code":"    it('should give precedence to ancestor', () => {\n      windowApi.parent = {};\n      windowApi.location.ancestorOrigins = ['https://google.com'];\n      const viewer = new ViewerImpl(ampdoc);\n      viewer.setMessageDeliverer(() => {}, 'https://untrusted.com');\n      return viewer.isTrustedViewer().then(res => {\n        expect(res).to.be.true;\n      });\n    });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should decide trusted on connection with origin","suites":["isTrustedViewer","when in webview"],"updatePoint":{"line":959,"column":57,"index":37998},"line":959,"code":"      it('should decide trusted on connection with origin', () => {\n        windowApi.parent = windowApi;\n        params = {\n          'webview': '1'\n        };\n        windowApi.location.ancestorOrigins = [];\n        const viewer = new ViewerImpl(ampdoc);\n        viewer.setMessageDeliverer(() => {}, 'https://google.com');\n        return viewer.isTrustedViewer().then(res => {\n          expect(res).to.be.true;\n        });\n      });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should NOT allow channel without origin","suites":["isTrustedViewer","when in webview"],"updatePoint":{"line":971,"column":49,"index":38425},"line":971,"code":"      it('should NOT allow channel without origin', () => {\n        windowApi.parent = windowApi;\n        params = {\n          'webview': '1'\n        };\n        windowApi.location.ancestorOrigins = [];\n        const viewer = new ViewerImpl(ampdoc);\n        expect(() => {\n          viewer.setMessageDeliverer(() => {});\n        }).to.throw(/message channel must have an origin/);\n      });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should decide non-trusted on connection with wrong origin","suites":["isTrustedViewer","when in webview"],"updatePoint":{"line":982,"column":67,"index":38833},"line":982,"code":"      it('should decide non-trusted on connection with wrong origin', () => {\n        windowApi.parent = windowApi;\n        params = {\n          'webview': '1'\n        };\n        windowApi.location.ancestorOrigins = [];\n        const viewer = new ViewerImpl(ampdoc);\n        viewer.setMessageDeliverer(() => {}, 'https://untrusted.com');\n        return viewer.isTrustedViewer().then(res => {\n          expect(res).to.be.false;\n        });\n      });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should NOT give precedence to ancestor","suites":["isTrustedViewer","when in webview"],"updatePoint":{"line":994,"column":48,"index":39263},"line":994,"code":"      it('should NOT give precedence to ancestor', () => {\n        windowApi.parent = windowApi;\n        params = {\n          'webview': '1'\n        };\n        windowApi.location.ancestorOrigins = ['https://google.com'];\n        const viewer = new ViewerImpl(ampdoc);\n        viewer.setMessageDeliverer(() => {}, 'https://untrusted.com');\n        return viewer.isTrustedViewer().then(res => {\n          expect(res).to.be.false;\n        });\n      });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should decide trusted on connection with origin","suites":["isTrustedViewer","when isCctEmbedded"],"updatePoint":{"line":1008,"column":57,"index":39773},"line":1008,"code":"      it('should decide trusted on connection with origin', () => {\n        windowApi.parent = windowApi;\n        windowApi.location.search = '?amp_gsa=1&amp_js_v=a0';\n        windowApi.location.ancestorOrigins = [];\n        const viewer = new ViewerImpl(ampdoc);\n        viewer.setMessageDeliverer(() => {}, 'https://google.com');\n        return viewer.isTrustedViewer().then(res => {\n          expect(res).to.be.true;\n        });\n      });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should NOT allow channel without origin","suites":["isTrustedViewer","when isCctEmbedded"],"updatePoint":{"line":1018,"column":49,"index":40207},"line":1018,"code":"      it('should NOT allow channel without origin', () => {\n        windowApi.parent = windowApi;\n        windowApi.location.search = '?amp_gsa=1&amp_js_v=a0';\n        windowApi.location.ancestorOrigins = [];\n        const viewer = new ViewerImpl(ampdoc);\n        expect(() => {\n          viewer.setMessageDeliverer(() => {});\n        }).to.throw(/message channel must have an origin/);\n      });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should decide non-trusted on connection with wrong origin","suites":["isTrustedViewer","when isCctEmbedded"],"updatePoint":{"line":1027,"column":67,"index":40622},"line":1027,"code":"      it('should decide non-trusted on connection with wrong origin', () => {\n        windowApi.parent = windowApi;\n        windowApi.location.search = '?amp_gsa=1&amp_js_v=a0';\n        windowApi.location.ancestorOrigins = [];\n        const viewer = new ViewerImpl(ampdoc);\n        viewer.setMessageDeliverer(() => {}, 'https://untrusted.com');\n        return viewer.isTrustedViewer().then(res => {\n          expect(res).to.be.false;\n        });\n      });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should NOT give precedence to ancestor","suites":["isTrustedViewer","when isCctEmbedded"],"updatePoint":{"line":1037,"column":48,"index":41059},"line":1037,"code":"      it('should NOT give precedence to ancestor', () => {\n        windowApi.parent = windowApi;\n        windowApi.location.search = '?amp_gsa=1&amp_js_v=a0';\n        windowApi.location.ancestorOrigins = ['https://google.com'];\n        const viewer = new ViewerImpl(ampdoc);\n        viewer.setMessageDeliverer(() => {}, 'https://untrusted.com');\n        return viewer.isTrustedViewer().then(res => {\n          expect(res).to.be.false;\n        });\n      });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should consider trusted by ancestor","suites":["isTrustedViewer","when in a fake webview (a bad actor iframe)"],"updatePoint":{"line":1049,"column":45,"index":41589},"line":1049,"code":"      it('should consider trusted by ancestor', () => {\n        windowApi.parent = {};\n        params = {\n          'origin': 'g.com',\n          'webview': '1'\n        };\n        windowApi.location.ancestorOrigins = ['https://google.com'];\n        return new ViewerImpl(ampdoc).isTrustedViewer().then(res => {\n          expect(res).to.be.true;\n        });\n      });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should consider non-trusted without ancestor","suites":["isTrustedViewer","when in a fake webview (a bad actor iframe)"],"updatePoint":{"line":1060,"column":54,"index":41964},"line":1060,"code":"      it('should consider non-trusted without ancestor', () => {\n        windowApi.parent = {};\n        params = {\n          'origin': 'g.com',\n          'webview': '1'\n        };\n        windowApi.location.ancestorOrigins = [];\n        return new ViewerImpl(ampdoc).isTrustedViewer().then(res => {\n          expect(res).to.be.false;\n        });\n      });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should consider non-trusted with wrong ancestor","suites":["isTrustedViewer","when in a fake webview (a bad actor iframe)"],"updatePoint":{"line":1071,"column":57,"index":42323},"line":1071,"code":"      it('should consider non-trusted with wrong ancestor', () => {\n        windowApi.parent = {};\n        params = {\n          'origin': 'g.com',\n          'webview': '1'\n        };\n        windowApi.location.ancestorOrigins = ['https://untrusted.com'];\n        return new ViewerImpl(ampdoc).isTrustedViewer().then(res => {\n          expect(res).to.be.false;\n        });\n      });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should decide trusted on connection with origin","suites":["isTrustedViewer","when in a fake webview (a bad actor iframe)"],"updatePoint":{"line":1082,"column":57,"index":42705},"line":1082,"code":"      it('should decide trusted on connection with origin', () => {\n        windowApi.parent = {};\n        params = {\n          'origin': 'g.com',\n          'webview': '1'\n        };\n        windowApi.location.ancestorOrigins = null;\n        const viewer = new ViewerImpl(ampdoc);\n        viewer.setMessageDeliverer(() => {}, 'https://google.com');\n        return viewer.isTrustedViewer().then(res => {\n          expect(res).to.be.true;\n        });\n      });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should NOT allow channel without origin","suites":["isTrustedViewer","when in a fake webview (a bad actor iframe)"],"updatePoint":{"line":1095,"column":49,"index":43156},"line":1095,"code":"      it('should NOT allow channel without origin', () => {\n        windowApi.parent = {};\n        params = {\n          'origin': 'g.com',\n          'webview': '1'\n        };\n        windowApi.location.ancestorOrigins = null;\n        const viewer = new ViewerImpl(ampdoc);\n        expect(() => {\n          viewer.setMessageDeliverer(() => {});\n        }).to.throw(/message channel must have an origin/);\n      });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should decide non-trusted on connection with wrong origin","suites":["isTrustedViewer","when in a fake webview (a bad actor iframe)"],"updatePoint":{"line":1107,"column":67,"index":43588},"line":1107,"code":"      it('should decide non-trusted on connection with wrong origin', () => {\n        windowApi.parent = {};\n        params = {\n          'origin': 'g.com',\n          'webview': '1'\n        };\n        windowApi.location.ancestorOrigins = null;\n        const viewer = new ViewerImpl(ampdoc);\n        viewer.setMessageDeliverer(() => {}, 'https://untrusted.com');\n        return viewer.isTrustedViewer().then(res => {\n          expect(res).to.be.false;\n        });\n      });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should give precedence to ancestor","suites":["isTrustedViewer","when in a fake webview (a bad actor iframe)"],"updatePoint":{"line":1120,"column":44,"index":44038},"line":1120,"code":"      it('should give precedence to ancestor', () => {\n        windowApi.parent = {};\n        params = {\n          'origin': 'g.com',\n          'webview': '1'\n        };\n        windowApi.location.ancestorOrigins = ['https://google.com'];\n        const viewer = new ViewerImpl(ampdoc);\n        viewer.setMessageDeliverer(() => {}, 'https://untrusted.com');\n        return viewer.isTrustedViewer().then(res => {\n          expect(res).to.be.true;\n        });\n      });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should return document referrer if not overriden","suites":["referrer"],"updatePoint":{"line":1237,"column":56,"index":49713},"line":1237,"code":"    it('should return document referrer if not overriden', () => {\n      windowApi.parent = {};\n      setUrl('#');\n      windowApi.document.referrer = 'https://acme.org/docref';\n      const viewer = new ViewerImpl(ampdoc);\n      expect(viewer.getUnconfirmedReferrerUrl()).to.equal('https://acme.org/docref');\n      return viewer.getReferrerUrl().then(referrerUrl => {\n        expect(referrerUrl).to.equal('https://acme.org/docref');\n        expect(errorStub).to.have.not.been.called;\n      });\n    });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should NOT allow override if not iframed","suites":["referrer"],"updatePoint":{"line":1248,"column":48,"index":50207},"line":1248,"code":"    it('should NOT allow override if not iframed', () => {\n      windowApi.parent = windowApi;\n      setUrl('#referrer=' + encodeURIComponent('https://acme.org/viewer'));\n      windowApi.document.referrer = 'https://acme.org/docref';\n      const viewer = new ViewerImpl(ampdoc);\n      expect(viewer.getUnconfirmedReferrerUrl()).to.equal('https://acme.org/docref');\n      return viewer.getReferrerUrl().then(referrerUrl => {\n        expect(referrerUrl).to.equal('https://acme.org/docref');\n        expect(errorStub).to.have.not.been.called;\n      });\n    });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should NOT allow override if not trusted","suites":["referrer"],"updatePoint":{"line":1259,"column":48,"index":50765},"line":1259,"code":"    it('should NOT allow override if not trusted', () => {\n      windowApi.parent = {};\n      windowApi.location.hash = '#origin=g.com&referrer=' + encodeURIComponent('https://acme.org/viewer');\n      windowApi.document.referrer = 'https://acme.org/docref';\n      windowApi.location.ancestorOrigins = ['https://untrusted.com'];\n      const viewer = new ViewerImpl(ampdoc);\n      expect(viewer.getUnconfirmedReferrerUrl()).to.equal('https://acme.org/docref');\n      return viewer.getReferrerUrl().then(referrerUrl => {\n        expect(referrerUrl).to.equal('https://acme.org/docref');\n        expect(errorStub).to.have.not.been.called;\n      });\n    });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should NOT allow override if ancestor is empty","suites":["referrer"],"updatePoint":{"line":1271,"column":54,"index":51423},"line":1271,"code":"    it('should NOT allow override if ancestor is empty', () => {\n      windowApi.parent = {};\n      windowApi.location.hash = '#origin=g.com&referrer=' + encodeURIComponent('https://acme.org/viewer');\n      windowApi.document.referrer = 'https://acme.org/docref';\n      windowApi.location.ancestorOrigins = [];\n      const viewer = new ViewerImpl(ampdoc);\n      expect(viewer.getUnconfirmedReferrerUrl()).to.equal('https://acme.org/docref');\n      return viewer.getReferrerUrl().then(referrerUrl => {\n        expect(referrerUrl).to.equal('https://acme.org/docref');\n        expect(errorStub).to.have.not.been.called;\n      });\n    });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should allow partial override if async not trusted","suites":["referrer"],"updatePoint":{"line":1283,"column":58,"index":52062},"line":1283,"code":"    it('should allow partial override if async not trusted', () => {\n      windowApi.parent = {};\n      setUrl('#origin=g.com&referrer=' + encodeURIComponent('https://acme.org/viewer'));\n      windowApi.document.referrer = 'https://acme.org/docref';\n      const viewer = new ViewerImpl(ampdoc);\n      // Unconfirmed referrer is overriden, but not confirmed yet.\n      expect(viewer.getUnconfirmedReferrerUrl()).to.equal('https://acme.org/viewer');\n      viewer.setMessageDeliverer(() => {}, 'https://untrusted.com');\n      return viewer.getReferrerUrl().then(referrerUrl => {\n        expect(referrerUrl).to.equal('https://acme.org/docref');\n        // Unconfirmed referrer is reset. Async error is thrown.\n        expect(viewer.getUnconfirmedReferrerUrl()).to.equal('https://acme.org/docref');\n        expect(expectedErrorStub).to.be.calledOnce;\n        expect(expectedErrorStub.calledWith('Viewer', env.sandbox.match(arg => {\n          return !!arg.match(/Untrusted viewer referrer override/);\n        }))).to.be.true;\n      });\n    });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should allow full override if async trusted","suites":["referrer"],"updatePoint":{"line":1301,"column":51,"index":53093},"line":1301,"code":"    it('should allow full override if async trusted', () => {\n      windowApi.parent = {};\n      setUrl('#origin=g.com&referrer=' + encodeURIComponent('https://acme.org/viewer'));\n      windowApi.document.referrer = 'https://acme.org/docref';\n      const viewer = new ViewerImpl(ampdoc);\n      // Unconfirmed referrer is overriden and will be confirmed next.\n      expect(viewer.getUnconfirmedReferrerUrl()).to.equal('https://acme.org/viewer');\n      viewer.setMessageDeliverer(() => {}, 'https://google.com');\n      return viewer.getReferrerUrl().then(referrerUrl => {\n        expect(referrerUrl).to.equal('https://acme.org/viewer');\n        // Unconfirmed is confirmed and kept.\n        expect(viewer.getUnconfirmedReferrerUrl()).to.equal('https://acme.org/viewer');\n        expect(errorStub).to.have.not.been.called;\n      });\n    });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should allow override if iframed and trusted","suites":["referrer"],"updatePoint":{"line":1316,"column":52,"index":53932},"line":1316,"code":"    it('should allow override if iframed and trusted', () => {\n      windowApi.parent = {};\n      setUrl('#origin=g.com&referrer=' + encodeURIComponent('https://acme.org/viewer'));\n      windowApi.document.referrer = 'https://acme.org/docref';\n      windowApi.location.ancestorOrigins = ['https://google.com'];\n      const viewer = new ViewerImpl(ampdoc);\n      expect(viewer.getUnconfirmedReferrerUrl()).to.equal('https://acme.org/viewer');\n      return viewer.getReferrerUrl().then(referrerUrl => {\n        expect(referrerUrl).to.equal('https://acme.org/viewer');\n        expect(errorStub).to.have.not.been.called;\n      });\n    });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should allow override to empty if iframed and trusted","suites":["referrer"],"updatePoint":{"line":1328,"column":61,"index":54576},"line":1328,"code":"    it('should allow override to empty if iframed and trusted', () => {\n      windowApi.parent = {};\n      setUrl('#origin=g.com&referrer=');\n      windowApi.document.referrer = 'https://acme.org/docref';\n      windowApi.location.ancestorOrigins = ['https://google.com'];\n      const viewer = new ViewerImpl(ampdoc);\n      expect(viewer.getUnconfirmedReferrerUrl()).to.equal('');\n      return viewer.getReferrerUrl().then(referrerUrl => {\n        expect(referrerUrl).to.equal('');\n        expect(errorStub).to.have.not.been.called;\n      });\n    });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should initially always return current location","suites":["viewerUrl"],"updatePoint":{"line":1342,"column":55,"index":55158},"line":1342,"code":"    it('should initially always return current location', () => {\n      setUrl('https://acme.org/doc1#hash');\n      const viewer = new ViewerImpl(ampdoc);\n      expect(viewer.getResolvedViewerUrl()).to.equal('https://acme.org/doc1');\n    });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should always return current location for top-level window","suites":["viewerUrl"],"updatePoint":{"line":1347,"column":66,"index":55411},"line":1347,"code":"    it('should always return current location for top-level window', () => {\n      windowApi.parent = windowApi;\n      setUrl('https://acme.org/doc1#hash');\n      const viewer = new ViewerImpl(ampdoc);\n      expect(viewer.getResolvedViewerUrl()).to.equal('https://acme.org/doc1');\n      return viewer.getViewerUrl().then(viewerUrl => {\n        expect(viewerUrl).to.equal('https://acme.org/doc1');\n        expect(viewer.getResolvedViewerUrl()).to.equal('https://acme.org/doc1');\n        expect(expectedErrorStub).to.have.not.been.called;\n      });\n    });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should NOT allow override if not iframed","suites":["viewerUrl"],"updatePoint":{"line":1358,"column":48,"index":55948},"line":1358,"code":"    it('should NOT allow override if not iframed', () => {\n      windowApi.parent = windowApi;\n      setUrl('https://acme.org/doc1#origin=g.com&viewerUrl=' + encodeURIComponent('https://acme.org/viewer'));\n      const viewer = new ViewerImpl(ampdoc);\n      expect(viewer.getResolvedViewerUrl()).to.equal('https://acme.org/doc1');\n      return viewer.getViewerUrl().then(viewerUrl => {\n        expect(viewerUrl).to.equal('https://acme.org/doc1');\n        expect(viewer.getResolvedViewerUrl()).to.equal('https://acme.org/doc1');\n        expect(expectedErrorStub).to.have.not.been.called;\n      });\n    });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should NOT allow override if not trusted","suites":["viewerUrl"],"updatePoint":{"line":1369,"column":48,"index":56552},"line":1369,"code":"    it('should NOT allow override if not trusted', () => {\n      windowApi.parent = {};\n      setUrl('https://acme.org/doc1#origin=g.com&viewerUrl=' + encodeURIComponent('https://acme.org/viewer'));\n      windowApi.location.ancestorOrigins = ['https://untrusted.com'];\n      const viewer = new ViewerImpl(ampdoc);\n      expect(viewer.getResolvedViewerUrl()).to.equal('https://acme.org/doc1');\n      return viewer.getViewerUrl().then(viewerUrl => {\n        expect(viewerUrl).to.equal('https://acme.org/doc1');\n        expect(viewer.getResolvedViewerUrl()).to.equal('https://acme.org/doc1');\n        expect(expectedErrorStub).to.be.calledOnce;\n        expect(expectedErrorStub.calledWith('Viewer', env.sandbox.match(arg => {\n          return !!arg.match(/Untrusted viewer url override/);\n        }))).to.be.true;\n      });\n    });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should NOT allow override if ancestor is empty","suites":["viewerUrl"],"updatePoint":{"line":1384,"column":54,"index":57387},"line":1384,"code":"    it('should NOT allow override if ancestor is empty', () => {\n      windowApi.parent = {};\n      setUrl('https://acme.org/doc1#origin=g.com&viewerUrl=' + encodeURIComponent('https://acme.org/viewer'));\n      windowApi.location.ancestorOrigins = [];\n      const viewer = new ViewerImpl(ampdoc);\n      expect(viewer.getResolvedViewerUrl()).to.equal('https://acme.org/doc1');\n      return viewer.getViewerUrl().then(viewerUrl => {\n        expect(viewerUrl).to.equal('https://acme.org/doc1');\n        expect(viewer.getResolvedViewerUrl()).to.equal('https://acme.org/doc1');\n        expect(expectedErrorStub).to.be.calledOnce;\n        expect(expectedErrorStub.calledWith('Viewer', env.sandbox.match(arg => {\n          return !!arg.match(/Untrusted viewer url override/);\n        }))).to.be.true;\n      });\n    });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should allow partial override if async not trusted","suites":["viewerUrl"],"updatePoint":{"line":1399,"column":58,"index":58203},"line":1399,"code":"    it('should allow partial override if async not trusted', () => {\n      windowApi.parent = {};\n      setUrl('https://acme.org/doc1#origin=g.com&viewerUrl=' + encodeURIComponent('https://acme.org/viewer'));\n      const viewer = new ViewerImpl(ampdoc);\n      expect(viewer.getResolvedViewerUrl()).to.equal('https://acme.org/doc1');\n      viewer.setMessageDeliverer(() => {}, 'https://untrusted.com');\n      return viewer.getViewerUrl().then(viewerUrl => {\n        expect(viewerUrl).to.equal('https://acme.org/doc1');\n        expect(viewer.getResolvedViewerUrl()).to.equal('https://acme.org/doc1');\n        expect(expectedErrorStub).to.be.calledOnce;\n        expect(expectedErrorStub.calledWith('Viewer', env.sandbox.match(arg => {\n          return !!arg.match(/Untrusted viewer url override/);\n        }))).to.be.true;\n      });\n    });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should allow full override if async trusted","suites":["viewerUrl"],"updatePoint":{"line":1414,"column":51,"index":59034},"line":1414,"code":"    it('should allow full override if async trusted', () => {\n      windowApi.parent = {};\n      setUrl('https://acme.org/doc1#origin=g.com&viewerUrl=' + encodeURIComponent('https://acme.org/viewer'));\n      const viewer = new ViewerImpl(ampdoc);\n      expect(viewer.getResolvedViewerUrl()).to.equal('https://acme.org/doc1');\n      viewer.setMessageDeliverer(() => {}, 'https://google.com');\n      return viewer.getViewerUrl().then(viewerUrl => {\n        expect(viewerUrl).to.equal('https://acme.org/viewer');\n        expect(viewer.getResolvedViewerUrl()).to.equal('https://acme.org/viewer');\n        expect(expectedErrorStub).to.have.not.been.called;\n      });\n    });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should allow override if iframed and trusted","suites":["viewerUrl"],"updatePoint":{"line":1426,"column":52,"index":59705},"line":1426,"code":"    it('should allow override if iframed and trusted', () => {\n      windowApi.parent = {};\n      setUrl('https://acme.org/doc1#origin=g.com&viewerUrl=' + encodeURIComponent('https://acme.org/viewer'));\n      windowApi.location.ancestorOrigins = ['https://google.com'];\n      const viewer = new ViewerImpl(ampdoc);\n      expect(viewer.getResolvedViewerUrl()).to.equal('https://acme.org/doc1');\n      return viewer.getViewerUrl().then(viewerUrl => {\n        expect(viewerUrl).to.equal('https://acme.org/viewer');\n        expect(viewer.getResolvedViewerUrl()).to.equal('https://acme.org/viewer');\n        expect(expectedErrorStub).to.have.not.been.called;\n      });\n    });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should ignore override to empty if iframed and trusted","suites":["viewerUrl"],"updatePoint":{"line":1438,"column":62,"index":60387},"line":1438,"code":"    it('should ignore override to empty if iframed and trusted', () => {\n      windowApi.parent = {};\n      setUrl('https://acme.org/doc1#origin=g.com&viewerUrl=');\n      windowApi.location.ancestorOrigins = ['https://google.com'];\n      const viewer = new ViewerImpl(ampdoc);\n      expect(viewer.getResolvedViewerUrl()).to.equal('https://acme.org/doc1');\n      return viewer.getViewerUrl().then(viewerUrl => {\n        expect(viewerUrl).to.equal('https://acme.org/doc1');\n        expect(viewer.getResolvedViewerUrl()).to.equal('https://acme.org/doc1');\n        expect(expectedErrorStub).to.have.not.been.called;\n      });\n    });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should return empty string if origin is not known","suites":["viewerOrigin"],"updatePoint":{"line":1452,"column":57,"index":61053},"line":1452,"code":"    it('should return empty string if origin is not known', () => {\n      const viewer = new ViewerImpl(ampdoc);\n      return viewer.getViewerOrigin().then(viewerOrigin => {\n        expect(viewerOrigin).to.equal('');\n      });\n    });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should return ancestor origin if known","suites":["viewerOrigin"],"updatePoint":{"line":1458,"column":46,"index":61277},"line":1458,"code":"    it('should return ancestor origin if known', () => {\n      windowApi.parent = {};\n      windowApi.location.ancestorOrigins = ['https://google.com'];\n      const viewer = new ViewerImpl(ampdoc);\n      return viewer.getViewerOrigin().then(viewerOrigin => {\n        expect(viewerOrigin).to.equal('https://google.com');\n      });\n    });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should return viewer origin if set via handshake","suites":["viewerOrigin"],"updatePoint":{"line":1466,"column":56,"index":61625},"line":1466,"code":"    it('should return viewer origin if set via handshake', () => {\n      windowApi.parent = {};\n      const viewer = new ViewerImpl(ampdoc);\n      const result = viewer.getViewerOrigin().then(viewerOrigin => {\n        expect(viewerOrigin).to.equal('https://foobar.com');\n      });\n      viewer.setMessageDeliverer(() => {}, 'https://foobar.com');\n      return result;\n    });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should return empty string if handshake does not happen","suites":["viewerOrigin"],"updatePoint":{"line":1475,"column":63,"index":62008},"line":1475,"code":"    it('should return empty string if handshake does not happen', () => {\n      windowApi.parent = {};\n      const viewer = new ViewerImpl(ampdoc);\n      const result = viewer.getViewerOrigin().then(viewerOrigin => {\n        expect(viewerOrigin).to.equal('');\n      });\n      clock.tick(1010);\n      return result;\n    });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should fire observer on event","suites":["onMessage"],"updatePoint":{"line":1486,"column":37,"index":62343},"line":1486,"code":"    it('should fire observer on event', () => {\n      const onMessageSpy = env.sandbox.spy();\n      viewer.onMessage('event', onMessageSpy);\n      viewer.receiveMessage('event', {\n        foo: 'bar'\n      });\n      expect(onMessageSpy).to.have.been.calledOnceWithExactly({\n        foo: 'bar'\n      });\n    });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should not fire observer on other events","suites":["onMessage"],"updatePoint":{"line":1496,"column":48,"index":62664},"line":1496,"code":"    it('should not fire observer on other events', () => {\n      const onMessageSpy = env.sandbox.spy();\n      viewer.onMessage('event', onMessageSpy);\n      viewer.receiveMessage('otherevent', {\n        foo: 'bar'\n      });\n      expect(onMessageSpy).to.not.have.been.called;\n    });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should fire observer with queued messages on handler registration","suites":["onMessage"],"updatePoint":{"line":1504,"column":73,"index":62974},"line":1504,"code":"    it('should fire observer with queued messages on handler registration', () => {\n      const onMessageSpy = env.sandbox.spy();\n      viewer.receiveMessage('event', {\n        foo: 'bar'\n      });\n      viewer.onMessage('event', onMessageSpy);\n      expect(onMessageSpy).to.have.been.calledOnceWithExactly({\n        foo: 'bar'\n      });\n    });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should empty queued messages after first handler registration","suites":["onMessage"],"updatePoint":{"line":1514,"column":69,"index":63316},"line":1514,"code":"    it('should empty queued messages after first handler registration', () => {\n      const onMessageSpy = env.sandbox.spy();\n      viewer.receiveMessage('event', {\n        foo: 'bar'\n      });\n      viewer.onMessage('event', onMessageSpy);\n      viewer.onMessage('event', onMessageSpy);\n      expect(onMessageSpy).to.have.been.calledOnceWithExactly({\n        foo: 'bar'\n      });\n    });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should cap the max number of queued messages","suites":["onMessage"],"updatePoint":{"line":1525,"column":52,"index":63688},"line":1525,"code":"    it('should cap the max number of queued messages', () => {\n      const onMessageSpy = env.sandbox.spy();\n      for (let i = 0; i < 55; i++) {\n        viewer.receiveMessage('event', {\n          foo: 'bar'\n        });\n      }\n      viewer.onMessage('event', onMessageSpy);\n      expect(onMessageSpy).to.have.callCount(50);\n    });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should call responder on event","suites":["onMessageRespond"],"updatePoint":{"line":1537,"column":38,"index":64052},"line":1537,"code":"    it('should call responder on event', () => {\n      const onMessageRespondStub = env.sandbox.stub().resolves();\n      viewer.onMessageRespond('event', onMessageRespondStub);\n      viewer.receiveMessage('event', {\n        foo: 'bar'\n      });\n      expect(onMessageRespondStub).to.have.been.calledOnceWithExactly({\n        foo: 'bar'\n      });\n    });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should not call responder on other events","suites":["onMessageRespond"],"updatePoint":{"line":1547,"column":49,"index":64417},"line":1547,"code":"    it('should not call responder on other events', () => {\n      const onMessageRespondStub = env.sandbox.stub().resolves();\n      viewer.onMessageRespond('event', onMessageRespondStub);\n      viewer.receiveMessage('otherevent', {\n        foo: 'bar'\n      });\n      expect(onMessageRespondStub).to.not.have.been.called;\n    });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should call responder with queued messages on responder registration","suites":["onMessageRespond"],"updatePoint":{"line":1555,"column":76,"index":64773},"line":1555,"code":"    it('should call responder with queued messages on responder registration', () => {\n      const onMessageRespondStub = env.sandbox.stub().resolves();\n      viewer.receiveMessage('event', {\n        foo: 'bar'\n      });\n      viewer.onMessageRespond('event', onMessageRespondStub);\n      expect(onMessageRespondStub).to.have.been.calledOnceWithExactly({\n        foo: 'bar'\n      });\n    });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should empty queued messages after first responder registration","suites":["onMessageRespond"],"updatePoint":{"line":1565,"column":71,"index":65160},"line":1565,"code":"    it('should empty queued messages after first responder registration', () => {\n      const onMessageRespondStub = env.sandbox.stub().resolves();\n      viewer.receiveMessage('event', {\n        foo: 'bar'\n      });\n      viewer.onMessageRespond('event', onMessageRespondStub);\n      viewer.onMessageRespond('event', onMessageRespondStub);\n      expect(onMessageRespondStub).to.have.been.calledOnceWithExactly({\n        foo: 'bar'\n      });\n    });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should return responder response when enqueing message on responder registration","suites":["onMessageRespond"],"updatePoint":{"line":1576,"column":88,"index":65626},"line":1576,"code":"    it('should return responder response when enqueing message on responder registration', async () => {\n      const onMessageRespondStub = env.sandbox.stub().resolves('response');\n      const promise = viewer.receiveMessage('event', {\n        foo: 'bar'\n      });\n      viewer.onMessageRespond('event', onMessageRespondStub);\n      expect(await promise).to.equal('response');\n    });","file":"unit/test-viewer.js","skipped":false,"dir":"test"},{"name":"should setup overflow:visible on body","suites":[],"updatePoint":{"line":32,"column":43,"index":1284},"line":32,"code":"  it('should setup overflow:visible on body', () => {\n    expect(win.getComputedStyle(win.document.body).overflow).to.equal('visible');\n  });","file":"unit/test-viewport-binding.js","skipped":false,"dir":"test"},{"name":"should configure body as relative","suites":[],"updatePoint":{"line":35,"column":39,"index":1422},"line":35,"code":"  it('should configure body as relative', () => {\n    binding = new ViewportBindingNatural_(ampdoc);\n    expect(win.document.body.style.display).to.not.be.ok;\n    const bodyStyles = win.getComputedStyle(win.document.body);\n    expect(bodyStyles.position).to.equal('relative');\n    // It's important that this experiment does NOT override the previously\n    // set `overflow`.\n    expect(bodyStyles.overflow).to.equal('visible');\n  });","file":"unit/test-viewport-binding.js","skipped":false,"dir":"test"},{"name":"should override body overflow for iOS webview","suites":[],"updatePoint":{"line":44,"column":51,"index":1869},"line":44,"code":"  it('should override body overflow for iOS webview', () => {\n    win.document.documentElement.classList.add('i-amphtml-webview');\n    binding = new ViewportBindingNatural_(ampdoc);\n    const bodyStyles = win.getComputedStyle(win.document.body);\n    expect(bodyStyles.position).to.equal('relative');\n    expect(bodyStyles.overflowX).to.equal('visible');\n    expect(bodyStyles.overflowY).to.equal('visible');\n  });","file":"unit/test-viewport-binding.js","skipped":false,"dir":"test"},{"name":"should NOT require fixed layer transferring","suites":[],"updatePoint":{"line":52,"column":49,"index":2281},"line":52,"code":"  it('should NOT require fixed layer transferring', () => {\n    expect(binding.requiresFixedLayerTransfer()).to.be.false;\n  });","file":"unit/test-viewport-binding.js","skipped":false,"dir":"test"},{"name":"should NOT require override of the global scrollTo","suites":[],"updatePoint":{"line":55,"column":56,"index":2416},"line":55,"code":"  it('should NOT require override of the global scrollTo', () => {\n    expect(binding.overrideGlobalScrollTo()).to.be.false;\n  });","file":"unit/test-viewport-binding.js","skipped":false,"dir":"test"},{"name":"should connect events: subscribe to scroll and resize events","suites":[],"updatePoint":{"line":58,"column":66,"index":2557},"line":58,"code":"  it('should connect events: subscribe to scroll and resize events', () => {\n    expect(win.eventListeners.count('resize')).to.equal(1);\n    expect(win.eventListeners.count('scroll')).to.equal(1);\n  });","file":"unit/test-viewport-binding.js","skipped":false,"dir":"test"},{"name":"should disconnect events","suites":[],"updatePoint":{"line":62,"column":30,"index":2724},"line":62,"code":"  it('should disconnect events', () => {\n    // After disconnect, there are no more listeners on window.\n    binding.disconnect();\n    expect(win.eventListeners.count('resize')).to.equal(0);\n    expect(win.eventListeners.count('scroll')).to.equal(0);\n  });","file":"unit/test-viewport-binding.js","skipped":false,"dir":"test"},{"name":"should update padding","suites":[],"updatePoint":{"line":68,"column":27,"index":2978},"line":68,"code":"  it('should update padding', () => {\n    binding.updatePaddingTop(31);\n    expect(win.document.documentElement.style.paddingTop).to.equal('31px');\n  });","file":"unit/test-viewport-binding.js","skipped":false,"dir":"test"},{"name":"should calculate size","suites":[],"updatePoint":{"line":72,"column":27,"index":3132},"line":72,"code":"  it('should calculate size', () => {\n    const size = binding.getSize();\n    expect(size.width).to.equal(100);\n    expect(size.height).to.equal(200);\n  });","file":"unit/test-viewport-binding.js","skipped":false,"dir":"test"},{"name":"should calculate scrollTop from scrollElement","suites":[],"updatePoint":{"line":77,"column":51,"index":3313},"line":77,"code":"  it('should calculate scrollTop from scrollElement', () => {\n    win.pageYOffset = 11;\n    win.document.scrollingElement.scrollTop = 17;\n    expect(binding.getScrollTop()).to.equal(17);\n  });","file":"unit/test-viewport-binding.js","skipped":false,"dir":"test"},{"name":"should calculate scrollWidth from scrollElement","suites":[],"updatePoint":{"line":82,"column":53,"index":3508},"line":82,"code":"  it('should calculate scrollWidth from scrollElement', () => {\n    expect(binding.getScrollWidth()).to.equal(200);\n  });","file":"unit/test-viewport-binding.js","skipped":false,"dir":"test"},{"name":"should calculate scrollHeight from scrollElement","suites":[],"updatePoint":{"line":85,"column":54,"index":3631},"line":85,"code":"  it('should calculate scrollHeight from scrollElement', () => {\n    expect(binding.getScrollHeight()).to.equal(300);\n  });","file":"unit/test-viewport-binding.js","skipped":false,"dir":"test"},{"name":"should calculate contentHeight from body height","suites":[],"updatePoint":{"line":88,"column":53,"index":3754},"line":88,"code":"  it('should calculate contentHeight from body height', () => {\n    // Set content to be smaller than viewport.\n    child.style.height = '50px';\n    expect(binding.getContentHeight()).to.equal(50);\n  });","file":"unit/test-viewport-binding.js","skipped":false,"dir":"test"},{"name":"should include padding top in contentHeight","suites":[],"updatePoint":{"line":93,"column":49,"index":3954},"line":93,"code":"  it('should include padding top in contentHeight', () => {\n    binding.updatePaddingTop(10);\n    binding.setScrollTop(20); // should have no effect on height\n    expect(binding.getContentHeight()).to.equal(310);\n  });","file":"unit/test-viewport-binding.js","skipped":false,"dir":"test"},{"name":"should account for child margin-top","suites":[],"updatePoint":{"line":98,"column":41,"index":4165},"line":98,"code":"  it('should account for child margin-top', () => {\n    child.style.marginTop = '15px';\n    expect(binding.getContentHeight()).to.equal(315);\n  });","file":"unit/test-viewport-binding.js","skipped":false,"dir":"test"},{"name":"should account for child margin-top (WebKit)","suites":[],"updatePoint":{"line":102,"column":50,"index":4322},"line":102,"code":"  it('should account for child margin-top (WebKit)', () => {\n    env.sandbox.stub(win.document, 'scrollingElement').value(null);\n    env.sandbox.stub(binding.platform_, 'isWebKit').returns(true);\n    child.style.marginTop = '15px';\n    expect(binding.getContentHeight()).to.equal(315);\n  });","file":"unit/test-viewport-binding.js","skipped":false,"dir":"test"},{"name":"should update scrollTop on scrollElement","suites":[],"updatePoint":{"line":108,"column":46,"index":4610},"line":108,"code":"  it('should update scrollTop on scrollElement', () => {\n    win.pageYOffset = 11;\n    win.document.scrollingElement.scrollTop = 17;\n    binding.setScrollTop(21);\n    expect(win.document.scrollingElement. /*OK*/scrollTop).to.equal(21);\n  });","file":"unit/test-viewport-binding.js","skipped":false,"dir":"test"},{"name":"should fallback scrollTop to pageYOffset","suites":[],"updatePoint":{"line":114,"column":46,"index":4852},"line":114,"code":"  it('should fallback scrollTop to pageYOffset', () => {\n    win.pageYOffset = 11;\n    win.document.scrollingElement.scrollTop = 0;\n    expect(binding.getScrollTop()).to.equal(11);\n  });","file":"unit/test-viewport-binding.js","skipped":false,"dir":"test"},{"name":"should offset client rect for layout","suites":[],"updatePoint":{"line":119,"column":42,"index":5035},"line":119,"code":"  it('should offset client rect for layout', () => {\n    win.pageXOffset = 0;\n    win.pageYOffset = 200;\n    win.document.scrollingElement.scrollTop = 0;\n    const el = {\n      getBoundingClientRect: () => {\n        return {\n          left: 11.5,\n          top: 12.5,\n          width: 13.5,\n          height: 14.5\n        };\n      }\n    };\n    const rect = binding.getLayoutRect(el);\n    expect(rect.left).to.equal(12); // round(0 + 11.5)\n    expect(rect.top).to.equal(213); // round(200 + 12.5)\n    expect(rect.width).to.equal(14); // round(13.5)\n    expect(rect.height).to.equal(15); // round(14.5)\n  });","file":"unit/test-viewport-binding.js","skipped":false,"dir":"test"},{"name":"should offset client rect for layout and position passed in","suites":[],"updatePoint":{"line":140,"column":65,"index":5666},"line":140,"code":"  it('should offset client rect for layout and position passed in', () => {\n    win.pageXOffset = 0;\n    win.pageYOffset = 2000;\n    win.document.scrollingElement.scrollTop = 0;\n    const el = {\n      getBoundingClientRect: () => {\n        return {\n          left: 11.5,\n          top: 12.5,\n          width: 13.5,\n          height: 14.5\n        };\n      }\n    };\n    const rect = binding.getLayoutRect(el, 100, 200);\n    expect(rect.left).to.equal(112); // round(100 + 11.5)\n    expect(rect.top).to.equal(213); // round(200 + 12.5)\n    expect(rect.width).to.equal(14); // round(13.5)\n    expect(rect.height).to.equal(15); // round(14.5)\n  });","file":"unit/test-viewport-binding.js","skipped":false,"dir":"test"},{"name":"should disable scroll temporarily and reset scroll","suites":[],"updatePoint":{"line":161,"column":56,"index":6302},"line":161,"code":"  it('should disable scroll temporarily and reset scroll', () => {\n    let htmlCss = win.getComputedStyle(win.document.documentElement);\n    expect(htmlCss.overflowX).to.equal('hidden');\n    expect(htmlCss.overflowY).to.equal('auto');\n    binding.disableScroll();\n    expect(win.document.documentElement).to.have.class('i-amphtml-scroll-disabled');\n    htmlCss = win.getComputedStyle(win.document.documentElement);\n    expect(htmlCss.overflowX).to.equal('hidden');\n    expect(htmlCss.overflowY).to.equal('hidden');\n    binding.resetScroll();\n    expect(win.document.documentElement).to.not.have.class('i-amphtml-scroll-disabled');\n    htmlCss = win.getComputedStyle(win.document.documentElement);\n    expect(htmlCss.overflowX).to.equal('hidden');\n    expect(htmlCss.overflowY).to.equal('auto');\n  });","file":"unit/test-viewport-binding.js","skipped":false,"dir":"test"},{"name":"should NOT setup body min-height w/o experiment","suites":[],"updatePoint":{"line":226,"column":53,"index":8656},"line":226,"code":"  it('should NOT setup body min-height w/o experiment', () => {\n    const style = win.getComputedStyle(win.document.body);\n    expect(style.minHeight).to.equal('0px');\n  });","file":"unit/test-viewport-binding.js","skipped":false,"dir":"test"},{"name":"should require override of the global scrollTo","suites":[],"updatePoint":{"line":230,"column":52,"index":8829},"line":230,"code":"  it('should require override of the global scrollTo', () => {\n    expect(binding.overrideGlobalScrollTo()).to.be.true;\n  });","file":"unit/test-viewport-binding.js","skipped":false,"dir":"test"},{"name":"should require fixed layer transferring","suites":[],"updatePoint":{"line":235,"column":45,"index":9030},"line":235,"code":"  it('should require fixed layer transferring', () => {\n    expect(binding.requiresFixedLayerTransfer()).to.be.true;\n  });","file":"unit/test-viewport-binding.js","skipped":false,"dir":"test"},{"name":"should require fixed layer transferring for later iOS w/o experiment","suites":[],"updatePoint":{"line":240,"column":74,"index":9264},"line":240,"code":"  it('should require fixed layer transferring for later iOS w/o experiment', () => {\n    env.sandbox.stub(Services.platformFor(win), 'getIosVersionString').callsFake(() => '12.2');\n    expect(binding.requiresFixedLayerTransfer()).to.be.true;\n  });","file":"unit/test-viewport-binding.js","skipped":false,"dir":"test"},{"name":"should configure fixed layer transferring based on iOS version","suites":[],"updatePoint":{"line":244,"column":68,"index":9506},"line":244,"code":"  it('should configure fixed layer transferring based on iOS version', () => {\n    toggleExperiment(win, 'ios-fixed-no-transfer');\n    let version;\n    env.sandbox.stub(Services.platformFor(win), 'getIosVersionString').callsFake(() => version);\n\n    // 12.1 is still out.\n    version = '12.1';\n    expect(binding.requiresFixedLayerTransfer()).to.be.true;\n\n    // 12.2 and up are fixed.\n    version = '12.2';\n    expect(binding.requiresFixedLayerTransfer()).to.be.false;\n    version = '12.3';\n    expect(binding.requiresFixedLayerTransfer()).to.be.false;\n    version = '13.0';\n    expect(binding.requiresFixedLayerTransfer()).to.be.false;\n  });","file":"unit/test-viewport-binding.js","skipped":false,"dir":"test"},{"name":"should start w/o overscroll and set it on doc ready","suites":[],"updatePoint":{"line":261,"column":57,"index":10139},"line":261,"code":"  it('should start w/o overscroll and set it on doc ready', () => {\n    const root = win.document.documentElement;\n    expect(root).to.not.have.class('i-amphtml-ios-overscroll');\n    expect(root.style.webkitOverflowScrolling).to.not.equal('touch');\n    expect(binding.wrapper_.style.webkitOverflowScrolling).to.not.equal('touch');\n    return whenDocumentReady(win.document).then(() => {\n      expect(root).to.have.class('i-amphtml-ios-overscroll');\n    });\n  });","file":"unit/test-viewport-binding.js","skipped":false,"dir":"test"},{"name":"should have UI setup","suites":[],"updatePoint":{"line":270,"column":26,"index":10571},"line":270,"code":"  it('should have UI setup', () => {\n    expect(binding.setupDone_).to.be.true;\n    expect(win.document.documentElement).to.have.class('i-amphtml-ios-embed');\n    expect(win.document.body).to.exist;\n    expect(win.document.body.parentNode).to.not.equal(win.document.documentElement);\n    expect(win.document.body.parentNode).to.equal(binding.wrapper_);\n    expect(binding.wrapper_.parentNode).to.equal(win.document.documentElement);\n    expect(binding.wrapper_.tagName).to.equal('HTML');\n    expect(binding.wrapper_.id).to.equal('i-amphtml-wrapper');\n    expect(win.document.body.contains(child)).to.be.true;\n    expect(binding.wrapper_.contains(child)).to.be.true;\n    expect(win.document.contains(child)).to.be.true;\n    expect(child.textContent).to.equal('test');\n\n    // Top-level classes moved to the wrapper element.\n    expect(win.document.documentElement).to.have.class('top');\n    expect(binding.wrapper_).to.have.class('top');\n  });","file":"unit/test-viewport-binding.js","skipped":false,"dir":"test"},{"name":"should have CSS setup","suites":[],"updatePoint":{"line":288,"column":27,"index":11515},"line":288,"code":"  it('should have CSS setup', () => {\n    win.document.body.style.display = 'table';\n    const htmlCss = win.getComputedStyle(win.document.documentElement);\n    const wrapperCss = win.getComputedStyle(binding.wrapper_);\n    const bodyCss = win.getComputedStyle(win.document.body);\n\n    // `<html>` must have `position: static` or layout is broken.\n    expect(htmlCss.position).to.equal('static');\n\n    // `<html>` and `<i-amphtml-wrapper>` must be scrollable, but not `body`.\n    // Unfortunately, we can't test here `-webkit-overflow-scrolling`.\n    expect(htmlCss.overflowY).to.equal('auto');\n    expect(htmlCss.overflowX).to.equal('hidden');\n    expect(wrapperCss.overflowY).to.equal('auto');\n    expect(wrapperCss.overflowX).to.equal('hidden');\n    expect(bodyCss.overflowY).to.equal('visible');\n    expect(bodyCss.overflowX).to.equal('visible');\n\n    // Wrapper must be a block and positioned absolute at 0/0/0/0.\n    expect(wrapperCss.display).to.equal('block');\n    expect(wrapperCss.position).to.equal('absolute');\n    expect(wrapperCss.top).to.equal('0px');\n    expect(wrapperCss.left).to.equal('0px');\n    expect(wrapperCss.right).to.equal('0px');\n    expect(wrapperCss.bottom).to.equal('0px');\n    expect(wrapperCss.margin).to.equal('0px');\n\n    // `body` must have `relative` positioning and `block` display.\n    expect(bodyCss.position).to.equal('relative');\n    // Preserve the customized `display` value.\n    expect(bodyCss.display).to.equal('table');\n\n    // `body` must have a 1px transparent border for two purposes:\n    // (1) to cancel out margin collapse in body's children;\n    // (2) to offset scroll adjustment to 1 to avoid scroll freeze problem.\n    expect(bodyCss.borderTop.replace('rgba(0, 0, 0, 0)', 'transparent')).to.equal('1px solid transparent');\n    expect(bodyCss.margin).to.equal('0px');\n  });","file":"unit/test-viewport-binding.js","skipped":false,"dir":"test"},{"name":"should be immediately scrolled to 1 to avoid freeze","suites":[],"updatePoint":{"line":326,"column":57,"index":13375},"line":326,"code":"  it('should be immediately scrolled to 1 to avoid freeze', () => {\n    expect(binding.wrapper_.scrollTop).to.equal(1);\n  });","file":"unit/test-viewport-binding.js","skipped":false,"dir":"test"},{"name":"should connect events: subscribe to scroll and resize events","suites":[],"updatePoint":{"line":329,"column":66,"index":13510},"line":329,"code":"  it('should connect events: subscribe to scroll and resize events', () => {\n    expect(win.eventListeners.count('resize')).to.equal(1);\n    // Note that scroll event is on the wrapper, and NOT on root or body.\n    expect(win.eventListeners.count('scroll')).to.equal(0);\n    expect(win.document.eventListeners.count('scroll')).to.equal(0);\n    expect(win.document.documentElement.eventListeners.count('scroll')).to.equal(0);\n    expect(win.document.body.eventListeners.count('scroll')).to.equal(0);\n  });","file":"unit/test-viewport-binding.js","skipped":false,"dir":"test"},{"name":"should disconnect events","suites":[],"updatePoint":{"line":337,"column":30,"index":13979},"line":337,"code":"  it('should disconnect events', () => {\n    // After disconnect, there are no more listeners on window.\n    binding.disconnect();\n    expect(win.eventListeners.count('resize')).to.equal(0);\n  });","file":"unit/test-viewport-binding.js","skipped":false,"dir":"test"},{"name":"should update padding","suites":[],"updatePoint":{"line":342,"column":27,"index":14173},"line":342,"code":"  it('should update padding', () => {\n    binding.updatePaddingTop(31);\n    expect(binding.wrapper_.style.paddingTop).to.equal('31px');\n    // Notice, root is not touched.\n    expect(win.document.documentElement.style.paddingTop).to.equal('');\n  });","file":"unit/test-viewport-binding.js","skipped":false,"dir":"test"},{"name":"should calculate size","suites":[],"updatePoint":{"line":348,"column":27,"index":14423},"line":348,"code":"  it('should calculate size', () => {\n    const size = binding.getSize();\n    expect(size.width).to.equal(100);\n    expect(size.height).to.equal(100);\n  });","file":"unit/test-viewport-binding.js","skipped":false,"dir":"test"},{"name":"should calculate scrollTop from wrapper","suites":[],"updatePoint":{"line":353,"column":45,"index":14598},"line":353,"code":"  it('should calculate scrollTop from wrapper', () => {\n    binding.wrapper_.scrollTop = 17;\n    expect(binding.getScrollTop()).to.equal(17);\n  });","file":"unit/test-viewport-binding.js","skipped":false,"dir":"test"},{"name":"should calculate scrollWidth from wrapper","suites":[],"updatePoint":{"line":357,"column":47,"index":14748},"line":357,"code":"  it('should calculate scrollWidth from wrapper', () => {\n    expect(binding.getScrollWidth()).to.equal(200);\n  });","file":"unit/test-viewport-binding.js","skipped":false,"dir":"test"},{"name":"should calculate scrollHeight from wrapper","suites":[],"updatePoint":{"line":360,"column":48,"index":14865},"line":360,"code":"  it('should calculate scrollHeight from wrapper', () => {\n    expect(binding.getScrollHeight()).to.equal(301); // +1px for border-top.\n  });","file":"unit/test-viewport-binding.js","skipped":false,"dir":"test"},{"name":"should calculate contentHeight from body height","suites":[],"updatePoint":{"line":364,"column":53,"index":15013},"line":364,"code":"  it('should calculate contentHeight from body height', () => {\n    // Set content to be smaller than viewport.\n    child.style.height = '50px';\n    expect(binding.getContentHeight()).to.equal(51);\n  });","file":"unit/test-viewport-binding.js","skipped":false,"dir":"test"},{"name":"should include padding top in contentHeight","suites":[],"updatePoint":{"line":369,"column":49,"index":15213},"line":369,"code":"  it('should include padding top in contentHeight', () => {\n    binding.updatePaddingTop(10);\n    binding.setScrollTop(20); // should have no effect on height\n    expect(binding.getContentHeight()).to.equal(311); // +1px for border-top.\n  });","file":"unit/test-viewport-binding.js","skipped":false,"dir":"test"},{"name":"should account for child margin-top","suites":[],"updatePoint":{"line":375,"column":41,"index":15449},"line":375,"code":"  it('should account for child margin-top', () => {\n    child.style.marginTop = '15px';\n    expect(binding.getContentHeight()).to.equal(316); // +1px for border-top.\n  });","file":"unit/test-viewport-binding.js","skipped":false,"dir":"test"},{"name":"should update scrollTop on wrapper","suites":[],"updatePoint":{"line":380,"column":40,"index":15621},"line":380,"code":"  it('should update scrollTop on wrapper', () => {\n    binding.setScrollTop(21);\n    expect(binding.wrapper_.scrollTop).to.equal(21);\n  });","file":"unit/test-viewport-binding.js","skipped":false,"dir":"test"},{"name":"should adjust scrollTop to avoid scroll freeze","suites":[],"updatePoint":{"line":384,"column":52,"index":15773},"line":384,"code":"  it('should adjust scrollTop to avoid scroll freeze', () => {\n    binding.setScrollTop(21);\n    expect(binding.wrapper_.scrollTop).to.equal(21);\n\n    // `scrollTop=0` is normally not allowed.\n    binding.setScrollTop(0);\n    expect(binding.wrapper_.scrollTop).to.equal(1);\n  });","file":"unit/test-viewport-binding.js","skipped":false,"dir":"test"},{"name":"should offset client rect for layout","suites":[],"updatePoint":{"line":392,"column":42,"index":16043},"line":392,"code":"  it('should offset client rect for layout', () => {\n    binding.wrapper_.scrollTop = 200;\n    const el = {\n      getBoundingClientRect: () => {\n        return {\n          left: 11.5,\n          top: 12.5,\n          width: 13.5,\n          height: 14.5\n        };\n      }\n    };\n    const rect = binding.getLayoutRect(el);\n    expect(rect.top).to.equal(213); // round(200 + 12.5)\n    expect(rect.width).to.equal(14); // round(13.5)\n    expect(rect.height).to.equal(15); // round(14.5)\n  });","file":"unit/test-viewport-binding.js","skipped":false,"dir":"test"},{"name":"should offset client rect for layout and position passed in","suites":[],"updatePoint":{"line":410,"column":65,"index":16556},"line":410,"code":"  it('should offset client rect for layout and position passed in', () => {\n    binding.wrapper_.scrollTop = 10;\n    const el = {\n      getBoundingClientRect: () => {\n        return {\n          left: 11.5,\n          top: 12.5,\n          width: 13.5,\n          height: 14.5\n        };\n      }\n    };\n    const rect = binding.getLayoutRect(el, 100, 200);\n    expect(rect.left).to.equal(112); // round(100 + 11.5)\n    expect(rect.top).to.equal(213); // round(200 + 12.5)\n    expect(rect.width).to.equal(14); // round(13.5)\n    expect(rect.height).to.equal(15); // round(14.5)\n  });","file":"unit/test-viewport-binding.js","skipped":false,"dir":"test"},{"name":"should call scroll event","suites":[],"updatePoint":{"line":429,"column":30,"index":17101},"line":429,"code":"  it('should call scroll event', () => {\n    return new Promise(resolve => {\n      binding.onScroll(resolve);\n      binding.wrapper_.scrollTop = 11;\n    }).then(() => {\n      expect(binding.getScrollTop()).to.equal(11);\n    });\n  });","file":"unit/test-viewport-binding.js","skipped":false,"dir":"test"},{"name":"should disable scroll temporarily and reset scroll","suites":[],"updatePoint":{"line":437,"column":56,"index":17361},"line":437,"code":"  it('should disable scroll temporarily and reset scroll', () => {\n    let wrapperCss = win.getComputedStyle(binding.wrapper_);\n    expect(wrapperCss.overflowX).to.equal('hidden');\n    expect(wrapperCss.overflowY).to.equal('auto');\n    binding.disableScroll();\n    expect(binding.wrapper_).to.have.class('i-amphtml-scroll-disabled');\n    wrapperCss = win.getComputedStyle(binding.wrapper_);\n    expect(wrapperCss.overflowX).to.equal('hidden');\n    expect(wrapperCss.overflowY).to.equal('hidden');\n    binding.resetScroll();\n    expect(binding.wrapper_).to.not.have.class('i-amphtml-scroll-disabled');\n    wrapperCss = win.getComputedStyle(binding.wrapper_);\n    expect(wrapperCss.overflowX).to.equal('hidden');\n    expect(wrapperCss.overflowY).to.equal('auto');\n  });","file":"unit/test-viewport-binding.js","skipped":false,"dir":"test"},{"name":"should NOT refresh overscroll w/o experiment","suites":[],"updatePoint":{"line":452,"column":50,"index":18123},"line":452,"code":"  it('should NOT refresh overscroll w/o experiment', () => {\n    binding.contentHeightChanged();\n    const root = win.document.documentElement;\n    return vsync.mutatePromise().then(() => {\n      expect(root).to.have.class('i-amphtml-ios-overscroll');\n    });\n  });","file":"unit/test-viewport-binding.js","skipped":false,"dir":"test"},{"name":"should set singledoc class","suites":["top-level classes"],"updatePoint":{"line":150,"column":34,"index":5240},"line":150,"code":"    it('should set singledoc class', () => {\n      new ViewportImpl(ampdoc, binding, viewer);\n      expect(root).to.have.class('i-amphtml-singledoc');\n    });","file":"unit/test-viewport.js","skipped":false,"dir":"test"},{"name":"should not set singledoc class","suites":["top-level classes"],"updatePoint":{"line":154,"column":38,"index":5403},"line":154,"code":"    it('should not set singledoc class', () => {\n      expectAsyncConsoleError(/Expected service/);\n      env.sandbox.stub(ampdoc, 'isSingleDoc').callsFake(() => false);\n      new ViewportImpl(ampdoc, binding, viewer);\n      expect(root).to.not.have.class('i-amphtml-singledoc');\n    });","file":"unit/test-viewport.js","skipped":false,"dir":"test"},{"name":"should set standalone class","suites":["top-level classes"],"updatePoint":{"line":160,"column":35,"index":5688},"line":160,"code":"    it('should set standalone class', () => {\n      new ViewportImpl(ampdoc, binding, viewer);\n      expect(root).to.have.class('i-amphtml-standalone');\n      expect(root).to.not.have.class('i-amphtml-embedded');\n    });","file":"unit/test-viewport.js","skipped":false,"dir":"test"},{"name":"should set embedded class","suites":["top-level classes"],"updatePoint":{"line":165,"column":33,"index":5907},"line":165,"code":"    it('should set embedded class', () => {\n      env.sandbox.stub(viewer, 'isEmbedded').callsFake(() => true);\n      new ViewportImpl(ampdoc, binding, viewer);\n      expect(root).to.have.class('i-amphtml-embedded');\n      expect(root).to.not.have.class('i-amphtml-standalone');\n    });","file":"unit/test-viewport.js","skipped":false,"dir":"test"},{"name":"should not set iframed class","suites":["top-level classes"],"updatePoint":{"line":171,"column":36,"index":6197},"line":171,"code":"    it('should not set iframed class', () => {\n      new ViewportImpl(ampdoc, binding, viewer);\n      expect(root).to.not.have.class('i-amphtml-iframed');\n    });","file":"unit/test-viewport.js","skipped":false,"dir":"test"},{"name":"should set iframed class","suites":["top-level classes"],"updatePoint":{"line":175,"column":32,"index":6356},"line":175,"code":"    it('should set iframed class', () => {\n      ampdoc.win.parent = {};\n      new ViewportImpl(ampdoc, binding, viewer);\n      expect(root).to.have.class('i-amphtml-iframed');\n    });","file":"unit/test-viewport.js","skipped":false,"dir":"test"},{"name":"should scroll when in a single doc","suites":["top-level classes","scroll to in ios-webview"],"updatePoint":{"line":191,"column":44,"index":6898},"line":191,"code":"      it('should scroll when in a single doc', async () => {\n        env.sandbox.stub(ampdoc, 'isSingleDoc').returns(true);\n        new ViewportImpl(ampdoc, binding, viewer);\n        await ampdoc.whenReady();\n        expect(ampdoc.win.scrollTo).to.have.been.called;\n      });","file":"unit/test-viewport.js","skipped":false,"dir":"test"},{"name":"should *not* scroll when in a shadow doc","suites":["top-level classes","scroll to in ios-webview"],"updatePoint":{"line":197,"column":50,"index":7180},"line":197,"code":"      it('should *not* scroll when in a shadow doc', async () => {\n        env.sandbox.stub(ampdoc, 'isSingleDoc').returns(false);\n        new ViewportImpl(ampdoc, binding, viewer);\n        await ampdoc.whenReady();\n        expect(ampdoc.win.scrollTo).not.to.have.been.called;\n      });","file":"unit/test-viewport.js","skipped":false,"dir":"test"},{"name":"should set ios-webview class","suites":["top-level classes","ios-webview"],"updatePoint":{"line":219,"column":38,"index":7934},"line":219,"code":"      it('should set ios-webview class', () => {\n        new ViewportImpl(ampdoc, binding, viewer);\n        expect(root).to.have.class('i-amphtml-webview');\n      });","file":"unit/test-viewport.js","skipped":false,"dir":"test"},{"name":"should set ios-webview class even when not on iOS","suites":["top-level classes","ios-webview"],"updatePoint":{"line":223,"column":59,"index":8122},"line":223,"code":"      it('should set ios-webview class even when not on iOS', () => {\n        isIos = false;\n        new ViewportImpl(ampdoc, binding, viewer);\n        expect(root).to.have.class('i-amphtml-webview');\n      });","file":"unit/test-viewport.js","skipped":false,"dir":"test"},{"name":"should not set ios-webview class w/o webview param","suites":["top-level classes","ios-webview"],"updatePoint":{"line":228,"column":60,"index":8334},"line":228,"code":"      it('should not set ios-webview class w/o webview param', () => {\n        webviewParam = null;\n        new ViewportImpl(ampdoc, binding, viewer);\n        expect(root).to.not.have.class('i-amphtml-webview');\n      });","file":"unit/test-viewport.js","skipped":false,"dir":"test"},{"name":"should be ok with non-zero dimensions","suites":["zero dimensions"],"updatePoint":{"line":244,"column":45,"index":8841},"line":244,"code":"    it('should be ok with non-zero dimensions', () => {\n      expect(viewport.getSize().width).to.equal(111);\n      expect(viewport.getSize().height).to.equal(222);\n      expect(errorStub).to.not.be.called;\n    });","file":"unit/test-viewport.js","skipped":false,"dir":"test"},{"name":"should report zero width","suites":["zero dimensions"],"updatePoint":{"line":249,"column":32,"index":9043},"line":249,"code":"    it('should report zero width', () => {\n      binding.getSize = () => {\n        return {\n          width: 0,\n          height: viewportSize.height\n        };\n      };\n      expect(viewport.getSize().width).to.equal(0);\n      expect(viewport.getSize().height).to.equal(222);\n      expect(errorStub).to.be.calledOnce;\n      expect(errorStub).to.be.calledWith('Viewport', 'viewport has zero dimensions');\n    });","file":"unit/test-viewport.js","skipped":false,"dir":"test"},{"name":"should report zero height","suites":["zero dimensions"],"updatePoint":{"line":261,"column":33,"index":9457},"line":261,"code":"    it('should report zero height', () => {\n      binding.getSize = () => {\n        return {\n          width: viewportSize.width,\n          height: 0\n        };\n      };\n      expect(viewport.getSize().width).to.equal(111);\n      expect(viewport.getSize().height).to.equal(0);\n      expect(errorStub).to.be.calledOnce;\n      expect(errorStub).to.be.calledWith('Viewport', 'viewport has zero dimensions');\n    });","file":"unit/test-viewport.js","skipped":false,"dir":"test"},{"name":"should report both zero width and height","suites":["zero dimensions"],"updatePoint":{"line":273,"column":48,"index":9885},"line":273,"code":"    it('should report both zero width and height', () => {\n      binding.getSize = () => {\n        return {\n          width: 0,\n          height: 0\n        };\n      };\n      expect(viewport.getSize().width).to.equal(0);\n      expect(viewport.getSize().height).to.equal(0);\n      expect(errorStub).to.be.calledOnce;\n      expect(errorStub).to.be.calledWith('Viewport', 'viewport has zero dimensions');\n    });","file":"unit/test-viewport.js","skipped":false,"dir":"test"},{"name":"should report only 1% of the time","suites":["zero dimensions"],"updatePoint":{"line":285,"column":41,"index":10287},"line":285,"code":"    it('should report only 1% of the time', () => {\n      binding.getSize = () => {\n        return {\n          width: 0,\n          height: 0\n        };\n      };\n      randomValue = 0.011;\n      expect(viewport.getSize().width).to.equal(0);\n      expect(viewport.getSize().height).to.equal(0);\n      expect(errorStub).to.not.be.called;\n    });","file":"unit/test-viewport.js","skipped":false,"dir":"test"},{"name":"should report in prerender state","suites":["zero dimensions"],"updatePoint":{"line":297,"column":40,"index":10629},"line":297,"code":"    it('should report in prerender state', () => {\n      visibilityState = 'prerender';\n      binding.getSize = () => {\n        return {\n          width: 0,\n          height: 0\n        };\n      };\n      expect(viewport.getSize().width).to.equal(0);\n      expect(viewport.getSize().height).to.equal(0);\n      expect(errorStub).to.be.calledOnce;\n      expect(errorStub).to.be.calledWith('Viewport', 'viewport has zero dimensions');\n    });","file":"unit/test-viewport.js","skipped":false,"dir":"test"},{"name":"should NOT report in hidden state","suites":["zero dimensions"],"updatePoint":{"line":310,"column":41,"index":11068},"line":310,"code":"    it('should NOT report in hidden state', () => {\n      visibilityState = 'hidden';\n      binding.getSize = () => {\n        return {\n          width: 0,\n          height: 0\n        };\n      };\n      expect(viewport.getSize().width).to.equal(0);\n      expect(viewport.getSize().height).to.equal(0);\n      expect(errorStub).to.not.be.called;\n    });","file":"unit/test-viewport.js","skipped":false,"dir":"test"},{"name":"should NOT report in inactive state","suites":["zero dimensions"],"updatePoint":{"line":322,"column":43,"index":11420},"line":322,"code":"    it('should NOT report in inactive state', () => {\n      visibilityState = 'inactive';\n      binding.getSize = () => {\n        return {\n          width: 0,\n          height: 0\n        };\n      };\n      expect(viewport.getSize().width).to.equal(0);\n      expect(viewport.getSize().height).to.equal(0);\n      expect(errorStub).to.not.be.called;\n    });","file":"unit/test-viewport.js","skipped":false,"dir":"test"},{"name":"should connect binding right away when visible","suites":["zero dimensions"],"updatePoint":{"line":335,"column":52,"index":11789},"line":335,"code":"  it('should connect binding right away when visible', () => {\n    expect(binding.connect).to.be.calledOnce;\n    expect(binding.disconnect).to.not.be.called;\n  });","file":"unit/test-viewport.js","skipped":false,"dir":"test"},{"name":"should disconnect binding on dispose","suites":["zero dimensions"],"updatePoint":{"line":339,"column":42,"index":11943},"line":339,"code":"  it('should disconnect binding on dispose', () => {\n    viewport.dispose();\n    expect(binding.disconnect).to.be.calledOnce;\n  });","file":"unit/test-viewport.js","skipped":false,"dir":"test"},{"name":"should connect binding later when visibility changes","suites":["zero dimensions"],"updatePoint":{"line":343,"column":58,"index":12091},"line":343,"code":"  it('should connect binding later when visibility changes', () => {\n    onVisibilityHandlers.length = 0;\n    changeVisibilityState('hidden');\n    binding.connect = env.sandbox.spy();\n    binding.disconnect = env.sandbox.spy();\n    viewport = new ViewportImpl(ampdoc, binding, viewer);\n\n    // Hasn't been called at first.\n    expect(binding.connect).to.not.be.called;\n    expect(binding.disconnect).to.not.be.called;\n    expect(viewport.size_).to.be.null;\n\n    // When becomes visible - it gets called.\n    changeVisibilityState('visible');\n    expect(binding.connect).to.be.calledOnce;\n    expect(binding.disconnect).to.not.be.called;\n\n    // Repeat visibility calls do not affect anything.\n    changeVisibilityState('visible');\n    expect(binding.connect).to.be.calledOnce;\n    expect(binding.disconnect).to.not.be.called;\n\n    // When becomes invisible - it gets disconnected.\n    changeVisibilityState('hidden');\n    expect(binding.connect).to.be.calledOnce;\n    expect(binding.disconnect).to.be.calledOnce;\n  });","file":"unit/test-viewport.js","skipped":false,"dir":"test"},{"name":"should update scroll position when visibility changes","suites":["zero dimensions"],"updatePoint":{"line":370,"column":59,"index":13111},"line":370,"code":"  it('should update scroll position when visibility changes', () => {\n    binding = new ViewportBindingDef();\n    binding.getScrollTop = (() => {\n      const generator = function* () {\n        yield 25;\n        return 100;\n      }();\n      return () => generator.next().value;\n    })();\n    viewport = new ViewportImpl(ampdoc, binding, viewer);\n\n    // Force scrollTop to be measured\n    viewport.getScrollTop();\n    expect(viewport. /*OK*/scrollTop_).to.equal(25);\n    // Toggle visibility state\n    changeVisibilityState('prerender');\n    changeVisibilityState('visible');\n    // Expect scrollTop to be remeasured\n    expect(viewport. /*OK*/scrollTop_).to.equal(100);\n  });","file":"unit/test-viewport.js","skipped":false,"dir":"test"},{"name":"should resize only after size has been initialized","suites":["zero dimensions"],"updatePoint":{"line":390,"column":56,"index":13784},"line":390,"code":"  it('should resize only after size has been initialized', () => {\n    onVisibilityHandlers.length = 0;\n    changeVisibilityState('visible');\n    binding.connect = env.sandbox.spy();\n    binding.disconnect = env.sandbox.spy();\n    viewport = new ViewportImpl(ampdoc, binding, viewer);\n\n    // Size has not be initialized yet.\n    expect(binding.connect).to.be.calledOnce;\n    expect(binding.disconnect).to.not.be.called;\n    expect(viewport.size_).to.be.null;\n\n    // Disconnect: ignore resizing.\n    changeVisibilityState('hidden');\n    expect(binding.connect).to.be.calledOnce;\n    expect(binding.disconnect).to.be.calledOnce;\n    expect(viewport.size_).to.be.null;\n\n    // Size has been initialized.\n    viewport.size_ = {\n      width: 0,\n      height: 0\n    };\n    changeVisibilityState('visible');\n    expect(binding.connect).to.be.calledTwice;\n    expect(binding.disconnect).to.be.calledOnce;\n    expect(viewport.size_).to.deep.equal(viewportSize);\n  });","file":"unit/test-viewport.js","skipped":false,"dir":"test"},{"name":"should pass through size and scroll when embedded","suites":["zero dimensions"],"updatePoint":{"line":418,"column":55,"index":14744},"line":418,"code":"  it('should pass through size and scroll when embedded', () => {\n    env.sandbox.stub(viewer, 'isEmbedded').callsFake(() => true);\n    new ViewportImpl(ampdoc, binding, viewer);\n    expect(viewer.isEmbedded()).to.be.true;\n    expect(viewport.getPaddingTop()).to.equal(19);\n    expect(updatedPaddingTop).to.equal(19);\n    expect(viewport.getSize().width).to.equal(111);\n    expect(viewport.getSize().height).to.equal(222);\n    expect(viewport.getScrollTop()).to.equal(17);\n    expect(viewport.getRect().left).to.equal(0);\n    expect(viewport.getRect().top).to.equal(17);\n    expect(viewport.getRect().width).to.equal(111);\n    expect(viewport.getRect().height).to.equal(222);\n  });","file":"unit/test-viewport.js","skipped":false,"dir":"test"},{"name":"should pass through size and scroll when not embedded","suites":["zero dimensions"],"updatePoint":{"line":432,"column":59,"index":15430},"line":432,"code":"  it('should pass through size and scroll when not embedded', () => {\n    expect(viewer.isEmbedded()).to.be.false;\n    expect(viewport.getPaddingTop()).to.equal(19);\n    expect(updatedPaddingTop).to.equal(undefined);\n    expect(viewport.getSize().width).to.equal(111);\n    expect(viewport.getSize().height).to.equal(222);\n    expect(viewport.getScrollTop()).to.equal(17);\n    expect(viewport.getRect().left).to.equal(0);\n    expect(viewport.getRect().top).to.equal(17);\n    expect(viewport.getRect().width).to.equal(111);\n    expect(viewport.getRect().height).to.equal(222);\n  });","file":"unit/test-viewport.js","skipped":false,"dir":"test"},{"name":"should cache result for getRect()","suites":["zero dimensions"],"updatePoint":{"line":444,"column":39,"index":15991},"line":444,"code":"  it('should cache result for getRect()', () => {\n    assert.strictEqual(viewport.getRect(), viewport.getRect());\n  });","file":"unit/test-viewport.js","skipped":false,"dir":"test"},{"name":"should invalidate getRect() cache after scroll","suites":["zero dimensions"],"updatePoint":{"line":447,"column":52,"index":16124},"line":447,"code":"  it('should invalidate getRect() cache after scroll', () => {\n    expect(viewport.getRect().top).to.equal(17);\n\n    // Scroll vertically.\n    binding.getScrollTop = () => 44;\n    viewport.scroll_();\n    expect(viewport.getRect().top).to.equal(44);\n  });","file":"unit/test-viewport.js","skipped":false,"dir":"test"},{"name":"should invalidate getRect() cache after resize","suites":["zero dimensions"],"updatePoint":{"line":455,"column":52,"index":16379},"line":455,"code":"  it('should invalidate getRect() cache after resize', () => {\n    expect(viewport.getRect().width).to.equal(111);\n\n    // Resize horizontally.\n    viewportSize.width = 112;\n    viewport.resize_();\n    expect(viewport.getRect().width).to.equal(112);\n  });","file":"unit/test-viewport.js","skipped":false,"dir":"test"},{"name":"should not relayout on height resize","suites":["zero dimensions"],"updatePoint":{"line":463,"column":42,"index":16625},"line":463,"code":"  it('should not relayout on height resize', () => {\n    let changeEvent = null;\n    viewport.onChanged(event => {\n      changeEvent = event;\n    });\n    viewportSize.height = 223;\n    viewport.resize_();\n    expect(changeEvent).to.not.equal(null);\n    expect(changeEvent.relayoutAll).to.equal(false);\n    expect(changeEvent.velocity).to.equal(0);\n  });","file":"unit/test-viewport.js","skipped":false,"dir":"test"},{"name":"should relayout on width resize","suites":["zero dimensions"],"updatePoint":{"line":474,"column":37,"index":16974},"line":474,"code":"  it('should relayout on width resize', () => {\n    let changeEvent = null;\n    viewport.onChanged(event => {\n      changeEvent = event;\n    });\n    viewportSize.width = 112;\n    viewport.resize_();\n    expect(changeEvent).to.not.equal(null);\n    expect(changeEvent.relayoutAll).to.equal(true);\n    expect(changeEvent.velocity).to.equal(0);\n  });","file":"unit/test-viewport.js","skipped":false,"dir":"test"},{"name":"should defer change event until fixed layer is complete","suites":["zero dimensions"],"updatePoint":{"line":485,"column":61,"index":17345},"line":485,"code":"  it('should defer change event until fixed layer is complete', () => {\n    let changeEvent = null;\n    viewport.onChanged(event => {\n      changeEvent = event;\n    });\n    let fixedResolver;\n    const fixedPromise = new Promise(resolve => fixedResolver = resolve);\n    viewport.fixedLayer_ = {\n      update: () => fixedPromise\n    };\n    viewportSize.width = 112;\n    viewport.resize_();\n    expect(changeEvent).to.be.null;\n    fixedResolver();\n    return fixedPromise.then(() => {\n      expect(changeEvent).to.not.be.null;\n    });\n  });","file":"unit/test-viewport.js","skipped":false,"dir":"test"},{"name":"should dispatch onResize on width resize","suites":["zero dimensions"],"updatePoint":{"line":503,"column":46,"index":17869},"line":503,"code":"  it('should dispatch onResize on width resize', () => {\n    let resizeEvent = null;\n    viewport.onResize(event => {\n      resizeEvent = event;\n    });\n    viewportSize.width = 112;\n    viewport.resize_();\n    expect(resizeEvent).to.not.equal(null);\n    expect(resizeEvent.height).to.equal(viewportSize.height);\n    expect(resizeEvent.width).to.equal(viewportSize.width);\n    // Width changed, relayoutAll should be true\n    expect(resizeEvent.relayoutAll).to.be.true;\n  });","file":"unit/test-viewport.js","skipped":false,"dir":"test"},{"name":"should dispatch onResize on height resize","suites":["zero dimensions"],"updatePoint":{"line":516,"column":47,"index":18346},"line":516,"code":"  it('should dispatch onResize on height resize', () => {\n    let resizeEvent = null;\n    viewport.onResize(event => {\n      resizeEvent = event;\n    });\n    viewportSize.height = 223;\n    viewport.resize_();\n    expect(resizeEvent).to.not.equal(null);\n    expect(resizeEvent.height).to.equal(viewportSize.height);\n    expect(resizeEvent.width).to.equal(viewportSize.width);\n    // Only height changed, relayoutAll should be false\n    expect(resizeEvent.relayoutAll).to.be.false;\n  });","file":"unit/test-viewport.js","skipped":false,"dir":"test"},{"name":"should not dispatch onResize if size does not actually change","suites":["zero dimensions"],"updatePoint":{"line":529,"column":67,"index":18852},"line":529,"code":"  it('should not dispatch onResize if size does not actually change', () => {\n    let resizeEvent = null;\n    viewport.onResize(event => {\n      resizeEvent = event;\n    });\n    viewport.size_ = {\n      width: 200,\n      height: 200\n    };\n    viewportSize.width = 200;\n    viewportSize.height = 200;\n    viewport.resize_();\n    expect(resizeEvent).to.equal(null);\n  });","file":"unit/test-viewport.js","skipped":false,"dir":"test"},{"name":"should not do anything if padding is not changed","suites":["zero dimensions"],"updatePoint":{"line":543,"column":54,"index":19210},"line":543,"code":"  it('should not do anything if padding is not changed', () => {\n    const bindingMock = env.sandbox.mock(binding);\n    viewerViewportHandler({\n      paddingTop: 19\n    });\n    bindingMock.verify();\n  });","file":"unit/test-viewport.js","skipped":false,"dir":"test"},{"name":"should update non-transient padding","suites":["zero dimensions"],"updatePoint":{"line":550,"column":41,"index":19402},"line":550,"code":"  it('should update non-transient padding', () => {\n    const bindingMock = env.sandbox.mock(binding);\n    const fixedLayerMock = env.sandbox.mock(viewport.fixedLayer_);\n    fixedLayerMock.expects('animateFixedElements').withExactArgs( /* paddingTop */0, /* lastPaddingTop */19, /* duration */0, /* curve */undefined, /* transient */undefined).once();\n    viewerViewportHandler({\n      paddingTop: 0\n    });\n    bindingMock.verify();\n    fixedLayerMock.verify();\n  });","file":"unit/test-viewport.js","skipped":false,"dir":"test"},{"name":"should update padding when viewer wants to hide header","suites":["zero dimensions"],"updatePoint":{"line":560,"column":60,"index":19890},"line":560,"code":"  it('should update padding when viewer wants to hide header', () => {\n    const bindingMock = env.sandbox.mock(binding);\n    const fixedLayerMock = env.sandbox.mock(viewport.fixedLayer_);\n    fixedLayerMock.expects('animateFixedElements').withExactArgs( /* paddingTop */0, /* lastPaddingTop */19, /* duration */300, /* curve */'ease-in', /* transient */true).once();\n    bindingMock.expects('hideViewerHeader').withArgs(true, 19).once();\n    viewerViewportHandler({\n      paddingTop: 0,\n      duration: 300,\n      curve: 'ease-in',\n      transient: true\n    });\n    bindingMock.verify();\n    fixedLayerMock.verify();\n  });","file":"unit/test-viewport.js","skipped":false,"dir":"test"},{"name":"should update viewport when entering lightbox mode","suites":["zero dimensions"],"updatePoint":{"line":574,"column":56,"index":20510},"line":574,"code":"  it('should update viewport when entering lightbox mode', () => {\n    const requestingEl = document.createElement('div');\n    viewport.vsync_ = {\n      mutate: callback => callback()\n    };\n    env.sandbox.stub(viewport, 'enterOverlayMode');\n    env.sandbox.stub(viewport, 'maybeEnterFieLightboxMode').callsFake(NOOP);\n    env.sandbox.stub(viewport.fixedLayer_, 'enterLightbox');\n    const bindingMock = env.sandbox.mock(binding);\n    bindingMock.expects('updateLightboxMode').withArgs(true).once();\n    viewport.enterLightboxMode(requestingEl);\n    bindingMock.verify();\n    expect(viewport.enterOverlayMode).to.be.calledOnce;\n    expect(viewport.maybeEnterFieLightboxMode).to.be.calledOnce;\n    expect(viewport.fixedLayer_.enterLightbox).to.be.calledOnce;\n    expect(viewer.sendMessage).to.have.been.calledOnce;\n    expect(viewer.sendMessage).to.have.been.calledWith('requestFullOverlay', {}, true);\n  });","file":"unit/test-viewport.js","skipped":false,"dir":"test"},{"name":"should update viewport when leaving lightbox mode","suites":["zero dimensions"],"updatePoint":{"line":592,"column":55,"index":21418},"line":592,"code":"  it('should update viewport when leaving lightbox mode', () => {\n    const requestingEl = document.createElement('div');\n    viewport.vsync_ = {\n      mutate: callback => callback()\n    };\n    env.sandbox.stub(viewport, 'leaveOverlayMode');\n    env.sandbox.stub(viewport, 'maybeLeaveFieLightboxMode').callsFake(NOOP);\n    env.sandbox.stub(viewport.fixedLayer_, 'leaveLightbox');\n    const bindingMock = env.sandbox.mock(binding);\n    bindingMock.expects('updateLightboxMode').withArgs(false).once();\n    viewport.leaveLightboxMode(requestingEl);\n    bindingMock.verify();\n    expect(viewport.leaveOverlayMode).to.be.calledOnce;\n    expect(viewport.maybeLeaveFieLightboxMode).to.be.calledOnce;\n    expect(viewport.fixedLayer_.leaveLightbox).to.be.calledOnce;\n    expect(viewer.sendMessage).to.have.been.calledOnce;\n    expect(viewer.sendMessage).to.have.been.calledWith('cancelFullOverlay', {}, true);\n  });","file":"unit/test-viewport.js","skipped":false,"dir":"test"},{"name":"should enter full overlay on FIE when entering lightbox mode","suites":["zero dimensions"],"updatePoint":{"line":610,"column":66,"index":22337},"line":610,"code":"  it('should enter full overlay on FIE when entering lightbox mode', () => {\n    const requestingElement = {};\n    const fieMock = {\n      enterFullOverlayMode: env.sandbox.spy()\n    };\n    env.sandbox.stub(viewport, 'isLightboxExperimentOn').callsFake(() => true);\n    env.sandbox.stub(viewport, 'getFriendlyIframeEmbed_').callsFake(el => {\n      expect(el).to.equal(requestingElement);\n      return fieMock;\n    });\n    viewport.maybeEnterFieLightboxMode(requestingElement);\n    expect(fieMock.enterFullOverlayMode).to.be.calledOnce;\n  });","file":"unit/test-viewport.js","skipped":false,"dir":"test"},{"name":"should leave full overlay on FIE when leaving lightbox mode","suites":["zero dimensions"],"updatePoint":{"line":623,"column":65,"index":22878},"line":623,"code":"  it('should leave full overlay on FIE when leaving lightbox mode', () => {\n    const requestingElement = {};\n    const fieMock = {\n      leaveFullOverlayMode: env.sandbox.spy()\n    };\n    env.sandbox.stub(viewport, 'getFriendlyIframeEmbed_').callsFake(el => {\n      expect(el).to.equal(requestingElement);\n      return fieMock;\n    });\n    viewport.maybeLeaveFieLightboxMode(requestingElement);\n    expect(fieMock.leaveFullOverlayMode).to.be.calledOnce;\n  });","file":"unit/test-viewport.js","skipped":false,"dir":"test"},{"name":"should update viewport when entering overlay mode","suites":["zero dimensions"],"updatePoint":{"line":635,"column":55,"index":23329},"line":635,"code":"  it('should update viewport when entering overlay mode', () => {\n    const disableTouchZoomStub = env.sandbox.stub(viewport, 'disableTouchZoom');\n    const disableScrollStub = env.sandbox.stub(viewport, 'disableScroll');\n    viewport.enterOverlayMode();\n    expect(disableTouchZoomStub).to.be.calledOnce;\n    expect(disableScrollStub).to.be.calledOnce;\n  });","file":"unit/test-viewport.js","skipped":false,"dir":"test"},{"name":"should update viewport when leaving overlay mode","suites":["zero dimensions"],"updatePoint":{"line":642,"column":54,"index":23688},"line":642,"code":"  it('should update viewport when leaving overlay mode', () => {\n    const restoreOriginalTouchZoomStub = env.sandbox.stub(viewport, 'restoreOriginalTouchZoom');\n    const resetScrollStub = env.sandbox.stub(viewport, 'resetScroll');\n    viewport.leaveOverlayMode();\n    expect(restoreOriginalTouchZoomStub).to.be.calledOnce;\n    expect(resetScrollStub).to.be.calledOnce;\n  });","file":"unit/test-viewport.js","skipped":false,"dir":"test"},{"name":"should disable scrolling based on requests","suites":["zero dimensions"],"updatePoint":{"line":649,"column":48,"index":24059},"line":649,"code":"  it('should disable scrolling based on requests', () => {\n    const disableScrollStub = env.sandbox.stub(viewport, 'disableScroll');\n    viewerDisableScrollHandler(true);\n    expect(disableScrollStub).to.be.calledOnce;\n  });","file":"unit/test-viewport.js","skipped":false,"dir":"test"},{"name":"should reset scrolling based on requests","suites":["zero dimensions"],"updatePoint":{"line":654,"column":46,"index":24283},"line":654,"code":"  it('should reset scrolling based on requests', () => {\n    const resetScrollStub = env.sandbox.stub(viewport, 'resetScroll');\n    viewerDisableScrollHandler(false);\n    expect(resetScrollStub).to.be.calledOnce;\n  });","file":"unit/test-viewport.js","skipped":false,"dir":"test"},{"name":"should send scroll events","suites":["zero dimensions"],"updatePoint":{"line":659,"column":31,"index":24487},"line":659,"code":"  it('should send scroll events', () => {\n    // 0         ->    6     ->      12   ->      16         ->   18\n    // scroll-10    scroll-20    scroll-30   2nd anim frame    scroll-40\n\n    // when there's no scroll\n    expect(viewport.scrollAnimationFrameThrottled_).to.be.false;\n    expect(viewer.sendMessage).to.not.have.been.called;\n    // scroll to 10\n    viewport.getScrollTop = () => 10;\n    viewport.sendScrollMessage_();\n    expect(viewport.scrollAnimationFrameThrottled_).to.be.true;\n    expect(viewer.sendMessage).to.not.have.been.called;\n    // 6 ticks later, still during first animation frame\n    clock.tick(6);\n    expect(viewport.scrollAnimationFrameThrottled_).to.be.true;\n    // scroll to 20\n    viewport.getScrollTop = () => 20;\n    viewport.sendScrollMessage_();\n    expect(viewport.scrollAnimationFrameThrottled_).to.be.true;\n    expect(viewer.sendMessage).to.not.have.been.called;\n    // 6 ticks later, still during first animation frame\n    clock.tick(6);\n    expect(viewport.scrollAnimationFrameThrottled_).to.be.true;\n    // scroll to 30\n    viewport.getScrollTop = () => 30;\n    viewport.sendScrollMessage_();\n    expect(viewport.scrollAnimationFrameThrottled_).to.be.true;\n    expect(viewer.sendMessage).to.not.have.been.called;\n    // 6 ticks later, second animation frame starts\n    clock.tick(6);\n    expect(viewport.scrollAnimationFrameThrottled_).to.be.false;\n    expect(viewer.sendMessage).to.have.been.calledOnce;\n    expect(viewer.sendMessage.lastCall.args[0]).to.equal('scroll');\n    expect(viewer.sendMessage.lastCall.args[1].scrollTop).to.equal(30);\n    // scroll to 40\n    viewport.getScrollTop = () => 40;\n    viewport.sendScrollMessage_();\n    expect(viewport.scrollAnimationFrameThrottled_).to.be.true;\n    expect(viewer.sendMessage).to.have.been.calledOnce;\n  });","file":"unit/test-viewport.js","skipped":false,"dir":"test"},{"name":"should defer scroll events","suites":["zero dimensions"],"updatePoint":{"line":699,"column":32,"index":26294},"line":699,"code":"  it('should defer scroll events', () => {\n    let changeEvent = null;\n    let eventCount = 0;\n    viewport.onChanged(event => {\n      changeEvent = event;\n      eventCount++;\n    });\n    // when there's no scroll\n    expect(viewport.scrollTracking_).to.be.false;\n    expect(viewer.sendMessage).to.not.have.been.called;\n\n    // time 0: scroll to 34\n    // raf for viewer.postScroll, delay 36 ticks till raf for throttledScroll_\n    binding.getScrollTop = () => 34;\n    viewport.scroll_();\n    expect(viewport.scrollTracking_).to.be.true;\n    viewport.scroll_();\n    viewport.scroll_();\n    expect(changeEvent).to.equal(null);\n    expect(viewport.scrollTracking_).to.be.true;\n    clock.tick(8);\n    expect(changeEvent).to.equal(null);\n    clock.tick(8);\n    // time 16: scroll to 35\n    // call viewer.postScroll, raf for viewer.postScroll\n    expect(changeEvent).to.equal(null);\n    expect(viewer.sendMessage).to.have.callCount(1);\n    expect(viewer.sendMessage.lastCall.args[0]).to.equal('scroll');\n    expect(viewer.sendMessage.lastCall.args[1].scrollTop).to.equal(34);\n    binding.getScrollTop = () => 35;\n    viewport.scroll_();\n    clock.tick(16);\n    // time 32: scroll to 35\n    // call viewer.postScroll, raf for viewer.postScroll\n    viewport.scroll_();\n    expect(changeEvent).to.equal(null);\n    expect(viewport.scrollTracking_).to.be.true;\n    expect(viewer.sendMessage).to.have.callCount(2);\n\n    // time 36:\n    // raf for throttledScroll_\n\n    clock.tick(16);\n    // time 48: scroll to 35\n    // call viewer.postScroll, call throttledScroll_\n    // raf for viewer.postScroll\n    // delay 36 ticks till raf for throttledScroll_\n    expect(viewport.scrollTracking_).to.be.false;\n    viewport.scroll_();\n    expect(changeEvent).to.not.equal(null);\n    expect(changeEvent.relayoutAll).to.equal(false);\n    expect(changeEvent.velocity).to.be.closeTo(0.020833, 1e-4);\n    expect(eventCount).to.equal(1);\n    expect(viewport.scrollTracking_).to.be.true;\n    expect(viewer.sendMessage).to.have.callCount(3);\n    changeEvent = null;\n    clock.tick(16);\n    // time 64:\n    // call viewer.postScroll\n    expect(viewer.sendMessage).to.have.callCount(4);\n    clock.tick(20);\n    // time 84:\n    // raf for throttledScroll_\n\n    clock.tick(16);\n    // time 100:\n    // call throttledScroll_\n    expect(changeEvent).to.not.equal(null);\n    expect(changeEvent.relayoutAll).to.equal(false);\n    expect(viewport.scrollTracking_).to.be.false;\n    expect(changeEvent.velocity).to.be.equal(0);\n    expect(eventCount).to.equal(2);\n  });","file":"unit/test-viewport.js","skipped":false,"dir":"test"},{"name":"should update scroll pos and reset cache","suites":["zero dimensions"],"updatePoint":{"line":772,"column":46,"index":28839},"line":772,"code":"  it('should update scroll pos and reset cache', () => {\n    const bindingMock = env.sandbox.mock(binding);\n    bindingMock.expects('setScrollTop').withArgs(117).once();\n    viewport.setScrollTop(117);\n    expect(viewport. /*OK*/scrollTop_).to.be.null;\n  });","file":"unit/test-viewport.js","skipped":false,"dir":"test"},{"name":"scrolls with scrollIntoView respecting padding","suites":["with scrollingElement = document."],"updatePoint":{"line":801,"column":56,"index":30039},"line":801,"code":"      it('scrolls with scrollIntoView respecting padding', async () => {\n        const top = 111;\n        bindingMock.expects('getLayoutRect').withArgs(element).returns({\n          top\n        }).once();\n        bindingMock.expects('setScrollTop').withArgs(top - /* padding */19).once();\n        stubVsyncMeasure();\n        await viewport.scrollIntoView(element);\n        bindingMock.verify();\n      });","file":"unit/test-viewport.js","skipped":false,"dir":"test"},{"name":"scrolls with scrollIntoView respecting scroll-padding-top","suites":["with scrollingElement = document."],"updatePoint":{"line":811,"column":67,"index":30454},"line":811,"code":"      it('scrolls with scrollIntoView respecting scroll-padding-top', async () => {\n        const scrollPaddingTop = 66;\n\n        // `scroll-padding-*` properties are always set on documentElement.\n        stubComputedStyleElementOnly(env.win.document.documentElement, {\n          scrollPaddingTop: `${scrollPaddingTop}`\n        });\n        const top = 111;\n        bindingMock.expects('getLayoutRect').withArgs(element).returns({\n          top\n        }).once();\n        bindingMock.expects('setScrollTop').withArgs(top - scrollPaddingTop - /* padding */19).once();\n        stubVsyncMeasure();\n        await viewport.scrollIntoView(element);\n        bindingMock.verify();\n      });","file":"unit/test-viewport.js","skipped":false,"dir":"test"},{"name":"scrolls with animateScrollIntoView respecting padding","suites":["with scrollingElement = document."],"updatePoint":{"line":827,"column":63,"index":31133},"line":827,"code":"      it('scrolls with animateScrollIntoView respecting padding', async () => {\n        const top = 111;\n        bindingMock.expects('getLayoutRect').withArgs(element).returns({\n          top\n        }).once();\n        const interpolateScrollIntoView = env.sandbox.stub(viewport, 'interpolateScrollIntoView_');\n        stubVsyncMeasure();\n        const duration = 1000;\n        const pos = 'top';\n        const promise = viewport.animateScrollIntoView(element, pos, duration);\n        clock.tick(duration);\n        runVsync();\n        await promise;\n        bindingMock.verify();\n        expect(interpolateScrollIntoView.withArgs( /* parent       */env.sandbox.match.any, /* curScrollTop */env.sandbox.match.any, /* newScrollTop */top - /* padding */19, /* duration     */env.sandbox.match.any, /* curve        */env.sandbox.match.any)).to.be.calledOnce;\n      });","file":"unit/test-viewport.js","skipped":false,"dir":"test"},{"name":"scrolls with animateScrollIntoView respecting scroll-padding-top (pos=top)","suites":["with scrollingElement = document."],"updatePoint":{"line":843,"column":84,"index":32019},"line":843,"code":"      it('scrolls with animateScrollIntoView respecting scroll-padding-top (pos=top)', async () => {\n        const scrollPaddingTop = 53;\n\n        // `scroll-padding-*` properties are always set on documentElement.\n        stubComputedStyleElementOnly(env.win.document.documentElement, {\n          scrollPaddingTop: `${scrollPaddingTop}`\n        });\n        const top = 111;\n        bindingMock.expects('getLayoutRect').withArgs(element).returns({\n          top\n        }).once();\n        const interpolateScrollIntoView = env.sandbox.stub(viewport, 'interpolateScrollIntoView_');\n        stubVsyncMeasure();\n        const duration = 1000;\n        const pos = 'top';\n        const promise = viewport.animateScrollIntoView(element, pos, duration);\n        clock.tick(duration);\n        runVsync();\n        await promise;\n        bindingMock.verify();\n        const scrollTopUnadjusted = -scrollPaddingTop;\n        expect(interpolateScrollIntoView.withArgs( /* parent       */env.sandbox.match.any, /* curScrollTop */env.sandbox.match.any, /* newScrollTop */top + scrollTopUnadjusted - /* padding */19, /* duration     */env.sandbox.match.any, /* curve        */env.sandbox.match.any)).to.be.calledOnce;\n      });","file":"unit/test-viewport.js","skipped":false,"dir":"test"},{"name":"scrolls with animateScrollIntoView respecting scroll-padding-bottom (pos=bottom)","suites":["with scrollingElement = document."],"updatePoint":{"line":866,"column":90,"index":33237},"line":866,"code":"      it('scrolls with animateScrollIntoView respecting scroll-padding-bottom (pos=bottom)', async () => {\n        const scrollPaddingBottom = 53;\n\n        // `scroll-padding-*` properties are always set on documentElement.\n        stubComputedStyleElementOnly(env.win.document.documentElement, {\n          scrollPaddingBottom: `${scrollPaddingBottom}`\n        });\n        const top = 0;\n        const height = 300;\n        bindingMock.expects('getLayoutRect').withArgs(element).returns({\n          top,\n          height\n        }).once();\n        const interpolateScrollIntoView = env.sandbox.stub(viewport, 'interpolateScrollIntoView_');\n        stubVsyncMeasure();\n        const duration = 1000;\n        const pos = 'bottom';\n        const promise = viewport.animateScrollIntoView(element, pos, duration);\n        clock.tick(duration);\n        runVsync();\n        await promise;\n        bindingMock.verify();\n        const viewportHeight = 222;\n        const scrollTopUnadjusted = -viewportHeight + scrollPaddingBottom + height;\n        expect(interpolateScrollIntoView.withArgs( /* parent       */env.sandbox.match.any, /* curScrollTop */env.sandbox.match.any, /* newScrollTop */top + scrollTopUnadjusted - /* padding */19, /* duration     */env.sandbox.match.any, /* curve        */env.sandbox.match.any)).to.be.calledOnce;\n      });","file":"unit/test-viewport.js","skipped":false,"dir":"test"},{"name":"scrolls with animateScrollIntoView respecting scroll-padding-bottom (pos=center)","suites":["with scrollingElement = document."],"updatePoint":{"line":892,"column":90,"index":34576},"line":892,"code":"      it('scrolls with animateScrollIntoView respecting scroll-padding-bottom (pos=center)', async () => {\n        const scrollPaddingTop = 12;\n        const scrollPaddingBottom = 34;\n\n        // `scroll-padding-*` properties are always set on documentElement.\n        stubComputedStyleElementOnly(env.win.document.documentElement, {\n          scrollPaddingTop: `${scrollPaddingTop}`,\n          scrollPaddingBottom: `${scrollPaddingBottom}`\n        });\n        const top = 0;\n        const height = 300;\n        bindingMock.expects('getLayoutRect').withArgs(element).returns({\n          top,\n          height\n        }).once();\n        const interpolateScrollIntoView = env.sandbox.stub(viewport, 'interpolateScrollIntoView_');\n        stubVsyncMeasure();\n        const duration = 1000;\n        const pos = 'center';\n        const promise = viewport.animateScrollIntoView(element, pos, duration);\n        clock.tick(duration);\n        runVsync();\n        await promise;\n        bindingMock.verify();\n        const viewportHeight = 222;\n        const effectiveParentHeight = viewportHeight - scrollPaddingTop - scrollPaddingBottom;\n        const scrollTopUnadjusted = -effectiveParentHeight / 2 + height / 2;\n        expect(interpolateScrollIntoView.withArgs( /* parent       */env.sandbox.match.any, /* curScrollTop */env.sandbox.match.any, /* newScrollTop */top + scrollTopUnadjusted - /* padding */19, /* duration     */env.sandbox.match.any, /* curve        */env.sandbox.match.any)).to.be.calledOnce;\n      });","file":"unit/test-viewport.js","skipped":false,"dir":"test"},{"name":"should not change scrollTop for animateScrollIntoView","suites":["with scrollingElement = document."],"updatePoint":{"line":921,"column":63,"index":36064},"line":921,"code":"      it('should not change scrollTop for animateScrollIntoView', () => {\n        bindingMock.expects('getLayoutRect').withArgs(element).returns({\n          top: 111\n        }).once();\n        viewport.paddingTop_ = 0;\n        env.sandbox.stub(viewport, 'getScrollTop').returns(111);\n        bindingMock.expects('setScrollTop').withArgs(111).never();\n        const duration = 1000;\n        const pos = 'top';\n        const promise = viewport.animateScrollIntoView(element, pos, 1000);\n        promise.then(() => {\n          bindingMock.verify();\n        });\n        clock.tick(duration);\n        runVsync();\n        return promise;\n      });","file":"unit/test-viewport.js","skipped":false,"dir":"test"},{"name":"should send cached scroll pos to getLayoutRect","suites":["with scrollingElement = document."],"updatePoint":{"line":940,"column":52,"index":36707},"line":940,"code":"  it('should send cached scroll pos to getLayoutRect', () => {\n    const element = document.createElement('div');\n    const bindingMock = env.sandbox.mock(binding);\n    viewport.scrollTop_ = 111;\n    viewport.scrollLeft_ = 222;\n    bindingMock.expects('getLayoutRect').withArgs(element, 222, 111).returns('sentinel').once();\n    expect(viewport.getLayoutRect(element)).to.equal('sentinel');\n  });","file":"unit/test-viewport.js","skipped":false,"dir":"test"},{"name":"should calculate client rect w/o global client rect","suites":["with scrollingElement = document."],"updatePoint":{"line":948,"column":57,"index":37109},"line":948,"code":"  it('should calculate client rect w/o global client rect', () => {\n    const bindingMock = env.sandbox.mock(binding);\n    bindingMock.expects('getRootClientRectAsync').returns(Promise.resolve(null));\n    const el = document.createElement('div');\n    el.getBoundingClientRect = () => layoutRectLtwh(1, 2, 3, 4);\n    stubVsyncMeasure();\n    return viewport.getClientRectAsync(el).then(res => {\n      expect(res).to.deep.equal(layoutRectLtwh(1, 2, 3, 4));\n    });\n  });","file":"unit/test-viewport.js","skipped":false,"dir":"test"},{"name":"should calculate client rect w/ global client rect when ","suites":["with scrollingElement = document."],"updatePoint":{"line":958,"column":62,"index":37582},"line":958,"code":"  it('should calculate client rect w/ global client rect when ', () => {\n    const bindingMock = env.sandbox.mock(binding);\n    bindingMock.expects('getRootClientRectAsync').returns(Promise.resolve(layoutRectLtwh(5, 5, 5, 5))).twice();\n    const el = document.createElement('div');\n    el.getBoundingClientRect = () => layoutRectLtwh(1, 2, 3, 4);\n    stubVsyncMeasure();\n    return viewport.getClientRectAsync(el).then(res => {\n      expect(res).to.deep.equal(layoutRectLtwh(6, 7, 3, 4));\n    });\n  });","file":"unit/test-viewport.js","skipped":false,"dir":"test"},{"name":"should deletegate scrollWidth","suites":["with scrollingElement = document."],"updatePoint":{"line":968,"column":35,"index":38058},"line":968,"code":"  it('should deletegate scrollWidth', () => {\n    const bindingMock = env.sandbox.mock(binding);\n    bindingMock.expects('getScrollWidth').withArgs().returns(111).once();\n    expect(viewport.getScrollWidth()).to.equal(111);\n  });","file":"unit/test-viewport.js","skipped":false,"dir":"test"},{"name":"should deletegate scrollHeight","suites":["with scrollingElement = document."],"updatePoint":{"line":973,"column":36,"index":38289},"line":973,"code":"  it('should deletegate scrollHeight', () => {\n    const bindingMock = env.sandbox.mock(binding);\n    bindingMock.expects('getScrollHeight').withArgs().returns(117).once();\n    expect(viewport.getScrollHeight()).to.equal(117);\n  });","file":"unit/test-viewport.js","skipped":false,"dir":"test"},{"name":"should delegate contentHeight","suites":["with scrollingElement = document."],"updatePoint":{"line":978,"column":35,"index":38521},"line":978,"code":"  it('should delegate contentHeight', () => {\n    const bindingMock = env.sandbox.mock(binding);\n    bindingMock.expects('getContentHeight').withArgs().returns(117).once();\n    expect(viewport.getContentHeight()).to.equal(117);\n    bindingMock.verify();\n  });","file":"unit/test-viewport.js","skipped":false,"dir":"test"},{"name":"should delegate contentHeightChanged","suites":["with scrollingElement = document."],"updatePoint":{"line":984,"column":42,"index":38788},"line":984,"code":"  it('should delegate contentHeightChanged', () => {\n    const bindingMock = env.sandbox.mock(binding);\n    bindingMock.expects('contentHeightChanged').once();\n    viewport.contentHeightChanged();\n    bindingMock.verify();\n  });","file":"unit/test-viewport.js","skipped":false,"dir":"test"},{"name":"should scroll to target position when the viewer sets scrollTop","suites":["with scrollingElement = document."],"updatePoint":{"line":990,"column":69,"index":39044},"line":990,"code":"  it('should scroll to target position when the viewer sets scrollTop', () => {\n    const bindingMock = env.sandbox.mock(binding);\n    bindingMock.expects('setScrollTop').withArgs(117).once();\n    viewerScrollDocHandler({\n      scrollTop: 117\n    });\n    bindingMock.verify();\n  });","file":"unit/test-viewport.js","skipped":false,"dir":"test"},{"name":"should not set pan-y when not embedded","suites":["with scrollingElement = document."],"updatePoint":{"line":1009,"column":46,"index":39558},"line":1009,"code":"    it('should not set pan-y when not embedded', () => {\n      viewer.isEmbedded = () => false;\n      viewport = new ViewportImpl(ampdoc, binding, viewer);\n      expect(win.getComputedStyle(root)['touch-action']).to.equal('auto');\n    });","file":"unit/test-viewport.js","skipped":false,"dir":"test"},{"name":"should set pan-y with experiment","suites":["with scrollingElement = document."],"updatePoint":{"line":1014,"column":40,"index":39791},"line":1014,"code":"    it('should set pan-y with experiment', () => {\n      viewer.isEmbedded = () => true;\n      viewport = new ViewportImpl(ampdoc, binding, viewer);\n      expect(win.getComputedStyle(root)['touch-action']).to.equal('pan-y pinch-zoom');\n    });","file":"unit/test-viewport.js","skipped":false,"dir":"test"},{"name":"should calculate child window element rect via parent","suites":["for child window"],"updatePoint":{"line":1057,"column":61,"index":41181},"line":1057,"code":"    it('should calculate child window element rect via parent', () => {\n      viewport.scrollLeft_ = 0;\n      viewport.scrollTop_ = 0;\n      const element = iframeWin.document.createElement('div');\n      iframeWin.document.body.appendChild(element);\n      bindingMock.expects('getLayoutRect').withArgs(element, 0, 0).returns({\n        left: 20,\n        top: 10\n      }).once();\n      bindingMock.expects('getLayoutRect').withArgs(iframe, 0, 0).returns({\n        left: 211,\n        top: 111\n      }).once();\n      const rect = viewport.getLayoutRect(element);\n      expect(rect.left).to.equal(211 + 20);\n      expect(rect.top).to.equal(111 + 10);\n    });","file":"unit/test-viewport.js","skipped":false,"dir":"test"},{"name":"should offset child window element with parent scroll pos","suites":["for child window"],"updatePoint":{"line":1074,"column":65,"index":41839},"line":1074,"code":"    it('should offset child window element with parent scroll pos', () => {\n      viewport.scrollLeft_ = 200;\n      viewport.scrollTop_ = 100;\n      const element = iframeWin.document.createElement('div');\n      iframeWin.document.body.appendChild(element);\n      bindingMock.expects('getLayoutRect').withArgs(element, 0, 0).returns({\n        left: 20,\n        top: 10\n      }).once();\n      bindingMock.expects('getLayoutRect').withArgs(iframe, 200, 100).returns({\n        left: 211,\n        top: 111\n      }).once();\n      const rect = viewport.getLayoutRect(element);\n      expect(rect.left).to.equal(211 + 20);\n      expect(rect.top).to.equal(111 + 10);\n    });","file":"unit/test-viewport.js","skipped":false,"dir":"test"},{"name":"should not override scrollTo/pageYOffset if not requested","suites":["overrideGlobalScrollTo"],"updatePoint":{"line":1097,"column":65,"index":42677},"line":1097,"code":"    it('should not override scrollTo/pageYOffset if not requested', () => {\n      new ViewportImpl(ampdoc, binding, viewer);\n      expect(windowApi.scrollTo).to.equal(originalScrollTo);\n      expect(windowApi.scrollY).to.equal(17);\n      expect(windowApi.pageYOffset).to.equal(17);\n    });","file":"unit/test-viewport.js","skipped":false,"dir":"test"},{"name":"should override scrollTo when requested","suites":["overrideGlobalScrollTo"],"updatePoint":{"line":1103,"column":47,"index":42949},"line":1103,"code":"    it('should override scrollTo when requested', () => {\n      env.sandbox.stub(binding, 'overrideGlobalScrollTo').callsFake(() => true);\n      viewport = new ViewportImpl(ampdoc, binding, viewer);\n      const setScrollTopStub = env.sandbox.stub(viewport, 'setScrollTop');\n      expect(windowApi.scrollTo).to.not.equal(originalScrollTo);\n      windowApi.scrollTo(0, 11);\n      expect(setScrollTopStub).to.be.calledOnce.calledWith(11);\n    });","file":"unit/test-viewport.js","skipped":false,"dir":"test"},{"name":"should override scrollY/pageYOffset when requested","suites":["overrideGlobalScrollTo"],"updatePoint":{"line":1111,"column":58,"index":43404},"line":1111,"code":"    it('should override scrollY/pageYOffset when requested', () => {\n      env.sandbox.stub(binding, 'overrideGlobalScrollTo').callsFake(() => true);\n      viewport = new ViewportImpl(ampdoc, binding, viewer);\n      const stub = env.sandbox.stub(viewport, 'getScrollTop').callsFake(() => 19);\n      expect(windowApi.scrollY).to.equal(19);\n      expect(windowApi.pageYOffset).to.equal(19);\n      expect(stub).to.be.calledTwice;\n    });","file":"unit/test-viewport.js","skipped":false,"dir":"test"},{"name":"should tolerate scrollTo override failures","suites":["overrideGlobalScrollTo"],"updatePoint":{"line":1119,"column":50,"index":43831},"line":1119,"code":"    it('should tolerate scrollTo override failures', () => {\n      Object.defineProperty(windowApi, 'scrollTo', {\n        value: originalScrollTo,\n        writable: false,\n        configurable: false // make it non-configurable to let it will throw\n      });\n\n      env.sandbox.stub(binding, 'overrideGlobalScrollTo').callsFake(() => true);\n      new ViewportImpl(ampdoc, binding, viewer);\n      expect(windowApi.scrollTo).to.equal(originalScrollTo);\n    });","file":"unit/test-viewport.js","skipped":false,"dir":"test"},{"name":"should tolerate scrollY override failures","suites":["overrideGlobalScrollTo"],"updatePoint":{"line":1130,"column":49,"index":44289},"line":1130,"code":"    it('should tolerate scrollY override failures', () => {\n      Object.defineProperty(windowApi, 'scrollY', {\n        value: 21,\n        writable: false,\n        configurable: false // make it non-configurable to let it will throw\n      });\n\n      env.sandbox.stub(binding, 'overrideGlobalScrollTo').callsFake(() => true);\n      new ViewportImpl(ampdoc, binding, viewer);\n      expect(windowApi.scrollY).to.equal(21);\n    });","file":"unit/test-viewport.js","skipped":false,"dir":"test"},{"name":"should accept null or empty strings","suites":["parseViewportMeta"],"updatePoint":{"line":1145,"column":43,"index":44811},"line":1145,"code":"    it('should accept null or empty strings', () => {\n      expect(parseViewportMeta(null)).to.be.empty;\n    });","file":"unit/test-viewport.js","skipped":false,"dir":"test"},{"name":"should parse single key-value","suites":["parseViewportMeta"],"updatePoint":{"line":1148,"column":37,"index":44918},"line":1148,"code":"    it('should parse single key-value', () => {\n      expect(parseViewportMeta('width=device-width')).to.deep.equal({\n        'width': 'device-width'\n      });\n    });","file":"unit/test-viewport.js","skipped":false,"dir":"test"},{"name":"should parse two key-values","suites":["parseViewportMeta"],"updatePoint":{"line":1153,"column":35,"index":45084},"line":1153,"code":"    it('should parse two key-values', () => {\n      expect(parseViewportMeta('width=device-width,minimum-scale=1')).to.deep.equal({\n        'width': 'device-width',\n        'minimum-scale': '1'\n      });\n    });","file":"unit/test-viewport.js","skipped":false,"dir":"test"},{"name":"should parse empty value","suites":["parseViewportMeta"],"updatePoint":{"line":1159,"column":32,"index":45293},"line":1159,"code":"    it('should parse empty value', () => {\n      expect(parseViewportMeta('width=device-width,minimal-ui')).to.deep.equal({\n        'width': 'device-width',\n        'minimal-ui': ''\n      });\n      expect(parseViewportMeta('minimal-ui,width=device-width')).to.deep.equal({\n        'width': 'device-width',\n        'minimal-ui': ''\n      });\n    });","file":"unit/test-viewport.js","skipped":false,"dir":"test"},{"name":"should return last dupe","suites":["parseViewportMeta"],"updatePoint":{"line":1169,"column":31,"index":45641},"line":1169,"code":"    it('should return last dupe', () => {\n      expect(parseViewportMeta('width=100,width=200')).to.deep.equal({\n        'width': '200'\n      });\n    });","file":"unit/test-viewport.js","skipped":false,"dir":"test"},{"name":"should ignore extra delims","suites":["parseViewportMeta"],"updatePoint":{"line":1174,"column":34,"index":45798},"line":1174,"code":"    it('should ignore extra delims', () => {\n      expect(parseViewportMeta(',,,width=device-width,,,,minimum-scale=1,,,')).to.deep.equal({\n        'width': 'device-width',\n        'minimum-scale': '1'\n      });\n    });","file":"unit/test-viewport.js","skipped":false,"dir":"test"},{"name":"should support semicolon","suites":["parseViewportMeta"],"updatePoint":{"line":1180,"column":32,"index":46016},"line":1180,"code":"    it('should support semicolon', () => {\n      expect(parseViewportMeta('width=device-width;minimum-scale=1')).to.deep.equal({\n        'width': 'device-width',\n        'minimum-scale': '1'\n      });\n    });","file":"unit/test-viewport.js","skipped":false,"dir":"test"},{"name":"should support mix of comma and semicolon","suites":["parseViewportMeta"],"updatePoint":{"line":1186,"column":49,"index":46242},"line":1186,"code":"    it('should support mix of comma and semicolon', () => {\n      expect(parseViewportMeta('width=device-width,minimum-scale=1;test=3;')).to.deep.equal({\n        'width': 'device-width',\n        'minimum-scale': '1',\n        'test': '3'\n      });\n    });","file":"unit/test-viewport.js","skipped":false,"dir":"test"},{"name":"should ignore extra mix delims","suites":["parseViewportMeta"],"updatePoint":{"line":1193,"column":38,"index":46486},"line":1193,"code":"    it('should ignore extra mix delims', () => {\n      expect(parseViewportMeta(',,;;,width=device-width;;,minimum-scale=1,,;')).to.deep.equal({\n        'width': 'device-width',\n        'minimum-scale': '1'\n      });\n    });","file":"unit/test-viewport.js","skipped":false,"dir":"test"},{"name":"should stringify empty","suites":["stringifyViewportMeta"],"updatePoint":{"line":1201,"column":30,"index":46753},"line":1201,"code":"    it('should stringify empty', () => {\n      expect(stringifyViewportMeta({})).to.equal('');\n    });","file":"unit/test-viewport.js","skipped":false,"dir":"test"},{"name":"should stringify single key-value","suites":["stringifyViewportMeta"],"updatePoint":{"line":1204,"column":41,"index":46867},"line":1204,"code":"    it('should stringify single key-value', () => {\n      expect(stringifyViewportMeta({\n        'width': 'device-width'\n      })).to.equal('width=device-width');\n    });","file":"unit/test-viewport.js","skipped":false,"dir":"test"},{"name":"should stringify two key-values","suites":["stringifyViewportMeta"],"updatePoint":{"line":1209,"column":39,"index":47036},"line":1209,"code":"    it('should stringify two key-values', () => {\n      const res = stringifyViewportMeta({\n        'width': 'device-width',\n        'minimum-scale': '1'\n      });\n      expect(res == 'width=device-width,minimum-scale=1' || res == 'minimum-scale=1,width=device-width').to.be.true;\n    });","file":"unit/test-viewport.js","skipped":false,"dir":"test"},{"name":"should stringify empty values","suites":["stringifyViewportMeta"],"updatePoint":{"line":1216,"column":37,"index":47323},"line":1216,"code":"    it('should stringify empty values', () => {\n      const res = stringifyViewportMeta({\n        'width': 'device-width',\n        'minimal-ui': ''\n      });\n      expect(res == 'width=device-width,minimal-ui' || res == 'minimal-ui,width=device-width').to.be.true;\n    });","file":"unit/test-viewport.js","skipped":false,"dir":"test"},{"name":"should do nothing with empty values","suites":["updateViewportMetaString"],"updatePoint":{"line":1225,"column":43,"index":47655},"line":1225,"code":"    it('should do nothing with empty values', () => {\n      expect(updateViewportMetaString('', {})).to.equal('');\n      expect(updateViewportMetaString('width=device-width', {})).to.equal('width=device-width');\n    });","file":"unit/test-viewport.js","skipped":false,"dir":"test"},{"name":"should add a new value","suites":["updateViewportMetaString"],"updatePoint":{"line":1229,"column":30,"index":47862},"line":1229,"code":"    it('should add a new value', () => {\n      expect(updateViewportMetaString('', {\n        'minimum-scale': '1'\n      })).to.equal('minimum-scale=1');\n      expect(parseViewportMeta(updateViewportMetaString('width=device-width', {\n        'minimum-scale': '1'\n      }))).to.deep.equal({\n        'width': 'device-width',\n        'minimum-scale': '1'\n      });\n    });","file":"unit/test-viewport.js","skipped":false,"dir":"test"},{"name":"should replace the existing value","suites":["updateViewportMetaString"],"updatePoint":{"line":1240,"column":41,"index":48242},"line":1240,"code":"    it('should replace the existing value', () => {\n      expect(parseViewportMeta(updateViewportMetaString('width=device-width,minimum-scale=2', {\n        'minimum-scale': '1'\n      }))).to.deep.equal({\n        'width': 'device-width',\n        'minimum-scale': '1'\n      });\n    });","file":"unit/test-viewport.js","skipped":false,"dir":"test"},{"name":"should delete the existing value","suites":["updateViewportMetaString"],"updatePoint":{"line":1248,"column":40,"index":48525},"line":1248,"code":"    it('should delete the existing value', () => {\n      expect(parseViewportMeta(updateViewportMetaString('width=device-width,minimum-scale=1', {\n        'minimum-scale': undefined\n      }))).to.deep.equal({\n        'width': 'device-width'\n      });\n    });","file":"unit/test-viewport.js","skipped":false,"dir":"test"},{"name":"should ignore delete for a non-existing value","suites":["updateViewportMetaString"],"updatePoint":{"line":1255,"column":53,"index":48797},"line":1255,"code":"    it('should ignore delete for a non-existing value', () => {\n      expect(parseViewportMeta(updateViewportMetaString('width=device-width', {\n        'minimum-scale': undefined\n      }))).to.deep.equal({\n        'width': 'device-width'\n      });\n    });","file":"unit/test-viewport.js","skipped":false,"dir":"test"},{"name":"should do nothing if values did not change","suites":["updateViewportMetaString"],"updatePoint":{"line":1262,"column":50,"index":49050},"line":1262,"code":"    it('should do nothing if values did not change', () => {\n      expect(updateViewportMetaString('width=device-width,minimum-scale=1', {\n        'minimum-scale': '1'\n      })).to.equal('width=device-width,minimum-scale=1');\n    });","file":"unit/test-viewport.js","skipped":false,"dir":"test"},{"name":"should initialize original viewport meta","suites":["TouchZoom"],"updatePoint":{"line":1334,"column":48,"index":51309},"line":1334,"code":"    it('should initialize original viewport meta', () => {\n      viewport.getViewportMeta_();\n      expect(viewport.originalViewportMetaString_).to.equal(viewportMetaString);\n      expect(viewportMetaSetter).to.have.not.been.called;\n    });","file":"unit/test-viewport.js","skipped":false,"dir":"test"},{"name":"should disable TouchZoom","suites":["TouchZoom"],"updatePoint":{"line":1339,"column":32,"index":51534},"line":1339,"code":"    it('should disable TouchZoom', () => {\n      viewport.disableTouchZoom();\n      expect(viewportMetaSetter).to.be.calledOnce;\n      expect(viewportMetaString).to.have.string('maximum-scale=1');\n      expect(viewportMetaString).to.have.string('user-scalable=no');\n    });","file":"unit/test-viewport.js","skipped":false,"dir":"test"},{"name":"should ignore disable TouchZoom if already disabled","suites":["TouchZoom"],"updatePoint":{"line":1345,"column":59,"index":51835},"line":1345,"code":"    it('should ignore disable TouchZoom if already disabled', () => {\n      viewportMetaString = 'width=device-width,minimum-scale=1,' + 'maximum-scale=1,user-scalable=no';\n      viewport.disableTouchZoom();\n      expect(viewportMetaSetter).to.have.not.been.called;\n    });","file":"unit/test-viewport.js","skipped":false,"dir":"test"},{"name":"should ignore disable TouchZoom if embedded","suites":["TouchZoom"],"updatePoint":{"line":1350,"column":51,"index":52101},"line":1350,"code":"    it('should ignore disable TouchZoom if embedded', () => {\n      windowApi.parent = {};\n      viewport.disableTouchZoom();\n      expect(viewportMetaSetter).to.have.not.been.called;\n    });","file":"unit/test-viewport.js","skipped":false,"dir":"test"},{"name":"should restore TouchZoom","suites":["TouchZoom"],"updatePoint":{"line":1355,"column":32,"index":52274},"line":1355,"code":"    it('should restore TouchZoom', () => {\n      viewport.disableTouchZoom();\n      expect(viewportMetaSetter).to.be.calledOnce;\n      expect(viewportMetaString).to.have.string('maximum-scale=1');\n      expect(viewportMetaString).to.have.string('user-scalable=no');\n      viewport.restoreOriginalTouchZoom();\n      expect(viewportMetaSetter).to.have.callCount(2);\n      expect(viewportMetaString).to.equal(originalViewportMetaString);\n    });","file":"unit/test-viewport.js","skipped":false,"dir":"test"},{"name":"should reset TouchZoom; zooming state unknown","suites":["TouchZoom"],"updatePoint":{"line":1364,"column":53,"index":52738},"line":1364,"code":"    it('should reset TouchZoom; zooming state unknown', () => {\n      viewport.resetTouchZoom();\n      expect(viewportMetaSetter).to.be.calledOnce;\n      expect(viewportMetaString).to.have.string('maximum-scale=1');\n      expect(viewportMetaString).to.have.string('user-scalable=no');\n      clock.tick(1000);\n      expect(viewportMetaSetter).to.have.callCount(2);\n      expect(viewportMetaString).to.equal(originalViewportMetaString);\n    });","file":"unit/test-viewport.js","skipped":false,"dir":"test"},{"name":"should ignore reset TouchZoom if not currently zoomed","suites":["TouchZoom"],"updatePoint":{"line":1373,"column":61,"index":53189},"line":1373,"code":"    it('should ignore reset TouchZoom if not currently zoomed', () => {\n      windowApi.document.documentElement.clientHeight = 500;\n      windowApi.innerHeight = 500;\n      viewport.resetTouchZoom();\n      expect(viewportMetaSetter).to.have.not.been.called;\n    });","file":"unit/test-viewport.js","skipped":false,"dir":"test"},{"name":"should proceed with reset TouchZoom if currently zoomed","suites":["TouchZoom"],"updatePoint":{"line":1379,"column":63,"index":53458},"line":1379,"code":"    it('should proceed with reset TouchZoom if currently zoomed', () => {\n      windowApi.document.documentElement.clientHeight = 500;\n      windowApi.innerHeight = 300;\n      viewport.resetTouchZoom();\n      expect(viewportMetaSetter).to.be.calledOnce;\n    });","file":"unit/test-viewport.js","skipped":false,"dir":"test"},{"name":"should ignore reset TouchZoom if embedded","suites":["TouchZoom"],"updatePoint":{"line":1385,"column":49,"index":53706},"line":1385,"code":"    it('should ignore reset TouchZoom if embedded', () => {\n      windowApi.parent = {};\n      viewport.resetTouchZoom();\n      expect(viewportMetaSetter).to.have.not.been.called;\n    });","file":"unit/test-viewport.js","skipped":false,"dir":"test"},{"name":"should bind to \"natural\" when not iframed","suites":["TouchZoom"],"updatePoint":{"line":1407,"column":49,"index":54241},"line":1407,"code":"    it('should bind to \"natural\" when not iframed', () => {\n      win.parent = win;\n      installDocService(win, /* isSingleDoc */true);\n      const ampDoc = Services.ampdocServiceFor(win).getSingleDoc();\n      installViewerServiceForDoc(ampDoc);\n      installViewportServiceForDoc(ampDoc);\n      const viewport = Services.viewportForDoc(ampDoc);\n      expect(viewport.binding_).to.be.instanceof(ViewportBindingNatural_);\n    });","file":"unit/test-viewport.js","skipped":false,"dir":"test"},{"name":"should bind to \"naturual\" when iframed","suites":["TouchZoom"],"updatePoint":{"line":1416,"column":46,"index":54668},"line":1416,"code":"    it('should bind to \"naturual\" when iframed', () => {\n      win.parent = {};\n      installDocService(win, /* isSingleDoc */true);\n      const ampDoc = Services.ampdocServiceFor(win).getSingleDoc();\n      installViewerServiceForDoc(ampDoc);\n      installViewportServiceForDoc(ampDoc);\n      const viewport = Services.viewportForDoc(ampDoc);\n      expect(viewport.binding_).to.be.instanceof(ViewportBindingNatural_);\n    });","file":"unit/test-viewport.js","skipped":false,"dir":"test"},{"name":"should bind to \"natural\" when not iframed","suites":["TouchZoom"],"updatePoint":{"line":1447,"column":49,"index":55661},"line":1447,"code":"    it('should bind to \"natural\" when not iframed', () => {\n      win.parent = win;\n      installViewportServiceForDoc(ampDoc);\n      const viewport = Services.viewportForDoc(ampDoc);\n      expect(viewport.binding_).to.be.instanceof(ViewportBindingNatural_);\n    });","file":"unit/test-viewport.js","skipped":false,"dir":"test"},{"name":"should bind to \"iOS embed\" when iframed","suites":["TouchZoom"],"updatePoint":{"line":1453,"column":47,"index":55926},"line":1453,"code":"    it('should bind to \"iOS embed\" when iframed', () => {\n      win.parent = {};\n      env.sandbox.stub(viewer, 'isEmbedded').callsFake(() => true);\n      installViewportServiceForDoc(ampDoc);\n      const viewport = Services.viewportForDoc(ampDoc);\n      expect(viewport.binding_).to.be.instanceof(ViewportBindingIosEmbedWrapper_);\n    });","file":"unit/test-viewport.js","skipped":false,"dir":"test"},{"name":"should NOT bind to \"iOS embed\" when iframed but not embedded","suites":["TouchZoom"],"updatePoint":{"line":1460,"column":68,"index":56287},"line":1460,"code":"    it('should NOT bind to \"iOS embed\" when iframed but not embedded', () => {\n      win.parent = {};\n      env.sandbox.stub(viewer, 'isEmbedded').callsFake(() => false);\n      installViewportServiceForDoc(ampDoc);\n      const viewport = Services.viewportForDoc(ampDoc);\n      expect(viewport.binding_).to.be.instanceof(ViewportBindingNatural_);\n    });","file":"unit/test-viewport.js","skipped":false,"dir":"test"},{"name":"should bind to \"iOS embed\" when iframed but in test mode","suites":["TouchZoom"],"updatePoint":{"line":1467,"column":64,"index":56637},"line":1467,"code":"    it('should bind to \"iOS embed\" when iframed but in test mode', () => {\n      win.parent = {};\n      getMode(win).test = true;\n      env.sandbox.stub(viewer, 'isEmbedded').callsFake(() => false);\n      installViewportServiceForDoc(ampDoc);\n      const viewport = Services.viewportForDoc(ampDoc);\n      expect(viewport.binding_).to.be.instanceof(ViewportBindingIosEmbedWrapper_);\n    });","file":"unit/test-viewport.js","skipped":false,"dir":"test"},{"name":"should bind to \"natural\" when iframed, but iOS supports scrollable iframes","suites":["TouchZoom"],"updatePoint":{"line":1475,"column":82,"index":57045},"line":1475,"code":"    it('should bind to \"natural\" when iframed, but iOS supports scrollable iframes', () => {\n      win.parent = {};\n      env.sandbox.stub(viewer, 'isEmbedded').callsFake(() => true);\n      env.sandbox.stub(viewer, 'hasCapability').withArgs('iframeScroll').returns(true);\n      installViewportServiceForDoc(ampDoc);\n      const viewport = Services.viewportForDoc(ampDoc);\n      expect(viewport.binding_).to.be.instanceof(ViewportBindingNatural_);\n    });","file":"unit/test-viewport.js","skipped":false,"dir":"test"},{"name":"should return the marginBottom of the last child","suites":["TouchZoom"],"updatePoint":{"line":1505,"column":54,"index":58087},"line":1505,"code":"  it('should return the marginBottom of the last child', () => {\n    expect(marginBottomOfLastChild(win, element)).to.equal(22);\n  });","file":"unit/test-viewport.js","skipped":false,"dir":"test"},{"name":"should return 0 if element has no children","suites":["TouchZoom"],"updatePoint":{"line":1508,"column":48,"index":58216},"line":1508,"code":"  it('should return 0 if element has no children', () => {\n    expect(firstChild.children.length).to.equal(0);\n    expect(marginBottomOfLastChild(win, firstChild)).to.equal(0);\n  });","file":"unit/test-viewport.js","skipped":false,"dir":"test"},{"name":"should skip elements that have zero height","suites":["TouchZoom"],"updatePoint":{"line":1512,"column":48,"index":58399},"line":1512,"code":"  it('should skip elements that have zero height', () => {\n    secondChild.style.height = '0px';\n    expect(marginBottomOfLastChild(win, element)).to.equal(11);\n  });","file":"unit/test-viewport.js","skipped":false,"dir":"test"},{"name":"should skip elements that are not position: static|relative","suites":["TouchZoom"],"updatePoint":{"line":1516,"column":65,"index":58583},"line":1516,"code":"  it('should skip elements that are not position: static|relative', () => {\n    secondChild.style.position = 'absolute';\n    expect(marginBottomOfLastChild(win, element)).to.equal(11);\n    secondChild.style.position = 'static';\n    expect(marginBottomOfLastChild(win, element)).to.equal(22);\n    secondChild.style.position = 'fixed';\n    expect(marginBottomOfLastChild(win, element)).to.equal(11);\n    secondChild.style.position = 'relative';\n    expect(marginBottomOfLastChild(win, element)).to.equal(22);\n    secondChild.style.position = '-webkit-sticky'; // Still needed on Safari 12!\n    secondChild.style.position = 'sticky';\n    expect(marginBottomOfLastChild(win, element)).to.equal(11);\n  });","file":"unit/test-viewport.js","skipped":false,"dir":"test"},{"name":"should init correctly","suites":["single-doc"],"updatePoint":{"line":35,"column":29,"index":1266},"line":35,"code":"    it('should init correctly', () => {\n      expect(vsync.canAnimate(contextNode)).to.be.true;\n      expect(onVisibilityChangedStub).to.be.calledOnce;\n      expect(getVisibilityEventCount()).to.equal(0);\n    });","file":"unit/test-vsync.js","skipped":false,"dir":"test"},{"name":"should fail canAnimate without node","suites":["single-doc"],"updatePoint":{"line":40,"column":43,"index":1493},"line":40,"code":"    it('should fail canAnimate without node', () => {\n      allowConsoleError(() => {\n        expect(() => {\n          vsync.canAnimate();\n        }).to.throw(/Assertion failed/);\n      });\n    });","file":"unit/test-vsync.js","skipped":false,"dir":"test"},{"name":"should generate a frame and run callbacks","suites":["single-doc"],"updatePoint":{"line":47,"column":49,"index":1697},"line":47,"code":"    it('should generate a frame and run callbacks', () => {\n      let result = '';\n      return new Promise(resolve => {\n        vsync.run({\n          measure: () => {\n            result += 'me1';\n          },\n          mutate: () => {\n            result += 'mu1';\n          }\n        });\n        vsync.run({\n          measure: () => {\n            result += 'me2';\n          },\n          mutate: () => {\n            result += 'mu2';\n          }\n        });\n        vsync.run({\n          measure: () => {\n            result += 'me3';\n          }\n        });\n        vsync.run({\n          mutate: () => {\n            result += 'mu3';\n          }\n        });\n        vsync.mutate(() => {\n          result += 'mu4';\n          resolve();\n        });\n        vsync.measure(() => {\n          result += 'me4';\n          resolve();\n        });\n      }).then(() => {\n        expect(result).to.equal('me1me2me3me4mu1mu2mu3mu4');\n      });\n    });","file":"unit/test-vsync.js","skipped":false,"dir":"test"},{"name":"should tolerate errors in measures and mutates","suites":["single-doc"],"line":90,"code":"    it.skip('should tolerate errors in measures and mutates', () => {","file":"unit/test-vsync.js","skipped":true,"dir":"test"},{"name":"should schedule nested vsyncs","suites":["single-doc"],"updatePoint":{"line":144,"column":37,"index":4021},"line":144,"code":"    it('should schedule nested vsyncs', () => {\n      let result = '';\n      return new Promise(resolve => {\n        vsync.run({\n          measure: () => {\n            result += 'me1';\n            vsync.run({\n              measure: () => {\n                result += 'me2';\n              },\n              mutate: () => {\n                result += 'mu2';\n                vsync.run({\n                  measure: () => {\n                    result += 'me3';\n                  }\n                });\n                vsync.run({\n                  mutate: () => {\n                    result += 'mu3';\n                    resolve();\n                  }\n                });\n              }\n            });\n          },\n          mutate: () => {\n            result += 'mu1';\n          }\n        });\n      }).then(() => {\n        expect(result).to.equal('me1mu1me2mu2me3mu3');\n      });\n    });","file":"unit/test-vsync.js","skipped":false,"dir":"test"},{"name":"should return a promise from runPromise that executes \"run\"","suites":["single-doc"],"updatePoint":{"line":178,"column":67,"index":4933},"line":178,"code":"    it('should return a promise from runPromise that executes \"run\"', () => {\n      const measureSpy = env.sandbox.spy();\n      const mutateSpy = env.sandbox.spy();\n      return vsync.runPromise({\n        measure: measureSpy,\n        mutate: mutateSpy\n      }).then(() => {\n        expect(mutateSpy).to.be.calledOnce;\n        expect(measureSpy).to.be.calledOnce;\n      });\n    });","file":"unit/test-vsync.js","skipped":false,"dir":"test"},{"name":"should return a promise from measurePromise that runs measurer","suites":["single-doc"],"updatePoint":{"line":189,"column":70,"index":5317},"line":189,"code":"    it('should return a promise from measurePromise that runs measurer', () => {\n      let measured = false;\n      return vsync.measurePromise(() => {\n        measured = true;\n      }).then(() => {\n        expect(measured).to.be.true;\n      });\n    });","file":"unit/test-vsync.js","skipped":false,"dir":"test"},{"name":"should return a promise from mutatePromisethat runs mutator","suites":["single-doc"],"updatePoint":{"line":197,"column":67,"index":5567},"line":197,"code":"    it('should return a promise from mutatePromisethat runs mutator', () => {\n      const mutator = env.sandbox.spy();\n      return vsync.mutatePromise(mutator).then(() => {\n        expect(mutator).to.be.calledOnce;\n      });\n    });","file":"unit/test-vsync.js","skipped":false,"dir":"test"},{"name":"should schedule via animation frames when doc is visible","suites":["single-doc"],"updatePoint":{"line":203,"column":64,"index":5798},"line":203,"code":"    it('should schedule via animation frames when doc is visible', () => {\n      let rafHandler;\n      vsync.raf_ = handler => rafHandler = handler;\n      isVisibleStub.returns(true);\n      let result = '';\n      vsync.run({\n        mutate: () => {\n          result += 'mu1';\n        }\n      });\n      expect(vsync.tasks_).to.have.length(1);\n      expect(vsync.scheduled_).to.be.true;\n      expect(rafHandler).to.exist;\n      expect(vsync.invisiblePass_.isPending()).to.be.false;\n      expect(vsync.backupPass_.isPending()).to.be.true;\n      rafHandler();\n      expect(result).to.equal('mu1');\n      expect(vsync.tasks_).to.have.length(0);\n      expect(vsync.scheduled_).to.be.false;\n      expect(vsync.invisiblePass_.isPending()).to.be.false;\n      expect(vsync.backupPass_.isPending()).to.be.false;\n    });","file":"unit/test-vsync.js","skipped":false,"dir":"test"},{"name":"should schedule via timer frames when doc is not visible","suites":["single-doc"],"updatePoint":{"line":225,"column":64,"index":6607},"line":225,"code":"    it('should schedule via timer frames when doc is not visible', () => {\n      let rafHandler;\n      vsync.raf_ = handler => rafHandler = handler;\n      isVisibleStub.returns(false);\n      let result = '';\n      vsync.run({\n        mutate: () => {\n          result += 'mu1';\n        }\n      });\n      expect(vsync.tasks_).to.have.length(1);\n      expect(vsync.scheduled_).to.be.true;\n      expect(rafHandler).to.be.undefined;\n      expect(vsync.invisiblePass_.isPending()).to.be.true;\n      clock.tick(17);\n      expect(result).to.equal('mu1');\n      expect(vsync.tasks_).to.have.length(0);\n      expect(vsync.scheduled_).to.be.false;\n      expect(vsync.invisiblePass_.isPending()).to.be.false;\n    });","file":"unit/test-vsync.js","skipped":false,"dir":"test"},{"name":"should run via backup timer if rAF somehow doesnt fire","suites":["single-doc"],"updatePoint":{"line":245,"column":62,"index":7310},"line":245,"code":"    it('should run via backup timer if rAF somehow doesnt fire', () => {\n      let rafHandler;\n      vsync.raf_ = function () {\n        // intentionally empty\n      };\n      isVisibleStub.returns(true);\n      let result = '';\n      vsync.run({\n        mutate: () => {\n          result += 'mu1';\n        }\n      });\n      expect(vsync.tasks_).to.have.length(1);\n      expect(vsync.scheduled_).to.be.true;\n      expect(rafHandler).to.be.undefined;\n      expect(vsync.invisiblePass_.isPending()).to.be.false;\n      expect(vsync.backupPass_.isPending()).to.be.true;\n      clock.tick(17);\n      expect(result).to.equal('');\n      expect(vsync.tasks_).to.have.length(1);\n      expect(vsync.scheduled_).to.be.true;\n      expect(vsync.invisiblePass_.isPending()).to.be.false;\n      expect(vsync.backupPass_.isPending()).to.be.true;\n      clock.tick(240);\n      expect(result).to.equal('mu1');\n      expect(vsync.tasks_).to.have.length(0);\n      expect(vsync.scheduled_).to.be.false;\n      expect(vsync.invisiblePass_.isPending()).to.be.false;\n      expect(vsync.backupPass_.isPending()).to.be.false;\n    });","file":"unit/test-vsync.js","skipped":false,"dir":"test"},{"name":"should re-schedule when doc goes invisible","suites":["single-doc"],"updatePoint":{"line":275,"column":50,"index":8398},"line":275,"code":"    it('should re-schedule when doc goes invisible', () => {\n      let rafHandler;\n      vsync.raf_ = handler => rafHandler = handler;\n      isVisibleStub.returns(true);\n      let result = '';\n      vsync.run({\n        mutate: () => {\n          result += 'mu1';\n        }\n      });\n      expect(vsync.tasks_).to.have.length(1);\n      expect(vsync.scheduled_).to.be.true;\n      expect(rafHandler).to.exist;\n      expect(vsync.invisiblePass_.isPending()).to.be.false;\n      isVisibleStub.returns(false);\n      onVisibilityChangedStub.args[0][0]();\n      expect(vsync.tasks_).to.have.length(1);\n      expect(vsync.scheduled_).to.be.true;\n      expect(vsync.invisiblePass_.isPending()).to.be.true;\n      clock.tick(17);\n      expect(result).to.equal('mu1');\n      expect(vsync.tasks_).to.have.length(0);\n      expect(vsync.scheduled_).to.be.false;\n      expect(vsync.invisiblePass_.isPending()).to.be.false;\n    });","file":"unit/test-vsync.js","skipped":false,"dir":"test"},{"name":"should re-schedule when doc goes visible","suites":["single-doc"],"updatePoint":{"line":300,"column":48,"index":9308},"line":300,"code":"    it('should re-schedule when doc goes visible', () => {\n      let rafHandler;\n      vsync.raf_ = handler => rafHandler = handler;\n      isVisibleStub.returns(false);\n      let result = '';\n      vsync.run({\n        mutate: () => {\n          result += 'mu1';\n        }\n      });\n      expect(vsync.tasks_).to.have.length(1);\n      expect(vsync.scheduled_).to.be.true;\n      expect(rafHandler).to.be.undefined;\n      expect(vsync.invisiblePass_.isPending()).to.be.true;\n      isVisibleStub.returns(true);\n      onVisibilityChangedStub.args[0][0]();\n      expect(vsync.tasks_).to.have.length(1);\n      expect(vsync.scheduled_).to.be.true;\n      expect(rafHandler).to.exist;\n      rafHandler();\n      expect(result).to.equal('mu1');\n      expect(vsync.tasks_).to.have.length(0);\n      expect(vsync.scheduled_).to.be.false;\n    });","file":"unit/test-vsync.js","skipped":false,"dir":"test"},{"name":"should NOT re-schedule when no tasks pending","suites":["single-doc"],"updatePoint":{"line":324,"column":52,"index":10142},"line":324,"code":"    it('should NOT re-schedule when no tasks pending', () => {\n      let rafHandler;\n      vsync.raf_ = handler => rafHandler = handler;\n      isVisibleStub.returns(true);\n      expect(vsync.tasks_).to.have.length(0);\n      expect(vsync.scheduled_).to.be.false;\n      expect(rafHandler).to.be.undefined;\n      expect(vsync.invisiblePass_.isPending()).to.be.false;\n      isVisibleStub.returns(false);\n      onVisibilityChangedStub.args[0][0]();\n      expect(vsync.tasks_).to.have.length(0);\n      expect(vsync.scheduled_).to.be.false;\n      expect(rafHandler).to.be.undefined;\n      expect(vsync.invisiblePass_.isPending()).to.be.false;\n    });","file":"unit/test-vsync.js","skipped":false,"dir":"test"},{"name":"should run anim task when visible","suites":["single-doc"],"updatePoint":{"line":339,"column":41,"index":10775},"line":339,"code":"    it('should run anim task when visible', () => {\n      let rafHandler;\n      vsync.raf_ = handler => rafHandler = handler;\n      isVisibleStub.returns(true);\n      let result = '';\n      const res = vsync.runAnim(contextNode, {\n        mutate: () => {\n          result += 'mu1';\n        }\n      });\n      expect(res).to.be.true;\n      expect(rafHandler).to.exist;\n      expect(vsync.scheduled_).to.be.true;\n      rafHandler();\n      expect(result).to.equal('mu1');\n    });","file":"unit/test-vsync.js","skipped":false,"dir":"test"},{"name":"should create and run anim task when visible","suites":["single-doc"],"updatePoint":{"line":355,"column":52,"index":11262},"line":355,"code":"    it('should create and run anim task when visible', () => {\n      let rafHandler;\n      vsync.raf_ = handler => rafHandler = handler;\n      isVisibleStub.returns(true);\n      let result = '';\n      const task = vsync.createAnimTask(contextNode, {\n        mutate: () => {\n          result += 'mu1';\n        }\n      });\n      const res = task();\n      expect(res).to.be.true;\n      expect(rafHandler).to.exist;\n      expect(vsync.scheduled_).to.be.true;\n      rafHandler();\n      expect(result).to.equal('mu1');\n    });","file":"unit/test-vsync.js","skipped":false,"dir":"test"},{"name":"should NOT run anim task when invisible","suites":["single-doc"],"updatePoint":{"line":372,"column":47,"index":11778},"line":372,"code":"    it('should NOT run anim task when invisible', () => {\n      let rafHandler;\n      vsync.raf_ = handler => rafHandler = handler;\n      isVisibleStub.returns(false);\n      let result = ''; // eslint-disable-line @typescript-eslint/no-unused-vars\n      const res = vsync.runAnim(contextNode, {\n        mutate: () => {\n          result += 'mu1';\n        }\n      });\n      expect(res).to.be.false;\n      expect(rafHandler).to.be.undefined;\n      expect(vsync.scheduled_).to.be.false;\n    });","file":"unit/test-vsync.js","skipped":false,"dir":"test"},{"name":"should create but NOT run anim task when invisible","suites":["single-doc"],"updatePoint":{"line":386,"column":58,"index":12280},"line":386,"code":"    it('should create but NOT run anim task when invisible', () => {\n      let rafHandler;\n      vsync.raf_ = handler => rafHandler = handler;\n      isVisibleStub.returns(false);\n      let result = ''; // eslint-disable-line @typescript-eslint/no-unused-vars\n      const task = vsync.createAnimTask(contextNode, {\n        mutate: () => {\n          result += 'mu1';\n        }\n      });\n      const res = task();\n      expect(res).to.be.false;\n      expect(rafHandler).to.be.undefined;\n      expect(vsync.scheduled_).to.be.false;\n    });","file":"unit/test-vsync.js","skipped":false,"dir":"test"},{"name":"should reject mutate series when invisible","suites":["single-doc"],"updatePoint":{"line":401,"column":50,"index":12808},"line":401,"code":"    it('should reject mutate series when invisible', () => {\n      isVisibleStub.returns(false);\n      const mutatorSpy = env.sandbox.spy();\n      const promise = vsync.runAnimMutateSeries(contextNode, mutatorSpy);\n      return promise.then(() => {\n        return 'SUCCESS';\n      }, error => {\n        return 'ERROR: ' + error;\n      }).then(response => {\n        expect(response).to.match(/^ERROR/);\n        expect(mutatorSpy).to.have.not.been.called;\n      });\n    });","file":"unit/test-vsync.js","skipped":false,"dir":"test"},{"name":"should schedule frames using the polyfill","suites":["single-doc","RAF polyfill"],"updatePoint":{"line":420,"column":51,"index":13444},"line":420,"code":"      it('should schedule frames using the polyfill', () => {\n        let calls = 0;\n        vsync.mutate(() => {\n          calls++;\n        });\n        clock.tick(15);\n        vsync.mutate(() => {\n          calls++;\n        });\n        expect(calls).to.equal(0);\n        clock.tick(1);\n        expect(calls).to.equal(2);\n        clock.tick(10);\n        vsync.mutate(() => {\n          calls++;\n        });\n        expect(calls).to.equal(2);\n        clock.tick(6);\n        expect(calls).to.equal(3);\n      });","file":"unit/test-vsync.js","skipped":false,"dir":"test"},{"name":"should init correctly","suites":["multi-doc"],"updatePoint":{"line":464,"column":29,"index":14800},"line":464,"code":"    it('should init correctly', () => {\n      expect(vsync.canAnimate(contextNode)).to.be.true;\n      expect(getVisibilityEventCount()).to.equal(1);\n      expect(onVisibilityChangedStub).to.not.be.called;\n    });","file":"unit/test-vsync.js","skipped":false,"dir":"test"},{"name":"should schedule via animation frames when doc is visible","suites":["multi-doc"],"updatePoint":{"line":469,"column":64,"index":15048},"line":469,"code":"    it('should schedule via animation frames when doc is visible', () => {\n      let rafHandler;\n      vsync.raf_ = handler => rafHandler = handler;\n      isVisibleStub.returns(true);\n      let result = '';\n      vsync.run({\n        mutate: () => {\n          result += 'mu1';\n        }\n      });\n      expect(vsync.tasks_).to.have.length(1);\n      expect(vsync.scheduled_).to.be.true;\n      expect(rafHandler).to.exist;\n      expect(vsync.invisiblePass_.isPending()).to.be.false;\n      rafHandler();\n      expect(result).to.equal('mu1');\n      expect(vsync.tasks_).to.have.length(0);\n      expect(vsync.scheduled_).to.be.false;\n    });","file":"unit/test-vsync.js","skipped":false,"dir":"test"},{"name":"should schedule via timer frames when doc is not visible","suites":["multi-doc"],"updatePoint":{"line":488,"column":64,"index":15684},"line":488,"code":"    it('should schedule via timer frames when doc is not visible', () => {\n      let rafHandler;\n      vsync.raf_ = handler => rafHandler = handler;\n      doc.visibilityState = 'hidden';\n      let result = '';\n      vsync.run({\n        mutate: () => {\n          result += 'mu1';\n        }\n      });\n      expect(vsync.tasks_).to.have.length(1);\n      expect(vsync.scheduled_).to.be.true;\n      expect(rafHandler).to.be.undefined;\n      expect(vsync.invisiblePass_.isPending()).to.be.true;\n      clock.tick(17);\n      expect(result).to.equal('mu1');\n      expect(vsync.tasks_).to.have.length(0);\n      expect(vsync.scheduled_).to.be.false;\n      expect(vsync.invisiblePass_.isPending()).to.be.false;\n    });","file":"unit/test-vsync.js","skipped":false,"dir":"test"},{"name":"should re-schedule when doc goes invisible","suites":["multi-doc"],"updatePoint":{"line":508,"column":50,"index":16377},"line":508,"code":"    it('should re-schedule when doc goes invisible', () => {\n      let rafHandler;\n      vsync.raf_ = handler => rafHandler = handler;\n      let result = '';\n      vsync.run({\n        mutate: () => {\n          result += 'mu1';\n        }\n      });\n      expect(vsync.tasks_).to.have.length(1);\n      expect(vsync.scheduled_).to.be.true;\n      expect(rafHandler).to.exist;\n      expect(vsync.invisiblePass_.isPending()).to.be.false;\n      doc.visibilityState = 'hidden';\n      expect(vsync.tasks_).to.have.length(1);\n      expect(vsync.scheduled_).to.be.true;\n      expect(vsync.invisiblePass_.isPending()).to.be.true;\n      clock.tick(17);\n      expect(result).to.equal('mu1');\n      expect(vsync.tasks_).to.have.length(0);\n      expect(vsync.scheduled_).to.be.false;\n      expect(vsync.invisiblePass_.isPending()).to.be.false;\n    });","file":"unit/test-vsync.js","skipped":false,"dir":"test"},{"name":"should re-schedule when doc goes visible","suites":["multi-doc"],"updatePoint":{"line":531,"column":48,"index":17210},"line":531,"code":"    it('should re-schedule when doc goes visible', () => {\n      let rafHandler;\n      vsync.raf_ = handler => rafHandler = handler;\n      doc.visibilityState = 'hidden';\n      let result = '';\n      vsync.run({\n        mutate: () => {\n          result += 'mu1';\n        }\n      });\n      expect(vsync.tasks_).to.have.length(1);\n      expect(vsync.scheduled_).to.be.true;\n      expect(rafHandler).to.be.undefined;\n      expect(vsync.invisiblePass_.isPending()).to.be.true;\n      doc.visibilityState = 'visible';\n      expect(vsync.tasks_).to.have.length(1);\n      expect(vsync.scheduled_).to.be.true;\n      expect(rafHandler).to.exist;\n      rafHandler();\n      expect(result).to.equal('mu1');\n      expect(vsync.tasks_).to.have.length(0);\n      expect(vsync.scheduled_).to.be.false;\n    });","file":"unit/test-vsync.js","skipped":false,"dir":"test"},{"name":"should NOT re-schedule when no tasks pending","suites":["multi-doc"],"updatePoint":{"line":554,"column":52,"index":18006},"line":554,"code":"    it('should NOT re-schedule when no tasks pending', () => {\n      let rafHandler;\n      vsync.raf_ = handler => rafHandler = handler;\n      expect(vsync.tasks_).to.have.length(0);\n      expect(vsync.scheduled_).to.be.false;\n      expect(rafHandler).to.be.undefined;\n      expect(vsync.invisiblePass_.isPending()).to.be.false;\n      doc.visibilityState = 'hidden';\n      expect(vsync.tasks_).to.have.length(0);\n      expect(vsync.scheduled_).to.be.false;\n      expect(rafHandler).to.be.undefined;\n      expect(vsync.invisiblePass_.isPending()).to.be.false;\n    });","file":"unit/test-vsync.js","skipped":false,"dir":"test"},{"name":"should run anim task when visible","suites":["multi-doc"],"updatePoint":{"line":567,"column":41,"index":18562},"line":567,"code":"    it('should run anim task when visible', () => {\n      let rafHandler;\n      vsync.raf_ = handler => rafHandler = handler;\n      let result = '';\n      const res = vsync.runAnim(contextNode, {\n        mutate: () => {\n          result += 'mu1';\n        }\n      });\n      expect(res).to.be.true;\n      expect(rafHandler).to.exist;\n      expect(vsync.scheduled_).to.be.true;\n      rafHandler();\n      expect(result).to.equal('mu1');\n    });","file":"unit/test-vsync.js","skipped":false,"dir":"test"},{"name":"should create and run anim task when visible","suites":["multi-doc"],"updatePoint":{"line":582,"column":52,"index":19014},"line":582,"code":"    it('should create and run anim task when visible', () => {\n      let rafHandler;\n      vsync.raf_ = handler => rafHandler = handler;\n      let result = '';\n      const task = vsync.createAnimTask(contextNode, {\n        mutate: () => {\n          result += 'mu1';\n        }\n      });\n      const res = task();\n      expect(res).to.be.true;\n      expect(rafHandler).to.exist;\n      expect(vsync.scheduled_).to.be.true;\n      rafHandler();\n      expect(result).to.equal('mu1');\n    });","file":"unit/test-vsync.js","skipped":false,"dir":"test"},{"name":"should NOT run anim task when invisible","suites":["multi-doc"],"updatePoint":{"line":598,"column":47,"index":19495},"line":598,"code":"    it('should NOT run anim task when invisible', () => {\n      let rafHandler;\n      vsync.raf_ = handler => rafHandler = handler;\n      doc.visibilityState = 'hidden';\n      let result = ''; // eslint-disable-line @typescript-eslint/no-unused-vars\n      const res = vsync.runAnim(contextNode, {\n        mutate: () => {\n          result += 'mu1';\n        }\n      });\n      expect(res).to.be.false;\n      expect(rafHandler).to.be.undefined;\n      expect(vsync.scheduled_).to.be.false;\n    });","file":"unit/test-vsync.js","skipped":false,"dir":"test"},{"name":"should create but NOT run anim task when invisible","suites":["multi-doc"],"updatePoint":{"line":612,"column":58,"index":19999},"line":612,"code":"    it('should create but NOT run anim task when invisible', () => {\n      let rafHandler;\n      vsync.raf_ = handler => rafHandler = handler;\n      doc.visibilityState = 'hidden';\n      let result = ''; // eslint-disable-line @typescript-eslint/no-unused-vars\n      const task = vsync.createAnimTask(contextNode, {\n        mutate: () => {\n          result += 'mu1';\n        }\n      });\n      const res = task();\n      expect(res).to.be.false;\n      expect(rafHandler).to.be.undefined;\n      expect(vsync.scheduled_).to.be.false;\n    });","file":"unit/test-vsync.js","skipped":false,"dir":"test"},{"name":"should reject mutate series when invisible","suites":["multi-doc"],"updatePoint":{"line":627,"column":50,"index":20529},"line":627,"code":"    it('should reject mutate series when invisible', () => {\n      doc.visibilityState = 'hidden';\n      const mutatorSpy = env.sandbox.spy();\n      const promise = vsync.runAnimMutateSeries(contextNode, mutatorSpy);\n      return promise.then(() => {\n        return 'SUCCESS';\n      }, error => {\n        return 'ERROR: ' + error;\n      }).then(response => {\n        expect(response).to.match(/^ERROR/);\n        expect(mutatorSpy).to.have.not.been.called;\n      });\n    });","file":"unit/test-vsync.js","skipped":false,"dir":"test"},{"name":"should be able to fetch a document","suites":["#fetchDocument"],"updatePoint":{"line":34,"column":42,"index":1021},"line":34,"code":"    it('should be able to fetch a document', () => {\n      const promise = fetchDocument(win, '/index.html').then(doc => {\n        expect(doc.nodeType).to.equal(9);\n        expect(doc.firstChild.textContent).to.equals('Foo');\n      });\n      xhrCreated.then(xhr => {\n        expect(xhr.requestHeaders['Accept']).to.equal('text/html');\n        xhr.respond(200, {\n          'Content-Type': 'text/xml'\n        }, '<html><body>Foo</body></html>');\n        expect(xhr.responseType).to.equal('document');\n      });\n      return promise;\n    });","file":"unit/test-xhr-document-fetcher.js","skipped":false,"dir":"test"},{"name":"should mark 400 as not retriable","suites":["#fetchDocument"],"updatePoint":{"line":48,"column":40,"index":1558},"line":48,"code":"    it('should mark 400 as not retriable', () => {\n      const promise = fetchDocument(win, '/index.html');\n      xhrCreated.then(xhr => xhr.respond(400, {\n        'Content-Type': 'text/xml'\n      }, '<html></html>'));\n      return promise.catch(e => {\n        expect(e.retriable).to.be.equal(false);\n        expect(e.retriable).to.not.equal(true);\n      });\n    });","file":"unit/test-xhr-document-fetcher.js","skipped":false,"dir":"test"},{"name":"should mark 415 as retriable","suites":["#fetchDocument"],"updatePoint":{"line":58,"column":36,"index":1921},"line":58,"code":"    it('should mark 415 as retriable', () => {\n      const promise = fetchDocument(win, '/index.html');\n      xhrCreated.then(xhr => xhr.respond(415, {\n        'Content-Type': 'text/xml'\n      }, '<html></html>'));\n      return promise.catch(e => {\n        expect(e.retriable).to.exist;\n        expect(e.retriable).to.be.true;\n      });\n    });","file":"unit/test-xhr-document-fetcher.js","skipped":false,"dir":"test"},{"name":"should mark 500 as retriable","suites":["#fetchDocument"],"updatePoint":{"line":68,"column":36,"index":2266},"line":68,"code":"    it('should mark 500 as retriable', () => {\n      const promise = fetchDocument(win, '/index.html');\n      xhrCreated.then(xhr => xhr.respond(415, {\n        'Content-Type': 'text/xml'\n      }, '<html></html>'));\n      return promise.catch(e => {\n        expect(e.retriable).to.exist;\n        expect(e.retriable).to.be.true;\n      });\n    });","file":"unit/test-xhr-document-fetcher.js","skipped":false,"dir":"test"},{"name":"should error on non truthy responseXML","suites":["#fetchDocument"],"updatePoint":{"line":78,"column":46,"index":2621},"line":78,"code":"    it('should error on non truthy responseXML', () => {\n      const promise = fetchDocument(win, '/index.html');\n      xhrCreated.then(xhr => xhr.respond(200, {\n        'Content-Type': 'application/json'\n      }, '{\"hello\": \"world\"}'));\n      return promise.catch(e => {\n        expect(e.message).to.contain('responseXML should exist');\n      });\n    });","file":"unit/test-xhr-document-fetcher.js","skipped":false,"dir":"test"},{"name":"should return correct document response","suites":["interceptor"],"updatePoint":{"line":133,"column":47,"index":4392},"line":133,"code":"    it('should return correct document response', () => {\n      sendMessageStub.returns(Promise.resolve({\n        body: '<html><body>Foo</body></html>',\n        init: {\n          headers: []\n        }\n      }));\n      return fetchDocument(interceptionEnabledWin, 'https://www.some-url.org/some-resource/').then(doc => {\n        expect(doc).to.have.nested.property('body.textContent').that.equals('Foo');\n      });\n    });","file":"unit/test-xhr-document-fetcher.js","skipped":false,"dir":"test"},{"name":"should allow GET method","suites":["fetch method"],"updatePoint":{"line":20,"column":31,"index":740},"line":20,"code":"    it('should allow GET method', () => {\n      mockOkResponse();\n      return fetchPolyfill('/get?k=v1').then(response => {\n        expect(response.ok).to.be.equal(true);\n      });\n    });","file":"unit/test-xhr-fetch-polyfill.js","skipped":false,"dir":"test"},{"name":"should allow POST method","suites":["fetch method"],"updatePoint":{"line":26,"column":32,"index":931},"line":26,"code":"    it('should allow POST method', () => {\n      mockOkResponse();\n      return fetchPolyfill('/post', {\n        method: 'POST',\n        body: {\n          hello: 'world'\n        }\n      }).then(response => {\n        expect(response.ok).to.be.equal(true);\n      });\n    });","file":"unit/test-xhr-fetch-polyfill.js","skipped":false,"dir":"test"},{"name":"should not allow PUT method","suites":["fetch method"],"updatePoint":{"line":37,"column":35,"index":1207},"line":37,"code":"    it('should not allow PUT method', () => {\n      expectAsyncConsoleError(methodErrorRegex);\n      mockOkResponse();\n      return expect(fetchPolyfill('/post', {\n        method: 'PUT',\n        body: {\n          hello: 'world'\n        }\n      })).to.be.rejectedWith(methodErrorRegex);\n    });","file":"unit/test-xhr-fetch-polyfill.js","skipped":false,"dir":"test"},{"name":"should not allow PATCH method","suites":["fetch method"],"updatePoint":{"line":47,"column":37,"index":1503},"line":47,"code":"    it('should not allow PATCH method', () => {\n      expectAsyncConsoleError(methodErrorRegex);\n      mockOkResponse();\n      return expect(fetchPolyfill('/post', {\n        method: 'PATCH',\n        body: {\n          hello: 'world'\n        }\n      })).to.be.rejectedWith(methodErrorRegex);\n    });","file":"unit/test-xhr-fetch-polyfill.js","skipped":false,"dir":"test"},{"name":"should not allow DELETE method","suites":["fetch method"],"updatePoint":{"line":57,"column":38,"index":1802},"line":57,"code":"    it('should not allow DELETE method', () => {\n      expectAsyncConsoleError(methodErrorRegex);\n      mockOkResponse();\n      return expect(fetchPolyfill('/post', {\n        method: 'DELETE',\n        body: {\n          hello: 'world'\n        }\n      })).to.be.rejectedWith(methodErrorRegex);\n    });","file":"unit/test-xhr-fetch-polyfill.js","skipped":false,"dir":"test"},{"name":"should allow FormData as body","suites":["fetch method"],"updatePoint":{"line":67,"column":37,"index":2101},"line":67,"code":"    it('should allow FormData as body', () => {\n      const fakeWin = null;\n      env.sandbox.stub(Services, 'platformFor').returns({\n        isIos() {\n          return false;\n        }\n      });\n      const formData = createFormDataWrapper(fakeWin);\n      env.sandbox.stub(JSON, 'stringify');\n      formData.append('name', 'John Miller');\n      formData.append('age', 56);\n      const post = fetchPolyfill.bind(this, '/post', {\n        method: 'POST',\n        body: formData\n      });\n      expect(post).to.not.throw();\n      expect(JSON.stringify.called).to.be.false;\n    });","file":"unit/test-xhr-fetch-polyfill.js","skipped":false,"dir":"test"},{"name":"should do `GET` as default method","suites":["fetch method"],"updatePoint":{"line":85,"column":41,"index":2683},"line":85,"code":"    it('should do `GET` as default method', () => {\n      fetchPolyfill('/get?k=v1');\n      return xhrCreated.then(xhr => expect(xhr.method).to.equal('GET'));\n    });","file":"unit/test-xhr-fetch-polyfill.js","skipped":false,"dir":"test"},{"name":"should normalize POST method name to uppercase","suites":["fetch method"],"updatePoint":{"line":89,"column":54,"index":2863},"line":89,"code":"    it('should normalize POST method name to uppercase', () => {\n      fetchPolyfill('/get?k=v1', {\n        method: 'post'\n      });\n      return xhrCreated.then(xhr => expect(xhr.method).to.equal('POST'));\n    });","file":"unit/test-xhr-fetch-polyfill.js","skipped":false,"dir":"test"},{"name":"should parse and pass the headers","suites":["fetch method"],"updatePoint":{"line":95,"column":41,"index":3065},"line":95,"code":"    it('should parse and pass the headers', () => {\n      const headers = {\n        'Content-type': 'application/json;charset=utf-8',\n        'HEADER-2': 'VALUE-2'\n      };\n      fetchPolyfill('/get?k=v1', {\n        method: 'post',\n        headers\n      });\n      return xhrCreated.then(xhr => {\n        for (const key in headers) {\n          expect(xhr.requestHeaders[key]).to.be.equal(headers[key]);\n        }\n      });\n    });","file":"unit/test-xhr-fetch-polyfill.js","skipped":false,"dir":"test"},{"name":"should pass the body to xhr request","suites":["fetch method"],"updatePoint":{"line":110,"column":43,"index":3497},"line":110,"code":"    it('should pass the body to xhr request', () => {\n      const bodyData = {\n        hello: 'world'\n      };\n      fetchPolyfill('/get?k=v1', {\n        method: 'post',\n        body: JSON.stringify(bodyData)\n      });\n      return xhrCreated.then(xhr => {\n        expect(xhr.requestBody).to.be.equal(JSON.stringify(bodyData));\n      });\n    });","file":"unit/test-xhr-fetch-polyfill.js","skipped":false,"dir":"test"},{"name":"should make xhr request withCredentials for creds include","suites":["fetch method"],"updatePoint":{"line":122,"column":65,"index":3865},"line":122,"code":"    it('should make xhr request withCredentials for creds include', () => {\n      fetchPolyfill('/get?k=v1', {\n        credentials: 'include'\n      });\n      return xhrCreated.then(xhr => {\n        expect(xhr.withCredentials).to.be.equal(true);\n      });\n    });","file":"unit/test-xhr-fetch-polyfill.js","skipped":false,"dir":"test"},{"name":"should keep default status as 200 OK","suites":["Response"],"updatePoint":{"line":134,"column":44,"index":4244},"line":134,"code":"    it('should keep default status as 200 OK', () => {\n      const response = new Response(TEST_TEXT);\n      expect(response.status).to.be.equals(200);\n    });","file":"unit/test-xhr-fetch-polyfill.js","skipped":false,"dir":"test"},{"name":"should construct with body and explicit header uses header","suites":["Response"],"updatePoint":{"line":146,"column":66,"index":4750},"line":146,"code":"    it('should construct with body and explicit header uses header', () => {\n      const response = new Response(TEST_TEXT, {\n        headers: {\n          'content-type': 'application/json',\n          'random': 'random-value'\n        }\n      });\n      expect(response.status).to.be.equals(200);\n      expect(response.headers.get('content-type')).to.be.equal('application/json');\n      expect(response.headers.get('random')).to.be.equal('random-value');\n    });","file":"unit/test-xhr-fetch-polyfill.js","skipped":false,"dir":"test"},{"name":"should reflect given status","suites":["Response"],"updatePoint":{"line":157,"column":35,"index":5180},"line":157,"code":"    it('should reflect given status', () => {\n      let response = new Response(TEST_TEXT, {\n        status: 400\n      });\n      expect(response.status).to.be.equals(400);\n      response = new Response(TEST_TEXT, {\n        status: 415\n      });\n      expect(response.status).to.be.equals(415);\n      response = new Response(TEST_TEXT, {\n        status: 500\n      });\n      expect(response.status).to.be.equals(500);\n    });","file":"unit/test-xhr-fetch-polyfill.js","skipped":false,"dir":"test"},{"name":"should provide url","suites":["Response"],"updatePoint":{"line":171,"column":26,"index":5595},"line":171,"code":"    it('should provide url', () => {\n      const response = new Response(TEST_TEXT, {\n        responseURL: 'https://foo.example'\n      });\n      expect(response.url).to.equal('https://foo.example');\n    });","file":"unit/test-xhr-fetch-polyfill.js","skipped":false,"dir":"test"},{"name":"should provide text","suites":["Response"],"updatePoint":{"line":177,"column":27,"index":5803},"line":177,"code":"    it('should provide text', () => {\n      const response = new Response(TEST_TEXT);\n      return response.text().then(result => {\n        expect(result).to.equal(TEST_TEXT);\n      });\n    });","file":"unit/test-xhr-fetch-polyfill.js","skipped":false,"dir":"test"},{"name":"should provide text only once","suites":["Response"],"updatePoint":{"line":183,"column":37,"index":6007},"line":183,"code":"    it('should provide text only once', () => {\n      expectAsyncConsoleError(bodyUsedErrorRegex);\n      const response = new Response(TEST_TEXT);\n      return response.text().then(result => {\n        expect(result).to.equal(TEST_TEXT);\n        expect(response.text.bind(response), 'should throw').to.throw(Error, bodyUsedErrorRegex);\n      });\n    });","file":"unit/test-xhr-fetch-polyfill.js","skipped":false,"dir":"test"},{"name":"should provide json","suites":["Response"],"updatePoint":{"line":191,"column":27,"index":6350},"line":191,"code":"    it('should provide json', () => {\n      const RESPONSE_JSON = {\n        'Key1': 'value',\n        'key2': 'Value2'\n      };\n      const response = new Response(JSON.stringify(RESPONSE_JSON));\n      return response.json().then(result => {\n        expect(result).to.deep.equal(RESPONSE_JSON);\n      });\n    });","file":"unit/test-xhr-fetch-polyfill.js","skipped":false,"dir":"test"},{"name":"should be cloneable and each instance should provide text","suites":["Response"],"updatePoint":{"line":201,"column":65,"index":6700},"line":201,"code":"    it('should be cloneable and each instance should provide text', () => {\n      const response = new Response(TEST_TEXT);\n      const clone = response.clone();\n      return Promise.all([response.text(), clone.text()]).then(results => {\n        expect(results[0]).to.equal(TEST_TEXT);\n        expect(results[1]).to.equal(TEST_TEXT);\n      });\n    });","file":"unit/test-xhr-fetch-polyfill.js","skipped":false,"dir":"test"},{"name":"should not be cloneable if body is already accessed","suites":["Response"],"updatePoint":{"line":209,"column":59,"index":7046},"line":209,"code":"    it('should not be cloneable if body is already accessed', () => {\n      expectAsyncConsoleError(bodyUsedErrorRegex);\n      const response = new Response(TEST_TEXT);\n      return response.text().then(() => {\n        expect(() => response.clone(), 'should throw').to.throw(Error, bodyUsedErrorRegex);\n      });\n    });","file":"unit/test-xhr-fetch-polyfill.js","skipped":false,"dir":"test"},{"name":"should allow GET and POST methods","suites":["#XHR"],"updatePoint":{"line":77,"column":45,"index":2265},"line":77,"code":"        it('should allow GET and POST methods', () => {\n          const get = xhr.fetchJson.bind(xhr, '/get?k=v1');\n          const post = xhr.fetchJson.bind(xhr, '/post', {\n            method: 'POST',\n            body: {\n              hello: 'world'\n            }\n          });\n          const put = xhr.fetchJson.bind(xhr, '/put', {\n            method: 'PUT',\n            body: {\n              hello: 'world'\n            }\n          });\n          const patch = xhr.fetchJson.bind(xhr, '/patch', {\n            method: 'PATCH',\n            body: {\n              hello: 'world'\n            }\n          });\n          const deleteMethod = xhr.fetchJson.bind(xhr, '/delete', {\n            method: 'DELETE',\n            body: {\n              id: 3\n            }\n          });\n          expect(get).to.not.throw();\n          expect(post).to.not.throw();\n          allowConsoleError(() => {\n            expect(put).to.throw();\n          });\n          allowConsoleError(() => {\n            expect(patch).to.throw();\n          });\n          allowConsoleError(() => {\n            expect(deleteMethod).to.throw();\n          });\n        });","file":"unit/test-xhr.js","skipped":false,"dir":"test"},{"name":"should allow FormData as body","suites":["#XHR"],"updatePoint":{"line":115,"column":41,"index":3390},"line":115,"code":"        it('should allow FormData as body', () => {\n          const fakeWin = null;\n          env.sandbox.stub(Services, 'platformFor').returns({\n            isIos() {\n              return false;\n            }\n          });\n          const formData = createFormDataWrapper(fakeWin);\n          env.sandbox.stub(JSON, 'stringify');\n          formData.append('name', 'John Miller');\n          formData.append('age', 56);\n          const post = xhr.fetchJson.bind(xhr, '/post', {\n            method: 'POST',\n            body: formData\n          });\n          expect(post).to.not.throw();\n          expect(JSON.stringify.called).to.be.false;\n        });","file":"unit/test-xhr.js","skipped":false,"dir":"test"},{"name":"should do `GET` as default method","suites":["#XHR"],"updatePoint":{"line":133,"column":45,"index":4043},"line":133,"code":"        it('should do `GET` as default method', () => {\n          xhr.fetchJson('/get?k=v1');\n          return xhrCreated.then(xhr => expect(xhr.method).to.equal('GET'));\n        });","file":"unit/test-xhr.js","skipped":false,"dir":"test"},{"name":"should normalize GET method name to uppercase","suites":["#XHR"],"updatePoint":{"line":137,"column":57,"index":4238},"line":137,"code":"        it('should normalize GET method name to uppercase', () => {\n          xhr.fetchJson('/abc');\n          return xhrCreated.then(xhr => expect(xhr.method).to.equal('GET'));\n        });","file":"unit/test-xhr.js","skipped":false,"dir":"test"},{"name":"should normalize POST method name to uppercase","suites":["#XHR"],"updatePoint":{"line":141,"column":58,"index":4429},"line":141,"code":"        it('should normalize POST method name to uppercase', () => {\n          xhr.fetchJson('/abc', {\n            method: 'post',\n            body: {\n              hello: 'world'\n            }\n          });\n          return xhrCreated.then(xhr => expect(xhr.method).to.equal('POST'));\n        });","file":"unit/test-xhr.js","skipped":false,"dir":"test"},{"name":"should inject source origin query parameter","suites":["#XHR"],"updatePoint":{"line":150,"column":55,"index":4724},"line":150,"code":"        it('should inject source origin query parameter', () => {\n          xhr.fetchJson('/get?k=v1#h1');\n          return xhrCreated.then(xhr => expect(noOrigin(xhr.url)).to.equal('/get?k=v1&__amp_source_origin=https%3A%2F%2Facme.com#h1'));\n        });","file":"unit/test-xhr.js","skipped":false,"dir":"test"},{"name":"should inject source origin query parameter w/o query","suites":["#XHR"],"updatePoint":{"line":154,"column":65,"index":4989},"line":154,"code":"        it('should inject source origin query parameter w/o query', () => {\n          xhr.fetchJson('/get');\n          return xhrCreated.then(xhr => expect(noOrigin(xhr.url)).to.equal('/get?__amp_source_origin=https%3A%2F%2Facme.com'));\n        });","file":"unit/test-xhr.js","skipped":false,"dir":"test"},{"name":"should defend against invalid source origin query parameter","suites":["#XHR"],"updatePoint":{"line":158,"column":71,"index":5244},"line":158,"code":"        it('should defend against invalid source origin query parameter', () => {\n          allowConsoleError(() => {\n            expect(() => {\n              xhr.fetchJson('/get?k=v1&__amp_source_origin=invalid#h1');\n            }).to.throw(/Source origin is not allowed/);\n          });\n        });","file":"unit/test-xhr.js","skipped":false,"dir":"test"},{"name":"should defend against empty source origin query parameter","suites":["#XHR"],"updatePoint":{"line":165,"column":69,"index":5543},"line":165,"code":"        it('should defend against empty source origin query parameter', () => {\n          allowConsoleError(() => {\n            expect(() => {\n              xhr.fetchJson('/get?k=v1&__amp_source_origin=#h1');\n            }).to.throw(/Source origin is not allowed/);\n          });\n        });","file":"unit/test-xhr.js","skipped":false,"dir":"test"},{"name":"should defend against re-encoded source origin parameter","suites":["#XHR"],"updatePoint":{"line":172,"column":68,"index":5834},"line":172,"code":"        it('should defend against re-encoded source origin parameter', () => {\n          allowConsoleError(() => {\n            expect(() => {\n              xhr.fetchJson('/get?k=v1&_%5famp_source_origin=#h1');\n            }).to.throw(/Source origin is not allowed/);\n          });\n        });","file":"unit/test-xhr.js","skipped":false,"dir":"test"},{"name":"should not include __amp_source_origin if ampCors set to false","suites":["#XHR"],"updatePoint":{"line":179,"column":74,"index":6133},"line":179,"code":"        it('should not include __amp_source_origin if ampCors set to false', () => {\n          xhr.fetchJson('/get', {\n            ampCors: false\n          });\n          return xhrCreated.then(xhr => expect(noOrigin(xhr.url)).to.equal('/get'));\n        });","file":"unit/test-xhr.js","skipped":false,"dir":"test"},{"name":"should accept AMP origin when received in response","suites":["#XHR"],"updatePoint":{"line":185,"column":62,"index":6378},"line":185,"code":"        it('should accept AMP origin when received in response', () => {\n          const promise = xhr.fetchJson('/get');\n          xhrCreated.then(xhr => xhr.respond(200, {\n            'Content-Type': 'application/json'\n          }, '{}'));\n          return promise;\n        });","file":"unit/test-xhr.js","skipped":false,"dir":"test"},{"name":"should not call fetch if view is not visible ","suites":["#XHR","doc visibility"],"updatePoint":{"line":196,"column":59,"index":6778},"line":196,"code":"          it('should not call fetch if view is not visible ', () => {\n            const fetchCall = env.sandbox.spy(test.win, 'fetch');\n            ampdoc.whenFirstVisible = () => Promise.reject();\n            xhr.fetchJson('/get', {\n              ampCors: false\n            });\n            expect(fetchCall.notCalled).to.be.true;\n          });","file":"unit/test-xhr.js","skipped":false,"dir":"test"},{"name":"should call fetch if view is visible ","suites":["#XHR","doc visibility"],"updatePoint":{"line":204,"column":51,"index":7115},"line":204,"code":"          it('should call fetch if view is visible ', () => {\n            const fetchCall = env.sandbox.spy(test.win, 'fetch');\n            ampdoc.whenFirstVisible = () => Promise.resolve();\n            const fetch = xhr.fetchJson('/get', {\n              ampCors: false\n            });\n            fetch.then(() => {\n              expect(fetchCall.calledOnce).to.be.true;\n            });\n          });","file":"unit/test-xhr.js","skipped":false,"dir":"test"},{"name":"should not be set for cross origin requests","suites":["AMP-Same-Origin"],"updatePoint":{"line":221,"column":53,"index":7668},"line":221,"code":"      it('should not be set for cross origin requests', () => {\n        const init = {};\n        xhr.fetchJson('/whatever', init);\n        expect(init['headers']['AMP-Same-Origin']).to.be.undefined;\n      });","file":"unit/test-xhr.js","skipped":false,"dir":"test"},{"name":"should be set for all same origin GET requests","suites":["AMP-Same-Origin"],"updatePoint":{"line":226,"column":56,"index":7880},"line":226,"code":"      it('should be set for all same origin GET requests', () => {\n        const init = {};\n        location.href = '/path';\n        xhr.fetchJson('/whatever', init);\n        expect(init['headers']['AMP-Same-Origin']).to.equal('true');\n      });","file":"unit/test-xhr.js","skipped":false,"dir":"test"},{"name":"should be set for all same origin POST requests","suites":["AMP-Same-Origin"],"updatePoint":{"line":232,"column":57,"index":8127},"line":232,"code":"      it('should be set for all same origin POST requests', () => {\n        const init = {\n          method: 'post',\n          body: {}\n        };\n        location.href = '/path';\n        xhr.fetchJson('/whatever', init);\n        expect(init['headers']['AMP-Same-Origin']).to.equal('true');\n      });","file":"unit/test-xhr.js","skipped":false,"dir":"test"},{"name":"should check origin not source origin","suites":["AMP-Same-Origin"],"updatePoint":{"line":241,"column":47,"index":8418},"line":241,"code":"      it('should check origin not source origin', () => {\n        let init = {\n          method: 'post',\n          body: {}\n        };\n        location.href = 'https://cdn.ampproject.org/c/s/example.com/hello/path';\n        xhr.fetchJson('https://example.com/what/ever', init);\n        expect(init['headers']['AMP-Same-Origin']).to.be.undefined;\n        init = {\n          method: 'post',\n          body: {}\n        };\n        location.href = 'https://example.com/hello/path';\n        xhr.fetchJson('https://example.com/what/ever', init);\n        expect(init['headers']['AMP-Same-Origin']).to.equal('true');\n      });","file":"unit/test-xhr.js","skipped":false,"dir":"test"},{"name":"should resolve if success","suites":["assertSuccess"],"updatePoint":{"line":277,"column":37,"index":9603},"line":277,"code":"        it('should resolve if success', () => {\n          mockXhr.status = 200;\n          return assertSuccess(createResponseInstance('', mockXhr)).then(response => {\n            expect(response.status).to.equal(200);\n          }).should.not.be.rejected;\n        });","file":"unit/test-xhr.js","skipped":false,"dir":"test"},{"name":"should reject if error","suites":["assertSuccess"],"updatePoint":{"line":283,"column":34,"index":9867},"line":283,"code":"        it('should reject if error', () => {\n          mockXhr.status = 500;\n          return assertSuccess(createResponseInstance('', mockXhr)).should.be.rejected;\n        });","file":"unit/test-xhr.js","skipped":false,"dir":"test"},{"name":"should include response in error","suites":["assertSuccess"],"updatePoint":{"line":287,"column":44,"index":10054},"line":287,"code":"        it('should include response in error', () => {\n          mockXhr.status = 500;\n          return assertSuccess(createResponseInstance('', mockXhr)).catch(error => {\n            expect(error.response).to.exist;\n            expect(error.response.status).to.equal(500);\n          });\n        });","file":"unit/test-xhr.js","skipped":false,"dir":"test"},{"name":"should not resolve after rejecting promise","suites":["assertSuccess"],"updatePoint":{"line":294,"column":54,"index":10364},"line":294,"code":"        it('should not resolve after rejecting promise', () => {\n          mockXhr.status = 500;\n          mockXhr.responseText = '{\"a\": \"hello\"}';\n          mockXhr.headers['Content-Type'] = 'application/json';\n          mockXhr.getResponseHeader = () => 'application/json';\n          return assertSuccess(createResponseInstance('{\"a\": 2}', mockXhr)).should.not.be.fulfilled;\n        });","file":"unit/test-xhr.js","skipped":false,"dir":"test"},{"name":"should do simple JSON fetch","suites":["assertSuccess"],"updatePoint":{"line":302,"column":37,"index":10746},"line":302,"code":"      it('should do simple JSON fetch', () => {\n        env.sandbox.stub(user(), 'assert');\n        return xhr.fetchJson(`${baseUrl}/get?k=v1`).then(res => res.json()).then(res => {\n          expect(res).to.exist;\n          expect(res['args']['k']).to.equal('v1');\n        });\n      });","file":"unit/test-xhr.js","skipped":false,"dir":"test"},{"name":"should redirect fetch","suites":["assertSuccess"],"updatePoint":{"line":309,"column":31,"index":11027},"line":309,"code":"      it('should redirect fetch', () => {\n        const url = `${baseUrl}/redirect-to?url=` + encodeURIComponent(`${baseUrl}/get?k=v2`);\n        return xhr.fetchJson(url, {\n          ampCors: false\n        }).then(res => res.json()).then(res => {\n          expect(res).to.exist;\n          expect(res['args']['k']).to.equal('v2');\n        });\n      });","file":"unit/test-xhr.js","skipped":false,"dir":"test"},{"name":"should fail fetch for 400-error","suites":["assertSuccess"],"updatePoint":{"line":318,"column":41,"index":11389},"line":318,"code":"      it('should fail fetch for 400-error', () => {\n        const url = `${baseUrl}/status/404`;\n        return xhr.fetchJson(url).then(() => {\n          throw new Error('UNREACHABLE');\n        }, error => {\n          expect(error.message).to.contain('HTTP error 404');\n        });\n      });","file":"unit/test-xhr.js","skipped":false,"dir":"test"},{"name":"should fail fetch for 500-error","suites":["assertSuccess"],"updatePoint":{"line":326,"column":41,"index":11681},"line":326,"code":"      it('should fail fetch for 500-error', () => {\n        const url = `${baseUrl}/status/500?CID=cid`;\n        return xhr.fetchJson(url).then(() => {\n          throw new Error('UNREACHABLE');\n        }, error => {\n          expect(error.message).to.contain('HTTP error 500');\n        });\n      });","file":"unit/test-xhr.js","skipped":false,"dir":"test"},{"name":"should NOT succeed CORS setting cookies without credentials","suites":["assertSuccess"],"updatePoint":{"line":334,"column":69,"index":12009},"line":334,"code":"      it('should NOT succeed CORS setting cookies without credentials', () => {\n        const cookieName = 'TEST_CORS_' + Math.round(Math.random() * 10000);\n        const url = `${baseUrl}/cookies/set?${cookieName}=v1`;\n        return xhr.fetchJson(url).then(res => {\n          expect(res).to.exist;\n          expect(getCookie(window, cookieName)).to.be.null;\n        });\n      });","file":"unit/test-xhr.js","skipped":false,"dir":"test"},{"name":"should succeed CORS setting cookies with credentials","suites":["assertSuccess"],"updatePoint":{"line":342,"column":62,"index":12384},"line":342,"code":"      it('should succeed CORS setting cookies with credentials', () => {\n        const cookieName = 'TEST_CORS_' + Math.round(Math.random() * 10000);\n        const url = `${baseUrl}/cookies/set?${cookieName}=v1`;\n        return xhr.fetchJson(url, {\n          credentials: 'include'\n        }).then(res => {\n          expect(res).to.exist;\n          expect(getCookie(window, cookieName)).to.equal('v1');\n        });\n      });","file":"unit/test-xhr.js","skipped":false,"dir":"test"},{"name":"should ignore CORS setting cookies w/omit credentials","suites":["assertSuccess"],"updatePoint":{"line":352,"column":63,"index":12810},"line":352,"code":"      it('should ignore CORS setting cookies w/omit credentials', () => {\n        const cookieName = 'TEST_CORS_' + Math.round(Math.random() * 10000);\n        const url = `${baseUrl}/cookies/set?${cookieName}=v1`;\n        return xhr.fetchJson(url, {\n          credentials: 'omit'\n        }).then(res => {\n          expect(res).to.exist;\n          expect(getCookie(window, cookieName)).to.be.null;\n        });\n      });","file":"unit/test-xhr.js","skipped":false,"dir":"test"},{"name":"should NOT succeed CORS with invalid credentials","suites":["assertSuccess"],"updatePoint":{"line":362,"column":58,"index":13224},"line":362,"code":"      it('should NOT succeed CORS with invalid credentials', () => {\n        allowConsoleError(() => {\n          expect(() => {\n            xhr.fetchJson('https://acme.org/', {\n              credentials: null\n            });\n          }).to.throw(/Only credentials=include|omit support: null/);\n        });\n      });","file":"unit/test-xhr.js","skipped":false,"dir":"test"},{"name":"should expose HTTP headers","suites":["assertSuccess"],"updatePoint":{"line":371,"column":36,"index":13519},"line":371,"code":"      it('should expose HTTP headers', () => {\n        const url = `${baseUrl}/response-headers?AMP-Header=Value1&` + 'Access-Control-Expose-Headers=AMP-Header';\n        return xhr.fetchAmpCors_(url, {\n          ampCors: false\n        }).then(res => {\n          expect(res.headers.get('AMP-Header')).to.equal('Value1');\n        });\n      });","file":"unit/test-xhr.js","skipped":false,"dir":"test"},{"name":"should omit request details for privacy","suites":["assertSuccess"],"updatePoint":{"line":379,"column":49,"index":13874},"line":379,"code":"      it('should omit request details for privacy', () => {\n        // NOTE THIS IS A BAD PORT ON PURPOSE.\n        return xhr.fetchJson('http://localhost:31863/status/500').then(() => {\n          throw new Error('UNREACHABLE');\n        }, error => {\n          const {\n            message\n          } = error;\n          expect(message).to.contain('http://localhost:31863');\n          expect(message).not.to.contain('status/500');\n          expect(message).not.to.contain('CID');\n        });\n      });","file":"unit/test-xhr.js","skipped":false,"dir":"test"},{"name":"should be able to fetch a document","suites":["#fetchText"],"updatePoint":{"line":400,"column":44,"index":14669},"line":400,"code":"      it('should be able to fetch a document', () => {\n        const promise = xhr.fetchText('/text.html');\n        expect(fetchStub).to.be.calledWith('/text.html', {\n          method: 'GET',\n          headers: {\n            'Accept': 'text/plain'\n          }\n        });\n        return promise.then(res => {\n          return res.text();\n        }).then(text => {\n          expect(text).to.equal(TEST_TEXT);\n        });\n      });","file":"unit/test-xhr.js","skipped":false,"dir":"test"},{"name":"should be able to fetch a response","suites":["#fetchText"],"updatePoint":{"line":424,"column":46,"index":15580},"line":424,"code":"        it('should be able to fetch a response', () => {\n          setupMockXhr();\n          const promise = xhr.fetch('/index.html').then(response => {\n            expect(response.headers.get('X-foo-header')).to.equal('foo data');\n            expect(response.headers.get('X-bar-header')).to.equal('bar data');\n            response.arrayBuffer().then(bytes => utf8Decode(bytes)).then(text => {\n              expect(text).to.equal(creative);\n            });\n          });\n          xhrCreated.then(xhr => xhr.respond(200, {\n            'Content-Type': 'text/xml',\n            'X-foo-header': 'foo data',\n            'X-bar-header': 'bar data'\n          }, creative));\n          return promise;\n        });","file":"unit/test-xhr.js","skipped":false,"dir":"test"},{"name":"should have required json POST headers by default","suites":["#fetchText"],"updatePoint":{"line":452,"column":61,"index":16635},"line":452,"code":"        it('should have required json POST headers by default', () => {\n          setupMockXhr();\n          xhr.fetchJson(url, {\n            method: 'POST',\n            body: {\n              hello: 'world'\n            },\n            headers: {\n              'Other': 'another'\n            }\n          });\n          return xhrCreated.then(xhr => expect(xhr.requestHeaders).to.deep.equal({\n            'Accept': 'application/json',\n            'Content-Type': 'text/plain;charset=utf-8',\n            'Other': 'another' // Not removed when other headers set.\n          }));\n        });","file":"unit/test-xhr.js","skipped":false,"dir":"test"},{"name":"should get an echo'd response back","suites":["#fetchText"],"updatePoint":{"line":471,"column":44,"index":17210},"line":471,"code":"      it(\"should get an echo'd response back\", () => {\n        return xhr.fetchJson(url, {\n          method: 'POST',\n          body: {\n            hello: 'world'\n          },\n          headers: {\n            'Content-Type': 'application/json;charset=utf-8'\n          }\n        }).then(res => res.json()).then(res => {\n          expect(res.json).to.jsonEqual({\n            hello: 'world'\n          });\n        });\n      });","file":"unit/test-xhr.js","skipped":false,"dir":"test"},{"name":"should throw when `body` is not an object or array","suites":["#fetchText"],"updatePoint":{"line":486,"column":60,"index":17649},"line":486,"code":"      it('should throw when `body` is not an object or array', () => {\n        const objectFn = xhr.fetchJson.bind(xhr, url, {\n          method: 'POST',\n          body: {\n            hello: 'world'\n          }\n        });\n        const arrayFn = xhr.fetchJson.bind(xhr, url, {\n          method: 'POST',\n          body: ['hello', 'world']\n        });\n        const stringFn = xhr.fetchJson.bind(xhr, url, {\n          method: 'POST',\n          body: 'hello world'\n        });\n        const numberFn = xhr.fetchJson.bind(xhr, url, {\n          method: 'POST',\n          body: 3\n        });\n        const booleanFn = xhr.fetchJson.bind(xhr, url, {\n          method: 'POST',\n          body: true\n        });\n        const nullFn = xhr.fetchJson.bind(xhr, url, {\n          method: 'POST',\n          body: null\n        });\n        expect(objectFn).to.not.throw();\n        expect(arrayFn).to.not.throw();\n        allowConsoleError(() => {\n          expect(stringFn).to.throw();\n        });\n        allowConsoleError(() => {\n          expect(numberFn).to.throw();\n        });\n        allowConsoleError(() => {\n          expect(booleanFn).to.throw();\n        });\n        allowConsoleError(() => {\n          expect(nullFn).to.throw();\n        });\n      });","file":"unit/test-xhr.js","skipped":false,"dir":"test"},{"name":"should not intercept if AMP doc is not single","suites":["interceptor"],"updatePoint":{"line":576,"column":53,"index":20436},"line":576,"code":"    it('should not intercept if AMP doc is not single', () => {\n      const ampdoc = {\n        getRootNode: () => optedInDoc,\n        whenFirstVisible: () => Promise.resolve()\n      };\n      ampdocServiceForStub.returns({\n        isSingleDoc: () => false,\n        getAmpDoc: () => ampdoc,\n        getSingleDoc: () => ampdoc\n      });\n      const xhr = xhrServiceForTesting(interceptionEnabledWin);\n      return xhr.fetch('https://cdn.ampproject.org').then(() => expect(sendMessageStub).to.not.have.been.called);\n    });","file":"unit/test-xhr.js","skipped":false,"dir":"test"},{"name":"should not intercept if AMP doc does not opt in","suites":["interceptor"],"updatePoint":{"line":589,"column":55,"index":20958},"line":589,"code":"    it('should not intercept if AMP doc does not opt in', () => {\n      const nonOptedInDoc = window.document.implementation.createHTMLDocument('');\n      const ampdoc = {\n        getRootNode: () => nonOptedInDoc,\n        whenFirstVisible: () => Promise.resolve()\n      };\n      ampdocServiceForStub.returns({\n        isSingleDoc: () => true,\n        getAmpDoc: () => ampdoc,\n        getSingleDoc: () => ampdoc\n      });\n      const xhr = xhrServiceForTesting(interceptionEnabledWin);\n      return xhr.fetch('https://cdn.ampproject.org').then(() => expect(sendMessageStub).to.not.have.been.called);\n    });","file":"unit/test-xhr.js","skipped":false,"dir":"test"},{"name":"should not intercept if viewer is not capable","suites":["interceptor"],"updatePoint":{"line":603,"column":53,"index":21563},"line":603,"code":"    it('should not intercept if viewer is not capable', () => {\n      env.sandbox.stub(viewer, 'hasCapability').withArgs('xhrInterceptor').returns(false);\n      const xhr = xhrServiceForTesting(interceptionEnabledWin);\n      return xhr.fetch('https://cdn.ampproject.org').then(() => expect(sendMessageStub).to.not.have.been.called);\n    });","file":"unit/test-xhr.js","skipped":false,"dir":"test"},{"name":"should not intercept if viewer untrusted and non-dev mode","suites":["interceptor"],"updatePoint":{"line":608,"column":65,"index":21916},"line":608,"code":"    it('should not intercept if viewer untrusted and non-dev mode', () => {\n      env.sandbox.stub(viewer, 'isTrustedViewer').returns(Promise.resolve(false));\n      interceptionEnabledWin.AMP_DEV_MODE = false;\n      const xhr = xhrServiceForTesting(interceptionEnabledWin);\n      return xhr.fetch('https://cdn.ampproject.org').then(() => expect(sendMessageStub).to.not.have.been.called);\n    });","file":"unit/test-xhr.js","skipped":false,"dir":"test"},{"name":"should not intercept a 1p cdn from subdomain","suites":["interceptor"],"updatePoint":{"line":614,"column":52,"index":22299},"line":614,"code":"    it('should not intercept a 1p cdn from subdomain', () => {\n      const xhr = xhrServiceForTesting(interceptionEnabledWin);\n      return xhr.fetch('https://subdomain-model.cdn.ampproject.org/ww.js').then(() => expect(sendMessageStub).to.not.have.been.called);\n    });","file":"unit/test-xhr.js","skipped":false,"dir":"test"},{"name":"should not intercept a 1p cdn resource","suites":["interceptor"],"updatePoint":{"line":618,"column":46,"index":22564},"line":618,"code":"    it('should not intercept a 1p cdn resource', () => {\n      const xhr = xhrServiceForTesting(interceptionEnabledWin);\n      return xhr.fetch('https://cdn.ampproject.org/ww.js').then(() => expect(sendMessageStub).to.not.have.been.called);\n    });","file":"unit/test-xhr.js","skipped":false,"dir":"test"},{"name":"should intercept if viewer untrusted but in local dev mode","suites":["interceptor"],"updatePoint":{"line":622,"column":66,"index":22833},"line":622,"code":"    it('should intercept if viewer untrusted but in local dev mode', () => {\n      env.sandbox.stub(viewer, 'isTrustedViewer').returns(Promise.resolve(false));\n      env.sandbox.stub(mode, 'getMode').returns({\n        localDev: true\n      });\n      const xhr = xhrServiceForTesting(interceptionEnabledWin);\n      return xhr.fetch('https://www.some-url.org/some-resource/').then(() => expect(sendMessageStub).to.have.been.called);\n    });","file":"unit/test-xhr.js","skipped":false,"dir":"test"},{"name":"should intercept if untrusted-xhr-interception experiment enabled","suites":["interceptor"],"updatePoint":{"line":630,"column":73,"index":23278},"line":630,"code":"    it('should intercept if untrusted-xhr-interception experiment enabled', () => {\n      env.sandbox.stub(viewer, 'isTrustedViewer').returns(Promise.resolve(false));\n      env.sandbox.stub(mode, 'getMode').returns({\n        localDev: false\n      });\n      env.sandbox.stub(viewer, 'hasCapability').withArgs('xhrInterceptor').returns(true);\n      toggleExperiment(interceptionEnabledWin, 'untrusted-xhr-interception', true);\n      const xhr = xhrServiceForTesting(interceptionEnabledWin);\n      return xhr.fetch('https://www.some-url.org/some-resource/').then(() => expect(sendMessageStub).to.have.been.called);\n    });","file":"unit/test-xhr.js","skipped":false,"dir":"test"},{"name":"should intercept if non-dev mode but viewer trusted","suites":["interceptor"],"updatePoint":{"line":640,"column":59,"index":23884},"line":640,"code":"    it('should intercept if non-dev mode but viewer trusted', () => {\n      env.sandbox.stub(viewer, 'isTrustedViewer').returns(Promise.resolve(true));\n      interceptionEnabledWin.AMP_DEV_MODE = false;\n      const xhr = xhrServiceForTesting(interceptionEnabledWin);\n      return xhr.fetch('https://www.some-url.org/some-resource/').then(() => expect(sendMessageStub).to.have.been.called);\n    });","file":"unit/test-xhr.js","skipped":false,"dir":"test"},{"name":"should send viewer message named `xhr`","suites":["interceptor"],"updatePoint":{"line":646,"column":46,"index":24269},"line":646,"code":"    it('should send viewer message named `xhr`', () => {\n      const xhr = xhrServiceForTesting(interceptionEnabledWin);\n      return xhr.fetch('https://www.some-url.org/some-resource/').then(() => expect(sendMessageStub).to.have.been.calledWithMatch('xhr', env.sandbox.match.any));\n    });","file":"unit/test-xhr.js","skipped":false,"dir":"test"},{"name":"should post correct structurally-cloneable GET request","suites":["interceptor"],"updatePoint":{"line":650,"column":62,"index":24576},"line":650,"code":"    it('should post correct structurally-cloneable GET request', () => {\n      const xhr = xhrServiceForTesting(interceptionEnabledWin);\n      return xhr.fetch('https://www.some-url.org/some-resource/').then(() => expect(sendMessageStub).to.have.been.calledWithMatch(env.sandbox.match.any, {\n        originalRequest: {\n          input: 'https://www.some-url.org/some-resource/' + '?__amp_source_origin=https%3A%2F%2Facme.com',\n          init: {\n            headers: {},\n            method: 'GET'\n          }\n        }\n      }));\n    });","file":"unit/test-xhr.js","skipped":false,"dir":"test"},{"name":"should post correct structurally-cloneable JSON request","suites":["interceptor"],"updatePoint":{"line":662,"column":63,"index":25114},"line":662,"code":"    it('should post correct structurally-cloneable JSON request', () => {\n      const xhr = xhrServiceForTesting(interceptionEnabledWin);\n      return xhr.fetch('https://www.some-url.org/some-resource/', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json;charset=utf-8'\n        },\n        body: JSON.stringify({\n          a: 42,\n          b: [24, true]\n        })\n      }).then(() => expect(sendMessageStub).to.have.been.calledWithMatch(env.sandbox.match.any, {\n        originalRequest: {\n          input: 'https://www.some-url.org/some-resource/' + '?__amp_source_origin=https%3A%2F%2Facme.com',\n          init: {\n            headers: {\n              'Content-Type': 'application/json;charset=utf-8'\n            },\n            body: '{\"a\":42,\"b\":[24,true]}',\n            method: 'POST'\n          }\n        }\n      }));\n    });","file":"unit/test-xhr.js","skipped":false,"dir":"test"},{"name":"should post correct structurally-cloneable FormData request","suites":["interceptor"],"updatePoint":{"line":686,"column":67,"index":25984},"line":686,"code":"    it('should post correct structurally-cloneable FormData request', () => {\n      const xhr = xhrServiceForTesting(interceptionEnabledWin);\n      const fakeWin = null;\n      env.sandbox.stub(Services, 'platformFor').returns({\n        isIos() {\n          return false;\n        }\n      });\n      const formData = createFormDataWrapper(fakeWin);\n      formData.append('a', 42);\n      formData.append('b', '24');\n      formData.append('b', true);\n      return xhr.fetch('https://www.some-url.org/some-resource/', {\n        method: 'POST',\n        body: formData\n      }).then(() => expect(sendMessageStub).to.have.been.calledWithMatch(env.sandbox.match.any, {\n        originalRequest: {\n          input: 'https://www.some-url.org/some-resource/' + '?__amp_source_origin=https%3A%2F%2Facme.com',\n          init: {\n            headers: {\n              'Content-Type': 'multipart/form-data;charset=utf-8'\n            },\n            body: [['a', '42'], ['b', '24'], ['b', 'true']],\n            method: 'POST'\n          }\n        }\n      }));\n    });","file":"unit/test-xhr.js","skipped":false,"dir":"test"},{"name":"should be rejected when response undefined","suites":["interceptor"],"updatePoint":{"line":714,"column":50,"index":27011},"line":714,"code":"    it('should be rejected when response undefined', () => {\n      expectAsyncConsoleError(/Object expected/);\n      sendMessageStub.returns(Promise.resolve());\n      const xhr = xhrServiceForTesting(interceptionEnabledWin);\n      return expect(xhr.fetch('https://www.some-url.org/some-resource/')).to.eventually.be.rejectedWith(Error, 'Object expected: undefined');\n    });","file":"unit/test-xhr.js","skipped":false,"dir":"test"},{"name":"should be rejected when response null","suites":["interceptor"],"updatePoint":{"line":720,"column":45,"index":27381},"line":720,"code":"    it('should be rejected when response null', () => {\n      expectAsyncConsoleError(/Object expected/);\n      sendMessageStub.returns(Promise.resolve(null));\n      const xhr = xhrServiceForTesting(interceptionEnabledWin);\n      return expect(xhr.fetch('https://www.some-url.org/some-resource/')).to.eventually.be.rejectedWith(Error, 'Object expected: null');\n    });","file":"unit/test-xhr.js","skipped":false,"dir":"test"},{"name":"should be rejected when response is string","suites":["interceptor"],"updatePoint":{"line":726,"column":50,"index":27755},"line":726,"code":"    it('should be rejected when response is string', () => {\n      expectAsyncConsoleError(/Object expected/);\n      sendMessageStub.returns(Promise.resolve('response text'));\n      const xhr = xhrServiceForTesting(interceptionEnabledWin);\n      return expect(xhr.fetch('https://www.some-url.org/some-resource/')).to.eventually.be.rejectedWith(Error, 'Object expected: response text');\n    });","file":"unit/test-xhr.js","skipped":false,"dir":"test"},{"name":"should return correct non-document response","suites":["interceptor","when native Response type is available"],"updatePoint":{"line":734,"column":53,"index":28290},"line":734,"code":"      it('should return correct non-document response', () => {\n        sendMessageStub.returns(Promise.resolve({\n          body: '{\"content\":32}',\n          init: {\n            status: 242,\n            statusText: 'Magic status',\n            headers: [['a', 2], ['b', false]]\n          }\n        }));\n        const xhr = xhrServiceForTesting(interceptionEnabledWin);\n        return xhr.fetch('https://www.some-url.org/some-resource/').then(response => {\n          expect(response.headers.get('a')).to.equal('2');\n          expect(response.headers.get('b')).to.equal('false');\n          expect(response).to.have.property('ok').that.is.true;\n          expect(response).to.have.property('status').that.equals(242);\n          expect(response).to.have.property('statusText').that.equals('Magic status');\n          return expect(response.text()).to.eventually.equal('{\"content\":32}');\n          return expect(response.json()).to.eventually.deep.equal({\n            content: 32\n          });\n        });\n      });","file":"unit/test-xhr.js","skipped":false,"dir":"test"},{"name":"should return correct non-document response","suites":["interceptor","when native Response type is unavailable"],"updatePoint":{"line":759,"column":53,"index":29440},"line":759,"code":"      it('should return correct non-document response', () => {\n        sendMessageStub.returns(Promise.resolve({\n          body: '{\"content\":32}',\n          init: {\n            status: 242,\n            statusText: 'Magic status',\n            headers: [['a', 2], ['b', false]]\n          }\n        }));\n        const xhr = xhrServiceForTesting(interceptionEnabledWin);\n        return xhr.fetch('https://www.some-url.org/some-resource/').then(response => {\n          expect(response.headers.get('a')).to.equal('2');\n          expect(response.headers.get('b')).to.equal('false');\n          expect(response).to.have.property('ok').that.is.true;\n          expect(response).to.have.property('status').that.equals(242);\n          return expect(response.json()).to.eventually.deep.equal({\n            content: 32\n          });\n        });\n      });","file":"unit/test-xhr.js","skipped":false,"dir":"test"},{"name":"should return default response when body/init missing","suites":["interceptor","when native Response type is unavailable"],"updatePoint":{"line":779,"column":63,"index":30291},"line":779,"code":"      it('should return default response when body/init missing', () => {\n        sendMessageStub.returns(Promise.resolve({}));\n        const xhr = xhrServiceForTesting(interceptionEnabledWin);\n        return xhr.fetch('https://www.some-url.org/some-resource/', {\n          ampCors: false\n        }).then(response => {\n          expect(response.headers.get('a')).to.be.null;\n          expect(response.headers.has('a')).to.be.false;\n          expect(response).to.have.property('ok').that.is.true;\n          expect(response).to.have.property('status').that.equals(200);\n          return expect(response.text()).to.eventually.be.empty;\n        });\n      });","file":"unit/test-xhr.js","skipped":false,"dir":"test"},{"name":"should return default response when status/headers missing","suites":["interceptor","when native Response type is unavailable"],"updatePoint":{"line":792,"column":68,"index":30951},"line":792,"code":"      it('should return default response when status/headers missing', () => {\n        sendMessageStub.returns(Promise.resolve({\n          body: '',\n          init: {}\n        }));\n        const xhr = xhrServiceForTesting(interceptionEnabledWin);\n        return xhr.fetch('https://www.some-url.org/some-resource/', {\n          ampCors: false\n        }).then(response => {\n          expect(response.headers.get('a')).to.be.null;\n          expect(response.headers.has('a')).to.be.false;\n          expect(response).to.have.property('status').that.equals(200);\n        });\n      });","file":"unit/test-xhr.js","skipped":false,"dir":"test"},{"name":"should convert body to string","suites":["interceptor","when native Response type is unavailable"],"updatePoint":{"line":806,"column":39,"index":31501},"line":806,"code":"      it('should convert body to string', () => {\n        sendMessageStub.returns(Promise.resolve({\n          body: 32\n        }));\n        const xhr = xhrServiceForTesting(interceptionEnabledWin);\n        return xhr.fetch('https://www.some-url.org/some-resource/', {\n          ampCors: false\n        }).then(response => {\n          return expect(response.text()).to.eventually.equal('32');\n        });\n      });","file":"unit/test-xhr.js","skipped":false,"dir":"test"},{"name":"should convert status to int","suites":["interceptor","when native Response type is unavailable"],"updatePoint":{"line":817,"column":38,"index":31913},"line":817,"code":"      it('should convert status to int', () => {\n        sendMessageStub.returns(Promise.resolve({\n          init: {\n            status: '209.6'\n          }\n        }));\n        const xhr = xhrServiceForTesting(interceptionEnabledWin);\n        return xhr.fetch('https://www.some-url.org/some-resource/', {\n          ampCors: false\n        }).then(response => {\n          return expect(response).to.have.property('status').that.equals(209);\n        });\n      });","file":"unit/test-xhr.js","skipped":false,"dir":"test"},{"name":"should convert headers to string","suites":["interceptor","when native Response type is unavailable"],"updatePoint":{"line":830,"column":42,"index":32379},"line":830,"code":"      it('should convert headers to string', () => {\n        sendMessageStub.returns(Promise.resolve({\n          init: {\n            headers: [[1, true], [false, NaN], [undefined, null]]\n          }\n        }));\n        const xhr = xhrServiceForTesting(interceptionEnabledWin);\n        return xhr.fetch('https://www.some-url.org/some-resource/', {\n          ampCors: false\n        }).then(response => {\n          expect(response.headers.get(1)).to.equal('true');\n          expect(response.headers.get('false')).to.equal('NaN');\n          expect(response.headers.get('undefined')).to.equal('null');\n        });\n      });","file":"unit/test-xhr.js","skipped":false,"dir":"test"},{"name":"should support case-insensitive header search","suites":["interceptor","when native Response type is unavailable"],"updatePoint":{"line":845,"column":55,"index":33012},"line":845,"code":"      it('should support case-insensitive header search', () => {\n        sendMessageStub.returns(Promise.resolve({\n          init: {\n            headers: [['Content-Type', 'text/plain'], ['ACCEPT', 'text/plain'], ['x-amp-custom', 'foo']]\n          }\n        }));\n        const xhr = xhrServiceForTesting(interceptionEnabledWin);\n        return xhr.fetch('https://www.some-url.org/some-resource/', {\n          ampCors: false\n        }).then(response => {\n          expect(response.headers.get('content-type')).to.equal('text/plain');\n          expect(response.headers.get('Accept')).to.equal('text/plain');\n          expect(response.headers.get('X-AMP-CUSTOM')).to.equal('foo');\n        });\n      });","file":"unit/test-xhr.js","skipped":false,"dir":"test"},{"name":"should call response.json() if prefix is either missing or the empty string","suites":["#xssiJson"],"updatePoint":{"line":868,"column":83,"index":33900},"line":868,"code":"    it('should call response.json() if prefix is either missing or the empty string', () => {\n      xhrCreated.then(mock => mock.respond(200, [], '{a: 1}'));\n      const response = {\n        json: () => Promise.resolve(),\n        text: () => Promise.reject(new Error('should not be called'))\n      };\n      return Promise.all([xhr.xssiJson(response), xhr.xssiJson(response, '')]);\n    });","file":"unit/test-xhr.js","skipped":false,"dir":"test"},{"name":"should not strip characters if the prefix is not present","suites":["#xssiJson"],"updatePoint":{"line":876,"column":64,"index":34270},"line":876,"code":"    it('should not strip characters if the prefix is not present', () => {\n      xhrCreated.then(mock => mock.respond(200, [], '{\"a\": 1}'));\n      return xhr.fetchJson('/abc').then(res => xhr.xssiJson(res, 'while(1)')).then(json => {\n        expect(json).to.be.deep.equal({\n          a: 1\n        });\n      });\n    });","file":"unit/test-xhr.js","skipped":false,"dir":"test"},{"name":"should strip prefix from the response text if prefix is present","suites":["#xssiJson"],"updatePoint":{"line":884,"column":71,"index":34596},"line":884,"code":"    it('should strip prefix from the response text if prefix is present', () => {\n      xhrCreated.then(mock => mock.respond(200, [], 'while(1){\"a\": 1}'));\n      return xhr.fetchJson('/abc').then(res => xhr.xssiJson(res, 'while(1)')).then(json => {\n        expect(json).to.be.deep.equal({\n          a: 1\n        });\n      });\n    });","file":"unit/test-xhr.js","skipped":false,"dir":"test"},{"name":"should work with nested promises","suites":[],"updatePoint":{"line":15,"column":38,"index":406},"line":15,"code":"  it('should work with nested promises', function* () {\n    let value = false;\n    const nestPromise = level => {\n      if (level == 0) {\n        value = true;\n        return;\n      }\n      return Promise.resolve().then(() => {\n        return nestPromise(level - 1);\n      });\n    };\n    nestPromise(100);\n    expect(value).to.be.false;\n    yield macroTask();\n    expect(value).to.be.true;\n  });","file":"unit/test-yield.js","skipped":false,"dir":"test"},{"name":"should work with promise chain","suites":[],"updatePoint":{"line":31,"column":36,"index":800},"line":31,"code":"  it('should work with promise chain', function* () {\n    let value;\n    const chainPromise = Promise.resolve();\n    for (let i = 0; i < 100; i++) {\n      chainPromise.then(() => {\n        value = false;\n      });\n    }\n    chainPromise.then(() => {\n      value = true;\n    });\n    expect(value).to.be.undefined;\n    yield macroTask();\n    expect(value).to.be.true;\n  });","file":"unit/test-yield.js","skipped":false,"dir":"test"},{"name":"should work with promise inside setTimeout","suites":[],"updatePoint":{"line":46,"column":48,"index":1184},"line":46,"code":"  it('should work with promise inside setTimeout', function* () {\n    let value;\n    win.setTimeout(() => {\n      value = false;\n      Promise.resolve().then(() => {\n        value = true;\n      });\n    }, 100);\n    expect(value).to.be.undefined;\n    clock.tick(100);\n    expect(value).to.be.false;\n    yield macroTask();\n    expect(value).to.be.true;\n  });","file":"unit/test-yield.js","skipped":false,"dir":"test"},{"name":"should work with manually resolved promise inside setTimeout","suites":[],"updatePoint":{"line":60,"column":66,"index":1559},"line":60,"code":"  it('should work with manually resolved promise inside setTimeout', function* () {\n    let value;\n    let resolver;\n    const promise = new Promise(r => {\n      resolver = r;\n    });\n    promise.then(() => {\n      value = true;\n    });\n    win.setTimeout(() => {\n      value = false;\n      resolver();\n    }, 100);\n    clock.tick(100);\n    expect(value).to.be.false;\n    yield macroTask();\n    expect(value).to.be.true;\n  });","file":"unit/test-yield.js","skipped":false,"dir":"test"},{"name":"should block a promise","suites":[],"updatePoint":{"line":78,"column":28,"index":1948},"line":78,"code":"  it('should block a promise', function* () {\n    let resolver;\n    const promise = new Promise(r => {\n      resolver = r;\n    }).then(() => 'yes');\n    resolver();\n    const result = yield promise;\n    expect(result).to.equal('yes');\n  });","file":"unit/test-yield.js","skipped":false,"dir":"test"},{"name":"should be able to expect throwable","suites":[],"updatePoint":{"line":87,"column":40,"index":2201},"line":87,"code":"  it('should be able to expect throwable', function* () {\n    const promiseThatRejects = Promise.reject(new Error('OMG'));\n    try {\n      yield promiseThatRejects;\n      throw new Error('UNREACHABLE');\n    } catch (e) {\n      expect(e.message).to.contain('OMG');\n    }\n  });","file":"unit/test-yield.js","skipped":false,"dir":"test"},{"name":"should handle empty","suites":["#eliminateOverlaps"],"updatePoint":{"line":23,"column":27,"index":672},"line":23,"code":"    it('should handle empty', () => {\n      const url = 'http://www.google.com/?test=FAKE(__ga)';\n      return expect(new Expander(variableSource, mockBindings).expand(url)).to.eventually.equal(url);\n    });","file":"unit/url-expander/test-expander.js","skipped":false,"dir":"test"},{"name":"should return single item","suites":["#eliminateOverlaps"],"updatePoint":{"line":27,"column":33,"index":886},"line":27,"code":"    it('should return single item', () => {\n      const url = 'http://www.google.com/?test=RANDOM';\n      const expected = 'http://www.google.com/?test=0.1234';\n      return expect(new Expander(variableSource, mockBindings).expand(url)).to.eventually.equal(expected);\n    });","file":"unit/url-expander/test-expander.js","skipped":false,"dir":"test"},{"name":"should sort basic case","suites":["#eliminateOverlaps"],"updatePoint":{"line":32,"column":30,"index":1159},"line":32,"code":"    it('should sort basic case', () => {\n      const url = 'http://www.google.com/?test=ABCD&BAR&foo=RANDOM';\n      const expected = 'http://www.google.com/?test=four&BAR&foo=0.1234';\n      return expect(new Expander(variableSource, mockBindings).expand(url)).to.eventually.equal(expected);\n    });","file":"unit/url-expander/test-expander.js","skipped":false,"dir":"test"},{"name":"will always prefer the first match in overlap","suites":["#eliminateOverlaps"],"updatePoint":{"line":37,"column":53,"index":1481},"line":37,"code":"    it('will always prefer the first match in overlap', () => {\n      const url = 'http://www.google.com/?test=ABCDEFGHIJKLMNOPQRS';\n      const expected = 'http://www.google.com/?test=tenKLMNOPQRS';\n      return expect(new Expander(variableSource, mockBindings).expand(url)).to.eventually.equal(expected);\n    });","file":"unit/url-expander/test-expander.js","skipped":false,"dir":"test"},{"name":"will prefer longer match if same start index","suites":["#eliminateOverlaps"],"updatePoint":{"line":42,"column":52,"index":1795},"line":42,"code":"    it('will prefer longer match if same start index', () => {\n      const url = 'http://www.google.com/?test=ABCD';\n      const expected = 'http://www.google.com/?test=four';\n      return expect(new Expander(variableSource, mockBindings).expand(url)).to.eventually.equal(expected);\n    });","file":"unit/url-expander/test-expander.js","skipped":false,"dir":"test"},{"name":"should handle keywords next to each other","suites":["#eliminateOverlaps"],"updatePoint":{"line":47,"column":49,"index":2083},"line":47,"code":"    it('should handle keywords next to each other', () => {\n      const url = 'http://www.google.com/?test=ABCDRANDOM';\n      const expected = 'http://www.google.com/?test=four0.1234';\n      return expect(new Expander(variableSource, mockBindings).expand(url)).to.eventually.equal(expected);\n    });","file":"unit/url-expander/test-expander.js","skipped":false,"dir":"test"},{"name":"should not replace unallowlisted RANDOM","suites":["Allowlist of variables"],"updatePoint":{"line":64,"column":47,"index":2790},"line":64,"code":"    it('should not replace unallowlisted RANDOM', () => {\n      const expander = createExpanderWithAllowlist(['ABC', 'ABCD', 'CANONICAL'], mockBindings);\n      const url = 'http://www.google.com/?test=RANDOM';\n      const expected = 'http://www.google.com/?test=RANDOM';\n      return expect(expander.expand(url)).to.eventually.equal(expected);\n    });","file":"unit/url-expander/test-expander.js","skipped":false,"dir":"test"},{"name":"should replace allowlisted ABCD","suites":["Allowlist of variables"],"updatePoint":{"line":70,"column":39,"index":3134},"line":70,"code":"    it('should replace allowlisted ABCD', () => {\n      const expander = createExpanderWithAllowlist(['ABC', 'ABCD', 'CANONICAL'], mockBindings);\n      const url = 'http://www.google.com/?test=ABCD';\n      const expected = 'http://www.google.com/?test=four';\n      return expect(expander.expand(url)).to.eventually.equal(expected);\n    });","file":"unit/url-expander/test-expander.js","skipped":false,"dir":"test"},{"name":"should not replace anything with empty allowlist","suites":["Allowlist of variables"],"updatePoint":{"line":76,"column":56,"index":3491},"line":76,"code":"    it('should not replace anything with empty allowlist', () => {\n      const expander = createExpanderWithAllowlist([''], mockBindings);\n      const url = 'http://www.google.com/?test=ABCD';\n      const expected = 'http://www.google.com/?test=ABCD';\n      return expect(expander.expand(url)).to.eventually.equal(expected);\n    });","file":"unit/url-expander/test-expander.js","skipped":false,"dir":"test"},{"name":"should handle real urls","suites":["#expand","called asyncronously","unique cases"],"updatePoint":{"line":201,"column":35,"index":7795},"line":201,"code":"        it('should handle real urls', () => {\n          const url = 'http://www.amp.google.com/?client=CLIENT_ID(__ga)&canon=CANONICAL_URL&random=RANDOM';\n          const expected = 'http://www.amp.google.com/?client=amp-GA12345&canon=www.google.com&random=123456';\n          return expect(new Expander(variableSource, mockBindings).expand(url)).to.eventually.equal(expected);\n        });","file":"unit/url-expander/test-expander.js","skipped":false,"dir":"test"},{"name":"should handle tokens with parenthesis next to each other","suites":["#expand","called asyncronously","unique cases"],"updatePoint":{"line":206,"column":68,"index":8217},"line":206,"code":"        it('should handle tokens with parenthesis next to each other', () => {\n          const url = 'http://www.google.com/?test=RANDOMCLIENT_ID(__ga)UPPERCASE(foo)';\n          const expected = 'http://www.google.com/?test=123456amp-GA12345FOO';\n          return expect(new Expander(variableSource, mockBindings).expand(url)).to.eventually.equal(expected);\n        });","file":"unit/url-expander/test-expander.js","skipped":false,"dir":"test"},{"name":"should resolve promise to empty string","suites":["#expand","called synchronously","unique cases"],"updatePoint":{"line":225,"column":50,"index":9118},"line":225,"code":"        it('should resolve promise to empty string', () => {\n          const url = 'ASYNC';\n          const expected = '';\n          allowConsoleError(() => {\n            expect(new Expander(variableSource, mockBindings, /* opt_collectVars */undefined, /* opt_sync */true).expand(url)).to.equal(expected);\n          });\n        });","file":"unit/url-expander/test-expander.js","skipped":false,"dir":"test"},{"name":"should resolve asyncronous function to empty string","suites":["#expand","called synchronously","unique cases"],"updatePoint":{"line":232,"column":63,"index":9463},"line":232,"code":"        it('should resolve asyncronous function to empty string', () => {\n          const url = 'ASYNCFN';\n          const expected = '';\n          allowConsoleError(() => {\n            expect(new Expander(variableSource, mockBindings, /* opt_collectVars */undefined, /* opt_sync */true).expand(url)).to.equal(expected);\n          });\n        });","file":"unit/url-expander/test-expander.js","skipped":false,"dir":"test"},{"name":"should resolve asyncronous function to empty string","suites":["#expand","called synchronously","unique cases"],"updatePoint":{"line":239,"column":63,"index":9810},"line":239,"code":"        it('should resolve asyncronous function to empty string', () => {\n          const url = 'ASYNCFN(foo)';\n          const expected = '';\n          allowConsoleError(() => {\n            expect(new Expander(variableSource, mockBindings, /* opt_collectVars */undefined, /* opt_sync */true).expand(url)).to.equal(expected);\n          });\n        });","file":"unit/url-expander/test-expander.js","skipped":false,"dir":"test"},{"name":"dismiss async in real urls","suites":["#expand","called synchronously","unique cases"],"updatePoint":{"line":246,"column":38,"index":10137},"line":246,"code":"        it('dismiss async in real urls', () => {\n          const url = 'http://www.google.com/?test=RANDOMASYNCFN(foo)UPPERCASE(foo)';\n          const expected = 'http://www.google.com/?test=123456FOO';\n          allowConsoleError(() => {\n            expect(new Expander(variableSource, mockBindings, /* opt_collectVars */undefined, /* opt_sync */true).expand(url)).to.equal(expected);\n          });\n        });","file":"unit/url-expander/test-expander.js","skipped":false,"dir":"test"},{"name":"dismiss async in nested calls","suites":["#expand","called synchronously","unique cases"],"updatePoint":{"line":253,"column":41,"index":10552},"line":253,"code":"        it('dismiss async in nested calls', () => {\n          const url = 'CONCAT(foo, ASYNCFN(bar))UPPERCASE(foo)';\n          const expected = 'foo-FOO';\n          allowConsoleError(() => {\n            expect(new Expander(variableSource, mockBindings, /* opt_collectVars */undefined, /* opt_sync */true).expand(url)).to.equal(expected);\n          });\n        });","file":"unit/url-expander/test-expander.js","skipped":false,"dir":"test"},{"name":"should handle async functions","suites":["#expand","collectVars","called asyncronously"],"updatePoint":{"line":312,"column":41,"index":12420},"line":312,"code":"        it('should handle async functions', function* () {\n          const vars = {};\n          const input = 'CLIENT_ID(__ga)UPPERCASE(foo)';\n          new Expander(variableSource, mockBindings, /* opt_collectVars */vars).expand(input);\n          yield macroTask();\n          expect(vars).to.deep.equal({\n            'CLIENT_ID(__ga)': 'amp-GA12345',\n            'UPPERCASE(foo)': 'FOO'\n          });\n        });","file":"unit/url-expander/test-expander.js","skipped":false,"dir":"test"},{"name":"should discard async functions when called synchronously","suites":["#expand","collectVars","called syncronously"],"updatePoint":{"line":337,"column":68,"index":13363},"line":337,"code":"        it('should discard async functions when called synchronously', () => {\n          const vars = {};\n          const input = 'CLIENT_ID(__ga)UPPERCASE(foo)';\n          allowConsoleError(() => {\n            new Expander(variableSource, mockBindings, /* opt_collectVars */vars, /* opt_sync */true).expand(input);\n          });\n          expect(vars).to.deep.equal({\n            'UPPERCASE(foo)': 'FOO'\n          });\n        });","file":"unit/url-expander/test-expander.js","skipped":false,"dir":"test"},{"name":"should only resolve values in the allowlist","suites":["#expand","opt_allowlist"],"updatePoint":{"line":350,"column":53,"index":13835},"line":350,"code":"      it('should only resolve values in the allowlist', () => {\n        const url = 'UPPERCASE(foo)RANDOMLOWERCASE(BAR)';\n        const allowlist = {\n          RANDOM: true\n        };\n        return expect(new Expander(variableSource, mockBindings, /* opt_collectVars */undefined, /* opt_sync */false, /* opt_allowlist */allowlist).expand(url)).to.eventually.equal('UPPERCASE(foo)123456LOWERCASE(BAR)');\n      });","file":"unit/url-expander/test-expander.js","skipped":false,"dir":"test"},{"name":"should handle no names found","suites":["getMacroNames"],"updatePoint":{"line":360,"column":36,"index":14282},"line":360,"code":"    it('should handle no names found', () => {\n      const url = 'https://www.example.com/foo/bar?a=1&b=hello';\n      expect(new Expander(variableSource).getMacroNames(url)).to.eql([]);\n    });","file":"unit/url-expander/test-expander.js","skipped":false,"dir":"test"},{"name":"should find the correct names","suites":["getMacroNames"],"updatePoint":{"line":364,"column":37,"index":14477},"line":364,"code":"    it('should find the correct names', () => {\n      const url = 'https://www.example.com?a=1&t=TITLE&c=CLIENT_ID(foo)';\n      expect(new Expander(variableSource).getMacroNames(url)).to.eql(['TITLE', 'CLIENT_ID']);\n    });","file":"unit/url-expander/test-expander.js","skipped":false,"dir":"test"},{"name":"should find the nested names","suites":["getMacroNames"],"updatePoint":{"line":368,"column":36,"index":14700},"line":368,"code":"    it('should find the nested names', () => {\n      const url = 'https://www.example.com?a=1&t=TITLE&c=CLIENT_ID(QUERY_PARAM(foo))';\n      expect(new Expander(variableSource).getMacroNames(url)).to.eql(['TITLE', 'CLIENT_ID', 'QUERY_PARAM']);\n    });","file":"unit/url-expander/test-expander.js","skipped":false,"dir":"test"},{"name":"should not do anything if analytics is not installed","suites":["triggerAnalyticsEvent"],"updatePoint":{"line":22,"column":60,"index":807},"line":22,"code":"    it('should not do anything if analytics is not installed', () => {\n      triggerAnalyticsEvent(ampdoc.win.document, 'hello');\n      return timer.promise(50).then(() => {\n        expect(triggerEventSpy).to.have.not.been.called;\n      });\n    });","file":"unit/utils/test-analytics.js","skipped":false,"dir":"test"},{"name":"should trigger analytics event if analytics is installed","suites":["triggerAnalyticsEvent"],"updatePoint":{"line":28,"column":64,"index":1060},"line":28,"code":"    it('should trigger analytics event if analytics is installed', () => {\n      registerServiceBuilderForDoc(ampdoc, 'amp-analytics-instrumentation', MockInstrumentation);\n      // Force instantiation\n      getServiceForDoc(ampdoc, 'amp-analytics-instrumentation');\n      triggerAnalyticsEvent(ampdoc.win.document, 'hello');\n      return timer.promise(50).then(() => {\n        expect(triggerEventSpy).to.have.been.called;\n        expect(triggerEventSpy).to.have.been.calledWith(ampdoc.win.document, 'hello');\n      });\n    });","file":"unit/utils/test-analytics.js","skipped":false,"dir":"test"},{"name":"animation","suites":[],"updatePoint":{"line":36,"column":15,"index":860},"line":36,"code":"  it('animation', () => {\n    let tr1 = -1;\n    let tr2 = -1;\n    anim.add(0, time => {\n      tr1 = time;\n    }, 0.8);\n    anim.add(0.2, time => {\n      tr2 = time;\n    }, 0.8);\n    const ap = anim.start(1000);\n    let resolveCalled = false;\n    ap.resolve_ = () => {\n      resolveCalled = true;\n    };\n    tr1 = tr2 = -1;\n    runVsync();\n    expect(tr1).to.equal(0);\n    expect(tr2).to.equal(-1);\n    tr1 = tr2 = -1;\n    clock.tick(100); // 100\n    runVsync();\n    expect(tr1).to.be.closeTo(0.1 / 0.8, 1e-3);\n    expect(tr2).to.equal(-1);\n    tr1 = tr2 = -1;\n    clock.tick(100); // 200\n    runVsync();\n    expect(tr1).to.be.closeTo(0.2 / 0.8, 1e-3);\n    expect(tr2).to.equal(0);\n    tr1 = tr2 = -1;\n    clock.tick(100); // 300\n    runVsync();\n    expect(tr1).to.be.closeTo(0.3 / 0.8, 1e-3);\n    expect(tr2).to.be.closeTo(0.1 / 0.8, 1e-3);\n    tr1 = tr2 = -1;\n    clock.tick(200); // 500\n    runVsync();\n    expect(tr1).to.be.closeTo(0.5 / 0.8, 1e-3);\n    expect(tr2).to.be.closeTo(0.3 / 0.8, 1e-3);\n    tr1 = tr2 = -1;\n    clock.tick(200); // 700\n    runVsync();\n    expect(tr1).to.be.closeTo(0.7 / 0.8, 1e-3);\n    expect(tr2).to.be.closeTo(0.5 / 0.8, 1e-3);\n    tr1 = tr2 = -1;\n    clock.tick(100); // 800\n    runVsync();\n    expect(tr1).to.equal(1);\n    expect(tr2).to.be.closeTo(0.6 / 0.8, 1e-3);\n    tr1 = tr2 = -1;\n    clock.tick(100); // 900\n    runVsync();\n    expect(tr1).to.equal(-1);\n    expect(tr2).to.be.closeTo(0.7 / 0.8, 1e-3);\n    tr1 = tr2 = -1;\n    expect(resolveCalled).to.equal(false);\n    clock.tick(100); // 1000\n    runVsync();\n    expect(tr1).to.equal(-1);\n    expect(tr2).to.equal(1, 1e-3);\n    expect(resolveCalled).to.equal(true);\n    tr1 = tr2 = -1;\n    clock.tick(100); // 1100\n    runVsync();\n    expect(tr1).to.equal(-1);\n    expect(tr2).to.equal(-1);\n  });","file":"unit/utils/test-animation.js","skipped":false,"dir":"test"},{"name":"should animate out-of-bounds time","suites":[],"updatePoint":{"line":102,"column":39,"index":2674},"line":102,"code":"  it('should animate out-of-bounds time', () => {\n    let tr1 = -1;\n    // Linear curve between -0.5 and 1.5\n    const curve = time => {\n      return time * 2 - 0.5;\n    };\n    anim.add(0, time => {\n      tr1 = time;\n    }, 1, curve);\n    anim.start(1000);\n    tr1 = -1;\n    runVsync();\n    expect(tr1).to.equal(-0.5);\n    tr1 = -1;\n    clock.tick(500); // 500\n    runVsync();\n    expect(tr1).to.be.closeTo(0.5, 1e-3);\n    tr1 = -1;\n    clock.tick(400); // 900\n    runVsync();\n    expect(tr1).to.be.closeTo(1.3, 1e-3);\n    clock.tick(100); // 1000\n    runVsync();\n    expect(tr1).to.equal(1);\n  });","file":"unit/utils/test-animation.js","skipped":false,"dir":"test"},{"name":"halt freeze","suites":[],"updatePoint":{"line":127,"column":17,"index":3251},"line":127,"code":"  it('halt freeze', () => {\n    let tr1 = -1;\n    let tr2 = -1;\n    anim.add(0, time => {\n      tr1 = time;\n    }, 0.8);\n    anim.add(0.2, time => {\n      tr2 = time;\n    }, 0.8);\n    const ap = anim.start(1000);\n    let rejectCalled = false;\n    ap.reject_ = () => {\n      rejectCalled = true;\n    };\n    tr1 = tr2 = -1;\n    runVsync();\n    expect(tr1).to.equal(0);\n    expect(tr2).to.equal(-1);\n    tr1 = tr2 = -1;\n    ap.halt(0);\n    expect(tr1).to.equal(-1);\n    expect(tr2).to.equal(-1);\n    runVsync();\n    expect(rejectCalled).to.equal(true);\n  });","file":"unit/utils/test-animation.js","skipped":false,"dir":"test"},{"name":"halt reset","suites":[],"updatePoint":{"line":152,"column":16,"index":3806},"line":152,"code":"  it('halt reset', () => {\n    let tr1 = -1;\n    let tr2 = -1;\n    anim.add(0, time => {\n      tr1 = time;\n    }, 0.8);\n    anim.add(0.2, time => {\n      tr2 = time;\n    }, 0.8);\n    const ap = anim.start(1000);\n    let rejectCalled = false;\n    ap.reject_ = () => {\n      rejectCalled = true;\n    };\n    tr1 = tr2 = -1;\n    runVsync();\n    expect(tr1).to.equal(0);\n    expect(tr2).to.equal(-1);\n    tr1 = tr2 = -1;\n    ap.halt(-1);\n    expect(tr1).to.equal(0);\n    expect(tr2).to.equal(0);\n    runVsync();\n    expect(rejectCalled).to.equal(true);\n  });","file":"unit/utils/test-animation.js","skipped":false,"dir":"test"},{"name":"halt forward","suites":[],"updatePoint":{"line":177,"column":18,"index":4362},"line":177,"code":"  it('halt forward', () => {\n    let tr1 = -1;\n    let tr2 = -1;\n    anim.add(0, time => {\n      tr1 = time;\n    }, 0.8);\n    anim.add(0.2, time => {\n      tr2 = time;\n    }, 0.8);\n    const ap = anim.start(1000);\n    let rejectCalled = false;\n    ap.reject_ = () => {\n      rejectCalled = true;\n    };\n    tr1 = tr2 = -1;\n    runVsync();\n    expect(tr1).to.equal(0);\n    expect(tr2).to.equal(-1);\n    tr1 = tr2 = -1;\n    ap.halt(1);\n    expect(tr1).to.equal(1);\n    expect(tr2).to.equal(1);\n    runVsync();\n    expect(rejectCalled).to.equal(true);\n  });","file":"unit/utils/test-animation.js","skipped":false,"dir":"test"},{"name":"should NOT start animation when cannot animate","suites":[],"updatePoint":{"line":202,"column":52,"index":4951},"line":202,"code":"  it('should NOT start animation when cannot animate', () => {\n    let tr1 = -1;\n    let tr2 = -1;\n    anim.add(0, time => {\n      tr1 = time;\n    }, 0.8);\n    anim.add(0.2, time => {\n      tr2 = time;\n    }, 0.8);\n    vsync.canAnimate = () => false;\n    const ap = anim.start(1000);\n    expect(vsyncTasks).to.have.length(0);\n    expect(ap.running_).to.be.false;\n    return ap.then(() => {\n      return 'SUCCESS';\n    }, () => {\n      return 'ERROR';\n    }).then(response => {\n      expect(tr1).to.equal(-1);\n      expect(tr2).to.equal(-1);\n      expect(response).to.equal('ERROR');\n    });\n  });","file":"unit/utils/test-animation.js","skipped":false,"dir":"test"},{"name":"should halt-freeze animation when cannot animate","suites":[],"updatePoint":{"line":225,"column":54,"index":5550},"line":225,"code":"  it('should halt-freeze animation when cannot animate', () => {\n    anim.add(0, () => {}, 0.8);\n    anim.add(0.2, () => {}, 0.8);\n    const ap = anim.start(1000);\n    let rejectCalled = false;\n    ap.reject_ = () => {\n      rejectCalled = true;\n    };\n    expect(vsyncTasks).to.have.length(1);\n    expect(ap.running_).to.be.true;\n    expect(rejectCalled).to.be.false;\n    vsync.canAnimate = () => false;\n    runVsync();\n    expect(ap.running_).to.be.false;\n    expect(rejectCalled).to.be.true;\n  });","file":"unit/utils/test-animation.js","skipped":false,"dir":"test"},{"name":"should push and pop history state","suites":[],"updatePoint":{"line":21,"column":39,"index":594},"line":21,"code":"  it('should push and pop history state', async () => {\n    historyMock.expects('push').resolves('H1').once();\n    historyMock.expects('pop').withArgs('H1').once();\n    const watcher = new CloseWatcherImpl(ampdoc, handler);\n    await Promise.resolve('H1');\n    watcher.signalClosed();\n    expect(handler).to.be.calledOnce;\n  });","file":"unit/utils/test-close-watcher-impl.js","skipped":false,"dir":"test"},{"name":"should trigger on history pop","suites":[],"updatePoint":{"line":29,"column":35,"index":919},"line":29,"code":"  it('should trigger on history pop', async () => {\n    let popHandler;\n    historyMock.expects('push').withArgs(env.sandbox.match(a => {\n      popHandler = a;\n      return true;\n    })).resolves('H1').once();\n    new CloseWatcherImpl(ampdoc, handler);\n    await Promise.resolve('H1');\n    expect(popHandler).to.exist;\n    popHandler();\n    expect(handler).to.be.calledOnce;\n  });","file":"unit/utils/test-close-watcher-impl.js","skipped":false,"dir":"test"},{"name":"should trigger on ESC key","suites":[],"updatePoint":{"line":41,"column":31,"index":1296},"line":41,"code":"  it('should trigger on ESC key', async () => {\n    historyMock.expects('push').resolves('H1').once();\n    historyMock.expects('pop').withArgs('H1').once();\n    new CloseWatcherImpl(ampdoc, handler);\n    await Promise.resolve('H1');\n    doc.documentElement.dispatchEvent(new KeyboardEvent('keydown', {\n      key: Keys_Enum.ESCAPE\n    }));\n    expect(handler).to.be.calledOnce;\n  });","file":"unit/utils/test-close-watcher-impl.js","skipped":false,"dir":"test"},{"name":"should measure display via doc observer","suites":["measureDisplay"],"updatePoint":{"line":93,"column":47,"index":2960},"line":93,"code":"    it('should measure display via doc observer', async () => {\n      const promise = measureDisplay(element);\n      docObserver.notify([{\n        target: element,\n        isIntersecting: true\n      }]);\n      const isDisplayed = await promise;\n      expect(isDisplayed).to.be.true;\n      expect(docObserver.elements).to.not.include(element);\n    });","file":"unit/utils/test-display-observer.js","skipped":false,"dir":"test"},{"name":"should measure display via viewport observer","suites":["measureDisplay"],"updatePoint":{"line":103,"column":52,"index":3316},"line":103,"code":"    it('should measure display via viewport observer', async () => {\n      const promise = measureDisplay(element);\n      viewportObserver.notify([{\n        target: element,\n        isIntersecting: true\n      }]);\n      const isDisplayed = await promise;\n      expect(isDisplayed).to.be.true;\n      expect(viewportObserver.elements).to.not.include(element);\n    });","file":"unit/utils/test-display-observer.js","skipped":false,"dir":"test"},{"name":"should measure display via one of observers","suites":["measureDisplay"],"updatePoint":{"line":113,"column":51,"index":3681},"line":113,"code":"    it('should measure display via one of observers', async () => {\n      const promise = measureDisplay(element);\n      viewportObserver.notify([{\n        target: element,\n        isIntersecting: false\n      }]);\n      docObserver.notify([{\n        target: element,\n        isIntersecting: true\n      }]);\n      const isDisplayed = await promise;\n      expect(isDisplayed).to.be.true;\n      expect(docObserver.elements).to.not.include(element);\n      expect(viewportObserver.elements).to.not.include(element);\n    });","file":"unit/utils/test-display-observer.js","skipped":false,"dir":"test"},{"name":"should measure display via as false","suites":["measureDisplay"],"updatePoint":{"line":128,"column":43,"index":4192},"line":128,"code":"    it('should measure display via as false', async () => {\n      const promise = measureDisplay(element);\n      docObserver.notify([{\n        target: element,\n        isIntersecting: false\n      }]);\n      viewportObserver.notify([{\n        target: element,\n        isIntersecting: false\n      }]);\n      const isDisplayed = await promise;\n      expect(isDisplayed).to.be.false;\n      expect(docObserver.elements).to.not.include(element);\n      expect(viewportObserver.elements).to.not.include(element);\n    });","file":"unit/utils/test-display-observer.js","skipped":false,"dir":"test"},{"name":"should observe changes: true -> false","suites":["observe"],"updatePoint":{"line":145,"column":45,"index":4743},"line":145,"code":"    it('should observe changes: true -> false', async () => {\n      const callbackCaller = createCallbackCaller();\n      observeDisplay(element, callbackCaller);\n\n      // First response.\n      docObserver.notify([{\n        target: element,\n        isIntersecting: true\n      }]);\n      viewportObserver.notify([{\n        target: element,\n        isIntersecting: false\n      }]);\n      const display1 = await callbackCaller.next();\n      expect(display1).to.be.true;\n\n      // Change intersection.\n      docObserver.notify([{\n        target: element,\n        isIntersecting: false\n      }]);\n      const display2 = await callbackCaller.next();\n      expect(display2).to.be.false;\n\n      // No change.\n      await viewportObserver.notify([{\n        target: element,\n        isIntersecting: false\n      }]);\n      expect(callbackCaller.isEmpty()).to.be.true;\n    });","file":"unit/utils/test-display-observer.js","skipped":false,"dir":"test"},{"name":"should observe changes: false -> true","suites":["observe"],"updatePoint":{"line":176,"column":45,"index":5608},"line":176,"code":"    it('should observe changes: false -> true', async () => {\n      const callbackCaller = createCallbackCaller();\n      observeDisplay(element, callbackCaller);\n\n      // First response.\n      await docObserver.notify([{\n        target: element,\n        isIntersecting: false\n      }]);\n      viewportObserver.notify([{\n        target: element,\n        isIntersecting: false\n      }]);\n      const display1 = await callbackCaller.next();\n      expect(display1).to.be.false;\n\n      // Change intersection.\n      docObserver.notify([{\n        target: element,\n        isIntersecting: true\n      }]);\n      const display2 = await callbackCaller.next();\n      expect(display2).to.be.true;\n\n      // No change.\n      viewportObserver.notify([{\n        target: element,\n        isIntersecting: true\n      }]);\n      expect(callbackCaller.isEmpty()).to.be.true;\n    });","file":"unit/utils/test-display-observer.js","skipped":false,"dir":"test"},{"name":"should ignore unknown intersection","suites":["observe"],"updatePoint":{"line":207,"column":42,"index":6469},"line":207,"code":"    it('should ignore unknown intersection', async () => {\n      const callbackCaller = createCallbackCaller();\n      observeDisplay(element, callbackCaller);\n\n      // First response.\n      await docObserver.notify([{\n        target: element,\n        isIntersecting: false\n      }]);\n      expect(callbackCaller.isEmpty()).to.be.true;\n\n      // Change intersection.\n      await docObserver.notify([{\n        target: element,\n        isIntersecting: true\n      }]);\n      expect(callbackCaller.isEmpty()).to.be.false;\n      const display1 = await callbackCaller.next();\n      expect(display1).to.be.true;\n    });","file":"unit/utils/test-display-observer.js","skipped":false,"dir":"test"},{"name":"should only observe last change","suites":["observe"],"updatePoint":{"line":227,"column":39,"index":7079},"line":227,"code":"    it('should only observe last change', async () => {\n      const callbackCaller = createCallbackCaller();\n      observeDisplay(element, callbackCaller);\n      viewportObserver.notify([{\n        target: element,\n        isIntersecting: false\n      }]);\n      docObserver.notify([{\n        target: element,\n        isIntersecting: false\n      }, {\n        target: element,\n        isIntersecting: true\n      }]);\n      const display1 = await callbackCaller.next();\n      expect(display1).to.be.true;\n      expect(callbackCaller.isEmpty()).to.be.true;\n    });","file":"unit/utils/test-display-observer.js","skipped":false,"dir":"test"},{"name":"should observe multiple callbacks","suites":["observe"],"updatePoint":{"line":245,"column":41,"index":7641},"line":245,"code":"    it('should observe multiple callbacks', async () => {\n      // First callback.\n      const callbackCaller1 = createCallbackCaller();\n      observeDisplay(element, callbackCaller1);\n      docObserver.notify([{\n        target: element,\n        isIntersecting: true\n      }]);\n      const display1 = await callbackCaller1.next();\n      expect(display1).to.be.true;\n\n      // Second callback.\n      const callbackCaller2 = createCallbackCaller();\n      observeDisplay(element, callbackCaller2);\n      const display2 = await callbackCaller2.next();\n      expect(display2).to.be.true;\n    });","file":"unit/utils/test-display-observer.js","skipped":false,"dir":"test"},{"name":"should unobserve multiple callbacks","suites":["observe"],"updatePoint":{"line":262,"column":43,"index":8234},"line":262,"code":"    it('should unobserve multiple callbacks', async () => {\n      const callbackCaller1 = createCallbackCaller();\n      const callbackCaller2 = createCallbackCaller();\n      observeDisplay(element, callbackCaller1);\n      observeDisplay(element, callbackCaller2);\n      expect(docObserver.elements).to.include(element);\n      expect(viewportObserver.elements).to.include(element);\n\n      // Unobserve first callback.\n      unobserveDisplay(element, callbackCaller2);\n      expect(docObserver.elements).to.include(element);\n      expect(viewportObserver.elements).to.include(element);\n\n      // Unobserve second callback.\n      unobserveDisplay(element, callbackCaller1);\n      expect(docObserver.elements).to.not.include(element);\n      expect(viewportObserver.elements).to.not.include(element);\n    });","file":"unit/utils/test-display-observer.js","skipped":false,"dir":"test"},{"name":"should observe document visibility","suites":["observe"],"updatePoint":{"line":280,"column":42,"index":9037},"line":280,"code":"    it('should observe document visibility', async () => {\n      const callbackCaller = createCallbackCaller();\n      observeDisplay(element, callbackCaller);\n\n      // First response.\n      docObserver.notify([{\n        target: element,\n        isIntersecting: true\n      }]);\n      viewportObserver.notify([{\n        target: element,\n        isIntersecting: false\n      }]);\n      const display1 = await callbackCaller.next();\n      expect(display1).to.be.true;\n\n      // Paused visibility.\n      ampdoc.overrideVisibilityState('paused');\n      const display2 = await callbackCaller.next();\n      expect(display2).to.be.false;\n\n      // Visibile visibility.\n      ampdoc.overrideVisibilityState('visible');\n      const display3 = await callbackCaller.next();\n      expect(display3).to.be.true;\n    });","file":"unit/utils/test-display-observer.js","skipped":false,"dir":"test"},{"name":"should treat hidden document visibility as displayed","suites":["observe"],"updatePoint":{"line":306,"column":60,"index":9859},"line":306,"code":"    it('should treat hidden document visibility as displayed', async () => {\n      const callbackCaller = createCallbackCaller();\n      observeDisplay(element, callbackCaller);\n\n      // First response.\n      docObserver.notify([{\n        target: element,\n        isIntersecting: true\n      }]);\n      viewportObserver.notify([{\n        target: element,\n        isIntersecting: false\n      }]);\n      const display1 = await callbackCaller.next();\n      expect(display1).to.be.true;\n\n      // Paused visibility.\n      ampdoc.overrideVisibilityState('paused');\n      const display2 = await callbackCaller.next();\n      expect(display2).to.be.false;\n\n      // Hidden visibility.\n      ampdoc.overrideVisibilityState('hidden');\n      const display3 = await callbackCaller.next();\n      expect(display3).to.be.true;\n    });","file":"unit/utils/test-display-observer.js","skipped":false,"dir":"test"},{"name":"should create observer only after container display is known","suites":["registerContainer"],"updatePoint":{"line":345,"column":68,"index":11080},"line":345,"code":"    it('should create observer only after container display is known', async () => {\n      registerContainer(container);\n      expect(containerObservers.get(container)).to.not.exist;\n      await viewportObserver.notify([{\n        target: container,\n        isIntersecting: false\n      }]);\n      expect(containerObservers.get(container)).to.not.exist;\n      await viewportObserver.notify([{\n        target: container,\n        isIntersecting: true\n      }]);\n      expect(containerObservers.get(container)).to.exist;\n    });","file":"unit/utils/test-display-observer.js","skipped":false,"dir":"test"},{"name":"should only observe contained elements","suites":["registerContainer"],"updatePoint":{"line":359,"column":46,"index":11582},"line":359,"code":"    it('should only observe contained elements', async () => {\n      const elementCallback = createCallbackCaller();\n      observeDisplay(element, elementCallback);\n      const topElementCallback = createCallbackCaller();\n      observeDisplay(topElement, topElementCallback);\n      viewportObserver.notify([{\n        target: element,\n        isIntersecting: false\n      }]);\n      docObserver.notify([{\n        target: element,\n        isIntersecting: false\n      }]);\n      viewportObserver.notify([{\n        target: topElement,\n        isIntersecting: false\n      }]);\n      docObserver.notify([{\n        target: topElement,\n        isIntersecting: false\n      }]);\n      const display1 = await elementCallback.next();\n      const display2 = await topElementCallback.next();\n      expect(display1).to.be.false;\n      expect(display2).to.be.false;\n      registerContainer(container);\n      await viewportObserver.notify([{\n        target: container,\n        isIntersecting: true\n      }]);\n      const containerObserver = containerObservers.get(container);\n      expect(containerObserver.elements).to.include(element);\n      expect(containerObserver.elements).to.not.include(topElement);\n      containerObserver.notify([{\n        target: element,\n        isIntersecting: true\n      }]);\n      const display3 = await elementCallback.next();\n      const display4 = await topElementCallback.next();\n      expect(display3).to.be.true;\n      expect(display4).to.be.false; // no change.\n    });","file":"unit/utils/test-display-observer.js","skipped":false,"dir":"test"},{"name":"should unregister observer","suites":["registerContainer"],"updatePoint":{"line":402,"column":34,"index":13061},"line":402,"code":"    it('should unregister observer', async () => {\n      const elementCallback = createCallbackCaller();\n      observeDisplay(element, elementCallback);\n      viewportObserver.notify([{\n        target: element,\n        isIntersecting: false\n      }]);\n      docObserver.notify([{\n        target: element,\n        isIntersecting: false\n      }]);\n      const display1 = await elementCallback.next();\n      expect(display1).to.be.false;\n      registerContainer(container);\n      await viewportObserver.notify([{\n        target: container,\n        isIntersecting: true\n      }]);\n      const containerObserver = containerObservers.get(container);\n      containerObserver.notify([{\n        target: element,\n        isIntersecting: true\n      }]);\n      const display2 = await elementCallback.next();\n      expect(display2).to.be.true;\n      unregisterContainer(container);\n      expect(docObserver.elements).to.not.include(container);\n      expect(containerObserver.elements).to.not.include(element);\n      const display3 = await elementCallback.next();\n      expect(display3).to.be.false;\n    });","file":"unit/utils/test-display-observer.js","skipped":false,"dir":"test"},{"name":"should change display when container observer is notified","suites":["registerContainer"],"updatePoint":{"line":433,"column":65,"index":14186},"line":433,"code":"    it('should change display when container observer is notified', async () => {\n      const elementCallback = createCallbackCaller();\n      observeDisplay(element, elementCallback);\n      viewportObserver.notify([{\n        target: element,\n        isIntersecting: false\n      }]);\n      docObserver.notify([{\n        target: element,\n        isIntersecting: false\n      }]);\n      const display1 = await elementCallback.next();\n      expect(display1).to.be.false;\n      registerContainer(container);\n      await viewportObserver.notify([{\n        target: container,\n        isIntersecting: true\n      }]);\n      const containerObserver = containerObservers.get(container);\n      containerObserver.notify([{\n        target: element,\n        isIntersecting: true\n      }]);\n      const display2 = await elementCallback.next();\n      expect(display2).to.be.true;\n      containerObserver.notify([{\n        target: element,\n        isIntersecting: false\n      }]);\n      const display3 = await elementCallback.next();\n      expect(display3).to.be.false;\n    });","file":"unit/utils/test-display-observer.js","skipped":false,"dir":"test"},{"name":"should change display when container display has changed","suites":["registerContainer"],"updatePoint":{"line":465,"column":64,"index":15244},"line":465,"code":"    it('should change display when container display has changed', async () => {\n      const elementCallback = createCallbackCaller();\n      observeDisplay(element, elementCallback);\n      viewportObserver.notify([{\n        target: element,\n        isIntersecting: false\n      }]);\n      docObserver.notify([{\n        target: element,\n        isIntersecting: false\n      }]);\n      const display1 = await elementCallback.next();\n      expect(display1).to.be.false;\n      registerContainer(container);\n      await docObserver.notify([{\n        target: container,\n        isIntersecting: false\n      }]);\n      await viewportObserver.notify([{\n        target: container,\n        isIntersecting: true\n      }]);\n      const containerObserver = containerObservers.get(container);\n      containerObserver.notify([{\n        target: element,\n        isIntersecting: true\n      }]);\n      const display2 = await elementCallback.next();\n      expect(display2).to.be.true;\n      await viewportObserver.notify([{\n        target: container,\n        isIntersecting: false\n      }]);\n      const display3 = await elementCallback.next();\n      expect(display3).to.be.false;\n    });","file":"unit/utils/test-display-observer.js","skipped":false,"dir":"test"},{"name":"should compute display for nested observers","suites":["registerContainer"],"updatePoint":{"line":501,"column":51,"index":16398},"line":501,"code":"    it('should compute display for nested observers', async () => {\n      const childContainer = doc.createElement('div');\n      childContainer.id = 'child-container1';\n      container.appendChild(childContainer);\n      childContainer.appendChild(element);\n      const elementCallback = createCallbackCaller();\n      observeDisplay(element, elementCallback);\n      await viewportObserver.notify([{\n        target: element,\n        isIntersecting: false\n      }]);\n      expect(elementCallback.isEmpty()).to.be.true;\n      await docObserver.notify([{\n        target: element,\n        isIntersecting: false\n      }]);\n      expect(await elementCallback.next()).to.be.false;\n\n      // 1. Register childContainer.\n      registerContainer(childContainer);\n      expect(containerObservers.get(childContainer)).to.not.exist;\n      expect(elementCallback.isEmpty()).to.be.true;\n\n      // 2. Make child container undisplayed.\n      await viewportObserver.notify([{\n        target: childContainer,\n        isIntersecting: false\n      }]);\n      await docObserver.notify([{\n        target: childContainer,\n        isIntersecting: false\n      }]);\n      expect(containerObservers.get(childContainer)).to.not.exist;\n      expect(await elementCallback.next()).to.be.false;\n\n      // 3. Register parent container.\n      registerContainer(container);\n      expect(containerObservers.get(container)).to.not.exist;\n      expect(elementCallback.isEmpty()).to.be.true;\n\n      // 4. Make parent container displayed, but child is still undisplayed.\n      await docObserver.notify([{\n        target: container,\n        isIntersecting: true\n      }]);\n      expect(containerObservers.get(container)).to.exist;\n      expect(elementCallback.isEmpty()).to.be.true;\n\n      // 5. Intersect the child container inside the parent container.\n      await containerObservers.get(container).notify([{\n        target: childContainer,\n        isIntersecting: true\n      }]);\n      expect(containerObservers.get(childContainer)).to.exist;\n      expect(elementCallback.isEmpty()).to.be.true;\n\n      // 6. Intesect the element inside the child container.\n      await containerObservers.get(childContainer).notify([{\n        target: element,\n        isIntersecting: true\n      }]);\n      expect(await elementCallback.next()).to.be.true;\n    });","file":"unit/utils/test-display-observer.js","skipped":false,"dir":"test"},{"name":"should not interrupt observations for the unrelated targets","suites":["registerContainer"],"updatePoint":{"line":564,"column":67,"index":18718},"line":564,"code":"    it('should not interrupt observations for the unrelated targets', async () => {\n      const elementCallback = createCallbackCaller();\n      observeDisplay(topElement, elementCallback);\n\n      // 1. Register a container, but not observations on it yet.\n      registerContainer(container);\n      expect(elementCallback.isEmpty()).to.be.true;\n      await viewportObserver.notify([{\n        target: topElement,\n        isIntersecting: false\n      }]);\n      await docObserver.notify([{\n        target: topElement,\n        isIntersecting: false\n      }]);\n      expect(await elementCallback.next()).to.be.false;\n\n      // 2. Provide observations for the container.\n      await docObserver.notify([{\n        target: container,\n        isIntersecting: true\n      }]);\n      expect(containerObservers.get(container)).to.exist;\n      expect(elementCallback.isEmpty()).to.be.true;\n    });","file":"unit/utils/test-display-observer.js","skipped":false,"dir":"test"},{"name":"should respect maxAncestorsToVisit","suites":[],"updatePoint":{"line":12,"column":40,"index":340},"line":12,"code":"  it('should respect maxAncestorsToVisit', () => {\n    const parent = doc.createElement('div');\n    const child = doc.createElement('div');\n    parent.appendChild(child);\n    parent.id = 'parent';\n    let result = false;\n    const callback = el => {\n      if (el.id == 'parent') {\n        result = true;\n        return true;\n      }\n    };\n    domAncestorVisitor.addVisitor(callback, 1).visitAncestorsStartingFrom(child);\n    expect(result).to.be.false;\n    domAncestorVisitor.addVisitor(callback, 2).visitAncestorsStartingFrom(child);\n    expect(result).to.be.true;\n  });","file":"unit/utils/test-dom-ancestor-visitor.js","skipped":false,"dir":"test"},{"name":"should not re-run completed visitors","suites":[],"updatePoint":{"line":29,"column":42,"index":915},"line":29,"code":"  it('should not re-run completed visitors', () => {\n    const parent = doc.createElement('div');\n    const child = doc.createElement('div');\n    parent.appendChild(child);\n    let result1 = false;\n    const callback1 = el => {\n      if (el.id == 'parent') {\n        result1 = true;\n        return true;\n      }\n    };\n    let result2 = false;\n    const callback2 = el => {\n      if (el.id == 'parent') {\n        result2 = true;\n        return true;\n      }\n    };\n    domAncestorVisitor.addVisitor(callback1).visitAncestorsStartingFrom(child);\n    expect(result1).to.be.false;\n    parent.id = 'parent';\n    domAncestorVisitor.addVisitor(callback2).visitAncestorsStartingFrom(child);\n    expect(result1).to.be.false;\n    expect(result2).to.be.true;\n  });","file":"unit/utils/test-dom-ancestor-visitor.js","skipped":false,"dir":"test"},{"name":"should cease visiting once visitor returns","suites":[],"updatePoint":{"line":54,"column":48,"index":1676},"line":54,"code":"  it('should cease visiting once visitor returns', () => {\n    const elements = [doc.createElement('div')];\n    elements[0].id = '0';\n    for (let i = 1; i < 100; i++) {\n      const el = doc.createElement('div');\n      el.id = String(i);\n      elements[i - 1].appendChild(el);\n      elements.push(el);\n    }\n    domAncestorVisitor.addVisitor(el => {\n      el.classList.add('visited');\n      if (el.id == '50') {\n        return true;\n      }\n    }).visitAncestorsStartingFrom(elements[elements.length - 1]);\n    elements.forEach((element, index) => {\n      if (index >= 50) {\n        expect(element.classList.contains('visited')).to.be.true;\n      } else {\n        expect(element.classList.contains('visited')).to.be.false;\n      }\n    });\n  });","file":"unit/utils/test-dom-ancestor-visitor.js","skipped":false,"dir":"test"},{"name":"should only transfer after targetBody is ready","suites":["#onEnd"],"updatePoint":{"line":24,"column":54,"index":722},"line":24,"code":"    it('should only transfer after targetBody is ready', async () => {\n      const {\n        body\n      } = win.document;\n      detachedDoc.write(`\n        <!doctype html>\n        <html ⚡>\n        <head>\n        <script async src=\"https://cdn.ampproject.org/v0.js\"></script>\n        </head>\n        <body>\n        <child-one></child-one>\n        <child-two></child-two>\n        </body>\n      `);\n      transformer.onChunk(detachedDoc);\n      transformer.onEnd();\n      await flush();\n      expect(transferThrottleSpy).not.to.have.been.called;\n      transformer.transferBody(body /* targetBody */);\n\n      await flush();\n      expect(transferThrottleSpy).to.have.been.calledOnce;\n      expect(body.querySelector('child-one')).to.exist;\n      expect(body.querySelector('child-two')).to.exist;\n    });","file":"unit/utils/test-dom-transform-stream.js","skipped":false,"dir":"test"},{"name":"should resolve with head, when head is ready","suites":["#waitForHead"],"updatePoint":{"line":52,"column":52,"index":1560},"line":52,"code":"    it('should resolve with head, when head is ready', async () => {\n      const headSpy = env.sandbox.spy();\n      transformer.waitForHead().then(headSpy);\n      detachedDoc.write(`\n        <!doctype html>\n          <html ⚡>\n          <head>\n            <script async src=\"https://cdn.ampproject.org/v0.js\"></script>\n      `);\n      transformer.onChunk(detachedDoc);\n      await flush();\n      expect(headSpy).to.not.have.been.called;\n      detachedDoc.write(`</head><body>`);\n      transformer.onChunk(detachedDoc);\n      await flush();\n      expect(headSpy).calledWith(detachedDoc.head);\n    });","file":"unit/utils/test-dom-transform-stream.js","skipped":false,"dir":"test"},{"name":"should transfer available chunks only after calling","suites":["#transferBody"],"updatePoint":{"line":71,"column":59,"index":2208},"line":71,"code":"    it('should transfer available chunks only after calling', async () => {\n      const {\n        body\n      } = win.document;\n      detachedDoc.write(`\n        <!doctype html>\n          <html ⚡>\n          <head>\n            <script async src=\"https://cdn.ampproject.org/v0.js\"></script>\n          </head>\n          <body>\n            <child-one></child-one>\n            <child-two></child-two>\n     `);\n      transformer.onChunk(detachedDoc);\n      await flush();\n      expect(body.querySelector('child-one')).not.to.exist;\n      expect(body.querySelector('child-two')).not.to.exist;\n      transformer.transferBody(body /* targetBody */);\n      await flush();\n      expect(body.querySelector('child-one')).to.exist;\n      expect(body.querySelector('child-two')).to.exist;\n    });","file":"unit/utils/test-dom-transform-stream.js","skipped":false,"dir":"test"},{"name":"should transfer <body> attributes to target body element","suites":["#transferBody"],"updatePoint":{"line":94,"column":64,"index":2994},"line":94,"code":"    it('should transfer <body> attributes to target body element', async () => {\n      const {\n        body\n      } = win.document;\n      detachedDoc.write(`\n        <!doctype html>\n          <html ⚡>\n          <head>\n            <script async src=\"https://cdn.ampproject.org/v0.js\"></script>\n          </head>\n          <body marginwidth=\"0\" marginheight=\"0\" class=\"amp-cats\" style=\"opacity: 1;\">\n            <child-one></child-one>\n            <child-two></child-two>\n     `);\n      transformer.onChunk(detachedDoc);\n      transformer.transferBody(body /* targetBody */);\n      await flush();\n      expect(body.getAttribute('marginwidth')).to.equal('0');\n      expect(body.getAttribute('marginheight')).to.equal('0');\n      expect(body.getAttribute('style')).to.equal('opacity: 1;');\n      expect(body).to.have.class('amp-cats');\n    });","file":"unit/utils/test-dom-transform-stream.js","skipped":false,"dir":"test"},{"name":"should keep transferring new chunks after call","suites":["#transferBody"],"updatePoint":{"line":116,"column":54,"index":3824},"line":116,"code":"    it('should keep transferring new chunks after call', async () => {\n      const {\n        body\n      } = win.document;\n      detachedDoc.write(`\n        <!doctype html>\n          <html ⚡>\n          <head>\n            <script async src=\"https://cdn.ampproject.org/v0.js\"></script>\n          </head>\n          <body>\n            <child-one></child-one>\n            <child-two></child-two>\n     `);\n      transformer.onChunk(detachedDoc);\n      transformer.transferBody(body /* targetBody */);\n      await flush();\n      expect(body.querySelector('child-one')).to.exist;\n      expect(body.querySelector('child-one')).to.exist;\n      detachedDoc.write(`\n        <child-three></child-three>\n        <child-four></child-four>\n      `);\n      transformer.onChunk(detachedDoc);\n      await flush();\n      expect(body.querySelector('child-three')).to.exist;\n      expect(body.querySelector('child-four')).to.exist;\n    });","file":"unit/utils/test-dom-transform-stream.js","skipped":false,"dir":"test"},{"name":"should resolve only after onEnd is called","suites":["#transferBody"],"updatePoint":{"line":144,"column":49,"index":4736},"line":144,"code":"    it('should resolve only after onEnd is called', async () => {\n      const {\n        body\n      } = win.document;\n      const tranferCompleteSpy = env.sandbox.spy();\n      transformer.transferBody(body /* targetBody */).then(tranferCompleteSpy);\n      detachedDoc.write(`\n        <!doctype html>\n          <html ⚡>\n          <head>\n            <script async src=\"https://cdn.ampproject.org/v0.js\"></script>\n          </head>\n          <body>\n            <child-one></child-one>\n            <child-two></child-two>\n          </body>\n     `);\n      transformer.onChunk(detachedDoc);\n      await flush();\n      expect(tranferCompleteSpy).not.to.have.been.called;\n      transformer.onEnd();\n      await flush();\n      expect(tranferCompleteSpy).to.have.been.called;\n      expect(body.querySelector('child-one')).to.exist;\n      expect(body.querySelector('child-two')).to.exist;\n    });","file":"unit/utils/test-dom-transform-stream.js","skipped":false,"dir":"test"},{"name":"should resolve after queued chunks are transferred","suites":["#transferBody"],"updatePoint":{"line":170,"column":58,"index":5630},"line":170,"code":"    it('should resolve after queued chunks are transferred', async () => {\n      const {\n        body\n      } = win.document;\n      const tranferCompleteSpy = env.sandbox.spy();\n      detachedDoc.write(`\n        <!doctype html>\n          <html ⚡>\n          <head>\n            <script async src=\"https://cdn.ampproject.org/v0.js\"></script>\n          </head>\n          <body>\n     `);\n      transformer.onChunk(detachedDoc);\n      transformer.transferBody(body /* targetBody */).then(tranferCompleteSpy);\n      await flush();\n      expect(tranferCompleteSpy).not.to.have.been.called;\n      detachedDoc.write(`\n        <child-one></child-one>\n        <child-two></child-two>\n        </body>\n      `);\n      transformer.onChunk(detachedDoc);\n      // No flush here so onEnd hits the queued promise.\n      transformer.onEnd();\n      await flush();\n      expect(tranferCompleteSpy).to.have.been.called;\n      expect(body.querySelector('child-one')).to.exist;\n      expect(body.querySelector('child-two')).to.exist;\n    });","file":"unit/utils/test-dom-transform-stream.js","skipped":false,"dir":"test"},{"name":"should not resolve if no body / onEnd called before body written","suites":["#transferBody"],"updatePoint":{"line":200,"column":72,"index":6661},"line":200,"code":"    it('should not resolve if no body / onEnd called before body written', async () => {\n      const {\n        body\n      } = win.document;\n      const tranferCompleteSpy = env.sandbox.spy();\n      transformer.transferBody(body /* targetBody */).then(tranferCompleteSpy);\n      detachedDoc.write(`\n        <!doctype html>\n          <html ⚡>\n          <head>\n            <script async src=\"https://cdn.ampproject.org/v0.js\"></script>\n          </head>\n     `);\n      transformer.onChunk(detachedDoc);\n      await flush();\n      transformer.onEnd();\n      await flush();\n      expect(tranferCompleteSpy).not.to.have.been.called;\n    });","file":"unit/utils/test-dom-transform-stream.js","skipped":false,"dir":"test"},{"name":"should throw if no targetBody given","suites":["#transferBody"],"updatePoint":{"line":219,"column":43,"index":7267},"line":219,"code":"    it('should throw if no targetBody given', () => {\n      allowConsoleError(() => {\n        expect(() => transformer.transferBody()).to.throw('No target body given to DomTransformStream.transferBody');\n      });\n    });","file":"unit/utils/test-dom-transform-stream.js","skipped":false,"dir":"test"},{"name":"should throw if called more than once","suites":["#transferBody"],"updatePoint":{"line":224,"column":45,"index":7491},"line":224,"code":"    it('should throw if called more than once', () => {\n      const {\n        body\n      } = win.document;\n      // No problem here.\n      transformer.transferBody(body /* targetBody */);\n      allowConsoleError(() => {\n        expect(() => transformer.transferBody(body)).to.throw('DomTransformStream.transferBody should only be called once');\n      });\n    });","file":"unit/utils/test-dom-transform-stream.js","skipped":false,"dir":"test"},{"name":"should complete when writer has been closed","suites":["DomWriterStreamer"],"updatePoint":{"line":38,"column":51,"index":1161},"line":38,"code":"    it('should complete when writer has been closed', () => {\n      writer.close();\n      return onEndPromise.then(() => {\n        expect(onBodySpy).to.be.calledOnce;\n        env.flushVsync();\n        expect(onBodyChunkSpy).to.not.be.called;\n      });\n    });","file":"unit/utils/test-dom-writer.js","skipped":false,"dir":"test"},{"name":"should resolve body as soon as available","suites":["DomWriterStreamer"],"updatePoint":{"line":46,"column":48,"index":1418},"line":46,"code":"    it('should resolve body as soon as available', () => {\n      writer.write('<body class=\"b\">');\n      expect(onBodySpy).to.not.be.called;\n      return onBodyPromise.then(body => {\n        expect(body.getAttribute('class')).to.equal('b');\n        expect(onBodySpy).to.be.calledOnce;\n      });\n    });","file":"unit/utils/test-dom-writer.js","skipped":false,"dir":"test"},{"name":"should schedule body chunk","suites":["DomWriterStreamer"],"updatePoint":{"line":54,"column":34,"index":1707},"line":54,"code":"    it('should schedule body chunk', () => {\n      writer.write('<body>');\n      return onBodyPromise.then(() => {\n        expect(onBodySpy).to.be.calledOnce;\n        writer.write('<child>');\n        expect(onBodyChunkSpy).to.not.be.called;\n        return waitForNextBodyChunk().then(() => {\n          env.flushVsync();\n          expect(onBodySpy).to.be.calledOnce;\n          expect(onBodyChunkSpy).to.be.calledOnce;\n          expect(win.document.body.querySelector('child')).to.exist;\n          writer.write('</child><child2>');\n          return waitForNextBodyChunk().then(() => {\n            env.flushVsync();\n            expect(win.document.body.querySelector('child2')).to.exist;\n          });\n        });\n      });\n    });","file":"unit/utils/test-dom-writer.js","skipped":false,"dir":"test"},{"name":"should schedule several body chunks together","suites":["DomWriterStreamer"],"updatePoint":{"line":73,"column":52,"index":2454},"line":73,"code":"    it('should schedule several body chunks together', () => {\n      writer.write('<body>');\n      return onBodyPromise.then(() => {\n        expect(onBodySpy).to.be.calledOnce;\n        writer.write('<child></child>');\n        expect(onBodyChunkSpy).to.not.be.called;\n        const promise = waitForNextBodyChunk();\n        writer.write('<child2></child2>');\n        return promise.then(() => {\n          expect(onBodyChunkSpy).to.be.calledOnce;\n          expect(win.document.body.querySelector('child')).to.exist;\n          expect(win.document.body.querySelector('child2')).to.exist;\n        });\n      });\n    });","file":"unit/utils/test-dom-writer.js","skipped":false,"dir":"test"},{"name":"should not parse noscript as markup","suites":["DomWriterStreamer"],"updatePoint":{"line":88,"column":43,"index":3059},"line":88,"code":"    it('should not parse noscript as markup', () => {\n      writer.write('<body><child1></child1><noscript><child2></child2></noscript>');\n      return waitForNextBodyChunk().then(() => {\n        expect(win.document.body.querySelector('child1')).to.exist;\n        expect(win.document.body.querySelector('child2')).not.to.exist;\n        writer.write('<noscript><child3></child3></noscript>');\n        writer.write('<child4></child4>');\n        writer.close();\n        env.flushVsync();\n        return onEndPromise.then(() => {\n          expect(win.document.body.querySelector('child3')).not.to.exist;\n          expect(win.document.body.querySelector('child4')).to.exist;\n        });\n      });\n    });","file":"unit/utils/test-dom-writer.js","skipped":false,"dir":"test"},{"name":"should not parse noscript as markup across writes","suites":["DomWriterStreamer"],"updatePoint":{"line":103,"column":57,"index":3773},"line":103,"code":"    it('should not parse noscript as markup across writes', () => {\n      writer.write('<body><child1></child1><noscript><child2>');\n      return waitForNextBodyChunk().then(() => {\n        expect(win.document.body.querySelector('child1')).to.exist;\n        writer.write('</child2></noscript>');\n        writer.write('<child3></child3>');\n        writer.close();\n        env.flushVsync();\n        return onEndPromise.then(() => {\n          expect(win.document.body.querySelector('child1')).to.exist;\n          expect(win.document.body.querySelector('child2')).not.to.exist;\n          expect(win.document.body.querySelector('child3')).to.exist;\n        });\n      });\n    });","file":"unit/utils/test-dom-writer.js","skipped":false,"dir":"test"},{"name":"should complete when writer has been closed","suites":["DomWriterStreamer"],"updatePoint":{"line":150,"column":49,"index":5257},"line":150,"code":"  it('should complete when writer has been closed', () => {\n    writer.close();\n    return onEndPromise.then(() => {\n      expect(onBodySpy).to.be.calledOnce;\n      env.flushVsync();\n      expect(onBodyChunkSpy).to.not.be.called;\n    });\n  });","file":"unit/utils/test-dom-writer.js","skipped":false,"dir":"test"},{"name":"should wait for body until stream is closed","suites":["DomWriterStreamer"],"updatePoint":{"line":158,"column":49,"index":5501},"line":158,"code":"  it('should wait for body until stream is closed', () => {\n    writer.write('<body class=\"b\">');\n    env.flushVsync();\n    expect(onBodySpy).to.not.be.called;\n    expect(writer.eof_).to.be.false;\n    writer.write('abc');\n    env.flushVsync();\n    expect(onBodySpy).to.not.be.called;\n    expect(writer.eof_).to.be.false;\n    writer.close();\n    env.flushVsync();\n    expect(onBodySpy).to.be.calledOnce;\n    expect(win.document.body.textContent).to.equal('abc');\n    expect(writer.eof_).to.be.true;\n    return Promise.all([onBodyPromise, onEndPromise]);\n  });","file":"unit/utils/test-dom-writer.js","skipped":false,"dir":"test"},{"name":"should process for body chunks together","suites":["DomWriterStreamer"],"updatePoint":{"line":174,"column":45,"index":6056},"line":174,"code":"  it('should process for body chunks together', () => {\n    writer.write('<body class=\"b\">');\n    env.flushVsync();\n    expect(onBodySpy).to.not.be.called;\n    writer.write('<child></child>');\n    env.flushVsync();\n    expect(onBodySpy).to.not.be.called;\n    writer.write('<child2></child2>');\n    env.flushVsync();\n    expect(onBodySpy).to.not.be.called;\n    writer.close();\n    env.flushVsync();\n    expect(onBodySpy).to.be.calledOnce;\n    expect(win.document.body.querySelector('child')).to.exist;\n    expect(win.document.body.querySelector('child2')).to.exist;\n    expect(writer.eof_).to.be.true;\n    return Promise.all([onBodyPromise, onEndPromise]);\n  });","file":"unit/utils/test-dom-writer.js","skipped":false,"dir":"test"},{"name":"should not parse noscript as markup","suites":["DomWriterStreamer"],"updatePoint":{"line":192,"column":41,"index":6714},"line":192,"code":"  it('should not parse noscript as markup', () => {\n    writer.write('<body>');\n    writer.write('<child1></child1><noscript><child2></child2></noscript>');\n    writer.write('<child3></child3>');\n    writer.close();\n    env.flushVsync();\n    expect(win.document.body.querySelector('child1')).to.exist;\n    expect(win.document.body.querySelector('child2')).not.to.exist;\n    expect(win.document.body.querySelector('child3')).to.exist;\n    return Promise.all([onBodyPromise, onEndPromise]);\n  });","file":"unit/utils/test-dom-writer.js","skipped":false,"dir":"test"},{"name":"listen","suites":[],"updatePoint":{"line":55,"column":12,"index":1982},"line":55,"code":"  it('listen', () => {\n    const event = getEvent('load', element);\n    let c = 0;\n    const handler = e => {\n      c++;\n      expect(e).to.equal(event);\n    };\n    const unlisten = listen(element, 'load', handler);\n\n    // Not fired yet.\n    expect(c).to.equal(0);\n\n    // Fired once.\n    loadObservable.fire(event);\n    expect(c).to.equal(1);\n\n    // Fired second time.\n    loadObservable.fire(event);\n    expect(c).to.equal(2);\n    unlisten();\n    loadObservable.fire(event);\n    expect(c).to.equal(2);\n  });","file":"unit/utils/test-event-helper.js","skipped":false,"dir":"test"},{"name":"listenOnce","suites":[],"updatePoint":{"line":78,"column":16,"index":2498},"line":78,"code":"  it('listenOnce', () => {\n    const event = getEvent('load', element);\n    let c = 0;\n    const handler = e => {\n      c++;\n      expect(e).to.equal(event);\n    };\n    listenOnce(element, 'load', handler);\n\n    // Not fired yet.\n    expect(c).to.equal(0);\n\n    // Fired once.\n    loadObservable.fire(event);\n    expect(c).to.equal(1);\n\n    // Fired second time: no longer listening.\n    loadObservable.fire(event);\n    expect(c).to.equal(1);\n  });","file":"unit/utils/test-event-helper.js","skipped":false,"dir":"test"},{"name":"listenOnce - cancel","suites":[],"updatePoint":{"line":98,"column":25,"index":2956},"line":98,"code":"  it('listenOnce - cancel', () => {\n    const event = getEvent('load', element);\n    let c = 0;\n    const handler = e => {\n      c++;\n      expect(e).to.equal(event);\n    };\n    const unlisten = listenOnce(element, 'load', handler);\n\n    // Not fired yet.\n    expect(c).to.equal(0);\n\n    // Cancel.\n    unlisten();\n\n    // Fired once: no longer listening.\n    loadObservable.fire(event);\n    expect(c).to.equal(0);\n  });","file":"unit/utils/test-event-helper.js","skipped":false,"dir":"test"},{"name":"listenOncePromise - load event","suites":[],"updatePoint":{"line":117,"column":36,"index":3388},"line":117,"code":"  it('listenOncePromise - load event', () => {\n    const event = getEvent('load', element);\n    const promise = listenOncePromise(element, 'load').then(result => {\n      expect(result).to.equal(event);\n    });\n    loadObservable.fire(event);\n    return promise;\n  });","file":"unit/utils/test-event-helper.js","skipped":false,"dir":"test"},{"name":"isLoaded for complete property","suites":[],"updatePoint":{"line":125,"column":36,"index":3656},"line":125,"code":"  it('isLoaded for complete property', () => {\n    expect(isLoaded(element)).to.equal(false);\n    element.complete = true;\n    expect(isLoaded(element)).to.equal(true);\n  });","file":"unit/utils/test-event-helper.js","skipped":false,"dir":"test"},{"name":"isLoaded for readyState property","suites":[],"updatePoint":{"line":130,"column":38,"index":3833},"line":130,"code":"  it('isLoaded for readyState property', () => {\n    expect(isLoaded(element)).to.equal(false);\n    element.readyState = 'complete';\n    expect(isLoaded(element)).to.equal(true);\n  });","file":"unit/utils/test-event-helper.js","skipped":false,"dir":"test"},{"name":"isLoaded for Window","suites":[],"updatePoint":{"line":135,"column":25,"index":4005},"line":135,"code":"  it('isLoaded for Window', () => {\n    expect(isLoaded(window)).to.equal(true);\n    const win = {\n      document: {\n        readyState: 'interactive'\n      }\n    };\n    expect(isLoaded(win)).to.equal(false);\n    win.document.readyState = 'complete';\n    expect(isLoaded(win)).to.equal(true);\n  });","file":"unit/utils/test-event-helper.js","skipped":false,"dir":"test"},{"name":"loadPromise - already complete","suites":[],"updatePoint":{"line":146,"column":36,"index":4315},"line":146,"code":"  it('loadPromise - already complete', () => {\n    element.complete = true;\n    return loadPromise(element).then(result => {\n      expect(result).to.equal(element);\n    });\n  });","file":"unit/utils/test-event-helper.js","skipped":false,"dir":"test"},{"name":"loadPromise - already readyState == complete","suites":[],"updatePoint":{"line":152,"column":50,"index":4508},"line":152,"code":"  it('loadPromise - already readyState == complete', () => {\n    element.readyState = 'complete';\n    return loadPromise(element).then(result => {\n      expect(result).to.equal(element);\n    });\n  });","file":"unit/utils/test-event-helper.js","skipped":false,"dir":"test"},{"name":"loadPromise - media element already errored","suites":[],"updatePoint":{"line":158,"column":49,"index":4708},"line":158,"code":"  it('loadPromise - media element already errored', () => {\n    element.tagName = 'VIDEO';\n    element.currentSrc = 'foo.com/video.mp4';\n    element[MEDIA_LOAD_FAILURE_SRC_PROPERTY] = 'foo.com/video.mp4';\n    return loadPromise(element).catch(result => {\n      expect(result).to.equal(element);\n    });\n  });","file":"unit/utils/test-event-helper.js","skipped":false,"dir":"test"},{"name":"loadPromise - media element errored but retries diffent src","suites":[],"updatePoint":{"line":166,"column":65,"index":5033},"line":166,"code":"  it('loadPromise - media element errored but retries diffent src', () => {\n    element.tagName = 'VIDEO';\n    element.src = 'foo.com/video.mp4';\n    element.currentSrc = 'foo.com/video.mp4';\n    element[MEDIA_LOAD_FAILURE_SRC_PROPERTY] = 'bar.com/other-video.mp4';\n    const promise = loadPromise(element).then(result => {\n      expect(result).to.equal(element);\n    });\n    loadObservable.fire(getEvent('loadedmetadata', element));\n    return promise;\n  });","file":"unit/utils/test-event-helper.js","skipped":false,"dir":"test"},{"name":"loadPromise - load event","suites":[],"updatePoint":{"line":177,"column":30,"index":5458},"line":177,"code":"  it('loadPromise - load event', () => {\n    const promise = loadPromise(element).then(result => {\n      expect(result).to.equal(element);\n    });\n    loadObservable.fire(getEvent('load', element));\n    return promise;\n  });","file":"unit/utils/test-event-helper.js","skipped":false,"dir":"test"},{"name":"loadPromise - error event","suites":[],"updatePoint":{"line":184,"column":31,"index":5684},"line":184,"code":"  it('loadPromise - error event', () => {\n    const promise = loadPromise(element).then(result => {\n      assert.fail('must never be here: ' + result);\n    }).then(() => {\n      throw new Error('Should not be reached.');\n    }, reason => {\n      expect(reason.message).to.include('Failed to load');\n    });\n    errorObservable.fire(getEvent('error', element));\n    return promise;\n  });","file":"unit/utils/test-event-helper.js","skipped":false,"dir":"test"},{"name":"loadPromise - error event should mark media element as errored","suites":[],"updatePoint":{"line":195,"column":68,"index":6108},"line":195,"code":"  it('loadPromise - error event should mark media element as errored', () => {\n    element.tagName = 'VIDEO';\n    element.currentSrc = 'foo.com/video.mp4';\n    const promise = loadPromise(element).then(result => {\n      assert.fail('must never be here: ' + result);\n    }).then(() => {\n      throw new Error('Should not be reached.');\n    }, () => {\n      expect(element[MEDIA_LOAD_FAILURE_SRC_PROPERTY]).to.equal(element.currentSrc);\n    });\n    errorObservable.fire(getEvent('error', element));\n    return promise;\n  });","file":"unit/utils/test-event-helper.js","skipped":false,"dir":"test"},{"name":"should polyfill CustomEvent constructor","suites":[],"updatePoint":{"line":208,"column":45,"index":6608},"line":208,"code":"  it('should polyfill CustomEvent constructor', () => {\n    const native = createCustomEvent(window, 'foo', {\n      bar: 123\n    }, {\n      bubbles: true,\n      cancelable: true\n    });\n    expect(native.type).to.equal('foo');\n    expect(native.detail).to.deep.equal({\n      bar: 123\n    });\n    expect(native.bubbles).to.be.true;\n    expect(native.cancelable).to.be.true;\n    const polyfilled = createCustomEvent({\n      document\n    }, 'foo', {\n      bar: 123\n    }, {\n      bubbles: true,\n      cancelable: true\n    });\n    expect(polyfilled.type).to.equal('foo');\n    expect(polyfilled.detail).to.deep.equal({\n      bar: 123\n    });\n    expect(polyfilled.bubbles).to.be.true;\n    expect(polyfilled.cancelable).to.be.true;\n  });","file":"unit/utils/test-event-helper.js","skipped":false,"dir":"test"},{"name":"should create the correct custom event for IE11","suites":[],"updatePoint":{"line":236,"column":53,"index":7348},"line":236,"code":"  it('should create the correct custom event for IE11', () => {\n    const native = createCustomEvent(window, 'foo', {\n      bar: 123\n    });\n    expect(native.type).to.equal('foo');\n    expect(native.detail).to.deep.equal({\n      bar: 123\n    });\n    const initCustomEventSpy = env.sandbox.spy();\n    const win = {};\n    win.CustomEvent = {};\n    win.document = {};\n    win.document.createEvent = function () {\n      return {\n        initCustomEvent() {\n          initCustomEventSpy();\n        }\n      };\n    };\n    createCustomEvent(win, 'foo', {\n      bar: 123\n    });\n    expect(initCustomEventSpy).to.be.calledOnce;\n  });","file":"unit/utils/test-event-helper.js","skipped":false,"dir":"test"},{"name":"should detect when addEventListener options are supported","suites":[],"updatePoint":{"line":260,"column":63,"index":7984},"line":260,"code":"  it('should detect when addEventListener options are supported', () => {\n    const eventListenerStubAcceptOpts = (type, listener, options) => {\n      const getCapture = options.capture;\n      if (getCapture) {\n        // Added to bypass linter (never used warning)\n      }\n    };\n    // Simulate an addEventListener that accepts options\n    addEventListenerStub = env.sandbox.stub(self, 'addEventListener').callsFake(eventListenerStubAcceptOpts);\n    // Simulate a removeEventListener that accepts options\n    removeEventListenerStub = env.sandbox.stub(self, 'removeEventListener').callsFake(eventListenerStubAcceptOpts);\n    resetEvtListenerOptsSupportForTesting();\n    expect(detectEvtListenerOptsSupport()).to.be.true;\n    expect(addEventListenerStub.called).to.be.true;\n    expect(removeEventListenerStub.called).to.be.true;\n    resetEvtListenerOptsSupportForTesting();\n  });","file":"unit/utils/test-event-helper.js","skipped":false,"dir":"test"},{"name":"should cache the result of the test and only do it once","suites":[],"updatePoint":{"line":277,"column":61,"index":8863},"line":277,"code":"  it('should cache the result of the test and only do it once', () => {\n    resetEvtListenerOptsSupportForTesting();\n    expect(detectEvtListenerOptsSupport()).to.be.true;\n    expect(addEventListenerStub.called).to.be.true;\n    expect(removeEventListenerStub.called).to.be.true;\n    expect(detectEvtListenerOptsSupport()).to.be.true;\n    expect(addEventListenerStub.calledOnce).to.be.true;\n    expect(removeEventListenerStub.calledOnce).to.be.true;\n  });","file":"unit/utils/test-event-helper.js","skipped":false,"dir":"test"},{"name":"should detect when addEventListener options are not supported","suites":[],"updatePoint":{"line":286,"column":67,"index":9324},"line":286,"code":"  it('should detect when addEventListener options are not supported', () => {\n    const eventListenerStubRejectOpts = (type, listener, capture) => {\n      const getCapture = capture;\n      if (getCapture) {\n        // Added to bypass linter (never used warning)\n      }\n    };\n    // Simulate an addEventListener that does not accept options\n    addEventListenerStub = env.sandbox.stub(self, 'addEventListener').callsFake(eventListenerStubRejectOpts);\n    // Simulate a removeEventListener that does not accept options\n    removeEventListenerStub = env.sandbox.stub(self, 'removeEventListener').callsFake(eventListenerStubRejectOpts);\n    resetEvtListenerOptsSupportForTesting();\n    expect(detectEvtListenerOptsSupport()).to.be.false;\n    expect(addEventListenerStub.called).to.be.true;\n    expect(removeEventListenerStub.called).to.be.true;\n    expect(detectEvtListenerOptsSupport()).to.be.false;\n    expect(removeEventListenerStub.calledOnce).to.be.true;\n  });","file":"unit/utils/test-event-helper.js","skipped":false,"dir":"test"},{"name":"should return true when supported","suites":[],"updatePoint":{"line":321,"column":39,"index":10850},"line":321,"code":"  it('should return true when supported', () => {\n    overrideEventListeners(true);\n    const passiveSupported = supportsPassiveEventListener(win);\n    expect(passiveSupported).to.be.true;\n  });","file":"unit/utils/test-event-helper.js","skipped":false,"dir":"test"},{"name":"should return false when not supported","suites":[],"updatePoint":{"line":326,"column":44,"index":11050},"line":326,"code":"  it('should return false when not supported', () => {\n    overrideEventListeners(false);\n    const passiveSupported = supportsPassiveEventListener(win);\n    expect(passiveSupported).to.be.false;\n  });","file":"unit/utils/test-event-helper.js","skipped":false,"dir":"test"},{"name":"should be enabled when directly allowed","suites":["Level"],"updatePoint":{"line":36,"column":47,"index":1155},"line":36,"code":"    it('should be enabled when directly allowed', () => {\n      expect(new Log(win, RETURNS_FINE).level_).to.equal(LogLevel_Enum.FINE);\n    });","file":"unit/utils/test-log.js","skipped":false,"dir":"test"},{"name":"should be disabled when directly disallowed","suites":["Level"],"updatePoint":{"line":39,"column":51,"index":1303},"line":39,"code":"    it('should be disabled when directly disallowed', () => {\n      expect(new Log(win, RETURNS_OFF).level_).to.equal(LogLevel_Enum.OFF);\n    });","file":"unit/utils/test-log.js","skipped":false,"dir":"test"},{"name":"should be disabled with no console","suites":["Level"],"updatePoint":{"line":42,"column":42,"index":1440},"line":42,"code":"    it('should be disabled with no console', () => {\n      win.console.log = null;\n      expect(new Log(win, RETURNS_FINE).level_).to.equal(LogLevel_Enum.OFF);\n      win.console = null;\n      expect(new Log(win, RETURNS_FINE).level_).to.equal(LogLevel_Enum.OFF);\n    });","file":"unit/utils/test-log.js","skipped":false,"dir":"test"},{"name":"should be disabled with hash param log=0","suites":["Level"],"updatePoint":{"line":48,"column":48,"index":1717},"line":48,"code":"    it('should be disabled with hash param log=0', () => {\n      win.location.hash = '#log=0';\n      expect(new Log(win, RETURNS_FINE).level_).to.equal(LogLevel_Enum.OFF);\n    });","file":"unit/utils/test-log.js","skipped":false,"dir":"test"},{"name":"should be enabled when forced for tests","suites":["Level"],"updatePoint":{"line":52,"column":47,"index":1896},"line":52,"code":"    it('should be enabled when forced for tests', () => {\n      mode.test = true;\n      win.ENABLE_LOG = true;\n      expect(new Log(win, RETURNS_OFF).level_).to.equal(LogLevel_Enum.FINE);\n    });","file":"unit/utils/test-log.js","skipped":false,"dir":"test"},{"name":"should be enabled as INFO when forced for localDev","suites":["Level"],"updatePoint":{"line":57,"column":58,"index":2103},"line":57,"code":"    it('should be enabled as INFO when forced for localDev', () => {\n      mode.localDev = true;\n      expect(new Log(win, RETURNS_OFF).level_).to.equal(LogLevel_Enum.INFO);\n    });","file":"unit/utils/test-log.js","skipped":false,"dir":"test"},{"name":"should log correctly for FINE","suites":["Level messages"],"updatePoint":{"line":63,"column":37,"index":2307},"line":63,"code":"    it('should log correctly for FINE', () => {\n      const log = new Log(win, RETURNS_FINE);\n      expect(log.level_).to.equal(LogLevel_Enum.FINE);\n      log.fine('test-log', 'fine');\n      log.info('test-log', 'info');\n      log.warn('test-log', 'warn');\n      log.error('test-log', 'error');\n      expect(logSpy).to.have.callCount(4);\n      expect(logSpy.getCall(0)).to.be.calledWith('[test-log] fine');\n      expect(logSpy.getCall(1)).to.be.calledWith('[test-log] info');\n      expect(logSpy.getCall(2)).to.be.calledWith('[test-log] warn');\n      expect(logSpy.getCall(3)).to.be.calledWith('[test-log] error');\n      expect(timeoutSpy).to.have.not.been.called;\n    });","file":"unit/utils/test-log.js","skipped":false,"dir":"test"},{"name":"should log correctly for INFO","suites":["Level messages"],"updatePoint":{"line":77,"column":37,"index":2980},"line":77,"code":"    it('should log correctly for INFO', () => {\n      const log = new Log(win, RETURNS_INFO);\n      expect(log.level_).to.equal(LogLevel_Enum.INFO);\n      log.fine('test-log', 'fine');\n      log.info('test-log', 'info');\n      log.warn('test-log', 'warn');\n      log.error('test-log', 'error');\n      expect(logSpy).to.have.callCount(3);\n      expect(logSpy.getCall(0)).to.be.calledWith('[test-log] info');\n      expect(logSpy.getCall(1)).to.be.calledWith('[test-log] warn');\n      expect(logSpy.getCall(2)).to.be.calledWith('[test-log] error');\n      expect(timeoutSpy).to.have.not.been.called;\n    });","file":"unit/utils/test-log.js","skipped":false,"dir":"test"},{"name":"should log correctly for WARN","suites":["Level messages"],"updatePoint":{"line":90,"column":37,"index":3584},"line":90,"code":"    it('should log correctly for WARN', () => {\n      const log = new Log(win, RETURNS_WARN);\n      expect(log.level_).to.equal(LogLevel_Enum.WARN);\n      log.fine('test-log', 'fine');\n      log.info('test-log', 'info');\n      log.warn('test-log', 'warn');\n      log.error('test-log', 'error');\n      expect(logSpy).to.have.callCount(2);\n      expect(logSpy.getCall(0)).to.be.calledWith('[test-log] warn');\n      expect(logSpy.getCall(1)).to.be.calledWith('[test-log] error');\n      expect(timeoutSpy).to.have.not.been.called;\n    });","file":"unit/utils/test-log.js","skipped":false,"dir":"test"},{"name":"should log correctly for ERROR","suites":["Level messages"],"updatePoint":{"line":102,"column":38,"index":4120},"line":102,"code":"    it('should log correctly for ERROR', () => {\n      const log = new Log(win, RETURNS_ERROR);\n      expect(log.level_).to.equal(LogLevel_Enum.ERROR);\n      log.fine('test-log', 'fine');\n      log.info('test-log', 'info');\n      log.warn('test-log', 'warn');\n      log.error('test-log', 'error');\n      expect(logSpy).to.be.calledOnce;\n      expect(logSpy).to.be.calledWith('[test-log] error');\n      expect(timeoutSpy).to.have.not.been.called;\n    });","file":"unit/utils/test-log.js","skipped":false,"dir":"test"},{"name":"should report ERROR even when OFF and coallesce messages","suites":["Level messages"],"updatePoint":{"line":113,"column":64,"index":4600},"line":113,"code":"    it('should report ERROR even when OFF and coallesce messages', () => {\n      const log = new Log(win, RETURNS_OFF);\n      expect(log.level_).to.equal(LogLevel_Enum.OFF);\n      let reportedError;\n      setReportError(function (e) {\n        reportedError = e;\n      });\n      log.error('TAG', 'intended', new Error('test'));\n      expect(reportedError).to.be.instanceof(Error);\n      expect(reportedError.message).to.match(/intended\\: test/);\n      expect(reportedError.expected).to.be.undefined;\n      expect(isUserErrorMessage(reportedError.message)).to.be.false;\n    });","file":"unit/utils/test-log.js","skipped":false,"dir":"test"},{"name":"should report ERROR and mark with expected flag","suites":["Level messages"],"updatePoint":{"line":126,"column":55,"index":5167},"line":126,"code":"    it('should report ERROR and mark with expected flag', () => {\n      const log = new Log(win, RETURNS_OFF);\n      expect(log.level_).to.equal(LogLevel_Enum.OFF);\n      let reportedError;\n      setReportError(function (e) {\n        reportedError = e;\n      });\n      log.expectedError('TAG', 'intended', new Error('test'));\n      expect(reportedError).to.be.instanceof(Error);\n      expect(reportedError.message).to.match(/intended\\: test/);\n      expect(reportedError.expected).to.be.true;\n    });","file":"unit/utils/test-log.js","skipped":false,"dir":"test"},{"name":"should report ERROR when OFF from a single message","suites":["Level messages"],"updatePoint":{"line":138,"column":58,"index":5671},"line":138,"code":"    it('should report ERROR when OFF from a single message', () => {\n      const log = new Log(win, RETURNS_OFF);\n      expect(log.level_).to.equal(LogLevel_Enum.OFF);\n      let reportedError;\n      setReportError(function (e) {\n        reportedError = e;\n      });\n      log.error('TAG', 'intended');\n      expect(reportedError).to.be.instanceof(Error);\n      expect(reportedError.message).to.match(/intended/);\n      expect(isUserErrorMessage(reportedError.message)).to.be.false;\n    });","file":"unit/utils/test-log.js","skipped":false,"dir":"test"},{"name":"should report ERROR when OFF from a single error object","suites":["Level messages"],"updatePoint":{"line":150,"column":63,"index":6166},"line":150,"code":"    it('should report ERROR when OFF from a single error object', () => {\n      const log = new Log(win, RETURNS_OFF);\n      expect(log.level_).to.equal(LogLevel_Enum.OFF);\n      let reportedError;\n      setReportError(function (e) {\n        reportedError = e;\n      });\n      log.error('TAG', new Error('test'));\n      expect(reportedError).to.be.instanceof(Error);\n      expect(reportedError.message).to.match(/test/);\n      expect(isUserErrorMessage(reportedError.message)).to.be.false;\n    });","file":"unit/utils/test-log.js","skipped":false,"dir":"test"},{"name":"should be WARN by default","suites":["UserLog"],"updatePoint":{"line":164,"column":33,"index":6670},"line":164,"code":"    it('should be WARN by default', () => {\n      expect(user().defaultLevelWithFunc_()).to.equal(LogLevel_Enum.WARN);\n    });","file":"unit/utils/test-log.js","skipped":false,"dir":"test"},{"name":"should be enabled in development mode","suites":["UserLog"],"updatePoint":{"line":167,"column":45,"index":6809},"line":167,"code":"    it('should be enabled in development mode', () => {\n      mode.development = true;\n      expect(user().defaultLevelWithFunc_()).to.equal(LogLevel_Enum.FINE);\n    });","file":"unit/utils/test-log.js","skipped":false,"dir":"test"},{"name":"should be enabled with log=1","suites":["UserLog"],"updatePoint":{"line":171,"column":36,"index":6970},"line":171,"code":"    it('should be enabled with log=1', () => {\n      win.location.hash = '#log=1';\n      expect(user().defaultLevelWithFunc_(win)).to.equal(LogLevel_Enum.FINE);\n    });","file":"unit/utils/test-log.js","skipped":false,"dir":"test"},{"name":"should be enabled with log>1","suites":["UserLog"],"updatePoint":{"line":175,"column":36,"index":7139},"line":175,"code":"    it('should be enabled with log>1', () => {\n      win.location.hash = '#log=2';\n      expect(user().defaultLevelWithFunc_(win)).to.equal(LogLevel_Enum.FINE);\n      win.location.hash = '#log=3';\n      expect(user().defaultLevelWithFunc_(win)).to.equal(LogLevel_Enum.FINE);\n      win.location.hash = '#log=4';\n      expect(user().defaultLevelWithFunc_(win)).to.equal(LogLevel_Enum.FINE);\n    });","file":"unit/utils/test-log.js","skipped":false,"dir":"test"},{"name":"should be configured with USER suffix","suites":["UserLog"],"updatePoint":{"line":183,"column":45,"index":7545},"line":183,"code":"    it('should be configured with USER suffix', () => {\n      expect(user().suffix_).to.equal(USER_ERROR_SENTINEL);\n    });","file":"unit/utils/test-log.js","skipped":false,"dir":"test"},{"name":"should be disabled by default","suites":["DevLog"],"updatePoint":{"line":188,"column":37,"index":7696},"line":188,"code":"    it('should be disabled by default', () => {\n      expect(dev().defaultLevelWithFunc_()).to.equal(LogLevel_Enum.OFF);\n    });","file":"unit/utils/test-log.js","skipped":false,"dir":"test"},{"name":"should NOT be enabled in development mode","suites":["DevLog"],"updatePoint":{"line":191,"column":49,"index":7837},"line":191,"code":"    it('should NOT be enabled in development mode', () => {\n      mode.development = true;\n      expect(dev().defaultLevelWithFunc_()).to.equal(LogLevel_Enum.OFF);\n    });","file":"unit/utils/test-log.js","skipped":false,"dir":"test"},{"name":"should NOT be enabled with log=1","suites":["DevLog"],"updatePoint":{"line":195,"column":40,"index":8000},"line":195,"code":"    it('should NOT be enabled with log=1', () => {\n      win.location.hash = '#log=1';\n      expect(dev().defaultLevelWithFunc_(win)).to.equal(LogLevel_Enum.OFF);\n    });","file":"unit/utils/test-log.js","skipped":false,"dir":"test"},{"name":"should be enabled as INFO with log=2","suites":["DevLog"],"updatePoint":{"line":199,"column":44,"index":8175},"line":199,"code":"    it('should be enabled as INFO with log=2', () => {\n      win.location.hash = '#log=2';\n      expect(dev().defaultLevelWithFunc_(win)).to.equal(LogLevel_Enum.INFO);\n    });","file":"unit/utils/test-log.js","skipped":false,"dir":"test"},{"name":"should be enabled as FINE with log=3","suites":["DevLog"],"updatePoint":{"line":203,"column":44,"index":8351},"line":203,"code":"    it('should be enabled as FINE with log=3', () => {\n      win.location.hash = '#log=3';\n      expect(dev().defaultLevelWithFunc_(win)).to.equal(LogLevel_Enum.FINE);\n    });","file":"unit/utils/test-log.js","skipped":false,"dir":"test"},{"name":"should be configured with no suffix","suites":["DevLog"],"updatePoint":{"line":207,"column":43,"index":8526},"line":207,"code":"    it('should be configured with no suffix', () => {\n      expect(dev().suffix_).to.equal('');\n    });","file":"unit/utils/test-log.js","skipped":false,"dir":"test"},{"name":"should fail","suites":["asserts"],"updatePoint":{"line":216,"column":19,"index":8747},"line":216,"code":"    it('should fail', () => {\n      expect(function () {\n        log.assert(false, 'xyz');\n      }).to.throw(/xyz/);\n      try {\n        log.assert(false, '123');\n      } catch (e) {\n        expect(e.message).to.equal('123' + USER_ERROR_SENTINEL);\n        return;\n      }\n      // Unreachable\n      expect(false).to.be.true;\n    });","file":"unit/utils/test-log.js","skipped":false,"dir":"test"},{"name":"should not fail","suites":["asserts"],"updatePoint":{"line":229,"column":23,"index":9084},"line":229,"code":"    it('should not fail', () => {\n      log.assert(true, 'True!');\n      log.assert(1, '1');\n      log.assert('abc', 'abc');\n    });","file":"unit/utils/test-log.js","skipped":false,"dir":"test"},{"name":"should not fail direct dev","suites":["asserts"],"updatePoint":{"line":234,"column":34,"index":9228},"line":234,"code":"    it('should not fail direct dev', () => {\n      devAssert(true, 'True!');\n      devAssert(1, '1');\n      devAssert('abc', 'abc');\n    });","file":"unit/utils/test-log.js","skipped":false,"dir":"test"},{"name":"should not fail direct user","suites":["asserts"],"updatePoint":{"line":239,"column":35,"index":9370},"line":239,"code":"    it('should not fail direct user', () => {\n      userAssert(true, 'True!');\n      userAssert(1, '1');\n      userAssert('abc', 'abc');\n    });","file":"unit/utils/test-log.js","skipped":false,"dir":"test"},{"name":"should fail direct dev","suites":["asserts"],"updatePoint":{"line":244,"column":30,"index":9510},"line":244,"code":"    it('should fail direct dev', () => {\n      expect(function () {\n        devAssert(false, 'xyz');\n      }).to.throw(/xyz/);\n      try {\n        devAssert(false, '123');\n      } catch (e) {\n        expect(e.message).to.equal('123');\n        return;\n      }\n      // Unreachable\n      expect(false).to.be.true;\n    });","file":"unit/utils/test-log.js","skipped":false,"dir":"test"},{"name":"should fail direct user","suites":["asserts"],"updatePoint":{"line":257,"column":31,"index":9831},"line":257,"code":"    it('should fail direct user', () => {\n      expect(function () {\n        userAssert(false, 'xyz');\n      }).to.throw(/xyz/);\n      try {\n        userAssert(false, '123');\n      } catch (e) {\n        expect(e.message).to.equal('123' + USER_ERROR_SENTINEL);\n        return;\n      }\n      // Unreachable\n      expect(false).to.be.true;\n    });","file":"unit/utils/test-log.js","skipped":false,"dir":"test"},{"name":"should substitute","suites":["asserts"],"updatePoint":{"line":270,"column":25,"index":10170},"line":270,"code":"    it('should substitute', () => {\n      expect(function () {\n        log.assert(false, 'should fail %s', 'XYZ');\n      }).to.throw(/should fail XYZ/);\n      expect(function () {\n        log.assert(false, 'should fail %s %s', 'XYZ', 'YYY');\n      }).to.throw(/should fail XYZ YYY/);\n      const div = document.createElement('div');\n      div.id = 'abc';\n      div.textContent = 'foo';\n      expect(function () {\n        log.assert(false, 'should fail %s', div);\n      }).to.throw(/should fail div#abc/);\n      let error;\n      try {\n        log.assert(false, '%s a %s b %s', 1, 2, 3);\n      } catch (e) {\n        error = e;\n      }\n      expect(error).to.be.instanceof(Error);\n      expect(error.message).to.equal('1 a 2 b 3' + USER_ERROR_SENTINEL);\n      expect(error.messageArray).to.deep.equal([1, 'a', 2, 'b', 3, USER_ERROR_SENTINEL]);\n    });","file":"unit/utils/test-log.js","skipped":false,"dir":"test"},{"name":"should add element and assert info","suites":["asserts"],"updatePoint":{"line":293,"column":42,"index":11036},"line":293,"code":"    it('should add element and assert info', () => {\n      const div = document.createElement('div');\n      let error;\n      try {\n        log.assert(false, '%s a %s b %s', div, 2, 3);\n      } catch (e) {\n        error = e;\n      }\n      expect(error).to.be.instanceof(Error);\n      expect(error.messageArray[0]).to.equal(div);\n    });","file":"unit/utils/test-log.js","skipped":false,"dir":"test"},{"name":"should recognize asserts","suites":["asserts"],"updatePoint":{"line":304,"column":32,"index":11362},"line":304,"code":"    it('should recognize asserts', () => {\n      try {\n        log.assert(false, '123');\n      } catch (e) {\n        expect(isUserErrorMessage(e.message)).to.be.true;\n        return;\n      }\n      // Unreachable\n      expect(false).to.be.true;\n    });","file":"unit/utils/test-log.js","skipped":false,"dir":"test"},{"name":"should recognize non-asserts","suites":["asserts"],"updatePoint":{"line":314,"column":36,"index":11618},"line":314,"code":"    it('should recognize non-asserts', () => {\n      try {\n        throw new Error('123');\n      } catch (e) {\n        expect(isUserErrorMessage(e.message)).to.be.false;\n        return;\n      }\n      // Unreachable\n      expect(false).to.be.true;\n    });","file":"unit/utils/test-log.js","skipped":false,"dir":"test"},{"name":"should create expected error from message","suites":["asserts"],"updatePoint":{"line":324,"column":49,"index":11886},"line":324,"code":"    it('should create expected error from message', () => {\n      const error = log.createExpectedError('test');\n      expect(error).to.be.instanceof(Error);\n      expect(error.expected).to.be.true;\n    });","file":"unit/utils/test-log.js","skipped":false,"dir":"test"},{"name":"should create suffixed errors from message","suites":["asserts"],"updatePoint":{"line":329,"column":50,"index":12094},"line":329,"code":"    it('should create suffixed errors from message', () => {\n      const error = log.createError('test');\n      expect(error.expected).to.be.undefined;\n      expect(error).to.be.instanceof(Error);\n      expect(isUserErrorMessage(error.message)).to.be.true;\n      expect(error.message).to.equal('test' + USER_ERROR_SENTINEL);\n    });","file":"unit/utils/test-log.js","skipped":false,"dir":"test"},{"name":"should create suffixed errors from error","suites":["asserts"],"updatePoint":{"line":336,"column":48,"index":12425},"line":336,"code":"    it('should create suffixed errors from error', () => {\n      const error = log.createError(new Error('test'));\n      expect(error).to.be.instanceof(Error);\n      expect(isUserErrorMessage(error.message)).to.be.true;\n      expect(error.message).to.equal('test' + USER_ERROR_SENTINEL);\n    });","file":"unit/utils/test-log.js","skipped":false,"dir":"test"},{"name":"should only add suffix once","suites":["asserts"],"updatePoint":{"line":342,"column":35,"index":12708},"line":342,"code":"    it('should only add suffix once', () => {\n      const error = log.createError(new Error('test' + USER_ERROR_SENTINEL));\n      expect(error).to.be.instanceof(Error);\n      expect(isUserErrorMessage(error.message)).to.be.true;\n      expect(error.message).to.equal('test' + USER_ERROR_SENTINEL);\n    });","file":"unit/utils/test-log.js","skipped":false,"dir":"test"},{"name":"should strip suffix if not available","suites":["asserts"],"updatePoint":{"line":348,"column":44,"index":13022},"line":348,"code":"    it('should strip suffix if not available', () => {\n      const error = log.createError(new Error('test'));\n      expect(isUserErrorMessage(error.message)).to.be.true;\n      const noSuffixLog = new Log(win, RETURNS_FINE);\n      noSuffixLog.createError(error);\n      expect(isUserErrorMessage(error.message)).to.be.false;\n    });","file":"unit/utils/test-log.js","skipped":false,"dir":"test"},{"name":"should create other-suffixed errors","suites":["asserts"],"updatePoint":{"line":355,"column":43,"index":13353},"line":355,"code":"    it('should create other-suffixed errors', () => {\n      log = new Log(win, RETURNS_FINE, '-other');\n      const error = log.createError('test');\n      expect(error).to.be.instanceof(Error);\n      expect(isUserErrorMessage(error.message)).to.be.false;\n      expect(error.message).to.equal('test-other');\n    });","file":"unit/utils/test-log.js","skipped":false,"dir":"test"},{"name":"should pass for elements","suites":["asserts"],"updatePoint":{"line":362,"column":32,"index":13657},"line":362,"code":"    it('should pass for elements', () => {\n      log.assertElement(document.documentElement);\n      const element = document.createElement('element');\n      const ret = log.assertElement(element);\n      expect(ret).to.equal(element);\n    });","file":"unit/utils/test-log.js","skipped":false,"dir":"test"},{"name":"should should identify non-elements","suites":["asserts"],"updatePoint":{"line":368,"column":43,"index":13910},"line":368,"code":"    it('should should identify non-elements', () => {\n      expect(() => {\n        log.assertElement(document);\n      }).to.throw(/Element expected: /);\n      expect(() => {\n        log.assertElement(null);\n      }).to.throw(/Element expected: null/);\n      expect(() => {\n        log.assertElement(null, 'custom error');\n      }).to.throw(/custom error: null/);\n    });","file":"unit/utils/test-log.js","skipped":false,"dir":"test"},{"name":"should return non-empty string","suites":["assertString"],"updatePoint":{"line":385,"column":38,"index":14401},"line":385,"code":"    it('should return non-empty string', () => {\n      expect(log.assertString('a')).to.equal('a');\n    });","file":"unit/utils/test-log.js","skipped":false,"dir":"test"},{"name":"should return empty string","suites":["assertString"],"updatePoint":{"line":388,"column":34,"index":14505},"line":388,"code":"    it('should return empty string', () => {\n      expect(log.assertString('')).to.equal('');\n    });","file":"unit/utils/test-log.js","skipped":false,"dir":"test"},{"name":"should fail with on non string","suites":["assertString"],"updatePoint":{"line":391,"column":38,"index":14611},"line":391,"code":"    it('should fail with on non string', () => {\n      expect(() => log.assertString({})).to.throw('String expected: ');\n      expect(() => log.assertString(3)).to.throw('String expected: ');\n      expect(() => log.assertString(null)).to.throw('String expected: ');\n      expect(() => log.assertString(undefined)).to.throw('String expected: ');\n      expect(() => log.assertString([])).to.throw('String expected: ');\n    });","file":"unit/utils/test-log.js","skipped":false,"dir":"test"},{"name":"should return the number value","suites":["assertNumber"],"updatePoint":{"line":404,"column":38,"index":15161},"line":404,"code":"    it('should return the number value', () => {\n      expect(log.assertNumber(3)).to.equal(3);\n    });","file":"unit/utils/test-log.js","skipped":false,"dir":"test"},{"name":"should return zero","suites":["assertNumber"],"updatePoint":{"line":407,"column":26,"index":15253},"line":407,"code":"    it('should return zero', () => {\n      expect(log.assertNumber(0)).to.equal(0);\n    });","file":"unit/utils/test-log.js","skipped":false,"dir":"test"},{"name":"should return NaN","suites":["assertNumber"],"updatePoint":{"line":410,"column":25,"index":15344},"line":410,"code":"    it('should return NaN', () => {\n      expect(log.assertNumber(NaN)).to.be.NaN;\n    });","file":"unit/utils/test-log.js","skipped":false,"dir":"test"},{"name":"should fail with on non number","suites":["assertNumber"],"updatePoint":{"line":413,"column":38,"index":15448},"line":413,"code":"    it('should fail with on non number', () => {\n      expect(() => log.assertNumber({})).to.throw('Number expected: ');\n      expect(() => log.assertNumber('a')).to.throw('Number expected: ');\n      expect(() => log.assertNumber(null)).to.throw('Number expected: ');\n      expect(() => log.assertNumber(undefined)).to.throw('Number expected: ');\n      expect(() => log.assertNumber([])).to.throw('Number expected: ');\n    });","file":"unit/utils/test-log.js","skipped":false,"dir":"test"},{"name":"should return the array value","suites":["assertArray"],"updatePoint":{"line":426,"column":37,"index":15998},"line":426,"code":"    it('should return the array value', () => {\n      const array = [1, 2, 3];\n      expect(log.assertArray(array)).to.equal(array);\n    });","file":"unit/utils/test-log.js","skipped":false,"dir":"test"},{"name":"should return empty array","suites":["assertArray"],"updatePoint":{"line":430,"column":33,"index":16135},"line":430,"code":"    it('should return empty array', () => {\n      expect(log.assertArray([])).to.deep.equal([]);\n    });","file":"unit/utils/test-log.js","skipped":false,"dir":"test"},{"name":"should fail with non-array values","suites":["assertArray"],"updatePoint":{"line":433,"column":41,"index":16248},"line":433,"code":"    it('should fail with non-array values', () => {\n      expect(() => log.assertArray('a')).to.throw('Array expected: a');\n      expect(() => log.assertArray(1)).to.throw('Array expected: 1');\n    });","file":"unit/utils/test-log.js","skipped":false,"dir":"test"},{"name":"reuse errors","suites":["error"],"updatePoint":{"line":447,"column":20,"index":16648},"line":447,"code":"    it('reuse errors', () => {\n      let error = new Error('test');\n      log.error('TAG', error);\n      expect(reportedError).to.equal(error);\n      expect(error.message).to.equal('test');\n      log.error('TAG', 'should fail', 'XYZ', error);\n      expect(reportedError).to.equal(error);\n      expect(error.message).to.equal('should fail XYZ: test');\n\n      // #8917\n      try {\n        // This is an intentionally bad query selector\n        document.body.querySelector('#');\n      } catch (e) {\n        error = e;\n      }\n      log.error('TAG', error);\n      expect(reportedError).not.to.equal(error);\n      expect(reportedError.message).to.equal(error.message);\n      log.error('TAG', 'should fail', 'XYZ', error);\n      expect(reportedError).not.to.equal(error);\n      expect(reportedError.message).to.contain('should fail XYZ:');\n    });","file":"unit/utils/test-log.js","skipped":false,"dir":"test"},{"name":"should return logger for user-error","suites":["embed error"],"updatePoint":{"line":483,"column":43,"index":17814},"line":483,"code":"    it('should return logger for user-error', () => {\n      const error = user().createError();\n      expect(isUserErrorEmbedMessage(error.message)).to.be.false;\n      expect(isUserErrorMessage(error.message)).to.be.true;\n    });","file":"unit/utils/test-log.js","skipped":false,"dir":"test"},{"name":"should return logger for embed-error","suites":["embed error"],"updatePoint":{"line":488,"column":44,"index":18045},"line":488,"code":"    it('should return logger for embed-error', () => {\n      element = document.createElement('embed');\n      iframe.contentWindow.document.body.appendChild(element);\n      const error = user(element).createError();\n      expect(isUserErrorEmbedMessage(error.message)).to.be.true;\n    });","file":"unit/utils/test-log.js","skipped":false,"dir":"test"},{"name":"should not create extra identical loggers","suites":["embed error"],"updatePoint":{"line":494,"column":49,"index":18339},"line":494,"code":"    it('should not create extra identical loggers', () => {\n      element = document.createElement('embed');\n      element1 = document.createElement('embed_1');\n      element2 = document.createElement('embed_2');\n      iframe.contentWindow.document.body.appendChild(element1);\n      iframe.contentWindow.document.body.appendChild(element2);\n      expect(user()).to.equal(user(element));\n      expect(user(element1)).to.equal(user(element2));\n      expect(user()).to.not.equal(user(element1));\n    });","file":"unit/utils/test-log.js","skipped":false,"dir":"test"},{"name":"returns url without args","suites":["expandMessageArgs with URL"],"updatePoint":{"line":511,"column":32,"index":19028},"line":511,"code":"    it('returns url without args', () => {\n      const id = 'foo';\n      const queryRe = `id=${id}`;\n      const expectedRe = new RegExp(`${prefixRe}${queryRe}$`);\n      const messageArgs = log.expandMessageArgs_([id]);\n      expect(messageArgs).to.have.lengthOf(1);\n      const message = messageArgs[0];\n      expect(expectedRe.test(message), `${expectedRe}.test('${message}')`).to.be.true;\n    });","file":"unit/utils/test-log.js","skipped":false,"dir":"test"},{"name":"returns url with one arg","suites":["expandMessageArgs with URL"],"updatePoint":{"line":520,"column":32,"index":19428},"line":520,"code":"    it('returns url with one arg', () => {\n      const id = 'foo';\n      const arg1 = 'bar';\n      const queryRe = `id=${id}&s\\\\[\\\\]=${arg1}`;\n      const expectedRe = new RegExp(`${prefixRe}${queryRe}$`);\n      const messageArgs = log.expandMessageArgs_([id, arg1]);\n      expect(messageArgs).to.have.lengthOf(1);\n      const message = messageArgs[0];\n      expect(expectedRe.test(message), `${expectedRe}.test('${message}')`).to.be.true;\n    });","file":"unit/utils/test-log.js","skipped":false,"dir":"test"},{"name":"returns url with many args","suites":["expandMessageArgs with URL"],"updatePoint":{"line":530,"column":34,"index":19878},"line":530,"code":"    it('returns url with many args', () => {\n      const id = 'foo';\n      const arg1 = 'bar';\n      const arg2 = 'baz';\n      const arg3 = 'taquitos';\n      const queryRe = `id=${id}&s\\\\[\\\\]=${arg1}&s\\\\[\\\\]=${arg2}&s\\\\[\\\\]=${arg3}`;\n      const expectedRe = new RegExp(`${prefixRe}${queryRe}$`);\n      const messageArgs = log.expandMessageArgs_([id, arg1, arg2, arg3]);\n      expect(messageArgs).to.have.lengthOf(1);\n      const message = messageArgs[0];\n      expect(expectedRe.test(message), `${expectedRe}.test('${message}')`).to.be.true;\n    });","file":"unit/utils/test-log.js","skipped":false,"dir":"test"},{"name":"displays URL for assertString without messages","suites":["Extracted messages by ids"],"updatePoint":{"line":559,"column":54,"index":20919},"line":559,"code":"    it('displays URL for assertString without messages', () => {\n      mockExternalMessages(null);\n      const notString = false;\n      expect(() => log.assertString(notString, ['a'])).to.throw(/\\?v=.+&id=a&s\\[\\]=false$/);\n    });","file":"unit/utils/test-log.js","skipped":false,"dir":"test"},{"name":"expands message from table for assertString","suites":["Extracted messages by ids"],"updatePoint":{"line":564,"column":51,"index":21147},"line":564,"code":"    it('expands message from table for assertString', () => {\n      mockExternalMessages({\n        'a': 'Foo: %s',\n        'foo': 'irrelevant'\n      });\n      const notString = false;\n      expect(() => log.assertString(notString, ['a'])).to.throw(/Foo: false/);\n    });","file":"unit/utils/test-log.js","skipped":false,"dir":"test"},{"name":"displays URL for assertNumber without messages","suites":["Extracted messages by ids"],"updatePoint":{"line":572,"column":54,"index":21421},"line":572,"code":"    it('displays URL for assertNumber without messages', () => {\n      mockExternalMessages(null);\n      const notNumber = false;\n      expect(() => log.assertNumber(notNumber, ['x'])).to.throw(/\\?v=.+&id=x&s\\[\\]=false$/);\n    });","file":"unit/utils/test-log.js","skipped":false,"dir":"test"},{"name":"expands message from table for assertNumber","suites":["Extracted messages by ids"],"updatePoint":{"line":577,"column":51,"index":21649},"line":577,"code":"    it('expands message from table for assertNumber', () => {\n      mockExternalMessages({\n        'b': '%s Mundo',\n        'baz': 'tacos'\n      });\n      const notNumber = 'Hola';\n      expect(() => log.assertNumber(notNumber, ['b'])).to.throw(/Hola Mundo/);\n    });","file":"unit/utils/test-log.js","skipped":false,"dir":"test"},{"name":"displays URL for assertArray without messages","suites":["Extracted messages by ids"],"updatePoint":{"line":585,"column":53,"index":21919},"line":585,"code":"    it('displays URL for assertArray without messages', () => {\n      mockExternalMessages(null);\n      const notArray = 'xxx';\n      expect(() => log.assertArray(notArray, ['zzz'])).to.throw(/\\?v=.+&id=zzz&s\\[\\]=xxx$/);\n    });","file":"unit/utils/test-log.js","skipped":false,"dir":"test"},{"name":"expands message from table for assertArray","suites":["Extracted messages by ids"],"updatePoint":{"line":590,"column":50,"index":22145},"line":590,"code":"    it('expands message from table for assertArray', () => {\n      mockExternalMessages({\n        'x': 'sas%s',\n        'baz': 'tacos'\n      });\n      const notArray = 'quatch';\n      expect(() => log.assertArray(notArray, ['x'])).to.throw(/sasquatch/);\n    });","file":"unit/utils/test-log.js","skipped":false,"dir":"test"},{"name":"displays URL for assertBoolean without messages","suites":["Extracted messages by ids"],"updatePoint":{"line":598,"column":55,"index":22412},"line":598,"code":"    it('displays URL for assertBoolean without messages', () => {\n      mockExternalMessages(null);\n      const notBoolean = 'bar';\n      expect(() => log.assertBoolean(notBoolean, ['lol'])).to.throw(/\\?v=.+&id=lol&s\\[\\]=bar$/);\n    });","file":"unit/utils/test-log.js","skipped":false,"dir":"test"},{"name":"expands message from table for assertBoolean","suites":["Extracted messages by ids"],"updatePoint":{"line":603,"column":52,"index":22646},"line":603,"code":"    it('expands message from table for assertBoolean', () => {\n      mockExternalMessages({\n        'foo': '%s',\n        'baz': 'tacos'\n      });\n      const notBoolean = 'bar';\n      expect(() => log.assertBoolean(notBoolean, ['x'])).to.throw(/bar/);\n    });","file":"unit/utils/test-log.js","skipped":false,"dir":"test"},{"name":"should set AMP-Same-Origin header","suites":["setupAMPCors"],"updatePoint":{"line":5,"column":41,"index":274},"line":5,"code":"    it('should set AMP-Same-Origin header', () => {\n      // Given a same origin request.\n      const fetchInitDef = setupAMPCors({\n        origin: 'http://www.origin.org'\n      }, 'http://www.origin.org', {});\n      // Expect proper header to be set.\n      expect(fetchInitDef['headers']['AMP-Same-Origin']).to.equal('true');\n    });","file":"unit/utils/test-xhr-utils.js","skipped":false,"dir":"test"},{"name":"should not set AMP-Same-Origin header","suites":["setupAMPCors"],"updatePoint":{"line":13,"column":45,"index":613},"line":13,"code":"    it('should not set AMP-Same-Origin header', () => {\n      // If not a same origin request.\n      const fetchInitDef = setupAMPCors({\n        origin: 'http://www.originz.org'\n      }, 'http://www.origin.org', {\n        headers: {}\n      });\n      expect(fetchInitDef['headers']['AMP-Same-Origin']).to.be.undefined;\n    });","file":"unit/utils/test-xhr-utils.js","skipped":false,"dir":"test"},{"name":"should set up init","suites":["setupInit"],"updatePoint":{"line":24,"column":26,"index":958},"line":24,"code":"    it('should set up init', () => {\n      const init = setupInit();\n      expect(init).to.deep.equal({\n        method: 'GET',\n        headers: {}\n      });\n    });","file":"unit/utils/test-xhr-utils.js","skipped":false,"dir":"test"},{"name":"should set up init with Accept header value","suites":["setupInit"],"updatePoint":{"line":31,"column":51,"index":1148},"line":31,"code":"    it('should set up init with Accept header value', () => {\n      const init = setupInit(undefined, 'text/html');\n      expect(init['headers']['Accept']).to.equal('text/html');\n    });","file":"unit/utils/test-xhr-utils.js","skipped":false,"dir":"test"},{"name":"should handle null credentials","suites":["setupInit"],"updatePoint":{"line":35,"column":38,"index":1322},"line":35,"code":"    it('should handle null credentials', () => {\n      allowConsoleError(() => {\n        expect(() => {\n          setupInit({\n            credentials: null\n          }, 'text/html');\n        }).to.throw(/Only credentials=include\\|omit support: null/);\n      });\n    });","file":"unit/utils/test-xhr-utils.js","skipped":false,"dir":"test"},{"name":"set proper properties","suites":["setupJsonFetchInit"],"updatePoint":{"line":46,"column":29,"index":1630},"line":46,"code":"    it('set proper properties', () => {\n      expect(setupJsonFetchInit({\n        body: {}\n      })).to.deep.equal({\n        headers: {\n          'Accept': 'application/json'\n        },\n        body: {},\n        method: 'GET'\n      });\n      expect(setupJsonFetchInit({\n        body: {},\n        method: 'POST'\n      })).to.deep.equal({\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'text/plain;charset=utf-8'\n        },\n        body: '{}',\n        method: 'POST'\n      });\n    });","file":"unit/utils/test-xhr-utils.js","skipped":false,"dir":"test"},{"name":"should be no-op if amp doc is absent","suites":["getViewerInterceptResponse"],"updatePoint":{"line":99,"column":44,"index":3096},"line":99,"code":"    it('should be no-op if amp doc is absent', async () => {\n      ampDocSingle = null;\n      await getViewerInterceptResponse(win, ampDocSingle, input, init);\n\n      // Expect no-op.\n      expect(viewerForDoc).to.not.have.been.called;\n    });","file":"unit/utils/test-xhr-utils.js","skipped":false,"dir":"test"},{"name":"should not intercept if viewer can not intercept","suites":["getViewerInterceptResponse"],"updatePoint":{"line":106,"column":56,"index":3352},"line":106,"code":"    it('should not intercept if viewer can not intercept', async () => {\n      viewer.hasCapability = unusedParam => false;\n      await getViewerInterceptResponse(win, ampDocSingle, input, init);\n\n      // Expect no interception.\n      expect(viewer.sendMessageAwaitResponse).to.not.have.been.called;\n    });","file":"unit/utils/test-xhr-utils.js","skipped":false,"dir":"test"},{"name":"should not intercept if request is initialized to bypass for local development","suites":["getViewerInterceptResponse"],"updatePoint":{"line":113,"column":86,"index":3691},"line":113,"code":"    it('should not intercept if request is initialized to bypass for local development', async () => {\n      // Given the bypass flag and localDev being true.\n      init = {\n        bypassInterceptorForDev: true\n      };\n      win.__AMP_MODE = {\n        localDev: true\n      };\n      await getViewerInterceptResponse(win, ampDocSingle, input, init);\n\n      // Expect no interception.\n      expect(viewer.sendMessageAwaitResponse).to.not.have.been.called;\n    });","file":"unit/utils/test-xhr-utils.js","skipped":false,"dir":"test"},{"name":"should not intercept if amp doc does not support xhr interception","suites":["getViewerInterceptResponse"],"updatePoint":{"line":126,"column":73,"index":4141},"line":126,"code":"    it('should not intercept if amp doc does not support xhr interception', async () => {\n      doc.removeAttribute('allow-xhr-interception');\n      await getViewerInterceptResponse(win, ampDocSingle, input, init);\n\n      // Expect no interception.\n      expect(viewer.sendMessageAwaitResponse).to.not.have.been.called;\n    });","file":"unit/utils/test-xhr-utils.js","skipped":false,"dir":"test"},{"name":"should not intercept if URL is known as a proxy URL","suites":["getViewerInterceptResponse"],"updatePoint":{"line":133,"column":59,"index":4455},"line":133,"code":"    it('should not intercept if URL is known as a proxy URL', async () => {\n      input = 'https://cdn.ampproject.org';\n      await getViewerInterceptResponse(win, ampDocSingle, input, init);\n\n      // Expect no interception.\n      expect(viewer.sendMessageAwaitResponse).to.not.have.been.called;\n    });","file":"unit/utils/test-xhr-utils.js","skipped":false,"dir":"test"},{"name":"should send xhr request to viewer","suites":["getViewerInterceptResponse"],"updatePoint":{"line":140,"column":41,"index":4742},"line":140,"code":"    it('should send xhr request to viewer', async () => {\n      init = {\n        body: {}\n      };\n      input = 'https://www.shouldsendxhrrequesttoviewer.org';\n      await getViewerInterceptResponse(win, ampDocSingle, input, init);\n      const msgPayload = {\n        'originalRequest': {\n          'input': 'https://www.shouldsendxhrrequesttoviewer.org',\n          'init': {\n            'body': {}\n          }\n        }\n      };\n      expect(viewer.sendMessageAwaitResponse).to.have.been.calledOnceWith('xhr', msgPayload);\n    });","file":"unit/utils/test-xhr-utils.js","skipped":false,"dir":"test"},{"name":"should wait for visibility","suites":["getViewerInterceptResponse"],"updatePoint":{"line":156,"column":34,"index":5267},"line":156,"code":"    it('should wait for visibility', async () => {\n      await getViewerInterceptResponse(win, ampDocSingle, input, init);\n      expect(ampDocSingle.whenFirstVisible).to.have.been.calledOnce;\n    });","file":"unit/utils/test-xhr-utils.js","skipped":false,"dir":"test"},{"name":"should not wait for visibility if prerenderSafe","suites":["getViewerInterceptResponse"],"updatePoint":{"line":160,"column":55,"index":5488},"line":160,"code":"    it('should not wait for visibility if prerenderSafe', async () => {\n      init = {\n        prerenderSafe: true\n      };\n      await getViewerInterceptResponse(win, ampDocSingle, input, init);\n      expect(ampDocSingle.whenFirstVisible).to.not.have.been.called;\n    });","file":"unit/utils/test-xhr-utils.js","skipped":false,"dir":"test"},{"name":"should check if Worker is supported","suites":[],"updatePoint":{"line":43,"column":41,"index":1421},"line":43,"code":"  it('should check if Worker is supported', () => {\n    fakeWin.Worker = undefined;\n    return expect(invokeWebWorker(fakeWin, 'foo')).to.eventually.be.rejectedWith('not supported');\n  });","file":"unit/web-worker/test-amp-worker.js","skipped":false,"dir":"test"},{"name":"should send and receive a message","suites":[],"updatePoint":{"line":47,"column":39,"index":1608},"line":47,"code":"  it('should send and receive a message', () => {\n    // Sending.\n    const invokePromise = invokeWebWorker(fakeWin, 'foo', ['bar', 123]);\n    getMode(fakeWin).bypassInterceptorForDev = true;\n    return workerReadyPromise.then(() => {\n      expect(postMessageStub).to.have.been.calledWithMatch({\n        method: 'foo',\n        args: env.sandbox.match(['bar', 123]),\n        id: 0\n      });\n      expect(fetchTextCallStub).to.have.been.calledWithMatch('http://localhost:9876/dist/ww.js', {\n        ampCors: false,\n        bypassInterceptorForDev: true\n      });\n\n      // Receiving.\n      const data = {\n        method: 'foo',\n        returnValue: {\n          'qux': 456\n        },\n        id: 0\n      };\n      fakeWorker.onmessage({\n        data\n      });\n      return invokePromise.then(returnValue => {\n        expect(returnValue).to.deep.equals({\n          'qux': 456\n        });\n      });\n    });\n  });","file":"unit/web-worker/test-amp-worker.js","skipped":false,"dir":"test"},{"name":"should differentiate messages of different methods","suites":[],"updatePoint":{"line":80,"column":56,"index":2532},"line":80,"code":"  it('should differentiate messages of different methods', () => {\n    const foo = invokeWebWorker(fakeWin, 'foo', ['foo-arg']);\n    const bar = invokeWebWorker(fakeWin, 'bar', ['bar-arg']);\n    const qux = invokeWebWorker(fakeWin, 'qux', ['qux-arg']);\n    return workerReadyPromise.then(() => {\n      fakeWorker.onmessage({\n        data: {\n          method: 'bar',\n          returnValue: 'bar-retVal',\n          id: 1\n        }\n      });\n      fakeWorker.onmessage({\n        data: {\n          method: 'qux',\n          returnValue: 'qux-retVal',\n          id: 2\n        }\n      });\n      fakeWorker.onmessage({\n        data: {\n          method: 'foo',\n          returnValue: 'foo-retVal',\n          id: 0\n        }\n      });\n      return Promise.all([foo, bar, qux]).then(values => {\n        expect(values[0]).to.equal('foo-retVal');\n        expect(values[1]).to.equal('bar-retVal');\n        expect(values[2]).to.equal('qux-retVal');\n      });\n    });\n  });","file":"unit/web-worker/test-amp-worker.js","skipped":false,"dir":"test"},{"name":"should differentiate messages of same method with different ids","suites":[],"updatePoint":{"line":113,"column":69,"index":3503},"line":113,"code":"  it('should differentiate messages of same method with different ids', () => {\n    const one = invokeWebWorker(fakeWin, 'foo', ['one']);\n    const two = invokeWebWorker(fakeWin, 'foo', ['two']);\n    const three = invokeWebWorker(fakeWin, 'foo', ['three']);\n    return workerReadyPromise.then(() => {\n      expect(postMessageStub.firstCall).to.have.been.calledWithMatch({\n        method: 'foo',\n        id: 0\n      });\n      expect(postMessageStub.secondCall).to.have.been.calledWithMatch({\n        method: 'foo',\n        id: 1\n      });\n      expect(postMessageStub.thirdCall).to.have.been.calledWithMatch({\n        method: 'foo',\n        id: 2\n      });\n      fakeWorker.onmessage({\n        data: {\n          method: 'foo',\n          returnValue: 'three',\n          id: 2\n        }\n      });\n      fakeWorker.onmessage({\n        data: {\n          method: 'foo',\n          returnValue: 'one',\n          id: 0\n        }\n      });\n      fakeWorker.onmessage({\n        data: {\n          method: 'foo',\n          returnValue: 'two',\n          id: 1\n        }\n      });\n      return Promise.all([one, two, three]).then(values => {\n        expect(values[0]).to.equal('one');\n        expect(values[1]).to.equal('two');\n        expect(values[2]).to.equal('three');\n      });\n    });\n  });","file":"unit/web-worker/test-amp-worker.js","skipped":false,"dir":"test"},{"name":"should log error when unexpected message is received","suites":[],"updatePoint":{"line":158,"column":58,"index":4774},"line":158,"code":"  it('should log error when unexpected message is received', () => {\n    const errorStub = env.sandbox.stub(dev(), 'error');\n    invokeWebWorker(fakeWin, 'foo');\n    return workerReadyPromise.then(() => {\n      expect(errorStub.callCount).to.equal(0);\n\n      // Unexpected `id` value.\n      fakeWorker.onmessage({\n        data: {\n          method: 'foo',\n          returnValue: undefined,\n          id: 3\n        }\n      });\n      expect(errorStub.callCount).to.equal(1);\n      expect(errorStub).to.have.been.calledWith('web-worker');\n\n      // Unexpected method at valid `id`.\n      allowConsoleError(() => {\n        expect(() => {\n          fakeWorker.onmessage({\n            data: {\n              method: 'bar',\n              returnValue: undefined,\n              id: 0\n            }\n          });\n        }).to.throw('mismatched method');\n      });\n    });\n  });","file":"unit/web-worker/test-amp-worker.js","skipped":false,"dir":"test"},{"name":"should clean up storage after message completion","suites":[],"updatePoint":{"line":189,"column":54,"index":5637},"line":189,"code":"  it('should clean up storage after message completion', () => {\n    invokeWebWorker(fakeWin, 'foo');\n    return workerReadyPromise.then(() => {\n      expect(ampWorker.hasPendingMessages()).to.be.true;\n      fakeWorker.onmessage({\n        data: {\n          method: 'foo',\n          returnValue: 'abc',\n          id: 0\n        }\n      });\n      expect(ampWorker.hasPendingMessages()).to.be.false;\n    });\n  });","file":"unit/web-worker/test-amp-worker.js","skipped":false,"dir":"test"},{"name":"should send unique scope IDs per `opt_localWin` value","suites":[],"updatePoint":{"line":203,"column":59,"index":6052},"line":203,"code":"  it('should send unique scope IDs per `opt_localWin` value', () => {\n    const scopeOne = {};\n    const scopeTwo = {};\n\n    // Sending.\n    invokeWebWorker(fakeWin, 'a'); // Default scope == 0.\n    invokeWebWorker(fakeWin, 'b', undefined, /* opt_localWin */scopeOne);\n    invokeWebWorker(fakeWin, 'c', undefined, /* opt_localWin */scopeTwo);\n    invokeWebWorker(fakeWin, 'd', undefined, /* opt_localWin */scopeOne);\n    invokeWebWorker(fakeWin, 'e', undefined, /* opt_localWin */fakeWin);\n    return workerReadyPromise.then(() => {\n      expect(postMessageStub).to.have.been.calledWithMatch({\n        method: 'a',\n        scope: 0\n      });\n      expect(postMessageStub).to.have.been.calledWithMatch({\n        method: 'b',\n        scope: 1\n      });\n      expect(postMessageStub).to.have.been.calledWithMatch({\n        method: 'c',\n        scope: 2\n      });\n      expect(postMessageStub).to.have.been.calledWithMatch({\n        method: 'd',\n        scope: 1\n      });\n      expect(postMessageStub).to.have.been.calledWithMatch({\n        method: 'e',\n        scope: 0\n      });\n    });\n  });","file":"unit/web-worker/test-amp-worker.js","skipped":false,"dir":"test"},{"name":"should replace the relative sourceMappingURL with the absolute one","suites":[],"updatePoint":{"line":236,"column":72,"index":7157},"line":236,"code":"  it('should replace the relative sourceMappingURL with the absolute one', () => {\n    invokeWebWorker(fakeWin, 'foo', ['bar', 123]);\n    getMode(fakeWin).bypassInterceptorForDev = true;\n    return workerReadyPromise.then(() => {\n      expect(blobStub).to.have.been.calledWithMatch(['//# sourceMappingURL=http://localhost:9876/dist/ww.js.map\\n//# sourceurl=http://localhost:9876/dist/ww.js'], {\n        type: 'text/javascript'\n      });\n    });\n  });","file":"unit/web-worker/test-amp-worker.js","skipped":false,"dir":"test"},{"name":"passes valid AMPs","suites":["gulp-amphtml-validator","validate"],"updatePoint":{"line":16,"column":25,"index":536},"line":16,"code":"    it('passes valid AMPs', function (done) {\n      const validFile = createFile(VALID_FILE);\n      validate.write(validFile);\n      validate.once('data', function (file) {\n        assert.equal(file.ampValidationResult.status, 'PASS');\n        done();\n      });\n    });","file":"validate.js","skipped":false,"dir":"validator/js/gulpjs/test"},{"name":"fails invalid AMPs","suites":["gulp-amphtml-validator","validate"],"updatePoint":{"line":24,"column":26,"index":807},"line":24,"code":"    it('fails invalid AMPs', function (done) {\n      const invalidFile = createFile(INVALID_FILE);\n      validate.write(invalidFile);\n      validate.once('data', function (file) {\n        assert.equal(file.ampValidationResult.status, 'FAIL');\n        done();\n      });\n    });","file":"validate.js","skipped":false,"dir":"validator/js/gulpjs/test"},{"name":"fails if validator cannot be downloaded","suites":["gulp-amphtml-validator","validate"],"updatePoint":{"line":32,"column":47,"index":1105},"line":32,"code":"    it('fails if validator cannot be downloaded', function (done) {\n      const faillingValidator = {\n        getInstance: function () {\n          return new Promise(function (resolve, reject) {\n            reject(new Error('expected'));\n          });\n        }\n      };\n      validate = gulpAmpHtmlValidator.validate(faillingValidator);\n      const validFile = createFile(VALID_FILE);\n      validate.write(validFile);\n      validate.once('data', function (file) {\n        assert.equal(file.ampValidationResult.status, 'UNKNOWN');\n        done();\n      });\n    });","file":"validate.js","skipped":false,"dir":"validator/js/gulpjs/test"},{"name":"prints passed validation results","suites":["gulp-amphtml-validator","format"],"updatePoint":{"line":56,"column":40,"index":1858},"line":56,"code":"    it('prints passed validation results', function (done) {\n      const pass = createFileStub(VALID_FILE);\n      pass.ampValidationResult = {\n        status: 'PASS',\n        errors: []\n      };\n      format.write(pass);\n      format.end();\n      format.once('finish', function () {\n        assert.ok(logger.logged.includes('AMP Validation results:\\n\\n' + VALID_FILE + ': \\u001b[32mPASS\\u001b[39m'));\n        done();\n      });\n    });","file":"validate.js","skipped":false,"dir":"validator/js/gulpjs/test"},{"name":"prints failed vaidation results","suites":["gulp-amphtml-validator","format"],"updatePoint":{"line":69,"column":39,"index":2292},"line":69,"code":"    it('prints failed vaidation results', function (done) {\n      const fail = createFileStub(INVALID_FILE);\n      fail.ampValidationResult = {\n        status: 'FAIL',\n        errors: [{\n          severity: 'ERROR',\n          line: 24,\n          col: 4,\n          message: 'errorMessage',\n          specUrl: 'specUrl',\n          category: 'category',\n          code: 'errorCode',\n          params: ['img', 'noscript', 'amp-img']\n        }]\n      };\n      format.write(fail);\n      format.end();\n      format.once('finish', function () {\n        assert.ok(logger.logged.includes('AMP Validation results:\\n\\n' + INVALID_FILE + ': \\u001b[31mFAIL\\u001b[39m\\n' + INVALID_FILE + ':24:4 ' + '\\u001b[31merrorMessage\\u001b[39m (see specUrl)'));\n        done();\n      });\n    });","file":"validate.js","skipped":false,"dir":"validator/js/gulpjs/test"},{"name":"fails after invalid AMP","suites":["gulp-amphtml-validator","failAfterError"],"updatePoint":{"line":97,"column":31,"index":3226},"line":97,"code":"    it('fails after invalid AMP', function (done) {\n      const invalidFile = createFailedFile('fail.html');\n      failAfterError.write(invalidFile);\n      try {\n        failAfterError.end();\n      } catch (expected) {\n        done();\n      }\n    });","file":"validate.js","skipped":false,"dir":"validator/js/gulpjs/test"},{"name":"fails if validator fails to load","suites":["gulp-amphtml-validator","failAfterError"],"updatePoint":{"line":106,"column":40,"index":3486},"line":106,"code":"    it('fails if validator fails to load', function (done) {\n      const invalidFile = createFileWithValidatorFailure('fail.html');\n      failAfterError.write(invalidFile);\n      try {\n        failAfterError.end();\n      } catch (expected) {\n        done();\n      }\n    });","file":"validate.js","skipped":false,"dir":"validator/js/gulpjs/test"},{"name":"passes valid AMP","suites":["gulp-amphtml-validator","failAfterError"],"updatePoint":{"line":115,"column":24,"index":3744},"line":115,"code":"    it('passes valid AMP', function (done) {\n      const invalidFile = createPassedFile('pass.html');\n      failAfterError.write(invalidFile);\n      failAfterError.end();\n      done();\n    });","file":"validate.js","skipped":false,"dir":"validator/js/gulpjs/test"}]}