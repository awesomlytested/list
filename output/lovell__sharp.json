{"repo":"lovell/sharp","url":"https://github.com/lovell/sharp","branch":"master","configs":[{"package":"sharp","lang":"js","dir":"test","framework":"mocha","pattern":"**/*.{js,ts}"}],"tests":[{"name":"Missing matrix","suites":["Affine transform","Invalid input"],"updatePoint":{"line":8,"column":22,"index":219},"line":8,"code":"    it('Missing matrix', () => {\n      assert.throws(() => {\n        sharp(fixtures.inputJpg).affine();\n      });\n    });","file":"unit/affine.js","skipped":false,"dir":"test"},{"name":"Invalid 1d matrix","suites":["Affine transform","Invalid input"],"updatePoint":{"line":13,"column":25,"index":344},"line":13,"code":"    it('Invalid 1d matrix', () => {\n      assert.throws(() => {\n        sharp(fixtures.inputJpg).affine(['123', 123, 123, 123]);\n      });\n    });","file":"unit/affine.js","skipped":false,"dir":"test"},{"name":"Invalid 2d matrix","suites":["Affine transform","Invalid input"],"updatePoint":{"line":18,"column":25,"index":491},"line":18,"code":"    it('Invalid 2d matrix', () => {\n      assert.throws(() => {\n        sharp(fixtures.inputJpg).affine([[123, 123], [null, 123]]);\n      });\n    });","file":"unit/affine.js","skipped":false,"dir":"test"},{"name":"Invalid options parameter type","suites":["Affine transform","Invalid input"],"updatePoint":{"line":23,"column":38,"index":654},"line":23,"code":"    it('Invalid options parameter type', () => {\n      assert.throws(() => {\n        sharp(fixtures.inputJpg).affine([[1, 0], [0, 1]], 'invalid options type');\n      });\n    });","file":"unit/affine.js","skipped":false,"dir":"test"},{"name":"Invalid background color","suites":["Affine transform","Invalid input"],"updatePoint":{"line":28,"column":32,"index":826},"line":28,"code":"    it('Invalid background color', () => {\n      assert.throws(() => {\n        sharp(fixtures.inputJpg).affine([4, 4, 4, 4], {\n          background: 'not a color'\n        });\n      });\n    });","file":"unit/affine.js","skipped":false,"dir":"test"},{"name":"Invalid idx offset type","suites":["Affine transform","Invalid input"],"updatePoint":{"line":35,"column":31,"index":1018},"line":35,"code":"    it('Invalid idx offset type', () => {\n      assert.throws(() => {\n        sharp(fixtures.inputJpg).affine([[4, 4], [4, 4]], {\n          idx: 'invalid idx type'\n        });\n      });\n    });","file":"unit/affine.js","skipped":false,"dir":"test"},{"name":"Invalid idy offset type","suites":["Affine transform","Invalid input"],"updatePoint":{"line":42,"column":31,"index":1212},"line":42,"code":"    it('Invalid idy offset type', () => {\n      assert.throws(() => {\n        sharp(fixtures.inputJpg).affine([4, 4, 4, 4], {\n          idy: 'invalid idy type'\n        });\n      });\n    });","file":"unit/affine.js","skipped":false,"dir":"test"},{"name":"Invalid odx offset type","suites":["Affine transform","Invalid input"],"updatePoint":{"line":49,"column":31,"index":1402},"line":49,"code":"    it('Invalid odx offset type', () => {\n      assert.throws(() => {\n        sharp(fixtures.inputJpg).affine([[4, 4], [4, 4]], {\n          odx: 'invalid odx type'\n        });\n      });\n    });","file":"unit/affine.js","skipped":false,"dir":"test"},{"name":"Invalid ody offset type","suites":["Affine transform","Invalid input"],"updatePoint":{"line":56,"column":31,"index":1596},"line":56,"code":"    it('Invalid ody offset type', () => {\n      assert.throws(() => {\n        sharp(fixtures.inputJpg).affine([[4, 4], [4, 4]], {\n          ody: 'invalid ody type'\n        });\n      });\n    });","file":"unit/affine.js","skipped":false,"dir":"test"},{"name":"Invalid interpolator","suites":["Affine transform","Invalid input"],"updatePoint":{"line":63,"column":28,"index":1787},"line":63,"code":"    it('Invalid interpolator', () => {\n      assert.throws(() => {\n        sharp(fixtures.inputJpg).affine([[4, 4], [4, 4]], {\n          interpolator: 'cubic'\n        });\n      });\n    });","file":"unit/affine.js","skipped":false,"dir":"test"},{"name":"Applies identity matrix","suites":["Affine transform","Invalid input"],"updatePoint":{"line":71,"column":29,"index":1983},"line":71,"code":"  it('Applies identity matrix', done => {\n    const input = fixtures.inputJpg;\n    sharp(input).affine([[1, 0], [0, 1]]).toBuffer((err, data) => {\n      if (err) throw err;\n      fixtures.assertSimilar(input, data, done);\n    });\n  });","file":"unit/affine.js","skipped":false,"dir":"test"},{"name":"Applies resize affine matrix","suites":["Affine transform","Invalid input"],"updatePoint":{"line":78,"column":34,"index":2224},"line":78,"code":"  it('Applies resize affine matrix', done => {\n    const input = fixtures.inputJpg;\n    const inputWidth = 2725;\n    const inputHeight = 2225;\n    sharp(input).affine([[0.2, 0], [0, 1.5]]).toBuffer((err, data, info) => {\n      if (err) throw err;\n      fixtures.assertSimilar(input, data, done);\n      assert.strictEqual(info.width, Math.ceil(inputWidth * 0.2));\n      assert.strictEqual(info.height, Math.ceil(inputHeight * 1.5));\n    });\n  });","file":"unit/affine.js","skipped":false,"dir":"test"},{"name":"Resizes and applies affine transform","suites":["Affine transform","Invalid input"],"updatePoint":{"line":89,"column":42,"index":2678},"line":89,"code":"  it('Resizes and applies affine transform', done => {\n    const input = fixtures.inputJpg;\n    sharp(input).resize(500, 500).affine([[0.5, 1], [1, 0.5]]).toBuffer((err, data) => {\n      if (err) throw err;\n      fixtures.assertSimilar(data, fixtures.expected('affine-resize-expected.jpg'), done);\n    });\n  });","file":"unit/affine.js","skipped":false,"dir":"test"},{"name":"Extracts and applies affine transform","suites":["Affine transform","Invalid input"],"updatePoint":{"line":96,"column":43,"index":2991},"line":96,"code":"  it('Extracts and applies affine transform', done => {\n    sharp(fixtures.inputJpg).extract({\n      left: 300,\n      top: 300,\n      width: 600,\n      height: 600\n    }).affine([0.3, 0, -0.5, 0.3]).toBuffer((err, data) => {\n      if (err) throw err;\n      fixtures.assertSimilar(data, fixtures.expected('affine-extract-expected.jpg'), done);\n    });\n  });","file":"unit/affine.js","skipped":false,"dir":"test"},{"name":"Rotates and applies affine transform","suites":["Affine transform","Invalid input"],"updatePoint":{"line":107,"column":42,"index":3347},"line":107,"code":"  it('Rotates and applies affine transform', done => {\n    sharp(fixtures.inputJpg320x240).rotate(90).affine([[-1.2, 0], [0, -1.2]]).toBuffer((err, data) => {\n      if (err) throw err;\n      fixtures.assertSimilar(data, fixtures.expected('affine-rotate-expected.jpg'), done);\n    });\n  });","file":"unit/affine.js","skipped":false,"dir":"test"},{"name":"Extracts, rotates and applies affine transform","suites":["Affine transform","Invalid input"],"updatePoint":{"line":113,"column":52,"index":3647},"line":113,"code":"  it('Extracts, rotates and applies affine transform', done => {\n    sharp(fixtures.inputJpg).extract({\n      left: 1000,\n      top: 1000,\n      width: 200,\n      height: 200\n    }).rotate(45, {\n      background: 'blue'\n    }).affine([[2, 1], [2, -0.5]], {\n      background: 'red'\n    }).toBuffer((err, data) => {\n      if (err) throw err;\n      fixtures.assertSimilar(fixtures.expected('affine-extract-rotate-expected.jpg'), data, done);\n    });\n  });","file":"unit/affine.js","skipped":false,"dir":"test"},{"name":"Applies affine transform with background color","suites":["Affine transform","Invalid input"],"updatePoint":{"line":128,"column":52,"index":4100},"line":128,"code":"  it('Applies affine transform with background color', done => {\n    sharp(fixtures.inputJpg320x240).rotate(180).affine([[-1.5, 1.2], [-1, 1]], {\n      background: 'red'\n    }).toBuffer((err, data) => {\n      if (err) throw err;\n      fixtures.assertSimilar(fixtures.expected('affine-background-expected.jpg'), data, done);\n    });\n  });","file":"unit/affine.js","skipped":false,"dir":"test"},{"name":"Applies affine transform with background color and output offsets","suites":["Affine transform","Invalid input"],"updatePoint":{"line":136,"column":71,"index":4457},"line":136,"code":"  it('Applies affine transform with background color and output offsets', done => {\n    sharp(fixtures.inputJpg320x240).rotate(180).affine([[-2, 1.5], [-1, 2]], {\n      background: 'blue',\n      odx: 40,\n      ody: -100\n    }).toBuffer((err, data) => {\n      if (err) throw err;\n      fixtures.assertSimilar(fixtures.expected('affine-background-output-offsets-expected.jpg'), data, done);\n    });\n  });","file":"unit/affine.js","skipped":false,"dir":"test"},{"name":"Applies affine transform with background color and all offsets","suites":["Affine transform","Invalid input"],"updatePoint":{"line":146,"column":68,"index":4857},"line":146,"code":"  it('Applies affine transform with background color and all offsets', done => {\n    sharp(fixtures.inputJpg320x240).rotate(180).affine([[-1.2, 1.8], [-1, 2]], {\n      background: 'yellow',\n      idx: 10,\n      idy: -40,\n      odx: 10,\n      ody: -50\n    }).toBuffer((err, data) => {\n      if (err) throw err;\n      fixtures.assertSimilar(fixtures.expected('affine-background-all-offsets-expected.jpg'), data, done);\n    });\n  });","file":"unit/affine.js","skipped":false,"dir":"test"},{"name":"Performs 2x upscale with  interpolation","suites":["Affine transform","Interpolations"],"updatePoint":{"line":163,"column":58,"index":5464},"line":163,"code":"      it(`Performs 2x upscale with ${interp} interpolation`, done => {\n        sharp(input).affine([[2, 0], [0, 2]], {\n          interpolator: sharp.interpolators[interp]\n        }).toBuffer((err, data, info) => {\n          if (err) throw err;\n          assert.strictEqual(info.width, Math.ceil(inputWidth * 2));\n          assert.strictEqual(info.height, Math.ceil(inputHeight * 2));\n          fixtures.assertSimilar(fixtures.expected(`affine-${sharp.interpolators[interp]}-2x-upscale-expected.jpg`), data, done);\n        });\n      });","file":"unit/affine.js","skipped":false,"dir":"test"},{"name":"Without proxy","suites":["HTTP agent"],"updatePoint":{"line":6,"column":19,"index":148},"line":6,"code":"  it('Without proxy', function () {\n    assert.strictEqual(null, agent());\n  });","file":"unit/agent.js","skipped":false,"dir":"test"},{"name":"HTTPS proxy with auth from HTTPS_PROXY","suites":["HTTP agent"],"updatePoint":{"line":9,"column":44,"index":254},"line":9,"code":"  it('HTTPS proxy with auth from HTTPS_PROXY', function () {\n    process.env.HTTPS_PROXY = 'https://user:pass@secure:123';\n    const proxy = agent();\n    delete process.env.HTTPS_PROXY;\n    assert.strictEqual('object', typeof proxy);\n    assert.strictEqual('secure', proxy.options.proxy.host);\n    assert.strictEqual(123, proxy.options.proxy.port);\n    assert.strictEqual('user:pass', proxy.options.proxy.proxyAuth);\n    assert.strictEqual(443, proxy.defaultPort);\n  });","file":"unit/agent.js","skipped":false,"dir":"test"},{"name":"HTTPS proxy with auth from HTTPS_PROXY using credentials containing special characters","suites":["HTTP agent"],"updatePoint":{"line":19,"column":92,"index":773},"line":19,"code":"  it('HTTPS proxy with auth from HTTPS_PROXY using credentials containing special characters', function () {\n    process.env.HTTPS_PROXY = 'https://user,:pass=@secure:123';\n    const proxy = agent();\n    delete process.env.HTTPS_PROXY;\n    assert.strictEqual('object', typeof proxy);\n    assert.strictEqual('secure', proxy.options.proxy.host);\n    assert.strictEqual(123, proxy.options.proxy.port);\n    assert.strictEqual('user,:pass=', proxy.options.proxy.proxyAuth);\n    assert.strictEqual(443, proxy.defaultPort);\n  });","file":"unit/agent.js","skipped":false,"dir":"test"},{"name":"HTTP proxy without auth from npm_config_proxy","suites":["HTTP agent"],"updatePoint":{"line":29,"column":51,"index":1255},"line":29,"code":"  it('HTTP proxy without auth from npm_config_proxy', function () {\n    process.env.npm_config_proxy = 'http://plaintext:456';\n    const proxy = agent();\n    delete process.env.npm_config_proxy;\n    assert.strictEqual('object', typeof proxy);\n    assert.strictEqual('plaintext', proxy.options.proxy.host);\n    assert.strictEqual(456, proxy.options.proxy.port);\n    assert.strictEqual(null, proxy.options.proxy.proxyAuth);\n    assert.strictEqual(443, proxy.defaultPort);\n  });","file":"unit/agent.js","skipped":false,"dir":"test"},{"name":"Flatten to black","suites":["Alpha transparency"],"updatePoint":{"line":7,"column":22,"index":191},"line":7,"code":"  it('Flatten to black', function (done) {\n    sharp(fixtures.inputPngWithTransparency).flatten().resize(400, 300).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(400, info.width);\n      assert.strictEqual(300, info.height);\n      fixtures.assertSimilar(fixtures.expected('flatten-black.jpg'), data, done);\n    });\n  });","file":"unit/alpha.js","skipped":false,"dir":"test"},{"name":"Flatten to RGB orange","suites":["Alpha transparency"],"updatePoint":{"line":15,"column":27,"index":558},"line":15,"code":"  it('Flatten to RGB orange', function (done) {\n    sharp(fixtures.inputPngWithTransparency).resize(400, 300).flatten({\n      background: {\n        r: 255,\n        g: 102,\n        b: 0\n      }\n    }).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(400, info.width);\n      assert.strictEqual(300, info.height);\n      fixtures.assertSimilar(fixtures.expected('flatten-orange.jpg'), data, done);\n    });\n  });","file":"unit/alpha.js","skipped":false,"dir":"test"},{"name":"Flatten to CSS/hex orange","suites":["Alpha transparency"],"updatePoint":{"line":29,"column":31,"index":1010},"line":29,"code":"  it('Flatten to CSS/hex orange', function (done) {\n    sharp(fixtures.inputPngWithTransparency).resize(400, 300).flatten({\n      background: '#ff6600'\n    }).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(400, info.width);\n      assert.strictEqual(300, info.height);\n      fixtures.assertSimilar(fixtures.expected('flatten-orange.jpg'), data, done);\n    });\n  });","file":"unit/alpha.js","skipped":false,"dir":"test"},{"name":"Flatten 16-bit PNG with transparency to orange","suites":["Alpha transparency"],"updatePoint":{"line":39,"column":52,"index":1438},"line":39,"code":"  it('Flatten 16-bit PNG with transparency to orange', function (done) {\n    const output = fixtures.path('output.flatten-rgb16-orange.jpg');\n    sharp(fixtures.inputPngWithTransparency16bit).flatten({\n      background: {\n        r: 255,\n        g: 102,\n        b: 0\n      }\n    }).toFile(output, function (err, info) {\n      if (err) throw err;\n      assert.strictEqual(true, info.size > 0);\n      assert.strictEqual(32, info.width);\n      assert.strictEqual(32, info.height);\n      fixtures.assertMaxColourDistance(output, fixtures.expected('flatten-rgb16-orange.jpg'), 10);\n      done();\n    });\n  });","file":"unit/alpha.js","skipped":false,"dir":"test"},{"name":"Do not flatten","suites":["Alpha transparency"],"updatePoint":{"line":56,"column":20,"index":2011},"line":56,"code":"  it('Do not flatten', function (done) {\n    sharp(fixtures.inputPngWithTransparency).flatten(false).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual('png', info.format);\n      assert.strictEqual(4, info.channels);\n      done();\n    });\n  });","file":"unit/alpha.js","skipped":false,"dir":"test"},{"name":"Ignored for JPEG","suites":["Alpha transparency"],"updatePoint":{"line":64,"column":22,"index":2296},"line":64,"code":"  it('Ignored for JPEG', function (done) {\n    sharp(fixtures.inputJpg).flatten({\n      background: '#ff0000'\n    }).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual('jpeg', info.format);\n      assert.strictEqual(3, info.channels);\n      done();\n    });\n  });","file":"unit/alpha.js","skipped":false,"dir":"test"},{"name":"Flatten with options but without colour does not throw","suites":["Alpha transparency"],"updatePoint":{"line":74,"column":60,"index":2634},"line":74,"code":"  it('Flatten with options but without colour does not throw', () => {\n    assert.doesNotThrow(() => {\n      sharp().flatten({});\n    });\n  });","file":"unit/alpha.js","skipped":false,"dir":"test"},{"name":"Flatten to invalid colour throws","suites":["Alpha transparency"],"updatePoint":{"line":79,"column":38,"index":2756},"line":79,"code":"  it('Flatten to invalid colour throws', () => {\n    assert.throws(() => {\n      sharp().flatten({\n        background: 1\n      });\n    });\n  });","file":"unit/alpha.js","skipped":false,"dir":"test"},{"name":"Enlargement with non-nearest neighbor interpolation shouldn’t cause dark edges","suites":["Alpha transparency"],"updatePoint":{"line":86,"column":84,"index":2947},"line":86,"code":"  it('Enlargement with non-nearest neighbor interpolation shouldn’t cause dark edges', function () {\n    const base = 'alpha-premultiply-enlargement-2048x1536-paper.png';\n    const actual = fixtures.path('output.' + base);\n    const expected = fixtures.expected(base);\n    return sharp(fixtures.inputPngAlphaPremultiplicationSmall).resize(2048, 1536).toFile(actual).then(function () {\n      fixtures.assertMaxColourDistance(actual, expected, 102);\n    });\n  });","file":"unit/alpha.js","skipped":false,"dir":"test"},{"name":"Reduction with non-nearest neighbor interpolation shouldn’t cause dark edges","suites":["Alpha transparency"],"updatePoint":{"line":94,"column":82,"index":3407},"line":94,"code":"  it('Reduction with non-nearest neighbor interpolation shouldn’t cause dark edges', function () {\n    const base = 'alpha-premultiply-reduction-1024x768-paper.png';\n    const actual = fixtures.path('output.' + base);\n    const expected = fixtures.expected(base);\n    return sharp(fixtures.inputPngAlphaPremultiplicationLarge).resize(1024, 768).toFile(actual).then(function () {\n      fixtures.assertMaxColourDistance(actual, expected, 102);\n    });\n  });","file":"unit/alpha.js","skipped":false,"dir":"test"},{"name":"Removes alpha from fixtures with transparency, ignores those without","suites":["Alpha transparency"],"updatePoint":{"line":102,"column":74,"index":3855},"line":102,"code":"  it('Removes alpha from fixtures with transparency, ignores those without', function () {\n    return Promise.all([fixtures.inputPngWithTransparency, fixtures.inputPngWithTransparency16bit, fixtures.inputWebPWithTransparency, fixtures.inputJpg, fixtures.inputPng, fixtures.inputWebP].map(function (input) {\n      return sharp(input).resize(10).removeAlpha().toBuffer({\n        resolveWithObject: true\n      }).then(function (result) {\n        assert.strictEqual(3, result.info.channels);\n      });\n    }));\n  });","file":"unit/alpha.js","skipped":false,"dir":"test"},{"name":"Ensures alpha from fixtures without transparency, ignores those with","suites":["Alpha transparency"],"updatePoint":{"line":111,"column":74,"index":4368},"line":111,"code":"  it('Ensures alpha from fixtures without transparency, ignores those with', function () {\n    return Promise.all([fixtures.inputPngWithTransparency, fixtures.inputPngWithTransparency16bit, fixtures.inputWebPWithTransparency, fixtures.inputJpg, fixtures.inputPng, fixtures.inputWebP].map(function (input) {\n      return sharp(input).resize(10).ensureAlpha().png().toBuffer({\n        resolveWithObject: true\n      }).then(function (result) {\n        assert.strictEqual(4, result.info.channels);\n      });\n    }));\n  });","file":"unit/alpha.js","skipped":false,"dir":"test"},{"name":"Valid ensureAlpha value used for alpha channel","suites":["Alpha transparency"],"updatePoint":{"line":120,"column":52,"index":4865},"line":120,"code":"  it('Valid ensureAlpha value used for alpha channel', async () => {\n    const background = {\n      r: 255,\n      g: 0,\n      b: 0\n    };\n    const [r, g, b, alpha] = await sharp({\n      create: {\n        width: 8,\n        height: 8,\n        channels: 3,\n        background\n      }\n    }).ensureAlpha(0.5).raw().toBuffer();\n    assert.deepStrictEqual({\n      r,\n      g,\n      b,\n      alpha\n    }, {\n      ...background,\n      alpha: 127\n    });\n  });","file":"unit/alpha.js","skipped":false,"dir":"test"},{"name":"Invalid ensureAlpha value throws","suites":["Alpha transparency"],"updatePoint":{"line":144,"column":38,"index":5304},"line":144,"code":"  it('Invalid ensureAlpha value throws', async () => {\n    assert.throws(() => {\n      sharp().ensureAlpha('fail');\n    });\n  });","file":"unit/alpha.js","skipped":false,"dir":"test"},{"name":"called without options does not throw an error","suites":["AVIF"],"updatePoint":{"line":11,"column":52,"index":240},"line":11,"code":"  it('called without options does not throw an error', () => {\n    assert.doesNotThrow(() => {\n      sharp().avif();\n    });\n  });","file":"unit/avif.js","skipped":false,"dir":"test"},{"name":"can convert AVIF to JPEG","suites":["AVIF"],"updatePoint":{"line":16,"column":30,"index":349},"line":16,"code":"  it('can convert AVIF to JPEG', async () => {\n    const data = await sharp(inputAvif).resize(32).jpeg().toBuffer();\n    const metadata = await sharp(data).metadata();\n    const {\n      compression,\n      size,\n      ...metadataWithoutSize\n    } = metadata;\n    assert.deepStrictEqual(metadataWithoutSize, {\n      channels: 3,\n      chromaSubsampling: '4:2:0',\n      density: 72,\n      depth: 'uchar',\n      format: 'jpeg',\n      hasAlpha: false,\n      hasProfile: false,\n      height: 13,\n      isProgressive: false,\n      space: 'srgb',\n      width: 32\n    });\n  });","file":"unit/avif.js","skipped":false,"dir":"test"},{"name":"can convert JPEG to AVIF","suites":["AVIF"],"updatePoint":{"line":38,"column":30,"index":918},"line":38,"code":"  it('can convert JPEG to AVIF', async () => {\n    const data = await sharp(inputJpg).resize(32).avif().toBuffer();\n    const metadata = await sharp(data).metadata();\n    const {\n      compression,\n      size,\n      ...metadataWithoutSize\n    } = metadata;\n    assert.deepStrictEqual(metadataWithoutSize, {\n      channels: 3,\n      depth: 'uchar',\n      format: 'heif',\n      hasAlpha: false,\n      hasProfile: false,\n      height: 26,\n      isProgressive: false,\n      pageHeight: 26,\n      pagePrimary: 0,\n      pages: 1,\n      space: 'srgb',\n      width: 32\n    });\n  });","file":"unit/avif.js","skipped":false,"dir":"test"},{"name":"can passthrough AVIF","suites":["AVIF"],"updatePoint":{"line":61,"column":26,"index":1489},"line":61,"code":"  it('can passthrough AVIF', async () => {\n    const data = await sharp(inputAvif).resize(32).toBuffer();\n    const metadata = await sharp(data).metadata();\n    const {\n      compression,\n      size,\n      ...metadataWithoutSize\n    } = metadata;\n    assert.deepStrictEqual(metadataWithoutSize, {\n      channels: 3,\n      depth: 'uchar',\n      format: 'heif',\n      hasAlpha: false,\n      hasProfile: false,\n      height: 12,\n      isProgressive: false,\n      pageHeight: 12,\n      pagePrimary: 0,\n      pages: 1,\n      space: 'srgb',\n      width: 32\n    });\n  });","file":"unit/avif.js","skipped":false,"dir":"test"},{"name":"can convert animated GIF to non-animated AVIF","suites":["AVIF"],"updatePoint":{"line":84,"column":51,"index":2079},"line":84,"code":"  it('can convert animated GIF to non-animated AVIF', async () => {\n    const data = await sharp(inputGifAnimated, {\n      animated: true\n    }).resize(10).avif({\n      speed: 8\n    }).toBuffer();\n    const metadata = await sharp(data).metadata();\n    const {\n      size,\n      ...metadataWithoutSize\n    } = metadata;\n    assert.deepStrictEqual(metadataWithoutSize, {\n      channels: 4,\n      compression: 'av1',\n      depth: 'uchar',\n      format: 'heif',\n      hasAlpha: true,\n      hasProfile: false,\n      height: 300,\n      isProgressive: false,\n      pageHeight: 300,\n      pagePrimary: 0,\n      pages: 1,\n      space: 'srgb',\n      width: 10\n    });\n  });","file":"unit/avif.js","skipped":false,"dir":"test"},{"name":"sRGB image retains 3 channels","suites":["Bandbool per-channel boolean operations"],"updatePoint":{"line":18,"column":35,"index":746},"line":18,"code":"  it('sRGB image retains 3 channels', function (done) {\n    sharp(fixtures.inputJpg).bandbool('and').toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(3, info.channels);\n      done();\n    });\n  });","file":"unit/bandbool.js","skipped":false,"dir":"test"},{"name":"Invalid operation","suites":["Bandbool per-channel boolean operations"],"updatePoint":{"line":25,"column":23,"index":971},"line":25,"code":"  it('Invalid operation', function () {\n    assert.throws(function () {\n      sharp().bandbool('fail');\n    });\n  });","file":"unit/bandbool.js","skipped":false,"dir":"test"},{"name":"Missing operation","suites":["Bandbool per-channel boolean operations"],"updatePoint":{"line":30,"column":23,"index":1089},"line":30,"code":"  it('Missing operation', function () {\n    assert.throws(function () {\n      sharp().bandbool();\n    });\n  });","file":"unit/bandbool.js","skipped":false,"dir":"test"},{"name":"specific radius 1","suites":["Blur"],"updatePoint":{"line":7,"column":23,"index":178},"line":7,"code":"  it('specific radius 1', function (done) {\n    sharp(fixtures.inputJpg).resize(320, 240).blur(1).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual('jpeg', info.format);\n      assert.strictEqual(320, info.width);\n      assert.strictEqual(240, info.height);\n      fixtures.assertSimilar(fixtures.expected('blur-1.jpg'), data, done);\n    });\n  });","file":"unit/blur.js","skipped":false,"dir":"test"},{"name":"specific radius 10","suites":["Blur"],"updatePoint":{"line":16,"column":24,"index":564},"line":16,"code":"  it('specific radius 10', function (done) {\n    sharp(fixtures.inputJpg).resize(320, 240).blur(10).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual('jpeg', info.format);\n      assert.strictEqual(320, info.width);\n      assert.strictEqual(240, info.height);\n      fixtures.assertSimilar(fixtures.expected('blur-10.jpg'), data, done);\n    });\n  });","file":"unit/blur.js","skipped":false,"dir":"test"},{"name":"specific radius 0.3","suites":["Blur"],"updatePoint":{"line":25,"column":25,"index":953},"line":25,"code":"  it('specific radius 0.3', function (done) {\n    sharp(fixtures.inputJpg).resize(320, 240).blur(0.3).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual('jpeg', info.format);\n      assert.strictEqual(320, info.width);\n      assert.strictEqual(240, info.height);\n      fixtures.assertSimilar(fixtures.expected('blur-0.3.jpg'), data, done);\n    });\n  });","file":"unit/blur.js","skipped":false,"dir":"test"},{"name":"mild blur","suites":["Blur"],"updatePoint":{"line":34,"column":15,"index":1334},"line":34,"code":"  it('mild blur', function (done) {\n    sharp(fixtures.inputJpg).resize(320, 240).blur().toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual('jpeg', info.format);\n      assert.strictEqual(320, info.width);\n      assert.strictEqual(240, info.height);\n      fixtures.assertSimilar(fixtures.expected('blur-mild.jpg'), data, done);\n    });\n  });","file":"unit/blur.js","skipped":false,"dir":"test"},{"name":"invalid radius","suites":["Blur"],"updatePoint":{"line":43,"column":20,"index":1718},"line":43,"code":"  it('invalid radius', function () {\n    assert.throws(function () {\n      sharp(fixtures.inputJpg).blur(0.1);\n    });\n  });","file":"unit/blur.js","skipped":false,"dir":"test"},{"name":"blurred image is smaller than non-blurred","suites":["Blur"],"updatePoint":{"line":48,"column":47,"index":1870},"line":48,"code":"  it('blurred image is smaller than non-blurred', function (done) {\n    sharp(fixtures.inputJpg).resize(320, 240).blur(false).toBuffer(function (err, notBlurred, info) {\n      if (err) throw err;\n      assert.strictEqual(true, notBlurred.length > 0);\n      assert.strictEqual('jpeg', info.format);\n      assert.strictEqual(320, info.width);\n      assert.strictEqual(240, info.height);\n      sharp(fixtures.inputJpg).resize(320, 240).blur(true).toBuffer(function (err, blurred, info) {\n        if (err) throw err;\n        assert.strictEqual(true, blurred.length > 0);\n        assert.strictEqual(true, blurred.length < notBlurred.length);\n        assert.strictEqual('jpeg', info.format);\n        assert.strictEqual(320, info.width);\n        assert.strictEqual(240, info.height);\n        done();\n      });\n    });\n  });","file":"unit/blur.js","skipped":false,"dir":"test"},{"name":"Invalid operation","suites":["Boolean operation between two images"],"updatePoint":{"line":40,"column":23,"index":1775},"line":40,"code":"  it('Invalid operation', function () {\n    assert.throws(function () {\n      sharp().boolean(fixtures.inputJpgBooleanTest, 'fail');\n    });\n  });","file":"unit/boolean.js","skipped":false,"dir":"test"},{"name":"Invalid operation, non-string","suites":["Boolean operation between two images"],"updatePoint":{"line":45,"column":35,"index":1934},"line":45,"code":"  it('Invalid operation, non-string', function () {\n    assert.throws(function () {\n      sharp().boolean(fixtures.inputJpgBooleanTest, null);\n    });\n  });","file":"unit/boolean.js","skipped":false,"dir":"test"},{"name":"Missing input","suites":["Boolean operation between two images"],"updatePoint":{"line":50,"column":19,"index":2075},"line":50,"code":"  it('Missing input', function () {\n    assert.throws(function () {\n      sharp().boolean();\n    });\n  });","file":"unit/boolean.js","skipped":false,"dir":"test"},{"name":"width 5 width 5 maxSlope 0","suites":["Clahe"],"updatePoint":{"line":7,"column":32,"index":191},"line":7,"code":"  it('width 5 width 5 maxSlope 0', function (done) {\n    sharp(fixtures.inputJpgClahe).clahe({\n      width: 5,\n      height: 5,\n      maxSlope: 0\n    }).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual('jpeg', info.format);\n      fixtures.assertSimilar(fixtures.expected('clahe-5-5-0.jpg'), data, {\n        threshold: 10\n      }, done);\n    });\n  });","file":"unit/clahe.js","skipped":false,"dir":"test"},{"name":"width 5 width 5 maxSlope 5","suites":["Clahe"],"updatePoint":{"line":20,"column":32,"index":582},"line":20,"code":"  it('width 5 width 5 maxSlope 5', function (done) {\n    sharp(fixtures.inputJpgClahe).clahe({\n      width: 5,\n      height: 5,\n      maxSlope: 5\n    }).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual('jpeg', info.format);\n      fixtures.assertSimilar(fixtures.expected('clahe-5-5-5.jpg'), data, done);\n    });\n  });","file":"unit/clahe.js","skipped":false,"dir":"test"},{"name":"width 11 width 25 maxSlope 14","suites":["Clahe"],"updatePoint":{"line":31,"column":35,"index":943},"line":31,"code":"  it('width 11 width 25 maxSlope 14', function (done) {\n    sharp(fixtures.inputJpgClahe).clahe({\n      width: 11,\n      height: 25,\n      maxSlope: 14\n    }).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual('jpeg', info.format);\n      fixtures.assertSimilar(fixtures.expected('clahe-11-25-14.jpg'), data, done);\n    });\n  });","file":"unit/clahe.js","skipped":false,"dir":"test"},{"name":"width 50 width 50 maxSlope 0","suites":["Clahe"],"updatePoint":{"line":42,"column":34,"index":1309},"line":42,"code":"  it('width 50 width 50 maxSlope 0', function (done) {\n    sharp(fixtures.inputJpgClahe).clahe({\n      width: 50,\n      height: 50,\n      maxSlope: 0\n    }).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual('jpeg', info.format);\n      fixtures.assertSimilar(fixtures.expected('clahe-50-50-0.jpg'), data, done);\n    });\n  });","file":"unit/clahe.js","skipped":false,"dir":"test"},{"name":"width 50 width 50 maxSlope 14","suites":["Clahe"],"updatePoint":{"line":53,"column":35,"index":1674},"line":53,"code":"  it('width 50 width 50 maxSlope 14', function (done) {\n    sharp(fixtures.inputJpgClahe).clahe({\n      width: 50,\n      height: 50,\n      maxSlope: 14\n    }).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual('jpeg', info.format);\n      fixtures.assertSimilar(fixtures.expected('clahe-50-50-14.jpg'), data, done);\n    });\n  });","file":"unit/clahe.js","skipped":false,"dir":"test"},{"name":"width 100 width 50 maxSlope 3","suites":["Clahe"],"updatePoint":{"line":64,"column":35,"index":2041},"line":64,"code":"  it('width 100 width 50 maxSlope 3', function (done) {\n    sharp(fixtures.inputJpgClahe).clahe({\n      width: 100,\n      height: 50,\n      maxSlope: 3\n    }).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual('jpeg', info.format);\n      fixtures.assertSimilar(fixtures.expected('clahe-100-50-3.jpg'), data, done);\n    });\n  });","file":"unit/clahe.js","skipped":false,"dir":"test"},{"name":"width 100 width 100 maxSlope 0","suites":["Clahe"],"updatePoint":{"line":75,"column":36,"index":2409},"line":75,"code":"  it('width 100 width 100 maxSlope 0', function (done) {\n    sharp(fixtures.inputJpgClahe).clahe({\n      width: 100,\n      height: 100,\n      maxSlope: 0\n    }).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual('jpeg', info.format);\n      fixtures.assertSimilar(fixtures.expected('clahe-100-100-0.jpg'), data, done);\n    });\n  });","file":"unit/clahe.js","skipped":false,"dir":"test"},{"name":"invalid maxSlope","suites":["Clahe"],"updatePoint":{"line":86,"column":22,"index":2765},"line":86,"code":"  it('invalid maxSlope', function () {\n    assert.throws(function () {\n      sharp(fixtures.inputJpgClahe).clahe({\n        width: 100,\n        height: 100,\n        maxSlope: -5\n      });\n    });\n    assert.throws(function () {\n      sharp(fixtures.inputJpgClahe).clahe({\n        width: 100,\n        height: 100,\n        maxSlope: 110\n      });\n    });\n    assert.throws(function () {\n      sharp(fixtures.inputJpgClahe).clahe({\n        width: 100,\n        height: 100,\n        maxSlope: 5.5\n      });\n    });\n    assert.throws(function () {\n      sharp(fixtures.inputJpgClahe).clahe({\n        width: 100,\n        height: 100,\n        maxSlope: 'a string'\n      });\n    });\n  });","file":"unit/clahe.js","skipped":false,"dir":"test"},{"name":"invalid width","suites":["Clahe"],"updatePoint":{"line":116,"column":19,"index":3441},"line":116,"code":"  it('invalid width', function () {\n    assert.throws(function () {\n      sharp(fixtures.inputJpgClahe).clahe({\n        width: 100.5,\n        height: 100\n      });\n    });\n    assert.throws(function () {\n      sharp(fixtures.inputJpgClahe).clahe({\n        width: -5,\n        height: 100\n      });\n    });\n    assert.throws(function () {\n      sharp(fixtures.inputJpgClahe).clahe({\n        width: true,\n        height: 100\n      });\n    });\n    assert.throws(function () {\n      sharp(fixtures.inputJpgClahe).clahe({\n        width: 'string test',\n        height: 100\n      });\n    });\n  });","file":"unit/clahe.js","skipped":false,"dir":"test"},{"name":"invalid height","suites":["Clahe"],"updatePoint":{"line":142,"column":20,"index":4032},"line":142,"code":"  it('invalid height', function () {\n    assert.throws(function () {\n      sharp(fixtures.inputJpgClahe).clahe({\n        width: 100,\n        height: 100.5\n      });\n    });\n    assert.throws(function () {\n      sharp(fixtures.inputJpgClahe).clahe({\n        width: 100,\n        height: -5\n      });\n    });\n    assert.throws(function () {\n      sharp(fixtures.inputJpgClahe).clahe({\n        width: 100,\n        height: true\n      });\n    });\n    assert.throws(function () {\n      sharp(fixtures.inputJpgClahe).clahe({\n        width: 100,\n        height: 'string test'\n      });\n    });\n  });","file":"unit/clahe.js","skipped":false,"dir":"test"},{"name":"invalid options object","suites":["Clahe"],"updatePoint":{"line":168,"column":28,"index":4631},"line":168,"code":"  it('invalid options object', function () {\n    assert.throws(function () {\n      sharp(fixtures.inputJpgClahe).clahe(100, 100, 5);\n    });\n  });","file":"unit/clahe.js","skipped":false,"dir":"test"},{"name":"uses default maxSlope of 3","suites":["Clahe"],"updatePoint":{"line":173,"column":32,"index":4782},"line":173,"code":"  it('uses default maxSlope of 3', function (done) {\n    sharp(fixtures.inputJpgClahe).clahe({\n      width: 100,\n      height: 50\n    }).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual('jpeg', info.format);\n      fixtures.assertSimilar(fixtures.expected('clahe-100-50-3.jpg'), data, done);\n    });\n  });","file":"unit/clahe.js","skipped":false,"dir":"test"},{"name":"Read from Stream and write to multiple Streams","suites":["Clone"],"updatePoint":{"line":14,"column":52,"index":346},"line":14,"code":"  it('Read from Stream and write to multiple Streams', function (done) {\n    let finishEventsExpected = 2;\n    // Output stream 1\n    const output1 = fixtures.path('output.multi-stream.1.jpg');\n    const writable1 = fs.createWriteStream(output1);\n    writable1.on('finish', function () {\n      sharp(output1).toBuffer(function (err, data, info) {\n        if (err) throw err;\n        assert.strictEqual(true, data.length > 0);\n        assert.strictEqual(data.length, info.size);\n        assert.strictEqual('jpeg', info.format);\n        assert.strictEqual(320, info.width);\n        assert.strictEqual(240, info.height);\n        fs.unlinkSync(output1);\n        finishEventsExpected--;\n        if (finishEventsExpected === 0) {\n          done();\n        }\n      });\n    });\n    // Output stream 2\n    const output2 = fixtures.path('output.multi-stream.2.jpg');\n    const writable2 = fs.createWriteStream(output2);\n    writable2.on('finish', function () {\n      sharp(output2).toBuffer(function (err, data, info) {\n        if (err) throw err;\n        assert.strictEqual(true, data.length > 0);\n        assert.strictEqual(data.length, info.size);\n        assert.strictEqual('jpeg', info.format);\n        assert.strictEqual(100, info.width);\n        assert.strictEqual(122, info.height);\n        fs.unlinkSync(output2);\n        finishEventsExpected--;\n        if (finishEventsExpected === 0) {\n          done();\n        }\n      });\n    });\n    // Create parent instance\n    const rotator = sharp().rotate(90);\n    // Cloned instances with differing dimensions\n    rotator.clone().resize(320, 240).pipe(writable1);\n    rotator.clone().resize(100, 122).pipe(writable2);\n    // Go\n    fs.createReadStream(fixtures.inputJpg).pipe(rotator);\n  });","file":"unit/clone.js","skipped":false,"dir":"test"},{"name":"Stream-based input attaches finish event listener to original","suites":["Clone"],"updatePoint":{"line":60,"column":67,"index":2096},"line":60,"code":"  it('Stream-based input attaches finish event listener to original', function () {\n    const original = sharp();\n    const clone = original.clone();\n    assert.strictEqual(1, original.listenerCount('finish'));\n    assert.strictEqual(0, clone.listenerCount('finish'));\n  });","file":"unit/clone.js","skipped":false,"dir":"test"},{"name":"Non Stream-based input does not attach finish event listeners","suites":["Clone"],"updatePoint":{"line":66,"column":67,"index":2371},"line":66,"code":"  it('Non Stream-based input does not attach finish event listeners', function () {\n    const original = sharp(fixtures.inputJpg);\n    const clone = original.clone();\n    assert.strictEqual(0, original.listenerCount('finish'));\n    assert.strictEqual(0, clone.listenerCount('finish'));\n  });","file":"unit/clone.js","skipped":false,"dir":"test"},{"name":"To greyscale","suites":["Colour space conversion"],"updatePoint":{"line":7,"column":18,"index":192},"line":7,"code":"  it('To greyscale', function (done) {\n    sharp(fixtures.inputJpg).resize(320, 240).greyscale().toFile(fixtures.path('output.greyscale-gamma-0.0.jpg'), done);\n  });","file":"unit/colourspace.js","skipped":false,"dir":"test"},{"name":"To greyscale with gamma correction","suites":["Colour space conversion"],"updatePoint":{"line":10,"column":40,"index":380},"line":10,"code":"  it('To greyscale with gamma correction', function (done) {\n    sharp(fixtures.inputJpg).resize(320, 240).gamma().grayscale().toFile(fixtures.path('output.greyscale-gamma-2.2.jpg'), done);\n  });","file":"unit/colourspace.js","skipped":false,"dir":"test"},{"name":"Not to greyscale","suites":["Colour space conversion"],"updatePoint":{"line":13,"column":22,"index":558},"line":13,"code":"  it('Not to greyscale', function (done) {\n    sharp(fixtures.inputJpg).resize(320, 240).greyscale(false).toFile(fixtures.path('output.greyscale-not.jpg'), done);\n  });","file":"unit/colourspace.js","skipped":false,"dir":"test"},{"name":"Greyscale with single channel output","suites":["Colour space conversion"],"updatePoint":{"line":16,"column":42,"index":747},"line":16,"code":"  it('Greyscale with single channel output', function (done) {\n    sharp(fixtures.inputJpg).resize(320, 240).greyscale().toColourspace('b-w').toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(1, info.channels);\n      assert.strictEqual(320, info.width);\n      assert.strictEqual(240, info.height);\n      fixtures.assertSimilar(fixtures.expected('output.greyscale-single.jpg'), data, done);\n    });\n  });","file":"unit/colourspace.js","skipped":false,"dir":"test"},{"name":"From 1-bit TIFF to sRGB WebP","suites":["Colour space conversion"],"updatePoint":{"line":25,"column":34,"index":1182},"line":25,"code":"  it('From 1-bit TIFF to sRGB WebP', async () => {\n    const data = await sharp(fixtures.inputTiff).resize(8, 8).webp().toBuffer();\n    const {\n      format\n    } = await sharp(data).metadata();\n    assert.strictEqual(format, 'webp');\n  });","file":"unit/colourspace.js","skipped":false,"dir":"test"},{"name":"From CMYK to sRGB","suites":["Colour space conversion"],"updatePoint":{"line":32,"column":23,"index":1412},"line":32,"code":"  it('From CMYK to sRGB', function (done) {\n    sharp(fixtures.inputJpgWithCmykProfile).resize(320).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(true, data.length > 0);\n      assert.strictEqual('jpeg', info.format);\n      assert.strictEqual(320, info.width);\n      done();\n    });\n  });","file":"unit/colourspace.js","skipped":false,"dir":"test"},{"name":"From CMYK to sRGB with white background, not yellow","suites":["Colour space conversion"],"updatePoint":{"line":41,"column":57,"index":1777},"line":41,"code":"  it('From CMYK to sRGB with white background, not yellow', function (done) {\n    sharp(fixtures.inputJpgWithCmykProfile).resize(320, 240, {\n      fit: sharp.fit.contain,\n      background: 'white'\n    }).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual('jpeg', info.format);\n      assert.strictEqual(320, info.width);\n      assert.strictEqual(240, info.height);\n      fixtures.assertSimilar(fixtures.expected('colourspace.cmyk.jpg'), data, done);\n    });\n  });","file":"unit/colourspace.js","skipped":false,"dir":"test"},{"name":"From profile-less CMYK to sRGB","suites":["Colour space conversion"],"updatePoint":{"line":53,"column":36,"index":2257},"line":53,"code":"  it('From profile-less CMYK to sRGB', function (done) {\n    sharp(fixtures.inputJpgWithCmykNoProfile).resize(320).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual('jpeg', info.format);\n      assert.strictEqual(320, info.width);\n      fixtures.assertSimilar(fixtures.expected('colourspace.cmyk-without-profile.jpg'), data, done);\n    });\n  });","file":"unit/colourspace.js","skipped":false,"dir":"test"},{"name":"From sRGB with RGB16 pipeline, resize with gamma, to sRGB","suites":["Colour space conversion"],"updatePoint":{"line":61,"column":63,"index":2668},"line":61,"code":"  it('From sRGB with RGB16 pipeline, resize with gamma, to sRGB', function (done) {\n    sharp(fixtures.inputPngGradients).pipelineColourspace('rgb16').resize(320).gamma().toColourspace('srgb').toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(320, info.width);\n      fixtures.assertSimilar(fixtures.expected('colourspace-gradients-gamma-resize.png'), data, {\n        threshold: 0\n      }, done);\n    });\n  });","file":"unit/colourspace.js","skipped":false,"dir":"test"},{"name":"Convert P3 to sRGB","suites":["Colour space conversion"],"updatePoint":{"line":70,"column":24,"index":3078},"line":70,"code":"  it('Convert P3 to sRGB', async () => {\n    const [r, g, b] = await sharp(fixtures.inputPngP3).raw().toBuffer();\n    assert.strictEqual(r, 255);\n    assert.strictEqual(g, 0);\n    assert.strictEqual(b, 0);\n  });","file":"unit/colourspace.js","skipped":false,"dir":"test"},{"name":"Passthrough P3","suites":["Colour space conversion"],"updatePoint":{"line":76,"column":20,"index":3286},"line":76,"code":"  it('Passthrough P3', async () => {\n    const [r, g, b] = await sharp(fixtures.inputPngP3).withMetadata({\n      icc: 'p3'\n    }).raw().toBuffer();\n    assert.strictEqual(r, 234);\n    assert.strictEqual(g, 51);\n    assert.strictEqual(b, 34);\n  });","file":"unit/colourspace.js","skipped":false,"dir":"test"},{"name":"Invalid pipelineColourspace input","suites":["Colour space conversion"],"updatePoint":{"line":84,"column":39,"index":3553},"line":84,"code":"  it('Invalid pipelineColourspace input', function () {\n    assert.throws(function () {\n      sharp(fixtures.inputJpg).pipelineColorspace(null);\n    }, /Expected string for colourspace but received null of type object/);\n  });","file":"unit/colourspace.js","skipped":false,"dir":"test"},{"name":"Invalid toColourspace input","suites":["Colour space conversion"],"updatePoint":{"line":89,"column":33,"index":3774},"line":89,"code":"  it('Invalid toColourspace input', function () {\n    assert.throws(function () {\n      sharp(fixtures.inputJpg).toColourspace(null);\n    });\n  });","file":"unit/colourspace.js","skipped":false,"dir":"test"},{"name":"blend","suites":["composite"],"updatePoint":{"line":52,"column":11,"index":723},"line":52,"code":"  it('blend', () => Promise.all(blends.map(blend => {\n    const filename = `composite.blend.${blend}.png`;\n    const actual = fixtures.path(`output.${filename}`);\n    const expected = fixtures.expected(filename);\n    return sharp(redRect).composite([{\n      input: blueRect,\n      blend\n    }]).toFile(actual).then(() => {\n      fixtures.assertMaxColourDistance(actual, expected);\n    });\n  })));","file":"unit/composite.js","skipped":false,"dir":"test"},{"name":"premultiplied true","suites":["composite"],"updatePoint":{"line":63,"column":24,"index":1133},"line":63,"code":"  it('premultiplied true', () => {\n    const filename = 'composite.premultiplied.png';\n    const below = fixtures.path(`input.below.${filename}`);\n    const above = fixtures.path(`input.above.${filename}`);\n    const actual = fixtures.path(`output.true.${filename}`);\n    const expected = fixtures.expected(`expected.true.${filename}`);\n    return sharp(below).composite([{\n      input: above,\n      blend: 'color-burn',\n      top: 0,\n      left: 0,\n      premultiplied: true\n    }]).toFile(actual).then(() => {\n      fixtures.assertMaxColourDistance(actual, expected);\n    });\n  });","file":"unit/composite.js","skipped":false,"dir":"test"},{"name":"premultiplied false","suites":["composite"],"updatePoint":{"line":79,"column":25,"index":1718},"line":79,"code":"  it('premultiplied false', () => {\n    const filename = 'composite.premultiplied.png';\n    const below = fixtures.path(`input.below.${filename}`);\n    const above = fixtures.path(`input.above.${filename}`);\n    const actual = fixtures.path(`output.false.${filename}`);\n    const expected = fixtures.expected(`expected.false.${filename}`);\n    return sharp(below).composite([{\n      input: above,\n      blend: 'color-burn',\n      top: 0,\n      left: 0,\n      premultiplied: false\n    }]).toFile(actual).then(() => {\n      fixtures.assertMaxColourDistance(actual, expected);\n    });\n  });","file":"unit/composite.js","skipped":false,"dir":"test"},{"name":"premultiplied absent","suites":["composite"],"updatePoint":{"line":95,"column":26,"index":2307},"line":95,"code":"  it('premultiplied absent', () => {\n    const filename = 'composite.premultiplied.png';\n    const below = fixtures.path(`input.below.${filename}`);\n    const above = fixtures.path(`input.above.${filename}`);\n    const actual = fixtures.path(`output.absent.${filename}`);\n    const expected = fixtures.expected(`expected.absent.${filename}`);\n    return sharp(below).composite([{\n      input: above,\n      blend: 'color-burn',\n      top: 0,\n      left: 0\n    }]).toFile(actual).then(() => {\n      fixtures.assertMaxColourDistance(actual, expected);\n    });\n  });","file":"unit/composite.js","skipped":false,"dir":"test"},{"name":"multiple","suites":["composite"],"updatePoint":{"line":110,"column":14,"index":2858},"line":110,"code":"  it('multiple', () => {\n    const filename = 'composite-multiple.png';\n    const actual = fixtures.path(`output.${filename}`);\n    const expected = fixtures.expected(filename);\n    return sharp(redRect).composite([{\n      input: blueRect,\n      gravity: 'northeast'\n    }, {\n      input: greenRect,\n      gravity: 'southwest'\n    }]).toFile(actual).then(() => {\n      fixtures.assertMaxColourDistance(actual, expected);\n    });\n  });","file":"unit/composite.js","skipped":false,"dir":"test"},{"name":"zero offset","suites":["composite"],"updatePoint":{"line":124,"column":17,"index":3296},"line":124,"code":"  it('zero offset', done => {\n    sharp(fixtures.inputJpg).resize(80).composite([{\n      input: fixtures.inputPngWithTransparency16bit,\n      top: 0,\n      left: 0\n    }]).toBuffer((err, data, info) => {\n      if (err) throw err;\n      assert.strictEqual('jpeg', info.format);\n      assert.strictEqual(3, info.channels);\n      fixtures.assertSimilar(fixtures.expected('overlay-offset-0.jpg'), data, done);\n    });\n  });","file":"unit/composite.js","skipped":false,"dir":"test"},{"name":"offset and gravity","suites":["composite"],"updatePoint":{"line":136,"column":24,"index":3723},"line":136,"code":"  it('offset and gravity', done => {\n    sharp(fixtures.inputJpg).resize(80).composite([{\n      input: fixtures.inputPngWithTransparency16bit,\n      left: 10,\n      top: 10,\n      gravity: 4\n    }]).toBuffer((err, data, info) => {\n      if (err) throw err;\n      assert.strictEqual('jpeg', info.format);\n      assert.strictEqual(3, info.channels);\n      fixtures.assertSimilar(fixtures.expected('overlay-offset-with-gravity.jpg'), data, done);\n    });\n  });","file":"unit/composite.js","skipped":false,"dir":"test"},{"name":"negative offset and gravity","suites":["composite"],"updatePoint":{"line":149,"column":33,"index":4190},"line":149,"code":"  it('negative offset and gravity', done => {\n    sharp(fixtures.inputJpg).resize(400).composite([{\n      input: fixtures.inputPngWithTransparency16bit,\n      left: -10,\n      top: -10,\n      gravity: 4\n    }]).toBuffer((err, data, info) => {\n      if (err) throw err;\n      assert.strictEqual('jpeg', info.format);\n      assert.strictEqual(3, info.channels);\n      fixtures.assertSimilar(fixtures.expected('overlay-negative-offset-with-gravity.jpg'), data, done);\n    });\n  });","file":"unit/composite.js","skipped":false,"dir":"test"},{"name":"offset, gravity and tile","suites":["composite"],"updatePoint":{"line":162,"column":30,"index":4666},"line":162,"code":"  it('offset, gravity and tile', done => {\n    sharp(fixtures.inputJpg).resize(80).composite([{\n      input: fixtures.inputPngWithTransparency16bit,\n      left: 10,\n      top: 10,\n      gravity: 4,\n      tile: true\n    }]).toBuffer((err, data, info) => {\n      if (err) throw err;\n      assert.strictEqual('jpeg', info.format);\n      assert.strictEqual(3, info.channels);\n      fixtures.assertSimilar(fixtures.expected('overlay-offset-with-gravity-tile.jpg'), data, done);\n    });\n  });","file":"unit/composite.js","skipped":false,"dir":"test"},{"name":"offset and tile","suites":["composite"],"updatePoint":{"line":176,"column":21,"index":5144},"line":176,"code":"  it('offset and tile', done => {\n    sharp(fixtures.inputJpg).resize(80).composite([{\n      input: fixtures.inputPngWithTransparency16bit,\n      left: 10,\n      top: 10,\n      tile: true\n    }]).toBuffer((err, data, info) => {\n      if (err) throw err;\n      assert.strictEqual('jpeg', info.format);\n      assert.strictEqual(3, info.channels);\n      fixtures.assertSimilar(fixtures.expected('overlay-offset-with-tile.jpg'), data, done);\n    });\n  });","file":"unit/composite.js","skipped":false,"dir":"test"},{"name":"centre gravity should replicate correct number of tiles","suites":["composite"],"updatePoint":{"line":189,"column":61,"index":5636},"line":189,"code":"  it('centre gravity should replicate correct number of tiles', async () => {\n    const red = {\n      r: 255,\n      g: 0,\n      b: 0\n    };\n    const [r, g, b] = await sharp({\n      create: {\n        width: 40,\n        height: 40,\n        channels: 4,\n        background: red\n      }\n    }).composite([{\n      input: fixtures.inputPngWithTransparency16bit,\n      gravity: 'centre',\n      tile: true\n    }]).raw().toBuffer();\n    assert.deepStrictEqual({\n      r,\n      g,\n      b\n    }, red);\n  });","file":"unit/composite.js","skipped":false,"dir":"test"},{"name":"cutout via dest-in","suites":["composite"],"updatePoint":{"line":213,"column":24,"index":6098},"line":213,"code":"  it('cutout via dest-in', done => {\n    sharp(fixtures.inputJpg).resize(300, 300).composite([{\n      input: Buffer.from('<svg><rect x=\"0\" y=\"0\" width=\"200\" height=\"200\" rx=\"50\" ry=\"50\"/></svg>'),\n      density: 96,\n      blend: 'dest-in',\n      cutout: true\n    }]).png().toBuffer((err, data, info) => {\n      if (err) throw err;\n      assert.strictEqual('png', info.format);\n      assert.strictEqual(300, info.width);\n      assert.strictEqual(300, info.height);\n      assert.strictEqual(4, info.channels);\n      fixtures.assertSimilar(fixtures.expected('composite-cutout.png'), data, done);\n    });\n  });","file":"unit/composite.js","skipped":false,"dir":"test"},{"name":"missing images","suites":["composite","validation"],"updatePoint":{"line":283,"column":22,"index":8838},"line":283,"code":"    it('missing images', () => {\n      assert.throws(() => {\n        sharp().composite();\n      }, /Expected array for images to composite but received undefined of type undefined/);\n    });","file":"unit/composite.js","skipped":false,"dir":"test"},{"name":"invalid images","suites":["composite","validation"],"updatePoint":{"line":288,"column":22,"index":9029},"line":288,"code":"    it('invalid images', () => {\n      assert.throws(() => {\n        sharp().composite(['invalid']);\n      }, /Expected object for image to composite but received invalid of type string/);\n    });","file":"unit/composite.js","skipped":false,"dir":"test"},{"name":"missing input","suites":["composite","validation"],"updatePoint":{"line":293,"column":21,"index":9225},"line":293,"code":"    it('missing input', () => {\n      assert.throws(() => {\n        sharp().composite([{}]);\n      }, /Unsupported input/);\n    });","file":"unit/composite.js","skipped":false,"dir":"test"},{"name":"invalid blend","suites":["composite","validation"],"updatePoint":{"line":298,"column":21,"index":9357},"line":298,"code":"    it('invalid blend', () => {\n      assert.throws(() => {\n        sharp().composite([{\n          input: 'test',\n          blend: 'invalid'\n        }]);\n      }, /Expected valid blend name for blend but received invalid of type string/);\n    });","file":"unit/composite.js","skipped":false,"dir":"test"},{"name":"invalid tile","suites":["composite","validation"],"updatePoint":{"line":306,"column":20,"index":9603},"line":306,"code":"    it('invalid tile', () => {\n      assert.throws(() => {\n        sharp().composite([{\n          input: 'test',\n          tile: 'invalid'\n        }]);\n      }, /Expected boolean for tile but received invalid of type string/);\n    });","file":"unit/composite.js","skipped":false,"dir":"test"},{"name":"invalid premultiplied","suites":["composite","validation"],"updatePoint":{"line":314,"column":29,"index":9847},"line":314,"code":"    it('invalid premultiplied', () => {\n      assert.throws(() => {\n        sharp().composite([{\n          input: 'test',\n          premultiplied: 'invalid'\n        }]);\n      }, /Expected boolean for premultiplied but received invalid of type string/);\n    });","file":"unit/composite.js","skipped":false,"dir":"test"},{"name":"invalid left","suites":["composite","validation"],"updatePoint":{"line":322,"column":20,"index":10100},"line":322,"code":"    it('invalid left', () => {\n      assert.throws(() => {\n        sharp().composite([{\n          input: 'test',\n          left: 0.5\n        }]);\n      }, /Expected integer for left but received 0.5 of type number/);\n      assert.throws(() => {\n        sharp().composite([{\n          input: 'test',\n          left: 'invalid'\n        }]);\n      }, /Expected integer for left but received invalid of type string/);\n      assert.throws(() => {\n        sharp().composite([{\n          input: 'test',\n          left: 'invalid',\n          top: 10\n        }]);\n      }, /Expected integer for left but received invalid of type string/);\n    });","file":"unit/composite.js","skipped":false,"dir":"test"},{"name":"invalid top","suites":["composite","validation"],"updatePoint":{"line":343,"column":19,"index":10735},"line":343,"code":"    it('invalid top', () => {\n      assert.throws(() => {\n        sharp().composite([{\n          input: 'test',\n          top: 0.5\n        }]);\n      }, /Expected integer for top but received 0.5 of type number/);\n      assert.throws(() => {\n        sharp().composite([{\n          input: 'test',\n          top: 'invalid'\n        }]);\n      }, /Expected integer for top but received invalid of type string/);\n      assert.throws(() => {\n        sharp().composite([{\n          input: 'test',\n          top: 'invalid',\n          left: 10\n        }]);\n      }, /Expected integer for top but received invalid of type string/);\n    });","file":"unit/composite.js","skipped":false,"dir":"test"},{"name":"left but no top","suites":["composite","validation"],"updatePoint":{"line":364,"column":23,"index":11369},"line":364,"code":"    it('left but no top', () => {\n      assert.throws(() => {\n        sharp().composite([{\n          input: 'test',\n          left: 1\n        }]);\n      }, /Expected both left and top to be set/);\n    });","file":"unit/composite.js","skipped":false,"dir":"test"},{"name":"top but no left","suites":["composite","validation"],"updatePoint":{"line":372,"column":23,"index":11574},"line":372,"code":"    it('top but no left', () => {\n      assert.throws(() => {\n        sharp().composite([{\n          input: 'test',\n          top: 1\n        }]);\n      }, /Expected both left and top to be set/);\n    });","file":"unit/composite.js","skipped":false,"dir":"test"},{"name":"invalid gravity","suites":["composite","validation"],"updatePoint":{"line":380,"column":23,"index":11778},"line":380,"code":"    it('invalid gravity', () => {\n      assert.throws(() => {\n        sharp().composite([{\n          input: 'test',\n          gravity: 'invalid'\n        }]);\n      }, /Expected valid gravity for gravity but received invalid of type string/);\n    });","file":"unit/composite.js","skipped":false,"dir":"test"},{"name":"Allow offset beyond bottom/right edge","suites":["composite","validation"],"updatePoint":{"line":389,"column":43,"index":12054},"line":389,"code":"  it('Allow offset beyond bottom/right edge', async () => {\n    const red = {\n      r: 255,\n      g: 0,\n      b: 0\n    };\n    const blue = {\n      r: 0,\n      g: 0,\n      b: 255\n    };\n    const [r, g, b] = await sharp({\n      create: {\n        width: 2,\n        height: 2,\n        channels: 4,\n        background: red\n      }\n    }).composite([{\n      input: {\n        create: {\n          width: 2,\n          height: 2,\n          channels: 4,\n          background: blue\n        }\n      },\n      top: 1,\n      left: 1\n    }]).raw().toBuffer();\n    assert.deepStrictEqual(red, {\n      r,\n      g,\n      b\n    });\n  });","file":"unit/composite.js","skipped":false,"dir":"test"},{"name":"specific convolution kernel 1","suites":["Convolve"],"updatePoint":{"line":7,"column":35,"index":194},"line":7,"code":"  it('specific convolution kernel 1', function (done) {\n    sharp(fixtures.inputPngStripesV).convolve({\n      width: 3,\n      height: 3,\n      scale: 50,\n      offset: 0,\n      kernel: [10, 20, 10, 0, 0, 0, 10, 20, 10]\n    }).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual('png', info.format);\n      assert.strictEqual(320, info.width);\n      assert.strictEqual(240, info.height);\n      fixtures.assertSimilar(fixtures.expected('conv-1.png'), data, done);\n    });\n  });","file":"unit/convolve.js","skipped":false,"dir":"test"},{"name":"specific convolution kernel 2","suites":["Convolve"],"updatePoint":{"line":22,"column":35,"index":706},"line":22,"code":"  it('specific convolution kernel 2', function (done) {\n    sharp(fixtures.inputPngStripesH).convolve({\n      width: 3,\n      height: 3,\n      kernel: [1, 0, 1, 2, 0, 2, 1, 0, 1]\n    }).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual('png', info.format);\n      assert.strictEqual(320, info.width);\n      assert.strictEqual(240, info.height);\n      fixtures.assertSimilar(fixtures.expected('conv-2.png'), data, done);\n    });\n  });","file":"unit/convolve.js","skipped":false,"dir":"test"},{"name":"horizontal Sobel operator","suites":["Convolve"],"updatePoint":{"line":35,"column":31,"index":1174},"line":35,"code":"  it('horizontal Sobel operator', function (done) {\n    sharp(fixtures.inputJpg).resize(320, 240).convolve({\n      width: 3,\n      height: 3,\n      kernel: [-1, 0, 1, -2, 0, 2, -1, 0, 1]\n    }).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual('jpeg', info.format);\n      assert.strictEqual(320, info.width);\n      assert.strictEqual(240, info.height);\n      fixtures.assertSimilar(fixtures.expected('conv-sobel-horizontal.jpg'), data, done);\n    });\n  });","file":"unit/convolve.js","skipped":false,"dir":"test"},{"name":"missing","suites":["Convolve","invalid kernel specification"],"updatePoint":{"line":49,"column":15,"index":1711},"line":49,"code":"    it('missing', function () {\n      assert.throws(function () {\n        sharp(fixtures.inputJpg).convolve({});\n      });\n    });","file":"unit/convolve.js","skipped":false,"dir":"test"},{"name":"incorrect data format","suites":["Convolve","invalid kernel specification"],"updatePoint":{"line":54,"column":29,"index":1856},"line":54,"code":"    it('incorrect data format', function () {\n      assert.throws(function () {\n        sharp(fixtures.inputJpg).convolve({\n          width: 3,\n          height: 3,\n          kernel: [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n        });\n      });\n    });","file":"unit/convolve.js","skipped":false,"dir":"test"},{"name":"incorrect dimensions","suites":["Convolve","invalid kernel specification"],"updatePoint":{"line":63,"column":28,"index":2102},"line":63,"code":"    it('incorrect dimensions', function () {\n      assert.throws(function () {\n        sharp(fixtures.inputJpg).convolve({\n          width: 3,\n          height: 4,\n          kernel: [1, 2, 3, 4, 5, 6, 7, 8, 9]\n        });\n      });\n    });","file":"unit/convolve.js","skipped":false,"dir":"test"},{"name":"extend all sides equally via a single value","suites":["Extend"],"updatePoint":{"line":7,"column":49,"index":206},"line":7,"code":"  it('extend all sides equally via a single value', function (done) {\n    sharp(fixtures.inputJpg).resize(120).extend(10).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(140, info.width);\n      assert.strictEqual(118, info.height);\n      fixtures.assertSimilar(fixtures.expected('extend-equal-single.jpg'), data, done);\n    });\n  });","file":"unit/extend.js","skipped":false,"dir":"test"},{"name":"extend all sides equally with RGB","suites":["Extend"],"updatePoint":{"line":15,"column":39,"index":571},"line":15,"code":"  it('extend all sides equally with RGB', function (done) {\n    sharp(fixtures.inputJpg).resize(120).extend({\n      top: 10,\n      bottom: 10,\n      left: 10,\n      right: 10,\n      background: {\n        r: 255,\n        g: 0,\n        b: 0\n      }\n    }).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(140, info.width);\n      assert.strictEqual(118, info.height);\n      fixtures.assertSimilar(fixtures.expected('extend-equal.jpg'), data, done);\n    });\n  });","file":"unit/extend.js","skipped":false,"dir":"test"},{"name":"extend sides unequally with RGBA","suites":["Extend"],"updatePoint":{"line":33,"column":38,"index":1070},"line":33,"code":"  it('extend sides unequally with RGBA', function (done) {\n    sharp(fixtures.inputPngWithTransparency16bit).resize(120).extend({\n      top: 50,\n      left: 10,\n      right: 35,\n      background: {\n        r: 0,\n        g: 0,\n        b: 0,\n        alpha: 0\n      }\n    }).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(165, info.width);\n      assert.strictEqual(170, info.height);\n      fixtures.assertSimilar(fixtures.expected('extend-unequal.png'), data, done);\n    });\n  });","file":"unit/extend.js","skipped":false,"dir":"test"},{"name":"missing parameter fails","suites":["Extend"],"updatePoint":{"line":51,"column":29,"index":1581},"line":51,"code":"  it('missing parameter fails', function () {\n    assert.throws(function () {\n      sharp().extend();\n    });\n  });","file":"unit/extend.js","skipped":false,"dir":"test"},{"name":"negative fails","suites":["Extend"],"updatePoint":{"line":56,"column":20,"index":1688},"line":56,"code":"  it('negative fails', function () {\n    assert.throws(function () {\n      sharp().extend(-1);\n    });\n  });","file":"unit/extend.js","skipped":false,"dir":"test"},{"name":"invalid top fails","suites":["Extend"],"updatePoint":{"line":61,"column":23,"index":1800},"line":61,"code":"  it('invalid top fails', () => {\n    assert.throws(() => sharp().extend({\n      top: 'fail'\n    }), /Expected positive integer for top but received fail of type string/);\n  });","file":"unit/extend.js","skipped":false,"dir":"test"},{"name":"invalid bottom fails","suites":["Extend"],"updatePoint":{"line":66,"column":26,"index":1981},"line":66,"code":"  it('invalid bottom fails', () => {\n    assert.throws(() => sharp().extend({\n      bottom: -1\n    }), /Expected positive integer for bottom but received -1 of type number/);\n  });","file":"unit/extend.js","skipped":false,"dir":"test"},{"name":"invalid left fails","suites":["Extend"],"updatePoint":{"line":71,"column":24,"index":2160},"line":71,"code":"  it('invalid left fails', () => {\n    assert.throws(() => sharp().extend({\n      left: 0.1\n    }), /Expected positive integer for left but received 0.1 of type number/);\n  });","file":"unit/extend.js","skipped":false,"dir":"test"},{"name":"invalid right fails","suites":["Extend"],"updatePoint":{"line":76,"column":25,"index":2338},"line":76,"code":"  it('invalid right fails', () => {\n    assert.throws(() => sharp().extend({\n      right: {}\n    }), /Expected positive integer for right but received \\[object Object\\] of type object/);\n  });","file":"unit/extend.js","skipped":false,"dir":"test"},{"name":"can set all edges apart from right","suites":["Extend"],"updatePoint":{"line":81,"column":40,"index":2546},"line":81,"code":"  it('can set all edges apart from right', () => {\n    assert.doesNotThrow(() => sharp().extend({\n      top: 1,\n      left: 2,\n      bottom: 3\n    }));\n  });","file":"unit/extend.js","skipped":false,"dir":"test"},{"name":"should add alpha channel before extending with a transparent Background","suites":["Extend"],"updatePoint":{"line":88,"column":77,"index":2741},"line":88,"code":"  it('should add alpha channel before extending with a transparent Background', function (done) {\n    sharp(fixtures.inputJpgWithLandscapeExif1).extend({\n      bottom: 10,\n      right: 10,\n      background: {\n        r: 0,\n        g: 0,\n        b: 0,\n        alpha: 0\n      }\n    }).toFormat(sharp.format.png).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(610, info.width);\n      assert.strictEqual(460, info.height);\n      fixtures.assertSimilar(fixtures.expected('addAlphaChanelBeforeExtend.png'), data, done);\n    });\n  });","file":"unit/extend.js","skipped":false,"dir":"test"},{"name":"PNG with 2 channels","suites":["Extend"],"updatePoint":{"line":105,"column":25,"index":3259},"line":105,"code":"  it('PNG with 2 channels', function (done) {\n    sharp(fixtures.inputPngWithGreyAlpha).extend({\n      bottom: 20,\n      right: 20,\n      background: 'transparent'\n    }).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(true, data.length > 0);\n      assert.strictEqual('png', info.format);\n      assert.strictEqual(420, info.width);\n      assert.strictEqual(320, info.height);\n      assert.strictEqual(4, info.channels);\n      fixtures.assertSimilar(fixtures.expected('extend-2channel.png'), data, done);\n    });\n  });","file":"unit/extend.js","skipped":false,"dir":"test"},{"name":"Premultiply background when compositing","suites":["Extend"],"updatePoint":{"line":120,"column":45,"index":3838},"line":120,"code":"  it('Premultiply background when compositing', async () => {\n    const background = '#bf1942cc';\n    const data = await sharp({\n      create: {\n        width: 1,\n        height: 1,\n        channels: 4,\n        background: '#fff0'\n      }\n    }).composite([{\n      input: {\n        create: {\n          width: 1,\n          height: 1,\n          channels: 4,\n          background\n        }\n      }\n    }]).extend({\n      left: 1,\n      background\n    }).raw().toBuffer();\n    const [r1, g1, b1, a1, r2, g2, b2, a2] = data;\n    assert.strictEqual(true, Math.abs(r2 - r1) < 2);\n    assert.strictEqual(true, Math.abs(g2 - g1) < 2);\n    assert.strictEqual(true, Math.abs(b2 - b1) < 2);\n    assert.strictEqual(true, Math.abs(a2 - a1) < 2);\n  });","file":"unit/extend.js","skipped":false,"dir":"test"},{"name":"JPEG","suites":["Partial image extraction"],"updatePoint":{"line":7,"column":10,"index":185},"line":7,"code":"  it('JPEG', function (done) {\n    sharp(fixtures.inputJpg).extract({\n      left: 2,\n      top: 2,\n      width: 20,\n      height: 20\n    }).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(20, info.width);\n      assert.strictEqual(20, info.height);\n      fixtures.assertSimilar(fixtures.expected('extract.jpg'), data, done);\n    });\n  });","file":"unit/extract.js","skipped":false,"dir":"test"},{"name":"PNG","suites":["Partial image extraction"],"updatePoint":{"line":20,"column":9,"index":563},"line":20,"code":"  it('PNG', function (done) {\n    sharp(fixtures.inputPng).extract({\n      left: 200,\n      top: 300,\n      width: 400,\n      height: 200\n    }).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(400, info.width);\n      assert.strictEqual(200, info.height);\n      fixtures.assertSimilar(fixtures.expected('extract.png'), data, done);\n    });\n  });","file":"unit/extract.js","skipped":false,"dir":"test"},{"name":"WebP","suites":["Partial image extraction"],"updatePoint":{"line":33,"column":10,"index":950},"line":33,"code":"  it('WebP', function (done) {\n    sharp(fixtures.inputWebP).extract({\n      left: 100,\n      top: 50,\n      width: 125,\n      height: 200\n    }).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(125, info.width);\n      assert.strictEqual(200, info.height);\n      fixtures.assertSimilar(fixtures.expected('extract.webp'), data, done);\n    });\n  });","file":"unit/extract.js","skipped":false,"dir":"test"},{"name":"TIFF","suites":["Partial image extraction"],"updatePoint":{"line":46,"column":10,"index":1338},"line":46,"code":"  it('TIFF', function (done) {\n    sharp(fixtures.inputTiff).extract({\n      left: 34,\n      top: 63,\n      width: 341,\n      height: 529\n    }).jpeg().toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(341, info.width);\n      assert.strictEqual(529, info.height);\n      fixtures.assertSimilar(fixtures.expected('extract.tiff'), data, done);\n    });\n  });","file":"unit/extract.js","skipped":false,"dir":"test"},{"name":"Before resize","suites":["Partial image extraction"],"updatePoint":{"line":59,"column":19,"index":1741},"line":59,"code":"  it('Before resize', function (done) {\n    sharp(fixtures.inputJpg).extract({\n      left: 10,\n      top: 10,\n      width: 10,\n      height: 500\n    }).resize(100, 100).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(100, info.width);\n      assert.strictEqual(100, info.height);\n      fixtures.assertSimilar(fixtures.expected('extract-resize.jpg'), data, done);\n    });\n  });","file":"unit/extract.js","skipped":false,"dir":"test"},{"name":"After resize and crop","suites":["Partial image extraction"],"updatePoint":{"line":72,"column":27,"index":2166},"line":72,"code":"  it('After resize and crop', function (done) {\n    sharp(fixtures.inputJpg).resize(500, 500, {\n      position: sharp.gravity.north\n    }).extract({\n      left: 10,\n      top: 10,\n      width: 100,\n      height: 100\n    }).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(100, info.width);\n      assert.strictEqual(100, info.height);\n      fixtures.assertSimilar(fixtures.expected('resize-crop-extract.jpg'), data, done);\n    });\n  });","file":"unit/extract.js","skipped":false,"dir":"test"},{"name":"Before and after resize and crop","suites":["Partial image extraction"],"updatePoint":{"line":87,"column":38,"index":2653},"line":87,"code":"  it('Before and after resize and crop', function (done) {\n    sharp(fixtures.inputJpg).extract({\n      left: 0,\n      top: 0,\n      width: 700,\n      height: 700\n    }).resize(500, 500, {\n      position: sharp.gravity.north\n    }).extract({\n      left: 10,\n      top: 10,\n      width: 100,\n      height: 100\n    }).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(100, info.width);\n      assert.strictEqual(100, info.height);\n      fixtures.assertSimilar(fixtures.expected('extract-resize-crop-extract.jpg'), data, done);\n    });\n  });","file":"unit/extract.js","skipped":false,"dir":"test"},{"name":"Extract then rotate","suites":["Partial image extraction"],"updatePoint":{"line":107,"column":25,"index":3217},"line":107,"code":"  it('Extract then rotate', function (done) {\n    sharp(fixtures.inputPngWithGreyAlpha).extract({\n      left: 20,\n      top: 10,\n      width: 380,\n      height: 280\n    }).rotate(90).jpeg().toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(280, info.width);\n      assert.strictEqual(380, info.height);\n      fixtures.assertSimilar(fixtures.expected('extract-rotate.jpg'), data, done);\n    });\n  });","file":"unit/extract.js","skipped":false,"dir":"test"},{"name":"Rotate then extract","suites":["Partial image extraction"],"updatePoint":{"line":120,"column":25,"index":3655},"line":120,"code":"  it('Rotate then extract', function (done) {\n    sharp(fixtures.inputPngWithGreyAlpha).rotate(90).extract({\n      left: 20,\n      top: 10,\n      width: 280,\n      height: 380\n    }).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(280, info.width);\n      assert.strictEqual(380, info.height);\n      fixtures.assertSimilar(fixtures.expected('rotate-extract.jpg'), data, {\n        threshold: 7\n      }, done);\n    });\n  });","file":"unit/extract.js","skipped":false,"dir":"test"},{"name":"Extract then rotate non-90 anagle","suites":["Partial image extraction"],"updatePoint":{"line":135,"column":39,"index":4132},"line":135,"code":"  it('Extract then rotate non-90 anagle', function (done) {\n    sharp(fixtures.inputPngWithGreyAlpha).extract({\n      left: 20,\n      top: 10,\n      width: 380,\n      height: 280\n    }).rotate(45).jpeg().toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(467, info.width);\n      assert.strictEqual(467, info.height);\n      fixtures.assertSimilar(fixtures.expected('extract-rotate-45.jpg'), data, done);\n    });\n  });","file":"unit/extract.js","skipped":false,"dir":"test"},{"name":"Rotate then extract non-90 angle","suites":["Partial image extraction"],"updatePoint":{"line":148,"column":38,"index":4586},"line":148,"code":"  it('Rotate then extract non-90 angle', function (done) {\n    sharp(fixtures.inputPngWithGreyAlpha).rotate(45).extract({\n      left: 20,\n      top: 10,\n      width: 380,\n      height: 280\n    }).jpeg().toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(380, info.width);\n      assert.strictEqual(280, info.height);\n      fixtures.assertSimilar(fixtures.expected('rotate-extract-45.jpg'), data, {\n        threshold: 7\n      }, done);\n    });\n  });","file":"unit/extract.js","skipped":false,"dir":"test"},{"name":"String top","suites":["Partial image extraction","Invalid parameters","using the legacy extract(top,left,width,height) syntax"],"updatePoint":{"line":165,"column":20,"index":5186},"line":165,"code":"      it('String top', function () {\n        assert.throws(function () {\n          sharp(fixtures.inputJpg).extract('spoons', 10, 10, 10);\n        });\n      });","file":"unit/extract.js","skipped":false,"dir":"test"},{"name":"Non-integral left","suites":["Partial image extraction","Invalid parameters","using the legacy extract(top,left,width,height) syntax"],"updatePoint":{"line":170,"column":27,"index":5354},"line":170,"code":"      it('Non-integral left', function () {\n        assert.throws(function () {\n          sharp(fixtures.inputJpg).extract(10, 10.2, 10, 10);\n        });\n      });","file":"unit/extract.js","skipped":false,"dir":"test"},{"name":"Negative width - negative","suites":["Partial image extraction","Invalid parameters","using the legacy extract(top,left,width,height) syntax"],"updatePoint":{"line":175,"column":35,"index":5526},"line":175,"code":"      it('Negative width - negative', function () {\n        assert.throws(function () {\n          sharp(fixtures.inputJpg).extract(10, 10, -10, 10);\n        });\n      });","file":"unit/extract.js","skipped":false,"dir":"test"},{"name":"Null height","suites":["Partial image extraction","Invalid parameters","using the legacy extract(top,left,width,height) syntax"],"updatePoint":{"line":180,"column":21,"index":5683},"line":180,"code":"      it('Null height', function () {\n        assert.throws(function () {\n          sharp(fixtures.inputJpg).extract(10, 10, 10, null);\n        });\n      });","file":"unit/extract.js","skipped":false,"dir":"test"},{"name":"Undefined","suites":["Partial image extraction","Invalid parameters","using the legacy extract(top,left,width,height) syntax"],"updatePoint":{"line":186,"column":17,"index":5845},"line":186,"code":"    it('Undefined', function () {\n      assert.throws(function () {\n        sharp(fixtures.inputJpg).extract();\n      });\n    });","file":"unit/extract.js","skipped":false,"dir":"test"},{"name":"String top","suites":["Partial image extraction","Invalid parameters","using the legacy extract(top,left,width,height) syntax"],"updatePoint":{"line":191,"column":18,"index":5976},"line":191,"code":"    it('String top', function () {\n      assert.throws(function () {\n        sharp(fixtures.inputJpg).extract({\n          left: 10,\n          top: 'spoons',\n          width: 10,\n          height: 10\n        });\n      });\n    });","file":"unit/extract.js","skipped":false,"dir":"test"},{"name":"Non-integral left","suites":["Partial image extraction","Invalid parameters","using the legacy extract(top,left,width,height) syntax"],"updatePoint":{"line":201,"column":25,"index":6212},"line":201,"code":"    it('Non-integral left', function () {\n      assert.throws(function () {\n        sharp(fixtures.inputJpg).extract({\n          left: 10.2,\n          top: 10,\n          width: 10,\n          height: 10\n        });\n      });\n    });","file":"unit/extract.js","skipped":false,"dir":"test"},{"name":"Negative width - negative","suites":["Partial image extraction","Invalid parameters","using the legacy extract(top,left,width,height) syntax"],"updatePoint":{"line":211,"column":33,"index":6452},"line":211,"code":"    it('Negative width - negative', function () {\n      assert.throws(function () {\n        sharp(fixtures.inputJpg).extract({\n          left: 10,\n          top: 10,\n          width: -10,\n          height: 10\n        });\n      });\n    });","file":"unit/extract.js","skipped":false,"dir":"test"},{"name":"Null height","suites":["Partial image extraction","Invalid parameters","using the legacy extract(top,left,width,height) syntax"],"updatePoint":{"line":221,"column":19,"index":6677},"line":221,"code":"    it('Null height', function () {\n      assert.throws(function () {\n        sharp(fixtures.inputJpg).extract({\n          left: 10,\n          top: 10,\n          width: 10,\n          height: null\n        });\n      });\n    });","file":"unit/extract.js","skipped":false,"dir":"test"},{"name":"Bad image area","suites":["Partial image extraction","Invalid parameters","using the legacy extract(top,left,width,height) syntax"],"updatePoint":{"line":231,"column":22,"index":6906},"line":231,"code":"    it('Bad image area', function (done) {\n      sharp(fixtures.inputJpg).extract({\n        left: 3000,\n        top: 10,\n        width: 10,\n        height: 10\n      }).toBuffer(function (err) {\n        assert(err instanceof Error);\n        assert.strictEqual(err.message, 'extract_area: bad extract area\\n');\n        done();\n      });\n    });","file":"unit/extract.js","skipped":false,"dir":"test"},{"name":"Red channel","suites":["Image channel extraction"],"updatePoint":{"line":7,"column":17,"index":192},"line":7,"code":"  it('Red channel', function (done) {\n    sharp(fixtures.inputJpg).extractChannel('red').resize(320, 240).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(320, info.width);\n      assert.strictEqual(240, info.height);\n      fixtures.assertSimilar(fixtures.expected('extract-red.jpg'), data, done);\n    });\n  });","file":"unit/extractChannel.js","skipped":false,"dir":"test"},{"name":"Green channel","suites":["Image channel extraction"],"updatePoint":{"line":15,"column":19,"index":545},"line":15,"code":"  it('Green channel', function (done) {\n    sharp(fixtures.inputJpg).extractChannel('green').resize(320, 240).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(320, info.width);\n      assert.strictEqual(240, info.height);\n      fixtures.assertSimilar(fixtures.expected('extract-green.jpg'), data, done);\n    });\n  });","file":"unit/extractChannel.js","skipped":false,"dir":"test"},{"name":"Blue channel","suites":["Image channel extraction"],"updatePoint":{"line":23,"column":18,"index":901},"line":23,"code":"  it('Blue channel', function (done) {\n    sharp(fixtures.inputJpg).extractChannel('blue').resize(320, 240).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(320, info.width);\n      assert.strictEqual(240, info.height);\n      fixtures.assertSimilar(fixtures.expected('extract-blue.jpg'), data, done);\n    });\n  });","file":"unit/extractChannel.js","skipped":false,"dir":"test"},{"name":"Blue channel by number","suites":["Image channel extraction"],"updatePoint":{"line":31,"column":28,"index":1265},"line":31,"code":"  it('Blue channel by number', function (done) {\n    sharp(fixtures.inputJpg).extractChannel(2).resize(320, 240).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(320, info.width);\n      assert.strictEqual(240, info.height);\n      fixtures.assertSimilar(fixtures.expected('extract-blue.jpg'), data, done);\n    });\n  });","file":"unit/extractChannel.js","skipped":false,"dir":"test"},{"name":"With colorspace conversion","suites":["Image channel extraction"],"updatePoint":{"line":39,"column":32,"index":1628},"line":39,"code":"  it('With colorspace conversion', function (done) {\n    const output = fixtures.path('output.extract-lch.jpg');\n    sharp(fixtures.inputJpg).extractChannel(1).toColourspace('lch').resize(320, 240, {\n      fastShrinkOnLoad: false\n    }).toFile(output, function (err, info) {\n      if (err) throw err;\n      assert.strictEqual(320, info.width);\n      assert.strictEqual(240, info.height);\n      fixtures.assertMaxColourDistance(output, fixtures.expected('extract-lch.jpg'), 9);\n      done();\n    });\n  });","file":"unit/extractChannel.js","skipped":false,"dir":"test"},{"name":"Alpha from 16-bit PNG","suites":["Image channel extraction"],"updatePoint":{"line":51,"column":27,"index":2128},"line":51,"code":"  it('Alpha from 16-bit PNG', function (done) {\n    const output = fixtures.path('output.extract-alpha-16bit.png');\n    sharp(fixtures.inputPngWithTransparency16bit).resize(16).extractChannel(3).toFile(output, function (err) {\n      if (err) throw err;\n      fixtures.assertMaxColourDistance(output, fixtures.expected('extract-alpha-16bit.png'));\n      done();\n    });\n  });","file":"unit/extractChannel.js","skipped":false,"dir":"test"},{"name":"Alpha from 2-channel input","suites":["Image channel extraction"],"updatePoint":{"line":59,"column":32,"index":2508},"line":59,"code":"  it('Alpha from 2-channel input', function (done) {\n    const output = fixtures.path('output.extract-alpha-2-channel.png');\n    sharp(fixtures.inputPngWithGreyAlpha).extractChannel('alpha').toColourspace('b-w').toFile(output, function (err, info) {\n      if (err) throw err;\n      assert.strictEqual(1, info.channels);\n      fixtures.assertMaxColourDistance(output, fixtures.expected('extract-alpha-2-channel.png'));\n      done();\n    });\n  });","file":"unit/extractChannel.js","skipped":false,"dir":"test"},{"name":"Invalid channel number","suites":["Image channel extraction"],"updatePoint":{"line":68,"column":28,"index":2950},"line":68,"code":"  it('Invalid channel number', function () {\n    assert.throws(function () {\n      sharp(fixtures.inputJpg).extractChannel(-1);\n    });\n  });","file":"unit/extractChannel.js","skipped":false,"dir":"test"},{"name":"No arguments","suites":["Image channel extraction"],"updatePoint":{"line":73,"column":18,"index":3082},"line":73,"code":"  it('No arguments', function () {\n    assert.throws(function () {\n      sharp(fixtures.inputJpg).extractChannel();\n    });\n  });","file":"unit/extractChannel.js","skipped":false,"dir":"test"},{"name":"Non-existent channel","suites":["Image channel extraction"],"updatePoint":{"line":78,"column":26,"index":3220},"line":78,"code":"  it('Non-existent channel', function (done) {\n    sharp(fixtures.inputPng).extractChannel(1).toBuffer(function (err) {\n      assert(err instanceof Error);\n      done();\n    });\n  });","file":"unit/extractChannel.js","skipped":false,"dir":"test"},{"name":"handles truncated JPEG","suites":["failOnError"],"updatePoint":{"line":8,"column":28,"index":216},"line":8,"code":"  it('handles truncated JPEG', function (done) {\n    sharp(fixtures.inputJpgTruncated, {\n      failOnError: false\n    }).resize(320, 240).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual('jpeg', info.format);\n      assert.strictEqual(320, info.width);\n      assert.strictEqual(240, info.height);\n      fixtures.assertSimilar(fixtures.expected('truncated.jpg'), data, done);\n    });\n  });","file":"unit/failOnError.js","skipped":false,"dir":"test"},{"name":"handles truncated PNG, emits warnings","suites":["failOnError"],"updatePoint":{"line":19,"column":43,"index":659},"line":19,"code":"  it('handles truncated PNG, emits warnings', function (done) {\n    let isWarningEmitted = false;\n    sharp(fixtures.inputPngTruncated, {\n      failOnError: false\n    }).on('warning', function (warning) {\n      assert.ok(warning.includes('not enough data') || warning.includes('end of stream'));\n      isWarningEmitted = true;\n    }).resize(320, 240).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(true, isWarningEmitted);\n      assert.strictEqual('png', info.format);\n      assert.strictEqual(320, info.width);\n      assert.strictEqual(240, info.height);\n      done();\n    });\n  });","file":"unit/failOnError.js","skipped":false,"dir":"test"},{"name":"rejects invalid values","suites":["failOnError"],"updatePoint":{"line":35,"column":28,"index":1270},"line":35,"code":"  it('rejects invalid values', function () {\n    assert.doesNotThrow(function () {\n      sharp(fixtures.inputJpg, {\n        failOnError: true\n      });\n    });\n    assert.throws(function () {\n      sharp(fixtures.inputJpg, {\n        failOnError: 'zoinks'\n      });\n    });\n    assert.throws(function () {\n      sharp(fixtures.inputJpg, {\n        failOnError: 1\n      });\n    });\n  });","file":"unit/failOnError.js","skipped":false,"dir":"test"},{"name":"returns errors to callback for truncated JPEG","suites":["failOnError"],"updatePoint":{"line":52,"column":51,"index":1678},"line":52,"code":"  it('returns errors to callback for truncated JPEG', function (done) {\n    sharp(fixtures.inputJpgTruncated).toBuffer(function (err, data, info) {\n      assert.ok(err.message.includes('VipsJpeg: Premature end of'), err);\n      assert.strictEqual(data, undefined);\n      assert.strictEqual(info, undefined);\n      done();\n    });\n  });","file":"unit/failOnError.js","skipped":false,"dir":"test"},{"name":"returns errors to callback for truncated PNG","suites":["failOnError"],"updatePoint":{"line":60,"column":50,"index":2013},"line":60,"code":"  it('returns errors to callback for truncated PNG', function (done) {\n    sharp(fixtures.inputPngTruncated).toBuffer(function (err, data, info) {\n      assert.ok(err.message.includes('read error'), err);\n      assert.strictEqual(data, undefined);\n      assert.strictEqual(info, undefined);\n      done();\n    });\n  });","file":"unit/failOnError.js","skipped":false,"dir":"test"},{"name":"rejects promises for truncated JPEG","suites":["failOnError"],"updatePoint":{"line":68,"column":41,"index":2323},"line":68,"code":"  it('rejects promises for truncated JPEG', function (done) {\n    sharp(fixtures.inputJpgTruncated).toBuffer().then(() => {\n      throw new Error('Expected rejection');\n    }).catch(err => {\n      done(err.message.includes('VipsJpeg: Premature end of') ? undefined : err);\n    });\n  });","file":"unit/failOnError.js","skipped":false,"dir":"test"},{"name":"handles stream-based input","suites":["failOnError"],"updatePoint":{"line":75,"column":32,"index":2601},"line":75,"code":"  it('handles stream-based input', function () {\n    const writable = sharp({\n      failOnError: false\n    });\n    fs.createReadStream(fixtures.inputJpgTruncated).pipe(writable);\n    return writable.toBuffer();\n  });","file":"unit/failOnError.js","skipped":false,"dir":"test"},{"name":"should throw an Error when images have a different number of channels","suites":["Test fixtures","assertMaxColourDistance"],"updatePoint":{"line":7,"column":77,"index":260},"line":7,"code":"    it('should throw an Error when images have a different number of channels', function () {\n      assert.throws(function () {\n        fixtures.assertMaxColourDistance(fixtures.inputPngOverlayLayer1, fixtures.inputJpg);\n      });\n    });","file":"unit/fixtures.js","skipped":false,"dir":"test"},{"name":"should throw an Error when images have different dimensions","suites":["Test fixtures","assertMaxColourDistance"],"updatePoint":{"line":12,"column":67,"index":489},"line":12,"code":"    it('should throw an Error when images have different dimensions', function () {\n      assert.throws(function () {\n        fixtures.assertMaxColourDistance(fixtures.inputJpg, fixtures.inputJpgWithExif);\n      });\n    });","file":"unit/fixtures.js","skipped":false,"dir":"test"},{"name":"should accept a zero threshold when comparing an image to itself","suites":["Test fixtures","assertMaxColourDistance"],"updatePoint":{"line":17,"column":72,"index":718},"line":17,"code":"    it('should accept a zero threshold when comparing an image to itself', function () {\n      const image = fixtures.inputPngOverlayLayer0;\n      fixtures.assertMaxColourDistance(image, image, 0);\n    });","file":"unit/fixtures.js","skipped":false,"dir":"test"},{"name":"should accept a numeric threshold for two different images","suites":["Test fixtures","assertMaxColourDistance"],"updatePoint":{"line":21,"column":66,"index":918},"line":21,"code":"    it('should accept a numeric threshold for two different images', function () {\n      fixtures.assertMaxColourDistance(fixtures.inputPngOverlayLayer0, fixtures.inputPngOverlayLayer1, 100);\n    });","file":"unit/fixtures.js","skipped":false,"dir":"test"},{"name":"value of 0.0 (disabled)","suites":["Gamma correction"],"updatePoint":{"line":7,"column":29,"index":196},"line":7,"code":"  it('value of 0.0 (disabled)', function (done) {\n    sharp(fixtures.inputJpgWithGammaHoliness).resize(129, 111).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual('jpeg', info.format);\n      assert.strictEqual(129, info.width);\n      assert.strictEqual(111, info.height);\n      fixtures.assertSimilar(fixtures.expected('gamma-0.0.jpg'), data, {\n        threshold: 9\n      }, done);\n    });\n  });","file":"unit/gamma.js","skipped":false,"dir":"test"},{"name":"value of 2.2 (default)","suites":["Gamma correction"],"updatePoint":{"line":18,"column":28,"index":630},"line":18,"code":"  it('value of 2.2 (default)', function (done) {\n    sharp(fixtures.inputJpgWithGammaHoliness).resize(129, 111).gamma().toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual('jpeg', info.format);\n      assert.strictEqual(129, info.width);\n      assert.strictEqual(111, info.height);\n      fixtures.assertSimilar(fixtures.expected('gamma-2.2.jpg'), data, done);\n    });\n  });","file":"unit/gamma.js","skipped":false,"dir":"test"},{"name":"value of 3.0","suites":["Gamma correction"],"updatePoint":{"line":27,"column":18,"index":1030},"line":27,"code":"  it('value of 3.0', function (done) {\n    sharp(fixtures.inputJpgWithGammaHoliness).resize(129, 111).gamma(3).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual('jpeg', info.format);\n      assert.strictEqual(129, info.width);\n      assert.strictEqual(111, info.height);\n      fixtures.assertSimilar(fixtures.expected('gamma-3.0.jpg'), data, {\n        threshold: 6\n      }, done);\n    });\n  });","file":"unit/gamma.js","skipped":false,"dir":"test"},{"name":"input value of 2.2, output value of 3.0","suites":["Gamma correction"],"updatePoint":{"line":38,"column":45,"index":1490},"line":38,"code":"  it('input value of 2.2, output value of 3.0', function (done) {\n    sharp(fixtures.inputJpgWithGammaHoliness).resize(129, 111).gamma(2.2, 3.0).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual('jpeg', info.format);\n      assert.strictEqual(129, info.width);\n      assert.strictEqual(111, info.height);\n      fixtures.assertSimilar(fixtures.expected('gamma-in-2.2-out-3.0.jpg'), data, {\n        threshold: 6\n      }, done);\n    });\n  });","file":"unit/gamma.js","skipped":false,"dir":"test"},{"name":"alpha transparency","suites":["Gamma correction"],"updatePoint":{"line":49,"column":24,"index":1947},"line":49,"code":"  it('alpha transparency', function (done) {\n    sharp(fixtures.inputPngOverlayLayer1).resize(320).gamma().jpeg().toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual('jpeg', info.format);\n      assert.strictEqual(320, info.width);\n      fixtures.assertSimilar(fixtures.expected('gamma-alpha.jpg'), data, done);\n    });\n  });","file":"unit/gamma.js","skipped":false,"dir":"test"},{"name":"invalid first parameter value","suites":["Gamma correction"],"updatePoint":{"line":57,"column":35,"index":2320},"line":57,"code":"  it('invalid first parameter value', function () {\n    assert.throws(function () {\n      sharp(fixtures.inputJpgWithGammaHoliness).gamma(4);\n    });\n  });","file":"unit/gamma.js","skipped":false,"dir":"test"},{"name":"invalid second parameter value","suites":["Gamma correction"],"updatePoint":{"line":62,"column":36,"index":2477},"line":62,"code":"  it('invalid second parameter value', function () {\n    assert.throws(function () {\n      sharp(fixtures.inputJpgWithGammaHoliness).gamma(2.2, 4);\n    });\n  });","file":"unit/gamma.js","skipped":false,"dir":"test"},{"name":"GIF Buffer to JPEG Buffer","suites":["GIF input"],"updatePoint":{"line":8,"column":31,"index":211},"line":8,"code":"  it('GIF Buffer to JPEG Buffer', () => sharp(fs.readFileSync(fixtures.inputGif)).resize(8, 4).jpeg().toBuffer({\n    resolveWithObject: true\n  }).then(({\n    data,\n    info\n  }) => {\n    assert.strictEqual(true, data.length > 0);\n    assert.strictEqual(data.length, info.size);\n    assert.strictEqual('jpeg', info.format);\n    assert.strictEqual(8, info.width);\n    assert.strictEqual(4, info.height);\n  }));","file":"unit/gif.js","skipped":false,"dir":"test"},{"name":"2 channel GIF file to PNG Buffer","suites":["GIF input"],"updatePoint":{"line":20,"column":38,"index":627},"line":20,"code":"  it('2 channel GIF file to PNG Buffer', () => sharp(fixtures.inputGifGreyPlusAlpha).resize(8, 4).png().toBuffer({\n    resolveWithObject: true\n  }).then(({\n    data,\n    info\n  }) => {\n    assert.strictEqual(true, data.length > 0);\n    assert.strictEqual(data.length, info.size);\n    assert.strictEqual('png', info.format);\n    assert.strictEqual(8, info.width);\n    assert.strictEqual(4, info.height);\n    assert.strictEqual(4, info.channels);\n  }));","file":"unit/gif.js","skipped":false,"dir":"test"},{"name":"Animated GIF first page to PNG","suites":["GIF input"],"updatePoint":{"line":33,"column":36,"index":1077},"line":33,"code":"  it('Animated GIF first page to PNG', () => sharp(fixtures.inputGifAnimated).toBuffer({\n    resolveWithObject: true\n  }).then(({\n    data,\n    info\n  }) => {\n    assert.strictEqual(true, data.length > 0);\n    assert.strictEqual(data.length, info.size);\n    assert.strictEqual(sharp.format.magick.input.buffer ? 'gif' : 'png', info.format);\n    assert.strictEqual(80, info.width);\n    assert.strictEqual(80, info.height);\n    assert.strictEqual(4, info.channels);\n  }));","file":"unit/gif.js","skipped":false,"dir":"test"},{"name":"Animated GIF all pages to PNG \"toilet roll\"","suites":["GIF input"],"updatePoint":{"line":46,"column":49,"index":1561},"line":46,"code":"  it('Animated GIF all pages to PNG \"toilet roll\"', () => sharp(fixtures.inputGifAnimated, {\n    pages: -1\n  }).toBuffer({\n    resolveWithObject: true\n  }).then(({\n    data,\n    info\n  }) => {\n    assert.strictEqual(true, data.length > 0);\n    assert.strictEqual(data.length, info.size);\n    assert.strictEqual(sharp.format.magick.input.buffer ? 'gif' : 'png', info.format);\n    assert.strictEqual(80, info.width);\n    assert.strictEqual(2400, info.height);\n    assert.strictEqual(4, info.channels);\n  }));","file":"unit/gif.js","skipped":false,"dir":"test"},{"name":"GIF buffer output should fail due to missing ImageMagick","suites":["GIF input"],"updatePoint":{"line":62,"column":64,"index":2127},"line":62,"code":"    it('GIF buffer output should fail due to missing ImageMagick', () => {\n      assert.throws(() => sharp().gif(), /GIF output requires libvips with support for ImageMagick/);\n    });","file":"unit/gif.js","skipped":false,"dir":"test"},{"name":"GIF file output should fail due to missing ImageMagick","suites":["GIF input"],"updatePoint":{"line":65,"column":62,"index":2310},"line":65,"code":"    it('GIF file output should fail due to missing ImageMagick', () => {\n      assert.rejects(async () => await sharp().toFile('test.gif'), /GIF output requires libvips with support for ImageMagick/);\n    });","file":"unit/gif.js","skipped":false,"dir":"test"},{"name":"invalid pageHeight throws","suites":["GIF input"],"updatePoint":{"line":69,"column":31,"index":2492},"line":69,"code":"  it('invalid pageHeight throws', () => {\n    assert.throws(() => {\n      sharp().gif({\n        pageHeight: 0\n      });\n    });\n  });","file":"unit/gif.js","skipped":false,"dir":"test"},{"name":"invalid loop throws","suites":["GIF input"],"updatePoint":{"line":76,"column":25,"index":2620},"line":76,"code":"  it('invalid loop throws', () => {\n    assert.throws(() => {\n      sharp().gif({\n        loop: -1\n      });\n    });\n    assert.throws(() => {\n      sharp().gif({\n        loop: 65536\n      });\n    });\n  });","file":"unit/gif.js","skipped":false,"dir":"test"},{"name":"invalid delay throws","suites":["GIF input"],"updatePoint":{"line":88,"column":26,"index":2828},"line":88,"code":"  it('invalid delay throws', () => {\n    assert.throws(() => {\n      sharp().gif({\n        delay: [-1]\n      });\n    });\n    assert.throws(() => {\n      sharp().gif({\n        delay: [65536]\n      });\n    });\n  });","file":"unit/gif.js","skipped":false,"dir":"test"},{"name":"should work with streams when only animated is set","suites":["GIF input"],"updatePoint":{"line":100,"column":56,"index":3072},"line":100,"code":"  it('should work with streams when only animated is set', function (done) {\n    if (sharp.format.magick.output.buffer) {\n      fs.createReadStream(fixtures.inputGifAnimated).pipe(sharp({\n        animated: true\n      })).gif().toBuffer(function (err, data, info) {\n        if (err) throw err;\n        assert.strictEqual(true, data.length > 0);\n        assert.strictEqual('gif', info.format);\n        fixtures.assertSimilar(fixtures.inputGifAnimated, data, done);\n      });\n    } else {\n      done();\n    }\n  });","file":"unit/gif.js","skipped":false,"dir":"test"},{"name":"should work with streams when only pages is set","suites":["GIF input"],"updatePoint":{"line":114,"column":53,"index":3581},"line":114,"code":"  it('should work with streams when only pages is set', function (done) {\n    if (sharp.format.magick.output.buffer) {\n      fs.createReadStream(fixtures.inputGifAnimated).pipe(sharp({\n        pages: -1\n      })).gif().toBuffer(function (err, data, info) {\n        if (err) throw err;\n        assert.strictEqual(true, data.length > 0);\n        assert.strictEqual('gif', info.format);\n        fixtures.assertSimilar(fixtures.inputGifAnimated, data, done);\n      });\n    } else {\n      done();\n    }\n  });","file":"unit/gif.js","skipped":false,"dir":"test"},{"name":"called without options does not throw an error","suites":["HEIF"],"updatePoint":{"line":6,"column":52,"index":160},"line":6,"code":"  it('called without options does not throw an error', () => {\n    assert.doesNotThrow(() => {\n      sharp().heif();\n    });\n  });","file":"unit/heif.js","skipped":false,"dir":"test"},{"name":"valid quality does not throw an error","suites":["HEIF"],"updatePoint":{"line":11,"column":43,"index":282},"line":11,"code":"  it('valid quality does not throw an error', () => {\n    assert.doesNotThrow(() => {\n      sharp().heif({\n        quality: 80\n      });\n    });\n  });","file":"unit/heif.js","skipped":false,"dir":"test"},{"name":"invalid quality should throw an error","suites":["HEIF"],"updatePoint":{"line":18,"column":43,"index":433},"line":18,"code":"  it('invalid quality should throw an error', () => {\n    assert.throws(() => {\n      sharp().heif({\n        quality: 101\n      });\n    });\n  });","file":"unit/heif.js","skipped":false,"dir":"test"},{"name":"non-numeric quality should throw an error","suites":["HEIF"],"updatePoint":{"line":25,"column":47,"index":583},"line":25,"code":"  it('non-numeric quality should throw an error', () => {\n    assert.throws(() => {\n      sharp().heif({\n        quality: 'fail'\n      });\n    });\n  });","file":"unit/heif.js","skipped":false,"dir":"test"},{"name":"valid lossless does not throw an error","suites":["HEIF"],"updatePoint":{"line":32,"column":44,"index":733},"line":32,"code":"  it('valid lossless does not throw an error', () => {\n    assert.doesNotThrow(() => {\n      sharp().heif({\n        lossless: true\n      });\n    });\n  });","file":"unit/heif.js","skipped":false,"dir":"test"},{"name":"non-boolean lossless should throw an error","suites":["HEIF"],"updatePoint":{"line":39,"column":48,"index":892},"line":39,"code":"  it('non-boolean lossless should throw an error', () => {\n    assert.throws(() => {\n      sharp().heif({\n        lossless: 'fail'\n      });\n    });\n  });","file":"unit/heif.js","skipped":false,"dir":"test"},{"name":"valid compression does not throw an error","suites":["HEIF"],"updatePoint":{"line":46,"column":47,"index":1046},"line":46,"code":"  it('valid compression does not throw an error', () => {\n    assert.doesNotThrow(() => {\n      sharp().heif({\n        compression: 'hevc'\n      });\n    });\n  });","file":"unit/heif.js","skipped":false,"dir":"test"},{"name":"unknown compression should throw an error","suites":["HEIF"],"updatePoint":{"line":53,"column":47,"index":1209},"line":53,"code":"  it('unknown compression should throw an error', () => {\n    assert.throws(() => {\n      sharp().heif({\n        compression: 'fail'\n      });\n    });\n  });","file":"unit/heif.js","skipped":false,"dir":"test"},{"name":"invalid compression should throw an error","suites":["HEIF"],"updatePoint":{"line":60,"column":47,"index":1366},"line":60,"code":"  it('invalid compression should throw an error', () => {\n    assert.throws(() => {\n      sharp().heif({\n        compression: 1\n      });\n    });\n  });","file":"unit/heif.js","skipped":false,"dir":"test"},{"name":"valid speed does not throw an error","suites":["HEIF"],"updatePoint":{"line":67,"column":41,"index":1512},"line":67,"code":"  it('valid speed does not throw an error', () => {\n    assert.doesNotThrow(() => {\n      sharp().heif({\n        speed: 6\n      });\n    });\n  });","file":"unit/heif.js","skipped":false,"dir":"test"},{"name":"out of range speed should throw an error","suites":["HEIF"],"updatePoint":{"line":74,"column":46,"index":1663},"line":74,"code":"  it('out of range speed should throw an error', () => {\n    assert.throws(() => {\n      sharp().heif({\n        speed: 10\n      });\n    });\n  });","file":"unit/heif.js","skipped":false,"dir":"test"},{"name":"invalid speed should throw an error","suites":["HEIF"],"updatePoint":{"line":81,"column":41,"index":1804},"line":81,"code":"  it('invalid speed should throw an error', () => {\n    assert.throws(() => {\n      sharp().heif({\n        compression: 'fail'\n      });\n    });\n  });","file":"unit/heif.js","skipped":false,"dir":"test"},{"name":"invalid chromaSubsampling should throw an error","suites":["HEIF"],"updatePoint":{"line":88,"column":53,"index":1967},"line":88,"code":"  it('invalid chromaSubsampling should throw an error', () => {\n    assert.throws(() => {\n      sharp().heif({\n        chromaSubsampling: 'fail'\n      });\n    });\n  });","file":"unit/heif.js","skipped":false,"dir":"test"},{"name":"valid chromaSubsampling does not throw an error","suites":["HEIF"],"updatePoint":{"line":95,"column":53,"index":2136},"line":95,"code":"  it('valid chromaSubsampling does not throw an error', () => {\n    assert.doesNotThrow(() => {\n      sharp().heif({\n        chromaSubsampling: '4:4:4'\n      });\n    });\n  });","file":"unit/heif.js","skipped":false,"dir":"test"},{"name":"Read from File and write to Stream","suites":["Input/output"],"updatePoint":{"line":17,"column":40,"index":452},"line":17,"code":"  it('Read from File and write to Stream', function (done) {\n    const writable = fs.createWriteStream(outputJpg);\n    writable.on('close', function () {\n      sharp(outputJpg).toBuffer(function (err, data, info) {\n        if (err) throw err;\n        assert.strictEqual(true, data.length > 0);\n        assert.strictEqual(data.length, info.size);\n        assert.strictEqual('jpeg', info.format);\n        assert.strictEqual(320, info.width);\n        assert.strictEqual(240, info.height);\n        rimraf(outputJpg, done);\n      });\n    });\n    sharp(fixtures.inputJpg).resize(320, 240).pipe(writable);\n  });","file":"unit/io.js","skipped":false,"dir":"test"},{"name":"Read from Buffer and write to Stream","suites":["Input/output"],"updatePoint":{"line":32,"column":42,"index":1059},"line":32,"code":"  it('Read from Buffer and write to Stream', function (done) {\n    const inputJpgBuffer = fs.readFileSync(fixtures.inputJpg);\n    const writable = fs.createWriteStream(outputJpg);\n    writable.on('close', function () {\n      sharp(outputJpg).toBuffer(function (err, data, info) {\n        if (err) throw err;\n        assert.strictEqual(true, data.length > 0);\n        assert.strictEqual(data.length, info.size);\n        assert.strictEqual('jpeg', info.format);\n        assert.strictEqual(320, info.width);\n        assert.strictEqual(240, info.height);\n        rimraf(outputJpg, done);\n      });\n    });\n    sharp(inputJpgBuffer).resize(320, 240).pipe(writable);\n  });","file":"unit/io.js","skipped":false,"dir":"test"},{"name":"Read from Stream and write to File","suites":["Input/output"],"updatePoint":{"line":48,"column":40,"index":1724},"line":48,"code":"  it('Read from Stream and write to File', function (done) {\n    const readable = fs.createReadStream(fixtures.inputJpg);\n    const pipeline = sharp().resize(320, 240).toFile(outputJpg, function (err, info) {\n      if (err) throw err;\n      assert.strictEqual(true, info.size > 0);\n      assert.strictEqual('jpeg', info.format);\n      assert.strictEqual(320, info.width);\n      assert.strictEqual(240, info.height);\n      rimraf(outputJpg, done);\n    });\n    readable.pipe(pipeline);\n  });","file":"unit/io.js","skipped":false,"dir":"test"},{"name":"Read from Stream and write to Buffer","suites":["Input/output"],"updatePoint":{"line":60,"column":42,"index":2216},"line":60,"code":"  it('Read from Stream and write to Buffer', function (done) {\n    const readable = fs.createReadStream(fixtures.inputJpg);\n    const pipeline = sharp().resize(320, 240).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(true, data.length > 0);\n      assert.strictEqual(data.length, info.size);\n      assert.strictEqual('jpeg', info.format);\n      assert.strictEqual(320, info.width);\n      assert.strictEqual(240, info.height);\n      done();\n    });\n    readable.pipe(pipeline);\n  });","file":"unit/io.js","skipped":false,"dir":"test"},{"name":"Read from Stream and write to Buffer via Promise resolved with Buffer","suites":["Input/output"],"updatePoint":{"line":73,"column":75,"index":2773},"line":73,"code":"  it('Read from Stream and write to Buffer via Promise resolved with Buffer', function () {\n    const pipeline = sharp().resize(1, 1);\n    fs.createReadStream(fixtures.inputJpg).pipe(pipeline);\n    return pipeline.toBuffer({\n      resolveWithObject: false\n    }).then(function (data) {\n      assert.strictEqual(true, data instanceof Buffer);\n      assert.strictEqual(true, data.length > 0);\n    });\n  });","file":"unit/io.js","skipped":false,"dir":"test"},{"name":"Read from Stream and write to Buffer via Promise resolved with Object","suites":["Input/output"],"updatePoint":{"line":83,"column":75,"index":3178},"line":83,"code":"  it('Read from Stream and write to Buffer via Promise resolved with Object', function () {\n    const pipeline = sharp().resize(1, 1);\n    fs.createReadStream(fixtures.inputJpg).pipe(pipeline);\n    return pipeline.toBuffer({\n      resolveWithObject: true\n    }).then(function (object) {\n      assert.strictEqual('object', typeof object);\n      assert.strictEqual('object', typeof object.info);\n      assert.strictEqual('jpeg', object.info.format);\n      assert.strictEqual(1, object.info.width);\n      assert.strictEqual(1, object.info.height);\n      assert.strictEqual(3, object.info.channels);\n      assert.strictEqual(true, object.data instanceof Buffer);\n      assert.strictEqual(true, object.data.length > 0);\n    });\n  });","file":"unit/io.js","skipped":false,"dir":"test"},{"name":"Read from File and write to Buffer via Promise resolved with Buffer","suites":["Input/output"],"updatePoint":{"line":99,"column":73,"index":3905},"line":99,"code":"  it('Read from File and write to Buffer via Promise resolved with Buffer', function () {\n    return sharp(fixtures.inputJpg).resize(1, 1).toBuffer({\n      resolveWithObject: false\n    }).then(function (data) {\n      assert.strictEqual(true, data instanceof Buffer);\n      assert.strictEqual(true, data.length > 0);\n    });\n  });","file":"unit/io.js","skipped":false,"dir":"test"},{"name":"Read from File and write to Buffer via Promise resolved with Object","suites":["Input/output"],"updatePoint":{"line":107,"column":73,"index":4235},"line":107,"code":"  it('Read from File and write to Buffer via Promise resolved with Object', function () {\n    return sharp(fixtures.inputJpg).resize(1, 1).toBuffer({\n      resolveWithObject: true\n    }).then(function (object) {\n      assert.strictEqual('object', typeof object);\n      assert.strictEqual('object', typeof object.info);\n      assert.strictEqual('jpeg', object.info.format);\n      assert.strictEqual(1, object.info.width);\n      assert.strictEqual(1, object.info.height);\n      assert.strictEqual(3, object.info.channels);\n      assert.strictEqual(true, object.data instanceof Buffer);\n      assert.strictEqual(true, object.data.length > 0);\n    });\n  });","file":"unit/io.js","skipped":false,"dir":"test"},{"name":"Read from Stream and write to Stream","suites":["Input/output"],"updatePoint":{"line":121,"column":42,"index":4858},"line":121,"code":"  it('Read from Stream and write to Stream', function (done) {\n    const readable = fs.createReadStream(fixtures.inputJpg);\n    const writable = fs.createWriteStream(outputJpg);\n    writable.on('close', function () {\n      sharp(outputJpg).toBuffer(function (err, data, info) {\n        if (err) throw err;\n        assert.strictEqual(true, data.length > 0);\n        assert.strictEqual(data.length, info.size);\n        assert.strictEqual('jpeg', info.format);\n        assert.strictEqual(320, info.width);\n        assert.strictEqual(240, info.height);\n        rimraf(outputJpg, done);\n      });\n    });\n    const pipeline = sharp().resize(320, 240);\n    readable.pipe(pipeline).pipe(writable);\n  });","file":"unit/io.js","skipped":false,"dir":"test"},{"name":"Read from Uint8Array and write to Buffer","suites":["Input/output"],"updatePoint":{"line":138,"column":46,"index":5559},"line":138,"code":"  it('Read from Uint8Array and write to Buffer', async () => {\n    const uint8array = Uint8Array.from([255, 255, 255, 0, 0, 0]);\n    const {\n      data,\n      info\n    } = await sharp(uint8array, {\n      raw: {\n        width: 2,\n        height: 1,\n        channels: 3\n      }\n    }).toBuffer({\n      resolveWithObject: true\n    });\n    assert.deepStrictEqual(uint8array, new Uint8Array(data));\n    assert.strictEqual(info.width, 2);\n    assert.strictEqual(info.height, 1);\n  });","file":"unit/io.js","skipped":false,"dir":"test"},{"name":"Read from Uint8ClampedArray and output to Buffer","suites":["Input/output"],"updatePoint":{"line":156,"column":54,"index":6046},"line":156,"code":"  it('Read from Uint8ClampedArray and output to Buffer', async () => {\n    // since a Uint8ClampedArray is the same as Uint8Array but clamps the values\n    // between 0-255 it seemed good to add this also\n    const uint8array = Uint8ClampedArray.from([255, 255, 255, 0, 0, 0]);\n    const {\n      data,\n      info\n    } = await sharp(uint8array, {\n      raw: {\n        width: 2,\n        height: 1,\n        channels: 3\n      }\n    }).toBuffer({\n      resolveWithObject: true\n    });\n    assert.deepStrictEqual(uint8array, new Uint8ClampedArray(data));\n    assert.strictEqual(info.width, 2);\n    assert.strictEqual(info.height, 1);\n  });","file":"unit/io.js","skipped":false,"dir":"test"},{"name":"Stream should emit info event","suites":["Input/output"],"updatePoint":{"line":176,"column":35,"index":6662},"line":176,"code":"  it('Stream should emit info event', function (done) {\n    const readable = fs.createReadStream(fixtures.inputJpg);\n    const writable = fs.createWriteStream(outputJpg);\n    const pipeline = sharp().resize(320, 240);\n    let infoEventEmitted = false;\n    pipeline.on('info', function (info) {\n      assert.strictEqual('jpeg', info.format);\n      assert.strictEqual(320, info.width);\n      assert.strictEqual(240, info.height);\n      assert.strictEqual(3, info.channels);\n      infoEventEmitted = true;\n    });\n    writable.on('close', function () {\n      assert.strictEqual(true, infoEventEmitted);\n      rimraf(outputJpg, done);\n    });\n    readable.pipe(pipeline).pipe(writable);\n  });","file":"unit/io.js","skipped":false,"dir":"test"},{"name":"Handle Stream to Stream error ","suites":["Input/output"],"updatePoint":{"line":194,"column":36,"index":7352},"line":194,"code":"  it('Handle Stream to Stream error ', function (done) {\n    const pipeline = sharp().resize(320, 240);\n    let anErrorWasEmitted = false;\n    pipeline.on('error', function (err) {\n      anErrorWasEmitted = !!err;\n    }).on('end', function () {\n      assert(anErrorWasEmitted);\n      rimraf(outputJpg, done);\n    });\n    const readableButNotAnImage = fs.createReadStream(__filename);\n    const writable = fs.createWriteStream(outputJpg);\n    readableButNotAnImage.pipe(pipeline).pipe(writable);\n  });","file":"unit/io.js","skipped":false,"dir":"test"},{"name":"Handle File to Stream error","suites":["Input/output"],"updatePoint":{"line":207,"column":33,"index":7850},"line":207,"code":"  it('Handle File to Stream error', function (done) {\n    const readableButNotAnImage = sharp(__filename).resize(320, 240);\n    let anErrorWasEmitted = false;\n    readableButNotAnImage.on('error', function (err) {\n      anErrorWasEmitted = !!err;\n    }).on('end', function () {\n      assert(anErrorWasEmitted);\n      rimraf(outputJpg, done);\n    });\n    const writable = fs.createWriteStream(outputJpg);\n    readableButNotAnImage.pipe(writable);\n  });","file":"unit/io.js","skipped":false,"dir":"test"},{"name":"Readable side of Stream can start flowing after Writable side has finished","suites":["Input/output"],"updatePoint":{"line":219,"column":80,"index":8349},"line":219,"code":"  it('Readable side of Stream can start flowing after Writable side has finished', function (done) {\n    const readable = fs.createReadStream(fixtures.inputJpg);\n    const writable = fs.createWriteStream(outputJpg);\n    writable.on('close', function () {\n      sharp(outputJpg).toBuffer(function (err, data, info) {\n        if (err) throw err;\n        assert.strictEqual(true, data.length > 0);\n        assert.strictEqual(data.length, info.size);\n        assert.strictEqual('jpeg', info.format);\n        assert.strictEqual(320, info.width);\n        assert.strictEqual(240, info.height);\n        rimraf(outputJpg, done);\n      });\n    });\n    const pipeline = sharp().resize(320, 240);\n    readable.pipe(pipeline);\n    pipeline.on('finish', function () {\n      pipeline.pipe(writable);\n    });\n  });","file":"unit/io.js","skipped":false,"dir":"test"},{"name":"Invalid sequential read option throws","suites":["Input/output"],"updatePoint":{"line":239,"column":43,"index":9111},"line":239,"code":"  it('Invalid sequential read option throws', () => {\n    assert.throws(() => {\n      sharp({\n        sequentialRead: 'fail'\n      });\n    }, /Expected boolean for sequentialRead but received fail of type string/);\n  });","file":"unit/io.js","skipped":false,"dir":"test"},{"name":"Sequential read, force JPEG","suites":["Input/output"],"updatePoint":{"line":246,"column":33,"index":9322},"line":246,"code":"  it('Sequential read, force JPEG', () => sharp(fixtures.inputJpg, {\n    sequentialRead: true\n  }).resize(320, 240).toFormat(sharp.format.jpeg).toBuffer({\n    resolveWithObject: true\n  }).then(({\n    data,\n    info\n  }) => {\n    assert.strictEqual(data.length > 0, true);\n    assert.strictEqual(data.length, info.size);\n    assert.strictEqual(info.format, 'jpeg');\n    assert.strictEqual(info.width, 320);\n    assert.strictEqual(info.height, 240);\n  }));","file":"unit/io.js","skipped":false,"dir":"test"},{"name":"Not sequential read, force JPEG","suites":["Input/output"],"updatePoint":{"line":260,"column":37,"index":9781},"line":260,"code":"  it('Not sequential read, force JPEG', () => sharp(fixtures.inputJpg, {\n    sequentialRead: false\n  }).resize(320, 240).toFormat('jpeg').toBuffer({\n    resolveWithObject: true\n  }).then(({\n    data,\n    info\n  }) => {\n    assert.strictEqual(data.length > 0, true);\n    assert.strictEqual(data.length, info.size);\n    assert.strictEqual(info.format, 'jpeg');\n    assert.strictEqual(info.width, 320);\n    assert.strictEqual(info.height, 240);\n  }));","file":"unit/io.js","skipped":false,"dir":"test"},{"name":"Support output to jpg format","suites":["Input/output"],"updatePoint":{"line":274,"column":34,"index":10227},"line":274,"code":"  it('Support output to jpg format', function (done) {\n    sharp(fixtures.inputPng).resize(320, 240).toFormat('jpg').toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(true, data.length > 0);\n      assert.strictEqual(data.length, info.size);\n      assert.strictEqual('jpeg', info.format);\n      assert.strictEqual(320, info.width);\n      assert.strictEqual(240, info.height);\n      done();\n    });\n  });","file":"unit/io.js","skipped":false,"dir":"test"},{"name":"Support output to tif format","suites":["Input/output"],"updatePoint":{"line":285,"column":34,"index":10669},"line":285,"code":"  it('Support output to tif format', function (done) {\n    sharp(fixtures.inputTiff).resize(320, 240).toFormat('tif').toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(true, data.length > 0);\n      assert.strictEqual(data.length, info.size);\n      assert.strictEqual('tiff', info.format);\n      assert.strictEqual(320, info.width);\n      assert.strictEqual(240, info.height);\n      done();\n    });\n  });","file":"unit/io.js","skipped":false,"dir":"test"},{"name":"Fail when output File is input File","suites":["Input/output"],"updatePoint":{"line":296,"column":41,"index":11119},"line":296,"code":"  it('Fail when output File is input File', function (done) {\n    sharp(fixtures.inputJpg).toFile(fixtures.inputJpg, function (err) {\n      assert(err instanceof Error);\n      assert.strictEqual('Cannot use same file for input and output', err.message);\n      done();\n    });\n  });","file":"unit/io.js","skipped":false,"dir":"test"},{"name":"Fail when output File is input File via Promise","suites":["Input/output"],"updatePoint":{"line":303,"column":53,"index":11413},"line":303,"code":"  it('Fail when output File is input File via Promise', function (done) {\n    sharp(fixtures.inputJpg).toFile(fixtures.inputJpg).then(function (data) {\n      assert(false);\n      done();\n    }).catch(function (err) {\n      assert(err instanceof Error);\n      assert.strictEqual('Cannot use same file for input and output', err.message);\n      done();\n    });\n  });","file":"unit/io.js","skipped":false,"dir":"test"},{"name":"Fail when output File is input File (relative output, absolute input)","suites":["Input/output"],"updatePoint":{"line":313,"column":75,"index":11800},"line":313,"code":"  it('Fail when output File is input File (relative output, absolute input)', function (done) {\n    const relativePath = path.relative(process.cwd(), fixtures.inputJpg);\n    sharp(fixtures.inputJpg).toFile(relativePath, function (err) {\n      assert(err instanceof Error);\n      assert.strictEqual('Cannot use same file for input and output', err.message);\n      done();\n    });\n  });","file":"unit/io.js","skipped":false,"dir":"test"},{"name":"Fail when output File is input File via Promise (relative output, absolute input)","suites":["Input/output"],"updatePoint":{"line":321,"column":87,"index":12197},"line":321,"code":"  it('Fail when output File is input File via Promise (relative output, absolute input)', function (done) {\n    const relativePath = path.relative(process.cwd(), fixtures.inputJpg);\n    sharp(fixtures.inputJpg).toFile(relativePath).then(function (data) {\n      assert(false);\n      done();\n    }).catch(function (err) {\n      assert(err instanceof Error);\n      assert.strictEqual('Cannot use same file for input and output', err.message);\n      done();\n    });\n  });","file":"unit/io.js","skipped":false,"dir":"test"},{"name":"Fail when output File is input File (relative input, absolute output)","suites":["Input/output"],"updatePoint":{"line":332,"column":75,"index":12653},"line":332,"code":"  it('Fail when output File is input File (relative input, absolute output)', function (done) {\n    const relativePath = path.relative(process.cwd(), fixtures.inputJpg);\n    sharp(relativePath).toFile(fixtures.inputJpg, function (err) {\n      assert(err instanceof Error);\n      assert.strictEqual('Cannot use same file for input and output', err.message);\n      done();\n    });\n  });","file":"unit/io.js","skipped":false,"dir":"test"},{"name":"Fail when output File is input File via Promise (relative input, absolute output)","suites":["Input/output"],"updatePoint":{"line":340,"column":87,"index":13050},"line":340,"code":"  it('Fail when output File is input File via Promise (relative input, absolute output)', function (done) {\n    const relativePath = path.relative(process.cwd(), fixtures.inputJpg);\n    sharp(relativePath).toFile(fixtures.inputJpg).then(function (data) {\n      assert(false);\n      done();\n    }).catch(function (err) {\n      assert(err instanceof Error);\n      assert.strictEqual('Cannot use same file for input and output', err.message);\n      done();\n    });\n  });","file":"unit/io.js","skipped":false,"dir":"test"},{"name":"Fail when output File is empty","suites":["Input/output"],"updatePoint":{"line":351,"column":36,"index":13467},"line":351,"code":"  it('Fail when output File is empty', function (done) {\n    sharp(fixtures.inputJpg).toFile('', function (err) {\n      assert(err instanceof Error);\n      assert.strictEqual('Missing output file path', err.message);\n      done();\n    });\n  });","file":"unit/io.js","skipped":false,"dir":"test"},{"name":"Fail when output File is empty via Promise","suites":["Input/output"],"updatePoint":{"line":358,"column":48,"index":13724},"line":358,"code":"  it('Fail when output File is empty via Promise', function (done) {\n    sharp(fixtures.inputJpg).toFile('').then(function (data) {\n      assert(false);\n      done();\n    }).catch(function (err) {\n      assert(err instanceof Error);\n      assert.strictEqual('Missing output file path', err.message);\n      done();\n    });\n  });","file":"unit/io.js","skipped":false,"dir":"test"},{"name":"Fail when input is invalid Buffer","suites":["Input/output"],"updatePoint":{"line":368,"column":39,"index":14043},"line":368,"code":"  it('Fail when input is invalid Buffer', function (done) {\n    sharp(Buffer.from([0x1, 0x2, 0x3, 0x4])).toBuffer().then(function () {\n      assert(false);\n      done();\n    }).catch(function (err) {\n      assert(err instanceof Error);\n      assert.strictEqual('Input buffer contains unsupported image format', err.message);\n      done();\n    });\n  });","file":"unit/io.js","skipped":false,"dir":"test"},{"name":"Fail when input file path is missing","suites":["Input/output"],"updatePoint":{"line":378,"column":42,"index":14399},"line":378,"code":"  it('Fail when input file path is missing', function (done) {\n    sharp('does-not-exist').toBuffer().then(function () {\n      assert(false);\n      done();\n    }).catch(function (err) {\n      assert(err instanceof Error);\n      assert.strictEqual('Input file is missing', err.message);\n      done();\n    });\n  });","file":"unit/io.js","skipped":false,"dir":"test"},{"name":"Undefined","suites":["Input/output","Fail for unsupported input"],"updatePoint":{"line":389,"column":17,"index":14743},"line":389,"code":"    it('Undefined', function () {\n      assert.throws(function () {\n        sharp(undefined);\n      });\n    });","file":"unit/io.js","skipped":false,"dir":"test"},{"name":"Null","suites":["Input/output","Fail for unsupported input"],"updatePoint":{"line":394,"column":12,"index":14850},"line":394,"code":"    it('Null', function () {\n      assert.throws(function () {\n        sharp(null);\n      });\n    });","file":"unit/io.js","skipped":false,"dir":"test"},{"name":"Numeric","suites":["Input/output","Fail for unsupported input"],"updatePoint":{"line":399,"column":15,"index":14955},"line":399,"code":"    it('Numeric', function () {\n      assert.throws(function () {\n        sharp(1);\n      });\n    });","file":"unit/io.js","skipped":false,"dir":"test"},{"name":"Boolean","suites":["Input/output","Fail for unsupported input"],"updatePoint":{"line":404,"column":15,"index":15057},"line":404,"code":"    it('Boolean', function () {\n      assert.throws(function () {\n        sharp(true);\n      });\n    });","file":"unit/io.js","skipped":false,"dir":"test"},{"name":"Error Object","suites":["Input/output","Fail for unsupported input"],"updatePoint":{"line":409,"column":20,"index":15167},"line":409,"code":"    it('Error Object', function () {\n      assert.throws(function () {\n        sharp(new Error());\n      });\n    });","file":"unit/io.js","skipped":false,"dir":"test"},{"name":"Promises/A+","suites":["Input/output","Fail for unsupported input"],"updatePoint":{"line":415,"column":17,"index":15287},"line":415,"code":"  it('Promises/A+', function () {\n    return sharp(fixtures.inputJpg).resize(320, 240).toBuffer();\n  });","file":"unit/io.js","skipped":false,"dir":"test"},{"name":"Invalid output format","suites":["Input/output","Fail for unsupported input"],"updatePoint":{"line":418,"column":27,"index":15402},"line":418,"code":"  it('Invalid output format', function (done) {\n    let isValid = false;\n    try {\n      sharp().toFormat('zoinks');\n      isValid = true;\n    } catch (e) {}\n    assert(!isValid);\n    done();\n  });","file":"unit/io.js","skipped":false,"dir":"test"},{"name":"File input with corrupt header fails gracefully","suites":["Input/output","Fail for unsupported input"],"updatePoint":{"line":427,"column":53,"index":15626},"line":427,"code":"  it('File input with corrupt header fails gracefully', function (done) {\n    sharp(fixtures.inputJpgWithCorruptHeader).toBuffer(function (err) {\n      assert.strictEqual(true, !!err);\n      done();\n    });\n  });","file":"unit/io.js","skipped":false,"dir":"test"},{"name":"Buffer input with corrupt header fails gracefully","suites":["Input/output","Fail for unsupported input"],"updatePoint":{"line":433,"column":55,"index":15841},"line":433,"code":"  it('Buffer input with corrupt header fails gracefully', function (done) {\n    sharp(fs.readFileSync(fixtures.inputJpgWithCorruptHeader)).toBuffer(function (err) {\n      assert.strictEqual(true, !!err);\n      done();\n    });\n  });","file":"unit/io.js","skipped":false,"dir":"test"},{"name":"Stream input with corrupt header fails gracefully","suites":["Input/output","Fail for unsupported input"],"updatePoint":{"line":439,"column":55,"index":16073},"line":439,"code":"  it('Stream input with corrupt header fails gracefully', function (done) {\n    const transformer = sharp();\n    transformer.toBuffer().then(function () {\n      done(new Error('Unexpectedly resolved Promise'));\n    }).catch(function (err) {\n      assert.strictEqual(true, !!err);\n      done();\n    });\n    fs.createReadStream(fixtures.inputJpgWithCorruptHeader).pipe(transformer);\n  });","file":"unit/io.js","skipped":false,"dir":"test"},{"name":"Match JPEG input","suites":["Input/output","Output filename with unknown extension"],"updatePoint":{"line":451,"column":24,"index":16553},"line":451,"code":"    it('Match JPEG input', function (done) {\n      sharp(fixtures.inputJpg).resize(320, 80).toFile(outputZoinks, function (err, info) {\n        if (err) throw err;\n        assert.strictEqual(true, info.size > 0);\n        assert.strictEqual('jpeg', info.format);\n        assert.strictEqual(320, info.width);\n        assert.strictEqual(80, info.height);\n        rimraf(outputZoinks, done);\n      });\n    });","file":"unit/io.js","skipped":false,"dir":"test"},{"name":"Match PNG input","suites":["Input/output","Output filename with unknown extension"],"updatePoint":{"line":461,"column":23,"index":16958},"line":461,"code":"    it('Match PNG input', function (done) {\n      sharp(fixtures.inputPng).resize(320, 80).toFile(outputZoinks, function (err, info) {\n        if (err) throw err;\n        assert.strictEqual(true, info.size > 0);\n        assert.strictEqual('png', info.format);\n        assert.strictEqual(320, info.width);\n        assert.strictEqual(80, info.height);\n        rimraf(outputZoinks, done);\n      });\n    });","file":"unit/io.js","skipped":false,"dir":"test"},{"name":"Match WebP input","suites":["Input/output","Output filename with unknown extension"],"updatePoint":{"line":471,"column":24,"index":17363},"line":471,"code":"    it('Match WebP input', function (done) {\n      sharp(fixtures.inputWebP).resize(320, 80).toFile(outputZoinks, function (err, info) {\n        if (err) throw err;\n        assert.strictEqual(true, info.size > 0);\n        assert.strictEqual('webp', info.format);\n        assert.strictEqual(320, info.width);\n        assert.strictEqual(80, info.height);\n        rimraf(outputZoinks, done);\n      });\n    });","file":"unit/io.js","skipped":false,"dir":"test"},{"name":"Match TIFF input","suites":["Input/output","Output filename with unknown extension"],"updatePoint":{"line":481,"column":24,"index":17770},"line":481,"code":"    it('Match TIFF input', function (done) {\n      sharp(fixtures.inputTiff).resize(320, 80).toFile(outputZoinks, function (err, info) {\n        if (err) throw err;\n        assert.strictEqual(true, info.size > 0);\n        assert.strictEqual('tiff', info.format);\n        assert.strictEqual(320, info.width);\n        assert.strictEqual(80, info.height);\n        rimraf(outputZoinks, done);\n      });\n    });","file":"unit/io.js","skipped":false,"dir":"test"},{"name":"Autoconvert GIF input to PNG output","suites":["Input/output","Output filename with unknown extension"],"updatePoint":{"line":491,"column":43,"index":18196},"line":491,"code":"    it('Autoconvert GIF input to PNG output', function (done) {\n      sharp(fixtures.inputGif).resize(320, 80).toFile(outputZoinks, function (err, info) {\n        if (err) throw err;\n        assert.strictEqual(true, info.size > 0);\n        assert.strictEqual(sharp.format.magick.input.buffer ? 'gif' : 'png', info.format);\n        assert.strictEqual(320, info.width);\n        assert.strictEqual(80, info.height);\n        rimraf(outputZoinks, done);\n      });\n    });","file":"unit/io.js","skipped":false,"dir":"test"},{"name":"Force JPEG format for PNG input","suites":["Input/output","Output filename with unknown extension"],"updatePoint":{"line":501,"column":39,"index":18659},"line":501,"code":"    it('Force JPEG format for PNG input', function (done) {\n      sharp(fixtures.inputPng).resize(320, 80).jpeg().toFile(outputZoinks, function (err, info) {\n        if (err) throw err;\n        assert.strictEqual(true, info.size > 0);\n        assert.strictEqual('jpeg', info.format);\n        assert.strictEqual(320, info.width);\n        assert.strictEqual(80, info.height);\n        rimraf(outputZoinks, done);\n      });\n    });","file":"unit/io.js","skipped":false,"dir":"test"},{"name":"Input and output formats match when not forcing","suites":["Input/output","Output filename with unknown extension"],"updatePoint":{"line":512,"column":53,"index":19107},"line":512,"code":"  it('Input and output formats match when not forcing', function (done) {\n    sharp(fixtures.inputJpg).resize(320, 240).png({\n      compressionLevel: 1,\n      force: false\n    }).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual('jpeg', info.format);\n      assert.strictEqual(320, info.width);\n      assert.strictEqual(240, info.height);\n      done();\n    });\n  });","file":"unit/io.js","skipped":false,"dir":"test"},{"name":"Can force output format with output chaining","suites":["Input/output","Output filename with unknown extension"],"updatePoint":{"line":524,"column":50,"index":19509},"line":524,"code":"  it('Can force output format with output chaining', function () {\n    return sharp(fixtures.inputJpg).resize(320, 240).png({\n      force: true\n    }).jpeg({\n      force: false\n    }).toBuffer({\n      resolveWithObject: true\n    }).then(function (out) {\n      assert.strictEqual('png', out.info.format);\n    });\n  });","file":"unit/io.js","skipped":false,"dir":"test"},{"name":"toFormat=JPEG takes precedence over WebP extension","suites":["Input/output","Output filename with unknown extension"],"updatePoint":{"line":535,"column":56,"index":19833},"line":535,"code":"  it('toFormat=JPEG takes precedence over WebP extension', function (done) {\n    const outputWebP = fixtures.path('output.webp');\n    sharp(fixtures.inputPng).jpeg().toFile(outputWebP, function (err, info) {\n      if (err) throw err;\n      assert.strictEqual('jpeg', info.format);\n      rimraf(outputWebP, done);\n    });\n  });","file":"unit/io.js","skipped":false,"dir":"test"},{"name":"toFormat=WebP takes precedence over JPEG extension","suites":["Input/output","Output filename with unknown extension"],"updatePoint":{"line":543,"column":56,"index":20160},"line":543,"code":"  it('toFormat=WebP takes precedence over JPEG extension', function (done) {\n    sharp(fixtures.inputPng).webp().toFile(outputJpg, function (err, info) {\n      if (err) throw err;\n      assert.strictEqual('webp', info.format);\n      done();\n    });\n  });","file":"unit/io.js","skipped":false,"dir":"test"},{"name":"Load Vips V file","suites":["Input/output","Output filename with unknown extension"],"updatePoint":{"line":550,"column":22,"index":20381},"line":550,"code":"  it('Load Vips V file', function (done) {\n    sharp(fixtures.inputV).jpeg().toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(true, data.length > 0);\n      assert.strictEqual('jpeg', info.format);\n      assert.strictEqual(70, info.width);\n      assert.strictEqual(60, info.height);\n      fixtures.assertSimilar(fixtures.expected('vfile.jpg'), data, done);\n    });\n  });","file":"unit/io.js","skipped":false,"dir":"test"},{"name":"Save Vips V file","suites":["Input/output","Output filename with unknown extension"],"updatePoint":{"line":560,"column":22,"index":20791},"line":560,"code":"  it('Save Vips V file', function (done) {\n    const outputV = fixtures.path('output.v');\n    sharp(fixtures.inputJpg).extract({\n      left: 910,\n      top: 1105,\n      width: 70,\n      height: 60\n    }).toFile(outputV, function (err, info) {\n      if (err) throw err;\n      assert.strictEqual(true, info.size > 0);\n      assert.strictEqual('v', info.format);\n      assert.strictEqual(70, info.width);\n      assert.strictEqual(60, info.height);\n      rimraf(outputV, done);\n    });\n  });","file":"unit/io.js","skipped":false,"dir":"test"},{"name":"Invalid fails - negative","suites":["Input/output","Limit pixel count of input image"],"updatePoint":{"line":577,"column":32,"index":21344},"line":577,"code":"    it('Invalid fails - negative', () => {\n      assert.throws(() => {\n        sharp({\n          limitInputPixels: -1\n        });\n      });\n    });","file":"unit/io.js","skipped":false,"dir":"test"},{"name":"Invalid fails - float","suites":["Input/output","Limit pixel count of input image"],"updatePoint":{"line":584,"column":29,"index":21489},"line":584,"code":"    it('Invalid fails - float', () => {\n      assert.throws(() => {\n        sharp({\n          limitInputPixels: 12.3\n        });\n      });\n    });","file":"unit/io.js","skipped":false,"dir":"test"},{"name":"Invalid fails - string","suites":["Input/output","Limit pixel count of input image"],"updatePoint":{"line":591,"column":30,"index":21637},"line":591,"code":"    it('Invalid fails - string', () => {\n      assert.throws(() => {\n        sharp({\n          limitInputPixels: 'fail'\n        });\n      });\n    });","file":"unit/io.js","skipped":false,"dir":"test"},{"name":"Same size as input works","suites":["Input/output","Limit pixel count of input image"],"updatePoint":{"line":598,"column":32,"index":21789},"line":598,"code":"    it('Same size as input works', () => sharp(fixtures.inputJpg).metadata().then(({\n      width,\n      height\n    }) => sharp(fixtures.inputJpg, {\n      limitInputPixels: width * height\n    }).toBuffer()));","file":"unit/io.js","skipped":false,"dir":"test"},{"name":"Disabling limit works","suites":["Input/output","Limit pixel count of input image"],"updatePoint":{"line":604,"column":29,"index":21994},"line":604,"code":"    it('Disabling limit works', () => sharp(fixtures.inputJpgLarge, {\n      limitInputPixels: false\n    }).resize(2).toBuffer());","file":"unit/io.js","skipped":false,"dir":"test"},{"name":"Enabling default limit works and fails with a large image","suites":["Input/output","Limit pixel count of input image"],"updatePoint":{"line":607,"column":65,"index":22160},"line":607,"code":"    it('Enabling default limit works and fails with a large image', () => sharp(fixtures.inputJpgLarge, {\n      limitInputPixels: true\n    }).toBuffer().then(() => {\n      assert.fail('Expected to fail');\n    }).catch(err => {\n      assert.strictEqual(err.message, 'Input image exceeds pixel limit');\n    }));","file":"unit/io.js","skipped":false,"dir":"test"},{"name":"Smaller than input fails","suites":["Input/output","Limit pixel count of input image"],"updatePoint":{"line":614,"column":32,"index":22437},"line":614,"code":"    it('Smaller than input fails', () => sharp(fixtures.inputJpg).metadata().then(({\n      width,\n      height\n    }) => sharp(fixtures.inputJpg, {\n      limitInputPixels: width * height - 1\n    }).toBuffer().then(() => {\n      assert.fail('Expected to fail');\n    }).catch(err => {\n      assert.strictEqual(err.message, 'Input image exceeds pixel limit');\n    })));","file":"unit/io.js","skipped":false,"dir":"test"},{"name":"Option-less","suites":["Input/output","Input options"],"updatePoint":{"line":626,"column":19,"index":22839},"line":626,"code":"    it('Option-less', function () {\n      sharp();\n    });","file":"unit/io.js","skipped":false,"dir":"test"},{"name":"Ignore unknown attribute","suites":["Input/output","Input options"],"updatePoint":{"line":629,"column":32,"index":22911},"line":629,"code":"    it('Ignore unknown attribute', function () {\n      sharp({\n        unknown: true\n      });\n    });","file":"unit/io.js","skipped":false,"dir":"test"},{"name":"undefined with options fails","suites":["Input/output","Input options"],"updatePoint":{"line":634,"column":36,"index":23018},"line":634,"code":"    it('undefined with options fails', function () {\n      assert.throws(function () {\n        sharp(undefined, {});\n      }, /Unsupported input 'undefined' of type undefined when also providing options of type object/);\n    });","file":"unit/io.js","skipped":false,"dir":"test"},{"name":"null with options fails","suites":["Input/output","Input options"],"updatePoint":{"line":639,"column":31,"index":23242},"line":639,"code":"    it('null with options fails', function () {\n      assert.throws(function () {\n        sharp(null, {});\n      }, /Unsupported input 'null' of type object when also providing options of type object/);\n    });","file":"unit/io.js","skipped":false,"dir":"test"},{"name":"Non-Object options fails","suites":["Input/output","Input options"],"updatePoint":{"line":644,"column":32,"index":23454},"line":644,"code":"    it('Non-Object options fails', function () {\n      assert.throws(function () {\n        sharp('test', 'zoinks');\n      }, /Invalid input options zoinks/);\n    });","file":"unit/io.js","skipped":false,"dir":"test"},{"name":"Invalid density: string","suites":["Input/output","Input options"],"updatePoint":{"line":649,"column":31,"index":23619},"line":649,"code":"    it('Invalid density: string', function () {\n      assert.throws(function () {\n        sharp({\n          density: 'zoinks'\n        });\n      }, /Expected number between 1 and 100000 for density but received zoinks of type string/);\n    });","file":"unit/io.js","skipped":false,"dir":"test"},{"name":"Setting animated property updates pages property","suites":["Input/output","Input options"],"updatePoint":{"line":656,"column":56,"index":23887},"line":656,"code":"    it('Setting animated property updates pages property', function () {\n      assert.strictEqual(sharp({\n        animated: false\n      }).options.input.pages, 1);\n      assert.strictEqual(sharp({\n        animated: true\n      }).options.input.pages, -1);\n    });","file":"unit/io.js","skipped":false,"dir":"test"},{"name":"Invalid animated property throws","suites":["Input/output","Input options"],"updatePoint":{"line":664,"column":40,"index":24134},"line":664,"code":"    it('Invalid animated property throws', function () {\n      assert.throws(function () {\n        sharp({\n          animated: -1\n        });\n      }, /Expected boolean for animated but received -1 of type number/);\n    });","file":"unit/io.js","skipped":false,"dir":"test"},{"name":"Invalid page property throws","suites":["Input/output","Input options"],"updatePoint":{"line":671,"column":36,"index":24354},"line":671,"code":"    it('Invalid page property throws', function () {\n      assert.throws(function () {\n        sharp({\n          page: -1\n        });\n      }, /Expected integer between 0 and 100000 for page but received -1 of type number/);\n    });","file":"unit/io.js","skipped":false,"dir":"test"},{"name":"Invalid pages property throws","suites":["Input/output","Input options"],"updatePoint":{"line":678,"column":37,"index":24588},"line":678,"code":"    it('Invalid pages property throws', function () {\n      assert.throws(function () {\n        sharp({\n          pages: '1'\n        });\n      }, /Expected integer between -1 and 100000 for pages but received 1 of type string/);\n    });","file":"unit/io.js","skipped":false,"dir":"test"},{"name":"Valid level property","suites":["Input/output","Input options"],"updatePoint":{"line":685,"column":28,"index":24816},"line":685,"code":"    it('Valid level property', function () {\n      sharp({\n        level: 1\n      });\n    });","file":"unit/io.js","skipped":false,"dir":"test"},{"name":"Invalid level property (string) throws","suites":["Input/output","Input options"],"updatePoint":{"line":690,"column":46,"index":24928},"line":690,"code":"    it('Invalid level property (string) throws', function () {\n      assert.throws(function () {\n        sharp({\n          level: '1'\n        });\n      }, /Expected integer between 0 and 256 for level but received 1 of type string/);\n    });","file":"unit/io.js","skipped":false,"dir":"test"},{"name":"Invalid level property (negative) throws","suites":["Input/output","Input options"],"updatePoint":{"line":697,"column":48,"index":25172},"line":697,"code":"    it('Invalid level property (negative) throws', function () {\n      assert.throws(function () {\n        sharp({\n          level: -1\n        });\n      }, /Expected integer between 0 and 256 for level but received -1 of type number/);\n    });","file":"unit/io.js","skipped":false,"dir":"test"},{"name":"Valid subifd property","suites":["Input/output","Input options"],"updatePoint":{"line":704,"column":29,"index":25397},"line":704,"code":"    it('Valid subifd property', function () {\n      sharp({\n        subifd: 1\n      });\n    });","file":"unit/io.js","skipped":false,"dir":"test"},{"name":"Invalid subifd property (string) throws","suites":["Input/output","Input options"],"updatePoint":{"line":709,"column":47,"index":25511},"line":709,"code":"    it('Invalid subifd property (string) throws', function () {\n      assert.throws(function () {\n        sharp({\n          subifd: '1'\n        });\n      }, /Expected integer between -1 and 100000 for subifd but received 1 of type string/);\n    });","file":"unit/io.js","skipped":false,"dir":"test"},{"name":"Invalid subifd property (float) throws","suites":["Input/output","Input options"],"updatePoint":{"line":716,"column":46,"index":25759},"line":716,"code":"    it('Invalid subifd property (float) throws', function () {\n      assert.throws(function () {\n        sharp({\n          subifd: 1.2\n        });\n      }, /Expected integer between -1 and 100000 for subifd but received 1.2 of type number/);\n    });","file":"unit/io.js","skipped":false,"dir":"test"},{"name":"RGB","suites":["Input/output","create new image"],"updatePoint":{"line":725,"column":11,"index":26025},"line":725,"code":"    it('RGB', function (done) {\n      const create = {\n        width: 10,\n        height: 20,\n        channels: 3,\n        background: {\n          r: 0,\n          g: 255,\n          b: 0\n        }\n      };\n      sharp({\n        create: create\n      }).jpeg().toBuffer(function (err, data, info) {\n        if (err) throw err;\n        assert.strictEqual(create.width, info.width);\n        assert.strictEqual(create.height, info.height);\n        assert.strictEqual(create.channels, info.channels);\n        assert.strictEqual('jpeg', info.format);\n        fixtures.assertSimilar(fixtures.expected('create-rgb.jpg'), data, done);\n      });\n    });","file":"unit/io.js","skipped":false,"dir":"test"},{"name":"RGBA","suites":["Input/output","create new image"],"updatePoint":{"line":747,"column":12,"index":26668},"line":747,"code":"    it('RGBA', function (done) {\n      const create = {\n        width: 20,\n        height: 10,\n        channels: 4,\n        background: {\n          r: 255,\n          g: 0,\n          b: 0,\n          alpha: 128\n        }\n      };\n      sharp({\n        create: create\n      }).png().toBuffer(function (err, data, info) {\n        if (err) throw err;\n        assert.strictEqual(create.width, info.width);\n        assert.strictEqual(create.height, info.height);\n        assert.strictEqual(create.channels, info.channels);\n        assert.strictEqual('png', info.format);\n        fixtures.assertSimilar(fixtures.expected('create-rgba.png'), data, done);\n      });\n    });","file":"unit/io.js","skipped":false,"dir":"test"},{"name":"Invalid channels","suites":["Input/output","create new image"],"updatePoint":{"line":770,"column":24,"index":27344},"line":770,"code":"    it('Invalid channels', function () {\n      const create = {\n        width: 10,\n        height: 20,\n        channels: 2,\n        background: {\n          r: 0,\n          g: 0,\n          b: 0\n        }\n      };\n      assert.throws(function () {\n        sharp({\n          create: create\n        });\n      });\n    });","file":"unit/io.js","skipped":false,"dir":"test"},{"name":"Missing background","suites":["Input/output","create new image"],"updatePoint":{"line":787,"column":26,"index":27663},"line":787,"code":"    it('Missing background', function () {\n      const create = {\n        width: 10,\n        height: 20,\n        channels: 3\n      };\n      assert.throws(function () {\n        sharp({\n          create: create\n        });\n      });\n    });","file":"unit/io.js","skipped":false,"dir":"test"},{"name":"Queue length change events","suites":["Input/output","create new image"],"updatePoint":{"line":800,"column":32,"index":27914},"line":800,"code":"  it('Queue length change events', function (done) {\n    let eventCounter = 0;\n    const queueListener = function (queueLength) {\n      assert.strictEqual(true, queueLength === 0 || queueLength === 1);\n      eventCounter++;\n    };\n    sharp.queue.on('change', queueListener);\n    sharp(fixtures.inputJpg).resize(320, 240).toBuffer(function (err) {\n      process.nextTick(function () {\n        sharp.queue.removeListener('change', queueListener);\n        if (err) throw err;\n        assert.strictEqual(2, eventCounter);\n        done();\n      });\n    });\n  });","file":"unit/io.js","skipped":false,"dir":"test"},{"name":"Info event data","suites":["Input/output","create new image"],"updatePoint":{"line":816,"column":21,"index":28462},"line":816,"code":"  it('Info event data', function (done) {\n    const readable = fs.createReadStream(fixtures.inputJPGBig);\n    const inPipeline = sharp().resize(840, 472).raw().on('info', function (info) {\n      assert.strictEqual(840, info.width);\n      assert.strictEqual(472, info.height);\n      assert.strictEqual(3, info.channels);\n    });\n    const badPipeline = sharp({\n      raw: {\n        width: 840,\n        height: 500,\n        channels: 3\n      }\n    }).toFormat('jpeg').toBuffer(function (err, data, info) {\n      assert.strictEqual(err.message.indexOf('memory area too small') > 0, true);\n      const readable = fs.createReadStream(fixtures.inputJPGBig);\n      const inPipeline = sharp().resize(840, 472).raw();\n      const goodPipeline = sharp({\n        raw: {\n          width: 840,\n          height: 472,\n          channels: 3\n        }\n      }).toFormat('jpeg').toBuffer(function (err, data, info) {\n        if (err) throw err;\n        done();\n      });\n      readable.pipe(inPipeline).pipe(goodPipeline);\n    });\n    readable.pipe(inPipeline).pipe(badPipeline);\n  });","file":"unit/io.js","skipped":false,"dir":"test"},{"name":"Grayscale to RGB, buffer","suites":["Image channel insertion"],"updatePoint":{"line":8,"column":30,"index":230},"line":8,"code":"  it('Grayscale to RGB, buffer', function (done) {\n    sharp(fixtures.inputPng) // gray -> red\n    .resize(320, 240).joinChannel(fixtures.inputPngTestJoinChannel) // new green channel\n    .joinChannel(fixtures.inputPngStripesH) // new blue channel\n    .toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(320, info.width);\n      assert.strictEqual(240, info.height);\n      assert.strictEqual(3, info.channels);\n      fixtures.assertSimilar(fixtures.expected('joinChannel-rgb.jpg'), data, done);\n    });\n  });","file":"unit/joinChannel.js","skipped":false,"dir":"test"},{"name":"Grayscale to RGB, file","suites":["Image channel insertion"],"updatePoint":{"line":20,"column":28,"index":774},"line":20,"code":"  it('Grayscale to RGB, file', function (done) {\n    sharp(fixtures.inputPng) // gray -> red\n    .resize(320, 240).joinChannel(fs.readFileSync(fixtures.inputPngTestJoinChannel)) // new green channel\n    .joinChannel(fs.readFileSync(fixtures.inputPngStripesH)) // new blue channel\n    .toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(320, info.width);\n      assert.strictEqual(240, info.height);\n      assert.strictEqual(3, info.channels);\n      fixtures.assertSimilar(fixtures.expected('joinChannel-rgb.jpg'), data, done);\n    });\n  });","file":"unit/joinChannel.js","skipped":false,"dir":"test"},{"name":"Grayscale to RGBA, buffer","suites":["Image channel insertion"],"updatePoint":{"line":32,"column":31,"index":1355},"line":32,"code":"  it('Grayscale to RGBA, buffer', function (done) {\n    sharp(fixtures.inputPng) // gray -> red\n    .resize(320, 240).joinChannel([fixtures.inputPngTestJoinChannel, fixtures.inputPngStripesH, fixtures.inputPngStripesV]) // new green + blue + alpha channel\n    .toColourspace(sharp.colourspace.srgb).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(320, info.width);\n      assert.strictEqual(240, info.height);\n      assert.strictEqual(4, info.channels);\n      fixtures.assertSimilar(fixtures.expected('joinChannel-rgba.png'), data, done);\n    });\n  });","file":"unit/joinChannel.js","skipped":false,"dir":"test"},{"name":"Grayscale to RGBA, file","suites":["Image channel insertion"],"updatePoint":{"line":43,"column":29,"index":1946},"line":43,"code":"  it('Grayscale to RGBA, file', function (done) {\n    sharp(fixtures.inputPng) // gray -> red\n    .resize(320, 240).joinChannel([fs.readFileSync(fixtures.inputPngTestJoinChannel),\n    // new green channel\n    fs.readFileSync(fixtures.inputPngStripesH),\n    // new blue channel\n    fs.readFileSync(fixtures.inputPngStripesV) // new alpha channel\n    ]).toColourspace('srgb').toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(320, info.width);\n      assert.strictEqual(240, info.height);\n      assert.strictEqual(4, info.channels);\n      fixtures.assertSimilar(fixtures.expected('joinChannel-rgba.png'), data, done);\n    });\n  });","file":"unit/joinChannel.js","skipped":false,"dir":"test"},{"name":"Grayscale to CMYK, buffers","suites":["Image channel insertion"],"updatePoint":{"line":58,"column":32,"index":2617},"line":58,"code":"  it('Grayscale to CMYK, buffers', function (done) {\n    sharp(fixtures.inputPng) // gray -> magenta\n    .resize(320, 240).joinChannel([fs.readFileSync(fixtures.inputPngTestJoinChannel),\n    // new cyan channel\n    fs.readFileSync(fixtures.inputPngStripesH),\n    // new yellow channel\n    fs.readFileSync(fixtures.inputPngStripesV) // new black channel\n    ]).toColorspace('cmyk').toFormat('jpeg').toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(320, info.width);\n      assert.strictEqual(240, info.height);\n      assert.strictEqual(4, info.channels);\n      fixtures.assertSimilar(fixtures.expected('joinChannel-cmyk.jpg'), data, done);\n    });\n  });","file":"unit/joinChannel.js","skipped":false,"dir":"test"},{"name":"Join raw buffers to RGB","suites":["Image channel insertion"],"updatePoint":{"line":73,"column":29,"index":3306},"line":73,"code":"  it('Join raw buffers to RGB', function (done) {\n    Promise.all([sharp(fixtures.inputPngTestJoinChannel).toColourspace('b-w').raw().toBuffer(), sharp(fixtures.inputPngStripesH).toColourspace('b-w').raw().toBuffer()]).then(function (buffers) {\n      sharp(fixtures.inputPng).resize(320, 240).joinChannel(buffers, {\n        raw: {\n          width: 320,\n          height: 240,\n          channels: 1\n        }\n      }).toBuffer(function (err, data, info) {\n        if (err) throw err;\n        assert.strictEqual(320, info.width);\n        assert.strictEqual(240, info.height);\n        assert.strictEqual(3, info.channels);\n        fixtures.assertSimilar(fixtures.expected('joinChannel-rgb.jpg'), data, done);\n      });\n    }).catch(function (err) {\n      throw err;\n    });\n  });","file":"unit/joinChannel.js","skipped":false,"dir":"test"},{"name":"Grayscale to RGBA, files, two arrays","suites":["Image channel insertion"],"updatePoint":{"line":92,"column":42,"index":4096},"line":92,"code":"  it('Grayscale to RGBA, files, two arrays', function (done) {\n    sharp(fixtures.inputPng) // gray -> red\n    .resize(320, 240).joinChannel([fs.readFileSync(fixtures.inputPngTestJoinChannel)]) // new green channel\n    .joinChannel([fs.readFileSync(fixtures.inputPngStripesH),\n    // new blue channel\n    fs.readFileSync(fixtures.inputPngStripesV) // new alpha channel\n    ]).toColourspace('srgb').toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(320, info.width);\n      assert.strictEqual(240, info.height);\n      assert.strictEqual(4, info.channels);\n      fixtures.assertSimilar(fixtures.expected('joinChannel-rgba.png'), data, done);\n    });\n  });","file":"unit/joinChannel.js","skipped":false,"dir":"test"},{"name":"Invalid raw buffer description","suites":["Image channel insertion"],"updatePoint":{"line":106,"column":36,"index":4782},"line":106,"code":"  it('Invalid raw buffer description', function () {\n    assert.throws(function () {\n      sharp().joinChannel(fs.readFileSync(fixtures.inputPng), {\n        raw: {}\n      });\n    });\n  });","file":"unit/joinChannel.js","skipped":false,"dir":"test"},{"name":"Invalid input","suites":["Image channel insertion"],"updatePoint":{"line":113,"column":19,"index":4954},"line":113,"code":"  it('Invalid input', function () {\n    assert.throws(function () {\n      sharp(fixtures.inputJpg).joinChannel(1);\n    });\n  });","file":"unit/joinChannel.js","skipped":false,"dir":"test"},{"name":"No arguments","suites":["Image channel insertion"],"updatePoint":{"line":118,"column":18,"index":5082},"line":118,"code":"  it('No arguments', function () {\n    assert.throws(function () {\n      sharp(fixtures.inputJpg).joinChannel();\n    });\n  });","file":"unit/joinChannel.js","skipped":false,"dir":"test"},{"name":"JP2 output should fail due to missing OpenJPEG","suites":["JP2 output"],"updatePoint":{"line":9,"column":54,"index":276},"line":9,"code":"    it('JP2 output should fail due to missing OpenJPEG', () => {\n      assert.rejects(() => sharp(fixtures.inputJpg).jp2().toBuffer(), /JP2 output requires libvips with support for OpenJPEG/);\n    });","file":"unit/jp2.js","skipped":false,"dir":"test"},{"name":"JP2 file output should fail due to missing OpenJPEG","suites":["JP2 output"],"updatePoint":{"line":12,"column":59,"index":482},"line":12,"code":"    it('JP2 file output should fail due to missing OpenJPEG', () => {\n      assert.rejects(async () => await sharp().toFile('test.jp2'), /JP2 output requires libvips with support for OpenJPEG/);\n    });","file":"unit/jp2.js","skipped":false,"dir":"test"},{"name":"JP2 Buffer to PNG Buffer","suites":["JP2 output"],"updatePoint":{"line":16,"column":32,"index":669},"line":16,"code":"    it('JP2 Buffer to PNG Buffer', () => {\n      sharp(fs.readFileSync(fixtures.inputJp2)).resize(8, 15).png().toBuffer({\n        resolveWithObject: true\n      }).then(({\n        data,\n        info\n      }) => {\n        assert.strictEqual(true, data.length > 0);\n        assert.strictEqual(data.length, info.size);\n        assert.strictEqual('png', info.format);\n        assert.strictEqual(8, info.width);\n        assert.strictEqual(15, info.height);\n        assert.strictEqual(4, info.channels);\n      });\n    });","file":"unit/jp2.js","skipped":false,"dir":"test"},{"name":"JP2 quality","suites":["JP2 output"],"updatePoint":{"line":31,"column":19,"index":1171},"line":31,"code":"    it('JP2 quality', function (done) {\n      sharp(fixtures.inputJp2).resize(320, 240).jp2({\n        quality: 70\n      }).toBuffer(function (err, buffer70) {\n        if (err) throw err;\n        sharp(fixtures.inputJp2).resize(320, 240).toBuffer(function (err, buffer80) {\n          if (err) throw err;\n          sharp(fixtures.inputJp2).resize(320, 240).jp2({\n            quality: 90\n          }).toBuffer(function (err, buffer90) {\n            if (err) throw err;\n            assert(buffer70.length < buffer80.length);\n            assert(buffer80.length < buffer90.length);\n            done();\n          });\n        });\n      });\n    });","file":"unit/jp2.js","skipped":false,"dir":"test"},{"name":"Without chroma subsampling generates larger file","suites":["JP2 output"],"updatePoint":{"line":49,"column":56,"index":1848},"line":49,"code":"    it('Without chroma subsampling generates larger file', function (done) {\n      // First generate with chroma subsampling (default)\n      sharp(fixtures.inputJp2).resize(320, 240).jp2({\n        chromaSubsampling: '4:2:0'\n      }).toBuffer(function (err, withChromaSubsamplingData, withChromaSubsamplingInfo) {\n        if (err) throw err;\n        assert.strictEqual(true, withChromaSubsamplingData.length > 0);\n        assert.strictEqual(withChromaSubsamplingData.length, withChromaSubsamplingInfo.size);\n        assert.strictEqual('jp2', withChromaSubsamplingInfo.format);\n        assert.strictEqual(320, withChromaSubsamplingInfo.width);\n        assert.strictEqual(240, withChromaSubsamplingInfo.height);\n        // Then generate without\n        sharp(fixtures.inputJp2).resize(320, 240).jp2({\n          chromaSubsampling: '4:4:4'\n        }).toBuffer(function (err, withoutChromaSubsamplingData, withoutChromaSubsamplingInfo) {\n          if (err) throw err;\n          assert.strictEqual(true, withoutChromaSubsamplingData.length > 0);\n          assert.strictEqual(withoutChromaSubsamplingData.length, withoutChromaSubsamplingInfo.size);\n          assert.strictEqual('jp2', withoutChromaSubsamplingInfo.format);\n          assert.strictEqual(320, withoutChromaSubsamplingInfo.width);\n          assert.strictEqual(240, withoutChromaSubsamplingInfo.height);\n          assert.strictEqual(true, withChromaSubsamplingData.length <= withoutChromaSubsamplingData.length);\n          done();\n        });\n      });\n    });","file":"unit/jp2.js","skipped":false,"dir":"test"},{"name":"Invalid JP2 chromaSubsampling value throws error","suites":["JP2 output"],"updatePoint":{"line":75,"column":56,"index":3363},"line":75,"code":"    it('Invalid JP2 chromaSubsampling value throws error', function () {\n      assert.throws(function () {\n        sharp().jpeg({\n          chromaSubsampling: '4:2:2'\n        });\n      });\n    });","file":"unit/jp2.js","skipped":false,"dir":"test"},{"name":"JPEG quality","suites":["JPEG"],"updatePoint":{"line":7,"column":18,"index":173},"line":7,"code":"  it('JPEG quality', function (done) {\n    sharp(fixtures.inputJpg).resize(320, 240).jpeg({\n      quality: 70\n    }).toBuffer(function (err, buffer70) {\n      if (err) throw err;\n      sharp(fixtures.inputJpg).resize(320, 240).toBuffer(function (err, buffer80) {\n        if (err) throw err;\n        sharp(fixtures.inputJpg).resize(320, 240).jpeg({\n          quality: 90\n        }).toBuffer(function (err, buffer90) {\n          if (err) throw err;\n          assert(buffer70.length < buffer80.length);\n          assert(buffer80.length < buffer90.length);\n          done();\n        });\n      });\n    });\n  });","file":"unit/jpeg.js","skipped":false,"dir":"test"},{"name":"Progressive JPEG image","suites":["JPEG","Invalid JPEG quantisation table"],"updatePoint":{"line":47,"column":28,"index":1373},"line":47,"code":"  it('Progressive JPEG image', function (done) {\n    sharp(fixtures.inputJpg).resize(320, 240).jpeg({\n      progressive: false\n    }).toBuffer(function (err, nonProgressiveData, nonProgressiveInfo) {\n      if (err) throw err;\n      assert.strictEqual(true, nonProgressiveData.length > 0);\n      assert.strictEqual(nonProgressiveData.length, nonProgressiveInfo.size);\n      assert.strictEqual('jpeg', nonProgressiveInfo.format);\n      assert.strictEqual(320, nonProgressiveInfo.width);\n      assert.strictEqual(240, nonProgressiveInfo.height);\n      sharp(fixtures.inputJpg).resize(320, 240).jpeg({\n        progressive: true\n      }).toBuffer(function (err, progressiveData, progressiveInfo) {\n        if (err) throw err;\n        assert.strictEqual(true, progressiveData.length > 0);\n        assert.strictEqual(progressiveData.length, progressiveInfo.size);\n        assert.strictEqual(false, progressiveData.length === nonProgressiveData.length);\n        assert.strictEqual('jpeg', progressiveInfo.format);\n        assert.strictEqual(320, progressiveInfo.width);\n        assert.strictEqual(240, progressiveInfo.height);\n        done();\n      });\n    });\n  });","file":"unit/jpeg.js","skipped":false,"dir":"test"},{"name":"Without chroma subsampling generates larger file","suites":["JPEG","Invalid JPEG quantisation table"],"updatePoint":{"line":71,"column":54,"index":2558},"line":71,"code":"  it('Without chroma subsampling generates larger file', function (done) {\n    // First generate with chroma subsampling (default)\n    sharp(fixtures.inputJpg).resize(320, 240).jpeg({\n      chromaSubsampling: '4:2:0'\n    }).toBuffer(function (err, withChromaSubsamplingData, withChromaSubsamplingInfo) {\n      if (err) throw err;\n      assert.strictEqual(true, withChromaSubsamplingData.length > 0);\n      assert.strictEqual(withChromaSubsamplingData.length, withChromaSubsamplingInfo.size);\n      assert.strictEqual('jpeg', withChromaSubsamplingInfo.format);\n      assert.strictEqual(320, withChromaSubsamplingInfo.width);\n      assert.strictEqual(240, withChromaSubsamplingInfo.height);\n      // Then generate without\n      sharp(fixtures.inputJpg).resize(320, 240).jpeg({\n        chromaSubsampling: '4:4:4'\n      }).toBuffer(function (err, withoutChromaSubsamplingData, withoutChromaSubsamplingInfo) {\n        if (err) throw err;\n        assert.strictEqual(true, withoutChromaSubsamplingData.length > 0);\n        assert.strictEqual(withoutChromaSubsamplingData.length, withoutChromaSubsamplingInfo.size);\n        assert.strictEqual('jpeg', withoutChromaSubsamplingInfo.format);\n        assert.strictEqual(320, withoutChromaSubsamplingInfo.width);\n        assert.strictEqual(240, withoutChromaSubsamplingInfo.height);\n        assert.strictEqual(true, withChromaSubsamplingData.length < withoutChromaSubsamplingData.length);\n        done();\n      });\n    });\n  });","file":"unit/jpeg.js","skipped":false,"dir":"test"},{"name":"Invalid JPEG chromaSubsampling value throws error","suites":["JPEG","Invalid JPEG quantisation table"],"updatePoint":{"line":97,"column":55,"index":4025},"line":97,"code":"  it('Invalid JPEG chromaSubsampling value throws error', function () {\n    assert.throws(function () {\n      sharp().jpeg({\n        chromaSubsampling: '4:2:2'\n      });\n    });\n  });","file":"unit/jpeg.js","skipped":false,"dir":"test"},{"name":"Trellis quantisation","suites":["JPEG","Invalid JPEG quantisation table"],"updatePoint":{"line":104,"column":26,"index":4180},"line":104,"code":"  it('Trellis quantisation', function (done) {\n    // First generate without\n    sharp(fixtures.inputJpg).resize(320, 240).jpeg({\n      trellisQuantisation: false\n    }).toBuffer(function (err, withoutData, withoutInfo) {\n      if (err) throw err;\n      assert.strictEqual(true, withoutData.length > 0);\n      assert.strictEqual(withoutData.length, withoutInfo.size);\n      assert.strictEqual('jpeg', withoutInfo.format);\n      assert.strictEqual(320, withoutInfo.width);\n      assert.strictEqual(240, withoutInfo.height);\n      // Then generate with\n      sharp(fixtures.inputJpg).resize(320, 240).jpeg({\n        trellisQuantization: true\n      }).toBuffer(function (err, withData, withInfo) {\n        if (err) throw err;\n        assert.strictEqual(true, withData.length > 0);\n        assert.strictEqual(withData.length, withInfo.size);\n        assert.strictEqual('jpeg', withInfo.format);\n        assert.strictEqual(320, withInfo.width);\n        assert.strictEqual(240, withInfo.height);\n        // Verify image is same (as mozjpeg may not be present) size or less\n        assert.strictEqual(true, withData.length <= withoutData.length);\n        done();\n      });\n    });\n  });","file":"unit/jpeg.js","skipped":false,"dir":"test"},{"name":"Overshoot deringing","suites":["JPEG","Invalid JPEG quantisation table"],"updatePoint":{"line":131,"column":25,"index":5359},"line":131,"code":"  it('Overshoot deringing', function (done) {\n    // First generate without\n    sharp(fixtures.inputJpg).resize(320, 240).jpeg({\n      overshootDeringing: false\n    }).toBuffer(function (err, withoutData, withoutInfo) {\n      if (err) throw err;\n      assert.strictEqual(true, withoutData.length > 0);\n      assert.strictEqual(withoutData.length, withoutInfo.size);\n      assert.strictEqual('jpeg', withoutInfo.format);\n      assert.strictEqual(320, withoutInfo.width);\n      assert.strictEqual(240, withoutInfo.height);\n      // Then generate with\n      sharp(fixtures.inputJpg).resize(320, 240).jpeg({\n        overshootDeringing: true\n      }).toBuffer(function (err, withData, withInfo) {\n        if (err) throw err;\n        assert.strictEqual(true, withData.length > 0);\n        assert.strictEqual(withData.length, withInfo.size);\n        assert.strictEqual('jpeg', withInfo.format);\n        assert.strictEqual(320, withInfo.width);\n        assert.strictEqual(240, withInfo.height);\n        done();\n      });\n    });\n  });","file":"unit/jpeg.js","skipped":false,"dir":"test"},{"name":"Optimise scans generates different output length","suites":["JPEG","Invalid JPEG quantisation table"],"updatePoint":{"line":156,"column":54,"index":6415},"line":156,"code":"  it('Optimise scans generates different output length', function (done) {\n    // First generate without\n    sharp(fixtures.inputJpg).resize(320, 240).jpeg({\n      optimiseScans: false\n    }).toBuffer(function (err, withoutData, withoutInfo) {\n      if (err) throw err;\n      assert.strictEqual(true, withoutData.length > 0);\n      assert.strictEqual(withoutData.length, withoutInfo.size);\n      assert.strictEqual('jpeg', withoutInfo.format);\n      assert.strictEqual(320, withoutInfo.width);\n      assert.strictEqual(240, withoutInfo.height);\n      // Then generate with\n      sharp(fixtures.inputJpg).resize(320, 240).jpeg({\n        optimizeScans: true\n      }).toBuffer(function (err, withData, withInfo) {\n        if (err) throw err;\n        assert.strictEqual(true, withData.length > 0);\n        assert.strictEqual(withData.length, withInfo.size);\n        assert.strictEqual('jpeg', withInfo.format);\n        assert.strictEqual(320, withInfo.width);\n        assert.strictEqual(240, withInfo.height);\n        // Verify image is of a different size (progressive output even without mozjpeg)\n        assert.notStrictEqual(withData.length, withoutData.length);\n        done();\n      });\n    });\n  });","file":"unit/jpeg.js","skipped":false,"dir":"test"},{"name":"Optimise coding generates smaller output length","suites":["JPEG","Invalid JPEG quantisation table"],"updatePoint":{"line":183,"column":53,"index":7617},"line":183,"code":"  it('Optimise coding generates smaller output length', function (done) {\n    // First generate with optimize coding enabled (default)\n    sharp(fixtures.inputJpg).resize(320, 240).jpeg().toBuffer(function (err, withOptimiseCoding, withInfo) {\n      if (err) throw err;\n      assert.strictEqual(true, withOptimiseCoding.length > 0);\n      assert.strictEqual(withOptimiseCoding.length, withInfo.size);\n      assert.strictEqual('jpeg', withInfo.format);\n      assert.strictEqual(320, withInfo.width);\n      assert.strictEqual(240, withInfo.height);\n      // Then generate with coding disabled\n      sharp(fixtures.inputJpg).resize(320, 240).jpeg({\n        optimizeCoding: false\n      }).toBuffer(function (err, withoutOptimiseCoding, withoutInfo) {\n        if (err) throw err;\n        assert.strictEqual(true, withoutOptimiseCoding.length > 0);\n        assert.strictEqual(withoutOptimiseCoding.length, withoutInfo.size);\n        assert.strictEqual('jpeg', withoutInfo.format);\n        assert.strictEqual(320, withoutInfo.width);\n        assert.strictEqual(240, withoutInfo.height);\n        // Verify optimised image is of a smaller size\n        assert.strictEqual(true, withOptimiseCoding.length < withoutOptimiseCoding.length);\n        done();\n      });\n    });\n  });","file":"unit/jpeg.js","skipped":false,"dir":"test"},{"name":"Specifying quantisation table provides different JPEG","suites":["JPEG","Invalid JPEG quantisation table"],"updatePoint":{"line":208,"column":59,"index":8890},"line":208,"code":"  it('Specifying quantisation table provides different JPEG', function (done) {\n    // First generate with default quantisation table\n    sharp(fixtures.inputJpg).resize(320, 240).jpeg({\n      optimiseCoding: false\n    }).toBuffer(function (err, withDefaultQuantisationTable, withInfo) {\n      if (err) throw err;\n      assert.strictEqual(true, withDefaultQuantisationTable.length > 0);\n      assert.strictEqual(withDefaultQuantisationTable.length, withInfo.size);\n      assert.strictEqual('jpeg', withInfo.format);\n      assert.strictEqual(320, withInfo.width);\n      assert.strictEqual(240, withInfo.height);\n      // Then generate with different quantisation table\n      sharp(fixtures.inputJpg).resize(320, 240).jpeg({\n        optimiseCoding: false,\n        quantisationTable: 3\n      }).toBuffer(function (err, withQuantTable3, withoutInfo) {\n        if (err) throw err;\n        assert.strictEqual(true, withQuantTable3.length > 0);\n        assert.strictEqual(withQuantTable3.length, withoutInfo.size);\n        assert.strictEqual('jpeg', withoutInfo.format);\n        assert.strictEqual(320, withoutInfo.width);\n        assert.strictEqual(240, withoutInfo.height);\n\n        // Verify image is same (as mozjpeg may not be present) size or less\n        assert.strictEqual(true, withQuantTable3.length <= withDefaultQuantisationTable.length);\n        done();\n      });\n    });\n  });","file":"unit/jpeg.js","skipped":false,"dir":"test"},{"name":"Specifying quantization table provides different JPEG","suites":["JPEG","Invalid JPEG quantisation table"],"updatePoint":{"line":237,"column":59,"index":10274},"line":237,"code":"  it('Specifying quantization table provides different JPEG', function (done) {\n    // First generate with default quantization table\n    sharp(fixtures.inputJpg).resize(320, 240).jpeg({\n      optimiseCoding: false\n    }).toBuffer(function (err, withDefaultQuantizationTable, withInfo) {\n      if (err) throw err;\n      assert.strictEqual(true, withDefaultQuantizationTable.length > 0);\n      assert.strictEqual(withDefaultQuantizationTable.length, withInfo.size);\n      assert.strictEqual('jpeg', withInfo.format);\n      assert.strictEqual(320, withInfo.width);\n      assert.strictEqual(240, withInfo.height);\n      // Then generate with different quantization table\n      sharp(fixtures.inputJpg).resize(320, 240).jpeg({\n        optimiseCoding: false,\n        quantizationTable: 3\n      }).toBuffer(function (err, withQuantTable3, withoutInfo) {\n        if (err) throw err;\n        assert.strictEqual(true, withQuantTable3.length > 0);\n        assert.strictEqual(withQuantTable3.length, withoutInfo.size);\n        assert.strictEqual('jpeg', withoutInfo.format);\n        assert.strictEqual(320, withoutInfo.width);\n        assert.strictEqual(240, withoutInfo.height);\n\n        // Verify image is same (as mozjpeg may not be present) size or less\n        assert.strictEqual(true, withQuantTable3.length <= withDefaultQuantizationTable.length);\n        done();\n      });\n    });\n  });","file":"unit/jpeg.js","skipped":false,"dir":"test"},{"name":"Can use mozjpeg defaults","suites":["JPEG","Invalid JPEG quantisation table"],"updatePoint":{"line":266,"column":30,"index":11629},"line":266,"code":"  it('Can use mozjpeg defaults', async () => {\n    const withoutData = await sharp(fixtures.inputJpg).resize(32, 24).jpeg({\n      mozjpeg: false\n    }).toBuffer();\n    const withoutMeta = await sharp(withoutData).metadata();\n    assert.strictEqual(false, withoutMeta.isProgressive);\n    const withData = await sharp(fixtures.inputJpg).resize(32, 24).jpeg({\n      mozjpeg: true\n    }).toBuffer();\n    const withMeta = await sharp(withData).metadata();\n    assert.strictEqual(true, withMeta.isProgressive);\n  });","file":"unit/jpeg.js","skipped":false,"dir":"test"},{"name":"Invalid mozjpeg value throws error","suites":["JPEG","Invalid JPEG quantisation table"],"updatePoint":{"line":278,"column":40,"index":12150},"line":278,"code":"  it('Invalid mozjpeg value throws error', () => {\n    assert.throws(() => sharp().jpeg({\n      mozjpeg: 'fail'\n    }));\n  });","file":"unit/jpeg.js","skipped":false,"dir":"test"},{"name":"pkgConfigPath returns empty string","suites":["libvips binaries","Windows platform"],"updatePoint":{"line":23,"column":42,"index":645},"line":23,"code":"    it('pkgConfigPath returns empty string', function () {\n      assert.strictEqual('', libvips.pkgConfigPath());\n    });","file":"unit/libvips.js","skipped":false,"dir":"test"},{"name":"globalLibvipsVersion returns empty string","suites":["libvips binaries","Windows platform"],"updatePoint":{"line":26,"column":49,"index":774},"line":26,"code":"    it('globalLibvipsVersion returns empty string', function () {\n      assert.strictEqual('', libvips.globalLibvipsVersion());\n    });","file":"unit/libvips.js","skipped":false,"dir":"test"},{"name":"globalLibvipsVersion is always false","suites":["libvips binaries","Windows platform"],"updatePoint":{"line":29,"column":44,"index":905},"line":29,"code":"    it('globalLibvipsVersion is always false', function () {\n      assert.strictEqual(false, libvips.useGlobalLibvips());\n    });","file":"unit/libvips.js","skipped":false,"dir":"test"},{"name":"pkgConfigPath returns a string","suites":["libvips binaries","non-Windows platforms"],"updatePoint":{"line":38,"column":38,"index":1174},"line":38,"code":"    it('pkgConfigPath returns a string', function () {\n      const pkgConfigPath = libvips.pkgConfigPath();\n      assert.strictEqual('string', typeof pkgConfigPath);\n    });","file":"unit/libvips.js","skipped":false,"dir":"test"},{"name":"globalLibvipsVersion returns a string","suites":["libvips binaries","non-Windows platforms"],"updatePoint":{"line":42,"column":45,"index":1355},"line":42,"code":"    it('globalLibvipsVersion returns a string', function () {\n      const globalLibvipsVersion = libvips.globalLibvipsVersion();\n      assert.strictEqual('string', typeof globalLibvipsVersion);\n    });","file":"unit/libvips.js","skipped":false,"dir":"test"},{"name":"globalLibvipsVersion returns a boolean","suites":["libvips binaries","non-Windows platforms"],"updatePoint":{"line":46,"column":46,"index":1558},"line":46,"code":"    it('globalLibvipsVersion returns a boolean', function () {\n      const useGlobalLibvips = libvips.useGlobalLibvips();\n      assert.strictEqual('boolean', typeof useGlobalLibvips);\n    });","file":"unit/libvips.js","skipped":false,"dir":"test"},{"name":"minimumLibvipsVersion returns a valid semver","suites":["libvips binaries","platform agnostic"],"updatePoint":{"line":52,"column":52,"index":1808},"line":52,"code":"    it('minimumLibvipsVersion returns a valid semver', function () {\n      const minimumLibvipsVersion = libvips.minimumLibvipsVersion;\n      assert.strictEqual('string', typeof minimumLibvipsVersion);\n      assert.notStrictEqual(null, semver.valid(minimumLibvipsVersion));\n    });","file":"unit/libvips.js","skipped":false,"dir":"test"},{"name":"hasVendoredLibvips returns a boolean","suites":["libvips binaries","platform agnostic"],"updatePoint":{"line":57,"column":44,"index":2082},"line":57,"code":"    it('hasVendoredLibvips returns a boolean', function () {\n      const hasVendoredLibvips = libvips.hasVendoredLibvips();\n      assert.strictEqual('boolean', typeof hasVendoredLibvips);\n    });","file":"unit/libvips.js","skipped":false,"dir":"test"},{"name":"useGlobalLibvips can be ignored via an env var","suites":["libvips binaries","platform agnostic"],"updatePoint":{"line":61,"column":54,"index":2288},"line":61,"code":"    it('useGlobalLibvips can be ignored via an env var', function () {\n      process.env.SHARP_IGNORE_GLOBAL_LIBVIPS = 1;\n      const useGlobalLibvips = libvips.useGlobalLibvips();\n      assert.strictEqual(false, useGlobalLibvips);\n      delete process.env.SHARP_IGNORE_GLOBAL_LIBVIPS;\n    });","file":"unit/libvips.js","skipped":false,"dir":"test"},{"name":"cachePath returns a valid path ending with _libvips","suites":["libvips binaries","platform agnostic"],"updatePoint":{"line":67,"column":59,"index":2587},"line":67,"code":"    it('cachePath returns a valid path ending with _libvips', function () {\n      const cachePath = libvips.cachePath();\n      assert.strictEqual('string', typeof cachePath);\n      assert.strictEqual('_libvips', cachePath.substr(-8));\n      assert.strictEqual(true, fs.existsSync(cachePath));\n    });","file":"unit/libvips.js","skipped":false,"dir":"test"},{"name":"mkdirSync creates a directory","suites":["libvips binaries","safe directory creation"],"updatePoint":{"line":87,"column":37,"index":3153},"line":87,"code":"    it('mkdirSync creates a directory', function () {\n      const dirPath = 'createdDir';\n      libvips.mkdirSync(dirPath);\n      assert.strictEqual(true, fs.existsSync(dirPath));\n    });","file":"unit/libvips.js","skipped":false,"dir":"test"},{"name":"mkdirSync does not throw error or overwrite an existing dir","suites":["libvips binaries","safe directory creation"],"updatePoint":{"line":92,"column":67,"index":3371},"line":92,"code":"    it('mkdirSync does not throw error or overwrite an existing dir', function () {\n      const dirPath = 'exampleDirA';\n      const nestedDirPath = 'exampleDirA/exampleDirB';\n      assert.strictEqual(true, fs.existsSync(dirPath));\n      libvips.mkdirSync(dirPath);\n      assert.strictEqual(true, fs.existsSync(dirPath));\n      assert.strictEqual(true, fs.existsSync(nestedDirPath));\n    });","file":"unit/libvips.js","skipped":false,"dir":"test"},{"name":"logs an info message","suites":["libvips binaries","logger"],"updatePoint":{"line":108,"column":28,"index":3941},"line":108,"code":"    it('logs an info message', function (done) {\n      console.log = function (msg) {\n        assert.strictEqual(msg, 'sharp: progress');\n        done();\n      };\n      libvips.log('progress');\n    });","file":"unit/libvips.js","skipped":false,"dir":"test"},{"name":"logs an error message","suites":["libvips binaries","logger"],"updatePoint":{"line":115,"column":29,"index":4144},"line":115,"code":"    it('logs an error message', function (done) {\n      console.error = function (msg) {\n        assert.strictEqual(msg, 'sharp: Installation error: problem');\n        done();\n      };\n      libvips.log(new Error('problem'));\n    });","file":"unit/libvips.js","skipped":false,"dir":"test"},{"name":"applies linear levels adjustment w/o alpha ch","suites":["Linear adjustment"],"updatePoint":{"line":11,"column":51,"index":344},"line":11,"code":"  it('applies linear levels adjustment w/o alpha ch', function (done) {\n    sharp(fixtures.inputJpgWithLowContrast).linear(a, b).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      fixtures.assertSimilar(fixtures.expected('low-contrast-linear.jpg'), data, done);\n    });\n  });","file":"unit/linear.js","skipped":false,"dir":"test"},{"name":"applies slope level adjustment w/o alpha ch","suites":["Linear adjustment"],"updatePoint":{"line":17,"column":49,"index":637},"line":17,"code":"  it('applies slope level adjustment w/o alpha ch', function (done) {\n    sharp(fixtures.inputJpgWithLowContrast).linear(a).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      fixtures.assertSimilar(fixtures.expected('low-contrast-slope.jpg'), data, done);\n    });\n  });","file":"unit/linear.js","skipped":false,"dir":"test"},{"name":"applies offset level adjustment w/o alpha ch","suites":["Linear adjustment"],"updatePoint":{"line":23,"column":50,"index":927},"line":23,"code":"  it('applies offset level adjustment w/o alpha ch', function (done) {\n    sharp(fixtures.inputJpgWithLowContrast).linear(null, b).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      fixtures.assertSimilar(fixtures.expected('low-contrast-offset.jpg'), data, done);\n    });\n  });","file":"unit/linear.js","skipped":false,"dir":"test"},{"name":"applies linear levels adjustment w alpha ch","suites":["Linear adjustment"],"updatePoint":{"line":29,"column":49,"index":1223},"line":29,"code":"  it('applies linear levels adjustment w alpha ch', function (done) {\n    sharp(fixtures.inputPngOverlayLayer1).linear(a, b).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      fixtures.assertSimilar(fixtures.expected('alpha-layer-1-fill-linear.png'), data, done);\n    });\n  });","file":"unit/linear.js","skipped":false,"dir":"test"},{"name":"applies slope level adjustment w alpha ch","suites":["Linear adjustment"],"updatePoint":{"line":35,"column":47,"index":1518},"line":35,"code":"  it('applies slope level adjustment w alpha ch', function (done) {\n    sharp(fixtures.inputPngOverlayLayer1).linear(a).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      fixtures.assertSimilar(fixtures.expected('alpha-layer-1-fill-slope.png'), data, done);\n    });\n  });","file":"unit/linear.js","skipped":false,"dir":"test"},{"name":"applies offset level adjustment w alpha ch","suites":["Linear adjustment"],"updatePoint":{"line":41,"column":48,"index":1810},"line":41,"code":"  it('applies offset level adjustment w alpha ch', function (done) {\n    sharp(fixtures.inputPngOverlayLayer1).linear(null, b).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      fixtures.assertSimilar(fixtures.expected('alpha-layer-1-fill-offset.png'), data, done);\n    });\n  });","file":"unit/linear.js","skipped":false,"dir":"test"},{"name":"Invalid linear arguments","suites":["Linear adjustment"],"updatePoint":{"line":47,"column":30,"index":2091},"line":47,"code":"  it('Invalid linear arguments', function () {\n    assert.throws(function () {\n      sharp(fixtures.inputPngOverlayLayer1).linear('foo');\n    });\n    assert.throws(function () {\n      sharp(fixtures.inputPngOverlayLayer1).linear(undefined, {\n        bar: 'baz'\n      });\n    });\n  });","file":"unit/linear.js","skipped":false,"dir":"test"},{"name":"1x1 window","suites":["Median filter"],"updatePoint":{"line":7,"column":16,"index":180},"line":7,"code":"  it('1x1 window', function (done) {\n    sharp(fixtures.inputJpgThRandom).median(1).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual('jpeg', info.format);\n      assert.strictEqual(200, info.width);\n      assert.strictEqual(200, info.height);\n      fixtures.assertSimilar(fixtures.expected('median_1.jpg'), data, done);\n    });\n  });","file":"unit/median.js","skipped":false,"dir":"test"},{"name":"3x3 window","suites":["Median filter"],"updatePoint":{"line":16,"column":16,"index":553},"line":16,"code":"  it('3x3 window', function (done) {\n    sharp(fixtures.inputJpgThRandom).median(3).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual('jpeg', info.format);\n      assert.strictEqual(200, info.width);\n      assert.strictEqual(200, info.height);\n      fixtures.assertSimilar(fixtures.expected('median_3.jpg'), data, done);\n    });\n  });","file":"unit/median.js","skipped":false,"dir":"test"},{"name":"5x5 window","suites":["Median filter"],"updatePoint":{"line":25,"column":16,"index":926},"line":25,"code":"  it('5x5 window', function (done) {\n    sharp(fixtures.inputJpgThRandom).median(5).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual('jpeg', info.format);\n      assert.strictEqual(200, info.width);\n      assert.strictEqual(200, info.height);\n      fixtures.assertSimilar(fixtures.expected('median_5.jpg'), data, done);\n    });\n  });","file":"unit/median.js","skipped":false,"dir":"test"},{"name":"color image","suites":["Median filter"],"updatePoint":{"line":34,"column":17,"index":1300},"line":34,"code":"  it('color image', function (done) {\n    sharp(fixtures.inputJpgRandom).median(5).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual('jpeg', info.format);\n      assert.strictEqual(200, info.width);\n      assert.strictEqual(200, info.height);\n      fixtures.assertSimilar(fixtures.expected('median_color.jpg'), data, done);\n    });\n  });","file":"unit/median.js","skipped":false,"dir":"test"},{"name":"no windows size","suites":["Median filter"],"updatePoint":{"line":43,"column":21,"index":1680},"line":43,"code":"  it('no windows size', function (done) {\n    sharp(fixtures.inputJpgThRandom).median().toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual('jpeg', info.format);\n      assert.strictEqual(200, info.width);\n      assert.strictEqual(200, info.height);\n      fixtures.assertSimilar(fixtures.expected('median_3.jpg'), data, done);\n    });\n  });","file":"unit/median.js","skipped":false,"dir":"test"},{"name":"invalid radius","suites":["Median filter"],"updatePoint":{"line":52,"column":20,"index":2056},"line":52,"code":"  it('invalid radius', function () {\n    assert.throws(function () {\n      sharp(fixtures.inputJpg).median(0.1);\n    });\n  });","file":"unit/median.js","skipped":false,"dir":"test"},{"name":"JPEG","suites":["Image metadata"],"updatePoint":{"line":10,"column":10,"index":272},"line":10,"code":"  it('JPEG', function (done) {\n    sharp(fixtures.inputJpg).metadata(function (err, metadata) {\n      if (err) throw err;\n      assert.strictEqual('jpeg', metadata.format);\n      assert.strictEqual('undefined', typeof metadata.size);\n      assert.strictEqual(2725, metadata.width);\n      assert.strictEqual(2225, metadata.height);\n      assert.strictEqual('srgb', metadata.space);\n      assert.strictEqual(3, metadata.channels);\n      assert.strictEqual('uchar', metadata.depth);\n      assert.strictEqual(true, ['undefined', 'number'].includes(typeof metadata.density));\n      assert.strictEqual('4:2:0', metadata.chromaSubsampling);\n      assert.strictEqual(false, metadata.isProgressive);\n      assert.strictEqual(false, metadata.hasProfile);\n      assert.strictEqual(false, metadata.hasAlpha);\n      assert.strictEqual('undefined', typeof metadata.orientation);\n      assert.strictEqual('undefined', typeof metadata.exif);\n      assert.strictEqual('undefined', typeof metadata.icc);\n      done();\n    });\n  });","file":"unit/metadata.js","skipped":false,"dir":"test"},{"name":"JPEG with EXIF/ICC","suites":["Image metadata"],"updatePoint":{"line":31,"column":24,"index":1300},"line":31,"code":"  it('JPEG with EXIF/ICC', function (done) {\n    sharp(fixtures.inputJpgWithExif).metadata(function (err, metadata) {\n      if (err) throw err;\n      assert.strictEqual('jpeg', metadata.format);\n      assert.strictEqual('undefined', typeof metadata.size);\n      assert.strictEqual(450, metadata.width);\n      assert.strictEqual(600, metadata.height);\n      assert.strictEqual('srgb', metadata.space);\n      assert.strictEqual(3, metadata.channels);\n      assert.strictEqual('uchar', metadata.depth);\n      assert.strictEqual(72, metadata.density);\n      assert.strictEqual('4:2:0', metadata.chromaSubsampling);\n      assert.strictEqual(false, metadata.isProgressive);\n      assert.strictEqual(true, metadata.hasProfile);\n      assert.strictEqual(false, metadata.hasAlpha);\n      assert.strictEqual(8, metadata.orientation);\n      // EXIF\n      assert.strictEqual('object', typeof metadata.exif);\n      assert.strictEqual(true, metadata.exif instanceof Buffer);\n      const exif = exifReader(metadata.exif);\n      assert.strictEqual('object', typeof exif);\n      assert.strictEqual('object', typeof exif.image);\n      assert.strictEqual('number', typeof exif.image.XResolution);\n      // ICC\n      assert.strictEqual('object', typeof metadata.icc);\n      assert.strictEqual(true, metadata.icc instanceof Buffer);\n      const profile = icc.parse(metadata.icc);\n      assert.strictEqual('object', typeof profile);\n      assert.strictEqual('Generic RGB Profile', profile.description);\n      done();\n    });\n  });","file":"unit/metadata.js","skipped":false,"dir":"test"},{"name":"JPEG with IPTC/XMP","suites":["Image metadata"],"updatePoint":{"line":63,"column":24,"index":2809},"line":63,"code":"  it('JPEG with IPTC/XMP', function (done) {\n    sharp(fixtures.inputJpgWithIptcAndXmp).metadata(function (err, metadata) {\n      if (err) throw err;\n      // IPTC\n      assert.strictEqual('object', typeof metadata.iptc);\n      assert.strictEqual(true, metadata.iptc instanceof Buffer);\n      assert.strictEqual(18250, metadata.iptc.byteLength);\n      assert.strictEqual(metadata.iptc.indexOf(Buffer.from('Photoshop')), 0);\n      // XMP\n      assert.strictEqual('object', typeof metadata.xmp);\n      assert.strictEqual(true, metadata.xmp instanceof Buffer);\n      assert.strictEqual(12466, metadata.xmp.byteLength);\n      assert.strictEqual(metadata.xmp.indexOf(Buffer.from('<?xpacket begin=\"')), 0);\n      done();\n    });\n  });","file":"unit/metadata.js","skipped":false,"dir":"test"},{"name":"TIFF","suites":["Image metadata"],"updatePoint":{"line":79,"column":10,"index":3524},"line":79,"code":"  it('TIFF', function (done) {\n    sharp(fixtures.inputTiff).metadata(function (err, metadata) {\n      if (err) throw err;\n      assert.strictEqual('tiff', metadata.format);\n      assert.strictEqual('undefined', typeof metadata.size);\n      assert.strictEqual(2464, metadata.width);\n      assert.strictEqual(3248, metadata.height);\n      assert.strictEqual('b-w', metadata.space);\n      assert.strictEqual(1, metadata.channels);\n      assert.strictEqual('uchar', metadata.depth);\n      assert.strictEqual(300, metadata.density);\n      assert.strictEqual('undefined', typeof metadata.chromaSubsampling);\n      assert.strictEqual(false, metadata.isProgressive);\n      assert.strictEqual(false, metadata.hasProfile);\n      assert.strictEqual(false, metadata.hasAlpha);\n      assert.strictEqual(1, metadata.orientation);\n      assert.strictEqual('undefined', typeof metadata.exif);\n      assert.strictEqual('undefined', typeof metadata.icc);\n      done();\n    });\n  });","file":"unit/metadata.js","skipped":false,"dir":"test"},{"name":"Multipage TIFF","suites":["Image metadata"],"updatePoint":{"line":100,"column":20,"index":4500},"line":100,"code":"  it('Multipage TIFF', function (done) {\n    sharp(fixtures.inputTiffMultipage).metadata(function (err, metadata) {\n      if (err) throw err;\n      assert.strictEqual('tiff', metadata.format);\n      assert.strictEqual('undefined', typeof metadata.size);\n      assert.strictEqual(2464, metadata.width);\n      assert.strictEqual(3248, metadata.height);\n      assert.strictEqual('b-w', metadata.space);\n      assert.strictEqual(1, metadata.channels);\n      assert.strictEqual('uchar', metadata.depth);\n      assert.strictEqual(300, metadata.density);\n      assert.strictEqual('undefined', typeof metadata.chromaSubsampling);\n      assert.strictEqual(false, metadata.isProgressive);\n      assert.strictEqual(2, metadata.pages);\n      assert.strictEqual(false, metadata.hasProfile);\n      assert.strictEqual(false, metadata.hasAlpha);\n      assert.strictEqual(1, metadata.orientation);\n      assert.strictEqual('undefined', typeof metadata.exif);\n      assert.strictEqual('undefined', typeof metadata.icc);\n      done();\n    });\n  });","file":"unit/metadata.js","skipped":false,"dir":"test"},{"name":"PNG","suites":["Image metadata"],"updatePoint":{"line":122,"column":9,"index":5519},"line":122,"code":"  it('PNG', function (done) {\n    sharp(fixtures.inputPng).metadata(function (err, metadata) {\n      if (err) throw err;\n      assert.strictEqual('png', metadata.format);\n      assert.strictEqual('undefined', typeof metadata.size);\n      assert.strictEqual(2809, metadata.width);\n      assert.strictEqual(2074, metadata.height);\n      assert.strictEqual('b-w', metadata.space);\n      assert.strictEqual(1, metadata.channels);\n      assert.strictEqual('uchar', metadata.depth);\n      assert.strictEqual(300, metadata.density);\n      assert.strictEqual('undefined', typeof metadata.chromaSubsampling);\n      assert.strictEqual(false, metadata.isProgressive);\n      assert.strictEqual(false, metadata.hasProfile);\n      assert.strictEqual(false, metadata.hasAlpha);\n      assert.strictEqual('undefined', typeof metadata.orientation);\n      assert.strictEqual('undefined', typeof metadata.exif);\n      assert.strictEqual('undefined', typeof metadata.icc);\n      done();\n    });\n  });","file":"unit/metadata.js","skipped":false,"dir":"test"},{"name":"Transparent PNG","suites":["Image metadata"],"updatePoint":{"line":143,"column":21,"index":6511},"line":143,"code":"  it('Transparent PNG', function (done) {\n    sharp(fixtures.inputPngWithTransparency).metadata(function (err, metadata) {\n      if (err) throw err;\n      assert.strictEqual('png', metadata.format);\n      assert.strictEqual('undefined', typeof metadata.size);\n      assert.strictEqual(2048, metadata.width);\n      assert.strictEqual(1536, metadata.height);\n      assert.strictEqual('srgb', metadata.space);\n      assert.strictEqual(4, metadata.channels);\n      assert.strictEqual('uchar', metadata.depth);\n      assert.strictEqual(72, metadata.density);\n      assert.strictEqual('undefined', typeof metadata.chromaSubsampling);\n      assert.strictEqual(false, metadata.isProgressive);\n      assert.strictEqual(false, metadata.hasProfile);\n      assert.strictEqual(true, metadata.hasAlpha);\n      assert.strictEqual('undefined', typeof metadata.orientation);\n      assert.strictEqual('undefined', typeof metadata.exif);\n      assert.strictEqual('undefined', typeof metadata.icc);\n      done();\n    });\n  });","file":"unit/metadata.js","skipped":false,"dir":"test"},{"name":"WebP","suites":["Image metadata"],"updatePoint":{"line":164,"column":10,"index":7507},"line":164,"code":"  it('WebP', function (done) {\n    sharp(fixtures.inputWebP).metadata(function (err, metadata) {\n      if (err) throw err;\n      assert.strictEqual('webp', metadata.format);\n      assert.strictEqual('undefined', typeof metadata.size);\n      assert.strictEqual(1024, metadata.width);\n      assert.strictEqual(772, metadata.height);\n      assert.strictEqual('srgb', metadata.space);\n      assert.strictEqual(3, metadata.channels);\n      assert.strictEqual('uchar', metadata.depth);\n      assert.strictEqual('undefined', typeof metadata.density);\n      assert.strictEqual('undefined', typeof metadata.chromaSubsampling);\n      assert.strictEqual(false, metadata.isProgressive);\n      assert.strictEqual(false, metadata.hasProfile);\n      assert.strictEqual(false, metadata.hasAlpha);\n      assert.strictEqual('undefined', typeof metadata.orientation);\n      assert.strictEqual('undefined', typeof metadata.exif);\n      assert.strictEqual('undefined', typeof metadata.icc);\n      done();\n    });\n  });","file":"unit/metadata.js","skipped":false,"dir":"test"},{"name":"Animated WebP","suites":["Image metadata"],"updatePoint":{"line":185,"column":19,"index":8514},"line":185,"code":"  it('Animated WebP', () => sharp(fixtures.inputWebPAnimated).metadata().then(({\n    format,\n    width,\n    height,\n    space,\n    channels,\n    depth,\n    isProgressive,\n    pages,\n    pageHeight,\n    loop,\n    delay,\n    hasProfile,\n    hasAlpha\n  }) => {\n    assert.strictEqual(format, 'webp');\n    assert.strictEqual(width, 80);\n    assert.strictEqual(height, 80);\n    assert.strictEqual(space, 'srgb');\n    assert.strictEqual(channels, 4);\n    assert.strictEqual(depth, 'uchar');\n    assert.strictEqual(isProgressive, false);\n    assert.strictEqual(pages, 9);\n    assert.strictEqual(pageHeight, 80);\n    assert.strictEqual(loop, 0);\n    assert.deepStrictEqual(delay, [120, 120, 90, 120, 120, 90, 120, 90, 30]);\n    assert.strictEqual(hasProfile, false);\n    assert.strictEqual(hasAlpha, true);\n  }));","file":"unit/metadata.js","skipped":false,"dir":"test"},{"name":"Animated WebP with limited looping","suites":["Image metadata"],"updatePoint":{"line":214,"column":40,"index":9341},"line":214,"code":"  it('Animated WebP with limited looping', () => sharp(fixtures.inputWebPAnimatedLoop3).metadata().then(({\n    format,\n    width,\n    height,\n    space,\n    channels,\n    depth,\n    isProgressive,\n    pages,\n    pageHeight,\n    loop,\n    delay,\n    hasProfile,\n    hasAlpha\n  }) => {\n    assert.strictEqual(format, 'webp');\n    assert.strictEqual(width, 370);\n    assert.strictEqual(height, 285);\n    assert.strictEqual(space, 'srgb');\n    assert.strictEqual(channels, 4);\n    assert.strictEqual(depth, 'uchar');\n    assert.strictEqual(isProgressive, false);\n    assert.strictEqual(pages, 10);\n    assert.strictEqual(pageHeight, 285);\n    assert.strictEqual(loop, 3);\n    assert.deepStrictEqual(delay, [...Array(9).fill(3000), 15000]);\n    assert.strictEqual(hasProfile, false);\n    assert.strictEqual(hasAlpha, true);\n  }));","file":"unit/metadata.js","skipped":false,"dir":"test"},{"name":"GIF","suites":["Image metadata"],"updatePoint":{"line":243,"column":9,"index":10136},"line":243,"code":"  it('GIF', function (done) {\n    sharp(fixtures.inputGif).metadata(function (err, metadata) {\n      if (err) throw err;\n      assert.strictEqual('gif', metadata.format);\n      assert.strictEqual('undefined', typeof metadata.size);\n      assert.strictEqual(800, metadata.width);\n      assert.strictEqual(533, metadata.height);\n      assert.strictEqual(3, metadata.channels);\n      assert.strictEqual('uchar', metadata.depth);\n      assert.strictEqual('undefined', typeof metadata.density);\n      assert.strictEqual('undefined', typeof metadata.chromaSubsampling);\n      assert.strictEqual(false, metadata.isProgressive);\n      assert.strictEqual(false, metadata.hasProfile);\n      assert.strictEqual('undefined', typeof metadata.orientation);\n      assert.strictEqual('undefined', typeof metadata.exif);\n      assert.strictEqual('undefined', typeof metadata.icc);\n      assert.deepStrictEqual(metadata.background, {\n        r: 138,\n        g: 148,\n        b: 102\n      });\n      done();\n    });\n  });","file":"unit/metadata.js","skipped":false,"dir":"test"},{"name":"GIF grey+alpha","suites":["Image metadata"],"updatePoint":{"line":267,"column":20,"index":11148},"line":267,"code":"  it('GIF grey+alpha', function (done) {\n    sharp(fixtures.inputGifGreyPlusAlpha).metadata(function (err, metadata) {\n      if (err) throw err;\n      assert.strictEqual('gif', metadata.format);\n      assert.strictEqual('undefined', typeof metadata.size);\n      assert.strictEqual(2, metadata.width);\n      assert.strictEqual(1, metadata.height);\n      assert.strictEqual(4, metadata.channels);\n      assert.strictEqual('uchar', metadata.depth);\n      assert.strictEqual('undefined', typeof metadata.density);\n      assert.strictEqual('undefined', typeof metadata.chromaSubsampling);\n      assert.strictEqual(false, metadata.isProgressive);\n      assert.strictEqual(false, metadata.hasProfile);\n      assert.strictEqual('undefined', typeof metadata.orientation);\n      assert.strictEqual('undefined', typeof metadata.exif);\n      assert.strictEqual('undefined', typeof metadata.icc);\n      done();\n    });\n  });","file":"unit/metadata.js","skipped":false,"dir":"test"},{"name":"Animated GIF","suites":["Image metadata"],"updatePoint":{"line":286,"column":18,"index":12058},"line":286,"code":"  it('Animated GIF', () => sharp(fixtures.inputGifAnimated).metadata().then(({\n    format,\n    width,\n    height,\n    space,\n    channels,\n    depth,\n    isProgressive,\n    pages,\n    pageHeight,\n    loop,\n    delay,\n    background,\n    hasProfile,\n    hasAlpha\n  }) => {\n    assert.strictEqual(format, 'gif');\n    assert.strictEqual(width, 80);\n    assert.strictEqual(height, 80);\n    assert.strictEqual(space, 'srgb');\n    assert.strictEqual(channels, 4);\n    assert.strictEqual(depth, 'uchar');\n    assert.strictEqual(isProgressive, false);\n    assert.strictEqual(pages, 30);\n    assert.strictEqual(pageHeight, 80);\n    assert.strictEqual(loop, 0);\n    assert.deepStrictEqual(delay, Array(30).fill(30));\n    assert.deepStrictEqual(background, {\n      r: 0,\n      g: 0,\n      b: 0\n    });\n    assert.strictEqual(hasProfile, false);\n    assert.strictEqual(hasAlpha, true);\n  }));","file":"unit/metadata.js","skipped":false,"dir":"test"},{"name":"Animated GIF with limited looping","suites":["Image metadata"],"updatePoint":{"line":321,"column":39,"index":12960},"line":321,"code":"  it('Animated GIF with limited looping', () => sharp(fixtures.inputGifAnimatedLoop3).metadata().then(({\n    format,\n    width,\n    height,\n    space,\n    channels,\n    depth,\n    isProgressive,\n    pages,\n    pageHeight,\n    loop,\n    delay,\n    hasProfile,\n    hasAlpha\n  }) => {\n    assert.strictEqual(format, 'gif');\n    assert.strictEqual(width, 370);\n    assert.strictEqual(height, 285);\n    assert.strictEqual(space, 'srgb');\n    assert.strictEqual(channels, 4);\n    assert.strictEqual(depth, 'uchar');\n    assert.strictEqual(isProgressive, false);\n    assert.strictEqual(pages, 10);\n    assert.strictEqual(pageHeight, 285);\n    assert.strictEqual(loop, 2);\n    assert.deepStrictEqual(delay, [...Array(9).fill(3000), 15000]);\n    assert.strictEqual(hasProfile, false);\n    assert.strictEqual(hasAlpha, true);\n  }));","file":"unit/metadata.js","skipped":false,"dir":"test"},{"name":"vips","suites":["Image metadata"],"updatePoint":{"line":350,"column":10,"index":13754},"line":350,"code":"  it('vips', () => sharp(fixtures.inputV).metadata().then(metadata => {\n    assert.strictEqual('vips', metadata.format);\n    assert.strictEqual('undefined', typeof metadata.size);\n    assert.strictEqual(70, metadata.width);\n    assert.strictEqual(60, metadata.height);\n    assert.strictEqual(3, metadata.channels);\n    assert.strictEqual('uchar', metadata.depth);\n    assert.strictEqual(72, metadata.density);\n    assert.strictEqual('undefined', typeof metadata.chromaSubsampling);\n    assert.strictEqual(false, metadata.isProgressive);\n    assert.strictEqual(false, metadata.hasProfile);\n    assert.strictEqual(false, metadata.hasAlpha);\n    assert.strictEqual('undefined', typeof metadata.orientation);\n    assert.strictEqual('undefined', typeof metadata.exif);\n    assert.strictEqual('undefined', typeof metadata.icc);\n  }));","file":"unit/metadata.js","skipped":false,"dir":"test"},{"name":"File in, Promise out","suites":["Image metadata"],"updatePoint":{"line":366,"column":26,"index":14599},"line":366,"code":"  it('File in, Promise out', function (done) {\n    sharp(fixtures.inputJpg).metadata().then(function (metadata) {\n      assert.strictEqual('jpeg', metadata.format);\n      assert.strictEqual('undefined', typeof metadata.size);\n      assert.strictEqual(2725, metadata.width);\n      assert.strictEqual(2225, metadata.height);\n      assert.strictEqual('srgb', metadata.space);\n      assert.strictEqual(3, metadata.channels);\n      assert.strictEqual('uchar', metadata.depth);\n      assert.strictEqual(true, ['undefined', 'number'].includes(typeof metadata.density));\n      assert.strictEqual('4:2:0', metadata.chromaSubsampling);\n      assert.strictEqual(false, metadata.isProgressive);\n      assert.strictEqual(false, metadata.hasProfile);\n      assert.strictEqual(false, metadata.hasAlpha);\n      assert.strictEqual('undefined', typeof metadata.orientation);\n      assert.strictEqual('undefined', typeof metadata.exif);\n      assert.strictEqual('undefined', typeof metadata.icc);\n      done();\n    });\n  });","file":"unit/metadata.js","skipped":false,"dir":"test"},{"name":"Non-existent file in, Promise out","suites":["Image metadata"],"updatePoint":{"line":386,"column":39,"index":15618},"line":386,"code":"  it('Non-existent file in, Promise out', function (done) {\n    sharp('fail').metadata().then(function (metadata) {\n      throw new Error('Non-existent file');\n    }, function (err) {\n      assert.ok(!!err);\n      done();\n    });\n  });","file":"unit/metadata.js","skipped":false,"dir":"test"},{"name":"Stream in, Promise out","suites":["Image metadata"],"updatePoint":{"line":394,"column":28,"index":15843},"line":394,"code":"  it('Stream in, Promise out', function (done) {\n    const readable = fs.createReadStream(fixtures.inputJpg);\n    const pipeline = sharp();\n    pipeline.metadata().then(function (metadata) {\n      assert.strictEqual('jpeg', metadata.format);\n      assert.strictEqual(829183, metadata.size);\n      assert.strictEqual(2725, metadata.width);\n      assert.strictEqual(2225, metadata.height);\n      assert.strictEqual('srgb', metadata.space);\n      assert.strictEqual(3, metadata.channels);\n      assert.strictEqual('uchar', metadata.depth);\n      assert.strictEqual(true, ['undefined', 'number'].includes(typeof metadata.density));\n      assert.strictEqual('4:2:0', metadata.chromaSubsampling);\n      assert.strictEqual(false, metadata.isProgressive);\n      assert.strictEqual(false, metadata.hasProfile);\n      assert.strictEqual(false, metadata.hasAlpha);\n      assert.strictEqual('undefined', typeof metadata.orientation);\n      assert.strictEqual('undefined', typeof metadata.exif);\n      assert.strictEqual('undefined', typeof metadata.icc);\n      done();\n    }).catch(done);\n    readable.pipe(pipeline);\n  });","file":"unit/metadata.js","skipped":false,"dir":"test"},{"name":"Stream in, rejected Promise out","suites":["Image metadata"],"updatePoint":{"line":417,"column":37,"index":16964},"line":417,"code":"  it('Stream in, rejected Promise out', () => {\n    const pipeline = sharp();\n    fs.createReadStream(__filename).pipe(pipeline);\n    return pipeline.metadata().then(() => Promise.reject(new Error('Expected metadata to reject')), err => assert.strictEqual(err.message, 'Input buffer contains unsupported image format'));\n  });","file":"unit/metadata.js","skipped":false,"dir":"test"},{"name":"Stream","suites":["Image metadata"],"updatePoint":{"line":422,"column":12,"index":17266},"line":422,"code":"  it('Stream', function (done) {\n    const readable = fs.createReadStream(fixtures.inputJpg);\n    const pipeline = sharp().metadata(function (err, metadata) {\n      if (err) throw err;\n      assert.strictEqual('jpeg', metadata.format);\n      assert.strictEqual(829183, metadata.size);\n      assert.strictEqual(2725, metadata.width);\n      assert.strictEqual(2225, metadata.height);\n      assert.strictEqual('srgb', metadata.space);\n      assert.strictEqual(3, metadata.channels);\n      assert.strictEqual('uchar', metadata.depth);\n      assert.strictEqual(true, ['undefined', 'number'].includes(typeof metadata.density));\n      assert.strictEqual('4:2:0', metadata.chromaSubsampling);\n      assert.strictEqual(false, metadata.isProgressive);\n      assert.strictEqual(false, metadata.hasProfile);\n      assert.strictEqual(false, metadata.hasAlpha);\n      assert.strictEqual('undefined', typeof metadata.orientation);\n      assert.strictEqual('undefined', typeof metadata.exif);\n      assert.strictEqual('undefined', typeof metadata.icc);\n      done();\n    });\n    readable.pipe(pipeline);\n  });","file":"unit/metadata.js","skipped":false,"dir":"test"},{"name":"Resize to half width using metadata","suites":["Image metadata"],"updatePoint":{"line":445,"column":41,"index":18389},"line":445,"code":"  it('Resize to half width using metadata', function (done) {\n    const image = sharp(fixtures.inputJpg);\n    image.metadata(function (err, metadata) {\n      if (err) throw err;\n      assert.strictEqual('jpeg', metadata.format);\n      assert.strictEqual('undefined', typeof metadata.size);\n      assert.strictEqual(2725, metadata.width);\n      assert.strictEqual(2225, metadata.height);\n      assert.strictEqual('srgb', metadata.space);\n      assert.strictEqual(3, metadata.channels);\n      assert.strictEqual('uchar', metadata.depth);\n      assert.strictEqual(true, ['undefined', 'number'].includes(typeof metadata.density));\n      assert.strictEqual('4:2:0', metadata.chromaSubsampling);\n      assert.strictEqual(false, metadata.isProgressive);\n      assert.strictEqual(false, metadata.hasProfile);\n      assert.strictEqual(false, metadata.hasAlpha);\n      assert.strictEqual('undefined', typeof metadata.orientation);\n      assert.strictEqual('undefined', typeof metadata.exif);\n      assert.strictEqual('undefined', typeof metadata.icc);\n      image.resize(Math.floor(metadata.width / 2)).toBuffer(function (err, data, info) {\n        if (err) throw err;\n        assert.strictEqual(true, data.length > 0);\n        assert.strictEqual(1362, info.width);\n        assert.strictEqual(1112, info.height);\n        done();\n      });\n    });\n  });","file":"unit/metadata.js","skipped":false,"dir":"test"},{"name":"Keep EXIF metadata and add sRGB profile after a resize","suites":["Image metadata"],"updatePoint":{"line":473,"column":60,"index":19751},"line":473,"code":"  it('Keep EXIF metadata and add sRGB profile after a resize', function (done) {\n    sharp(fixtures.inputJpgWithExif).resize(320, 240).withMetadata().toBuffer(function (err, buffer) {\n      if (err) throw err;\n      sharp(buffer).metadata(function (err, metadata) {\n        if (err) throw err;\n        assert.strictEqual(true, metadata.hasProfile);\n        assert.strictEqual(8, metadata.orientation);\n        assert.strictEqual('object', typeof metadata.exif);\n        assert.strictEqual(true, metadata.exif instanceof Buffer);\n        // EXIF\n        const exif = exifReader(metadata.exif);\n        assert.strictEqual('object', typeof exif);\n        assert.strictEqual('object', typeof exif.image);\n        assert.strictEqual('number', typeof exif.image.XResolution);\n        // ICC\n        assert.strictEqual('object', typeof metadata.icc);\n        assert.strictEqual(true, metadata.icc instanceof Buffer);\n        const profile = icc.parse(metadata.icc);\n        assert.strictEqual('object', typeof profile);\n        assert.strictEqual('RGB', profile.colorSpace);\n        assert.strictEqual('Perceptual', profile.intent);\n        assert.strictEqual('Monitor', profile.deviceClass);\n        done();\n      });\n    });\n  });","file":"unit/metadata.js","skipped":false,"dir":"test"},{"name":"Apply CMYK output ICC profile","suites":["Image metadata"],"updatePoint":{"line":499,"column":35,"index":20952},"line":499,"code":"  it('Apply CMYK output ICC profile', function (done) {\n    const output = fixtures.path('output.icc-cmyk.jpg');\n    sharp(fixtures.inputJpg).resize(64).withMetadata({\n      icc: 'cmyk'\n    }).toFile(output, function (err, info) {\n      if (err) throw err;\n      sharp(output).metadata(function (err, metadata) {\n        if (err) throw err;\n        assert.strictEqual(true, metadata.hasProfile);\n        assert.strictEqual('cmyk', metadata.space);\n        assert.strictEqual(4, metadata.channels);\n        // ICC\n        assert.strictEqual('object', typeof metadata.icc);\n        assert.strictEqual(true, metadata.icc instanceof Buffer);\n        const profile = icc.parse(metadata.icc);\n        assert.strictEqual('object', typeof profile);\n        assert.strictEqual('CMYK', profile.colorSpace);\n        assert.strictEqual('Relative', profile.intent);\n        assert.strictEqual('Printer', profile.deviceClass);\n      });\n      fixtures.assertSimilar(output, fixtures.path('expected/icc-cmyk.jpg'), {\n        threshold: 0\n      }, done);\n    });\n  });","file":"unit/metadata.js","skipped":false,"dir":"test"},{"name":"Apply custom output ICC profile","suites":["Image metadata"],"updatePoint":{"line":524,"column":37,"index":22007},"line":524,"code":"  it('Apply custom output ICC profile', function (done) {\n    const output = fixtures.path('output.hilutite.jpg');\n    sharp(fixtures.inputJpg).resize(64).withMetadata({\n      icc: fixtures.path('hilutite.icm')\n    }).toFile(output, function (err, info) {\n      if (err) throw err;\n      fixtures.assertMaxColourDistance(output, fixtures.path('expected/hilutite.jpg'), 9);\n      done();\n    });\n  });","file":"unit/metadata.js","skipped":false,"dir":"test"},{"name":"Include metadata in output, enabled via empty object","suites":["Image metadata"],"updatePoint":{"line":534,"column":58,"index":22429},"line":534,"code":"  it('Include metadata in output, enabled via empty object', () => sharp(fixtures.inputJpgWithExif).withMetadata({}).toBuffer().then(buffer => sharp(buffer).metadata().then(metadata => {\n    assert.strictEqual(true, metadata.hasProfile);\n    assert.strictEqual(8, metadata.orientation);\n    assert.strictEqual('object', typeof metadata.exif);\n    assert.strictEqual(true, metadata.exif instanceof Buffer);\n    // EXIF\n    const exif = exifReader(metadata.exif);\n    assert.strictEqual('object', typeof exif);\n    assert.strictEqual('object', typeof exif.image);\n    assert.strictEqual('number', typeof exif.image.XResolution);\n    // ICC\n    assert.strictEqual('object', typeof metadata.icc);\n    assert.strictEqual(true, metadata.icc instanceof Buffer);\n    const profile = icc.parse(metadata.icc);\n    assert.strictEqual('object', typeof profile);\n    assert.strictEqual('RGB', profile.colorSpace);\n    assert.strictEqual('Perceptual', profile.intent);\n    assert.strictEqual('Monitor', profile.deviceClass);\n  })));","file":"unit/metadata.js","skipped":false,"dir":"test"},{"name":"Remove EXIF metadata after a resize","suites":["Image metadata"],"updatePoint":{"line":553,"column":41,"index":23431},"line":553,"code":"  it('Remove EXIF metadata after a resize', function (done) {\n    sharp(fixtures.inputJpgWithExif).resize(320, 240).withMetadata(false).toBuffer(function (err, buffer) {\n      if (err) throw err;\n      sharp(buffer).metadata(function (err, metadata) {\n        if (err) throw err;\n        assert.strictEqual(false, metadata.hasProfile);\n        assert.strictEqual('undefined', typeof metadata.orientation);\n        assert.strictEqual('undefined', typeof metadata.exif);\n        assert.strictEqual('undefined', typeof metadata.icc);\n        done();\n      });\n    });\n  });","file":"unit/metadata.js","skipped":false,"dir":"test"},{"name":"Remove metadata from PNG output","suites":["Image metadata"],"updatePoint":{"line":566,"column":37,"index":23998},"line":566,"code":"  it('Remove metadata from PNG output', function (done) {\n    sharp(fixtures.inputJpgWithExif).png().toBuffer(function (err, buffer) {\n      if (err) throw err;\n      sharp(buffer).metadata(function (err, metadata) {\n        if (err) throw err;\n        assert.strictEqual(false, metadata.hasProfile);\n        assert.strictEqual('undefined', typeof metadata.orientation);\n        assert.strictEqual('undefined', typeof metadata.exif);\n        assert.strictEqual('undefined', typeof metadata.icc);\n        done();\n      });\n    });\n  });","file":"unit/metadata.js","skipped":false,"dir":"test"},{"name":"Add EXIF metadata to JPEG","suites":["Image metadata"],"updatePoint":{"line":579,"column":31,"index":24528},"line":579,"code":"  it('Add EXIF metadata to JPEG', async () => {\n    const data = await sharp({\n      create: {\n        width: 8,\n        height: 8,\n        channels: 3,\n        background: 'red'\n      }\n    }).jpeg().withMetadata({\n      exif: {\n        IFD0: {\n          Software: 'sharp'\n        },\n        IFD2: {\n          ExposureTime: '0.2'\n        }\n      }\n    }).toBuffer();\n    const {\n      exif\n    } = await sharp(data).metadata();\n    const parsedExif = exifReader(exif);\n    assert.strictEqual(parsedExif.image.Software, 'sharp');\n    assert.strictEqual(parsedExif.exif.ExposureTime, 0.2);\n  });","file":"unit/metadata.js","skipped":false,"dir":"test"},{"name":"Set density of JPEG","suites":["Image metadata"],"updatePoint":{"line":604,"column":25,"index":25117},"line":604,"code":"  it('Set density of JPEG', async () => {\n    const data = await sharp({\n      create: {\n        width: 8,\n        height: 8,\n        channels: 3,\n        background: 'red'\n      }\n    }).withMetadata({\n      density: 300\n    }).jpeg().toBuffer();\n    const {\n      density\n    } = await sharp(data).metadata();\n    assert.strictEqual(density, 300);\n  });","file":"unit/metadata.js","skipped":false,"dir":"test"},{"name":"Set density of PNG","suites":["Image metadata"],"updatePoint":{"line":620,"column":24,"index":25472},"line":620,"code":"  it('Set density of PNG', async () => {\n    const data = await sharp({\n      create: {\n        width: 8,\n        height: 8,\n        channels: 3,\n        background: 'red'\n      }\n    }).withMetadata({\n      density: 96\n    }).png().toBuffer();\n    const {\n      density\n    } = await sharp(data).metadata();\n    assert.strictEqual(density, 96);\n  });","file":"unit/metadata.js","skipped":false,"dir":"test"},{"name":"chromaSubsampling 4:4:4:4 CMYK JPEG","suites":["Image metadata"],"updatePoint":{"line":636,"column":41,"index":25841},"line":636,"code":"  it('chromaSubsampling 4:4:4:4 CMYK JPEG', function () {\n    return sharp(fixtures.inputJpgWithCmykProfile).metadata().then(function (metadata) {\n      assert.strictEqual('4:4:4:4', metadata.chromaSubsampling);\n    });\n  });","file":"unit/metadata.js","skipped":false,"dir":"test"},{"name":"chromaSubsampling 4:4:4 RGB JPEG","suites":["Image metadata"],"updatePoint":{"line":641,"column":38,"index":26064},"line":641,"code":"  it('chromaSubsampling 4:4:4 RGB JPEG', function () {\n    return sharp(fixtures.inputJpg).resize(10, 10).jpeg({\n      chromaSubsampling: '4:4:4'\n    }).toBuffer().then(function (data) {\n      return sharp(data).metadata().then(function (metadata) {\n        assert.strictEqual('4:4:4', metadata.chromaSubsampling);\n      });\n    });\n  });","file":"unit/metadata.js","skipped":false,"dir":"test"},{"name":"isProgressive JPEG","suites":["Image metadata"],"updatePoint":{"line":650,"column":24,"index":26389},"line":650,"code":"  it('isProgressive JPEG', function () {\n    return sharp(fixtures.inputJpg).resize(10, 10).jpeg({\n      progressive: true\n    }).toBuffer().then(function (data) {\n      return sharp(data).metadata().then(function (metadata) {\n        assert.strictEqual(true, metadata.isProgressive);\n      });\n    });\n  });","file":"unit/metadata.js","skipped":false,"dir":"test"},{"name":"isProgressive PNG","suites":["Image metadata"],"updatePoint":{"line":659,"column":23,"index":26697},"line":659,"code":"  it('isProgressive PNG', function () {\n    return sharp(fixtures.inputJpg).resize(10, 10).png({\n      progressive: true\n    }).toBuffer().then(function (data) {\n      return sharp(data).metadata().then(function (metadata) {\n        assert.strictEqual(true, metadata.isProgressive);\n      });\n    });\n  });","file":"unit/metadata.js","skipped":false,"dir":"test"},{"name":"16-bit TIFF with TIFFTAG_PHOTOSHOP metadata","suites":["Image metadata"],"updatePoint":{"line":668,"column":49,"index":27030},"line":668,"code":"  it('16-bit TIFF with TIFFTAG_PHOTOSHOP metadata', () => sharp(fixtures.inputTifftagPhotoshop).metadata().then(metadata => {\n    assert.strictEqual(metadata.format, 'tiff');\n    assert.strictEqual(metadata.width, 317);\n    assert.strictEqual(metadata.height, 211);\n    assert.strictEqual(metadata.space, 'rgb16');\n    assert.strictEqual(metadata.channels, 3);\n    assert.strictEqual(typeof metadata.tifftagPhotoshop, 'object');\n    assert.strictEqual(metadata.tifftagPhotoshop instanceof Buffer, true);\n    assert.strictEqual(metadata.tifftagPhotoshop.length, 6634);\n  }));","file":"unit/metadata.js","skipped":false,"dir":"test"},{"name":"AVIF","suites":["Image metadata"],"updatePoint":{"line":678,"column":10,"index":27566},"line":678,"code":"  it('AVIF', async () => {\n    const metadata = await sharp(fixtures.inputAvif).metadata();\n    assert.deepStrictEqual(metadata, {\n      format: 'heif',\n      width: 2048,\n      height: 858,\n      space: 'srgb',\n      channels: 3,\n      depth: 'uchar',\n      isProgressive: false,\n      pages: 1,\n      pageHeight: 858,\n      pagePrimary: 0,\n      compression: 'av1',\n      hasProfile: false,\n      hasAlpha: false\n    });\n  });","file":"unit/metadata.js","skipped":false,"dir":"test"},{"name":"File input with corrupt header fails gracefully","suites":["Image metadata"],"updatePoint":{"line":696,"column":53,"index":28038},"line":696,"code":"  it('File input with corrupt header fails gracefully', function (done) {\n    sharp(fixtures.inputJpgWithCorruptHeader).metadata(function (err) {\n      assert.strictEqual(true, !!err);\n      assert.ok(err.message.includes('Input file has corrupt header: VipsJpeg: Premature end of'), err);\n      done();\n    });\n  });","file":"unit/metadata.js","skipped":false,"dir":"test"},{"name":"Buffer input with corrupt header fails gracefully","suites":["Image metadata"],"updatePoint":{"line":703,"column":55,"index":28358},"line":703,"code":"  it('Buffer input with corrupt header fails gracefully', function (done) {\n    sharp(fs.readFileSync(fixtures.inputJpgWithCorruptHeader)).metadata(function (err) {\n      assert.strictEqual(true, !!err);\n      assert.ok(err.message.includes('Input buffer has corrupt header: VipsJpeg: Premature end of'), err);\n      done();\n    });\n  });","file":"unit/metadata.js","skipped":false,"dir":"test"},{"name":"Unsupported lossless JPEG passes underlying error message","suites":["Image metadata"],"updatePoint":{"line":710,"column":63,"index":28705},"line":710,"code":"  it('Unsupported lossless JPEG passes underlying error message', function (done) {\n    sharp(fixtures.inputJpgLossless).metadata(function (err) {\n      assert.strictEqual(true, !!err);\n      assert.strictEqual(true, /Input file has corrupt header: VipsJpeg: Unsupported JPEG process: SOF type 0xc3/.test(err.message));\n      done();\n    });\n  });","file":"unit/metadata.js","skipped":false,"dir":"test"},{"name":"String orientation","suites":["Image metadata","Invalid withMetadata parameters"],"updatePoint":{"line":718,"column":26,"index":29076},"line":718,"code":"    it('String orientation', function () {\n      assert.throws(function () {\n        sharp().withMetadata({\n          orientation: 'zoinks'\n        });\n      });\n    });","file":"unit/metadata.js","skipped":false,"dir":"test"},{"name":"Negative orientation","suites":["Image metadata","Invalid withMetadata parameters"],"updatePoint":{"line":725,"column":28,"index":29248},"line":725,"code":"    it('Negative orientation', function () {\n      assert.throws(function () {\n        sharp().withMetadata({\n          orientation: -1\n        });\n      });\n    });","file":"unit/metadata.js","skipped":false,"dir":"test"},{"name":"Zero orientation","suites":["Image metadata","Invalid withMetadata parameters"],"updatePoint":{"line":732,"column":24,"index":29410},"line":732,"code":"    it('Zero orientation', function () {\n      assert.throws(function () {\n        sharp().withMetadata({\n          orientation: 0\n        });\n      });\n    });","file":"unit/metadata.js","skipped":false,"dir":"test"},{"name":"Too large orientation","suites":["Image metadata","Invalid withMetadata parameters"],"updatePoint":{"line":739,"column":29,"index":29576},"line":739,"code":"    it('Too large orientation', function () {\n      assert.throws(function () {\n        sharp().withMetadata({\n          orientation: 9\n        });\n      });\n    });","file":"unit/metadata.js","skipped":false,"dir":"test"},{"name":"Non-numeric density","suites":["Image metadata","Invalid withMetadata parameters"],"updatePoint":{"line":746,"column":27,"index":29740},"line":746,"code":"    it('Non-numeric density', function () {\n      assert.throws(function () {\n        sharp().withMetadata({\n          density: '1'\n        });\n      });\n    });","file":"unit/metadata.js","skipped":false,"dir":"test"},{"name":"Negative density","suites":["Image metadata","Invalid withMetadata parameters"],"updatePoint":{"line":753,"column":24,"index":29899},"line":753,"code":"    it('Negative density', function () {\n      assert.throws(function () {\n        sharp().withMetadata({\n          density: -1\n        });\n      });\n    });","file":"unit/metadata.js","skipped":false,"dir":"test"},{"name":"Non string icc","suites":["Image metadata","Invalid withMetadata parameters"],"updatePoint":{"line":760,"column":22,"index":30055},"line":760,"code":"    it('Non string icc', function () {\n      assert.throws(function () {\n        sharp().withMetadata({\n          icc: true\n        });\n      });\n    });","file":"unit/metadata.js","skipped":false,"dir":"test"},{"name":"Non object exif","suites":["Image metadata","Invalid withMetadata parameters"],"updatePoint":{"line":767,"column":23,"index":30210},"line":767,"code":"    it('Non object exif', function () {\n      assert.throws(function () {\n        sharp().withMetadata({\n          exif: false\n        });\n      });\n    });","file":"unit/metadata.js","skipped":false,"dir":"test"},{"name":"Non string value in object exif","suites":["Image metadata","Invalid withMetadata parameters"],"updatePoint":{"line":774,"column":39,"index":30383},"line":774,"code":"    it('Non string value in object exif', function () {\n      assert.throws(function () {\n        sharp().withMetadata({\n          exif: {\n            ifd0: false\n          }\n        });\n      });\n    });","file":"unit/metadata.js","skipped":false,"dir":"test"},{"name":"Non string value in nested object exif","suites":["Image metadata","Invalid withMetadata parameters"],"updatePoint":{"line":783,"column":46,"index":30595},"line":783,"code":"    it('Non string value in nested object exif', function () {\n      assert.throws(function () {\n        sharp().withMetadata({\n          exif: {\n            ifd0: {\n              fail: false\n            }\n          }\n        });\n      });\n    });","file":"unit/metadata.js","skipped":false,"dir":"test"},{"name":"should throw","suites":["Modulate","Invalid options"],"updatePoint":{"line":31,"column":22,"index":610},"line":31,"code":"      it('should throw', function () {\n        assert.throws(function () {\n          sharp(fixtures.inputJpg).modulate(options);\n        });\n      });","file":"unit/modulate.js","skipped":false,"dir":"test"},{"name":"should be able to hue-rotate","suites":["Modulate","Invalid options"],"updatePoint":{"line":38,"column":34,"index":787},"line":38,"code":"  it('should be able to hue-rotate', async () => {\n    const [r, g, b] = await sharp({\n      create: {\n        width: 1,\n        height: 1,\n        channels: 3,\n        background: {\n          r: 153,\n          g: 68,\n          b: 68\n        }\n      }\n    }).modulate({\n      hue: 120\n    }).raw().toBuffer();\n    assert.deepStrictEqual({\n      r: 41,\n      g: 107,\n      b: 57\n    }, {\n      r,\n      g,\n      b\n    });\n  });","file":"unit/modulate.js","skipped":false,"dir":"test"},{"name":"should be able to brighten","suites":["Modulate","Invalid options"],"updatePoint":{"line":63,"column":32,"index":1212},"line":63,"code":"  it('should be able to brighten', async () => {\n    const [r, g, b] = await sharp({\n      create: {\n        width: 1,\n        height: 1,\n        channels: 3,\n        background: {\n          r: 153,\n          g: 68,\n          b: 68\n        }\n      }\n    }).modulate({\n      brightness: 2\n    }).raw().toBuffer();\n    assert.deepStrictEqual({\n      r: 255,\n      g: 173,\n      b: 168\n    }, {\n      r,\n      g,\n      b\n    });\n  });","file":"unit/modulate.js","skipped":false,"dir":"test"},{"name":"should be able to darken","suites":["Modulate","Invalid options"],"updatePoint":{"line":88,"column":30,"index":1642},"line":88,"code":"  it('should be able to darken', async () => {\n    const [r, g, b] = await sharp({\n      create: {\n        width: 1,\n        height: 1,\n        channels: 3,\n        background: {\n          r: 153,\n          g: 68,\n          b: 68\n        }\n      }\n    }).modulate({\n      brightness: 0.5\n    }).raw().toBuffer();\n    assert.deepStrictEqual({\n      r: 97,\n      g: 17,\n      b: 25\n    }, {\n      r,\n      g,\n      b\n    });\n  });","file":"unit/modulate.js","skipped":false,"dir":"test"},{"name":"should be able to saturate","suites":["Modulate","Invalid options"],"updatePoint":{"line":113,"column":32,"index":2073},"line":113,"code":"  it('should be able to saturate', async () => {\n    const [r, g, b] = await sharp({\n      create: {\n        width: 1,\n        height: 1,\n        channels: 3,\n        background: {\n          r: 153,\n          g: 68,\n          b: 68\n        }\n      }\n    }).modulate({\n      saturation: 2\n    }).raw().toBuffer();\n    assert.deepStrictEqual({\n      r: 198,\n      g: 0,\n      b: 43\n    }, {\n      r,\n      g,\n      b\n    });\n  });","file":"unit/modulate.js","skipped":false,"dir":"test"},{"name":"should be able to desaturate","suites":["Modulate","Invalid options"],"updatePoint":{"line":138,"column":34,"index":2504},"line":138,"code":"  it('should be able to desaturate', async () => {\n    const [r, g, b] = await sharp({\n      create: {\n        width: 1,\n        height: 1,\n        channels: 3,\n        background: {\n          r: 153,\n          g: 68,\n          b: 68\n        }\n      }\n    }).modulate({\n      saturation: 0.5\n    }).raw().toBuffer();\n    assert.deepStrictEqual({\n      r: 127,\n      g: 83,\n      b: 81\n    }, {\n      r,\n      g,\n      b\n    });\n  });","file":"unit/modulate.js","skipped":false,"dir":"test"},{"name":"should be able to lighten","suites":["Modulate","Invalid options"],"updatePoint":{"line":163,"column":31,"index":2935},"line":163,"code":"  it('should be able to lighten', async () => {\n    const [r, g, b] = await sharp({\n      create: {\n        width: 1,\n        height: 1,\n        channels: 3,\n        background: {\n          r: 153,\n          g: 68,\n          b: 68\n        }\n      }\n    }).modulate({\n      lightness: 10\n    }).raw().toBuffer();\n    assert.deepStrictEqual({\n      r: 182,\n      g: 93,\n      b: 92\n    }, {\n      r,\n      g,\n      b\n    });\n  });","file":"unit/modulate.js","skipped":false,"dir":"test"},{"name":"should be able to modulate all channels","suites":["Modulate","Invalid options"],"updatePoint":{"line":188,"column":45,"index":3378},"line":188,"code":"  it('should be able to modulate all channels', async () => {\n    const [r, g, b] = await sharp({\n      create: {\n        width: 1,\n        height: 1,\n        channels: 3,\n        background: {\n          r: 153,\n          g: 68,\n          b: 68\n        }\n      }\n    }).modulate({\n      brightness: 2,\n      saturation: 0.5,\n      hue: 180\n    }).raw().toBuffer();\n    assert.deepStrictEqual({\n      r: 149,\n      g: 209,\n      b: 214\n    }, {\n      r,\n      g,\n      b\n    });\n  });","file":"unit/modulate.js","skipped":false,"dir":"test"},{"name":"should be able to use linear and modulate together","suites":["Modulate","Invalid options"],"updatePoint":{"line":215,"column":56,"index":3873},"line":215,"code":"  it('should be able to use linear and modulate together', async () => {\n    const contrast = 1.5;\n    const brightness = 0.5;\n    const [r, g, b] = await sharp({\n      create: {\n        width: 1,\n        height: 1,\n        channels: 3,\n        background: {\n          r: 153,\n          g: 68,\n          b: 68\n        }\n      }\n    }).linear(contrast, -(128 * contrast) + 128).modulate({\n      brightness\n    }).raw().toBuffer();\n    assert.deepStrictEqual({\n      r: 81,\n      g: 0,\n      b: 0\n    }, {\n      r,\n      g,\n      b\n    });\n  });","file":"unit/modulate.js","skipped":false,"dir":"test"},{"name":"should hue rotate by  deg","suites":["Modulate","hue-rotate"],"updatePoint":{"line":244,"column":43,"index":4518},"line":244,"code":"      it(`should hue rotate by ${angle} deg`, async () => {\n        const base = `modulate-hue-angle-${angle}.png`;\n        const actual = fixtures.path(`output.${base}`);\n        const expected = fixtures.expected(base);\n        await sharp(fixtures.testPattern).resize(320).modulate({\n          hue: angle\n        }).png({\n          compressionLevel: 0\n        }).toFile(actual).then(() => {\n          fixtures.assertMaxColourDistance(actual, expected);\n        });\n      });","file":"unit/modulate.js","skipped":false,"dir":"test"},{"name":"negate (jpeg)","suites":["Negate"],"updatePoint":{"line":7,"column":19,"index":176},"line":7,"code":"  it('negate (jpeg)', function (done) {\n    sharp(fixtures.inputJpg).resize(320, 240).negate().toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual('jpeg', info.format);\n      assert.strictEqual(320, info.width);\n      assert.strictEqual(240, info.height);\n      fixtures.assertSimilar(fixtures.expected('negate.jpg'), data, done);\n    });\n  });","file":"unit/negate.js","skipped":false,"dir":"test"},{"name":"negate (png)","suites":["Negate"],"updatePoint":{"line":16,"column":18,"index":557},"line":16,"code":"  it('negate (png)', function (done) {\n    sharp(fixtures.inputPng).resize(320, 240).negate().toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual('png', info.format);\n      assert.strictEqual(320, info.width);\n      assert.strictEqual(240, info.height);\n      fixtures.assertSimilar(fixtures.expected('negate.png'), data, done);\n    });\n  });","file":"unit/negate.js","skipped":false,"dir":"test"},{"name":"negate (png, trans)","suites":["Negate"],"updatePoint":{"line":25,"column":25,"index":944},"line":25,"code":"  it('negate (png, trans)', function (done) {\n    sharp(fixtures.inputPngWithTransparency).resize(320, 240).negate().toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual('png', info.format);\n      assert.strictEqual(320, info.width);\n      assert.strictEqual(240, info.height);\n      fixtures.assertSimilar(fixtures.expected('negate-trans.png'), data, done);\n    });\n  });","file":"unit/negate.js","skipped":false,"dir":"test"},{"name":"negate (png, alpha)","suites":["Negate"],"updatePoint":{"line":34,"column":25,"index":1353},"line":34,"code":"  it('negate (png, alpha)', function (done) {\n    sharp(fixtures.inputPngWithGreyAlpha).resize(320, 240).negate().toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual('png', info.format);\n      assert.strictEqual(320, info.width);\n      assert.strictEqual(240, info.height);\n      fixtures.assertSimilar(fixtures.expected('negate-alpha.png'), data, done);\n    });\n  });","file":"unit/negate.js","skipped":false,"dir":"test"},{"name":"negate (webp)","suites":["Negate"],"updatePoint":{"line":43,"column":19,"index":1753},"line":43,"code":"  it('negate (webp)', function (done) {\n    sharp(fixtures.inputWebP).resize(320, 240).negate().toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual('webp', info.format);\n      assert.strictEqual(320, info.width);\n      assert.strictEqual(240, info.height);\n      fixtures.assertSimilar(fixtures.expected('negate.webp'), data, done);\n    });\n  });","file":"unit/negate.js","skipped":false,"dir":"test"},{"name":"negate (webp, trans)","suites":["Negate"],"updatePoint":{"line":52,"column":26,"index":2144},"line":52,"code":"  it('negate (webp, trans)', function (done) {\n    sharp(fixtures.inputWebPWithTransparency).resize(320, 240).negate().toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual('webp', info.format);\n      assert.strictEqual(320, info.width);\n      assert.strictEqual(240, info.height);\n      fixtures.assertSimilar(fixtures.expected('negate-trans.webp'), data, done);\n    });\n  });","file":"unit/negate.js","skipped":false,"dir":"test"},{"name":"negate (true)","suites":["Negate"],"updatePoint":{"line":61,"column":19,"index":2550},"line":61,"code":"  it('negate (true)', function (done) {\n    sharp(fixtures.inputJpg).resize(320, 240).negate(true).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual('jpeg', info.format);\n      assert.strictEqual(320, info.width);\n      assert.strictEqual(240, info.height);\n      fixtures.assertSimilar(fixtures.expected('negate.jpg'), data, done);\n    });\n  });","file":"unit/negate.js","skipped":false,"dir":"test"},{"name":"negate (false)","suites":["Negate"],"updatePoint":{"line":70,"column":20,"index":2937},"line":70,"code":"  it('negate (false)', function (done) {\n    const output = fixtures.path('output.unmodified-by-negate.png');\n    sharp(fixtures.inputJpgWithLowContrast).negate(false).toFile(output, function (err, info) {\n      if (err) throw err;\n      fixtures.assertMaxColourDistance(output, fixtures.inputJpgWithLowContrast, 0);\n      done();\n    });\n  });","file":"unit/negate.js","skipped":false,"dir":"test"},{"name":"negate ({alpha: true})","suites":["Negate"],"updatePoint":{"line":78,"column":28,"index":3290},"line":78,"code":"  it('negate ({alpha: true})', function (done) {\n    sharp(fixtures.inputJpg).resize(320, 240).negate({\n      alpha: true\n    }).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual('jpeg', info.format);\n      assert.strictEqual(320, info.width);\n      assert.strictEqual(240, info.height);\n      fixtures.assertSimilar(fixtures.expected('negate.jpg'), data, done);\n    });\n  });","file":"unit/negate.js","skipped":false,"dir":"test"},{"name":"negate non-alpha channels (png)","suites":["Negate"],"updatePoint":{"line":89,"column":37,"index":3715},"line":89,"code":"  it('negate non-alpha channels (png)', function (done) {\n    sharp(fixtures.inputPng).resize(320, 240).negate({\n      alpha: false\n    }).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual('png', info.format);\n      assert.strictEqual(320, info.width);\n      assert.strictEqual(240, info.height);\n      fixtures.assertSimilar(fixtures.expected('negate-preserve-alpha.png'), data, done);\n    });\n  });","file":"unit/negate.js","skipped":false,"dir":"test"},{"name":"negate non-alpha channels (png, trans)","suites":["Negate"],"updatePoint":{"line":100,"column":44,"index":4162},"line":100,"code":"  it('negate non-alpha channels (png, trans)', function (done) {\n    sharp(fixtures.inputPngWithTransparency).resize(320, 240).negate({\n      alpha: false\n    }).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual('png', info.format);\n      assert.strictEqual(320, info.width);\n      assert.strictEqual(240, info.height);\n      fixtures.assertSimilar(fixtures.expected('negate-preserve-alpha-trans.png'), data, done);\n    });\n  });","file":"unit/negate.js","skipped":false,"dir":"test"},{"name":"negate non-alpha channels (png, alpha)","suites":["Negate"],"updatePoint":{"line":111,"column":44,"index":4631},"line":111,"code":"  it('negate non-alpha channels (png, alpha)', function (done) {\n    sharp(fixtures.inputPngWithGreyAlpha).resize(320, 240).negate({\n      alpha: false\n    }).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual('png', info.format);\n      assert.strictEqual(320, info.width);\n      assert.strictEqual(240, info.height);\n      fixtures.assertSimilar(fixtures.expected('negate-preserve-alpha-grey.png'), data, done);\n    });\n  });","file":"unit/negate.js","skipped":false,"dir":"test"},{"name":"negate non-alpha channels (webp)","suites":["Negate"],"updatePoint":{"line":122,"column":38,"index":5090},"line":122,"code":"  it('negate non-alpha channels (webp)', function (done) {\n    sharp(fixtures.inputWebP).resize(320, 240).negate({\n      alpha: false\n    }).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual('webp', info.format);\n      assert.strictEqual(320, info.width);\n      assert.strictEqual(240, info.height);\n      fixtures.assertSimilar(fixtures.expected('negate-preserve-alpha.webp'), data, done);\n    });\n  });","file":"unit/negate.js","skipped":false,"dir":"test"},{"name":"negate non-alpha channels (webp, trans)","suites":["Negate"],"updatePoint":{"line":133,"column":45,"index":5541},"line":133,"code":"  it('negate non-alpha channels (webp, trans)', function (done) {\n    sharp(fixtures.inputWebPWithTransparency).resize(320, 240).negate({\n      alpha: false\n    }).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual('webp', info.format);\n      assert.strictEqual(320, info.width);\n      assert.strictEqual(240, info.height);\n      fixtures.assertSimilar(fixtures.expected('negate-preserve-alpha-trans.webp'), data, done);\n    });\n  });","file":"unit/negate.js","skipped":false,"dir":"test"},{"name":"invalid alpha value","suites":["Negate"],"updatePoint":{"line":144,"column":25,"index":5994},"line":144,"code":"  it('invalid alpha value', function () {\n    assert.throws(function () {\n      sharp(fixtures.inputWebPWithTransparency).negate({\n        alpha: 'non-bool'\n      });\n    });\n  });","file":"unit/negate.js","skipped":false,"dir":"test"},{"name":"generate single-channel gaussian noise","suites":["Gaussian noise"],"updatePoint":{"line":7,"column":44,"index":209},"line":7,"code":"  it('generate single-channel gaussian noise', function (done) {\n    const output = fixtures.path('output.noise-1-channel.png');\n    const noise = sharp({\n      create: {\n        width: 1024,\n        height: 768,\n        channels: 1,\n        // b-w\n        noise: {\n          type: 'gaussian',\n          mean: 128,\n          sigma: 30\n        }\n      }\n    });\n    noise.toFile(output, function (err, info) {\n      if (err) throw err;\n      assert.strictEqual('png', info.format);\n      assert.strictEqual(1024, info.width);\n      assert.strictEqual(768, info.height);\n      assert.strictEqual(1, info.channels);\n      sharp(output).metadata(function (err, metadata) {\n        if (err) throw err;\n        assert.strictEqual('b-w', metadata.space);\n        assert.strictEqual('uchar', metadata.depth);\n        done();\n      });\n    });\n  });","file":"unit/noise.js","skipped":false,"dir":"test"},{"name":"generate 3-channels gaussian noise","suites":["Gaussian noise"],"updatePoint":{"line":36,"column":40,"index":1046},"line":36,"code":"  it('generate 3-channels gaussian noise', function (done) {\n    const output = fixtures.path('output.noise-3-channels.png');\n    const noise = sharp({\n      create: {\n        width: 1024,\n        height: 768,\n        channels: 3,\n        // sRGB\n        noise: {\n          type: 'gaussian',\n          mean: 128,\n          sigma: 30\n        }\n      }\n    });\n    noise.toFile(output, function (err, info) {\n      if (err) throw err;\n      assert.strictEqual('png', info.format);\n      assert.strictEqual(1024, info.width);\n      assert.strictEqual(768, info.height);\n      assert.strictEqual(3, info.channels);\n      sharp(output).metadata(function (err, metadata) {\n        if (err) throw err;\n        assert.strictEqual('srgb', metadata.space);\n        assert.strictEqual('uchar', metadata.depth);\n        done();\n      });\n    });\n  });","file":"unit/noise.js","skipped":false,"dir":"test"},{"name":"overlay 3-channels gaussian noise over image","suites":["Gaussian noise"],"updatePoint":{"line":65,"column":50,"index":1896},"line":65,"code":"  it('overlay 3-channels gaussian noise over image', function (done) {\n    const output = fixtures.path('output.noise-image.jpg');\n    const noise = sharp({\n      create: {\n        width: 320,\n        height: 240,\n        channels: 3,\n        noise: {\n          type: 'gaussian',\n          mean: 0,\n          sigma: 5\n        }\n      }\n    });\n    noise.toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(3, info.channels);\n      sharp(fixtures.inputJpg).resize(320, 240).composite([{\n        input: data,\n        blend: 'exclusion',\n        raw: {\n          width: info.width,\n          height: info.height,\n          channels: info.channels\n        }\n      }]).toFile(output, function (err, info) {\n        if (err) throw err;\n        assert.strictEqual('jpeg', info.format);\n        assert.strictEqual(320, info.width);\n        assert.strictEqual(240, info.height);\n        assert.strictEqual(3, info.channels);\n        // perceptual hashing detects that images are the same (difference is <=1%)\n        fixtures.assertSimilar(output, fixtures.inputJpg, function (err) {\n          if (err) throw err;\n          done();\n        });\n      });\n    });\n  });","file":"unit/noise.js","skipped":false,"dir":"test"},{"name":"overlay strong single-channel (sRGB) gaussian noise with 25% transparency over transparent png image","suites":["Gaussian noise"],"updatePoint":{"line":104,"column":106,"index":3148},"line":104,"code":"  it('overlay strong single-channel (sRGB) gaussian noise with 25% transparency over transparent png image', function (done) {\n    const output = fixtures.path('output.noise-image-transparent.png');\n    const width = 320;\n    const height = 240;\n    const rawData = {\n      width,\n      height,\n      channels: 1\n    };\n    const noise = sharp({\n      create: {\n        width,\n        height,\n        channels: 1,\n        noise: {\n          type: 'gaussian',\n          mean: 200,\n          sigma: 30\n        }\n      }\n    });\n    noise.toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(1, info.channels);\n      sharp(data, {\n        raw: rawData\n      }).joinChannel(data, {\n        raw: rawData\n      }) // r channel\n      .joinChannel(data, {\n        raw: rawData\n      }) // b channel\n      .joinChannel(Buffer.alloc(width * height, 64), {\n        raw: rawData\n      }) // alpha channel\n      .toBuffer(function (err, data, info) {\n        if (err) throw err;\n        assert.strictEqual(4, info.channels);\n        sharp(fixtures.inputPngRGBWithAlpha).resize(width, height).composite([{\n          input: data,\n          blend: 'exclusion',\n          raw: {\n            width: info.width,\n            height: info.height,\n            channels: info.channels\n          }\n        }]).toFile(output, function (err, info) {\n          if (err) throw err;\n          assert.strictEqual('png', info.format);\n          assert.strictEqual(width, info.width);\n          assert.strictEqual(height, info.height);\n          assert.strictEqual(4, info.channels);\n          fixtures.assertSimilar(output, fixtures.inputPngRGBWithAlpha, {\n            threshold: 10\n          }, function (err) {\n            if (err) throw err;\n            done();\n          });\n        });\n      });\n    });\n  });","file":"unit/noise.js","skipped":false,"dir":"test"},{"name":"no create object properties specified","suites":["Gaussian noise"],"updatePoint":{"line":166,"column":43,"index":4905},"line":166,"code":"  it('no create object properties specified', function () {\n    assert.throws(function () {\n      sharp({\n        create: {}\n      });\n    });\n  });","file":"unit/noise.js","skipped":false,"dir":"test"},{"name":"invalid noise object","suites":["Gaussian noise"],"updatePoint":{"line":173,"column":26,"index":5037},"line":173,"code":"  it('invalid noise object', function () {\n    assert.throws(function () {\n      sharp({\n        create: {\n          width: 100,\n          height: 100,\n          channels: 3,\n          noise: 'gaussian'\n        }\n      });\n    });\n  });","file":"unit/noise.js","skipped":false,"dir":"test"},{"name":"unknown type of noise","suites":["Gaussian noise"],"updatePoint":{"line":185,"column":27,"index":5275},"line":185,"code":"  it('unknown type of noise', function () {\n    assert.throws(function () {\n      sharp({\n        create: {\n          width: 100,\n          height: 100,\n          channels: 3,\n          noise: {\n            type: 'unknown'\n          }\n        }\n      });\n    });\n  });","file":"unit/noise.js","skipped":false,"dir":"test"},{"name":"gaussian noise, invalid amount of channels","suites":["Gaussian noise"],"updatePoint":{"line":199,"column":48,"index":5565},"line":199,"code":"  it('gaussian noise, invalid amount of channels', function () {\n    assert.throws(function () {\n      sharp({\n        create: {\n          width: 100,\n          height: 100,\n          channels: 5,\n          noise: {\n            type: 'gaussian',\n            mean: 5,\n            sigma: 10\n          }\n        }\n      });\n    });\n  });","file":"unit/noise.js","skipped":false,"dir":"test"},{"name":"gaussian noise, invalid mean","suites":["Gaussian noise"],"updatePoint":{"line":215,"column":34,"index":5886},"line":215,"code":"  it('gaussian noise, invalid mean', function () {\n    assert.throws(function () {\n      sharp({\n        create: {\n          width: 100,\n          height: 100,\n          channels: 1,\n          noise: {\n            type: 'gaussian',\n            mean: -1.5,\n            sigma: 10\n          }\n        }\n      });\n    });\n  });","file":"unit/noise.js","skipped":false,"dir":"test"},{"name":"gaussian noise, invalid sigma","suites":["Gaussian noise"],"updatePoint":{"line":231,"column":35,"index":6211},"line":231,"code":"  it('gaussian noise, invalid sigma', function () {\n    assert.throws(function () {\n      sharp({\n        create: {\n          width: 100,\n          height: 100,\n          channels: 1,\n          noise: {\n            type: 'gaussian',\n            mean: 0,\n            sigma: -1.5\n          }\n        }\n      });\n    });\n  });","file":"unit/noise.js","skipped":false,"dir":"test"},{"name":"spreads rgb image values between 0 and 255","suites":["Normalization"],"updatePoint":{"line":17,"column":48,"index":466},"line":17,"code":"  it('spreads rgb image values between 0 and 255', function (done) {\n    sharp(fixtures.inputJpgWithLowContrast).normalise().raw().toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assertNormalized(data);\n      done();\n    });\n  });","file":"unit/normalize.js","skipped":false,"dir":"test"},{"name":"spreads grayscaled image values between 0 and 255","suites":["Normalization"],"updatePoint":{"line":24,"column":55,"index":726},"line":24,"code":"  it('spreads grayscaled image values between 0 and 255', function (done) {\n    sharp(fixtures.inputJpgWithLowContrast).gamma().greyscale().normalize(true).raw().toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assertNormalized(data);\n      done();\n    });\n  });","file":"unit/normalize.js","skipped":false,"dir":"test"},{"name":"stretches greyscale images with alpha channel","suites":["Normalization"],"updatePoint":{"line":31,"column":51,"index":1006},"line":31,"code":"  it('stretches greyscale images with alpha channel', function (done) {\n    sharp(fixtures.inputPngWithGreyAlpha).normalise().raw().toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assertNormalized(data);\n      done();\n    });\n  });","file":"unit/normalize.js","skipped":false,"dir":"test"},{"name":"keeps an existing alpha channel","suites":["Normalization"],"updatePoint":{"line":38,"column":37,"index":1246},"line":38,"code":"  it('keeps an existing alpha channel', function (done) {\n    sharp(fixtures.inputPngWithTransparency).resize(8, 8).normalize().toBuffer(function (err, data) {\n      if (err) throw err;\n      sharp(data).metadata(function (err, metadata) {\n        if (err) return done(err);\n        assert.strictEqual(4, metadata.channels);\n        assert.strictEqual(true, metadata.hasAlpha);\n        assert.strictEqual('srgb', metadata.space);\n        done();\n      });\n    });\n  });","file":"unit/normalize.js","skipped":false,"dir":"test"},{"name":"keeps the alpha channel of greyscale images intact","suites":["Normalization"],"updatePoint":{"line":50,"column":56,"index":1735},"line":50,"code":"  it('keeps the alpha channel of greyscale images intact', function (done) {\n    sharp(fixtures.inputPngWithGreyAlpha).resize(8, 8).normalise().toBuffer(function (err, data) {\n      if (err) throw err;\n      sharp(data).metadata(function (err, metadata) {\n        if (err) return done(err);\n        assert.strictEqual(true, metadata.hasAlpha);\n        assert.strictEqual(4, metadata.channels);\n        assert.strictEqual('srgb', metadata.space);\n        done();\n      });\n    });\n  });","file":"unit/normalize.js","skipped":false,"dir":"test"},{"name":"does not alter images with only one color","suites":["Normalization"],"updatePoint":{"line":62,"column":47,"index":2212},"line":62,"code":"  it('does not alter images with only one color', function (done) {\n    const output = fixtures.path('output.unmodified-png-with-one-color.png');\n    sharp(fixtures.inputPngWithOneColor).normalize().toFile(output, function (err, info) {\n      if (err) done(err);\n      fixtures.assertMaxColourDistance(output, fixtures.inputPngWithOneColor, 0);\n      done();\n    });\n  });","file":"unit/normalize.js","skipped":false,"dir":"test"},{"name":"works with 16-bit RGBA images","suites":["Normalization"],"updatePoint":{"line":70,"column":35,"index":2573},"line":70,"code":"  it('works with 16-bit RGBA images', function (done) {\n    sharp(fixtures.inputPngWithTransparency16bit).normalise().raw().toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assertNormalized(data);\n      done();\n    });\n  });","file":"unit/normalize.js","skipped":false,"dir":"test"},{"name":"Can override arch with npm_config_arch","suites":["Platform-detection"],"updatePoint":{"line":6,"column":44,"index":187},"line":6,"code":"  it('Can override arch with npm_config_arch', function () {\n    process.env.npm_config_arch = 'test';\n    assert.strictEqual('test', platform().split('-')[1]);\n    delete process.env.npm_config_arch;\n  });","file":"unit/platform.js","skipped":false,"dir":"test"},{"name":"Can override platform with npm_config_platform","suites":["Platform-detection"],"updatePoint":{"line":11,"column":52,"index":402},"line":11,"code":"  it('Can override platform with npm_config_platform', function () {\n    process.env.npm_config_platform = 'test';\n    assert.strictEqual('test', platform().split('-')[0]);\n    delete process.env.npm_config_platform;\n  });","file":"unit/platform.js","skipped":false,"dir":"test"},{"name":"Can override ARM version via --arm-version","suites":["Platform-detection"],"updatePoint":{"line":16,"column":48,"index":621},"line":16,"code":"  it('Can override ARM version via --arm-version', function () {\n    process.env.npm_config_arch = 'arm';\n    process.env.npm_config_arm_version = 'test';\n    assert.strictEqual('armvtest', platform().split('-')[1]);\n    delete process.env.npm_config_arm_version;\n    delete process.env.npm_config_arch;\n  });","file":"unit/platform.js","skipped":false,"dir":"test"},{"name":"Can override ARM64 version via --arm-version","suites":["Platform-detection"],"updatePoint":{"line":23,"column":50,"index":933},"line":23,"code":"  it('Can override ARM64 version via --arm-version', function () {\n    process.env.npm_config_arch = 'arm64';\n    process.env.npm_config_arm_version = 'test';\n    assert.strictEqual('arm64vtest', platform().split('-')[1]);\n    delete process.env.npm_config_arm_version;\n    delete process.env.npm_config_arch;\n  });","file":"unit/platform.js","skipped":false,"dir":"test"},{"name":"Can detect ARM version via process.config","suites":["Platform-detection"],"updatePoint":{"line":31,"column":49,"index":1294},"line":31,"code":"    it('Can detect ARM version via process.config', function () {\n      process.env.npm_config_arch = 'arm';\n      assert.strictEqual(`armv${process.config.variables.arm_version}`, platform().split('-')[1]);\n      delete process.env.npm_config_arch;\n    });","file":"unit/platform.js","skipped":false,"dir":"test"},{"name":"Defaults to ARMv6 for 32-bit","suites":["Platform-detection"],"updatePoint":{"line":38,"column":36,"index":1590},"line":38,"code":"    it('Defaults to ARMv6 for 32-bit', function () {\n      process.env.npm_config_arch = 'arm';\n      assert.strictEqual('armv6', platform().split('-')[1]);\n      delete process.env.npm_config_arch;\n    });","file":"unit/platform.js","skipped":false,"dir":"test"},{"name":"Defaults to ARMv8 for 64-bit","suites":["Platform-detection"],"updatePoint":{"line":44,"column":34,"index":1799},"line":44,"code":"  it('Defaults to ARMv8 for 64-bit', function () {\n    process.env.npm_config_arch = 'arm64';\n    assert.strictEqual('arm64v8', platform().split('-')[1]);\n    delete process.env.npm_config_arch;\n  });","file":"unit/platform.js","skipped":false,"dir":"test"},{"name":"Can ensure version ARMv7 if electron version is present","suites":["Platform-detection"],"updatePoint":{"line":49,"column":61,"index":2027},"line":49,"code":"  it('Can ensure version ARMv7 if electron version is present', function () {\n    process.env.npm_config_arch = 'arm';\n    process.versions.electron = 'test';\n    assert.strictEqual('armv7', platform().split('-')[1]);\n    delete process.env.npm_config_arch;\n    delete process.versions.electron;\n  });","file":"unit/platform.js","skipped":false,"dir":"test"},{"name":"compression level is valid","suites":["PNG"],"updatePoint":{"line":8,"column":32,"index":212},"line":8,"code":"  it('compression level is valid', function () {\n    assert.doesNotThrow(function () {\n      sharp().png({\n        compressionLevel: 0\n      });\n    });\n  });","file":"unit/png.js","skipped":false,"dir":"test"},{"name":"compression level is invalid","suites":["PNG"],"updatePoint":{"line":15,"column":34,"index":373},"line":15,"code":"  it('compression level is invalid', function () {\n    assert.throws(function () {\n      sharp().png({\n        compressionLevel: -1\n      });\n    });\n  });","file":"unit/png.js","skipped":false,"dir":"test"},{"name":"default compressionLevel generates smaller file than compressionLevel=0","suites":["PNG"],"updatePoint":{"line":22,"column":77,"index":572},"line":22,"code":"  it('default compressionLevel generates smaller file than compressionLevel=0', function (done) {\n    // First generate with default compressionLevel\n    sharp(fixtures.inputPng).resize(320, 240).png().toBuffer(function (err, defaultData, defaultInfo) {\n      if (err) throw err;\n      assert.strictEqual(true, defaultData.length > 0);\n      assert.strictEqual('png', defaultInfo.format);\n      // Then generate with compressionLevel=6\n      sharp(fixtures.inputPng).resize(320, 240).png({\n        compressionLevel: 0\n      }).toBuffer(function (err, largerData, largerInfo) {\n        if (err) throw err;\n        assert.strictEqual(true, largerData.length > 0);\n        assert.strictEqual('png', largerInfo.format);\n        assert.strictEqual(true, defaultData.length < largerData.length);\n        done();\n      });\n    });\n  });","file":"unit/png.js","skipped":false,"dir":"test"},{"name":"without adaptiveFiltering generates smaller file","suites":["PNG"],"updatePoint":{"line":40,"column":54,"index":1379},"line":40,"code":"  it('without adaptiveFiltering generates smaller file', function (done) {\n    // First generate with adaptive filtering\n    sharp(fixtures.inputPng).resize(320, 240).png({\n      adaptiveFiltering: true\n    }).toBuffer(function (err, adaptiveData, adaptiveInfo) {\n      if (err) throw err;\n      assert.strictEqual(true, adaptiveData.length > 0);\n      assert.strictEqual(adaptiveData.length, adaptiveInfo.size);\n      assert.strictEqual('png', adaptiveInfo.format);\n      assert.strictEqual(320, adaptiveInfo.width);\n      assert.strictEqual(240, adaptiveInfo.height);\n      // Then generate without\n      sharp(fixtures.inputPng).resize(320, 240).png({\n        adaptiveFiltering: false\n      }).toBuffer(function (err, withoutAdaptiveData, withoutAdaptiveInfo) {\n        if (err) throw err;\n        assert.strictEqual(true, withoutAdaptiveData.length > 0);\n        assert.strictEqual(withoutAdaptiveData.length, withoutAdaptiveInfo.size);\n        assert.strictEqual('png', withoutAdaptiveInfo.format);\n        assert.strictEqual(320, withoutAdaptiveInfo.width);\n        assert.strictEqual(240, withoutAdaptiveInfo.height);\n        assert.strictEqual(true, withoutAdaptiveData.length < adaptiveData.length);\n        done();\n      });\n    });\n  });","file":"unit/png.js","skipped":false,"dir":"test"},{"name":"Invalid PNG adaptiveFiltering value throws error","suites":["PNG"],"updatePoint":{"line":66,"column":54,"index":2628},"line":66,"code":"  it('Invalid PNG adaptiveFiltering value throws error', function () {\n    assert.throws(function () {\n      sharp().png({\n        adaptiveFiltering: 1\n      });\n    });\n  });","file":"unit/png.js","skipped":false,"dir":"test"},{"name":"Progressive PNG image","suites":["PNG"],"updatePoint":{"line":73,"column":27,"index":2777},"line":73,"code":"  it('Progressive PNG image', function (done) {\n    sharp(fixtures.inputJpg).resize(320, 240).png({\n      progressive: false\n    }).toBuffer(function (err, nonProgressiveData, nonProgressiveInfo) {\n      if (err) throw err;\n      assert.strictEqual(true, nonProgressiveData.length > 0);\n      assert.strictEqual(nonProgressiveData.length, nonProgressiveInfo.size);\n      assert.strictEqual('png', nonProgressiveInfo.format);\n      assert.strictEqual(320, nonProgressiveInfo.width);\n      assert.strictEqual(240, nonProgressiveInfo.height);\n      sharp(nonProgressiveData).png({\n        progressive: true\n      }).toBuffer(function (err, progressiveData, progressiveInfo) {\n        if (err) throw err;\n        assert.strictEqual(true, progressiveData.length > 0);\n        assert.strictEqual(progressiveData.length, progressiveInfo.size);\n        assert.strictEqual(true, progressiveData.length > nonProgressiveData.length);\n        assert.strictEqual('png', progressiveInfo.format);\n        assert.strictEqual(320, progressiveInfo.width);\n        assert.strictEqual(240, progressiveInfo.height);\n        done();\n      });\n    });\n  });","file":"unit/png.js","skipped":false,"dir":"test"},{"name":"16-bit grey+alpha PNG identity transform","suites":["PNG"],"updatePoint":{"line":97,"column":46,"index":3931},"line":97,"code":"  it('16-bit grey+alpha PNG identity transform', function () {\n    const actual = fixtures.path('output.16-bit-grey-alpha-identity.png');\n    return sharp(fixtures.inputPng16BitGreyAlpha).toFile(actual).then(function () {\n      fixtures.assertMaxColourDistance(actual, fixtures.expected('16-bit-grey-alpha-identity.png'));\n    });\n  });","file":"unit/png.js","skipped":false,"dir":"test"},{"name":"Valid PNG libimagequant palette value does not throw error","suites":["PNG"],"updatePoint":{"line":103,"column":64,"index":4286},"line":103,"code":"  it('Valid PNG libimagequant palette value does not throw error', function () {\n    assert.doesNotThrow(function () {\n      sharp().png({\n        palette: false\n      });\n    });\n  });","file":"unit/png.js","skipped":false,"dir":"test"},{"name":"Invalid PNG libimagequant palette value throws error","suites":["PNG"],"updatePoint":{"line":110,"column":58,"index":4466},"line":110,"code":"  it('Invalid PNG libimagequant palette value throws error', function () {\n    assert.throws(function () {\n      sharp().png({\n        palette: 'fail'\n      });\n    });\n  });","file":"unit/png.js","skipped":false,"dir":"test"},{"name":"Valid PNG libimagequant quality value produces image of same size or smaller","suites":["PNG"],"updatePoint":{"line":117,"column":82,"index":4665},"line":117,"code":"  it('Valid PNG libimagequant quality value produces image of same size or smaller', function () {\n    const inputPngBuffer = fs.readFileSync(fixtures.inputPng);\n    return Promise.all([sharp(inputPngBuffer).resize(10).png({\n      quality: 80\n    }).toBuffer(), sharp(inputPngBuffer).resize(10).png({\n      quality: 100\n    }).toBuffer()]).then(function (data) {\n      assert.strictEqual(true, data[0].length <= data[1].length);\n    });\n  });","file":"unit/png.js","skipped":false,"dir":"test"},{"name":"Invalid PNG libimagequant quality value throws error","suites":["PNG"],"updatePoint":{"line":127,"column":58,"index":5084},"line":127,"code":"  it('Invalid PNG libimagequant quality value throws error', function () {\n    assert.throws(function () {\n      sharp().png({\n        quality: 101\n      });\n    });\n  });","file":"unit/png.js","skipped":false,"dir":"test"},{"name":"Valid PNG libimagequant colours value produces image of same size or smaller","suites":["PNG"],"updatePoint":{"line":134,"column":82,"index":5280},"line":134,"code":"  it('Valid PNG libimagequant colours value produces image of same size or smaller', function () {\n    const inputPngBuffer = fs.readFileSync(fixtures.inputPng);\n    return Promise.all([sharp(inputPngBuffer).resize(10).png({\n      colours: 100\n    }).toBuffer(), sharp(inputPngBuffer).resize(10).png({\n      colours: 200\n    }).toBuffer()]).then(function (data) {\n      assert.strictEqual(true, data[0].length <= data[1].length);\n    });\n  });","file":"unit/png.js","skipped":false,"dir":"test"},{"name":"Invalid PNG libimagequant colours value throws error","suites":["PNG"],"updatePoint":{"line":144,"column":58,"index":5700},"line":144,"code":"  it('Invalid PNG libimagequant colours value throws error', function () {\n    assert.throws(function () {\n      sharp().png({\n        colours: -1\n      });\n    });\n  });","file":"unit/png.js","skipped":false,"dir":"test"},{"name":"Invalid PNG libimagequant colors value throws error","suites":["PNG"],"updatePoint":{"line":151,"column":57,"index":5870},"line":151,"code":"  it('Invalid PNG libimagequant colors value throws error', function () {\n    assert.throws(function () {\n      sharp().png({\n        colors: 0.1\n      });\n    });\n  });","file":"unit/png.js","skipped":false,"dir":"test"},{"name":"Valid PNG libimagequant dither value produces image of same size or smaller","suites":["PNG"],"updatePoint":{"line":158,"column":81,"index":6064},"line":158,"code":"  it('Valid PNG libimagequant dither value produces image of same size or smaller', function () {\n    const inputPngBuffer = fs.readFileSync(fixtures.inputPng);\n    return Promise.all([sharp(inputPngBuffer).resize(10).png({\n      dither: 0.1\n    }).toBuffer(), sharp(inputPngBuffer).resize(10).png({\n      dither: 0.9\n    }).toBuffer()]).then(function (data) {\n      assert.strictEqual(true, data[0].length <= data[1].length);\n    });\n  });","file":"unit/png.js","skipped":false,"dir":"test"},{"name":"Invalid PNG libimagequant dither value throws error","suites":["PNG"],"updatePoint":{"line":168,"column":57,"index":6481},"line":168,"code":"  it('Invalid PNG libimagequant dither value throws error', function () {\n    assert.throws(function () {\n      sharp().png({\n        dither: 'fail'\n      });\n    });\n  });","file":"unit/png.js","skipped":false,"dir":"test"},{"name":"Empty data","suites":["Raw pixel data","Raw pixel input"],"updatePoint":{"line":8,"column":18,"index":227},"line":8,"code":"    it('Empty data', function () {\n      assert.throws(function () {\n        sharp(Buffer.from(''));\n      }, /empty/);\n      assert.throws(function () {\n        sharp(new Uint8Array(0));\n      }, /empty/);\n      assert.throws(function () {\n        sharp(new Uint8ClampedArray(0));\n      }, /empty/);\n    });","file":"unit/raw.js","skipped":false,"dir":"test"},{"name":"Missing options","suites":["Raw pixel data","Raw pixel input"],"updatePoint":{"line":19,"column":23,"index":541},"line":19,"code":"    it('Missing options', function () {\n      assert.throws(function () {\n        sharp({\n          raw: {}\n        });\n      });\n    });","file":"unit/raw.js","skipped":false,"dir":"test"},{"name":"Incomplete options","suites":["Raw pixel data","Raw pixel input"],"updatePoint":{"line":26,"column":26,"index":682},"line":26,"code":"    it('Incomplete options', function () {\n      assert.throws(function () {\n        sharp({\n          raw: {\n            width: 1,\n            height: 1\n          }\n        });\n      });\n    });","file":"unit/raw.js","skipped":false,"dir":"test"},{"name":"Invalid channels","suites":["Raw pixel data","Raw pixel input"],"updatePoint":{"line":36,"column":24,"index":876},"line":36,"code":"    it('Invalid channels', function () {\n      assert.throws(function () {\n        sharp({\n          raw: {\n            width: 1,\n            height: 1,\n            channels: 5\n          }\n        });\n      });\n    });","file":"unit/raw.js","skipped":false,"dir":"test"},{"name":"Invalid height","suites":["Raw pixel data","Raw pixel input"],"updatePoint":{"line":47,"column":22,"index":1093},"line":47,"code":"    it('Invalid height', function () {\n      assert.throws(function () {\n        sharp({\n          raw: {\n            width: 1,\n            height: 0,\n            channels: 4\n          }\n        });\n      });\n    });","file":"unit/raw.js","skipped":false,"dir":"test"},{"name":"Invalid width","suites":["Raw pixel data","Raw pixel input"],"updatePoint":{"line":58,"column":21,"index":1309},"line":58,"code":"    it('Invalid width', function () {\n      assert.throws(function () {\n        sharp({\n          raw: {\n            width: 'zoinks',\n            height: 1,\n            channels: 4\n          }\n        });\n      });\n    });","file":"unit/raw.js","skipped":false,"dir":"test"},{"name":"RGB","suites":["Raw pixel data","Raw pixel input"],"updatePoint":{"line":69,"column":11,"index":1522},"line":69,"code":"    it('RGB', function (done) {\n      // Convert to raw pixel data\n      sharp(fixtures.inputJpg).resize(256).raw().toBuffer(function (err, data, info) {\n        if (err) throw err;\n        assert.strictEqual(256, info.width);\n        assert.strictEqual(209, info.height);\n        assert.strictEqual(3, info.channels);\n        // Convert back to JPEG\n        sharp(data, {\n          raw: {\n            width: info.width,\n            height: info.height,\n            channels: info.channels\n          }\n        }).jpeg().toBuffer(function (err, data, info) {\n          if (err) throw err;\n          assert.strictEqual(256, info.width);\n          assert.strictEqual(209, info.height);\n          assert.strictEqual(3, info.channels);\n          fixtures.assertSimilar(fixtures.inputJpg, data, done);\n        });\n      });\n    });","file":"unit/raw.js","skipped":false,"dir":"test"},{"name":"RGBA","suites":["Raw pixel data","Raw pixel input"],"updatePoint":{"line":92,"column":12,"index":2349},"line":92,"code":"    it('RGBA', function (done) {\n      // Convert to raw pixel data\n      sharp(fixtures.inputPngOverlayLayer1).resize(256).raw().toBuffer(function (err, data, info) {\n        if (err) throw err;\n        assert.strictEqual(256, info.width);\n        assert.strictEqual(192, info.height);\n        assert.strictEqual(4, info.channels);\n        // Convert back to PNG\n        sharp(data, {\n          raw: {\n            width: info.width,\n            height: info.height,\n            channels: info.channels\n          }\n        }).png().toBuffer(function (err, data, info) {\n          if (err) throw err;\n          assert.strictEqual(256, info.width);\n          assert.strictEqual(192, info.height);\n          assert.strictEqual(4, info.channels);\n          fixtures.assertSimilar(fixtures.inputPngOverlayLayer1, data, {\n            threshold: 7\n          }, done);\n        });\n      });\n    });","file":"unit/raw.js","skipped":false,"dir":"test"},{"name":"RGBA premultiplied","suites":["Raw pixel data","Raw pixel input"],"updatePoint":{"line":117,"column":26,"index":3254},"line":117,"code":"    it('RGBA premultiplied', function (done) {\n      // Convert to raw pixel data\n      sharp(fixtures.inputPngSolidAlpha).resize(256).raw().toBuffer(function (err, data, info) {\n        if (err) throw err;\n        assert.strictEqual(256, info.width);\n        assert.strictEqual(192, info.height);\n        assert.strictEqual(4, info.channels);\n        const originalData = Buffer.from(data);\n\n        // Premultiply image data\n        for (let i = 0; i < data.length; i += 4) {\n          const alpha = data[i + 3];\n          const norm = alpha / 255;\n          if (alpha < 255) {\n            data[i] = Math.round(data[i] * norm);\n            data[i + 1] = Math.round(data[i + 1] * norm);\n            data[i + 2] = Math.round(data[i + 2] * norm);\n          }\n        }\n\n        // Convert back to PNG\n        sharp(data, {\n          raw: {\n            width: info.width,\n            height: info.height,\n            channels: info.channels,\n            premultiplied: true\n          }\n        }).raw().toBuffer(function (err, data, info) {\n          if (err) throw err;\n          assert.strictEqual(256, info.width);\n          assert.strictEqual(192, info.height);\n          assert.strictEqual(4, info.channels);\n          assert.equal(data.compare(originalData), 0, 'output buffer matches unpremultiplied input buffer');\n          done();\n        });\n      });\n    });","file":"unit/raw.js","skipped":false,"dir":"test"},{"name":"JPEG to raw Stream and back again","suites":["Raw pixel data","Raw pixel input"],"updatePoint":{"line":155,"column":41,"index":4638},"line":155,"code":"    it('JPEG to raw Stream and back again', function (done) {\n      const width = 32;\n      const height = 24;\n      const writable = sharp({\n        raw: {\n          width,\n          height,\n          channels: 3\n        }\n      });\n      writable.jpeg().toBuffer(function (err, data, info) {\n        if (err) throw err;\n        assert.strictEqual('jpeg', info.format);\n        assert.strictEqual(32, info.width);\n        assert.strictEqual(24, info.height);\n        done();\n      });\n      sharp(fixtures.inputJpg).resize(width, height).raw().pipe(writable);\n    });","file":"unit/raw.js","skipped":false,"dir":"test"},{"name":"1 channel greyscale image","suites":["Raw pixel data","Output raw, uncompressed image data"],"updatePoint":{"line":176,"column":33,"index":5269},"line":176,"code":"    it('1 channel greyscale image', function (done) {\n      sharp(fixtures.inputJpg).greyscale().resize(32, 24).raw().toBuffer(function (err, data, info) {\n        if (err) throw err;\n        assert.strictEqual(32 * 24 * 1, info.size);\n        assert.strictEqual(data.length, info.size);\n        assert.strictEqual('raw', info.format);\n        assert.strictEqual(32, info.width);\n        assert.strictEqual(24, info.height);\n        assert.strictEqual(1, info.channels);\n        done();\n      });\n    });","file":"unit/raw.js","skipped":false,"dir":"test"},{"name":"3 channel colour image without transparency","suites":["Raw pixel data","Output raw, uncompressed image data"],"updatePoint":{"line":188,"column":51,"index":5792},"line":188,"code":"    it('3 channel colour image without transparency', function (done) {\n      sharp(fixtures.inputJpg).resize(32, 24).toFormat('raw').toBuffer(function (err, data, info) {\n        if (err) throw err;\n        assert.strictEqual(32 * 24 * 3, info.size);\n        assert.strictEqual(data.length, info.size);\n        assert.strictEqual('raw', info.format);\n        assert.strictEqual(32, info.width);\n        assert.strictEqual(24, info.height);\n        done();\n      });\n    });","file":"unit/raw.js","skipped":false,"dir":"test"},{"name":"4 channel colour image with transparency","suites":["Raw pixel data","Output raw, uncompressed image data"],"updatePoint":{"line":199,"column":48,"index":6264},"line":199,"code":"    it('4 channel colour image with transparency', function (done) {\n      sharp(fixtures.inputPngWithTransparency).resize(32, 24).toFormat(sharp.format.raw).toBuffer(function (err, data, info) {\n        if (err) throw err;\n        assert.strictEqual(32 * 24 * 4, info.size);\n        assert.strictEqual(data.length, info.size);\n        assert.strictEqual('raw', info.format);\n        assert.strictEqual(32, info.width);\n        assert.strictEqual(24, info.height);\n        done();\n      });\n    });","file":"unit/raw.js","skipped":false,"dir":"test"},{"name":"Extract A from RGBA","suites":["Raw pixel data","Output raw, uncompressed image data"],"updatePoint":{"line":210,"column":27,"index":6742},"line":210,"code":"    it('Extract A from RGBA', () => sharp(fixtures.inputPngWithTransparency).resize(32, 24).extractChannel(3).toColourspace('b-w').raw().toBuffer({\n      resolveWithObject: true\n    }).then(({\n      info\n    }) => {\n      assert.strictEqual('raw', info.format);\n      assert.strictEqual(1, info.channels);\n      assert.strictEqual(32 * 24, info.size);\n    }));","file":"unit/raw.js","skipped":false,"dir":"test"},{"name":"Invalid depth","suites":["Raw pixel data","Raw pixel depths"],"updatePoint":{"line":221,"column":21,"index":7148},"line":221,"code":"    it('Invalid depth', function () {\n      assert.throws(function () {\n        sharp(Buffer.alloc(3), {\n          raw: {\n            width: 1,\n            height: 1,\n            channels: 3\n          }\n        }).raw({\n          depth: 'zoinks'\n        });\n      });\n    });","file":"unit/raw.js","skipped":false,"dir":"test"},{"name":"applies a sepia filter using recomb","suites":["Recomb"],"updatePoint":{"line":8,"column":41,"index":289},"line":8,"code":"  it('applies a sepia filter using recomb', function (done) {\n    const output = fixtures.path('output.recomb-sepia.jpg');\n    sharp(fixtures.inputJpgWithLandscapeExif1).recomb(sepia).toFile(output, function (err, info) {\n      if (err) throw err;\n      assert.strictEqual('jpeg', info.format);\n      assert.strictEqual(600, info.width);\n      assert.strictEqual(450, info.height);\n      fixtures.assertMaxColourDistance(output, fixtures.expected('Landscape_1-recomb-sepia.jpg'), 17);\n      done();\n    });\n  });","file":"unit/recomb.js","skipped":false,"dir":"test"},{"name":"applies a sepia filter using recomb to an PNG with Alpha","suites":["Recomb"],"updatePoint":{"line":19,"column":62,"index":823},"line":19,"code":"  it('applies a sepia filter using recomb to an PNG with Alpha', function (done) {\n    const output = fixtures.path('output.recomb-sepia.png');\n    sharp(fixtures.inputPngAlphaPremultiplicationSmall).recomb(sepia).toFile(output, function (err, info) {\n      if (err) throw err;\n      assert.strictEqual('png', info.format);\n      assert.strictEqual(1024, info.width);\n      assert.strictEqual(768, info.height);\n      fixtures.assertMaxColourDistance(output, fixtures.expected('alpha-recomb-sepia.png'), 17);\n      done();\n    });\n  });","file":"unit/recomb.js","skipped":false,"dir":"test"},{"name":"recomb with a single channel input","suites":["Recomb"],"updatePoint":{"line":30,"column":40,"index":1338},"line":30,"code":"  it('recomb with a single channel input', async () => {\n    const {\n      info\n    } = await sharp(Buffer.alloc(64), {\n      raw: {\n        width: 8,\n        height: 8,\n        channels: 1\n      }\n    }).recomb(sepia).toBuffer({\n      resolveWithObject: true\n    });\n    assert.strictEqual(3, info.channels);\n  });","file":"unit/recomb.js","skipped":false,"dir":"test"},{"name":"applies a different sepia filter using recomb","suites":["Recomb"],"updatePoint":{"line":44,"column":51,"index":1665},"line":44,"code":"  it('applies a different sepia filter using recomb', function (done) {\n    const output = fixtures.path('output.recomb-sepia2.jpg');\n    sharp(fixtures.inputJpgWithLandscapeExif1).recomb([[0.393, 0.769, 0.189], [0.349, 0.686, 0.168], [0.272, 0.534, 0.131]]).toFile(output, function (err, info) {\n      if (err) throw err;\n      assert.strictEqual('jpeg', info.format);\n      assert.strictEqual(600, info.width);\n      assert.strictEqual(450, info.height);\n      fixtures.assertMaxColourDistance(output, fixtures.expected('Landscape_1-recomb-sepia2.jpg'), 17);\n      done();\n    });\n  });","file":"unit/recomb.js","skipped":false,"dir":"test"},{"name":"increases the saturation of the image","suites":["Recomb"],"updatePoint":{"line":55,"column":43,"index":2246},"line":55,"code":"  it('increases the saturation of the image', function (done) {\n    const saturationLevel = 1;\n    const output = fixtures.path('output.recomb-saturation.jpg');\n    sharp(fixtures.inputJpgWithLandscapeExif1).recomb([[saturationLevel + 1 - 0.2989, -0.587 * saturationLevel, -0.114 * saturationLevel], [-0.2989 * saturationLevel, saturationLevel + 1 - 0.587, -0.114 * saturationLevel], [-0.2989 * saturationLevel, -0.587 * saturationLevel, saturationLevel + 1 - 0.114]]).toFile(output, function (err, info) {\n      if (err) throw err;\n      assert.strictEqual('jpeg', info.format);\n      assert.strictEqual(600, info.width);\n      assert.strictEqual(450, info.height);\n      fixtures.assertMaxColourDistance(output, fixtures.expected('Landscape_1-recomb-saturation.jpg'), 37);\n      done();\n    });\n  });","file":"unit/recomb.js","skipped":false,"dir":"test"},{"name":"missing","suites":["Recomb","invalid matrix specification"],"updatePoint":{"line":68,"column":15,"index":3078},"line":68,"code":"    it('missing', function () {\n      assert.throws(function () {\n        sharp(fixtures.inputJpg).recomb();\n      });\n    });","file":"unit/recomb.js","skipped":false,"dir":"test"},{"name":"incorrect flat data","suites":["Recomb","invalid matrix specification"],"updatePoint":{"line":73,"column":27,"index":3217},"line":73,"code":"    it('incorrect flat data', function () {\n      assert.throws(function () {\n        sharp(fixtures.inputJpg).recomb([1, 2, 3, 4, 5, 6, 7, 8, 9]);\n      });\n    });","file":"unit/recomb.js","skipped":false,"dir":"test"},{"name":"incorrect sub size","suites":["Recomb","invalid matrix specification"],"updatePoint":{"line":78,"column":26,"index":3382},"line":78,"code":"    it('incorrect sub size', function () {\n      assert.throws(function () {\n        sharp(fixtures.inputJpg).recomb([[1, 2, 3, 4], [5, 6, 7, 8], [1, 2, 9, 6]]);\n      });\n    });","file":"unit/recomb.js","skipped":false,"dir":"test"},{"name":"incorrect top size","suites":["Recomb","invalid matrix specification"],"updatePoint":{"line":83,"column":26,"index":3562},"line":83,"code":"    it('incorrect top size', function () {\n      assert.throws(function () {\n        sharp(fixtures.inputJpg).recomb([[1, 2, 3, 4], [5, 6, 7, 8]]);\n      });\n    });","file":"unit/recomb.js","skipped":false,"dir":"test"},{"name":"Allows specifying the position as a string","suites":["Resize fit=contain"],"updatePoint":{"line":7,"column":48,"index":217},"line":7,"code":"  it('Allows specifying the position as a string', function (done) {\n    sharp(fixtures.inputJpg).resize(320, 240, {\n      fit: 'contain',\n      position: 'center'\n    }).png().toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(320, info.width);\n      assert.strictEqual(240, info.height);\n      fixtures.assertSimilar(fixtures.expected('embed-3-into-3.png'), data, done);\n    });\n  });","file":"unit/resize-contain.js","skipped":false,"dir":"test"},{"name":"JPEG within PNG, no alpha channel","suites":["Resize fit=contain"],"updatePoint":{"line":18,"column":39,"index":633},"line":18,"code":"  it('JPEG within PNG, no alpha channel', function (done) {\n    sharp(fixtures.inputJpg).resize(320, 240, {\n      fit: 'contain'\n    }).png().toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(true, data.length > 0);\n      assert.strictEqual('png', info.format);\n      assert.strictEqual(320, info.width);\n      assert.strictEqual(240, info.height);\n      assert.strictEqual(3, info.channels);\n      fixtures.assertSimilar(fixtures.expected('embed-3-into-3.png'), data, done);\n    });\n  });","file":"unit/resize-contain.js","skipped":false,"dir":"test"},{"name":"JPEG within WebP, to include alpha channel","suites":["Resize fit=contain"],"updatePoint":{"line":31,"column":48,"index":1171},"line":31,"code":"  it('JPEG within WebP, to include alpha channel', function (done) {\n    sharp(fixtures.inputJpg).resize(320, 240, {\n      fit: 'contain',\n      background: {\n        r: 0,\n        g: 0,\n        b: 0,\n        alpha: 0\n      }\n    }).webp().toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(true, data.length > 0);\n      assert.strictEqual('webp', info.format);\n      assert.strictEqual(320, info.width);\n      assert.strictEqual(240, info.height);\n      assert.strictEqual(4, info.channels);\n      fixtures.assertSimilar(fixtures.expected('embed-3-into-4.webp'), data, done);\n    });\n  });","file":"unit/resize-contain.js","skipped":false,"dir":"test"},{"name":"PNG with alpha channel","suites":["Resize fit=contain"],"updatePoint":{"line":50,"column":28,"index":1780},"line":50,"code":"  it('PNG with alpha channel', function (done) {\n    sharp(fixtures.inputPngWithTransparency).resize(50, 50, {\n      fit: 'contain'\n    }).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(true, data.length > 0);\n      assert.strictEqual('png', info.format);\n      assert.strictEqual(50, info.width);\n      assert.strictEqual(50, info.height);\n      assert.strictEqual(4, info.channels);\n      fixtures.assertSimilar(fixtures.expected('embed-4-into-4.png'), data, done);\n    });\n  });","file":"unit/resize-contain.js","skipped":false,"dir":"test"},{"name":"16-bit PNG with alpha channel","suites":["Resize fit=contain"],"updatePoint":{"line":63,"column":35,"index":2311},"line":63,"code":"  it('16-bit PNG with alpha channel', function (done) {\n    sharp(fixtures.inputPngWithTransparency16bit).resize(32, 16, {\n      fit: 'contain'\n    }).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(true, data.length > 0);\n      assert.strictEqual('png', info.format);\n      assert.strictEqual(32, info.width);\n      assert.strictEqual(16, info.height);\n      assert.strictEqual(4, info.channels);\n      fixtures.assertSimilar(fixtures.expected('embed-16bit.png'), data, done);\n    });\n  });","file":"unit/resize-contain.js","skipped":false,"dir":"test"},{"name":"16-bit PNG with alpha channel onto RGBA","suites":["Resize fit=contain"],"updatePoint":{"line":76,"column":45,"index":2854},"line":76,"code":"  it('16-bit PNG with alpha channel onto RGBA', function (done) {\n    sharp(fixtures.inputPngWithTransparency16bit).resize(32, 16, {\n      fit: 'contain',\n      background: {\n        r: 0,\n        g: 0,\n        b: 0,\n        alpha: 0\n      }\n    }).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(true, data.length > 0);\n      assert.strictEqual('png', info.format);\n      assert.strictEqual(32, info.width);\n      assert.strictEqual(16, info.height);\n      assert.strictEqual(4, info.channels);\n      fixtures.assertSimilar(fixtures.expected('embed-16bit-rgba.png'), data, done);\n    });\n  });","file":"unit/resize-contain.js","skipped":false,"dir":"test"},{"name":"PNG with 2 channels","suites":["Resize fit=contain"],"updatePoint":{"line":95,"column":25,"index":3470},"line":95,"code":"  it('PNG with 2 channels', function (done) {\n    sharp(fixtures.inputPngWithGreyAlpha).resize(32, 16, {\n      fit: 'contain',\n      background: {\n        r: 0,\n        g: 0,\n        b: 0,\n        alpha: 0\n      }\n    }).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(true, data.length > 0);\n      assert.strictEqual('png', info.format);\n      assert.strictEqual(32, info.width);\n      assert.strictEqual(16, info.height);\n      assert.strictEqual(4, info.channels);\n      fixtures.assertSimilar(fixtures.expected('embed-2channel.png'), data, done);\n    });\n  });","file":"unit/resize-contain.js","skipped":false,"dir":"test"},{"name":"TIFF in LAB colourspace onto RGBA background","suites":["Resize fit=contain"],"updatePoint":{"line":114,"column":50,"index":4101},"line":114,"code":"  it('TIFF in LAB colourspace onto RGBA background', function (done) {\n    sharp(fixtures.inputTiffCielab).resize(64, 128, {\n      fit: 'contain',\n      background: {\n        r: 255,\n        g: 102,\n        b: 0,\n        alpha: 0.5\n      }\n    }).png().toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(true, data.length > 0);\n      assert.strictEqual('png', info.format);\n      assert.strictEqual(64, info.width);\n      assert.strictEqual(128, info.height);\n      assert.strictEqual(4, info.channels);\n      fixtures.assertSimilar(fixtures.expected('embed-lab-into-rgba.png'), data, done);\n    });\n  });","file":"unit/resize-contain.js","skipped":false,"dir":"test"},{"name":"Enlarge","suites":["Resize fit=contain"],"updatePoint":{"line":133,"column":13,"index":4708},"line":133,"code":"  it('Enlarge', function (done) {\n    sharp(fixtures.inputPngWithOneColor).resize(320, 240, {\n      fit: 'contain'\n    }).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(true, data.length > 0);\n      assert.strictEqual('png', info.format);\n      assert.strictEqual(320, info.width);\n      assert.strictEqual(240, info.height);\n      assert.strictEqual(3, info.channels);\n      fixtures.assertSimilar(fixtures.expected('embed-enlarge.png'), data, done);\n    });\n  });","file":"unit/resize-contain.js","skipped":false,"dir":"test"},{"name":"Invalid position values should fail","suites":["Resize fit=contain"],"updatePoint":{"line":146,"column":41,"index":5244},"line":146,"code":"  it('Invalid position values should fail', function () {\n    [-1, 8.1, 9, 1000000, false, 'vallejo'].forEach(function (position) {\n      assert.throws(function () {\n        sharp().resize(null, null, {\n          fit: 'contain',\n          position\n        });\n      });\n    });\n  });","file":"unit/resize-contain.js","skipped":false,"dir":"test"},{"name":"Position horizontal top","suites":["Resize fit=contain"],"updatePoint":{"line":156,"column":29,"index":5516},"line":156,"code":"  it('Position horizontal top', function (done) {\n    sharp(fixtures.inputPngEmbed).resize(200, 100, {\n      fit: sharp.fit.contain,\n      background: {\n        r: 0,\n        g: 0,\n        b: 0,\n        alpha: 0\n      },\n      position: 'top'\n    }).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(true, data.length > 0);\n      assert.strictEqual('png', info.format);\n      assert.strictEqual(200, info.width);\n      assert.strictEqual(100, info.height);\n      assert.strictEqual(4, info.channels);\n      fixtures.assertSimilar(fixtures.expected('./embedgravitybird/a2-n.png'), data, done);\n    });\n  });","file":"unit/resize-contain.js","skipped":false,"dir":"test"},{"name":"Position horizontal right top","suites":["Resize fit=contain"],"updatePoint":{"line":176,"column":35,"index":6168},"line":176,"code":"  it('Position horizontal right top', function (done) {\n    sharp(fixtures.inputPngEmbed).resize(200, 100, {\n      fit: sharp.fit.contain,\n      background: {\n        r: 0,\n        g: 0,\n        b: 0,\n        alpha: 0\n      },\n      position: 'right top'\n    }).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(true, data.length > 0);\n      assert.strictEqual('png', info.format);\n      assert.strictEqual(200, info.width);\n      assert.strictEqual(100, info.height);\n      assert.strictEqual(4, info.channels);\n      fixtures.assertSimilar(fixtures.expected('./embedgravitybird/a3-ne.png'), data, done);\n    });\n  });","file":"unit/resize-contain.js","skipped":false,"dir":"test"},{"name":"Position horizontal right","suites":["Resize fit=contain"],"updatePoint":{"line":196,"column":31,"index":6823},"line":196,"code":"  it('Position horizontal right', function (done) {\n    sharp(fixtures.inputPngEmbed).resize(200, 100, {\n      fit: sharp.fit.contain,\n      background: {\n        r: 0,\n        g: 0,\n        b: 0,\n        alpha: 0\n      },\n      position: 'right'\n    }).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(true, data.length > 0);\n      assert.strictEqual('png', info.format);\n      assert.strictEqual(200, info.width);\n      assert.strictEqual(100, info.height);\n      assert.strictEqual(4, info.channels);\n      fixtures.assertSimilar(fixtures.expected('./embedgravitybird/a4-e.png'), data, done);\n    });\n  });","file":"unit/resize-contain.js","skipped":false,"dir":"test"},{"name":"Position horizontal right bottom","suites":["Resize fit=contain"],"updatePoint":{"line":216,"column":38,"index":7480},"line":216,"code":"  it('Position horizontal right bottom', function (done) {\n    sharp(fixtures.inputPngEmbed).resize(200, 100, {\n      fit: sharp.fit.contain,\n      background: {\n        r: 0,\n        g: 0,\n        b: 0,\n        alpha: 0\n      },\n      position: 'right bottom'\n    }).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(true, data.length > 0);\n      assert.strictEqual('png', info.format);\n      assert.strictEqual(200, info.width);\n      assert.strictEqual(100, info.height);\n      assert.strictEqual(4, info.channels);\n      fixtures.assertSimilar(fixtures.expected('./embedgravitybird/a5-se.png'), data, done);\n    });\n  });","file":"unit/resize-contain.js","skipped":false,"dir":"test"},{"name":"Position horizontal bottom","suites":["Resize fit=contain"],"updatePoint":{"line":236,"column":32,"index":8139},"line":236,"code":"  it('Position horizontal bottom', function (done) {\n    sharp(fixtures.inputPngEmbed).resize(200, 100, {\n      fit: sharp.fit.contain,\n      background: {\n        r: 0,\n        g: 0,\n        b: 0,\n        alpha: 0\n      },\n      position: 'bottom'\n    }).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(true, data.length > 0);\n      assert.strictEqual('png', info.format);\n      assert.strictEqual(200, info.width);\n      assert.strictEqual(100, info.height);\n      assert.strictEqual(4, info.channels);\n      fixtures.assertSimilar(fixtures.expected('./embedgravitybird/a6-s.png'), data, done);\n    });\n  });","file":"unit/resize-contain.js","skipped":false,"dir":"test"},{"name":"Position horizontal left bottom","suites":["Resize fit=contain"],"updatePoint":{"line":256,"column":37,"index":8796},"line":256,"code":"  it('Position horizontal left bottom', function (done) {\n    sharp(fixtures.inputPngEmbed).resize(200, 100, {\n      fit: sharp.fit.contain,\n      background: {\n        r: 0,\n        g: 0,\n        b: 0,\n        alpha: 0\n      },\n      position: 'left bottom'\n    }).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(true, data.length > 0);\n      assert.strictEqual('png', info.format);\n      assert.strictEqual(200, info.width);\n      assert.strictEqual(100, info.height);\n      assert.strictEqual(4, info.channels);\n      fixtures.assertSimilar(fixtures.expected('./embedgravitybird/a7-sw.png'), data, done);\n    });\n  });","file":"unit/resize-contain.js","skipped":false,"dir":"test"},{"name":"Position horizontal left","suites":["Resize fit=contain"],"updatePoint":{"line":276,"column":30,"index":9452},"line":276,"code":"  it('Position horizontal left', function (done) {\n    sharp(fixtures.inputPngEmbed).resize(200, 100, {\n      fit: sharp.fit.contain,\n      background: {\n        r: 0,\n        g: 0,\n        b: 0,\n        alpha: 0\n      },\n      position: 'left'\n    }).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(true, data.length > 0);\n      assert.strictEqual('png', info.format);\n      assert.strictEqual(200, info.width);\n      assert.strictEqual(100, info.height);\n      assert.strictEqual(4, info.channels);\n      fixtures.assertSimilar(fixtures.expected('./embedgravitybird/a8-w.png'), data, done);\n    });\n  });","file":"unit/resize-contain.js","skipped":false,"dir":"test"},{"name":"Position horizontal left top","suites":["Resize fit=contain"],"updatePoint":{"line":296,"column":34,"index":10104},"line":296,"code":"  it('Position horizontal left top', function (done) {\n    sharp(fixtures.inputPngEmbed).resize(200, 100, {\n      fit: sharp.fit.contain,\n      background: {\n        r: 0,\n        g: 0,\n        b: 0,\n        alpha: 0\n      },\n      position: 'left top'\n    }).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(true, data.length > 0);\n      assert.strictEqual('png', info.format);\n      assert.strictEqual(200, info.width);\n      assert.strictEqual(100, info.height);\n      assert.strictEqual(4, info.channels);\n      fixtures.assertSimilar(fixtures.expected('./embedgravitybird/a1-nw.png'), data, done);\n    });\n  });","file":"unit/resize-contain.js","skipped":false,"dir":"test"},{"name":"Position horizontal north","suites":["Resize fit=contain"],"updatePoint":{"line":316,"column":31,"index":10758},"line":316,"code":"  it('Position horizontal north', function (done) {\n    sharp(fixtures.inputPngEmbed).resize(200, 100, {\n      fit: sharp.fit.contain,\n      background: {\n        r: 0,\n        g: 0,\n        b: 0,\n        alpha: 0\n      },\n      position: sharp.gravity.north\n    }).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(true, data.length > 0);\n      assert.strictEqual('png', info.format);\n      assert.strictEqual(200, info.width);\n      assert.strictEqual(100, info.height);\n      assert.strictEqual(4, info.channels);\n      fixtures.assertSimilar(fixtures.expected('./embedgravitybird/a2-n.png'), data, done);\n    });\n  });","file":"unit/resize-contain.js","skipped":false,"dir":"test"},{"name":"Position horizontal northeast","suites":["Resize fit=contain"],"updatePoint":{"line":336,"column":35,"index":11424},"line":336,"code":"  it('Position horizontal northeast', function (done) {\n    sharp(fixtures.inputPngEmbed).resize(200, 100, {\n      fit: sharp.fit.contain,\n      background: {\n        r: 0,\n        g: 0,\n        b: 0,\n        alpha: 0\n      },\n      position: sharp.gravity.northeast\n    }).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(true, data.length > 0);\n      assert.strictEqual('png', info.format);\n      assert.strictEqual(200, info.width);\n      assert.strictEqual(100, info.height);\n      assert.strictEqual(4, info.channels);\n      fixtures.assertSimilar(fixtures.expected('./embedgravitybird/a3-ne.png'), data, done);\n    });\n  });","file":"unit/resize-contain.js","skipped":false,"dir":"test"},{"name":"Position horizontal east","suites":["Resize fit=contain"],"updatePoint":{"line":356,"column":30,"index":12090},"line":356,"code":"  it('Position horizontal east', function (done) {\n    sharp(fixtures.inputPngEmbed).resize(200, 100, {\n      fit: sharp.fit.contain,\n      background: {\n        r: 0,\n        g: 0,\n        b: 0,\n        alpha: 0\n      },\n      position: sharp.gravity.east\n    }).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(true, data.length > 0);\n      assert.strictEqual('png', info.format);\n      assert.strictEqual(200, info.width);\n      assert.strictEqual(100, info.height);\n      assert.strictEqual(4, info.channels);\n      fixtures.assertSimilar(fixtures.expected('./embedgravitybird/a4-e.png'), data, done);\n    });\n  });","file":"unit/resize-contain.js","skipped":false,"dir":"test"},{"name":"Position horizontal southeast","suites":["Resize fit=contain"],"updatePoint":{"line":376,"column":35,"index":12755},"line":376,"code":"  it('Position horizontal southeast', function (done) {\n    sharp(fixtures.inputPngEmbed).resize(200, 100, {\n      fit: sharp.fit.contain,\n      background: {\n        r: 0,\n        g: 0,\n        b: 0,\n        alpha: 0\n      },\n      position: sharp.gravity.southeast\n    }).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(true, data.length > 0);\n      assert.strictEqual('png', info.format);\n      assert.strictEqual(200, info.width);\n      assert.strictEqual(100, info.height);\n      assert.strictEqual(4, info.channels);\n      fixtures.assertSimilar(fixtures.expected('./embedgravitybird/a5-se.png'), data, done);\n    });\n  });","file":"unit/resize-contain.js","skipped":false,"dir":"test"},{"name":"Position horizontal south","suites":["Resize fit=contain"],"updatePoint":{"line":396,"column":31,"index":13422},"line":396,"code":"  it('Position horizontal south', function (done) {\n    sharp(fixtures.inputPngEmbed).resize(200, 100, {\n      fit: sharp.fit.contain,\n      background: {\n        r: 0,\n        g: 0,\n        b: 0,\n        alpha: 0\n      },\n      position: sharp.gravity.south\n    }).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(true, data.length > 0);\n      assert.strictEqual('png', info.format);\n      assert.strictEqual(200, info.width);\n      assert.strictEqual(100, info.height);\n      assert.strictEqual(4, info.channels);\n      fixtures.assertSimilar(fixtures.expected('./embedgravitybird/a6-s.png'), data, done);\n    });\n  });","file":"unit/resize-contain.js","skipped":false,"dir":"test"},{"name":"Position horizontal southwest","suites":["Resize fit=contain"],"updatePoint":{"line":416,"column":35,"index":14088},"line":416,"code":"  it('Position horizontal southwest', function (done) {\n    sharp(fixtures.inputPngEmbed).resize(200, 100, {\n      fit: sharp.fit.contain,\n      background: {\n        r: 0,\n        g: 0,\n        b: 0,\n        alpha: 0\n      },\n      position: sharp.gravity.southwest\n    }).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(true, data.length > 0);\n      assert.strictEqual('png', info.format);\n      assert.strictEqual(200, info.width);\n      assert.strictEqual(100, info.height);\n      assert.strictEqual(4, info.channels);\n      fixtures.assertSimilar(fixtures.expected('./embedgravitybird/a7-sw.png'), data, done);\n    });\n  });","file":"unit/resize-contain.js","skipped":false,"dir":"test"},{"name":"Position horizontal west","suites":["Resize fit=contain"],"updatePoint":{"line":436,"column":30,"index":14754},"line":436,"code":"  it('Position horizontal west', function (done) {\n    sharp(fixtures.inputPngEmbed).resize(200, 100, {\n      fit: sharp.fit.contain,\n      background: {\n        r: 0,\n        g: 0,\n        b: 0,\n        alpha: 0\n      },\n      position: sharp.gravity.west\n    }).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(true, data.length > 0);\n      assert.strictEqual('png', info.format);\n      assert.strictEqual(200, info.width);\n      assert.strictEqual(100, info.height);\n      assert.strictEqual(4, info.channels);\n      fixtures.assertSimilar(fixtures.expected('./embedgravitybird/a8-w.png'), data, done);\n    });\n  });","file":"unit/resize-contain.js","skipped":false,"dir":"test"},{"name":"Position horizontal northwest","suites":["Resize fit=contain"],"updatePoint":{"line":456,"column":35,"index":15419},"line":456,"code":"  it('Position horizontal northwest', function (done) {\n    sharp(fixtures.inputPngEmbed).resize(200, 100, {\n      fit: sharp.fit.contain,\n      background: {\n        r: 0,\n        g: 0,\n        b: 0,\n        alpha: 0\n      },\n      position: sharp.gravity.northwest\n    }).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(true, data.length > 0);\n      assert.strictEqual('png', info.format);\n      assert.strictEqual(200, info.width);\n      assert.strictEqual(100, info.height);\n      assert.strictEqual(4, info.channels);\n      fixtures.assertSimilar(fixtures.expected('./embedgravitybird/a1-nw.png'), data, done);\n    });\n  });","file":"unit/resize-contain.js","skipped":false,"dir":"test"},{"name":"Position horizontal center","suites":["Resize fit=contain"],"updatePoint":{"line":476,"column":32,"index":16087},"line":476,"code":"  it('Position horizontal center', function (done) {\n    sharp(fixtures.inputPngEmbed).resize(200, 100, {\n      fit: sharp.fit.contain,\n      background: {\n        r: 0,\n        g: 0,\n        b: 0,\n        alpha: 0\n      },\n      position: sharp.gravity.center\n    }).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(true, data.length > 0);\n      assert.strictEqual('png', info.format);\n      assert.strictEqual(200, info.width);\n      assert.strictEqual(100, info.height);\n      assert.strictEqual(4, info.channels);\n      fixtures.assertSimilar(fixtures.expected('./embedgravitybird/a9-c.png'), data, done);\n    });\n  });","file":"unit/resize-contain.js","skipped":false,"dir":"test"},{"name":"Position vertical top","suites":["Resize fit=contain"],"updatePoint":{"line":496,"column":27,"index":16746},"line":496,"code":"  it('Position vertical top', function (done) {\n    sharp(fixtures.inputPngEmbed).resize(200, 200, {\n      fit: sharp.fit.contain,\n      background: {\n        r: 0,\n        g: 0,\n        b: 0,\n        alpha: 0\n      },\n      position: 'top'\n    }).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(true, data.length > 0);\n      assert.strictEqual('png', info.format);\n      assert.strictEqual(200, info.width);\n      assert.strictEqual(200, info.height);\n      assert.strictEqual(4, info.channels);\n      fixtures.assertSimilar(fixtures.expected('./embedgravitybird/2-n.png'), data, done);\n    });\n  });","file":"unit/resize-contain.js","skipped":false,"dir":"test"},{"name":"Position vertical right top","suites":["Resize fit=contain"],"updatePoint":{"line":516,"column":33,"index":17395},"line":516,"code":"  it('Position vertical right top', function (done) {\n    sharp(fixtures.inputPngEmbed).resize(200, 200, {\n      fit: sharp.fit.contain,\n      background: {\n        r: 0,\n        g: 0,\n        b: 0,\n        alpha: 0\n      },\n      position: 'right top'\n    }).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(true, data.length > 0);\n      assert.strictEqual('png', info.format);\n      assert.strictEqual(200, info.width);\n      assert.strictEqual(200, info.height);\n      assert.strictEqual(4, info.channels);\n      fixtures.assertSimilar(fixtures.expected('./embedgravitybird/3-ne.png'), data, done);\n    });\n  });","file":"unit/resize-contain.js","skipped":false,"dir":"test"},{"name":"Position vertical right","suites":["Resize fit=contain"],"updatePoint":{"line":536,"column":29,"index":18047},"line":536,"code":"  it('Position vertical right', function (done) {\n    sharp(fixtures.inputPngEmbed).resize(200, 200, {\n      fit: sharp.fit.contain,\n      background: {\n        r: 0,\n        g: 0,\n        b: 0,\n        alpha: 0\n      },\n      position: 'right'\n    }).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(true, data.length > 0);\n      assert.strictEqual('png', info.format);\n      assert.strictEqual(200, info.width);\n      assert.strictEqual(200, info.height);\n      assert.strictEqual(4, info.channels);\n      fixtures.assertSimilar(fixtures.expected('./embedgravitybird/4-e.png'), data, done);\n    });\n  });","file":"unit/resize-contain.js","skipped":false,"dir":"test"},{"name":"Position vertical right bottom","suites":["Resize fit=contain"],"updatePoint":{"line":556,"column":36,"index":18701},"line":556,"code":"  it('Position vertical right bottom', function (done) {\n    sharp(fixtures.inputPngEmbed).resize(200, 200, {\n      fit: sharp.fit.contain,\n      background: {\n        r: 0,\n        g: 0,\n        b: 0,\n        alpha: 0\n      },\n      position: 'right bottom'\n    }).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(true, data.length > 0);\n      assert.strictEqual('png', info.format);\n      assert.strictEqual(200, info.width);\n      assert.strictEqual(200, info.height);\n      assert.strictEqual(4, info.channels);\n      fixtures.assertSimilar(fixtures.expected('./embedgravitybird/5-se.png'), data, done);\n    });\n  });","file":"unit/resize-contain.js","skipped":false,"dir":"test"},{"name":"Position vertical bottom","suites":["Resize fit=contain"],"updatePoint":{"line":576,"column":30,"index":19357},"line":576,"code":"  it('Position vertical bottom', function (done) {\n    sharp(fixtures.inputPngEmbed).resize(200, 200, {\n      fit: sharp.fit.contain,\n      background: {\n        r: 0,\n        g: 0,\n        b: 0,\n        alpha: 0\n      },\n      position: 'bottom'\n    }).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(true, data.length > 0);\n      assert.strictEqual('png', info.format);\n      assert.strictEqual(200, info.width);\n      assert.strictEqual(200, info.height);\n      assert.strictEqual(4, info.channels);\n      fixtures.assertSimilar(fixtures.expected('./embedgravitybird/6-s.png'), data, done);\n    });\n  });","file":"unit/resize-contain.js","skipped":false,"dir":"test"},{"name":"Position vertical left bottom","suites":["Resize fit=contain"],"updatePoint":{"line":596,"column":35,"index":20011},"line":596,"code":"  it('Position vertical left bottom', function (done) {\n    sharp(fixtures.inputPngEmbed).resize(200, 200, {\n      fit: sharp.fit.contain,\n      background: {\n        r: 0,\n        g: 0,\n        b: 0,\n        alpha: 0\n      },\n      position: 'left bottom'\n    }).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(true, data.length > 0);\n      assert.strictEqual('png', info.format);\n      assert.strictEqual(200, info.width);\n      assert.strictEqual(200, info.height);\n      assert.strictEqual(4, info.channels);\n      fixtures.assertSimilar(fixtures.expected('./embedgravitybird/7-sw.png'), data, done);\n    });\n  });","file":"unit/resize-contain.js","skipped":false,"dir":"test"},{"name":"Position vertical left","suites":["Resize fit=contain"],"updatePoint":{"line":616,"column":28,"index":20664},"line":616,"code":"  it('Position vertical left', function (done) {\n    sharp(fixtures.inputPngEmbed).resize(200, 200, {\n      fit: sharp.fit.contain,\n      background: {\n        r: 0,\n        g: 0,\n        b: 0,\n        alpha: 0\n      },\n      position: 'left'\n    }).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(true, data.length > 0);\n      assert.strictEqual('png', info.format);\n      assert.strictEqual(200, info.width);\n      assert.strictEqual(200, info.height);\n      assert.strictEqual(4, info.channels);\n      fixtures.assertSimilar(fixtures.expected('./embedgravitybird/8-w.png'), data, done);\n    });\n  });","file":"unit/resize-contain.js","skipped":false,"dir":"test"},{"name":"Position vertical left top","suites":["Resize fit=contain"],"updatePoint":{"line":636,"column":32,"index":21313},"line":636,"code":"  it('Position vertical left top', function (done) {\n    sharp(fixtures.inputPngEmbed).resize(200, 200, {\n      fit: sharp.fit.contain,\n      background: {\n        r: 0,\n        g: 0,\n        b: 0,\n        alpha: 0\n      },\n      position: 'left top'\n    }).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(true, data.length > 0);\n      assert.strictEqual('png', info.format);\n      assert.strictEqual(200, info.width);\n      assert.strictEqual(200, info.height);\n      assert.strictEqual(4, info.channels);\n      fixtures.assertSimilar(fixtures.expected('./embedgravitybird/1-nw.png'), data, done);\n    });\n  });","file":"unit/resize-contain.js","skipped":false,"dir":"test"},{"name":"Position vertical north","suites":["Resize fit=contain"],"updatePoint":{"line":656,"column":29,"index":21964},"line":656,"code":"  it('Position vertical north', function (done) {\n    sharp(fixtures.inputPngEmbed).resize(200, 200, {\n      fit: sharp.fit.contain,\n      background: {\n        r: 0,\n        g: 0,\n        b: 0,\n        alpha: 0\n      },\n      position: sharp.gravity.north\n    }).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(true, data.length > 0);\n      assert.strictEqual('png', info.format);\n      assert.strictEqual(200, info.width);\n      assert.strictEqual(200, info.height);\n      assert.strictEqual(4, info.channels);\n      fixtures.assertSimilar(fixtures.expected('./embedgravitybird/2-n.png'), data, done);\n    });\n  });","file":"unit/resize-contain.js","skipped":false,"dir":"test"},{"name":"Position vertical northeast","suites":["Resize fit=contain"],"updatePoint":{"line":676,"column":33,"index":22627},"line":676,"code":"  it('Position vertical northeast', function (done) {\n    sharp(fixtures.inputPngEmbed).resize(200, 200, {\n      fit: sharp.fit.contain,\n      background: {\n        r: 0,\n        g: 0,\n        b: 0,\n        alpha: 0\n      },\n      position: sharp.gravity.northeast\n    }).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(true, data.length > 0);\n      assert.strictEqual('png', info.format);\n      assert.strictEqual(200, info.width);\n      assert.strictEqual(200, info.height);\n      assert.strictEqual(4, info.channels);\n      fixtures.assertSimilar(fixtures.expected('./embedgravitybird/3-ne.png'), data, done);\n    });\n  });","file":"unit/resize-contain.js","skipped":false,"dir":"test"},{"name":"Position vertical east","suites":["Resize fit=contain"],"updatePoint":{"line":696,"column":28,"index":23290},"line":696,"code":"  it('Position vertical east', function (done) {\n    sharp(fixtures.inputPngEmbed).resize(200, 200, {\n      fit: sharp.fit.contain,\n      background: {\n        r: 0,\n        g: 0,\n        b: 0,\n        alpha: 0\n      },\n      position: sharp.gravity.east\n    }).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(true, data.length > 0);\n      assert.strictEqual('png', info.format);\n      assert.strictEqual(200, info.width);\n      assert.strictEqual(200, info.height);\n      assert.strictEqual(4, info.channels);\n      fixtures.assertSimilar(fixtures.expected('./embedgravitybird/4-e.png'), data, done);\n    });\n  });","file":"unit/resize-contain.js","skipped":false,"dir":"test"},{"name":"Position vertical southeast","suites":["Resize fit=contain"],"updatePoint":{"line":716,"column":33,"index":23952},"line":716,"code":"  it('Position vertical southeast', function (done) {\n    sharp(fixtures.inputPngEmbed).resize(200, 200, {\n      fit: sharp.fit.contain,\n      background: {\n        r: 0,\n        g: 0,\n        b: 0,\n        alpha: 0\n      },\n      position: sharp.gravity.southeast\n    }).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(true, data.length > 0);\n      assert.strictEqual('png', info.format);\n      assert.strictEqual(200, info.width);\n      assert.strictEqual(200, info.height);\n      assert.strictEqual(4, info.channels);\n      fixtures.assertSimilar(fixtures.expected('./embedgravitybird/5-se.png'), data, done);\n    });\n  });","file":"unit/resize-contain.js","skipped":false,"dir":"test"},{"name":"Position vertical south","suites":["Resize fit=contain"],"updatePoint":{"line":736,"column":29,"index":24616},"line":736,"code":"  it('Position vertical south', function (done) {\n    sharp(fixtures.inputPngEmbed).resize(200, 200, {\n      fit: sharp.fit.contain,\n      background: {\n        r: 0,\n        g: 0,\n        b: 0,\n        alpha: 0\n      },\n      position: sharp.gravity.south\n    }).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(true, data.length > 0);\n      assert.strictEqual('png', info.format);\n      assert.strictEqual(200, info.width);\n      assert.strictEqual(200, info.height);\n      assert.strictEqual(4, info.channels);\n      fixtures.assertSimilar(fixtures.expected('./embedgravitybird/6-s.png'), data, done);\n    });\n  });","file":"unit/resize-contain.js","skipped":false,"dir":"test"},{"name":"Position vertical southwest","suites":["Resize fit=contain"],"updatePoint":{"line":756,"column":33,"index":25279},"line":756,"code":"  it('Position vertical southwest', function (done) {\n    sharp(fixtures.inputPngEmbed).resize(200, 200, {\n      fit: sharp.fit.contain,\n      background: {\n        r: 0,\n        g: 0,\n        b: 0,\n        alpha: 0\n      },\n      position: sharp.gravity.southwest\n    }).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(true, data.length > 0);\n      assert.strictEqual('png', info.format);\n      assert.strictEqual(200, info.width);\n      assert.strictEqual(200, info.height);\n      assert.strictEqual(4, info.channels);\n      fixtures.assertSimilar(fixtures.expected('./embedgravitybird/7-sw.png'), data, done);\n    });\n  });","file":"unit/resize-contain.js","skipped":false,"dir":"test"},{"name":"Position vertical west","suites":["Resize fit=contain"],"updatePoint":{"line":776,"column":28,"index":25942},"line":776,"code":"  it('Position vertical west', function (done) {\n    sharp(fixtures.inputPngEmbed).resize(200, 200, {\n      fit: sharp.fit.contain,\n      background: {\n        r: 0,\n        g: 0,\n        b: 0,\n        alpha: 0\n      },\n      position: sharp.gravity.west\n    }).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(true, data.length > 0);\n      assert.strictEqual('png', info.format);\n      assert.strictEqual(200, info.width);\n      assert.strictEqual(200, info.height);\n      assert.strictEqual(4, info.channels);\n      fixtures.assertSimilar(fixtures.expected('./embedgravitybird/8-w.png'), data, done);\n    });\n  });","file":"unit/resize-contain.js","skipped":false,"dir":"test"},{"name":"Position vertical northwest","suites":["Resize fit=contain"],"updatePoint":{"line":796,"column":33,"index":26604},"line":796,"code":"  it('Position vertical northwest', function (done) {\n    sharp(fixtures.inputPngEmbed).resize(200, 200, {\n      fit: sharp.fit.contain,\n      background: {\n        r: 0,\n        g: 0,\n        b: 0,\n        alpha: 0\n      },\n      position: sharp.gravity.northwest\n    }).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(true, data.length > 0);\n      assert.strictEqual('png', info.format);\n      assert.strictEqual(200, info.width);\n      assert.strictEqual(200, info.height);\n      assert.strictEqual(4, info.channels);\n      fixtures.assertSimilar(fixtures.expected('./embedgravitybird/1-nw.png'), data, done);\n    });\n  });","file":"unit/resize-contain.js","skipped":false,"dir":"test"},{"name":"Position vertical center","suites":["Resize fit=contain"],"updatePoint":{"line":816,"column":30,"index":27269},"line":816,"code":"  it('Position vertical center', function (done) {\n    sharp(fixtures.inputPngEmbed).resize(200, 200, {\n      fit: sharp.fit.contain,\n      background: {\n        r: 0,\n        g: 0,\n        b: 0,\n        alpha: 0\n      },\n      position: sharp.gravity.center\n    }).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(true, data.length > 0);\n      assert.strictEqual('png', info.format);\n      assert.strictEqual(200, info.width);\n      assert.strictEqual(200, info.height);\n      assert.strictEqual(4, info.channels);\n      fixtures.assertSimilar(fixtures.expected('./embedgravitybird/9-c.png'), data, done);\n    });\n  });","file":"unit/resize-contain.js","skipped":false,"dir":"test"},{"name":"Allows specifying the gravity as a string","suites":["Resize fit=cover"],"updatePoint":{"line":186,"column":47,"index":4660},"line":186,"code":"  it('Allows specifying the gravity as a string', function (done) {\n    sharp(fixtures.inputJpg).resize(80, 320, {\n      fit: sharp.fit.cover,\n      position: 'east'\n    }).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(80, info.width);\n      assert.strictEqual(320, info.height);\n      fixtures.assertSimilar(fixtures.expected('gravity-east.jpg'), data, done);\n    });\n  });","file":"unit/resize-cover.js","skipped":false,"dir":"test"},{"name":"Invalid position values fail","suites":["Resize fit=cover"],"updatePoint":{"line":197,"column":34,"index":5065},"line":197,"code":"  it('Invalid position values fail', function () {\n    assert.throws(function () {\n      sharp().resize(null, null, {\n        fit: 'cover',\n        position: 9\n      });\n    }, /Expected valid position\\/gravity\\/strategy for position but received 9 of type number/);\n    assert.throws(function () {\n      sharp().resize(null, null, {\n        fit: 'cover',\n        position: 1.1\n      });\n    }, /Expected valid position\\/gravity\\/strategy for position but received 1.1 of type number/);\n    assert.throws(function () {\n      sharp().resize(null, null, {\n        fit: 'cover',\n        position: -1\n      });\n    }, /Expected valid position\\/gravity\\/strategy for position but received -1 of type number/);\n    assert.throws(function () {\n      sharp().resize(null, null, {\n        fit: 'cover',\n        position: 'zoinks'\n      }).crop();\n    }, /Expected valid position\\/gravity\\/strategy for position but received zoinks of type string/);\n  });","file":"unit/resize-cover.js","skipped":false,"dir":"test"},{"name":"Uses default value when none specified","suites":["Resize fit=cover"],"updatePoint":{"line":223,"column":44,"index":6021},"line":223,"code":"  it('Uses default value when none specified', function () {\n    assert.doesNotThrow(function () {\n      sharp().resize(null, null, {\n        fit: 'cover'\n      });\n    });\n  });","file":"unit/resize-cover.js","skipped":false,"dir":"test"},{"name":"Skip crop when post-resize dimensions are at target","suites":["Resize fit=cover"],"updatePoint":{"line":230,"column":57,"index":6213},"line":230,"code":"  it('Skip crop when post-resize dimensions are at target', function () {\n    return sharp(fixtures.inputJpg).resize(1600, 1200).toBuffer().then(function (input) {\n      return sharp(input).resize(1110, null, {\n        fit: sharp.fit.cover,\n        position: sharp.strategy.attention\n      }).toBuffer({\n        resolveWithObject: true\n      }).then(function (result) {\n        assert.strictEqual(1110, result.info.width);\n        assert.strictEqual(832, result.info.height);\n        assert.strictEqual(undefined, result.info.cropOffsetLeft);\n        assert.strictEqual(undefined, result.info.cropOffsetTop);\n      });\n    });\n  });","file":"unit/resize-cover.js","skipped":false,"dir":"test"},{"name":"JPEG","suites":["Resize fit=cover","Entropy-based strategy"],"updatePoint":{"line":246,"column":12,"index":6852},"line":246,"code":"    it('JPEG', function (done) {\n      sharp(fixtures.inputJpg).resize(80, 320, {\n        fit: 'cover',\n        position: sharp.strategy.entropy\n      }).toBuffer(function (err, data, info) {\n        if (err) throw err;\n        assert.strictEqual('jpeg', info.format);\n        assert.strictEqual(3, info.channels);\n        assert.strictEqual(80, info.width);\n        assert.strictEqual(320, info.height);\n        assert.strictEqual(-117, info.cropOffsetLeft);\n        assert.strictEqual(0, info.cropOffsetTop);\n        fixtures.assertSimilar(fixtures.expected('crop-strategy-entropy.jpg'), data, done);\n      });\n    });","file":"unit/resize-cover.js","skipped":false,"dir":"test"},{"name":"PNG","suites":["Resize fit=cover","Entropy-based strategy"],"updatePoint":{"line":261,"column":11,"index":7472},"line":261,"code":"    it('PNG', function (done) {\n      sharp(fixtures.inputPngWithTransparency).resize(320, 80, {\n        fit: 'cover',\n        position: sharp.strategy.entropy\n      }).toBuffer(function (err, data, info) {\n        if (err) throw err;\n        assert.strictEqual('png', info.format);\n        assert.strictEqual(4, info.channels);\n        assert.strictEqual(320, info.width);\n        assert.strictEqual(80, info.height);\n        assert.strictEqual(0, info.cropOffsetLeft);\n        assert.strictEqual(-80, info.cropOffsetTop);\n        fixtures.assertSimilar(fixtures.expected('crop-strategy.png'), data, done);\n      });\n    });","file":"unit/resize-cover.js","skipped":false,"dir":"test"},{"name":"supports the strategy passed as a string","suites":["Resize fit=cover","Entropy-based strategy"],"updatePoint":{"line":276,"column":48,"index":8135},"line":276,"code":"    it('supports the strategy passed as a string', function (done) {\n      sharp(fixtures.inputPngWithTransparency).resize(320, 80, {\n        fit: 'cover',\n        position: 'entropy'\n      }).toBuffer(function (err, data, info) {\n        if (err) throw err;\n        assert.strictEqual('png', info.format);\n        assert.strictEqual(4, info.channels);\n        assert.strictEqual(320, info.width);\n        assert.strictEqual(80, info.height);\n        assert.strictEqual(0, info.cropOffsetLeft);\n        assert.strictEqual(-80, info.cropOffsetTop);\n        fixtures.assertSimilar(fixtures.expected('crop-strategy.png'), data, done);\n      });\n    });","file":"unit/resize-cover.js","skipped":false,"dir":"test"},{"name":"JPEG","suites":["Resize fit=cover","Attention strategy"],"updatePoint":{"line":293,"column":12,"index":8802},"line":293,"code":"    it('JPEG', function (done) {\n      sharp(fixtures.inputJpg).resize(80, 320, {\n        fit: 'cover',\n        position: sharp.strategy.attention\n      }).toBuffer(function (err, data, info) {\n        if (err) throw err;\n        assert.strictEqual('jpeg', info.format);\n        assert.strictEqual(3, info.channels);\n        assert.strictEqual(80, info.width);\n        assert.strictEqual(320, info.height);\n        assert.strictEqual(-107, info.cropOffsetLeft);\n        assert.strictEqual(0, info.cropOffsetTop);\n        fixtures.assertSimilar(fixtures.expected('crop-strategy-attention.jpg'), data, done);\n      });\n    });","file":"unit/resize-cover.js","skipped":false,"dir":"test"},{"name":"PNG","suites":["Resize fit=cover","Attention strategy"],"updatePoint":{"line":308,"column":11,"index":9426},"line":308,"code":"    it('PNG', function (done) {\n      sharp(fixtures.inputPngWithTransparency).resize(320, 80, {\n        fit: 'cover',\n        position: sharp.strategy.attention\n      }).toBuffer(function (err, data, info) {\n        if (err) throw err;\n        assert.strictEqual('png', info.format);\n        assert.strictEqual(4, info.channels);\n        assert.strictEqual(320, info.width);\n        assert.strictEqual(80, info.height);\n        assert.strictEqual(0, info.cropOffsetLeft);\n        assert.strictEqual(0, info.cropOffsetTop);\n        fixtures.assertSimilar(fixtures.expected('crop-strategy.png'), data, done);\n      });\n    });","file":"unit/resize-cover.js","skipped":false,"dir":"test"},{"name":"supports the strategy passed as a string","suites":["Resize fit=cover","Attention strategy"],"updatePoint":{"line":323,"column":48,"index":10089},"line":323,"code":"    it('supports the strategy passed as a string', function (done) {\n      sharp(fixtures.inputPngWithTransparency).resize(320, 80, {\n        fit: 'cover',\n        position: 'attention'\n      }).toBuffer(function (err, data, info) {\n        if (err) throw err;\n        assert.strictEqual('png', info.format);\n        assert.strictEqual(4, info.channels);\n        assert.strictEqual(320, info.width);\n        assert.strictEqual(80, info.height);\n        assert.strictEqual(0, info.cropOffsetLeft);\n        assert.strictEqual(0, info.cropOffsetTop);\n        fixtures.assertSimilar(fixtures.expected('crop-strategy.png'), data, done);\n      });\n    });","file":"unit/resize-cover.js","skipped":false,"dir":"test"},{"name":"Exact crop","suites":["Resize dimensions"],"updatePoint":{"line":7,"column":16,"index":184},"line":7,"code":"  it('Exact crop', function (done) {\n    sharp(fixtures.inputJpg).resize(320, 240).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(true, data.length > 0);\n      assert.strictEqual('jpeg', info.format);\n      assert.strictEqual(320, info.width);\n      assert.strictEqual(240, info.height);\n      done();\n    });\n  });","file":"unit/resize.js","skipped":false,"dir":"test"},{"name":"Fixed width","suites":["Resize dimensions"],"updatePoint":{"line":17,"column":17,"index":543},"line":17,"code":"  it('Fixed width', function (done) {\n    sharp(fixtures.inputJpg).resize(320).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(true, data.length > 0);\n      assert.strictEqual('jpeg', info.format);\n      assert.strictEqual(320, info.width);\n      assert.strictEqual(261, info.height);\n      done();\n    });\n  });","file":"unit/resize.js","skipped":false,"dir":"test"},{"name":"Fixed height","suites":["Resize dimensions"],"updatePoint":{"line":27,"column":18,"index":898},"line":27,"code":"  it('Fixed height', function (done) {\n    sharp(fixtures.inputJpg).resize(null, 320).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(true, data.length > 0);\n      assert.strictEqual('jpeg', info.format);\n      assert.strictEqual(392, info.width);\n      assert.strictEqual(320, info.height);\n      done();\n    });\n  });","file":"unit/resize.js","skipped":false,"dir":"test"},{"name":"Identity transform","suites":["Resize dimensions"],"updatePoint":{"line":37,"column":24,"index":1265},"line":37,"code":"  it('Identity transform', function (done) {\n    sharp(fixtures.inputJpg).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(true, data.length > 0);\n      assert.strictEqual('jpeg', info.format);\n      assert.strictEqual(2725, info.width);\n      assert.strictEqual(2225, info.height);\n      done();\n    });\n  });","file":"unit/resize.js","skipped":false,"dir":"test"},{"name":"Upscale","suites":["Resize dimensions"],"updatePoint":{"line":47,"column":13,"index":1605},"line":47,"code":"  it('Upscale', function (done) {\n    sharp(fixtures.inputJpg).resize(3000).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(true, data.length > 0);\n      assert.strictEqual('jpeg', info.format);\n      assert.strictEqual(3000, info.width);\n      assert.strictEqual(2450, info.height);\n      done();\n    });\n  });","file":"unit/resize.js","skipped":false,"dir":"test"},{"name":"Invalid width - NaN","suites":["Resize dimensions"],"updatePoint":{"line":57,"column":25,"index":1970},"line":57,"code":"  it('Invalid width - NaN', function () {\n    assert.throws(function () {\n      sharp().resize('spoons', 240);\n    }, /Expected positive integer for width but received spoons of type string/);\n  });","file":"unit/resize.js","skipped":false,"dir":"test"},{"name":"Invalid height - NaN","suites":["Resize dimensions"],"updatePoint":{"line":62,"column":26,"index":2170},"line":62,"code":"  it('Invalid height - NaN', function () {\n    assert.throws(function () {\n      sharp().resize(320, 'spoons');\n    }, /Expected positive integer for height but received spoons of type string/);\n  });","file":"unit/resize.js","skipped":false,"dir":"test"},{"name":"Invalid width - float","suites":["Resize dimensions"],"updatePoint":{"line":67,"column":27,"index":2372},"line":67,"code":"  it('Invalid width - float', function () {\n    assert.throws(function () {\n      sharp().resize(1.5, 240);\n    }, /Expected positive integer for width but received 1.5 of type number/);\n  });","file":"unit/resize.js","skipped":false,"dir":"test"},{"name":"Invalid height - float","suites":["Resize dimensions"],"updatePoint":{"line":72,"column":28,"index":2566},"line":72,"code":"  it('Invalid height - float', function () {\n    assert.throws(function () {\n      sharp().resize(320, 1.5);\n    }, /Expected positive integer for height but received 1.5 of type number/);\n  });","file":"unit/resize.js","skipped":false,"dir":"test"},{"name":"Invalid width - via options","suites":["Resize dimensions"],"updatePoint":{"line":77,"column":33,"index":2766},"line":77,"code":"  it('Invalid width - via options', () => {\n    assert.throws(() => {\n      sharp().resize({\n        width: 1.5,\n        height: 240\n      });\n    }, /Expected positive integer for width but received 1.5 of type number/);\n  });","file":"unit/resize.js","skipped":false,"dir":"test"},{"name":"Invalid height - via options","suites":["Resize dimensions"],"updatePoint":{"line":85,"column":34,"index":2995},"line":85,"code":"  it('Invalid height - via options', () => {\n    assert.throws(() => {\n      sharp().resize({\n        width: 320,\n        height: 1.5\n      });\n    }, /Expected positive integer for height but received 1.5 of type number/);\n  });","file":"unit/resize.js","skipped":false,"dir":"test"},{"name":"Invalid width - too large","suites":["Resize dimensions"],"updatePoint":{"line":93,"column":31,"index":3222},"line":93,"code":"  it('Invalid width - too large', function (done) {\n    sharp(fixtures.inputJpg).resize(0x4000, 1).webp().toBuffer(function (err) {\n      assert.strictEqual(true, err instanceof Error);\n      assert.strictEqual('Processed image is too large for the WebP format', err.message);\n      done();\n    });\n  });","file":"unit/resize.js","skipped":false,"dir":"test"},{"name":"Invalid height - too large","suites":["Resize dimensions"],"updatePoint":{"line":100,"column":32,"index":3528},"line":100,"code":"  it('Invalid height - too large', function (done) {\n    sharp(fixtures.inputJpg).resize(1, 0x4000).webp().toBuffer(function (err) {\n      assert.strictEqual(true, err instanceof Error);\n      assert.strictEqual('Processed image is too large for the WebP format', err.message);\n      done();\n    });\n  });","file":"unit/resize.js","skipped":false,"dir":"test"},{"name":"WebP shrink-on-load rounds to zero, ensure recalculation is correct","suites":["Resize dimensions"],"updatePoint":{"line":107,"column":73,"index":3875},"line":107,"code":"  it('WebP shrink-on-load rounds to zero, ensure recalculation is correct', function (done) {\n    sharp(fixtures.inputJpg).resize(1080, 607).webp().toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual('webp', info.format);\n      assert.strictEqual(1080, info.width);\n      assert.strictEqual(607, info.height);\n      sharp(data).resize(233, 131).toBuffer(function (err, data, info) {\n        if (err) throw err;\n        assert.strictEqual('webp', info.format);\n        assert.strictEqual(233, info.width);\n        assert.strictEqual(131, info.height);\n        done();\n      });\n    });\n  });","file":"unit/resize.js","skipped":false,"dir":"test"},{"name":"JPEG shrink-on-load with 90 degree rotation, ensure recalculation is correct","suites":["Resize dimensions"],"updatePoint":{"line":122,"column":82,"index":4512},"line":122,"code":"  it('JPEG shrink-on-load with 90 degree rotation, ensure recalculation is correct', function (done) {\n    sharp(fixtures.inputJpg).resize(1920, 1280).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(1920, info.width);\n      assert.strictEqual(1280, info.height);\n      sharp(data).rotate(90).resize(533, 800).toBuffer(function (err, data, info) {\n        if (err) throw err;\n        assert.strictEqual(533, info.width);\n        assert.strictEqual(800, info.height);\n        done();\n      });\n    });\n  });","file":"unit/resize.js","skipped":false,"dir":"test"},{"name":"TIFF embed known to cause rounding errors","suites":["Resize dimensions"],"updatePoint":{"line":135,"column":47,"index":5024},"line":135,"code":"  it('TIFF embed known to cause rounding errors', function (done) {\n    sharp(fixtures.inputTiff).resize(240, 320, {\n      fit: sharp.fit.contain\n    }).jpeg().toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(true, data.length > 0);\n      assert.strictEqual('jpeg', info.format);\n      assert.strictEqual(240, info.width);\n      assert.strictEqual(320, info.height);\n      done();\n    });\n  });","file":"unit/resize.js","skipped":false,"dir":"test"},{"name":"TIFF known to cause rounding errors","suites":["Resize dimensions"],"updatePoint":{"line":147,"column":41,"index":5453},"line":147,"code":"  it('TIFF known to cause rounding errors', function (done) {\n    sharp(fixtures.inputTiff).resize(240, 320).jpeg().toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(true, data.length > 0);\n      assert.strictEqual('jpeg', info.format);\n      assert.strictEqual(240, info.width);\n      assert.strictEqual(320, info.height);\n      done();\n    });\n  });","file":"unit/resize.js","skipped":false,"dir":"test"},{"name":"fit=inside, portrait","suites":["Resize dimensions"],"updatePoint":{"line":157,"column":26,"index":5829},"line":157,"code":"  it('fit=inside, portrait', function (done) {\n    sharp(fixtures.inputTiff).resize(320, 320, {\n      fit: sharp.fit.inside\n    }).jpeg().toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(true, data.length > 0);\n      assert.strictEqual('jpeg', info.format);\n      assert.strictEqual(243, info.width);\n      assert.strictEqual(320, info.height);\n      done();\n    });\n  });","file":"unit/resize.js","skipped":false,"dir":"test"},{"name":"fit=outside, portrait","suites":["Resize dimensions"],"updatePoint":{"line":169,"column":27,"index":6243},"line":169,"code":"  it('fit=outside, portrait', function (done) {\n    sharp(fixtures.inputTiff).resize(320, 320, {\n      fit: sharp.fit.outside\n    }).jpeg().toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(true, data.length > 0);\n      assert.strictEqual('jpeg', info.format);\n      assert.strictEqual(320, info.width);\n      assert.strictEqual(422, info.height);\n      done();\n    });\n  });","file":"unit/resize.js","skipped":false,"dir":"test"},{"name":"fit=inside, landscape","suites":["Resize dimensions"],"updatePoint":{"line":181,"column":27,"index":6658},"line":181,"code":"  it('fit=inside, landscape', function (done) {\n    sharp(fixtures.inputJpg).resize(320, 320, {\n      fit: sharp.fit.inside\n    }).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(true, data.length > 0);\n      assert.strictEqual('jpeg', info.format);\n      assert.strictEqual(320, info.width);\n      assert.strictEqual(261, info.height);\n      done();\n    });\n  });","file":"unit/resize.js","skipped":false,"dir":"test"},{"name":"fit=outside, landscape","suites":["Resize dimensions"],"updatePoint":{"line":193,"column":28,"index":7065},"line":193,"code":"  it('fit=outside, landscape', function (done) {\n    sharp(fixtures.inputJpg).resize(320, 320, {\n      fit: sharp.fit.outside\n    }).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(true, data.length > 0);\n      assert.strictEqual('jpeg', info.format);\n      assert.strictEqual(392, info.width);\n      assert.strictEqual(320, info.height);\n      done();\n    });\n  });","file":"unit/resize.js","skipped":false,"dir":"test"},{"name":"fit=inside, provide only one dimension","suites":["Resize dimensions"],"updatePoint":{"line":205,"column":44,"index":7489},"line":205,"code":"  it('fit=inside, provide only one dimension', function (done) {\n    sharp(fixtures.inputJpg).resize({\n      width: 320,\n      fit: sharp.fit.inside\n    }).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(true, data.length > 0);\n      assert.strictEqual('jpeg', info.format);\n      assert.strictEqual(320, info.width);\n      assert.strictEqual(261, info.height);\n      done();\n    });\n  });","file":"unit/resize.js","skipped":false,"dir":"test"},{"name":"fit=outside, provide only one dimension","suites":["Resize dimensions"],"updatePoint":{"line":218,"column":45,"index":7921},"line":218,"code":"  it('fit=outside, provide only one dimension', function (done) {\n    sharp(fixtures.inputJpg).resize({\n      width: 320,\n      fit: sharp.fit.outside\n    }).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(true, data.length > 0);\n      assert.strictEqual('jpeg', info.format);\n      assert.strictEqual(320, info.width);\n      assert.strictEqual(261, info.height);\n      done();\n    });\n  });","file":"unit/resize.js","skipped":false,"dir":"test"},{"name":"Do not enlarge when input width is already less than output width","suites":["Resize dimensions"],"updatePoint":{"line":231,"column":71,"index":8380},"line":231,"code":"  it('Do not enlarge when input width is already less than output width', function (done) {\n    sharp(fixtures.inputJpg).resize({\n      width: 2800,\n      withoutEnlargement: true\n    }).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(true, data.length > 0);\n      assert.strictEqual('jpeg', info.format);\n      assert.strictEqual(2725, info.width);\n      assert.strictEqual(2225, info.height);\n      done();\n    });\n  });","file":"unit/resize.js","skipped":false,"dir":"test"},{"name":"Do not enlarge when input height is already less than output height","suites":["Resize dimensions"],"updatePoint":{"line":244,"column":73,"index":8846},"line":244,"code":"  it('Do not enlarge when input height is already less than output height', function (done) {\n    sharp(fixtures.inputJpg).resize({\n      height: 2300,\n      withoutEnlargement: true\n    }).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(true, data.length > 0);\n      assert.strictEqual('jpeg', info.format);\n      assert.strictEqual(2725, info.width);\n      assert.strictEqual(2225, info.height);\n      done();\n    });\n  });","file":"unit/resize.js","skipped":false,"dir":"test"},{"name":"Do crop when fit = cover and withoutEnlargement = true and width >= outputWidth, and height < outputHeight","suites":["Resize dimensions"],"updatePoint":{"line":257,"column":112,"index":9352},"line":257,"code":"  it('Do crop when fit = cover and withoutEnlargement = true and width >= outputWidth, and height < outputHeight', function (done) {\n    sharp(fixtures.inputJpg).resize({\n      width: 3000,\n      height: 1000,\n      withoutEnlargement: true\n    }).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(true, data.length > 0);\n      assert.strictEqual('jpeg', info.format);\n      assert.strictEqual(2725, info.width);\n      assert.strictEqual(1000, info.height);\n      done();\n    });\n  });","file":"unit/resize.js","skipped":false,"dir":"test"},{"name":"Do crop when fit = cover and withoutEnlargement = true and width < outputWidth, and height >= outputHeight","suites":["Resize dimensions"],"updatePoint":{"line":271,"column":112,"index":9877},"line":271,"code":"  it('Do crop when fit = cover and withoutEnlargement = true and width < outputWidth, and height >= outputHeight', function (done) {\n    sharp(fixtures.inputJpg).resize({\n      width: 1500,\n      height: 2226,\n      withoutEnlargement: true\n    }).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(true, data.length > 0);\n      assert.strictEqual('jpeg', info.format);\n      assert.strictEqual(1500, info.width);\n      assert.strictEqual(2225, info.height);\n      done();\n    });\n  });","file":"unit/resize.js","skipped":false,"dir":"test"},{"name":"Do enlarge when input width is less than output width","suites":["Resize dimensions"],"updatePoint":{"line":285,"column":59,"index":10349},"line":285,"code":"  it('Do enlarge when input width is less than output width', function (done) {\n    sharp(fixtures.inputJpg).resize({\n      width: 2800,\n      withoutEnlargement: false\n    }).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(true, data.length > 0);\n      assert.strictEqual('jpeg', info.format);\n      assert.strictEqual(2800, info.width);\n      assert.strictEqual(2286, info.height);\n      done();\n    });\n  });","file":"unit/resize.js","skipped":false,"dir":"test"},{"name":"fit=fill, downscale width and height","suites":["Resize dimensions"],"updatePoint":{"line":298,"column":42,"index":10785},"line":298,"code":"  it('fit=fill, downscale width and height', function (done) {\n    sharp(fixtures.inputJpg).resize(320, 320, {\n      fit: 'fill'\n    }).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(true, data.length > 0);\n      assert.strictEqual('jpeg', info.format);\n      assert.strictEqual(320, info.width);\n      assert.strictEqual(320, info.height);\n      done();\n    });\n  });","file":"unit/resize.js","skipped":false,"dir":"test"},{"name":"fit=fill, downscale width","suites":["Resize dimensions"],"updatePoint":{"line":310,"column":31,"index":11185},"line":310,"code":"  it('fit=fill, downscale width', function (done) {\n    sharp(fixtures.inputJpg).resize({\n      width: 320,\n      fit: 'fill'\n    }).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(true, data.length > 0);\n      assert.strictEqual('jpeg', info.format);\n      assert.strictEqual(320, info.width);\n      assert.strictEqual(2225, info.height);\n      done();\n    });\n  });","file":"unit/resize.js","skipped":false,"dir":"test"},{"name":"fit=fill, downscale height","suites":["Resize dimensions"],"updatePoint":{"line":323,"column":32,"index":11595},"line":323,"code":"  it('fit=fill, downscale height', function (done) {\n    sharp(fixtures.inputJpg).resize({\n      height: 320,\n      fit: 'fill'\n    }).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(true, data.length > 0);\n      assert.strictEqual('jpeg', info.format);\n      assert.strictEqual(2725, info.width);\n      assert.strictEqual(320, info.height);\n      done();\n    });\n  });","file":"unit/resize.js","skipped":false,"dir":"test"},{"name":"fit=fill, upscale width and height","suites":["Resize dimensions"],"updatePoint":{"line":336,"column":40,"index":12014},"line":336,"code":"  it('fit=fill, upscale width and height', function (done) {\n    sharp(fixtures.inputJpg).resize(3000, 3000, {\n      fit: 'fill'\n    }).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(true, data.length > 0);\n      assert.strictEqual('jpeg', info.format);\n      assert.strictEqual(3000, info.width);\n      assert.strictEqual(3000, info.height);\n      done();\n    });\n  });","file":"unit/resize.js","skipped":false,"dir":"test"},{"name":"fit=fill, upscale width","suites":["Resize dimensions"],"updatePoint":{"line":348,"column":29,"index":12416},"line":348,"code":"  it('fit=fill, upscale width', function (done) {\n    sharp(fixtures.inputJpg).resize(3000, null, {\n      fit: 'fill'\n    }).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(true, data.length > 0);\n      assert.strictEqual('jpeg', info.format);\n      assert.strictEqual(3000, info.width);\n      assert.strictEqual(2225, info.height);\n      done();\n    });\n  });","file":"unit/resize.js","skipped":false,"dir":"test"},{"name":"fit=fill, upscale height","suites":["Resize dimensions"],"updatePoint":{"line":360,"column":30,"index":12819},"line":360,"code":"  it('fit=fill, upscale height', function (done) {\n    sharp(fixtures.inputJpg).resize(null, 3000, {\n      fit: 'fill'\n    }).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(true, data.length > 0);\n      assert.strictEqual('jpeg', info.format);\n      assert.strictEqual(2725, info.width);\n      assert.strictEqual(3000, info.height);\n      done();\n    });\n  });","file":"unit/resize.js","skipped":false,"dir":"test"},{"name":"fit=fill, downscale width, upscale height","suites":["Resize dimensions"],"updatePoint":{"line":372,"column":47,"index":13239},"line":372,"code":"  it('fit=fill, downscale width, upscale height', function (done) {\n    sharp(fixtures.inputJpg).resize(320, 3000, {\n      fit: 'fill'\n    }).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(true, data.length > 0);\n      assert.strictEqual('jpeg', info.format);\n      assert.strictEqual(320, info.width);\n      assert.strictEqual(3000, info.height);\n      done();\n    });\n  });","file":"unit/resize.js","skipped":false,"dir":"test"},{"name":"fit=fill, upscale width, downscale height","suites":["Resize dimensions"],"updatePoint":{"line":384,"column":47,"index":13657},"line":384,"code":"  it('fit=fill, upscale width, downscale height', function (done) {\n    sharp(fixtures.inputJpg).resize(3000, 320, {\n      fit: 'fill'\n    }).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(true, data.length > 0);\n      assert.strictEqual('jpeg', info.format);\n      assert.strictEqual(3000, info.width);\n      assert.strictEqual(320, info.height);\n      done();\n    });\n  });","file":"unit/resize.js","skipped":false,"dir":"test"},{"name":"fit=fill, identity transform","suites":["Resize dimensions"],"updatePoint":{"line":396,"column":34,"index":14062},"line":396,"code":"  it('fit=fill, identity transform', function (done) {\n    sharp(fixtures.inputJpg).resize(null, null, {\n      fit: 'fill'\n    }).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(true, data.length > 0);\n      assert.strictEqual('jpeg', info.format);\n      assert.strictEqual(2725, info.width);\n      assert.strictEqual(2225, info.height);\n      done();\n    });\n  });","file":"unit/resize.js","skipped":false,"dir":"test"},{"name":"Dimensions that result in differing even shrinks on each axis","suites":["Resize dimensions"],"updatePoint":{"line":408,"column":67,"index":14502},"line":408,"code":"  it('Dimensions that result in differing even shrinks on each axis', function (done) {\n    sharp(fixtures.inputJpg).resize(645, 399).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(645, info.width);\n      assert.strictEqual(399, info.height);\n      sharp(data).resize(150, 100).toBuffer(function (err, data, info) {\n        if (err) throw err;\n        assert.strictEqual(150, info.width);\n        assert.strictEqual(100, info.height);\n        fixtures.assertSimilar(fixtures.expected('resize-diff-shrink-even.jpg'), data, done);\n      });\n    });\n  });","file":"unit/resize.js","skipped":false,"dir":"test"},{"name":"Dimensions that result in differing odd shrinks on each axis","suites":["Resize dimensions"],"updatePoint":{"line":421,"column":66,"index":15096},"line":421,"code":"  it('Dimensions that result in differing odd shrinks on each axis', function (done) {\n    return sharp(fixtures.inputJpg).resize(600, 399).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(600, info.width);\n      assert.strictEqual(399, info.height);\n      sharp(data).resize(200).toBuffer(function (err, data, info) {\n        if (err) throw err;\n        assert.strictEqual(200, info.width);\n        assert.strictEqual(133, info.height);\n        fixtures.assertSimilar(fixtures.expected('resize-diff-shrink-odd.jpg'), data, done);\n      });\n    });\n  });","file":"unit/resize.js","skipped":false,"dir":"test"},{"name":"fastShrinkOnLoad: false ensures image is not shifted","suites":["Resize dimensions"],"updatePoint":{"line":434,"column":58,"index":15683},"line":434,"code":"  it('fastShrinkOnLoad: false ensures image is not shifted', function (done) {\n    return sharp(fixtures.inputJpgCenteredImage).resize(9, 8, {\n      fastShrinkOnLoad: false\n    }).png().toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(9, info.width);\n      assert.strictEqual(8, info.height);\n      fixtures.assertSimilar(fixtures.expected('fast-shrink-on-load-false.png'), data, done);\n    });\n  });","file":"unit/resize.js","skipped":false,"dir":"test"},{"name":"fastShrinkOnLoad: true (default) might result in shifted image","suites":["Resize dimensions"],"updatePoint":{"line":444,"column":68,"index":16134},"line":444,"code":"  it('fastShrinkOnLoad: true (default) might result in shifted image', function (done) {\n    return sharp(fixtures.inputJpgCenteredImage).resize(9, 8).png().toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(9, info.width);\n      assert.strictEqual(8, info.height);\n      fixtures.assertSimilar(fixtures.expected('fast-shrink-on-load-true.png'), data, done);\n    });\n  });","file":"unit/resize.js","skipped":false,"dir":"test"},{"name":"kernel ","suites":["Resize dimensions"],"updatePoint":{"line":453,"column":24,"index":16643},"line":453,"code":"    it(`kernel ${kernel}`, function (done) {\n      sharp(fixtures.inputJpg).resize(320, null, {\n        kernel: kernel\n      }).toBuffer(function (err, data, info) {\n        if (err) throw err;\n        assert.strictEqual('jpeg', info.format);\n        assert.strictEqual(320, info.width);\n        fixtures.assertSimilar(fixtures.inputJpg, data, done);\n      });\n    });","file":"unit/resize.js","skipped":false,"dir":"test"},{"name":"nearest upsampling with integral factor","suites":["Resize dimensions"],"updatePoint":{"line":464,"column":45,"index":17039},"line":464,"code":"  it('nearest upsampling with integral factor', function (done) {\n    sharp(fixtures.inputTiff8BitDepth).resize(210, 210, {\n      kernel: 'nearest'\n    }).png().toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(210, info.width);\n      assert.strictEqual(210, info.height);\n      done();\n    });\n  });","file":"unit/resize.js","skipped":false,"dir":"test"},{"name":"Ensure shortest edge (height) is at least 1 pixel","suites":["Resize dimensions"],"updatePoint":{"line":474,"column":55,"index":17389},"line":474,"code":"  it('Ensure shortest edge (height) is at least 1 pixel', function () {\n    return sharp({\n      create: {\n        width: 10,\n        height: 2,\n        channels: 3,\n        background: 'red'\n      }\n    }).resize(2).toBuffer({\n      resolveWithObject: true\n    }).then(function (output) {\n      assert.strictEqual(2, output.info.width);\n      assert.strictEqual(1, output.info.height);\n    });\n  });","file":"unit/resize.js","skipped":false,"dir":"test"},{"name":"Ensure shortest edge (width) is at least 1 pixel","suites":["Resize dimensions"],"updatePoint":{"line":489,"column":54,"index":17789},"line":489,"code":"  it('Ensure shortest edge (width) is at least 1 pixel', function () {\n    return sharp({\n      create: {\n        width: 2,\n        height: 10,\n        channels: 3,\n        background: 'red'\n      }\n    }).resize(null, 2).toBuffer({\n      resolveWithObject: true\n    }).then(function (output) {\n      assert.strictEqual(1, output.info.width);\n      assert.strictEqual(2, output.info.height);\n    });\n  });","file":"unit/resize.js","skipped":false,"dir":"test"},{"name":"Ensure embedded shortest edge (height) is at least 1 pixel","suites":["Resize dimensions"],"updatePoint":{"line":504,"column":64,"index":18205},"line":504,"code":"  it('Ensure embedded shortest edge (height) is at least 1 pixel', function () {\n    return sharp({\n      create: {\n        width: 200,\n        height: 1,\n        channels: 3,\n        background: 'red'\n      }\n    }).resize({\n      width: 50,\n      height: 50,\n      fit: sharp.fit.contain\n    }).toBuffer({\n      resolveWithObject: true\n    }).then(function (output) {\n      assert.strictEqual(50, output.info.width);\n      assert.strictEqual(50, output.info.height);\n    });\n  });","file":"unit/resize.js","skipped":false,"dir":"test"},{"name":"Ensure embedded shortest edge (width) is at least 1 pixel","suites":["Resize dimensions"],"updatePoint":{"line":523,"column":63,"index":18687},"line":523,"code":"  it('Ensure embedded shortest edge (width) is at least 1 pixel', function () {\n    return sharp({\n      create: {\n        width: 1,\n        height: 200,\n        channels: 3,\n        background: 'red'\n      }\n    }).resize({\n      width: 50,\n      height: 50,\n      fit: sharp.fit.contain\n    }).toBuffer({\n      resolveWithObject: true\n    }).then(function (output) {\n      assert.strictEqual(50, output.info.width);\n      assert.strictEqual(50, output.info.height);\n    });\n  });","file":"unit/resize.js","skipped":false,"dir":"test"},{"name":"Skip shrink-on-load where one dimension <4px","suites":["Resize dimensions"],"updatePoint":{"line":542,"column":50,"index":19156},"line":542,"code":"  it('Skip shrink-on-load where one dimension <4px', async () => {\n    const jpeg = await sharp({\n      create: {\n        width: 100,\n        height: 3,\n        channels: 3,\n        background: 'red'\n      }\n    }).jpeg().toBuffer();\n    const {\n      info\n    } = await sharp(jpeg).resize(8).toBuffer({\n      resolveWithObject: true\n    });\n    assert.strictEqual(info.width, 8);\n    assert.strictEqual(info.height, 1);\n  });","file":"unit/resize.js","skipped":false,"dir":"test"},{"name":"unknown kernel throws","suites":["Resize dimensions"],"updatePoint":{"line":559,"column":27,"index":19560},"line":559,"code":"  it('unknown kernel throws', function () {\n    assert.throws(function () {\n      sharp().resize(null, null, {\n        kernel: 'unknown'\n      });\n    });\n  });","file":"unit/resize.js","skipped":false,"dir":"test"},{"name":"unknown fit throws","suites":["Resize dimensions"],"updatePoint":{"line":566,"column":24,"index":19718},"line":566,"code":"  it('unknown fit throws', function () {\n    assert.throws(function () {\n      sharp().resize(null, null, {\n        fit: 'unknown'\n      });\n    });\n  });","file":"unit/resize.js","skipped":false,"dir":"test"},{"name":"unknown position throws","suites":["Resize dimensions"],"updatePoint":{"line":573,"column":29,"index":19878},"line":573,"code":"  it('unknown position throws', function () {\n    assert.throws(function () {\n      sharp().resize(null, null, {\n        position: 'unknown'\n      });\n    });\n  });","file":"unit/resize.js","skipped":false,"dir":"test"},{"name":"Rotate by 30 degrees with semi-transparent background","suites":["Rotation"],"updatePoint":{"line":20,"column":59,"index":931},"line":20,"code":"  it('Rotate by 30 degrees with semi-transparent background', function (done) {\n    sharp(fixtures.inputJpg).rotate(30, {\n      background: {\n        r: 255,\n        g: 0,\n        b: 0,\n        alpha: 0.5\n      }\n    }).resize(320).png().toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual('png', info.format);\n      assert.strictEqual(408, info.width);\n      assert.strictEqual(386, info.height);\n      fixtures.assertSimilar(fixtures.expected('rotate-transparent-bg.png'), data, done);\n    });\n  });","file":"unit/rotate.js","skipped":false,"dir":"test"},{"name":"Rotate by 30 degrees with solid background","suites":["Rotation"],"updatePoint":{"line":36,"column":48,"index":1459},"line":36,"code":"  it('Rotate by 30 degrees with solid background', function (done) {\n    sharp(fixtures.inputJpg).rotate(30, {\n      background: {\n        r: 255,\n        g: 0,\n        b: 0,\n        alpha: 0.5\n      }\n    }).resize(320).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual('jpeg', info.format);\n      assert.strictEqual(408, info.width);\n      assert.strictEqual(386, info.height);\n      fixtures.assertSimilar(fixtures.expected('rotate-solid-bg.jpg'), data, done);\n    });\n  });","file":"unit/rotate.js","skipped":false,"dir":"test"},{"name":"Rotate by 90 degrees, respecting output input size","suites":["Rotation"],"updatePoint":{"line":52,"column":56,"index":1984},"line":52,"code":"  it('Rotate by 90 degrees, respecting output input size', function (done) {\n    sharp(fixtures.inputJpg).rotate(90).resize(320, 240).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(true, data.length > 0);\n      assert.strictEqual('jpeg', info.format);\n      assert.strictEqual(320, info.width);\n      assert.strictEqual(240, info.height);\n      done();\n    });\n  });","file":"unit/rotate.js","skipped":false,"dir":"test"},{"name":"Rotate by 30 degrees, respecting output input size","suites":["Rotation"],"updatePoint":{"line":62,"column":56,"index":2393},"line":62,"code":"  it('Rotate by 30 degrees, respecting output input size', function (done) {\n    sharp(fixtures.inputJpg).rotate(30).resize(320, 240).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(true, data.length > 0);\n      assert.strictEqual('jpeg', info.format);\n      assert.strictEqual(397, info.width);\n      assert.strictEqual(368, info.height);\n      done();\n    });\n  });","file":"unit/rotate.js","skipped":false,"dir":"test"},{"name":"Rotate by 270 degrees, square output ignoring aspect ratio","suites":["Rotation"],"updatePoint":{"line":102,"column":64,"index":3984},"line":102,"code":"  it('Rotate by 270 degrees, square output ignoring aspect ratio', function (done) {\n    sharp(fixtures.inputJpg).resize(240, 240, {\n      fit: sharp.fit.fill\n    }).rotate(270).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(240, info.width);\n      assert.strictEqual(240, info.height);\n      sharp(data).metadata(function (err, metadata) {\n        if (err) throw err;\n        assert.strictEqual(240, metadata.width);\n        assert.strictEqual(240, metadata.height);\n        done();\n      });\n    });\n  });","file":"unit/rotate.js","skipped":false,"dir":"test"},{"name":"Rotate by 315 degrees, square output ignoring aspect ratio","suites":["Rotation"],"updatePoint":{"line":117,"column":64,"index":4534},"line":117,"code":"  it('Rotate by 315 degrees, square output ignoring aspect ratio', function (done) {\n    sharp(fixtures.inputJpg).resize(240, 240, {\n      fit: sharp.fit.fill\n    }).rotate(315).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(339, info.width);\n      assert.strictEqual(339, info.height);\n      sharp(data).metadata(function (err, metadata) {\n        if (err) throw err;\n        assert.strictEqual(339, metadata.width);\n        assert.strictEqual(339, metadata.height);\n        done();\n      });\n    });\n  });","file":"unit/rotate.js","skipped":false,"dir":"test"},{"name":"Rotate by 270 degrees, rectangular output ignoring aspect ratio","suites":["Rotation"],"updatePoint":{"line":132,"column":69,"index":5089},"line":132,"code":"  it('Rotate by 270 degrees, rectangular output ignoring aspect ratio', function (done) {\n    sharp(fixtures.inputJpg).resize(320, 240, {\n      fit: sharp.fit.fill\n    }).rotate(270).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(320, info.width);\n      assert.strictEqual(240, info.height);\n      sharp(data).metadata(function (err, metadata) {\n        if (err) throw err;\n        assert.strictEqual(320, metadata.width);\n        assert.strictEqual(240, metadata.height);\n        done();\n      });\n    });\n  });","file":"unit/rotate.js","skipped":false,"dir":"test"},{"name":"Rotate by 30 degrees, rectangular output ignoring aspect ratio","suites":["Rotation"],"updatePoint":{"line":147,"column":68,"index":5643},"line":147,"code":"  it('Rotate by 30 degrees, rectangular output ignoring aspect ratio', function (done) {\n    sharp(fixtures.inputJpg).resize(320, 240, {\n      fit: sharp.fit.fill\n    }).rotate(30).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(397, info.width);\n      assert.strictEqual(368, info.height);\n      sharp(data).metadata(function (err, metadata) {\n        if (err) throw err;\n        assert.strictEqual(397, metadata.width);\n        assert.strictEqual(368, metadata.height);\n        done();\n      });\n    });\n  });","file":"unit/rotate.js","skipped":false,"dir":"test"},{"name":"Input image has Orientation EXIF tag but do not rotate output","suites":["Rotation"],"updatePoint":{"line":162,"column":67,"index":6195},"line":162,"code":"  it('Input image has Orientation EXIF tag but do not rotate output', function (done) {\n    sharp(fixtures.inputJpgWithExif).resize(320).withMetadata().toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(true, data.length > 0);\n      assert.strictEqual('jpeg', info.format);\n      assert.strictEqual(320, info.width);\n      assert.strictEqual(427, info.height);\n      sharp(data).metadata(function (err, metadata) {\n        if (err) throw err;\n        assert.strictEqual(8, metadata.orientation);\n        done();\n      });\n    });\n  });","file":"unit/rotate.js","skipped":false,"dir":"test"},{"name":"Input image has Orientation EXIF tag value of 8 (270 degrees), auto-rotate","suites":["Rotation"],"updatePoint":{"line":176,"column":80,"index":6782},"line":176,"code":"  it('Input image has Orientation EXIF tag value of 8 (270 degrees), auto-rotate', function (done) {\n    sharp(fixtures.inputJpgWithExif).rotate().resize(320).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual('jpeg', info.format);\n      assert.strictEqual(320, info.width);\n      assert.strictEqual(240, info.height);\n      fixtures.assertSimilar(fixtures.expected('exif-8.jpg'), data, done);\n    });\n  });","file":"unit/rotate.js","skipped":false,"dir":"test"},{"name":"Override EXIF Orientation tag metadata after auto-rotate","suites":["Rotation"],"updatePoint":{"line":185,"column":62,"index":7210},"line":185,"code":"  it('Override EXIF Orientation tag metadata after auto-rotate', function (done) {\n    sharp(fixtures.inputJpgWithExif).rotate().resize(320).withMetadata({\n      orientation: 3\n    }).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual('jpeg', info.format);\n      assert.strictEqual(320, info.width);\n      assert.strictEqual(240, info.height);\n      sharp(data).metadata(function (err, metadata) {\n        if (err) throw err;\n        assert.strictEqual(3, metadata.orientation);\n        fixtures.assertSimilar(fixtures.expected('exif-8.jpg'), data, done);\n      });\n    });\n  });","file":"unit/rotate.js","skipped":false,"dir":"test"},{"name":"Input image has Orientation EXIF tag value of 5 (270 degrees + flip), auto-rotate","suites":["Rotation"],"updatePoint":{"line":200,"column":87,"index":7853},"line":200,"code":"  it('Input image has Orientation EXIF tag value of 5 (270 degrees + flip), auto-rotate', function (done) {\n    sharp(fixtures.inputJpgWithExifMirroring).rotate().resize(320).withMetadata().toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual('jpeg', info.format);\n      assert.strictEqual(320, info.width);\n      assert.strictEqual(240, info.height);\n      sharp(data).metadata(function (err, metadata) {\n        if (err) throw err;\n        assert.strictEqual(1, metadata.orientation);\n        fixtures.assertSimilar(fixtures.expected('exif-5.jpg'), data, done);\n      });\n    });\n  });","file":"unit/rotate.js","skipped":false,"dir":"test"},{"name":"Attempt to auto-rotate using image that has no EXIF","suites":["Rotation"],"updatePoint":{"line":213,"column":57,"index":8447},"line":213,"code":"  it('Attempt to auto-rotate using image that has no EXIF', function (done) {\n    sharp(fixtures.inputJpg).rotate().resize(320).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(true, data.length > 0);\n      assert.strictEqual('jpeg', info.format);\n      assert.strictEqual(320, info.width);\n      assert.strictEqual(261, info.height);\n      done();\n    });\n  });","file":"unit/rotate.js","skipped":false,"dir":"test"},{"name":"Attempt to auto-rotate image format without EXIF support","suites":["Rotation"],"updatePoint":{"line":223,"column":62,"index":8855},"line":223,"code":"  it('Attempt to auto-rotate image format without EXIF support', function (done) {\n    sharp(fixtures.inputPng).rotate().resize(320).jpeg().toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(true, data.length > 0);\n      assert.strictEqual('jpeg', info.format);\n      assert.strictEqual(320, info.width);\n      assert.strictEqual(236, info.height);\n      done();\n    });\n  });","file":"unit/rotate.js","skipped":false,"dir":"test"},{"name":"Rotate with a string argument, should fail","suites":["Rotation"],"updatePoint":{"line":233,"column":48,"index":9256},"line":233,"code":"  it('Rotate with a string argument, should fail', function () {\n    assert.throws(function () {\n      sharp(fixtures.inputJpg).rotate('not-a-number');\n    });\n  });","file":"unit/rotate.js","skipped":false,"dir":"test"},{"name":"Flip - vertical","suites":["Rotation"],"updatePoint":{"line":238,"column":21,"index":9395},"line":238,"code":"  it('Flip - vertical', function (done) {\n    sharp(fixtures.inputJpg).resize(320).flip().withMetadata().toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual('jpeg', info.format);\n      assert.strictEqual(320, info.width);\n      assert.strictEqual(261, info.height);\n      sharp(data).metadata(function (err, metadata) {\n        if (err) throw err;\n        assert.strictEqual(1, metadata.orientation);\n        fixtures.assertSimilar(fixtures.expected('flip.jpg'), data, done);\n      });\n    });\n  });","file":"unit/rotate.js","skipped":false,"dir":"test"},{"name":"Flop - horizontal","suites":["Rotation"],"updatePoint":{"line":251,"column":23,"index":9934},"line":251,"code":"  it('Flop - horizontal', function (done) {\n    sharp(fixtures.inputJpg).resize(320).flop().withMetadata().toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual('jpeg', info.format);\n      assert.strictEqual(320, info.width);\n      assert.strictEqual(261, info.height);\n      sharp(data).metadata(function (err, metadata) {\n        if (err) throw err;\n        assert.strictEqual(1, metadata.orientation);\n        fixtures.assertSimilar(fixtures.expected('flop.jpg'), data, done);\n      });\n    });\n  });","file":"unit/rotate.js","skipped":false,"dir":"test"},{"name":"Flip and flop","suites":["Rotation"],"updatePoint":{"line":264,"column":19,"index":10469},"line":264,"code":"  it('Flip and flop', function (done) {\n    sharp(fixtures.inputJpg).resize(320).flop().toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual('jpeg', info.format);\n      assert.strictEqual(320, info.width);\n      assert.strictEqual(261, info.height);\n      fixtures.assertSimilar(fixtures.expected('flip-and-flop.jpg'), data, done);\n    });\n  });","file":"unit/rotate.js","skipped":false,"dir":"test"},{"name":"Neither flip nor flop","suites":["Rotation"],"updatePoint":{"line":273,"column":27,"index":10859},"line":273,"code":"  it('Neither flip nor flop', function (done) {\n    sharp(fixtures.inputJpg).resize(320).flip(false).flop(false).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual('jpeg', info.format);\n      assert.strictEqual(320, info.width);\n      assert.strictEqual(261, info.height);\n      fixtures.assertSimilar(fixtures.inputJpg, data, done);\n    });\n  });","file":"unit/rotate.js","skipped":false,"dir":"test"},{"name":"Auto-rotate and flip","suites":["Rotation"],"updatePoint":{"line":282,"column":26,"index":11244},"line":282,"code":"  it('Auto-rotate and flip', function (done) {\n    sharp(fixtures.inputJpgWithExif).rotate().flip().resize(320).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual('jpeg', info.format);\n      assert.strictEqual(320, info.width);\n      assert.strictEqual(240, info.height);\n      fixtures.assertSimilar(fixtures.expected('rotate-and-flip.jpg'), data, done);\n    });\n  });","file":"unit/rotate.js","skipped":false,"dir":"test"},{"name":"Auto-rotate and flop","suites":["Rotation"],"updatePoint":{"line":291,"column":26,"index":11652},"line":291,"code":"  it('Auto-rotate and flop', function (done) {\n    sharp(fixtures.inputJpgWithExif).rotate().flop().resize(320).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual('jpeg', info.format);\n      assert.strictEqual(320, info.width);\n      assert.strictEqual(240, info.height);\n      fixtures.assertSimilar(fixtures.expected('rotate-and-flop.jpg'), data, done);\n    });\n  });","file":"unit/rotate.js","skipped":false,"dir":"test"},{"name":"specific radius 10 (sigma 6)","suites":["Sharpen"],"updatePoint":{"line":7,"column":34,"index":192},"line":7,"code":"  it('specific radius 10 (sigma 6)', function (done) {\n    sharp(fixtures.inputJpg).resize(320, 240).sharpen(6).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual('jpeg', info.format);\n      assert.strictEqual(320, info.width);\n      assert.strictEqual(240, info.height);\n      fixtures.assertSimilar(fixtures.expected('sharpen-10.jpg'), data, done);\n    });\n  });","file":"unit/sharpen.js","skipped":false,"dir":"test"},{"name":"specific radius 3 (sigma 1.5) and levels 0.5, 2.5","suites":["Sharpen"],"updatePoint":{"line":16,"column":55,"index":616},"line":16,"code":"  it('specific radius 3 (sigma 1.5) and levels 0.5, 2.5', function (done) {\n    sharp(fixtures.inputJpg).resize(320, 240).sharpen(1.5, 0.5, 2.5).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual('jpeg', info.format);\n      assert.strictEqual(320, info.width);\n      assert.strictEqual(240, info.height);\n      fixtures.assertSimilar(fixtures.expected('sharpen-3-0.5-2.5.jpg'), data, done);\n    });\n  });","file":"unit/sharpen.js","skipped":false,"dir":"test"},{"name":"specific radius 5 (sigma 3.5) and levels 2, 4","suites":["Sharpen"],"updatePoint":{"line":25,"column":51,"index":1055},"line":25,"code":"  it('specific radius 5 (sigma 3.5) and levels 2, 4', function (done) {\n    sharp(fixtures.inputJpg).resize(320, 240).sharpen(3.5, 2, 4).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual('jpeg', info.format);\n      assert.strictEqual(320, info.width);\n      assert.strictEqual(240, info.height);\n      fixtures.assertSimilar(fixtures.expected('sharpen-5-2-4.jpg'), data, done);\n    });\n  });","file":"unit/sharpen.js","skipped":false,"dir":"test"},{"name":"specific radius/levels with alpha channel","suites":["Sharpen"],"updatePoint":{"line":35,"column":49,"index":1531},"line":35,"code":"    it('specific radius/levels with alpha channel', function (done) {\n      sharp(fixtures.inputPngWithTransparency).resize(320, 240).sharpen(5, 4, 8).toBuffer(function (err, data, info) {\n        if (err) throw err;\n        assert.strictEqual('png', info.format);\n        assert.strictEqual(4, info.channels);\n        assert.strictEqual(320, info.width);\n        assert.strictEqual(240, info.height);\n        fixtures.assertSimilar(fixtures.expected('sharpen-rgba.png'), data, done);\n      });\n    });","file":"unit/sharpen.js","skipped":false,"dir":"test"},{"name":"mild sharpen","suites":["Sharpen"],"updatePoint":{"line":46,"column":18,"index":2007},"line":46,"code":"  it('mild sharpen', function (done) {\n    sharp(fixtures.inputJpg).resize(320, 240).sharpen().toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual('jpeg', info.format);\n      assert.strictEqual(320, info.width);\n      assert.strictEqual(240, info.height);\n      fixtures.assertSimilar(fixtures.expected('sharpen-mild.jpg'), data, done);\n    });\n  });","file":"unit/sharpen.js","skipped":false,"dir":"test"},{"name":"invalid sigma","suites":["Sharpen"],"updatePoint":{"line":55,"column":19,"index":2396},"line":55,"code":"  it('invalid sigma', function () {\n    assert.throws(function () {\n      sharp(fixtures.inputJpg).sharpen(-1.5);\n    });\n  });","file":"unit/sharpen.js","skipped":false,"dir":"test"},{"name":"invalid flat","suites":["Sharpen"],"updatePoint":{"line":60,"column":18,"index":2523},"line":60,"code":"  it('invalid flat', function () {\n    assert.throws(function () {\n      sharp(fixtures.inputJpg).sharpen(1, -1);\n    });\n  });","file":"unit/sharpen.js","skipped":false,"dir":"test"},{"name":"invalid jagged","suites":["Sharpen"],"updatePoint":{"line":65,"column":20,"index":2653},"line":65,"code":"  it('invalid jagged', function () {\n    assert.throws(function () {\n      sharp(fixtures.inputJpg).sharpen(1, 1, -1);\n    });\n  });","file":"unit/sharpen.js","skipped":false,"dir":"test"},{"name":"sharpened image is larger than non-sharpened","suites":["Sharpen"],"updatePoint":{"line":70,"column":50,"index":2816},"line":70,"code":"  it('sharpened image is larger than non-sharpened', function (done) {\n    sharp(fixtures.inputJpg).resize(320, 240).sharpen(false).toBuffer(function (err, notSharpened, info) {\n      if (err) throw err;\n      assert.strictEqual(true, notSharpened.length > 0);\n      assert.strictEqual('jpeg', info.format);\n      assert.strictEqual(320, info.width);\n      assert.strictEqual(240, info.height);\n      sharp(fixtures.inputJpg).resize(320, 240).sharpen(true).toBuffer(function (err, sharpened, info) {\n        if (err) throw err;\n        assert.strictEqual(true, sharpened.length > 0);\n        assert.strictEqual(true, sharpened.length > notSharpened.length);\n        assert.strictEqual('jpeg', info.format);\n        assert.strictEqual(320, info.width);\n        assert.strictEqual(240, info.height);\n        done();\n      });\n    });\n  });","file":"unit/sharpen.js","skipped":false,"dir":"test"},{"name":"JPEG","suites":["Image Stats"],"updatePoint":{"line":20,"column":10,"index":520},"line":20,"code":"  it('JPEG', function (done) {\n    sharp(fixtures.inputJpg).stats(function (err, stats) {\n      if (err) throw err;\n      assert.strictEqual(true, stats.isOpaque);\n      assert.strictEqual(true, isInAcceptableRange(stats.entropy, 7.319914765248541));\n      assert.strictEqual(true, isInAcceptableRange(stats.sharpness, 0.7883011147075762));\n      const {\n        r,\n        g,\n        b\n      } = stats.dominant;\n      assert.strictEqual(40, r);\n      assert.strictEqual(40, g);\n      assert.strictEqual(40, b);\n\n      // red channel\n      assert.strictEqual(0, stats.channels[0].min);\n      assert.strictEqual(255, stats.channels[0].max);\n      assert.strictEqual(true, isInAcceptableRange(stats.channels[0].sum, 615101275));\n      assert.strictEqual(true, isInAcceptableRange(stats.channels[0].squaresSum, 83061892917));\n      assert.strictEqual(true, isInAcceptableRange(stats.channels[0].mean, 101.44954540768993));\n      assert.strictEqual(true, isInAcceptableRange(stats.channels[0].stdev, 58.373870588815414));\n      assert.strictEqual(true, isInteger(stats.channels[0].minX));\n      assert.strictEqual(true, isInRange(stats.channels[0].minX, 0, 2725));\n      assert.strictEqual(true, isInteger(stats.channels[0].minY));\n      assert.strictEqual(true, isInRange(stats.channels[0].minY, 0, 2725));\n      assert.strictEqual(true, isInteger(stats.channels[0].maxX));\n      assert.strictEqual(true, isInRange(stats.channels[0].maxX, 0, 2725));\n      assert.strictEqual(true, isInteger(stats.channels[0].maxY));\n      assert.strictEqual(true, isInRange(stats.channels[0].maxY, 0, 2725));\n\n      // green channel\n      assert.strictEqual(0, stats.channels[1].min);\n      assert.strictEqual(255, stats.channels[1].max);\n      assert.strictEqual(true, isInAcceptableRange(stats.channels[1].sum, 462824115));\n      assert.strictEqual(true, isInAcceptableRange(stats.channels[1].squaresSum, 47083677255));\n      assert.strictEqual(true, isInAcceptableRange(stats.channels[1].mean, 76.33425255128337));\n      assert.strictEqual(true, isInAcceptableRange(stats.channels[1].stdev, 44.03023262954866));\n      assert.strictEqual(true, isInteger(stats.channels[1].minX));\n      assert.strictEqual(true, isInRange(stats.channels[1].minX, 0, 2725));\n      assert.strictEqual(true, isInteger(stats.channels[1].minY));\n      assert.strictEqual(true, isInRange(stats.channels[1].minY, 0, 2725));\n      assert.strictEqual(true, isInteger(stats.channels[1].maxX));\n      assert.strictEqual(true, isInRange(stats.channels[1].maxX, 0, 2725));\n      assert.strictEqual(true, isInteger(stats.channels[1].maxY));\n      assert.strictEqual(true, isInRange(stats.channels[1].maxY, 0, 2725));\n\n      // blue channel\n      assert.strictEqual(0, stats.channels[2].min);\n      assert.strictEqual(255, stats.channels[2].max);\n      assert.strictEqual(true, isInAcceptableRange(stats.channels[2].sum, 372986756));\n      assert.strictEqual(true, isInAcceptableRange(stats.channels[2].squaresSum, 32151543524));\n      assert.strictEqual(true, isInAcceptableRange(stats.channels[2].mean, 61.51724663436759));\n      assert.strictEqual(true, isInAcceptableRange(stats.channels[2].stdev, 38.96702865090125));\n      assert.strictEqual(true, isInteger(stats.channels[2].minX));\n      assert.strictEqual(true, isInRange(stats.channels[2].minX, 0, 2725));\n      assert.strictEqual(true, isInteger(stats.channels[2].minY));\n      assert.strictEqual(true, isInRange(stats.channels[2].minY, 0, 2725));\n      assert.strictEqual(true, isInteger(stats.channels[2].maxX));\n      assert.strictEqual(true, isInRange(stats.channels[2].maxX, 0, 2725));\n      assert.strictEqual(true, isInteger(stats.channels[2].maxY));\n      assert.strictEqual(true, isInRange(stats.channels[2].maxY, 0, 2725));\n      done();\n    });\n  });","file":"unit/stats.js","skipped":false,"dir":"test"},{"name":"PNG without transparency","suites":["Image Stats"],"updatePoint":{"line":85,"column":30,"index":4313},"line":85,"code":"  it('PNG without transparency', function (done) {\n    sharp(fixtures.inputPng).stats(function (err, stats) {\n      if (err) throw err;\n      assert.strictEqual(true, stats.isOpaque);\n      assert.strictEqual(true, isInAcceptableRange(stats.entropy, 0.3409031108021736));\n      assert.strictEqual(true, isInAcceptableRange(stats.sharpness, 9.111356137722868));\n      const {\n        r,\n        g,\n        b\n      } = stats.dominant;\n      assert.strictEqual(248, r);\n      assert.strictEqual(248, g);\n      assert.strictEqual(248, b);\n\n      // red channel\n      assert.strictEqual(0, stats.channels[0].min);\n      assert.strictEqual(255, stats.channels[0].max);\n      assert.strictEqual(true, isInAcceptableRange(stats.channels[0].sum, 1391368230));\n      assert.strictEqual(true, isInAcceptableRange(stats.channels[0].squaresSum, 354798898650));\n      assert.strictEqual(true, isInAcceptableRange(stats.channels[0].mean, 238.8259925648822));\n      assert.strictEqual(true, isInAcceptableRange(stats.channels[0].stdev, 62.15121915523771));\n      assert.strictEqual(true, isInteger(stats.channels[0].minX));\n      assert.strictEqual(true, isInRange(stats.channels[0].minX, 0, 2809));\n      assert.strictEqual(true, isInteger(stats.channels[0].minY));\n      assert.strictEqual(true, isInRange(stats.channels[0].minY, 0, 2074));\n      assert.strictEqual(true, isInteger(stats.channels[0].maxX));\n      assert.strictEqual(true, isInRange(stats.channels[0].maxX, 0, 2809));\n      assert.strictEqual(true, isInteger(stats.channels[0].maxY));\n      assert.strictEqual(true, isInRange(stats.channels[0].maxY, 0, 2074));\n      done();\n    });\n  });","file":"unit/stats.js","skipped":false,"dir":"test"},{"name":"PNG with transparency","suites":["Image Stats"],"updatePoint":{"line":118,"column":27,"index":5951},"line":118,"code":"  it('PNG with transparency', function (done) {\n    sharp(fixtures.inputPngWithTransparency).stats(function (err, stats) {\n      if (err) throw err;\n      assert.strictEqual(false, stats.isOpaque);\n      assert.strictEqual(true, isInAcceptableRange(stats.entropy, 0.06778064835816622));\n      assert.strictEqual(true, isInAcceptableRange(stats.sharpness, 2.522916068931278));\n      const {\n        r,\n        g,\n        b\n      } = stats.dominant;\n      assert.strictEqual(248, r);\n      assert.strictEqual(248, g);\n      assert.strictEqual(248, b);\n\n      // red channel\n      assert.strictEqual(0, stats.channels[0].min);\n      assert.strictEqual(255, stats.channels[0].max);\n      assert.strictEqual(true, isInAcceptableRange(stats.channels[0].sum, 795678795));\n      assert.strictEqual(true, isInAcceptableRange(stats.channels[0].squaresSum, 202898092725));\n      assert.strictEqual(true, isInAcceptableRange(stats.channels[0].mean, 252.9394769668579));\n      assert.strictEqual(true, isInAcceptableRange(stats.channels[0].stdev, 22.829537532816));\n      assert.strictEqual(true, isInteger(stats.channels[0].minX));\n      assert.strictEqual(true, isInRange(stats.channels[0].minX, 0, 2048));\n      assert.strictEqual(true, isInteger(stats.channels[0].minY));\n      assert.strictEqual(true, isInRange(stats.channels[0].minY, 0, 1536));\n      assert.strictEqual(true, isInteger(stats.channels[0].maxX));\n      assert.strictEqual(true, isInRange(stats.channels[0].maxX, 0, 2048));\n      assert.strictEqual(true, isInteger(stats.channels[0].maxY));\n      assert.strictEqual(true, isInRange(stats.channels[0].maxY, 0, 1536));\n\n      // green channel\n      assert.strictEqual(0, stats.channels[1].min);\n      assert.strictEqual(255, stats.channels[1].max);\n      assert.strictEqual(true, isInAcceptableRange(stats.channels[1].sum, 795678795));\n      assert.strictEqual(true, isInAcceptableRange(stats.channels[1].squaresSum, 202898092725));\n      assert.strictEqual(true, isInAcceptableRange(stats.channels[1].mean, 252.9394769668579));\n      assert.strictEqual(true, isInAcceptableRange(stats.channels[1].stdev, 22.829537532816));\n      assert.strictEqual(true, isInteger(stats.channels[1].minX));\n      assert.strictEqual(true, isInRange(stats.channels[1].minX, 0, 2048));\n      assert.strictEqual(true, isInteger(stats.channels[1].minY));\n      assert.strictEqual(true, isInRange(stats.channels[1].minY, 0, 1536));\n      assert.strictEqual(true, isInteger(stats.channels[1].maxX));\n      assert.strictEqual(true, isInRange(stats.channels[1].maxX, 0, 2048));\n      assert.strictEqual(true, isInteger(stats.channels[1].maxY));\n      assert.strictEqual(true, isInRange(stats.channels[1].maxY, 0, 1536));\n\n      // blue channel\n      assert.strictEqual(0, stats.channels[2].min);\n      assert.strictEqual(255, stats.channels[2].max);\n      assert.strictEqual(true, isInAcceptableRange(stats.channels[2].sum, 795678795));\n      assert.strictEqual(true, isInAcceptableRange(stats.channels[2].squaresSum, 202898092725));\n      assert.strictEqual(true, isInAcceptableRange(stats.channels[2].mean, 252.9394769668579));\n      assert.strictEqual(true, isInAcceptableRange(stats.channels[2].stdev, 22.829537532816));\n      assert.strictEqual(true, isInteger(stats.channels[2].minX));\n      assert.strictEqual(true, isInRange(stats.channels[2].minX, 0, 2048));\n      assert.strictEqual(true, isInteger(stats.channels[2].minY));\n      assert.strictEqual(true, isInRange(stats.channels[2].minY, 0, 1536));\n      assert.strictEqual(true, isInteger(stats.channels[2].maxX));\n      assert.strictEqual(true, isInRange(stats.channels[2].maxX, 0, 2048));\n      assert.strictEqual(true, isInteger(stats.channels[2].maxY));\n      assert.strictEqual(true, isInRange(stats.channels[2].maxY, 0, 1536));\n\n      // alpha channel\n      assert.strictEqual(0, stats.channels[3].min);\n      assert.strictEqual(255, stats.channels[3].max);\n      assert.strictEqual(true, isInAcceptableRange(stats.channels[3].sum, 5549142));\n      assert.strictEqual(true, isInAcceptableRange(stats.channels[3].squaresSum, 1333571132));\n      assert.strictEqual(true, isInAcceptableRange(stats.channels[3].mean, 1.7640247344970703));\n      assert.strictEqual(true, isInAcceptableRange(stats.channels[3].stdev, 20.51387814157297));\n      assert.strictEqual(true, isInteger(stats.channels[3].minX));\n      assert.strictEqual(true, isInRange(stats.channels[3].minX, 0, 2048));\n      assert.strictEqual(true, isInteger(stats.channels[3].minY));\n      assert.strictEqual(true, isInRange(stats.channels[3].minY, 0, 1536));\n      assert.strictEqual(true, isInteger(stats.channels[3].maxX));\n      assert.strictEqual(true, isInRange(stats.channels[3].maxX, 0, 2048));\n      assert.strictEqual(true, isInteger(stats.channels[3].maxY));\n      assert.strictEqual(true, isInRange(stats.channels[3].maxY, 0, 1536));\n      done();\n    });\n  });","file":"unit/stats.js","skipped":false,"dir":"test"},{"name":"PNG fully transparent","suites":["Image Stats"],"updatePoint":{"line":199,"column":27,"index":10833},"line":199,"code":"  it('PNG fully transparent', function (done) {\n    sharp(fixtures.inputPngCompleteTransparency).stats(function (err, stats) {\n      if (err) throw err;\n      assert.strictEqual(false, stats.isOpaque);\n      assert.strictEqual(true, isInAcceptableRange(stats.entropy, 0));\n      assert.strictEqual(true, isInAcceptableRange(stats.sharpness, 0));\n      const {\n        r,\n        g,\n        b\n      } = stats.dominant;\n      assert.strictEqual(72, r);\n      assert.strictEqual(104, g);\n      assert.strictEqual(72, b);\n\n      // alpha channel\n      assert.strictEqual(0, stats.channels[3].min);\n      assert.strictEqual(0, stats.channels[3].max);\n      assert.strictEqual(true, isInAcceptableRange(stats.channels[3].sum, 0));\n      assert.strictEqual(true, isInAcceptableRange(stats.channels[3].squaresSum, 0));\n      assert.strictEqual(true, isInAcceptableRange(stats.channels[3].mean, 0));\n      assert.strictEqual(true, isInAcceptableRange(stats.channels[3].stdev, 0));\n      assert.strictEqual(true, isInteger(stats.channels[3].minX));\n      assert.strictEqual(true, isInRange(stats.channels[3].minX, 0, 300));\n      assert.strictEqual(true, isInteger(stats.channels[3].minY));\n      assert.strictEqual(true, isInRange(stats.channels[3].minY, 0, 300));\n      assert.strictEqual(true, isInteger(stats.channels[3].maxX));\n      assert.strictEqual(true, isInRange(stats.channels[3].maxX, 0, 300));\n      assert.strictEqual(true, isInteger(stats.channels[3].maxY));\n      assert.strictEqual(true, isInRange(stats.channels[3].maxY, 0, 300));\n      done();\n    });\n  });","file":"unit/stats.js","skipped":false,"dir":"test"},{"name":"Tiff","suites":["Image Stats"],"updatePoint":{"line":232,"column":10,"index":12384},"line":232,"code":"  it('Tiff', function (done) {\n    sharp(fixtures.inputTiff).stats(function (err, stats) {\n      if (err) throw err;\n      assert.strictEqual(true, stats.isOpaque);\n      assert.strictEqual(true, isInAcceptableRange(stats.entropy, 0.3851250782608986));\n      assert.strictEqual(true, isInAcceptableRange(stats.sharpness, 10.312521863719589));\n      const {\n        r,\n        g,\n        b\n      } = stats.dominant;\n      assert.strictEqual(248, r);\n      assert.strictEqual(248, g);\n      assert.strictEqual(248, b);\n\n      // red channel\n      assert.strictEqual(0, stats.channels[0].min);\n      assert.strictEqual(255, stats.channels[0].max);\n      assert.strictEqual(true, isInAcceptableRange(stats.channels[0].sum, 1887266220));\n      assert.strictEqual(true, isInAcceptableRange(stats.channels[0].squaresSum, 481252886100));\n      assert.strictEqual(true, isInAcceptableRange(stats.channels[0].mean, 235.81772349417824));\n      assert.strictEqual(true, isInAcceptableRange(stats.channels[0].stdev, 67.25712856093298));\n      assert.strictEqual(true, isInteger(stats.channels[0].minX));\n      assert.strictEqual(true, isInRange(stats.channels[0].minX, 0, 2464));\n      assert.strictEqual(true, isInteger(stats.channels[0].minY));\n      assert.strictEqual(true, isInRange(stats.channels[0].minY, 0, 3248));\n      assert.strictEqual(true, isInteger(stats.channels[0].maxX));\n      assert.strictEqual(true, isInRange(stats.channels[0].maxX, 0, 2464));\n      assert.strictEqual(true, isInteger(stats.channels[0].maxY));\n      assert.strictEqual(true, isInRange(stats.channels[0].maxY, 0, 3248));\n      done();\n    });\n  });","file":"unit/stats.js","skipped":false,"dir":"test"},{"name":"WebP","suites":["Image Stats"],"updatePoint":{"line":265,"column":10,"index":14008},"line":265,"code":"  it('WebP', function (done) {\n    sharp(fixtures.inputWebP).stats(function (err, stats) {\n      if (err) throw err;\n      assert.strictEqual(true, stats.isOpaque);\n      assert.strictEqual(true, isInAcceptableRange(stats.entropy, 7.51758075132966));\n      assert.strictEqual(true, isInAcceptableRange(stats.sharpness, 9.959951636662941));\n      const {\n        r,\n        g,\n        b\n      } = stats.dominant;\n      assert.strictEqual(40, r);\n      assert.strictEqual(136, g);\n      assert.strictEqual(200, b);\n\n      // red channel\n      assert.strictEqual(0, stats.channels[0].min);\n      assert.strictEqual(true, isInRange(stats.channels[0].max, 254, 255));\n      assert.strictEqual(true, isInAcceptableRange(stats.channels[0].sum, 83291370));\n      assert.strictEqual(true, isInAcceptableRange(stats.channels[0].squaresSum, 11379783198));\n      assert.strictEqual(true, isInAcceptableRange(stats.channels[0].mean, 105.36169496842616));\n      assert.strictEqual(true, isInAcceptableRange(stats.channels[0].stdev, 57.39412151419967));\n      assert.strictEqual(true, isInteger(stats.channels[0].minX));\n      assert.strictEqual(true, isInRange(stats.channels[0].minX, 0, 1024));\n      assert.strictEqual(true, isInteger(stats.channels[0].minY));\n      assert.strictEqual(true, isInRange(stats.channels[0].minY, 0, 772));\n      assert.strictEqual(true, isInteger(stats.channels[0].maxX));\n      assert.strictEqual(true, isInRange(stats.channels[0].maxX, 0, 1024));\n      assert.strictEqual(true, isInteger(stats.channels[0].maxY));\n      assert.strictEqual(true, isInRange(stats.channels[0].maxY, 0, 772));\n\n      // green channel\n      assert.strictEqual(0, stats.channels[1].min);\n      assert.strictEqual(true, isInRange(stats.channels[1].max, 254, 255));\n      assert.strictEqual(true, isInAcceptableRange(stats.channels[1].sum, 120877425));\n      assert.strictEqual(true, isInAcceptableRange(stats.channels[1].squaresSum, 20774687595));\n      assert.strictEqual(true, isInAcceptableRange(stats.channels[1].mean, 152.9072025279307));\n      assert.strictEqual(true, isInAcceptableRange(stats.channels[1].stdev, 53.84143349689916));\n      assert.strictEqual(true, isInteger(stats.channels[1].minX));\n      assert.strictEqual(true, isInRange(stats.channels[1].minX, 0, 1024));\n      assert.strictEqual(true, isInteger(stats.channels[1].minY));\n      assert.strictEqual(true, isInRange(stats.channels[1].minY, 0, 772));\n      assert.strictEqual(true, isInteger(stats.channels[1].maxX));\n      assert.strictEqual(true, isInRange(stats.channels[1].maxX, 0, 1024));\n      assert.strictEqual(true, isInteger(stats.channels[1].maxY));\n      assert.strictEqual(true, isInRange(stats.channels[1].maxY, 0, 772));\n\n      // blue channel\n      assert.strictEqual(0, stats.channels[2].min);\n      assert.strictEqual(true, isInRange(stats.channels[2].max, 254, 255));\n      assert.strictEqual(true, isInAcceptableRange(stats.channels[2].sum, 138938859));\n      assert.strictEqual(true, isInAcceptableRange(stats.channels[2].squaresSum, 28449125593));\n      assert.strictEqual(true, isInAcceptableRange(stats.channels[2].mean, 175.75450711423252));\n      assert.strictEqual(true, isInAcceptableRange(stats.channels[2].stdev, 71.39929031070358));\n      assert.strictEqual(true, isInteger(stats.channels[2].minX));\n      assert.strictEqual(true, isInRange(stats.channels[2].minX, 0, 1024));\n      assert.strictEqual(true, isInteger(stats.channels[2].minY));\n      assert.strictEqual(true, isInRange(stats.channels[2].minY, 0, 772));\n      assert.strictEqual(true, isInteger(stats.channels[2].maxX));\n      assert.strictEqual(true, isInRange(stats.channels[2].maxX, 0, 1024));\n      assert.strictEqual(true, isInteger(stats.channels[2].maxY));\n      assert.strictEqual(true, isInRange(stats.channels[2].maxY, 0, 772));\n      done();\n    });\n  });","file":"unit/stats.js","skipped":false,"dir":"test"},{"name":"GIF","suites":["Image Stats"],"updatePoint":{"line":330,"column":9,"index":17840},"line":330,"code":"  it('GIF', function (done) {\n    sharp(fixtures.inputGif).stats(function (err, stats) {\n      if (err) throw err;\n      assert.strictEqual(true, stats.isOpaque);\n      assert.strictEqual(true, isInAcceptableRange(stats.entropy, 6.087309412541799));\n      assert.strictEqual(true, isInAcceptableRange(stats.sharpness, 2.9250574456255682));\n      const {\n        r,\n        g,\n        b\n      } = stats.dominant;\n      assert.strictEqual(120, r);\n      assert.strictEqual(136, g);\n      assert.strictEqual(88, b);\n\n      // red channel\n      assert.strictEqual(35, stats.channels[0].min);\n      assert.strictEqual(254, stats.channels[0].max);\n      assert.strictEqual(true, isInAcceptableRange(stats.channels[0].sum, 56088385));\n      assert.strictEqual(true, isInAcceptableRange(stats.channels[0].squaresSum, 8002132113));\n      assert.strictEqual(true, isInAcceptableRange(stats.channels[0].mean, 131.53936444652908));\n      assert.strictEqual(true, isInAcceptableRange(stats.channels[0].stdev, 38.26389131415863));\n      assert.strictEqual(true, isInteger(stats.channels[0].minX));\n      assert.strictEqual(true, isInRange(stats.channels[0].minX, 0, 800));\n      assert.strictEqual(true, isInteger(stats.channels[0].minY));\n      assert.strictEqual(true, isInRange(stats.channels[0].minY, 0, 533));\n      assert.strictEqual(true, isInteger(stats.channels[0].maxX));\n      assert.strictEqual(true, isInRange(stats.channels[0].maxX, 0, 800));\n      assert.strictEqual(true, isInteger(stats.channels[0].maxY));\n      assert.strictEqual(true, isInRange(stats.channels[0].maxY, 0, 533));\n\n      // green channel\n      assert.strictEqual(43, stats.channels[1].min);\n      assert.strictEqual(255, stats.channels[1].max);\n      assert.strictEqual(true, isInAcceptableRange(stats.channels[1].sum, 58612156));\n      assert.strictEqual(true, isInAcceptableRange(stats.channels[1].squaresSum, 8548344254));\n      assert.strictEqual(true, isInAcceptableRange(stats.channels[1].mean, 137.45815196998123));\n      assert.strictEqual(true, isInAcceptableRange(stats.channels[1].stdev, 33.955424103758205));\n      assert.strictEqual(true, isInteger(stats.channels[1].minX));\n      assert.strictEqual(true, isInRange(stats.channels[1].minX, 0, 800));\n      assert.strictEqual(true, isInteger(stats.channels[1].minY));\n      assert.strictEqual(true, isInRange(stats.channels[1].minY, 0, 533));\n      assert.strictEqual(true, isInteger(stats.channels[1].maxX));\n      assert.strictEqual(true, isInRange(stats.channels[1].maxX, 0, 800));\n      assert.strictEqual(true, isInteger(stats.channels[1].maxY));\n      assert.strictEqual(true, isInRange(stats.channels[1].maxY, 0, 533));\n\n      // blue channel\n      assert.strictEqual(51, stats.channels[2].min);\n      assert.strictEqual(254, stats.channels[2].max);\n      assert.strictEqual(true, isInAcceptableRange(stats.channels[2].sum, 49628525));\n      assert.strictEqual(true, isInAcceptableRange(stats.channels[2].squaresSum, 6450556071));\n      assert.strictEqual(true, isInAcceptableRange(stats.channels[2].mean, 116.38959896810506));\n      assert.strictEqual(true, isInAcceptableRange(stats.channels[2].stdev, 39.7669551046809));\n      assert.strictEqual(true, isInteger(stats.channels[2].minX));\n      assert.strictEqual(true, isInRange(stats.channels[2].minX, 0, 800));\n      assert.strictEqual(true, isInteger(stats.channels[2].minY));\n      assert.strictEqual(true, isInRange(stats.channels[2].minY, 0, 533));\n      assert.strictEqual(true, isInteger(stats.channels[2].maxX));\n      assert.strictEqual(true, isInRange(stats.channels[2].maxX, 0, 800));\n      assert.strictEqual(true, isInteger(stats.channels[2].maxY));\n      assert.strictEqual(true, isInRange(stats.channels[2].maxY, 0, 533));\n      done();\n    });\n  });","file":"unit/stats.js","skipped":false,"dir":"test"},{"name":"Grayscale GIF with alpha","suites":["Image Stats"],"updatePoint":{"line":395,"column":30,"index":21621},"line":395,"code":"  it('Grayscale GIF with alpha', function (done) {\n    sharp(fixtures.inputGifGreyPlusAlpha).stats(function (err, stats) {\n      if (err) throw err;\n      assert.strictEqual(false, stats.isOpaque);\n      assert.strictEqual(true, isInAcceptableRange(stats.entropy, 1));\n      assert.strictEqual(true, isInAcceptableRange(stats.sharpness, 15.870619016486861));\n      const {\n        r,\n        g,\n        b\n      } = stats.dominant;\n      assert.strictEqual(8, r);\n      assert.strictEqual(8, g);\n      assert.strictEqual(8, b);\n\n      // gray channel\n      assert.strictEqual(0, stats.channels[0].min);\n      assert.strictEqual(101, stats.channels[0].max);\n      assert.strictEqual(true, isInAcceptableRange(stats.channels[0].sum, 101));\n      assert.strictEqual(true, isInAcceptableRange(stats.channels[0].squaresSum, 10201));\n      assert.strictEqual(true, isInAcceptableRange(stats.channels[0].mean, 50.5));\n      assert.strictEqual(true, isInAcceptableRange(stats.channels[0].stdev, 71.4177848998413));\n      assert.strictEqual(true, isInteger(stats.channels[0].minX));\n      assert.strictEqual(true, isInRange(stats.channels[0].minX, 0, 2));\n      assert.strictEqual(true, isInteger(stats.channels[0].minY));\n      assert.strictEqual(true, isInRange(stats.channels[0].minY, 0, 1));\n      assert.strictEqual(true, isInteger(stats.channels[0].maxX));\n      assert.strictEqual(true, isInRange(stats.channels[0].maxX, 0, 2));\n      assert.strictEqual(true, isInteger(stats.channels[0].maxY));\n      assert.strictEqual(true, isInRange(stats.channels[0].maxY, 0, 1));\n\n      // alpha channel\n      assert.strictEqual(0, stats.channels[3].min);\n      assert.strictEqual(255, stats.channels[3].max);\n      assert.strictEqual(true, isInAcceptableRange(stats.channels[3].sum, 255));\n      assert.strictEqual(true, isInAcceptableRange(stats.channels[3].squaresSum, 65025));\n      assert.strictEqual(true, isInAcceptableRange(stats.channels[3].mean, 127.5));\n      assert.strictEqual(true, isInAcceptableRange(stats.channels[3].stdev, 180.31222920256963));\n      assert.strictEqual(true, isInteger(stats.channels[3].minX));\n      assert.strictEqual(true, isInRange(stats.channels[3].minX, 0, 2));\n      assert.strictEqual(true, isInteger(stats.channels[3].minY));\n      assert.strictEqual(true, isInRange(stats.channels[3].minY, 0, 1));\n      assert.strictEqual(true, isInteger(stats.channels[3].maxX));\n      assert.strictEqual(true, isInRange(stats.channels[3].maxX, 0, 2));\n      assert.strictEqual(true, isInteger(stats.channels[3].maxY));\n      assert.strictEqual(true, isInRange(stats.channels[3].maxY, 0, 1));\n      done();\n    });\n  });","file":"unit/stats.js","skipped":false,"dir":"test"},{"name":"CMYK input without profile","suites":["Image Stats"],"updatePoint":{"line":444,"column":32,"index":24260},"line":444,"code":"  it('CMYK input without profile', () => sharp(fixtures.inputJpgWithCmykNoProfile).stats().then(stats => {\n    assert.strictEqual(4, stats.channels.length);\n    assert.strictEqual(true, stats.isOpaque);\n  }));","file":"unit/stats.js","skipped":false,"dir":"test"},{"name":"Dominant colour","suites":["Image Stats"],"updatePoint":{"line":448,"column":21,"index":24459},"line":448,"code":"  it('Dominant colour', () => sharp(fixtures.inputJpgBooleanTest).stats().then(({\n    dominant\n  }) => {\n    const {\n      r,\n      g,\n      b\n    } = dominant;\n    assert.strictEqual(r, 8);\n    assert.strictEqual(g, 136);\n    assert.strictEqual(b, 248);\n  }));","file":"unit/stats.js","skipped":false,"dir":"test"},{"name":"Entropy and sharpness of 1x1 input are zero","suites":["Image Stats"],"updatePoint":{"line":460,"column":49,"index":24749},"line":460,"code":"  it('Entropy and sharpness of 1x1 input are zero', async () => {\n    const {\n      entropy,\n      sharpness\n    } = await sharp({\n      create: {\n        width: 1,\n        height: 1,\n        channels: 3,\n        background: 'red'\n      }\n    }).stats();\n    assert.strictEqual(entropy, 0);\n    assert.strictEqual(sharpness, 0);\n  });","file":"unit/stats.js","skipped":false,"dir":"test"},{"name":"Stream in, Callback out","suites":["Image Stats"],"updatePoint":{"line":475,"column":29,"index":25064},"line":475,"code":"  it('Stream in, Callback out', function (done) {\n    const readable = fs.createReadStream(fixtures.inputJpg);\n    const pipeline = sharp().stats(function (err, stats) {\n      if (err) throw err;\n      assert.strictEqual(true, stats.isOpaque);\n      assert.strictEqual(true, isInAcceptableRange(stats.entropy, 7.319914765248541));\n      assert.strictEqual(true, isInAcceptableRange(stats.sharpness, 0.788301114707569));\n      const {\n        r,\n        g,\n        b\n      } = stats.dominant;\n      assert.strictEqual(40, r);\n      assert.strictEqual(40, g);\n      assert.strictEqual(40, b);\n\n      // red channel\n      assert.strictEqual(0, stats.channels[0].min);\n      assert.strictEqual(255, stats.channels[0].max);\n      assert.strictEqual(true, isInAcceptableRange(stats.channels[0].sum, 615101275));\n      assert.strictEqual(true, isInAcceptableRange(stats.channels[0].squaresSum, 83061892917));\n      assert.strictEqual(true, isInAcceptableRange(stats.channels[0].mean, 101.44954540768993));\n      assert.strictEqual(true, isInAcceptableRange(stats.channels[0].stdev, 58.373870588815414));\n      assert.strictEqual(true, isInteger(stats.channels[0].minX));\n      assert.strictEqual(true, isInRange(stats.channels[0].minX, 0, 2725));\n      assert.strictEqual(true, isInteger(stats.channels[0].minY));\n      assert.strictEqual(true, isInRange(stats.channels[0].minY, 0, 2725));\n      assert.strictEqual(true, isInteger(stats.channels[0].maxX));\n      assert.strictEqual(true, isInRange(stats.channels[0].maxX, 0, 2725));\n      assert.strictEqual(true, isInteger(stats.channels[0].maxY));\n      assert.strictEqual(true, isInRange(stats.channels[0].maxY, 0, 2725));\n\n      // green channel\n      assert.strictEqual(0, stats.channels[1].min);\n      assert.strictEqual(255, stats.channels[1].max);\n      assert.strictEqual(true, isInAcceptableRange(stats.channels[1].sum, 462824115));\n      assert.strictEqual(true, isInAcceptableRange(stats.channels[1].squaresSum, 47083677255));\n      assert.strictEqual(true, isInAcceptableRange(stats.channels[1].mean, 76.33425255128337));\n      assert.strictEqual(true, isInAcceptableRange(stats.channels[1].stdev, 44.03023262954866));\n      assert.strictEqual(true, isInteger(stats.channels[1].minX));\n      assert.strictEqual(true, isInRange(stats.channels[1].minX, 0, 2725));\n      assert.strictEqual(true, isInteger(stats.channels[1].minY));\n      assert.strictEqual(true, isInRange(stats.channels[1].minY, 0, 2725));\n      assert.strictEqual(true, isInteger(stats.channels[1].maxX));\n      assert.strictEqual(true, isInRange(stats.channels[1].maxX, 0, 2725));\n      assert.strictEqual(true, isInteger(stats.channels[1].maxY));\n      assert.strictEqual(true, isInRange(stats.channels[1].maxY, 0, 2725));\n\n      // blue channel\n      assert.strictEqual(0, stats.channels[2].min);\n      assert.strictEqual(255, stats.channels[2].max);\n      assert.strictEqual(true, isInAcceptableRange(stats.channels[2].sum, 372986756));\n      assert.strictEqual(true, isInAcceptableRange(stats.channels[2].squaresSum, 32151543524));\n      assert.strictEqual(true, isInAcceptableRange(stats.channels[2].mean, 61.51724663436759));\n      assert.strictEqual(true, isInAcceptableRange(stats.channels[2].stdev, 38.96702865090125));\n      assert.strictEqual(true, isInteger(stats.channels[2].minX));\n      assert.strictEqual(true, isInRange(stats.channels[2].minX, 0, 2725));\n      assert.strictEqual(true, isInteger(stats.channels[2].minY));\n      assert.strictEqual(true, isInRange(stats.channels[2].minY, 0, 2725));\n      assert.strictEqual(true, isInteger(stats.channels[2].maxX));\n      assert.strictEqual(true, isInRange(stats.channels[2].maxX, 0, 2725));\n      assert.strictEqual(true, isInteger(stats.channels[2].maxY));\n      assert.strictEqual(true, isInRange(stats.channels[2].maxY, 0, 2725));\n      done();\n    });\n    readable.pipe(pipeline);\n  });","file":"unit/stats.js","skipped":false,"dir":"test"},{"name":"Stream in, Promise out","suites":["Image Stats"],"updatePoint":{"line":542,"column":28,"index":28944},"line":542,"code":"  it('Stream in, Promise out', function () {\n    const pipeline = sharp();\n    fs.createReadStream(fixtures.inputJpg).pipe(pipeline);\n    return pipeline.stats().then(function (stats) {\n      assert.strictEqual(true, stats.isOpaque);\n      assert.strictEqual(true, isInAcceptableRange(stats.entropy, 7.319914765248541));\n      assert.strictEqual(true, isInAcceptableRange(stats.sharpness, 0.788301114707569));\n      const {\n        r,\n        g,\n        b\n      } = stats.dominant;\n      assert.strictEqual(40, r);\n      assert.strictEqual(40, g);\n      assert.strictEqual(40, b);\n\n      // red channel\n      assert.strictEqual(0, stats.channels[0].min);\n      assert.strictEqual(255, stats.channels[0].max);\n      assert.strictEqual(true, isInAcceptableRange(stats.channels[0].sum, 615101275));\n      assert.strictEqual(true, isInAcceptableRange(stats.channels[0].squaresSum, 83061892917));\n      assert.strictEqual(true, isInAcceptableRange(stats.channels[0].mean, 101.44954540768993));\n      assert.strictEqual(true, isInAcceptableRange(stats.channels[0].stdev, 58.373870588815414));\n      assert.strictEqual(true, isInteger(stats.channels[0].minX));\n      assert.strictEqual(true, isInRange(stats.channels[0].minX, 0, 2725));\n      assert.strictEqual(true, isInteger(stats.channels[0].minY));\n      assert.strictEqual(true, isInRange(stats.channels[0].minY, 0, 2725));\n      assert.strictEqual(true, isInteger(stats.channels[0].maxX));\n      assert.strictEqual(true, isInRange(stats.channels[0].maxX, 0, 2725));\n      assert.strictEqual(true, isInteger(stats.channels[0].maxY));\n      assert.strictEqual(true, isInRange(stats.channels[0].maxY, 0, 2725));\n\n      // green channel\n      assert.strictEqual(0, stats.channels[1].min);\n      assert.strictEqual(255, stats.channels[1].max);\n      assert.strictEqual(true, isInAcceptableRange(stats.channels[1].sum, 462824115));\n      assert.strictEqual(true, isInAcceptableRange(stats.channels[1].squaresSum, 47083677255));\n      assert.strictEqual(true, isInAcceptableRange(stats.channels[1].mean, 76.33425255128337));\n      assert.strictEqual(true, isInAcceptableRange(stats.channels[1].stdev, 44.03023262954866));\n      assert.strictEqual(true, isInteger(stats.channels[0].minX));\n      assert.strictEqual(true, isInRange(stats.channels[0].minX, 0, 2725));\n      assert.strictEqual(true, isInteger(stats.channels[0].minY));\n      assert.strictEqual(true, isInRange(stats.channels[0].minY, 0, 2725));\n      assert.strictEqual(true, isInteger(stats.channels[0].maxX));\n      assert.strictEqual(true, isInRange(stats.channels[0].maxX, 0, 2725));\n      assert.strictEqual(true, isInteger(stats.channels[0].maxY));\n      assert.strictEqual(true, isInRange(stats.channels[0].maxY, 0, 2725));\n\n      // blue channel\n      assert.strictEqual(0, stats.channels[2].min);\n      assert.strictEqual(255, stats.channels[2].max);\n      assert.strictEqual(true, isInAcceptableRange(stats.channels[2].sum, 372986756));\n      assert.strictEqual(true, isInAcceptableRange(stats.channels[2].squaresSum, 32151543524));\n      assert.strictEqual(true, isInAcceptableRange(stats.channels[2].mean, 61.51724663436759));\n      assert.strictEqual(true, isInAcceptableRange(stats.channels[2].stdev, 38.96702865090125));\n      assert.strictEqual(true, isInteger(stats.channels[0].minX));\n      assert.strictEqual(true, isInRange(stats.channels[0].minX, 0, 2725));\n      assert.strictEqual(true, isInteger(stats.channels[0].minY));\n      assert.strictEqual(true, isInRange(stats.channels[0].minY, 0, 2725));\n      assert.strictEqual(true, isInteger(stats.channels[0].maxX));\n      assert.strictEqual(true, isInRange(stats.channels[0].maxX, 0, 2725));\n      assert.strictEqual(true, isInteger(stats.channels[0].maxY));\n      assert.strictEqual(true, isInRange(stats.channels[0].maxY, 0, 2725));\n    }).catch(function (err) {\n      throw err;\n    });\n  });","file":"unit/stats.js","skipped":false,"dir":"test"},{"name":"File in, Promise out","suites":["Image Stats"],"updatePoint":{"line":609,"column":26,"index":32817},"line":609,"code":"  it('File in, Promise out', function () {\n    return sharp(fixtures.inputJpg).stats().then(function (stats) {\n      assert.strictEqual(true, stats.isOpaque);\n      assert.strictEqual(true, isInAcceptableRange(stats.entropy, 7.319914765248541));\n      assert.strictEqual(true, isInAcceptableRange(stats.sharpness, 0.788301114707569));\n      const {\n        r,\n        g,\n        b\n      } = stats.dominant;\n      assert.strictEqual(40, r);\n      assert.strictEqual(40, g);\n      assert.strictEqual(40, b);\n\n      // red channel\n      assert.strictEqual(0, stats.channels[0].min);\n      assert.strictEqual(255, stats.channels[0].max);\n      assert.strictEqual(true, isInAcceptableRange(stats.channels[0].sum, 615101275));\n      assert.strictEqual(true, isInAcceptableRange(stats.channels[0].squaresSum, 83061892917));\n      assert.strictEqual(true, isInAcceptableRange(stats.channels[0].mean, 101.44954540768993));\n      assert.strictEqual(true, isInAcceptableRange(stats.channels[0].stdev, 58.373870588815414));\n      assert.strictEqual(true, isInteger(stats.channels[0].minX));\n      assert.strictEqual(true, isInRange(stats.channels[0].minX, 0, 2725));\n      assert.strictEqual(true, isInteger(stats.channels[0].minY));\n      assert.strictEqual(true, isInRange(stats.channels[0].minY, 0, 2725));\n      assert.strictEqual(true, isInteger(stats.channels[0].maxX));\n      assert.strictEqual(true, isInRange(stats.channels[0].maxX, 0, 2725));\n      assert.strictEqual(true, isInteger(stats.channels[0].maxY));\n      assert.strictEqual(true, isInRange(stats.channels[0].maxY, 0, 2725));\n\n      // green channel\n      assert.strictEqual(0, stats.channels[1].min);\n      assert.strictEqual(255, stats.channels[1].max);\n      assert.strictEqual(true, isInAcceptableRange(stats.channels[1].sum, 462824115));\n      assert.strictEqual(true, isInAcceptableRange(stats.channels[1].squaresSum, 47083677255));\n      assert.strictEqual(true, isInAcceptableRange(stats.channels[1].mean, 76.33425255128337));\n      assert.strictEqual(true, isInAcceptableRange(stats.channels[1].stdev, 44.03023262954866));\n      assert.strictEqual(true, isInteger(stats.channels[0].minX));\n      assert.strictEqual(true, isInRange(stats.channels[0].minX, 0, 2725));\n      assert.strictEqual(true, isInteger(stats.channels[0].minY));\n      assert.strictEqual(true, isInRange(stats.channels[0].minY, 0, 2725));\n      assert.strictEqual(true, isInteger(stats.channels[0].maxX));\n      assert.strictEqual(true, isInRange(stats.channels[0].maxX, 0, 2725));\n      assert.strictEqual(true, isInteger(stats.channels[0].maxY));\n      assert.strictEqual(true, isInRange(stats.channels[0].maxY, 0, 2725));\n\n      // blue channel\n      assert.strictEqual(0, stats.channels[2].min);\n      assert.strictEqual(255, stats.channels[2].max);\n      assert.strictEqual(true, isInAcceptableRange(stats.channels[2].sum, 372986756));\n      assert.strictEqual(true, isInAcceptableRange(stats.channels[2].squaresSum, 32151543524));\n      assert.strictEqual(true, isInAcceptableRange(stats.channels[2].mean, 61.51724663436759));\n      assert.strictEqual(true, isInAcceptableRange(stats.channels[2].stdev, 38.96702865090125));\n      assert.strictEqual(true, isInteger(stats.channels[0].minX));\n      assert.strictEqual(true, isInRange(stats.channels[0].minX, 0, 2725));\n      assert.strictEqual(true, isInteger(stats.channels[0].minY));\n      assert.strictEqual(true, isInRange(stats.channels[0].minY, 0, 2725));\n      assert.strictEqual(true, isInteger(stats.channels[0].maxX));\n      assert.strictEqual(true, isInRange(stats.channels[0].maxX, 0, 2725));\n      assert.strictEqual(true, isInteger(stats.channels[0].maxY));\n      assert.strictEqual(true, isInRange(stats.channels[0].maxY, 0, 2725));\n    }).catch(function (err) {\n      throw err;\n    });\n  });","file":"unit/stats.js","skipped":false,"dir":"test"},{"name":"Blurred image has lower sharpness than original","suites":["Image Stats"],"updatePoint":{"line":674,"column":53,"index":36644},"line":674,"code":"  it('Blurred image has lower sharpness than original', () => {\n    const original = sharp(fixtures.inputJpg).stats();\n    const blurred = sharp(fixtures.inputJpg).blur().toBuffer().then(blur => sharp(blur).stats());\n    return Promise.all([original, blurred]).then(([original, blurred]) => {\n      assert.strictEqual(true, isInAcceptableRange(original.sharpness, 0.7883011147075476));\n      assert.strictEqual(true, isInAcceptableRange(blurred.sharpness, 0.4791559805997398));\n    });\n  });","file":"unit/stats.js","skipped":false,"dir":"test"},{"name":"File input with corrupt header fails gracefully","suites":["Image Stats"],"updatePoint":{"line":682,"column":53,"index":37136},"line":682,"code":"  it('File input with corrupt header fails gracefully', function (done) {\n    sharp(fixtures.inputJpgWithCorruptHeader).stats(function (err) {\n      assert.strictEqual(true, !!err);\n      done();\n    });\n  });","file":"unit/stats.js","skipped":false,"dir":"test"},{"name":"File input with corrupt header fails gracefully, Promise out","suites":["Image Stats"],"updatePoint":{"line":688,"column":66,"index":37359},"line":688,"code":"  it('File input with corrupt header fails gracefully, Promise out', function () {\n    return sharp(fixtures.inputJpgWithCorruptHeader).stats().then(function (stats) {\n      throw new Error('Corrupt Header file');\n    }).catch(function (err) {\n      assert.ok(!!err);\n    });\n  });","file":"unit/stats.js","skipped":false,"dir":"test"},{"name":"File input with corrupt header fails gracefully, Stream In, Promise Out","suites":["Image Stats"],"updatePoint":{"line":695,"column":77,"index":37652},"line":695,"code":"  it('File input with corrupt header fails gracefully, Stream In, Promise Out', function () {\n    const pipeline = sharp();\n    fs.createReadStream(fixtures.inputJpgWithCorruptHeader).pipe(pipeline);\n    return pipeline.stats().then(function (stats) {\n      throw new Error('Corrupt Header file');\n    }).catch(function (err) {\n      assert.ok(!!err);\n    });\n  });","file":"unit/stats.js","skipped":false,"dir":"test"},{"name":"Buffer input with corrupt header fails gracefully","suites":["Image Stats"],"updatePoint":{"line":704,"column":55,"index":37996},"line":704,"code":"  it('Buffer input with corrupt header fails gracefully', function (done) {\n    sharp(fs.readFileSync(fixtures.inputJpgWithCorruptHeader)).stats(function (err) {\n      assert.strictEqual(true, !!err);\n      done();\n    });\n  });","file":"unit/stats.js","skipped":false,"dir":"test"},{"name":"Non-existent file in, Promise out","suites":["Image Stats"],"updatePoint":{"line":710,"column":39,"index":38209},"line":710,"code":"  it('Non-existent file in, Promise out', function (done) {\n    sharp('fail').stats().then(function (stats) {\n      throw new Error('Non-existent file');\n    }, function (err) {\n      assert.ok(!!err);\n      done();\n    });\n  });","file":"unit/stats.js","skipped":false,"dir":"test"},{"name":"Convert SVG to PNG at default 72DPI","suites":["SVG input"],"updatePoint":{"line":8,"column":41,"index":227},"line":8,"code":"  it('Convert SVG to PNG at default 72DPI', function (done) {\n    sharp(fixtures.inputSvg).resize(1024).extract({\n      left: 290,\n      top: 760,\n      width: 40,\n      height: 40\n    }).toFormat('png').toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual('png', info.format);\n      assert.strictEqual(40, info.width);\n      assert.strictEqual(40, info.height);\n      fixtures.assertSimilar(fixtures.expected('svg72.png'), data, function (err) {\n        if (err) throw err;\n        sharp(data).metadata(function (err, info) {\n          if (err) throw err;\n          assert.strictEqual(72, info.density);\n          done();\n        });\n      });\n    });\n  });","file":"unit/svg.js","skipped":false,"dir":"test"},{"name":"Convert SVG to PNG at 1200DPI","suites":["SVG input"],"updatePoint":{"line":29,"column":35,"index":916},"line":29,"code":"  it('Convert SVG to PNG at 1200DPI', function (done) {\n    sharp(fixtures.inputSvg, {\n      density: 1200\n    }).resize(1024).extract({\n      left: 290,\n      top: 760,\n      width: 40,\n      height: 40\n    }).toFormat('png').toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual('png', info.format);\n      assert.strictEqual(40, info.width);\n      assert.strictEqual(40, info.height);\n      fixtures.assertSimilar(fixtures.expected('svg1200.png'), data, function (err) {\n        if (err) throw err;\n        sharp(data).metadata(function (err, info) {\n          if (err) throw err;\n          assert.strictEqual(1200, info.density);\n          done();\n        });\n      });\n    });\n  });","file":"unit/svg.js","skipped":false,"dir":"test"},{"name":"Convert SVG to PNG at DPI larger than 2400","suites":["SVG input"],"updatePoint":{"line":52,"column":48,"index":1651},"line":52,"code":"  it('Convert SVG to PNG at DPI larger than 2400', function (done) {\n    const size = 1024;\n    sharp(fixtures.inputSvgSmallViewBox).metadata(function (err, metadata) {\n      if (err) throw err;\n      const density = size / Math.max(metadata.width, metadata.height) * metadata.density;\n      sharp(fixtures.inputSvgSmallViewBox, {\n        density\n      }).resize(size).toFormat('png').toBuffer(function (err, data, info) {\n        if (err) throw err;\n        assert.strictEqual('png', info.format);\n        assert.strictEqual(size, info.width);\n        assert.strictEqual(size, info.height);\n        fixtures.assertSimilar(fixtures.expected('circle.png'), data, function (err) {\n          if (err) throw err;\n          sharp(data).metadata(function (err, info) {\n            if (err) throw err;\n            assert.strictEqual(9216, info.density);\n            done();\n          });\n        });\n      });\n    });\n  });","file":"unit/svg.js","skipped":false,"dir":"test"},{"name":"Convert SVG to PNG at 14.4DPI","suites":["SVG input"],"updatePoint":{"line":75,"column":35,"index":2555},"line":75,"code":"  it('Convert SVG to PNG at 14.4DPI', function (done) {\n    sharp(fixtures.inputSvg, {\n      density: 14.4\n    }).toFormat('png').toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual('png', info.format);\n      assert.strictEqual(20, info.width);\n      assert.strictEqual(20, info.height);\n      fixtures.assertSimilar(fixtures.expected('svg14.4.png'), data, function (err) {\n        if (err) throw err;\n        done();\n      });\n    });\n  });","file":"unit/svg.js","skipped":false,"dir":"test"},{"name":"Convert SVG with embedded images to PNG, respecting dimensions, autoconvert to PNG","suites":["SVG input"],"updatePoint":{"line":89,"column":88,"index":3087},"line":89,"code":"  it('Convert SVG with embedded images to PNG, respecting dimensions, autoconvert to PNG', function (done) {\n    sharp(fixtures.inputSvgWithEmbeddedImages).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual('png', info.format);\n      assert.strictEqual(480, info.width);\n      assert.strictEqual(360, info.height);\n      assert.strictEqual(4, info.channels);\n      fixtures.assertSimilar(fixtures.expected('svg-embedded.png'), data, done);\n    });\n  });","file":"unit/svg.js","skipped":false,"dir":"test"},{"name":"Converts SVG with truncated embedded PNG","suites":["SVG input"],"updatePoint":{"line":99,"column":46,"index":3537},"line":99,"code":"  it('Converts SVG with truncated embedded PNG', async () => {\n    const truncatedPng = fs.readFileSync(fixtures.inputPngTruncated).toString('base64');\n    const svg = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n      <svg width=\"294\" height=\"240\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n        <image width=\"294\" height=\"240\" xlink:href=\"data:image/png;base64,${truncatedPng}\"/>\n      </svg>`;\n    const {\n      info\n    } = await sharp(Buffer.from(svg)).toBuffer({\n      resolveWithObject: true\n    });\n    assert.strictEqual(info.format, 'png');\n    assert.strictEqual(info.width, 294);\n    assert.strictEqual(info.height, 240);\n    assert.strictEqual(info.channels, 4);\n  });","file":"unit/svg.js","skipped":false,"dir":"test"},{"name":"threshold 1 jpeg","suites":["Threshold"],"updatePoint":{"line":7,"column":22,"index":182},"line":7,"code":"  it('threshold 1 jpeg', function (done) {\n    sharp(fixtures.inputJpg).resize(320, 240).threshold(1).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual('jpeg', info.format);\n      assert.strictEqual(320, info.width);\n      assert.strictEqual(240, info.height);\n      fixtures.assertSimilar(fixtures.expected('threshold-1.jpg'), data, done);\n    });\n  });","file":"unit/threshold.js","skipped":false,"dir":"test"},{"name":"threshold 40 jpeg","suites":["Threshold"],"updatePoint":{"line":16,"column":23,"index":577},"line":16,"code":"  it('threshold 40 jpeg', function (done) {\n    sharp(fixtures.inputJpg).resize(320, 240).threshold(40).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual('jpeg', info.format);\n      assert.strictEqual(320, info.width);\n      assert.strictEqual(240, info.height);\n      fixtures.assertSimilar(fixtures.expected('threshold-40.jpg'), data, done);\n    });\n  });","file":"unit/threshold.js","skipped":false,"dir":"test"},{"name":"threshold 128","suites":["Threshold"],"updatePoint":{"line":25,"column":19,"index":970},"line":25,"code":"  it('threshold 128', function (done) {\n    sharp(fixtures.inputJpg).resize(320, 240).threshold(128).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual('jpeg', info.format);\n      assert.strictEqual(320, info.width);\n      assert.strictEqual(240, info.height);\n      fixtures.assertSimilar(fixtures.expected('threshold-128.jpg'), data, done);\n    });\n  });","file":"unit/threshold.js","skipped":false,"dir":"test"},{"name":"threshold true (=128)","suites":["Threshold"],"updatePoint":{"line":34,"column":27,"index":1373},"line":34,"code":"  it('threshold true (=128)', function (done) {\n    sharp(fixtures.inputJpg).resize(320, 240).threshold(true).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual('jpeg', info.format);\n      assert.strictEqual(320, info.width);\n      assert.strictEqual(240, info.height);\n      fixtures.assertSimilar(fixtures.expected('threshold-128.jpg'), data, done);\n    });\n  });","file":"unit/threshold.js","skipped":false,"dir":"test"},{"name":"threshold false (=0)","suites":["Threshold"],"updatePoint":{"line":43,"column":26,"index":1776},"line":43,"code":"  it('threshold false (=0)', function (done) {\n    sharp(fixtures.inputJpg).threshold(false).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      fixtures.assertSimilar(fixtures.inputJpg, data, done);\n    });\n  });","file":"unit/threshold.js","skipped":false,"dir":"test"},{"name":"threshold grayscale: true (=128)","suites":["Threshold"],"updatePoint":{"line":49,"column":38,"index":2020},"line":49,"code":"  it('threshold grayscale: true (=128)', function (done) {\n    sharp(fixtures.inputJpg).resize(320, 240).threshold(128, {\n      grayscale: true\n    }).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual('jpeg', info.format);\n      assert.strictEqual(320, info.width);\n      assert.strictEqual(240, info.height);\n      fixtures.assertSimilar(fixtures.expected('threshold-128.jpg'), data, done);\n    });\n  });","file":"unit/threshold.js","skipped":false,"dir":"test"},{"name":"threshold default jpeg","suites":["Threshold"],"updatePoint":{"line":60,"column":28,"index":2455},"line":60,"code":"  it('threshold default jpeg', function (done) {\n    sharp(fixtures.inputJpg).resize(320, 240).threshold().toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual('jpeg', info.format);\n      assert.strictEqual(320, info.width);\n      assert.strictEqual(240, info.height);\n      fixtures.assertSimilar(fixtures.expected('threshold-128.jpg'), data, done);\n    });\n  });","file":"unit/threshold.js","skipped":false,"dir":"test"},{"name":"threshold default png transparency","suites":["Threshold"],"updatePoint":{"line":69,"column":40,"index":2868},"line":69,"code":"  it('threshold default png transparency', function (done) {\n    sharp(fixtures.inputPngWithTransparency).resize(320, 240).threshold().toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual('png', info.format);\n      assert.strictEqual(320, info.width);\n      assert.strictEqual(240, info.height);\n      fixtures.assertSimilar(fixtures.expected('threshold-128-transparency.png'), data, done);\n    });\n  });","file":"unit/threshold.js","skipped":false,"dir":"test"},{"name":"threshold default png alpha","suites":["Threshold"],"updatePoint":{"line":78,"column":33,"index":3302},"line":78,"code":"  it('threshold default png alpha', function (done) {\n    sharp(fixtures.inputPngWithGreyAlpha).resize(320, 240).threshold().toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual('png', info.format);\n      assert.strictEqual(320, info.width);\n      assert.strictEqual(240, info.height);\n      fixtures.assertSimilar(fixtures.expected('threshold-128-alpha.png'), data, done);\n    });\n  });","file":"unit/threshold.js","skipped":false,"dir":"test"},{"name":"threshold default webp transparency","suites":["Threshold"],"updatePoint":{"line":87,"column":41,"index":3734},"line":87,"code":"  it('threshold default webp transparency', function (done) {\n    sharp(fixtures.inputWebPWithTransparency).threshold().toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual('webp', info.format);\n      fixtures.assertSimilar(fixtures.expected('threshold-128-transparency.webp'), data, done);\n    });\n  });","file":"unit/threshold.js","skipped":false,"dir":"test"},{"name":"color threshold","suites":["Threshold"],"updatePoint":{"line":94,"column":21,"index":4055},"line":94,"code":"  it('color threshold', function (done) {\n    sharp(fixtures.inputJpg).resize(320, 240).threshold(128, {\n      grayscale: false\n    }).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual('jpeg', info.format);\n      assert.strictEqual(320, info.width);\n      assert.strictEqual(240, info.height);\n      fixtures.assertSimilar(fixtures.expected('threshold-color-128.jpg'), data, done);\n    });\n  });","file":"unit/threshold.js","skipped":false,"dir":"test"},{"name":"invalid threshold -1","suites":["Threshold"],"updatePoint":{"line":105,"column":26,"index":4495},"line":105,"code":"  it('invalid threshold -1', function () {\n    assert.throws(function () {\n      sharp().threshold(-1);\n    });\n  });","file":"unit/threshold.js","skipped":false,"dir":"test"},{"name":"invalid threshold 256","suites":["Threshold"],"updatePoint":{"line":110,"column":27,"index":4614},"line":110,"code":"  it('invalid threshold 256', function () {\n    assert.throws(function () {\n      sharp().threshold(256);\n    });\n  });","file":"unit/threshold.js","skipped":false,"dir":"test"},{"name":"Load TIFF from Buffer","suites":["TIFF"],"updatePoint":{"line":11,"column":27,"index":336},"line":11,"code":"  it('Load TIFF from Buffer', function (done) {\n    const inputTiffBuffer = fs.readFileSync(fixtures.inputTiff);\n    sharp(inputTiffBuffer).resize(320, 240).jpeg().toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(true, data.length > 0);\n      assert.strictEqual(data.length, info.size);\n      assert.strictEqual('jpeg', info.format);\n      assert.strictEqual(320, info.width);\n      assert.strictEqual(240, info.height);\n      done();\n    });\n  });","file":"unit/tiff.js","skipped":false,"dir":"test"},{"name":"Load multi-page TIFF from file","suites":["TIFF"],"updatePoint":{"line":23,"column":36,"index":834},"line":23,"code":"  it('Load multi-page TIFF from file', function (done) {\n    sharp(fixtures.inputTiffMultipage) // defaults to page 0\n    .jpeg().toBuffer(function (err, defaultData, defaultInfo) {\n      if (err) throw err;\n      assert.strictEqual(true, defaultData.length > 0);\n      assert.strictEqual(defaultData.length, defaultInfo.size);\n      assert.strictEqual('jpeg', defaultInfo.format);\n      sharp(fixtures.inputTiffMultipage, {\n        page: 1\n      }) // 50%-scale copy of page 0\n      .jpeg().toBuffer(function (err, scaledData, scaledInfo) {\n        if (err) throw err;\n        assert.strictEqual(true, scaledData.length > 0);\n        assert.strictEqual(scaledData.length, scaledInfo.size);\n        assert.strictEqual('jpeg', scaledInfo.format);\n        assert.strictEqual(defaultInfo.width, scaledInfo.width * 2);\n        assert.strictEqual(defaultInfo.height, scaledInfo.height * 2);\n        done();\n      });\n    });\n  });","file":"unit/tiff.js","skipped":false,"dir":"test"},{"name":"Load multi-page TIFF from Buffer","suites":["TIFF"],"updatePoint":{"line":44,"column":38,"index":1762},"line":44,"code":"  it('Load multi-page TIFF from Buffer', function (done) {\n    const inputTiffBuffer = fs.readFileSync(fixtures.inputTiffMultipage);\n    sharp(inputTiffBuffer) // defaults to page 0\n    .jpeg().toBuffer(function (err, defaultData, defaultInfo) {\n      if (err) throw err;\n      assert.strictEqual(true, defaultData.length > 0);\n      assert.strictEqual(defaultData.length, defaultInfo.size);\n      assert.strictEqual('jpeg', defaultInfo.format);\n      sharp(inputTiffBuffer, {\n        page: 1\n      }) // 50%-scale copy of page 0\n      .jpeg().toBuffer(function (err, scaledData, scaledInfo) {\n        if (err) throw err;\n        assert.strictEqual(true, scaledData.length > 0);\n        assert.strictEqual(scaledData.length, scaledInfo.size);\n        assert.strictEqual('jpeg', scaledInfo.format);\n        assert.strictEqual(defaultInfo.width, scaledInfo.width * 2);\n        assert.strictEqual(defaultInfo.height, scaledInfo.height * 2);\n        done();\n      });\n    });\n  });","file":"unit/tiff.js","skipped":false,"dir":"test"},{"name":"Save TIFF to Buffer","suites":["TIFF"],"updatePoint":{"line":66,"column":25,"index":2727},"line":66,"code":"  it('Save TIFF to Buffer', function (done) {\n    sharp(fixtures.inputTiff).resize(320, 240).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(true, data.length > 0);\n      assert.strictEqual(data.length, info.size);\n      assert.strictEqual('tiff', info.format);\n      assert.strictEqual(320, info.width);\n      assert.strictEqual(240, info.height);\n      done();\n    });\n  });","file":"unit/tiff.js","skipped":false,"dir":"test"},{"name":"Increasing TIFF quality increases file size","suites":["TIFF"],"updatePoint":{"line":77,"column":49,"index":3169},"line":77,"code":"  it('Increasing TIFF quality increases file size', () => sharp(fixtures.inputJpgWithLandscapeExif1).resize(320, 240).tiff({\n    quality: 40\n  }).toBuffer().then(tiff40 => sharp(fixtures.inputJpgWithLandscapeExif1).resize(320, 240).tiff({\n    quality: 90\n  }).toBuffer().then(tiff90 => assert.strictEqual(true, tiff40.length < tiff90.length))));","file":"unit/tiff.js","skipped":false,"dir":"test"},{"name":"Invalid TIFF quality throws error","suites":["TIFF"],"updatePoint":{"line":82,"column":39,"index":3505},"line":82,"code":"  it('Invalid TIFF quality throws error', function () {\n    assert.throws(function () {\n      sharp().tiff({\n        quality: 101\n      });\n    });\n  });","file":"unit/tiff.js","skipped":false,"dir":"test"},{"name":"Missing TIFF quality does not throw error","suites":["TIFF"],"updatePoint":{"line":89,"column":47,"index":3667},"line":89,"code":"  it('Missing TIFF quality does not throw error', function () {\n    assert.doesNotThrow(function () {\n      sharp().tiff();\n    });\n  });","file":"unit/tiff.js","skipped":false,"dir":"test"},{"name":"Not squashing TIFF to a bit depth of 1 should not change the file size","suites":["TIFF"],"updatePoint":{"line":94,"column":76,"index":3834},"line":94,"code":"  it('Not squashing TIFF to a bit depth of 1 should not change the file size', function (done) {\n    const startSize = fs.statSync(fixtures.inputTiff8BitDepth).size;\n    sharp(fixtures.inputTiff8BitDepth).toColourspace('b-w') // can only squash 1 band uchar images\n    .tiff({\n      bitdepth: 8,\n      compression: 'none',\n      predictor: 'none'\n    }).toFile(outputTiff, (err, info) => {\n      if (err) throw err;\n      assert.strictEqual('tiff', info.format);\n      assert.strictEqual(startSize, info.size);\n      rimraf(outputTiff, done);\n    });\n  });","file":"unit/tiff.js","skipped":false,"dir":"test"},{"name":"Squashing TIFF to a bit depth of 1 should significantly reduce file size","suites":["TIFF"],"updatePoint":{"line":108,"column":78,"index":4393},"line":108,"code":"  it('Squashing TIFF to a bit depth of 1 should significantly reduce file size', function (done) {\n    const startSize = fs.statSync(fixtures.inputTiff8BitDepth).size;\n    sharp(fixtures.inputTiff8BitDepth).toColourspace('b-w') // can only squash 1 band uchar images\n    .tiff({\n      bitdepth: 1,\n      compression: 'none',\n      predictor: 'none'\n    }).toFile(outputTiff, (err, info) => {\n      if (err) throw err;\n      assert.strictEqual('tiff', info.format);\n      assert(info.size < startSize / 2);\n      rimraf(outputTiff, done);\n    });\n  });","file":"unit/tiff.js","skipped":false,"dir":"test"},{"name":"Invalid TIFF bitdepth value throws error","suites":["TIFF"],"updatePoint":{"line":122,"column":46,"index":4913},"line":122,"code":"  it('Invalid TIFF bitdepth value throws error', function () {\n    assert.throws(function () {\n      sharp().tiff({\n        bitdepth: 3\n      });\n    }, /Error: Expected 1, 2, 4 or 8 for bitdepth but received 3 of type number/);\n  });","file":"unit/tiff.js","skipped":false,"dir":"test"},{"name":"TIFF setting xres and yres on file","suites":["TIFF"],"updatePoint":{"line":129,"column":40,"index":5142},"line":129,"code":"  it('TIFF setting xres and yres on file', () => sharp(fixtures.inputTiff).resize(8, 8).tiff({\n    xres: 1000,\n    yres: 1000\n  }).toFile(outputTiff).then(() => sharp(outputTiff).metadata().then(({\n    density\n  }) => {\n    assert.strictEqual(25400, density);\n    return promisify(rimraf)(outputTiff);\n  })));","file":"unit/tiff.js","skipped":false,"dir":"test"},{"name":"TIFF setting xres and yres on buffer","suites":["TIFF"],"updatePoint":{"line":138,"column":42,"index":5454},"line":138,"code":"  it('TIFF setting xres and yres on buffer', () => sharp(fixtures.inputTiff).resize(8, 8).tiff({\n    xres: 1000,\n    yres: 1000\n  }).toBuffer().then(data => sharp(data).metadata().then(({\n    density\n  }) => {\n    assert.strictEqual(25400, density);\n  })));","file":"unit/tiff.js","skipped":false,"dir":"test"},{"name":"TIFF imputes xres and yres from withMetadataDensity if not explicitly provided","suites":["TIFF"],"updatePoint":{"line":146,"column":84,"index":5754},"line":146,"code":"  it('TIFF imputes xres and yres from withMetadataDensity if not explicitly provided', async () => {\n    const data = await sharp(fixtures.inputTiff).resize(8, 8).tiff().withMetadata({\n      density: 600\n    }).toBuffer();\n    const {\n      density\n    } = await sharp(data).metadata();\n    assert.strictEqual(600, density);\n  });","file":"unit/tiff.js","skipped":false,"dir":"test"},{"name":"TIFF uses xres and yres over withMetadataDensity if explicitly provided","suites":["TIFF"],"updatePoint":{"line":155,"column":77,"index":6078},"line":155,"code":"  it('TIFF uses xres and yres over withMetadataDensity if explicitly provided', async () => {\n    const data = await sharp(fixtures.inputTiff).resize(8, 8).tiff({\n      xres: 1000,\n      yres: 1000\n    }).withMetadata({\n      density: 600\n    }).toBuffer();\n    const {\n      density\n    } = await sharp(data).metadata();\n    assert.strictEqual(25400, density);\n  });","file":"unit/tiff.js","skipped":false,"dir":"test"},{"name":"TIFF invalid xres value should throw an error","suites":["TIFF"],"updatePoint":{"line":167,"column":51,"index":6420},"line":167,"code":"  it('TIFF invalid xres value should throw an error', function () {\n    assert.throws(function () {\n      sharp().tiff({\n        xres: '1000.0'\n      });\n    });\n  });","file":"unit/tiff.js","skipped":false,"dir":"test"},{"name":"TIFF invalid yres value should throw an error","suites":["TIFF"],"updatePoint":{"line":174,"column":51,"index":6588},"line":174,"code":"  it('TIFF invalid yres value should throw an error', function () {\n    assert.throws(function () {\n      sharp().tiff({\n        yres: '1000.0'\n      });\n    });\n  });","file":"unit/tiff.js","skipped":false,"dir":"test"},{"name":"TIFF lzw compression with horizontal predictor shrinks test file","suites":["TIFF"],"updatePoint":{"line":181,"column":70,"index":6775},"line":181,"code":"  it('TIFF lzw compression with horizontal predictor shrinks test file', function (done) {\n    const startSize = fs.statSync(fixtures.inputTiffUncompressed).size;\n    sharp(fixtures.inputTiffUncompressed).tiff({\n      compression: 'lzw',\n      predictor: 'horizontal'\n    }).toFile(outputTiff, (err, info) => {\n      if (err) throw err;\n      assert.strictEqual('tiff', info.format);\n      assert.strictEqual(3, info.channels);\n      assert(info.size < startSize);\n      rimraf(outputTiff, done);\n    });\n  });","file":"unit/tiff.js","skipped":false,"dir":"test"},{"name":"TIFF LZW RGBA toFile","suites":["TIFF"],"updatePoint":{"line":194,"column":26,"index":7242},"line":194,"code":"  it('TIFF LZW RGBA toFile', () => sharp({\n    create: {\n      width: 1,\n      height: 1,\n      channels: 4,\n      background: 'red'\n    }\n  }).tiff({\n    compression: 'lzw'\n  }).toFile(outputTiff).then(info => {\n    assert.strictEqual(4, info.channels);\n  }));","file":"unit/tiff.js","skipped":false,"dir":"test"},{"name":"TIFF LZW RGBA toBuffer","suites":["TIFF"],"updatePoint":{"line":206,"column":28,"index":7506},"line":206,"code":"  it('TIFF LZW RGBA toBuffer', () => sharp({\n    create: {\n      width: 1,\n      height: 1,\n      channels: 4,\n      background: 'red'\n    }\n  }).tiff({\n    compression: 'lzw'\n  }).toBuffer({\n    resolveWithObject: true\n  }).then(({\n    info\n  }) => {\n    assert.strictEqual(4, info.channels);\n  }));","file":"unit/tiff.js","skipped":false,"dir":"test"},{"name":"TIFF ccittfax4 compression shrinks b-w test file","suites":["TIFF"],"updatePoint":{"line":222,"column":54,"index":7833},"line":222,"code":"  it('TIFF ccittfax4 compression shrinks b-w test file', function (done) {\n    const startSize = fs.statSync(fixtures.inputTiff).size;\n    sharp(fixtures.inputTiff).toColourspace('b-w').tiff({\n      bitdepth: 1,\n      compression: 'ccittfax4'\n    }).toFile(outputTiff, (err, info) => {\n      if (err) throw err;\n      assert.strictEqual('tiff', info.format);\n      assert(info.size < startSize);\n      rimraf(outputTiff, done);\n    });\n  });","file":"unit/tiff.js","skipped":false,"dir":"test"},{"name":"TIFF deflate compression with horizontal predictor shrinks test file","suites":["TIFF"],"updatePoint":{"line":234,"column":74,"index":8295},"line":234,"code":"  it('TIFF deflate compression with horizontal predictor shrinks test file', function (done) {\n    const startSize = fs.statSync(fixtures.inputTiffUncompressed).size;\n    sharp(fixtures.inputTiffUncompressed).tiff({\n      compression: 'deflate',\n      predictor: 'horizontal'\n    }).toFile(outputTiff, (err, info) => {\n      if (err) throw err;\n      assert.strictEqual('tiff', info.format);\n      assert(info.size < startSize);\n      rimraf(outputTiff, done);\n    });\n  });","file":"unit/tiff.js","skipped":false,"dir":"test"},{"name":"TIFF deflate compression with float predictor shrinks test file","suites":["TIFF"],"updatePoint":{"line":246,"column":69,"index":8765},"line":246,"code":"  it('TIFF deflate compression with float predictor shrinks test file', function (done) {\n    const startSize = fs.statSync(fixtures.inputTiffUncompressed).size;\n    sharp(fixtures.inputTiffUncompressed).tiff({\n      compression: 'deflate',\n      predictor: 'float'\n    }).toFile(outputTiff, (err, info) => {\n      if (err) throw err;\n      assert.strictEqual('tiff', info.format);\n      assert(startSize > info.size);\n      rimraf(outputTiff, done);\n    });\n  });","file":"unit/tiff.js","skipped":false,"dir":"test"},{"name":"TIFF deflate compression without predictor shrinks test file","suites":["TIFF"],"updatePoint":{"line":258,"column":66,"index":9227},"line":258,"code":"  it('TIFF deflate compression without predictor shrinks test file', function (done) {\n    const startSize = fs.statSync(fixtures.inputTiffUncompressed).size;\n    sharp(fixtures.inputTiffUncompressed).tiff({\n      compression: 'deflate',\n      predictor: 'none'\n    }).toFile(outputTiff, (err, info) => {\n      if (err) throw err;\n      assert.strictEqual('tiff', info.format);\n      assert(info.size < startSize);\n      rimraf(outputTiff, done);\n    });\n  });","file":"unit/tiff.js","skipped":false,"dir":"test"},{"name":"TIFF jpeg compression shrinks test file","suites":["TIFF"],"updatePoint":{"line":270,"column":45,"index":9667},"line":270,"code":"  it('TIFF jpeg compression shrinks test file', function (done) {\n    const startSize = fs.statSync(fixtures.inputTiffUncompressed).size;\n    sharp(fixtures.inputTiffUncompressed).tiff({\n      compression: 'jpeg'\n    }).toFile(outputTiff, (err, info) => {\n      if (err) throw err;\n      assert.strictEqual('tiff', info.format);\n      assert(info.size < startSize);\n      rimraf(outputTiff, done);\n    });\n  });","file":"unit/tiff.js","skipped":false,"dir":"test"},{"name":"TIFF none compression does not throw error","suites":["TIFF"],"updatePoint":{"line":281,"column":48,"index":10082},"line":281,"code":"  it('TIFF none compression does not throw error', function () {\n    assert.doesNotThrow(function () {\n      sharp().tiff({\n        compression: 'none'\n      });\n    });\n  });","file":"unit/tiff.js","skipped":false,"dir":"test"},{"name":"TIFF lzw compression does not throw error","suites":["TIFF"],"updatePoint":{"line":288,"column":47,"index":10257},"line":288,"code":"  it('TIFF lzw compression does not throw error', function () {\n    assert.doesNotThrow(function () {\n      sharp().tiff({\n        compression: 'lzw'\n      });\n    });\n  });","file":"unit/tiff.js","skipped":false,"dir":"test"},{"name":"TIFF deflate compression does not throw error","suites":["TIFF"],"updatePoint":{"line":295,"column":51,"index":10435},"line":295,"code":"  it('TIFF deflate compression does not throw error', function () {\n    assert.doesNotThrow(function () {\n      sharp().tiff({\n        compression: 'deflate'\n      });\n    });\n  });","file":"unit/tiff.js","skipped":false,"dir":"test"},{"name":"TIFF invalid compression option throws","suites":["TIFF"],"updatePoint":{"line":302,"column":44,"index":10610},"line":302,"code":"  it('TIFF invalid compression option throws', function () {\n    assert.throws(function () {\n      sharp().tiff({\n        compression: 0\n      });\n    });\n  });","file":"unit/tiff.js","skipped":false,"dir":"test"},{"name":"TIFF invalid compression option throws","suites":["TIFF"],"updatePoint":{"line":309,"column":44,"index":10771},"line":309,"code":"  it('TIFF invalid compression option throws', function () {\n    assert.throws(function () {\n      sharp().tiff({\n        compression: 'a'\n      });\n    });\n  });","file":"unit/tiff.js","skipped":false,"dir":"test"},{"name":"TIFF invalid predictor option throws","suites":["TIFF"],"updatePoint":{"line":316,"column":42,"index":10932},"line":316,"code":"  it('TIFF invalid predictor option throws', function () {\n    assert.throws(function () {\n      sharp().tiff({\n        predictor: 'a'\n      });\n    });\n  });","file":"unit/tiff.js","skipped":false,"dir":"test"},{"name":"TIFF horizontal predictor does not throw error","suites":["TIFF"],"updatePoint":{"line":323,"column":52,"index":11101},"line":323,"code":"  it('TIFF horizontal predictor does not throw error', function () {\n    assert.doesNotThrow(function () {\n      sharp().tiff({\n        predictor: 'horizontal'\n      });\n    });\n  });","file":"unit/tiff.js","skipped":false,"dir":"test"},{"name":"TIFF float predictor does not throw error","suites":["TIFF"],"updatePoint":{"line":330,"column":47,"index":11280},"line":330,"code":"  it('TIFF float predictor does not throw error', function () {\n    assert.doesNotThrow(function () {\n      sharp().tiff({\n        predictor: 'float'\n      });\n    });\n  });","file":"unit/tiff.js","skipped":false,"dir":"test"},{"name":"TIFF none predictor does not throw error","suites":["TIFF"],"updatePoint":{"line":337,"column":46,"index":11453},"line":337,"code":"  it('TIFF none predictor does not throw error', function () {\n    assert.doesNotThrow(function () {\n      sharp().tiff({\n        predictor: 'none'\n      });\n    });\n  });","file":"unit/tiff.js","skipped":false,"dir":"test"},{"name":"TIFF tiled pyramid image without compression enlarges test file","suites":["TIFF"],"updatePoint":{"line":344,"column":69,"index":11648},"line":344,"code":"  it('TIFF tiled pyramid image without compression enlarges test file', function (done) {\n    const startSize = fs.statSync(fixtures.inputTiffUncompressed).size;\n    sharp(fixtures.inputTiffUncompressed).tiff({\n      compression: 'none',\n      pyramid: true,\n      tile: true,\n      tileHeight: 256,\n      tileWidth: 256\n    }).toFile(outputTiff, (err, info) => {\n      if (err) throw err;\n      assert.strictEqual('tiff', info.format);\n      assert(info.size > startSize);\n      rimraf(outputTiff, done);\n    });\n  });","file":"unit/tiff.js","skipped":false,"dir":"test"},{"name":"TIFF pyramid true value does not throw error","suites":["TIFF"],"updatePoint":{"line":359,"column":50,"index":12149},"line":359,"code":"  it('TIFF pyramid true value does not throw error', function () {\n    assert.doesNotThrow(function () {\n      sharp().tiff({\n        pyramid: true\n      });\n    });\n  });","file":"unit/tiff.js","skipped":false,"dir":"test"},{"name":"Invalid TIFF pyramid value throws error","suites":["TIFF"],"updatePoint":{"line":366,"column":45,"index":12316},"line":366,"code":"  it('Invalid TIFF pyramid value throws error', function () {\n    assert.throws(function () {\n      sharp().tiff({\n        pyramid: 'true'\n      });\n    });\n  });","file":"unit/tiff.js","skipped":false,"dir":"test"},{"name":"Invalid TIFF tile value throws error","suites":["TIFF"],"updatePoint":{"line":373,"column":42,"index":12476},"line":373,"code":"  it('Invalid TIFF tile value throws error', function () {\n    assert.throws(function () {\n      sharp().tiff({\n        tile: 'true'\n      });\n    });\n  });","file":"unit/tiff.js","skipped":false,"dir":"test"},{"name":"TIFF tile true value does not throw error","suites":["TIFF"],"updatePoint":{"line":380,"column":47,"index":12638},"line":380,"code":"  it('TIFF tile true value does not throw error', function () {\n    assert.doesNotThrow(function () {\n      sharp().tiff({\n        tile: true\n      });\n    });\n  });","file":"unit/tiff.js","skipped":false,"dir":"test"},{"name":"Valid TIFF tileHeight value does not throw error","suites":["TIFF"],"updatePoint":{"line":387,"column":54,"index":12811},"line":387,"code":"  it('Valid TIFF tileHeight value does not throw error', function () {\n    assert.doesNotThrow(function () {\n      sharp().tiff({\n        tileHeight: 512\n      });\n    });\n  });","file":"unit/tiff.js","skipped":false,"dir":"test"},{"name":"Valid TIFF tileWidth value does not throw error","suites":["TIFF"],"updatePoint":{"line":394,"column":53,"index":12988},"line":394,"code":"  it('Valid TIFF tileWidth value does not throw error', function () {\n    assert.doesNotThrow(function () {\n      sharp().tiff({\n        tileWidth: 512\n      });\n    });\n  });","file":"unit/tiff.js","skipped":false,"dir":"test"},{"name":"Invalid TIFF tileHeight value throws error","suites":["TIFF"],"updatePoint":{"line":401,"column":48,"index":13159},"line":401,"code":"  it('Invalid TIFF tileHeight value throws error', function () {\n    assert.throws(function () {\n      sharp().tiff({\n        tileHeight: '256'\n      });\n    });\n  });","file":"unit/tiff.js","skipped":false,"dir":"test"},{"name":"Invalid TIFF tileWidth value throws error","suites":["TIFF"],"updatePoint":{"line":408,"column":47,"index":13326},"line":408,"code":"  it('Invalid TIFF tileWidth value throws error', function () {\n    assert.throws(function () {\n      sharp().tiff({\n        tileWidth: '256'\n      });\n    });\n  });","file":"unit/tiff.js","skipped":false,"dir":"test"},{"name":"Invalid TIFF tileHeight value throws error","suites":["TIFF"],"updatePoint":{"line":415,"column":48,"index":13493},"line":415,"code":"  it('Invalid TIFF tileHeight value throws error', function () {\n    assert.throws(function () {\n      sharp().tiff({\n        tileHeight: 0\n      });\n    });\n  });","file":"unit/tiff.js","skipped":false,"dir":"test"},{"name":"Invalid TIFF tileWidth value throws error","suites":["TIFF"],"updatePoint":{"line":422,"column":47,"index":13656},"line":422,"code":"  it('Invalid TIFF tileWidth value throws error', function () {\n    assert.throws(function () {\n      sharp().tiff({\n        tileWidth: 0\n      });\n    });\n  });","file":"unit/tiff.js","skipped":false,"dir":"test"},{"name":"TIFF file input with invalid page fails gracefully","suites":["TIFF"],"updatePoint":{"line":429,"column":56,"index":13827},"line":429,"code":"  it('TIFF file input with invalid page fails gracefully', function (done) {\n    sharp(fixtures.inputTiffMultipage, {\n      page: 2\n    }).toBuffer(function (err) {\n      assert.strictEqual(true, !!err);\n      done();\n    });\n  });","file":"unit/tiff.js","skipped":false,"dir":"test"},{"name":"TIFF buffer input with invalid page fails gracefully","suites":["TIFF"],"updatePoint":{"line":437,"column":58,"index":14061},"line":437,"code":"  it('TIFF buffer input with invalid page fails gracefully', function (done) {\n    sharp(fs.readFileSync(fixtures.inputTiffMultipage), {\n      page: 2\n    }).toBuffer(function (err) {\n      assert.strictEqual(true, !!err);\n      done();\n    });\n  });","file":"unit/tiff.js","skipped":false,"dir":"test"},{"name":"Valid size values pass","suites":["Tile"],"updatePoint":{"line":109,"column":28,"index":4193},"line":109,"code":"  it('Valid size values pass', function () {\n    [1, 8192].forEach(function (size) {\n      assert.doesNotThrow(function () {\n        sharp().tile({\n          size: size\n        });\n      });\n    });\n  });","file":"unit/tile.js","skipped":false,"dir":"test"},{"name":"Invalid size values fail","suites":["Tile"],"updatePoint":{"line":118,"column":30,"index":4400},"line":118,"code":"  it('Invalid size values fail', function () {\n    ['zoinks', 1.1, -1, 0, 8193].forEach(function (size) {\n      assert.throws(function () {\n        sharp().tile({\n          size: size\n        });\n      });\n    });\n  });","file":"unit/tile.js","skipped":false,"dir":"test"},{"name":"Valid overlap values pass","suites":["Tile"],"updatePoint":{"line":127,"column":31,"index":4621},"line":127,"code":"  it('Valid overlap values pass', function () {\n    [0, 8192].forEach(function (overlap) {\n      assert.doesNotThrow(function () {\n        sharp().tile({\n          size: 8192,\n          overlap: overlap\n        });\n      });\n    });\n  });","file":"unit/tile.js","skipped":false,"dir":"test"},{"name":"Invalid overlap values fail","suites":["Tile"],"updatePoint":{"line":137,"column":33,"index":4862},"line":137,"code":"  it('Invalid overlap values fail', function () {\n    ['zoinks', 1.1, -1, 8193].forEach(function (overlap) {\n      assert.throws(function () {\n        sharp().tile({\n          overlap: overlap\n        });\n      });\n    });\n  });","file":"unit/tile.js","skipped":false,"dir":"test"},{"name":"Valid container values pass","suites":["Tile"],"updatePoint":{"line":146,"column":33,"index":5091},"line":146,"code":"  it('Valid container values pass', function () {\n    ['fs', 'zip'].forEach(function (container) {\n      assert.doesNotThrow(function () {\n        sharp().tile({\n          container: container\n        });\n      });\n    });\n  });","file":"unit/tile.js","skipped":false,"dir":"test"},{"name":"Invalid container values fail","suites":["Tile"],"updatePoint":{"line":155,"column":35,"index":5322},"line":155,"code":"  it('Invalid container values fail', function () {\n    ['zoinks', 1].forEach(function (container) {\n      assert.throws(function () {\n        sharp().tile({\n          container: container\n        });\n      });\n    });\n  });","file":"unit/tile.js","skipped":false,"dir":"test"},{"name":"Valid layout values pass","suites":["Tile"],"updatePoint":{"line":164,"column":30,"index":5542},"line":164,"code":"  it('Valid layout values pass', function () {\n    ['dz', 'google', 'zoomify'].forEach(function (layout) {\n      assert.doesNotThrow(function () {\n        sharp().tile({\n          layout: layout\n        });\n      });\n    });\n  });","file":"unit/tile.js","skipped":false,"dir":"test"},{"name":"Invalid layout values fail","suites":["Tile"],"updatePoint":{"line":173,"column":32,"index":5775},"line":173,"code":"  it('Invalid layout values fail', function () {\n    ['zoinks', 1].forEach(function (layout) {\n      assert.throws(function () {\n        sharp().tile({\n          layout: layout\n        });\n      });\n    });\n  });","file":"unit/tile.js","skipped":false,"dir":"test"},{"name":"Valid formats pass","suites":["Tile"],"updatePoint":{"line":182,"column":24,"index":5980},"line":182,"code":"  it('Valid formats pass', function () {\n    ['jpeg', 'png', 'webp'].forEach(function (format) {\n      assert.doesNotThrow(function () {\n        sharp().toFormat(format).tile();\n      });\n    });\n  });","file":"unit/tile.js","skipped":false,"dir":"test"},{"name":"Invalid formats fail","suites":["Tile"],"updatePoint":{"line":189,"column":26,"index":6184},"line":189,"code":"  it('Invalid formats fail', function () {\n    ['tiff', 'raw'].forEach(function (format) {\n      assert.throws(function () {\n        sharp().toFormat(format).tile();\n      });\n    });\n  });","file":"unit/tile.js","skipped":false,"dir":"test"},{"name":"Valid depths pass","suites":["Tile"],"updatePoint":{"line":196,"column":23,"index":6371},"line":196,"code":"  it('Valid depths pass', function () {\n    ['onepixel', 'onetile', 'one'].forEach(function (depth) {\n      assert.doesNotThrow(function (depth) {\n        sharp().tile({\n          depth: depth\n        });\n      });\n    });\n  });","file":"unit/tile.js","skipped":false,"dir":"test"},{"name":"Invalid depths fail","suites":["Tile"],"updatePoint":{"line":205,"column":25,"index":6602},"line":205,"code":"  it('Invalid depths fail', function () {\n    ['depth', 1].forEach(function (depth) {\n      assert.throws(function () {\n        sharp().tile({\n          depth: depth\n        });\n      });\n    });\n  });","file":"unit/tile.js","skipped":false,"dir":"test"},{"name":"Prevent larger overlap than default size","suites":["Tile"],"updatePoint":{"line":214,"column":46,"index":6825},"line":214,"code":"  it('Prevent larger overlap than default size', function () {\n    assert.throws(function () {\n      sharp().tile({\n        overlap: 257\n      });\n    });\n  });","file":"unit/tile.js","skipped":false,"dir":"test"},{"name":"Prevent larger overlap than provided size","suites":["Tile"],"updatePoint":{"line":221,"column":47,"index":6987},"line":221,"code":"  it('Prevent larger overlap than provided size', function () {\n    assert.throws(function () {\n      sharp().tile({\n        size: 512,\n        overlap: 513\n      });\n    });\n  });","file":"unit/tile.js","skipped":false,"dir":"test"},{"name":"Valid rotation angle values pass","suites":["Tile"],"updatePoint":{"line":229,"column":38,"index":7159},"line":229,"code":"  it('Valid rotation angle values pass', function () {\n    [90, 270, -90].forEach(function (angle) {\n      assert.doesNotThrow(function () {\n        sharp().tile({\n          angle: angle\n        });\n      });\n    });\n  });","file":"unit/tile.js","skipped":false,"dir":"test"},{"name":"Invalid rotation angle values fail","suites":["Tile"],"updatePoint":{"line":238,"column":40,"index":7384},"line":238,"code":"  it('Invalid rotation angle values fail', function () {\n    ['zoinks', 1.1, -1, 27].forEach(function (angle) {\n      assert.throws(function () {\n        sharp().tile({\n          angle: angle\n        });\n      });\n    });\n  });","file":"unit/tile.js","skipped":false,"dir":"test"},{"name":"Valid skipBlanks threshold values pass","suites":["Tile"],"updatePoint":{"line":247,"column":44,"index":7616},"line":247,"code":"  it('Valid skipBlanks threshold values pass', function () {\n    [-1, 0, 255, 65535].forEach(function (skipBlanksThreshold) {\n      assert.doesNotThrow(function () {\n        sharp().tile({\n          skipBlanks: skipBlanksThreshold\n        });\n      });\n    });\n  });","file":"unit/tile.js","skipped":false,"dir":"test"},{"name":"InvalidskipBlanks threshold values fail","suites":["Tile"],"updatePoint":{"line":256,"column":45,"index":7884},"line":256,"code":"  it('InvalidskipBlanks threshold values fail', function () {\n    ['zoinks', -2, 65536].forEach(function (skipBlanksThreshold) {\n      assert.throws(function () {\n        sharp().tile({\n          skipBlanks: skipBlanksThreshold\n        });\n      });\n    });\n  });","file":"unit/tile.js","skipped":false,"dir":"test"},{"name":"Invalid center parameter value fail","suites":["Tile"],"updatePoint":{"line":265,"column":41,"index":8144},"line":265,"code":"  it('Invalid center parameter value fail', function () {\n    assert.throws(function () {\n      sharp().tile({\n        centre: 'true'\n      });\n    });\n  });","file":"unit/tile.js","skipped":false,"dir":"test"},{"name":"Valid id parameter value passes","suites":["Tile"],"updatePoint":{"line":272,"column":37,"index":8298},"line":272,"code":"  it('Valid id parameter value passes', function () {\n    assert.doesNotThrow(function () {\n      sharp().tile({\n        id: 'test'\n      });\n    });\n  });","file":"unit/tile.js","skipped":false,"dir":"test"},{"name":"Invalid id parameter value fails","suites":["Tile"],"updatePoint":{"line":279,"column":38,"index":8455},"line":279,"code":"  it('Invalid id parameter value fails', function () {\n    assert.throws(function () {\n      sharp().tile({\n        id: true\n      });\n    });\n  });","file":"unit/tile.js","skipped":false,"dir":"test"},{"name":"Deep Zoom layout","suites":["Tile"],"updatePoint":{"line":286,"column":22,"index":8588},"line":286,"code":"  it('Deep Zoom layout', function (done) {\n    const directory = fixtures.path('output.dzi_files');\n    rimraf(directory, function () {\n      sharp(fixtures.inputJpg).toFile(fixtures.path('output.dzi'), function (err, info) {\n        if (err) throw err;\n        assert.strictEqual('dz', info.format);\n        assert.strictEqual(2725, info.width);\n        assert.strictEqual(2225, info.height);\n        assert.strictEqual(3, info.channels);\n        assert.strictEqual('undefined', typeof info.size);\n        assertDeepZoomTiles(directory, 256, 13, done);\n      });\n    });\n  });","file":"unit/tile.js","skipped":false,"dir":"test"},{"name":"Deep Zoom layout with custom size+overlap","suites":["Tile"],"updatePoint":{"line":300,"column":47,"index":9191},"line":300,"code":"  it('Deep Zoom layout with custom size+overlap', function (done) {\n    const directory = fixtures.path('output.512.dzi_files');\n    rimraf(directory, function () {\n      sharp(fixtures.inputJpg).tile({\n        size: 512,\n        overlap: 16\n      }).toFile(fixtures.path('output.512.dzi'), function (err, info) {\n        if (err) throw err;\n        assert.strictEqual('dz', info.format);\n        assert.strictEqual(2725, info.width);\n        assert.strictEqual(2225, info.height);\n        assert.strictEqual(3, info.channels);\n        assert.strictEqual('undefined', typeof info.size);\n        assertDeepZoomTiles(directory, 512 + 2 * 16, 13, function () {\n          assertTileOverlap(directory, 512, done);\n        });\n      });\n    });\n  });","file":"unit/tile.js","skipped":false,"dir":"test"},{"name":"Deep Zoom layout with custom size+angle","suites":["Tile"],"updatePoint":{"line":319,"column":45,"index":9934},"line":319,"code":"  it('Deep Zoom layout with custom size+angle', function (done) {\n    const directory = fixtures.path('output.512_90.dzi_files');\n    rimraf(directory, function () {\n      sharp(fixtures.inputJpg).tile({\n        size: 512,\n        angle: 90\n      }).toFile(fixtures.path('output.512_90.dzi'), function (err, info) {\n        if (err) throw err;\n        assert.strictEqual('dz', info.format);\n        assert.strictEqual(2725, info.width);\n        assert.strictEqual(2225, info.height);\n        assert.strictEqual(3, info.channels);\n        assert.strictEqual('undefined', typeof info.size);\n        assertDeepZoomTiles(directory, 512, 13, done);\n        // Verifies tiles in 10th level are rotated\n        const tile = path.join(directory, '10', '0_1.jpeg');\n        // verify that the width and height correspond to the rotated image\n        // expected are w=512 and h=170 for the 0_1.jpeg.\n        // if a 0 angle is supplied to the .tile function\n        // the expected values are w=170 and h=512 for the 1_0.jpeg\n        sharp(tile).metadata(function (err, metadata) {\n          if (err) {\n            throw err;\n          } else {\n            assert.strictEqual(true, metadata.width === 512);\n            assert.strictEqual(true, metadata.height === 170);\n          }\n        });\n      });\n    });\n  });","file":"unit/tile.js","skipped":false,"dir":"test"},{"name":"Deep Zoom layout with depth of one","suites":["Tile"],"updatePoint":{"line":350,"column":40,"index":11238},"line":350,"code":"  it('Deep Zoom layout with depth of one', function (done) {\n    const directory = fixtures.path('output.512_depth_one.dzi_files');\n    rimraf(directory, function () {\n      sharp(fixtures.inputJpg).tile({\n        size: 512,\n        depth: 'one'\n      }).toFile(fixtures.path('output.512_depth_one.dzi'), function (err, info) {\n        if (err) throw err;\n        // Verify only one depth generated\n        assertDeepZoomTiles(directory, 512, 1, done);\n      });\n    });\n  });","file":"unit/tile.js","skipped":false,"dir":"test"},{"name":"Deep Zoom layout with depth of onepixel","suites":["Tile"],"updatePoint":{"line":363,"column":45,"index":11720},"line":363,"code":"  it('Deep Zoom layout with depth of onepixel', function (done) {\n    const directory = fixtures.path('output.512_depth_onepixel.dzi_files');\n    rimraf(directory, function () {\n      sharp(fixtures.inputJpg).tile({\n        size: 512,\n        depth: 'onepixel'\n      }).toFile(fixtures.path('output.512_depth_onepixel.dzi'), function (err, info) {\n        if (err) throw err;\n        // Verify only one depth generated\n        assertDeepZoomTiles(directory, 512, 13, done);\n      });\n    });\n  });","file":"unit/tile.js","skipped":false,"dir":"test"},{"name":"Deep Zoom layout with depth of onetile","suites":["Tile"],"updatePoint":{"line":376,"column":44,"index":12217},"line":376,"code":"  it('Deep Zoom layout with depth of onetile', function (done) {\n    const directory = fixtures.path('output.256_depth_onetile.dzi_files');\n    rimraf(directory, function () {\n      sharp(fixtures.inputJpg).tile({\n        size: 256,\n        depth: 'onetile'\n      }).toFile(fixtures.path('output.256_depth_onetile.dzi'), function (err, info) {\n        if (err) throw err;\n        // Verify only one depth generated\n        assertDeepZoomTiles(directory, 256, 5, done);\n      });\n    });\n  });","file":"unit/tile.js","skipped":false,"dir":"test"},{"name":"Deep Zoom layout with skipBlanks","suites":["Tile"],"updatePoint":{"line":389,"column":38,"index":12704},"line":389,"code":"  it('Deep Zoom layout with skipBlanks', function (done) {\n    const directory = fixtures.path('output.256_skip_blanks.dzi_files');\n    rimraf(directory, function () {\n      sharp(fixtures.inputJpgOverlayLayer2).tile({\n        size: 256,\n        skipBlanks: 0\n      }).toFile(fixtures.path('output.256_skip_blanks.dzi'), function (err, info) {\n        if (err) throw err;\n        // assert them 0_0.jpeg doesn't exist because it's a white tile\n        const whiteTilePath = path.join(directory, '11', '0_0.jpeg');\n        assert.strictEqual(fs.existsSync(whiteTilePath), false, 'Tile should not exist');\n        // Verify only one depth generated\n        assertDeepZoomTiles(directory, 256, 12, done);\n      });\n    });\n  });","file":"unit/tile.js","skipped":false,"dir":"test"},{"name":"Zoomify layout","suites":["Tile"],"updatePoint":{"line":405,"column":20,"index":13412},"line":405,"code":"  it('Zoomify layout', function (done) {\n    const directory = fixtures.path('output.zoomify.dzi');\n    rimraf(directory, function () {\n      sharp(fixtures.inputJpg).tile({\n        layout: 'zoomify'\n      }).toFile(fixtures.path('output.zoomify.dzi'), function (err, info) {\n        if (err) throw err;\n        assert.strictEqual('dz', info.format);\n        assert.strictEqual(2725, info.width);\n        assert.strictEqual(2225, info.height);\n        assert.strictEqual(3, info.channels);\n        assert.strictEqual('number', typeof info.size);\n        fs.stat(path.join(directory, 'ImageProperties.xml'), function (err, stat) {\n          if (err) throw err;\n          assert.strictEqual(true, stat.isFile());\n          assert.strictEqual(true, stat.size > 0);\n          done();\n        });\n      });\n    });\n  });","file":"unit/tile.js","skipped":false,"dir":"test"},{"name":"Zoomify layout with depth one","suites":["Tile"],"updatePoint":{"line":426,"column":35,"index":14243},"line":426,"code":"  it('Zoomify layout with depth one', function (done) {\n    const directory = fixtures.path('output.zoomify.depth_one.dzi');\n    rimraf(directory, function () {\n      sharp(fixtures.inputJpg).tile({\n        size: 256,\n        layout: 'zoomify',\n        depth: 'one'\n      }).toFile(directory, function (err, info) {\n        if (err) throw err;\n        assert.strictEqual('dz', info.format);\n        assert.strictEqual(2725, info.width);\n        assert.strictEqual(2225, info.height);\n        assert.strictEqual(3, info.channels);\n        assert.strictEqual('number', typeof info.size);\n        assertZoomifyTiles(directory, 256, 1, done);\n      });\n    });\n  });","file":"unit/tile.js","skipped":false,"dir":"test"},{"name":"Zoomify layout with depth onetile","suites":["Tile"],"updatePoint":{"line":444,"column":39,"index":14910},"line":444,"code":"  it('Zoomify layout with depth onetile', function (done) {\n    const directory = fixtures.path('output.zoomify.depth_onetile.dzi');\n    rimraf(directory, function () {\n      sharp(fixtures.inputJpg).tile({\n        size: 256,\n        layout: 'zoomify',\n        depth: 'onetile'\n      }).toFile(directory, function (err, info) {\n        if (err) throw err;\n        assert.strictEqual('dz', info.format);\n        assert.strictEqual(2725, info.width);\n        assert.strictEqual(2225, info.height);\n        assert.strictEqual(3, info.channels);\n        assert.strictEqual('number', typeof info.size);\n        assertZoomifyTiles(directory, 256, 5, done);\n      });\n    });\n  });","file":"unit/tile.js","skipped":false,"dir":"test"},{"name":"Zoomify layout with depth onepixel","suites":["Tile"],"updatePoint":{"line":462,"column":40,"index":15586},"line":462,"code":"  it('Zoomify layout with depth onepixel', function (done) {\n    const directory = fixtures.path('output.zoomify.depth_onepixel.dzi');\n    rimraf(directory, function () {\n      sharp(fixtures.inputJpg).tile({\n        size: 256,\n        layout: 'zoomify',\n        depth: 'onepixel'\n      }).toFile(directory, function (err, info) {\n        if (err) throw err;\n        assert.strictEqual('dz', info.format);\n        assert.strictEqual(2725, info.width);\n        assert.strictEqual(2225, info.height);\n        assert.strictEqual(3, info.channels);\n        assert.strictEqual('number', typeof info.size);\n        assertZoomifyTiles(directory, 256, 13, done);\n      });\n    });\n  });","file":"unit/tile.js","skipped":false,"dir":"test"},{"name":"Zoomify layout with skip blanks","suites":["Tile"],"updatePoint":{"line":480,"column":37,"index":16262},"line":480,"code":"  it('Zoomify layout with skip blanks', function (done) {\n    const directory = fixtures.path('output.zoomify.skipBlanks.dzi');\n    rimraf(directory, function () {\n      sharp(fixtures.inputJpgOverlayLayer2).tile({\n        size: 256,\n        layout: 'zoomify',\n        skipBlanks: 0\n      }).toFile(directory, function (err, info) {\n        if (err) throw err;\n        // assert them 0_0.jpeg doesn't exist because it's a white tile\n        const whiteTilePath = path.join(directory, 'TileGroup0', '2-0-0.jpg');\n        assert.strictEqual(fs.existsSync(whiteTilePath), false, 'Tile should not exist');\n        assert.strictEqual('dz', info.format);\n        assert.strictEqual(2048, info.width);\n        assert.strictEqual(1536, info.height);\n        assert.strictEqual(3, info.channels);\n        assert.strictEqual('number', typeof info.size);\n        assertZoomifyTiles(directory, 256, 4, done);\n      });\n    });\n  });","file":"unit/tile.js","skipped":false,"dir":"test"},{"name":"Google layout","suites":["Tile"],"updatePoint":{"line":501,"column":19,"index":17165},"line":501,"code":"  it('Google layout', function (done) {\n    const directory = fixtures.path('output.google.dzi');\n    rimraf(directory, function () {\n      sharp(fixtures.inputJpg).tile({\n        layout: 'google'\n      }).toFile(directory, function (err, info) {\n        if (err) throw err;\n        assert.strictEqual('dz', info.format);\n        assert.strictEqual(2725, info.width);\n        assert.strictEqual(2225, info.height);\n        assert.strictEqual(3, info.channels);\n        assert.strictEqual('number', typeof info.size);\n        fs.stat(path.join(directory, '0', '0', '0.jpg'), function (err, stat) {\n          if (err) throw err;\n          assert.strictEqual(true, stat.isFile());\n          assert.strictEqual(true, stat.size > 0);\n          done();\n        });\n      });\n    });\n  });","file":"unit/tile.js","skipped":false,"dir":"test"},{"name":"Google layout with jpeg format","suites":["Tile"],"updatePoint":{"line":522,"column":36,"index":17965},"line":522,"code":"  it('Google layout with jpeg format', function (done) {\n    const directory = fixtures.path('output.jpg.google.dzi');\n    rimraf(directory, function () {\n      sharp(fixtures.inputJpg).jpeg({\n        quality: 1\n      }).tile({\n        layout: 'google'\n      }).toFile(directory, function (err, info) {\n        if (err) throw err;\n        assert.strictEqual('dz', info.format);\n        assert.strictEqual(2725, info.width);\n        assert.strictEqual(2225, info.height);\n        assert.strictEqual(3, info.channels);\n        assert.strictEqual('number', typeof info.size);\n        const sample = path.join(directory, '0', '0', '0.jpg');\n        sharp(sample).metadata(function (err, metadata) {\n          if (err) throw err;\n          assert.strictEqual('jpeg', metadata.format);\n          assert.strictEqual('srgb', metadata.space);\n          assert.strictEqual(3, metadata.channels);\n          assert.strictEqual(false, metadata.hasProfile);\n          assert.strictEqual(false, metadata.hasAlpha);\n          assert.strictEqual(256, metadata.width);\n          assert.strictEqual(256, metadata.height);\n          fs.stat(sample, function (err, stat) {\n            if (err) throw err;\n            assert.strictEqual(true, stat.size < 2000);\n            done();\n          });\n        });\n      });\n    });\n  });","file":"unit/tile.js","skipped":false,"dir":"test"},{"name":"Google layout with png format","suites":["Tile"],"updatePoint":{"line":555,"column":35,"index":19274},"line":555,"code":"  it('Google layout with png format', function (done) {\n    const directory = fixtures.path('output.png.google.dzi');\n    rimraf(directory, function () {\n      sharp(fixtures.inputJpg).png({\n        compressionLevel: 0\n      }).tile({\n        layout: 'google'\n      }).toFile(directory, function (err, info) {\n        if (err) throw err;\n        assert.strictEqual('dz', info.format);\n        assert.strictEqual(2725, info.width);\n        assert.strictEqual(2225, info.height);\n        assert.strictEqual(3, info.channels);\n        assert.strictEqual('number', typeof info.size);\n        const sample = path.join(directory, '0', '0', '0.png');\n        sharp(sample).metadata(function (err, metadata) {\n          if (err) throw err;\n          assert.strictEqual('png', metadata.format);\n          assert.strictEqual('srgb', metadata.space);\n          assert.strictEqual(3, metadata.channels);\n          assert.strictEqual(false, metadata.hasProfile);\n          assert.strictEqual(false, metadata.hasAlpha);\n          assert.strictEqual(256, metadata.width);\n          assert.strictEqual(256, metadata.height);\n          fs.stat(sample, function (err, stat) {\n            if (err) throw err;\n            assert.strictEqual(true, stat.size > 44000);\n            done();\n          });\n        });\n      });\n    });\n  });","file":"unit/tile.js","skipped":false,"dir":"test"},{"name":"Google layout with webp format","suites":["Tile"],"updatePoint":{"line":588,"column":36,"index":20592},"line":588,"code":"  it('Google layout with webp format', function (done) {\n    const directory = fixtures.path('output.webp.google.dzi');\n    rimraf(directory, function () {\n      sharp(fixtures.inputJpg).webp({\n        quality: 1,\n        reductionEffort: 0\n      }).tile({\n        layout: 'google'\n      }).toFile(directory, function (err, info) {\n        if (err) throw err;\n        assert.strictEqual('dz', info.format);\n        assert.strictEqual(2725, info.width);\n        assert.strictEqual(2225, info.height);\n        assert.strictEqual(3, info.channels);\n        assert.strictEqual('number', typeof info.size);\n        const sample = path.join(directory, '0', '0', '0.webp');\n        sharp(sample).metadata(function (err, metadata) {\n          if (err) throw err;\n          assert.strictEqual('webp', metadata.format);\n          assert.strictEqual('srgb', metadata.space);\n          assert.strictEqual(3, metadata.channels);\n          assert.strictEqual(false, metadata.hasProfile);\n          assert.strictEqual(false, metadata.hasAlpha);\n          assert.strictEqual(256, metadata.width);\n          assert.strictEqual(256, metadata.height);\n          fs.stat(sample, function (err, stat) {\n            if (err) throw err;\n            assert.strictEqual(true, stat.size < 2000);\n            done();\n          });\n        });\n      });\n    });\n  });","file":"unit/tile.js","skipped":false,"dir":"test"},{"name":"Google layout with depth one","suites":["Tile"],"updatePoint":{"line":622,"column":34,"index":21930},"line":622,"code":"  it('Google layout with depth one', function (done) {\n    const directory = fixtures.path('output.google_depth_one.dzi');\n    rimraf(directory, function () {\n      sharp(fixtures.inputJpg).tile({\n        layout: 'google',\n        depth: 'one',\n        size: 256\n      }).toFile(directory, function (err, info) {\n        if (err) throw err;\n        assert.strictEqual('dz', info.format);\n        assert.strictEqual(2725, info.width);\n        assert.strictEqual(2225, info.height);\n        assert.strictEqual(3, info.channels);\n        assert.strictEqual('number', typeof info.size);\n        assertGoogleTiles(directory, 256, 1, done);\n      });\n    });\n  });","file":"unit/tile.js","skipped":false,"dir":"test"},{"name":"Google layout with depth onepixel","suites":["Tile"],"updatePoint":{"line":640,"column":39,"index":22594},"line":640,"code":"  it('Google layout with depth onepixel', function (done) {\n    const directory = fixtures.path('output.google_depth_onepixel.dzi');\n    rimraf(directory, function () {\n      sharp(fixtures.inputJpg).tile({\n        layout: 'google',\n        depth: 'onepixel',\n        size: 256\n      }).toFile(directory, function (err, info) {\n        if (err) throw err;\n        assert.strictEqual('dz', info.format);\n        assert.strictEqual(2725, info.width);\n        assert.strictEqual(2225, info.height);\n        assert.strictEqual(3, info.channels);\n        assert.strictEqual('number', typeof info.size);\n        assertGoogleTiles(directory, 256, 13, done);\n      });\n    });\n  });","file":"unit/tile.js","skipped":false,"dir":"test"},{"name":"Google layout with depth onetile","suites":["Tile"],"updatePoint":{"line":658,"column":38,"index":23268},"line":658,"code":"  it('Google layout with depth onetile', function (done) {\n    const directory = fixtures.path('output.google_depth_onetile.dzi');\n    rimraf(directory, function () {\n      sharp(fixtures.inputJpg).tile({\n        layout: 'google',\n        depth: 'onetile',\n        size: 256\n      }).toFile(directory, function (err, info) {\n        if (err) throw err;\n        assert.strictEqual('dz', info.format);\n        assert.strictEqual(2725, info.width);\n        assert.strictEqual(2225, info.height);\n        assert.strictEqual(3, info.channels);\n        assert.strictEqual('number', typeof info.size);\n        assertGoogleTiles(directory, 256, 5, done);\n      });\n    });\n  });","file":"unit/tile.js","skipped":false,"dir":"test"},{"name":"Google layout with default skip Blanks","suites":["Tile"],"updatePoint":{"line":676,"column":44,"index":23945},"line":676,"code":"  it('Google layout with default skip Blanks', function (done) {\n    const directory = fixtures.path('output.google_depth_skipBlanks.dzi');\n    rimraf(directory, function () {\n      sharp(fixtures.inputPng).tile({\n        layout: 'google',\n        size: 256\n      }).toFile(directory, function (err, info) {\n        if (err) throw err;\n        const whiteTilePath = path.join(directory, '4', '8', '0.jpg');\n        assert.strictEqual(fs.existsSync(whiteTilePath), false, 'Tile should not exist');\n        assert.strictEqual('dz', info.format);\n        assert.strictEqual(2809, info.width);\n        assert.strictEqual(2074, info.height);\n        assert.strictEqual(3, info.channels);\n        assert.strictEqual('number', typeof info.size);\n        assertGoogleTiles(directory, 256, 5, done);\n      });\n    });\n  });","file":"unit/tile.js","skipped":false,"dir":"test"},{"name":"Google layout with center image in tile","suites":["Tile"],"updatePoint":{"line":695,"column":45,"index":24761},"line":695,"code":"  it('Google layout with center image in tile', function (done) {\n    const directory = fixtures.path('output.google_center.dzi');\n    rimraf(directory, function () {\n      sharp(fixtures.inputJpg).tile({\n        center: true,\n        layout: 'google'\n      }).toFile(directory, function (err, info) {\n        if (err) throw err;\n        assert.strictEqual('dz', info.format);\n        assert.strictEqual(2725, info.width);\n        assert.strictEqual(2225, info.height);\n        assert.strictEqual(3, info.channels);\n        assert.strictEqual('number', typeof info.size);\n        fixtures.assertSimilar(fixtures.expected('tile_centered.jpg'), fs.readFileSync(path.join(directory, '0', '0', '0.jpg')), done);\n      });\n    });\n  });","file":"unit/tile.js","skipped":false,"dir":"test"},{"name":"Google layout with center image in tile centre","suites":["Tile"],"updatePoint":{"line":712,"column":52,"index":25500},"line":712,"code":"  it('Google layout with center image in tile centre', function (done) {\n    const directory = fixtures.path('output.google_center.dzi');\n    rimraf(directory, function () {\n      sharp(fixtures.inputJpg).tile({\n        centre: true,\n        layout: 'google'\n      }).toFile(directory, function (err, info) {\n        if (err) throw err;\n        assert.strictEqual('dz', info.format);\n        assert.strictEqual(2725, info.width);\n        assert.strictEqual(2225, info.height);\n        assert.strictEqual(3, info.channels);\n        assert.strictEqual('number', typeof info.size);\n        fixtures.assertSimilar(fixtures.expected('tile_centered.jpg'), fs.readFileSync(path.join(directory, '0', '0', '0.jpg')), done);\n      });\n    });\n  });","file":"unit/tile.js","skipped":false,"dir":"test"},{"name":"IIIF layout","suites":["Tile"],"updatePoint":{"line":729,"column":17,"index":26204},"line":729,"code":"  it('IIIF layout', function (done) {\n    const name = 'output.iiif.info';\n    const directory = fixtures.path(name);\n    rimraf(directory, function () {\n      const id = 'https://sharp.test.com/iiif';\n      sharp(fixtures.inputJpg).tile({\n        layout: 'iiif',\n        id\n      }).toFile(directory, function (err, info) {\n        if (err) throw err;\n        assert.strictEqual('dz', info.format);\n        assert.strictEqual(2725, info.width);\n        assert.strictEqual(2225, info.height);\n        assert.strictEqual(3, info.channels);\n        assert.strictEqual('number', typeof info.size);\n        const infoJson = require(path.join(directory, 'info.json'));\n        assert.strictEqual(`${id}/${name}`, infoJson['@id']);\n        fs.stat(path.join(directory, '0,0,256,256', '256,', '0', 'default.jpg'), function (err, stat) {\n          if (err) throw err;\n          assert.strictEqual(true, stat.isFile());\n          assert.strictEqual(true, stat.size > 0);\n          done();\n        });\n      });\n    });\n  });","file":"unit/tile.js","skipped":false,"dir":"test"},{"name":"Write to ZIP container using file extension","suites":["Tile"],"updatePoint":{"line":755,"column":49,"index":27252},"line":755,"code":"  it('Write to ZIP container using file extension', function (done) {\n    const container = fixtures.path('output.dz.container.zip');\n    const extractTo = fixtures.path('output.dz.container');\n    const directory = path.join(extractTo, 'output.dz.container_files');\n    rimraf(directory, function () {\n      sharp(fixtures.inputJpg).toFile(container, function (err, info) {\n        if (err) throw err;\n        assert.strictEqual('dz', info.format);\n        assert.strictEqual(2725, info.width);\n        assert.strictEqual(2225, info.height);\n        assert.strictEqual(3, info.channels);\n        assert.strictEqual('number', typeof info.size);\n        fs.stat(container, function (err, stat) {\n          if (err) throw err;\n          assert.strictEqual(true, stat.isFile());\n          assert.strictEqual(true, stat.size > 0);\n          new DecompressZip(container).on('extract', function () {\n            assertDeepZoomTiles(directory, 256, 13, done);\n          }).on('error', function (err) {\n            throw err;\n          }).extract({\n            path: path.dirname(extractTo)\n          });\n        });\n      });\n    });\n  });","file":"unit/tile.js","skipped":false,"dir":"test"},{"name":"Write to ZIP container using container tile option","suites":["Tile"],"updatePoint":{"line":782,"column":56,"index":28392},"line":782,"code":"  it('Write to ZIP container using container tile option', function (done) {\n    const container = fixtures.path('output.dz.containeropt.zip');\n    const extractTo = fixtures.path('output.dz.containeropt');\n    const directory = path.join(extractTo, 'output.dz.containeropt_files');\n    rimraf(directory, function () {\n      sharp(fixtures.inputJpg).tile({\n        container: 'zip'\n      }).toFile(container, function (err, info) {\n        // Vips overrides .dzi extension to .zip used by container var below\n        if (err) throw err;\n        assert.strictEqual('dz', info.format);\n        assert.strictEqual(2725, info.width);\n        assert.strictEqual(2225, info.height);\n        assert.strictEqual(3, info.channels);\n        assert.strictEqual('number', typeof info.size);\n        fs.stat(container, function (err, stat) {\n          if (err) throw err;\n          assert.strictEqual(true, stat.isFile());\n          assert.strictEqual(true, stat.size > 0);\n          new DecompressZip(container).on('extract', function () {\n            assertDeepZoomTiles(directory, 256, 13, done);\n          }).on('error', function (err) {\n            throw err;\n          }).extract({\n            path: path.dirname(extractTo)\n          });\n        });\n      });\n    });\n  });","file":"unit/tile.js","skipped":false,"dir":"test"},{"name":"Will timeout after 1s when performing slow blur operation","suites":["Timeout"],"updatePoint":{"line":7,"column":63,"index":221},"line":7,"code":"  it('Will timeout after 1s when performing slow blur operation', () => assert.rejects(() => sharp(fixtures.inputJpg).blur(100).timeout({\n    seconds: 1\n  }).toBuffer(), /timeout: [0-9]+% complete/));","file":"unit/timeout.js","skipped":false,"dir":"test"},{"name":"invalid object","suites":["Timeout"],"updatePoint":{"line":10,"column":20,"index":379},"line":10,"code":"  it('invalid object', () => assert.throws(() => sharp().timeout('fail'), /Expected object for options but received fail of type string/));","file":"unit/timeout.js","skipped":false,"dir":"test"},{"name":"invalid seconds","suites":["Timeout"],"updatePoint":{"line":11,"column":21,"index":520},"line":11,"code":"  it('invalid seconds', () => assert.throws(() => sharp().timeout({\n    seconds: 'fail'\n  }), /Expected integer between 0 and 3600 for seconds but received fail of type string/));","file":"unit/timeout.js","skipped":false,"dir":"test"},{"name":"tints rgb image red","suites":["Tint"],"updatePoint":{"line":7,"column":25,"index":180},"line":7,"code":"  it('tints rgb image red', function (done) {\n    const output = fixtures.path('output.tint-red.jpg');\n    sharp(fixtures.inputJpg).resize(320, 240, {\n      fastShrinkOnLoad: false\n    }).tint('#FF0000').toFile(output, function (err, info) {\n      if (err) throw err;\n      assert.strictEqual(true, info.size > 0);\n      fixtures.assertMaxColourDistance(output, fixtures.expected('tint-red.jpg'), 18);\n      done();\n    });\n  });","file":"unit/tint.js","skipped":false,"dir":"test"},{"name":"tints rgb image green","suites":["Tint"],"updatePoint":{"line":18,"column":27,"index":612},"line":18,"code":"  it('tints rgb image green', function (done) {\n    const output = fixtures.path('output.tint-green.jpg');\n    sharp(fixtures.inputJpg).resize(320, 240, {\n      fastShrinkOnLoad: false\n    }).tint('#00FF00').toFile(output, function (err, info) {\n      if (err) throw err;\n      assert.strictEqual(true, info.size > 0);\n      fixtures.assertMaxColourDistance(output, fixtures.expected('tint-green.jpg'), 27);\n      done();\n    });\n  });","file":"unit/tint.js","skipped":false,"dir":"test"},{"name":"tints rgb image blue","suites":["Tint"],"updatePoint":{"line":29,"column":26,"index":1047},"line":29,"code":"  it('tints rgb image blue', function (done) {\n    const output = fixtures.path('output.tint-blue.jpg');\n    sharp(fixtures.inputJpg).resize(320, 240, {\n      fastShrinkOnLoad: false\n    }).tint('#0000FF').toFile(output, function (err, info) {\n      if (err) throw err;\n      assert.strictEqual(true, info.size > 0);\n      fixtures.assertMaxColourDistance(output, fixtures.expected('tint-blue.jpg'), 14);\n      done();\n    });\n  });","file":"unit/tint.js","skipped":false,"dir":"test"},{"name":"tints rgb image with sepia tone","suites":["Tint"],"updatePoint":{"line":40,"column":37,"index":1491},"line":40,"code":"  it('tints rgb image with sepia tone', function (done) {\n    const output = fixtures.path('output.tint-sepia.jpg');\n    sharp(fixtures.inputJpg).resize(320, 240, {\n      fastShrinkOnLoad: false\n    }).tint('#704214').toFile(output, function (err, info) {\n      if (err) throw err;\n      assert.strictEqual(320, info.width);\n      assert.strictEqual(240, info.height);\n      fixtures.assertMaxColourDistance(output, fixtures.expected('tint-sepia.jpg'), 10);\n      done();\n    });\n  });","file":"unit/tint.js","skipped":false,"dir":"test"},{"name":"tints rgb image with sepia tone with rgb colour","suites":["Tint"],"updatePoint":{"line":52,"column":53,"index":1993},"line":52,"code":"  it('tints rgb image with sepia tone with rgb colour', function (done) {\n    const output = fixtures.path('output.tint-sepia.jpg');\n    sharp(fixtures.inputJpg).resize(320, 240, {\n      fastShrinkOnLoad: false\n    }).tint([112, 66, 20]).toFile(output, function (err, info) {\n      if (err) throw err;\n      assert.strictEqual(320, info.width);\n      assert.strictEqual(240, info.height);\n      fixtures.assertMaxColourDistance(output, fixtures.expected('tint-sepia.jpg'), 10);\n      done();\n    });\n  });","file":"unit/tint.js","skipped":false,"dir":"test"},{"name":"tints rgb image with alpha channel","suites":["Tint"],"updatePoint":{"line":64,"column":40,"index":2486},"line":64,"code":"  it('tints rgb image with alpha channel', function (done) {\n    const output = fixtures.path('output.tint-alpha.png');\n    sharp(fixtures.inputPngRGBWithAlpha).resize(320, 240, {\n      fastShrinkOnLoad: false\n    }).tint('#704214').toFile(output, function (err, info) {\n      if (err) throw err;\n      assert.strictEqual(320, info.width);\n      assert.strictEqual(240, info.height);\n      fixtures.assertMaxColourDistance(output, fixtures.expected('tint-alpha.png'), 10);\n      done();\n    });\n  });","file":"unit/tint.js","skipped":false,"dir":"test"},{"name":"tints cmyk image red","suites":["Tint"],"updatePoint":{"line":76,"column":26,"index":2973},"line":76,"code":"  it('tints cmyk image red', function (done) {\n    const output = fixtures.path('output.tint-cmyk.jpg');\n    sharp(fixtures.inputJpgWithCmykProfile).resize(320, 240, {\n      fastShrinkOnLoad: false\n    }).tint('#FF0000').toFile(output, function (err, info) {\n      if (err) throw err;\n      assert.strictEqual(true, info.size > 0);\n      fixtures.assertMaxColourDistance(output, fixtures.expected('tint-cmyk.jpg'), 15);\n      done();\n    });\n  });","file":"unit/tint.js","skipped":false,"dir":"test"},{"name":"reusing same sharp object does not reset previously passed parameters to toBuffer","suites":["toBuffer"],"updatePoint":{"line":7,"column":87,"index":240},"line":7,"code":"  it('reusing same sharp object does not reset previously passed parameters to toBuffer', async () => {\n    const image = sharp(fixtures.inputJpg);\n    const obj = await image.toBuffer({\n      resolveWithObject: true\n    });\n    assert.strictEqual(typeof obj, 'object');\n    assert.strictEqual(typeof obj.info, 'object');\n    assert.strictEqual(Buffer.isBuffer(obj.data), true);\n    const data = await image.toBuffer();\n    assert.strictEqual(Buffer.isBuffer(data), true);\n  });","file":"unit/toBuffer.js","skipped":false,"dir":"test"},{"name":"correctly process animated webp with height > 16383","suites":["toBuffer"],"updatePoint":{"line":18,"column":57,"index":689},"line":18,"code":"  it('correctly process animated webp with height > 16383', async () => {\n    const data = await sharp(fixtures.inputWebPAnimatedBigHeight, {\n      animated: true\n    }).toBuffer();\n    assert.strictEqual(Buffer.isBuffer(data), true);\n  });","file":"unit/toBuffer.js","skipped":false,"dir":"test"},{"name":"accepts upper case characters as format parameter (string)","suites":["toFormat"],"updatePoint":{"line":7,"column":64,"index":217},"line":7,"code":"  it('accepts upper case characters as format parameter (string)', async () => {\n    const data = await sharp(fixtures.inputJpg).resize(8, 8).toFormat('PNG').toBuffer();\n    const {\n      format\n    } = await sharp(data).metadata();\n    assert.strictEqual(format, 'png');\n  });","file":"unit/toFormat.js","skipped":false,"dir":"test"},{"name":"accepts upper case characters as format parameter (object)","suites":["toFormat"],"updatePoint":{"line":14,"column":64,"index":495},"line":14,"code":"  it('accepts upper case characters as format parameter (object)', async () => {\n    const data = await sharp(fixtures.inputJpg).resize(8, 8).toFormat({\n      id: 'PNG'\n    }).toBuffer();\n    const {\n      format\n    } = await sharp(data).metadata();\n    assert.strictEqual(format, 'png');\n  });","file":"unit/toFormat.js","skipped":false,"dir":"test"},{"name":"Threshold default","suites":["Trim borders"],"updatePoint":{"line":8,"column":23,"index":235},"line":8,"code":"  it('Threshold default', function (done) {\n    const expected = fixtures.expected('alpha-layer-1-fill-trim-resize.png');\n    sharp(fixtures.inputPngOverlayLayer1).resize(450, 322).trim().toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual('png', info.format);\n      assert.strictEqual(450, info.width);\n      assert.strictEqual(322, info.height);\n      assert.strictEqual(-204, info.trimOffsetLeft);\n      assert.strictEqual(0, info.trimOffsetTop);\n      fixtures.assertSimilar(expected, data, done);\n    });\n  });","file":"unit/trim.js","skipped":false,"dir":"test"},{"name":"Skip shrink-on-load","suites":["Trim borders"],"updatePoint":{"line":20,"column":25,"index":790},"line":20,"code":"  it('Skip shrink-on-load', function (done) {\n    const expected = fixtures.expected('alpha-layer-2-trim-resize.jpg');\n    sharp(fixtures.inputJpgOverlayLayer2).trim().resize({\n      width: 300,\n      fastShrinkOnLoad: false\n    }).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual('jpeg', info.format);\n      assert.strictEqual(300, info.width);\n      assert.strictEqual(true, inRange(info.trimOffsetLeft, -873, -870));\n      assert.strictEqual(-554, info.trimOffsetTop);\n      fixtures.assertSimilar(expected, data, done);\n    });\n  });","file":"unit/trim.js","skipped":false,"dir":"test"},{"name":"single colour PNG where alpha channel provides the image","suites":["Trim borders"],"updatePoint":{"line":34,"column":62,"index":1405},"line":34,"code":"  it('single colour PNG where alpha channel provides the image', () => sharp(fixtures.inputPngImageInAlpha).trim().toBuffer({\n    resolveWithObject: true\n  }).then(({\n    data,\n    info\n  }) => {\n    assert.strictEqual(true, data.length > 0);\n    assert.strictEqual('png', info.format);\n    assert.strictEqual(916, info.width);\n    assert.strictEqual(137, info.height);\n    assert.strictEqual(4, info.channels);\n    assert.strictEqual(-6, info.trimOffsetLeft);\n    assert.strictEqual(-20, info.trimOffsetTop);\n  }));","file":"unit/trim.js","skipped":false,"dir":"test"},{"name":"16-bit PNG with alpha channel","suites":["Trim borders"],"updatePoint":{"line":48,"column":35,"index":1895},"line":48,"code":"  it('16-bit PNG with alpha channel', function (done) {\n    sharp(fixtures.inputPngWithTransparency16bit).resize(32, 32).trim(20).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(true, data.length > 0);\n      assert.strictEqual('png', info.format);\n      assert.strictEqual(32, info.width);\n      assert.strictEqual(32, info.height);\n      assert.strictEqual(4, info.channels);\n      assert.strictEqual(-2, info.trimOffsetLeft);\n      assert.strictEqual(-2, info.trimOffsetTop);\n      fixtures.assertSimilar(fixtures.expected('trim-16bit-rgba.png'), data, done);\n    });\n  });","file":"unit/trim.js","skipped":false,"dir":"test"},{"name":"Attempt to trim 2x2 pixel image fails","suites":["Trim borders"],"updatePoint":{"line":61,"column":43,"index":2520},"line":61,"code":"  it('Attempt to trim 2x2 pixel image fails', function (done) {\n    sharp({\n      create: {\n        width: 2,\n        height: 2,\n        channels: 3,\n        background: 'red'\n      }\n    }).trim().toBuffer().then(() => {\n      done(new Error('Expected an error'));\n    }).catch(err => {\n      assert.strictEqual('Image to trim must be at least 3x3 pixels', err.message);\n      done();\n    }).catch(done);\n  });","file":"unit/trim.js","skipped":false,"dir":"test"},{"name":"should rotate before trim","suites":["Trim borders"],"updatePoint":{"line":76,"column":31,"index":2920},"line":76,"code":"  it('should rotate before trim', () => sharp({\n    create: {\n      width: 20,\n      height: 30,\n      channels: 3,\n      background: 'white'\n    }\n  }).rotate(30).png().toBuffer().then(rotated30 => sharp(rotated30).rotate(-30).trim(128).toBuffer({\n    resolveWithObject: true\n  }).then(({\n    info\n  }) => {\n    assert.strictEqual(20, info.width);\n    assert.strictEqual(31, info.height);\n    assert.strictEqual(-8, info.trimOffsetTop);\n    assert.strictEqual(-13, info.trimOffsetLeft);\n  })));","file":"unit/trim.js","skipped":false,"dir":"test"},{"name":"Can be disabled","suites":["Utilities","Cache"],"updatePoint":{"line":7,"column":23,"index":176},"line":7,"code":"    it('Can be disabled', function () {\n      sharp.cache(false);\n      const cache = sharp.cache(false);\n      assert.strictEqual(cache.memory.current, 0);\n      assert.strictEqual(cache.memory.max, 0);\n      assert.strictEqual(typeof cache.memory.high, 'number');\n      assert.strictEqual(cache.files.current, 0);\n      assert.strictEqual(cache.files.max, 0);\n      assert.strictEqual(cache.items.current, 0);\n      assert.strictEqual(cache.items.max, 0);\n    });","file":"unit/util.js","skipped":false,"dir":"test"},{"name":"Can be enabled with defaults","suites":["Utilities","Cache"],"updatePoint":{"line":18,"column":36,"index":655},"line":18,"code":"    it('Can be enabled with defaults', function () {\n      const cache = sharp.cache(true);\n      assert.strictEqual(cache.memory.max, 50);\n      assert.strictEqual(cache.files.max, 20);\n      assert.strictEqual(cache.items.max, 100);\n    });","file":"unit/util.js","skipped":false,"dir":"test"},{"name":"Can be set to zero","suites":["Utilities","Cache"],"updatePoint":{"line":24,"column":26,"index":888},"line":24,"code":"    it('Can be set to zero', function () {\n      const cache = sharp.cache({\n        memory: 0,\n        files: 0,\n        items: 0\n      });\n      assert.strictEqual(cache.memory.max, 0);\n      assert.strictEqual(cache.files.max, 0);\n      assert.strictEqual(cache.items.max, 0);\n    });","file":"unit/util.js","skipped":false,"dir":"test"},{"name":"Can be set to a maximum of 10MB, 100 files and 1000 items","suites":["Utilities","Cache"],"updatePoint":{"line":34,"column":65,"index":1215},"line":34,"code":"    it('Can be set to a maximum of 10MB, 100 files and 1000 items', function () {\n      const cache = sharp.cache({\n        memory: 10,\n        files: 100,\n        items: 1000\n      });\n      assert.strictEqual(cache.memory.max, 10);\n      assert.strictEqual(cache.files.max, 100);\n      assert.strictEqual(cache.items.max, 1000);\n    });","file":"unit/util.js","skipped":false,"dir":"test"},{"name":"Ignores invalid values","suites":["Utilities","Cache"],"updatePoint":{"line":44,"column":30,"index":1519},"line":44,"code":"    it('Ignores invalid values', function () {\n      sharp.cache(true);\n      const cache = sharp.cache('spoons');\n      assert.strictEqual(cache.memory.max, 50);\n      assert.strictEqual(cache.files.max, 20);\n      assert.strictEqual(cache.items.max, 100);\n    });","file":"unit/util.js","skipped":false,"dir":"test"},{"name":"Can be set to use 16 threads","suites":["Utilities","Concurrency"],"updatePoint":{"line":53,"column":36,"index":1837},"line":53,"code":"    it('Can be set to use 16 threads', function () {\n      sharp.concurrency(16);\n      assert.strictEqual(16, sharp.concurrency());\n    });","file":"unit/util.js","skipped":false,"dir":"test"},{"name":"Can be reset to default","suites":["Utilities","Concurrency"],"updatePoint":{"line":57,"column":31,"index":1973},"line":57,"code":"    it('Can be reset to default', function () {\n      sharp.concurrency(0);\n      assert.strictEqual(true, sharp.concurrency() > 0);\n    });","file":"unit/util.js","skipped":false,"dir":"test"},{"name":"Ignores invalid values","suites":["Utilities","Concurrency"],"updatePoint":{"line":61,"column":30,"index":2113},"line":61,"code":"    it('Ignores invalid values', function () {\n      const defaultConcurrency = sharp.concurrency();\n      sharp.concurrency('spoons');\n      assert.strictEqual(defaultConcurrency, sharp.concurrency());\n    });","file":"unit/util.js","skipped":false,"dir":"test"},{"name":"Have zero value at rest","suites":["Utilities","Counters"],"updatePoint":{"line":68,"column":31,"index":2368},"line":68,"code":"    it('Have zero value at rest', function () {\n      const counters = sharp.counters();\n      assert.strictEqual(0, counters.queue);\n      assert.strictEqual(0, counters.process);\n    });","file":"unit/util.js","skipped":false,"dir":"test"},{"name":"Can get current state","suites":["Utilities","SIMD"],"updatePoint":{"line":75,"column":29,"index":2594},"line":75,"code":"    it('Can get current state', function () {\n      const simd = sharp.simd();\n      assert.strictEqual(typeof simd, 'boolean');\n    });","file":"unit/util.js","skipped":false,"dir":"test"},{"name":"Can disable","suites":["Utilities","SIMD"],"updatePoint":{"line":79,"column":19,"index":2721},"line":79,"code":"    it('Can disable', function () {\n      const simd = sharp.simd(false);\n      assert.strictEqual(simd, false);\n    });","file":"unit/util.js","skipped":false,"dir":"test"},{"name":"Can attempt to enable","suites":["Utilities","SIMD"],"updatePoint":{"line":83,"column":29,"index":2852},"line":83,"code":"    it('Can attempt to enable', function () {\n      const simd = sharp.simd(true);\n      assert.strictEqual(typeof simd, 'boolean');\n    });","file":"unit/util.js","skipped":false,"dir":"test"},{"name":"Contains expected attributes","suites":["Utilities","Format"],"updatePoint":{"line":89,"column":36,"index":3041},"line":89,"code":"    it('Contains expected attributes', function () {\n      assert.strictEqual('object', typeof sharp.format);\n      Object.keys(sharp.format).forEach(function (format) {\n        assert.strictEqual(true, 'id' in sharp.format[format]);\n        assert.strictEqual(format, sharp.format[format].id);\n        ['input', 'output'].forEach(function (direction) {\n          assert.strictEqual(true, direction in sharp.format[format]);\n          assert.strictEqual('object', typeof sharp.format[format][direction]);\n          assert.strictEqual(3, Object.keys(sharp.format[format][direction]).length);\n          assert.strictEqual(true, 'file' in sharp.format[format][direction]);\n          assert.strictEqual(true, 'buffer' in sharp.format[format][direction]);\n          assert.strictEqual(true, 'stream' in sharp.format[format][direction]);\n          assert.strictEqual('boolean', typeof sharp.format[format][direction].file);\n          assert.strictEqual('boolean', typeof sharp.format[format][direction].buffer);\n          assert.strictEqual('boolean', typeof sharp.format[format][direction].stream);\n        });\n      });\n    });","file":"unit/util.js","skipped":false,"dir":"test"},{"name":"Raw file=false, buffer=true, stream=true","suites":["Utilities","Format"],"updatePoint":{"line":107,"column":48,"index":4177},"line":107,"code":"    it('Raw file=false, buffer=true, stream=true', function () {\n      ['input', 'output'].forEach(function (direction) {\n        assert.strictEqual(false, sharp.format.raw[direction].file);\n        assert.strictEqual(true, sharp.format.raw[direction].buffer);\n        assert.strictEqual(true, sharp.format.raw[direction].stream);\n      });\n    });","file":"unit/util.js","skipped":false,"dir":"test"},{"name":"vips format supports filesystem only","suites":["Utilities","Format"],"updatePoint":{"line":114,"column":44,"index":4522},"line":114,"code":"    it('vips format supports filesystem only', function () {\n      ['input', 'output'].forEach(function (direction) {\n        assert.strictEqual(true, sharp.format.vips[direction].file);\n        assert.strictEqual(false, sharp.format.vips[direction].buffer);\n        assert.strictEqual(false, sharp.format.vips[direction].stream);\n      });\n    });","file":"unit/util.js","skipped":false,"dir":"test"},{"name":"Contains expected attributes","suites":["Utilities","Versions"],"updatePoint":{"line":123,"column":36,"index":4906},"line":123,"code":"    it('Contains expected attributes', function () {\n      assert.strictEqual('object', typeof sharp.versions);\n      assert.strictEqual('string', typeof sharp.versions.vips);\n    });","file":"unit/util.js","skipped":false,"dir":"test"},{"name":"WebP output","suites":["WebP"],"updatePoint":{"line":8,"column":17,"index":198},"line":8,"code":"  it('WebP output', function (done) {\n    sharp(fixtures.inputJpg).resize(320, 240).toFormat(sharp.format.webp).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(true, data.length > 0);\n      assert.strictEqual('webp', info.format);\n      assert.strictEqual(320, info.width);\n      assert.strictEqual(240, info.height);\n      done();\n    });\n  });","file":"unit/webp.js","skipped":false,"dir":"test"},{"name":"Invalid WebP quality throws error","suites":["WebP"],"updatePoint":{"line":18,"column":39,"index":607},"line":18,"code":"  it('Invalid WebP quality throws error', function () {\n    assert.throws(function () {\n      sharp().webp({\n        quality: 101\n      });\n    });\n  });","file":"unit/webp.js","skipped":false,"dir":"test"},{"name":"Invalid WebP alpha quality throws error","suites":["WebP"],"updatePoint":{"line":25,"column":45,"index":767},"line":25,"code":"  it('Invalid WebP alpha quality throws error', function () {\n    assert.throws(function () {\n      sharp().webp({\n        alphaQuality: 101\n      });\n    });\n  });","file":"unit/webp.js","skipped":false,"dir":"test"},{"name":"should work for webp alpha quality","suites":["WebP"],"updatePoint":{"line":32,"column":40,"index":927},"line":32,"code":"  it('should work for webp alpha quality', function (done) {\n    sharp(fixtures.inputPngAlphaPremultiplicationSmall).webp({\n      alphaQuality: 80,\n      reductionEffort: 0\n    }).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(true, data.length > 0);\n      assert.strictEqual('webp', info.format);\n      fixtures.assertSimilar(fixtures.expected('webp-alpha-80.webp'), data, done);\n    });\n  });","file":"unit/webp.js","skipped":false,"dir":"test"},{"name":"should work for webp lossless","suites":["WebP"],"updatePoint":{"line":43,"column":35,"index":1359},"line":43,"code":"  it('should work for webp lossless', function (done) {\n    sharp(fixtures.inputPngAlphaPremultiplicationSmall).webp({\n      lossless: true,\n      reductionEffort: 0\n    }).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(true, data.length > 0);\n      assert.strictEqual('webp', info.format);\n      fixtures.assertSimilar(fixtures.expected('webp-lossless.webp'), data, done);\n    });\n  });","file":"unit/webp.js","skipped":false,"dir":"test"},{"name":"should work for webp near-lossless","suites":["WebP"],"updatePoint":{"line":54,"column":40,"index":1794},"line":54,"code":"  it('should work for webp near-lossless', function (done) {\n    sharp(fixtures.inputPngAlphaPremultiplicationSmall).webp({\n      nearLossless: true,\n      quality: 50,\n      reductionEffort: 0\n    }).toBuffer(function (err50, data50, info50) {\n      if (err50) throw err50;\n      assert.strictEqual(true, data50.length > 0);\n      assert.strictEqual('webp', info50.format);\n      fixtures.assertSimilar(fixtures.expected('webp-near-lossless-50.webp'), data50, done);\n    });\n  });","file":"unit/webp.js","skipped":false,"dir":"test"},{"name":"should use near-lossless when both lossless and nearLossless are specified","suites":["WebP"],"updatePoint":{"line":66,"column":80,"index":2316},"line":66,"code":"  it('should use near-lossless when both lossless and nearLossless are specified', function (done) {\n    sharp(fixtures.inputPngAlphaPremultiplicationSmall).webp({\n      nearLossless: true,\n      quality: 50,\n      lossless: true,\n      reductionEffort: 0\n    }).toBuffer(function (err50, data50, info50) {\n      if (err50) throw err50;\n      assert.strictEqual(true, data50.length > 0);\n      assert.strictEqual('webp', info50.format);\n      fixtures.assertSimilar(fixtures.expected('webp-near-lossless-50.webp'), data50, done);\n    });\n  });","file":"unit/webp.js","skipped":false,"dir":"test"},{"name":"should produce a larger file size using smartSubsample","suites":["WebP"],"updatePoint":{"line":79,"column":60,"index":2840},"line":79,"code":"  it('should produce a larger file size using smartSubsample', () => sharp(fixtures.inputJpg).resize(320, 240).webp({\n    smartSubsample: false\n  }).toBuffer().then(withoutSmartSubsample => sharp(fixtures.inputJpg).resize(320, 240).webp({\n    smartSubsample: true\n  }).toBuffer().then(withSmartSubsample => {\n    assert.strictEqual(true, withSmartSubsample.length > withoutSmartSubsample.length);\n  })));","file":"unit/webp.js","skipped":false,"dir":"test"},{"name":"invalid smartSubsample throws","suites":["WebP"],"updatePoint":{"line":86,"column":35,"index":3220},"line":86,"code":"  it('invalid smartSubsample throws', () => {\n    assert.throws(() => {\n      sharp().webp({\n        smartSubsample: 1\n      });\n    });\n  });","file":"unit/webp.js","skipped":false,"dir":"test"},{"name":"should produce a smaller file size with increased reductionEffort","suites":["WebP"],"updatePoint":{"line":93,"column":71,"index":3399},"line":93,"code":"  it('should produce a smaller file size with increased reductionEffort', () => sharp(fixtures.inputJpg).resize(320, 240).webp().toBuffer().then(reductionEffort4 => sharp(fixtures.inputJpg).resize(320, 240).webp({\n    reductionEffort: 6\n  }).toBuffer().then(reductionEffort6 => {\n    assert.strictEqual(true, reductionEffort4.length > reductionEffort6.length);\n  })));","file":"unit/webp.js","skipped":false,"dir":"test"},{"name":"invalid reductionEffort throws","suites":["WebP"],"updatePoint":{"line":98,"column":36,"index":3733},"line":98,"code":"  it('invalid reductionEffort throws', () => {\n    assert.throws(() => {\n      sharp().webp({\n        reductionEffort: true\n      });\n    });\n  });","file":"unit/webp.js","skipped":false,"dir":"test"},{"name":"out of range reductionEffort throws","suites":["WebP"],"updatePoint":{"line":105,"column":41,"index":3886},"line":105,"code":"  it('out of range reductionEffort throws', () => {\n    assert.throws(() => {\n      sharp().webp({\n        reductionEffort: -1\n      });\n    });\n  });","file":"unit/webp.js","skipped":false,"dir":"test"},{"name":"invalid pageHeight throws","suites":["WebP"],"updatePoint":{"line":112,"column":31,"index":4027},"line":112,"code":"  it('invalid pageHeight throws', () => {\n    assert.throws(() => {\n      sharp().webp({\n        pageHeight: 0\n      });\n    });\n  });","file":"unit/webp.js","skipped":false,"dir":"test"},{"name":"invalid loop throws","suites":["WebP"],"updatePoint":{"line":119,"column":25,"index":4156},"line":119,"code":"  it('invalid loop throws', () => {\n    assert.throws(() => {\n      sharp().webp({\n        loop: -1\n      });\n    });\n    assert.throws(() => {\n      sharp().webp({\n        loop: 65536\n      });\n    });\n  });","file":"unit/webp.js","skipped":false,"dir":"test"},{"name":"invalid delay throws","suites":["WebP"],"updatePoint":{"line":131,"column":26,"index":4366},"line":131,"code":"  it('invalid delay throws', () => {\n    assert.throws(() => {\n      sharp().webp({\n        delay: [-1]\n      });\n    });\n    assert.throws(() => {\n      sharp().webp({\n        delay: [65536]\n      });\n    });\n  });","file":"unit/webp.js","skipped":false,"dir":"test"},{"name":"should double the number of frames with default delay","suites":["WebP"],"updatePoint":{"line":143,"column":59,"index":4615},"line":143,"code":"  it('should double the number of frames with default delay', async () => {\n    const original = await sharp(fixtures.inputWebPAnimated, {\n      pages: -1\n    }).metadata();\n    const updated = await sharp(fixtures.inputWebPAnimated, {\n      pages: -1\n    }).webp({\n      pageHeight: original.pageHeight / 2\n    }).toBuffer().then(data => sharp(data, {\n      pages: -1\n    }).metadata());\n    assert.strictEqual(updated.pages, original.pages * 2);\n    assert.strictEqual(updated.pageHeight, original.pageHeight / 2);\n    assert.deepStrictEqual(updated.delay, [...original.delay, ...Array(9).fill(120)]);\n  });","file":"unit/webp.js","skipped":false,"dir":"test"},{"name":"should limit animation loop","suites":["WebP"],"updatePoint":{"line":158,"column":33,"index":5199},"line":158,"code":"  it('should limit animation loop', async () => {\n    const updated = await sharp(fixtures.inputWebPAnimated, {\n      pages: -1\n    }).webp({\n      loop: 3\n    }).toBuffer().then(data => sharp(data, {\n      pages: -1\n    }).metadata());\n    assert.strictEqual(updated.loop, 3);\n  });","file":"unit/webp.js","skipped":false,"dir":"test"},{"name":"should change delay between frames","suites":["WebP"],"updatePoint":{"line":168,"column":40,"index":5490},"line":168,"code":"  it('should change delay between frames', async () => {\n    const original = await sharp(fixtures.inputWebPAnimated, {\n      pages: -1\n    }).metadata();\n    const expectedDelay = [...Array(original.pages).fill(40)];\n    const updated = await sharp(fixtures.inputWebPAnimated, {\n      pages: -1\n    }).webp({\n      delay: expectedDelay\n    }).toBuffer().then(data => sharp(data, {\n      pages: -1\n    }).metadata());\n    assert.deepStrictEqual(updated.delay, expectedDelay);\n  });","file":"unit/webp.js","skipped":false,"dir":"test"},{"name":"should work with streams when only animated is set","suites":["WebP"],"updatePoint":{"line":182,"column":56,"index":5988},"line":182,"code":"  it('should work with streams when only animated is set', function (done) {\n    fs.createReadStream(fixtures.inputWebPAnimated).pipe(sharp({\n      animated: true\n    })).webp({\n      lossless: true,\n      reductionEffort: 0\n    }).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(true, data.length > 0);\n      assert.strictEqual('webp', info.format);\n      fixtures.assertSimilar(fixtures.inputWebPAnimated, data, done);\n    });\n  });","file":"unit/webp.js","skipped":false,"dir":"test"},{"name":"should work with streams when only pages is set","suites":["WebP"],"updatePoint":{"line":195,"column":53,"index":6461},"line":195,"code":"  it('should work with streams when only pages is set', function (done) {\n    fs.createReadStream(fixtures.inputWebPAnimated).pipe(sharp({\n      pages: -1\n    })).webp({\n      lossless: true,\n      reductionEffort: 0\n    }).toBuffer(function (err, data, info) {\n      if (err) throw err;\n      assert.strictEqual(true, data.length > 0);\n      assert.strictEqual('webp', info.format);\n      fixtures.assertSimilar(fixtures.inputWebPAnimated, data, done);\n    });\n  });","file":"unit/webp.js","skipped":false,"dir":"test"},{"name":"should remove animation properties when loading single page","suites":["WebP"],"updatePoint":{"line":208,"column":65,"index":6941},"line":208,"code":"  it('should remove animation properties when loading single page', async () => {\n    const data = await sharp(fixtures.inputGifAnimatedLoop3).resize({\n      height: 570\n    }).webp({\n      reductionEffort: 0\n    }).toBuffer();\n    const metadata = await sharp(data).metadata();\n    assert.deepStrictEqual(metadata, {\n      format: 'webp',\n      size: 2580,\n      width: 740,\n      height: 570,\n      space: 'srgb',\n      channels: 3,\n      depth: 'uchar',\n      isProgressive: false,\n      hasProfile: false,\n      hasAlpha: false\n    });\n  });","file":"unit/webp.js","skipped":false,"dir":"test"}]}