{"repo":"Marak/faker.js","url":"https://github.com/Marak/faker.js","branch":"master","configs":[{"package":"faker","lang":"js","dir":"test","framework":"mocha","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"occasionally returns prefix + first name + suffix","suites":["address.js","city()"],"updatePoint":{"line":24,"column":57},"line":24,"code":"    it(\"occasionally returns prefix + first name + suffix\", function () {\n      sinon.stub(faker.datatype, 'number').returns(0);\n      var city = faker.address.city();\n      assert.ok(city);\n      assert.ok(faker.address.cityPrefix.calledOnce);\n      assert.ok(faker.name.firstName.calledOnce);\n      assert.ok(faker.address.citySuffix.calledOnce);\n    });","file":"address.unit.js","skipped":false,"dir":"test"},{"name":"occasionally returns prefix + first name","suites":["address.js","city()"],"updatePoint":{"line":32,"column":48},"line":32,"code":"    it(\"occasionally returns prefix + first name\", function () {\n      sinon.stub(faker.datatype, 'number').returns(1);\n      var city = faker.address.city();\n      assert.ok(city);\n      assert.ok(faker.address.cityPrefix.calledOnce);\n      assert.ok(faker.name.firstName.calledOnce);\n    });","file":"address.unit.js","skipped":false,"dir":"test"},{"name":"occasionally returns first name + suffix","suites":["address.js","city()"],"updatePoint":{"line":39,"column":48},"line":39,"code":"    it(\"occasionally returns first name + suffix\", function () {\n      sinon.stub(faker.datatype, 'number').returns(2);\n      var city = faker.address.city();\n      assert.ok(city);\n      assert.ok(faker.address.citySuffix.calledOnce);\n    });","file":"address.unit.js","skipped":false,"dir":"test"},{"name":"occasionally returns last name + suffix","suites":["address.js","city()"],"updatePoint":{"line":45,"column":47},"line":45,"code":"    it(\"occasionally returns last name + suffix\", function () {\n      sinon.stub(faker.datatype, 'number').returns(3);\n      var city = faker.address.city();\n      assert.ok(city);\n      assert.ok(!faker.address.cityPrefix.called);\n      assert.ok(!faker.name.firstName.called);\n      assert.ok(faker.name.lastName.calledOnce);\n      assert.ok(faker.address.citySuffix.calledOnce);\n    });","file":"address.unit.js","skipped":false,"dir":"test"},{"name":"occasionally returns last name + suffix","suites":["address.js","streetName()"],"updatePoint":{"line":66,"column":47},"line":66,"code":"    it(\"occasionally returns last name + suffix\", function () {\n      sinon.stub(faker.datatype, 'number').returns(0);\n      var street_name = faker.address.streetName();\n      assert.ok(street_name);\n      assert.ok(!faker.name.firstName.called);\n      assert.ok(faker.name.lastName.calledOnce);\n      assert.ok(faker.address.streetSuffix.calledOnce);\n      faker.datatype.number.restore();\n    });","file":"address.unit.js","skipped":false,"dir":"test"},{"name":"occasionally returns first name + suffix","suites":["address.js","streetName()"],"updatePoint":{"line":75,"column":48},"line":75,"code":"    it(\"occasionally returns first name + suffix\", function () {\n      sinon.stub(faker.datatype, 'number').returns(1);\n      var street_name = faker.address.streetName();\n      assert.ok(street_name);\n      assert.ok(faker.name.firstName.calledOnce);\n      assert.ok(!faker.name.lastName.called);\n      assert.ok(faker.address.streetSuffix.calledOnce);\n      faker.datatype.number.restore();\n    });","file":"address.unit.js","skipped":false,"dir":"test"},{"name":"trims trailing whitespace from the name","suites":["address.js","streetName()"],"updatePoint":{"line":84,"column":47},"line":84,"code":"    it(\"trims trailing whitespace from the name\", function () {\n      faker.address.streetSuffix.restore();\n      sinon.stub(faker.address, 'streetSuffix').returns(\"\");\n      var street_name = faker.address.streetName();\n      assert.ok(!street_name.match(/ $/));\n    });","file":"address.unit.js","skipped":false,"dir":"test"},{"name":"occasionally returns a 5-digit street number","suites":["address.js","streetAddress()"],"updatePoint":{"line":104,"column":52},"line":104,"code":"    it(\"occasionally returns a 5-digit street number\", function () {\n      sinon.stub(faker.datatype, 'number').returns(0);\n      var address = faker.address.streetAddress();\n      var expected = 5;\n      var parts = address.split(' ');\n      assert.strictEqual(parts[0].length, expected, errorExpectDigits(expected));\n      assert.ok(faker.address.streetName.called);\n      faker.datatype.number.restore();\n    });","file":"address.unit.js","skipped":false,"dir":"test"},{"name":"occasionally returns a 4-digit street number","suites":["address.js","streetAddress()"],"updatePoint":{"line":113,"column":52},"line":113,"code":"    it(\"occasionally returns a 4-digit street number\", function () {\n      sinon.stub(faker.datatype, 'number').returns(1);\n      var address = faker.address.streetAddress();\n      var parts = address.split(' ');\n      var expected = 4;\n      assert.strictEqual(parts[0].length, expected, errorExpectDigits(expected));\n      assert.ok(faker.address.streetName.called);\n      faker.datatype.number.restore();\n    });","file":"address.unit.js","skipped":false,"dir":"test"},{"name":"occasionally returns a 3-digit street number","suites":["address.js","streetAddress()"],"updatePoint":{"line":122,"column":52},"line":122,"code":"    it(\"occasionally returns a 3-digit street number\", function () {\n      sinon.stub(faker.datatype, 'number').returns(2);\n      var address = faker.address.streetAddress();\n      var parts = address.split(' ');\n      var expected = 3;\n      assert.strictEqual(parts[0].length, expected, errorExpectDigits(expected));\n      assert.ok(faker.address.streetName.called);\n      assert.ok(!faker.address.secondaryAddress.called);\n      faker.datatype.number.restore();\n    });","file":"address.unit.js","skipped":false,"dir":"test"},{"name":"adds a secondary address to the result","suites":["address.js","streetAddress()","when useFulladdress is true"],"updatePoint":{"line":133,"column":48},"line":133,"code":"      it(\"adds a secondary address to the result\", function () {\n        faker.address.streetAddress(true);\n        assert.ok(faker.address.secondaryAddress.called);\n      });","file":"address.unit.js","skipped":false,"dir":"test"},{"name":"randomly chooses an Apt or Suite number","suites":["address.js","secondaryAddress()"],"updatePoint":{"line":140,"column":47},"line":140,"code":"    it(\"randomly chooses an Apt or Suite number\", function () {\n      sinon.spy(faker.random, 'arrayElement');\n      var address = faker.address.secondaryAddress();\n      var expected_array = ['Apt. ###', 'Suite ###'];\n      assert.ok(address);\n      assert.ok(faker.random.arrayElement.calledWith(expected_array));\n      faker.random.arrayElement.restore();\n    });","file":"address.unit.js","skipped":false,"dir":"test"},{"name":"returns random county","suites":["address.js","county()"],"updatePoint":{"line":150,"column":29},"line":150,"code":"    it(\"returns random county\", function () {\n      sinon.spy(faker.address, 'county');\n      var county = faker.address.county();\n      assert.ok(county);\n      assert.ok(faker.address.county.called);\n      faker.address.county.restore();\n    });","file":"address.unit.js","skipped":false,"dir":"test"},{"name":"returns random country","suites":["address.js","country()"],"updatePoint":{"line":159,"column":30},"line":159,"code":"    it(\"returns random country\", function () {\n      sinon.spy(faker.address, 'country');\n      var country = faker.address.country();\n      assert.ok(country);\n      assert.ok(faker.address.country.called);\n      faker.address.country.restore();\n    });","file":"address.unit.js","skipped":false,"dir":"test"},{"name":"returns random countryCode","suites":["address.js","countryCode()"],"updatePoint":{"line":168,"column":34},"line":168,"code":"    it(\"returns random countryCode\", function () {\n      sinon.spy(faker.address, 'countryCode');\n      var countryCode = faker.address.countryCode();\n      assert.ok(countryCode);\n      assert.ok(faker.address.countryCode.called);\n      faker.address.countryCode.restore();\n    });","file":"address.unit.js","skipped":false,"dir":"test"},{"name":"returns random alpha-3 countryCode","suites":["address.js","countryCode()"],"updatePoint":{"line":175,"column":42},"line":175,"code":"    it(\"returns random alpha-3 countryCode\", function () {\n      sinon.spy(faker.address, 'countryCode');\n      var countryCode = faker.address.countryCode(\"alpha-3\");\n      assert.ok(countryCode);\n      assert.ok(faker.address.countryCode.called);\n      assert.strictEqual(countryCode.length, 3, \"The countryCode should be had 3 characters\");\n      faker.address.countryCode.restore();\n    });","file":"address.unit.js","skipped":false,"dir":"test"},{"name":"returns random state","suites":["address.js","state()"],"updatePoint":{"line":185,"column":28},"line":185,"code":"    it(\"returns random state\", function () {\n      sinon.spy(faker.address, 'state');\n      var state = faker.address.state();\n      assert.ok(state);\n      assert.ok(faker.address.state.called);\n      faker.address.state.restore();\n    });","file":"address.unit.js","skipped":false,"dir":"test"},{"name":"returns random zipCode","suites":["address.js","zipCode()"],"updatePoint":{"line":194,"column":30},"line":194,"code":"    it(\"returns random zipCode\", function () {\n      sinon.spy(faker.address, 'zipCode');\n      var zipCode = faker.address.zipCode();\n      assert.ok(zipCode);\n      assert.ok(faker.address.zipCode.called);\n      faker.address.zipCode.restore();\n    });","file":"address.unit.js","skipped":false,"dir":"test"},{"name":"returns random zipCode - user specified format","suites":["address.js","zipCode()"],"updatePoint":{"line":201,"column":54},"line":201,"code":"    it(\"returns random zipCode - user specified format\", function () {\n      var zipCode = faker.address.zipCode(\"?#? #?#\");\n      assert.ok(zipCode.match(/^[A-Za-z]\\d[A-Za-z]\\s\\d[A-Za-z]\\d$/)); // try another format\n\n      zipCode = faker.address.zipCode(\"###-###\");\n      assert.ok(zipCode.match(/^\\d{3}-\\d{3}$/));\n    });","file":"address.unit.js","skipped":false,"dir":"test"},{"name":"returns zipCode with proper locale format","suites":["address.js","zipCode()"],"updatePoint":{"line":208,"column":49},"line":208,"code":"    it(\"returns zipCode with proper locale format\", function () {\n      // we'll use the en_CA locale..\n      faker.locale = \"en_CA\";\n      var zipCode = faker.address.zipCode();\n      assert.ok(zipCode.match(/^[A-Za-z]\\d[A-Za-z]\\s?\\d[A-Za-z]\\d$/));\n    });","file":"address.unit.js","skipped":false,"dir":"test"},{"name":"returns zipCode valid for specified State","suites":["address.js","zipCodeByState()"],"updatePoint":{"line":216,"column":49},"line":216,"code":"    it(\"returns zipCode valid for specified State\", function () {\n      faker.locale = \"en_US\";\n      var states = [\"IL\", \"GA\", \"WA\"];\n      var zipCode1 = faker.address.zipCodeByState(states[0]);\n      assert.ok(zipCode1 >= 60001);\n      assert.ok(zipCode1 <= 62999);\n      var zipCode2 = faker.address.zipCodeByState(states[1]);\n      assert.ok(zipCode2 >= 30001);\n      assert.ok(zipCode2 <= 31999);\n      var zipCode3 = faker.address.zipCodeByState(states[2]);\n      assert.ok(zipCode3 >= 98001);\n      assert.ok(zipCode3 <= 99403);\n    });","file":"address.unit.js","skipped":false,"dir":"test"},{"name":"returns undefined if state is invalid","suites":["address.js","zipCodeByState()"],"updatePoint":{"line":229,"column":45},"line":229,"code":"    it(\"returns undefined if state is invalid\", function () {\n      var state = \"XX\";\n      sinon.spy(faker.address, 'zipCode');\n      faker.address.zipCodeByState(state);\n      assert.ok(faker.address.zipCode.called);\n      faker.address.zipCode.restore();\n    });","file":"address.unit.js","skipped":false,"dir":"test"},{"name":"returns undefined if state is valid but localeis invalid","suites":["address.js","zipCodeByState()"],"updatePoint":{"line":236,"column":64},"line":236,"code":"    it(\"returns undefined if state is valid but localeis invalid\", function () {\n      faker.locale = \"zh_CN\";\n      var state = \"IL\";\n      sinon.spy(faker.address, 'zipCode');\n      faker.address.zipCodeByState(state);\n      assert.ok(faker.address.zipCode.called);\n      faker.address.zipCode.restore();\n    });","file":"address.unit.js","skipped":false,"dir":"test"},{"name":"returns random latitude","suites":["address.js","latitude()"],"updatePoint":{"line":246,"column":31},"line":246,"code":"    it(\"returns random latitude\", function () {\n      for (var i = 0; i < 100; i++) {\n        sinon.spy(faker.datatype, 'number');\n        var latitude = faker.address.latitude();\n        assert.ok(typeof latitude === 'string');\n        var latitude_float = parseFloat(latitude);\n        assert.ok(latitude_float >= -90.0);\n        assert.ok(latitude_float <= 90.0);\n        assert.ok(faker.datatype.number.called);\n        faker.datatype.number.restore();\n      }\n    });","file":"address.unit.js","skipped":false,"dir":"test"},{"name":"returns latitude with min and max and default precision","suites":["address.js","latitude()"],"updatePoint":{"line":258,"column":63},"line":258,"code":"    it(\"returns latitude with min and max and default precision\", function () {\n      for (var i = 0; i < 100; i++) {\n        sinon.spy(faker.datatype, 'number');\n        var latitude = faker.address.latitude(-5, 5);\n        assert.ok(typeof latitude === 'string');\n        assert.strictEqual(latitude.split('.')[1].length, 4, \"The precision of latitude should be had of 4 digits\");\n        var latitude_float = parseFloat(latitude);\n        assert.ok(latitude_float >= -5);\n        assert.ok(latitude_float <= 5);\n        assert.ok(faker.datatype.number.called);\n        faker.datatype.number.restore();\n      }\n    });","file":"address.unit.js","skipped":false,"dir":"test"},{"name":"returns random latitude with custom precision","suites":["address.js","latitude()"],"updatePoint":{"line":271,"column":53},"line":271,"code":"    it(\"returns random latitude with custom precision\", function () {\n      for (var i = 0; i < 100; i++) {\n        sinon.spy(faker.datatype, 'number');\n        var latitude = faker.address.latitude(undefined, undefined, 7);\n        assert.ok(typeof latitude === 'string');\n        assert.strictEqual(latitude.split('.')[1].length, 7, \"The precision of latitude should be had of 7 digits\");\n        var latitude_float = parseFloat(latitude);\n        assert.ok(latitude_float >= -180);\n        assert.ok(latitude_float <= 180);\n        assert.ok(faker.datatype.number.called);\n        faker.datatype.number.restore();\n      }\n    });","file":"address.unit.js","skipped":false,"dir":"test"},{"name":"returns random longitude","suites":["address.js","longitude()"],"updatePoint":{"line":286,"column":32},"line":286,"code":"    it(\"returns random longitude\", function () {\n      for (var i = 0; i < 100; i++) {\n        sinon.spy(faker.datatype, 'number');\n        var longitude = faker.address.longitude();\n        assert.ok(typeof longitude === 'string');\n        var longitude_float = parseFloat(longitude);\n        assert.ok(longitude_float >= -180.0);\n        assert.ok(longitude_float <= 180.0);\n        assert.ok(faker.datatype.number.called);\n        faker.datatype.number.restore();\n      }\n    });","file":"address.unit.js","skipped":false,"dir":"test"},{"name":"returns random longitude with min and max and default precision","suites":["address.js","longitude()"],"updatePoint":{"line":298,"column":71},"line":298,"code":"    it(\"returns random longitude with min and max and default precision\", function () {\n      for (var i = 0; i < 100; i++) {\n        sinon.spy(faker.datatype, 'number');\n        var longitude = faker.address.longitude(100, -30);\n        assert.ok(typeof longitude === 'string');\n        assert.strictEqual(longitude.split('.')[1].length, 4, \"The precision of longitude should be had of 4 digits\");\n        var longitude_float = parseFloat(longitude);\n        assert.ok(longitude_float >= -30);\n        assert.ok(longitude_float <= 100);\n        assert.ok(faker.datatype.number.called);\n        faker.datatype.number.restore();\n      }\n    });","file":"address.unit.js","skipped":false,"dir":"test"},{"name":"returns random longitude with custom precision","suites":["address.js","longitude()"],"updatePoint":{"line":311,"column":54},"line":311,"code":"    it(\"returns random longitude with custom precision\", function () {\n      for (var i = 0; i < 100; i++) {\n        sinon.spy(faker.datatype, 'number');\n        var longitude = faker.address.longitude(undefined, undefined, 7);\n        assert.ok(typeof longitude === 'string');\n        assert.strictEqual(longitude.split('.')[1].length, 7, \"The precision of longitude should be had of 7 digits\");\n        var longitude_float = parseFloat(longitude);\n        assert.ok(longitude_float >= -180);\n        assert.ok(longitude_float <= 180);\n        assert.ok(faker.datatype.number.called);\n        faker.datatype.number.restore();\n      }\n    });","file":"address.unit.js","skipped":false,"dir":"test"},{"name":"returns random direction","suites":["address.js","direction()"],"updatePoint":{"line":326,"column":32},"line":326,"code":"    it(\"returns random direction\", function () {\n      sinon.stub(faker.address, 'direction').returns('North');\n      var direction = faker.address.direction();\n      var expected = 'North';\n      assert.strictEqual(direction, expected, \"The random direction should be equals \" + expected);\n      faker.address.direction.restore();\n    });","file":"address.unit.js","skipped":false,"dir":"test"},{"name":"returns abbreviation when useAbbr is false","suites":["address.js","direction()"],"updatePoint":{"line":333,"column":50},"line":333,"code":"    it(\"returns abbreviation when useAbbr is false\", function () {\n      sinon.stub(faker.address, 'direction').returns('N');\n      var direction = faker.address.direction(false);\n      var expected = 'N';\n      assert.strictEqual(direction, expected, \"The abbreviation of direction when useAbbr is false should be equals \" + expected + \". Current is \" + direction);\n      faker.address.direction.restore();\n    });","file":"address.unit.js","skipped":false,"dir":"test"},{"name":"returns abbreviation when useAbbr is true","suites":["address.js","direction()"],"updatePoint":{"line":340,"column":49},"line":340,"code":"    it(\"returns abbreviation when useAbbr is true\", function () {\n      var direction = faker.address.direction(true);\n      var expectedType = 'string';\n      var lengthDirection = direction.length;\n      var prefixErrorMessage = \"The abbreviation of direction when useAbbr is true should\";\n      assert.strictEqual(typeof direction, expectedType, prefixErrorMessage + \" be typeof string. Current is\" + typeof direction);\n      assert.strictEqual(lengthDirection <= 2, true, prefixErrorMessage + \" have a length less or equals 2. Current is \" + lengthDirection);\n    });","file":"address.unit.js","skipped":false,"dir":"test"},{"name":"returns abbreviation when useAbbr is true","suites":["address.js","direction()"],"updatePoint":{"line":348,"column":49},"line":348,"code":"    it(\"returns abbreviation when useAbbr is true\", function () {\n      sinon.stub(faker.address, 'direction').returns('N');\n      var direction = faker.address.direction(true);\n      var expected = 'N';\n      assert.strictEqual(direction, expected, \"The abbreviation of direction when useAbbr is true should be equals \" + expected + \". Current is \" + direction);\n      faker.address.direction.restore();\n    });","file":"address.unit.js","skipped":false,"dir":"test"},{"name":"returns random ordinal direction","suites":["address.js","ordinalDirection()"],"updatePoint":{"line":357,"column":40},"line":357,"code":"    it(\"returns random ordinal direction\", function () {\n      sinon.stub(faker.address, 'ordinalDirection').returns('West');\n      var ordinalDirection = faker.address.ordinalDirection();\n      var expected = 'West';\n      assert.strictEqual(ordinalDirection, expected, \"The ransom ordinal direction should be equals \" + expected + \". Current is \" + ordinalDirection);\n      faker.address.ordinalDirection.restore();\n    });","file":"address.unit.js","skipped":false,"dir":"test"},{"name":"returns abbreviation when useAbbr is true","suites":["address.js","ordinalDirection()"],"updatePoint":{"line":364,"column":49},"line":364,"code":"    it(\"returns abbreviation when useAbbr is true\", function () {\n      sinon.stub(faker.address, 'ordinalDirection').returns('W');\n      var ordinalDirection = faker.address.ordinalDirection(true);\n      var expected = 'W';\n      assert.strictEqual(ordinalDirection, expected, \"The ordinal direction when useAbbr is true should be equals \" + expected + \". Current is \" + ordinalDirection);\n      faker.address.ordinalDirection.restore();\n    });","file":"address.unit.js","skipped":false,"dir":"test"},{"name":"returns abbreviation when useAbbr is true","suites":["address.js","ordinalDirection()"],"updatePoint":{"line":371,"column":49},"line":371,"code":"    it(\"returns abbreviation when useAbbr is true\", function () {\n      var ordinalDirection = faker.address.ordinalDirection(true);\n      var expectedType = 'string';\n      var ordinalDirectionLength = ordinalDirection.length;\n      var prefixErrorMessage = \"The ordinal direction when useAbbr is true should\";\n      assert.strictEqual(typeof ordinalDirection, expectedType, prefixErrorMessage + \" be had typeof equals \" + expectedType + \".Current is \" + typeof ordinalDirection);\n      assert.strictEqual(ordinalDirectionLength <= 2, true, prefixErrorMessage + \" have a length less or equals 2. Current is \" + ordinalDirectionLength);\n    });","file":"address.unit.js","skipped":false,"dir":"test"},{"name":"returns random cardinal direction","suites":["address.js","cardinalDirection()"],"updatePoint":{"line":381,"column":41},"line":381,"code":"    it(\"returns random cardinal direction\", function () {\n      sinon.stub(faker.address, 'cardinalDirection').returns('Northwest');\n      var cardinalDirection = faker.address.cardinalDirection();\n      var expected = 'Northwest';\n      assert.strictEqual(cardinalDirection, expected, \"The random cardinal direction should be equals \" + expected + \". Current is \" + cardinalDirection);\n      faker.address.cardinalDirection.restore();\n    });","file":"address.unit.js","skipped":false,"dir":"test"},{"name":"returns abbreviation when useAbbr is true","suites":["address.js","cardinalDirection()"],"updatePoint":{"line":388,"column":49},"line":388,"code":"    it(\"returns abbreviation when useAbbr is true\", function () {\n      sinon.stub(faker.address, 'cardinalDirection').returns('NW');\n      var cardinalDirection = faker.address.cardinalDirection(true);\n      var expected = 'NW';\n      assert.strictEqual(cardinalDirection, expected, \"The cardinal direction when useAbbr is true should be equals \" + expected + \". Current is \" + cardinalDirection);\n      faker.address.cardinalDirection.restore();\n    });","file":"address.unit.js","skipped":false,"dir":"test"},{"name":"returns abbreviation when useAbbr is true","suites":["address.js","cardinalDirection()"],"updatePoint":{"line":395,"column":49},"line":395,"code":"    it(\"returns abbreviation when useAbbr is true\", function () {\n      var cardinalDirection = faker.address.cardinalDirection(true);\n      var expectedType = 'string';\n      var cardinalDirectionLength = cardinalDirection.length;\n      var prefixErrorMessage = \"The cardinal direction when useAbbr is true should\";\n      assert.strictEqual(typeof cardinalDirection, expectedType, prefixErrorMessage + \" be had typeof equals \" + expectedType + \".Current is \" + typeof ordinalDirection);\n      assert.strictEqual(cardinalDirectionLength <= 2, true, prefixErrorMessage + \" have a length less or equals 2. Current is \" + cardinalDirectionLength);\n    });","file":"address.unit.js","skipped":false,"dir":"test"},{"name":"returns random gps coordinate within a distance of another one","suites":["address.js","nearbyGPSCoordinate()"],"updatePoint":{"line":405,"column":70},"line":405,"code":"    it(\"returns random gps coordinate within a distance of another one\", function () {\n      function haversine(lat1, lon1, lat2, lon2, isMetric) {\n        function degreesToRadians(degrees) {\n          return degrees * (Math.PI / 180.0);\n        }\n\n        function kilometersToMiles(miles) {\n          return miles * 0.621371;\n        }\n\n        var R = 6378.137;\n        var dLat = degreesToRadians(lat2 - lat1);\n        var dLon = degreesToRadians(lon2 - lon1);\n        var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(degreesToRadians(lat1)) * Math.cos(degreesToRadians(lat2)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n        var distance = R * 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n        return isMetric ? distance : kilometersToMiles(distance);\n      }\n\n      for (var i = 0; i < 10000; i++) {\n        var latFloat1 = parseFloat(faker.address.latitude());\n        var lonFloat1 = parseFloat(faker.address.longitude());\n        var radius = Math.random() * 99 + 1; // range of [1, 100)\n\n        var isMetric = Math.round(Math.random()) == 1;\n        var coordinate = faker.address.nearbyGPSCoordinate([latFloat1, lonFloat1], radius, isMetric);\n        assert.ok(coordinate.length === 2);\n        assert.ok(typeof coordinate[0] === 'string');\n        assert.ok(typeof coordinate[1] === 'string');\n        var latFloat2 = parseFloat(coordinate[0]);\n        assert.ok(latFloat2 >= -90.0);\n        assert.ok(latFloat2 <= 90.0);\n        var lonFloat2 = parseFloat(coordinate[1]);\n        assert.ok(lonFloat2 >= -180.0);\n        assert.ok(lonFloat2 <= 180.0); // Due to floating point math, and constants that are not extremely precise,\n        // returned points will not be strictly within the given radius of the input\n        // coordinate. Using a error of 1.0 to compensate.\n\n        var error = 1.0;\n        var actualDistance = haversine(latFloat1, lonFloat1, latFloat2, lonFloat2, isMetric);\n        assert.ok(actualDistance <= radius + error);\n      } // test once with undefined radius\n\n\n      var coordinate = faker.address.nearbyGPSCoordinate([latFloat1, lonFloat1], undefined, isMetric);\n      assert.ok(coordinate.length === 2);\n      assert.ok(typeof coordinate[0] === 'string');\n      assert.ok(typeof coordinate[1] === 'string');\n    });","file":"address.unit.js","skipped":false,"dir":"test"},{"name":"returns random timeZone","suites":["address.js","timeZone()"],"updatePoint":{"line":455,"column":31},"line":455,"code":"    it(\"returns random timeZone\", function () {\n      sinon.spy(faker.address, 'timeZone');\n      var timeZone = faker.address.timeZone();\n      assert.ok(timeZone);\n      assert.ok(faker.address.timeZone.called);\n      faker.address.timeZone.restore();\n    });","file":"address.unit.js","skipped":false,"dir":"test"},{"name":"returns random value from dog array","suites":["animal.js","dog()"],"updatePoint":{"line":11,"column":43},"line":11,"code":"    it(\"returns random value from dog array\", function () {\n      var dog = faker.animal.dog();\n      assert.ok(faker.definitions.animal.dog.indexOf(dog) !== -1);\n    });","file":"animal.unit.js","skipped":false,"dir":"test"},{"name":"returns random value from commerce.color array","suites":["commerce.js","color()"],"updatePoint":{"line":9,"column":54},"line":9,"code":"    it(\"returns random value from commerce.color array\", function () {\n      var color = faker.commerce.color();\n      assert.ok(faker.definitions.commerce.color.indexOf(color) !== -1);\n    });","file":"commerce.unit.js","skipped":false,"dir":"test"},{"name":"should use the default amounts when not passing arguments","suites":["commerce.js","department(max, fixedValue)"],"updatePoint":{"line":15,"column":65},"line":15,"code":"    it(\"should use the default amounts when not passing arguments\", function () {\n      var department = faker.commerce.department();\n      assert.ok(department.split(\" \").length === 1);\n    });","file":"commerce.unit.js","skipped":false,"dir":"test"},{"name":"returns name comprising of an adjective, material and product","suites":["commerce.js","productName()"],"updatePoint":{"line":41,"column":69},"line":41,"code":"    it(\"returns name comprising of an adjective, material and product\", function () {\n      sinon.spy(faker.random, 'arrayElement');\n      sinon.spy(faker.commerce, 'productAdjective');\n      sinon.spy(faker.commerce, 'productMaterial');\n      sinon.spy(faker.commerce, 'product');\n      var name = faker.commerce.productName();\n      assert.ok(name.split(' ').length >= 3);\n      assert.ok(faker.random.arrayElement.calledThrice);\n      assert.ok(faker.commerce.productAdjective.calledOnce);\n      assert.ok(faker.commerce.productMaterial.calledOnce);\n      assert.ok(faker.commerce.product.calledOnce);\n      faker.random.arrayElement.restore();\n      faker.commerce.productAdjective.restore();\n      faker.commerce.productMaterial.restore();\n      faker.commerce.product.restore();\n    });","file":"commerce.unit.js","skipped":false,"dir":"test"},{"name":"should use the default amounts when not passing arguments","suites":["commerce.js","price(min, max, dec, symbol)"],"updatePoint":{"line":59,"column":65},"line":59,"code":"    it(\"should use the default amounts when not passing arguments\", function () {\n      var price = faker.commerce.price();\n      assert.ok(price);\n      assert.strictEqual(price > 0, true, \"the amount should be greater than 0\");\n      assert.strictEqual(price < 1001, true, \"the amount should be less than 1000\");\n    });","file":"commerce.unit.js","skipped":false,"dir":"test"},{"name":"should use the default decimal location when not passing arguments","suites":["commerce.js","price(min, max, dec, symbol)"],"updatePoint":{"line":65,"column":74},"line":65,"code":"    it(\"should use the default decimal location when not passing arguments\", function () {\n      var price = faker.commerce.price();\n      var decimal = \".\";\n      var expected = price.length - 3;\n      var actual = price.indexOf(decimal);\n      assert.strictEqual(actual, expected, \"The expected location of the decimal is \" + expected + \" but it was \" + actual + \" amount \" + price);\n    });","file":"commerce.unit.js","skipped":false,"dir":"test"},{"name":"should not include a currency symbol by default","suites":["commerce.js","price(min, max, dec, symbol)"],"updatePoint":{"line":72,"column":55},"line":72,"code":"    it(\"should not include a currency symbol by default\", function () {\n      var amount = faker.commerce.price();\n      var regexp = new RegExp(/[0-9.]/);\n      var expected = true;\n      var actual = regexp.test(amount);\n      assert.strictEqual(actual, expected, 'The expected match should not include a currency symbol');\n    });","file":"commerce.unit.js","skipped":false,"dir":"test"},{"name":"it should handle negative amounts, but return 0","suites":["commerce.js","price(min, max, dec, symbol)"],"updatePoint":{"line":79,"column":55},"line":79,"code":"    it(\"it should handle negative amounts, but return 0\", function () {\n      var amount = faker.commerce.price(-200, -1);\n      assert.ok(amount);\n      assert.strictEqual(amount == 0.00, true, \"the amount should equal 0\");\n    });","file":"commerce.unit.js","skipped":false,"dir":"test"},{"name":"it should handle argument dec","suites":["commerce.js","price(min, max, dec, symbol)"],"updatePoint":{"line":84,"column":37},"line":84,"code":"    it(\"it should handle argument dec\", function () {\n      var price = faker.commerce.price(100, 100, 1);\n      assert.ok(price);\n      assert.strictEqual(price, '100.0', \"the price should be equal 100.0\");\n    });","file":"commerce.unit.js","skipped":false,"dir":"test"},{"name":"it should handle argument dec = 0","suites":["commerce.js","price(min, max, dec, symbol)"],"updatePoint":{"line":89,"column":41},"line":89,"code":"    it(\"it should handle argument dec = 0\", function () {\n      var price = faker.commerce.price(100, 100, 0);\n      assert.ok(price);\n      assert.strictEqual(price, '100', \"the price should be equal 100\");\n    });","file":"commerce.unit.js","skipped":false,"dir":"test"},{"name":"returns a random product description","suites":["commerce.js","productDescription()"],"updatePoint":{"line":96,"column":44},"line":96,"code":"    it(\"returns a random product description\", function () {\n      sinon.spy(faker.commerce, 'productDescription');\n      var description = faker.commerce.productDescription();\n      assert.ok(typeof description === 'string');\n      assert.ok(faker.commerce.productDescription.calledOnce);\n      faker.commerce.productDescription.restore();\n    });","file":"commerce.unit.js","skipped":false,"dir":"test"},{"name":"sometimes returns three last names","suites":["company.js","companyName()"],"updatePoint":{"line":11,"column":42},"line":11,"code":"    it(\"sometimes returns three last names\", function () {\n      sinon.spy(faker.name, 'lastName');\n      sinon.stub(faker.datatype, 'number').returns(2);\n      var name = faker.company.companyName();\n      var parts = name.split(' ');\n      assert.strictEqual(parts.length, 4); // account for word 'and'\n\n      assert.ok(faker.name.lastName.calledThrice);\n      faker.datatype.number.restore();\n      faker.name.lastName.restore();\n    });","file":"company.unit.js","skipped":false,"dir":"test"},{"name":"sometimes returns two last names separated by a hyphen","suites":["company.js","companyName()"],"updatePoint":{"line":22,"column":62},"line":22,"code":"    it(\"sometimes returns two last names separated by a hyphen\", function () {\n      sinon.spy(faker.name, 'lastName');\n      sinon.stub(faker.datatype, 'number').returns(1);\n      var name = faker.company.companyName();\n      var parts = name.split('-');\n      assert.ok(parts.length >= 2);\n      assert.ok(faker.name.lastName.calledTwice);\n      faker.datatype.number.restore();\n      faker.name.lastName.restore();\n    });","file":"company.unit.js","skipped":false,"dir":"test"},{"name":"sometimes returns a last name with a company suffix","suites":["company.js","companyName()"],"updatePoint":{"line":32,"column":59},"line":32,"code":"    it(\"sometimes returns a last name with a company suffix\", function () {\n      sinon.spy(faker.company, 'companySuffix');\n      sinon.spy(faker.name, 'lastName');\n      sinon.stub(faker.datatype, 'number').returns(0);\n      var name = faker.company.companyName();\n      var parts = name.split(' ');\n      assert.ok(parts.length >= 2);\n      assert.ok(faker.name.lastName.calledOnce);\n      assert.ok(faker.company.companySuffix.calledOnce);\n      faker.datatype.number.restore();\n      faker.name.lastName.restore();\n      faker.company.companySuffix.restore();\n    });","file":"company.unit.js","skipped":false,"dir":"test"},{"name":"returns random value from company.suffixes array","suites":["company.js","companySuffix()"],"updatePoint":{"line":47,"column":56},"line":47,"code":"    it(\"returns random value from company.suffixes array\", function () {\n      var suffix = faker.company.companySuffix();\n      assert.ok(faker.company.suffixes().indexOf(suffix) !== -1);\n    });","file":"company.unit.js","skipped":false,"dir":"test"},{"name":"returns phrase comprising of a catch phrase adjective, descriptor, and noun","suites":["company.js","catchPhrase()"],"updatePoint":{"line":53,"column":83},"line":53,"code":"    it(\"returns phrase comprising of a catch phrase adjective, descriptor, and noun\", function () {\n      sinon.spy(faker.random, 'arrayElement');\n      sinon.spy(faker.company, 'catchPhraseAdjective');\n      sinon.spy(faker.company, 'catchPhraseDescriptor');\n      sinon.spy(faker.company, 'catchPhraseNoun');\n      var phrase = faker.company.catchPhrase();\n      assert.ok(phrase.split(' ').length >= 3);\n      assert.ok(faker.random.arrayElement.calledThrice);\n      assert.ok(faker.company.catchPhraseAdjective.calledOnce);\n      assert.ok(faker.company.catchPhraseDescriptor.calledOnce);\n      assert.ok(faker.company.catchPhraseNoun.calledOnce);\n      faker.random.arrayElement.restore();\n      faker.company.catchPhraseAdjective.restore();\n      faker.company.catchPhraseDescriptor.restore();\n      faker.company.catchPhraseNoun.restore();\n    });","file":"company.unit.js","skipped":false,"dir":"test"},{"name":"returns phrase comprising of a BS buzz, adjective, and noun","suites":["company.js","bs()"],"updatePoint":{"line":71,"column":67},"line":71,"code":"    it(\"returns phrase comprising of a BS buzz, adjective, and noun\", function () {\n      sinon.spy(faker.random, 'arrayElement');\n      sinon.spy(faker.company, 'bsBuzz');\n      sinon.spy(faker.company, 'bsAdjective');\n      sinon.spy(faker.company, 'bsNoun');\n      var bs = faker.company.bs();\n      assert.ok(typeof bs === 'string');\n      assert.ok(faker.random.arrayElement.calledThrice);\n      assert.ok(faker.company.bsBuzz.calledOnce);\n      assert.ok(faker.company.bsAdjective.calledOnce);\n      assert.ok(faker.company.bsNoun.calledOnce);\n      faker.random.arrayElement.restore();\n      faker.company.bsBuzz.restore();\n      faker.company.bsAdjective.restore();\n      faker.company.bsNoun.restore();\n    });","file":"company.unit.js","skipped":false,"dir":"test"},{"name":"returns a column name","suites":["database.js","column()"],"updatePoint":{"line":11,"column":29},"line":11,"code":"    it(\"returns a column name\", function () {\n      sinon.stub(faker.database, 'column').returns('title');\n      var column = faker.database.column();\n      var expected = 'title';\n      assert.strictEqual(column, expected, \"The column name should be equals \" + expected + \". Current is \" + column);\n      faker.database.column.restore();\n    });","file":"database.unit.js","skipped":false,"dir":"test"},{"name":"returns a collation","suites":["database.js","collation()"],"updatePoint":{"line":20,"column":27},"line":20,"code":"    it(\"returns a collation\", function () {\n      sinon.stub(faker.database, 'collation').returns('utf8_bin');\n      var collation = faker.database.collation();\n      var expected = 'utf8_bin';\n      assert.strictEqual(collation, expected, \"The collation should be equals \" + expected + \". Current is \" + collation);\n      faker.database.collation.restore();\n    });","file":"database.unit.js","skipped":false,"dir":"test"},{"name":"returns an engine","suites":["database.js","engine()"],"updatePoint":{"line":29,"column":25},"line":29,"code":"    it(\"returns an engine\", function () {\n      sinon.stub(faker.database, 'engine').returns('InnoDB');\n      var engine = faker.database.engine();\n      var expected = 'InnoDB';\n      assert.strictEqual(engine, expected, \"The db engine should be equals \" + expected + \". Current is \" + engine);\n      faker.database.engine.restore();\n    });","file":"database.unit.js","skipped":false,"dir":"test"},{"name":"returns a column type","suites":["database.js","type()"],"updatePoint":{"line":38,"column":29},"line":38,"code":"    it(\"returns a column type\", function () {\n      sinon.stub(faker.database, 'type').returns('int');\n      var type = faker.database.type();\n      var expected = 'int';\n      assert.strictEqual(type, expected, \"The column type should be equals \" + expected + \". Current is \" + type);\n      faker.database.type.restore();\n    });","file":"database.unit.js","skipped":false,"dir":"test"},{"name":"returns a random number given a maximum value as Number","suites":["datatype.js","number"],"updatePoint":{"line":15,"column":63},"line":15,"code":"    it(\"returns a random number given a maximum value as Number\", function () {\n      var max = 10;\n      assert.ok(faker.datatype.number(max) <= max);\n    });","file":"datatype.unit.js","skipped":false,"dir":"test"},{"name":"returns a random number given a maximum value as Object","suites":["datatype.js","number"],"updatePoint":{"line":19,"column":63},"line":19,"code":"    it(\"returns a random number given a maximum value as Object\", function () {\n      var options = {\n        max: 10\n      };\n      assert.ok(faker.datatype.number(options) <= options.max);\n    });","file":"datatype.unit.js","skipped":false,"dir":"test"},{"name":"returns a random number given a maximum value of 0","suites":["datatype.js","number"],"updatePoint":{"line":25,"column":58},"line":25,"code":"    it(\"returns a random number given a maximum value of 0\", function () {\n      var options = {\n        max: 0\n      };\n      assert.ok(faker.datatype.number(options) === 0);\n    });","file":"datatype.unit.js","skipped":false,"dir":"test"},{"name":"returns a random number given a negative number minimum and maximum value of 0","suites":["datatype.js","number"],"updatePoint":{"line":31,"column":86},"line":31,"code":"    it(\"returns a random number given a negative number minimum and maximum value of 0\", function () {\n      var options = {\n        min: -100,\n        max: 0\n      };\n      assert.ok(faker.datatype.number(options) <= options.max);\n    });","file":"datatype.unit.js","skipped":false,"dir":"test"},{"name":"returns a random number between a range","suites":["datatype.js","number"],"updatePoint":{"line":38,"column":47},"line":38,"code":"    it(\"returns a random number between a range\", function () {\n      var options = {\n        min: 22,\n        max: 33\n      };\n\n      for (var i = 0; i < 100; i++) {\n        var randomNumber = faker.datatype.number(options);\n        assert.ok(randomNumber >= options.min);\n        assert.ok(randomNumber <= options.max);\n      }\n    });","file":"datatype.unit.js","skipped":false,"dir":"test"},{"name":"provides numbers with a given precision","suites":["datatype.js","number"],"updatePoint":{"line":50,"column":47},"line":50,"code":"    it(\"provides numbers with a given precision\", function () {\n      var options = {\n        min: 0,\n        max: 1.5,\n        precision: 0.5\n      };\n\n      var results = _.chain(_.range(50)).map(function () {\n        return faker.datatype.number(options);\n      }).uniq().value().sort();\n\n      assert.ok(_.includes(results, 0.5));\n      assert.ok(_.includes(results, 1.0));\n      assert.strictEqual(results[0], 0);\n      assert.strictEqual(_.last(results), 1.5);\n    });","file":"datatype.unit.js","skipped":false,"dir":"test"},{"name":"provides numbers with a with exact precision","suites":["datatype.js","number"],"updatePoint":{"line":66,"column":52},"line":66,"code":"    it(\"provides numbers with a with exact precision\", function () {\n      var options = {\n        min: 0.5,\n        max: 0.99,\n        precision: 0.01\n      };\n\n      for (var i = 0; i < 100; i++) {\n        var number = faker.datatype.number(options);\n        assert.strictEqual(number, Number(number.toFixed(2)));\n      }\n    });","file":"datatype.unit.js","skipped":false,"dir":"test"},{"name":"should not modify the input object","suites":["datatype.js","number"],"updatePoint":{"line":78,"column":42},"line":78,"code":"    it(\"should not modify the input object\", function () {\n      var min = 1;\n      var max = 2;\n      var opts = {\n        min: min,\n        max: max\n      };\n      faker.datatype.number(opts);\n      assert.strictEqual(opts.min, min);\n      assert.strictEqual(opts.max, max);\n    });","file":"datatype.unit.js","skipped":false,"dir":"test"},{"name":"returns a random float with a default precision value (0.01)","suites":["datatype.js","float"],"updatePoint":{"line":91,"column":68},"line":91,"code":"    it(\"returns a random float with a default precision value (0.01)\", function () {\n      var number = faker.datatype.float();\n      assert.strictEqual(number, Number(number.toFixed(2)));\n    });","file":"datatype.unit.js","skipped":false,"dir":"test"},{"name":"returns a random float given a precision value","suites":["datatype.js","float"],"updatePoint":{"line":95,"column":54},"line":95,"code":"    it(\"returns a random float given a precision value\", function () {\n      var number = faker.datatype.float(0.001);\n      assert.strictEqual(number, Number(number.toFixed(3)));\n    });","file":"datatype.unit.js","skipped":false,"dir":"test"},{"name":"returns a random number given a maximum value as Object","suites":["datatype.js","float"],"updatePoint":{"line":99,"column":63},"line":99,"code":"    it(\"returns a random number given a maximum value as Object\", function () {\n      var options = {\n        max: 10\n      };\n      assert.ok(faker.datatype.float(options) <= options.max);\n    });","file":"datatype.unit.js","skipped":false,"dir":"test"},{"name":"returns a random number given a maximum value of 0","suites":["datatype.js","float"],"updatePoint":{"line":105,"column":58},"line":105,"code":"    it(\"returns a random number given a maximum value of 0\", function () {\n      var options = {\n        max: 0\n      };\n      assert.ok(faker.datatype.float(options) === 0);\n    });","file":"datatype.unit.js","skipped":false,"dir":"test"},{"name":"returns a random number given a negative number minimum and maximum value of 0","suites":["datatype.js","float"],"updatePoint":{"line":111,"column":86},"line":111,"code":"    it(\"returns a random number given a negative number minimum and maximum value of 0\", function () {\n      var options = {\n        min: -100,\n        max: 0\n      };\n      assert.ok(faker.datatype.float(options) <= options.max);\n    });","file":"datatype.unit.js","skipped":false,"dir":"test"},{"name":"returns a random number between a range","suites":["datatype.js","float"],"updatePoint":{"line":118,"column":47},"line":118,"code":"    it(\"returns a random number between a range\", function () {\n      var options = {\n        min: 22,\n        max: 33\n      };\n\n      for (var i = 0; i < 5; i++) {\n        var randomNumber = faker.datatype.float(options);\n        assert.ok(randomNumber >= options.min);\n        assert.ok(randomNumber <= options.max);\n      }\n    });","file":"datatype.unit.js","skipped":false,"dir":"test"},{"name":"provides numbers with a given precision","suites":["datatype.js","float"],"updatePoint":{"line":130,"column":47},"line":130,"code":"    it(\"provides numbers with a given precision\", function () {\n      var options = {\n        min: 0,\n        max: 1.5,\n        precision: 0.5\n      };\n\n      var results = _.chain(_.range(50)).map(function () {\n        return faker.datatype.float(options);\n      }).uniq().value().sort();\n\n      assert.ok(_.includes(results, 0.5));\n      assert.ok(_.includes(results, 1.0));\n      assert.strictEqual(results[0], 0);\n      assert.strictEqual(_.last(results), 1.5);\n    });","file":"datatype.unit.js","skipped":false,"dir":"test"},{"name":"provides numbers with a with exact precision","suites":["datatype.js","float"],"updatePoint":{"line":146,"column":52},"line":146,"code":"    it(\"provides numbers with a with exact precision\", function () {\n      var options = {\n        min: 0.5,\n        max: 0.99,\n        precision: 0.01\n      };\n\n      for (var i = 0; i < 100; i++) {\n        var number = faker.datatype.float(options);\n        assert.strictEqual(number, Number(number.toFixed(2)));\n      }\n    });","file":"datatype.unit.js","skipped":false,"dir":"test"},{"name":"should not modify the input object","suites":["datatype.js","float"],"updatePoint":{"line":158,"column":42},"line":158,"code":"    it(\"should not modify the input object\", function () {\n      var min = 1;\n      var max = 2;\n      var opts = {\n        min: min,\n        max: max\n      };\n      faker.datatype.float(opts);\n      assert.strictEqual(opts.min, min);\n      assert.strictEqual(opts.max, max);\n    });","file":"datatype.unit.js","skipped":false,"dir":"test"},{"name":"check validity of date and if returned value is created by Date()","suites":["datatype.js","datetime"],"updatePoint":{"line":171,"column":73},"line":171,"code":"    it('check validity of date and if returned value is created by Date()', function () {\n      var date = faker.datatype.datetime();\n      assert.strictEqual(typeof date, 'object');\n      assert.ok(!isNaN(date.getTime()));\n      assert.strictEqual(Object.prototype.toString.call(date), \"[object Date]\");\n    });","file":"datatype.unit.js","skipped":false,"dir":"test"},{"name":"basic test with stubbed value","suites":["datatype.js","datetime"],"updatePoint":{"line":177,"column":37},"line":177,"code":"    it('basic test with stubbed value', function () {\n      var today = new Date();\n      sinon.stub(faker.datatype, 'number').returns(today);\n      var date = faker.datatype.datetime();\n      assert.strictEqual(today.valueOf(), date.valueOf());\n      faker.datatype.number.restore();\n    }); //generating a datetime with seeding is currently not working","file":"datatype.unit.js","skipped":false,"dir":"test"},{"name":"should generate a string value","suites":["datatype.js","string"],"updatePoint":{"line":186,"column":38},"line":186,"code":"    it('should generate a string value', function () {\n      var generateString = faker.datatype.string();\n      assert.strictEqual(typeof generateString, 'string');\n      assert.strictEqual(generateString.length, 10);\n    });","file":"datatype.unit.js","skipped":false,"dir":"test"},{"name":"should generate a string value, checks seeding","suites":["datatype.js","string"],"updatePoint":{"line":191,"column":54},"line":191,"code":"    it('should generate a string value, checks seeding', function () {\n      faker.seed(100);\n      var generateString = faker.datatype.string();\n      assert.strictEqual(generateString, 'S_:GHQo.!/');\n    });","file":"datatype.unit.js","skipped":false,"dir":"test"},{"name":"returns empty string if negative length is passed","suites":["datatype.js","string"],"updatePoint":{"line":196,"column":57},"line":196,"code":"    it('returns empty string if negative length is passed', function () {\n      var negativeValue = faker.datatype.number({\n        min: -1000,\n        max: -1\n      });\n      var generateString = faker.datatype.string(negativeValue);\n      assert.strictEqual(generateString, '');\n      assert.strictEqual(generateString.length, 0);\n    });","file":"datatype.unit.js","skipped":false,"dir":"test"},{"name":"returns string with length of 2^20 if bigger length value is passed","suites":["datatype.js","string"],"updatePoint":{"line":205,"column":75},"line":205,"code":"    it('returns string with length of 2^20 if bigger length value is passed', function () {\n      var overMaxValue = Math.pow(2, 28);\n      var generateString = faker.datatype.string(overMaxValue);\n      assert.strictEqual(generateString.length, Math.pow(2, 20));\n    });","file":"datatype.unit.js","skipped":false,"dir":"test"},{"name":"generates a boolean value","suites":["datatype.js","boolean"],"updatePoint":{"line":212,"column":33},"line":212,"code":"    it('generates a boolean value', function () {\n      var bool = faker.datatype.boolean();\n      assert.strictEqual(typeof bool, 'boolean');\n    });","file":"datatype.unit.js","skipped":false,"dir":"test"},{"name":"generates a boolean value, checks seeding","suites":["datatype.js","boolean"],"updatePoint":{"line":216,"column":49},"line":216,"code":"    it('generates a boolean value, checks seeding', function () {\n      faker.seed(1);\n      var bool = faker.datatype.boolean();\n      assert.strictEqual(bool, false);\n    });","file":"datatype.unit.js","skipped":false,"dir":"test"},{"name":"generates a valid UUID","suites":["datatype.js","UUID"],"updatePoint":{"line":223,"column":30},"line":223,"code":"    it('generates a valid UUID', function () {\n      var UUID = faker.datatype.uuid();\n      var RFC4122 = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/;\n      assert.ok(RFC4122.test(UUID));\n    });","file":"datatype.unit.js","skipped":false,"dir":"test"},{"name":"generates single hex character when no additional argument was provided","suites":["datatype.js","hexaDecimal"],"updatePoint":{"line":231,"column":79},"line":231,"code":"    it('generates single hex character when no additional argument was provided', function () {\n      var hex = hexaDecimal();\n      assert.ok(hex.match(/^(0x)[0-9a-f]{1}$/i));\n    });","file":"datatype.unit.js","skipped":false,"dir":"test"},{"name":"generates a random hex string","suites":["datatype.js","hexaDecimal"],"updatePoint":{"line":235,"column":37},"line":235,"code":"    it('generates a random hex string', function () {\n      var hex = hexaDecimal(5);\n      assert.ok(hex.match(/^(0x)[0-9a-f]+$/i));\n    });","file":"datatype.unit.js","skipped":false,"dir":"test"},{"name":"generates a valid json object","suites":["datatype.js","json"],"updatePoint":{"line":241,"column":37},"line":241,"code":"    it('generates a valid json object', function () {\n      var jsonObject = faker.datatype.json();\n      assert.strictEqual(typeof jsonObject, 'string');\n      assert.ok(JSON.parse(jsonObject));\n    });","file":"datatype.unit.js","skipped":false,"dir":"test"},{"name":"generates a valid json object, with seeding","suites":["datatype.js","json"],"updatePoint":{"line":246,"column":51},"line":246,"code":"    it('generates a valid json object, with seeding', function () {\n      faker.seed(10);\n      var jsonObject = faker.datatype.json();\n      var parsedObject = JSON.parse(jsonObject);\n      assert.strictEqual(typeof jsonObject, 'string');\n      assert.strictEqual(parsedObject.foo, '<\\\"N[JfnOW5');\n      assert.strictEqual(parsedObject.bar, 19806);\n      assert.strictEqual(parsedObject.bike, 'g909).``yl');\n      assert.strictEqual(parsedObject.a, 33607);\n      assert.strictEqual(parsedObject.b, 'sl3Y#dr<dv');\n      assert.strictEqual(parsedObject.name, 'c-SG.iCW_1');\n      assert.strictEqual(parsedObject.prop, 82608);\n    });","file":"datatype.unit.js","skipped":false,"dir":"test"},{"name":"generates an array","suites":["datatype.js","array"],"updatePoint":{"line":261,"column":26},"line":261,"code":"    it('generates an array', function () {\n      var stubArray = [0, 1, 3, 4, 5, 6, 1, 'a', 'b', 'c'];\n      sinon.stub(faker.datatype, 'array').returns(stubArray);\n      var generatedArray = faker.datatype.array();\n      assert.strictEqual(generatedArray.length, stubArray.length);\n      assert.strictEqual(stubArray, generatedArray);\n      faker.datatype.array.restore();\n    });","file":"datatype.unit.js","skipped":false,"dir":"test"},{"name":"generates an array with passed size","suites":["datatype.js","array"],"updatePoint":{"line":269,"column":43},"line":269,"code":"    it('generates an array with passed size', function () {\n      var randomSize = faker.datatype.number();\n      var generatedArray = faker.datatype.array(randomSize);\n      assert.strictEqual(generatedArray.length, randomSize);\n    });","file":"datatype.unit.js","skipped":false,"dir":"test"},{"name":"generates an array with 1 element, with seeding","suites":["datatype.js","array"],"updatePoint":{"line":274,"column":55},"line":274,"code":"    it('generates an array with 1 element, with seeding', function () {\n      faker.seed(10);\n      var generatedArray = faker.datatype.array(1);\n      assert.strictEqual(generatedArray[0], '<\"N[JfnOW5');\n    });","file":"datatype.unit.js","skipped":false,"dir":"test"},{"name":"should generate a bigInt value","suites":["datatype.js","bigInt"],"updatePoint":{"line":281,"column":38},"line":281,"code":"    it('should generate a bigInt value', function () {\n      var generateBigInt = faker.datatype.bigInt();\n      assert.strictEqual(typeof generateBigInt, 'bigint');\n    });","file":"datatype.unit.js","skipped":false,"dir":"test"},{"name":"Generate and compare two numbers of data type BigInt, with seeding","suites":["datatype.js","bigInt"],"updatePoint":{"line":285,"column":74},"line":285,"code":"    it('Generate and compare two numbers of data type BigInt, with seeding', function () {\n      faker.seed(123);\n      var generateBigInt1 = faker.datatype.bigInt();\n      faker.seed(123);\n      var generateBigInt2 = faker.datatype.bigInt();\n      assert.strictEqual(generateBigInt1, generateBigInt2);\n    });","file":"datatype.unit.js","skipped":false,"dir":"test"},{"name":"summing with the Number datatype should be an error","suites":["datatype.js","bigInt"],"updatePoint":{"line":292,"column":59},"line":292,"code":"    it('summing with the Number datatype should be an error', function (done) {\n      try {\n        faker.datatype.bigInt() + 10;\n      } catch (error) {\n        done();\n      }\n    });","file":"datatype.unit.js","skipped":false,"dir":"test"},{"name":"returns a date N years into the past","suites":["date.js","past()"],"updatePoint":{"line":11,"column":44},"line":11,"code":"    it(\"returns a date N years into the past\", function () {\n      var date = faker.date.past(75);\n      assert.ok(date < new Date());\n    });","file":"date.unit.js","skipped":false,"dir":"test"},{"name":"returns a past date when N = 0","suites":["date.js","past()"],"updatePoint":{"line":15,"column":38},"line":15,"code":"    it(\"returns a past date when N = 0\", function () {\n      var refDate = new Date();\n      var date = faker.date.past(0, refDate.toJSON());\n      assert.ok(date < refDate); // date should be before the date given\n    });","file":"date.unit.js","skipped":false,"dir":"test"},{"name":"returns a date N years before the date given","suites":["date.js","past()"],"updatePoint":{"line":20,"column":52},"line":20,"code":"    it(\"returns a date N years before the date given\", function () {\n      var refDate = new Date(2120, 11, 9, 10, 0, 0, 0); // set the date beyond the usual calculation (to make sure this is working correctly)\n\n      var date = faker.date.past(75, refDate.toJSON());\n      assert.ok(date < refDate && date > new Date()); // date should be before date given but after the current time\n    });","file":"date.unit.js","skipped":false,"dir":"test"},{"name":"returns a date N years into the future","suites":["date.js","future()"],"updatePoint":{"line":28,"column":46},"line":28,"code":"    it(\"returns a date N years into the future\", function () {\n      var date = faker.date.future(75);\n      assert.ok(date > new Date());\n    });","file":"date.unit.js","skipped":false,"dir":"test"},{"name":"returns a future date when N = 0","suites":["date.js","future()"],"updatePoint":{"line":32,"column":40},"line":32,"code":"    it(\"returns a future date when N = 0\", function () {\n      var refDate = new Date();\n      var date = faker.date.future(0, refDate.toJSON());\n      assert.ok(date > refDate); // date should be after the date given\n    });","file":"date.unit.js","skipped":false,"dir":"test"},{"name":"returns a date N years after the date given","suites":["date.js","future()"],"updatePoint":{"line":37,"column":51},"line":37,"code":"    it(\"returns a date N years after the date given\", function () {\n      var refDate = new Date(1880, 11, 9, 10, 0, 0, 0); // set the date beyond the usual calculation (to make sure this is working correctly)\n\n      var date = faker.date.future(75, refDate.toJSON());\n      assert.ok(date > refDate && date < new Date()); // date should be after the date given, but before the current time\n    });","file":"date.unit.js","skipped":false,"dir":"test"},{"name":"returns a date N days from the recent past","suites":["date.js","recent()"],"updatePoint":{"line":45,"column":50},"line":45,"code":"    it(\"returns a date N days from the recent past\", function () {\n      var date = faker.date.recent(30);\n      assert.ok(date <= new Date());\n    });","file":"date.unit.js","skipped":false,"dir":"test"},{"name":"returns a date N days from the recent past, starting from refDate","suites":["date.js","recent()"],"updatePoint":{"line":49,"column":73},"line":49,"code":"    it(\"returns a date N days from the recent past, starting from refDate\", function () {\n      var days = 30;\n      var refDate = new Date(2120, 11, 9, 10, 0, 0, 0); // set the date beyond the usual calculation (to make sure this is working correctly)\n\n      var date = faker.date.recent(days, refDate);\n      var lowerBound = new Date(refDate.getTime() - days * 24 * 60 * 60 * 1000);\n      assert.ok(lowerBound <= date, \"`recent()` date should not be further back than `n` days ago\");\n      assert.ok(date <= refDate, \"`recent()` date should not be ahead of the starting date reference\");\n    });","file":"date.unit.js","skipped":false,"dir":"test"},{"name":"returns a date N days into the future","suites":["date.js","soon()"],"updatePoint":{"line":60,"column":45},"line":60,"code":"    it(\"returns a date N days into the future\", function () {\n      var date = faker.date.soon(30);\n      assert.ok(date >= new Date());\n    });","file":"date.unit.js","skipped":false,"dir":"test"},{"name":"returns a date N days from the recent future, starting from refDate","suites":["date.js","soon()"],"updatePoint":{"line":64,"column":75},"line":64,"code":"    it(\"returns a date N days from the recent future, starting from refDate\", function () {\n      var days = 30;\n      var refDate = new Date(1880, 11, 9, 10, 0, 0, 0); // set the date beyond the usual calculation (to make sure this is working correctly)\n\n      var date = faker.date.soon(days, refDate);\n      var upperBound = new Date(refDate.getTime() + days * 24 * 60 * 60 * 1000);\n      assert.ok(date <= upperBound, \"`soon()` date should not be further ahead than `n` days ago\");\n      assert.ok(refDate <= date, \"`soon()` date should not be behind the starting date reference\");\n    });","file":"date.unit.js","skipped":false,"dir":"test"},{"name":"returns a random date between the dates given","suites":["date.js","between()"],"updatePoint":{"line":75,"column":53},"line":75,"code":"    it(\"returns a random date between the dates given\", function () {\n      var from = new Date(1990, 5, 7, 9, 11, 0, 0);\n      var to = new Date(2000, 6, 8, 10, 12, 0, 0);\n      var date = faker.date.between(from, to);\n      assert.ok(date > from && date < to);\n    });","file":"date.unit.js","skipped":false,"dir":"test"},{"name":"returns an array of 3 dates ( by default ) of sorted randoms dates between the dates given","suites":["date.js","betweens()"],"updatePoint":{"line":83,"column":98},"line":83,"code":"    it(\"returns an array of 3 dates ( by default ) of sorted randoms dates between the dates given\", function () {\n      var from = new Date(1990, 5, 7, 9, 11, 0, 0);\n      var to = new Date(2000, 6, 8, 10, 12, 0, 0);\n      var dates = faker.date.betweens(from, to);\n      assert.ok(dates[0] > from && dates[0] < to);\n      assert.ok(dates[1] > dates[0] && dates[2] > dates[1]);\n    });","file":"date.unit.js","skipped":false,"dir":"test"},{"name":"returns random value from date.month.wide array by default","suites":["date.js","month()"],"updatePoint":{"line":92,"column":66},"line":92,"code":"    it(\"returns random value from date.month.wide array by default\", function () {\n      var month = faker.date.month();\n      assert.ok(faker.definitions.date.month.wide.indexOf(month) !== -1);\n    });","file":"date.unit.js","skipped":false,"dir":"test"},{"name":"returns random value from date.month.wide_context array for context option","suites":["date.js","month()"],"updatePoint":{"line":96,"column":82},"line":96,"code":"    it(\"returns random value from date.month.wide_context array for context option\", function () {\n      var month = faker.date.month({\n        context: true\n      });\n      assert.ok(faker.definitions.date.month.wide_context.indexOf(month) !== -1);\n    });","file":"date.unit.js","skipped":false,"dir":"test"},{"name":"returns random value from date.month.abbr array for abbr option","suites":["date.js","month()"],"updatePoint":{"line":102,"column":71},"line":102,"code":"    it(\"returns random value from date.month.abbr array for abbr option\", function () {\n      var month = faker.date.month({\n        abbr: true\n      });\n      assert.ok(faker.definitions.date.month.abbr.indexOf(month) !== -1);\n    });","file":"date.unit.js","skipped":false,"dir":"test"},{"name":"returns random value from date.month.abbr_context array for abbr and context option","suites":["date.js","month()"],"updatePoint":{"line":108,"column":91},"line":108,"code":"    it(\"returns random value from date.month.abbr_context array for abbr and context option\", function () {\n      var month = faker.date.month({\n        abbr: true,\n        context: true\n      });\n      assert.ok(faker.definitions.date.month.abbr_context.indexOf(month) !== -1);\n    });","file":"date.unit.js","skipped":false,"dir":"test"},{"name":"returns random value from date.month.wide array for context option when date.month.wide_context array is missing","suites":["date.js","month()"],"updatePoint":{"line":115,"column":120},"line":115,"code":"    it(\"returns random value from date.month.wide array for context option when date.month.wide_context array is missing\", function () {\n      var backup_wide_context = faker.definitions.date.month.wide_context;\n      faker.definitions.date.month.wide_context = undefined;\n      var month = faker.date.month({\n        context: true\n      });\n      assert.ok(faker.definitions.date.month.wide.indexOf(month) !== -1);\n      faker.definitions.date.month.wide_context = backup_wide_context;\n    });","file":"date.unit.js","skipped":false,"dir":"test"},{"name":"returns random value from date.month.abbr array for abbr and context option when date.month.abbr_context array is missing","suites":["date.js","month()"],"updatePoint":{"line":124,"column":129},"line":124,"code":"    it(\"returns random value from date.month.abbr array for abbr and context option when date.month.abbr_context array is missing\", function () {\n      var backup_abbr_context = faker.definitions.date.month.abbr_context;\n      faker.definitions.date.month.abbr_context = undefined;\n      var month = faker.date.month({\n        abbr: true,\n        context: true\n      });\n      assert.ok(faker.definitions.date.month.abbr.indexOf(month) !== -1);\n      faker.definitions.date.month.abbr_context = backup_abbr_context;\n    });","file":"date.unit.js","skipped":false,"dir":"test"},{"name":"returns random value from date.weekday.wide array by default","suites":["date.js","weekday()"],"updatePoint":{"line":136,"column":68},"line":136,"code":"    it(\"returns random value from date.weekday.wide array by default\", function () {\n      var weekday = faker.date.weekday();\n      assert.ok(faker.definitions.date.weekday.wide.indexOf(weekday) !== -1);\n    });","file":"date.unit.js","skipped":false,"dir":"test"},{"name":"returns random value from date.weekday.wide_context array for context option","suites":["date.js","weekday()"],"updatePoint":{"line":140,"column":84},"line":140,"code":"    it(\"returns random value from date.weekday.wide_context array for context option\", function () {\n      var weekday = faker.date.weekday({\n        context: true\n      });\n      assert.ok(faker.definitions.date.weekday.wide_context.indexOf(weekday) !== -1);\n    });","file":"date.unit.js","skipped":false,"dir":"test"},{"name":"returns random value from date.weekday.abbr array for abbr option","suites":["date.js","weekday()"],"updatePoint":{"line":146,"column":73},"line":146,"code":"    it(\"returns random value from date.weekday.abbr array for abbr option\", function () {\n      var weekday = faker.date.weekday({\n        abbr: true\n      });\n      assert.ok(faker.definitions.date.weekday.abbr.indexOf(weekday) !== -1);\n    });","file":"date.unit.js","skipped":false,"dir":"test"},{"name":"returns random value from date.weekday.abbr_context array for abbr and context option","suites":["date.js","weekday()"],"updatePoint":{"line":152,"column":93},"line":152,"code":"    it(\"returns random value from date.weekday.abbr_context array for abbr and context option\", function () {\n      var weekday = faker.date.weekday({\n        abbr: true,\n        context: true\n      });\n      assert.ok(faker.definitions.date.weekday.abbr_context.indexOf(weekday) !== -1);\n    });","file":"date.unit.js","skipped":false,"dir":"test"},{"name":"returns random value from date.weekday.wide array for context option when date.weekday.wide_context array is missing","suites":["date.js","weekday()"],"updatePoint":{"line":159,"column":124},"line":159,"code":"    it(\"returns random value from date.weekday.wide array for context option when date.weekday.wide_context array is missing\", function () {\n      var backup_wide_context = faker.definitions.date.weekday.wide_context;\n      faker.definitions.date.weekday.wide_context = undefined;\n      var weekday = faker.date.weekday({\n        context: true\n      });\n      assert.ok(faker.definitions.date.weekday.wide.indexOf(weekday) !== -1);\n      faker.definitions.date.weekday.wide_context = backup_wide_context;\n    });","file":"date.unit.js","skipped":false,"dir":"test"},{"name":"returns random value from date.weekday.abbr array for abbr and context option when date.weekday.abbr_context array is missing","suites":["date.js","weekday()"],"updatePoint":{"line":168,"column":133},"line":168,"code":"    it(\"returns random value from date.weekday.abbr array for abbr and context option when date.weekday.abbr_context array is missing\", function () {\n      var backup_abbr_context = faker.definitions.date.weekday.abbr_context;\n      faker.definitions.date.weekday.abbr_context = undefined;\n      var weekday = faker.date.weekday({\n        abbr: true,\n        context: true\n      });\n      assert.ok(faker.definitions.date.weekday.abbr.indexOf(weekday) !== -1);\n      faker.definitions.date.weekday.abbr_context = backup_abbr_context;\n    });","file":"date.unit.js","skipped":false,"dir":"test"},{"name":"replaces a token with a random value for a method with no parameters","suites":["fake.js","fake()"],"updatePoint":{"line":11,"column":76},"line":11,"code":"    it(\"replaces a token with a random value for a method with no parameters\", function () {\n      var name = faker.fake('{{phone.phoneNumber}}');\n      assert.ok(name.match(/\\d/));\n    });","file":"fake.unit.js","skipped":false,"dir":"test"},{"name":"replaces multiple tokens with random values for methods with no parameters","suites":["fake.js","fake()"],"updatePoint":{"line":15,"column":82},"line":15,"code":"    it(\"replaces multiple tokens with random values for methods with no parameters\", function () {\n      var name = faker.fake('{{helpers.randomize}}{{helpers.randomize}}{{helpers.randomize}}');\n      assert.ok(name.match(/[abc]{3}/));\n    });","file":"fake.unit.js","skipped":false,"dir":"test"},{"name":"replaces a token with a random value for a methods with a simple parameter","suites":["fake.js","fake()"],"updatePoint":{"line":19,"column":82},"line":19,"code":"    it(\"replaces a token with a random value for a methods with a simple parameter\", function () {\n      var arr = [\"one\", \"two\", \"three\"];\n      var random = faker.fake('{{helpers.slugify(\"Will This Work\")}}');\n      assert.ok(random === \"Will-This-Work\");\n    });","file":"fake.unit.js","skipped":false,"dir":"test"},{"name":"replaces a token with a random value for a method with an array parameter","suites":["fake.js","fake()"],"updatePoint":{"line":24,"column":81},"line":24,"code":"    it(\"replaces a token with a random value for a method with an array parameter\", function () {\n      var arr = [\"one\", \"two\", \"three\"];\n      var random = faker.fake('{{helpers.randomize([\"one\", \"two\", \"three\"])}}');\n      assert.ok(arr.indexOf(random) > -1);\n    });","file":"fake.unit.js","skipped":false,"dir":"test"},{"name":"does not allow undefined parameters","suites":["fake.js","fake()"],"updatePoint":{"line":29,"column":43},"line":29,"code":"    it(\"does not allow undefined parameters\", function () {\n      assert.throws(function () {\n        faker.fake();\n      }, Error);\n    });","file":"fake.unit.js","skipped":false,"dir":"test"},{"name":"does not allow invalid module name","suites":["fake.js","fake()"],"updatePoint":{"line":34,"column":42},"line":34,"code":"    it(\"does not allow invalid module name\", function () {\n      assert.throws(function () {\n        faker.fake('{{foo.bar}}');\n      }, Error);\n    });","file":"fake.unit.js","skipped":false,"dir":"test"},{"name":"does not allow invalid method name","suites":["fake.js","fake()"],"updatePoint":{"line":39,"column":42},"line":39,"code":"    it(\"does not allow invalid method name\", function () {\n      assert.throws(function () {\n        faker.fake('{{address.foo}}');\n      }, Error);\n    });","file":"fake.unit.js","skipped":false,"dir":"test"},{"name":"IBAN for Georgia is correct","suites":["finance_iban.js","issue_944 IBAN Georgia"],"updatePoint":{"line":40,"column":35},"line":40,"code":"    it(\"IBAN for Georgia is correct\", function () {\n      faker.seed(17);\n      var iban = getAnIbanByCountry('GE');\n      var ibanFormated = iban.match(/.{1,4}/g).join(\" \");\n      var bban = iban.substring(4) + iban.substring(0, 4);\n      assert.equal(22, iban.length, 'GE IBAN would be 22 chars length, given is ' + iban.length);\n      assert.ok(iban.substring(0, 2).match(/^[A-Z]{2}$/), iban.substring(0, 2) + ' must contains only characters in GE IBAN ' + ibanFormated);\n      assert.ok(iban.substring(2, 4).match(/^\\d{2}$/), iban.substring(2, 4) + ' must contains only digit in GE IBAN ' + ibanFormated);\n      assert.ok(iban.substring(4, 6).match(/^[A-Z]{2}$/), iban.substring(4, 6) + ' must contains only characters in GE IBAN ' + ibanFormated);\n      assert.ok(iban.substring(6, 24).match(/^\\d{16}$/), iban.substring(6, 24) + ' must contains only characters in GE IBAN ' + ibanFormated);\n      assert.equal(ibanLib.mod97(ibanLib.toDigitString(bban)), 1, \"the result should be equal to 1\");\n    });","file":"finance_iban.unit.js","skipped":false,"dir":"test"},{"name":"IBAN for Pakistan is correct","suites":["finance_iban.js","issue_945 IBAN Pakistan"],"updatePoint":{"line":67,"column":36},"line":67,"code":"    it(\"IBAN for Pakistan is correct\", function () {\n      faker.seed(28);\n      var iban = getAnIbanByCountry('PK');\n      var ibanFormated = iban.match(/.{1,4}/g).join(\" \");\n      var bban = iban.substring(4) + iban.substring(0, 4);\n      assert.equal(24, iban.length, 'PK IBAN would be 24 chars length, given is ' + iban.length);\n      assert.ok(iban.substring(0, 2).match(/^[A-Z]{2}$/), iban.substring(0, 2) + ' must contains only characters in PK IBAN ' + ibanFormated);\n      assert.ok(iban.substring(2, 4).match(/^\\d{2}$/), iban.substring(2, 4) + ' must contains only digit in PK IBAN ' + ibanFormated);\n      assert.ok(iban.substring(4, 8).match(/^[A-Z]{4}$/), iban.substring(4, 8) + ' must contains only characters in PK IBAN ' + ibanFormated);\n      assert.ok(iban.substring(8, 24).match(/^\\d{16}$/), iban.substring(8, 24) + ' must contains only digits in PK IBAN ' + ibanFormated);\n      assert.equal(ibanLib.mod97(ibanLib.toDigitString(bban)), 1, \"the result should be equal to 1\");\n    });","file":"finance_iban.unit.js","skipped":false,"dir":"test"},{"name":"IBAN for Turkish is correct","suites":["finance_iban.js","issue_946 IBAN Turkish"],"updatePoint":{"line":100,"column":35},"line":100,"code":"    it(\"IBAN for Turkish is correct\", function () {\n      faker.seed(37);\n      var iban = getAnIbanByCountry('TR');\n      var ibanFormated = iban.match(/.{1,4}/g).join(\" \");\n      var bban = iban.substring(4) + iban.substring(0, 4);\n      assert.equal(26, iban.length, 'PK IBAN would be 26 chars length, given is ' + iban.length);\n      assert.ok(iban.substring(0, 2).match(/^[A-Z]{2}$/), 'Country Code:' + iban.substring(0, 2) + ' must contains only characters in PK IBAN ' + ibanFormated);\n      assert.ok(iban.substring(2, 4).match(/^\\d{2}$/), 'Control key:' + iban.substring(2, 4) + ' must contains only digit in PK IBAN ' + ibanFormated);\n      assert.ok(iban.substring(4, 9).match(/^\\d{5}$/), 'Swift Bank Code:' + iban.substring(4, 9) + ' must contains only digits in PK IBAN ' + ibanFormated);\n      assert.ok(iban.substring(9, 10).match(/^\\d{1}$/), 'National Digit:' + iban.substring(9, 10) + ' must contains only digits in PK IBAN ' + ibanFormated);\n      assert.ok(iban.substring(10, 26).match(/^\\d{16}$/), 'Account Code:' + iban.substring(10, 26) + ' must contains only digits in PK IBAN ' + ibanFormated);\n      assert.ok(iban.substring(2, 26).match(/^\\d{24}$/), 'No character after TR ' + ibanFormated);\n      assert.equal(ibanLib.mod97(ibanLib.toDigitString(bban)), 1, \"the result should be equal to 1\");\n    });","file":"finance_iban.unit.js","skipped":false,"dir":"test"},{"name":"IBAN for Azerbaijan is correct","suites":["finance_iban.js","issue_846 IBAN Azerbaijan"],"updatePoint":{"line":126,"column":38},"line":126,"code":"    it(\"IBAN for Azerbaijan is correct\", function () {\n      faker.seed(21);\n      var iban = getAnIbanByCountry('AZ');\n      var ibanFormated = iban.match(/.{1,4}/g).join(\" \");\n      var bban = iban.substring(4) + iban.substring(0, 4);\n      assert.equal(28, iban.length, 'AZ IBAN would be 28 chars length, given is ' + iban.length);\n      assert.ok(iban.substring(0, 2).match(/^[A-Z]{2}$/), iban.substring(0, 2) + ' must contains only characters in AZ IBAN ' + ibanFormated);\n      assert.ok(iban.substring(2, 4).match(/^\\d{2}$/), iban.substring(2, 4) + ' must contains only digit in AZ IBAN ' + ibanFormated);\n      assert.ok(iban.substring(4, 8).match(/^[A-Z]{4}$/), iban.substring(4, 8) + ' must contains only characters in AZ IBAN ' + ibanFormated);\n      assert.ok(iban.substring(8, 28).match(/^\\d{20}$/), iban.substring(8, 28) + ' must contains 20 characters in AZ IBAN ' + ibanFormated);\n      assert.equal(ibanLib.mod97(ibanLib.toDigitString(bban)), 1, \"the result should be equal to 1\");\n    });","file":"finance_iban.unit.js","skipped":false,"dir":"test"},{"name":"should supply a default length if no length is passed","suites":["finance.js","account( length )"],"updatePoint":{"line":12,"column":61},"line":12,"code":"    it('should supply a default length if no length is passed', function () {\n      var account = faker.finance.account();\n      var expected = 8;\n      var actual = account.length;\n      assert.strictEqual(actual, expected, 'The expected default account length is ' + expected + ' but it was ' + actual);\n    });","file":"finance.unit.js","skipped":false,"dir":"test"},{"name":"should supply a length if a length is passed","suites":["finance.js","account( length )"],"updatePoint":{"line":18,"column":52},"line":18,"code":"    it('should supply a length if a length is passed', function () {\n      var expected = 9;\n      var account = faker.finance.account(expected);\n      var actual = account.length;\n      assert.strictEqual(actual, expected, 'The expected default account length is ' + expected + ' but it was ' + actual);\n    });","file":"finance.unit.js","skipped":false,"dir":"test"},{"name":"should supply a default length if a zero is passed","suites":["finance.js","account( length )"],"updatePoint":{"line":24,"column":58},"line":24,"code":"    it('should supply a default length if a zero is passed', function () {\n      var expected = 8;\n      var account = faker.finance.account(0);\n      var actual = account.length;\n      assert.strictEqual(actual, expected, 'The expected default account length is ' + expected + ' but it was ' + actual);\n    });","file":"finance.unit.js","skipped":false,"dir":"test"},{"name":"should return an account name","suites":["finance.js","accountName()"],"updatePoint":{"line":32,"column":37},"line":32,"code":"    it(\"should return an account name\", function () {\n      var actual = faker.finance.accountName();\n      assert.ok(actual);\n    });","file":"finance.unit.js","skipped":false,"dir":"test"},{"name":"should return a routing number","suites":["finance.js","routingNumber()"],"updatePoint":{"line":38,"column":38},"line":38,"code":"    it(\"should return a routing number\", function () {\n      var actual = faker.finance.routingNumber();\n      assert.ok(actual);\n    });","file":"finance.unit.js","skipped":false,"dir":"test"},{"name":"should set a default length","suites":["finance.js","mask( length, parens, ellipsis )"],"updatePoint":{"line":44,"column":35},"line":44,"code":"    it(\"should set a default length\", function () {\n      var expected = 4; //default account mask length\n\n      var mask = faker.finance.mask(null, false, false);\n      var actual = mask.length;\n      assert.strictEqual(actual, expected, 'The expected default mask length is ' + expected + ' but it was ' + actual);\n    });","file":"finance.unit.js","skipped":false,"dir":"test"},{"name":"should set a specified length","suites":["finance.js","mask( length, parens, ellipsis )"],"updatePoint":{"line":51,"column":37},"line":51,"code":"    it(\"should set a specified length\", function () {\n      var expected = faker.datatype.number(20);\n      expected = expected == 0 || !expected || typeof expected == 'undefined' ? 4 : expected;\n      var mask = faker.finance.mask(expected, false, false);\n      var actual = mask.length; //picks 4 if the random number generator picks 0\n\n      assert.strictEqual(actual, expected, 'The expected default mask length is ' + expected + ' but it was ' + actual);\n    });","file":"finance.unit.js","skipped":false,"dir":"test"},{"name":"should set a default length of 4 for a zero value","suites":["finance.js","mask( length, parens, ellipsis )"],"updatePoint":{"line":59,"column":57},"line":59,"code":"    it(\"should set a default length of 4 for a zero value\", function () {\n      var expected = 4;\n      faker.finance.mask(0, false, false);\n      var actual = 4; //picks 4 if the random number generator picks 0\n\n      assert.strictEqual(actual, expected, 'The expected default mask length is ' + expected + ' but it was ' + actual);\n    });","file":"finance.unit.js","skipped":false,"dir":"test"},{"name":"should by default include parentheses around a partial account number","suites":["finance.js","mask( length, parens, ellipsis )"],"updatePoint":{"line":66,"column":77},"line":66,"code":"    it(\"should by default include parentheses around a partial account number\", function () {\n      var expected = true;\n      var mask = faker.finance.mask(null, null, false);\n      var regexp = new RegExp(/(\\(\\d{4}?\\))/);\n      var actual = regexp.test(mask);\n      assert.strictEqual(actual, expected, 'The expected match for parentheses is ' + expected + ' but it was ' + actual);\n    });","file":"finance.unit.js","skipped":false,"dir":"test"},{"name":"should by default include an ellipsis","suites":["finance.js","mask( length, parens, ellipsis )"],"updatePoint":{"line":73,"column":45},"line":73,"code":"    it(\"should by default include an ellipsis\", function () {\n      var expected = true;\n      var mask = faker.finance.mask(null, false, null);\n      var regexp = new RegExp(/(\\.\\.\\.\\d{4})/);\n      var actual = regexp.test(mask);\n      assert.strictEqual(actual, expected, 'The expected match for parentheses is ' + expected + ' but it was ' + actual);\n    });","file":"finance.unit.js","skipped":false,"dir":"test"},{"name":"should work when random variables are passed into the arguments","suites":["finance.js","mask( length, parens, ellipsis )"],"updatePoint":{"line":80,"column":71},"line":80,"code":"    it(\"should work when random variables are passed into the arguments\", function () {\n      var length = faker.datatype.number(20);\n      var ellipsis = length % 2 === 0 ? true : false;\n      var parens = !ellipsis;\n      var mask = faker.finance.mask(length, ellipsis, parens);\n      assert.ok(mask);\n    });","file":"finance.unit.js","skipped":false,"dir":"test"},{"name":"should use the default amounts when not passing arguments","suites":["finance.js","amount(min, max, dec, symbol)"],"updatePoint":{"line":89,"column":65},"line":89,"code":"    it(\"should use the default amounts when not passing arguments\", function () {\n      var amount = faker.finance.amount();\n      assert.ok(amount);\n      assert.strictEqual(amount > 0, true, \"the amount should be greater than 0\");\n      assert.strictEqual(amount < 1001, true, \"the amount should be greater than 0\");\n    });","file":"finance.unit.js","skipped":false,"dir":"test"},{"name":"should use the default decimal location when not passing arguments","suites":["finance.js","amount(min, max, dec, symbol)"],"updatePoint":{"line":95,"column":74},"line":95,"code":"    it(\"should use the default decimal location when not passing arguments\", function () {\n      var amount = faker.finance.amount();\n      var decimal = '.';\n      var expected = amount.length - 3;\n      var amount = faker.finance.amount(100, 100, 1);\n      assert.ok(amount);\n      assert.strictEqual(amount, '100.0', \"the amount should be equal 100.0\");\n    }); //TODO: add support for more currency and decimal options","file":"finance.unit.js","skipped":false,"dir":"test"},{"name":"should not include a currency symbol by default","suites":["finance.js","amount(min, max, dec, symbol)"],"updatePoint":{"line":104,"column":55},"line":104,"code":"    it(\"should not include a currency symbol by default\", function () {\n      var amount = faker.finance.amount();\n      var regexp = new RegExp(/[0-9.]/);\n      var expected = true;\n      var actual = regexp.test(amount);\n      assert.strictEqual(actual, expected, 'The expected match should not include a currency symbol');\n    });","file":"finance.unit.js","skipped":false,"dir":"test"},{"name":"it should handle negative amounts","suites":["finance.js","amount(min, max, dec, symbol)"],"updatePoint":{"line":111,"column":41},"line":111,"code":"    it(\"it should handle negative amounts\", function () {\n      var amount = faker.finance.amount(-200, -1);\n      assert.ok(amount);\n      assert.strictEqual(amount < 0, true, \"the amount should be greater than 0\");\n      assert.strictEqual(amount > -201, true, \"the amount should be greater than 0\");\n    });","file":"finance.unit.js","skipped":false,"dir":"test"},{"name":"it should handle argument dec","suites":["finance.js","amount(min, max, dec, symbol)"],"updatePoint":{"line":117,"column":37},"line":117,"code":"    it(\"it should handle argument dec\", function () {\n      var amount = faker.finance.amount(100, 100, 1);\n      assert.ok(amount);\n      assert.strictEqual(amount, \"100.0\", \"the amount should be equal 100.0\");\n    });","file":"finance.unit.js","skipped":false,"dir":"test"},{"name":"it should handle argument dec = 0","suites":["finance.js","amount(min, max, dec, symbol)"],"updatePoint":{"line":122,"column":41},"line":122,"code":"    it(\"it should handle argument dec = 0\", function () {\n      var amount = faker.finance.amount(100, 100, 0);\n      assert.ok(amount);\n      assert.strictEqual(amount, '100', \"the amount should be equal 100\");\n    });","file":"finance.unit.js","skipped":false,"dir":"test"},{"name":"it should return a string","suites":["finance.js","amount(min, max, dec, symbol)"],"updatePoint":{"line":127,"column":33},"line":127,"code":"    it(\"it should return a string\", function () {\n      var amount = faker.finance.amount(100, 100, 0);\n      var typeOfAmount = typeof amount;\n      assert.ok(amount);\n      assert.strictEqual(typeOfAmount, \"string\", \"the amount type should be number\");\n    });","file":"finance.unit.js","skipped":false,"dir":"test"},{"name":"should return unformatted if autoformat is ","suites":["finance.js","amount(min, max, dec, symbol)"],"updatePoint":{"line":134,"column":66},"line":134,"code":"      it(`should return unformatted if autoformat is ${autoFormat}`, function () {\n        const number = 6000;\n        const amount = faker.finance.amount(number, number, 0, undefined, autoFormat);\n        assert.strictEqual(amount, number.toString());\n      });","file":"finance.unit.js","skipped":false,"dir":"test"},{"name":"should return the number formatted on the current locale","suites":["finance.js","amount(min, max, dec, symbol)"],"updatePoint":{"line":140,"column":64},"line":140,"code":"    it(\"should return the number formatted on the current locale\", function () {\n      const number = 6000,\n            decimalPlaces = 2;\n      const expected = number.toLocaleString(undefined, {\n        minimumFractionDigits: decimalPlaces\n      });\n      const amount = faker.finance.amount(number, number, decimalPlaces, undefined, true);\n      assert.strictEqual(amount, expected);\n    });","file":"finance.unit.js","skipped":false,"dir":"test"},{"name":"should return a random transaction type","suites":["finance.js","transactionType()"],"updatePoint":{"line":151,"column":47},"line":151,"code":"    it(\"should return a random transaction type\", function () {\n      var transactionType = faker.finance.transactionType();\n      assert.ok(transactionType);\n    });","file":"finance.unit.js","skipped":false,"dir":"test"},{"name":"returns a random currency code with a format","suites":["finance.js","currencyCode()"],"updatePoint":{"line":157,"column":52},"line":157,"code":"    it(\"returns a random currency code with a format\", function () {\n      var currencyCode = faker.finance.currencyCode();\n      assert.ok(currencyCode.match(/^[A-Z]{3}$/));\n    });","file":"finance.unit.js","skipped":false,"dir":"test"},{"name":"returns a random bitcoin address","suites":["finance.js","bitcoinAddress()"],"updatePoint":{"line":163,"column":40},"line":163,"code":"    it(\"returns a random bitcoin address\", function () {\n      var bitcoinAddress = faker.finance.bitcoinAddress();\n      /**\n       *  Note: Although the total length of a Bitcoin address can be 25-33 characters, regex quantifiers only check the preceding token\n       *  Therefore we take one from the total length of the address not including the first character ([13])\n       */\n\n      assert.ok(bitcoinAddress.match(/^[13][a-km-zA-HJ-NP-Z1-9]{24,33}$/));\n    });","file":"finance.unit.js","skipped":false,"dir":"test"},{"name":"returns a random litecoin address","suites":["finance.js","litecoinAddress()"],"updatePoint":{"line":174,"column":41},"line":174,"code":"    it(\"returns a random litecoin address\", function () {\n      var litecoinAddress = faker.finance.litecoinAddress();\n      assert.ok(litecoinAddress.match(/^[LM3][1-9a-km-zA-HJ-NP-Z]{25,32}$/));\n    });","file":"finance.unit.js","skipped":false,"dir":"test"},{"name":"returns a random ethereum address","suites":["finance.js","ethereumAddress()"],"updatePoint":{"line":180,"column":41},"line":180,"code":"    it(\"returns a random ethereum address\", function () {\n      var ethereumAddress = faker.finance.ethereumAddress();\n      assert.ok(ethereumAddress.match(/^(0x)[0-9a-f]{40}$/));\n    });","file":"finance.unit.js","skipped":false,"dir":"test"},{"name":"returns a random credit card number","suites":["finance.js","creditCardNumber()"],"updatePoint":{"line":188,"column":43},"line":188,"code":"    it(\"returns a random credit card number\", function () {\n      var number = faker.finance.creditCardNumber();\n      number = number.replace(/\\D/g, \"\"); // remove formating\n\n      console.log(\"version:\", process.version, number, number.length);\n      assert.ok(number.length >= 13 && number.length <= 20);\n      assert.ok(number.match(/^[0-9]{13,20}$/));\n      assert.ok(luhnFormula(number));\n    });","file":"finance.unit.js","skipped":false,"dir":"test"},{"name":"returns a valid credit card number","suites":["finance.js","creditCardNumber()"],"updatePoint":{"line":197,"column":42},"line":197,"code":"    it(\"returns a valid credit card number\", function () {\n      assert.ok(luhnFormula(faker.finance.creditCardNumber(\"\")));\n      assert.ok(luhnFormula(faker.finance.creditCardNumber()));\n      assert.ok(luhnFormula(faker.finance.creditCardNumber()));\n      assert.ok(luhnFormula(faker.finance.creditCardNumber(\"visa\")));\n      assert.ok(luhnFormula(faker.finance.creditCardNumber(\"mastercard\")));\n      assert.ok(luhnFormula(faker.finance.creditCardNumber(\"discover\")));\n      assert.ok(luhnFormula(faker.finance.creditCardNumber()));\n      assert.ok(luhnFormula(faker.finance.creditCardNumber()));\n    });","file":"finance.unit.js","skipped":false,"dir":"test"},{"name":"returns a correct credit card number when issuer provided","suites":["finance.js","creditCardNumber()"],"updatePoint":{"line":207,"column":65},"line":207,"code":"    it(\"returns a correct credit card number when issuer provided\", function () {\n      //TODO: implement checks for each format with regexp\n      var visa = faker.finance.creditCardNumber(\"visa\");\n      assert.ok(visa.match(/^4(([0-9]){12}|([0-9]){3}(\\-([0-9]){4}){3})$/));\n      assert.ok(luhnFormula(visa));\n      var mastercard = faker.finance.creditCardNumber(\"mastercard\");\n      assert.ok(mastercard.match(/^(5[1-5]\\d{2}|6771)(\\-\\d{4}){3}$/));\n      assert.ok(luhnFormula(mastercard));\n      var discover = faker.finance.creditCardNumber(\"discover\");\n      assert.ok(luhnFormula(discover));\n      var american_express = faker.finance.creditCardNumber(\"american_express\");\n      assert.ok(luhnFormula(american_express));\n      var diners_club = faker.finance.creditCardNumber(\"diners_club\");\n      assert.ok(luhnFormula(diners_club));\n      var jcb = faker.finance.creditCardNumber(\"jcb\");\n      assert.ok(luhnFormula(jcb));\n      var switchC = faker.finance.creditCardNumber(\"mastercard\");\n      assert.ok(luhnFormula(switchC));\n      var solo = faker.finance.creditCardNumber(\"solo\");\n      assert.ok(luhnFormula(solo));\n      var maestro = faker.finance.creditCardNumber(\"maestro\");\n      assert.ok(luhnFormula(maestro));\n      var laser = faker.finance.creditCardNumber(\"laser\");\n      assert.ok(luhnFormula(laser));\n      var instapayment = faker.finance.creditCardNumber(\"instapayment\");\n      assert.ok(luhnFormula(instapayment));\n    });","file":"finance.unit.js","skipped":false,"dir":"test"},{"name":"returns custom formated strings","suites":["finance.js","creditCardNumber()"],"updatePoint":{"line":234,"column":39},"line":234,"code":"    it(\"returns custom formated strings\", function () {\n      var number = faker.finance.creditCardNumber(\"###-###-##L\");\n      assert.ok(number.match(/^\\d{3}\\-\\d{3}\\-\\d{3}$/));\n      assert.ok(luhnFormula(number));\n      number = faker.finance.creditCardNumber(\"234[5-9]#{999}L\");\n      assert.ok(number.match(/^234[5-9]\\d{1000}$/));\n      assert.ok(luhnFormula(number));\n    });","file":"finance.unit.js","skipped":false,"dir":"test"},{"name":"returns a random credit card CVV","suites":["finance.js","creditCardCVV()"],"updatePoint":{"line":244,"column":40},"line":244,"code":"    it(\"returns a random credit card CVV\", function () {\n      var cvv = faker.finance.creditCardCVV();\n      assert.ok(cvv.length === 3);\n      assert.ok(cvv.match(/^[0-9]{3}$/));\n    });","file":"finance.unit.js","skipped":false,"dir":"test"},{"name":"returns a random yet formally correct IBAN number","suites":["finance.js","iban()"],"updatePoint":{"line":253,"column":57},"line":253,"code":"    it(\"returns a random yet formally correct IBAN number\", function () {\n      var iban = faker.finance.iban();\n      var bban = iban.substring(4) + iban.substring(0, 4);\n      assert.strictEqual(ibanLib.mod97(ibanLib.toDigitString(bban)), 1, \"the result should be equal to 1\");\n    });","file":"finance.unit.js","skipped":false,"dir":"test"},{"name":"returns a specific and formally correct IBAN number","suites":["finance.js","iban()"],"updatePoint":{"line":258,"column":59},"line":258,"code":"    it(\"returns a specific and formally correct IBAN number\", function () {\n      var iban = faker.finance.iban(false, \"DE\");\n      var bban = iban.substring(4) + iban.substring(0, 4);\n      var countryCode = iban.substring(0, 2);\n      assert.equal(countryCode, \"DE\");\n      assert.equal(ibanLib.mod97(ibanLib.toDigitString(bban)), 1, \"the result should be equal to 1\");\n    });","file":"finance.unit.js","skipped":false,"dir":"test"},{"name":"throws an error if the passed country code is not supported","suites":["finance.js","iban()"],"updatePoint":{"line":265,"column":67},"line":265,"code":"    it(\"throws an error if the passed country code is not supported\", function () {\n      assert.throws(function () {\n        faker.finance.iban(false, 'AA');\n      }, /Country code AA not supported/);\n    });","file":"finance.unit.js","skipped":false,"dir":"test"},{"name":"returns a random yet formally correct BIC number","suites":["finance.js","bic()"],"updatePoint":{"line":274,"column":56},"line":274,"code":"    it(\"returns a random yet formally correct BIC number\", function () {\n      var bic = faker.finance.bic();\n      var expr = new RegExp(\"^[A-Z]{4}(\" + ibanLib.iso3166.join(\"|\") + \")[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3})?$\", \"i\");\n      assert.ok(bic.match(expr));\n    });","file":"finance.unit.js","skipped":false,"dir":"test"},{"name":"returns a random transaction description","suites":["finance.js","transactionDescription()"],"updatePoint":{"line":287,"column":48},"line":287,"code":"    it(\"returns a random transaction description\", function () {\n      var transactionDescription = faker.finance.transactionDescription();\n      assert.ok(transactionDescription);\n      assert.ok(faker.helpers.createTransaction.calledOnce);\n    });","file":"finance.unit.js","skipped":false,"dir":"test"},{"name":"returns a branch with hacker noun and verb","suites":["git.js","branch()"],"updatePoint":{"line":19,"column":50},"line":19,"code":"    it(\"returns a branch with hacker noun and verb\", function () {\n      faker.git.branch();\n      assert.ok(faker.hacker.noun.calledOnce);\n      assert.ok(faker.hacker.verb.calledOnce);\n    });","file":"git.unit.js","skipped":false,"dir":"test"},{"name":"returns merge entry at random","suites":["git.js","commitEntry()"],"updatePoint":{"line":42,"column":37},"line":42,"code":"    it(\"returns merge entry at random\", function () {\n      faker.git.commitEntry();\n      assert.ok(faker.datatype.number.called);\n    });","file":"git.unit.js","skipped":false,"dir":"test"},{"name":"returns a commit entry with git commit message and sha","suites":["git.js","commitEntry()"],"updatePoint":{"line":46,"column":62},"line":46,"code":"    it(\"returns a commit entry with git commit message and sha\", function () {\n      faker.git.commitEntry();\n      assert.ok(faker.git.commitMessage.calledOnce);\n      assert.ok(faker.git.commitSha.calledOnce);\n    });","file":"git.unit.js","skipped":false,"dir":"test"},{"name":"returns a commit entry with internet email","suites":["git.js","commitEntry()"],"updatePoint":{"line":51,"column":50},"line":51,"code":"    it(\"returns a commit entry with internet email\", function () {\n      faker.git.commitEntry();\n      assert.ok(faker.internet.email.calledOnce);\n    });","file":"git.unit.js","skipped":false,"dir":"test"},{"name":"returns a commit entry with name first and last","suites":["git.js","commitEntry()"],"updatePoint":{"line":55,"column":55},"line":55,"code":"    it(\"returns a commit entry with name first and last\", function () {\n      faker.git.commitEntry();\n      assert.ok(faker.name.firstName.calledTwice);\n      assert.ok(faker.name.lastName.calledTwice);\n    });","file":"git.unit.js","skipped":false,"dir":"test"},{"name":"returns a commit entry with merge details","suites":["git.js","commitEntry()","with options['merge'] equal to true"],"updatePoint":{"line":67,"column":51},"line":67,"code":"      it(\"returns a commit entry with merge details\", function () {\n        faker.git.commitEntry({\n          merge: true\n        });\n        assert.ok(faker.git.shortSha.calledTwice);\n      });","file":"git.unit.js","skipped":false,"dir":"test"},{"name":"returns a commit message with hacker noun, adj and verb","suites":["git.js","commitMessage()"],"updatePoint":{"line":86,"column":63},"line":86,"code":"    it(\"returns a commit message with hacker noun, adj and verb\", function () {\n      faker.git.commitMessage();\n      assert.ok(faker.hacker.verb.calledOnce);\n      assert.ok(faker.hacker.adjective.calledOnce);\n      assert.ok(faker.hacker.noun.calledOnce);\n    });","file":"git.unit.js","skipped":false,"dir":"test"},{"name":"returns a random commit SHA","suites":["git.js","commitSha()"],"updatePoint":{"line":94,"column":35},"line":94,"code":"    it(\"returns a random commit SHA\", function () {\n      var commitSha = faker.git.commitSha();\n      assert.ok(commitSha.match(/^[a-f0-9]{40}$/));\n    });","file":"git.unit.js","skipped":false,"dir":"test"},{"name":"returns a random short SHA","suites":["git.js","shortSha()"],"updatePoint":{"line":100,"column":34},"line":100,"code":"    it(\"returns a random short SHA\", function () {\n      var shortSha = faker.git.shortSha();\n      assert.ok(shortSha.match(/^[a-f0-9]{7}$/));\n    });","file":"git.unit.js","skipped":false,"dir":"test"},{"name":"uses '#' by default","suites":["helpers.js","replaceSymbolWithNumber()","when no symbol passed in"],"updatePoint":{"line":12,"column":29},"line":12,"code":"      it(\"uses '#' by default\", function () {\n        var num = faker.helpers.replaceSymbolWithNumber('#AB');\n        assert.ok(num.match(/\\dAB/));\n      });","file":"helpers.unit.js","skipped":false,"dir":"test"},{"name":"replaces that symbol with integers","suites":["helpers.js","replaceSymbolWithNumber()","when symbol passed in"],"updatePoint":{"line":18,"column":44},"line":18,"code":"      it(\"replaces that symbol with integers\", function () {\n        var num = faker.helpers.replaceSymbolWithNumber('#AB', 'A');\n        assert.ok(num.match(/#\\dB/));\n      });","file":"helpers.unit.js","skipped":false,"dir":"test"},{"name":"replaces it with alphanumeric","suites":["helpers.js","replaceSymbols()","when '*' passed"],"updatePoint":{"line":26,"column":39},"line":26,"code":"      it(\"replaces it with alphanumeric\", function () {\n        var num = faker.helpers.replaceSymbols('*AB');\n        assert.ok(num.match(/\\wAB/));\n      });","file":"helpers.unit.js","skipped":false,"dir":"test"},{"name":"the output is the same length as the input","suites":["helpers.js","shuffle()"],"updatePoint":{"line":33,"column":50},"line":33,"code":"    it(\"the output is the same length as the input\", function () {\n      sinon.spy(faker.datatype, 'number');\n      var shuffled = faker.helpers.shuffle([\"a\", \"b\"]);\n      assert.ok(shuffled.length === 2);\n      assert.ok(faker.datatype.number.calledWith(1));\n      faker.datatype.number.restore();\n    });","file":"helpers.unit.js","skipped":false,"dir":"test"},{"name":"empty array returns empty array","suites":["helpers.js","shuffle()"],"updatePoint":{"line":40,"column":39},"line":40,"code":"    it(\"empty array returns empty array\", function () {\n      var shuffled = faker.helpers.shuffle([]);\n      assert.ok(shuffled.length === 0);\n    });","file":"helpers.unit.js","skipped":false,"dir":"test"},{"name":"mutates the input array in place","suites":["helpers.js","shuffle()"],"updatePoint":{"line":44,"column":40},"line":44,"code":"    it(\"mutates the input array in place\", function () {\n      var input = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"];\n      var shuffled = faker.helpers.shuffle(input);\n      assert.deepStrictEqual(shuffled, input);\n    });","file":"helpers.unit.js","skipped":false,"dir":"test"},{"name":"all items shuffled as expected when seeded","suites":["helpers.js","shuffle()"],"updatePoint":{"line":49,"column":50},"line":49,"code":"    it(\"all items shuffled as expected when seeded\", function () {\n      var input = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"];\n      faker.seed(100);\n      var shuffled = faker.helpers.shuffle(input);\n      assert.deepStrictEqual(shuffled, [\"b\", \"e\", \"a\", \"d\", \"j\", \"i\", \"h\", \"c\", \"g\", \"f\"]);\n    });","file":"helpers.unit.js","skipped":false,"dir":"test"},{"name":"custom array returns unique array","suites":["helpers.js","uniqueArray()"],"updatePoint":{"line":57,"column":41},"line":57,"code":"    it(\"custom array returns unique array\", function () {\n      var input = [\"a\", \"a\", \"a\", \"a,\", \"a\", \"a\", \"a\", \"a\", \"b\"];\n      var length = 2;\n      var unique = faker.helpers.uniqueArray(input, length);\n      assert.strictEqual(unique.length, length);\n      assert.strictEqual(new Set(unique).size, length);\n    });","file":"helpers.unit.js","skipped":false,"dir":"test"},{"name":"definition array returns unique array","suites":["helpers.js","uniqueArray()"],"updatePoint":{"line":64,"column":45},"line":64,"code":"    it(\"definition array returns unique array\", function () {\n      var length = faker.datatype.number({\n        min: 1,\n        max: 6\n      });\n      var unique = faker.helpers.uniqueArray(faker.definitions.hacker.noun, length);\n      assert.strictEqual(unique.length, length);\n      assert.strictEqual(new Set(unique).size, length);\n    });","file":"helpers.unit.js","skipped":false,"dir":"test"},{"name":"function returns unique array","suites":["helpers.js","uniqueArray()"],"updatePoint":{"line":73,"column":37},"line":73,"code":"    it(\"function returns unique array\", function () {\n      var length = faker.datatype.number({\n        min: 1,\n        max: 6\n      });\n      var unique = faker.helpers.uniqueArray(faker.lorem.word, length);\n      assert.strictEqual(unique.length, length);\n      assert.strictEqual(new Set(unique).size, length);\n    });","file":"helpers.unit.js","skipped":false,"dir":"test"},{"name":"empty array returns empty array","suites":["helpers.js","uniqueArray()"],"updatePoint":{"line":82,"column":39},"line":82,"code":"    it(\"empty array returns empty array\", function () {\n      var input = [];\n      var length = faker.datatype.number({\n        min: 1,\n        max: 6\n      });\n      var unique = faker.helpers.uniqueArray(input, length);\n      assert.strictEqual(unique.length, input.length);\n      assert.strictEqual(new Set(unique).size, input.length);\n    });","file":"helpers.unit.js","skipped":false,"dir":"test"},{"name":"length longer than source returns max length","suites":["helpers.js","uniqueArray()"],"updatePoint":{"line":92,"column":52},"line":92,"code":"    it(\"length longer than source returns max length\", function () {\n      var input = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"];\n      var length = input.length + 1;\n      var unique = faker.helpers.uniqueArray(input, length);\n      assert.strictEqual(unique.length, input.length);\n      assert.strictEqual(new Set(unique).size, input.length);\n    });","file":"helpers.unit.js","skipped":false,"dir":"test"},{"name":"works as expected when seeded","suites":["helpers.js","uniqueArray()"],"updatePoint":{"line":99,"column":37},"line":99,"code":"    it(\"works as expected when seeded\", function () {\n      var input = [\"a\", \"a\", \"a\", \"a\", \"a\", \"f\", \"g\", \"h\", \"i\", \"j\"];\n      var length = 5;\n      faker.seed(100);\n      var unique = faker.helpers.uniqueArray(input, length);\n      assert.deepStrictEqual(unique, [\"g\", \"a\", \"i\", \"f\", \"j\"]);\n    });","file":"helpers.unit.js","skipped":false,"dir":"test"},{"name":"removes unwanted characters from URI string","suites":["helpers.js","slugify()"],"updatePoint":{"line":108,"column":51},"line":108,"code":"    it(\"removes unwanted characters from URI string\", function () {\n      assert.strictEqual(faker.helpers.slugify(\"Aiden.Harªann\"), \"Aiden.Harann\");\n      assert.strictEqual(faker.helpers.slugify(\"d'angelo.net\"), \"dangelo.net\");\n    });","file":"helpers.unit.js","skipped":false,"dir":"test"},{"name":"returns empty string with no arguments","suites":["helpers.js","mustache()"],"updatePoint":{"line":114,"column":46},"line":114,"code":"    it(\"returns empty string with no arguments\", function () {\n      assert.strictEqual(faker.helpers.mustache(), \"\");\n    });","file":"helpers.unit.js","skipped":false,"dir":"test"},{"name":"returns empty string with no arguments","suites":["helpers.js","repeatString()"],"updatePoint":{"line":119,"column":46},"line":119,"code":"    it(\"returns empty string with no arguments\", function () {\n      assert.strictEqual(faker.helpers.repeatString(), \"\");\n    });","file":"helpers.unit.js","skipped":false,"dir":"test"},{"name":"returns empty string with no arguments","suites":["helpers.js","replaceSymbols()"],"updatePoint":{"line":124,"column":46},"line":124,"code":"    it(\"returns empty string with no arguments\", function () {\n      assert.strictEqual(faker.helpers.replaceSymbols(), \"\");\n    });","file":"helpers.unit.js","skipped":false,"dir":"test"},{"name":"returns an object","suites":["helpers.js","createCard()"],"updatePoint":{"line":137,"column":25},"line":137,"code":"    it(\"returns an object\", function () {\n      var card = faker.helpers.createCard();\n      assert.ok(typeof card === 'object');\n    });","file":"helpers.unit.js","skipped":false,"dir":"test"},{"name":"returns an object","suites":["helpers.js","contextualCard()"],"updatePoint":{"line":143,"column":25},"line":143,"code":"    it(\"returns an object\", function () {\n      var card = faker.helpers.contextualCard();\n      assert.ok(typeof card === 'object');\n    });","file":"helpers.unit.js","skipped":false,"dir":"test"},{"name":"returns an object","suites":["helpers.js","userCard()"],"updatePoint":{"line":149,"column":25},"line":149,"code":"    it(\"returns an object\", function () {\n      var card = faker.helpers.userCard();\n      assert.ok(typeof card === 'object');\n    });","file":"helpers.unit.js","skipped":false,"dir":"test"},{"name":"returns a random element from an array","suites":["helpers.js","randomize()"],"updatePoint":{"line":156,"column":46},"line":156,"code":"    it(\"returns a random element from an array\", function () {\n      var arr = ['a', 'b', 'c'];\n      var elem = faker.helpers.randomize(arr);\n      assert.ok(elem);\n      assert.ok(arr.indexOf(elem) !== -1);\n    });","file":"helpers.unit.js","skipped":false,"dir":"test"},{"name":"returns a credit card number given a schema","suites":["helpers.js","replaceCreditCardSymbols()"],"updatePoint":{"line":166,"column":51},"line":166,"code":"    it(\"returns a credit card number given a schema\", function () {\n      var number = faker.helpers.replaceCreditCardSymbols(\"6453-####-####-####-###L\");\n      assert.ok(number.match(/^6453\\-([0-9]){4}\\-([0-9]){4}\\-([0-9]){4}\\-([0-9]){4}$/));\n      assert.ok(luhnCheck(number));\n    });","file":"helpers.unit.js","skipped":false,"dir":"test"},{"name":"supports different symbols","suites":["helpers.js","replaceCreditCardSymbols()"],"updatePoint":{"line":171,"column":34},"line":171,"code":"    it(\"supports different symbols\", function () {\n      var number = faker.helpers.replaceCreditCardSymbols(\"6453-****-****-****-***L\", \"*\");\n      assert.ok(number.match(/^6453\\-([0-9]){4}\\-([0-9]){4}\\-([0-9]){4}\\-([0-9]){4}$/));\n      assert.ok(luhnCheck(number));\n    });","file":"helpers.unit.js","skipped":false,"dir":"test"},{"name":"handles regexp style input","suites":["helpers.js","replaceCreditCardSymbols()"],"updatePoint":{"line":176,"column":34},"line":176,"code":"    it(\"handles regexp style input\", function () {\n      var number = faker.helpers.replaceCreditCardSymbols(\"6453-*{4}-*{4}-*{4}-*{3}L\", \"*\");\n      assert.ok(number.match(/^6453\\-([0-9]){4}\\-([0-9]){4}\\-([0-9]){4}\\-([0-9]){4}$/));\n      assert.ok(luhnCheck(number));\n      number = faker.helpers.replaceCreditCardSymbols(\"645[5-9]-#{4,6}-#{1,2}-#{4,6}-#{3}L\");\n      assert.ok(number.match(/^645[5-9]\\-([0-9]){4,6}\\-([0-9]){1,2}\\-([0-9]){4,6}\\-([0-9]){4}$/));\n      assert.ok(luhnCheck(number));\n    });","file":"helpers.unit.js","skipped":false,"dir":"test"},{"name":"returns an empty string when called without param","suites":["helpers.js","regexpStyleStringParse()"],"updatePoint":{"line":186,"column":57},"line":186,"code":"    it(\"returns an empty string when called without param\", function () {\n      assert.ok(faker.helpers.regexpStyleStringParse() === \"\");\n    });","file":"helpers.unit.js","skipped":false,"dir":"test"},{"name":"deals with range repeat","suites":["helpers.js","regexpStyleStringParse()"],"updatePoint":{"line":189,"column":31},"line":189,"code":"    it(\"deals with range repeat\", function () {\n      var string = faker.helpers.regexpStyleStringParse(\"#{5,10}\");\n      assert.ok(string.length <= 10 && string.length >= 5);\n      assert.ok(string.match(/^\\#{5,10}$/));\n    });","file":"helpers.unit.js","skipped":false,"dir":"test"},{"name":"flips the range when min > max","suites":["helpers.js","regexpStyleStringParse()"],"updatePoint":{"line":194,"column":38},"line":194,"code":"    it(\"flips the range when min > max\", function () {\n      var string = faker.helpers.regexpStyleStringParse(\"#{10,5}\");\n      assert.ok(string.length <= 10 && string.length >= 5);\n      assert.ok(string.match(/^\\#{5,10}$/));\n    });","file":"helpers.unit.js","skipped":false,"dir":"test"},{"name":"repeats string {n} number of times","suites":["helpers.js","regexpStyleStringParse()"],"updatePoint":{"line":199,"column":42},"line":199,"code":"    it(\"repeats string {n} number of times\", function () {\n      assert.ok(faker.helpers.regexpStyleStringParse(\"%{10}\") === faker.helpers.repeatString(\"%\", 10));\n      assert.ok(faker.helpers.regexpStyleStringParse(\"%{30}\") === faker.helpers.repeatString(\"%\", 30));\n      assert.ok(faker.helpers.regexpStyleStringParse(\"%{5}\") === faker.helpers.repeatString(\"%\", 5));\n    });","file":"helpers.unit.js","skipped":false,"dir":"test"},{"name":"creates a numerical range","suites":["helpers.js","regexpStyleStringParse()"],"updatePoint":{"line":204,"column":33},"line":204,"code":"    it(\"creates a numerical range\", function () {\n      var string = faker.helpers.regexpStyleStringParse(\"Hello[0-9]\");\n      assert.ok(string.match(/^Hello[0-9]$/));\n    });","file":"helpers.unit.js","skipped":false,"dir":"test"},{"name":"deals with multiple tokens in one string","suites":["helpers.js","regexpStyleStringParse()"],"updatePoint":{"line":208,"column":48},"line":208,"code":"    it(\"deals with multiple tokens in one string\", function () {\n      var string = faker.helpers.regexpStyleStringParse(\"Test#{5}%{2,5}Testing**[1-5]**{10}END\");\n      assert.ok(string.match(/^Test\\#{5}%{2,5}Testing\\*\\*[1-5]\\*\\*{10}END$/));\n    });","file":"helpers.unit.js","skipped":false,"dir":"test"},{"name":"should create a random transaction","suites":["helpers.js","createTransaction()"],"updatePoint":{"line":214,"column":42},"line":214,"code":"    it(\"should create a random transaction\", function () {\n      var transaction = faker.helpers.createTransaction();\n      assert.ok(transaction);\n      assert.ok(transaction.amount);\n      assert.ok(transaction.date);\n      assert.ok(transaction.business);\n      assert.ok(transaction.name);\n      assert.ok(transaction.type);\n      assert.ok(transaction.account);\n    });","file":"helpers.unit.js","skipped":false,"dir":"test"},{"name":"returns a random image url from lorempixel","suites":["image.js","lorempicsum","imageUrl()"],"updatePoint":{"line":12,"column":52},"line":12,"code":"      it(\"returns a random image url from lorempixel\", function () {\n        var imageUrl = faker.image.lorempicsum.imageUrl();\n        assert.strictEqual(imageUrl, 'https://picsum.photos/640/480');\n      });","file":"image.unit.js","skipped":false,"dir":"test"},{"name":"returns a random image url from lorem picsum with width and height","suites":["image.js","lorempicsum","imageUrl()"],"updatePoint":{"line":16,"column":76},"line":16,"code":"      it(\"returns a random image url from lorem picsum with width and height\", function () {\n        var imageUrl = faker.image.lorempicsum.imageUrl(100, 100);\n        assert.strictEqual(imageUrl, 'https://picsum.photos/100/100');\n      });","file":"image.unit.js","skipped":false,"dir":"test"},{"name":"returns a random image url grayscaled","suites":["image.js","lorempicsum","imageUrl()"],"updatePoint":{"line":20,"column":47},"line":20,"code":"      it(\"returns a random image url grayscaled\", function () {\n        var imageUrl = faker.image.lorempicsum.imageUrl(100, 100, true);\n        assert.strictEqual(imageUrl, 'https://picsum.photos/100/100?grayscale');\n      });","file":"image.unit.js","skipped":false,"dir":"test"},{"name":"returns a random image url grayscaled and blurred","suites":["image.js","lorempicsum","imageUrl()"],"updatePoint":{"line":24,"column":59},"line":24,"code":"      it(\"returns a random image url grayscaled and blurred\", function () {\n        var imageUrl = faker.image.lorempicsum.imageUrl(100, 100, true, 2);\n        assert.strictEqual(imageUrl, 'https://picsum.photos/100/100?grayscale&blur=2');\n      });","file":"image.unit.js","skipped":false,"dir":"test"},{"name":"returns a random image url blurred","suites":["image.js","lorempicsum","imageUrl()"],"updatePoint":{"line":28,"column":44},"line":28,"code":"      it(\"returns a random image url blurred\", function () {\n        var imageUrl = faker.image.lorempicsum.imageUrl(100, 100, undefined, 2);\n        assert.strictEqual(imageUrl, 'https://picsum.photos/100/100?blur=2');\n      });","file":"image.unit.js","skipped":false,"dir":"test"},{"name":"returns a random image url with seed","suites":["image.js","lorempicsum","imageUrl()"],"updatePoint":{"line":32,"column":46},"line":32,"code":"      it(\"returns a random image url with seed\", function () {\n        var imageUrl = faker.image.lorempicsum.imageUrl(100, 100, undefined, undefined, 'picsum');\n        assert.strictEqual(imageUrl, 'https://picsum.photos/seed/picsum/100/100');\n      });","file":"image.unit.js","skipped":false,"dir":"test"},{"name":"return a random avatar from FakerCloud","suites":["image.js","lorempicsum","avatar()"],"updatePoint":{"line":38,"column":48},"line":38,"code":"      it(\"return a random avatar from FakerCloud\", function () {\n        assert.notStrictEqual(-1, faker.image.lorempicsum.avatar().indexOf('cdn.fakercloud.com/avatars'));\n      });","file":"image.unit.js","skipped":false,"dir":"test"},{"name":"returns a random URL with grayscale image","suites":["image.js","lorempicsum","imageGrayscale()"],"updatePoint":{"line":43,"column":51},"line":43,"code":"      it(\"returns a random URL with grayscale image\", function () {\n        var imageUrl = faker.image.lorempicsum.imageGrayscale(100, 100, true);\n        assert.strictEqual(imageUrl, 'https://picsum.photos/100/100?grayscale');\n      });","file":"image.unit.js","skipped":false,"dir":"test"},{"name":"returns a random image url blurred","suites":["image.js","lorempicsum","imageBlurred()"],"updatePoint":{"line":49,"column":44},"line":49,"code":"      it(\"returns a random image url blurred\", function () {\n        var imageUrl = faker.image.lorempicsum.imageBlurred(100, 100, 2);\n        assert.strictEqual(imageUrl, 'https://picsum.photos/100/100?blur=2');\n      });","file":"image.unit.js","skipped":false,"dir":"test"},{"name":"returns a random image url blurred","suites":["image.js","lorempicsum","imageRandomSeeded()"],"updatePoint":{"line":55,"column":44},"line":55,"code":"      it(\"returns a random image url blurred\", function () {\n        var imageUrl = faker.image.lorempicsum.imageRandomSeeded(100, 100, undefined, undefined, 'picsum');\n        assert.strictEqual(imageUrl, 'https://picsum.photos/seed/picsum/100/100');\n      });","file":"image.unit.js","skipped":false,"dir":"test"},{"name":"returns a random image url from lorempixel","suites":["image.js","lorempixel","imageUrl()"],"updatePoint":{"line":63,"column":52},"line":63,"code":"      it(\"returns a random image url from lorempixel\", function () {\n        var imageUrl = faker.image.lorempixel.imageUrl();\n        assert.strictEqual(imageUrl, 'https://lorempixel.com/640/480');\n      });","file":"image.unit.js","skipped":false,"dir":"test"},{"name":"returns a random image url from lorempixel with width and height","suites":["image.js","lorempixel","imageUrl()"],"updatePoint":{"line":67,"column":74},"line":67,"code":"      it(\"returns a random image url from lorempixel with width and height\", function () {\n        var imageUrl = faker.image.lorempixel.imageUrl(100, 100);\n        assert.strictEqual(imageUrl, 'https://lorempixel.com/100/100');\n      });","file":"image.unit.js","skipped":false,"dir":"test"},{"name":"returns a random image url for a specified category","suites":["image.js","lorempixel","imageUrl()"],"updatePoint":{"line":71,"column":61},"line":71,"code":"      it(\"returns a random image url for a specified category\", function () {\n        var imageUrl = faker.image.lorempixel.imageUrl(100, 100, 'abstract');\n        assert.strictEqual(imageUrl, 'https://lorempixel.com/100/100/abstract');\n      });","file":"image.unit.js","skipped":false,"dir":"test"},{"name":"return a random avatar from FakerCloud","suites":["image.js","lorempixel","avatar()"],"updatePoint":{"line":77,"column":48},"line":77,"code":"      it(\"return a random avatar from FakerCloud\", function () {\n        assert.notStrictEqual(-1, faker.image.lorempixel.avatar().indexOf('cdn.fakercloud.com/avatars'));\n      });","file":"image.unit.js","skipped":false,"dir":"test"},{"name":"returns a random abstract image url","suites":["image.js","lorempixel","abstract()"],"updatePoint":{"line":82,"column":45},"line":82,"code":"      it(\"returns a random abstract image url\", function () {\n        var abstract = faker.image.lorempixel.abstract();\n        assert.strictEqual(abstract, 'https://lorempixel.com/640/480/abstract');\n      });","file":"image.unit.js","skipped":false,"dir":"test"},{"name":"returns a random animals image url","suites":["image.js","lorempixel","animals()"],"updatePoint":{"line":88,"column":44},"line":88,"code":"      it(\"returns a random animals image url\", function () {\n        var animals = faker.image.lorempixel.animals();\n        assert.strictEqual(animals, 'https://lorempixel.com/640/480/animals');\n      });","file":"image.unit.js","skipped":false,"dir":"test"},{"name":"returns a random business image url","suites":["image.js","lorempixel","business()"],"updatePoint":{"line":94,"column":45},"line":94,"code":"      it(\"returns a random business image url\", function () {\n        var business = faker.image.lorempixel.business();\n        assert.strictEqual(business, 'https://lorempixel.com/640/480/business');\n      });","file":"image.unit.js","skipped":false,"dir":"test"},{"name":"returns a random cats image url","suites":["image.js","lorempixel","cats()"],"updatePoint":{"line":100,"column":41},"line":100,"code":"      it(\"returns a random cats image url\", function () {\n        var cats = faker.image.lorempixel.cats();\n        assert.strictEqual(cats, 'https://lorempixel.com/640/480/cats');\n      });","file":"image.unit.js","skipped":false,"dir":"test"},{"name":"returns a random city image url","suites":["image.js","lorempixel","city()"],"updatePoint":{"line":106,"column":41},"line":106,"code":"      it(\"returns a random city image url\", function () {\n        var city = faker.image.lorempixel.city();\n        assert.strictEqual(city, 'https://lorempixel.com/640/480/city');\n      });","file":"image.unit.js","skipped":false,"dir":"test"},{"name":"returns a random food image url","suites":["image.js","lorempixel","food()"],"updatePoint":{"line":112,"column":41},"line":112,"code":"      it(\"returns a random food image url\", function () {\n        var food = faker.image.lorempixel.food();\n        assert.strictEqual(food, 'https://lorempixel.com/640/480/food');\n      });","file":"image.unit.js","skipped":false,"dir":"test"},{"name":"returns a random nightlife image url","suites":["image.js","lorempixel","nightlife()"],"updatePoint":{"line":118,"column":46},"line":118,"code":"      it(\"returns a random nightlife image url\", function () {\n        var nightlife = faker.image.lorempixel.nightlife();\n        assert.strictEqual(nightlife, 'https://lorempixel.com/640/480/nightlife');\n      });","file":"image.unit.js","skipped":false,"dir":"test"},{"name":"returns a random fashion image url","suites":["image.js","lorempixel","fashion()"],"updatePoint":{"line":124,"column":44},"line":124,"code":"      it(\"returns a random fashion image url\", function () {\n        var fashion = faker.image.lorempixel.fashion();\n        assert.strictEqual(fashion, 'https://lorempixel.com/640/480/fashion');\n      });","file":"image.unit.js","skipped":false,"dir":"test"},{"name":"returns a random people image url","suites":["image.js","lorempixel","people()"],"updatePoint":{"line":130,"column":43},"line":130,"code":"      it(\"returns a random people image url\", function () {\n        var people = faker.image.lorempixel.people();\n        assert.strictEqual(people, 'https://lorempixel.com/640/480/people');\n      });","file":"image.unit.js","skipped":false,"dir":"test"},{"name":"returns a random nature image url","suites":["image.js","lorempixel","nature()"],"updatePoint":{"line":136,"column":43},"line":136,"code":"      it(\"returns a random nature image url\", function () {\n        var nature = faker.image.lorempixel.nature();\n        assert.strictEqual(nature, 'https://lorempixel.com/640/480/nature');\n      });","file":"image.unit.js","skipped":false,"dir":"test"},{"name":"returns a random sports image url","suites":["image.js","lorempixel","sports()"],"updatePoint":{"line":142,"column":43},"line":142,"code":"      it(\"returns a random sports image url\", function () {\n        var sports = faker.image.lorempixel.sports();\n        assert.strictEqual(sports, 'https://lorempixel.com/640/480/sports');\n      });","file":"image.unit.js","skipped":false,"dir":"test"},{"name":"returns a random technics image url","suites":["image.js","lorempixel","technics()"],"updatePoint":{"line":148,"column":45},"line":148,"code":"      it(\"returns a random technics image url\", function () {\n        var technics = faker.image.lorempixel.technics();\n        assert.strictEqual(technics, 'https://lorempixel.com/640/480/technics');\n      });","file":"image.unit.js","skipped":false,"dir":"test"},{"name":"returns a random transport image url","suites":["image.js","lorempixel","transport()"],"updatePoint":{"line":154,"column":46},"line":154,"code":"      it(\"returns a random transport image url\", function () {\n        var transport = faker.image.lorempixel.transport();\n        assert.strictEqual(transport, 'https://lorempixel.com/640/480/transport');\n      });","file":"image.unit.js","skipped":false,"dir":"test"},{"name":"returns a random image url from unsplash","suites":["image.js","unsplash","imageUrl()"],"updatePoint":{"line":162,"column":50},"line":162,"code":"      it(\"returns a random image url from unsplash\", function () {\n        var imageUrl = faker.image.unsplash.imageUrl();\n        assert.strictEqual(imageUrl, 'https://source.unsplash.com/640x480');\n      });","file":"image.unit.js","skipped":false,"dir":"test"},{"name":"returns a random image url from unsplash with width and height","suites":["image.js","unsplash","imageUrl()"],"updatePoint":{"line":166,"column":72},"line":166,"code":"      it(\"returns a random image url from unsplash with width and height\", function () {\n        var imageUrl = faker.image.unsplash.imageUrl(100, 100);\n        assert.strictEqual(imageUrl, 'https://source.unsplash.com/100x100');\n      });","file":"image.unit.js","skipped":false,"dir":"test"},{"name":"returns a random image url for a specified category","suites":["image.js","unsplash","imageUrl()"],"updatePoint":{"line":170,"column":61},"line":170,"code":"      it(\"returns a random image url for a specified category\", function () {\n        var imageUrl = faker.image.unsplash.imageUrl(100, 100, 'food');\n        assert.strictEqual(imageUrl, 'https://source.unsplash.com/category/food/100x100');\n      });","file":"image.unit.js","skipped":false,"dir":"test"},{"name":"returns a random image url with correct keywords for a specified category","suites":["image.js","unsplash","imageUrl()"],"updatePoint":{"line":174,"column":83},"line":174,"code":"      it(\"returns a random image url with correct keywords for a specified category\", function () {\n        var imageUrl = faker.image.unsplash.imageUrl(100, 100, 'food', 'keyword1,keyword2');\n        assert.strictEqual(imageUrl, 'https://source.unsplash.com/category/food/100x100?keyword1,keyword2');\n      });","file":"image.unit.js","skipped":false,"dir":"test"},{"name":"returns a random image url without keyword which format is wrong for a specified category","suites":["image.js","unsplash","imageUrl()"],"updatePoint":{"line":178,"column":99},"line":178,"code":"      it(\"returns a random image url without keyword which format is wrong for a specified category\", function () {\n        var imageUrl = faker.image.unsplash.imageUrl(100, 100, 'food', 'keyword1,?ds)0123$*908932409');\n        assert.strictEqual(imageUrl, 'https://source.unsplash.com/category/food/100x100');\n      });","file":"image.unit.js","skipped":false,"dir":"test"},{"name":"returns a searching image url with keyword","suites":["image.js","unsplash","image()"],"updatePoint":{"line":184,"column":52},"line":184,"code":"      it(\"returns a searching image url with keyword\", function () {\n        var food = faker.image.unsplash.image(100, 200, 'keyword1,keyword2,keyword3');\n        assert.strictEqual(food, 'https://source.unsplash.com/100x200?keyword1,keyword2,keyword3');\n      });","file":"image.unit.js","skipped":false,"dir":"test"},{"name":"returns a random food image url","suites":["image.js","unsplash","food()"],"updatePoint":{"line":190,"column":41},"line":190,"code":"      it(\"returns a random food image url\", function () {\n        var food = faker.image.unsplash.food();\n        assert.strictEqual(food, 'https://source.unsplash.com/category/food/640x480');\n      });","file":"image.unit.js","skipped":false,"dir":"test"},{"name":"returns a random people image url","suites":["image.js","unsplash","people()"],"updatePoint":{"line":196,"column":43},"line":196,"code":"      it(\"returns a random people image url\", function () {\n        var people = faker.image.unsplash.people();\n        assert.strictEqual(people, 'https://source.unsplash.com/category/people/640x480');\n      });","file":"image.unit.js","skipped":false,"dir":"test"},{"name":"returns a random nature image url","suites":["image.js","unsplash","nature()"],"updatePoint":{"line":202,"column":43},"line":202,"code":"      it(\"returns a random nature image url\", function () {\n        var nature = faker.image.unsplash.nature();\n        assert.strictEqual(nature, 'https://source.unsplash.com/category/nature/640x480');\n      });","file":"image.unit.js","skipped":false,"dir":"test"},{"name":"returns a random technology image url","suites":["image.js","unsplash","technology()"],"updatePoint":{"line":208,"column":47},"line":208,"code":"      it(\"returns a random technology image url\", function () {\n        var transport = faker.image.unsplash.technology();\n        assert.strictEqual(transport, 'https://source.unsplash.com/category/technology/640x480');\n      });","file":"image.unit.js","skipped":false,"dir":"test"},{"name":"returns a random objects image url","suites":["image.js","unsplash","objects()"],"updatePoint":{"line":214,"column":44},"line":214,"code":"      it(\"returns a random objects image url\", function () {\n        var transport = faker.image.unsplash.objects();\n        assert.strictEqual(transport, 'https://source.unsplash.com/category/objects/640x480');\n      });","file":"image.unit.js","skipped":false,"dir":"test"},{"name":"returns a random buildings image url","suites":["image.js","unsplash","buildings()"],"updatePoint":{"line":220,"column":46},"line":220,"code":"      it(\"returns a random buildings image url\", function () {\n        var transport = faker.image.unsplash.buildings();\n        assert.strictEqual(transport, 'https://source.unsplash.com/category/buildings/640x480');\n      });","file":"image.unit.js","skipped":false,"dir":"test"},{"name":"returns a blank data","suites":["image.js","dataUri"],"updatePoint":{"line":227,"column":28},"line":227,"code":"    it(\"returns a blank data\", function () {\n      var dataUri = faker.image.dataUri(200, 300);\n      assert.strictEqual(dataUri, 'data:image/svg+xml;charset=UTF-8,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20version%3D%221.1%22%20baseProfile%3D%22full%22%20width%3D%22200%22%20height%3D%22300%22%3E%3Crect%20width%3D%22100%25%22%20height%3D%22100%25%22%20fill%3D%22grey%22%2F%3E%3Ctext%20x%3D%22100%22%20y%3D%22150%22%20font-size%3D%2220%22%20alignment-baseline%3D%22middle%22%20text-anchor%3D%22middle%22%20fill%3D%22white%22%3E200x300%3C%2Ftext%3E%3C%2Fsvg%3E');\n    });","file":"image.unit.js","skipped":false,"dir":"test"},{"name":"returns a customed background color data URI","suites":["image.js","dataUri"],"updatePoint":{"line":231,"column":52},"line":231,"code":"    it(\"returns a customed background color data URI\", function () {\n      var dataUri = faker.image.dataUri(200, 300, 'red');\n      assert.strictEqual(dataUri, 'data:image/svg+xml;charset=UTF-8,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20version%3D%221.1%22%20baseProfile%3D%22full%22%20width%3D%22200%22%20height%3D%22300%22%3E%3Crect%20width%3D%22100%25%22%20height%3D%22100%25%22%20fill%3D%22red%22%2F%3E%3Ctext%20x%3D%22100%22%20y%3D%22150%22%20font-size%3D%2220%22%20alignment-baseline%3D%22middle%22%20text-anchor%3D%22middle%22%20fill%3D%22white%22%3E200x300%3C%2Ftext%3E%3C%2Fsvg%3E');\n    });","file":"image.unit.js","skipped":false,"dir":"test"},{"name":"returns an email","suites":["internet.js","email()"],"updatePoint":{"line":11,"column":24},"line":11,"code":"    it(\"returns an email\", function () {\n      sinon.stub(faker.internet, 'userName').returns('Aiden.Harann55');\n      var email = faker.internet.email(\"Aiden.Harann55\");\n      var res = email.split(\"@\");\n      res = res[0];\n      assert.strictEqual(res, 'Aiden.Harann55');\n      faker.internet.userName.restore();\n    });","file":"internet.unit.js","skipped":false,"dir":"test"},{"name":"returns an email with japanese characters","suites":["internet.js","email()"],"updatePoint":{"line":19,"column":49},"line":19,"code":"    it(\"returns an email with japanese characters\", function () {\n      sinon.stub(faker.internet, 'userName').returns('思源_唐3');\n      var email = faker.internet.email(\"思源_唐3\");\n      var res = email.split(\"@\");\n      res = res[0];\n      assert.equal(res, '思源_唐3');\n      faker.internet.userName.restore();\n    });","file":"internet.unit.js","skipped":false,"dir":"test"},{"name":"returns an email with the correct name","suites":["internet.js","exampleEmail"],"updatePoint":{"line":29,"column":46},"line":29,"code":"    it(\"returns an email with the correct name\", function () {\n      sinon.stub(faker.internet, 'userName').returns('Aiden.Harann55');\n      var email = faker.internet.email(\"Aiden.Harann55\");\n      var res = email.split(\"@\");\n      res = res[0];\n      assert.strictEqual(res, 'Aiden.Harann55');\n      faker.internet.userName.restore();\n    });","file":"internet.unit.js","skipped":false,"dir":"test"},{"name":"uses the example.[org|com|net] host","suites":["internet.js","exampleEmail"],"updatePoint":{"line":37,"column":43},"line":37,"code":"    it(\"uses the example.[org|com|net] host\", function () {\n      var email = faker.internet.exampleEmail();\n      assert.ok(email.match(/@example\\.(org|com|net)$/));\n    });","file":"internet.unit.js","skipped":false,"dir":"test"},{"name":"occasionally returns a single firstName","suites":["internet.js","userName()"],"updatePoint":{"line":43,"column":47},"line":43,"code":"    it(\"occasionally returns a single firstName\", function () {\n      sinon.stub(faker.datatype, 'number').returns(0);\n      sinon.spy(faker.name, 'firstName');\n      var username = faker.internet.userName();\n      assert.ok(username);\n      assert.ok(faker.name.firstName.called);\n      faker.datatype.number.restore();\n      faker.name.firstName.restore();\n    });","file":"internet.unit.js","skipped":false,"dir":"test"},{"name":"occasionally returns a firstName with a period or hyphen and a lastName","suites":["internet.js","userName()"],"updatePoint":{"line":52,"column":79},"line":52,"code":"    it(\"occasionally returns a firstName with a period or hyphen and a lastName\", function () {\n      sinon.stub(faker.datatype, 'number').returns(1);\n      sinon.spy(faker.name, 'firstName');\n      sinon.spy(faker.name, 'lastName');\n      sinon.spy(faker.random, 'arrayElement');\n      var username = faker.internet.userName();\n      assert.ok(username);\n      assert.ok(faker.name.firstName.called);\n      assert.ok(faker.name.lastName.called);\n      assert.ok(faker.random.arrayElement.calledWith(['.', '_']));\n      faker.datatype.number.restore();\n      faker.name.firstName.restore();\n      faker.name.lastName.restore();\n      faker.random.arrayElement.restore();\n    });","file":"internet.unit.js","skipped":false,"dir":"test"},{"name":"returns a domainWord plus a random suffix","suites":["internet.js","domainName()"],"updatePoint":{"line":69,"column":49},"line":69,"code":"    it(\"returns a domainWord plus a random suffix\", function () {\n      sinon.stub(faker.internet, 'domainWord').returns('bar');\n      sinon.stub(faker.internet, 'domainSuffix').returns('net');\n      var domain_name = faker.internet.domainName();\n      assert.strictEqual(domain_name, 'bar.net');\n      faker.internet.domainWord.restore();\n      faker.internet.domainSuffix.restore();\n    });","file":"internet.unit.js","skipped":false,"dir":"test"},{"name":"returns a lower-case adjective + noun","suites":["internet.js","domainWord()"],"updatePoint":{"line":79,"column":45},"line":79,"code":"    it(\"returns a lower-case adjective + noun\", function () {\n      sinon.stub(faker.word, 'adjective').returns('RANDOM');\n      sinon.stub(faker.word, 'noun').returns('WORD');\n      var domain_word = faker.internet.domainWord();\n      assert.ok(domain_word);\n      assert.strictEqual(domain_word, 'random-word');\n      faker.word.adjective.restore();\n      faker.word.noun.restore();\n    });","file":"internet.unit.js","skipped":false,"dir":"test"},{"name":"should remove the apostrophe","suites":["internet.js","domainWord()","when the firstName used contains a apostrophe"],"updatePoint":{"line":92,"column":38},"line":92,"code":"      it(\"should remove the apostrophe\", function () {\n        assert.strictEqual(domain_word, 'another-noun');\n      });","file":"internet.unit.js","skipped":false,"dir":"test"},{"name":"returns a valid protocol","suites":["internet.js","protocol()"],"updatePoint":{"line":100,"column":32},"line":100,"code":"    it('returns a valid protocol', function () {\n      var protocol = faker.internet.protocol();\n      assert.ok(protocol);\n    });","file":"internet.unit.js","skipped":false,"dir":"test"},{"name":"should occasionally return http","suites":["internet.js","protocol()"],"updatePoint":{"line":104,"column":39},"line":104,"code":"    it('should occasionally return http', function () {\n      sinon.stub(faker.datatype, 'number').returns(0);\n      var protocol = faker.internet.protocol();\n      assert.ok(protocol);\n      assert.strictEqual(protocol, 'http');\n      faker.datatype.number.restore();\n    });","file":"internet.unit.js","skipped":false,"dir":"test"},{"name":"should occasionally return https","suites":["internet.js","protocol()"],"updatePoint":{"line":111,"column":40},"line":111,"code":"    it('should occasionally return https', function () {\n      sinon.stub(faker.datatype, 'number').returns(1);\n      var protocol = faker.internet.protocol();\n      assert.ok(protocol);\n      assert.strictEqual(protocol, 'https');\n      faker.datatype.number.restore();\n    });","file":"internet.unit.js","skipped":false,"dir":"test"},{"name":"returns a valid http method","suites":["internet.js","httpMethod()"],"updatePoint":{"line":120,"column":35},"line":120,"code":"    it('returns a valid http method', function () {\n      var httpMethods = ['GET', 'POST', 'PUT', 'DELETE', 'PATCH'];\n      var method = faker.internet.httpMethod();\n      assert.ok(httpMethods.includes(method));\n    });","file":"internet.unit.js","skipped":false,"dir":"test"},{"name":"returns a valid url","suites":["internet.js","url()"],"updatePoint":{"line":127,"column":27},"line":127,"code":"    it('returns a valid url', function () {\n      sinon.stub(faker.internet, 'protocol').returns('http');\n      sinon.stub(faker.internet, 'domainWord').returns('bar');\n      sinon.stub(faker.internet, 'domainSuffix').returns('net');\n      var url = faker.internet.url();\n      assert.ok(url);\n      assert.strictEqual(url, 'http://bar.net');\n    });","file":"internet.unit.js","skipped":false,"dir":"test"},{"name":"returns a random IP address with four parts","suites":["internet.js","ip()"],"updatePoint":{"line":137,"column":51},"line":137,"code":"    it(\"returns a random IP address with four parts\", function () {\n      var ip = faker.internet.ip();\n      var parts = ip.split('.');\n      assert.strictEqual(parts.length, 4);\n    });","file":"internet.unit.js","skipped":false,"dir":"test"},{"name":"returns a random IPv6 address with eight parts","suites":["internet.js","ipv6()"],"updatePoint":{"line":144,"column":54},"line":144,"code":"    it(\"returns a random IPv6 address with eight parts\", function () {\n      var ip = faker.internet.ipv6();\n      var parts = ip.split(':');\n      assert.strictEqual(parts.length, 8);\n    });","file":"internet.unit.js","skipped":false,"dir":"test"},{"name":"returns a random port number","suites":["internet.js","port()"],"updatePoint":{"line":151,"column":36},"line":151,"code":"    it(\"returns a random port number\", function () {\n      var port = faker.internet.port();\n      assert.ok(Number.isInteger(port));\n      assert.ok(0 <= port && port <= 65535);\n    });","file":"internet.unit.js","skipped":false,"dir":"test"},{"name":"returns a valid user-agent","suites":["internet.js","userAgent()"],"updatePoint":{"line":158,"column":34},"line":158,"code":"    it(\"returns a valid user-agent\", function () {\n      var ua = faker.internet.userAgent();\n      assert.ok(ua);\n    });","file":"internet.unit.js","skipped":false,"dir":"test"},{"name":"is deterministic","suites":["internet.js","userAgent()"],"updatePoint":{"line":162,"column":24},"line":162,"code":"    it('is deterministic', function () {\n      faker.seed(1);\n      var ua1 = faker.internet.userAgent();\n      faker.seed(1);\n      var ua2 = faker.internet.userAgent();\n      assert.strictEqual(ua1, ua2);\n    });","file":"internet.unit.js","skipped":false,"dir":"test"},{"name":"returns a valid hex value (like #ffffff)","suites":["internet.js","color()"],"updatePoint":{"line":171,"column":48},"line":171,"code":"    it(\"returns a valid hex value (like #ffffff)\", function () {\n      var color = faker.internet.color(100, 100, 100);\n      assert.ok(color.match(/^#[a-f0-9]{6}$/));\n    });","file":"internet.unit.js","skipped":false,"dir":"test"},{"name":"returns a random MAC address with 6 hexadecimal digits","suites":["internet.js","mac()"],"updatePoint":{"line":177,"column":62},"line":177,"code":"    it(\"returns a random MAC address with 6 hexadecimal digits\", function () {\n      var mac = faker.internet.mac();\n      assert.ok(mac.match(/^([a-f0-9]{2}:){5}[a-f0-9]{2}$/));\n    });","file":"internet.unit.js","skipped":false,"dir":"test"},{"name":"uses the dash separator if we pass it in as our separator","suites":["internet.js","mac()"],"updatePoint":{"line":181,"column":65},"line":181,"code":"    it(\"uses the dash separator if we pass it in as our separator\", function () {\n      var mac = faker.internet.mac('-');\n      assert.ok(mac.match(/^([a-f0-9]{2}-){5}[a-f0-9]{2}$/));\n    });","file":"internet.unit.js","skipped":false,"dir":"test"},{"name":"uses no separator if we pass in an empty string","suites":["internet.js","mac()"],"updatePoint":{"line":185,"column":55},"line":185,"code":"    it(\"uses no separator if we pass in an empty string\", function () {\n      var mac = faker.internet.mac('');\n      assert.ok(mac.match(/^[a-f0-9]{12}$/));\n    });","file":"internet.unit.js","skipped":false,"dir":"test"},{"name":"uses the default colon (:) if we provide an unacceptable separator","suites":["internet.js","mac()"],"updatePoint":{"line":189,"column":74},"line":189,"code":"    it(\"uses the default colon (:) if we provide an unacceptable separator\", function () {\n      var mac = faker.internet.mac('!');\n      assert.ok(mac.match(/^([a-f0-9]{2}:){5}[a-f0-9]{2}$/));\n      mac = faker.internet.mac('&');\n      assert.ok(mac.match(/^([a-f0-9]{2}:){5}[a-f0-9]{2}$/));\n    });","file":"internet.unit.js","skipped":false,"dir":"test"},{"name":"setLocale() changes faker.locale","suites":["locale","setLocale()"],"updatePoint":{"line":13,"column":40},"line":13,"code":"    it(\"setLocale() changes faker.locale\", function () {\n      for (var locale in faker.locales) {\n        faker.setLocale(locale);\n        assert.strictEqual(faker.locale, locale);\n      }\n    });","file":"locales.unit.js","skipped":false,"dir":"test"},{"name":"returns a word with a random length","suites":["lorem.js","word()","when no 'length' param passed in"],"updatePoint":{"line":12,"column":45},"line":12,"code":"      it(\"returns a word with a random length\", function () {\n        var str = faker.lorem.word();\n        assert.ok(typeof str === 'string');\n      });","file":"lorem.unit.js","skipped":false,"dir":"test"},{"name":"returns a word with the requested length","suites":["lorem.js","word()","when 'length' param passed in"],"updatePoint":{"line":18,"column":50},"line":18,"code":"      it(\"returns a word with the requested length\", function () {\n        var str = faker.lorem.word(5);\n        assert.ok(typeof str === 'string');\n        assert.strictEqual(str.length, 5);\n      });","file":"lorem.unit.js","skipped":false,"dir":"test"},{"name":"returns three words","suites":["lorem.js","words()","when no 'num' param passed in"],"updatePoint":{"line":33,"column":29},"line":33,"code":"      it(\"returns three words\", function () {\n        var str = faker.lorem.words();\n        var words = str.split(' ');\n        assert.ok(Array.isArray(words));\n        assert.strictEqual(true, words.length >= 3); // assert.ok(faker.helpers.shuffle.called);\n      });","file":"lorem.unit.js","skipped":false,"dir":"test"},{"name":"returns requested number of words","suites":["lorem.js","words()","when 'num' param passed in"],"updatePoint":{"line":41,"column":43},"line":41,"code":"      it(\"returns requested number of words\", function () {\n        var str = faker.lorem.words(7);\n        var words = str.split(' ');\n        assert.ok(Array.isArray(words));\n        assert.strictEqual(words.length, 7);\n      });","file":"lorem.unit.js","skipped":false,"dir":"test"},{"name":"returns a slug with three words","suites":["lorem.js","slug()","when no 'wordCount' param passed in"],"updatePoint":{"line":63,"column":41},"line":63,"code":"      it(\"returns a slug with three words\", function () {\n        var str = faker.lorem.slug();\n        validateSlug(3, str);\n      });","file":"lorem.unit.js","skipped":false,"dir":"test"},{"name":"returns a slug with requested number of words","suites":["lorem.js","slug()","when 'wordCount' param passed in"],"updatePoint":{"line":69,"column":55},"line":69,"code":"      it(\"returns a slug with requested number of words\", function () {\n        var str = faker.lorem.slug(7);\n        validateSlug(7, str);\n      });","file":"lorem.unit.js","skipped":false,"dir":"test"},{"name":"returns a genre","suites":["music.js","genre()"],"updatePoint":{"line":11,"column":23},"line":11,"code":"    it(\"returns a genre\", function () {\n      sinon.stub(faker.music, 'genre').returns('Rock');\n      var genre = faker.music.genre();\n      assert.strictEqual(genre, 'Rock');\n      faker.music.genre.restore();\n    });","file":"music.unit.js","skipped":false,"dir":"test"},{"name":"returns a random name","suites":["name.js","firstName()"],"updatePoint":{"line":16,"column":29},"line":16,"code":"    it(\"returns a random name\", function () {\n      sinon.stub(faker.name, 'firstName').returns('foo');\n      var first_name = faker.name.firstName();\n      assert.strictEqual(first_name, 'foo');\n      faker.name.firstName.restore();\n    });","file":"name.unit.js","skipped":false,"dir":"test"},{"name":"returns a gender-specific name when passed a number","suites":["name.js","firstName()"],"updatePoint":{"line":22,"column":59},"line":22,"code":"    it(\"returns a gender-specific name when passed a number\", function () {\n      for (var q = 0; q < 30; q++) {\n        var gender = Math.floor(Math.random() * 2);\n        var name = faker.name.firstName(gender);\n\n        if (gender === 0) {\n          assertInArray(name, faker.definitions.name.male_first_name);\n        } else {\n          assertInArray(name, faker.definitions.name.female_first_name);\n        }\n      }\n    });","file":"name.unit.js","skipped":false,"dir":"test"},{"name":"returns a gender-specific name when passed a string","suites":["name.js","firstName()"],"updatePoint":{"line":34,"column":59},"line":34,"code":"    it(\"returns a gender-specific name when passed a string\", function () {\n      for (var q = 0; q < 30; q++) {\n        var gender = Math.floor(Math.random() * 2);\n        var genderString = gender === 0 ? 'male' : 'female';\n        var name = faker.name.firstName(genderString);\n        assertInArray(name, faker.definitions.name[genderString + '_first_name']);\n      }\n    });","file":"name.unit.js","skipped":false,"dir":"test"},{"name":"returns a random name","suites":["name.js","lastName()"],"updatePoint":{"line":44,"column":29},"line":44,"code":"    it(\"returns a random name\", function () {\n      sinon.stub(faker.name, 'lastName').returns('foo');\n      var last_name = faker.name.lastName();\n      assert.strictEqual(last_name, 'foo');\n      faker.name.lastName.restore();\n    });","file":"name.unit.js","skipped":false,"dir":"test"},{"name":"returns a random middle name","suites":["name.js","middleName()"],"updatePoint":{"line":52,"column":36},"line":52,"code":"    it(\"returns a random middle name\", function () {\n      sinon.stub(faker.name, 'middleName').returns('foo');\n      var middle_name = faker.name.middleName();\n      assert.strictEqual(middle_name, 'foo');\n      faker.name.middleName.restore();\n    });","file":"name.unit.js","skipped":false,"dir":"test"},{"name":"returns male prefix","suites":["name.js","middleName()","when using a locale with gender specific middle names"],"updatePoint":{"line":73,"column":29},"line":73,"code":"      it(\"returns male prefix\", function () {\n        var middle_name = faker.name.middleName(0);\n        assert.strictEqual(middle_name, 'Genaddiesvich');\n      });","file":"name.unit.js","skipped":false,"dir":"test"},{"name":"returns female prefix","suites":["name.js","middleName()","when using a locale with gender specific middle names"],"updatePoint":{"line":77,"column":31},"line":77,"code":"      it(\"returns female prefix\", function () {\n        var middle_name = faker.name.middleName(1);\n        assert.strictEqual(middle_name, 'Genaddievna');\n      });","file":"name.unit.js","skipped":false,"dir":"test"},{"name":"usually returns a first name and last name","suites":["name.js","findName()"],"updatePoint":{"line":84,"column":50},"line":84,"code":"    it(\"usually returns a first name and last name\", function () {\n      sinon.stub(faker.datatype, 'number').returns(5);\n      var name = faker.name.findName();\n      assert.ok(name);\n      var parts = name.split(' ');\n      assert.strictEqual(parts.length, 2);\n      faker.datatype.number.restore();\n    });","file":"name.unit.js","skipped":false,"dir":"test"},{"name":"occasionally returns a first name and last name with a prefix","suites":["name.js","findName()"],"updatePoint":{"line":92,"column":69},"line":92,"code":"    it(\"occasionally returns a first name and last name with a prefix\", function () {\n      sinon.stub(faker.datatype, 'number').returns(0);\n      var name = faker.name.findName();\n      var parts = name.split(' ');\n      assert.ok(parts.length >= 3);\n      faker.datatype.number.restore();\n    });","file":"name.unit.js","skipped":false,"dir":"test"},{"name":"occasionally returns a male full name with a prefix","suites":["name.js","findName()"],"updatePoint":{"line":99,"column":59},"line":99,"code":"    it(\"occasionally returns a male full name with a prefix\", function () {\n      sinon.stub(faker.datatype, 'number').withArgs(8).returns(0) // with prefix\n      .withArgs(1).returns(0); // gender male\n\n      sinon.stub(faker.name, 'prefix').withArgs(0).returns('X');\n      sinon.stub(faker.name, 'firstName').withArgs(0).returns('Y');\n      sinon.stub(faker.name, 'lastName').withArgs(0).returns('Z');\n      var name = faker.name.findName();\n      assert.strictEqual(name, 'X Y Z');\n      faker.datatype.number.restore();\n      faker.name.prefix.restore();\n      faker.name.firstName.restore();\n      faker.name.lastName.restore();\n    });","file":"name.unit.js","skipped":false,"dir":"test"},{"name":"occasionally returns a female full name with a prefix","suites":["name.js","findName()"],"updatePoint":{"line":113,"column":61},"line":113,"code":"    it(\"occasionally returns a female full name with a prefix\", function () {\n      sinon.stub(faker.datatype, 'number').withArgs(8).returns(0) // with prefix\n      .withArgs(1).returns(1); // gender female\n\n      sinon.stub(faker.name, 'prefix').withArgs(1).returns('J');\n      sinon.stub(faker.name, 'firstName').withArgs(1).returns('K');\n      sinon.stub(faker.name, 'lastName').withArgs(1).returns('L');\n      var name = faker.name.findName();\n      assert.strictEqual(name, 'J K L');\n      faker.datatype.number.restore();\n      faker.name.prefix.restore();\n      faker.name.firstName.restore();\n      faker.name.lastName.restore();\n    });","file":"name.unit.js","skipped":false,"dir":"test"},{"name":"occasionally returns a first name and last name with a suffix","suites":["name.js","findName()"],"updatePoint":{"line":127,"column":69},"line":127,"code":"    it(\"occasionally returns a first name and last name with a suffix\", function () {\n      sinon.stub(faker.datatype, 'number').returns(1);\n      sinon.stub(faker.name, 'suffix').returns('Jr.');\n      var name = faker.name.findName();\n      var parts = name.split(' ');\n      assert.ok(parts.length >= 3);\n      assert.strictEqual(parts[parts.length - 1], 'Jr.');\n      faker.name.suffix.restore();\n      faker.datatype.number.restore();\n    });","file":"name.unit.js","skipped":false,"dir":"test"},{"name":"needs to work with specific locales and respect the fallbacks","suites":["name.js","findName()"],"updatePoint":{"line":137,"column":69},"line":137,"code":"    it(\"needs to work with specific locales and respect the fallbacks\", function () {\n      faker.locale = 'en_US'; // this will throw if this is broken\n\n      var name = faker.name.findName();\n    });","file":"name.unit.js","skipped":false,"dir":"test"},{"name":"returns a random title","suites":["name.js","title()"],"updatePoint":{"line":144,"column":30},"line":144,"code":"    it(\"returns a random title\", function () {\n      sinon.stub(faker.name, 'title').returns('Lead Solutions Supervisor');\n      var title = faker.name.title();\n      assert.strictEqual(title, 'Lead Solutions Supervisor');\n      faker.name.title.restore();\n    });","file":"name.unit.js","skipped":false,"dir":"test"},{"name":"returns a job title consisting of a descriptor, area, and type","suites":["name.js","jobTitle()"],"updatePoint":{"line":152,"column":70},"line":152,"code":"    it(\"returns a job title consisting of a descriptor, area, and type\", function () {\n      sinon.spy(faker.random, 'arrayElement');\n      sinon.spy(faker.name, 'jobDescriptor');\n      sinon.spy(faker.name, 'jobArea');\n      sinon.spy(faker.name, 'jobType');\n      var jobTitle = faker.name.jobTitle();\n      assert.ok(typeof jobTitle === 'string');\n      assert.ok(faker.random.arrayElement.calledThrice);\n      assert.ok(faker.name.jobDescriptor.calledOnce);\n      assert.ok(faker.name.jobArea.calledOnce);\n      assert.ok(faker.name.jobType.calledOnce);\n      faker.random.arrayElement.restore();\n      faker.name.jobDescriptor.restore();\n      faker.name.jobArea.restore();\n      faker.name.jobType.restore();\n    });","file":"name.unit.js","skipped":false,"dir":"test"},{"name":"returns male prefix","suites":["name.js","prefix()","when using a locale with gender specific name prefixes"],"updatePoint":{"line":185,"column":29},"line":185,"code":"      it(\"returns male prefix\", function () {\n        var prefix = faker.name.prefix(0);\n        assert.strictEqual(prefix, 'Mp');\n      });","file":"name.unit.js","skipped":false,"dir":"test"},{"name":"returns female prefix","suites":["name.js","prefix()","when using a locale with gender specific name prefixes"],"updatePoint":{"line":189,"column":31},"line":189,"code":"      it(\"returns female prefix\", function () {\n        var prefix = faker.name.prefix(1);\n        assert.strictEqual(prefix, 'Fp');\n      });","file":"name.unit.js","skipped":false,"dir":"test"},{"name":"returns either prefix","suites":["name.js","prefix()","when using a locale with gender specific name prefixes"],"updatePoint":{"line":193,"column":31},"line":193,"code":"      it(\"returns either prefix\", function () {\n        var prefix = faker.name.prefix();\n        assert(['Mp', 'Fp'].indexOf(prefix) >= 0);\n      });","file":"name.unit.js","skipped":false,"dir":"test"},{"name":"returns a prefix","suites":["name.js","prefix()","when using a locale without gender specific name prefixes"],"updatePoint":{"line":212,"column":26},"line":212,"code":"      it(\"returns a prefix\", function () {\n        var prefix = faker.name.prefix();\n        assert.strictEqual(prefix, 'P');\n      });","file":"name.unit.js","skipped":false,"dir":"test"},{"name":"returns a random phoneNumber with a random format","suites":["phone_number.js","phoneNumber()"],"updatePoint":{"line":11,"column":57},"line":11,"code":"    it(\"returns a random phoneNumber with a random format\", function () {\n      sinon.spy(faker.helpers, 'replaceSymbolWithNumber');\n      var phone_number = faker.phone.phoneNumber();\n      assert.ok(phone_number.match(/\\d/));\n      assert.ok(faker.helpers.replaceSymbolWithNumber.called);\n      faker.helpers.replaceSymbolWithNumber.restore();\n    });","file":"phone_number.unit.js","skipped":false,"dir":"test"},{"name":"returns phone number with requested format (Array index)","suites":["phone_number.js","phoneNumberFormat()"],"updatePoint":{"line":20,"column":64},"line":20,"code":"    it(\"returns phone number with requested format (Array index)\", function () {\n      faker.locale = \"en\";\n\n      for (var i = 0; i < 10; i++) {\n        var phone_number = faker.phone.phoneNumberFormat(1);\n        assert.ok(phone_number.match(/\\(\\d\\d\\d\\) \\d\\d\\d-\\d\\d\\d\\d/));\n      }\n    });","file":"phone_number.unit.js","skipped":false,"dir":"test"},{"name":"returns phone number with proper format US (Array index)","suites":["phone_number.js","phoneNumberFormat()"],"updatePoint":{"line":28,"column":64},"line":28,"code":"    it(\"returns phone number with proper format US (Array index)\", function () {\n      faker.locale = \"en\";\n\n      for (var i = 0; i < 25; i++) {\n        var phone_number = faker.phone.phoneNumberFormat(1);\n        console.log(phone_number);\n        assert.ok(phone_number.match(/\\([2-9]\\d\\d\\) [2-9]\\d\\d-\\d\\d\\d\\d/));\n      }\n    });","file":"phone_number.unit.js","skipped":false,"dir":"test"},{"name":"returns phone number with proper format CA (Array index)","suites":["phone_number.js","phoneNumberFormat()"],"updatePoint":{"line":37,"column":64},"line":37,"code":"    it(\"returns phone number with proper format CA (Array index)\", function () {\n      faker.locale = \"en_CA\";\n\n      for (var i = 0; i < 25; i++) {\n        var phone_number = faker.phone.phoneNumberFormat(1);\n        assert.ok(phone_number.match(/\\([2-9]\\d\\d\\)[2-9]\\d\\d-\\d\\d\\d\\d/));\n      }\n    });","file":"phone_number.unit.js","skipped":false,"dir":"test"},{"name":"random.number() uses datatype module and prints deprecation warning","suites":["random.js","number"],"updatePoint":{"line":15,"column":75},"line":15,"code":"    it(\"random.number() uses datatype module and prints deprecation warning\", function () {\n      sinon.spy(console, 'log');\n      sinon.spy(faker.datatype, 'number');\n      faker.random.number();\n      assert.ok(faker.datatype.number.called);\n      assert.ok(console.log.calledWith('Deprecation Warning: faker.random.number is now located in faker.datatype.number'));\n      faker.datatype.number.restore();\n      console.log.restore();\n    });","file":"random.unit.js","skipped":false,"dir":"test"},{"name":"should return deterministic results when seeded with integer","suites":["random.js","number"],"updatePoint":{"line":24,"column":68},"line":24,"code":"    it('should return deterministic results when seeded with integer', function () {\n      faker.seed(100);\n      var name = faker.name.findName();\n      assert.strictEqual(name, 'Eva Jenkins');\n    });","file":"random.unit.js","skipped":false,"dir":"test"},{"name":"should return deterministic results when seeded with 0","suites":["random.js","number"],"updatePoint":{"line":29,"column":62},"line":29,"code":"    it('should return deterministic results when seeded with 0', function () {\n      faker.seed(0);\n      var name = faker.name.findName();\n      assert.strictEqual(name, 'Lola Sporer');\n    });","file":"random.unit.js","skipped":false,"dir":"test"},{"name":"should return deterministic results when seeded with array - one element","suites":["random.js","number"],"updatePoint":{"line":34,"column":80},"line":34,"code":"    it('should return deterministic results when seeded with array - one element', function () {\n      faker.seed([10]);\n      var name = faker.name.findName();\n      assert.strictEqual(name, 'Duane Kub');\n    });","file":"random.unit.js","skipped":false,"dir":"test"},{"name":"should return deterministic results when seeded with array - multiple elements","suites":["random.js","number"],"updatePoint":{"line":39,"column":86},"line":39,"code":"    it('should return deterministic results when seeded with array - multiple elements', function () {\n      faker.seed([10, 100, 1000]);\n      var name = faker.name.findName();\n      assert.strictEqual(name, 'Alma Shanahan');\n    });","file":"random.unit.js","skipped":false,"dir":"test"},{"name":"random.float() uses datatype module and prints deprecation warning","suites":["random.js","float"],"updatePoint":{"line":46,"column":74},"line":46,"code":"    it(\"random.float() uses datatype module and prints deprecation warning\", function () {\n      sinon.spy(console, 'log');\n      sinon.spy(faker.datatype, 'float');\n      faker.random.float();\n      assert.ok(faker.datatype.float.called);\n      assert.ok(console.log.calledWith('Deprecation Warning: faker.random.float is now located in faker.datatype.float'));\n      faker.datatype.float.restore();\n      console.log.restore();\n    });","file":"random.unit.js","skipped":false,"dir":"test"},{"name":"returns a random element in the array","suites":["random.js","arrayElement"],"updatePoint":{"line":57,"column":45},"line":57,"code":"    it('returns a random element in the array', function () {\n      var testArray = ['hello', 'to', 'you', 'my', 'friend'];\n      assert.ok(testArray.indexOf(faker.random.arrayElement(testArray)) > -1);\n    });","file":"random.unit.js","skipped":false,"dir":"test"},{"name":"returns a random element in the array when there is only 1","suites":["random.js","arrayElement"],"updatePoint":{"line":61,"column":66},"line":61,"code":"    it('returns a random element in the array when there is only 1', function () {\n      var testArray = ['hello'];\n      assert.ok(testArray.indexOf(faker.random.arrayElement(testArray)) > -1);\n    });","file":"random.unit.js","skipped":false,"dir":"test"},{"name":"returns a subset with random elements in the array","suites":["random.js","arrayElements"],"updatePoint":{"line":67,"column":58},"line":67,"code":"    it('returns a subset with random elements in the array', function () {\n      var testArray = ['hello', 'to', 'you', 'my', 'friend'];\n      var subset = faker.random.arrayElements(testArray); // Check length\n\n      assert.ok(subset.length >= 1 && subset.length <= testArray.length); // Check elements\n\n      subset.forEach(function (element) {\n        assert.ok(testArray.indexOf(element) > -1);\n      }); // Check uniqueness\n\n      subset.forEach(function (element) {\n        assert.ok(!this.hasOwnProperty(element));\n        this[element] = true;\n      }, {});\n    });","file":"random.unit.js","skipped":false,"dir":"test"},{"name":"returns a subset of fixed length with random elements in the array","suites":["random.js","arrayElements"],"updatePoint":{"line":82,"column":74},"line":82,"code":"    it('returns a subset of fixed length with random elements in the array', function () {\n      var testArray = ['hello', 'to', 'you', 'my', 'friend'];\n      var subset = faker.random.arrayElements(testArray, 3); // Check length\n\n      assert.ok(subset.length === 3); // Check elements\n\n      subset.forEach(function (element) {\n        assert.ok(testArray.indexOf(element) > -1);\n      }); // Check uniqueness\n\n      subset.forEach(function (element) {\n        assert.ok(!this.hasOwnProperty(element));\n        this[element] = true;\n      }, {});\n    });","file":"random.unit.js","skipped":false,"dir":"test"},{"name":"random.uuid() uses datatype module and prints deprecation warning","suites":["random.js","UUID"],"updatePoint":{"line":99,"column":73},"line":99,"code":"    it(\"random.uuid() uses datatype module and prints deprecation warning\", function () {\n      sinon.spy(console, 'log');\n      sinon.spy(faker.datatype, 'uuid');\n      faker.random.uuid();\n      assert.ok(faker.datatype.uuid.called);\n      assert.ok(console.log.calledWith('Deprecation Warning: faker.random.uuid is now located in faker.datatype.uuid'));\n      faker.datatype.uuid.restore();\n      console.log.restore();\n    });","file":"random.unit.js","skipped":false,"dir":"test"},{"name":"random.boolean() uses datatype module and prints deprecation warning","suites":["random.js","boolean"],"updatePoint":{"line":110,"column":76},"line":110,"code":"    it(\"random.boolean() uses datatype module and prints deprecation warning\", function () {\n      sinon.spy(console, 'log');\n      sinon.spy(faker.datatype, 'boolean');\n      faker.random.boolean();\n      assert.ok(faker.datatype.boolean.called);\n      assert.ok(console.log.calledWith('Deprecation Warning: faker.random.boolean is now located in faker.datatype.boolean'));\n      faker.datatype.boolean.restore();\n      console.log.restore();\n    });","file":"random.unit.js","skipped":false,"dir":"test"},{"name":"should generate a string","suites":["random.js","semver"],"updatePoint":{"line":122,"column":32},"line":122,"code":"    it('should generate a string', function () {\n      assert.ok(typeof semver === 'string');\n    });","file":"random.unit.js","skipped":false,"dir":"test"},{"name":"should generate a valid semver","suites":["random.js","semver"],"updatePoint":{"line":125,"column":38},"line":125,"code":"    it('should generate a valid semver', function () {\n      assert.ok(/^\\d+\\.\\d+\\.\\d+$/.test(semver));\n    });","file":"random.unit.js","skipped":false,"dir":"test"},{"name":"should return single letter when no count provided","suites":["random.js","alpha"],"updatePoint":{"line":131,"column":58},"line":131,"code":"    it('should return single letter when no count provided', function () {\n      assert.ok(alpha().length === 1);\n    });","file":"random.unit.js","skipped":false,"dir":"test"},{"name":"should return lowercase letter when no upcase option provided","suites":["random.js","alpha"],"updatePoint":{"line":134,"column":69},"line":134,"code":"    it('should return lowercase letter when no upcase option provided', function () {\n      assert.ok(alpha().match(/[a-z]/));\n    });","file":"random.unit.js","skipped":false,"dir":"test"},{"name":"should return uppercase when upcase option is true","suites":["random.js","alpha"],"updatePoint":{"line":137,"column":58},"line":137,"code":"    it('should return uppercase when upcase option is true', function () {\n      assert.ok(alpha({\n        upcase: true\n      }).match(/[A-Z]/));\n    });","file":"random.unit.js","skipped":false,"dir":"test"},{"name":"should generate many random letters","suites":["random.js","alpha"],"updatePoint":{"line":142,"column":43},"line":142,"code":"    it('should generate many random letters', function () {\n      assert.ok(alpha(5).length === 5);\n    });","file":"random.unit.js","skipped":false,"dir":"test"},{"name":"should be able to ban some characters","suites":["random.js","alpha"],"updatePoint":{"line":145,"column":45},"line":145,"code":"    it('should be able to ban some characters', function () {\n      var alphaText = alpha(5, {\n        bannedChars: ['a', 'p']\n      });\n      assert.ok(alphaText.length === 5);\n      assert.ok(alphaText.match(/[b-oq-z]/));\n    });","file":"random.unit.js","skipped":false,"dir":"test"},{"name":"should be able handle mistake in banned characters array","suites":["random.js","alpha"],"updatePoint":{"line":152,"column":64},"line":152,"code":"    it('should be able handle mistake in banned characters array', function () {\n      var alphaText = alpha(5, {\n        bannedChars: ['a', 'a', 'p']\n      });\n      assert.ok(alphaText.length === 5);\n      assert.ok(alphaText.match(/[b-oq-z]/));\n    });","file":"random.unit.js","skipped":false,"dir":"test"},{"name":"should generate single character when no additional argument was provided","suites":["random.js","alphaNumeric"],"updatePoint":{"line":162,"column":81},"line":162,"code":"    it('should generate single character when no additional argument was provided', function () {\n      assert.ok(alphaNumeric().length === 1);\n    });","file":"random.unit.js","skipped":false,"dir":"test"},{"name":"should generate many random characters","suites":["random.js","alphaNumeric"],"updatePoint":{"line":165,"column":46},"line":165,"code":"    it('should generate many random characters', function () {\n      assert.ok(alphaNumeric(5).length === 5);\n    });","file":"random.unit.js","skipped":false,"dir":"test"},{"name":"should be able to ban some characters","suites":["random.js","alphaNumeric"],"updatePoint":{"line":168,"column":45},"line":168,"code":"    it('should be able to ban some characters', function () {\n      var alphaText = alphaNumeric(5, {\n        bannedChars: ['a', 'p']\n      });\n      assert.ok(alphaText.length === 5);\n      assert.ok(alphaText.match(/[b-oq-z]/));\n    });","file":"random.unit.js","skipped":false,"dir":"test"},{"name":"should be able handle mistake in banned characters array","suites":["random.js","alphaNumeric"],"updatePoint":{"line":175,"column":64},"line":175,"code":"    it('should be able handle mistake in banned characters array', function () {\n      var alphaText = alphaNumeric(5, {\n        bannedChars: ['a', 'p', 'a']\n      });\n      assert.ok(alphaText.length === 5);\n      assert.ok(alphaText.match(/[b-oq-z]/));\n    });","file":"random.unit.js","skipped":false,"dir":"test"},{"name":"random.hexaDecimal() uses datatype module and prints deprecation warning","suites":["random.js","hexaDecimal"],"updatePoint":{"line":184,"column":80},"line":184,"code":"    it(\"random.hexaDecimal() uses datatype module and prints deprecation warning\", function () {\n      sinon.spy(console, 'log');\n      sinon.spy(faker.datatype, 'hexaDecimal');\n      faker.random.hexaDecimal();\n      assert.ok(faker.datatype.hexaDecimal.called);\n      assert.ok(console.log.calledWith('Deprecation Warning: faker.random.hexaDecimal is now located in faker.datatype.hexaDecimal'));\n      faker.datatype.hexaDecimal.restore();\n      console.log.restore();\n    });","file":"random.unit.js","skipped":false,"dir":"test"},{"name":"returns a random number without given min / max arguments","suites":["random.js","mersenne twister"],"updatePoint":{"line":195,"column":65},"line":195,"code":"    it(\"returns a random number without given min / max arguments\", function () {\n      var max = 10;\n      var randomNumber = mersenne.rand();\n      assert.ok(typeof randomNumber === 'number');\n    });","file":"random.unit.js","skipped":false,"dir":"test"},{"name":"throws an error when attempting to seed() a non-integer","suites":["random.js","mersenne twister"],"updatePoint":{"line":200,"column":63},"line":200,"code":"    it(\"throws an error when attempting to seed() a non-integer\", function () {\n      assert.throws(function () {\n        mersenne.seed('abc');\n      }, Error);\n    });","file":"random.unit.js","skipped":false,"dir":"test"},{"name":"throws an error when attempting to seed() a non-integer","suites":["random.js","mersenne twister"],"updatePoint":{"line":205,"column":63},"line":205,"code":"    it(\"throws an error when attempting to seed() a non-integer\", function () {\n      assert.throws(function () {\n        mersenne.seed_array('abc');\n      }, Error);\n    });","file":"random.unit.js","skipped":false,"dir":"test"},{"name":"returns unix fs directory full path","suites":["system.js","directoryPath()"],"updatePoint":{"line":11,"column":43},"line":11,"code":"    it(\"returns unix fs directory full path\", function () {\n      sinon.stub(faker.random, 'words').returns('24/7');\n      var directoryPath = faker.system.directoryPath();\n      assert.strictEqual(directoryPath.indexOf('/'), 0, 'generated directoryPath should start with /');\n      faker.random.words.restore();\n    });","file":"system.unit.js","skipped":false,"dir":"test"},{"name":"returns unix fs file full path","suites":["system.js","filePath()"],"updatePoint":{"line":19,"column":38},"line":19,"code":"    it(\"returns unix fs file full path\", function () {\n      sinon.stub(faker.random, 'words').returns('24/7');\n      var filePath = faker.system.filePath();\n      assert.strictEqual(filePath.indexOf('/'), 0, 'generated filePath should start with /');\n      faker.random.words.restore();\n    });","file":"system.unit.js","skipped":false,"dir":"test"},{"name":"returns filenames without system path separators","suites":["system.js","fileName()"],"updatePoint":{"line":27,"column":56},"line":27,"code":"    it(\"returns filenames without system path separators\", function () {\n      sinon.stub(faker.random, 'words').returns('24/7');\n      var fileName = faker.system.fileName();\n      assert.strictEqual(fileName.indexOf('/'), -1, 'generated fileNames should not have path separators');\n      faker.random.words.restore();\n    });","file":"system.unit.js","skipped":false,"dir":"test"},{"name":"returns filenames without system path separators","suites":["system.js","commonFileName()"],"updatePoint":{"line":35,"column":56},"line":35,"code":"    it(\"returns filenames without system path separators\", function () {\n      sinon.stub(faker.random, 'words').returns('24/7');\n      var fileName = faker.system.commonFileName();\n      assert.strictEqual(fileName.indexOf('/'), -1, 'generated commonFileNames should not have path separators');\n      faker.random.words.restore();\n    });","file":"system.unit.js","skipped":false,"dir":"test"},{"name":"returns the recent timestamp in Unix time format","suites":["time.js","recent()"],"updatePoint":{"line":12,"column":56},"line":12,"code":"    it(\"returns the recent timestamp in Unix time format\", function () {\n      var date = faker.time.recent();\n      assert.ok(typeof date === 'number'); // assert.ok(date == new Date().getTime());\n    });","file":"time.unit.js","skipped":false,"dir":"test"},{"name":"returns the recent timestamp in full time string format","suites":["time.js","recent()"],"updatePoint":{"line":16,"column":63},"line":16,"code":"    it(\"returns the recent timestamp in full time string format\", function () {\n      var date = faker.time.recent('wide');\n      assert.ok(typeof date === 'string'); // assert.ok(date == new Date().toTimeString());\n    });","file":"time.unit.js","skipped":false,"dir":"test"},{"name":"returns the recent timestamp in abbreviated string format","suites":["time.js","recent()"],"updatePoint":{"line":20,"column":65},"line":20,"code":"    it(\"returns the recent timestamp in abbreviated string format\", function () {\n      var date = faker.time.recent('abbr');\n      assert.ok(typeof date === 'string'); // assert.ok(date == new Date().toLocaleTimeString());\n    });","file":"time.unit.js","skipped":false,"dir":"test"},{"name":"is able to call a function with no arguments and return a result","suites":["unique.js","unique()"],"updatePoint":{"line":11,"column":72},"line":11,"code":"    it(\"is able to call a function with no arguments and return a result\", function () {\n      var result = faker.unique(faker.internet.email);\n      assert.strictEqual(typeof result, 'string');\n    });","file":"unique.unit.js","skipped":false,"dir":"test"},{"name":"is able to call a function with arguments and return a result","suites":["unique.js","unique()"],"updatePoint":{"line":15,"column":69},"line":15,"code":"    it(\"is able to call a function with arguments and return a result\", function () {\n      var result = faker.unique(faker.internet.email, ['a', 'b', 'c']); // third argument is provider, or domain for email\n\n      assert.ok(result.match(/\\@c/));\n    });","file":"unique.unit.js","skipped":false,"dir":"test"},{"name":"is able to call same function with arguments and return a result","suites":["unique.js","unique()"],"updatePoint":{"line":20,"column":72},"line":20,"code":"    it(\"is able to call same function with arguments and return a result\", function () {\n      var result = faker.unique(faker.internet.email, ['a', 'b', 'c']); // third argument is provider, or domain for email\n\n      assert.ok(result.match(/\\@c/));\n    });","file":"unique.unit.js","skipped":false,"dir":"test"},{"name":"is able to exclude results as array","suites":["unique.js","unique()"],"updatePoint":{"line":25,"column":43},"line":25,"code":"    it(\"is able to exclude results as array\", function () {\n      var result = faker.unique(faker.internet.protocol, [], {\n        exclude: ['https']\n      });\n      assert.strictEqual(result, 'http');\n    });","file":"unique.unit.js","skipped":false,"dir":"test"},{"name":"is able to limit unique call by maxTime in ms","suites":["unique.js","unique()"],"updatePoint":{"line":31,"column":53},"line":31,"code":"    it(\"is able to limit unique call by maxTime in ms\", function () {\n      var result;\n\n      try {\n        result = faker.unique(faker.internet.protocol, [], {\n          maxTime: 1,\n          maxRetries: 9999,\n          exclude: ['https', 'http']\n        });\n      } catch (err) {\n        assert.strictEqual(err.message.substr(0, 16), 'Exceeded maxTime');\n      }\n    });","file":"unique.unit.js","skipped":false,"dir":"test"},{"name":"is able to limit unique call by maxRetries","suites":["unique.js","unique()"],"updatePoint":{"line":44,"column":50},"line":44,"code":"    it(\"is able to limit unique call by maxRetries\", function () {\n      var result;\n\n      try {\n        result = faker.unique(faker.internet.protocol, [], {\n          maxTime: 5000,\n          maxRetries: 5,\n          exclude: ['https', 'http']\n        });\n      } catch (err) {\n        assert.strictEqual(err.message.substr(0, 19), 'Exceeded maxRetries');\n      }\n    });","file":"unique.unit.js","skipped":false,"dir":"test"},{"name":"is able to call last function with arguments and return a result","suites":["unique.js","unique()"],"updatePoint":{"line":57,"column":72},"line":57,"code":"    it(\"is able to call last function with arguments and return a result\", function () {\n      var result = faker.unique(faker.internet.email, ['a', 'b', 'c']); // third argument is provider, or domain for email\n\n      assert.ok(result.match(/\\@c/));\n    });","file":"unique.unit.js","skipped":false,"dir":"test"},{"name":"returns a random vehicle","suites":["vehicle.js","vehicle()"],"updatePoint":{"line":11,"column":32},"line":11,"code":"    it(\"returns a random vehicle\", function () {\n      sinon.stub(faker.vehicle, 'vehicle').returns('Ford Explorer');\n      var vehicle = faker.vehicle.vehicle();\n      assert.strictEqual(vehicle, 'Ford Explorer');\n      faker.vehicle.vehicle.restore();\n    });","file":"vehicle.unit.js","skipped":false,"dir":"test"},{"name":"returns random manufacturer","suites":["vehicle.js","manufacturer()"],"updatePoint":{"line":19,"column":35},"line":19,"code":"    it(\"returns random manufacturer\", function () {\n      sinon.stub(faker.vehicle, 'manufacturer').returns('Porsche');\n      var manufacturer = faker.vehicle.manufacturer();\n      assert.strictEqual(manufacturer, 'Porsche');\n      faker.vehicle.manufacturer.restore();\n    });","file":"vehicle.unit.js","skipped":false,"dir":"test"},{"name":"returns random vehicle type","suites":["vehicle.js","type()"],"updatePoint":{"line":27,"column":35},"line":27,"code":"    it(\"returns random vehicle type\", function () {\n      sinon.stub(faker.vehicle, 'type').returns('Minivan');\n      var type = faker.vehicle.type();\n      assert.strictEqual(type, 'Minivan');\n      faker.vehicle.type.restore();\n    });","file":"vehicle.unit.js","skipped":false,"dir":"test"},{"name":"returns a fuel type","suites":["vehicle.js","fuel()"],"updatePoint":{"line":35,"column":27},"line":35,"code":"    it(\"returns a fuel type\", function () {\n      sinon.stub(faker.vehicle, 'fuel').returns('Hybrid');\n      var fuel = faker.vehicle.fuel();\n      assert.strictEqual(fuel, 'Hybrid');\n      faker.vehicle.fuel.restore();\n    });","file":"vehicle.unit.js","skipped":false,"dir":"test"},{"name":"returns valid vin number","suites":["vehicle.js","vin()"],"updatePoint":{"line":43,"column":32},"line":43,"code":"    it(\"returns valid vin number\", function () {\n      var vin = faker.vehicle.vin();\n      assert.ok(vin.match(/^([A-HJ-NPR-Z0-9]{10}[A-HJ-NPR-Z0-9]{1}[A-HJ-NPR-Z0-9]{1}\\d{5})$/));\n    });","file":"vehicle.unit.js","skipped":false,"dir":"test"},{"name":"returns a random color","suites":["vehicle.js","color()"],"updatePoint":{"line":49,"column":30},"line":49,"code":"    it(\"returns a random color\", function () {\n      sinon.stub(faker.vehicle, 'color').returns('black');\n      var color = faker.vehicle.color();\n      assert.strictEqual(color, 'black');\n      faker.vehicle.color.restore();\n    });","file":"vehicle.unit.js","skipped":false,"dir":"test"},{"name":"returns a random vrm","suites":["vehicle.js","vrm()"],"updatePoint":{"line":57,"column":28},"line":57,"code":"    it(\"returns a random vrm\", function () {\n      sinon.stub(faker.vehicle, 'vrm').returns('MF59EEW');\n      var vrm = faker.vehicle.vrm();\n      assert.equal(vrm, 'MF59EEW');\n      faker.vehicle.vrm.restore();\n    });","file":"vehicle.unit.js","skipped":false,"dir":"test"},{"name":"returns a random type of bicycle","suites":["vehicle.js","bicycle()"],"updatePoint":{"line":65,"column":40},"line":65,"code":"    it(\"returns a random type of bicycle\", function () {\n      sinon.stub(faker.vehicle, 'bicycle').returns('Adventure Road Bicycle');\n      var bicycle = faker.vehicle.bicycle();\n      assert.equal(bicycle, 'Adventure Road Bicycle');\n      faker.vehicle.bicycle.restore();\n    });","file":"vehicle.unit.js","skipped":false,"dir":"test"},{"name":"optional length parameter returns expected result","suites":["word.js"],"updatePoint":{"line":16,"column":59},"line":16,"code":"      it(\"optional length parameter returns expected result\", function () {\n        var wordLength = 5;\n        var word = faker.word[method](wordLength);\n        assert.ok(faker.definitions.word[method].includes(word));\n        assert.ok(word.length == wordLength);\n      });","file":"word.unit.js","skipped":false,"dir":"test"}]}