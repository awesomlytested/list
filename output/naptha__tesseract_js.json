{"repo":"naptha/tesseract.js","url":"https://github.com/naptha/tesseract.js","branch":"master","configs":[{"package":"tesseract.js","lang":"js","dir":"tests","framework":"mocha","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"should detect OSD","suites":["detect()"],"updatePoint":{"line":10,"column":23,"index":201},"line":10,"code":"  it('should detect OSD', () => {\n    [{\n      name: 'cosmic.png',\n      ans: {\n        script: 'Latin'\n      }\n    }].forEach(async ({\n      name,\n      ans: {\n        script\n      }\n    }) => {\n      await worker.loadLanguage('osd');\n      await worker.initialize('osd');\n      const {\n        data: {\n          script: s\n        }\n      } = await worker.detect(`${IMAGE_PATH}/${name}`);\n      expect(s).to.be(script);\n    });\n  }).timeout(TIMEOUT);","file":"detect.test.js","skipped":false,"dir":"tests"},{"name":"should detect OSD (simplified interface)","suites":["detect()"],"updatePoint":{"line":34,"column":46,"index":715},"line":34,"code":"  it('should detect OSD (simplified interface)', () => {\n    [{\n      name: 'cosmic.png',\n      ans: {\n        script: 'Latin'\n      }\n    }].forEach(async ({\n      name,\n      ans: {\n        script\n      }\n    }) => {\n      const {\n        data: {\n          script: s\n        }\n      } = await Tesseract.detect(`${IMAGE_PATH}/${name}`, undefined, OPTIONS);\n      expect(s).to.be(script);\n    });\n  }).timeout(TIMEOUT);","file":"detect.test.js","skipped":false,"dir":"tests"},{"name":"should write and read text from FS (using FS only)","suites":["FS"],"updatePoint":{"line":11,"column":56,"index":249},"line":11,"code":"  it('should write and read text from FS (using FS only)', () => {\n    [SIMPLE_TEXT].forEach(async text => {\n      const path = 'tmp.txt';\n      await worker.FS('writeFile', [path, SIMPLE_TEXT]);\n      setTimeout(async () => {\n        const {\n          data\n        } = await worker.FS('readFile', [path]);\n        await worker.FS('unlink', [path]);\n        expect(data.toString()).to.be(text);\n      }, FS_WAIT);\n    });\n  }).timeout(TIMEOUT);","file":"FS.test.js","skipped":false,"dir":"tests"},{"name":"should write and read text from FS (using writeFile, readFile)","suites":["FS"],"updatePoint":{"line":24,"column":68,"index":706},"line":24,"code":"  it('should write and read text from FS (using writeFile, readFile)', () => {\n    [SIMPLE_TEXT].forEach(async text => {\n      const path = 'tmp2.txt';\n      await worker.writeText(path, SIMPLE_TEXT);\n      setTimeout(async () => {\n        const {\n          data\n        } = await worker.readText(path);\n        await worker.removeFile(path);\n        expect(data.toString()).to.be(text);\n      }, FS_WAIT);\n    });\n  }).timeout(TIMEOUT);","file":"FS.test.js","skipped":false,"dir":"tests"},{"name":"support  format","suites":["recognize()","should read bmp, jpg, png and pbm format images"],"updatePoint":{"line":13,"column":58,"index":358},"line":13,"code":"    FORMATS.forEach(format => it(`support ${format} format`, async () => {\n      await worker.initialize('eng');\n      const {\n        data: {\n          text\n        }\n      } = await worker.recognize(`${IMAGE_PATH}/simple.${format}`);\n      expect(text).to.be(SIMPLE_TEXT);\n    }).timeout(TIMEOUT));","file":"recognize.test.js","skipped":false,"dir":"tests"},{"name":"recongize  in base64","suites":["recognize()","should recognize base64 image"],"updatePoint":{"line":36,"column":43,"index":925},"line":36,"code":"    }) => it(`recongize ${format} in base64`, async () => {\n      await worker.initialize('eng');\n      const {\n        data: {\n          text\n        }\n      } = await worker.recognize(image);\n      expect(text).to.be(ans);\n    }).timeout(TIMEOUT));","file":"recognize.test.js","skipped":false,"dir":"tests"},{"name":"recongize  in base64","suites":["recognize()","should recognize base64 image (simplified interface)"],"updatePoint":{"line":59,"column":43,"index":1480},"line":59,"code":"    }) => it(`recongize ${format} in base64`, async () => {\n      const {\n        data: {\n          text\n        }\n      } = await Tesseract.recognize(image, undefined, OPTIONS);\n      expect(text).to.be(ans);\n    }).timeout(TIMEOUT));","file":"recognize.test.js","skipped":false,"dir":"tests"},{"name":"recongize ","suites":["recognize()","should recognize different langs"],"updatePoint":{"line":77,"column":31,"index":1898},"line":77,"code":"    }) => it(`recongize ${lang}`, async () => {\n      await worker.initialize(lang);\n      const {\n        data: {\n          text\n        }\n      } = await worker.recognize(`${IMAGE_PATH}/${name}`);\n      expect(text).to.be(ans);\n    }).timeout(TIMEOUT));","file":"recognize.test.js","skipped":false,"dir":"tests"},{"name":"recongize  image","suites":["recognize()","should support different complexity"],"updatePoint":{"line":104,"column":37,"index":2515},"line":104,"code":"    }) => it(`recongize ${desc} image`, async () => {\n      await worker.initialize('eng');\n      const {\n        data: {\n          text\n        }\n      } = await worker.recognize(`${IMAGE_PATH}/${name}`);\n      expect(text).to.be(ans);\n    }).timeout(TIMEOUT));","file":"recognize.test.js","skipped":false,"dir":"tests"},{"name":"recongize half ","suites":["recognize()","should recognize part of the image"],"updatePoint":{"line":129,"column":36,"index":3057},"line":129,"code":"    }) => it(`recongize half ${name}`, async () => {\n      await worker.initialize('eng');\n      const {\n        data: {\n          text\n        }\n      } = await worker.recognize(`${IMAGE_PATH}/${name}`, {\n        rectangle: {\n          top,\n          left,\n          width,\n          height\n        }\n      });\n      expect(text).to.be(ans);\n    }).timeout(TIMEOUT));","file":"recognize.test.js","skipped":false,"dir":"tests"},{"name":"support preserve_interword_spaces","suites":["recognize()","should work with selected parameters"],"updatePoint":{"line":147,"column":41,"index":3496},"line":147,"code":"    it('support preserve_interword_spaces', async () => {\n      await worker.initialize('eng');\n      await worker.setParameters({\n        preserve_interword_spaces: '1'\n      });\n      const {\n        data: {\n          text\n        }\n      } = await worker.recognize(`${IMAGE_PATH}/bill.png`);\n      expect(text).to.be(BILL_SPACED_TEXT);\n    }).timeout(TIMEOUT);","file":"recognize.test.js","skipped":false,"dir":"tests"},{"name":"support tessedit_char_whitelist","suites":["recognize()","should work with selected parameters"],"updatePoint":{"line":159,"column":39,"index":3858},"line":159,"code":"    it('support tessedit_char_whitelist', async () => {\n      await worker.initialize('eng');\n      await worker.setParameters({\n        tessedit_char_whitelist: 'Tess'\n      });\n      const {\n        data: {\n          text\n        }\n      } = await worker.recognize(`${IMAGE_PATH}/simple.png`);\n      expect(text).to.be(SIMPLE_WHITELIST_TEXT);\n    }).timeout(TIMEOUT);","file":"recognize.test.js","skipped":false,"dir":"tests"},{"name":"support PSM. mode","suites":["recognize()","should support all page seg modes"],"updatePoint":{"line":179,"column":38,"index":4401},"line":179,"code":"    }) => it(`support PSM.${name} mode`, async () => {\n      await worker.initialize('eng');\n      await worker.setParameters({\n        tessedit_pageseg_mode: mode\n      });\n      const {\n        data\n      } = await worker.recognize(`${IMAGE_PATH}/simple.png`);\n      expect(Object.keys(data).length).not.to.be(0);\n    }).timeout(TIMEOUT));","file":"recognize.test.js","skipped":false,"dir":"tests"},{"name":"support  format","suites":["recognize()","should support all page seg modes"],"updatePoint":{"line":191,"column":58,"index":4877},"line":191,"code":"    FORMATS.forEach(format => it(`support ${format} format`, async () => {\n      const buf = fs.readFileSync(path.join(__dirname, 'assets', 'images', `simple.${format}`));\n      await worker.initialize('eng');\n      const {\n        data: {\n          text\n        }\n      } = await worker.recognize(buf);\n      expect(text).to.be(SIMPLE_TEXT);\n    }).timeout(TIMEOUT));","file":"recognize.test.js","skipped":false,"dir":"tests"},{"name":"support  format","suites":["recognize()","should support all page seg modes"],"updatePoint":{"line":203,"column":58,"index":5359},"line":203,"code":"    FORMATS.forEach(format => it(`support ${format} format`, async () => {\n      const imageDOM = document.createElement('img');\n      imageDOM.setAttribute('src', `${IMAGE_PATH}/simple.${format}`);\n      await worker.initialize('eng');\n      const {\n        data: {\n          text\n        }\n      } = await worker.recognize(imageDOM);\n      expect(text).to.be(SIMPLE_TEXT);\n    }).timeout(TIMEOUT));","file":"recognize.test.js","skipped":false,"dir":"tests"},{"name":"support  format","suites":["recognize()","should support all page seg modes"],"updatePoint":{"line":216,"column":58,"index":5875},"line":216,"code":"    FORMATS.forEach(format => it(`support ${format} format`, async () => {\n      const videoDOM = document.createElement('video');\n      videoDOM.setAttribute('poster', `${IMAGE_PATH}/simple.${format}`);\n      await worker.initialize('eng');\n      const {\n        data: {\n          text\n        }\n      } = await worker.recognize(videoDOM);\n      expect(text).to.be(SIMPLE_TEXT);\n    }).timeout(TIMEOUT));","file":"recognize.test.js","skipped":false,"dir":"tests"},{"name":"support  format","suites":["recognize()","should support all page seg modes"],"updatePoint":{"line":249,"column":58,"index":7059},"line":249,"code":"    formats.forEach(format => it(`support ${format} format`, async () => {\n      await worker.initialize('eng');\n      const {\n        data: {\n          text\n        }\n      } = await worker.recognize(canvasDOM);\n      expect(text).to.be(SIMPLE_TEXT);\n    }).timeout(TIMEOUT));","file":"recognize.test.js","skipped":false,"dir":"tests"},{"name":"support  format","suites":["recognize()","should support all page seg modes"],"updatePoint":{"line":280,"column":58,"index":8156},"line":280,"code":"    formats.forEach(format => it(`support ${format} format`, async () => {\n      await worker.initialize('eng');\n      const {\n        data: {\n          text\n        }\n      } = await worker.recognize(offscreenCanvas);\n      expect(text).to.be(SIMPLE_TEXT);\n    }).timeout(TIMEOUT));","file":"recognize.test.js","skipped":false,"dir":"tests"},{"name":"support using  workers","suites":["scheduler","should speed up with more workers (running 10 jobs)"],"updatePoint":{"line":20,"column":61,"index":628},"line":20,"code":"    [1, 3, 5].forEach(num => it(`support using ${num} workers`, async () => {\n      const NUM_JOBS = 10;\n      const scheduler = createScheduler();\n      workers.slice(0, num).forEach(w => {\n        scheduler.addWorker(w);\n      });\n      const rets = await Promise.all(Array(NUM_JOBS).fill(0).map((_, idx) => scheduler.addJob('recognize', `${IMAGE_PATH}/${idx % 2 === 0 ? 'simple' : 'cosmic'}.png`)));\n      expect(rets.length).to.be(NUM_JOBS);\n    }).timeout(60000));","file":"scheduler.test.js","skipped":false,"dir":"tests"}]}