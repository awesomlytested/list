{"repo":"expressjs/body-parser","url":"https://github.com/expressjs/body-parser","branch":"master","configs":[{"package":"body-parser","lang":"js","dir":"test","framework":"mocha","pattern":"**/*.{js,ts}"}],"tests":[{"name":"should default to {}","suites":["bodyParser()"],"updatePoint":{"line":13,"column":26,"index":263},"line":13,"code":"  it('should default to {}', function (done) {\n    request(this.server).post('/').expect(200, '{}', done);\n  });","file":"body-parser.js","skipped":false,"dir":"test"},{"name":"should parse JSON","suites":["bodyParser()"],"updatePoint":{"line":16,"column":23,"index":373},"line":16,"code":"  it('should parse JSON', function (done) {\n    request(this.server).post('/').set('Content-Type', 'application/json').send('{\"user\":\"tobi\"}').expect(200, '{\"user\":\"tobi\"}', done);\n  });","file":"body-parser.js","skipped":false,"dir":"test"},{"name":"should parse x-www-form-urlencoded","suites":["bodyParser()"],"updatePoint":{"line":19,"column":40,"index":577},"line":19,"code":"  it('should parse x-www-form-urlencoded', function (done) {\n    request(this.server).post('/').set('Content-Type', 'application/x-www-form-urlencoded').send('user=tobi').expect(200, '{\"user\":\"tobi\"}', done);\n  });","file":"body-parser.js","skipped":false,"dir":"test"},{"name":"should handle duplicated middleware","suites":["bodyParser()"],"updatePoint":{"line":22,"column":41,"index":793},"line":22,"code":"  it('should handle duplicated middleware', function (done) {\n    var _bodyParser = bodyParser();\n\n    var server = http.createServer(function (req, res) {\n      _bodyParser(req, res, function (err0) {\n        _bodyParser(req, res, function (err1) {\n          var err = err0 || err1;\n          res.statusCode = err ? err.status || 500 : 200;\n          res.end(err ? err.message : JSON.stringify(req.body));\n        });\n      });\n    });\n    request(server).post('/').set('Content-Type', 'application/json').send('{\"user\":\"tobi\"}').expect(200, '{\"user\":\"tobi\"}', done);\n  });","file":"body-parser.js","skipped":false,"dir":"test"},{"name":"should parse JSON","suites":["bodyParser()","with type option"],"updatePoint":{"line":71,"column":25,"index":2487},"line":71,"code":"    it('should parse JSON', function (done) {\n      request(this.server).post('/').set('Content-Type', 'application/json').send('{\"user\":\"tobi\"}').expect(200, '{\"user\":\"tobi\"}', done);\n    });","file":"body-parser.js","skipped":false,"dir":"test"},{"name":"should parse x-www-form-urlencoded","suites":["bodyParser()","with type option"],"updatePoint":{"line":74,"column":42,"index":2697},"line":74,"code":"    it('should parse x-www-form-urlencoded', function (done) {\n      request(this.server).post('/').set('Content-Type', 'application/x-www-form-urlencoded').send('user=tobi').expect(200, '{\"user\":\"tobi\"}', done);\n    });","file":"body-parser.js","skipped":false,"dir":"test"},{"name":"should apply to json","suites":["bodyParser()","with verify option"],"updatePoint":{"line":79,"column":28,"index":2957},"line":79,"code":"    it('should apply to json', function (done) {\n      var server = createServer({\n        verify: function (req, res, buf) {\n          if (buf[0] === 0x20) throw new Error('no leading space');\n        }\n      });\n      request(server).post('/').set('Content-Type', 'application/json').send(' {\"user\":\"tobi\"}').expect(403, '[entity.verify.failed] no leading space', done);\n    });","file":"body-parser.js","skipped":false,"dir":"test"},{"name":"should apply to urlencoded","suites":["bodyParser()","with verify option"],"updatePoint":{"line":87,"column":34,"index":3344},"line":87,"code":"    it('should apply to urlencoded', function (done) {\n      var server = createServer({\n        verify: function (req, res, buf) {\n          if (buf[0] === 0x20) throw new Error('no leading space');\n        }\n      });\n      request(server).post('/').set('Content-Type', 'application/x-www-form-urlencoded').send(' user=tobi').expect(403, '[entity.verify.failed] no leading space', done);\n    });","file":"body-parser.js","skipped":false,"dir":"test"},{"name":"should parse JSON","suites":["bodyParser.json()"],"updatePoint":{"line":12,"column":23,"index":245},"line":12,"code":"  it('should parse JSON', function (done) {\n    request(createServer()).post('/').set('Content-Type', 'application/json').send('{\"user\":\"tobi\"}').expect(200, '{\"user\":\"tobi\"}', done);\n  });","file":"json.js","skipped":false,"dir":"test"},{"name":"should handle Content-Length: 0","suites":["bodyParser.json()"],"updatePoint":{"line":15,"column":37,"index":449},"line":15,"code":"  it('should handle Content-Length: 0', function (done) {\n    request(createServer()).get('/').set('Content-Type', 'application/json').set('Content-Length', '0').expect(200, '{}', done);\n  });","file":"json.js","skipped":false,"dir":"test"},{"name":"should handle empty message-body","suites":["bodyParser.json()"],"updatePoint":{"line":18,"column":38,"index":643},"line":18,"code":"  it('should handle empty message-body', function (done) {\n    request(createServer()).get('/').set('Content-Type', 'application/json').set('Transfer-Encoding', 'chunked').expect(200, '{}', done);\n  });","file":"json.js","skipped":false,"dir":"test"},{"name":"should handle no message-body","suites":["bodyParser.json()"],"updatePoint":{"line":21,"column":35,"index":843},"line":21,"code":"  it('should handle no message-body', function (done) {\n    request(createServer()).get('/').set('Content-Type', 'application/json').unset('Transfer-Encoding').expect(200, '{}', done);\n  });","file":"json.js","skipped":false,"dir":"test"},{"name":"should 400 when invalid content-length","suites":["bodyParser.json()"],"updatePoint":{"line":24,"column":44,"index":1043},"line":24,"code":"  it('should 400 when invalid content-length', function (done) {\n    var jsonParser = bodyParser.json();\n    var server = createServer(function (req, res, next) {\n      req.headers['content-length'] = '20'; // bad length\n\n      jsonParser(req, res, next);\n    });\n    request(server).post('/').set('Content-Type', 'application/json').send('{\"str\":').expect(400, /content length/, done);\n  });","file":"json.js","skipped":false,"dir":"test"},{"name":"should handle duplicated middleware","suites":["bodyParser.json()"],"updatePoint":{"line":33,"column":41,"index":1433},"line":33,"code":"  it('should handle duplicated middleware', function (done) {\n    var jsonParser = bodyParser.json();\n    var server = createServer(function (req, res, next) {\n      jsonParser(req, res, function (err) {\n        if (err) return next(err);\n        jsonParser(req, res, next);\n      });\n    });\n    request(server).post('/').set('Content-Type', 'application/json').send('{\"user\":\"tobi\"}').expect(200, '{\"user\":\"tobi\"}', done);\n  });","file":"json.js","skipped":false,"dir":"test"},{"name":"should 400 for bad token","suites":["bodyParser.json()","when JSON is invalid"],"updatePoint":{"line":47,"column":32,"index":1973},"line":47,"code":"    it('should 400 for bad token', function (done) {\n      request(this.server).post('/').set('Content-Type', 'application/json').send('{:').expect(400, '[entity.parse.failed] ' + parseError('{:'), done);\n    });","file":"json.js","skipped":false,"dir":"test"},{"name":"should 400 for incomplete","suites":["bodyParser.json()","when JSON is invalid"],"updatePoint":{"line":50,"column":33,"index":2187},"line":50,"code":"    it('should 400 for incomplete', function (done) {\n      request(this.server).post('/').set('Content-Type', 'application/json').send('{\"user\"').expect(400, '[entity.parse.failed] ' + parseError('{\"user\"'), done);\n    });","file":"json.js","skipped":false,"dir":"test"},{"name":"should include original body on error object","suites":["bodyParser.json()","when JSON is invalid"],"updatePoint":{"line":53,"column":52,"index":2430},"line":53,"code":"    it('should include original body on error object', function (done) {\n      request(this.server).post('/').set('Content-Type', 'application/json').set('X-Error-Property', 'body').send(' {\"user\"').expect(400, ' {\"user\"', done);\n    });","file":"json.js","skipped":false,"dir":"test"},{"name":"should 413 when over limit with Content-Length","suites":["bodyParser.json()","with limit option"],"updatePoint":{"line":58,"column":54,"index":2722},"line":58,"code":"    it('should 413 when over limit with Content-Length', function (done) {\n      var buf = Buffer.alloc(1024, '.');\n      request(createServer({\n        limit: '1kb'\n      })).post('/').set('Content-Type', 'application/json').set('Content-Length', '1034').send(JSON.stringify({\n        str: buf.toString()\n      })).expect(413, '[entity.too.large] request entity too large', done);\n    });","file":"json.js","skipped":false,"dir":"test"},{"name":"should 413 when over limit with chunked encoding","suites":["bodyParser.json()","with limit option"],"updatePoint":{"line":66,"column":56,"index":3114},"line":66,"code":"    it('should 413 when over limit with chunked encoding', function (done) {\n      var buf = Buffer.alloc(1024, '.');\n      var server = createServer({\n        limit: '1kb'\n      });\n      var test = request(server).post('/');\n      test.set('Content-Type', 'application/json');\n      test.set('Transfer-Encoding', 'chunked');\n      test.write('{\"str\":');\n      test.write('\"' + buf.toString() + '\"}');\n      test.expect(413, done);\n    });","file":"json.js","skipped":false,"dir":"test"},{"name":"should 413 when inflated body over limit","suites":["bodyParser.json()","with limit option"],"updatePoint":{"line":78,"column":48,"index":3547},"line":78,"code":"    it('should 413 when inflated body over limit', function (done) {\n      var server = createServer({\n        limit: '1kb'\n      });\n      var test = request(server).post('/');\n      test.set('Content-Encoding', 'gzip');\n      test.set('Content-Type', 'application/json');\n      test.write(Buffer.from('1f8b080000000000000aab562a2e2952b252d21b05a360148c58a0540b0066f7ce1e0a040000', 'hex'));\n      test.expect(413, done);\n    });","file":"json.js","skipped":false,"dir":"test"},{"name":"should accept number of bytes","suites":["bodyParser.json()","with limit option"],"updatePoint":{"line":88,"column":37,"index":3966},"line":88,"code":"    it('should accept number of bytes', function (done) {\n      var buf = Buffer.alloc(1024, '.');\n      request(createServer({\n        limit: 1024\n      })).post('/').set('Content-Type', 'application/json').send(JSON.stringify({\n        str: buf.toString()\n      })).expect(413, done);\n    });","file":"json.js","skipped":false,"dir":"test"},{"name":"should not change when options altered","suites":["bodyParser.json()","with limit option"],"updatePoint":{"line":96,"column":46,"index":4270},"line":96,"code":"    it('should not change when options altered', function (done) {\n      var buf = Buffer.alloc(1024, '.');\n      var options = {\n        limit: '1kb'\n      };\n      var server = createServer(options);\n      options.limit = '100kb';\n      request(server).post('/').set('Content-Type', 'application/json').send(JSON.stringify({\n        str: buf.toString()\n      })).expect(413, done);\n    });","file":"json.js","skipped":false,"dir":"test"},{"name":"should not hang response","suites":["bodyParser.json()","with limit option"],"updatePoint":{"line":107,"column":32,"index":4648},"line":107,"code":"    it('should not hang response', function (done) {\n      var buf = Buffer.alloc(10240, '.');\n      var server = createServer({\n        limit: '8kb'\n      });\n      var test = request(server).post('/');\n      test.set('Content-Type', 'application/json');\n      test.write(buf);\n      test.write(buf);\n      test.write(buf);\n      test.expect(413, done);\n    });","file":"json.js","skipped":false,"dir":"test"},{"name":"should not accept content-encoding","suites":["bodyParser.json()","with inflate option","when false"],"updatePoint":{"line":127,"column":44,"index":5229},"line":127,"code":"      it('should not accept content-encoding', function (done) {\n        var test = request(this.server).post('/');\n        test.set('Content-Encoding', 'gzip');\n        test.set('Content-Type', 'application/json');\n        test.write(Buffer.from('1f8b080000000000000bab56ca4bcc4d55b2527ab16e97522d00515be1cc0e000000', 'hex'));\n        test.expect(415, '[encoding.unsupported] content encoding unsupported', done);\n      });","file":"json.js","skipped":false,"dir":"test"},{"name":"should accept content-encoding","suites":["bodyParser.json()","with inflate option","when true"],"updatePoint":{"line":141,"column":40,"index":5808},"line":141,"code":"      it('should accept content-encoding', function (done) {\n        var test = request(this.server).post('/');\n        test.set('Content-Encoding', 'gzip');\n        test.set('Content-Type', 'application/json');\n        test.write(Buffer.from('1f8b080000000000000bab56ca4bcc4d55b2527ab16e97522d00515be1cc0e000000', 'hex'));\n        test.expect(200, '{\"name\":\"论\"}', done);\n      });","file":"json.js","skipped":false,"dir":"test"},{"name":"should 400 on primitives","suites":["bodyParser.json()","with strict option","when undefined"],"updatePoint":{"line":155,"column":34,"index":6365},"line":155,"code":"      it('should 400 on primitives', function (done) {\n        request(this.server).post('/').set('Content-Type', 'application/json').send('true').expect(400, '[entity.parse.failed] ' + parseError('#rue').replace('#', 't'), done);\n      });","file":"json.js","skipped":false,"dir":"test"},{"name":"should parse primitives","suites":["bodyParser.json()","with strict option","when false"],"updatePoint":{"line":165,"column":33,"index":6764},"line":165,"code":"      it('should parse primitives', function (done) {\n        request(this.server).post('/').set('Content-Type', 'application/json').send('true').expect(200, 'true', done);\n      });","file":"json.js","skipped":false,"dir":"test"},{"name":"should not parse primitives","suites":["bodyParser.json()","with strict option","when true"],"updatePoint":{"line":175,"column":37,"index":7108},"line":175,"code":"      it('should not parse primitives', function (done) {\n        request(this.server).post('/').set('Content-Type', 'application/json').send('true').expect(400, '[entity.parse.failed] ' + parseError('#rue').replace('#', 't'), done);\n      });","file":"json.js","skipped":false,"dir":"test"},{"name":"should not parse primitives with leading whitespaces","suites":["bodyParser.json()","with strict option","when true"],"updatePoint":{"line":178,"column":62,"index":7377},"line":178,"code":"      it('should not parse primitives with leading whitespaces', function (done) {\n        request(this.server).post('/').set('Content-Type', 'application/json').send('    true').expect(400, '[entity.parse.failed] ' + parseError('    #rue').replace('#', 't'), done);\n      });","file":"json.js","skipped":false,"dir":"test"},{"name":"should allow leading whitespaces in JSON","suites":["bodyParser.json()","with strict option","when true"],"updatePoint":{"line":181,"column":50,"index":7642},"line":181,"code":"      it('should allow leading whitespaces in JSON', function (done) {\n        request(this.server).post('/').set('Content-Type', 'application/json').send('   { \"user\": \"tobi\" }').expect(200, '{\"user\":\"tobi\"}', done);\n      });","file":"json.js","skipped":false,"dir":"test"},{"name":"should include correct message in stack trace","suites":["bodyParser.json()","with strict option","when true"],"updatePoint":{"line":184,"column":55,"index":7875},"line":184,"code":"      it('should include correct message in stack trace', function (done) {\n        request(this.server).post('/').set('Content-Type', 'application/json').set('X-Error-Property', 'stack').send('true').expect(400).expect(shouldContainInBody(parseError('#rue').replace('#', 't'))).end(done);\n      });","file":"json.js","skipped":false,"dir":"test"},{"name":"should parse JSON for custom type","suites":["bodyParser.json()","with type option","when \"application/vnd.api+json\""],"updatePoint":{"line":196,"column":43,"index":8413},"line":196,"code":"      it('should parse JSON for custom type', function (done) {\n        request(this.server).post('/').set('Content-Type', 'application/vnd.api+json').send('{\"user\":\"tobi\"}').expect(200, '{\"user\":\"tobi\"}', done);\n      });","file":"json.js","skipped":false,"dir":"test"},{"name":"should ignore standard type","suites":["bodyParser.json()","with type option","when \"application/vnd.api+json\""],"updatePoint":{"line":199,"column":37,"index":8630},"line":199,"code":"      it('should ignore standard type', function (done) {\n        request(this.server).post('/').set('Content-Type', 'application/json').send('{\"user\":\"tobi\"}').expect(200, '{}', done);\n      });","file":"json.js","skipped":false,"dir":"test"},{"name":"should parse JSON for \"application/json\"","suites":["bodyParser.json()","with type option","when [\"application/json\", \"application/vnd.api+json\"]"],"updatePoint":{"line":209,"column":50,"index":9082},"line":209,"code":"      it('should parse JSON for \"application/json\"', function (done) {\n        request(this.server).post('/').set('Content-Type', 'application/json').send('{\"user\":\"tobi\"}').expect(200, '{\"user\":\"tobi\"}', done);\n      });","file":"json.js","skipped":false,"dir":"test"},{"name":"should parse JSON for \"application/vnd.api+json\"","suites":["bodyParser.json()","with type option","when [\"application/json\", \"application/vnd.api+json\"]"],"updatePoint":{"line":212,"column":58,"index":9312},"line":212,"code":"      it('should parse JSON for \"application/vnd.api+json\"', function (done) {\n        request(this.server).post('/').set('Content-Type', 'application/vnd.api+json').send('{\"user\":\"tobi\"}').expect(200, '{\"user\":\"tobi\"}', done);\n      });","file":"json.js","skipped":false,"dir":"test"},{"name":"should ignore \"application/x-json\"","suites":["bodyParser.json()","with type option","when [\"application/json\", \"application/vnd.api+json\"]"],"updatePoint":{"line":215,"column":44,"index":9536},"line":215,"code":"      it('should ignore \"application/x-json\"', function (done) {\n        request(this.server).post('/').set('Content-Type', 'application/x-json').send('{\"user\":\"tobi\"}').expect(200, '{}', done);\n      });","file":"json.js","skipped":false,"dir":"test"},{"name":"should parse when truthy value returned","suites":["bodyParser.json()","with type option","when a function"],"updatePoint":{"line":220,"column":49,"index":9800},"line":220,"code":"      it('should parse when truthy value returned', function (done) {\n        var server = createServer({\n          type: accept\n        });\n\n        function accept(req) {\n          return req.headers['content-type'] === 'application/vnd.api+json';\n        }\n\n        request(server).post('/').set('Content-Type', 'application/vnd.api+json').send('{\"user\":\"tobi\"}').expect(200, '{\"user\":\"tobi\"}', done);\n      });","file":"json.js","skipped":false,"dir":"test"},{"name":"should work without content-type","suites":["bodyParser.json()","with type option","when a function"],"updatePoint":{"line":231,"column":42,"index":10208},"line":231,"code":"      it('should work without content-type', function (done) {\n        var server = createServer({\n          type: accept\n        });\n\n        function accept(req) {\n          return true;\n        }\n\n        var test = request(server).post('/');\n        test.write('{\"user\":\"tobi\"}');\n        test.expect(200, '{\"user\":\"tobi\"}', done);\n      });","file":"json.js","skipped":false,"dir":"test"},{"name":"should not invoke without a body","suites":["bodyParser.json()","with type option","when a function"],"updatePoint":{"line":244,"column":42,"index":10554},"line":244,"code":"      it('should not invoke without a body', function (done) {\n        var server = createServer({\n          type: accept\n        });\n\n        function accept(req) {\n          throw new Error('oops!');\n        }\n\n        request(server).get('/').expect(200, done);\n      });","file":"json.js","skipped":false,"dir":"test"},{"name":"should assert value if function","suites":["bodyParser.json()","with verify option"],"updatePoint":{"line":258,"column":39,"index":10887},"line":258,"code":"    it('should assert value if function', function () {\n      assert.throws(createServer.bind(null, {\n        verify: 'lol'\n      }), /TypeError: option verify must be function/);\n    });","file":"json.js","skipped":false,"dir":"test"},{"name":"should error from verify","suites":["bodyParser.json()","with verify option"],"updatePoint":{"line":263,"column":32,"index":11068},"line":263,"code":"    it('should error from verify', function (done) {\n      var server = createServer({\n        verify: function (req, res, buf) {\n          if (buf[0] === 0x5b) throw new Error('no arrays');\n        }\n      });\n      request(server).post('/').set('Content-Type', 'application/json').send('[\"tobi\"]').expect(403, '[entity.verify.failed] no arrays', done);\n    });","file":"json.js","skipped":false,"dir":"test"},{"name":"should allow custom codes","suites":["bodyParser.json()","with verify option"],"updatePoint":{"line":271,"column":33,"index":11432},"line":271,"code":"    it('should allow custom codes', function (done) {\n      var server = createServer({\n        verify: function (req, res, buf) {\n          if (buf[0] !== 0x5b) return;\n          var err = new Error('no arrays');\n          err.status = 400;\n          throw err;\n        }\n      });\n      request(server).post('/').set('Content-Type', 'application/json').send('[\"tobi\"]').expect(400, '[entity.verify.failed] no arrays', done);\n    });","file":"json.js","skipped":false,"dir":"test"},{"name":"should allow custom type","suites":["bodyParser.json()","with verify option"],"updatePoint":{"line":282,"column":32,"index":11866},"line":282,"code":"    it('should allow custom type', function (done) {\n      var server = createServer({\n        verify: function (req, res, buf) {\n          if (buf[0] !== 0x5b) return;\n          var err = new Error('no arrays');\n          err.type = 'foo.bar';\n          throw err;\n        }\n      });\n      request(server).post('/').set('Content-Type', 'application/json').send('[\"tobi\"]').expect(403, '[foo.bar] no arrays', done);\n    });","file":"json.js","skipped":false,"dir":"test"},{"name":"should include original body on error object","suites":["bodyParser.json()","with verify option"],"updatePoint":{"line":293,"column":52,"index":12311},"line":293,"code":"    it('should include original body on error object', function (done) {\n      var server = createServer({\n        verify: function (req, res, buf) {\n          if (buf[0] === 0x5b) throw new Error('no arrays');\n        }\n      });\n      request(server).post('/').set('Content-Type', 'application/json').set('X-Error-Property', 'body').send('[\"tobi\"]').expect(403, '[\"tobi\"]', done);\n    });","file":"json.js","skipped":false,"dir":"test"},{"name":"should allow pass-through","suites":["bodyParser.json()","with verify option"],"updatePoint":{"line":301,"column":33,"index":12683},"line":301,"code":"    it('should allow pass-through', function (done) {\n      var server = createServer({\n        verify: function (req, res, buf) {\n          if (buf[0] === 0x5b) throw new Error('no arrays');\n        }\n      });\n      request(server).post('/').set('Content-Type', 'application/json').send('{\"user\":\"tobi\"}').expect(200, '{\"user\":\"tobi\"}', done);\n    });","file":"json.js","skipped":false,"dir":"test"},{"name":"should work with different charsets","suites":["bodyParser.json()","with verify option"],"updatePoint":{"line":309,"column":43,"index":13047},"line":309,"code":"    it('should work with different charsets', function (done) {\n      var server = createServer({\n        verify: function (req, res, buf) {\n          if (buf[0] === 0x5b) throw new Error('no arrays');\n        }\n      });\n      var test = request(server).post('/');\n      test.set('Content-Type', 'application/json; charset=utf-16');\n      test.write(Buffer.from('feff007b0022006e0061006d00650022003a00228bba0022007d', 'hex'));\n      test.expect(200, '{\"name\":\"论\"}', done);\n    });","file":"json.js","skipped":false,"dir":"test"},{"name":"should 415 on unknown charset prior to verify","suites":["bodyParser.json()","with verify option"],"updatePoint":{"line":320,"column":53,"index":13539},"line":320,"code":"    it('should 415 on unknown charset prior to verify', function (done) {\n      var server = createServer({\n        verify: function (req, res, buf) {\n          throw new Error('unexpected verify call');\n        }\n      });\n      var test = request(server).post('/');\n      test.set('Content-Type', 'application/json; charset=x-bogus');\n      test.write(Buffer.from('00000000', 'hex'));\n      test.expect(415, '[charset.unsupported] unsupported charset \"X-BOGUS\"', done);\n    });","file":"json.js","skipped":false,"dir":"test"},{"name":"should parse utf-8","suites":["bodyParser.json()","charset"],"updatePoint":{"line":336,"column":26,"index":14103},"line":336,"code":"    it('should parse utf-8', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Type', 'application/json; charset=utf-8');\n      test.write(Buffer.from('7b226e616d65223a22e8aeba227d', 'hex'));\n      test.expect(200, '{\"name\":\"论\"}', done);\n    });","file":"json.js","skipped":false,"dir":"test"},{"name":"should parse utf-16","suites":["bodyParser.json()","charset"],"updatePoint":{"line":342,"column":27,"index":14391},"line":342,"code":"    it('should parse utf-16', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Type', 'application/json; charset=utf-16');\n      test.write(Buffer.from('feff007b0022006e0061006d00650022003a00228bba0022007d', 'hex'));\n      test.expect(200, '{\"name\":\"论\"}', done);\n    });","file":"json.js","skipped":false,"dir":"test"},{"name":"should parse when content-length != char length","suites":["bodyParser.json()","charset"],"updatePoint":{"line":348,"column":55,"index":14732},"line":348,"code":"    it('should parse when content-length != char length', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Type', 'application/json; charset=utf-8');\n      test.set('Content-Length', '13');\n      test.write(Buffer.from('7b2274657374223a22c3a5227d', 'hex'));\n      test.expect(200, '{\"test\":\"å\"}', done);\n    });","file":"json.js","skipped":false,"dir":"test"},{"name":"should default to utf-8","suites":["bodyParser.json()","charset"],"updatePoint":{"line":355,"column":31,"index":15062},"line":355,"code":"    it('should default to utf-8', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Type', 'application/json');\n      test.write(Buffer.from('7b226e616d65223a22e8aeba227d', 'hex'));\n      test.expect(200, '{\"name\":\"论\"}', done);\n    });","file":"json.js","skipped":false,"dir":"test"},{"name":"should fail on unknown charset","suites":["bodyParser.json()","charset"],"updatePoint":{"line":361,"column":38,"index":15346},"line":361,"code":"    it('should fail on unknown charset', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Type', 'application/json; charset=koi8-r');\n      test.write(Buffer.from('7b226e616d65223a22cec5d4227d', 'hex'));\n      test.expect(415, '[charset.unsupported] unsupported charset \"KOI8-R\"', done);\n    });","file":"json.js","skipped":false,"dir":"test"},{"name":"should parse without encoding","suites":["bodyParser.json()","encoding"],"updatePoint":{"line":374,"column":37,"index":15825},"line":374,"code":"    it('should parse without encoding', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Type', 'application/json');\n      test.write(Buffer.from('7b226e616d65223a22e8aeba227d', 'hex'));\n      test.expect(200, '{\"name\":\"论\"}', done);\n    });","file":"json.js","skipped":false,"dir":"test"},{"name":"should support identity encoding","suites":["bodyParser.json()","encoding"],"updatePoint":{"line":380,"column":40,"index":16111},"line":380,"code":"    it('should support identity encoding', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Encoding', 'identity');\n      test.set('Content-Type', 'application/json');\n      test.write(Buffer.from('7b226e616d65223a22e8aeba227d', 'hex'));\n      test.expect(200, '{\"name\":\"论\"}', done);\n    });","file":"json.js","skipped":false,"dir":"test"},{"name":"should support gzip encoding","suites":["bodyParser.json()","encoding"],"updatePoint":{"line":387,"column":36,"index":16441},"line":387,"code":"    it('should support gzip encoding', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Encoding', 'gzip');\n      test.set('Content-Type', 'application/json');\n      test.write(Buffer.from('1f8b080000000000000bab56ca4bcc4d55b2527ab16e97522d00515be1cc0e000000', 'hex'));\n      test.expect(200, '{\"name\":\"论\"}', done);\n    });","file":"json.js","skipped":false,"dir":"test"},{"name":"should support deflate encoding","suites":["bodyParser.json()","encoding"],"updatePoint":{"line":394,"column":39,"index":16810},"line":394,"code":"    it('should support deflate encoding', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Encoding', 'deflate');\n      test.set('Content-Type', 'application/json');\n      test.write(Buffer.from('789cab56ca4bcc4d55b2527ab16e97522d00274505ac', 'hex'));\n      test.expect(200, '{\"name\":\"论\"}', done);\n    });","file":"json.js","skipped":false,"dir":"test"},{"name":"should be case-insensitive","suites":["bodyParser.json()","encoding"],"updatePoint":{"line":401,"column":34,"index":17153},"line":401,"code":"    it('should be case-insensitive', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Encoding', 'GZIP');\n      test.set('Content-Type', 'application/json');\n      test.write(Buffer.from('1f8b080000000000000bab56ca4bcc4d55b2527ab16e97522d00515be1cc0e000000', 'hex'));\n      test.expect(200, '{\"name\":\"论\"}', done);\n    });","file":"json.js","skipped":false,"dir":"test"},{"name":"should 415 on unknown encoding","suites":["bodyParser.json()","encoding"],"updatePoint":{"line":408,"column":38,"index":17521},"line":408,"code":"    it('should 415 on unknown encoding', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Encoding', 'nulls');\n      test.set('Content-Type', 'application/json');\n      test.write(Buffer.from('000000000000', 'hex'));\n      test.expect(415, '[encoding.unsupported] unsupported content encoding \"nulls\"', done);\n    });","file":"json.js","skipped":false,"dir":"test"},{"name":"should 400 on malformed encoding","suites":["bodyParser.json()","encoding"],"updatePoint":{"line":415,"column":40,"index":17883},"line":415,"code":"    it('should 400 on malformed encoding', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Encoding', 'gzip');\n      test.set('Content-Type', 'application/json');\n      test.write(Buffer.from('1f8b080000000000000bab56cc4d55b2527ab16e97522d00515be1cc0e000000', 'hex'));\n      test.expect(400, done);\n    });","file":"json.js","skipped":false,"dir":"test"},{"name":"should 413 when inflated value exceeds limit","suites":["bodyParser.json()","encoding"],"updatePoint":{"line":422,"column":52,"index":18245},"line":422,"code":"    it('should 413 when inflated value exceeds limit', function (done) {\n      // gzip'd data exceeds 1kb, but deflated below 1kb\n      var test = request(this.server).post('/');\n      test.set('Content-Encoding', 'gzip');\n      test.set('Content-Type', 'application/json');\n      test.write(Buffer.from('1f8b080000000000000bedc1010d000000c2a0f74f6d0f071400000000000000', 'hex'));\n      test.write(Buffer.from('0000000000000000000000000000000000000000000000000000000000000000', 'hex'));\n      test.write(Buffer.from('0000000000000000004f0625b3b71650c30000', 'hex'));\n      test.expect(413, done);\n    });","file":"json.js","skipped":false,"dir":"test"},{"name":"should parse application/octet-stream","suites":["bodyParser.raw()"],"updatePoint":{"line":15,"column":43,"index":327},"line":15,"code":"  it('should parse application/octet-stream', function (done) {\n    request(this.server).post('/').set('Content-Type', 'application/octet-stream').send('the user is tobi').expect(200, 'buf:746865207573657220697320746f6269', done);\n  });","file":"raw.js","skipped":false,"dir":"test"},{"name":"should 400 when invalid content-length","suites":["bodyParser.raw()"],"updatePoint":{"line":18,"column":44,"index":565},"line":18,"code":"  it('should 400 when invalid content-length', function (done) {\n    var rawParser = bodyParser.raw();\n    var server = createServer(function (req, res, next) {\n      req.headers['content-length'] = '20'; // bad length\n\n      rawParser(req, res, next);\n    });\n    request(server).post('/').set('Content-Type', 'application/octet-stream').send('stuff').expect(400, /content length/, done);\n  });","file":"raw.js","skipped":false,"dir":"test"},{"name":"should handle Content-Length: 0","suites":["bodyParser.raw()"],"updatePoint":{"line":27,"column":37,"index":954},"line":27,"code":"  it('should handle Content-Length: 0', function (done) {\n    request(this.server).post('/').set('Content-Type', 'application/octet-stream').set('Content-Length', '0').expect(200, 'buf:', done);\n  });","file":"raw.js","skipped":false,"dir":"test"},{"name":"should handle empty message-body","suites":["bodyParser.raw()"],"updatePoint":{"line":30,"column":38,"index":1156},"line":30,"code":"  it('should handle empty message-body', function (done) {\n    request(this.server).post('/').set('Content-Type', 'application/octet-stream').set('Transfer-Encoding', 'chunked').send('').expect(200, 'buf:', done);\n  });","file":"raw.js","skipped":false,"dir":"test"},{"name":"should handle duplicated middleware","suites":["bodyParser.raw()"],"updatePoint":{"line":33,"column":41,"index":1379},"line":33,"code":"  it('should handle duplicated middleware', function (done) {\n    var rawParser = bodyParser.raw();\n    var server = createServer(function (req, res, next) {\n      rawParser(req, res, function (err) {\n        if (err) return next(err);\n        rawParser(req, res, next);\n      });\n    });\n    request(server).post('/').set('Content-Type', 'application/octet-stream').send('the user is tobi').expect(200, 'buf:746865207573657220697320746f6269', done);\n  });","file":"raw.js","skipped":false,"dir":"test"},{"name":"should 413 when over limit with Content-Length","suites":["bodyParser.raw()","with limit option"],"updatePoint":{"line":44,"column":54,"index":1895},"line":44,"code":"    it('should 413 when over limit with Content-Length', function (done) {\n      var buf = Buffer.alloc(1028, '.');\n      var server = createServer({\n        limit: '1kb'\n      });\n      var test = request(server).post('/');\n      test.set('Content-Type', 'application/octet-stream');\n      test.set('Content-Length', '1028');\n      test.write(buf);\n      test.expect(413, done);\n    });","file":"raw.js","skipped":false,"dir":"test"},{"name":"should 413 when over limit with chunked encoding","suites":["bodyParser.raw()","with limit option"],"updatePoint":{"line":55,"column":56,"index":2285},"line":55,"code":"    it('should 413 when over limit with chunked encoding', function (done) {\n      var buf = Buffer.alloc(1028, '.');\n      var server = createServer({\n        limit: '1kb'\n      });\n      var test = request(server).post('/');\n      test.set('Content-Type', 'application/octet-stream');\n      test.set('Transfer-Encoding', 'chunked');\n      test.write(buf);\n      test.expect(413, done);\n    });","file":"raw.js","skipped":false,"dir":"test"},{"name":"should 413 when inflated body over limit","suites":["bodyParser.raw()","with limit option"],"updatePoint":{"line":66,"column":48,"index":2673},"line":66,"code":"    it('should 413 when inflated body over limit', function (done) {\n      var server = createServer({\n        limit: '1kb'\n      });\n      var test = request(server).post('/');\n      test.set('Content-Encoding', 'gzip');\n      test.set('Content-Type', 'application/octet-stream');\n      test.write(Buffer.from('1f8b080000000000000ad3d31b05a360148c64000087e5a14704040000', 'hex'));\n      test.expect(413, done);\n    });","file":"raw.js","skipped":false,"dir":"test"},{"name":"should accept number of bytes","suites":["bodyParser.raw()","with limit option"],"updatePoint":{"line":76,"column":37,"index":3082},"line":76,"code":"    it('should accept number of bytes', function (done) {\n      var buf = Buffer.alloc(1028, '.');\n      var server = createServer({\n        limit: 1024\n      });\n      var test = request(server).post('/');\n      test.set('Content-Type', 'application/octet-stream');\n      test.write(buf);\n      test.expect(413, done);\n    });","file":"raw.js","skipped":false,"dir":"test"},{"name":"should not change when options altered","suites":["bodyParser.raw()","with limit option"],"updatePoint":{"line":86,"column":46,"index":3419},"line":86,"code":"    it('should not change when options altered', function (done) {\n      var buf = Buffer.alloc(1028, '.');\n      var options = {\n        limit: '1kb'\n      };\n      var server = createServer(options);\n      options.limit = '100kb';\n      var test = request(server).post('/');\n      test.set('Content-Type', 'application/octet-stream');\n      test.write(buf);\n      test.expect(413, done);\n    });","file":"raw.js","skipped":false,"dir":"test"},{"name":"should not hang response","suites":["bodyParser.raw()","with limit option"],"updatePoint":{"line":98,"column":32,"index":3803},"line":98,"code":"    it('should not hang response', function (done) {\n      var buf = Buffer.alloc(10240, '.');\n      var server = createServer({\n        limit: '8kb'\n      });\n      var test = request(server).post('/');\n      test.set('Content-Type', 'application/octet-stream');\n      test.write(buf);\n      test.write(buf);\n      test.write(buf);\n      test.expect(413, done);\n    });","file":"raw.js","skipped":false,"dir":"test"},{"name":"should not accept content-encoding","suites":["bodyParser.raw()","with inflate option","when false"],"updatePoint":{"line":118,"column":44,"index":4392},"line":118,"code":"      it('should not accept content-encoding', function (done) {\n        var test = request(this.server).post('/');\n        test.set('Content-Encoding', 'gzip');\n        test.set('Content-Type', 'application/octet-stream');\n        test.write(Buffer.from('1f8b080000000000000bcb4bcc4db57db16e170099a4bad608000000', 'hex'));\n        test.expect(415, '[encoding.unsupported] content encoding unsupported', done);\n      });","file":"raw.js","skipped":false,"dir":"test"},{"name":"should accept content-encoding","suites":["bodyParser.raw()","with inflate option","when true"],"updatePoint":{"line":132,"column":40,"index":4967},"line":132,"code":"      it('should accept content-encoding', function (done) {\n        var test = request(this.server).post('/');\n        test.set('Content-Encoding', 'gzip');\n        test.set('Content-Type', 'application/octet-stream');\n        test.write(Buffer.from('1f8b080000000000000bcb4bcc4db57db16e170099a4bad608000000', 'hex'));\n        test.expect(200, 'buf:6e616d653de8aeba', done);\n      });","file":"raw.js","skipped":false,"dir":"test"},{"name":"should parse for custom type","suites":["bodyParser.raw()","with type option","when \"application/vnd+octets\""],"updatePoint":{"line":148,"column":38,"index":5597},"line":148,"code":"      it('should parse for custom type', function (done) {\n        var test = request(this.server).post('/');\n        test.set('Content-Type', 'application/vnd+octets');\n        test.write(Buffer.from('000102', 'hex'));\n        test.expect(200, 'buf:000102', done);\n      });","file":"raw.js","skipped":false,"dir":"test"},{"name":"should ignore standard type","suites":["bodyParser.raw()","with type option","when \"application/vnd+octets\""],"updatePoint":{"line":154,"column":37,"index":5872},"line":154,"code":"      it('should ignore standard type', function (done) {\n        var test = request(this.server).post('/');\n        test.set('Content-Type', 'application/octet-stream');\n        test.write(Buffer.from('000102', 'hex'));\n        test.expect(200, '{}', done);\n      });","file":"raw.js","skipped":false,"dir":"test"},{"name":"should parse \"application/octet-stream\"","suites":["bodyParser.raw()","with type option","when [\"application/octet-stream\", \"application/vnd+octets\"]"],"updatePoint":{"line":167,"column":49,"index":6408},"line":167,"code":"      it('should parse \"application/octet-stream\"', function (done) {\n        var test = request(this.server).post('/');\n        test.set('Content-Type', 'application/octet-stream');\n        test.write(Buffer.from('000102', 'hex'));\n        test.expect(200, 'buf:000102', done);\n      });","file":"raw.js","skipped":false,"dir":"test"},{"name":"should parse \"application/vnd+octets\"","suites":["bodyParser.raw()","with type option","when [\"application/octet-stream\", \"application/vnd+octets\"]"],"updatePoint":{"line":173,"column":47,"index":6695},"line":173,"code":"      it('should parse \"application/vnd+octets\"', function (done) {\n        var test = request(this.server).post('/');\n        test.set('Content-Type', 'application/vnd+octets');\n        test.write(Buffer.from('000102', 'hex'));\n        test.expect(200, 'buf:000102', done);\n      });","file":"raw.js","skipped":false,"dir":"test"},{"name":"should ignore \"application/x-foo\"","suites":["bodyParser.raw()","with type option","when [\"application/octet-stream\", \"application/vnd+octets\"]"],"updatePoint":{"line":179,"column":43,"index":6976},"line":179,"code":"      it('should ignore \"application/x-foo\"', function (done) {\n        var test = request(this.server).post('/');\n        test.set('Content-Type', 'application/x-foo');\n        test.write(Buffer.from('000102', 'hex'));\n        test.expect(200, '{}', done);\n      });","file":"raw.js","skipped":false,"dir":"test"},{"name":"should parse when truthy value returned","suites":["bodyParser.raw()","with type option","when a function"],"updatePoint":{"line":187,"column":49,"index":7304},"line":187,"code":"      it('should parse when truthy value returned', function (done) {\n        var server = createServer({\n          type: accept\n        });\n\n        function accept(req) {\n          return req.headers['content-type'] === 'application/vnd.octet';\n        }\n\n        var test = request(server).post('/');\n        test.set('Content-Type', 'application/vnd.octet');\n        test.write(Buffer.from('000102', 'hex'));\n        test.expect(200, 'buf:000102', done);\n      });","file":"raw.js","skipped":false,"dir":"test"},{"name":"should work without content-type","suites":["bodyParser.raw()","with type option","when a function"],"updatePoint":{"line":201,"column":42,"index":7766},"line":201,"code":"      it('should work without content-type', function (done) {\n        var server = createServer({\n          type: accept\n        });\n\n        function accept(req) {\n          return true;\n        }\n\n        var test = request(server).post('/');\n        test.write(Buffer.from('000102', 'hex'));\n        test.expect(200, 'buf:000102', done);\n      });","file":"raw.js","skipped":false,"dir":"test"},{"name":"should not invoke without a body","suites":["bodyParser.raw()","with type option","when a function"],"updatePoint":{"line":214,"column":42,"index":8118},"line":214,"code":"      it('should not invoke without a body', function (done) {\n        var server = createServer({\n          type: accept\n        });\n\n        function accept(req) {\n          throw new Error('oops!');\n        }\n\n        request(server).get('/').expect(200, done);\n      });","file":"raw.js","skipped":false,"dir":"test"},{"name":"should assert value is function","suites":["bodyParser.raw()","with verify option"],"updatePoint":{"line":228,"column":39,"index":8451},"line":228,"code":"    it('should assert value is function', function () {\n      assert.throws(createServer.bind(null, {\n        verify: 'lol'\n      }), /TypeError: option verify must be function/);\n    });","file":"raw.js","skipped":false,"dir":"test"},{"name":"should error from verify","suites":["bodyParser.raw()","with verify option"],"updatePoint":{"line":233,"column":32,"index":8632},"line":233,"code":"    it('should error from verify', function (done) {\n      var server = createServer({\n        verify: function (req, res, buf) {\n          if (buf[0] === 0x00) throw new Error('no leading null');\n        }\n      });\n      var test = request(server).post('/');\n      test.set('Content-Type', 'application/octet-stream');\n      test.write(Buffer.from('000102', 'hex'));\n      test.expect(403, '[entity.verify.failed] no leading null', done);\n    });","file":"raw.js","skipped":false,"dir":"test"},{"name":"should allow custom codes","suites":["bodyParser.raw()","with verify option"],"updatePoint":{"line":244,"column":33,"index":9082},"line":244,"code":"    it('should allow custom codes', function (done) {\n      var server = createServer({\n        verify: function (req, res, buf) {\n          if (buf[0] !== 0x00) return;\n          var err = new Error('no leading null');\n          err.status = 400;\n          throw err;\n        }\n      });\n      var test = request(server).post('/');\n      test.set('Content-Type', 'application/octet-stream');\n      test.write(Buffer.from('000102', 'hex'));\n      test.expect(400, '[entity.verify.failed] no leading null', done);\n    });","file":"raw.js","skipped":false,"dir":"test"},{"name":"should allow pass-through","suites":["bodyParser.raw()","with verify option"],"updatePoint":{"line":258,"column":33,"index":9603},"line":258,"code":"    it('should allow pass-through', function (done) {\n      var server = createServer({\n        verify: function (req, res, buf) {\n          if (buf[0] === 0x00) throw new Error('no leading null');\n        }\n      });\n      var test = request(server).post('/');\n      test.set('Content-Type', 'application/octet-stream');\n      test.write(Buffer.from('0102', 'hex'));\n      test.expect(200, 'buf:0102', done);\n    });","file":"raw.js","skipped":false,"dir":"test"},{"name":"should ignore charset","suites":["bodyParser.raw()","charset"],"updatePoint":{"line":274,"column":29,"index":10128},"line":274,"code":"    it('should ignore charset', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Type', 'application/octet-stream; charset=utf-8');\n      test.write(Buffer.from('6e616d6520697320e8aeba', 'hex'));\n      test.expect(200, 'buf:6e616d6520697320e8aeba', done);\n    });","file":"raw.js","skipped":false,"dir":"test"},{"name":"should parse without encoding","suites":["bodyParser.raw()","encoding"],"updatePoint":{"line":287,"column":37,"index":10585},"line":287,"code":"    it('should parse without encoding', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Type', 'application/octet-stream');\n      test.write(Buffer.from('6e616d653de8aeba', 'hex'));\n      test.expect(200, 'buf:6e616d653de8aeba', done);\n    });","file":"raw.js","skipped":false,"dir":"test"},{"name":"should support identity encoding","suites":["bodyParser.raw()","encoding"],"updatePoint":{"line":293,"column":40,"index":10875},"line":293,"code":"    it('should support identity encoding', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Encoding', 'identity');\n      test.set('Content-Type', 'application/octet-stream');\n      test.write(Buffer.from('6e616d653de8aeba', 'hex'));\n      test.expect(200, 'buf:6e616d653de8aeba', done);\n    });","file":"raw.js","skipped":false,"dir":"test"},{"name":"should support gzip encoding","suites":["bodyParser.raw()","encoding"],"updatePoint":{"line":300,"column":36,"index":11209},"line":300,"code":"    it('should support gzip encoding', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Encoding', 'gzip');\n      test.set('Content-Type', 'application/octet-stream');\n      test.write(Buffer.from('1f8b080000000000000bcb4bcc4db57db16e170099a4bad608000000', 'hex'));\n      test.expect(200, 'buf:6e616d653de8aeba', done);\n    });","file":"raw.js","skipped":false,"dir":"test"},{"name":"should support deflate encoding","suites":["bodyParser.raw()","encoding"],"updatePoint":{"line":307,"column":39,"index":11582},"line":307,"code":"    it('should support deflate encoding', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Encoding', 'deflate');\n      test.set('Content-Type', 'application/octet-stream');\n      test.write(Buffer.from('789ccb4bcc4db57db16e17001068042f', 'hex'));\n      test.expect(200, 'buf:6e616d653de8aeba', done);\n    });","file":"raw.js","skipped":false,"dir":"test"},{"name":"should be case-insensitive","suites":["bodyParser.raw()","encoding"],"updatePoint":{"line":314,"column":34,"index":11929},"line":314,"code":"    it('should be case-insensitive', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Encoding', 'GZIP');\n      test.set('Content-Type', 'application/octet-stream');\n      test.write(Buffer.from('1f8b080000000000000bcb4bcc4db57db16e170099a4bad608000000', 'hex'));\n      test.expect(200, 'buf:6e616d653de8aeba', done);\n    });","file":"raw.js","skipped":false,"dir":"test"},{"name":"should 415 on unknown encoding","suites":["bodyParser.raw()","encoding"],"updatePoint":{"line":321,"column":38,"index":12301},"line":321,"code":"    it('should 415 on unknown encoding', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Encoding', 'nulls');\n      test.set('Content-Type', 'application/octet-stream');\n      test.write(Buffer.from('000000000000', 'hex'));\n      test.expect(415, '[encoding.unsupported] unsupported content encoding \"nulls\"', done);\n    });","file":"raw.js","skipped":false,"dir":"test"},{"name":"should parse text/plain","suites":["bodyParser.text()"],"updatePoint":{"line":15,"column":29,"index":314},"line":15,"code":"  it('should parse text/plain', function (done) {\n    request(this.server).post('/').set('Content-Type', 'text/plain').send('user is tobi').expect(200, '\"user is tobi\"', done);\n  });","file":"text.js","skipped":false,"dir":"test"},{"name":"should 400 when invalid content-length","suites":["bodyParser.text()"],"updatePoint":{"line":18,"column":44,"index":512},"line":18,"code":"  it('should 400 when invalid content-length', function (done) {\n    var textParser = bodyParser.text();\n    var server = createServer(function (req, res, next) {\n      req.headers['content-length'] = '20'; // bad length\n\n      textParser(req, res, next);\n    });\n    request(server).post('/').set('Content-Type', 'text/plain').send('user').expect(400, /content length/, done);\n  });","file":"text.js","skipped":false,"dir":"test"},{"name":"should handle Content-Length: 0","suites":["bodyParser.text()"],"updatePoint":{"line":27,"column":37,"index":889},"line":27,"code":"  it('should handle Content-Length: 0', function (done) {\n    request(createServer({\n      limit: '1kb'\n    })).post('/').set('Content-Type', 'text/plain').set('Content-Length', '0').expect(200, '\"\"', done);\n  });","file":"text.js","skipped":false,"dir":"test"},{"name":"should handle empty message-body","suites":["bodyParser.text()"],"updatePoint":{"line":32,"column":38,"index":1104},"line":32,"code":"  it('should handle empty message-body', function (done) {\n    request(createServer({\n      limit: '1kb'\n    })).post('/').set('Content-Type', 'text/plain').set('Transfer-Encoding', 'chunked').send('').expect(200, '\"\"', done);\n  });","file":"text.js","skipped":false,"dir":"test"},{"name":"should handle duplicated middleware","suites":["bodyParser.text()"],"updatePoint":{"line":37,"column":41,"index":1340},"line":37,"code":"  it('should handle duplicated middleware', function (done) {\n    var textParser = bodyParser.text();\n    var server = createServer(function (req, res, next) {\n      textParser(req, res, function (err) {\n        if (err) return next(err);\n        textParser(req, res, next);\n      });\n    });\n    request(server).post('/').set('Content-Type', 'text/plain').send('user is tobi').expect(200, '\"user is tobi\"', done);\n  });","file":"text.js","skipped":false,"dir":"test"},{"name":"should change default charset","suites":["bodyParser.text()","with defaultCharset option"],"updatePoint":{"line":48,"column":37,"index":1812},"line":48,"code":"    it('should change default charset', function (done) {\n      var server = createServer({\n        defaultCharset: 'koi8-r'\n      });\n      var test = request(server).post('/');\n      test.set('Content-Type', 'text/plain');\n      test.write(Buffer.from('6e616d6520697320cec5d4', 'hex'));\n      test.expect(200, '\"name is нет\"', done);\n    });","file":"text.js","skipped":false,"dir":"test"},{"name":"should honor content-type charset","suites":["bodyParser.text()","with defaultCharset option"],"updatePoint":{"line":57,"column":41,"index":2160},"line":57,"code":"    it('should honor content-type charset', function (done) {\n      var server = createServer({\n        defaultCharset: 'koi8-r'\n      });\n      var test = request(server).post('/');\n      test.set('Content-Type', 'text/plain; charset=utf-8');\n      test.write(Buffer.from('6e616d6520697320e8aeba', 'hex'));\n      test.expect(200, '\"name is 论\"', done);\n    });","file":"text.js","skipped":false,"dir":"test"},{"name":"should 413 when over limit with Content-Length","suites":["bodyParser.text()","with limit option"],"updatePoint":{"line":68,"column":54,"index":2586},"line":68,"code":"    it('should 413 when over limit with Content-Length', function (done) {\n      var buf = Buffer.alloc(1028, '.');\n      request(createServer({\n        limit: '1kb'\n      })).post('/').set('Content-Type', 'text/plain').set('Content-Length', '1028').send(buf.toString()).expect(413, done);\n    });","file":"text.js","skipped":false,"dir":"test"},{"name":"should 413 when over limit with chunked encoding","suites":["bodyParser.text()","with limit option"],"updatePoint":{"line":74,"column":56,"index":2886},"line":74,"code":"    it('should 413 when over limit with chunked encoding', function (done) {\n      var buf = Buffer.alloc(1028, '.');\n      var server = createServer({\n        limit: '1kb'\n      });\n      var test = request(server).post('/');\n      test.set('Content-Type', 'text/plain');\n      test.set('Transfer-Encoding', 'chunked');\n      test.write(buf.toString());\n      test.expect(413, done);\n    });","file":"text.js","skipped":false,"dir":"test"},{"name":"should 413 when inflated body over limit","suites":["bodyParser.text()","with limit option"],"updatePoint":{"line":85,"column":48,"index":3271},"line":85,"code":"    it('should 413 when inflated body over limit', function (done) {\n      var server = createServer({\n        limit: '1kb'\n      });\n      var test = request(server).post('/');\n      test.set('Content-Encoding', 'gzip');\n      test.set('Content-Type', 'text/plain');\n      test.write(Buffer.from('1f8b080000000000000ad3d31b05a360148c64000087e5a14704040000', 'hex'));\n      test.expect(413, done);\n    });","file":"text.js","skipped":false,"dir":"test"},{"name":"should accept number of bytes","suites":["bodyParser.text()","with limit option"],"updatePoint":{"line":95,"column":37,"index":3666},"line":95,"code":"    it('should accept number of bytes', function (done) {\n      var buf = Buffer.alloc(1028, '.');\n      request(createServer({\n        limit: 1024\n      })).post('/').set('Content-Type', 'text/plain').send(buf.toString()).expect(413, done);\n    });","file":"text.js","skipped":false,"dir":"test"},{"name":"should not change when options altered","suites":["bodyParser.text()","with limit option"],"updatePoint":{"line":101,"column":46,"index":3925},"line":101,"code":"    it('should not change when options altered', function (done) {\n      var buf = Buffer.alloc(1028, '.');\n      var options = {\n        limit: '1kb'\n      };\n      var server = createServer(options);\n      options.limit = '100kb';\n      request(server).post('/').set('Content-Type', 'text/plain').send(buf.toString()).expect(413, done);\n    });","file":"text.js","skipped":false,"dir":"test"},{"name":"should not hang response","suites":["bodyParser.text()","with limit option"],"updatePoint":{"line":110,"column":32,"index":4258},"line":110,"code":"    it('should not hang response', function (done) {\n      var buf = Buffer.alloc(10240, '.');\n      var server = createServer({\n        limit: '8kb'\n      });\n      var test = request(server).post('/');\n      test.set('Content-Type', 'text/plain');\n      test.write(buf);\n      test.write(buf);\n      test.write(buf);\n      test.expect(413, done);\n    });","file":"text.js","skipped":false,"dir":"test"},{"name":"should not accept content-encoding","suites":["bodyParser.text()","with inflate option","when false"],"updatePoint":{"line":130,"column":44,"index":4833},"line":130,"code":"      it('should not accept content-encoding', function (done) {\n        var test = request(this.server).post('/');\n        test.set('Content-Encoding', 'gzip');\n        test.set('Content-Type', 'text/plain');\n        test.write(Buffer.from('1f8b080000000000000bcb4bcc4d55c82c5678b16e170072b3e0200b000000', 'hex'));\n        test.expect(415, '[encoding.unsupported] content encoding unsupported', done);\n      });","file":"text.js","skipped":false,"dir":"test"},{"name":"should accept content-encoding","suites":["bodyParser.text()","with inflate option","when true"],"updatePoint":{"line":144,"column":40,"index":5400},"line":144,"code":"      it('should accept content-encoding', function (done) {\n        var test = request(this.server).post('/');\n        test.set('Content-Encoding', 'gzip');\n        test.set('Content-Type', 'text/plain');\n        test.write(Buffer.from('1f8b080000000000000bcb4bcc4d55c82c5678b16e170072b3e0200b000000', 'hex'));\n        test.expect(200, '\"name is 论\"', done);\n      });","file":"text.js","skipped":false,"dir":"test"},{"name":"should parse for custom type","suites":["bodyParser.text()","with type option","when \"text/html\""],"updatePoint":{"line":160,"column":38,"index":5987},"line":160,"code":"      it('should parse for custom type', function (done) {\n        request(this.server).post('/').set('Content-Type', 'text/html').send('<b>tobi</b>').expect(200, '\"<b>tobi</b>\"', done);\n      });","file":"text.js","skipped":false,"dir":"test"},{"name":"should ignore standard type","suites":["bodyParser.text()","with type option","when \"text/html\""],"updatePoint":{"line":163,"column":37,"index":6183},"line":163,"code":"      it('should ignore standard type', function (done) {\n        request(this.server).post('/').set('Content-Type', 'text/plain').send('user is tobi').expect(200, '{}', done);\n      });","file":"text.js","skipped":false,"dir":"test"},{"name":"should parse \"text/html\"","suites":["bodyParser.text()","with type option","when [\"text/html\", \"text/plain\"]"],"updatePoint":{"line":173,"column":34,"index":6568},"line":173,"code":"      it('should parse \"text/html\"', function (done) {\n        request(this.server).post('/').set('Content-Type', 'text/html').send('<b>tobi</b>').expect(200, '\"<b>tobi</b>\"', done);\n      });","file":"text.js","skipped":false,"dir":"test"},{"name":"should parse \"text/plain\"","suites":["bodyParser.text()","with type option","when [\"text/html\", \"text/plain\"]"],"updatePoint":{"line":176,"column":35,"index":6762},"line":176,"code":"      it('should parse \"text/plain\"', function (done) {\n        request(this.server).post('/').set('Content-Type', 'text/plain').send('tobi').expect(200, '\"tobi\"', done);\n      });","file":"text.js","skipped":false,"dir":"test"},{"name":"should ignore \"text/xml\"","suites":["bodyParser.text()","with type option","when [\"text/html\", \"text/plain\"]"],"updatePoint":{"line":179,"column":34,"index":6942},"line":179,"code":"      it('should ignore \"text/xml\"', function (done) {\n        request(this.server).post('/').set('Content-Type', 'text/xml').send('<user>tobi</user>').expect(200, '{}', done);\n      });","file":"text.js","skipped":false,"dir":"test"},{"name":"should parse when truthy value returned","suites":["bodyParser.text()","with type option","when a function"],"updatePoint":{"line":184,"column":49,"index":7198},"line":184,"code":"      it('should parse when truthy value returned', function (done) {\n        var server = createServer({\n          type: accept\n        });\n\n        function accept(req) {\n          return req.headers['content-type'] === 'text/vnd.something';\n        }\n\n        request(server).post('/').set('Content-Type', 'text/vnd.something').send('user is tobi').expect(200, '\"user is tobi\"', done);\n      });","file":"text.js","skipped":false,"dir":"test"},{"name":"should work without content-type","suites":["bodyParser.text()","with type option","when a function"],"updatePoint":{"line":195,"column":42,"index":7590},"line":195,"code":"      it('should work without content-type', function (done) {\n        var server = createServer({\n          type: accept\n        });\n\n        function accept(req) {\n          return true;\n        }\n\n        var test = request(server).post('/');\n        test.write('user is tobi');\n        test.expect(200, '\"user is tobi\"', done);\n      });","file":"text.js","skipped":false,"dir":"test"},{"name":"should not invoke without a body","suites":["bodyParser.text()","with type option","when a function"],"updatePoint":{"line":208,"column":42,"index":7932},"line":208,"code":"      it('should not invoke without a body', function (done) {\n        var server = createServer({\n          type: accept\n        });\n\n        function accept(req) {\n          throw new Error('oops!');\n        }\n\n        request(server).get('/').expect(200, done);\n      });","file":"text.js","skipped":false,"dir":"test"},{"name":"should assert value is function","suites":["bodyParser.text()","with verify option"],"updatePoint":{"line":222,"column":39,"index":8265},"line":222,"code":"    it('should assert value is function', function () {\n      assert.throws(createServer.bind(null, {\n        verify: 'lol'\n      }), /TypeError: option verify must be function/);\n    });","file":"text.js","skipped":false,"dir":"test"},{"name":"should error from verify","suites":["bodyParser.text()","with verify option"],"updatePoint":{"line":227,"column":32,"index":8446},"line":227,"code":"    it('should error from verify', function (done) {\n      var server = createServer({\n        verify: function (req, res, buf) {\n          if (buf[0] === 0x20) throw new Error('no leading space');\n        }\n      });\n      request(server).post('/').set('Content-Type', 'text/plain').send(' user is tobi').expect(403, '[entity.verify.failed] no leading space', done);\n    });","file":"text.js","skipped":false,"dir":"test"},{"name":"should allow custom codes","suites":["bodyParser.text()","with verify option"],"updatePoint":{"line":235,"column":33,"index":8823},"line":235,"code":"    it('should allow custom codes', function (done) {\n      var server = createServer({\n        verify: function (req, res, buf) {\n          if (buf[0] !== 0x20) return;\n          var err = new Error('no leading space');\n          err.status = 400;\n          throw err;\n        }\n      });\n      request(server).post('/').set('Content-Type', 'text/plain').send(' user is tobi').expect(400, '[entity.verify.failed] no leading space', done);\n    });","file":"text.js","skipped":false,"dir":"test"},{"name":"should allow pass-through","suites":["bodyParser.text()","with verify option"],"updatePoint":{"line":246,"column":33,"index":9271},"line":246,"code":"    it('should allow pass-through', function (done) {\n      var server = createServer({\n        verify: function (req, res, buf) {\n          if (buf[0] === 0x20) throw new Error('no leading space');\n        }\n      });\n      request(server).post('/').set('Content-Type', 'text/plain').send('user is tobi').expect(200, '\"user is tobi\"', done);\n    });","file":"text.js","skipped":false,"dir":"test"},{"name":"should 415 on unknown charset prior to verify","suites":["bodyParser.text()","with verify option"],"updatePoint":{"line":254,"column":53,"index":9642},"line":254,"code":"    it('should 415 on unknown charset prior to verify', function (done) {\n      var server = createServer({\n        verify: function (req, res, buf) {\n          throw new Error('unexpected verify call');\n        }\n      });\n      var test = request(server).post('/');\n      test.set('Content-Type', 'text/plain; charset=x-bogus');\n      test.write(Buffer.from('00000000', 'hex'));\n      test.expect(415, '[charset.unsupported] unsupported charset \"X-BOGUS\"', done);\n    });","file":"text.js","skipped":false,"dir":"test"},{"name":"should parse utf-8","suites":["bodyParser.text()","charset"],"updatePoint":{"line":270,"column":26,"index":10200},"line":270,"code":"    it('should parse utf-8', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Type', 'text/plain; charset=utf-8');\n      test.write(Buffer.from('6e616d6520697320e8aeba', 'hex'));\n      test.expect(200, '\"name is 论\"', done);\n    });","file":"text.js","skipped":false,"dir":"test"},{"name":"should parse codepage charsets","suites":["bodyParser.text()","charset"],"updatePoint":{"line":276,"column":38,"index":10486},"line":276,"code":"    it('should parse codepage charsets', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Type', 'text/plain; charset=koi8-r');\n      test.write(Buffer.from('6e616d6520697320cec5d4', 'hex'));\n      test.expect(200, '\"name is нет\"', done);\n    });","file":"text.js","skipped":false,"dir":"test"},{"name":"should parse when content-length != char length","suites":["bodyParser.text()","charset"],"updatePoint":{"line":282,"column":55,"index":10792},"line":282,"code":"    it('should parse when content-length != char length', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Type', 'text/plain; charset=utf-8');\n      test.set('Content-Length', '11');\n      test.write(Buffer.from('6e616d6520697320e8aeba', 'hex'));\n      test.expect(200, '\"name is 论\"', done);\n    });","file":"text.js","skipped":false,"dir":"test"},{"name":"should default to utf-8","suites":["bodyParser.text()","charset"],"updatePoint":{"line":289,"column":31,"index":11111},"line":289,"code":"    it('should default to utf-8', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Type', 'text/plain');\n      test.write(Buffer.from('6e616d6520697320e8aeba', 'hex'));\n      test.expect(200, '\"name is 论\"', done);\n    });","file":"text.js","skipped":false,"dir":"test"},{"name":"should 415 on unknown charset","suites":["bodyParser.text()","charset"],"updatePoint":{"line":295,"column":37,"index":11381},"line":295,"code":"    it('should 415 on unknown charset', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Type', 'text/plain; charset=x-bogus');\n      test.write(Buffer.from('00000000', 'hex'));\n      test.expect(415, '[charset.unsupported] unsupported charset \"X-BOGUS\"', done);\n    });","file":"text.js","skipped":false,"dir":"test"},{"name":"should parse without encoding","suites":["bodyParser.text()","encoding"],"updatePoint":{"line":308,"column":37,"index":11837},"line":308,"code":"    it('should parse without encoding', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Type', 'text/plain');\n      test.write(Buffer.from('6e616d6520697320e8aeba', 'hex'));\n      test.expect(200, '\"name is 论\"', done);\n    });","file":"text.js","skipped":false,"dir":"test"},{"name":"should support identity encoding","suites":["bodyParser.text()","encoding"],"updatePoint":{"line":314,"column":40,"index":12110},"line":314,"code":"    it('should support identity encoding', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Encoding', 'identity');\n      test.set('Content-Type', 'text/plain');\n      test.write(Buffer.from('6e616d6520697320e8aeba', 'hex'));\n      test.expect(200, '\"name is 论\"', done);\n    });","file":"text.js","skipped":false,"dir":"test"},{"name":"should support gzip encoding","suites":["bodyParser.text()","encoding"],"updatePoint":{"line":321,"column":36,"index":12427},"line":321,"code":"    it('should support gzip encoding', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Encoding', 'gzip');\n      test.set('Content-Type', 'text/plain');\n      test.write(Buffer.from('1f8b080000000000000bcb4bcc4d55c82c5678b16e170072b3e0200b000000', 'hex'));\n      test.expect(200, '\"name is 论\"', done);\n    });","file":"text.js","skipped":false,"dir":"test"},{"name":"should support deflate encoding","suites":["bodyParser.text()","encoding"],"updatePoint":{"line":328,"column":39,"index":12783},"line":328,"code":"    it('should support deflate encoding', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Encoding', 'deflate');\n      test.set('Content-Type', 'text/plain');\n      test.write(Buffer.from('789ccb4bcc4d55c82c5678b16e17001a6f050e', 'hex'));\n      test.expect(200, '\"name is 论\"', done);\n    });","file":"text.js","skipped":false,"dir":"test"},{"name":"should be case-insensitive","suites":["bodyParser.text()","encoding"],"updatePoint":{"line":335,"column":34,"index":13113},"line":335,"code":"    it('should be case-insensitive', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Encoding', 'GZIP');\n      test.set('Content-Type', 'text/plain');\n      test.write(Buffer.from('1f8b080000000000000bcb4bcc4d55c82c5678b16e170072b3e0200b000000', 'hex'));\n      test.expect(200, '\"name is 论\"', done);\n    });","file":"text.js","skipped":false,"dir":"test"},{"name":"should 415 on unknown encoding","suites":["bodyParser.text()","encoding"],"updatePoint":{"line":342,"column":38,"index":13468},"line":342,"code":"    it('should 415 on unknown encoding', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Encoding', 'nulls');\n      test.set('Content-Type', 'text/plain');\n      test.write(Buffer.from('000000000000', 'hex'));\n      test.expect(415, '[encoding.unsupported] unsupported content encoding \"nulls\"', done);\n    });","file":"text.js","skipped":false,"dir":"test"},{"name":"should parse x-www-form-urlencoded","suites":["bodyParser.urlencoded()"],"updatePoint":{"line":15,"column":40,"index":331},"line":15,"code":"  it('should parse x-www-form-urlencoded', function (done) {\n    request(this.server).post('/').set('Content-Type', 'application/x-www-form-urlencoded').send('user=tobi').expect(200, '{\"user\":\"tobi\"}', done);\n  });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should 400 when invalid content-length","suites":["bodyParser.urlencoded()"],"updatePoint":{"line":18,"column":44,"index":550},"line":18,"code":"  it('should 400 when invalid content-length', function (done) {\n    var urlencodedParser = bodyParser.urlencoded();\n    var server = createServer(function (req, res, next) {\n      req.headers['content-length'] = '20'; // bad length\n\n      urlencodedParser(req, res, next);\n    });\n    request(server).post('/').set('Content-Type', 'application/x-www-form-urlencoded').send('str=').expect(400, /content length/, done);\n  });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should handle Content-Length: 0","suites":["bodyParser.urlencoded()"],"updatePoint":{"line":27,"column":37,"index":968},"line":27,"code":"  it('should handle Content-Length: 0', function (done) {\n    request(this.server).post('/').set('Content-Type', 'application/x-www-form-urlencoded').set('Content-Length', '0').send('').expect(200, '{}', done);\n  });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should handle empty message-body","suites":["bodyParser.urlencoded()"],"updatePoint":{"line":30,"column":38,"index":1186},"line":30,"code":"  it('should handle empty message-body', function (done) {\n    request(createServer({\n      limit: '1kb'\n    })).post('/').set('Content-Type', 'application/x-www-form-urlencoded').set('Transfer-Encoding', 'chunked').send('').expect(200, '{}', done);\n  });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should handle duplicated middleware","suites":["bodyParser.urlencoded()"],"updatePoint":{"line":35,"column":41,"index":1445},"line":35,"code":"  it('should handle duplicated middleware', function (done) {\n    var urlencodedParser = bodyParser.urlencoded();\n    var server = createServer(function (req, res, next) {\n      urlencodedParser(req, res, function (err) {\n        if (err) return next(err);\n        urlencodedParser(req, res, next);\n      });\n    });\n    request(server).post('/').set('Content-Type', 'application/x-www-form-urlencoded').send('user=tobi').expect(200, '{\"user\":\"tobi\"}', done);\n  });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should parse extended syntax","suites":["bodyParser.urlencoded()"],"updatePoint":{"line":45,"column":34,"index":1904},"line":45,"code":"  it('should parse extended syntax', function (done) {\n    request(this.server).post('/').set('Content-Type', 'application/x-www-form-urlencoded').send('user[name][first]=Tobi').expect(200, '{\"user\":{\"name\":{\"first\":\"Tobi\"}}}', done);\n  });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should not parse extended syntax","suites":["bodyParser.urlencoded()","with extended option","when false"],"updatePoint":{"line":55,"column":42,"index":2355},"line":55,"code":"      it('should not parse extended syntax', function (done) {\n        request(this.server).post('/').set('Content-Type', 'application/x-www-form-urlencoded').send('user[name][first]=Tobi').expect(200, '{\"user[name][first]\":\"Tobi\"}', done);\n      });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should parse multiple key instances","suites":["bodyParser.urlencoded()","with extended option","when false"],"updatePoint":{"line":58,"column":45,"index":2609},"line":58,"code":"      it('should parse multiple key instances', function (done) {\n        request(this.server).post('/').set('Content-Type', 'application/x-www-form-urlencoded').send('user=Tobi&user=Loki').expect(200, '{\"user\":[\"Tobi\",\"Loki\"]}', done);\n      });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should parse multiple key instances","suites":["bodyParser.urlencoded()","with extended option","when true"],"updatePoint":{"line":68,"column":45,"index":3015},"line":68,"code":"      it('should parse multiple key instances', function (done) {\n        request(this.server).post('/').set('Content-Type', 'application/x-www-form-urlencoded').send('user=Tobi&user=Loki').expect(200, '{\"user\":[\"Tobi\",\"Loki\"]}', done);\n      });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should parse extended syntax","suites":["bodyParser.urlencoded()","with extended option","when true"],"updatePoint":{"line":71,"column":38,"index":3255},"line":71,"code":"      it('should parse extended syntax', function (done) {\n        request(this.server).post('/').set('Content-Type', 'application/x-www-form-urlencoded').send('user[name][first]=Tobi').expect(200, '{\"user\":{\"name\":{\"first\":\"Tobi\"}}}', done);\n      });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should parse parameters with dots","suites":["bodyParser.urlencoded()","with extended option","when true"],"updatePoint":{"line":74,"column":43,"index":3513},"line":74,"code":"      it('should parse parameters with dots', function (done) {\n        request(this.server).post('/').set('Content-Type', 'application/x-www-form-urlencoded').send('user.name=Tobi').expect(200, '{\"user.name\":\"Tobi\"}', done);\n      });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should parse fully-encoded extended syntax","suites":["bodyParser.urlencoded()","with extended option","when true"],"updatePoint":{"line":77,"column":52,"index":3758},"line":77,"code":"      it('should parse fully-encoded extended syntax', function (done) {\n        request(this.server).post('/').set('Content-Type', 'application/x-www-form-urlencoded').send('user%5Bname%5D%5Bfirst%5D=Tobi').expect(200, '{\"user\":{\"name\":{\"first\":\"Tobi\"}}}', done);\n      });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should parse array index notation","suites":["bodyParser.urlencoded()","with extended option","when true"],"updatePoint":{"line":80,"column":43,"index":4024},"line":80,"code":"      it('should parse array index notation', function (done) {\n        request(this.server).post('/').set('Content-Type', 'application/x-www-form-urlencoded').send('foo[0]=bar&foo[1]=baz').expect(200, '{\"foo\":[\"bar\",\"baz\"]}', done);\n      });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should parse array index notation with large array","suites":["bodyParser.urlencoded()","with extended option","when true"],"updatePoint":{"line":83,"column":60,"index":4285},"line":83,"code":"      it('should parse array index notation with large array', function (done) {\n        var str = 'f[0]=0';\n\n        for (var i = 1; i < 500; i++) {\n          str += '&f[' + i + ']=' + i.toString(16);\n        }\n\n        request(this.server).post('/').set('Content-Type', 'application/x-www-form-urlencoded').send(str).expect(function (res) {\n          var obj = JSON.parse(res.text);\n          assert.strictEqual(Object.keys(obj).length, 1);\n          assert.strictEqual(Array.isArray(obj.f), true);\n          assert.strictEqual(obj.f.length, 500);\n        }).expect(200, done);\n      });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should parse array of objects syntax","suites":["bodyParser.urlencoded()","with extended option","when true"],"updatePoint":{"line":97,"column":46,"index":4861},"line":97,"code":"      it('should parse array of objects syntax', function (done) {\n        request(this.server).post('/').set('Content-Type', 'application/x-www-form-urlencoded').send('foo[0][bar]=baz&foo[0][fizz]=buzz&foo[]=done!').expect(200, '{\"foo\":[{\"bar\":\"baz\",\"fizz\":\"buzz\"},\"done!\"]}', done);\n      });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should parse deep object","suites":["bodyParser.urlencoded()","with extended option","when true"],"updatePoint":{"line":100,"column":34,"index":5144},"line":100,"code":"      it('should parse deep object', function (done) {\n        var str = 'foo';\n\n        for (var i = 0; i < 500; i++) {\n          str += '[p]';\n        }\n\n        str += '=bar';\n        request(this.server).post('/').set('Content-Type', 'application/x-www-form-urlencoded').send(str).expect(function (res) {\n          var obj = JSON.parse(res.text);\n          assert.strictEqual(Object.keys(obj).length, 1);\n          assert.strictEqual(typeof obj.foo, 'object');\n          var depth = 0;\n          var ref = obj.foo;\n\n          while (ref = ref.p) {\n            depth++;\n          }\n\n          assert.strictEqual(depth, 500);\n        }).expect(200, done);\n      });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should not accept content-encoding","suites":["bodyParser.urlencoded()","with inflate option","when false"],"updatePoint":{"line":131,"column":44,"index":6036},"line":131,"code":"      it('should not accept content-encoding', function (done) {\n        var test = request(this.server).post('/');\n        test.set('Content-Encoding', 'gzip');\n        test.set('Content-Type', 'application/x-www-form-urlencoded');\n        test.write(Buffer.from('1f8b080000000000000bcb4bcc4db57db16e170099a4bad608000000', 'hex'));\n        test.expect(415, '[encoding.unsupported] content encoding unsupported', done);\n      });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should accept content-encoding","suites":["bodyParser.urlencoded()","with inflate option","when true"],"updatePoint":{"line":145,"column":40,"index":6620},"line":145,"code":"      it('should accept content-encoding', function (done) {\n        var test = request(this.server).post('/');\n        test.set('Content-Encoding', 'gzip');\n        test.set('Content-Type', 'application/x-www-form-urlencoded');\n        test.write(Buffer.from('1f8b080000000000000bcb4bcc4db57db16e170099a4bad608000000', 'hex'));\n        test.expect(200, '{\"name\":\"论\"}', done);\n      });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should 413 when over limit with Content-Length","suites":["bodyParser.urlencoded()","with limit option"],"updatePoint":{"line":155,"column":54,"index":7081},"line":155,"code":"    it('should 413 when over limit with Content-Length', function (done) {\n      var buf = Buffer.alloc(1024, '.');\n      request(createServer({\n        limit: '1kb'\n      })).post('/').set('Content-Type', 'application/x-www-form-urlencoded').set('Content-Length', '1028').send('str=' + buf.toString()).expect(413, done);\n    });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should 413 when over limit with chunked encoding","suites":["bodyParser.urlencoded()","with limit option"],"updatePoint":{"line":161,"column":56,"index":7413},"line":161,"code":"    it('should 413 when over limit with chunked encoding', function (done) {\n      var buf = Buffer.alloc(1024, '.');\n      var server = createServer({\n        limit: '1kb'\n      });\n      var test = request(server).post('/');\n      test.set('Content-Type', 'application/x-www-form-urlencoded');\n      test.set('Transfer-Encoding', 'chunked');\n      test.write('str=');\n      test.write(buf.toString());\n      test.expect(413, done);\n    });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should 413 when inflated body over limit","suites":["bodyParser.urlencoded()","with limit option"],"updatePoint":{"line":173,"column":48,"index":7847},"line":173,"code":"    it('should 413 when inflated body over limit', function (done) {\n      var server = createServer({\n        limit: '1kb'\n      });\n      var test = request(server).post('/');\n      test.set('Content-Encoding', 'gzip');\n      test.set('Content-Type', 'application/x-www-form-urlencoded');\n      test.write(Buffer.from('1f8b080000000000000a2b2e29b2d51b05a360148c580000a0351f9204040000', 'hex'));\n      test.expect(413, done);\n    });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should accept number of bytes","suites":["bodyParser.urlencoded()","with limit option"],"updatePoint":{"line":183,"column":37,"index":8271},"line":183,"code":"    it('should accept number of bytes', function (done) {\n      var buf = Buffer.alloc(1024, '.');\n      request(createServer({\n        limit: 1024\n      })).post('/').set('Content-Type', 'application/x-www-form-urlencoded').send('str=' + buf.toString()).expect(413, done);\n    });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should not change when options altered","suites":["bodyParser.urlencoded()","with limit option"],"updatePoint":{"line":189,"column":46,"index":8562},"line":189,"code":"    it('should not change when options altered', function (done) {\n      var buf = Buffer.alloc(1024, '.');\n      var options = {\n        limit: '1kb'\n      };\n      var server = createServer(options);\n      options.limit = '100kb';\n      request(server).post('/').set('Content-Type', 'application/x-www-form-urlencoded').send('str=' + buf.toString()).expect(413, done);\n    });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should not hang response","suites":["bodyParser.urlencoded()","with limit option"],"updatePoint":{"line":198,"column":32,"index":8927},"line":198,"code":"    it('should not hang response', function (done) {\n      var buf = Buffer.alloc(10240, '.');\n      var server = createServer({\n        limit: '8kb'\n      });\n      var test = request(server).post('/');\n      test.set('Content-Type', 'application/x-www-form-urlencoded');\n      test.write(buf);\n      test.write(buf);\n      test.write(buf);\n      test.expect(413, done);\n    });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should reject 0","suites":["bodyParser.urlencoded()","with parameterLimit option","with extended: false"],"updatePoint":{"line":213,"column":25,"index":9412},"line":213,"code":"      it('should reject 0', function () {\n        assert.throws(createServer.bind(null, {\n          extended: false,\n          parameterLimit: 0\n        }), /TypeError: option parameterLimit must be a positive number/);\n      });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should reject string","suites":["bodyParser.urlencoded()","with parameterLimit option","with extended: false"],"updatePoint":{"line":219,"column":30,"index":9647},"line":219,"code":"      it('should reject string', function () {\n        assert.throws(createServer.bind(null, {\n          extended: false,\n          parameterLimit: 'beep'\n        }), /TypeError: option parameterLimit must be a positive number/);\n      });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should 413 if over limit","suites":["bodyParser.urlencoded()","with parameterLimit option","with extended: false"],"updatePoint":{"line":225,"column":34,"index":9891},"line":225,"code":"      it('should 413 if over limit', function (done) {\n        request(createServer({\n          extended: false,\n          parameterLimit: 10\n        })).post('/').set('Content-Type', 'application/x-www-form-urlencoded').send(createManyParams(11)).expect(413, '[parameters.too.many] too many parameters', done);\n      });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should work when at the limit","suites":["bodyParser.urlencoded()","with parameterLimit option","with extended: false"],"updatePoint":{"line":231,"column":39,"index":10218},"line":231,"code":"      it('should work when at the limit', function (done) {\n        request(createServer({\n          extended: false,\n          parameterLimit: 10\n        })).post('/').set('Content-Type', 'application/x-www-form-urlencoded').send(createManyParams(10)).expect(expectKeyCount(10)).expect(200, done);\n      });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should work if number is floating point","suites":["bodyParser.urlencoded()","with parameterLimit option","with extended: false"],"updatePoint":{"line":237,"column":49,"index":10537},"line":237,"code":"      it('should work if number is floating point', function (done) {\n        request(createServer({\n          extended: false,\n          parameterLimit: 10.1\n        })).post('/').set('Content-Type', 'application/x-www-form-urlencoded').send(createManyParams(11)).expect(413, /too many parameters/, done);\n      });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should work with large limit","suites":["bodyParser.urlencoded()","with parameterLimit option","with extended: false"],"updatePoint":{"line":243,"column":38,"index":10843},"line":243,"code":"      it('should work with large limit', function (done) {\n        request(createServer({\n          extended: false,\n          parameterLimit: 5000\n        })).post('/').set('Content-Type', 'application/x-www-form-urlencoded').send(createManyParams(5000)).expect(expectKeyCount(5000)).expect(200, done);\n      });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should work with Infinity limit","suites":["bodyParser.urlencoded()","with parameterLimit option","with extended: false"],"updatePoint":{"line":249,"column":41,"index":11160},"line":249,"code":"      it('should work with Infinity limit', function (done) {\n        request(createServer({\n          extended: false,\n          parameterLimit: Infinity\n        })).post('/').set('Content-Type', 'application/x-www-form-urlencoded').send(createManyParams(10000)).expect(expectKeyCount(10000)).expect(200, done);\n      });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should reject 0","suites":["bodyParser.urlencoded()","with parameterLimit option","with extended: true"],"updatePoint":{"line":257,"column":25,"index":11525},"line":257,"code":"      it('should reject 0', function () {\n        assert.throws(createServer.bind(null, {\n          extended: true,\n          parameterLimit: 0\n        }), /TypeError: option parameterLimit must be a positive number/);\n      });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should reject string","suites":["bodyParser.urlencoded()","with parameterLimit option","with extended: true"],"updatePoint":{"line":263,"column":30,"index":11759},"line":263,"code":"      it('should reject string', function () {\n        assert.throws(createServer.bind(null, {\n          extended: true,\n          parameterLimit: 'beep'\n        }), /TypeError: option parameterLimit must be a positive number/);\n      });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should 413 if over limit","suites":["bodyParser.urlencoded()","with parameterLimit option","with extended: true"],"updatePoint":{"line":269,"column":34,"index":12002},"line":269,"code":"      it('should 413 if over limit', function (done) {\n        request(createServer({\n          extended: true,\n          parameterLimit: 10\n        })).post('/').set('Content-Type', 'application/x-www-form-urlencoded').send(createManyParams(11)).expect(413, '[parameters.too.many] too many parameters', done);\n      });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should work when at the limit","suites":["bodyParser.urlencoded()","with parameterLimit option","with extended: true"],"updatePoint":{"line":275,"column":39,"index":12328},"line":275,"code":"      it('should work when at the limit', function (done) {\n        request(createServer({\n          extended: true,\n          parameterLimit: 10\n        })).post('/').set('Content-Type', 'application/x-www-form-urlencoded').send(createManyParams(10)).expect(expectKeyCount(10)).expect(200, done);\n      });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should work if number is floating point","suites":["bodyParser.urlencoded()","with parameterLimit option","with extended: true"],"updatePoint":{"line":281,"column":49,"index":12646},"line":281,"code":"      it('should work if number is floating point', function (done) {\n        request(createServer({\n          extended: true,\n          parameterLimit: 10.1\n        })).post('/').set('Content-Type', 'application/x-www-form-urlencoded').send(createManyParams(11)).expect(413, /too many parameters/, done);\n      });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should work with large limit","suites":["bodyParser.urlencoded()","with parameterLimit option","with extended: true"],"updatePoint":{"line":287,"column":38,"index":12951},"line":287,"code":"      it('should work with large limit', function (done) {\n        request(createServer({\n          extended: true,\n          parameterLimit: 5000\n        })).post('/').set('Content-Type', 'application/x-www-form-urlencoded').send(createManyParams(5000)).expect(expectKeyCount(5000)).expect(200, done);\n      });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should work with Infinity limit","suites":["bodyParser.urlencoded()","with parameterLimit option","with extended: true"],"updatePoint":{"line":293,"column":41,"index":13267},"line":293,"code":"      it('should work with Infinity limit', function (done) {\n        request(createServer({\n          extended: true,\n          parameterLimit: Infinity\n        })).post('/').set('Content-Type', 'application/x-www-form-urlencoded').send(createManyParams(10000)).expect(expectKeyCount(10000)).expect(200, done);\n      });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should parse for custom type","suites":["bodyParser.urlencoded()","with type option","when \"application/vnd.x-www-form-urlencoded\""],"updatePoint":{"line":308,"column":38,"index":13862},"line":308,"code":"      it('should parse for custom type', function (done) {\n        request(this.server).post('/').set('Content-Type', 'application/vnd.x-www-form-urlencoded').send('user=tobi').expect(200, '{\"user\":\"tobi\"}', done);\n      });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should ignore standard type","suites":["bodyParser.urlencoded()","with type option","when \"application/vnd.x-www-form-urlencoded\""],"updatePoint":{"line":311,"column":37,"index":14086},"line":311,"code":"      it('should ignore standard type', function (done) {\n        request(this.server).post('/').set('Content-Type', 'application/x-www-form-urlencoded').send('user=tobi').expect(200, '{}', done);\n      });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should parse \"application/x-www-form-urlencoded\"","suites":["bodyParser.urlencoded()","with type option","when [\"urlencoded\", \"application/x-pairs\"]"],"updatePoint":{"line":321,"column":58,"index":14535},"line":321,"code":"      it('should parse \"application/x-www-form-urlencoded\"', function (done) {\n        request(this.server).post('/').set('Content-Type', 'application/x-www-form-urlencoded').send('user=tobi').expect(200, '{\"user\":\"tobi\"}', done);\n      });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should parse \"application/x-pairs\"","suites":["bodyParser.urlencoded()","with type option","when [\"urlencoded\", \"application/x-pairs\"]"],"updatePoint":{"line":324,"column":44,"index":14762},"line":324,"code":"      it('should parse \"application/x-pairs\"', function (done) {\n        request(this.server).post('/').set('Content-Type', 'application/x-pairs').send('user=tobi').expect(200, '{\"user\":\"tobi\"}', done);\n      });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should ignore application/x-foo","suites":["bodyParser.urlencoded()","with type option","when [\"urlencoded\", \"application/x-pairs\"]"],"updatePoint":{"line":327,"column":41,"index":14972},"line":327,"code":"      it('should ignore application/x-foo', function (done) {\n        request(this.server).post('/').set('Content-Type', 'application/x-foo').send('user=tobi').expect(200, '{}', done);\n      });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should parse when truthy value returned","suites":["bodyParser.urlencoded()","with type option","when a function"],"updatePoint":{"line":332,"column":49,"index":15229},"line":332,"code":"      it('should parse when truthy value returned', function (done) {\n        var server = createServer({\n          type: accept\n        });\n\n        function accept(req) {\n          return req.headers['content-type'] === 'application/vnd.something';\n        }\n\n        request(server).post('/').set('Content-Type', 'application/vnd.something').send('user=tobi').expect(200, '{\"user\":\"tobi\"}', done);\n      });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should work without content-type","suites":["bodyParser.urlencoded()","with type option","when a function"],"updatePoint":{"line":343,"column":42,"index":15633},"line":343,"code":"      it('should work without content-type', function (done) {\n        var server = createServer({\n          type: accept\n        });\n\n        function accept(req) {\n          return true;\n        }\n\n        var test = request(server).post('/');\n        test.write('user=tobi');\n        test.expect(200, '{\"user\":\"tobi\"}', done);\n      });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should not invoke without a body","suites":["bodyParser.urlencoded()","with type option","when a function"],"updatePoint":{"line":356,"column":42,"index":15973},"line":356,"code":"      it('should not invoke without a body', function (done) {\n        var server = createServer({\n          type: accept\n        });\n\n        function accept(req) {\n          throw new Error('oops!');\n        }\n\n        request(server).get('/').expect(200, done);\n      });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should assert value if function","suites":["bodyParser.urlencoded()","with verify option"],"updatePoint":{"line":370,"column":39,"index":16306},"line":370,"code":"    it('should assert value if function', function () {\n      assert.throws(createServer.bind(null, {\n        verify: 'lol'\n      }), /TypeError: option verify must be function/);\n    });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should error from verify","suites":["bodyParser.urlencoded()","with verify option"],"updatePoint":{"line":375,"column":32,"index":16487},"line":375,"code":"    it('should error from verify', function (done) {\n      var server = createServer({\n        verify: function (req, res, buf) {\n          if (buf[0] === 0x20) throw new Error('no leading space');\n        }\n      });\n      request(server).post('/').set('Content-Type', 'application/x-www-form-urlencoded').send(' user=tobi').expect(403, '[entity.verify.failed] no leading space', done);\n    });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should allow custom codes","suites":["bodyParser.urlencoded()","with verify option"],"updatePoint":{"line":383,"column":33,"index":16884},"line":383,"code":"    it('should allow custom codes', function (done) {\n      var server = createServer({\n        verify: function (req, res, buf) {\n          if (buf[0] !== 0x20) return;\n          var err = new Error('no leading space');\n          err.status = 400;\n          throw err;\n        }\n      });\n      request(server).post('/').set('Content-Type', 'application/x-www-form-urlencoded').send(' user=tobi').expect(400, '[entity.verify.failed] no leading space', done);\n    });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should allow custom type","suites":["bodyParser.urlencoded()","with verify option"],"updatePoint":{"line":394,"column":32,"index":17351},"line":394,"code":"    it('should allow custom type', function (done) {\n      var server = createServer({\n        verify: function (req, res, buf) {\n          if (buf[0] !== 0x20) return;\n          var err = new Error('no leading space');\n          err.type = 'foo.bar';\n          throw err;\n        }\n      });\n      request(server).post('/').set('Content-Type', 'application/x-www-form-urlencoded').send(' user=tobi').expect(403, '[foo.bar] no leading space', done);\n    });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should allow pass-through","suites":["bodyParser.urlencoded()","with verify option"],"updatePoint":{"line":405,"column":33,"index":17810},"line":405,"code":"    it('should allow pass-through', function (done) {\n      var server = createServer({\n        verify: function (req, res, buf) {\n          if (buf[0] === 0x5b) throw new Error('no arrays');\n        }\n      });\n      request(server).post('/').set('Content-Type', 'application/x-www-form-urlencoded').send('user=tobi').expect(200, '{\"user\":\"tobi\"}', done);\n    });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should 415 on unknown charset prior to verify","suites":["bodyParser.urlencoded()","with verify option"],"updatePoint":{"line":413,"column":53,"index":18195},"line":413,"code":"    it('should 415 on unknown charset prior to verify', function (done) {\n      var server = createServer({\n        verify: function (req, res, buf) {\n          throw new Error('unexpected verify call');\n        }\n      });\n      var test = request(server).post('/');\n      test.set('Content-Type', 'application/x-www-form-urlencoded; charset=x-bogus');\n      test.write(Buffer.from('00000000', 'hex'));\n      test.expect(415, '[charset.unsupported] unsupported charset \"X-BOGUS\"', done);\n    });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should parse utf-8","suites":["bodyParser.urlencoded()","charset"],"updatePoint":{"line":429,"column":26,"index":18776},"line":429,"code":"    it('should parse utf-8', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Type', 'application/x-www-form-urlencoded; charset=utf-8');\n      test.write(Buffer.from('6e616d653de8aeba', 'hex'));\n      test.expect(200, '{\"name\":\"论\"}', done);\n    });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should parse when content-length != char length","suites":["bodyParser.urlencoded()","charset"],"updatePoint":{"line":435,"column":55,"index":19097},"line":435,"code":"    it('should parse when content-length != char length', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Type', 'application/x-www-form-urlencoded; charset=utf-8');\n      test.set('Content-Length', '7');\n      test.write(Buffer.from('746573743dc3a5', 'hex'));\n      test.expect(200, '{\"test\":\"å\"}', done);\n    });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should default to utf-8","suites":["bodyParser.urlencoded()","charset"],"updatePoint":{"line":442,"column":31,"index":19431},"line":442,"code":"    it('should default to utf-8', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Type', 'application/x-www-form-urlencoded');\n      test.write(Buffer.from('6e616d653de8aeba', 'hex'));\n      test.expect(200, '{\"name\":\"论\"}', done);\n    });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should fail on unknown charset","suites":["bodyParser.urlencoded()","charset"],"updatePoint":{"line":448,"column":38,"index":19720},"line":448,"code":"    it('should fail on unknown charset', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Type', 'application/x-www-form-urlencoded; charset=koi8-r');\n      test.write(Buffer.from('6e616d653dcec5d4', 'hex'));\n      test.expect(415, '[charset.unsupported] unsupported charset \"KOI8-R\"', done);\n    });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should parse without encoding","suites":["bodyParser.urlencoded()","encoding"],"updatePoint":{"line":461,"column":37,"index":20205},"line":461,"code":"    it('should parse without encoding', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Type', 'application/x-www-form-urlencoded');\n      test.write(Buffer.from('6e616d653de8aeba', 'hex'));\n      test.expect(200, '{\"name\":\"论\"}', done);\n    });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should support identity encoding","suites":["bodyParser.urlencoded()","encoding"],"updatePoint":{"line":467,"column":40,"index":20496},"line":467,"code":"    it('should support identity encoding', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Encoding', 'identity');\n      test.set('Content-Type', 'application/x-www-form-urlencoded');\n      test.write(Buffer.from('6e616d653de8aeba', 'hex'));\n      test.expect(200, '{\"name\":\"论\"}', done);\n    });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should support gzip encoding","suites":["bodyParser.urlencoded()","encoding"],"updatePoint":{"line":474,"column":36,"index":20831},"line":474,"code":"    it('should support gzip encoding', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Encoding', 'gzip');\n      test.set('Content-Type', 'application/x-www-form-urlencoded');\n      test.write(Buffer.from('1f8b080000000000000bcb4bcc4db57db16e170099a4bad608000000', 'hex'));\n      test.expect(200, '{\"name\":\"论\"}', done);\n    });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should support deflate encoding","suites":["bodyParser.urlencoded()","encoding"],"updatePoint":{"line":481,"column":39,"index":21205},"line":481,"code":"    it('should support deflate encoding', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Encoding', 'deflate');\n      test.set('Content-Type', 'application/x-www-form-urlencoded');\n      test.write(Buffer.from('789ccb4bcc4db57db16e17001068042f', 'hex'));\n      test.expect(200, '{\"name\":\"论\"}', done);\n    });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should be case-insensitive","suites":["bodyParser.urlencoded()","encoding"],"updatePoint":{"line":488,"column":34,"index":21553},"line":488,"code":"    it('should be case-insensitive', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Encoding', 'GZIP');\n      test.set('Content-Type', 'application/x-www-form-urlencoded');\n      test.write(Buffer.from('1f8b080000000000000bcb4bcc4db57db16e170099a4bad608000000', 'hex'));\n      test.expect(200, '{\"name\":\"论\"}', done);\n    });","file":"urlencoded.js","skipped":false,"dir":"test"},{"name":"should 415 on unknown encoding","suites":["bodyParser.urlencoded()","encoding"],"updatePoint":{"line":495,"column":38,"index":21926},"line":495,"code":"    it('should 415 on unknown encoding', function (done) {\n      var test = request(this.server).post('/');\n      test.set('Content-Encoding', 'nulls');\n      test.set('Content-Type', 'application/x-www-form-urlencoded');\n      test.write(Buffer.from('000000000000', 'hex'));\n      test.expect(415, '[encoding.unsupported] unsupported content encoding \"nulls\"', done);\n    });","file":"urlencoded.js","skipped":false,"dir":"test"}]}