{"repo":"apostrophecms/apostrophe","url":"https://github.com/apostrophecms/apostrophe","branch":"main","configs":[{"package":"apostrophe","lang":"js","dir":"test","framework":"mocha","pattern":"**/*.{js,ts}"}],"tests":[{"name":"should allow a group reversing the current order","suites":["Admin bar"],"updatePoint":{"line":10,"column":54,"index":230},"line":10,"code":"  it('should allow a group reversing the current order', async function () {\n    let apos;\n\n    try {\n      apos = await t.create({\n        root: module,\n        modules: {\n          '@apostrophecms/admin-bar': {\n            options: {\n              addGroups: [{\n                label: 'Media',\n                items: ['@apostrophecms/image', '@apostrophecms/image-tag', '@apostrophecms/file', '@apostrophecms/file-tag']\n              }, {\n                label: 'Content',\n                items: ['@apostrophecms/file', '@apostrophecms/image']\n              }]\n            }\n          }\n        }\n      });\n      assert(apos.modules['@apostrophecms/admin-bar']);\n      assert(apos.adminBar);\n      assert.strictEqual(apos.adminBar.items.length, 6);\n      assert(apos.adminBar.items[2].name === '@apostrophecms/file');\n      assert(apos.adminBar.items[3].name === '@apostrophecms/image');\n    } finally {\n      t.destroy(apos);\n    }\n  });","file":"admin-bar.js","skipped":false,"dir":"test"},{"name":"should allow a group obeying the current order","suites":["Admin bar"],"updatePoint":{"line":39,"column":52,"index":1169},"line":39,"code":"  it('should allow a group obeying the current order', async function () {\n    let apos;\n\n    try {\n      apos = await t.create({\n        modules: {\n          '@apostrophecms/admin-bar': {\n            options: {\n              addGroups: [{\n                label: 'Media',\n                items: ['@apostrophecms/image', '@apostrophecms/file']\n              }, {\n                label: 'Content',\n                items: ['@apostrophecms/file', '@apostrophecms/image']\n              }]\n            }\n          }\n        }\n      });\n      assert(apos.modules['@apostrophecms/admin-bar']);\n      assert(apos.adminBar);\n      assert(apos.adminBar.items.length === 6);\n      assert(apos.adminBar.items[1].name === '@apostrophecms/file');\n      assert(apos.adminBar.items[2].name === '@apostrophecms/image');\n    } finally {\n      t.destroy(apos);\n    }\n  });","file":"admin-bar.js","skipped":false,"dir":"test"},{"name":"should should not have a \"global\" admin menu item by default","suites":["Admin bar"],"updatePoint":{"line":67,"column":66,"index":2036},"line":67,"code":"  it('should should not have a \"global\" admin menu item by default', async function () {\n    let apos;\n\n    try {\n      apos = await t.create({\n        root: module\n      });\n      assert(apos.modules['@apostrophecms/admin-bar']);\n      assert(apos.adminBar);\n      assert(apos.adminBar.items.findIndex(i => i.name === '@apostrophecms/global') === -1);\n    } finally {\n      t.destroy(apos);\n    }\n  });","file":"admin-bar.js","skipped":false,"dir":"test"},{"name":"should *should* have a \"global\" admin menu item with custom schema","suites":["Admin bar"],"updatePoint":{"line":81,"column":72,"index":2446},"line":81,"code":"  it('should *should* have a \"global\" admin menu item with custom schema', async function () {\n    let apos;\n\n    try {\n      apos = await t.create({\n        root: module,\n        modules: {\n          '@apostrophecms/global': {\n            fields: {\n              add: {\n                someField: {\n                  type: 'string'\n                }\n              }\n            }\n          }\n        }\n      });\n      assert(apos.modules['@apostrophecms/admin-bar']);\n      assert(apos.adminBar);\n      assert(apos.adminBar.items.findIndex(i => i.name === '@apostrophecms/global') > -1);\n    } finally {\n      t.destroy(apos);\n    }\n  });","file":"admin-bar.js","skipped":false,"dir":"test"},{"name":"should initialize","suites":["Areas"],"updatePoint":{"line":14,"column":23,"index":267},"line":14,"code":"  it('should initialize', async function () {\n    apos = await t.create({\n      root: module,\n      modules: {\n        article: {\n          extend: '@apostrophecms/piece-type',\n          options: {\n            alias: 'articles',\n            name: 'article',\n            label: 'Article'\n          },\n          fields: {\n            add: {\n              main: {\n                type: 'area',\n                label: 'Main area',\n                options: {\n                  widgets: {\n                    '@apostrophecms/rich-text': {\n                      toolbar: ['bold'],\n                      styles: [{\n                        tag: 'p',\n                        label: 'Paragraph'\n                      }]\n                    },\n                    '@apostrophecms/html': {}\n                  }\n                }\n              },\n              moreAreas: {\n                type: 'array',\n                label: 'Some more areas',\n                fields: {\n                  add: {\n                    someWidgets: {\n                      type: 'area',\n                      label: 'Some widgets in the area',\n                      options: {\n                        widgets: {\n                          '@apostrophecms/html': {}\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    });\n    assert(apos.modules['@apostrophecms/area']);\n    assert(apos.area); // In tests this will be the name of the test file,\n    // so override that in order to get apostrophe to\n    // listen normally and not try to run a task. -Tom\n\n    apos.argv._ = [];\n  });","file":"areas.js","skipped":false,"dir":"test"},{"name":"returns the rich text of an area via the richText method","suites":["Areas"],"updatePoint":{"line":72,"column":62,"index":1978},"line":72,"code":"  it('returns the rich text of an area via the richText method', function () {\n    assert(apos.area.richText({\n      metaType: 'area',\n      items: [{\n        metaType: 'widget',\n        type: '@apostrophecms/rich-text',\n        content: '<h2>So cool</h2>'\n      }, {\n        metaType: 'widget',\n        type: 'something-else',\n        content: '<h3>Do not return me</h3>'\n      }, {\n        metaType: 'widget',\n        type: '@apostrophecms/rich-text',\n        content: '<h2>Something else cool</h2>'\n      }]\n    }) === '<h2>So cool</h2>\\n<h2>Something else cool</h2>');\n    assert(apos.area.richText({\n      metaType: 'area',\n      items: [{\n        metaType: 'widget',\n        type: '@apostrophecms/rich-text',\n        content: '<h2>So cool</h2>'\n      }, {\n        metaType: 'widget',\n        type: 'something-else',\n        content: '<h3>Do not return me</h3>'\n      }, {\n        metaType: 'widget',\n        type: '@apostrophecms/rich-text',\n        content: '<h2>Something else cool</h2>'\n      }]\n    }, {\n      delimiter: ''\n    }) === '<h2>So cool</h2><h2>Something else cool</h2>');\n    assert(apos.area.richText({\n      metaType: 'area',\n      items: [{\n        metaType: 'widget',\n        type: '@apostrophecms/rich-text',\n        content: '<h2>So cool</h2>'\n      }, {\n        metaType: 'widget',\n        type: 'something-else',\n        content: '<h3>Do not return me</h3>'\n      }, {\n        metaType: 'widget',\n        type: '@apostrophecms/rich-text',\n        content: '<h2>Something else cool</h2>'\n      }]\n    }, {\n      wrapper: 'div'\n    }) === '<div><h2>So cool</h2></div><div><h2>Something else cool</h2></div>');\n  });","file":"areas.js","skipped":false,"dir":"test"},{"name":"returns the plaintext of an area via the plaintext method","suites":["Areas"],"updatePoint":{"line":126,"column":63,"index":3623},"line":126,"code":"  it('returns the plaintext of an area via the plaintext method', function () {\n    assert.strictEqual(apos.area.plaintext({\n      metaType: 'area',\n      items: [{\n        metaType: 'widget',\n        type: '@apostrophecms/rich-text',\n        content: '<h2>So cool</h2>'\n      }, {\n        metaType: 'widget',\n        type: 'something-else',\n        content: '<h3>Do not return me</h3>'\n      }, {\n        metaType: 'widget',\n        type: '@apostrophecms/rich-text',\n        content: '<h2>Something else cool</h2>'\n      }]\n    }), 'So cool\\nSomething else cool');\n    assert.strictEqual(apos.area.plaintext({\n      metaType: 'area',\n      items: [{\n        metaType: 'widget',\n        type: '@apostrophecms/rich-text',\n        content: '<h2>So cool</h2>'\n      }, {\n        metaType: 'widget',\n        type: 'something-else',\n        content: '<h3>Do not return me</h3>'\n      }, {\n        metaType: 'widget',\n        type: '@apostrophecms/rich-text',\n        content: '<h2>Something else cool</h2>'\n      }]\n    }, {\n      limit: 15\n    }), 'So cool...');\n  });","file":"areas.js","skipped":false,"dir":"test"},{"name":"can populate an area object with required properties using the prepForRender method","suites":["Areas"],"updatePoint":{"line":162,"column":89,"index":4714},"line":162,"code":"  it('can populate an area object with required properties using the prepForRender method', async function () {\n    apos.area.prepForRender(rteArea, areaDocs[0], 'main');\n    assert(rteArea._fieldId);\n    assert(rteArea._docId);\n    assert(rteArea._edit !== undefined);\n  });","file":"areas.js","skipped":false,"dir":"test"},{"name":"renders an area passed to the `renderArea` method","suites":["Areas"],"updatePoint":{"line":170,"column":55,"index":4999},"line":170,"code":"  it('renders an area passed to the `renderArea` method', async function () {\n    const req = apos.task.getReq();\n    firstRendered = await apos.area.renderArea(req, rteArea, areaDocs[0]);\n    assert(firstRendered);\n    assert.equal(firstRendered, `\n<div class=\"apos-area\">\n<div data-rich-text>\n  <p>Perhaps its fate that today is the 4th of July, and you will once again be fighting for our freedom, not from tyranny, oppression, or persecution -- but from annihilation.</p><p>We're fighting for our right to live, to exist.</p>\n</div>\n</div>\n`);\n  });","file":"areas.js","skipped":false,"dir":"test"},{"name":"returns rendered HTML from the `renderAarea` method for a mixed widget area","suites":["Areas"],"updatePoint":{"line":182,"column":81,"index":5579},"line":182,"code":"  it('returns rendered HTML from the `renderAarea` method for a mixed widget area', async function () {\n    const req = apos.task.getReq();\n    apos.area.prepForRender(mixedArea, areaDocs[1], 'main');\n    secondRendered = await apos.area.renderArea(req, mixedArea, areaDocs[1]);\n    assert(secondRendered.includes(`<div data-rich-text>\n  <p>Good morning.`));\n    assert(secondRendered.includes('<marquee>The HTML <code>&lt;marquee&gt;</code> element'));\n  });","file":"areas.js","skipped":false,"dir":"test"},{"name":"populates a document object with rendered HTML areas using the renderDocsAreas method.","suites":["Areas"],"updatePoint":{"line":190,"column":92,"index":6050},"line":190,"code":"  it('populates a document object with rendered HTML areas using the renderDocsAreas method.', async function () {\n    const req = apos.task.getReq();\n    areaDocs.forEach(doc => {\n      // No rendered HTML yet.\n      assert(!doc.main._rendered);\n    });\n    await apos.area.renderDocsAreas(req, areaDocs);\n    areaDocs.forEach(doc => {\n      // Now they're there.\n      assert(doc.main._rendered);\n      assert(!doc.main.items); // TEMP Commenting out until we add the array item metatype.\n      // if (doc.moreAreas) {\n      //   doc.moreAreas.forEach(area => {\n      //     assert(area.someWidgets._rendered);\n      //     assert(!area.someWidgets.items);\n      //   });\n      // }\n    });\n    assert.equal(areaDocs[0].main._rendered, firstRendered);\n    assert.equal(areaDocs[1].main._rendered, secondRendered);\n  });","file":"areas.js","skipped":false,"dir":"test"},{"name":"area considered empty when it should be","suites":["Areas"],"updatePoint":{"line":211,"column":45,"index":6825},"line":211,"code":"  it('area considered empty when it should be', function () {\n    const doc = {\n      type: 'test',\n      _id: 'test',\n      body: {\n        metaType: 'area',\n        items: []\n      },\n      emptyText: {\n        metaType: 'area',\n        items: [{\n          metaType: 'widget',\n          _id: 'test2',\n          type: '@apostrophecms/rich-text',\n          content: ''\n        }]\n      },\n      insignificantText: {\n        metaType: 'area',\n        items: [{\n          metaType: 'widget',\n          _id: 'test2',\n          type: '@apostrophecms/rich-text',\n          content: '<h4> </h4>'\n        }]\n      }\n    };\n    assert(apos.area.isEmpty({\n      area: doc.body\n    }));\n    assert(apos.area.isEmpty(doc, 'body'));\n    assert(apos.area.isEmpty(doc, 'nonexistent'));\n    assert(apos.area.isEmpty(doc, 'emptyText'));\n    assert(apos.area.isEmpty(doc, 'insignificantText'));\n  });","file":"areas.js","skipped":false,"dir":"test"},{"name":"area not considered empty when it should not be","suites":["Areas"],"updatePoint":{"line":246,"column":53,"index":7717},"line":246,"code":"  it('area not considered empty when it should not be', function () {\n    const doc = {\n      type: 'test',\n      _id: 'test',\n      body: {\n        metaType: 'area',\n        items: [{\n          metaType: 'widget',\n          _id: 'test2',\n          type: '@apostrophecms/video',\n          url: 'http://somewhere.com'\n        }]\n      },\n      emptyText: {\n        metaType: 'area',\n        items: [{\n          metaType: 'widget',\n          _id: 'test2',\n          type: '@apostrophecms/rich-text',\n          content: ''\n        }]\n      },\n      fullText: {\n        metaType: 'area',\n        items: [{\n          metaType: 'widget',\n          _id: 'test2',\n          type: '@apostrophecms/rich-text',\n          content: '<h4>Some text</h4>'\n        }]\n      }\n    };\n    assert(!apos.area.isEmpty({\n      area: doc.body\n    }));\n    assert(!apos.area.isEmpty(doc, 'body'));\n    assert(!apos.area.isEmpty(doc, 'fullText'));\n    assert(!apos.area.isEmpty({\n      area: doc.fullText\n    }));\n  });","file":"areas.js","skipped":false,"dir":"test"},{"name":"both isEmpty and legacy empty methods work on schema fields","suites":["Areas"],"updatePoint":{"line":287,"column":65,"index":8723},"line":287,"code":"  it('both isEmpty and legacy empty methods work on schema fields', function () {\n    assert(!apos.schema.fieldTypes.boolean.isEmpty({\n      type: 'boolean',\n      name: 'test'\n    }, true));\n    assert(apos.schema.fieldTypes.boolean.isEmpty({\n      type: 'boolean',\n      name: 'test'\n    }, false));\n    assert(!apos.schema.fieldTypes.boolean.empty({\n      type: 'boolean',\n      name: 'test'\n    }, true));\n    assert(apos.schema.fieldTypes.boolean.empty({\n      type: 'boolean',\n      name: 'test'\n    }, false));\n  });","file":"areas.js","skipped":false,"dir":"test"},{"name":"should should exist on the apos object","suites":["Assets"],"updatePoint":{"line":11,"column":44,"index":255},"line":11,"code":"  it('should should exist on the apos object', async function () {\n    apos = await t.create({\n      root: module\n    });\n    assert(apos.asset);\n  });","file":"assets.js","skipped":false,"dir":"test"},{"name":"should serve static files","suites":["Assets"],"updatePoint":{"line":17,"column":31,"index":394},"line":17,"code":"  it('should serve static files', async function () {\n    const text = await apos.http.get('/static-test.txt');\n    assert(text.match(/served/));\n  });","file":"assets.js","skipped":false,"dir":"test"},{"name":"should be a property of the apos object","suites":["Attachment"],"updatePoint":{"line":45,"column":45,"index":1171},"line":45,"code":"  it('should be a property of the apos object', async function () {\n    this.timeout(t.timeout);\n    this.slow(2000);\n    apos = await t.create({\n      root: module\n    });\n    assert(apos.attachment);\n  });","file":"attachments.js","skipped":false,"dir":"test"},{"name":"should clear previous material if any","suites":["Attachment","wipe"],"updatePoint":{"line":54,"column":45,"index":1412},"line":54,"code":"    it('should clear previous material if any', async function () {\n      return wipeIt();\n    });","file":"attachments.js","skipped":false,"dir":"test"},{"name":"should upload a text file using the attachments api when user","suites":["Attachment","insert"],"updatePoint":{"line":76,"column":69,"index":2107},"line":76,"code":"    it('should upload a text file using the attachments api when user', async function () {\n      return insert('upload_apos_api.txt');\n    });","file":"attachments.js","skipped":false,"dir":"test"},{"name":"should upload an image file using the attachments api when user","suites":["Attachment","insert"],"updatePoint":{"line":79,"column":71,"index":2253},"line":79,"code":"    it('should upload an image file using the attachments api when user', async function () {\n      imageOne = await insert('upload_image.png');\n      assert(imageOne && imageOne._id);\n    });","file":"attachments.js","skipped":false,"dir":"test"},{"name":"should not upload an exe file","suites":["Attachment","insert"],"updatePoint":{"line":83,"column":37,"index":2412},"line":83,"code":"    it('should not upload an exe file', async function () {\n      const filename = 'bad_file.exe';\n      let good = false;\n\n      try {\n        await apos.attachment.insert(apos.task.getReq(), {\n          name: filename,\n          path: uploadSource + filename\n        });\n      } catch (e) {\n        good = true;\n      }\n\n      assert(good);\n    });","file":"attachments.js","skipped":false,"dir":"test"},{"name":"should crop an image file when requested","suites":["Attachment","insert"],"updatePoint":{"line":98,"column":48,"index":2774},"line":98,"code":"    it('should crop an image file when requested', async function () {\n      let result = await insert('crop_image.png');\n      const crop = {\n        top: 10,\n        left: 10,\n        width: 80,\n        height: 80\n      };\n      await apos.attachment.crop(apos.task.getReq(), result._id, crop);\n      result = await apos.db.collection(collectionName).findOne({\n        _id: result._id\n      });\n      assert(result);\n      assert(result.crops.length);\n      const t = uploadTarget + result._id + '-' + result.name + '.' + result.crops[0].left + '.' + result.crops[0].top + '.' + result.crops[0].width + '.' + result.crops[0].height + '.' + result.extension;\n      assert(fs.existsSync(t));\n    });","file":"attachments.js","skipped":false,"dir":"test"},{"name":"should handle a file with a jpeg extension properly and set extension to jpg","suites":["Attachment","insert"],"updatePoint":{"line":115,"column":84,"index":3510},"line":115,"code":"    it('should handle a file with a jpeg extension properly and set extension to jpg', async function () {\n      let result = await insert('crop_image.jpeg');\n      const crop = {\n        top: 10,\n        left: 10,\n        width: 80,\n        height: 80\n      };\n      await apos.attachment.crop(apos.task.getReq(), result._id, crop);\n      result = await apos.db.collection(collectionName).findOne({\n        _id: result._id\n      });\n      assert(result);\n      assert(result.crops.length);\n      const t = uploadTarget + result._id + '-' + result.name + '.' + result.crops[0].left + '.' + result.crops[0].top + '.' + result.crops[0].width + '.' + result.crops[0].height + '.jpg';\n      assert(fs.existsSync(t));\n      assert(result.extension === 'jpg');\n    });","file":"attachments.js","skipped":false,"dir":"test"},{"name":"should generate the \"full\" URL when no size specified for image","suites":["Attachment","insert"],"updatePoint":{"line":133,"column":71,"index":4260},"line":133,"code":"    it('should generate the \"full\" URL when no size specified for image', function () {\n      const url = apos.attachment.url({\n        group: 'images',\n        name: 'test',\n        extension: 'jpg',\n        _id: 'test'\n      });\n      assert(url === '/uploads/attachments/test-test.full.jpg');\n    });","file":"attachments.js","skipped":false,"dir":"test"},{"name":"should generate the \"one-half\" URL when one-half size specified for image","suites":["Attachment","insert"],"updatePoint":{"line":142,"column":81,"index":4574},"line":142,"code":"    it('should generate the \"one-half\" URL when one-half size specified for image', function () {\n      const url = apos.attachment.url({\n        group: 'images',\n        name: 'test',\n        extension: 'jpg',\n        _id: 'test'\n      }, {\n        size: 'one-half'\n      });\n      assert(url === '/uploads/attachments/test-test.one-half.jpg');\n    });","file":"attachments.js","skipped":false,"dir":"test"},{"name":"should generate the original URL when \"original\" size specified for image","suites":["Attachment","insert"],"updatePoint":{"line":153,"column":81,"index":4928},"line":153,"code":"    it('should generate the original URL when \"original\" size specified for image', function () {\n      const url = apos.attachment.url({\n        group: 'images',\n        name: 'test',\n        extension: 'jpg',\n        _id: 'test'\n      }, {\n        size: 'original'\n      });\n      assert(url === '/uploads/attachments/test-test.jpg');\n    });","file":"attachments.js","skipped":false,"dir":"test"},{"name":"should generate the original URL when no size specified for pdf","suites":["Attachment","insert"],"updatePoint":{"line":164,"column":71,"index":5263},"line":164,"code":"    it('should generate the original URL when no size specified for pdf', function () {\n      const url = apos.attachment.url({\n        group: 'office',\n        name: 'test',\n        extension: 'pdf',\n        _id: 'test'\n      });\n      assert(url === '/uploads/attachments/test-test.pdf');\n    });","file":"attachments.js","skipped":false,"dir":"test"},{"name":"should save and track docIds properly as part of an @apostrophecms/image","suites":["Attachment","insert"],"updatePoint":{"line":173,"column":80,"index":5571},"line":173,"code":"    it('should save and track docIds properly as part of an @apostrophecms/image', async function () {\n      let image = apos.image.newInstance();\n      const req = apos.task.getReq();\n      let attachment = await apos.attachment.insert(apos.task.getReq(), {\n        name: 'upload_image.png',\n        path: uploadSource + 'upload_image.png'\n      });\n      assert(attachment);\n      image.title = 'Test Image';\n      image.attachment = attachment;\n      image = await apos.image.insert(req, image);\n      assert(image);\n      attachment = await apos.attachment.db.findOne({\n        _id: image.attachment._id\n      });\n      assert(attachment);\n      assert(attachment.archived === false);\n      assert(attachment.docIds); // Should be 3 because of \"previous\"\n\n      assert(attachment.docIds.length === 3);\n      assert(attachment.docIds.find(docId => docId === `${image.aposDocId}:en:draft`));\n      assert(attachment.docIds.find(docId => docId === `${image.aposDocId}:en:published`));\n      assert(attachment.archivedDocIds);\n      assert(attachment.archivedDocIds.length === 0);\n\n      try {\n        const fd = fs.openSync(apos.rootDir + '/public' + apos.attachment.url(attachment, {\n          size: 'original'\n        }), 'r');\n        assert(fd);\n        fs.closeSync(fd);\n      } catch (e) {\n        assert(false);\n      }\n\n      image.archived = true;\n      await apos.image.update(req, image);\n      attachment = await apos.attachment.db.findOne({\n        _id: image.attachment._id\n      });\n      assert(!attachment.archived); // Because \"draft\" and \"previous\" both have it, unarchived\n\n      assert(attachment.docIds.length === 2);\n      assert(attachment.archivedDocIds.length === 1); // Should still be accessible at this point because the draft still uses it\n\n      const fd = fs.openSync(apos.rootDir + '/public' + apos.attachment.url(attachment, {\n        size: 'original'\n      }), 'r');\n      assert(fd);\n      fs.closeSync(fd); // Now archive the draft\n\n      const draftReq = apos.task.getReq({\n        mode: 'draft'\n      });\n      const draft = await apos.image.find(draftReq, {\n        aposDocId: image.aposDocId\n      }).toObject();\n      assert(draft);\n      assert(draft.aposLocale === 'en:draft');\n      draft.archived = true;\n      await apos.image.update(req, draft); // Now it should be inaccessible\n\n      attachment = await apos.attachment.db.findOne({\n        _id: image.attachment._id\n      });\n      assert(attachment.archived);\n      assert(attachment.docIds.length === 0);\n      assert(attachment.archivedDocIds.length === 3);\n      let good = false;\n\n      try {\n        fs.openSync(apos.rootDir + '/public' + apos.attachment.url(attachment, {\n          size: 'original'\n        }), 'r');\n      } catch (e) {\n        good = true;\n      }\n\n      if (!good) {\n        throw new Error('should not have been accessible');\n      } // Now rescue the published version from the archive\n\n\n      image.archived = false;\n      await apos.image.update(req, image);\n      attachment = await apos.attachment.db.findOne({\n        _id: image.attachment._id\n      });\n      assert(!attachment.archived);\n      assert(attachment.docIds.length === 1); // Don't forget \"previous\"\n\n      assert(attachment.archivedDocIds.length === 2);\n\n      try {\n        const fd = fs.openSync(apos.rootDir + '/public' + apos.attachment.url(attachment, {\n          size: 'original'\n        }), 'r');\n        assert(fd);\n        fs.closeSync(fd);\n      } catch (e) {\n        assert(false);\n      }\n    });","file":"attachments.js","skipped":false,"dir":"test"},{"name":"should annotate images with URLs using .all method","suites":["Attachment","api"],"updatePoint":{"line":278,"column":58,"index":9100},"line":278,"code":"    it('should annotate images with URLs using .all method', async function () {\n      assert(!imageOne._urls);\n      apos.attachment.all({\n        imageOne\n      }, {\n        annotate: true\n      });\n      assert(imageOne._urls);\n    });","file":"attachments.js","skipped":false,"dir":"test"},{"name":"should be subclassable","suites":["Base Module"],"updatePoint":{"line":11,"column":28,"index":244},"line":11,"code":"  it('should be subclassable', async function () {\n    apos = await t.create({\n      root: module,\n      modules: {\n        // will push an asset for us to look for later\n        '@apostrophecms/test-module-push': {},\n        // test the getOption method of modules\n        'test-get-option': {},\n        'test-get-option-2': {}\n      }\n    });\n    assert(apos.test && apos.test.color === 'red');\n  });","file":"base-module.js","skipped":false,"dir":"test"},{"name":"should produce correct responses via the getOption method","suites":["Base Module"],"updatePoint":{"line":24,"column":63,"index":682},"line":24,"code":"  it('should produce correct responses via the getOption method', async function () {\n    const mod = apos.modules['test-get-option'];\n    const req = apos.task.getReq();\n    assert.strictEqual(mod.getOption(req, 'flavors.grape.sweetness'), 20);\n    assert.strictEqual(mod.getOption(req, 'flavors.cheese.swarthiness'), undefined);\n    assert.strictEqual(mod.getOption(req, 'flavors.grape.ingredients.0'), 'chemicals');\n    const markup = await mod.render(req, 'test.html');\n    assert(markup.match(/20/));\n    assert(markup.match(/yup/));\n  });","file":"base-module.js","skipped":false,"dir":"test"},{"name":"should merge the options and local.js correctly","suites":["bootstrap of Apostrophe core"],"updatePoint":{"line":8,"column":53,"index":285},"line":8,"code":"  it('should merge the options and local.js correctly', async function () {\n    let apos;\n\n    try {\n      apos = await t.create({\n        root: module,\n        overrideTest: 'test' // overriden by data/local.js\n\n      });\n      assert(apos.options.overrideTest === 'foo');\n    } finally {\n      await t.destroy(apos);\n    }\n  });","file":"bootstrapping.js","skipped":false,"dir":"test"},{"name":"should accept a `__localPath` option and invoke local.js as a function if it is provided as one","suites":["bootstrap of Apostrophe core"],"updatePoint":{"line":22,"column":101,"index":664},"line":22,"code":"  it('should accept a `__localPath` option and invoke local.js as a function if it is provided as one', async function () {\n    let apos;\n\n    try {\n      apos = await t.create({\n        root: module,\n        overrideTest: 'test',\n        // overriden by data/local_fn.js\n        __localPath: '/data/local_fn.js'\n      });\n      assert(apos.options.overrideTest === 'foo');\n    } finally {\n      await t.destroy(apos);\n    }\n  });","file":"bootstrapping.js","skipped":false,"dir":"test"},{"name":"should invoke local.js as a function with the apos and config object","suites":["bootstrap of Apostrophe core"],"updatePoint":{"line":37,"column":74,"index":1068},"line":37,"code":"  it('should invoke local.js as a function with the apos and config object', async function () {\n    let apos;\n\n    try {\n      apos = await t.create({\n        root: module,\n        overrideTest: 'test',\n        // concated in local_fn_b.js\n        __localPath: '/data/local_fn_b.js'\n      });\n      assert(apos.options.overrideTest === 'test-foo');\n    } finally {\n      await t.destroy(apos);\n    }\n  });","file":"bootstrapping.js","skipped":false,"dir":"test"},{"name":"should support bundle","suites":["Bundle"],"updatePoint":{"line":35,"column":27,"index":1132},"line":35,"code":"  it('should support bundle', async function () {\n    let apos;\n\n    try {\n      apos = await t.create({\n        root: module,\n        modules: {\n          'test-bundle': {},\n          'test-bundle-sub': {}\n        }\n      });\n      assert(apos.test && apos.test.color === 'red');\n      assert(apos.subtest && apos.subtest.color === 'red');\n    } finally {\n      if (apos) {\n        await apos.destroy();\n      }\n    }\n  });","file":"bundle.js","skipped":false,"dir":"test"},{"name":"should ignore transitive dependencies even when present in node_modules due to flattening","suites":["Bundle"],"updatePoint":{"line":54,"column":95,"index":1625},"line":54,"code":"  it('should ignore transitive dependencies even when present in node_modules due to flattening', async function () {\n    let apos;\n\n    try {\n      apos = await t.create({\n        root: module,\n        modules: {\n          'same-name-as-transitive-dependency': {}\n        }\n      });\n      assert(apos.same && apos.same.color === 'purple');\n    } finally {\n      if (apos) {\n        await apos.destroy();\n      }\n    }\n  });","file":"bundle.js","skipped":false,"dir":"test"},{"name":"should exist on the apos object","suites":["Caches"],"updatePoint":{"line":11,"column":37,"index":250},"line":11,"code":"  it('should exist on the apos object', async function () {\n    apos = await t.create({\n      root: module\n    });\n    assert(apos.cache);\n  });","file":"caches.js","skipped":false,"dir":"test"},{"name":"should not contain capuchin yet","suites":["Caches"],"updatePoint":{"line":17,"column":37,"index":395},"line":17,"code":"  it('should not contain capuchin yet', async function () {\n    assert(!(await apos.cache.get('test', 'capuchin')));\n  });","file":"caches.js","skipped":false,"dir":"test"},{"name":"should allow us to store capuchin","suites":["Caches"],"updatePoint":{"line":20,"column":39,"index":520},"line":20,"code":"  it('should allow us to store capuchin', async function () {\n    await apos.cache.set('test', 'capuchin', {\n      message: 'eek eek'\n    });\n  });","file":"caches.js","skipped":false,"dir":"test"},{"name":"should now contain capuchin","suites":["Caches"],"updatePoint":{"line":25,"column":33,"index":662},"line":25,"code":"  it('should now contain capuchin', async function () {\n    const monkey = await apos.cache.get('test', 'capuchin');\n    assert(monkey);\n    assert(monkey.message === 'eek eek');\n  });","file":"caches.js","skipped":false,"dir":"test"},{"name":"should not crash on clear #2","suites":["Caches"],"updatePoint":{"line":30,"column":34,"index":848},"line":30,"code":"  it('should not crash on clear #2', async function () {\n    await apos.cache.clear('test');\n  });","file":"caches.js","skipped":false,"dir":"test"},{"name":"should not contain capuchin anymore","suites":["Caches"],"updatePoint":{"line":33,"column":41,"index":954},"line":33,"code":"  it('should not contain capuchin anymore', async function () {\n    assert(!(await apos.cache.get('test', 'capuchin')));\n  });","file":"caches.js","skipped":false,"dir":"test"},{"name":"should replicate key docs across locales at startup","suites":["Locales"],"updatePoint":{"line":57,"column":57,"index":1252},"line":57,"code":"  it('should replicate key docs across locales at startup', async function () {\n    apos = await t.create(config);\n    const homes = await apos.doc.db.find({\n      parkedId: 'home'\n    }).toArray(); // Draft and published\n\n    assert(homes.length === 8);\n    const archives = await apos.doc.db.find({\n      parkedId: 'archive'\n    }).toArray();\n    assert(archives.length === 8); // Make sure all archive docs have the archived property set `true`\n\n    assert(!archives.find(archive => !archive.archived));\n    const globals = await apos.doc.db.find({\n      type: '@apostrophecms/global'\n    }).toArray();\n    assert(globals.length === 8);\n    const people = await apos.doc.db.find({\n      parkedId: 'people'\n    }).toArray();\n    assert(people.length === 8); // People page in fr-CA has expected parked properties\n\n    const req = apos.task.getReq();\n    const peoplePageEn = await apos.page.find(req, {\n      parkedId: 'people'\n    }).toObject();\n    const frCAReq = apos.task.getReq({\n      locale: 'fr-CA'\n    });\n    let peoplePageFrCA = await apos.page.find(frCAReq, {\n      parkedId: 'people'\n    }).toObject();\n    assert(peoplePageEn.aposDocId === peoplePageFrCA.aposDocId);\n    assert(peoplePageEn.aposLocale === 'en:published');\n    assert(peoplePageFrCA.aposLocale === 'fr-CA:published');\n    assert(peoplePageEn.title === 'People');\n    assert(peoplePageFrCA.title === 'People');\n    peoplePageFrCA.title = 'Altered';\n    await apos.page.update(frCAReq, peoplePageFrCA);\n    peoplePageFrCA = await apos.page.find(frCAReq, {\n      parkedId: 'people'\n    }).toObject();\n    assert(peoplePageFrCA.title === 'Altered');\n  });","file":"content-i18n.js","skipped":false,"dir":"test"},{"name":"should not replicate redundantly on a second startup in same db, but should repark parked properties","suites":["Locales"],"updatePoint":{"line":102,"column":106,"index":2948},"line":102,"code":"  it('should not replicate redundantly on a second startup in same db, but should repark parked properties', async function () {\n    const apos2 = await t.create({ ...config,\n      shortName: apos.options.shortName\n    });\n    const homes = await apos2.doc.db.find({\n      parkedId: 'home'\n    }).toArray(); // Draft and published\n\n    assert(homes.length === 8);\n    home = homes.find(home => home.aposLocale === 'en:published');\n    const people = await apos2.doc.db.find({\n      parkedId: 'people'\n    }).toArray();\n    assert(people.length === 8);\n    const archives = await apos2.doc.db.find({\n      parkedId: 'archive'\n    }).toArray();\n    assert(archives.length === 8);\n    const globals = await apos2.doc.db.find({\n      type: '@apostrophecms/global'\n    }).toArray();\n    assert(globals.length === 8);\n    const frCAReq = apos2.task.getReq({\n      locale: 'fr-CA'\n    });\n    const peoplePageFrCA = await apos2.page.find(frCAReq, {\n      parkedId: 'people'\n    }).toObject(); // Restored to parked value\n\n    assert(peoplePageFrCA.title === 'People');\n    await apos2.destroy();\n  });","file":"content-i18n.js","skipped":false,"dir":"test"},{"name":"should have just one locale for a newly inserted draft page","suites":["Locales"],"updatePoint":{"line":135,"column":65,"index":4020},"line":135,"code":"  it('should have just one locale for a newly inserted draft page', async function () {\n    const req = apos.task.getReq({\n      mode: 'draft'\n    });\n    child = await apos.page.insert(req, '_home', 'lastChild', {\n      title: 'Child Page',\n      type: 'default-page'\n    });\n    const versions = await apos.doc.db.find({\n      aposDocId: child.aposDocId\n    }).toArray();\n    assert(versions.length === 1);\n  });","file":"content-i18n.js","skipped":false,"dir":"test"},{"name":"should be able to insert test user","suites":["Locales"],"updatePoint":{"line":148,"column":40,"index":4410},"line":148,"code":"  it('should be able to insert test user', async function () {\n    const user = apos.user.newInstance();\n    user.title = 'admin';\n    user.username = 'admin';\n    user.password = 'admin';\n    user.email = 'ad@min.com';\n    user.role = 'admin';\n    return apos.user.insert(apos.task.getReq(), user);\n  });","file":"content-i18n.js","skipped":false,"dir":"test"},{"name":"REST: should be able to log in as admin","suites":["Locales"],"updatePoint":{"line":157,"column":45,"index":4721},"line":157,"code":"  it('REST: should be able to log in as admin', async () => {\n    jar = apos.http.jar();\n    await apos.http.post('/api/v1/@apostrophecms/login/login', {\n      body: {\n        username: 'admin',\n        password: 'admin',\n        session: true\n      },\n      jar\n    });\n    const page = await apos.http.get('/', {\n      jar\n    });\n    assert(page.match(/logged in/));\n    assert(page.includes(`<a href=\"/api/v1/@apostrophecms/page/${home._id}/locale/en-CA\">Canadian English (en-CA)</a>`));\n  });","file":"content-i18n.js","skipped":false,"dir":"test"},{"name":"localize API should succeed","suites":["Locales"],"updatePoint":{"line":173,"column":33,"index":5207},"line":173,"code":"  it('localize API should succeed', async () => {\n    return apos.http.post(`/api/v1/@apostrophecms/page/${child._id}/localize`, {\n      body: {\n        toLocale: 'en-CA'\n      },\n      jar\n    });\n  });","file":"content-i18n.js","skipped":false,"dir":"test"},{"name":"after localizing child page should exist in 2 locales","suites":["Locales"],"updatePoint":{"line":181,"column":59,"index":5437},"line":181,"code":"  it('after localizing child page should exist in 2 locales', async () => {\n    const versions = await apos.doc.db.find({\n      aposDocId: child.aposDocId\n    }).toArray();\n    assert(versions.length === 2);\n    assert(!versions.find(version => version.title !== 'Child Page'));\n    const reqEn = apos.task.getReq({\n      locale: 'en',\n      mode: 'draft'\n    });\n    const en = await apos.doc.find(reqEn, {\n      slug: '/child-page'\n    }).toObject();\n    assert(en);\n    assert.strictEqual(en._url, 'http://localhost:3000/child-page');\n    await apos.page.publish(reqEn, en);\n    const reqEnCA = apos.task.getReq({\n      locale: 'en-CA',\n      mode: 'draft'\n    });\n    const enCA = await apos.doc.find(reqEnCA, {\n      slug: '/child-page'\n    }).toObject();\n    assert(enCA);\n    assert.strictEqual(enCA._url, 'http://localhost:3000/ca-en/child-page'); // Distinguish the content in this locale\n\n    enCA.title = 'Child Page, Toronto Style';\n    assert(apos.page.update(reqEnCA, enCA)); // Not published yet\n\n    try {\n      await apos.http.get('/ca-en/child-page', {});\n      assert(false);\n    } catch (e) {\n      assert(e.status === 404);\n    }\n\n    await apos.page.publish(reqEnCA, enCA); // Now it should work\n\n    const childPage = await apos.http.get('/ca-en/child-page', {});\n    assert(childPage.includes('<title>Child Page, Toronto Style</title>')); // Navigation links are localized\n\n    assert(childPage.includes('\"http://localhost:3000/ca-en/\">Home: /'));\n    assert(childPage.includes('\"http://localhost:3000/ca-en/child-page\">Tab: /child-page')); // Locale-switching links are present for locales that are available\n    // and fall back to home page for locales that are not\n\n    const childPageId = enCA._id.replace(':draft', ':published');\n\n    assert(childPage.includes(`\"/api/v1/@apostrophecms/page/${childPageId}/locale/en\">English (en)</a></li>`));\n    assert(childPage.includes(`\"/api/v1/@apostrophecms/page/${childPageId}/locale/en-CA\">Canadian English (en-CA)</a></li>`));\n    assert(childPage.includes('\"http://localhost:3000/ca-fr/\">Canadian French (fr-CA)</a></li>'));\n    assert(childPage.includes('\"http://example.mx/\">Mexico (es-MX)</a></li>')); // And the home page should be reachable\n\n    const home = await apos.http.get('/ca-en/');\n    assert(home);\n  });","file":"content-i18n.js","skipped":false,"dir":"test"},{"name":"Mexico locale should be received when hostname is correct","suites":["Locales"],"updatePoint":{"line":236,"column":63,"index":7735},"line":236,"code":"  it('Mexico locale should be received when hostname is correct', async () => {\n    const reqEsMX = apos.task.getReq({\n      locale: 'es-MX',\n      mode: 'draft'\n    });\n    let esMX = await apos.doc.find(reqEsMX, {\n      slug: '/'\n    }).toObject();\n    assert(esMX);\n    assert.strictEqual(esMX._url, 'http://example.mx/'); // Distinguish the content in this locale\n\n    esMX.title = 'Pagina De Inicio';\n    esMX = await apos.page.update(reqEsMX, esMX);\n    await apos.page.publish(reqEsMX, esMX); // Without hostname, we default to English\n\n    const homePage = await apos.http.get('/', {});\n    assert(homePage.includes('<title>Home</title>'));\n    const homePageEsMX = await apos.http.get('/', {\n      headers: {\n        'X-Forwarded-Host': 'example.mx'\n      }\n    });\n    assert(homePageEsMX.includes('<title>Pagina De Inicio</title>'));\n  });","file":"content-i18n.js","skipped":false,"dir":"test"},{"name":"localize API should not succeed a second time without the update flag","suites":["Locales"],"updatePoint":{"line":260,"column":75,"index":8598},"line":260,"code":"  it('localize API should not succeed a second time without the update flag', async () => {\n    try {\n      await apos.http.post(`/api/v1/@apostrophecms/page/${child._id}/localize`, {\n        body: {\n          toLocale: 'en-CA'\n        },\n        jar\n      });\n      assert(false);\n    } catch (e) {\n      assert(e.status === 409);\n    }\n  });","file":"content-i18n.js","skipped":false,"dir":"test"},{"name":"localize API should succeed a second time with the update flag","suites":["Locales"],"updatePoint":{"line":273,"column":68,"index":8935},"line":273,"code":"  it('localize API should succeed a second time with the update flag', async () => {\n    return apos.http.post(`/api/v1/@apostrophecms/page/${child._id}/localize`, {\n      body: {\n        toLocale: 'en-CA',\n        update: true\n      },\n      jar\n    });\n  });","file":"content-i18n.js","skipped":false,"dir":"test"},{"name":"should exist on the apos object","suites":["Db"],"updatePoint":{"line":12,"column":37,"index":278},"line":12,"code":"  it('should exist on the apos object', async function () {\n    apos = await t.create({\n      root: module\n    });\n    assert(apos.db); // Verify a normal, boring connection to localhost without the db option worked\n\n    const doc = await apos.doc.db.findOne();\n    assert(doc);\n  });","file":"db.js","skipped":false,"dir":"test"},{"name":"should be able to launch a second instance reusing the connection","suites":["Db"],"updatePoint":{"line":21,"column":71,"index":597},"line":21,"code":"  it('should be able to launch a second instance reusing the connection', async function () {\n    // Often takes too long otherwise\n    this.timeout(10000);\n    apos2 = await t.create({\n      root: module,\n      modules: {\n        '@apostrophecms/db': {\n          options: {\n            client: apos.dbClient,\n            uri: 'mongodb://this-will-not-work-unless-db-successfully-overrides-it/fail'\n          }\n        }\n      }\n    });\n    const doc = await apos2.doc.db.findOne();\n    assert(doc);\n  });","file":"db.js","skipped":false,"dir":"test"},{"name":"should be a property of the apos object","suites":["Docs"],"updatePoint":{"line":14,"column":45,"index":292},"line":14,"code":"  it('should be a property of the apos object', async function () {\n    apos = await t.create({\n      root: module,\n      modules: {\n        'test-people': {\n          extend: '@apostrophecms/piece-type',\n          fields: {\n            add: {\n              _friends: {\n                type: 'relationship',\n                max: 1,\n                withType: 'test-people',\n                label: 'Friends'\n              }\n            }\n          }\n        }\n      }\n    });\n    assert(apos.doc);\n  });","file":"docs.js","skipped":false,"dir":"test"},{"name":"should have a db property","suites":["Docs"],"updatePoint":{"line":35,"column":31,"index":780},"line":35,"code":"  it('should have a db property', function () {\n    assert(apos.doc.db);\n  }); /// ///","file":"docs.js","skipped":false,"dir":"test"},{"name":"should make sure all of the expected indexes are configured","suites":["Docs"],"updatePoint":{"line":41,"column":65,"index":923},"line":41,"code":"  it('should make sure all of the expected indexes are configured', async function () {\n    const expectedIndexes = ['type', 'slug', 'titleSortified'];\n    const actualIndexes = [];\n    const info = await apos.doc.db.indexInformation(); // Extract the actual index info we care about.\n\n    _.forEach(info, function (index) {\n      actualIndexes.push(index[0][0]);\n    }); // Now make sure everything in expectedIndexes is in actualIndexes.\n\n\n    _.forEach(expectedIndexes, function (index) {\n      assert(_.includes(actualIndexes, index));\n    }); // Lastly, make sure there is a text index present\n\n\n    assert(info.highSearchText_text_lowSearchText_text_title_text_searchBoost_text[0][1] === 'text');\n  });","file":"docs.js","skipped":false,"dir":"test"},{"name":"should make sure there is no test data hanging around from last time","suites":["Docs"],"updatePoint":{"line":58,"column":74,"index":1641},"line":58,"code":"  it('should make sure there is no test data hanging around from last time', async function () {\n    // Attempt to purge the entire aposDocs collection\n    await apos.doc.db.deleteMany({}); // Make sure it went away\n\n    const docs = await apos.doc.db.find({\n      slug: 'larry'\n    }).toArray();\n    assert(docs.length === 0);\n  });","file":"docs.js","skipped":false,"dir":"test"},{"name":"should be able to use db to insert documents","suites":["Docs"],"updatePoint":{"line":67,"column":50,"index":1951},"line":67,"code":"  it('should be able to use db to insert documents', async function () {\n    const testItems = [{\n      _id: 'lori:en:published',\n      aposDocId: 'lori',\n      aposLocale: 'en:published',\n      slug: 'lori',\n      visibility: 'public',\n      type: 'test-people',\n      firstName: 'Lori',\n      lastName: 'Pizzaroni',\n      age: 32,\n      alive: true\n    }, {\n      _id: 'larry:en:published',\n      aposDocId: 'larry',\n      aposLocale: 'en:published',\n      slug: 'larry',\n      visibility: 'public',\n      type: 'test-people',\n      firstName: 'Larry',\n      lastName: 'Cherber',\n      age: 28,\n      alive: true\n    }, {\n      _id: 'carl:en:published',\n      aposDocId: 'carl',\n      aposLocale: 'en:published',\n      slug: 'carl',\n      visibility: 'public',\n      type: 'test-people',\n      firstName: 'Carl',\n      lastName: 'Sagan',\n      age: 62,\n      alive: false,\n      friendsIds: ['larry']\n    }];\n    const response = await apos.doc.db.insertMany(testItems);\n    assert(response.result.ok === 1);\n    assert(response.insertedCount === 3);\n  });","file":"docs.js","skipped":false,"dir":"test"},{"name":"should be able to fetch schema relationships","suites":["Docs"],"updatePoint":{"line":107,"column":50,"index":3010},"line":107,"code":"  it('should be able to fetch schema relationships', async function () {\n    const manager = apos.doc.getManager('test-people');\n    const req = apos.task.getAnonReq();\n    assert(manager);\n    assert(manager.find);\n    assert(manager.schema);\n    const cursor = await manager.find(req, {\n      slug: 'carl'\n    });\n    assert(cursor);\n    const person = await cursor.toObject();\n    assert(person);\n    assert(person.slug === 'carl');\n    assert(person._friends);\n    assert(person._friends[0].slug === 'larry');\n  }); /// ///","file":"docs.js","skipped":false,"dir":"test"},{"name":"should fail if you try to insert a document with the same unique key twice","suites":["Docs"],"updatePoint":{"line":126,"column":80,"index":3595},"line":126,"code":"  it('should fail if you try to insert a document with the same unique key twice', async function () {\n    try {\n      await apos.doc.db.insertMany([{\n        _id: 'peter:en:published',\n        aposDocId: 'peter',\n        aposLocale: 'en:published',\n        type: 'test-people',\n        visibility: 'loginRequired',\n        age: 70,\n        slug: 'peter'\n      }, // ids will not conflict, but slug will\n      {\n        _id: 'peter2:en:published',\n        aposDocId: 'peter2',\n        aposLocale: 'en:published',\n        type: 'test-people',\n        visibility: 'loginRequired',\n        age: 70,\n        slug: 'peter'\n      }]);\n      assert(false);\n    } catch (e) {\n      assert(e);\n      assert(e.code === 11000);\n    }\n  }); /// ///","file":"docs.js","skipped":false,"dir":"test"},{"name":"should have a find method on docs that returns a query","suites":["Docs"],"updatePoint":{"line":155,"column":60,"index":4336},"line":155,"code":"  it('should have a find method on docs that returns a query', function () {\n    const query = apos.doc.find(apos.task.getAnonReq());\n    assert(query);\n    assert(query.toArray);\n  });","file":"docs.js","skipped":false,"dir":"test"},{"name":"should be able to find all test documents and output them as an array","suites":["Docs"],"updatePoint":{"line":160,"column":75,"index":4537},"line":160,"code":"  it('should be able to find all test documents and output them as an array', async function () {\n    const cursor = apos.doc.find(apos.task.getAnonReq(), {\n      type: 'test-people'\n    });\n    const docs = await cursor.toArray(); // There should be only 3 results.\n\n    assert(docs.length === 3); // They should all have a type of test-people\n\n    assert(docs[0].type === 'test-people');\n  }); /// ///","file":"docs.js","skipped":false,"dir":"test"},{"name":"should be able to specify which fields to get by passing a projection object","suites":["Docs"],"updatePoint":{"line":173,"column":82,"index":4976},"line":173,"code":"  it('should be able to specify which fields to get by passing a projection object', async function () {\n    const cursor = apos.doc.find(apos.task.getAnonReq(), {\n      type: 'test-people'\n    }, {\n      project: {\n        age: 1\n      }\n    });\n    const docs = await cursor.toArray(); // There SHOULD be an age\n\n    assert(docs[0].age); // There SHOULD NOT be a firstName\n\n    assert(!docs[0].firstName);\n  }); /// ///","file":"docs.js","skipped":false,"dir":"test"},{"name":"should be able to sort","suites":["Docs"],"updatePoint":{"line":190,"column":28,"index":5368},"line":190,"code":"  it('should be able to sort', async function () {\n    const cursor = apos.doc.find(apos.task.getAnonReq(), {\n      type: 'test-people'\n    }).sort({\n      age: 1\n    });\n    const docs = await cursor.toArray();\n    assert(docs[0].slug === 'larry');\n  });","file":"docs.js","skipped":false,"dir":"test"},{"name":"should be able to sort by multiple keys","suites":["Docs"],"updatePoint":{"line":199,"column":45,"index":5641},"line":199,"code":"  it('should be able to sort by multiple keys', async function () {\n    const cursor = apos.doc.find(apos.task.getAnonReq(), {\n      type: 'test-people'\n    }).sort({\n      firstName: 1,\n      age: 1\n    });\n    const docs = await cursor.toArray();\n    assert(docs[0].slug === 'carl');\n    assert(docs[1].slug === 'larry');\n  }); /// ///","file":"docs.js","skipped":false,"dir":"test"},{"name":"should have an \"insert\" method that returns a new database object","suites":["Docs"],"updatePoint":{"line":213,"column":71,"index":6031},"line":213,"code":"  it('should have an \"insert\" method that returns a new database object', async function () {\n    const object = {\n      slug: 'one',\n      visibility: 'public',\n      type: 'test-people',\n      firstName: 'Lori',\n      lastName: 'Ferber',\n      age: 15,\n      alive: true\n    };\n    const response = await apos.doc.insert(apos.task.getReq(), object);\n    assert(response);\n    assert(response._id);\n    assert(response._id.endsWith(':en:published'));\n    assert(response._id === `${response.aposDocId}:${response.aposLocale}`); // Direct insertion in published locale should autocreate\n    // a corresponding draft for internal consistency\n\n    const draft = await apos.doc.db.findOne({\n      _id: `${response.aposDocId}:en:draft`\n    });\n    assert(draft); // Unique index allows for duplicates across locales\n\n    assert(object.slug === draft.slug); // Content properties coming through\n\n    assert(draft.firstName === response.firstName);\n  });","file":"docs.js","skipped":false,"dir":"test"},{"name":"should be able to insert a new object into the docs collection in the database","suites":["Docs"],"updatePoint":{"line":239,"column":84,"index":6993},"line":239,"code":"  it('should be able to insert a new object into the docs collection in the database', async function () {\n    const cursor = apos.doc.find(apos.task.getReq(), {\n      type: 'test-people',\n      slug: 'one'\n    });\n    const docs = await cursor.toArray();\n    assert(docs[0].slug === 'one');\n  });","file":"docs.js","skipped":false,"dir":"test"},{"name":"should append the slug property with a numeral if inserting an object whose slug already exists in the database","suites":["Docs"],"updatePoint":{"line":247,"column":117,"index":7324},"line":247,"code":"  it('should append the slug property with a numeral if inserting an object whose slug already exists in the database', async function () {\n    const object = {\n      slug: 'one',\n      visibility: 'public',\n      type: 'test-people',\n      firstName: 'Harry',\n      lastName: 'Gerber',\n      age: 29,\n      alive: true\n    };\n    const doc = await apos.doc.insert(apos.task.getReq(), object);\n    assert(doc);\n    assert(doc.slug.match(/^one\\d+$/));\n  });","file":"docs.js","skipped":false,"dir":"test"},{"name":"should not allow you to call the insert method if you are not an admin","suites":["Docs"],"updatePoint":{"line":261,"column":76,"index":7740},"line":261,"code":"  it('should not allow you to call the insert method if you are not an admin', async function () {\n    const object = {\n      slug: 'not-for-you',\n      visibility: 'loginRequired',\n      type: 'test-people',\n      firstName: 'Darry',\n      lastName: 'Derrber',\n      age: 5,\n      alive: true\n    };\n\n    try {\n      await apos.doc.insert(apos.task.getAnonReq(), object);\n      assert(false);\n    } catch (e) {\n      assert(e);\n    }\n  }); /// ///","file":"docs.js","skipped":false,"dir":"test"},{"name":"should have an \"update\" method on docs that updates an existing database object","suites":["Docs"],"updatePoint":{"line":282,"column":85,"index":8223},"line":282,"code":"  it('should have an \"update\" method on docs that updates an existing database object', async function () {\n    const req = apos.task.getReq();\n    const docs = await apos.doc.find(req, {\n      slug: 'one'\n    }).toArray(); // We should have one document in our results.\n\n    assert(docs);\n    assert(docs.length === 1); // Grab the object and update the `alive` property.\n\n    const object = docs[0];\n    object.alive = false;\n    const updated = await apos.doc.update(apos.task.getReq(), object); // Has the property been updated?\n\n    assert(updated);\n    assert(updated.alive === false);\n  });","file":"docs.js","skipped":false,"dir":"test"},{"name":"should append an updated slug with a numeral if the updated slug already exists","suites":["Docs"],"updatePoint":{"line":298,"column":85,"index":8821},"line":298,"code":"  it('should append an updated slug with a numeral if the updated slug already exists', async function () {\n    const req = apos.task.getReq();\n    const cursor = apos.doc.find(req, {\n      type: 'test-people',\n      slug: 'one'\n    });\n    const doc = await cursor.toObject();\n    assert(doc);\n    doc.slug = 'peter';\n    const updated = await apos.doc.update(req, doc);\n    assert(updated); // Has the updated slug been appended?\n\n    assert(updated.slug.match(/^peter\\d+$/));\n  });","file":"docs.js","skipped":false,"dir":"test"},{"name":"should be able to fetch all unique firstNames with toDistinct","suites":["Docs"],"updatePoint":{"line":312,"column":67,"index":9288},"line":312,"code":"  it('should be able to fetch all unique firstNames with toDistinct', async function () {\n    const firstNames = await apos.doc.find(apos.task.getReq(), {\n      type: 'test-people'\n    }).toDistinct('firstName');\n    assert(Array.isArray(firstNames));\n    assert(firstNames.length === 4);\n    assert(_.includes(firstNames, 'Larry'));\n  });","file":"docs.js","skipped":false,"dir":"test"},{"name":"should be able to fetch all unique firstNames and their counts with toDistinct and distinctCounts","suites":["Docs"],"updatePoint":{"line":320,"column":103,"index":9664},"line":320,"code":"  it('should be able to fetch all unique firstNames and their counts with toDistinct and distinctCounts', async function () {\n    const req = apos.task.getReq();\n    const cursor = apos.doc.find(req, {\n      type: 'test-people'\n    }).distinctCounts(true);\n    const firstNames = await cursor.toDistinct('firstName');\n    assert(Array.isArray(firstNames));\n    assert(firstNames.length === 4);\n    assert(_.includes(firstNames, 'Larry'));\n    const counts = await cursor.get('distinctCounts');\n    assert(counts.Larry === 1);\n    assert(counts.Lori === 2);\n  });","file":"docs.js","skipped":false,"dir":"test"},{"name":"should not allow you to call the update method if you are not an admin","suites":["Docs"],"updatePoint":{"line":333,"column":76,"index":10200},"line":333,"code":"  it('should not allow you to call the update method if you are not an admin', async function () {\n    const cursor = apos.doc.find(apos.task.getAnonReq(), {\n      type: 'test-people',\n      slug: 'lori'\n    });\n    const doc = cursor.toObject();\n    assert(doc);\n    doc.slug = 'laurie';\n\n    try {\n      await apos.doc.update(apos.task.getAnonReq(), doc);\n      assert(false);\n    } catch (e) {\n      assert(e);\n    }\n  }); /// ///","file":"docs.js","skipped":false,"dir":"test"},{"name":"should archive docs by updating them","suites":["Docs"],"updatePoint":{"line":352,"column":42,"index":10624},"line":352,"code":"  it('should archive docs by updating them', async function () {\n    const req = apos.task.getReq();\n    const doc = await apos.doc.find(req, {\n      type: 'test-people',\n      slug: 'carl'\n    }).toObject();\n    const archived = await apos.doc.update(req, { ...doc,\n      archived: true\n    });\n    assert(archived.archived === true);\n  });","file":"docs.js","skipped":false,"dir":"test"},{"name":"should not be able to find the archived object","suites":["Docs"],"updatePoint":{"line":363,"column":52,"index":10976},"line":363,"code":"  it('should not be able to find the archived object', async function () {\n    const req = apos.task.getReq();\n    const doc = await apos.doc.find(req, {\n      slug: 'carl'\n    }).toObject();\n    assert(!doc);\n  });","file":"docs.js","skipped":false,"dir":"test"},{"name":"should not allow you to call the archive method if you are not an admin","suites":["Docs"],"updatePoint":{"line":370,"column":77,"index":11217},"line":370,"code":"  it('should not allow you to call the archive method if you are not an admin', async function () {\n    try {\n      await apos.doc.archived(apos.task.getAnonReq(), {\n        slug: 'lori'\n      });\n      assert(false);\n    } catch (e) {\n      assert(e);\n    }\n  });","file":"docs.js","skipped":false,"dir":"test"},{"name":"should be able to find the archived object when using the \"archived\" method on find()","suites":["Docs"],"updatePoint":{"line":380,"column":91,"index":11496},"line":380,"code":"  it('should be able to find the archived object when using the \"archived\" method on find()', async function () {\n    // Look for the archived doc with the `deduplicate-` + its `_id` + its `name` properties.\n    const doc = await apos.doc.find(apos.task.getReq(), {\n      slug: 'deduplicate-carl-carl'\n    }).archived(true).toObject();\n    assert(doc);\n    assert(doc.archived);\n  }); /// ///","file":"docs.js","skipped":false,"dir":"test"},{"name":"should rescue a doc by updating the \"archived\" property from an object","suites":["Docs"],"updatePoint":{"line":391,"column":76,"index":11897},"line":391,"code":"  it('should rescue a doc by updating the \"archived\" property from an object', async function () {\n    const req = apos.task.getReq();\n    const doc = await apos.doc.find(req, {\n      slug: 'deduplicate-carl-carl'\n    }).archived(null).toObject();\n    await apos.doc.update(req, { ...doc,\n      archived: false\n    });\n    const newDoc = await apos.doc.find(req, {\n      slug: 'carl'\n    }).toObject(); // We should have a document.\n\n    assert(newDoc);\n    assert(newDoc.slug === 'carl');\n    assert(newDoc.archived === false);\n  });","file":"docs.js","skipped":false,"dir":"test"},{"name":"should not allow you to call the restore method if you are not an admin","suites":["Docs"],"updatePoint":{"line":407,"column":77,"index":12433},"line":407,"code":"  it('should not allow you to call the restore method if you are not an admin', async function () {\n    try {\n      await apos.doc.restore(apos.task.getAnonReq(), {\n        slug: 'carl'\n      });\n      assert(false);\n    } catch (e) {\n      assert(e);\n    }\n  });","file":"docs.js","skipped":false,"dir":"test"},{"name":"should throw an exception on find() if you fail to pass req as the first argument","suites":["Docs"],"updatePoint":{"line":417,"column":87,"index":12707},"line":417,"code":"  it('should throw an exception on find() if you fail to pass req as the first argument', async function () {\n    try {\n      await apos.doc.find({\n        slug: 'larry'\n      });\n      assert(false);\n    } catch (e) {\n      assert(e);\n    }\n  });","file":"docs.js","skipped":false,"dir":"test"},{"name":"should respect _ids()","suites":["Docs"],"updatePoint":{"line":427,"column":27,"index":12895},"line":427,"code":"  it('should respect _ids()', async function () {\n    const testItems = [];\n    let i;\n\n    for (i = 0; i < 100; i++) {\n      testItems.push({\n        _id: `i${i}:en:published`,\n        aposDocId: `i${i}`,\n        aposLocale: 'en:published',\n        slug: `i${i}`,\n        visibility: 'public',\n        type: 'test',\n        title: 'title: ' + i\n      });\n    }\n\n    await apos.doc.db.insertMany(testItems);\n    const docs = await apos.doc.find(apos.task.getAnonReq(), {})._ids(['i7:en:published', 'i3:en:published', 'i27:en:published', 'i9:en:published']).toArray();\n    assert(docs[0]._id === 'i7:en:published');\n    assert(docs[0].aposDocId === 'i7');\n    assert(docs[0].aposLocale === 'en:published');\n    assert(docs[1]._id === 'i3:en:published');\n    assert(docs[2]._id === 'i27:en:published');\n    assert(docs[3]._id === 'i9:en:published');\n    assert(!docs[4]);\n  });","file":"docs.js","skipped":false,"dir":"test"},{"name":"should respect _ids with skip and limit","suites":["Docs"],"updatePoint":{"line":453,"column":45,"index":13789},"line":453,"code":"  it('should respect _ids with skip and limit', async function () {\n    // Relies on test data of previous test\n    const docs = await apos.doc.find(apos.task.getAnonReq(), {})._ids(['i7:en:published', 'i3:en:published', 'i27:en:published', 'i9:en:published']).skip(2).limit(2).toArray();\n    assert(docs[0]._id === 'i27:en:published');\n    assert(docs[1]._id === 'i9:en:published');\n    assert(!docs[2]);\n  });","file":"docs.js","skipped":false,"dir":"test"},{"name":"should be able to lock a document","suites":["Docs"],"updatePoint":{"line":460,"column":39,"index":14195},"line":460,"code":"  it('should be able to lock a document', async function () {\n    const req = apos.task.getReq();\n    const doc = await apos.doc.db.findOne({\n      _id: 'i27:en:published'\n    });\n\n    try {\n      await apos.doc.lock(req, doc, 'abc');\n    } catch (e) {\n      assert(!e);\n    }\n  });","file":"docs.js","skipped":false,"dir":"test"},{"name":"should not be able to lock a document with a different tabId","suites":["Docs"],"updatePoint":{"line":472,"column":66,"index":14505},"line":472,"code":"  it('should not be able to lock a document with a different tabId', async function () {\n    const req = apos.task.getReq();\n    const doc = await apos.doc.db.findOne({\n      _id: 'i27:en:published'\n    });\n\n    try {\n      await apos.doc.lock(req, doc, 'def');\n    } catch (e) {\n      assert(e);\n      assert(e.name === 'locked');\n    }\n  });","file":"docs.js","skipped":false,"dir":"test"},{"name":"should be able to refresh the lock with the same tabId","suites":["Docs"],"updatePoint":{"line":485,"column":60,"index":14843},"line":485,"code":"  it('should be able to refresh the lock with the same tabId', async function () {\n    const req = apos.task.getReq();\n    const doc = await apos.doc.db.findOne({\n      _id: 'i27:en:published'\n    });\n\n    try {\n      await apos.doc.lock(req, doc, 'abc');\n    } catch (e) {\n      assert(!e);\n    }\n  });","file":"docs.js","skipped":false,"dir":"test"},{"name":"should be able to unlock a document","suites":["Docs"],"updatePoint":{"line":497,"column":41,"index":15128},"line":497,"code":"  it('should be able to unlock a document', async function () {\n    const req = apos.task.getReq();\n    const doc = await apos.doc.db.findOne({\n      _id: 'i27:en:published'\n    });\n\n    try {\n      await apos.doc.unlock(req, doc, 'abc');\n    } catch (e) {\n      assert(false);\n    }\n  });","file":"docs.js","skipped":false,"dir":"test"},{"name":"should be able to re-lock an unlocked document","suites":["Docs"],"updatePoint":{"line":509,"column":52,"index":15429},"line":509,"code":"  it('should be able to re-lock an unlocked document', async function () {\n    const req = apos.task.getReq();\n    const doc = await apos.doc.db.findOne({\n      _id: 'i27:en:published'\n    });\n\n    try {\n      await apos.doc.lock(req, doc, 'def');\n    } catch (e) {\n      assert(false);\n    }\n  });","file":"docs.js","skipped":false,"dir":"test"},{"name":"should be able to lock a locked document with force: true","suites":["Docs"],"updatePoint":{"line":521,"column":63,"index":15739},"line":521,"code":"  it('should be able to lock a locked document with force: true', async function () {\n    const req = apos.task.getReq();\n    const doc = await apos.doc.db.findOne({\n      _id: 'i27:en:published'\n    });\n\n    try {\n      await apos.doc.lock(req, doc, 'abc', {\n        force: true\n      });\n    } catch (e) {\n      assert(false);\n    }\n  });","file":"docs.js","skipped":false,"dir":"test"},{"name":"should be able to recover if the text index weights are mysteriously wrong at startup","suites":["Docs"],"updatePoint":{"line":535,"column":91,"index":16108},"line":535,"code":"  it('should be able to recover if the text index weights are mysteriously wrong at startup', async function () {\n    await apos.doc.db.dropIndex('highSearchText_text_lowSearchText_text_title_text_searchBoost_text');\n    await apos.doc.db.createIndex({\n      highSearchText: 'text',\n      lowSearchText: 'text',\n      title: 'text',\n      searchBoost: 'text'\n    }, {\n      default_language: 'none',\n      weights: {\n        // These are the weird weights we've seen when this\n        // mystery bug crops up, flunking createIndex on a\n        // later startup\n        title: 1,\n        searchBoost: 1,\n        highSearchText: 1,\n        lowSearchText: 1\n      }\n    });\n    await apos.doc.createTextIndex();\n  });","file":"docs.js","skipped":false,"dir":"test"},{"name":"should initialize with a schema","suites":["Draft / Published"],"updatePoint":{"line":14,"column":37,"index":293},"line":14,"code":"  it('should initialize with a schema', async () => {\n    apos = await t.create({\n      root: module,\n      modules: {\n        '@apostrophecms/page': {\n          options: {\n            park: [],\n            types: [{\n              name: '@apostrophecms/home-page',\n              label: 'Home'\n            }, {\n              name: 'test-page',\n              label: 'Test Page'\n            }]\n          }\n        },\n        'test-page': {\n          extend: '@apostrophecms/page-type'\n        },\n        product: {\n          extend: '@apostrophecms/piece-type',\n          options: {\n            alias: 'product'\n          },\n          fields: {\n            add: {\n              body: {\n                type: 'area',\n                options: {\n                  widgets: {\n                    '@apostrophecms/rich-text': {},\n                    '@apostrophecms/image': {}\n                  }\n                }\n              },\n              color: {\n                type: 'select',\n                choices: [{\n                  label: 'Red',\n                  value: 'red'\n                }, {\n                  label: 'Blue',\n                  value: 'blue'\n                }]\n              },\n              photo: {\n                type: 'attachment',\n                group: 'images'\n              },\n              addresses: {\n                type: 'array',\n                fields: {\n                  add: {\n                    street: {\n                      type: 'string'\n                    }\n                  }\n                }\n              },\n              _articles: {\n                type: 'relationship',\n                withType: 'article',\n                builders: {\n                  project: {\n                    _url: 1,\n                    title: 1\n                  }\n                },\n                fields: {\n                  add: {\n                    relevance: {\n                      // Explains the relevance of the article to the\n                      // product in 1 sentence\n                      type: 'string'\n                    }\n                  }\n                }\n              }\n            }\n          }\n        },\n        article: {\n          extend: '@apostrophecms/piece-type',\n          options: {\n            alias: 'article'\n          },\n          fields: {\n            add: {\n              name: {\n                type: 'string'\n              }\n            }\n          }\n        }\n      }\n    });\n  });","file":"draft-published.js","skipped":false,"dir":"test"},{"name":"should be able to create and insert a draft product","suites":["Draft / Published"],"updatePoint":{"line":112,"column":57,"index":2791},"line":112,"code":"  it('should be able to create and insert a draft product', async () => {\n    const product = apos.product.newInstance();\n    product.title = 'Test Product';\n    testDraftProduct = await apos.product.insert(apos.task.getReq({\n      mode: 'draft'\n    }), product);\n    assert(testDraftProduct.modified);\n  });","file":"draft-published.js","skipped":false,"dir":"test"},{"name":"published should not exist yet","suites":["Draft / Published"],"updatePoint":{"line":120,"column":36,"index":3079},"line":120,"code":"  it('published should not exist yet', async () => {\n    assert(!(await apos.doc.db.findOne({\n      _id: testDraftProduct._id.replace(':draft', ':published')\n    })));\n  });","file":"draft-published.js","skipped":false,"dir":"test"},{"name":"should be able to publish the product","suites":["Draft / Published"],"updatePoint":{"line":125,"column":43,"index":3260},"line":125,"code":"  it('should be able to publish the product', async () => {\n    await apos.product.publish(apos.task.getReq({\n      mode: 'draft'\n    }), testDraftProduct);\n  });","file":"draft-published.js","skipped":false,"dir":"test"},{"name":"published product should exist and be the same","suites":["Draft / Published"],"updatePoint":{"line":130,"column":52,"index":3432},"line":130,"code":"  it('published product should exist and be the same', async () => {\n    const product = await apos.product.find(apos.task.getReq({\n      mode: 'published'\n    }), {\n      _id: testDraftProduct._id.replace(':draft', ':published')\n    }).toObject();\n    assert(product);\n    assert(product.aposDocId === testDraftProduct.aposDocId);\n    assert(product.aposLocale === 'en:published');\n    assert(product.title === testDraftProduct.title);\n  });","file":"draft-published.js","skipped":false,"dir":"test"},{"name":"original product should no longer be modified","suites":["Draft / Published"],"updatePoint":{"line":141,"column":51,"index":3874},"line":141,"code":"  it('original product should no longer be modified', async () => {\n    testDraftProduct = await apos.product.find(apos.task.getReq({\n      mode: 'draft'\n    }), {\n      _id: testDraftProduct._id\n    }).toObject();\n    assert(testDraftProduct);\n    assert(!testDraftProduct.modified);\n  });","file":"draft-published.js","skipped":false,"dir":"test"},{"name":"original product still shows as unmodified if we update it with no changes","suites":["Draft / Published"],"updatePoint":{"line":150,"column":80,"index":4194},"line":150,"code":"  it('original product still shows as unmodified if we update it with no changes', async () => {\n    testDraftProduct = await apos.product.update(apos.task.getReq({\n      mode: 'draft'\n    }), testDraftProduct);\n    assert(!testDraftProduct.modified);\n  });","file":"draft-published.js","skipped":false,"dir":"test"},{"name":"original product shows as modified if we make a change to it","suites":["Draft / Published"],"updatePoint":{"line":156,"column":66,"index":4438},"line":156,"code":"  it('original product shows as modified if we make a change to it', async () => {\n    testDraftProduct.title = 'Another Title';\n    testDraftProduct = await apos.product.update(apos.task.getReq({\n      mode: 'draft'\n    }), testDraftProduct);\n    assert(testDraftProduct.modified);\n  });","file":"draft-published.js","skipped":false,"dir":"test"},{"name":"can revert the draft to published","suites":["Draft / Published"],"updatePoint":{"line":163,"column":39,"index":4700},"line":163,"code":"  it('can revert the draft to published', async () => {\n    testDraftProduct = await apos.product.revertDraftToPublished(apos.task.getReq({\n      mode: 'draft'\n    }), testDraftProduct);\n    assert(testDraftProduct);\n    assert(!testDraftProduct.modified);\n    assert(testDraftProduct.title === 'Test Product');\n  });","file":"draft-published.js","skipped":false,"dir":"test"},{"name":"cannot revert the draft again","suites":["Draft / Published"],"updatePoint":{"line":171,"column":35,"index":5014},"line":171,"code":"  it('cannot revert the draft again', async () => {\n    assert(!(await apos.product.revertDraftToPublished(apos.task.getReq({\n      mode: 'draft'\n    }), testDraftProduct)));\n  });","file":"draft-published.js","skipped":false,"dir":"test"},{"name":"original product shows as modified if we make another change to it","suites":["Draft / Published"],"updatePoint":{"line":176,"column":72,"index":5232},"line":176,"code":"  it('original product shows as modified if we make another change to it', async () => {\n    testDraftProduct.title = 'Title 3';\n    testDraftProduct = await apos.product.update(apos.task.getReq({\n      mode: 'draft'\n    }), testDraftProduct);\n    assert(testDraftProduct.modified);\n  });","file":"draft-published.js","skipped":false,"dir":"test"},{"name":"should be able to publish the product","suites":["Draft / Published"],"updatePoint":{"line":183,"column":43,"index":5492},"line":183,"code":"  it('should be able to publish the product', async () => {\n    await apos.product.publish(apos.task.getReq({\n      mode: 'draft'\n    }), testDraftProduct);\n  });","file":"draft-published.js","skipped":false,"dir":"test"},{"name":"\"previous published\" should be deduplicated at this point","suites":["Draft / Published"],"updatePoint":{"line":188,"column":63,"index":5675},"line":188,"code":"  it('\"previous published\" should be deduplicated at this point', async () => {\n    const previous = await apos.doc.db.findOne({\n      _id: testDraftProduct._id.replace(':draft', ':previous')\n    });\n    assert(previous);\n    assert.strictEqual(previous.slug, `deduplicate-${previous.aposDocId}-test-product`);\n  });","file":"draft-published.js","skipped":false,"dir":"test"},{"name":"original product shows as modified if we make a third change to it","suites":["Draft / Published"],"updatePoint":{"line":195,"column":72,"index":6001},"line":195,"code":"  it('original product shows as modified if we make a third change to it', async () => {\n    testDraftProduct.title = 'Title 4';\n    testDraftProduct = await apos.product.update(apos.task.getReq({\n      mode: 'draft'\n    }), testDraftProduct);\n    assert(testDraftProduct.modified);\n  });","file":"draft-published.js","skipped":false,"dir":"test"},{"name":"can revert the draft to Title 3","suites":["Draft / Published"],"updatePoint":{"line":202,"column":37,"index":6255},"line":202,"code":"  it('can revert the draft to Title 3', async () => {\n    testDraftProduct = await apos.product.revertDraftToPublished(apos.task.getReq({\n      mode: 'draft'\n    }), testDraftProduct);\n    assert(testDraftProduct);\n    assert(!testDraftProduct.modified);\n    assert(testDraftProduct.title === 'Title 3');\n  });","file":"draft-published.js","skipped":false,"dir":"test"},{"name":"can revert the published version to Test Product (previous publication)","suites":["Draft / Published"],"updatePoint":{"line":210,"column":77,"index":6606},"line":210,"code":"  it('can revert the published version to Test Product (previous publication)', async () => {\n    const req = apos.task.getReq({\n      mode: 'published'\n    });\n    let published = await apos.product.findOneForEditing(req, {\n      aposDocId: testDraftProduct.aposDocId\n    });\n    assert(published && published.aposLocale === 'en:published');\n    published = await apos.product.revertPublishedToPrevious(req, published);\n    assert(published); // Make sure the slug is no longer deduplicated\n\n    assert(published.slug === 'test-product');\n    assert(published.title === 'Test Product');\n    testDraftProduct = await apos.product.findOneForEditing(req.clone({\n      mode: 'draft'\n    }), {\n      _id: testDraftProduct._id\n    });\n    assert(testDraftProduct);\n    assert(testDraftProduct.title === 'Title 3');\n    assert(testDraftProduct.modified);\n  });","file":"draft-published.js","skipped":false,"dir":"test"},{"name":"cannot revert published to previous again","suites":["Draft / Published"],"updatePoint":{"line":232,"column":47,"index":7431},"line":232,"code":"  it('cannot revert published to previous again', async () => {\n    const req = apos.task.getReq({\n      mode: 'published'\n    });\n    const published = await apos.product.findOneForEditing(req, {\n      aposDocId: testDraftProduct.aposDocId\n    });\n\n    try {\n      await apos.product.revertPublishedToPrevious(apos.task.getReq({\n        mode: 'draft'\n      }), published);\n      assert(false);\n    } catch (e) {\n      assert(e.name === 'invalid');\n    }\n  });","file":"draft-published.js","skipped":false,"dir":"test"},{"name":"should be able to create and insert a draft page","suites":["Draft / Published"],"updatePoint":{"line":250,"column":54,"index":7913},"line":250,"code":"  it('should be able to create and insert a draft page', async () => {\n    parent = {\n      type: 'test-page',\n      title: 'Parent',\n      slug: '/parent'\n    };\n    const req = apos.task.getReq({\n      mode: 'draft'\n    });\n    parent = await apos.page.insert(req, '_home', 'lastChild', parent);\n    const home = await apos.page.find(req, {\n      slug: '/',\n      level: 0\n    }).toObject();\n    assert.strictEqual(parent.path, `${home.path}/${parent.aposDocId}`);\n    assert(parent.modified);\n  });","file":"draft-published.js","skipped":false,"dir":"test"},{"name":"published should not exist yet","suites":["Draft / Published"],"updatePoint":{"line":267,"column":36,"index":8397},"line":267,"code":"  it('published should not exist yet', async () => {\n    assert(!(await apos.doc.db.findOne({\n      _id: parent._id.replace(':draft', ':published')\n    })));\n  });","file":"draft-published.js","skipped":false,"dir":"test"},{"name":"should be able to publish the page","suites":["Draft / Published"],"updatePoint":{"line":272,"column":40,"index":8565},"line":272,"code":"  it('should be able to publish the page', async () => {\n    await apos.page.publish(apos.task.getReq({\n      mode: 'draft'\n    }), parent);\n  });","file":"draft-published.js","skipped":false,"dir":"test"},{"name":"published page should exist and be the same","suites":["Draft / Published"],"updatePoint":{"line":277,"column":49,"index":8721},"line":277,"code":"  it('published page should exist and be the same', async () => {\n    const publishedParent = await apos.page.find(apos.task.getReq({\n      mode: 'published'\n    }), {\n      _id: parent._id.replace(':draft', ':published')\n    }).toObject();\n    assert(publishedParent);\n    assert(publishedParent.aposDocId === parent.aposDocId);\n    assert(publishedParent.aposLocale === 'en:published');\n    assert(publishedParent.title === parent.title);\n  });","file":"draft-published.js","skipped":false,"dir":"test"},{"name":"original page should no longer be modified","suites":["Draft / Published"],"updatePoint":{"line":288,"column":48,"index":9167},"line":288,"code":"  it('original page should no longer be modified', async () => {\n    parent = await apos.page.find(apos.task.getReq({\n      mode: 'draft'\n    }), {\n      _id: parent._id\n    }).toObject();\n    assert(parent);\n    assert(!parent.modified);\n  });","file":"draft-published.js","skipped":false,"dir":"test"},{"name":"original page still shows as unmodified if we update it with no changes","suites":["Draft / Published"],"updatePoint":{"line":297,"column":77,"index":9441},"line":297,"code":"  it('original page still shows as unmodified if we update it with no changes', async () => {\n    parent = await apos.page.update(apos.task.getReq({\n      mode: 'draft'\n    }), parent);\n    assert(!parent.modified);\n  });","file":"draft-published.js","skipped":false,"dir":"test"},{"name":"original page shows as modified if we make a change to it","suites":["Draft / Published"],"updatePoint":{"line":303,"column":63,"index":9649},"line":303,"code":"  it('original page shows as modified if we make a change to it', async () => {\n    parent.title = 'Parent Title 2';\n    parent = await apos.page.update(apos.task.getReq({\n      mode: 'draft'\n    }), parent);\n    assert(parent.modified);\n  });","file":"draft-published.js","skipped":false,"dir":"test"},{"name":"can revert the page draft to published","suites":["Draft / Published"],"updatePoint":{"line":310,"column":44,"index":9874},"line":310,"code":"  it('can revert the page draft to published', async () => {\n    parent = await apos.page.revertDraftToPublished(apos.task.getReq({\n      mode: 'draft'\n    }), parent);\n    assert(parent);\n    assert(!parent.modified);\n    assert(parent.title === 'Parent');\n  });","file":"draft-published.js","skipped":false,"dir":"test"},{"name":"cannot revert the draft again","suites":["Draft / Published"],"updatePoint":{"line":318,"column":35,"index":10129},"line":318,"code":"  it('cannot revert the draft again', async () => {\n    assert(!(await apos.page.revertDraftToPublished(apos.task.getReq({\n      mode: 'draft'\n    }), parent)));\n  }); // TODO convert more tests, add tests involving the page tree more,","file":"draft-published.js","skipped":false,"dir":"test"},{"name":"original page shows as modified if we make another change to it","suites":["Draft / Published"],"updatePoint":{"line":325,"column":69,"index":10472},"line":325,"code":"  it('original page shows as modified if we make another change to it', async () => {\n    parent.title = 'Parent Title 3';\n    parent = await apos.page.update(apos.task.getReq({\n      mode: 'draft'\n    }), parent);\n    assert(parent.modified);\n  });","file":"draft-published.js","skipped":false,"dir":"test"},{"name":"should be able to publish the page","suites":["Draft / Published"],"updatePoint":{"line":332,"column":40,"index":10693},"line":332,"code":"  it('should be able to publish the page', async () => {\n    await apos.page.publish(apos.task.getReq({\n      mode: 'draft'\n    }), parent);\n  });","file":"draft-published.js","skipped":false,"dir":"test"},{"name":"original page shows as modified if we make a third change to it","suites":["Draft / Published"],"updatePoint":{"line":337,"column":69,"index":10869},"line":337,"code":"  it('original page shows as modified if we make a third change to it', async () => {\n    parent.title = 'Parent Title 4';\n    parent = await apos.page.update(apos.task.getReq({\n      mode: 'draft'\n    }), parent);\n    assert(parent.modified);\n  });","file":"draft-published.js","skipped":false,"dir":"test"},{"name":"can revert the draft to parent Title 3","suites":["Draft / Published"],"updatePoint":{"line":344,"column":44,"index":11094},"line":344,"code":"  it('can revert the draft to parent Title 3', async () => {\n    parent = await apos.page.revertDraftToPublished(apos.task.getReq({\n      mode: 'draft'\n    }), parent);\n    assert(parent);\n    assert(!parent.modified);\n    assert(parent.title === 'Parent Title 3');\n  });","file":"draft-published.js","skipped":false,"dir":"test"},{"name":"can revert the published version to previous","suites":["Draft / Published"],"updatePoint":{"line":352,"column":50,"index":11372},"line":352,"code":"  it('can revert the published version to previous', async () => {\n    const req = apos.task.getReq({\n      mode: 'published'\n    });\n    let published = await apos.page.findOneForEditing(req, {\n      aposDocId: parent.aposDocId\n    });\n    assert(published && published.aposLocale === 'en:published');\n    published = await apos.page.revertPublishedToPrevious(apos.task.getReq({\n      mode: 'draft'\n    }), published);\n    assert(published);\n    assert(published.title === 'Parent');\n    parent = await apos.page.findOneForEditing(req.clone({\n      mode: 'draft'\n    }), {\n      _id: parent._id\n    });\n    assert(parent);\n    assert(parent.title === 'Parent Title 3');\n    assert(parent.modified);\n  });","file":"draft-published.js","skipped":false,"dir":"test"},{"name":"cannot revert published to previous again","suites":["Draft / Published"],"updatePoint":{"line":374,"column":47,"index":12075},"line":374,"code":"  it('cannot revert published to previous again', async () => {\n    const req = apos.task.getReq({\n      mode: 'published'\n    });\n    const published = await apos.page.findOneForEditing(req, {\n      aposDocId: parent.aposDocId\n    });\n\n    try {\n      await apos.page.revertPublishedToPrevious(apos.task.getReq({\n        mode: 'draft'\n      }), published);\n      assert(false);\n    } catch (e) {\n      assert(e.name === 'invalid');\n    }\n  });","file":"draft-published.js","skipped":false,"dir":"test"},{"name":"should be able to create and insert a sibling draft page","suites":["Draft / Published"],"updatePoint":{"line":392,"column":62,"index":12550},"line":392,"code":"  it('should be able to create and insert a sibling draft page', async () => {\n    sibling = {\n      type: 'test-page',\n      title: 'Sibling',\n      slug: '/sibling'\n    };\n    sibling = await apos.page.insert(apos.task.getReq({\n      mode: 'draft'\n    }), '_home', 'lastChild', sibling);\n    assert(sibling.modified);\n  });","file":"draft-published.js","skipped":false,"dir":"test"},{"name":"should be able to publish the sibling page","suites":["Draft / Published"],"updatePoint":{"line":403,"column":48,"index":12862},"line":403,"code":"  it('should be able to publish the sibling page', async () => {\n    await apos.page.publish(apos.task.getReq({\n      mode: 'draft'\n    }), sibling);\n  });","file":"draft-published.js","skipped":false,"dir":"test"},{"name":"should be able to create and insert a grandchild page","suites":["Draft / Published"],"updatePoint":{"line":409,"column":59,"index":13047},"line":409,"code":"  it('should be able to create and insert a grandchild page', async () => {\n    grandchild = {\n      type: 'test-page',\n      title: 'Grandchild',\n      // At insert time, a good slug is up to the caller\n      slug: '/parent/grandchild'\n    };\n    grandchild = await apos.page.insert(apos.task.getReq({\n      mode: 'draft'\n    }), parent._id, 'lastChild', grandchild);\n    assert(grandchild.modified);\n    assert.strictEqual(grandchild.path, `${parent.path}/${grandchild.aposDocId}`);\n    assert.strictEqual(grandchild.slug, '/parent/grandchild');\n  });","file":"draft-published.js","skipped":false,"dir":"test"},{"name":"published grandchild should not exist yet","suites":["Draft / Published"],"updatePoint":{"line":423,"column":47,"index":13589},"line":423,"code":"  it('published grandchild should not exist yet', async () => {\n    assert(!(await apos.page.find(apos.task.getReq({\n      mode: 'published'\n    }), {\n      aposDocId: grandchild.aposDocId\n    }).toObject()));\n  });","file":"draft-published.js","skipped":false,"dir":"test"},{"name":"should be able to publish the grandchild page","suites":["Draft / Published"],"updatePoint":{"line":430,"column":51,"index":13809},"line":430,"code":"  it('should be able to publish the grandchild page', async () => {\n    await apos.page.publish(apos.task.getReq({\n      mode: 'draft'\n    }), grandchild);\n    const published = await apos.page.find(apos.task.getReq({\n      mode: 'published'\n    }), {\n      aposDocId: grandchild.aposDocId\n    }).toObject();\n    assert(published);\n    assert.strictEqual(published.aposMode, 'published');\n    assert.strictEqual(published.path, `${parent.path}/${grandchild.aposDocId}`);\n    assert.strictEqual(published.slug, '/parent/grandchild');\n  });","file":"draft-published.js","skipped":false,"dir":"test"},{"name":"should be able to move the grandchild page beneath the sibling page","suites":["Draft / Published"],"updatePoint":{"line":444,"column":73,"index":14370},"line":444,"code":"  it('should be able to move the grandchild page beneath the sibling page', async () => {\n    grandchild = await apos.page.find(apos.task.getReq({\n      mode: 'draft'\n    }), {\n      _id: grandchild._id\n    }).toObject(); // Should not be modified to start\n\n    assert(!grandchild.modified);\n    await apos.page.move(apos.task.getReq({\n      mode: 'draft'\n    }), grandchild._id, sibling._id, 'lastChild');\n    sibling = await apos.page.find(apos.task.getReq({\n      mode: 'draft'\n    }), {\n      _id: sibling._id\n    }).children(true).toObject();\n    assert(sibling && sibling._children && sibling._children[0] && sibling._children[0]._id === grandchild._id);\n    grandchild = await apos.page.find(apos.task.getReq({\n      mode: 'draft'\n    }), {\n      _id: grandchild._id\n    }).toObject(); // Should be considered modified because we moved it\n\n    assert(!grandchild.modified);\n  });","file":"draft-published.js","skipped":false,"dir":"test"},{"name":"published grandchild page should now also be beneath the sibling page","suites":["Draft / Published"],"updatePoint":{"line":469,"column":75,"index":15259},"line":469,"code":"  it('published grandchild page should now also be beneath the sibling page', async () => {\n    sibling = await apos.page.find(apos.task.getReq({\n      mode: 'published'\n    }), {\n      aposDocId: sibling.aposDocId\n    }).children(true).toObject();\n    assert(sibling && sibling._children && sibling._children[0] && sibling._children[0].aposDocId === grandchild.aposDocId);\n  });","file":"draft-published.js","skipped":false,"dir":"test"},{"name":"should be able to publish the grandchild page again to re-execute the move in the published locale","suites":["Draft / Published"],"updatePoint":{"line":477,"column":104,"index":15668},"line":477,"code":"  it('should be able to publish the grandchild page again to re-execute the move in the published locale', async () => {\n    await apos.page.publish(apos.task.getReq({\n      mode: 'draft'\n    }), grandchild);\n  });","file":"draft-published.js","skipped":false,"dir":"test"},{"name":"published grandchild page should now be beneath sibling page","suites":["Draft / Published"],"updatePoint":{"line":482,"column":66,"index":15845},"line":482,"code":"  it('published grandchild page should now be beneath sibling page', async () => {\n    const siblingPublished = await apos.page.find(apos.task.getReq({\n      mode: 'published'\n    }), {\n      aposDocId: sibling.aposDocId\n    }).children(true).toObject();\n    assert(siblingPublished && siblingPublished._children && siblingPublished._children[0] && siblingPublished._children[0]._id === grandchild._id.replace(':draft', ':published'));\n  });","file":"draft-published.js","skipped":false,"dir":"test"},{"name":"should be a property of the apos object","suites":["Email"],"updatePoint":{"line":11,"column":45,"index":255},"line":11,"code":"  it('should be a property of the apos object', async function () {\n    this.timeout(t.timeout);\n    this.slow(2000);\n    apos = await t.create({\n      root: module,\n      modules: {\n        '@apostrophecms/email': {\n          options: {\n            nodemailer: {\n              streamTransport: true,\n              buffer: true,\n              newline: 'unix'\n            }\n          }\n        },\n        'email-test': {}\n      }\n    });\n    assert(apos.modules['@apostrophecms/email']);\n  });","file":"email.js","skipped":false,"dir":"test"},{"name":"can send email on behalf of a module","suites":["Email"],"updatePoint":{"line":31,"column":42,"index":745},"line":31,"code":"  it('can send email on behalf of a module', async function () {\n    const info = await apos.modules['email-test'].email(apos.task.getReq(), 'welcome', {\n      name: 'Fred Astaire'\n    }, {\n      from: 'test@example.com',\n      to: 'recipient@example.com',\n      subject: 'Welcome Aboard'\n    });\n    assert(info);\n    const message = info.message.toString();\n    assert(message.match(/Fred Astaire/));\n    assert(message.match(/Subject: Welcome Aboard/));\n    assert(message.match(/From: test@example\\.com/));\n    assert(message.match(/To: recipient@example\\.com/));\n    assert(message.match(/\\[http:\\/\\/example\\.com\\/\\]/));\n  });","file":"email.js","skipped":false,"dir":"test"},{"name":"should execute handlers for several events in the proper order","suites":["Promisified Events Core"],"updatePoint":{"line":15,"column":68,"index":383},"line":15,"code":"  it('should execute handlers for several events in the proper order', async function () {\n    let niceFinished = false;\n    apos = await t.create({\n      root: module,\n      modules: {\n        test1: {\n          options: {\n            alias: 'test1'\n          },\n\n          handlers(self) {\n            return {\n              ready1: {\n                async ready1AddA(context) {\n                  await Promise.delay(100);\n                  assert(!context.b);\n                  context.a = true;\n                }\n\n              },\n              ready2: {\n                async ready2AddB(context) {\n                  assert(context.a);\n                  context.b = true;\n                },\n\n                async ready2AddC(context) {\n                  await Promise.delay(10);\n                  assert(context.a);\n                  assert(context.b);\n                  context.c = true;\n                }\n\n              },\n              ready3: {\n                async ready3HeyNice() {\n                  await Promise.delay(100);\n                  niceFinished = true;\n                }\n\n              },\n              'apostrophe:modulesRegistered': {\n                async testHandlers() {\n                  const context = {};\n                  await self.emit('ready1', context);\n                  assert(context.a);\n                  await self.emit('ready2', context);\n                  assert(context.a);\n                  assert(context.b);\n                  assert(context.c);\n                  await self.emit('ready3');\n                  assert(context.a);\n                  assert(context.b);\n                  assert(context.c);\n                  assert(context.d);\n                  assert(niceFinished);\n                }\n\n              },\n              // Verify legacy event name aliases still work\n              'apostrophe:modulesReady': {\n                async stillFires() {\n                  modulesReadyStillFires = true;\n                }\n\n              },\n              'apostrophe:afterInit': {\n                async stillFires() {\n                  afterInitStillFires = true;\n                }\n\n              }\n            };\n          }\n\n        },\n        test2: {\n          options: {\n            alias: 'test2'\n          },\n\n          handlers(self) {\n            return {\n              'test1:ready1': {\n                ready1SetD(context) {\n                  context.d = true;\n                }\n\n              }\n            };\n          }\n\n        },\n        test3: {\n          options: {\n            alias: 'test3'\n          }\n        }\n      }\n    });\n    assert(niceFinished);\n    assert(modulesReadyStillFires);\n    assert(afterInitStillFires);\n  });","file":"events.js","skipped":false,"dir":"test"},{"name":"should implement @apostrophecms/doc-type:beforeInsert handlers properly","suites":["Promisified Events: @apostrophecms/doc-type:beforeInsert"],"updatePoint":{"line":14,"column":77,"index":398},"line":14,"code":"  it('should implement @apostrophecms/doc-type:beforeInsert handlers properly', async function () {\n    apos = await t.create({\n      root: module,\n      modules: {\n        test1: {\n          options: {\n            alias: 'test1'\n          },\n\n          handlers(self) {\n            return {\n              '@apostrophecms/doc-type:beforeInsert': {\n                async beforeInsertReverseTitle(req, doc, options) {\n                  if (doc.type === 'default-page') {\n                    await Promise.delay(50);\n                    doc.title = doc.title.split('').reverse().join('');\n                  }\n                }\n\n              },\n              'apostrophe:modulesRegistered': {\n                modulesReadyCoreEventsWork() {\n                  coreEventsWork = true;\n                }\n\n              }\n            };\n          }\n\n        },\n        'default-page': {},\n        '@apostrophecms/page': {\n          options: {\n            park: [{\n              type: 'default-page',\n              findMeAgain: true,\n              title: 'Test',\n              slug: '/test',\n              visibility: 'public',\n              parkedId: 'test'\n            }]\n          }\n        }\n      }\n    });\n  });","file":"events2.js","skipped":false,"dir":"test"},{"name":"should find the results","suites":["Promisified Events: @apostrophecms/doc-type:beforeInsert"],"updatePoint":{"line":60,"column":29,"index":1558},"line":60,"code":"  it('should find the results', async function () {\n    const doc = await apos.doc.db.findOne({\n      findMeAgain: true\n    });\n    assert(doc);\n    assert.strictEqual(doc.title, 'tseT');\n    assert(coreEventsWork);\n  });","file":"events2.js","skipped":false,"dir":"test"},{"name":"express should exist on the apos object","suites":["Express"],"updatePoint":{"line":9,"column":45,"index":204},"line":9,"code":"  it('express should exist on the apos object', async function () {\n    apos = await t.create({\n      root: module,\n      modules: {\n        'express-test': {},\n        'template-test': {},\n        'template-subclass-test': {}\n      }\n    });\n    assert(apos.express);\n  });","file":"express.js","skipped":false,"dir":"test"},{"name":"app should exist on the apos object","suites":["Express"],"updatePoint":{"line":20,"column":41,"index":475},"line":20,"code":"  it('app should exist on the apos object', function () {\n    assert(apos.app);\n  });","file":"express.js","skipped":false,"dir":"test"},{"name":"baseApp should exist on the apos object","suites":["Express"],"updatePoint":{"line":23,"column":45,"index":565},"line":23,"code":"  it('baseApp should exist on the apos object', function () {\n    assert(apos.baseApp);\n  });","file":"express.js","skipped":false,"dir":"test"},{"name":"app and baseApp should be the same in the absence of a prefix","suites":["Express"],"updatePoint":{"line":26,"column":67,"index":681},"line":26,"code":"  it('app and baseApp should be the same in the absence of a prefix', function () {\n    assert(apos.baseApp === apos.app);\n  });","file":"express.js","skipped":false,"dir":"test"},{"name":"should successfully make a GET request to establish CSRF","suites":["Express"],"updatePoint":{"line":29,"column":62,"index":805},"line":29,"code":"  it('should successfully make a GET request to establish CSRF', async function () {\n    jar = apos.http.jar();\n    const body = await apos.http.get('/tests/welcome', {\n      jar\n    });\n    assert(body.toString() === 'ok');\n  });","file":"express.js","skipped":false,"dir":"test"},{"name":"should flunk a POST request without the CSRF cookie","suites":["Express"],"updatePoint":{"line":36,"column":57,"index":1031},"line":36,"code":"  it('should flunk a POST request without the CSRF cookie', async function () {\n    try {\n      await apos.http.post('/tests/body', {\n        body: {\n          person: {\n            age: '30'\n          }\n        }\n      });\n      assert(false);\n    } catch (e) {\n      assert(e);\n    }\n  });","file":"express.js","skipped":false,"dir":"test"},{"name":"should use the extended bodyParser for submitted forms, and pass CSRF with the cookie","suites":["Express"],"updatePoint":{"line":50,"column":91,"index":1357},"line":50,"code":"  it('should use the extended bodyParser for submitted forms, and pass CSRF with the cookie', async function () {\n    const response = await apos.http.post('/tests/body', {\n      send: 'form',\n      body: {\n        person: {\n          age: '30'\n        }\n      },\n      jar\n    });\n    assert(response.toString() === '30');\n  });","file":"express.js","skipped":false,"dir":"test"},{"name":"should allow us to implement a route that requires the JSON bodyParser","suites":["Express"],"updatePoint":{"line":62,"column":76,"index":1672},"line":62,"code":"  it('should allow us to implement a route that requires the JSON bodyParser', async function () {\n    const response = await apos.http.post('/tests/body', {\n      send: 'json',\n      body: {\n        person: {\n          age: '30'\n        }\n      },\n      jar\n    });\n    assert(response.toString() === '30'); // Last one before a new apos object\n\n    await t.destroy(apos);\n  }); // PREFIX STUFF","file":"express.js","skipped":false,"dir":"test"},{"name":"should set prefix on the apos object if passed in","suites":["Express"],"updatePoint":{"line":77,"column":55,"index":2048},"line":77,"code":"  it('should set prefix on the apos object if passed in', async function () {\n    apos = await t.create({\n      root: module,\n      prefix: '/prefix',\n      modules: {\n        'express-test': {},\n        'template-test': {},\n        'template-subclass-test': {}\n      }\n    });\n    assert(apos.prefix);\n    assert(apos.prefix === '/prefix');\n  });","file":"express.js","skipped":false,"dir":"test"},{"name":"should have different baseApp and app properties with a prefix","suites":["Express"],"updatePoint":{"line":90,"column":68,"index":2409},"line":90,"code":"  it('should have different baseApp and app properties with a prefix', function () {\n    assert(apos.app !== apos.baseApp);\n  });","file":"express.js","skipped":false,"dir":"test"},{"name":"should successfully make a GET request to establish CSRF","suites":["Express"],"updatePoint":{"line":93,"column":62,"index":2533},"line":93,"code":"  it('should successfully make a GET request to establish CSRF', async function () {\n    jar = apos.http.jar();\n    const body = await apos.http.get('/prefix/tests/welcome', {\n      jar\n    });\n    assert(body.toString() === 'ok');\n  });","file":"express.js","skipped":false,"dir":"test"},{"name":"should take same requests at the prefix","suites":["Express"],"updatePoint":{"line":100,"column":45,"index":2754},"line":100,"code":"  it('should take same requests at the prefix', async function () {\n    const body = await apos.http.post('/prefix/tests/body', {\n      body: {\n        person: {\n          age: '30'\n        }\n      },\n      jar\n    });\n    assert(body.toString() === '30');\n    await t.destroy(apos);\n  });","file":"express.js","skipped":false,"dir":"test"},{"name":"should provide reasonable absolute and base URLs in tasks reqs if baseUrl option is set on apos object","suites":["Express"],"updatePoint":{"line":112,"column":108,"index":3107},"line":112,"code":"  it('should provide reasonable absolute and base URLs in tasks reqs if baseUrl option is set on apos object', async function () {\n    apos = await t.create({\n      root: module,\n      baseUrl: 'https://example.com',\n      modules: {\n        'express-test': {},\n        'template-test': {},\n        'template-subclass-test': {}\n      }\n    });\n    assert(apos.baseUrl);\n    assert(apos.baseUrl === 'https://example.com');\n    const req = apos.task.getReq({\n      url: '/test'\n    });\n    assert(req.baseUrl === 'https://example.com');\n    assert(req.absoluteUrl === 'https://example.com/test'); // Last one before a new apos object\n\n    await t.destroy(apos);\n  });","file":"express.js","skipped":false,"dir":"test"},{"name":"should provide reasonable absolute and base URLs in tasks reqs if baseUrl and prefix options are set on apos object","suites":["Express"],"updatePoint":{"line":132,"column":121,"index":3786},"line":132,"code":"  it('should provide reasonable absolute and base URLs in tasks reqs if baseUrl and prefix options are set on apos object', async function () {\n    apos = await t.create({\n      root: module,\n      baseUrl: 'https://example.com',\n      prefix: '/subdir',\n      modules: {\n        'express-test': {},\n        'template-test': {},\n        'template-subclass-test': {}\n      }\n    });\n    assert(apos.baseUrl);\n    assert(apos.baseUrl === 'https://example.com');\n    assert(apos.prefix === '/subdir');\n    const req = apos.task.getReq({\n      url: '/test'\n    });\n    assert(req.baseUrl === 'https://example.com');\n    assert(req.baseUrlWithPrefix === 'https://example.com/subdir');\n    assert(req.absoluteUrl === 'https://example.com/subdir/test'); // Last use of this apos object\n\n    await t.destroy(apos);\n  });","file":"express.js","skipped":false,"dir":"test"},{"name":"global should exist on the apos object","suites":["Global"],"updatePoint":{"line":11,"column":44,"index":249},"line":11,"code":"  it('global should exist on the apos object', async function () {\n    apos = await t.create({\n      root: module,\n      modules: {\n        '@apostrophecms/global': {\n          fields: {\n            add: {\n              spiffiness: {\n                type: 'integer',\n                def: 100\n              }\n            }\n          }\n        },\n        'global-tests': {\n          apiRoutes(self) {\n            return {\n              get: {\n                test(req) {\n                  return req.data.global.test;\n                }\n\n              }\n            };\n          }\n\n        }\n      }\n    });\n  });","file":"global.js","skipped":false,"dir":"test"},{"name":"should be able to add a test property","suites":["Global"],"updatePoint":{"line":41,"column":43,"index":859},"line":41,"code":"  it('should be able to add a test property', async function () {\n    return apos.doc.db.updateOne({\n      slug: 'global',\n      aposLocale: 'en:published'\n    }, {\n      $set: {\n        test: 'test'\n      }\n    });\n  });","file":"global.js","skipped":false,"dir":"test"},{"name":"should populate when global.addGlobalToData is awaited","suites":["Global"],"updatePoint":{"line":51,"column":60,"index":1098},"line":51,"code":"  it('should populate when global.addGlobalToData is awaited', async function () {\n    const req = apos.task.getAnonReq();\n    await apos.global.addGlobalToData(req);\n    assert(req.data.global);\n    assert(req.data.global.type === '@apostrophecms/global');\n    assert(req.data.global.test === 'test'); // def is respected\n\n    assert(req.data.global.spiffiness === 100);\n  });","file":"global.js","skipped":false,"dir":"test"},{"name":"should populate via middleware","suites":["Global"],"updatePoint":{"line":60,"column":36,"index":1452},"line":60,"code":"  it('should populate via middleware', async function () {\n    const body = await apos.http.get('/api/v1/global-tests/test');\n    assert(body === 'test');\n  });","file":"global.js","skipped":false,"dir":"test"},{"name":"should exist on the apos object","suites":["Http"],"updatePoint":{"line":12,"column":37,"index":255},"line":12,"code":"  it('should exist on the apos object', async function () {\n    apos = await t.create({\n      root: module,\n      modules: {\n        test: {\n          apiRoutes: self => ({\n            post: {\n              '/csrf-test': req => {\n                return {\n                  ok: true\n                };\n              }\n            }\n          })\n        }\n      }\n    });\n    assert(apos.http);\n    jar = apos.http.jar();\n  });","file":"http.js","skipped":false,"dir":"test"},{"name":"should be able to make an http request","suites":["Http"],"updatePoint":{"line":32,"column":44,"index":688},"line":32,"code":"  it('should be able to make an http request', async () => {\n    const result = await apos.http.get('/', {\n      jar\n    });\n    assert(result);\n    assert(result.match(/logged out/));\n  });","file":"http.js","skipped":false,"dir":"test"},{"name":"should be able to make an http POST request with csrf header via default csrf convenience of http.post","suites":["Http"],"updatePoint":{"line":39,"column":108,"index":943},"line":39,"code":"  it('should be able to make an http POST request with csrf header via default csrf convenience of http.post', async () => {\n    const response = await apos.http.post('/csrf-test', {\n      jar,\n      body: {}\n    });\n    assert(response.ok === true);\n  });","file":"http.js","skipped":false,"dir":"test"},{"name":"should be a property of the apos object","suites":["Images"],"updatePoint":{"line":48,"column":45,"index":877},"line":48,"code":"  it('should be a property of the apos object', async function () {\n    this.timeout(t.timeout);\n    this.slow(2000);\n    apos = await t.create({\n      root: module\n    });\n    assert(apos.image);\n    assert(apos.image.__meta.name === '@apostrophecms/image');\n  }); // Test pieces.list()","file":"images.js","skipped":false,"dir":"test"},{"name":"should clean up any existing images for testing","suites":["Images"],"updatePoint":{"line":58,"column":53,"index":1174},"line":58,"code":"  it('should clean up any existing images for testing', async function () {\n    try {\n      const response = await apos.doc.db.deleteMany({\n        type: '@apostrophecms/image'\n      });\n      assert(response.result.ok === 1);\n    } catch (e) {\n      assert(false);\n    }\n  });","file":"images.js","skipped":false,"dir":"test"},{"name":"should add images for testing","suites":["Images"],"updatePoint":{"line":68,"column":35,"index":1434},"line":68,"code":"  it('should add images for testing', async function () {\n    assert(apos.image.insert);\n    const req = apos.task.getReq();\n    const insertPromises = mockImages.map(async image => {\n      return apos.image.insert(req, image);\n    });\n    inserted = await Promise.all(insertPromises);\n    assert(inserted.length === mockImages.length);\n    assert(inserted[0]._id);\n  });","file":"images.js","skipped":false,"dir":"test"},{"name":"should respect minSize filter (svg is always OK)","suites":["Images"],"updatePoint":{"line":78,"column":54,"index":1825},"line":78,"code":"  it('should respect minSize filter (svg is always OK)', async function () {\n    const req = apos.task.getAnonReq();\n    const images = await apos.image.find(req).minSize([200, 200]).toArray();\n    assert(images.length === 3);\n  });","file":"images.js","skipped":false,"dir":"test"},{"name":"should respect minSize filter in toCount, which uses a cloned cursor","suites":["Images"],"updatePoint":{"line":83,"column":74,"index":2078},"line":83,"code":"  it('should respect minSize filter in toCount, which uses a cloned cursor', async function () {\n    const req = apos.task.getAnonReq();\n    const count = await apos.image.find(req).minSize([200, 200]).toCount();\n    assert(count === 3);\n  });","file":"images.js","skipped":false,"dir":"test"},{"name":"should generate a srcset string for an image","suites":["Images"],"updatePoint":{"line":88,"column":50,"index":2298},"line":88,"code":"  it('should generate a srcset string for an image', function () {\n    const srcset = apos.image.srcset({\n      name: 'test',\n      _id: 'test',\n      extension: 'jpg',\n      width: 1200,\n      height: 800\n    });\n    assert.strictEqual(srcset, ['/uploads/attachments/test-test.max.jpg 1200w', '/uploads/attachments/test-test.full.jpg 1140w', '/uploads/attachments/test-test.two-thirds.jpg 760w', '/uploads/attachments/test-test.one-half.jpg 570w', '/uploads/attachments/test-test.one-third.jpg 380w', '/uploads/attachments/test-test.one-sixth.jpg 190w'].join(', '));\n  });","file":"images.js","skipped":false,"dir":"test"},{"name":"should not generate a srcset string for an SVG image","suites":["Images"],"updatePoint":{"line":98,"column":58,"index":2880},"line":98,"code":"  it('should not generate a srcset string for an SVG image', function () {\n    const srcset = apos.image.srcset({\n      name: 'test',\n      _id: 'test',\n      extension: 'svg',\n      width: 1200,\n      height: 800\n    });\n    assert.strictEqual(srcset, '');\n  });","file":"images.js","skipped":false,"dir":"test"},{"name":"should be able to insert test users","suites":["Images"],"updatePoint":{"line":108,"column":41,"index":3127},"line":108,"code":"  it('should be able to insert test users', async function () {\n    await insertUser({\n      title: 'admin',\n      username: 'admin',\n      password: 'admin',\n      email: 'ad@min.com',\n      role: 'admin'\n    });\n    await insertUser({\n      title: 'contributor',\n      username: 'contributor',\n      password: 'contributor',\n      email: 'con@tributor.com',\n      role: 'contributor'\n    });\n  });","file":"images.js","skipped":false,"dir":"test"},{"name":"REST: should be able to log in as admin","suites":["Images"],"updatePoint":{"line":124,"column":45,"index":3531},"line":124,"code":"  it('REST: should be able to log in as admin', async () => {\n    jar = await login('admin');\n  });","file":"images.js","skipped":false,"dir":"test"},{"name":"\"editable\" API includes images for admin","suites":["Images"],"updatePoint":{"line":127,"column":46,"index":3632},"line":127,"code":"  it('\"editable\" API includes images for admin', async () => {\n    const editable = await getEditableImages(jar);\n    assert(editable.length === 4);\n  });","file":"images.js","skipped":false,"dir":"test"},{"name":"REST: should be able to log in as contributor","suites":["Images"],"updatePoint":{"line":131,"column":51,"index":3792},"line":131,"code":"  it('REST: should be able to log in as contributor', async () => {\n    jar = await login('contributor');\n  });","file":"images.js","skipped":false,"dir":"test"},{"name":"\"editable\" API does not include images for contributor","suites":["Images"],"updatePoint":{"line":134,"column":60,"index":3913},"line":134,"code":"  it('\"editable\" API does not include images for contributor', async () => {\n    const editable = await getEditableImages(jar);\n    assert(editable.length === 0);\n  });","file":"images.js","skipped":false,"dir":"test"},{"name":"\"improve\" should work, but project level should override it","suites":["Improve Overrides"],"updatePoint":{"line":7,"column":65,"index":215},"line":7,"code":"  it('\"improve\" should work, but project level should override it', async function () {\n    let apos;\n\n    try {\n      apos = await t.create({\n        root: module,\n        modules: {\n          'improve-piece-type': {},\n          'improve-global': {}\n        }\n      });\n      assert(apos.global.options.verifyProjectLevelLoaded);\n      assert.strictEqual(apos.user.options.testPieceTypeLevelLoaded, true);\n      assert.strictEqual(apos.user.options.testPieceTypeLevel, true);\n      assert.strictEqual(apos.global.options.testPieceTypeLevelLoaded, true);\n      assert.strictEqual(apos.global.options.testPieceTypeLevel, false);\n      assert.strictEqual(apos.global.options.testGlobalLevelLoaded, true);\n      assert.strictEqual(apos.global.options.testGlobalLevel, false);\n    } finally {\n      t.destroy(apos);\n    }\n  });","file":"improve-overrides.js","skipped":false,"dir":"test"},{"name":"should be a property of the apos object","suites":["Job module"],"updatePoint":{"line":14,"column":45,"index":315},"line":14,"code":"  it('should be a property of the apos object', async function () {\n    this.timeout(t.timeout);\n    this.slow(2000);\n    apos = await t.create({\n      root: module,\n      modules: {\n        article: {\n          extend: '@apostrophecms/piece-type'\n        }\n      }\n    });\n    jobModule = apos.modules['@apostrophecms/job'];\n    assert(apos.modules['@apostrophecms/job']);\n  });","file":"job.js","skipped":false,"dir":"test"},{"name":"has a related database collection","suites":["Job module"],"updatePoint":{"line":28,"column":39,"index":689},"line":28,"code":"  it('has a related database collection', async function () {\n    assert(jobModule.db);\n  });","file":"job.js","skipped":false,"dir":"test"},{"name":"should create a new job","suites":["Job module"],"updatePoint":{"line":32,"column":29,"index":787},"line":32,"code":"  it('should create a new job', async function () {\n    jobOne = await jobModule.start({});\n    assert(jobOne._id);\n    const found = await jobModule.db.findOne({\n      _id: jobOne._id\n    });\n    assert(found);\n    assert(found.status === 'running');\n    assert(found.ended === false);\n  });","file":"job.js","skipped":false,"dir":"test"},{"name":"should end a job and mark it as successful","suites":["Job module"],"updatePoint":{"line":42,"column":48,"index":1099},"line":42,"code":"  it('should end a job and mark it as successful', async function () {\n    const result = await jobModule.end(jobOne, 'success', {\n      testing: 'testing'\n    });\n    assert(result.result.nModified === 1);\n    const found = await jobModule.db.findOne({\n      _id: jobOne._id\n    });\n    assert(found);\n    assert(found.status === 'completed');\n    assert(found.ended === true);\n  });","file":"job.js","skipped":false,"dir":"test"},{"name":"should get admin jar","suites":["Job module"],"updatePoint":{"line":55,"column":26,"index":1473},"line":55,"code":"  it('should get admin jar', async () => {\n    await t.createAdmin(apos);\n    jar = await t.getUserJar(apos);\n    assert(jar);\n  });","file":"job.js","skipped":false,"dir":"test"},{"name":"should access a job via REST API GET request","suites":["Job module"],"updatePoint":{"line":60,"column":50,"index":1630},"line":60,"code":"  it('should access a job via REST API GET request', async function () {\n    const job = await apos.http.get(`/api/v1/@apostrophecms/job/${jobOne._id}`, {\n      jar\n    });\n    assert(job._id === jobOne._id);\n  });","file":"job.js","skipped":false,"dir":"test"},{"name":"can insert many test articles","suites":["Job module"],"updatePoint":{"line":67,"column":35,"index":1848},"line":67,"code":"  it('can insert many test articles', async function () {\n    const req = apos.task.getReq();\n    const promises = [];\n\n    for (let i = 1; i <= 500; i++) {\n      promises.push(insert(req, apos.modules.article, 'article', {}, i));\n    }\n\n    const inserted = await Promise.all(promises);\n    articleIds = inserted.map(doc => doc._id);\n    assert(inserted.length === 500);\n    assert(!!inserted[0]._id);\n  });","file":"job.js","skipped":false,"dir":"test"},{"name":"can run a batch job","suites":["Job module"],"updatePoint":{"line":81,"column":25,"index":2261},"line":81,"code":"  it('can run a batch job', async function () {\n    const req = apos.task.getReq();\n    jobTwo = await jobModule.runBatch(req, articleIds, async function (req, id) {\n      await apos.doc.db.updateOne({\n        _id: id\n      }, {\n        $set: {\n          checked: true\n        }\n      });\n    });\n    assert(!!jobTwo.jobId);\n  });","file":"job.js","skipped":false,"dir":"test"},{"name":"can follow the second job as it works","suites":["Job module"],"updatePoint":{"line":94,"column":43,"index":2610},"line":94,"code":"  it('can follow the second job as it works', async function () {\n    const {\n      completed\n    } = await pollJob({\n      route: `${jobModule.action}/${jobTwo.jobId}`\n    }, {\n      jar\n    });\n    assert(completed === articleIds.length);\n    const index = Math.floor(Math.random() * (articleIds.length - 1));\n    const article = await apos.http.get(`/api/v1/article/${articleIds[index]}`, {\n      jar\n    });\n    assert(article.checked === true);\n  });","file":"job.js","skipped":false,"dir":"test"},{"name":"can run a generic job","suites":["Job module"],"updatePoint":{"line":111,"column":27,"index":3087},"line":111,"code":"  it('can run a generic job', async function () {\n    const req = apos.task.getReq();\n    jobThree = await jobModule.run(req, async function (req, reporters) {\n      let count = 1;\n      reporters.setTotal(articleIds.length);\n\n      for (const id of articleIds) {\n        await Promise.delay(3);\n        logged.push(id);\n\n        if (count % 2) {\n          reporters.success();\n        } else {\n          reporters.failure();\n        }\n\n        count++;\n      }\n    });\n    assert(!!jobThree.jobId);\n  });","file":"job.js","skipped":false,"dir":"test"},{"name":"can follow the third job as it works","suites":["Job module"],"updatePoint":{"line":132,"column":42,"index":3608},"line":132,"code":"  it('can follow the third job as it works', async function () {\n    const route = `${jobModule.action}/${jobThree.jobId}`;\n    const {\n      total\n    } = await apos.http.get(route, {\n      jar\n    }); // Tests setTotal()\n\n    assert(total === articleIds.length);\n    const {\n      completed,\n      good,\n      bad\n    } = await pollJob({\n      route\n    }, {\n      jar\n    });\n    assert(completed === articleIds.length); // Tests success()\n\n    assert(good === articleIds.length / 2); // Tests failure()\n\n    assert(bad === articleIds.length / 2);\n  });","file":"job.js","skipped":false,"dir":"test"},{"name":"should exist on the apos object","suites":["Launder"],"updatePoint":{"line":11,"column":37,"index":245},"line":11,"code":"  it('should exist on the apos object', async function () {\n    apos = await t.create({\n      root: module\n    });\n    assert(apos.launder);\n  }); // Launder has plenty of unit tests of its own. All we're","file":"launder.js","skipped":false,"dir":"test"},{"name":"should launder a number to a string","suites":["Launder"],"updatePoint":{"line":20,"column":41,"index":533},"line":20,"code":"  it('should launder a number to a string', function () {\n    assert(apos.launder.string(5) === '5');\n  });","file":"launder.js","skipped":false,"dir":"test"},{"name":"should be a property of the apos object","suites":["Locks"],"updatePoint":{"line":13,"column":45,"index":287},"line":13,"code":"  it('should be a property of the apos object', async function () {\n    this.timeout(t.timeout);\n    this.slow(2000);\n    apos = await t.create({\n      root: module,\n      modules: {\n        // Make some subclasses of the locks module. NORMALLY A BAD IDEA. But\n        // we're doing it to deliberately force them to contend with each other,\n        // rather than just throwing an error saying \"hey you have this lock\n        // now\"\n        '@apostrophecms/lock-1': {\n          extend: '@apostrophecms/lock',\n          options: {\n            alias: 'locks1'\n          }\n        },\n        '@apostrophecms/lock-2': {\n          extend: '@apostrophecms/lock',\n          options: {\n            alias: 'locks2'\n          }\n        },\n        '@apostrophecms/lock-3': {\n          extend: '@apostrophecms/lock',\n          options: {\n            alias: 'locks3'\n          }\n        }\n      }\n    });\n    assert(apos.modules['@apostrophecms/lock']);\n    assert(apos.modules['@apostrophecms/lock-1']);\n    assert(apos.modules['@apostrophecms/lock-2']);\n    assert(apos.modules['@apostrophecms/lock-3']);\n  });","file":"locks.js","skipped":false,"dir":"test"},{"name":"cleanup","suites":["Locks"],"updatePoint":{"line":48,"column":13,"index":1357},"line":48,"code":"  it('cleanup', async function () {\n    await apos.lock.db.deleteMany({});\n  });","file":"locks.js","skipped":false,"dir":"test"},{"name":"should allow a single lock without contention uneventfully","suites":["Locks"],"updatePoint":{"line":51,"column":64,"index":1489},"line":51,"code":"  it('should allow a single lock without contention uneventfully', async function () {\n    await apos.lock.lock('test');\n    await apos.lock.unlock('test');\n  });","file":"locks.js","skipped":false,"dir":"test"},{"name":"should allow two differently-named locks uneventfully","suites":["Locks"],"updatePoint":{"line":55,"column":59,"index":1647},"line":55,"code":"  it('should allow two differently-named locks uneventfully', async function () {\n    await apos.lock.lock('test1');\n    await apos.lock.lock('test2');\n    await apos.lock.unlock('test1');\n    await apos.lock.unlock('test2');\n  });","file":"locks.js","skipped":false,"dir":"test"},{"name":"should flunk a second lock by the same module with waitForSelf: false","suites":["Locks"],"updatePoint":{"line":61,"column":75,"index":1895},"line":61,"code":"  it('should flunk a second lock by the same module with waitForSelf: false', async function () {\n    await apos.lock.lock('test');\n\n    try {\n      await apos.lock.lock('test', {\n        waitForSelf: false\n      });\n      assert(false);\n    } catch (e) {\n      assert(e);\n    }\n\n    await apos.lock.unlock('test');\n\n    try {\n      await apos.lock.unlock('test');\n      assert(false);\n    } catch (e) {\n      assert(e);\n    }\n  });","file":"locks.js","skipped":false,"dir":"test"},{"name":"four parallel lock calls via the different modules should all succeed but not simultaneously","suites":["Locks"],"updatePoint":{"line":82,"column":98,"index":2351},"line":82,"code":"  it('four parallel lock calls via the different modules should all succeed but not simultaneously', async function () {\n    const one = apos.modules['@apostrophecms/lock'];\n    const two = apos.modules['@apostrophecms/lock-1'];\n    const three = apos.modules['@apostrophecms/lock-2'];\n    const four = apos.modules['@apostrophecms/lock-3'];\n    let active = 0;\n    let successful = 0;\n    await Promise.all([attempt(one), attempt(two), attempt(three), attempt(four)]);\n    assert(successful === 4);\n\n    async function attempt(locks) {\n      await apos.lock.lock('test');\n      active++;\n      assert(active === 1);\n      return release();\n\n      async function release() {\n        // We have to decrement this before we start the call to\n        // apos.lock.unlock because otherwise the callback for one of our\n        // peers' insert attempts may succeed before the callback for\n        // remove, leading to a false positive for test failure. -Tom\n        active--;\n        await Promise.delay(75 + Math.random() * 50);\n        await apos.lock.unlock('test');\n        successful++;\n        return null;\n      }\n    }\n  });","file":"locks.js","skipped":false,"dir":"test"},{"name":"four parallel lock calls via the different modules should all succeed but not simultaneously, even when the idleTimeout is short","suites":["Locks"],"updatePoint":{"line":111,"column":134,"index":3516},"line":111,"code":"  it('four parallel lock calls via the different modules should all succeed but not simultaneously, even when the idleTimeout is short', async function () {\n    const one = apos.modules['@apostrophecms/lock'];\n    const two = apos.modules['@apostrophecms/lock-1'];\n    const three = apos.modules['@apostrophecms/lock-2'];\n    const four = apos.modules['@apostrophecms/lock-3'];\n    let active = 0;\n    let successful = 0;\n    await Promise.all([attempt(one), attempt(two), attempt(three), attempt(four)]);\n    assert(successful === 4);\n\n    async function attempt(locks) {\n      await apos.lock.lock('test', {\n        idleTimeout: 50\n      });\n      active++;\n      assert(active === 1);\n      await release();\n\n      async function release() {\n        // We have to decrement this before we start the call to\n        // apos.lock.unlock because otherwise the callback for one of our\n        // peers' insert attempts may succeed before the callback for\n        // remove, leading to a false positive for test failure. -Tom\n        active--;\n        await Promise.delay(75 + Math.random() * 50);\n        await apos.lock.unlock('test');\n        successful++;\n        return null;\n      }\n    }\n  });","file":"locks.js","skipped":false,"dir":"test"},{"name":"withLock method should run a function inside a lock","suites":["Locks"],"updatePoint":{"line":142,"column":57,"index":4638},"line":142,"code":"  it('withLock method should run a function inside a lock', async function () {\n    const result = await apos.lock.withLock('test-lock', async () => {\n      await Promise.delay(50);\n      return 'result';\n    });\n    assert(result === 'result');\n  });","file":"locks.js","skipped":false,"dir":"test"},{"name":"withLock method should be able to run again (lock released)","suites":["Locks"],"updatePoint":{"line":149,"column":65,"index":4898},"line":149,"code":"  it('withLock method should be able to run again (lock released)', async function () {\n    const result = await apos.lock.withLock('test-lock', async () => {\n      await Promise.delay(50);\n      return 'result';\n    });\n    assert(result === 'result');\n  });","file":"locks.js","skipped":false,"dir":"test"},{"name":"withLock method should hold the lock (cannot relock within fn)","suites":["Locks"],"updatePoint":{"line":156,"column":68,"index":5161},"line":156,"code":"  it('withLock method should hold the lock (cannot relock within fn)', async function () {\n    return apos.lock.withLock('test-lock', async () => {\n      await Promise.delay(50);\n\n      try {\n        await apos.lock.lock('test-lock', {\n          waitForSelf: false\n        });\n        assert(false);\n      } catch (e) {\n        assert(e);\n      }\n    });\n  });","file":"locks.js","skipped":false,"dir":"test"},{"name":"Second lock should wait for release of first one","suites":["Locks"],"updatePoint":{"line":170,"column":54,"index":5508},"line":170,"code":"  it('Second lock should wait for release of first one', async () => {\n    let timedOut = false;\n    await apos.lock.lock('test-lock');\n    setTimeout(async () => {\n      await apos.lock.unlock('test-lock');\n      timedOut = true;\n    });\n    await apos.lock.lock('test-lock');\n    assert(timedOut);\n    await apos.lock.unlock('test-lock');\n  });","file":"locks.js","skipped":false,"dir":"test"},{"name":"should initialize","suites":["Login"],"updatePoint":{"line":12,"column":23,"index":237},"line":12,"code":"  it('should initialize', async function () {\n    apos = await t.create({\n      root: module,\n      modules: {\n        '@apostrophecms/login': {\n          requirements(self) {\n            return {\n              add: {\n                WeakCaptcha: {\n                  phase: 'beforeSubmit',\n\n                  async props(req) {\n                    return {\n                      hint: 'xyz'\n                    };\n                  },\n\n                  async verify(req, data) {\n                    if (data !== 'xyz') {\n                      throw self.apos.error('invalid', 'captcha code incorrect');\n                    }\n                  }\n\n                },\n                ExtraSecret: {\n                  phase: 'afterPasswordVerified',\n\n                  async props(req, user) {\n                    return {\n                      // Verify we had access to the user here\n                      hint: user.username\n                    };\n                  },\n\n                  async verify(req, data, user) {\n                    if (data !== user.extraSecret) {\n                      throw self.apos.error('invalid', 'extra secret incorrect');\n                    }\n                  }\n\n                }\n              }\n            };\n          }\n\n        }\n      }\n    });\n    assert(apos.modules['@apostrophecms/login']);\n  });","file":"login-requirements.js","skipped":false,"dir":"test"},{"name":"should be able to insert test user","suites":["Login"],"updatePoint":{"line":62,"column":40,"index":1596},"line":62,"code":"  it('should be able to insert test user', async function () {\n    assert(apos.user.newInstance);\n    const user = apos.user.newInstance();\n    assert(user);\n    user.title = 'Harry Putter';\n    user.username = 'HarryPutter';\n    user.password = 'crookshanks';\n    user.email = 'hputter@aol.com';\n    user.role = 'admin';\n    user.extraSecret = 'roll-on';\n    assert(user.type === '@apostrophecms/user');\n    assert(apos.user.insert);\n    const doc = await apos.user.insert(apos.task.getReq(), user);\n    assert(doc._id);\n  });","file":"login-requirements.js","skipped":false,"dir":"test"},{"name":"should not be able to login a user without meeting a beforeSubmit requirement","suites":["Login"],"updatePoint":{"line":77,"column":83,"index":2167},"line":77,"code":"  it('should not be able to login a user without meeting a beforeSubmit requirement', async function () {\n    const jar = apos.http.jar(); // establish session\n\n    let page = await apos.http.get('/', {\n      jar\n    });\n    assert(page.match(/logged out/));\n    const context = await apos.http.post('/api/v1/@apostrophecms/login/context', {\n      method: 'POST',\n      body: {},\n      jar\n    });\n    assert(context.requirementProps);\n    assert(context.requirementProps.WeakCaptcha);\n    assert.strictEqual(context.requirementProps.WeakCaptcha.hint, 'xyz');\n\n    try {\n      await apos.http.post('/api/v1/@apostrophecms/login/login', {\n        method: 'POST',\n        body: {\n          username: 'HarryPutter',\n          password: 'crookshanks',\n          session: true\n        },\n        jar\n      });\n      assert(false);\n    } catch (e) {\n      assert(e.status === 400);\n      assert.strictEqual(e.body.message, 'captcha code incorrect');\n      assert.strictEqual(e.body.data.requirement, 'WeakCaptcha');\n    } // Make sure it really didn't work\n\n\n    page = await apos.http.get('/', {\n      jar\n    });\n    assert(page.match(/logged out/));\n  });","file":"login-requirements.js","skipped":false,"dir":"test"},{"name":"should not be able to login a user with the wrong value for a beforeSubmit requirement","suites":["Login"],"updatePoint":{"line":116,"column":92,"index":3329},"line":116,"code":"  it('should not be able to login a user with the wrong value for a beforeSubmit requirement', async function () {\n    const jar = apos.http.jar(); // establish session\n\n    let page = await apos.http.get('/', {\n      jar\n    });\n    assert(page.match(/logged out/));\n\n    try {\n      await apos.http.post('/api/v1/@apostrophecms/login/login', {\n        method: 'POST',\n        body: {\n          username: 'HarryPutter',\n          password: 'crookshanks',\n          session: true,\n          requirements: {\n            WeakCaptcha: 'abc'\n          }\n        },\n        jar\n      });\n      assert(false);\n    } catch (e) {\n      assert(e.status === 400);\n      assert.strictEqual(e.body.message, 'captcha code incorrect');\n      assert.strictEqual(e.body.data.requirement, 'WeakCaptcha');\n    } // Make sure it really didn't work\n\n\n    page = await apos.http.get('/', {\n      jar\n    });\n    assert(page.match(/logged out/));\n  });","file":"login-requirements.js","skipped":false,"dir":"test"},{"name":"initial login should produce an incompleteToken, convertible with the afterPasswordVerified requirements","suites":["Login"],"updatePoint":{"line":150,"column":110,"index":4278},"line":150,"code":"  it('initial login should produce an incompleteToken, convertible with the afterPasswordVerified requirements', async function () {\n    const jar = apos.http.jar(); // establish session\n\n    let page = await apos.http.get('/', {\n      jar\n    });\n    assert(page.match(/logged out/));\n    const result = await apos.http.post('/api/v1/@apostrophecms/login/login', {\n      method: 'POST',\n      body: {\n        username: 'HarryPutter',\n        password: 'crookshanks',\n        session: true,\n        requirements: {\n          WeakCaptcha: 'xyz'\n        }\n      },\n      jar\n    });\n    assert(result.incompleteToken); // Make sure it did not create a login session prematurely\n\n    page = await apos.http.get('/', {\n      jar\n    });\n    assert(page.match(/logged out/)); // Make sure it won't convert with an incorrect ExtraSecret\n\n    const token = result.incompleteToken;\n\n    try {\n      await apos.http.post('/api/v1/@apostrophecms/login/requirement-verify', {\n        body: {\n          incompleteToken: token,\n          session: true,\n          name: 'ExtraSecret',\n          value: 'roll-off'\n        },\n        jar\n      });\n    } catch ({\n      status,\n      body\n    }) {\n      assert(status === 400);\n      assert.strictEqual(body.message, 'extra secret incorrect');\n      assert.strictEqual(body.data.requirement, 'ExtraSecret');\n    } // If we try the final login without\n    // having successfully verified all requirements we get an error\n\n\n    try {\n      await apos.http.post('/api/v1/@apostrophecms/login/login', {\n        method: 'POST',\n        body: {\n          incompleteToken: token,\n          session: true\n        },\n        jar\n      });\n    } catch ({\n      status,\n      body\n    }) {\n      assert(status === 403);\n      assert.strictEqual(body.message, 'All requirements must be verified');\n    } // Make sure it did not create a login session prematurely\n\n\n    page = await apos.http.get('/', {\n      jar\n    });\n    assert(page.match(/logged out/)); // Fetch props for afterPasswordVerified component\n\n    const props = await apos.http.post('/api/v1/@apostrophecms/login/requirement-props', {\n      method: 'POST',\n      body: {\n        incompleteToken: token,\n        name: 'ExtraSecret'\n      },\n      jar\n    });\n    assert.strictEqual(props.hint, 'HarryPutter'); // Now convert token to an actual login session\n    // by providing the post-password-verification requirements,\n    // correctly\n\n    await apos.http.post('/api/v1/@apostrophecms/login/requirement-verify', {\n      body: {\n        incompleteToken: token,\n        session: true,\n        name: 'ExtraSecret',\n        value: 'roll-on'\n      },\n      jar\n    });\n    await apos.http.post('/api/v1/@apostrophecms/login/login', {\n      method: 'POST',\n      body: {\n        incompleteToken: token,\n        session: true\n      },\n      jar\n    });\n    page = await apos.http.get('/', {\n      jar\n    });\n    assert(page.match(/logged in/));\n  });","file":"login-requirements.js","skipped":false,"dir":"test"},{"name":"should initialize","suites":["Login"],"updatePoint":{"line":12,"column":23,"index":237},"line":12,"code":"  it('should initialize', async function () {\n    apos = await t.create({\n      root: module\n    });\n    assert(apos.modules['@apostrophecms/login']);\n    assert(apos.user.safe.remove);\n    const response = await apos.user.safe.removeMany({});\n    assert(response.result.ok === 1);\n  });","file":"login.js","skipped":false,"dir":"test"},{"name":"should be able to insert test user","suites":["Login"],"updatePoint":{"line":21,"column":40,"index":542},"line":21,"code":"  it('should be able to insert test user', async function () {\n    assert(apos.user.newInstance);\n    const user = apos.user.newInstance();\n    assert(user);\n    user.title = 'Harry Putter';\n    user.username = 'HarryPutter';\n    user.password = 'crookshanks';\n    user.email = 'hputter@aol.com';\n    user.role = 'admin';\n    assert(user.type === '@apostrophecms/user');\n    assert(apos.user.insert);\n    const doc = await apos.user.insert(apos.task.getReq(), user);\n    assert(doc._id);\n  });","file":"login.js","skipped":false,"dir":"test"},{"name":"should be able to login a user with their username","suites":["Login"],"updatePoint":{"line":35,"column":56,"index":1052},"line":35,"code":"  it('should be able to login a user with their username', async function () {\n    const jar = apos.http.jar(); // establish session\n\n    let page = await apos.http.get('/', {\n      jar\n    });\n    assert(page.match(/logged out/));\n    await apos.http.post('/api/v1/@apostrophecms/login/login', {\n      method: 'POST',\n      body: {\n        username: 'HarryPutter',\n        password: 'crookshanks',\n        session: true\n      },\n      jar\n    });\n    page = await apos.http.get('/', {\n      jar\n    });\n    assert(page.match(/logged in/)); // otherwise logins are not remembered in a session\n\n    await apos.http.post('/api/v1/@apostrophecms/login/logout', {\n      body: {\n        username: 'hputter@aol.com',\n        password: 'crookshanks',\n        session: true\n      },\n      jar\n    });\n    page = await apos.http.get('/', {\n      jar\n    }); // are we back to being able to log in?\n\n    assert(page.match(/logged out/));\n  });","file":"login.js","skipped":false,"dir":"test"},{"name":"should be able to login a user with their email","suites":["Login"],"updatePoint":{"line":70,"column":53,"index":1983},"line":70,"code":"  it('should be able to login a user with their email', async function () {\n    const jar = apos.http.jar(); // establish session\n\n    let page = await apos.http.get('/', {\n      jar\n    });\n    assert(page.match(/logged out/));\n    await apos.http.post('/api/v1/@apostrophecms/login/login', {\n      body: {\n        username: 'hputter@aol.com',\n        password: 'crookshanks',\n        session: true\n      },\n      jar\n    });\n    page = await apos.http.get('/', {\n      jar\n    }); // Did we get our page back?\n\n    assert(page.match(/logged in/)); // otherwise logins are not remembered in a session\n\n    await apos.http.post('/api/v1/@apostrophecms/login/logout', {\n      body: {\n        username: 'hputter@aol.com',\n        password: 'crookshanks',\n        session: true\n      },\n      jar\n    });\n    page = await apos.http.get('/', {\n      jar\n    }); // are we back to being able to log in?\n\n    assert(page.match(/logged out/));\n  });","file":"login.js","skipped":false,"dir":"test"},{"name":"Changing a user's password should invalidate sessions for that user","suites":["Login"],"updatePoint":{"line":105,"column":74,"index":2947},"line":105,"code":"  it('Changing a user\\'s password should invalidate sessions for that user', async function () {\n    const jar = apos.http.jar(); // establish session\n\n    let page = await apos.http.get('/', {\n      jar\n    });\n    assert(page.match(/logged out/));\n    await apos.http.post('/api/v1/@apostrophecms/login/login', {\n      method: 'POST',\n      body: {\n        username: 'HarryPutter',\n        password: 'crookshanks',\n        session: true\n      },\n      jar\n    });\n    page = await apos.http.get('/', {\n      jar\n    });\n    assert(page.match(/logged in/));\n    const req = apos.task.getReq();\n    let user = await apos.user.find(req, {\n      username: 'HarryPutter'\n    }).toObject();\n    assert(user);\n    user.password = 'VeryPasswordManySecure🐶';\n    await apos.user.update(req, user);\n    page = await apos.http.get('/', {\n      jar\n    });\n    assert(!page.match(/logged in/));\n    assert(page.match(/logged out/)); // Make sure we can come back from that\n\n    await apos.http.post('/api/v1/@apostrophecms/login/login', {\n      method: 'POST',\n      body: {\n        username: 'HarryPutter',\n        password: 'VeryPasswordManySecure🐶',\n        session: true\n      },\n      jar\n    });\n    page = await apos.http.get('/', {\n      jar\n    });\n    assert(page.match(/logged in/)); // So we do not have a stale _passwordUpdated flag\n\n    user = await apos.user.find(req, {\n      _id: user._id\n    }).toObject(); // Unrelated writes to user should not invalidate sessions\n\n    user.title = 'Extra Cool Putter';\n    await apos.user.update(req, user);\n    page = await apos.http.get('/', {\n      jar\n    });\n    assert(page.match(/logged in/)); // Marking a user account as disabled should invalidate sessions\n\n    user.disabled = true;\n    await apos.user.update(req, user);\n    page = await apos.http.get('/', {\n      jar\n    });\n    assert(page.match(/logged out/)); // Restore access for next test\n\n    user.disabled = false;\n    await apos.user.update(req, user);\n  });","file":"login.js","skipped":false,"dir":"test"},{"name":"Changing a user's password should invalidate bearer tokens for that user","suites":["Login"],"updatePoint":{"line":173,"column":79,"index":4929},"line":173,"code":"  it('Changing a user\\'s password should invalidate bearer tokens for that user', async function () {\n    // Log in\n    let response = await apos.http.post('/api/v1/@apostrophecms/login/login', {\n      body: {\n        username: 'HarryPutter',\n        password: 'VeryPasswordManySecure🐶'\n      }\n    });\n    assert(response.token);\n    let token = response.token; // For verification: can't do this without an admin bearer token\n\n    await apos.http.get('/api/v1/@apostrophecms/user', {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    const req = apos.task.getReq();\n    const user = await apos.user.find(req, {\n      username: 'HarryPutter'\n    }).toObject();\n    assert(user);\n    user.password = 'AnotherLovelyPassword';\n    await apos.user.update(req, user);\n    let failed = false;\n\n    try {\n      await apos.http.get('/api/v1/@apostrophecms/user', {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      }); // Should NOT work\n\n      assert(false);\n    } catch (e) {\n      failed = true;\n      assert.strictEqual(e.status, 401);\n    }\n\n    assert(failed); // Make sure we can come back from that\n\n    response = await apos.http.post('/api/v1/@apostrophecms/login/login', {\n      body: {\n        username: 'HarryPutter',\n        password: 'AnotherLovelyPassword'\n      }\n    });\n    assert(response.token);\n    token = response.token;\n    await apos.http.get('/api/v1/@apostrophecms/user', {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n  });","file":"login.js","skipped":false,"dir":"test"},{"name":"should stand up","suites":["Middleware and Route Order"],"updatePoint":{"line":11,"column":21,"index":252},"line":11,"code":"  it('should stand up', async () => {\n    apos = await t.create({\n      root: module,\n      modules: {\n        first: {\n          middleware(self) {\n            return {\n              firstMiddleware(req, res, next) {\n                req.firstMiddlewareRan = true;\n                return next();\n              }\n\n            };\n          }\n\n        },\n        second: {\n          middleware(self) {\n            return {\n              secondMiddleware(req, res, next) {\n                req.secondMiddlewareRan = true;\n                return next();\n              }\n\n            };\n          }\n\n        },\n        third: {\n          middleware(self) {\n            return {\n              thirdMiddleware(req, res, next) {\n                req.thirdMiddlewareRan = true;\n                return next();\n              }\n\n            };\n          },\n\n          apiRoutes(self) {\n            return {\n              get: {\n                thirdRouteA(req) {\n                  return {\n                    firstMiddlewareRan: req.firstMiddlewareRan,\n                    secondMiddlewareRan: req.secondMiddlewareRan,\n                    thirdMiddlewareRan: req.thirdMiddlewareRan\n                  };\n                },\n\n                thirdRouteB: {\n                  before: 'middleware:second',\n\n                  route(req) {\n                    return {\n                      firstMiddlewareRan: req.firstMiddlewareRan,\n                      secondMiddlewareRan: req.secondMiddlewareRan,\n                      thirdMiddlewareRan: req.thirdMiddlewareRan\n                    };\n                  }\n\n                }\n              }\n            };\n          }\n\n        }\n      }\n    });\n  });","file":"middleware-and-route-order.js","skipped":false,"dir":"test"},{"name":"should hit all middleware in thirdRouteA","suites":["Middleware and Route Order"],"updatePoint":{"line":81,"column":46,"index":1962},"line":81,"code":"  it('should hit all middleware in thirdRouteA', async () => {\n    const result = await apos.http.get('/api/v1/third/third-route-a');\n    assert(result.firstMiddlewareRan);\n    assert(result.secondMiddlewareRan);\n    assert(result.thirdMiddlewareRan);\n  });","file":"middleware-and-route-order.js","skipped":false,"dir":"test"},{"name":"should hit only the first middleware in thirdRouteB","suites":["Middleware and Route Order"],"updatePoint":{"line":87,"column":57,"index":2231},"line":87,"code":"  it('should hit only the first middleware in thirdRouteB', async () => {\n    const result = await apos.http.get('/api/v1/third/third-route-b');\n    assert(result.firstMiddlewareRan);\n    assert(!result.secondMiddlewareRan);\n    assert(!result.thirdMiddlewareRan);\n  });","file":"middleware-and-route-order.js","skipped":false,"dir":"test"},{"name":"should exist","suites":["moog"],"updatePoint":{"line":4,"column":18,"index":85},"line":4,"code":"  it('should exist', function () {\n    const moog = require('../lib/moog.js')({});\n\n    assert(moog);\n  });","file":"moog.js","skipped":false,"dir":"test"},{"name":"should be initialized without arguments","suites":["moog"],"updatePoint":{"line":9,"column":45,"index":220},"line":9,"code":"  it('should be initialized without arguments', function () {\n    const moog = require('../lib/moog.js')();\n\n    assert(moog);\n  });","file":"moog.js","skipped":false,"dir":"test"},{"name":"should have a `define` method","suites":["moog","methods"],"updatePoint":{"line":15,"column":37,"index":381},"line":15,"code":"    it('should have a `define` method', function () {\n      const moog = require('../lib/moog.js')({});\n\n      assert(moog.define);\n    });","file":"moog.js","skipped":false,"dir":"test"},{"name":"should have a `redefine` method","suites":["moog","methods"],"updatePoint":{"line":20,"column":39,"index":523},"line":20,"code":"    it('should have a `redefine` method', function () {\n      const moog = require('../lib/moog.js')({});\n\n      assert(moog.redefine);\n    });","file":"moog.js","skipped":false,"dir":"test"},{"name":"should have a `create` method","suites":["moog","methods"],"updatePoint":{"line":25,"column":37,"index":665},"line":25,"code":"    it('should have a `create` method', function () {\n      const moog = require('../lib/moog.js')({});\n\n      assert(moog.create);\n    });","file":"moog.js","skipped":false,"dir":"test"},{"name":"should have an `isDefined` method","suites":["moog","methods"],"updatePoint":{"line":30,"column":41,"index":809},"line":30,"code":"    it('should have an `isDefined` method', function () {\n      const moog = require('../lib/moog.js')({});\n\n      assert(moog.isDefined);\n    });","file":"moog.js","skipped":false,"dir":"test"},{"name":"should be able to `define` a class","suites":["moog","defining and creating"],"updatePoint":{"line":37,"column":42,"index":1013},"line":37,"code":"    it('should be able to `define` a class', function () {\n      const moog = require('../lib/moog.js')({});\n\n      moog.define('myObject', {\n        methods(self) {\n          return {};\n        }\n\n      });\n    });","file":"moog.js","skipped":false,"dir":"test"},{"name":"should be able to `define` and then `create` an instance","suites":["moog","defining and creating"],"updatePoint":{"line":47,"column":64,"index":1251},"line":47,"code":"    it('should be able to `define` and then `create` an instance', async function () {\n      const moog = require('../lib/moog.js')({});\n\n      moog.define('myObject', {\n        options: {\n          color: 'blue'\n        },\n\n        init(self) {\n          self.color = self.options.color;\n        }\n\n      });\n      const myObject = await moog.create('myObject', {});\n      assert(myObject);\n      assert(myObject.color === 'blue');\n    });","file":"moog.js","skipped":false,"dir":"test"},{"name":"should `create` without options","suites":["moog","`create` syntax"],"updatePoint":{"line":66,"column":39,"index":1717},"line":66,"code":"    it('should `create` without options', async function () {\n      const moog = require('../lib/moog.js')();\n\n      moog.define('myClass', {});\n      const myObj = await moog.create('myClass');\n      assert(myObj);\n      assert(myObj.__meta.name === 'myClass');\n    });","file":"moog.js","skipped":false,"dir":"test"},{"name":"should be able to create a subclass with expected default option behavior (async)","suites":["moog","explicit subclassing behavior"],"updatePoint":{"line":76,"column":89,"index":2102},"line":76,"code":"    it('should be able to create a subclass with expected default option behavior (async)', async function () {\n      const moog = require('../lib/moog.js')({});\n\n      moog.define('baseClass', {\n        options: {\n          color: 'blue'\n        }\n      });\n      moog.define('subClass', {\n        options: {\n          color: 'red'\n        },\n        extend: 'baseClass'\n      });\n      const myObject = await moog.create('subClass', {});\n      assert(myObject);\n      assert(myObject.options.color === 'red');\n    });","file":"moog.js","skipped":false,"dir":"test"},{"name":"should report an error gracefully if subclass to be extended does not exist (async)","suites":["moog","explicit subclassing behavior"],"updatePoint":{"line":94,"column":91,"index":2624},"line":94,"code":"    it('should report an error gracefully if subclass to be extended does not exist (async)', async function () {\n      const moog = require('../lib/moog.js')({}); // base class does not actually exist\n\n\n      moog.define('subClass', {\n        options: {\n          color: 'red'\n        },\n        extend: 'baseClass'\n      });\n\n      try {\n        await moog.create('subClass', {});\n        assert(false);\n      } catch (e) {\n        assert(e);\n        assert(e.toString().match(/baseClass/));\n      }\n    });","file":"moog.js","skipped":false,"dir":"test"},{"name":"should be able to `extend` a subclass into yet another subclass","suites":["moog","explicit subclassing behavior"],"updatePoint":{"line":113,"column":71,"index":3114},"line":113,"code":"    it('should be able to `extend` a subclass into yet another subclass', async function () {\n      const moog = require('../lib/moog.js')({});\n\n      moog.define('baseClass', {\n        options: {\n          color: 'blue'\n        }\n      });\n      moog.define('subClassOne', {\n        options: {\n          color: 'red'\n        },\n        extend: 'baseClass'\n      });\n      moog.define('subClassTwo', {\n        options: {\n          color: 'green'\n        },\n        extend: 'subClassOne'\n      });\n      const myObject = await moog.create('subClassTwo', {});\n      assert(myObject);\n      assert(myObject.options.color === 'green');\n    });","file":"moog.js","skipped":false,"dir":"test"},{"name":"default base class should take effect if configured","suites":["moog","explicit subclassing behavior"],"updatePoint":{"line":137,"column":59,"index":3742},"line":137,"code":"    it('default base class should take effect if configured', async function () {\n      const moog = require('../lib/moog.js')({\n        defaultBaseClass: 'baseClass'\n      });\n\n      moog.define('baseClass', {\n        init(self) {\n          assert(self.__meta);\n          assert(self.__meta.chain);\n          assert(self.__meta.chain[0]);\n          assert(self.__meta.chain[0].name === 'baseClass');\n          assert(self.__meta.chain[1].name === 'subClass');\n          assert(self.__meta.name === 'subClass');\n          self.color = self.options.color;\n        }\n\n      });\n      moog.define('subClass', {\n        options: {\n          color: 'red'\n        }\n      });\n      const myObject = await moog.create('subClass', {});\n      assert(myObject); // This verifies that init() for base class actually ran\n\n      assert(myObject.color === 'red');\n    });","file":"moog.js","skipped":false,"dir":"test"},{"name":"default base class should not take effect if extend is explicitly set to false","suites":["moog","explicit subclassing behavior"],"updatePoint":{"line":164,"column":86,"index":4627},"line":164,"code":"    it('default base class should not take effect if extend is explicitly set to false', async function () {\n      const moog = require('../lib/moog.js')({\n        defaultBaseClass: 'baseClass'\n      });\n\n      moog.define('baseClass', {\n        construct: function (self) {\n          self.based = true;\n        }\n      });\n      moog.define('subClass', {\n        options: {\n          color: 'red'\n        },\n        extend: false\n      });\n      const myObject = await moog.create('subClass', {});\n      assert(myObject);\n      assert(!myObject.based);\n    });","file":"moog.js","skipped":false,"dir":"test"},{"name":"should define methods and allow overriding and extending them through implicit subclassing","suites":["moog","explicit subclassing behavior"],"updatePoint":{"line":184,"column":98,"index":5201},"line":184,"code":"    it('should define methods and allow overriding and extending them through implicit subclassing', async function () {\n      const moog = require('../lib/moog.js')({});\n\n      moog.define('myObject', {\n        methods(self) {\n          return {\n            basic() {\n              return true;\n            },\n\n            overridden() {\n              return false;\n            },\n\n            extended(times) {\n              return 2 * times;\n            }\n\n          };\n        }\n\n      });\n      moog.define('myObject', {\n        methods(self) {\n          return {\n            overridden() {\n              return true;\n            }\n\n          };\n        },\n\n        extendMethods(self) {\n          return {\n            extended(_super, times) {\n              return _super(times) * 2;\n            }\n\n          };\n        }\n\n      });\n      const myObject = await moog.create('myObject', {});\n      assert(myObject);\n      assert(myObject.basic());\n      assert(myObject.overridden());\n      assert(myObject.extended(5) === 20);\n    });","file":"moog.js","skipped":false,"dir":"test"},{"name":"should support inheriting field group fields rather than requiring all fields to be restated","suites":["moog","explicit subclassing behavior"],"updatePoint":{"line":232,"column":100,"index":6244},"line":232,"code":"    it('should support inheriting field group fields rather than requiring all fields to be restated', async function () {\n      const moog = require('../lib/moog.js')({});\n\n      moog.define('myObject', {\n        cascades: ['fields'],\n        fields: {\n          add: {\n            one: {\n              type: 'string'\n            },\n            two: {\n              type: 'string'\n            },\n            three: {\n              type: 'string'\n            }\n          },\n          group: {\n            basics: {\n              fields: ['one', 'two', 'three']\n            }\n          }\n        }\n      });\n      moog.define('myObject', {\n        fields: {\n          add: {\n            four: {\n              type: 'string'\n            },\n            five: {\n              type: 'string'\n            }\n          },\n          group: {\n            basics: {\n              fields: ['four', 'five']\n            },\n            other: {\n              fields: ['one']\n            }\n          }\n        }\n      });\n      const myObject = await moog.create('myObject', {});\n      assert(myObject);\n      assert(myObject.fieldsGroups);\n      assert(!myObject.fieldsGroups.basics.fields.includes('one'));\n      assert(myObject.fieldsGroups.other.fields.includes('one'));\n      assert(myObject.fieldsGroups.basics.fields.includes('two'));\n      assert(myObject.fieldsGroups.basics.fields.includes('three'));\n      assert(myObject.fieldsGroups.basics.fields.includes('four'));\n      assert(myObject.fieldsGroups.basics.fields.includes('five'));\n    });","file":"moog.js","skipped":false,"dir":"test"},{"name":"should order fields with the last option unless the order array overrides","suites":["moog","explicit subclassing behavior"],"updatePoint":{"line":286,"column":81,"index":7764},"line":286,"code":"    it('should order fields with the last option unless the order array overrides', async function () {\n      const moog = require('../lib/moog.js')({});\n\n      moog.define('unorderedObject', {\n        cascades: ['fields'],\n        fields: {\n          add: {\n            first: {\n              type: 'string'\n            },\n            last: {\n              type: 'string',\n              last: true\n            },\n            second: {\n              type: 'string'\n            },\n            third: {\n              type: 'string'\n            }\n          }\n        }\n      });\n      moog.define('orderedObject', {\n        cascades: ['fields'],\n        fields: {\n          add: {\n            first: {\n              type: 'string'\n            },\n            last: {\n              type: 'string',\n              last: true\n            },\n            second: {\n              type: 'string'\n            },\n            third: {\n              type: 'string'\n            }\n          },\n          order: ['last', 'third', 'second', 'first']\n        }\n      });\n      const unordered = await moog.create('unorderedObject', {});\n      assert(unordered);\n      assert(Object.keys(unordered.fields)[0] === 'first');\n      assert(Object.keys(unordered.fields)[1] === 'second');\n      assert(Object.keys(unordered.fields)[2] === 'third');\n      assert(Object.keys(unordered.fields)[3] === 'last');\n      const ordered = await moog.create('orderedObject', {});\n      assert(ordered);\n      assert(Object.keys(ordered.fields)[0] === 'last');\n      assert(Object.keys(ordered.fields)[1] === 'third');\n      assert(Object.keys(ordered.fields)[2] === 'second');\n      assert(Object.keys(ordered.fields)[3] === 'first');\n    }); // ==================================================","file":"moog.js","skipped":false,"dir":"test"},{"name":"should allow a module to be redefined","suites":["moog","explicit subclassing behavior"],"updatePoint":{"line":346,"column":45,"index":9581},"line":346,"code":"    it('should allow a module to be redefined', async function () {\n      const moog = require('../lib/moog.js')({});\n\n      moog.define('myObject', {\n        methods(self) {\n          return {\n            oldMethod() {}\n\n          };\n        }\n\n      });\n      moog.redefine('myObject', {\n        methods(self) {\n          return {\n            newMethod() {}\n\n          };\n        }\n\n      });\n      const myObject = await moog.create('myObject', {});\n      assert(myObject);\n      assert(!myObject.oldMethod);\n      assert(myObject.newMethod);\n    });","file":"moog.js","skipped":false,"dir":"test"},{"name":"should find a module definition using `isDefined`","suites":["moog","explicit subclassing behavior"],"updatePoint":{"line":372,"column":57,"index":10147},"line":372,"code":"    it('should find a module definition using `isDefined`', function () {\n      const moog = require('../lib/moog.js')({});\n\n      moog.define('myObject', {});\n      assert(moog.isDefined('myObject'));\n    });","file":"moog.js","skipped":false,"dir":"test"},{"name":"should NOT find a non-existant module definition using `isDefined`","suites":["moog","explicit subclassing behavior"],"updatePoint":{"line":378,"column":74,"index":10374},"line":378,"code":"    it('should NOT find a non-existant module definition using `isDefined`', function () {\n      const moog = require('../lib/moog.js')({});\n\n      assert(!moog.isDefined('myObject'));\n    });","file":"moog.js","skipped":false,"dir":"test"},{"name":"should allow a class defined twice to be implicitly subclassed","suites":["moog","implicit subclassing behavior"],"updatePoint":{"line":385,"column":70,"index":10627},"line":385,"code":"    it('should allow a class defined twice to be implicitly subclassed', async function () {\n      const moog = require('../lib/moog.js')({});\n\n      moog.define('myObject', {\n        init(self) {\n          self.order = (self.order || []).concat('first');\n        }\n\n      });\n      moog.define('myObject', {\n        init(self) {\n          self.order = (self.order || []).concat('second');\n        }\n\n      });\n      const myObject = await moog.create('myObject', {});\n      assert(myObject);\n      assert(myObject.order[0] === 'first');\n      assert(myObject.order[1] === 'second');\n    });","file":"moog.js","skipped":false,"dir":"test"},{"name":"should call `init` methods baseClass-first","suites":["moog","order of operations"],"updatePoint":{"line":410,"column":50,"index":11385},"line":410,"code":"    it('should call `init` methods baseClass-first', async function () {\n      const moog = require('../lib/moog.js')({});\n\n      moog.define('baseClass', {\n        init(self) {\n          self.order = (self.order || []).concat('first');\n        }\n\n      });\n      moog.define('subClassOne', {\n        extend: 'baseClass',\n\n        init(self) {\n          self.order = (self.order || []).concat('second');\n        }\n\n      });\n      moog.define('subClassTwo', {\n        extend: 'subClassOne',\n\n        init(self) {\n          self.order = (self.order || []).concat('third');\n        }\n\n      });\n      const subClassTwo = await moog.create('subClassTwo', {});\n      assert(subClassTwo.order[0] === 'first');\n      assert(subClassTwo.order[1] === 'second');\n      assert(subClassTwo.order[2] === 'third');\n    });","file":"moog.js","skipped":false,"dir":"test"},{"name":"should call `beforeSuperClass` methods subClass-first","suites":["moog","order of operations"],"updatePoint":{"line":440,"column":61,"index":12206},"line":440,"code":"    it('should call `beforeSuperClass` methods subClass-first', async function () {\n      const moog = require('../lib/moog.js')({});\n\n      moog.define('baseClass', {\n        beforeSuperClass(self) {\n          self.options.order = (self.options.order || []).concat('third');\n        }\n\n      });\n      moog.define('subClassOne', {\n        extend: 'baseClass',\n\n        beforeSuperClass(self) {\n          self.options.order = (self.options.order || []).concat('second');\n        }\n\n      });\n      moog.define('subClassTwo', {\n        extend: 'subClassOne',\n\n        beforeSuperClass(self) {\n          self.options.order = (self.options.order || []).concat('first');\n        }\n\n      });\n      const subClassTwo = await moog.create('subClassTwo', {});\n      assert(subClassTwo.options.order[0] === 'first');\n      assert(subClassTwo.options.order[1] === 'second');\n      assert(subClassTwo.options.order[2] === 'third');\n    }); // \"sync and async playing nicely\" and exception-catching","file":"moog.js","skipped":false,"dir":"test"},{"name":"should report an error on a cyclical reference (extend in a loop)","suites":["moog","odds and ends"],"updatePoint":{"line":474,"column":73,"index":13400},"line":474,"code":"    it('should report an error on a cyclical reference (extend in a loop)', async function () {\n      const moog = require('../lib/moog.js')({});\n\n      moog.define('classOne', {\n        extend: 'classTwo'\n      });\n      moog.define('classTwo', {\n        extend: 'classOne'\n      });\n      let e;\n      let classOne;\n\n      try {\n        classOne = await moog.create('classOne', {});\n      } catch (_e) {\n        e = _e;\n      }\n\n      assert(e);\n      assert(!classOne);\n    });","file":"moog.js","skipped":false,"dir":"test"},{"name":"should report an error asynchronously when creating a nonexistent type asynchronously","suites":["moog","odds and ends"],"updatePoint":{"line":495,"column":93,"index":13901},"line":495,"code":"    it('should report an error asynchronously when creating a nonexistent type asynchronously', async function () {\n      const moog = require('../lib/moog.js')({});\n\n      try {\n        await moog.create('nonesuch');\n        assert(false);\n      } catch (e) {\n        assert(true);\n      }\n    });","file":"moog.js","skipped":false,"dir":"test"},{"name":"instanceOf should yield correct results","suites":["moog","odds and ends"],"updatePoint":{"line":505,"column":47,"index":14154},"line":505,"code":"    it('instanceOf should yield correct results', async function () {\n      const moog = require('../lib/moog.js')({});\n\n      moog.define('classOne', {});\n      moog.define('classTwo', {\n        extend: 'classOne'\n      });\n      moog.define('classThree', {});\n      moog.define('classFour', {\n        extend: 'classTwo'\n      });\n      const one = await moog.create('classOne');\n      const two = await moog.create('classTwo');\n      const three = await moog.create('classThree');\n      const four = await moog.create('classFour');\n      const rando = {\n        strange: 'object'\n      };\n      assert(moog.instanceOf(one, 'classOne'));\n      assert(moog.instanceOf(two, 'classOne'));\n      assert(!moog.instanceOf(three, 'classOne'));\n      assert(moog.instanceOf(four, 'classOne'));\n      assert(!moog.instanceOf(rando, 'classOne'));\n    });","file":"moog.js","skipped":false,"dir":"test"},{"name":"sanity check of await behavior","suites":["moog","odds and ends"],"updatePoint":{"line":529,"column":38,"index":14991},"line":529,"code":"    it('sanity check of await behavior', async function () {\n      const moog = require('../lib/moog.js')({});\n\n      moog.define('classOne', {\n        async init(self) {\n          await delay(100);\n          self.size = 1;\n        }\n\n      });\n      moog.define('classTwo', {\n        extend: 'classOne',\n\n        async init(self) {\n          await delay(1);\n          self.size = 2;\n        }\n\n      });\n      assert((await moog.create('classTwo', {})).size === 2);\n    });","file":"moog.js","skipped":false,"dir":"test"},{"name":"isMy behaves sensibly","suites":["moog","odds and ends"],"updatePoint":{"line":550,"column":29,"index":15457},"line":550,"code":"    it('isMy behaves sensibly', function () {\n      const moog = require('../lib/moog.js')({});\n\n      assert(moog.isMy('my-foo'));\n      assert(!moog.isMy('foo'));\n      assert(moog.isMy('@namespace/my-foo'));\n      assert(!moog.isMy('@namespace/foo'));\n    });","file":"moog.js","skipped":false,"dir":"test"},{"name":"originalToMy behaves sensibly","suites":["moog","odds and ends"],"updatePoint":{"line":558,"column":37,"index":15728},"line":558,"code":"    it('originalToMy behaves sensibly', function () {\n      const moog = require('../lib/moog.js')({});\n\n      assert(moog.originalToMy('foo') === 'my-foo');\n      assert(moog.originalToMy('@namespace/foo') === '@namespace/my-foo'); // originalToMy is not guaranteed to do anything specific with\n      // names that already have my-\n    });","file":"moog.js","skipped":false,"dir":"test"},{"name":"myToOriginal behaves sensibly","suites":["moog","odds and ends"],"updatePoint":{"line":565,"column":37,"index":16069},"line":565,"code":"    it('myToOriginal behaves sensibly', function () {\n      const moog = require('../lib/moog.js')({});\n\n      assert(moog.myToOriginal('my-foo') === 'foo');\n      assert(moog.myToOriginal('foo') === 'foo');\n      assert(moog.myToOriginal('@namespace/my-foo') === '@namespace/foo');\n      assert(moog.myToOriginal('@namespace/foo') === '@namespace/foo');\n    });","file":"moog.js","skipped":false,"dir":"test"},{"name":"routes should work, including extending routes","suites":["moog","sections should work"],"updatePoint":{"line":575,"column":54,"index":16504},"line":575,"code":"    it('routes should work, including extending routes', async function () {\n      const moog = require('../lib/moog.js')({\n        sections: ['routes']\n      });\n\n      moog.define('baseclass', {\n        routes(self) {\n          return {\n            post: {\n              async insert(req) {\n                return 'inserted';\n              },\n\n              async list(req) {\n                return 'listed';\n              }\n\n            }\n          };\n        }\n\n      });\n      moog.define('subclass', {\n        extend: 'baseclass',\n\n        routes(self) {\n          return {\n            post: {\n              async remove(req) {\n                return 'removed';\n              },\n\n              floss: [(req, res, next) => {\n                req.seen = true;\n                next();\n              }, req => 'flossed']\n            }\n          };\n        },\n\n        extendRoutes(self) {\n          return {\n            post: {\n              async list(_super, req) {\n                return (await _super(req)) + '-suffix';\n              },\n\n              async floss(_super, req) {\n                return (await _super(req)) + '-daily';\n              }\n\n            }\n          };\n        }\n\n      });\n      const instance = await moog.create('subclass', {});\n      assert(instance);\n      assert((await instance.routes.post.insert({})) === 'inserted');\n      assert((await instance.routes.post.list({})) === 'listed-suffix');\n      assert((await instance.routes.post.remove({})) === 'removed');\n      const req = {};\n      const floss = await instance.routes.post.floss; // We are not here to reimplement middleware, just to verify\n      // the chain is there and would work\n\n      assert(typeof floss[0] === 'function');\n      floss[0](req, {}, function () {});\n      assert(req.seen);\n      assert((await floss[1](req)) === 'flossed-daily');\n    });","file":"moog.js","skipped":false,"dir":"test"},{"name":"should initialize","suites":["Oembed"],"updatePoint":{"line":14,"column":23,"index":264},"line":14,"code":"  it('should initialize', async function () {\n    apos = await t.create({\n      root: module\n    });\n    assert(apos.modules['@apostrophecms/oembed']);\n    assert(apos.oembed.__meta.name === '@apostrophecms/oembed');\n  }); // TODO: test this with mocks. Travis CI erratically times out","file":"oembed.js","skipped":false,"dir":"test"},{"name":"should initialize","suites":["page-type"],"updatePoint":{"line":14,"column":23,"index":271},"line":14,"code":"  it('should initialize', async function () {\n    apos = await t.create({\n      root: module,\n      modules: {\n        'nifty-page': {\n          extend: '@apostrophecms/page-type'\n        }\n      }\n    });\n    assert(apos && apos.__meta.name === 'apostrophe');\n  });","file":"page-type.js","skipped":false,"dir":"test"},{"name":"should fire a dispatch route for its homepage","suites":["page-type"],"updatePoint":{"line":25,"column":51,"index":566},"line":25,"code":"  it('should fire a dispatch route for its homepage', async function () {\n    const niftyPages = apos.modules['nifty-page'];\n    niftyPages.dispatch('/', async function (req) {\n      req.handlerInvoked = true;\n      niftyPages.setTemplate(req, 'index');\n    }); // Simulate a page request\n\n    const req = apos.task.getAnonReq({\n      data: {\n        bestPage: {\n          type: 'nifty-page'\n        }\n      },\n      remainder: '/'\n    });\n    await apos.page.emit('serve', req);\n    assert(req.handlerInvoked);\n  });","file":"page-type.js","skipped":false,"dir":"test"},{"name":"should fire a dispatch route matching a second, longer URL","suites":["page-type"],"updatePoint":{"line":43,"column":64,"index":1097},"line":43,"code":"  it('should fire a dispatch route matching a second, longer URL', async function () {\n    const niftyPages = apos.modules['nifty-page'];\n    niftyPages.dispatch('/foo', async function (req) {\n      req.handlerInvoked = true;\n      niftyPages.setTemplate(req, 'foo');\n    }); // Simulate a page request\n\n    const req = apos.task.getAnonReq({\n      data: {\n        bestPage: {\n          type: 'nifty-page'\n        }\n      },\n      remainder: '/foo'\n    });\n    await apos.page.emit('serve', req);\n    assert(req.handlerInvoked);\n  });","file":"page-type.js","skipped":false,"dir":"test"},{"name":"should fire a dispatch route with parameters","suites":["page-type"],"updatePoint":{"line":61,"column":50,"index":1618},"line":61,"code":"  it('should fire a dispatch route with parameters', async function () {\n    const niftyPages = apos.modules['nifty-page'];\n    niftyPages.dispatch('/bar/:bizzle/:kapow/*', async function (req) {\n      req.barInvoked = true;\n      niftyPages.setTemplate(req, 'bar');\n    }); // Simulate a page request\n\n    const req = apos.task.getAnonReq({\n      data: {\n        bestPage: {\n          type: 'nifty-page'\n        }\n      },\n      remainder: '/bar/wacky/wonky/wibble/skip'\n    });\n    await apos.page.emit('serve', req);\n    assert(req.barInvoked);\n    assert(req.params.bizzle === 'wacky');\n    assert(req.params.kapow === 'wonky');\n    assert(req.params[0] === 'wibble/skip');\n  });","file":"page-type.js","skipped":false,"dir":"test"},{"name":"should allow a later call to dispatch to override an earlier dispatch route","suites":["page-type"],"updatePoint":{"line":82,"column":81,"index":2333},"line":82,"code":"  it('should allow a later call to dispatch to override an earlier dispatch route', async function () {\n    const niftyPages = apos.modules['nifty-page'];\n    await niftyPages.dispatch('/foo', function (req) {\n      req.foo2Invoked = true;\n      niftyPages.setTemplate(req, 'foo2');\n    }); // Simulate a page request\n\n    const req = apos.task.getAnonReq({\n      data: {\n        bestPage: {\n          type: 'nifty-page'\n        }\n      },\n      remainder: '/foo'\n    });\n    await apos.page.emit('serve', req);\n    assert(req.foo2Invoked);\n    assert(!req.fooInvoked);\n  });","file":"page-type.js","skipped":false,"dir":"test"},{"name":"should not match when page type is wrong","suites":["page-type"],"updatePoint":{"line":101,"column":46,"index":2874},"line":101,"code":"  it('should not match when page type is wrong', async function () {\n    // Simulate a page request\n    const req = apos.task.getAnonReq({\n      data: {\n        bestPage: {\n          type: 'wibble-page'\n        }\n      },\n      remainder: '/foo'\n    });\n    await apos.page.emit('serve', req);\n    assert(!req.foo2Invoked);\n  });","file":"page-type.js","skipped":false,"dir":"test"},{"name":"should not match when there is no bestPage","suites":["page-type"],"updatePoint":{"line":114,"column":48,"index":3206},"line":114,"code":"  it('should not match when there is no bestPage', async function () {\n    // Simulate a page request\n    const req = apos.task.getAnonReq({\n      data: {\n        bestPage: null\n      },\n      remainder: '/foo'\n    });\n    await apos.page.emit('serve', req);\n    assert(!req.foo2Invoked);\n  });","file":"page-type.js","skipped":false,"dir":"test"},{"name":"should be able to insert a test page manually into the db","suites":["page-type"],"updatePoint":{"line":125,"column":63,"index":3516},"line":125,"code":"  it('should be able to insert a test page manually into the db', async function () {\n    const testItem = {\n      _id: 'niftyPages1',\n      type: 'nifty-page',\n      slug: '/niftyPages',\n      visibility: 'public',\n      path: '/niftyPages',\n      level: 1,\n      rank: 5,\n      archived: false\n    };\n    const response = await apos.doc.db.insertOne(testItem);\n    assert(response.insertedCount === 1);\n    assert(response.ops[0]._id === 'niftyPages1');\n  });","file":"page-type.js","skipped":false,"dir":"test"},{"name":"should match a dispatch route on a real live page request","suites":["page-type"],"updatePoint":{"line":140,"column":63,"index":3978},"line":140,"code":"  it('should match a dispatch route on a real live page request', async function () {\n    const body = await apos.http.get('/niftyPages'); // Did we get the index output?\n\n    assert(body.match(/niftyPages-index-template-rendered-this/));\n  });","file":"page-type.js","skipped":false,"dir":"test"},{"name":"runs foo route with /foo remainder","suites":["page-type"],"updatePoint":{"line":145,"column":40,"index":4200},"line":145,"code":"  it('runs foo route with /foo remainder', async function () {\n    const body = await apos.http.get('/niftyPages/foo'); // Did we get the foo output?\n\n    assert(body.match(/niftyPages-foo2-template-rendered-this/));\n  });","file":"page-type.js","skipped":false,"dir":"test"},{"name":"yields 404 with bad remainder (not matching any dispatch routes)","suites":["page-type"],"updatePoint":{"line":150,"column":70,"index":4453},"line":150,"code":"  it('yields 404 with bad remainder (not matching any dispatch routes)', async function () {\n    try {\n      await apos.http.get('/niftyPages/tututu');\n      assert(false);\n    } catch (e) {\n      assert(e.status === 404);\n    }\n  });","file":"page-type.js","skipped":false,"dir":"test"},{"name":"should be a property of the apos object","suites":["Pages Public API"],"updatePoint":{"line":14,"column":45,"index":300},"line":14,"code":"  it('should be a property of the apos object', async function () {\n    apos = await t.create({\n      root: module,\n      modules: {\n        '@apostrophecms/page': {\n          options: {\n            park: [],\n            types: [{\n              name: '@apostrophecms/home-page',\n              label: 'Home'\n            }, {\n              name: 'test-page',\n              label: 'Test Page'\n            }]\n          }\n        },\n        'test-page': {\n          extend: '@apostrophecms/page-type'\n        }\n      }\n    });\n    assert(apos.page.__meta.name === '@apostrophecms/page');\n  });","file":"pages-public-api.js","skipped":false,"dir":"test"},{"name":"cannot GET the home page without session without publicApiProjection","suites":["Pages Public API"],"updatePoint":{"line":37,"column":74,"index":918},"line":37,"code":"  it('cannot GET the home page without session without publicApiProjection', async () => {\n    try {\n      await apos.http.get('/api/v1/@apostrophecms/page', {}); // Getting here would be bad\n\n      assert(false);\n    } catch (e) {\n      assert(e.status === 404);\n    }\n  });","file":"pages-public-api.js","skipped":false,"dir":"test"},{"name":"can GET the home page without session with publicApiProjection","suites":["Pages Public API"],"updatePoint":{"line":46,"column":68,"index":1188},"line":46,"code":"  it('can GET the home page without session with publicApiProjection', async () => {\n    // Patch the option to simplify test\n    apos.page.options.publicApiProjection = {\n      title: 1,\n      _url: 1,\n      path: 1,\n      level: 1,\n      rank: 1\n    };\n    const home = await apos.http.get('/api/v1/@apostrophecms/page', {});\n    assert(home); // But projection did apply\n\n    assert(!home.searchSummary);\n  });","file":"pages-public-api.js","skipped":false,"dir":"test"},{"name":"should be a property of the apos object","suites":["Pages REST"],"updatePoint":{"line":31,"column":45,"index":694},"line":31,"code":"  it('should be a property of the apos object', async function () {\n    apos = await t.create({\n      root: module,\n      modules: {\n        '@apostrophecms/page': {\n          options: {\n            publicApiProjection: {\n              title: 1,\n              _url: 1,\n              path: 1,\n              level: 1,\n              rank: 1\n            },\n            park: [],\n            types: [{\n              name: '@apostrophecms/home-page',\n              label: 'Home'\n            }, {\n              name: 'test-page',\n              label: 'Test Page'\n            }]\n          }\n        },\n        'two-column-widget': {\n          extend: '@apostrophecms/widget-type',\n          options: {\n            label: 'Two Column'\n          },\n          fields: {\n            add: {\n              one: {\n                type: 'area',\n                contextual: true,\n                options: {\n                  widgets: areaConfig\n                }\n              },\n              two: {\n                type: 'area',\n                contextual: true,\n                options: {\n                  widgets: areaConfig\n                }\n              }\n            }\n          }\n        },\n        'test-page': {\n          extend: '@apostrophecms/page-type',\n          fields: {\n            add: {\n              color: {\n                type: 'string'\n              },\n              body: {\n                type: 'area',\n                options: {\n                  widgets: {\n                    '@apostrophecms/rich-text': {\n                      toolbar: ['bold', 'italic']\n                    },\n                    '@apostrophecms/image': {},\n                    '@apostrophecms/video': {},\n                    'two-column': {}\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    });\n    assert(apos.page.__meta.name === '@apostrophecms/page');\n  });","file":"pages-rest.js","skipped":false,"dir":"test"},{"name":"should be able to insert test users","suites":["Pages REST"],"updatePoint":{"line":105,"column":41,"index":2590},"line":105,"code":"  it('should be able to insert test users', async function () {\n    assert(apos.user.newInstance);\n    const user = apos.user.newInstance();\n    assert(user);\n    user.title = 'admin';\n    user.username = 'admin';\n    user.password = 'admin';\n    user.email = 'ad@min.com';\n    user.role = 'admin';\n    await apos.user.insert(apos.task.getReq(), user);\n    const user2 = apos.user.newInstance();\n    assert(user2);\n    user2.title = 'admin2';\n    user2.username = 'admin2';\n    user2.password = 'admin2';\n    user2.email = 'ad@min2.com';\n    user2.role = 'admin';\n    return apos.user.insert(apos.task.getReq(), user2);\n  });","file":"pages-rest.js","skipped":false,"dir":"test"},{"name":"REST: should be able to log in as admin","suites":["Pages REST"],"updatePoint":{"line":124,"column":45,"index":3220},"line":124,"code":"  it('REST: should be able to log in as admin', async () => {\n    jar = apos.http.jar(); // establish session\n\n    let page = await apos.http.get('/', {\n      jar\n    });\n    assert(page.match(/logged out/)); // Log in\n\n    await apos.http.post('/api/v1/@apostrophecms/login/login', {\n      body: {\n        username: 'admin',\n        password: 'admin',\n        session: true\n      },\n      jar\n    }); // Confirm login\n\n    page = await apos.http.get('/', {\n      jar\n    });\n    assert(page.match(/logged in/));\n  });","file":"pages-rest.js","skipped":false,"dir":"test"},{"name":"can GET the home page without session","suites":["Pages REST"],"updatePoint":{"line":146,"column":43,"index":3737},"line":146,"code":"  it('can GET the home page without session', async () => {\n    const home = await apos.http.get('/api/v1/@apostrophecms/page', {});\n    assert(home);\n    assert(home.slug === '/'); // make sure new style paths used\n\n    assert(home.path !== '/');\n    assert(`${home.path}:en:published` === home._id);\n    assert(home.level === 0);\n    homeId = home._id;\n  });","file":"pages-rest.js","skipped":false,"dir":"test"},{"name":"should be able to use db to insert documents","suites":["Pages REST"],"updatePoint":{"line":156,"column":50,"index":4105},"line":156,"code":"  it('should be able to use db to insert documents', async function () {\n    const testItems = [{\n      _id: 'parent:en:published',\n      aposLocale: 'en:published',\n      aposDocId: 'parent',\n      type: 'test-page',\n      slug: '/parent',\n      visibility: 'public',\n      path: `${homeId.replace(':en:published', '')}/parent`,\n      level: 1,\n      rank: 0\n    }, {\n      _id: 'child:en:published',\n      aposLocale: 'en:published',\n      aposDocId: 'child',\n      slug: '/child',\n      type: 'test-page',\n      visibility: 'public',\n      path: `${homeId.replace(':en:published', '')}/parent/child`,\n      level: 2,\n      rank: 0\n    }, {\n      _id: 'grandchild:en:published',\n      aposLocale: 'en:published',\n      aposDocId: 'grandchild',\n      type: 'test-page',\n      slug: '/grandchild',\n      visibility: 'public',\n      path: `${homeId.replace(':en:published', '')}/parent/child/grandchild`,\n      level: 3,\n      rank: 0\n    }, {\n      _id: 'sibling:en:published',\n      aposLocale: 'en:published',\n      aposDocId: 'sibling',\n      type: 'test-page',\n      slug: '/sibling',\n      visibility: 'public',\n      path: `${homeId.replace(':en:published', '')}/parent/sibling`,\n      level: 2,\n      rank: 1\n    }, {\n      _id: 'cousin:en:published',\n      aposLocale: 'en:published',\n      aposDocId: 'cousin',\n      type: 'test-page',\n      slug: '/cousin',\n      visibility: 'public',\n      path: `${homeId.replace(':en:published', '')}/parent/sibling/cousin`,\n      level: 3,\n      rank: 0\n    }, {\n      _id: 'another-parent:en:published',\n      aposLocale: 'en:published',\n      aposDocId: 'another-parent',\n      type: 'test-page',\n      slug: '/another-parent',\n      visibility: 'public',\n      path: `${homeId.replace(':en:published', '')}/another-parent`,\n      level: 1,\n      rank: 1\n    }, {\n      _id: 'neighbor:en:published',\n      aposLocale: 'en:published',\n      aposDocId: 'neighbor',\n      type: 'test-page',\n      slug: '/neighbor',\n      visibility: 'public',\n      path: `${homeId.replace(':en:published', '')}/neighbor`,\n      level: 1,\n      rank: 2\n    }]; // Insert draft versions too to match the A3 data model\n\n    const draftItems = await apos.doc.db.insertMany(testItems.map(item => ({ ...item,\n      aposLocale: item.aposLocale.replace(':published', ':draft'),\n      _id: item._id.replace(':published', ':draft')\n    })));\n    assert(draftItems.result.ok === 1);\n    assert(draftItems.insertedCount === 7);\n    const items = await apos.doc.db.insertMany(testItems);\n    assert(items.result.ok === 1);\n    assert(items.insertedCount === 7);\n  });","file":"pages-rest.js","skipped":false,"dir":"test"},{"name":"is able to make a subpage of the homepage without _position or _targetId","suites":["Pages REST"],"updatePoint":{"line":239,"column":78,"index":6720},"line":239,"code":"  it('is able to make a subpage of the homepage without _position or _targetId', async function () {\n    const body = {\n      slug: '/new-tab',\n      visibility: 'public',\n      type: 'test-page',\n      title: 'New Tab'\n    };\n    const page = await apos.http.post('/api/v1/@apostrophecms/page', {\n      body,\n      jar\n    });\n    assert(page);\n    assert(page.title === 'New Tab'); // Is the path generally correct?\n\n    assert.strictEqual(page.path, `${homeId.replace(':en:published', '')}/${page._id.replace(':en:published', '')}`);\n    assert.strictEqual(page.level, 1);\n  });","file":"pages-rest.js","skipped":false,"dir":"test"},{"name":"is able to make a subpage of the homepage at index `1` with numerical _position","suites":["Pages REST"],"updatePoint":{"line":256,"column":85,"index":7309},"line":256,"code":"  it('is able to make a subpage of the homepage at index `1` with numerical _position', async function () {\n    const body = {\n      slug: '/second-new',\n      visibility: 'public',\n      type: 'test-page',\n      title: 'Second New',\n      _targetId: '_home',\n      _position: '1'\n    };\n    const page = await apos.http.post('/api/v1/@apostrophecms/page', {\n      body,\n      jar\n    });\n    assert(page);\n    assert(page.title === 'Second New'); // Is the path generally correct?\n\n    assert.strictEqual(page.path, `${homeId.replace(':en:published', '')}/${page._id.replace(':en:published', '')}`);\n    const home = await apos.http.get('/api/v1/@apostrophecms/page?children=1', {\n      jar\n    });\n    assert(home);\n    assert(home._children);\n    assert(home._children[1]);\n    assert(home._children[1]._id === page._id);\n  });","file":"pages-rest.js","skipped":false,"dir":"test"},{"name":"is able to make a subpage of /parent with _position and _targetId","suites":["Pages REST"],"updatePoint":{"line":282,"column":71,"index":8143},"line":282,"code":"  it('is able to make a subpage of /parent with _position and _targetId', async function () {\n    const body = {\n      slug: '/new-page',\n      visibility: 'public',\n      type: 'test-page',\n      title: 'New Page',\n      _targetId: 'parent:en:published',\n      _position: 'lastChild'\n    };\n    const page = await apos.http.post('/api/v1/@apostrophecms/page', {\n      body,\n      jar\n    });\n    newPageId = page._id;\n    assert(page);\n    assert(page.title === 'New Page'); // Is the path generally correct?\n\n    assert.strictEqual(page.path, `${homeId.replace(':en:published', '')}/parent/${page._id.replace(':en:published', '')}`);\n    assert.strictEqual(page.level, 2);\n    assert.strictEqual(page.rank, 2);\n  });","file":"pages-rest.js","skipped":false,"dir":"test"},{"name":"cannot POST a page without a session","suites":["Pages REST"],"updatePoint":{"line":303,"column":42,"index":8833},"line":303,"code":"  it('cannot POST a page without a session', async () => {\n    const body = {\n      slug: '/new-tab',\n      visibility: 'public',\n      type: 'test-page',\n      title: 'New Tab'\n    };\n\n    try {\n      await apos.http.post('/api/v1/@apostrophecms/page', {\n        body\n      });\n      assert(false);\n    } catch (e) {\n      assert(true);\n    }\n  });","file":"pages-rest.js","skipped":false,"dir":"test"},{"name":"should be able to find just a single page with ancestors","suites":["Pages REST"],"updatePoint":{"line":320,"column":62,"index":9203},"line":320,"code":"  it('should be able to find just a single page with ancestors', async function () {\n    const page = await apos.http.get('/api/v1/@apostrophecms/page/child:en:published');\n    assert(page);\n    assert(page.path === `${homeId.replace(':en:published', '')}/parent/child`); // There should be 2 ancestors.\n\n    assert(page._ancestors.length === 2); // The first ancestor should be the homepage\n\n    assert.strictEqual(page._ancestors[0].path, `${homeId.replace(':en:published', '')}`); // The second ancestor should be 'parent'\n\n    assert.strictEqual(page._ancestors[1].path, `${homeId.replace(':en:published', '')}/parent`); // There should be only 1 result.\n\n    assert(page); // There should be 2 ancestors.\n\n    assert(page._ancestors.length === 2);\n  });","file":"pages-rest.js","skipped":false,"dir":"test"},{"name":"should be able to find just a single page with children","suites":["Pages REST"],"updatePoint":{"line":335,"column":61,"index":9961},"line":335,"code":"  it('should be able to find just a single page with children', async function () {\n    const page = await apos.http.get('/api/v1/@apostrophecms/page/parent:en:published');\n    assert(page);\n    assert(page.path === `${homeId.replace(':en:published', '')}/parent`); // There should be 1 ancestor\n\n    assert(page._ancestors.length === 1); // The first ancestor should be the homepage\n\n    assert.strictEqual(page._ancestors[0].path, `${homeId.replace(':en:published', '')}`); // There should be children\n\n    assert(page._children);\n    assert(page._children.length === 3);\n    assert(page._children[0]._id === 'child:en:published');\n    assert(page._children[1]._id === 'sibling:en:published');\n    assert(page._children[2].slug === '/new-page');\n  });","file":"pages-rest.js","skipped":false,"dir":"test"},{"name":"is able to move root/parent/sibling/cousin after root/parent","suites":["Pages REST"],"updatePoint":{"line":350,"column":66,"index":10720},"line":350,"code":"  it('is able to move root/parent/sibling/cousin after root/parent', async function () {\n    const page = await apos.http.patch('/api/v1/@apostrophecms/page/cousin:en:published', {\n      body: {\n        _targetId: 'parent:en:published',\n        _position: 'after'\n      },\n      jar\n    });\n    assert(page._id); // Is the new path correct?\n\n    assert.strictEqual(page.path, `${homeId.replace(':en:published', '')}/cousin`); // Is the rank correct?\n\n    const home = await apos.http.get('/api/v1/@apostrophecms/page', {});\n    assert(home._children);\n    assert(home._children[3]._id === 'cousin:en:published');\n  });","file":"pages-rest.js","skipped":false,"dir":"test"},{"name":"is able to move root/cousin before root/parent/child","suites":["Pages REST"],"updatePoint":{"line":366,"column":58,"index":11331},"line":366,"code":"  it('is able to move root/cousin before root/parent/child', async function () {\n    // 'Cousin' _id === 4312\n    // 'Child' _id === 2341\n    const page = await apos.http.patch('/api/v1/@apostrophecms/page/cousin:en:published', {\n      body: {\n        _targetId: 'child:en:published',\n        _position: 'before'\n      },\n      jar\n    }); // Is the new path correct?\n\n    assert.strictEqual(page.path, `${homeId.replace(':en:published', '')}/parent/cousin`); // Is the rank correct?\n\n    assert.strictEqual(page.rank, 0);\n  });","file":"pages-rest.js","skipped":false,"dir":"test"},{"name":"is able to move root/parent/child before root/parent/cousin using numerical position","suites":["Pages REST"],"updatePoint":{"line":381,"column":90,"index":11892},"line":381,"code":"  it('is able to move root/parent/child before root/parent/cousin using numerical position', async function () {\n    const page = await apos.http.patch('/api/v1/@apostrophecms/page/child:en:published', {\n      body: {\n        _targetId: 'parent:en:published',\n        _position: 0\n      },\n      jar\n    }); // Is the new path correct?\n\n    assert.strictEqual(page.path, `${homeId.replace(':en:published', '')}/parent/child`); // Is the rank correct?\n\n    assert.strictEqual(page.rank, 0);\n  });","file":"pages-rest.js","skipped":false,"dir":"test"},{"name":"is able to move root/parent/new-page between root/parent/cousin and root/parent/sibling using numerical position","suites":["Pages REST"],"updatePoint":{"line":394,"column":118,"index":12416},"line":394,"code":"  it('is able to move root/parent/new-page between root/parent/cousin and root/parent/sibling using numerical position', async function () {\n    const page = await apos.http.patch(`/api/v1/@apostrophecms/page/${newPageId}`, {\n      body: {\n        _targetId: 'parent:en:published',\n        _position: 2\n      },\n      jar\n    });\n    const cousin = await apos.http.get('/api/v1/@apostrophecms/page/cousin:en:published', {\n      jar\n    });\n    const sibling = await apos.http.get('/api/v1/@apostrophecms/page/sibling:en:published', {\n      jar\n    }); // Is the new path correct?\n\n    assert.strictEqual(page.path, `${homeId.replace(':en:published', '')}/parent/${newPageId.replace(':en:published', '')}`); // Is the rank correct?\n\n    assert(page.rank > cousin.rank);\n    assert(page.rank < sibling.rank);\n  });","file":"pages-rest.js","skipped":false,"dir":"test"},{"name":"is able to move root/neighbor as the last child of /root/parent using numerical position","suites":["Pages REST"],"updatePoint":{"line":414,"column":94,"index":13205},"line":414,"code":"  it('is able to move root/neighbor as the last child of /root/parent using numerical position', async function () {\n    const page = await apos.http.patch('/api/v1/@apostrophecms/page/neighbor:en:published', {\n      body: {\n        _targetId: 'parent:en:published',\n        _position: 4\n      },\n      jar\n    }); // `sibling` was previously the last child of `parent`.\n\n    const sibling = await apos.http.get('/api/v1/@apostrophecms/page/sibling:en:published', {\n      jar\n    }); // Is the new path correct?\n\n    assert.strictEqual(page.path, `${homeId.replace(':en:published', '')}/parent/neighbor`); // Is the rank correct?\n\n    assert(page.rank > sibling.rank);\n  });","file":"pages-rest.js","skipped":false,"dir":"test"},{"name":"allows positioning a page at its existing location (lastChild) using numerical position","suites":["Pages REST"],"updatePoint":{"line":431,"column":93,"index":13879},"line":431,"code":"  it('allows positioning a page at its existing location (lastChild) using numerical position', async function () {\n    const page = await apos.http.patch('/api/v1/@apostrophecms/page/neighbor:en:published', {\n      body: {\n        _targetId: 'parent:en:published',\n        _position: 4\n      },\n      jar\n    }); // `sibling` was previously the last child of `parent`.\n\n    const sibling = await apos.http.get('/api/v1/@apostrophecms/page/sibling:en:published', {\n      jar\n    }); // Is the new path correct?\n\n    assert.strictEqual(page.path, `${homeId.replace(':en:published', '')}/parent/neighbor`); // Is the rank correct?\n\n    assert(page.rank > sibling.rank);\n  });","file":"pages-rest.js","skipped":false,"dir":"test"},{"name":"is able to move root/parent/child/grandchild to the next-to-last position under `parent`","suites":["Pages REST"],"updatePoint":{"line":448,"column":94,"index":14554},"line":448,"code":"  it('is able to move root/parent/child/grandchild to the next-to-last position under `parent`', async function () {\n    const page = await apos.http.patch('/api/v1/@apostrophecms/page/grandchild:en:published', {\n      body: {\n        _targetId: 'parent:en:published',\n        _position: 4\n      },\n      jar\n    }); // `sibling` was previously the next-to-last child of `parent`.\n\n    const sibling = await apos.http.get('/api/v1/@apostrophecms/page/sibling:en:published', {\n      jar\n    });\n    const neighbor = await apos.http.get('/api/v1/@apostrophecms/page/neighbor:en:published', {\n      jar\n    }); // Is the new path correct?\n\n    assert.strictEqual(page.path, `${homeId.replace(':en:published', '')}/parent/grandchild`); // Is the rank correct?\n\n    assert(page.rank > sibling.rank);\n    assert(page.rank < neighbor.rank);\n  });","file":"pages-rest.js","skipped":false,"dir":"test"},{"name":"allows positioning a page at its existing location (4 of 5) using numerical position","suites":["Pages REST"],"updatePoint":{"line":469,"column":90,"index":15390},"line":469,"code":"  it('allows positioning a page at its existing location (4 of 5) using numerical position', async function () {\n    const page = await apos.http.patch('/api/v1/@apostrophecms/page/grandchild:en:published', {\n      body: {\n        _targetId: 'parent:en:published',\n        _position: 4\n      },\n      jar\n    }); // `sibling` was previously the next-to-last child of `parent`.\n\n    const sibling = await apos.http.get('/api/v1/@apostrophecms/page/sibling:en:published', {\n      jar\n    });\n    const neighbor = await apos.http.get('/api/v1/@apostrophecms/page/neighbor:en:published', {\n      jar\n    }); // Is the new path correct?\n\n    assert.strictEqual(page.path, `${homeId.replace(':en:published', '')}/parent/grandchild`); // Is the rank correct?\n\n    assert(page.rank > sibling.rank);\n    assert(page.rank < neighbor.rank);\n  });","file":"pages-rest.js","skipped":false,"dir":"test"},{"name":"is able to move root/parent/cousin inside root/parent/sibling","suites":["Pages REST"],"updatePoint":{"line":490,"column":67,"index":16203},"line":490,"code":"  it('is able to move root/parent/cousin inside root/parent/sibling', async function () {\n    const page = await apos.http.patch('/api/v1/@apostrophecms/page/cousin:en:published', {\n      body: {\n        _targetId: 'sibling:en:published',\n        _position: 'firstChild'\n      },\n      jar\n    }); // Is the new path correct?\n\n    assert.strictEqual(page.path, `${homeId.replace(':en:published', '')}/parent/sibling/cousin`); // Is the rank correct?\n\n    assert.strictEqual(page.rank, 0);\n  });","file":"pages-rest.js","skipped":false,"dir":"test"},{"name":"moving /parent into /another-parent should also move /parent/sibling","suites":["Pages REST"],"updatePoint":{"line":503,"column":74,"index":16705},"line":503,"code":"  it('moving /parent into /another-parent should also move /parent/sibling', async function () {\n    await apos.http.patch('/api/v1/@apostrophecms/page/parent:en:published', {\n      body: {\n        _targetId: 'another-parent:en:published',\n        _position: 'firstChild'\n      },\n      jar\n    });\n    const page = await apos.http.get('/api/v1/@apostrophecms/page/sibling:en:published', {\n      jar\n    }); // Is the grandchild's path correct?\n\n    assert.strictEqual(page.path, `${homeId.replace(':en:published', '')}/another-parent/parent/sibling`);\n  });","file":"pages-rest.js","skipped":false,"dir":"test"},{"name":"can use PUT to modify a page","suites":["Pages REST"],"updatePoint":{"line":517,"column":34,"index":17224},"line":517,"code":"  it('can use PUT to modify a page', async function () {\n    const page = await apos.http.get('/api/v1/@apostrophecms/page/sibling:en:published', {\n      jar\n    });\n    assert(page);\n    page.title = 'Changed Title';\n    page.color = 'blue';\n    await apos.http.put('/api/v1/@apostrophecms/page/sibling:en:published', {\n      body: page,\n      jar\n    });\n    const page2 = await apos.http.get('/api/v1/@apostrophecms/page/sibling:en:published', {\n      jar\n    });\n    assert.strictEqual(page2.title, 'Changed Title');\n    assert.strictEqual(page2.color, 'blue');\n  });","file":"pages-rest.js","skipped":false,"dir":"test"},{"name":"can use PATCH to modify one property of a page","suites":["Pages REST"],"updatePoint":{"line":534,"column":52,"index":17814},"line":534,"code":"  it('can use PATCH to modify one property of a page', async function () {\n    const page = await apos.http.get('/api/v1/@apostrophecms/page/sibling:en:published', {\n      jar\n    });\n    assert(page);\n    page.title = 'Changed Title';\n    await apos.http.patch('/api/v1/@apostrophecms/page/sibling:en:published', {\n      body: {\n        title: 'New Title'\n      },\n      jar\n    });\n    const page2 = await apos.http.get('/api/v1/@apostrophecms/page/sibling:en:published', {\n      jar\n    });\n    assert.strictEqual(page2.title, 'New Title'); // Did not modify this\n\n    assert.strictEqual(page2.color, 'blue');\n  });","file":"pages-rest.js","skipped":false,"dir":"test"},{"name":"can use PATCH to move a page beneath the home page with _targetId: _home","suites":["Pages REST"],"updatePoint":{"line":553,"column":78,"index":18459},"line":553,"code":"  it('can use PATCH to move a page beneath the home page with _targetId: _home', async function () {\n    const page = await apos.http.patch('/api/v1/@apostrophecms/page/cousin:en:published', {\n      body: {\n        _targetId: '_home',\n        _position: 'firstChild'\n      },\n      jar\n    });\n    assert(page._id);\n    assert.strictEqual(page.path, `${homeId.replace(':en:published', '')}/${page.aposDocId}`);\n    assert.strictEqual(page.level, 1);\n    assert.strictEqual(page.rank, 0);\n  });","file":"pages-rest.js","skipped":false,"dir":"test"},{"name":"can use PATCH to move a page into the archive using _archive as _targetId","suites":["Pages REST"],"updatePoint":{"line":566,"column":79,"index":18954},"line":566,"code":"  it('can use PATCH to move a page into the archive using _archive as _targetId', async function () {\n    let page = await apos.http.patch('/api/v1/@apostrophecms/page/cousin:en:published', {\n      body: {\n        _targetId: '_archive',\n        _position: 'firstChild'\n      },\n      jar\n    });\n    assert(page._id);\n    const archive = await apos.http.get('/api/v1/@apostrophecms/page/_archive?archived=1', {\n      jar\n    });\n    assert(archive); // Verify this is really working because of the _archived\n    // shortcut\n\n    assert(archive._id !== '_archive');\n    assert.strictEqual(page.path, `${homeId.replace(':en:published', '')}/${archive.aposDocId}/${page.aposDocId}`);\n    assert.strictEqual(page.level, 2);\n    assert.strictEqual(page.rank, 0);\n    page = await apos.http.get('/api/v1/@apostrophecms/page/cousin:en:published?_edit=1&archived=1', {\n      jar\n    });\n    assert(page.archived);\n  });","file":"pages-rest.js","skipped":false,"dir":"test"},{"name":"Can use PATCH to add a widget to an area by path","suites":["Pages REST"],"updatePoint":{"line":590,"column":54,"index":19841},"line":590,"code":"  it('Can use PATCH to add a widget to an area by path', async () => {\n    let page = await apos.http.get('/api/v1/@apostrophecms/page/sibling:en:published', {\n      jar\n    });\n    page = await apos.http.patch('/api/v1/@apostrophecms/page/sibling:en:published', {\n      body: {\n        $push: {\n          'body.items': {\n            metaType: 'widget',\n            type: '@apostrophecms/rich-text',\n            content: 'This is <b>Bold</b>'\n          }\n        }\n      },\n      jar\n    });\n    page = await apos.http.get('/api/v1/@apostrophecms/page/sibling:en:published', {\n      jar\n    });\n    assert(page.body.items[0]);\n    assert(page.body.items[0].content.match(/<b>Bold<\\/b>/));\n  });","file":"pages-rest.js","skipped":false,"dir":"test"},{"name":"Can use PATCH to update a widget by path","suites":["Pages REST"],"updatePoint":{"line":612,"column":46,"index":20528},"line":612,"code":"  it('Can use PATCH to update a widget by path', async () => {\n    let page = await apos.http.get('/api/v1/@apostrophecms/page/sibling:en:published', {\n      jar\n    });\n    page = await apos.http.patch('/api/v1/@apostrophecms/page/sibling:en:published', {\n      body: {\n        'body.items.0': {\n          metaType: 'widget',\n          type: '@apostrophecms/rich-text',\n          content: 'This is normal'\n        }\n      },\n      jar\n    });\n    page = await apos.http.get('/api/v1/@apostrophecms/page/sibling:en:published', {\n      jar\n    });\n    assert(page.body.items[0]);\n    assert(page.body.items[0].content.match(/normal/));\n  });","file":"pages-rest.js","skipped":false,"dir":"test"},{"name":"Can use PATCH to update a widget via @ syntax","suites":["Pages REST"],"updatePoint":{"line":632,"column":51,"index":21174},"line":632,"code":"  it('Can use PATCH to update a widget via @ syntax', async () => {\n    let page = await apos.http.get('/api/v1/@apostrophecms/page/sibling:en:published', {\n      jar\n    });\n    const _id = `@${page.body.items[0]._id}`;\n    page = await apos.http.patch('/api/v1/@apostrophecms/page/sibling:en:published', {\n      body: {\n        [_id]: {\n          metaType: 'widget',\n          type: '@apostrophecms/rich-text',\n          content: 'I @ syntax'\n        }\n      },\n      jar\n    });\n    page = await apos.http.get('/api/v1/@apostrophecms/page/sibling:en:published', {\n      jar\n    });\n    assert(page.body.items[0]);\n    assert(page.body.items[0].content.match(/I @ syntax/));\n  });","file":"pages-rest.js","skipped":false,"dir":"test"},{"name":"Can use $position to insert a widget at the beginning of the area","suites":["Pages REST"],"updatePoint":{"line":653,"column":71,"index":21877},"line":653,"code":"  it('Can use $position to insert a widget at the beginning of the area', async () => {\n    let page = await apos.http.get('/api/v1/@apostrophecms/page/sibling:en:published', {\n      jar\n    });\n    page = await apos.http.patch('/api/v1/@apostrophecms/page/sibling:en:published', {\n      body: {\n        $push: {\n          'body.items': {\n            $each: [{\n              metaType: 'widget',\n              type: '@apostrophecms/rich-text',\n              content: 'Oh in the beginning'\n            }],\n            $position: 0\n          }\n        }\n      },\n      jar\n    });\n    page = await apos.http.get('/api/v1/@apostrophecms/page/sibling:en:published', {\n      jar\n    });\n    assert(page.body.items[0]);\n    assert(page.body.items[0].content.match(/Oh in the beginning/));\n    assert(page.body.items[1]);\n    assert(page.body.items[1].content.match(/I @ syntax/));\n    assert(!page.body.items[2]);\n  });","file":"pages-rest.js","skipped":false,"dir":"test"},{"name":"Can use $position to insert a widget in the middle of the area","suites":["Pages REST"],"updatePoint":{"line":681,"column":68,"index":22787},"line":681,"code":"  it('Can use $position to insert a widget in the middle of the area', async () => {\n    let page = await apos.http.get('/api/v1/@apostrophecms/page/sibling:en:published', {\n      jar\n    });\n    page = await apos.http.patch('/api/v1/@apostrophecms/page/sibling:en:published', {\n      body: {\n        $push: {\n          'body.items': {\n            $each: [{\n              metaType: 'widget',\n              type: '@apostrophecms/rich-text',\n              content: 'Why don\\'t you meet me in the middle'\n            }],\n            $position: 1\n          }\n        }\n      },\n      jar\n    });\n    page = await apos.http.get('/api/v1/@apostrophecms/page/sibling:en:published', {\n      jar\n    });\n    assert(page.body.items[0]);\n    assert(page.body.items[0].content.match(/Oh in the beginning/));\n    assert(page.body.items[1]);\n    assert(page.body.items[1].content.match(/middle/));\n    assert(page.body.items[2]);\n    assert(page.body.items[2].content.match(/I @ syntax/));\n    assert(!page.body.items[3]);\n  });","file":"pages-rest.js","skipped":false,"dir":"test"},{"name":"Can use $before to insert a widget in the middle of the area","suites":["Pages REST"],"updatePoint":{"line":711,"column":66,"index":23800},"line":711,"code":"  it('Can use $before to insert a widget in the middle of the area', async () => {\n    let page = await apos.http.get('/api/v1/@apostrophecms/page/sibling:en:published', {\n      jar\n    });\n    page = await apos.http.patch('/api/v1/@apostrophecms/page/sibling:en:published', {\n      body: {\n        $push: {\n          'body.items': {\n            $each: [{\n              metaType: 'widget',\n              type: '@apostrophecms/rich-text',\n              content: 'before'\n            }],\n            $before: page.body.items[1]._id\n          }\n        }\n      },\n      jar\n    });\n    page = await apos.http.get('/api/v1/@apostrophecms/page/sibling:en:published', {\n      jar\n    });\n    assert(page.body.items[0]);\n    assert(page.body.items[0].content.match(/Oh in the beginning/));\n    assert(page.body.items[1]);\n    assert(page.body.items[1].content.match(/before/));\n    assert(page.body.items[2]);\n    assert(page.body.items[2].content.match(/middle/));\n    assert(page.body.items[3]);\n    assert(page.body.items[3].content.match(/I @ syntax/));\n    assert(!page.body.items[4]);\n  });","file":"pages-rest.js","skipped":false,"dir":"test"},{"name":"Can use $after to insert a widget in the middle of the area","suites":["Pages REST"],"updatePoint":{"line":743,"column":65,"index":24889},"line":743,"code":"  it('Can use $after to insert a widget in the middle of the area', async () => {\n    let page = await apos.http.get('/api/v1/@apostrophecms/page/sibling:en:published', {\n      jar\n    });\n    page = await apos.http.patch('/api/v1/@apostrophecms/page/sibling:en:published', {\n      body: {\n        $push: {\n          'body.items': {\n            $each: [{\n              metaType: 'widget',\n              type: '@apostrophecms/rich-text',\n              content: 'after'\n            }],\n            $after: page.body.items[0]._id\n          }\n        }\n      },\n      jar\n    });\n    page = await apos.http.get('/api/v1/@apostrophecms/page/sibling:en:published', {\n      jar\n    });\n    assert(page.body.items[0]);\n    assert(page.body.items[0].content.match(/Oh in the beginning/));\n    assert(page.body.items[1]);\n    assert(page.body.items[1].content.match(/after/));\n    assert(page.body.items[2]);\n    assert(page.body.items[2].content.match(/before/));\n    assert(page.body.items[3]);\n    assert(page.body.items[3].content.match(/middle/));\n    assert(page.body.items[4]);\n    assert(page.body.items[4].content.match(/I @ syntax/));\n    assert(!page.body.items[5]);\n  });","file":"pages-rest.js","skipped":false,"dir":"test"},{"name":"can patch an @ reference in a patch containing other out-of-order @ references","suites":["Pages REST"],"updatePoint":{"line":777,"column":84,"index":26082},"line":777,"code":"  it('can patch an @ reference in a patch containing other out-of-order @ references', async () => {\n    // recreate the exact scenario since we cannot\n    // reproduce it from scratch\n    await apos.doc.db.updateOne({\n      _id: 'sibling'\n    }, {\n      $set: {\n        'body.items': [{\n          _id: 'cki6gxnch00093g631cw03444',\n          metaType: 'widget',\n          type: '@apostrophecms/rich-text',\n          content: '<p>one</p>'\n        }, {\n          _id: 'ckgs41w9r000e3h5xmjl9g1uv',\n          one: {\n            _id: 'ckhxhuyoz00084j4l7yw7brq7',\n            items: [{\n              _id: 'ckhxmr8ds001h2a67copguxnk',\n              metaType: 'widget',\n              type: '@apostrophecms/image',\n              imageIds: ['ckhuxqw8o006h094lnkip3gen']\n            }],\n            metaType: 'area'\n          },\n          two: {\n            _id: 'ckhxhuypw00094j4l0mdg0b06',\n            items: [{\n              _id: 'cki4zm66r000t2a67ojd2iyuc',\n              video: {\n                url: 'https://vimeo.com/56282283',\n                title: 'Public Test Video',\n                thumbnail: 'https://i.vimeocdn.com/video/389683305_1000.jpg'\n              },\n              metaType: 'widget',\n              type: '@apostrophecms/video'\n            }],\n            metaType: 'area'\n          },\n          metaType: 'widget',\n          type: 'two-column'\n        }, {\n          _id: 'ckgs11fi200013h5x59udhats',\n          metaType: 'widget',\n          type: '@apostrophecms/rich-text',\n          content: '<p>Today\\'s featured product:</p><p>Today\\'s featured product:</p>'\n        }, {\n          _id: 'ckhxsb9yb002b3f62q5h31dhv',\n          metaType: 'widget',\n          type: '@apostrophecms/rich-text',\n          content: ''\n        }, {\n          _id: 'cki4zlkqh000q2a67qqbtlv2l',\n          video: {\n            url: 'https://www.youtube.com/watch?v=-e6xOBCAVvA',\n            title: 'The 10-Year Hunt for the Lost McDonald\\'s DS Game',\n            thumbnail: 'https://i.ytimg.com/vi/-e6xOBCAVvA/hqdefault.jpg'\n          },\n          metaType: 'widget',\n          type: '@apostrophecms/video'\n        }, {\n          _id: 'ckhxsbcgl002c3f62hyk8a5p8',\n          metaType: 'widget',\n          type: '@apostrophecms/rich-text',\n          content: ''\n        }, {\n          _id: 'ckhxsbeoo002d3f62692wxm28',\n          metaType: 'widget',\n          type: '@apostrophecms/rich-text',\n          content: ''\n        }, {\n          _id: 'cki6g7v3b0003xrecv5oldhh9',\n          metaType: 'widget',\n          type: '@apostrophecms/rich-text',\n          content: ''\n        }, {\n          _id: 'cki6g7v3b0004xrec9hawsy7o',\n          metaType: 'widget',\n          type: '@apostrophecms/rich-text',\n          content: ''\n        }, {\n          _id: 'cki6g7v3b0005xrecwc9teivh',\n          metaType: 'widget',\n          type: '@apostrophecms/rich-text',\n          content: ''\n        }, {\n          _id: 'cki6g7v3b0006xrec6ubczv1z',\n          metaType: 'widget',\n          type: '@apostrophecms/rich-text',\n          content: ''\n        }, {\n          _id: 'cki6g7v3b0007xrecjxcgk5ub',\n          metaType: 'widget',\n          type: '@apostrophecms/rich-text',\n          content: ''\n        }, {\n          _id: 'ckgwevhkd000v3e5x99dy9jv2',\n          metaType: 'widget',\n          type: '@apostrophecms/rich-text',\n          content: '<blockquote><p>This is cool.</p></blockquote>'\n        }, {\n          _id: 'ckgwevqy600143e5xv4ihv38j',\n          one: {\n            _id: 'ckhxhuyse000g4j4lqcjklpxd',\n            items: [],\n            metaType: 'area'\n          },\n          two: {\n            _id: 'ckhxhuysm000h4j4ljjzd45kx',\n            items: [],\n            metaType: 'area'\n          },\n          metaType: 'widget',\n          type: 'two-column'\n        }]\n      }\n    });\n    const bodyId = (await apos.doc.db.findOne({\n      _id: 'sibling:en:published'\n    })).body._id; // apply the patch that fails without the fix\n\n    await apos.http.patch('/api/v1/@apostrophecms/page/sibling:en:published', {\n      jar,\n      body: {\n        _patches: [{\n          [`@${bodyId}`]: {\n            _id: 'ckgrzsklg0007ulec0ffxg5bj',\n            items: [{\n              _id: 'ckgs41w9r000e3h5xmjl9g1uv',\n              one: {\n                _id: 'ckhxhuyoz00084j4l7yw7brq7',\n                items: [{\n                  _id: 'ckhxmr8ds001h2a67copguxnk',\n                  metaType: 'widget',\n                  type: '@apostrophecms/image',\n                  imageIds: ['ckhuxqw8o006h094lnkip3gen'],\n                  _edit: true,\n                  _docId: 'ckgrzqh5a000bx7ecn4hpskk7',\n                  _image: [{\n                    _id: 'ckhuxqw8o006h094lnkip3gen',\n                    visibility: 'public',\n                    archived: false,\n                    type: '@apostrophecms/image',\n                    attachment: {\n                      _id: 'ckhxvoqra00qsuj4lq0hnkrzg',\n                      crop: null,\n                      group: 'images',\n                      createdAt: '2020-11-25T20:46:28.611Z',\n                      name: 'squirrel',\n                      title: 'squirrel',\n                      extension: 'jpg',\n                      type: 'attachment',\n                      docIds: ['ckhuxqw8o006h094lnkip3gen'],\n                      archivedDocIds: [],\n                      length: {\n                        dev: 51713,\n                        mode: 33204,\n                        nlink: 1,\n                        uid: 1001,\n                        gid: 1001,\n                        rdev: 0,\n                        blksize: 4096,\n                        ino: 4196261,\n                        size: 107948,\n                        blocks: 216,\n                        atimeMs: 1606337187953.1726,\n                        mtimeMs: 1606337187955.1726,\n                        ctimeMs: 1606337187955.1726,\n                        birthtimeMs: 1606337187955.1726,\n                        atime: '2020-11-25T20:46:27.953Z',\n                        mtime: '2020-11-25T20:46:27.955Z',\n                        ctime: '2020-11-25T20:46:27.955Z',\n                        birthtime: '2020-11-25T20:46:27.955Z'\n                      },\n                      md5: '464686711e5df3a60ba5f5384196514a',\n                      width: 1072,\n                      height: 715,\n                      landscape: true,\n                      used: true,\n                      utilized: true,\n                      archived: false,\n                      _urls: {\n                        max: '/uploads/attachments/ckhxvoqra00qsuj4lq0hnkrzg-squirrel.max.jpg',\n                        full: '/uploads/attachments/ckhxvoqra00qsuj4lq0hnkrzg-squirrel.full.jpg',\n                        'two-thirds': '/uploads/attachments/ckhxvoqra00qsuj4lq0hnkrzg-squirrel.two-thirds.jpg',\n                        'one-half': '/uploads/attachments/ckhxvoqra00qsuj4lq0hnkrzg-squirrel.one-half.jpg',\n                        'one-third': '/uploads/attachments/ckhxvoqra00qsuj4lq0hnkrzg-squirrel.one-third.jpg',\n                        'one-sixth': '/uploads/attachments/ckhxvoqra00qsuj4lq0hnkrzg-squirrel.one-sixth.jpg',\n                        original: '/uploads/attachments/ckhxvoqra00qsuj4lq0hnkrzg-squirrel.jpg'\n                      }\n                    },\n                    title: 'f23976a0 f103 4c43 844a d879a60eb609 1140x641',\n                    alt: 'I promise that\\'s a squirrel',\n                    credit: '',\n                    creditUrl: null,\n                    slug: 'image-f23976a0-f103-4c43-844a-d879a60eb609-1140x6410',\n                    metaType: 'doc',\n                    createdAt: '2020-11-23T19:20:49.080Z',\n                    titleSortified: 'f23976a0 f103 4c43 844a d879a60eb609 1140x641',\n                    updatedAt: '2020-11-25T20:48:58.668Z',\n                    highSearchText: 'f23976a0 f103 4c43 844a d879a60eb609 1140x641 image f23976a0 f103 4c43 844a d879a60eb609 1140x6410',\n                    highSearchWords: ['f23976a0', 'f103', '4c43', '844a', 'd879a60eb609', '1140x641', 'image', '1140x6410'],\n                    lowSearchText: 'f23976a0 f103 4c43 844a d879a60eb609 1140x641 image f23976a0 f103 4c43 844a d879a60eb609 1140x6410',\n                    searchSummary: '',\n                    tagsIds: [],\n                    _edit: true\n                  }]\n                }],\n                metaType: 'area',\n                _edit: true,\n                _docId: 'ckgrzqh5a000bx7ecn4hpskk7'\n              },\n              two: {\n                _id: 'ckhxhuypw00094j4l0mdg0b06',\n                items: [{\n                  _id: 'cki4zm66r000t2a67ojd2iyuc',\n                  video: {\n                    url: 'https://vimeo.com/56282283',\n                    title: 'Public Test Video',\n                    thumbnail: 'https://i.vimeocdn.com/video/389683305_1000.jpg'\n                  },\n                  metaType: 'widget',\n                  type: '@apostrophecms/video',\n                  _edit: true,\n                  _docId: 'ckgrzqh5a000bx7ecn4hpskk7'\n                }],\n                metaType: 'area',\n                _edit: true,\n                _docId: 'ckgrzqh5a000bx7ecn4hpskk7'\n              },\n              metaType: 'widget',\n              type: 'two-column',\n              _edit: true,\n              _docId: 'ckgrzqh5a000bx7ecn4hpskk7'\n            }, {\n              _id: 'ckgs11fi200013h5x59udhats',\n              metaType: 'widget',\n              type: '@apostrophecms/rich-text',\n              content: '<p>Today\\'s featured product:</p><p>Today\\'s featured product:</p>',\n              _edit: true,\n              _docId: 'ckgrzqh5a000bx7ecn4hpskk7'\n            }, {\n              _id: 'ckhxsb9yb002b3f62q5h31dhv',\n              metaType: 'widget',\n              type: '@apostrophecms/rich-text',\n              content: '',\n              _edit: true,\n              _docId: 'ckgrzqh5a000bx7ecn4hpskk7'\n            }, {\n              _id: 'cki4zlkqh000q2a67qqbtlv2l',\n              video: {\n                url: 'https://www.youtube.com/watch?v=-e6xOBCAVvA',\n                title: 'The 10-Year Hunt for the Lost McDonald\\'s DS Game',\n                thumbnail: 'https://i.ytimg.com/vi/-e6xOBCAVvA/hqdefault.jpg'\n              },\n              metaType: 'widget',\n              type: '@apostrophecms/video',\n              _edit: true,\n              _docId: 'ckgrzqh5a000bx7ecn4hpskk7'\n            }, {\n              _id: 'ckhxsbcgl002c3f62hyk8a5p8',\n              metaType: 'widget',\n              type: '@apostrophecms/rich-text',\n              content: '',\n              _edit: true,\n              _docId: 'ckgrzqh5a000bx7ecn4hpskk7'\n            }, {\n              _id: 'ckhxsbeoo002d3f62692wxm28',\n              metaType: 'widget',\n              type: '@apostrophecms/rich-text',\n              content: '',\n              _edit: true,\n              _docId: 'ckgrzqh5a000bx7ecn4hpskk7'\n            }, {\n              _id: 'cki6g7v3b0003xrecv5oldhh9',\n              metaType: 'widget',\n              type: '@apostrophecms/rich-text',\n              content: '',\n              _edit: true,\n              _docId: 'ckgrzqh5a000bx7ecn4hpskk7'\n            }, {\n              _id: 'cki6g7v3b0004xrec9hawsy7o',\n              metaType: 'widget',\n              type: '@apostrophecms/rich-text',\n              content: '',\n              _edit: true,\n              _docId: 'ckgrzqh5a000bx7ecn4hpskk7'\n            }, {\n              _id: 'cki6g7v3b0005xrecwc9teivh',\n              metaType: 'widget',\n              type: '@apostrophecms/rich-text',\n              content: '',\n              _edit: true,\n              _docId: 'ckgrzqh5a000bx7ecn4hpskk7'\n            }, {\n              _id: 'cki6g7v3b0006xrec6ubczv1z',\n              metaType: 'widget',\n              type: '@apostrophecms/rich-text',\n              content: '',\n              _edit: true,\n              _docId: 'ckgrzqh5a000bx7ecn4hpskk7'\n            }, {\n              _id: 'cki6g7v3b0007xrecjxcgk5ub',\n              metaType: 'widget',\n              type: '@apostrophecms/rich-text',\n              content: '',\n              _edit: true,\n              _docId: 'ckgrzqh5a000bx7ecn4hpskk7'\n            }, {\n              _id: 'ckgwevhkd000v3e5x99dy9jv2',\n              metaType: 'widget',\n              type: '@apostrophecms/rich-text',\n              content: '<blockquote><p>This is cool.</p></blockquote>',\n              _edit: true,\n              _docId: 'ckgrzqh5a000bx7ecn4hpskk7'\n            }, {\n              _id: 'ckgwevqy600143e5xv4ihv38j',\n              one: {\n                _id: 'ckhxhuyse000g4j4lqcjklpxd',\n                items: [],\n                metaType: 'area',\n                _edit: true,\n                _docId: 'ckgrzqh5a000bx7ecn4hpskk7'\n              },\n              two: {\n                _id: 'ckhxhuysm000h4j4ljjzd45kx',\n                items: [],\n                metaType: 'area',\n                _edit: true,\n                _docId: 'ckgrzqh5a000bx7ecn4hpskk7'\n              },\n              metaType: 'widget',\n              type: 'two-column',\n              _edit: true,\n              _docId: 'ckgrzqh5a000bx7ecn4hpskk7'\n            }],\n            metaType: 'area',\n            _edit: true,\n            _docId: 'ckgrzqh5a000bx7ecn4hpskk7',\n            _fieldId: 'ef3e5cb82b863cff62bcad353fde019a'\n          },\n          '@ckhxhuyoz00084j4l7yw7brq7': {\n            _id: 'ckhxhuyoz00084j4l7yw7brq7',\n            items: [{\n              _id: 'ckhxmr8ds001h2a67copguxnk',\n              metaType: 'widget',\n              type: '@apostrophecms/image',\n              imageIds: ['ckhuxqw8o006h094lnkip3gen'],\n              _edit: true,\n              _docId: 'ckgrzqh5a000bx7ecn4hpskk7',\n              _image: [{\n                _id: 'ckhuxqw8o006h094lnkip3gen',\n                visibility: 'public',\n                archived: false,\n                type: '@apostrophecms/image',\n                attachment: {\n                  _id: 'ckhxvoqra00qsuj4lq0hnkrzg',\n                  crop: null,\n                  group: 'images',\n                  createdAt: '2020-11-25T20:46:28.611Z',\n                  name: 'squirrel',\n                  title: 'squirrel',\n                  extension: 'jpg',\n                  type: 'attachment',\n                  docIds: ['ckhuxqw8o006h094lnkip3gen'],\n                  archivedDocIds: [],\n                  length: {\n                    dev: 51713,\n                    mode: 33204,\n                    nlink: 1,\n                    uid: 1001,\n                    gid: 1001,\n                    rdev: 0,\n                    blksize: 4096,\n                    ino: 4196261,\n                    size: 107948,\n                    blocks: 216,\n                    atimeMs: 1606337187953.1726,\n                    mtimeMs: 1606337187955.1726,\n                    ctimeMs: 1606337187955.1726,\n                    birthtimeMs: 1606337187955.1726,\n                    atime: '2020-11-25T20:46:27.953Z',\n                    mtime: '2020-11-25T20:46:27.955Z',\n                    ctime: '2020-11-25T20:46:27.955Z',\n                    birthtime: '2020-11-25T20:46:27.955Z'\n                  },\n                  md5: '464686711e5df3a60ba5f5384196514a',\n                  width: 1072,\n                  height: 715,\n                  landscape: true,\n                  used: true,\n                  utilized: true,\n                  archived: false,\n                  _urls: {\n                    max: '/uploads/attachments/ckhxvoqra00qsuj4lq0hnkrzg-squirrel.max.jpg',\n                    full: '/uploads/attachments/ckhxvoqra00qsuj4lq0hnkrzg-squirrel.full.jpg',\n                    'two-thirds': '/uploads/attachments/ckhxvoqra00qsuj4lq0hnkrzg-squirrel.two-thirds.jpg',\n                    'one-half': '/uploads/attachments/ckhxvoqra00qsuj4lq0hnkrzg-squirrel.one-half.jpg',\n                    'one-third': '/uploads/attachments/ckhxvoqra00qsuj4lq0hnkrzg-squirrel.one-third.jpg',\n                    'one-sixth': '/uploads/attachments/ckhxvoqra00qsuj4lq0hnkrzg-squirrel.one-sixth.jpg',\n                    original: '/uploads/attachments/ckhxvoqra00qsuj4lq0hnkrzg-squirrel.jpg'\n                  }\n                },\n                title: 'f23976a0 f103 4c43 844a d879a60eb609 1140x641',\n                alt: 'I promise that\\'s a squirrel',\n                credit: '',\n                creditUrl: null,\n                slug: 'image-f23976a0-f103-4c43-844a-d879a60eb609-1140x6410',\n                metaType: 'doc',\n                createdAt: '2020-11-23T19:20:49.080Z',\n                titleSortified: 'f23976a0 f103 4c43 844a d879a60eb609 1140x641',\n                updatedAt: '2020-11-25T20:48:58.668Z',\n                highSearchText: 'f23976a0 f103 4c43 844a d879a60eb609 1140x641 image f23976a0 f103 4c43 844a d879a60eb609 1140x6410',\n                highSearchWords: ['f23976a0', 'f103', '4c43', '844a', 'd879a60eb609', '1140x641', 'image', '1140x6410'],\n                lowSearchText: 'f23976a0 f103 4c43 844a d879a60eb609 1140x641 image f23976a0 f103 4c43 844a d879a60eb609 1140x6410',\n                searchSummary: '',\n                tagsIds: [],\n                _edit: true\n              }]\n            }],\n            metaType: 'area',\n            _edit: true,\n            _docId: 'ckgrzqh5a000bx7ecn4hpskk7',\n            _fieldId: 'e49e6abd03df799df82381186ee5fdda'\n          },\n          '@ckhxhuypw00094j4l0mdg0b06': {\n            _id: 'ckhxhuypw00094j4l0mdg0b06',\n            items: [{\n              _id: 'cki4zm66r000t2a67ojd2iyuc',\n              video: {\n                url: 'https://vimeo.com/56282283',\n                title: 'Public Test Video',\n                thumbnail: 'https://i.vimeocdn.com/video/389683305_1000.jpg'\n              },\n              metaType: 'widget',\n              type: '@apostrophecms/video',\n              _edit: true,\n              _docId: 'ckgrzqh5a000bx7ecn4hpskk7'\n            }],\n            metaType: 'area',\n            _edit: true,\n            _docId: 'ckgrzqh5a000bx7ecn4hpskk7',\n            _fieldId: 'c550ad6db39c7248dd94f47a8754ab03'\n          },\n          '@ckhxhuyse000g4j4lqcjklpxd': {\n            _id: 'ckhxhuyse000g4j4lqcjklpxd',\n            items: [],\n            metaType: 'area',\n            _edit: true,\n            _docId: 'ckgrzqh5a000bx7ecn4hpskk7',\n            _fieldId: 'e49e6abd03df799df82381186ee5fdda'\n          },\n          '@ckhxhuysm000h4j4ljjzd45kx': {\n            _id: 'ckhxhuysm000h4j4ljjzd45kx',\n            items: [],\n            metaType: 'area',\n            _edit: true,\n            _docId: 'ckgrzqh5a000bx7ecn4hpskk7',\n            _fieldId: 'c550ad6db39c7248dd94f47a8754ab03'\n          }\n        }, {\n          $push: {\n            '@ckgrzsklg0007ulec0ffxg5bj.items': {\n              $each: [{\n                _id: 'cki6gxnch00093g631cw03444',\n                type: '@apostrophecms/rich-text',\n                content: ''\n              }],\n              $before: 'ckgs41w9r000e3h5xmjl9g1uv'\n            }\n          }\n        }]\n      }\n    });\n  });","file":"pages-rest.js","skipped":false,"dir":"test"},{"name":"can insert a page for advisory lock testing","suites":["Pages REST"],"updatePoint":{"line":1252,"column":49,"index":44960},"line":1252,"code":"  it('can insert a page for advisory lock testing', async () => {\n    const body = {\n      slug: '/advisory-test',\n      visibility: 'public',\n      type: 'test-page',\n      title: 'Advisory Test'\n    };\n    const page = await apos.http.post('/api/v1/@apostrophecms/page', {\n      body,\n      jar\n    });\n    assert(page);\n    assert(page.title === 'Advisory Test');\n    advisoryLockTestId = page._id;\n  });","file":"pages-rest.js","skipped":false,"dir":"test"},{"name":"can get an advisory lock on a page while patching a property","suites":["Pages REST"],"updatePoint":{"line":1267,"column":66,"index":45385},"line":1267,"code":"  it('can get an advisory lock on a page while patching a property', async () => {\n    const page = await apos.http.patch(`/api/v1/@apostrophecms/page/${advisoryLockTestId}`, {\n      jar,\n      body: {\n        _advisoryLock: {\n          tabId: 'xyz',\n          lock: true\n        },\n        title: 'Advisory Test Patched'\n      }\n    });\n    assert(page.title === 'Advisory Test Patched');\n  });","file":"pages-rest.js","skipped":false,"dir":"test"},{"name":"cannot get an advisory lock with a different context id","suites":["Pages REST"],"updatePoint":{"line":1280,"column":61,"index":45776},"line":1280,"code":"  it('cannot get an advisory lock with a different context id', async () => {\n    try {\n      await apos.http.patch(`/api/v1/@apostrophecms/page/${advisoryLockTestId}`, {\n        jar,\n        body: {\n          _advisoryLock: {\n            tabId: 'pdq',\n            lock: true\n          }\n        }\n      });\n      assert(false);\n    } catch (e) {\n      assert(e.status === 409);\n      assert(e.body.name === 'locked');\n      assert(e.body.data.me);\n    }\n  });","file":"pages-rest.js","skipped":false,"dir":"test"},{"name":"can get an advisory lock with a different context id if forcing","suites":["Pages REST"],"updatePoint":{"line":1298,"column":69,"index":46245},"line":1298,"code":"  it('can get an advisory lock with a different context id if forcing', async () => {\n    await apos.http.patch(`/api/v1/@apostrophecms/page/${advisoryLockTestId}`, {\n      jar,\n      body: {\n        _advisoryLock: {\n          tabId: 'pdq',\n          lock: true,\n          force: true\n        }\n      }\n    });\n  });","file":"pages-rest.js","skipped":false,"dir":"test"},{"name":"can renew the advisory lock with the second context id after forcing","suites":["Pages REST"],"updatePoint":{"line":1310,"column":74,"index":46567},"line":1310,"code":"  it('can renew the advisory lock with the second context id after forcing', async () => {\n    await apos.http.patch(`/api/v1/@apostrophecms/page/${advisoryLockTestId}`, {\n      jar,\n      body: {\n        _advisoryLock: {\n          tabId: 'pdq',\n          lock: true\n        }\n      }\n    });\n  });","file":"pages-rest.js","skipped":false,"dir":"test"},{"name":"can unlock the advisory lock while patching a property","suites":["Pages REST"],"updatePoint":{"line":1321,"column":60,"index":46852},"line":1321,"code":"  it('can unlock the advisory lock while patching a property', async () => {\n    const page = await apos.http.patch(`/api/v1/@apostrophecms/page/${advisoryLockTestId}`, {\n      jar,\n      body: {\n        _advisoryLock: {\n          tabId: 'pdq',\n          lock: false\n        },\n        title: 'Advisory Test Patched Again'\n      }\n    });\n    assert(page.title === 'Advisory Test Patched Again');\n  });","file":"pages-rest.js","skipped":false,"dir":"test"},{"name":"can relock with the first context id after unlocking","suites":["Pages REST"],"updatePoint":{"line":1334,"column":58,"index":47253},"line":1334,"code":"  it('can relock with the first context id after unlocking', async () => {\n    const doc = await apos.http.patch(`/api/v1/@apostrophecms/page/${advisoryLockTestId}`, {\n      jar,\n      body: {\n        _advisoryLock: {\n          tabId: 'xyz',\n          lock: true\n        }\n      }\n    });\n    assert(doc.title === 'Advisory Test Patched Again');\n  });","file":"pages-rest.js","skipped":false,"dir":"test"},{"name":"is able to make a page including diacritics","suites":["Pages REST"],"updatePoint":{"line":1347,"column":49,"index":47616},"line":1347,"code":"  it('is able to make a page including diacritics', async function () {\n    const body = {\n      slug: '/ḑiaçritiçs-čharaćters',\n      visibility: 'public',\n      type: 'test-page',\n      title: 'Ḑiaçritiçs Čharaćters',\n      _targetId: '_home',\n      _position: '1'\n    };\n    const page = await apos.http.post('/api/v1/@apostrophecms/page', {\n      body,\n      jar\n    });\n    assert(page);\n    assert(page.title === 'Ḑiaçritiçs Čharaćters');\n    diacriticsId = page._id; // Accesses the published page.\n\n    const published = await apos.http.get('/ḑiaçritiçs-čharaćters');\n    assert(published);\n  });","file":"pages-rest.js","skipped":false,"dir":"test"},{"name":"can archive the diacritics page then access the draft preview","suites":["Pages REST"],"updatePoint":{"line":1367,"column":67,"index":48239},"line":1367,"code":"  it('can archive the diacritics page then access the draft preview', async function () {\n    // Now only a draft preview will be available.\n    await apos.page.archive(apos.task.getReq(), diacriticsId);\n\n    try {\n      const rendered = await apos.http.get('/ḑiaçritiçs-čharaćters', {\n        jar\n      });\n      assert(rendered.match(/Sing to me, Oh Muse\\./));\n    } catch (error) {\n      console.error(error);\n      assert(false);\n    }\n  });","file":"pages-rest.js","skipped":false,"dir":"test"},{"name":"should be able to log in as second user","suites":["Pages REST"],"updatePoint":{"line":1382,"column":45,"index":48675},"line":1382,"code":"  it('should be able to log in as second user', async () => {\n    jar2 = apos.http.jar(); // establish session\n\n    let page = await apos.http.get('/', {\n      jar: jar2\n    });\n    assert(page.match(/logged out/)); // Log in\n\n    await apos.http.post('/api/v1/@apostrophecms/login/login', {\n      body: {\n        username: 'admin2',\n        password: 'admin2',\n        session: true\n      },\n      jar: jar2\n    }); // Confirm login\n\n    page = await apos.http.get('/', {\n      jar: jar2\n    });\n    assert(page.match(/logged in/));\n  });","file":"pages-rest.js","skipped":false,"dir":"test"},{"name":"second user with a distinct tabId gets an appropriate error specifying who has the lock","suites":["Pages REST"],"updatePoint":{"line":1404,"column":93,"index":49263},"line":1404,"code":"  it('second user with a distinct tabId gets an appropriate error specifying who has the lock', async () => {\n    try {\n      await apos.http.patch(`/api/v1/@apostrophecms/page/${advisoryLockTestId}`, {\n        jar: jar2,\n        body: {\n          _advisoryLock: {\n            tabId: 'nbc',\n            lock: true\n          }\n        }\n      });\n      assert(false);\n    } catch (e) {\n      assert(e.status === 409);\n      assert(e.body.name === 'locked');\n      assert(!e.body.data.me);\n      assert(e.body.data.username === 'admin');\n    }\n  });","file":"pages-rest.js","skipped":false,"dir":"test"},{"name":"should be a property of the apos object","suites":["Pages"],"updatePoint":{"line":15,"column":45,"index":305},"line":15,"code":"  it('should be a property of the apos object', async function () {\n    apos = await t.create({\n      root: module,\n      modules: {\n        '@apostrophecms/page': {\n          options: {\n            park: [],\n            types: [{\n              name: '@apostrophecms/home-page',\n              label: 'Home'\n            }, {\n              name: 'test-page',\n              label: 'Test Page'\n            }]\n          }\n        },\n        'test-page': {\n          extend: '@apostrophecms/page-type'\n        }\n      }\n    });\n    assert(apos.page.__meta.name === '@apostrophecms/page');\n  }); // SETUP","file":"pages.js","skipped":false,"dir":"test"},{"name":"should make sure all of the expected indexes are configured","suites":["Pages"],"updatePoint":{"line":39,"column":65,"index":924},"line":39,"code":"  it('should make sure all of the expected indexes are configured', async function () {\n    const expectedIndexes = ['path'];\n    const actualIndexes = [];\n    const info = await apos.doc.db.indexInformation(); // Extract the actual index info we care about\n\n    _.each(info, function (index) {\n      actualIndexes.push(index[0][0]);\n    }); // Now make sure everything in expectedIndexes is in actualIndexes\n\n\n    _.each(expectedIndexes, function (index) {\n      assert(_.includes(actualIndexes, index));\n    });\n  });","file":"pages.js","skipped":false,"dir":"test"},{"name":"parked homepage exists","suites":["Pages"],"updatePoint":{"line":53,"column":28,"index":1407},"line":53,"code":"  it('parked homepage exists', async function () {\n    const home = await apos.page.find(apos.task.getAnonReq(), {\n      level: 0\n    }).toObject();\n    assert(home);\n    homeId = home._id;\n    assert(home.slug === '/');\n    assert(`${home.path}:en:published` === home._id);\n    assert(home.type === '@apostrophecms/home-page');\n    assert(home.parked);\n    assert(home.visibility === 'public');\n  });","file":"pages.js","skipped":false,"dir":"test"},{"name":"parked archive page exists","suites":["Pages"],"updatePoint":{"line":65,"column":32,"index":1813},"line":65,"code":"  it('parked archive page exists', async function () {\n    const archive = await apos.page.find(apos.task.getReq(), {\n      slug: '/archive'\n    }).archived(null).toObject();\n    assert(archive);\n    assert(archive.slug === '/archive');\n    assert(archive.path === `${homeId.replace(':en:published', '')}/${archive._id.replace(':en:published', '')}`);\n    assert(archive.type === '@apostrophecms/archive-page');\n    assert(archive.parked); // Verify that clonePermanent did its\n    // job and removed properties not meant\n    // to be stored in mongodb\n\n    assert(!archive._children);\n  });","file":"pages.js","skipped":false,"dir":"test"},{"name":"should be able to use db to insert documents","suites":["Pages"],"updatePoint":{"line":79,"column":50,"index":2423},"line":79,"code":"  it('should be able to use db to insert documents', async function () {\n    const testItems = [{\n      _id: 'parent:en:published',\n      aposLocale: 'en:published',\n      aposDocId: 'parent',\n      type: 'test-page',\n      slug: '/parent',\n      visibility: 'public',\n      path: `${homeId.replace(':en:published', '')}/parent`,\n      level: 1,\n      rank: 0\n    }, {\n      _id: 'child:en:published',\n      aposLocale: 'en:published',\n      aposDocId: 'child',\n      type: 'test-page',\n      slug: '/parent/child',\n      visibility: 'public',\n      path: `${homeId.replace(':en:published', '')}/parent/child`,\n      level: 2,\n      rank: 0\n    }, {\n      _id: 'grandchild:en:published',\n      aposLocale: 'en:published',\n      aposDocId: 'grandchild',\n      type: 'test-page',\n      slug: '/parent/child/grandchild',\n      visibility: 'public',\n      path: `${homeId.replace(':en:published', '')}/parent/child/grandchild`,\n      level: 3,\n      rank: 0\n    }, {\n      _id: 'sibling:en:published',\n      aposLocale: 'en:published',\n      aposDocId: 'sibling',\n      type: 'test-page',\n      slug: '/parent/sibling',\n      visibility: 'public',\n      path: `${homeId.replace(':en:published', '')}/parent/sibling`,\n      level: 2,\n      rank: 1\n    }, {\n      _id: 'cousin:en:published',\n      aposLocale: 'en:published',\n      aposDocId: 'cousin',\n      type: 'test-page',\n      slug: '/parent/sibling/cousin',\n      visibility: 'public',\n      path: `${homeId.replace(':en:published', '')}/parent/sibling/cousin`,\n      level: 3,\n      rank: 0\n    }, {\n      _id: 'another-parent:en:published',\n      aposLocale: 'en:published',\n      aposDocId: 'another-parent',\n      type: 'test-page',\n      slug: '/another-parent',\n      visibility: 'public',\n      path: `${homeId.replace(':en:published', '')}/another-parent`,\n      level: 1,\n      rank: 1\n    }]; // Insert draft versions too to match the A3 data model\n\n    const draftItems = await apos.doc.db.insertMany(testItems.map(item => ({ ...item,\n      aposLocale: item.aposLocale.replace(':published', ':draft'),\n      _id: item._id.replace(':published', ':draft')\n    })));\n    assert(draftItems.result.ok === 1);\n    assert(draftItems.insertedCount === 6);\n    const items = await apos.doc.db.insertMany(testItems);\n    assert(items.result.ok === 1);\n    assert(items.insertedCount === 6);\n  }); // FINDING","file":"pages.js","skipped":false,"dir":"test"},{"name":"should have a find method on pages that returns a cursor","suites":["Pages"],"updatePoint":{"line":153,"column":62,"index":4797},"line":153,"code":"  it('should have a find method on pages that returns a cursor', async function () {\n    const cursor = apos.page.find(apos.task.getAnonReq());\n    assert(cursor);\n  });","file":"pages.js","skipped":false,"dir":"test"},{"name":"should be able to find the parked homepage","suites":["Pages"],"updatePoint":{"line":157,"column":48,"index":4953},"line":157,"code":"  it('should be able to find the parked homepage', async function () {\n    const cursor = apos.page.find(apos.task.getAnonReq(), {\n      slug: '/'\n    });\n    const page = await cursor.toObject(); // There should be only 1 result.\n\n    assert(page);\n    assert(`${page.path}:en:published` === page._id);\n    assert(page.rank === 0);\n  });","file":"pages.js","skipped":false,"dir":"test"},{"name":"should be able to find just a single page","suites":["Pages"],"updatePoint":{"line":167,"column":47,"index":5291},"line":167,"code":"  it('should be able to find just a single page', async function () {\n    const cursor = apos.page.find(apos.task.getAnonReq(), {\n      slug: '/parent/child'\n    });\n    const page = await cursor.toObject(); // There should be only 1 result.\n\n    assert(page); // It should have a path of /parent/child\n\n    assert(page.path === `${homeId.replace(':en:published', '')}/parent/child`);\n  });","file":"pages.js","skipped":false,"dir":"test"},{"name":"should be able to include the ancestors of a page","suites":["Pages"],"updatePoint":{"line":177,"column":55,"index":5690},"line":177,"code":"  it('should be able to include the ancestors of a page', async function () {\n    const cursor = apos.page.find(apos.task.getAnonReq(), {\n      slug: '/parent/child'\n    });\n    const page = await cursor.ancestors(true).toObject(); // There should be only 1 result.\n\n    assert(page); // There should be 2 ancestors.\n\n    assert(page._ancestors.length === 2); // The first ancestor should be the homepage\n\n    assert.strictEqual(`${page._ancestors[0].path}:en:published`, homeId); // The second ancestor should be 'parent'\n\n    assert.strictEqual(page._ancestors[1].path, `${homeId.replace(':en:published', '')}/parent`);\n  });","file":"pages.js","skipped":false,"dir":"test"},{"name":"should be able to include just one ancestor of a page, i.e. the parent","suites":["Pages"],"updatePoint":{"line":191,"column":76,"index":6339},"line":191,"code":"  it('should be able to include just one ancestor of a page, i.e. the parent', async function () {\n    const cursor = apos.page.find(apos.task.getAnonReq(), {\n      slug: '/parent/child'\n    });\n    const page = await cursor.ancestors({\n      depth: 1\n    }).toObject(); // There should be only 1 result.\n\n    assert(page); // There should be 1 ancestor returned.\n\n    assert(page._ancestors.length === 1); // The first ancestor returned should be 'parent'\n\n    assert.strictEqual(page._ancestors[0].path, `${homeId.replace(':en:published', '')}/parent`);\n  });","file":"pages.js","skipped":false,"dir":"test"},{"name":"should be able to include the children of the ancestors of a page","suites":["Pages"],"updatePoint":{"line":205,"column":71,"index":6896},"line":205,"code":"  it('should be able to include the children of the ancestors of a page', async function () {\n    const cursor = apos.page.find(apos.task.getAnonReq(), {\n      slug: '/parent/child'\n    });\n    const page = await cursor.ancestors({\n      children: 1\n    }).toObject(); // There should be only 1 result.\n\n    assert(page); // There should be 2 ancestors.\n\n    assert(page._ancestors.length === 2); // The second ancestor should have children\n\n    assert(page._ancestors[1]._children); // The first ancestor's child should have a path '/parent/child'\n\n    assert.strictEqual(page._ancestors[1]._children[0].path, `${homeId.replace(':en:published', '')}/parent/child`); // The second ancestor's child should have a path '/parent/sibling'\n\n    assert.strictEqual(page._ancestors[1]._children[1].path, `${homeId.replace(':en:published', '')}/parent/sibling`);\n  }); // INSERTING","file":"pages.js","skipped":false,"dir":"test"},{"name":"is able to insert a new page","suites":["Pages"],"updatePoint":{"line":224,"column":34,"index":7734},"line":224,"code":"  it('is able to insert a new page', async function () {\n    const parentId = 'parent:en:published';\n    const newPage = {\n      slug: '/parent/new-page',\n      visibility: 'public',\n      type: 'test-page',\n      title: 'New Page'\n    };\n    const page = await apos.page.insert(apos.task.getReq(), parentId, 'lastChild', newPage); // Is the path generally correct?\n\n    assert.strictEqual(page.path, `${homeId.replace(':en:published', '')}/parent/${page._id.replace(':en:published', '')}`);\n  });","file":"pages.js","skipped":false,"dir":"test"},{"name":"is able to insert a new page in the correct order","suites":["Pages"],"updatePoint":{"line":237,"column":55,"index":8268},"line":237,"code":"  it('is able to insert a new page in the correct order', async function () {\n    const cursor = apos.page.find(apos.task.getAnonReq(), {\n      slug: '/parent/new-page'\n    });\n    newPage = await cursor.toObject();\n    assert(newPage);\n    assert.strictEqual(newPage.rank, 2);\n    assert.strictEqual(newPage.level, 2);\n  });","file":"pages.js","skipped":false,"dir":"test"},{"name":"is able to insert a subpage","suites":["Pages"],"updatePoint":{"line":246,"column":33,"index":8572},"line":246,"code":"  it('is able to insert a subpage', async function () {\n    const subPageInfo = {\n      slug: '/parent/new-page/sub-page',\n      visibility: 'public',\n      type: 'test-page',\n      title: 'Sub Page'\n    };\n    const subPage = await apos.page.insert(apos.task.getReq(), newPage._id, 'lastChild', subPageInfo);\n    const homePage = await apos.doc.db.findOne({\n      slug: '/',\n      aposMode: 'published'\n    });\n    const components = subPage.path.split('/');\n    assert.strictEqual(components.length, 4);\n    assert(components[0] === homePage.aposDocId);\n    assert(components[1] === 'parent');\n    assert(components[2] === newPage.aposDocId);\n    assert(components[3] === subPage.aposDocId);\n    assert.strictEqual(subPage.slug, '/parent/new-page/sub-page');\n    assert(subPage.rank === 0);\n    assert(subPage.level === 3);\n  }); // MOVING","file":"pages.js","skipped":false,"dir":"test"},{"name":"is able to move root/parent/sibling/cousin after root/parent","suites":["Pages"],"updatePoint":{"line":269,"column":66,"index":9448},"line":269,"code":"  it('is able to move root/parent/sibling/cousin after root/parent', async function () {\n    await apos.page.move(apos.task.getReq(), 'cousin:en:published', 'parent:en:published', 'after');\n    const cursor = apos.page.find(apos.task.getAnonReq(), {\n      _id: 'cousin:en:published'\n    });\n    const page = await cursor.toObject(); // Is the new path correct?\n\n    assert.strictEqual(page.path, `${homeId.replace(':en:published', '')}/cousin`); // Is the rank correct?\n\n    assert.strictEqual(page.rank, 1);\n  });","file":"pages.js","skipped":false,"dir":"test"},{"name":"is able to move root/cousin before root/parent/child","suites":["Pages"],"updatePoint":{"line":280,"column":58,"index":9955},"line":280,"code":"  it('is able to move root/cousin before root/parent/child', async function () {\n    // 'Cousin' _id === 4312\n    // 'Child' _id === 2341\n    await apos.page.move(apos.task.getReq(), 'cousin:en:published', 'child:en:published', 'before');\n    const cursor = apos.page.find(apos.task.getAnonReq(), {\n      _id: 'cousin:en:published'\n    });\n    const page = await cursor.toObject(); // Is the new path correct?\n\n    assert.strictEqual(page.path, `${homeId.replace(':en:published', '')}/parent/cousin`); // Is the rank correct?\n\n    assert.strictEqual(page.rank, 0);\n  });","file":"pages.js","skipped":false,"dir":"test"},{"name":"is able to move root/parent/cousin inside root/parent/sibling","suites":["Pages"],"updatePoint":{"line":293,"column":67,"index":10535},"line":293,"code":"  it('is able to move root/parent/cousin inside root/parent/sibling', async function () {\n    await apos.page.move(apos.task.getReq(), 'cousin:en:published', 'sibling:en:published', 'firstChild');\n    const cursor = apos.page.find(apos.task.getAnonReq(), {\n      _id: 'cousin:en:published'\n    });\n    const page = await cursor.toObject(); // Is the new path correct?\n\n    assert.strictEqual(page.path, `${homeId.replace(':en:published', '')}/parent/sibling/cousin`); // Is the rank correct?\n\n    assert.strictEqual(page.rank, 0);\n  });","file":"pages.js","skipped":false,"dir":"test"},{"name":"moving /parent into /another-parent should also move /parent/sibling","suites":["Pages"],"updatePoint":{"line":304,"column":74,"index":11079},"line":304,"code":"  it('moving /parent into /another-parent should also move /parent/sibling', async function () {\n    await apos.page.move(apos.task.getReq(), 'parent:en:published', 'another-parent:en:published', 'firstChild');\n    const cursor = apos.page.find(apos.task.getAnonReq(), {\n      _id: 'sibling:en:published'\n    });\n    const page = await cursor.toObject(); // Is the grandchild's path correct?\n\n    assert.strictEqual(page.path, `${homeId.replace(':en:published', '')}/another-parent/parent/sibling`);\n  });","file":"pages.js","skipped":false,"dir":"test"},{"name":"should be able to serve a page","suites":["Pages"],"updatePoint":{"line":313,"column":36,"index":11547},"line":313,"code":"  it('should be able to serve a page', async function () {\n    const response = await apos.http.get('/another-parent/parent/child', {\n      fullResponse: true\n    }); // Is our status code good?\n\n    assert.strictEqual(response.status, 200); // Did we get our page back?\n\n    assert(response.body.match(/Sing to me, Oh Muse./)); // Does the response prove that data.home was available?\n\n    assert(response.body.match(/Home: \\//)); // Does the response prove that data.home._children was available?\n\n    assert(response.body.match(/Tab: \\/another-parent/));\n  });","file":"pages.js","skipped":false,"dir":"test"},{"name":"should not be able to serve a nonexistent page","suites":["Pages"],"updatePoint":{"line":326,"column":52,"index":12127},"line":326,"code":"  it('should not be able to serve a nonexistent page', async function () {\n    try {\n      await apos.http.get('/nobodyschild');\n      assert(false);\n    } catch (e) {\n      // Is our status code good?\n      assert.strictEqual(e.status, 404); // Does the response prove that data.home was available?\n\n      assert(e.body.match(/Home: \\//)); // Does the response prove that data.home._children was available?\n\n      assert(e.body.match(/Tab: \\/another-parent/));\n    }\n  });","file":"pages.js","skipped":false,"dir":"test"},{"name":"should detect that the home page is an ancestor of any page except itself","suites":["Pages"],"updatePoint":{"line":339,"column":79,"index":12628},"line":339,"code":"  it('should detect that the home page is an ancestor of any page except itself', function () {\n    assert( // actual paths are made up of _ids in 3.x\n    apos.page.isAncestorOf({\n      path: 'home'\n    }, {\n      path: 'home/about'\n    }));\n    assert(apos.page.isAncestorOf({\n      path: 'home'\n    }, {\n      path: 'home/about/grandkid'\n    }));\n    assert(!apos.page.isAncestorOf({\n      path: 'home'\n    }, {\n      path: 'home'\n    }));\n  });","file":"pages.js","skipped":false,"dir":"test"},{"name":"should detect a tab as the ancestor of its great grandchild but not someone else's","suites":["Pages"],"updatePoint":{"line":357,"column":89,"index":13086},"line":357,"code":"  it('should detect a tab as the ancestor of its great grandchild but not someone else\\'s', function () {\n    assert(apos.page.isAncestorOf({\n      path: 'home/about'\n    }, {\n      path: 'home/about/test/thing'\n    }));\n    assert(!apos.page.isAncestorOf({\n      path: 'home/about'\n    }, {\n      path: 'home/wiggy/test/thing'\n    }));\n  });","file":"pages.js","skipped":false,"dir":"test"},{"name":"is able to move parent to the archive","suites":["Pages"],"updatePoint":{"line":369,"column":43,"index":13383},"line":369,"code":"  it('is able to move parent to the archive', async function () {\n    await apos.page.archive(apos.task.getReq(), 'parent:en:published');\n    const cursor = apos.page.find(apos.task.getAnonReq(), {\n      _id: 'parent'\n    });\n    const page = await cursor.toObject();\n    assert(!page);\n    const req = apos.task.getReq();\n    const archive = await apos.page.findOneForEditing(req, {\n      parkedId: 'archive'\n    });\n    const archived = await apos.page.findOneForEditing(req, {\n      _id: 'parent:en:published'\n    });\n    assert.strictEqual(archived.path, `${homeId.replace(':en:published', '')}/${archive._id.replace(':en:published', '')}/${archived._id.replace(':en:published', '')}`);\n    assert(archived.archived);\n    assert.strictEqual(archived.level, 2);\n  });","file":"pages.js","skipped":false,"dir":"test"},{"name":"should be able to find the parked homepage","suites":["Pages"],"updatePoint":{"line":387,"column":48,"index":14159},"line":387,"code":"  it('should be able to find the parked homepage', async function () {\n    const cursor = apos.page.find(apos.task.getAnonReq(), {\n      slug: '/'\n    });\n    const page = await cursor.toObject(); // There should be only 1 result.\n\n    assert(page);\n    assert(`${page.path}:en:published` === page._id);\n    assert(page.rank === 0);\n  });","file":"pages.js","skipped":false,"dir":"test"},{"name":"After everything else, ranks must still be unduplicated among peers and level must be consistent with path","suites":["Pages"],"updatePoint":{"line":397,"column":112,"index":14562},"line":397,"code":"  it('After everything else, ranks must still be unduplicated among peers and level must be consistent with path', async function () {\n    const pages = await apos.doc.db.find({\n      slug: /^\\//,\n      aposLocale: 'en:published'\n    }).sort({\n      path: 1\n    }).toArray();\n\n    for (let i = 0; i < pages.length; i++) {\n      const iLevel = pages[i].path.replace(/[^/]+/g, '').length;\n      assert(iLevel === pages[i].level);\n      const ranks = [];\n\n      for (let j = i + 1; j < pages.length; j++) {\n        const jLevel = pages[j].path.replace(/[^/]+/g, '').length;\n        assert(jLevel === pages[j].level);\n\n        if (pages[j].path.substring(0, pages[i].path.length) !== pages[i].path) {\n          break;\n        }\n\n        if (pages[j].level !== pages[i].level + 1) {\n          // Ignore grandchildren etc.\n          continue;\n        }\n\n        assert(!ranks.includes(pages[j].rank));\n        ranks.push(pages[j].rank);\n      }\n    }\n  });","file":"pages.js","skipped":false,"dir":"test"},{"name":"standard parked pages should be as expected","suites":["Parked Pages"],"updatePoint":{"line":12,"column":49,"index":300},"line":12,"code":"  it('standard parked pages should be as expected', async function () {\n    apos = await t.create({\n      root: module,\n      modules: {}\n    });\n    const req = apos.task.getReq();\n    const home = await apos.page.find(req, {\n      slug: '/'\n    }).toObject();\n    assert(home);\n    assert(home.parkedId === 'home');\n    assert(home.type === '@apostrophecms/home-page');\n    const archive = await apos.page.find(req, {\n      slug: '/archive'\n    }).archived(true).toObject();\n    assert(archive);\n    assert(archive.parkedId === 'archive');\n    assert(archive.type === '@apostrophecms/archive-page');\n  });","file":"parked-pages.js","skipped":false,"dir":"test"},{"name":"overridden home page should work without disturbing archive","suites":["Parked Pages"],"updatePoint":{"line":31,"column":65,"index":924},"line":31,"code":"  it('overridden home page should work without disturbing archive', async function () {\n    apos2 = await t.create({\n      root: module,\n      modules: {\n        '@apostrophecms/page': {\n          options: {\n            park: [{\n              slug: '/',\n              parkedId: 'home',\n              _defaults: {\n                title: 'Home',\n                type: 'default-page'\n              }\n            }]\n          }\n        },\n        'default-page': {}\n      }\n    });\n    const req = apos2.task.getAnonReq();\n    const home = await apos2.page.find(req, {\n      slug: '/'\n    }).toObject();\n    assert(home);\n    assert(home.parkedId === 'home');\n    assert(home.type === 'default-page');\n    const archive = await apos2.page.find(req, {\n      slug: '/archive'\n    }).archived(true).toObject();\n    assert(archive);\n    assert(archive.parkedId === 'archive');\n    assert(archive.type === '@apostrophecms/archive-page');\n  });","file":"parked-pages.js","skipped":false,"dir":"test"},{"name":"should have a permissions property","suites":["Permissions"],"updatePoint":{"line":11,"column":40,"index":252},"line":11,"code":"  it('should have a permissions property', async function () {\n    apos = await t.create({\n      root: module\n    });\n    assert(apos.permission.__meta.name = '@apostrophecms/permission');\n  });","file":"permissions.js","skipped":false,"dir":"test"},{"name":"allows the public to view by type","suites":["Permissions","test permissions.can"],"updatePoint":{"line":18,"column":41,"index":497},"line":18,"code":"    it('allows the public to view by type', function () {\n      assert(apos.permission.can(apos.task.getAnonReq(), 'view', '@apostrophecms/home-page'));\n    });","file":"permissions.js","skipped":false,"dir":"test"},{"name":"allows the admin to view by type","suites":["Permissions","test permissions.can"],"updatePoint":{"line":21,"column":40,"index":657},"line":21,"code":"    it('allows the admin to view by type', function () {\n      assert(apos.permission.can(apos.task.getAdminReq(), 'view', '@apostrophecms/home-page'));\n    });","file":"permissions.js","skipped":false,"dir":"test"},{"name":"Forbids the public to update by type","suites":["Permissions","test permissions.can"],"updatePoint":{"line":24,"column":44,"index":822},"line":24,"code":"    it('Forbids the public to update by type', function () {\n      assert(!apos.permission.can(apos.task.getAnonReq(), 'edit', '@apostrophecms/home-page'));\n    });","file":"permissions.js","skipped":false,"dir":"test"},{"name":"Forbids the contributor to update by type in published mode","suites":["Permissions","test permissions.can"],"updatePoint":{"line":27,"column":67,"index":1010},"line":27,"code":"    it('Forbids the contributor to update by type in published mode', function () {\n      assert(!apos.permission.can(apos.task.getContributorReq(), 'edit', '@apostrophecms/home-page'));\n    });","file":"permissions.js","skipped":false,"dir":"test"},{"name":"Allows the editor to update by type in published mode","suites":["Permissions","test permissions.can"],"updatePoint":{"line":30,"column":61,"index":1199},"line":30,"code":"    it('Allows the editor to update by type in published mode', function () {\n      assert(apos.permission.can(apos.task.getEditorReq(), 'edit', '@apostrophecms/home-page'));\n    });","file":"permissions.js","skipped":false,"dir":"test"},{"name":"Allows the admin to update by type","suites":["Permissions","test permissions.can"],"updatePoint":{"line":33,"column":42,"index":1363},"line":33,"code":"    it('Allows the admin to update by type', function () {\n      assert(apos.permission.can(apos.task.getAdminReq(), 'edit', '@apostrophecms/home-page'));\n    });","file":"permissions.js","skipped":false,"dir":"test"},{"name":"allows the public to view a particular doc via criteria and via can()","suites":["Permissions","test permissions.can"],"updatePoint":{"line":36,"column":77,"index":1561},"line":36,"code":"    it('allows the public to view a particular doc via criteria and via can()', async () => {\n      const req = apos.task.getAnonReq();\n      const home = await apos.page.find(req, {\n        slug: '/'\n      }).toObject();\n      assert(home);\n      assert(apos.permission.can(apos.task.getAnonReq(), 'view', home));\n    });","file":"permissions.js","skipped":false,"dir":"test"},{"name":"public cannot update via actual update api","suites":["Permissions","test permissions.can"],"updatePoint":{"line":44,"column":50,"index":1857},"line":44,"code":"    it('public cannot update via actual update api', async () => {\n      const req = apos.task.getAnonReq();\n      const home = await apos.page.find(req, {\n        slug: '/'\n      }).toObject();\n      assert(home);\n\n      try {\n        home.visibility = 'loginRequired';\n        await apos.page.update(req, home);\n        assert(false);\n      } catch (e) {\n        assert(e.message === 'forbidden');\n      }\n    });","file":"permissions.js","skipped":false,"dir":"test"},{"name":"contributor cannot update published doc via actual update api","suites":["Permissions","test permissions.can"],"updatePoint":{"line":59,"column":69,"index":2292},"line":59,"code":"    it('contributor cannot update published doc via actual update api', async () => {\n      const req = apos.task.getContributorReq();\n      const home = await apos.page.find(req, {\n        slug: '/'\n      }).toObject();\n      assert(home);\n\n      try {\n        home.title = 'Contributor Updated';\n        await apos.page.update(req, home);\n        assert(false);\n      } catch (e) {\n        assert(e.message === 'forbidden');\n      }\n    });","file":"permissions.js","skipped":false,"dir":"test"},{"name":"contributor can update draft doc via actual update api","suites":["Permissions","test permissions.can"],"updatePoint":{"line":74,"column":62,"index":2728},"line":74,"code":"    it('contributor can update draft doc via actual update api', async () => {\n      const req = apos.task.getContributorReq({\n        mode: 'draft'\n      });\n      const home = await apos.page.find(req, {\n        slug: '/'\n      }).toObject();\n      assert(home);\n      home.title = 'Contributor Updated';\n      const updated = await apos.page.update(req, home);\n      assert(updated.title === 'Contributor Updated');\n    });","file":"permissions.js","skipped":false,"dir":"test"},{"name":"contributor cannot publish doc","suites":["Permissions","test permissions.can"],"updatePoint":{"line":86,"column":38,"index":3131},"line":86,"code":"    it('contributor cannot publish doc', async () => {\n      const req = apos.task.getContributorReq({\n        mode: 'draft'\n      });\n      const home = await apos.page.find(req, {\n        slug: '/'\n      }).toObject();\n      assert(home);\n\n      try {\n        await apos.page.publish(req, home);\n        assert(false);\n      } catch (e) {\n        assert(e.message === 'forbidden');\n      }\n    });","file":"permissions.js","skipped":false,"dir":"test"},{"name":"editor can publish doc","suites":["Permissions","test permissions.can"],"updatePoint":{"line":102,"column":30,"index":3523},"line":102,"code":"    it('editor can publish doc', async () => {\n      const req = apos.task.getEditorReq({\n        mode: 'draft'\n      });\n      const home = await apos.page.find(req, {\n        slug: '/'\n      }).toObject();\n      assert(home);\n      await apos.page.publish(req, home);\n      const pReq = apos.task.getEditorReq();\n      const pHome = await apos.page.find(pReq, {\n        slug: '/'\n      }).toObject();\n      assert(pHome.title === 'Contributor Updated');\n    });","file":"permissions.js","skipped":false,"dir":"test"},{"name":"editor can update published doc via actual update api","suites":["Permissions","test permissions.can"],"updatePoint":{"line":117,"column":61,"index":4018},"line":117,"code":"    it('editor can update published doc via actual update api', async () => {\n      const req = apos.task.getEditorReq();\n      const home = await apos.page.find(req, {\n        slug: '/'\n      }).toObject();\n      assert(home);\n      home.title = 'Editor Updated';\n      const updated = await apos.page.update(req, home);\n      assert(updated.title === 'Editor Updated');\n    });","file":"permissions.js","skipped":false,"dir":"test"},{"name":"admin can update via actual update api","suites":["Permissions","test permissions.can"],"updatePoint":{"line":127,"column":46,"index":4383},"line":127,"code":"    it('admin can update via actual update api', async () => {\n      const req = apos.task.getAdminReq();\n      const home = await apos.page.find(req, {\n        slug: '/'\n      }).toObject();\n      assert(home);\n      home.visibility = 'loginRequired';\n      await apos.page.update(req, home);\n    });","file":"permissions.js","skipped":false,"dir":"test"},{"name":"public cannot access when visibility is loginRequired","suites":["Permissions","test permissions.can"],"updatePoint":{"line":136,"column":61,"index":4700},"line":136,"code":"    it('public cannot access when visibility is loginRequired', async () => {\n      const anonReq = apos.task.getAnonReq();\n      const home = await apos.page.find(anonReq, {\n        slug: '/'\n      }).toObject();\n      assert(!home);\n    });","file":"permissions.js","skipped":false,"dir":"test"},{"name":"guest can access when visibility is loginRequired","suites":["Permissions","test permissions.can"],"updatePoint":{"line":143,"column":57,"index":4939},"line":143,"code":"    it('guest can access when visibility is loginRequired', async () => {\n      const guestReq = apos.task.getGuestReq();\n      const home = await apos.page.find(guestReq, {\n        slug: '/'\n      }).toObject();\n      assert(home);\n    });","file":"permissions.js","skipped":false,"dir":"test"},{"name":"should initialize","suites":["Pieces Pages"],"updatePoint":{"line":12,"column":23,"index":254},"line":12,"code":"  it('should initialize', async function () {\n    apos = await t.create({\n      root: module,\n      modules: {\n        event: {\n          extend: '@apostrophecms/piece-type',\n          options: {\n            name: 'event',\n            label: 'Event',\n            alias: 'event',\n            sort: {\n              title: 1\n            }\n          }\n        },\n        'event-page': {\n          extend: '@apostrophecms/piece-page-type',\n          options: {\n            name: 'eventPage',\n            label: 'Event',\n            alias: 'eventPage',\n            perPage: 10\n          }\n        },\n        home: {\n          extend: '@apostrophecms/piece-type',\n          options: {\n            name: 'home',\n            label: 'Home',\n            alias: 'home',\n            sort: {\n              title: 1\n            }\n          }\n        },\n        'home-page': {\n          extend: '@apostrophecms/piece-page-type',\n          options: {\n            name: 'homePiecePage',\n            label: 'Home Piece Page',\n            alias: 'homePiecePage',\n            perPage: 10\n          }\n        },\n        '@apostrophecms/page': {\n          options: {\n            park: [{\n              title: 'Events',\n              type: 'eventPage',\n              slug: '/events',\n              parkedId: 'events'\n            }, {\n              title: 'Home piece page',\n              type: 'homePiecePage',\n              slug: '/',\n              parkedId: 'home'\n            }]\n          }\n        }\n      }\n    });\n  });","file":"pieces-page-type.js","skipped":false,"dir":"test"},{"name":"should be able to use db to insert test pieces","suites":["Pieces Pages"],"updatePoint":{"line":74,"column":52,"index":1785},"line":74,"code":"  it('should be able to use db to insert test pieces', async function () {\n    assert(apos.modules.event);\n    const testItems = [];\n    const total = 100;\n\n    for (let i = 1; i <= total; i++) {\n      const paddedInt = apos.launder.padInteger(i, 3);\n      testItems.push({\n        _id: 'event' + paddedInt,\n        slug: 'event-' + paddedInt,\n        visibility: 'public',\n        type: 'event',\n        title: 'Event ' + paddedInt,\n        titleSortified: 'event ' + paddedInt,\n        body: {\n          metaType: 'area',\n          _id: apos.util.generateId(),\n          items: [{\n            metaType: 'widget',\n            type: '@apostrophecms/rich-text',\n            content: '<p>This is some content.</p>'\n          }]\n        }\n      });\n    }\n\n    return apos.doc.db.insertMany(testItems);\n  });","file":"pieces-page-type.js","skipped":false,"dir":"test"},{"name":"should be able to use db to insert test \"home\" pieces","suites":["Pieces Pages"],"updatePoint":{"line":102,"column":59,"index":2597},"line":102,"code":"  it('should be able to use db to insert test \"home\" pieces', async function () {\n    assert(apos.modules.home);\n    const testItems = [];\n    const total = 100;\n\n    for (let i = 1; i <= total; i++) {\n      const paddedInt = apos.launder.padInteger(i, 3);\n      testItems.push({\n        _id: 'home' + paddedInt,\n        slug: 'home-' + paddedInt,\n        visibility: 'public',\n        type: 'home',\n        title: 'Home ' + paddedInt,\n        titleSortified: 'home ' + paddedInt,\n        body: {\n          metaType: 'area',\n          _id: apos.util.generateId(),\n          items: [{\n            metaType: 'widget',\n            type: '@apostrophecms/rich-text',\n            content: '<p>This is some content.</p>'\n          }]\n        }\n      });\n    }\n\n    return apos.doc.db.insertMany(testItems);\n  });","file":"pieces-page-type.js","skipped":false,"dir":"test"},{"name":"should populate the ._url property of pieces in any docs query","suites":["Pieces Pages"],"updatePoint":{"line":130,"column":68,"index":3412},"line":130,"code":"  it('should populate the ._url property of pieces in any docs query', async function () {\n    const piece = await apos.doc.find(apos.task.getAnonReq(), {\n      type: 'event',\n      title: 'Event 001'\n    }).toObject();\n    assert(piece);\n    assert(piece._url);\n    assert(piece._url === '/events/event-001');\n  });","file":"pieces-page-type.js","skipped":false,"dir":"test"},{"name":"should not correctly populate the ._url property of pieces in a docs query with an inadequate projection","suites":["Pieces Pages"],"updatePoint":{"line":139,"column":110,"index":3771},"line":139,"code":"  it('should not correctly populate the ._url property of pieces in a docs query with an inadequate projection', async function () {\n    const piece = await apos.doc.find(apos.task.getAnonReq(), {\n      type: 'event',\n      title: 'Event 001'\n    }, {\n      project: {\n        type: 1\n      }\n    }).toObject();\n    assert(piece);\n    assert(!piece._url || piece._url.match(/undefined/));\n  });","file":"pieces-page-type.js","skipped":false,"dir":"test"},{"name":"should not create a double-slashed _url on a piece-page-type set as the homepage","suites":["Pieces Pages"],"updatePoint":{"line":151,"column":86,"index":4142},"line":151,"code":"  it('should not create a double-slashed _url on a piece-page-type set as the homepage', async function () {\n    const piece = await apos.doc.find(apos.task.getAnonReq(), {\n      type: 'home',\n      title: 'Home 001'\n    }).toObject();\n    assert(piece);\n    assert(piece._url === '/home-001');\n  });","file":"pieces-page-type.js","skipped":false,"dir":"test"},{"name":"should correctly populate the ._url property of pieces in a docs query if _url itself is \"projected\"","suites":["Pieces Pages"],"updatePoint":{"line":159,"column":106,"index":4463},"line":159,"code":"  it('should correctly populate the ._url property of pieces in a docs query if _url itself is \"projected\"', async function () {\n    const piece = await apos.doc.find(apos.task.getAnonReq(), {\n      type: 'event',\n      title: 'Event 001'\n    }, {\n      project: {\n        _url: 1\n      }\n    }).toObject();\n    assert(piece);\n    assert(piece._url);\n    assert(piece._url === '/events/event-001');\n  });","file":"pieces-page-type.js","skipped":false,"dir":"test"},{"name":"should be able to access index page with first event on it, but not eleventh event","suites":["Pieces Pages"],"updatePoint":{"line":172,"column":88,"index":4850},"line":172,"code":"  it('should be able to access index page with first event on it, but not eleventh event', async function () {\n    const body = await apos.http.get('/events'); // Only page one events should show up\n\n    assert(body.match(/event-001\"/));\n    assert(!body.match(/event-011\"/));\n  });","file":"pieces-page-type.js","skipped":false,"dir":"test"},{"name":"should be able to access second page","suites":["Pieces Pages"],"updatePoint":{"line":178,"column":42,"index":5087},"line":178,"code":"  it('should be able to access second page', async function () {\n    const body = await apos.http.get('/events?page=2'); // Only page two events should show up\n\n    assert(body.match(/event-011\"/));\n    assert(!body.match(/event-001\"/));\n  });","file":"pieces-page-type.js","skipped":false,"dir":"test"},{"name":"should be able to access \"show\" page for first event, should not also contain second event","suites":["Pieces Pages"],"updatePoint":{"line":184,"column":96,"index":5385},"line":184,"code":"  it('should be able to access \"show\" page for first event, should not also contain second event', async function () {\n    const body = await apos.http.get('/events/event-001'); // Only event 1's title should show up\n\n    assert(body.match(/Event 001/));\n    assert(!body.match(/Event 002/));\n  });","file":"pieces-page-type.js","skipped":false,"dir":"test"},{"name":"should initialize with a schema","suites":["Pieces Public API"],"updatePoint":{"line":14,"column":37,"index":293},"line":14,"code":"  it('should initialize with a schema', async () => {\n    apos = await t.create({\n      root: module,\n      modules: {\n        thing: {\n          extend: '@apostrophecms/piece-type',\n          options: {\n            alias: 'thing',\n            label: 'Thing'\n          },\n          fields: {\n            add: {\n              foo: {\n                label: 'Foo',\n                type: 'string'\n              }\n            }\n          }\n        }\n      }\n    });\n    assert(apos.modules.thing);\n    assert(apos.modules.thing.schema);\n  });","file":"pieces-public-api.js","skipped":false,"dir":"test"},{"name":"should be able to insert a piece into the database","suites":["Pieces Public API"],"updatePoint":{"line":44,"column":56,"index":973},"line":44,"code":"  it('should be able to insert a piece into the database', async () => {\n    await apos.thing.insert(apos.task.getReq(), testThing);\n    const thing = await apos.thing.find(apos.task.getReq(), {\n      _id: 'testThing:en:published'\n    }).toObject();\n    assert(thing);\n  });","file":"pieces-public-api.js","skipped":false,"dir":"test"},{"name":"should not be able to anonymously retrieve a piece by id from the database without a public API projection","suites":["Pieces Public API"],"updatePoint":{"line":51,"column":112,"index":1304},"line":51,"code":"  it('should not be able to anonymously retrieve a piece by id from the database without a public API projection', async () => {\n    try {\n      await apos.http.get('/api/v1/thing'); // Bad, we expected a 404\n\n      assert(false);\n    } catch (e) {\n      assert(e.status === 404);\n    }\n  });","file":"pieces-public-api.js","skipped":false,"dir":"test"},{"name":"should be able to anonymously retrieve a piece by id from the database with a public API projection","suites":["Pieces Public API"],"updatePoint":{"line":60,"column":105,"index":1590},"line":60,"code":"  it('should be able to anonymously retrieve a piece by id from the database with a public API projection', async () => {\n    // Patch the option setting to simplify the test code\n    apos.thing.options.publicApiProjection = {\n      title: 1,\n      _url: 1\n    };\n    const response = await apos.http.get('/api/v1/thing');\n    assert(response);\n    assert(response.results);\n    assert(response.results.length === 1);\n    assert(response.results[0].title === 'hello');\n    assert(!response.results[0].foo);\n  });","file":"pieces-public-api.js","skipped":false,"dir":"test"},{"name":"should initialize with a schema","suites":["Pieces"],"updatePoint":{"line":26,"column":37,"index":491},"line":26,"code":"  it('should initialize with a schema', async () => {\n    apos = await t.create({\n      root: module,\n      modules: {\n        '@apostrophecms/express': {\n          options: {\n            apiKeys: {\n              [apiKey]: {\n                role: 'admin'\n              }\n            }\n          }\n        },\n        thing: {\n          extend: '@apostrophecms/piece-type',\n          options: {\n            alias: 'thing',\n            name: 'thing',\n            label: 'Thing',\n            publicApiProjection: {\n              title: 1,\n              _url: 1\n            }\n          },\n          fields: {\n            add: {\n              foo: {\n                label: 'Foo',\n                type: 'string'\n              }\n            }\n          }\n        },\n        person: {\n          extend: '@apostrophecms/piece-type',\n          options: {\n            alias: 'person',\n            name: 'person',\n            label: 'Person',\n            publicApiProjection: {\n              title: 1,\n              _url: 1\n            }\n          },\n          fields: {\n            add: {\n              _things: {\n                type: 'relationship'\n              },\n              _tools: {\n                type: 'relationship',\n                withType: 'thing',\n                fields: {\n                  add: {\n                    skillLevel: {\n                      type: 'integer'\n                    }\n                  }\n                }\n              }\n            }\n          }\n        },\n        product: {\n          extend: '@apostrophecms/piece-type',\n          options: {\n            publicApiProjection: {\n              title: 1,\n              _url: 1,\n              _articles: 1\n            }\n          },\n          fields: {\n            add: {\n              body: {\n                type: 'area',\n                options: {\n                  widgets: {\n                    '@apostrophecms/rich-text': {},\n                    '@apostrophecms/image': {}\n                  }\n                }\n              },\n              color: {\n                type: 'select',\n                choices: [{\n                  label: 'Red',\n                  value: 'red'\n                }, {\n                  label: 'Blue',\n                  value: 'blue'\n                }]\n              },\n              photo: {\n                type: 'attachment',\n                group: 'images'\n              },\n              addresses: {\n                type: 'array',\n                fields: {\n                  add: {\n                    street: {\n                      type: 'string'\n                    }\n                  }\n                }\n              },\n              _articles: {\n                type: 'relationship',\n                withType: 'article',\n                builders: {\n                  project: {\n                    _url: 1,\n                    title: 1\n                  }\n                },\n                fields: {\n                  add: {\n                    relevance: {\n                      // Explains the relevance of the article to the\n                      // product in 1 sentence\n                      type: 'string'\n                    }\n                  }\n                }\n              }\n            }\n          }\n        },\n        article: {\n          extend: '@apostrophecms/piece-type',\n          options: {\n            publicApiProjection: {\n              title: 1,\n              _url: 1\n            }\n          },\n          fields: {\n            add: {\n              name: {\n                type: 'string'\n              },\n              _products: {\n                type: 'relationshipReverse',\n                withType: 'product'\n              }\n            }\n          }\n        },\n        constrained: {\n          options: {\n            alias: 'constrained'\n          },\n          extend: '@apostrophecms/piece-type',\n          fields: {\n            add: {\n              description: {\n                type: 'string',\n                min: 5,\n                max: 10\n              }\n            }\n          }\n        },\n        resume: {\n          options: {\n            alias: 'resume'\n          },\n          extend: '@apostrophecms/piece-type',\n          fields: {\n            add: {\n              attachment: {\n                type: 'attachment',\n                required: true\n              }\n            }\n          }\n        }\n      }\n    });\n    assert(apos.modules.thing);\n    assert(apos.modules.thing.schema);\n  }); // little test-helper function to get piece by id regardless of archive status","file":"pieces.js","skipped":false,"dir":"test"},{"name":"should be able to create a new piece","suites":["Pieces"],"updatePoint":{"line":247,"column":42,"index":5829},"line":247,"code":"  it('should be able to create a new piece', function () {\n    assert(apos.modules.thing.newInstance);\n    const thing = apos.modules.thing.newInstance();\n    assert(thing);\n    assert(thing.type === 'thing');\n  }); // Test pieces.insert()","file":"pieces.js","skipped":false,"dir":"test"},{"name":"should be able to insert a piece into the database","suites":["Pieces"],"updatePoint":{"line":254,"column":56,"index":6084},"line":254,"code":"  it('should be able to insert a piece into the database', async () => {\n    assert(apos.modules.thing.insert);\n    insertedOne = await apos.modules.thing.insert(apos.task.getReq(), testThing);\n  });","file":"pieces.js","skipped":false,"dir":"test"},{"name":"should be able to insert a second piece into the database","suites":["Pieces"],"updatePoint":{"line":258,"column":63,"index":6291},"line":258,"code":"  it('should be able to insert a second piece into the database', async () => {\n    assert(apos.modules.thing.insert);\n    const template = { ...testThing\n    };\n    template._id = null;\n    template.aposDocId = null;\n    template.title = 'hello #2';\n    insertedTwo = await apos.modules.thing.insert(apos.task.getReq(), template);\n  });","file":"pieces.js","skipped":false,"dir":"test"},{"name":"should be able to retrieve a piece by id from the database","suites":["Pieces"],"updatePoint":{"line":267,"column":64,"index":6630},"line":267,"code":"  it('should be able to retrieve a piece by id from the database', async () => {\n    assert(apos.modules.thing.requireOneForEditing);\n    const req = apos.task.getReq();\n    req.piece = await apos.modules.thing.requireOneForEditing(req, {\n      _id: 'testThing:en:published'\n    });\n    assert(req.piece);\n    assert(req.piece._id === 'testThing:en:published');\n    assert(req.piece.title === 'hello');\n    assert(req.piece.foo === 'bar');\n  });","file":"pieces.js","skipped":false,"dir":"test"},{"name":"should be able to retrieve the next piece from the database per sort order","suites":["Pieces"],"updatePoint":{"line":278,"column":80,"index":7092},"line":278,"code":"  it('should be able to retrieve the next piece from the database per sort order', async () => {\n    const req = apos.task.getReq(); // The default sort order is reverse chronological, so \"next\" is older, not newer\n\n    const next = await apos.modules.thing.find(req).next(insertedTwo).toObject();\n    assert(next.title === 'hello');\n  });","file":"pieces.js","skipped":false,"dir":"test"},{"name":"should be able to retrieve the previous piece from the database","suites":["Pieces"],"updatePoint":{"line":284,"column":69,"index":7421},"line":284,"code":"  it('should be able to retrieve the previous piece from the database', async () => {\n    const req = apos.task.getReq(); // The default sort order is reverse chronological, so \"previous\" is newer, not older\n\n    const previous = await apos.modules.thing.find(req).previous(insertedOne).toObject();\n    assert(previous.title === 'hello #2');\n  }); // Test pieces.update()","file":"pieces.js","skipped":false,"dir":"test"},{"name":"should be able to update a piece in the database","suites":["Pieces"],"updatePoint":{"line":291,"column":54,"index":7779},"line":291,"code":"  it('should be able to update a piece in the database', async () => {\n    assert(apos.modules.thing.update);\n    testThing.foo = 'moo';\n    const piece = await apos.modules.thing.update(apos.task.getReq(), testThing);\n    assert(testThing === piece); // Now let's get the piece and check if it was updated\n\n    const req = apos.task.getReq();\n    req.piece = await apos.modules.thing.requireOneForEditing(req, {\n      _id: 'testThing:en:published'\n    });\n    assert(req.piece);\n    assert(req.piece._id === 'testThing:en:published');\n    assert(req.piece.foo === 'moo');\n  }); // Test pieces.addListFilters()","file":"pieces.js","skipped":false,"dir":"test"},{"name":"should only execute filters that are safe and have a launder method","suites":["Pieces"],"updatePoint":{"line":306,"column":73,"index":8410},"line":306,"code":"  it('should only execute filters that are safe and have a launder method', function () {\n    let publicTest = false;\n    let manageTest = false; // addListFilters should execute launder and filters for filter\n    // definitions that are safe for 'public' or 'manage' contexts\n\n    const mockCursor = apos.doc.find(apos.task.getAnonReq());\n\n    _.merge(mockCursor, {\n      builders: {\n        publicTest: {\n          launder: function (s) {\n            return 'laundered';\n          }\n        },\n        manageTest: {\n          launder: function (s) {\n            return 'laundered';\n          }\n        },\n        unsafeTest: {}\n      },\n      publicTest: function (value) {\n        assert(value === 'laundered');\n        publicTest = true;\n      },\n      manageTest: function (value) {\n        assert(value === 'laundered');\n        manageTest = true;\n      },\n      unsafeTest: function (value) {\n        assert.fail('unsafe filter ran');\n      }\n    });\n\n    const filters = {\n      publicTest: 'foo',\n      manageTest: 'bar',\n      unsafeTest: 'nope',\n      fakeTest: 'notEvenReal'\n    };\n    mockCursor.applyBuildersSafely(filters);\n    assert(publicTest === true);\n    assert(manageTest === true);\n  });","file":"pieces.js","skipped":false,"dir":"test"},{"name":"should be able to archive a piece with proper deduplication","suites":["Pieces"],"updatePoint":{"line":350,"column":65,"index":9613},"line":350,"code":"  it('should be able to archive a piece with proper deduplication', async () => {\n    assert(apos.modules.thing.requireOneForEditing);\n    const req = apos.task.getReq();\n    const id = 'testThing:en:published';\n    req.body = {\n      _id: id\n    }; // let's make sure the piece is not archived to start\n\n    const piece = await findPiece(req, id);\n    assert(!piece.archived);\n    piece.archived = true;\n    await apos.modules.thing.update(req, piece); // let's get the piece to make sure it is archived\n\n    const piece2 = await findPiece(req, id);\n    assert(piece2);\n    assert(piece2.archived === true);\n    assert(piece2.aposWasArchived === true);\n    assert.equal(piece2.slug, 'deduplicate-testThing-hello');\n  });","file":"pieces.js","skipped":false,"dir":"test"},{"name":"should be able to rescue a archived piece with proper deduplication","suites":["Pieces"],"updatePoint":{"line":369,"column":73,"index":10343},"line":369,"code":"  it('should be able to rescue a archived piece with proper deduplication', async () => {\n    const req = apos.task.getReq();\n    const id = 'testThing:en:published';\n    req.body = {\n      _id: id\n    }; // let's make sure the piece is archived to start\n\n    const piece = await findPiece(req, id);\n    assert(piece.archived === true);\n    piece.archived = false;\n    await apos.modules.thing.update(req, piece);\n    const piece2 = await findPiece(req, id);\n    assert(piece2);\n    assert(!piece2.archived);\n    assert(!piece2.aposWasArchived);\n    assert(piece2.slug === 'hello');\n  });","file":"pieces.js","skipped":false,"dir":"test"},{"name":"should be able to insert test users","suites":["Pieces"],"updatePoint":{"line":386,"column":41,"index":10900},"line":386,"code":"  it('should be able to insert test users', async function () {\n    assert(apos.user.newInstance);\n    const user = apos.user.newInstance();\n    assert(user);\n    user.title = 'admin';\n    user.username = 'admin';\n    user.password = 'admin';\n    user.email = 'ad@min.com';\n    user.role = 'admin';\n    await apos.user.insert(apos.task.getReq(), user);\n    const user2 = apos.user.newInstance();\n    user2.title = 'admin2';\n    user2.username = 'admin2';\n    user2.password = 'admin2';\n    user2.email = 'ad@min2.com';\n    user2.role = 'admin';\n    return apos.user.insert(apos.task.getReq(), user2);\n  });","file":"pieces.js","skipped":false,"dir":"test"},{"name":"people can find things via a relationship","suites":["Pieces"],"updatePoint":{"line":404,"column":47,"index":11513},"line":404,"code":"  it('people can find things via a relationship', async () => {\n    const req = apos.task.getReq();\n\n    for (const person of testPeople) {\n      await apos.person.insert(req, person);\n    }\n\n    for (const thing of additionalThings) {\n      await apos.thing.insert(req, thing);\n    }\n\n    const person = await apos.doc.getManager('person').find(req, {}).toObject();\n    assert(person);\n    assert(person.title === 'Bob');\n    assert(person._things);\n    assert(person._things.length === 2);\n  });","file":"pieces.js","skipped":false,"dir":"test"},{"name":"people cannot find things via a relationship with an inadequate projection","suites":["Pieces"],"updatePoint":{"line":421,"column":80,"index":12044},"line":421,"code":"  it('people cannot find things via a relationship with an inadequate projection', function () {\n    const req = apos.task.getReq();\n    return apos.doc.getManager('person').find(req, {}, {\n      // Use the options object rather than a chainable method\n      project: {\n        title: 1\n      }\n    }).toObject().then(function (person) {\n      assert(person);\n      assert(person.title === 'Bob'); // Verify projection\n\n      assert(!person.slug);\n      assert(!person._things || person._things.length === 0);\n    });\n  });","file":"pieces.js","skipped":false,"dir":"test"},{"name":"people can find things via a relationship with a \"projection\" of the relationship name","suites":["Pieces"],"updatePoint":{"line":436,"column":92,"index":12580},"line":436,"code":"  it('people can find things via a relationship with a \"projection\" of the relationship name', function () {\n    const req = apos.task.getReq();\n    return apos.doc.getManager('person').find(req, {}, {\n      project: {\n        title: 1,\n        _things: 1\n      }\n    }).toObject().then(function (person) {\n      assert(person);\n      assert(person.title === 'Bob');\n      assert(person._things);\n      assert(person._things.length === 2);\n    });\n  });","file":"pieces.js","skipped":false,"dir":"test"},{"name":"should be able to log in as admin","suites":["Pieces"],"updatePoint":{"line":450,"column":39,"index":12981},"line":450,"code":"  it('should be able to log in as admin', async () => {\n    jar = apos.http.jar(); // establish session\n\n    let page = await apos.http.get('/', {\n      jar\n    });\n    assert(page.match(/logged out/)); // Log in\n\n    await apos.http.post('/api/v1/@apostrophecms/login/login', {\n      body: {\n        username: 'admin',\n        password: 'admin',\n        session: true\n      },\n      jar\n    }); // Confirm login\n\n    page = await apos.http.get('/', {\n      jar\n    });\n    assert(page.match(/logged in/));\n  });","file":"pieces.js","skipped":false,"dir":"test"},{"name":"can attach a tool to a person via the REST API","suites":["Pieces"],"updatePoint":{"line":472,"column":52,"index":13507},"line":472,"code":"  it('can attach a tool to a person via the REST API', async function () {\n    const person1 = await apos.http.get('/api/v1/person/person1:en:published');\n    assert(person1);\n    const thing1 = await apos.http.get('/api/v1/thing/thing1:en:published');\n    assert(thing1);\n    person1._tools = [{ ...thing1,\n      _fields: {\n        skillLevel: 5\n      }\n    }];\n    await apos.http.put('/api/v1/person/person1:en:published', {\n      body: person1,\n      jar\n    });\n    const person1After = await apos.http.get('/api/v1/person/person1:en:published', {\n      jar\n    });\n    assert(person1After);\n    assert(person1After._tools);\n    assert(person1After._tools.length);\n    assert(person1After._tools[0].title === 'Red');\n    assert(person1After._tools[0]._fields);\n    assert(person1After._tools[0]._fields.skillLevel === 5);\n  });","file":"pieces.js","skipped":false,"dir":"test"},{"name":"cannot POST a product without a session","suites":["Pieces"],"updatePoint":{"line":496,"column":45,"index":14333},"line":496,"code":"  it('cannot POST a product without a session', async () => {\n    try {\n      await apos.http.post('/api/v1/product', {\n        body: {\n          title: 'Fake Product',\n          body: {\n            metaType: 'area',\n            items: [{\n              metaType: 'widget',\n              type: '@apostrophecms/rich-text',\n              id: cuid(),\n              content: '<p>This is fake</p>'\n            }]\n          }\n        }\n      }); // Should not get here\n\n      assert(false);\n    } catch (e) {\n      assert(e.status === 403);\n    }\n  });","file":"pieces.js","skipped":false,"dir":"test"},{"name":"can POST products with a session, some visible","suites":["Pieces"],"updatePoint":{"line":519,"column":52,"index":14907},"line":519,"code":"  it('can POST products with a session, some visible', async () => {\n    // range is exclusive at the top end, I want 10 things\n    let widgetId;\n\n    for (let i = 1; i <= 10; i++) {\n      if (i === 1) {\n        widgetId = cuid();\n      }\n\n      const response = await apos.http.post('/api/v1/product', {\n        body: {\n          title: 'Cool Product #' + i,\n          visibility: i & 1 ? 'loginRequired' : 'public',\n          body: {\n            metaType: 'area',\n            items: [{\n              metaType: 'widget',\n              type: '@apostrophecms/rich-text',\n              _id: i === 1 ? widgetId : null,\n              content: '<p>This is thing ' + i + '</p>'\n            }, // Intentional attempt to use duplicate _id\n            {\n              metaType: 'widget',\n              type: '@apostrophecms/rich-text',\n              _id: i === 1 ? widgetId : null,\n              content: '<p>This is thing ' + i + ' second widget</p>'\n            }]\n          }\n        },\n        jar\n      });\n      assert(response);\n      assert(response._id);\n      assert(response.body);\n      assert(response.title === 'Cool Product #' + i);\n      assert(response.slug === 'cool-product-' + i);\n      assert(response.type === 'product');\n      assert(response.body.items[0].content === `<p>This is thing ${i}</p>`);\n      assert(response.body.items[1].content === `<p>This is thing ${i} second widget</p>`);\n\n      if (i === 1) {\n        // Deduplicate any duplicate ids we specified at doc level\n        assert(response.body.items[0]._id === widgetId);\n        assert(response.body.items[1]._id); // Quietly deduplicated for us\n\n        assert(response.body.items[1]._id !== widgetId);\n        updateProduct = response;\n      } else {\n        // All new _ids if we did not specify\n        assert(response.body.items[0]._id);\n        assert(response.body.items[1]._id);\n        assert(response.body.items[0]._id !== response.body.items[1]._id);\n        assert(response.body.items[0]._id !== widgetId);\n      }\n    }\n  });","file":"pieces.js","skipped":false,"dir":"test"},{"name":"can GET five of those products without the user session","suites":["Pieces"],"updatePoint":{"line":575,"column":61,"index":16935},"line":575,"code":"  it('can GET five of those products without the user session', async () => {\n    const response = await apos.http.get('/api/v1/product');\n    assert(response);\n    assert(response.results);\n    assert(response.results.length === 5);\n  });","file":"pieces.js","skipped":false,"dir":"test"},{"name":"can GET all of those products with a user session","suites":["Pieces"],"updatePoint":{"line":581,"column":55,"index":17169},"line":581,"code":"  it('can GET all of those products with a user session', async () => {\n    const response = await apos.http.get('/api/v1/product', {\n      jar\n    });\n    assert(response);\n    assert(response.results);\n    assert(response.results.length === 10);\n  });","file":"pieces.js","skipped":false,"dir":"test"},{"name":"can GET only 5 if perPage is 5","suites":["Pieces"],"updatePoint":{"line":590,"column":36,"index":17419},"line":590,"code":"  it('can GET only 5 if perPage is 5', async () => {\n    const response = await apos.http.get('/api/v1/product?perPage=5', {\n      jar\n    });\n    assert(response);\n    assert(response.results);\n    assert(response.results.length === 5);\n    firstId = response.results[0]._id;\n    assert(response.pages === 2);\n  });","file":"pieces.js","skipped":false,"dir":"test"},{"name":"can GET a different 5 on page 2","suites":["Pieces"],"updatePoint":{"line":600,"column":37,"index":17737},"line":600,"code":"  it('can GET a different 5 on page 2', async () => {\n    const response = await apos.http.get('/api/v1/product?perPage=5&page=2', {\n      jar\n    });\n    assert(response);\n    assert(response.results);\n    assert(response.results.length === 5);\n    assert(response.results[0]._id !== firstId);\n    assert(response.pages === 2);\n  });","file":"pieces.js","skipped":false,"dir":"test"},{"name":"can update a product with PUT","suites":["Pieces"],"updatePoint":{"line":610,"column":35,"index":18070},"line":610,"code":"  it('can update a product with PUT', async () => {\n    const args = {\n      body: { ...updateProduct,\n        title: 'I like cheese',\n        _id: 'should-not-change:en:published'\n      },\n      jar\n    };\n    const response = await apos.http.put(`/api/v1/product/${updateProduct._id}`, args);\n    assert(response);\n    assert(response._id === updateProduct._id);\n    assert(response.title === 'I like cheese');\n    assert(response.body.items.length);\n  });","file":"pieces.js","skipped":false,"dir":"test"},{"name":"fetch of updated product shows updated content","suites":["Pieces"],"updatePoint":{"line":624,"column":52,"index":18546},"line":624,"code":"  it('fetch of updated product shows updated content', async () => {\n    const response = await apos.http.get(`/api/v1/product/${updateProduct._id}`, {\n      jar\n    });\n    assert(response);\n    assert(response._id === updateProduct._id);\n    assert(response.title === 'I like cheese');\n    assert(response.body.items.length);\n  });","file":"pieces.js","skipped":false,"dir":"test"},{"name":"can archive a product","suites":["Pieces"],"updatePoint":{"line":633,"column":27,"index":18855},"line":633,"code":"  it('can archive a product', async () => {\n    return apos.http.patch(`/api/v1/product/${updateProduct._id}`, {\n      body: {\n        archived: true\n      },\n      jar\n    });\n  });","file":"pieces.js","skipped":false,"dir":"test"},{"name":"cannot fetch a archived product","suites":["Pieces"],"updatePoint":{"line":641,"column":37,"index":19048},"line":641,"code":"  it('cannot fetch a archived product', async () => {\n    try {\n      await apos.http.get(`/api/v1/product/${updateProduct._id}`, {\n        jar\n      }); // Should have been a 404, 200 = test fails\n\n      assert(false);\n    } catch (e) {\n      assert(e.status === 404);\n    }\n  });","file":"pieces.js","skipped":false,"dir":"test"},{"name":"can fetch archived product with archived=any and the right user","suites":["Pieces"],"updatePoint":{"line":652,"column":69,"index":19362},"line":652,"code":"  it('can fetch archived product with archived=any and the right user', async () => {\n    const product = await apos.http.get(`/api/v1/product/${updateProduct._id}?archived=any`, {\n      jar\n    }); // Should have been a 404, 200 = test fails\n\n    assert(product.archived);\n  });","file":"pieces.js","skipped":false,"dir":"test"},{"name":"can insert a product with relationships","suites":["Pieces"],"updatePoint":{"line":660,"column":45,"index":19642},"line":660,"code":"  it('can insert a product with relationships', async () => {\n    let response = await apos.http.post('/api/v1/article', {\n      body: {\n        title: 'First Article',\n        name: 'first-article'\n      },\n      jar\n    });\n    const article = response;\n    assert(article);\n    assert(article.title === 'First Article');\n    article._fields = {\n      relevance: 'The very first article that was ever published about this product'\n    };\n    response = await apos.http.post('/api/v1/product', {\n      body: {\n        title: 'Product Key Product With Relationship',\n        body: {\n          metaType: 'area',\n          items: [{\n            metaType: 'widget',\n            type: '@apostrophecms/rich-text',\n            id: cuid(),\n            content: '<p>This is the product key product with relationship</p>'\n          }]\n        },\n        _articles: [article]\n      },\n      jar\n    });\n    assert(response._id);\n    assert(response.articlesIds[0] === article.aposDocId);\n    assert(response.articlesFields[article.aposDocId].relevance === 'The very first article that was ever published about this product');\n    relatedProductId = response._id;\n  });","file":"pieces.js","skipped":false,"dir":"test"},{"name":"can GET a product with relationships","suites":["Pieces"],"updatePoint":{"line":695,"column":42,"index":20798},"line":695,"code":"  it('can GET a product with relationships', async () => {\n    const response = await apos.http.get('/api/v1/product');\n    assert(response);\n    assert(response.results);\n\n    const product = _.find(response.results, {\n      slug: 'product-key-product-with-relationship'\n    });\n\n    assert(Array.isArray(product._articles));\n    assert(product._articles.length === 1);\n    assert(product._articles[0]._fields);\n    assert.strictEqual(product._articles[0]._fields.relevance, 'The very first article that was ever published about this product');\n  });","file":"pieces.js","skipped":false,"dir":"test"},{"name":"can GET a single product with relationships","suites":["Pieces"],"updatePoint":{"line":710,"column":49,"index":21381},"line":710,"code":"  it('can GET a single product with relationships', async () => {\n    const response = await apos.http.get(`/api/v1/product/${relatedProductId}`);\n    assert(response);\n    assert(response._articles);\n    assert(response._articles.length === 1);\n    relatedArticleId = response._articles[0]._id;\n  });","file":"pieces.js","skipped":false,"dir":"test"},{"name":"can GET a single product using projections","suites":["Pieces"],"updatePoint":{"line":717,"column":48,"index":21682},"line":717,"code":"  it('can GET a single product using projections', async () => {\n    const response = await apos.http.get(`/api/v1/product/${relatedProductId}`, {\n      qs: {\n        project: {\n          _id: 1,\n          title: 1\n        }\n      }\n    });\n    const keys = Object.keys(response);\n    assert(response);\n    assert(keys.length === 2);\n    assert(keys.every(key => ['_id', 'title'].includes(key)));\n  });","file":"pieces.js","skipped":false,"dir":"test"},{"name":"can GET a single article with reverse relationships","suites":["Pieces"],"updatePoint":{"line":731,"column":57,"index":22094},"line":731,"code":"  it('can GET a single article with reverse relationships', async () => {\n    const response = await apos.http.get(`/api/v1/article/${relatedArticleId}`);\n    assert(response);\n    assert(response._products);\n    assert(response._products.length === 1);\n    assert(response._products[0]._id === relatedProductId);\n  });","file":"pieces.js","skipped":false,"dir":"test"},{"name":"can GET a single article with reverse relationships in draft mode","suites":["Pieces"],"updatePoint":{"line":738,"column":71,"index":22428},"line":738,"code":"  it('can GET a single article with reverse relationships in draft mode', async () => {\n    const draftRelatedArticleId = relatedArticleId.replace(':published', ':draft');\n    const draftRelatedProductId = relatedProductId.replace(':published', ':draft');\n    const response = await apos.http.get(`/api/v1/article/${draftRelatedArticleId}`, {\n      jar\n    });\n    assert(response);\n    assert(response._products);\n    assert(response._products.length === 1);\n    assert(response._products[0]._id === draftRelatedProductId);\n  });","file":"pieces.js","skipped":false,"dir":"test"},{"name":"can GET results plus filter choices","suites":["Pieces"],"updatePoint":{"line":749,"column":41,"index":22929},"line":749,"code":"  it('can GET results plus filter choices', async () => {\n    const response = await apos.http.get('/api/v1/product?choices=title,visibility,_articles,articles', {\n      jar\n    });\n    assert(response);\n    assert(response.results);\n    assert(response.choices.title);\n    assert(response.choices.title[0].label.match(/Cool Product/));\n    assert(response.choices.visibility);\n    assert(response.choices.visibility.length === 2);\n    assert(response.choices.visibility.find(item => item.value === 'loginRequired'));\n    assert(response.choices.visibility.find(item => item.value === 'public'));\n    assert(response.choices._articles);\n    assert(response.choices._articles[0].label === 'First Article'); // an _id\n\n    assert(response.choices._articles[0].value.match(/^c/));\n    assert(response.choices.articles[0].label === 'First Article'); // a slug\n\n    assert(response.choices.articles[0].value === 'first-article');\n  });","file":"pieces.js","skipped":false,"dir":"test"},{"name":"can GET results plus filter counts","suites":["Pieces"],"updatePoint":{"line":769,"column":40,"index":23859},"line":769,"code":"  it('can GET results plus filter counts', async () => {\n    const response = await apos.http.get('/api/v1/product?_edit=1&counts=title,visibility,_articles,articles', {\n      jar\n    });\n    assert(response);\n    assert(response.results);\n    assert(response.counts);\n    assert(response.counts.title);\n    assert(response.counts.title[0].label.match(/Cool Product/)); // Doesn't work for every field type, but does for this\n\n    assert(response.counts.title[0].count === 1);\n    assert(response.counts.visibility);\n    assert(response.counts.visibility.length === 2);\n    assert(response.counts.visibility.find(item => item.value === 'loginRequired'));\n    assert(response.counts.visibility.find(item => item.value === 'public'));\n    assert(response.counts._articles);\n    assert(response.counts._articles[0].label === 'First Article'); // an _id\n\n    assert(response.counts._articles[0].value.match(/^c/));\n    assert(response.counts.articles[0].label === 'First Article'); // a slug\n\n    assert(response.counts.articles[0].value === 'first-article');\n  });","file":"pieces.js","skipped":false,"dir":"test"},{"name":"can patch a relationship","suites":["Pieces"],"updatePoint":{"line":792,"column":30,"index":24911},"line":792,"code":"  it('can patch a relationship', async () => {\n    let response = await apos.http.post('/api/v1/article', {\n      jar,\n      body: {\n        title: 'Relationship Article',\n        name: 'relationship-article'\n      }\n    });\n    const article = response;\n    assert(article);\n    assert(article.title === 'Relationship Article');\n    response = await apos.http.post('/api/v1/product', {\n      jar,\n      body: {\n        title: 'Initially No Relationship Value',\n        body: {\n          metaType: 'area',\n          items: [{\n            metaType: 'widget',\n            type: '@apostrophecms/rich-text',\n            id: cuid(),\n            content: '<p>This is the product key product without initial relationship</p>'\n          }]\n        }\n      }\n    });\n    const product = response;\n    assert(product._id);\n    response = await apos.http.patch(`/api/v1/product/${product._id}`, {\n      body: {\n        _articles: [article]\n      },\n      jar\n    });\n    assert(response.title === 'Initially No Relationship Value');\n    assert(response.articlesIds);\n    assert(response.articlesIds[0] === article.aposDocId);\n    assert(response._articles);\n    assert(response._articles[0]._id === article._id);\n  });","file":"pieces.js","skipped":false,"dir":"test"},{"name":"can insert a constrained piece that validates","suites":["Pieces"],"updatePoint":{"line":832,"column":51,"index":26140},"line":832,"code":"  it('can insert a constrained piece that validates', async () => {\n    const constrained = await apos.http.post('/api/v1/constrained', {\n      body: {\n        title: 'First Constrained',\n        description: 'longenough'\n      },\n      jar\n    });\n    assert(constrained);\n    assert(constrained.title === 'First Constrained');\n    assert(constrained.description === 'longenough');\n  });","file":"pieces.js","skipped":false,"dir":"test"},{"name":"cannot insert a constrained piece that does not validate","suites":["Pieces"],"updatePoint":{"line":844,"column":62,"index":26540},"line":844,"code":"  it('cannot insert a constrained piece that does not validate', async () => {\n    try {\n      await apos.http.post('/api/v1/constrained', {\n        body: {\n          title: 'Second Constrained',\n          description: 'shrt'\n        },\n        jar\n      }); // Getting here is bad\n\n      assert(false);\n    } catch (e) {\n      assert(e);\n      assert(e.status === 400);\n      assert(e.body.data.errors);\n      assert(e.body.data.errors.length === 1);\n      assert(e.body.data.errors[0].path === 'description');\n      assert(e.body.data.errors[0].name === 'min');\n      assert(e.body.data.errors[0].code === 400);\n    }\n  });","file":"pieces.js","skipped":false,"dir":"test"},{"name":"can insert a product for advisory lock testing","suites":["Pieces"],"updatePoint":{"line":866,"column":52,"index":27182},"line":866,"code":"  it('can insert a product for advisory lock testing', async () => {\n    const response = await apos.http.post('/api/v1/product', {\n      body: {\n        title: 'Advisory Test',\n        name: 'advisory-test'\n      },\n      jar\n    });\n    const article = response;\n    assert(article);\n    assert(article.title === 'Advisory Test');\n    advisoryLockTestId = article._id;\n  });","file":"pieces.js","skipped":false,"dir":"test"},{"name":"can get an advisory lock on a product while patching a property","suites":["Pieces"],"updatePoint":{"line":879,"column":69,"index":27576},"line":879,"code":"  it('can get an advisory lock on a product while patching a property', async () => {\n    const product = await apos.http.patch(`/api/v1/product/${advisoryLockTestId}`, {\n      jar,\n      body: {\n        _advisoryLock: {\n          tabId: 'xyz',\n          lock: true\n        },\n        title: 'Advisory Test Patched'\n      }\n    });\n    assert(product.title === 'Advisory Test Patched');\n  });","file":"pieces.js","skipped":false,"dir":"test"},{"name":"cannot get an advisory lock with a different context id","suites":["Pieces"],"updatePoint":{"line":892,"column":61,"index":27961},"line":892,"code":"  it('cannot get an advisory lock with a different context id', async () => {\n    try {\n      await apos.http.patch(`/api/v1/product/${advisoryLockTestId}`, {\n        jar,\n        body: {\n          _advisoryLock: {\n            tabId: 'pdq',\n            lock: true\n          }\n        }\n      });\n      assert(false);\n    } catch (e) {\n      assert(e.status === 409);\n      assert(e.body.name === 'locked');\n      assert(e.body.data.me);\n    }\n  });","file":"pieces.js","skipped":false,"dir":"test"},{"name":"can get an advisory lock with a different context id if forcing","suites":["Pieces"],"updatePoint":{"line":910,"column":69,"index":28418},"line":910,"code":"  it('can get an advisory lock with a different context id if forcing', async () => {\n    await apos.http.patch(`/api/v1/product/${advisoryLockTestId}`, {\n      jar,\n      body: {\n        _advisoryLock: {\n          tabId: 'pdq',\n          lock: true,\n          force: true\n        }\n      }\n    });\n  });","file":"pieces.js","skipped":false,"dir":"test"},{"name":"can renew the advisory lock with the second context id after forcing","suites":["Pieces"],"updatePoint":{"line":922,"column":74,"index":28728},"line":922,"code":"  it('can renew the advisory lock with the second context id after forcing', async () => {\n    await apos.http.patch(`/api/v1/product/${advisoryLockTestId}`, {\n      jar,\n      body: {\n        _advisoryLock: {\n          tabId: 'pdq',\n          lock: true\n        }\n      }\n    });\n  });","file":"pieces.js","skipped":false,"dir":"test"},{"name":"can unlock the advisory lock while patching a property","suites":["Pieces"],"updatePoint":{"line":933,"column":60,"index":29001},"line":933,"code":"  it('can unlock the advisory lock while patching a property', async () => {\n    const product = await apos.http.patch(`/api/v1/product/${advisoryLockTestId}`, {\n      jar,\n      body: {\n        _advisoryLock: {\n          tabId: 'pdq',\n          lock: false\n        },\n        title: 'Advisory Test Patched Again'\n      }\n    });\n    assert(product.title === 'Advisory Test Patched Again');\n  });","file":"pieces.js","skipped":false,"dir":"test"},{"name":"can relock with the first context id after unlocking","suites":["Pieces"],"updatePoint":{"line":946,"column":58,"index":29396},"line":946,"code":"  it('can relock with the first context id after unlocking', async () => {\n    const doc = await apos.http.patch(`/api/v1/product/${advisoryLockTestId}`, {\n      jar,\n      body: {\n        _advisoryLock: {\n          tabId: 'xyz',\n          lock: true\n        }\n      }\n    });\n    assert(doc.title === 'Advisory Test Patched Again');\n  });","file":"pieces.js","skipped":false,"dir":"test"},{"name":"should be able to log in as second user","suites":["Pieces"],"updatePoint":{"line":959,"column":45,"index":29735},"line":959,"code":"  it('should be able to log in as second user', async () => {\n    jar2 = apos.http.jar(); // establish session\n\n    let page = await apos.http.get('/', {\n      jar: jar2\n    });\n    assert(page.match(/logged out/)); // Log in\n\n    await apos.http.post('/api/v1/@apostrophecms/login/login', {\n      body: {\n        username: 'admin2',\n        password: 'admin2',\n        session: true\n      },\n      jar: jar2\n    }); // Confirm login\n\n    page = await apos.http.get('/', {\n      jar: jar2\n    });\n    assert(page.match(/logged in/));\n  });","file":"pieces.js","skipped":false,"dir":"test"},{"name":"second user with a distinct tabId gets an appropriate error specifying who has the lock","suites":["Pieces"],"updatePoint":{"line":981,"column":93,"index":30323},"line":981,"code":"  it('second user with a distinct tabId gets an appropriate error specifying who has the lock', async () => {\n    try {\n      await apos.http.patch(`/api/v1/product/${advisoryLockTestId}`, {\n        jar: jar2,\n        body: {\n          _advisoryLock: {\n            tabId: 'nbc',\n            lock: true\n          }\n        }\n      });\n      assert(false);\n    } catch (e) {\n      assert(e.status === 409);\n      assert(e.body.name === 'locked');\n      assert(!e.body.data.me);\n      assert(e.body.data.username === 'admin');\n    }\n  });","file":"pieces.js","skipped":false,"dir":"test"},{"name":"can log out to destroy a session","suites":["Pieces"],"updatePoint":{"line":1000,"column":38,"index":30804},"line":1000,"code":"  it('can log out to destroy a session', async () => {\n    await apos.http.post('/api/v1/@apostrophecms/login/logout', {\n      followAllRedirects: true,\n      jar\n    });\n    await apos.http.post('/api/v1/@apostrophecms/login/logout', {\n      followAllRedirects: true,\n      jar: jar2\n    });\n  });","file":"pieces.js","skipped":false,"dir":"test"},{"name":"cannot POST a product with a logged-out cookie jar","suites":["Pieces"],"updatePoint":{"line":1010,"column":56,"index":31121},"line":1010,"code":"  it('cannot POST a product with a logged-out cookie jar', async () => {\n    try {\n      await apos.http.post('/api/v1/product', {\n        body: {\n          title: 'Fake Product After Logout',\n          body: {\n            metaType: 'area',\n            items: [{\n              metaType: 'widget',\n              type: '@apostrophecms/rich-text',\n              id: cuid(),\n              content: '<p>This is fake</p>'\n            }]\n          }\n        },\n        jar\n      });\n      assert(false);\n    } catch (e) {\n      assert(e.status === 403);\n    }\n  });","file":"pieces.js","skipped":false,"dir":"test"},{"name":"should be able to log in as admin and get a bearer token","suites":["Pieces"],"updatePoint":{"line":1034,"column":62,"index":31722},"line":1034,"code":"  it('should be able to log in as admin and get a bearer token', async () => {\n    // Log in\n    const response = await apos.http.post('/api/v1/@apostrophecms/login/login', {\n      body: {\n        username: 'admin',\n        password: 'admin'\n      }\n    });\n    assert(response.token);\n    token = response.token;\n  });","file":"pieces.js","skipped":false,"dir":"test"},{"name":"can POST a product with the bearer token","suites":["Pieces"],"updatePoint":{"line":1045,"column":46,"index":32026},"line":1045,"code":"  it('can POST a product with the bearer token', async () => {\n    const response = await apos.http.post('/api/v1/product', {\n      body: {\n        title: 'Bearer Token Product',\n        visibility: 'loginRequired',\n        slug: 'bearer-token-product',\n        body: {\n          metaType: 'area',\n          items: [{\n            metaType: 'widget',\n            type: '@apostrophecms/rich-text',\n            id: cuid(),\n            content: '<p>This is a bearer token thing</p>'\n          }]\n        }\n      },\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    assert(response);\n    assert(response._id);\n    assert(response.body);\n    assert(response.title === 'Bearer Token Product');\n    assert(response.slug === 'bearer-token-product');\n    assert(response.type === 'product');\n    bearerProductId = response._id;\n  });","file":"pieces.js","skipped":false,"dir":"test"},{"name":"can GET a loginRequired product with the bearer token","suites":["Pieces"],"updatePoint":{"line":1073,"column":59,"index":32891},"line":1073,"code":"  it('can GET a loginRequired product with the bearer token', async () => {\n    const response = await apos.http.get(`/api/v1/product/${bearerProductId}`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    assert(response);\n    assert(response.title === 'Bearer Token Product');\n  });","file":"pieces.js","skipped":false,"dir":"test"},{"name":"can log out to destroy a bearer token","suites":["Pieces"],"updatePoint":{"line":1082,"column":43,"index":33189},"line":1082,"code":"  it('can log out to destroy a bearer token', async () => {\n    return apos.http.post('/api/v1/@apostrophecms/login/logout', {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n  });","file":"pieces.js","skipped":false,"dir":"test"},{"name":"cannot GET a loginRequired product with a destroyed bearer token","suites":["Pieces"],"updatePoint":{"line":1089,"column":70,"index":33423},"line":1089,"code":"  it('cannot GET a loginRequired product with a destroyed bearer token', async () => {\n    try {\n      await apos.http.get(`/api/v1/product/${bearerProductId}`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      assert(false);\n    } catch (e) {\n      assert(e.status === 401);\n    }\n  });","file":"pieces.js","skipped":false,"dir":"test"},{"name":"can POST a product with the api key","suites":["Pieces"],"updatePoint":{"line":1102,"column":41,"index":33745},"line":1102,"code":"  it('can POST a product with the api key', async () => {\n    const response = await apos.http.post('/api/v1/product', {\n      body: {\n        title: 'API Key Product',\n        visibility: 'loginRequired',\n        slug: 'api-key-product',\n        body: {\n          metaType: 'area',\n          items: [{\n            metaType: 'widget',\n            type: '@apostrophecms/rich-text',\n            id: cuid(),\n            content: '<p>This is an api key thing</p>'\n          }]\n        }\n      },\n      headers: {\n        Authorization: `ApiKey ${apiKey}`\n      }\n    });\n    assert(response);\n    assert(response._id);\n    assert(response.body);\n    assert(response.title === 'API Key Product');\n    assert(response.slug === 'api-key-product');\n    assert(response.type === 'product');\n    apiKeyProductId = response._id;\n  });","file":"pieces.js","skipped":false,"dir":"test"},{"name":"can GET a loginRequired product with the api key","suites":["Pieces"],"updatePoint":{"line":1130,"column":54,"index":34582},"line":1130,"code":"  it('can GET a loginRequired product with the api key', async () => {\n    const response = await apos.http.get(`/api/v1/product/${apiKeyProductId}`, {\n      headers: {\n        Authorization: `ApiKey ${apiKey}`\n      }\n    });\n    assert(response);\n    assert(response.title === 'API Key Product');\n  });","file":"pieces.js","skipped":false,"dir":"test"},{"name":"can insert a resume with an attachment","suites":["Pieces"],"updatePoint":{"line":1139,"column":44,"index":34877},"line":1139,"code":"  it('can insert a resume with an attachment', async () => {\n    const formData = new FormData();\n    formData.append('file', fs.createReadStream(path.join(__dirname, '/public/static-test.txt'))); // Make an async request to upload the image.\n\n    const attachment = await apos.http.post('/api/v1/@apostrophecms/attachment/upload', {\n      headers: {\n        Authorization: `ApiKey ${apiKey}`\n      },\n      body: formData\n    });\n    const resume = await apos.http.post('/api/v1/resume', {\n      headers: {\n        Authorization: `ApiKey ${apiKey}`\n      },\n      body: {\n        title: 'Jane Doe',\n        attachment\n      }\n    });\n    assert(resume);\n    assert(resume.title === 'Jane Doe');\n    assert(resume.attachment._url);\n    assert(fs.readFileSync(path.join(__dirname, 'public', resume.attachment._url), 'utf8') === fs.readFileSync(path.join(__dirname, '/public/static-test.txt'), 'utf8'));\n  });","file":"pieces.js","skipped":false,"dir":"test"},{"name":"should convert a piece keeping only the present fields","suites":["Pieces"],"updatePoint":{"line":1163,"column":60,"index":35801},"line":1163,"code":"  it('should convert a piece keeping only the present fields', async () => {\n    const req = apos.task.getReq();\n    const inputPiece = {\n      title: 'new product name'\n    };\n    const existingPiece = {\n      color: 'red'\n    };\n    await apos.modules.product.convert(req, inputPiece, existingPiece, {\n      presentFieldsOnly: true\n    });\n    assert(Object.keys(existingPiece).length === 2);\n    assert(existingPiece.title === 'new product name');\n    assert(existingPiece.color === 'red');\n  });","file":"pieces.js","skipped":false,"dir":"test"},{"name":"should exist on the apos.util object","suites":["Recursion Guard"],"updatePoint":{"line":13,"column":42,"index":283},"line":13,"code":"  it('should exist on the apos.util object', async () => {\n    apos = await t.create({\n      root: module,\n      modules: {\n        product: {\n          options: {\n            alias: 'product'\n          },\n          extend: '@apostrophecms/piece-type',\n          fields: {\n            add: {\n              _articles: {\n                type: 'relationshipReverse',\n                withType: 'article'\n              }\n            }\n          }\n        },\n        article: {\n          options: {\n            alias: 'article'\n          },\n          extend: '@apostrophecms/piece-type',\n          fields: {\n            add: {\n              _products: {\n                type: 'relationship',\n                withType: 'product'\n              },\n              main: {\n                type: 'area',\n                widgets: {\n                  article: {}\n                }\n              }\n            }\n          }\n        },\n        'article-widget': {\n          extend: '@apostrophecms/widget-type',\n          options: {\n            label: 'Article'\n          },\n          fields: {\n            add: {\n              _articles: {\n                type: 'relationship',\n                withType: 'article'\n              }\n            }\n          }\n        },\n        'scary-article-widget': {\n          extend: '@apostrophecms/widget-type',\n          options: {\n            label: 'Scary Article',\n            neverLoadSelf: false\n          },\n          fields: {\n            add: {\n              _articles: {\n                type: 'relationship',\n                withType: 'article'\n              }\n            }\n          }\n        },\n        'product-widget': {\n          extend: '@apostrophecms/widget-type',\n          options: {\n            label: 'Product'\n          },\n          fields: {\n            add: {\n              _products: {\n                type: 'relationship',\n                withType: 'product'\n              }\n            }\n          }\n        },\n        '@apostrophecms/page': {\n          options: {\n            park: [{\n              slug: '/recursion-test-page',\n              type: 'recursion-test-page',\n              title: 'Recursion Test Page',\n              parkedId: 'recursion-test-page'\n            }],\n            types: [{\n              name: '@apostrophecms/home-page',\n              label: 'Home'\n            }, {\n              name: 'recursion-test-page',\n              label: 'Recursion Test Page'\n            }]\n          }\n        },\n        'recursion-test-page': {\n          extend: '@apostrophecms/page-type'\n        }\n      }\n    });\n    assert(apos.util.recursionGuard);\n  });","file":"recursionGuard.js","skipped":false,"dir":"test"},{"name":"should create a stack as it goes and stop without executing depth 50","suites":["Recursion Guard"],"updatePoint":{"line":118,"column":74,"index":2931},"line":118,"code":"  it('should create a stack as it goes and stop without executing depth 50', async () => {\n    let depth = 0;\n    let depth49First = true;\n    const req = apos.task.getReq();\n    let warnings = ''; // Capture output of util.warn so we can verify there was a warning\n\n    apos.util.warn = function (...args) {\n      warnings += args.join('\\n');\n    };\n\n    const result = await load();\n    assert(warnings.match(/review the stack to find the problem/));\n    assert(warnings.match(/test/)); // Guarded functions not directly blocked by the depth rule should\n    // return their own result\n\n    assert(result === 'result');\n    assert(depth === 49);\n    assert(!req.aposStack.length);\n\n    async function load() {\n      return apos.util.recursionGuard(req, 'test', async () => {\n        depth++;\n        assert(req.aposStack);\n        assert(req.aposStack.length === depth);\n        const nestedResult = await load(); // Careful, \"depth\" stays at 49 as we return up the stack\n\n        if (depth === 49 && depth49First === true) {\n          // Guarded functions directly blocked by the depth rule\n          // should return undefined\n          assert(nestedResult === undefined);\n          depth49First = false;\n        } else {\n          // Other invocations should return the result of the inner function\n          assert(nestedResult === 'result');\n        }\n\n        return 'result';\n      });\n    }\n  });","file":"recursionGuard.js","skipped":false,"dir":"test"},{"name":"should immediately stop runaway self-references among widgets by default","suites":["Recursion Guard"],"updatePoint":{"line":158,"column":78,"index":4341},"line":158,"code":"  it('should immediately stop runaway self-references among widgets by default', async () => {\n    const req = apos.task.getReq();\n    const product = await apos.product.insert(req, {\n      title: 'Test Product'\n    });\n    const selfRefId = cuid();\n    await apos.article.insert(req, {\n      aposDocId: selfRefId,\n      title: 'Self Referential Article',\n      main: {\n        metaType: 'area',\n        _id: cuid(),\n        items: [{\n          metaType: 'widget',\n          type: 'article',\n          articlesIds: [selfRefId]\n        }, {\n          metaType: 'widget',\n          type: 'product',\n          productsIds: [product._id]\n        }]\n      }\n    });\n    const article = await apos.article.find(req, {\n      aposDocId: selfRefId\n    }).toObject();\n    assert(article); // Sanity check that we didn't kill all widget loaders: check\n    // the product widget\n\n    assert(article.main.items[1]._products[0]); // Now dig into the recursive article widget\n\n    assert(article.main.items[0]); // We do go down one level, because it's not recursing within the\n    // widget loader yet on the first go\n\n    assert(article.main.items[0]._articles);\n    assert(article.main.items[0]._articles[0]); // However there should be no second go!\n\n    assert(article.main.items[0]._articles[0].main);\n    assert(article.main.items[0]._articles[0].main.items[0]);\n    assert(!article.main.items[0]._articles[0].main.items[0]._articles);\n  });","file":"recursionGuard.js","skipped":false,"dir":"test"},{"name":"should eventually stop runaway self-references among widgets that use neverLoadSelf: false","suites":["Recursion Guard"],"updatePoint":{"line":199,"column":96,"index":5793},"line":199,"code":"  it('should eventually stop runaway self-references among widgets that use neverLoadSelf: false', async () => {\n    const req = apos.task.getReq();\n    const selfRefId = cuid();\n    await apos.article.insert(req, {\n      aposDocId: selfRefId,\n      title: 'Very Self Referential Article',\n      main: {\n        metaType: 'area',\n        _id: cuid(),\n        items: [{\n          metaType: 'widget',\n          type: 'scary-article',\n          articlesIds: [selfRefId]\n        }]\n      }\n    });\n    let warnings = ''; // Capture output of util.warn so we can verify there was a warning\n\n    apos.util.warn = function (...args) {\n      warnings += args.join('\\n');\n    };\n\n    const article = await apos.article.find(req, {\n      aposDocId: selfRefId\n    }).toObject(); // Verify the stack shown in the warning references the right bits\n\n    assert(warnings.match(/widget:scary-article/));\n    assert(warnings.match(/relationship:article/)); // If we get this far we successfully stopped the recursion at some depth\n\n    assert(article); // ... But verify some recursion did take place\n\n    assert(article.main.items[0]);\n    assert(article.main.items[0]._articles[0]);\n    assert(article.main.items[0]._articles[0].main.items[0]._articles[0]);\n  });","file":"recursionGuard.js","skipped":false,"dir":"test"},{"name":"should eventually stop runaway self-references in async components","suites":["Recursion Guard"],"updatePoint":{"line":234,"column":72,"index":7018},"line":234,"code":"  it('should eventually stop runaway self-references in async components', async () => {\n    let warnings = ''; // Capture output of util.warn so we can verify there was a warning\n\n    apos.util.warn = function (...args) {\n      warnings += args.join('\\n');\n    };\n\n    const html = await apos.http.get('/recursion-test-page');\n    assert(warnings.match(/component:recursion-test-page:test/)); // If we got this far the recursion was eventually stopped\n\n    assert(html.match(/Sing to me, Oh Muse\\./));\n    assert(html.match(/At depth 0/));\n    assert(html.match(/At depth 48/));\n    assert(!html.match(/At depth 49/));\n    assert(!html.match(/Object/));\n  });","file":"recursionGuard.js","skipped":false,"dir":"test"},{"name":"should initialize apos","suites":["REST API routing"],"updatePoint":{"line":12,"column":28,"index":262},"line":12,"code":"  it('should initialize apos', async function () {\n    apos = await t.create({\n      root: module,\n      modules: {\n        'rest-test': {\n          restApiRoutes(self) {\n            return {\n              getAll(req) {\n                return {\n                  action: 'getAll'\n                };\n              },\n\n              getOne(req, _id) {\n                return {\n                  action: 'getOne',\n                  _id\n                };\n              },\n\n              post(req) {\n                return {\n                  action: 'post',\n                  data: req.body\n                };\n              },\n\n              delete(req, _id) {\n                return {\n                  action: 'delete',\n                  _id\n                };\n              },\n\n              patch(req, _id) {\n                return {\n                  action: 'patch',\n                  _id\n                };\n              },\n\n              put(req, _id) {\n                return {\n                  action: 'put',\n                  _id\n                };\n              }\n\n            };\n          }\n\n        }\n      }\n    });\n  });","file":"restApiRoutes.js","skipped":false,"dir":"test"},{"name":"should respond properly to getAll","suites":["REST API routing"],"updatePoint":{"line":67,"column":39,"index":1408},"line":67,"code":"  it('should respond properly to getAll', async () => {\n    jar = apos.http.jar();\n    const body = await apos.http.get('/api/v1/rest-test', {\n      // Establish CSRF cookie in jar\n      jar\n    }); // We're just testing the routing, we don't actually get back a list of things,\n    // we'll test that with pieces\n\n    assert(body.action === 'getAll');\n  });","file":"restApiRoutes.js","skipped":false,"dir":"test"},{"name":"should respond properly to post","suites":["REST API routing"],"updatePoint":{"line":77,"column":37,"index":1765},"line":77,"code":"  it('should respond properly to post', async () => {\n    const body = await apos.http.post('/api/v1/rest-test', {\n      // Use the cookie jar because CSRF tokens are required\n      jar\n    });\n    assert(body.action === 'post');\n  });","file":"restApiRoutes.js","skipped":false,"dir":"test"},{"name":"should respond properly to delete","suites":["REST API routing"],"updatePoint":{"line":84,"column":39,"index":2003},"line":84,"code":"  it('should respond properly to delete', async () => {\n    const body = await apos.http.delete('/api/v1/rest-test/1000', {\n      jar\n    });\n    assert(body.action === 'delete');\n    assert(body._id === '1000');\n  });","file":"restApiRoutes.js","skipped":false,"dir":"test"},{"name":"should respond properly to patch","suites":["REST API routing"],"updatePoint":{"line":91,"column":38,"index":2221},"line":91,"code":"  it('should respond properly to patch', async () => {\n    const body = await apos.http.patch('/api/v1/rest-test/1000', {\n      jar\n    });\n    assert(body.action === 'patch');\n    assert(body._id === '1000');\n  });","file":"restApiRoutes.js","skipped":false,"dir":"test"},{"name":"should respond properly to put","suites":["REST API routing"],"updatePoint":{"line":98,"column":36,"index":2435},"line":98,"code":"  it('should respond properly to put', async () => {\n    const body = await apos.http.put('/api/v1/rest-test/1000', {\n      jar\n    });\n    assert(body.action === 'put');\n    assert(body._id === '1000');\n  });","file":"restApiRoutes.js","skipped":false,"dir":"test"},{"name":"should respond properly to getOne","suites":["REST API routing"],"updatePoint":{"line":105,"column":39,"index":2648},"line":105,"code":"  it('should respond properly to getOne', async () => {\n    const body = await apos.http.get('/api/v1/rest-test/1000', {\n      jar\n    });\n    assert(body.action === 'getOne');\n    assert(body._id === '1000');\n  });","file":"restApiRoutes.js","skipped":false,"dir":"test"},{"name":"basic reverse relationship query works","suites":["Basic reverse relationships"],"updatePoint":{"line":15,"column":44,"index":555},"line":15,"code":"  it('basic reverse relationship query works', async function () {\n    let apos;\n\n    try {\n      apos = await t.create({\n        root: module,\n        modules: {\n          product: {\n            options: {\n              alias: 'product'\n            },\n            extend: '@apostrophecms/piece-type',\n            fields: {\n              add: {\n                _salespeople: {\n                  type: 'relationship',\n                  withType: 'salesperson'\n                }\n              }\n            }\n          },\n          salesperson: {\n            options: {\n              alias: 'salesperson'\n            },\n            extend: '@apostrophecms/piece-type',\n            fields: {\n              add: {\n                _products: {\n                  type: 'relationshipReverse',\n                  withType: 'product',\n                  reverseOf: '_salespeople'\n                }\n              }\n            }\n          }\n        }\n      });\n      const req = apos.task.getReq();\n      const salesperson = await apos.salesperson.insert(req, {\n        title: 'Willie Loman'\n      });\n      await apos.salesperson.insert(req, {\n        title: 'Bernie Sanders'\n      });\n      await apos.product.insert(req, {\n        title: 'Soap',\n        _salespeople: [salesperson]\n      });\n      await apos.product.insert(req, {\n        title: 'Rope'\n      });\n      const fetched = await apos.salesperson.find(req, {\n        title: 'Willie Loman'\n      }).toObject();\n      assert(fetched);\n      assert.strictEqual(fetched.title, 'Willie Loman');\n      assert(fetched._products);\n      assert.strictEqual(fetched._products.length, 1);\n      assert.strictEqual(fetched._products[0].title, 'Soap');\n    } finally {\n      if (apos) {\n        await t.destroy(apos);\n      }\n    }\n  });","file":"reverse-relationship.js","skipped":false,"dir":"test"},{"name":"basic reverse relationship query works in the presence of an extra relationship with the types configured in an unexpected order","suites":["Reverse relationships plus an extra relationship"],"updatePoint":{"line":84,"column":134,"index":2528},"line":84,"code":"  it('basic reverse relationship query works in the presence of an extra relationship with the types configured in an unexpected order', async function () {\n    let apos;\n\n    try {\n      apos = await t.create({\n        root: module,\n        modules: {\n          salesperson: {\n            options: {\n              alias: 'salesperson'\n            },\n            extend: '@apostrophecms/piece-type',\n            fields: {\n              add: {\n                _products: {\n                  type: 'relationshipReverse',\n                  withType: 'product',\n                  reverseOf: '_salespeople'\n                }\n              }\n            }\n          },\n          location: {\n            options: {\n              alias: 'location'\n            },\n            extend: '@apostrophecms/piece-type'\n          },\n          product: {\n            options: {\n              alias: 'product'\n            },\n            extend: '@apostrophecms/piece-type',\n            fields: {\n              add: {\n                _salespeople: {\n                  type: 'relationship',\n                  withType: 'salesperson'\n                },\n                _location: {\n                  type: 'relationship',\n                  withType: 'location'\n                }\n              }\n            }\n          }\n        }\n      });\n      const req = apos.task.getReq();\n      const salesperson = await apos.salesperson.insert(req, {\n        title: 'Willie Loman'\n      });\n      await apos.salesperson.insert(req, {\n        title: 'Bernie Sanders'\n      });\n      await apos.product.insert(req, {\n        title: 'Soap',\n        _salespeople: [salesperson]\n      });\n      await apos.product.insert(req, {\n        title: 'Rope'\n      });\n      const fetched = await apos.salesperson.find(req, {\n        title: 'Willie Loman'\n      }).toObject();\n      const soap = await apos.product.find(req, {\n        title: 'Soap'\n      }).toObject();\n      assert(fetched);\n      assert.strictEqual(fetched.title, 'Willie Loman');\n      assert(fetched._products);\n      assert.strictEqual(fetched._products.length, 1);\n      assert.strictEqual(fetched._products[0].title, 'Soap');\n      assert.strictEqual(soap.title, 'Soap');\n      assert.strictEqual(soap._salespeople[0].title, 'Willie Loman');\n    } finally {\n      if (apos) {\n        await t.destroy(apos);\n      }\n    }\n  });","file":"reverse-relationship.js","skipped":false,"dir":"test"},{"name":"test modules exist","suites":["Schema builders"],"updatePoint":{"line":18,"column":24,"index":338},"line":18,"code":"  it('test modules exist', async () => {\n    apos = await t.create({\n      root: module,\n      modules: {\n        cats: {\n          extend: '@apostrophecms/piece-type',\n          fields: {\n            add: {\n              flavor: {\n                type: 'select',\n                label: 'Flavor',\n                choices: [{\n                  label: 'Grape',\n                  value: 'grape'\n                }, {\n                  label: 'Cherry',\n                  value: 'cherry'\n                }, {\n                  label: 'Mint',\n                  value: 'mint'\n                }]\n              }\n            }\n          },\n          options: {\n            name: 'cat',\n            label: 'Cat',\n            alias: 'cats'\n          }\n        },\n        people: {\n          extend: '@apostrophecms/piece-type',\n          options: {\n            name: 'person',\n            label: 'Person',\n            alias: 'people'\n          },\n          fields: {\n            add: {\n              _cats: {\n                type: 'relationship',\n                idsStorage: 'catsIds',\n                label: 'Cats',\n                withType: 'cat'\n              },\n              _favorites: {\n                type: 'relationship',\n                max: 1,\n                idsStorage: 'favoriteIds',\n                label: 'Favorites',\n                withType: 'cat'\n              }\n            }\n          }\n        }\n      }\n    });\n    assert(apos.schema);\n    assert(apos.cats);\n    assert(apos.people);\n    apos.argv._ = [];\n    let i;\n\n    for (i = 0; i < 11; i++) {\n      cats[i] = {};\n      cats[i].title = 'Cat ' + i;\n      cats[i].i = i;\n      people[i] = {};\n      people[i].i = i;\n      people[i].title = 'Person ' + i;\n    }\n\n    cats[0].flavor = 'cherry';\n    cats[1].flavor = 'mint';\n    cats[4].flavor = 'mint';\n    const req = apos.task.getReq();\n    await apos.doc.db.deleteMany({\n      type: 'cat'\n    });\n\n    for (i = 0; i < cats.length; i++) {\n      cats[i] = await apos.cats.insert(req, cats[i]);\n    }\n\n    for (i = 0; i < people.length; i++) {\n      const person = people[i]; // person 10 has no favorite cat\n\n      if (i < 10) {\n        person.favoriteIds = [cats[i].aposDocId];\n      }\n\n      person.catsIds = [];\n      let j; // person 10 is allergic to cats\n\n      if (i < 10) {\n        for (j = 0; j < i; j++) {\n          person.catsIds.push(cats[j].aposDocId);\n        }\n      }\n\n      people[i] = await apos.people.insert(req, person);\n    }\n  });","file":"schemaBuilders.js","skipped":false,"dir":"test"},{"name":"builder for _cats exists","suites":["Schema builders"],"updatePoint":{"line":121,"column":30,"index":2812},"line":121,"code":"  it('builder for _cats exists', async () => {\n    const req = apos.task.getReq();\n    const query = apos.people.find(req);\n    assert(query._cats);\n  });","file":"schemaBuilders.js","skipped":false,"dir":"test"},{"name":"builder for _cats can select people with a specified cat","suites":["Schema builders"],"updatePoint":{"line":126,"column":62,"index":2999},"line":126,"code":"  it('builder for _cats can select people with a specified cat', async () => {\n    const req = apos.task.getReq();\n    const query = apos.people.find(req); // Four people should have cat 5 (because their i is greater than 5, see\n    // the sample data generator above)\n\n    query._cats(cats[5].aposDocId);\n\n    const people = await query.toArray();\n    assert(people.length === 4);\n  });","file":"schemaBuilders.js","skipped":false,"dir":"test"},{"name":"builder for _cats can select people with any of three cats via array","suites":["Schema builders"],"updatePoint":{"line":136,"column":74,"index":3399},"line":136,"code":"  it('builder for _cats can select people with any of three cats via array', async () => {\n    const req = apos.task.getReq();\n    const query = apos.people.find(req);\n\n    query._cats([cats[0]._id, cats[1]._id, cats[2]._id]);\n\n    const people = await query.toArray(); // Everybody except person 0 has the first cat\n\n    assert(people.length === 9);\n  });","file":"schemaBuilders.js","skipped":false,"dir":"test"},{"name":"_catsAnd builder can select people with all three cats","suites":["Schema builders"],"updatePoint":{"line":146,"column":60,"index":3742},"line":146,"code":"  it('_catsAnd builder can select people with all three cats', async () => {\n    const req = apos.task.getReq();\n    const query = apos.people.find(req);\n\n    query._catsAnd([cats[0]._id, cats[1]._id, cats[2]._id]);\n\n    const people = await query.toArray(); // Only people 3-9 have cat 2\n\n    assert(people.length === 7);\n  });","file":"schemaBuilders.js","skipped":false,"dir":"test"},{"name":"builder for _cats can select sad people with no cat","suites":["Schema builders"],"updatePoint":{"line":156,"column":57,"index":4068},"line":156,"code":"  it('builder for _cats can select sad people with no cat', async () => {\n    const req = apos.task.getReq();\n    const query = apos.people.find(req);\n\n    query._cats('none');\n\n    const _people = await query.toArray(); // Persons 0 and 10 have no cats\n\n\n    assert(_people.length === 2);\n\n    const ids = _.map(_people, '_id');\n\n    assert(_.includes(ids, people[0]._id));\n    assert(_.includes(ids, people[10]._id));\n  });","file":"schemaBuilders.js","skipped":false,"dir":"test"},{"name":"when not used builder for _cats has no effect","suites":["Schema builders"],"updatePoint":{"line":172,"column":51,"index":4488},"line":172,"code":"  it('when not used builder for _cats has no effect', async function () {\n    const req = apos.task.getReq();\n    const query = apos.people.find(req);\n    const people = await query.toArray();\n    assert(people.length === 11);\n  });","file":"schemaBuilders.js","skipped":false,"dir":"test"},{"name":"can obtain choices for _cats","suites":["Schema builders"],"updatePoint":{"line":178,"column":34,"index":4704},"line":178,"code":"  it('can obtain choices for _cats', async function () {\n    const req = apos.task.getReq();\n    const query = apos.people.find(req);\n    const cats = await query.toChoices('_cats'); // Only the cats that are actually somebody's cat come up\n\n    assert(cats.length === 9);\n    assert(cats[0].value);\n    assert(cats[0].label);\n    assert(cats[0].slug);\n  });","file":"schemaBuilders.js","skipped":false,"dir":"test"},{"name":"builder for cats exists","suites":["Schema builders"],"updatePoint":{"line":188,"column":29,"index":5058},"line":188,"code":"  it('builder for cats exists', function () {\n    const req = apos.task.getReq();\n    const query = apos.people.find(req);\n    assert(query.cats);\n  });","file":"schemaBuilders.js","skipped":false,"dir":"test"},{"name":"builder for cats can select people with a specified cat (by slug)","suites":["Schema builders"],"updatePoint":{"line":193,"column":71,"index":5253},"line":193,"code":"  it('builder for cats can select people with a specified cat (by slug)', async function () {\n    const req = apos.task.getReq();\n    const query = apos.people.find(req); // Four people should have cat 5 (because their i is greater than 5, see\n    // the sample data generator above)\n\n    query.cats(cats[5].slug);\n    const people = await query.toArray();\n    assert(people.length === 4);\n  });","file":"schemaBuilders.js","skipped":false,"dir":"test"},{"name":"builder for cats can select people with any of three cats via array (by slug)","suites":["Schema builders"],"updatePoint":{"line":202,"column":83,"index":5661},"line":202,"code":"  it('builder for cats can select people with any of three cats via array (by slug)', async function () {\n    const req = apos.task.getReq();\n    const query = apos.people.find(req);\n    query.cats([cats[0].slug, cats[1].slug, cats[2].slug]);\n    const people = await query.toArray(); // Everybody except person 0 has the first cat\n\n    assert(people.length === 9);\n  });","file":"schemaBuilders.js","skipped":false,"dir":"test"},{"name":"catsAnd builder can select people with all three cats (by slug)","suites":["Schema builders"],"updatePoint":{"line":210,"column":69,"index":6019},"line":210,"code":"  it('catsAnd builder can select people with all three cats (by slug)', async function () {\n    const req = apos.task.getReq();\n    const query = apos.people.find(req);\n    query.catsAnd([cats[0].slug, cats[1].slug, cats[2].slug]);\n    const people = await query.toArray(); // Only people 3-9 have cat 2\n\n    assert(people.length === 7);\n  });","file":"schemaBuilders.js","skipped":false,"dir":"test"},{"name":"builder for cats can select sad people with no cat (by slug)","suites":["Schema builders"],"updatePoint":{"line":218,"column":66,"index":6360},"line":218,"code":"  it('builder for cats can select sad people with no cat (by slug)', async function () {\n    const req = apos.task.getReq();\n    const query = apos.people.find(req);\n    query.cats('none');\n\n    const _people = await query.toArray(); // Persons 0 and 10 have no cats\n\n\n    assert(_people.length === 2);\n\n    const ids = _.map(_people, '_id');\n\n    assert(_.includes(ids, people[0]._id));\n    assert(_.includes(ids, people[10]._id));\n  });","file":"schemaBuilders.js","skipped":false,"dir":"test"},{"name":"when not used builder for cats (by slug) has no effect","suites":["Schema builders"],"updatePoint":{"line":233,"column":60,"index":6793},"line":233,"code":"  it('when not used builder for cats (by slug) has no effect', async function () {\n    const req = apos.task.getReq();\n    const query = apos.people.find(req);\n    const people = await query.toArray();\n    assert(people.length === 11);\n  });","file":"schemaBuilders.js","skipped":false,"dir":"test"},{"name":"can obtain choices for cats (by slug)","suites":["Schema builders"],"updatePoint":{"line":239,"column":43,"index":7018},"line":239,"code":"  it('can obtain choices for cats (by slug)', async function () {\n    const req = apos.task.getReq();\n    const query = apos.people.find(req);\n    const cats = await query.toChoices('cats'); // Only the cats that are actually somebody's cat come up\n\n    assert(cats.length === 9);\n    assert(cats[0].value);\n    assert(cats[0].label);\n    assert(cats[0].value === 'cat-0');\n  });","file":"schemaBuilders.js","skipped":false,"dir":"test"},{"name":"builder for _favorites exists","suites":["Schema builders"],"updatePoint":{"line":249,"column":35,"index":7390},"line":249,"code":"  it('builder for _favorites exists', function () {\n    const req = apos.task.getReq();\n    const query = apos.people.find(req);\n    assert(query._favorites);\n  });","file":"schemaBuilders.js","skipped":false,"dir":"test"},{"name":"builder for _favorites can select people with a specified favorite cat","suites":["Schema builders"],"updatePoint":{"line":254,"column":76,"index":7596},"line":254,"code":"  it('builder for _favorites can select people with a specified favorite cat', async function () {\n    const req = apos.task.getReq();\n    const query = apos.people.find(req); // Only one person has each favorite\n\n    query._favorites(cats[3]._id);\n\n    const people = await query.toArray();\n    assert(people.length === 1);\n    assert(people[0].i === 3);\n  });","file":"schemaBuilders.js","skipped":false,"dir":"test"},{"name":"builder for _favorites can use array syntax","suites":["Schema builders"],"updatePoint":{"line":264,"column":49,"index":7931},"line":264,"code":"  it('builder for _favorites can use array syntax', async function () {\n    const req = apos.task.getReq();\n    const query = apos.people.find(req);\n\n    query._favorites([cats[7]._id]);\n\n    const people = await query.toArray(); // Only person 0 prefers the first cat\n\n    assert(people.length === 1);\n    assert(people[0].i === 7);\n  });","file":"schemaBuilders.js","skipped":false,"dir":"test"},{"name":"builder for _favorites can select sad people who dislike cats","suites":["Schema builders"],"updatePoint":{"line":275,"column":67,"index":8289},"line":275,"code":"  it('builder for _favorites can select sad people who dislike cats', async function () {\n    const req = apos.task.getReq();\n    const query = apos.people.find(req);\n\n    query._favorites('none');\n\n    const people = await query.toArray(); // Only person 10 has no favorite cat\n\n    assert(people.length === 1);\n    assert(people[0].i === 10);\n  });","file":"schemaBuilders.js","skipped":false,"dir":"test"},{"name":"when not used builder for _favorites has no effect","suites":["Schema builders"],"updatePoint":{"line":286,"column":56,"index":8629},"line":286,"code":"  it('when not used builder for _favorites has no effect', async function () {\n    const req = apos.task.getReq();\n    const query = apos.people.find(req);\n    const people = await query.toArray();\n    assert(people.length === 11);\n  });","file":"schemaBuilders.js","skipped":false,"dir":"test"},{"name":"can obtain choices for _favorites","suites":["Schema builders"],"updatePoint":{"line":292,"column":39,"index":8850},"line":292,"code":"  it('can obtain choices for _favorites', async function () {\n    const req = apos.task.getReq();\n    const query = apos.people.find(req);\n    const cats = await query.toChoices('_favorites'); // Only the cats that are actually someone's favorite come up\n\n    assert(cats.length === 10);\n    assert(cats[0].value);\n    assert(cats[0].label);\n    assert(cats[0].slug);\n  });","file":"schemaBuilders.js","skipped":false,"dir":"test"},{"name":"builder for favorite (by slug) exists","suites":["Schema builders"],"updatePoint":{"line":302,"column":43,"index":9228},"line":302,"code":"  it('builder for favorite (by slug) exists', function () {\n    const req = apos.task.getReq();\n    const query = apos.people.find(req);\n    assert(query._favorites);\n  });","file":"schemaBuilders.js","skipped":false,"dir":"test"},{"name":"builder for favorite can select people with a specified favorite cat (by slug)","suites":["Schema builders"],"updatePoint":{"line":307,"column":84,"index":9442},"line":307,"code":"  it('builder for favorite can select people with a specified favorite cat (by slug)', async function () {\n    const req = apos.task.getReq();\n    const query = apos.people.find(req); // Only one person has each favorite\n\n    query.favorites(cats[3].slug);\n    const people = await query.toArray();\n    assert(people.length === 1);\n    assert(people[0].i === 3);\n  });","file":"schemaBuilders.js","skipped":false,"dir":"test"},{"name":"builder for favorite can select people with a specified favorite cat (by slug) plus a search without a refinalize crash","suites":["Schema builders"],"updatePoint":{"line":316,"column":125,"index":9852},"line":316,"code":"  it('builder for favorite can select people with a specified favorite cat (by slug) plus a search without a refinalize crash', async function () {\n    const req = apos.task.getReq();\n    const query = apos.people.find(req); // Only one person has each favorite\n\n    query.favorites(cats[3].slug);\n    const people = await query.search('person').toArray();\n    assert(people.length === 1);\n    assert(people[0].i === 3);\n  });","file":"schemaBuilders.js","skipped":false,"dir":"test"},{"name":"builder for favorite (by slug) can use array syntax","suites":["Schema builders"],"updatePoint":{"line":325,"column":57,"index":10211},"line":325,"code":"  it('builder for favorite (by slug) can use array syntax', async function () {\n    const req = apos.task.getReq();\n    const query = apos.people.find(req);\n    query.favorites([cats[7].slug]);\n    const people = await query.toArray(); // Only person 0 prefers the first cat\n\n    assert(people.length === 1);\n    assert(people[0].i === 7);\n  });","file":"schemaBuilders.js","skipped":false,"dir":"test"},{"name":"builder for favorite (by slug) can select sad people who dislike cats","suites":["Schema builders"],"updatePoint":{"line":334,"column":75,"index":10575},"line":334,"code":"  it('builder for favorite (by slug) can select sad people who dislike cats', async function () {\n    const req = apos.task.getReq();\n    const query = apos.people.find(req);\n    query.favorites('none');\n    const people = await query.toArray(); // Only person 10 has no favorite cat\n\n    assert(people.length === 1);\n    assert(people[0].i === 10);\n  });","file":"schemaBuilders.js","skipped":false,"dir":"test"},{"name":"when not used builder for favorite (by slug) has no effect","suites":["Schema builders"],"updatePoint":{"line":343,"column":64,"index":10920},"line":343,"code":"  it('when not used builder for favorite (by slug) has no effect', async function () {\n    const req = apos.task.getReq();\n    const query = apos.people.find(req);\n    const people = await query.toArray();\n    assert(people.length === 11);\n  });","file":"schemaBuilders.js","skipped":false,"dir":"test"},{"name":"can obtain choices for favorite (by slug)","suites":["Schema builders"],"updatePoint":{"line":349,"column":47,"index":11149},"line":349,"code":"  it('can obtain choices for favorite (by slug)', async function () {\n    const req = apos.task.getReq();\n    const query = apos.people.find(req);\n    const cats = await query.toChoices('favorites'); // Only the cats that are actually someone's favorite come up\n\n    assert(cats.length === 10);\n    assert(cats[0].value);\n    assert(cats[0].label);\n    assert(cats[0].value === 'cat-0');\n  });","file":"schemaBuilders.js","skipped":false,"dir":"test"},{"name":"builder for flavor exists","suites":["Schema builders"],"updatePoint":{"line":359,"column":31,"index":11527},"line":359,"code":"  it('builder for flavor exists', function () {\n    const req = apos.task.getReq();\n    const query = apos.cats.find(req);\n    assert(query.flavor);\n  });","file":"schemaBuilders.js","skipped":false,"dir":"test"},{"name":"builder for flavor can select cats of a specified flavor","suites":["Schema builders"],"updatePoint":{"line":364,"column":62,"index":11713},"line":364,"code":"  it('builder for flavor can select cats of a specified flavor', async function () {\n    const req = apos.task.getReq();\n    const query = apos.cats.find(req);\n    query.flavor('mint');\n    const cats = await query.toArray();\n    assert(cats.length === 2);\n    assert(_.find(cats, {\n      i: 1\n    }));\n    assert(_.find(cats, {\n      i: 4\n    }));\n  });","file":"schemaBuilders.js","skipped":false,"dir":"test"},{"name":"builder for flavor can use array syntax","suites":["Schema builders"],"updatePoint":{"line":377,"column":45,"index":12051},"line":377,"code":"  it('builder for flavor can use array syntax', async function () {\n    const req = apos.task.getReq();\n    const query = apos.cats.find(req);\n    query.flavor(['mint', 'cherry']);\n    const cats = await query.toArray();\n    assert(cats.length === 3);\n    assert(_.find(cats, {\n      i: 0\n    }));\n    assert(_.find(cats, {\n      i: 1\n    }));\n    assert(_.find(cats, {\n      i: 4\n    }));\n  });","file":"schemaBuilders.js","skipped":false,"dir":"test"},{"name":"when not used builder for flavor has no effect","suites":["Schema builders"],"updatePoint":{"line":393,"column":52,"index":12454},"line":393,"code":"  it('when not used builder for flavor has no effect', async function () {\n    const req = apos.task.getReq();\n    const query = apos.cats.find(req);\n    const cats = await query.toArray();\n    assert(cats.length === 11);\n  });","file":"schemaBuilders.js","skipped":false,"dir":"test"},{"name":"can obtain choices for flavor","suites":["Schema builders"],"updatePoint":{"line":399,"column":35,"index":12665},"line":399,"code":"  it('can obtain choices for flavor', async function () {\n    const req = apos.task.getReq();\n    const query = apos.cats.find(req);\n    const flavors = await query.toChoices('flavor'); // Only the flavors associated with at least one cat come up, in alpha order\n\n    assert(flavors.length === 2);\n    assert(flavors[0].value === 'cherry');\n    assert(flavors[0].label === 'Cherry');\n    assert(flavors[1].value === 'mint');\n    assert(flavors[1].label === 'Mint');\n  });","file":"schemaBuilders.js","skipped":false,"dir":"test"},{"name":"should be a property of the apos object","suites":["Schemas"],"updatePoint":{"line":155,"column":45,"index":2759},"line":155,"code":"  it('should be a property of the apos object', async () => {\n    apos = await t.create({\n      root: module\n    });\n    assert(apos.schema);\n    apos.argv._ = [];\n  });","file":"schemas.js","skipped":false,"dir":"test"},{"name":"should compose schemas correctly","suites":["Schemas"],"updatePoint":{"line":162,"column":38,"index":2922},"line":162,"code":"  it('should compose schemas correctly', function () {\n    const options = {\n      addFields: [{\n        name: 'name',\n        type: 'string',\n        label: 'Name'\n      }, {\n        name: 'address',\n        type: 'string',\n        label: 'Address',\n        textarea: true\n      }, {\n        name: 'variety',\n        type: 'select',\n        label: 'Variety',\n        choices: [{\n          value: 'candy',\n          label: 'Candy'\n        }, {\n          value: 'cheese',\n          label: 'Cheese'\n        }]\n      }],\n      removeFields: ['address'],\n      alterFields: function (schema) {\n        const variety = _.find(schema, {\n          name: 'variety'\n        });\n\n        assert(variety);\n        variety.choices.push({\n          value: 'record',\n          label: 'Record'\n        });\n      }\n    };\n    const schema = apos.schema.compose(options);\n    assert(schema.length === 2);\n    assert(schema[0].name === 'name');\n    assert(schema[1].name === 'variety');\n    assert(_.keys(schema[1].choices).length === 3);\n  });","file":"schemas.js","skipped":false,"dir":"test"},{"name":"should compose a schema for a complex real world case correctly","suites":["Schemas"],"updatePoint":{"line":204,"column":69,"index":3980},"line":204,"code":"  it('should compose a schema for a complex real world case correctly', function () {\n    const schema = apos.schema.compose(realWorldCase);\n    assert(schema);\n\n    const externalUrl = _.find(schema, {\n      name: 'externalUrl'\n    });\n\n    assert(externalUrl);\n    assert.strictEqual(externalUrl.group.name, 'otherFields');\n\n    const _newPage = _.find(schema, {\n      name: '_newPage'\n    });\n\n    assert(_newPage);\n    assert.strictEqual(_newPage.group.name, 'otherFields');\n  });","file":"schemas.js","skipped":false,"dir":"test"},{"name":"should error if a field is required and an empty value is submitted for a string field type","suites":["Schemas"],"updatePoint":{"line":222,"column":97,"index":4493},"line":222,"code":"  it('should error if a field is required and an empty value is submitted for a string field type', async () => {\n    const schema = apos.schema.compose({\n      addFields: [{\n        type: 'string',\n        name: 'name',\n        label: 'Name',\n        required: true\n      }]\n    });\n    assert(schema.length === 1);\n    const input = {\n      name: ''\n    };\n    await testSchemaError(schema, input, 'name', 'required');\n  });","file":"schemas.js","skipped":false,"dir":"test"},{"name":"should error if the value submitted is less than min length for a string field type","suites":["Schemas"],"updatePoint":{"line":237,"column":89,"index":4912},"line":237,"code":"  it('should error if the value submitted is less than min length for a string field type', async () => {\n    const schema = apos.schema.compose({\n      addFields: [{\n        type: 'string',\n        name: 'name',\n        label: 'Name',\n        min: 5\n      }]\n    });\n    assert(schema.length === 1);\n    const input = {\n      name: 'Cow'\n    };\n    await testSchemaError(schema, input, 'name', 'min');\n  });","file":"schemas.js","skipped":false,"dir":"test"},{"name":"should convert and keep the correct value for a field which is required for a string field type","suites":["Schemas"],"updatePoint":{"line":252,"column":101,"index":5333},"line":252,"code":"  it('should convert and keep the correct value for a field which is required for a string field type', async () => {\n    const schema = apos.schema.compose({\n      addFields: [{\n        type: 'string',\n        name: 'name',\n        label: 'Name',\n        required: true\n      }]\n    });\n    assert(schema.length === 1);\n    const input = {\n      name: 'Apostrophe^CMS'\n    };\n    const req = apos.task.getReq();\n    const result = {};\n    await apos.schema.convert(req, schema, input, result);\n    assert(result.name === 'Apostrophe^CMS');\n  });","file":"schemas.js","skipped":false,"dir":"test"},{"name":"should keep an empty submitted field value null when there is a min / max configuration for an integer field type","suites":["Schemas"],"updatePoint":{"line":270,"column":119,"index":5898},"line":270,"code":"  it('should keep an empty submitted field value null when there is a min / max configuration for an integer field type', async () => {\n    const schema = apos.schema.compose({\n      addFields: [{\n        type: 'integer',\n        name: 'price',\n        label: 'Price',\n        min: 1,\n        max: 10\n      }]\n    });\n    assert(schema.length === 1);\n    const input = {\n      price: ''\n    };\n    const req = apos.task.getReq();\n    const result = {};\n    await apos.schema.convert(req, schema, input, result);\n    assert(_.keys(result).length === 1);\n    assert(result.price === null);\n  });","file":"schemas.js","skipped":false,"dir":"test"},{"name":"should keep an empty submitted field value null when there is a min / max configuration for a float field type","suites":["Schemas"],"updatePoint":{"line":290,"column":116,"index":6489},"line":290,"code":"  it('should keep an empty submitted field value null when there is a min / max configuration for a float field type', async () => {\n    const schema = apos.schema.compose({\n      addFields: [{\n        type: 'float',\n        name: 'price',\n        label: 'Price',\n        min: 1,\n        max: 10\n      }]\n    });\n    assert(schema.length === 1);\n    const input = {\n      price: ''\n    };\n    const req = apos.task.getReq();\n    const result = {};\n    await apos.schema.convert(req, schema, input, result);\n    assert(_.keys(result).length === 1);\n    assert(result.price === null);\n  });","file":"schemas.js","skipped":false,"dir":"test"},{"name":"should ensure a max value is being trimmed to the max length for a string field type","suites":["Schemas"],"updatePoint":{"line":310,"column":90,"index":7052},"line":310,"code":"  it('should ensure a max value is being trimmed to the max length for a string field type', async () => {\n    const schema = apos.schema.compose({\n      addFields: [{\n        type: 'string',\n        name: 'name',\n        label: 'Name',\n        max: 5\n      }]\n    });\n    assert(schema.length === 1);\n    const input = {\n      name: 'Apostrophe'\n    };\n    const req = apos.task.getReq();\n    const result = {};\n    await apos.schema.convert(req, schema, input, result);\n    assert(_.keys(result).length === 1);\n    assert(result.name === 'Apost');\n  });","file":"schemas.js","skipped":false,"dir":"test"},{"name":"should allow saving a 0 value provided as a number if a field is required for an integer field type","suites":["Schemas"],"updatePoint":{"line":329,"column":105,"index":7623},"line":329,"code":"  it('should allow saving a 0 value provided as a number if a field is required for an integer field type', async () => {\n    const schema = apos.schema.compose({\n      addFields: [{\n        type: 'integer',\n        name: 'price',\n        label: 'Price',\n        required: true\n      }]\n    });\n    assert(schema.length === 1);\n    const input = {\n      price: 0\n    };\n    const req = apos.task.getReq();\n    const result = {};\n    await apos.schema.convert(req, schema, input, result);\n    assert(_.keys(result).length === 1);\n    assert(result.price === 0);\n  });","file":"schemas.js","skipped":false,"dir":"test"},{"name":"should allow saving a 0 value provided as a float if a field is required for an float field type","suites":["Schemas"],"updatePoint":{"line":348,"column":102,"index":8187},"line":348,"code":"  it('should allow saving a 0 value provided as a float if a field is required for an float field type', async () => {\n    const schema = apos.schema.compose({\n      addFields: [{\n        type: 'float',\n        name: 'price',\n        label: 'Price',\n        required: true\n      }]\n    });\n    assert(schema.length === 1);\n    const input = {\n      price: 0.00\n    };\n    const req = apos.task.getReq();\n    const result = {};\n    await apos.schema.convert(req, schema, input, result);\n    assert(_.keys(result).length === 1);\n    assert(result.price === 0.00);\n  });","file":"schemas.js","skipped":false,"dir":"test"},{"name":"should allow saving a 0 value provided as a number if a field is required for an float field type","suites":["Schemas"],"updatePoint":{"line":367,"column":103,"index":8756},"line":367,"code":"  it('should allow saving a 0 value provided as a number if a field is required for an float field type', async () => {\n    const schema = apos.schema.compose({\n      addFields: [{\n        type: 'float',\n        name: 'price',\n        label: 'Price',\n        required: true\n      }]\n    });\n    assert(schema.length === 1);\n    const input = {\n      price: 0\n    };\n    const req = apos.task.getReq();\n    const result = {};\n    await apos.schema.convert(req, schema, input, result);\n    assert(_.keys(result).length === 1);\n    assert(result.price === 0);\n  });","file":"schemas.js","skipped":false,"dir":"test"},{"name":"should allow saving a 0 value provided as a number if a field is required for an string field type","suites":["Schemas"],"updatePoint":{"line":386,"column":104,"index":9320},"line":386,"code":"  it('should allow saving a 0 value provided as a number if a field is required for an string field type', async () => {\n    const schema = apos.schema.compose({\n      addFields: [{\n        type: 'string',\n        name: 'price',\n        label: 'Price',\n        required: true\n      }]\n    });\n    assert(schema.length === 1);\n    const input = {\n      price: 0\n    };\n    const req = apos.task.getReq();\n    const result = {};\n    await apos.schema.convert(req, schema, input, result);\n    assert(_.keys(result).length === 1);\n    assert(result.price === '0');\n  });","file":"schemas.js","skipped":false,"dir":"test"},{"name":"should allow saving a 0 value provided as a string if a field is required for an integer field type","suites":["Schemas"],"updatePoint":{"line":405,"column":105,"index":9888},"line":405,"code":"  it('should allow saving a 0 value provided as a string if a field is required for an integer field type', async () => {\n    const schema = apos.schema.compose({\n      addFields: [{\n        type: 'integer',\n        name: 'price',\n        label: 'Price',\n        required: true\n      }]\n    });\n    assert(schema.length === 1);\n    const input = {\n      price: '0'\n    };\n    const req = apos.task.getReq();\n    const result = {};\n    await apos.schema.convert(req, schema, input, result);\n    assert(_.keys(result).length === 1);\n    assert(result.price === 0);\n  });","file":"schemas.js","skipped":false,"dir":"test"},{"name":"should allow saving a 0 value provided as a string if a field is required for an string field type","suites":["Schemas"],"updatePoint":{"line":424,"column":104,"index":10456},"line":424,"code":"  it('should allow saving a 0 value provided as a string if a field is required for an string field type', async () => {\n    const schema = apos.schema.compose({\n      addFields: [{\n        type: 'string',\n        name: 'price',\n        label: 'Price',\n        required: true\n      }]\n    });\n    assert(schema.length === 1);\n    const input = {\n      price: '0'\n    };\n    const req = apos.task.getReq();\n    const result = {};\n    await apos.schema.convert(req, schema, input, result);\n    assert(_.keys(result).length === 1);\n    assert(result.price === '0');\n  });","file":"schemas.js","skipped":false,"dir":"test"},{"name":"should allow saving a 0 value provided as a string if a field is required for an float field type","suites":["Schemas"],"updatePoint":{"line":443,"column":103,"index":11024},"line":443,"code":"  it('should allow saving a 0 value provided as a string if a field is required for an float field type', async () => {\n    const schema = apos.schema.compose({\n      addFields: [{\n        type: 'float',\n        name: 'price',\n        label: 'Price',\n        required: true\n      }]\n    });\n    assert(schema.length === 1);\n    const input = {\n      price: '0'\n    };\n    const req = apos.task.getReq();\n    const result = {};\n    await apos.schema.convert(req, schema, input, result);\n    assert(_.keys(result).length === 1);\n    assert(result.price === 0);\n  });","file":"schemas.js","skipped":false,"dir":"test"},{"name":"should allow saving a 0 value provided as a string if there is no min value set for an integer field type","suites":["Schemas"],"updatePoint":{"line":462,"column":111,"index":11597},"line":462,"code":"  it('should allow saving a 0 value provided as a string if there is no min value set for an integer field type', async () => {\n    const schema = apos.schema.compose({\n      addFields: [{\n        type: 'integer',\n        name: 'price',\n        label: 'Price'\n      }]\n    });\n    assert(schema.length === 1);\n    const input = {\n      price: '0'\n    };\n    const req = apos.task.getReq();\n    const result = {};\n    await apos.schema.convert(req, schema, input, result);\n    assert(_.keys(result).length === 1);\n    assert(result.price === 0);\n  });","file":"schemas.js","skipped":false,"dir":"test"},{"name":"should allow saving a 0 value provided as a string if there is no min value set for a float field type","suites":["Schemas"],"updatePoint":{"line":480,"column":108,"index":12145},"line":480,"code":"  it('should allow saving a 0 value provided as a string if there is no min value set for a float field type', async () => {\n    const schema = apos.schema.compose({\n      addFields: [{\n        type: 'float',\n        name: 'price',\n        label: 'Price'\n      }]\n    });\n    assert(schema.length === 1);\n    const input = {\n      price: '0'\n    };\n    const req = apos.task.getReq();\n    const result = {};\n    await apos.schema.convert(req, schema, input, result);\n    assert(_.keys(result).length === 1);\n    assert(result.price === 0);\n  });","file":"schemas.js","skipped":false,"dir":"test"},{"name":"should allow saving a negative value provided as a number for an integer field type","suites":["Schemas"],"updatePoint":{"line":498,"column":89,"index":12672},"line":498,"code":"  it('should allow saving a negative value provided as a number for an integer field type', async () => {\n    const schema = apos.schema.compose({\n      addFields: [{\n        type: 'integer',\n        name: 'price',\n        label: 'Price'\n      }]\n    });\n    assert(schema.length === 1);\n    const input = {\n      price: -1\n    };\n    const req = apos.task.getReq();\n    const result = {};\n    await apos.schema.convert(req, schema, input, result);\n    assert(_.keys(result).length === 1);\n    assert(result.price === -1);\n  });","file":"schemas.js","skipped":false,"dir":"test"},{"name":"should allow saving a negative value provided as a float for an float field type","suites":["Schemas"],"updatePoint":{"line":516,"column":86,"index":13198},"line":516,"code":"  it('should allow saving a negative value provided as a float for an float field type', async () => {\n    const schema = apos.schema.compose({\n      addFields: [{\n        type: 'float',\n        name: 'price',\n        label: 'Price'\n      }]\n    });\n    assert(schema.length === 1);\n    const input = {\n      price: -1.3\n    };\n    const req = apos.task.getReq();\n    const result = {};\n    await apos.schema.convert(req, schema, input, result);\n    assert(_.keys(result).length === 1);\n    assert(result.price === -1.3);\n  });","file":"schemas.js","skipped":false,"dir":"test"},{"name":"should allow saving a negative value provided as a float for an string field type","suites":["Schemas"],"updatePoint":{"line":534,"column":87,"index":13727},"line":534,"code":"  it('should allow saving a negative value provided as a float for an string field type', async () => {\n    const schema = apos.schema.compose({\n      addFields: [{\n        type: 'string',\n        name: 'price',\n        label: 'Price'\n      }]\n    });\n    assert(schema.length === 1);\n    const input = {\n      price: -1.3\n    };\n    const req = apos.task.getReq();\n    const result = {};\n    await apos.schema.convert(req, schema, input, result);\n    assert(_.keys(result).length === 1);\n    assert(result.price === '-1.3');\n  });","file":"schemas.js","skipped":false,"dir":"test"},{"name":"should allow saving a negative value provided as a number if a field is required for an integer field type","suites":["Schemas"],"updatePoint":{"line":552,"column":112,"index":14284},"line":552,"code":"  it('should allow saving a negative value provided as a number if a field is required for an integer field type', async () => {\n    const schema = apos.schema.compose({\n      addFields: [{\n        type: 'integer',\n        name: 'price',\n        label: 'Price',\n        required: true\n      }]\n    });\n    assert(schema.length === 1);\n    const input = {\n      price: -1\n    };\n    const req = apos.task.getReq();\n    const result = {};\n    await apos.schema.convert(req, schema, input, result);\n    assert(_.keys(result).length === 1);\n    assert(result.price === -1);\n  });","file":"schemas.js","skipped":false,"dir":"test"},{"name":"should allow saving a negative value provided as a number if a field is required for an float field type","suites":["Schemas"],"updatePoint":{"line":571,"column":110,"index":14858},"line":571,"code":"  it('should allow saving a negative value provided as a number if a field is required for an float field type', async () => {\n    const schema = apos.schema.compose({\n      addFields: [{\n        type: 'float',\n        name: 'price',\n        label: 'Price',\n        required: true\n      }]\n    });\n    assert(schema.length === 1);\n    const input = {\n      price: -1.3\n    };\n    const req = apos.task.getReq();\n    const result = {};\n    await apos.schema.convert(req, schema, input, result);\n    assert(_.keys(result).length === 1);\n    assert(result.price === -1.3);\n  });","file":"schemas.js","skipped":false,"dir":"test"},{"name":"should allow saving a negative value provided as a string if a field is required for an float field type","suites":["Schemas"],"updatePoint":{"line":590,"column":110,"index":15434},"line":590,"code":"  it('should allow saving a negative value provided as a string if a field is required for an float field type', async () => {\n    const schema = apos.schema.compose({\n      addFields: [{\n        type: 'float',\n        name: 'price',\n        label: 'Price',\n        required: true\n      }]\n    });\n    assert(schema.length === 1);\n    const input = {\n      price: '-1.3'\n    };\n    const req = apos.task.getReq();\n    const result = {};\n    await apos.schema.convert(req, schema, input, result);\n    assert(_.keys(result).length === 1);\n    assert(result.price === -1.3);\n  });","file":"schemas.js","skipped":false,"dir":"test"},{"name":"should override the saved value if min and max value has been set and the submitted value is out of range for an integer field type","suites":["Schemas"],"updatePoint":{"line":609,"column":137,"index":16039},"line":609,"code":"  it('should override the saved value if min and max value has been set and the submitted value is out of range for an integer field type', async () => {\n    const schema = apos.schema.compose({\n      addFields: [{\n        type: 'integer',\n        name: 'price',\n        label: 'Price',\n        min: 5,\n        max: 6\n      }]\n    });\n    assert(schema.length === 1);\n    const input = {\n      price: '3'\n    };\n    const req = apos.task.getReq();\n    const result = {};\n    await apos.schema.convert(req, schema, input, result);\n    assert(_.keys(result).length === 1);\n    assert(result.price === 5);\n  });","file":"schemas.js","skipped":false,"dir":"test"},{"name":"should override the saved value if min and max value has been set and the submitted value is out of range for a float field type","suites":["Schemas"],"updatePoint":{"line":629,"column":134,"index":16645},"line":629,"code":"  it('should override the saved value if min and max value has been set and the submitted value is out of range for a float field type', async () => {\n    const schema = apos.schema.compose({\n      addFields: [{\n        type: 'float',\n        name: 'price',\n        label: 'Price',\n        min: 5.1,\n        max: 6\n      }]\n    });\n    assert(schema.length === 1);\n    const input = {\n      price: '3.2'\n    };\n    const req = apos.task.getReq();\n    const result = {};\n    await apos.schema.convert(req, schema, input, result);\n    assert(_.keys(result).length === 1);\n    assert(result.price === 5.1);\n  });","file":"schemas.js","skipped":false,"dir":"test"},{"name":"should ensure a min value is being set to the configured min value if a lower value is submitted for an integer field type","suites":["Schemas"],"updatePoint":{"line":649,"column":128,"index":17249},"line":649,"code":"  it('should ensure a min value is being set to the configured min value if a lower value is submitted for an integer field type', async () => {\n    const schema = apos.schema.compose({\n      addFields: [{\n        type: 'integer',\n        name: 'price',\n        label: 'Price',\n        min: 5\n      }]\n    });\n    assert(schema.length === 1);\n    const input = {\n      price: '1'\n    };\n    const req = apos.task.getReq();\n    const result = {};\n    await apos.schema.convert(req, schema, input, result);\n    assert(_.keys(result).length === 1);\n    assert(result.price === 5);\n  });","file":"schemas.js","skipped":false,"dir":"test"},{"name":"should ensure a min value is being set to the configured min value if a lower value is submitted for a float field type","suites":["Schemas"],"updatePoint":{"line":668,"column":125,"index":17830},"line":668,"code":"  it('should ensure a min value is being set to the configured min value if a lower value is submitted for a float field type', async () => {\n    const schema = apos.schema.compose({\n      addFields: [{\n        type: 'float',\n        name: 'price',\n        label: 'Price',\n        min: 5.3\n      }]\n    });\n    assert(schema.length === 1);\n    const input = {\n      price: '1.2'\n    };\n    const req = apos.task.getReq();\n    const result = {};\n    await apos.schema.convert(req, schema, input, result);\n    assert(_.keys(result).length === 1);\n    assert(result.price === 5.3);\n  });","file":"schemas.js","skipped":false,"dir":"test"},{"name":"should ensure a max value is being set to the max if a higher value is submitted for an integer field type","suites":["Schemas"],"updatePoint":{"line":687,"column":112,"index":18402},"line":687,"code":"  it('should ensure a max value is being set to the max if a higher value is submitted for an integer field type', async () => {\n    const schema = apos.schema.compose({\n      addFields: [{\n        type: 'integer',\n        name: 'price',\n        label: 'Price',\n        max: 5\n      }]\n    });\n    assert(schema.length === 1);\n    const input = {\n      price: '8'\n    };\n    const req = apos.task.getReq();\n    const result = {};\n    await apos.schema.convert(req, schema, input, result);\n    assert(_.keys(result).length === 1);\n    assert(result.price === 5);\n  });","file":"schemas.js","skipped":false,"dir":"test"},{"name":"should ensure a max value is being set to the max if a higher value is submitted for a float field type","suites":["Schemas"],"updatePoint":{"line":706,"column":109,"index":18967},"line":706,"code":"  it('should ensure a max value is being set to the max if a higher value is submitted for a float field type', async () => {\n    const schema = apos.schema.compose({\n      addFields: [{\n        type: 'float',\n        name: 'price',\n        label: 'Price',\n        max: 5.9\n      }]\n    });\n    assert(schema.length === 1);\n    const input = {\n      price: '8'\n    };\n    const req = apos.task.getReq();\n    const result = {};\n    await apos.schema.convert(req, schema, input, result);\n    assert(_.keys(result).length === 1);\n    assert(result.price === 5.9);\n  });","file":"schemas.js","skipped":false,"dir":"test"},{"name":"should not modify a value if the submitted value is within min and max for an integer field type","suites":["Schemas"],"updatePoint":{"line":725,"column":102,"index":19527},"line":725,"code":"  it('should not modify a value if the submitted value is within min and max for an integer field type', async () => {\n    const schema = apos.schema.compose({\n      addFields: [{\n        type: 'integer',\n        name: 'price',\n        label: 'Price',\n        min: 4,\n        max: 6\n      }]\n    });\n    assert(schema.length === 1);\n    const input = {\n      price: '5'\n    };\n    const req = apos.task.getReq();\n    const result = {};\n    await apos.schema.convert(req, schema, input, result);\n    assert(_.keys(result).length === 1);\n    assert(result.price === 5);\n  });","file":"schemas.js","skipped":false,"dir":"test"},{"name":"should not modify a value if the submitted value is within min and max for a float field type","suites":["Schemas"],"updatePoint":{"line":745,"column":99,"index":20098},"line":745,"code":"  it('should not modify a value if the submitted value is within min and max for a float field type', async () => {\n    const schema = apos.schema.compose({\n      addFields: [{\n        type: 'float',\n        name: 'price',\n        label: 'Price',\n        min: 4,\n        max: 5\n      }]\n    });\n    assert(schema.length === 1);\n    const input = {\n      price: '4.3'\n    };\n    const req = apos.task.getReq();\n    const result = {};\n    await apos.schema.convert(req, schema, input, result);\n    assert(_.keys(result).length === 1);\n    assert(result.price === 4.3);\n  });","file":"schemas.js","skipped":false,"dir":"test"},{"name":"should not allow a text value to be submitted for a required integer field","suites":["Schemas"],"updatePoint":{"line":765,"column":80,"index":20652},"line":765,"code":"  it('should not allow a text value to be submitted for a required integer field', async () => {\n    const schema = apos.schema.compose({\n      addFields: [{\n        type: 'integer',\n        name: 'price',\n        label: 'Price',\n        required: true\n      }]\n    });\n    assert(schema.length === 1);\n    const input = {\n      price: 'A'\n    };\n    await testSchemaError(schema, input, 'price', 'invalid');\n  });","file":"schemas.js","skipped":false,"dir":"test"},{"name":"should not allow a text value to be submitted for a required float field","suites":["Schemas"],"updatePoint":{"line":780,"column":78,"index":21065},"line":780,"code":"  it('should not allow a text value to be submitted for a required float field', async () => {\n    const schema = apos.schema.compose({\n      addFields: [{\n        type: 'float',\n        name: 'price',\n        label: 'Price',\n        required: true\n      }]\n    });\n    assert(schema.length === 1);\n    const input = {\n      price: 'A'\n    };\n    await testSchemaError(schema, input, 'price', 'invalid');\n  });","file":"schemas.js","skipped":false,"dir":"test"},{"name":"should not allow a text value to be submitted for a non required integer field with min and max","suites":["Schemas"],"updatePoint":{"line":795,"column":101,"index":21499},"line":795,"code":"  it('should not allow a text value to be submitted for a non required integer field with min and max', async () => {\n    const schema = apos.schema.compose({\n      addFields: [{\n        type: 'integer',\n        name: 'price',\n        label: 'Price',\n        min: 1,\n        max: 10\n      }]\n    });\n    assert(schema.length === 1);\n    const input = {\n      price: 'A'\n    };\n    await testSchemaError(schema, input, 'price', 'invalid');\n  });","file":"schemas.js","skipped":false,"dir":"test"},{"name":"should not allow a text value to be submitted for a non required float field with min and max","suites":["Schemas"],"updatePoint":{"line":811,"column":99,"index":21942},"line":811,"code":"  it('should not allow a text value to be submitted for a non required float field with min and max', async () => {\n    const schema = apos.schema.compose({\n      addFields: [{\n        type: 'float',\n        name: 'price',\n        label: 'Price',\n        min: 1,\n        max: 10\n      }]\n    });\n    assert(schema.length === 1);\n    const input = {\n      price: 'A'\n    };\n    await testSchemaError(schema, input, 'price', 'invalid');\n  });","file":"schemas.js","skipped":false,"dir":"test"},{"name":"should not allow a text value to be submitted for a non required integer field with a default value set","suites":["Schemas"],"updatePoint":{"line":827,"column":109,"index":22393},"line":827,"code":"  it('should not allow a text value to be submitted for a non required integer field with a default value set', async () => {\n    const schema = apos.schema.compose({\n      addFields: [{\n        type: 'integer',\n        name: 'price',\n        label: 'Price',\n        def: 2\n      }]\n    });\n    assert(schema.length === 1);\n    const input = {\n      price: 'A'\n    };\n    await testSchemaError(schema, input, 'price', 'invalid');\n  });","file":"schemas.js","skipped":false,"dir":"test"},{"name":"should not allow a text value to be submitted for a non required float field with a default value set","suites":["Schemas"],"updatePoint":{"line":842,"column":107,"index":22827},"line":842,"code":"  it('should not allow a text value to be submitted for a non required float field with a default value set', async () => {\n    const schema = apos.schema.compose({\n      addFields: [{\n        type: 'float',\n        name: 'price',\n        label: 'Price',\n        def: 2.10\n      }]\n    });\n    assert(schema.length === 1);\n    const input = {\n      price: 'A'\n    };\n    await testSchemaError(schema, input, 'price', 'invalid');\n  });","file":"schemas.js","skipped":false,"dir":"test"},{"name":"should not allow a text value to be submitted for a non required integer field","suites":["Schemas"],"updatePoint":{"line":857,"column":84,"index":23239},"line":857,"code":"  it('should not allow a text value to be submitted for a non required integer field', async () => {\n    const schema = apos.schema.compose({\n      addFields: [{\n        type: 'integer',\n        name: 'price',\n        label: 'Price'\n      }]\n    });\n    assert(schema.length === 1);\n    const input = {\n      price: 'A'\n    };\n    await testSchemaError(schema, input, 'price', 'invalid');\n  });","file":"schemas.js","skipped":false,"dir":"test"},{"name":"should not allow a text value to be submitted for a non required float field","suites":["Schemas"],"updatePoint":{"line":871,"column":82,"index":23632},"line":871,"code":"  it('should not allow a text value to be submitted for a non required float field', async () => {\n    const schema = apos.schema.compose({\n      addFields: [{\n        type: 'float',\n        name: 'price',\n        label: 'Price'\n      }]\n    });\n    assert(schema.length === 1);\n    const input = {\n      price: 'A'\n    };\n    await testSchemaError(schema, input, 'price', 'invalid');\n  });","file":"schemas.js","skipped":false,"dir":"test"},{"name":"should allow a parsable string/integer value to be submitted for a non required integer field","suites":["Schemas"],"updatePoint":{"line":885,"column":99,"index":24040},"line":885,"code":"  it('should allow a parsable string/integer value to be submitted for a non required integer field', async () => {\n    const schema = apos.schema.compose({\n      addFields: [{\n        type: 'integer',\n        name: 'price',\n        label: 'Price'\n      }]\n    });\n    assert(schema.length === 1);\n    const input = {\n      price: '22a'\n    };\n    const req = apos.task.getReq();\n    const result = {};\n    await apos.schema.convert(req, schema, input, result);\n    assert(result.price === 22);\n  });","file":"schemas.js","skipped":false,"dir":"test"},{"name":"should allow a parsable string/float value to be submitted for a non required float field","suites":["Schemas"],"updatePoint":{"line":902,"column":95,"index":24537},"line":902,"code":"  it('should allow a parsable string/float value to be submitted for a non required float field', async () => {\n    const schema = apos.schema.compose({\n      addFields: [{\n        type: 'float',\n        name: 'price',\n        label: 'Price'\n      }]\n    });\n    assert(schema.length === 1);\n    const input = {\n      price: '11.4b'\n    };\n    const req = apos.task.getReq();\n    const result = {};\n    await apos.schema.convert(req, schema, input, result);\n    assert(result.price === 11.4);\n  });","file":"schemas.js","skipped":false,"dir":"test"},{"name":"should convert simple data correctly","suites":["Schemas"],"updatePoint":{"line":919,"column":42,"index":24983},"line":919,"code":"  it('should convert simple data correctly', async () => {\n    const schema = apos.schema.compose({\n      addFields: simpleFields\n    });\n    assert(schema.length === 4);\n    const input = {\n      name: 'Bob Smith',\n      address: '5017 Awesome Street\\nPhiladelphia, PA 19147',\n      irrelevant: 'Irrelevant',\n      slug: 'This Is Cool'\n    };\n    const req = apos.task.getReq();\n    const result = {};\n    await apos.schema.convert(req, schema, input, result); // no irrelevant or missing fields\n\n    assert(_.keys(result).length === 4); // expected fields came through\n\n    assert(result.name === input.name);\n    assert(result.address === input.address); // default\n\n    assert(result.variety === simpleFields[2].choices[0].value);\n    assert(result.slug === 'this-is-cool');\n  });","file":"schemas.js","skipped":false,"dir":"test"},{"name":"should update a password if provided","suites":["Schemas"],"updatePoint":{"line":942,"column":42,"index":25768},"line":942,"code":"  it('should update a password if provided', async () => {\n    const schema = apos.schema.compose({\n      addFields: [{\n        type: 'password',\n        name: 'password',\n        label: 'Password'\n      }]\n    });\n    assert(schema.length === 1);\n    const input = {\n      password: 'silly'\n    };\n    const req = apos.task.getReq();\n    const result = {\n      password: 'serious'\n    };\n    await apos.schema.convert(req, schema, input, result);\n    assert(_.keys(result).length === 1); // hashing is not the business of schemas, see the\n    // @apostrophecms/user module\n\n    assert(result.password === 'silly');\n  });","file":"schemas.js","skipped":false,"dir":"test"},{"name":"should leave a password alone if not provided","suites":["Schemas"],"updatePoint":{"line":964,"column":51,"index":26399},"line":964,"code":"  it('should leave a password alone if not provided', async () => {\n    const schema = apos.schema.compose({\n      addFields: [{\n        type: 'password',\n        name: 'password',\n        label: 'Password'\n      }]\n    });\n    assert(schema.length === 1);\n    const input = {\n      password: ''\n    };\n    const req = apos.task.getReq();\n    const result = {\n      password: 'serious'\n    };\n    await apos.schema.convert(req, schema, input, result);\n    assert(_.keys(result).length === 1); // hashing is not the business of schemas, see the\n    // @apostrophecms/user module\n\n    assert(result.password === 'serious');\n  });","file":"schemas.js","skipped":false,"dir":"test"},{"name":"should handle array schemas","suites":["Schemas"],"updatePoint":{"line":986,"column":33,"index":27009},"line":986,"code":"  it('should handle array schemas', async () => {\n    const schema = apos.schema.compose({\n      addFields: [{\n        type: 'array',\n        name: 'addresses',\n        label: 'Addresses',\n        schema: [{\n          name: 'address',\n          type: 'string',\n          label: 'Address'\n        }]\n      }]\n    });\n    assert(schema.length === 1);\n    const input = {\n      addresses: [{\n        address: '500 test lane'\n      }, {\n        address: '602 test ave'\n      }]\n    };\n    const req = apos.task.getReq();\n    const result = {};\n    await apos.schema.convert(req, schema, input, result);\n    assert(_.keys(result).length === 1);\n    assert(result.addresses);\n    assert(result.addresses.length === 2);\n    assert(result.addresses[0]._id);\n    assert(result.addresses[1]._id);\n    assert(result.addresses[0].address === '500 test lane');\n    assert(result.addresses[1].address === '602 test ave');\n  });","file":"schemas.js","skipped":false,"dir":"test"},{"name":"should convert string values to areas correctly","suites":["Schemas"],"updatePoint":{"line":1018,"column":53,"index":27943},"line":1018,"code":"  it('should convert string values to areas correctly', async () => {\n    const schema = apos.schema.compose(hasArea);\n    assert(schema.length === 1);\n    const input = {\n      irrelevant: 'Irrelevant',\n      // Should get escaped, not be treated as HTML\n      body: 'This is the greatest <h1>thing</h1>'\n    };\n    const req = apos.task.getReq();\n    const result = {};\n    await apos.schema.convert(req, schema, input, result); // no irrelevant or missing fields\n\n    assert(_.keys(result).length === 1); // expected fields came through\n\n    assert(result.body);\n    assert(result.body.metaType === 'area');\n    assert(result.body.items);\n    assert(result.body.items[0]);\n    assert(result.body.items[0].type === '@apostrophecms/rich-text');\n    assert(result.body.items[0].content === apos.util.escapeHtml(input.body));\n  });","file":"schemas.js","skipped":false,"dir":"test"},{"name":"should convert arrays of widgets to areas correctly","suites":["Schemas"],"updatePoint":{"line":1039,"column":57,"index":28778},"line":1039,"code":"  it('should convert arrays of widgets to areas correctly', async () => {\n    const schema = apos.schema.compose(hasArea);\n    assert(schema.length === 1);\n    const input = {\n      irrelevant: 'Irrelevant',\n      body: [{\n        metaType: 'widget',\n        _id: 'abc',\n        type: '@apostrophecms/rich-text',\n        content: '<h4>This <em>is</em> <strong>a header.</strong></h4>'\n      }]\n    };\n    const req = apos.task.getReq();\n    const result = {};\n    await apos.schema.convert(req, schema, input, result); // no irrelevant or missing fields\n\n    assert(_.keys(result).length === 1); // expected fields came through\n\n    assert(result.body);\n    assert(result.body.metaType === 'area');\n    assert(result.body.items);\n    assert(result.body.items[0]);\n    assert(result.body.items[0].type === '@apostrophecms/rich-text');\n    assert.strictEqual(result.body.items[0].content, '<h4>This is <strong>a header.</strong></h4>');\n  });","file":"schemas.js","skipped":false,"dir":"test"},{"name":"should not accept a widget not in the widgets object of the area","suites":["Schemas"],"updatePoint":{"line":1064,"column":70,"index":29732},"line":1064,"code":"  it('should not accept a widget not in the widgets object of the area', async () => {\n    const schema = apos.schema.compose(hasAreaWithoutWidgets);\n    assert(schema.length === 1);\n    const input = {\n      irrelevant: 'Irrelevant',\n      body: [{\n        metaType: 'widget',\n        _id: 'abc',\n        type: '@apostrophecms/rich-text',\n        content: '<h4>This <em>is</em> <strong>a header.</strong></h4>'\n      }]\n    };\n    const req = apos.task.getReq();\n    const result = {};\n    await apos.schema.convert(req, schema, input, result); // no irrelevant or missing fields\n\n    assert(!result.body.items[0]);\n  });","file":"schemas.js","skipped":false,"dir":"test"},{"name":"should convert areas gracefully when they are undefined","suites":["Schemas"],"updatePoint":{"line":1082,"column":61,"index":30346},"line":1082,"code":"  it('should convert areas gracefully when they are undefined', async () => {\n    const schema = apos.schema.compose(hasArea);\n    assert(schema.length === 1);\n    const input = {\n      irrelevant: 'Irrelevant',\n      // Should get escaped, not be treated as HTML\n      body: undefined\n    };\n    const req = apos.task.getReq();\n    const result = {};\n    await apos.schema.convert(req, schema, input, result); // no irrelevant or missing fields\n\n    assert(_.keys(result).length === 1); // expected fields came through\n\n    assert(result.body);\n    assert(result.body.metaType === 'area');\n    assert(result.body.items);\n    assert(!result.body.items[0]);\n  });","file":"schemas.js","skipped":false,"dir":"test"},{"name":"should clean up extra slashes in page slugs","suites":["Schemas"],"updatePoint":{"line":1101,"column":49,"index":30997},"line":1101,"code":"  it('should clean up extra slashes in page slugs', async () => {\n    const req = apos.task.getReq();\n    const schema = apos.schema.compose({\n      addFields: pageSlug\n    });\n    assert(schema.length === 1);\n    const input = {\n      slug: '/wiggy//wacky///wobbly////whizzle/////'\n    };\n    const result = {};\n    await apos.schema.convert(req, schema, input, result);\n    assert.strictEqual(result.slug, '/wiggy/wacky/wobbly/whizzle');\n  });","file":"schemas.js","skipped":false,"dir":"test"},{"name":"retains trailing / on the home page","suites":["Schemas"],"updatePoint":{"line":1114,"column":41,"index":31435},"line":1114,"code":"  it('retains trailing / on the home page', async () => {\n    const req = apos.task.getReq();\n    const schema = apos.schema.compose({\n      addFields: pageSlug\n    });\n    assert(schema.length === 1);\n    const input = {\n      slug: '/'\n    };\n    const result = {};\n    await apos.schema.convert(req, schema, input, result);\n    assert(result.slug === '/');\n  });","file":"schemas.js","skipped":false,"dir":"test"},{"name":"does not keep slashes when page: true not present for slug","suites":["Schemas"],"updatePoint":{"line":1127,"column":64,"index":31824},"line":1127,"code":"  it('does not keep slashes when page: true not present for slug', async () => {\n    const req = apos.task.getReq();\n    const schema = apos.schema.compose({\n      addFields: regularSlug\n    });\n    assert(schema.length === 1);\n    const input = {\n      slug: '/wiggy//wacky///wobbly////whizzle/////'\n    };\n    const result = {};\n    await apos.schema.convert(req, schema, input, result);\n    assert(result.slug === 'wiggy-wacky-wobbly-whizzle');\n  });","file":"schemas.js","skipped":false,"dir":"test"},{"name":"enforces required property for ordinary field","suites":["Schemas"],"updatePoint":{"line":1140,"column":51,"index":32265},"line":1140,"code":"  it('enforces required property for ordinary field', async () => {\n    const schema = apos.schema.compose({\n      addFields: [{\n        name: 'age',\n        label: 'Age',\n        type: 'integer',\n        required: true\n      }]\n    });\n    await testSchemaError(schema, {\n      age: ''\n    }, 'age', 'required');\n  });","file":"schemas.js","skipped":false,"dir":"test"},{"name":"ignores required property for hidden field","suites":["Schemas"],"updatePoint":{"line":1153,"column":48,"index":32582},"line":1153,"code":"  it('ignores required property for hidden field', async () => {\n    const req = apos.task.getReq();\n    const schema = apos.schema.compose({\n      addFields: [{\n        name: 'age',\n        type: 'integer',\n        required: true,\n        if: {\n          ageOrShoeSize: 'age'\n        }\n      }, {\n        name: 'shoeSize',\n        type: 'integer',\n        required: false,\n        if: {\n          ageOrShoeSize: 'shoeSize'\n        }\n      }, {\n        name: 'ageOrShoeSize',\n        type: 'select',\n        choices: [{\n          label: 'age',\n          value: 'age'\n        }, {\n          label: 'shoeSize',\n          value: 'shoeSize'\n        }]\n      }]\n    });\n    const output = {};\n    await apos.schema.convert(req, schema, {\n      ageOrShoeSize: 'shoeSize',\n      age: ''\n    }, output);\n    assert(output.ageOrShoeSize === 'shoeSize');\n  });","file":"schemas.js","skipped":false,"dir":"test"},{"name":"enforces required property for shown field","suites":["Schemas"],"updatePoint":{"line":1189,"column":48,"index":33433},"line":1189,"code":"  it('enforces required property for shown field', async () => {\n    const schema = apos.schema.compose({\n      addFields: [{\n        name: 'age',\n        type: 'integer',\n        required: true,\n        if: {\n          ageOrShoeSize: 'age'\n        }\n      }, {\n        name: 'shoeSize',\n        type: 'integer',\n        required: false,\n        if: {\n          ageOrShoeSize: 'shoeSize'\n        }\n      }, {\n        name: 'ageOrShoeSize',\n        type: 'select',\n        choices: [{\n          label: 'age',\n          value: 'age'\n        }, {\n          label: 'shoeSize',\n          value: 'shoeSize'\n        }]\n      }]\n    });\n    await testSchemaError(schema, {\n      ageOrShoeSize: 'age',\n      age: ''\n    }, 'age', 'required');\n  });","file":"schemas.js","skipped":false,"dir":"test"},{"name":"ignores required property for recursively hidden field","suites":["Schemas"],"updatePoint":{"line":1222,"column":60,"index":34185},"line":1222,"code":"  it('ignores required property for recursively hidden field', async () => {\n    const req = apos.task.getReq();\n    const schema = apos.schema.compose({\n      addFields: [{\n        name: 'age',\n        type: 'integer',\n        required: true,\n        if: {\n          ageOrShoeSize: 'age'\n        }\n      }, {\n        name: 'shoeSize',\n        type: 'integer',\n        required: false,\n        if: {\n          ageOrShoeSize: 'shoeSize'\n        }\n      }, {\n        name: 'ageOrShoeSize',\n        type: 'select',\n        choices: [{\n          label: 'age',\n          value: 'age'\n        }, {\n          label: 'shoeSize',\n          value: 'shoeSize'\n        }],\n        if: {\n          doWeCare: '1'\n        }\n      }, {\n        name: 'doWeCare',\n        type: 'select',\n        choices: [{\n          label: 'Yes',\n          value: '1'\n        }, {\n          label: 'No',\n          value: '0'\n        }]\n      }]\n    });\n    const output = {};\n    await apos.schema.convert(req, schema, {\n      ageOrShoeSize: 'age',\n      doWeCare: '0',\n      age: ''\n    }, output);\n    assert(output.ageOrShoeSize === 'age');\n  });","file":"schemas.js","skipped":false,"dir":"test"},{"name":"enforces required property for recursively shown field","suites":["Schemas"],"updatePoint":{"line":1272,"column":60,"index":35302},"line":1272,"code":"  it('enforces required property for recursively shown field', async () => {\n    const schema = apos.schema.compose({\n      addFields: [{\n        name: 'age',\n        type: 'integer',\n        required: true,\n        if: {\n          ageOrShoeSize: 'age'\n        }\n      }, {\n        name: 'shoeSize',\n        type: 'integer',\n        required: false,\n        if: {\n          ageOrShoeSize: 'shoeSize'\n        }\n      }, {\n        name: 'ageOrShoeSize',\n        type: 'select',\n        choices: [{\n          label: 'age',\n          value: 'age'\n        }, {\n          label: 'shoeSize',\n          value: 'shoeSize'\n        }],\n        if: {\n          doWeCare: '1'\n        }\n      }, {\n        name: 'doWeCare',\n        type: 'select',\n        choices: [{\n          label: 'Yes',\n          value: '1'\n        }, {\n          label: 'No',\n          value: '0'\n        }]\n      }]\n    });\n    await testSchemaError(schema, {\n      ageOrShoeSize: 'age',\n      doWeCare: '1',\n      age: ''\n    }, 'age', 'required');\n  });","file":"schemas.js","skipped":false,"dir":"test"},{"name":"ignores required property for recursively hidden field with boolean","suites":["Schemas"],"updatePoint":{"line":1319,"column":73,"index":36331},"line":1319,"code":"  it('ignores required property for recursively hidden field with boolean', async () => {\n    const req = apos.task.getReq();\n    const schema = apos.schema.compose({\n      addFields: [{\n        name: 'age',\n        type: 'integer',\n        required: true,\n        if: {\n          ageOrShoeSize: 'age'\n        }\n      }, {\n        name: 'shoeSize',\n        type: 'integer',\n        required: false,\n        if: {\n          ageOrShoeSize: 'shoeSize'\n        }\n      }, {\n        name: 'ageOrShoeSize',\n        type: 'select',\n        choices: [{\n          label: 'age',\n          value: 'age'\n        }, {\n          label: 'shoeSize',\n          value: 'shoeSize'\n        }],\n        if: {\n          doWeCare: true\n        }\n      }, {\n        name: 'doWeCare',\n        type: 'boolean',\n        choices: [{\n          value: true\n        }, {\n          value: false\n        }]\n      }]\n    });\n    const output = {};\n    await apos.schema.convert(req, schema, {\n      ageOrShoeSize: 'age',\n      doWeCare: false,\n      age: ''\n    }, output);\n    assert(output.ageOrShoeSize === 'age');\n  });","file":"schemas.js","skipped":false,"dir":"test"},{"name":"enforces required property for recursively shown field with boolean","suites":["Schemas"],"updatePoint":{"line":1367,"column":73,"index":37421},"line":1367,"code":"  it('enforces required property for recursively shown field with boolean', async () => {\n    const schema = apos.schema.compose({\n      addFields: [{\n        name: 'age',\n        type: 'integer',\n        required: true,\n        if: {\n          ageOrShoeSize: 'age'\n        }\n      }, {\n        name: 'shoeSize',\n        type: 'integer',\n        required: false,\n        if: {\n          ageOrShoeSize: 'shoeSize'\n        }\n      }, {\n        name: 'ageOrShoeSize',\n        type: 'select',\n        choices: [{\n          label: 'age',\n          value: 'age'\n        }, {\n          label: 'shoeSize',\n          value: 'shoeSize'\n        }],\n        if: {\n          doWeCare: true\n        }\n      }, {\n        name: 'doWeCare',\n        type: 'boolean'\n      }]\n    });\n    await testSchemaError(schema, {\n      ageOrShoeSize: 'age',\n      doWeCare: true,\n      age: null\n    }, 'age', 'required');\n  });","file":"schemas.js","skipped":false,"dir":"test"},{"name":"should be a property of the apos object","suites":["Search"],"updatePoint":{"line":14,"column":45,"index":294},"line":14,"code":"  it('should be a property of the apos object', async () => {\n    apos = await t.create({\n      root: module,\n      modules: {\n        events: {\n          extend: '@apostrophecms/piece-type',\n          options: {\n            name: 'event',\n            label: 'Event'\n          }\n        }\n      }\n    });\n    assert(apos.search);\n  });","file":"search.js","skipped":false,"dir":"test"},{"name":"should add highSearchText, highSearchWords, lowSearchText, searchSummary to all docs on insert","suites":["Search"],"updatePoint":{"line":29,"column":100,"index":685},"line":29,"code":"  it('should add highSearchText, highSearchWords, lowSearchText, searchSummary to all docs on insert', async () => {\n    const req = apos.task.getReq();\n    await apos.doc.insert(req, {\n      title: 'Testing Search Event',\n      type: 'event',\n      slug: 'search-test-event'\n    });\n    const doc = await apos.doc.find(req, {\n      slug: 'search-test-event'\n    }).toObject();\n    assert(doc.highSearchText);\n    assert(doc.highSearchWords);\n    assert(doc.lowSearchText);\n    assert(doc.searchSummary !== undefined);\n    assert(doc.highSearchText.match(/testing/));\n    assert(_.includes(doc.highSearchWords, 'testing'));\n  });","file":"search.js","skipped":false,"dir":"test"},{"name":"should exist","suites":["Soft Redirects"],"updatePoint":{"line":11,"column":18,"index":231},"line":11,"code":"  it('should exist', async () => {\n    apos = await t.create({\n      root: module,\n      modules: {\n        '@apostrophecms/page': {\n          options: {\n            park: [{\n              parkedId: 'child',\n              title: 'Child',\n              slug: '/child',\n              type: 'default-page'\n            }]\n          }\n        },\n        'default-page': {}\n      }\n    });\n    assert(apos.modules['@apostrophecms/soft-redirect']);\n  });","file":"soft-redirects.js","skipped":false,"dir":"test"},{"name":"should be able to serve the /child page (which also populates historicUrls)","suites":["Soft Redirects"],"updatePoint":{"line":30,"column":81,"index":742},"line":30,"code":"  it('should be able to serve the /child page (which also populates historicUrls)', async () => {\n    const body = await apos.http.get('/child'); // Did we get our page back?\n\n    assert(body.match(/Default Page Template/));\n  });","file":"soft-redirects.js","skipped":false,"dir":"test"},{"name":"should be able to change the URL via db","suites":["Soft Redirects"],"updatePoint":{"line":35,"column":45,"index":937},"line":35,"code":"  it('should be able to change the URL via db', async () => {\n    return apos.doc.db.updateOne({\n      slug: '/child',\n      aposLocale: 'en:published'\n    }, {\n      $set: {\n        slug: '/child-moved'\n      }\n    });\n  });","file":"soft-redirects.js","skipped":false,"dir":"test"},{"name":"should be able to serve the page at its new URL","suites":["Soft Redirects"],"updatePoint":{"line":45,"column":53,"index":1171},"line":45,"code":"  it('should be able to serve the page at its new URL', async () => {\n    const body = await apos.http.get('/child-moved'); // Did we get our page back?\n\n    assert(body.match(/Default Page Template/));\n  });","file":"soft-redirects.js","skipped":false,"dir":"test"},{"name":"should be able to serve the page at its old URL too, via redirect","suites":["Soft Redirects"],"updatePoint":{"line":50,"column":71,"index":1398},"line":50,"code":"  it('should be able to serve the page at its old URL too, via redirect', async () => {\n    const response = await apos.http.get('/child', {\n      followRedirect: false,\n      fullResponse: true,\n      redirect: 'manual'\n    }); // Is our status code good?\n\n    assert.strictEqual(response.status, 302); // Are we going to be redirected to our page?\n\n    assert.strictEqual(response.headers.location, `${apos.http.getBase()}/child-moved`);\n  });","file":"soft-redirects.js","skipped":false,"dir":"test"},{"name":"should exist","suites":["Soft Redirects - with `statusCode` option"],"updatePoint":{"line":67,"column":18,"index":1952},"line":67,"code":"  it('should exist', async () => {\n    apos = await t.create({\n      root: module,\n      modules: {\n        '@apostrophecms/page': {\n          options: {\n            park: [{\n              parkedId: 'child',\n              title: 'Child',\n              slug: '/child',\n              type: 'default-page'\n            }]\n          }\n        },\n        '@apostrophecms/soft-redirect': {\n          options: {\n            statusCode: 301\n          }\n        },\n        'default-page': {}\n      }\n    });\n    assert(apos.modules['@apostrophecms/soft-redirect']);\n    assert.strictEqual(apos.modules['@apostrophecms/soft-redirect'].options.statusCode, 301);\n  });","file":"soft-redirects.js","skipped":false,"dir":"test"},{"name":"should be able to serve the /child page (which also populates historicUrls)","suites":["Soft Redirects - with `statusCode` option"],"updatePoint":{"line":92,"column":81,"index":2671},"line":92,"code":"  it('should be able to serve the /child page (which also populates historicUrls)', async () => {\n    const body = await apos.http.get('/child'); // Did we get our page back?\n\n    assert(body.match(/Default Page Template/));\n  });","file":"soft-redirects.js","skipped":false,"dir":"test"},{"name":"should be able to change the URL via db","suites":["Soft Redirects - with `statusCode` option"],"updatePoint":{"line":97,"column":45,"index":2866},"line":97,"code":"  it('should be able to change the URL via db', async () => {\n    return apos.doc.db.updateOne({\n      slug: '/child',\n      aposLocale: 'en:published'\n    }, {\n      $set: {\n        slug: '/child-moved'\n      }\n    });\n  });","file":"soft-redirects.js","skipped":false,"dir":"test"},{"name":"should be able to serve the page at its new URL","suites":["Soft Redirects - with `statusCode` option"],"updatePoint":{"line":107,"column":53,"index":3100},"line":107,"code":"  it('should be able to serve the page at its new URL', async () => {\n    const body = await apos.http.get('/child-moved'); // Did we get our page back?\n\n    assert(body.match(/Default Page Template/));\n  });","file":"soft-redirects.js","skipped":false,"dir":"test"},{"name":"should be able to serve the page at its old URL too, via redirect","suites":["Soft Redirects - with `statusCode` option"],"updatePoint":{"line":112,"column":71,"index":3327},"line":112,"code":"  it('should be able to serve the page at its old URL too, via redirect', async () => {\n    const response = await apos.http.get('/child', {\n      fullResponse: true,\n      redirect: 'manual'\n    }); // Is our status code good?\n\n    assert.strictEqual(response.status, 301); // Are we going to be redirected to our page?\n\n    assert.strictEqual(response.headers.location, `${apos.http.getBase()}/child-moved`);\n  });","file":"soft-redirects.js","skipped":false,"dir":"test"},{"name":"should should exist on the apos object","suites":["static i18n"],"updatePoint":{"line":12,"column":44,"index":289},"line":12,"code":"  it('should should exist on the apos object', async function () {\n    apos = await t.create({\n      root: module,\n      modules: {\n        '@apostrophecms/i18n': {\n          options: {\n            locales: {\n              en: {},\n              fr: {\n                prefix: '/fr'\n              }\n            }\n          }\n        },\n        example: {\n          options: {\n            i18n: {}\n          }\n        },\n        'apos-fr': {\n          options: {\n            i18n: {\n              // Legacy technique must work\n              ns: 'apostrophe'\n            }\n          }\n        },\n        // A base class that contributes some namespaced phrases in the new style way (subdirs)\n        'base-type': {\n          instantiate: false\n        },\n        // Also contributes namespaced phrases in the new style way (subdirs)\n        // plus default locale phrases in the root i18n folder\n        subtype: {\n          extend: 'base-type'\n        }\n      }\n    });\n    assert(apos.i18n);\n    assert(apos.i18n.i18next);\n  });","file":"static-i18n.js","skipped":false,"dir":"test"},{"name":"should localize apostrophe namespace phrases in the default locale","suites":["static i18n"],"updatePoint":{"line":53,"column":72,"index":1344},"line":53,"code":"  it('should localize apostrophe namespace phrases in the default locale', function () {\n    assert.strictEqual(apos.task.getReq().t('apostrophe:notFoundPageTitle'), '404 - Page not found');\n  });","file":"static-i18n.js","skipped":false,"dir":"test"},{"name":"should localize default namespace phrases contributed by a project level module","suites":["static i18n"],"updatePoint":{"line":56,"column":85,"index":1554},"line":56,"code":"  it('should localize default namespace phrases contributed by a project level module', function () {\n    assert.strictEqual(apos.task.getReq().t('projectLevelPhrase'), 'Project Level Phrase');\n  });","file":"static-i18n.js","skipped":false,"dir":"test"},{"name":"should merge translations in different languages of the same phrases from @apostrophecms/i18n and a different module","suites":["static i18n"],"updatePoint":{"line":59,"column":122,"index":1791},"line":59,"code":"  it('should merge translations in different languages of the same phrases from @apostrophecms/i18n and a different module', function () {\n    assert.strictEqual(apos.task.getReq().t('apostrophe:richTextAlignCenter'), 'Align Center');\n  });","file":"static-i18n.js","skipped":false,"dir":"test"},{"name":"should merge translations in different languages of the same phrases from @apostrophecms/i18n and a different module","suites":["static i18n"],"updatePoint":{"line":62,"column":122,"index":2032},"line":62,"code":"  it('should merge translations in different languages of the same phrases from @apostrophecms/i18n and a different module', function () {\n    // je suis désolé re: Google Translate-powered French test, feel free to PR better example\n    assert.strictEqual(apos.task.getReq({\n      locale: 'fr'\n    }).t('apostrophe:richTextAlignCenter'), 'Aligner Le Centre');\n  });","file":"static-i18n.js","skipped":false,"dir":"test"},{"name":"should fetch default locale phrases from main i18n dir with no i18n option necessary","suites":["static i18n"],"updatePoint":{"line":68,"column":90,"index":2367},"line":68,"code":"  it('should fetch default locale phrases from main i18n dir with no i18n option necessary', function () {\n    assert.strictEqual(apos.task.getReq().t('defaultTestOne'), 'Default Test One');\n  });","file":"static-i18n.js","skipped":false,"dir":"test"},{"name":"should fetch custom locale phrases from corresponding subdir","suites":["static i18n"],"updatePoint":{"line":71,"column":66,"index":2540},"line":71,"code":"  it('should fetch custom locale phrases from corresponding subdir', function () {\n    assert.strictEqual(apos.task.getReq().t('custom:customTestTwo'), 'Custom Test Two From Base Type');\n    assert.strictEqual(apos.task.getReq().t('custom:customTestThree'), 'Custom Test Three From Subtype');\n  });","file":"static-i18n.js","skipped":false,"dir":"test"},{"name":"last appearance in inheritance + configuration order wins","suites":["static i18n"],"updatePoint":{"line":75,"column":63,"index":2836},"line":75,"code":"  it('last appearance in inheritance + configuration order wins', function () {\n    assert.strictEqual(apos.task.getReq().t('custom:customTestOne'), 'Custom Test One From Subtype');\n  });","file":"static-i18n.js","skipped":false,"dir":"test"},{"name":"should honor the browser: true flag in the i18n section of an index.js file","suites":["static i18n"],"updatePoint":{"line":78,"column":81,"index":3042},"line":78,"code":"  it('should honor the browser: true flag in the i18n section of an index.js file', function () {\n    const browserData = apos.i18n.getBrowserData(apos.task.getReq());\n    assert.strictEqual(browserData.i18n.en.custom.customTestOne, 'Custom Test One From Subtype');\n  });","file":"static-i18n.js","skipped":false,"dir":"test"},{"name":"should allow a project relying on a package.json in its parent folder","suites":["Project with package.json in its parent folder works"],"updatePoint":{"line":10,"column":75,"index":294},"line":10,"code":"  it('should allow a project relying on a package.json in its parent folder', async function () {\n    let apos;\n\n    try {\n      apos = await t.create(require('./subdir-project/app.js')); // Sniff test: a normal apos object\n\n      assert(apos.user);\n    } finally {\n      if (apos) {\n        await t.destroy(apos);\n      }\n    }\n\n    assert(apos);\n  });","file":"subdir-project.js","skipped":false,"dir":"test"},{"name":"should have a templates property","suites":["Templates"],"updatePoint":{"line":31,"column":38,"index":875},"line":31,"code":"  it('should have a templates property', async () => {\n    apos = await t.create({\n      root: module,\n      modules: {\n        'express-test': {},\n        'template-test': {},\n        'template-subclass-test': {},\n        'template-options-test': {},\n        'inject-test': {},\n        'with-layout-page': {\n          extend: '@apostrophecms/page-type'\n        },\n        'fragment-page': {\n          components(self) {\n            return {\n              async test(req, input) {\n                // Be very async\n                await Promise.delay(100);\n                input.afterDelay = true;\n                return input;\n              }\n\n            };\n          }\n\n        },\n        'fragment-all': {\n          components(self) {\n            return {\n              async test(req, input) {\n                // Be very async\n                await Promise.delay(100);\n                input.afterDelay = true;\n                return input;\n              }\n\n            };\n          }\n\n        }\n      }\n    });\n  });","file":"templates.js","skipped":false,"dir":"test"},{"name":"should be able to render a template relative to a module","suites":["Templates"],"updatePoint":{"line":74,"column":62,"index":1920},"line":74,"code":"  it('should be able to render a template relative to a module', async function () {\n    const req = apos.task.getAnonReq();\n    const result = await apos.modules['template-test'].render(req, 'test', {\n      age: 50\n    });\n    assert(result === '<h1>50</h1>\\n');\n  });","file":"templates.js","skipped":false,"dir":"test"},{"name":"should respect templateData at module level","suites":["Templates"],"updatePoint":{"line":81,"column":49,"index":2177},"line":81,"code":"  it('should respect templateData at module level', async function () {\n    const req = apos.task.getAnonReq();\n    const result = await apos.modules['template-test'].render(req, 'test');\n    assert(result === '<h1>30</h1>\\n');\n  });","file":"templates.js","skipped":false,"dir":"test"},{"name":"should respect template overrides","suites":["Templates"],"updatePoint":{"line":86,"column":39,"index":2401},"line":86,"code":"  it('should respect template overrides', async function () {\n    const req = apos.task.getAnonReq();\n    const result = await apos.modules['template-subclass-test'].render(req, 'override-test');\n    assert(result === '<h1>I am overridden</h1>\\n');\n  });","file":"templates.js","skipped":false,"dir":"test"},{"name":"should inherit in the absence of overrides","suites":["Templates"],"updatePoint":{"line":91,"column":48,"index":2665},"line":91,"code":"  it('should inherit in the absence of overrides', async function () {\n    const req = apos.task.getAnonReq();\n    const result = await apos.modules['template-subclass-test'].render(req, 'inherit-test');\n    assert(result === '<h1>I am inherited</h1>\\n');\n  });","file":"templates.js","skipped":false,"dir":"test"},{"name":"should be able to see the options of the module via module.options","suites":["Templates"],"updatePoint":{"line":96,"column":72,"index":2951},"line":96,"code":"  it('should be able to see the options of the module via module.options', async function () {\n    const req = apos.task.getAnonReq();\n    const result = await apos.modules['template-options-test'].render(req, 'options-test');\n    assert(result.match(/nifty/));\n  });","file":"templates.js","skipped":false,"dir":"test"},{"name":"should be able to call helpers on the modules object","suites":["Templates"],"updatePoint":{"line":101,"column":58,"index":3205},"line":101,"code":"  it('should be able to call helpers on the modules object', async function () {\n    const req = apos.task.getAnonReq();\n    const result = await apos.modules['template-options-test'].render(req, 'options-test');\n    assert(result.match(/4/));\n  });","file":"templates.js","skipped":false,"dir":"test"},{"name":"should render pages successfully with outerLayout, with core data-apos attribute","suites":["Templates"],"updatePoint":{"line":106,"column":86,"index":3483},"line":106,"code":"  it('should render pages successfully with outerLayout, with core data-apos attribute', async function () {\n    const req = apos.task.getAnonReq();\n    const result = await apos.modules['template-test'].renderPage(req, 'page');\n    const $ = cheerio.load(result);\n    const $body = $('body');\n    assert($body.length);\n    const aposData = JSON.parse($body.attr('data-apos'));\n    assert(aposData);\n    assert(aposData.csrfCookieName);\n    assert(!aposData.modules['@apostrophecms/admin-bar']);\n    assert(result.indexOf('<title>I am the title</title>') !== -1);\n    assert(result.indexOf('<h2>I am the main content</h2>') !== -1);\n  });","file":"templates.js","skipped":false,"dir":"test"},{"name":"should render pages successfully with outerLayout for admin user, with expanded data-apos attribute","suites":["Templates"],"updatePoint":{"line":119,"column":105,"index":4141},"line":119,"code":"  it('should render pages successfully with outerLayout for admin user, with expanded data-apos attribute', async function () {\n    const req = apos.task.getReq();\n    const result = await apos.modules['template-test'].renderPage(req, 'page');\n    const $ = cheerio.load(result);\n    const $body = $('body');\n    assert($body.length);\n    const aposData = JSON.parse($body.attr('data-apos'));\n    assert(aposData);\n    assert(aposData.modules['@apostrophecms/admin-bar'].items.length);\n    assert(result.indexOf('<title>I am the title</title>') !== -1);\n    assert(result.indexOf('<h2>I am the main content</h2>') !== -1);\n  });","file":"templates.js","skipped":false,"dir":"test"},{"name":"cross-module-included files should be able to include/extend other files relative to their own module","suites":["Templates"],"updatePoint":{"line":131,"column":107,"index":4772},"line":131,"code":"  it('cross-module-included files should be able to include/extend other files relative to their own module', async function () {\n    const req = apos.task.getAnonReq();\n    const result = await apos.modules['template-test'].renderPage(req, 'pageWithLayout');\n    assert(result.indexOf('<title>I am the title</title>') !== -1);\n    assert(result.indexOf('<h2>I am the inner content</h2>') !== -1);\n    assert(result.indexOf('<h3>I am in the layout</h3>') !== -1);\n    assert(result.indexOf('<p>I am included</p>') !== -1);\n  });","file":"templates.js","skipped":false,"dir":"test"},{"name":"should render pages successfully with prepend and append to locations","suites":["Templates"],"updatePoint":{"line":139,"column":75,"index":5269},"line":139,"code":"  it('should render pages successfully with prepend and append to locations', async function () {\n    const req = apos.task.getReq();\n    const result = await apos.modules['with-layout-page'].renderPage(req, 'page');\n    const titleIndex = result.indexOf('<title>');\n    const beforeTestIndex = result.indexOf('<meta name=\"prepend-head-test\" />');\n    const afterTestIndex = result.indexOf('<meta name=\"append-head-test\" />');\n    const bodyIndex = result.indexOf('<body');\n    const appendBody = result.indexOf('<h4>append-body-test</h4>');\n    assert(titleIndex !== -1);\n    assert(beforeTestIndex !== -1);\n    assert(afterTestIndex !== -1);\n    assert(bodyIndex !== -1);\n    assert(appendBody !== -1);\n    assert(beforeTestIndex < titleIndex);\n    assert(afterTestIndex > titleIndex);\n    assert(afterTestIndex < bodyIndex);\n  });","file":"templates.js","skipped":false,"dir":"test"},{"name":"should not escape <br /> generated by the nlbr filter, but should escape tags in its input","suites":["Templates"],"updatePoint":{"line":156,"column":96,"index":6124},"line":156,"code":"  it('should not escape <br /> generated by the nlbr filter, but should escape tags in its input', async function () {\n    const req = apos.task.getAnonReq();\n    const result = await apos.modules['template-test'].render(req, 'testWithNlbrFilter');\n    assert.strictEqual(result, '<p>first line<br />\\nsecond line<br />\\n&lt;a href=&#34;javascript:alert(\\'oh no\\')&#34;&gt;CSRF attempt&lt;/a&gt;</p>\\n');\n  });","file":"templates.js","skipped":false,"dir":"test"},{"name":"should not escape <br /> generated by the nlp filter, but should escape tags in its input","suites":["Templates"],"updatePoint":{"line":161,"column":95,"index":6534},"line":161,"code":"  it('should not escape <br /> generated by the nlp filter, but should escape tags in its input', async function () {\n    const req = apos.task.getAnonReq();\n    const result = await apos.modules['template-test'].render(req, 'testWithNlpFilter');\n    assert.strictEqual(result, '<p>first line</p>\\n<p>second line</p>\\n<p>&lt;a href=&#34;javascript:alert(\\'oh no\\')&#34;&gt;CSRF attempt&lt;/a&gt;</p>\\n');\n  });","file":"templates.js","skipped":false,"dir":"test"},{"name":"should not escape <br /> generated by the nlbr filter or markup in the test input","suites":["Templates"],"updatePoint":{"line":166,"column":87,"index":6937},"line":166,"code":"  it('should not escape <br /> generated by the nlbr filter or markup in the test input', async function () {\n    const req = apos.task.getAnonReq();\n    const result = await apos.modules['template-test'].render(req, 'testWithNlbrFilterSafe');\n    assert.strictEqual(result, '<p>first line<br />\\nsecond line<br />\\n<a href=\"http://niceurl.com\">This is okay</a></p>\\n');\n  });","file":"templates.js","skipped":false,"dir":"test"},{"name":"should render fragments containing async components correctly","suites":["Templates"],"updatePoint":{"line":171,"column":67,"index":7294},"line":171,"code":"  it('should render fragments containing async components correctly', async () => {\n    const req = apos.task.getReq();\n    const result = await apos.modules['fragment-page'].renderPage(req, 'page');\n    const aboveFragment = result.indexOf('Above Fragment');\n    const beforeComponent = result.indexOf('Before Component');\n    const componentText = result.indexOf('Component Text');\n    const afterDelay = result.indexOf('After Delay');\n    const afterComponent = result.indexOf('After Component');\n    const belowFragment = result.indexOf('Below Fragment');\n    assert(aboveFragment !== -1);\n    assert(beforeComponent !== -1);\n    assert(componentText !== -1);\n    assert(afterDelay !== -1);\n    assert(afterComponent !== -1);\n    assert(belowFragment !== -1);\n    assert(aboveFragment < beforeComponent);\n    assert(beforeComponent < componentText);\n    assert(componentText < afterDelay);\n    assert(afterDelay < afterComponent);\n    assert(afterComponent < belowFragment);\n  });","file":"templates.js","skipped":false,"dir":"test"},{"name":"should render fragment without passing any keyword arguments","suites":["Templates"],"updatePoint":{"line":192,"column":66,"index":8278},"line":192,"code":"  it('should render fragment without passing any keyword arguments', async () => {\n    const req = apos.task.getReq();\n    const result = await apos.modules['fragment-all'].renderPage(req, 'page');\n    const data = parseOutput(result, 'test1');\n    assert.deepStrictEqual(data, ['pos1', 'pos2', 'kw1_default', 'kw2_default', 'kw3_default']);\n  });","file":"templates.js","skipped":false,"dir":"test"},{"name":"should support keyword arguments and render macros and fragments from other fragments","suites":["Templates"],"updatePoint":{"line":198,"column":91,"index":8651},"line":198,"code":"  it('should support keyword arguments and render macros and fragments from other fragments', async () => {\n    const req = apos.task.getReq();\n    const result = await apos.modules['fragment-all'].renderPage(req, 'page');\n    const data = parseOutput(result, 'test2');\n    assert.deepStrictEqual(data, ['Above Fragment', 'pos1', 'pos2', 'pos3', 'kw1_default', 'kw2', 'kw3_default', 'Below Fragment']);\n  });","file":"templates.js","skipped":false,"dir":"test"},{"name":"should render rendercall blocks","suites":["Templates"],"updatePoint":{"line":204,"column":37,"index":9006},"line":204,"code":"  it('should render rendercall blocks', async () => {\n    const req = apos.task.getReq();\n    const result = await apos.modules['fragment-all'].renderPage(req, 'page');\n    const data = parseOutput(result, 'test3');\n    assert.deepStrictEqual(data, ['Above Call Fragment', 'pos1', 'pos2', 'pos3', 'Start Call Body', 'Text is called', 'After Delay', 'End Call Body', 'kw1_default', 'kw2', 'kw3_default', 'Below Call Fragment']);\n  });","file":"templates.js","skipped":false,"dir":"test"},{"name":"should skip positional arguments when there is keyword arguments (1)","suites":["Templates"],"updatePoint":{"line":210,"column":74,"index":9477},"line":210,"code":"  it('should skip positional arguments when there is keyword arguments (1)', async () => {\n    const req = apos.task.getReq();\n    const result = await apos.modules['fragment-all'].renderPage(req, 'page');\n    const data = parseOutput(result, 'issue_3056_1');\n    assert.deepStrictEqual(data, ['val_1', 'val_', 'val_9', 'val_4']);\n  });","file":"templates.js","skipped":false,"dir":"test"},{"name":"should skip positional arguments when there is keyword arguments (2)","suites":["Templates"],"updatePoint":{"line":216,"column":74,"index":9814},"line":216,"code":"  it('should skip positional arguments when there is keyword arguments (2)', async () => {\n    const req = apos.task.getReq();\n    const result = await apos.modules['fragment-all'].renderPage(req, 'page');\n    const data = parseOutput(result, 'issue_3056_2');\n    assert.deepStrictEqual(data, ['val_1', 'val_', 'val_9', 'val_4']);\n  });","file":"templates.js","skipped":false,"dir":"test"},{"name":"should filter out unknown keyword arguments","suites":["Templates"],"updatePoint":{"line":222,"column":49,"index":10126},"line":222,"code":"  it('should filter out unknown keyword arguments', async () => {\n    const req = apos.task.getReq();\n    const result = await apos.modules['fragment-all'].renderPage(req, 'page');\n    const data = parseOutput(result, 'issue_3102');\n    assert.deepStrictEqual(data, ['val_', 'val_1', 'val_2', 'val_']);\n  });","file":"templates.js","skipped":false,"dir":"test"},{"name":"should support apos helpers and localization in fragments","suites":["Templates"],"updatePoint":{"line":228,"column":63,"index":10449},"line":228,"code":"  it('should support apos helpers and localization in fragments', async () => {\n    const req = apos.task.getReq();\n    const result = await apos.modules['fragment-all'].renderPage(req, 'aux-test');\n    assert(result.includes('gee-whiz'));\n    assert(result.includes('Modify / Delete'));\n  });","file":"templates.js","skipped":false,"dir":"test"},{"name":"should exist on the apos object","suites":["Urls"],"updatePoint":{"line":14,"column":37,"index":285},"line":14,"code":"  it('should exist on the apos object', async () => {\n    apos = await t.create({\n      root: module\n    });\n    assert(apos.url);\n  }); // URLS METHODS ------------------------------------------------------- //","file":"urls.js","skipped":false,"dir":"test"},{"name":"returns a URL unmodified","suites":["Urls","methods","test apos.url.build"],"updatePoint":{"line":23,"column":34,"index":581},"line":23,"code":"      it('returns a URL unmodified', function () {\n        start = new Date().getTime();\n        assert(apos.url.build('/events') === '/events');\n      });","file":"urls.js","skipped":false,"dir":"test"},{"name":"returns the URL \"#\" unmodified","suites":["Urls","methods","test apos.url.build"],"updatePoint":{"line":27,"column":40,"index":743},"line":27,"code":"      it('returns the URL \"#\" unmodified', function () {\n        try {\n          assert(apos.url.build('#') === '#');\n        } catch (e) {\n          console.error(e.stack);\n        }\n      });","file":"urls.js","skipped":false,"dir":"test"},{"name":"adds a single parameter to a queryless URL","suites":["Urls","methods","test apos.url.build"],"updatePoint":{"line":34,"column":52,"index":949},"line":34,"code":"      it('adds a single parameter to a queryless URL', function () {\n        assert(apos.url.build('/events', {\n          tag: 'blue'\n        }) === '/events?tag=blue');\n      });","file":"urls.js","skipped":false,"dir":"test"},{"name":"appends a parameter to a URL with a query","suites":["Urls","methods","test apos.url.build"],"updatePoint":{"line":39,"column":51,"index":1128},"line":39,"code":"      it('appends a parameter to a URL with a query', function () {\n        // Neither of these is wrong\n        const options = ['/events?tag=blue&page=5', '/events?page=5&tag=blue'];\n        assert(_.includes(options, apos.url.build('/events?page=5', {\n          tag: 'blue'\n        })));\n      });","file":"urls.js","skipped":false,"dir":"test"},{"name":"replaces parameters in the URL","suites":["Urls","methods","test apos.url.build"],"updatePoint":{"line":46,"column":40,"index":1418},"line":46,"code":"      it('replaces parameters in the URL', function () {\n        assert(apos.url.build('/events?tag=blue', {\n          tag: 'red'\n        }) === '/events?tag=red');\n      });","file":"urls.js","skipped":false,"dir":"test"},{"name":"removes parameters","suites":["Urls","methods","test apos.url.build"],"updatePoint":{"line":51,"column":28,"index":1581},"line":51,"code":"      it('removes parameters', function () {\n        assert(apos.url.build('/events?tag=blue', {\n          tag: null\n        }) === '/events');\n      });","file":"urls.js","skipped":false,"dir":"test"},{"name":"correctly allows the last data object to win","suites":["Urls","methods","test apos.url.build"],"updatePoint":{"line":56,"column":54,"index":1761},"line":56,"code":"      it('correctly allows the last data object to win', function () {\n        assert(apos.url.build('/events', {\n          tag: 'red'\n        }, {\n          tag: 'blue'\n        }) === '/events?tag=blue');\n      });","file":"urls.js","skipped":false,"dir":"test"},{"name":"places path properties in the path","suites":["Urls","methods","test apos.url.build"],"updatePoint":{"line":63,"column":44,"index":1967},"line":63,"code":"      it('places path properties in the path', function () {\n        assert(apos.url.build('/events', ['year', 'month'], {\n          year: '2013',\n          month: '05',\n          tag: 'red'\n        }) === '/events/2013/05?tag=red');\n      });","file":"urls.js","skipped":false,"dir":"test"},{"name":"switches to placing path properties in the query if it encounters a non-slugify-compliant property","suites":["Urls","methods","test apos.url.build"],"updatePoint":{"line":70,"column":108,"index":2275},"line":70,"code":"      it('switches to placing path properties in the query if it encounters a non-slugify-compliant property', function () {\n        assert(apos.url.build('/events', ['year', 'month'], {\n          year: '2013!@#@',\n          month: '05',\n          tag: 'red'\n        }) === '/events?year=2013%21%40%23%40&month=05&tag=red');\n      });","file":"urls.js","skipped":false,"dir":"test"},{"name":"does the right thing for a case that crashed once","suites":["Urls","methods","test apos.url.build"],"updatePoint":{"line":77,"column":59,"index":2561},"line":77,"code":"      it('does the right thing for a case that crashed once', function () {\n        assert(apos.url.build('/events', ['year', 'month'], {}, {}) === '/events');\n      });","file":"urls.js","skipped":false,"dir":"test"},{"name":"correctly allows the last data object to win for a path property","suites":["Urls","methods","test apos.url.build"],"updatePoint":{"line":80,"column":74,"index":2746},"line":80,"code":"      it('correctly allows the last data object to win for a path property', function () {\n        assert(apos.url.build('/events', ['year', 'month'], {\n          year: '2013',\n          month: '01',\n          tag: 'dance'\n        }, {\n          year: 2012,\n          month: '12'\n        }) === '/events/2012/12?tag=dance');\n      });","file":"urls.js","skipped":false,"dir":"test"},{"name":"DR use case #1","suites":["Urls","methods","test apos.url.build"],"updatePoint":{"line":90,"column":24,"index":3031},"line":90,"code":"      it('DR use case #1', function () {\n        assert(apos.url.build('/events', ['year', 'month'], {\n          year: '2013',\n          month: '05',\n          tag: 'dance'\n        }, {\n          tag: 'tour'\n        }) === '/events/2013/05?tag=tour');\n      });","file":"urls.js","skipped":false,"dir":"test"},{"name":"DR use case #2","suites":["Urls","methods","test apos.url.build"],"updatePoint":{"line":99,"column":24,"index":3293},"line":99,"code":"      it('DR use case #2', function () {\n        const result = apos.url.build('/events', ['year', 'month'], {\n          year: '2013',\n          month: '05',\n          tag: 'dance'\n        }, {\n          page: '2'\n        });\n        assert(result === '/events/2013/05?tag=dance&page=2');\n      });","file":"urls.js","skipped":false,"dir":"test"},{"name":"DR use case #3","suites":["Urls","methods","test apos.url.build"],"updatePoint":{"line":109,"column":24,"index":3592},"line":109,"code":"      it('DR use case #3', function () {\n        const result = apos.url.build('/events', ['year', 'month'], {\n          year: '2013',\n          month: '05',\n          tag: 'dance'\n        }, {});\n        assert(result === '/events/2013/05?tag=dance');\n      });","file":"urls.js","skipped":false,"dir":"test"},{"name":"IH use case #1: later objects can prevent path properties from being added","suites":["Urls","methods","test apos.url.build"],"updatePoint":{"line":117,"column":84,"index":3915},"line":117,"code":"      it('IH use case #1: later objects can prevent path properties from being added', function () {\n        const result = apos.url.build('/calendar', ['year', 'month'], {\n          year: '2014',\n          month: '01',\n          tag: undefined\n        }, {\n          year: null,\n          month: null\n        });\n        assert(result === '/calendar');\n      });","file":"urls.js","skipped":false,"dir":"test"},{"name":"Preserves hashes","suites":["Urls","methods","test apos.url.build"],"updatePoint":{"line":128,"column":26,"index":4221},"line":128,"code":"      it('Preserves hashes', function () {\n        const result = apos.url.build('/calendar#skipdown', ['year', 'month'], {\n          year: '2014',\n          month: '01',\n          tag: 'blue'\n        });\n        assert(result === '/calendar/2014/01?tag=blue#skipdown');\n      });","file":"urls.js","skipped":false,"dir":"test"},{"name":"Adds an array when $addToSet is used","suites":["Urls","methods","test apos.url.build"],"updatePoint":{"line":136,"column":46,"index":4522},"line":136,"code":"      it('Adds an array when $addToSet is used', function () {\n        const result = apos.url.build('/events', {\n          colors: {\n            $addToSet: 'blue'\n          }\n        });\n        assert(result === '/events?colors%5B0%5D=blue');\n      });","file":"urls.js","skipped":false,"dir":"test"},{"name":"Adds to existing query string array when $addToSet is used","suites":["Urls","methods","test apos.url.build"],"updatePoint":{"line":144,"column":68,"index":4799},"line":144,"code":"      it('Adds to existing query string array when $addToSet is used', function () {\n        const result = apos.url.build('/events?colors[]=purple&colors[]=red', {\n          colors: {\n            $addToSet: 'blue'\n          }\n        });\n        assert(result === '/events?colors%5B0%5D=purple&colors%5B1%5D=red&colors%5B2%5D=blue');\n      });","file":"urls.js","skipped":false,"dir":"test"},{"name":"Adds to existing URI encoded query string array when $addToSet is used","suites":["Urls","methods","test apos.url.build"],"updatePoint":{"line":152,"column":80,"index":5156},"line":152,"code":"      it('Adds to existing URI encoded query string array when $addToSet is used', function () {\n        const result = apos.url.build('/events?colors%5B0%5D=purple&colors%5B1%5D=red&colors%5B2%5D=blue', {\n          colors: {\n            $addToSet: 'green'\n          }\n        });\n        assert(result === '/events?colors%5B0%5D=purple&colors%5B1%5D=red&colors%5B2%5D=blue&colors%5B3%5D=green');\n      });","file":"urls.js","skipped":false,"dir":"test"},{"name":"Does not create duplicates when $addToSet is used","suites":["Urls","methods","test apos.url.build"],"updatePoint":{"line":160,"column":59,"index":5542},"line":160,"code":"      it('Does not create duplicates when $addToSet is used', function () {\n        const result = apos.url.build('/events?colors%5B0%5D=purple&colors%5B1%5D=red&colors%5B2%5D=blue', {\n          colors: {\n            $addToSet: 'blue'\n          }\n        });\n        assert(result === '/events?colors%5B0%5D=purple&colors%5B1%5D=red&colors%5B2%5D=blue');\n      });","file":"urls.js","skipped":false,"dir":"test"},{"name":"Treats numbers and strings the same when preventing duplicates","suites":["Urls","methods","test apos.url.build"],"updatePoint":{"line":168,"column":72,"index":5920},"line":168,"code":"      it('Treats numbers and strings the same when preventing duplicates', function () {\n        const result = apos.url.build('/events?colors[]=4&colors[]=5', {\n          colors: {\n            $addToSet: 5\n          }\n        });\n        assert(result === '/events?colors%5B0%5D=4&colors%5B1%5D=5');\n      });","file":"urls.js","skipped":false,"dir":"test"},{"name":"Removes from existing query string array when $pull is used","suites":["Urls","methods","test apos.url.build"],"updatePoint":{"line":176,"column":69,"index":6228},"line":176,"code":"      it('Removes from existing query string array when $pull is used', function () {\n        const result = apos.url.build('/events?colors[]=purple&colors[]=red', {\n          colors: {\n            $pull: 'red'\n          }\n        });\n        assert(result === '/events?colors%5B0%5D=purple');\n      });","file":"urls.js","skipped":false,"dir":"test"},{"name":"Removes array entirely when $pull removes last item","suites":["Urls","methods","test apos.url.build"],"updatePoint":{"line":184,"column":61,"index":6524},"line":184,"code":"      it('Removes array entirely when $pull removes last item', function () {\n        const result = apos.url.build('/events?colors[]=purple', {\n          colors: {\n            $pull: 'purple'\n          }\n        });\n        assert(result === '/events');\n      });","file":"urls.js","skipped":false,"dir":"test"},{"name":"Behaves reasonably when a nonexistent item is removed","suites":["Urls","methods","test apos.url.build"],"updatePoint":{"line":192,"column":63,"index":6791},"line":192,"code":"      it('Behaves reasonably when a nonexistent item is removed', function () {\n        const result = apos.url.build('/events?colors[]=purple', {\n          colors: {\n            $pull: 'blue'\n          }\n        });\n        assert(result === '/events?colors%5B0%5D=purple');\n      });","file":"urls.js","skipped":false,"dir":"test"},{"name":"Takes less than 250 msec to run these tests","suites":["Urls","methods","test apos.url.build"],"updatePoint":{"line":200,"column":53,"index":7067},"line":200,"code":"      it('Takes less than 250 msec to run these tests', function () {\n        const end = new Date().getTime();\n        assert(end - start < 250);\n      });","file":"urls.js","skipped":false,"dir":"test"},{"name":"should initialize","suites":["Users"],"updatePoint":{"line":13,"column":23,"index":271},"line":13,"code":"  it('should initialize', async () => {\n    apos = await t.create({\n      root: module\n    });\n  }); // Test pieces.newInstance()","file":"users.js","skipped":false,"dir":"test"},{"name":"should be able to insert a new user with an admin req","suites":["Users"],"updatePoint":{"line":19,"column":59,"index":438},"line":19,"code":"  it('should be able to insert a new user with an admin req', async () => {\n    assert(apos.user.newInstance);\n    const user = apos.user.newInstance();\n    assert(user);\n    user.title = 'Jane Doe';\n    user.username = 'JaneD';\n    user.password = '123password';\n    user.email = 'jane@aol.com';\n    user.role = 'admin';\n    assert(user.type === '@apostrophecms/user');\n    assert(apos.user.insert);\n    await apos.user.insert(apos.task.getAdminReq(), user);\n  });","file":"users.js","skipped":false,"dir":"test"},{"name":"should not be able to insert a new user with any non-admin req or role","suites":["Users"],"updatePoint":{"line":32,"column":76,"index":921},"line":32,"code":"  it('should not be able to insert a new user with any non-admin req or role', async () => {\n    assert(apos.user.newInstance);\n    const user = apos.user.newInstance();\n    assert(user);\n    user.title = 'Jim Fake';\n    user.username = 'JimF';\n    user.password = '123fakeguy';\n    user.email = 'jim@fakeohno.coim';\n    user.role = 'admin';\n    assert(user.type === '@apostrophecms/user');\n    assert(apos.user.insert);\n    const getReqMethods = [apos.task.getAnonReq, apos.task.getGuestReq, apos.task.getContributorReq, apos.task.getEditorReq];\n    let caught = 0;\n\n    for (const getReqMethod of getReqMethods) {\n      const req = getReqMethod();\n\n      try {\n        await apos.user.insert(req, user);\n      } catch (e) {\n        assert(e.name === 'forbidden');\n        caught++;\n      }\n    }\n\n    assert(caught === getReqMethods.length);\n  }); // verify a user's password","file":"users.js","skipped":false,"dir":"test"},{"name":"should be able to retrieve a user by their username","suites":["Users"],"updatePoint":{"line":68,"column":57,"index":2182},"line":68,"code":"  it('should be able to retrieve a user by their username', async () => {\n    const user = await apos.user.find(apos.task.getReq(), {\n      username: 'JaneD'\n    }).toObject();\n    assert(user && user.username === 'JaneD');\n    janeId = user._id;\n  });","file":"users.js","skipped":false,"dir":"test"},{"name":"should verify a user password","suites":["Users"],"updatePoint":{"line":75,"column":35,"index":2413},"line":75,"code":"  it('should verify a user password', async () => {\n    const user = await apos.user.find(apos.task.getReq(), {\n      username: 'JaneD'\n    }).toObject();\n    assert(user && user.username === 'JaneD');\n    await apos.user.verifyPassword(user, '123password');\n  });","file":"users.js","skipped":false,"dir":"test"},{"name":"should not verify an incorrect user password","suites":["Users"],"updatePoint":{"line":82,"column":50,"index":2693},"line":82,"code":"  it('should not verify an incorrect user password', async () => {\n    const user = await apos.user.find(apos.task.getReq(), {\n      username: 'JaneD'\n    }).toObject();\n\n    try {\n      await apos.user.verifyPassword(user, '321password'); // Getting this far is bad, the password is intentionally wrong\n\n      assert(false);\n    } catch (e) {\n      assert(e);\n    }\n  });","file":"users.js","skipped":false,"dir":"test"},{"name":"should not be able to insert a new user if their email already exists","suites":["Users"],"updatePoint":{"line":95,"column":75,"index":3091},"line":95,"code":"  it('should not be able to insert a new user if their email already exists', async () => {\n    assert(apos.user.newInstance);\n    const user = apos.user.newInstance();\n    assert(user);\n    user.title = 'Dane Joe';\n    user.username = 'DaneJ';\n    user.password = '321password';\n    user.email = 'jane@aol.com';\n    user.role = 'admin';\n    assert(user.type === '@apostrophecms/user');\n    assert(apos.user.insert);\n\n    try {\n      await apos.user.insert(apos.task.getReq(), user);\n      assert(false);\n    } catch (e) {\n      assert(true);\n    }\n  });","file":"users.js","skipped":false,"dir":"test"},{"name":"should be able to move a user to the archive","suites":["Users"],"updatePoint":{"line":114,"column":50,"index":3621},"line":114,"code":"  it('should be able to move a user to the archive', async () => {\n    const user = await apos.user.find(apos.task.getReq(), {\n      _id: janeId\n    }).toObject();\n    user.archived = true;\n    await apos.user.update(apos.task.getReq(), user);\n    const doc = await apos.doc.db.findOne({\n      _id: user._id,\n      archived: true\n    });\n    assert(doc);\n  });","file":"users.js","skipped":false,"dir":"test"},{"name":"should be able to insert a user with a previously used email if the other is in the archive","suites":["Users"],"updatePoint":{"line":126,"column":97,"index":4029},"line":126,"code":"  it('should be able to insert a user with a previously used email if the other is in the archive', async () => {\n    const user = apos.user.newInstance();\n    user.title = 'Dane Joe';\n    user.username = 'DaneJ';\n    user.password = '321password';\n    user.email = 'jane@aol.com';\n    user.role = 'admin';\n    await apos.user.insert(apos.task.getReq(), user);\n  });","file":"users.js","skipped":false,"dir":"test"},{"name":"should be able to rescue the first user from the archive and the username should revert, but the email should not because it is in use by a newer account","suites":["Users"],"updatePoint":{"line":135,"column":159,"index":4458},"line":135,"code":"  it('should be able to rescue the first user from the archive and the username should revert, but the email should not because it is in use by a newer account', async () => {\n    const user = await apos.user.find(apos.task.getReq(), {\n      _id: janeId\n    }).archived(true).toObject();\n    user.archived = false;\n    await apos.user.update(apos.task.getReq(), user);\n    const doc = await apos.doc.db.findOne({\n      _id: user._id,\n      archived: {\n        $ne: true\n      }\n    });\n    assert(doc);\n    assert(doc.username === 'JaneD');\n    assert(doc.email.match(/deduplicate.*jane/));\n  });","file":"users.js","skipped":false,"dir":"test"},{"name":"there should be two users in the safe at this point and neither with a null username","suites":["Users"],"updatePoint":{"line":151,"column":90,"index":4986},"line":151,"code":"  it('there should be two users in the safe at this point and neither with a null username', async () => {\n    const docs = await apos.user.safe.find({}).toArray();\n    assert(docs.length === 2);\n\n    for (const doc of docs) {\n      assert(doc.username);\n    }\n  });","file":"users.js","skipped":false,"dir":"test"},{"name":"should be able to move a user to the archive","suites":["Users"],"updatePoint":{"line":159,"column":50,"index":5213},"line":159,"code":"  it('should be able to move a user to the archive', async () => {\n    const user = await apos.user.find(apos.task.getReq(), {\n      _id: janeId\n    }).toObject();\n    user.archived = true;\n    await apos.user.update(apos.task.getReq(), user);\n    const doc = await apos.doc.db.findOne({\n      _id: user._id,\n      archived: true\n    });\n    assert(doc);\n  });","file":"users.js","skipped":false,"dir":"test"},{"name":"should be able to insert a user with a previously used username if the other is in the archive","suites":["Users"],"updatePoint":{"line":171,"column":100,"index":5624},"line":171,"code":"  it('should be able to insert a user with a previously used username if the other is in the archive', async () => {\n    const user = apos.user.newInstance();\n    user.title = 'Dane Joe';\n    user.username = 'JaneD';\n    user.password = '321password';\n    user.email = 'somethingelse@aol.com';\n    user.role = 'admin';\n    await apos.user.insert(apos.task.getReq(), user);\n  });","file":"users.js","skipped":false,"dir":"test"},{"name":"should be able to rescue the first user from the archive and the email and username should be deduplicated","suites":["Users"],"updatePoint":{"line":180,"column":112,"index":6015},"line":180,"code":"  it('should be able to rescue the first user from the archive and the email and username should be deduplicated', async () => {\n    const user = await apos.user.find(apos.task.getReq(), {\n      _id: janeId\n    }).archived(true).toObject();\n    user.archived = false;\n    await apos.user.update(apos.task.getReq(), user);\n    const doc = await apos.doc.db.findOne({\n      _id: user._id,\n      archived: {\n        $ne: true\n      }\n    });\n    assert(doc);\n    assert(doc.username.match(/deduplicate.*JaneD/));\n    assert(doc.email.match(/deduplicate.*jane/));\n  });","file":"users.js","skipped":false,"dir":"test"},{"name":"there should be three users in the safe at this point and none with a null username","suites":["Users"],"updatePoint":{"line":196,"column":89,"index":6558},"line":196,"code":"  it('there should be three users in the safe at this point and none with a null username', async () => {\n    const docs = await apos.user.safe.find({}).toArray();\n    assert(docs.length === 3);\n\n    for (const doc of docs) {\n      assert(doc.username);\n    }\n  });","file":"users.js","skipped":false,"dir":"test"},{"name":"should succeed in updating a user's property","suites":["Users"],"updatePoint":{"line":204,"column":51,"index":6786},"line":204,"code":"  it('should succeed in updating a user\\'s property', async () => {\n    const user = await apos.user.find(apos.task.getReq(), {\n      username: 'JaneD'\n    }).toObject();\n    assert(user);\n    assert(user.username === 'JaneD');\n    user.title = 'Jill Doe';\n    await apos.user.update(apos.task.getReq(), user);\n    const user2 = await apos.user.find(apos.task.getReq(), {\n      _id: user._id\n    }).toObject();\n    assert(user2);\n    assert(user2.title === 'Jill Doe');\n  });","file":"users.js","skipped":false,"dir":"test"},{"name":"should verify a user password after their info has been updated","suites":["Users"],"updatePoint":{"line":218,"column":69,"index":7280},"line":218,"code":"  it('should verify a user password after their info has been updated', async () => {\n    const user = await apos.user.find(apos.task.getReq(), {\n      username: 'JaneD'\n    }).toObject();\n    assert(user);\n    assert(user.username === 'JaneD');\n    await apos.user.verifyPassword(user, '321password');\n  }); // change an existing user's password and verify the new password","file":"users.js","skipped":false,"dir":"test"},{"name":"should change an existing user password and verify the new password","suites":["Users"],"updatePoint":{"line":227,"column":73,"index":7660},"line":227,"code":"  it('should change an existing user password and verify the new password', async () => {\n    const user = await apos.user.find(apos.task.getReq(), {\n      username: 'JaneD'\n    }).toObject();\n    assert(user);\n    assert(user.username === 'JaneD');\n    assert(!user.password);\n    user.password = 'password123';\n    await apos.user.update(apos.task.getReq(), user);\n    const user2 = await apos.user.find(apos.task.getReq(), {\n      username: 'JaneD'\n    }).toObject();\n    await apos.user.verifyPassword(user2, 'password123');\n  });","file":"users.js","skipped":false,"dir":"test"},{"name":"should be able to insert a user with no password (but see next test...)","suites":["Users"],"updatePoint":{"line":241,"column":77,"index":8199},"line":241,"code":"  it('should be able to insert a user with no password (but see next test...)', async () => {\n    const user = apos.user.newInstance();\n    user.title = 'Oops No Password';\n    user.username = 'oopsnopassword';\n    user.email = 'oopsnopassword@example.com';\n    user.role = 'admin';\n    assert(user.type === '@apostrophecms/user');\n    assert(apos.user.insert);\n    await apos.user.insert(apos.task.getAdminReq(), user);\n  });","file":"users.js","skipped":false,"dir":"test"},{"name":"should not be able to verify a blank password because a random password was set for us","suites":["Users"],"updatePoint":{"line":251,"column":92,"index":8641},"line":251,"code":"  it('should not be able to verify a blank password because a random password was set for us', async () => {\n    const user = await apos.user.find(apos.task.getReq(), {\n      username: 'oopsnopassword'\n    }).toObject();\n    assert(user && user.username === 'oopsnopassword');\n    let good = false;\n\n    try {\n      // We want this to fail\n      await apos.user.verifyPassword(user, '');\n    } catch (e) {\n      good = true;\n    }\n\n    assert(good);\n  });","file":"users.js","skipped":false,"dir":"test"},{"name":"should exist on the apos object","suites":["Utils"],"updatePoint":{"line":13,"column":37,"index":267},"line":13,"code":"  it('should exist on the apos object', async () => {\n    apos = await t.create({\n      root: module\n    });\n    assert(apos.util);\n  }); // UTIL METHODS ------------------------------------------------------- //","file":"utils.js","skipped":false,"dir":"test"},{"name":"generateId: should return a string of an number","suites":["Utils","methods"],"updatePoint":{"line":21,"column":55,"index":535},"line":21,"code":"    it('generateId: should return a string of an number', function (done) {\n      const id = apos.util.generateId();\n      assert(typeof id === 'string');\n      assert(typeof parseInt(id) === 'number');\n      return done();\n    });","file":"utils.js","skipped":false,"dir":"test"},{"name":"globalReplace: should replace multiple instances of a string","suites":["Utils","methods"],"updatePoint":{"line":27,"column":68,"index":780},"line":27,"code":"    it('globalReplace: should replace multiple instances of a string', function (done) {\n      const s = apos.util.globalReplace('apostrophe is for cool kids. therefore apostrophe is cool.', 'apostrophe', 'comma');\n      assert(s.indexOf('apostrophe') < 0);\n      assert(s.split('comma').length === 3);\n      return done();\n    });","file":"utils.js","skipped":false,"dir":"test"},{"name":"truncatePlaintext: should tuncate a message without cutting off a word","suites":["Utils","methods"],"updatePoint":{"line":33,"column":78,"index":1122},"line":33,"code":"    it('truncatePlaintext: should tuncate a message without cutting off a word', function (done) {\n      const s = apos.util.truncatePlaintext('I want to be cut off here. This is an extra sentance.', 25);\n      assert(s.indexOf('here') > 0);\n      return done();\n    });","file":"utils.js","skipped":false,"dir":"test"},{"name":"escapeHtml: should replace html tags with html string entites","suites":["Utils","methods"],"updatePoint":{"line":38,"column":69,"index":1384},"line":38,"code":"    it('escapeHtml: should replace html tags with html string entites', function (done) {\n      const s = apos.util.escapeHtml('<div>hello</div>');\n      assert(s.indexOf('<') < 0 && s.indexOf('&lt;') >= 0);\n      return done();\n    });","file":"utils.js","skipped":false,"dir":"test"},{"name":"htmlToPlaintext: should strip all html notation","suites":["Utils","methods"],"updatePoint":{"line":43,"column":55,"index":1607},"line":43,"code":"    it('htmlToPlaintext: should strip all html notation', function (done) {\n      const s = apos.util.htmlToPlaintext('<div>hello</div>');\n      assert(s.indexOf('<') < 0 && s.indexOf('hello') >= 0);\n      return done();\n    });","file":"utils.js","skipped":false,"dir":"test"},{"name":"capitalizeFirst: should capitalize the first letter","suites":["Utils","methods"],"updatePoint":{"line":48,"column":59,"index":1840},"line":48,"code":"    it('capitalizeFirst: should capitalize the first letter', function (done) {\n      const s = apos.util.capitalizeFirst('hello');\n      assert(s.indexOf('hello') < 0 && s.indexOf('H' === 0));\n      return done();\n    });","file":"utils.js","skipped":false,"dir":"test"},{"name":"cssName: should covert camelCase or underscore name formats to hyphenated css-style","suites":["Utils","methods"],"updatePoint":{"line":53,"column":91,"index":2095},"line":53,"code":"    it('cssName: should covert camelCase or underscore name formats to hyphenated css-style', function (done) {\n      const s = apos.util.cssName('camelCase and under_score');\n      assert(s.indexOf('C') < 0 && s.indexOf('_') < 0);\n      assert(s.indexOf('camel-case') >= 0);\n      return done();\n    });","file":"utils.js","skipped":false,"dir":"test"},{"name":"cssName: should preserve double dash","suites":["Utils","methods"],"updatePoint":{"line":59,"column":44,"index":2353},"line":59,"code":"    it('cssName: should preserve double dash', function () {\n      const s = apos.util.cssName('this-is--doubled');\n      assert(s === 'this-is--doubled');\n    });","file":"utils.js","skipped":false,"dir":"test"},{"name":"cssName: should not preserve triple dash","suites":["Utils","methods"],"updatePoint":{"line":63,"column":48,"index":2521},"line":63,"code":"    it('cssName: should not preserve triple dash', function () {\n      const s = apos.util.cssName('this-is---tripled');\n      assert(s === 'this-is--tripled');\n    });","file":"utils.js","skipped":false,"dir":"test"},{"name":"camelName: should convert non digits or ASII characters to a capitalized version of the next character","suites":["Utils","methods"],"updatePoint":{"line":67,"column":110,"index":2752},"line":67,"code":"    it('camelName: should convert non digits or ASII characters to a capitalized version of the next character', function (done) {\n      const s = apos.util.camelName('hello apostrophe');\n      assert(s.indexOf(' ') < 0 && s.indexOf('A') === 5);\n      return done();\n    });","file":"utils.js","skipped":false,"dir":"test"},{"name":"addSlashIfNeeded: should add a slash \"/\" to the end of a path if necessary","suites":["Utils","methods"],"updatePoint":{"line":72,"column":82,"index":2999},"line":72,"code":"    it('addSlashIfNeeded: should add a slash \"/\" to the end of a path if necessary', function (done) {\n      const s = apos.util.addSlashIfNeeded('/my/path');\n      assert(s === '/my/path/');\n      return done();\n    });","file":"utils.js","skipped":false,"dir":"test"},{"name":"clonePermanent: should discard properties beginning with _ other than _id","suites":["Utils","methods"],"updatePoint":{"line":77,"column":81,"index":3219},"line":77,"code":"    it('clonePermanent: should discard properties beginning with _ other than _id', function () {\n      assert(_.isEqual(apos.util.clonePermanent({\n        tree: {\n          branch: {\n            leaf: true,\n            _leaf: true\n          },\n          branches: ['one', 'two', 'three']\n        },\n        _tree: true,\n        _blee: {\n          bloo: true\n        }\n      }), {\n        tree: {\n          branch: {\n            leaf: true\n          },\n          branches: ['one', 'two', 'three']\n        }\n      }));\n    });","file":"utils.js","skipped":false,"dir":"test"},{"name":"clonePermanent with keepScalars: should discard properties beginning with _ other than _id unless they are scalars (non-objects)","suites":["Utils","methods"],"updatePoint":{"line":99,"column":136,"index":3800},"line":99,"code":"    it('clonePermanent with keepScalars: should discard properties beginning with _ other than _id unless they are scalars (non-objects)', function () {\n      assert(_.isEqual(apos.util.clonePermanent({\n        tree: {\n          branch: {\n            leaf: true,\n            _leaf: true\n          },\n          branches: ['one', 'two', 'three']\n        },\n        _tree: true,\n        _blee: {\n          bloo: true\n        }\n      }, true), {\n        tree: {\n          branch: {\n            leaf: true,\n            _leaf: true\n          },\n          branches: ['one', 'two', 'three']\n        },\n        _tree: true\n      }));\n    });","file":"utils.js","skipped":false,"dir":"test"},{"name":"clonePermanent should not behave bizarrely with a test case from the punkave site","suites":["Utils","methods"],"updatePoint":{"line":123,"column":89,"index":4386},"line":123,"code":"    it('clonePermanent should not behave bizarrely with a test case from the punkave site', function () {\n      const input = {\n        attachment: {\n          _id: 'a205filea1media97',\n          title: 'http-window-punkave-com-wp-content-uploads-2009-01-n56601994_30790014_5081-225x300-jpg',\n          width: 225,\n          height: 300,\n          length: 22014,\n          md5: 22014,\n          extension: 'jpg',\n          group: 'images',\n          name: 'http-window-punkave-com-wp-content-uploads-2009-01-n56601994_30790014_5081-225x300-jpg',\n          landscape: false,\n          portrait: true,\n          a15Export: true,\n          tags: ['p\\'window', '2009'],\n          searchText: 'http window punkave com wp content uploads 2009 01 n56601994 30790014 5081 225x300 jpg http window punkave com wp content uploads 2009 01 n56601994 30790014 5081 225x300 jpg jpg',\n          type: 'attachment'\n        }\n      };\n      const clone = apos.util.clonePermanent(input);\n      assert(clone.attachment._id === 'a205filea1media97');\n    });","file":"utils.js","skipped":false,"dir":"test"},{"name":"gives sensible results for insensitiveSort","suites":["Utils","methods"],"updatePoint":{"line":146,"column":50,"index":5385},"line":146,"code":"    it('gives sensible results for insensitiveSort', function () {\n      const input = ['Fred', 'dog', 5, 10, 'jane'];\n      apos.util.insensitiveSort(input);\n      assert(input.length === 5);\n      assert(input[0] === 5);\n      assert(input[1] === 10);\n      assert(input[2] === 'dog');\n      assert(input[3] === 'Fred');\n      assert(input[4] === 'jane');\n    });","file":"utils.js","skipped":false,"dir":"test"},{"name":"does not crash when apos.util.profile is called with two arguments","suites":["Utils","methods"],"updatePoint":{"line":156,"column":74,"index":5775},"line":156,"code":"    it('does not crash when apos.util.profile is called with two arguments', function () {\n      apos.util.profile(apos.task.getReq(), 'this.is.a.path')();\n      assert(true);\n    });","file":"utils.js","skipped":false,"dir":"test"},{"name":"does not crash when apos.util.profile is called with three arguments","suites":["Utils","methods"],"updatePoint":{"line":160,"column":76,"index":5961},"line":160,"code":"    it('does not crash when apos.util.profile is called with three arguments', function () {\n      apos.util.profile(apos.task.getReq(), 'this.is.a.path', 100);\n      assert(true);\n    });","file":"utils.js","skipped":false,"dir":"test"},{"name":"does not crash when apos.util.profile is called with one argument (no req arg)","suites":["Utils","methods"],"updatePoint":{"line":164,"column":86,"index":6160},"line":164,"code":"    it('does not crash when apos.util.profile is called with one argument (no req arg)', function () {\n      apos.util.profile('this.is.a.path')();\n      assert(true);\n    });","file":"utils.js","skipped":false,"dir":"test"},{"name":"does not crash when apos.util.profile is called with two arguments (no req arg)","suites":["Utils","methods"],"updatePoint":{"line":168,"column":87,"index":6337},"line":168,"code":"    it('does not crash when apos.util.profile is called with two arguments (no req arg)', function () {\n      apos.util.profile('this.is.a.path', 100);\n      assert(true);\n    });","file":"utils.js","skipped":false,"dir":"test"},{"name":"can get a top level property with utils.get","suites":["Utils","methods"],"updatePoint":{"line":172,"column":51,"index":6481},"line":172,"code":"    it('can get a top level property with utils.get', () => {\n      const data = {\n        age: 5\n      };\n      assert(apos.util.get(data, 'age') === 5);\n    });","file":"utils.js","skipped":false,"dir":"test"},{"name":"can set a top level property with utils.set","suites":["Utils","methods"],"updatePoint":{"line":178,"column":51,"index":6644},"line":178,"code":"    it('can set a top level property with utils.set', () => {\n      const data = {\n        age: 5\n      };\n      apos.util.set(data, 'age', 7);\n      assert(data.age === 7);\n    });","file":"utils.js","skipped":false,"dir":"test"},{"name":"can get a nested property with utils.get","suites":["Utils","methods"],"updatePoint":{"line":185,"column":48,"index":6823},"line":185,"code":"    it('can get a nested property with utils.get', () => {\n      const data = {\n        shoe: {\n          size: 5\n        }\n      };\n      assert(apos.util.get(data, 'shoe.size') === 5);\n    });","file":"utils.js","skipped":false,"dir":"test"},{"name":"can set a nested property with utils.set","suites":["Utils","methods"],"updatePoint":{"line":193,"column":48,"index":7018},"line":193,"code":"    it('can set a nested property with utils.set', () => {\n      const data = {\n        shoe: {\n          size: 5\n        }\n      };\n      apos.util.set(data, 'shoe.size', 7);\n      assert(data.shoe.size === 7);\n    });","file":"utils.js","skipped":false,"dir":"test"},{"name":"can get a nested property with utils.get","suites":["Utils","methods"],"updatePoint":{"line":202,"column":48,"index":7238},"line":202,"code":"    it('can get a nested property with utils.get', () => {\n      const data = {\n        shoe: {\n          size: 5\n        }\n      };\n      assert(apos.util.get(data, 'shoe.size') === 5);\n    });","file":"utils.js","skipped":false,"dir":"test"},{"name":"can get a nested array property with utils.get","suites":["Utils","methods"],"updatePoint":{"line":210,"column":54,"index":7439},"line":210,"code":"    it('can get a nested array property with utils.get', () => {\n      const data = {\n        shoe: {\n          laces: ['intact', 'busted']\n        }\n      };\n      assert(apos.util.get(data, 'shoe.laces.0', 'intact'));\n    });","file":"utils.js","skipped":false,"dir":"test"},{"name":"can set a nested array property with utils.set","suites":["Utils","methods"],"updatePoint":{"line":218,"column":54,"index":7667},"line":218,"code":"    it('can set a nested array property with utils.set', () => {\n      const data = {\n        shoe: {\n          laces: ['intact', 'busted']\n        }\n      };\n      apos.util.set(data, 'shoe.laces.0', 'gnarly');\n      assert(data.shoe.laces[0] === 'gnarly');\n    });","file":"utils.js","skipped":false,"dir":"test"},{"name":"can get a subobject with @ syntax","suites":["Utils","methods"],"updatePoint":{"line":227,"column":41,"index":7921},"line":227,"code":"    it('can get a subobject with @ syntax', () => {\n      const data = {\n        shoes: [{\n          _id: 'stylin'\n        }, {\n          _id: 'busted'\n        }]\n      };\n      assert(apos.util.get(data, '@stylin')._id === 'stylin');\n    });","file":"utils.js","skipped":false,"dir":"test"},{"name":"can update a subobject property with @ syntax","suites":["Utils","methods"],"updatePoint":{"line":237,"column":53,"index":8176},"line":237,"code":"    it('can update a subobject property with @ syntax', () => {\n      const data = {\n        shoes: [{\n          _id: 'stylin',\n          size: 5\n        }, {\n          _id: 'busted',\n          size: 6\n        }]\n      };\n      apos.util.set(data, '@stylin.size', 7);\n      assert(data.shoes[0]._id === 'stylin');\n      assert.strictEqual(data.shoes[0].size, 7);\n    });","file":"utils.js","skipped":false,"dir":"test"},{"name":"can get a subobject property with @ syntax","suites":["Utils","methods"],"updatePoint":{"line":251,"column":50,"index":8544},"line":251,"code":"    it('can get a subobject property with @ syntax', () => {\n      const data = {\n        shoes: [{\n          _id: 'stylin',\n          size: 5\n        }, {\n          _id: 'busted',\n          size: 6\n        }]\n      };\n      assert(apos.util.get(data, '@stylin.size') === 5);\n    });","file":"utils.js","skipped":false,"dir":"test"},{"name":"can replace a subobject with @ syntax","suites":["Utils","methods"],"updatePoint":{"line":263,"column":45,"index":8823},"line":263,"code":"    it('can replace a subobject with @ syntax', () => {\n      const data = {\n        shoes: [{\n          _id: 'stylin',\n          size: 5\n        }, {\n          _id: 'busted',\n          size: 6\n        }]\n      };\n      apos.util.set(data, '@stylin', {\n        _id: 'stylin',\n        size: 8\n      });\n      assert(data.shoes[0].size === 8);\n    });","file":"utils.js","skipped":false,"dir":"test"},{"name":"should add test modules","suites":["Widgets"],"updatePoint":{"line":11,"column":29,"index":235},"line":11,"code":"  it('should add test modules', async () => {\n    apos = await t.create({\n      root: module,\n      modules: {\n        'args-bad-page': {},\n        'args-good-page': {},\n        'args-widget': {}\n      }\n    });\n    assert(apos.modules['args-good-page']);\n    assert(apos.modules['args-bad-page']);\n    assert(apos.modules['args-widget']);\n  });","file":"widgets.js","skipped":false,"dir":"test"},{"name":"should insert test documents","suites":["Widgets"],"updatePoint":{"line":25,"column":34,"index":603},"line":25,"code":"  it('should insert test documents', async function () {\n    const home = await apos.page.find(apos.task.getAnonReq(), {\n      level: 0\n    }).toObject();\n    assert(home);\n    const homeId = home._id;\n    testItems = [{\n      _id: 'goodPageId:en:published',\n      aposLocale: 'en:published',\n      aposDocId: 'goodPageId',\n      type: 'args-good-page',\n      slug: '/good-page',\n      visibility: 'public',\n      path: `${homeId.replace(':en:published', '')}/good-page`,\n      level: 1,\n      rank: 0,\n      main: {\n        _id: 'randomAreaId1',\n        items: [{\n          _id: 'randomWidgetId1',\n          snippet: 'You can control what happens when the text reaches the edges of its content area using its attributes.',\n          metaType: 'widget',\n          type: 'args'\n        }],\n        metaType: 'area'\n      }\n    }, {\n      _id: 'badPageId:en:published',\n      aposLocale: 'en:published',\n      aposDocId: 'badPageId',\n      type: 'args-bad-page',\n      slug: '/bad-page',\n      visibility: 'public',\n      path: `${homeId.replace(':en:published', '')}/bad-page`,\n      level: 1,\n      rank: 0,\n      main: {\n        _id: 'randomAreaId2',\n        items: [{\n          _id: 'randomWidgetId2',\n          snippet: 'You can control what happens when the text reaches the edges of its content area using its attributes.',\n          metaType: 'widget',\n          type: 'args'\n        }],\n        metaType: 'area'\n      }\n    }]; // Insert draft versions too to match the A3 data model\n\n    const draftItems = await apos.doc.db.insertMany(testItems.map(item => ({ ...item,\n      aposLocale: item.aposLocale.replace(':published', ':draft'),\n      _id: item._id.replace(':published', ':draft')\n    })));\n    assert(draftItems.result.ok === 1);\n    assert(draftItems.insertedCount === 2);\n    const items = await apos.doc.db.insertMany(testItems);\n    assert(items.result.ok === 1);\n    assert(items.insertedCount === 2);\n  });","file":"widgets.js","skipped":false,"dir":"test"},{"name":"should be able to render page template with well constructed area tag","suites":["Widgets"],"updatePoint":{"line":83,"column":75,"index":2574},"line":83,"code":"  it('should be able to render page template with well constructed area tag', async function () {\n    const req = apos.task.getAnonReq();\n    const goodPageDoc = await apos.page.find(req, {\n      slug: '/good-page'\n    }).toObject();\n    goodPageDoc.metaType = 'doc';\n    const args = {\n      outerLayout: '@apostrophecms/template:outerLayout.html',\n      permissions: req.user && (req.user._permissions || {}),\n      scene: 'apos',\n      refreshing: false,\n      query: req.query,\n      url: req.url,\n      page: goodPageDoc\n    };\n    let result;\n\n    try {\n      result = await apos.modules['args-good-page'].render(req, 'page', args);\n    } catch (error) {\n      assert(false);\n    }\n\n    assert(result.indexOf('<h2>Good args page</h2>') !== -1);\n    assert(result.indexOf('<p>You can control what happens when the text reaches the edges of its content area using its attributes.</p>') !== -1);\n    assert(result.indexOf('<li>color: 🟣</li>') !== -1);\n  });","file":"widgets.js","skipped":false,"dir":"test"},{"name":"should error while trying to render page template with poorly constructed area tag","suites":["Widgets"],"updatePoint":{"line":110,"column":88,"index":3549},"line":110,"code":"  it('should error while trying to render page template with poorly constructed area tag', async function () {\n    const req = apos.task.getAnonReq();\n    const badPageDoc = await apos.page.find(req, {\n      slug: '/bad-page'\n    }).toObject();\n    badPageDoc.metaType = 'doc';\n    const args = {\n      outerLayout: '@apostrophecms/template:outerLayout.html',\n      permissions: req.user && (req.user._permissions || {}),\n      scene: 'apos',\n      refreshing: false,\n      query: req.query,\n      url: req.url,\n      page: badPageDoc\n    };\n\n    try {\n      await apos.modules['args-bad-page'].render(req, 'page', args);\n      assert(false);\n    } catch (error) {\n      assert(error.toString().indexOf('Too many arguments were passed') !== -1);\n    }\n  });","file":"widgets.js","skipped":false,"dir":"test"},{"name":"should initialize","suites":["With Nested Module Subdirs"],"updatePoint":{"line":14,"column":23,"index":284},"line":14,"code":"  it('should initialize', async function () {\n    apos = await t.create({\n      root: module,\n      nestedModuleSubdirs: true,\n      modules: {\n        example1: {}\n      }\n    });\n    assert(apos.modules.example1); // With nestedModuleSubdirs switched on, the index.js should be found,\n    // and modules.js should be loaded\n\n    assert(apos.modules.example1.options.folderLevelOption);\n    assert(apos.modules.example1.initialized);\n  });","file":"with-nested-module-subdirs.js","skipped":false,"dir":"test"},{"name":"should initialize","suites":["Without Nested Module Subdirs"],"updatePoint":{"line":14,"column":23,"index":287},"line":14,"code":"  it('should initialize', async function () {\n    apos = await t.create({\n      root: module,\n      modules: {\n        example1: {}\n      }\n    });\n    assert(apos.modules.example1); // Should fail because we didn't turn on nestedModuleSubdirs,\n    // so the index.js was not found and modules.js was not loaded\n\n    assert(!apos.modules.example1.options.folderLevelOption);\n    assert(!apos.modules.example1.initialized);\n  });","file":"without-nested-module-subdirs.js","skipped":false,"dir":"test"}]}