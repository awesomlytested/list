{"repo":"remy/nodemon","url":"https://github.com/remy/nodemon","branch":"main","configs":[{"package":"nodemon","lang":"js","dir":"test","framework":"mocha","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"should expand app.js","suites":["expandScript"],"updatePoint":{"line":36,"column":26,"index":806},"line":36,"code":"  it('should expand app.js', () => {\n    const script = expandScript('app');\n    assert.equal(script, 'app.js', script);\n  });","file":"cli/exec.test.js","skipped":false,"dir":"test"},{"name":"should expand hello.py","suites":["expandScript"],"updatePoint":{"line":40,"column":28,"index":935},"line":40,"code":"  it('should expand hello.py', () => {\n    const script = expandScript('hello', '.py');\n    assert.equal(script, 'hello.py', script);\n  });","file":"cli/exec.test.js","skipped":false,"dir":"test"},{"name":"should ignore foo.js","suites":["expandScript"],"updatePoint":{"line":44,"column":26,"index":1073},"line":44,"code":"  it('should ignore foo.js', () => {\n    const script = expandScript('foo', '.js');\n    assert.equal(script, 'foo', script);\n  });","file":"cli/exec.test.js","skipped":false,"dir":"test"},{"name":"should default to node","suites":["nodemon exec"],"updatePoint":{"line":58,"column":28,"index":1486},"line":58,"code":"  it('should default to node', function () {\n    var options = exec({\n      script: 'index.js'\n    });\n    var cmd = toCmd(options);\n    assert.equal(options.exec, 'node', 'exec is node');\n    assert.equal(options.ext, 'js,mjs,json');\n    assert.equal(cmd.string, 'node index.js', cmd.string);\n  });","file":"cli/exec.test.js","skipped":false,"dir":"test"},{"name":"should support --debug","suites":["nodemon exec"],"updatePoint":{"line":67,"column":28,"index":1786},"line":67,"code":"  it('should support --debug', function () {\n    var options = exec({\n      script: 'app.js',\n      nodeArgs: ['--debug']\n    });\n    var cmd = toCmd(options);\n    assert(cmd.string === 'node --debug app.js', cmd.string);\n    assert(options.ext.indexOf('js') !== -1, 'extension watched is .js');\n  });","file":"cli/exec.test.js","skipped":false,"dir":"test"},{"name":"should support --debug=XXXX","suites":["nodemon exec"],"updatePoint":{"line":76,"column":33,"index":2093},"line":76,"code":"  it('should support --debug=XXXX', function () {\n    var options = exec({\n      script: 'app.js',\n      nodeArgs: ['--debug=9999']\n    });\n    var cmd = toCmd(options);\n    assert(cmd.string === 'node --debug=9999 app.js', cmd.string);\n    assert(options.exec === 'node');\n    assert(options.ext.indexOf('js') !== -1);\n  });","file":"cli/exec.test.js","skipped":false,"dir":"test"},{"name":"should support multiple extensions","suites":["nodemon exec"],"updatePoint":{"line":86,"column":40,"index":2426},"line":86,"code":"  it('should support multiple extensions', function () {\n    var options = exec({\n      script: 'app.js',\n      ext: 'js, pug, hbs'\n    });\n    var cmd = toCmd(options);\n    assert(cmd.string === 'node app.js', cmd.string);\n    assert(options.ext.indexOf('pug') !== -1, 'comma separated string');\n    options = exec({\n      script: 'app.js',\n      ext: 'js|pug|hbs'\n    });\n    assert(options.exec === 'node');\n    assert(options.ext.indexOf('pug') !== -1, 'pipe separated string');\n  });","file":"cli/exec.test.js","skipped":false,"dir":"test"},{"name":"should support watching all extensions","suites":["nodemon exec"],"updatePoint":{"line":101,"column":44,"index":2919},"line":101,"code":"  it('should support watching all extensions', function () {\n    var options = exec({\n      script: 'app.js',\n      ext: ''\n    });\n    assert.equal(options.ext, '', 'does not set default extensions when empty extension requested');\n    options = exec({\n      script: 'app.js',\n      ext: '.'\n    });\n    assert.equal(options.ext, '', 'treats `.` as wildcard extension');\n    options = exec({\n      script: 'app.js',\n      ext: '*'\n    });\n    assert.equal(options.ext, '', 'treats `*` as wildcard extension');\n    options = exec({\n      script: 'app.coffee',\n      exec: 'coffee',\n      ext: ''\n    });\n    assert.equal(options.ext, '', 'does not set default extensions when empty extension requested');\n  });","file":"cli/exec.test.js","skipped":false,"dir":"test"},{"name":"should replace {{filename}}","suites":["nodemon exec"],"updatePoint":{"line":124,"column":33,"index":3619},"line":124,"code":"  it('should replace {{filename}}', function () {\n    var options = exec({\n      script: 'app.js',\n      exec: 'node {{filename}}.tmp --somethingElse'\n    });\n    var cmd = toCmd(options);\n    assert(cmd.string === 'node app.js.tmp --somethingElse', cmd.string);\n  });","file":"cli/exec.test.js","skipped":false,"dir":"test"},{"name":"should not split on spaces in {{filename}}","suites":["nodemon exec"],"updatePoint":{"line":132,"column":48,"index":3903},"line":132,"code":"  it('should not split on spaces in {{filename}}', function () {\n    var options = exec({\n      script: 'my app.js',\n      exec: 'node {{filename}}.tmp --somethingElse'\n    });\n    var cmd = toCmd(options); // var cmd = command({ execOptions: options });\n\n    assert(cmd.string === 'node my app.js.tmp --somethingElse', cmd.string);\n  });","file":"cli/exec.test.js","skipped":false,"dir":"test"},{"name":"should support extension maps","suites":["nodemon exec"],"updatePoint":{"line":141,"column":35,"index":4229},"line":141,"code":"  it('should support extension maps', function () {\n    var options = exec({\n      script: 'template.pug'\n    }, {\n      'pug': 'pug {{filename}} --out /tmp'\n    });\n    var cmd = toCmd(options);\n    assert(cmd.string === 'pug template.pug --out /tmp', cmd.string);\n  });","file":"cli/exec.test.js","skipped":false,"dir":"test"},{"name":"should support input from argv#parse","suites":["nodemon exec"],"updatePoint":{"line":150,"column":42,"index":4508},"line":150,"code":"  it('should support input from argv#parse', function () {\n    var parse = require('../../lib/cli/parse');\n\n    parse('node /usr/local/bin/nodemon.js --debug -e js,pug,hbs app.js'.split(' '));\n  });","file":"cli/exec.test.js","skipped":false,"dir":"test"},{"name":"should use coffeescript on .coffee","suites":["nodemon exec"],"updatePoint":{"line":155,"column":40,"index":4705},"line":155,"code":"  it('should use coffeescript on .coffee', function () {\n    var options = exec({\n      script: 'index.coffee'\n    });\n    assert(options.exec.indexOf('coffee') === 0, 'using coffeescript to execute');\n    assert(options.ext.indexOf('coffee') !== -1);\n  });","file":"cli/exec.test.js","skipped":false,"dir":"test"},{"name":"should support coffeescript in debug mode","suites":["nodemon exec"],"updatePoint":{"line":162,"column":47,"index":4970},"line":162,"code":"  it('should support coffeescript in debug mode', function () {\n    var options = exec({\n      script: 'app.coffee',\n      nodeArgs: ['--debug']\n    });\n    assert(options.exec.indexOf('coffee') === 0, 'using coffeescript to execute');\n    assert(options.execArgs[1].indexOf('--debug') !== -1);\n    assert(options.ext.indexOf('coffee') !== -1);\n  });","file":"cli/exec.test.js","skipped":false,"dir":"test"},{"name":"should support custom execs","suites":["nodemon exec"],"updatePoint":{"line":171,"column":33,"index":5307},"line":171,"code":"  it('should support custom execs', function () {\n    var options = exec({\n      script: 'app.py',\n      exec: 'python'\n    });\n    assert(options.exec === 'python');\n    assert(options.ext.indexOf('py') !== -1);\n  });","file":"cli/exec.test.js","skipped":false,"dir":"test"},{"name":"should support custom executables with arguments","suites":["nodemon exec"],"updatePoint":{"line":179,"column":54,"index":5547},"line":179,"code":"  it('should support custom executables with arguments', function () {\n    var options = exec({\n      script: 'app.py',\n      exec: 'python --debug'\n    });\n    var cmd = toCmd(options);\n    assert(cmd.string === 'python --debug app.py', cmd.string);\n    assert(options.ext.indexOf('py') !== -1);\n  });","file":"cli/exec.test.js","skipped":false,"dir":"test"},{"name":"should support an array of exec arguments","suites":["nodemon exec"],"updatePoint":{"line":188,"column":47,"index":5843},"line":188,"code":"  it('should support an array of exec arguments', function () {\n    var options = exec({\n      script: 'app.js',\n      exec: ['/path to node', '-v']\n    });\n    assert(options.exec === '/path to node', options.exec);\n    assert(options.execArgs.length === 1, options.execArgs.length);\n    assert(options.execArgs[0] === '-v', options.execArgs[0]);\n  });","file":"cli/exec.test.js","skipped":false,"dir":"test"},{"name":"should support non-english filenames","suites":["nodemon exec"],"updatePoint":{"line":197,"column":42,"index":6192},"line":197,"code":"  it('should support non-english filenames', function () {\n    var parse = require('../../lib/cli/parse');\n\n    var options = parse('node nodemon.js -e ζ ./server.js \"$@\"'.split(' '));\n    var res = exec(options);\n    assert(res.ext === 'ζ', 'exec did not bail');\n  });","file":"cli/exec.test.js","skipped":false,"dir":"test"},{"name":"should support multi-level file extensions","suites":["nodemon exec"],"updatePoint":{"line":204,"column":48,"index":6468},"line":204,"code":"  it('should support multi-level file extensions', function () {\n    var options = exec({\n      ext: '.ts.d,js md'\n    });\n    assert(options.ext.indexOf('ts.d') !== -1);\n    assert(options.ext.indexOf('js') !== -1);\n    assert(options.ext.indexOf('md') !== -1);\n  });","file":"cli/exec.test.js","skipped":false,"dir":"test"},{"name":"should support single-level file extensions","suites":["nodemon exec"],"updatePoint":{"line":212,"column":49,"index":6738},"line":212,"code":"  it('should support single-level file extensions', function () {\n    var options = exec({\n      ext: '.js, pug'\n    });\n    assert(options.ext.indexOf('js') !== -1);\n    assert(options.ext.indexOf('pug') !== -1);\n  });","file":"cli/exec.test.js","skipped":false,"dir":"test"},{"name":"should expand app to app.js","suites":["nodemon exec"],"updatePoint":{"line":219,"column":33,"index":6942},"line":219,"code":"  it('should expand app to app.js', function () {\n    var options = exec({\n      script: 'app'\n    });\n    var cmd = toCmd(options);\n    assert(cmd.string === 'node app.js', cmd.string);\n    options = exec({\n      script: 'app',\n      ext: ''\n    });\n    cmd = toCmd(options);\n    assert(cmd.string === 'node app.js', cmd.string);\n  });","file":"cli/exec.test.js","skipped":false,"dir":"test"},{"name":"should expand based on custom extensions to hello.py","suites":["nodemon exec"],"updatePoint":{"line":232,"column":58,"index":7304},"line":232,"code":"  it('should expand based on custom extensions to hello.py', function () {\n    var options = exec({\n      script: 'hello',\n      ext: '.py',\n      exec: 'python'\n    });\n    var cmd = toCmd(options);\n    assert(cmd.string === 'python hello.py', cmd.string);\n  });","file":"cli/exec.test.js","skipped":false,"dir":"test"},{"name":"should expand based on custom extensions to app.js (js,jsx,mjs)","suites":["nodemon exec"],"updatePoint":{"line":241,"column":69,"index":7579},"line":241,"code":"  it('should expand based on custom extensions to app.js (js,jsx,mjs)', function () {\n    var options = exec({\n      script: 'app',\n      ext: 'js,jsx,mjs'\n    });\n    var cmd = toCmd(options);\n    assert(cmd.string === 'node app.js', cmd.string);\n  });","file":"cli/exec.test.js","skipped":false,"dir":"test"},{"name":"should not expand index to non-existant index.js","suites":["nodemon exec"],"updatePoint":{"line":249,"column":54,"index":7818},"line":249,"code":"  it('should not expand index to non-existant index.js', function () {\n    var options = exec({\n      script: 'index'\n    });\n    var cmd = toCmd(options);\n    assert(cmd.string === 'node index', cmd.string);\n  });","file":"cli/exec.test.js","skipped":false,"dir":"test"},{"name":"should support --debug with script detect via package","suites":["nodemon CLI parser"],"updatePoint":{"line":38,"column":59,"index":1036},"line":38,"code":"  it('should support --debug with script detect via package', function () {\n    var cwd = process.cwd();\n    process.chdir('test/fixtures/packages/express4');\n    var settings = parse(asCLI('--debug'));\n    var cmd = commandToString(command(settings));\n    process.chdir(cwd);\n    assert.equal(cmd, 'NODE_ENV=development node ./bin/www --debug');\n  });","file":"cli/parse.test.js","skipped":false,"dir":"test"},{"name":"should replace {{filename}}","suites":["nodemon CLI parser"],"updatePoint":{"line":46,"column":33,"index":1363},"line":46,"code":"  it('should replace {{filename}}', function () {\n    var settings = parse(asCLI('test/fixtures/app.js --exec \"node {{filename}}.tmp\" --somethingElse'));\n    var cmd = commandToString(command(settings));\n    assert(cmd === 'node test/fixtures/app.js.tmp --somethingElse', cmd);\n  });","file":"cli/parse.test.js","skipped":false,"dir":"test"},{"name":"should replace {{filename}} multiple times","suites":["nodemon CLI parser"],"updatePoint":{"line":51,"column":48,"index":1662},"line":51,"code":"  it('should replace {{filename}} multiple times', function () {\n    var settings = parse(asCLI('test/fixtures/app.js --exec \"node {{filename}}.tmp {{filename}}.tmp\" --somethingElse'));\n    var cmd = commandToString(command(settings));\n    assert(cmd === 'node test/fixtures/app.js.tmp test/fixtures/app.js.tmp --somethingElse', cmd);\n  });","file":"cli/parse.test.js","skipped":false,"dir":"test"},{"name":"should parse the help examples #1","suites":["nodemon CLI parser"],"updatePoint":{"line":56,"column":39,"index":1994},"line":56,"code":"  it('should parse the help examples #1', function () {\n    var settings = parse(asCLI('test/fixtures/app.js')),\n        cmd = commandToString(command(settings));\n    assert(cmd === 'node test/fixtures/app.js', 'node test/fixtures/app.js: ' + cmd);\n  });","file":"cli/parse.test.js","skipped":false,"dir":"test"},{"name":"should parse the help examples #2","suites":["nodemon CLI parser"],"updatePoint":{"line":61,"column":39,"index":2249},"line":61,"code":"  it('should parse the help examples #2', function () {\n    var settings = parse(asCLI('-w ../lib test/fixtures/app.js apparg1 apparg2')),\n        cmd = commandToString(command(settings));\n    assert.deepEqual(settings.watch, ['../lib'], 'watching ../lib: ' + settings.watch);\n    assert.deepEqual(settings.execOptions.args, ['apparg1', 'apparg2'], 'args are corr   ' + settings.execOptions.args);\n    assert(cmd === 'node test/fixtures/app.js apparg1 apparg2', 'command is ' + cmd);\n  });","file":"cli/parse.test.js","skipped":false,"dir":"test"},{"name":"should parse the help examples #3","suites":["nodemon CLI parser"],"updatePoint":{"line":68,"column":39,"index":2739},"line":68,"code":"  it('should parse the help examples #3', function () {\n    var settings = parse(asCLI('--exec python app.py')),\n        cmd = commandToString(command(settings));\n    assert(cmd === 'python app.py', 'command is ' + cmd);\n    assert(settings.execOptions.exec === 'python', 'exec is python');\n  });","file":"cli/parse.test.js","skipped":false,"dir":"test"},{"name":"should parse the help examples #4","suites":["nodemon CLI parser"],"updatePoint":{"line":74,"column":39,"index":3036},"line":74,"code":"  it('should parse the help examples #4', function () {\n    var settings = parse(asCLI('--exec \"make build\" -e \"styl hbs\"')),\n        cmd = commandToString(command(settings));\n    assert(cmd === 'make build', 'command is ' + cmd);\n    assert.deepEqual(settings.execOptions.ext.split(','), ['styl', 'hbs'], 'correct extensions being watched: ' + settings.execOptions.ext);\n  });","file":"cli/parse.test.js","skipped":false,"dir":"test"},{"name":"should parse the help examples #5","suites":["nodemon CLI parser"],"updatePoint":{"line":80,"column":39,"index":3414},"line":80,"code":"  it('should parse the help examples #5', function () {\n    var settings = parse(asCLI('test/fixtures/app.js -- -L')),\n        cmd = commandToString(command(settings));\n    assert(cmd === 'node test/fixtures/app.js -L', 'command is ' + cmd);\n  });","file":"cli/parse.test.js","skipped":false,"dir":"test"},{"name":"should put the script at the end if found in package.main","suites":["nodemon CLI parser"],"updatePoint":{"line":85,"column":63,"index":3686},"line":85,"code":"  it('should put the script at the end if found in package.main', function () {\n    var pwd = process.cwd();\n    process.chdir('test/fixtures'); // allows us to load text/fixtures/package.json\n\n    var settings = parse(asCLI('--harmony')),\n        cmd = commandToString(command(settings));\n    process.chdir(pwd);\n    assert(cmd === 'node --harmony app.js', 'command is ' + cmd);\n  });","file":"cli/parse.test.js","skipped":false,"dir":"test"},{"name":"should support default express4 format","suites":["nodemon CLI parser"],"updatePoint":{"line":94,"column":44,"index":4053},"line":94,"code":"  it('should support default express4 format', function () {\n    var pwd = process.cwd();\n    process.chdir('test/fixtures/packages/express4'); // allows us to load text/fixtures/package.json\n\n    var settings = parse(asCLI()),\n        cmd = commandToString(command(settings));\n    process.chdir(pwd);\n    assert.equal(cmd, 'NODE_ENV=development node ./bin/www', 'command is \"' + cmd + '\"');\n  });","file":"cli/parse.test.js","skipped":false,"dir":"test"},{"name":"should support spaces","suites":["nodemon CLI parser"],"updatePoint":{"line":103,"column":27,"index":4434},"line":103,"code":"  it('should support spaces', function () {\n    var pwd = process.cwd();\n    process.chdir('test/fixtures/');\n    var settings = parse(asCLI('--exec \\'\"app with spaces.js\" foo\\''));\n    var cmd = commandToString(command(settings));\n    process.chdir(pwd);\n    assert(cmd === '\"app with spaces.js\" foo', cmd);\n  });","file":"cli/parse.test.js","skipped":false,"dir":"test"},{"name":"should support quotes around arguments","suites":["nodemon CLI parser"],"updatePoint":{"line":111,"column":44,"index":4766},"line":111,"code":"  it('should support quotes around arguments', function () {\n    var settings = parse(asCLI('--watch \"foo bar\"'));\n    assert(settings.watch[0] === 'foo bar');\n  });","file":"cli/parse.test.js","skipped":false,"dir":"test"},{"name":"should keep eating arguments that are for nodemon after the script.js","suites":["nodemon CLI parser"],"updatePoint":{"line":115,"column":75,"index":4963},"line":115,"code":"  it('should keep eating arguments that are for nodemon after the script.js', function () {\n    var settings = parse(asCLI('--watch \"foo bar\" test/fixtures/app.js -V --scriptOpt1 -- -V'));\n    assert.deepEqual(settings.execOptions.args, ['--scriptOpt1', '-V'], 'script args are: ' + settings.execOptions.args.join(' '));\n    assert(settings.verbose === true, 'verbose');\n    assert(settings.watch[0] === 'foo bar', 'watching \"foo bar\" dir');\n  });","file":"cli/parse.test.js","skipped":false,"dir":"test"},{"name":"should allow -- to appear anywhere, and still find user script","suites":["nodemon CLI parser"],"updatePoint":{"line":121,"column":68,"index":5404},"line":121,"code":"  it('should allow -- to appear anywhere, and still find user script', function () {\n    var settings = parse(asCLI('test/fixtures/app.js -- -V'));\n    assert(!settings.verbose, '-V arg was passed to script, not nodemon');\n    assert.deepEqual(settings.execOptions.args, ['-V'], 'script passed -V via --');\n    settings = parse(asCLI('-- test/fixtures/app.js -V'));\n    assert.deepEqual(settings.execOptions.args, ['-V'], 'leading -- finds script');\n    settings = parse(asCLI('test/fixtures/app.js -V --'));\n    assert.deepEqual(settings.execOptions.args, [], '-- is ignored');\n    assert(settings.verbose, '-V was passed to nodemon');\n  });","file":"cli/parse.test.js","skipped":false,"dir":"test"},{"name":"should support arguments from the cli","suites":["nodemon CLI parser"],"updatePoint":{"line":131,"column":43,"index":6022},"line":131,"code":"  it('should support arguments from the cli', function () {\n    var settings = parse(['node', 'nodemon', '--watch', 'foo bar']);\n    assert(settings.watch[0] === 'foo bar');\n  });","file":"cli/parse.test.js","skipped":false,"dir":"test"},{"name":"should support stand alone `nodemon` command","suites":["nodemon CLI parser"],"updatePoint":{"line":135,"column":50,"index":6209},"line":135,"code":"  it('should support stand alone `nodemon` command', function () {\n    var settings = parse(asCLI(''));\n    assert(settings.execOptions.script === pkg.main + '.js', `${settings.execOptions.script} === ${pkg.main}`);\n  });","file":"cli/parse.test.js","skipped":false,"dir":"test"},{"name":"should put --debug in the right place with coffescript","suites":["nodemon CLI parser"],"updatePoint":{"line":139,"column":60,"index":6441},"line":139,"code":"  it('should put --debug in the right place with coffescript', function () {\n    var settings = parse(asCLI('--debug test/fixtures/app.coffee')); // using indexOf instead of === because on windows\n    // coffee is coffee.cmd - so we check for a partial match\n\n    assert(commandToString(command(settings)).indexOf('--nodejs --debug test/fixtures/app.coffee') !== -1);\n    assert(settings.execOptions.exec.indexOf('coffee') === 0, 'executable is CoffeeScript');\n  });","file":"cli/parse.test.js","skipped":false,"dir":"test"},{"name":"should support period path","suites":["nodemon CLI parser"],"updatePoint":{"line":146,"column":32,"index":6880},"line":146,"code":"  it('should support period path', function () {\n    var settings = parse(asCLI('.'));\n    assert(commandToString(command(settings)) === 'node .');\n  });","file":"cli/parse.test.js","skipped":false,"dir":"test"},{"name":"should parse `nodemon lib/index.js`","suites":["nodemon CLI parser"],"updatePoint":{"line":150,"column":41,"index":7043},"line":150,"code":"  it('should parse `nodemon lib/index.js`', function () {\n    var settings = parse(asCLI('lib/index.js'));\n    assert(settings.script === 'lib/index.js');\n  });","file":"cli/parse.test.js","skipped":false,"dir":"test"},{"name":"should parse `nodemon --config my/.nodemon.json server.js`","suites":["nodemon CLI parser"],"updatePoint":{"line":154,"column":64,"index":7227},"line":154,"code":"  it('should parse `nodemon --config my/.nodemon.json server.js`', function () {\n    var settings = parse(asCLI('--config my/.nodemon.json test/fixtures/app.js'));\n    assert(settings.configFile === 'my/.nodemon.json');\n    assert(settings.script === 'test/fixtures/app.js');\n  });","file":"cli/parse.test.js","skipped":false,"dir":"test"},{"name":"should parse `nodemon test/fixtures/app.coffee`","suites":["nodemon CLI parser"],"updatePoint":{"line":159,"column":53,"index":7498},"line":159,"code":"  it('should parse `nodemon test/fixtures/app.coffee`', function () {\n    var settings = parse(asCLI('test/fixtures/app.coffee'));\n    assert(settings.script === 'test/fixtures/app.coffee');\n    assert(settings.execOptions.exec.indexOf('coffee') === 0, 'executable is CoffeeScript');\n  });","file":"cli/parse.test.js","skipped":false,"dir":"test"},{"name":"should parse `nodemon --watch src/ -e js,coffee test/fixtures/app.js`","suites":["nodemon CLI parser"],"updatePoint":{"line":164,"column":75,"index":7810},"line":164,"code":"  it('should parse `nodemon --watch src/ -e js,coffee test/fixtures/app.js`', function () {\n    var settings = parse(asCLI('--watch src/ -e js,coffee test/fixtures/app.js'));\n    assert(settings.script === 'test/fixtures/app.js');\n    assert(settings.execOptions.exec === 'node');\n  });","file":"cli/parse.test.js","skipped":false,"dir":"test"},{"name":"should pass --debug to node","suites":["nodemon CLI parser"],"updatePoint":{"line":169,"column":33,"index":8055},"line":169,"code":"  it('should pass --debug to node', function () {\n    var settings = parse(asCLI('--debug test/fixtures/app.js'));\n    assert(settings.script === 'test/fixtures/app.js');\n    assert(settings.execOptions.exec === 'node');\n    assert(commandToString(command(settings)).indexOf('--debug') !== -1);\n  });","file":"cli/parse.test.js","skipped":false,"dir":"test"},{"name":"should pass --harmony to node","suites":["nodemon CLI parser"],"updatePoint":{"line":175,"column":35,"index":8358},"line":175,"code":"  it('should pass --harmony to node', function () {\n    var settings = parse(asCLI('--harmony test/fixtures/app.js'));\n    assert(settings.script === 'test/fixtures/app.js');\n    assert(settings.execOptions.exec === 'node');\n    assert(commandToString(command(settings)).indexOf('--harmony') !== -1);\n  });","file":"cli/parse.test.js","skipped":false,"dir":"test"},{"name":"support strings","suites":["nodemon argument parser"],"updatePoint":{"line":183,"column":21,"index":8705},"line":183,"code":"  it('support strings', function () {\n    var settings = cli.parse('node nodemon -v');\n    assert(settings.version === true, 'version flag');\n  });","file":"cli/parse.test.js","skipped":false,"dir":"test"},{"name":"should support short versions of flags","suites":["nodemon argument parser"],"updatePoint":{"line":187,"column":44,"index":8876},"line":187,"code":"  it('should support short versions of flags', function () {\n    var settings = cli.parse('node nodemon -v -x java -I -V -q -w fixtures -i fixtures -d 5 -L -C -e pug -s SIGHUP');\n    assert(settings.version, 'version');\n    assert(settings.verbose, 'verbose');\n    assert(settings.exec === 'java', 'exec');\n    assert(settings.quiet, 'quiet');\n    assert(settings.stdin === false, 'read stdin');\n    assert(settings.watch[0] === 'fixtures', 'watch');\n    assert(settings.ignore[0] === 'fixtures', 'ignore');\n    assert(settings.delay === 5000, 'delay 5 seconds');\n    assert(settings.runOnChangeOnly, 'run on change only');\n    assert(settings.ext === 'pug', 'extension is pug');\n    assert(settings.signal === 'SIGHUP', 'signal is SIGHUP');\n  });","file":"cli/parse.test.js","skipped":false,"dir":"test"},{"name":"should support long versions of flags","suites":["nodemon argument parser"],"updatePoint":{"line":201,"column":43,"index":9623},"line":201,"code":"  it('should support long versions of flags', function () {\n    var settings = cli.parse('node nodemon --version --exec java --verbose --quiet --watch fixtures --ignore fixtures --no-stdin --delay 5 --legacy-watch --exitcrash --on-change-only --ext pug --config my/.nodemon.json --signal SIGHUP');\n    assert(settings.version, 'version');\n    assert(settings.verbose, 'verbose');\n    assert(settings.exec === 'java', 'exec');\n    assert(settings.quiet, 'quiet');\n    assert(settings.stdin === false, 'read stdin');\n    assert(settings.exitcrash, 'exit if crash');\n    assert(settings.watch[0] === 'fixtures', 'watch');\n    assert(settings.ignore[0] === 'fixtures', 'ignore');\n    assert(settings.delay === 5000, 'delay 5 seconds');\n    assert(settings.runOnChangeOnly, 'run on change only');\n    assert(settings.ext === 'pug', 'extension is pug');\n    assert(settings.configFile === 'my/.nodemon.json', 'custom config file name is my/.nodemon.json');\n    assert(settings.signal === 'SIGHUP', 'signal is SIGHUP');\n  });","file":"cli/parse.test.js","skipped":false,"dir":"test"},{"name":"should support \"ext\" and \"execMap\" for same extension","suites":["nodemon respects custom \"ext\" and \"execMap\""],"updatePoint":{"line":219,"column":59,"index":10732},"line":219,"code":"  it('should support \"ext\" and \"execMap\" for same extension', function () {\n    var settings = parse(asCLI('-x \"node --harmony\" -e \"js json coffee\" test/fixtures/app.coffee'));\n    assert(settings.execOptions.ext.indexOf('js') === 0, 'js is monitored: ' + settings.execOptions.ext);\n    assert(settings.execOptions.ext.split(',').length === 3, 'all extensions monitored');\n    assert(settings.execOptions.exec.indexOf('node') === 0, 'node is exec: ' + settings.execOptions.exec);\n  });","file":"cli/parse.test.js","skipped":false,"dir":"test"},{"name":"should expand script to script.js","suites":["nodemon should support implicit extensions"],"updatePoint":{"line":227,"column":39,"index":11265},"line":227,"code":"  it('should expand script to script.js', () => {\n    const cwd = process.cwd();\n    process.chdir('test/fixtures/');\n    const settings = parse(asCLI('env'));\n    process.chdir(cwd);\n    var cmd = commandToString(command(settings));\n    assert.equal(cmd, 'node env.js', 'implicit extension added');\n  });","file":"cli/parse.test.js","skipped":false,"dir":"test"},{"name":"should support non-js","suites":["nodemon should support implicit extensions"],"updatePoint":{"line":235,"column":27,"index":11559},"line":235,"code":"  it('should support non-js', () => {\n    const cwd = process.cwd();\n    process.chdir('test/fixtures/');\n    const settings = parse(asCLI('hello --ext py'));\n    process.chdir(cwd);\n    var cmd = commandToString(command(settings));\n    assert.equal(cmd, 'node hello.py', 'implicit extension added');\n  });","file":"cli/parse.test.js","skipped":false,"dir":"test"},{"name":"should read quotes as a single entity","suites":["nodemon should slurp properly"],"updatePoint":{"line":245,"column":43,"index":11936},"line":245,"code":"  it('should read quotes as a single entity', () => {\n    const settings = parse(asCLI('notindex.js -- -b \"hello - world\"'));\n    assert(settings.execOptions.exec === 'node', 'node is exec');\n    assert(settings.args.length === 3, 'only has 3 arguments to node');\n  });","file":"cli/parse.test.js","skipped":false,"dir":"test"},{"name":"should pass non-slurped args to script","suites":["nodemon should slurp properly"],"updatePoint":{"line":250,"column":44,"index":12207},"line":250,"code":"  it('should pass non-slurped args to script', () => {\n    const settings = parse(asCLI('-- --log'));\n    var cmd = commandToString(command(settings));\n    assert.equal(cmd, 'node ./lib/nodemon.js --log', 'args passed to script');\n  });","file":"cli/parse.test.js","skipped":false,"dir":"test"},{"name":"should pass non-slurped args to explicit script","suites":["nodemon should slurp properly"],"updatePoint":{"line":255,"column":53,"index":12453},"line":255,"code":"  it('should pass non-slurped args to explicit script', () => {\n    const settings = parse(asCLI('./lib/nodemon.js -- --log'));\n    var cmd = commandToString(command(settings));\n    assert.equal(cmd, 'node ./lib/nodemon.js --log', 'args passed to script');\n  });","file":"cli/parse.test.js","skipped":false,"dir":"test"},{"name":"should pass slurped args to explicit script","suites":["nodemon should slurp properly"],"updatePoint":{"line":260,"column":49,"index":12712},"line":260,"code":"  it('should pass slurped args to explicit script', () => {\n    const settings = parse(asCLI('./lib/nodemon.js --log'));\n    var cmd = commandToString(command(settings));\n    assert.equal(cmd, 'node ./lib/nodemon.js --log', 'args passed to script');\n  });","file":"cli/parse.test.js","skipped":false,"dir":"test"},{"name":"should handle a mix of slurps","suites":["nodemon should slurp properly"],"updatePoint":{"line":265,"column":35,"index":12954},"line":265,"code":"  it('should handle a mix of slurps', () => {\n    var cmd;\n    var settings;\n    cmd = commandToString(command(parse(asCLI('--inspect -- --log'))));\n    assert.equal(cmd, 'node --inspect ./lib/nodemon.js --log', 'args passed to script');\n    cmd = commandToString(command(parse(asCLI('--inspect ./lib/nodemon.js -- --log'))));\n    assert.equal(cmd, 'node --inspect ./lib/nodemon.js --log', 'args passed to script');\n    cmd = commandToString(command(parse(asCLI('--inspect --log ./lib/nodemon.js'))));\n    assert.equal(cmd, 'node --inspect --log ./lib/nodemon.js', 'args passed to script');\n  });","file":"cli/parse.test.js","skipped":false,"dir":"test"},{"name":"should not add --nodejs by default","suites":["nodemon with CoffeeScript"],"updatePoint":{"line":277,"column":40,"index":13612},"line":277,"code":"  it('should not add --nodejs by default', function () {\n    var settings = parse(asCLI('test/fixtures/app.coffee'));\n    assert(settings.execOptions.exec.indexOf('coffee') === 0, 'executable is CoffeeScript');\n    assert(settings.execOptions.execArgs.indexOf('--nodejs') === -1, 'is not using --nodejs');\n  });","file":"cli/parse.test.js","skipped":false,"dir":"test"},{"name":"should not add --nodejs with app arguments","suites":["nodemon with CoffeeScript"],"updatePoint":{"line":282,"column":48,"index":13932},"line":282,"code":"  it('should not add --nodejs with app arguments', function () {\n    var settings = parse(asCLI('test/fixtures/app.coffee --my-app-arg'));\n    assert(settings.execOptions.exec.indexOf('coffee') === 0, 'executable is CoffeeScript');\n    assert(settings.execOptions.execArgs.indexOf('--nodejs') === -1, 'is not using --nodejs');\n  });","file":"cli/parse.test.js","skipped":false,"dir":"test"},{"name":"groups exec argument into a single --nodejs argument","suites":["nodemon with CoffeeScript"],"updatePoint":{"line":287,"column":58,"index":14275},"line":287,"code":"  it('groups exec argument into a single --nodejs argument', function () {\n    var settings = parse(asCLI('--harmony --debug test/fixtures/app.coffee'));\n    assert(settings.execOptions.exec.indexOf('coffee') === 0, 'executable is CoffeeScript');\n    assert(settings.execOptions.execArgs[0] === '--nodejs', 'is using --nodejs');\n    assert(settings.execOptions.execArgs[1] === '--harmony --debug', 'is grouping exec arguments');\n  });","file":"cli/parse.test.js","skipped":false,"dir":"test"},{"name":"should add --nodejs when used with --debug","suites":["nodemon with CoffeeScript"],"updatePoint":{"line":293,"column":48,"index":14700},"line":293,"code":"  it('should add --nodejs when used with --debug', function () {\n    var settings = parse(asCLI('--debug test/fixtures/app.coffee'));\n    var cmd = commandToString(command(settings));\n    assert(settings.execOptions.exec.indexOf('coffee') === 0, 'executable is CoffeeScript');\n    assert(cmd.indexOf('--nodejs') !== -1, '--nodejs being used');\n    assert(cmd.indexOf('--debug') !== -1, '--debug being used');\n  });","file":"cli/parse.test.js","skipped":false,"dir":"test"},{"name":"should add --nodejs when used with --debug-brk","suites":["nodemon with CoffeeScript"],"updatePoint":{"line":300,"column":52,"index":15119},"line":300,"code":"  it('should add --nodejs when used with --debug-brk', function () {\n    var settings = parse(asCLI('--debug-brk test/fixtures/app.coffee'));\n    var cmd = commandToString(command(settings));\n    assert(settings.execOptions.exec.indexOf('coffee') === 0, 'executable is CoffeeScript');\n    assert(cmd.indexOf('--nodejs') !== -1, '--nodejs being used');\n    assert(cmd.indexOf('--debug-brk') !== -1, '--debug-brk being used');\n  });","file":"cli/parse.test.js","skipped":false,"dir":"test"},{"name":"should support an integer value","suites":["nodemon --delay argument"],"updatePoint":{"line":309,"column":37,"index":15590},"line":309,"code":"  it('should support an integer value', function () {\n    var settings = cli.parse('node nodemon --delay 5');\n    assert(settings.delay === 5000, 'delay 5 seconds');\n  });","file":"cli/parse.test.js","skipped":false,"dir":"test"},{"name":"should support a float value","suites":["nodemon --delay argument"],"updatePoint":{"line":313,"column":34,"index":15759},"line":313,"code":"  it('should support a float value', function () {\n    var settings = cli.parse('node nodemon --delay 1.2');\n    assert(settings.delay === 1200, 'delay 1.2 seconds');\n  });","file":"cli/parse.test.js","skipped":false,"dir":"test"},{"name":"should support a value with a time specifier for seconds (s)","suites":["nodemon --delay argument"],"updatePoint":{"line":317,"column":66,"index":15964},"line":317,"code":"  it('should support a value with a time specifier for seconds (s)', function () {\n    var settings = cli.parse('node nodemon --delay 5s');\n    assert(settings.delay === 5000, 'delay 5 seconds');\n  });","file":"cli/parse.test.js","skipped":false,"dir":"test"},{"name":"should support a value with a time specifier for milliseconds (ms)","suites":["nodemon --delay argument"],"updatePoint":{"line":321,"column":72,"index":16172},"line":321,"code":"  it('should support a value with a time specifier for milliseconds (ms)', function () {\n    var settings = cli.parse('node nodemon --delay 1200ms');\n    assert(settings.delay === 1200, 'delay 1.2 seconds');\n  });","file":"cli/parse.test.js","skipped":false,"dir":"test"},{"name":"should pass through environment values","suites":["when nodemon runs (1)"],"updatePoint":{"line":16,"column":44,"index":454},"line":16,"code":"  it('should pass through environment values', function (done) {\n    nodemon({\n      script: tmp,\n      stdout: false,\n      env: {\n        USER: 'nodemon'\n      }\n    }).on('stdout', function (data) {\n      assert(data.toString().trim() === 'nodemon', 'USER env value correctly set to \"nodemon\": ' + data.toString());\n      nodemon.once('exit', function () {\n        nodemon.reset(done);\n      }).emit('quit');\n    });\n  });","file":"config/env.test.js","skipped":false,"dir":"test"},{"name":"should show package is being used","suites":["config logging"],"updatePoint":{"line":27,"column":39,"index":725},"line":27,"code":"  it('should show package is being used', done => {\n    process.chdir(path.resolve(pwd, 'test/fixtures/packages/package-json-settings'));\n    const config = {};\n    load(noop, noop, config, () => {\n      assert.equal(config.loaded.length, 2, 'global nodemon and local package');\n      done();\n    });\n  });","file":"config/load-logging.test.js","skipped":false,"dir":"test"},{"name":"should not read package if no nodemonConfig","suites":["config logging"],"updatePoint":{"line":35,"column":49,"index":1042},"line":35,"code":"  it('should not read package if no nodemonConfig', done => {\n    utils.home = process.cwd();\n    process.chdir(path.resolve(pwd, 'test/fixtures'));\n    const config = {};\n    load(noop, noop, config, () => {\n      const files = config.loaded.map(_ => path.relative(pwd, _));\n      assert.equal(files.length, 1, 'global nodemon');\n      assert.deepEqual(files, ['test/fixtures/nodemon.json'], 'global nodemon');\n      done();\n    });\n  });","file":"config/load-logging.test.js","skipped":false,"dir":"test"},{"name":"should ignore legacy if new format is found","suites":["config logging"],"updatePoint":{"line":46,"column":49,"index":1482},"line":46,"code":"  it('should ignore legacy if new format is found', done => {\n    utils.home = process.cwd();\n    process.chdir(path.resolve(pwd, 'test/fixtures/legacy'));\n    const config = {};\n    load(noop, noop, config, () => {\n      const loaded = config.loaded.map(_ => path.relative(pwd, _));\n      assert.equal(loaded.length, 1, 'global nodemon is loaded and legacy is ignored');\n      done();\n    });\n  });","file":"config/load-logging.test.js","skipped":false,"dir":"test"},{"name":"should load legacy if no nodemon.json found","suites":["config logging"],"updatePoint":{"line":56,"column":49,"index":1882},"line":56,"code":"  it('should load legacy if no nodemon.json found', done => {\n    utils.home = path.resolve(pwd, 'test/fixtures/configs'); // no valid nodemon.json files\n\n    process.chdir(path.resolve(pwd, 'test/fixtures/legacy'));\n    const config = {};\n    load(noop, noop, config, () => {\n      const loaded = config.loaded.map(_ => path.relative(pwd, _));\n      assert.equal(loaded.length, 1, 'legacy loaded');\n      done();\n    });\n  });","file":"config/load-logging.test.js","skipped":false,"dir":"test"},{"name":"should load nothing if nothing found","suites":["config logging"],"updatePoint":{"line":67,"column":42,"index":2303},"line":67,"code":"  it('should load nothing if nothing found', done => {\n    utils.home = path.resolve(pwd, 'test/fixtures/configs'); // no valid nodemon.json files\n\n    process.chdir(pwd);\n    const config = {};\n    load(noop, noop, config, () => {\n      const loaded = config.loaded.map(_ => path.relative(pwd, _));\n      assert.deepEqual(loaded, [], 'nothing loaded');\n      done();\n    });\n  });","file":"config/load-logging.test.js","skipped":false,"dir":"test"},{"name":"should remove ignore defaults if user provides their own","suites":["config load"],"updatePoint":{"line":60,"column":62,"index":1477},"line":60,"code":"  it('should remove ignore defaults if user provides their own', function (done) {\n    nodemon({\n      script: testUtils.appjs,\n      verbose: true\n    }).on('log', function (event) {// console.log(event.colour);\n    }).on('start', function () {\n      assert.ok(nodemon.config.options.ignore.indexOf('one') !== -1, 'Contains \"one\" path');\n      assert.ok(nodemon.config.options.ignore.indexOf('three') !== -1, 'Contains \"three\" path'); // note: we use the escaped format: \\\\.git\n\n      assert.ok(nodemon.config.options.ignore.indexOf('\\\\.git') === -1, 'nodemon is not ignoring (default) .git');\n      nodemon.on('exit', function () {\n        nodemon.reset(done);\n      });\n      setTimeout(function () {\n        nodemon.emit('quit');\n      }, 1000);\n    });\n  });","file":"config/load.test.js","skipped":false,"dir":"test"},{"name":"should support old .nodemonignore","suites":["config load"],"updatePoint":{"line":78,"column":39,"index":2218},"line":78,"code":"  it('should support old .nodemonignore', function (done) {\n    // prevents our test from finding the nodemon.json files\n    process.chdir(path.resolve(pwd, 'test/fixtures/legacy'));\n    utils.home = path.resolve(pwd, 'test/fixtures/legacy');\n    var config = {},\n        settings = {},\n        options = {};\n    load(settings, options, config, function (config) {\n      assert(config.ignore.length === 5, '5 rules found: ' + config.ignore);\n      done();\n    });\n  });","file":"config/load.test.js","skipped":false,"dir":"test"},{"name":"should read global config","suites":["config load"],"updatePoint":{"line":90,"column":31,"index":2680},"line":90,"code":"  it('should read global config', function (done) {\n    var config = {},\n        settings = {\n      quiet: true\n    },\n        options = {};\n    load(settings, options, config, function (config) {\n      assert(config.verbose, 'we are verbose'); // ensure global mapping works too\n\n      var options = exec({\n        script: 'template.pug'\n      }, config.execMap);\n      assert(options.exec === 'bin/pug template.pug --out /tmp', 'exec used, should be \"bin/pug\": ' + options.exec);\n      done();\n    });\n  });","file":"config/load.test.js","skipped":false,"dir":"test"},{"name":"should read package.json config","suites":["config load"],"updatePoint":{"line":106,"column":37,"index":3196},"line":106,"code":"  it('should read package.json config', function (done) {\n    var dir = path.resolve(pwd, 'test/fixtures/packages/package-json-settings');\n    process.chdir(dir);\n    var config = {},\n        settings = {\n      quiet: true\n    },\n        options = {};\n    load(settings, options, config, function (config) {\n      assert.deepEqual(config.exec, 'foo', 'exec is \"foo\": ' + config.exec);\n      done();\n    });\n  });","file":"config/load.test.js","skipped":false,"dir":"test"},{"name":"should give local files preference","suites":["config load"],"updatePoint":{"line":119,"column":40,"index":3612},"line":119,"code":"  it('should give local files preference', function (done) {\n    var config = {},\n        settings = {\n      quiet: true\n    },\n        options = {};\n    load(settings, options, config, function (config) {\n      removeRegExp(config);\n      assert.ok(config.ignore.indexOf('one') !== -1, 'ignore contains \"one\": ' + config.ignore);\n      assert.ok(config.ignore.indexOf('three') !== -1, 'ignore contains \"three\": ' + config.ignore);\n      assert.deepEqual(config.watch, ['four'], 'watch is \"four\": ' + config.watch);\n      done();\n    });\n  });","file":"config/load.test.js","skipped":false,"dir":"test"},{"name":"should give local files preference over package.json config","suites":["config load"],"updatePoint":{"line":133,"column":65,"index":4181},"line":133,"code":"  it('should give local files preference over package.json config', function (done) {\n    var dir = path.resolve(pwd, 'test/fixtures/packages/nodemon-settings-and-package-json-settings');\n    process.chdir(dir);\n    var config = {},\n        settings = {\n      quiet: true\n    },\n        options = {};\n    load(settings, options, config, function (config) {\n      assert.deepEqual(config.exec, 'foo', 'exec is \"foo\": ' + config.exec);\n      done();\n    });\n  });","file":"config/load.test.js","skipped":false,"dir":"test"},{"name":"should give package.json config preference","suites":["config load"],"updatePoint":{"line":146,"column":48,"index":4626},"line":146,"code":"  it('should give package.json config preference', function (done) {\n    var dir = path.resolve(pwd, 'test/fixtures/packages/package-json-settings');\n    process.chdir(dir);\n    var config = {},\n        settings = {\n      quiet: true\n    },\n        options = {};\n    load(settings, options, config, function (config) {\n      removeRegExp(config);\n      assert.deepEqual(config.exec, 'foo', 'exec is \"foo\": ' + config.exec);\n      assert.ok(config.ignore.indexOf('one') !== -1, 'ignore contains \"one\": ' + config.ignore);\n      assert.ok(config.ignore.indexOf('three') !== -1, 'ignore contains \"three\": ' + config.ignore);\n      assert.deepEqual(config.watch, ['four'], 'watch is \"four\": ' + config.watch);\n      done();\n    });\n  });","file":"config/load.test.js","skipped":false,"dir":"test"},{"name":"should give user specified settings preference","suites":["config load"],"updatePoint":{"line":163,"column":52,"index":5364},"line":163,"code":"  it('should give user specified settings preference', function (done) {\n    var config = {},\n        settings = {\n      ignore: ['one'],\n      watch: ['one'],\n      quiet: true\n    },\n        options = {};\n    load(settings, options, config, function (config) {\n      removeRegExp(config);\n      assert(config.ignore.indexOf('one') !== -1, '\"one\" is ignored: ' + config.ignore);\n      assert.deepEqual(config.watch, ['one'], 'watch is \"one\": ' + config.watch);\n      done();\n    });\n  });","file":"config/load.test.js","skipped":false,"dir":"test"},{"name":"should give user specified settings preference over package.json config","suites":["config load"],"updatePoint":{"line":178,"column":77,"index":5879},"line":178,"code":"  it('should give user specified settings preference over package.json config', function (done) {\n    var dir = path.resolve(pwd, 'test/fixtures/packages/package-json-settings');\n    process.chdir(dir);\n    var config = {},\n        settings = {\n      exec: 'foo-user',\n      quiet: true\n    },\n        options = {};\n    load(settings, options, config, function (config) {\n      assert.deepEqual(config.exec, 'foo-user', 'exec is \"foo-user\": ' + config.exec);\n      done();\n    });\n  });","file":"config/load.test.js","skipped":false,"dir":"test"},{"name":"should give user specified exec preference over package.scripts.start","suites":["config load"],"updatePoint":{"line":192,"column":75,"index":6364},"line":192,"code":"  it('should give user specified exec preference over package.scripts.start', function (done) {\n    var dir = path.resolve(pwd, 'test/fixtures/packages/start-and-settings');\n    process.chdir(dir);\n    var config = {},\n        settings = {\n      'script': './index.js'\n    },\n        options = {};\n    load(settings, options, config, function (config) {\n      assert.deepEqual(config.exec, 'foo', 'exec is \"foo\": ' + config.exec);\n      done();\n    });\n  });","file":"config/load.test.js","skipped":false,"dir":"test"},{"name":"should give package.json specified exec config over package.scripts.start","suites":["config load"],"updatePoint":{"line":205,"column":79,"index":6827},"line":205,"code":"  it('should give package.json specified exec config over package.scripts.start', function (done) {\n    var dir = path.resolve(pwd, 'test/fixtures/packages/start-and-package-json-settings');\n    process.chdir(dir);\n    var config = {},\n        settings = {},\n        options = {};\n    load(settings, options, config, function (config) {\n      assert.deepEqual(config.exec, 'foo', 'exec is \"foo\": ' + config.exec);\n      done();\n    });\n  }); // it('should put the script at the end if found in package.scripts.start', function (done) {","file":"config/load.test.js","skipped":false,"dir":"test"},{"name":"should support \"ext\" with \"execMap\"","suites":["config load"],"updatePoint":{"line":227,"column":41,"index":7772},"line":227,"code":"  it('should support \"ext\" with \"execMap\"', function (done) {\n    // prevents our test from finding the nodemon.json files\n    process.chdir(path.resolve(pwd, 'test/fixtures/legacy'));\n    utils.home = path.resolve(pwd, 'test/fixtures/legacy');\n    var settings = {\n      script: './index.js',\n      verbose: true,\n      ignore: ['*/artic/templates/*'],\n      ext: 'js coffee json',\n      watch: ['*.coffee'],\n      execMap: {\n        js: 'node --harmony',\n        coffee: 'node --harmony'\n      }\n    };\n    var config = {};\n    var options = {};\n    load(settings, options, config, function (config) {\n      var cmd = commandToString(command(config));\n      assert(cmd === 'node --harmony ./index.js', 'cmd is: ' + cmd);\n      done();\n    });\n  });","file":"config/load.test.js","skipped":false,"dir":"test"},{"name":"should merge ignore rules","suites":["config load"],"updatePoint":{"line":250,"column":31,"index":8513},"line":250,"code":"  it('should merge ignore rules', function (done) {\n    load({\n      ignore: ['*/artic/templates/*', 'views/*']\n    }, {}, {}, function (config) {\n      assert.equal(config.ignore.length, defaults.ignoreRoot.length + 2);\n      done();\n    });\n  });","file":"config/load.test.js","skipped":false,"dir":"test"},{"name":"should allow user to override ignoreRoot","suites":["config load"],"updatePoint":{"line":258,"column":46,"index":8777},"line":258,"code":"  it('should allow user to override ignoreRoot', function (done) {\n    load({\n      ignore: ['*/artic/templates/*', 'views/*'],\n      ignoreRoot: ['.git']\n    }, {}, {}, function (config) {\n      assert.equal(config.ignore.length, 3);\n      done();\n    });\n  });","file":"config/load.test.js","skipped":false,"dir":"test"},{"name":"should merge ignore rules even when strings","suites":["config load"],"updatePoint":{"line":267,"column":49,"index":9043},"line":267,"code":"  it('should merge ignore rules even when strings', function (done) {\n    load({\n      ignore: 'public'\n    }, {}, {}, function (config) {\n      assert.equal(config.ignore.length, defaults.ignoreRoot.length + 1);\n      done();\n    });\n  });","file":"config/load.test.js","skipped":false,"dir":"test"},{"name":"should allow user to override root ignore rules","suites":["config load"],"updatePoint":{"line":275,"column":53,"index":9288},"line":275,"code":"  it('should allow user to override root ignore rules', function (done) {\n    load({\n      ignore: 'public',\n      ignoreRoot: []\n    }, {}, {}, function (config) {\n      assert.equal(config.ignore.length, 1);\n      done();\n    });\n  });","file":"config/load.test.js","skipped":false,"dir":"test"},{"name":"should allow user to set execArgs","suites":["config load"],"updatePoint":{"line":284,"column":39,"index":9512},"line":284,"code":"  it('should allow user to set execArgs', done => {\n    const execArgs = ['--inspect'];\n    load({\n      execArgs\n    }, {}, {}, config => {\n      assert.deepEqual(config.execArgs, execArgs);\n      done();\n    });\n  });","file":"config/load.test.js","skipped":false,"dir":"test"},{"name":"should support pkg.main and keep user args on args","suites":["config load"],"updatePoint":{"line":293,"column":56,"index":9749},"line":293,"code":"  it('should support pkg.main and keep user args on args', done => {\n    process.chdir(path.resolve(pwd, 'test/fixtures/packages/main-and-start'));\n    const settings = {\n      scriptPosition: 0,\n      script: null,\n      args: ['first', 'second']\n    };\n    const options = {\n      ignore: [],\n      watch: [],\n      monitor: []\n    };\n    const config = {\n      run: false,\n      system: {\n        cwd: '/Users/remy/dev/nodemon/issues/1758'\n      },\n      required: false,\n      dirs: [],\n      timeout: 1000,\n      options: {\n        ignore: [],\n        watch: [],\n        monitor: []\n      },\n      lastStarted: 0,\n      loaded: []\n    };\n    load(settings, options, config, res => {\n      assert.deepEqual(res.execOptions.args, ['first', 'second']);\n      done();\n    });\n  });","file":"config/load.test.js","skipped":false,"dir":"test"},{"name":"start","suites":["events should follow normal flow on user triggered change"],"updatePoint":{"line":57,"column":11,"index":1220},"line":57,"code":"  it('start', function (done) {\n    debug('start');\n    nodemon(conf()).once('start', function () {\n      assert(true, '\"start\" event');\n      done();\n    });\n  });","file":"events/complete.test.js","skipped":false,"dir":"test"},{"name":"config:update","suites":["events should follow normal flow on user triggered change"],"updatePoint":{"line":64,"column":19,"index":1393},"line":64,"code":"  it('config:update', function (done) {\n    nodemon(conf()).on('config:update', function () {\n      assert(true, '\"config:update\" event');\n      done();\n    });\n  });","file":"events/complete.test.js","skipped":false,"dir":"test"},{"name":"exit","suites":["events should follow normal flow on user triggered change"],"updatePoint":{"line":70,"column":10,"index":1551},"line":70,"code":"  it('exit', function (done) {\n    var plan = new utils.Plan(4, function () {\n      nodemon.reset(done);\n    });\n    var run = 0;\n    nodemon(conf()).on('exit', function () {\n      plan.assert(true, '\"exit\" event');\n\n      if (run === 1) {\n        setTimeout(function () {\n          plan.assert(true, 'restarting ' + appjs);\n          touch.sync(appjs);\n        }, 1500);\n      } else if (run === 2) {\n        plan.assert(true, 'finished');\n      } else {\n        plan.assert(false, 'quit too many times: ' + run);\n      }\n    }).on('start', function () {\n      run++;\n    });\n  });","file":"events/complete.test.js","skipped":false,"dir":"test"},{"name":"stdout","suites":["events should follow normal flow on user triggered change"],"updatePoint":{"line":92,"column":12,"index":2136},"line":92,"code":"  it('stdout', function (done) {\n    nodemon(conf()).once('stdout', function (data) {\n      assert(true, '\"stdout\" event with: ' + data);\n      done();\n    });\n  });","file":"events/complete.test.js","skipped":false,"dir":"test"},{"name":"restart","suites":["events should follow normal flow on user triggered change"],"updatePoint":{"line":98,"column":13,"index":2303},"line":98,"code":"  it('restart', function (done) {\n    var plan = new utils.Plan(4, function () {\n      nodemon.reset(done);\n    });\n    nodemon(conf()).on('restart', function (files) {\n      plan.assert(true, '\"restart\" event with ' + files);\n      plan.assert(files[0] === appjs, 'restart due to ' + files.join(' ') + ' changing');\n    }).once('exit', function () {\n      plan.assert(true, '\"exit\" event');\n      setTimeout(function () {\n        plan.assert(true, 'restarting');\n        touch.sync(appjs);\n      }, 1500);\n    });\n  });","file":"events/complete.test.js","skipped":false,"dir":"test"},{"name":"should trigger start event script","suites":["nodemon API events"],"updatePoint":{"line":45,"column":39,"index":1339},"line":45,"code":"  it('should trigger start event script', function (done) {\n    var plan = new testUtils.Plan(4, done);\n    nodemon({\n      script: appjs,\n      verbose: true,\n      stdout: false,\n      env: {\n        USER: 'nodemon'\n      }\n    }).on('start', function () {\n      plan.assert(true, 'started');\n    }).on('exit', function () {\n      plan.assert(true, 'exit');\n    }).on('stdout', function (data) {\n      data = data.toString().trim();\n\n      if (data === 'OK') {\n        plan.assert(true, 'OK found');\n      } else if (data === 'STOPPED') {\n        plan.assert(true, 'STOPPED found');\n      } else if (data === 'nodemon') {// expected output\n      } else {\n        plan.assert(false, data + ' found');\n      }\n    });\n  });","file":"events/scripts.test.js","skipped":false,"dir":"test"},{"name":"should start","suites":["nodemon fork simply running"],"updatePoint":{"line":15,"column":18,"index":401},"line":15,"code":"  it('should start', function (done) {\n    var p = run(appjs, {\n      output: function (data) {\n        if (match(data, appjs)) {\n          assert(true, 'nodemon started');\n          cleanup(p, done);\n        }\n      },\n      error: function (data) {\n        assert(false, 'nodemon failed with ' + data);\n        cleanup(p, done);\n      }\n    });\n  });","file":"fork/change-detect.test.js","skipped":false,"dir":"test"},{"name":"should restart on .js file changes with no arguments","suites":["nodemon fork monitor"],"updatePoint":{"line":31,"column":58,"index":845},"line":31,"code":"  it('should restart on .js file changes with no arguments', function (done) {\n    var startWatch = false;\n    var p = run(appjs, {\n      output: function (data) {\n        if (match(data, 'files triggering change check: test/fixtures/app.js')) {\n          startWatch = true;\n        }\n\n        if (startWatch && match(data, 'changes after filters')) {\n          var changes = colour.strip(data.trim());\n          var restartedOn = null;\n          changes.replace(/changes after filters \\(before\\/after\\): \\d+\\/(\\d+)/, (_, m) => {\n            restartedOn = m;\n          }); // .split('changes after filters').pop().split('/');\n          // var restartedOn = changes.pop().trim();\n\n          assert.equal(restartedOn, '1', 'nodemon restarted on 1 file: ' + restartedOn + ' / ' + data.toString());\n        }\n      },\n      error: function (data) {\n        utils.cleanup(p, done, new Error(data));\n      }\n    });\n    p.on('message', function (event) {\n      if (event.type === 'restart') {\n        utils.cleanup(p, done);\n      } else if (event.type === 'start') {\n        setTimeout(function () {\n          touch.sync(appjs);\n        }, 1000);\n      }\n    });\n  });","file":"fork/change-detect.test.js","skipped":false,"dir":"test"},{"name":"should NOT restart on non-.js file changes with no arguments","suites":["nodemon fork monitor"],"updatePoint":{"line":64,"column":66,"index":2017},"line":64,"code":"  it('should NOT restart on non-.js file changes with no arguments', function (done) {\n    setTimeout(function () {\n      var p = run(appjs, {\n        output: function (data) {\n          if (match(data, 'changes after filters')) {\n            data = colour.strip(data.toString().trim());\n            var changes = data.split('/');\n            var restartedOn = changes.pop();\n            assert.equal(restartedOn, '0', 'expects to not have restarted');\n            utils.cleanup(p, done);\n          }\n        },\n        error: function (data) {\n          utils.cleanup(p, done, new Error(data));\n        }\n      });\n      p.on('message', function (event) {\n        if (event.type === 'start') {\n          setTimeout(function () {\n            // touch a different file, but in the same directory\n            touch.sync(appcoffee);\n          }, 2500);\n        } else if (event.type === 'restart') {\n          utils.cleanup(p, done, new Error('nodemon restarted'));\n        }\n      });\n    }, 1000);\n  });","file":"fork/change-detect.test.js","skipped":false,"dir":"test"},{"name":"should allow execMap.js to be overridden","suites":["nodemon full config test"],"updatePoint":{"line":20,"column":46,"index":588},"line":20,"code":"  it('should allow execMap.js to be overridden', function (done) {\n    var p = run({\n      exec: '../../bin/nodemon.js',\n      args: ['-V']\n    }, {\n      error: function (data) {\n        p.send('quit');\n        cleanup(p, done, new Error(data));\n      }\n    });\n    p.on('message', function (event) {\n      if (event.type === 'log') {\n        if (match(event.data.message, 'starting `')) {\n          event.data.message.replace(/`(.*)`/, function (all, m) {\n            assert(m === 'node --harmony app.js', 'Arguments in the correct order: ' + m); // p.send('quit');\n\n            cleanup(p, done);\n          });\n        }\n      }\n    });\n  });","file":"fork/config.test.js","skipped":false,"dir":"test"},{"name":"should start a fork exec with quotes and escaping","suites":["nodemon fork (mac only)"],"updatePoint":{"line":19,"column":57,"index":648},"line":19,"code":"    it('should start a fork exec with quotes and escaping', done => {\n      var found = false;\n      var p = run({\n        exec: 'bin/nodemon.js',\n        // make nodemon verbose so we can check the filters being applied\n        args: ['-q', '--exec', filenames[0][0]]\n      }, {\n        error: function (data) {\n          p.send('quit');\n          done(new Error(data));\n        },\n        output: function (data) {\n          // process.stdout.write(data);\n          if (data.trim() === 'OK') {\n            found = true;\n          }\n        }\n      });\n      p.on('message', function (event) {\n        if (event.type === 'start') {\n          setTimeout(function () {\n            p.send('quit');\n            done();\n            assert(found, '\"OK\" message was found');\n          }, 500);\n        }\n      });\n    });","file":"fork/run-mac-only.test.js","skipped":false,"dir":"test"},{"name":"should start a fork exec with spaces and slashes","suites":["nodemon fork (mac only)"],"updatePoint":{"line":47,"column":56,"index":1463},"line":47,"code":"    it('should start a fork exec with spaces and slashes', done => {\n      var found = false;\n      var p = run({\n        exec: 'bin/nodemon.js',\n        // make nodemon verbose so we can check the filters being applied\n        args: ['-q', '--exec', `\"${filenames[1][0]}`]\n      }, {\n        error: function (data) {\n          p.send('quit');\n          done(new Error(data));\n        },\n        output: function (data) {\n          // process.stdout.write(data);\n          if (data.trim() === 'OK') {\n            found = true;\n          }\n        }\n      });\n      p.on('message', function (event) {\n        if (event.type === 'start') {\n          setTimeout(function () {\n            p.send('quit');\n            done();\n            assert(found, '\"OK\" message was found');\n          }, 500);\n        }\n      });\n    });","file":"fork/run-mac-only.test.js","skipped":false,"dir":"test"},{"name":"should not show user-signal","suites":["nodemon fork"],"updatePoint":{"line":8,"column":33,"index":221},"line":8,"code":"  it('should not show user-signal', done => {\n    var p = run({\n      exec: 'bin/nodemon.js',\n      args: ['-V', '-x', 'echo running && sleep 20']\n    }, {\n      error: function (data) {\n        p.send('quit');\n\n        if (data.trim().indexOf('signal') !== -1) {\n          return done(new Error('Signal incorrectly shown'));\n        }\n\n        done(new Error(data));\n      },\n      output: function (data) {\n        if (data.trim().indexOf('signal') !== -1) {\n          done(new Error('Signal incorrectly shown'));\n        }\n      }\n    });\n    let started = false;\n    p.on('message', function (event) {\n      if (event.type === 'start') {\n        if (!started) {\n          p.send('restart');\n          started = true;\n        } else {\n          p.send('quit');\n          assert(true, 'nodemon started');\n          done();\n        }\n      }\n    });\n  });","file":"fork/run.test.js","skipped":false,"dir":"test"},{"name":"should start a fork","suites":["nodemon fork"],"updatePoint":{"line":42,"column":25,"index":1070},"line":42,"code":"  it('should start a fork', function (done) {\n    var p = run(appjs, {\n      error: function (data) {\n        p.send('quit');\n        done(new Error(data));\n      }\n    });\n    p.on('message', function (event) {\n      if (event.type === 'start') {\n        p.send('quit');\n        assert(true, 'nodemon started');\n        done();\n      }\n    });\n  });","file":"fork/run.test.js","skipped":false,"dir":"test"},{"name":"should start a fork exec with a space without args","suites":["nodemon fork"],"updatePoint":{"line":59,"column":58,"index":1484},"line":59,"code":"    it('should start a fork exec with a space without args', function (done) {\n      var found = false;\n      var p = run({\n        exec: 'bin/nodemon.js',\n        // make nodemon verbose so we can check the filters being applied\n        args: ['-q', '--exec', 'test/fixtures/app\\\\ with\\\\ spaces.js']\n      }, {\n        error: function (data) {\n          p.send('quit');\n          done(new Error(data));\n        },\n        output: function (data) {\n          // process.stdout.write(data);\n          if (data.trim() === 'OK') {\n            found = true;\n          }\n        }\n      });\n      p.on('message', function (event) {\n        if (event.type === 'start') {\n          setTimeout(function () {\n            p.send('quit');\n            done();\n            assert(found, '\"OK\" message was found');\n          }, 500);\n        }\n      });\n    });","file":"fork/run.test.js","skipped":false,"dir":"test"},{"name":"should start a fork exec with a space with args","suites":["nodemon fork"],"updatePoint":{"line":87,"column":55,"index":2329},"line":87,"code":"    it('should start a fork exec with a space with args', function (done) {\n      var found = false;\n      var p = run({\n        exec: 'bin/nodemon.js',\n        // make nodemon verbose so we can check the filters being applied\n        args: ['-q', '--exec', '\"test/fixtures/app with spaces.js\" foo']\n      }, {\n        error: function (data) {\n          p.send('quit');\n          done(new Error(data));\n        },\n        output: function (data) {\n          if (data.trim() === 'foo') {\n            found = true;\n          }\n        }\n      });\n      p.on('message', function (event) {\n        if (event.type === 'start') {\n          setTimeout(function () {\n            p.send('quit');\n            assert(found, '\"foo\" message found');\n            done();\n          }, 500);\n        }\n      });\n    });","file":"fork/run.test.js","skipped":false,"dir":"test"},{"name":"should start a fork exec with a space with args (escaped)","suites":["nodemon fork"],"updatePoint":{"line":116,"column":63,"index":3146},"line":116,"code":"  it('should start a fork exec with a space with args (escaped)', function (done) {\n    var found = false;\n    var p = run({\n      exec: 'bin/nodemon.js',\n      // make nodemon verbose so we can check the filters being applied\n      args: ['-q', '--exec', 'test/fixtures/app\\\\ with\\\\ spaces.js foo']\n    }, {\n      error: function (data) {\n        p.send('quit');\n        done(new Error(data));\n      },\n      output: function (data) {\n        // process.stdout.write(data);\n        if (data.trim() === 'foo') {\n          found = true;\n        }\n      }\n    });\n    p.on('message', function (event) {\n      if (event.type === 'start') {\n        setTimeout(function () {\n          p.send('quit');\n          done();\n          assert(found, '\"OK\" message found');\n        }, 500);\n      }\n    });\n  });","file":"fork/run.test.js","skipped":false,"dir":"test"},{"name":"should happen when monitoring a single extension","suites":["nodemon fork child restart"],"updatePoint":{"line":68,"column":54,"index":2144},"line":68,"code":"  it('should happen when monitoring a single extension', function (done) {\n    fs.writeFileSync(tmpjs, 'true;');\n    var p = run('--ext js ' + appjs, {\n      error: function (data) {\n        p.send('quit');\n        cleanup(p, done, new Error(data));\n      }\n    });\n    p.on('message', function (event) {\n      if (event.type === 'start') {\n        setTimeout(function () {\n          touch.sync(tmpjs);\n        }, 1000);\n      } else if (event.type === 'restart') {\n        assert(true, 'nodemon restarted');\n        cleanup(p, done);\n      }\n    });\n  });","file":"fork/watch-restart.test.js","skipped":false,"dir":"test"},{"name":"should happen only once if delay option is set","suites":["nodemon fork child restart"],"updatePoint":{"line":87,"column":52,"index":2699},"line":87,"code":"  it('should happen only once if delay option is set', function (done) {\n    var restartCount = 0;\n    fs.writeFile(tmpjs, 'true;', function () {\n      var p = run('--verbose --ext js --delay 2 ' + tmpjs, {\n        error: function (data) {\n          p.send('quit');\n          cleanup(p, done, new Error(data));\n        }\n      });\n      setTimeout(function () {\n        if (restartCount === 1) {\n          assert(true, 'nodemon restarted ' + restartCount + ' times');\n          cleanup(p, done);\n        } else {\n          cleanup(p, done, new Error('nodemon started ' + restartCount + ' times'));\n        }\n      }, 8000);\n      p.on('message', function (event) {\n        if (event.type === 'log') {// console.log(event.data.colour);\n        } else {// console.log(event.type, Date.now()/1000|0);\n        } // on first start - kick off timeouts to touch the files\n\n\n        if (event.type === 'start' && restartCount === 0) {\n          setTimeout(function () {\n            // console.log('touch 1', Date.now()/1000|0);\n            touch.sync(tmpjs);\n          }, 1000);\n          setTimeout(function () {\n            // console.log('touch 2', Date.now()/1000|0);\n            touch.sync(tmpjs);\n          }, 2000);\n          setTimeout(function () {\n            // console.log('touch 3', Date.now()/1000|0);\n            touch.sync(tmpjs);\n          }, 3000);\n          setTimeout(function () {\n            // console.log('touch 4', Date.now()/1000|0);\n            touch.sync(tmpjs);\n          }, 4000);\n        }\n\n        if (event.type === 'restart') {\n          restartCount++;\n        }\n      });\n    });\n  });","file":"fork/watch-restart.test.js","skipped":false,"dir":"test"},{"name":"should happen when monitoring multiple extensions","suites":["nodemon fork child restart"],"updatePoint":{"line":135,"column":55,"index":4316},"line":135,"code":"  it('should happen when monitoring multiple extensions', function (done) {\n    fs.writeFileSync(tmpjs, 'true;');\n    fs.writeFileSync(tmpmd, '# true');\n    var monitor = utils.monitorForChange('changes after filters');\n    setTimeout(function () {\n      var p = run('--ext js,md ' + appjs, {\n        error: function (data) {\n          p.send('quit');\n          cleanup(p, done, new Error(data));\n        },\n        output: function (data) {\n          var msg = colour.strip(data.trim());\n\n          if (utils.match(msg, 'changes after filters (before/after)')) {\n            var changes = msg.split(/\\n/).shift();\n            changes = changes.replace(/\\s*/gm, '').slice(-5).split('/');\n            var restartedOn = changes.pop();\n            assert.equal(restartedOn, '1', 'nodemon restarted on a single file change: ' + restartedOn + ' -- ' + msg);\n            cleanup(p, done);\n          }\n        }\n      });\n      p.on('message', function (event) {\n        if (event.type === 'start') {\n          setTimeout(function () {\n            touch.sync(tmpmd);\n          }, 1000);\n        }\n      });\n    }, 2000);\n  });","file":"fork/watch-restart.test.js","skipped":false,"dir":"test"},{"name":"should load index by default","suites":["help"],"updatePoint":{"line":6,"column":34,"index":173},"line":6,"code":"  it('should load index by default', function () {\n    var page = help();\n    assert(page.indexOf('Usage: nodemon') !== -1, 'shows default help page');\n  });","file":"help/help.test.js","skipped":false,"dir":"test"},{"name":"should load specific help topic","suites":["help"],"updatePoint":{"line":10,"column":37,"index":334},"line":10,"code":"  it('should load specific help topic', function () {\n    var page = help('authors');\n    assert(page.indexOf('Remy Sharp') !== -1, 'shows specific topic');\n  });","file":"help/help.test.js","skipped":false,"dir":"test"},{"name":"should not expose files","suites":["help"],"updatePoint":{"line":14,"column":29,"index":489},"line":14,"code":"  it('should not expose files', function () {\n    var page = help('../../test/fixtures/help');\n    assert(page.indexOf('\" help can\\'t be found') !== -1, 'shows help cannot be found');\n  });","file":"help/help.test.js","skipped":false,"dir":"test"},{"name":"should have (shims) events","suites":["nodemon events"],"updatePoint":{"line":6,"column":32,"index":180},"line":6,"code":"  it('should have (shims) events', function () {\n    assert(nodemon.on);\n  });","file":"lib/events.test.js","skipped":false,"dir":"test"},{"name":"should allow events to fire","suites":["nodemon events"],"updatePoint":{"line":9,"column":33,"index":260},"line":9,"code":"  it('should allow events to fire', function (done) {\n    nodemon.on('foo', function () {\n      assert(true);\n      done();\n    });\n    nodemon.emit('foo');\n  });","file":"lib/events.test.js","skipped":false,"dir":"test"},{"name":"should restart on file change","suites":["require-able"],"updatePoint":{"line":25,"column":35,"index":806},"line":25,"code":"  it('should restart on file change', function (done) {\n    var restarted = false;\n    utils.port++;\n    nodemon({\n      script: appjs,\n      verbose: true,\n      env: {\n        PORT: utils.port\n      }\n    }).on('start', function () {\n      setTimeout(function () {\n        touch.sync(appjs);\n      }, 1000);\n    }).on('start', function () {\n      if (restarted) {\n        setTimeout(function () {\n          nodemon.emit('quit');\n        });\n      }\n    }).on('restart', function () {\n      restarted = true;\n    }).on('quit', function () {\n      assert(restarted, 'nodemon restarted and quit properly');\n      nodemon.reset(done);\n    }).on('log', function (event) {// console.log(event.message);\n    });\n  });","file":"lib/require-restartable.test.js","skipped":false,"dir":"test"},{"name":"should prioritise options over package.start","suites":["require-able"],"updatePoint":{"line":25,"column":50,"index":821},"line":25,"code":"  it('should prioritise options over package.start', function (done) {\n    process.chdir(path.resolve('fixtures/packages/start-ignored'));\n    nodemon({\n      script: envjs,\n      env: {\n        USER: 'nodemon'\n      },\n      stdout: false\n    }).on('stdout', function (data) {\n      var out = data.toString().trim();\n      assert(out === 'nodemon', 'expected output: ' + out);\n      done();\n    }).on('error', function (e) {\n      assert(false, 'script did not run: ' + e);\n      done();\n    });\n  });","file":"lib/require.test.js","skipped":false,"dir":"test"},{"name":"should know nodemon has been required","suites":["require-able"],"updatePoint":{"line":42,"column":43,"index":1317},"line":42,"code":"  it('should know nodemon has been required', function () {\n    assert(nodemon.config.required, 'nodemon has required property');\n  });","file":"lib/require.test.js","skipped":false,"dir":"test"},{"name":"should restart on file change with custom signal","suites":["require-able"],"updatePoint":{"line":45,"column":54,"index":1464},"line":45,"code":"  it('should restart on file change with custom signal', function (done) {\n    var restarted = false;\n    utils.port++;\n    nodemon({\n      script: appjs,\n      verbose: true,\n      env: {\n        PORT: utils.port\n      },\n      signal: 'SIGINT'\n    }).on('start', function () {\n      setTimeout(function () {\n        touch.sync(appjs);\n      }, 1000);\n    }).on('start', function () {\n      if (restarted) {\n        setTimeout(function () {\n          nodemon.emit('quit');\n        });\n      }\n    }).on('restart', function () {\n      restarted = true;\n    }).on('quit', function () {\n      assert(restarted, 'nodemon restarted and quit properly');\n      nodemon.reset(done);\n    }).on('log', function (event) {// console.log(event.message);\n    });\n  });","file":"lib/require.test.js","skipped":false,"dir":"test"},{"name":"should be restartable","suites":["require-able"],"updatePoint":{"line":73,"column":27,"index":2193},"line":73,"code":"  it('should be restartable', function (done) {\n    var restarted = false;\n    nodemon(appjs).on('start', function () {\n      setTimeout(function () {\n        nodemon.restart();\n      }, 1000);\n    }).on('restart', function () {\n      restarted = true;\n      nodemon.emit('quit');\n    }).on('quit', function () {\n      assert(restarted);\n      nodemon.reset(done); // unbind events for testing again\n    });\n  });","file":"lib/require.test.js","skipped":false,"dir":"test"},{"name":"should kill child with SIGINT","suites":["terminal signals"],"updatePoint":{"line":40,"column":35,"index":1021},"line":40,"code":"  it('should kill child with SIGINT', function (done) {\n    runAndKill(done, appjs, function (childPID) {\n      assert(!isRunning(childPID), 'child is still running at ' + childPID);\n      done();\n    });\n  });","file":"misc/sigint.test.js","skipped":false,"dir":"test"},{"name":"should terminate nodemon (after ~10 seconds)","suites":["terminal signals"],"updatePoint":{"line":46,"column":50,"index":1247},"line":46,"code":"  it('should terminate nodemon (after ~10 seconds)', function (done) {\n    runAndKill(done, appjs + ' --dont-exit', function (childPID) {\n      // make sure we don't keep abandoned child\n      process.kill(childPID, 'SIGTERM');\n      done();\n    });\n  });","file":"misc/sigint.test.js","skipped":false,"dir":"test"},{"name":"should respect ignore rules","suites":["watch count"],"updatePoint":{"line":27,"column":33,"index":647},"line":27,"code":"  it('should respect ignore rules', function (done) {\n    process.chdir('test/fixtures/watch-count');\n    nodemon({\n      script: appjs,\n      verbose: true\n    }).on('start', function () {\n      setTimeout(function () {\n        nodemon.once('exit', done).emit('quit');\n      }, 200);\n    }).on('log', function (data) {\n      var match = null;\n      var count = 0;\n\n      if (match = data.message.match(watchRe)) {\n        count = match[1].replace(',', '') * 1;\n        assert(count === 6, 'Watching ' + count + ' files, expecting 6.');\n      }\n    });\n  });","file":"monitor/count.test.js","skipped":false,"dir":"test"},{"name":"should not watch directory when given a single file","suites":["watch count"],"updatePoint":{"line":46,"column":57,"index":1230},"line":46,"code":"  it('should not watch directory when given a single file', function (done) {\n    process.chdir('test/fixtures/watch-count/');\n    var watching = 0;\n    nodemon({\n      script: appjs,\n      verbose: true,\n      watch: appjs\n    }).on('start', function () {\n      setTimeout(function () {\n        assert(watching === 1, `got ${watching} files`);\n        nodemon.once('exit', done).emit('quit');\n      }, 200);\n    }).on('watching', file => {\n      watching++;\n    }).on('log', function (data) {\n      var match = null;\n      var count = 0;\n\n      if (match = data.message.match(watchRe)) {\n        count = match[1].replace(',', '') * 1;\n        assert(count === 1, `log showing ${count} files`);\n      }\n    });\n  });","file":"monitor/count.test.js","skipped":false,"dir":"test"},{"name":"should ignore node_modules from any dir","suites":["watch count"],"updatePoint":{"line":70,"column":45,"index":1935},"line":70,"code":"  it('should ignore node_modules from any dir', function (done) {\n    process.chdir('test/fixtures/watch-count/lib');\n    nodemon({\n      script: appjs,\n      verbose: true,\n      watch: '..'\n    }).on('start', function () {\n      setTimeout(function () {\n        nodemon.once('exit', done).emit('quit');\n      }, 200);\n    }).on('log', function (data) {\n      var match = null;\n      var count = 0;\n\n      if (match = data.message.match(watchRe)) {\n        count = match[1].replace(',', '') * 1;\n        assert(count === 6, 'Watching ' + count + ' files, expecting 6.');\n      }\n    });\n  });","file":"monitor/count.test.js","skipped":false,"dir":"test"},{"name":"should be controlled via cli","suites":["nodemon ignore"],"updatePoint":{"line":61,"column":34,"index":1577},"line":61,"code":"  it('should be controlled via cli', function (done) {\n    ignore('node_modules', done);\n  });","file":"monitor/ignore.test.js","skipped":false,"dir":"test"},{"name":"should ignore node_modules by default","suites":["nodemon ignore"],"updatePoint":{"line":64,"column":43,"index":1681},"line":64,"code":"  it('should ignore node_modules by default', function (done) {\n    ignore(null, done, path.join(process.cwd(), 'node_modules', 'mocha', 'node_modules', randomFile()));\n  });","file":"monitor/ignore.test.js","skipped":false,"dir":"test"},{"name":"should resolve ./ in positive match","suites":["match"],"updatePoint":{"line":17,"column":41,"index":640},"line":17,"code":"  it('should resolve ./ in positive match', () => {\n    const cwd = process.cwd();\n    const res = match([cwd + '/app.nodemon'], ['./*.nodemon', '!**/dir/*.nodemon'], 'js,mjs,json,nodemon');\n    assert.equal(res.result.length, 1, JSON.stringify(res));\n  });","file":"monitor/match.test.js","skipped":false,"dir":"test"},{"name":"should resolve ./ in positive match (miss test)","suites":["match"],"updatePoint":{"line":22,"column":53,"index":910},"line":22,"code":"  it('should resolve ./ in positive match (miss test)', () => {\n    const cwd = process.cwd();\n    const res = match([cwd + '/dir/app.nodemon'], ['./*.nodemon', '!**/dir/*.nodemon'], 'js,mjs,json,nodemon');\n    assert.equal(res.result.length, 0, JSON.stringify(res));\n    assert.equal(res.ignored, 1, JSON.stringify(res));\n  });","file":"monitor/match.test.js","skipped":false,"dir":"test"},{"name":"should resolve ./ in negative match (hit test)","suites":["match"],"updatePoint":{"line":28,"column":52,"index":1238},"line":28,"code":"  it('should resolve ./ in negative match (hit test)', () => {\n    const cwd = process.cwd();\n    const res = match([cwd + '/app.nodemon'], ['!./*.nodemon', '**/dir/*.nodemon'], 'js,mjs,json,nodemon');\n    assert.equal(res.result.length, 0, JSON.stringify(res));\n    assert.equal(res.ignored, 1, JSON.stringify(res));\n  });","file":"monitor/match.test.js","skipped":false,"dir":"test"},{"name":"should handle lots of **s!","suites":["match"],"updatePoint":{"line":34,"column":32,"index":1542},"line":34,"code":"  it('should handle lots of **s!', () => {\n    const res = match(['test/fixtures/app.js'], ['*.*', '!**/.git/**', '!**/.nyc_output/**', '!**/.sass-cache/**', '!**/bower_components/**', '!**/coverage/**'], 'js,mjs,json');\n    assert.equal(res.result.length, 1, JSON.stringify(res));\n  });","file":"monitor/match.test.js","skipped":false,"dir":"test"},{"name":"should match zero files","suites":["match"],"updatePoint":{"line":38,"column":29,"index":1827},"line":38,"code":"  it('should match zero files', function () {\n    var files = ['views/server/remy.coffee', 'random.coffee', '/User/remy/app/server/foo.coffee'];\n    var results = match(files, monitor); // ignoring extension support\n\n    assert(results.result.length === 0, 'matched ' + results.result.length);\n  });","file":"monitor/match.test.js","skipped":false,"dir":"test"},{"name":"should match one file","suites":["match"],"updatePoint":{"line":44,"column":27,"index":2125},"line":44,"code":"  it('should match one file', function () {\n    var files = ['views/server/remy.js', 'random.coffee', '/User/remy/app/server/foo.coffee'];\n    var results = match(files, monitor);\n    assert(results.result.length === 1, 'matched ' + results.result.length);\n  });","file":"monitor/match.test.js","skipped":false,"dir":"test"},{"name":"should match two files","suites":["match"],"updatePoint":{"line":49,"column":28,"index":2389},"line":49,"code":"  it('should match two files', function () {\n    var files = ['views/server/test.js', 'views/server/test2.js', 'views/server/test.coffee'];\n    var results = match(files, monitor);\n    assert(results.result.length === 2, 'matched ' + results.result.length);\n  });","file":"monitor/match.test.js","skipped":false,"dir":"test"},{"name":"should match one file","suites":["match"],"updatePoint":{"line":54,"column":27,"index":2652},"line":54,"code":"  it('should match one file', function () {\n    var files = ['views/server/remy.js', 'views/server/ignore.js', 'random.coffee', '/User/remy/app/server/foo.coffee'];\n    monitor.push('!views/server/ignore.js');\n    var results = match(files, monitor);\n    assert(results.result.length === 1, 'matched ' + results.result.length);\n  });","file":"monitor/match.test.js","skipped":false,"dir":"test"},{"name":"should apply *.js to any js file","suites":["match"],"updatePoint":{"line":60,"column":38,"index":2997},"line":60,"code":"  it('should apply *.js to any js file', function () {\n    var files = [utils.appjs];\n    var result = match(files, ['*.*'], 'js');\n    assert.deepEqual(result.result, files, 'file returned from match, matches');\n    assert(result.ignored === 0, 'no files were ignored');\n    assert(result.watched === files.length, 'a single file was matched');\n  });","file":"monitor/match.test.js","skipped":false,"dir":"test"},{"name":"should ignore .coffee if watching *.js","suites":["match"],"updatePoint":{"line":67,"column":44,"index":3355},"line":67,"code":"  it('should ignore .coffee if watching *.js', function () {\n    var files = [utils.appcoffee];\n    var result = match(files, ['*.*'], 'js');\n    assert.deepEqual(result.result, [], 'no results returned: ' + result.result);\n  });","file":"monitor/match.test.js","skipped":false,"dir":"test"},{"name":"should match .coffee if watching *.js & *.coffee","suites":["match"],"updatePoint":{"line":72,"column":54,"index":3595},"line":72,"code":"  it('should match .coffee if watching *.js & *.coffee', function (done) {\n    config.load({\n      ext: 'js coffee'\n    }, function (config) {\n      var files = [utils.appcoffee];\n      var result = match(files, config.options.monitor, config.options.execOptions.ext);\n      assert.deepEqual(result.result, files, 'coffee file matched');\n      assert(result.ignored === 0, '0 files ignored');\n      done();\n    });\n  });","file":"monitor/match.test.js","skipped":false,"dir":"test"},{"name":"should ignore nodemon default rules","suites":["match"],"updatePoint":{"line":83,"column":41,"index":4003},"line":83,"code":"  it('should ignore nodemon default rules', function (done) {\n    config.load({\n      ext: '*.js'\n    }, function (config) {\n      var files = [utils.appjs, path.join(__dirname, '/.git/foo.js')];\n      var result = match(files, config.options.monitor, config.options.execOptions.ext);\n      assert.deepEqual(result.result, files.slice(0, 1), 'first file matched');\n      assert(result.ignored === 1, '.git file was ignored');\n      assert(result.watched === 1, 'a single file was matched');\n      done();\n    });\n  });","file":"monitor/match.test.js","skipped":false,"dir":"test"},{"name":"should ignore directories","suites":["match"],"updatePoint":{"line":95,"column":31,"index":4512},"line":95,"code":"  it('should ignore directories', function (done) {\n    config.load({\n      ext: 'js',\n      ignore: 'test/fixtures'\n    }, function (config) {\n      var files = [utils.appjs];\n      var result = match(files, config.options.monitor, config.options.execOptions.ext);\n      assert.deepEqual(result.result, [], 'should be no files matched');\n      done();\n    });\n  });","file":"monitor/match.test.js","skipped":false,"dir":"test"},{"name":"should check all directories by default","suites":["match"],"updatePoint":{"line":106,"column":45,"index":4893},"line":106,"code":"  it('should check all directories by default', function (done) {\n    config.load({\n      ext: 'js'\n    }, function (config) {\n      var files = [utils.appjs];\n      var result = match(files, config.options.monitor, config.options.execOptions.ext);\n      assert.deepEqual(result.result, files, 'results should match');\n      done();\n    });\n  });","file":"monitor/match.test.js","skipped":false,"dir":"test"},{"name":"should support old .nodemonignore","suites":["match"],"updatePoint":{"line":116,"column":39,"index":5234},"line":116,"code":"  it('should support old .nodemonignore', function (done) {\n    // prevents our test from finding the nodemon.json files\n    var pwd = process.cwd(),\n        old = nodemonUtils.home;\n    process.chdir(path.resolve(pwd, 'test/fixtures/legacy'));\n    nodemonUtils.home = path.resolve(pwd, 'test/fixtures/legacy'); // will load the legacy file format\n\n    config.load({\n      script: utils.appjs,\n      ext: 'js json'\n    }, function (config) {\n      var files = [utils.appjs];\n      var result = match(files, config.options.monitor, config.options.execOptions.ext);\n      assert.deepEqual(result.result, files, 'allows app.js: ' + result.result);\n      files = [path.resolve(pwd, 'test/fixtures/app.json')];\n      result = match(files, config.options.monitor, config.options.execOptions.ext);\n      assert.deepEqual(result.result, [], 'nothing matched' + result.result);\n      process.chdir(pwd);\n      nodemonUtils.home = old;\n      done();\n    });\n  });","file":"monitor/match.test.js","skipped":false,"dir":"test"},{"name":"should be specific about directories","suites":["match"],"updatePoint":{"line":138,"column":42,"index":6191},"line":138,"code":"  it('should be specific about directories', function (done) {\n    config.load({\n      ext: 'js md pug',\n      watch: ['lib']\n    }, function (config) {\n      var files = [utils.appjs];\n      var result = match(files, config.options.monitor, config.options.execOptions.ext);\n      assert.deepEqual(result.result, [], 'no results');\n      done();\n    });\n  });","file":"monitor/match.test.js","skipped":false,"dir":"test"},{"name":"should not match coffee when monitoring just js","suites":["match"],"updatePoint":{"line":149,"column":53,"index":6562},"line":149,"code":"  it('should not match coffee when monitoring just js', function (done) {\n    config.load({\n      script: utils.appjs\n    }, function (config) {\n      var result = match([utils.appcoffee], config.options.monitor, config.options.execOptions.ext);\n      assert.deepEqual(result.result, [], 'no results');\n      done();\n    });\n  });","file":"monitor/match.test.js","skipped":false,"dir":"test"},{"name":"should ignore case when comparing paths on Windows","suites":["match"],"updatePoint":{"line":158,"column":56,"index":6896},"line":158,"code":"  it('should ignore case when comparing paths on Windows', function () {\n    if (!nodemonUtils.isWindows) {\n      return;\n    }\n\n    var results = match(['C:\\\\TEST\\\\fixtures'], ['c:\\\\test\\\\fixtures']);\n    assert(results.result.length === 1, 'matched ' + results.result.length);\n  });","file":"monitor/match.test.js","skipped":false,"dir":"test"},{"name":"should allow for relative paths outside of the cwd","suites":["validating files that cause restart"],"updatePoint":{"line":168,"column":56,"index":7247},"line":168,"code":"  it('should allow for relative paths outside of the cwd', function () {\n    var cwd = process.cwd();\n    var dir = cwd + '/test/fixtures/configs';\n    process.chdir(dir);\n    var filename = './watch-relative.json';\n    var config = JSON.parse(fs.readFileSync(filename));\n    var settings = merge(config, defaults);\n    var script = path.resolve('../../../lib/__init__.py');\n    settings.monitor = match.rulesToMonitor(settings.watch, settings.ignore, {\n      dirs: [],\n      system: {\n        useFind: true\n      }\n    });\n    var matched = match([script], settings.monitor, settings.ext.replace(' ', ','));\n    process.chdir(cwd);\n    assert(matched.result.length === 1, 'relative file matched: ' + matched.results);\n  });","file":"monitor/match.test.js","skipped":false,"dir":"test"},{"name":"should allow *.js to match at the top level","suites":["validating files that cause restart"],"updatePoint":{"line":186,"column":49,"index":7965},"line":186,"code":"  it('should allow *.js to match at the top level', function () {\n    var filename = path.join('test', 'fixtures', 'configs', 'top-level.json');\n    var config = JSON.parse(fs.readFileSync(filename));\n    var settings = merge(config, defaults);\n    var script = path.resolve('app.js');\n    settings.monitor = match.rulesToMonitor(settings.watch, settings.ignore, {\n      dirs: [],\n      system: {\n        useFind: true\n      }\n    });\n    var matched = match([script], settings.monitor, settings.ext.replace(' ', ','));\n    assert(matched.result.length === 1, 'found match ' + matched.results);\n  });","file":"monitor/match.test.js","skipped":false,"dir":"test"},{"name":"should allow for simple star rule: public/*","suites":["validating files that cause restart"],"updatePoint":{"line":200,"column":49,"index":8566},"line":200,"code":"  it('should allow for simple star rule: public/*', function () {\n    var filename = path.join('test', 'fixtures', 'configs', 'public-star.json');\n    var config = JSON.parse(fs.readFileSync(filename));\n    var settings = merge(config, defaults);\n    var script = 'public/js/chrome.save.js';\n    settings.monitor = match.rulesToMonitor(settings.watch, settings.ignore, {\n      dirs: [],\n      system: {\n        useFind: true\n      }\n    });\n    var matched = match([script], settings.monitor, settings.ext.replace(' ', ','));\n    assert(matched.result.length === 0, 'public/* ignored: ' + matched.results);\n  });","file":"monitor/match.test.js","skipped":false,"dir":"test"},{"name":"should allow for relative paths with extensions","suites":["validating files that cause restart"],"updatePoint":{"line":214,"column":53,"index":9183},"line":214,"code":"  it('should allow for relative paths with extensions', function () {\n    var cwd = process.cwd();\n    var dir = cwd + '/test/fixtures/configs';\n    process.chdir(dir);\n    var filename = './watch-relative-filter.json';\n    var config = JSON.parse(fs.readFileSync(filename));\n    var settings = merge(config, defaults);\n    var script = path.resolve('../jsbin/scripts.json');\n    settings.monitor = match.rulesToMonitor(settings.watch, settings.ignore, {\n      dirs: [],\n      system: {\n        useFind: true\n      }\n    });\n    var matched = match([script], settings.monitor, settings.ext.replace(' ', ','));\n    process.chdir(cwd);\n    assert(matched.result.length === 1, 'relative file matched: ' + matched.results);\n  });","file":"monitor/match.test.js","skipped":false,"dir":"test"},{"name":"should support \"--watch .\"","suites":["match rule parser"],"updatePoint":{"line":234,"column":32,"index":9936},"line":234,"code":"  it('should support \"--watch .\"', function () {\n    var config = {\n      watch: '.'\n    };\n    var settings = merge(config, defaults);\n    var script = 'index.js';\n    settings.monitor = match.rulesToMonitor(settings.watch, [], {\n      dirs: [],\n      system: {\n        useFind: true\n      }\n    });\n    assert(settings.monitor[0] === '*.*', 'path resolved: ' + settings.monitor[0]);\n    var matched = match([script], settings.monitor, 'js');\n    assert(matched.result.length === 1, 'no file matched');\n  });","file":"monitor/match.test.js","skipped":false,"dir":"test"},{"name":"should support \"--watch .*\"","suites":["match rule parser"],"updatePoint":{"line":250,"column":33,"index":10447},"line":250,"code":"  it('should support \"--watch .*\"', function () {\n    var config = {\n      watch: '.*'\n    };\n    var settings = merge(config, defaults);\n    var script = 'index.js';\n    settings.monitor = match.rulesToMonitor(settings.watch, [], {\n      dirs: [],\n      system: {\n        useFind: true\n      }\n    });\n    assert(settings.monitor[0] === '*.*', 'path resolved: ' + settings.monitor[0]);\n    var matched = match([script], settings.monitor, 'js');\n    assert(matched.result.length === 1, 'no file matched');\n  });","file":"monitor/match.test.js","skipped":false,"dir":"test"},{"name":"should support \"--watch <single file>\"","suites":["match rule parser"],"updatePoint":{"line":266,"column":44,"index":10970},"line":266,"code":"  it('should support \"--watch <single file>\"', function () {\n    var config = {\n      watch: 'config.json'\n    };\n    var settings = merge(config, defaults);\n    settings.monitor = match.rulesToMonitor(settings.watch, [], {\n      dirs: [],\n      system: {\n        useFind: true\n      }\n    });\n    var matched = match(['/some/path/to/config.json'], settings.monitor, 'js');\n    assert(matched.result.length === 1, 'no file matched');\n  });","file":"monitor/match.test.js","skipped":false,"dir":"test"},{"name":"should support \"--watch /some/path/*/config.json\"","suites":["match rule parser"],"updatePoint":{"line":280,"column":55,"index":11421},"line":280,"code":"  it('should support \"--watch /some/path/*/config.json\"', function () {\n    var config = {\n      watch: '/*/config.json'\n    };\n    var settings = merge(config, defaults);\n    settings.monitor = match.rulesToMonitor(settings.watch, [], {\n      dirs: [],\n      system: {\n        useFind: true\n      }\n    });\n    var matched = match(['/some/path/to/config.json'], settings.monitor, 'js');\n    assert(matched.result.length === 1, 'no file matched');\n  });","file":"monitor/match.test.js","skipped":false,"dir":"test"},{"name":"should support \"--watch *.*\"","suites":["match rule parser"],"updatePoint":{"line":294,"column":34,"index":11854},"line":294,"code":"  it('should support \"--watch *.*\"', function () {\n    var config = {\n      watch: '*.*'\n    };\n    var settings = merge(config, defaults);\n    var script = 'index.js';\n    settings.monitor = match.rulesToMonitor(settings.watch, [], {\n      dirs: [],\n      system: {\n        useFind: true\n      }\n    });\n    assert(settings.monitor[0] === '*.*', 'path resolved: ' + settings.monitor[0]);\n    var matched = match([script], settings.monitor, 'js');\n    assert(matched.result.length === 1, 'no file matched');\n  });","file":"monitor/match.test.js","skipped":false,"dir":"test"},{"name":"should support \"--watch ..\"","suites":["match rule parser"],"updatePoint":{"line":310,"column":33,"index":12367},"line":310,"code":"  it('should support \"--watch ..\"', function () {\n    // make sure we're in a deep enough directory\n    var cwd = process.cwd();\n    process.chdir('./test/fixtures/');\n    var pwd = process.cwd();\n    var config = {\n      watch: '..'\n    };\n    var settings = merge(config, defaults);\n    var script = pwd + 'index.js';\n    settings.monitor = match.rulesToMonitor(settings.watch, [], {\n      dirs: [],\n      system: {\n        useFind: true\n      }\n    });\n    process.chdir(cwd);\n    assert(settings.monitor[0] === path.resolve(pwd, '..') + '/**/*', 'path resolved: ' + settings.monitor[0]);\n    var matched = match([script], settings.monitor, 'js');\n    assert(matched.result.length === 1, 'no file matched');\n  });","file":"monitor/match.test.js","skipped":false,"dir":"test"},{"name":"should not crash if ignoreRoot is an empty array","suites":["watcher"],"updatePoint":{"line":340,"column":54,"index":13276},"line":340,"code":"  it('should not crash if ignoreRoot is an empty array', function (done) {\n    config.load({\n      watch: ['test/fixtures/app.js'],\n      ignoreRoot: []\n    }, function (config) {\n      return watch.watch().then(function () {\n        done();\n      }).catch(done);\n    });\n  });","file":"monitor/match.test.js","skipped":false,"dir":"test"},{"name":"should not match a dotfile unless explicitly asked to","suites":["watcher"],"updatePoint":{"line":350,"column":59,"index":13559},"line":350,"code":"  it('should not match a dotfile unless explicitly asked to', function (done) {\n    config.load({\n      watch: ['test/fixtures/*']\n    }, function (config) {\n      return watch.watch().then(function (files) {\n        var withDotfile = files.filter(function (file) {\n          return /test\\/fixtures\\/\\.dotfile$/.test(file);\n        });\n        assert.deepEqual(withDotfile.length, 0, 'should not contain .dotfile');\n        done();\n      }).catch(done);\n    });\n  });","file":"monitor/match.test.js","skipped":false,"dir":"test"},{"name":"should match a dotfile if explicitly asked to","suites":["watcher"],"updatePoint":{"line":363,"column":51,"index":14019},"line":363,"code":"  it('should match a dotfile if explicitly asked to', function (done) {\n    config.load({\n      watch: ['test/fixtures/.dotfile']\n    }, function (config) {\n      return watch.watch().then(function (files) {\n        assert.deepEqual(files.filter(f => f.endsWith('.dotfile')).length, 1, 'should contain .dotfile');\n        done();\n      }).catch(done);\n    });\n  });","file":"monitor/match.test.js","skipped":false,"dir":"test"},{"name":"should match a dotfolder if explicitly asked to","suites":["watcher"],"updatePoint":{"line":373,"column":53,"index":14387},"line":373,"code":"  it('should match a dotfolder if explicitly asked to', function (done) {\n    config.load({\n      watch: ['test/fixtures/.dotfolder']\n    }, function (config) {\n      return watch.watch().then(function (files) {\n        assert.deepEqual(files.length, 3, 'file lists should contain .dotfolder files');\n        done();\n      }).catch(done);\n    });\n  });","file":"monitor/match.test.js","skipped":false,"dir":"test"},{"name":"should watch relative paths","suites":["watcher"],"updatePoint":{"line":383,"column":33,"index":14720},"line":383,"code":"  it('should watch relative paths', function () {\n    const monitor = match.rulesToMonitor(['./http.js'], [], {\n      dirs: []\n    });\n    var matched = match(['http.js'], monitor, 'js,mjs,json');\n    assert(matched.result.length === 1, 'found match ' + matched.results);\n  });","file":"monitor/match.test.js","skipped":false,"dir":"test"},{"name":"should ignore relative directories","suites":["watcher"],"updatePoint":{"line":390,"column":40,"index":15005},"line":390,"code":"  it('should ignore relative directories', () => {\n    const monitor = match.rulesToMonitor([], [\"node_modules/*\", \"**/logs/*\"]);\n    var matched = match(['logs/a'], monitor, 'js,mjs,json');\n    assert(matched.ignored === 1 && matched.result.length === 0, JSON.stringify(matched));\n  });","file":"monitor/match.test.js","skipped":false,"dir":"test"},{"name":"should restart when new files are added","suites":["when nodemon runs (2)"],"updatePoint":{"line":41,"column":45,"index":933},"line":41,"code":"  it('should restart when new files are added', function (done) {\n    fs.writeFileSync(tmp, 'setTimeout(function(){}, 10000)');\n    nodemon({\n      script: tmp\n    }).on('start', function () {\n      setTimeout(function () {\n        fs.writeFileSync(tmp2, 'setTimeout(function(){}, 10000)');\n      }, 500);\n    }).on('restart', function () {\n      assert(fs.existsSync(tmp2), 'restarted after new file was added');\n      nodemon.once('exit', function () {\n        nodemon.reset(done);\n      }).emit('quit');\n    });\n  });","file":"monitor/run.test.js","skipped":false,"dir":"test"},{"name":"should wait when the script crashes","suites":["when nodemon runs (2)"],"updatePoint":{"line":56,"column":41,"index":1450},"line":56,"code":"  it('should wait when the script crashes', function (done) {\n    fs.writeFileSync(tmp, 'throw Error(\"forced crash\")');\n    nodemon({\n      script: tmp,\n      stdout: false\n    }).on('crash', function () {\n      assert(true, 'detected crashed state');\n      setTimeout(function () {\n        fs.writeFileSync(tmp, 'var n = 10 + 2;');\n      }, 1000);\n    }).on('restart', function () {\n      assert(true, 'nodemon restarted');\n      nodemon.once('exit', function () {\n        nodemon.reset(done);\n      }).emit('quit');\n    });\n  });","file":"monitor/run.test.js","skipped":false,"dir":"test"},{"name":"should wait when the script cleanly exits","suites":["when nodemon runs (2)"],"updatePoint":{"line":73,"column":47,"index":1988},"line":73,"code":"  it('should wait when the script cleanly exits', function (done) {\n    fs.writeFileSync(tmp, 'setTimeout(function () { var n = 10; }, 1000)');\n    nodemon({\n      script: tmp\n    }).on('crash', function () {\n      assert(false, 'detected crashed state');\n    }).on('exit', function () {\n      assert(true, 'nodemon is waiting for a change');\n      setTimeout(function () {\n        touch.sync(tmp);\n      }, 500);\n    }).on('restart', function () {\n      assert(true, 'nodemon restarted');\n      nodemon.once('exit', function () {\n        nodemon.reset(done);\n      }).emit('quit');\n    });\n  });","file":"monitor/run.test.js","skipped":false,"dir":"test"},{"name":"should expose readable streams when stdout is false","suites":["when nodemon runs (2)"],"updatePoint":{"line":91,"column":57,"index":2595},"line":91,"code":"  it('should expose readable streams when stdout is false', function (done) {\n    var stdoutTestData = 'outputting some data';\n    var stderrTestData = 'outputting an error';\n    var script = 'setTimeout(function () { console.log(\"' + stdoutTestData + '\"); }, 5); setTimeout(function () { console.error(\"' + stderrTestData + '\"); }, 10);';\n    fs.writeFileSync(tmp, script);\n    var stdoutFileName = 'test/fixtures/stdout.txt';\n    var stderrFileName = 'test/fixtures/stderr.txt';\n    var stdoutWritable = fs.createWriteStream(stdoutFileName);\n    var stderrWritable = fs.createWriteStream(stderrFileName);\n    nodemon({\n      script: tmp,\n      stdout: false\n    }).on('crash', function () {\n      assert(false, 'detected crashed state');\n    }).on('readable', function () {\n      this.stdout.pipe(stdoutWritable);\n      this.stderr.pipe(stderrWritable);\n    }).on('end', function () {\n      this.stdout.unpipe(stdoutWritable);\n      this.stderr.unpipe(stderrWritable);\n      stdoutWritable.end();\n      stderrWritable.end();\n      var stdoutWritableResult = fs.readFileSync(stdoutFileName);\n      var stderrWritableResult = fs.readFileSync(stderrFileName);\n      assert(stdoutWritableResult === stdoutTestData, 'stdout has been piped correctly');\n      assert(stderrWritableResult === stderrTestData, 'stderr has been piped correctly');\n      this.emit('quit');\n    }).once('exit', function () {\n      assert(true, 'nodemon is quitting');\n      fs.unlinkSync(stdoutFileName);\n      fs.unlinkSync(stderrFileName);\n      nodemon.reset(done);\n    });\n  }); // Fixed! FIXME this test was previously not working properly","file":"monitor/run.test.js","skipped":false,"dir":"test"},{"name":"should not run command on startup if runOnChangeOnly is true","suites":["when nodemon runs (2)"],"updatePoint":{"line":129,"column":66,"index":4320},"line":129,"code":"  it('should not run command on startup if runOnChangeOnly is true', function (done) {\n    var script = \"var touch = require('touch');\\n\" + \"touch.sync(\" + tmp2 + \");\\n\";\n    fs.writeFileSync(tmp, script);\n    nodemon({\n      script: tmp,\n      runOnChangeOnly: true,\n      stdout: false\n    }).on('start', function () {\n      // file exists check\n      assert(!fs.existsSync(tmp2), 'script should not start');\n    }).once('exit', function () {\n      done();\n    });\n    setTimeout(function () {\n      nodemon.emit('quit');\n    }, 1500);\n  });","file":"monitor/run.test.js","skipped":false,"dir":"test"},{"name":"should kill child on SIGINT","suites":["when nodemon runs (2)"],"updatePoint":{"line":146,"column":33,"index":4831},"line":146,"code":"  it('should kill child on SIGINT', function (done) {\n    fs.writeFileSync(tmp, 'setTimeout(function () { var n = 10; }, 10000)');\n    nodemon({\n      script: tmp,\n      verbose: true\n    }).on('start', function () {\n      assert(true, 'nodemon is waiting for a change');\n      setTimeout(function () {\n        process.once('SIGINT', function () {// do nothing\n        });\n        process.kill(process.pid, 'SIGINT');\n      }, 1000);\n    }).on('crash', function () {\n      assert(false, 'detected crashed state');\n    }).on('exit', function () {\n      assert(true, 'quit correctly');\n      nodemon.reset(done);\n      setTimeout(function () {\n        process.kill(process.pid, 'SIGINT');\n      }, 1000);\n    });\n  });","file":"monitor/run.test.js","skipped":false,"dir":"test"},{"name":"should happen when monitoring a single extension","suites":["nodemon monitor child restart"],"updatePoint":{"line":54,"column":54,"index":1174},"line":54,"code":"  it('should happen when monitoring a single extension', function (done) {\n    write();\n    setTimeout(function () {\n      nodemon({\n        script: tmpjs,\n        verbose: true,\n        ext: 'js'\n      }).on('start', function () {\n        setTimeout(function () {\n          touch.sync(tmpjs);\n        }, 1500);\n      }).on('restart', function (files) {\n        assert(files[0] === tmpjs, 'nodemon restarted because of change to our file' + files);\n        nodemon.once('exit', function () {\n          nodemon.reset(done);\n        }).emit('quit');\n      });\n    }, WAIT_BEFORE_START);\n  });","file":"monitor/watch-restart.test.js","skipped":false,"dir":"test"},{"name":"should happen when monitoring multiple extensions","suites":["nodemon monitor child restart"],"updatePoint":{"line":73,"column":55,"index":1766},"line":73,"code":"  it('should happen when monitoring multiple extensions', function (done) {\n    write(true);\n    setTimeout(function () {\n      nodemon({\n        script: tmpjs,\n        ext: 'js md',\n        verbose: true\n      }).on('start', function () {\n        setTimeout(function () {\n          touch.sync(tmpmd);\n        }, 1500);\n      }).on('log', function (event) {\n        var msg = event.message;\n\n        if (utils.match(msg, 'changes after filters')) {\n          var changes = msg.trim().slice(-5).split('/');\n          var restartedOn = changes.pop();\n          assert(restartedOn === '1', 'nodemon restarted on a single file change');\n          nodemon.once('exit', function () {\n            nodemon.reset(done);\n          }).emit('quit');\n        }\n      });\n    }, WAIT_BEFORE_START);\n  });","file":"monitor/watch-restart.test.js","skipped":false,"dir":"test"},{"name":"should restart when watching directory (mac only)","suites":["nodemon monitor child restart"],"updatePoint":{"line":100,"column":57,"index":2599},"line":100,"code":"    it('should restart when watching directory (mac only)', function (done) {\n      write(true);\n      process.chdir('test/fixtures');\n      setTimeout(function () {\n        nodemon({\n          script: tmpjs,\n          verbose: true,\n          ext: 'js',\n          watch: ['*.js', 'global']\n        }).on('start', function () {\n          setTimeout(function () {\n            touch.sync(tmpjs);\n          }, 1000);\n        }).on('restart', function (files) {\n          assert(files.length === 1, 'nodemon restarted when watching directory');\n          nodemon.once('exit', function () {\n            nodemon.reset(done);\n          }).emit('quit');\n        });\n      }, WAIT_BEFORE_START);\n    });","file":"monitor/watch-restart.test.js","skipped":false,"dir":"test"},{"name":"should restart when watching directory","suites":["nodemon monitor child restart"],"updatePoint":{"line":123,"column":44,"index":3286},"line":123,"code":"  it('should restart when watching directory', function (done) {\n    write(true); // process.chdir(process.cwd() + '/test/fixtures');\n\n    setTimeout(function () {\n      nodemon({\n        script: tmpjs,\n        verbose: true,\n        ext: 'js md',\n        watch: ['test/']\n      }).on('start', function () {\n        setTimeout(function () {\n          touch.sync(tmpmd);\n        }, 1000);\n      }).on('restart', function (files) {\n        assert(files.length === 1, 'nodemon restarted when watching directory');\n        nodemon.once('exit', function () {\n          nodemon.reset(done);\n        }).emit('quit');\n      });\n    }, WAIT_BEFORE_START);\n  });","file":"monitor/watch-restart.test.js","skipped":false,"dir":"test"},{"name":"should ignore relative node_modules","suites":["nodemon monitor child restart"],"updatePoint":{"line":144,"column":41,"index":3936},"line":144,"code":"  it('should ignore relative node_modules', done => {\n    write(true);\n    process.chdir(process.cwd() + '/test/fixtures/1246/app');\n    nodemon({\n      script: 'index.js',\n      watch: ['../']\n    }).on('watching', file => {\n      assert(file.indexOf('/node_modules/') === -1, `node_modules found: ${file}`);\n    }).on('start', () => {\n      // gentle timeout to wait for the files to finish reading\n      setTimeout(() => {\n        nodemon.once('exit', function () {\n          nodemon.reset(done);\n        }).emit('quit');\n      }, 1000);\n    });\n  });","file":"monitor/watch-restart.test.js","skipped":false,"dir":"test"},{"name":"should pass watchOptions to the watcher","suites":["watch"],"updatePoint":{"line":14,"column":45,"index":290},"line":14,"code":"  it('should pass watchOptions to the watcher', function (done) {\n    process.chdir(process.cwd() + '/test/fixtures/configs');\n    var passedOptions = {};\n    var originalWatch = chokidar.watch;\n\n    chokidar.watch = function (dirs, options) {\n      passedOptions = options;\n      return originalWatch(dirs, options);\n    };\n\n    config.load({\n      configFile: process.cwd() + '/watch-options.json'\n    }, () => {\n      watch.watch();\n      chokidar.watch = originalWatch;\n      assert(passedOptions.awaitWriteFinish, 'awaitWriteFinish does not have the correct value');\n      done();\n    });\n  });","file":"monitor/watch.test.js","skipped":false,"dir":"test"},{"name":"should be resetable","suites":["nodemon rules"],"updatePoint":{"line":28,"column":25,"index":708},"line":28,"code":"  it('should be resetable', function (done) {\n    // nodemon.reset();\n    rules.load('./test/fixtures/simple.json', function () {\n      nodemon.reset();\n      rules.load('./test/fixtures/comments', function (error, rules) {\n        assert.deepEqual(rules, {\n          watch: [],\n          ignore: []\n        }, 'rules are empty: ' + JSON.stringify(rules));\n        done();\n      });\n    });\n  });","file":"rules/index.test.js","skipped":false,"dir":"test"},{"name":"should read json","suites":["nodemon rules"],"updatePoint":{"line":41,"column":22,"index":1102},"line":41,"code":"  it('should read json', function (done) {\n    rules.load('./test/fixtures/simple.json', function (error, rules) {\n      assert(typeof rules === 'object', 'rules file is parsed');\n      done();\n    });\n  });","file":"rules/index.test.js","skipped":false,"dir":"test"},{"name":"should ignore comments files","suites":["nodemon rules"],"updatePoint":{"line":47,"column":34,"index":1322},"line":47,"code":"  it('should ignore comments files', function (done) {\n    rules.load(fixtures.comments.path, function (error, rules) {\n      assert.equal(rules.ignore.length, 0, 'zero ignore rules');\n      done();\n    });\n  });","file":"rules/index.test.js","skipped":false,"dir":"test"},{"name":"should allow comments on lines","suites":["nodemon rules"],"updatePoint":{"line":53,"column":36,"index":1537},"line":53,"code":"  it('should allow comments on lines', function (done) {\n    rules.load(fixtures.simple.path, function (error, rules) {\n      rules.ignore.forEach(function (rule) {\n        assert.equal(rule.indexOf('# comment'), -1, 'no comment found');\n      });\n      done();\n    });\n  });","file":"rules/index.test.js","skipped":false,"dir":"test"},{"name":"should ignore regular expressions","suites":["nodemon rules"],"updatePoint":{"line":61,"column":39,"index":1816},"line":61,"code":"  it('should ignore regular expressions', function (done) {\n    rules.load(fixtures.regexp.path, function (error, rules) {\n      assert.deepEqual(rules, {\n        'watch': [],\n        'ignore': []\n      }, 'rules are empty');\n      done();\n    });\n  });","file":"rules/index.test.js","skipped":false,"dir":"test"},{"name":"should colour strings","suites":["utils colour"],"updatePoint":{"line":6,"column":27,"index":184},"line":6,"code":"  it('should colour strings', function () {\n    var red = colour('red', 'foo');\n    assert(red.indexOf('\\x1B') !== -1);\n  });","file":"utils/colour.test.js","skipped":false,"dir":"test"},{"name":"should strip colours strings","suites":["utils colour"],"updatePoint":{"line":10,"column":34,"index":317},"line":10,"code":"  it('should strip colours strings', function () {\n    var red = colour('red', 'foo');\n    var plain = colour.strip(red);\n    assert(plain.indexOf('\\x1B') === -1);\n  });","file":"utils/colour.test.js","skipped":false,"dir":"test"},{"name":"should disable colour","suites":["logger"],"updatePoint":{"line":34,"column":27,"index":778},"line":34,"code":"  it('should disable colour', function () {\n    var type = 'fail';\n    bus.once('log', function (event) {\n      assert.equal(event.message, type);\n      assert.ok(event.colour.indexOf(colour[types[type]]) !== -1);\n    });\n    logger[type](type);\n    logger.useColours = false;\n    bus.once('log', function (event) {\n      assert.equal(event.message, type);\n      assert.ok(event.colour.indexOf(colour[types[type]]) === -1);\n    });\n    logger[type](type);\n    logger.useColours = true;\n    bus.once('log', function (event) {\n      assert.equal(event.message, type);\n      assert.ok(event.colour.indexOf(colour[types[type]]) !== -1);\n    });\n    logger[type](type);\n  }); // it('should not log detail if debug is off', function (done) {","file":"utils/log.test.js","skipped":false,"dir":"test"},{"name":"should be the same with empty targets","suites":["utils merge"],"updatePoint":{"line":27,"column":43,"index":549},"line":27,"code":"  it('should be the same with empty targets', function () {\n    var result = merge(original, {});\n    assert.deepEqual(original, result);\n  });","file":"utils/merge.test.js","skipped":false,"dir":"test"},{"name":"should merge missing properties","suites":["utils merge"],"updatePoint":{"line":31,"column":37,"index":687},"line":31,"code":"  it('should merge missing properties', function () {\n    var simple = {\n      ignore: []\n    };\n    var result = merge(simple, {\n      watch: []\n    });\n    assert.deepEqual({\n      ignore: [],\n      watch: []\n    }, result);\n  });","file":"utils/merge.test.js","skipped":false,"dir":"test"},{"name":"should merge complex missing properties","suites":["utils merge"],"updatePoint":{"line":43,"column":45,"index":928},"line":43,"code":"  it('should merge complex missing properties', function () {\n    var target = [{\n      one: 1,\n      two: 2\n    }, {\n      three: 3,\n      four: 4\n    }];\n    var result = merge(original, {\n      watch: target\n    });\n    original.watch = target;\n    assert.deepEqual(original, result);\n  });","file":"utils/merge.test.js","skipped":false,"dir":"test"},{"name":"should merge deep complex missing properties","suites":["utils merge"],"updatePoint":{"line":57,"column":50,"index":1227},"line":57,"code":"  it('should merge deep complex missing properties', function () {\n    var target = {\n      execOptions: {\n        verbose: true,\n        script: './lib/app',\n        args: [],\n        exec: 'node',\n        execArgs: [],\n        ext: ''\n      }\n    };\n    var result = merge(original, target);\n    original.execOptions = target.execOptions;\n    assert.deepEqual(original, result);\n  });","file":"utils/merge.test.js","skipped":false,"dir":"test"},{"name":"should ignore existing properties","suites":["utils merge"],"updatePoint":{"line":72,"column":39,"index":1603},"line":72,"code":"  it('should ignore existing properties', function () {\n    var original = {\n      execOptions: {\n        ext: 'js'\n      }\n    };\n    var target = {\n      execOptions: {\n        ext: 'notjs'\n      }\n    };\n    var result = merge(original, target);\n    assert.deepEqual(original, result);\n    original = {\n      ext: 'js'\n    };\n    target = {\n      ext: 'notjs'\n    };\n    result = merge(original, target);\n    assert.deepEqual(original, result);\n  });","file":"utils/merge.test.js","skipped":false,"dir":"test"},{"name":"should merge in to \"empty\" properties","suites":["utils merge"],"updatePoint":{"line":94,"column":43,"index":2061},"line":94,"code":"  it('should merge in to \"empty\" properties', function () {\n    var target = {\n      execOptions: {\n        ext: 'js'\n      }\n    };\n    var original = {\n      execOptions: {\n        ext: ''\n      }\n    };\n    var result = merge(original, target);\n    original.execOptions = target.execOptions;\n    assert.deepEqual(original, result);\n  });","file":"utils/merge.test.js","skipped":false,"dir":"test"},{"name":"should merge into empty objects","suites":["utils merge"],"updatePoint":{"line":109,"column":37,"index":2396},"line":109,"code":"  it('should merge into empty objects', function () {\n    var original = {\n      foo: 'bar',\n      execOptions: {}\n    };\n    var target = {\n      execOptions: {\n        ext: 'js'\n      }\n    };\n    var result = merge(original, target);\n    assert.deepEqual({\n      foo: 'bar',\n      execOptions: {\n        ext: 'js'\n      }\n    }, result);\n  });","file":"utils/merge.test.js","skipped":false,"dir":"test"},{"name":"should merge into empty arrays","suites":["utils merge"],"updatePoint":{"line":127,"column":36,"index":2742},"line":127,"code":"  it('should merge into empty arrays', function () {\n    var original = {\n      foo: 'bar',\n      execOptions: []\n    };\n    var target = {\n      execOptions: ['js']\n    };\n    var result = merge(original, target);\n    assert.deepEqual({\n      foo: 'bar',\n      execOptions: ['js']\n    }, result);\n  });","file":"utils/merge.test.js","skipped":false,"dir":"test"},{"name":"should merge into deep empty arrays","suites":["utils merge"],"updatePoint":{"line":141,"column":41,"index":3051},"line":141,"code":"  it('should merge into deep empty arrays', function () {\n    // return;\n    var original = {\n      foo: {\n        name: []\n      }\n    };\n    var target = {\n      foo: {\n        name: ['remy']\n      }\n    };\n    var result = merge(original, target);\n    assert.deepEqual({\n      foo: {\n        name: ['remy']\n      }\n    }, result);\n  });","file":"utils/merge.test.js","skipped":false,"dir":"test"},{"name":"should combine the executable and arguments","suites":["stringify"],"updatePoint":{"line":8,"column":49,"index":224},"line":8,"code":"  it('should combine the executable and arguments', function () {\n    var string = stringify('node', ['./app.js', '--flag']);\n    var expected = 'node ./app.js --flag';\n    assert(string === expected, \"stringified to \" + string);\n  });","file":"utils/stringify.test.js","skipped":false,"dir":"test"},{"name":"should not include excess whitespace","suites":["stringify"],"updatePoint":{"line":13,"column":42,"index":453},"line":13,"code":"  it('should not include excess whitespace', function () {\n    var string = stringify('node');\n    var expected = 'node';\n    assert(string === expected, \"stringified to \" + string);\n  });","file":"utils/stringify.test.js","skipped":false,"dir":"test"},{"name":"should quote arguments with spaces","suites":["stringify"],"updatePoint":{"line":18,"column":40,"index":640},"line":18,"code":"  it('should quote arguments with spaces', function () {\n    var string = stringify('node', ['./app.js', '--one --two']);\n    var expected = 'node ./app.js \"--one --two\"';\n    assert(string === expected, \"stringified to \" + string);\n  });","file":"utils/stringify.test.js","skipped":false,"dir":"test"},{"name":"should escape quotes","suites":["stringify"],"updatePoint":{"line":23,"column":26,"index":865},"line":23,"code":"  it('should escape quotes', function () {\n    var string = stringify('node', ['./app.js', '--one \"--two --three\"']);\n    var expected = 'node ./app.js \"--one \\\\\"--two --three\\\\\"\"';\n    assert(string === expected, \"stringified to \" + string);\n  });","file":"utils/stringify.test.js","skipped":false,"dir":"test"}]}