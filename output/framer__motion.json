{"repo":"framer/motion","url":"https://github.com/framer/motion","branch":"main","configs":[{"package":"framer-motion","lang":"js","dir":"cypress","framework":"jest","pattern":"**/*.{js,ts}"}],"tests":[{"name":"Layout animations don't interfere with opacity","suites":["Tabs demo"],"updatePoint":{"line":2,"column":52},"line":2,"code":"  it(\"Layout animations don't interfere with opacity\", () => {\n    cy.visit(\"?test=drag-tabs\").get(\"button.add-item\").wait(50).click().wait(100).get(\"#Carrot-tab\").should(([$tab]) => {\n      expect(window.getComputedStyle($tab).opacity).to.equal(\"1\");\n    });\n  });","file":"integration/drag-tabs.ts","skipped":false,"dir":"cypress"},{"name":"First tab doesn't distort when multiple layout animations started","suites":["Tabs demo"],"updatePoint":{"line":7,"column":71},"line":7,"code":"  it(\"First tab doesn't distort when multiple layout animations started\", () => {\n    cy.visit(\"?test=drag-tabs\").wait(50).get(\"#Tomato-label\").should(([$label]) => {\n      const {\n        left,\n        right\n      } = $label.getBoundingClientRect();\n      expect(left).to.equal(280);\n      expect(right).to.equal(390);\n    }).get(\"button.add-item\").click().wait(20).click().wait(100).get(\"#Tomato-label\").should(([$label]) => {\n      const {\n        left,\n        right\n      } = $label.getBoundingClientRect();\n      expect(left).to.equal(280);\n      expect(right).to.equal(334);\n    });\n  });","file":"integration/drag-tabs.ts","skipped":false,"dir":"cypress"},{"name":"Opacity finishes animating on reorder","suites":["Tabs demo"],"updatePoint":{"line":24,"column":43},"line":24,"code":"  it(\"Opacity finishes animating on reorder\", () => {\n    cy.visit(\"?test=drag-tabs\").get(\"#Lettuce-tab\").wait(50).click().trigger(\"pointerdown\", 40, 10).wait(300).trigger(\"pointermove\", -40, 10, {\n      force: true\n    }) // Gesture will start from first move past threshold\n    .trigger(\"pointermove\", -100, 300, {\n      force: true\n    }).wait(50).trigger(\"pointerup\", {\n      force: true\n    }).wait(100).get(\"#Lettuce-content\").should(([$content]) => {\n      expect(window.getComputedStyle($content).opacity).to.equal(\"1\");\n    }).get(\"#Tomato-tab\").wait(50).trigger(\"pointerdown\", 40, 10).trigger(\"pointermove\", -40, 10, {\n      force: true\n    }) // Gesture will start from first move past threshold\n    .wait(20).trigger(\"pointermove\", -100, 300, {\n      force: true\n    }).wait(50).trigger(\"pointerup\", {\n      force: true\n    }).wait(150).should(([$tab]) => {\n      const {\n        left\n      } = $tab.getBoundingClientRect();\n      expect(left).to.equal(265);\n    }).get(\"#Tomato-label\").should(([$label]) => {\n      const {\n        left\n      } = $label.getBoundingClientRect();\n      expect(left).to.equal(280);\n    });\n  });","file":"integration/drag-tabs.ts","skipped":false,"dir":"cypress"},{"name":"Double removing item doesn't break exit animation","suites":["Tabs demo"],"updatePoint":{"line":53,"column":55},"line":53,"code":"  it(\"Double removing item doesn't break exit animation\", () => {\n    cy.visit(\"?test=drag-tabs\").wait(50).get(\"#Lettuce-remove\").click().wait(20).click().get(\"nav\").wait(400).should(([$tabs]) => {\n      const lettuce = $tabs.querySelectorAll(\"#Lettuce-tab\");\n      expect(lettuce.length).to.equal(0);\n    });\n  });","file":"integration/drag-tabs.ts","skipped":false,"dir":"cypress"},{"name":"Removed tabs don't reappear on reorder","suites":["Tabs demo"],"updatePoint":{"line":59,"column":44},"line":59,"code":"  it(\"Removed tabs don't reappear on reorder\", () => {\n    cy.visit(\"?test=drag-tabs\").get(\"#Tomato-remove\").click().wait(150).get(\"#Lettuce-tab\").trigger(\"pointerdown\", 40, 10).wait(30).trigger(\"pointermove\", 50, 10, {\n      force: true\n    }) // Gesture will start from first move past threshold\n    .wait(40).trigger(\"pointermove\", 200, 10, {\n      force: true\n    }).wait(100).trigger(\"pointerup\", {\n      force: true\n    }).wait(200).should(([$tab]) => {\n      const {\n        left,\n        right\n      } = $tab.getBoundingClientRect();\n      expect(left).to.equal(475);\n      expect(right).to.equal(685);\n    }).get(\"nav\").should(([$nav]) => {\n      expect($nav.querySelectorAll(\".tab\").length).to.equal(2);\n    });\n  });","file":"integration/drag-tabs.ts","skipped":false,"dir":"cypress"},{"name":"New items correctly reorderable","suites":["Tabs demo"],"updatePoint":{"line":78,"column":37},"line":78,"code":"  it(\"New items correctly reorderable\", () => {\n    cy.visit(\"?test=drag-tabs\").get(\"button.add-item\").wait(50).click().wait(150).get(\"#Carrot-tab\").wait(50).trigger(\"pointerdown\", 40, 10).wait(30).trigger(\"pointermove\", -40, 10, {\n      force: true\n    }) // Gesture will start from first move past threshold\n    .wait(100).trigger(\"pointermove\", -10, 10, {\n      force: true\n    }).wait(100).trigger(\"pointerup\", {\n      force: true\n    }).wait(200).should(([$label]) => {\n      const {\n        left\n      } = $label.getBoundingClientRect();\n      expect(left).to.equal(475);\n    });\n  });","file":"integration/drag-tabs.ts","skipped":false,"dir":"cypress"},{"name":"Animate x from 0 to calc","suites":["Unit conversion"],"updatePoint":{"line":2,"column":30},"line":2,"code":"  it(\"Animate x from 0 to calc\", () => {\n    cy.visit(\"?test=unit-conversion\").wait(100).get(\"#box\").trigger(\"click\").wait(100).should(([$box]) => {\n      const {\n        left\n      } = $box.getBoundingClientRect();\n      expect(left).to.equal(150);\n    });\n  });","file":"integration/unit-conversion.ts","skipped":false,"dir":"cypress"},{"name":"Animates when an element enters the viewport","suites":["whileInView"],"updatePoint":{"line":2,"column":50},"line":2,"code":"  it(\"Animates when an element enters the viewport\", () => {\n    cy.visit(\"?test=while-in-view\").wait(50).get(\"#box\").should(([$element]) => {\n      expect($element.style.backgroundColor).to.equal(\"rgb(255, 0, 0)\");\n      expect($element.innerHTML).to.equal(\"Out\");\n    });\n    cy.scrollTo(0, 50).wait(50).get(\"#box\").should(([$element]) => {\n      expect($element.style.backgroundColor).to.equal(\"rgb(0, 255, 0)\");\n      expect($element.innerHTML).to.equal(\"In\");\n    });\n  });","file":"integration/while-in-view.ts","skipped":false,"dir":"cypress"},{"name":"Animates when an element leaves the viewport","suites":["whileInView"],"updatePoint":{"line":12,"column":50},"line":12,"code":"  it(\"Animates when an element leaves the viewport\", () => {\n    cy.visit(\"?test=while-in-view\").wait(50).scrollTo(0, 0).wait(50).get(\"#box\").should(([$element]) => {\n      expect($element.style.backgroundColor).to.equal(\"rgb(255, 0, 0)\");\n      expect($element.innerHTML).to.equal(\"Out\");\n    });\n  });","file":"integration/while-in-view.ts","skipped":false,"dir":"cypress"},{"name":"Animates only when all an element enters the viewport and amount='all'","suites":["whileInView"],"updatePoint":{"line":18,"column":76},"line":18,"code":"  it(\"Animates only when all an element enters the viewport and amount='all'\", () => {\n    cy.visit(\"?test=while-in-view&amount=all\").wait(50).get(\"#box\").should(([$element]) => {\n      expect($element.style.backgroundColor).to.equal(\"rgb(255, 0, 0)\");\n    });\n    cy.scrollTo(0, 50).wait(50).get(\"#box\").should(([$element]) => {\n      expect($element.style.backgroundColor).to.equal(\"rgb(255, 0, 0)\");\n    });\n    cy.scrollTo(0, 150).wait(50).get(\"#box\").should(([$element]) => {\n      expect($element.style.backgroundColor).to.equal(\"rgb(0, 255, 0)\");\n    });\n  });","file":"integration/while-in-view.ts","skipped":false,"dir":"cypress"},{"name":"Animates when an element enters the viewport once","suites":["whileInView"],"updatePoint":{"line":29,"column":55},"line":29,"code":"  it(\"Animates when an element enters the viewport once\", () => {\n    cy.visit(\"?test=while-in-view&once=true\").wait(50).get(\"#box\").should(([$element]) => {\n      expect($element.style.backgroundColor).to.equal(\"rgb(255, 0, 0)\");\n      expect($element.innerHTML).to.equal(\"Out\");\n    });\n    cy.scrollTo(0, 50).wait(50).get(\"#box\").should(([$element]) => {\n      expect($element.style.backgroundColor).to.equal(\"rgb(0, 255, 0)\");\n      expect($element.innerHTML).to.equal(\"In\");\n    });\n    cy.scrollTo(0, 0).wait(50).get(\"#box\").should(([$element]) => {\n      expect($element.style.backgroundColor).to.equal(\"rgb(0, 255, 0)\");\n      expect($element.innerHTML).to.equal(\"In\");\n    });\n  });","file":"integration/while-in-view.ts","skipped":false,"dir":"cypress"},{"name":"Animates when entering a custom root","suites":["whileInView"],"updatePoint":{"line":43,"column":42},"line":43,"code":"  it(\"Animates when entering a custom root\", () => {\n    cy.visit(\"?test=while-in-view-custom-root\").wait(50).get(\"#box\").should(([$element]) => {\n      expect($element.style.backgroundColor).to.equal(\"rgb(255, 0, 0)\");\n    }).get(\"#container\").scrollTo(500, 0).wait(50).get(\"#box\").should(([$element]) => {\n      expect($element.style.backgroundColor).to.equal(\"rgb(0, 255, 0)\");\n    }).get(\"#container\").scrollTo(0, 0).wait(50).get(\"#box\").should(([$element]) => {\n      expect($element.style.backgroundColor).to.equal(\"rgb(255, 0, 0)\");\n    });\n  });","file":"integration/while-in-view.ts","skipped":false,"dir":"cypress"},{"name":"Respects margin","suites":["whileInView"],"line":56,"code":"  it.skip(\"Respects margin\", () => {","file":"integration/while-in-view.ts","skipped":true,"dir":"cypress"},{"name":"If IntersectionObserver doesn't exist, immediately animates to whileInView","suites":["whileInView"],"updatePoint":{"line":62,"column":80},"line":62,"code":"  it(\"If IntersectionObserver doesn't exist, immediately animates to whileInView\", () => {\n    cy.visit(\"?test=while-in-view&delete=true\").wait(100).get(\"#box\").should(([$element]) => {\n      expect($element.style.backgroundColor).to.equal(\"rgb(0, 255, 0)\");\n      expect($element.innerHTML).to.equal(\"In\");\n    });\n  });","file":"integration/while-in-view.ts","skipped":false,"dir":"cypress"}]}