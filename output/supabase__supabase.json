{
    "repo": "supabase/supabase",
    "url": "https://github.com/supabase/supabase",
    "branch": "master",
    "configs": [
        {
            "lang": "js",
            "dir": "examples/sveltejs-todo-list/tests",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "supabase",
            "lang": "js",
            "dir": "tests",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "studio",
            "lang": "ts",
            "dir": "studio/tests",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        }
    ],
    "tests": [
        {
            "name": "it should create new todo",
            "suites": [
                "New todo"
            ],
            "updatePoint": {
                "line": 2,
                "column": 31
            },
            "line": 2,
            "code": "  it('it should create new todo', () => {\n    cy.visit('/');\n    cy.contains('h1', 'todos');\n    cy.get('.new-todo').type('Demo').type('{enter}');\n    cy.get('.main .todo-list .view').contains('Demo');\n  });",
            "file": "e2e/new-todo.spec.js",
            "skipped": false,
            "dir": "examples/sveltejs-todo-list/tests"
        },
        {
            "name": "Unauthorized",
            "suites": [],
            "updatePoint": {
                "line": 6,
                "column": 18
            },
            "line": 6,
            "code": "test('Unauthorized', async () => {\n  const {\n    error\n  } = await unauthorized.from('profiles').select();\n  expect(error.message).toBe('Invalid authentication credentials');\n});",
            "file": "integration/index.test.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "Simple test",
            "suites": [],
            "updatePoint": {
                "line": 12,
                "column": 17
            },
            "line": 12,
            "code": "test('Simple test', async () => {\n  const fakeOne = {\n    email: faker.internet.email().toLowerCase(),\n    password: faker.internet.password(),\n    username: faker.internet.userName()\n  };\n  const fakeTwo = {\n    email: faker.internet.email().toLowerCase(),\n    password: faker.internet.password(),\n    username: faker.internet.userName()\n  };\n  const first = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_KEY_ANON);\n  const second = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_KEY_ANON);\n  const {\n    user: firstUser\n  } = await first.auth.signUp({\n    email: fakeOne.email,\n    password: fakeOne.password\n  });\n  const {\n    user: secondUser\n  } = await second.auth.signUp({\n    email: fakeTwo.email,\n    password: fakeTwo.password\n  });\n  expect(firstUser.email).toEqual(fakeOne.email);\n  expect(secondUser.email).toEqual(fakeTwo.email);\n  const {\n    data: firstProfile\n  } = await first.from('profiles').insert({\n    id: firstUser.id,\n    username: fakeOne.username\n  }).single();\n  expect(firstProfile.username).toMatch(fakeOne.username); // Cannot insert the second user on the first client\n\n  const {\n    error: secondProfile\n  } = await first.from('profiles').insert({\n    id: secondUser.id,\n    username: fakeTwo.username\n  }).single();\n  expect(secondProfile.message).toMatch(/new row violates row-level security policy for table/);\n  const {\n    data: firstProfileList\n  } = await first.from('profiles').select();\n  const {\n    data: secondProfileList\n  } = await second.from('profiles').select();\n  const {\n    data: adminProfileList\n  } = await admin.from('profiles').select();\n  expect(firstProfileList.length).toBe(1);\n  expect(secondProfileList.length).toBe(0);\n  expect(adminProfileList.length).toBeGreaterThanOrEqual(1);\n});",
            "file": "integration/index.test.ts",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "templates",
            "suites": [],
            "updatePoint": {
                "line": 5,
                "column": 15
            },
            "line": 5,
            "code": "test('templates', async () => {\n  const mockFn = jest.fn()\n  render(<LogPanel templates={[\n    { label: 'Some option', onClick: mockFn }\n  ]} />)\n  const search = screen.getByPlaceholderText(/Search/)\n  userEvent.type(search, \"12345\")\n\n\n  // TODO templates dropdown interaction currently cannot be tested\n  // https://github.com/supabase/ui/issues/299\n  // userEvent.click(screen.getByText(\"Templates\"))\n  // screen.debug()\n\n  // await waitFor(() => screen.getByText(\"Some option\"))\n  // userEvent.click(screen.getByText(\"Some option\"))\n  // expect(mockFn).toBeCalled()\n})",
            "file": "pages/projects/LogPanel.test.js",
            "skipped": false,
            "dir": "studio/tests"
        },
        {
            "name": "filter input change",
            "suites": [],
            "updatePoint": {
                "line": 24,
                "column": 25
            },
            "line": 24,
            "code": "test(\"filter input change\", async () => {\n  const mockFn = jest.fn()\n  render(<LogPanel onSearch={mockFn} />)\n  const search = screen.getByPlaceholderText(/Search/)\n  userEvent.type(search, \"12345\")\n  expect(mockFn).toBeCalled()\n})",
            "file": "pages/projects/LogPanel.test.js",
            "skipped": false,
            "dir": "studio/tests"
        },
        {
            "name": "filter input value",
            "suites": [],
            "updatePoint": {
                "line": 32,
                "column": 24
            },
            "line": 32,
            "code": "test(\"filter input value\", async () => {\n  render(<LogPanel searchValue={\"1234\"} />)\n  screen.getByDisplayValue(\"1234\")\n})",
            "file": "pages/projects/LogPanel.test.js",
            "skipped": false,
            "dir": "studio/tests"
        },
        {
            "name": "Manual refresh",
            "suites": [],
            "updatePoint": {
                "line": 38,
                "column": 20
            },
            "line": 38,
            "code": "test(\"Manual refresh\", async () => {\n  const mockFn = jest.fn()\n  render(<LogPanel onRefresh={mockFn} />)\n  let btn\n  await waitFor(() => {\n    btn = screen.getByText(/Refresh/)\n  })\n  userEvent.click(btn)\n  expect(mockFn).toBeCalled()\n})",
            "file": "pages/projects/LogPanel.test.js",
            "skipped": false,
            "dir": "studio/tests"
        },
        {
            "name": "reset filters",
            "suites": [],
            "updatePoint": {
                "line": 49,
                "column": 19
            },
            "line": 49,
            "code": "test(\"reset filters\", () => {\n  const mockFn = jest.fn()\n  const { rerender } = render(<LogPanel showReset={false} />)\n  expect(() => screen.getByText(/Clear search/)).toThrow()\n\n  rerender(<LogPanel showReset={true} onReset={mockFn} />)\n  userEvent.click(screen.getByTitle(/Clear search/))\n  expect(mockFn).toBeCalled()\n})",
            "file": "pages/projects/LogPanel.test.js",
            "skipped": false,
            "dir": "studio/tests"
        },
        {
            "name": "can display log data and metadata",
            "suites": [],
            "updatePoint": {
                "line": 39,
                "column": 39
            },
            "line": 39,
            "code": "test('can display log data and metadata', async () => {\n  const data = [\n    {\n      id: 'seome-uuid',\n      timestamp: 1621323232312,\n      event_message: 'some event happened',\n      metadata: {\n        my_key: 'something_value',\n      },\n    },\n  ]\n  get.mockResolvedValue({ data })\n  render(<LogPage />)\n\n  await waitFor(() => screen.getByText(/happened/))\n  const row = screen.getByText(/happened/)\n  fireEvent.click(row)\n  await waitFor(() => screen.getByText(/my_key/))\n  await waitFor(() => screen.getByText(/something_value/))\n})",
            "file": "pages/projects/logs.test.js",
            "skipped": false,
            "dir": "studio/tests"
        },
        {
            "name": "Refresh",
            "suites": [],
            "updatePoint": {
                "line": 60,
                "column": 13
            },
            "line": 60,
            "code": "test('Refresh', async () => {\n  const data = [\n    {\n      id: 'some-uuid',\n      timestamp: 1621323232312,\n      event_message: 'some event happened',\n      metadata: {\n        my_key: 'something_value',\n      },\n    },\n  ]\n  get.mockResolvedValueOnce({ data }).mockResolvedValueOnce({ data: [] })\n  render(<LogPage />)\n\n  const row = screen.getByText(/happened/)\n  fireEvent.click(row)\n  await waitFor(() => screen.getByText(/my_key/))\n\n  // simulate refresh\n  await waitFor(() => userEvent.click(screen.getByText(/Refresh/)))\n  // when log line unmounts and it was focused, should close focus panel\n  await waitFor(() => screen.queryByText(/my_key/) === null, { timeout: 1000 })\n  await waitFor(() => screen.queryByText(/happened/) === null, { timeout: 1000 })\n})",
            "file": "pages/projects/logs.test.js",
            "skipped": false,
            "dir": "studio/tests"
        },
        {
            "name": "Search will trigger a log refresh",
            "suites": [],
            "updatePoint": {
                "line": 85,
                "column": 39
            },
            "line": 85,
            "code": "test('Search will trigger a log refresh', async () => {\n  get.mockImplementation((url) => {\n    if (url.includes('search_query') && url.includes('something')) {\n      return {\n        data: [\n          {\n            id: 'some-uuid',\n            timestamp: 1621323232312,\n            event_message: 'some event happened',\n            metadata: {},\n          },\n        ],\n      }\n    }\n    return { data: [] }\n  })\n  render(<LogPage />)\n\n  userEvent.type(screen.getByPlaceholderText(/Search/), 'something')\n  await waitFor(\n    () => {\n      expect(get).toHaveBeenCalledWith(expect.stringContaining('search_query'))\n      expect(get).toHaveBeenCalledWith(expect.stringContaining('something'))\n    },\n    { timeout: 1500 }\n  )\n\n  await waitFor(() => screen.getByText(/happened/), { timeout: 1000 })\n})",
            "file": "pages/projects/logs.test.js",
            "skipped": false,
            "dir": "studio/tests"
        },
        {
            "name": "poll count for new messages",
            "suites": [],
            "updatePoint": {
                "line": 115,
                "column": 33
            },
            "line": 115,
            "code": "test('poll count for new messages', async () => {\n  get.mockImplementation((url) => {\n    if (url.includes('count')) {\n      return { data: [{ count: 125 }] }\n    }\n    return {\n      data: [\n        {\n          id: 'some-uuid',\n          timestamp: 1621323232312,\n          event_message: 'some event happened',\n          metadata: {},\n        },\n      ],\n    }\n  })\n  render(<LogPage />)\n  await waitFor(() => screen.queryByText(/happened/) === null)\n  // should display new logs count\n  await waitFor(() => screen.getByText(/125/))\n\n  userEvent.click(screen.getByText(/Refresh/))\n  await waitFor(() => screen.queryByText(/125/) === null)\n  await waitFor(() => screen.getByText(/happened/))\n})",
            "file": "pages/projects/logs.test.js",
            "skipped": false,
            "dir": "studio/tests"
        },
        {
            "name": "where clause will trigger a log refresh",
            "suites": [],
            "updatePoint": {
                "line": 141,
                "column": 45
            },
            "line": 141,
            "code": "test('where clause will trigger a log refresh', async () => {\n  get.mockImplementation((url) => {\n    if (url.includes('where') && url.includes('something')) {\n      return {\n        data: [\n          {\n            id: 'some-uuid',\n            timestamp: 1621323232312,\n            event_message: 'some event happened',\n            metadata: {},\n          },\n        ],\n      }\n    }\n    return { data: [] }\n  })\n  const { container } = render(<LogPage />)\n  let editor = container.querySelector('.monaco-editor')\n  expect(editor).toBeFalsy()\n  // TODO: abstract this out into a toggle selection helper\n  const toggle = getToggleByText(/via query/)\n  expect(toggle).toBeTruthy()\n  userEvent.click(toggle)\n  await waitFor(() => {\n    editor = container.querySelector('.monaco-editor')\n    expect(editor).toBeTruthy()\n  })\n  editor = container.querySelector('.monaco-editor')\n  userEvent.type(editor, 'metadata.field = something')\n  await waitFor(\n    () => {\n      expect(get).toHaveBeenCalledWith(expect.stringContaining('where'))\n      expect(get).toHaveBeenCalledWith(expect.stringContaining('metadata.field'))\n    },\n    { timeout: 1000 }\n  )\n\n  await waitFor(() => screen.getByText(/happened/))\n})",
            "file": "pages/projects/logs.test.js",
            "skipped": false,
            "dir": "studio/tests"
        },
        {
            "name": "can display log data",
            "suites": [],
            "updatePoint": {
                "line": 3,
                "column": 26
            },
            "line": 3,
            "code": "test('can display log data', async () => {\n  render(<LogTable data={[{\n    id: \"seome-uuid\",\n    timestamp: 1621323232312,\n    event_message: \"some event happened\",\n    metadata: {\n      my_key: \"something_value\"\n    }\n  }]} />)\n\n  await waitFor(() => screen.getByText(/happened/))\n  const row = screen.getByText(/happened/)\n  fireEvent.click(row)\n  await waitFor(() => screen.getByText(/my_key/))\n  await waitFor(() => screen.getByText(/something_value/))\n})",
            "file": "pages/projects/LogTable.test.js",
            "skipped": false,
            "dir": "studio/tests"
        }
    ],
    "badge": "supabase__supabase.svg"
}