{"repo":"alibaba/ice","url":"https://github.com/alibaba/ice","branch":"master","configs":[{"package":"icejs-project","lang":"ts","dir":"test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@builder/user-config","lang":"js","dir":"packages/build-user-config/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"build-plugin-icestark","lang":"ts","dir":"packages/plugin-icestark/tests","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"build-plugin-ice-request","lang":"ts","dir":"packages/plugin-request/__tests__","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"build-plugin-ice-router","lang":"ts","dir":"packages/plugin-router/tests","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"build-plugin-stark-module","lang":"ts","dir":"packages/plugin-stark-module/test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"vite-plugin-index-html","lang":"ts","dir":"packages/vite-plugin-index-html/tests","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"extract-css-assets-webpack-plugin","lang":"js","dir":"packages/webpack-plugin-extract-css-assets/test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"test SPA addProvider","suites":["build "],"updatePoint":{"line":18,"column":28},"line":18,"code":"  test('test SPA addProvider', async () => {\n    const res = await setupBrowser({ example });\n    page = res.page;\n    browser = res.browser;\n    const length = (await page.$$('.next-fd-shell')).length;\n    expect(length).toBeGreaterThan(0);\n  });","file":"basic-icestark-layout.test.ts","skipped":false,"dir":"test"},{"name":"test SPA addProvider","suites":["start "],"updatePoint":{"line":35,"column":28},"line":35,"code":"  test('test SPA addProvider', async () => {\n    const { devServer, port } = await startFixture(example);\n    const res = await setupStartBrowser({ server: devServer, port });\n    page = res.page;\n    browser = res.browser;\n    const length = (await page.$$('.next-fd-shell')).length;\n    expect(length).toBeGreaterThan(0);\n  }, 120000);","file":"basic-icestark-layout.test.ts","skipped":false,"dir":"test"},{"name":"open /","suites":["build"],"updatePoint":{"line":12,"column":14},"line":12,"code":"  test('open /', async () => {\n    const res = await setupBrowser({ example });\n    page = res.page;\n    browser = res.browser;\n\n    expect(await page.$text('#dashboard-count')).toStrictEqual('0');\n    await page.click('#add');\n    expect(await page.$text('#dashboard-count')).toStrictEqual('1');\n  });","file":"basic-keep-alive.test.ts","skipped":false,"dir":"test"},{"name":"open /about","suites":["build"],"updatePoint":{"line":22,"column":19},"line":22,"code":"  test('open /about', async () => {\n    await page.push('#/about');\n    expect(await page.$text('#about-count')).toStrictEqual('0');\n    await page.click('#add');\n    expect(await page.$text('#about-count')).toStrictEqual('1');\n  });","file":"basic-keep-alive.test.ts","skipped":false,"dir":"test"},{"name":"back /","suites":["build"],"updatePoint":{"line":29,"column":14},"line":29,"code":"  test('back /', async () => {\n    await page.push('#/');\n    expect(await page.$text('#dashboard-count')).toStrictEqual('0');\n  });","file":"basic-keep-alive.test.ts","skipped":false,"dir":"test"},{"name":"back /about","suites":["build"],"updatePoint":{"line":34,"column":19},"line":34,"code":"  test('back /about', async () => {\n    await page.push('#/about');\n    expect(await page.$text('#about-count')).toStrictEqual('1');\n  });","file":"basic-keep-alive.test.ts","skipped":false,"dir":"test"},{"name":"open /dashboard","suites":[],"updatePoint":{"line":11,"column":21},"line":11,"code":"test('open /dashboard', async () => {\n  const res = await setupBrowser({ example, defaultHtml: 'dashboard.html' });\n  page = res.page;\n  browser = res.browser;\n  expect(await page.$$text('h2')).toStrictEqual(['Dashboard Page...']);\n  await browser.close();\n});","file":"basic-mpa-vite.test.ts","skipped":false,"dir":"test"},{"name":"open /detail","suites":[],"updatePoint":{"line":19,"column":18},"line":19,"code":"test('open /detail', async () => {\n  const res = await setupBrowser({ example, defaultHtml: 'detail.html' });\n  page = res.page;\n  browser = res.browser;\n  expect(await page.$$text('h2')).toStrictEqual(['Detail Page']);\n  await browser.close();\n});","file":"basic-mpa-vite.test.ts","skipped":false,"dir":"test"},{"name":"open /home","suites":[],"updatePoint":{"line":27,"column":16},"line":27,"code":"test('open /home', async () => {\n  const res = await setupBrowser({ example, defaultHtml: 'home.html' });\n  page = res.page;\n  browser = res.browser;\n  expect(await page.$$text('h2')).toStrictEqual(['Home Page']);\n  await browser.close();\n});","file":"basic-mpa-vite.test.ts","skipped":false,"dir":"test"},{"name":"open /dashboard","suites":[],"updatePoint":{"line":11,"column":21},"line":11,"code":"test('open /dashboard', async () => {\n  const res = await setupBrowser({ example, defaultHtml: 'dashboard.html' });\n  page = res.page;\n  browser = res.browser;\n  expect(await page.$$text('h2')).toStrictEqual(['Dashboard Page...']);\n  await browser.close();\n});","file":"basic-mpa-webpack.test.ts","skipped":false,"dir":"test"},{"name":"open /detail","suites":[],"updatePoint":{"line":19,"column":18},"line":19,"code":"test('open /detail', async () => {\n  const res = await setupBrowser({ example, defaultHtml: 'detail.html' });\n  page = res.page;\n  browser = res.browser;\n  expect(await page.$$text('h2')).toStrictEqual(['Detail Page']);\n  await browser.close();\n});","file":"basic-mpa-webpack.test.ts","skipped":false,"dir":"test"},{"name":"open /home","suites":[],"updatePoint":{"line":27,"column":16},"line":27,"code":"test('open /home', async () => {\n  const res = await setupBrowser({ example, defaultHtml: 'home.html' });\n  page = res.page;\n  browser = res.browser;\n  expect(await page.$$text('h2')).toStrictEqual(['Home Page']);\n  await browser.close();\n});","file":"basic-mpa-webpack.test.ts","skipped":false,"dir":"test"},{"name":"open /","suites":[],"updatePoint":{"line":10,"column":12},"line":10,"code":"test('open /', async () => {\n  const res = await setupBrowser({ example });\n  page = res.page;\n  browser = res.browser;\n  expect(await page.$$text('h2')).toStrictEqual(['Header', 'Index Page...']);\n  expect(await page.$$text('a')).toStrictEqual(['About']);\n})","file":"basic-nested-store.test.ts","skipped":false,"dir":"test"},{"name":"open /home/a","suites":[],"updatePoint":{"line":18,"column":18},"line":18,"code":"test('open /home/a', async () => {\n  await page.push('#/home/a');\n\n  expect(await page.$$text('h2')).toStrictEqual(['Header', 'Page A']);\n  expect(await page.$$text('a')).toStrictEqual(['PageB']);\n})","file":"basic-nested-store.test.ts","skipped":false,"dir":"test"},{"name":"open /home/b","suites":[],"updatePoint":{"line":25,"column":18},"line":25,"code":"test('open /home/b', async () => {\n  await page.push('#/home/b');\n\n  expect(await page.$$text('h2')).toStrictEqual(['Header', 'Page B']);\n  expect(await page.$$text('a')).toStrictEqual(['PageA', 'Index']);\n})","file":"basic-nested-store.test.ts","skipped":false,"dir":"test"},{"name":"open /about","suites":[],"updatePoint":{"line":32,"column":17},"line":32,"code":"test('open /about', async () => {\n  await page.push('#/about');\n  // lazy load\n  expect(await page.html()).toContain('loading...');\n  // wait for render\n  await page.waitForFunction(`document.getElementsByTagName('strong').length > 1`);\n  expect(await page.$$text('h2')).toStrictEqual(['Header', 'About Page']);\n  expect(await page.$$text('a')).toStrictEqual(['home']);\n  expect(await page.html()).toContain('taobao');\n  expect(await page.html()).toContain('123');\n})","file":"basic-nested-store.test.ts","skipped":false,"dir":"test"},{"name":"open /","suites":["build "],"updatePoint":{"line":13,"column":14},"line":13,"code":"  test('open /', async () => {\n    const res = await setupBrowser({ example });\n    page = res.page;\n    browser = res.browser;\n    expect(await page.$$text('h2')).toStrictEqual(['SPA', 'Home Page...1']);\n  });","file":"basic-spa.test.ts","skipped":false,"dir":"test"},{"name":"open /dashboard","suites":["build "],"updatePoint":{"line":20,"column":23},"line":20,"code":"  test('open /dashboard', async () => {\n    await page.push('#/dashboard');\n    // lazy load\n    expect(await page.html()).toContain('加载中...');\n    // wait for render\n    await page.waitForFunction(`document.getElementsByTagName('h2').length > 1`);\n    expect(await page.$$text('h2')).toStrictEqual(['SPA', 'Dashboard Page...']);\n\n    // pageConfig props\n    expect(await page.$$text('#J_pageConfig-custom')).toStrictEqual(['foo']);\n  });","file":"basic-spa.test.ts","skipped":false,"dir":"test"},{"name":"open /a.html","suites":["build "],"updatePoint":{"line":32,"column":20},"line":32,"code":"  test('open /a.html', async () => {\n    await page.push('#/a.html');\n    expect(await page.$$text('h2')).toStrictEqual(['SPA', 'Home Page...1']);\n  });","file":"basic-spa.test.ts","skipped":false,"dir":"test"},{"name":"setup devServer","suites":["start "],"updatePoint":{"line":46,"column":23},"line":46,"code":"  test('setup devServer', async () => {\n    const { devServer, port } = await startFixture(example);\n    const res = await setupStartBrowser({ server: devServer, port });\n    page = res.page;\n    browser = res.browser;\n    expect(await page.$$text('h2')).toStrictEqual(['SPA', 'Home Page...1']);\n  }, 120000);","file":"basic-spa.test.ts","skipped":false,"dir":"test"},{"name":"open /dashboard","suites":["start "],"updatePoint":{"line":54,"column":23},"line":54,"code":"  test('open /dashboard', async () => {\n    await page.push('#/dashboard');\n    // lazy load\n    expect(await page.html()).toContain('加载中...');\n    // wait for render\n    await page.waitForFunction(`document.getElementsByTagName('h2').length > 1`);\n    expect(await page.$$text('h2')).toStrictEqual(['SPA', 'Dashboard Page...']);\n\n    // pageConfig props\n    expect(await page.$$text('#J_pageConfig-custom')).toStrictEqual(['foo']);\n  });","file":"basic-spa.test.ts","skipped":false,"dir":"test"},{"name":"open /a.html","suites":["start "],"updatePoint":{"line":66,"column":20},"line":66,"code":"  test('open /a.html', async () => {\n    await page.push('#/a.html');\n    expect(await page.$$text('h2')).toStrictEqual(['SPA', 'Home Page...1']);\n  });","file":"basic-spa.test.ts","skipped":false,"dir":"test"},{"name":"/home","suites":["build "],"updatePoint":{"line":10,"column":13},"line":10,"code":"  test('/home', async () => {\n    const serverRender = require(path.join(process.cwd(), 'build/server/index.js'));\n    const url = '/home';\n    const req = {\n      url\n    };\n\n    const res = {};\n    const ctx = { req, res };\n    const { html } = await serverRender.default({\n      ctx,\n      pathname: url,\n      loadableStatsPath: path.join(process.cwd(), 'build/loadable-stats.json')\n    });\n\n    const $ = cheerio.load(html, { decodeEntities: false });\n    const homePageContent = $('main>div').map(function(i, el) {\n      return $(el).text();\n    }).get();\n\n    expect($('main>h2').text()).toBe('Home Page...');\n    expect(homePageContent).toStrictEqual([\n      'counterState: 1',\n      'name: Jack Ma',\n      'id: 10001',\n      'address: Hangzhou',\n    ]);\n    // check loadable content\n    expect($('#__LOADABLE_REQUIRED_CHUNKS___ext').html()).not.toBeUndefined();\n  });","file":"basic-ssr-with-lazy-load.test.ts","skipped":false,"dir":"test"},{"name":"/home","suites":["build "],"updatePoint":{"line":10,"column":13},"line":10,"code":"  test('/home', async () => {\n    const serverRender = require(path.join(process.cwd(), 'build/server/index.js'));\n    const url = '/home';\n    const req = {\n      url\n    };\n\n    const res = {};\n    const ctx = { req, res };\n    const { html } = await serverRender.default({\n      ctx,\n      pathname: url,\n      loadableStatsPath: path.join(process.cwd(), 'build/loadable-stats.json')\n    });\n\n    const $ = cheerio.load(html, { decodeEntities: false });\n    const homePageContent = $('main>div').map(function(i, el) {\n      return $(el).text();\n    }).get();\n\n    expect($('main>h2').text()).toBe('Home Page...');\n    expect(homePageContent).toStrictEqual([\n      'counterState: 1',\n      'name: Jack Ma',\n      'id: 10001',\n      'address: Hangzhou',\n    ]);\n    // check loadable content\n    expect($('#__LOADABLE_REQUIRED_CHUNKS__').html()).toBe('[]');\n    expect($('#__LOADABLE_REQUIRED_CHUNKS___ext').html()).toBe('{\"namedChunks\":[]}');\n  });","file":"basic-ssr.test.ts","skipped":false,"dir":"test"},{"name":"open /","suites":[],"updatePoint":{"line":10,"column":12},"line":10,"code":"test('open /', async () => {\n  const res = await setupBrowser({ example });\n  page = res.page;\n  browser = res.browser;\n  expect(await page.$$text('h2')).toStrictEqual(['Header', 'basic store', 'Home Page']);\n  expect(await page.$$text('div>span')).toStrictEqual(['0']);\n  await page.click('#increment');\n  expect(await page.$$text('div>span')).toStrictEqual(['1']);\n})","file":"basic-store.test.ts","skipped":false,"dir":"test"},{"name":"open /about","suites":[],"updatePoint":{"line":20,"column":17},"line":20,"code":"test('open /about', async () => {\n  await page.push('#/about');\n  // wait for render\n  await page.waitForFunction(`document.getElementsByTagName('strong').length > 1`);\n  expect(await page.$$text('h2')).toStrictEqual(['Header', 'About Page']);\n})","file":"basic-store.test.ts","skipped":false,"dir":"test"},{"name":"/","suites":["build "],"updatePoint":{"line":10,"column":9},"line":10,"code":"  test('/', async () => {    \n    const serverRender = require(path.join(process.cwd(), 'examples', example, 'build/server/index.js'));\n    const url = '/';\n    const req = {\n      url\n    };\n\n    const res = {};\n    const ctx = { req, res };\n    const { html } = await serverRender.default({\n      ctx,\n      pathname: url,\n      loadableStatsPath: false\n    });\n    expect(html).toContain('window.__ICE_SSR_ENABLED__=true');\n    expect(html).toContain('Click me :');\n    expect(html).toContain('Vite Docs');\n  });","file":"basic-vite-ssr.test.ts","skipped":false,"dir":"test"},{"name":"open /","suites":[],"updatePoint":{"line":10,"column":12},"line":10,"code":"test('open /', async () => {\n  const res = await setupBrowser({ example, defaultHtml: 'home.html' });\n  page = res.page;\n  browser = res.browser;\n  expect(await page.$text('h2')).toStrictEqual('Home Page');\n});","file":"without-react-router.test.ts","skipped":false,"dir":"test"},{"name":"should convert default options in rax correctly","suites":["merge postcss options when postcss-loader is v3"],"updatePoint":{"line":28,"column":53,"index":816},"line":28,"code":"  it('should convert default options in rax correctly', () => {\n    const outerOptions = {};\n    postcssOptions(config, outerOptions);\n    const {\n      options: innerOptions\n    } = config.module.rule('css').use('postcss-loader') // @ts-ignore\n    .toConfig();\n    expect(innerOptions.sourceMap).toEqual(true);\n    expect(innerOptions.plugins).toHaveLength(3);\n    expect(innerOptions.postcssOptions).toBeUndefined();\n    expect(innerOptions).toMatchSnapshot();\n  }); // see: https://github.com/webpack-contrib/postcss-loader/tree/v3.0.0#options","file":"postcssOptions.test.js","skipped":false,"dir":"packages/build-user-config/__tests__"},{"name":"should convert root options correctly","suites":["merge postcss options when postcss-loader is v3"],"updatePoint":{"line":41,"column":43,"index":1354},"line":41,"code":"  it('should convert root options correctly', () => {\n    const outerOptions = {\n      exec: true,\n      sourceMap: false,\n      parser: 'sugarss',\n      syntax: 'sugarss',\n      stringifier: 'midas',\n      config: {},\n      plugins: []\n    };\n    postcssOptions(config, outerOptions);\n    const {\n      options: innerOptions\n    } = config.module.rule('css').use('postcss-loader') // @ts-ignore\n    .toConfig();\n    expect(innerOptions.exec).toEqual(true);\n    expect(innerOptions.sourceMap).toEqual(false);\n    expect(innerOptions.parser).toEqual('sugarss');\n    expect(innerOptions.syntax).toEqual('sugarss');\n    expect(innerOptions.stringifier).toEqual('midas');\n    expect(innerOptions.config).toMatchObject({});\n    expect(innerOptions.plugins).toHaveLength(3);\n    expect(innerOptions).toMatchSnapshot();\n  });","file":"postcssOptions.test.js","skipped":false,"dir":"packages/build-user-config/__tests__"},{"name":"should merge plugin correctly","suites":["merge postcss options when postcss-loader is v3"],"updatePoint":{"line":65,"column":35,"index":2165},"line":65,"code":"  it('should merge plugin correctly', () => {\n    const outerOptions = {\n      plugins: {\n        'postcss-plugin-rpx2vw': false\n      }\n    };\n    postcssOptions(config, outerOptions);\n    const {\n      options: innerOptions\n    } = config.module.rule('css').use('postcss-loader') // @ts-ignore\n    .toConfig();\n    expect(innerOptions.sourceMap).toEqual(true);\n    expect(innerOptions.plugins).toHaveLength(2);\n    expect(innerOptions).toMatchSnapshot();\n  });","file":"postcssOptions.test.js","skipped":false,"dir":"packages/build-user-config/__tests__"},{"name":"should convert default options in rax correctly","suites":["merge postcss options when postcss-loader is v5"],"updatePoint":{"line":99,"column":53,"index":3171},"line":99,"code":"  it('should convert default options in rax correctly', () => {\n    const outerOptions = {};\n    postcssOptions(config, outerOptions);\n    const {\n      options: innerOptions\n    } = config.module.rule('css').use('postcss-loader') // @ts-ignore\n    .toConfig();\n    expect(innerOptions.sourceMap).toEqual(true);\n    expect(innerOptions.plugins).toBeUndefined();\n    expect(innerOptions.postcssOptions).toBeDefined();\n    expect(innerOptions.postcssOptions.plugins).toHaveLength(3);\n    expect(innerOptions).toMatchSnapshot();\n  }); // see: https://github.com/webpack-contrib/postcss-loader/tree/v5.3.0#options","file":"postcssOptions.test.js","skipped":false,"dir":"packages/build-user-config/__tests__"},{"name":"should convert root options correctly","suites":["merge postcss options when postcss-loader is v5"],"updatePoint":{"line":113,"column":43,"index":3772},"line":113,"code":"  it('should convert root options correctly', () => {\n    const outerOptions = {\n      exec: true,\n      sourceMap: false,\n      parser: 'sugarss',\n      syntax: 'sugarss',\n      stringifier: 'midas',\n      plugins: [],\n      map: false\n    };\n    postcssOptions(config, outerOptions);\n    const {\n      options: innerOptions\n    } = config.module.rule('css').use('postcss-loader') // @ts-ignore\n    .toConfig();\n    expect(innerOptions.execute).toEqual(true);\n    expect(innerOptions.exec).toBeUndefined();\n    expect(innerOptions.sourceMap).toEqual(false);\n    expect(innerOptions.postcssOptions.parser).toEqual('sugarss');\n    expect(innerOptions.postcssOptions.syntax).toEqual('sugarss');\n    expect(innerOptions.postcssOptions.stringifier).toEqual('midas');\n    expect(innerOptions.postcssOptions.plugins).toHaveLength(3);\n    expect(innerOptions.postcssOptions.map).toEqual(false);\n    expect(innerOptions).toMatchSnapshot();\n  });","file":"postcssOptions.test.js","skipped":false,"dir":"packages/build-user-config/__tests__"},{"name":"should merge plugin correctly","suites":["merge postcss options when postcss-loader is v5"],"updatePoint":{"line":138,"column":35,"index":4702},"line":138,"code":"  it('should merge plugin correctly', () => {\n    const outerOptions = {\n      plugins: {\n        'postcss-plugin-rpx2vw': false\n      }\n    };\n    postcssOptions(config, outerOptions);\n    const {\n      options: innerOptions\n    } = config.module.rule('css').use('postcss-loader') // @ts-ignore\n    .toConfig();\n    expect(innerOptions.sourceMap).toEqual(true);\n    expect(innerOptions.postcssOptions.plugins).toHaveLength(2);\n    expect(innerOptions).toMatchSnapshot();\n  });","file":"postcssOptions.test.js","skipped":false,"dir":"packages/build-user-config/__tests__"},{"name":"start","suites":["entry-helper"],"updatePoint":{"line":4,"column":13},"line":4,"code":"  test('start', () => {\n    const entries = {\n      index: {\n        values: () => [\n          '/icestark-demo/ice-browser-var/child/node_modules/_react-dev-utils@10.2.1@react-dev-utils/webpackHotDevClient.js',\n          '/demo-project/icestark-demo/ice-browser-var/child/src/app'\n        ]\n      }\n    };\n\n    expect(getEntryFiles(entries)).toEqual(['/demo-project/icestark-demo/ice-browser-var/child/src/app'])\n    expect(getEntries(entries)).toEqual({\n      index: '/demo-project/icestark-demo/ice-browser-var/child/src/app'\n    })\n  })","file":"entryHelper.spec.ts","skipped":false,"dir":"packages/plugin-icestark/tests"},{"name":"start-single-string","suites":["entry-helper"],"updatePoint":{"line":20,"column":27},"line":20,"code":"  test('start-single-string', () => {\n    const entries = {\n      index: {\n        values: () => '/demo-project/icestark-demo/ice-browser-var/child/src/app'\n      }\n    };\n\n    expect(getEntryFiles(entries)).toEqual(['/demo-project/icestark-demo/ice-browser-var/child/src/app'])\n    expect(getEntries(entries)).toEqual({\n      index: '/demo-project/icestark-demo/ice-browser-var/child/src/app'\n    })\n  })","file":"entryHelper.spec.ts","skipped":false,"dir":"packages/plugin-icestark/tests"},{"name":"multi-entries","suites":["entry-helper"],"updatePoint":{"line":33,"column":21},"line":33,"code":"  test('multi-entries', () => {\n    const entries = {\n      index: {\n        values: () => [\n          '/icestark-demo/ice-browser-var/child/node_modules/_react-dev-utils@10.2.1@react-dev-utils/webpackHotDevClient.js',\n          '/demo-project/icestark-demo/ice-browser-var/child/src/app'\n        ]\n      },\n      test: {\n        values: () => [\n          '/icestark-demo/ice-browser-var/child/node_modules/_react-dev-utils@10.2.1@react-dev-utils/webpackHotDevClient.js',\n          '/demo-project/icestark-demo/ice-browser-var/child/src/test'\n        ]\n      },\n    };\n\n    expect(getEntryFiles(entries)).toEqual(['/demo-project/icestark-demo/ice-browser-var/child/src/app', '/demo-project/icestark-demo/ice-browser-var/child/src/test'])\n    expect(getEntries(entries)).toEqual({\n      index: '/demo-project/icestark-demo/ice-browser-var/child/src/app',\n      test: '/demo-project/icestark-demo/ice-browser-var/child/src/test'\n    })\n  })","file":"entryHelper.spec.ts","skipped":false,"dir":"packages/plugin-icestark/tests"},{"name":"basic","suites":["babel-plugin-for-microap"],"updatePoint":{"line":19,"column":13},"line":19,"code":"  test('basic', () => {\n    const { entry, output } = require(path.join(__dirname, './basic.js'));\n    expect(transformSync(entry)).toEqual(output)\n  })","file":"index.spec.ts","skipped":false,"dir":"packages/plugin-icestark/tests"},{"name":"async-runapp","suites":["babel-plugin-for-microap"],"updatePoint":{"line":24,"column":20},"line":24,"code":"  test('async-runapp', () => {\n    const { entry, output } = require(path.join(__dirname, './asyncRunApp.js'));\n    expect(transformSync(entry)).toEqual(output)\n  })","file":"index.spec.ts","skipped":false,"dir":"packages/plugin-icestark/tests"},{"name":"custom-lifecycles","suites":["babel-plugin-for-microap"],"updatePoint":{"line":29,"column":25},"line":29,"code":"  test('custom-lifecycles', () => {\n    const { entry, output } = require(path.join(__dirname, './customLifecycles.js'));\n    expect(transformSync(entry)).toEqual(output)\n  })","file":"index.spec.ts","skipped":false,"dir":"packages/plugin-icestark/tests"},{"name":"should be defined","suites":["with request"],"updatePoint":{"line":26,"column":23},"line":26,"code":"  it('should be defined', () => {\n    expect(request).toBeDefined();\n  });","file":"request.ts","skipped":false,"dir":"packages/plugin-request/__tests__"},{"name":"request alias should work","suites":["with request"],"updatePoint":{"line":30,"column":31},"line":30,"code":"  it('request alias should work', async () => {\n    const data = await request.get(`${server.url}/repo`);\n    expect(data).toEqual(MOCK_DATA);\n  });","file":"request.ts","skipped":false,"dir":"packages/plugin-request/__tests__"},{"name":"request receive an object parameter should work","suites":["with request"],"updatePoint":{"line":35,"column":53},"line":35,"code":"  it('request receive an object parameter should work', async () => {\n    const data = await request({\n      url: `${server.url}/repo`\n    });\n    expect(data).toEqual(MOCK_DATA);\n  });","file":"request.ts","skipped":false,"dir":"packages/plugin-request/__tests__"},{"name":"request withFullResponse should work","suites":["with request"],"updatePoint":{"line":42,"column":42},"line":42,"code":"  it('request withFullResponse should work', async () => {\n    // @ts-ignore\n    const data = await request({\n      url: `${server.url}/repo`,\n      withFullResponse: true\n    });\n    expect(data.status).toEqual(200);\n    expect(data.statusText).toEqual('OK');\n  });","file":"request.ts","skipped":false,"dir":"packages/plugin-request/__tests__"},{"name":"should be defined","suites":["with useRequest"],"updatePoint":{"line":23,"column":23},"line":23,"code":"  it('should be defined', () => {\n    expect(useRequest).toBeDefined();\n  });","file":"useRequest.ts","skipped":false,"dir":"packages/plugin-request/__tests__"},{"name":"with service should work","suites":["with useRequest"],"updatePoint":{"line":27,"column":30},"line":27,"code":"  it('with service should work', async () => {\n    const request = req =>\n      new Promise((resolve, reject) => {\n        setTimeout(() => {\n          if (req === 0) {\n            reject(new Error('fail'));\n          } else {\n            resolve('success');\n          }\n        }, 1000);\n      });\n\n    let successValue;\n    const successCallback = text => {\n      successValue = text;\n    };\n    const errorCallback = jest.fn();\n\n    const { result, waitForNextUpdate, unmount } = renderHook(() => useRequest(request, {\n      manual: false,\n      onSuccess: successCallback,\n      onError: errorCallback\n    }))\n    expect(result.current.loading).toEqual(true);\n\n    jest.useRealTimers();\n    await waitForNextUpdate();\n    expect(result.current.loading).toEqual(false);\n    expect(result.current.data).toEqual('success');\n    expect(successValue).toEqual('success');\n    expect(errorCallback).not.toHaveBeenCalled();\n    act(() => {\n      result.current.request(0);\n    });\n    expect(result.current.loading).toEqual(true);\n\n    unmount();\n  });","file":"useRequest.ts","skipped":false,"dir":"packages/plugin-request/__tests__"},{"name":"with object should work","suites":["with useRequest"],"updatePoint":{"line":66,"column":29},"line":66,"code":"  it('with object should work', async () => {\n    server.get('/repo', (req, res) => {\n      res.send(MOCK_DATA);\n    });\n\n    const { result, waitForNextUpdate } = renderHook(() => useRequest({ url: `${server.url}/repo` }, {\n      manual: true\n    }))\n    act(() => {\n      result.current.request();\n    });\n    await waitForNextUpdate();\n    expect(result.current.data).toEqual(MOCK_DATA);\n    expect(result.current.loading).toEqual(false);\n    expect(result.current.error).toEqual(undefined);\n  });","file":"useRequest.ts","skipped":false,"dir":"packages/plugin-request/__tests__"},{"name":"with string should work","suites":["with useRequest"],"updatePoint":{"line":83,"column":29},"line":83,"code":"  it('with string should work', async () => {\n    server.get('/repo', (req, res) => {\n      res.send(MOCK_DATA);\n    });\n\n    const { result, waitForNextUpdate } = renderHook(() => useRequest(`${server.url}/repo`, {\n      manual: true,\n    }))\n    act(() => {\n      result.current.request();\n    });\n    await waitForNextUpdate();\n    expect(result.current.data).toEqual(MOCK_DATA);\n    expect(result.current.loading).toEqual(false);\n    expect(result.current.error).toEqual(undefined);\n    console.log(result.current);\n  });","file":"useRequest.ts","skipped":false,"dir":"packages/plugin-request/__tests__"},{"name":"one level","suites":["format-routes"],"updatePoint":{"line":15,"column":17},"line":15,"code":"  test('one level', () => {\n    const routes: IRouterConfig[] = [\n      {\n        path: '/',\n        exact: true,\n        component: mockComponentA as any,\n      },\n      {\n        path: '/test',\n        component: mockComponentB as any,\n      },\n    ];\n    const formatedRoutes = formatRoutes(routes);\n\n    expect(formatedRoutes[0].path).toBe('/');\n    expect(formatedRoutes[1].path).toBe('/test');\n\n    expect((formatedRoutes[0].component as any).pageConfig).toEqual({\n      componentName: 'mockComponentA'\n    });\n\n    expect((formatedRoutes[1].component as any).pageConfig).toEqual({\n      componentName: 'mockComponentB'\n    });\n\n  })","file":"formatRoutes.spec.ts","skipped":false,"dir":"packages/plugin-router/tests"},{"name":"multi level","suites":["format-routes"],"updatePoint":{"line":42,"column":19},"line":42,"code":"  test('multi level', () => {\n    const routes: IRouterConfig[] = [\n      {\n        path: '/',\n        exact: true,\n        component: mockComponentA as any,\n      },\n      {\n        path: '/test',\n        children: [\n          {\n            exact: true,\n            path: '/plan',\n            children: [{\n              path: '/a',\n              component: mockComponentB as any,\n            }]\n          },\n          {\n            path: '/',\n            component: mockComponentC as any,\n          },\n        ],\n      },\n    ];\n    const formatedRoutes = formatRoutes(routes);\n\n    expect(formatedRoutes[0].path).toBe('/');\n    expect(formatedRoutes[1].path).toBe('/test');\n\n    expect(formatedRoutes[1].children[0].path).toBe('/test/plan');\n    expect(formatedRoutes[1].children[1].path).toBe('/test');\n\n    expect(formatedRoutes[1].children[0].children[0].path).toBe('/test/plan/a');\n    expect((formatedRoutes[1].children[0].children[0].component as any).pageConfig).toEqual({\n      componentName: 'mockComponentB'\n    });\n\n    expect(formatedRoutes[1].children[1].children).toBeUndefined();\n\n  })","file":"formatRoutes.spec.ts","skipped":false,"dir":"packages/plugin-router/tests"},{"name":"children priority","suites":["format-routes"],"updatePoint":{"line":84,"column":25},"line":84,"code":"  test('children priority', () => {\n    const routes: IRouterConfig[] = [\n      {\n        path: '/test',\n        component: mockComponentA as any,\n        children: [\n          {\n            exact: true,\n            path: '/plan',\n            component: mockComponentB as any,\n          },\n          {\n            path: '/',\n            component: mockComponentC as any,\n          },\n        ],\n      },\n    ];\n\n    const formatedRoutes = formatRoutes(routes);\n\n    expect((formatedRoutes[0].component as any).pageConfig).toBeUndefined();\n    expect((formatedRoutes[0].children[0].component as any).pageConfig).toEqual({\n      componentName: 'mockComponentB'\n    });\n    expect((formatedRoutes[0].children[1].component as any).pageConfig).toEqual({\n      componentName: 'mockComponentC'\n    });\n  })","file":"formatRoutes.spec.ts","skipped":false,"dir":"packages/plugin-router/tests"},{"name":"call formatRoutes function more than one times with the same routes","suites":["format-routes"],"updatePoint":{"line":114,"column":75},"line":114,"code":"  test('call formatRoutes function more than one times with the same routes', () => {\n    const routes: IRouterConfig[] = [\n      {\n        path: '/test',\n        component: mockComponentA as any,\n        children: [\n          {\n            exact: true,\n            path: '/plan',\n            component: mockComponentB as any,\n          },\n          {\n            path: '/',\n            component: mockComponentC as any,\n          },\n        ],\n      },\n    ];\n\n    const formattedRoutes = formatRoutes(routes);\n    const anotherFormattedRoutes = formatRoutes(routes);\n\n    expect(formattedRoutes[0].children[0].path).toBe('/test/plan');\n    expect(anotherFormattedRoutes[0].children[0].path).toBe('/test/plan');\n  })","file":"formatRoutes.spec.ts","skipped":false,"dir":"packages/plugin-router/tests"},{"name":"input:    expected: ","suites":["path join"],"updatePoint":{"line":34,"column":60},"line":34,"code":"    test(`input: ${JSON.stringify(p[0])}   expected: ${p[1]}`, () => {\n      const actual = joinPath(...p[0]);\n      expect(actual).toStrictEqual(p[1]);\n    });","file":"joinPath.spec.ts","skipped":false,"dir":"packages/plugin-router/tests"},{"name":"will throw Error","suites":["path join"],"updatePoint":{"line":40,"column":24},"line":40,"code":"  test('will throw Error', () => {\n    expect(() => joinPath(null)).toThrowError();\n  });","file":"joinPath.spec.ts","skipped":false,"dir":"packages/plugin-router/tests"},{"name":"pathArray:  input:  expected: ","suites":["path-to-regexp"],"updatePoint":{"line":64,"column":107},"line":64,"code":"    test(`pathArray: ${JSON.stringify(pathJoinArray)} input: ${input} expected: ${JSON.stringify(expected)}`, () => {\n      const re = pathToRegexp(joinPath(...pathJoinArray));\n      expect(exec(re, input)).toStrictEqual(expected);\n    });","file":"joinPath.spec.ts","skipped":false,"dir":"packages/plugin-router/tests"},{"name":"test module entry","suites":["simple test suite"],"updatePoint":{"line":12,"column":25},"line":12,"code":"  test('test module entry', async () => {\n    const context = new Context({\n      ...defaultOptions,\n      command: 'start',\n      plugins: [\n        [path.join(__dirname, '../src'), {\n          moduleEntry: './src/index',\n          library: 'moduletest',\n          moduleExternals: {\n            react: 'React',\n          },\n        }],\n      ],\n    });\n    const configArr = await context.setUp();\n    const config = configArr[0].chainConfig.toConfig();\n    expect(config.output.filename).toBe('./[name]/index.js');\n    expect(config.output.library).toBe('moduletest');\n    expect(config.output.libraryTarget).toBe('umd');\n    expect(config.externals).toStrictEqual({\n      react: 'React',\n    });\n  });","file":"index.spec.ts","skipped":false,"dir":"packages/plugin-stark-module/test"},{"name":"remove-html-entry-script","suites":["vite-plugin-index-html"],"updatePoint":{"line":4,"column":32},"line":4,"code":"  test('remove-html-entry-script', () => {\n    const html = `<!DOCTYPE html>\n    <html>\n      <head>\n        <meta charset=\"utf-8\" />\n        <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge,chrome=1\" />\n        <meta name=\"viewport\" content=\"width=device-width\" />\n        <title>icestark</title>\n      </head>\n      <body>\n        <div id=\"ice-container\"></div>\n      </body>\n    </html>\n    `\n\n    expect(removeHtmlEntryScript('/Users/ice', html, '/icestark-demo/ice-vite/child/src/app')).toBe(html)\n  })","file":"index.test.ts","skipped":false,"dir":"packages/vite-plugin-index-html/tests"},{"name":"remove-html-entry-script-vite/src-irregular","suites":["vite-plugin-index-html"],"updatePoint":{"line":22,"column":51},"line":22,"code":"  test('remove-html-entry-script-vite/src-irregular', () => {\n    const html = `<!DOCTYPE html>\n    <html lang=\"en\">\n      <head>\n        <meta charset=\"UTF-8\" />\n        <link rel=\"icon\" type=\"image/svg+xml\" href=\"/src/favicon.svg\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n        <title>Vite App</title>\n      </head>\n      <body>\n        <div id=\"root\"></div>\n        <script type=\"module\" src=\"/src/main.tsx\"></script>\n      </body>\n    </html>\n    `\n    const result = html.replace('<script type=\"module\" src=\"/src/main.tsx\"></script>', '<!-- removed by vite-plugin-index-html <script type=\"module\" src=\"/src/main.tsx\"></script> -->');\n\n    expect(removeHtmlEntryScript('/Users/ice', html, '/icestark-demo/src/main.tsx')).toBe(result)\n    expect(removeHtmlEntryScript('/Users/ice', html, 'icestark-demo/src/main.tsx')).toBe(result)\n    expect(removeHtmlEntryScript('/Users/ice', html, './icestark-demo/src/main.tsx')).toBe(result)\n    expect(removeHtmlEntryScript('/Users/ice', html, '/src/main.tsx')).toBe(result)\n    expect(removeHtmlEntryScript('/Users/ice', html, './src/main.tsx')).toBe(result)\n    expect(removeHtmlEntryScript('/Users/ice', html, 'src/main.tsx')).toBe(result)\n  })","file":"index.test.ts","skipped":false,"dir":"packages/vite-plugin-index-html/tests"},{"name":"remove-html-entry-script-vite/src-relative-A","suites":["vite-plugin-index-html"],"updatePoint":{"line":47,"column":52},"line":47,"code":"  test('remove-html-entry-script-vite/src-relative-A', () => {\n    const html = `<!DOCTYPE html>\n    <html lang=\"en\">\n      <head>\n        <meta charset=\"UTF-8\" />\n        <link rel=\"icon\" type=\"image/svg+xml\" href=\"/src/favicon.svg\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n        <title>Vite App</title>\n      </head>\n      <body>\n        <div id=\"root\"></div>\n        <script type=\"module\" src=\"./src/main.tsx\"></script>\n      </body>\n    </html>\n    `\n    const result = html.replace('<script type=\"module\" src=\"./src/main.tsx\"></script>', '<!-- removed by vite-plugin-index-html <script type=\"module\" src=\"./src/main.tsx\"></script> -->');\n\n    expect(removeHtmlEntryScript('/Users/ice', html, '/icestark-demo/src/main.tsx')).toBe(result)\n    expect(removeHtmlEntryScript('/Users/ice', html, 'icestark-demo/src/main.tsx')).toBe(result)\n    expect(removeHtmlEntryScript('/Users/ice', html, './icestark-demo/src/main.tsx')).toBe(result)\n    expect(removeHtmlEntryScript('/Users/ice', html, '/src/main.tsx')).toBe(result)\n    expect(removeHtmlEntryScript('/Users/ice', html, './src/main.tsx')).toBe(result)\n    expect(removeHtmlEntryScript('/Users/ice', html, 'src/main.tsx')).toBe(result)\n  })","file":"index.test.ts","skipped":false,"dir":"packages/vite-plugin-index-html/tests"},{"name":"remove-html-entry-script-vite/src-relative-B","suites":["vite-plugin-index-html"],"updatePoint":{"line":72,"column":52},"line":72,"code":"  test('remove-html-entry-script-vite/src-relative-B', () => {\n    const html = `<!DOCTYPE html>\n    <html lang=\"en\">\n      <head>\n        <meta charset=\"UTF-8\" />\n        <link rel=\"icon\" type=\"image/svg+xml\" href=\"/src/favicon.svg\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n        <title>Vite App</title>\n      </head>\n      <body>\n        <div id=\"root\"></div>\n        <script type=\"module\" src=\"src/main.tsx\"></script>\n      </body>\n    </html>\n    `\n    const result = html.replace('<script type=\"module\" src=\"src/main.tsx\"></script>', '<!-- removed by vite-plugin-index-html <script type=\"module\" src=\"src/main.tsx\"></script> -->');\n\n    expect(removeHtmlEntryScript('/Users/ice', html, '/icestark-demo/src/main.tsx')).toBe(result)\n    expect(removeHtmlEntryScript('/Users/ice', html, 'icestark-demo/src/main.tsx')).toBe(result)\n    expect(removeHtmlEntryScript('/Users/ice', html, './icestark-demo/src/main.tsx')).toBe(result)\n    expect(removeHtmlEntryScript('/Users/ice', html, '/src/main.tsx')).toBe(result)\n    expect(removeHtmlEntryScript('/Users/ice', html, './src/main.tsx')).toBe(result)\n    expect(removeHtmlEntryScript('/Users/ice', html, 'src/main.tsx')).toBe(result)\n  })","file":"index.test.ts","skipped":false,"dir":"packages/vite-plugin-index-html/tests"}]}