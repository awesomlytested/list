{"repo":"orbitdb/orbit-db","url":"https://github.com/orbitdb/orbit-db","branch":"main","configs":[{"package":"orbit-db","lang":"js","dir":"test","framework":"mocha","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"has the correct access rights after creating the database","suites":["orbit-db - IPFSAccessController Integration ()","OrbitDB Integration"],"updatePoint":{"line":84,"column":67,"index":2857},"line":84,"code":"      it('has the correct access rights after creating the database', async () => {\n        assert.deepStrictEqual(db.access.write, [id1.id]);\n      });","file":"access-controllers/ipfs-access-controller-integration.test.js","skipped":false,"dir":"test"},{"name":"makes database use the correct access controller","suites":["orbit-db - IPFSAccessController Integration ()","OrbitDB Integration"],"updatePoint":{"line":87,"column":58,"index":3001},"line":87,"code":"      it('makes database use the correct access controller', async () => {\n        const {\n          address\n        } = await db.access.save();\n        assert.strictEqual(acManifest.params.address, address);\n      });","file":"access-controllers/ipfs-access-controller-integration.test.js","skipped":false,"dir":"test"},{"name":"saves database manifest file locally","suites":["orbit-db - IPFSAccessController Integration ()","OrbitDB Integration"],"updatePoint":{"line":93,"column":46,"index":3208},"line":93,"code":"      it('saves database manifest file locally', async () => {\n        assert.notStrictEqual(dbManifest, null);\n      });","file":"access-controllers/ipfs-access-controller-integration.test.js","skipped":false,"dir":"test"},{"name":"saves access controller manifest file locally","suites":["orbit-db - IPFSAccessController Integration ()","OrbitDB Integration"],"updatePoint":{"line":96,"column":55,"index":3339},"line":96,"code":"      it('saves access controller manifest file locally', async () => {\n        assert.notStrictEqual(acManifest, null);\n      });","file":"access-controllers/ipfs-access-controller-integration.test.js","skipped":false,"dir":"test"},{"name":"has correct type","suites":["orbit-db - IPFSAccessController Integration ()","OrbitDB Integration"],"updatePoint":{"line":99,"column":26,"index":3441},"line":99,"code":"      it('has correct type', async () => {\n        assert.strictEqual(acManifest.type, 'ipfs');\n      });","file":"access-controllers/ipfs-access-controller-integration.test.js","skipped":false,"dir":"test"},{"name":"has correct name","suites":["orbit-db - IPFSAccessController Integration ()","OrbitDB Integration","database manifest"],"updatePoint":{"line":103,"column":28,"index":3593},"line":103,"code":"        it('has correct name', async () => {\n          assert.strictEqual(dbManifest.name, 'AABB');\n        });","file":"access-controllers/ipfs-access-controller-integration.test.js","skipped":false,"dir":"test"},{"name":"has correct type","suites":["orbit-db - IPFSAccessController Integration ()","OrbitDB Integration","database manifest"],"updatePoint":{"line":106,"column":28,"index":3705},"line":106,"code":"        it('has correct type', async () => {\n          assert.strictEqual(dbManifest.type, 'feed');\n        });","file":"access-controllers/ipfs-access-controller-integration.test.js","skipped":false,"dir":"test"},{"name":"has correct address","suites":["orbit-db - IPFSAccessController Integration ()","OrbitDB Integration","database manifest"],"updatePoint":{"line":109,"column":31,"index":3820},"line":109,"code":"        it('has correct address', async () => {\n          assert.notStrictEqual(dbManifest.accessController, null);\n          assert.strictEqual(dbManifest.accessController.indexOf('/ipfs'), 0);\n        });","file":"access-controllers/ipfs-access-controller-integration.test.js","skipped":false,"dir":"test"},{"name":"allows to write if user has write access","suites":["orbit-db - IPFSAccessController Integration ()","OrbitDB Integration","access controls"],"updatePoint":{"line":115,"column":52,"index":4100},"line":115,"code":"        it('allows to write if user has write access', async () => {\n          let err;\n          try {\n            await db.add('hello?');\n          } catch (e) {\n            err = e.toString();\n          }\n          const res = await db.iterator().collect().map(e => e.payload.value);\n          assert.strictEqual(err, undefined);\n          assert.deepStrictEqual(res, ['hello?']);\n        });","file":"access-controllers/ipfs-access-controller-integration.test.js","skipped":false,"dir":"test"},{"name":"doesn't allow to write without write access","suites":["orbit-db - IPFSAccessController Integration ()","OrbitDB Integration","access controls"],"updatePoint":{"line":126,"column":56,"index":4500},"line":126,"code":"        it('doesn\\'t allow to write without write access', async () => {\n          let err;\n          try {\n            await db2.add('hello!!');\n            assert.strictEqual('Should not end here', false);\n          } catch (e) {\n            err = e;\n          }\n          const res = await db2.iterator().collect().map(e => e.payload.value);\n          assert.strictEqual(err.message, `Could not append entry, key \"${db2.identity.id}\" is not allowed to write to the log`);\n          assert.deepStrictEqual(res.includes(e => e === 'hello!!'), false);\n        });","file":"access-controllers/ipfs-access-controller-integration.test.js","skipped":false,"dir":"test"},{"name":"creates an access controller","suites":["orbit-db - IPFSAccessController ()","Constructor"],"updatePoint":{"line":67,"column":38,"index":2197},"line":67,"code":"      it('creates an access controller', () => {\n        assert.notStrictEqual(accessController, null);\n        assert.notStrictEqual(accessController, undefined);\n      });","file":"access-controllers/ipfs-access-controller.test.js","skipped":false,"dir":"test"},{"name":"sets the controller type","suites":["orbit-db - IPFSAccessController ()","Constructor"],"updatePoint":{"line":71,"column":34,"index":2367},"line":71,"code":"      it('sets the controller type', () => {\n        assert.strictEqual(accessController.type, 'ipfs');\n      });","file":"access-controllers/ipfs-access-controller.test.js","skipped":false,"dir":"test"},{"name":"has IPFS instance","suites":["orbit-db - IPFSAccessController ()","Constructor"],"updatePoint":{"line":74,"column":27,"index":2474},"line":74,"code":"      it('has IPFS instance', async () => {\n        const peerId1 = await accessController._ipfs.id();\n        const peerId2 = await ipfs1.id();\n        assert.strictEqual(String(peerId1.id), String(peerId2.id));\n      });","file":"access-controllers/ipfs-access-controller.test.js","skipped":false,"dir":"test"},{"name":"sets default capabilities","suites":["orbit-db - IPFSAccessController ()","Constructor"],"updatePoint":{"line":79,"column":35,"index":2705},"line":79,"code":"      it('sets default capabilities', async () => {\n        assert.deepStrictEqual(accessController.write, [id1.id]);\n      });","file":"access-controllers/ipfs-access-controller.test.js","skipped":false,"dir":"test"},{"name":"allows owner to append after creation","suites":["orbit-db - IPFSAccessController ()","Constructor"],"updatePoint":{"line":82,"column":47,"index":2845},"line":82,"code":"      it('allows owner to append after creation', async () => {\n        const mockEntry = {\n          identity: id1,\n          v: 1\n          // ...\n          // doesn't matter what we put here, only identity is used for the check\n        };\n\n        const canAppend = await accessController.canAppend(mockEntry, id1.provider);\n        assert.strictEqual(canAppend, true);\n      });","file":"access-controllers/ipfs-access-controller.test.js","skipped":false,"dir":"test"},{"name":"has correct capabalities","suites":["orbit-db - IPFSAccessController ()","save and load"],"updatePoint":{"line":103,"column":34,"index":3568},"line":103,"code":"      it('has correct capabalities', async () => {\n        assert.deepStrictEqual(accessController.write, ['A', 'B', id1.id]);\n      });","file":"access-controllers/ipfs-access-controller.test.js","skipped":false,"dir":"test"},{"name":"has the correct access rights after creating the database","suites":["orbit-db - OrbitDBAccessController Integration ()","OrbitDB Integration"],"updatePoint":{"line":84,"column":67,"index":2863},"line":84,"code":"      it('has the correct access rights after creating the database', async () => {\n        assert.deepStrictEqual(db.access.capabilities, {\n          admin: new Set([id1.id]),\n          write: new Set([id1.id])\n        });\n      });","file":"access-controllers/orbit-db-access-controller-integration.test.js","skipped":false,"dir":"test"},{"name":"makes database use the correct access controller","suites":["orbit-db - OrbitDBAccessController Integration ()","OrbitDB Integration"],"updatePoint":{"line":90,"column":58,"index":3088},"line":90,"code":"      it('makes database use the correct access controller', async () => {\n        assert.strictEqual(acManifest.params.address, db.access._db.address.toString());\n      });","file":"access-controllers/orbit-db-access-controller-integration.test.js","skipped":false,"dir":"test"},{"name":"saves database manifest file locally","suites":["orbit-db - OrbitDBAccessController Integration ()","OrbitDB Integration"],"updatePoint":{"line":93,"column":46,"index":3250},"line":93,"code":"      it('saves database manifest file locally', async () => {\n        assert.notStrictEqual(dbManifest, null);\n      });","file":"access-controllers/orbit-db-access-controller-integration.test.js","skipped":false,"dir":"test"},{"name":"saves access controller manifest file locally","suites":["orbit-db - OrbitDBAccessController Integration ()","OrbitDB Integration"],"updatePoint":{"line":96,"column":55,"index":3381},"line":96,"code":"      it('saves access controller manifest file locally', async () => {\n        assert.notStrictEqual(acManifest, null);\n      });","file":"access-controllers/orbit-db-access-controller-integration.test.js","skipped":false,"dir":"test"},{"name":"has correct name","suites":["orbit-db - OrbitDBAccessController Integration ()","OrbitDB Integration","database manifest"],"updatePoint":{"line":100,"column":28,"index":3529},"line":100,"code":"        it('has correct name', async () => {\n          assert.strictEqual(dbManifest.name, 'AABB');\n        });","file":"access-controllers/orbit-db-access-controller-integration.test.js","skipped":false,"dir":"test"},{"name":"has correct type","suites":["orbit-db - OrbitDBAccessController Integration ()","OrbitDB Integration","database manifest"],"updatePoint":{"line":103,"column":28,"index":3641},"line":103,"code":"        it('has correct type', async () => {\n          assert.strictEqual(dbManifest.type, 'feed');\n        });","file":"access-controllers/orbit-db-access-controller-integration.test.js","skipped":false,"dir":"test"},{"name":"has correct address","suites":["orbit-db - OrbitDBAccessController Integration ()","OrbitDB Integration","database manifest"],"updatePoint":{"line":106,"column":31,"index":3756},"line":106,"code":"        it('has correct address', async () => {\n          assert.notStrictEqual(dbManifest.accessController, null);\n          assert.strictEqual(dbManifest.accessController.indexOf('/ipfs'), 0);\n        });","file":"access-controllers/orbit-db-access-controller-integration.test.js","skipped":false,"dir":"test"},{"name":"has correct type","suites":["orbit-db - OrbitDBAccessController Integration ()","OrbitDB Integration","access controller manifest"],"updatePoint":{"line":112,"column":28,"index":4023},"line":112,"code":"        it('has correct type', async () => {\n          assert.strictEqual(acManifest.type, 'orbitdb');\n        });","file":"access-controllers/orbit-db-access-controller-integration.test.js","skipped":false,"dir":"test"},{"name":"has correct address","suites":["orbit-db - OrbitDBAccessController Integration ()","OrbitDB Integration","access controller manifest"],"updatePoint":{"line":115,"column":31,"index":4141},"line":115,"code":"        it('has correct address', async () => {\n          assert.strictEqual(acManifest.params.address.indexOf('/orbitdb'), 0);\n          assert.strictEqual(acManifest.params.address.split('/').pop(), '_access');\n        });","file":"access-controllers/orbit-db-access-controller-integration.test.js","skipped":false,"dir":"test"},{"name":"granting access enables to write to the database","suites":["orbit-db - OrbitDBAccessController Integration ()","OrbitDB Integration","access controls"],"updatePoint":{"line":121,"column":60,"index":4447},"line":121,"code":"        it('granting access enables to write to the database', async () => {\n          let err;\n          try {\n            await db2.add('hello?');\n            assert.strictEqual('Should not end here', false);\n          } catch (e) {\n            err = e.toString();\n          }\n          assert.strictEqual(err, `Error: Could not append entry, key \"${db2.identity.id}\" is not allowed to write to the log`);\n          const doChanges = () => {\n            return new Promise((resolve, reject) => {\n              try {\n                // Wait for the second user's AC to notify it was updated\n                db2.access.once('updated', async () => {\n                  // Wait for the first user's db to replicate the update\n                  db.events.once('replicated', () => {\n                    // FIXME: timeout to get rid of the \"libp2p node not started yet\" errors\n                    setTimeout(() => resolve(), 1000);\n                  });\n                  // Try adding something again\n                  await db2.add('hello!');\n                });\n                // Give access to the second user\n                db.access.grant('write', id2.id);\n              } catch (e) {\n                reject(e);\n              }\n            });\n          };\n          await doChanges();\n          const res1 = await db.iterator().collect().map(e => e.payload.value);\n          const res2 = await db2.iterator().collect().map(e => e.payload.value);\n          assert.deepStrictEqual(res1, ['hello!']);\n          assert.deepStrictEqual(res2, ['hello!']);\n        });","file":"access-controllers/orbit-db-access-controller-integration.test.js","skipped":false,"dir":"test"},{"name":"can't grant access if doesn't have write access","suites":["orbit-db - OrbitDBAccessController Integration ()","OrbitDB Integration","access controls"],"updatePoint":{"line":156,"column":61,"index":6013},"line":156,"code":"        it('can\\'t grant access if doesn\\'t have write access', async () => {\n          let err;\n          try {\n            await db2.access.grant('write', id2.id);\n          } catch (e) {\n            err = e.toString();\n          }\n          assert.strictEqual(err, `Error: Could not append entry, key \"${db2.identity.id}\" is not allowed to write to the log`);\n        });","file":"access-controllers/orbit-db-access-controller-integration.test.js","skipped":false,"dir":"test"},{"name":"can't revoke access if doesn't have write access","suites":["orbit-db - OrbitDBAccessController Integration ()","OrbitDB Integration","access controls"],"updatePoint":{"line":165,"column":62,"index":6389},"line":165,"code":"        it('can\\'t revoke access if doesn\\'t have write access', async () => {\n          let err;\n          try {\n            await db2.access.revoke('write', id1.id);\n          } catch (e) {\n            err = e.toString();\n          }\n          assert.strictEqual(err, `Error: Could not append entry, key \"${db2.identity.id}\" is not allowed to write to the log`);\n        });","file":"access-controllers/orbit-db-access-controller-integration.test.js","skipped":false,"dir":"test"},{"name":"revoking access disables ability to write to the database","suites":["orbit-db - OrbitDBAccessController Integration ()","OrbitDB Integration","access controls"],"updatePoint":{"line":174,"column":69,"index":6773},"line":174,"code":"        it('revoking access disables ability to write to the database', async () => {\n          const getError = () => {\n            return new Promise((resolve, reject) => {\n              try {\n                // Wait for the second user's AC to notify it was updated\n                db2.access.once('updated', async () => {\n                  let err;\n                  try {\n                    // Try adding something again\n                    await db2.add('hello?');\n                  } catch (e) {\n                    err = e.toString();\n                  }\n                  resolve(err);\n                });\n                // Revoke user's access\n                db.access.revoke('write', id2.id);\n              } catch (e) {\n                reject(e);\n              }\n            });\n          };\n          const err = await getError();\n          assert.strictEqual(err, `Error: Could not append entry, key \"${db2.identity.id}\" is not allowed to write to the log`);\n        });","file":"access-controllers/orbit-db-access-controller-integration.test.js","skipped":false,"dir":"test"},{"name":"creates an access controller","suites":["orbit-db - OrbitDBAccessController ()","Constructor"],"updatePoint":{"line":65,"column":38,"index":2176},"line":65,"code":"      it('creates an access controller', () => {\n        assert.notStrictEqual(accessController, null);\n        assert.notStrictEqual(accessController, undefined);\n      });","file":"access-controllers/orbit-db-access-controller.test.js","skipped":false,"dir":"test"},{"name":"sets the controller type","suites":["orbit-db - OrbitDBAccessController ()","Constructor"],"updatePoint":{"line":69,"column":34,"index":2346},"line":69,"code":"      it('sets the controller type', () => {\n        assert.strictEqual(accessController.type, 'orbitdb');\n      });","file":"access-controllers/orbit-db-access-controller.test.js","skipped":false,"dir":"test"},{"name":"has OrbitDB instance","suites":["orbit-db - OrbitDBAccessController ()","Constructor"],"updatePoint":{"line":72,"column":30,"index":2459},"line":72,"code":"      it('has OrbitDB instance', async () => {\n        assert.notStrictEqual(accessController._orbitdb, null);\n        assert.strictEqual(accessController._orbitdb.id, orbitdb1.id);\n      });","file":"access-controllers/orbit-db-access-controller.test.js","skipped":false,"dir":"test"},{"name":"has IPFS instance","suites":["orbit-db - OrbitDBAccessController ()","Constructor"],"updatePoint":{"line":76,"column":27,"index":2648},"line":76,"code":"      it('has IPFS instance', async () => {\n        const peerId1 = await accessController._orbitdb._ipfs.id();\n        const peerId2 = await ipfs1.id();\n        assert.strictEqual(String(peerId1.id), String(peerId2.id));\n      });","file":"access-controllers/orbit-db-access-controller.test.js","skipped":false,"dir":"test"},{"name":"sets default capabilities","suites":["orbit-db - OrbitDBAccessController ()","Constructor"],"updatePoint":{"line":81,"column":35,"index":2888},"line":81,"code":"      it('sets default capabilities', async () => {\n        assert.deepStrictEqual(accessController.capabilities, {\n          admin: new Set([id1.id])\n        });\n      });","file":"access-controllers/orbit-db-access-controller.test.js","skipped":false,"dir":"test"},{"name":"allows owner to append after creation","suites":["orbit-db - OrbitDBAccessController ()","Constructor"],"updatePoint":{"line":86,"column":47,"index":3073},"line":86,"code":"      it('allows owner to append after creation', async () => {\n        const mockEntry = {\n          identity: id1\n          // ...\n          // doesn't matter what we put here, only identity is used for the check\n        };\n\n        const canAppend = await accessController.canAppend(mockEntry, id1.provider);\n        assert.strictEqual(canAppend, true);\n      });","file":"access-controllers/orbit-db-access-controller.test.js","skipped":false,"dir":"test"},{"name":"loads the root access controller from IPFS","suites":["orbit-db - OrbitDBAccessController ()","grant"],"updatePoint":{"line":103,"column":52,"index":3671},"line":103,"code":"      it('loads the root access controller from IPFS', () => {\n        assert.strictEqual(accessController._db.access.type, 'ipfs');\n        assert.deepStrictEqual(accessController._db.access.write, [id1.id]);\n      });","file":"access-controllers/orbit-db-access-controller.test.js","skipped":false,"dir":"test"},{"name":"adds a capability","suites":["orbit-db - OrbitDBAccessController ()","grant"],"updatePoint":{"line":107,"column":27,"index":3866},"line":107,"code":"      it('adds a capability', async () => {\n        try {\n          await accessController.grant('write', id1.id);\n        } catch (e) {\n          assert(e, null);\n        }\n        assert.deepStrictEqual(accessController.capabilities, {\n          admin: new Set([id1.id]),\n          write: new Set([id1.id])\n        });\n      });","file":"access-controllers/orbit-db-access-controller.test.js","skipped":false,"dir":"test"},{"name":"adds more capabilities","suites":["orbit-db - OrbitDBAccessController ()","grant"],"updatePoint":{"line":118,"column":32,"index":4202},"line":118,"code":"      it('adds more capabilities', async () => {\n        try {\n          await accessController.grant('read', 'ABCD');\n          await accessController.grant('delete', 'ABCD');\n        } catch (e) {\n          assert.strictEqual(e, null);\n        }\n        assert.deepStrictEqual(accessController.capabilities, {\n          admin: new Set([id1.id]),\n          write: new Set([id1.id]),\n          read: new Set(['ABCD']),\n          delete: new Set(['ABCD'])\n        });\n      });","file":"access-controllers/orbit-db-access-controller.test.js","skipped":false,"dir":"test"},{"name":"emit 'updated' event when a capability was added","suites":["orbit-db - OrbitDBAccessController ()","grant"],"updatePoint":{"line":132,"column":60,"index":4707},"line":132,"code":"      it('emit \\'updated\\' event when a capability was added', async () => {\n        return new Promise((resolve, reject) => {\n          accessController.on('updated', () => {\n            try {\n              assert.deepStrictEqual(accessController.capabilities, {\n                admin: new Set([id1.id]),\n                write: new Set([id1.id]),\n                read: new Set(['ABCD', 'AXES']),\n                delete: new Set(['ABCD'])\n              });\n              resolve();\n            } catch (e) {\n              reject(e);\n            }\n          });\n          accessController.grant('read', 'AXES');\n        });\n      });","file":"access-controllers/orbit-db-access-controller.test.js","skipped":false,"dir":"test"},{"name":"can append after acquiring capability","suites":["orbit-db - OrbitDBAccessController ()","grant"],"updatePoint":{"line":150,"column":47,"index":5327},"line":150,"code":"      it('can append after acquiring capability', async () => {\n        try {\n          await accessController.grant('write', id1.id);\n          await accessController.grant('write', id2.id);\n        } catch (e) {\n          assert(e, null);\n        }\n        const mockEntry1 = {\n          identity: id1\n        };\n        const mockEntry2 = {\n          identity: id2\n        };\n        const canAppend1 = await accessController.canAppend(mockEntry1, id1.provider);\n        const canAppend2 = await accessController.canAppend(mockEntry2, id2.provider);\n        assert.strictEqual(canAppend1, true);\n        assert.strictEqual(canAppend2, true);\n      });","file":"access-controllers/orbit-db-access-controller.test.js","skipped":false,"dir":"test"},{"name":"removes a capability","suites":["orbit-db - OrbitDBAccessController ()","revoke"],"updatePoint":{"line":175,"column":30,"index":6195},"line":175,"code":"      it('removes a capability', async () => {\n        try {\n          await accessController.grant('write', id1.id);\n          await accessController.grant('write', 'AABB');\n          await accessController.revoke('write', 'AABB');\n        } catch (e) {\n          assert.strictEqual(e, null);\n        }\n        assert.deepStrictEqual(accessController.capabilities, {\n          admin: new Set([id1.id]),\n          write: new Set([id1.id])\n        });\n      });","file":"access-controllers/orbit-db-access-controller.test.js","skipped":false,"dir":"test"},{"name":"can remove the creator's write access","suites":["orbit-db - OrbitDBAccessController ()","revoke"],"updatePoint":{"line":188,"column":48,"index":6674},"line":188,"code":"      it('can remove the creator\\'s write access', async () => {\n        try {\n          await accessController.revoke('write', id1.id);\n        } catch (e) {\n          assert.strictEqual(e, null);\n        }\n        assert.deepStrictEqual(accessController.capabilities, {\n          admin: new Set([id1.id])\n        });\n      });","file":"access-controllers/orbit-db-access-controller.test.js","skipped":false,"dir":"test"},{"name":"can't remove the creator's admin access","suites":["orbit-db - OrbitDBAccessController ()","revoke"],"updatePoint":{"line":198,"column":51,"index":7006},"line":198,"code":"      it('can\\'t remove the creator\\'s admin access', async () => {\n        try {\n          await accessController.revoke('admin', id1.id);\n        } catch (e) {\n          assert.strictEqual(e, null);\n        }\n        assert.deepStrictEqual(accessController.capabilities, {\n          admin: new Set([id1.id])\n        });\n      });","file":"access-controllers/orbit-db-access-controller.test.js","skipped":false,"dir":"test"},{"name":"removes more capabilities","suites":["orbit-db - OrbitDBAccessController ()","revoke"],"updatePoint":{"line":208,"column":35,"index":7322},"line":208,"code":"      it('removes more capabilities', async () => {\n        try {\n          await accessController.grant('read', 'ABCD');\n          await accessController.grant('delete', 'ABCD');\n          await accessController.grant('write', id1.id);\n          await accessController.revoke('read', 'ABCDE');\n          await accessController.revoke('delete', 'ABCDE');\n        } catch (e) {\n          assert.strictEqual(e, null);\n        }\n        assert.deepStrictEqual(accessController.capabilities, {\n          admin: new Set([id1.id]),\n          delete: new Set(['ABCD']),\n          read: new Set(['ABCD']),\n          write: new Set([id1.id])\n        });\n      });","file":"access-controllers/orbit-db-access-controller.test.js","skipped":false,"dir":"test"},{"name":"can't append after revoking capability","suites":["orbit-db - OrbitDBAccessController ()","revoke"],"updatePoint":{"line":225,"column":49,"index":7991},"line":225,"code":"      it('can\\'t append after revoking capability', async () => {\n        try {\n          await accessController.grant('write', id2.id);\n          await accessController.revoke('write', id2.id);\n        } catch (e) {\n          assert(e, null);\n        }\n        const mockEntry1 = {\n          identity: id1\n        };\n        const mockEntry2 = {\n          identity: id2\n        };\n        const canAppend = await accessController.canAppend(mockEntry1, id1.provider);\n        const noAppend = await accessController.canAppend(mockEntry2, id2.provider);\n        assert.strictEqual(canAppend, true);\n        assert.strictEqual(noAppend, false);\n      });","file":"access-controllers/orbit-db-access-controller.test.js","skipped":false,"dir":"test"},{"name":"emits 'updated' event when a capability was removed","suites":["orbit-db - OrbitDBAccessController ()","revoke"],"updatePoint":{"line":243,"column":63,"index":8658},"line":243,"code":"      it('emits \\'updated\\' event when a capability was removed', async () => {\n        await accessController.grant('admin', 'cats');\n        await accessController.grant('admin', 'dogs');\n        return new Promise((resolve, reject) => {\n          accessController.on('updated', () => {\n            try {\n              assert.deepStrictEqual(accessController.capabilities, {\n                admin: new Set([id1.id, 'dogs']),\n                delete: new Set(['ABCD']),\n                read: new Set(['ABCD']),\n                write: new Set([id1.id])\n              });\n              resolve();\n            } catch (e) {\n              reject(e);\n            }\n          });\n          accessController.revoke('admin', 'cats');\n        });\n      });","file":"access-controllers/orbit-db-access-controller.test.js","skipped":false,"dir":"test"},{"name":"has the correct database address for the internal db","suites":["orbit-db - OrbitDBAccessController ()","save and load"],"updatePoint":{"line":284,"column":62,"index":10393},"line":284,"code":"      it('has the correct database address for the internal db', async () => {\n        const addr = accessController._db.address.toString().split('/');\n        assert.strictEqual(addr[addr.length - 1], '_access');\n        assert.strictEqual(addr[addr.length - 2], dbName);\n      });","file":"access-controllers/orbit-db-access-controller.test.js","skipped":false,"dir":"test"},{"name":"has correct capabalities","suites":["orbit-db - OrbitDBAccessController ()","save and load"],"updatePoint":{"line":289,"column":34,"index":10648},"line":289,"code":"      it('has correct capabalities', async () => {\n        assert.deepStrictEqual(accessController.get('admin'), new Set([id1.id]));\n        assert.deepStrictEqual(accessController.get('write'), new Set(['A', 'B', 'C']));\n        assert.deepStrictEqual(accessController.get('another'), new Set(['BB']));\n      });","file":"access-controllers/orbit-db-access-controller.test.js","skipped":false,"dir":"test"},{"name":"syncLocal option - Multiple tabs converge to same log","suites":["orbit-db - browser concurrent writes","Write concurrently"],"updatePoint":{"line":71,"column":61,"index":2302},"line":71,"code":"    it('syncLocal option - Multiple tabs converge to same log', async () => {\n      return new Promise((resolve, reject) => {\n        let polls = 0;\n        const interval = setInterval(async () => {\n          let logHashes = [];\n          await mapSeries(tabs, async page => {\n            await page.evaluate(() => loadConsistentLog());\n            const hash = await page.evaluate(async () => await getConsistentLogHash());\n            logHashes.push(hash);\n          });\n          try {\n            const hashes = Array.from(new Set(logHashes));\n            // ensure log hashes are equal\n            assert.strictEqual(hashes.length, 1);\n            clearInterval(interval);\n            resolve();\n          } catch (e) {\n            console.log(\"Repolling...\");\n            if (++polls > 5) {\n              reject(e);\n            }\n          }\n        }, 3000);\n      });\n    });","file":"browser/concurrent.spec.js","skipped":false,"dir":"test"},{"name":"no syncLocal option - Multiple tabs do not converge to same log","suites":["orbit-db - browser concurrent writes","Write concurrently"],"updatePoint":{"line":96,"column":71,"index":3197},"line":96,"code":"    it('no syncLocal option - Multiple tabs do not converge to same log', async () => {\n      return new Promise((resolve, reject) => {\n        const interval = setInterval(async () => {\n          let logHashes = [];\n          await mapSeries(tabs, async page => {\n            const hash = await page.evaluate(async () => await getInconsistentLogHash());\n            logHashes.push(hash);\n          });\n          try {\n            const hashes = Array.from(new Set(logHashes));\n            // logs hash different hashes\n            assert.strictEqual(hashes.length, numTabs);\n            clearInterval(interval);\n            resolve();\n          } catch (e) {\n            reject(e);\n          }\n        }, 3000);\n      });\n    });","file":"browser/concurrent.spec.js","skipped":false,"dir":"test"},{"name":"creates and opens a database","suites":["orbit-db - Counters ()","counters"],"updatePoint":{"line":51,"column":38,"index":1845},"line":51,"code":"      it('creates and opens a database', async () => {\n        const db = await orbitdb1.counter('counter database');\n        assert.notEqual(db, null);\n        assert.equal(db.type, 'counter');\n        assert.equal(db.dbname, 'counter database');\n      });","file":"counterdb.test.js","skipped":false,"dir":"test"},{"name":"value is zero when it's a fresh database","suites":["orbit-db - Counters ()","counters"],"updatePoint":{"line":57,"column":51,"index":2116},"line":57,"code":"      it('value is zero when it\\'s a fresh database', async () => {\n        const db = await orbitdb1.counter('counter database');\n        assert.equal(db.value, 0);\n        await db.close();\n      });","file":"counterdb.test.js","skipped":false,"dir":"test"},{"name":"increases a counter value","suites":["orbit-db - Counters ()","counters"],"updatePoint":{"line":62,"column":35,"index":2302},"line":62,"code":"      it('increases a counter value', async () => {\n        const counter = await orbitdb1.counter('counter test', {\n          path: dbPath1\n        });\n        address = counter.address.toString();\n        await mapSeries([13, 1], f => counter.inc(f));\n        assert.equal(counter.value, 14);\n        await counter.close();\n      });","file":"counterdb.test.js","skipped":false,"dir":"test"},{"name":"opens a saved counter","suites":["orbit-db - Counters ()","counters"],"updatePoint":{"line":71,"column":31,"index":2634},"line":71,"code":"      it('opens a saved counter', async () => {\n        const counter = await orbitdb1.counter(address, {\n          path: dbPath1\n        });\n        await counter.load();\n        assert.equal(counter.value, 14);\n        await counter.drop();\n      });","file":"counterdb.test.js","skipped":false,"dir":"test"},{"name":"syncs counters","suites":["orbit-db - Counters ()","counters"],"updatePoint":{"line":79,"column":24,"index":2880},"line":79,"code":"      it('syncs counters', async () => {\n        console.log(\"Sync counters\");\n        let options = {\n          accessController: {\n            // Set write access for both clients\n            write: [orbitdb1.identity.id, orbitdb2.identity.id]\n          }\n        };\n        const dbName = new Date().getTime().toString();\n        const numbers = [[13, 10], [2, 5]];\n        const increaseCounter = (counterDB, i) => mapSeries(numbers[i], n => counterDB.inc(n));\n\n        // Create a new counter database in the first client\n        options = Object.assign({}, options, {\n          path: dbPath1\n        });\n        const counter1 = await orbitdb1.counter(dbName, options);\n\n        // Open the database in the second client\n        options = Object.assign({}, options, {\n          path: dbPath2\n        });\n        const counter2 = await orbitdb2.counter(dbName, options);\n\n        // Make sure database addresses match since they're built deterministically\n        assert.equal(counter1.address.toString(), counter2.address.toString());\n\n        // Wait for peers to connect\n        console.log(\"Waiting for peers to connect\");\n        await waitForPeers(ipfs1, [orbitdb2.id], counter1.address.toString());\n        await waitForPeers(ipfs2, [orbitdb1.id], counter1.address.toString());\n        let finished1 = counter1.value === 30;\n        let finished2 = counter2.value === 30;\n        counter1.events.on('replicated', () => {\n          finished1 = counter1.value === 30;\n          finished2 = counter2.value === 30;\n        });\n        counter2.events.on('replicated', () => {\n          finished1 = counter1.value === 30;\n          finished2 = counter2.value === 30;\n        });\n        counter1.events.on('write', () => {\n          finished1 = counter1.value === 30;\n          finished2 = counter2.value === 30;\n        });\n        counter2.events.on('write', () => {\n          finished1 = counter1.value === 30;\n          finished2 = counter2.value === 30;\n        });\n\n        // Increase the counters sequentially\n        await mapSeries([counter1, counter2], increaseCounter);\n        console.log(\"Waiting for replication to finish\");\n        return new Promise((resolve, reject) => {\n          let timer = setInterval(async () => {\n            if (finished1 && finished2) {\n              try {\n                clearInterval(timer);\n                assert.equal(counter1.value, 30);\n                assert.equal(counter2.value, 30);\n                await counter1.close();\n                await counter2.close();\n                resolve();\n              } catch (e) {\n                reject(e);\n              }\n            }\n          }, 100);\n        });\n      });","file":"counterdb.test.js","skipped":false,"dir":"test"},{"name":"throws an error if given an invalid database type","suites":["orbit-db - Create & Open ()","Create","Errors"],"updatePoint":{"line":49,"column":61,"index":2002},"line":49,"code":"        it('throws an error if given an invalid database type', async () => {\n          let err;\n          try {\n            const db = await orbitdb.create('first', 'invalid-type');\n          } catch (e) {\n            err = e.toString();\n          }\n          assert.equal(err, 'Error: Invalid database type \\'invalid-type\\'');\n        });","file":"create-open.test.js","skipped":false,"dir":"test"},{"name":"throws an error if given an address instead of name","suites":["orbit-db - Create & Open ()","Create","Errors"],"updatePoint":{"line":58,"column":63,"index":2345},"line":58,"code":"        it('throws an error if given an address instead of name', async () => {\n          let err;\n          try {\n            const db = await orbitdb.create('/orbitdb/Qmc9PMho3LwTXSaUXJ8WjeBZyXesAwUofdkGeadFXsqMzW/first', 'feed');\n          } catch (e) {\n            err = e.toString();\n          }\n          assert.equal(err, 'Error: Given database name is an address. Please give only the name of the database!');\n        });","file":"create-open.test.js","skipped":false,"dir":"test"},{"name":"throws an error if database already exists","suites":["orbit-db - Create & Open ()","Create","Errors"],"updatePoint":{"line":67,"column":54,"index":2766},"line":67,"code":"        it('throws an error if database already exists', async () => {\n          let err, db;\n          try {\n            db = await orbitdb.create('first', 'feed', {\n              replicate: false\n            });\n            const db2 = await orbitdb.create('first', 'feed', {\n              replicate: false\n            });\n          } catch (e) {\n            err = e.toString();\n          }\n          assert.equal(err, `Error: Database '${db.address}' already exists!`);\n          await db.close();\n        });","file":"create-open.test.js","skipped":false,"dir":"test"},{"name":"throws an error if database type doesn't match","suites":["orbit-db - Create & Open ()","Create","Errors"],"updatePoint":{"line":82,"column":59,"index":3284},"line":82,"code":"        it('throws an error if database type doesn\\'t match', async () => {\n          let err, log, kv;\n          try {\n            log = await orbitdb.kvstore('keyvalue', {\n              replicate: false\n            });\n            kv = await orbitdb.eventlog(log.address.toString());\n          } catch (e) {\n            err = e.toString();\n          }\n          assert.equal(err, `Error: Database '${log.address}' is type 'keyvalue' but was opened as 'eventlog'`);\n        });","file":"create-open.test.js","skipped":false,"dir":"test"},{"name":"creates a feed database","suites":["orbit-db - Create & Open ()","Create","Success"],"updatePoint":{"line":104,"column":35,"index":4039},"line":104,"code":"        it('creates a feed database', async () => {\n          assert.notEqual(db, null);\n        });","file":"create-open.test.js","skipped":false,"dir":"test"},{"name":"database has the correct address","suites":["orbit-db - Create & Open ()","Create","Success"],"updatePoint":{"line":107,"column":44,"index":4149},"line":107,"code":"        it('database has the correct address', async () => {\n          assert.equal(db.address.toString().indexOf('/orbitdb'), 0);\n          assert.equal(db.address.toString().indexOf('zd'), 9);\n          assert.equal(db.address.toString().indexOf('second'), 59);\n        });","file":"create-open.test.js","skipped":false,"dir":"test"},{"name":"saves the database locally","suites":["orbit-db - Create & Open ()","Create","Success"],"updatePoint":{"line":112,"column":38,"index":4419},"line":112,"code":"        it('saves the database locally', async () => {\n          assert.equal(fs.existsSync(localDataPath), true);\n        });","file":"create-open.test.js","skipped":false,"dir":"test"},{"name":"saves database manifest reference locally","suites":["orbit-db - Create & Open ()","Create","Success"],"updatePoint":{"line":115,"column":53,"index":4561},"line":115,"code":"        it('saves database manifest reference locally', async () => {\n          const address = db.id;\n          const manifestHash = address.split('/')[2];\n          await db._cache._store.open();\n          const value = await db._cache.get(path.join(address, '/_manifest'));\n          assert.equal(value, manifestHash);\n        });","file":"create-open.test.js","skipped":false,"dir":"test"},{"name":"saves database manifest file locally","suites":["orbit-db - Create & Open ()","Create","Success"],"updatePoint":{"line":122,"column":48,"index":4890},"line":122,"code":"        it('saves database manifest file locally', async () => {\n          const manifestHash = db.id.split('/')[2];\n          const manifest = await io.read(ipfs, manifestHash);\n          assert.notEqual(manifest, false);\n          assert.equal(manifest.name, 'second');\n          assert.equal(manifest.type, 'feed');\n          assert.notEqual(manifest.accessController, null);\n          assert.equal(manifest.accessController.indexOf('/ipfs'), 0);\n        });","file":"create-open.test.js","skipped":false,"dir":"test"},{"name":"can pass local database directory as an option","suites":["orbit-db - Create & Open ()","Create","Success"],"updatePoint":{"line":131,"column":58,"index":5362},"line":131,"code":"        it('can pass local database directory as an option', async () => {\n          const dir = './orbitdb/tests/another-feed';\n          const db2 = await orbitdb.create('third', 'feed', {\n            directory: dir\n          });\n          assert.equal(fs.existsSync(dir), true);\n          await db2.close();\n        });","file":"create-open.test.js","skipped":false,"dir":"test"},{"name":"loads cache from previous version of orbit-db","suites":["orbit-db - Create & Open ()","Create","Success"],"updatePoint":{"line":139,"column":57,"index":5684},"line":139,"code":"        it('loads cache from previous version of orbit-db', async () => {\n          const dbName = 'cache-schema-test';\n          db = await orbitdb.create(dbName, 'keyvalue', {\n            overwrite: true\n          });\n          const manifestHash = db.address.root;\n          const migrationDataPath = path.join(dbPath, manifestHash, dbName);\n          await db.load();\n          assert.equal(await db.get('key'), undefined);\n          await db.drop();\n          await fs.copy(migrationFixturePath, migrationDataPath, {\n            filter: filterFunc\n          });\n          db = await orbitdb.create(dbName, 'keyvalue', {\n            directory: migrationDataPath,\n            overwrite: true\n          });\n          await db.load();\n          assert.equal(manifestHash, db.address.root);\n          assert.equal(await db.get('key'), 'value');\n        });","file":"create-open.test.js","skipped":false,"dir":"test"},{"name":"loads cache from previous version of orbit-db with the directory option","suites":["orbit-db - Create & Open ()","Create","Success"],"updatePoint":{"line":160,"column":83,"index":6567},"line":160,"code":"        it('loads cache from previous version of orbit-db with the directory option', async () => {\n          const dbName = 'cache-schema-test';\n          const directory = path.join(dbPath, \"some-other-place\");\n          await fs.copy(migrationFixturePath, directory, {\n            filter: filterFunc\n          });\n          db = await orbitdb.create(dbName, 'keyvalue', {\n            directory\n          });\n          await db.load();\n          assert.equal(await db.get('key'), 'value');\n        });","file":"create-open.test.js","skipped":false,"dir":"test"},{"name":"creates an access controller and adds ourselves as writer by default","suites":["orbit-db - Create & Open ()","Create","Success","Access Controller"],"updatePoint":{"line":183,"column":82,"index":7349},"line":183,"code":"          it('creates an access controller and adds ourselves as writer by default', async () => {\n            db = await orbitdb.create('fourth', 'feed');\n            assert.deepEqual(db.access.write, [orbitdb.identity.id]);\n          });","file":"create-open.test.js","skipped":false,"dir":"test"},{"name":"creates an access controller and adds writers","suites":["orbit-db - Create & Open ()","Create","Success","Access Controller"],"updatePoint":{"line":187,"column":59,"index":7566},"line":187,"code":"          it('creates an access controller and adds writers', async () => {\n            db = await orbitdb.create('fourth', 'feed', {\n              accessController: {\n                write: ['another-key', 'yet-another-key', orbitdb.identity.id]\n              }\n            });\n            assert.deepEqual(db.access.write, ['another-key', 'yet-another-key', orbitdb.identity.id]);\n          });","file":"create-open.test.js","skipped":false,"dir":"test"},{"name":"creates an access controller and doesn't add read access keys","suites":["orbit-db - Create & Open ()","Create","Success","Access Controller"],"updatePoint":{"line":195,"column":76,"index":7980},"line":195,"code":"          it('creates an access controller and doesn\\'t add read access keys', async () => {\n            db = await orbitdb.create('seventh', 'feed', {\n              read: ['one', 'two']\n            });\n            assert.deepEqual(db.access.write, [orbitdb.identity.id]);\n          });","file":"create-open.test.js","skipped":false,"dir":"test"},{"name":"creates a manifest with no meta field","suites":["orbit-db - Create & Open ()","Create","Success","Meta"],"updatePoint":{"line":215,"column":51,"index":8584},"line":215,"code":"          it('creates a manifest with no meta field', async () => {\n            db = await orbitdb.create('no-meta', 'feed');\n            const manifest = await io.read(ipfs, db.address.root);\n            assert.strictEqual(manifest.meta, undefined);\n            assert.deepStrictEqual(Object.keys(manifest).filter(k => k === 'meta'), []);\n          });","file":"create-open.test.js","skipped":false,"dir":"test"},{"name":"creates a manifest with a meta field","suites":["orbit-db - Create & Open ()","Create","Success","Meta"],"updatePoint":{"line":221,"column":50,"index":8937},"line":221,"code":"          it('creates a manifest with a meta field', async () => {\n            const meta = {\n              test: 123\n            };\n            db = await orbitdb.create('meta', 'feed', {\n              meta\n            });\n            const manifest = await io.read(ipfs, db.address.root);\n            assert.deepStrictEqual(manifest.meta, meta);\n            assert.deepStrictEqual(Object.keys(manifest).filter(k => k === 'meta'), ['meta']);\n          });","file":"create-open.test.js","skipped":false,"dir":"test"},{"name":"throws an error if given an invalid database type","suites":["orbit-db - Create & Open ()","determineAddress","Errors"],"updatePoint":{"line":237,"column":61,"index":9521},"line":237,"code":"        it('throws an error if given an invalid database type', async () => {\n          let err;\n          try {\n            await orbitdb.determineAddress('first', 'invalid-type');\n          } catch (e) {\n            err = e.toString();\n          }\n          assert.equal(err, 'Error: Invalid database type \\'invalid-type\\'');\n        });","file":"create-open.test.js","skipped":false,"dir":"test"},{"name":"throws an error if given an address instead of name","suites":["orbit-db - Create & Open ()","determineAddress","Errors"],"updatePoint":{"line":246,"column":63,"index":9863},"line":246,"code":"        it('throws an error if given an address instead of name', async () => {\n          let err;\n          try {\n            await orbitdb.determineAddress('/orbitdb/Qmc9PMho3LwTXSaUXJ8WjeBZyXesAwUofdkGeadFXsqMzW/first', 'feed');\n          } catch (e) {\n            err = e.toString();\n          }\n          assert.equal(err, 'Error: Given database name is an address. Please give only the name of the database!');\n        });","file":"create-open.test.js","skipped":false,"dir":"test"},{"name":"does not save the address locally","suites":["orbit-db - Create & Open ()","determineAddress","Success"],"updatePoint":{"line":263,"column":45,"index":10551},"line":263,"code":"        it('does not save the address locally', async () => {\n          assert.equal(fs.existsSync(localDataPath), false);\n        });","file":"create-open.test.js","skipped":false,"dir":"test"},{"name":"returns the address that would have been created","suites":["orbit-db - Create & Open ()","determineAddress","Success"],"updatePoint":{"line":266,"column":60,"index":10701},"line":266,"code":"        it('returns the address that would have been created', async () => {\n          const db = await orbitdb.create('third', 'feed', {\n            replicate: false\n          });\n          assert.equal(address.toString().indexOf('/orbitdb'), 0);\n          assert.equal(address.toString().indexOf('zd'), 9);\n          assert.equal(address.toString(), db.address.toString());\n          await db.close();\n        });","file":"create-open.test.js","skipped":false,"dir":"test"},{"name":"throws an error if trying to open a database with name only and 'create' is not set to 'true'","suites":["orbit-db - Create & Open ()","Open"],"updatePoint":{"line":278,"column":107,"index":11217},"line":278,"code":"      it('throws an error if trying to open a database with name only and \\'create\\' is not set to \\'true\\'', async () => {\n        let err;\n        try {\n          db = await orbitdb.open('XXX', {\n            create: false\n          });\n        } catch (e) {\n          err = e.toString();\n        }\n        assert.equal(err, \"Error: 'options.create' set to 'false'. If you want to create a database, set 'options.create' to 'true'.\");\n      });","file":"create-open.test.js","skipped":false,"dir":"test"},{"name":"throws an error if trying to open a database with name only and 'create' is not set to true","suites":["orbit-db - Create & Open ()","Open"],"updatePoint":{"line":289,"column":103,"index":11659},"line":289,"code":"      it('throws an error if trying to open a database with name only and \\'create\\' is not set to true', async () => {\n        let err;\n        try {\n          db = await orbitdb.open('YYY', {\n            create: true\n          });\n        } catch (e) {\n          err = e.toString();\n        }\n        assert.equal(err, `Error: Database type not provided! Provide a type with 'options.type' (${OrbitDB.databaseTypes.join('|')})`);\n      });","file":"create-open.test.js","skipped":false,"dir":"test"},{"name":"opens a database - name only","suites":["orbit-db - Create & Open ()","Open"],"updatePoint":{"line":300,"column":38,"index":12036},"line":300,"code":"      it('opens a database - name only', async () => {\n        const db = await orbitdb.open('abc', {\n          create: true,\n          type: 'feed',\n          overwrite: true\n        });\n        assert.equal(db.address.toString().indexOf('/orbitdb'), 0);\n        assert.equal(db.address.toString().indexOf('zd'), 9);\n        assert.equal(db.address.toString().indexOf('abc'), 59);\n        await db.drop();\n      });","file":"create-open.test.js","skipped":false,"dir":"test"},{"name":"opens a database - with a different identity","suites":["orbit-db - Create & Open ()","Open"],"updatePoint":{"line":311,"column":54,"index":12469},"line":311,"code":"      it('opens a database - with a different identity', async () => {\n        const identity = await Identities.createIdentity({\n          id: 'test-id',\n          keystore: orbitdb.keystore\n        });\n        const db = await orbitdb.open('abc', {\n          create: true,\n          type: 'feed',\n          overwrite: true,\n          identity\n        });\n        assert.equal(db.address.toString().indexOf('/orbitdb'), 0);\n        assert.equal(db.address.toString().indexOf('zd'), 9);\n        assert.equal(db.address.toString().indexOf('abc'), 59);\n        assert.equal(db.identity, identity);\n        await db.drop();\n      });","file":"create-open.test.js","skipped":false,"dir":"test"},{"name":"opens the same database - from an address","suites":["orbit-db - Create & Open ()","Open"],"updatePoint":{"line":328,"column":51,"index":13097},"line":328,"code":"      it('opens the same database - from an address', async () => {\n        const identity = await Identities.createIdentity({\n          id: 'test-id',\n          keystore: orbitdb.keystore\n        });\n        const db = await orbitdb.open('abc', {\n          create: true,\n          type: 'feed',\n          overwrite: true,\n          identity\n        });\n        const db2 = await orbitdb.open(db.address);\n        assert.equal(db2.address.toString().indexOf('/orbitdb'), 0);\n        assert.equal(db2.address.toString().indexOf('zd'), 9);\n        assert.equal(db2.address.toString().indexOf('abc'), 59);\n        await db.drop();\n        await db2.drop();\n      });","file":"create-open.test.js","skipped":false,"dir":"test"},{"name":"opens a database and adds the creator as the only writer","suites":["orbit-db - Create & Open ()","Open"],"updatePoint":{"line":346,"column":66,"index":13776},"line":346,"code":"      it('opens a database and adds the creator as the only writer', async () => {\n        const db = await orbitdb.open('abc', {\n          create: true,\n          type: 'feed',\n          overwrite: true\n        });\n        assert.equal(db.access.write.length, 1);\n        assert.equal(db.access.write[0], db.identity.id);\n        await db.drop();\n      });","file":"create-open.test.js","skipped":false,"dir":"test"},{"name":"doesn't open a database if we don't have it locally","suites":["orbit-db - Create & Open ()","Open"],"updatePoint":{"line":356,"column":63,"index":14131},"line":356,"code":"      it('doesn\\'t open a database if we don\\'t have it locally', async () => {\n        const db = await orbitdb.open('abcabc', {\n          create: true,\n          type: 'feed',\n          overwrite: true\n        });\n        const address = new OrbitDBAddress(db.address.root.slice(0, -1) + 'A', 'non-existent');\n        await db.drop();\n        return new Promise((resolve, reject) => {\n          setTimeout(resolve, 900);\n          orbitdb.open(address).then(() => reject(new Error('Shouldn\\'t open the database'))).catch(reject);\n        });\n      });","file":"create-open.test.js","skipped":false,"dir":"test"},{"name":"throws an error if trying to open a database locally and we don't have it","suites":["orbit-db - Create & Open ()","Open"],"updatePoint":{"line":369,"column":84,"index":14706},"line":369,"code":"      it('throws an error if trying to open a database locally and we don\\'t have it', async () => {\n        const db = await orbitdb.open('abc', {\n          create: true,\n          type: 'feed',\n          overwrite: true\n        });\n        const address = new OrbitDBAddress(db.address.root.slice(0, -1) + 'A', 'second');\n        await db.drop();\n        return orbitdb.open(address, {\n          localOnly: true\n        }).then(() => new Error('Shouldn\\'t open the database')).catch(e => {\n          assert.equal(e.toString(), `Error: Database '${address}' doesn't exist!`);\n        });\n      });","file":"create-open.test.js","skipped":false,"dir":"test"},{"name":"open the database and it has the added entries","suites":["orbit-db - Create & Open ()","Open"],"updatePoint":{"line":383,"column":56,"index":15277},"line":383,"code":"      it('open the database and it has the added entries', async () => {\n        const db = await orbitdb.open('ZZZ', {\n          create: true,\n          type: 'feed'\n        });\n        await db.add('hello1');\n        await db.add('hello2');\n        await db.close();\n        const db2 = await orbitdb.open(db.address);\n        await db.load();\n        const res = db.iterator({\n          limit: -1\n        }).collect();\n        assert.equal(res.length, 2);\n        assert.equal(res[0].payload.value, 'hello1');\n        assert.equal(res[1].payload.value, 'hello2');\n        await db.drop();\n        await db2.drop();\n      });","file":"create-open.test.js","skipped":false,"dir":"test"},{"name":"closes a custom store","suites":["orbit-db - Create & Open ()","Close"],"updatePoint":{"line":410,"column":31,"index":16099},"line":410,"code":"      it('closes a custom store', async () => {\n        const directory = path.join(dbPath, \"custom-store\");\n        const db = await orbitdb.open('xyz', {\n          create: true,\n          type: 'feed',\n          directory\n        });\n        await db.close();\n        assert.strictEqual(db._cache.status, 'closed');\n      });","file":"create-open.test.js","skipped":false,"dir":"test"},{"name":"close load close sets status to 'closed'","suites":["orbit-db - Create & Open ()","Close"],"updatePoint":{"line":420,"column":50,"index":16446},"line":420,"code":"      it(\"close load close sets status to 'closed'\", async () => {\n        const directory = path.join(dbPath, \"custom-store\");\n        const db = await orbitdb.open('xyz', {\n          create: true,\n          type: 'feed',\n          directory\n        });\n        await db.close();\n        await db.load();\n        await db.close();\n        assert.strictEqual(db._cache.status, 'closed');\n      });","file":"create-open.test.js","skipped":false,"dir":"test"},{"name":"successfully manages multiple caches","suites":["orbit-db - Create & Open ()","Close"],"updatePoint":{"line":432,"column":46,"index":16840},"line":432,"code":"      it('successfully manages multiple caches', async () => {\n        // Cleaning up cruft from other tests\n        const directory = path.join(dbPath, \"custom-store\");\n        const directory2 = path.join(dbPath, \"custom-store2\");\n        const db1 = await orbitdb.open('xyz1', {\n          create: true,\n          type: 'feed'\n        });\n        const db2 = await orbitdb.open('xyz2', {\n          create: true,\n          type: 'feed',\n          directory\n        });\n        const db3 = await orbitdb.open('xyz3', {\n          create: true,\n          type: 'feed',\n          directory\n        });\n        const db4 = await orbitdb.open('xyz4', {\n          create: true,\n          type: 'feed',\n          directory: directory2\n        });\n        const db5 = await orbitdb.open('xyz5', {\n          create: true,\n          type: 'feed'\n        });\n        await db1.close();\n        await db2.close();\n        await db4.close();\n        assert.strictEqual(orbitdb.cache._store.status, 'open');\n        assert.strictEqual(db2._cache.status, 'open');\n        assert.strictEqual(db3._cache.status, 'open');\n        assert.strictEqual(db4._cache.status, 'closed');\n        await db3.close();\n        await db5.close();\n        assert.strictEqual(orbitdb.cache._store.status, 'closed');\n        assert.strictEqual(db2._cache.status, 'closed');\n        assert.strictEqual(db3._cache.status, 'closed');\n        assert.strictEqual(db4._cache.status, 'closed');\n        assert.strictEqual(db5._cache.status, 'closed');\n      });","file":"create-open.test.js","skipped":false,"dir":"test"},{"name":"should have the correct custom type","suites":["orbit-db - Create Custom Database Type ()","addDatabaseType"],"updatePoint":{"line":40,"column":45,"index":1293},"line":40,"code":"      it('should have the correct custom type', async () => {\n        OrbitDB.addDatabaseType(CustomStore.type, CustomStore);\n        let store = await orbitdb.create(dbPath.replace(/^\\.\\//, ''), CustomStore.type);\n        assert.equal(store._type, CustomStore.type);\n      });","file":"create-type.test.js","skipped":false,"dir":"test"},{"name":"cannot be overwritten","suites":["orbit-db - Create Custom Database Type ()","addDatabaseType"],"updatePoint":{"line":45,"column":31,"index":1557},"line":45,"code":"      it('cannot be overwritten', async () => {\n        try {\n          OrbitDB.addDatabaseType(CustomStore.type, CustomStore);\n          throw new Error('This should not run.');\n        } catch (e) {\n          assert(e.message.indexOf('already exists') > -1);\n        }\n      });","file":"create-type.test.js","skipped":false,"dir":"test"},{"name":"creates and opens a database","suites":["orbit-db - Document Store ()"],"updatePoint":{"line":24,"column":36,"index":807},"line":24,"code":"    it('creates and opens a database', async () => {\n      db = await orbitdb1.docstore('first doc database');\n      assert.notEqual(db, null);\n      assert.equal(db.type, 'docstore');\n      assert.equal(db.dbname, 'first doc database');\n    });","file":"docstore.test.js","skipped":false,"dir":"test"},{"name":"put","suites":["orbit-db - Document Store ()","Default index '_id'"],"updatePoint":{"line":42,"column":13,"index":1366},"line":42,"code":"      it('put', async () => {\n        const doc = {\n          _id: 'hello world',\n          doc: 'all the things'\n        };\n        await db.put(doc);\n        const value = db.get('hello world');\n        assert.deepEqual(value, [doc]);\n      });","file":"docstore.test.js","skipped":false,"dir":"test"},{"name":"get - partial term match","suites":["orbit-db - Document Store ()","Default index '_id'"],"updatePoint":{"line":51,"column":34,"index":1634},"line":51,"code":"      it('get - partial term match', async () => {\n        const doc1 = {\n          _id: 'hello world',\n          doc: 'some things'\n        };\n        const doc2 = {\n          _id: 'hello universe',\n          doc: 'all the things'\n        };\n        const doc3 = {\n          _id: 'sup world',\n          doc: 'other things'\n        };\n        await db.put(doc1);\n        await db.put(doc2);\n        await db.put(doc3);\n        const value = db.get('hello');\n        assert.deepEqual(value, [doc1, doc2]);\n      });","file":"docstore.test.js","skipped":false,"dir":"test"},{"name":"get after delete","suites":["orbit-db - Document Store ()","Default index '_id'"],"updatePoint":{"line":70,"column":26,"index":2141},"line":70,"code":"      it('get after delete', async () => {\n        const doc1 = {\n          _id: 'hello world',\n          doc: 'some things'\n        };\n        const doc2 = {\n          _id: 'hello universe',\n          doc: 'all the things'\n        };\n        const doc3 = {\n          _id: 'sup world',\n          doc: 'other things'\n        };\n        await db.put(doc1);\n        await db.put(doc2);\n        await db.put(doc3);\n        await db.del('hello universe');\n        const value1 = db.get('hello');\n        const value2 = db.get('sup');\n        assert.deepEqual(value1, [doc1]);\n        assert.deepEqual(value2, [doc3]);\n      });","file":"docstore.test.js","skipped":false,"dir":"test"},{"name":"put updates a value","suites":["orbit-db - Document Store ()","Default index '_id'"],"updatePoint":{"line":92,"column":29,"index":2767},"line":92,"code":"      it('put updates a value', async () => {\n        const doc1 = {\n          _id: 'hello world',\n          doc: 'all the things'\n        };\n        const doc2 = {\n          _id: 'hello world',\n          doc: 'some of the things'\n        };\n        await db.put(doc1);\n        await db.put(doc2);\n        const value = db.get('hello');\n        assert.deepEqual(value, [doc2]);\n      });","file":"docstore.test.js","skipped":false,"dir":"test"},{"name":"query","suites":["orbit-db - Document Store ()","Default index '_id'"],"updatePoint":{"line":106,"column":15,"index":3141},"line":106,"code":"      it('query', async () => {\n        const doc1 = {\n          _id: 'hello world',\n          doc: 'all the things',\n          views: 17\n        };\n        const doc2 = {\n          _id: 'sup world',\n          doc: 'some of the things',\n          views: 10\n        };\n        const doc3 = {\n          _id: 'hello other world',\n          doc: 'none of the things',\n          views: 5\n        };\n        const doc4 = {\n          _id: 'hey universe',\n          doc: ''\n        };\n        await db.put(doc1);\n        await db.put(doc2);\n        await db.put(doc3);\n        await db.put(doc4);\n        const value1 = db.query(e => e.views > 5);\n        const value2 = db.query(e => e.views > 10);\n        const value3 = db.query(e => e.views > 17);\n        assert.deepEqual(value1, [doc1, doc2]);\n        assert.deepEqual(value2, [doc1]);\n        assert.deepEqual(value3, []);\n      });","file":"docstore.test.js","skipped":false,"dir":"test"},{"name":"query after delete","suites":["orbit-db - Document Store ()","Default index '_id'"],"updatePoint":{"line":137,"column":28,"index":4036},"line":137,"code":"      it('query after delete', async () => {\n        const doc1 = {\n          _id: 'hello world',\n          doc: 'all the things',\n          views: 17\n        };\n        const doc2 = {\n          _id: 'sup world',\n          doc: 'some of the things',\n          views: 10\n        };\n        const doc3 = {\n          _id: 'hello other world',\n          doc: 'none of the things',\n          views: 5\n        };\n        const doc4 = {\n          _id: 'hey universe',\n          doc: ''\n        };\n        await db.put(doc1);\n        await db.put(doc2);\n        await db.put(doc3);\n        await db.del('hello world');\n        await db.put(doc4);\n        const value1 = db.query(e => e.views >= 5);\n        const value2 = db.query(e => e.views >= 10);\n        assert.deepEqual(value1, [doc2, doc3]);\n        assert.deepEqual(value2, [doc2]);\n      });","file":"docstore.test.js","skipped":false,"dir":"test"},{"name":"query returns full op","suites":["orbit-db - Document Store ()","Default index '_id'"],"updatePoint":{"line":167,"column":31,"index":4883},"line":167,"code":"      it('query returns full op', async () => {\n        const doc1 = {\n          _id: 'hello world',\n          doc: 'all the things',\n          views: 17\n        };\n        const doc2 = {\n          _id: 'sup world',\n          doc: 'some of the things',\n          views: 10\n        };\n        const expectedOperation = {\n          op: 'PUT',\n          key: 'sup world',\n          value: {\n            _id: 'sup world',\n            doc: 'some of the things',\n            views: 10\n          }\n        };\n        await db.put(doc1);\n        await db.put(doc2);\n        const res = db.query(e => e.payload.value.views < 17, {\n          fullOp: true\n        })[0];\n        assert.notEqual(res, undefined);\n        assert.notEqual(res.hash, undefined);\n        assert.notEqual(res.id, undefined);\n        assert.deepEqual(res.payload, expectedOperation);\n        assert.notEqual(res.next, undefined);\n        assert.equal(res.next.length, 1);\n        assert.equal(res.refs.length, 0);\n        assert.equal(res.v, 2);\n        assert.notEqual(res.clock, undefined);\n        assert.equal(res.clock.time, 2);\n        assert.notEqual(res.key, undefined);\n        assert.notEqual(res.sig, undefined);\n      });","file":"docstore.test.js","skipped":false,"dir":"test"},{"name":"put","suites":["orbit-db - Document Store ()","Specified index"],"updatePoint":{"line":218,"column":13,"index":6404},"line":218,"code":"      it('put', async () => {\n        const doc = {\n          _id: 'hello world',\n          doc: 'all the things'\n        };\n        await db.put(doc);\n        const value = db.get('all');\n        assert.deepEqual(value, [doc]);\n      });","file":"docstore.test.js","skipped":false,"dir":"test"},{"name":"get - matches specified index","suites":["orbit-db - Document Store ()","Specified index"],"updatePoint":{"line":227,"column":39,"index":6669},"line":227,"code":"      it('get - matches specified index', async () => {\n        const doc1 = {\n          _id: 'hello world',\n          doc: 'all the things'\n        };\n        const doc2 = {\n          _id: 'hello world',\n          doc: 'some things'\n        };\n        await db.put(doc1);\n        await db.put(doc2);\n        const value1 = db.get('all');\n        const value2 = db.get('some');\n        assert.deepEqual(value1, [doc1]);\n        assert.deepEqual(value2, [doc2]);\n      });","file":"docstore.test.js","skipped":false,"dir":"test"},{"name":"removes local database cache","suites":["orbit-db - Drop Database ()","Drop"],"updatePoint":{"line":34,"column":38,"index":1112},"line":34,"code":"      it('removes local database cache', async () => {\n        await db.drop();\n        await db._cache.open();\n        assert.equal(await db._cache.get(db.localHeadsPath), undefined);\n        assert.equal(await db._cache.get(db.remoteHeadsPath), undefined);\n        assert.equal(await db._cache.get(db.snapshotPath), undefined);\n        assert.equal(await db._cache.get(db.queuePath), undefined);\n        assert.equal(await db._cache.get(db.manifestPath), undefined);\n        await db._cache.close();\n      });","file":"drop.test.js","skipped":false,"dir":"test"},{"name":"creates and opens a database","suites":["orbit-db - Log Database ()","Eventlog"],"updatePoint":{"line":28,"column":38,"index":946},"line":28,"code":"      it('creates and opens a database', async () => {\n        const db = await orbitdb1.eventlog('log database');\n        assert.notEqual(db, null);\n        assert.equal(db.type, 'eventlog');\n        assert.equal(db.dbname, 'log database');\n        await db.drop();\n      });","file":"eventlog.test.js","skipped":false,"dir":"test"},{"name":"returns 0 items when it's a fresh database","suites":["orbit-db - Log Database ()","Eventlog"],"updatePoint":{"line":35,"column":53,"index":1238},"line":35,"code":"      it('returns 0 items when it\\'s a fresh database', async () => {\n        const db = await orbitdb1.eventlog('log database');\n        const items = db.iterator({\n          limit: -1\n        }).collect();\n        assert.equal(items.length, 0);\n        await db.drop();\n      });","file":"eventlog.test.js","skipped":false,"dir":"test"},{"name":"returns the added entry's hash, 1 entry","suites":["orbit-db - Log Database ()","Eventlog"],"updatePoint":{"line":43,"column":50,"index":1517},"line":43,"code":"      it('returns the added entry\\'s hash, 1 entry', async () => {\n        const db = await orbitdb1.eventlog('first database');\n        const hash = await db.add('hello1');\n        const items = db.iterator({\n          limit: -1\n        }).collect();\n        assert.notEqual(hash, null);\n        assert.equal(hash, last(items).hash);\n        assert.equal(items.length, 1);\n        await db.drop();\n      });","file":"eventlog.test.js","skipped":false,"dir":"test"},{"name":"returns the added entry's hash, 2 entries","suites":["orbit-db - Log Database ()","Eventlog"],"updatePoint":{"line":54,"column":52,"index":1928},"line":54,"code":"      it('returns the added entry\\'s hash, 2 entries', async () => {\n        const db = await orbitdb1.eventlog('first database');\n        await db.load();\n        await db.add('hello1');\n        const prevHash = db.iterator().collect()[0].hash;\n        const hash = await db.add('hello2');\n        const items = db.iterator({\n          limit: -1\n        }).collect();\n        assert.equal(items.length, 2);\n        assert.notEqual(hash, null);\n        assert.notEqual(hash, prevHash);\n        assert.equal(hash, last(items).hash);\n        await db.drop();\n      });","file":"eventlog.test.js","skipped":false,"dir":"test"},{"name":"adds five items","suites":["orbit-db - Log Database ()","Eventlog"],"updatePoint":{"line":69,"column":25,"index":2468},"line":69,"code":"      it('adds five items', async () => {\n        const db = await orbitdb1.eventlog('second database');\n        await mapSeries([1, 2, 3, 4, 5], i => db.add('hello' + i));\n        const items = db.iterator({\n          limit: -1\n        }).collect();\n        assert.equal(items.length, 5);\n        assert.equal(items[0].payload.value, 'hello1');\n        assert.equal(last(items.map(f => f.payload.value)), 'hello5');\n        await db.drop();\n      });","file":"eventlog.test.js","skipped":false,"dir":"test"},{"name":"adds an item that is > 256 bytes","suites":["orbit-db - Log Database ()","Eventlog"],"updatePoint":{"line":80,"column":42,"index":2937},"line":80,"code":"      it('adds an item that is > 256 bytes', async () => {\n        const db = await orbitdb1.eventlog('third database');\n        let msg = Buffer.alloc(1024);\n        msg.fill('a');\n        const hash = await db.add(msg.toString());\n        assert.notEqual(hash, null);\n        assert.equal(hash.startsWith('zd'), true);\n        assert.equal(hash.length, 49);\n        await db.drop();\n      });","file":"eventlog.test.js","skipped":false,"dir":"test"},{"name":"returns an iterator","suites":["orbit-db - Log Database ()","Iterator","Defaults"],"updatePoint":{"line":101,"column":31,"index":3664},"line":101,"code":"        it('returns an iterator', () => {\n          const iter = db.iterator();\n          const next = iter.next().value;\n          assert.notEqual(iter, null);\n          assert.notEqual(next, null);\n        });","file":"eventlog.test.js","skipped":false,"dir":"test"},{"name":"returns an item with the correct structure","suites":["orbit-db - Log Database ()","Iterator","Defaults"],"updatePoint":{"line":107,"column":54,"index":3899},"line":107,"code":"        it('returns an item with the correct structure', () => {\n          const iter = db.iterator();\n          const next = iter.next().value;\n          assert.notEqual(next, null);\n          assert.equal(next.hash.startsWith('zd'), true);\n          assert.equal(next.payload.key, null);\n          assert.equal(next.payload.value, 'hello4');\n        });","file":"eventlog.test.js","skipped":false,"dir":"test"},{"name":"implements Iterator interface","suites":["orbit-db - Log Database ()","Iterator","Defaults"],"updatePoint":{"line":115,"column":41,"index":4242},"line":115,"code":"        it('implements Iterator interface', () => {\n          const iter = db.iterator({\n            limit: -1\n          });\n          let messages = [];\n          for (let i of iter) messages.push(i.key);\n          assert.equal(messages.length, hashes.length);\n        });","file":"eventlog.test.js","skipped":false,"dir":"test"},{"name":"returns 1 item as default","suites":["orbit-db - Log Database ()","Iterator","Defaults"],"updatePoint":{"line":123,"column":37,"index":4512},"line":123,"code":"        it('returns 1 item as default', () => {\n          const iter = db.iterator();\n          const first = iter.next().value;\n          const second = iter.next().value;\n          assert.equal(first.hash, hashes[hashes.length - 1]);\n          assert.equal(second, null);\n          assert.equal(first.payload.value, 'hello4');\n        });","file":"eventlog.test.js","skipped":false,"dir":"test"},{"name":"returns items in the correct order","suites":["orbit-db - Log Database ()","Iterator","Defaults"],"updatePoint":{"line":131,"column":46,"index":4862},"line":131,"code":"        it('returns items in the correct order', () => {\n          const amount = 3;\n          const iter = db.iterator({\n            limit: amount\n          });\n          let i = hashes.length - amount;\n          for (let item of iter) {\n            assert.equal(item.payload.value, 'hello' + i);\n            i++;\n          }\n        });","file":"eventlog.test.js","skipped":false,"dir":"test"},{"name":"returns all items","suites":["orbit-db - Log Database ()","Iterator","Collect"],"updatePoint":{"line":144,"column":29,"index":5234},"line":144,"code":"        it('returns all items', () => {\n          const messages = db.iterator({\n            limit: -1\n          }).collect();\n          assert.equal(messages.length, hashes.length);\n          assert.equal(messages[0].payload.value, 'hello0');\n          assert.equal(messages[messages.length - 1].payload.value, 'hello4');\n        });","file":"eventlog.test.js","skipped":false,"dir":"test"},{"name":"returns 1 item","suites":["orbit-db - Log Database ()","Iterator","Collect"],"updatePoint":{"line":152,"column":26,"index":5566},"line":152,"code":"        it('returns 1 item', () => {\n          const messages = db.iterator().collect();\n          assert.equal(messages.length, 1);\n        });","file":"eventlog.test.js","skipped":false,"dir":"test"},{"name":"returns 3 items","suites":["orbit-db - Log Database ()","Iterator","Collect"],"updatePoint":{"line":156,"column":27,"index":5712},"line":156,"code":"        it('returns 3 items', () => {\n          const messages = db.iterator({\n            limit: 3\n          }).collect();\n          assert.equal(messages.length, 3);\n        });","file":"eventlog.test.js","skipped":false,"dir":"test"},{"name":"returns 1 item when limit is 0","suites":["orbit-db - Log Database ()","Iterator","Options: limit"],"updatePoint":{"line":164,"column":42,"index":5964},"line":164,"code":"        it('returns 1 item when limit is 0', () => {\n          const iter = db.iterator({\n            limit: 0\n          });\n          const first = iter.next().value;\n          const second = iter.next().value;\n          assert.equal(first.hash, last(hashes));\n          assert.equal(second, null);\n        });","file":"eventlog.test.js","skipped":false,"dir":"test"},{"name":"returns 1 item when limit is 1","suites":["orbit-db - Log Database ()","Iterator","Options: limit"],"updatePoint":{"line":173,"column":42,"index":6276},"line":173,"code":"        it('returns 1 item when limit is 1', () => {\n          const iter = db.iterator({\n            limit: 1\n          });\n          const first = iter.next().value;\n          const second = iter.next().value;\n          assert.equal(first.hash, last(hashes));\n          assert.equal(second, null);\n        });","file":"eventlog.test.js","skipped":false,"dir":"test"},{"name":"returns 3 items","suites":["orbit-db - Log Database ()","Iterator","Options: limit"],"updatePoint":{"line":182,"column":27,"index":6573},"line":182,"code":"        it('returns 3 items', () => {\n          const iter = db.iterator({\n            limit: 3\n          });\n          const first = iter.next().value;\n          const second = iter.next().value;\n          const third = iter.next().value;\n          const fourth = iter.next().value;\n          assert.equal(first.hash, hashes[hashes.length - 3]);\n          assert.equal(second.hash, hashes[hashes.length - 2]);\n          assert.equal(third.hash, hashes[hashes.length - 1]);\n          assert.equal(fourth, null);\n        });","file":"eventlog.test.js","skipped":false,"dir":"test"},{"name":"returns all items","suites":["orbit-db - Log Database ()","Iterator","Options: limit"],"updatePoint":{"line":195,"column":29,"index":7099},"line":195,"code":"        it('returns all items', () => {\n          const messages = db.iterator({\n            limit: -1\n          }).collect().map(e => e.hash);\n          messages.reverse();\n          assert.equal(messages.length, hashes.length);\n          assert.equal(messages[0], hashes[hashes.length - 1]);\n        });","file":"eventlog.test.js","skipped":false,"dir":"test"},{"name":"returns all items when limit is bigger than -1","suites":["orbit-db - Log Database ()","Iterator","Options: limit"],"updatePoint":{"line":203,"column":58,"index":7434},"line":203,"code":"        it('returns all items when limit is bigger than -1', () => {\n          const messages = db.iterator({\n            limit: -300\n          }).collect().map(e => e.hash);\n          assert.equal(messages.length, hashes.length);\n          assert.equal(messages[0], hashes[0]);\n        });","file":"eventlog.test.js","skipped":false,"dir":"test"},{"name":"returns all items when limit is bigger than number of items","suites":["orbit-db - Log Database ()","Iterator","Options: limit"],"updatePoint":{"line":210,"column":71,"index":7738},"line":210,"code":"        it('returns all items when limit is bigger than number of items', () => {\n          const messages = db.iterator({\n            limit: 300\n          }).collect().map(e => e.hash);\n          assert.equal(messages.length, hashes.length);\n          assert.equal(messages[0], hashes[0]);\n        });","file":"eventlog.test.js","skipped":false,"dir":"test"},{"name":"returns 1 item when gte is the head","suites":["orbit-db - Log Database ()","Iterator","Option: ranges","gt & gte"],"updatePoint":{"line":220,"column":49,"index":8119},"line":220,"code":"          it('returns 1 item when gte is the head', () => {\n            const messages = db.iterator({\n              gte: last(hashes),\n              limit: -1\n            }).collect().map(e => e.hash);\n            assert.equal(messages.length, 1);\n            assert.equal(messages[0], last(hashes));\n          });","file":"eventlog.test.js","skipped":false,"dir":"test"},{"name":"returns 0 items when gt is the head","suites":["orbit-db - Log Database ()","Iterator","Option: ranges","gt & gte"],"updatePoint":{"line":228,"column":49,"index":8435},"line":228,"code":"          it('returns 0 items when gt is the head', () => {\n            const messages = db.iterator({\n              gt: last(hashes)\n            }).collect();\n            assert.equal(messages.length, 0);\n          });","file":"eventlog.test.js","skipped":false,"dir":"test"},{"name":"returns 2 item when gte is defined","suites":["orbit-db - Log Database ()","Iterator","Option: ranges","gt & gte"],"updatePoint":{"line":234,"column":48,"index":8654},"line":234,"code":"          it('returns 2 item when gte is defined', () => {\n            const gte = hashes[hashes.length - 2];\n            const messages = db.iterator({\n              gte: gte,\n              limit: -1\n            }).collect().map(e => e.hash);\n            assert.equal(messages.length, 2);\n            assert.equal(messages[0], hashes[hashes.length - 2]);\n            assert.equal(messages[1], hashes[hashes.length - 1]);\n          });","file":"eventlog.test.js","skipped":false,"dir":"test"},{"name":"returns all items when gte is the root item","suites":["orbit-db - Log Database ()","Iterator","Option: ranges","gt & gte"],"updatePoint":{"line":244,"column":57,"index":9099},"line":244,"code":"          it('returns all items when gte is the root item', () => {\n            const messages = db.iterator({\n              gte: hashes[0],\n              limit: -1\n            }).collect().map(e => e.hash);\n            assert.equal(messages.length, hashes.length);\n            assert.equal(messages[0], hashes[0]);\n            assert.equal(messages[messages.length - 1], last(hashes));\n          });","file":"eventlog.test.js","skipped":false,"dir":"test"},{"name":"returns items when gt is the root item","suites":["orbit-db - Log Database ()","Iterator","Option: ranges","gt & gte"],"updatePoint":{"line":253,"column":52,"index":9495},"line":253,"code":"          it('returns items when gt is the root item', () => {\n            const messages = db.iterator({\n              gt: hashes[0],\n              limit: -1\n            }).collect().map(e => e.hash);\n            assert.equal(messages.length, itemCount - 1);\n            assert.equal(messages[0], hashes[1]);\n            assert.equal(messages[3], last(hashes));\n          });","file":"eventlog.test.js","skipped":false,"dir":"test"},{"name":"returns items when gt is defined","suites":["orbit-db - Log Database ()","Iterator","Option: ranges","gt & gte"],"updatePoint":{"line":262,"column":46,"index":9866},"line":262,"code":"          it('returns items when gt is defined', () => {\n            const messages = db.iterator({\n              limit: -1\n            }).collect().map(e => e.hash);\n            const gt = messages[2];\n            const messages2 = db.iterator({\n              gt: gt,\n              limit: 100\n            }).collect().map(e => e.hash);\n            assert.equal(messages2.length, 2);\n            assert.equal(messages2[0], messages[messages.length - 2]);\n            assert.equal(messages2[1], messages[messages.length - 1]);\n          });","file":"eventlog.test.js","skipped":false,"dir":"test"},{"name":"returns one item after head when lt is the head","suites":["orbit-db - Log Database ()","Iterator","Option: ranges","lt & lte"],"updatePoint":{"line":277,"column":61,"index":10476},"line":277,"code":"          it('returns one item after head when lt is the head', () => {\n            const messages = db.iterator({\n              lt: last(hashes)\n            }).collect().map(e => e.hash);\n            assert.equal(messages.length, 1);\n            assert.equal(messages[0], hashes[hashes.length - 2]);\n          });","file":"eventlog.test.js","skipped":false,"dir":"test"},{"name":"returns all items when lt is head and limit is -1","suites":["orbit-db - Log Database ()","Iterator","Option: ranges","lt & lte"],"updatePoint":{"line":284,"column":63,"index":10793},"line":284,"code":"          it('returns all items when lt is head and limit is -1', () => {\n            const messages = db.iterator({\n              lt: last(hashes),\n              limit: -1\n            }).collect().map(e => e.hash);\n            assert.equal(messages.length, hashes.length - 1);\n            assert.equal(messages[0], hashes[0]);\n            assert.equal(messages[messages.length - 1], hashes[hashes.length - 2]);\n          });","file":"eventlog.test.js","skipped":false,"dir":"test"},{"name":"returns 3 items when lt is head and limit is 3","suites":["orbit-db - Log Database ()","Iterator","Option: ranges","lt & lte"],"updatePoint":{"line":293,"column":60,"index":11216},"line":293,"code":"          it('returns 3 items when lt is head and limit is 3', () => {\n            const messages = db.iterator({\n              lt: last(hashes),\n              limit: 3\n            }).collect().map(e => e.hash);\n            assert.equal(messages.length, 3);\n            assert.equal(messages[0], hashes[hashes.length - 4]);\n            assert.equal(messages[2], hashes[hashes.length - 2]);\n          });","file":"eventlog.test.js","skipped":false,"dir":"test"},{"name":"returns null when lt is the root item","suites":["orbit-db - Log Database ()","Iterator","Option: ranges","lt & lte"],"updatePoint":{"line":302,"column":51,"index":11611},"line":302,"code":"          it('returns null when lt is the root item', () => {\n            const messages = db.iterator({\n              lt: hashes[0]\n            }).collect();\n            assert.equal(messages.length, 0);\n          });","file":"eventlog.test.js","skipped":false,"dir":"test"},{"name":"returns one item when lte is the root item","suites":["orbit-db - Log Database ()","Iterator","Option: ranges","lt & lte"],"updatePoint":{"line":308,"column":56,"index":11835},"line":308,"code":"          it('returns one item when lte is the root item', () => {\n            const messages = db.iterator({\n              lte: hashes[0]\n            }).collect().map(e => e.hash);\n            assert.equal(messages.length, 1);\n            assert.equal(messages[0], hashes[0]);\n          });","file":"eventlog.test.js","skipped":false,"dir":"test"},{"name":"returns all items when lte is the head","suites":["orbit-db - Log Database ()","Iterator","Option: ranges","lt & lte"],"updatePoint":{"line":315,"column":52,"index":12123},"line":315,"code":"          it('returns all items when lte is the head', () => {\n            const messages = db.iterator({\n              lte: last(hashes),\n              limit: -1\n            }).collect().map(e => e.hash);\n            assert.equal(messages.length, itemCount);\n            assert.equal(messages[0], hashes[0]);\n            assert.equal(messages[4], last(hashes));\n          });","file":"eventlog.test.js","skipped":false,"dir":"test"},{"name":"returns 3 items when lte is the head","suites":["orbit-db - Log Database ()","Iterator","Option: ranges","lt & lte"],"updatePoint":{"line":324,"column":50,"index":12498},"line":324,"code":"          it('returns 3 items when lte is the head', () => {\n            const messages = db.iterator({\n              lte: last(hashes),\n              limit: 3\n            }).collect().map(e => e.hash);\n            assert.equal(messages.length, 3);\n            assert.equal(messages[0], hashes[hashes.length - 3]);\n            assert.equal(messages[1], hashes[hashes.length - 2]);\n            assert.equal(messages[2], last(hashes));\n          });","file":"eventlog.test.js","skipped":false,"dir":"test"},{"name":"add 10 items and verify they are in the index","suites":["orbit-db - Feed Load Amount ()","Feed Load Amount"],"updatePoint":{"line":27,"column":55,"index":951},"line":27,"code":"      it('add 10 items and verify they are in the index', async () => {\n        db = await orbitdb1.feed('feed database');\n\n        //All tests should retrieve these 10 items.\n        for (var i = 0; i < 10; i++) {\n          await db.add({\n            content: (i + 10).toString()\n          });\n        }\n        assert.equal(Object.keys(db.index).length, 10);\n      });","file":"feed-load.test.js","skipped":false,"dir":"test"},{"name":"reopen store and load 10 items","suites":["orbit-db - Feed Load Amount ()","Feed Load Amount"],"updatePoint":{"line":38,"column":40,"index":1307},"line":38,"code":"      it('reopen store and load 10 items', async () => {\n        address = db.address.toString();\n        await db.close();\n        db = await orbitdb1.open(address);\n\n        //Load 10 items\n        await db.load(10);\n        assert.equal(Object.keys(db.index).length, 10);\n      });","file":"feed-load.test.js","skipped":false,"dir":"test"},{"name":"reopen store and load 1 item more than exists","suites":["orbit-db - Feed Load Amount ()","Feed Load Amount"],"updatePoint":{"line":47,"column":55,"index":1607},"line":47,"code":"      it('reopen store and load 1 item more than exists', async () => {\n        await db.close();\n        db = await orbitdb1.open(address);\n\n        //Load 11 items\n        await db.load(11);\n        assert.equal(Object.keys(db.index).length, 10);\n      });","file":"feed-load.test.js","skipped":false,"dir":"test"},{"name":"reopen store and load 5 item more than exists","suites":["orbit-db - Feed Load Amount ()","Feed Load Amount"],"updatePoint":{"line":55,"column":55,"index":1866},"line":55,"code":"      it('reopen store and load 5 item more than exists', async () => {\n        await db.close();\n        db = await orbitdb1.open(address);\n\n        //Load 15 items\n        await db.load(15);\n        assert.equal(Object.keys(db.index).length, 10);\n      });","file":"feed-load.test.js","skipped":false,"dir":"test"},{"name":"reopen store and load 20 items more than exists","suites":["orbit-db - Feed Load Amount ()","Feed Load Amount"],"updatePoint":{"line":63,"column":57,"index":2127},"line":63,"code":"      it('reopen store and load 20 items more than exists', async () => {\n        await db.close();\n        db = await orbitdb1.open(address);\n\n        //Load 30 items\n        await db.load(30);\n        assert.equal(Object.keys(db.index).length, 10);\n      });","file":"feed-load.test.js","skipped":false,"dir":"test"},{"name":"creates and opens a database","suites":["orbit-db - Feed Database ()","Feed"],"updatePoint":{"line":28,"column":38,"index":948},"line":28,"code":"      it('creates and opens a database', async () => {\n        const db = await orbitdb1.feed('feed database');\n        assert.notEqual(db, null);\n        assert.equal(db.type, 'feed');\n        assert.equal(db.dbname, 'feed database');\n        await db.drop();\n      });","file":"feed.test.js","skipped":false,"dir":"test"},{"name":"returns 0 items when it's a fresh database","suites":["orbit-db - Feed Database ()","Feed"],"updatePoint":{"line":35,"column":53,"index":1234},"line":35,"code":"      it('returns 0 items when it\\'s a fresh database', async () => {\n        const db = await orbitdb1.feed('feed database');\n        const items = db.iterator({\n          limit: -1\n        }).collect();\n        assert.equal(items.length, 0);\n        await db.drop();\n      });","file":"feed.test.js","skipped":false,"dir":"test"},{"name":"returns the added entry's hash, 1 entry","suites":["orbit-db - Feed Database ()","Feed"],"updatePoint":{"line":43,"column":50,"index":1510},"line":43,"code":"      it('returns the added entry\\'s hash, 1 entry', async () => {\n        const db = await orbitdb1.feed('first');\n        address = db.address.toString();\n        const hash = await db.add('hello1');\n        const items = db.iterator({\n          limit: -1\n        }).collect();\n        assert.notEqual(hash, null);\n        assert.equal(hash, last(items).hash);\n        assert.equal(items.length, 1);\n        await db.drop();\n      });","file":"feed.test.js","skipped":false,"dir":"test"},{"name":"returns the added entry's hash, 2 entries","suites":["orbit-db - Feed Database ()","Feed"],"updatePoint":{"line":55,"column":52,"index":1949},"line":55,"code":"      it('returns the added entry\\'s hash, 2 entries', async () => {\n        const db = await orbitdb1.feed(address);\n        await db.load();\n        await db.add('hello1');\n        const prevHash = db.iterator().collect()[0].hash;\n        const hash = await db.add('hello2');\n        const items = db.iterator({\n          limit: -1\n        }).collect();\n        assert.equal(items.length, 2);\n        assert.notEqual(hash, null);\n        assert.notEqual(hash, prevHash);\n        assert.equal(hash, last(items).hash);\n        await db.drop();\n      });","file":"feed.test.js","skipped":false,"dir":"test"},{"name":"adds five items","suites":["orbit-db - Feed Database ()","Feed"],"updatePoint":{"line":70,"column":25,"index":2476},"line":70,"code":"      it('adds five items', async () => {\n        const db = await orbitdb1.feed('second');\n        await mapSeries([1, 2, 3, 4, 5], i => db.add('hello' + i));\n        const items = db.iterator({\n          limit: -1\n        }).collect();\n        assert.equal(items.length, 5);\n        assert.equal(items[0].payload.value, 'hello1');\n        assert.equal(items[items.length - 1].payload.value, 'hello5');\n        await db.drop();\n      });","file":"feed.test.js","skipped":false,"dir":"test"},{"name":"adds an item that is > 256 bytes","suites":["orbit-db - Feed Database ()","Feed"],"updatePoint":{"line":81,"column":42,"index":2932},"line":81,"code":"      it('adds an item that is > 256 bytes', async () => {\n        const db = await orbitdb1.feed('third');\n        let msg = Buffer.alloc(1024);\n        msg.fill('a');\n        const hash = await db.add(msg.toString());\n        assert.notEqual(hash, null);\n        assert.equal(hash.startsWith('zd'), true);\n        assert.equal(hash.length, 49);\n        await db.drop();\n      });","file":"feed.test.js","skipped":false,"dir":"test"},{"name":"deletes an item when only one item in the database","suites":["orbit-db - Feed Database ()","Feed"],"updatePoint":{"line":91,"column":60,"index":3332},"line":91,"code":"      it('deletes an item when only one item in the database', async () => {\n        const db = await orbitdb1.feed('fourth');\n        const hash = await db.add('hello3');\n        const delopHash = await db.remove(hash);\n        const items = db.iterator().collect();\n        assert.equal(delopHash.startsWith('zd'), true);\n        assert.equal(items.length, 0);\n        await db.drop();\n      });","file":"feed.test.js","skipped":false,"dir":"test"},{"name":"deletes an item when two items in the database","suites":["orbit-db - Feed Database ()","Feed"],"updatePoint":{"line":100,"column":56,"index":3726},"line":100,"code":"      it('deletes an item when two items in the database', async () => {\n        const db = await orbitdb1.feed('fifth');\n        await db.add('hello1');\n        const hash = await db.add('hello2');\n        await db.remove(hash);\n        const items = db.iterator({\n          limit: -1\n        }).collect();\n        assert.equal(items.length, 1);\n        assert.equal(items[0].payload.value, 'hello1');\n        await db.drop();\n      });","file":"feed.test.js","skipped":false,"dir":"test"},{"name":"deletes an item between adds","suites":["orbit-db - Feed Database ()","Feed"],"updatePoint":{"line":112,"column":38,"index":4146},"line":112,"code":"      it('deletes an item between adds', async () => {\n        const db = await orbitdb1.feed('sixth');\n        const hash = await db.add('hello1');\n        await db.add('hello2');\n        await db.remove(hash);\n        await db.add('hello3');\n        const items = db.iterator({\n          limit: -1\n        }).collect();\n        assert.equal(items.length, 2);\n        const firstItem = items[0];\n        const secondItem = items[1];\n        assert.equal(firstItem.hash.startsWith('zd'), true);\n        assert.equal(firstItem.payload.key, null);\n        assert.equal(firstItem.payload.value, 'hello2');\n        assert.equal(secondItem.payload.value, 'hello3');\n        await db.drop();\n      });","file":"feed.test.js","skipped":false,"dir":"test"},{"name":"returns an iterator","suites":["orbit-db - Feed Database ()","Iterator","Defaults"],"updatePoint":{"line":141,"column":31,"index":5173},"line":141,"code":"        it('returns an iterator', () => {\n          const iter = db.iterator();\n          const next = iter.next().value;\n          assert.notEqual(iter, null);\n          assert.notEqual(next, null);\n        });","file":"feed.test.js","skipped":false,"dir":"test"},{"name":"returns an item with the correct structure","suites":["orbit-db - Feed Database ()","Iterator","Defaults"],"updatePoint":{"line":147,"column":54,"index":5408},"line":147,"code":"        it('returns an item with the correct structure', () => {\n          const iter = db.iterator();\n          const next = iter.next().value;\n          assert.notEqual(next, null);\n          assert.equal(next.hash.startsWith('zd'), true);\n          assert.equal(next.payload.key, null);\n          assert.equal(next.payload.value, 'hello4');\n        });","file":"feed.test.js","skipped":false,"dir":"test"},{"name":"implements Iterator interface","suites":["orbit-db - Feed Database ()","Iterator","Defaults"],"updatePoint":{"line":155,"column":41,"index":5751},"line":155,"code":"        it('implements Iterator interface', () => {\n          const iter = db.iterator({\n            limit: -1\n          });\n          let messages = [];\n          for (let i of iter) messages.push(i.key);\n          assert.equal(messages.length, hashes.length);\n        });","file":"feed.test.js","skipped":false,"dir":"test"},{"name":"returns 1 item as default","suites":["orbit-db - Feed Database ()","Iterator","Defaults"],"updatePoint":{"line":163,"column":37,"index":6021},"line":163,"code":"        it('returns 1 item as default', () => {\n          const iter = db.iterator();\n          const first = iter.next().value;\n          const second = iter.next().value;\n          assert.equal(first.hash, hashes[hashes.length - 1]);\n          assert.equal(second, null);\n          assert.equal(first.payload.value, 'hello4');\n        });","file":"feed.test.js","skipped":false,"dir":"test"},{"name":"returns items in the correct order","suites":["orbit-db - Feed Database ()","Iterator","Defaults"],"updatePoint":{"line":171,"column":46,"index":6371},"line":171,"code":"        it('returns items in the correct order', () => {\n          const amount = 3;\n          const iter = db.iterator({\n            limit: amount\n          });\n          let i = hashes.length - amount;\n          for (let item of iter) {\n            assert.equal(item.payload.value, 'hello' + i);\n            i++;\n          }\n        });","file":"feed.test.js","skipped":false,"dir":"test"},{"name":"returns all items","suites":["orbit-db - Feed Database ()","Iterator","Collect"],"updatePoint":{"line":184,"column":29,"index":6743},"line":184,"code":"        it('returns all items', () => {\n          const messages = db.iterator({\n            limit: -1\n          }).collect();\n          assert.equal(messages.length, hashes.length);\n          assert.equal(messages[0].payload.value, 'hello0');\n          assert.equal(messages[messages.length - 1].payload.value, 'hello4');\n        });","file":"feed.test.js","skipped":false,"dir":"test"},{"name":"returns 1 item","suites":["orbit-db - Feed Database ()","Iterator","Collect"],"updatePoint":{"line":192,"column":26,"index":7075},"line":192,"code":"        it('returns 1 item', () => {\n          const messages = db.iterator().collect();\n          assert.equal(messages.length, 1);\n        });","file":"feed.test.js","skipped":false,"dir":"test"},{"name":"returns 3 items","suites":["orbit-db - Feed Database ()","Iterator","Collect"],"updatePoint":{"line":196,"column":27,"index":7221},"line":196,"code":"        it('returns 3 items', () => {\n          const messages = db.iterator({\n            limit: 3\n          }).collect();\n          assert.equal(messages.length, 3);\n        });","file":"feed.test.js","skipped":false,"dir":"test"},{"name":"returns 1 item when limit is 0","suites":["orbit-db - Feed Database ()","Iterator","Options: limit"],"updatePoint":{"line":204,"column":42,"index":7473},"line":204,"code":"        it('returns 1 item when limit is 0', () => {\n          const iter = db.iterator({\n            limit: 0\n          });\n          const first = iter.next().value;\n          const second = iter.next().value;\n          assert.equal(first.hash, last(hashes));\n          assert.equal(second, null);\n        });","file":"feed.test.js","skipped":false,"dir":"test"},{"name":"returns 1 item when limit is 1","suites":["orbit-db - Feed Database ()","Iterator","Options: limit"],"updatePoint":{"line":213,"column":42,"index":7785},"line":213,"code":"        it('returns 1 item when limit is 1', () => {\n          const iter = db.iterator({\n            limit: 1\n          });\n          const first = iter.next().value;\n          const second = iter.next().value;\n          assert.equal(first.hash, last(hashes));\n          assert.equal(second, null);\n        });","file":"feed.test.js","skipped":false,"dir":"test"},{"name":"returns 3 items","suites":["orbit-db - Feed Database ()","Iterator","Options: limit"],"updatePoint":{"line":222,"column":27,"index":8082},"line":222,"code":"        it('returns 3 items', () => {\n          const iter = db.iterator({\n            limit: 3\n          });\n          const first = iter.next().value;\n          const second = iter.next().value;\n          const third = iter.next().value;\n          const fourth = iter.next().value;\n          assert.equal(first.hash, hashes[hashes.length - 3]);\n          assert.equal(second.hash, hashes[hashes.length - 2]);\n          assert.equal(third.hash, hashes[hashes.length - 1]);\n          assert.equal(fourth, null);\n        });","file":"feed.test.js","skipped":false,"dir":"test"},{"name":"returns all items","suites":["orbit-db - Feed Database ()","Iterator","Options: limit"],"updatePoint":{"line":235,"column":29,"index":8608},"line":235,"code":"        it('returns all items', () => {\n          const messages = db.iterator({\n            limit: -1\n          }).collect().map(e => e.hash);\n          messages.reverse();\n          assert.equal(messages.length, hashes.length);\n          assert.equal(messages[0], hashes[hashes.length - 1]);\n        });","file":"feed.test.js","skipped":false,"dir":"test"},{"name":"returns all items when limit is bigger than -1","suites":["orbit-db - Feed Database ()","Iterator","Options: limit"],"updatePoint":{"line":243,"column":58,"index":8943},"line":243,"code":"        it('returns all items when limit is bigger than -1', () => {\n          const messages = db.iterator({\n            limit: -300\n          }).collect().map(e => e.hash);\n          assert.equal(messages.length, hashes.length);\n          assert.equal(messages[0], hashes[0]);\n        });","file":"feed.test.js","skipped":false,"dir":"test"},{"name":"returns all items when limit is bigger than number of items","suites":["orbit-db - Feed Database ()","Iterator","Options: limit"],"updatePoint":{"line":250,"column":71,"index":9247},"line":250,"code":"        it('returns all items when limit is bigger than number of items', () => {\n          const messages = db.iterator({\n            limit: 300\n          }).collect().map(e => e.hash);\n          assert.equal(messages.length, hashes.length);\n          assert.equal(messages[0], hashes[0]);\n        });","file":"feed.test.js","skipped":false,"dir":"test"},{"name":"returns 1 item when gte is the head","suites":["orbit-db - Feed Database ()","Iterator","Option: ranges","gt & gte"],"updatePoint":{"line":260,"column":49,"index":9628},"line":260,"code":"          it('returns 1 item when gte is the head', () => {\n            const messages = db.iterator({\n              gte: last(hashes),\n              limit: -1\n            }).collect().map(e => e.hash);\n            assert.equal(messages.length, 1);\n            assert.equal(messages[0], last(hashes));\n          });","file":"feed.test.js","skipped":false,"dir":"test"},{"name":"returns 0 items when gt is the head","suites":["orbit-db - Feed Database ()","Iterator","Option: ranges","gt & gte"],"updatePoint":{"line":268,"column":49,"index":9944},"line":268,"code":"          it('returns 0 items when gt is the head', () => {\n            const messages = db.iterator({\n              gt: last(hashes)\n            }).collect();\n            assert.equal(messages.length, 0);\n          });","file":"feed.test.js","skipped":false,"dir":"test"},{"name":"returns 2 item when gte is defined","suites":["orbit-db - Feed Database ()","Iterator","Option: ranges","gt & gte"],"updatePoint":{"line":274,"column":48,"index":10163},"line":274,"code":"          it('returns 2 item when gte is defined', () => {\n            const gte = hashes[hashes.length - 2];\n            const messages = db.iterator({\n              gte: gte,\n              limit: -1\n            }).collect().map(e => e.hash);\n            assert.equal(messages.length, 2);\n            assert.equal(messages[0], hashes[hashes.length - 2]);\n            assert.equal(messages[1], hashes[hashes.length - 1]);\n          });","file":"feed.test.js","skipped":false,"dir":"test"},{"name":"returns all items when gte is the root item","suites":["orbit-db - Feed Database ()","Iterator","Option: ranges","gt & gte"],"updatePoint":{"line":284,"column":57,"index":10608},"line":284,"code":"          it('returns all items when gte is the root item', () => {\n            const messages = db.iterator({\n              gte: hashes[0],\n              limit: -1\n            }).collect().map(e => e.hash);\n            assert.equal(messages.length, hashes.length);\n            assert.equal(messages[0], hashes[0]);\n            assert.equal(messages[messages.length - 1], last(hashes));\n          });","file":"feed.test.js","skipped":false,"dir":"test"},{"name":"returns items when gt is the root item","suites":["orbit-db - Feed Database ()","Iterator","Option: ranges","gt & gte"],"updatePoint":{"line":293,"column":52,"index":11004},"line":293,"code":"          it('returns items when gt is the root item', () => {\n            const messages = db.iterator({\n              gt: hashes[0],\n              limit: -1\n            }).collect().map(e => e.hash);\n            assert.equal(messages.length, itemCount - 1);\n            assert.equal(messages[0], hashes[1]);\n            assert.equal(messages[3], last(hashes));\n          });","file":"feed.test.js","skipped":false,"dir":"test"},{"name":"returns items when gt is defined","suites":["orbit-db - Feed Database ()","Iterator","Option: ranges","gt & gte"],"updatePoint":{"line":302,"column":46,"index":11375},"line":302,"code":"          it('returns items when gt is defined', () => {\n            const messages = db.iterator({\n              limit: -1\n            }).collect().map(e => e.hash);\n            const gt = messages[2];\n            const messages2 = db.iterator({\n              gt: gt,\n              limit: 100\n            }).collect().map(e => e.hash);\n            assert.equal(messages2.length, 2);\n            assert.equal(messages2[0], messages[messages.length - 2]);\n            assert.equal(messages2[1], messages[messages.length - 1]);\n          });","file":"feed.test.js","skipped":false,"dir":"test"},{"name":"returns one item after head when lt is the head","suites":["orbit-db - Feed Database ()","Iterator","Option: ranges","lt & lte"],"updatePoint":{"line":317,"column":61,"index":11985},"line":317,"code":"          it('returns one item after head when lt is the head', () => {\n            const messages = db.iterator({\n              lt: last(hashes)\n            }).collect().map(e => e.hash);\n            assert.equal(messages.length, 1);\n            assert.equal(messages[0], hashes[hashes.length - 2]);\n          });","file":"feed.test.js","skipped":false,"dir":"test"},{"name":"returns all items when lt is head and limit is -1","suites":["orbit-db - Feed Database ()","Iterator","Option: ranges","lt & lte"],"updatePoint":{"line":324,"column":63,"index":12302},"line":324,"code":"          it('returns all items when lt is head and limit is -1', () => {\n            const messages = db.iterator({\n              lt: last(hashes),\n              limit: -1\n            }).collect().map(e => e.hash);\n            assert.equal(messages.length, hashes.length - 1);\n            assert.equal(messages[0], hashes[0]);\n            assert.equal(messages[messages.length - 1], hashes[hashes.length - 2]);\n          });","file":"feed.test.js","skipped":false,"dir":"test"},{"name":"returns 3 items when lt is head and limit is 3","suites":["orbit-db - Feed Database ()","Iterator","Option: ranges","lt & lte"],"updatePoint":{"line":333,"column":60,"index":12725},"line":333,"code":"          it('returns 3 items when lt is head and limit is 3', () => {\n            const messages = db.iterator({\n              lt: last(hashes),\n              limit: 3\n            }).collect().map(e => e.hash);\n            assert.equal(messages.length, 3);\n            assert.equal(messages[0], hashes[hashes.length - 4]);\n            assert.equal(messages[2], hashes[hashes.length - 2]);\n          });","file":"feed.test.js","skipped":false,"dir":"test"},{"name":"returns null when lt is the root item","suites":["orbit-db - Feed Database ()","Iterator","Option: ranges","lt & lte"],"updatePoint":{"line":342,"column":51,"index":13120},"line":342,"code":"          it('returns null when lt is the root item', () => {\n            const messages = db.iterator({\n              lt: hashes[0]\n            }).collect();\n            assert.equal(messages.length, 0);\n          });","file":"feed.test.js","skipped":false,"dir":"test"},{"name":"returns one item when lte is the root item","suites":["orbit-db - Feed Database ()","Iterator","Option: ranges","lt & lte"],"updatePoint":{"line":348,"column":56,"index":13344},"line":348,"code":"          it('returns one item when lte is the root item', () => {\n            const messages = db.iterator({\n              lte: hashes[0]\n            }).collect().map(e => e.hash);\n            assert.equal(messages.length, 1);\n            assert.equal(messages[0], hashes[0]);\n          });","file":"feed.test.js","skipped":false,"dir":"test"},{"name":"returns all items when lte is the head","suites":["orbit-db - Feed Database ()","Iterator","Option: ranges","lt & lte"],"updatePoint":{"line":355,"column":52,"index":13632},"line":355,"code":"          it('returns all items when lte is the head', () => {\n            const messages = db.iterator({\n              lte: last(hashes),\n              limit: -1\n            }).collect().map(e => e.hash);\n            assert.equal(messages.length, itemCount);\n            assert.equal(messages[0], hashes[0]);\n            assert.equal(messages[4], last(hashes));\n          });","file":"feed.test.js","skipped":false,"dir":"test"},{"name":"returns 3 items when lte is the head","suites":["orbit-db - Feed Database ()","Iterator","Option: ranges","lt & lte"],"updatePoint":{"line":364,"column":50,"index":14007},"line":364,"code":"          it('returns 3 items when lte is the head', () => {\n            const messages = db.iterator({\n              lte: last(hashes),\n              limit: 3\n            }).collect().map(e => e.hash);\n            assert.equal(messages.length, 3);\n            assert.equal(messages[0], hashes[hashes.length - 3]);\n            assert.equal(messages[1], hashes[hashes.length - 2]);\n            assert.equal(messages[2], last(hashes));\n          });","file":"feed.test.js","skipped":false,"dir":"test"},{"name":"creates and opens a database","suites":["orbit-db - Key-Value Database ()"],"updatePoint":{"line":27,"column":36,"index":848},"line":27,"code":"    it('creates and opens a database', async () => {\n      const db = await orbitdb1.keyvalue('first kv database');\n      assert.notEqual(db, null);\n      assert.equal(db.type, 'keyvalue');\n      assert.equal(db.dbname, 'first kv database');\n      await db.drop();\n    });","file":"kvstore.test.js","skipped":false,"dir":"test"},{"name":"put","suites":["orbit-db - Key-Value Database ()"],"updatePoint":{"line":34,"column":11,"index":1096},"line":34,"code":"    it('put', async () => {\n      const db = await orbitdb1.keyvalue('first kv database');\n      await db.put('key1', 'hello1');\n      const value = db.get('key1');\n      assert.equal(value, 'hello1');\n      await db.drop();\n    });","file":"kvstore.test.js","skipped":false,"dir":"test"},{"name":"get","suites":["orbit-db - Key-Value Database ()"],"updatePoint":{"line":41,"column":11,"index":1329},"line":41,"code":"    it('get', async () => {\n      const db = await orbitdb1.keyvalue('first kv database');\n      await db.put('key1', 'hello2');\n      const value = db.get('key1');\n      assert.equal(value, 'hello2');\n      await db.drop();\n    });","file":"kvstore.test.js","skipped":false,"dir":"test"},{"name":"put updates a value","suites":["orbit-db - Key-Value Database ()"],"updatePoint":{"line":48,"column":27,"index":1578},"line":48,"code":"    it('put updates a value', async () => {\n      const db = await orbitdb1.keyvalue('first kv database');\n      await db.put('key1', 'hello3');\n      await db.put('key1', 'hello4');\n      const value = db.get('key1');\n      assert.equal(value, 'hello4');\n      await db.drop();\n    });","file":"kvstore.test.js","skipped":false,"dir":"test"},{"name":"set is an alias for put","suites":["orbit-db - Key-Value Database ()"],"updatePoint":{"line":56,"column":31,"index":1869},"line":56,"code":"    it('set is an alias for put', async () => {\n      const db = await orbitdb1.keyvalue('first kv database');\n      await db.set('key1', 'hello5');\n      const value = db.get('key1');\n      assert.equal(value, 'hello5');\n      await db.drop();\n    });","file":"kvstore.test.js","skipped":false,"dir":"test"},{"name":"put/get - multiple keys","suites":["orbit-db - Key-Value Database ()"],"updatePoint":{"line":63,"column":31,"index":2122},"line":63,"code":"    it('put/get - multiple keys', async () => {\n      const db = await orbitdb1.keyvalue('first kv database');\n      await db.put('key1', 'hello1');\n      await db.put('key2', 'hello2');\n      await db.put('key3', 'hello3');\n      const v1 = db.get('key1');\n      const v2 = db.get('key2');\n      const v3 = db.get('key3');\n      assert.equal(v1, 'hello1');\n      assert.equal(v2, 'hello2');\n      assert.equal(v3, 'hello3');\n      await db.drop();\n    });","file":"kvstore.test.js","skipped":false,"dir":"test"},{"name":"deletes a key","suites":["orbit-db - Key-Value Database ()"],"updatePoint":{"line":76,"column":21,"index":2569},"line":76,"code":"    it('deletes a key', async () => {\n      const db = await orbitdb1.keyvalue('first kv database');\n      await db.put('key1', 'hello!');\n      await db.del('key1');\n      const value = db.get('key1');\n      assert.equal(value, null);\n      await db.drop();\n    });","file":"kvstore.test.js","skipped":false,"dir":"test"},{"name":"deletes a key after multiple updates","suites":["orbit-db - Key-Value Database ()"],"updatePoint":{"line":84,"column":44,"index":2859},"line":84,"code":"    it('deletes a key after multiple updates', async () => {\n      const db = await orbitdb1.keyvalue('first kv database');\n      await db.put('key1', 'hello1');\n      await db.put('key1', 'hello2');\n      await db.put('key1', 'hello3');\n      await db.del('key1');\n      const value = db.get('key1');\n      assert.equal(value, null);\n      await db.drop();\n    });","file":"kvstore.test.js","skipped":false,"dir":"test"},{"name":"get - integer value","suites":["orbit-db - Key-Value Database ()"],"updatePoint":{"line":94,"column":27,"index":3208},"line":94,"code":"    it('get - integer value', async () => {\n      const db = await orbitdb1.keyvalue('first kv database');\n      const val = 123;\n      await db.put('key1', val);\n      const v1 = db.get('key1');\n      assert.equal(v1, val);\n      await db.drop();\n    });","file":"kvstore.test.js","skipped":false,"dir":"test"},{"name":"get - object value","suites":["orbit-db - Key-Value Database ()"],"updatePoint":{"line":102,"column":26,"index":3463},"line":102,"code":"    it('get - object value', async () => {\n      const db = await orbitdb1.keyvalue('first kv database');\n      const val = {\n        one: 'first',\n        two: 2\n      };\n      await db.put('key1', val);\n      const v1 = db.get('key1');\n      assert.deepEqual(v1, val);\n      await db.drop();\n    });","file":"kvstore.test.js","skipped":false,"dir":"test"},{"name":"get - array value","suites":["orbit-db - Key-Value Database ()"],"updatePoint":{"line":113,"column":25,"index":3764},"line":113,"code":"    it('get - array value', async () => {\n      const db = await orbitdb1.keyvalue('first kv database');\n      const val = [1, 2, 3, 4, 5];\n      await db.put('key1', val);\n      const v1 = db.get('key1');\n      assert.deepEqual(v1, val);\n      await db.drop();\n    });","file":"kvstore.test.js","skipped":false,"dir":"test"},{"name":"replicates multiple open databases","suites":["orbit-db - Multiple Databases ()"],"updatePoint":{"line":111,"column":42,"index":4085},"line":111,"code":"    it('replicates multiple open databases', async () => {\n      const entryCount = 32;\n      const entryArr = [];\n\n      // Create an array that we use to create the db entries\n      for (let i = 1; i < entryCount + 1; i++) entryArr.push(i);\n\n      // Write entries to each database\n      console.log(\"Writing to databases\");\n      for (let index = 0; index < databaseInterfaces.length; index++) {\n        const dbInterface = databaseInterfaces[index];\n        const db = localDatabases[index];\n        await mapSeries(entryArr, val => dbInterface.write(db, val));\n      }\n\n      // Function to check if all databases have been replicated\n      const allReplicated = () => {\n        return remoteDatabases.every(db => db._oplog.length === entryCount);\n      };\n      console.log(\"Waiting for replication to finish\");\n      return new Promise((resolve, reject) => {\n        const interval = setInterval(() => {\n          if (allReplicated()) {\n            clearInterval(interval);\n            // Verify that the databases contain all the right entries\n            databaseInterfaces.forEach((dbInterface, index) => {\n              const db = remoteDatabases[index];\n              const result = dbInterface.query(db);\n              assert.equal(result, entryCount);\n              assert.equal(db._oplog.length, entryCount);\n            });\n            resolve();\n          }\n        }, 200);\n      });\n    });","file":"multiple-databases.test.js","skipped":false,"dir":"test"},{"name":"throws an error if address is empty","suites":["orbit-db - OrbitDB Address ()","Parse Address"],"updatePoint":{"line":24,"column":45,"index":869},"line":24,"code":"      it('throws an error if address is empty', () => {\n        let err;\n        try {\n          const result = OrbitDB.parseAddress('');\n        } catch (e) {\n          err = e.toString();\n        }\n        assert.equal(err, 'Error: Not a valid OrbitDB address: ');\n      });","file":"orbit-db-address.test.js","skipped":false,"dir":"test"},{"name":"parse address successfully","suites":["orbit-db - OrbitDB Address ()","Parse Address"],"updatePoint":{"line":33,"column":36,"index":1137},"line":33,"code":"      it('parse address successfully', () => {\n        const address = '/orbitdb/zdpuAuK3BHpS7NvMBivynypqciYCuy2UW77XYBPUYRnLjnw13/first-database';\n        const result = OrbitDB.parseAddress(address);\n        const isInstanceOf = result instanceof OrbitDBAddress;\n        assert.equal(isInstanceOf, true);\n        assert.equal(result.root, 'zdpuAuK3BHpS7NvMBivynypqciYCuy2UW77XYBPUYRnLjnw13');\n        assert.equal(result.path, 'first-database');\n        assert.equal(result.toString().indexOf('/orbitdb'), 0);\n        assert.equal(result.toString().indexOf('zd'), 9);\n      });","file":"orbit-db-address.test.js","skipped":false,"dir":"test"},{"name":"parse address with backslashes (win32) successfully","suites":["orbit-db - OrbitDB Address ()","Parse Address"],"updatePoint":{"line":43,"column":61,"index":1742},"line":43,"code":"      it('parse address with backslashes (win32) successfully', () => {\n        const address = '\\\\orbitdb\\\\Qmdgwt7w4uBsw8LXduzCd18zfGXeTmBsiR8edQ1hSfzcJC\\\\first-database';\n        const result = OrbitDB.parseAddress(address);\n        const isInstanceOf = result instanceof OrbitDBAddress;\n        assert.equal(isInstanceOf, true);\n        assert.equal(result.root, 'Qmdgwt7w4uBsw8LXduzCd18zfGXeTmBsiR8edQ1hSfzcJC');\n        assert.equal(result.path, 'first-database');\n        assert.equal(result.toString().indexOf('/orbitdb'), 0);\n        assert.equal(result.toString().indexOf('Qm'), 9);\n      });","file":"orbit-db-address.test.js","skipped":false,"dir":"test"},{"name":"returns false for empty string","suites":["orbit-db - OrbitDB Address ()","isValid Address"],"updatePoint":{"line":55,"column":40,"index":2371},"line":55,"code":"      it('returns false for empty string', () => {\n        const result = OrbitDB.isValidAddress('');\n        assert.equal(result, false);\n      });","file":"orbit-db-address.test.js","skipped":false,"dir":"test"},{"name":"validate address successfully","suites":["orbit-db - OrbitDB Address ()","isValid Address"],"updatePoint":{"line":59,"column":39,"index":2519},"line":59,"code":"      it('validate address successfully', () => {\n        const address = '/orbitdb/zdpuAuK3BHpS7NvMBivynypqciYCuy2UW77XYBPUYRnLjnw13/first-database';\n        const result = OrbitDB.isValidAddress(address);\n        assert.equal(result, true);\n      });","file":"orbit-db-address.test.js","skipped":false,"dir":"test"},{"name":"handle missing orbitdb prefix","suites":["orbit-db - OrbitDB Address ()","isValid Address"],"updatePoint":{"line":64,"column":39,"index":2772},"line":64,"code":"      it('handle missing orbitdb prefix', () => {\n        const address = 'zdpuAuK3BHpS7NvMBivynypqciYCuy2UW77XYBPUYRnLjnw13/first-database';\n        const result = OrbitDB.isValidAddress(address);\n        assert.equal(result, true);\n      });","file":"orbit-db-address.test.js","skipped":false,"dir":"test"},{"name":"handle missing db address name","suites":["orbit-db - OrbitDB Address ()","isValid Address"],"updatePoint":{"line":69,"column":40,"index":3017},"line":69,"code":"      it('handle missing db address name', () => {\n        const address = '/orbitdb/zdpuAuK3BHpS7NvMBivynypqciYCuy2UW77XYBPUYRnLjnw13';\n        const result = OrbitDB.isValidAddress(address);\n        assert.equal(result, true);\n      });","file":"orbit-db-address.test.js","skipped":false,"dir":"test"},{"name":"handle invalid multihash","suites":["orbit-db - OrbitDB Address ()","isValid Address"],"updatePoint":{"line":74,"column":34,"index":3250},"line":74,"code":"      it('handle invalid multihash', () => {\n        const address = '/orbitdb/Qmdgwt7w4uBsw8LXduzCd18zfGXeTmBsiR8edQ1hSfzc/first-database';\n        const result = OrbitDB.isValidAddress(address);\n        assert.equal(result, false);\n      });","file":"orbit-db-address.test.js","skipped":false,"dir":"test"},{"name":"validate address with backslashes (win32) successfully","suites":["orbit-db - OrbitDB Address ()","isValid Address"],"updatePoint":{"line":79,"column":64,"index":3524},"line":79,"code":"      it('validate address with backslashes (win32) successfully', () => {\n        const address = '\\\\orbitdb\\\\Qmdgwt7w4uBsw8LXduzCd18zfGXeTmBsiR8edQ1hSfzcJC\\\\first-database';\n        const result = OrbitDB.isValidAddress(address);\n        assert.equal(result, true);\n      });","file":"orbit-db-address.test.js","skipped":false,"dir":"test"},{"name":"Successfully re-exports AccessControllers","suites":["Re-exports"],"updatePoint":{"line":7,"column":47,"index":282},"line":7,"code":"  it('Successfully re-exports AccessControllers', () => {\n    assert.strictEqual(typeof AccessControllers, 'function');\n    assert.strictEqual(typeof AccessControllers.addAccessController, 'function');\n  });","file":"re-exports.test.js","skipped":false,"dir":"test"},{"name":"Successfully re-exports Identities","suites":["Re-exports"],"updatePoint":{"line":11,"column":40,"index":483},"line":11,"code":"  it('Successfully re-exports Identities', () => {\n    assert.strictEqual(typeof Identities, 'function');\n    assert.strictEqual(typeof Identities.createIdentity, 'function');\n  });","file":"re-exports.test.js","skipped":false,"dir":"test"},{"name":"Successfully re-exports Keystore","suites":["Re-exports"],"updatePoint":{"line":15,"column":38,"index":663},"line":15,"code":"  it('Successfully re-exports Keystore', () => {\n    assert.strictEqual(typeof Keystore, 'function');\n  });","file":"re-exports.test.js","skipped":false,"dir":"test"},{"name":"replicates database of 100 entries and loads it from the disk","suites":["orbit-db - Replicate and Load ()","two peers"],"updatePoint":{"line":78,"column":71,"index":2945},"line":78,"code":"      it('replicates database of 100 entries and loads it from the disk', async () => {\n        const entryCount = 100;\n        const entryArr = [];\n        let timer;\n        for (let i = 0; i < entryCount; i++) entryArr.push(i);\n        console.log(\"Writing to database...\");\n        await mapSeries(entryArr, i => db1.add('hello' + i));\n        console.log(\"Done\");\n        return new Promise((resolve, reject) => {\n          timer = setInterval(async () => {\n            if (db2._oplog.length === entryCount) {\n              clearInterval(timer);\n              const items = db2.iterator({\n                limit: -1\n              }).collect();\n              assert.equal(items.length, entryCount);\n              assert.equal(items[0].payload.value, 'hello0');\n              assert.equal(items[items.length - 1].payload.value, 'hello99');\n              try {\n                // Set write access for both clients\n                let options = {\n                  accessController: {\n                    write: [orbitdb1.identity.id, orbitdb2.identity.id]\n                  }\n                };\n\n                // Get the previous address to make sure nothing mutates it\n                const addr = db1.address.toString();\n\n                // Open the database again (this time from the disk)\n                options = Object.assign({}, options, {\n                  path: dbPath1,\n                  create: false\n                });\n                const db3 = await orbitdb1.eventlog(addr, options);\n                // Set 'localOnly' flag on and it'll error if the database doesn't exist locally\n                options = Object.assign({}, options, {\n                  path: dbPath2,\n                  localOnly: true\n                });\n                const db4 = await orbitdb2.eventlog(addr, options);\n                await db3.load();\n                await db4.load();\n\n                // Make sure we have all the entries in the databases\n                const result1 = db3.iterator({\n                  limit: -1\n                }).collect();\n                const result2 = db4.iterator({\n                  limit: -1\n                }).collect();\n                assert.equal(result1.length, entryCount);\n                assert.equal(result2.length, entryCount);\n                await db3.drop();\n                await db4.drop();\n              } catch (e) {\n                reject(e);\n              }\n              resolve();\n            }\n          }, 1000);\n        });\n      });","file":"replicate-and-load.test.js","skipped":false,"dir":"test"},{"name":"starts replicating the database when peers connect","suites":["orbit-db - Automatic Replication ()"],"updatePoint":{"line":52,"column":58,"index":1800},"line":52,"code":"    it('starts replicating the database when peers connect', async () => {\n      const isLocalhostAddress = addr => addr.toString().includes('127.0.0.1');\n      await connectPeers(ipfs1, ipfs2, {\n        filter: isLocalhostAddress\n      });\n      console.log('Peers connected');\n      const entryCount = 33;\n      const entryArr = [];\n\n      // Create the entries in the first database\n      for (let i = 0; i < entryCount; i++) {\n        entryArr.push(i);\n      }\n      await mapSeries(entryArr, i => db1.add('hello' + i));\n\n      // Open the second database\n      db2 = await orbitdb2.eventlog(db1.address.toString());\n      db4 = await orbitdb2.keyvalue(db3.address.toString());\n\n      // Listen for the 'replicated' events and check that all the entries\n      // were replicated to the second database\n      return new Promise((resolve, reject) => {\n        // Check if db2 was already replicated\n        let all = db2.iterator({\n          limit: -1\n        }).collect().length;\n        // Run the test asserts below if replication was done\n        let finished = all === entryCount;\n        db3.events.on('replicated', (address, hash, entry) => {\n          reject(new Error(\"db3 should not receive the 'replicated' event!\"));\n        });\n        db4.events.on('replicated', (address, hash, entry) => {\n          reject(new Error(\"db4 should not receive the 'replicated' event!\"));\n        });\n        db2.events.on('replicated', (address, length) => {\n          // Once db2 has finished replication, make sure it has all elements\n          // and process to the asserts below\n          all = db2.iterator({\n            limit: -1\n          }).collect().length;\n          finished = all === entryCount;\n        });\n        try {\n          const timer = setInterval(() => {\n            if (finished) {\n              clearInterval(timer);\n              const result1 = db1.iterator({\n                limit: -1\n              }).collect();\n              const result2 = db2.iterator({\n                limit: -1\n              }).collect();\n              assert.equal(result1.length, result2.length);\n              assert.deepEqual(result1, result2);\n              resolve();\n            }\n          }, 1000);\n        } catch (e) {\n          reject(e);\n        }\n      });\n    });","file":"replicate-automatically.test.js","skipped":false,"dir":"test"},{"name":"replicates database of 1 entry","suites":["orbit-db - Replication ()"],"updatePoint":{"line":66,"column":38,"index":2266},"line":66,"code":"    it('replicates database of 1 entry', async () => {\n      console.log(\"Waiting for peers to connect\");\n      await waitForPeers(ipfs2, [orbitdb1.id], db1.address.toString());\n      // Set 'sync' flag on. It'll prevent creating a new local database and rather\n      // fetch the database from the network\n      options = Object.assign({}, options, {\n        directory: dbPath2,\n        sync: true\n      });\n      db2 = await orbitdb2.eventlog(db1.address.toString(), options);\n      let finished = false;\n      await db1.add('hello');\n      return new Promise(resolve => {\n        let replicatedEventCount = 0;\n        db2.events.on('replicated', (address, length) => {\n          replicatedEventCount++;\n          // Once db2 has finished replication, make sure it has all elements\n          // and process to the asserts below\n          const all = db2.iterator({\n            limit: -1\n          }).collect().length;\n          finished = all === 1;\n        });\n        timer = setInterval(() => {\n          if (finished) {\n            clearInterval(timer);\n            const entries = db2.iterator({\n              limit: -1\n            }).collect();\n            assert.equal(entries.length, 1);\n            assert.equal(entries[0].payload.value, 'hello');\n            assert.equal(replicatedEventCount, 1);\n            resolve();\n          }\n        }, 100);\n      });\n    });","file":"replicate.test.js","skipped":false,"dir":"test"},{"name":"replicates database of 100 entries","suites":["orbit-db - Replication ()"],"updatePoint":{"line":103,"column":42,"index":3650},"line":103,"code":"    it('replicates database of 100 entries', async () => {\n      console.log(\"Waiting for peers to connect\");\n      await waitForPeers(ipfs2, [orbitdb1.id], db1.address.toString());\n      options = Object.assign({}, options, {\n        directory: dbPath2,\n        sync: true\n      });\n      db2 = await orbitdb2.eventlog(db1.address.toString(), options);\n      let finished = false;\n      const entryCount = 100;\n      const entryArr = [];\n      for (let i = 0; i < entryCount; i++) entryArr.push(i);\n      return new Promise(async (resolve, reject) => {\n        db2.events.on('replicated', () => {\n          // Once db2 has finished replication, make sure it has all elements\n          // and process to the asserts below\n          const all = db2.iterator({\n            limit: -1\n          }).collect().length;\n          finished = all === entryCount;\n        });\n        try {\n          const add = i => db1.add('hello' + i);\n          await mapSeries(entryArr, add);\n        } catch (e) {\n          reject(e);\n        }\n        timer = setInterval(() => {\n          if (finished) {\n            clearInterval(timer);\n            const entries = db2.iterator({\n              limit: -1\n            }).collect();\n            assert.equal(entries.length, entryCount);\n            assert.equal(entries[0].payload.value, 'hello0');\n            assert.equal(entries[entries.length - 1].payload.value, 'hello99');\n            resolve();\n          }\n        }, 100);\n      });\n    });","file":"replicate.test.js","skipped":false,"dir":"test"},{"name":"emits correct replication info","suites":["orbit-db - Replication ()"],"updatePoint":{"line":144,"column":38,"index":5124},"line":144,"code":"    it('emits correct replication info', async () => {\n      console.log(\"Waiting for peers to connect\");\n      await waitForPeers(ipfs2, [orbitdb1.id], db1.address.toString());\n      options = Object.assign({}, options, {\n        directory: dbPath2,\n        sync: true\n      });\n      db2 = await orbitdb2.eventlog(db1.address.toString(), options);\n      let finished = false;\n      const entryCount = 99;\n      return new Promise(async (resolve, reject) => {\n        // Test that none of the entries gets into the replication queue twice\n        const replicateSet = new Set();\n        db2.events.on('replicate', (address, entry) => {\n          if (!replicateSet.has(entry.hash)) {\n            replicateSet.add(entry.hash);\n          } else {\n            reject(new Error('Shouldn\\'t have started replication twice for entry ' + entry.hash + '\\n' + entry.payload.value));\n          }\n        });\n\n        // Verify that progress count increases monotonically by saving\n        // each event's current progress into an array\n        const progressEvents = [];\n        db2.events.on('replicate.progress', () => {\n          progressEvents.push(db2.replicationStatus.progress);\n        });\n        db2.events.on('replicated', (address, length) => {\n          // Once db2 has finished replication, make sure it has all elements\n          // and process to the asserts below\n          const all = db2.iterator({\n            limit: -1\n          }).collect().length;\n          finished = all === entryCount;\n        });\n        try {\n          timer = setInterval(() => {\n            if (finished) {\n              clearInterval(timer);\n              // All entries should be in the database\n              assert.equal(db2.iterator({\n                limit: -1\n              }).collect().length, entryCount);\n              // progress events should increase monotonically\n              assert.equal(progressEvents.length, entryCount);\n              for (const [idx, e] of progressEvents.entries()) {\n                assert.equal(e, idx + 1);\n              }\n              // Verify replication status\n              assert.equal(db2.replicationStatus.progress, entryCount);\n              assert.equal(db2.replicationStatus.max, entryCount);\n              // Verify replicator state\n              assert.equal(db2._replicator.tasksRunning, 0);\n              assert.equal(db2._replicator.tasksQueued, 0);\n              assert.equal(db2._replicator.unfinished.length, 0);\n              // Replicator's internal caches should be empty\n              assert.equal(db2._replicator._logs.length, 0);\n              assert.equal(Object.keys(db2._replicator._fetching).length, 0);\n              resolve();\n            }\n          }, 1000);\n        } catch (e) {\n          reject(e);\n        }\n\n        // Trigger replication\n        let adds = [];\n        for (let i = 0; i < entryCount; i++) {\n          adds.push(i);\n        }\n        await mapSeries(adds, i => db1.add('hello ' + i));\n      });\n    });","file":"replicate.test.js","skipped":false,"dir":"test"},{"name":"emits correct replication info on fresh replication","suites":["orbit-db - Replication ()"],"updatePoint":{"line":217,"column":59,"index":8131},"line":217,"code":"    it('emits correct replication info on fresh replication', async () => {\n      return new Promise(async (resolve, reject) => {\n        let finished = false;\n        const entryCount = 512;\n\n        // Trigger replication\n        const adds = [];\n        for (let i = 0; i < entryCount; i++) {\n          adds.push(i);\n        }\n        const add = async i => {\n          process.stdout.write(\"\\rWriting \" + (i + 1) + \" / \" + entryCount + \" \");\n          await db1.add('hello ' + i);\n        };\n        await mapSeries(adds, add);\n        console.log();\n\n        // Open second instance again\n        options = {\n          directory: dbPath2,\n          overwrite: true,\n          sync: true\n        };\n        db2 = await orbitdb2.eventlog(db1.address.toString(), options);\n\n        // Test that none of the entries gets into the replication queue twice\n        const replicateSet = new Set();\n        db2.events.on('replicate', (address, entry) => {\n          if (!replicateSet.has(entry.hash)) {\n            replicateSet.add(entry.hash);\n          } else {\n            reject(new Error('Shouldn\\'t have started replication twice for entry ' + entry.hash));\n          }\n        });\n\n        // Verify that progress count increases monotonically by saving\n        // each event's current progress into an array\n        const progressEvents = [];\n        db2.events.on('replicate.progress', (address, hash, entry) => {\n          progressEvents.push(db2.replicationStatus.progress);\n        });\n        let replicatedEventCount = 0;\n        db2.events.on('replicated', (address, length) => {\n          replicatedEventCount++;\n          // Once db2 has finished replication, make sure it has all elements\n          // and process to the asserts below\n          const all = db2.iterator({\n            limit: -1\n          }).collect().length;\n          finished = all === entryCount;\n        });\n        timer = setInterval(async () => {\n          if (finished) {\n            clearInterval(timer);\n            try {\n              // All entries should be in the database\n              assert.equal(db2.iterator({\n                limit: -1\n              }).collect().length, entryCount);\n              // 'replicated' event should've been received only once\n              assert.equal(replicatedEventCount, 1);\n              // progress events should increase monotonically\n              assert.equal(progressEvents.length, entryCount);\n              for (const [idx, e] of progressEvents.entries()) {\n                assert.equal(e, idx + 1);\n              }\n              // Verify replication status\n              assert.equal(db2.replicationStatus.progress, entryCount);\n              assert.equal(db2.replicationStatus.max, entryCount);\n              // Verify replicator state\n              assert.equal(db2._replicator.tasksRunning, 0);\n              assert.equal(db2._replicator.tasksQueued, 0);\n              assert.equal(db2._replicator.unfinished.length, 0);\n              // Replicator's internal caches should be empty\n              assert.equal(db2._replicator._logs.length, 0);\n              assert.equal(Object.keys(db2._replicator._fetching).length, 0);\n              resolve();\n            } catch (e) {\n              reject(e);\n            }\n          }\n        }, 100);\n      });\n    });","file":"replicate.test.js","skipped":false,"dir":"test"},{"name":"emits correct replication info in two-way replication","suites":["orbit-db - Replication ()"],"updatePoint":{"line":301,"column":61,"index":11436},"line":301,"code":"    it('emits correct replication info in two-way replication', async () => {\n      return new Promise(async (resolve, reject) => {\n        console.log(\"Waiting for peers to connect\");\n        await waitForPeers(ipfs2, [orbitdb1.id], db1.address.toString());\n        let finished = false;\n        const entryCount = 100;\n\n        // Trigger replication\n        const adds = [];\n        for (let i = 0; i < entryCount; i++) {\n          adds.push(i);\n        }\n        const add = async i => {\n          process.stdout.write(\"\\rWriting \" + (i + 1) + \" / \" + entryCount + \" \");\n          await Promise.all([db1.add('hello-1-' + i), db2.add('hello-2-' + i)]);\n        };\n\n        // Open second instance again\n        let options = {\n          directory: dbPath2 + '2',\n          overwrite: true,\n          sync: true\n        };\n        db2 = await orbitdb2.eventlog(db1.address.toString(), options);\n        assert.equal(db1.address.toString(), db2.address.toString());\n\n        // Test that none of the entries gets into the replication queue twice\n        const replicateSet = new Set();\n        db2.events.on('replicate', (address, entry) => {\n          if (!replicateSet.has(entry.hash)) {\n            replicateSet.add(entry.hash);\n          } else {\n            reject(new Error('Shouldn\\'t have started replication twice for entry ' + entry.hash));\n          }\n        });\n        db2.events.on('replicated', (address, length) => {\n          // Once db2 has finished replication, make sure it has all elements\n          // and process to the asserts below\n          const all = db2.iterator({\n            limit: -1\n          }).collect().length;\n          finished = all === entryCount * 2;\n        });\n        try {\n          await mapSeries(adds, add);\n          console.log();\n          timer = setInterval(() => {\n            if (finished) {\n              clearInterval(timer);\n\n              // Database values should match\n              const values1 = db1.iterator({\n                limit: -1\n              }).collect();\n              const values2 = db2.iterator({\n                limit: -1\n              }).collect();\n              assert.equal(values1.length, values2.length);\n              assert.deepEqual(values1, values2);\n              // All entries should be in the database\n              assert.equal(values1.length, entryCount * 2);\n              assert.equal(values2.length, entryCount * 2);\n              // Verify replication status\n              assert.equal(db2.replicationStatus.progress, entryCount * 2);\n              assert.equal(db2.replicationStatus.max, entryCount * 2);\n              // Verify replicator state\n              assert.equal(db2._replicator.tasksRunning, 0);\n              assert.equal(db2._replicator.tasksQueued, 0);\n              assert.equal(db2._replicator.unfinished.length, 0);\n              // Replicator's internal caches should be empty\n              assert.equal(db2._replicator._logs.length, 0);\n              assert.equal(Object.keys(db2._replicator._fetching).length, 0);\n              resolve();\n            }\n          }, 500);\n        } catch (e) {\n          reject(e);\n        }\n      });\n    });","file":"replicate.test.js","skipped":false,"dir":"test"},{"name":"has correct initial state","suites":["orbit-db - Replication Status ()"],"updatePoint":{"line":31,"column":33,"index":1087},"line":31,"code":"    it('has correct initial state', async () => {\n      assert.deepEqual(db.replicationStatus, {\n        progress: 0,\n        max: 0\n      });\n    });","file":"replication-status.test.js","skipped":false,"dir":"test"},{"name":"has correct replication info after load","suites":["orbit-db - Replication Status ()"],"updatePoint":{"line":37,"column":47,"index":1252},"line":37,"code":"    it('has correct replication info after load', async () => {\n      await db.add('hello');\n      await db.close();\n      await db.load();\n      assert.deepEqual(db.replicationStatus, {\n        progress: 1,\n        max: 1\n      });\n      await db.close();\n    });","file":"replication-status.test.js","skipped":false,"dir":"test"},{"name":"has correct replication info after close","suites":["orbit-db - Replication Status ()"],"updatePoint":{"line":47,"column":48,"index":1518},"line":47,"code":"    it('has correct replication info after close', async () => {\n      await db.close();\n      assert.deepEqual(db.replicationStatus, {\n        progress: 0,\n        max: 0\n      });\n    });","file":"replication-status.test.js","skipped":false,"dir":"test"},{"name":"has correct replication info after sync","suites":["orbit-db - Replication Status ()"],"updatePoint":{"line":54,"column":47,"index":1707},"line":54,"code":"    it('has correct replication info after sync', async () => {\n      await db.load();\n      await db.add('hello2');\n      const db2 = await orbitdb2.log(db.address.toString(), {\n        create: false\n      });\n      await db2.sync(db._oplog.heads);\n      return new Promise((resolve, reject) => {\n        setTimeout(() => {\n          try {\n            assert.deepEqual(db2.replicationStatus, {\n              progress: 2,\n              max: 2\n            });\n            resolve();\n          } catch (e) {\n            reject(e);\n          }\n        }, 100);\n      });\n    });","file":"replication-status.test.js","skipped":false,"dir":"test"},{"name":"has correct replication info after loading from snapshot","suites":["orbit-db - Replication Status ()"],"updatePoint":{"line":75,"column":64,"index":2300},"line":75,"code":"    it('has correct replication info after loading from snapshot', async () => {\n      await db._cache._store.open();\n      await db.saveSnapshot();\n      await db.close();\n      await db.loadFromSnapshot();\n      assert.deepEqual(db.replicationStatus, {\n        progress: 2,\n        max: 2\n      });\n    });","file":"replication-status.test.js","skipped":false,"dir":"test"},{"name":"sets identity","suites":["orbit-db - Set identities ()"],"updatePoint":{"line":56,"column":21,"index":1796},"line":56,"code":"    it('sets identity', async () => {\n      const db = await orbitdb.open('abc', options);\n      assert.equal(db.identity, orbitdb.identity);\n      db.setIdentity(identity1);\n      assert.equal(db.identity, identity1);\n      await db.close();\n    });","file":"set-identity.test.js","skipped":false,"dir":"test"},{"name":"writes with new identity with access","suites":["orbit-db - Set identities ()"],"updatePoint":{"line":63,"column":44,"index":2070},"line":63,"code":"    it('writes with new identity with access', async () => {\n      const db = await orbitdb.open('abc', options);\n      assert.equal(db.identity, orbitdb.identity);\n      db.setIdentity(identity1);\n      assert.equal(db.identity, identity1);\n      let err;\n      try {\n        await db.add({\n          hello: '1'\n        });\n      } catch (e) {\n        err = e.message;\n      }\n      assert.equal(err, null);\n      await db.drop();\n    });","file":"set-identity.test.js","skipped":false,"dir":"test"},{"name":"cannot write with new identity without access","suites":["orbit-db - Set identities ()"],"updatePoint":{"line":79,"column":53,"index":2519},"line":79,"code":"    it('cannot write with new identity without access', async () => {\n      const db = await orbitdb.open('abc', options);\n      assert.equal(db.identity, orbitdb.identity);\n      db.setIdentity(identity2);\n      assert.equal(db.identity, identity2);\n      let err;\n      try {\n        await db.add({\n          hello: '1'\n        });\n      } catch (e) {\n        err = e.message;\n      }\n      assert.equal(err, `Could not append entry, key \"${identity2.id}\" is not allowed to write to the log`);\n      await db.drop();\n    });","file":"set-identity.test.js","skipped":false,"dir":"test"}]}