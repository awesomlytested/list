{"repo":"blakeembrey/code-problems","url":"https://github.com/blakeembrey/code-problems","branch":"master","configs":[{"package":"code-problems","lang":"js","dir":"tests","framework":"mocha","pattern":"**/*.{js,ts}"}],"tests":[{"name":"should detect no change in the characters","suites":["Anagram Detection"],"updatePoint":{"line":6,"column":47},"line":6,"code":"  it('should detect no change in the characters', function () {\n    expect(anagramDetection('abc', 'abc')).to.equal(1);\n  });","file":"javascript/anagram-detection.js","skipped":false,"dir":"tests"},{"name":"should detect anagrams of itself","suites":["Anagram Detection"],"updatePoint":{"line":9,"column":38},"line":9,"code":"  it('should detect anagrams of itself', function () {\n    expect(anagramDetection('aab', 'baa')).to.equal(1);\n  });","file":"javascript/anagram-detection.js","skipped":false,"dir":"tests"},{"name":"should detect child anagrams","suites":["Anagram Detection"],"updatePoint":{"line":12,"column":34},"line":12,"code":"  it('should detect child anagrams', function () {\n    expect(anagramDetection('AbrAcadAbRa', 'cAda')).to.equal(2);\n    expect(anagramDetection('AdnBndAndBdaBn', 'dAn')).to.equal(4);\n  });","file":"javascript/anagram-detection.js","skipped":false,"dir":"tests"},{"name":"should not fail with a larger child than parent string","suites":["Anagram Detection"],"updatePoint":{"line":16,"column":60},"line":16,"code":"  it('should not fail with a larger child than parent string', function () {\n    expect(anagramDetection('test', 'testing')).to.equal(0);\n  });","file":"javascript/anagram-detection.js","skipped":false,"dir":"tests"},{"name":"should find pairs that equal the expected sum","suites":["Array Pair Sum"],"updatePoint":{"line":6,"column":51},"line":6,"code":"  it('should find pairs that equal the expected sum', function () {\n    expect(arrayPairSum(10, [3, 4, 5, 6, 7])).to.eql([[4, 6], [3, 7]]);\n  });","file":"javascript/array-pair-sum.js","skipped":false,"dir":"tests"},{"name":"should not output duplicate results","suites":["Array Pair Sum"],"updatePoint":{"line":9,"column":41},"line":9,"code":"  it('should not output duplicate results', function () {\n    expect(arrayPairSum(8, [3, 4, 5, 4, 4])).to.eql([[3, 5], [4, 4], [4, 4], [4, 4]]);\n  });","file":"javascript/array-pair-sum.js","skipped":false,"dir":"tests"},{"name":"should work not find any matches","suites":["Array Pair Sum"],"updatePoint":{"line":12,"column":38},"line":12,"code":"  it('should work not find any matches', function () {\n    expect(arrayPairSum(10, [3, 5, 6, 8])).to.eql([]);\n  });","file":"javascript/array-pair-sum.js","skipped":false,"dir":"tests"},{"name":"should detect pairing brackets","suites":["Balanced brackets"],"updatePoint":{"line":6,"column":36},"line":6,"code":"  it('should detect pairing brackets', function () {\n    expect(balancedBrackets('()[]{}')).to.be.true;\n  });","file":"javascript/balanced-brackets.js","skipped":false,"dir":"tests"},{"name":"should detect nested brackets","suites":["Balanced brackets"],"updatePoint":{"line":9,"column":35},"line":9,"code":"  it('should detect nested brackets', function () {\n    expect(balancedBrackets('(([])){[()][]}')).to.be.true;\n  });","file":"javascript/balanced-brackets.js","skipped":false,"dir":"tests"},{"name":"should detect non pairing brackets ","suites":["Balanced brackets"],"updatePoint":{"line":12,"column":41},"line":12,"code":"  it('should detect non pairing brackets ', function () {\n    expect(balancedBrackets('())[]{}')).to.be.false;\n  });","file":"javascript/balanced-brackets.js","skipped":false,"dir":"tests"},{"name":"should detect wrong nesting ","suites":["Balanced brackets"],"updatePoint":{"line":15,"column":34},"line":15,"code":"  it('should detect wrong nesting ', function () {\n    expect(balancedBrackets('[(])')).to.be.false;\n  });","file":"javascript/balanced-brackets.js","skipped":false,"dir":"tests"},{"name":"should pass a valid binary search tree","suites":["binary search tree check"],"updatePoint":{"line":90,"column":44},"line":90,"code":"  it('should pass a valid binary search tree', function () {\n    assert.ok(isBST(pass));\n  });","file":"javascript/binary-search-tree-check.js","skipped":false,"dir":"tests"},{"name":"should fail with a left subtree that is greater","suites":["binary search tree check"],"updatePoint":{"line":93,"column":53},"line":93,"code":"  it('should fail with a left subtree that is greater', function () {\n    assert.ok(!isBST(failLeft));\n  });","file":"javascript/binary-search-tree-check.js","skipped":false,"dir":"tests"},{"name":"should fail with a right subtree that is smaller","suites":["binary search tree check"],"updatePoint":{"line":96,"column":54},"line":96,"code":"  it('should fail with a right subtree that is smaller', function () {\n    assert.ok(!isBST(failRight));\n  });","file":"javascript/binary-search-tree-check.js","skipped":false,"dir":"tests"},{"name":"should fail with duplicate nodes","suites":["binary search tree check"],"updatePoint":{"line":99,"column":38},"line":99,"code":"  it('should fail with duplicate nodes', function () {\n    assert.ok(!isBST(failDuplicate));\n  });","file":"javascript/binary-search-tree-check.js","skipped":false,"dir":"tests"},{"name":"should fail with bstFalse","suites":["binary search tree check"],"updatePoint":{"line":102,"column":31},"line":102,"code":"  it('should fail with bstFalse', function () {\n    assert.ok(!isBST(bstFalse));\n  });","file":"javascript/binary-search-tree-check.js","skipped":false,"dir":"tests"},{"name":"root should pass a valid binary search tree","suites":["binary search tree"],"updatePoint":{"line":31,"column":49},"line":31,"code":"  it('root should pass a valid binary search tree', function () {\n    expect = node(50, node(9, node(7, node(6), node(8)), node(10)), node(100, node(75), node(150, node(125), node(175))));\n    assert.ok(isBST(root));\n    assert.deepEqual(jsonify(root), jsonify(expect));\n  });","file":"javascript/binary-search-tree.js","skipped":false,"dir":"tests"},{"name":"deleting nodes should pass a valid binary search tree","suites":["binary search tree"],"updatePoint":{"line":36,"column":59},"line":36,"code":"  it('deleting nodes should pass a valid binary search tree', function () {\n    root.delete(125).delete(9).delete(75);\n    expect = node(50, node(8, node(7, node(6)), node(10)), node(100, undefined, node(150, undefined, node(175))));\n    assert.ok(isBST(root));\n    assert.deepEqual(jsonify(root), jsonify(expect));\n  });","file":"javascript/binary-search-tree.js","skipped":false,"dir":"tests"},{"name":"deleting unexisted nodes should pass a valid binary search tree","suites":["binary search tree"],"updatePoint":{"line":42,"column":69},"line":42,"code":"  it('deleting unexisted nodes should pass a valid binary search tree', function () {\n    root.delete(1252222).delete(20392); //delete unexisted node \n\n    assert.ok(isBST(root));\n    assert.deepEqual(jsonify(root), jsonify(expect));\n  });","file":"javascript/binary-search-tree.js","skipped":false,"dir":"tests"},{"name":"search nodes","suites":["binary search tree"],"updatePoint":{"line":48,"column":18},"line":48,"code":"  it('search nodes', function () {\n    var searchExpect;\n    var searchResult = root.search(999999); // if not existed\n\n    assert.ok(!searchResult);\n    searchResult = root.search(125);\n    assert.ok(!searchResult);\n    searchExpect = node(7, node(6));\n    searchResult = root.search(7); // if existed\n\n    assert.deepEqual(jsonify(searchResult), jsonify(searchExpect));\n    searchExpect = node(100, undefined, node(150, undefined, node(175)));\n    searchResult = root.search(100); // if existed\n\n    assert.deepEqual(jsonify(searchResult), jsonify(searchExpect));\n    searchExpect = node(50, node(8, node(7, node(6)), node(10)), node(100, undefined, node(150, undefined, node(175))));\n    searchResult = root.search(50); // if existed\n\n    assert.deepEqual(jsonify(searchResult), jsonify(searchExpect));\n  });","file":"javascript/binary-search-tree.js","skipped":false,"dir":"tests"},{"name":"delete root","suites":["binary search tree"],"updatePoint":{"line":68,"column":17},"line":68,"code":"  it('delete root', function () {\n    var rootExpect;\n    root.delete(50);\n    rootExpect = node(10, node(8, node(7, node(6))), node(100, undefined, node(150, undefined, node(175))));\n    assert.deepEqual(jsonify(root), jsonify(rootExpect)); //remove left sub tree\n\n    root.delete(10).delete(8).delete(7).delete(6);\n    rootExpect = node(100, undefined, node(150, undefined, node(175)));\n    assert.deepEqual(jsonify(root), jsonify(rootExpect)); //remove right sub tree\n\n    root.delete(175).delete(150).add(6).add(5).add(8).add(7).delete(100);\n    rootExpect = node(6, node(5), node(8, node(7)));\n    assert.deepEqual(jsonify(root), jsonify(rootExpect)); //remove every node.\n\n    root.delete(6).delete(5).delete(8).delete(7);\n    assert.equal(undefined, root.value);\n  });","file":"javascript/binary-search-tree.js","skipped":false,"dir":"tests"},{"name":"should show B format","suites":["Byte format"],"updatePoint":{"line":6,"column":26},"line":6,"code":"  it('should show B format', function () {\n    expect(byteFormat(1022)).to.equal('1022 B');\n  });","file":"javascript/byte-format.js","skipped":false,"dir":"tests"},{"name":"should show KB format","suites":["Byte format"],"updatePoint":{"line":9,"column":27},"line":9,"code":"  it('should show KB format', function () {\n    expect(byteFormat(10221)).to.equal('9.99 KB');\n  });","file":"javascript/byte-format.js","skipped":false,"dir":"tests"},{"name":"should show KB format rounded to 3 digital","suites":["Byte format"],"updatePoint":{"line":12,"column":48},"line":12,"code":"  it('should show KB format rounded to 3 digital', function () {\n    expect(byteFormat(10221, 3)).to.equal('9.982 KB');\n  });","file":"javascript/byte-format.js","skipped":false,"dir":"tests"},{"name":"should show MB format","suites":["Byte format"],"updatePoint":{"line":15,"column":27},"line":15,"code":"  it('should show MB format', function () {\n    expect(byteFormat(1022932324)).to.equal('975.55 MB');\n  });","file":"javascript/byte-format.js","skipped":false,"dir":"tests"},{"name":"should show GB format","suites":["Byte format"],"updatePoint":{"line":18,"column":27},"line":18,"code":"  it('should show GB format', function () {\n    expect(byteFormat(1022932123237)).to.equal('952.68 GB');\n  });","file":"javascript/byte-format.js","skipped":false,"dir":"tests"},{"name":"should show TB format","suites":["Byte format"],"updatePoint":{"line":21,"column":27},"line":21,"code":"  it('should show TB format', function () {\n    expect(byteFormat(1022932453333234)).to.equal('930.36 TB');\n  });","file":"javascript/byte-format.js","skipped":false,"dir":"tests"},{"name":"should show PB format","suites":["Byte format"],"updatePoint":{"line":24,"column":27},"line":24,"code":"  it('should show PB format', function () {\n    expect(byteFormat(1022932453333234444)).to.equal('908.55 PB');\n  });","file":"javascript/byte-format.js","skipped":false,"dir":"tests"},{"name":"should show EB format","suites":["Byte format"],"updatePoint":{"line":27,"column":27},"line":27,"code":"  it('should show EB format', function () {\n    expect(byteFormat(1022932453333234444324)).to.equal('887.26 EB');\n  });","file":"javascript/byte-format.js","skipped":false,"dir":"tests"},{"name":"should show ZB format","suites":["Byte format"],"updatePoint":{"line":30,"column":27},"line":30,"code":"  it('should show ZB format', function () {\n    expect(byteFormat(1022932453333234444324454)).to.equal('866.46 ZB');\n  });","file":"javascript/byte-format.js","skipped":false,"dir":"tests"},{"name":"should show YB format","suites":["Byte format"],"updatePoint":{"line":33,"column":27},"line":33,"code":"  it('should show YB format', function () {\n    expect(byteFormat(10243245333323444432445431)).to.equal('8.48 YB');\n  });","file":"javascript/byte-format.js","skipped":false,"dir":"tests"},{"name":"should show YB format when number larger than 1024YB","suites":["Byte format"],"updatePoint":{"line":36,"column":58},"line":36,"code":"  it('should show YB format when number larger than 1024YB', function () {\n    var result = byteFormat(232932453333234444324454333424324);\n    expect(result).to.equal('192677209.44 YB');\n  });","file":"javascript/byte-format.js","skipped":false,"dir":"tests"},{"name":"should not show any decimals","suites":["Byte format"],"updatePoint":{"line":40,"column":34},"line":40,"code":"  it('should not show any decimals', function () {\n    expect(byteFormat(9999, 0)).to.equal('10 KB');\n  });","file":"javascript/byte-format.js","skipped":false,"dir":"tests"},{"name":"should convert an array","suites":["Convert Array"],"updatePoint":{"line":6,"column":29},"line":6,"code":"  it('should convert an array', function () {\n    var arr = ['a1', 'a2', 'a3', 'a4', 'a5', 'b1', 'b2', 'b3', 'b4', 'b5', 'c1', 'c2', 'c3', 'c4', 'c5'];\n    var expectedArr = ['a1', 'b1', 'c1', 'a2', 'b2', 'c2', 'a3', 'b3', 'c3', 'a4', 'b4', 'c4', 'a5', 'b5', 'c5'];\n    convert(arr);\n\n    for (var i = 0; i < arr.length; i++) {\n      assert.equal(arr[i], expectedArr[i]);\n    }\n  });","file":"javascript/convert-array.js","skipped":false,"dir":"tests"},{"name":"should flatten an array","suites":["flatten-array"],"updatePoint":{"line":17,"column":33},"line":17,"code":"      it('should flatten an array', function () {\n        expect(flatten([1, [2, [3], 2], 1])).to.deep.equal([1, 2, 3, 2, 1]);\n      });","file":"javascript/flatten-array.js","skipped":false,"dir":"tests"},{"name":"should be able to get the largest sum","suites":["largest continuous sum"],"updatePoint":{"line":6,"column":43},"line":6,"code":"  it('should be able to get the largest sum', function () {\n    assert.equal(solution([1, 2, 3]), 6);\n    assert.equal(solution([2, 4, -1, 4, 5]), 14);\n    assert.equal(solution([10, -5, 15, -20, 5]), 20);\n  });","file":"javascript/largest-continuous-sum.js","skipped":false,"dir":"tests"},{"name":"should work with negative numbers","suites":["largest continuous sum"],"updatePoint":{"line":11,"column":39},"line":11,"code":"  it('should work with negative numbers', function () {\n    assert.equal(solution([-1, -2, -3]), -1);\n  });","file":"javascript/largest-continuous-sum.js","skipped":false,"dir":"tests"},{"name":"should return nothing when given nothing","suites":["largest continuous sum"],"updatePoint":{"line":14,"column":46},"line":14,"code":"  it('should return nothing when given nothing', function () {\n    assert.equal(solution(), undefined);\n  });","file":"javascript/largest-continuous-sum.js","skipped":false,"dir":"tests"},{"name":"should return the next highest number","suites":["next highest number"],"updatePoint":{"line":6,"column":43},"line":6,"code":"  it('should return the next highest number', function () {\n    assert.equal(nextHighest(1524), 1542);\n    assert.equal(nextHighest(1542), 2145);\n    assert.equal(nextHighest(1543), 3145);\n    assert.equal(nextHighest(1544), 4145);\n    assert.equal(nextHighest(63254), 63425);\n    assert.equal(nextHighest(63542), 64235);\n    assert.equal(nextHighest(1112), 1121);\n    assert.equal(nextHighest(1243), 1324);\n    assert.equal(nextHighest(348932), 349238);\n    assert.equal(nextHighest(15895), 15958);\n  });","file":"javascript/next-highest-number.js","skipped":false,"dir":"tests"},{"name":"should work when there isn't a higher number","suites":["next highest number"],"updatePoint":{"line":18,"column":51},"line":18,"code":"  it('should work when there isn\\'t a higher number', function () {\n    assert.equal(nextHighest(98765), 98765);\n    assert.equal(nextHighest(11111), 11111);\n  });","file":"javascript/next-highest-number.js","skipped":false,"dir":"tests"},{"name":"should return true if the number is a prime number","suites":["prime number"],"updatePoint":{"line":6,"column":56},"line":6,"code":"  it('should return true if the number is a prime number', function () {\n    assert.equal(primeNumber(2), true);\n    assert.equal(primeNumber(859), true);\n    assert.equal(primeNumber(983), true);\n    assert.equal(primeNumber(283), true);\n  });","file":"javascript/prime-number.js","skipped":false,"dir":"tests"},{"name":"should return false if the number is not prime","suites":["prime number"],"updatePoint":{"line":12,"column":52},"line":12,"code":"  it('should return false if the number is not prime', function () {\n    assert.equal(primeNumber(324), false);\n    assert.equal(primeNumber(-124), false);\n    assert.equal(primeNumber(89325), false);\n  });","file":"javascript/prime-number.js","skipped":false,"dir":"tests"},{"name":"should throw if called with invalid parameters","suites":["queen-threatens-king"],"updatePoint":{"line":6,"column":52},"line":6,"code":"  it('should throw if called with invalid parameters', function () {\n    var coordinates = [0, 0, null, 0];\n    var threatensWithInvalidParams = Function.prototype.bind.apply(threatens, coordinates);\n    expect(threatensWithInvalidParams).to.throw(Error);\n  });","file":"javascript/queen-threatens-king.js","skipped":false,"dir":"tests"},{"name":"the queen should threaten the king (in the same row)","suites":["queen-threatens-king"],"updatePoint":{"line":11,"column":58},"line":11,"code":"  it('the queen should threaten the king (in the same row)', function () {\n    expect(threatens(0, 0, 0, 1)).to.be.true;\n  });","file":"javascript/queen-threatens-king.js","skipped":false,"dir":"tests"},{"name":"the queen should threaten the king (in the same column)","suites":["queen-threatens-king"],"updatePoint":{"line":14,"column":61},"line":14,"code":"  it('the queen should threaten the king (in the same column)', function () {\n    expect(threatens(0, 0, 1, 0)).to.be.true;\n  });","file":"javascript/queen-threatens-king.js","skipped":false,"dir":"tests"},{"name":"the queen should threaten the king (in the same diagonal)","suites":["queen-threatens-king"],"updatePoint":{"line":17,"column":63},"line":17,"code":"  it('the queen should threaten the king (in the same diagonal)', function () {\n    expect(threatens(0, 0, 1, 1)).to.be.true;\n  });","file":"javascript/queen-threatens-king.js","skipped":false,"dir":"tests"},{"name":"the queen should not threaten the king","suites":["queen-threatens-king"],"updatePoint":{"line":20,"column":44},"line":20,"code":"  it('the queen should not threaten the king', function () {\n    expect(threatens(0, 0, 1, 2)).to.be.false;\n  });","file":"javascript/queen-threatens-king.js","skipped":false,"dir":"tests"},{"name":"throws error if input not an array","suites":["Quick Sort"],"updatePoint":{"line":8,"column":40},"line":8,"code":"  it('throws error if input not an array', function () {\n    try {\n      quickSort(null);\n    } catch (err) {\n      return;\n    }\n\n    assert(false, 'Expected exception to be thrown.');\n  });","file":"javascript/quick-sort.js","skipped":false,"dir":"tests"},{"name":"handles empty list","suites":["Quick Sort"],"updatePoint":{"line":17,"column":24},"line":17,"code":"  it('handles empty list', function () {\n    var results = quickSort([]);\n    assert(Array.isArray(results), 'Expected result to be array');\n    assert(results.length === 0, 'Expected array to be empty');\n  });","file":"javascript/quick-sort.js","skipped":false,"dir":"tests"},{"name":"handles list of one","suites":["Quick Sort"],"updatePoint":{"line":22,"column":25},"line":22,"code":"  it('handles list of one', function () {\n    var results = quickSort([1]);\n    assert.deepEqual(results, [1], 'Expected arrays to match');\n  });","file":"javascript/quick-sort.js","skipped":false,"dir":"tests"},{"name":"sorts an array of numbers","suites":["Quick Sort"],"updatePoint":{"line":26,"column":31},"line":26,"code":"  it('sorts an array of numbers', function () {\n    var unsorted = [9, 8, 7, 6, 5, 4, 3, 2, 1];\n    var sorted = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n    var results = quickSort(unsorted);\n    assert.deepEqual(results, sorted, 'Expected arrays to match');\n  });","file":"javascript/quick-sort.js","skipped":false,"dir":"tests"},{"name":"sorts an array of words","suites":["Quick Sort"],"updatePoint":{"line":32,"column":29},"line":32,"code":"  it('sorts an array of words', function () {\n    var words = ['carrot', 'beta', 'apple'];\n    var sorted = ['apple', 'beta', 'carrot'];\n    var results = quickSort(words);\n    assert.deepEqual(results, sorted, 'Expected arrays to match');\n  });","file":"javascript/quick-sort.js","skipped":false,"dir":"tests"},{"name":"leaves input array intact","suites":["Quick Sort"],"updatePoint":{"line":38,"column":31},"line":38,"code":"  it('leaves input array intact', function () {\n    var words = ['apple', 'beta', 'carrot'];\n    quickSort(words);\n    assert(words.length === 3);\n  });","file":"javascript/quick-sort.js","skipped":false,"dir":"tests"},{"name":"should find the number","suites":["Search Unknown Length Array"],"updatePoint":{"line":6,"column":28},"line":6,"code":"  it('should find the number', function () {\n    expect(searchArray([3, 5, 6, 7, 8], 3)).to.equal(0);\n    expect(searchArray([-8, -6, -5, -1, 5, 12, 99], 99)).to.equal(6);\n    expect(searchArray([1, 4, 6, 7, 9, 12, 34, 47, 53, 65], 12)).to.equal(5);\n  });","file":"javascript/search-unknown-length-array.js","skipped":false,"dir":"tests"},{"name":"should fail to find the number","suites":["Search Unknown Length Array"],"updatePoint":{"line":11,"column":36},"line":11,"code":"  it('should fail to find the number', function () {\n    expect(searchArray([1, 2, 3], 4)).to.equal(-1);\n  });","file":"javascript/search-unknown-length-array.js","skipped":false,"dir":"tests"},{"name":"should be able to find the number","suites":["Sorted Array Search"],"updatePoint":{"line":6,"column":39},"line":6,"code":"  it('should be able to find the number', function () {\n    expect(sortedSearch([2, 5, 6, 9, 23, 45, 85, 102], 9)).to.equal(3);\n    expect(sortedSearch([2, 8, 9, 10, 53, 63, 73, 83], 83)).to.equal(7);\n    expect(sortedSearch([1, 4, 6, 7, 9, 11, 45, 98, 99], 1)).to.equal(0);\n  });","file":"javascript/sorted-array-search.js","skipped":false,"dir":"tests"},{"name":"should find negative numbers","suites":["Sorted Array Search"],"updatePoint":{"line":11,"column":34},"line":11,"code":"  it('should find negative numbers', function () {\n    expect(sortedSearch([-11, -10, -7, -5, -3, -2, 5, 8], -10)).to.equal(1);\n    expect(sortedSearch([-99, -67, -45, -33, -10, -9, -8], -8)).to.equal(6);\n  });","file":"javascript/sorted-array-search.js","skipped":false,"dir":"tests"},{"name":"should fail to find the number","suites":["Sorted Array Search"],"updatePoint":{"line":15,"column":36},"line":15,"code":"  it('should fail to find the number', function () {\n    expect(sortedSearch([3, 4, 7, 9, 44], 23)).to.equal(-1);\n  });","file":"javascript/sorted-array-search.js","skipped":false,"dir":"tests"},{"name":"should return an array of word positions","suites":["word positions"],"updatePoint":{"line":6,"column":46},"line":6,"code":"  it('should return an array of word positions', function () {\n    assert.deepEqual(wordPositions('test')('test'), [0]);\n    assert.deepEqual(wordPositions('test test test')('test'), [0, 4, 9]);\n    assert.deepEqual(wordPositions('find a word in some sentence')('in'), [11]);\n  });","file":"javascript/word-positions.js","skipped":false,"dir":"tests"},{"name":"should return an empty array when not found","suites":["word positions"],"updatePoint":{"line":11,"column":49},"line":11,"code":"  it('should return an empty array when not found', function () {\n    assert.deepEqual(wordPositions('it does not exist')('test'), []);\n  });","file":"javascript/word-positions.js","skipped":false,"dir":"tests"}]}