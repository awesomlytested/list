{"repo":"facebook/create-react-app","url":"https://github.com/facebook/create-react-app","branch":"main","configs":[{"lang":"js","dir":"test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"create-react-app","lang":"js","dir":"packages/create-react-app/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"react-dev-utils","lang":"js","dir":"packages/react-dev-utils/__tests__","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"react-error-overlay","lang":"js","dir":"packages/react-error-overlay/src/__tests__","framework":"jest","pattern":"**/*.{js,ts}"}],"tests":[{"name":"skipped locally","suites":[],"updatePoint":{"line":5,"column":23},"line":5,"code":"  test('skipped locally', () => {});","file":"fixtures/boostrap-sass/index.test.js","skipped":false,"dir":"test"},{"name":"builds in development","suites":[],"updatePoint":{"line":7,"column":29},"line":7,"code":"  test('builds in development', async () => {\n    const {\n      fulfilled\n    } = await testSetup.scripts.start({\n      smoke: true\n    });\n    expect(fulfilled).toBe(true);\n  });","file":"fixtures/boostrap-sass/index.test.js","skipped":false,"dir":"test"},{"name":"builds in production","suites":[],"updatePoint":{"line":15,"column":28},"line":15,"code":"  test('builds in production', async () => {\n    const {\n      fulfilled\n    } = await testSetup.scripts.build();\n    expect(fulfilled).toBe(true);\n  });","file":"fixtures/boostrap-sass/index.test.js","skipped":false,"dir":"test"},{"name":"builds in development","suites":[],"updatePoint":{"line":3,"column":27},"line":3,"code":"test('builds in development', async () => {\n  const {\n    fulfilled\n  } = await testSetup.scripts.start({\n    smoke: true\n  });\n  expect(fulfilled).toBe(true);\n});","file":"fixtures/builds-with-multiple-runtimes/index.test.js","skipped":false,"dir":"test"},{"name":"builds in production","suites":[],"updatePoint":{"line":11,"column":26},"line":11,"code":"test('builds in production', async () => {\n  const {\n    fulfilled\n  } = await testSetup.scripts.build();\n  expect(fulfilled).toBe(true);\n});","file":"fixtures/builds-with-multiple-runtimes/index.test.js","skipped":false,"dir":"test"},{"name":"skipped locally","suites":[],"updatePoint":{"line":5,"column":23},"line":5,"code":"  test('skipped locally', () => {});","file":"fixtures/global-scss-asset-resolution/index.test.js","skipped":false,"dir":"test"},{"name":"builds in development","suites":[],"updatePoint":{"line":7,"column":29},"line":7,"code":"  test('builds in development', async () => {\n    const {\n      fulfilled\n    } = await testSetup.scripts.start({\n      smoke: true\n    });\n    expect(fulfilled).toBe(true);\n  });","file":"fixtures/global-scss-asset-resolution/index.test.js","skipped":false,"dir":"test"},{"name":"builds in production","suites":[],"updatePoint":{"line":15,"column":28},"line":15,"code":"  test('builds in production', async () => {\n    const {\n      fulfilled\n    } = await testSetup.scripts.build();\n    expect(fulfilled).toBe(true);\n  });","file":"fixtures/global-scss-asset-resolution/index.test.js","skipped":false,"dir":"test"},{"name":"passes tests","suites":[],"updatePoint":{"line":3,"column":18},"line":3,"code":"test('passes tests', async () => {\n  const {\n    fulfilled\n  } = await testSetup.scripts.test({\n    jestEnvironment: 'node'\n  });\n  expect(fulfilled).toBe(true);\n});","file":"fixtures/issue-5176-flow-class-properties/index.test.js","skipped":false,"dir":"test"},{"name":"creates instance without","suites":[],"updatePoint":{"line":2,"column":28},"line":2,"code":"it('creates instance without', () => {\n  const app = new App();\n  expect(app.foo()).toBe('bar');\n});","file":"fixtures/issue-5176-flow-class-properties/src/App.test.js","skipped":false,"dir":"test"},{"name":"Ignores node_modules when detecting TypeScript","suites":[],"updatePoint":{"line":7,"column":52},"line":7,"code":"test('Ignores node_modules when detecting TypeScript', async () => {\n  // CRA build will check for TypeScript files by\n  // globbing for src/**/*.ts however this shouldn't\n  // include any node_modules directories within src.\n  // See https://github.com/facebook/create-react-app/issues/5947\n  const tsConfigPath = path.join(testSetup.testDirectory, 'tsconfig.json');\n  const tsPackagePath = [testSetup.testDirectory, 'src', 'node_modules', 'package', 'index.ts'];\n  const dtsSrcPath = [testSetup.testDirectory, 'src', 'types', 'index.d.ts'];\n  const tsSrcPath = path.join(testSetup.testDirectory, 'src', 'index.ts'); // Step 1.\n  // See if src/node_modules/package/index.ts is treated\n  // as a JS project\n\n  fs.mkdirSync(path.join(...tsPackagePath.slice(0, 2)));\n  fs.mkdirSync(path.join(...tsPackagePath.slice(0, 3)));\n  fs.mkdirSync(path.join(...tsPackagePath.slice(0, 4)));\n  fs.writeFileSync(path.join(...tsPackagePath));\n  await testSetup.scripts.build();\n  expect(fs.existsSync(tsConfigPath)).toBe(false); // Step 1b.\n  // See if src/types/index.d.ts is treated as a JS project\n\n  fs.mkdirSync(path.join(...dtsSrcPath.slice(0, 3)));\n  fs.writeFileSync(path.join(...dtsSrcPath));\n  await testSetup.scripts.build();\n  expect(fs.existsSync(tsConfigPath)).toBe(false); // Step 2.\n  // Add TS and ensure tsconfig.json is generated\n\n  fs.writeFileSync(tsSrcPath);\n  await testSetup.scripts.build();\n  expect(fs.existsSync(tsConfigPath)).toBe(true);\n});","file":"fixtures/issue-5947-not-typescript/index.test.js","skipped":false,"dir":"test"},{"name":"builds in development","suites":[],"updatePoint":{"line":3,"column":27},"line":3,"code":"test('builds in development', async () => {\n  const {\n    fulfilled\n  } = await testSetup.scripts.start({\n    smoke: true\n  });\n  expect(fulfilled).toBe(true);\n});","file":"fixtures/jsconfig/index.test.js","skipped":false,"dir":"test"},{"name":"builds in production","suites":[],"updatePoint":{"line":11,"column":26},"line":11,"code":"test('builds in production', async () => {\n  const {\n    fulfilled\n  } = await testSetup.scripts.build();\n  expect(fulfilled).toBe(true);\n});","file":"fixtures/jsconfig/index.test.js","skipped":false,"dir":"test"},{"name":"passes tests","suites":[],"updatePoint":{"line":17,"column":18},"line":17,"code":"test('passes tests', async () => {\n  const {\n    fulfilled\n  } = await testSetup.scripts.test();\n  expect(fulfilled).toBe(true);\n});","file":"fixtures/jsconfig/index.test.js","skipped":false,"dir":"test"},{"name":"loads modules absolutely with baseUrl","suites":[],"updatePoint":{"line":10,"column":43},"line":10,"code":"test('loads modules absolutely with baseUrl', () => {\n  const div = document.createElement('div');\n  return new Promise(resolve => {\n    ReactDOM.render( /*#__PURE__*/React.createElement(App, {\n      onReady: resolve\n    }), div);\n  });\n});","file":"fixtures/jsconfig/src/App.test.js","skipped":false,"dir":"test"},{"name":"can use mjs library in development","suites":[],"updatePoint":{"line":5,"column":40},"line":5,"code":"test('can use mjs library in development', async () => {\n  const {\n    port,\n    done\n  } = await testSetup.scripts.start();\n  const browser = await puppeteer.launch({\n    headless: true\n  });\n\n  try {\n    const page = await browser.newPage();\n    await page.goto(`http://localhost:${port}/`);\n    await page.waitForSelector('.mjs-gql-result', {\n      timeout: 0\n    });\n    const output = await page.evaluate(() => {\n      return Array.from(document.getElementsByClassName('mjs-gql-result')).pop().innerHTML;\n    });\n    expect(output).toMatchSnapshot();\n  } finally {\n    browser.close();\n    done();\n  }\n});","file":"fixtures/mjs-support/index.test.js","skipped":false,"dir":"test"},{"name":"can use mjs library in production","suites":[],"updatePoint":{"line":29,"column":39},"line":29,"code":"test('can use mjs library in production', async () => {\n  await testSetup.scripts.build();\n  const {\n    port,\n    done\n  } = await testSetup.scripts.serve();\n  const browser = await puppeteer.launch({\n    headless: true\n  });\n\n  try {\n    const page = await browser.newPage();\n    await page.goto(`http://localhost:${port}/`);\n    await page.waitForSelector('.mjs-gql-result', {\n      timeout: 0\n    });\n    const output = await page.evaluate(() => {\n      return Array.from(document.getElementsByClassName('mjs-gql-result')).pop().innerHTML;\n    });\n    expect(output).toMatchSnapshot();\n  } finally {\n    browser.close();\n    done();\n  }\n});","file":"fixtures/mjs-support/index.test.js","skipped":false,"dir":"test"},{"name":"contains a relative path in production build","suites":[],"updatePoint":{"line":9,"column":50},"line":9,"code":"test('contains a relative path in production build', async () => {\n  await testSetup.scripts.build();\n  const buildDir = path.join(testSetup.testDirectory, 'build');\n  const cssFile = path.join(buildDir, globby.sync('**/*.css', {\n    cwd: buildDir\n  }).pop());\n  const svgFile = path.join(buildDir, globby.sync('**/*.svg', {\n    cwd: buildDir\n  }).pop());\n  const desiredPath = /url\\((.+?)\\)/.exec(fs.readFileSync(cssFile, 'utf8')).pop();\n  expect(path.resolve(path.join(path.dirname(cssFile), desiredPath))).toBe(path.resolve(svgFile));\n});","file":"fixtures/relative-paths/index.test.js","skipped":false,"dir":"test"},{"name":"builds in development","suites":[],"updatePoint":{"line":3,"column":27},"line":3,"code":"test('builds in development', async () => {\n  const {\n    fulfilled\n  } = await testSetup.scripts.start({\n    smoke: true\n  });\n  expect(fulfilled).toBe(true);\n});","file":"fixtures/typescript-advanced/index.test.js","skipped":false,"dir":"test"},{"name":"builds in production","suites":[],"updatePoint":{"line":11,"column":26},"line":11,"code":"test('builds in production', async () => {\n  const {\n    fulfilled\n  } = await testSetup.scripts.build();\n  expect(fulfilled).toBe(true);\n});","file":"fixtures/typescript-advanced/index.test.js","skipped":false,"dir":"test"},{"name":"passes tests","suites":[],"updatePoint":{"line":17,"column":18},"line":17,"code":"test('passes tests', async () => {\n  const {\n    fulfilled\n  } = await testSetup.scripts.test({\n    jestEnvironment: 'node'\n  });\n  expect(fulfilled).toBe(true);\n});","file":"fixtures/typescript-advanced/index.test.js","skipped":false,"dir":"test"},{"name":"shows error overlay in browser","suites":[],"updatePoint":{"line":6,"column":36},"line":6,"code":"test('shows error overlay in browser', async () => {\n  const {\n    port,\n    done\n  } = await testSetup.scripts.start();\n  const browser = await puppeteer.launch({\n    headless: true\n  });\n\n  try {\n    const page = await browser.newPage();\n    await page.goto(`http://localhost:${port}/`);\n    await page.waitForSelector('iframe', {\n      timeout: 5000\n    });\n    const overlayMsg = await page.evaluate(() => {\n      const overlay = document.querySelector('iframe').contentWindow;\n      return overlay.document.body.innerHTML;\n    });\n    expect(overlayMsg).toContain(expectedErrorMsg);\n  } finally {\n    browser.close();\n    done();\n  }\n});","file":"fixtures/typescript-typecheck/index.test.js","skipped":false,"dir":"test"},{"name":"shows error in console (dev mode)","suites":[],"updatePoint":{"line":31,"column":39},"line":31,"code":"test('shows error in console (dev mode)', async () => {\n  const {\n    stderr\n  } = await testSetup.scripts.start({\n    smoke: true\n  });\n  expect(stderr).toContain(expectedErrorMsg);\n});","file":"fixtures/typescript-typecheck/index.test.js","skipped":false,"dir":"test"},{"name":"shows error in console (prod mode)","suites":[],"updatePoint":{"line":39,"column":40},"line":39,"code":"test('shows error in console (prod mode)', async () => {\n  const {\n    stderr\n  } = await testSetup.scripts.build();\n  expect(stderr).toContain(expectedErrorMsg);\n});","file":"fixtures/typescript-typecheck/index.test.js","skipped":false,"dir":"test"},{"name":"passes tests","suites":[],"updatePoint":{"line":3,"column":18},"line":3,"code":"test('passes tests', async () => {\n  const {\n    fulfilled\n  } = await testSetup.scripts.test({\n    jestEnvironment: 'node'\n  });\n  expect(fulfilled).toBe(true);\n});","file":"fixtures/typescript/index.test.js","skipped":false,"dir":"test"},{"name":"formats babel syntax error","suites":[],"updatePoint":{"line":7,"column":32},"line":7,"code":"test('formats babel syntax error', async () => {\n  fs.copySync(path.join(__dirname, 'src', 'AppBabel.js'), path.join(testSetup.testDirectory, 'src', 'App.js'));\n  const {\n    stdout,\n    stderr\n  } = await testSetup.scripts.build();\n  expect({\n    stdout,\n    stderr\n  }).toMatchSnapshot();\n});","file":"fixtures/webpack-message-formatting/index.test.js","skipped":false,"dir":"test"},{"name":"formats css syntax error","suites":[],"updatePoint":{"line":18,"column":30},"line":18,"code":"test('formats css syntax error', async () => {\n  fs.copySync(path.join(__dirname, 'src', 'AppCss.js'), path.join(testSetup.testDirectory, 'src', 'App.js'));\n  const {\n    stdout,\n    stderr\n  } = await testSetup.scripts.build();\n  expect({\n    stdout,\n    stderr\n  }).toMatchSnapshot();\n});","file":"fixtures/webpack-message-formatting/index.test.js","skipped":false,"dir":"test"},{"name":"formats unknown export","suites":[],"updatePoint":{"line":29,"column":28},"line":29,"code":"test('formats unknown export', async () => {\n  fs.copySync(path.join(__dirname, 'src', 'AppUnknownExport.js'), path.join(testSetup.testDirectory, 'src', 'App.js'));\n  const {\n    stdout,\n    stderr\n  } = await testSetup.scripts.build();\n  expect({\n    stdout,\n    stderr\n  }).toMatchSnapshot();\n});","file":"fixtures/webpack-message-formatting/index.test.js","skipped":false,"dir":"test"},{"name":"formats aliased unknown export","suites":[],"updatePoint":{"line":40,"column":36},"line":40,"code":"test('formats aliased unknown export', async () => {\n  fs.copySync(path.join(__dirname, 'src', 'AppAliasUnknownExport.js'), path.join(testSetup.testDirectory, 'src', 'App.js'));\n  const {\n    stdout,\n    stderr\n  } = await testSetup.scripts.build();\n  expect({\n    stdout,\n    stderr\n  }).toMatchSnapshot();\n});","file":"fixtures/webpack-message-formatting/index.test.js","skipped":false,"dir":"test"},{"name":"formats no default export","suites":[],"updatePoint":{"line":51,"column":31},"line":51,"code":"test('formats no default export', async () => {\n  fs.copySync(path.join(__dirname, 'src', 'AppNoDefault.js'), path.join(testSetup.testDirectory, 'src', 'App.js'));\n  const {\n    stdout,\n    stderr\n  } = await testSetup.scripts.build();\n  expect({\n    stdout,\n    stderr\n  }).toMatchSnapshot();\n});","file":"fixtures/webpack-message-formatting/index.test.js","skipped":false,"dir":"test"},{"name":"formats missing package","suites":[],"updatePoint":{"line":62,"column":29},"line":62,"code":"test('formats missing package', async () => {\n  fs.copySync(path.join(__dirname, 'src', 'AppMissingPackage.js'), path.join(testSetup.testDirectory, 'src', 'App.js'));\n  let {\n    stdout,\n    stderr\n  } = await testSetup.scripts.build();\n\n  if (process.platform === 'win32') {\n    stderr = stderr.replace('.\\\\src\\\\App.js', './src/App.js');\n  }\n\n  expect({\n    stdout,\n    stderr\n  }).toMatchSnapshot();\n});","file":"fixtures/webpack-message-formatting/index.test.js","skipped":false,"dir":"test"},{"name":"formats eslint warning","suites":[],"updatePoint":{"line":78,"column":28},"line":78,"code":"test('formats eslint warning', async () => {\n  fs.copySync(path.join(__dirname, 'src', 'AppLintWarning.js'), path.join(testSetup.testDirectory, 'src', 'App.js'));\n  let {\n    stdout,\n    stderr\n  } = await testSetup.scripts.build();\n  const sizeIndex = stdout.indexOf('File sizes after gzip');\n\n  if (sizeIndex !== -1) {\n    stdout = stdout.substring(0, sizeIndex);\n  }\n\n  expect({\n    stdout,\n    stderr\n  }).toMatchSnapshot();\n});","file":"fixtures/webpack-message-formatting/index.test.js","skipped":false,"dir":"test"},{"name":"formats eslint error","suites":[],"updatePoint":{"line":95,"column":26},"line":95,"code":"test('formats eslint error', async () => {\n  fs.copySync(path.join(__dirname, 'src', 'AppLintError.js'), path.join(testSetup.testDirectory, 'src', 'App.js'));\n  const {\n    stdout,\n    stderr\n  } = await testSetup.scripts.build();\n  expect({\n    stdout,\n    stderr\n  }).toMatchSnapshot();\n});","file":"fixtures/webpack-message-formatting/index.test.js","skipped":false,"dir":"test"},{"name":"helps when users tries to use sass","suites":[],"updatePoint":{"line":106,"column":40},"line":106,"code":"test('helps when users tries to use sass', async () => {\n  fs.copySync(path.join(__dirname, 'src', 'AppSass.js'), path.join(testSetup.testDirectory, 'src', 'App.js'));\n  const {\n    stdout,\n    stderr\n  } = await testSetup.scripts.build();\n  expect(stdout).toBeFalsy(); // TODO: Snapshots differ between Node 10/12 as the call stack log output has changed.\n\n  expect(stderr).toContain('To import Sass files, you first need to install sass.');\n});","file":"fixtures/webpack-message-formatting/index.test.js","skipped":false,"dir":"test"},{"name":"formats file not found error","suites":[],"updatePoint":{"line":116,"column":34},"line":116,"code":"test('formats file not found error', async () => {\n  fs.copySync(path.join(__dirname, 'src', 'AppUnknownFile.js'), path.join(testSetup.testDirectory, 'src', 'App.js'));\n  let {\n    stdout,\n    stderr\n  } = await testSetup.scripts.build();\n\n  if (process.platform === 'win32') {\n    stderr = stderr.replace('.\\\\src\\\\App.js', './src/App.js').replace('.\\\\src', './src');\n  }\n\n  expect({\n    stdout,\n    stderr\n  }).toMatchSnapshot();\n});","file":"fixtures/webpack-message-formatting/index.test.js","skipped":false,"dir":"test"},{"name":"formats case sensitive path error","suites":[],"updatePoint":{"line":132,"column":39},"line":132,"code":"test('formats case sensitive path error', async () => {\n  fs.copySync(path.join(__dirname, 'src', 'AppIncorrectCase.js'), path.join(testSetup.testDirectory, 'src', 'App.js'));\n  const {\n    stdout,\n    stderr\n  } = await testSetup.scripts.start({\n    smoke: true\n  });\n\n  if (process.platform === 'darwin') {\n    expect(stderr).toMatch(`Cannot find file: 'export5.js' does not match the corresponding name on disk: './src/Export5.js'.`);\n  } else {\n    expect(stderr).not.toEqual(''); // TODO: figure out how we can test this on Linux/Windows\n    // I believe getting this working requires we tap into enhanced-resolve\n    // pipeline, which is debt we don't want to take on right now.\n  }\n});","file":"fixtures/webpack-message-formatting/index.test.js","skipped":false,"dir":"test"},{"name":"formats out of scope error","suites":[],"updatePoint":{"line":149,"column":32},"line":149,"code":"test('formats out of scope error', async () => {\n  fs.copySync(path.join(__dirname, 'src', 'AppOutOfScopeImport.js'), path.join(testSetup.testDirectory, 'src', 'App.js'));\n  let {\n    stdout,\n    stderr\n  } = await testSetup.scripts.build();\n\n  if (process.platform === 'win32') {\n    stderr = stderr.replace('.\\\\src\\\\App.js', './src/App.js');\n  }\n\n  expect({\n    stdout,\n    stderr\n  }).toMatchSnapshot();\n});","file":"fixtures/webpack-message-formatting/index.test.js","skipped":false,"dir":"test"},{"name":"check yarn installation","suites":["create-react-app"],"updatePoint":{"line":58,"column":29},"line":58,"code":"  it('check yarn installation', async () => {\n    const {\n      exitCode\n    } = await execa('yarn', ['--version']); // Assert for exit code\n\n    expect(exitCode).toBe(0);\n  });","file":"integration/create-react-app/index.test.js","skipped":false,"dir":"test"},{"name":"asks to supply an argument if none supplied","suites":["create-react-app"],"updatePoint":{"line":65,"column":49},"line":65,"code":"  it('asks to supply an argument if none supplied', async () => {\n    const {\n      exitCode,\n      stderr,\n      files\n    } = await run([], {\n      reject: false\n    }); // Assertions\n\n    expect(exitCode).toBe(1);\n    expect(stderr).toContain('Please specify the project directory');\n    expect(files).toBe(null);\n  });","file":"integration/create-react-app/index.test.js","skipped":false,"dir":"test"},{"name":"creates a project on supplying a name as the argument","suites":["create-react-app"],"updatePoint":{"line":78,"column":59},"line":78,"code":"  it('creates a project on supplying a name as the argument', async () => {\n    const {\n      exitCode,\n      files\n    } = await run([projectName], {\n      cwd: __dirname\n    }); // Assert for exit code\n\n    expect(exitCode).toBe(0); // Assert for the generated files\n\n    expectAllFiles(files, generatedFiles);\n  });","file":"integration/create-react-app/index.test.js","skipped":false,"dir":"test"},{"name":"warns about conflicting files in path","suites":["create-react-app"],"updatePoint":{"line":90,"column":43},"line":90,"code":"  it('warns about conflicting files in path', async () => {\n    // Create the temporary directory\n    await mkdirp(genPath); // Create a package.json file\n\n    const pkgJson = join(genPath, 'package.json');\n    writeFileSync(pkgJson, '{ \"foo\": \"bar\" }');\n    const {\n      exitCode,\n      stdout,\n      files\n    } = await run([projectName], {\n      cwd: __dirname,\n      reject: false\n    }); // Assert for exit code\n\n    expect(exitCode).toBe(1); // Assert for the expected message\n\n    expect(stdout).toContain(`The directory ${projectName} contains files that could conflict`); // Existing file is still there\n\n    expectAllFiles(files, ['package.json']);\n  });","file":"integration/create-react-app/index.test.js","skipped":false,"dir":"test"},{"name":"creates a project in the current directory","suites":["create-react-app"],"updatePoint":{"line":111,"column":48},"line":111,"code":"  it('creates a project in the current directory', async () => {\n    // Create temporary directory\n    await mkdirp(genPath); // Create a project in the current directory\n\n    const {\n      exitCode,\n      files\n    } = await run(['.'], {\n      cwd: genPath\n    }); // Assert for exit code\n\n    expect(exitCode).toBe(0); // Assert for the generated files\n\n    expectAllFiles(files, generatedFiles);\n  });","file":"integration/create-react-app/index.test.js","skipped":false,"dir":"test"},{"name":"uses yarn as the package manager","suites":["create-react-app"],"updatePoint":{"line":126,"column":38},"line":126,"code":"  it('uses yarn as the package manager', async () => {\n    const {\n      exitCode,\n      files\n    } = await run([projectName], {\n      cwd: __dirname,\n      env: {\n        npm_config_user_agent: 'yarn'\n      }\n    }); // Assert for exit code\n\n    expect(exitCode).toBe(0); // Assert for the generated files\n\n    const generatedFilesWithYarn = generatedFiles.map(file => file === 'package-lock.json' ? 'yarn.lock' : file);\n    expectAllFiles(files, generatedFilesWithYarn);\n  });","file":"integration/create-react-app/index.test.js","skipped":false,"dir":"test"},{"name":"creates a project based on the typescript template","suites":["create-react-app"],"updatePoint":{"line":142,"column":56},"line":142,"code":"  it('creates a project based on the typescript template', async () => {\n    const {\n      exitCode,\n      files\n    } = await run([projectName, '--template', 'typescript'], {\n      cwd: __dirname\n    }); // Assert for exit code\n\n    expect(exitCode).toBe(0); // Assert for the generated files\n\n    expectAllFiles(files, [...generatedFiles, 'tsconfig.json']);\n  });","file":"integration/create-react-app/index.test.js","skipped":false,"dir":"test"},{"name":"no options gives cra-template","suites":["getTemplateInstallPackage"],"updatePoint":{"line":14,"column":35},"line":14,"code":"  it('no options gives cra-template', async () => {\n    await expect(getTemplateInstallPackage()).resolves.toBe('cra-template');\n  });","file":"getTemplateInstallPackage.test.js","skipped":false,"dir":"packages/create-react-app/__tests__"},{"name":"cra-template gives cra-template","suites":["getTemplateInstallPackage"],"updatePoint":{"line":17,"column":37},"line":17,"code":"  it('cra-template gives cra-template', async () => {\n    await expect(getTemplateInstallPackage('cra-template')).resolves.toBe('cra-template');\n  });","file":"getTemplateInstallPackage.test.js","skipped":false,"dir":"packages/create-react-app/__tests__"},{"name":"cra-template-typescript gives cra-template-typescript","suites":["getTemplateInstallPackage"],"updatePoint":{"line":20,"column":59},"line":20,"code":"  it('cra-template-typescript gives cra-template-typescript', async () => {\n    await expect(getTemplateInstallPackage('cra-template-typescript')).resolves.toBe('cra-template-typescript');\n  });","file":"getTemplateInstallPackage.test.js","skipped":false,"dir":"packages/create-react-app/__tests__"},{"name":"typescript gives cra-template-typescript","suites":["getTemplateInstallPackage"],"updatePoint":{"line":23,"column":46},"line":23,"code":"  it('typescript gives cra-template-typescript', async () => {\n    await expect(getTemplateInstallPackage('typescript')).resolves.toBe('cra-template-typescript');\n  });","file":"getTemplateInstallPackage.test.js","skipped":false,"dir":"packages/create-react-app/__tests__"},{"name":"typescript@next gives cra-template-typescript@next","suites":["getTemplateInstallPackage"],"updatePoint":{"line":26,"column":56},"line":26,"code":"  it('typescript@next gives cra-template-typescript@next', async () => {\n    await expect(getTemplateInstallPackage('typescript@next')).resolves.toBe('cra-template-typescript@next');\n  });","file":"getTemplateInstallPackage.test.js","skipped":false,"dir":"packages/create-react-app/__tests__"},{"name":"cra-template@next gives cra-template@next","suites":["getTemplateInstallPackage"],"updatePoint":{"line":29,"column":47},"line":29,"code":"  it('cra-template@next gives cra-template@next', async () => {\n    await expect(getTemplateInstallPackage('cra-template@next')).resolves.toBe('cra-template@next');\n  });","file":"getTemplateInstallPackage.test.js","skipped":false,"dir":"packages/create-react-app/__tests__"},{"name":"cra-template-typescript@next gives cra-template-typescript@next","suites":["getTemplateInstallPackage"],"updatePoint":{"line":32,"column":69},"line":32,"code":"  it('cra-template-typescript@next gives cra-template-typescript@next', async () => {\n    await expect(getTemplateInstallPackage('cra-template-typescript@next')).resolves.toBe('cra-template-typescript@next');\n  });","file":"getTemplateInstallPackage.test.js","skipped":false,"dir":"packages/create-react-app/__tests__"},{"name":"@iansu gives @iansu/cra-template","suites":["getTemplateInstallPackage"],"updatePoint":{"line":35,"column":38},"line":35,"code":"  it('@iansu gives @iansu/cra-template', async () => {\n    await expect(getTemplateInstallPackage('@iansu')).resolves.toBe('@iansu/cra-template');\n  });","file":"getTemplateInstallPackage.test.js","skipped":false,"dir":"packages/create-react-app/__tests__"},{"name":"@iansu/cra-template gives @iansu/cra-template","suites":["getTemplateInstallPackage"],"updatePoint":{"line":38,"column":51},"line":38,"code":"  it('@iansu/cra-template gives @iansu/cra-template', async () => {\n    await expect(getTemplateInstallPackage('@iansu/cra-template')).resolves.toBe('@iansu/cra-template');\n  });","file":"getTemplateInstallPackage.test.js","skipped":false,"dir":"packages/create-react-app/__tests__"},{"name":"@iansu/cra-template@next gives @iansu/cra-template@next","suites":["getTemplateInstallPackage"],"updatePoint":{"line":41,"column":61},"line":41,"code":"  it('@iansu/cra-template@next gives @iansu/cra-template@next', async () => {\n    await expect(getTemplateInstallPackage('@iansu/cra-template@next')).resolves.toBe('@iansu/cra-template@next');\n  });","file":"getTemplateInstallPackage.test.js","skipped":false,"dir":"packages/create-react-app/__tests__"},{"name":"@iansu/cra-template-typescript@next gives @iansu/cra-template-typescript@next","suites":["getTemplateInstallPackage"],"updatePoint":{"line":44,"column":83},"line":44,"code":"  it('@iansu/cra-template-typescript@next gives @iansu/cra-template-typescript@next', async () => {\n    await expect(getTemplateInstallPackage('@iansu/cra-template-typescript@next')).resolves.toBe('@iansu/cra-template-typescript@next');\n  });","file":"getTemplateInstallPackage.test.js","skipped":false,"dir":"packages/create-react-app/__tests__"},{"name":"http://example.com/cra-template.tar.gz gives http://example.com/cra-template.tar.gz","suites":["getTemplateInstallPackage"],"updatePoint":{"line":47,"column":89},"line":47,"code":"  it('http://example.com/cra-template.tar.gz gives http://example.com/cra-template.tar.gz', async () => {\n    await expect(getTemplateInstallPackage('http://example.com/cra-template.tar.gz')).resolves.toBe('http://example.com/cra-template.tar.gz');\n  });","file":"getTemplateInstallPackage.test.js","skipped":false,"dir":"packages/create-react-app/__tests__"},{"name":"normal file","suites":["ignore watch files regex"],"updatePoint":{"line":12,"column":17},"line":12,"code":"  it('normal file', () => {\n    const appSrc = '/root/src/';\n    const isIgnored = ignoredFiles(appSrc).test('/foo');\n    const isIgnoredInSrc = ignoredFiles(appSrc).test('/root/src/foo');\n    expect(isIgnored).toBe(false);\n    expect(isIgnoredInSrc).toBe(false);\n  });","file":"ignoredFiles.test.js","skipped":false,"dir":"packages/react-dev-utils/__tests__"},{"name":"node modules","suites":["ignore watch files regex"],"updatePoint":{"line":19,"column":18},"line":19,"code":"  it('node modules', () => {\n    const appSrc = '/root/src/';\n    const isIgnored = ignoredFiles(appSrc).test('/root/node_modules/foo');\n    expect(isIgnored).toBe(true);\n  });","file":"ignoredFiles.test.js","skipped":false,"dir":"packages/react-dev-utils/__tests__"},{"name":"node modules inside source directory","suites":["ignore watch files regex"],"updatePoint":{"line":24,"column":42},"line":24,"code":"  it('node modules inside source directory', () => {\n    const appSrc = '/root/src/';\n    const isIgnored = ignoredFiles(appSrc).test('/root/src/node_modules/foo');\n    const isIgnoredMoreThanOneLevel = ignoredFiles(appSrc).test('/root/src/bar/node_modules/foo');\n    expect(isIgnored).toBe(false);\n    expect(isIgnoredMoreThanOneLevel).toBe(false);\n  });","file":"ignoredFiles.test.js","skipped":false,"dir":"packages/react-dev-utils/__tests__"},{"name":"path contains source directory","suites":["ignore watch files regex"],"updatePoint":{"line":31,"column":36},"line":31,"code":"  it('path contains source directory', () => {\n    const appSrc = '/root/src/';\n    const isIgnored = ignoredFiles(appSrc).test('/bar/root/src/node_modules/foo');\n    expect(isIgnored).toBe(true);\n  });","file":"ignoredFiles.test.js","skipped":false,"dir":"packages/react-dev-utils/__tests__"},{"name":"path starts with source directory","suites":["ignore watch files regex"],"updatePoint":{"line":36,"column":39},"line":36,"code":"  it('path starts with source directory', () => {\n    const appSrc = '/root/src/';\n    const isIgnored = ignoredFiles(appSrc).test('/root/src2/node_modules/foo');\n    expect(isIgnored).toBe(true);\n  });","file":"ignoredFiles.test.js","skipped":false,"dir":"packages/react-dev-utils/__tests__"},{"name":"extracts last source map directive","suites":[],"updatePoint":{"line":8,"column":40},"line":8,"code":"test('extracts last source map directive', async () => {\n  const res = await extractSourceMapUrl(`test.js`, `//# sourceMappingURL=test.js.map\\nconsole.log('a')\\n//# sourceMappingURL=bundle.js.map`);\n  expect(res).toBe('bundle.js.map');\n});","file":"extract-source-map.js","skipped":false,"dir":"packages/react-error-overlay/src/__tests__"},{"name":"errors when no source map","suites":[],"updatePoint":{"line":12,"column":31},"line":12,"code":"test('errors when no source map', async () => {\n  const testFileName = 'test.js';\n  let error;\n\n  try {\n    await extractSourceMapUrl(testFileName, `console.log('hi')\\n\\nconsole.log('bye')`);\n  } catch (e) {\n    error = e;\n  }\n\n  expect(error).toBe(`Cannot find a source map directive for ${testFileName}.`);\n});","file":"extract-source-map.js","skipped":false,"dir":"packages/react-error-overlay/src/__tests__"},{"name":"finds an external source map","suites":[],"updatePoint":{"line":12,"column":34},"line":12,"code":"test('finds an external source map', async () => {\n  const file = fs.readFileSync(resolve(__dirname, '../../fixtures/bundle.mjs')).toString('utf8');\n  fetch.mockResponseOnce(fs.readFileSync(resolve(__dirname, '../../fixtures/bundle.mjs.map')).toString('utf8'));\n  const sm = await getSourceMap('/', file);\n  expect(sm.getOriginalPosition(26122, 21)).toEqual({\n    line: 7,\n    column: 0,\n    source: 'webpack:///packages/react-scripts/template/src/App.js'\n  });\n});","file":"get-source-map.js","skipped":false,"dir":"packages/react-error-overlay/src/__tests__"},{"name":"find an inline source map","suites":[],"updatePoint":{"line":22,"column":31},"line":22,"code":"test('find an inline source map', async () => {\n  const sourceName = 'test.js';\n  const file = fs.readFileSync(resolve(__dirname, '../../fixtures/inline.mjs')).toString('utf8');\n  const fileO = fs.readFileSync(resolve(__dirname, '../../fixtures/inline.es6.mjs')).toString('utf8');\n  const sm = await getSourceMap('/', file);\n  expect(sm.getSources()).toEqual([sourceName]);\n  expect(sm.getSource(sourceName)).toBe(fileO);\n  expect(sm.getGeneratedPosition(sourceName, 5, 10)).toEqual({\n    line: 10,\n    column: 8\n  });\n});","file":"get-source-map.js","skipped":false,"dir":"packages/react-error-overlay/src/__tests__"},{"name":"error on a source map with unsupported encoding","suites":[],"updatePoint":{"line":34,"column":53},"line":34,"code":"test('error on a source map with unsupported encoding', async () => {\n  expect.assertions(2);\n  const file = fs.readFileSync(resolve(__dirname, '../../fixtures/junk-inline.mjs')).toString('utf8');\n  let error;\n\n  try {\n    await getSourceMap('/', file);\n  } catch (e) {\n    error = e;\n  }\n\n  expect(error instanceof Error).toBe(true);\n  expect(error.message).toBe('Sorry, non-base64 inline source-map encoding is not supported.');\n});","file":"get-source-map.js","skipped":false,"dir":"packages/react-error-overlay/src/__tests__"},{"name":"should return lines around from a string","suites":[],"updatePoint":{"line":9,"column":46},"line":9,"code":"test('should return lines around from a string', () => {\n  expect(getLinesAround(4, 2, arr)).toMatchSnapshot();\n});","file":"lines-around.js","skipped":false,"dir":"packages/react-error-overlay/src/__tests__"},{"name":"should return lines around from an array","suites":[],"updatePoint":{"line":12,"column":46},"line":12,"code":"test('should return lines around from an array', () => {\n  expect(getLinesAround(4, 2, arr.join('\\n'))).toMatchSnapshot();\n});","file":"lines-around.js","skipped":false,"dir":"packages/react-error-overlay/src/__tests__"},{"name":"basic error; 0 context","suites":[],"updatePoint":{"line":11,"column":28},"line":11,"code":"test('basic error; 0 context', async () => {\n  expect.assertions(1);\n  const error = 'TypeError: document.body.missing is not a function\\n    at App.componentDidMount (http://localhost:3000/static/js/bundle.js:26122:21)\\n    at http://localhost:3000/static/js/bundle.js:30091:25\\n    at measureLifeCyclePerf (http://localhost:3000/static/js/bundle.js:29901:12)\\n    at http://localhost:3000/static/js/bundle.js:30090:11\\n    at CallbackQueue.notifyAll (http://localhost:3000/static/js/bundle.js:13256:22)\\n    at ReactReconcileTransaction.close (http://localhost:3000/static/js/bundle.js:35124:26)\\n    at ReactReconcileTransaction.closeAll (http://localhost:3000/static/js/bundle.js:7390:25)\\n    at ReactReconcileTransaction.perform (http://localhost:3000/static/js/bundle.js:7337:16)\\n    at batchedMountComponentIntoNode (http://localhost:3000/static/js/bundle.js:14204:15)\\n    at ReactDefaultBatchingStrategyTransaction.perform (http://localhost:3000/static/js/bundle.js:7324:20)\\n    at Object.batchedUpdates (http://localhost:3000/static/js/bundle.js:33900:26)\\n    at Object.batchedUpdates (http://localhost:3000/static/js/bundle.js:2181:27)\\n    at Object._renderNewRootComponent (http://localhost:3000/static/js/bundle.js:14398:18)\\n    at Object._renderSubtreeIntoContainer (http://localhost:3000/static/js/bundle.js:14479:32)\\n    at Object.render (http://localhost:3000/static/js/bundle.js:14500:23)\\n    at Object.friendlySyntaxErrorLabel (http://localhost:3000/static/js/bundle.js:17287:20)\\n    at __webpack_require__ (http://localhost:3000/static/js/bundle.js:660:30)\\n    at fn (http://localhost:3000/static/js/bundle.js:84:20)\\n    at Object.<anonymous> (http://localhost:3000/static/js/bundle.js:41219:18)\\n    at __webpack_require__ (http://localhost:3000/static/js/bundle.js:660:30)\\n    at validateFormat (http://localhost:3000/static/js/bundle.js:709:39)\\n    at http://localhost:3000/static/js/bundle.js:712:10';\n  fetch.mockResponseOnce(fs.readFileSync(resolve(__dirname, '../../fixtures/bundle.mjs')).toString('utf8'));\n  fetch.mockResponseOnce(fs.readFileSync(resolve(__dirname, '../../fixtures/bundle.mjs.map')).toString('utf8'));\n  const frames = await map(parse(error), 0);\n  expect(frames).toEqual(JSON.parse(fs.readFileSync(resolve(__dirname, '../../fixtures/bundle.json')).toString('utf8')));\n});","file":"mapper.js","skipped":false,"dir":"packages/react-error-overlay/src/__tests__"},{"name":"default context (3)","suites":[],"updatePoint":{"line":19,"column":25},"line":19,"code":"test('default context (3)', async () => {\n  expect.assertions(1);\n  const error = 'TypeError: document.body.missing is not a function\\n    at App.componentDidMount (http://localhost:3000/static/js/bundle.js:26122:21)';\n  fetch.mockResponseOnce(fs.readFileSync(resolve(__dirname, '../../fixtures/bundle.mjs')).toString('utf8'));\n  fetch.mockResponseOnce(fs.readFileSync(resolve(__dirname, '../../fixtures/bundle.mjs.map')).toString('utf8'));\n  const frames = await map(parse(error));\n  expect(frames).toEqual(JSON.parse(fs.readFileSync(resolve(__dirname, '../../fixtures/bundle-default.json')).toString('utf8')));\n});","file":"mapper.js","skipped":false,"dir":"packages/react-error-overlay/src/__tests__"},{"name":"bad comes back same","suites":[],"updatePoint":{"line":27,"column":25},"line":27,"code":"test('bad comes back same', async () => {\n  expect.assertions(2);\n  const error = 'TypeError: document.body.missing is not a function\\n    at App.componentDidMount (A:1:2)';\n  const orig = parse(error);\n  expect(orig).toEqual([{\n    _originalColumnNumber: null,\n    _originalFileName: null,\n    _originalFunctionName: null,\n    _originalLineNumber: null,\n    _originalScriptCode: null,\n    _scriptCode: null,\n    columnNumber: 2,\n    fileName: 'A',\n    functionName: 'App.componentDidMount',\n    lineNumber: 1\n  }]);\n  const frames = await map(orig);\n  expect(frames).toEqual(orig);\n});","file":"mapper.js","skipped":false,"dir":"packages/react-error-overlay/src/__tests__"},{"name":"stack with eval","suites":[],"updatePoint":{"line":8,"column":21},"line":8,"code":"test('stack with eval', () => {\n  expect(parse(`TypeError: window[f] is not a function\n    at e (file:///Users/joe/Documents/Development/OSS/stack-frame/index.html:25:18)\n    at eval (eval at c (file:///Users/joe/Documents/Development/OSS/stack-frame/index.html:12:9), <anonymous>:1:1)\n    at a (file:///Users/joe/Documents/Development/OSS/stack-frame/index.html:8:9)\n    at file:///Users/joe/Documents/Development/OSS/stack-frame/index.html:32:7`)).toMatchSnapshot();\n});","file":"parser/chrome.js","skipped":false,"dir":"packages/react-error-overlay/src/__tests__"},{"name":"eval 1","suites":[],"updatePoint":{"line":8,"column":12},"line":8,"code":"test('eval 1', () => {\n  expect(parse(`test1@file:///C:/example.html line 7 > eval line 1 > eval:1:1\ntest2@file:///C:/example.html line 7 > eval:1:1\ntest3@file:///C:/example.html:7:6`.split('\\n'))).toMatchSnapshot();\n});","file":"parser/firefox.js","skipped":false,"dir":"packages/react-error-overlay/src/__tests__"},{"name":"eval 2","suites":[],"updatePoint":{"line":13,"column":12},"line":13,"code":"test('eval 2', () => {\n  expect(parse({\n    stack: `anonymous@file:///C:/example.html line 7 > Function:1:1\n@file:///C:/example.html:7:6`\n  })).toMatchSnapshot();\n});","file":"parser/firefox.js","skipped":false,"dir":"packages/react-error-overlay/src/__tests__"},{"name":"stack with eval","suites":[],"updatePoint":{"line":19,"column":21},"line":19,"code":"test('stack with eval', () => {\n  expect(parse(`e@file:///Users/joe/Documents/Development/OSS/stack-frame/index.html:25:9\n@file:///Users/joe/Documents/Development/OSS/stack-frame/index.html line 17 > eval:1:1\na@file:///Users/joe/Documents/Development/OSS/stack-frame/index.html:8:9\n@file:///Users/joe/Documents/Development/OSS/stack-frame/index.html:32:7`)).toMatchSnapshot();\n});","file":"parser/firefox.js","skipped":false,"dir":"packages/react-error-overlay/src/__tests__"},{"name":"v14 to v29","suites":[],"updatePoint":{"line":25,"column":16},"line":25,"code":"test('v14 to v29', () => {\n  expect(parse(`trace@file:///C:/example.html:9\nb@file:///C:/example.html:16\na@file:///C:/example.html:19\n@file:///C:/example.html:21`)).toMatchSnapshot();\n});","file":"parser/firefox.js","skipped":false,"dir":"packages/react-error-overlay/src/__tests__"},{"name":"v30+","suites":[],"updatePoint":{"line":31,"column":10},"line":31,"code":"test('v30+', () => {\n  expect(parse(`trace@file:///C:/example.html:9:17\nb@file:///C:/example.html:16:13\na@file:///C:/example.html:19:13\n@file:///C:/example.html:21:9`)).toMatchSnapshot();\n});","file":"parser/firefox.js","skipped":false,"dir":"packages/react-error-overlay/src/__tests__"},{"name":"throws on null","suites":[],"updatePoint":{"line":8,"column":20},"line":8,"code":"test('throws on null', () => {\n  let error;\n\n  try {\n    parse(null);\n  } catch (e) {\n    error = e;\n  }\n\n  expect(error instanceof Error).toBe(true);\n  expect(error.message).toBe('You cannot pass a null object.');\n});","file":"parser/generic.js","skipped":false,"dir":"packages/react-error-overlay/src/__tests__"},{"name":"throws on unparsable","suites":[],"updatePoint":{"line":20,"column":26},"line":20,"code":"test('throws on unparsable', () => {\n  let error;\n\n  try {\n    parse({});\n  } catch (e) {\n    error = e;\n  }\n\n  expect(error instanceof Error).toBe(true);\n  expect(error.message).toBe('The error you provided does not contain a stack trace.');\n});","file":"parser/generic.js","skipped":false,"dir":"packages/react-error-overlay/src/__tests__"},{"name":"15.y.z","suites":[],"updatePoint":{"line":8,"column":12},"line":8,"code":"test('15.y.z', () => {\n  expect(parse(`Warning: Each child in array should have a unique \"key\" prop. Check render method of \\`FileA\\`.\n     in div (at FileA.js:9)\n     in FileA (at App.js:9)\n     in div (at App.js:8)\n     in App (at index.js:7)`)).toMatchSnapshot();\n});","file":"parser/react.js","skipped":false,"dir":"packages/react-error-overlay/src/__tests__"},{"name":"stack with eval","suites":[],"updatePoint":{"line":8,"column":21},"line":8,"code":"test('stack with eval', () => {\n  expect(parse(`e@file:///Users/joe/Documents/Development/OSS/stack-frame/index.html:25:18\neval code\neval@[native code]\na@file:///Users/joe/Documents/Development/OSS/stack-frame/index.html:8:10\nglobal code@file:///Users/joe/Documents/Development/OSS/stack-frame/index.html:32:8`)).toMatchSnapshot();\n});","file":"parser/safari.js","skipped":false,"dir":"packages/react-error-overlay/src/__tests__"},{"name":"script line shape","suites":[],"updatePoint":{"line":8,"column":23},"line":8,"code":"test('script line shape', () => {\n  expect(new ScriptLine(5, 'foobar', true)).toMatchSnapshot();\n});","file":"script-lines.js","skipped":false,"dir":"packages/react-error-overlay/src/__tests__"},{"name":"script line to provide default highlight","suites":[],"updatePoint":{"line":11,"column":46},"line":11,"code":"test('script line to provide default highlight', () => {\n  expect(new ScriptLine(5, 'foobar')).toMatchSnapshot();\n});","file":"script-lines.js","skipped":false,"dir":"packages/react-error-overlay/src/__tests__"},{"name":"proper empty shape","suites":[],"updatePoint":{"line":8,"column":24},"line":8,"code":"test('proper empty shape', () => {\n  const empty = new StackFrame();\n  expect(empty).toMatchSnapshot();\n  expect(empty.getFunctionName()).toBe('(anonymous function)');\n  expect(empty.getSource()).toBe('');\n  expect(empty.toString()).toBe('(anonymous function)');\n});","file":"stack-frame.js","skipped":false,"dir":"packages/react-error-overlay/src/__tests__"},{"name":"proper full shape","suites":[],"updatePoint":{"line":15,"column":23},"line":15,"code":"test('proper full shape', () => {\n  const empty = new StackFrame('a', 'b.js', 13, 37, undefined, 'apple', 'test.js', 37, 13);\n  expect(empty).toMatchSnapshot();\n  expect(empty.getFunctionName()).toBe('a');\n  expect(empty.getSource()).toBe('b.js:13:37');\n  expect(empty.toString()).toBe('a (b.js:13:37)');\n});","file":"stack-frame.js","skipped":false,"dir":"packages/react-error-overlay/src/__tests__"},{"name":"basic warning","suites":[],"updatePoint":{"line":11,"column":19},"line":11,"code":"test('basic warning', async () => {\n  expect.assertions(2);\n  const error = `Warning: Each child in an array or iterator should have a unique \"key\" prop. Check the render method of \\`B\\`. See https://fb.me/react-warning-keys for more information.\n    in div (at B.js:8)\n    in B (at A.js:6)\n    in A (at App.js:8)\n    in div (at App.js:10)\n    in App (at index.js:6)`;\n  fetch.mockResponseOnce(fs.readFileSync(resolve(__dirname, '../../fixtures/bundle_u.mjs')).toString('utf8'));\n  fetch.mockResponseOnce(fs.readFileSync(resolve(__dirname, '../../fixtures/bundle_u.mjs.map')).toString('utf8'));\n  const frames = await unmap('/static/js/bundle.js', parse(error), 0);\n  const expected = JSON.parse(fs.readFileSync(resolve(__dirname, '../../fixtures/bundle2.json')).toString('utf8'));\n  expect(frames).toEqual(expected);\n  fetch.mockResponseOnce(fs.readFileSync(resolve(__dirname, '../../fixtures/bundle_u.mjs')).toString('utf8'));\n  fetch.mockResponseOnce(fs.readFileSync(resolve(__dirname, '../../fixtures/bundle_u.mjs.map')).toString('utf8'));\n  expect(await unmap('/static/js/bundle.js', expected)).toEqual(expected);\n});","file":"unmapper.js","skipped":false,"dir":"packages/react-error-overlay/src/__tests__"},{"name":"default context & unfound source","suites":[],"updatePoint":{"line":28,"column":38},"line":28,"code":"test('default context & unfound source', async () => {\n  expect.assertions(1);\n  const error = `Warning: Each child in an array or iterator should have a unique \"key\" prop. Check the render method of \\`B\\`. See https://fb.me/react-warning-keys for more information.\n    in div (at B.js:8)\n    in unknown (at blabla.js:10)`;\n  fetch.mockResponseOnce(fs.readFileSync(resolve(__dirname, '../../fixtures/bundle_u.mjs')).toString('utf8'));\n  fetch.mockResponseOnce(fs.readFileSync(resolve(__dirname, '../../fixtures/bundle_u.mjs.map')).toString('utf8'));\n  const frames = await unmap('/static/js/bundle.js', parse(error));\n  expect(frames).toMatchSnapshot();\n});","file":"unmapper.js","skipped":false,"dir":"packages/react-error-overlay/src/__tests__"}]}