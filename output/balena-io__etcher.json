{"repo":"balena-io/etcher","url":"https://github.com/balena-io/etcher","branch":"master","configs":[{"package":"balena-etcher","lang":"js","dir":"tests","framework":"mocha","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"should have no drives by default","suites":["Model: availableDrives","availableDrives"],"updatePoint":{"line":25,"column":40,"index":1078},"line":25,"code":"    it('should have no drives by default', function () {\n      expect(availableDrives.getDrives()).to.deep.equal([]);\n    });","file":"gui/models/available-drives.spec.ts","skipped":false,"dir":"tests"},{"name":"should throw if no drives","suites":["Model: availableDrives","availableDrives",".setDrives()"],"updatePoint":{"line":29,"column":35,"index":1242},"line":29,"code":"      it('should throw if no drives', function () {\n        expect(function () {\n          // @ts-ignore\n          availableDrives.setDrives();\n        }).to.throw('Missing drives');\n      });","file":"gui/models/available-drives.spec.ts","skipped":false,"dir":"tests"},{"name":"should throw if drives is not an array","suites":["Model: availableDrives","availableDrives",".setDrives()"],"updatePoint":{"line":35,"column":48,"index":1448},"line":35,"code":"      it('should throw if drives is not an array', function () {\n        expect(function () {\n          // @ts-ignore\n          availableDrives.setDrives(123);\n        }).to.throw('Invalid drives: 123');\n      });","file":"gui/models/available-drives.spec.ts","skipped":false,"dir":"tests"},{"name":"should throw if drives is not an array of objects","suites":["Model: availableDrives","availableDrives",".setDrives()"],"updatePoint":{"line":41,"column":59,"index":1673},"line":41,"code":"      it('should throw if drives is not an array of objects', function () {\n        expect(function () {\n          // @ts-ignore\n          availableDrives.setDrives([123, 123, 123]);\n        }).to.throw('Invalid drives: 123,123,123');\n      });","file":"gui/models/available-drives.spec.ts","skipped":false,"dir":"tests"},{"name":"should return false","suites":["Model: availableDrives","availableDrives","given no drives",".hasAvailableDrives()"],"updatePoint":{"line":50,"column":31,"index":1998},"line":50,"code":"        it('should return false', function () {\n          expect(availableDrives.hasAvailableDrives()).to.be.false;\n        });","file":"gui/models/available-drives.spec.ts","skipped":false,"dir":"tests"},{"name":"should be able to set drives","suites":["Model: availableDrives","availableDrives","given no drives",".setDrives()"],"updatePoint":{"line":55,"column":40,"index":2190},"line":55,"code":"        it('should be able to set drives', function () {\n          const drives = [{\n            device: '/dev/sdb',\n            description: 'Foo',\n            size: 14000000000,\n            mountpoints: [{\n              path: '/mnt/foo'\n            }],\n            isSystem: false\n          }];\n          availableDrives.setDrives(drives);\n          expect(availableDrives.getDrives()).to.deep.equal(drives);\n        });","file":"gui/models/available-drives.spec.ts","skipped":false,"dir":"tests"},{"name":"should be able to set drives with extra properties","suites":["Model: availableDrives","availableDrives","given no drives",".setDrives()"],"updatePoint":{"line":68,"column":62,"index":2635},"line":68,"code":"        it('should be able to set drives with extra properties', function () {\n          const drives = [{\n            device: '/dev/sdb',\n            description: 'Foo',\n            size: 14000000000,\n            mountpoints: [{\n              path: '/mnt/foo'\n            }],\n            isSystem: false,\n            foo: {\n              bar: 'baz',\n              qux: 5\n            },\n            set: {}\n          }];\n          availableDrives.setDrives(drives);\n          expect(availableDrives.getDrives()).to.deep.equal(drives);\n        });","file":"gui/models/available-drives.spec.ts","skipped":false,"dir":"tests"},{"name":"should be able to set drives with null sizes","suites":["Model: availableDrives","availableDrives","given no drives",".setDrives()"],"updatePoint":{"line":86,"column":56,"index":3176},"line":86,"code":"        it('should be able to set drives with null sizes', function () {\n          const drives = [{\n            device: '/dev/sdb',\n            description: 'Foo',\n            size: null,\n            mountpoints: [{\n              path: '/mnt/foo'\n            }],\n            isSystem: false\n          }];\n          availableDrives.setDrives(drives);\n          expect(availableDrives.getDrives()).to.deep.equal(drives);\n        });","file":"gui/models/available-drives.spec.ts","skipped":false,"dir":"tests"},{"name":"should auto-select a single valid available drive","suites":["Model: availableDrives","availableDrives","given no drives",".setDrives()","given no selected image and no selected drive"],"updatePoint":{"line":103,"column":63,"index":3780},"line":103,"code":"          it('should auto-select a single valid available drive', function () {\n            expect(selectionState.hasDrive()).to.be.false;\n            availableDrives.setDrives([{\n              device: '/dev/sdb',\n              name: 'Foo',\n              size: 999999999,\n              mountpoints: [{\n                path: '/mnt/foo'\n              }],\n              isSystem: false,\n              isReadOnly: false\n            }]);\n            expect(selectionState.hasDrive()).to.be.true;\n            expect(selectionState.getSelectedDevices()[0]).to.equal('/dev/sdb');\n          });","file":"gui/models/available-drives.spec.ts","skipped":false,"dir":"tests"},{"name":"should not auto-select when there are multiple valid available drives","suites":["Model: availableDrives","availableDrives","given no drives",".setDrives()","given a selected image and no selected drive"],"updatePoint":{"line":141,"column":83,"index":5216},"line":141,"code":"          it('should not auto-select when there are multiple valid available drives', function () {\n            expect(selectionState.hasDrive()).to.be.false;\n            availableDrives.setDrives([{\n              device: '/dev/sdb',\n              name: 'Foo',\n              size: 999999999,\n              mountpoints: [{\n                path: '/mnt/foo'\n              }],\n              isSystem: false,\n              isReadOnly: false\n            }, {\n              device: '/dev/sdc',\n              name: 'Bar',\n              size: 999999999,\n              mountpoints: [{\n                path: '/mnt/bar'\n              }],\n              isSystem: false,\n              isReadOnly: false\n            }]);\n            expect(selectionState.hasDrive()).to.be.false;\n          });","file":"gui/models/available-drives.spec.ts","skipped":false,"dir":"tests"},{"name":"should auto-select a single valid available drive","suites":["Model: availableDrives","availableDrives","given no drives",".setDrives()","given a selected image and no selected drive"],"updatePoint":{"line":164,"column":63,"index":5975},"line":164,"code":"          it('should auto-select a single valid available drive', function () {\n            expect(selectionState.hasDrive()).to.be.false;\n            availableDrives.setDrives([{\n              device: '/dev/sdb',\n              name: 'Foo',\n              size: 2000000000,\n              mountpoints: [{\n                path: '/mnt/foo'\n              }],\n              isSystem: false,\n              isReadOnly: false\n            }]);\n            expect(selectionState.getSelectedDevices()[0]).to.equal('/dev/sdb');\n          });","file":"gui/models/available-drives.spec.ts","skipped":false,"dir":"tests"},{"name":"should not auto-select a single too small drive","suites":["Model: availableDrives","availableDrives","given no drives",".setDrives()","given a selected image and no selected drive"],"updatePoint":{"line":178,"column":61,"index":6502},"line":178,"code":"          it('should not auto-select a single too small drive', function () {\n            expect(selectionState.hasDrive()).to.be.false;\n            availableDrives.setDrives([{\n              device: '/dev/sdb',\n              name: 'Foo',\n              size: 99999999,\n              mountpoints: [{\n                path: '/mnt/foo'\n              }],\n              isSystem: false,\n              isReadOnly: false\n            }]);\n            expect(selectionState.hasDrive()).to.be.false;\n          });","file":"gui/models/available-drives.spec.ts","skipped":false,"dir":"tests"},{"name":"should not auto-select a single drive that doesn't meet the recommended size","suites":["Model: availableDrives","availableDrives","given no drives",".setDrives()","given a selected image and no selected drive"],"updatePoint":{"line":192,"column":90,"index":7034},"line":192,"code":"          it(\"should not auto-select a single drive that doesn't meet the recommended size\", function () {\n            expect(selectionState.hasDrive()).to.be.false;\n            availableDrives.setDrives([{\n              device: '/dev/sdb',\n              name: 'Foo',\n              size: 1500000000,\n              mountpoints: [{\n                path: '/mnt/foo'\n              }],\n              isSystem: false,\n              isReadOnly: false\n            }]);\n            expect(selectionState.hasDrive()).to.be.false;\n          });","file":"gui/models/available-drives.spec.ts","skipped":false,"dir":"tests"},{"name":"should not auto-select a single protected drive","suites":["Model: availableDrives","availableDrives","given no drives",".setDrives()","given a selected image and no selected drive"],"updatePoint":{"line":206,"column":61,"index":7539},"line":206,"code":"          it('should not auto-select a single protected drive', function () {\n            expect(selectionState.hasDrive()).to.be.false;\n            availableDrives.setDrives([{\n              device: '/dev/sdb',\n              name: 'Foo',\n              size: 2000000000,\n              mountpoints: [{\n                path: '/mnt/foo'\n              }],\n              isSystem: false,\n              isReadOnly: true\n            }]);\n            expect(selectionState.hasDrive()).to.be.false;\n          });","file":"gui/models/available-drives.spec.ts","skipped":false,"dir":"tests"},{"name":"should not auto-select a source drive","suites":["Model: availableDrives","availableDrives","given no drives",".setDrives()","given a selected image and no selected drive"],"updatePoint":{"line":220,"column":51,"index":8033},"line":220,"code":"          it('should not auto-select a source drive', function () {\n            expect(selectionState.hasDrive()).to.be.false;\n            availableDrives.setDrives([{\n              device: '/dev/sdb',\n              name: 'Foo',\n              size: 2000000000,\n              mountpoints: [{\n                path: path.dirname(this.imagePath)\n              }],\n              isSystem: false,\n              isReadOnly: false\n            }]);\n            expect(selectionState.hasDrive()).to.be.false;\n          });","file":"gui/models/available-drives.spec.ts","skipped":false,"dir":"tests"},{"name":"should not auto-select a single system drive","suites":["Model: availableDrives","availableDrives","given no drives",".setDrives()","given a selected image and no selected drive"],"updatePoint":{"line":234,"column":58,"index":8553},"line":234,"code":"          it('should not auto-select a single system drive', function () {\n            expect(selectionState.hasDrive()).to.be.false;\n            availableDrives.setDrives([{\n              device: '/dev/sdb',\n              name: 'Foo',\n              size: 2000000000,\n              mountpoints: [{\n                path: '/mnt/foo'\n              }],\n              isSystem: true,\n              isReadOnly: false\n            }]);\n            expect(selectionState.hasDrive()).to.be.false;\n          });","file":"gui/models/available-drives.spec.ts","skipped":false,"dir":"tests"},{"name":"should not auto-select a single large size drive","suites":["Model: availableDrives","availableDrives","given no drives",".setDrives()","given a selected image and no selected drive"],"updatePoint":{"line":248,"column":62,"index":9058},"line":248,"code":"          it('should not auto-select a single large size drive', function () {\n            expect(selectionState.hasDrive()).to.be.false;\n            availableDrives.setDrives([{\n              device: '/dev/sdb',\n              name: 'Foo',\n              size: constraints.LARGE_DRIVE_SIZE + 1,\n              mountpoints: [{\n                path: '/mnt/foo'\n              }],\n              system: false,\n              protected: false\n            }]);\n            expect(selectionState.hasDrive()).to.be.false;\n          });","file":"gui/models/available-drives.spec.ts","skipped":false,"dir":"tests"},{"name":"should be deleted if its not contained in the available drives anymore","suites":["Model: availableDrives","availableDrives","given drives","given one of the drives was selected"],"updatePoint":{"line":305,"column":82,"index":10749},"line":305,"code":"        it('should be deleted if its not contained in the available drives anymore', function () {\n          expect(selectionState.hasDrive()).to.be.true;\n\n          // We have to provide at least two drives, otherwise,\n          // if we only provide one, the single drive will be\n          // auto-selected.\n          availableDrives.setDrives([{\n            device: '/dev/sda',\n            name: 'USB Drive',\n            size: 9999999,\n            mountpoints: [{\n              path: '/mnt/bar'\n            }],\n            isSystem: false,\n            isReadOnly: false\n          }, {\n            device: '/dev/sdb',\n            name: 'SD Card',\n            size: 9999999,\n            mountpoints: [{\n              path: '/mnt/foo'\n            }],\n            isSystem: false,\n            isReadOnly: false\n          }]);\n          expect(selectionState.hasDrive()).to.be.false;\n        });","file":"gui/models/available-drives.spec.ts","skipped":false,"dir":"tests"},{"name":"should return true","suites":["Model: availableDrives","availableDrives","given drives",".hasAvailableDrives()"],"updatePoint":{"line":334,"column":30,"index":11655},"line":334,"code":"        it('should return true', function () {\n          const hasDrives = availableDrives.hasAvailableDrives();\n          expect(hasDrives).to.be.true;\n        });","file":"gui/models/available-drives.spec.ts","skipped":false,"dir":"tests"},{"name":"should keep the same drives if equal","suites":["Model: availableDrives","availableDrives","given drives",".setDrives()"],"updatePoint":{"line":340,"column":48,"index":11893},"line":340,"code":"        it('should keep the same drives if equal', function () {\n          availableDrives.setDrives(this.drives);\n          expect(availableDrives.getDrives()).to.deep.equal(this.drives);\n        });","file":"gui/models/available-drives.spec.ts","skipped":false,"dir":"tests"},{"name":"should return empty array given an empty array","suites":["Model: availableDrives","availableDrives","given drives",".setDrives()"],"updatePoint":{"line":344,"column":58,"index":12104},"line":344,"code":"        it('should return empty array given an empty array', function () {\n          availableDrives.setDrives([]);\n          expect(availableDrives.getDrives()).to.deep.equal([]);\n        });","file":"gui/models/available-drives.spec.ts","skipped":false,"dir":"tests"},{"name":"should consider drives with different $$hashKey the same","suites":["Model: availableDrives","availableDrives","given drives",".setDrives()"],"updatePoint":{"line":348,"column":68,"index":12307},"line":348,"code":"        it('should consider drives with different $$hashKey the same', function () {\n          this.drives[0].$$haskey = 1234;\n          availableDrives.setDrives(this.drives);\n          expect(availableDrives.getDrives()).to.deep.equal(this.drives);\n        });","file":"gui/models/available-drives.spec.ts","skipped":false,"dir":"tests"},{"name":"getImage() should return undefined","suites":["Model: selectionState","given a clean state"],"updatePoint":{"line":29,"column":42,"index":1250},"line":29,"code":"    it('getImage() should return undefined', function () {\n      expect(selectionState.getImage()).to.be.undefined;\n    });","file":"gui/models/selection-state.spec.ts","skipped":false,"dir":"tests"},{"name":"hasDrive() should return false","suites":["Model: selectionState","given a clean state"],"updatePoint":{"line":32,"column":38,"index":1370},"line":32,"code":"    it('hasDrive() should return false', function () {\n      const hasDrive = selectionState.hasDrive();\n      expect(hasDrive).to.be.false;\n    });","file":"gui/models/selection-state.spec.ts","skipped":false,"dir":"tests"},{"name":"hasImage() should return false","suites":["Model: selectionState","given a clean state"],"updatePoint":{"line":36,"column":38,"index":1519},"line":36,"code":"    it('hasImage() should return false', function () {\n      const hasImage = selectionState.hasImage();\n      expect(hasImage).to.be.false;\n    });","file":"gui/models/selection-state.spec.ts","skipped":false,"dir":"tests"},{"name":".getSelectedDrives() should return []","suites":["Model: selectionState","given a clean state"],"updatePoint":{"line":40,"column":45,"index":1675},"line":40,"code":"    it('.getSelectedDrives() should return []', function () {\n      expect(selectionState.getSelectedDrives()).to.deep.equal([]);\n    });","file":"gui/models/selection-state.spec.ts","skipped":false,"dir":"tests"},{"name":"should not deselect when warning is attached to image-drive pair","suites":["Model: selectionState","given one available drive",".selectDrive()"],"updatePoint":{"line":58,"column":74,"index":2228},"line":58,"code":"      it('should not deselect when warning is attached to image-drive pair', function () {\n        this.drives[0].size = 64e10;\n        availableDrives.setDrives(this.drives);\n        selectionState.selectDrive('/dev/disk2');\n        availableDrives.setDrives(this.drives);\n        expect(selectionState.getSelectedDevices()[0]).to.equal('/dev/disk2');\n      });","file":"gui/models/selection-state.spec.ts","skipped":false,"dir":"tests"},{"name":"should return true","suites":["Model: selectionState","given a drive",".hasDrive()"],"updatePoint":{"line":86,"column":28,"index":3067},"line":86,"code":"      it('should return true', function () {\n        const hasDrive = selectionState.hasDrive();\n        expect(hasDrive).to.be.true;\n      });","file":"gui/models/selection-state.spec.ts","skipped":false,"dir":"tests"},{"name":"should queue the drive","suites":["Model: selectionState","given a drive",".selectDrive()"],"updatePoint":{"line":92,"column":32,"index":3268},"line":92,"code":"      it('should queue the drive', function () {\n        selectionState.selectDrive('/dev/disk5');\n        const drives = selectionState.getSelectedDevices();\n        const lastDriveDevice = drives.pop();\n        const lastDrive = availableDrives.getDrives().find(drive => drive.device === lastDriveDevice);\n        expect(lastDrive).to.deep.equal({\n          device: '/dev/disk5',\n          name: 'USB Drive',\n          size: 999999999,\n          isReadOnly: false\n        });\n      });","file":"gui/models/selection-state.spec.ts","skipped":false,"dir":"tests"},{"name":"should clear drive","suites":["Model: selectionState","given a drive",".deselectDrive()"],"updatePoint":{"line":106,"column":28,"index":3807},"line":106,"code":"      it('should clear drive', function () {\n        const firstDevice = selectionState.getSelectedDevices()[0];\n        selectionState.deselectDrive(firstDevice);\n        const devices = selectionState.getSelectedDevices();\n        expect(devices.length).to.equal(0);\n      });","file":"gui/models/selection-state.spec.ts","skipped":false,"dir":"tests"},{"name":"should return that single selected drive","suites":["Model: selectionState","given a drive",".getSelectedDrives()"],"updatePoint":{"line":114,"column":50,"index":4167},"line":114,"code":"      it('should return that single selected drive', function () {\n        expect(selectionState.getSelectedDrives()).to.deep.equal([{\n          device: '/dev/disk2',\n          name: 'USB Drive',\n          size: 999999999,\n          isReadOnly: false\n        }]);\n      });","file":"gui/models/selection-state.spec.ts","skipped":false,"dir":"tests"},{"name":"should be able to add more drives","suites":["Model: selectionState","given several drives"],"updatePoint":{"line":153,"column":41,"index":5278},"line":153,"code":"    it('should be able to add more drives', function () {\n      selectionState.selectDrive(this.drives[2].device);\n      expect(selectionState.getSelectedDevices()).to.deep.equal(this.drives.map(drive => drive.device));\n    });","file":"gui/models/selection-state.spec.ts","skipped":false,"dir":"tests"},{"name":"should be able to remove drives","suites":["Model: selectionState","given several drives"],"updatePoint":{"line":157,"column":39,"index":5504},"line":157,"code":"    it('should be able to remove drives', function () {\n      selectionState.deselectDrive(this.drives[1].device);\n      expect(selectionState.getSelectedDevices()).to.deep.equal([this.drives[0].device]);\n    });","file":"gui/models/selection-state.spec.ts","skipped":false,"dir":"tests"},{"name":"should keep system drives selected","suites":["Model: selectionState","given several drives"],"updatePoint":{"line":161,"column":42,"index":5720},"line":161,"code":"    it('should keep system drives selected', function () {\n      const systemDrive = {\n        device: '/dev/disk0',\n        name: 'USB Drive 0',\n        size: 999999999,\n        isReadOnly: false,\n        system: true\n      };\n      const newDrives = [...this.drives.slice(0, -1), systemDrive];\n      availableDrives.setDrives(newDrives);\n      selectionState.selectDrive(systemDrive.device);\n      availableDrives.setDrives(newDrives);\n      expect(selectionState.getSelectedDevices()).to.deep.equal(newDrives.map(drive => drive.device));\n    });","file":"gui/models/selection-state.spec.ts","skipped":false,"dir":"tests"},{"name":"should be able to remove a drive","suites":["Model: selectionState","given several drives"],"updatePoint":{"line":175,"column":40,"index":6267},"line":175,"code":"    it('should be able to remove a drive', function () {\n      expect(selectionState.getSelectedDevices().length).to.equal(2);\n      selectionState.toggleDrive(this.drives[0].device);\n      expect(selectionState.getSelectedDevices()).to.deep.equal([this.drives[1].device]);\n    });","file":"gui/models/selection-state.spec.ts","skipped":false,"dir":"tests"},{"name":"should remove all drives","suites":["Model: selectionState","given several drives",".deselectAllDrives()"],"updatePoint":{"line":181,"column":34,"index":6594},"line":181,"code":"      it('should remove all drives', function () {\n        selectionState.deselectAllDrives();\n        expect(selectionState.getSelectedDevices()).to.deep.equal([]);\n      });","file":"gui/models/selection-state.spec.ts","skipped":false,"dir":"tests"},{"name":"should clear drives","suites":["Model: selectionState","given several drives",".deselectDrive()"],"updatePoint":{"line":187,"column":29,"index":6820},"line":187,"code":"      it('should clear drives', function () {\n        const devices = selectionState.getSelectedDevices();\n        selectionState.deselectDrive(devices[0]);\n        selectionState.deselectDrive(devices[1]);\n        expect(selectionState.getSelectedDevices().length).to.equal(0);\n      });","file":"gui/models/selection-state.spec.ts","skipped":false,"dir":"tests"},{"name":"should return the selected drives","suites":["Model: selectionState","given several drives",".getSelectedDrives()"],"updatePoint":{"line":195,"column":43,"index":7182},"line":195,"code":"      it('should return the selected drives', function () {\n        expect(selectionState.getSelectedDrives()).to.deep.equal([{\n          device: '/dev/disk2',\n          name: 'USB Drive 2',\n          size: 999999999,\n          isReadOnly: false\n        }, {\n          device: '/dev/sdb',\n          description: 'DataTraveler 2.0',\n          size: 999999999,\n          mountpoint: '/media/UNTITLED',\n          name: '/dev/sdb',\n          system: false,\n          isReadOnly: false\n        }]);\n      });","file":"gui/models/selection-state.spec.ts","skipped":false,"dir":"tests"},{"name":"should be able to set a drive","suites":["Model: selectionState","given no drive",".selectDrive()"],"updatePoint":{"line":215,"column":39,"index":7784},"line":215,"code":"      it('should be able to set a drive', function () {\n        availableDrives.setDrives([{\n          device: '/dev/disk5',\n          name: 'USB Drive',\n          size: 999999999,\n          isReadOnly: false\n        }]);\n        selectionState.selectDrive('/dev/disk5');\n        expect(selectionState.getSelectedDevices()[0]).to.equal('/dev/disk5');\n      });","file":"gui/models/selection-state.spec.ts","skipped":false,"dir":"tests"},{"name":"should throw if drive is read-only","suites":["Model: selectionState","given no drive",".selectDrive()"],"updatePoint":{"line":225,"column":44,"index":8150},"line":225,"code":"      it('should throw if drive is read-only', function () {\n        availableDrives.setDrives([{\n          device: '/dev/disk1',\n          name: 'USB Drive',\n          size: 999999999,\n          isReadOnly: true\n        }]);\n        expect(function () {\n          selectionState.selectDrive('/dev/disk1');\n        }).to.throw('The drive is write-protected');\n      });","file":"gui/models/selection-state.spec.ts","skipped":false,"dir":"tests"},{"name":"should throw if the drive is not available","suites":["Model: selectionState","given no drive",".selectDrive()"],"updatePoint":{"line":236,"column":52,"index":8528},"line":236,"code":"      it('should throw if the drive is not available', function () {\n        availableDrives.setDrives([{\n          device: '/dev/disk1',\n          name: 'USB Drive',\n          size: 999999999,\n          isReadOnly: true\n        }]);\n        expect(function () {\n          selectionState.selectDrive('/dev/disk5');\n        }).to.throw('The drive is not available: /dev/disk5');\n      });","file":"gui/models/selection-state.spec.ts","skipped":false,"dir":"tests"},{"name":"should throw if device is not a string","suites":["Model: selectionState","given no drive",".selectDrive()"],"updatePoint":{"line":247,"column":48,"index":8912},"line":247,"code":"      it('should throw if device is not a string', function () {\n        expect(function () {\n          // @ts-ignore\n          selectionState.selectDrive(123);\n        }).to.throw('Invalid drive: 123');\n      });","file":"gui/models/selection-state.spec.ts","skipped":false,"dir":"tests"},{"name":"should throw if drive is not large enough","suites":["Model: selectionState","given an image",".selectDrive()"],"updatePoint":{"line":270,"column":51,"index":9646},"line":270,"code":"      it('should throw if drive is not large enough', function () {\n        availableDrives.setDrives([{\n          device: '/dev/disk2',\n          name: 'USB Drive',\n          size: 999999998,\n          isReadOnly: false\n        }]);\n        expect(function () {\n          selectionState.selectDrive('/dev/disk2');\n        }).to.throw('The drive is not large enough');\n      });","file":"gui/models/selection-state.spec.ts","skipped":false,"dir":"tests"},{"name":"should return the image","suites":["Model: selectionState","given an image",".getImage()"],"updatePoint":{"line":283,"column":33,"index":10057},"line":283,"code":"      it('should return the image', function () {\n        expect(selectionState.getImage()).to.deep.equal(this.image);\n      });","file":"gui/models/selection-state.spec.ts","skipped":false,"dir":"tests"},{"name":"should return true","suites":["Model: selectionState","given an image",".hasImage()"],"updatePoint":{"line":288,"column":28,"index":10231},"line":288,"code":"      it('should return true', function () {\n        const hasImage = selectionState.hasImage();\n        expect(hasImage).to.be.true;\n      });","file":"gui/models/selection-state.spec.ts","skipped":false,"dir":"tests"},{"name":"should override the image","suites":["Model: selectionState","given an image",".selectImage()"],"updatePoint":{"line":294,"column":35,"index":10435},"line":294,"code":"      it('should override the image', function () {\n        selectionState.selectSource({\n          description: 'bar.img',\n          displayName: 'bar.img',\n          path: 'bar.img',\n          extension: 'img',\n          size: 999999999,\n          isSizeEstimated: false,\n          SourceType: File\n        });\n        const imagePath = selectionState.getImage()?.path;\n        expect(imagePath).to.equal('bar.img');\n        const imageSize = selectionState.getImage()?.size;\n        expect(imageSize).to.equal(999999999);\n      });","file":"gui/models/selection-state.spec.ts","skipped":false,"dir":"tests"},{"name":"should clear the image","suites":["Model: selectionState","given an image",".deselectImage()"],"updatePoint":{"line":311,"column":32,"index":11022},"line":311,"code":"      it('should clear the image', function () {\n        selectionState.deselectImage();\n        const imagePath = selectionState.getImage()?.path;\n        expect(imagePath).to.be.undefined;\n        const imageSize = selectionState.getImage()?.size;\n        expect(imageSize).to.be.undefined;\n      });","file":"gui/models/selection-state.spec.ts","skipped":false,"dir":"tests"},{"name":"should be able to set an image","suites":["Model: selectionState","given no image",".selectImage()"],"updatePoint":{"line":333,"column":40,"index":11744},"line":333,"code":"      it('should be able to set an image', function () {\n        selectionState.selectSource(image);\n        const imagePath = selectionState.getImage()?.path;\n        expect(imagePath).to.equal('foo.img');\n        const imageSize = selectionState.getImage()?.size;\n        expect(imageSize).to.equal(999999999);\n      });","file":"gui/models/selection-state.spec.ts","skipped":false,"dir":"tests"},{"name":"should be able to set an image with an archive extension","suites":["Model: selectionState","given no image",".selectImage()"],"updatePoint":{"line":340,"column":66,"index":12093},"line":340,"code":"      it('should be able to set an image with an archive extension', function () {\n        selectionState.selectSource({\n          ...image,\n          path: 'foo.zip',\n          archiveExtension: 'zip'\n        });\n        const imagePath = selectionState.getImage()?.path;\n        expect(imagePath).to.equal('foo.zip');\n      });","file":"gui/models/selection-state.spec.ts","skipped":false,"dir":"tests"},{"name":"should infer a compressed raw image if the penultimate extension is missing","suites":["Model: selectionState","given no image",".selectImage()"],"updatePoint":{"line":349,"column":85,"index":12442},"line":349,"code":"      it('should infer a compressed raw image if the penultimate extension is missing', function () {\n        selectionState.selectSource({\n          ...image,\n          path: 'foo.xz',\n          archiveExtension: 'xz'\n        });\n        const imagePath = selectionState.getImage()?.path;\n        expect(imagePath).to.equal('foo.xz');\n      });","file":"gui/models/selection-state.spec.ts","skipped":false,"dir":"tests"},{"name":"should infer a compressed raw image if the penultimate extension is not a file extension","suites":["Model: selectionState","given no image",".selectImage()"],"updatePoint":{"line":358,"column":98,"index":12801},"line":358,"code":"      it('should infer a compressed raw image if the penultimate extension is not a file extension', function () {\n        selectionState.selectSource({\n          ...image,\n          path: 'something.linux-x86-64.gz',\n          archiveExtension: 'gz'\n        });\n        const imagePath = selectionState.getImage()?.path;\n        expect(imagePath).to.equal('something.linux-x86-64.gz');\n      });","file":"gui/models/selection-state.spec.ts","skipped":false,"dir":"tests"},{"name":"should throw if the original size is a float number","suites":["Model: selectionState","given no image",".selectImage()"],"updatePoint":{"line":367,"column":61,"index":13161},"line":367,"code":"      it('should throw if the original size is a float number', function () {\n        expect(function () {\n          selectionState.selectSource({\n            ...image,\n            path: 'foo.img',\n            extension: 'img',\n            size: 999999999,\n            compressedSize: 999999999.999,\n            isSizeEstimated: false\n          });\n        }).to.throw('Invalid image compressed size: 999999999.999');\n      });","file":"gui/models/selection-state.spec.ts","skipped":false,"dir":"tests"},{"name":"should throw if the original size is negative","suites":["Model: selectionState","given no image",".selectImage()"],"updatePoint":{"line":379,"column":55,"index":13583},"line":379,"code":"      it('should throw if the original size is negative', function () {\n        expect(function () {\n          selectionState.selectSource({\n            ...image,\n            compressedSize: -1\n          });\n        }).to.throw('Invalid image compressed size: -1');\n      });","file":"gui/models/selection-state.spec.ts","skipped":false,"dir":"tests"},{"name":"should throw if the final size is a float number","suites":["Model: selectionState","given no image",".selectImage()"],"updatePoint":{"line":387,"column":58,"index":13862},"line":387,"code":"      it('should throw if the final size is a float number', function () {\n        expect(function () {\n          selectionState.selectSource({\n            ...image,\n            size: 999999999.999\n          });\n        }).to.throw('Invalid image size: 999999999.999');\n      });","file":"gui/models/selection-state.spec.ts","skipped":false,"dir":"tests"},{"name":"should throw if the final size is negative","suites":["Model: selectionState","given no image",".selectImage()"],"updatePoint":{"line":395,"column":52,"index":14136},"line":395,"code":"      it('should throw if the final size is negative', function () {\n        expect(function () {\n          selectionState.selectSource({\n            ...image,\n            size: -1\n          });\n        }).to.throw('Invalid image size: -1');\n      });","file":"gui/models/selection-state.spec.ts","skipped":false,"dir":"tests"},{"name":"should de-select a previously selected not-large-enough drive","suites":["Model: selectionState","given no image",".selectImage()"],"updatePoint":{"line":403,"column":71,"index":14407},"line":403,"code":"      it('should de-select a previously selected not-large-enough drive', function () {\n        availableDrives.setDrives([{\n          device: '/dev/disk1',\n          name: 'USB Drive',\n          size: 123456789,\n          isReadOnly: false\n        }]);\n        selectionState.selectDrive('/dev/disk1');\n        expect(selectionState.hasDrive()).to.be.true;\n        selectionState.selectSource({\n          ...image,\n          size: 1234567890\n        });\n        expect(selectionState.hasDrive()).to.be.false;\n        selectionState.deselectImage();\n      });","file":"gui/models/selection-state.spec.ts","skipped":false,"dir":"tests"},{"name":"should de-select a previously selected not-recommended drive","suites":["Model: selectionState","given no image",".selectImage()"],"updatePoint":{"line":419,"column":70,"index":14966},"line":419,"code":"      it('should de-select a previously selected not-recommended drive', function () {\n        availableDrives.setDrives([{\n          device: '/dev/disk1',\n          name: 'USB Drive',\n          size: 1200000000,\n          isReadOnly: false\n        }]);\n        selectionState.selectDrive('/dev/disk1');\n        expect(selectionState.hasDrive()).to.be.true;\n        selectionState.selectSource({\n          ...image,\n          recommendedDriveSize: 1500000000\n        });\n        expect(selectionState.hasDrive()).to.be.false;\n        selectionState.deselectImage();\n      });","file":"gui/models/selection-state.spec.ts","skipped":false,"dir":"tests"},{"name":"should de-select a previously selected source drive","suites":["Model: selectionState","given no image",".selectImage()"],"updatePoint":{"line":435,"column":61,"index":15533},"line":435,"code":"      it('should de-select a previously selected source drive', function () {\n        const imagePath = process.platform === 'win32' ? 'E:\\\\bar\\\\foo.img' : '/mnt/bar/foo.img';\n        availableDrives.setDrives([{\n          device: '/dev/disk1',\n          name: 'USB Drive',\n          size: 1200000000,\n          mountpoints: [{\n            path: path.dirname(imagePath)\n          }],\n          isReadOnly: false\n        }]);\n        selectionState.selectDrive('/dev/disk1');\n        expect(selectionState.hasDrive()).to.be.true;\n        selectionState.selectSource({\n          ...image,\n          path: imagePath,\n          extension: 'img',\n          size: 999999999\n        });\n        expect(selectionState.hasDrive()).to.be.false;\n        selectionState.deselectImage();\n      });","file":"gui/models/selection-state.spec.ts","skipped":false,"dir":"tests"},{"name":"should clear all selections","suites":["Model: selectionState","given a drive and an image",".clear()"],"updatePoint":{"line":480,"column":37,"index":16893},"line":480,"code":"      it('should clear all selections', function () {\n        expect(selectionState.hasDrive()).to.be.true;\n        expect(selectionState.hasImage()).to.be.true;\n        selectionState.clear();\n        expect(selectionState.hasDrive()).to.be.false;\n        expect(selectionState.hasImage()).to.be.false;\n      });","file":"gui/models/selection-state.spec.ts","skipped":false,"dir":"tests"},{"name":"getImagePath() should return undefined","suites":["Model: selectionState","given a drive and an image",".deselectImage()"],"updatePoint":{"line":492,"column":48,"index":17354},"line":492,"code":"      it('getImagePath() should return undefined', function () {\n        const imagePath = selectionState.getImage()?.path;\n        expect(imagePath).to.be.undefined;\n      });","file":"gui/models/selection-state.spec.ts","skipped":false,"dir":"tests"},{"name":"getImageSize() should return undefined","suites":["Model: selectionState","given a drive and an image",".deselectImage()"],"updatePoint":{"line":496,"column":48,"index":17531},"line":496,"code":"      it('getImageSize() should return undefined', function () {\n        const imageSize = selectionState.getImage()?.size;\n        expect(imageSize).to.be.undefined;\n      });","file":"gui/models/selection-state.spec.ts","skipped":false,"dir":"tests"},{"name":"should not clear any drives","suites":["Model: selectionState","given a drive and an image",".deselectImage()"],"updatePoint":{"line":500,"column":37,"index":17697},"line":500,"code":"      it('should not clear any drives', function () {\n        expect(selectionState.hasDrive()).to.be.true;\n      });","file":"gui/models/selection-state.spec.ts","skipped":false,"dir":"tests"},{"name":"hasImage() should return false","suites":["Model: selectionState","given a drive and an image",".deselectImage()"],"updatePoint":{"line":503,"column":40,"index":17818},"line":503,"code":"      it('hasImage() should return false', function () {\n        const hasImage = selectionState.hasImage();\n        expect(hasImage).to.be.false;\n      });","file":"gui/models/selection-state.spec.ts","skipped":false,"dir":"tests"},{"name":"getImagePath() should return the image path","suites":["Model: selectionState","given a drive and an image",".deselectAllDrives()"],"updatePoint":{"line":512,"column":53,"index":18132},"line":512,"code":"      it('getImagePath() should return the image path', function () {\n        const imagePath = selectionState.getImage()?.path;\n        expect(imagePath).to.equal('foo.img');\n      });","file":"gui/models/selection-state.spec.ts","skipped":false,"dir":"tests"},{"name":"getImageSize() should return the image size","suites":["Model: selectionState","given a drive and an image",".deselectAllDrives()"],"updatePoint":{"line":516,"column":53,"index":18318},"line":516,"code":"      it('getImageSize() should return the image size', function () {\n        const imageSize = selectionState.getImage()?.size;\n        expect(imageSize).to.equal(999999999);\n      });","file":"gui/models/selection-state.spec.ts","skipped":false,"dir":"tests"},{"name":"hasDrive() should return false","suites":["Model: selectionState","given a drive and an image",".deselectAllDrives()"],"updatePoint":{"line":520,"column":40,"index":18491},"line":520,"code":"      it('hasDrive() should return false', function () {\n        const hasDrive = selectionState.hasDrive();\n        expect(hasDrive).to.be.false;\n      });","file":"gui/models/selection-state.spec.ts","skipped":false,"dir":"tests"},{"name":"should not clear the image","suites":["Model: selectionState","given a drive and an image",".deselectAllDrives()"],"updatePoint":{"line":524,"column":36,"index":18644},"line":524,"code":"      it('should not clear the image', function () {\n        expect(selectionState.hasImage()).to.be.true;\n      });","file":"gui/models/selection-state.spec.ts","skipped":false,"dir":"tests"},{"name":"should clear all selections","suites":["Model: selectionState","given several drives",".clear()"],"updatePoint":{"line":562,"column":37,"index":19695},"line":562,"code":"      it('should clear all selections', function () {\n        expect(selectionState.hasDrive()).to.be.true;\n        expect(selectionState.hasImage()).to.be.true;\n        selectionState.clear();\n        expect(selectionState.hasDrive()).to.be.false;\n        expect(selectionState.hasImage()).to.be.false;\n      });","file":"gui/models/selection-state.spec.ts","skipped":false,"dir":"tests"},{"name":"should be able to remove the drive","suites":["Model: selectionState",".toggleDrive()","given a selected drive"],"updatePoint":{"line":597,"column":44,"index":20806},"line":597,"code":"      it('should be able to remove the drive', function () {\n        expect(selectionState.hasDrive()).to.be.true;\n        selectionState.toggleDrive(this.drive.device);\n        expect(selectionState.hasDrive()).to.be.false;\n      });","file":"gui/models/selection-state.spec.ts","skipped":false,"dir":"tests"},{"name":"should not replace a different drive","suites":["Model: selectionState",".toggleDrive()","given a selected drive"],"updatePoint":{"line":602,"column":46,"index":21043},"line":602,"code":"      it('should not replace a different drive', function () {\n        const drive = {\n          device: '/dev/disk2',\n          name: 'USB Drive',\n          size: 999999999,\n          isReadOnly: false\n        };\n        expect(selectionState.getSelectedDevices()[0]).to.deep.equal(this.drive.device);\n        selectionState.toggleDrive(drive.device);\n        expect(selectionState.getSelectedDevices()[0]).to.deep.equal(this.drive.device);\n      });","file":"gui/models/selection-state.spec.ts","skipped":false,"dir":"tests"},{"name":"should set the drive","suites":["Model: selectionState",".toggleDrive()","given no selected drive"],"updatePoint":{"line":632,"column":30,"index":21992},"line":632,"code":"      it('should set the drive', function () {\n        const drive = {\n          device: '/dev/disk2',\n          name: 'USB Drive 2',\n          size: 999999999,\n          isReadOnly: false\n        };\n        expect(selectionState.hasDrive()).to.be.false;\n        selectionState.toggleDrive(drive.device);\n        expect(selectionState.getSelectedDevices()[0]).to.equal('/dev/disk2');\n      });","file":"gui/models/selection-state.spec.ts","skipped":false,"dir":"tests"},{"name":"should have the ipc config set to silent","suites":["Browser: childWriter"],"updatePoint":{"line":21,"column":46,"index":800},"line":21,"code":"  it('should have the ipc config set to silent', function () {\n    expect(ipc.config.silent).to.be.true;\n  });","file":"gui/modules/child-writer.spec.ts","skipped":false,"dir":"tests"},{"name":"should report 0% if percentage == 0 but speed != 0","suites":["Browser: progressStatus",".titleFromFlashState()"],"updatePoint":{"line":31,"column":58,"index":1066},"line":31,"code":"    it('should report 0% if percentage == 0 but speed != 0', function () {\n      expect(progressStatus.titleFromFlashState(this.state)).to.equal('0% Flashing...');\n    });","file":"gui/modules/progress-status.spec.ts","skipped":false,"dir":"tests"},{"name":"should handle percentage == 0, flashing","suites":["Browser: progressStatus",".titleFromFlashState()"],"updatePoint":{"line":34,"column":47,"index":1227},"line":34,"code":"    it('should handle percentage == 0, flashing', function () {\n      this.state.speed = 0;\n      expect(progressStatus.titleFromFlashState(this.state)).to.equal('0% Flashing...');\n    });","file":"gui/modules/progress-status.spec.ts","skipped":false,"dir":"tests"},{"name":"should handle percentage == 0, verifying","suites":["Browser: progressStatus",".titleFromFlashState()"],"updatePoint":{"line":38,"column":48,"index":1417},"line":38,"code":"    it('should handle percentage == 0, verifying', function () {\n      this.state.speed = 0;\n      this.state.type = 'verifying';\n      expect(progressStatus.titleFromFlashState(this.state)).to.equal('0% Validating...');\n    });","file":"gui/modules/progress-status.spec.ts","skipped":false,"dir":"tests"},{"name":"should handle percentage == 50, flashing","suites":["Browser: progressStatus",".titleFromFlashState()"],"updatePoint":{"line":43,"column":48,"index":1646},"line":43,"code":"    it('should handle percentage == 50, flashing', function () {\n      this.state.percentage = 50;\n      expect(progressStatus.titleFromFlashState(this.state)).to.equal('50% Flashing...');\n    });","file":"gui/modules/progress-status.spec.ts","skipped":false,"dir":"tests"},{"name":"should handle percentage == 50, verifying","suites":["Browser: progressStatus",".titleFromFlashState()"],"updatePoint":{"line":47,"column":49,"index":1844},"line":47,"code":"    it('should handle percentage == 50, verifying', function () {\n      this.state.percentage = 50;\n      this.state.type = 'verifying';\n      expect(progressStatus.titleFromFlashState(this.state)).to.equal('50% Validating...');\n    });","file":"gui/modules/progress-status.spec.ts","skipped":false,"dir":"tests"},{"name":"should handle percentage == 100, flashing","suites":["Browser: progressStatus",".titleFromFlashState()"],"updatePoint":{"line":52,"column":49,"index":2081},"line":52,"code":"    it('should handle percentage == 100, flashing', function () {\n      this.state.percentage = 100;\n      expect(progressStatus.titleFromFlashState(this.state)).to.equal('Finishing...');\n    });","file":"gui/modules/progress-status.spec.ts","skipped":false,"dir":"tests"},{"name":"should handle percentage == 100, verifying","suites":["Browser: progressStatus",".titleFromFlashState()"],"updatePoint":{"line":56,"column":50,"index":2278},"line":56,"code":"    it('should handle percentage == 100, verifying', function () {\n      this.state.percentage = 100;\n      this.state.type = 'verifying';\n      expect(progressStatus.titleFromFlashState(this.state)).to.equal('Finishing...');\n    });","file":"gui/modules/progress-status.spec.ts","skipped":false,"dir":"tests"},{"name":"should handle percentage == 100, validating","suites":["Browser: progressStatus",".titleFromFlashState()"],"updatePoint":{"line":61,"column":51,"index":2513},"line":61,"code":"    it('should handle percentage == 100, validating', function () {\n      this.state.percentage = 100;\n      expect(progressStatus.titleFromFlashState(this.state)).to.equal('Finishing...');\n    });","file":"gui/modules/progress-status.spec.ts","skipped":false,"dir":"tests"},{"name":"should translate 0-100 percentages to 0-1 ranges","suites":["Browser: WindowProgress","windowProgress","given a stubbed current window",".set()"],"updatePoint":{"line":37,"column":60,"index":1400},"line":37,"code":"        it('should translate 0-100 percentages to 0-1 ranges', function () {\n          windowProgress.set(this.state);\n          assert.calledWith(this.setProgressBarSpy, 0.85);\n        });","file":"gui/os/window-progress.spec.ts","skipped":false,"dir":"tests"},{"name":"should set 0 given 0","suites":["Browser: WindowProgress","windowProgress","given a stubbed current window",".set()"],"updatePoint":{"line":41,"column":32,"index":1562},"line":41,"code":"        it('should set 0 given 0', function () {\n          this.state.percentage = 0;\n          windowProgress.set(this.state);\n          assert.calledWith(this.setProgressBarSpy, 0);\n        });","file":"gui/os/window-progress.spec.ts","skipped":false,"dir":"tests"},{"name":"should set 1 given 100","suites":["Browser: WindowProgress","windowProgress","given a stubbed current window",".set()"],"updatePoint":{"line":46,"column":34,"index":1760},"line":46,"code":"        it('should set 1 given 100', function () {\n          this.state.percentage = 100;\n          windowProgress.set(this.state);\n          assert.calledWith(this.setProgressBarSpy, 1);\n        });","file":"gui/os/window-progress.spec.ts","skipped":false,"dir":"tests"},{"name":"should throw if given a percentage higher than 100","suites":["Browser: WindowProgress","windowProgress","given a stubbed current window",".set()"],"updatePoint":{"line":51,"column":62,"index":1988},"line":51,"code":"        it('should throw if given a percentage higher than 100', function () {\n          this.state.percentage = 101;\n          const state = this.state;\n          expect(function () {\n            windowProgress.set(state);\n          }).to.throw('Invalid percentage: 101');\n        });","file":"gui/os/window-progress.spec.ts","skipped":false,"dir":"tests"},{"name":"should throw if given a percentage less than 0","suites":["Browser: WindowProgress","windowProgress","given a stubbed current window",".set()"],"updatePoint":{"line":58,"column":58,"index":2270},"line":58,"code":"        it('should throw if given a percentage less than 0', function () {\n          this.state.percentage = -1;\n          const state = this.state;\n          expect(function () {\n            windowProgress.set(state);\n          }).to.throw('Invalid percentage: -1');\n        });","file":"gui/os/window-progress.spec.ts","skipped":false,"dir":"tests"},{"name":"should set the flashing title","suites":["Browser: WindowProgress","windowProgress","given a stubbed current window",".set()"],"updatePoint":{"line":65,"column":41,"index":2533},"line":65,"code":"        it('should set the flashing title', function () {\n          windowProgress.set(this.state);\n          assert.calledWith(this.setTitleSpy, ' – 85% Flashing...');\n        });","file":"gui/os/window-progress.spec.ts","skipped":false,"dir":"tests"},{"name":"should set the verifying title","suites":["Browser: WindowProgress","windowProgress","given a stubbed current window",".set()"],"updatePoint":{"line":69,"column":42,"index":2715},"line":69,"code":"        it('should set the verifying title', function () {\n          this.state.type = 'verifying';\n          windowProgress.set(this.state);\n          assert.calledWith(this.setTitleSpy, ' – 85% Validating...');\n        });","file":"gui/os/window-progress.spec.ts","skipped":false,"dir":"tests"},{"name":"should set the starting title","suites":["Browser: WindowProgress","windowProgress","given a stubbed current window",".set()"],"updatePoint":{"line":74,"column":41,"index":2939},"line":74,"code":"        it('should set the starting title', function () {\n          this.state.percentage = 0;\n          this.state.speed = 0;\n          windowProgress.set(this.state);\n          assert.calledWith(this.setTitleSpy, ' – 0% Flashing...');\n        });","file":"gui/os/window-progress.spec.ts","skipped":false,"dir":"tests"},{"name":"should set the finishing title","suites":["Browser: WindowProgress","windowProgress","given a stubbed current window",".set()"],"updatePoint":{"line":80,"column":42,"index":3189},"line":80,"code":"        it('should set the finishing title', function () {\n          this.state.percentage = 100;\n          windowProgress.set(this.state);\n          assert.calledWith(this.setTitleSpy, ' – Finishing...');\n        });","file":"gui/os/window-progress.spec.ts","skipped":false,"dir":"tests"},{"name":"should set -1","suites":["Browser: WindowProgress","windowProgress","given a stubbed current window",".clear()"],"updatePoint":{"line":87,"column":25,"index":3441},"line":87,"code":"        it('should set -1', function () {\n          windowProgress.clear();\n          assert.calledWith(this.setProgressBarSpy, -1);\n        });","file":"gui/os/window-progress.spec.ts","skipped":false,"dir":"tests"},{"name":"should clear the window title","suites":["Browser: WindowProgress","windowProgress","given a stubbed current window",".clear()"],"updatePoint":{"line":91,"column":41,"index":3602},"line":91,"code":"        it('should clear the window title', function () {\n          windowProgress.clear();\n          assert.calledWith(this.setTitleSpy, '');\n        });","file":"gui/os/window-progress.spec.ts","skipped":false,"dir":"tests"},{"name":"should parse network drive mapping on Windows","suites":["Network drives on Windows"],"updatePoint":{"line":33,"column":51,"index":1141},"line":33,"code":"  it('should parse network drive mapping on Windows', async () => {\n    expect(await wnd.replaceWindowsNetworkDriveLetter('Z:\\\\some-folder\\\\some-file', mockGetWmicOutput)).to.equal('\\\\\\\\192.168.1.1\\\\Publicé\\\\some-folder\\\\some-file');\n  });","file":"gui/os/windows-network-drives.spec.ts","skipped":false,"dir":"tests"},{"name":"should throw error if limit < 3","suites":["Browser: MiddleEllipsis",".middleEllipsis()"],"updatePoint":{"line":21,"column":39,"index":837},"line":21,"code":"    it('should throw error if limit < 3', function () {\n      expect(() => {\n        middleEllipsis('No', 2);\n      }).to.throw('middleEllipsis: Limit should be at least 3');\n    });","file":"gui/utils/middle-ellipsis.spec.ts","skipped":false,"dir":"tests"},{"name":"should always truncate input to an odd length","suites":["Browser: MiddleEllipsis",".middleEllipsis()","given the input length is greater than the limit"],"updatePoint":{"line":27,"column":55,"index":1115},"line":27,"code":"      it('should always truncate input to an odd length', function () {\n        const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n        expect(middleEllipsis(alphabet, 3)).to.have.lengthOf(3);\n        expect(middleEllipsis(alphabet, 4)).to.have.lengthOf(3);\n        expect(middleEllipsis(alphabet, 5)).to.have.lengthOf(5);\n        expect(middleEllipsis(alphabet, 6)).to.have.lengthOf(5);\n      });","file":"gui/utils/middle-ellipsis.spec.ts","skipped":false,"dir":"tests"},{"name":"should return the input if it is within the bounds of limit","suites":["Browser: MiddleEllipsis",".middleEllipsis()","given the input length is greater than the limit"],"updatePoint":{"line":35,"column":67,"index":1532},"line":35,"code":"    it('should return the input if it is within the bounds of limit', function () {\n      expect(middleEllipsis('Hello', 10)).to.equal('Hello');\n    });","file":"gui/utils/middle-ellipsis.spec.ts","skipped":false,"dir":"tests"},{"name":"should be a plain object","suites":["Shared: Errors",".HUMAN_FRIENDLY"],"updatePoint":{"line":22,"column":32,"index":822},"line":22,"code":"    it('should be a plain object', function () {\n      expect(_.isPlainObject(errors.HUMAN_FRIENDLY)).to.be.true;\n    });","file":"shared/errors.spec.ts","skipped":false,"dir":"tests"},{"name":"should contain title and description function properties","suites":["Shared: Errors",".HUMAN_FRIENDLY"],"updatePoint":{"line":25,"column":64,"index":976},"line":25,"code":"    it('should contain title and description function properties', function () {\n      expect(_.every(_.map(errors.HUMAN_FRIENDLY, error => {\n        return _.isFunction(error.title) && _.isFunction(error.description);\n      }))).to.be.true;\n    });","file":"shared/errors.spec.ts","skipped":false,"dir":"tests"},{"name":"should return a generic error message if the error is an empty object","suites":["Shared: Errors",".getTitle()"],"updatePoint":{"line":32,"column":77,"index":1285},"line":32,"code":"    it('should return a generic error message if the error is an empty object', function () {\n      const error = {};\n      // @ts-ignore\n      expect(errors.getTitle(error)).to.equal('An error ocurred');\n    });","file":"shared/errors.spec.ts","skipped":false,"dir":"tests"},{"name":"should return the error message","suites":["Shared: Errors",".getTitle()"],"updatePoint":{"line":37,"column":39,"index":1460},"line":37,"code":"    it('should return the error message', function () {\n      const error = new Error('This is an error');\n      expect(errors.getTitle(error)).to.equal('This is an error');\n    });","file":"shared/errors.spec.ts","skipped":false,"dir":"tests"},{"name":"should return the error code if there is no message","suites":["Shared: Errors",".getTitle()"],"updatePoint":{"line":41,"column":59,"index":1662},"line":41,"code":"    it('should return the error code if there is no message', function () {\n      const error = new Error();\n      // @ts-ignore\n      error.code = 'MYERROR';\n      expect(errors.getTitle(error)).to.equal('Error code: MYERROR');\n    });","file":"shared/errors.spec.ts","skipped":false,"dir":"tests"},{"name":"should prioritize the message over the code","suites":["Shared: Errors",".getTitle()"],"updatePoint":{"line":47,"column":51,"index":1891},"line":47,"code":"    it('should prioritize the message over the code', function () {\n      const error = new Error('Foo bar');\n      // @ts-ignore\n      error.code = 'MYERROR';\n      expect(errors.getTitle(error)).to.equal('Foo bar');\n    });","file":"shared/errors.spec.ts","skipped":false,"dir":"tests"},{"name":"should prioritize the code over the message if the message is an empty string","suites":["Shared: Errors",".getTitle()"],"updatePoint":{"line":53,"column":85,"index":2151},"line":53,"code":"    it('should prioritize the code over the message if the message is an empty string', function () {\n      const error = new Error('');\n      // @ts-ignore\n      error.code = 'MYERROR';\n      expect(errors.getTitle(error)).to.equal('Error code: MYERROR');\n    });","file":"shared/errors.spec.ts","skipped":false,"dir":"tests"},{"name":"should prioritize the code over the message if the message is a blank string","suites":["Shared: Errors",".getTitle()"],"updatePoint":{"line":59,"column":84,"index":2415},"line":59,"code":"    it('should prioritize the code over the message if the message is a blank string', function () {\n      const error = new Error('    ');\n      // @ts-ignore\n      error.code = 'MYERROR';\n      expect(errors.getTitle(error)).to.equal('Error code: MYERROR');\n    });","file":"shared/errors.spec.ts","skipped":false,"dir":"tests"},{"name":"should understand an error-like object with a code","suites":["Shared: Errors",".getTitle()"],"updatePoint":{"line":65,"column":58,"index":2657},"line":65,"code":"    it('should understand an error-like object with a code', function () {\n      const error = {\n        code: 'MYERROR'\n      };\n\n      // @ts-ignore\n      expect(errors.getTitle(error)).to.equal('Error code: MYERROR');\n    });","file":"shared/errors.spec.ts","skipped":false,"dir":"tests"},{"name":"should understand an error-like object with a message","suites":["Shared: Errors",".getTitle()"],"updatePoint":{"line":73,"column":61,"index":2889},"line":73,"code":"    it('should understand an error-like object with a message', function () {\n      const error = {\n        message: 'Hello world'\n      };\n\n      // @ts-ignore\n      expect(errors.getTitle(error)).to.equal('Hello world');\n    });","file":"shared/errors.spec.ts","skipped":false,"dir":"tests"},{"name":"should understand an error-like object with a message and a code","suites":["Shared: Errors",".getTitle()"],"updatePoint":{"line":81,"column":72,"index":3131},"line":81,"code":"    it('should understand an error-like object with a message and a code', function () {\n      const error = {\n        message: 'Hello world',\n        code: 'MYERROR'\n      };\n\n      // @ts-ignore\n      expect(errors.getTitle(error)).to.equal('Hello world');\n    });","file":"shared/errors.spec.ts","skipped":false,"dir":"tests"},{"name":"should display an error code 0","suites":["Shared: Errors",".getTitle()"],"updatePoint":{"line":90,"column":38,"index":3364},"line":90,"code":"    it('should display an error code 0', function () {\n      const error = new Error();\n      // @ts-ignore\n      error.code = 0;\n      expect(errors.getTitle(error)).to.equal('Error code: 0');\n    });","file":"shared/errors.spec.ts","skipped":false,"dir":"tests"},{"name":"should display an error code 1","suites":["Shared: Errors",".getTitle()"],"updatePoint":{"line":96,"column":38,"index":3566},"line":96,"code":"    it('should display an error code 1', function () {\n      const error = new Error();\n      // @ts-ignore\n      error.code = 1;\n      expect(errors.getTitle(error)).to.equal('Error code: 1');\n    });","file":"shared/errors.spec.ts","skipped":false,"dir":"tests"},{"name":"should display an error code -1","suites":["Shared: Errors",".getTitle()"],"updatePoint":{"line":102,"column":39,"index":3769},"line":102,"code":"    it('should display an error code -1', function () {\n      const error = new Error();\n      // @ts-ignore\n      error.code = -1;\n      expect(errors.getTitle(error)).to.equal('Error code: -1');\n    });","file":"shared/errors.spec.ts","skipped":false,"dir":"tests"},{"name":"should not display an empty string error code","suites":["Shared: Errors",".getTitle()"],"updatePoint":{"line":108,"column":53,"index":3988},"line":108,"code":"    it('should not display an empty string error code', function () {\n      const error = new Error();\n      // @ts-ignore\n      error.code = '';\n      expect(errors.getTitle(error)).to.equal('An error ocurred');\n    });","file":"shared/errors.spec.ts","skipped":false,"dir":"tests"},{"name":"should not display a blank string error code","suites":["Shared: Errors",".getTitle()"],"updatePoint":{"line":114,"column":52,"index":4208},"line":114,"code":"    it('should not display a blank string error code', function () {\n      const error = new Error();\n      // @ts-ignore\n      error.code = '   ';\n      expect(errors.getTitle(error)).to.equal('An error ocurred');\n    });","file":"shared/errors.spec.ts","skipped":false,"dir":"tests"},{"name":"should return a generic error message if no information was found","suites":["Shared: Errors",".getTitle()"],"updatePoint":{"line":120,"column":73,"index":4452},"line":120,"code":"    it('should return a generic error message if no information was found', function () {\n      const error = new Error();\n      expect(errors.getTitle(error)).to.equal('An error ocurred');\n    });","file":"shared/errors.spec.ts","skipped":false,"dir":"tests"},{"name":"should return a generic error message if no code and the message is empty","suites":["Shared: Errors",".getTitle()"],"updatePoint":{"line":124,"column":81,"index":4658},"line":124,"code":"    it('should return a generic error message if no code and the message is empty', function () {\n      const error = new Error('');\n      expect(errors.getTitle(error)).to.equal('An error ocurred');\n    });","file":"shared/errors.spec.ts","skipped":false,"dir":"tests"},{"name":"should return a generic error message if no code and the message is blank","suites":["Shared: Errors",".getTitle()"],"updatePoint":{"line":128,"column":81,"index":4866},"line":128,"code":"    it('should return a generic error message if no code and the message is blank', function () {\n      const error = new Error('   ');\n      expect(errors.getTitle(error)).to.equal('An error ocurred');\n    });","file":"shared/errors.spec.ts","skipped":false,"dir":"tests"},{"name":"should rephrase an ENOENT error","suites":["Shared: Errors",".getTitle()"],"updatePoint":{"line":132,"column":39,"index":5035},"line":132,"code":"    it('should rephrase an ENOENT error', function () {\n      const error = new Error('ENOENT error');\n      // @ts-ignore\n      error.path = '/foo/bar';\n      // @ts-ignore\n      error.code = 'ENOENT';\n      expect(errors.getTitle(error)).to.equal('No such file or directory: /foo/bar');\n    });","file":"shared/errors.spec.ts","skipped":false,"dir":"tests"},{"name":"should rephrase an EPERM error","suites":["Shared: Errors",".getTitle()"],"updatePoint":{"line":140,"column":38,"index":5331},"line":140,"code":"    it('should rephrase an EPERM error', function () {\n      const error = new Error('EPERM error');\n      // @ts-ignore\n      error.code = 'EPERM';\n      expect(errors.getTitle(error)).to.equal(\"You're not authorized to perform this operation\");\n    });","file":"shared/errors.spec.ts","skipped":false,"dir":"tests"},{"name":"should rephrase an EACCES error","suites":["Shared: Errors",".getTitle()"],"updatePoint":{"line":146,"column":39,"index":5587},"line":146,"code":"    it('should rephrase an EACCES error', function () {\n      const error = new Error('EACCES error');\n      // @ts-ignore\n      error.code = 'EACCES';\n      expect(errors.getTitle(error)).to.equal(\"You don't have access to this resource\");\n    });","file":"shared/errors.spec.ts","skipped":false,"dir":"tests"},{"name":"should rephrase an ENOMEM error","suites":["Shared: Errors",".getTitle()"],"updatePoint":{"line":152,"column":39,"index":5836},"line":152,"code":"    it('should rephrase an ENOMEM error', function () {\n      const error = new Error('ENOMEM error');\n      // @ts-ignore\n      error.code = 'ENOMEM';\n      expect(errors.getTitle(error)).to.equal('Your system ran out of memory');\n    });","file":"shared/errors.spec.ts","skipped":false,"dir":"tests"},{"name":"should understand an error-like object with a description","suites":["Shared: Errors",".getDescription()"],"updatePoint":{"line":160,"column":65,"index":6154},"line":160,"code":"    it('should understand an error-like object with a description', function () {\n      const error = {\n        description: 'My description'\n      };\n\n      // @ts-ignore\n      expect(errors.getDescription(error)).to.equal('My description');\n    });","file":"shared/errors.spec.ts","skipped":false,"dir":"tests"},{"name":"should understand an error-like object with a stack","suites":["Shared: Errors",".getDescription()"],"updatePoint":{"line":168,"column":59,"index":6399},"line":168,"code":"    it('should understand an error-like object with a stack', function () {\n      const error = {\n        stack: 'My stack'\n      };\n\n      // @ts-ignore\n      expect(errors.getDescription(error)).to.equal('My stack');\n    });","file":"shared/errors.spec.ts","skipped":false,"dir":"tests"},{"name":"should understand an error-like object with a description and a stack","suites":["Shared: Errors",".getDescription()"],"updatePoint":{"line":176,"column":77,"index":6644},"line":176,"code":"    it('should understand an error-like object with a description and a stack', function () {\n      const error = {\n        description: 'My description',\n        stack: 'My stack'\n      };\n\n      // @ts-ignore\n      expect(errors.getDescription(error)).to.equal('My description');\n    });","file":"shared/errors.spec.ts","skipped":false,"dir":"tests"},{"name":"should stringify and beautify an object without any known property","suites":["Shared: Errors",".getDescription()"],"updatePoint":{"line":185,"column":74,"index":6931},"line":185,"code":"    it('should stringify and beautify an object without any known property', function () {\n      const error = {\n        name: 'John Doe',\n        job: 'Developer'\n      };\n\n      // @ts-ignore\n      expect(errors.getDescription(error)).to.equal(['{', '  \"name\": \"John Doe\",', '  \"job\": \"Developer\"', '}'].join('\\n'));\n    });","file":"shared/errors.spec.ts","skipped":false,"dir":"tests"},{"name":"should return the stack for a basic error","suites":["Shared: Errors",".getDescription()"],"updatePoint":{"line":194,"column":49,"index":7233},"line":194,"code":"    it('should return the stack for a basic error', function () {\n      const error = new Error('Foo');\n      expect(errors.getDescription(error)).to.equal(error.stack);\n    });","file":"shared/errors.spec.ts","skipped":false,"dir":"tests"},{"name":"should prefer a description property to a stack","suites":["Shared: Errors",".getDescription()"],"updatePoint":{"line":198,"column":55,"index":7417},"line":198,"code":"    it('should prefer a description property to a stack', function () {\n      const error = new Error('Foo');\n      // @ts-ignore\n      error.description = 'My description';\n      expect(errors.getDescription(error)).to.equal('My description');\n    });","file":"shared/errors.spec.ts","skipped":false,"dir":"tests"},{"name":"should return the stack if the description is an empty string","suites":["Shared: Errors",".getDescription()"],"updatePoint":{"line":204,"column":69,"index":7684},"line":204,"code":"    it('should return the stack if the description is an empty string', function () {\n      const error = new Error('Foo');\n      // @ts-ignore\n      error.description = '';\n      expect(errors.getDescription(error)).to.equal(error.stack);\n    });","file":"shared/errors.spec.ts","skipped":false,"dir":"tests"},{"name":"should return the stack if the description is a blank string","suites":["Shared: Errors",".getDescription()"],"updatePoint":{"line":210,"column":68,"index":7931},"line":210,"code":"    it('should return the stack if the description is a blank string', function () {\n      const error = new Error('Foo');\n      // @ts-ignore\n      error.description = '   ';\n      expect(errors.getDescription(error)).to.equal(error.stack);\n    });","file":"shared/errors.spec.ts","skipped":false,"dir":"tests"},{"name":"should get a generic description for ENOENT","suites":["Shared: Errors",".getDescription()"],"updatePoint":{"line":216,"column":51,"index":8164},"line":216,"code":"    it('should get a generic description for ENOENT', function () {\n      const error = new Error('Foo');\n      // @ts-ignore\n      error.code = 'ENOENT';\n      expect(errors.getDescription(error)).to.equal(\"The file you're trying to access doesn't exist\");\n    });","file":"shared/errors.spec.ts","skipped":false,"dir":"tests"},{"name":"should get a generic description for EPERM","suites":["Shared: Errors",".getDescription()"],"updatePoint":{"line":222,"column":50,"index":8429},"line":222,"code":"    it('should get a generic description for EPERM', function () {\n      const error = new Error('Foo');\n      // @ts-ignore\n      error.code = 'EPERM';\n      expect(errors.getDescription(error)).to.equal('Please ensure you have necessary permissions for this task');\n    });","file":"shared/errors.spec.ts","skipped":false,"dir":"tests"},{"name":"should get a generic description for EACCES","suites":["Shared: Errors",".getDescription()"],"updatePoint":{"line":228,"column":51,"index":8706},"line":228,"code":"    it('should get a generic description for EACCES', function () {\n      const error = new Error('Foo');\n      // @ts-ignore\n      error.code = 'EACCES';\n      const message = 'Please ensure you have necessary permissions to access this resource';\n      expect(errors.getDescription(error)).to.equal(message);\n    });","file":"shared/errors.spec.ts","skipped":false,"dir":"tests"},{"name":"should get a generic description for ENOMEM","suites":["Shared: Errors",".getDescription()"],"updatePoint":{"line":235,"column":51,"index":9025},"line":235,"code":"    it('should get a generic description for ENOMEM', function () {\n      const error = new Error('Foo');\n      // @ts-ignore\n      error.code = 'ENOMEM';\n      const message = 'Please make sure your system has enough available memory for this task';\n      expect(errors.getDescription(error)).to.equal(message);\n    });","file":"shared/errors.spec.ts","skipped":false,"dir":"tests"},{"name":"should prefer a description property than a code description","suites":["Shared: Errors",".getDescription()"],"updatePoint":{"line":242,"column":68,"index":9363},"line":242,"code":"    it('should prefer a description property than a code description', function () {\n      const error = new Error('Foo');\n      // @ts-ignore\n      error.code = 'ENOMEM';\n      // @ts-ignore\n      error.description = 'Memory error';\n      expect(errors.getDescription(error)).to.equal('Memory error');\n    });","file":"shared/errors.spec.ts","skipped":false,"dir":"tests"},{"name":"should return the stack for a basic error","suites":["Shared: Errors",".getDescription()","given userFriendlyDescriptionsOnly is false"],"updatePoint":{"line":251,"column":51,"index":9731},"line":251,"code":"      it('should return the stack for a basic error', function () {\n        const error = new Error('Foo');\n        expect(errors.getDescription(error)).to.equal(error.stack);\n      });","file":"shared/errors.spec.ts","skipped":false,"dir":"tests"},{"name":"should return the stack if the description is an empty string","suites":["Shared: Errors",".getDescription()","given userFriendlyDescriptionsOnly is false"],"updatePoint":{"line":255,"column":71,"index":9937},"line":255,"code":"      it('should return the stack if the description is an empty string', function () {\n        const error = new Error('Foo');\n        // @ts-ignore\n        error.description = '';\n        expect(errors.getDescription(error)).to.equal(error.stack);\n      });","file":"shared/errors.spec.ts","skipped":false,"dir":"tests"},{"name":"should return the stack if the description is a blank string","suites":["Shared: Errors",".getDescription()","given userFriendlyDescriptionsOnly is false"],"updatePoint":{"line":261,"column":70,"index":10196},"line":261,"code":"      it('should return the stack if the description is a blank string', function () {\n        const error = new Error('Foo');\n        // @ts-ignore\n        error.description = '   ';\n        expect(errors.getDescription(error)).to.equal(error.stack);\n      });","file":"shared/errors.spec.ts","skipped":false,"dir":"tests"},{"name":"should be an instance of Error","suites":["Shared: Errors",".createError()"],"updatePoint":{"line":270,"column":38,"index":10483},"line":270,"code":"    it('should be an instance of Error', function () {\n      const error = errors.createError({\n        title: 'Foo',\n        description: 'Something happened'\n      });\n      expect(error).to.be.an.instanceof(Error);\n    });","file":"shared/errors.spec.ts","skipped":false,"dir":"tests"},{"name":"should correctly add both a title and a description","suites":["Shared: Errors",".createError()"],"updatePoint":{"line":277,"column":59,"index":10730},"line":277,"code":"    it('should correctly add both a title and a description', function () {\n      const error = errors.createError({\n        title: 'Foo',\n        description: 'Something happened'\n      });\n      expect(errors.getTitle(error)).to.equal('Foo');\n      expect(errors.getDescription(error)).to.equal('Something happened');\n    });","file":"shared/errors.spec.ts","skipped":false,"dir":"tests"},{"name":"should correctly add a code","suites":["Shared: Errors",".createError()"],"updatePoint":{"line":285,"column":35,"index":11034},"line":285,"code":"    it('should correctly add a code', function () {\n      const error = errors.createError({\n        title: 'Foo',\n        description: 'Something happened',\n        code: 'ENOENT'\n      });\n      expect(error.code).to.equal('ENOENT');\n    });","file":"shared/errors.spec.ts","skipped":false,"dir":"tests"},{"name":"should correctly add only a title","suites":["Shared: Errors",".createError()"],"updatePoint":{"line":293,"column":41,"index":11284},"line":293,"code":"    it('should correctly add only a title', function () {\n      const error = errors.createError({\n        title: 'Foo'\n      });\n      expect(errors.getTitle(error)).to.equal('Foo');\n      expect(errors.getDescription(error)).to.equal(error.stack);\n    });","file":"shared/errors.spec.ts","skipped":false,"dir":"tests"},{"name":"should ignore an empty description","suites":["Shared: Errors",".createError()"],"updatePoint":{"line":300,"column":42,"index":11543},"line":300,"code":"    it('should ignore an empty description', function () {\n      const error = errors.createError({\n        title: 'Foo',\n        description: ''\n      });\n      expect(errors.getDescription(error)).to.equal(error.stack);\n    });","file":"shared/errors.spec.ts","skipped":false,"dir":"tests"},{"name":"should ignore a blank description","suites":["Shared: Errors",".createError()"],"updatePoint":{"line":307,"column":41,"index":11772},"line":307,"code":"    it('should ignore a blank description', function () {\n      const error = errors.createError({\n        title: 'Foo',\n        description: '     '\n      });\n      expect(errors.getDescription(error)).to.equal(error.stack);\n    });","file":"shared/errors.spec.ts","skipped":false,"dir":"tests"},{"name":"should throw if no title","suites":["Shared: Errors",".createError()"],"updatePoint":{"line":314,"column":32,"index":11997},"line":314,"code":"    it('should throw if no title', function () {\n      expect(() => {\n        // @ts-ignore\n        errors.createError({});\n      }).to.throw('Invalid error title: undefined');\n    });","file":"shared/errors.spec.ts","skipped":false,"dir":"tests"},{"name":"should throw if there is a description but no title","suites":["Shared: Errors",".createError()"],"updatePoint":{"line":320,"column":59,"index":12209},"line":320,"code":"    it('should throw if there is a description but no title', function () {\n      expect(() => {\n        // @ts-ignore\n        errors.createError({\n          description: 'foo'\n        });\n      }).to.throw('Invalid error title: undefined');\n    });","file":"shared/errors.spec.ts","skipped":false,"dir":"tests"},{"name":"should throw if title is empty","suites":["Shared: Errors",".createError()"],"updatePoint":{"line":328,"column":38,"index":12438},"line":328,"code":"    it('should throw if title is empty', function () {\n      expect(() => {\n        errors.createError({\n          title: ''\n        });\n      }).to.throw('Invalid error title: ');\n    });","file":"shared/errors.spec.ts","skipped":false,"dir":"tests"},{"name":"should throw if title is blank","suites":["Shared: Errors",".createError()"],"updatePoint":{"line":335,"column":38,"index":12627},"line":335,"code":"    it('should throw if title is blank', function () {\n      expect(() => {\n        errors.createError({\n          title: '    '\n        });\n      }).to.throw('Invalid error title:    ');\n    });","file":"shared/errors.spec.ts","skipped":false,"dir":"tests"},{"name":"should be an instance of Error","suites":["Shared: Errors",".createUserError()"],"updatePoint":{"line":344,"column":38,"index":12876},"line":344,"code":"    it('should be an instance of Error', function () {\n      const error = errors.createUserError({\n        title: 'Foo',\n        description: 'Something happened'\n      });\n      expect(error).to.be.an.instanceof(Error);\n    });","file":"shared/errors.spec.ts","skipped":false,"dir":"tests"},{"name":"should correctly add both a title and a description","suites":["Shared: Errors",".createUserError()"],"updatePoint":{"line":351,"column":59,"index":13127},"line":351,"code":"    it('should correctly add both a title and a description', function () {\n      const error = errors.createUserError({\n        title: 'Foo',\n        description: 'Something happened'\n      });\n      expect(errors.getTitle(error)).to.equal('Foo');\n      expect(errors.getDescription(error)).to.equal('Something happened');\n    });","file":"shared/errors.spec.ts","skipped":false,"dir":"tests"},{"name":"should correctly add only a title","suites":["Shared: Errors",".createUserError()"],"updatePoint":{"line":359,"column":41,"index":13441},"line":359,"code":"    it('should correctly add only a title', function () {\n      // @ts-ignore\n      const error = errors.createUserError({\n        title: 'Foo'\n      });\n      expect(errors.getTitle(error)).to.equal('Foo');\n      expect(errors.getDescription(error)).to.equal(error.stack);\n    });","file":"shared/errors.spec.ts","skipped":false,"dir":"tests"},{"name":"should correctly add a code","suites":["Shared: Errors",".createUserError()"],"updatePoint":{"line":367,"column":35,"index":13717},"line":367,"code":"    it('should correctly add a code', function () {\n      // @ts-ignore\n      const error = errors.createUserError({\n        title: 'Foo',\n        code: 'ENOENT'\n      });\n\n      // @ts-ignore\n      expect(error.code).to.equal('ENOENT');\n    });","file":"shared/errors.spec.ts","skipped":false,"dir":"tests"},{"name":"should ignore an empty description","suites":["Shared: Errors",".createUserError()"],"updatePoint":{"line":377,"column":42,"index":13970},"line":377,"code":"    it('should ignore an empty description', function () {\n      const error = errors.createUserError({\n        title: 'Foo',\n        description: ''\n      });\n      expect(errors.getDescription(error)).to.equal(error.stack);\n    });","file":"shared/errors.spec.ts","skipped":false,"dir":"tests"},{"name":"should ignore a blank description","suites":["Shared: Errors",".createUserError()"],"updatePoint":{"line":384,"column":41,"index":14203},"line":384,"code":"    it('should ignore a blank description', function () {\n      const error = errors.createUserError({\n        title: 'Foo',\n        description: '     '\n      });\n      expect(errors.getDescription(error)).to.equal(error.stack);\n    });","file":"shared/errors.spec.ts","skipped":false,"dir":"tests"},{"name":"should throw if no title","suites":["Shared: Errors",".createUserError()"],"updatePoint":{"line":391,"column":32,"index":14432},"line":391,"code":"    it('should throw if no title', function () {\n      expect(() => {\n        // @ts-ignore\n        errors.createUserError({});\n      }).to.throw('Invalid error title: undefined');\n    });","file":"shared/errors.spec.ts","skipped":false,"dir":"tests"},{"name":"should throw if title is empty","suites":["Shared: Errors",".createUserError()"],"updatePoint":{"line":397,"column":38,"index":14627},"line":397,"code":"    it('should throw if title is empty', function () {\n      expect(() => {\n        // @ts-ignore\n        errors.createUserError({\n          title: ''\n        });\n      }).to.throw('Invalid error title: ');\n    });","file":"shared/errors.spec.ts","skipped":false,"dir":"tests"},{"name":"should throw if there is a description but no title","suites":["Shared: Errors",".createUserError()"],"updatePoint":{"line":405,"column":59,"index":14863},"line":405,"code":"    it('should throw if there is a description but no title', function () {\n      expect(() => {\n        // @ts-ignore\n        errors.createUserError({\n          description: 'foo'\n        });\n      }).to.throw('Invalid error title: undefined');\n    });","file":"shared/errors.spec.ts","skipped":false,"dir":"tests"},{"name":"should throw if title is blank","suites":["Shared: Errors",".createUserError()"],"updatePoint":{"line":413,"column":38,"index":15096},"line":413,"code":"    it('should throw if title is blank', function () {\n      expect(() => {\n        // @ts-ignore\n        errors.createUserError({\n          title: '   '\n        });\n      }).to.throw('Invalid error title:    ');\n    });","file":"shared/errors.spec.ts","skipped":false,"dir":"tests"},{"name":"should convert a simple error","suites":["Shared: Errors",".toJSON()"],"updatePoint":{"line":423,"column":37,"index":15360},"line":423,"code":"    it('should convert a simple error', function () {\n      const error = new Error('My error');\n      expect(errors.toJSON(error)).to.deep.equal({\n        code: undefined,\n        description: undefined,\n        message: 'My error',\n        stack: error.stack,\n        report: undefined,\n        stderr: undefined,\n        stdout: undefined,\n        syscall: undefined,\n        name: 'Error',\n        errno: undefined,\n        device: undefined\n      });\n    });","file":"shared/errors.spec.ts","skipped":false,"dir":"tests"},{"name":"should convert an error with a description","suites":["Shared: Errors",".toJSON()"],"updatePoint":{"line":439,"column":50,"index":15837},"line":439,"code":"    it('should convert an error with a description', function () {\n      const error = new Error('My error');\n      // @ts-ignore\n      error.description = 'My description';\n      expect(errors.toJSON(error)).to.deep.equal({\n        code: undefined,\n        description: 'My description',\n        message: 'My error',\n        stack: error.stack,\n        report: undefined,\n        stderr: undefined,\n        stdout: undefined,\n        syscall: undefined,\n        name: 'Error',\n        errno: undefined,\n        device: undefined\n      });\n    });","file":"shared/errors.spec.ts","skipped":false,"dir":"tests"},{"name":"should convert an error with a code","suites":["Shared: Errors",".toJSON()"],"updatePoint":{"line":457,"column":43,"index":16378},"line":457,"code":"    it('should convert an error with a code', function () {\n      const error = new Error('My error');\n      // @ts-ignore\n      error.code = 'ENOENT';\n      expect(errors.toJSON(error)).to.deep.equal({\n        code: 'ENOENT',\n        description: undefined,\n        message: 'My error',\n        stack: error.stack,\n        report: undefined,\n        stderr: undefined,\n        stdout: undefined,\n        syscall: undefined,\n        name: 'Error',\n        errno: undefined,\n        device: undefined\n      });\n    });","file":"shared/errors.spec.ts","skipped":false,"dir":"tests"},{"name":"should convert an error with a description and a code","suites":["Shared: Errors",".toJSON()"],"updatePoint":{"line":475,"column":61,"index":16914},"line":475,"code":"    it('should convert an error with a description and a code', function () {\n      const error = new Error('My error');\n      // @ts-ignore\n      error.description = 'My description';\n      // @ts-ignore\n      error.code = 'ENOENT';\n      expect(errors.toJSON(error)).to.deep.equal({\n        code: 'ENOENT',\n        description: 'My description',\n        message: 'My error',\n        stack: error.stack,\n        report: undefined,\n        stderr: undefined,\n        stdout: undefined,\n        syscall: undefined,\n        name: 'Error',\n        errno: undefined,\n        device: undefined\n      });\n    });","file":"shared/errors.spec.ts","skipped":false,"dir":"tests"},{"name":"should convert an error with a report value","suites":["Shared: Errors",".toJSON()"],"updatePoint":{"line":495,"column":51,"index":17511},"line":495,"code":"    it('should convert an error with a report value', function () {\n      const error = new Error('My error');\n      // @ts-ignore\n      error.report = true;\n      expect(errors.toJSON(error)).to.deep.equal({\n        code: undefined,\n        description: undefined,\n        message: 'My error',\n        stack: error.stack,\n        report: true,\n        stderr: undefined,\n        stdout: undefined,\n        syscall: undefined,\n        name: 'Error',\n        errno: undefined,\n        device: undefined\n      });\n    });","file":"shared/errors.spec.ts","skipped":false,"dir":"tests"},{"name":"should convert an error without a message","suites":["Shared: Errors",".toJSON()"],"updatePoint":{"line":513,"column":49,"index":18029},"line":513,"code":"    it('should convert an error without a message', function () {\n      const error = new Error();\n      expect(errors.toJSON(error)).to.deep.equal({\n        code: undefined,\n        description: undefined,\n        message: '',\n        stack: error.stack,\n        report: undefined,\n        stderr: undefined,\n        stdout: undefined,\n        syscall: undefined,\n        name: 'Error',\n        errno: undefined,\n        device: undefined\n      });\n    });","file":"shared/errors.spec.ts","skipped":false,"dir":"tests"},{"name":"should return an Error object","suites":["Shared: Errors",".fromJSON()"],"updatePoint":{"line":531,"column":37,"index":18521},"line":531,"code":"    it('should return an Error object', function () {\n      const error = new Error('My error');\n      const result = errors.fromJSON(errors.toJSON(error));\n      expect(result).to.be.an.instanceof(Error);\n    });","file":"shared/errors.spec.ts","skipped":false,"dir":"tests"},{"name":"should convert a simple JSON error","suites":["Shared: Errors",".fromJSON()"],"updatePoint":{"line":536,"column":42,"index":18740},"line":536,"code":"    it('should convert a simple JSON error', function () {\n      const error = new Error('My error');\n      const result = errors.fromJSON(errors.toJSON(error));\n      expect(result.message).to.equal(error.message);\n      // @ts-ignore\n      expect(result.description).to.equal(error.description);\n      // @ts-ignore\n      expect(result.code).to.equal(error.code);\n      expect(result.stack).to.equal(error.stack);\n      // @ts-ignore\n      expect(result.report).to.equal(error.report);\n    });","file":"shared/errors.spec.ts","skipped":false,"dir":"tests"},{"name":"should convert a JSON error with a description","suites":["Shared: Errors",".fromJSON()"],"updatePoint":{"line":548,"column":54,"index":19248},"line":548,"code":"    it('should convert a JSON error with a description', function () {\n      const error = new Error('My error');\n      // @ts-ignore\n      error.description = 'My description';\n      const result = errors.fromJSON(errors.toJSON(error));\n      expect(result.message).to.equal(error.message);\n      // @ts-ignore\n      expect(result.description).to.equal(error.description);\n      // @ts-ignore\n      expect(result.code).to.equal(error.code);\n      expect(result.stack).to.equal(error.stack);\n      // @ts-ignore\n      expect(result.report).to.equal(error.report);\n    });","file":"shared/errors.spec.ts","skipped":false,"dir":"tests"},{"name":"should convert a JSON error with a code","suites":["Shared: Errors",".fromJSON()"],"updatePoint":{"line":562,"column":47,"index":19813},"line":562,"code":"    it('should convert a JSON error with a code', function () {\n      const error = new Error('My error');\n      // @ts-ignore\n      error.code = 'ENOENT';\n      const result = errors.fromJSON(errors.toJSON(error));\n      expect(result.message).to.equal(error.message);\n      // @ts-ignore\n      expect(result.description).to.equal(error.description);\n      // @ts-ignore\n      expect(result.code).to.equal(error.code);\n      expect(result.stack).to.equal(error.stack);\n      // @ts-ignore\n      expect(result.report).to.equal(error.report);\n    });","file":"shared/errors.spec.ts","skipped":false,"dir":"tests"},{"name":"should convert a JSON error with a report value","suites":["Shared: Errors",".fromJSON()"],"updatePoint":{"line":576,"column":55,"index":20371},"line":576,"code":"    it('should convert a JSON error with a report value', function () {\n      const error = new Error('My error');\n      // @ts-ignore\n      error.report = false;\n      const result = errors.fromJSON(errors.toJSON(error));\n      expect(result.message).to.equal(error.message);\n      // @ts-ignore\n      expect(result.description).to.equal(error.description);\n      // @ts-ignore\n      expect(result.code).to.equal(error.code);\n      expect(result.stack).to.equal(error.stack);\n      // @ts-ignore\n      expect(result.report).to.equal(error.report);\n    });","file":"shared/errors.spec.ts","skipped":false,"dir":"tests"},{"name":"should contain object properties","suites":["Shared: Messages"],"updatePoint":{"line":30,"column":38,"index":990},"line":30,"code":"  it('should contain object properties', function () {\n    expect(_.every(_.map(messages, _.isPlainObject))).to.be.true;\n  });","file":"shared/messages.spec.ts","skipped":false,"dir":"tests"},{"name":"should contain function properties in each category","suites":["Shared: Messages"],"updatePoint":{"line":33,"column":57,"index":1136},"line":33,"code":"  it('should contain function properties in each category', function () {\n    _.each(messages, category => {\n      expect(_.every(_.map(category, _.isFunction))).to.be.true;\n    });\n  });","file":"shared/messages.spec.ts","skipped":false,"dir":"tests"},{"name":"should use singular when there are single results","suites":["Shared: Messages",".info",".flashComplete()"],"updatePoint":{"line":40,"column":59,"index":1407},"line":40,"code":"      it('should use singular when there are single results', function () {\n        const msg = messages.info.flashComplete('image.img', this.drives, {\n          failed: 1,\n          successful: 1\n        });\n        expect(msg).to.equal('image.img was successfully flashed to 1 target and failed to be flashed to 1 target');\n      });","file":"shared/messages.spec.ts","skipped":false,"dir":"tests"},{"name":"should use plural when there are multiple results","suites":["Shared: Messages",".info",".flashComplete()"],"updatePoint":{"line":47,"column":59,"index":1743},"line":47,"code":"      it('should use plural when there are multiple results', function () {\n        const msg = messages.info.flashComplete('image.img', this.drives, {\n          failed: 2,\n          successful: 2\n        });\n        expect(msg).to.equal('image.img was successfully flashed to 2 targets and failed to be flashed to 2 targets');\n      });","file":"shared/messages.spec.ts","skipped":false,"dir":"tests"},{"name":"should not contain failed target part when there are none","suites":["Shared: Messages",".info",".flashComplete()"],"updatePoint":{"line":54,"column":67,"index":2089},"line":54,"code":"      it('should not contain failed target part when there are none', function () {\n        const msg = messages.info.flashComplete('image.img', this.drives, {\n          failed: 0,\n          successful: 2\n        });\n        expect(msg).to.equal('image.img was successfully flashed to 2 targets');\n      });","file":"shared/messages.spec.ts","skipped":false,"dir":"tests"},{"name":"should show drive name and description when only target","suites":["Shared: Messages",".info",".flashComplete()"],"updatePoint":{"line":61,"column":65,"index":2395},"line":61,"code":"      it('should show drive name and description when only target', function () {\n        const msg = messages.info.flashComplete('image.img', this.drives, {\n          failed: 0,\n          successful: 1\n        });\n        expect(msg).to.equal('image.img was successfully flashed to My Drive (/dev/disk1)');\n      });","file":"shared/messages.spec.ts","skipped":false,"dir":"tests"},{"name":"should use plural when there are multiple drives","suites":["Shared: Messages",".error",".flashFailure()"],"updatePoint":{"line":72,"column":58,"index":2801},"line":72,"code":"      it('should use plural when there are multiple drives', function () {\n        const msg = messages.error.flashFailure('image.img', this.drives);\n        expect(msg).to.equal('Something went wrong while writing image.img to 2 targets.');\n      });","file":"shared/messages.spec.ts","skipped":false,"dir":"tests"},{"name":"should use singular when there is one drive","suites":["Shared: Messages",".error",".flashFailure()"],"updatePoint":{"line":76,"column":53,"index":3048},"line":76,"code":"      it('should use singular when there is one drive', function () {\n        const msg = messages.error.flashFailure('image.img', [this.drives[0]]);\n        expect(msg).to.equal('Something went wrong while writing image.img to My Drive (/dev/disk1).');\n      });","file":"shared/messages.spec.ts","skipped":false,"dir":"tests"},{"name":"should escape environment variables and arguments","suites":["Shared: permissions",".createLaunchScript()","given windows"],"updatePoint":{"line":31,"column":59,"index":1159},"line":31,"code":"      it('should escape environment variables and arguments', function () {\n        expect(permissions.createLaunchScript('C:\\\\Users\\\\Alice & Bob\\'s Laptop\\\\\"what\"\\\\balenaEtcher', ['\"a Laser\"', 'arg1', \"'&/ ^ \\\\\", '\" $ % *'], {\n          key: 'value',\n          key2: ' \" \\' ^ & = + $ % / \\\\',\n          key3: '8'\n        })).to.equal(`chcp 65001${os.EOL}` + `set \"key=value\"${os.EOL}` + `set \"key2= \" ' ^ & = + $ % / \\\\\"${os.EOL}` + `set \"key3=8\"${os.EOL}` + `\"C:\\\\Users\\\\Alice & Bob's Laptop\\\\\\\\\"what\\\\\"\\\\balenaEtcher\" \"\\\\\"a Laser\\\\\"\" \"arg1\" \"'&/ ^ \\\\\" \"\\\\\" $ % *\"`);\n      });","file":"shared/permissions.spec.ts","skipped":false,"dir":"tests"},{"name":"should escape environment variables and arguments","suites":["Shared: permissions",".createLaunchScript()","given "],"updatePoint":{"line":48,"column":61,"index":2082},"line":48,"code":"        it('should escape environment variables and arguments', function () {\n          expect(permissions.createLaunchScript('/home/Alice & Bob\\'s Laptop/\"what\"/balenaEtcher', ['arg1', \"'&/ ^ \\\\\", '\" $ % *'], {\n            key: 'value',\n            key2: ' \" \\' ^ & = + $ % / \\\\',\n            key3: '8'\n          })).to.equal(`export key='value'${os.EOL}` + `export key2=' \" '\\\\'' ^ & = + $ % / \\\\'${os.EOL}` + `export key3='8'${os.EOL}` + `'/home/Alice & Bob'\\\\''s Laptop/\"what\"/balenaEtcher' 'arg1' ''\\\\''&/ ^ \\\\' '\" $ % *'`);\n        });","file":"shared/permissions.spec.ts","skipped":false,"dir":"tests"},{"name":"should return true if filename is ","suites":["Shared: SupportedFormats",".looksLikeWindowsImage()"],"updatePoint":{"line":23,"column":56,"index":1204},"line":23,"code":"      it(`should return true if filename is ${imagePath}`, function () {\n        const looksLikeWindowsImage = supportedFormats.looksLikeWindowsImage(imagePath);\n        expect(looksLikeWindowsImage).to.be.true;\n      });","file":"shared/supported-formats.spec.ts","skipped":false,"dir":"tests"},{"name":"should return false if filename is ","suites":["Shared: SupportedFormats",".looksLikeWindowsImage()"],"updatePoint":{"line":29,"column":57,"index":1554},"line":29,"code":"      it(`should return false if filename is ${imagePath}`, function () {\n        const looksLikeWindowsImage = supportedFormats.looksLikeWindowsImage(imagePath);\n        expect(looksLikeWindowsImage).to.be.false;\n      });","file":"shared/supported-formats.spec.ts","skipped":false,"dir":"tests"},{"name":"should convert bytes to megabytes","suites":["Shared: Units",".bytesToMegabytes()"],"updatePoint":{"line":21,"column":41,"index":813},"line":21,"code":"    it('should convert bytes to megabytes', function () {\n      expect(bytesToMegabytes(1.2e7)).to.equal(12);\n      expect(bytesToMegabytes(332000)).to.equal(0.332);\n    });","file":"shared/units.spec.ts","skipped":false,"dir":"tests"},{"name":"should return false if percentage is not a number","suites":["Shared: Utils",".isValidPercentage()"],"updatePoint":{"line":21,"column":57,"index":820},"line":21,"code":"    it('should return false if percentage is not a number', function () {\n      expect(utils.isValidPercentage('50')).to.be.false;\n    });","file":"shared/utils.spec.ts","skipped":false,"dir":"tests"},{"name":"should return false if percentage is null","suites":["Shared: Utils",".isValidPercentage()"],"updatePoint":{"line":24,"column":49,"index":951},"line":24,"code":"    it('should return false if percentage is null', function () {\n      expect(utils.isValidPercentage(null)).to.be.false;\n    });","file":"shared/utils.spec.ts","skipped":false,"dir":"tests"},{"name":"should return false if percentage is undefined","suites":["Shared: Utils",".isValidPercentage()"],"updatePoint":{"line":27,"column":54,"index":1087},"line":27,"code":"    it('should return false if percentage is undefined', function () {\n      expect(utils.isValidPercentage(undefined)).to.be.false;\n    });","file":"shared/utils.spec.ts","skipped":false,"dir":"tests"},{"name":"should return false if percentage is an integer less than 0","suites":["Shared: Utils",".isValidPercentage()"],"updatePoint":{"line":30,"column":67,"index":1241},"line":30,"code":"    it('should return false if percentage is an integer less than 0', function () {\n      expect(utils.isValidPercentage(-1)).to.be.false;\n    });","file":"shared/utils.spec.ts","skipped":false,"dir":"tests"},{"name":"should return false if percentage is a float less than 0","suites":["Shared: Utils",".isValidPercentage()"],"updatePoint":{"line":33,"column":64,"index":1385},"line":33,"code":"    it('should return false if percentage is a float less than 0', function () {\n      expect(utils.isValidPercentage(-0.1)).to.be.false;\n    });","file":"shared/utils.spec.ts","skipped":false,"dir":"tests"},{"name":"should return true if percentage is 0","suites":["Shared: Utils",".isValidPercentage()"],"updatePoint":{"line":36,"column":45,"index":1512},"line":36,"code":"    it('should return true if percentage is 0', function () {\n      expect(utils.isValidPercentage(0)).to.be.true;\n    });","file":"shared/utils.spec.ts","skipped":false,"dir":"tests"},{"name":"should return true if percentage is an integer greater than 0, but less than 100","suites":["Shared: Utils",".isValidPercentage()"],"updatePoint":{"line":39,"column":88,"index":1678},"line":39,"code":"    it('should return true if percentage is an integer greater than 0, but less than 100', function () {\n      expect(utils.isValidPercentage(50)).to.be.true;\n    });","file":"shared/utils.spec.ts","skipped":false,"dir":"tests"},{"name":"should return true if percentage is a float greater than 0, but less than 100","suites":["Shared: Utils",".isValidPercentage()"],"updatePoint":{"line":42,"column":85,"index":1842},"line":42,"code":"    it('should return true if percentage is a float greater than 0, but less than 100', function () {\n      expect(utils.isValidPercentage(49.55)).to.be.true;\n    });","file":"shared/utils.spec.ts","skipped":false,"dir":"tests"},{"name":"should return true if percentage is 100","suites":["Shared: Utils",".isValidPercentage()"],"updatePoint":{"line":45,"column":47,"index":1971},"line":45,"code":"    it('should return true if percentage is 100', function () {\n      expect(utils.isValidPercentage(100)).to.be.true;\n    });","file":"shared/utils.spec.ts","skipped":false,"dir":"tests"},{"name":"should return false if percentage is an integer greater than 100","suites":["Shared: Utils",".isValidPercentage()"],"updatePoint":{"line":48,"column":72,"index":2123},"line":48,"code":"    it('should return false if percentage is an integer greater than 100', function () {\n      expect(utils.isValidPercentage(101)).to.be.false;\n    });","file":"shared/utils.spec.ts","skipped":false,"dir":"tests"},{"name":"should return false if percentage is a float greater than 100","suites":["Shared: Utils",".isValidPercentage()"],"updatePoint":{"line":51,"column":69,"index":2273},"line":51,"code":"    it('should return false if percentage is a float greater than 100', function () {\n      expect(utils.isValidPercentage(100.001)).to.be.false;\n    });","file":"shared/utils.spec.ts","skipped":false,"dir":"tests"},{"name":"should throw an error if given a string percentage","suites":["Shared: Utils",".percentageToFloat()"],"updatePoint":{"line":56,"column":58,"index":2471},"line":56,"code":"    it('should throw an error if given a string percentage', function () {\n      expect(function () {\n        utils.percentageToFloat('50');\n      }).to.throw('Invalid percentage: 50');\n    });","file":"shared/utils.spec.ts","skipped":false,"dir":"tests"},{"name":"should throw an error if given a null percentage","suites":["Shared: Utils",".percentageToFloat()"],"updatePoint":{"line":61,"column":56,"index":2663},"line":61,"code":"    it('should throw an error if given a null percentage', function () {\n      expect(function () {\n        utils.percentageToFloat(null);\n      }).to.throw('Invalid percentage: null');\n    });","file":"shared/utils.spec.ts","skipped":false,"dir":"tests"},{"name":"should throw an error if given an undefined percentage","suites":["Shared: Utils",".percentageToFloat()"],"updatePoint":{"line":66,"column":62,"index":2863},"line":66,"code":"    it('should throw an error if given an undefined percentage', function () {\n      expect(function () {\n        utils.percentageToFloat(undefined);\n      }).to.throw('Invalid percentage: undefined');\n    });","file":"shared/utils.spec.ts","skipped":false,"dir":"tests"},{"name":"should throw an error if given an integer percentage < 0","suites":["Shared: Utils",".percentageToFloat()"],"updatePoint":{"line":71,"column":64,"index":3075},"line":71,"code":"    it('should throw an error if given an integer percentage < 0', function () {\n      expect(function () {\n        utils.percentageToFloat(-1);\n      }).to.throw('Invalid percentage: -1');\n    });","file":"shared/utils.spec.ts","skipped":false,"dir":"tests"},{"name":"should throw an error if given a float percentage < 0","suites":["Shared: Utils",".percentageToFloat()"],"updatePoint":{"line":76,"column":61,"index":3270},"line":76,"code":"    it('should throw an error if given a float percentage < 0', function () {\n      expect(function () {\n        utils.percentageToFloat(-0.1);\n      }).to.throw('Invalid percentage: -0.1');\n    });","file":"shared/utils.spec.ts","skipped":false,"dir":"tests"},{"name":"should covert a 0 percentage to 0","suites":["Shared: Utils",".percentageToFloat()"],"updatePoint":{"line":81,"column":41,"index":3449},"line":81,"code":"    it('should covert a 0 percentage to 0', function () {\n      expect(utils.percentageToFloat(0)).to.equal(0);\n    });","file":"shared/utils.spec.ts","skipped":false,"dir":"tests"},{"name":"should covert an integer percentage to a float","suites":["Shared: Utils",".percentageToFloat()"],"updatePoint":{"line":84,"column":54,"index":3582},"line":84,"code":"    it('should covert an integer percentage to a float', function () {\n      expect(utils.percentageToFloat(50)).to.equal(0.5);\n    });","file":"shared/utils.spec.ts","skipped":false,"dir":"tests"},{"name":"should covert an float percentage to a float","suites":["Shared: Utils",".percentageToFloat()"],"updatePoint":{"line":87,"column":52,"index":3716},"line":87,"code":"    it('should covert an float percentage to a float', function () {\n      expect(utils.percentageToFloat(46.54)).to.equal(0.4654);\n    });","file":"shared/utils.spec.ts","skipped":false,"dir":"tests"},{"name":"should covert a 100 percentage to 1","suites":["Shared: Utils",".percentageToFloat()"],"updatePoint":{"line":90,"column":43,"index":3847},"line":90,"code":"    it('should covert a 100 percentage to 1', function () {\n      expect(utils.percentageToFloat(100)).to.equal(1);\n    });","file":"shared/utils.spec.ts","skipped":false,"dir":"tests"},{"name":"should throw an error if given an integer percentage > 100","suites":["Shared: Utils",".percentageToFloat()"],"updatePoint":{"line":93,"column":66,"index":3994},"line":93,"code":"    it('should throw an error if given an integer percentage > 100', function () {\n      expect(function () {\n        utils.percentageToFloat(101);\n      }).to.throw('Invalid percentage: 101');\n    });","file":"shared/utils.spec.ts","skipped":false,"dir":"tests"},{"name":"should throw an error if given a float percentage > 100","suites":["Shared: Utils",".percentageToFloat()"],"updatePoint":{"line":98,"column":63,"index":4193},"line":98,"code":"    it('should throw an error if given a float percentage > 100', function () {\n      expect(function () {\n        utils.percentageToFloat(100.01);\n      }).to.throw('Invalid percentage: 100.01');\n    });","file":"shared/utils.spec.ts","skipped":false,"dir":"tests"}]}