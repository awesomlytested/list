{
    "repo": "hotoo/pinyin",
    "url": "https://github.com/hotoo/pinyin",
    "branch": "master",
    "configs": [
        {
            "package": "pinyin",
            "lang": "js",
            "dir": "tests",
            "framework": "mocha",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        }
    ],
    "tests": [
        {
            "name": "我,要,排,序 => 排,我,序,要",
            "suites": [
                "pinyin.compare"
            ],
            "updatePoint": {
                "line": 142,
                "column": 24
            },
            "line": 142,
            "code": "  it(\"我,要,排,序 => 排,我,序,要\", function () {\n    const data = \"我要排序\".split(\"\");\n    const sortedData = data.sort(pinyin.compare);\n    expect(sortedData).to.eql(\"排我序要\".split(\"\"));\n  });",
            "file": "pinyin-spec.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "combo2array([], [])",
            "suites": [
                "test/util.test.js",
                "combo2array"
            ],
            "updatePoint": {
                "line": 9,
                "column": 27
            },
            "line": 9,
            "code": "    it(\"combo2array([], [])\", function () {\n      expect(util.combo2array([], [])).to.eql([]);\n    });",
            "file": "util.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "combo2array([a], [])",
            "suites": [
                "test/util.test.js",
                "combo2array"
            ],
            "updatePoint": {
                "line": 12,
                "column": 28
            },
            "line": 12,
            "code": "    it(\"combo2array([a], [])\", function () {\n      expect(util.combo2array([\"a\"], [])).to.eql([\"a\"]);\n    });",
            "file": "util.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "combo2array([], [1])",
            "suites": [
                "test/util.test.js",
                "combo2array"
            ],
            "updatePoint": {
                "line": 15,
                "column": 28
            },
            "line": 15,
            "code": "    it(\"combo2array([], [1])\", function () {\n      expect(util.combo2array([], [\"1\"])).to.eql([\"1\"]);\n    });",
            "file": "util.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "combo2array([a], [1])",
            "suites": [
                "test/util.test.js",
                "combo2array"
            ],
            "updatePoint": {
                "line": 18,
                "column": 29
            },
            "line": 18,
            "code": "    it(\"combo2array([a], [1])\", function () {\n      expect(util.combo2array([\"a\"], [\"1\"])).to.eql([\"a1\"]);\n    });",
            "file": "util.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "combo2array([a,b], [1])",
            "suites": [
                "test/util.test.js",
                "combo2array"
            ],
            "updatePoint": {
                "line": 21,
                "column": 31
            },
            "line": 21,
            "code": "    it(\"combo2array([a,b], [1])\", function () {\n      expect(util.combo2array([\"a\", \"b\"], [\"1\"])).to.eql([\"a1\", \"b1\"]);\n    });",
            "file": "util.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "combo2array([a], [1,2])",
            "suites": [
                "test/util.test.js",
                "combo2array"
            ],
            "updatePoint": {
                "line": 24,
                "column": 31
            },
            "line": 24,
            "code": "    it(\"combo2array([a], [1,2])\", function () {\n      expect(util.combo2array([\"a\"], [\"1\", \"2\"])).to.eql([\"a1\", \"a2\"]);\n    });",
            "file": "util.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "combo2array([a,b], [1,2])",
            "suites": [
                "test/util.test.js",
                "combo2array"
            ],
            "updatePoint": {
                "line": 27,
                "column": 33
            },
            "line": 27,
            "code": "    it(\"combo2array([a,b], [1,2])\", function () {\n      expect(util.combo2array([\"a\", \"b\"], [\"1\", \"2\"])).to.eql([\"a1\", \"a2\", \"b1\", \"b2\"]);\n    });",
            "file": "util.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "combo2array([a,b,c], [1,2,3])",
            "suites": [
                "test/util.test.js",
                "combo2array"
            ],
            "updatePoint": {
                "line": 30,
                "column": 37
            },
            "line": 30,
            "code": "    it(\"combo2array([a,b,c], [1,2,3])\", function () {\n      expect(util.combo2array([\"a\", \"b\", \"c\"], [\"1\", \"2\", \"3\"])).to.eql([\"a1\", \"a2\", \"a3\", \"b1\", \"b2\", \"b3\", \"c1\", \"c2\", \"c3\"]);\n    });",
            "file": "util.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "combo([])",
            "suites": [
                "test/util.test.js",
                "combo"
            ],
            "updatePoint": {
                "line": 35,
                "column": 17
            },
            "line": 35,
            "code": "    it(\"combo([])\", function () {\n      expect(util.combo([])).to.eql([]);\n    });",
            "file": "util.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "combo([[a]])",
            "suites": [
                "test/util.test.js",
                "combo"
            ],
            "updatePoint": {
                "line": 38,
                "column": 20
            },
            "line": 38,
            "code": "    it(\"combo([[a]])\", function () {\n      expect(util.combo([[\"a\"]])).to.eql([\"a\"]);\n    });",
            "file": "util.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "combo([[a,b]])",
            "suites": [
                "test/util.test.js",
                "combo"
            ],
            "updatePoint": {
                "line": 41,
                "column": 22
            },
            "line": 41,
            "code": "    it(\"combo([[a,b]])\", function () {\n      expect(util.combo([[\"a\", \"b\"]])).to.eql([\"a\", \"b\"]);\n    });",
            "file": "util.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "combo([[a,b],[1]])",
            "suites": [
                "test/util.test.js",
                "combo"
            ],
            "updatePoint": {
                "line": 44,
                "column": 26
            },
            "line": 44,
            "code": "    it(\"combo([[a,b],[1]])\", function () {\n      expect(util.combo([[\"a\", \"b\"], [\"1\"]])).to.eql([\"a1\", \"b1\"]);\n    });",
            "file": "util.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "combo([[a,b],[1,2]])",
            "suites": [
                "test/util.test.js",
                "combo"
            ],
            "updatePoint": {
                "line": 47,
                "column": 28
            },
            "line": 47,
            "code": "    it(\"combo([[a,b],[1,2]])\", function () {\n      expect(util.combo([[\"a\", \"b\"], [\"1\", \"2\"]])).to.eql([\"a1\", \"a2\", \"b1\", \"b2\"]);\n    });",
            "file": "util.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "combo([[a,b],[1,2],[A]])",
            "suites": [
                "test/util.test.js",
                "combo"
            ],
            "updatePoint": {
                "line": 50,
                "column": 32
            },
            "line": 50,
            "code": "    it(\"combo([[a,b],[1,2],[A]])\", function () {\n      expect(util.combo([[\"a\", \"b\"], [\"1\", \"2\"], [\"A\"]])).to.eql([\"a1A\", \"a2A\", \"b1A\", \"b2A\"]);\n    });",
            "file": "util.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "combo([[a,b],[1,2],[A,B]])",
            "suites": [
                "test/util.test.js",
                "combo"
            ],
            "updatePoint": {
                "line": 53,
                "column": 34
            },
            "line": 53,
            "code": "    it(\"combo([[a,b],[1,2],[A,B]])\", function () {\n      expect(util.combo([[\"a\", \"b\"], [\"1\", \"2\"], [\"A\", \"B\"]])).to.eql([\"a1A\", \"a1B\", \"a2A\", \"a2B\", \"b1A\", \"b1B\", \"b2A\", \"b2B\"]);\n    });",
            "file": "util.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "compact2array([], [])",
            "suites": [
                "test/util.test.js",
                "compact2array"
            ],
            "updatePoint": {
                "line": 58,
                "column": 29
            },
            "line": 58,
            "code": "    it(\"compact2array([], [])\", function () {\n      expect(util.compact2array([], [])).to.eql([['', '']]);\n    });",
            "file": "util.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "compact2array([a], [])",
            "suites": [
                "test/util.test.js",
                "compact2array"
            ],
            "updatePoint": {
                "line": 61,
                "column": 30
            },
            "line": 61,
            "code": "    it(\"compact2array([a], [])\", function () {\n      expect(util.compact2array([\"a\"], [])).to.eql([[\"a\", '']]);\n    });",
            "file": "util.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "compact2array([], [1])",
            "suites": [
                "test/util.test.js",
                "compact2array"
            ],
            "updatePoint": {
                "line": 64,
                "column": 30
            },
            "line": 64,
            "code": "    it(\"compact2array([], [1])\", function () {\n      expect(util.compact2array([], [\"1\"])).to.eql([['', \"1\"]]);\n    });",
            "file": "util.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "compact2array([a, b, c], [])",
            "suites": [
                "test/util.test.js",
                "compact2array"
            ],
            "updatePoint": {
                "line": 67,
                "column": 36
            },
            "line": 67,
            "code": "    it(\"compact2array([a, b, c], [])\", function () {\n      expect(util.compact2array([\"a\", \"b\", \"c\"], [])).to.eql([[\"a\", ''], [\"b\", ''], [\"c\", '']]);\n    });",
            "file": "util.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "compact2array([], [a, b, c])",
            "suites": [
                "test/util.test.js",
                "compact2array"
            ],
            "updatePoint": {
                "line": 70,
                "column": 36
            },
            "line": 70,
            "code": "    it(\"compact2array([], [a, b, c])\", function () {\n      expect(util.compact2array([], [\"a\", \"b\", \"c\"])).to.eql([['', \"a\"], ['', \"b\"], ['', \"c\"]]);\n    });",
            "file": "util.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "compact2array([a], [1])",
            "suites": [
                "test/util.test.js",
                "compact2array"
            ],
            "updatePoint": {
                "line": 73,
                "column": 31
            },
            "line": 73,
            "code": "    it(\"compact2array([a], [1])\", function () {\n      expect(util.compact2array([\"a\"], [\"1\"])).to.eql([[\"a\", \"1\"]]);\n    });",
            "file": "util.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "compact2array([a,b], [1])",
            "suites": [
                "test/util.test.js",
                "compact2array"
            ],
            "updatePoint": {
                "line": 76,
                "column": 33
            },
            "line": 76,
            "code": "    it(\"compact2array([a,b], [1])\", function () {\n      expect(util.compact2array([\"a\", \"b\"], [\"1\"])).to.eql([[\"a\", \"1\"], [\"b\", \"1\"]]);\n    });",
            "file": "util.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "compact2array([a], [1,2])",
            "suites": [
                "test/util.test.js",
                "compact2array"
            ],
            "updatePoint": {
                "line": 79,
                "column": 33
            },
            "line": 79,
            "code": "    it(\"compact2array([a], [1,2])\", function () {\n      expect(util.compact2array([\"a\"], [\"1\", \"2\"])).to.eql([[\"a\", \"1\"], [\"a\", \"2\"]]);\n    });",
            "file": "util.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "compact2array([a,b], [1,2])",
            "suites": [
                "test/util.test.js",
                "compact2array"
            ],
            "updatePoint": {
                "line": 82,
                "column": 35
            },
            "line": 82,
            "code": "    it(\"compact2array([a,b], [1,2])\", function () {\n      expect(util.compact2array([\"a\", \"b\"], [\"1\", \"2\"])).to.eql([[\"a\", \"1\"], [\"a\", \"2\"], [\"b\", \"1\"], [\"b\", \"2\"]]);\n    });",
            "file": "util.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "compact2array([a,b,c], [1,2,3])",
            "suites": [
                "test/util.test.js",
                "compact2array"
            ],
            "updatePoint": {
                "line": 85,
                "column": 39
            },
            "line": 85,
            "code": "    it(\"compact2array([a,b,c], [1,2,3])\", function () {\n      expect(util.compact2array([\"a\", \"b\", \"c\"], [\"1\", \"2\", \"3\"])).to.eql([[\"a\", \"1\"], [\"a\", \"2\"], [\"a\", \"3\"], [\"b\", \"1\"], [\"b\", \"2\"], [\"b\", \"3\"], [\"c\", \"1\"], [\"c\", \"2\"], [\"c\", \"3\"]]);\n    });",
            "file": "util.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "compact([])",
            "suites": [
                "test/util.test.js",
                "compact"
            ],
            "updatePoint": {
                "line": 90,
                "column": 19
            },
            "line": 90,
            "code": "    it(\"compact([])\", function () {\n      expect(util.compact([])).to.eql([]);\n    });",
            "file": "util.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "compact([[a]])",
            "suites": [
                "test/util.test.js",
                "compact"
            ],
            "updatePoint": {
                "line": 93,
                "column": 22
            },
            "line": 93,
            "code": "    it(\"compact([[a]])\", function () {\n      expect(util.compact([[\"a\"]])).to.eql([[\"a\"]]);\n    });",
            "file": "util.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "compact([[a,b]])",
            "suites": [
                "test/util.test.js",
                "compact"
            ],
            "updatePoint": {
                "line": 96,
                "column": 24
            },
            "line": 96,
            "code": "    it(\"compact([[a,b]])\", function () {\n      expect(util.compact([[\"a\", \"b\"]])).to.eql([[\"a\", \"b\"]]);\n    });",
            "file": "util.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "compact([[a,b],[1]])",
            "suites": [
                "test/util.test.js",
                "compact"
            ],
            "updatePoint": {
                "line": 99,
                "column": 28
            },
            "line": 99,
            "code": "    it(\"compact([[a,b],[1]])\", function () {\n      expect(util.compact([[\"a\", \"b\"], [\"1\"]])).to.eql([[\"a\", \"1\"], [\"b\", \"1\"]]);\n    });",
            "file": "util.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "compact([[a,b],[1,2]])",
            "suites": [
                "test/util.test.js",
                "compact"
            ],
            "updatePoint": {
                "line": 102,
                "column": 30
            },
            "line": 102,
            "code": "    it(\"compact([[a,b],[1,2]])\", function () {\n      expect(util.compact([[\"a\", \"b\"], [\"1\", \"2\"]])).to.eql([[\"a\", \"1\"], [\"a\", \"2\"], [\"b\", \"1\"], [\"b\", \"2\"]]);\n    });",
            "file": "util.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "compact([[a,b],[1,2],[A]])",
            "suites": [
                "test/util.test.js",
                "compact"
            ],
            "updatePoint": {
                "line": 105,
                "column": 34
            },
            "line": 105,
            "code": "    it(\"compact([[a,b],[1,2],[A]])\", function () {\n      expect(util.compact([[\"a\", \"b\"], [\"1\", \"2\"], [\"A\"]])).to.eql([[\"a\", \"1\", \"A\"], [\"a\", \"2\", \"A\"], [\"b\", \"1\", \"A\"], [\"b\", \"2\", \"A\"]]);\n    });",
            "file": "util.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "compact([[a,b],[1,2],[A]])",
            "suites": [
                "test/util.test.js",
                "compact"
            ],
            "updatePoint": {
                "line": 108,
                "column": 34
            },
            "line": 108,
            "code": "    it(\"compact([[a,b],[1,2],[A]])\", function () {\n      expect(util.compact([[\"a\", \"b\"], [\"1\", \"2\"], [\"A\"]])).to.eql([[\"a\", \"1\", \"A\"], [\"a\", \"2\", \"A\"], [\"b\", \"1\", \"A\"], [\"b\", \"2\", \"A\"]]);\n    });",
            "file": "util.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "compact([[a,b],[1,2],[A,B]])",
            "suites": [
                "test/util.test.js",
                "compact"
            ],
            "updatePoint": {
                "line": 111,
                "column": 36
            },
            "line": 111,
            "code": "    it(\"compact([[a,b],[1,2],[A,B]])\", function () {\n      expect(util.compact([[\"a\", \"b\"], [\"1\", \"2\"], [\"A\", \"B\"]])).to.eql([[\"a\", \"1\", \"A\"], [\"a\", \"1\", \"B\"], [\"a\", \"2\", \"A\"], [\"a\", \"2\", \"B\"], [\"b\", \"1\", \"A\"], [\"b\", \"1\", \"B\"], [\"b\", \"2\", \"A\"], [\"b\", \"2\", \"B\"]]);\n    });",
            "file": "util.test.js",
            "skipped": false,
            "dir": "tests"
        },
        {
            "name": "compact([[ni],[],[hao, hai]])",
            "suites": [
                "test/util.test.js",
                "compact"
            ],
            "updatePoint": {
                "line": 114,
                "column": 37
            },
            "line": 114,
            "code": "    it(\"compact([[ni],[],[hao, hai]])\", function () {\n      expect(util.compact([[\"ni\"], [], [\"hao\", \"hai\"]])).to.eql([[\"ni\", '', \"hao\"], [\"ni\", '', \"hai\"]]);\n    });",
            "file": "util.test.js",
            "skipped": false,
            "dir": "tests"
        }
    ],
    "badge": "hotoo__pinyin.svg"
}