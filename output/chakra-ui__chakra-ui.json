{"repo":"chakra-ui/chakra-ui","url":"https://github.com/chakra-ui/chakra-ui","branch":"main","configs":[{"package":"@chakra-ui/accordion","lang":"js","dir":"packages/accordion/tests","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"@chakra-ui/alert","lang":"js","dir":"packages/alert/tests","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"@chakra-ui/avatar","lang":"js","dir":"packages/avatar/tests","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"@chakra-ui/breadcrumb","lang":"js","dir":"packages/breadcrumb/tests","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"@chakra-ui/button","lang":"js","dir":"packages/button/tests","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"@chakra-ui/checkbox","lang":"js","dir":"packages/checkbox/tests","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"@chakra-ui/clickable","lang":"js","dir":"packages/clickable/tests","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"@chakra-ui/close-button","lang":"js","dir":"packages/close-button/tests","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"@chakra-ui/color-mode","lang":"ts","dir":"packages/color-mode/test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@chakra-ui/control-box","lang":"js","dir":"packages/control-box/tests","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"@chakra-ui/counter","lang":"js","dir":"packages/counter/tests","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"@chakra-ui/editable","lang":"js","dir":"packages/editable/tests","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"@chakra-ui/react-env","lang":"js","dir":"packages/env/tests","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"@chakra-ui/focus-lock","lang":"js","dir":"packages/focus-lock/tests","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"@chakra-ui/form-control","lang":"js","dir":"packages/form-control/tests","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"@chakra-ui/hooks","lang":"js","dir":"packages/hooks/tests","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"@chakra-ui/icon","lang":"js","dir":"packages/icon/tests","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"@chakra-ui/image","lang":"js","dir":"packages/image/tests","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"@chakra-ui/input","lang":"js","dir":"packages/input/tests","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"@chakra-ui/layout","lang":"js","dir":"packages/layout/tests","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"@chakra-ui/live-region","lang":"js","dir":"packages/live-region/tests","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"@chakra-ui/media-query","lang":"ts","dir":"packages/media-query/tests","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@chakra-ui/menu","lang":"js","dir":"packages/menu/tests","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"@chakra-ui/modal","lang":"js","dir":"packages/modal/tests","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"@chakra-ui/number-input","lang":"js","dir":"packages/number-input/tests","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"@chakra-ui/pin-input","lang":"js","dir":"packages/pin-input/tests","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"@chakra-ui/popover","lang":"js","dir":"packages/popover/tests","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"@chakra-ui/popper","lang":"ts","dir":"packages/popper/tests","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@chakra-ui/portal","lang":"js","dir":"packages/portal/tests","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"@chakra-ui/progress","lang":"js","dir":"packages/progress/tests","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"@chakra-ui/radio","lang":"js","dir":"packages/radio/tests","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"@chakra-ui/react","lang":"js","dir":"packages/react/tests","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"@chakra-ui/select","lang":"js","dir":"packages/select/tests","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"@chakra-ui/skeleton","lang":"ts","dir":"packages/skeleton/tests","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"@chakra-ui/slider","lang":"js","dir":"packages/slider/tests","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"@chakra-ui/spinner","lang":"js","dir":"packages/spinner/tests","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"@chakra-ui/stat","lang":"js","dir":"packages/stat/tests","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"@chakra-ui/styled-system","lang":"ts","dir":"packages/styled-system/tests","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@chakra-ui/switch","lang":"js","dir":"packages/switch/tests","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"@chakra-ui/system","lang":"ts","dir":"packages/system/tests","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@chakra-ui/table","lang":"js","dir":"packages/table/tests","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"@chakra-ui/tabs","lang":"js","dir":"packages/tabs/tests","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"@chakra-ui/tag","lang":"js","dir":"packages/tag/tests","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"@chakra-ui/textarea","lang":"js","dir":"packages/textarea/tests","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"@chakra-ui/theme","lang":"ts","dir":"packages/theme/tests","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@chakra-ui/toast","lang":"js","dir":"packages/toast/test","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"@chakra-ui/tooltip","lang":"js","dir":"packages/tooltip/tests","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"@chakra-ui/transition","lang":"js","dir":"packages/transition/tests","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"@chakra-ui/utils","lang":"ts","dir":"packages/utils/tests","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@chakra-ui/visually-hidden","lang":"js","dir":"packages/visually-hidden/tests","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"@chakra-ui/cli","lang":"ts","dir":"tooling/cli/test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"should extract all component types","suites":["Extract Component Types"],"updatePoint":{"line":4,"column":40},"line":4,"code":"  it(\"should extract all component types\", () => {\n    const theme = {\n      components: {\n        TestComponent: {\n          variants: {\n            outline: {},\n            unstyled: {},\n          },\n        },\n      },\n    }\n\n    const componentTypes = extractComponentTypes(theme)\n\n    expect(componentTypes).toMatchInlineSnapshot(`\n      Object {\n        \"TestComponent\": Object {\n          \"sizes\": Array [],\n          \"variants\": Array [\n            \"outline\",\n            \"unstyled\",\n          ],\n        },\n      }\n    `)\n  })","file":"extract-component-types.test.ts","skipped":false,"dir":"tooling/cli/test"},{"name":"should handle empty variants or sizes","suites":["Extract Component Types"],"updatePoint":{"line":31,"column":43},"line":31,"code":"  it(\"should handle empty variants or sizes\", () => {\n    const theme = {\n      components: {\n        TestComponent: {},\n      },\n    }\n\n    const componentTypes = extractComponentTypes(theme)\n\n    expect(componentTypes).toMatchInlineSnapshot(`\n      Object {\n        \"TestComponent\": Object {\n          \"sizes\": Array [],\n          \"variants\": Array [],\n        },\n      }\n    `)\n  })","file":"extract-component-types.test.ts","skipped":false,"dir":"tooling/cli/test"},{"name":"should handle arbitrary component names","suites":["Extract Component Types"],"updatePoint":{"line":50,"column":45},"line":50,"code":"  it(\"should handle arbitrary component names\", () => {\n    const theme = {\n      components: {\n        \"design-system/Button\": {},\n        \"design-system_Button\": {},\n      },\n    }\n\n    const componentTypes = extractComponentTypes(theme)\n\n    expect(componentTypes).toMatchInlineSnapshot(`\n      Object {\n        \"design-system/Button\": Object {\n          \"sizes\": Array [],\n          \"variants\": Array [],\n        },\n        \"design-system_Button\": Object {\n          \"sizes\": Array [],\n          \"variants\": Array [],\n        },\n      }\n    `)\n  })","file":"extract-component-types.test.ts","skipped":false,"dir":"tooling/cli/test"},{"name":"should extract top-level keys from the given property","suites":["Extract Keys"],"updatePoint":{"line":4,"column":59},"line":4,"code":"  it(\"should extract top-level keys from the given property\", () => {\n    const theme = {\n      textStyles: {\n        styleOne: {\n          fontSize: 16,\n          fontWeight: \"bold\",\n        },\n        styleTwo: {\n          fontSize: 64,\n        },\n      },\n    }\n\n    const textStyles = extractPropertyKeys(theme, \"textStyles\")\n    expect(textStyles).toMatchInlineSnapshot(`\n      Array [\n        \"styleOne\",\n        \"styleTwo\",\n      ]\n    `)\n  })","file":"extract-keys.test.ts","skipped":false,"dir":"tooling/cli/test"},{"name":"should handle empty entries","suites":["Extract Keys"],"updatePoint":{"line":26,"column":33},"line":26,"code":"  it(\"should handle empty entries\", () => {\n    const theme = {\n      textStyles: {\n        emptyStyle: {},\n      },\n    }\n\n    const componentTypes = extractPropertyKeys(theme, \"textStyles\")\n\n    expect(componentTypes).toMatchInlineSnapshot(`\n      Array [\n        \"emptyStyle\",\n      ]\n    `)\n  })","file":"extract-keys.test.ts","skipped":false,"dir":"tooling/cli/test"},{"name":"should handle missing properties","suites":["Extract Keys"],"updatePoint":{"line":42,"column":38},"line":42,"code":"  it(\"should handle missing properties\", () => {\n    const theme = {}\n\n    const textStyles = extractPropertyKeys(theme, \"textStyles\")\n\n    expect(textStyles).toMatchInlineSnapshot(`Array []`)\n  })","file":"extract-keys.test.ts","skipped":false,"dir":"tooling/cli/test"},{"name":"should extract all property paths","suites":["Extract Property Paths"],"updatePoint":{"line":28,"column":39},"line":28,"code":"  it(\"should extract all property paths\", () => {\n    const maxDepth = 4\n\n    const propertyPaths = extractPropertyPaths(target, maxDepth)\n\n    expect(propertyPaths).toMatchInlineSnapshot(`\n      Array [\n        \"1.11.111\",\n        \"1.11.112\",\n        \"1.12.121\",\n        \"1.12.122\",\n        \"1.12.123.231\",\n        \"1.12.123.232\",\n        \"2.21\",\n        \"2.22\",\n      ]\n    `)\n  })","file":"extract-property-paths.test.ts","skipped":false,"dir":"tooling/cli/test"},{"name":"should omit too deep keys","suites":["Extract Property Paths"],"updatePoint":{"line":47,"column":31},"line":47,"code":"  it(\"should omit too deep keys\", () => {\n    const maxDepth = 3\n\n    const propertyPaths = extractPropertyPaths(target, maxDepth)\n\n    expect(propertyPaths).toMatchInlineSnapshot(`\n      Array [\n        \"1.11.111\",\n        \"1.11.112\",\n        \"1.12.121\",\n        \"1.12.122\",\n        \"2.21\",\n        \"2.22\",\n      ]\n    `)\n  })","file":"extract-property-paths.test.ts","skipped":false,"dir":"tooling/cli/test"},{"name":"should print TS union","suites":["Extract Property Paths"],"updatePoint":{"line":64,"column":27},"line":64,"code":"  it(\"should print TS union\", () => {\n    const union = { key: [\"value1\", \"value2\"] }\n    const strict = false\n\n    const interfacePartial = printUnionMap(union, strict)\n\n    expect(interfacePartial).toMatchInlineSnapshot(\n      `\"key: \\\\\"value1\\\\\" | \\\\\"value2\\\\\" | (string & {});\"`,\n    )\n  })","file":"extract-property-paths.test.ts","skipped":false,"dir":"tooling/cli/test"},{"name":"should print strict TS union","suites":["Extract Property Paths"],"updatePoint":{"line":75,"column":34},"line":75,"code":"  it(\"should print strict TS union\", () => {\n    const union = { key: [\"value1\", \"value2\"] }\n    const strict = true\n\n    const interfacePartial = printUnionMap(union, strict)\n\n    expect(interfacePartial).toMatchInlineSnapshot(\n      `\"key: \\\\\"value1\\\\\" | \\\\\"value2\\\\\";\"`,\n    )\n  })","file":"extract-property-paths.test.ts","skipped":false,"dir":"tooling/cli/test"},{"name":"should print type (string & {}) for empty array","suites":["Extract Property Paths"],"updatePoint":{"line":86,"column":53},"line":86,"code":"  it(\"should print type (string & {}) for empty array\", () => {\n    const union = { key: [] }\n    const strict = false\n\n    const interfacePartial = printUnionMap(union, strict)\n\n    expect(interfacePartial).toMatchInlineSnapshot(`\"key: (string & {});\"`)\n  })","file":"extract-property-paths.test.ts","skipped":false,"dir":"tooling/cli/test"},{"name":"should print type never for empty array in strict mode","suites":["Extract Property Paths"],"updatePoint":{"line":95,"column":60},"line":95,"code":"  it(\"should print type never for empty array in strict mode\", () => {\n    const union = { key: [] }\n    const strict = true\n\n    const interfacePartial = printUnionMap(union, strict)\n\n    expect(interfacePartial).toMatchInlineSnapshot(`\"key: never;\"`)\n  })","file":"extract-property-paths.test.ts","skipped":false,"dir":"tooling/cli/test"},{"name":"should format with prettier","suites":["Format With Prettier"],"updatePoint":{"line":4,"column":33},"line":4,"code":"  it(\"should format with prettier\", async () => {\n    const content =\n      \"export interface ThemeTypings { fonts: 'test1'|'test2'|'test3'}\"\n\n    const pretty = await formatWithPrettierIfAvailable(content)\n\n    expect(pretty).toMatchInlineSnapshot(`\n      \"export interface ThemeTypings {\n        fonts: \\\\\"test1\\\\\" | \\\\\"test2\\\\\" | \\\\\"test3\\\\\"\n      }\n      \"\n    `)\n  })","file":"format-with-prettier.test.ts","skipped":false,"dir":"tooling/cli/test"},{"name":"should create typings for a theme","suites":["Theme typings"],"updatePoint":{"line":78,"column":39},"line":78,"code":"  it(\"should create typings for a theme\", async () => {\n    const themeInterface = await createThemeTypingsInterface(smallTheme, {\n      config: themeKeyConfiguration,\n    })\n\n    expect(themeInterface).toMatchInlineSnapshot(`\n      \"// regenerate by running\n      // npx @chakra-ui/cli tokens path/to/your/theme.(js|ts)\n      import { BaseThemeTypings } from \\\\\"./shared.types.js\\\\\"\n      export interface ThemeTypings extends BaseThemeTypings {\n        blur: string & {}\n        borders: \\\\\"sm\\\\\" | \\\\\"md\\\\\" | (string & {})\n        borderStyles: string & {}\n        borderWidths: string & {}\n        breakpoints: \\\\\"sm\\\\\" | \\\\\"md\\\\\" | (string & {})\n        colors:\n          | \\\\\"niceColor\\\\\"\n          | \\\\\"suchWowColor\\\\\"\n          | \\\\\"onlyColorSchemeColor.50\\\\\"\n          | \\\\\"onlyColorSchemeColor.100\\\\\"\n          | \\\\\"onlyColorSchemeColor.200\\\\\"\n          | \\\\\"onlyColorSchemeColor.300\\\\\"\n          | \\\\\"onlyColorSchemeColor.400\\\\\"\n          | \\\\\"onlyColorSchemeColor.500\\\\\"\n          | \\\\\"onlyColorSchemeColor.600\\\\\"\n          | \\\\\"onlyColorSchemeColor.700\\\\\"\n          | \\\\\"onlyColorSchemeColor.800\\\\\"\n          | \\\\\"onlyColorSchemeColor.900\\\\\"\n          | \\\\\"such.deep.color\\\\\"\n          | (string & {})\n        colorSchemes: \\\\\"onlyColorSchemeColor\\\\\" | (string & {})\n        fonts: \\\\\"sm\\\\\" | \\\\\"md\\\\\" | (string & {})\n        fontSizes: \\\\\"sm\\\\\" | \\\\\"md\\\\\" | (string & {})\n        fontWeights: \\\\\"sm\\\\\" | \\\\\"md\\\\\" | (string & {})\n        layerStyles: \\\\\"red\\\\\" | \\\\\"blue\\\\\" | (string & {})\n        letterSpacings: \\\\\"sm\\\\\" | \\\\\"md\\\\\" | (string & {})\n        lineHeights: \\\\\"sm\\\\\" | \\\\\"md\\\\\" | (string & {})\n        radii: \\\\\"sm\\\\\" | \\\\\"md\\\\\" | (string & {})\n        shadows: \\\\\"sm\\\\\" | \\\\\"md\\\\\" | (string & {})\n        sizes: \\\\\"sm\\\\\" | \\\\\"md\\\\\" | (string & {})\n        space: \\\\\"sm\\\\\" | \\\\\"-sm\\\\\" | \\\\\"md\\\\\" | \\\\\"-md\\\\\" | (string & {})\n        textStyles: \\\\\"small\\\\\" | \\\\\"large\\\\\" | (string & {})\n        transition: \\\\\"sm\\\\\" | \\\\\"md\\\\\" | (string & {})\n        zIndices: \\\\\"sm\\\\\" | \\\\\"md\\\\\" | (string & {})\n        components: {\n          Button: {\n            sizes: \\\\\"sm\\\\\" | (string & {})\n            variants: \\\\\"extraordinary\\\\\" | \\\\\"awesome\\\\\" | \\\\\"unused\\\\\" | (string & {})\n          }\n        }\n      }\n      \"\n    `)\n  })","file":"theme-typings.test.ts","skipped":false,"dir":"tooling/cli/test"},{"name":"should emit empty scales as loose type","suites":["Theme typings"],"updatePoint":{"line":133,"column":44},"line":133,"code":"  it(\"should emit empty scales as loose type\", async () => {\n    const themeInterface = await createThemeTypingsInterface(\n      {},\n      {\n        config: themeKeyConfiguration,\n      },\n    )\n\n    expect(themeInterface).toMatchInlineSnapshot(`\n      \"// regenerate by running\n      // npx @chakra-ui/cli tokens path/to/your/theme.(js|ts)\n      import { BaseThemeTypings } from \\\\\"./shared.types.js\\\\\"\n      export interface ThemeTypings extends BaseThemeTypings {\n        blur: string & {}\n        borders: string & {}\n        borderStyles: string & {}\n        borderWidths: string & {}\n        breakpoints: string & {}\n        colors: string & {}\n        colorSchemes: string & {}\n        fonts: string & {}\n        fontSizes: string & {}\n        fontWeights: string & {}\n        layerStyles: string & {}\n        letterSpacings: string & {}\n        lineHeights: string & {}\n        radii: string & {}\n        shadows: string & {}\n        sizes: string & {}\n        space: string & {}\n        textStyles: string & {}\n        transition: string & {}\n        zIndices: string & {}\n        components: {}\n      }\n      \"\n    `)\n  })","file":"theme-typings.test.ts","skipped":false,"dir":"tooling/cli/test"},{"name":"should emit strict component types","suites":["Theme typings"],"updatePoint":{"line":172,"column":40},"line":172,"code":"  it(\"should emit strict component types\", async () => {\n    const themeInterface = await createThemeTypingsInterface(smallTheme, {\n      config: themeKeyConfiguration,\n      strictComponentTypes: true,\n    })\n\n    expect(themeInterface).toMatchInlineSnapshot(`\n      \"// regenerate by running\n      // npx @chakra-ui/cli tokens path/to/your/theme.(js|ts)\n      import { BaseThemeTypings } from \\\\\"./shared.types.js\\\\\"\n      export interface ThemeTypings extends BaseThemeTypings {\n        blur: string & {}\n        borders: \\\\\"sm\\\\\" | \\\\\"md\\\\\" | (string & {})\n        borderStyles: string & {}\n        borderWidths: string & {}\n        breakpoints: \\\\\"sm\\\\\" | \\\\\"md\\\\\" | (string & {})\n        colors:\n          | \\\\\"niceColor\\\\\"\n          | \\\\\"suchWowColor\\\\\"\n          | \\\\\"onlyColorSchemeColor.50\\\\\"\n          | \\\\\"onlyColorSchemeColor.100\\\\\"\n          | \\\\\"onlyColorSchemeColor.200\\\\\"\n          | \\\\\"onlyColorSchemeColor.300\\\\\"\n          | \\\\\"onlyColorSchemeColor.400\\\\\"\n          | \\\\\"onlyColorSchemeColor.500\\\\\"\n          | \\\\\"onlyColorSchemeColor.600\\\\\"\n          | \\\\\"onlyColorSchemeColor.700\\\\\"\n          | \\\\\"onlyColorSchemeColor.800\\\\\"\n          | \\\\\"onlyColorSchemeColor.900\\\\\"\n          | \\\\\"such.deep.color\\\\\"\n          | (string & {})\n        colorSchemes: \\\\\"onlyColorSchemeColor\\\\\" | (string & {})\n        fonts: \\\\\"sm\\\\\" | \\\\\"md\\\\\" | (string & {})\n        fontSizes: \\\\\"sm\\\\\" | \\\\\"md\\\\\" | (string & {})\n        fontWeights: \\\\\"sm\\\\\" | \\\\\"md\\\\\" | (string & {})\n        layerStyles: \\\\\"red\\\\\" | \\\\\"blue\\\\\" | (string & {})\n        letterSpacings: \\\\\"sm\\\\\" | \\\\\"md\\\\\" | (string & {})\n        lineHeights: \\\\\"sm\\\\\" | \\\\\"md\\\\\" | (string & {})\n        radii: \\\\\"sm\\\\\" | \\\\\"md\\\\\" | (string & {})\n        shadows: \\\\\"sm\\\\\" | \\\\\"md\\\\\" | (string & {})\n        sizes: \\\\\"sm\\\\\" | \\\\\"md\\\\\" | (string & {})\n        space: \\\\\"sm\\\\\" | \\\\\"-sm\\\\\" | \\\\\"md\\\\\" | \\\\\"-md\\\\\" | (string & {})\n        textStyles: \\\\\"small\\\\\" | \\\\\"large\\\\\" | (string & {})\n        transition: \\\\\"sm\\\\\" | \\\\\"md\\\\\" | (string & {})\n        zIndices: \\\\\"sm\\\\\" | \\\\\"md\\\\\" | (string & {})\n        components: {\n          Button: {\n            sizes: \\\\\"sm\\\\\"\n            variants: \\\\\"extraordinary\\\\\" | \\\\\"awesome\\\\\" | \\\\\"unused\\\\\"\n          }\n        }\n      }\n      \"\n    `)\n  })","file":"theme-typings.test.ts","skipped":false,"dir":"tooling/cli/test"},{"name":"should create unformatted types","suites":["Theme typings"],"updatePoint":{"line":228,"column":37},"line":228,"code":"  it(\"should create unformatted types\", async () => {\n    const themeInterface = await createThemeTypingsInterface(smallTheme, {\n      config: themeKeyConfiguration,\n      format: false,\n    })\n\n    expect(themeInterface).toMatchInlineSnapshot(`\n      \"// regenerate by running\n      // npx @chakra-ui/cli tokens path/to/your/theme.(js|ts)\n      import { BaseThemeTypings } from \\\\\"./shared.types.js\\\\\"\n      export interface ThemeTypings extends BaseThemeTypings {\n        blur: (string & {});\n      borders: \\\\\"sm\\\\\" | \\\\\"md\\\\\" | (string & {});\n      borderStyles: (string & {});\n      borderWidths: (string & {});\n      breakpoints: \\\\\"sm\\\\\" | \\\\\"md\\\\\" | (string & {});\n      colors: \\\\\"niceColor\\\\\" | \\\\\"suchWowColor\\\\\" | \\\\\"onlyColorSchemeColor.50\\\\\" | \\\\\"onlyColorSchemeColor.100\\\\\" | \\\\\"onlyColorSchemeColor.200\\\\\" | \\\\\"onlyColorSchemeColor.300\\\\\" | \\\\\"onlyColorSchemeColor.400\\\\\" | \\\\\"onlyColorSchemeColor.500\\\\\" | \\\\\"onlyColorSchemeColor.600\\\\\" | \\\\\"onlyColorSchemeColor.700\\\\\" | \\\\\"onlyColorSchemeColor.800\\\\\" | \\\\\"onlyColorSchemeColor.900\\\\\" | \\\\\"such.deep.color\\\\\" | (string & {});\n      colorSchemes: \\\\\"onlyColorSchemeColor\\\\\" | (string & {});\n      fonts: \\\\\"sm\\\\\" | \\\\\"md\\\\\" | (string & {});\n      fontSizes: \\\\\"sm\\\\\" | \\\\\"md\\\\\" | (string & {});\n      fontWeights: \\\\\"sm\\\\\" | \\\\\"md\\\\\" | (string & {});\n      layerStyles: \\\\\"red\\\\\" | \\\\\"blue\\\\\" | (string & {});\n      letterSpacings: \\\\\"sm\\\\\" | \\\\\"md\\\\\" | (string & {});\n      lineHeights: \\\\\"sm\\\\\" | \\\\\"md\\\\\" | (string & {});\n      radii: \\\\\"sm\\\\\" | \\\\\"md\\\\\" | (string & {});\n      shadows: \\\\\"sm\\\\\" | \\\\\"md\\\\\" | (string & {});\n      sizes: \\\\\"sm\\\\\" | \\\\\"md\\\\\" | (string & {});\n      space: \\\\\"sm\\\\\" | \\\\\"-sm\\\\\" | \\\\\"md\\\\\" | \\\\\"-md\\\\\" | (string & {});\n      textStyles: \\\\\"small\\\\\" | \\\\\"large\\\\\" | (string & {});\n      transition: \\\\\"sm\\\\\" | \\\\\"md\\\\\" | (string & {});\n      zIndices: \\\\\"sm\\\\\" | \\\\\"md\\\\\" | (string & {});\n        components: {\n        Button: {\n        sizes: \\\\\"sm\\\\\" | (string & {});\n      variants: \\\\\"extraordinary\\\\\" | \\\\\"awesome\\\\\" | \\\\\"unused\\\\\" | (string & {});\n      }  \n      }\n\n      }\n\n      \"\n    `)\n  })","file":"theme-typings.test.ts","skipped":false,"dir":"tooling/cli/test"},{"name":"should include semantic tokens","suites":["Theme typings"],"updatePoint":{"line":272,"column":36},"line":272,"code":"  it(\"should include semantic tokens\", async () => {\n    const themeInterface = await createThemeTypingsInterface(\n      {\n        colors: {\n          gray: {\n            50: \"lightgray\",\n            900: \"darkgray\",\n          },\n          red: {\n            400: \"lightred\",\n            500: \"red\",\n          },\n        },\n        semanticTokens: {\n          colors: {\n            text: {\n              default: \"gray.900\",\n              _dark: \"gray.50\",\n            },\n            \"feedback.error\": {\n              default: \"red.500\",\n              _dark: \"red.400\",\n            },\n          },\n        },\n      },\n      {\n        config: themeKeyConfiguration,\n      },\n    )\n\n    expect(themeInterface).toMatchInlineSnapshot(`\n      \"// regenerate by running\n      // npx @chakra-ui/cli tokens path/to/your/theme.(js|ts)\n      import { BaseThemeTypings } from \\\\\"./shared.types.js\\\\\"\n      export interface ThemeTypings extends BaseThemeTypings {\n        blur: string & {}\n        borders: string & {}\n        borderStyles: string & {}\n        borderWidths: string & {}\n        breakpoints: string & {}\n        colors:\n          | \\\\\"gray.50\\\\\"\n          | \\\\\"gray.900\\\\\"\n          | \\\\\"red.400\\\\\"\n          | \\\\\"red.500\\\\\"\n          | \\\\\"text\\\\\"\n          | \\\\\"feedback.error\\\\\"\n          | (string & {})\n        colorSchemes: string & {}\n        fonts: string & {}\n        fontSizes: string & {}\n        fontWeights: string & {}\n        layerStyles: string & {}\n        letterSpacings: string & {}\n        lineHeights: string & {}\n        radii: string & {}\n        shadows: string & {}\n        sizes: string & {}\n        space: string & {}\n        textStyles: string & {}\n        transition: string & {}\n        zIndices: string & {}\n        components: {}\n      }\n      \"\n    `)\n  })","file":"theme-typings.test.ts","skipped":false,"dir":"tooling/cli/test"},{"name":"should emit strict token types","suites":["Theme typings"],"updatePoint":{"line":341,"column":36},"line":341,"code":"  it(\"should emit strict token types\", async () => {\n    const themeInterface = await createThemeTypingsInterface(smallTheme, {\n      config: themeKeyConfiguration,\n      strictTokenTypes: true,\n    })\n\n    expect(themeInterface).toMatchInlineSnapshot(`\n      \"// regenerate by running\n      // npx @chakra-ui/cli tokens path/to/your/theme.(js|ts)\n      import { BaseThemeTypings } from \\\\\"./shared.types.js\\\\\"\n      export interface ThemeTypings extends BaseThemeTypings {\n        blur: never\n        borders: \\\\\"sm\\\\\" | \\\\\"md\\\\\"\n        borderStyles: never\n        borderWidths: never\n        breakpoints: \\\\\"sm\\\\\" | \\\\\"md\\\\\"\n        colors:\n          | \\\\\"niceColor\\\\\"\n          | \\\\\"suchWowColor\\\\\"\n          | \\\\\"onlyColorSchemeColor.50\\\\\"\n          | \\\\\"onlyColorSchemeColor.100\\\\\"\n          | \\\\\"onlyColorSchemeColor.200\\\\\"\n          | \\\\\"onlyColorSchemeColor.300\\\\\"\n          | \\\\\"onlyColorSchemeColor.400\\\\\"\n          | \\\\\"onlyColorSchemeColor.500\\\\\"\n          | \\\\\"onlyColorSchemeColor.600\\\\\"\n          | \\\\\"onlyColorSchemeColor.700\\\\\"\n          | \\\\\"onlyColorSchemeColor.800\\\\\"\n          | \\\\\"onlyColorSchemeColor.900\\\\\"\n          | \\\\\"such.deep.color\\\\\"\n        colorSchemes: \\\\\"onlyColorSchemeColor\\\\\"\n        fonts: \\\\\"sm\\\\\" | \\\\\"md\\\\\"\n        fontSizes: \\\\\"sm\\\\\" | \\\\\"md\\\\\"\n        fontWeights: \\\\\"sm\\\\\" | \\\\\"md\\\\\"\n        layerStyles: \\\\\"red\\\\\" | \\\\\"blue\\\\\"\n        letterSpacings: \\\\\"sm\\\\\" | \\\\\"md\\\\\"\n        lineHeights: \\\\\"sm\\\\\" | \\\\\"md\\\\\"\n        radii: \\\\\"sm\\\\\" | \\\\\"md\\\\\"\n        shadows: \\\\\"sm\\\\\" | \\\\\"md\\\\\"\n        sizes: \\\\\"sm\\\\\" | \\\\\"md\\\\\"\n        space: \\\\\"sm\\\\\" | \\\\\"-sm\\\\\" | \\\\\"md\\\\\" | \\\\\"-md\\\\\"\n        textStyles: \\\\\"small\\\\\" | \\\\\"large\\\\\"\n        transition: \\\\\"sm\\\\\" | \\\\\"md\\\\\"\n        zIndices: \\\\\"sm\\\\\" | \\\\\"md\\\\\"\n        components: {\n          Button: {\n            sizes: \\\\\"sm\\\\\" | (string & {})\n            variants: \\\\\"extraordinary\\\\\" | \\\\\"awesome\\\\\" | \\\\\"unused\\\\\" | (string & {})\n          }\n        }\n      }\n      \"\n    `)\n  })","file":"theme-typings.test.ts","skipped":false,"dir":"tooling/cli/test"},{"name":"should emit strict component and token types","suites":["Theme typings"],"updatePoint":{"line":396,"column":50},"line":396,"code":"  it(\"should emit strict component and token types\", async () => {\n    const themeInterface = await createThemeTypingsInterface(smallTheme, {\n      config: themeKeyConfiguration,\n      strictComponentTypes: true,\n      strictTokenTypes: true,\n    })\n\n    expect(themeInterface).toMatchInlineSnapshot(`\n      \"// regenerate by running\n      // npx @chakra-ui/cli tokens path/to/your/theme.(js|ts)\n      import { BaseThemeTypings } from \\\\\"./shared.types.js\\\\\"\n      export interface ThemeTypings extends BaseThemeTypings {\n        blur: never\n        borders: \\\\\"sm\\\\\" | \\\\\"md\\\\\"\n        borderStyles: never\n        borderWidths: never\n        breakpoints: \\\\\"sm\\\\\" | \\\\\"md\\\\\"\n        colors:\n          | \\\\\"niceColor\\\\\"\n          | \\\\\"suchWowColor\\\\\"\n          | \\\\\"onlyColorSchemeColor.50\\\\\"\n          | \\\\\"onlyColorSchemeColor.100\\\\\"\n          | \\\\\"onlyColorSchemeColor.200\\\\\"\n          | \\\\\"onlyColorSchemeColor.300\\\\\"\n          | \\\\\"onlyColorSchemeColor.400\\\\\"\n          | \\\\\"onlyColorSchemeColor.500\\\\\"\n          | \\\\\"onlyColorSchemeColor.600\\\\\"\n          | \\\\\"onlyColorSchemeColor.700\\\\\"\n          | \\\\\"onlyColorSchemeColor.800\\\\\"\n          | \\\\\"onlyColorSchemeColor.900\\\\\"\n          | \\\\\"such.deep.color\\\\\"\n        colorSchemes: \\\\\"onlyColorSchemeColor\\\\\"\n        fonts: \\\\\"sm\\\\\" | \\\\\"md\\\\\"\n        fontSizes: \\\\\"sm\\\\\" | \\\\\"md\\\\\"\n        fontWeights: \\\\\"sm\\\\\" | \\\\\"md\\\\\"\n        layerStyles: \\\\\"red\\\\\" | \\\\\"blue\\\\\"\n        letterSpacings: \\\\\"sm\\\\\" | \\\\\"md\\\\\"\n        lineHeights: \\\\\"sm\\\\\" | \\\\\"md\\\\\"\n        radii: \\\\\"sm\\\\\" | \\\\\"md\\\\\"\n        shadows: \\\\\"sm\\\\\" | \\\\\"md\\\\\"\n        sizes: \\\\\"sm\\\\\" | \\\\\"md\\\\\"\n        space: \\\\\"sm\\\\\" | \\\\\"-sm\\\\\" | \\\\\"md\\\\\" | \\\\\"-md\\\\\"\n        textStyles: \\\\\"small\\\\\" | \\\\\"large\\\\\"\n        transition: \\\\\"sm\\\\\" | \\\\\"md\\\\\"\n        zIndices: \\\\\"sm\\\\\" | \\\\\"md\\\\\"\n        components: {\n          Button: {\n            sizes: \\\\\"sm\\\\\"\n            variants: \\\\\"extraordinary\\\\\" | \\\\\"awesome\\\\\" | \\\\\"unused\\\\\"\n          }\n        }\n      }\n      \"\n    `)\n  })","file":"theme-typings.test.ts","skipped":false,"dir":"tooling/cli/test"}]}