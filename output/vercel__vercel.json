{"repo":"vercel/vercel","url":"https://github.com/vercel/vercel","branch":"main","configs":[{"package":"preact","lang":"js","dir":"examples/preact/tests","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"TODO","lang":"js","dir":"examples/sapper/cypress","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"vercel-monorepo","lang":"js","dir":"test","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"@vercel/build-utils","lang":"ts","dir":"packages/build-utils/test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"vercel","lang":"js","dir":"packages/cli/test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"aurelia","lang":"js","dir":"packages/cli/test/dev/fixtures/03-aurelia/test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"polymer-starter-kit","lang":"js","dir":"packages/cli/test/dev/fixtures/12-polymer-node/test","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"hello-world","lang":"js","dir":"packages/cli/test/dev/fixtures/24-ember/tests","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"@vercel/client","lang":"ts","dir":"packages/client/tests","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@vercel/frameworks","lang":"ts","dir":"packages/frameworks/test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@vercel/go","lang":"js","dir":"packages/go/test","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"vercel-plugin-middleware","lang":"ts","dir":"packages/middleware/test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@vercel/node-bridge","lang":"js","dir":"packages/node-bridge/test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@vercel/node","lang":"js","dir":"packages/node/test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"vercel-plugin-node","lang":"ts","dir":"packages/plugin-node/test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@vercel/python","lang":"js","dir":"packages/python/test","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"@vercel/routing-utils","lang":"js","dir":"packages/routing-utils/test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@vercel/ruby","lang":"js","dir":"packages/ruby/test","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"@vercel/static-config","lang":"ts","dir":"packages/static-config/test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"Header renders 3 nav items","suites":["Initial Test of the Header"],"updatePoint":{"line":6,"column":34,"index":255},"line":6,"code":"  test('Header renders 3 nav items', () => {\n    const context = shallow( /*#__PURE__*/React.createElement(Header, null));\n    expect(context.find('h1').text()).toBe('Preact App');\n    expect(context.find('Link').length).toBe(3);\n  });","file":"header.test.js","skipped":false,"dir":"examples/preact/tests"},{"name":"has the correct <h1>","suites":["Sapper template app"],"updatePoint":{"line":5,"column":26,"index":113},"line":5,"code":"  it('has the correct <h1>', () => {\n    cy.contains('h1', 'Great success!');\n  });","file":"integration/spec.js","skipped":false,"dir":"examples/sapper/cypress"},{"name":"navigates to /about","suites":["Sapper template app"],"updatePoint":{"line":8,"column":25,"index":196},"line":8,"code":"  it('navigates to /about', () => {\n    cy.get('nav a').contains('about').click();\n    cy.url().should('include', '/about');\n  });","file":"integration/spec.js","skipped":false,"dir":"examples/sapper/cypress"},{"name":"navigates to /blog","suites":["Sapper template app"],"updatePoint":{"line":12,"column":24,"index":326},"line":12,"code":"  it('navigates to /blog', () => {\n    cy.get('nav a').contains('blog').click();\n    cy.url().should('include', '/blog');\n  });","file":"integration/spec.js","skipped":false,"dir":"examples/sapper/cypress"},{"name":"should remove \"Publish\" commits","suites":["changelog","filter"],"updatePoint":{"line":5,"column":39,"index":162},"line":5,"code":"    it('should remove \"Publish\" commits', async () => {\n      const commits = [{\n        areas: ['cli'],\n        hash: '073f353fcf1944633bb43119c8ffcff46eea0480',\n        message: 'does some work',\n        revertsHashes: [],\n        subject: '[cli] Add \"outDir\" to `tsconfig.json` (#6566) [Nathan Rajlich]'\n      }, {\n        areas: ['UNCATEGORIZED'],\n        hash: 'a1787c740de0d9004e11f7666b6014f820d3c523',\n        message: 'does some work',\n        revertsHashes: [],\n        subject: 'Publish Stable [Nathan Rajlich]'\n      }];\n      let filteredCommits = filterLog(commits);\n      expect(filteredCommits).toEqual([{\n        areas: ['cli'],\n        hash: '073f353fcf1944633bb43119c8ffcff46eea0480',\n        message: 'does some work',\n        revertsHashes: [],\n        subject: '[cli] Add \"outDir\" to `tsconfig.json` (#6566) [Nathan Rajlich]'\n      }]);\n    });","file":"utils/changelog/filter.test.js","skipped":false,"dir":"test"},{"name":"should remove \"Revert\" and the revertted commits","suites":["changelog","filter"],"updatePoint":{"line":28,"column":56,"index":1046},"line":28,"code":"    it('should remove \"Revert\" and the revertted commits', async () => {\n      const commits = [{\n        areas: ['cli'],\n        hash: '073f353fcf1944633bb43119c8ffcff46eea0480',\n        message: 'This reverts commit 17fd88e044a807adf4ee6ed662cdb7c7556e912d.',\n        revertsHashes: ['17fd88e044a807adf4ee6ed662cdb7c7556e912d'],\n        subject: 'Revert \"[cli] Add \"outDir\" to `tsconfig.json` (#6566) [Nathan Rajlich]\"'\n      }, {\n        areas: ['frameworks', 'cli'],\n        hash: '17fd88e044a807adf4ee6ed662cdb7c7556e912d',\n        message: 'does some work',\n        revertsHashes: [],\n        subject: '[frameworks][cli] Disable blank issues again [Leo Lamprecht]'\n      }, {\n        areas: ['UNCATEGORIZED'],\n        hash: 'a1787c740de0d9004e11f7666b6014f820d3c523',\n        message: 'does some work',\n        revertsHashes: [],\n        subject: 'Revert \"[cli] Switch from hardlinks to symlinks in vc build\" (#7054) [Andy]'\n      }];\n      let filteredCommits = filterLog(commits);\n      expect(filteredCommits).toEqual([{\n        areas: ['UNCATEGORIZED'],\n        hash: 'a1787c740de0d9004e11f7666b6014f820d3c523',\n        message: 'does some work',\n        revertsHashes: [],\n        subject: 'Revert \"[cli] Switch from hardlinks to symlinks in vc build\" (#7054) [Andy]'\n      }]);\n    });","file":"utils/changelog/filter.test.js","skipped":false,"dir":"test"},{"name":"should NOT remove \"Revert\" if the reverted commit is not in the current changelog entry","suites":["changelog","filter"],"updatePoint":{"line":57,"column":95,"index":2383},"line":57,"code":"    it('should NOT remove \"Revert\" if the reverted commit is not in the current changelog entry', async () => {\n      const commits = [{\n        areas: ['cli'],\n        hash: '073f353fcf1944633bb43119c8ffcff46eea0480',\n        message: 'This reverts commit 17fd88e044a807adf4ee6ed662cdb7c7556e912d.',\n        revertsHashes: ['17fd88e044a807adf4ee6ed662cdb7c7556e912d'],\n        subject: 'Revert \"[cli] Add \"outDir\" to `tsconfig.json` (#6566) [Nathan Rajlich]\"'\n      }, {\n        areas: ['frameworks', 'cli'],\n        hash: '29a44db8d9377d7f16146817aded57ebfbcff752',\n        message: 'does some work',\n        revertsHashes: [],\n        subject: '[frameworks][cli] Disable blank issues again [Leo Lamprecht]'\n      }, {\n        areas: ['UNCATEGORIZED'],\n        hash: 'a1787c740de0d9004e11f7666b6014f820d3c523',\n        message: 'does some work',\n        revertsHashes: [],\n        subject: 'Revert \"[cli] Switch from hardlinks to symlinks in vc build\" (#7054) [Andy]'\n      }];\n      let filteredCommits = filterLog(commits);\n      expect(filteredCommits).toEqual([{\n        areas: ['cli'],\n        hash: '073f353fcf1944633bb43119c8ffcff46eea0480',\n        message: 'This reverts commit 17fd88e044a807adf4ee6ed662cdb7c7556e912d.',\n        revertsHashes: ['17fd88e044a807adf4ee6ed662cdb7c7556e912d'],\n        subject: 'Revert \"[cli] Add \"outDir\" to `tsconfig.json` (#6566) [Nathan Rajlich]\"'\n      }, {\n        areas: ['frameworks', 'cli'],\n        hash: '29a44db8d9377d7f16146817aded57ebfbcff752',\n        message: 'does some work',\n        revertsHashes: [],\n        subject: '[frameworks][cli] Disable blank issues again [Leo Lamprecht]'\n      }, {\n        areas: ['UNCATEGORIZED'],\n        hash: 'a1787c740de0d9004e11f7666b6014f820d3c523',\n        message: 'does some work',\n        revertsHashes: [],\n        subject: 'Revert \"[cli] Switch from hardlinks to symlinks in vc build\" (#7054) [Andy]'\n      }]);\n    });","file":"utils/changelog/filter.test.js","skipped":false,"dir":"test"},{"name":"should group commits by area","suites":["changelog","group"],"updatePoint":{"line":24,"column":36,"index":977},"line":24,"code":"    it('should group commits by area', async () => {\n      let groupedLogLines = groupLog(commits);\n      expect(groupedLogLines).toEqual({\n        UNCATEGORIZED: ['Revert \"[cli] Switch from hardlinks to symlinks in vc build\" (#7054) [Andy]'],\n        frameworks: ['[frameworks][cli] Disable blank issues again [Leo Lamprecht]'],\n        cli: ['[cli] Add \"outDir\" to `tsconfig.json` (#6566) [Nathan Rajlich]', '[frameworks][cli] Disable blank issues again [Leo Lamprecht]']\n      });\n    });","file":"utils/changelog/group.test.js","skipped":false,"dir":"test"},{"name":"should group commits by area","suites":["changelog","parse"],"updatePoint":{"line":9,"column":36,"index":603},"line":9,"code":"    it('should group commits by area', async () => {\n      childProcess.execSync.mockReturnValue(`does some work`);\n      childProcess.execSync.mockReturnValueOnce(`This reverts commit 17fd88e044a807adf4ee6ed662cdb7c7556e912d.`);\n      let commits = parseCommits(logLines);\n      expect(commits).toEqual([{\n        areas: ['cli'],\n        hash: '073f353fcf1944633bb43119c8ffcff46eea0480',\n        message: 'This reverts commit 17fd88e044a807adf4ee6ed662cdb7c7556e912d.',\n        revertsHashes: ['17fd88e044a807adf4ee6ed662cdb7c7556e912d'],\n        subject: '[cli] Add \"outDir\" to `tsconfig.json` (#6566) [Nathan Rajlich]'\n      }, {\n        areas: ['frameworks', 'cli'],\n        hash: '17fd88e044a807adf4ee6ed662cdb7c7556e912d',\n        message: 'does some work',\n        revertsHashes: [],\n        subject: '[frameworks][cli] Disable blank issues again [Leo Lamprecht]'\n      }, {\n        areas: ['UNCATEGORIZED'],\n        hash: 'a1787c740de0d9004e11f7666b6014f820d3c523',\n        message: 'does some work',\n        revertsHashes: [],\n        subject: 'Revert \"[cli] Switch from hardlinks to symlinks in vc build\" (#7054) [Andy]'\n      }]);\n    });","file":"utils/changelog/parse.test.js","skipped":false,"dir":"test"},{"name":"should display welcome message","suites":["workspace-project App"],"updatePoint":{"line":11,"column":36},"line":11,"code":"  it('should display welcome message', () => {\n    page.navigateTo();\n    expect(page.getTitleText()).toEqual('angular app is running!');\n  });","file":"fixtures/03-zero-config-angular/e2e/src/app.e2e-spec.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should create the app","suites":["AppComponent"],"updatePoint":{"line":11,"column":27},"line":11,"code":"  it('should create the app', () => {\n    const fixture = TestBed.createComponent(AppComponent);\n    const app = fixture.debugElement.componentInstance;\n    expect(app).toBeTruthy();\n  });","file":"fixtures/03-zero-config-angular/src/app/app.component.spec.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should have as title 'angular'","suites":["AppComponent"],"updatePoint":{"line":17,"column":36},"line":17,"code":"  it(`should have as title 'angular'`, () => {\n    const fixture = TestBed.createComponent(AppComponent);\n    const app = fixture.debugElement.componentInstance;\n    expect(app.title).toEqual('angular');\n  });","file":"fixtures/03-zero-config-angular/src/app/app.component.spec.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should render title","suites":["AppComponent"],"updatePoint":{"line":23,"column":25},"line":23,"code":"  it('should render title', () => {\n    const fixture = TestBed.createComponent(AppComponent);\n    fixture.detectChanges();\n    const compiled = fixture.debugElement.nativeElement;\n    expect(compiled.querySelector('.content span').textContent).toContain(\n      'angular app is running!'\n    );\n  });","file":"fixtures/03-zero-config-angular/src/app/app.component.spec.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"Should build \"\"","suites":[],"updatePoint":{"line":44,"column":31},"line":44,"code":"  it(`Should build \"${fixture}\"`, async () => {\n    await expect(\n      testDeployment(\n        { builderUrl, buildUtilsUrl },\n        path.join(fixturesPath, fixture)\n      )\n    ).resolves.toBeDefined();\n  });","file":"integration.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"Should build \"/\"","suites":[],"updatePoint":{"line":70,"column":46},"line":70,"code":"      it(`Should build \"${builder}/${fixture}\"`, async () => {\n        await expect(\n          testDeployment(\n            { builderUrl, buildUtilsUrl },\n            path.join(fixturesPath2, fixture)\n          )\n        ).resolves.toBeDefined();\n      });","file":"integration.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"Test `detectBuilders` and `detectRoutes`","suites":[],"updatePoint":{"line":82,"column":44},"line":82,"code":"it('Test `detectBuilders` and `detectRoutes`', async () => {\n  const fixture = path.join(__dirname, 'fixtures', '01-zero-config-api');\n  const pkg = await fs.readJSON(path.join(fixture, 'package.json'));\n  const fileList = await glob('**', fixture);\n  const files = Object.keys(fileList);\n\n  const probes = [\n    {\n      path: '/api/my-endpoint',\n      mustContain: 'my-endpoint',\n      status: 200,\n    },\n    {\n      path: '/api/other-endpoint',\n      mustContain: 'other-endpoint',\n      status: 200,\n    },\n    {\n      path: '/api/team/zeit',\n      mustContain: 'team/zeit',\n      status: 200,\n    },\n    {\n      path: '/api/user/myself',\n      mustContain: 'user/myself',\n      status: 200,\n    },\n    {\n      path: '/api/not-okay/',\n      status: 404,\n    },\n    {\n      path: '/api',\n      status: 404,\n    },\n    {\n      path: '/api/',\n      status: 404,\n    },\n    {\n      path: '/',\n      mustContain: 'hello from index.txt',\n    },\n  ];\n\n  const { builders, defaultRoutes } = await detectBuilders(files, pkg);\n\n  const nowConfig = { builds: builders, routes: defaultRoutes, probes };\n\n  await fs.writeFile(\n    path.join(fixture, 'now.json'),\n    JSON.stringify(nowConfig, null, 2)\n  );\n\n  const deployment = await testDeployment(\n    { builderUrl, buildUtilsUrl },\n    fixture\n  );\n  expect(deployment).toBeDefined();\n});","file":"integration.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"Test `detectBuilders` with `index` files","suites":[],"updatePoint":{"line":143,"column":44},"line":143,"code":"it('Test `detectBuilders` with `index` files', async () => {\n  const fixture = path.join(__dirname, 'fixtures', '02-zero-config-api');\n  const pkg = await fs.readJSON(path.join(fixture, 'package.json'));\n  const fileList = await glob('**', fixture);\n  const files = Object.keys(fileList);\n\n  const probes = [\n    {\n      path: '/api/not-okay',\n      status: 404,\n    },\n    {\n      path: '/api',\n      mustContain: 'hello from api/index.js',\n      status: 200,\n    },\n    {\n      path: '/api/',\n      mustContain: 'hello from api/index.js',\n      status: 200,\n    },\n    {\n      path: '/api/index',\n      mustContain: 'hello from api/index.js',\n      status: 200,\n    },\n    {\n      path: '/api/index.js',\n      mustContain: 'hello from api/index.js',\n      status: 200,\n    },\n    {\n      path: '/api/date.js',\n      mustContain: 'hello from api/date.js',\n      status: 200,\n    },\n    {\n      // Someone might expect this to be `date.js`,\n      // but I doubt that there is any case were both\n      // `date/index.js` and `date.js` exists,\n      // so it is not special cased\n      path: '/api/date',\n      mustContain: 'hello from api/date/index.js',\n      status: 200,\n    },\n    {\n      path: '/api/date/',\n      mustContain: 'hello from api/date/index.js',\n      status: 200,\n    },\n    {\n      path: '/api/date/index',\n      mustContain: 'hello from api/date/index.js',\n      status: 200,\n    },\n    {\n      path: '/api/date/index.js',\n      mustContain: 'hello from api/date/index.js',\n      status: 200,\n    },\n    {\n      path: '/',\n      mustContain: 'hello from index.txt',\n    },\n  ];\n\n  const { builders, defaultRoutes } = await detectBuilders(files, pkg);\n\n  const nowConfig = { builds: builders, routes: defaultRoutes, probes };\n  await fs.writeFile(\n    path.join(fixture, 'now.json'),\n    JSON.stringify(nowConfig, null, 2)\n  );\n\n  const deployment = await testDeployment(\n    { builderUrl, buildUtilsUrl },\n    fixture\n  );\n  expect(deployment).toBeDefined();\n});","file":"integration.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should never select now.json src","suites":["Test `detectBuilders`"],"updatePoint":{"line":10,"column":38},"line":10,"code":"  it('should never select now.json src', async () => {\n    const files = ['docs/index.md', 'mkdocs.yml', 'now.json'];\n    const { builders, errors } = await detectBuilders(files, null, {\n      projectSettings: {\n        buildCommand: 'mkdocs build',\n        outputDirectory: 'site',\n      },\n    });\n    expect(errors).toBe(null);\n    expect(builders).toBeDefined();\n    expect(builders![0].src).not.toBe('now.json');\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"package.json + no build","suites":["Test `detectBuilders`"],"updatePoint":{"line":23,"column":29},"line":23,"code":"  it('package.json + no build', async () => {\n    const pkg = { dependencies: { next: '9.0.0' } };\n    const files = ['package.json', 'pages/index.js', 'public/index.html'];\n    const { builders, errors } = await detectBuilders(files, pkg);\n    expect(builders).toBe(null);\n    expect(errors!.length).toBe(1);\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"package.json + no build + next","suites":["Test `detectBuilders`"],"updatePoint":{"line":31,"column":36},"line":31,"code":"  it('package.json + no build + next', async () => {\n    const pkg = {\n      scripts: { build: 'next build' },\n      dependencies: { next: '9.0.0' },\n    };\n    const files = ['package.json', 'pages/index.js'];\n    const { builders, errors } = await detectBuilders(files, pkg);\n    expect(builders![0].use).toBe('@vercel/next');\n    expect(errors).toBe(null);\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"package.json + no build + next","suites":["Test `detectBuilders`"],"updatePoint":{"line":42,"column":36},"line":42,"code":"  it('package.json + no build + next', async () => {\n    const pkg = {\n      scripts: { build: 'next build' },\n      devDependencies: { next: '9.0.0' },\n    };\n    const files = ['package.json', 'pages/index.js'];\n    const { builders, errors } = await detectBuilders(files, pkg);\n    expect(builders![0].use).toBe('@vercel/next');\n    expect(errors).toBe(null);\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"package.json + no build","suites":["Test `detectBuilders`"],"updatePoint":{"line":53,"column":29},"line":53,"code":"  it('package.json + no build', async () => {\n    const pkg = {};\n    const files = ['package.json'];\n    const { builders, errors } = await detectBuilders(files, pkg);\n    expect(builders).toBe(null);\n    expect(errors!.length).toBe(1);\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"static file","suites":["Test `detectBuilders`"],"updatePoint":{"line":61,"column":17},"line":61,"code":"  it('static file', async () => {\n    const files = ['index.html'];\n    const { builders, errors } = await detectBuilders(files);\n    expect(builders).toBe(null);\n    expect(errors).toBe(null);\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"no package.json + public","suites":["Test `detectBuilders`"],"updatePoint":{"line":68,"column":30},"line":68,"code":"  it('no package.json + public', async () => {\n    const files = ['api/users.js', 'public/index.html'];\n    const { builders, errors } = await detectBuilders(files);\n    expect(builders![1].use).toBe('@vercel/static');\n    expect(errors).toBe(null);\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"no package.json + no build + raw static + api","suites":["Test `detectBuilders`"],"updatePoint":{"line":75,"column":51},"line":75,"code":"  it('no package.json + no build + raw static + api', async () => {\n    const files = ['api/users.js', 'index.html'];\n    const { builders, errors } = await detectBuilders(files);\n    expect(builders![0].use).toBe('@vercel/node');\n    expect(builders![0].src).toBe('api/users.js');\n    expect(builders![1].use).toBe('@vercel/static');\n    expect(builders![1].src).toBe('!{api/**,package.json}');\n    expect(builders!.length).toBe(2);\n    expect(errors).toBe(null);\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"package.json + no build + root + api","suites":["Test `detectBuilders`"],"updatePoint":{"line":86,"column":42},"line":86,"code":"  it('package.json + no build + root + api', async () => {\n    const files = ['index.html', 'api/[endpoint].js', 'static/image.png'];\n    const { builders, errors } = await detectBuilders(files);\n    expect(builders![0].use).toBe('@vercel/node');\n    expect(builders![0].src).toBe('api/[endpoint].js');\n    expect(builders![1].use).toBe('@vercel/static');\n    expect(builders![1].src).toBe('!{api/**,package.json}');\n    expect(builders!.length).toBe(2);\n    expect(errors).toBe(null);\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"api + ignore files","suites":["Test `detectBuilders`"],"updatePoint":{"line":97,"column":24},"line":97,"code":"  it('api + ignore files', async () => {\n    const files = [\n      'api/_utils/handler.js',\n      'api/[endpoint]/.helper.js',\n      'api/[endpoint]/[id].js',\n    ];\n\n    const { builders } = await detectBuilders(files);\n    expect(builders![0].use).toBe('@vercel/node');\n    expect(builders![0].src).toBe('api/[endpoint]/[id].js');\n    expect(builders!.length).toBe(1);\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"api + next + public","suites":["Test `detectBuilders`"],"updatePoint":{"line":110,"column":25},"line":110,"code":"  it('api + next + public', async () => {\n    const pkg = {\n      scripts: { build: 'next build' },\n      devDependencies: { next: '9.0.0' },\n    };\n    const files = ['package.json', 'api/endpoint.js', 'public/index.html'];\n\n    const { builders } = await detectBuilders(files, pkg);\n    expect(builders![0].use).toBe('@vercel/node');\n    expect(builders![0].src).toBe('api/endpoint.js');\n    expect(builders![1].use).toBe('@vercel/next');\n    expect(builders![1].src).toBe('package.json');\n    expect(builders!.length).toBe(2);\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"api + next + raw static","suites":["Test `detectBuilders`"],"updatePoint":{"line":125,"column":29},"line":125,"code":"  it('api + next + raw static', async () => {\n    const pkg = {\n      scripts: { build: 'next build' },\n      devDependencies: { next: '9.0.0' },\n    };\n    const files = ['package.json', 'api/endpoint.js', 'index.html'];\n\n    const { builders } = await detectBuilders(files, pkg);\n    expect(builders![0].use).toBe('@vercel/node');\n    expect(builders![0].src).toBe('api/endpoint.js');\n    expect(builders![1].use).toBe('@vercel/next');\n    expect(builders![1].src).toBe('package.json');\n    expect(builders!.length).toBe(2);\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"api + raw static","suites":["Test `detectBuilders`"],"updatePoint":{"line":140,"column":22},"line":140,"code":"  it('api + raw static', async () => {\n    const files = ['api/endpoint.js', 'index.html', 'favicon.ico'];\n\n    const { builders } = await detectBuilders(files);\n    expect(builders![0].use).toBe('@vercel/node');\n    expect(builders![0].src).toBe('api/endpoint.js');\n    expect(builders![1].use).toBe('@vercel/static');\n    expect(builders![1].src).toBe('!{api/**,package.json}');\n    expect(builders!.length).toBe(2);\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"api + public","suites":["Test `detectBuilders`"],"updatePoint":{"line":151,"column":18},"line":151,"code":"  it('api + public', async () => {\n    const files = [\n      'api/endpoint.js',\n      'public/index.html',\n      'public/favicon.ico',\n      'README.md',\n    ];\n\n    const { builders } = await detectBuilders(files);\n    expect(builders![0].use).toBe('@vercel/node');\n    expect(builders![0].src).toBe('api/endpoint.js');\n    expect(builders![1].use).toBe('@vercel/static');\n    expect(builders![1].src).toBe('public/**/*');\n    expect(builders!.length).toBe(2);\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"api go with test files","suites":["Test `detectBuilders`"],"updatePoint":{"line":167,"column":28},"line":167,"code":"  it('api go with test files', async () => {\n    const files = [\n      'api/index.go',\n      'api/index_test.go',\n      'api/test.go',\n      'api/testing_another.go',\n      'api/readme.md',\n      'api/config/staging.go',\n      'api/config/staging_test.go',\n      'api/config/production.go',\n      'api/config/production_test.go',\n      'api/src/controllers/health.go',\n      'api/src/controllers/user.module.go',\n      'api/src/controllers/user.module_test.go',\n    ];\n\n    const { builders } = await detectBuilders(files);\n    expect(builders!.length).toBe(7);\n    expect(builders!.some(b => b.src!.endsWith('_test.go'))).toBe(false);\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"just public","suites":["Test `detectBuilders`"],"updatePoint":{"line":188,"column":17},"line":188,"code":"  it('just public', async () => {\n    const files = ['public/index.html', 'public/favicon.ico', 'README.md'];\n\n    const { builders } = await detectBuilders(files);\n    expect(builders![0].src).toBe('public/**/*');\n    expect(builders!.length).toBe(1);\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"next + public","suites":["Test `detectBuilders`"],"updatePoint":{"line":196,"column":19},"line":196,"code":"  it('next + public', async () => {\n    const pkg = {\n      scripts: { build: 'next build' },\n      devDependencies: { next: '9.0.0' },\n    };\n    const files = ['package.json', 'public/index.html', 'README.md'];\n\n    const { builders } = await detectBuilders(files, pkg);\n    expect(builders![0].use).toBe('@vercel/next');\n    expect(builders![0].src).toBe('package.json');\n    expect(builders!.length).toBe(1);\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"nuxt","suites":["Test `detectBuilders`"],"updatePoint":{"line":209,"column":10},"line":209,"code":"  it('nuxt', async () => {\n    const pkg = {\n      scripts: { build: 'nuxt build' },\n      dependencies: { nuxt: '2.8.1' },\n    };\n    const files = ['package.json', 'pages/index.js'];\n\n    const { builders } = await detectBuilders(files, pkg);\n    expect(builders![0].use).toBe('@vercel/static-build');\n    expect(builders![0].src).toBe('package.json');\n    expect(builders!.length).toBe(1);\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"nuxt + tag canary","suites":["Test `detectBuilders`"],"updatePoint":{"line":222,"column":23},"line":222,"code":"  it('nuxt + tag canary', async () => {\n    const pkg = {\n      scripts: { build: 'nuxt build' },\n      dependencies: { nuxt: '2.8.1' },\n    };\n    const files = ['package.json', 'pages/index.js'];\n\n    const { builders } = await detectBuilders(files, pkg, { tag: 'canary' });\n    expect(builders![0].use).toBe('@vercel/static-build@canary');\n    expect(builders![0].src).toBe('package.json');\n    expect(builders!.length).toBe(1);\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"package.json with no build + api","suites":["Test `detectBuilders`"],"updatePoint":{"line":235,"column":38},"line":235,"code":"  it('package.json with no build + api', async () => {\n    const pkg = { dependencies: { next: '9.0.0' } };\n    const files = ['package.json', 'api/[endpoint].js'];\n\n    const { builders } = await detectBuilders(files, pkg);\n    expect(builders![0].use).toBe('@vercel/node');\n    expect(builders![0].src).toBe('api/[endpoint].js');\n    expect(builders!.length).toBe(1);\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"package.json with no build + public directory","suites":["Test `detectBuilders`"],"updatePoint":{"line":245,"column":51},"line":245,"code":"  it('package.json with no build + public directory', async () => {\n    const pkg = { dependencies: { next: '9.0.0' } };\n    const files = ['package.json', 'public/index.html'];\n\n    const { builders, errors } = await detectBuilders(files, pkg);\n    expect(builders).toBe(null);\n    expect(errors!.length).toBe(1);\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"no package.json + api","suites":["Test `detectBuilders`"],"updatePoint":{"line":254,"column":27},"line":254,"code":"  it('no package.json + api', async () => {\n    const files = ['api/[endpoint].js', 'api/[endpoint]/[id].js'];\n\n    const { builders } = await detectBuilders(files);\n    expect(builders!.length).toBe(2);\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"no package.json + no api","suites":["Test `detectBuilders`"],"updatePoint":{"line":261,"column":30},"line":261,"code":"  it('no package.json + no api', async () => {\n    const files = ['index.html'];\n\n    const { builders, errors } = await detectBuilders(files);\n    expect(builders).toBe(null);\n    expect(errors).toBe(null);\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"package.json + api + canary","suites":["Test `detectBuilders`"],"updatePoint":{"line":269,"column":33},"line":269,"code":"  it('package.json + api + canary', async () => {\n    const pkg = {\n      scripts: { build: 'next build' },\n      dependencies: { next: '9.0.0' },\n    };\n    const files = [\n      'pages/index.js',\n      'api/[endpoint].js',\n      'api/[endpoint]/[id].js',\n    ];\n\n    const { builders } = await detectBuilders(files, pkg, { tag: 'canary' });\n    expect(builders![0].use).toBe('@vercel/node@canary');\n    expect(builders![1].use).toBe('@vercel/node@canary');\n    expect(builders![2].use).toBe('@vercel/next@canary');\n    expect(builders!.length).toBe(3);\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"package.json + api + latest","suites":["Test `detectBuilders`"],"updatePoint":{"line":287,"column":33},"line":287,"code":"  it('package.json + api + latest', async () => {\n    const pkg = {\n      scripts: { build: 'next build' },\n      dependencies: { next: '9.0.0' },\n    };\n    const files = [\n      'pages/index.js',\n      'api/[endpoint].js',\n      'api/[endpoint]/[id].js',\n    ];\n\n    const { builders } = await detectBuilders(files, pkg, { tag: 'latest' });\n    expect(builders![0].use).toBe('@vercel/node@latest');\n    expect(builders![1].use).toBe('@vercel/node@latest');\n    expect(builders![2].use).toBe('@vercel/next@latest');\n    expect(builders!.length).toBe(3);\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"package.json + api + random tag","suites":["Test `detectBuilders`"],"updatePoint":{"line":305,"column":37},"line":305,"code":"  it('package.json + api + random tag', async () => {\n    const pkg = {\n      scripts: { build: 'next build' },\n      dependencies: { next: '9.0.0' },\n    };\n    const files = [\n      'pages/index.js',\n      'api/[endpoint].js',\n      'api/[endpoint]/[id].js',\n    ];\n\n    const { builders } = await detectBuilders(files, pkg, { tag: 'haha' });\n    expect(builders![0].use).toBe('@vercel/node@haha');\n    expect(builders![1].use).toBe('@vercel/node@haha');\n    expect(builders![2].use).toBe('@vercel/next@haha');\n    expect(builders!.length).toBe(3);\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"next.js pages/api + api","suites":["Test `detectBuilders`"],"updatePoint":{"line":323,"column":29},"line":323,"code":"  it('next.js pages/api + api', async () => {\n    const pkg = {\n      scripts: { build: 'next build' },\n      dependencies: { next: '9.0.0' },\n    };\n    const files = ['api/user.js', 'pages/api/user.js'];\n\n    const { warnings, errors, builders } = await detectBuilders(files, pkg);\n\n    expect(errors).toBe(null);\n    expect(warnings[0]).toBeDefined();\n    expect(warnings[0].code).toBe('conflicting_files');\n    expect(builders).toBeDefined();\n    expect(builders!.length).toBe(2);\n    expect(builders![0].use).toBe('@vercel/node');\n    expect(builders![1].use).toBe('@vercel/next');\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"many static files + one api file","suites":["Test `detectBuilders`"],"updatePoint":{"line":341,"column":38},"line":341,"code":"  it('many static files + one api file', async () => {\n    const files = Array.from({ length: 5000 }).map((_, i) => `file${i}.html`);\n    files.push('api/index.ts');\n    const { builders } = await detectBuilders(files);\n\n    expect(builders!.length).toBe(2);\n    expect(builders![0].use).toBe('@vercel/node');\n    expect(builders![0].src).toBe('api/index.ts');\n    expect(builders![1].use).toBe('@vercel/static');\n    expect(builders![1].src).toBe('!{api/**,package.json}');\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"functions with nextjs","suites":["Test `detectBuilders`"],"updatePoint":{"line":353,"column":27},"line":353,"code":"  it('functions with nextjs', async () => {\n    const pkg = {\n      scripts: { build: 'next build' },\n      dependencies: { next: '9.0.0' },\n    };\n    const functions = {\n      'pages/api/teams/**': {\n        memory: 128,\n        maxDuration: 10,\n      },\n    };\n    const files = [\n      'package.json',\n      'pages/index.js',\n      'pages/api/teams/members.ts',\n    ];\n    const { builders, errors } = await detectBuilders(files, pkg, {\n      functions,\n    });\n\n    expect(errors).toBe(null);\n    expect(builders!.length).toBe(1);\n    expect(builders![0]).toEqual({\n      src: 'package.json',\n      use: '@vercel/next',\n      config: {\n        zeroConfig: true,\n        functions: {\n          'pages/api/teams/**': {\n            memory: 128,\n            maxDuration: 10,\n          },\n        },\n      },\n    });\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"extend with functions","suites":["Test `detectBuilders`"],"updatePoint":{"line":390,"column":27},"line":390,"code":"  it('extend with functions', async () => {\n    const pkg = {\n      scripts: { build: 'next build' },\n      dependencies: { next: '9.0.0' },\n    };\n    const functions = {\n      'api/users/*.ts': {\n        runtime: 'my-custom-runtime-package@1.0.0',\n      },\n      'api/teams/members.ts': {\n        memory: 128,\n        maxDuration: 10,\n      },\n    };\n    const files = [\n      'package.json',\n      'pages/index.js',\n      'api/users/[id].ts',\n      'api/teams/members.ts',\n    ];\n    const { builders } = await detectBuilders(files, pkg, { functions });\n\n    expect(builders!.length).toBe(3);\n    expect(builders![0]).toEqual({\n      src: 'api/teams/members.ts',\n      use: '@vercel/node',\n      config: {\n        zeroConfig: true,\n        functions: {\n          'api/teams/members.ts': {\n            memory: 128,\n            maxDuration: 10,\n          },\n        },\n      },\n    });\n    expect(builders![1]).toEqual({\n      src: 'api/users/[id].ts',\n      use: 'my-custom-runtime-package@1.0.0',\n      config: {\n        zeroConfig: true,\n        functions: {\n          'api/users/*.ts': {\n            runtime: 'my-custom-runtime-package@1.0.0',\n          },\n        },\n      },\n    });\n    expect(builders![2]).toEqual({\n      src: 'package.json',\n      use: '@vercel/next',\n      config: {\n        zeroConfig: true,\n      },\n    });\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"invalid function key","suites":["Test `detectBuilders`"],"updatePoint":{"line":447,"column":26},"line":447,"code":"  it('invalid function key', async () => {\n    const functions = { ['a'.repeat(1000)]: { memory: 128 } };\n    const files = ['pages/index.ts'];\n    const { builders, errors } = await detectBuilders(files, null, {\n      functions,\n    });\n\n    expect(builders).toBe(null);\n    expect(errors!.length).toBe(1);\n    expect(errors![0].code).toBe('invalid_function_glob');\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"invalid function maxDuration","suites":["Test `detectBuilders`"],"updatePoint":{"line":459,"column":34},"line":459,"code":"  it('invalid function maxDuration', async () => {\n    const functions = { 'pages/index.ts': { maxDuration: -1 } };\n    const files = ['pages/index.ts'];\n    const { builders, errors } = await detectBuilders(files, null, {\n      functions,\n    });\n\n    expect(builders).toBe(null);\n    expect(errors!.length).toBe(1);\n    expect(errors![0].code).toBe('invalid_function_duration');\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"invalid function memory","suites":["Test `detectBuilders`"],"updatePoint":{"line":471,"column":29},"line":471,"code":"  it('invalid function memory', async () => {\n    const functions = { 'pages/index.ts': { memory: 200 } };\n    const files = ['pages/index.ts'];\n    const { builders, errors } = await detectBuilders(files, null, {\n      functions,\n    });\n\n    expect(builders).toBe(null);\n    expect(errors!.length).toBe(1);\n    expect(errors![0].code).toBe('invalid_function_memory');\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"missing runtime version","suites":["Test `detectBuilders`"],"updatePoint":{"line":483,"column":29},"line":483,"code":"  it('missing runtime version', async () => {\n    const functions = { 'pages/index.ts': { runtime: 'haha' } };\n    const files = ['pages/index.ts'];\n    const { builders, errors } = await detectBuilders(files, null, {\n      functions,\n    });\n\n    expect(builders).toBe(null);\n    expect(errors!.length).toBe(1);\n    expect(errors![0].code).toBe('invalid_function_runtime');\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"use a custom runtime","suites":["Test `detectBuilders`"],"updatePoint":{"line":495,"column":26},"line":495,"code":"  it('use a custom runtime', async () => {\n    const functions = { 'api/user.php': { runtime: 'vercel-php@0.1.0' } };\n    const files = ['api/user.php'];\n    const { builders, errors } = await detectBuilders(files, null, {\n      functions,\n    });\n\n    expect(errors).toBe(null);\n    expect(builders!.length).toBe(1);\n    expect(builders![0].use).toBe('vercel-php@0.1.0');\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"use a custom runtime but without a source","suites":["Test `detectBuilders`"],"updatePoint":{"line":507,"column":47},"line":507,"code":"  it('use a custom runtime but without a source', async () => {\n    const functions = { 'api/user.php': { runtime: 'vercel-php@0.1.0' } };\n    const files = ['api/team.js'];\n    const { errors } = await detectBuilders(files, null, {\n      functions,\n    });\n\n    expect(errors!.length).toBe(1);\n    expect(errors![0].code).toBe('unused_function');\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"do not allow empty functions","suites":["Test `detectBuilders`"],"updatePoint":{"line":518,"column":34},"line":518,"code":"  it('do not allow empty functions', async () => {\n    const functions = { 'api/user.php': {} };\n    const files = ['api/user.php'];\n    const { errors } = await detectBuilders(files, null, {\n      functions,\n    });\n\n    expect(errors!.length).toBe(1);\n    expect(errors![0].code).toBe('invalid_function');\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"do not allow null functions","suites":["Test `detectBuilders`"],"updatePoint":{"line":529,"column":33},"line":529,"code":"  it('do not allow null functions', async () => {\n    const functions = { 'api/user.php': null };\n    const files = ['api/user.php'];\n    // @ts-ignore\n    const { errors } = await detectBuilders(files, null, {\n      // @ts-ignore\n      functions,\n    });\n\n    expect(errors!.length).toBe(1);\n    expect(errors![0].code).toBe('invalid_function');\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"Do not allow functions that are not used by @vercel/next","suites":["Test `detectBuilders`"],"updatePoint":{"line":542,"column":62},"line":542,"code":"  it('Do not allow functions that are not used by @vercel/next', async () => {\n    const pkg = {\n      scripts: { build: 'next build' },\n      dependencies: { next: '9.0.0' },\n    };\n    const functions = { 'test.js': { memory: 1024 } };\n    const files = ['pages/index.js', 'test.js'];\n\n    const { errors } = await detectBuilders(files, pkg, { functions });\n\n    expect(errors).toBeDefined();\n    expect(errors![0].code).toBe('unused_function');\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"Must include includeFiles config property","suites":["Test `detectBuilders`"],"updatePoint":{"line":556,"column":47},"line":556,"code":"  it('Must include includeFiles config property', async () => {\n    const functions = {\n      'api/test.js': { includeFiles: 'text/include.txt' },\n    };\n    const files = ['api/test.js'];\n\n    const { builders, errors } = await detectBuilders(files, null, {\n      functions,\n    });\n\n    expect(errors).toBe(null);\n    expect(builders).not.toBe(null);\n    expect(builders![0].use).toBe('@vercel/node');\n    expect(builders![0].config).toMatchObject({\n      functions,\n      zeroConfig: true,\n      includeFiles: 'text/include.txt',\n    });\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"Must include excludeFiles config property","suites":["Test `detectBuilders`"],"updatePoint":{"line":576,"column":47},"line":576,"code":"  it('Must include excludeFiles config property', async () => {\n    const functions = {\n      'api/test.js': { excludeFiles: 'text/exclude.txt' },\n    };\n    const files = ['api/test.js'];\n\n    const { builders, errors } = await detectBuilders(files, null, {\n      functions,\n    });\n\n    expect(errors).toBe(null);\n    expect(builders).not.toBe(null);\n    expect(builders![0].use).toBe('@vercel/node');\n    expect(builders![0].config).toMatchObject({\n      functions,\n      zeroConfig: true,\n      excludeFiles: 'text/exclude.txt',\n    });\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"Must include excludeFiles and includeFiles config property","suites":["Test `detectBuilders`"],"updatePoint":{"line":596,"column":64},"line":596,"code":"  it('Must include excludeFiles and includeFiles config property', async () => {\n    const functions = {\n      'api/test.js': {\n        excludeFiles: 'text/exclude.txt',\n        includeFiles: 'text/include.txt',\n      },\n    };\n    const files = ['api/test.js'];\n\n    const { builders, errors } = await detectBuilders(files, null, {\n      functions,\n    });\n\n    expect(errors).toBe(null);\n    expect(builders).not.toBe(null);\n    expect(builders![0].use).toBe('@vercel/node');\n    expect(builders![0].config).toMatchObject({\n      functions,\n      zeroConfig: true,\n      excludeFiles: 'text/exclude.txt',\n      includeFiles: 'text/include.txt',\n    });\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"Must fail for includeFiles config property","suites":["Test `detectBuilders`"],"updatePoint":{"line":620,"column":48},"line":620,"code":"  it('Must fail for includeFiles config property', async () => {\n    const functions = {\n      'api/test.js': { includeFiles: { test: 1 } },\n    };\n    const files = ['api/test.js'];\n\n    // @ts-ignore\n    const { errors } = await detectBuilders(files, null, { functions });\n\n    expect(errors).not.toBe(null);\n    expect(errors![0].code).toBe('invalid_function_property');\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"Must fail for excludeFiles config property","suites":["Test `detectBuilders`"],"updatePoint":{"line":633,"column":48},"line":633,"code":"  it('Must fail for excludeFiles config property', async () => {\n    const functions = {\n      'api/test.js': { excludeFiles: { test: 1 } },\n    };\n    const files = ['api/test.js'];\n\n    // @ts-ignore: Since we test an invalid type\n    const { errors } = await detectBuilders(files, null, { functions });\n\n    expect(errors).not.toBe(null);\n    expect(errors![0].code).toBe('invalid_function_property');\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"Must fail when function patterns start with a slash","suites":["Test `detectBuilders`"],"updatePoint":{"line":646,"column":57},"line":646,"code":"  it('Must fail when function patterns start with a slash', async () => {\n    const functions = {\n      '/api/test.js': { memory: 128 },\n    };\n    const files = ['api/test.js', '/api/test.js'];\n\n    const { errors } = await detectBuilders(files, null, { functions });\n\n    expect(errors).not.toBe(null);\n    expect(errors![0].code).toBe('invalid_function_source');\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"Custom static output directory","suites":["Test `detectBuilders`"],"updatePoint":{"line":658,"column":36},"line":658,"code":"  it('Custom static output directory', async () => {\n    const projectSettings = {\n      outputDirectory: 'dist',\n    };\n\n    const files = ['dist/index.html', 'dist/style.css'];\n\n    const { builders, defaultRoutes } = await detectBuilders(files, null, {\n      projectSettings,\n    });\n\n    expect(builders!.length).toBe(1);\n    expect(builders![0].src).toBe('dist/**/*');\n    expect(builders![0].use).toBe('@vercel/static');\n\n    expect(defaultRoutes!.length).toBe(1);\n    expect((defaultRoutes![0] as any).src).toBe('/(.*)');\n    expect((defaultRoutes![0] as any).dest).toBe('/dist/$1');\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"Custom static output directory with api","suites":["Test `detectBuilders`"],"updatePoint":{"line":678,"column":45},"line":678,"code":"  it('Custom static output directory with api', async () => {\n    const projectSettings = {\n      outputDirectory: 'output',\n    };\n\n    const files = ['api/user.ts', 'output/index.html', 'output/style.css'];\n\n    const { builders, defaultRoutes } = await detectBuilders(files, null, {\n      projectSettings,\n    });\n\n    expect(builders!.length).toBe(2);\n    expect(builders![1].src).toBe('output/**/*');\n    expect(builders![1].use).toBe('@vercel/static');\n\n    expect(defaultRoutes!.length).toBe(3);\n    expect((defaultRoutes![1] as any).status).toBe(404);\n    expect((defaultRoutes![2] as any).src).toBe('/(.*)');\n    expect((defaultRoutes![2] as any).dest).toBe('/output/$1');\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"Framework with non-package.json entrypoint","suites":["Test `detectBuilders`"],"updatePoint":{"line":699,"column":48},"line":699,"code":"  it('Framework with non-package.json entrypoint', async () => {\n    const files = ['config.yaml'];\n    const projectSettings = {\n      framework: 'hugo',\n    };\n\n    const { builders } = await detectBuilders(files, null, { projectSettings });\n\n    expect(builders).toEqual([\n      {\n        use: '@vercel/static-build',\n        src: 'config.yaml',\n        config: {\n          zeroConfig: true,\n          framework: 'hugo',\n        },\n      },\n    ]);\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"No framework, only package.json","suites":["Test `detectBuilders`"],"updatePoint":{"line":719,"column":37},"line":719,"code":"  it('No framework, only package.json', async () => {\n    const files = ['package.json'];\n    const pkg = {\n      scripts: {\n        build: 'build.sh',\n      },\n    };\n\n    const { builders } = await detectBuilders(files, pkg);\n\n    expect(builders).toEqual([\n      {\n        use: '@vercel/static-build',\n        src: 'package.json',\n        config: {\n          zeroConfig: true,\n        },\n      },\n    ]);\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"Framework with an API","suites":["Test `detectBuilders`"],"updatePoint":{"line":740,"column":27},"line":740,"code":"  it('Framework with an API', async () => {\n    const files = ['config.rb', 'api/date.rb'];\n    const projectSettings = { framework: 'middleman' };\n\n    const { builders } = await detectBuilders(files, null, { projectSettings });\n\n    expect(builders).toEqual([\n      {\n        use: '@vercel/ruby',\n        src: 'api/date.rb',\n        config: {\n          zeroConfig: true,\n        },\n      },\n      {\n        use: '@vercel/static-build',\n        src: 'config.rb',\n        config: {\n          zeroConfig: true,\n          framework: 'middleman',\n        },\n      },\n    ]);\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"Error for non-api functions","suites":["Test `detectBuilders`"],"updatePoint":{"line":765,"column":33},"line":765,"code":"  it('Error for non-api functions', async () => {\n    const files = ['server/hello.ts', 'public/index.html'];\n    const functions = {\n      'server/**/*.ts': {\n        runtime: '@vercel/node@1.3.1',\n      },\n    };\n\n    const { errors } = await detectBuilders(files, null, { functions });\n\n    expect(errors).toEqual([\n      {\n        code: 'unused_function',\n        message: `The pattern \"server/**/*.ts\" defined in \\`functions\\` doesn't match any Serverless Functions inside the \\`api\\` directory.`,\n        action: 'Learn More',\n        link: 'https://vercel.link/unmatched-function-pattern',\n      },\n    ]);\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"All static if `buildCommand` is an empty string","suites":["Test `detectBuilders`"],"updatePoint":{"line":785,"column":53},"line":785,"code":"  it('All static if `buildCommand` is an empty string', async () => {\n    const files = ['index.html'];\n    const projectSettings = { buildCommand: '' };\n    const { builders, errors } = await detectBuilders(files, null, {\n      projectSettings,\n    });\n    expect(errors).toBe(null);\n    expect(builders).toBe(null);\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"All static if `outputDirectory` is an empty string","suites":["Test `detectBuilders`"],"updatePoint":{"line":795,"column":56},"line":795,"code":"  it('All static if `outputDirectory` is an empty string', async () => {\n    const files = ['index.html'];\n    const projectSettings = { outputDirectory: '' };\n    const { builders, errors } = await detectBuilders(files, null, {\n      projectSettings,\n    });\n    expect(errors).toBe(null);\n    expect(builders).toBe(null);\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"All static if `buildCommand` is an empty string with an `outputDirectory`","suites":["Test `detectBuilders`"],"updatePoint":{"line":805,"column":79},"line":805,"code":"  it('All static if `buildCommand` is an empty string with an `outputDirectory`', async () => {\n    const files = ['out/index.html'];\n    const projectSettings = { buildCommand: '', outputDirectory: 'out' };\n    const { builders, errors } = await detectBuilders(files, null, {\n      projectSettings,\n    });\n    expect(errors).toBe(null);\n    expect(builders![0]!.use).toBe('@vercel/static');\n    expect(builders![0]!.src).toBe('out/**/*');\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"do not require build script when `buildCommand` is an empty string","suites":["Test `detectBuilders`"],"updatePoint":{"line":816,"column":72},"line":816,"code":"  it('do not require build script when `buildCommand` is an empty string', async () => {\n    const files = ['index.html', 'about.html', 'package.json'];\n    const projectSettings = { buildCommand: '', outputDirectory: '' };\n    const pkg = {\n      scripts: {\n        build: 'false',\n      },\n    };\n\n    const { builders, errors } = await detectBuilders(files, pkg, {\n      projectSettings,\n    });\n    expect(builders).toBe(null);\n    expect(errors).toBe(null);\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should select \"installCommand\"","suites":["Test `detectBuilders` with `featHandleMiss=true`"],"updatePoint":{"line":836,"column":36},"line":836,"code":"  it('should select \"installCommand\"', async () => {\n    const pkg = {\n      scripts: { build: 'next build' },\n      dependencies: { next: '9.0.0' },\n    };\n    const files = ['package.json', 'pages/index.js', 'public/index.html'];\n    const { builders, errors } = await detectBuilders(files, pkg, {\n      featHandleMiss,\n      projectSettings: {\n        installCommand: 'npx pnpm install',\n      },\n    });\n    expect(errors).toBe(null);\n    expect(builders).toBeDefined();\n    expect(builders!.length).toStrictEqual(1);\n    expect(builders![0].src).toStrictEqual('package.json');\n    expect(builders![0].use).toStrictEqual('@vercel/next');\n    expect(builders![0].config!.zeroConfig).toStrictEqual(true);\n    expect(builders![0].config!.installCommand).toStrictEqual(\n      'npx pnpm install'\n    );\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should select empty \"installCommand\"","suites":["Test `detectBuilders` with `featHandleMiss=true`"],"updatePoint":{"line":859,"column":42},"line":859,"code":"  it('should select empty \"installCommand\"', async () => {\n    const pkg = {\n      scripts: { build: 'next build' },\n      dependencies: { next: '9.0.0' },\n    };\n    const files = ['package.json', 'pages/index.js', 'public/index.html'];\n    const { builders, errors } = await detectBuilders(files, pkg, {\n      featHandleMiss,\n      projectSettings: {\n        installCommand: '',\n      },\n    });\n    expect(errors).toBe(null);\n    expect(builders).toBeDefined();\n    expect(builders!.length).toStrictEqual(1);\n    expect(builders![0].src).toStrictEqual('package.json');\n    expect(builders![0].use).toStrictEqual('@vercel/next');\n    expect(builders![0].config!.zeroConfig).toStrictEqual(true);\n    expect(builders![0].config!.installCommand).toStrictEqual('');\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should never select now.json src","suites":["Test `detectBuilders` with `featHandleMiss=true`"],"updatePoint":{"line":880,"column":38},"line":880,"code":"  it('should never select now.json src', async () => {\n    const files = ['docs/index.md', 'mkdocs.yml', 'now.json'];\n    const { builders, errors } = await detectBuilders(files, null, {\n      featHandleMiss,\n      projectSettings: {\n        buildCommand: 'mkdocs build',\n        outputDirectory: 'site',\n      },\n    });\n    expect(errors).toBe(null);\n    expect(builders).toBeDefined();\n    expect(builders![0].src).not.toBe('now.json');\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"package.json + no build","suites":["Test `detectBuilders` with `featHandleMiss=true`"],"updatePoint":{"line":894,"column":29},"line":894,"code":"  it('package.json + no build', async () => {\n    const pkg = { dependencies: { next: '9.0.0' } };\n    const files = ['package.json', 'pages/index.js', 'public/index.html'];\n    const { builders, errors } = await detectBuilders(files, pkg, {\n      featHandleMiss,\n    });\n    expect(builders).toBe(null);\n    expect(errors!.length).toBe(1);\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"package.json + no build + next","suites":["Test `detectBuilders` with `featHandleMiss=true`"],"updatePoint":{"line":904,"column":36},"line":904,"code":"  it('package.json + no build + next', async () => {\n    const pkg = {\n      scripts: { build: 'next build' },\n      dependencies: { next: '9.0.0' },\n    };\n    const files = ['package.json', 'pages/index.js'];\n    const {\n      builders,\n      errors,\n      defaultRoutes,\n      redirectRoutes,\n      rewriteRoutes,\n      errorRoutes,\n    } = await detectBuilders(files, pkg, { featHandleMiss });\n    expect(builders![0].use).toBe('@vercel/next');\n    expect(errors).toBe(null);\n    expect(defaultRoutes).toStrictEqual([]);\n    expect(redirectRoutes).toStrictEqual([]);\n    expect(rewriteRoutes).toStrictEqual([]);\n    expect(errorRoutes).toStrictEqual([]);\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"package.json + no build + next","suites":["Test `detectBuilders` with `featHandleMiss=true`"],"updatePoint":{"line":926,"column":36},"line":926,"code":"  it('package.json + no build + next', async () => {\n    const pkg = {\n      scripts: { build: 'next build' },\n      devDependencies: { next: '9.0.0' },\n    };\n    const files = ['package.json', 'pages/index.js'];\n    const {\n      builders,\n      errors,\n      defaultRoutes,\n      redirectRoutes,\n      rewriteRoutes,\n      errorRoutes,\n    } = await detectBuilders(files, pkg, { featHandleMiss });\n    expect(builders![0].use).toBe('@vercel/next');\n    expect(errors).toBe(null);\n    expect(defaultRoutes).toStrictEqual([]);\n    expect(redirectRoutes).toStrictEqual([]);\n    expect(rewriteRoutes).toStrictEqual([]);\n    expect(errorRoutes).toStrictEqual([]);\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"package.json + no build","suites":["Test `detectBuilders` with `featHandleMiss=true`"],"updatePoint":{"line":948,"column":29},"line":948,"code":"  it('package.json + no build', async () => {\n    const pkg = {};\n    const files = ['package.json'];\n    const { builders, errors } = await detectBuilders(files, pkg, {\n      featHandleMiss,\n    });\n    expect(builders).toBe(null);\n    expect(errors!.length).toBe(1);\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"static file","suites":["Test `detectBuilders` with `featHandleMiss=true`"],"updatePoint":{"line":958,"column":17},"line":958,"code":"  it('static file', async () => {\n    const files = ['index.html'];\n    const {\n      builders,\n      errors,\n      defaultRoutes,\n      redirectRoutes,\n      rewriteRoutes,\n      errorRoutes,\n    } = await detectBuilders(files, null, { featHandleMiss });\n    expect(builders).toBe(null);\n    expect(errors).toBe(null);\n    expect(defaultRoutes).toStrictEqual([]);\n    expect(redirectRoutes).toStrictEqual([]);\n    expect(rewriteRoutes).toStrictEqual([]);\n    expect(errorRoutes!.length).toBe(1);\n    expect((errorRoutes![0] as Source).status).toBe(404);\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"no package.json + public","suites":["Test `detectBuilders` with `featHandleMiss=true`"],"updatePoint":{"line":977,"column":30},"line":977,"code":"  it('no package.json + public', async () => {\n    const files = ['api/users.js', 'public/index.html'];\n    const {\n      builders,\n      errors,\n      defaultRoutes,\n      redirectRoutes,\n      rewriteRoutes,\n      errorRoutes,\n    } = await detectBuilders(files, null, { featHandleMiss });\n    expect(builders![1].use).toBe('@vercel/static');\n    expect(errors).toBe(null);\n\n    expect(defaultRoutes!.length).toBe(2);\n    expect((defaultRoutes![0] as Handler).handle).toBe('miss');\n    expect((defaultRoutes![1] as Source).dest).toBe('/api/$1');\n    expect(redirectRoutes).toStrictEqual([]);\n    expect(rewriteRoutes!.length).toBe(1);\n    expect((rewriteRoutes![0] as Source).status).toBe(404);\n    expect(errorRoutes!.length).toBe(1);\n    expect((errorRoutes![0] as Source).status).toBe(404);\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"no package.json + no build + raw static + api","suites":["Test `detectBuilders` with `featHandleMiss=true`"],"updatePoint":{"line":1000,"column":51},"line":1000,"code":"  it('no package.json + no build + raw static + api', async () => {\n    const files = ['api/users.js', 'index.html'];\n    const {\n      builders,\n      errors,\n      defaultRoutes,\n      redirectRoutes,\n      rewriteRoutes,\n      errorRoutes,\n    } = await detectBuilders(files, null, { featHandleMiss });\n    expect(builders![0].use).toBe('@vercel/node');\n    expect(builders![0].src).toBe('api/users.js');\n    expect(builders![1].use).toBe('@vercel/static');\n    expect(builders![1].src).toBe('!{api/**,package.json}');\n    expect(builders!.length).toBe(2);\n    expect(errors).toBe(null);\n\n    expect(defaultRoutes!.length).toBe(2);\n    expect((defaultRoutes![0] as Handler).handle).toBe('miss');\n    expect((defaultRoutes![1] as Source).dest).toBe('/api/$1');\n    expect(redirectRoutes).toStrictEqual([]);\n    expect(rewriteRoutes!.length).toBe(1);\n    expect((rewriteRoutes![0] as Source).status).toBe(404);\n    expect(errorRoutes!.length).toBe(1);\n    expect((errorRoutes![0] as Source).status).toBe(404);\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"package.json + no build + root + api","suites":["Test `detectBuilders` with `featHandleMiss=true`"],"updatePoint":{"line":1027,"column":42},"line":1027,"code":"  it('package.json + no build + root + api', async () => {\n    const files = ['index.html', 'api/[endpoint].js', 'static/image.png'];\n    const { builders, errors } = await detectBuilders(files, null, {\n      featHandleMiss,\n    });\n    expect(builders![0].use).toBe('@vercel/node');\n    expect(builders![0].src).toBe('api/[endpoint].js');\n    expect(builders![1].use).toBe('@vercel/static');\n    expect(builders![1].src).toBe('!{api/**,package.json}');\n    expect(builders!.length).toBe(2);\n    expect(errors).toBe(null);\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"api + ignore files","suites":["Test `detectBuilders` with `featHandleMiss=true`"],"updatePoint":{"line":1040,"column":24},"line":1040,"code":"  it('api + ignore files', async () => {\n    const files = [\n      'api/_utils/handler.js',\n      'api/[endpoint]/.helper.js',\n      'api/[endpoint]/[id].js',\n    ];\n\n    const {\n      builders,\n      defaultRoutes,\n      redirectRoutes,\n      rewriteRoutes,\n      errorRoutes,\n    } = await detectBuilders(files, undefined, { featHandleMiss });\n    expect(builders![0].use).toBe('@vercel/node');\n    expect(builders![0].src).toBe('api/[endpoint]/[id].js');\n    expect(builders!.length).toBe(1);\n\n    expect(defaultRoutes!.length).toBe(2);\n    expect((defaultRoutes![0] as Handler).handle).toBe('miss');\n    expect((defaultRoutes![1] as Source).dest).toBe('/api/$1');\n    expect(redirectRoutes).toStrictEqual([]);\n    expect(rewriteRoutes!.length).toBe(2);\n    expect((rewriteRoutes![0] as Source).src).toBe('^/api/([^/]+)/([^/]+)$');\n    expect((rewriteRoutes![1] as Source).status).toBe(404);\n    expect(errorRoutes!.length).toBe(1);\n    expect((errorRoutes![0] as Source).status).toBe(404);\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"api + next + public","suites":["Test `detectBuilders` with `featHandleMiss=true`"],"updatePoint":{"line":1069,"column":25},"line":1069,"code":"  it('api + next + public', async () => {\n    const pkg = {\n      scripts: { build: 'next build' },\n      devDependencies: { next: '9.0.0' },\n    };\n    const files = ['package.json', 'api/endpoint.js', 'public/index.html'];\n\n    const {\n      builders,\n      defaultRoutes,\n      redirectRoutes,\n      rewriteRoutes,\n      errorRoutes,\n    } = await detectBuilders(files, pkg, { featHandleMiss });\n    expect(builders![0].use).toBe('@vercel/node');\n    expect(builders![0].src).toBe('api/endpoint.js');\n    expect(builders![1].use).toBe('@vercel/next');\n    expect(builders![1].src).toBe('package.json');\n    expect(builders!.length).toBe(2);\n\n    expect(defaultRoutes!.length).toBe(2);\n    expect((defaultRoutes![0] as Handler).handle).toBe('miss');\n    expect((defaultRoutes![1] as Source).dest).toBe('/api/$1');\n    expect(redirectRoutes).toStrictEqual([]);\n    expect(rewriteRoutes!.length).toBe(1);\n    expect((rewriteRoutes![0] as Source).status).toBe(404);\n    expect(errorRoutes).toStrictEqual([]);\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"api + next + raw static","suites":["Test `detectBuilders` with `featHandleMiss=true`"],"updatePoint":{"line":1098,"column":29},"line":1098,"code":"  it('api + next + raw static', async () => {\n    const pkg = {\n      scripts: { build: 'next build' },\n      devDependencies: { next: '9.0.0' },\n    };\n    const files = ['package.json', 'api/endpoint.js', 'index.html'];\n\n    const {\n      builders,\n      defaultRoutes,\n      redirectRoutes,\n      rewriteRoutes,\n      errorRoutes,\n    } = await detectBuilders(files, pkg, { featHandleMiss });\n    expect(builders![0].use).toBe('@vercel/node');\n    expect(builders![0].src).toBe('api/endpoint.js');\n    expect(builders![1].use).toBe('@vercel/next');\n    expect(builders![1].src).toBe('package.json');\n    expect(builders!.length).toBe(2);\n\n    expect(defaultRoutes!.length).toBe(2);\n    expect((defaultRoutes![0] as Handler).handle).toBe('miss');\n    expect((defaultRoutes![1] as Source).dest).toBe('/api/$1');\n    expect(redirectRoutes).toStrictEqual([]);\n    expect(rewriteRoutes!.length).toBe(1);\n    expect((rewriteRoutes![0] as Source).status).toBe(404);\n    expect(errorRoutes).toStrictEqual([]);\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"Using \"Create React App\" framework with `next` in dependencies should NOT autodetect Next.js for new projects","suites":["Test `detectBuilders` with `featHandleMiss=true`"],"updatePoint":{"line":1127,"column":115},"line":1127,"code":"  it('Using \"Create React App\" framework with `next` in dependencies should NOT autodetect Next.js for new projects', async () => {\n    const pkg = {\n      scripts: {\n        dev: 'react-scripts start',\n        build: 'react-scripts build',\n      },\n      dependencies: {\n        next: '9.3.5',\n        react: '16.13.1',\n        'react-dom': '16.13.1',\n        'react-scripts': '2.1.1',\n      },\n    };\n    const files = ['package.json', 'src/index.js', 'public/favicon.ico'];\n    const projectSettings = {\n      framework: 'create-react-app',\n      buildCommand: 'react-scripts build',\n      createdAt: Date.parse('2020-07-01'),\n    };\n\n    const { builders, errorRoutes } = await detectBuilders(files, pkg, {\n      projectSettings,\n      featHandleMiss,\n    });\n\n    expect(builders).toEqual([\n      {\n        use: '@vercel/static-build',\n        src: 'package.json',\n        config: {\n          zeroConfig: true,\n          framework: projectSettings.framework,\n          buildCommand: projectSettings.buildCommand,\n        },\n      },\n    ]);\n    expect(errorRoutes!.length).toBe(1);\n    expect((errorRoutes![0] as Source).status).toBe(404);\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"Using \"Other\" framework with Storybook should NOT autodetect Next.js for new projects","suites":["Test `detectBuilders` with `featHandleMiss=true`"],"updatePoint":{"line":1167,"column":91},"line":1167,"code":"  it('Using \"Other\" framework with Storybook should NOT autodetect Next.js for new projects', async () => {\n    const pkg = {\n      scripts: {\n        dev: 'next dev',\n        build: 'next build',\n        storybook: 'start-storybook -p 6006',\n        'build-storybook': 'build-storybook',\n      },\n      dependencies: {\n        next: '9.3.5',\n        react: '16.13.1',\n        'react-dom': '16.13.1',\n      },\n      devDependencies: {\n        '@babel/core': '7.9.0',\n        '@storybook/addon-links': '5.3.18',\n        '@storybook/addons': '5.3.18',\n        '@storybook/react': '5.3.18',\n      },\n    };\n    const files = ['package.json', 'pages/api/foo.js', 'index.html'];\n    const projectSettings = {\n      framework: null, // Selected \"Other\" framework\n      buildCommand: 'yarn build-storybook',\n      createdAt: Date.parse('2020-07-01'),\n    };\n\n    const { builders, errorRoutes } = await detectBuilders(files, pkg, {\n      projectSettings,\n      featHandleMiss,\n    });\n\n    expect(builders).toEqual([\n      {\n        use: '@vercel/static-build',\n        src: 'package.json',\n        config: {\n          zeroConfig: true,\n          buildCommand: projectSettings.buildCommand,\n        },\n      },\n    ]);\n    expect(errorRoutes!.length).toBe(1);\n    expect((errorRoutes![0] as Source).status).toBe(404);\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"Using \"Other\" framework should autodetect Next.js for old projects","suites":["Test `detectBuilders` with `featHandleMiss=true`"],"updatePoint":{"line":1213,"column":72},"line":1213,"code":"  it('Using \"Other\" framework should autodetect Next.js for old projects', async () => {\n    const pkg = {\n      scripts: {\n        dev: 'next dev',\n        build: 'next build',\n      },\n      dependencies: {\n        next: '9.3.5',\n        react: '16.13.1',\n        'react-dom': '16.13.1',\n      },\n    };\n    const files = ['package.json', 'pages/api/foo.js', 'index.html'];\n    const projectSettings = {\n      framework: null, // Selected \"Other\" framework\n      createdAt: Date.parse('2020-02-01'),\n    };\n\n    const { builders, errorRoutes } = await detectBuilders(files, pkg, {\n      projectSettings,\n      featHandleMiss,\n    });\n\n    expect(builders).toEqual([\n      {\n        use: '@vercel/next',\n        src: 'package.json',\n        config: {\n          zeroConfig: true,\n        },\n      },\n    ]);\n    expect(errorRoutes).toStrictEqual([]);\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"api + raw static","suites":["Test `detectBuilders` with `featHandleMiss=true`"],"updatePoint":{"line":1248,"column":22},"line":1248,"code":"  it('api + raw static', async () => {\n    const files = ['api/endpoint.js', 'index.html', 'favicon.ico'];\n\n    const {\n      builders,\n      defaultRoutes,\n      redirectRoutes,\n      rewriteRoutes,\n      errorRoutes,\n    } = await detectBuilders(files, null, { featHandleMiss });\n    expect(builders![0].use).toBe('@vercel/node');\n    expect(builders![0].src).toBe('api/endpoint.js');\n    expect(builders![1].use).toBe('@vercel/static');\n    expect(builders![1].src).toBe('!{api/**,package.json}');\n    expect(builders!.length).toBe(2);\n\n    expect(defaultRoutes!.length).toBe(2);\n    expect((defaultRoutes![0] as Handler).handle).toBe('miss');\n    expect((defaultRoutes![1] as Source).dest).toBe('/api/$1');\n    expect(redirectRoutes).toStrictEqual([]);\n    expect(rewriteRoutes!.length).toBe(1);\n    expect((rewriteRoutes![0] as Source).status).toBe(404);\n    expect(errorRoutes!.length).toBe(1);\n    expect((errorRoutes![0] as Source).status).toBe(404);\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"api + raw static + package.json no build script","suites":["Test `detectBuilders` with `featHandleMiss=true`"],"updatePoint":{"line":1274,"column":53},"line":1274,"code":"  it('api + raw static + package.json no build script', async () => {\n    const pkg = {\n      private: true,\n      engines: { node: '12.x' },\n    };\n    const files = ['api/version.js', 'index.html', 'package.json'];\n\n    const {\n      builders,\n      defaultRoutes,\n      redirectRoutes,\n      rewriteRoutes,\n      errorRoutes,\n    } = await detectBuilders(files, pkg, { featHandleMiss });\n    expect(builders![0].use).toBe('@vercel/node');\n    expect(builders![0].src).toBe('api/version.js');\n    expect(builders![1].use).toBe('@vercel/static');\n    expect(builders![1].src).toBe('!{api/**,package.json}');\n    expect(builders!.length).toBe(2);\n\n    expect(defaultRoutes!.length).toBe(2);\n    expect((defaultRoutes![0] as Handler).handle).toBe('miss');\n    expect((defaultRoutes![1] as Source).dest).toBe('/api/$1');\n    expect(redirectRoutes).toStrictEqual([]);\n    expect(rewriteRoutes!.length).toBe(1);\n    expect((rewriteRoutes![0] as Source).status).toBe(404);\n    expect(errorRoutes!.length).toBe(1);\n    expect((errorRoutes![0] as Source).status).toBe(404);\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"api + public","suites":["Test `detectBuilders` with `featHandleMiss=true`"],"updatePoint":{"line":1304,"column":18},"line":1304,"code":"  it('api + public', async () => {\n    const files = [\n      'api/endpoint.js',\n      'public/index.html',\n      'public/favicon.ico',\n      'README.md',\n    ];\n\n    const { builders, errorRoutes } = await detectBuilders(files, undefined, {\n      featHandleMiss,\n    });\n    expect(builders![0].use).toBe('@vercel/node');\n    expect(builders![0].src).toBe('api/endpoint.js');\n    expect(builders![1].use).toBe('@vercel/static');\n    expect(builders![1].src).toBe('public/**/*');\n    expect(builders!.length).toBe(2);\n    expect(errorRoutes!.length).toBe(1);\n    expect((errorRoutes![0] as Source).status).toBe(404);\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"api go with test files","suites":["Test `detectBuilders` with `featHandleMiss=true`"],"updatePoint":{"line":1324,"column":28},"line":1324,"code":"  it('api go with test files', async () => {\n    const files = [\n      'api/index.go',\n      'api/index_test.go',\n      'api/test.go',\n      'api/testing_another.go',\n      'api/readme.md',\n      'api/config/staging.go',\n      'api/config/staging_test.go',\n      'api/config/production.go',\n      'api/config/production_test.go',\n      'api/src/controllers/health.go',\n      'api/src/controllers/user.module.go',\n      'api/src/controllers/user.module_test.go',\n    ];\n\n    const { builders, errorRoutes } = await detectBuilders(files, undefined, {\n      featHandleMiss,\n    });\n    expect(builders!.length).toBe(7);\n    expect(builders!.some(b => b.src!.endsWith('_test.go'))).toBe(false);\n    expect(errorRoutes!.length).toBe(1);\n    expect((errorRoutes![0] as Source).status).toBe(404);\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"api detect node mjs files","suites":["Test `detectBuilders` with `featHandleMiss=true`"],"updatePoint":{"line":1349,"column":31},"line":1349,"code":"  it('api detect node mjs files', async () => {\n    const files = [\n      'api/index.mjs',\n      'api/users.mjs',\n      'api/config/staging.mjs',\n      'api/config/production.mjs',\n      'api/src/controllers/health.mjs',\n      'api/src/controllers/user.module.mjs',\n    ];\n\n    const { builders, errorRoutes } = await detectBuilders(files, undefined, {\n      featHandleMiss,\n    });\n    expect(builders!.length).toBe(6);\n    expect(builders!.every(b => b.src!.endsWith('.mjs'))).toBe(true);\n    expect(errorRoutes!.length).toBe(1);\n    expect((errorRoutes![0] as Source).status).toBe(404);\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"just public","suites":["Test `detectBuilders` with `featHandleMiss=true`"],"updatePoint":{"line":1368,"column":17},"line":1368,"code":"  it('just public', async () => {\n    const files = ['public/index.html', 'public/favicon.ico', 'README.md'];\n\n    const { builders, errorRoutes } = await detectBuilders(files, undefined, {\n      featHandleMiss,\n    });\n    expect(builders![0].src).toBe('public/**/*');\n    expect(builders![0].use).toBe('@vercel/static');\n    expect(builders!.length).toBe(1);\n    expect(errorRoutes!.length).toBe(1);\n    expect((errorRoutes![0] as Source).status).toBe(404);\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"next + public","suites":["Test `detectBuilders` with `featHandleMiss=true`"],"updatePoint":{"line":1381,"column":19},"line":1381,"code":"  it('next + public', async () => {\n    const pkg = {\n      scripts: { build: 'next build' },\n      devDependencies: { next: '9.0.0' },\n    };\n    const files = ['package.json', 'public/index.html', 'README.md'];\n\n    const { builders, errorRoutes } = await detectBuilders(files, pkg, {\n      featHandleMiss,\n    });\n    expect(builders![0].use).toBe('@vercel/next');\n    expect(builders![0].src).toBe('package.json');\n    expect(builders!.length).toBe(1);\n    expect(errorRoutes!.length).toBe(0);\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"nuxt","suites":["Test `detectBuilders` with `featHandleMiss=true`"],"updatePoint":{"line":1397,"column":10},"line":1397,"code":"  it('nuxt', async () => {\n    const pkg = {\n      scripts: { build: 'nuxt build' },\n      dependencies: { nuxt: '2.8.1' },\n    };\n    const files = ['package.json', 'pages/index.js'];\n\n    const { builders, errorRoutes } = await detectBuilders(files, pkg, {\n      featHandleMiss,\n    });\n    expect(builders![0].use).toBe('@vercel/static-build');\n    expect(builders![0].src).toBe('package.json');\n    expect(builders!.length).toBe(1);\n    expect(errorRoutes!.length).toBe(1);\n    expect((errorRoutes![0] as Source).status).toBe(404);\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"nuxt + tag canary","suites":["Test `detectBuilders` with `featHandleMiss=true`"],"updatePoint":{"line":1414,"column":23},"line":1414,"code":"  it('nuxt + tag canary', async () => {\n    const pkg = {\n      scripts: { build: 'nuxt build' },\n      dependencies: { nuxt: '2.8.1' },\n    };\n    const files = ['package.json', 'pages/index.js'];\n\n    const { builders, errorRoutes } = await detectBuilders(files, pkg, {\n      tag: 'canary',\n      featHandleMiss,\n    });\n    expect(builders![0].use).toBe('@vercel/static-build@canary');\n    expect(builders![0].src).toBe('package.json');\n    expect(builders!.length).toBe(1);\n    expect(errorRoutes!.length).toBe(1);\n    expect((errorRoutes![0] as Source).status).toBe(404);\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"package.json with no build + api","suites":["Test `detectBuilders` with `featHandleMiss=true`"],"updatePoint":{"line":1432,"column":38},"line":1432,"code":"  it('package.json with no build + api', async () => {\n    const pkg = { dependencies: { next: '9.0.0' } };\n    const files = ['package.json', 'api/[endpoint].js'];\n\n    const { builders, errorRoutes } = await detectBuilders(files, pkg, {\n      featHandleMiss,\n    });\n    expect(builders![0].use).toBe('@vercel/node');\n    expect(builders![0].src).toBe('api/[endpoint].js');\n    expect(builders!.length).toBe(1);\n    expect(errorRoutes!.length).toBe(1);\n    expect((errorRoutes![0] as Source).status).toBe(404);\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"package.json with no build + public directory","suites":["Test `detectBuilders` with `featHandleMiss=true`"],"updatePoint":{"line":1446,"column":51},"line":1446,"code":"  it('package.json with no build + public directory', async () => {\n    const pkg = { dependencies: { next: '9.0.0' } };\n    const files = ['package.json', 'public/index.html'];\n\n    const { builders, errors } = await detectBuilders(files, pkg, {\n      featHandleMiss,\n    });\n    expect(builders).toBe(null);\n    expect(errors!.length).toBe(1);\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"no package.json + api","suites":["Test `detectBuilders` with `featHandleMiss=true`"],"updatePoint":{"line":1457,"column":27},"line":1457,"code":"  it('no package.json + api', async () => {\n    const files = ['api/[endpoint].js', 'api/[endpoint]/[id].js'];\n\n    const { builders } = await detectBuilders(files, undefined, {\n      featHandleMiss,\n    });\n    expect(builders!.length).toBe(2);\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"no package.json + no api","suites":["Test `detectBuilders` with `featHandleMiss=true`"],"updatePoint":{"line":1466,"column":30},"line":1466,"code":"  it('no package.json + no api', async () => {\n    const files = ['index.html'];\n\n    const { builders, errors } = await detectBuilders(files, undefined, {\n      featHandleMiss,\n    });\n    expect(builders).toBe(null);\n    expect(errors).toBe(null);\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"package.json + api + canary","suites":["Test `detectBuilders` with `featHandleMiss=true`"],"updatePoint":{"line":1476,"column":33},"line":1476,"code":"  it('package.json + api + canary', async () => {\n    const pkg = {\n      scripts: { build: 'next build' },\n      dependencies: { next: '9.0.0' },\n    };\n    const files = [\n      'pages/index.js',\n      'api/[endpoint].js',\n      'api/[endpoint]/[id].js',\n    ];\n\n    const { builders } = await detectBuilders(files, pkg, {\n      tag: 'canary',\n      featHandleMiss,\n    });\n    expect(builders![0].use).toBe('@vercel/node@canary');\n    expect(builders![1].use).toBe('@vercel/node@canary');\n    expect(builders![2].use).toBe('@vercel/next@canary');\n    expect(builders!.length).toBe(3);\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"package.json + api + latest","suites":["Test `detectBuilders` with `featHandleMiss=true`"],"updatePoint":{"line":1497,"column":33},"line":1497,"code":"  it('package.json + api + latest', async () => {\n    const pkg = {\n      scripts: { build: 'next build' },\n      dependencies: { next: '9.0.0' },\n    };\n    const files = [\n      'pages/index.js',\n      'api/[endpoint].js',\n      'api/[endpoint]/[id].js',\n    ];\n\n    const { builders } = await detectBuilders(files, pkg, {\n      tag: 'latest',\n      featHandleMiss,\n    });\n    expect(builders![0].use).toBe('@vercel/node@latest');\n    expect(builders![1].use).toBe('@vercel/node@latest');\n    expect(builders![2].use).toBe('@vercel/next@latest');\n    expect(builders!.length).toBe(3);\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"package.json + api + random tag","suites":["Test `detectBuilders` with `featHandleMiss=true`"],"updatePoint":{"line":1518,"column":37},"line":1518,"code":"  it('package.json + api + random tag', async () => {\n    const pkg = {\n      scripts: { build: 'next build' },\n      dependencies: { next: '9.0.0' },\n    };\n    const files = [\n      'pages/index.js',\n      'api/[endpoint].js',\n      'api/[endpoint]/[id].js',\n    ];\n\n    const { builders } = await detectBuilders(files, pkg, {\n      tag: 'haha',\n      featHandleMiss,\n    });\n    expect(builders![0].use).toBe('@vercel/node@haha');\n    expect(builders![1].use).toBe('@vercel/node@haha');\n    expect(builders![2].use).toBe('@vercel/next@haha');\n    expect(builders!.length).toBe(3);\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"next.js pages/api + api","suites":["Test `detectBuilders` with `featHandleMiss=true`"],"updatePoint":{"line":1539,"column":29},"line":1539,"code":"  it('next.js pages/api + api', async () => {\n    const pkg = {\n      scripts: { build: 'next build' },\n      dependencies: { next: '9.0.0' },\n    };\n    const files = ['api/user.js', 'pages/api/user.js'];\n\n    const { warnings, errors, builders } = await detectBuilders(files, pkg, {\n      featHandleMiss,\n    });\n\n    expect(errors).toBe(null);\n    expect(warnings[0]).toBeDefined();\n    expect(warnings[0].code).toBe('conflicting_files');\n    expect(builders).toBeDefined();\n    expect(builders!.length).toBe(2);\n    expect(builders![0].use).toBe('@vercel/node');\n    expect(builders![1].use).toBe('@vercel/next');\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"many static files + one api file","suites":["Test `detectBuilders` with `featHandleMiss=true`"],"updatePoint":{"line":1559,"column":38},"line":1559,"code":"  it('many static files + one api file', async () => {\n    const files = Array.from({ length: 5000 }).map((_, i) => `file${i}.html`);\n    files.push('api/index.ts');\n    const { builders, errorRoutes } = await detectBuilders(files, undefined, {\n      featHandleMiss,\n    });\n\n    expect(builders!.length).toBe(2);\n    expect(builders![0].use).toBe('@vercel/node');\n    expect(builders![0].src).toBe('api/index.ts');\n    expect(builders![1].use).toBe('@vercel/static');\n    expect(builders![1].src).toBe('!{api/**,package.json}');\n    expect(errorRoutes!.length).toBe(1);\n    expect((errorRoutes![0] as Source).status).toBe(404);\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"functions with nextjs","suites":["Test `detectBuilders` with `featHandleMiss=true`"],"updatePoint":{"line":1575,"column":27},"line":1575,"code":"  it('functions with nextjs', async () => {\n    const pkg = {\n      scripts: { build: 'next build' },\n      dependencies: { next: '9.0.0' },\n    };\n    const functions = {\n      'pages/api/teams/**': {\n        memory: 128,\n        maxDuration: 10,\n      },\n    };\n    const files = [\n      'package.json',\n      'pages/index.js',\n      'pages/api/teams/members.ts',\n    ];\n    const { builders, errors } = await detectBuilders(files, pkg, {\n      functions,\n      featHandleMiss,\n    });\n\n    expect(errors).toBe(null);\n    expect(builders!.length).toBe(1);\n    expect(builders![0]).toEqual({\n      src: 'package.json',\n      use: '@vercel/next',\n      config: {\n        zeroConfig: true,\n        functions: {\n          'pages/api/teams/**': {\n            memory: 128,\n            maxDuration: 10,\n          },\n        },\n      },\n    });\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"extend with functions","suites":["Test `detectBuilders` with `featHandleMiss=true`"],"updatePoint":{"line":1613,"column":27},"line":1613,"code":"  it('extend with functions', async () => {\n    const pkg = {\n      scripts: { build: 'next build' },\n      dependencies: { next: '9.0.0' },\n    };\n    const functions = {\n      'api/users/*.ts': {\n        runtime: 'my-custom-runtime-package@1.0.0',\n      },\n      'api/teams/members.ts': {\n        memory: 128,\n        maxDuration: 10,\n      },\n    };\n    const files = [\n      'package.json',\n      'pages/index.js',\n      'api/users/[id].ts',\n      'api/teams/members.ts',\n    ];\n    const { builders } = await detectBuilders(files, pkg, {\n      functions,\n      featHandleMiss,\n    });\n\n    expect(builders!.length).toBe(3);\n    expect(builders![0]).toEqual({\n      src: 'api/teams/members.ts',\n      use: '@vercel/node',\n      config: {\n        zeroConfig: true,\n        functions: {\n          'api/teams/members.ts': {\n            memory: 128,\n            maxDuration: 10,\n          },\n        },\n      },\n    });\n    expect(builders![1]).toEqual({\n      src: 'api/users/[id].ts',\n      use: 'my-custom-runtime-package@1.0.0',\n      config: {\n        zeroConfig: true,\n        functions: {\n          'api/users/*.ts': {\n            runtime: 'my-custom-runtime-package@1.0.0',\n          },\n        },\n      },\n    });\n    expect(builders![2]).toEqual({\n      src: 'package.json',\n      use: '@vercel/next',\n      config: {\n        zeroConfig: true,\n      },\n    });\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"invalid function key","suites":["Test `detectBuilders` with `featHandleMiss=true`"],"updatePoint":{"line":1673,"column":26},"line":1673,"code":"  it('invalid function key', async () => {\n    const functions = { ['a'.repeat(1000)]: { memory: 128 } };\n    const files = ['pages/index.ts'];\n    const { builders, errors } = await detectBuilders(files, null, {\n      functions,\n      featHandleMiss,\n    });\n\n    expect(builders).toBe(null);\n    expect(errors!.length).toBe(1);\n    expect(errors![0].code).toBe('invalid_function_glob');\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"invalid function maxDuration","suites":["Test `detectBuilders` with `featHandleMiss=true`"],"updatePoint":{"line":1686,"column":34},"line":1686,"code":"  it('invalid function maxDuration', async () => {\n    const functions = { 'pages/index.ts': { maxDuration: -1 } };\n    const files = ['pages/index.ts'];\n    const { builders, errors } = await detectBuilders(files, null, {\n      functions,\n      featHandleMiss,\n    });\n\n    expect(builders).toBe(null);\n    expect(errors!.length).toBe(1);\n    expect(errors![0].code).toBe('invalid_function_duration');\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"invalid function memory","suites":["Test `detectBuilders` with `featHandleMiss=true`"],"updatePoint":{"line":1699,"column":29},"line":1699,"code":"  it('invalid function memory', async () => {\n    const functions = { 'pages/index.ts': { memory: 200 } };\n    const files = ['pages/index.ts'];\n    const { builders, errors } = await detectBuilders(files, null, {\n      functions,\n      featHandleMiss,\n    });\n\n    expect(builders).toBe(null);\n    expect(errors!.length).toBe(1);\n    expect(errors![0].code).toBe('invalid_function_memory');\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"missing runtime version","suites":["Test `detectBuilders` with `featHandleMiss=true`"],"updatePoint":{"line":1712,"column":29},"line":1712,"code":"  it('missing runtime version', async () => {\n    const functions = { 'pages/index.ts': { runtime: 'haha' } };\n    const files = ['pages/index.ts'];\n    const { builders, errors } = await detectBuilders(files, null, {\n      functions,\n      featHandleMiss,\n    });\n\n    expect(builders).toBe(null);\n    expect(errors!.length).toBe(1);\n    expect(errors![0].code).toBe('invalid_function_runtime');\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"use a custom runtime","suites":["Test `detectBuilders` with `featHandleMiss=true`"],"updatePoint":{"line":1725,"column":26},"line":1725,"code":"  it('use a custom runtime', async () => {\n    const functions = { 'api/user.php': { runtime: 'vercel-php@0.1.0' } };\n    const files = ['api/user.php'];\n    const { builders, errors } = await detectBuilders(files, null, {\n      functions,\n      featHandleMiss,\n    });\n\n    expect(errors).toBe(null);\n    expect(builders!.length).toBe(1);\n    expect(builders![0].use).toBe('vercel-php@0.1.0');\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"use a custom runtime but without a source","suites":["Test `detectBuilders` with `featHandleMiss=true`"],"updatePoint":{"line":1738,"column":47},"line":1738,"code":"  it('use a custom runtime but without a source', async () => {\n    const functions = { 'api/user.php': { runtime: 'vercel-php@0.1.0' } };\n    const files = ['api/team.js'];\n    const { errors } = await detectBuilders(files, null, {\n      functions,\n      featHandleMiss,\n    });\n\n    expect(errors!.length).toBe(1);\n    expect(errors![0].code).toBe('unused_function');\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"do not allow empty functions","suites":["Test `detectBuilders` with `featHandleMiss=true`"],"updatePoint":{"line":1750,"column":34},"line":1750,"code":"  it('do not allow empty functions', async () => {\n    const functions = { 'api/user.php': {} };\n    const files = ['api/user.php'];\n    const { errors } = await detectBuilders(files, null, {\n      functions,\n      featHandleMiss,\n    });\n\n    expect(errors!.length).toBe(1);\n    expect(errors![0].code).toBe('invalid_function');\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"do not allow null functions","suites":["Test `detectBuilders` with `featHandleMiss=true`"],"updatePoint":{"line":1762,"column":33},"line":1762,"code":"  it('do not allow null functions', async () => {\n    const functions = { 'api/user.php': null };\n    const files = ['api/user.php'];\n    // @ts-ignore\n    const { errors } = await detectBuilders(files, null, {\n      // @ts-ignore\n      functions,\n      featHandleMiss,\n    });\n\n    expect(errors!.length).toBe(1);\n    expect(errors![0].code).toBe('invalid_function');\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"Do not allow functions that are not used by @vercel/next","suites":["Test `detectBuilders` with `featHandleMiss=true`"],"updatePoint":{"line":1776,"column":62},"line":1776,"code":"  it('Do not allow functions that are not used by @vercel/next', async () => {\n    const pkg = {\n      scripts: { build: 'next build' },\n      dependencies: { next: '9.0.0' },\n    };\n    const functions = { 'test.js': { memory: 1024 } };\n    const files = ['pages/index.js', 'test.js'];\n\n    const { errors } = await detectBuilders(files, pkg, {\n      functions,\n      featHandleMiss,\n    });\n\n    expect(errors).toBeDefined();\n    expect(errors![0].code).toBe('unused_function');\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"Must include includeFiles config property","suites":["Test `detectBuilders` with `featHandleMiss=true`"],"updatePoint":{"line":1793,"column":47},"line":1793,"code":"  it('Must include includeFiles config property', async () => {\n    const functions = {\n      'api/test.js': { includeFiles: 'text/include.txt' },\n    };\n    const files = ['api/test.js'];\n\n    const { builders, errors } = await detectBuilders(files, null, {\n      functions,\n      featHandleMiss,\n    });\n\n    expect(errors).toBe(null);\n    expect(builders).not.toBe(null);\n    expect(builders![0].use).toBe('@vercel/node');\n    expect(builders![0].config).toMatchObject({\n      functions,\n      zeroConfig: true,\n      includeFiles: 'text/include.txt',\n    });\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"Must include excludeFiles config property","suites":["Test `detectBuilders` with `featHandleMiss=true`"],"updatePoint":{"line":1814,"column":47},"line":1814,"code":"  it('Must include excludeFiles config property', async () => {\n    const functions = {\n      'api/test.js': { excludeFiles: 'text/exclude.txt' },\n    };\n    const files = ['api/test.js'];\n\n    const { builders, errors } = await detectBuilders(files, null, {\n      functions,\n      featHandleMiss,\n    });\n\n    expect(errors).toBe(null);\n    expect(builders).not.toBe(null);\n    expect(builders![0].use).toBe('@vercel/node');\n    expect(builders![0].config).toMatchObject({\n      functions,\n      zeroConfig: true,\n      excludeFiles: 'text/exclude.txt',\n    });\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"Must include excludeFiles and includeFiles config property","suites":["Test `detectBuilders` with `featHandleMiss=true`"],"updatePoint":{"line":1835,"column":64},"line":1835,"code":"  it('Must include excludeFiles and includeFiles config property', async () => {\n    const functions = {\n      'api/test.js': {\n        excludeFiles: 'text/exclude.txt',\n        includeFiles: 'text/include.txt',\n      },\n    };\n    const files = ['api/test.js'];\n\n    const { builders, errors } = await detectBuilders(files, null, {\n      functions,\n      featHandleMiss,\n    });\n\n    expect(errors).toBe(null);\n    expect(builders).not.toBe(null);\n    expect(builders![0].use).toBe('@vercel/node');\n    expect(builders![0].config).toMatchObject({\n      functions,\n      zeroConfig: true,\n      excludeFiles: 'text/exclude.txt',\n      includeFiles: 'text/include.txt',\n    });\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"Must fail for includeFiles config property","suites":["Test `detectBuilders` with `featHandleMiss=true`"],"updatePoint":{"line":1860,"column":48},"line":1860,"code":"  it('Must fail for includeFiles config property', async () => {\n    const functions = {\n      'api/test.js': { includeFiles: { test: 1 } },\n    };\n    const files = ['api/test.js'];\n\n    // @ts-ignore\n    const { errors } = await detectBuilders(files, null, {\n      // @ts-ignore\n      functions,\n      featHandleMiss,\n    });\n\n    expect(errors).not.toBe(null);\n    expect(errors![0].code).toBe('invalid_function_property');\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"Must fail for excludeFiles config property","suites":["Test `detectBuilders` with `featHandleMiss=true`"],"updatePoint":{"line":1877,"column":48},"line":1877,"code":"  it('Must fail for excludeFiles config property', async () => {\n    const functions = {\n      'api/test.js': { excludeFiles: { test: 1 } },\n    };\n    const files = ['api/test.js'];\n\n    // @ts-ignore: Since we test an invalid type\n    const { errors } = await detectBuilders(files, null, {\n      // @ts-ignore\n      functions,\n      featHandleMiss,\n    });\n\n    expect(errors).not.toBe(null);\n    expect(errors![0].code).toBe('invalid_function_property');\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"Must fail when function patterns start with a slash","suites":["Test `detectBuilders` with `featHandleMiss=true`"],"updatePoint":{"line":1894,"column":57},"line":1894,"code":"  it('Must fail when function patterns start with a slash', async () => {\n    const functions = {\n      '/api/test.js': { memory: 128 },\n    };\n    const files = ['api/test.js', '/api/test.js'];\n\n    const { errors } = await detectBuilders(files, null, {\n      functions,\n      featHandleMiss,\n    });\n\n    expect(errors).not.toBe(null);\n    expect(errors![0].code).toBe('invalid_function_source');\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"Custom static output directory","suites":["Test `detectBuilders` with `featHandleMiss=true`"],"updatePoint":{"line":1909,"column":36},"line":1909,"code":"  it('Custom static output directory', async () => {\n    const projectSettings = {\n      outputDirectory: 'dist',\n    };\n\n    const files = ['dist/index.html', 'dist/style.css'];\n\n    const {\n      builders,\n      defaultRoutes,\n      redirectRoutes,\n      rewriteRoutes,\n      errorRoutes,\n    } = await detectBuilders(files, null, {\n      projectSettings,\n      featHandleMiss,\n    });\n\n    expect(builders!.length).toBe(1);\n    expect(builders![0].src).toBe('dist/**/*');\n    expect(builders![0].use).toBe('@vercel/static');\n\n    expect(defaultRoutes).toStrictEqual([]);\n    expect(redirectRoutes).toStrictEqual([]);\n    expect(rewriteRoutes).toStrictEqual([]);\n    expect(errorRoutes!.length).toBe(1);\n    expect((errorRoutes![0] as Source).status).toBe(404);\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"Custom static output directory with api","suites":["Test `detectBuilders` with `featHandleMiss=true`"],"updatePoint":{"line":1938,"column":45},"line":1938,"code":"  it('Custom static output directory with api', async () => {\n    const projectSettings = {\n      outputDirectory: 'output',\n    };\n\n    const files = ['api/user.ts', 'output/index.html', 'output/style.css'];\n\n    const {\n      builders,\n      defaultRoutes,\n      redirectRoutes,\n      rewriteRoutes,\n      errorRoutes,\n    } = await detectBuilders(files, null, {\n      projectSettings,\n      featHandleMiss,\n    });\n\n    expect(builders!.length).toBe(2);\n    expect(builders![1].src).toBe('output/**/*');\n    expect(builders![1].use).toBe('@vercel/static');\n\n    expect(defaultRoutes!.length).toBe(2);\n    expect((defaultRoutes![0] as Handler).handle).toBe('miss');\n    expect((defaultRoutes![1] as Source).dest).toBe('/api/$1');\n    expect(redirectRoutes).toStrictEqual([]);\n    expect(rewriteRoutes!.length).toBe(1);\n    expect((rewriteRoutes![0] as Source).status).toBe(404);\n    expect(errorRoutes!.length).toBe(1);\n    expect((errorRoutes![0] as Source).status).toBe(404);\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"Framework with non-package.json entrypoint","suites":["Test `detectBuilders` with `featHandleMiss=true`"],"updatePoint":{"line":1970,"column":48},"line":1970,"code":"  it('Framework with non-package.json entrypoint', async () => {\n    const files = ['config.yaml'];\n    const projectSettings = {\n      framework: 'hugo',\n    };\n\n    const { builders, errorRoutes } = await detectBuilders(files, null, {\n      projectSettings,\n      featHandleMiss,\n    });\n\n    expect(builders).toEqual([\n      {\n        use: '@vercel/static-build',\n        src: 'config.yaml',\n        config: {\n          zeroConfig: true,\n          framework: 'hugo',\n        },\n      },\n    ]);\n    expect(errorRoutes!.length).toBe(1);\n    expect((errorRoutes![0] as Source).status).toBe(404);\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"RedwoodJS should only use Redwood builder and not Node builder","suites":["Test `detectBuilders` with `featHandleMiss=true`"],"updatePoint":{"line":2010,"column":68},"line":2010,"code":"  it('RedwoodJS should only use Redwood builder and not Node builder', async () => {\n    const files = [...redwoodFiles].sort();\n    const projectSettings = {\n      framework: 'redwoodjs',\n    };\n\n    const { builders, defaultRoutes, rewriteRoutes, errorRoutes } =\n      await detectBuilders(files, null, {\n        projectSettings,\n        featHandleMiss,\n      });\n\n    expect(builders).toStrictEqual([\n      {\n        use: '@vercel/redwood',\n        src: 'package.json',\n        config: {\n          zeroConfig: true,\n          framework: 'redwoodjs',\n        },\n      },\n    ]);\n    expect(defaultRoutes).toStrictEqual([]);\n    expect(rewriteRoutes).toStrictEqual([]);\n    expect(errorRoutes).toStrictEqual([\n      {\n        status: 404,\n        src: '^(?!/api).*$',\n        dest: '/404.html',\n      },\n    ]);\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"RedwoodJS should allow usage of non-js API and not add 404 api route","suites":["Test `detectBuilders` with `featHandleMiss=true`"],"updatePoint":{"line":2043,"column":74},"line":2043,"code":"  it('RedwoodJS should allow usage of non-js API and not add 404 api route', async () => {\n    const files = [...redwoodFiles, 'api/golang.go', 'api/python.py'].sort();\n    const projectSettings = {\n      framework: 'redwoodjs',\n    };\n\n    const { builders, defaultRoutes, rewriteRoutes, errorRoutes } =\n      await detectBuilders(files, null, {\n        projectSettings,\n        featHandleMiss,\n      });\n\n    expect(builders).toStrictEqual([\n      {\n        use: '@vercel/go',\n        src: 'api/golang.go',\n        config: {\n          zeroConfig: true,\n        },\n      },\n      {\n        use: '@vercel/python',\n        src: 'api/python.py',\n        config: {\n          zeroConfig: true,\n        },\n      },\n      {\n        use: '@vercel/redwood',\n        src: 'package.json',\n        config: {\n          zeroConfig: true,\n          framework: 'redwoodjs',\n        },\n      },\n    ]);\n    expect(defaultRoutes).toStrictEqual([\n      { handle: 'miss' },\n      {\n        src: '^/api/(.+)(?:\\\\.(?:go|py))$',\n        dest: '/api/$1',\n        check: true,\n      },\n    ]);\n    expect(rewriteRoutes).toStrictEqual([]);\n    expect(errorRoutes).toStrictEqual([\n      {\n        status: 404,\n        src: '^(?!/api).*$',\n        dest: '/404.html',\n      },\n    ]);\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"No framework, only package.json","suites":["Test `detectBuilders` with `featHandleMiss=true`"],"updatePoint":{"line":2097,"column":37},"line":2097,"code":"  it('No framework, only package.json', async () => {\n    const files = ['package.json'];\n    const pkg = {\n      scripts: {\n        build: 'build.sh',\n      },\n    };\n\n    const { builders, errorRoutes } = await detectBuilders(files, pkg, {\n      featHandleMiss,\n    });\n\n    expect(builders).toEqual([\n      {\n        use: '@vercel/static-build',\n        src: 'package.json',\n        config: {\n          zeroConfig: true,\n        },\n      },\n    ]);\n    expect(errorRoutes!.length).toBe(1);\n    expect((errorRoutes![0] as Source).status).toBe(404);\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"Framework with an API","suites":["Test `detectBuilders` with `featHandleMiss=true`"],"updatePoint":{"line":2122,"column":27},"line":2122,"code":"  it('Framework with an API', async () => {\n    const files = ['config.rb', 'api/date.rb'];\n    const projectSettings = { framework: 'middleman' };\n\n    const { builders, errorRoutes } = await detectBuilders(files, null, {\n      projectSettings,\n      featHandleMiss,\n    });\n\n    expect(builders).toEqual([\n      {\n        use: '@vercel/ruby',\n        src: 'api/date.rb',\n        config: {\n          zeroConfig: true,\n        },\n      },\n      {\n        use: '@vercel/static-build',\n        src: 'config.rb',\n        config: {\n          zeroConfig: true,\n          framework: 'middleman',\n        },\n      },\n    ]);\n    expect(errorRoutes!.length).toBe(1);\n    expect((errorRoutes![0] as Source).status).toBe(404);\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"Error for non-api functions","suites":["Test `detectBuilders` with `featHandleMiss=true`"],"updatePoint":{"line":2152,"column":33},"line":2152,"code":"  it('Error for non-api functions', async () => {\n    const files = ['server/hello.ts', 'public/index.html'];\n    const functions = {\n      'server/**/*.ts': {\n        runtime: '@vercel/node@1.3.1',\n      },\n    };\n\n    const { errors } = await detectBuilders(files, null, {\n      functions,\n      featHandleMiss,\n    });\n\n    expect(errors).toEqual([\n      {\n        code: 'unused_function',\n        message: `The pattern \"server/**/*.ts\" defined in \\`functions\\` doesn't match any Serverless Functions inside the \\`api\\` directory.`,\n        action: 'Learn More',\n        link: 'https://vercel.link/unmatched-function-pattern',\n      },\n    ]);\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"All static if `buildCommand` is an empty string","suites":["Test `detectBuilders` with `featHandleMiss=true`"],"updatePoint":{"line":2175,"column":53},"line":2175,"code":"  it('All static if `buildCommand` is an empty string', async () => {\n    const files = ['index.html'];\n    const projectSettings = { buildCommand: '' };\n    const { builders, errors } = await detectBuilders(files, null, {\n      projectSettings,\n      featHandleMiss,\n    });\n    expect(errors).toBe(null);\n    expect(builders).toBe(null);\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"All static if `outputDirectory` is an empty string","suites":["Test `detectBuilders` with `featHandleMiss=true`"],"updatePoint":{"line":2186,"column":56},"line":2186,"code":"  it('All static if `outputDirectory` is an empty string', async () => {\n    const files = ['index.html'];\n    const projectSettings = { outputDirectory: '' };\n    const { builders, errors } = await detectBuilders(files, null, {\n      projectSettings,\n      featHandleMiss,\n    });\n    expect(errors).toBe(null);\n    expect(builders).toBe(null);\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"All static if `buildCommand` is an empty string with an `outputDirectory`","suites":["Test `detectBuilders` with `featHandleMiss=true`"],"updatePoint":{"line":2197,"column":79},"line":2197,"code":"  it('All static if `buildCommand` is an empty string with an `outputDirectory`', async () => {\n    const files = ['out/index.html'];\n    const projectSettings = { buildCommand: '', outputDirectory: 'out' };\n    const { builders, errors, errorRoutes } = await detectBuilders(\n      files,\n      null,\n      {\n        projectSettings,\n        featHandleMiss,\n      }\n    );\n    expect(errors).toBe(null);\n    expect(builders![0]!.use).toBe('@vercel/static');\n    expect(builders![0]!.src).toBe('out/**/*');\n    expect(errorRoutes!.length).toBe(1);\n    expect((errorRoutes![0] as Source).status).toBe(404);\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"do not require build script when `buildCommand` is an empty string","suites":["Test `detectBuilders` with `featHandleMiss=true`"],"updatePoint":{"line":2215,"column":72},"line":2215,"code":"  it('do not require build script when `buildCommand` is an empty string', async () => {\n    const files = ['index.html', 'about.html', 'package.json'];\n    const projectSettings = { buildCommand: '', outputDirectory: '' };\n    const pkg = {\n      scripts: {\n        build: 'false',\n      },\n    };\n\n    const { builders, errors } = await detectBuilders(files, pkg, {\n      projectSettings,\n      featHandleMiss,\n    });\n    expect(builders).toBe(null);\n    expect(errors).toBe(null);\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"Test `detectRoutes`","suites":["Test `detectBuilders` with `featHandleMiss=true`"],"updatePoint":{"line":2233,"column":23},"line":2233,"code":"it('Test `detectRoutes`', async () => {\n  {\n    const files = ['api/user.go', 'api/team.js', 'api/package.json'];\n\n    const { defaultRoutes } = await detectBuilders(files);\n    expect(defaultRoutes!.length).toBe(3);\n    expect((defaultRoutes![0] as any).dest).toBe('/api/team.js');\n    expect((defaultRoutes![1] as any).dest).toBe('/api/user.go');\n    expect((defaultRoutes![2] as any).dest).not.toBeDefined();\n    expect((defaultRoutes![2] as any).status).toBe(404);\n  }\n\n  {\n    const files = ['api/user.go', 'api/user.js'];\n\n    const { errors } = await detectBuilders(files);\n    expect(errors![0]!.code).toBe('conflicting_file_path');\n  }\n\n  {\n    const files = ['api/[user].go', 'api/[team]/[id].js'];\n\n    const { errors } = await detectBuilders(files);\n    expect(errors![0]!.code).toBe('conflicting_file_path');\n  }\n\n  {\n    const files = ['api/[team]/[team].js'];\n\n    const { errors } = await detectBuilders(files);\n    expect(errors![0]!.code).toBe('conflicting_path_segment');\n  }\n\n  {\n    const files = ['api/date/index.js', 'api/date/index.go'];\n\n    const { defaultRoutes, errors } = await detectBuilders(files);\n    expect(defaultRoutes).toBe(null);\n    expect(errors![0]!.code).toBe('conflicting_file_path');\n  }\n\n  {\n    const files = ['api/[endpoint].js', 'api/[endpoint]/[id].js'];\n\n    const { defaultRoutes } = await detectBuilders(files);\n    expect(defaultRoutes!.length).toBe(3);\n  }\n\n  {\n    const files = [\n      'public/index.html',\n      'api/[endpoint].js',\n      'api/[endpoint]/[id].js',\n    ];\n\n    const { defaultRoutes } = await detectBuilders(files);\n    expect((defaultRoutes![2] as any).status).toBe(404);\n    expect((defaultRoutes![2] as any).src).toBe('^/api(/.*)?$');\n    expect((defaultRoutes![3] as any).src).toBe('/(.*)');\n    expect((defaultRoutes![3] as any).dest).toBe('/public/$1');\n    expect(defaultRoutes!.length).toBe(4);\n  }\n\n  {\n    const pkg = {\n      scripts: { build: 'next build' },\n      devDependencies: { next: '9.0.0' },\n    };\n    const files = ['public/index.html', 'api/[endpoint].js'];\n\n    const { defaultRoutes } = await detectBuilders(files, pkg);\n    expect((defaultRoutes![1] as any).status).toBe(404);\n    expect((defaultRoutes![1] as any).src).toBe('^/api(/.*)?$');\n    expect(defaultRoutes!.length).toBe(2);\n  }\n\n  {\n    const files = ['public/index.html'];\n\n    const { defaultRoutes } = await detectBuilders(files);\n\n    expect(defaultRoutes!.length).toBe(1);\n  }\n\n  {\n    const files = ['api/date/index.js', 'api/date.js'];\n\n    const { defaultRoutes } = await detectBuilders(files);\n\n    expect(defaultRoutes!.length).toBe(3);\n    expect((defaultRoutes![0] as any).src).toBe(\n      '^/api/date(/|/index|/index\\\\.js)?$'\n    );\n    expect((defaultRoutes![0] as any).dest).toBe('/api/date/index.js');\n    expect((defaultRoutes![1] as any).src).toBe(\n      '^/api/(date/|date|date\\\\.js)$'\n    );\n    expect((defaultRoutes![1] as any).dest).toBe('/api/date.js');\n  }\n\n  {\n    const files = ['api/date.js', 'api/[date]/index.js'];\n\n    const { defaultRoutes } = await detectBuilders(files);\n\n    expect(defaultRoutes!.length).toBe(3);\n    expect((defaultRoutes![0] as any).src).toBe(\n      '^/api/([^/]+)(/|/index|/index\\\\.js)?$'\n    );\n    expect((defaultRoutes![0] as any).dest).toBe(\n      '/api/[date]/index.js?date=$1'\n    );\n    expect((defaultRoutes![1] as any).src).toBe(\n      '^/api/(date/|date|date\\\\.js)$'\n    );\n    expect((defaultRoutes![1] as any).dest).toBe('/api/date.js');\n  }\n\n  {\n    const files = [\n      'api/index.ts',\n      'api/index.d.ts',\n      'api/users/index.ts',\n      'api/users/index.d.ts',\n      'api/food.ts',\n      'api/ts/gold.ts',\n    ];\n    const { builders, defaultRoutes } = await detectBuilders(files);\n\n    expect(builders!.length).toBe(4);\n    expect(builders![0].use).toBe('@vercel/node');\n    expect(builders![1].use).toBe('@vercel/node');\n    expect(builders![2].use).toBe('@vercel/node');\n    expect(builders![3].use).toBe('@vercel/node');\n    expect(defaultRoutes!.length).toBe(5);\n  }\n\n  {\n    // use a custom runtime\n    const functions = { 'api/user.php': { runtime: 'vercel-php@0.1.0' } };\n    const files = ['api/user.php'];\n\n    const { defaultRoutes } = await detectBuilders(files, null, { functions });\n\n    expect(defaultRoutes!.length).toBe(2);\n    expect((defaultRoutes![0] as any).dest).toBe('/api/user.php');\n  }\n});","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"Test `detectRoutes` with `featHandleMiss=true`","suites":["Test `detectBuilders` with `featHandleMiss=true`"],"updatePoint":{"line":2382,"column":50},"line":2382,"code":"it('Test `detectRoutes` with `featHandleMiss=true`', async () => {\n  const featHandleMiss = true;\n\n  {\n    const files = ['api/user.go', 'api/team.js', 'api/package.json'];\n\n    const { defaultRoutes, rewriteRoutes, errorRoutes, limitedRoutes } =\n      await detectBuilders(files, null, {\n        featHandleMiss,\n      });\n    expect(defaultRoutes).toStrictEqual([\n      { handle: 'miss' },\n      {\n        src: '^/api/(.+)(?:\\\\.(?:js|go))$',\n        dest: '/api/$1',\n        check: true,\n      },\n    ]);\n    expect(rewriteRoutes).toStrictEqual([\n      {\n        status: 404,\n        src: '^/api(/.*)?$',\n      },\n    ]);\n    expect(errorRoutes).toStrictEqual([\n      {\n        status: 404,\n        src: '^(?!/api).*$',\n        dest: '/404.html',\n      },\n    ]);\n\n    // Limited routes should have js but not go since the go plugin is not installed\n    expect(limitedRoutes).toStrictEqual({\n      redirectRoutes: [],\n      rewriteRoutes: [],\n      defaultRoutes: [\n        {\n          handle: 'miss',\n        },\n        {\n          src: '^/api/(.+)(?:\\\\.(?:js))$',\n          dest: '/api/$1',\n          check: true,\n        },\n      ],\n    });\n\n    const pattern = new RegExp(errorRoutes![0].src!);\n\n    [\n      '/',\n      '/index.html',\n      '/page.html',\n      '/page',\n      '/another/index.html',\n      '/another/page.html',\n      '/another/page',\n      '/another/sub/index.html',\n      '/another/sub/page.html',\n      '/another/sub/page',\n      '/another/api',\n      '/another/api/page.html',\n      '/rapid',\n      '/rapid/page.html',\n      '/health-api.html',\n    ].forEach(file => {\n      expect(file).toMatch(pattern);\n    });\n\n    [\n      '/api',\n      '/api/',\n      '/api/index.html',\n      '/api/users.js',\n      '/api/users',\n      '/api/sub',\n      '/api/sub/index.html',\n      '/api/sub/users.js',\n      '/api/sub/users',\n    ].forEach(file => {\n      expect(file).not.toMatch(pattern);\n    });\n  }\n\n  {\n    const files = ['api/user.go', 'api/user.js'];\n\n    const { errors } = await detectBuilders(files, null, { featHandleMiss });\n    expect(errors![0]!.code).toBe('conflicting_file_path');\n  }\n\n  {\n    const files = ['api/[user].go', 'api/[team]/[id].js'];\n\n    const { errors } = await detectBuilders(files, null, { featHandleMiss });\n    expect(errors![0]!.code).toBe('conflicting_file_path');\n  }\n\n  {\n    const files = ['api/[team]/[team].js'];\n\n    const { errors } = await detectBuilders(files, null, { featHandleMiss });\n    expect(errors![0]!.code).toBe('conflicting_path_segment');\n  }\n\n  {\n    const files = ['api/date/index.js', 'api/date/index.go'];\n\n    const { defaultRoutes, errors } = await detectBuilders(files, null, {\n      featHandleMiss,\n    });\n    expect(defaultRoutes).toBe(null);\n    expect(errors![0]!.code).toBe('conflicting_file_path');\n  }\n\n  {\n    const files = ['api/[endpoint].js', 'api/[endpoint]/[id].js'];\n\n    const { defaultRoutes, rewriteRoutes } = await detectBuilders(files, null, {\n      featHandleMiss,\n    });\n    expect(defaultRoutes).toStrictEqual([\n      { handle: 'miss' },\n      {\n        src: '^/api/(.+)(?:\\\\.(?:js))$',\n        dest: '/api/$1',\n        check: true,\n      },\n    ]);\n    expect(rewriteRoutes).toStrictEqual([\n      {\n        src: '^/api/([^/]+)/([^/]+)$',\n        dest: '/api/[endpoint]/[id]?endpoint=$1&id=$2',\n        check: true,\n      },\n      {\n        src: '^/api/([^/]+)$',\n        dest: '/api/[endpoint]?endpoint=$1',\n        check: true,\n      },\n      {\n        status: 404,\n        src: '^/api(/.*)?$',\n      },\n    ]);\n  }\n\n  {\n    const files = [\n      'public/index.html',\n      'api/[endpoint].js',\n      'api/[endpoint]/[id].js',\n    ];\n\n    const { defaultRoutes, rewriteRoutes } = await detectBuilders(files, null, {\n      featHandleMiss,\n    });\n    expect(defaultRoutes).toStrictEqual([\n      { handle: 'miss' },\n      {\n        src: '^/api/(.+)(?:\\\\.(?:js))$',\n        dest: '/api/$1',\n        check: true,\n      },\n    ]);\n\n    expect(rewriteRoutes).toStrictEqual([\n      {\n        src: '^/api/([^/]+)/([^/]+)$',\n        dest: '/api/[endpoint]/[id]?endpoint=$1&id=$2',\n        check: true,\n      },\n      {\n        src: '^/api/([^/]+)$',\n        dest: '/api/[endpoint]?endpoint=$1',\n        check: true,\n      },\n      {\n        status: 404,\n        src: '^/api(/.*)?$',\n      },\n    ]);\n  }\n\n  {\n    const pkg = {\n      scripts: {\n        build: 'next build',\n      },\n      framework: {\n        slug: 'next',\n        version: '9.0.0',\n      },\n    };\n\n    const files = ['public/index.html', 'api/[endpoint].js'];\n\n    const { defaultRoutes, rewriteRoutes } = await detectBuilders(files, pkg, {\n      featHandleMiss,\n    });\n    expect(defaultRoutes).toStrictEqual([\n      { handle: 'miss' },\n      {\n        src: '^/api/(.+)(?:\\\\.(?:js))$',\n        dest: '/api/$1',\n        check: true,\n      },\n    ]);\n    expect(rewriteRoutes).toStrictEqual([\n      {\n        src: '^/api/([^/]+)$',\n        dest: '/api/[endpoint]?endpoint=$1',\n        check: true,\n      },\n      {\n        status: 404,\n        src: '^/api(/.*)?$',\n      },\n    ]);\n  }\n\n  {\n    const files = ['api/external.js', 'pages/api/internal.js'];\n    const { builders, warnings } = await detectBuilders(files, null, {\n      featHandleMiss,\n      projectSettings: { framework: 'nextjs' },\n    });\n    expect(builders).toStrictEqual([\n      {\n        config: {\n          zeroConfig: true,\n        },\n        src: 'api/external.js',\n        use: '@vercel/node',\n      },\n      {\n        config: {\n          framework: 'nextjs',\n          zeroConfig: true,\n        },\n        src: 'package.json',\n        use: '@vercel/next',\n      },\n    ]);\n    expect(warnings).toStrictEqual([\n      {\n        code: 'conflicting_files',\n        message:\n          'When using Next.js, it is recommended to place Node.js Serverless Functions inside of the `pages/api` (provided by Next.js) directory instead of `api` (provided by Vercel).',\n        link: 'https://nextjs.org/docs/api-routes/introduction',\n        action: 'Learn More',\n      },\n    ]);\n  }\n\n  {\n    const files = ['api/external.js', 'pages/api/internal.js'];\n    const { builders, warnings } = await detectBuilders(files, null, {\n      featHandleMiss,\n      tag: 'canary',\n      projectSettings: { framework: 'nextjs' },\n    });\n    expect(builders).toStrictEqual([\n      {\n        config: {\n          zeroConfig: true,\n        },\n        src: 'api/external.js',\n        use: '@vercel/node@canary',\n      },\n      {\n        config: {\n          framework: 'nextjs',\n          zeroConfig: true,\n        },\n        src: 'package.json',\n        use: '@vercel/next@canary',\n      },\n    ]);\n    expect(warnings).toStrictEqual([\n      {\n        code: 'conflicting_files',\n        message:\n          'When using Next.js, it is recommended to place Node.js Serverless Functions inside of the `pages/api` (provided by Next.js) directory instead of `api` (provided by Vercel).',\n        link: 'https://nextjs.org/docs/api-routes/introduction',\n        action: 'Learn More',\n      },\n    ]);\n  }\n\n  {\n    const files = ['api/external.go', 'pages/api/internal.js'];\n    const { builders, warnings } = await detectBuilders(files, null, {\n      featHandleMiss,\n      projectSettings: { framework: 'nextjs' },\n    });\n    expect(builders).toStrictEqual([\n      {\n        config: {\n          zeroConfig: true,\n        },\n        src: 'api/external.go',\n        use: '@vercel/go',\n      },\n      {\n        config: {\n          framework: 'nextjs',\n          zeroConfig: true,\n        },\n        src: 'package.json',\n        use: '@vercel/next',\n      },\n    ]);\n    expect(warnings).toStrictEqual([]);\n  }\n\n  {\n    const files = ['public/index.html'];\n\n    const { defaultRoutes } = await detectBuilders(files, null, {\n      featHandleMiss,\n    });\n    expect(defaultRoutes).toStrictEqual([]);\n  }\n\n  {\n    const files = ['api/date/index.js', 'api/date.js'];\n\n    const { defaultRoutes, rewriteRoutes } = await detectBuilders(files, null, {\n      featHandleMiss,\n    });\n    expect(defaultRoutes).toStrictEqual([\n      { handle: 'miss' },\n      {\n        src: '^/api/(.+)(?:\\\\.(?:js))$',\n        dest: '/api/$1',\n        check: true,\n      },\n    ]);\n\n    expect(rewriteRoutes).toStrictEqual([\n      {\n        status: 404,\n        src: '^/api(/.*)?$',\n      },\n    ]);\n  }\n\n  {\n    const files = ['api/date.js', 'api/[date]/index.js'];\n\n    const { defaultRoutes, rewriteRoutes } = await detectBuilders(files, null, {\n      featHandleMiss,\n    });\n    expect(defaultRoutes).toStrictEqual([\n      { handle: 'miss' },\n      {\n        src: '^/api/(.+)(?:\\\\.(?:js))$',\n        dest: '/api/$1',\n        check: true,\n      },\n    ]);\n    expect(rewriteRoutes).toStrictEqual([\n      {\n        src: '^/api/([^/]+)(/|/index|/index\\\\.js)?$',\n        dest: '/api/[date]/index?date=$1',\n        check: true,\n      },\n      {\n        status: 404,\n        src: '^/api(/.*)?$',\n      },\n    ]);\n  }\n\n  {\n    const files = [\n      'api/index.ts',\n      'api/index.d.ts',\n      'api/users/index.ts',\n      'api/users/index.d.ts',\n      'api/food.ts',\n      'api/ts/gold.ts',\n    ];\n    const { defaultRoutes, rewriteRoutes } = await detectBuilders(files, null, {\n      featHandleMiss,\n    });\n\n    expect(defaultRoutes).toStrictEqual([\n      { handle: 'miss' },\n      {\n        src: '^/api/(.+)(?:\\\\.(?:ts))$',\n        dest: '/api/$1',\n        check: true,\n      },\n    ]);\n\n    expect(rewriteRoutes).toStrictEqual([\n      {\n        status: 404,\n        src: '^/api(/.*)?$',\n      },\n    ]);\n  }\n\n  {\n    // use a custom runtime\n    const functions = { 'api/user.php': { runtime: 'vercel-php@0.1.0' } };\n    const files = ['api/user.php'];\n\n    const { defaultRoutes, rewriteRoutes } = await detectBuilders(files, null, {\n      functions,\n      featHandleMiss,\n    });\n    expect(defaultRoutes).toStrictEqual([\n      { handle: 'miss' },\n      {\n        src: '^/api/(.+)(?:\\\\.(?:php))$',\n        dest: '/api/$1',\n        check: true,\n      },\n    ]);\n\n    expect(rewriteRoutes).toStrictEqual([\n      {\n        status: 404,\n        src: '^/api(/.*)?$',\n      },\n    ]);\n  }\n});","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"Test `detectRoutes` with `featHandleMiss=true`, `cleanUrls=true`","suites":["Test `detectBuilders` with `featHandleMiss=true`"],"updatePoint":{"line":2815,"column":68},"line":2815,"code":"it('Test `detectRoutes` with `featHandleMiss=true`, `cleanUrls=true`', async () => {\n  const options = {\n    featHandleMiss: true,\n    cleanUrls: true,\n  };\n\n  const testHeaders = (redirectRoutes: Route[] | null) => {\n    if (!redirectRoutes || redirectRoutes.length === 0) {\n      throw new Error('Expected one redirect but found none');\n    }\n    expect(redirectRoutes).toBeDefined();\n    expect(redirectRoutes.length).toBe(2);\n  };\n\n  {\n    const files = ['api/user.go', 'api/team.js', 'api/package.json'];\n\n    const {\n      defaultRoutes,\n      redirectRoutes,\n      rewriteRoutes,\n      errorRoutes,\n      limitedRoutes,\n    } = await detectBuilders(files, null, options);\n    testHeaders(redirectRoutes);\n    expect(defaultRoutes).toStrictEqual([]);\n    expect(rewriteRoutes).toStrictEqual([\n      {\n        status: 404,\n        src: '^/api(/.*)?$',\n      },\n    ]);\n    expect(errorRoutes).toStrictEqual([\n      {\n        status: 404,\n        src: '^(?!/api).*$',\n        dest: '/404',\n      },\n    ]);\n\n    // Limited routes should have js but not go since the go plugin is not installed\n    expect(limitedRoutes).toStrictEqual({\n      redirectRoutes: [\n        {\n          src: '^/(api(?:.+)?)/index(?:\\\\.(?:js))?/?$',\n          headers: {\n            Location: '/$1',\n          },\n          status: 308,\n        },\n        {\n          src: '^/api/(.+)(?:\\\\.(?:js))/?$',\n          headers: {\n            Location: '/api/$1',\n          },\n          status: 308,\n        },\n      ],\n      rewriteRoutes: [],\n      defaultRoutes: [],\n    });\n\n    // expected redirect should match inputs\n    const getLocation = createReplaceLocation(redirectRoutes);\n\n    expect(getLocation('/api/index')).toBe('/api');\n    expect(getLocation('/api/index.js')).toBe('/api');\n    expect(getLocation('/api/user.js')).toBe('/api/user');\n    expect(getLocation('/api/user.prod.js')).toBe('/api/user.prod');\n    expect(getLocation('/api/user/index.js')).toBe('/api/user');\n\n    expect(getLocation('/api/index.go')).toBe('/api');\n    expect(getLocation('/api/user.go')).toBe('/api/user');\n    expect(getLocation('/api/user.prod.go')).toBe('/api/user.prod');\n    expect(getLocation('/api/user/index.go')).toBe('/api/user');\n\n    expect(getLocation('/api/index.cpp')).toBe(null);\n    expect(getLocation('/api/user.cpp')).toBe(null);\n    expect(getLocation('/api/user.prod.cpp')).toBe(null);\n    expect(getLocation('/api/user/index.cpp')).toBe(null);\n\n    expect(getLocation('/api/user')).toBe(null);\n    expect(getLocation('/api/user/get')).toBe(null);\n    expect(getLocation('/apiindex')).toBe(null);\n    expect(getLocation('/api-index')).toBe(null);\n    expect(getLocation('/apiuserindex')).toBe(null);\n    expect(getLocation('/apiuser-index')).toBe(null);\n  }\n\n  {\n    const files = ['api/user.go', 'api/user.js'];\n\n    const { errors } = await detectBuilders(files, null, options);\n    expect(errors![0]!.code).toBe('conflicting_file_path');\n  }\n\n  {\n    const files = ['api/[user].go', 'api/[team]/[id].js'];\n\n    const { errors } = await detectBuilders(files, null, options);\n    expect(errors![0]!.code).toBe('conflicting_file_path');\n  }\n\n  {\n    const files = ['api/[team]/[team].js'];\n\n    const { errors } = await detectBuilders(files, null, options);\n    expect(errors![0]!.code).toBe('conflicting_path_segment');\n  }\n\n  {\n    const files = ['api/date/index.js', 'api/date/index.go'];\n\n    const { defaultRoutes, errors } = await detectBuilders(\n      files,\n      null,\n      options\n    );\n    expect(defaultRoutes).toBe(null);\n    expect(errors![0]!.code).toBe('conflicting_file_path');\n  }\n\n  {\n    const files = ['api/[endpoint].js', 'api/[endpoint]/[id].js'];\n\n    const { defaultRoutes, redirectRoutes, rewriteRoutes } =\n      await detectBuilders(files, null, options);\n    testHeaders(redirectRoutes);\n    expect(defaultRoutes).toStrictEqual([]);\n    expect(rewriteRoutes).toStrictEqual([\n      {\n        src: '^/api/([^/]+)/([^/]+)$',\n        dest: '/api/[endpoint]/[id]?endpoint=$1&id=$2',\n        check: true,\n      },\n      {\n        src: '^/api/([^/]+)$',\n        dest: '/api/[endpoint]?endpoint=$1',\n        check: true,\n      },\n      {\n        status: 404,\n        src: '^/api(/.*)?$',\n      },\n    ]);\n  }\n\n  {\n    const files = [\n      'public/index.html',\n      'api/[endpoint].js',\n      'api/[endpoint]/[id].js',\n    ];\n\n    const { defaultRoutes, redirectRoutes, rewriteRoutes } =\n      await detectBuilders(files, null, options);\n    testHeaders(redirectRoutes);\n    expect(defaultRoutes).toStrictEqual([]);\n    expect(rewriteRoutes).toStrictEqual([\n      {\n        src: '^/api/([^/]+)/([^/]+)$',\n        dest: '/api/[endpoint]/[id]?endpoint=$1&id=$2',\n        check: true,\n      },\n      {\n        src: '^/api/([^/]+)$',\n        dest: '/api/[endpoint]?endpoint=$1',\n        check: true,\n      },\n      {\n        status: 404,\n        src: '^/api(/.*)?$',\n      },\n    ]);\n  }\n\n  {\n    const pkg = {\n      scripts: {\n        build: 'next build',\n      },\n      framework: {\n        slug: 'next',\n        version: '9.0.0',\n      },\n    };\n\n    const files = ['public/index.html', 'api/[endpoint].js'];\n\n    const { defaultRoutes, redirectRoutes, rewriteRoutes } =\n      await detectBuilders(files, pkg, options);\n    testHeaders(redirectRoutes);\n    expect(defaultRoutes).toStrictEqual([]);\n    expect(rewriteRoutes).toStrictEqual([\n      {\n        src: '^/api/([^/]+)$',\n        dest: '/api/[endpoint]?endpoint=$1',\n        check: true,\n      },\n      {\n        status: 404,\n        src: '^/api(/.*)?$',\n      },\n    ]);\n  }\n\n  {\n    const files = ['public/index.html'];\n\n    const { defaultRoutes } = await detectBuilders(files, null, options);\n    expect(defaultRoutes).toStrictEqual([]);\n  }\n\n  {\n    const files = ['api/date/index.js', 'api/date.js'];\n\n    const { defaultRoutes, redirectRoutes, rewriteRoutes } =\n      await detectBuilders(files, null, options);\n    testHeaders(redirectRoutes);\n    expect(defaultRoutes).toStrictEqual([]);\n    expect(rewriteRoutes).toStrictEqual([\n      {\n        status: 404,\n        src: '^/api(/.*)?$',\n      },\n    ]);\n  }\n\n  {\n    const files = ['api/date.js', 'api/[date]/index.js'];\n\n    const { defaultRoutes, redirectRoutes, rewriteRoutes } =\n      await detectBuilders(files, null, options);\n    testHeaders(redirectRoutes);\n    expect(defaultRoutes).toStrictEqual([]);\n    expect(rewriteRoutes).toStrictEqual([\n      {\n        src: '^/api/([^/]+)(/|/index)?$',\n        dest: '/api/[date]/index?date=$1',\n        check: true,\n      },\n      {\n        status: 404,\n        src: '^/api(/.*)?$',\n      },\n    ]);\n  }\n\n  {\n    const files = [\n      'api/index.ts',\n      'api/index.d.ts',\n      'api/users/index.ts',\n      'api/users/index.d.ts',\n      'api/food.ts',\n      'api/ts/gold.ts',\n    ];\n    const { defaultRoutes, redirectRoutes, rewriteRoutes } =\n      await detectBuilders(files, null, options);\n    testHeaders(redirectRoutes);\n    expect(defaultRoutes).toStrictEqual([]);\n    expect(rewriteRoutes).toStrictEqual([\n      {\n        status: 404,\n        src: '^/api(/.*)?$',\n      },\n    ]);\n  }\n\n  {\n    // use a custom runtime\n    const functions = { 'api/user.php': { runtime: 'vercel-php@0.1.0' } };\n    const files = ['api/user.php'];\n\n    const { defaultRoutes, redirectRoutes, rewriteRoutes } =\n      await detectBuilders(files, null, { functions, ...options });\n    testHeaders(redirectRoutes);\n    expect(defaultRoutes).toStrictEqual([]);\n    expect(rewriteRoutes).toStrictEqual([\n      {\n        status: 404,\n        src: '^/api(/.*)?$',\n      },\n    ]);\n  }\n});","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"Test `detectRoutes` with `featHandleMiss=true`, `cleanUrls=true`, `trailingSlash=true`","suites":["Test `detectBuilders` with `featHandleMiss=true`"],"updatePoint":{"line":3102,"column":90},"line":3102,"code":"it('Test `detectRoutes` with `featHandleMiss=true`, `cleanUrls=true`, `trailingSlash=true`', async () => {\n  const options = {\n    featHandleMiss: true,\n    cleanUrls: true,\n    trailingSlash: true,\n  };\n\n  const testHeaders = (redirectRoutes: Route[] | null) => {\n    if (!redirectRoutes || redirectRoutes.length === 0) {\n      throw new Error('Expected one redirect but found none');\n    }\n    expect(redirectRoutes).toBeDefined();\n    expect(redirectRoutes.length).toBe(2);\n  };\n\n  {\n    const files = ['api/user.go', 'api/team.js', 'api/package.json'];\n\n    const { defaultRoutes, redirectRoutes, rewriteRoutes, limitedRoutes } =\n      await detectBuilders(files, null, options);\n    testHeaders(redirectRoutes);\n    expect(defaultRoutes).toStrictEqual([]);\n    expect(rewriteRoutes).toStrictEqual([\n      {\n        status: 404,\n        src: '^/api(/.*)?$',\n      },\n    ]);\n\n    // Limited routes should have js but not go since the go plugin is not installed\n    expect(limitedRoutes).toStrictEqual({\n      redirectRoutes: [\n        {\n          src: '^/(api(?:.+)?)/index(?:\\\\.(?:js))?/?$',\n          headers: {\n            Location: '/$1/',\n          },\n          status: 308,\n        },\n        {\n          src: '^/api/(.+)(?:\\\\.(?:js))/?$',\n          headers: {\n            Location: '/api/$1/',\n          },\n          status: 308,\n        },\n      ],\n      rewriteRoutes: [],\n      defaultRoutes: [],\n    });\n\n    // expected redirect should match inputs\n    const getLocation = createReplaceLocation(redirectRoutes);\n\n    expect(getLocation('/api/index')).toBe('/api/');\n    expect(getLocation('/api/index.js')).toBe('/api/');\n    expect(getLocation('/api/user.js')).toBe('/api/user/');\n    expect(getLocation('/api/user.prod.js')).toBe('/api/user.prod/');\n    expect(getLocation('/api/user/index.js')).toBe('/api/user/');\n\n    expect(getLocation('/api/index.go')).toBe('/api/');\n    expect(getLocation('/api/user.go')).toBe('/api/user/');\n    expect(getLocation('/api/user.prod.go')).toBe('/api/user.prod/');\n    expect(getLocation('/api/user/index.go')).toBe('/api/user/');\n\n    expect(getLocation('/api/index.cpp')).toBe(null);\n    expect(getLocation('/api/user.cpp')).toBe(null);\n    expect(getLocation('/api/user.prod.cpp')).toBe(null);\n    expect(getLocation('/api/user/index.cpp')).toBe(null);\n\n    expect(getLocation('/api/user')).toBe(null);\n    expect(getLocation('/api/user/get')).toBe(null);\n    expect(getLocation('/apiindex')).toBe(null);\n    expect(getLocation('/api.index')).toBe(null);\n    expect(getLocation('/api.index.js')).toBe(null);\n    expect(getLocation('/api-index')).toBe(null);\n    expect(getLocation('/apiuser.index')).toBe(null);\n    expect(getLocation('/apiuser-index')).toBe(null);\n    expect(getLocation('/apiuser-index')).toBe(null);\n  }\n\n  {\n    const files = ['api/[endpoint].js', 'api/[endpoint]/[id].js'];\n\n    const { defaultRoutes, redirectRoutes, rewriteRoutes } =\n      await detectBuilders(files, null, options);\n    testHeaders(redirectRoutes);\n    expect(defaultRoutes).toStrictEqual([]);\n    expect(rewriteRoutes).toStrictEqual([\n      {\n        src: '^/api/([^/]+)/([^/]+)$',\n        dest: '/api/[endpoint]/[id]?endpoint=$1&id=$2',\n        check: true,\n      },\n      {\n        src: '^/api/([^/]+)$',\n        dest: '/api/[endpoint]?endpoint=$1',\n        check: true,\n      },\n      {\n        status: 404,\n        src: '^/api(/.*)?$',\n      },\n    ]);\n  }\n\n  {\n    const files = [\n      'public/index.html',\n      'api/[endpoint].js',\n      'api/[endpoint]/[id].js',\n    ];\n\n    const { defaultRoutes, redirectRoutes, rewriteRoutes } =\n      await detectBuilders(files, null, options);\n    testHeaders(redirectRoutes);\n    expect(defaultRoutes).toStrictEqual([]);\n    expect(rewriteRoutes).toStrictEqual([\n      {\n        src: '^/api/([^/]+)/([^/]+)$',\n        dest: '/api/[endpoint]/[id]?endpoint=$1&id=$2',\n        check: true,\n      },\n      {\n        src: '^/api/([^/]+)$',\n        dest: '/api/[endpoint]?endpoint=$1',\n        check: true,\n      },\n      {\n        status: 404,\n        src: '^/api(/.*)?$',\n      },\n    ]);\n  }\n\n  {\n    const pkg = {\n      scripts: {\n        build: 'next build',\n      },\n      framework: {\n        slug: 'next',\n        version: '9.0.0',\n      },\n    };\n\n    const files = ['public/index.html', 'api/[endpoint].js'];\n\n    const { defaultRoutes, redirectRoutes, rewriteRoutes } =\n      await detectBuilders(files, pkg, options);\n    testHeaders(redirectRoutes);\n    expect(defaultRoutes).toStrictEqual([]);\n    expect(rewriteRoutes).toStrictEqual([\n      {\n        src: '^/api/([^/]+)$',\n        dest: '/api/[endpoint]?endpoint=$1',\n        check: true,\n      },\n      {\n        status: 404,\n        src: '^/api(/.*)?$',\n      },\n    ]);\n  }\n\n  {\n    const files = ['api/date/index.js', 'api/date.js'];\n\n    const { defaultRoutes, redirectRoutes, rewriteRoutes } =\n      await detectBuilders(files, null, options);\n    testHeaders(redirectRoutes);\n    expect(defaultRoutes).toStrictEqual([]);\n    expect(rewriteRoutes).toStrictEqual([\n      {\n        status: 404,\n        src: '^/api(/.*)?$',\n      },\n    ]);\n  }\n\n  {\n    const files = ['api/date.js', 'api/[date]/index.js'];\n\n    const { defaultRoutes, redirectRoutes, rewriteRoutes } =\n      await detectBuilders(files, null, options);\n    testHeaders(redirectRoutes);\n    expect(defaultRoutes).toStrictEqual([]);\n    expect(rewriteRoutes).toStrictEqual([\n      {\n        src: '^/api/([^/]+)(/|/index)?$',\n        dest: '/api/[date]/index?date=$1',\n        check: true,\n      },\n      {\n        status: 404,\n        src: '^/api(/.*)?$',\n      },\n    ]);\n  }\n\n  {\n    const files = [\n      'api/index.ts',\n      'api/index.d.ts',\n      'api/users/index.ts',\n      'api/users/index.d.ts',\n      'api/food.ts',\n      'api/ts/gold.ts',\n    ];\n    const { defaultRoutes, redirectRoutes, rewriteRoutes } =\n      await detectBuilders(files, null, options);\n    testHeaders(redirectRoutes);\n    expect(defaultRoutes).toStrictEqual([]);\n    expect(rewriteRoutes).toStrictEqual([\n      {\n        status: 404,\n        src: '^/api(/.*)?$',\n      },\n    ]);\n  }\n\n  {\n    // use a custom runtime\n    const functions = { 'api/user.php': { runtime: 'vercel-php@0.1.0' } };\n    const files = ['api/user.php'];\n\n    const { defaultRoutes, redirectRoutes, rewriteRoutes } =\n      await detectBuilders(files, null, { functions, ...options });\n    testHeaders(redirectRoutes);\n    expect(defaultRoutes).toStrictEqual([]);\n    expect(rewriteRoutes).toStrictEqual([\n      {\n        status: 404,\n        src: '^/api(/.*)?$',\n      },\n    ]);\n  }\n});","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should be `null` with no config","suites":["Test `detectOutputDirectory`"],"updatePoint":{"line":3342,"column":37},"line":3342,"code":"  it('should be `null` with no config', async () => {\n    const builders = [\n      {\n        use: '@vercel/static',\n        src: 'public/**/*',\n      },\n    ];\n    const result = detectOutputDirectory(builders);\n    expect(result).toBe(null);\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should be `null` with no zero config builds","suites":["Test `detectOutputDirectory`"],"updatePoint":{"line":3353,"column":49},"line":3353,"code":"  it('should be `null` with no zero config builds', async () => {\n    const builders = [\n      {\n        use: '@vercel/static',\n        src: 'public/**/*',\n        config: {},\n      },\n    ];\n    const result = detectOutputDirectory(builders);\n    expect(result).toBe(null);\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should be `public` with one zero config","suites":["Test `detectOutputDirectory`"],"updatePoint":{"line":3365,"column":45},"line":3365,"code":"  it('should be `public` with one zero config', async () => {\n    const builders = [\n      {\n        use: '@vercel/static',\n        src: 'public/**/*',\n        config: { zeroConfig: true },\n      },\n    ];\n    const result = detectOutputDirectory(builders);\n    expect(result).toBe('public');\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should be `public` with one zero config and one without config","suites":["Test `detectOutputDirectory`"],"updatePoint":{"line":3377,"column":68},"line":3377,"code":"  it('should be `public` with one zero config and one without config', async () => {\n    const builders = [\n      {\n        use: '@vercel/static',\n        src: 'public/**/*',\n        config: { zeroConfig: true },\n      },\n      {\n        use: '@vercel/node',\n        src: 'api/index.js',\n      },\n    ];\n    const result = detectOutputDirectory(builders);\n    expect(result).toBe('public');\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should be `null` with no config","suites":["Test `detectApiDirectory`"],"updatePoint":{"line":3395,"column":37},"line":3395,"code":"  it('should be `null` with no config', async () => {\n    const builders = [\n      {\n        use: '@vercel/node',\n        src: 'api/**/*.js',\n      },\n    ];\n    const result = detectApiDirectory(builders);\n    expect(result).toBe(null);\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should be `null` with no zero config builds","suites":["Test `detectApiDirectory`"],"updatePoint":{"line":3406,"column":49},"line":3406,"code":"  it('should be `null` with no zero config builds', async () => {\n    const builders = [\n      {\n        use: '@vercel/node',\n        src: 'api/**/*.js',\n        config: {},\n      },\n    ];\n    const result = detectApiDirectory(builders);\n    expect(result).toBe(null);\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should be `api` with one zero config","suites":["Test `detectApiDirectory`"],"updatePoint":{"line":3418,"column":42},"line":3418,"code":"  it('should be `api` with one zero config', async () => {\n    const builders = [\n      {\n        use: '@vercel/node',\n        src: 'api/**/*.js',\n        config: { zeroConfig: true },\n      },\n    ];\n    const result = detectApiDirectory(builders);\n    expect(result).toBe('api');\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should be `api` with one zero config and one without config","suites":["Test `detectApiDirectory`"],"updatePoint":{"line":3430,"column":65},"line":3430,"code":"  it('should be `api` with one zero config and one without config', async () => {\n    const builders = [\n      {\n        use: '@vercel/node',\n        src: 'api/**/*.js',\n        config: { zeroConfig: true },\n      },\n      {\n        use: '@vercel/php',\n        src: 'api/**/*.php',\n      },\n    ];\n    const result = detectApiDirectory(builders);\n    expect(result).toBe('api');\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should be `null` with zero config but without api directory","suites":["Test `detectApiDirectory`"],"updatePoint":{"line":3446,"column":65},"line":3446,"code":"  it('should be `null` with zero config but without api directory', async () => {\n    const builders = [\n      {\n        use: '@vercel/next',\n        src: 'package.json',\n        config: { zeroConfig: true },\n      },\n    ];\n    const result = detectApiDirectory(builders);\n    expect(result).toBe(null);\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should have correct extensions","suites":["Test `detectApiExtensions`"],"updatePoint":{"line":3460,"column":36},"line":3460,"code":"  it('should have correct extensions', async () => {\n    const builders = [\n      {\n        use: '@vercel/node',\n        src: 'api/**/*.js',\n        config: {\n          zeroConfig: true,\n        },\n      },\n      {\n        use: '@vercel/python',\n        src: 'api/**/*.py',\n        config: {\n          zeroConfig: true,\n        },\n      },\n      {\n        use: '@vercel/go',\n        src: 'api/**/*.go',\n        config: {\n          zeroConfig: true,\n        },\n      },\n      {\n        use: '@vercel/ruby',\n        src: 'api/**/*.rb',\n        config: {\n          zeroConfig: true,\n        },\n      },\n      {\n        use: 'now-bash',\n        src: 'api/**/*.sh',\n        // No zero config so it should not be added\n      },\n      {\n        use: 'now-no-extension',\n        src: 'api/executable',\n        // No extension should not be added\n        config: {\n          zeroConfig: true,\n        },\n      },\n      {\n        use: '@vercel/next',\n        src: 'package.json',\n        // No api directory should not be added\n        config: {\n          zeroConfig: true,\n        },\n      },\n      {\n        use: 'now-rust@1.0.1',\n        src: 'api/user.rs',\n        config: {\n          zeroConfig: true,\n          functions: {\n            'api/**/*.rs': {\n              runtime: 'now-rust@1.0.1',\n            },\n          },\n        },\n      },\n    ];\n    const result = detectApiExtensions(builders);\n    expect(result.size).toBe(5);\n    expect(result.has('.js')).toBe(true);\n    expect(result.has('.py')).toBe(true);\n    expect(result.has('.go')).toBe(true);\n    expect(result.has('.rb')).toBe(true);\n    expect(result.has('.rs')).toBe(true);\n  });","file":"unit.builds-and-routes-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should error when builds in vercel.json","suites":["Test `detectFileSystemAPI`"],"updatePoint":{"line":4,"column":45},"line":4,"code":"  it('should error when builds in vercel.json', async () => {\n    const vercelConfig = {\n      builds: [{ use: '@vercel/node', src: 'api/**/*.js' }],\n    };\n    const files = {\n      'vercel.json': JSON.stringify(vercelConfig),\n      'api/foo.js': 'console.log(\"foo\")',\n    };\n    const result = await detectFileSystemAPI({\n      files,\n      projectSettings: {},\n      builders: vercelConfig.builds,\n      vercelConfig,\n      pkg: null,\n      tag: '',\n      enableFlag: true,\n    });\n    expect(result).toEqual({\n      fsApiBuilder: null,\n      reason:\n        'Detected `builds` in vercel.json. Please remove it in favor of CLI plugins.',\n      metadata: { hasDotOutput: false, hasMiddleware: false, plugins: [] },\n    });\n  });","file":"unit.detect-file-system-api.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should error when functions.runtimes in vercel.json","suites":["Test `detectFileSystemAPI`"],"updatePoint":{"line":29,"column":57},"line":29,"code":"  it('should error when functions.runtimes in vercel.json', async () => {\n    const vercelConfig = {\n      functions: {\n        'api/**/*.rs': {\n          runtime: 'vercel-rust@latest',\n        },\n      },\n    };\n    const files = {\n      'vercel.json': JSON.stringify(vercelConfig),\n      'api/foo.rs': 'println!(\"foo\")',\n    };\n    const result = await detectFileSystemAPI({\n      files,\n      projectSettings: {},\n      builders: [],\n      vercelConfig,\n      pkg: null,\n      tag: '',\n      enableFlag: true,\n    });\n    expect(result).toEqual({\n      fsApiBuilder: null,\n      reason:\n        'Detected `functions.runtime` in vercel.json. Please remove it in favor of CLI plugins.',\n      metadata: { hasDotOutput: false, hasMiddleware: false, plugins: [] },\n    });\n  });","file":"unit.detect-file-system-api.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should error when HUGO_VERSION env var used","suites":["Test `detectFileSystemAPI`"],"updatePoint":{"line":58,"column":49},"line":58,"code":"  it('should error when HUGO_VERSION env var used', async () => {\n    process.env.HUGO_VERSION = 'v0.58.2';\n    const files = { 'foo.html': '<h1>Foo</h1>' };\n    const result = await detectFileSystemAPI({\n      files,\n      projectSettings: {},\n      builders: [],\n      vercelConfig: null,\n      pkg: null,\n      tag: '',\n      enableFlag: true,\n    });\n    expect(result).toEqual({\n      fsApiBuilder: null,\n      reason: 'Detected `HUGO_VERSION` environment variable. Please remove it.',\n      metadata: { hasDotOutput: false, hasMiddleware: false, plugins: [] },\n    });\n    delete process.env.HUGO_VERSION;\n  });","file":"unit.detect-file-system-api.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should error when ZOLA_VERSION env var used","suites":["Test `detectFileSystemAPI`"],"updatePoint":{"line":78,"column":49},"line":78,"code":"  it('should error when ZOLA_VERSION env var used', async () => {\n    process.env.ZOLA_VERSION = 'v0.0.1';\n    const files = { 'foo.html': '<h1>Foo</h1>' };\n    const result = await detectFileSystemAPI({\n      files,\n      projectSettings: {},\n      builders: [],\n      vercelConfig: null,\n      pkg: null,\n      tag: '',\n      enableFlag: true,\n    });\n    expect(result).toEqual({\n      fsApiBuilder: null,\n      reason: 'Detected `ZOLA_VERSION` environment variable. Please remove it.',\n      metadata: { hasDotOutput: false, hasMiddleware: false, plugins: [] },\n    });\n    delete process.env.ZOLA_VERSION;\n  });","file":"unit.detect-file-system-api.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should error when GUTENBERG_VERSION env var used","suites":["Test `detectFileSystemAPI`"],"updatePoint":{"line":98,"column":54},"line":98,"code":"  it('should error when GUTENBERG_VERSION env var used', async () => {\n    process.env.GUTENBERG_VERSION = 'v0.0.1';\n    const files = { 'foo.html': '<h1>Foo</h1>' };\n    const result = await detectFileSystemAPI({\n      files,\n      projectSettings: {},\n      builders: [],\n      vercelConfig: null,\n      pkg: null,\n      tag: '',\n      enableFlag: true,\n    });\n    expect(result).toEqual({\n      fsApiBuilder: null,\n      reason:\n        'Detected `GUTENBERG_VERSION` environment variable. Please remove it.',\n      metadata: { hasDotOutput: false, hasMiddleware: false, plugins: [] },\n    });\n    delete process.env.GUTENBERG_VERSION;\n  });","file":"unit.detect-file-system-api.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should error when Go detected without corresponding plugin","suites":["Test `detectFileSystemAPI`"],"updatePoint":{"line":119,"column":64},"line":119,"code":"  it('should error when Go detected without corresponding plugin', async () => {\n    const result = await detectFileSystemAPI({\n      files: { 'api/foo.go': 'print(\"foo\")' },\n      projectSettings: {},\n      builders: [{ use: '@vercel/go', src: 'api/**/*.go' }],\n      vercelConfig: null,\n      pkg: null,\n      tag: '',\n      enableFlag: true,\n    });\n    expect(result).toEqual({\n      fsApiBuilder: null,\n      reason:\n        'Detected `go` Serverless Function usage without plugin `vercel-plugin-go`. Please run `npm i vercel-plugin-go`.',\n      metadata: { hasDotOutput: false, hasMiddleware: false, plugins: [] },\n    });\n  });","file":"unit.detect-file-system-api.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should error when Python detected without corresponding plugin","suites":["Test `detectFileSystemAPI`"],"updatePoint":{"line":137,"column":68},"line":137,"code":"  it('should error when Python detected without corresponding plugin', async () => {\n    const result = await detectFileSystemAPI({\n      files: { 'api/foo.py': 'print(\"foo\")' },\n      projectSettings: {},\n      builders: [{ use: '@vercel/python', src: 'api/**/*.py' }],\n      vercelConfig: null,\n      pkg: null,\n      tag: '',\n      enableFlag: true,\n    });\n    expect(result).toEqual({\n      fsApiBuilder: null,\n      reason:\n        'Detected `python` Serverless Function usage without plugin `vercel-plugin-python`. Please run `npm i vercel-plugin-python`.',\n      metadata: { hasDotOutput: false, hasMiddleware: false, plugins: [] },\n    });\n  });","file":"unit.detect-file-system-api.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should error when Ruby detected without corresponding plugin","suites":["Test `detectFileSystemAPI`"],"updatePoint":{"line":155,"column":66},"line":155,"code":"  it('should error when Ruby detected without corresponding plugin', async () => {\n    const result = await detectFileSystemAPI({\n      files: { 'api/foo.rb': 'print(\"foo\")' },\n      projectSettings: {},\n      builders: [{ use: '@vercel/ruby', src: 'api/**/*.rb' }],\n      vercelConfig: null,\n      pkg: null,\n      tag: '',\n      enableFlag: true,\n    });\n    expect(result).toEqual({\n      fsApiBuilder: null,\n      reason:\n        'Detected `ruby` Serverless Function usage without plugin `vercel-plugin-ruby`. Please run `npm i vercel-plugin-ruby`.',\n      metadata: { hasDotOutput: false, hasMiddleware: false, plugins: [] },\n    });\n  });","file":"unit.detect-file-system-api.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should succeed when Go detected with corresponding plugin","suites":["Test `detectFileSystemAPI`"],"updatePoint":{"line":173,"column":63},"line":173,"code":"  it('should succeed when Go detected with corresponding plugin', async () => {\n    const result = await detectFileSystemAPI({\n      files: { 'api/foo.go': 'print(\"foo\")' },\n      projectSettings: {},\n      builders: [{ use: '@vercel/go', src: 'api/**/*.go' }],\n      vercelConfig: null,\n      pkg: { dependencies: { 'vercel-plugin-go': '^1.0.0' } },\n      tag: '',\n      enableFlag: true,\n    });\n    expect(result).toEqual({\n      fsApiBuilder: {\n        use: '@vercelruntimes/file-system-api',\n        src: '**',\n        config: {\n          fileSystemAPI: true,\n          framework: null,\n          hasDotOutput: false,\n          hasMiddleware: false,\n          projectSettings: {},\n        },\n      },\n      reason: null,\n      metadata: {\n        hasDotOutput: false,\n        hasMiddleware: false,\n        plugins: ['vercel-plugin-go'],\n      },\n    });\n  });","file":"unit.detect-file-system-api.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should succeed when Python detected with corresponding plugin","suites":["Test `detectFileSystemAPI`"],"updatePoint":{"line":204,"column":67},"line":204,"code":"  it('should succeed when Python detected with corresponding plugin', async () => {\n    const result = await detectFileSystemAPI({\n      files: { 'api/foo.py': 'print(\"foo\")' },\n      projectSettings: {},\n      builders: [{ use: '@vercel/python', src: 'api/**/*.py' }],\n      vercelConfig: null,\n      pkg: { dependencies: { 'vercel-plugin-python': '^1.0.0' } },\n      tag: '',\n      enableFlag: true,\n    });\n    expect(result).toEqual({\n      fsApiBuilder: {\n        use: '@vercelruntimes/file-system-api',\n        src: '**',\n        config: {\n          fileSystemAPI: true,\n          framework: null,\n          hasDotOutput: false,\n          hasMiddleware: false,\n          projectSettings: {},\n        },\n      },\n      reason: null,\n      metadata: {\n        hasDotOutput: false,\n        hasMiddleware: false,\n        plugins: ['vercel-plugin-python'],\n      },\n    });\n  });","file":"unit.detect-file-system-api.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should succeed when Ruby detected with corresponding plugin","suites":["Test `detectFileSystemAPI`"],"updatePoint":{"line":235,"column":65},"line":235,"code":"  it('should succeed when Ruby detected with corresponding plugin', async () => {\n    const result = await detectFileSystemAPI({\n      files: { 'api/foo.rb': 'print(\"foo\")' },\n      projectSettings: {},\n      builders: [{ use: '@vercel/ruby', src: 'api/**/*.rb' }],\n      vercelConfig: null,\n      pkg: { dependencies: { 'vercel-plugin-ruby': '^1.0.0' } },\n      tag: '',\n      enableFlag: true,\n    });\n    expect(result).toEqual({\n      fsApiBuilder: {\n        use: '@vercelruntimes/file-system-api',\n        src: '**',\n        config: {\n          fileSystemAPI: true,\n          framework: null,\n          hasDotOutput: false,\n          hasMiddleware: false,\n          projectSettings: {},\n        },\n      },\n      reason: null,\n      metadata: {\n        hasDotOutput: false,\n        hasMiddleware: false,\n        plugins: ['vercel-plugin-ruby'],\n      },\n    });\n  });","file":"unit.detect-file-system-api.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should error when framework is nuxtjs","suites":["Test `detectFileSystemAPI`"],"updatePoint":{"line":266,"column":43},"line":266,"code":"  it('should error when framework is nuxtjs', async () => {\n    const result = await detectFileSystemAPI({\n      files: { 'api/foo.js': 'console.log(\"foo\")' },\n      projectSettings: { framework: 'nuxtjs' },\n      builders: [{ use: '@vercel/node', src: 'api/**/*.js' }],\n      vercelConfig: null,\n      pkg: null,\n      tag: '',\n      enableFlag: true,\n    });\n    expect(result).toEqual({\n      fsApiBuilder: null,\n      reason:\n        'Detected framework `nuxtjs` that only supports legacy File System API. Please contact the framework author.',\n      metadata: { hasDotOutput: false, hasMiddleware: false, plugins: [] },\n    });\n  });","file":"unit.detect-file-system-api.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should error when framework is sveltekit","suites":["Test `detectFileSystemAPI`"],"updatePoint":{"line":284,"column":46},"line":284,"code":"  it('should error when framework is sveltekit', async () => {\n    const result = await detectFileSystemAPI({\n      files: { 'api/foo.js': 'console.log(\"foo\")' },\n      projectSettings: { framework: 'sveltekit' },\n      builders: [{ use: '@vercel/node', src: 'api/**/*.js' }],\n      vercelConfig: null,\n      pkg: null,\n      tag: '',\n      enableFlag: true,\n    });\n    expect(result).toEqual({\n      fsApiBuilder: null,\n      reason:\n        'Detected framework `sveltekit` that only supports legacy File System API. Please contact the framework author.',\n      metadata: { hasDotOutput: false, hasMiddleware: false, plugins: [] },\n    });\n  });","file":"unit.detect-file-system-api.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should error when framework is redwoodjs","suites":["Test `detectFileSystemAPI`"],"updatePoint":{"line":302,"column":46},"line":302,"code":"  it('should error when framework is redwoodjs', async () => {\n    const result = await detectFileSystemAPI({\n      files: { 'api/foo.js': 'console.log(\"foo\")' },\n      projectSettings: { framework: 'redwoodjs' },\n      builders: [{ use: '@vercel/node', src: 'api/**/*.js' }],\n      vercelConfig: null,\n      pkg: null,\n      tag: '',\n      enableFlag: true,\n    });\n    expect(result).toEqual({\n      fsApiBuilder: null,\n      reason:\n        'Detected framework `redwoodjs` that only supports legacy File System API. Please contact the framework author.',\n      metadata: { hasDotOutput: false, hasMiddleware: false, plugins: [] },\n    });\n  });","file":"unit.detect-file-system-api.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should error when framework is nextjs and has output dir","suites":["Test `detectFileSystemAPI`"],"updatePoint":{"line":320,"column":62},"line":320,"code":"  it('should error when framework is nextjs and has output dir', async () => {\n    const result = await detectFileSystemAPI({\n      files: { 'pages/foo.js': 'console.log(\"foo\")' },\n      projectSettings: { framework: 'nextjs', outputDirectory: 'dist' },\n      builders: [{ use: '@vercel/next', src: 'package.json' }],\n      vercelConfig: null,\n      pkg: { dependencies: { next: '^12.0.0' } },\n      tag: '',\n      enableFlag: true,\n    });\n    expect(result).toEqual({\n      fsApiBuilder: null,\n      reason:\n        'Detected Next.js with Output Directory `dist` override. Please change it back to the default.',\n      metadata: { hasDotOutput: false, hasMiddleware: false, plugins: [] },\n    });\n  });","file":"unit.detect-file-system-api.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should error when framework is nextjs but missing from dependencies","suites":["Test `detectFileSystemAPI`"],"updatePoint":{"line":338,"column":73},"line":338,"code":"  it('should error when framework is nextjs but missing from dependencies', async () => {\n    const result = await detectFileSystemAPI({\n      files: { 'pages/foo.js': 'console.log(\"foo\")' },\n      projectSettings: { framework: 'nextjs' },\n      builders: [{ use: '@vercel/next', src: 'package.json' }],\n      vercelConfig: null,\n      pkg: { dependencies: { 'not-next': '^12.0.0' } },\n      tag: '',\n      enableFlag: true,\n    });\n    expect(result).toEqual({\n      fsApiBuilder: null,\n      reason:\n        'Detected Next.js in Project Settings but missing `next` package.json dependencies. Please run `npm i next`.',\n      metadata: { hasDotOutput: false, hasMiddleware: false, plugins: [] },\n    });\n  });","file":"unit.detect-file-system-api.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should error when framework is nextjs but dependency is older version","suites":["Test `detectFileSystemAPI`"],"updatePoint":{"line":356,"column":75},"line":356,"code":"  it('should error when framework is nextjs but dependency is older version', async () => {\n    const result = await detectFileSystemAPI({\n      files: { 'pages/foo.js': 'console.log(\"foo\")' },\n      projectSettings: { framework: 'nextjs' },\n      builders: [{ use: '@vercel/next', src: 'package.json' }],\n      vercelConfig: null,\n      pkg: { dependencies: { next: '^9.0.0' } },\n      tag: '',\n      enableFlag: true,\n    });\n    expect(result).toEqual({\n      fsApiBuilder: null,\n      reason:\n        'Detected legacy Next.js version \"^9.0.0\" in package.json. Please run `npm i next@latest` to upgrade.',\n      metadata: { hasDotOutput: false, hasMiddleware: false, plugins: [] },\n    });\n  });","file":"unit.detect-file-system-api.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should error when vercel cli is older version","suites":["Test `detectFileSystemAPI`"],"updatePoint":{"line":374,"column":51},"line":374,"code":"  it('should error when vercel cli is older version', async () => {\n    const result = await detectFileSystemAPI({\n      files: { 'pages/foo.js': 'console.log(\"foo\")' },\n      projectSettings: { framework: 'nextjs' },\n      builders: [{ use: '@vercel/next', src: 'package.json' }],\n      vercelConfig: null,\n      pkg: { dependencies: { next: '^12.1.0', vercel: '^23.1.1' } },\n      tag: '',\n      enableFlag: true,\n    });\n    expect(result).toEqual({\n      fsApiBuilder: null,\n      reason:\n        'Detected legacy Vercel CLI version \"^23.1.1\" in package.json. Please run `npm i vercel@latest` to upgrade.',\n      metadata: { hasDotOutput: false, hasMiddleware: false, plugins: [] },\n    });\n  });","file":"unit.detect-file-system-api.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should succeed when middleware detected","suites":["Test `detectFileSystemAPI`"],"updatePoint":{"line":392,"column":45},"line":392,"code":"  it('should succeed when middleware detected', async () => {\n    const result = await detectFileSystemAPI({\n      files: { '_middleware.js': 'print(\"foo\")' },\n      projectSettings: {},\n      builders: [{ use: '@vercel/static-build', src: 'package.json' }],\n      vercelConfig: null,\n      pkg: null,\n      tag: '',\n      enableFlag: false,\n    });\n    expect(result).toEqual({\n      fsApiBuilder: {\n        use: '@vercelruntimes/file-system-api',\n        src: '**',\n        config: {\n          fileSystemAPI: true,\n          framework: null,\n          hasDotOutput: false,\n          hasMiddleware: true,\n          projectSettings: {},\n        },\n      },\n      reason: null,\n      metadata: { hasDotOutput: false, hasMiddleware: true, plugins: [] },\n    });\n  });","file":"unit.detect-file-system-api.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should succeed when .output detected","suites":["Test `detectFileSystemAPI`"],"updatePoint":{"line":419,"column":42},"line":419,"code":"  it('should succeed when .output detected', async () => {\n    const result = await detectFileSystemAPI({\n      files: { '.output/routes-manifest.json': '{}' },\n      projectSettings: { framework: 'remix' },\n      builders: [{ use: '@vercel/static-build', src: 'package.json' }],\n      vercelConfig: null,\n      pkg: null,\n      tag: '',\n      enableFlag: false,\n    });\n    expect(result).toEqual({\n      fsApiBuilder: {\n        use: '@vercelruntimes/file-system-api',\n        src: '**',\n        config: {\n          fileSystemAPI: true,\n          framework: 'remix',\n          hasDotOutput: true,\n          hasMiddleware: false,\n          projectSettings: { framework: 'remix' },\n        },\n      },\n      reason: null,\n      metadata: { hasDotOutput: true, hasMiddleware: false, plugins: [] },\n    });\n  });","file":"unit.detect-file-system-api.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"Do not detect anything","suites":["#detectFramework"],"updatePoint":{"line":46,"column":28},"line":46,"code":"  it('Do not detect anything', async () => {\n    const fs = new VirtualFilesystem({\n      'README.md': '# hi',\n      'api/cheese.js': 'export default (req, res) => res.end(\"cheese\");',\n    });\n\n    expect(await detectFramework({ fs, frameworkList })).toBe(null);\n  });","file":"unit.framework-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"Detect Next.js","suites":["#detectFramework"],"updatePoint":{"line":55,"column":20},"line":55,"code":"  it('Detect Next.js', async () => {\n    const fs = new VirtualFilesystem({\n      'package.json': JSON.stringify({\n        dependencies: {\n          next: '9.0.0',\n        },\n      }),\n    });\n\n    expect(await detectFramework({ fs, frameworkList })).toBe('nextjs');\n  });","file":"unit.framework-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"Detect Nuxt.js","suites":["#detectFramework"],"updatePoint":{"line":67,"column":20},"line":67,"code":"  it('Detect Nuxt.js', async () => {\n    const fs = new VirtualFilesystem({\n      'package.json': JSON.stringify({\n        dependencies: {\n          nuxt: '1.0.0',\n        },\n      }),\n    });\n\n    expect(await detectFramework({ fs, frameworkList })).toBe('nuxtjs');\n  });","file":"unit.framework-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"Detect Gatsby","suites":["#detectFramework"],"updatePoint":{"line":79,"column":19},"line":79,"code":"  it('Detect Gatsby', async () => {\n    const fs = new VirtualFilesystem({\n      'package.json': JSON.stringify({\n        dependencies: {\n          gatsby: '1.0.0',\n        },\n      }),\n    });\n\n    expect(await detectFramework({ fs, frameworkList })).toBe('gatsby');\n  });","file":"unit.framework-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"Detect Hugo #1","suites":["#detectFramework"],"updatePoint":{"line":91,"column":20},"line":91,"code":"  it('Detect Hugo #1', async () => {\n    const fs = new VirtualFilesystem({\n      'config.yaml': 'baseURL: http://example.org/',\n      'content/post.md': '# hello world',\n    });\n\n    expect(await detectFramework({ fs, frameworkList })).toBe('hugo');\n  });","file":"unit.framework-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"Detect Hugo #2","suites":["#detectFramework"],"updatePoint":{"line":100,"column":20},"line":100,"code":"  it('Detect Hugo #2', async () => {\n    const fs = new VirtualFilesystem({\n      'config.json': '{ \"baseURL\": \"http://example.org/\" }',\n      'content/post.md': '# hello world',\n    });\n\n    expect(await detectFramework({ fs, frameworkList })).toBe('hugo');\n  });","file":"unit.framework-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"Detect Hugo #3","suites":["#detectFramework"],"updatePoint":{"line":109,"column":20},"line":109,"code":"  it('Detect Hugo #3', async () => {\n    const fs = new VirtualFilesystem({\n      'config.toml': 'baseURL = \"http://example.org/\"',\n      'content/post.md': '# hello world',\n    });\n\n    expect(await detectFramework({ fs, frameworkList })).toBe('hugo');\n  });","file":"unit.framework-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"Detect Jekyll","suites":["#detectFramework"],"updatePoint":{"line":118,"column":19},"line":118,"code":"  it('Detect Jekyll', async () => {\n    const fs = new VirtualFilesystem({\n      '_config.yml': 'config',\n    });\n\n    expect(await detectFramework({ fs, frameworkList })).toBe('jekyll');\n  });","file":"unit.framework-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"Detect Middleman","suites":["#detectFramework"],"updatePoint":{"line":126,"column":22},"line":126,"code":"  it('Detect Middleman', async () => {\n    const fs = new VirtualFilesystem({\n      'config.rb': 'config',\n    });\n\n    expect(await detectFramework({ fs, frameworkList })).toBe('middleman');\n  });","file":"unit.framework-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"Detect Scully","suites":["#detectFramework"],"updatePoint":{"line":134,"column":19},"line":134,"code":"  it('Detect Scully', async () => {\n    const fs = new VirtualFilesystem({\n      'package.json': JSON.stringify({\n        dependencies: {\n          '@angular/cli': 'latest',\n          '@scullyio/init': 'latest',\n        },\n      }),\n    });\n\n    expect(await detectFramework({ fs, frameworkList })).toBe('scully');\n  });","file":"unit.framework-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"Detect Zola","suites":["#detectFramework"],"updatePoint":{"line":147,"column":17},"line":147,"code":"  it('Detect Zola', async () => {\n    const fs = new VirtualFilesystem({\n      'config.toml': 'base_url = \"/\"',\n    });\n\n    expect(await detectFramework({ fs, frameworkList })).toBe('zola');\n  });","file":"unit.framework-detector.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should support `VERCEL_` prefix","suites":["Test `getPlatformEnv()`"],"updatePoint":{"line":5,"column":37},"line":5,"code":"  it('should support `VERCEL_` prefix', () => {\n    try {\n      assert.equal(undefined, getPlatformEnv('FOO'));\n\n      process.env.VERCEL_FOO = 'bar';\n      assert.equal('bar', getPlatformEnv('FOO'));\n    } finally {\n      delete process.env.VERCEL_FOO;\n    }\n  });","file":"unit.get-platform-env.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should support `NOW_` prefix","suites":["Test `getPlatformEnv()`"],"updatePoint":{"line":16,"column":34},"line":16,"code":"  it('should support `NOW_` prefix', () => {\n    try {\n      assert.equal(undefined, getPlatformEnv('FOO'));\n\n      process.env.NOW_FOO = 'bar';\n      assert.equal('bar', getPlatformEnv('FOO'));\n    } finally {\n      delete process.env.NOW_FOO;\n    }\n  });","file":"unit.get-platform-env.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should throw an error if both env vars exist","suites":["Test `getPlatformEnv()`"],"updatePoint":{"line":27,"column":50},"line":27,"code":"  it('should throw an error if both env vars exist', () => {\n    let err: Error | null = null;\n    try {\n      process.env.NOW_FOO = 'bar';\n      process.env.VERCEL_FOO = 'baz';\n      getPlatformEnv('FOO');\n    } catch (_err) {\n      err = _err;\n    } finally {\n      delete process.env.NOW_FOO;\n      delete process.env.VERCEL_FOO;\n    }\n    assert(err);\n    assert.equal(\n      err!.message,\n      'Both \"VERCEL_FOO\" and \"NOW_FOO\" env vars are defined. Please only define the \"VERCEL_FOO\" env var.'\n    );\n  });","file":"unit.get-platform-env.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should return \"vercel-*\"","suites":["Test `getScriptName()`"],"updatePoint":{"line":5,"column":30},"line":5,"code":"  it('should return \"vercel-*\"', () => {\n    const pkg = {\n      scripts: {\n        'vercel-dev': '',\n        'vercel-build': '',\n        dev: '',\n        build: '',\n      },\n    };\n    assert.equal(\n      getScriptName(pkg, ['vercel-dev', 'now-dev', 'dev']),\n      'vercel-dev'\n    );\n    assert.equal(\n      getScriptName(pkg, ['vercel-build', 'now-build', 'build']),\n      'vercel-build'\n    );\n    assert.equal(getScriptName(pkg, ['dev']), 'dev');\n    assert.equal(getScriptName(pkg, ['build']), 'build');\n  });","file":"unit.get-script-name.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should return \"now-*\"","suites":["Test `getScriptName()`"],"updatePoint":{"line":26,"column":27},"line":26,"code":"  it('should return \"now-*\"', () => {\n    const pkg = {\n      scripts: {\n        'now-dev': '',\n        'now-build': '',\n        dev: '',\n        build: '',\n      },\n    };\n    assert.equal(\n      getScriptName(pkg, ['vercel-dev', 'now-dev', 'dev']),\n      'now-dev'\n    );\n    assert.equal(\n      getScriptName(pkg, ['vercel-build', 'now-build', 'build']),\n      'now-build'\n    );\n    assert.equal(getScriptName(pkg, ['dev']), 'dev');\n    assert.equal(getScriptName(pkg, ['build']), 'build');\n  });","file":"unit.get-script-name.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should return base script name","suites":["Test `getScriptName()`"],"updatePoint":{"line":47,"column":36},"line":47,"code":"  it('should return base script name', () => {\n    const pkg = {\n      scripts: {\n        dev: '',\n        build: '',\n      },\n    };\n    assert.equal(getScriptName(pkg, ['dev']), 'dev');\n    assert.equal(getScriptName(pkg, ['build']), 'build');\n  });","file":"unit.get-script-name.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should return `null`","suites":["Test `getScriptName()`"],"updatePoint":{"line":58,"column":26},"line":58,"code":"  it('should return `null`', () => {\n    assert.equal(getScriptName(undefined, ['build']), null);\n    assert.equal(getScriptName({}, ['build']), null);\n    assert.equal(getScriptName({ scripts: {} }, ['build']), null);\n\n    const pkg = {\n      scripts: {\n        dev: '',\n        build: '',\n      },\n    };\n    assert.equal(getScriptName(pkg, ['vercel-dev', 'now-dev']), null);\n    assert.equal(getScriptName(pkg, ['vercel-build', 'now-build']), null);\n  });","file":"unit.get-script-name.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should be correct","suites":["Test `isOfficialRuntime()`"],"updatePoint":{"line":5,"column":23},"line":5,"code":"  it('should be correct', () => {\n    assert.equal(true, isOfficialRuntime('static', '@vercel/static'));\n    assert.equal(true, isOfficialRuntime('static', '@now/static'));\n    assert.equal(false, isOfficialRuntime('static', '@vercel/static-build'));\n    assert.equal(false, isOfficialRuntime('static', '@now/static-build'));\n\n    assert.equal(true, isOfficialRuntime('node', '@vercel/node'));\n    assert.equal(true, isOfficialRuntime('node', '@now/node'));\n    assert.equal(true, isOfficialRuntime('node', '@vercel/node@1.0.0'));\n    assert.equal(true, isOfficialRuntime('node', '@now/node@1.0.0'));\n    assert.equal(false, isOfficialRuntime('node', '@my-fork/node'));\n    assert.equal(false, isOfficialRuntime('node', '@now/node-server'));\n\n    assert.equal(\n      true,\n      isOfficialRuntime('static-build', '@vercel/static-build')\n    );\n    assert.equal(true, isOfficialRuntime('static-build', '@now/static-build'));\n    assert.equal(\n      true,\n      isOfficialRuntime('static-build', '@vercel/static-build@1.0.0')\n    );\n    assert.equal(false, isOfficialRuntime('static-build', '@vercel/static'));\n    assert.equal(false, isOfficialRuntime('static-build', '@now/static'));\n  });","file":"unit.is-official-runtime.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should be correct","suites":["Test `isStaticRuntime()`"],"updatePoint":{"line":33,"column":23},"line":33,"code":"  it('should be correct', () => {\n    assert.equal(true, isStaticRuntime('@vercel/static'));\n    assert.equal(true, isStaticRuntime('@now/static'));\n    assert.equal(false, isStaticRuntime('@vercel/static-build'));\n    assert.equal(false, isStaticRuntime('@now/static-build'));\n    assert.equal(false, isStaticRuntime('@now/node'));\n  });","file":"unit.is-official-runtime.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should create an instance","suites":["Test `NodejsLambda`"],"updatePoint":{"line":4,"column":31},"line":4,"code":"  it('should create an instance', () => {\n    const helloSrc = 'module.exports = (req, res) => res.end(\"hi\");';\n    const lambda = new NodejsLambda({\n      files: {\n        'api/hello.js': new FileBlob({ data: helloSrc }),\n      },\n      handler: 'api/hello.js',\n      runtime: 'node14.x',\n      shouldAddHelpers: true,\n      shouldAddSourcemapSupport: false,\n    });\n    expect(lambda.handler).toEqual('api/hello.js');\n    expect(lambda.runtime).toEqual('node14.x');\n    expect(lambda.shouldAddHelpers).toEqual(true);\n    expect(lambda.shouldAddSourcemapSupport).toEqual(false);\n    expect(lambda.awsLambdaHandler).toBeUndefined();\n  });","file":"unit.nodejs-lambda.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should re-create FileFsRef symlinks properly","suites":[],"updatePoint":{"line":52,"column":48},"line":52,"code":"it('should re-create FileFsRef symlinks properly', async () => {\n  if (process.platform === 'win32') {\n    console.log('Skipping test on windows');\n    return;\n  }\n  const files = await glob('**', path.join(__dirname, 'symlinks'));\n  assert.equal(Object.keys(files).length, 4);\n\n  const outDir = path.join(__dirname, 'symlinks-out');\n  await fs.remove(outDir);\n\n  const files2 = await download(files, outDir);\n  assert.equal(Object.keys(files2).length, 4);\n\n  const [linkStat, linkDirStat, aStat] = await Promise.all([\n    fs.lstat(path.join(outDir, 'link.txt')),\n    fs.lstat(path.join(outDir, 'link-dir')),\n    fs.lstat(path.join(outDir, 'a.txt')),\n  ]);\n  assert(linkStat.isSymbolicLink());\n  assert(linkDirStat.isSymbolicLink());\n  assert(aStat.isFile());\n\n  const [linkDirContents, linkTextContents] = await Promise.all([\n    readlink(path.join(outDir, 'link-dir')),\n    readlink(path.join(outDir, 'link.txt')),\n  ]);\n\n  strictEqual(linkDirContents, 'dir');\n  strictEqual(linkTextContents, './a.txt');\n});","file":"unit.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should re-create FileBlob symlinks properly","suites":[],"updatePoint":{"line":84,"column":47},"line":84,"code":"it('should re-create FileBlob symlinks properly', async () => {\n  if (process.platform === 'win32') {\n    console.log('Skipping test on windows');\n    return;\n  }\n\n  const files = {\n    'a.txt': new FileBlob({\n      mode: 33188,\n      contentType: undefined,\n      data: 'a text',\n    }),\n    'dir/b.txt': new FileBlob({\n      mode: 33188,\n      contentType: undefined,\n      data: 'b text',\n    }),\n    'link-dir': new FileBlob({\n      mode: 41453,\n      contentType: undefined,\n      data: 'dir',\n    }),\n    'link.txt': new FileBlob({\n      mode: 41453,\n      contentType: undefined,\n      data: 'a.txt',\n    }),\n  };\n\n  strictEqual(Object.keys(files).length, 4);\n\n  const outDir = path.join(__dirname, 'symlinks-out');\n  await fs.remove(outDir);\n\n  const files2 = await download(files, outDir);\n  strictEqual(Object.keys(files2).length, 4);\n\n  const [linkStat, linkDirStat, aStat, dirStat] = await Promise.all([\n    fs.lstat(path.join(outDir, 'link.txt')),\n    fs.lstat(path.join(outDir, 'link-dir')),\n    fs.lstat(path.join(outDir, 'a.txt')),\n    fs.lstat(path.join(outDir, 'dir')),\n  ]);\n\n  assert(linkStat.isSymbolicLink());\n  assert(linkDirStat.isSymbolicLink());\n  assert(aStat.isFile());\n  assert(dirStat.isDirectory());\n\n  const [linkDirContents, linkTextContents] = await Promise.all([\n    readlink(path.join(outDir, 'link-dir')),\n    readlink(path.join(outDir, 'link.txt')),\n  ]);\n\n  strictEqual(linkDirContents, 'dir');\n  strictEqual(linkTextContents, 'a.txt');\n});","file":"unit.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should create zip files with symlinks properly","suites":[],"updatePoint":{"line":142,"column":50},"line":142,"code":"it('should create zip files with symlinks properly', async () => {\n  if (process.platform === 'win32') {\n    console.log('Skipping test on windows');\n    return;\n  }\n  const files = await glob('**', path.join(__dirname, 'symlinks'));\n  assert.equal(Object.keys(files).length, 4);\n\n  const outFile = path.join(__dirname, 'symlinks.zip');\n  await fs.remove(outFile);\n\n  const outDir = path.join(__dirname, 'symlinks-out');\n  await fs.remove(outDir);\n  await fs.mkdirp(outDir);\n\n  await fs.writeFile(outFile, await createZip(files));\n  await spawnAsync('unzip', [outFile], { cwd: outDir });\n\n  const [linkStat, linkDirStat, aStat] = await Promise.all([\n    fs.lstat(path.join(outDir, 'link.txt')),\n    fs.lstat(path.join(outDir, 'link-dir')),\n    fs.lstat(path.join(outDir, 'a.txt')),\n  ]);\n  assert(linkStat.isSymbolicLink());\n  assert(linkDirStat.isSymbolicLink());\n  assert(aStat.isFile());\n});","file":"unit.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should only match supported node versions, otherwise throw an error","suites":[],"updatePoint":{"line":170,"column":71},"line":170,"code":"it('should only match supported node versions, otherwise throw an error', async () => {\n  expect(await getSupportedNodeVersion('12.x', false)).toHaveProperty(\n    'major',\n    12\n  );\n  expect(await getSupportedNodeVersion('14.x', false)).toHaveProperty(\n    'major',\n    14\n  );\n\n  const autoMessage =\n    'Please set Node.js Version to 14.x in your Project Settings to use Node.js 14.';\n  await expectBuilderError(\n    getSupportedNodeVersion('8.11.x', true),\n    autoMessage\n  );\n  await expectBuilderError(getSupportedNodeVersion('6.x', true), autoMessage);\n  await expectBuilderError(getSupportedNodeVersion('999.x', true), autoMessage);\n  await expectBuilderError(getSupportedNodeVersion('foo', true), autoMessage);\n  await expectBuilderError(getSupportedNodeVersion('=> 10', true), autoMessage);\n\n  expect(await getSupportedNodeVersion('12.x', true)).toHaveProperty(\n    'major',\n    12\n  );\n  expect(await getSupportedNodeVersion('14.x', true)).toHaveProperty(\n    'major',\n    14\n  );\n\n  const foundMessage =\n    'Please set \"engines\": { \"node\": \"14.x\" } in your `package.json` file to use Node.js 14.';\n  await expectBuilderError(\n    getSupportedNodeVersion('8.11.x', false),\n    foundMessage\n  );\n  await expectBuilderError(getSupportedNodeVersion('6.x', false), foundMessage);\n  await expectBuilderError(\n    getSupportedNodeVersion('999.x', false),\n    foundMessage\n  );\n  await expectBuilderError(getSupportedNodeVersion('foo', false), foundMessage);\n  await expectBuilderError(\n    getSupportedNodeVersion('=> 10', false),\n    foundMessage\n  );\n});","file":"unit.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should match all semver ranges","suites":[],"updatePoint":{"line":218,"column":34},"line":218,"code":"it('should match all semver ranges', async () => {\n  // See https://docs.npmjs.com/files/package.json#engines\n  expect(await getSupportedNodeVersion('12.0.0')).toHaveProperty('major', 12);\n  expect(await getSupportedNodeVersion('12.x')).toHaveProperty('major', 12);\n  expect(await getSupportedNodeVersion('>=10')).toHaveProperty('major', 14);\n  expect(await getSupportedNodeVersion('>=10.3.0')).toHaveProperty('major', 14);\n  expect(await getSupportedNodeVersion('11.5.0 - 12.5.0')).toHaveProperty(\n    'major',\n    12\n  );\n  expect(await getSupportedNodeVersion('>=9.5.0 <=12.5.0')).toHaveProperty(\n    'major',\n    12\n  );\n  expect(await getSupportedNodeVersion('~12.5.0')).toHaveProperty('major', 12);\n  expect(await getSupportedNodeVersion('^12.5.0')).toHaveProperty('major', 12);\n});","file":"unit.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should ignore node version in vercel dev getNodeVersion()","suites":[],"updatePoint":{"line":236,"column":61},"line":236,"code":"it('should ignore node version in vercel dev getNodeVersion()', async () => {\n  expect(\n    await getNodeVersion(\n      '/tmp',\n      undefined,\n      { nodeVersion: '1' },\n      { isDev: true }\n    )\n  ).toHaveProperty('runtime', 'nodejs');\n});","file":"unit.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should select project setting from config when no package.json is found","suites":[],"updatePoint":{"line":247,"column":75},"line":247,"code":"it('should select project setting from config when no package.json is found', async () => {\n  expect(\n    await getNodeVersion('/tmp', undefined, { nodeVersion: '14.x' }, {})\n  ).toHaveProperty('range', '14.x');\n  expect(warningMessages).toStrictEqual([]);\n});","file":"unit.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should prefer package.json engines over project setting from config and warn","suites":[],"updatePoint":{"line":254,"column":80},"line":254,"code":"it('should prefer package.json engines over project setting from config and warn', async () => {\n  expect(\n    await getNodeVersion(\n      path.join(__dirname, 'pkg-engine-node'),\n      undefined,\n      { nodeVersion: '12.x' },\n      {}\n    )\n  ).toHaveProperty('range', '14.x');\n  expect(warningMessages).toStrictEqual([\n    'Warning: Due to \"engines\": { \"node\": \"14.x\" } in your `package.json` file, the Node.js Version defined in your Project Settings (\"12.x\") will not apply. Learn More: http://vercel.link/node-version',\n  ]);\n});","file":"unit.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should not warn when package.json engines matches project setting from config","suites":[],"updatePoint":{"line":268,"column":81},"line":268,"code":"it('should not warn when package.json engines matches project setting from config', async () => {\n  expect(\n    await getNodeVersion(\n      path.join(__dirname, 'pkg-engine-node'),\n      undefined,\n      { nodeVersion: '14.x' },\n      {}\n    )\n  ).toHaveProperty('range', '14.x');\n  expect(warningMessages).toStrictEqual([]);\n});","file":"unit.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should get latest node version","suites":[],"updatePoint":{"line":280,"column":34},"line":280,"code":"it('should get latest node version', async () => {\n  expect(getLatestNodeVersion()).toHaveProperty('major', 14);\n});","file":"unit.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should throw for discontinued versions","suites":[],"updatePoint":{"line":284,"column":42},"line":284,"code":"it('should throw for discontinued versions', async () => {\n  // Mock a future date so that Node 8 and 10 become discontinued\n  const realDateNow = Date.now.bind(global.Date);\n  global.Date.now = () => new Date('2021-05-01').getTime();\n\n  expect(getSupportedNodeVersion('8.10.x', false)).rejects.toThrow();\n  expect(getSupportedNodeVersion('8.10.x', true)).rejects.toThrow();\n  expect(getSupportedNodeVersion('10.x', false)).rejects.toThrow();\n  expect(getSupportedNodeVersion('10.x', true)).rejects.toThrow();\n\n  const discontinued = getDiscontinuedNodeVersions();\n  expect(discontinued.length).toBe(2);\n  expect(discontinued[0]).toHaveProperty('range', '10.x');\n  expect(discontinued[1]).toHaveProperty('range', '8.10.x');\n\n  global.Date.now = realDateNow;\n});","file":"unit.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should warn for deprecated versions, soon to be discontinued","suites":[],"updatePoint":{"line":302,"column":64},"line":302,"code":"it('should warn for deprecated versions, soon to be discontinued', async () => {\n  // Mock a future date so that Node 10 warns\n  const realDateNow = Date.now.bind(global.Date);\n  global.Date.now = () => new Date('2021-02-23').getTime();\n\n  expect(await getSupportedNodeVersion('10.x', false)).toHaveProperty(\n    'major',\n    10\n  );\n  expect(await getSupportedNodeVersion('10.x', true)).toHaveProperty(\n    'major',\n    10\n  );\n  expect(warningMessages).toStrictEqual([\n    'Error: Node.js version 10.x is deprecated. Deployments created on or after 2021-04-20 will fail to build. Please set \"engines\": { \"node\": \"14.x\" } in your `package.json` file to use Node.js 14. This change is the result of a decision made by an upstream infrastructure provider (AWS).',\n    'Error: Node.js version 10.x is deprecated. Deployments created on or after 2021-04-20 will fail to build. Please set Node.js Version to 14.x in your Project Settings to use Node.js 14. This change is the result of a decision made by an upstream infrastructure provider (AWS).',\n  ]);\n\n  global.Date.now = realDateNow;\n});","file":"unit.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should support require by path for legacy builders","suites":[],"updatePoint":{"line":323,"column":54},"line":323,"code":"it('should support require by path for legacy builders', () => {\n  const index = require('@vercel/build-utils');\n\n  const download2 = require('@vercel/build-utils/fs/download.js');\n  const getWriteableDirectory2 = require('@vercel/build-utils/fs/get-writable-directory.js');\n  const glob2 = require('@vercel/build-utils/fs/glob.js');\n  const rename2 = require('@vercel/build-utils/fs/rename.js');\n  const {\n    runNpmInstall: runNpmInstall2,\n  } = require('@vercel/build-utils/fs/run-user-scripts.js');\n  const streamToBuffer2 = require('@vercel/build-utils/fs/stream-to-buffer.js');\n\n  const FileBlob2 = require('@vercel/build-utils/file-blob.js');\n  const FileFsRef2 = require('@vercel/build-utils/file-fs-ref.js');\n  const FileRef2 = require('@vercel/build-utils/file-ref.js');\n  const { Lambda: Lambda2 } = require('@vercel/build-utils/lambda.js');\n\n  expect(download2).toBe(index.download);\n  expect(getWriteableDirectory2).toBe(index.getWriteableDirectory);\n  expect(glob2).toBe(index.glob);\n  expect(rename2).toBe(index.rename);\n  expect(runNpmInstall2).toBe(index.runNpmInstall);\n  expect(streamToBuffer2).toBe(index.streamToBuffer);\n\n  expect(FileBlob2).toBe(index.FileBlob);\n  expect(FileFsRef2).toBe(index.FileFsRef);\n  expect(FileRef2).toBe(index.FileRef);\n  expect(Lambda2).toBe(index.Lambda);\n});","file":"unit.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should have correct $PATH when running `runPackageJsonScript()` with yarn","suites":[],"updatePoint":{"line":354,"column":76},"line":353,"code":"it(\n  'should have correct $PATH when running `runPackageJsonScript()` with yarn',\n  async () => {\n    if (process.platform === 'win32') {\n      console.log('Skipping test on windows');\n      return;\n    }\n    if (process.platform === 'darwin') {\n      console.log('Skipping test on macOS');\n      return;\n    }\n    const fixture = path.join(__dirname, 'fixtures', '19-yarn-v2');\n    await runNpmInstall(fixture);\n    await runPackageJsonScript(fixture, 'env');\n\n    // `yarn` was failing with ENOENT before, so as long as the\n    // script was invoked at all is enough to verify the fix\n    const out = await fs.readFile(path.join(fixture, 'env.txt'), 'utf8');\n    expect(out.trim()).toBeTruthy();\n  },\n  ms('1m')\n);","file":"unit.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should return lockfileVersion 2 with npm7","suites":[],"updatePoint":{"line":376,"column":45},"line":376,"code":"it('should return lockfileVersion 2 with npm7', async () => {\n  const fixture = path.join(__dirname, 'fixtures', '20-npm-7');\n  const result = await scanParentDirs(fixture);\n  expect(result.cliType).toEqual('npm');\n  expect(result.lockfileVersion).toEqual(2);\n});","file":"unit.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should not return lockfileVersion with yarn","suites":[],"updatePoint":{"line":383,"column":47},"line":383,"code":"it('should not return lockfileVersion with yarn', async () => {\n  const fixture = path.join(__dirname, 'fixtures', '19-yarn-v2');\n  const result = await scanParentDirs(fixture);\n  expect(result.cliType).toEqual('yarn');\n  expect(result.lockfileVersion).toEqual(undefined);\n});","file":"unit.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should return lockfileVersion 1 with older versions of npm","suites":[],"updatePoint":{"line":390,"column":62},"line":390,"code":"it('should return lockfileVersion 1 with older versions of npm', async () => {\n  const fixture = path.join(__dirname, 'fixtures', '08-yarn-npm/with-npm');\n  const result = await scanParentDirs(fixture);\n  expect(result.cliType).toEqual('npm');\n  expect(result.lockfileVersion).toEqual(1);\n});","file":"unit.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should detect npm Workspaces","suites":[],"updatePoint":{"line":397,"column":32},"line":397,"code":"it('should detect npm Workspaces', async () => {\n  const fixture = path.join(__dirname, 'fixtures', '21-npm-workspaces/a');\n  const result = await scanParentDirs(fixture);\n  expect(result.cliType).toEqual('npm');\n  expect(result.lockfileVersion).toEqual(2);\n});","file":"unit.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should detect pnpm","suites":[],"updatePoint":{"line":404,"column":22},"line":404,"code":"it('should detect pnpm', async () => {\n  const fixture = path.join(__dirname, 'fixtures', '22-pnpm');\n  const result = await scanParentDirs(fixture);\n  expect(result.cliType).toEqual('pnpm');\n  expect(result.lockfileVersion).toEqual(5.3);\n});","file":"unit.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should detect pnpm Workspaces","suites":[],"updatePoint":{"line":411,"column":33},"line":411,"code":"it('should detect pnpm Workspaces', async () => {\n  const fixture = path.join(__dirname, 'fixtures', '23-pnpm-workspaces/a');\n  const result = await scanParentDirs(fixture);\n  expect(result.cliType).toEqual('pnpm');\n  expect(result.lockfileVersion).toEqual(5.3);\n});","file":"unit.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should only invoke `runNpmInstall()` once per `package.json` file (serial)","suites":[],"updatePoint":{"line":418,"column":78},"line":418,"code":"it('should only invoke `runNpmInstall()` once per `package.json` file (serial)', async () => {\n  const meta: Meta = {};\n  const fixture = path.join(__dirname, 'fixtures', '02-zero-config-api');\n  const apiDir = path.join(fixture, 'api');\n  const run1 = await runNpmInstall(apiDir, [], undefined, meta);\n  expect(run1).toEqual(true);\n  expect(\n    (meta.runNpmInstallSet as Set<string>).has(\n      path.join(fixture, 'package.json')\n    )\n  ).toEqual(true);\n  const run2 = await runNpmInstall(apiDir, [], undefined, meta);\n  expect(run2).toEqual(false);\n  const run3 = await runNpmInstall(fixture, [], undefined, meta);\n  expect(run3).toEqual(false);\n});","file":"unit.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should only invoke `runNpmInstall()` once per `package.json` file (parallel)","suites":[],"updatePoint":{"line":435,"column":80},"line":435,"code":"it('should only invoke `runNpmInstall()` once per `package.json` file (parallel)', async () => {\n  const meta: Meta = {};\n  const fixture = path.join(__dirname, 'fixtures', '02-zero-config-api');\n  const apiDir = path.join(fixture, 'api');\n  const [run1, run2, run3] = await Promise.all([\n    runNpmInstall(apiDir, [], undefined, meta),\n    runNpmInstall(apiDir, [], undefined, meta),\n    runNpmInstall(fixture, [], undefined, meta),\n  ]);\n  expect(run1).toEqual(true);\n  expect(run2).toEqual(false);\n  expect(run3).toEqual(false);\n  expect(\n    (meta.runNpmInstallSet as Set<string>).has(\n      path.join(fixture, 'package.json')\n    )\n  ).toEqual(true);\n});","file":"unit.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should throw when `base` is relative","suites":["Test `walkParentDirs`"],"updatePoint":{"line":17,"column":42},"line":17,"code":"  it('should throw when `base` is relative', async () => {\n    const base = './relative';\n    const start = __dirname;\n    try {\n      await walkParentDirs({ base, start, filename });\n      fail('Expected error');\n    } catch (error) {\n      deepEqual(\n        (error as Error).message,\n        'Expected \"base\" to be absolute path'\n      );\n    }\n  });","file":"unit.walk.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should throw when `start` is relative","suites":["Test `walkParentDirs`"],"updatePoint":{"line":31,"column":43},"line":31,"code":"  it('should throw when `start` is relative', async () => {\n    const base = __dirname;\n    const start = './relative';\n    try {\n      await walkParentDirs({ base, start, filename });\n      fail('Expected error');\n    } catch (error) {\n      deepEqual(\n        (error as Error).message,\n        'Expected \"start\" to be absolute path'\n      );\n    }\n  });","file":"unit.walk.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should find nested one","suites":["Test `walkParentDirs`"],"updatePoint":{"line":45,"column":28},"line":45,"code":"  it('should find nested one', async () => {\n    const base = fixture('every-directory');\n    const start = base;\n    const target = await walkParentDirs({ base, start, filename });\n    await assertContent(target, 'First');\n  });","file":"unit.walk.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should find nested two","suites":["Test `walkParentDirs`"],"updatePoint":{"line":52,"column":28},"line":52,"code":"  it('should find nested two', async () => {\n    const base = fixture('every-directory');\n    const start = join(base, 'two');\n    const target = await walkParentDirs({ base, start, filename });\n    await assertContent(target, 'Second');\n  });","file":"unit.walk.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should find nested three","suites":["Test `walkParentDirs`"],"updatePoint":{"line":59,"column":30},"line":59,"code":"  it('should find nested three', async () => {\n    const base = fixture('every-directory');\n    const start = join(base, 'two', 'three');\n    const target = await walkParentDirs({ base, start, filename });\n    await assertContent(target, 'Third');\n  });","file":"unit.walk.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should not find nested one","suites":["Test `walkParentDirs`"],"updatePoint":{"line":66,"column":32},"line":66,"code":"  it('should not find nested one', async () => {\n    const base = fixture('not-found');\n    const start = base;\n    const target = await walkParentDirs({ base, start, filename });\n    deepEqual(target, null);\n  });","file":"unit.walk.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should not find nested two","suites":["Test `walkParentDirs`"],"updatePoint":{"line":73,"column":32},"line":73,"code":"  it('should not find nested two', async () => {\n    const base = fixture('not-found');\n    const start = join(base, 'two');\n    const target = await walkParentDirs({ base, start, filename });\n    deepEqual(target, null);\n  });","file":"unit.walk.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should not find nested three","suites":["Test `walkParentDirs`"],"updatePoint":{"line":80,"column":34},"line":80,"code":"  it('should not find nested three', async () => {\n    const base = fixture('not-found');\n    const start = join(base, 'two', 'three');\n    const target = await walkParentDirs({ base, start, filename });\n    deepEqual(target, null);\n  });","file":"unit.walk.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should find only one","suites":["Test `walkParentDirs`"],"updatePoint":{"line":87,"column":26},"line":87,"code":"  it('should find only one', async () => {\n    const base = fixture('only-one');\n    const start = join(base, 'two', 'three');\n    const target = await walkParentDirs({ base, start, filename });\n    await assertContent(target, 'First');\n  });","file":"unit.walk.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should find only two","suites":["Test `walkParentDirs`"],"updatePoint":{"line":94,"column":26},"line":94,"code":"  it('should find only two', async () => {\n    const base = fixture('only-two');\n    const start = join(base, 'two', 'three');\n    const target = await walkParentDirs({ base, start, filename });\n    await assertContent(target, 'Second');\n  });","file":"unit.walk.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should find only three","suites":["Test `walkParentDirs`"],"updatePoint":{"line":101,"column":28},"line":101,"code":"  it('should find only three', async () => {\n    const base = fixture('only-three');\n    const start = join(base, 'two', 'three');\n    const target = await walkParentDirs({ base, start, filename });\n    await assertContent(target, 'Third');\n  });","file":"unit.walk.test.ts","skipped":false,"dir":"packages/build-utils/test"},{"name":"should reject deploying a single file","suites":["deploy"],"updatePoint":{"line":6,"column":43,"index":239},"line":6,"code":"  it('should reject deploying a single file', async () => {\n    client.setArgv('deploy', __filename);\n    const exitCode = await deploy(client);\n    expect(exitCode).toEqual(1);\n    expect(client.outputBuffer).toEqual(`Error! Support for single file deployments has been removed.\\nLearn More: https://vercel.link/no-single-file-deployments\\n`);\n  });","file":"commands/deploy.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should reject deploying multiple files","suites":["deploy"],"updatePoint":{"line":12,"column":44,"index":591},"line":12,"code":"  it('should reject deploying multiple files', async () => {\n    client.setArgv('deploy', __filename, join(__dirname, 'inspect.test.ts'));\n    const exitCode = await deploy(client);\n    expect(exitCode).toEqual(1);\n    expect(client.outputBuffer).toEqual(`Error! Can't deploy more than one path.\\n`);\n  });","file":"commands/deploy.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should reject deploying a directory that does not exist","suites":["deploy"],"updatePoint":{"line":18,"column":61,"index":915},"line":18,"code":"  it('should reject deploying a directory that does not exist', async () => {\n    client.setArgv('deploy', 'does-not-exists');\n    const exitCode = await deploy(client);\n    expect(exitCode).toEqual(1);\n    expect(client.outputBuffer).toEqual(`Error! The specified file or directory \"does-not-exists\" does not exist.\\n`);\n  });","file":"commands/deploy.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should reject deploying \"version: 1\"","suites":["deploy"],"updatePoint":{"line":24,"column":42,"index":1224},"line":24,"code":"  it('should reject deploying \"version: 1\"', async () => {\n    client.setArgv('deploy');\n    client.localConfig = {\n      [fileNameSymbol]: 'vercel.json',\n      version: 1\n    };\n    const exitCode = await deploy(client);\n    expect(exitCode).toEqual(1);\n    expect(client.outputBuffer).toEqual('Error! The value of the `version` property within vercel.json can only be `2`.\\n');\n  });","file":"commands/deploy.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should reject deploying \"version: {}\"","suites":["deploy"],"updatePoint":{"line":34,"column":43,"index":1611},"line":34,"code":"  it('should reject deploying \"version: {}\"', async () => {\n    client.setArgv('deploy');\n    client.localConfig = {\n      [fileNameSymbol]: 'vercel.json',\n      // @ts-ignore\n      version: {}\n    };\n    const exitCode = await deploy(client);\n    expect(exitCode).toEqual(1);\n    expect(client.outputBuffer).toEqual('Error! The `version` property inside your vercel.json file must be a number.\\n');\n  });","file":"commands/deploy.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should print out deployment information","suites":["inspect"],"updatePoint":{"line":6,"column":45,"index":260},"line":6,"code":"  it('should print out deployment information', async () => {\n    const user = useUser();\n    const deployment = useDeployment({\n      creator: user\n    });\n    client.setArgv('inspect', deployment.url);\n    const exitCode = await inspect(client);\n    expect(exitCode).toEqual(0);\n    expect(client.mockOutput.mock.calls[0][0].startsWith(`> Fetched deployment \"${deployment.url}\" in ${user.username}`)).toBeTruthy();\n  });","file":"commands/inspect.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should print error when deployment not found","suites":["inspect"],"updatePoint":{"line":16,"column":50,"index":688},"line":16,"code":"  it('should print error when deployment not found', async () => {\n    const user = useUser();\n    useDeployment({\n      creator: user\n    });\n    client.setArgv('inspect', 'bad.com');\n    const exitCode = await inspect(client);\n    expect(exitCode).toEqual(1);\n    expect(client.outputBuffer).toEqual(`Error! Failed to find deployment \"bad.com\" in ${user.username}\\n`);\n  });","file":"commands/inspect.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should not allow the `--token` flag","suites":["login"],"updatePoint":{"line":5,"column":41,"index":197},"line":5,"code":"  it('should not allow the `--token` flag', async () => {\n    client.setArgv('login', '--token', 'foo');\n    const exitCode = await login(client);\n    expect(exitCode).toEqual(2);\n    expect(client.outputBuffer).toEqual('Error! `--token` may not be used with the \"login\" command\\n');\n  });","file":"commands/login.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should allow login via email as argument","suites":["login"],"updatePoint":{"line":11,"column":46,"index":492},"line":11,"code":"  it('should allow login via email as argument', async () => {\n    const user = useUser();\n    client.setArgv('login', user.email);\n    const exitCode = await login(client);\n    expect(exitCode).toEqual(0);\n    expect(client.outputBuffer.includes(`Success! Email authentication complete for ${user.email}`)).toEqual(true);\n  });","file":"commands/login.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should handle pulling","suites":["pull"],"updatePoint":{"line":10,"column":27,"index":394},"line":10,"code":"  it('should handle pulling', async () => {\n    const cwd = setupFixture('vercel-pull-next');\n    useUser();\n    useTeams();\n    useProject({ ...defaultProject,\n      id: 'vercel-pull-next',\n      name: 'vercel-pull-next'\n    });\n    client.setArgv('pull', '--yes', cwd);\n    const exitCode = await pull(client);\n    expect(exitCode).toEqual(0);\n    const rawDevEnv = await fs.readFile(path.join(cwd, '.vercel', '.env.development.local'));\n    const devFileHasDevEnv = rawDevEnv.toString().includes('SPECIAL_FLAG');\n    expect(devFileHasDevEnv).toBeTruthy();\n  });","file":"commands/pull.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should handle --environment=preview flag","suites":["pull"],"updatePoint":{"line":25,"column":46,"index":978},"line":25,"code":"  it('should handle --environment=preview flag', async () => {\n    const cwd = setupFixture('vercel-pull-next');\n    useUser();\n    useTeams();\n    useProject({ ...defaultProject,\n      id: 'vercel-pull-next',\n      name: 'vercel-pull-next'\n    });\n    client.setArgv('pull', '--yes', '--environment=preview', cwd);\n    const exitCode = await pull(client);\n    expect(exitCode).toEqual(0);\n    const rawPreviewEnv = await fs.readFile(path.join(cwd, '.vercel', '.env.preview.local'));\n    const previewFileHasPreviewEnv = rawPreviewEnv.toString().includes('REDIS_CONNECTION_STRING');\n    expect(previewFileHasPreviewEnv).toBeTruthy();\n  });","file":"commands/pull.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should handle --environment=production flag","suites":["pull"],"updatePoint":{"line":40,"column":49,"index":1621},"line":40,"code":"  it('should handle --environment=production flag', async () => {\n    const cwd = setupFixture('vercel-pull-next');\n    useUser();\n    useTeams();\n    useProject({ ...defaultProject,\n      id: 'vercel-pull-next',\n      name: 'vercel-pull-next'\n    });\n    client.setArgv('pull', '--yes', '--environment=production', cwd);\n    const exitCode = await pull(client);\n    expect(exitCode).toEqual(0);\n    const rawProdEnv = await fs.readFile(path.join(cwd, '.vercel', '.env.production.local'));\n    const previewFileHasPreviewEnv1 = rawProdEnv.toString().includes('REDIS_CONNECTION_STRING');\n    expect(previewFileHasPreviewEnv1).toBeTruthy();\n    const previewFileHasPreviewEnv2 = rawProdEnv.toString().includes('SQL_CONNECTION_STRING');\n    expect(previewFileHasPreviewEnv2).toBeTruthy();\n  });","file":"commands/pull.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should reject invalid arguments","suites":["whoami"],"updatePoint":{"line":5,"column":37,"index":196},"line":5,"code":"  it('should reject invalid arguments', async () => {\n    client.setArgv('--invalid');\n    await expect(whoami(client)).rejects.toThrow('unknown or unexpected option: --invalid');\n  });","file":"commands/whoami.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should print the Vercel username","suites":["whoami"],"updatePoint":{"line":9,"column":38,"index":383},"line":9,"code":"  it('should print the Vercel username', async () => {\n    const user = useUser();\n    const exitCode = await whoami(client);\n    expect(exitCode).toEqual(0);\n    expect(client.outputBuffer).toEqual(`> ${user.username}\\n`);\n  });","file":"commands/whoami.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should print only the Vercel username when output is not a TTY","suites":["whoami"],"updatePoint":{"line":15,"column":68,"index":643},"line":15,"code":"  it('should print only the Vercel username when output is not a TTY', async () => {\n    const user = useUser();\n    client.output.isTTY = false;\n    const exitCode = await whoami(client);\n    expect(exitCode).toEqual(0);\n    expect(client.outputBuffer).toEqual(`${user.username}\\n`);\n  });","file":"commands/whoami.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should create the app","suites":["AppComponent"],"updatePoint":{"line":9,"column":27,"index":299},"line":9,"code":"  it('should create the app', () => {\n    const fixture = TestBed.createComponent(AppComponent);\n    const app = fixture.debugElement.componentInstance;\n    expect(app).toBeTruthy();\n  });","file":"dev/fixtures/02-angular-node/src/app/app.component.spec.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should have as title 'angular-node'","suites":["AppComponent"],"updatePoint":{"line":14,"column":41,"index":502},"line":14,"code":"  it(`should have as title 'angular-node'`, () => {\n    const fixture = TestBed.createComponent(AppComponent);\n    const app = fixture.debugElement.componentInstance;\n    expect(app.title).toEqual('angular-node');\n  });","file":"dev/fixtures/02-angular-node/src/app/app.component.spec.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should render title in a h1 tag","suites":["AppComponent"],"updatePoint":{"line":19,"column":37,"index":718},"line":19,"code":"  it('should render title in a h1 tag', () => {\n    const fixture = TestBed.createComponent(AppComponent);\n    fixture.detectChanges();\n    const compiled = fixture.debugElement.nativeElement;\n    expect(compiled.querySelector('h1').textContent).toContain('Welcome to angular-node!');\n  });","file":"dev/fixtures/02-angular-node/src/app/app.component.spec.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should render message","suites":["Stage App Component"],"updatePoint":{"line":10,"column":27,"index":388},"line":10,"code":"  it('should render message', done => {\n    component.create(bootstrap).then(() => {\n      const view = component.element;\n      expect(view.textContent.trim()).toBe('Hello World!');\n      done();\n    }).catch(e => {\n      fail(e);\n      done();\n    });\n  });","file":"dev/fixtures/03-aurelia/test/unit/app.spec.js","skipped":false,"dir":"packages/cli/test"},{"name":"renders without crashing","suites":[],"updatePoint":{"line":4,"column":28,"index":115},"line":4,"code":"it('renders without crashing', () => {\n  const div = document.createElement('div');\n  ReactDOM.render( /*#__PURE__*/React.createElement(App, null), div);\n  ReactDOM.unmountComponentAtNode(div);\n});","file":"dev/fixtures/04-create-react-app/src/App.test.js","skipped":false,"dir":"packages/cli/test"},{"name":"should filter install \"latest\", cached canary","suites":["filterPackage"],"updatePoint":{"line":4,"column":51,"index":223},"line":4,"code":"  it('should filter install \"latest\", cached canary', () => {\n    const buildersPkg = {\n      dependencies: {\n        '@vercel/build-utils': '0.0.1-canary.0'\n      }\n    };\n    const result = filterPackage('@vercel/build-utils', 'canary', buildersPkg, {});\n    expect(result).toEqual(true);\n  });","file":"util/dev/builder-cache.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should filter install \"canary\", cached stable","suites":["filterPackage"],"updatePoint":{"line":13,"column":51,"index":520},"line":13,"code":"  it('should filter install \"canary\", cached stable', () => {\n    const buildersPkg = {\n      dependencies: {\n        '@vercel/build-utils': '0.0.1'\n      }\n    };\n    const result = filterPackage('@vercel/build-utils@canary', 'latest', buildersPkg, {});\n    expect(result).toEqual(true);\n  });","file":"util/dev/builder-cache.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should filter install \"latest\", cached stable","suites":["filterPackage"],"updatePoint":{"line":22,"column":51,"index":815},"line":22,"code":"  it('should filter install \"latest\", cached stable', () => {\n    const buildersPkg = {\n      dependencies: {\n        '@vercel/build-utils': '0.0.1'\n      }\n    };\n    const result = filterPackage('@vercel/build-utils', 'latest', buildersPkg, {});\n    expect(result).toEqual(false);\n  });","file":"util/dev/builder-cache.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should filter install \"canary\", cached canary","suites":["filterPackage"],"updatePoint":{"line":31,"column":51,"index":1104},"line":31,"code":"  it('should filter install \"canary\", cached canary', () => {\n    const buildersPkg = {\n      dependencies: {\n        '@vercel/build-utils': '0.0.1-canary.0'\n      }\n    };\n    const result = filterPackage('@vercel/build-utils@canary', 'canary', buildersPkg, {});\n    expect(result).toEqual(false);\n  });","file":"util/dev/builder-cache.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should filter install URL, cached stable","suites":["filterPackage"],"updatePoint":{"line":40,"column":46,"index":1404},"line":40,"code":"  it('should filter install URL, cached stable', () => {\n    const buildersPkg = {\n      dependencies: {\n        '@vercel/build-utils': '0.0.1'\n      }\n    };\n    const result = filterPackage('https://tarball.now.sh', 'latest', buildersPkg, {});\n    expect(result).toEqual(true);\n  });","file":"util/dev/builder-cache.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should filter install URL, cached canary","suites":["filterPackage"],"updatePoint":{"line":49,"column":46,"index":1690},"line":49,"code":"  it('should filter install URL, cached canary', () => {\n    const buildersPkg = {\n      dependencies: {\n        '@vercel/build-utils': '0.0.1-canary.0'\n      }\n    };\n    const result = filterPackage('https://tarball.now.sh', 'canary', buildersPkg, {});\n    expect(result).toEqual(true);\n  });","file":"util/dev/builder-cache.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should filter install \"latest\", cached URL - stable","suites":["filterPackage"],"updatePoint":{"line":58,"column":57,"index":1996},"line":58,"code":"  it('should filter install \"latest\", cached URL - stable', () => {\n    const buildersPkg = {\n      dependencies: {\n        '@vercel/build-utils': 'https://tarball.now.sh'\n      }\n    };\n    const result = filterPackage('@vercel/build-utils', 'latest', buildersPkg, {});\n    expect(result).toEqual(true);\n  });","file":"util/dev/builder-cache.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should filter install \"latest\", cached URL - canary","suites":["filterPackage"],"updatePoint":{"line":67,"column":57,"index":2307},"line":67,"code":"  it('should filter install \"latest\", cached URL - canary', () => {\n    const buildersPkg = {\n      dependencies: {\n        '@vercel/build-utils': 'https://tarball.now.sh'\n      }\n    };\n    const result = filterPackage('@vercel/build-utils', 'canary', buildersPkg, {});\n    expect(result).toEqual(true);\n  });","file":"util/dev/builder-cache.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should filter install not bundled version, cached same version","suites":["filterPackage"],"updatePoint":{"line":76,"column":68,"index":2629},"line":76,"code":"  it('should filter install not bundled version, cached same version', () => {\n    const buildersPkg = {\n      dependencies: {\n        'not-bundled-package': '0.0.1'\n      }\n    };\n    const result = filterPackage('not-bundled-package@0.0.1', '_', buildersPkg, {});\n    expect(result).toEqual(false);\n  });","file":"util/dev/builder-cache.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should filter install not bundled version, cached different version","suites":["filterPackage"],"updatePoint":{"line":85,"column":73,"index":2941},"line":85,"code":"  it('should filter install not bundled version, cached different version', () => {\n    const buildersPkg = {\n      dependencies: {\n        'not-bundled-package': '0.0.9'\n      }\n    };\n    const result = filterPackage('not-bundled-package@0.0.1', '_', buildersPkg, {});\n    expect(result).toEqual(true);\n  });","file":"util/dev/builder-cache.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should filter install not bundled stable, cached version","suites":["filterPackage"],"updatePoint":{"line":94,"column":62,"index":3241},"line":94,"code":"  it('should filter install not bundled stable, cached version', () => {\n    const buildersPkg = {\n      dependencies: {\n        'not-bundled-package': '0.0.1'\n      }\n    };\n    const result = filterPackage('not-bundled-package', '_', buildersPkg, {});\n    expect(result).toEqual(true);\n  });","file":"util/dev/builder-cache.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should filter install not bundled tagged, cached tagged","suites":["filterPackage"],"updatePoint":{"line":103,"column":61,"index":3534},"line":103,"code":"  it('should filter install not bundled tagged, cached tagged', () => {\n    const buildersPkg = {\n      dependencies: {\n        'not-bundled-package': '16.9.0-alpha.0'\n      }\n    };\n    const result = filterPackage('not-bundled-package@alpha', '_', buildersPkg, {});\n    expect(result).toEqual(true);\n  });","file":"util/dev/builder-cache.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should install \"\" with input ","suites":["getBuildUtils"],"updatePoint":{"line":117,"column":72,"index":4569},"line":117,"code":"    it(`should install \"${expected}\" with input ${JSON.stringify(input)}`, () => {\n      const result = getBuildUtils(input);\n      expect(result).toEqual(`@vercel/build-utils@${expected}`);\n    });","file":"util/dev/builder-cache.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should work with \"stable\" releases","suites":["isBundledBuilder"],"updatePoint":{"line":124,"column":40,"index":4781},"line":124,"code":"  it('should work with \"stable\" releases', () => {\n    const cliPkg = {\n      dependencies: {\n        '@vercel/node': '1.6.1'\n      }\n    }; // \"canary\" tag\n\n    {\n      const parsed = npa('@vercel/node@canary');\n      const result = isBundledBuilder(parsed, cliPkg);\n      expect(result).toEqual(false);\n    } // \"latest\" tag\n\n    {\n      const parsed = npa('@vercel/node');\n      const result = isBundledBuilder(parsed, cliPkg);\n      expect(result).toEqual(true);\n    } // specific matching version\n\n    {\n      const parsed = npa('@vercel/node@1.6.1');\n      const result = isBundledBuilder(parsed, cliPkg);\n      expect(result).toEqual(true);\n    } // specific non-matching version\n\n    {\n      const parsed = npa('@vercel/node@1.6.0');\n      const result = isBundledBuilder(parsed, cliPkg);\n      expect(result).toEqual(false);\n    } // URL\n\n    {\n      const parsed = npa('https://example.com');\n      const result = isBundledBuilder(parsed, cliPkg);\n      expect(result).toEqual(false);\n    }\n  });","file":"util/dev/builder-cache.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should work with \"canary\" releases","suites":["isBundledBuilder"],"updatePoint":{"line":161,"column":40,"index":5788},"line":161,"code":"  it('should work with \"canary\" releases', () => {\n    const cliPkg = {\n      dependencies: {\n        '@vercel/node': '1.6.1-canary.0'\n      }\n    }; // \"canary\" tag\n\n    {\n      const parsed = npa('@vercel/node@canary');\n      const result = isBundledBuilder(parsed, cliPkg);\n      expect(result).toEqual(true);\n    } // \"latest\" tag\n\n    {\n      const parsed = npa('@vercel/node');\n      const result = isBundledBuilder(parsed, cliPkg);\n      expect(result).toEqual(false);\n    } // specific matching version\n\n    {\n      const parsed = npa('@vercel/node@1.6.1-canary.0');\n      const result = isBundledBuilder(parsed, cliPkg);\n      expect(result).toEqual(true);\n    } // specific non-matching version\n\n    {\n      const parsed = npa('@vercel/node@1.5.2-canary.9');\n      const result = isBundledBuilder(parsed, cliPkg);\n      expect(result).toEqual(false);\n    } // URL\n\n    {\n      const parsed = npa('https://example.com');\n      const result = isBundledBuilder(parsed, cliPkg);\n      expect(result).toEqual(false);\n    }\n  });","file":"util/dev/builder-cache.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should parse \"0\" as port 0","suites":["parseListen"],"updatePoint":{"line":3,"column":32,"index":127},"line":3,"code":"  it('should parse \"0\" as port 0', () => {\n    const result = parseListen('0');\n    expect(result).toHaveLength(1);\n    expect(result[0]).toEqual(0);\n  });","file":"util/dev/parse-listen.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should parse \"3000\" as port 3000","suites":["parseListen"],"updatePoint":{"line":8,"column":38,"index":289},"line":8,"code":"  it('should parse \"3000\" as port 3000', () => {\n    const result = parseListen('3000');\n    expect(result).toHaveLength(1);\n    expect(result[0]).toEqual(3000);\n  });","file":"util/dev/parse-listen.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should parse \"0.0.0.0\" as IP address","suites":["parseListen"],"updatePoint":{"line":13,"column":42,"index":461},"line":13,"code":"  it('should parse \"0.0.0.0\" as IP address', () => {\n    const result = parseListen('0.0.0.0');\n    expect(result).toHaveLength(2);\n    expect(result[0]).toEqual(3000);\n    expect(result[1]).toEqual('0.0.0.0');\n  });","file":"util/dev/parse-listen.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should parse \"127.0.0.1:4000\" as IP address and port","suites":["parseListen"],"updatePoint":{"line":19,"column":58,"index":694},"line":19,"code":"  it('should parse \"127.0.0.1:4000\" as IP address and port', () => {\n    const result = parseListen('127.0.0.1:4000');\n    expect(result).toHaveLength(2);\n    expect(result[0]).toEqual(4000);\n    expect(result[1]).toEqual('127.0.0.1');\n  });","file":"util/dev/parse-listen.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should parse \"tcp://127.0.0.1:5000\" as IP address and port","suites":["parseListen"],"updatePoint":{"line":25,"column":64,"index":942},"line":25,"code":"  it('should parse \"tcp://127.0.0.1:5000\" as IP address and port', () => {\n    const result = parseListen('tcp://127.0.0.1:5000');\n    expect(result).toHaveLength(2);\n    expect(result[0]).toEqual(5000);\n    expect(result[1]).toEqual('127.0.0.1');\n  });","file":"util/dev/parse-listen.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should parse \"unix:/home/user/server.sock\" as UNIX socket file","suites":["parseListen"],"updatePoint":{"line":33,"column":70,"index":1241},"line":33,"code":"    it('should parse \"unix:/home/user/server.sock\" as UNIX socket file', () => {\n      const result = parseListen('unix:/home/user/server.sock');\n      expect(result).toHaveLength(1);\n      expect(result[0]).toEqual('/home/user/server.sock');\n    });","file":"util/dev/parse-listen.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should parse \"pipe:\\\\.\\pipe\\PipeName\" as UNIX pipe","suites":["parseListen"],"updatePoint":{"line":38,"column":62,"index":1484},"line":38,"code":"    it('should parse \"pipe:\\\\\\\\.\\\\pipe\\\\PipeName\" as UNIX pipe', () => {\n      const result = parseListen('pipe:\\\\\\\\.\\\\pipe\\\\PipeName');\n      expect(result).toHaveLength(1);\n      expect(result[0]).toEqual('\\\\\\\\.\\\\pipe\\\\PipeName');\n    });","file":"util/dev/parse-listen.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should fail to parse \"bad://url\"","suites":["parseListen"],"updatePoint":{"line":45,"column":38,"index":1706},"line":45,"code":"  it('should fail to parse \"bad://url\"', () => {\n    let err;\n\n    try {\n      parseListen('bad://url');\n      throw new Error('Should not happen');\n    } catch (_err) {\n      err = _err;\n    }\n\n    expect(err.message).toEqual('Unknown `--listen` scheme (protocol): bad:');\n  });","file":"util/dev/parse-listen.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should handle 301 redirection","suites":["devRouter"],"updatePoint":{"line":3,"column":35,"index":124},"line":3,"code":"  it('should handle 301 redirection', async () => {\n    const routesConfig = [{\n      src: '/redirect',\n      status: 301,\n      headers: {\n        Location: 'https://vercel.com'\n      }\n    }];\n    const result = await devRouter('/redirect', 'GET', routesConfig);\n    expect(result).toMatchObject({\n      found: true,\n      dest: '/redirect',\n      continue: false,\n      status: 301,\n      headers: {\n        location: 'https://vercel.com'\n      },\n      uri_args: {},\n      matched_route: routesConfig[0],\n      matched_route_idx: 0,\n      userDest: false,\n      isDestUrl: false,\n      phase: undefined\n    });\n  });","file":"util/dev/router.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should match captured groups","suites":["devRouter"],"updatePoint":{"line":28,"column":34,"index":744},"line":28,"code":"  it('should match captured groups', async () => {\n    const routesConfig = [{\n      src: '/api/(.*)',\n      dest: '/endpoints/$1.js'\n    }];\n    const result = await devRouter('/api/user', 'GET', routesConfig);\n    expect(result).toMatchObject({\n      found: true,\n      dest: '/endpoints/user.js',\n      continue: false,\n      status: undefined,\n      headers: {},\n      uri_args: {},\n      matched_route: routesConfig[0],\n      matched_route_idx: 0,\n      userDest: true,\n      isDestUrl: false,\n      phase: undefined\n    });\n  });","file":"util/dev/router.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should match named groups","suites":["devRouter"],"updatePoint":{"line":48,"column":31,"index":1277},"line":48,"code":"  it('should match named groups', async () => {\n    const routesConfig = [{\n      src: '/user/(?<id>.+)',\n      dest: '/user.js?id=$id'\n    }];\n    const result = await devRouter('/user/123', 'GET', routesConfig);\n    expect(result).toMatchObject({\n      found: true,\n      dest: '/user.js',\n      continue: false,\n      status: undefined,\n      headers: {},\n      uri_args: {\n        id: '123'\n      },\n      matched_route: routesConfig[0],\n      matched_route_idx: 0,\n      userDest: true,\n      isDestUrl: false,\n      phase: undefined\n    });\n  });","file":"util/dev/router.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should match optional named groups","suites":["devRouter"],"updatePoint":{"line":70,"column":40,"index":1839},"line":70,"code":"  it('should match optional named groups', async () => {\n    const routesConfig = [{\n      src: '/api/hello(/(?<name>[^/]+))?',\n      dest: '/api/functions/hello/index.js?name=$name'\n    }];\n    const result = await devRouter('/api/hello', 'GET', routesConfig);\n    expect(result).toMatchObject({\n      found: true,\n      dest: '/api/functions/hello/index.js',\n      continue: false,\n      status: undefined,\n      headers: {},\n      uri_args: {\n        name: ''\n      },\n      matched_route: routesConfig[0],\n      matched_route_idx: 0,\n      userDest: true,\n      isDestUrl: false,\n      phase: undefined\n    });\n  });","file":"util/dev/router.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should match proxy_pass","suites":["devRouter"],"updatePoint":{"line":92,"column":29,"index":2449},"line":92,"code":"  it('should match proxy_pass', async () => {\n    const routesConfig = [{\n      src: '/proxy',\n      dest: 'https://vercel.com'\n    }];\n    const result = await devRouter('/proxy', 'GET', routesConfig);\n    expect(result).toMatchObject({\n      found: true,\n      dest: 'https://vercel.com',\n      continue: false,\n      status: undefined,\n      headers: {},\n      uri_args: {},\n      matched_route: routesConfig[0],\n      matched_route_idx: 0,\n      userDest: false,\n      isDestUrl: true,\n      phase: undefined\n    });\n  });","file":"util/dev/router.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should match `methods`","suites":["devRouter"],"updatePoint":{"line":112,"column":28,"index":2975},"line":112,"code":"  it('should match `methods`', async () => {\n    const routesConfig = [{\n      src: '/.*',\n      methods: ['POST'],\n      dest: '/post'\n    }, {\n      src: '/.*',\n      methods: ['GET'],\n      dest: '/get'\n    }];\n    let result = await devRouter('/', 'GET', routesConfig);\n    expect(result).toMatchObject({\n      found: true,\n      dest: '/get',\n      continue: false,\n      status: undefined,\n      headers: {},\n      uri_args: {},\n      matched_route: routesConfig[1],\n      matched_route_idx: 1,\n      userDest: true,\n      isDestUrl: false,\n      phase: undefined\n    });\n    result = await devRouter('/', 'POST', routesConfig);\n    expect(result).toMatchObject({\n      found: true,\n      dest: '/post',\n      continue: false,\n      status: undefined,\n      headers: {},\n      uri_args: {},\n      matched_route: routesConfig[0],\n      matched_route_idx: 0,\n      userDest: true,\n      isDestUrl: false,\n      phase: undefined\n    });\n  });","file":"util/dev/router.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should match without prefix slash","suites":["devRouter"],"updatePoint":{"line":151,"column":39,"index":3932},"line":151,"code":"  it('should match without prefix slash', async () => {\n    const routesConfig = [{\n      src: 'api/(.*)',\n      dest: 'endpoints/$1.js'\n    }];\n    const result = await devRouter('/api/user', 'GET', routesConfig);\n    expect(result).toMatchObject({\n      found: true,\n      dest: '/endpoints/user.js',\n      continue: false,\n      status: undefined,\n      headers: {},\n      uri_args: {},\n      matched_route: routesConfig[0],\n      matched_route_idx: 0,\n      userDest: true,\n      isDestUrl: false,\n      phase: undefined\n    });\n  });","file":"util/dev/router.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should match with needed prefixed slash","suites":["devRouter"],"updatePoint":{"line":171,"column":45,"index":4477},"line":171,"code":"  it('should match with needed prefixed slash', async () => {\n    const routesConfig = [{\n      src: '^\\\\/([^\\\\/]+?)\\\\/comments(?:\\\\/)?$',\n      dest: '/some/dest'\n    }];\n    const result = await devRouter('/post-1/comments', 'GET', routesConfig);\n    expect(result).toMatchObject({\n      found: true,\n      dest: '/some/dest',\n      continue: false,\n      userDest: true,\n      isDestUrl: false,\n      phase: undefined,\n      status: undefined,\n      headers: {},\n      uri_args: {},\n      matched_route: {\n        src: '^\\\\/([^\\\\/]+?)\\\\/comments(?:\\\\/)?$',\n        dest: '/some/dest'\n      },\n      matched_route_idx: 0\n    });\n  });","file":"util/dev/router.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should match `continue: true` with fallthrough","suites":["devRouter"],"updatePoint":{"line":194,"column":52,"index":5121},"line":194,"code":"  it('should match `continue: true` with fallthrough', async () => {\n    const routesConfig = [{\n      src: '/_next/static/(?:[^/]+/pages|chunks|runtime)/.+',\n      continue: true,\n      headers: {\n        'cache-control': 'immutable,max-age=31536000'\n      }\n    }];\n    const result = await devRouter('/_next/static/chunks/0.js', 'GET', routesConfig);\n    expect(result).toMatchObject({\n      found: false,\n      dest: '/_next/static/chunks/0.js',\n      continue: true,\n      isDestUrl: false,\n      phase: undefined,\n      status: undefined,\n      uri_args: {},\n      headers: {\n        'cache-control': 'immutable,max-age=31536000'\n      }\n    });\n  });","file":"util/dev/router.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should match `continue: true` with match","suites":["devRouter"],"updatePoint":{"line":216,"column":46,"index":5773},"line":216,"code":"  it('should match `continue: true` with match', async () => {\n    const routesConfig = [{\n      src: '/_next/static/(?:[^/]+/pages|chunks|runtime)/.+',\n      continue: true,\n      headers: {\n        'cache-control': 'immutable,max-age=31536000'\n      }\n    }, {\n      src: '/(.*)',\n      dest: '/hi'\n    }];\n    const result = await devRouter('/_next/static/chunks/0.js', 'GET', routesConfig);\n    expect(result).toMatchObject({\n      found: true,\n      dest: '/hi',\n      continue: false,\n      status: undefined,\n      userDest: true,\n      isDestUrl: false,\n      phase: undefined,\n      uri_args: {},\n      headers: {\n        'cache-control': 'immutable,max-age=31536000'\n      },\n      matched_route: {\n        src: '/(.*)',\n        dest: '/hi'\n      },\n      matched_route_idx: 1\n    });\n  });","file":"util/dev/router.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should match with catch-all with prefix slash","suites":["devRouter"],"updatePoint":{"line":247,"column":51,"index":6579},"line":247,"code":"  it('should match with catch-all with prefix slash', async () => {\n    const routesConfig = [{\n      src: '/(.*)',\n      dest: '/www/$1'\n    }];\n    const result = await devRouter('/', 'GET', routesConfig);\n    expect(result).toMatchObject({\n      found: true,\n      dest: '/www/',\n      continue: false,\n      userDest: true,\n      isDestUrl: false,\n      phase: undefined,\n      status: undefined,\n      headers: {},\n      uri_args: {},\n      matched_route: {\n        src: '/(.*)',\n        dest: '/www/$1'\n      },\n      matched_route_idx: 0\n    });\n  });","file":"util/dev/router.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should match with catch-all with no prefix slash","suites":["devRouter"],"updatePoint":{"line":270,"column":54,"index":7141},"line":270,"code":"  it('should match with catch-all with no prefix slash', async () => {\n    const routesConfig = [{\n      src: '(.*)',\n      dest: '/www$1'\n    }];\n    const result = await devRouter('/', 'GET', routesConfig);\n    expect(result).toMatchObject({\n      found: true,\n      dest: '/www/',\n      continue: false,\n      userDest: true,\n      isDestUrl: false,\n      phase: undefined,\n      status: undefined,\n      headers: {},\n      uri_args: {},\n      matched_route: {\n        src: '(.*)',\n        dest: '/www$1'\n      },\n      matched_route_idx: 0\n    });\n  });","file":"util/dev/router.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should match `continue: true` with `dest`","suites":["devRouter"],"updatePoint":{"line":293,"column":47,"index":7692},"line":293,"code":"  it('should match `continue: true` with `dest`', async () => {\n    const routesConfig = [{\n      src: '/(.*)',\n      dest: '/www/$1',\n      continue: true\n    }, {\n      src: '^/www/(a\\\\/([^\\\\/]+?)(?:\\\\/)?)$',\n      dest: 'http://localhost:5000/$1'\n    }];\n    const result = await devRouter('/a/foo', 'GET', routesConfig);\n    expect(result).toMatchObject({\n      found: true,\n      dest: 'http://localhost:5000/a/foo',\n      continue: false,\n      status: undefined,\n      headers: {},\n      uri_args: {},\n      matched_route: routesConfig[1],\n      matched_route_idx: 1,\n      userDest: false,\n      isDestUrl: true,\n      phase: undefined\n    });\n  });","file":"util/dev/router.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should parse 4xx response error with fallback message","suites":["responseError"],"updatePoint":{"line":26,"column":59,"index":832},"line":26,"code":"  it('should parse 4xx response error with fallback message', async () => {\n    handler = (_req, res) => {\n      send(res, 404, {});\n    };\n\n    const res = await fetch(url);\n    const formatted = await responseError(res, 'Failed to load data');\n    expect(formatted.message).toEqual('Failed to load data (404)');\n  });","file":"util/error.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should parse 4xx response error without fallback message","suites":["responseError"],"updatePoint":{"line":35,"column":62,"index":1155},"line":35,"code":"  it('should parse 4xx response error without fallback message', async () => {\n    handler = (_req, res) => {\n      send(res, 404, {});\n    };\n\n    const res = await fetch(url);\n    const formatted = await responseError(res);\n    expect(formatted.message).toEqual('Response Error (404)');\n  });","file":"util/error.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should parse 5xx response error without fallback message","suites":["responseError"],"updatePoint":{"line":44,"column":62,"index":1450},"line":44,"code":"  it('should parse 5xx response error without fallback message', async () => {\n    handler = (_req, res) => {\n      send(res, 500, '');\n    };\n\n    const res = await fetch(url);\n    const formatted = await responseError(res);\n    expect(formatted.message).toEqual('Response Error (500)');\n  });","file":"util/error.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should parse 4xx response error as correct JSON","suites":["responseError"],"updatePoint":{"line":53,"column":53,"index":1736},"line":53,"code":"  it('should parse 4xx response error as correct JSON', async () => {\n    handler = (_req, res) => {\n      send(res, 400, {\n        error: {\n          message: 'The request is not correct'\n        }\n      });\n    };\n\n    const res = await fetch(url);\n    const formatted = await responseError(res);\n    expect(formatted.message).toEqual('The request is not correct (400)');\n  });","file":"util/error.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should parse 5xx response error as HTML","suites":["responseError"],"updatePoint":{"line":66,"column":45,"index":2108},"line":66,"code":"  it('should parse 5xx response error as HTML', async () => {\n    handler = (_req, res) => {\n      send(res, 500, 'This is a malformed error');\n    };\n\n    const res = await fetch(url);\n    const formatted = await responseError(res, 'Failed to process data');\n    expect(formatted.message).toEqual('Failed to process data (500)');\n  });","file":"util/error.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should parse 5xx response error with random JSON","suites":["responseError"],"updatePoint":{"line":75,"column":54,"index":2454},"line":75,"code":"  it('should parse 5xx response error with random JSON', async () => {\n    handler = (_req, res) => {\n      send(res, 500, {\n        wrong: 'property'\n      });\n    };\n\n    const res = await fetch(url);\n    const formatted = await responseError(res, 'Failed to process data');\n    expect(formatted.message).toEqual('Failed to process data (500)');\n  });","file":"util/error.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should parse 4xx error message with broken JSON","suites":["responseError"],"updatePoint":{"line":86,"column":53,"index":2807},"line":86,"code":"  it('should parse 4xx error message with broken JSON', async () => {\n    handler = (_req, res) => {\n      send(res, 403, `32puuuh2332`);\n    };\n\n    const res = await fetch(url);\n    const formatted = await responseErrorMessage(res, 'Not authenticated');\n    expect(formatted).toEqual('Not authenticated (403)');\n  });","file":"util/error.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should parse 4xx error message with proper message","suites":["responseError"],"updatePoint":{"line":95,"column":56,"index":3130},"line":95,"code":"  it('should parse 4xx error message with proper message', async () => {\n    handler = (_req, res) => {\n      send(res, 403, {\n        error: {\n          message: 'This is a test'\n        }\n      });\n    };\n\n    const res = await fetch(url);\n    const formatted = await responseErrorMessage(res);\n    expect(formatted).toEqual('This is a test (403)');\n  });","file":"util/error.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should parse 5xx error message with proper message","suites":["responseError"],"updatePoint":{"line":108,"column":56,"index":3488},"line":108,"code":"  it('should parse 5xx error message with proper message', async () => {\n    handler = (_req, res) => {\n      send(res, 500, {\n        error: {\n          message: 'This is a test'\n        }\n      });\n    };\n\n    const res = await fetch(url);\n    const formatted = await responseErrorMessage(res);\n    expect(formatted).toEqual('Response Error (500)');\n  });","file":"util/error.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should parse 4xx response error with broken JSON","suites":["responseError"],"updatePoint":{"line":121,"column":54,"index":3844},"line":121,"code":"  it('should parse 4xx response error with broken JSON', async () => {\n    handler = (_req, res) => {\n      send(res, 403, `122{\"sss\"`);\n    };\n\n    const res = await fetch(url);\n    const formatted = await responseError(res, 'Not authenticated');\n    expect(formatted.message).toEqual('Not authenticated (403)');\n  });","file":"util/error.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should parse 4xx response error as correct JSON with more properties","suites":["responseError"],"updatePoint":{"line":130,"column":74,"index":4184},"line":130,"code":"  it('should parse 4xx response error as correct JSON with more properties', async () => {\n    handler = (_req, res) => {\n      send(res, 403, {\n        error: {\n          message: 'The request is not correct',\n          additionalProperty: 'test'\n        }\n      });\n    };\n\n    const res = await fetch(url);\n    const formatted = await responseError(res);\n    expect(formatted.message).toEqual('The request is not correct (403)');\n    expect(formatted.additionalProperty).toEqual('test');\n  });","file":"util/error.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should parse 429 response error with retry header","suites":["responseError"],"updatePoint":{"line":145,"column":55,"index":4662},"line":145,"code":"  it('should parse 429 response error with retry header', async () => {\n    handler = (_req, res) => {\n      res.setHeader('Retry-After', '20');\n      send(res, 429, {\n        error: {\n          message: 'You were rate limited'\n        }\n      });\n    };\n\n    const res = await fetch(url);\n    const formatted = await responseError(res);\n    expect(formatted.message).toEqual('You were rate limited (429)');\n    expect(formatted.retryAfter).toEqual(20);\n  });","file":"util/error.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should parse 429 response error without retry header","suites":["responseError"],"updatePoint":{"line":160,"column":58,"index":5125},"line":160,"code":"  it('should parse 429 response error without retry header', async () => {\n    handler = (_req, res) => {\n      send(res, 429, {\n        error: {\n          message: 'You were rate limited'\n        }\n      });\n    };\n\n    const res = await fetch(url);\n    const formatted = await responseError(res);\n    expect(formatted.message).toEqual('You were rate limited (429)');\n    expect(formatted.retryAfter).toEqual(undefined);\n  });","file":"util/error.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should discover files for builds deployment","suites":["staticFiles"],"updatePoint":{"line":32,"column":49,"index":930},"line":32,"code":"  it('should discover files for builds deployment', async () => {\n    const path = 'now-json-static-no-files';\n    let files = await getStaticFiles(fixture(path));\n    files = files.sort(alpha);\n    expect(files).toHaveLength(4);\n    expect(base(files[0])).toEqual(`${path}/a.js`);\n    expect(base(files[1])).toEqual(`${path}/b.js`);\n    expect(base(files[2])).toEqual(`${path}/build/a/c.js`);\n    expect(base(files[3])).toEqual(`${path}/package.json`);\n  });","file":"util/get-files.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should respect `.vercelignore` file rules","suites":["staticFiles"],"updatePoint":{"line":42,"column":47,"index":1388},"line":42,"code":"  it('should respect `.vercelignore` file rules', async () => {\n    const path = 'vercelignore';\n    let files = await getStaticFiles(fixture(path));\n    files = files.sort(alpha);\n    expect(files).toHaveLength(6);\n    expect(base(files[0])).toEqual(`${path}/.vercelignore`);\n    expect(base(files[1])).toEqual(`${path}/a.js`);\n    expect(base(files[2])).toEqual(`${path}/build/sub/a.js`);\n    expect(base(files[3])).toEqual(`${path}/build/sub/c.js`);\n    expect(base(files[4])).toEqual(`${path}/c.js`);\n    expect(base(files[5])).toEqual(`${path}/package.json`);\n  });","file":"util/get-files.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should work with argv","suites":["getProjectName"],"updatePoint":{"line":3,"column":27,"index":125},"line":3,"code":"  it('should work with argv', () => {\n    const project = getProjectName({\n      argv: {\n        '--name': 'abc'\n      }\n    });\n    expect(project).toEqual('abc');\n  });","file":"util/get-project-name.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should work with `vercel.json` config","suites":["getProjectName"],"updatePoint":{"line":11,"column":43,"index":312},"line":11,"code":"  it('should work with `vercel.json` config', () => {\n    const project = getProjectName({\n      argv: {},\n      nowConfig: {\n        name: 'abc'\n      }\n    });\n    expect(project).toEqual('abc');\n  });","file":"util/get-project-name.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should work with a directory","suites":["getProjectName"],"updatePoint":{"line":20,"column":34,"index":507},"line":20,"code":"  it('should work with a directory', () => {\n    const project = getProjectName({\n      argv: {},\n      nowConfig: {},\n      paths: ['/tmp/aa']\n    });\n    expect(project).toEqual('aa');\n  });","file":"util/get-project-name.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should detect update command","suites":["getUpdateCommand"],"updatePoint":{"line":4,"column":34,"index":191},"line":4,"code":"  it('should detect update command', async () => {\n    const updateCommand = await getUpdateCommand();\n    expect(updateCommand).toEqual(`npm i vercel@${isCanary() ? 'canary' : 'latest'}`);\n  });","file":"util/get-update-command.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should guess \"mdx-deck\"","suites":["didYouMean"],"updatePoint":{"line":4,"column":29,"index":591},"line":4,"code":"  it('should guess \"mdx-deck\"', () => {\n    expect(didYouMean('md', examples, 0.7)).toEqual('mdx-deck');\n  });","file":"util/init/did-you-mean.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should guess \"nodejs-koa\"","suites":["didYouMean"],"updatePoint":{"line":7,"column":31,"index":704},"line":7,"code":"  it('should guess \"nodejs-koa\"', () => {\n    expect(didYouMean('koa', examples, 0.7)).toEqual('nodejs-koa');\n  });","file":"util/init/did-you-mean.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should guess \"nodejs\"","suites":["didYouMean"],"updatePoint":{"line":10,"column":27,"index":816},"line":10,"code":"  it('should guess \"nodejs\"', () => {\n    expect(didYouMean('node', examples, 0.7)).toEqual('nodejs');\n  });","file":"util/init/did-you-mean.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should fail to guess with bad input","suites":["didYouMean"],"updatePoint":{"line":13,"column":41,"index":939},"line":13,"code":"  it('should fail to guess with bad input', () => {\n    expect(didYouMean('12345', examples, 0.7)).toBeUndefined();\n  });","file":"util/init/did-you-mean.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should detect \"\" as \\`\\`","suites":["isValidName"],"updatePoint":{"line":15,"column":51,"index":364},"line":15,"code":"    it(`should detect \"${value}\" as \\`${expected}\\``, () => {\n      expect(isValidName(value)).toEqual(expected);\n    });","file":"util/is-valid-name.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should return \".vercel\"","suites":["getVercelDirectory"],"updatePoint":{"line":7,"column":29,"index":250},"line":7,"code":"  it('should return \".vercel\"', () => {\n    const cwd = fixture('get-vercel-directory');\n    const dir = getVercelDirectory(cwd);\n    expect(basename(dir)).toEqual('.vercel');\n  });","file":"util/projects/get-vercel-directory.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should return \".now\"","suites":["getVercelDirectory"],"updatePoint":{"line":12,"column":26,"index":429},"line":12,"code":"  it('should return \".now\"', () => {\n    const cwd = fixture('get-vercel-directory-legacy');\n    const dir = getVercelDirectory(cwd);\n    expect(basename(dir)).toEqual('.now');\n  });","file":"util/projects/get-vercel-directory.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should throw an error if both \".vercel\" and \".now\" exist","suites":["getVercelDirectory"],"updatePoint":{"line":17,"column":62,"index":648},"line":17,"code":"  it('should throw an error if both \".vercel\" and \".now\" exist', () => {\n    let err;\n    const cwd = fixture('get-vercel-directory-error');\n\n    try {\n      getVercelDirectory(cwd);\n      throw new Error('Should not happen');\n    } catch (_err) {\n      err = _err;\n    }\n\n    expect(err.message).toEqual('Both `.vercel` and `.now` directories exist. Please remove the `.now` directory.');\n  });","file":"util/projects/get-vercel-directory.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should parse simple to host","suites":["toHost"],"updatePoint":{"line":3,"column":33,"index":106},"line":3,"code":"  it('should parse simple to host', () => {\n    expect(toHost('vercel.com')).toEqual('vercel.com');\n  });","file":"util/to-host.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should parse leading // to host","suites":["toHost"],"updatePoint":{"line":6,"column":37,"index":216},"line":6,"code":"  it('should parse leading // to host', () => {\n    expect(toHost('//zeit-logos-rnemgaicnc.now.sh')).toEqual('zeit-logos-rnemgaicnc.now.sh');\n  });","file":"util/to-host.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should parse leading http:// to host","suites":["toHost"],"updatePoint":{"line":9,"column":42,"index":369},"line":9,"code":"  it('should parse leading http:// to host', () => {\n    expect(toHost('http://zeit-logos-rnemgaicnc.now.sh')).toEqual('zeit-logos-rnemgaicnc.now.sh');\n  });","file":"util/to-host.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should parse leading https:// to host","suites":["toHost"],"updatePoint":{"line":12,"column":43,"index":528},"line":12,"code":"  it('should parse leading https:// to host', () => {\n    expect(toHost('https://zeit-logos-rnemgaicnc.now.sh')).toEqual('zeit-logos-rnemgaicnc.now.sh');\n  });","file":"util/to-host.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should parse leading https:// and path to host","suites":["toHost"],"updatePoint":{"line":15,"column":52,"index":697},"line":15,"code":"  it('should parse leading https:// and path to host', () => {\n    expect(toHost('https://zeit-logos-rnemgaicnc.now.sh/path')).toEqual('zeit-logos-rnemgaicnc.now.sh');\n  });","file":"util/to-host.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should parse simple and path to host","suites":["toHost"],"updatePoint":{"line":18,"column":42,"index":861},"line":18,"code":"  it('should parse simple and path to host', () => {\n    expect(toHost('vercel.com/test')).toEqual('vercel.com');\n  });","file":"util/to-host.test.ts","skipped":false,"dir":"packages/cli/test"},{"name":"should render message","suites":["Stage App Component"],"updatePoint":{"line":10,"column":27,"index":388},"line":10,"code":"  it('should render message', done => {\n    component.create(bootstrap).then(() => {\n      const view = component.element;\n      expect(view.textContent.trim()).toBe('Hello World!');\n      done();\n    }).catch(e => {\n      fail(e);\n      done();\n    });\n  });","file":"unit/app.spec.js","skipped":false,"dir":"packages/cli/test/dev/fixtures/03-aurelia/test"},{"name":"will display an empty deployment warning","suites":["create v2 deployment"],"updatePoint":{"line":29,"column":46},"line":29,"code":"  it('will display an empty deployment warning', async () => {\n    for await (const event of createDeployment(\n      {\n        token,\n        path: path.resolve(__dirname, 'fixtures', 'v2'),\n      },\n      {\n        name: 'now-clien-tests-v2',\n      }\n    )) {\n      if (event.type === 'warning') {\n        expect(event.payload).toEqual('READY');\n      }\n\n      if (event.type === 'ready') {\n        deployment = event.payload;\n        break;\n      }\n    }\n  });","file":"create-deployment.test.ts","skipped":false,"dir":"packages/client/tests"},{"name":"will report correct file count event","suites":["create v2 deployment"],"updatePoint":{"line":50,"column":42},"line":50,"code":"  it('will report correct file count event', async () => {\n    for await (const event of createDeployment(\n      {\n        token,\n        path: path.resolve(__dirname, 'fixtures', 'v2'),\n      },\n      {\n        name: 'now-client-tests-v2',\n      }\n    )) {\n      if (event.type === 'file-count') {\n        expect(event.payload.total).toEqual(0);\n      }\n\n      if (event.type === 'ready') {\n        deployment = event.payload;\n        break;\n      }\n    }\n  });","file":"create-deployment.test.ts","skipped":false,"dir":"packages/client/tests"},{"name":"will create a v2 deployment","suites":["create v2 deployment"],"updatePoint":{"line":71,"column":33},"line":71,"code":"  it('will create a v2 deployment', async () => {\n    for await (const event of createDeployment(\n      {\n        token,\n        path: path.resolve(__dirname, 'fixtures', 'v2'),\n      },\n      {\n        name: 'now-client-tests-v2',\n      }\n    )) {\n      if (event.type === 'ready') {\n        deployment = event.payload;\n        expect(deployment.readyState).toEqual('READY');\n        break;\n      }\n    }\n  });","file":"create-deployment.test.ts","skipped":false,"dir":"packages/client/tests"},{"name":"will create a v2 deployment with correct file permissions","suites":["create v2 deployment"],"updatePoint":{"line":89,"column":63},"line":89,"code":"  it('will create a v2 deployment with correct file permissions', async () => {\n    let error = null;\n    for await (const event of createDeployment(\n      {\n        token,\n        path: path.resolve(__dirname, 'fixtures', 'v2-file-permissions'),\n        skipAutoDetectionConfirmation: true,\n      },\n      {\n        name: 'now-client-tests-v2',\n        projectSettings: {\n          buildCommand: null,\n          devCommand: null,\n          outputDirectory: null,\n        },\n      }\n    )) {\n      if (event.type === 'ready') {\n        deployment = event.payload;\n        break;\n      } else if (event.type === 'error') {\n        error = event.payload;\n        console.error(error.message);\n        break;\n      }\n    }\n\n    expect(error).toBe(null);\n    expect(deployment.readyState).toEqual('READY');\n\n    const url = `https://${deployment.url}/api/index.js`;\n    console.log('testing url ' + url);\n    const response = await fetch_(url);\n    const text = await response.text();\n    expect(deployment.readyState).toEqual('READY');\n    expect(text).toContain('executed bash script');\n  });","file":"create-deployment.test.ts","skipped":false,"dir":"packages/client/tests"},{"name":"will create a v2 deployment and ignore files specified in .nowignore","suites":["create v2 deployment"],"updatePoint":{"line":127,"column":74},"line":127,"code":"  it('will create a v2 deployment and ignore files specified in .nowignore', async () => {\n    let error = null;\n    for await (const event of createDeployment(\n      {\n        token,\n        path: path.resolve(__dirname, 'fixtures', 'nowignore'),\n        skipAutoDetectionConfirmation: true,\n      },\n      {\n        name: 'now-client-tests-v2',\n        projectSettings: {\n          buildCommand: null,\n          devCommand: null,\n          outputDirectory: null,\n        },\n      }\n    )) {\n      if (event.type === 'ready') {\n        deployment = event.payload;\n        break;\n      } else if (event.type === 'error') {\n        error = event.payload;\n        console.error(error.message);\n        break;\n      }\n    }\n\n    expect(error).toBe(null);\n    expect(deployment.readyState).toEqual('READY');\n\n    const index = await fetch_(`https://${deployment.url}`);\n    expect(index.status).toBe(200);\n    expect(await index.text()).toBe('Hello World!');\n\n    const ignore1 = await fetch_(`https://${deployment.url}/ignore.txt`);\n    expect(ignore1.status).toBe(404);\n\n    const ignore2 = await fetch_(`https://${deployment.url}/folder/ignore.txt`);\n    expect(ignore2.status).toBe(404);\n\n    const ignore3 = await fetch_(\n      `https://${deployment.url}/node_modules/ignore.txt`\n    );\n    expect(ignore3.status).toBe(404);\n  });","file":"create-deployment.test.ts","skipped":false,"dir":"packages/client/tests"},{"name":"will fali with a relative path","suites":["path handling"],"updatePoint":{"line":11,"column":36},"line":11,"code":"  it('will fali with a relative path', async () => {\n    try {\n      await createDeployment(\n        {\n          token,\n          path: './fixtures/v2/now.json',\n        },\n        {\n          name: 'now-client-tests-v2',\n        }\n      );\n    } catch (e) {\n      expect(e.code).toEqual('invalid_path');\n    }\n  });","file":"paths.test.ts","skipped":false,"dir":"packages/client/tests"},{"name":"will fali with an array of relative paths","suites":["path handling"],"updatePoint":{"line":27,"column":47},"line":27,"code":"  it('will fali with an array of relative paths', async () => {\n    try {\n      await createDeployment(\n        {\n          token,\n          path: ['./fixtures/v2/now.json'],\n        },\n        {\n          name: 'now-client-tests-v2',\n        }\n      );\n    } catch (e) {\n      expect(e.code).toEqual('invalid_path');\n    }\n  });","file":"paths.test.ts","skipped":false,"dir":"packages/client/tests"},{"name":"should exclude files using `.nowignore` blocklist","suites":["buildFileTree()"],"updatePoint":{"line":19,"column":55},"line":19,"code":"  it('should exclude files using `.nowignore` blocklist', async () => {\n    const cwd = fixture('nowignore');\n    const { fileList, ignoreList } = await buildFileTree(\n      cwd,\n      { isDirectory: true },\n      noop\n    );\n\n    const expectedFileList = toAbsolutePaths(cwd, ['.nowignore', 'index.txt']);\n    expect(normalizeWindowsPaths(expectedFileList).sort()).toEqual(\n      normalizeWindowsPaths(fileList).sort()\n    );\n\n    const expectedIgnoreList = [\n      'ignore.txt',\n      'folder/ignore.txt',\n      'node_modules',\n    ];\n    expect(normalizeWindowsPaths(expectedIgnoreList).sort()).toEqual(\n      normalizeWindowsPaths(ignoreList).sort()\n    );\n  });","file":"unit.utils.test.ts","skipped":false,"dir":"packages/client/tests"},{"name":"should include symlinked files and directories","suites":["buildFileTree()"],"updatePoint":{"line":42,"column":52},"line":42,"code":"  it('should include symlinked files and directories', async () => {\n    const cwd = fixture('symlinks');\n    const { fileList } = await buildFileTree(cwd, { isDirectory: true }, noop);\n\n    const expectedFileList = toAbsolutePaths(cwd, [\n      'folder-link',\n      'folder/text.txt',\n      'index.txt',\n      'index-link.txt',\n    ]);\n    expect(normalizeWindowsPaths(expectedFileList).sort()).toEqual(\n      normalizeWindowsPaths(fileList).sort()\n    );\n\n    const [folderLinkPath, indexLinkPath] = await Promise.all([\n      fs.lstat(join(cwd, 'folder-link')),\n      fs.lstat(join(cwd, 'index-link.txt')),\n    ]);\n    expect(folderLinkPath.isSymbolicLink());\n    expect(folderLinkPath.isDirectory());\n    expect(indexLinkPath.isSymbolicLink());\n  });","file":"unit.utils.test.ts","skipped":false,"dir":"packages/client/tests"},{"name":"should include the node_modules using `.vercelignore` allowlist","suites":["buildFileTree()"],"updatePoint":{"line":65,"column":69},"line":65,"code":"  it('should include the node_modules using `.vercelignore` allowlist', async () => {\n    const cwd = fixture('vercelignore-allow-nodemodules');\n    const { fileList, ignoreList } = await buildFileTree(\n      cwd,\n      { isDirectory: true },\n      noop\n    );\n\n    const expected = toAbsolutePaths(cwd, [\n      'node_modules/one.txt',\n      'sub/node_modules/two.txt',\n      'sub/include.txt',\n      '.vercelignore',\n      'hello.txt',\n    ]);\n    expect(normalizeWindowsPaths(expected).sort()).toEqual(\n      normalizeWindowsPaths(fileList).sort()\n    );\n\n    const expectedIgnoreList = ['.env.local', 'exclude.txt'];\n    expect(normalizeWindowsPaths(expectedIgnoreList).sort()).toEqual(\n      normalizeWindowsPaths(ignoreList).sort()\n    );\n  });","file":"unit.utils.test.ts","skipped":false,"dir":"packages/client/tests"},{"name":"should find root files but ignore `.vercel/output` files when prebuilt=false","suites":["buildFileTree()"],"updatePoint":{"line":90,"column":82},"line":90,"code":"  it('should find root files but ignore `.vercel/output` files when prebuilt=false', async () => {\n    const cwd = fixture('file-system-api');\n    const { fileList, ignoreList } = await buildFileTree(\n      cwd,\n      { isDirectory: true, prebuilt: false },\n      noop\n    );\n\n    const expectedFileList = toAbsolutePaths(cwd, ['foo.txt', 'sub/bar.txt']);\n    expect(normalizeWindowsPaths(expectedFileList).sort()).toEqual(\n      normalizeWindowsPaths(fileList).sort()\n    );\n\n    const expectedIgnoreList = ['.vercel'];\n    expect(normalizeWindowsPaths(expectedIgnoreList).sort()).toEqual(\n      normalizeWindowsPaths(ignoreList).sort()\n    );\n  });","file":"unit.utils.test.ts","skipped":false,"dir":"packages/client/tests"},{"name":"should find `.vercel/output` files but ignore other files when prebuilt=true","suites":["buildFileTree()"],"updatePoint":{"line":109,"column":82},"line":109,"code":"  it('should find `.vercel/output` files but ignore other files when prebuilt=true', async () => {\n    const cwd = fixture('file-system-api');\n    const { fileList, ignoreList } = await buildFileTree(\n      cwd,\n      { isDirectory: true, prebuilt: true },\n      noop\n    );\n\n    const expectedFileList = toAbsolutePaths(cwd, [\n      '.vercel/output/static/baz.txt',\n      '.vercel/output/static/sub/qux.txt',\n    ]);\n    expect(normalizeWindowsPaths(expectedFileList).sort()).toEqual(\n      normalizeWindowsPaths(fileList).sort()\n    );\n\n    const expectedIgnoreList = ['foo.txt', 'sub'];\n    expect(normalizeWindowsPaths(expectedIgnoreList).sort()).toEqual(\n      normalizeWindowsPaths(ignoreList).sort()\n    );\n  });","file":"unit.utils.test.ts","skipped":false,"dir":"packages/client/tests"},{"name":"Should read `.nowignore`","suites":["Test `getVercelIgnore()`"],"updatePoint":{"line":6,"column":30},"line":6,"code":"  it('Should read `.nowignore`', async () => {\n    const fixture = join(__dirname, 'fixtures', 'nowignore');\n    const { ig } = await getVercelIgnore(fixture);\n    assert.equal(ig.ignores('ignore.txt'), true);\n    assert.equal(ig.ignores('keep.txt'), false);\n  });","file":"vercelignore.test.ts","skipped":false,"dir":"packages/client/tests"},{"name":"Should throw an error if `.vercelignore` and `.nowignore` exist","suites":["Test `getVercelIgnore()`"],"updatePoint":{"line":13,"column":69},"line":13,"code":"  it('Should throw an error if `.vercelignore` and `.nowignore` exist', async () => {\n    let err: Error | null = null;\n    const fixture = join(__dirname, 'fixtures', 'vercelignore-and-nowignore');\n    try {\n      await getVercelIgnore(fixture);\n    } catch (_err) {\n      err = _err;\n    }\n    assert(err);\n    assert.equal(\n      err!.message,\n      'Cannot use both a `.vercelignore` and `.nowignore` file. Please delete the `.nowignore` file.'\n    );\n  });","file":"vercelignore.test.ts","skipped":false,"dir":"packages/client/tests"},{"name":"ensure there is an example for every framework","suites":["frameworks"],"updatePoint":{"line":149,"column":52},"line":149,"code":"  it('ensure there is an example for every framework', async () => {\n    const root = join(__dirname, '..', '..', '..');\n    const getExample = (name: string) => join(root, 'examples', name);\n\n    const result = frameworkList\n      .map(f => f.slug)\n      .filter(isString)\n      .filter(f => existsSync(getExample(f)) === false);\n\n    expect(result).toEqual([]);\n  });","file":"frameworks.unit.test.ts","skipped":false,"dir":"packages/frameworks/test"},{"name":"ensure schema","suites":["frameworks"],"updatePoint":{"line":161,"column":19},"line":161,"code":"  it('ensure schema', async () => {\n    const ajv = new Ajv();\n    const result = ajv.validate(Schema, frameworkList);\n\n    if (ajv.errors) {\n      console.error(ajv.errors);\n    }\n\n    expect(result).toBe(true);\n  });","file":"frameworks.unit.test.ts","skipped":false,"dir":"packages/frameworks/test"},{"name":"ensure logo","suites":["frameworks"],"updatePoint":{"line":172,"column":17},"line":172,"code":"  it('ensure logo', async () => {\n    const missing = frameworkList\n      .map(f => f.logo)\n      .filter(url => {\n        const prefix =\n          'https://raw.githubusercontent.com/vercel/vercel/main/packages/frameworks/logos/';\n        const name = url.replace(prefix, '');\n        return existsSync(join(__dirname, '..', 'logos', name)) === false;\n      });\n\n    expect(missing).toEqual([]);\n  });","file":"frameworks.unit.test.ts","skipped":false,"dir":"packages/frameworks/test"},{"name":"ensure unique sort number","suites":["frameworks"],"updatePoint":{"line":185,"column":31},"line":185,"code":"  it('ensure unique sort number', async () => {\n    const sortNumToSlug = new Map<number, string | null>();\n    frameworkList.forEach(f => {\n      if (f.sort) {\n        const duplicateSlug = sortNumToSlug.get(f.sort);\n        expect(duplicateSlug).toStrictEqual(undefined);\n        sortNumToSlug.set(f.sort, f.slug);\n      }\n    });\n  });","file":"frameworks.unit.test.ts","skipped":false,"dir":"packages/frameworks/test"},{"name":"ensure unique slug","suites":["frameworks"],"updatePoint":{"line":196,"column":24},"line":196,"code":"  it('ensure unique slug', async () => {\n    const slugs = new Set<string>();\n    for (const { slug } of frameworkList) {\n      if (typeof slug === 'string') {\n        assert(!slugs.has(slug), `Slug \"${slug}\" is not unique`);\n        slugs.add(slug);\n      }\n    }\n  });","file":"frameworks.unit.test.ts","skipped":false,"dir":"packages/frameworks/test"},{"name":"ensure all demo URLs are \"public\"","suites":["frameworks"],"updatePoint":{"line":206,"column":39},"line":206,"code":"  it('ensure all demo URLs are \"public\"', async () => {\n    await Promise.all(\n      frameworkList\n        .filter(f => typeof f.demo === 'string')\n        .map(async f => {\n          const url = new URL(f.demo!);\n          const deployment = await getDeployment(url.hostname);\n          assert.equal(\n            deployment.public,\n            true,\n            `Demo URL ${f.demo} is not \"public\"`\n          );\n        })\n    );\n  });","file":"frameworks.unit.test.ts","skipped":false,"dir":"packages/frameworks/test"},{"name":"should build ","suites":[],"updatePoint":{"line":28,"column":29,"index":852},"line":28,"code":"  it(`should build ${fixture}`, async () => {\n    await expect(testDeployment({\n      builderUrl,\n      buildUtilsUrl\n    }, path.join(fixturesPath, fixture))).resolves.toBeDefined();\n  });","file":"test.js","skipped":false,"dir":"packages/go/test"},{"name":"port binding","suites":[],"updatePoint":{"line":11,"column":18,"index":137},"line":11,"code":"test('port binding', async () => {\n  const server = new Server();\n  const bridge = new Bridge(server);\n  bridge.listen(); // Test port binding\n\n  const info = await bridge.listening;\n  assert.equal(info.address, '127.0.0.1');\n  assert.equal(typeof info.port, 'number');\n  server.close();\n});","file":"bridge.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"`APIGatewayProxyEvent` normalizing","suites":[],"updatePoint":{"line":21,"column":40,"index":451},"line":21,"code":"test('`APIGatewayProxyEvent` normalizing', async () => {\n  const server = new Server((req, res) => res.end(JSON.stringify({\n    method: req.method,\n    path: req.url,\n    headers: req.headers\n  })));\n  const bridge = new Bridge(server);\n  bridge.listen();\n  const context = {};\n  const result = await bridge.launcher({\n    httpMethod: 'GET',\n    headers: {\n      foo: 'bar'\n    },\n    path: '/apigateway',\n    body: null\n  }, context);\n  assert.equal(result.encoding, 'base64');\n  assert.equal(result.statusCode, 200);\n  const body = JSON.parse(Buffer.from(result.body, 'base64').toString());\n  assert.equal(body.method, 'GET');\n  assert.equal(body.path, '/apigateway');\n  assert.equal(body.headers.foo, 'bar');\n  assert.equal(context.callbackWaitsForEmptyEventLoop, false);\n  server.close();\n});","file":"bridge.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"`NowProxyEvent` normalizing","suites":[],"updatePoint":{"line":47,"column":33,"index":1241},"line":47,"code":"test('`NowProxyEvent` normalizing', async () => {\n  const server = new Server((req, res) => res.end(JSON.stringify({\n    method: req.method,\n    path: req.url,\n    headers: req.headers\n  })));\n  const bridge = new Bridge(server);\n  bridge.listen();\n  const context = {\n    callbackWaitsForEmptyEventLoop: true\n  };\n  const result = await bridge.launcher({\n    Action: 'Invoke',\n    body: JSON.stringify({\n      method: 'POST',\n      headers: {\n        foo: 'baz'\n      },\n      path: '/nowproxy',\n      body: 'body=1'\n    })\n  }, context);\n  assert.equal(result.encoding, 'base64');\n  assert.equal(result.statusCode, 200);\n  const body = JSON.parse(Buffer.from(result.body, 'base64').toString());\n  assert.equal(body.method, 'POST');\n  assert.equal(body.path, '/nowproxy');\n  assert.equal(body.headers.foo, 'baz');\n  assert.equal(context.callbackWaitsForEmptyEventLoop, false);\n  server.close();\n});","file":"bridge.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"multi-payload handling","suites":[],"updatePoint":{"line":78,"column":28,"index":2136},"line":78,"code":"test('multi-payload handling', async () => {\n  const server = new Server((req, res) => {\n    res.setHeader('content-type', req.url.includes('_next/data') ? 'application/json' : 'text/html');\n    res.end(JSON.stringify({\n      method: req.method,\n      path: req.url,\n      headers: req.headers\n    }));\n  });\n  const bridge = new Bridge(server);\n  bridge.listen();\n  const context = {\n    callbackWaitsForEmptyEventLoop: true\n  };\n  const result = await bridge.launcher({\n    Action: 'Invoke',\n    body: JSON.stringify({\n      payloads: [{\n        method: 'GET',\n        headers: {\n          foo: 'baz'\n        },\n        path: '/nowproxy'\n      }, {\n        method: 'GET',\n        headers: {\n          foo: 'baz'\n        },\n        path: '/_next/data/build-id/nowproxy.json'\n      }]\n    })\n  }, context);\n  assert.equal(result.encoding, 'base64');\n  assert.equal(result.statusCode, 200);\n  assert.equal(result.headers['content-type'], 'multipart/mixed; boundary=\"payload-separator\"');\n  const bodies = [];\n  const payloadParts = result.body.split('\\r\\n');\n  payloadParts.forEach(item => {\n    if (item.trim() && !item.startsWith('content-type:') && !item.startsWith('--payload')) {\n      bodies.push(JSON.parse(Buffer.from(item.split('--payload-separator')[0], 'base64').toString()));\n    }\n  });\n  assert.equal(bodies[0].method, 'GET');\n  assert.equal(bodies[0].path, '/nowproxy');\n  assert.equal(bodies[0].headers.foo, 'baz');\n  assert.equal(bodies[1].method, 'GET');\n  assert.equal(bodies[1].path, '/_next/data/build-id/nowproxy.json');\n  assert.equal(bodies[1].headers.foo, 'baz');\n  assert.equal(context.callbackWaitsForEmptyEventLoop, false);\n  server.close();\n});","file":"bridge.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"consumeEvent","suites":[],"updatePoint":{"line":129,"column":18,"index":3799},"line":129,"code":"test('consumeEvent', async () => {\n  const mockListener = jest.fn((req, res) => {\n    res.end('hello');\n  });\n  const server = new Server(mockListener);\n  const bridge = new Bridge(server, true);\n  bridge.listen();\n  const context = {\n    callbackWaitsForEmptyEventLoop: true\n  };\n  await bridge.launcher({\n    Action: 'Invoke',\n    body: JSON.stringify({\n      method: 'POST',\n      headers: {\n        foo: 'baz'\n      },\n      path: '/nowproxy',\n      body: 'body=1'\n    })\n  }, context);\n  const headers = mockListener.mock.calls[0][0].headers;\n  const reqId = headers['x-now-bridge-request-id'];\n  expect(reqId).toBeTruthy();\n  const event = bridge.consumeEvent(reqId);\n  expect(event.body.toString()).toBe('body=1'); // an event can't be consumed multiple times\n  // to avoid memory leaks\n\n  expect(bridge.consumeEvent(reqId)).toBeUndefined();\n  server.close();\n});","file":"bridge.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"consumeEvent and handle decoded path","suites":[],"updatePoint":{"line":160,"column":42,"index":4694},"line":160,"code":"test('consumeEvent and handle decoded path', async () => {\n  const mockListener = jest.fn((req, res) => {\n    res.end('hello');\n  });\n  const server = new Server(mockListener);\n  const bridge = new Bridge(server, true);\n  bridge.listen();\n  const context = {\n    callbackWaitsForEmptyEventLoop: true\n  };\n  await bridge.launcher({\n    Action: 'Invoke',\n    body: JSON.stringify({\n      method: 'POST',\n      headers: {\n        foo: 'baz'\n      },\n      path: '/now proxy',\n      body: 'body=1'\n    })\n  }, context);\n  const headers = mockListener.mock.calls[0][0].headers;\n  const reqId = headers['x-now-bridge-request-id'];\n  expect(reqId).toBeTruthy();\n  const event = bridge.consumeEvent(reqId);\n  expect(event.body.toString()).toBe('body=1'); // an event can't be consumed multiple times\n  // to avoid memory leaks\n\n  expect(bridge.consumeEvent(reqId)).toBeUndefined();\n  server.close();\n});","file":"bridge.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"invalid request headers","suites":[],"updatePoint":{"line":191,"column":29,"index":5577},"line":191,"code":"test('invalid request headers', async () => {\n  const server = new Server((req, res) => res.end(JSON.stringify({\n    method: req.method,\n    path: req.url,\n    headers: req.headers\n  })));\n  const bridge = new Bridge(server);\n  bridge.listen();\n  const context = {\n    callbackWaitsForEmptyEventLoop: true\n  };\n  const result = await bridge.launcher({\n    Action: 'Invoke',\n    body: JSON.stringify({\n      method: 'GET',\n      headers: {\n        foo: 'baz\\n',\n        ok: 'true'\n      },\n      path: '/nowproxy',\n      body: 'body=1'\n    })\n  }, context);\n  assert.equal(result.encoding, 'base64');\n  assert.equal(result.statusCode, 200);\n  const body = JSON.parse(Buffer.from(result.body, 'base64').toString());\n  assert.equal(body.method, 'GET');\n  assert.equal(body.path, '/nowproxy');\n  assert.equal(body.headers.ok, 'true');\n  assert(!body.headers.foo);\n  assert.equal(context.callbackWaitsForEmptyEventLoop, false);\n  server.close();\n});","file":"bridge.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"should call consumeEvent with the correct reqId","suites":["contract with @vercel/node-bridge"],"updatePoint":{"line":49,"column":55,"index":1139},"line":49,"code":"  test('should call consumeEvent with the correct reqId', async () => {\n    await fetchWithProxyReq(`${url}/`);\n    expect(consumeEventMock).toHaveBeenLastCalledWith('2');\n  });","file":"helpers.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"should not expose the request id header","suites":["contract with @vercel/node-bridge"],"updatePoint":{"line":53,"column":47,"index":1309},"line":53,"code":"  test('should not expose the request id header', async () => {\n    await fetchWithProxyReq(`${url}/`, {\n      headers: {\n        'x-test-header': 'ok'\n      }\n    });\n    const [{\n      headers\n    }] = mockListener.mock.calls[0];\n    expect(headers['x-now-bridge-request-id']).toBeUndefined();\n    expect(headers['x-test-header']).toBe('ok');\n  });","file":"helpers.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"should not recalculate req properties twice","suites":["all helpers"],"updatePoint":{"line":68,"column":51,"index":1824},"line":68,"code":"  test('should not recalculate req properties twice', async () => {\n    const spy = jest.fn(() => {});\n    const nowReqHelpers = nowHelpers.filter(([, i]) => i === 0);\n    mockListener.mockImplementation((req, res) => {\n      spy(...nowReqHelpers.map(h => req[h]));\n      spy(...nowReqHelpers.map(h => req[h]));\n      res.end();\n    });\n    await fetchWithProxyReq(`${url}/?who=bill`, {\n      method: 'POST',\n      body: JSON.stringify({\n        who: 'mike'\n      }),\n      headers: {\n        'content-type': 'application/json',\n        cookie: 'who=jim'\n      }\n    }); // here we test that bodySpy is called twice with exactly the same arguments\n\n    for (let i = 0; i < 3; i += 1) {\n      expect(spy.mock.calls[0][i]).toBe(spy.mock.calls[1][i]);\n    }\n  });","file":"helpers.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"should be able to overwrite request properties","suites":["all helpers"],"updatePoint":{"line":91,"column":54,"index":2588},"line":91,"code":"  test('should be able to overwrite request properties', async () => {\n    const spy = jest.fn(() => {});\n    mockListener.mockImplementation((...args) => {\n      nowHelpers.forEach(([prop, n]) => {\n        /* eslint-disable */\n        args[n][prop] = 'ok';\n        args[n][prop] = 'ok2';\n        spy(args[n][prop]);\n      });\n      args[1].end();\n    });\n    await fetchWithProxyReq(url);\n    nowHelpers.forEach((_, i) => expect(spy.mock.calls[i][0]).toBe('ok2'));\n  });","file":"helpers.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"should be able to reconfig request properties","suites":["all helpers"],"updatePoint":{"line":105,"column":53,"index":3059},"line":105,"code":"  test('should be able to reconfig request properties', async () => {\n    const spy = jest.fn(() => {});\n    mockListener.mockImplementation((...args) => {\n      nowHelpers.forEach(([prop, n]) => {\n        // eslint-disable-next-line\n        Object.defineProperty(args[n], prop, {\n          value: 'ok'\n        });\n        Object.defineProperty(args[n], prop, {\n          value: 'ok2'\n        });\n        spy(args[n][prop]);\n      });\n      args[1].end();\n    });\n    await fetchWithProxyReq(url);\n    nowHelpers.forEach((_, i) => expect(spy.mock.calls[i][0]).toBe('ok2'));\n  });","file":"helpers.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"req.query should reflect querystring in the url","suites":["req.query"],"updatePoint":{"line":125,"column":55,"index":3675},"line":125,"code":"  test('req.query should reflect querystring in the url', async () => {\n    await fetchWithProxyReq(`${url}/?who=bill&where=us`);\n    expect(mockListener.mock.calls[0][0].query).toMatchObject({\n      who: 'bill',\n      where: 'us'\n    });\n  });","file":"helpers.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"req.query should turn multiple params with same name into an array","suites":["req.query"],"updatePoint":{"line":132,"column":74,"index":3939},"line":132,"code":"  test('req.query should turn multiple params with same name into an array', async () => {\n    await fetchWithProxyReq(`${url}/?a=2&a=1`);\n    expect(mockListener.mock.calls[0][0].query).toMatchObject({\n      a: ['2', '1']\n    });\n  });","file":"helpers.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"req.query should be {} when there is no querystring","suites":["req.query"],"updatePoint":{"line":138,"column":59,"index":4161},"line":138,"code":"  test('req.query should be {} when there is no querystring', async () => {\n    await fetchWithProxyReq(url);\n    const [{\n      query\n    }] = mockListener.mock.calls[0];\n    expect(Object.keys(query).length).toBe(0);\n  });","file":"helpers.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"req.cookies should reflect req.cookie header","suites":["req.cookies"],"updatePoint":{"line":147,"column":52,"index":4415},"line":147,"code":"  test('req.cookies should reflect req.cookie header', async () => {\n    await fetchWithProxyReq(url, {\n      headers: {\n        cookie: 'who=bill; where=us'\n      }\n    });\n    expect(mockListener.mock.calls[0][0].cookies).toMatchObject({\n      who: 'bill',\n      where: 'us'\n    });\n  });","file":"helpers.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"req.body should be undefined by default","suites":["req.body"],"updatePoint":{"line":160,"column":47,"index":4734},"line":160,"code":"  test('req.body should be undefined by default', async () => {\n    await fetchWithProxyReq(url);\n    expect(mockListener.mock.calls[0][0].body).toBe(undefined);\n  });","file":"helpers.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"req.body should be undefined if content-type is not defined","suites":["req.body"],"updatePoint":{"line":164,"column":67,"index":4922},"line":164,"code":"  test('req.body should be undefined if content-type is not defined', async () => {\n    await fetchWithProxyReq(url, {\n      method: 'POST',\n      body: 'hello'\n    });\n    expect(mockListener.mock.calls[0][0].body).toBe(undefined);\n  });","file":"helpers.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"req.body should be a string when content-type is `text/plain`","suites":["req.body"],"updatePoint":{"line":171,"column":69,"index":5163},"line":171,"code":"  test('req.body should be a string when content-type is `text/plain`', async () => {\n    await fetchWithProxyReq(url, {\n      method: 'POST',\n      body: 'hello',\n      headers: {\n        'content-type': 'text/plain'\n      }\n    });\n    expect(mockListener.mock.calls[0][0].body).toBe('hello');\n  });","file":"helpers.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"req.body should be a buffer when content-type is `application/octet-stream`","suites":["req.body"],"updatePoint":{"line":181,"column":83,"index":5479},"line":181,"code":"  test('req.body should be a buffer when content-type is `application/octet-stream`', async () => {\n    await fetchWithProxyReq(url, {\n      method: 'POST',\n      body: 'hello',\n      headers: {\n        'content-type': 'application/octet-stream'\n      }\n    });\n    const [{\n      body\n    }] = mockListener.mock.calls[0];\n    const str = body.toString();\n    expect(Buffer.isBuffer(body)).toBe(true);\n    expect(str).toBe('hello');\n  });","file":"helpers.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"req.body should be an object when content-type is `application/x-www-form-urlencoded`","suites":["req.body"],"updatePoint":{"line":196,"column":93,"index":5928},"line":196,"code":"  test('req.body should be an object when content-type is `application/x-www-form-urlencoded`', async () => {\n    const obj = {\n      who: 'mike'\n    };\n    await fetchWithProxyReq(url, {\n      method: 'POST',\n      body: qs.encode(obj),\n      headers: {\n        'content-type': 'application/x-www-form-urlencoded'\n      }\n    });\n    expect(mockListener.mock.calls[0][0].body).toMatchObject(obj);\n  });","file":"helpers.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"req.body should be an object when content-type is `application/json`","suites":["req.body"],"updatePoint":{"line":209,"column":76,"index":6315},"line":209,"code":"  test('req.body should be an object when content-type is `application/json`', async () => {\n    const json = {\n      who: 'bill',\n      where: 'us'\n    };\n    await fetchWithProxyReq(url, {\n      method: 'POST',\n      body: JSON.stringify(json),\n      headers: {\n        'content-type': 'application/json'\n      }\n    });\n    expect(mockListener.mock.calls[0][0].body).toMatchObject(json);\n  });","file":"helpers.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"should work when body is empty and content-type is `application/json`","suites":["req.body"],"updatePoint":{"line":223,"column":77,"index":6713},"line":223,"code":"  test('should work when body is empty and content-type is `application/json`', async () => {\n    mockListener.mockImplementation((req, res) => {\n      console.log(req.body);\n      res.end();\n    });\n    const res = await fetchWithProxyReq(url, {\n      method: 'POST',\n      body: '',\n      headers: {\n        'content-type': 'application/json'\n      }\n    });\n    expect(res.status).toBe(200);\n    expect(res.body).toMatchObject({});\n  });","file":"helpers.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"should be able to try/catch parse errors","suites":["req.body"],"updatePoint":{"line":238,"column":48,"index":7125},"line":238,"code":"  test('should be able to try/catch parse errors', async () => {\n    const bodySpy = jest.fn(() => {});\n    mockListener.mockImplementation((req, res) => {\n      try {\n        if (req.body === undefined) res.status(400);\n      } catch (error) {\n        bodySpy(error);\n      } finally {\n        res.end();\n      }\n    });\n    await fetchWithProxyReq(url, {\n      method: 'POST',\n      body: '{\"wrong\":\"json\"',\n      headers: {\n        'content-type': 'application/json'\n      }\n    });\n    expect(bodySpy).toHaveBeenCalled();\n    const [error] = bodySpy.mock.calls[0];\n    expect(error.message).toMatch(/invalid json/i);\n    expect(error.statusCode).toBe(400);\n  });","file":"helpers.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"res.status() should set the status code","suites":["res.status"],"updatePoint":{"line":263,"column":47,"index":7826},"line":263,"code":"  test('res.status() should set the status code', async () => {\n    mockListener.mockImplementation((req, res) => {\n      res.status(404);\n      res.end();\n    });\n    const res = await fetchWithProxyReq(url);\n    expect(res.status).toBe(404);\n  });","file":"helpers.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"res.status() should be chainable","suites":["res.status"],"updatePoint":{"line":271,"column":40,"index":8069},"line":271,"code":"  test('res.status() should be chainable', async () => {\n    const spy = jest.fn();\n    mockListener.mockImplementation((req, res) => {\n      spy(res, res.status(404));\n      res.end();\n    });\n    await fetchWithProxyReq(url);\n    const [a, b] = spy.mock.calls[0];\n    expect(a).toBe(b);\n  });","file":"helpers.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"should redirect to login","suites":["res.redirect"],"updatePoint":{"line":283,"column":32,"index":8393},"line":283,"code":"  test('should redirect to login', async () => {\n    mockListener.mockImplementation((req, res) => {\n      res.redirect('/login');\n      res.end();\n    });\n    const res = await fetchWithProxyReq(url, {\n      redirect: 'manual'\n    });\n    expect(res.status).toBe(307);\n    expect(res.headers.get('location')).toBe(url + '/login');\n  });","file":"helpers.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"should redirect with status code 301","suites":["res.redirect"],"updatePoint":{"line":294,"column":44,"index":8743},"line":294,"code":"  test('should redirect with status code 301', async () => {\n    mockListener.mockImplementation((req, res) => {\n      res.redirect(301, '/login');\n      res.end();\n    });\n    const res = await fetchWithProxyReq(url, {\n      redirect: 'manual'\n    });\n    expect(res.status).toBe(301);\n    expect(res.headers.get('location')).toBe(url + '/login');\n  });","file":"helpers.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"should show friendly error for invalid redirect","suites":["res.redirect"],"updatePoint":{"line":305,"column":55,"index":9109},"line":305,"code":"  test('should show friendly error for invalid redirect', async () => {\n    let error;\n    mockListener.mockImplementation((req, res) => {\n      try {\n        res.redirect(307);\n      } catch (err) {\n        error = err;\n      }\n\n      res.end();\n    });\n    await fetchWithProxyReq(url, {\n      redirect: 'manual'\n    });\n    expect(error.message).toBe(`Invalid redirect arguments. Please use a single argument URL, e.g. res.redirect('/destination') or use a status code and URL, e.g. res.redirect(307, '/destination').`);\n  });","file":"helpers.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"should show friendly error in case of passing null as first argument redirect","suites":["res.redirect"],"updatePoint":{"line":321,"column":85,"index":9669},"line":321,"code":"  test('should show friendly error in case of passing null as first argument redirect', async () => {\n    let error;\n    mockListener.mockImplementation((req, res) => {\n      try {\n        res.redirect(null);\n      } catch (err) {\n        error = err;\n      }\n\n      res.end();\n    });\n    await fetchWithProxyReq(url, {\n      redirect: 'manual'\n    });\n    expect(error.message).toBe(`Invalid redirect arguments. Please use a single argument URL, e.g. res.redirect('/destination') or use a status code and URL, e.g. res.redirect(307, '/destination').`);\n  });","file":"helpers.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"should be chainable","suites":["res.send"],"updatePoint":{"line":341,"column":27,"index":10318},"line":341,"code":"  test('should be chainable', async () => {\n    const spy = jest.fn();\n    mockListener.mockImplementation((req, res) => {\n      spy(res, res.send('hello'));\n    });\n    await fetchWithProxyReq(url);\n    const [a, b] = spy.mock.calls[0];\n    expect(a).toBe(b);\n  });","file":"helpers.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"should set body to \"\"","suites":["res.send","res.send()"],"updatePoint":{"line":351,"column":31,"index":10622},"line":351,"code":"    test('should set body to \"\"', async () => {\n      mockListener.mockImplementation((req, res) => {\n        res.send();\n      });\n      const res = await fetchWithProxyReq(url);\n      expect(res.status).toBe(200);\n      expect(await res.text()).toBe('');\n    });","file":"helpers.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"should set body to \"\"","suites":["res.send",".send(null)"],"updatePoint":{"line":361,"column":31,"index":10927},"line":361,"code":"    test('should set body to \"\"', async () => {\n      mockListener.mockImplementation((req, res) => {\n        res.send(null);\n      });\n      const res = await fetchWithProxyReq(url);\n      expect(res.status).toBe(200);\n      expect(res.headers.get('content-length')).toBe('0');\n      expect(await res.text()).toBe('');\n    });","file":"helpers.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"should set body to \"\"","suites":["res.send",".send(undefined)"],"updatePoint":{"line":372,"column":31,"index":11300},"line":372,"code":"    test('should set body to \"\"', async () => {\n      mockListener.mockImplementation((req, res) => {\n        res.send(undefined);\n      });\n      const res = await fetchWithProxyReq(url);\n      expect(res.status).toBe(200);\n      expect(await res.text()).toBe('');\n    });","file":"helpers.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"should send as html","suites":["res.send",".send(String)"],"updatePoint":{"line":382,"column":29,"index":11614},"line":382,"code":"    test('should send as html', async () => {\n      mockListener.mockImplementation((req, res) => {\n        res.send('<p>hey</p>');\n      });\n      const res = await fetchWithProxyReq(url);\n      expect(res.headers.get('content-type')).toBe('text/html; charset=utf-8');\n      expect(await res.text()).toBe('<p>hey</p>');\n    });","file":"helpers.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"should set Content-Length","suites":["res.send",".send(String)"],"updatePoint":{"line":390,"column":35,"index":11949},"line":390,"code":"    test('should set Content-Length', async () => {\n      mockListener.mockImplementation((req, res) => {\n        res.send('½ + ¼ = ¾');\n      });\n      const res = await fetchWithProxyReq(url);\n      expect(res.status).toBe(200);\n      expect(Number(res.headers.get('content-length'))).toBe(12);\n      expect(await res.text()).toBe('½ + ¼ = ¾');\n    });","file":"helpers.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"should set ETag","suites":["res.send",".send(String)"],"updatePoint":{"line":399,"column":25,"index":12294},"line":399,"code":"    test('should set ETag', async () => {\n      mockListener.mockImplementation((req, res) => {\n        res.send(Array(1000).join('-'));\n      });\n      const res = await fetchWithProxyReq(url);\n      expect(res.status).toBe(200);\n      expect(res.headers.get('ETag')).toBe('W/\"3e7-qPnkJ3CVdVhFJQvUBfF10TmVA7g\"');\n    });","file":"helpers.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"should not override Content-Type","suites":["res.send",".send(String)"],"updatePoint":{"line":407,"column":42,"index":12633},"line":407,"code":"    test('should not override Content-Type', async () => {\n      mockListener.mockImplementation((req, res) => {\n        res.setHeader('Content-Type', 'text/plain');\n        res.send('hey');\n      });\n      const res = await fetchWithProxyReq(url);\n      expect(res.status).toBe(200);\n      expect(res.headers.get('Content-Type')).toBe('text/plain; charset=utf-8');\n      expect(await res.text()).toBe('hey');\n    });","file":"helpers.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"should override charset in Content-Type","suites":["res.send",".send(String)"],"updatePoint":{"line":417,"column":49,"index":13058},"line":417,"code":"    test('should override charset in Content-Type', async () => {\n      mockListener.mockImplementation((req, res) => {\n        res.setHeader('Content-Type', 'text/plain; charset=iso-8859-1');\n        res.send('hey');\n      });\n      const res = await fetchWithProxyReq(url);\n      expect(res.status).toBe(200);\n      expect(res.headers.get('Content-Type')).toBe('text/plain; charset=utf-8');\n      expect(await res.text()).toBe('hey');\n    });","file":"helpers.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"should keep charset in Content-Type","suites":["res.send",".send(Buffer)"],"updatePoint":{"line":429,"column":45,"index":13541},"line":429,"code":"    test('should keep charset in Content-Type', async () => {\n      mockListener.mockImplementation((req, res) => {\n        res.setHeader('Content-Type', 'text/plain; charset=iso-8859-1');\n        res.send(Buffer.from('hi'));\n      });\n      const res = await fetchWithProxyReq(url);\n      expect(res.status).toBe(200);\n      expect(res.headers.get('Content-Type')).toBe('text/plain; charset=iso-8859-1');\n      expect(await res.text()).toBe('hi');\n    });","file":"helpers.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"should set Content-Length","suites":["res.send",".send(Buffer)"],"updatePoint":{"line":439,"column":35,"index":13988},"line":439,"code":"    test('should set Content-Length', async () => {\n      mockListener.mockImplementation((req, res) => {\n        res.send(Buffer.from('½ + ¼ = ¾'));\n      });\n      const res = await fetchWithProxyReq(url);\n      expect(res.status).toBe(200);\n      expect(Number(res.headers.get('content-length'))).toBe(12);\n      expect(await res.text()).toBe('½ + ¼ = ¾');\n    });","file":"helpers.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"should send as octet-stream","suites":["res.send",".send(Buffer)"],"updatePoint":{"line":448,"column":37,"index":14358},"line":448,"code":"    test('should send as octet-stream', async () => {\n      mockListener.mockImplementation((req, res) => {\n        res.send(Buffer.from('hello'));\n      });\n      const res = await fetchWithProxyReq(url);\n      expect(res.status).toBe(200);\n      expect(res.headers.get('Content-Type')).toBe('application/octet-stream');\n      expect((await res.buffer()).toString('hex')).toBe(Buffer.from('hello').toString('hex'));\n    });","file":"helpers.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"should set ETag","suites":["res.send",".send(Buffer)"],"updatePoint":{"line":457,"column":25,"index":14771},"line":457,"code":"    test('should set ETag', async () => {\n      mockListener.mockImplementation((req, res) => {\n        res.send(Buffer.alloc(999, '-'));\n      });\n      const res = await fetchWithProxyReq(url);\n      expect(res.status).toBe(200);\n      expect(res.headers.get('ETag')).toBe('W/\"3e7-qPnkJ3CVdVhFJQvUBfF10TmVA7g\"');\n    });","file":"helpers.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"should not override Content-Type","suites":["res.send",".send(Buffer)"],"updatePoint":{"line":465,"column":42,"index":15111},"line":465,"code":"    test('should not override Content-Type', async () => {\n      mockListener.mockImplementation((req, res) => {\n        res.setHeader('Content-Type', 'text/plain; charset=utf-8');\n        res.send(Buffer.from('hey'));\n      });\n      const res = await fetchWithProxyReq(url);\n      expect(res.status).toBe(200);\n      expect(res.headers.get('Content-Type')).toBe('text/plain; charset=utf-8');\n      expect(await res.text()).toBe('hey');\n    });","file":"helpers.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"should not override ETag","suites":["res.send",".send(Buffer)"],"updatePoint":{"line":475,"column":34,"index":15549},"line":475,"code":"    test('should not override ETag', async () => {\n      mockListener.mockImplementation((req, res) => {\n        res.setHeader('ETag', '\"foo\"');\n        res.send(Buffer.from('hey'));\n      });\n      const res = await fetchWithProxyReq(url);\n      expect(res.status).toBe(200);\n      expect(res.headers.get('ETag')).toBe('\"foo\"');\n      expect(await res.text()).toBe('hey');\n    });","file":"helpers.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"should send as application/json","suites":["res.send",".send(Object)"],"updatePoint":{"line":487,"column":41,"index":15980},"line":487,"code":"    test('should send as application/json', async () => {\n      mockListener.mockImplementation((req, res) => {\n        res.send({\n          name: 'tobi'\n        });\n      });\n      const res = await fetchWithProxyReq(url);\n      expect(res.status).toBe(200);\n      expect(res.headers.get('Content-Type')).toBe('application/json; charset=utf-8');\n      expect(await res.text()).toBe('{\"name\":\"tobi\"}');\n    });","file":"helpers.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"should ignore the body","suites":["res.send","when the request method is HEAD"],"updatePoint":{"line":500,"column":32,"index":16442},"line":500,"code":"    test('should ignore the body', async () => {\n      mockListener.mockImplementation((req, res) => {\n        res.send('yay');\n      }); // TODO: fix this test\n      // node-fetch is automatically ignoring the body so this test will never fail\n\n      const res = await fetchWithProxyReq(url, {\n        method: 'HEAD'\n      });\n      expect(res.status).toBe(200);\n      expect((await res.buffer()).toString()).toBe('');\n    });","file":"helpers.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"should strip Content-* fields, Transfer-Encoding field, and body","suites":["res.send","when .statusCode is 204"],"updatePoint":{"line":514,"column":74,"index":16964},"line":514,"code":"    test('should strip Content-* fields, Transfer-Encoding field, and body', async () => {\n      mockListener.mockImplementation((req, res) => {\n        res.statusCode = 204;\n        res.setHeader('Transfer-Encoding', 'chunked');\n        res.send('foo');\n      });\n      const res = await fetchWithProxyReq(url);\n      expect(res.status).toBe(204);\n      expect(res.headers.get('Content-Type')).toBe(null);\n      expect(res.headers.get('Content-Length')).toBe(null);\n      expect(res.headers.get('Transfer-Encoding')).toBe(null);\n      expect(await res.text()).toBe('');\n    });","file":"helpers.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"should strip Content-* fields, Transfer-Encoding field, and body","suites":["res.send","when .statusCode is 304"],"updatePoint":{"line":529,"column":74,"index":17595},"line":529,"code":"    test('should strip Content-* fields, Transfer-Encoding field, and body', async () => {\n      mockListener.mockImplementation((req, res) => {\n        res.statusCode = 304;\n        res.setHeader('Transfer-Encoding', 'chunked');\n        res.send('foo');\n      });\n      const res = await fetchWithProxyReq(url);\n      expect(res.status).toBe(304);\n      expect(res.headers.get('Content-Type')).toBe(null);\n      expect(res.headers.get('Content-Length')).toBe(null);\n      expect(res.headers.get('Transfer-Encoding')).toBe(null);\n      expect(await res.text()).toBe('');\n    });","file":"helpers.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"should send ETag","suites":["res.send","etag"],"updatePoint":{"line":579,"column":26,"index":19404},"line":579,"code":"    test('should send ETag', async () => {\n      mockListener.mockImplementation((req, res) => {\n        res.send('kajdslfkasdf');\n      });\n      const res = await fetchWithProxyReq(url);\n      expect(res.status).toBe(200);\n      expect(res.headers.get('ETag')).toBe('W/\"c-IgR/L5SF7CJQff4wxKGF/vfPuZ0\"');\n    });","file":"helpers.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"should send ETag for empty string response","suites":["res.send","etag"],"updatePoint":{"line":587,"column":52,"index":19744},"line":587,"code":"    test('should send ETag for empty string response', async () => {\n      mockListener.mockImplementation((req, res) => {\n        res.send('');\n      });\n      const res = await fetchWithProxyReq(url);\n      expect(res.status).toBe(200);\n      expect(res.headers.get('ETag')).toBe('W/\"0-2jmj7l5rSw0yVb/vlWAYkK/YBwk\"');\n    });","file":"helpers.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"should send ETag for long response","suites":["res.send","etag"],"updatePoint":{"line":595,"column":44,"index":20064},"line":595,"code":"    test('should send ETag for long response', async () => {\n      mockListener.mockImplementation((req, res) => {\n        res.send(Array(1000).join('-'));\n      });\n      const res = await fetchWithProxyReq(url);\n      expect(res.status).toBe(200);\n      expect(res.headers.get('ETag')).toBe('W/\"3e7-qPnkJ3CVdVhFJQvUBfF10TmVA7g\"');\n    });","file":"helpers.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"should not override ETag when manually set","suites":["res.send","etag"],"updatePoint":{"line":603,"column":52,"index":20413},"line":603,"code":"    test('should not override ETag when manually set', async () => {\n      mockListener.mockImplementation((req, res) => {\n        res.setHeader('etag', '\"asdf\"');\n        res.send('hello');\n      });\n      const res = await fetchWithProxyReq(url);\n      expect(res.status).toBe(200);\n      expect(res.headers.get('ETag')).toBe('\"asdf\"');\n    });","file":"helpers.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"should not send ETag for res.send()","suites":["res.send","etag"],"updatePoint":{"line":612,"column":45,"index":20753},"line":612,"code":"    test('should not send ETag for res.send()', async () => {\n      mockListener.mockImplementation((req, res) => {\n        res.send();\n      });\n      const res = await fetchWithProxyReq(url);\n      expect(res.status).toBe(200);\n      expect(res.headers.get('ETag')).toBe(null);\n    });","file":"helpers.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"should send be chainable","suites":["res.json"],"updatePoint":{"line":625,"column":32,"index":21180},"line":625,"code":"  test('should send be chainable', async () => {\n    const spy = jest.fn();\n    mockListener.mockImplementation((req, res) => {\n      spy(res, res.json({\n        hello: 'world'\n      }));\n    });\n    await fetchWithProxyReq(url);\n    const [a, b] = spy.mock.calls[0];\n    expect(a).toBe(b);\n  });","file":"helpers.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"res.json() should send an empty body","suites":["res.json"],"updatePoint":{"line":636,"column":44,"index":21489},"line":636,"code":"  test('res.json() should send an empty body', async () => {\n    mockListener.mockImplementation((req, res) => {\n      res.json();\n    });\n    await fetchWithProxyReq(url);\n    const res = await fetchWithProxyReq(url);\n    expect(res.status).toBe(200);\n    expect(res.headers.get('content-type')).toBe('application/json; charset=utf-8');\n    expect(await res.text()).toBe('');\n  });","file":"helpers.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"should not override previous Content-Types","suites":["res.json",".json(object)"],"updatePoint":{"line":647,"column":52,"index":21916},"line":647,"code":"    test('should not override previous Content-Types', async () => {\n      mockListener.mockImplementation((req, res) => {\n        res.setHeader('content-type', 'application/vnd.example+json');\n        res.json({\n          hello: 'world'\n        });\n      });\n      const res = await fetchWithProxyReq(url);\n      expect(res.status).toBe(200);\n      expect(res.headers.get('content-type')).toBe('application/vnd.example+json; charset=utf-8');\n      expect(await res.text()).toBe('{\"hello\":\"world\"}');\n    });","file":"helpers.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"should set Content-Length and Content-Type","suites":["res.json",".json(object)"],"updatePoint":{"line":659,"column":52,"index":22425},"line":659,"code":"    test('should set Content-Length and Content-Type', async () => {\n      mockListener.mockImplementation((req, res) => {\n        res.json({\n          hello: '½ + ¼ = ¾'\n        });\n      });\n      const res = await fetchWithProxyReq(url);\n      expect(res.status).toBe(200);\n      expect(res.headers.get('content-type')).toBe('application/json; charset=utf-8');\n      expect(Number(res.headers.get('content-length'))).toBe(24);\n      expect(await res.text()).toBe('{\"hello\":\"½ + ¼ = ¾\"}');\n    });","file":"helpers.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"should respond with json for null","suites":["res.json",".json(object)","when given primitives"],"updatePoint":{"line":672,"column":45,"index":22964},"line":672,"code":"      test('should respond with json for null', async () => {\n        mockListener.mockImplementation((req, res) => {\n          res.json(null);\n        });\n        const res = await fetchWithProxyReq(url);\n        expect(res.status).toBe(200);\n        expect(res.headers.get('content-type')).toBe('application/json; charset=utf-8');\n        expect(await res.text()).toBe('null');\n      });","file":"helpers.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"should respond with json for Number","suites":["res.json",".json(object)","when given primitives"],"updatePoint":{"line":681,"column":47,"index":23356},"line":681,"code":"      test('should respond with json for Number', async () => {\n        mockListener.mockImplementation((req, res) => {\n          res.json(300);\n        });\n        const res = await fetchWithProxyReq(url);\n        expect(res.status).toBe(200);\n        expect(res.headers.get('content-type')).toBe('application/json; charset=utf-8');\n        expect(await res.text()).toBe('300');\n      });","file":"helpers.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"should respond with json for String","suites":["res.json",".json(object)","when given primitives"],"updatePoint":{"line":690,"column":47,"index":23746},"line":690,"code":"      test('should respond with json for String', async () => {\n        mockListener.mockImplementation((req, res) => {\n          res.json('str');\n        });\n        const res = await fetchWithProxyReq(url);\n        expect(res.status).toBe(200);\n        expect(res.headers.get('content-type')).toBe('application/json; charset=utf-8');\n        expect(await res.text()).toBe('\"str\"');\n      });","file":"helpers.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"should respond with json when given an array","suites":["res.json",".json(object)","when given primitives"],"updatePoint":{"line":700,"column":54,"index":24155},"line":700,"code":"    test('should respond with json when given an array', async () => {\n      mockListener.mockImplementation((req, res) => {\n        res.json(['foo', 'bar', 'baz']);\n      });\n      const res = await fetchWithProxyReq(url);\n      expect(res.status).toBe(200);\n      expect(res.headers.get('content-type')).toBe('application/json; charset=utf-8');\n      expect(await res.text()).toBe('[\"foo\",\"bar\",\"baz\"]');\n    });","file":"helpers.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"should respond with json when given an object","suites":["res.json",".json(object)","when given primitives"],"updatePoint":{"line":709,"column":55,"index":24571},"line":709,"code":"    test('should respond with json when given an object', async () => {\n      mockListener.mockImplementation((req, res) => {\n        res.json({\n          name: 'tobi'\n        });\n      });\n      const res = await fetchWithProxyReq(url);\n      expect(res.status).toBe(200);\n      expect(res.headers.get('content-type')).toBe('application/json; charset=utf-8');\n      expect(await res.text()).toBe('{\"name\":\"tobi\"}');\n    });","file":"helpers.test.js","skipped":false,"dir":"packages/node-bridge/test"},{"name":"should fail to build ","suites":[],"updatePoint":{"line":32,"column":39,"index":1105},"line":32,"code":"    it(`should fail to build ${fixture}`, async () => {\n      try {\n        await testDeployment({\n          builderUrl,\n          buildUtilsUrl\n        }, path.join(fixturesPath, fixture));\n      } catch (err) {\n        expect(err).toBeTruthy();\n        expect(err.deployment).toBeTruthy();\n        expect(err.deployment.errorMessage).toBe(errMsg);\n      }\n    });","file":"integration.test.js","skipped":false,"dir":"packages/node/test"},{"name":"should build ","suites":[],"updatePoint":{"line":47,"column":29,"index":1502},"line":47,"code":"  it(`should build ${fixture}`, async () => {\n    await expect(testDeployment({\n      builderUrl,\n      buildUtilsUrl\n    }, path.join(fixturesPath, fixture))).resolves.toBeDefined();\n  });","file":"integration.test.js","skipped":false,"dir":"packages/node/test"},{"name":"should match the probes against Python dev servers","suites":[],"updatePoint":{"line":29,"column":54,"index":683},"line":29,"code":"it('should match the probes against Python dev servers', async () => {\n  const fixture = path.join(fixturesPath, '00-request-path');\n  await execa('pip3', ['install', '--user', '--upgrade', 'setuptools', 'wheel'], {\n    cwd: fixture,\n    stdio: 'inherit'\n  });\n  await execa('pip3', ['install', '--user', '-r', 'requirements.txt'], {\n    cwd: fixture,\n    stdio: 'inherit'\n  });\n  const ports = new Map();\n  ports.set('/api/python.py', 8001);\n  ports.set('/api/wsgi.py', 8002);\n  ports.set('/api/asgi.py', 8003);\n\n  const {\n    probes\n  } = require(path.join(fixture, 'vercel.json'));\n\n  const pythonServer = spawn('python3', ['api/python.py'], {\n    cwd: fixture,\n    stdio: 'inherit'\n  });\n  const wsgiServer = spawn('python3', ['api/wsgi.py'], {\n    cwd: fixture,\n    stdio: 'inherit'\n  });\n  const asgiServer = spawn('python3', ['api/asgi.py'], {\n    cwd: fixture,\n    stdio: 'inherit'\n  });\n\n  try {\n    // wait a few seconds for the dev servers to boot-up\n    await new Promise(r => setTimeout(r, 3000));\n\n    for (const {\n      path,\n      mustContain\n    } of probes) {\n      const port = ports.get(path.substring(0, path.indexOf('?')));\n      const res = await fetch(`http://localhost:${port}${path}`);\n      const body = await res.text();\n      assert(body.includes(mustContain), `Expected to contain \"${mustContain}\" but got \"${body}\"`);\n    }\n  } finally {\n    process.kill(pythonServer.pid);\n    process.kill(wsgiServer.pid);\n    process.kill(asgiServer.pid);\n  }\n}); // eslint-disable-next-line no-restricted-syntax","file":"test.js","skipped":false,"dir":"packages/python/test"},{"name":"should build ","suites":[],"updatePoint":{"line":83,"column":29,"index":2286},"line":83,"code":"  it(`should build ${fixture}`, async () => {\n    await expect(testDeployment({\n      builderUrl,\n      buildUtilsUrl\n    }, path.join(fixturesPath, fixture))).resolves.toBeDefined();\n  });","file":"test.js","skipped":false,"dir":"packages/python/test"},{"name":"appendRoutesToPhase `routes=null` and `newRoutes=[]`","suites":[],"updatePoint":{"line":9,"column":58,"index":165},"line":9,"code":"test('appendRoutesToPhase `routes=null` and `newRoutes=[]`', () => {\n  const routes = null;\n  const newRoutes = [];\n  const phase = 'filesystem';\n  const actual = appendRoutesToPhase({\n    routes,\n    newRoutes,\n    phase\n  });\n  const expected = [];\n  deepEqual(actual, expected);\n});","file":"append.spec.js","skipped":false,"dir":"packages/routing-utils/test"},{"name":"appendRoutesToPhase `routes=null` and one `newRoutes`","suites":[],"updatePoint":{"line":21,"column":59,"index":452},"line":21,"code":"test('appendRoutesToPhase `routes=null` and one `newRoutes`', () => {\n  const routes = null;\n  const newRoutes = [{\n    src: '/foo',\n    dest: '/bar'\n  }];\n  const phase = 'filesystem';\n  const actual = appendRoutesToPhase({\n    routes,\n    newRoutes,\n    phase\n  });\n  const expected = [{\n    handle: 'filesystem'\n  }, ...newRoutes];\n  deepEqual(actual, expected);\n});","file":"append.spec.js","skipped":false,"dir":"packages/routing-utils/test"},{"name":"appendRoutesToPhase `routes=[]` and `newRoutes=null`","suites":[],"updatePoint":{"line":38,"column":58,"index":821},"line":38,"code":"test('appendRoutesToPhase `routes=[]` and `newRoutes=null`', () => {\n  const routes = [];\n  const newRoutes = null;\n  const phase = 'filesystem';\n  const actual = appendRoutesToPhase({\n    routes,\n    newRoutes,\n    phase\n  });\n  const expected = [];\n  deepEqual(actual, expected);\n});","file":"append.spec.js","skipped":false,"dir":"packages/routing-utils/test"},{"name":"appendRoutesToPhase `routes=[]` and `newRoutes=[]`","suites":[],"updatePoint":{"line":50,"column":56,"index":1105},"line":50,"code":"test('appendRoutesToPhase `routes=[]` and `newRoutes=[]`', () => {\n  const routes = [];\n  const newRoutes = [];\n  const phase = 'filesystem';\n  const actual = appendRoutesToPhase({\n    routes,\n    newRoutes,\n    phase\n  });\n  const expected = [];\n  deepEqual(actual, expected);\n});","file":"append.spec.js","skipped":false,"dir":"packages/routing-utils/test"},{"name":"appendRoutesToPhase one routes, zero newRoutes","suites":[],"updatePoint":{"line":62,"column":52,"index":1383},"line":62,"code":"test('appendRoutesToPhase one routes, zero newRoutes', () => {\n  const routes = [{\n    src: '/foo',\n    dest: '/bar'\n  }];\n  const newRoutes = [];\n  const phase = 'filesystem';\n  const actual = appendRoutesToPhase({\n    routes,\n    newRoutes,\n    phase\n  });\n  const expected = routes;\n  deepEqual(actual, expected);\n});","file":"append.spec.js","skipped":false,"dir":"packages/routing-utils/test"},{"name":"appendRoutesToPhase zero routes, one newRoutes","suites":[],"updatePoint":{"line":77,"column":52,"index":1704},"line":77,"code":"test('appendRoutesToPhase zero routes, one newRoutes', () => {\n  const routes = [];\n  const newRoutes = [{\n    src: '/foo',\n    dest: '/bar'\n  }];\n  const phase = 'filesystem';\n  const actual = appendRoutesToPhase({\n    routes,\n    newRoutes,\n    phase\n  });\n  const expected = [{\n    handle: 'filesystem'\n  }, ...newRoutes];\n  deepEqual(actual, expected);\n});","file":"append.spec.js","skipped":false,"dir":"packages/routing-utils/test"},{"name":"appendRoutesToPhase two routes in phase","suites":[],"updatePoint":{"line":94,"column":45,"index":2058},"line":94,"code":"test('appendRoutesToPhase two routes in phase', () => {\n  const routes = [{\n    handle: 'filesystem'\n  }, {\n    src: '/first',\n    dest: '/one'\n  }];\n  const newRoutes = [{\n    src: '/new',\n    dest: '/to'\n  }];\n  const phase = 'filesystem';\n  const actual = appendRoutesToPhase({\n    routes,\n    newRoutes,\n    phase\n  });\n  const expected = [{\n    handle: 'filesystem'\n  }, {\n    src: '/first',\n    dest: '/one'\n  }, {\n    src: '/new',\n    dest: '/to'\n  }];\n  deepEqual(actual, expected);\n});","file":"append.spec.js","skipped":false,"dir":"packages/routing-utils/test"},{"name":"appendRoutesToPhase two routes out of phase","suites":[],"updatePoint":{"line":122,"column":49,"index":2557},"line":122,"code":"test('appendRoutesToPhase two routes out of phase', () => {\n  const routes = [{\n    handle: 'resource'\n  }, {\n    src: '/first',\n    dest: '/one'\n  }];\n  const newRoutes = [{\n    src: '/new',\n    dest: '/to'\n  }];\n  const phase = 'filesystem';\n  const actual = appendRoutesToPhase({\n    routes,\n    newRoutes,\n    phase\n  });\n  const expected = [{\n    handle: 'resource'\n  }, {\n    src: '/first',\n    dest: '/one'\n  }, {\n    handle: 'filesystem'\n  }, {\n    src: '/new',\n    dest: '/to'\n  }];\n  deepEqual(actual, expected);\n});","file":"append.spec.js","skipped":false,"dir":"packages/routing-utils/test"},{"name":"appendRoutesToPhase one routes before, two routes in phase","suites":[],"updatePoint":{"line":152,"column":64,"index":3099},"line":152,"code":"test('appendRoutesToPhase one routes before, two routes in phase', () => {\n  const routes = [{\n    src: '/first',\n    dest: '/one'\n  }, {\n    handle: 'filesystem'\n  }, {\n    src: '/second',\n    dest: '/two'\n  }];\n  const newRoutes = [{\n    src: '/new',\n    dest: '/to'\n  }];\n  const phase = 'filesystem';\n  const actual = appendRoutesToPhase({\n    routes,\n    newRoutes,\n    phase\n  });\n  const expected = [{\n    src: '/first',\n    dest: '/one'\n  }, {\n    handle: 'filesystem'\n  }, {\n    src: '/second',\n    dest: '/two'\n  }, {\n    src: '/new',\n    dest: '/to'\n  }];\n  deepEqual(actual, expected);\n});","file":"append.spec.js","skipped":false,"dir":"packages/routing-utils/test"},{"name":"appendRoutesToPhase one routes before, two routes in phase, two routes in different phase","suites":[],"updatePoint":{"line":186,"column":95,"index":3732},"line":186,"code":"test('appendRoutesToPhase one routes before, two routes in phase, two routes in different phase', () => {\n  const routes = [{\n    src: '/first',\n    dest: '/one'\n  }, {\n    handle: 'filesystem'\n  }, {\n    src: '/second',\n    dest: '/two'\n  }, {\n    handle: 'miss'\n  }, {\n    src: '/third',\n    dest: '/three'\n  }];\n  const newRoutes = [{\n    src: '/new',\n    dest: '/to'\n  }];\n  const phase = 'filesystem';\n  const actual = appendRoutesToPhase({\n    routes,\n    newRoutes,\n    phase\n  });\n  const expected = [{\n    src: '/first',\n    dest: '/one'\n  }, {\n    handle: 'filesystem'\n  }, {\n    src: '/second',\n    dest: '/two'\n  }, {\n    src: '/new',\n    dest: '/to'\n  }, {\n    handle: 'miss'\n  }, {\n    src: '/third',\n    dest: '/three'\n  }];\n  deepEqual(actual, expected);\n});","file":"append.spec.js","skipped":false,"dir":"packages/routing-utils/test"},{"name":"should return routes null if provided routes is null","suites":["normalizeRoutes"],"updatePoint":{"line":34,"column":60,"index":799},"line":34,"code":"  test('should return routes null if provided routes is null', () => {\n    const actual = normalizeRoutes(null);\n    assert.equal(actual.routes, null);\n  });","file":"index.spec.js","skipped":false,"dir":"packages/routing-utils/test"},{"name":"accepts valid routes","suites":["normalizeRoutes"],"updatePoint":{"line":38,"column":28,"index":925},"line":38,"code":"  test('accepts valid routes', () => {\n    const routes = [{\n      src: '^(?:/(?<value>en|fr))?(?<path>/.*)$',\n      locale: {\n        value: '$value',\n        path: '$path',\n        default: 'en',\n        cookie: 'NEXT_LOCALE'\n      }\n    }, {\n      src: '^/(?:en/?|fr/?)$',\n      locale: {\n        redirect: {\n          en: '/en',\n          fr: '/fr'\n        }\n      }\n    }, {\n      src: '^/about$'\n    }, {\n      src: '^/about$',\n      middleware: 0\n    }, {\n      src: '^/about$',\n      middlewarePath: 'pages/_middleware'\n    }, {\n      src: '^/blog$',\n      methods: ['GET'],\n      headers: {\n        'Cache-Control': 'no-cache'\n      },\n      dest: '/blog'\n    }, {\n      src: '^/.*$',\n      middleware: 0\n    }, {\n      handle: 'filesystem'\n    }, {\n      src: '^/(?<slug>[^/]+)$',\n      dest: 'blog?slug=$slug'\n    }, {\n      handle: 'hit'\n    }, {\n      src: '^/hit-me$',\n      headers: {\n        'Cache-Control': 'max-age=20'\n      },\n      continue: true\n    }, {\n      handle: 'miss'\n    }, {\n      src: '^/missed-me$',\n      dest: '/api/missed-me',\n      check: true\n    }, {\n      src: '^/missed-me$',\n      headers: {\n        'Cache-Control': 'max-age=10'\n      },\n      continue: true,\n      important: true\n    }, {\n      handle: 'rewrite'\n    }, {\n      src: '^.*$',\n      dest: '/somewhere'\n    }, {\n      handle: 'error'\n    }, {\n      src: '^.*$',\n      dest: '/404',\n      status: 404\n    }, {\n      src: '^/hello$',\n      dest: '/another',\n      has: [{\n        type: 'header',\n        key: 'x-rewrite'\n      }, {\n        type: 'cookie',\n        key: 'loggedIn',\n        value: 'yup'\n      }, {\n        type: 'query',\n        key: 'authorized',\n        value: 'yup'\n      }, {\n        type: 'host',\n        value: 'vercel.com'\n      }],\n      missing: [{\n        type: 'header',\n        key: 'x-middleware-subrequest',\n        value: 'secret'\n      }]\n    }];\n    assertValid(routes);\n    const normalized = normalizeRoutes(routes);\n    assert.equal(normalized.error, null);\n    assert.deepStrictEqual(normalized.routes, routes);\n  });","file":"index.spec.js","skipped":false,"dir":"packages/routing-utils/test"},{"name":"normalizes src","suites":["normalizeRoutes"],"updatePoint":{"line":139,"column":22,"index":2980},"line":139,"code":"  test('normalizes src', () => {\n    const expected = '^/about$';\n    const sources = [{\n      src: '/about'\n    }, {\n      src: '/about$'\n    }, {\n      src: '\\\\/about'\n    }, {\n      src: '\\\\/about$'\n    }, {\n      src: '^/about'\n    }, {\n      src: '^/about$'\n    }, {\n      src: '^\\\\/about'\n    }, {\n      src: '^\\\\/about$'\n    }];\n    assertValid(sources);\n    const normalized = normalizeRoutes(sources);\n    assert.equal(normalized.error, null);\n    assert.notEqual(normalized.routes, null);\n\n    if (normalized.routes) {\n      normalized.routes.forEach(route => {\n        if (isHandler(route)) {\n          assert.fail(`Normalizer returned: { handle: ${route.handle} } instead of { src: ${expected} }`);\n        } else {\n          assert.strictEqual(route.src, expected);\n        }\n      });\n    }\n  });","file":"index.spec.js","skipped":false,"dir":"packages/routing-utils/test"},{"name":"returns if null","suites":["normalizeRoutes"],"updatePoint":{"line":173,"column":23,"index":3792},"line":173,"code":"  test('returns if null', () => {\n    const input = null;\n    const {\n      error,\n      routes\n    } = normalizeRoutes(input);\n    assert.strictEqual(error, null);\n    assert.strictEqual(routes, input);\n  });","file":"index.spec.js","skipped":false,"dir":"packages/routing-utils/test"},{"name":"returns if empty","suites":["normalizeRoutes"],"updatePoint":{"line":182,"column":24,"index":4003},"line":182,"code":"  test('returns if empty', () => {\n    const input = [];\n    const {\n      error,\n      routes\n    } = normalizeRoutes(input);\n    assert.strictEqual(error, null);\n    assert.strictEqual(routes, input);\n  });","file":"index.spec.js","skipped":false,"dir":"packages/routing-utils/test"},{"name":"fails if route has unknown `handle` value","suites":["normalizeRoutes"],"updatePoint":{"line":191,"column":49,"index":4237},"line":191,"code":"  test('fails if route has unknown `handle` value', () => {\n    const input = [{\n      handle: 'doesnotexist'\n    }];\n    const {\n      error\n    } = normalizeRoutes(input);\n    assert.deepEqual(error.code, 'invalid_route');\n    assert.deepEqual(error.message, 'Route at index 0 has unknown handle value `handle: doesnotexist`.');\n  });","file":"index.spec.js","skipped":false,"dir":"packages/routing-utils/test"},{"name":"fails if route has additional properties with `handle` property","suites":["normalizeRoutes"],"updatePoint":{"line":201,"column":71,"index":4596},"line":201,"code":"  test('fails if route has additional properties with `handle` property', () => {\n    const input = [{\n      handle: 'filesystem',\n      illegal: true\n    }];\n    const {\n      error\n    } = normalizeRoutes(input);\n    assert.deepEqual(error.code, 'invalid_route');\n    assert.deepEqual(error.message, 'Route at index 0 has unknown property `illegal`.');\n  });","file":"index.spec.js","skipped":false,"dir":"packages/routing-utils/test"},{"name":"fails if route has a duplicate `handle` value","suites":["normalizeRoutes"],"updatePoint":{"line":212,"column":53,"index":4939},"line":212,"code":"  test('fails if route has a duplicate `handle` value', () => {\n    const input = [{\n      handle: 'filesystem'\n    }, {\n      handle: 'filesystem'\n    }];\n    const {\n      error\n    } = normalizeRoutes(input);\n    assert.deepEqual(error.code, 'invalid_route');\n    assert.deepEqual(error.message, 'Route at index 1 is a duplicate. Please use one `handle: filesystem` at most.');\n  });","file":"index.spec.js","skipped":false,"dir":"packages/routing-utils/test"},{"name":"fails if route has a invalid regex","suites":["normalizeRoutes"],"updatePoint":{"line":224,"column":42,"index":5315},"line":224,"code":"  test('fails if route has a invalid regex', () => {\n    const input = [{\n      src: '^/(broken]$'\n    }];\n    const {\n      error\n    } = normalizeRoutes(input);\n    assert.deepEqual(error.code, 'invalid_route');\n    assert.deepEqual(error.message, 'Route at index 0 has invalid `src` regular expression \"^/(broken]$\".');\n  });","file":"index.spec.js","skipped":false,"dir":"packages/routing-utils/test"},{"name":"fails if route does not define `handle` or `src` property","suites":["normalizeRoutes"],"updatePoint":{"line":234,"column":65,"index":5667},"line":234,"code":"  test('fails if route does not define `handle` or `src` property', () => {\n    const input = [{\n      fake: 'foo'\n    }];\n    const {\n      error\n    } = normalizeRoutes(input);\n    assert.deepEqual(error.code, 'invalid_route');\n    assert.deepEqual(error.message, 'Route at index 0 must define either `handle` or `src` property.');\n  });","file":"index.spec.js","skipped":false,"dir":"packages/routing-utils/test"},{"name":"fails if over 1024 routes","suites":["normalizeRoutes"],"updatePoint":{"line":244,"column":33,"index":5975},"line":244,"code":"  test('fails if over 1024 routes', () => {\n    // @ts-ignore\n    assertError('string', [{\n      dataPath: '',\n      keyword: 'type',\n      message: 'should be array',\n      params: {\n        type: 'array'\n      },\n      schemaPath: '#/type'\n    }]);\n    const arr = new Array(1026);\n    arr.fill(true); // @ts-ignore\n\n    assertError(arr, [{\n      dataPath: '',\n      keyword: 'maxItems',\n      message: 'should NOT have more than 1024 items',\n      params: {\n        limit: '1024'\n      },\n      schemaPath: '#/maxItems'\n    }]);\n  });","file":"index.spec.js","skipped":false,"dir":"packages/routing-utils/test"},{"name":"fails is src is not string","suites":["normalizeRoutes"],"updatePoint":{"line":268,"column":34,"index":6514},"line":268,"code":"  test('fails is src is not string', () => {\n    assertError([// @ts-ignore\n    {\n      src: false\n    }], [{\n      keyword: 'type',\n      dataPath: '[0].src',\n      schemaPath: '#/items/anyOf/0/properties/src/type',\n      params: {\n        type: 'string'\n      },\n      message: 'should be string'\n    }, {\n      keyword: 'additionalProperties',\n      dataPath: '[0]',\n      schemaPath: '#/items/anyOf/1/additionalProperties',\n      params: {\n        additionalProperty: 'src'\n      },\n      message: 'should NOT have additional properties'\n    }, {\n      keyword: 'anyOf',\n      dataPath: '[0]',\n      schemaPath: '#/items/anyOf',\n      params: {},\n      message: 'should match some schema in anyOf'\n    }]);\n  });","file":"index.spec.js","skipped":false,"dir":"packages/routing-utils/test"},{"name":"fails if dest is not string","suites":["normalizeRoutes"],"updatePoint":{"line":296,"column":35,"index":7232},"line":296,"code":"  test('fails if dest is not string', () => {\n    assertError([// @ts-ignore\n    {\n      dest: false\n    }], [{\n      keyword: 'required',\n      dataPath: '[0]',\n      schemaPath: '#/items/anyOf/0/required',\n      params: {\n        missingProperty: 'src'\n      },\n      message: \"should have required property 'src'\"\n    }, {\n      keyword: 'additionalProperties',\n      dataPath: '[0]',\n      schemaPath: '#/items/anyOf/1/additionalProperties',\n      params: {\n        additionalProperty: 'dest'\n      },\n      message: 'should NOT have additional properties'\n    }, {\n      keyword: 'anyOf',\n      dataPath: '[0]',\n      schemaPath: '#/items/anyOf',\n      params: {},\n      message: 'should match some schema in anyOf'\n    }]);\n  });","file":"index.spec.js","skipped":false,"dir":"packages/routing-utils/test"},{"name":"fails if methods is not array","suites":["normalizeRoutes"],"updatePoint":{"line":324,"column":37,"index":7970},"line":324,"code":"  test('fails if methods is not array', () => {\n    assertError([// @ts-ignore\n    {\n      methods: false\n    }], [{\n      keyword: 'required',\n      dataPath: '[0]',\n      schemaPath: '#/items/anyOf/0/required',\n      params: {\n        missingProperty: 'src'\n      },\n      message: \"should have required property 'src'\"\n    }, {\n      keyword: 'additionalProperties',\n      dataPath: '[0]',\n      schemaPath: '#/items/anyOf/1/additionalProperties',\n      params: {\n        additionalProperty: 'methods'\n      },\n      message: 'should NOT have additional properties'\n    }, {\n      keyword: 'anyOf',\n      dataPath: '[0]',\n      schemaPath: '#/items/anyOf',\n      params: {},\n      message: 'should match some schema in anyOf'\n    }]);\n  });","file":"index.spec.js","skipped":false,"dir":"packages/routing-utils/test"},{"name":"fails if methods is not string","suites":["normalizeRoutes"],"updatePoint":{"line":352,"column":38,"index":8715},"line":352,"code":"  test('fails if methods is not string', () => {\n    assertError([// @ts-ignore\n    {\n      methods: [false]\n    }], [{\n      keyword: 'required',\n      dataPath: '[0]',\n      schemaPath: '#/items/anyOf/0/required',\n      params: {\n        missingProperty: 'src'\n      },\n      message: \"should have required property 'src'\"\n    }, {\n      keyword: 'additionalProperties',\n      dataPath: '[0]',\n      schemaPath: '#/items/anyOf/1/additionalProperties',\n      params: {\n        additionalProperty: 'methods'\n      },\n      message: 'should NOT have additional properties'\n    }, {\n      keyword: 'anyOf',\n      dataPath: '[0]',\n      schemaPath: '#/items/anyOf',\n      params: {},\n      message: 'should match some schema in anyOf'\n    }]);\n  });","file":"index.spec.js","skipped":false,"dir":"packages/routing-utils/test"},{"name":"fails if headers is not an object","suites":["normalizeRoutes"],"updatePoint":{"line":380,"column":41,"index":9465},"line":380,"code":"  test('fails if headers is not an object', () => {\n    assertError([// @ts-ignore\n    {\n      headers: false\n    }], [{\n      keyword: 'required',\n      dataPath: '[0]',\n      schemaPath: '#/items/anyOf/0/required',\n      params: {\n        missingProperty: 'src'\n      },\n      message: \"should have required property 'src'\"\n    }, {\n      keyword: 'additionalProperties',\n      dataPath: '[0]',\n      schemaPath: '#/items/anyOf/1/additionalProperties',\n      params: {\n        additionalProperty: 'headers'\n      },\n      message: 'should NOT have additional properties'\n    }, {\n      keyword: 'anyOf',\n      dataPath: '[0]',\n      schemaPath: '#/items/anyOf',\n      params: {},\n      message: 'should match some schema in anyOf'\n    }]);\n  });","file":"index.spec.js","skipped":false,"dir":"packages/routing-utils/test"},{"name":"fails if header is not a string","suites":["normalizeRoutes"],"updatePoint":{"line":408,"column":39,"index":10211},"line":408,"code":"  test('fails if header is not a string', () => {\n    assertError([// @ts-ignore\n    {\n      headers: {\n        test: false\n      }\n    }], [{\n      keyword: 'required',\n      dataPath: '[0]',\n      schemaPath: '#/items/anyOf/0/required',\n      params: {\n        missingProperty: 'src'\n      },\n      message: \"should have required property 'src'\"\n    }, {\n      keyword: 'additionalProperties',\n      dataPath: '[0]',\n      schemaPath: '#/items/anyOf/1/additionalProperties',\n      params: {\n        additionalProperty: 'headers'\n      },\n      message: 'should NOT have additional properties'\n    }, {\n      keyword: 'anyOf',\n      dataPath: '[0]',\n      schemaPath: '#/items/anyOf',\n      params: {},\n      message: 'should match some schema in anyOf'\n    }]);\n  });","file":"index.spec.js","skipped":false,"dir":"packages/routing-utils/test"},{"name":"fails if handle is not string","suites":["normalizeRoutes"],"updatePoint":{"line":438,"column":37,"index":10979},"line":438,"code":"  test('fails if handle is not string', () => {\n    assertError([// @ts-ignore\n    {\n      handle: false\n    }], [{\n      keyword: 'additionalProperties',\n      dataPath: '[0]',\n      schemaPath: '#/items/anyOf/0/additionalProperties',\n      params: {\n        additionalProperty: 'handle'\n      },\n      message: 'should NOT have additional properties'\n    }, {\n      keyword: 'type',\n      dataPath: '[0].handle',\n      schemaPath: '#/items/anyOf/1/properties/handle/type',\n      params: {\n        type: 'string'\n      },\n      message: 'should be string'\n    }, {\n      keyword: 'anyOf',\n      dataPath: '[0]',\n      schemaPath: '#/items/anyOf',\n      params: {},\n      message: 'should match some schema in anyOf'\n    }]);\n  });","file":"index.spec.js","skipped":false,"dir":"packages/routing-utils/test"},{"name":"fails if continue is not boolean","suites":["normalizeRoutes"],"updatePoint":{"line":466,"column":40,"index":11714},"line":466,"code":"  test('fails if continue is not boolean', () => {\n    assertError([// @ts-ignore\n    {\n      continue: 'false'\n    }], [{\n      keyword: 'required',\n      dataPath: '[0]',\n      schemaPath: '#/items/anyOf/0/required',\n      params: {\n        missingProperty: 'src'\n      },\n      message: \"should have required property 'src'\"\n    }, {\n      keyword: 'additionalProperties',\n      dataPath: '[0]',\n      schemaPath: '#/items/anyOf/1/additionalProperties',\n      params: {\n        additionalProperty: 'continue'\n      },\n      message: 'should NOT have additional properties'\n    }, {\n      keyword: 'anyOf',\n      dataPath: '[0]',\n      schemaPath: '#/items/anyOf',\n      params: {},\n      message: 'should match some schema in anyOf'\n    }]);\n  });","file":"index.spec.js","skipped":false,"dir":"packages/routing-utils/test"},{"name":"fails if check is not boolean","suites":["normalizeRoutes"],"updatePoint":{"line":494,"column":37,"index":12462},"line":494,"code":"  test('fails if check is not boolean', () => {\n    assertError([// @ts-ignore\n    {\n      check: 'false'\n    }], [{\n      keyword: 'required',\n      dataPath: '[0]',\n      schemaPath: '#/items/anyOf/0/required',\n      params: {\n        missingProperty: 'src'\n      },\n      message: \"should have required property 'src'\"\n    }, {\n      keyword: 'additionalProperties',\n      dataPath: '[0]',\n      schemaPath: '#/items/anyOf/1/additionalProperties',\n      params: {\n        additionalProperty: 'check'\n      },\n      message: 'should NOT have additional properties'\n    }, {\n      keyword: 'anyOf',\n      dataPath: '[0]',\n      schemaPath: '#/items/anyOf',\n      params: {},\n      message: 'should match some schema in anyOf'\n    }]);\n  });","file":"index.spec.js","skipped":false,"dir":"packages/routing-utils/test"},{"name":"fails if status is not number","suites":["normalizeRoutes"],"updatePoint":{"line":522,"column":37,"index":13204},"line":522,"code":"  test('fails if status is not number', () => {\n    assertError([// @ts-ignore\n    {\n      status: '404'\n    }], [{\n      keyword: 'required',\n      dataPath: '[0]',\n      schemaPath: '#/items/anyOf/0/required',\n      params: {\n        missingProperty: 'src'\n      },\n      message: \"should have required property 'src'\"\n    }, {\n      keyword: 'additionalProperties',\n      dataPath: '[0]',\n      schemaPath: '#/items/anyOf/1/additionalProperties',\n      params: {\n        additionalProperty: 'status'\n      },\n      message: 'should NOT have additional properties'\n    }, {\n      keyword: 'anyOf',\n      dataPath: '[0]',\n      schemaPath: '#/items/anyOf',\n      params: {},\n      message: 'should match some schema in anyOf'\n    }]);\n  });","file":"index.spec.js","skipped":false,"dir":"packages/routing-utils/test"},{"name":"fails if property does not exist","suites":["normalizeRoutes"],"updatePoint":{"line":550,"column":40,"index":13949},"line":550,"code":"  test('fails if property does not exist', () => {\n    assertError([{\n      // @ts-ignore\n      doesNotExist: false\n    }], [{\n      keyword: 'additionalProperties',\n      dataPath: '[0]',\n      schemaPath: '#/items/anyOf/0/additionalProperties',\n      params: {\n        additionalProperty: 'doesNotExist'\n      },\n      message: 'should NOT have additional properties'\n    }, {\n      keyword: 'additionalProperties',\n      dataPath: '[0]',\n      schemaPath: '#/items/anyOf/1/additionalProperties',\n      params: {\n        additionalProperty: 'doesNotExist'\n      },\n      message: 'should NOT have additional properties'\n    }, {\n      keyword: 'anyOf',\n      dataPath: '[0]',\n      schemaPath: '#/items/anyOf',\n      params: {},\n      message: 'should match some schema in anyOf'\n    }]);\n  });","file":"index.spec.js","skipped":false,"dir":"packages/routing-utils/test"},{"name":"fails if redirects permanent is not a boolean","suites":["normalizeRoutes"],"updatePoint":{"line":578,"column":53,"index":14759},"line":578,"code":"  test('fails if redirects permanent is not a boolean', () => {\n    assertError([{\n      source: '/foo',\n      destination: '/bar',\n      permanent: 301\n    }], [{\n      dataPath: '[0].permanent',\n      keyword: 'type',\n      message: 'should be boolean',\n      params: {\n        type: 'boolean'\n      },\n      schemaPath: '#/items/properties/permanent/type'\n    }], redirectsSchema);\n  });","file":"index.spec.js","skipped":false,"dir":"packages/routing-utils/test"},{"name":"fails if redirects statusCode is not a number","suites":["normalizeRoutes"],"updatePoint":{"line":593,"column":53,"index":15150},"line":593,"code":"  test('fails if redirects statusCode is not a number', () => {\n    assertError([{\n      source: '/foo',\n      destination: '/bar',\n      statusCode: '301'\n    }], [{\n      dataPath: '[0].statusCode',\n      keyword: 'type',\n      message: 'should be integer',\n      params: {\n        type: 'integer'\n      },\n      schemaPath: '#/items/properties/statusCode/type'\n    }], redirectsSchema);\n  });","file":"index.spec.js","skipped":false,"dir":"packages/routing-utils/test"},{"name":"fails if routes after `handle: hit` use `dest`","suites":["normalizeRoutes"],"updatePoint":{"line":608,"column":54,"index":15547},"line":608,"code":"  test('fails if routes after `handle: hit` use `dest`', () => {\n    const input = [{\n      handle: 'hit'\n    }, {\n      src: '^/user$',\n      dest: '^/api/user$'\n    }];\n    const {\n      error\n    } = normalizeRoutes(input);\n    assert.deepEqual(error.code, 'invalid_route');\n    assert.deepEqual(error.message, 'Route at index 1 cannot define `dest` after `handle: hit`.');\n  });","file":"index.spec.js","skipped":false,"dir":"packages/routing-utils/test"},{"name":"fails if routes after `handle: hit` do not use `continue: true`","suites":["normalizeRoutes"],"updatePoint":{"line":621,"column":71,"index":15947},"line":621,"code":"  test('fails if routes after `handle: hit` do not use `continue: true`', () => {\n    const input = [{\n      handle: 'hit'\n    }, {\n      src: '^/user$',\n      headers: {\n        'Cache-Control': 'no-cache'\n      }\n    }];\n    const {\n      error\n    } = normalizeRoutes(input);\n    assert.deepEqual(error.code, 'invalid_route');\n    assert.deepEqual(error.message, 'Route at index 1 must define `continue: true` after `handle: hit`.');\n  });","file":"index.spec.js","skipped":false,"dir":"packages/routing-utils/test"},{"name":"fails if routes after `handle: hit` use `status","suites":["normalizeRoutes"],"updatePoint":{"line":636,"column":55,"index":16374},"line":636,"code":"  test('fails if routes after `handle: hit` use `status', () => {\n    const input = [{\n      handle: 'hit'\n    }, {\n      src: '^/(.*)$',\n      status: 404,\n      continue: true\n    }];\n    const {\n      error\n    } = normalizeRoutes(input);\n    assert.deepEqual(error.code, 'invalid_route');\n    assert.deepEqual(error.message, 'Route at index 1 cannot define `status` after `handle: hit`.');\n  });","file":"index.spec.js","skipped":false,"dir":"packages/routing-utils/test"},{"name":"fails if routes after `handle: miss` do not use `check: true`","suites":["normalizeRoutes"],"updatePoint":{"line":650,"column":69,"index":16788},"line":650,"code":"  test('fails if routes after `handle: miss` do not use `check: true`', () => {\n    const input = [{\n      handle: 'miss'\n    }, {\n      src: '^/user$',\n      dest: '^/api/user$'\n    }];\n    const {\n      error\n    } = normalizeRoutes(input);\n    assert.deepEqual(error.code, 'invalid_route');\n    assert.deepEqual(error.message, 'Route at index 1 must define `check: true` after `handle: miss`.');\n  });","file":"index.spec.js","skipped":false,"dir":"packages/routing-utils/test"},{"name":"fails if routes after `handle: miss` do not use `continue: true`","suites":["normalizeRoutes"],"updatePoint":{"line":663,"column":72,"index":17196},"line":663,"code":"  test('fails if routes after `handle: miss` do not use `continue: true`', () => {\n    const input = [{\n      handle: 'miss'\n    }, {\n      src: '^/user$',\n      headers: {\n        'Cache-Control': 'no-cache'\n      }\n    }];\n    const {\n      error\n    } = normalizeRoutes(input);\n    assert.deepEqual(error.code, 'invalid_route');\n    assert.deepEqual(error.message, 'Route at index 1 must define `continue: true` after `handle: miss`.');\n  });","file":"index.spec.js","skipped":false,"dir":"packages/routing-utils/test"},{"name":"should normalize nowConfig.routes","suites":["getTransformedRoutes"],"updatePoint":{"line":680,"column":41,"index":17656},"line":680,"code":"  test('should normalize nowConfig.routes', () => {\n    const nowConfig = {\n      routes: [{\n        src: '/page',\n        dest: '/page.html'\n      }]\n    };\n    const actual = getTransformedRoutes({\n      nowConfig\n    });\n    const expected = normalizeRoutes(nowConfig.routes);\n    assert.deepEqual(actual, expected);\n    assertValid(actual.routes);\n  });","file":"index.spec.js","skipped":false,"dir":"packages/routing-utils/test"},{"name":"should not error when routes is null and cleanUrls is true","suites":["getTransformedRoutes"],"updatePoint":{"line":694,"column":66,"index":18039},"line":694,"code":"  test('should not error when routes is null and cleanUrls is true', () => {\n    const nowConfig = {\n      cleanUrls: true,\n      routes: null\n    };\n    const actual = getTransformedRoutes({\n      nowConfig\n    });\n    assert.equal(actual.error, null);\n    assertValid(actual.routes);\n  });","file":"index.spec.js","skipped":false,"dir":"packages/routing-utils/test"},{"name":"should not error when has segment is used in destination","suites":["getTransformedRoutes"],"updatePoint":{"line":705,"column":64,"index":18329},"line":705,"code":"  test('should not error when has segment is used in destination', () => {\n    const nowConfig = {\n      redirects: [{\n        source: '/redirect',\n        destination: '/:url',\n        has: [{\n          type: 'query',\n          key: 'url',\n          value: '(?<url>.*)'\n        }]\n      }]\n    };\n    const actual = getTransformedRoutes({\n      nowConfig\n    });\n    assert.equal(actual.error, null);\n    assertValid(actual.routes);\n  });","file":"index.spec.js","skipped":false,"dir":"packages/routing-utils/test"},{"name":"should error when routes is defined and cleanUrls is true","suites":["getTransformedRoutes"],"updatePoint":{"line":723,"column":65,"index":18770},"line":723,"code":"  test('should error when routes is defined and cleanUrls is true', () => {\n    const nowConfig = {\n      cleanUrls: true,\n      routes: [{\n        src: '/page',\n        dest: '/file.html'\n      }]\n    };\n    const actual = getTransformedRoutes({\n      nowConfig\n    });\n    assert.notEqual(actual.error, null);\n    assert.equal(actual.error.code, 'invalid_mixed_routes');\n    assert.equal(actual.error.message, 'If `rewrites`, `redirects`, `headers`, `cleanUrls` or `trailingSlash` are used, then `routes` cannot be present.');\n    assert.ok(actual.error.link);\n    assert.ok(actual.error.action);\n  });","file":"index.spec.js","skipped":false,"dir":"packages/routing-utils/test"},{"name":"should error when redirects is invalid regex","suites":["getTransformedRoutes"],"updatePoint":{"line":740,"column":52,"index":19362},"line":740,"code":"  test('should error when redirects is invalid regex', () => {\n    const nowConfig = {\n      redirects: [{\n        source: '^/(*.)\\\\.html$',\n        destination: '/file.html'\n      }]\n    };\n    const actual = getTransformedRoutes({\n      nowConfig\n    });\n    assert.notEqual(actual.error, null);\n    assert.equal(actual.error.code, 'invalid_redirect');\n    assert.equal(actual.error.message, 'Redirect at index 0 has invalid `source` regular expression \"^/(*.)\\\\.html$\".');\n    assert.ok(actual.error.link);\n    assert.ok(actual.error.action);\n  });","file":"index.spec.js","skipped":false,"dir":"packages/routing-utils/test"},{"name":"should error when redirects is invalid pattern","suites":["getTransformedRoutes"],"updatePoint":{"line":756,"column":54,"index":19916},"line":756,"code":"  test('should error when redirects is invalid pattern', () => {\n    const nowConfig = {\n      redirects: [{\n        source: '/:?',\n        destination: '/file.html'\n      }]\n    };\n    const actual = getTransformedRoutes({\n      nowConfig\n    });\n    assert.notEqual(actual.error, null);\n    assert.equal(actual.error.code, 'invalid_redirect');\n    assert.equal(actual.error.message, 'Redirect at index 0 has invalid `source` pattern \"/:?\".');\n    assert.ok(actual.error.link);\n    assert.ok(actual.error.action);\n  });","file":"index.spec.js","skipped":false,"dir":"packages/routing-utils/test"},{"name":"should error when redirects defines both permanent and statusCode","suites":["getTransformedRoutes"],"updatePoint":{"line":772,"column":73,"index":20456},"line":772,"code":"  test('should error when redirects defines both permanent and statusCode', () => {\n    const nowConfig = {\n      redirects: [{\n        source: '^/both$',\n        destination: '/api/both',\n        permanent: false,\n        statusCode: 302\n      }]\n    };\n    const actual = getTransformedRoutes({\n      nowConfig\n    });\n    assert.notEqual(actual.error, null);\n    assert.equal(actual.error.code, 'invalid_redirect');\n    assert.equal(actual.error.message, 'Redirect at index 0 cannot define both `permanent` and `statusCode` properties.');\n    assert.ok(actual.error.link);\n    assert.ok(actual.error.action);\n  });","file":"index.spec.js","skipped":false,"dir":"packages/routing-utils/test"},{"name":"should error when headers is invalid regex","suites":["getTransformedRoutes"],"updatePoint":{"line":790,"column":50,"index":21051},"line":790,"code":"  test('should error when headers is invalid regex', () => {\n    const nowConfig = {\n      headers: [{\n        source: '^/(*.)\\\\.html$',\n        destination: '/file.html'\n      }]\n    };\n    const actual = getTransformedRoutes({\n      nowConfig\n    });\n    assert.notEqual(actual.error, null);\n    assert.equal(actual.error.code, 'invalid_header');\n    assert.equal(actual.error.message, 'Header at index 0 has invalid `source` regular expression \"^/(*.)\\\\.html$\".');\n    assert.ok(actual.error.link);\n    assert.ok(actual.error.action);\n  });","file":"index.spec.js","skipped":false,"dir":"packages/routing-utils/test"},{"name":"should error when headers is invalid pattern","suites":["getTransformedRoutes"],"updatePoint":{"line":806,"column":52,"index":21597},"line":806,"code":"  test('should error when headers is invalid pattern', () => {\n    const nowConfig = {\n      headers: [{\n        source: '/:?',\n        headers: [{\n          key: 'x-hello',\n          value: 'world'\n        }]\n      }]\n    };\n    const actual = getTransformedRoutes({\n      nowConfig\n    });\n    assert.notEqual(actual.error, null);\n    assert.equal(actual.error.code, 'invalid_header');\n    assert.equal(actual.error.message, 'Header at index 0 has invalid `source` pattern \"/:?\".');\n    assert.ok(actual.error.link);\n    assert.ok(actual.error.action);\n  });","file":"index.spec.js","skipped":false,"dir":"packages/routing-utils/test"},{"name":"should error when rewrites is invalid regex","suites":["getTransformedRoutes"],"updatePoint":{"line":825,"column":51,"index":22157},"line":825,"code":"  test('should error when rewrites is invalid regex', () => {\n    const nowConfig = {\n      rewrites: [{\n        source: '^/(*.)\\\\.html$',\n        destination: '/file.html'\n      }]\n    };\n    const actual = getTransformedRoutes({\n      nowConfig\n    });\n    assert.notEqual(actual.error, null);\n    assert.equal(actual.error.code, 'invalid_rewrite');\n    assert.equal(actual.error.message, 'Rewrite at index 0 has invalid `source` regular expression \"^/(*.)\\\\.html$\".');\n    assert.ok(actual.error.link);\n    assert.ok(actual.error.action);\n  });","file":"index.spec.js","skipped":false,"dir":"packages/routing-utils/test"},{"name":"should error when rewrites is invalid pattern","suites":["getTransformedRoutes"],"updatePoint":{"line":841,"column":53,"index":22707},"line":841,"code":"  test('should error when rewrites is invalid pattern', () => {\n    const nowConfig = {\n      rewrites: [{\n        source: '/:?',\n        destination: '/file.html'\n      }]\n    };\n    const actual = getTransformedRoutes({\n      nowConfig\n    });\n    assert.notEqual(actual.error, null);\n    assert.equal(actual.error.code, 'invalid_rewrite');\n    assert.equal(actual.error.message, 'Rewrite at index 0 has invalid `source` pattern \"/:?\".');\n    assert.ok(actual.error.link);\n    assert.ok(actual.error.action);\n  });","file":"index.spec.js","skipped":false,"dir":"packages/routing-utils/test"},{"name":"should normalize all redirects before rewrites","suites":["getTransformedRoutes"],"updatePoint":{"line":857,"column":54,"index":23225},"line":857,"code":"  test('should normalize all redirects before rewrites', () => {\n    const nowConfig = {\n      cleanUrls: true,\n      rewrites: [{\n        source: '/v1',\n        destination: '/v2/api.py'\n      }],\n      redirects: [{\n        source: '/help',\n        destination: '/support',\n        statusCode: 302\n      }, {\n        source: '/bug',\n        destination: 'https://example.com/bug',\n        statusCode: 308\n      }]\n    };\n    const actual = getTransformedRoutes({\n      nowConfig\n    });\n    const expected = [{\n      src: '^/(?:(.+)/)?index(?:\\\\.html)?/?$',\n      headers: {\n        Location: '/$1'\n      },\n      status: 308\n    }, {\n      src: '^/(.*)\\\\.html/?$',\n      headers: {\n        Location: '/$1'\n      },\n      status: 308\n    }, {\n      src: '^/help$',\n      headers: {\n        Location: '/support'\n      },\n      status: 302\n    }, {\n      src: '^/bug$',\n      headers: {\n        Location: 'https://example.com/bug'\n      },\n      status: 308\n    }, {\n      handle: 'filesystem'\n    }, {\n      src: '^/v1$',\n      dest: '/v2/api.py',\n      check: true\n    }];\n    assert.deepEqual(actual.error, null);\n    assert.deepEqual(actual.routes, expected);\n    assertValid(actual.routes, routesSchema);\n  });","file":"index.spec.js","skipped":false,"dir":"packages/routing-utils/test"},{"name":"should validate schemas","suites":["getTransformedRoutes"],"updatePoint":{"line":912,"column":31,"index":24418},"line":912,"code":"  test('should validate schemas', () => {\n    const nowConfig = {\n      cleanUrls: true,\n      rewrites: [{\n        source: '/page',\n        destination: '/page.html'\n      }, {\n        source: '/home',\n        destination: '/index.html'\n      }, {\n        source: '/home',\n        destination: '/another',\n        has: [{\n          type: 'header',\n          key: 'x-rewrite'\n        }, {\n          type: 'cookie',\n          key: 'loggedIn',\n          value: 'yup'\n        }, {\n          type: 'query',\n          key: 'authorized',\n          value: 'yup'\n        }, {\n          type: 'host',\n          value: 'vercel.com'\n        }]\n      }],\n      redirects: [{\n        source: '/version1',\n        destination: '/api1.py'\n      }, {\n        source: '/version2',\n        destination: '/api2.py',\n        statusCode: 302\n      }, {\n        source: '/version3',\n        destination: '/api3.py',\n        permanent: true\n      }, {\n        source: '/version4',\n        destination: '/api4.py',\n        has: [{\n          type: 'header',\n          key: 'x-redirect'\n        }, {\n          type: 'cookie',\n          key: 'loggedIn',\n          value: 'yup'\n        }, {\n          type: 'query',\n          key: 'authorized',\n          value: 'yup'\n        }, {\n          type: 'host',\n          value: 'vercel.com'\n        }],\n        permanent: false\n      }],\n      headers: [{\n        source: '/(.*)',\n        headers: [{\n          key: 'Access-Control-Allow-Origin',\n          value: '*'\n        }]\n      }, {\n        source: '/404',\n        headers: [{\n          key: 'Cache-Control',\n          value: 'max-age=300'\n        }, {\n          key: 'Set-Cookie',\n          value: 'error=404'\n        }]\n      }, {\n        source: '/add-header',\n        has: [{\n          type: 'header',\n          key: 'x-header'\n        }, {\n          type: 'cookie',\n          key: 'loggedIn',\n          value: 'yup'\n        }, {\n          type: 'query',\n          key: 'authorized',\n          value: 'yup'\n        }, {\n          type: 'host',\n          value: 'vercel.com'\n        }],\n        headers: [{\n          key: 'Cache-Control',\n          value: 'max-age=forever'\n        }]\n      }],\n      trailingSlashSchema: false\n    };\n    assertValid(nowConfig.cleanUrls, cleanUrlsSchema);\n    assertValid(nowConfig.rewrites, rewritesSchema);\n    assertValid(nowConfig.redirects, redirectsSchema);\n    assertValid(nowConfig.headers, headersSchema);\n    assertValid(nowConfig.trailingSlashSchema, trailingSlashSchema);\n  });","file":"index.spec.js","skipped":false,"dir":"packages/routing-utils/test"},{"name":"should return null routes if no transformations are performed","suites":["getTransformedRoutes"],"updatePoint":{"line":1016,"column":69,"index":26956},"line":1016,"code":"  test('should return null routes if no transformations are performed', () => {\n    const nowConfig = {\n      routes: null\n    };\n    const actual = getTransformedRoutes({\n      nowConfig\n    });\n    assert.equal(actual.routes, null);\n  });","file":"index.spec.js","skipped":false,"dir":"packages/routing-utils/test"},{"name":"should error when segment is defined in `destination` but not `source`","suites":["getTransformedRoutes"],"updatePoint":{"line":1025,"column":78,"index":27206},"line":1025,"code":"  test('should error when segment is defined in `destination` but not `source`', () => {\n    const nowConfig = {\n      redirects: [{\n        source: '/iforgot/:id',\n        destination: '/:another'\n      }]\n    };\n    const actual = getTransformedRoutes({\n      nowConfig\n    });\n    assert.deepEqual(actual.routes, null);\n    assert.ok(actual.error.message.includes('in `destination` property but not in `source` or `has` property'), actual.error.message);\n  });","file":"index.spec.js","skipped":false,"dir":"packages/routing-utils/test"},{"name":"should error when segment is defined in HTTPS `destination` but not `source`","suites":["getTransformedRoutes"],"updatePoint":{"line":1038,"column":84,"index":27676},"line":1038,"code":"  test('should error when segment is defined in HTTPS `destination` but not `source`', () => {\n    const nowConfig = {\n      redirects: [{\n        source: '/iforgot/:id',\n        destination: 'https://example.com/:another'\n      }]\n    };\n    const actual = getTransformedRoutes({\n      nowConfig\n    });\n    assert.deepEqual(actual.routes, null);\n    assert.ok(actual.error.message.includes('in `destination` property but not in `source` or `has` property'), actual.error.message);\n  });","file":"index.spec.js","skipped":false,"dir":"packages/routing-utils/test"},{"name":"should error when segment is defined in `destination` query string but not `source`","suites":["getTransformedRoutes"],"updatePoint":{"line":1051,"column":91,"index":28172},"line":1051,"code":"  test('should error when segment is defined in `destination` query string but not `source`', () => {\n    const nowConfig = {\n      redirects: [{\n        source: '/iforgot/:id',\n        destination: '/api/login?id=123&name=:name'\n      }]\n    };\n    const actual = getTransformedRoutes({\n      nowConfig\n    });\n    assert.deepEqual(actual.routes, null);\n    assert.ok(actual.error.message.includes('in `destination` property but not in `source` or `has` property'), actual.error.message);\n  });","file":"index.spec.js","skipped":false,"dir":"packages/routing-utils/test"},{"name":"should error when segment is defined in HTTPS `destination` query string but not `source`","suites":["getTransformedRoutes"],"updatePoint":{"line":1064,"column":97,"index":28674},"line":1064,"code":"  test('should error when segment is defined in HTTPS `destination` query string but not `source`', () => {\n    const nowConfig = {\n      redirects: [{\n        source: '/iforgot/:id',\n        destination: 'https://example.com/api/login?id=123&name=:name'\n      }]\n    };\n    const actual = getTransformedRoutes({\n      nowConfig\n    });\n    assert.deepEqual(actual.routes, null);\n    assert.ok(actual.error.message.includes('in `destination` property but not in `source` or `has` property'), actual.error.message);\n  });","file":"index.spec.js","skipped":false,"dir":"packages/routing-utils/test"},{"name":"should work with content-security-policy header containing URL","suites":["getTransformedRoutes"],"updatePoint":{"line":1077,"column":70,"index":29168},"line":1077,"code":"  test('should work with content-security-policy header containing URL', () => {\n    const nowConfig = {\n      headers: [{\n        source: '/(.*)',\n        headers: [{\n          key: 'content-security-policy',\n          value: \"default-src 'self'; script-src 'self'; img-src 'self' https://*.example.com; style-src 'self' 'unsafe-inline'; connect-src 'self' https://*.examplpe.com wss://gateway.example.com; form-action 'self'\"\n        }, {\n          key: 'feature-policy',\n          value: \"accelerometer 'none'; camera 'none'; geolocation 'none'; gyroscope 'none'; magnetometer 'none'; microphone 'none'; payment 'none'; usb 'none'\"\n        }, {\n          key: 'referrer-policy',\n          value: 'strict-origin-when-cross-origin'\n        }, {\n          key: 'strict-transport-security',\n          value: 'max-age=31536000; includesubdomains; preload'\n        }, {\n          key: 'x-content-type-options',\n          value: 'nosniff'\n        }, {\n          key: 'x-frame-options',\n          value: 'sameorigin'\n        }, {\n          key: 'x-xss-protection',\n          value: '1; mode=block'\n        }]\n      }]\n    };\n    const actual = getTransformedRoutes({\n      nowConfig\n    });\n    assert.deepEqual(actual.routes, [{\n      continue: true,\n      headers: {\n        'content-security-policy': \"default-src 'self'; script-src 'self'; img-src 'self' https://*.example.com; style-src 'self' 'unsafe-inline'; connect-src 'self' https://*.examplpe.com wss://gateway.example.com; form-action 'self'\",\n        'feature-policy': \"accelerometer 'none'; camera 'none'; geolocation 'none'; gyroscope 'none'; magnetometer 'none'; microphone 'none'; payment 'none'; usb 'none'\",\n        'referrer-policy': 'strict-origin-when-cross-origin',\n        'strict-transport-security': 'max-age=31536000; includesubdomains; preload',\n        'x-content-type-options': 'nosniff',\n        'x-frame-options': 'sameorigin',\n        'x-xss-protection': '1; mode=block'\n      },\n      src: '^(?:/(.*))$'\n    }]);\n  });","file":"index.spec.js","skipped":false,"dir":"packages/routing-utils/test"},{"name":"mergeRoutes simple","suites":[],"updatePoint":{"line":9,"column":24,"index":128},"line":9,"code":"test('mergeRoutes simple', () => {\n  const userRoutes = [{\n    src: '/user1',\n    dest: '/u1'\n  }, {\n    src: '/user2',\n    dest: '/u2'\n  }];\n  const builds = [{\n    use: '@vercel/node',\n    entrypoint: 'api/home.js',\n    routes: [{\n      src: '/node1',\n      dest: '/n1'\n    }, {\n      src: '/node2',\n      dest: '/n2'\n    }]\n  }, {\n    use: '@vercel/python',\n    entrypoint: 'api/users.py',\n    routes: [{\n      src: '/python1',\n      dest: '/py1'\n    }, {\n      src: '/python2',\n      dest: '/py2'\n    }]\n  }];\n  const actual = mergeRoutes({\n    userRoutes,\n    builds\n  });\n  const expected = [{\n    dest: '/u1',\n    src: '/user1'\n  }, {\n    dest: '/u2',\n    src: '/user2'\n  }, {\n    dest: '/n1',\n    src: '/node1'\n  }, {\n    dest: '/n2',\n    src: '/node2'\n  }, {\n    dest: '/py1',\n    src: '/python1'\n  }, {\n    dest: '/py2',\n    src: '/python2'\n  }];\n  deepStrictEqual(actual, expected);\n});","file":"merge.spec.js","skipped":false,"dir":"packages/routing-utils/test"},{"name":"mergeRoutes handle filesystem user routes","suites":[],"updatePoint":{"line":63,"column":47,"index":1049},"line":63,"code":"test('mergeRoutes handle filesystem user routes', () => {\n  const userRoutes = [{\n    src: '/user1',\n    dest: '/u1'\n  }, {\n    handle: 'filesystem'\n  }, {\n    src: '/user2',\n    dest: '/u2'\n  }];\n  const builds = [{\n    use: '@vercel/node',\n    entrypoint: 'api/home.js',\n    routes: [{\n      src: '/node1',\n      dest: '/n1'\n    }, {\n      src: '/node2',\n      dest: '/n2'\n    }]\n  }, {\n    use: '@vercel/python',\n    entrypoint: 'api/users.py',\n    routes: [{\n      src: '/python1',\n      dest: '/py1'\n    }, {\n      src: '/python2',\n      dest: '/py2'\n    }]\n  }];\n  const actual = mergeRoutes({\n    userRoutes,\n    builds\n  });\n  const expected = [{\n    dest: '/u1',\n    src: '/user1'\n  }, {\n    dest: '/n1',\n    src: '/node1'\n  }, {\n    dest: '/n2',\n    src: '/node2'\n  }, {\n    dest: '/py1',\n    src: '/python1'\n  }, {\n    dest: '/py2',\n    src: '/python2'\n  }, {\n    handle: 'filesystem'\n  }, {\n    dest: '/u2',\n    src: '/user2'\n  }];\n  deepStrictEqual(actual, expected);\n});","file":"merge.spec.js","skipped":false,"dir":"packages/routing-utils/test"},{"name":"mergeRoutes handle filesystem build routes","suites":[],"updatePoint":{"line":121,"column":48,"index":2035},"line":121,"code":"test('mergeRoutes handle filesystem build routes', () => {\n  const userRoutes = [{\n    src: '/user1',\n    dest: '/u1'\n  }, {\n    src: '/user2',\n    dest: '/u2'\n  }];\n  const builds = [{\n    use: '@vercel/node',\n    entrypoint: 'api/home.js',\n    routes: [{\n      src: '/node1',\n      dest: '/n1'\n    }, {\n      handle: 'filesystem'\n    }, {\n      src: '/node2',\n      dest: '/n2'\n    }]\n  }, {\n    use: '@vercel/python',\n    entrypoint: 'api/users.py',\n    routes: [{\n      src: '/python1',\n      dest: '/py1'\n    }, {\n      handle: 'filesystem'\n    }, {\n      src: '/python2',\n      dest: '/py2'\n    }]\n  }];\n  const actual = mergeRoutes({\n    userRoutes,\n    builds\n  });\n  const expected = [{\n    dest: '/u1',\n    src: '/user1'\n  }, {\n    dest: '/u2',\n    src: '/user2'\n  }, {\n    dest: '/n1',\n    src: '/node1'\n  }, {\n    dest: '/py1',\n    src: '/python1'\n  }, {\n    handle: 'filesystem'\n  }, {\n    dest: '/n2',\n    src: '/node2'\n  }, {\n    dest: '/py2',\n    src: '/python2'\n  }];\n  deepStrictEqual(actual, expected);\n});","file":"merge.spec.js","skipped":false,"dir":"packages/routing-utils/test"},{"name":"mergeRoutes handle filesystem both user and builds","suites":[],"updatePoint":{"line":181,"column":56,"index":3069},"line":181,"code":"test('mergeRoutes handle filesystem both user and builds', () => {\n  const userRoutes = [{\n    src: '/user1',\n    dest: '/u1'\n  }, {\n    handle: 'filesystem'\n  }, {\n    src: '/user2',\n    dest: '/u2'\n  }];\n  const builds = [{\n    use: '@vercel/node',\n    entrypoint: 'api/home.js',\n    routes: [{\n      src: '/node1',\n      dest: '/n1'\n    }, {\n      handle: 'filesystem'\n    }, {\n      src: '/node2',\n      dest: '/n2'\n    }]\n  }, {\n    use: '@vercel/python',\n    entrypoint: 'api/users.py',\n    routes: [{\n      src: '/python1',\n      dest: '/py1'\n    }, {\n      handle: 'filesystem'\n    }, {\n      src: '/python2',\n      dest: '/py2'\n    }]\n  }];\n  const actual = mergeRoutes({\n    userRoutes,\n    builds\n  });\n  const expected = [{\n    dest: '/u1',\n    src: '/user1'\n  }, {\n    dest: '/n1',\n    src: '/node1'\n  }, {\n    dest: '/py1',\n    src: '/python1'\n  }, {\n    handle: 'filesystem'\n  }, {\n    dest: '/u2',\n    src: '/user2'\n  }, {\n    dest: '/n2',\n    src: '/node2'\n  }, {\n    dest: '/py2',\n    src: '/python2'\n  }];\n  deepStrictEqual(actual, expected);\n});","file":"merge.spec.js","skipped":false,"dir":"packages/routing-utils/test"},{"name":"mergeRoutes continue true","suites":[],"updatePoint":{"line":243,"column":31,"index":4110},"line":243,"code":"test('mergeRoutes continue true', () => {\n  const userRoutes = [{\n    src: '/user1',\n    dest: '/u1'\n  }, {\n    src: '/user2',\n    dest: '/u2',\n    continue: true\n  }, {\n    src: '/user3',\n    dest: '/u3'\n  }];\n  const builds = [{\n    use: '@vercel/node',\n    entrypoint: 'api/home.js',\n    routes: [{\n      src: '/node1',\n      dest: '/n1'\n    }, {\n      src: '/node3',\n      dest: '/n2',\n      continue: true\n    }, {\n      src: '/node3',\n      dest: '/n3'\n    }]\n  }, {\n    use: '@vercel/python',\n    entrypoint: 'api/users.py',\n    routes: [{\n      src: '/python1',\n      dest: '/py1'\n    }, {\n      src: '/python2',\n      dest: '/py2',\n      continue: true\n    }, {\n      src: '/python3',\n      dest: '/py3'\n    }]\n  }];\n  const actual = mergeRoutes({\n    userRoutes,\n    builds\n  });\n  const expected = [{\n    continue: true,\n    dest: '/n2',\n    src: '/node3'\n  }, {\n    continue: true,\n    dest: '/py2',\n    src: '/python2'\n  }, {\n    dest: '/u1',\n    src: '/user1'\n  }, {\n    continue: true,\n    dest: '/u2',\n    src: '/user2'\n  }, {\n    dest: '/u3',\n    src: '/user3'\n  }, {\n    dest: '/n1',\n    src: '/node1'\n  }, {\n    dest: '/n3',\n    src: '/node3'\n  }, {\n    dest: '/py1',\n    src: '/python1'\n  }, {\n    dest: '/py3',\n    src: '/python3'\n  }];\n  deepStrictEqual(actual, expected);\n});","file":"merge.spec.js","skipped":false,"dir":"packages/routing-utils/test"},{"name":"mergeRoutes check true","suites":[],"updatePoint":{"line":321,"column":28,"index":5406},"line":321,"code":"test('mergeRoutes check true', () => {\n  const userRoutes = [{\n    src: '/user1',\n    dest: '/u1'\n  }, {\n    src: '/user2',\n    dest: '/u2'\n  }, {\n    src: '/user3',\n    dest: '/u3'\n  }];\n  const builds = [{\n    use: '@vercel/node',\n    entrypoint: 'api/home.js',\n    routes: [{\n      src: '/node1',\n      dest: '/n1'\n    }, {\n      src: '/node3',\n      dest: '/n2',\n      check: true\n    }, {\n      src: '/node3',\n      dest: '/n3'\n    }]\n  }, {\n    use: '@vercel/python',\n    entrypoint: 'api/users.py',\n    routes: [{\n      src: '/python1',\n      dest: '/py1'\n    }, {\n      src: '/python2',\n      dest: '/py2',\n      check: true\n    }, {\n      src: '/python3',\n      dest: '/py3'\n    }]\n  }];\n  const actual = mergeRoutes({\n    userRoutes,\n    builds\n  });\n  const expected = [{\n    dest: '/u1',\n    src: '/user1'\n  }, {\n    dest: '/u2',\n    src: '/user2'\n  }, {\n    dest: '/u3',\n    src: '/user3'\n  }, {\n    check: true,\n    dest: '/n2',\n    src: '/node3'\n  }, {\n    check: true,\n    dest: '/py2',\n    src: '/python2'\n  }, {\n    dest: '/n1',\n    src: '/node1'\n  }, {\n    dest: '/n3',\n    src: '/node3'\n  }, {\n    dest: '/py1',\n    src: '/python1'\n  }, {\n    dest: '/py3',\n    src: '/python3'\n  }];\n  deepStrictEqual(actual, expected);\n});","file":"merge.spec.js","skipped":false,"dir":"packages/routing-utils/test"},{"name":"mergeRoutes check true, continue true, handle filesystem middle","suites":[],"updatePoint":{"line":397,"column":69,"index":6691},"line":397,"code":"test('mergeRoutes check true, continue true, handle filesystem middle', () => {\n  const userRoutes = [{\n    src: '/user1',\n    dest: '/u1',\n    continue: true\n  }, {\n    src: '/user2',\n    dest: '/u2'\n  }, {\n    handle: 'filesystem'\n  }, {\n    src: '/user3',\n    dest: '/u3'\n  }];\n  const builds = [{\n    use: '@vercel/node',\n    entrypoint: 'api/home.js',\n    routes: [{\n      src: '/node1',\n      dest: '/n1',\n      continue: true\n    }, {\n      src: '/node3',\n      dest: '/n2',\n      check: true\n    }, {\n      handle: 'filesystem'\n    }, {\n      src: '/node3',\n      dest: '/n3'\n    }]\n  }, {\n    use: '@vercel/python',\n    entrypoint: 'api/users.py',\n    routes: [{\n      src: '/python1',\n      dest: '/py1',\n      check: true\n    }, {\n      src: '/python2',\n      dest: '/py2',\n      continue: true\n    }, {\n      handle: 'filesystem'\n    }, {\n      src: '/python3',\n      dest: '/py3'\n    }]\n  }];\n  const actual = mergeRoutes({\n    userRoutes,\n    builds\n  });\n  const expected = [{\n    continue: true,\n    dest: '/n1',\n    src: '/node1'\n  }, {\n    continue: true,\n    dest: '/py2',\n    src: '/python2'\n  }, {\n    continue: true,\n    dest: '/u1',\n    src: '/user1'\n  }, {\n    dest: '/u2',\n    src: '/user2'\n  }, {\n    check: true,\n    dest: '/n2',\n    src: '/node3'\n  }, {\n    check: true,\n    dest: '/py1',\n    src: '/python1'\n  }, {\n    handle: 'filesystem'\n  }, {\n    dest: '/u3',\n    src: '/user3'\n  }, {\n    dest: '/n3',\n    src: '/node3'\n  }, {\n    dest: '/py3',\n    src: '/python3'\n  }];\n  deepStrictEqual(actual, expected);\n});","file":"merge.spec.js","skipped":false,"dir":"packages/routing-utils/test"},{"name":"mergeRoutes check true, continue true, handle filesystem top","suites":[],"updatePoint":{"line":487,"column":66,"index":8233},"line":487,"code":"test('mergeRoutes check true, continue true, handle filesystem top', () => {\n  const userRoutes = [{\n    handle: 'filesystem'\n  }, {\n    src: '/user1',\n    dest: '/u1'\n  }];\n  const builds = [{\n    use: '@vercel/node',\n    entrypoint: 'api/home.js',\n    routes: [{\n      handle: 'filesystem'\n    }, {\n      src: '/node1',\n      dest: '/n1'\n    }, {\n      src: '/node2',\n      dest: '/n2',\n      continue: true\n    }, {\n      src: '/node3',\n      dest: '/n3',\n      check: true\n    }]\n  }, {\n    use: '@vercel/python',\n    entrypoint: 'api/users.py',\n    routes: [{\n      handle: 'filesystem'\n    }, {\n      src: '/python1',\n      dest: '/py1'\n    }, {\n      src: '/python2',\n      dest: '/py2',\n      check: true\n    }, {\n      src: '/python3',\n      dest: '/py3',\n      continue: true\n    }]\n  }];\n  const actual = mergeRoutes({\n    userRoutes,\n    builds\n  });\n  const expected = [{\n    handle: 'filesystem'\n  }, {\n    continue: true,\n    dest: '/n2',\n    src: '/node2'\n  }, {\n    continue: true,\n    dest: '/py3',\n    src: '/python3'\n  }, {\n    dest: '/u1',\n    src: '/user1'\n  }, {\n    check: true,\n    dest: '/n3',\n    src: '/node3'\n  }, {\n    check: true,\n    dest: '/py2',\n    src: '/python2'\n  }, {\n    dest: '/n1',\n    src: '/node1'\n  }, {\n    dest: '/py1',\n    src: '/python1'\n  }];\n  deepStrictEqual(actual, expected);\n});","file":"merge.spec.js","skipped":false,"dir":"packages/routing-utils/test"},{"name":"mergeRoutes multiple handle values","suites":[],"updatePoint":{"line":563,"column":40,"index":9541},"line":563,"code":"test('mergeRoutes multiple handle values', () => {\n  const userRoutes = [{\n    handle: 'filesystem'\n  }, {\n    src: '/user1',\n    dest: '/u1'\n  }, {\n    handle: 'miss'\n  }, {\n    src: '/user2',\n    dest: '/u2'\n  }, {\n    handle: 'hit'\n  }, {\n    src: '/user3',\n    dest: '/u3'\n  }];\n  const builds = [{\n    use: '@vercel/node',\n    entrypoint: 'api/home.js',\n    routes: [{\n      handle: 'filesystem'\n    }, {\n      src: '/node1',\n      dest: '/n1'\n    }, {\n      handle: 'hit'\n    }, {\n      src: '/node2',\n      dest: '/n2',\n      continue: true\n    }, {\n      handle: 'miss'\n    }, {\n      src: '/node3',\n      dest: '/n3',\n      check: true\n    }]\n  }, {\n    use: '@vercel/python',\n    entrypoint: 'api/users.py',\n    routes: [{\n      handle: 'filesystem'\n    }, {\n      src: '/python1',\n      dest: '/py1'\n    }, {\n      handle: 'hit'\n    }, {\n      src: '/python2',\n      dest: '/py2',\n      check: true\n    }, {\n      handle: 'miss'\n    }, {\n      src: '/python3',\n      dest: '/py3',\n      continue: true\n    }]\n  }];\n  const actual = mergeRoutes({\n    userRoutes,\n    builds\n  });\n  const expected = [{\n    handle: 'filesystem'\n  }, {\n    dest: '/u1',\n    src: '/user1'\n  }, {\n    dest: '/n1',\n    src: '/node1'\n  }, {\n    dest: '/py1',\n    src: '/python1'\n  }, {\n    handle: 'miss'\n  }, {\n    continue: true,\n    dest: '/py3',\n    src: '/python3'\n  }, {\n    dest: '/u2',\n    src: '/user2'\n  }, {\n    check: true,\n    dest: '/n3',\n    src: '/node3'\n  }, {\n    handle: 'hit'\n  }, {\n    continue: true,\n    dest: '/n2',\n    src: '/node2'\n  }, {\n    dest: '/u3',\n    src: '/user3'\n  }, {\n    check: true,\n    dest: '/py2',\n    src: '/python2'\n  }];\n  deepStrictEqual(actual, expected);\n});","file":"merge.spec.js","skipped":false,"dir":"packages/routing-utils/test"},{"name":"mergeRoutes ensure `handle: error` comes last","suites":[],"updatePoint":{"line":667,"column":51,"index":11248},"line":667,"code":"test('mergeRoutes ensure `handle: error` comes last', () => {\n  const userRoutes = [];\n  const builds = [{\n    use: '@vercel/static-build',\n    entrypoint: 'packge.json',\n    routes: [{\n      src: '^/home$',\n      status: 301,\n      headers: {\n        Location: '/'\n      }\n    }]\n  }, {\n    use: '@vercel/zero-config-routes',\n    entrypoint: '/',\n    routes: [{\n      handle: 'error'\n    }, {\n      status: 404,\n      src: '^/(?!.*api).*$',\n      dest: '404.html'\n    }]\n  }];\n  const actual = mergeRoutes({\n    userRoutes,\n    builds\n  });\n  const expected = [{\n    status: 301,\n    src: '^/home$',\n    headers: {\n      Location: '/'\n    }\n  }, {\n    handle: 'error'\n  }, {\n    status: 404,\n    src: '^/(?!.*api).*$',\n    dest: '404.html'\n  }];\n  deepStrictEqual(actual, expected);\n});","file":"merge.spec.js","skipped":false,"dir":"packages/routing-utils/test"},{"name":"mergeRoutes ensure beforeFiles comes after redirects (continue)","suites":[],"updatePoint":{"line":709,"column":69,"index":12054},"line":709,"code":"test('mergeRoutes ensure beforeFiles comes after redirects (continue)', () => {\n  const userRoutes = [];\n  const builds = [{\n    use: '@vercel/next',\n    entrypoint: 'package.json',\n    routes: [{\n      src: '^/home$',\n      status: 301,\n      headers: {\n        Location: '/'\n      }\n    }, {\n      src: '^/hello$',\n      dest: '/somewhere',\n      continue: true,\n      override: true\n    }, {\n      handle: 'filesystem'\n    }, {\n      src: '^/404$',\n      dest: '/404',\n      status: 404,\n      check: true\n    }]\n  }];\n  const actual = mergeRoutes({\n    userRoutes,\n    builds\n  });\n  const expected = [{\n    src: '^/home$',\n    status: 301,\n    headers: {\n      Location: '/'\n    }\n  }, {\n    src: '^/hello$',\n    dest: '/somewhere',\n    continue: true,\n    override: true\n  }, {\n    handle: 'filesystem'\n  }, {\n    src: '^/404$',\n    dest: '/404',\n    status: 404,\n    check: true\n  }];\n  deepStrictEqual(actual, expected);\n});","file":"merge.spec.js","skipped":false,"dir":"packages/routing-utils/test"},{"name":"mergeRoutes ensure beforeFiles comes after redirects (check)","suites":[],"updatePoint":{"line":759,"column":66,"index":12984},"line":759,"code":"test('mergeRoutes ensure beforeFiles comes after redirects (check)', () => {\n  const userRoutes = [];\n  const builds = [{\n    use: '@vercel/next',\n    entrypoint: 'package.json',\n    routes: [{\n      src: '^/home$',\n      status: 301,\n      headers: {\n        Location: '/'\n      }\n    }, {\n      src: '^/hello$',\n      dest: '/somewhere',\n      check: true,\n      override: true\n    }, {\n      src: '^/.*$',\n      middleware: 0\n    }, {\n      handle: 'filesystem'\n    }, {\n      src: '^/404$',\n      dest: '/404',\n      status: 404,\n      caseSensitive: true,\n      check: true\n    }]\n  }];\n  const actual = mergeRoutes({\n    userRoutes,\n    builds\n  });\n  const expected = [{\n    src: '^/home$',\n    status: 301,\n    headers: {\n      Location: '/'\n    }\n  }, {\n    src: '^/hello$',\n    dest: '/somewhere',\n    check: true,\n    override: true\n  }, {\n    src: '^/.*$',\n    middleware: 0\n  }, {\n    handle: 'filesystem'\n  }, {\n    src: '^/404$',\n    dest: '/404',\n    status: 404,\n    check: true,\n    caseSensitive: true\n  }];\n  deepStrictEqual(actual, expected);\n});","file":"merge.spec.js","skipped":false,"dir":"packages/routing-utils/test"},{"name":"getCleanUrls","suites":[],"updatePoint":{"line":44,"column":18,"index":845},"line":44,"code":"test('getCleanUrls', () => {\n  const actual = getCleanUrls(['file.txt', 'path/to/file.txt', 'file.js', 'path/to/file.js', 'file.html', 'path/to/file.html']);\n  const expected = [{\n    html: '/file.html',\n    clean: '/file'\n  }, {\n    html: '/path/to/file.html',\n    clean: '/path/to/file'\n  }];\n  deepEqual(actual, expected);\n});","file":"superstatic.spec.js","skipped":false,"dir":"packages/routing-utils/test"},{"name":"convertCleanUrls true","suites":[],"updatePoint":{"line":55,"column":27,"index":1184},"line":55,"code":"test('convertCleanUrls true', () => {\n  const actual = convertCleanUrls(true);\n  const expected = [{\n    src: '^/(?:(.+)/)?index(?:\\\\.html)?/?$',\n    headers: {\n      Location: '/$1'\n    },\n    status: 308\n  }, {\n    src: '^/(.*)\\\\.html/?$',\n    headers: {\n      Location: '/$1'\n    },\n    status: 308\n  }];\n  deepEqual(actual, expected);\n  const mustMatch = [['/index', '/index.html', '/sub/index', '/sub/index.html'], ['/file.html', '/sub/file.html']];\n  const mustNotMatch = [['/someindex', '/someindex.html', '/indexAhtml', '/sub/someindex', '/sub/someindex.html', '/sub/indexAhtml'], ['/filehtml', '/sub/filehtml']];\n  assertRegexMatches(actual, mustMatch, mustNotMatch);\n});","file":"superstatic.spec.js","skipped":false,"dir":"packages/routing-utils/test"},{"name":"convertCleanUrls true, trailingSlash true","suites":[],"updatePoint":{"line":75,"column":47,"index":1885},"line":75,"code":"test('convertCleanUrls true, trailingSlash true', () => {\n  const actual = convertCleanUrls(true, true);\n  const expected = [{\n    src: '^/(?:(.+)/)?index(?:\\\\.html)?/?$',\n    headers: {\n      Location: '/$1/'\n    },\n    status: 308\n  }, {\n    src: '^/(.*)\\\\.html/?$',\n    headers: {\n      Location: '/$1/'\n    },\n    status: 308\n  }];\n  deepEqual(actual, expected);\n  const mustMatch = [['/index', '/index.html', '/sub/index', '/sub/index.html', '/index/', '/index.html/', '/sub/index/', '/sub/index.html/'], ['/file.html', '/sub/file.html', '/file.html/', '/sub/file.html/']];\n  const mustNotMatch = [['/someindex', '/someindex.html', '/indexAhtml', '/sub/someindex', '/sub/someindex.html', '/sub/indexAhtml', '/someindex/', '/someindex.html/', '/indexAhtml/', '/sub/someindex/', '/sub/someindex.html/', '/sub/indexAhtml/'], ['/filehtml', '/sub/filehtml', '/filehtml/', '/sub/filehtml/']];\n  assertRegexMatches(actual, mustMatch, mustNotMatch);\n});","file":"superstatic.spec.js","skipped":false,"dir":"packages/routing-utils/test"},{"name":"convertCleanUrls false","suites":[],"updatePoint":{"line":95,"column":28,"index":2817},"line":95,"code":"test('convertCleanUrls false', () => {\n  const actual = convertCleanUrls(false);\n  const expected = [];\n  deepEqual(actual, expected);\n});","file":"superstatic.spec.js","skipped":false,"dir":"packages/routing-utils/test"},{"name":"convertRedirects","suites":[],"updatePoint":{"line":100,"column":22,"index":2950},"line":100,"code":"test('convertRedirects', () => {\n  const actual = convertRedirects([{\n    source: '/(.*)',\n    has: [{\n      type: 'host',\n      value: '(?<subdomain>.*)-test.vercel.app'\n    }],\n    destination: 'https://:subdomain.example.com/some-path/end?a=b'\n  }, {\n    source: '/some/old/path',\n    destination: '/some/new/path'\n  }, {\n    source: '/next(\\\\.js)?',\n    destination: 'https://nextjs.org'\n  }, {\n    source: '/proxy/(.*)',\n    destination: 'https://www.firebase.com',\n    statusCode: 302\n  }, {\n    source: '/proxy-regex/([a-zA-Z]{1,})',\n    destination: 'https://firebase.com/$1'\n  }, {\n    source: '/proxy-port/([a-zA-Z]{1,})',\n    destination: 'https://firebase.com:8080/$1'\n  }, {\n    source: '/projects/:id/:action',\n    destination: '/projects.html'\n  }, {\n    source: '/old/:segment/path',\n    destination: '/new/path/:segment'\n  }, {\n    source: '/catchall/:hello*',\n    destination: '/catchall/:hello*/'\n  }, {\n    source: '/another-catch/:hello+',\n    destination: '/another-catch/:hello+/'\n  }, {\n    source: '/feedback/((?!general).*)',\n    destination: '/feedback/general'\n  }, {\n    source: '/catchme/:id*',\n    destination: '/api/user'\n  }, {\n    source: '/hello/:world*',\n    destination: '/something#:world*'\n  }, {\n    source: '/external/:id',\n    destination: 'https://example.com/?utm_source=google.com#/guides/:id/page?dynamic=code'\n  }, {\n    source: '/optional/:id?',\n    destination: '/api/optional/:id?'\n  }, {\n    source: '/feature-{:slug}',\n    destination: '/blog-{:slug}'\n  }, {\n    source: '/hello/:world',\n    destination: '/somewhere?else={:world}'\n  }, {\n    source: '/hello/:first',\n    destination: '/another/:a/:b',\n    has: [{\n      type: 'host',\n      value: '(?<a>.*)\\\\.(?<b>.*)'\n    }],\n    permanent: false\n  }, {\n    source: '/hello/:first',\n    destination: '/another/:first/:username/:pathname/:another/:host/:a/:b/:c/:d',\n    has: [{\n      type: 'header',\n      key: 'x-rewrite'\n    }, {\n      type: 'cookie',\n      key: 'loggedIn',\n      value: '1'\n    }, {\n      type: 'host',\n      value: 'vercel.com'\n    }, {\n      type: 'host',\n      value: '(?<a>.*)\\\\.(?<b>.*)'\n    }, {\n      type: 'header',\n      key: 'host',\n      value: '(?<c>.*)\\\\.(?<d>.*)'\n    }, {\n      type: 'query',\n      key: 'username'\n    }, {\n      type: 'header',\n      key: 'x-pathname',\n      value: '(?<pathname>.*)'\n    }, {\n      type: 'header',\n      key: 'X-Pathname',\n      value: '(?<another>hello|world)'\n    }],\n    permanent: false\n  }]);\n  const expected = [{\n    has: [{\n      type: 'host',\n      value: '(?<subdomain>.*)-test.vercel.app'\n    }],\n    headers: {\n      Location: 'https://$subdomain.example.com/some-path/end?a=b'\n    },\n    src: '^(?:\\\\/(.*))$',\n    status: 308\n  }, {\n    src: '^\\\\/some\\\\/old\\\\/path$',\n    headers: {\n      Location: '/some/new/path'\n    },\n    status: 308\n  }, {\n    src: '^\\\\/next(\\\\.js)?$',\n    headers: {\n      Location: 'https://nextjs.org'\n    },\n    status: 308\n  }, {\n    src: '^\\\\/proxy(?:\\\\/(.*))$',\n    headers: {\n      Location: 'https://www.firebase.com'\n    },\n    status: 302\n  }, {\n    src: '^\\\\/proxy-regex(?:\\\\/([a-zA-Z]{1,}))$',\n    headers: {\n      Location: 'https://firebase.com/$1'\n    },\n    status: 308\n  }, {\n    src: '^\\\\/proxy-port(?:\\\\/([a-zA-Z]{1,}))$',\n    headers: {\n      Location: 'https://firebase.com:8080/$1'\n    },\n    status: 308\n  }, {\n    src: '^\\\\/projects(?:\\\\/([^\\\\/]+?))(?:\\\\/([^\\\\/]+?))$',\n    headers: {\n      Location: '/projects.html'\n    },\n    status: 308\n  }, {\n    src: '^\\\\/old(?:\\\\/([^\\\\/]+?))\\\\/path$',\n    headers: {\n      Location: '/new/path/$1'\n    },\n    status: 308\n  }, {\n    src: '^\\\\/catchall(?:\\\\/((?:[^\\\\/]+?)(?:\\\\/(?:[^\\\\/]+?))*))?$',\n    headers: {\n      Location: '/catchall/$1/'\n    },\n    status: 308\n  }, {\n    src: '^\\\\/another-catch(?:\\\\/((?:[^\\\\/]+?)(?:\\\\/(?:[^\\\\/]+?))*))$',\n    headers: {\n      Location: '/another-catch/$1/'\n    },\n    status: 308\n  }, {\n    src: '^\\\\/feedback(?:\\\\/((?!general).*))$',\n    headers: {\n      Location: '/feedback/general'\n    },\n    status: 308\n  }, {\n    src: '^\\\\/catchme(?:\\\\/((?:[^\\\\/]+?)(?:\\\\/(?:[^\\\\/]+?))*))?$',\n    headers: {\n      Location: '/api/user'\n    },\n    status: 308\n  }, {\n    src: '^\\\\/hello(?:\\\\/((?:[^\\\\/]+?)(?:\\\\/(?:[^\\\\/]+?))*))?$',\n    headers: {\n      Location: '/something#$1'\n    },\n    status: 308\n  }, {\n    src: '^\\\\/external(?:\\\\/([^\\\\/]+?))$',\n    headers: {\n      Location: 'https://example.com/?utm_source=google.com#/guides/$1/page?dynamic=code'\n    },\n    status: 308\n  }, {\n    src: '^\\\\/optional(?:\\\\/([^\\\\/]+?))?$',\n    headers: {\n      Location: '/api/optional/$1'\n    },\n    status: 308\n  }, {\n    headers: {\n      Location: '/blog-$1'\n    },\n    src: '^\\\\/feature-([^\\\\/]+?)$',\n    status: 308\n  }, {\n    headers: {\n      Location: '/somewhere?else=$1'\n    },\n    src: '^\\\\/hello(?:\\\\/([^\\\\/]+?))$',\n    status: 308\n  }, {\n    has: [{\n      type: 'host',\n      value: '(?<a>.*)\\\\.(?<b>.*)'\n    }],\n    headers: {\n      Location: '/another/$a/$b'\n    },\n    src: '^\\\\/hello(?:\\\\/([^\\\\/]+?))$',\n    status: 307\n  }, {\n    has: [{\n      key: 'x-rewrite',\n      type: 'header'\n    }, {\n      key: 'loggedIn',\n      type: 'cookie',\n      value: '1'\n    }, {\n      type: 'host',\n      value: 'vercel.com'\n    }, {\n      type: 'host',\n      value: '(?<a>.*)\\\\.(?<b>.*)'\n    }, {\n      key: 'host',\n      type: 'header',\n      value: '(?<c>.*)\\\\.(?<d>.*)'\n    }, {\n      key: 'username',\n      type: 'query'\n    }, {\n      key: 'x-pathname',\n      type: 'header',\n      value: '(?<pathname>.*)'\n    }, {\n      type: 'header',\n      key: 'x-pathname',\n      value: '(?<another>hello|world)'\n    }],\n    headers: {\n      Location: '/another/$1/$username/$pathname/$another/$host/$a/$b/$c/$d'\n    },\n    src: '^\\\\/hello(?:\\\\/([^\\\\/]+?))$',\n    status: 307\n  }];\n  deepEqual(actual, expected);\n  const mustMatch = [['/hello'], ['/some/old/path'], ['/next', '/next.js'], ['/proxy/one', '/proxy/2', '/proxy/-', '/proxy/dir/sub'], ['/proxy-regex/admin', '/proxy-regex/anotherAdmin'], ['/proxy-port/admin', '/proxy-port/anotherAdmin'], ['/projects/one/edit', '/projects/two/edit'], ['/old/one/path', '/old/two/path'], ['/catchall/first', '/catchall/first/second'], ['/another-catch/first', '/another-catch/first/second'], ['/feedback/another'], ['/catchme/id-1', '/catchme/id/2'], ['/hello/world', '/hello/another/world'], ['/external/1', '/external/2'], ['/optional', '/optional/1'], ['/feature-first', '/feature-second'], ['/hello/world', '/hello/again'], ['/hello/world'], ['/hello/world']];\n  const mustNotMatch = [[], ['/nope'], ['/nextAjs', '/nextjs'], ['/prox', '/proxyed/two'], ['/proxy-regex/user/1', '/proxy-regex/another/1'], ['/proxy-port/user/1', '/proxy-port/another/1'], ['/projects/edit', '/projects/two/three/delete', '/projects'], ['/old/path', '/old/two/foo', '/old'], ['/random-catch'], ['/another-catch'], ['/feedback/general'], ['/catchm', '/random'], ['/not-this-one', '/helloo'], ['/externalnope', '/externally'], ['/optionalnope', '/optionally'], ['/feature/first', '/feature'], ['/hello', '/hello/another/one'], ['/hellooo'], ['/helloooo']];\n  assertRegexMatches(actual, mustMatch, mustNotMatch);\n});","file":"superstatic.spec.js","skipped":false,"dir":"packages/routing-utils/test"},{"name":"convertRewrites","suites":[],"updatePoint":{"line":356,"column":21,"index":10083},"line":356,"code":"test('convertRewrites', () => {\n  const actual = convertRewrites([{\n    source: '/some/old/path',\n    destination: '/some/new/path'\n  }, {\n    source: '/proxy/(.*)',\n    destination: 'https://www.firebase.com'\n  }, {\n    source: '/proxy/(.*)',\n    destination: 'https://www.firebase.com/'\n  }, {\n    source: '/proxy-regex/([a-zA-Z]{1,})',\n    destination: 'https://firebase.com/$1'\n  }, {\n    source: '/proxy-port/([a-zA-Z]{1,})',\n    destination: 'https://firebase.com:8080/$1'\n  }, {\n    source: '/projects/:id/edit',\n    destination: '/projects.html'\n  }, {\n    source: '/users/:id',\n    destination: '/api/user?identifier=:id&version=v2'\n  }, {\n    source: '/:file/:id',\n    destination: '/:file/get?identifier=:id'\n  }, {\n    source: '/qs-and-hash/:id/:hash',\n    destination: '/api/get?identifier=:id#:hash'\n  }, {\n    source: '/fullurl',\n    destination: 'https://user:pass@sub.example.com:8080/path/goes/here?v=1&id=2#hash'\n  }, {\n    source: '/dont-override-qs/:name/:age',\n    destination: '/final?name=bob&age='\n  }, {\n    source: '/catchall/:hello*/',\n    destination: '/catchall/:hello*'\n  }, {\n    source: '/another-catch/:hello+/',\n    destination: '/another-catch/:hello+'\n  }, {\n    source: '/catchme/:id*',\n    destination: '/api/user'\n  }, {\n    source: '/:path',\n    destination: '/test?path=:path'\n  }, {\n    source: '/:path/:two',\n    destination: '/test?path=:path'\n  }, {\n    source: '/(.*)-:id(\\\\d+).html',\n    destination: '/blog/:id'\n  }, {\n    source: '/feature-{:slug}',\n    destination: '/blog-{:slug}'\n  }, {\n    source: '/hello/:world',\n    destination: '/somewhere?else={:world}'\n  }, {\n    source: '/hello/:first',\n    destination: '/another/:a/:b',\n    has: [{\n      type: 'host',\n      value: '(?<a>.*)\\\\.(?<b>.*)'\n    }]\n  }, {\n    source: '/hello/:first',\n    destination: '/another/:first/:username/:pathname/:another/:host/:a/:b/:c/:d',\n    has: [{\n      type: 'header',\n      key: 'x-rewrite'\n    }, {\n      type: 'cookie',\n      key: 'loggedIn',\n      value: '1'\n    }, {\n      type: 'host',\n      value: 'vercel.com'\n    }, {\n      type: 'host',\n      value: '(?<a>.*)\\\\.(?<b>.*)'\n    }, {\n      type: 'header',\n      key: 'host',\n      value: '(?<c>.*)\\\\.(?<d>.*)'\n    }, {\n      type: 'query',\n      key: 'username'\n    }, {\n      type: 'header',\n      key: 'x-pathname',\n      value: '(?<pathname>.*)'\n    }, {\n      type: 'header',\n      key: 'X-Pathname',\n      value: '(?<another>hello|world)'\n    }]\n  }, {\n    source: '/array-query-string/:id/:name',\n    destination: 'https://example.com/?tag=1&tag=2'\n  }, {\n    source: '/:nextInternalLocale/:path',\n    destination: '/api/hello'\n  }], ['nextInternalLocale']);\n  const expected = [{\n    src: '^\\\\/some\\\\/old\\\\/path$',\n    dest: '/some/new/path',\n    check: true\n  }, {\n    src: '^\\\\/proxy(?:\\\\/(.*))$',\n    dest: 'https://www.firebase.com/',\n    check: true\n  }, {\n    src: '^\\\\/proxy(?:\\\\/(.*))$',\n    dest: 'https://www.firebase.com/',\n    check: true\n  }, {\n    src: '^\\\\/proxy-regex(?:\\\\/([a-zA-Z]{1,}))$',\n    dest: 'https://firebase.com/$1',\n    check: true\n  }, {\n    src: '^\\\\/proxy-port(?:\\\\/([a-zA-Z]{1,}))$',\n    dest: 'https://firebase.com:8080/$1',\n    check: true\n  }, {\n    src: '^\\\\/projects(?:\\\\/([^\\\\/]+?))\\\\/edit$',\n    dest: '/projects.html?id=$1',\n    check: true\n  }, {\n    src: '^\\\\/users(?:\\\\/([^\\\\/]+?))$',\n    dest: '/api/user?identifier=$1&version=v2&id=$1',\n    check: true\n  }, {\n    src: '^(?:\\\\/([^\\\\/]+?))(?:\\\\/([^\\\\/]+?))$',\n    dest: '/$1/get?identifier=$2',\n    check: true\n  }, {\n    src: '^\\\\/qs-and-hash(?:\\\\/([^\\\\/]+?))(?:\\\\/([^\\\\/]+?))$',\n    dest: '/api/get?identifier=$1#$2',\n    check: true\n  }, {\n    src: '^\\\\/fullurl$',\n    dest: 'https://user:pass@sub.example.com:8080/path/goes/here?v=1&id=2#hash',\n    check: true\n  }, {\n    src: '^\\\\/dont-override-qs(?:\\\\/([^\\\\/]+?))(?:\\\\/([^\\\\/]+?))$',\n    dest: '/final?name=bob&age=',\n    check: true\n  }, {\n    src: '^\\\\/catchall(?:\\\\/((?:[^\\\\/]+?)(?:\\\\/(?:[^\\\\/]+?))*))?\\\\/$',\n    dest: '/catchall/$1',\n    check: true\n  }, {\n    src: '^\\\\/another-catch(?:\\\\/((?:[^\\\\/]+?)(?:\\\\/(?:[^\\\\/]+?))*))\\\\/$',\n    dest: '/another-catch/$1',\n    check: true\n  }, {\n    src: '^\\\\/catchme(?:\\\\/((?:[^\\\\/]+?)(?:\\\\/(?:[^\\\\/]+?))*))?$',\n    dest: '/api/user?id=$1',\n    check: true\n  }, {\n    src: '^(?:\\\\/([^\\\\/]+?))$',\n    dest: '/test?path=$1',\n    check: true\n  }, {\n    check: true,\n    dest: '/test?path=$1&two=$2',\n    src: '^(?:\\\\/([^\\\\/]+?))(?:\\\\/([^\\\\/]+?))$'\n  }, {\n    check: true,\n    dest: '/blog/$2',\n    src: '^(?:\\\\/(.*))-(\\\\d+)\\\\.html$'\n  }, {\n    dest: '/blog-$1',\n    src: '^\\\\/feature-([^\\\\/]+?)$',\n    check: true\n  }, {\n    dest: '/somewhere?else=$1&world=$1',\n    src: '^\\\\/hello(?:\\\\/([^\\\\/]+?))$',\n    check: true\n  }, {\n    check: true,\n    dest: '/another/$a/$b',\n    has: [{\n      type: 'host',\n      value: '(?<a>.*)\\\\.(?<b>.*)'\n    }],\n    src: '^\\\\/hello(?:\\\\/([^\\\\/]+?))$'\n  }, {\n    check: true,\n    dest: '/another/$1/$username/$pathname/$another/$host/$a/$b/$c/$d',\n    has: [{\n      key: 'x-rewrite',\n      type: 'header'\n    }, {\n      key: 'loggedIn',\n      type: 'cookie',\n      value: '1'\n    }, {\n      type: 'host',\n      value: 'vercel.com'\n    }, {\n      type: 'host',\n      value: '(?<a>.*)\\\\.(?<b>.*)'\n    }, {\n      key: 'host',\n      type: 'header',\n      value: '(?<c>.*)\\\\.(?<d>.*)'\n    }, {\n      type: 'query',\n      key: 'username'\n    }, {\n      type: 'header',\n      key: 'x-pathname',\n      value: '(?<pathname>.*)'\n    }, {\n      type: 'header',\n      key: 'x-pathname',\n      value: '(?<another>hello|world)'\n    }],\n    src: '^\\\\/hello(?:\\\\/([^\\\\/]+?))$'\n  }, {\n    src: '^\\\\/array-query-string(?:\\\\/([^\\\\/]+?))(?:\\\\/([^\\\\/]+?))$',\n    dest: 'https://example.com/?tag=1&tag=2&id=$1&name=$2',\n    check: true\n  }, {\n    check: true,\n    dest: '/api/hello?nextInternalLocale=$1&path=$2',\n    src: '^(?:\\\\/([^\\\\/]+?))(?:\\\\/([^\\\\/]+?))$'\n  }];\n  deepEqual(actual, expected);\n  const mustMatch = [['/some/old/path'], ['/proxy/one', '/proxy/two'], ['/proxy/one', '/proxy/two'], ['/proxy-regex/admin', '/proxy-regex/anotherAdmin'], ['/proxy-port/admin', '/proxy-port/anotherAdmin'], ['/projects/one/edit', '/projects/two/edit'], ['/users/four', '/users/five'], ['/file1/yep', '/file2/nope'], ['/qs-and-hash/test/first', '/qs-and-hash/test/second'], ['/fullurl'], ['/dont-override-qs/bob/42', '/dont-override-qs/alice/29'], ['/catchall/first/', '/catchall/first/second/'], ['/another-catch/first/', '/another-catch/first/second/'], ['/catchme/id-1', '/catchme/id/2'], ['/first', '/another'], ['/first/second', '/one/two'], ['/hello/post-123.html', '/post-123.html'], ['/feature-first', '/feature-second'], ['/hello/world', '/hello/again'], ['/hello/world'], ['/hello/world'], ['/array-query-string/10/email'], ['/en/hello']];\n  const mustNotMatch = [['/nope'], ['/prox', '/proxyed/two'], ['/prox', '/proxyed/two'], ['/proxy-regex/user/1', '/proxy-regex/another/1'], ['/proxy-port/user/1', '/proxy-port/another/1'], ['/projects/edit', '/projects/two/delete', '/projects'], ['/users/edit/four', '/users/five/delete', '/users'], ['/'], ['/qs-and-hash', '/qs-and-hash/onlyone'], ['/full'], ['/dont-override-qs', '/dont-override-qs/nope'], ['/random-catch/'], ['/another-catch/'], ['/catchm', '/random'], ['/another/one'], ['/not', '/these'], ['/hello/post.html'], ['/feature/first', '/feature'], ['/hello', '/hello/another/one'], ['/hllooo'], ['/hllooo'], ['/array-query-string/10'], ['/en/hello/world', '/en/hello/']];\n  assertRegexMatches(actual, mustMatch, mustNotMatch);\n});","file":"superstatic.spec.js","skipped":false,"dir":"packages/routing-utils/test"},{"name":"convertHeaders","suites":[],"updatePoint":{"line":591,"column":20,"index":17586},"line":591,"code":"test('convertHeaders', () => {\n  const actual = convertHeaders([{\n    source: '(.*)+/(.*)\\\\.(eot|otf|ttf|ttc|woff|font\\\\.css)',\n    headers: [{\n      key: 'Access-Control-Allow-Origin',\n      value: '*'\n    }]\n  }, {\n    source: '404.html',\n    headers: [{\n      key: 'Cache-Control',\n      value: 'max-age=300'\n    }, {\n      key: 'Set-Cookie',\n      value: 'error=404'\n    }]\n  }, {\n    source: '/blog/:path*',\n    headers: [{\n      key: 'on-blog',\n      value: ':path*'\n    }, {\n      key: ':path*',\n      value: 'blog'\n    }]\n  }, {\n    source: '/like/params/:path',\n    headers: [{\n      key: 'x-path',\n      value: ':path'\n    }, {\n      key: 'some:path',\n      value: 'hi'\n    }, {\n      key: 'x-test',\n      value: 'some:value*'\n    }, {\n      key: 'x-test-2',\n      value: 'value*'\n    }, {\n      key: 'x-test-3',\n      value: ':value?'\n    }, {\n      key: 'x-test-4',\n      value: ':value+'\n    }, {\n      key: 'x-test-5',\n      value: 'something https:'\n    }, {\n      key: 'x-test-6',\n      value: ':hello(world)'\n    }, {\n      key: 'x-test-7',\n      value: 'hello(world)'\n    }, {\n      key: 'x-test-8',\n      value: 'hello{1,}'\n    }, {\n      key: 'x-test-9',\n      value: ':hello{1,2}'\n    }, {\n      key: 'content-security-policy',\n      value: \"default-src 'self'; img-src *; media-src media1.com media2.com; script-src userscripts.example.com/:path\"\n    }]\n  }, {\n    source: '/hello/:first',\n    has: [{\n      type: 'host',\n      value: '(?<a>.*)\\\\.(?<b>.*)'\n    }],\n    headers: [{\n      key: 'x-a',\n      value: ':a'\n    }, {\n      key: 'x-:b',\n      value: 'b'\n    }]\n  }, {\n    source: '/hello/:first',\n    has: [{\n      key: 'x-rewrite',\n      type: 'header'\n    }, {\n      key: 'loggedIn',\n      type: 'cookie',\n      value: '1'\n    }, {\n      type: 'host',\n      value: 'vercel.com'\n    }, {\n      type: 'host',\n      value: '(?<a>.*)\\\\.(?<b>.*)'\n    }, {\n      key: 'host',\n      type: 'header',\n      value: '(?<c>.*)\\\\.(?<d>.*)'\n    }, {\n      type: 'query',\n      key: 'username'\n    }, {\n      type: 'header',\n      key: 'x-pathname',\n      value: '(?<pathname>.*)'\n    }, {\n      type: 'header',\n      key: 'X-Pathname',\n      value: '(?<another>hello|world)'\n    }],\n    headers: [{\n      key: 'x-header',\n      value: 'something'\n    }, {\n      key: 'x-user',\n      value: ':username'\n    }, {\n      key: 'x-another',\n      value: ':another'\n    }, {\n      key: 'x-a',\n      value: ':a'\n    }, {\n      key: 'x-:b',\n      value: 'b'\n    }, {\n      key: 'x-c',\n      value: ':c'\n    }, {\n      key: 'x-:d',\n      value: 'd'\n    }]\n  }, {\n    source: '/(.*)',\n    headers: [{\n      key: 'Content-Security-Policy',\n      value: \"frame-ancestors 'self' https://test-app.vercel.app https://:shop;\"\n    }],\n    has: [{\n      type: 'query',\n      key: 'shop'\n    }]\n  }]);\n  const expected = [{\n    src: '^(.*)+(?:\\\\/(.*))\\\\.(eot|otf|ttf|ttc|woff|font\\\\.css)$',\n    headers: {\n      'Access-Control-Allow-Origin': '*'\n    },\n    continue: true\n  }, {\n    src: '^404\\\\.html$',\n    headers: {\n      'Cache-Control': 'max-age=300',\n      'Set-Cookie': 'error=404'\n    },\n    continue: true\n  }, {\n    src: '^\\\\/blog(?:\\\\/((?:[^\\\\/]+?)(?:\\\\/(?:[^\\\\/]+?))*))?$',\n    headers: {\n      'on-blog': '$1',\n      $1: 'blog'\n    },\n    continue: true\n  }, {\n    continue: true,\n    headers: {\n      'content-security-policy': \"default-src 'self'; img-src *; media-src media1.com media2.com; script-src userscripts.example.com/$1\",\n      some$1: 'hi',\n      'x-path': '$1',\n      'x-test': 'some:value*',\n      'x-test-2': 'value*',\n      'x-test-3': ':value?',\n      'x-test-4': ':value+',\n      'x-test-5': 'something https:',\n      'x-test-6': ':hello(world)',\n      'x-test-7': 'hello(world)',\n      'x-test-8': 'hello{1,}',\n      'x-test-9': ':hello{1,2}'\n    },\n    src: '^\\\\/like\\\\/params(?:\\\\/([^\\\\/]+?))$'\n  }, {\n    continue: true,\n    has: [{\n      type: 'host',\n      value: '(?<a>.*)\\\\.(?<b>.*)'\n    }],\n    headers: {\n      'x-a': '$a',\n      'x-$b': 'b'\n    },\n    src: '^\\\\/hello(?:\\\\/([^\\\\/]+?))$'\n  }, {\n    continue: true,\n    has: [{\n      key: 'x-rewrite',\n      type: 'header'\n    }, {\n      key: 'loggedIn',\n      type: 'cookie',\n      value: '1'\n    }, {\n      type: 'host',\n      value: 'vercel.com'\n    }, {\n      type: 'host',\n      value: '(?<a>.*)\\\\.(?<b>.*)'\n    }, {\n      key: 'host',\n      type: 'header',\n      value: '(?<c>.*)\\\\.(?<d>.*)'\n    }, {\n      type: 'query',\n      key: 'username'\n    }, {\n      type: 'header',\n      key: 'x-pathname',\n      value: '(?<pathname>.*)'\n    }, {\n      type: 'header',\n      key: 'x-pathname',\n      value: '(?<another>hello|world)'\n    }],\n    src: '^\\\\/hello(?:\\\\/([^\\\\/]+?))$',\n    headers: {\n      'x-header': 'something',\n      'x-user': '$username',\n      'x-another': '$another',\n      'x-a': '$a',\n      'x-$b': 'b',\n      'x-c': '$c',\n      'x-$d': 'd'\n    }\n  }, {\n    continue: true,\n    has: [{\n      key: 'shop',\n      type: 'query'\n    }],\n    headers: {\n      'Content-Security-Policy': \"frame-ancestors 'self' https://test-app.vercel.app https://$shop;\"\n    },\n    src: '^(?:\\\\/(.*))$'\n  }];\n  deepEqual(actual, expected);\n  const mustMatch = [['hello/world/file.eot', 'another/font.ttf', 'dir/arial.font.css'], ['404.html'], ['/blog/first-post', '/blog/another/one'], ['/like/params/first', '/like/params/second'], ['/hello/world'], ['/hello/world'], ['/hello']];\n  const mustNotMatch = [['hello/file.jpg', 'hello/font-css', 'dir/arial.font-css'], ['403.html', '500.html'], ['/blogg', '/random'], ['/non-match', '/like/params', '/like/params/'], ['/hellooo'], ['/hellooo'], []];\n  assertRegexMatches(actual, mustMatch, mustNotMatch);\n});","file":"superstatic.spec.js","skipped":false,"dir":"packages/routing-utils/test"},{"name":"convertTrailingSlash enabled","suites":[],"updatePoint":{"line":837,"column":34,"index":23244},"line":837,"code":"test('convertTrailingSlash enabled', () => {\n  const actual = convertTrailingSlash(true);\n  const expected = [{\n    src: '^/\\\\.well-known(?:/.*)?$'\n  }, {\n    src: '^/((?:[^/]+/)*[^/\\\\.]+)$',\n    headers: {\n      Location: '/$1/'\n    },\n    status: 308\n  }, {\n    src: '^/((?:[^/]+/)*[^/]+\\\\.\\\\w+)/$',\n    headers: {\n      Location: '/$1'\n    },\n    status: 308\n  }];\n  deepEqual(actual, expected);\n  const mustMatch = [['/.well-known', '/.well-known/', '/.well-known/asdf', '/.well-known/asdf/'], ['/dir', '/dir/foo', '/dir/foo/bar'], ['/foo.html/', '/dir/foo.html/', '/dir/foo/bar.css/', '/dir/about.map.js/']];\n  const mustNotMatch = [['/swell-known', '/swell-known/', '/swell-known/asdf', '/swell-known/asdf/'], ['/', '/index.html', '/asset/style.css', '/asset/about.map.js', '/dir/', '/dir/foo/', '/next.php?page=/'], ['/', '/foo.html', '/dir/foo.html', '/dir/foo/bar.css', '/dir/about.map.js']];\n  assertRegexMatches(actual, mustMatch, mustNotMatch);\n});","file":"superstatic.spec.js","skipped":false,"dir":"packages/routing-utils/test"},{"name":"convertTrailingSlash disabled","suites":[],"updatePoint":{"line":859,"column":35,"index":24206},"line":859,"code":"test('convertTrailingSlash disabled', () => {\n  const actual = convertTrailingSlash(false);\n  const expected = [{\n    src: '^/(.*)\\\\/$',\n    headers: {\n      Location: '/$1'\n    },\n    status: 308\n  }];\n  deepEqual(actual, expected);\n  const mustMatch = [['/dir/', '/index.html/', '/next.php?page=/']];\n  const mustNotMatch = [['/dirp', '/mkdir', '/dir/foo']];\n  assertRegexMatches(actual, mustMatch, mustNotMatch);\n});","file":"superstatic.spec.js","skipped":false,"dir":"packages/routing-utils/test"},{"name":"should fail to build ","suites":[],"updatePoint":{"line":32,"column":39,"index":1226},"line":32,"code":"    it(`should fail to build ${fixture}`, async () => {\n      try {\n        await testDeployment({\n          builderUrl,\n          buildUtilsUrl\n        }, path.join(fixturesPath, fixture));\n      } catch (err) {\n        expect(err).toBeTruthy();\n        expect(err.deployment).toBeTruthy();\n        expect(err.deployment.errorMessage).toBe(errMsg);\n      }\n    });","file":"test.js","skipped":false,"dir":"packages/ruby/test"},{"name":"should build ","suites":[],"updatePoint":{"line":48,"column":29,"index":1665},"line":48,"code":"  it(`should build ${fixture}`, async () => {\n    await expect(testDeployment({\n      builderUrl,\n      buildUtilsUrl\n    }, path.join(fixturesPath, fixture))).resolves.toBeDefined();\n  });","file":"test.js","skipped":false,"dir":"packages/ruby/test"},{"name":"should parse config from Node.js file","suites":["getConfig()"],"updatePoint":{"line":6,"column":43},"line":6,"code":"  it('should parse config from Node.js file', () => {\n    const project = new Project();\n    const sourcePath = join(__dirname, 'fixtures/node.js');\n    const config = getConfig(project, sourcePath);\n    expect(config).toMatchInlineSnapshot(`\n      Object {\n        \"memory\": 1024,\n        \"use\": \"node\",\n      }\n    `);\n  });","file":"index.test.ts","skipped":false,"dir":"packages/static-config/test"},{"name":"should parse config from Deno file","suites":["getConfig()"],"updatePoint":{"line":18,"column":40},"line":18,"code":"  it('should parse config from Deno file', () => {\n    const project = new Project();\n    const sourcePath = join(__dirname, 'fixtures/deno.ts');\n    const config = getConfig(project, sourcePath, {\n      type: 'object',\n      properties: {\n        location: { type: 'string' },\n      },\n    } as const);\n    expect(config).toMatchInlineSnapshot(`\n      Object {\n        \"location\": \"https://example.com/page\",\n        \"use\": \"deno\",\n      }\n    `);\n  });","file":"index.test.ts","skipped":false,"dir":"packages/static-config/test"},{"name":"should return `null` when no config was exported","suites":["getConfig()"],"updatePoint":{"line":35,"column":54},"line":35,"code":"  it('should return `null` when no config was exported', () => {\n    const project = new Project();\n    const sourcePath = join(__dirname, 'fixtures/no-config.js');\n    const config = getConfig(project, sourcePath);\n    expect(config).toBeNull();\n  });","file":"index.test.ts","skipped":false,"dir":"packages/static-config/test"},{"name":"should throw an error upon schema validation failure","suites":["getConfig()"],"updatePoint":{"line":42,"column":58},"line":42,"code":"  it('should throw an error upon schema validation failure', () => {\n    const project = new Project();\n    const sourcePath = join(__dirname, 'fixtures/invalid-schema.js');\n    let err;\n    try {\n      getConfig(project, sourcePath);\n    } catch (_err) {\n      err = _err;\n    }\n    expect(err.message).toEqual('Invalid data');\n  });","file":"index.test.ts","skipped":false,"dir":"packages/static-config/test"}]}