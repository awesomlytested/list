{
    "repo": "react-page/react-page",
    "url": "https://github.com/react-page/react-page",
    "branch": "master",
    "configs": [
        {
            "package": "@react-page/plugins-slate",
            "lang": "ts",
            "dir": "packages/plugins/content/slate/src/__tests__",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        }
    ],
    "tests": [
        {
            "name": "serializes a slate to raw text",
            "suites": [
                "getTextContents"
            ],
            "updatePoint": {
                "line": 12,
                "column": 36
            },
            "line": 12,
            "code": "  it('serializes a slate to raw text', async () => {\n    // we use `htmlToSlate` to generate simple values\n    const data = await htmlToSlate(\n      `<h1>Hello <em>World</em>!</h1>\n      <p>How are <strong>you</strong>?</p>\n      `\n    );\n\n    const contents = mySlate.getTextContents(data);\n    expect(contents).toEqual(['Hello World!', 'How are you?']);\n  });",
            "file": "getTextContents.test.ts",
            "skipped": false,
            "dir": "packages/plugins/content/slate/src/__tests__"
        },
        {
            "name": "handles inline blocks correctly",
            "suites": [
                "getTextContents"
            ],
            "updatePoint": {
                "line": 24,
                "column": 37
            },
            "line": 24,
            "code": "  it('handles inline blocks correctly', async () => {\n    // we use `htmlToSlate` to generate simple values\n    const data = await htmlToSlate(\n      `<h1>Hello <a href=\"http://world.com\">World</a>!</h1>\n      <p>How are <strong>you</strong>?</p>\n      `\n    );\n\n    const contents = mySlate.getTextContents(data);\n    expect(contents).toEqual(['Hello World!', 'How are you?']);\n  });",
            "file": "getTextContents.test.ts",
            "skipped": false,
            "dir": "packages/plugins/content/slate/src/__tests__"
        },
        {
            "name": "handles lists correctly",
            "suites": [
                "getTextContents"
            ],
            "updatePoint": {
                "line": 36,
                "column": 29
            },
            "line": 36,
            "code": "  it('handles lists correctly', async () => {\n    // we use `htmlToSlate` to generate simple values\n    const data = await htmlToSlate(\n      `<ul><li>one</li><li>two</li><li>three</li></ul>\n      `\n    );\n\n    const contents = mySlate.getTextContents(data);\n    expect(contents).toEqual(['one', 'two', 'three']);\n  });",
            "file": "getTextContents.test.ts",
            "skipped": false,
            "dir": "packages/plugins/content/slate/src/__tests__"
        },
        {
            "name": "parses h1 tags",
            "suites": [
                "HtmlToSlate"
            ],
            "updatePoint": {
                "line": 9,
                "column": 20
            },
            "line": 9,
            "code": "  it('parses h1 tags', async () => {\n    expect(await htmlToSlate('<h1>Projects</h1>')).toEqual({\n      slate: [\n        {\n          type: 'HEADINGS/HEADING-ONE',\n          children: [{ text: 'Projects' }],\n        },\n      ],\n    });\n  });",
            "file": "htmlToSlate.test.ts",
            "skipped": false,
            "dir": "packages/plugins/content/slate/src/__tests__"
        },
        {
            "name": "parses p tags",
            "suites": [
                "HtmlToSlate"
            ],
            "updatePoint": {
                "line": 19,
                "column": 19
            },
            "line": 19,
            "code": "  it('parses p tags', async () => {\n    expect(await htmlToSlate('<p>some projects</p>')).toEqual({\n      slate: [\n        {\n          type: 'PARAGRAPH/PARAGRAPH',\n          children: [{ text: 'some projects' }],\n        },\n      ],\n    });\n  });",
            "file": "htmlToSlate.test.ts",
            "skipped": false,
            "dir": "packages/plugins/content/slate/src/__tests__"
        },
        {
            "name": "parses a list of tags to an array",
            "suites": [
                "HtmlToSlate"
            ],
            "updatePoint": {
                "line": 29,
                "column": 39
            },
            "line": 29,
            "code": "  it('parses a list of tags to an array', async () => {\n    expect(\n      await htmlToSlate(`\n      <h1>Hello World</h1>\n    <p>Lorem ipsum</p>`)\n    ).toEqual({\n      slate: [\n        {\n          type: 'HEADINGS/HEADING-ONE',\n          children: [{ text: 'Hello World' }],\n        },\n        {\n          type: 'PARAGRAPH/PARAGRAPH',\n          children: [{ text: 'Lorem ipsum' }],\n        },\n      ],\n    });\n  });",
            "file": "htmlToSlate.test.ts",
            "skipped": false,
            "dir": "packages/plugins/content/slate/src/__tests__"
        },
        {
            "name": "parses nested tags with headin",
            "suites": [
                "HtmlToSlate"
            ],
            "updatePoint": {
                "line": 47,
                "column": 36
            },
            "line": 47,
            "code": "  it('parses nested tags with headin', async () => {\n    expect(\n      await htmlToSlate('<p>some <em>projects</em>-<strong>foo</strong></p>')\n    ).toEqual({\n      slate: [\n        {\n          children: [\n            {\n              text: 'some ',\n            },\n            {\n              'EMPHASIZE/EM': true,\n              text: 'projects',\n            },\n            { text: '-' },\n            {\n              'EMPHASIZE/STRONG': true,\n              text: 'foo',\n            },\n          ],\n          type: 'PARAGRAPH/PARAGRAPH',\n        },\n      ],\n    });\n  });",
            "file": "htmlToSlate.test.ts",
            "skipped": false,
            "dir": "packages/plugins/content/slate/src/__tests__"
        },
        {
            "name": "parses code blocks",
            "suites": [
                "HtmlToSlate"
            ],
            "updatePoint": {
                "line": 72,
                "column": 24
            },
            "line": 72,
            "code": "  it('parses code blocks', async () => {\n    expect(\n      await htmlToSlate(\n        '<p>a<code style=\"white-space:pre-wrap\">bc</code>de</p>'\n      )\n    ).toEqual({\n      slate: [\n        {\n          type: 'PARAGRAPH/PARAGRAPH',\n          children: [\n            {\n              text: 'a',\n            },\n            {\n              text: 'bc',\n\n              'CODE/CODE': true,\n            },\n            {\n              text: 'de',\n            },\n          ],\n        },\n      ],\n    });\n  });",
            "file": "htmlToSlate.test.ts",
            "skipped": false,
            "dir": "packages/plugins/content/slate/src/__tests__"
        },
        {
            "name": "can parse links",
            "suites": [
                "HtmlToSlate"
            ],
            "updatePoint": {
                "line": 98,
                "column": 21
            },
            "line": 98,
            "code": "  it('can parse links', async () => {\n    expect(await htmlToSlate('<h4>a<a href=\"foo\">asdf</a>b</h4>')).toEqual({\n      slate: [\n        {\n          children: [\n            { text: 'a' },\n            {\n              data: { href: 'foo', openInNewWindow: false },\n              children: [{ text: 'asdf' }],\n              type: 'LINK/LINK',\n            },\n            { text: 'b' },\n          ],\n          type: 'HEADINGS/HEADING-FOUR',\n        },\n      ],\n    });\n  });",
            "file": "htmlToSlate.test.ts",
            "skipped": false,
            "dir": "packages/plugins/content/slate/src/__tests__"
        },
        {
            "name": "parses text align on headings",
            "suites": [
                "HtmlToSlate"
            ],
            "updatePoint": {
                "line": 116,
                "column": 35
            },
            "line": 116,
            "code": "  it('parses text align on headings', async () => {\n    expect(\n      await htmlToSlate('<h3 style=\"text-align:center\">asdfgh</h3>')\n    ).toEqual({\n      slate: [\n        {\n          type: 'HEADINGS/HEADING-THREE',\n          children: [\n            {\n              text: 'asdfgh',\n            },\n          ],\n\n          data: {\n            align: 'center',\n          },\n        },\n      ],\n    });\n  });",
            "file": "htmlToSlate.test.ts",
            "skipped": false,
            "dir": "packages/plugins/content/slate/src/__tests__"
        },
        {
            "name": "parses text align on paragraphs",
            "suites": [
                "HtmlToSlate"
            ],
            "updatePoint": {
                "line": 136,
                "column": 37
            },
            "line": 136,
            "code": "  it('parses text align on paragraphs', async () => {\n    expect(await htmlToSlate('<p style=\"text-align:center\">ab</p>')).toEqual({\n      slate: [\n        {\n          type: 'PARAGRAPH/PARAGRAPH',\n          children: [{ text: 'ab' }],\n          data: {\n            align: 'center',\n          },\n        },\n      ],\n    });\n  });",
            "file": "htmlToSlate.test.ts",
            "skipped": false,
            "dir": "packages/plugins/content/slate/src/__tests__"
        },
        {
            "name": "parses blockquote",
            "suites": [
                "HtmlToSlate"
            ],
            "updatePoint": {
                "line": 149,
                "column": 23
            },
            "line": 149,
            "code": "  it('parses blockquote', async () => {\n    expect(\n      await htmlToSlate(\n        '<blockquote style=\"text-align:center\">asdfgh</blockquote>'\n      )\n    ).toEqual({\n      slate: [\n        {\n          type: 'BLOCKQUOTE/BLOCKQUOTE',\n          children: [\n            {\n              text: 'asdfgh',\n            },\n          ],\n\n          data: {\n            align: 'center',\n          },\n        },\n      ],\n    });\n  });",
            "file": "htmlToSlate.test.ts",
            "skipped": false,
            "dir": "packages/plugins/content/slate/src/__tests__"
        }
    ],
    "badge": "react-page__react-page.svg"
}