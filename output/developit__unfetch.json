{"repo":"developit/unfetch","url":"https://github.com/developit/unfetch","branch":"master","configs":[{"package":"unfetch","lang":"js","dir":"test","framework":"jest","pattern":"**/*.{js,ts}"}],"tests":[{"name":"should resolve to fetch when window.fetch exists","suites":["isomorphic-unfetch","\"browser\" entry"],"updatePoint":{"line":5,"column":56,"index":176},"line":5,"code":"    it(\"should resolve to fetch when window.fetch exists\", () => {\n      function fetch() {\n        return this;\n      }\n      function unfetch() {}\n      let sandbox = {\n        process: undefined,\n        window: {\n          fetch\n        },\n        fetch,\n        exports: {},\n        require: () => unfetch\n      };\n      sandbox.global = sandbox.self = sandbox.window;\n      sandbox.module = {\n        exports: sandbox.exports\n      };\n      let filename = require.resolve(\"../packages/isomorphic-unfetch/browser.js\");\n      vm.runInNewContext(fs.readFileSync(filename, \"utf8\"), sandbox, filename);\n      expect(sandbox.module.exports).toBe(fetch);\n    });","file":"isomorphic.test.js","skipped":false,"dir":"test"},{"name":"should resolve to unfetch when window.fetch does not exist","suites":["isomorphic-unfetch","\"browser\" entry"],"updatePoint":{"line":27,"column":66,"index":848},"line":27,"code":"    it(\"should resolve to unfetch when window.fetch does not exist\", () => {\n      function unfetch() {}\n      let sandbox = {\n        process: undefined,\n        window: {},\n        exports: {},\n        require: () => unfetch\n      };\n      sandbox.global = sandbox.self = sandbox.window;\n      sandbox.module = {\n        exports: sandbox.exports\n      };\n      let filename = require.resolve(\"../packages/isomorphic-unfetch/browser.js\");\n      vm.runInNewContext(fs.readFileSync(filename, \"utf8\"), sandbox, filename);\n      expect(sandbox.module.exports).toBe(unfetch);\n    });","file":"isomorphic.test.js","skipped":false,"dir":"test"},{"name":"should resolve to fetch when window.fetch exists","suites":["isomorphic-unfetch","\"main\" entry"],"updatePoint":{"line":45,"column":56,"index":1459},"line":45,"code":"    it(\"should resolve to fetch when window.fetch exists\", () => {\n      function fetch() {\n        return this;\n      }\n      function unfetch() {}\n      let sandbox = {\n        process: undefined,\n        window: {\n          fetch\n        },\n        fetch,\n        exports: {},\n        require: () => unfetch\n      };\n      sandbox.global = sandbox.self = sandbox.window;\n      sandbox.module = {\n        exports: sandbox.exports\n      };\n      let filename = require.resolve(\"../packages/isomorphic-unfetch\");\n      vm.runInNewContext(fs.readFileSync(filename, \"utf8\"), sandbox, filename);\n      expect(sandbox.module.exports).toBe(fetch);\n    });","file":"isomorphic.test.js","skipped":false,"dir":"test"},{"name":"should resolve to unfetch when window.fetch does not exist","suites":["isomorphic-unfetch","\"main\" entry"],"updatePoint":{"line":67,"column":66,"index":2120},"line":67,"code":"    it(\"should resolve to unfetch when window.fetch does not exist\", () => {\n      function unfetch() {}\n      let sandbox = {\n        process: undefined,\n        window: {},\n        exports: {},\n        require: () => unfetch\n      };\n      sandbox.global = sandbox.self = sandbox.window;\n      sandbox.module = {\n        exports: sandbox.exports\n      };\n      let filename = require.resolve(\"../packages/isomorphic-unfetch\");\n      vm.runInNewContext(fs.readFileSync(filename, \"utf8\"), sandbox, filename);\n      expect(sandbox.module.exports).toBe(unfetch);\n    });","file":"isomorphic.test.js","skipped":false,"dir":"test"},{"name":"should resolve to fetch when window.fetch exists","suites":["isomorphic-unfetch","\"main\" entry in NodeJS"],"updatePoint":{"line":85,"column":56,"index":2730},"line":85,"code":"    it(\"should resolve to fetch when window.fetch exists\", () => {\n      function fetch() {\n        return this;\n      }\n      function unfetch() {}\n      let sandbox = {\n        process: {},\n        global: {\n          fetch\n        },\n        exports: {},\n        require: () => unfetch\n      };\n      sandbox.module = {\n        exports: sandbox.exports\n      };\n      let filename = require.resolve(\"../packages/isomorphic-unfetch\");\n      vm.runInNewContext(fs.readFileSync(filename, \"utf8\"), sandbox, filename);\n      expect(sandbox.module.exports).toBe(fetch);\n    });","file":"isomorphic.test.js","skipped":false,"dir":"test"},{"name":"should resolve to unfetch when window.fetch does not exist","suites":["isomorphic-unfetch","\"main\" entry in NodeJS"],"updatePoint":{"line":105,"column":66,"index":3315},"line":105,"code":"    it(\"should resolve to unfetch when window.fetch does not exist\", async () => {\n      let modules = {\n        unfetch() {},\n        \"node-fetch\": {\n          default: function nodeFetch(url) {\n            return \"hello from node-fetch\";\n          }\n        }\n      };\n      let sandbox = {\n        process: {},\n        global: {\n          fetch: null\n        },\n        exports: {},\n        require: module => modules[module]\n      };\n      sandbox.global.process = sandbox.process;\n      sandbox.module = {\n        exports: sandbox.exports\n      };\n      let filename = require.resolve(\"../packages/isomorphic-unfetch\").replace(/\\.js$/, \".mjs\");\n      const context = vm.createContext(sandbox);\n      const mod = new vm.SourceTextModule(fs.readFileSync(filename, \"utf8\"), {\n        context,\n        async importModuleDynamically(specifier, script, assertions) {\n          const exp = modules[specifier];\n          const module = new vm.SyntheticModule(Object.keys(exp), () => {\n            for (let key in exp) module.setExport(key, exp[key]);\n          });\n          await module.link(() => {});\n          await module.evaluate();\n          return module;\n        }\n      });\n      await mod.link(() => {});\n      await mod.evaluate();\n      const ns = mod.namespace;\n      expect(await ns.default(\"/\")).toBe(await modules[\"node-fetch\"].default(\"/\"));\n    });","file":"isomorphic.test.js","skipped":false,"dir":"test"},{"name":"should resolve to fetch when window.fetch exists","suites":["unfetch/polyfill"],"updatePoint":{"line":4,"column":54,"index":134},"line":4,"code":"  it(\"should resolve to fetch when window.fetch exists\", () => {\n    function fetch() {}\n    let window = {\n      fetch,\n      require\n    };\n    window.window = window.global = window.self = window;\n    let filename = require.resolve(\"../polyfill/index.js\");\n    vm.runInNewContext(fs.readFileSync(filename, \"utf8\"), window, \"polyfill-test.js\");\n    expect(window.fetch).toBe(fetch);\n  });","file":"polyfill.test.js","skipped":false,"dir":"test"},{"name":"should resolve to unfetch when window.fetch does not exist","suites":["unfetch/polyfill"],"updatePoint":{"line":15,"column":64,"index":535},"line":15,"code":"  it(\"should resolve to unfetch when window.fetch does not exist\", () => {\n    let window = {\n      require\n    };\n    window.window = window.global = window.self = window;\n    let filename = require.resolve(\"../polyfill/index.js\");\n    vm.runInNewContext(fs.readFileSync(filename, \"utf8\"), window, \"polyfill-test.js\");\n    expect(window.fetch).toEqual(expect.any(Function));\n    expect(window.fetch).toHaveLength(2);\n  });","file":"polyfill.test.js","skipped":false,"dir":"test"},{"name":"should have valid TypeScript types","suites":["TypeScript","browser"],"updatePoint":{"line":30,"column":42,"index":952},"line":30,"code":"    it(\"should have valid TypeScript types\", async () => {\n      const res = await unfetch(\"data:,test\");\n      const text = await res.text();\n      expect(text).toBe(\"test\");\n    });","file":"typescript.test.ts","skipped":false,"dir":"test"},{"name":"should allow use of standard types like Response","suites":["TypeScript","isomorphic-unfetch"],"updatePoint":{"line":44,"column":56,"index":1427},"line":44,"code":"    it(\"should allow use of standard types like Response\", async () => {\n      const res = await isomorphicUnfetch(new URL(\"data:,test\"));\n      const blob = await res.blob();\n    });","file":"typescript.test.ts","skipped":false,"dir":"test"},{"name":"should accept Headers","suites":["TypeScript","isomorphic-unfetch"],"updatePoint":{"line":48,"column":29,"index":1584},"line":48,"code":"    it(\"should accept Headers\", async () => {\n      isomorphicUnfetch(\"data:,test\", {\n        headers: new Headers({\n          a: \"b\"\n        }),\n        mode: \"cors\"\n      });\n    });","file":"typescript.test.ts","skipped":false,"dir":"test"}]}