{"repo":"DIYgod/RSSHub","url":"https://github.com/DIYgod/RSSHub","branch":"master","configs":[{"package":"rsshub","lang":"js","dir":"test","framework":"jest","pattern":"**/*.{js,ts}"}],"tests":[{"name":"bilibilib cookie","suites":["config"],"updatePoint":{"line":5,"column":22,"index":95},"line":5,"code":"  it('bilibilib cookie', () => {\n    process.env.BILIBILI_COOKIE_12 = 'cookie1';\n    process.env.BILIBILI_COOKIE_34 = 'cookie2';\n\n    const config = require('../lib/config').value;\n\n    expect(config.bilibili.cookies).toMatchObject({\n      12: 'cookie1',\n      34: 'cookie2'\n    });\n    delete process.env.BILIBILI_COOKIE_12;\n    delete process.env.BILIBILI_COOKIE_34;\n  });","file":"config.js","skipped":false,"dir":"test"},{"name":"twitter token","suites":["config"],"updatePoint":{"line":18,"column":19,"index":467},"line":18,"code":"  it('twitter token', () => {\n    process.env.TWITTER_TOKEN_12 = 'token1';\n    process.env.TWITTER_TOKEN_34 = 'token2';\n\n    const config = require('../lib/config').value;\n\n    expect(config.twitter.tokens).toMatchObject({\n      12: 'token1',\n      34: 'token2'\n    });\n    delete process.env.TWITTER_TOKEN_12;\n    delete process.env.TWITTER_TOKEN_34;\n  });","file":"config.js","skipped":false,"dir":"test"},{"name":"email config","suites":["config"],"updatePoint":{"line":31,"column":18,"index":824},"line":31,"code":"  it('email config', () => {\n    process.env['EMAIL_CONFIG_xx.qq.com'] = 'token1';\n    process.env['EMAIL_CONFIG_oo.qq.com'] = 'token2';\n\n    const config = require('../lib/config').value;\n\n    expect(config.email.config).toMatchObject({\n      'xx.qq.com': 'token1',\n      'oo.qq.com': 'token2'\n    });\n    delete process.env['EMAIL_CONFIG_xx.qq.com'];\n    delete process.env['EMAIL_CONFIG_oo.qq.com'];\n  });","file":"config.js","skipped":false,"dir":"test"},{"name":"blacklist","suites":["access-control"],"updatePoint":{"line":21,"column":15,"index":471},"line":21,"code":"  it(`blacklist`, async () => {\n    const key = '1L0veRSSHub';\n    const code = md5('/test/2' + key);\n    process.env.BLACKLIST = 'est/1,233.233.233.,black';\n    process.env.ACCESS_KEY = key;\n    server = require('../../lib/index');\n    const request = supertest(server);\n    const response11 = await request.get('/test/1');\n    checkBlock(response11);\n    const response12 = await request.get('/test/1').set('X-Forwarded-For', '233.233.233.233');\n    checkBlock(response12);\n    const response13 = await request.get('/test/1').set('user-agent', 'blackua');\n    checkBlock(response13);\n    const response21 = await request.get('/test/2');\n    expect(response21.status).toBe(200);\n    const response22 = await request.get('/test/2').set('X-Forwarded-For', '233.233.233.233');\n    checkBlock(response22);\n    const response23 = await request.get('/test/2').set('user-agent', 'blackua');\n    checkBlock(response23); // wrong key/code, not on blacklist\n\n    const response311 = await request.get(`/test/2?key=wrong+${key}`);\n    expect(response311.status).toBe(200);\n    const response312 = await request.get(`/test/2?code=wrong+${code}`);\n    expect(response312.status).toBe(200); // wrong key/code, on blacklist\n\n    const response321 = await request.get(`/test/2?key=wrong+${key}`).set('X-Forwarded-For', '233.233.233.233');\n    checkBlock(response321);\n    const response322 = await request.get(`/test/2?code=wrong+${code}`).set('X-Forwarded-For', '233.233.233.233');\n    checkBlock(response322); // right key/code, on blacklist\n\n    const response331 = await request.get(`/test/2?key=${key}`).set('X-Forwarded-For', '233.233.233.233');\n    expect(response331.status).toBe(200);\n    const response332 = await request.get(`/test/2?code=${code}`).set('X-Forwarded-For', '233.233.233.233');\n    expect(response332.status).toBe(200);\n  });","file":"middleware/access-control.js","skipped":false,"dir":"test"},{"name":"whitelist","suites":["access-control"],"updatePoint":{"line":56,"column":15,"index":2307},"line":56,"code":"  it(`whitelist`, async () => {\n    const key = '1L0veRSSHub';\n    const code = md5('/test/2' + key);\n    process.env.WHITELIST = 'est/1,233.233.233.,white';\n    process.env.ACCESS_KEY = key;\n    server = require('../../lib/index');\n    const request = supertest(server);\n    const response01 = await request.get('/');\n    expect(response01.status).toBe(200);\n    const response02 = await request.get('/robots.txt');\n    expect(response02.status).toBe(200);\n    const response11 = await request.get('/test/1');\n    expect(response11.status).toBe(200);\n    const response12 = await request.get('/test/1').set('X-Forwarded-For', '233.233.233.233');\n    expect(response12.status).toBe(200);\n    const response13 = await request.get('/test/1').set('user-agent', 'whiteua');\n    expect(response13.status).toBe(200);\n    const response21 = await request.get('/test/2');\n    checkBlock(response21);\n    const response22 = await request.get('/test/2').set('X-Forwarded-For', '233.233.233.233');\n    expect(response22.status).toBe(200);\n    const response23 = await request.get('/test/2').set('user-agent', 'whiteua');\n    expect(response23.status).toBe(200); // wrong key/code, not on whitelist\n\n    const response311 = await request.get(`/test/2?code=wrong+${code}`);\n    checkBlock(response311);\n    const response312 = await request.get(`/test/2?key=wrong+${key}`);\n    checkBlock(response312); // wrong key/code, on whitelist\n\n    const response321 = await request.get(`/test/2?code=wrong+${code}`).set('X-Forwarded-For', '233.233.233.233');\n    expect(response321.status).toBe(200);\n    const response322 = await request.get(`/test/2?key=wrong+${key}`).set('X-Forwarded-For', '233.233.233.233');\n    expect(response322.status).toBe(200); // right key/code\n\n    const response331 = await request.get(`/test/2?code=${code}`);\n    expect(response331.status).toBe(200);\n    const response332 = await request.get(`/test/2?key=${key}`);\n    expect(response332.status).toBe(200);\n  });","file":"middleware/access-control.js","skipped":false,"dir":"test"},{"name":"no list","suites":["access-control"],"updatePoint":{"line":95,"column":13,"index":4281},"line":95,"code":"  it(`no list`, async () => {\n    const key = '1L0veRSSHub';\n    const code = md5('/test/2' + key);\n    process.env.ACCESS_KEY = key;\n    server = require('../../lib/index');\n    const request = supertest(server);\n    const response01 = await request.get('/');\n    expect(response01.status).toBe(200);\n    const response02 = await request.get('/robots.txt');\n    expect(response02.status).toBe(200);\n    const response11 = await request.get('/test/1');\n    checkBlock(response11);\n    const response21 = await request.get('/test/2');\n    checkBlock(response21); // wrong key/code\n\n    const response321 = await request.get(`/test/2?key=wrong+${key}`);\n    checkBlock(response321);\n    const response322 = await request.get(`/test/2?code=wrong+${code}`);\n    checkBlock(response322); // right key/code\n\n    const response331 = await request.get(`/test/2?key=${key}`);\n    expect(response331.status).toBe(200);\n    const response332 = await request.get(`/test/2?code=${code}`);\n    expect(response332.status).toBe(200);\n  });","file":"middleware/access-control.js","skipped":false,"dir":"test"},{"name":"template","suites":["anti-hotlink"],"updatePoint":{"line":18,"column":14,"index":369},"line":18,"code":"  it('template', async () => {\n    process.env.HOTLINK_TEMPLATE = 'https://i3.wp.com/${host}${pathname}';\n    server = require('../../lib/index');\n    const request = supertest(server);\n    const response = await request.get('/test/complicated');\n    const parsed = await parser.parseString(response.text);\n    expect(parsed.items[0].content).toBe(`<a href=\"https://mock.com/DIYgod/RSSHub\"/>\n<img src=\"https://i3.wp.com/mock.com/DIYgod/RSSHub.jpg\" referrerpolicy=\"no-referrer\">\n\n<a href=\"http://mock.com/DIYgod/RSSHub\"/>\n<img src=\"https://i3.wp.com/mock.com/DIYgod/RSSHub.jpg\" data-src=\"/DIYgod/RSSHub0.jpg\" referrerpolicy=\"no-referrer\">\n<img data-src=\"/DIYgod/RSSHub.jpg\" src=\"https://i3.wp.com/mock.com/DIYgod/RSSHub.jpg\" referrerpolicy=\"no-referrer\">\n<img data-mock=\"/DIYgod/RSSHub.png\" src=\"https://i3.wp.com/mock.com/DIYgod/RSSHub.png\" referrerpolicy=\"no-referrer\">\n<img mock=\"/DIYgod/RSSHub.gif\" src=\"https://i3.wp.com/mock.com/DIYgod/RSSHub.gif\" referrerpolicy=\"no-referrer\">\n<img src=\"https://i3.wp.com/mock.com/DIYgod/DIYgod/RSSHub\" referrerpolicy=\"no-referrer\">\n<img src=\"https://i3.wp.com/mock.com/DIYgod/RSSHub.jpg\" referrerpolicy=\"no-referrer\"/></img></img></img></img></img></img>`);\n    expect(parsed.items[1].content).toBe(`<a href=\"https://mock.com/DIYgod/RSSHub\"/>\n<img src=\"https://i3.wp.com/mock.com/DIYgod/RSSHub.jpg\" referrerpolicy=\"no-referrer\"/>`);\n  });","file":"middleware/anti-hotlink.js","skipped":false,"dir":"test"},{"name":"url","suites":["anti-hotlink"],"updatePoint":{"line":37,"column":9,"index":1743},"line":37,"code":"  it('url', async () => {\n    process.env.HOTLINK_TEMPLATE = '${protocol}//${host}${pathname}';\n    server = require('../../lib/index');\n    const request = supertest(server);\n    const response = await request.get('/test/complicated');\n    const parsed = await parser.parseString(response.text);\n    expect(parsed.items[0].content).toBe(`<a href=\"https://mock.com/DIYgod/RSSHub\"/>\n<img src=\"https://mock.com/DIYgod/RSSHub.jpg\" referrerpolicy=\"no-referrer\">\n\n<a href=\"http://mock.com/DIYgod/RSSHub\"/>\n<img src=\"https://mock.com/DIYgod/RSSHub.jpg\" data-src=\"/DIYgod/RSSHub0.jpg\" referrerpolicy=\"no-referrer\">\n<img data-src=\"/DIYgod/RSSHub.jpg\" src=\"https://mock.com/DIYgod/RSSHub.jpg\" referrerpolicy=\"no-referrer\">\n<img data-mock=\"/DIYgod/RSSHub.png\" src=\"https://mock.com/DIYgod/RSSHub.png\" referrerpolicy=\"no-referrer\">\n<img mock=\"/DIYgod/RSSHub.gif\" src=\"https://mock.com/DIYgod/RSSHub.gif\" referrerpolicy=\"no-referrer\">\n<img src=\"http://mock.com/DIYgod/DIYgod/RSSHub\" referrerpolicy=\"no-referrer\">\n<img src=\"https://mock.com/DIYgod/RSSHub.jpg\" referrerpolicy=\"no-referrer\"/></img></img></img></img></img></img>`);\n    expect(parsed.items[1].content).toBe(`<a href=\"https://mock.com/DIYgod/RSSHub\"/>\n<img src=\"https://mock.com/DIYgod/RSSHub.jpg\" referrerpolicy=\"no-referrer\"/>`);\n  });","file":"middleware/anti-hotlink.js","skipped":false,"dir":"test"},{"name":"no-template","suites":["anti-hotlink"],"updatePoint":{"line":56,"column":17,"index":3039},"line":56,"code":"  it('no-template', async () => {\n    process.env.HOTLINK_TEMPLATE = '';\n    server = require('../../lib/index');\n    const request = supertest(server);\n    const response = await request.get('/test/complicated');\n    const parsed = await parser.parseString(response.text);\n    expect(parsed.items[0].content).toBe(`<a href=\"https://mock.com/DIYgod/RSSHub\"></a>\n<img src=\"https://mock.com/DIYgod/RSSHub.jpg\" referrerpolicy=\"no-referrer\">\n\n<a href=\"http://mock.com/DIYgod/RSSHub\"></a>\n<img src=\"https://mock.com/DIYgod/RSSHub.jpg\" data-src=\"/DIYgod/RSSHub0.jpg\" referrerpolicy=\"no-referrer\">\n<img data-src=\"/DIYgod/RSSHub.jpg\" src=\"https://mock.com/DIYgod/RSSHub.jpg\" referrerpolicy=\"no-referrer\">\n<img data-mock=\"/DIYgod/RSSHub.png\" src=\"https://mock.com/DIYgod/RSSHub.png\" referrerpolicy=\"no-referrer\">\n<img mock=\"/DIYgod/RSSHub.gif\" src=\"https://mock.com/DIYgod/RSSHub.gif\" referrerpolicy=\"no-referrer\">\n<img src=\"http://mock.com/DIYgod/DIYgod/RSSHub\" referrerpolicy=\"no-referrer\">\n<img src=\"https://mock.com/DIYgod/RSSHub.jpg\" referrerpolicy=\"no-referrer\">`);\n    expect(parsed.items[1].content).toBe(`<a href=\"https://mock.com/DIYgod/RSSHub\"></a>\n<img src=\"https://mock.com/DIYgod/RSSHub.jpg\" referrerpolicy=\"no-referrer\">`);\n  });","file":"middleware/anti-hotlink.js","skipped":false,"dir":"test"},{"name":"memory","suites":["cache"],"updatePoint":{"line":24,"column":12,"index":491},"line":24,"code":"  it('memory', async () => {\n    process.env.CACHE_TYPE = 'memory';\n    server = require('../../lib/index');\n    const request = supertest(server);\n    const response1 = await request.get('/test/cache');\n    const response2 = await request.get('/test/cache');\n    const parsed1 = await parser.parseString(response1.text);\n    const parsed2 = await parser.parseString(response2.text);\n    delete parsed1.lastBuildDate;\n    delete parsed2.lastBuildDate;\n    expect(parsed2).toMatchObject(parsed1);\n    expect(response2.status).toBe(200);\n    expect(response2.headers['x-koa-memory-cache']).toBe('true');\n    expect(response2.headers).not.toHaveProperty('x-koa-redis-cache');\n    await wait(1 * 1000 + 100);\n    const response3 = await request.get('/test/cache');\n    expect(response3.headers).not.toHaveProperty('x-koa-redis-cache');\n    expect(response3.headers).not.toHaveProperty('x-koa-memory-cache');\n    const parsed3 = await parser.parseString(response3.text);\n    await wait(3 * 1000 + 100);\n    const response4 = await request.get('/test/cache');\n    const parsed4 = await parser.parseString(response4.text);\n    expect(parsed1.items[0].content).toBe('Cache1');\n    expect(parsed2.items[0].content).toBe('Cache1');\n    expect(parsed3.items[0].content).toBe('Cache1');\n    expect(parsed4.items[0].content).toBe('Cache2');\n\n    const app = require('../../lib/app');\n\n    await app.context.cache.set('mock', undefined);\n    expect(await app.context.cache.get('mock')).toBe('');\n    await app.context.cache.globalCache.set('mock', undefined);\n    expect(await app.context.cache.globalCache.get('mock')).toBe('');\n    await app.context.cache.globalCache.set('mock', {\n      mock: 1\n    });\n    expect(await app.context.cache.globalCache.get('mock')).toBe('{\"mock\":1}');\n    await request.get('/test/refreshCache');\n    await wait(1 * 1000 + 100);\n    const response5 = await request.get('/test/refreshCache');\n    const parsed5 = await parser.parseString(response5.text);\n    await wait(2 * 1000 + 100);\n    const response6 = await request.get('/test/refreshCache');\n    const parsed6 = await parser.parseString(response6.text);\n    expect(parsed5.items[0].content).toBe('1 1');\n    expect(parsed6.items[0].content).toBe('1 0');\n  }, 10000);","file":"middleware/cache.js","skipped":false,"dir":"test"},{"name":"redis","suites":["cache"],"updatePoint":{"line":71,"column":11,"index":2734},"line":71,"code":"  it('redis', async () => {\n    process.env.CACHE_TYPE = 'redis';\n    server = require('../../lib/index');\n    const request = supertest(server);\n    const response1 = await request.get('/test/cache');\n    const response2 = await request.get('/test/cache');\n    const parsed1 = await parser.parseString(response1.text);\n    const parsed2 = await parser.parseString(response2.text);\n    delete parsed1.lastBuildDate;\n    delete parsed2.lastBuildDate;\n    expect(parsed2).toMatchObject(parsed1);\n    expect(response2.status).toBe(200);\n    expect(response2.headers['x-koa-redis-cache']).toBe('true');\n    expect(response2.headers).not.toHaveProperty('x-koa-memory-cache');\n    await wait(1 * 1000 + 100);\n    const response3 = await request.get('/test/cache');\n    expect(response3.headers).not.toHaveProperty('x-koa-redis-cache');\n    expect(response3.headers).not.toHaveProperty('x-koa-memory-cache');\n    const parsed3 = await parser.parseString(response3.text);\n    await wait(3 * 1000 + 100);\n    const response4 = await request.get('/test/cache');\n    const parsed4 = await parser.parseString(response4.text);\n    expect(parsed1.items[0].content).toBe('Cache1');\n    expect(parsed2.items[0].content).toBe('Cache1');\n    expect(parsed3.items[0].content).toBe('Cache1');\n    expect(parsed4.items[0].content).toBe('Cache2');\n\n    const app = require('../../lib/app');\n\n    await app.context.cache.set('mock1', undefined);\n    expect(await app.context.cache.get('mock1')).toBe('');\n    await app.context.cache.set('mock2', '2');\n    await app.context.cache.set('mock2', '2');\n    expect(await app.context.cache.get('mock2')).toBe('2');\n    await request.get('/test/refreshCache');\n    await wait(1 * 1000 + 100);\n    const response5 = await request.get('/test/refreshCache');\n    const parsed5 = await parser.parseString(response5.text);\n    await wait(2 * 1000 + 100);\n    const response6 = await request.get('/test/refreshCache');\n    const parsed6 = await parser.parseString(response6.text);\n    expect(parsed5.items[0].content).toBe('1 1');\n    expect(parsed6.items[0].content).toBe('1 0');\n  }, 10000);","file":"middleware/cache.js","skipped":false,"dir":"test"},{"name":"redis with quit","suites":["cache"],"updatePoint":{"line":115,"column":21,"index":4852},"line":115,"code":"  it('redis with quit', async () => {\n    process.env.CACHE_TYPE = 'redis';\n    server = require('../../lib/index');\n\n    const {\n      redisClient\n    } = require('../../lib/app').context.cache.clients;\n\n    await redisClient.quit();\n    const request = supertest(server);\n    const response1 = await request.get('/test/cache');\n    const response2 = await request.get('/test/cache');\n    const parsed1 = await parser.parseString(response1.text);\n    const parsed2 = await parser.parseString(response2.text);\n    expect(response2.status).toBe(200);\n    expect(response2.headers).not.toHaveProperty('x-koa-redis-cache');\n    expect(response2.headers).not.toHaveProperty('x-koa-memory-cache');\n    expect(parsed1.items[0].content).toBe('Cache1');\n    expect(parsed2.items[0].content).toBe('Cache2');\n  });","file":"middleware/cache.js","skipped":false,"dir":"test"},{"name":"redis with error","suites":["cache"],"updatePoint":{"line":135,"column":22,"index":5658},"line":135,"code":"  it('redis with error', async () => {\n    process.env.CACHE_TYPE = 'redis';\n    process.env.REDIS_URL = 'redis://wrongpath:6379';\n    server = require('../../lib/index');\n    const request = supertest(server);\n    const response1 = await request.get('/test/cache');\n    const response2 = await request.get('/test/cache');\n    const parsed1 = await parser.parseString(response1.text);\n    const parsed2 = await parser.parseString(response2.text);\n    expect(response2.status).toBe(200);\n    expect(response2.headers).not.toHaveProperty('x-koa-redis-cache');\n    expect(response2.headers).not.toHaveProperty('x-koa-memory-cache');\n    expect(parsed1.items[0].content).toBe('Cache1');\n    expect(parsed2.items[0].content).toBe('Cache2');\n  });","file":"middleware/cache.js","skipped":false,"dir":"test"},{"name":"no cache","suites":["cache"],"updatePoint":{"line":150,"column":14,"index":6392},"line":150,"code":"  it('no cache', async () => {\n    process.env.CACHE_TYPE = '';\n    server = require('../../lib/index');\n    const request = supertest(server);\n    const response1 = await request.get('/test/cache');\n    const response2 = await request.get('/test/cache');\n    const parsed1 = await parser.parseString(response1.text);\n    const parsed2 = await parser.parseString(response2.text);\n    expect(response2.status).toBe(200);\n    expect(response2.headers).not.toHaveProperty('x-koa-redis-cache');\n    expect(response2.headers).not.toHaveProperty('x-koa-memory-cache');\n    expect(parsed1.items[0].content).toBe('Cache1');\n    expect(parsed2.items[0].content).toBe('Cache2');\n  });","file":"middleware/cache.js","skipped":false,"dir":"test"},{"name":"debug","suites":["debug"],"updatePoint":{"line":25,"column":11,"index":491},"line":25,"code":"  it('debug', async () => {\n    const response1 = await request.get('/test/1').set('X-Forwarded-For', '233.233.233.233');\n    const etag = response1.headers.etag;\n    await request.get('/test/1').set('If-None-Match', etag).set('X-Forwarded-For', '233.233.233.233');\n    await request.get('/test/1').set('X-Forwarded-For', '233.233.233.234');\n    await request.get('/test/2').set('X-Forwarded-For', '233.233.233.233');\n    await request.get('/test/2').set('X-Forwarded-For', '233.233.233.234');\n    await request.get('/test/empty').set('X-Forwarded-For', '233.233.233.233');\n    await request.get('/test/empty').set('X-Forwarded-For', '233.233.233.234');\n    const response = await request.get('/').set('X-Forwarded-For', '233.233.233.233');\n    const $ = cheerio.load(response.text);\n    $('.debug-item').each((index, item) => {\n      const key = $(item).find('.debug-key').html().trim();\n      const value = $(item).find('.debug-value').html().trim();\n\n      switch (key) {\n        case 'Node Name:':\n          expect(value).toBe('mock');\n          break;\n\n        case 'Git Hash:':\n          expect(value).toBe(gitHash);\n          break;\n\n        case 'Request Amount:':\n          expect(value).toBe('8');\n          break;\n\n        case 'ETag Matched:':\n          expect(value).toBe('1');\n          break;\n\n        case 'Hot Routes:':\n          expect(value).toBe('3  /test/:id<br>');\n          break;\n\n        case 'Hot Paths:':\n          expect(value).toBe('3  /test/1<br>2  /test/2<br>2  /test/empty<br>1  /<br>');\n          break;\n\n        case 'Hot Error Routes:':\n          expect(value).toBe('1  /test/:id<br>');\n          break;\n\n        case 'Hot Error Paths:':\n          expect(value).toBe('2  /test/empty<br>');\n          break;\n      }\n    });\n  });","file":"middleware/debug.js","skipped":false,"dir":"test"},{"name":"header","suites":["header"],"updatePoint":{"line":18,"column":12,"index":332},"line":18,"code":"  it(`header`, async () => {\n    const response = await request.get('/test/1');\n    expect(response.headers['access-control-allow-origin']).toBe('127.0.0.1:1200');\n    expect(response.headers['access-control-allow-methods']).toBe('GET');\n    expect(response.headers['content-type']).toBe('application/xml; charset=utf-8');\n    expect(response.headers['cache-control']).toBe(`public, max-age=${config.cache.routeExpire}`);\n    expect(response.headers['last-modified']).toBe(response.text.match(/<lastBuildDate>(.*)<\\/lastBuildDate>/)[1]);\n    expect(response.headers['rsshub-node']).toBe('mock');\n    expect(response.headers.etag).not.toBe(undefined);\n    etag = response.headers.etag;\n  });","file":"middleware/header.js","skipped":false,"dir":"test"},{"name":"etag","suites":["header"],"updatePoint":{"line":29,"column":10,"index":1021},"line":29,"code":"  it(`etag`, async () => {\n    const response = await request.get('/test/1').set('If-None-Match', etag);\n    expect(response.status).toBe(304);\n    expect(response.text).toBe('');\n    expect(response.headers['last-modified']).toBe(undefined);\n  });","file":"middleware/header.js","skipped":false,"dir":"test"},{"name":"error","suites":["error"],"updatePoint":{"line":19,"column":11,"index":417},"line":19,"code":"  it(`error`, async () => {\n    const response = await request.get('/test/error');\n    expect(response.status).toBe(404);\n    expect(response.text).toMatch(/Error: Error test/);\n  });","file":"middleware/onerror.js","skipped":false,"dir":"test"},{"name":"httperror","suites":["httperror"],"updatePoint":{"line":26,"column":15,"index":639},"line":26,"code":"  it(`httperror`, async () => {\n    const response = await request.get('/test/httperror');\n    expect(response.status).toBe(404);\n    expect(response.text).toMatch(/Response code 404 \\(Not Found\\): target website might be blocking our access, you can <a href=\"https:\\/\\/docs\\.rsshub\\.app\\/install\\/\">host your own RSSHub instance<\\/a> for a better usability\\./);\n  });","file":"middleware/onerror.js","skipped":false,"dir":"test"},{"name":"filter","suites":["filter"],"updatePoint":{"line":19,"column":12,"index":358},"line":19,"code":"  it(`filter`, async () => {\n    const response = await request.get('/test/1?filter=Description4|Title5');\n    const parsed = await parser.parseString(response.text);\n    expect(parsed.items.length).toBe(2);\n    expect(parsed.items[0].title).toBe('Title4');\n    expect(parsed.items[1].title).toBe('Title5');\n  });","file":"middleware/parameter.js","skipped":false,"dir":"test"},{"name":"filter filter_case_sensitive default","suites":["filter"],"updatePoint":{"line":26,"column":42,"index":702},"line":26,"code":"  it(`filter filter_case_sensitive default`, async () => {\n    const response = await request.get('/test/1?filter=description4|title5');\n    const parsed = await parser.parseString(response.text);\n    expect(parsed.items.length).toBe(0);\n  });","file":"middleware/parameter.js","skipped":false,"dir":"test"},{"name":"filter filter_case_sensitive=false","suites":["filter"],"updatePoint":{"line":31,"column":40,"index":944},"line":31,"code":"  it(`filter filter_case_sensitive=false`, async () => {\n    const response = await request.get('/test/1?filter=description4|title5&filter_case_sensitive=false');\n    const parsed = await parser.parseString(response.text);\n    expect(parsed.items.length).toBe(2);\n    expect(parsed.items[0].title).toBe('Title4');\n    expect(parsed.items[1].title).toBe('Title5');\n  });","file":"middleware/parameter.js","skipped":false,"dir":"test"},{"name":"filter_title","suites":["filter"],"updatePoint":{"line":38,"column":18,"index":1292},"line":38,"code":"  it(`filter_title`, async () => {\n    const response = await request.get('/test/1?filter_title=Description4|Title5');\n    const parsed = await parser.parseString(response.text);\n    expect(parsed.items.length).toBe(1);\n    expect(parsed.items[0].title).toBe('Title5');\n  });","file":"middleware/parameter.js","skipped":false,"dir":"test"},{"name":"filter_title filter_case_sensitive=false","suites":["filter"],"updatePoint":{"line":44,"column":46,"index":1596},"line":44,"code":"  it(`filter_title filter_case_sensitive=false`, async () => {\n    const response = await request.get('/test/1?filter_title=description4|title5&filter_case_sensitive=false');\n    const parsed = await parser.parseString(response.text);\n    expect(parsed.items.length).toBe(1);\n    expect(parsed.items[0].title).toBe('Title5');\n  });","file":"middleware/parameter.js","skipped":false,"dir":"test"},{"name":"filter_description","suites":["filter"],"updatePoint":{"line":50,"column":24,"index":1906},"line":50,"code":"  it(`filter_description`, async () => {\n    const response = await request.get('/test/1?filter_description=Description4|Title5');\n    const parsed = await parser.parseString(response.text);\n    expect(parsed.items.length).toBe(1);\n    expect(parsed.items[0].title).toBe('Title4');\n  });","file":"middleware/parameter.js","skipped":false,"dir":"test"},{"name":"filter_description filter_case_sensitive=false","suites":["filter"],"updatePoint":{"line":56,"column":52,"index":2222},"line":56,"code":"  it(`filter_description filter_case_sensitive=false`, async () => {\n    const response = await request.get('/test/1?filter_description=description4|title5&filter_case_sensitive=false');\n    const parsed = await parser.parseString(response.text);\n    expect(parsed.items.length).toBe(1);\n    expect(parsed.items[0].title).toBe('Title4');\n  });","file":"middleware/parameter.js","skipped":false,"dir":"test"},{"name":"filter_author","suites":["filter"],"updatePoint":{"line":62,"column":19,"index":2533},"line":62,"code":"  it(`filter_author`, async () => {\n    const response = await request.get('/test/1?filter_author=DIYgod4|DIYgod5');\n    const parsed = await parser.parseString(response.text);\n    expect(parsed.items.length).toBe(2);\n    expect(parsed.items[0].title).toBe('Title4');\n    expect(parsed.items[1].title).toBe('Title5');\n  });","file":"middleware/parameter.js","skipped":false,"dir":"test"},{"name":"filter_author filter_case_sensitive default","suites":["filter"],"updatePoint":{"line":69,"column":49,"index":2887},"line":69,"code":"  it(`filter_author filter_case_sensitive default`, async () => {\n    const response = await request.get('/test/1?filter_author=diygod4|diygod5');\n    const parsed = await parser.parseString(response.text);\n    expect(parsed.items.length).toBe(0);\n  });","file":"middleware/parameter.js","skipped":false,"dir":"test"},{"name":"filter_author filter_case_sensitive=false","suites":["filter"],"updatePoint":{"line":74,"column":47,"index":3139},"line":74,"code":"  it(`filter_author filter_case_sensitive=false`, async () => {\n    const response = await request.get('/test/1?filter_author=diygod4|diygod5&filter_case_sensitive=false');\n    const parsed = await parser.parseString(response.text);\n    expect(parsed.items.length).toBe(2);\n    expect(parsed.items[0].title).toBe('Title4');\n    expect(parsed.items[1].title).toBe('Title5');\n  });","file":"middleware/parameter.js","skipped":false,"dir":"test"},{"name":"filter_time","suites":["filter"],"updatePoint":{"line":81,"column":17,"index":3489},"line":81,"code":"  it(`filter_time`, async () => {\n    const response = await request.get('/test/current_time?filter_time=25');\n    const parsed = await parser.parseString(response.text);\n    expect(parsed.items.length).toBe(2);\n    expect(parsed.items[0].title).toBe('Title1');\n    expect(parsed.items[1].title).toBe('Title2');\n  });","file":"middleware/parameter.js","skipped":false,"dir":"test"},{"name":"filterout","suites":["filter"],"updatePoint":{"line":88,"column":15,"index":3805},"line":88,"code":"  it(`filterout`, async () => {\n    const response = await request.get('/test/1?filterout=Description4|Title5');\n    const parsed = await parser.parseString(response.text);\n    expect(parsed.items.length).toBe(3);\n    expect(parsed.items[0].title).toBe('Title1');\n    expect(parsed.items[1].title).toBe('Title2');\n    expect(parsed.items[2].title).toBe('Title3');\n  });","file":"middleware/parameter.js","skipped":false,"dir":"test"},{"name":"filterout filter_case_sensitive default","suites":["filter"],"updatePoint":{"line":96,"column":45,"index":4205},"line":96,"code":"  it(`filterout filter_case_sensitive default`, async () => {\n    const response = await request.get('/test/1?filterout=description4|title5');\n    const parsed = await parser.parseString(response.text);\n    expect(parsed.items.length).toBe(5);\n    expect(parsed.items[0].title).toBe('Title1');\n    expect(parsed.items[1].title).toBe('Title2');\n    expect(parsed.items[2].title).toBe('Title3');\n  });","file":"middleware/parameter.js","skipped":false,"dir":"test"},{"name":"filterout filter_case_sensitive=false","suites":["filter"],"updatePoint":{"line":104,"column":43,"index":4603},"line":104,"code":"  it(`filterout filter_case_sensitive=false`, async () => {\n    const response = await request.get('/test/1?filterout=description4|title5&filter_case_sensitive=false');\n    const parsed = await parser.parseString(response.text);\n    expect(parsed.items.length).toBe(3);\n    expect(parsed.items[0].title).toBe('Title1');\n    expect(parsed.items[1].title).toBe('Title2');\n    expect(parsed.items[2].title).toBe('Title3');\n  });","file":"middleware/parameter.js","skipped":false,"dir":"test"},{"name":"filterout_title","suites":["filter"],"updatePoint":{"line":112,"column":21,"index":5007},"line":112,"code":"  it(`filterout_title`, async () => {\n    const response = await request.get('/test/1?filterout_title=Description4|Title5');\n    const parsed = await parser.parseString(response.text);\n    expect(parsed.items.length).toBe(4);\n    expect(parsed.items[0].title).toBe('Title1');\n    expect(parsed.items[1].title).toBe('Title2');\n    expect(parsed.items[2].title).toBe('Title3');\n    expect(parsed.items[3].title).toBe('Title4');\n  });","file":"middleware/parameter.js","skipped":false,"dir":"test"},{"name":"filterout_title filter_case_sensitive=false","suites":["filter"],"updatePoint":{"line":121,"column":49,"index":5467},"line":121,"code":"  it(`filterout_title filter_case_sensitive=false`, async () => {\n    const response = await request.get('/test/1?filterout_title=description4|title5&filter_case_sensitive=false');\n    const parsed = await parser.parseString(response.text);\n    expect(parsed.items.length).toBe(4);\n    expect(parsed.items[0].title).toBe('Title1');\n    expect(parsed.items[1].title).toBe('Title2');\n    expect(parsed.items[2].title).toBe('Title3');\n    expect(parsed.items[3].title).toBe('Title4');\n  });","file":"middleware/parameter.js","skipped":false,"dir":"test"},{"name":"filterout_description","suites":["filter"],"updatePoint":{"line":130,"column":27,"index":5933},"line":130,"code":"  it(`filterout_description`, async () => {\n    const response = await request.get('/test/1?filterout_description=Description4|Title5');\n    const parsed = await parser.parseString(response.text);\n    expect(parsed.items.length).toBe(4);\n    expect(parsed.items[0].title).toBe('Title1');\n    expect(parsed.items[1].title).toBe('Title2');\n    expect(parsed.items[2].title).toBe('Title3');\n    expect(parsed.items[3].title).toBe('Title5');\n  });","file":"middleware/parameter.js","skipped":false,"dir":"test"},{"name":"filterout_description filter_case_sensitive=false","suites":["filter"],"updatePoint":{"line":139,"column":55,"index":6405},"line":139,"code":"  it(`filterout_description filter_case_sensitive=false`, async () => {\n    const response = await request.get('/test/1?filterout_description=description4|title5&filter_case_sensitive=false');\n    const parsed = await parser.parseString(response.text);\n    expect(parsed.items.length).toBe(4);\n    expect(parsed.items[0].title).toBe('Title1');\n    expect(parsed.items[1].title).toBe('Title2');\n    expect(parsed.items[2].title).toBe('Title3');\n    expect(parsed.items[3].title).toBe('Title5');\n  });","file":"middleware/parameter.js","skipped":false,"dir":"test"},{"name":"filterout_author","suites":["filter"],"updatePoint":{"line":148,"column":22,"index":6872},"line":148,"code":"  it(`filterout_author`, async () => {\n    const response = await request.get('/test/1?filterout_author=DIYgod4|DIYgod5');\n    const parsed = await parser.parseString(response.text);\n    expect(parsed.items.length).toBe(3);\n    expect(parsed.items[0].title).toBe('Title1');\n    expect(parsed.items[1].title).toBe('Title2');\n    expect(parsed.items[2].title).toBe('Title3');\n  });","file":"middleware/parameter.js","skipped":false,"dir":"test"},{"name":"filterout_author filter_case_sensitive default","suites":["filter"],"updatePoint":{"line":156,"column":52,"index":7282},"line":156,"code":"  it(`filterout_author filter_case_sensitive default`, async () => {\n    const response = await request.get('/test/1?filterout_author=diygod4|diygod5');\n    const parsed = await parser.parseString(response.text);\n    expect(parsed.items.length).toBe(5);\n    expect(parsed.items[0].title).toBe('Title1');\n    expect(parsed.items[1].title).toBe('Title2');\n    expect(parsed.items[2].title).toBe('Title3');\n  });","file":"middleware/parameter.js","skipped":false,"dir":"test"},{"name":"filterout_author filter_case_sensitive=false","suites":["filter"],"updatePoint":{"line":164,"column":50,"index":7690},"line":164,"code":"  it(`filterout_author filter_case_sensitive=false`, async () => {\n    const response = await request.get('/test/1?filterout_author=diygod4|diygod5&filter_case_sensitive=false');\n    const parsed = await parser.parseString(response.text);\n    expect(parsed.items.length).toBe(3);\n    expect(parsed.items[0].title).toBe('Title1');\n    expect(parsed.items[1].title).toBe('Title2');\n    expect(parsed.items[2].title).toBe('Title3');\n  });","file":"middleware/parameter.js","skipped":false,"dir":"test"},{"name":"filter combination","suites":["filter"],"updatePoint":{"line":172,"column":24,"index":8100},"line":172,"code":"  it(`filter combination`, async () => {\n    const response = await request.get('/test/filter?filter_title=Filter&filter_description=Description1');\n    const parsed = await parser.parseString(response.text);\n    expect(parsed.items.length).toBe(1);\n    expect(parsed.items[0].title).toBe('Filter Title1');\n  });","file":"middleware/parameter.js","skipped":false,"dir":"test"},{"name":"filterout combination","suites":["filter"],"updatePoint":{"line":178,"column":27,"index":8416},"line":178,"code":"  it(`filterout combination`, async () => {\n    const response = await request.get('/test/filter?filterout_title=Filter&filterout_description=Description1');\n    const parsed = await parser.parseString(response.text);\n    expect(parsed.items.length).toBe(4);\n    expect(parsed.items[0].title).toBe('Title2');\n  });","file":"middleware/parameter.js","skipped":false,"dir":"test"},{"name":"limit","suites":["limit"],"updatePoint":{"line":186,"column":11,"index":8745},"line":186,"code":"  it(`limit`, async () => {\n    const response = await request.get('/test/1?limit=3');\n    const parsed = await parser.parseString(response.text);\n    expect(parsed.items.length).toBe(3);\n    expect(parsed.items[0].title).toBe('Title1');\n    expect(parsed.items[1].title).toBe('Title2');\n    expect(parsed.items[2].title).toBe('Title3');\n  });","file":"middleware/parameter.js","skipped":false,"dir":"test"},{"name":"tgiv","suites":["tgiv"],"updatePoint":{"line":196,"column":10,"index":9117},"line":196,"code":"  it(`tgiv`, async () => {\n    const response = await request.get('/test/1?tgiv=test');\n    const parsed = await parser.parseString(response.text);\n    expect(parsed.items[0].link).toBe(`https://t.me/iv?url=https%3A%2F%2Fgithub.com%2FDIYgod%2FRSSHub%2Fissues%2F1&rhash=test`);\n    expect(parsed.items[1].link).toBe(`https://t.me/iv?url=https%3A%2F%2Fgithub.com%2FDIYgod%2FRSSHub%2Fissues%2F2&rhash=test`);\n  });","file":"middleware/parameter.js","skipped":false,"dir":"test"},{"name":"empty","suites":["empty"],"updatePoint":{"line":204,"column":11,"index":9560},"line":204,"code":"  it(`empty`, async () => {\n    const response1 = await request.get('/test/empty');\n    expect(response1.status).toBe(404);\n    expect(response1.text).toMatch(/Error: this route is empty/);\n    const response2 = await request.get('/test/1?limit=0');\n    expect(response2.status).toBe(200);\n    const parsed = await parser.parseString(response2.text);\n    expect(parsed.items.length).toBe(0);\n  });","file":"middleware/parameter.js","skipped":false,"dir":"test"},{"name":"allow_empty","suites":["allow_empty"],"updatePoint":{"line":215,"column":17,"index":10000},"line":215,"code":"  it(`allow_empty`, async () => {\n    const response = await request.get('/test/allow_empty');\n    expect(response.status).toBe(200);\n    const parsed = await parser.parseString(response.text);\n    expect(parsed.items.length).toBe(0);\n  });","file":"middleware/parameter.js","skipped":false,"dir":"test"},{"name":"wrong_path","suites":["wrong_path"],"updatePoint":{"line":223,"column":16,"index":10275},"line":223,"code":"  it(`wrong_path`, async () => {\n    const response = await request.get('/wrong');\n    expect(response.status).toBe(404);\n    expect(response.headers['cache-control']).toBe(`public, max-age=${config.cache.routeExpire * 100}`);\n    expect(response.text).toMatch(/Error: wrong path/);\n  });","file":"middleware/parameter.js","skipped":false,"dir":"test"},{"name":"fulltext","suites":["fulltext_mode"],"updatePoint":{"line":231,"column":14,"index":10600},"line":231,"code":"  it(`fulltext`, async () => {\n    const response = await request.get('/test/1?mode=fulltext');\n    expect(response.status).toBe(200);\n    const parsed = await parser.parseString(response.text);\n    expect(parsed.items[0].content).not.toBe(undefined);\n  });","file":"middleware/parameter.js","skipped":false,"dir":"test"},{"name":"complicated_description","suites":["complicated_description"],"updatePoint":{"line":239,"column":29,"index":10928},"line":239,"code":"  it(`complicated_description`, async () => {\n    const response = await request.get('/test/complicated');\n    expect(response.status).toBe(200);\n    const parsed = await parser.parseString(response.text);\n    expect(parsed.items[0].content).toBe(`<a href=\"https://mock.com/DIYgod/RSSHub\"></a>\n<img src=\"https://mock.com/DIYgod/RSSHub.jpg\" referrerpolicy=\"no-referrer\">\n\n<a href=\"http://mock.com/DIYgod/RSSHub\"></a>\n<img src=\"https://mock.com/DIYgod/RSSHub.jpg\" data-src=\"/DIYgod/RSSHub0.jpg\" referrerpolicy=\"no-referrer\">\n<img data-src=\"/DIYgod/RSSHub.jpg\" src=\"https://mock.com/DIYgod/RSSHub.jpg\" referrerpolicy=\"no-referrer\">\n<img data-mock=\"/DIYgod/RSSHub.png\" src=\"https://mock.com/DIYgod/RSSHub.png\" referrerpolicy=\"no-referrer\">\n<img mock=\"/DIYgod/RSSHub.gif\" src=\"https://mock.com/DIYgod/RSSHub.gif\" referrerpolicy=\"no-referrer\">\n<img src=\"http://mock.com/DIYgod/DIYgod/RSSHub\" referrerpolicy=\"no-referrer\">\n<img src=\"https://mock.com/DIYgod/RSSHub.jpg\" referrerpolicy=\"no-referrer\">`);\n    expect(parsed.items[1].content).toBe(`<a href=\"https://mock.com/DIYgod/RSSHub\"></a>\n<img src=\"https://mock.com/DIYgod/RSSHub.jpg\" referrerpolicy=\"no-referrer\">`);\n  });","file":"middleware/parameter.js","skipped":false,"dir":"test"},{"name":"sort","suites":["sort"],"updatePoint":{"line":258,"column":10,"index":12106},"line":258,"code":"  it(`sort`, async () => {\n    const response = await request.get('/test/sort');\n    expect(response.status).toBe(200);\n    const parsed = await parser.parseString(response.text);\n    expect(parsed.items[0].title).toBe('Sort Title 3');\n    expect(parsed.items[parsed.items.length - 3].title).toBe('Sort Title 2');\n    expect(parsed.items[parsed.items.length - 2].title).toBe('Sort Title 0');\n    expect(parsed.items[parsed.items.length - 1].title).toBe('Sort Title 1');\n  });","file":"middleware/parameter.js","skipped":false,"dir":"test"},{"name":"date","suites":["mess parameter"],"updatePoint":{"line":269,"column":10,"index":12621},"line":269,"code":"  it(`date`, async () => {\n    const response = await request.get('/test/mess');\n    expect(response.status).toBe(200);\n    const parsed = await parser.parseString(response.text);\n    expect(parsed.items[0].pubDate).toBe('Mon, 31 Dec 2018 16:00:00 GMT');\n    expect(parsed.items[0].link).toBe('https://github.com/DIYgod/RSSHub/issues/0');\n  });","file":"middleware/parameter.js","skipped":false,"dir":"test"},{"name":"opencc","suites":["opencc"],"updatePoint":{"line":278,"column":12,"index":12999},"line":278,"code":"  it(`opencc`, async () => {\n    const response = await request.get('/test/opencc?opencc=t2s');\n    const parsed = await parser.parseString(response.text);\n    expect(parsed.items[0].title).toBe('小可爱');\n    expect(parsed.items[0].content).toBe('宇宙无敌');\n  });","file":"middleware/parameter.js","skipped":false,"dir":"test"},{"name":".rss","suites":["template"],"updatePoint":{"line":17,"column":10,"index":367},"line":17,"code":"  it(`.rss`, async () => {\n    const response1 = await request.get('/test/1.rss');\n    const parsed1 = await parser.parseString(response1.text);\n    expect(parsed1).toEqual(expect.any(Object));\n    expect(parsed1.title).toEqual(expect.any(String));\n    expect(parsed1.description).toEqual(expect.any(String));\n    expect(parsed1.link).toEqual(expect.any(String));\n    expect(parsed1.lastBuildDate).toEqual(expect.any(String));\n    expect(parsed1.ttl).toEqual(expect.any(String));\n    expect(parsed1.items).toEqual(expect.any(Array));\n    expect(parsed1.items[0]).toEqual(expect.any(Object));\n    expect(parsed1.items[0].title).toEqual(expect.any(String));\n    expect(parsed1.items[0].link).toEqual(expect.any(String));\n    expect(parsed1.items[0].pubDate).toBe(expectPubDate.toUTCString());\n    expect(parsed1.items[0].author).toEqual(expect.any(String));\n    expect(parsed1.items[0].content).toEqual(expect.any(String));\n    expect(parsed1.items[0].guid).toEqual(expect.any(String));\n    const response2 = await request.get('/test/1');\n    const parsed2 = await parser.parseString(response2.text);\n    delete parsed1.lastBuildDate;\n    delete parsed2.lastBuildDate;\n    delete parsed1.feedUrl;\n    delete parsed2.feedUrl;\n    delete parsed1.paginationLinks;\n    delete parsed2.paginationLinks;\n    expect(parsed2).toMatchObject(parsed1);\n  });","file":"middleware/template.js","skipped":false,"dir":"test"},{"name":".atom","suites":["template"],"updatePoint":{"line":44,"column":11,"index":1713},"line":44,"code":"  it(`.atom`, async () => {\n    const response = await request.get('/test/1.atom');\n    const parsed = await parser.parseString(response.text);\n    expect(parsed).toEqual(expect.any(Object));\n    expect(parsed.title).toEqual(expect.any(String));\n    expect(parsed.link).toEqual(expect.any(String));\n    expect(parsed.lastBuildDate).toEqual(expect.any(String));\n    expect(parsed.items).toEqual(expect.any(Array));\n    expect(parsed.items[0]).toEqual(expect.any(Object));\n    expect(parsed.items[0].title).toEqual(expect.any(String));\n    expect(parsed.items[0].link).toEqual(expect.any(String));\n    expect(parsed.items[0].pubDate).toBe(expectPubDate.toISOString());\n    expect(parsed.items[0].author).toEqual(expect.any(String));\n    expect(parsed.items[0].content).toEqual(expect.any(String));\n    expect(parsed.items[0].id).toEqual(expect.any(String));\n  });","file":"middleware/template.js","skipped":false,"dir":"test"},{"name":".json","suites":["template"],"updatePoint":{"line":60,"column":11,"index":2575},"line":60,"code":"  it(`.json`, async () => {\n    const response = await request.get('/test/1.json');\n    const responseXML = await request.get('/test/1.rss');\n    expect(response.text.slice(0, 50)).toEqual(responseXML.text.slice(0, 50));\n  });","file":"middleware/template.js","skipped":false,"dir":"test"},{"name":"long title","suites":["template"],"updatePoint":{"line":65,"column":16,"index":2807},"line":65,"code":"  it(`long title`, async () => {\n    const response = await request.get('/test/long');\n    const parsed = await parser.parseString(response.text);\n    expect(parsed.items[0].title.length).toBe(153);\n  });","file":"middleware/template.js","skipped":false,"dir":"test"},{"name":"enclosure","suites":["template"],"updatePoint":{"line":70,"column":15,"index":3011},"line":70,"code":"  it(`enclosure`, async () => {\n    const response = await request.get('/test/enclosure');\n    const parsed = await parser.parseString(response.text);\n    expect(parsed.itunes.author).toBe('DIYgod');\n    expect(parsed.items[0].enclosure.url).toBe('https://github.com/DIYgod/RSSHub/issues/1');\n    expect(parsed.items[0].enclosure.length).toBe('3661');\n    expect(parsed.items[0].itunes.duration).toBe('10:10:10');\n  });","file":"middleware/template.js","skipped":false,"dir":"test"},{"name":"config","suites":["pkg"],"updatePoint":{"line":6,"column":12,"index":114},"line":6,"code":"  it('config', () => {\n    RSSHub.init({\n      UA: 'mock'\n    });\n\n    const config = require('../lib/config').value;\n\n    expect(config.ua).toBe('mock');\n  });","file":"pkg.js","skipped":false,"dir":"test"},{"name":"request","suites":["pkg"],"updatePoint":{"line":15,"column":13,"index":276},"line":15,"code":"  it('request', done => {\n    RSSHub.request('/test/1').then(data => {\n      expect(data).toMatchObject({\n        atomlink: 'http:///test/1',\n        title: 'Test 1',\n        itunes_author: null,\n        link: 'https://github.com/DIYgod/RSSHub',\n        item: [{\n          title: 'Title1',\n          description: 'Description1',\n          pubDate: 'Mon, 31 Dec 2018 15:59:50 GMT',\n          link: 'https://github.com/DIYgod/RSSHub/issues/1',\n          author: 'DIYgod1'\n        }, {\n          title: 'Title2',\n          description: 'Description2',\n          pubDate: 'Mon, 31 Dec 2018 15:59:40 GMT',\n          link: 'https://github.com/DIYgod/RSSHub/issues/2',\n          author: 'DIYgod2'\n        }, {\n          title: 'Title3',\n          description: 'Description3',\n          pubDate: 'Mon, 31 Dec 2018 15:59:30 GMT',\n          link: 'https://github.com/DIYgod/RSSHub/issues/3',\n          author: 'DIYgod3'\n        }, {\n          title: 'Title4',\n          description: 'Description4',\n          pubDate: 'Mon, 31 Dec 2018 15:59:20 GMT',\n          link: 'https://github.com/DIYgod/RSSHub/issues/4',\n          author: 'DIYgod4'\n        }, {\n          title: 'Title5',\n          description: 'Description5',\n          pubDate: 'Mon, 31 Dec 2018 15:59:10 GMT',\n          link: 'https://github.com/DIYgod/RSSHub/issues/5',\n          author: 'DIYgod5'\n        }],\n        allowEmpty: false\n      });\n      done();\n    });\n  });","file":"pkg.js","skipped":false,"dir":"test"},{"name":"error","suites":["pkg"],"updatePoint":{"line":58,"column":11,"index":1700},"line":58,"code":"  it('error', done => {\n    RSSHub.request('/test/error').then(() => {\n      done();\n    }).catch(e => {\n      expect(e).toBe('Error test');\n      done();\n    });\n  });","file":"pkg.js","skipped":false,"dir":"test"},{"name":"/","suites":["router"],"updatePoint":{"line":64,"column":7,"index":1860},"line":64,"code":"  it(`/`, async () => {\n    const response = await request.get('/');\n    expect(response.status).toBe(200);\n    expect(response.headers['content-type']).toBe('text/html; charset=UTF-8');\n    expect(response.headers['cache-control']).toBe('no-cache');\n  }); // route","file":"router.js","skipped":false,"dir":"test"},{"name":"/test/1","suites":["router"],"updatePoint":{"line":71,"column":13,"index":2133},"line":71,"code":"  it(`/test/1`, async () => {\n    const response = await request.get('/test/1');\n    expect(response.status).toBe(200);\n    await checkRSS(response);\n  }); // robots.txt","file":"router.js","skipped":false,"dir":"test"},{"name":"/robots.txt","suites":["router"],"updatePoint":{"line":77,"column":17,"index":2308},"line":77,"code":"  it('/robots.txt', async () => {\n    config.disallowRobot = false;\n    const response404 = await request.get('/robots.txt');\n    expect(response404.status).toBe(404);\n    config.disallowRobot = true;\n    const response = await request.get('/robots.txt');\n    expect(response.status).toBe(200);\n    expect(response.text).toBe('User-agent: *\\nDisallow: /');\n    expect(response.headers['content-type']).toBe('text/plain');\n  }); // api","file":"router.js","skipped":false,"dir":"test"},{"name":"/api/routes/test","suites":["router"],"updatePoint":{"line":88,"column":22,"index":2749},"line":88,"code":"  it(`/api/routes/test`, async () => {\n    const response = await request.get('/api/routes/test');\n    expect(response.status).toBe(200);\n    expect(response.body).toEqual({\n      status: 0,\n      data: {\n        test: {\n          routes: ['/test/:id']\n        }\n      },\n      message: 'request returned 1 route'\n    });\n  });","file":"router.js","skipped":false,"dir":"test"},{"name":"/api/routes","suites":["router"],"updatePoint":{"line":101,"column":17,"index":3072},"line":101,"code":"  it(`/api/routes`, async () => {\n    const response = await request.get('/api/routes');\n    expect(response.status).toBe(200);\n    expect(response.body).toMatchObject({\n      status: 0,\n      data: {\n        test: {\n          routes: ['/test/:id']\n        }\n      },\n      message: expect.stringMatching(/request returned (\\d+) routes/)\n    });\n  });","file":"router.js","skipped":false,"dir":"test"},{"name":"transElemText","suites":["index"],"updatePoint":{"line":6,"column":19,"index":140},"line":6,"code":"  it('transElemText', () => {\n    const $ = () => 'RSSHub';\n\n    expect(configUtils.transElemText($, '$()')).toBe('RSSHub');\n  });","file":"utils/common-config.js","skipped":false,"dir":"test"},{"name":"replaceParams","suites":["index"],"updatePoint":{"line":11,"column":19,"index":271},"line":11,"code":"  it('replaceParams', () => {\n    const $ = () => 'RSSHub';\n\n    const data = {\n      params: {\n        title: 'RSSHub'\n      },\n      title: '%title%'\n    };\n    expect(configUtils.replaceParams(data, data.title, $)).toBe('RSSHub');\n  });","file":"utils/common-config.js","skipped":false,"dir":"test"},{"name":"getProp","suites":["index"],"updatePoint":{"line":22,"column":13,"index":505},"line":22,"code":"  it('getProp', () => {\n    const $ = () => 'RSSHub';\n\n    const data = {\n      title: 'RSSHub'\n    };\n    expect(configUtils.getProp(data, ['title'], $)).toBe('RSSHub');\n    expect(configUtils.getProp(data, 'title', $)).toBe('RSSHub');\n  });","file":"utils/common-config.js","skipped":false,"dir":"test"},{"name":"all","suites":["index"],"updatePoint":{"line":31,"column":9,"index":744},"line":31,"code":"  it('all', () => {\n    const $ = () => 'RSSHub';\n\n    const data = {\n      params: {\n        title: '$()'\n      },\n      title: '%title%'\n    };\n    expect(configUtils.getProp(data, ['title'], $)).toBe('RSSHub');\n  });","file":"utils/common-config.js","skipped":false,"dir":"test"},{"name":"buildData","suites":["index"],"updatePoint":{"line":42,"column":15,"index":970},"line":42,"code":"  it('buildData', async () => {\n    nock('http://rsshub.test').get('/buildData').reply(() => [200, `<div class=\"content\">\n                <ul>\n                    <li>\n                        <a href=\"/1\">1</a>\n                        <div class=\"description\">RSSHub1</div>\n                    </li>\n                    <li>\n                        <a href=\"/2\">2</a>\n                        <div class=\"description\">RSSHub2</div>\n                    </li>\n                </ul>\n            </div>`]);\n    const data = await configUtils({\n      link: 'http://rsshub.test/buildData',\n      url: 'http://rsshub.test/buildData',\n      title: `%title%`,\n      params: {\n        title: 'buildData'\n      },\n      item: {\n        item: '.content li',\n        title: `$('a').text() + ' - %title%'`,\n        link: `$('a').attr('href')`,\n        description: `$('.description').html()`\n      }\n    });\n    expect(data).toMatchObject({\n      link: 'http://rsshub.test/buildData',\n      title: 'buildData',\n      item: [{\n        description: 'RSSHub1',\n        guid: undefined,\n        link: '/1',\n        pubDate: undefined,\n        title: '1 - buildData'\n      }, {\n        description: 'RSSHub2',\n        guid: undefined,\n        link: '/2',\n        pubDate: undefined,\n        title: '2 - buildData'\n      }]\n    });\n  });","file":"utils/common-config.js","skipped":false,"dir":"test"},{"name":"toTitleCase","suites":["common-utils"],"updatePoint":{"line":4,"column":17,"index":107},"line":4,"code":"  it('toTitleCase', () => {\n    expect(utils.toTitleCase('RSSHub IS AS aweSOme aS henry')).toBe('Rsshub Is As Awesome As Henry');\n  });","file":"utils/common-utils.js","skipped":false,"dir":"test"},{"name":"convertDateToISO8601","suites":["common-utils"],"updatePoint":{"line":7,"column":26,"index":252},"line":7,"code":"  it('convertDateToISO8601', () => {\n    expect(utils.convertDateToISO8601('')).toBe('');\n    expect(utils.convertDateToISO8601(null)).toBe(null);\n    expect(utils.convertDateToISO8601(undefined)).toBe(undefined);\n    const date = new Date('2019-01-01');\n    const expected = date.toISOString();\n    expect(utils.convertDateToISO8601(date)).toBe(expected);\n    expect(utils.convertDateToISO8601(date.toISOString())).toBe(expected);\n    expect(utils.convertDateToISO8601(date.toUTCString())).toBe(expected);\n    expect(utils.convertDateToISO8601(date.toLocaleString())).toBe(expected);\n    expect(utils.convertDateToISO8601('Tue, 01 Jan 2019 08:00:00 UTC+8')).toBe(expected);\n    expect(utils.convertDateToISO8601('Tue, 01 Jan 2019 00:00:00')).toBe(new Date(date.getTime() + new Date().getTimezoneOffset() * 60 * 1000).toISOString()); // need to pass a function in order to use `toThrow`\n\n    expect(() => {\n      utils.convertDateToISO8601('something invalid');\n    }).toThrow(RangeError);\n  });","file":"utils/common-utils.js","skipped":false,"dir":"test"},{"name":"collapseWhitespace","suites":["common-utils"],"updatePoint":{"line":24,"column":24,"index":1246},"line":24,"code":"  it('collapseWhitespace', () => {\n    expect(utils.collapseWhitespace('')).toBe('');\n    expect(utils.collapseWhitespace(null)).toBe(null);\n    expect(utils.collapseWhitespace(undefined)).toBe(undefined);\n    expect(utils.collapseWhitespace('   \\n\\n\\n    ')).toBe('');\n    expect(utils.collapseWhitespace('a string already collapsed')).toBe('a string already collapsed');\n    expect(utils.collapseWhitespace(' \\n  a lot of     whitespaces   and \\n\\n\\n\\n linebreaks   \\n\\n ')).toBe('a lot of whitespaces and linebreaks');\n  });","file":"utils/common-utils.js","skipped":false,"dir":"test"},{"name":"m分钟前","suites":["date"],"updatePoint":{"line":8,"column":10,"index":194},"line":8,"code":"  it('m分钟前', () => {\n    expect(+new Date(parseDate('10分钟前'))).toBe(+date - 10 * 60 * 1000);\n  });","file":"utils/date.js","skipped":false,"dir":"test"},{"name":"H小时前","suites":["date"],"updatePoint":{"line":11,"column":10,"index":293},"line":11,"code":"  it('H小时前', () => {\n    expect(+new Date(parseDate('10小时前'))).toBe(+date - 10 * 60 * 60 * 1000);\n  });","file":"utils/date.js","skipped":false,"dir":"test"},{"name":"D天前","suites":["date"],"updatePoint":{"line":14,"column":9,"index":396},"line":14,"code":"  it('D天前', () => {\n    expect(+new Date(parseDate('10天前'))).toBe(+date - 10 * 24 * 60 * 60 * 1000);\n  });","file":"utils/date.js","skipped":false,"dir":"test"},{"name":"M月前","suites":["date"],"updatePoint":{"line":17,"column":9,"index":503},"line":17,"code":"  it('M月前', () => {\n    expect(+new Date(parseDate('1月前'))).toBe(+date - 1 * 31 * 24 * 60 * 60 * 1000);\n  });","file":"utils/date.js","skipped":false,"dir":"test"},{"name":"Y年前","suites":["date"],"updatePoint":{"line":20,"column":9,"index":613},"line":20,"code":"  it('Y年前', () => {\n    expect(+new Date(parseDate('1年前'))).toBe(+date - 1 * 365 * 24 * 60 * 60 * 1000);\n  });","file":"utils/date.js","skipped":false,"dir":"test"},{"name":"今天 H:m","suites":["date"],"updatePoint":{"line":23,"column":12,"index":727},"line":23,"code":"  it('今天 H:m', () => {\n    expect(+new Date(parseDate('今天 08:00'))).toBe(+new Date('2019-1-1 08:00'));\n  });","file":"utils/date.js","skipped":false,"dir":"test"},{"name":"昨天 H:m","suites":["date"],"updatePoint":{"line":26,"column":12,"index":836},"line":26,"code":"  it('昨天 H:m', () => {\n    expect(+new Date(parseDate('昨天 20:00'))).toBe(+new Date('2018-12-31 20:00'));\n  });","file":"utils/date.js","skipped":false,"dir":"test"},{"name":"前天 H:m","suites":["date"],"updatePoint":{"line":29,"column":12,"index":947},"line":29,"code":"  it('前天 H:m', () => {\n    expect(+new Date(parseDate('前天 20:00'))).toBe(+new Date('2018-12-30 20:00'));\n  });","file":"utils/date.js","skipped":false,"dir":"test"},{"name":"Y年M月D日H时","suites":["date"],"updatePoint":{"line":32,"column":14,"index":1060},"line":32,"code":"  it('Y年M月D日H时', () => {\n    expect(+new Date(parseDate('2018年4月2日1时'))).toBe(+new Date('2018-4-2 01:00'));\n  });","file":"utils/date.js","skipped":false,"dir":"test"},{"name":"Y年M月D日","suites":["date"],"updatePoint":{"line":35,"column":12,"index":1172},"line":35,"code":"  it('Y年M月D日', () => {\n    expect(+new Date(parseDate('2018年4月2日'))).toBe(+new Date('2018-4-2 00:00'));\n  });","file":"utils/date.js","skipped":false,"dir":"test"},{"name":"Y-M-D H:m","suites":["date"],"updatePoint":{"line":38,"column":15,"index":1285},"line":38,"code":"  it('Y-M-D H:m', () => {\n    expect(+new Date(parseDate('2018-4-2 02:03'))).toBe(+new Date('2018-4-2 02:03'));\n  });","file":"utils/date.js","skipped":false,"dir":"test"},{"name":"M-D H:m","suites":["date"],"updatePoint":{"line":41,"column":13,"index":1401},"line":41,"code":"  it('M-D H:m', () => {\n    expect(+new Date(parseDate('2-3 02:03'))).toBe(+new Date('2019-2-3 02:03'));\n  });","file":"utils/date.js","skipped":false,"dir":"test"},{"name":"Y/M/D H:m:s","suites":["date"],"updatePoint":{"line":44,"column":17,"index":1516},"line":44,"code":"  it('Y/M/D H:m:s', () => {\n    expect(+new Date(parseDate('2018/4/2 02:03:04'))).toBe(+new Date('2018-4-2 02:03:04'));\n  });","file":"utils/date.js","skipped":false,"dir":"test"},{"name":"Y/M/D H:m","suites":["date"],"updatePoint":{"line":47,"column":15,"index":1640},"line":47,"code":"  it('Y/M/D H:m', () => {\n    expect(+new Date(parseDate('2018/4/2 02:03'))).toBe(+new Date('2018-4-2 02:03'));\n  });","file":"utils/date.js","skipped":false,"dir":"test"},{"name":"M/D H:m","suites":["date"],"updatePoint":{"line":50,"column":13,"index":1756},"line":50,"code":"  it('M/D H:m', () => {\n    expect(+new Date(parseDate('2/3 02:03'))).toBe(+new Date('2019-2-3 02:03'));\n  });","file":"utils/date.js","skipped":false,"dir":"test"},{"name":"M月D日 H:m","suites":["date"],"updatePoint":{"line":53,"column":14,"index":1868},"line":53,"code":"  it('M月D日 H:m', () => {\n    expect(+new Date(parseDate('2月3日 02:03'))).toBe(+new Date('2019-2-3 02:03'));\n  });","file":"utils/date.js","skipped":false,"dir":"test"},{"name":"M月D日","suites":["date"],"updatePoint":{"line":56,"column":10,"index":1977},"line":56,"code":"  it('M月D日', () => {\n    expect(+new Date(parseDate('2月3日'))).toBe(+new Date('2019-2-3 00:00'));\n  });","file":"utils/date.js","skipped":false,"dir":"test"},{"name":"M月D号","suites":["date"],"updatePoint":{"line":59,"column":10,"index":2080},"line":59,"code":"  it('M月D号', () => {\n    expect(+new Date(parseDate('2月3号'))).toBe(+new Date('2019-2-3 00:00'));\n  });","file":"utils/date.js","skipped":false,"dir":"test"},{"name":"M/D","suites":["date"],"updatePoint":{"line":62,"column":9,"index":2182},"line":62,"code":"  it('M/D', () => {\n    expect(+new Date(parseDate('2/3'))).toBe(+new Date('2019-2-3 00:00'));\n  });","file":"utils/date.js","skipped":false,"dir":"test"},{"name":"Y-M-D","suites":["date"],"updatePoint":{"line":65,"column":11,"index":2285},"line":65,"code":"  it('Y-M-D', () => {\n    expect(+new Date(parseDate('2018-4-2'))).toBe(+new Date('2018-4-2'));\n  });","file":"utils/date.js","skipped":false,"dir":"test"},{"name":"M-D","suites":["date"],"updatePoint":{"line":68,"column":9,"index":2385},"line":68,"code":"  it('M-D', () => {\n    expect(+new Date(parseDate('4-2'))).toBe(+new Date('2019-4-2'));\n  });","file":"utils/date.js","skipped":false,"dir":"test"},{"name":"H:m","suites":["date"],"updatePoint":{"line":71,"column":9,"index":2480},"line":71,"code":"  it('H:m', () => {\n    expect(+new Date(parseDate('4:2'))).toBe(+new Date('2019-1-1 04:02'));\n  });","file":"utils/date.js","skipped":false,"dir":"test"},{"name":"刚刚","suites":["date"],"updatePoint":{"line":74,"column":8,"index":2580},"line":74,"code":"  it('刚刚', () => {\n    const result = +new Date(parseDate('刚刚'));\n    const now = +new Date();\n    expect(result - now).toBeLessThan(10);\n    expect(result - now).toBeGreaterThanOrEqual(0);\n  });","file":"utils/date.js","skipped":false,"dir":"test"},{"name":"Invalid","suites":["date"],"updatePoint":{"line":80,"column":13,"index":2781},"line":80,"code":"  it('Invalid', () => {\n    expect(parseDate('RSSHub')).toBe('RSSHub');\n  });","file":"utils/date.js","skipped":false,"dir":"test"},{"name":"UTCString","suites":["dateParser"],"updatePoint":{"line":23,"column":17,"index":592},"line":23,"code":"  test(`UTCString`, () => {\n    expect(dateParser(dayjs.utc(now.toUTCString()).locale('en').format('YYYY-MM-DD HH:mm:ss'))).toBe(now.toUTCString());\n  }); // Test of input as a string of local time with timezone in ISO 8601","file":"utils/dateParser.js","skipped":false,"dir":"test"},{"name":"ISO 8601","suites":["dateParser"],"updatePoint":{"line":27,"column":16,"index":816},"line":27,"code":"  test(`ISO 8601`, () => {\n    expect(dateParser(dayjs(now.toUTCString()).locale('en').format('YYYY-MM-DDTHH:mm:ssZ'))).toBe(now.toUTCString());\n  }); // Test of input as a string of local time with timezone set by htmlOffset","file":"utils/dateParser.js","skipped":false,"dir":"test"},{"name":"htmlOffset","suites":["dateParser"],"updatePoint":{"line":31,"column":18,"index":1045},"line":31,"code":"  test(`htmlOffset`, () => {\n    expect(dateParser(dayjs(now.toUTCString()).locale('en').format('YYYY-MM-DDTHH:mm:ss'), null, 'en', serverOffset)).toBe(now.toUTCString());\n  }); // Test of input as a string of UTC Time with week","file":"utils/dateParser.js","skipped":false,"dir":"test"},{"name":"en UTCString with week","suites":["dateParser"],"updatePoint":{"line":35,"column":30,"index":1287},"line":35,"code":"  test(`en UTCString with week`, () => {\n    expect(dateParser(dayjs.utc(now.toUTCString()).locale('en').format('dddd, DD MMMM YYYY HH:mm:ss'), 'DD MMMM YYYY HH:mm:ss')).toBe(now.toUTCString());\n  });","file":"utils/dateParser.js","skipped":false,"dir":"test"},{"name":"zh-cn UTCString with week","suites":["dateParser"],"updatePoint":{"line":38,"column":33,"index":1491},"line":38,"code":"  test(`zh-cn UTCString with week`, () => {\n    expect(dateParser(dayjs.utc(now.toUTCString()).locale('zh-cn').format('dddd, DD MMMM YYYY HH:mm:ss'), 'DD MMMM YYYY HH:mm:ss', 'zh-cn')).toBe(now.toUTCString());\n  });","file":"utils/dateParser.js","skipped":false,"dir":"test"},{"name":"zh-hant UTCString with week","suites":["dateParser"],"updatePoint":{"line":41,"column":35,"index":1709},"line":41,"code":"  test(`zh-hant UTCString with week`, () => {\n    expect(dateParser(dayjs.utc(now.toUTCString()).locale(dateParser.i8nconv('zh-hant')).format('dddd, DD MMMM YYYY HH:mm:ss'), 'DD MMMM YYYY HH:mm:ss', 'zh-hant')).toBe(now.toUTCString());\n  }); // fallback","file":"utils/dateParser.js","skipped":false,"dir":"test"},{"name":"fallback","suites":["dateParser"],"updatePoint":{"line":45,"column":16,"index":1945},"line":45,"code":"  test('fallback', () => {\n    expect(+new Date(dateParser('10分钟前'))).toBe(+now - 10 * 60 * 1000);\n  }); // error handling","file":"utils/dateParser.js","skipped":false,"dir":"test"},{"name":"error handling","suites":["dateParser"],"updatePoint":{"line":49,"column":22,"index":2075},"line":49,"code":"  test('error handling', () => {\n    expect(+new Date(dateParser('10分钟前', null, 'Klingon'))).toBe(+now - 10 * 60 * 1000);\n  });","file":"utils/dateParser.js","skipped":false,"dir":"test"},{"name":"headers","suites":["got"],"updatePoint":{"line":15,"column":13,"index":313},"line":15,"code":"  it('headers', async () => {\n    nock('http://rsshub.test').get('/test').reply(function () {\n      expect(this.req.headers['user-agent']).toBe(config.ua);\n      return [200, ''];\n    });\n    await got.get('http://rsshub.test/test');\n  });","file":"utils/got.js","skipped":false,"dir":"test"},{"name":"retry","suites":["got"],"updatePoint":{"line":22,"column":11,"index":551},"line":22,"code":"  it('retry', async () => {\n    const requestRun = jest.fn();\n    nock('http://rsshub.test').get('/testRerty').times(config.requestRetry + 1).reply(() => {\n      requestRun();\n      return [503, '0'];\n    });\n\n    try {\n      await got.get('http://rsshub.test/testRerty');\n    } catch (error) {\n      expect(error.name).toBe('HTTPError');\n    } // retries\n\n\n    expect(requestRun).toHaveBeenCalledTimes(config.requestRetry + 1);\n  });","file":"utils/got.js","skipped":false,"dir":"test"},{"name":"axios","suites":["got"],"updatePoint":{"line":38,"column":11,"index":986},"line":38,"code":"  it('axios', async () => {\n    nock('http://rsshub.test').post('/post').reply(() => [200, '{\"code\": 0}']);\n    const response1 = await got.post('http://rsshub.test/post', {\n      form: {\n        test: 1\n      }\n    });\n    expect(response1.statusCode).toBe(200);\n    expect(response1.status).toBe(200);\n    expect(response1.body).toBe('{\"code\": 0}');\n    expect(response1.data.code).toBe(0);\n  });","file":"utils/got.js","skipped":false,"dir":"test"},{"name":"timeout","suites":["got"],"updatePoint":{"line":50,"column":13,"index":1387},"line":50,"code":"  it('timeout', async () => {\n    nock('http://rsshub.test').get('/timeout').delay(600).reply(() => [200, '{\"code\": 0}']);\n    const loggerSpy = jest.spyOn(logger, 'error').mockReturnValue({});\n\n    try {\n      await got.get('http://rsshub.test/timeout');\n      throw Error('Timeout Invalid');\n    } catch (error) {\n      expect(error.name).toBe('RequestError');\n    }\n\n    expect(loggerSpy).toHaveBeenCalledWith(expect.stringContaining('http://rsshub.test/timeout'));\n    loggerSpy.mockRestore();\n  });","file":"utils/got.js","skipped":false,"dir":"test"},{"name":"md5 RSSHub","suites":["md5"],"updatePoint":{"line":4,"column":16,"index":86},"line":4,"code":"  it('md5 RSSHub', () => {\n    expect(md5('RSSHub')).toBe('3187d745ec5983413e4f0dce3900d92d');\n  });","file":"utils/md5.js","skipped":false,"dir":"test"},{"name":"s秒钟前","suites":["parseRelativeDate"],"updatePoint":{"line":20,"column":10,"index":534},"line":20,"code":"  it('s秒钟前', () => {\n    expect(+new Date(parseRelativeDate('10秒前'))).toBe(+date - 10 * second);\n  });","file":"utils/parse-date.js","skipped":false,"dir":"test"},{"name":"m分钟前","suites":["parseRelativeDate"],"updatePoint":{"line":23,"column":10,"index":637},"line":23,"code":"  it('m分钟前', () => {\n    expect(+new Date(parseRelativeDate('10分钟前'))).toBe(+date - 10 * minute);\n  });","file":"utils/parse-date.js","skipped":false,"dir":"test"},{"name":"m分鐘前","suites":["parseRelativeDate"],"updatePoint":{"line":26,"column":10,"index":741},"line":26,"code":"  it('m分鐘前', () => {\n    expect(+new Date(parseRelativeDate('10分鐘前'))).toBe(+date - 10 * minute);\n  });","file":"utils/parse-date.js","skipped":false,"dir":"test"},{"name":"m分钟后","suites":["parseRelativeDate"],"updatePoint":{"line":29,"column":10,"index":845},"line":29,"code":"  it('m分钟后', () => {\n    expect(+new Date(parseRelativeDate('10分钟后'))).toBe(+date + 10 * minute);\n  });","file":"utils/parse-date.js","skipped":false,"dir":"test"},{"name":"a minute ago","suites":["parseRelativeDate"],"updatePoint":{"line":32,"column":18,"index":957},"line":32,"code":"  it('a minute ago', () => {\n    expect(+new Date(parseRelativeDate('a minute ago'))).toBe(+date - 1 * minute);\n  });","file":"utils/parse-date.js","skipped":false,"dir":"test"},{"name":"s minutes ago","suites":["parseRelativeDate"],"updatePoint":{"line":35,"column":19,"index":1076},"line":35,"code":"  it('s minutes ago', () => {\n    expect(+new Date(parseRelativeDate('10 minutes ago'))).toBe(+date - 10 * minute);\n  });","file":"utils/parse-date.js","skipped":false,"dir":"test"},{"name":"s mins ago","suites":["parseRelativeDate"],"updatePoint":{"line":38,"column":16,"index":1195},"line":38,"code":"  it('s mins ago', () => {\n    expect(+new Date(parseRelativeDate('10 mins ago'))).toBe(+date - 10 * minute);\n  });","file":"utils/parse-date.js","skipped":false,"dir":"test"},{"name":"in s minutes","suites":["parseRelativeDate"],"updatePoint":{"line":41,"column":18,"index":1313},"line":41,"code":"  it('in s minutes', () => {\n    expect(+new Date(parseRelativeDate('in 10 minutes'))).toBe(+date + 10 * minute);\n  });","file":"utils/parse-date.js","skipped":false,"dir":"test"},{"name":"in an hour","suites":["parseRelativeDate"],"updatePoint":{"line":44,"column":16,"index":1431},"line":44,"code":"  it('in an hour', () => {\n    expect(+new Date(parseRelativeDate('in an hour'))).toBe(+date + 1 * hour);\n  });","file":"utils/parse-date.js","skipped":false,"dir":"test"},{"name":"H小时前","suites":["parseRelativeDate"],"updatePoint":{"line":47,"column":10,"index":1537},"line":47,"code":"  it('H小时前', () => {\n    expect(+new Date(parseRelativeDate('10小时前'))).toBe(+date - 10 * hour);\n  });","file":"utils/parse-date.js","skipped":false,"dir":"test"},{"name":"H个小时前","suites":["parseRelativeDate"],"updatePoint":{"line":50,"column":11,"index":1640},"line":50,"code":"  it('H个小时前', () => {\n    expect(+new Date(parseRelativeDate('10个小时前'))).toBe(+date - 10 * hour);\n  });","file":"utils/parse-date.js","skipped":false,"dir":"test"},{"name":"D天前","suites":["parseRelativeDate"],"updatePoint":{"line":53,"column":9,"index":1742},"line":53,"code":"  it('D天前', () => {\n    expect(+new Date(parseRelativeDate('10天前'))).toBe(+date - 10 * day);\n  });","file":"utils/parse-date.js","skipped":false,"dir":"test"},{"name":"W周前","suites":["parseRelativeDate"],"updatePoint":{"line":56,"column":9,"index":1841},"line":56,"code":"  it('W周前', () => {\n    expect(+new Date(parseRelativeDate('10周前'))).toBe(+date - 10 * week);\n  });","file":"utils/parse-date.js","skipped":false,"dir":"test"},{"name":"W星期前","suites":["parseRelativeDate"],"updatePoint":{"line":59,"column":10,"index":1942},"line":59,"code":"  it('W星期前', () => {\n    expect(+new Date(parseRelativeDate('10星期前'))).toBe(+date - 10 * week);\n  });","file":"utils/parse-date.js","skipped":false,"dir":"test"},{"name":"W个星期前","suites":["parseRelativeDate"],"updatePoint":{"line":62,"column":11,"index":2045},"line":62,"code":"  it('W个星期前', () => {\n    expect(+new Date(parseRelativeDate('10个星期前'))).toBe(+date - 10 * week);\n  });","file":"utils/parse-date.js","skipped":false,"dir":"test"},{"name":"M月前","suites":["parseRelativeDate"],"updatePoint":{"line":65,"column":9,"index":2147},"line":65,"code":"  it('M月前', () => {\n    expect(+new Date(parseRelativeDate('1月前'))).toBe(+date - 1 * month);\n  });","file":"utils/parse-date.js","skipped":false,"dir":"test"},{"name":"M个月前","suites":["parseRelativeDate"],"updatePoint":{"line":68,"column":10,"index":2247},"line":68,"code":"  it('M个月前', () => {\n    expect(+new Date(parseRelativeDate('1个月前'))).toBe(+date - 1 * month);\n  });","file":"utils/parse-date.js","skipped":false,"dir":"test"},{"name":"Y年前","suites":["parseRelativeDate"],"updatePoint":{"line":71,"column":9,"index":2347},"line":71,"code":"  it('Y年前', () => {\n    expect(+new Date(parseRelativeDate('1年前'))).toBe(+date - 1 * year);\n  });","file":"utils/parse-date.js","skipped":false,"dir":"test"},{"name":"Y年M个月前","suites":["parseRelativeDate"],"updatePoint":{"line":74,"column":12,"index":2448},"line":74,"code":"  it('Y年M个月前', () => {\n    expect(+new Date(parseRelativeDate('1年1个月前'))).toBe(+date - 1 * year - 1 * month);\n  });","file":"utils/parse-date.js","skipped":false,"dir":"test"},{"name":"D天H小时前","suites":["parseRelativeDate"],"updatePoint":{"line":77,"column":12,"index":2564},"line":77,"code":"  it('D天H小时前', () => {\n    expect(+new Date(parseRelativeDate('1天1小时前'))).toBe(+date - 1 * day - 1 * hour);\n  });","file":"utils/parse-date.js","skipped":false,"dir":"test"},{"name":"H小时m分钟s秒钟前","suites":["parseRelativeDate"],"updatePoint":{"line":80,"column":16,"index":2682},"line":80,"code":"  it('H小时m分钟s秒钟前', () => {\n    expect(+new Date(parseRelativeDate('1小时1分钟1秒钟前'))).toBe(+date - 1 * hour - 1 * minute - 1 * second);\n  });","file":"utils/parse-date.js","skipped":false,"dir":"test"},{"name":"H小时m分钟s秒钟后","suites":["parseRelativeDate"],"updatePoint":{"line":83,"column":16,"index":2820},"line":83,"code":"  it('H小时m分钟s秒钟后', () => {\n    expect(+new Date(parseRelativeDate('1小时1分钟1秒钟后'))).toBe(+date + 1 * hour + 1 * minute + 1 * second);\n  });","file":"utils/parse-date.js","skipped":false,"dir":"test"},{"name":"今天","suites":["parseRelativeDate"],"updatePoint":{"line":86,"column":8,"index":2950},"line":86,"code":"  it('今天', () => {\n    expect(+new Date(parseRelativeDate('今天'))).toBe(+date.setHours(0, 0, 0, 0));\n  });","file":"utils/parse-date.js","skipped":false,"dir":"test"},{"name":"Today H:m","suites":["parseRelativeDate"],"updatePoint":{"line":89,"column":15,"index":3063},"line":89,"code":"  it('Today H:m', () => {\n    expect(+new Date(parseRelativeDate('Today 08:00'))).toBe(+date + 8 * hour);\n  });","file":"utils/parse-date.js","skipped":false,"dir":"test"},{"name":"TDA H:m:s","suites":["parseRelativeDate"],"updatePoint":{"line":92,"column":15,"index":3175},"line":92,"code":"  it('TDA H:m:s', () => {\n    expect(+new Date(parseRelativeDate('TDA 08:00:00'))).toBe(+date + 8 * hour);\n  });","file":"utils/parse-date.js","skipped":false,"dir":"test"},{"name":"今天 H:m","suites":["parseRelativeDate"],"updatePoint":{"line":95,"column":12,"index":3285},"line":95,"code":"  it('今天 H:m', () => {\n    expect(+new Date(parseRelativeDate('今天 08:00'))).toBe(+date + 8 * hour);\n  });","file":"utils/parse-date.js","skipped":false,"dir":"test"},{"name":"今天H点m分","suites":["parseRelativeDate"],"updatePoint":{"line":98,"column":12,"index":3391},"line":98,"code":"  it('今天H点m分', () => {\n    expect(+new Date(parseRelativeDate('今天8点0分'))).toBe(+date + 8 * hour);\n  });","file":"utils/parse-date.js","skipped":false,"dir":"test"},{"name":"昨日H点m分s秒","suites":["parseRelativeDate"],"updatePoint":{"line":101,"column":14,"index":3497},"line":101,"code":"  it('昨日H点m分s秒', () => {\n    expect(+new Date(parseRelativeDate('昨日20时0分0秒'))).toBe(+date - 4 * hour);\n  });","file":"utils/parse-date.js","skipped":false,"dir":"test"},{"name":"前天 H:m","suites":["parseRelativeDate"],"updatePoint":{"line":104,"column":12,"index":3604},"line":104,"code":"  it('前天 H:m', () => {\n    expect(+new Date(parseRelativeDate('前天 20:00'))).toBe(+date - 1 * day - 4 * hour);\n  });","file":"utils/parse-date.js","skipped":false,"dir":"test"},{"name":"明天 H:m","suites":["parseRelativeDate"],"updatePoint":{"line":107,"column":12,"index":3720},"line":107,"code":"  it('明天 H:m', () => {\n    expect(+new Date(parseRelativeDate('明天 20:00'))).toBe(+date + 1 * day + 20 * hour);\n  });","file":"utils/parse-date.js","skipped":false,"dir":"test"},{"name":"星期几 h:m","suites":["parseRelativeDate"],"updatePoint":{"line":110,"column":13,"index":3838},"line":110,"code":"  it('星期几 h:m', () => {\n    expect(+new Date(parseRelativeDate('星期一 8:00'))).toBe(weekday(1) + 8 * hour);\n  });","file":"utils/parse-date.js","skipped":false,"dir":"test"},{"name":"周几 h:m","suites":["parseRelativeDate"],"updatePoint":{"line":113,"column":12,"index":3949},"line":113,"code":"  it('周几 h:m', () => {\n    expect(+new Date(parseRelativeDate('周二 8:00'))).toBe(weekday(2) + 8 * hour);\n  });","file":"utils/parse-date.js","skipped":false,"dir":"test"},{"name":"星期天 h:m","suites":["parseRelativeDate"],"updatePoint":{"line":116,"column":13,"index":4060},"line":116,"code":"  it('星期天 h:m', () => {\n    expect(+new Date(parseRelativeDate('星期天 8:00'))).toBe(weekday(7) + 8 * hour);\n  });","file":"utils/parse-date.js","skipped":false,"dir":"test"},{"name":"Invalid","suites":["parseRelativeDate"],"updatePoint":{"line":119,"column":13,"index":4172},"line":119,"code":"  it('Invalid', () => {\n    expect(parseRelativeDate('RSSHub')).toBe('RSSHub');\n  });","file":"utils/parse-date.js","skipped":false,"dir":"test"},{"name":"puppeteer run","suites":["puppeteer"],"updatePoint":{"line":6,"column":19,"index":154},"line":6,"code":"  it('puppeteer run', async () => {\n    const browser = await puppeteer();\n    const page = await browser.newPage();\n    await page.goto('https://www.google.com', {\n      waitUntil: 'domcontentloaded'\n    }); // eslint-disable-next-line no-undef\n\n    const html = await page.evaluate(() => document.body.innerHTML);\n    expect(html.length).toBeGreaterThan(0);\n    expect((await browser.process()).signalCode).toBe(null);\n    await wait(31 * 1000);\n    expect((await browser.process()).signalCode).toBe('SIGKILL');\n  }, 40000);","file":"utils/puppeteer.js","skipped":false,"dir":"test"},{"name":"chrome should not include headlesschrome","suites":["rand-user-agent"],"updatePoint":{"line":16,"column":46,"index":372},"line":16,"code":"  it('chrome should not include headlesschrome', () => {\n    const uaArr = Array(100).fill().map(() => randUserAgent({\n      browser: 'chrome',\n      os: 'windows'\n    }));\n    const match = uaArr.find(e => e.includes('Chrome-Lighthouse') || e.includes('HeadlessChrome') ? true : false);\n    expect(match).toBeFalsy();\n  });","file":"utils/rand-user-agent.js","skipped":false,"dir":"test"},{"name":"should has default random ua","suites":["rand-user-agent"],"updatePoint":{"line":24,"column":34,"index":685},"line":24,"code":"  it('should has default random ua', async () => {\n    nock('https://rsshub.test').get('/test').reply(function () {\n      expect(this.req.headers['user-agent']).toBe(config.ua);\n      expect(this.req.headers['user-agent']).not.toBe(mobileUa);\n      expect(this.req.headers['user-agent']).not.toBe('Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/65.0.3325.181 Safari/537.36');\n      return [200, ''];\n    });\n    await got('https://rsshub.test/test');\n  });","file":"utils/rand-user-agent.js","skipped":false,"dir":"test"},{"name":"should match ua configurated","suites":["rand-user-agent"],"updatePoint":{"line":33,"column":34,"index":1189},"line":33,"code":"  it('should match ua configurated', async () => {\n    const response1 = await got('https://www.whatsmyua.info/api/v1/ua');\n    expect(response1.data[0].ua.rawUa).toBe(config.ua);\n    const response2 = await got('https://www.whatsmyua.info/api/v1/ua', {\n      headers: {\n        'user-agent': mobileUa\n      }\n    });\n    expect(response2.data[0].ua.rawUa).toBe(mobileUa);\n    expect(response2.data[0].ua.rawUa).not.toBe(config.ua);\n  });","file":"utils/rand-user-agent.js","skipped":false,"dir":"test"},{"name":"headers","suites":["got"],"updatePoint":{"line":47,"column":13,"index":1057},"line":47,"code":"  it('headers', async () => {\n    nock(/rsshub\\.test/).get(/.*/).times(3).reply(function () {\n      expect(this.req.headers.referer).toBe('http://api.rsshub.test');\n      expect(this.req.headers.host).toBe('api.rsshub.test');\n      return [200, simpleResponse];\n    });\n    await got.get('http://api.rsshub.test/test');\n    await got.get('http://api.rsshub.test');\n    await parser.parseURL('http://api.rsshub.test/test');\n  });","file":"utils/request-wrapper.js","skipped":false,"dir":"test"},{"name":"proxy-uri socks","suites":["got"],"updatePoint":{"line":57,"column":21,"index":1494},"line":57,"code":"  it('proxy-uri socks', async () => {\n    process.env.PROXY_URI = 'socks5://user:pass@rsshub.proxy:2333';\n    jest.resetModules();\n\n    require('../../lib/utils/request-wrapper');\n\n    check = request => {\n      expect(request.agent.constructor.name).toBe('SocksProxyAgent');\n      expect(request.agent.proxy.host).toBe('rsshub.proxy');\n      expect(request.agent.proxy.port).toBe(2333);\n    };\n\n    nock(/rsshub\\.test/).get('/proxy').times(2).reply(200, simpleResponse);\n    await got.get('http://rsshub.test/proxy');\n    await parser.parseURL('http://rsshub.test/proxy');\n  });","file":"utils/request-wrapper.js","skipped":false,"dir":"test"},{"name":"proxy-uri http","suites":["got"],"updatePoint":{"line":73,"column":20,"index":2073},"line":73,"code":"  it('proxy-uri http', async () => {\n    process.env.PROXY_URI = 'http://user:pass@rsshub.proxy:2333';\n    jest.resetModules();\n\n    require('../../lib/utils/request-wrapper');\n\n    check = request => {\n      expect(request.agent.constructor.name).toBe('HttpsProxyAgent');\n      expect(request.agent.proxy.auth).toBe('user:pass');\n      expect(request.agent.proxy.host).toBe('rsshub.proxy');\n      expect(request.agent.proxy.port).toBe(2333);\n    };\n\n    nock(/rsshub\\.test/).get('/proxy').times(2).reply(200, simpleResponse);\n    await got.get('http://rsshub.test/proxy');\n    await parser.parseURL('http://rsshub.test/proxy');\n  });","file":"utils/request-wrapper.js","skipped":false,"dir":"test"},{"name":"proxy-uri https","suites":["got"],"updatePoint":{"line":90,"column":21,"index":2709},"line":90,"code":"  it('proxy-uri https', async () => {\n    process.env.PROXY_URI = 'https://rsshub.proxy:2333';\n    jest.resetModules();\n\n    require('../../lib/utils/request-wrapper');\n\n    check = request => {\n      expect(request.agent.constructor.name).toBe('HttpsProxyAgent');\n      expect(request.agent.proxy.host).toBe('rsshub.proxy');\n      expect(request.agent.proxy.port).toBe(2333);\n    };\n\n    nock(/rsshub\\.test/).get('/proxy').times(2).reply(200, simpleResponse);\n    await got.get('http://rsshub.test/proxy');\n    await parser.parseURL('http://rsshub.test/proxy');\n  });","file":"utils/request-wrapper.js","skipped":false,"dir":"test"},{"name":"proxy socks","suites":["got"],"updatePoint":{"line":106,"column":17,"index":3274},"line":106,"code":"  it('proxy socks', async () => {\n    process.env.PROXY_PROTOCOL = 'socks';\n    process.env.PROXY_HOST = 'rsshub.proxy';\n    process.env.PROXY_PORT = '2333';\n    jest.resetModules();\n\n    require('../../lib/utils/request-wrapper');\n\n    check = request => {\n      expect(request.agent.constructor.name).toBe('SocksProxyAgent');\n      expect(request.agent.proxy.host).toBe('rsshub.proxy');\n      expect(request.agent.proxy.port).toBe(2333);\n    };\n\n    nock(/rsshub\\.test/).get('/proxy').times(2).reply(200, simpleResponse);\n    await got.get('http://rsshub.test/proxy');\n    await parser.parseURL('http://rsshub.test/proxy');\n  });","file":"utils/request-wrapper.js","skipped":false,"dir":"test"},{"name":"proxy http","suites":["got"],"updatePoint":{"line":124,"column":16,"index":3905},"line":124,"code":"  it('proxy http', async () => {\n    process.env.PROXY_PROTOCOL = 'http';\n    process.env.PROXY_HOST = 'rsshub.proxy';\n    process.env.PROXY_PORT = '2333';\n    jest.resetModules();\n\n    require('../../lib/utils/request-wrapper');\n\n    check = request => {\n      expect(request.agent.constructor.name).toBe('TunnelingAgent');\n      expect(request.agent.options.proxy.host).toBe('rsshub.proxy');\n      expect(request.agent.options.proxy.port).toBe(2333);\n    };\n\n    nock(/rsshub\\.test/).get('/proxy').times(2).reply(200, simpleResponse);\n    await got.get('http://rsshub.test/proxy');\n    await parser.parseURL('http://rsshub.test/proxy');\n  });","file":"utils/request-wrapper.js","skipped":false,"dir":"test"},{"name":"proxy https","suites":["got"],"updatePoint":{"line":142,"column":17,"index":4551},"line":142,"code":"  it('proxy https', async () => {\n    process.env.PROXY_PROTOCOL = 'https';\n    process.env.PROXY_HOST = 'rsshub.proxy';\n    process.env.PROXY_PORT = '2333';\n    jest.resetModules();\n\n    require('../../lib/utils/request-wrapper');\n\n    check = request => {\n      expect(request.agent.constructor.name).toBe('TunnelingAgent');\n      expect(request.agent.options.proxy.host).toBe('rsshub.proxy');\n      expect(request.agent.options.proxy.port).toBe(2333);\n    };\n\n    nock(/rsshub\\.test/).get('/proxy').times(2).reply(200, simpleResponse);\n    await got.get('http://rsshub.test/proxy');\n    await parser.parseURL('http://rsshub.test/proxy');\n  });","file":"utils/request-wrapper.js","skipped":false,"dir":"test"},{"name":"auth","suites":["got"],"updatePoint":{"line":160,"column":10,"index":5191},"line":160,"code":"  it('auth', async () => {\n    process.env.PROXY_AUTH = 'testtest';\n    process.env.PROXY_PROTOCOL = 'socks';\n    process.env.PROXY_HOST = 'rsshub.proxy';\n    process.env.PROXY_PORT = '2333';\n    jest.resetModules();\n\n    require('../../lib/utils/request-wrapper');\n\n    nock(/rsshub\\.test/).get('/auth').times(2).reply(function () {\n      expect(this.req.headers['proxy-authorization']).toBe('Basic testtest');\n      return [200, simpleResponse];\n    });\n    await got.get('http://rsshub.test/auth');\n    await parser.parseURL('http://rsshub.test/auth');\n  });","file":"utils/request-wrapper.js","skipped":false,"dir":"test"},{"name":"url_regex","suites":["got"],"updatePoint":{"line":176,"column":15,"index":5758},"line":176,"code":"  it('url_regex', async () => {\n    process.env.PROXY_URL_REGEX = 'url_regex';\n    process.env.PROXY_PROTOCOL = 'socks';\n    process.env.PROXY_HOST = 'rsshub.proxy';\n    process.env.PROXY_PORT = '2333';\n    jest.resetModules();\n\n    require('../../lib/utils/request-wrapper');\n\n    check = request => {\n      if (request.path === '/url_regex') {\n        expect(request.agent.constructor.name).toBe('SocksProxyAgent');\n        expect(request.agent.proxy.host).toBe('rsshub.proxy');\n        expect(request.agent.proxy.port).toBe(2333);\n      } else if (request.path === '/proxy') {\n        expect(request.agent).toBe(undefined);\n      }\n    };\n\n    nock(/rsshub\\.test/).get('/url_regex').times(2).reply(() => [200, simpleResponse]);\n    nock(/rsshub\\.test/).get('/proxy').times(2).reply(() => [200, simpleResponse]);\n    await got.get('http://rsshub.test/url_regex');\n    await parser.parseURL('http://rsshub.test/url_regex');\n    await got.get('http://rsshub.test/proxy');\n    await parser.parseURL('http://rsshub.test/proxy');\n  });","file":"utils/request-wrapper.js","skipped":false,"dir":"test"},{"name":"headers","suites":["got"],"updatePoint":{"line":8,"column":13,"index":175},"line":8,"code":"  it('headers', async () => {\n    nock('http://rsshub.test').get('/test').reply(function () {\n      expect(this.req.headers['user-agent']).toBe(config.ua);\n      return [200, '<rss version=\"2.0\"><channel><item></item></channel></rss>'];\n    });\n    await parser.parseURL('http://rsshub.test/test');\n  });","file":"utils/rss-parser.js","skipped":false,"dir":"test"},{"name":"wait 0.1 second","suites":["wait"],"updatePoint":{"line":4,"column":21,"index":94},"line":4,"code":"  it('wait 0.1 second', async () => {\n    const startDate = new Date();\n    await wait(0.1 * 1000);\n    const endDate = new Date();\n    expect(endDate - startDate).toBeGreaterThan(90);\n    expect(endDate - startDate).toBeLessThan(150);\n  });","file":"utils/wait.js","skipped":false,"dir":"test"},{"name":"fixArticleContent","suites":["wechat-mp"],"updatePoint":{"line":29,"column":23,"index":710},"line":29,"code":"  it('fixArticleContent', () => {\n    const divHeader = '<div class=\"rich_media_content \" id=\"js_content\">';\n    const divFooter = '</div>';\n    const htmlSection = '<section>test</section>' + '<section><p>test</p></section>' + '<section><div>test</div></section>' + '<section><section><section>test</section></section></section>' + '<div><section><p>test</p></section></div>' + '<p>test</p>' + '<div><p>test</p></div>' + '<script>const test = \"test\"</script>';\n    const expectedHtmlSection = '<p>test</p>' + '<div><p>test</p></div>' + '<div><div>test</div></div>' + '<div><div><p>test</p></div></div>' + '<div><div><p>test</p></div></div>' + '<p>test</p>' + '<div><p>test</p></div>';\n    let $ = cheerio.load(divHeader + htmlSection + divFooter);\n    expect(fixArticleContent(htmlSection)).toBe(expectedHtmlSection);\n    expect(fixArticleContent($('div#js_content.rich_media_content'))).toBe(expectedHtmlSection);\n    const htmlImg = '<img alt=\"test\" data-src=\"http://rsshub.test/test.jpg\" src=\"http://rsshub.test/test.jpg\">' + '<img alt=\"test\" data-src=\"http://rsshub.test/test.jpg\">' + '<img alt=\"test\" src=\"http://rsshub.test/test.jpg\">';\n    const expectedHtmlImg = new Array(3 + 1).join('<img alt=\"test\" src=\"http://rsshub.test/test.jpg\">');\n    $ = cheerio.load(divHeader + htmlImg + divFooter);\n    expect(fixArticleContent(htmlImg)).toBe(expectedHtmlImg);\n    expect(fixArticleContent($('div#js_content.rich_media_content'))).toBe(expectedHtmlImg);\n    expect(fixArticleContent(htmlImg, true)).toBe(htmlImg);\n    expect(fixArticleContent($('div#js_content.rich_media_content'), true)).toBe(htmlImg);\n    expect(fixArticleContent('')).toBe('');\n    expect(fixArticleContent(null)).toBe('');\n    expect(fixArticleContent(undefined)).toBe('');\n    expect(fixArticleContent($('div#something_not_in.the_document_tree'))).toBe('');\n  });","file":"utils/wechat-mp.js","skipped":false,"dir":"test"},{"name":"normalizeUrl","suites":["wechat-mp"],"updatePoint":{"line":49,"column":18,"index":2547},"line":49,"code":"  it('normalizeUrl', () => {\n    const mpRoot = 'https://mp.weixin.qq.com';\n    const mpArticleRoot = mpRoot + '/s';\n    const shortUrl = mpArticleRoot + '/-rwvHhqYbKGCVFeXRNknYQ';\n    const shortUrlWithQueryAndHash = shortUrl + '?foo=bar#baz';\n    expect(normalizeUrl(shortUrlWithQueryAndHash)).toBe(shortUrl);\n    const longUrlShortened = mpArticleRoot + '?__biz=MzA4MjQxNjQzMA==' + '&mid=2768628484' + '&idx=1' + '&sn=93dcc54ce807f7793739ee2fd2377056';\n    const longUrl = longUrlShortened + '&chksm=bf774d458800c453c94cae866093680e6cac6a1f02cab7e82683f82f35f7f487e2daa1dcde20' + '&scene=75' + '#wechat_redirect';\n    expect(normalizeUrl(longUrl)).toBe(longUrlShortened);\n    const temporaryUrlShortened = mpArticleRoot + '?src=11' + '&timestamp=1620536401' + '&ver=3057' + '&signature=vCDI8FQcumnNGv4ScvFP-swQRlirdQSqTfjS8m-oFzgHMkqlNM3ljzjSevcjXLC-z-n0RzzMkNt-lwKMUaskfaqFFrpYZNq4ZCKkFFGj8L*KvH780aEUBJFvWTGmMGLC';\n    const temporaryUrl = temporaryUrlShortened + '&new=1#foo';\n    expect(normalizeUrl(temporaryUrl)).toBe(temporaryUrlShortened);\n    const somethingElse = mpRoot + '/something/else?__biz=foo&mid=bar&idx=baz&sn=qux';\n    const somethingElseWithHash = somethingElse + '#foo';\n    expect(normalizeUrl(somethingElseWithHash.replace('https://', 'http://'))).toBe(somethingElse);\n    const notWechatMp = 'https://im.not.wechat.mp/and/an/error/is/expected';\n    expect(() => normalizeUrl(notWechatMp)).toThrow();\n    expect(normalizeUrl(notWechatMp, true)).toBe(notWechatMp);\n  });","file":"utils/wechat-mp.js","skipped":false,"dir":"test"},{"name":"fetchArticle_&_finishArticleItem","suites":["wechat-mp"],"updatePoint":{"line":68,"column":38,"index":4064},"line":68,"code":"  it('fetchArticle_&_finishArticleItem', async () => {\n    const ct = 1636626300;\n    const exampleMpArticlePage = '\\n' + '<meta name=\"description\" content=\"summary\" />\\n' + '<meta name=\"author\" content=\"author\" />\\n' + '<meta property=\"og:title\" content=\"title\" />\\n' + '<meta property=\"twitter:card\" content=\"summary\" />\\n' + '<div class=\"rich_media_content\" id=\"js_content\" style=\"visibility: hidden;\">description</div>\\n' + '<div class=\"profile_inner\"><strong class=\"profile_nickname\">mpName</strong></div>\\n' + '<script type=\"text/javascript\" nonce=\"000000000\">\\n' + 'var appmsg_type = \"9\";\\n' + `var ct = \"${ct}\";\\n` + '</script>';\n    nock('https://mp.weixin.qq.com').get('/rsshub_test/wechatMp_fetchArticle').reply(() => [200, exampleMpArticlePage]);\n    const httpsUrl = 'https://mp.weixin.qq.com/rsshub_test/wechatMp_fetchArticle';\n    const httpUrl = httpsUrl.replace(/^https:\\/\\//, 'http://');\n    const expectedItem = {\n      title: 'title',\n      summary: 'summary',\n      author: 'author',\n      description: 'description',\n      mpName: 'mpName',\n      link: httpsUrl\n    };\n    const expectedDate = new Date(ct * 1000);\n    const fetchArticleItem = await fetchArticle(ctx, httpUrl);\n    expect(compareDate(fetchArticleItem.pubDate, expectedDate)).toBe(true);\n    delete fetchArticleItem.pubDate;\n    expect(fetchArticleItem).toEqual(expectedItem);\n    delete expectedItem.mpName;\n    const finishedArticleItem = await finishArticleItem(ctx, {\n      link: httpUrl\n    });\n    expect(compareDate(finishedArticleItem.pubDate, expectedDate)).toBe(true);\n    delete finishedArticleItem.pubDate;\n    expect(finishedArticleItem).toEqual(expectedItem);\n  });","file":"utils/wechat-mp.js","skipped":false,"dir":"test"}]}