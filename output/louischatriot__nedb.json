{"repo":"louischatriot/nedb","url":"https://github.com/louischatriot/nedb","branch":"master","configs":[{"package":"nedb","lang":"js","dir":"test","framework":"mocha","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"Without query, an empty query or a simple query and no skip or limit","suites":["Cursor","Without sorting"],"updatePoint":{"line":62,"column":76,"index":1679},"line":62,"code":"    it('Without query, an empty query or a simple query and no skip or limit', function (done) {\n      async.waterfall([function (cb) {\n        var cursor = new Cursor(d);\n        cursor.exec(function (err, docs) {\n          assert.isNull(err);\n          docs.length.should.equal(5);\n          _.filter(docs, function (doc) {\n            return doc.age === 5;\n          })[0].age.should.equal(5);\n          _.filter(docs, function (doc) {\n            return doc.age === 57;\n          })[0].age.should.equal(57);\n          _.filter(docs, function (doc) {\n            return doc.age === 52;\n          })[0].age.should.equal(52);\n          _.filter(docs, function (doc) {\n            return doc.age === 23;\n          })[0].age.should.equal(23);\n          _.filter(docs, function (doc) {\n            return doc.age === 89;\n          })[0].age.should.equal(89);\n          cb();\n        });\n      }, function (cb) {\n        var cursor = new Cursor(d, {});\n        cursor.exec(function (err, docs) {\n          assert.isNull(err);\n          docs.length.should.equal(5);\n          _.filter(docs, function (doc) {\n            return doc.age === 5;\n          })[0].age.should.equal(5);\n          _.filter(docs, function (doc) {\n            return doc.age === 57;\n          })[0].age.should.equal(57);\n          _.filter(docs, function (doc) {\n            return doc.age === 52;\n          })[0].age.should.equal(52);\n          _.filter(docs, function (doc) {\n            return doc.age === 23;\n          })[0].age.should.equal(23);\n          _.filter(docs, function (doc) {\n            return doc.age === 89;\n          })[0].age.should.equal(89);\n          cb();\n        });\n      }, function (cb) {\n        var cursor = new Cursor(d, {\n          age: {\n            $gt: 23\n          }\n        });\n        cursor.exec(function (err, docs) {\n          assert.isNull(err);\n          docs.length.should.equal(3);\n          _.filter(docs, function (doc) {\n            return doc.age === 57;\n          })[0].age.should.equal(57);\n          _.filter(docs, function (doc) {\n            return doc.age === 52;\n          })[0].age.should.equal(52);\n          _.filter(docs, function (doc) {\n            return doc.age === 89;\n          })[0].age.should.equal(89);\n          cb();\n        });\n      }], done);\n    });","file":"cursor.test.js","skipped":false,"dir":"test"},{"name":"With an empty collection","suites":["Cursor","Without sorting"],"updatePoint":{"line":129,"column":32,"index":3931},"line":129,"code":"    it('With an empty collection', function (done) {\n      async.waterfall([function (cb) {\n        d.remove({}, {\n          multi: true\n        }, function (err) {\n          return cb(err);\n        });\n      }, function (cb) {\n        var cursor = new Cursor(d);\n        cursor.exec(function (err, docs) {\n          assert.isNull(err);\n          docs.length.should.equal(0);\n          cb();\n        });\n      }], done);\n    });","file":"cursor.test.js","skipped":false,"dir":"test"},{"name":"With a limit","suites":["Cursor","Without sorting"],"updatePoint":{"line":145,"column":20,"index":4348},"line":145,"code":"    it('With a limit', function (done) {\n      var cursor = new Cursor(d);\n      cursor.limit(3);\n      cursor.exec(function (err, docs) {\n        assert.isNull(err);\n        docs.length.should.equal(3);\n        // No way to predict which results are returned of course ...\n        done();\n      });\n    });","file":"cursor.test.js","skipped":false,"dir":"test"},{"name":"With a skip","suites":["Cursor","Without sorting"],"updatePoint":{"line":155,"column":19,"index":4655},"line":155,"code":"    it('With a skip', function (done) {\n      var cursor = new Cursor(d);\n      cursor.skip(2).exec(function (err, docs) {\n        assert.isNull(err);\n        docs.length.should.equal(3);\n        // No way to predict which results are returned of course ...\n        done();\n      });\n    });","file":"cursor.test.js","skipped":false,"dir":"test"},{"name":"With a limit and a skip and method chaining","suites":["Cursor","Without sorting"],"updatePoint":{"line":164,"column":51,"index":4979},"line":164,"code":"    it('With a limit and a skip and method chaining', function (done) {\n      var cursor = new Cursor(d);\n      cursor.limit(4).skip(3); // Only way to know that the right number of results was skipped is if limit + skip > number of results\n      cursor.exec(function (err, docs) {\n        assert.isNull(err);\n        docs.length.should.equal(2);\n        // No way to predict which results are returned of course ...\n        done();\n      });\n    });","file":"cursor.test.js","skipped":false,"dir":"test"},{"name":"Using one sort","suites":["Cursor","Sorting of the results"],"updatePoint":{"line":201,"column":22,"index":6112},"line":201,"code":"    it('Using one sort', function (done) {\n      var cursor, i;\n      cursor = new Cursor(d, {});\n      cursor.sort({\n        age: 1\n      });\n      cursor.exec(function (err, docs) {\n        assert.isNull(err);\n        // Results are in ascending order\n        for (i = 0; i < docs.length - 1; i += 1) {\n          assert(docs[i].age < docs[i + 1].age);\n        }\n        cursor.sort({\n          age: -1\n        });\n        cursor.exec(function (err, docs) {\n          assert.isNull(err);\n          // Results are in descending order\n          for (i = 0; i < docs.length - 1; i += 1) {\n            assert(docs[i].age > docs[i + 1].age);\n          }\n          done();\n        });\n      });\n    });","file":"cursor.test.js","skipped":false,"dir":"test"},{"name":"Sorting strings with custom string comparison function","suites":["Cursor","Sorting of the results"],"updatePoint":{"line":226,"column":62,"index":6850},"line":226,"code":"    it(\"Sorting strings with custom string comparison function\", function (done) {\n      var db = new Datastore({\n        inMemoryOnly: true,\n        autoload: true,\n        compareStrings: function (a, b) {\n          return a.length - b.length;\n        }\n      });\n      db.insert({\n        name: 'alpha'\n      });\n      db.insert({\n        name: 'charlie'\n      });\n      db.insert({\n        name: 'zulu'\n      });\n      db.find({}).sort({\n        name: 1\n      }).exec(function (err, docs) {\n        _.pluck(docs, 'name')[0].should.equal('zulu');\n        _.pluck(docs, 'name')[1].should.equal('alpha');\n        _.pluck(docs, 'name')[2].should.equal('charlie');\n        delete db.compareStrings;\n        db.find({}).sort({\n          name: 1\n        }).exec(function (err, docs) {\n          _.pluck(docs, 'name')[0].should.equal('alpha');\n          _.pluck(docs, 'name')[1].should.equal('charlie');\n          _.pluck(docs, 'name')[2].should.equal('zulu');\n          done();\n        });\n      });\n    });","file":"cursor.test.js","skipped":false,"dir":"test"},{"name":"With an empty collection","suites":["Cursor","Sorting of the results"],"updatePoint":{"line":260,"column":32,"index":7825},"line":260,"code":"    it('With an empty collection', function (done) {\n      async.waterfall([function (cb) {\n        d.remove({}, {\n          multi: true\n        }, function (err) {\n          return cb(err);\n        });\n      }, function (cb) {\n        var cursor = new Cursor(d);\n        cursor.sort({\n          age: 1\n        });\n        cursor.exec(function (err, docs) {\n          assert.isNull(err);\n          docs.length.should.equal(0);\n          cb();\n        });\n      }], done);\n    });","file":"cursor.test.js","skipped":false,"dir":"test"},{"name":"Ability to chain sorting and exec","suites":["Cursor","Sorting of the results"],"updatePoint":{"line":279,"column":41,"index":8314},"line":279,"code":"    it('Ability to chain sorting and exec', function (done) {\n      var i;\n      async.waterfall([function (cb) {\n        var cursor = new Cursor(d);\n        cursor.sort({\n          age: 1\n        }).exec(function (err, docs) {\n          assert.isNull(err);\n          // Results are in ascending order\n          for (i = 0; i < docs.length - 1; i += 1) {\n            assert(docs[i].age < docs[i + 1].age);\n          }\n          cb();\n        });\n      }, function (cb) {\n        var cursor = new Cursor(d);\n        cursor.sort({\n          age: -1\n        }).exec(function (err, docs) {\n          assert.isNull(err);\n          // Results are in descending order\n          for (i = 0; i < docs.length - 1; i += 1) {\n            assert(docs[i].age > docs[i + 1].age);\n          }\n          cb();\n        });\n      }], done);\n    });","file":"cursor.test.js","skipped":false,"dir":"test"},{"name":"Using limit and sort","suites":["Cursor","Sorting of the results"],"updatePoint":{"line":307,"column":28,"index":9131},"line":307,"code":"    it('Using limit and sort', function (done) {\n      var i;\n      async.waterfall([function (cb) {\n        var cursor = new Cursor(d);\n        cursor.sort({\n          age: 1\n        }).limit(3).exec(function (err, docs) {\n          assert.isNull(err);\n          docs.length.should.equal(3);\n          docs[0].age.should.equal(5);\n          docs[1].age.should.equal(23);\n          docs[2].age.should.equal(52);\n          cb();\n        });\n      }, function (cb) {\n        var cursor = new Cursor(d);\n        cursor.sort({\n          age: -1\n        }).limit(2).exec(function (err, docs) {\n          assert.isNull(err);\n          docs.length.should.equal(2);\n          docs[0].age.should.equal(89);\n          docs[1].age.should.equal(57);\n          cb();\n        });\n      }], done);\n    });","file":"cursor.test.js","skipped":false,"dir":"test"},{"name":"Using a limit higher than total number of docs shouldnt cause an error","suites":["Cursor","Sorting of the results"],"updatePoint":{"line":334,"column":78,"index":9972},"line":334,"code":"    it('Using a limit higher than total number of docs shouldnt cause an error', function (done) {\n      var i;\n      async.waterfall([function (cb) {\n        var cursor = new Cursor(d);\n        cursor.sort({\n          age: 1\n        }).limit(7).exec(function (err, docs) {\n          assert.isNull(err);\n          docs.length.should.equal(5);\n          docs[0].age.should.equal(5);\n          docs[1].age.should.equal(23);\n          docs[2].age.should.equal(52);\n          docs[3].age.should.equal(57);\n          docs[4].age.should.equal(89);\n          cb();\n        });\n      }], done);\n    });","file":"cursor.test.js","skipped":false,"dir":"test"},{"name":"Using limit and skip with sort","suites":["Cursor","Sorting of the results"],"updatePoint":{"line":352,"column":38,"index":10527},"line":352,"code":"    it('Using limit and skip with sort', function (done) {\n      var i;\n      async.waterfall([function (cb) {\n        var cursor = new Cursor(d);\n        cursor.sort({\n          age: 1\n        }).limit(1).skip(2).exec(function (err, docs) {\n          assert.isNull(err);\n          docs.length.should.equal(1);\n          docs[0].age.should.equal(52);\n          cb();\n        });\n      }, function (cb) {\n        var cursor = new Cursor(d);\n        cursor.sort({\n          age: 1\n        }).limit(3).skip(1).exec(function (err, docs) {\n          assert.isNull(err);\n          docs.length.should.equal(3);\n          docs[0].age.should.equal(23);\n          docs[1].age.should.equal(52);\n          docs[2].age.should.equal(57);\n          cb();\n        });\n      }, function (cb) {\n        var cursor = new Cursor(d);\n        cursor.sort({\n          age: -1\n        }).limit(2).skip(2).exec(function (err, docs) {\n          assert.isNull(err);\n          docs.length.should.equal(2);\n          docs[0].age.should.equal(52);\n          docs[1].age.should.equal(23);\n          cb();\n        });\n      }], done);\n    });","file":"cursor.test.js","skipped":false,"dir":"test"},{"name":"Using too big a limit and a skip with sort","suites":["Cursor","Sorting of the results"],"updatePoint":{"line":389,"column":50,"index":11650},"line":389,"code":"    it('Using too big a limit and a skip with sort', function (done) {\n      var i;\n      async.waterfall([function (cb) {\n        var cursor = new Cursor(d);\n        cursor.sort({\n          age: 1\n        }).limit(8).skip(2).exec(function (err, docs) {\n          assert.isNull(err);\n          docs.length.should.equal(3);\n          docs[0].age.should.equal(52);\n          docs[1].age.should.equal(57);\n          docs[2].age.should.equal(89);\n          cb();\n        });\n      }], done);\n    });","file":"cursor.test.js","skipped":false,"dir":"test"},{"name":"Using too big a skip with sort should return no result","suites":["Cursor","Sorting of the results"],"updatePoint":{"line":405,"column":62,"index":12158},"line":405,"code":"    it('Using too big a skip with sort should return no result', function (done) {\n      var i;\n      async.waterfall([function (cb) {\n        var cursor = new Cursor(d);\n        cursor.sort({\n          age: 1\n        }).skip(5).exec(function (err, docs) {\n          assert.isNull(err);\n          docs.length.should.equal(0);\n          cb();\n        });\n      }, function (cb) {\n        var cursor = new Cursor(d);\n        cursor.sort({\n          age: 1\n        }).skip(7).exec(function (err, docs) {\n          assert.isNull(err);\n          docs.length.should.equal(0);\n          cb();\n        });\n      }, function (cb) {\n        var cursor = new Cursor(d);\n        cursor.sort({\n          age: 1\n        }).limit(3).skip(7).exec(function (err, docs) {\n          assert.isNull(err);\n          docs.length.should.equal(0);\n          cb();\n        });\n      }, function (cb) {\n        var cursor = new Cursor(d);\n        cursor.sort({\n          age: 1\n        }).limit(6).skip(7).exec(function (err, docs) {\n          assert.isNull(err);\n          docs.length.should.equal(0);\n          cb();\n        });\n      }], done);\n    });","file":"cursor.test.js","skipped":false,"dir":"test"},{"name":"Sorting strings","suites":["Cursor","Sorting of the results"],"updatePoint":{"line":445,"column":23,"index":13248},"line":445,"code":"    it('Sorting strings', function (done) {\n      async.waterfall([function (cb) {\n        d.remove({}, {\n          multi: true\n        }, function (err) {\n          if (err) {\n            return cb(err);\n          }\n          d.insert({\n            name: 'jako'\n          }, function () {\n            d.insert({\n              name: 'jakeb'\n            }, function () {\n              d.insert({\n                name: 'sue'\n              }, function () {\n                return cb();\n              });\n            });\n          });\n        });\n      }, function (cb) {\n        var cursor = new Cursor(d, {});\n        cursor.sort({\n          name: 1\n        }).exec(function (err, docs) {\n          docs.length.should.equal(3);\n          docs[0].name.should.equal('jakeb');\n          docs[1].name.should.equal('jako');\n          docs[2].name.should.equal('sue');\n          return cb();\n        });\n      }, function (cb) {\n        var cursor = new Cursor(d, {});\n        cursor.sort({\n          name: -1\n        }).exec(function (err, docs) {\n          docs.length.should.equal(3);\n          docs[0].name.should.equal('sue');\n          docs[1].name.should.equal('jako');\n          docs[2].name.should.equal('jakeb');\n          return cb();\n        });\n      }], done);\n    });","file":"cursor.test.js","skipped":false,"dir":"test"},{"name":"Sorting nested fields with dates","suites":["Cursor","Sorting of the results"],"updatePoint":{"line":491,"column":40,"index":14540},"line":491,"code":"    it('Sorting nested fields with dates', function (done) {\n      var doc1, doc2, doc3;\n      async.waterfall([function (cb) {\n        d.remove({}, {\n          multi: true\n        }, function (err) {\n          if (err) {\n            return cb(err);\n          }\n          d.insert({\n            event: {\n              recorded: new Date(400)\n            }\n          }, function (err, _doc1) {\n            doc1 = _doc1;\n            d.insert({\n              event: {\n                recorded: new Date(60000)\n              }\n            }, function (err, _doc2) {\n              doc2 = _doc2;\n              d.insert({\n                event: {\n                  recorded: new Date(32)\n                }\n              }, function (err, _doc3) {\n                doc3 = _doc3;\n                return cb();\n              });\n            });\n          });\n        });\n      }, function (cb) {\n        var cursor = new Cursor(d, {});\n        cursor.sort({\n          \"event.recorded\": 1\n        }).exec(function (err, docs) {\n          docs.length.should.equal(3);\n          docs[0]._id.should.equal(doc3._id);\n          docs[1]._id.should.equal(doc1._id);\n          docs[2]._id.should.equal(doc2._id);\n          return cb();\n        });\n      }, function (cb) {\n        var cursor = new Cursor(d, {});\n        cursor.sort({\n          \"event.recorded\": -1\n        }).exec(function (err, docs) {\n          docs.length.should.equal(3);\n          docs[0]._id.should.equal(doc2._id);\n          docs[1]._id.should.equal(doc1._id);\n          docs[2]._id.should.equal(doc3._id);\n          return cb();\n        });\n      }], done);\n    });","file":"cursor.test.js","skipped":false,"dir":"test"},{"name":"Sorting when some fields are undefined","suites":["Cursor","Sorting of the results"],"updatePoint":{"line":547,"column":46,"index":16167},"line":547,"code":"    it('Sorting when some fields are undefined', function (done) {\n      async.waterfall([function (cb) {\n        d.remove({}, {\n          multi: true\n        }, function (err) {\n          if (err) {\n            return cb(err);\n          }\n          d.insert({\n            name: 'jako',\n            other: 2\n          }, function () {\n            d.insert({\n              name: 'jakeb',\n              other: 3\n            }, function () {\n              d.insert({\n                name: 'sue'\n              }, function () {\n                d.insert({\n                  name: 'henry',\n                  other: 4\n                }, function () {\n                  return cb();\n                });\n              });\n            });\n          });\n        });\n      }, function (cb) {\n        var cursor = new Cursor(d, {});\n        cursor.sort({\n          other: 1\n        }).exec(function (err, docs) {\n          docs.length.should.equal(4);\n          docs[0].name.should.equal('sue');\n          assert.isUndefined(docs[0].other);\n          docs[1].name.should.equal('jako');\n          docs[1].other.should.equal(2);\n          docs[2].name.should.equal('jakeb');\n          docs[2].other.should.equal(3);\n          docs[3].name.should.equal('henry');\n          docs[3].other.should.equal(4);\n          return cb();\n        });\n      }, function (cb) {\n        var cursor = new Cursor(d, {\n          name: {\n            $in: ['suzy', 'jakeb', 'jako']\n          }\n        });\n        cursor.sort({\n          other: -1\n        }).exec(function (err, docs) {\n          docs.length.should.equal(2);\n          docs[0].name.should.equal('jakeb');\n          docs[0].other.should.equal(3);\n          docs[1].name.should.equal('jako');\n          docs[1].other.should.equal(2);\n          return cb();\n        });\n      }], done);\n    });","file":"cursor.test.js","skipped":false,"dir":"test"},{"name":"Sorting when all fields are undefined","suites":["Cursor","Sorting of the results"],"updatePoint":{"line":610,"column":45,"index":17988},"line":610,"code":"    it('Sorting when all fields are undefined', function (done) {\n      async.waterfall([function (cb) {\n        d.remove({}, {\n          multi: true\n        }, function (err) {\n          if (err) {\n            return cb(err);\n          }\n          d.insert({\n            name: 'jako'\n          }, function () {\n            d.insert({\n              name: 'jakeb'\n            }, function () {\n              d.insert({\n                name: 'sue'\n              }, function () {\n                return cb();\n              });\n            });\n          });\n        });\n      }, function (cb) {\n        var cursor = new Cursor(d, {});\n        cursor.sort({\n          other: 1\n        }).exec(function (err, docs) {\n          docs.length.should.equal(3);\n          return cb();\n        });\n      }, function (cb) {\n        var cursor = new Cursor(d, {\n          name: {\n            $in: ['sue', 'jakeb', 'jakob']\n          }\n        });\n        cursor.sort({\n          other: -1\n        }).exec(function (err, docs) {\n          docs.length.should.equal(2);\n          return cb();\n        });\n      }], done);\n    });","file":"cursor.test.js","skipped":false,"dir":"test"},{"name":"Multiple consecutive sorts","suites":["Cursor","Sorting of the results"],"updatePoint":{"line":654,"column":34,"index":19088},"line":654,"code":"    it('Multiple consecutive sorts', function (done) {\n      async.waterfall([function (cb) {\n        d.remove({}, {\n          multi: true\n        }, function (err) {\n          if (err) {\n            return cb(err);\n          }\n          d.insert({\n            name: 'jako',\n            age: 43,\n            nid: 1\n          }, function () {\n            d.insert({\n              name: 'jakeb',\n              age: 43,\n              nid: 2\n            }, function () {\n              d.insert({\n                name: 'sue',\n                age: 12,\n                nid: 3\n              }, function () {\n                d.insert({\n                  name: 'zoe',\n                  age: 23,\n                  nid: 4\n                }, function () {\n                  d.insert({\n                    name: 'jako',\n                    age: 35,\n                    nid: 5\n                  }, function () {\n                    return cb();\n                  });\n                });\n              });\n            });\n          });\n        });\n      }, function (cb) {\n        var cursor = new Cursor(d, {});\n        cursor.sort({\n          name: 1,\n          age: -1\n        }).exec(function (err, docs) {\n          docs.length.should.equal(5);\n          docs[0].nid.should.equal(2);\n          docs[1].nid.should.equal(1);\n          docs[2].nid.should.equal(5);\n          docs[3].nid.should.equal(3);\n          docs[4].nid.should.equal(4);\n          return cb();\n        });\n      }, function (cb) {\n        var cursor = new Cursor(d, {});\n        cursor.sort({\n          name: 1,\n          age: 1\n        }).exec(function (err, docs) {\n          docs.length.should.equal(5);\n          docs[0].nid.should.equal(2);\n          docs[1].nid.should.equal(5);\n          docs[2].nid.should.equal(1);\n          docs[3].nid.should.equal(3);\n          docs[4].nid.should.equal(4);\n          return cb();\n        });\n      }, function (cb) {\n        var cursor = new Cursor(d, {});\n        cursor.sort({\n          age: 1,\n          name: 1\n        }).exec(function (err, docs) {\n          docs.length.should.equal(5);\n          docs[0].nid.should.equal(3);\n          docs[1].nid.should.equal(4);\n          docs[2].nid.should.equal(5);\n          docs[3].nid.should.equal(2);\n          docs[4].nid.should.equal(1);\n          return cb();\n        });\n      }, function (cb) {\n        var cursor = new Cursor(d, {});\n        cursor.sort({\n          age: 1,\n          name: -1\n        }).exec(function (err, docs) {\n          docs.length.should.equal(5);\n          docs[0].nid.should.equal(3);\n          docs[1].nid.should.equal(4);\n          docs[2].nid.should.equal(5);\n          docs[3].nid.should.equal(1);\n          docs[4].nid.should.equal(2);\n          return cb();\n        });\n      }], done);\n    });","file":"cursor.test.js","skipped":false,"dir":"test"},{"name":"Similar data, multiple consecutive sorts","suites":["Cursor","Sorting of the results"],"updatePoint":{"line":752,"column":48,"index":21885},"line":752,"code":"    it('Similar data, multiple consecutive sorts', function (done) {\n      var i,\n        j,\n        id,\n        companies = ['acme', 'milkman', 'zoinks'],\n        entities = [];\n      async.waterfall([function (cb) {\n        d.remove({}, {\n          multi: true\n        }, function (err) {\n          if (err) {\n            return cb(err);\n          }\n          id = 1;\n          for (i = 0; i < companies.length; i++) {\n            for (j = 5; j <= 100; j += 5) {\n              entities.push({\n                company: companies[i],\n                cost: j,\n                nid: id\n              });\n              id++;\n            }\n          }\n          async.each(entities, function (entity, callback) {\n            d.insert(entity, function () {\n              callback();\n            });\n          }, function (err) {\n            return cb();\n          });\n        });\n      }, function (cb) {\n        var cursor = new Cursor(d, {});\n        cursor.sort({\n          company: 1,\n          cost: 1\n        }).exec(function (err, docs) {\n          docs.length.should.equal(60);\n          for (var i = 0; i < docs.length; i++) {\n            docs[i].nid.should.equal(i + 1);\n          }\n          ;\n          return cb();\n        });\n      }], done);\n    });","file":"cursor.test.js","skipped":false,"dir":"test"},{"name":"Takes all results if no projection or empty object given","suites":["Cursor","Projections"],"updatePoint":{"line":852,"column":64,"index":24507},"line":852,"code":"    it('Takes all results if no projection or empty object given', function (done) {\n      var cursor = new Cursor(d, {});\n      cursor.sort({\n        age: 1\n      }); // For easier finding\n      cursor.exec(function (err, docs) {\n        assert.isNull(err);\n        docs.length.should.equal(5);\n        assert.deepEqual(docs[0], doc0);\n        assert.deepEqual(docs[1], doc3);\n        assert.deepEqual(docs[2], doc2);\n        assert.deepEqual(docs[3], doc1);\n        assert.deepEqual(docs[4], doc4);\n        cursor.projection({});\n        cursor.exec(function (err, docs) {\n          assert.isNull(err);\n          docs.length.should.equal(5);\n          assert.deepEqual(docs[0], doc0);\n          assert.deepEqual(docs[1], doc3);\n          assert.deepEqual(docs[2], doc2);\n          assert.deepEqual(docs[3], doc1);\n          assert.deepEqual(docs[4], doc4);\n          done();\n        });\n      });\n    });","file":"cursor.test.js","skipped":false,"dir":"test"},{"name":"Can take only the expected fields","suites":["Cursor","Projections"],"updatePoint":{"line":878,"column":41,"index":25391},"line":878,"code":"    it('Can take only the expected fields', function (done) {\n      var cursor = new Cursor(d, {});\n      cursor.sort({\n        age: 1\n      }); // For easier finding\n      cursor.projection({\n        age: 1,\n        name: 1\n      });\n      cursor.exec(function (err, docs) {\n        assert.isNull(err);\n        docs.length.should.equal(5);\n        // Takes the _id by default\n        assert.deepEqual(docs[0], {\n          age: 5,\n          name: 'Jo',\n          _id: doc0._id\n        });\n        assert.deepEqual(docs[1], {\n          age: 23,\n          name: 'LM',\n          _id: doc3._id\n        });\n        assert.deepEqual(docs[2], {\n          age: 52,\n          name: 'Grafitti',\n          _id: doc2._id\n        });\n        assert.deepEqual(docs[3], {\n          age: 57,\n          name: 'Louis',\n          _id: doc1._id\n        });\n        assert.deepEqual(docs[4], {\n          age: 89,\n          _id: doc4._id\n        }); // No problems if one field to take doesn't exist\n\n        cursor.projection({\n          age: 1,\n          name: 1,\n          _id: 0\n        });\n        cursor.exec(function (err, docs) {\n          assert.isNull(err);\n          docs.length.should.equal(5);\n          assert.deepEqual(docs[0], {\n            age: 5,\n            name: 'Jo'\n          });\n          assert.deepEqual(docs[1], {\n            age: 23,\n            name: 'LM'\n          });\n          assert.deepEqual(docs[2], {\n            age: 52,\n            name: 'Grafitti'\n          });\n          assert.deepEqual(docs[3], {\n            age: 57,\n            name: 'Louis'\n          });\n          assert.deepEqual(docs[4], {\n            age: 89\n          }); // No problems if one field to take doesn't exist\n\n          done();\n        });\n      });\n    });","file":"cursor.test.js","skipped":false,"dir":"test"},{"name":"Can omit only the expected fields","suites":["Cursor","Projections"],"updatePoint":{"line":948,"column":41,"index":27139},"line":948,"code":"    it('Can omit only the expected fields', function (done) {\n      var cursor = new Cursor(d, {});\n      cursor.sort({\n        age: 1\n      }); // For easier finding\n      cursor.projection({\n        age: 0,\n        name: 0\n      });\n      cursor.exec(function (err, docs) {\n        assert.isNull(err);\n        docs.length.should.equal(5);\n        // Takes the _id by default\n        assert.deepEqual(docs[0], {\n          planet: 'B',\n          _id: doc0._id,\n          toys: {\n            bebe: true,\n            ballon: 'much'\n          }\n        });\n        assert.deepEqual(docs[1], {\n          planet: 'S',\n          _id: doc3._id\n        });\n        assert.deepEqual(docs[2], {\n          planet: 'C',\n          _id: doc2._id,\n          toys: {\n            bebe: 'kind of'\n          }\n        });\n        assert.deepEqual(docs[3], {\n          planet: 'R',\n          _id: doc1._id,\n          toys: {\n            bebe: false,\n            ballon: 'yeah'\n          }\n        });\n        assert.deepEqual(docs[4], {\n          planet: 'Earth',\n          _id: doc4._id\n        });\n        cursor.projection({\n          age: 0,\n          name: 0,\n          _id: 0\n        });\n        cursor.exec(function (err, docs) {\n          assert.isNull(err);\n          docs.length.should.equal(5);\n          assert.deepEqual(docs[0], {\n            planet: 'B',\n            toys: {\n              bebe: true,\n              ballon: 'much'\n            }\n          });\n          assert.deepEqual(docs[1], {\n            planet: 'S'\n          });\n          assert.deepEqual(docs[2], {\n            planet: 'C',\n            toys: {\n              bebe: 'kind of'\n            }\n          });\n          assert.deepEqual(docs[3], {\n            planet: 'R',\n            toys: {\n              bebe: false,\n              ballon: 'yeah'\n            }\n          });\n          assert.deepEqual(docs[4], {\n            planet: 'Earth'\n          });\n          done();\n        });\n      });\n    });","file":"cursor.test.js","skipped":false,"dir":"test"},{"name":"Cannot use both modes except for _id","suites":["Cursor","Projections"],"updatePoint":{"line":1030,"column":44,"index":29106},"line":1030,"code":"    it('Cannot use both modes except for _id', function (done) {\n      var cursor = new Cursor(d, {});\n      cursor.sort({\n        age: 1\n      }); // For easier finding\n      cursor.projection({\n        age: 1,\n        name: 0\n      });\n      cursor.exec(function (err, docs) {\n        assert.isNotNull(err);\n        assert.isUndefined(docs);\n        cursor.projection({\n          age: 1,\n          _id: 0\n        });\n        cursor.exec(function (err, docs) {\n          assert.isNull(err);\n          assert.deepEqual(docs[0], {\n            age: 5\n          });\n          assert.deepEqual(docs[1], {\n            age: 23\n          });\n          assert.deepEqual(docs[2], {\n            age: 52\n          });\n          assert.deepEqual(docs[3], {\n            age: 57\n          });\n          assert.deepEqual(docs[4], {\n            age: 89\n          });\n          cursor.projection({\n            age: 0,\n            toys: 0,\n            planet: 0,\n            _id: 1\n          });\n          cursor.exec(function (err, docs) {\n            assert.isNull(err);\n            assert.deepEqual(docs[0], {\n              name: 'Jo',\n              _id: doc0._id\n            });\n            assert.deepEqual(docs[1], {\n              name: 'LM',\n              _id: doc3._id\n            });\n            assert.deepEqual(docs[2], {\n              name: 'Grafitti',\n              _id: doc2._id\n            });\n            assert.deepEqual(docs[3], {\n              name: 'Louis',\n              _id: doc1._id\n            });\n            assert.deepEqual(docs[4], {\n              _id: doc4._id\n            });\n            done();\n          });\n        });\n      });\n    });","file":"cursor.test.js","skipped":false,"dir":"test"},{"name":"Projections on embedded documents - omit type","suites":["Cursor","Projections"],"updatePoint":{"line":1095,"column":53,"index":30767},"line":1095,"code":"    it(\"Projections on embedded documents - omit type\", function (done) {\n      var cursor = new Cursor(d, {});\n      cursor.sort({\n        age: 1\n      }); // For easier finding\n      cursor.projection({\n        name: 0,\n        planet: 0,\n        'toys.bebe': 0,\n        _id: 0\n      });\n      cursor.exec(function (err, docs) {\n        assert.deepEqual(docs[0], {\n          age: 5,\n          toys: {\n            ballon: 'much'\n          }\n        });\n        assert.deepEqual(docs[1], {\n          age: 23\n        });\n        assert.deepEqual(docs[2], {\n          age: 52,\n          toys: {}\n        });\n        assert.deepEqual(docs[3], {\n          age: 57,\n          toys: {\n            ballon: 'yeah'\n          }\n        });\n        assert.deepEqual(docs[4], {\n          age: 89\n        });\n        done();\n      });\n    });","file":"cursor.test.js","skipped":false,"dir":"test"},{"name":"Projections on embedded documents - pick type","suites":["Cursor","Projections"],"updatePoint":{"line":1132,"column":53,"index":31597},"line":1132,"code":"    it(\"Projections on embedded documents - pick type\", function (done) {\n      var cursor = new Cursor(d, {});\n      cursor.sort({\n        age: 1\n      }); // For easier finding\n      cursor.projection({\n        name: 1,\n        'toys.ballon': 1,\n        _id: 0\n      });\n      cursor.exec(function (err, docs) {\n        assert.deepEqual(docs[0], {\n          name: 'Jo',\n          toys: {\n            ballon: 'much'\n          }\n        });\n        assert.deepEqual(docs[1], {\n          name: 'LM'\n        });\n        assert.deepEqual(docs[2], {\n          name: 'Grafitti'\n        });\n        assert.deepEqual(docs[3], {\n          name: 'Louis',\n          toys: {\n            ballon: 'yeah'\n          }\n        });\n        assert.deepEqual(docs[4], {});\n        done();\n      });\n    });","file":"cursor.test.js","skipped":false,"dir":"test"},{"name":"Generates a string of the expected length","suites":["customUtils","uid"],"updatePoint":{"line":7,"column":49,"index":263},"line":7,"code":"    it('Generates a string of the expected length', function () {\n      customUtils.uid(3).length.should.equal(3);\n      customUtils.uid(16).length.should.equal(16);\n      customUtils.uid(42).length.should.equal(42);\n      customUtils.uid(1000).length.should.equal(1000);\n    });","file":"customUtil.test.js","skipped":false,"dir":"test"},{"name":"Generated uids should not be the same","suites":["customUtils","uid"],"updatePoint":{"line":15,"column":45,"index":582},"line":15,"code":"    it('Generated uids should not be the same', function () {\n      customUtils.uid(56).should.not.equal(customUtils.uid(56));\n    });","file":"customUtil.test.js","skipped":false,"dir":"test"},{"name":"Constructor compatibility with v0.6-","suites":["Database"],"updatePoint":{"line":39,"column":42,"index":1184},"line":39,"code":"  it('Constructor compatibility with v0.6-', function () {\n    var dbef = new Datastore('somefile');\n    dbef.filename.should.equal('somefile');\n    dbef.inMemoryOnly.should.equal(false);\n    var dbef = new Datastore('');\n    assert.isNull(dbef.filename);\n    dbef.inMemoryOnly.should.equal(true);\n    var dbef = new Datastore();\n    assert.isNull(dbef.filename);\n    dbef.inMemoryOnly.should.equal(true);\n  });","file":"db.test.js","skipped":false,"dir":"test"},{"name":"Can autoload a database and query it right away","suites":["Database","Autoloading"],"updatePoint":{"line":51,"column":55,"index":1649},"line":51,"code":"    it('Can autoload a database and query it right away', function (done) {\n      var fileStr = model.serialize({\n          _id: '1',\n          a: 5,\n          planet: 'Earth'\n        }) + '\\n' + model.serialize({\n          _id: '2',\n          a: 5,\n          planet: 'Mars'\n        }) + '\\n',\n        autoDb = 'workspace/auto.db',\n        db;\n      fs.writeFileSync(autoDb, fileStr, 'utf8');\n      db = new Datastore({\n        filename: autoDb,\n        autoload: true\n      });\n      db.find({}, function (err, docs) {\n        assert.isNull(err);\n        docs.length.should.equal(2);\n        done();\n      });\n    });","file":"db.test.js","skipped":false,"dir":"test"},{"name":"Throws if autoload fails","suites":["Database","Autoloading"],"updatePoint":{"line":74,"column":32,"index":2245},"line":74,"code":"    it('Throws if autoload fails', function (done) {\n      var fileStr = model.serialize({\n          _id: '1',\n          a: 5,\n          planet: 'Earth'\n        }) + '\\n' + model.serialize({\n          _id: '2',\n          a: 5,\n          planet: 'Mars'\n        }) + '\\n' + '{\"$$indexCreated\":{\"fieldName\":\"a\",\"unique\":true}}',\n        autoDb = 'workspace/auto.db',\n        db;\n      fs.writeFileSync(autoDb, fileStr, 'utf8');\n\n      // Check the loadDatabase generated an error\n      function onload(err) {\n        err.errorType.should.equal('uniqueViolated');\n        done();\n      }\n      db = new Datastore({\n        filename: autoDb,\n        autoload: true,\n        onload: onload\n      });\n      db.find({}, function (err, docs) {\n        done(new Error(\"Find should not be executed since autoload failed\"));\n      });\n    });","file":"db.test.js","skipped":false,"dir":"test"},{"name":"Able to insert a document in the database, setting an _id if none provided, and retrieve it even after a reload","suites":["Database","Insert"],"updatePoint":{"line":104,"column":119,"index":3204},"line":104,"code":"    it('Able to insert a document in the database, setting an _id if none provided, and retrieve it even after a reload', function (done) {\n      d.find({}, function (err, docs) {\n        docs.length.should.equal(0);\n        d.insert({\n          somedata: 'ok'\n        }, function (err) {\n          // The data was correctly updated\n          d.find({}, function (err, docs) {\n            assert.isNull(err);\n            docs.length.should.equal(1);\n            Object.keys(docs[0]).length.should.equal(2);\n            docs[0].somedata.should.equal('ok');\n            assert.isDefined(docs[0]._id);\n\n            // After a reload the data has been correctly persisted\n            d.loadDatabase(function (err) {\n              d.find({}, function (err, docs) {\n                assert.isNull(err);\n                docs.length.should.equal(1);\n                Object.keys(docs[0]).length.should.equal(2);\n                docs[0].somedata.should.equal('ok');\n                assert.isDefined(docs[0]._id);\n                done();\n              });\n            });\n          });\n        });\n      });\n    });","file":"db.test.js","skipped":false,"dir":"test"},{"name":"Can insert multiple documents in the database","suites":["Database","Insert"],"updatePoint":{"line":133,"column":53,"index":4242},"line":133,"code":"    it('Can insert multiple documents in the database', function (done) {\n      d.find({}, function (err, docs) {\n        docs.length.should.equal(0);\n        d.insert({\n          somedata: 'ok'\n        }, function (err) {\n          d.insert({\n            somedata: 'another'\n          }, function (err) {\n            d.insert({\n              somedata: 'again'\n            }, function (err) {\n              d.find({}, function (err, docs) {\n                docs.length.should.equal(3);\n                _.pluck(docs, 'somedata').should.contain('ok');\n                _.pluck(docs, 'somedata').should.contain('another');\n                _.pluck(docs, 'somedata').should.contain('again');\n                done();\n              });\n            });\n          });\n        });\n      });\n    });","file":"db.test.js","skipped":false,"dir":"test"},{"name":"Can insert and get back from DB complex objects with all primitive and secondary types","suites":["Database","Insert"],"updatePoint":{"line":157,"column":94,"index":5071},"line":157,"code":"    it('Can insert and get back from DB complex objects with all primitive and secondary types', function (done) {\n      var da = new Date(),\n        obj = {\n          a: ['ee', 'ff', 42],\n          date: da,\n          subobj: {\n            a: 'b',\n            b: 'c'\n          }\n        };\n      d.insert(obj, function (err) {\n        d.findOne({}, function (err, res) {\n          assert.isNull(err);\n          res.a.length.should.equal(3);\n          res.a[0].should.equal('ee');\n          res.a[1].should.equal('ff');\n          res.a[2].should.equal(42);\n          res.date.getTime().should.equal(da.getTime());\n          res.subobj.a.should.equal('b');\n          res.subobj.b.should.equal('c');\n          done();\n        });\n      });\n    });","file":"db.test.js","skipped":false,"dir":"test"},{"name":"If an object returned from the DB is modified and refetched, the original value should be found","suites":["Database","Insert"],"updatePoint":{"line":181,"column":103,"index":5826},"line":181,"code":"    it('If an object returned from the DB is modified and refetched, the original value should be found', function (done) {\n      d.insert({\n        a: 'something'\n      }, function () {\n        d.findOne({}, function (err, doc) {\n          doc.a.should.equal('something');\n          doc.a = 'another thing';\n          doc.a.should.equal('another thing');\n\n          // Re-fetching with findOne should yield the persisted value\n          d.findOne({}, function (err, doc) {\n            doc.a.should.equal('something');\n            doc.a = 'another thing';\n            doc.a.should.equal('another thing');\n\n            // Re-fetching with find should yield the persisted value\n            d.find({}, function (err, docs) {\n              docs[0].a.should.equal('something');\n              done();\n            });\n          });\n        });\n      });\n    });","file":"db.test.js","skipped":false,"dir":"test"},{"name":"Cannot insert a doc that has a field beginning with a $ sign","suites":["Database","Insert"],"updatePoint":{"line":205,"column":68,"index":6646},"line":205,"code":"    it('Cannot insert a doc that has a field beginning with a $ sign', function (done) {\n      d.insert({\n        $something: 'atest'\n      }, function (err) {\n        assert.isDefined(err);\n        done();\n      });\n    });","file":"db.test.js","skipped":false,"dir":"test"},{"name":"If an _id is already given when we insert a document, use that instead of generating a random one","suites":["Database","Insert"],"updatePoint":{"line":213,"column":105,"index":6908},"line":213,"code":"    it('If an _id is already given when we insert a document, use that instead of generating a random one', function (done) {\n      d.insert({\n        _id: 'test',\n        stuff: true\n      }, function (err, newDoc) {\n        if (err) {\n          return done(err);\n        }\n        newDoc.stuff.should.equal(true);\n        newDoc._id.should.equal('test');\n        d.insert({\n          _id: 'test',\n          otherstuff: 42\n        }, function (err) {\n          err.errorType.should.equal('uniqueViolated');\n          done();\n        });\n      });\n    });","file":"db.test.js","skipped":false,"dir":"test"},{"name":"Modifying the insertedDoc after an insert doesnt change the copy saved in the database","suites":["Database","Insert"],"updatePoint":{"line":232,"column":94,"index":7453},"line":232,"code":"    it('Modifying the insertedDoc after an insert doesnt change the copy saved in the database', function (done) {\n      d.insert({\n        a: 2,\n        hello: 'world'\n      }, function (err, newDoc) {\n        newDoc.hello = 'changed';\n        d.findOne({\n          a: 2\n        }, function (err, doc) {\n          doc.hello.should.equal('world');\n          done();\n        });\n      });\n    });","file":"db.test.js","skipped":false,"dir":"test"},{"name":"Can insert an array of documents at once","suites":["Database","Insert"],"updatePoint":{"line":246,"column":48,"index":7803},"line":246,"code":"    it('Can insert an array of documents at once', function (done) {\n      var docs = [{\n        a: 5,\n        b: 'hello'\n      }, {\n        a: 42,\n        b: 'world'\n      }];\n      d.insert(docs, function (err) {\n        d.find({}, function (err, docs) {\n          var data;\n          docs.length.should.equal(2);\n          _.find(docs, function (doc) {\n            return doc.a === 5;\n          }).b.should.equal('hello');\n          _.find(docs, function (doc) {\n            return doc.a === 42;\n          }).b.should.equal('world');\n\n          // The data has been persisted correctly\n          data = _.filter(fs.readFileSync(testDb, 'utf8').split('\\n'), function (line) {\n            return line.length > 0;\n          });\n          data.length.should.equal(2);\n          model.deserialize(data[0]).a.should.equal(5);\n          model.deserialize(data[0]).b.should.equal('hello');\n          model.deserialize(data[1]).a.should.equal(42);\n          model.deserialize(data[1]).b.should.equal('world');\n          done();\n        });\n      });\n    });","file":"db.test.js","skipped":false,"dir":"test"},{"name":"If a bulk insert violates a constraint, all changes are rolled back","suites":["Database","Insert"],"updatePoint":{"line":278,"column":75,"index":8882},"line":278,"code":"    it('If a bulk insert violates a constraint, all changes are rolled back', function (done) {\n      var docs = [{\n        a: 5,\n        b: 'hello'\n      }, {\n        a: 42,\n        b: 'world'\n      }, {\n        a: 5,\n        b: 'bloup'\n      }, {\n        a: 7\n      }];\n      d.ensureIndex({\n        fieldName: 'a',\n        unique: true\n      }, function () {\n        // Important to specify callback here to make sure filesystem synced\n        d.insert(docs, function (err) {\n          err.errorType.should.equal('uniqueViolated');\n          d.find({}, function (err, docs) {\n            // Datafile only contains index definition\n            var datafileContents = model.deserialize(fs.readFileSync(testDb, 'utf8'));\n            assert.deepEqual(datafileContents, {\n              $$indexCreated: {\n                fieldName: 'a',\n                unique: true\n              }\n            });\n            docs.length.should.equal(0);\n            done();\n          });\n        });\n      });\n    });","file":"db.test.js","skipped":false,"dir":"test"},{"name":"If timestampData option is set, a createdAt field is added and persisted","suites":["Database","Insert"],"updatePoint":{"line":313,"column":80,"index":9887},"line":313,"code":"    it(\"If timestampData option is set, a createdAt field is added and persisted\", function (done) {\n      var newDoc = {\n          hello: 'world'\n        },\n        beginning = Date.now();\n      d = new Datastore({\n        filename: testDb,\n        timestampData: true,\n        autoload: true\n      });\n      d.find({}, function (err, docs) {\n        assert.isNull(err);\n        docs.length.should.equal(0);\n        d.insert(newDoc, function (err, insertedDoc) {\n          // No side effect on given input\n          assert.deepEqual(newDoc, {\n            hello: 'world'\n          });\n          // Insert doc has two new fields, _id and createdAt\n          insertedDoc.hello.should.equal('world');\n          assert.isDefined(insertedDoc.createdAt);\n          assert.isDefined(insertedDoc.updatedAt);\n          insertedDoc.createdAt.should.equal(insertedDoc.updatedAt);\n          assert.isDefined(insertedDoc._id);\n          Object.keys(insertedDoc).length.should.equal(4);\n          assert.isBelow(Math.abs(insertedDoc.createdAt.getTime() - beginning), reloadTimeUpperBound); // No more than 30ms should have elapsed (worst case, if there is a flush)\n\n          // Modifying results of insert doesn't change the cache\n          insertedDoc.bloup = \"another\";\n          Object.keys(insertedDoc).length.should.equal(5);\n          d.find({}, function (err, docs) {\n            docs.length.should.equal(1);\n            assert.deepEqual(newDoc, {\n              hello: 'world'\n            });\n            assert.deepEqual({\n              hello: 'world',\n              _id: insertedDoc._id,\n              createdAt: insertedDoc.createdAt,\n              updatedAt: insertedDoc.updatedAt\n            }, docs[0]);\n\n            // All data correctly persisted on disk\n            d.loadDatabase(function () {\n              d.find({}, function (err, docs) {\n                docs.length.should.equal(1);\n                assert.deepEqual(newDoc, {\n                  hello: 'world'\n                });\n                assert.deepEqual({\n                  hello: 'world',\n                  _id: insertedDoc._id,\n                  createdAt: insertedDoc.createdAt,\n                  updatedAt: insertedDoc.updatedAt\n                }, docs[0]);\n                done();\n              });\n            });\n          });\n        });\n      });\n    });","file":"db.test.js","skipped":false,"dir":"test"},{"name":"If timestampData option not set, don't create a createdAt and a updatedAt field","suites":["Database","Insert"],"updatePoint":{"line":375,"column":87,"index":12224},"line":375,"code":"    it(\"If timestampData option not set, don't create a createdAt and a updatedAt field\", function (done) {\n      d.insert({\n        hello: 'world'\n      }, function (err, insertedDoc) {\n        Object.keys(insertedDoc).length.should.equal(2);\n        assert.isUndefined(insertedDoc.createdAt);\n        assert.isUndefined(insertedDoc.updatedAt);\n        d.find({}, function (err, docs) {\n          docs.length.should.equal(1);\n          assert.deepEqual(docs[0], insertedDoc);\n          done();\n        });\n      });\n    });","file":"db.test.js","skipped":false,"dir":"test"},{"name":"If timestampData is set but createdAt is specified by user, don't change it","suites":["Database","Insert"],"updatePoint":{"line":389,"column":83,"index":12745},"line":389,"code":"    it(\"If timestampData is set but createdAt is specified by user, don't change it\", function (done) {\n      var newDoc = {\n          hello: 'world',\n          createdAt: new Date(234)\n        },\n        beginning = Date.now();\n      d = new Datastore({\n        filename: testDb,\n        timestampData: true,\n        autoload: true\n      });\n      d.insert(newDoc, function (err, insertedDoc) {\n        Object.keys(insertedDoc).length.should.equal(4);\n        insertedDoc.createdAt.getTime().should.equal(234); // Not modified\n        assert.isBelow(insertedDoc.updatedAt.getTime() - beginning, reloadTimeUpperBound); // Created\n\n        d.find({}, function (err, docs) {\n          assert.deepEqual(insertedDoc, docs[0]);\n          d.loadDatabase(function () {\n            d.find({}, function (err, docs) {\n              assert.deepEqual(insertedDoc, docs[0]);\n              done();\n            });\n          });\n        });\n      });\n    });","file":"db.test.js","skipped":false,"dir":"test"},{"name":"If timestampData is set but updatedAt is specified by user, don't change it","suites":["Database","Insert"],"updatePoint":{"line":416,"column":83,"index":13689},"line":416,"code":"    it(\"If timestampData is set but updatedAt is specified by user, don't change it\", function (done) {\n      var newDoc = {\n          hello: 'world',\n          updatedAt: new Date(234)\n        },\n        beginning = Date.now();\n      d = new Datastore({\n        filename: testDb,\n        timestampData: true,\n        autoload: true\n      });\n      d.insert(newDoc, function (err, insertedDoc) {\n        Object.keys(insertedDoc).length.should.equal(4);\n        insertedDoc.updatedAt.getTime().should.equal(234); // Not modified\n        assert.isBelow(insertedDoc.createdAt.getTime() - beginning, reloadTimeUpperBound); // Created\n\n        d.find({}, function (err, docs) {\n          assert.deepEqual(insertedDoc, docs[0]);\n          d.loadDatabase(function () {\n            d.find({}, function (err, docs) {\n              assert.deepEqual(insertedDoc, docs[0]);\n              done();\n            });\n          });\n        });\n      });\n    });","file":"db.test.js","skipped":false,"dir":"test"},{"name":"Can insert a doc with id 0","suites":["Database","Insert"],"updatePoint":{"line":443,"column":34,"index":14584},"line":443,"code":"    it('Can insert a doc with id 0', function (done) {\n      d.insert({\n        _id: 0,\n        hello: 'world'\n      }, function (err, doc) {\n        doc._id.should.equal(0);\n        doc.hello.should.equal('world');\n        done();\n      });\n    });","file":"db.test.js","skipped":false,"dir":"test"},{"name":"If the callback throws an uncaught exception, do not catch it inside findOne, this is userspace concern","suites":["Database","Insert"],"updatePoint":{"line":465,"column":111,"index":15729},"line":465,"code":"    it('If the callback throws an uncaught exception, do not catch it inside findOne, this is userspace concern', function (done) {\n      var tryCount = 0,\n        currentUncaughtExceptionHandlers = process.listeners('uncaughtException'),\n        i;\n      process.removeAllListeners('uncaughtException');\n      process.on('uncaughtException', function MINE(ex) {\n        process.removeAllListeners('uncaughtException');\n        for (i = 0; i < currentUncaughtExceptionHandlers.length; i += 1) {\n          process.on('uncaughtException', currentUncaughtExceptionHandlers[i]);\n        }\n        ex.message.should.equal('SOME EXCEPTION');\n        done();\n      });\n      d.insert({\n        a: 5\n      }, function () {\n        d.findOne({\n          a: 5\n        }, function (err, doc) {\n          if (tryCount === 0) {\n            tryCount += 1;\n            throw new Error('SOME EXCEPTION');\n          } else {\n            done(new Error('Callback was called twice'));\n          }\n        });\n      });\n    });","file":"db.test.js","skipped":false,"dir":"test"},{"name":"Can use an index to get docs with a basic match","suites":["Database","#getCandidates"],"updatePoint":{"line":496,"column":55,"index":16763},"line":496,"code":"    it('Can use an index to get docs with a basic match', function (done) {\n      d.ensureIndex({\n        fieldName: 'tf'\n      }, function (err) {\n        d.insert({\n          tf: 4\n        }, function (err, _doc1) {\n          d.insert({\n            tf: 6\n          }, function () {\n            d.insert({\n              tf: 4,\n              an: 'other'\n            }, function (err, _doc2) {\n              d.insert({\n                tf: 9\n              }, function () {\n                d.getCandidates({\n                  r: 6,\n                  tf: 4\n                }, function (err, data) {\n                  var doc1 = _.find(data, function (d) {\n                      return d._id === _doc1._id;\n                    }),\n                    doc2 = _.find(data, function (d) {\n                      return d._id === _doc2._id;\n                    });\n                  data.length.should.equal(2);\n                  assert.deepEqual(doc1, {\n                    _id: doc1._id,\n                    tf: 4\n                  });\n                  assert.deepEqual(doc2, {\n                    _id: doc2._id,\n                    tf: 4,\n                    an: 'other'\n                  });\n                  done();\n                });\n              });\n            });\n          });\n        });\n      });\n    });","file":"db.test.js","skipped":false,"dir":"test"},{"name":"Can use an index to get docs with a $in match","suites":["Database","#getCandidates"],"updatePoint":{"line":541,"column":53,"index":18072},"line":541,"code":"    it('Can use an index to get docs with a $in match', function (done) {\n      d.ensureIndex({\n        fieldName: 'tf'\n      }, function (err) {\n        d.insert({\n          tf: 4\n        }, function (err) {\n          d.insert({\n            tf: 6\n          }, function (err, _doc1) {\n            d.insert({\n              tf: 4,\n              an: 'other'\n            }, function (err) {\n              d.insert({\n                tf: 9\n              }, function (err, _doc2) {\n                d.getCandidates({\n                  r: 6,\n                  tf: {\n                    $in: [6, 9, 5]\n                  }\n                }, function (err, data) {\n                  var doc1 = _.find(data, function (d) {\n                      return d._id === _doc1._id;\n                    }),\n                    doc2 = _.find(data, function (d) {\n                      return d._id === _doc2._id;\n                    });\n                  data.length.should.equal(2);\n                  assert.deepEqual(doc1, {\n                    _id: doc1._id,\n                    tf: 6\n                  });\n                  assert.deepEqual(doc2, {\n                    _id: doc2._id,\n                    tf: 9\n                  });\n                  done();\n                });\n              });\n            });\n          });\n        });\n      });\n    });","file":"db.test.js","skipped":false,"dir":"test"},{"name":"If no index can be used, return the whole database","suites":["Database","#getCandidates"],"updatePoint":{"line":587,"column":58,"index":19414},"line":587,"code":"    it('If no index can be used, return the whole database', function (done) {\n      d.ensureIndex({\n        fieldName: 'tf'\n      }, function (err) {\n        d.insert({\n          tf: 4\n        }, function (err, _doc1) {\n          d.insert({\n            tf: 6\n          }, function (err, _doc2) {\n            d.insert({\n              tf: 4,\n              an: 'other'\n            }, function (err, _doc3) {\n              d.insert({\n                tf: 9\n              }, function (err, _doc4) {\n                d.getCandidates({\n                  r: 6,\n                  notf: {\n                    $in: [6, 9, 5]\n                  }\n                }, function (err, data) {\n                  var doc1 = _.find(data, function (d) {\n                      return d._id === _doc1._id;\n                    }),\n                    doc2 = _.find(data, function (d) {\n                      return d._id === _doc2._id;\n                    }),\n                    doc3 = _.find(data, function (d) {\n                      return d._id === _doc3._id;\n                    }),\n                    doc4 = _.find(data, function (d) {\n                      return d._id === _doc4._id;\n                    });\n                  data.length.should.equal(4);\n                  assert.deepEqual(doc1, {\n                    _id: doc1._id,\n                    tf: 4\n                  });\n                  assert.deepEqual(doc2, {\n                    _id: doc2._id,\n                    tf: 6\n                  });\n                  assert.deepEqual(doc3, {\n                    _id: doc3._id,\n                    tf: 4,\n                    an: 'other'\n                  });\n                  assert.deepEqual(doc4, {\n                    _id: doc4._id,\n                    tf: 9\n                  });\n                  done();\n                });\n              });\n            });\n          });\n        });\n      });\n    });","file":"db.test.js","skipped":false,"dir":"test"},{"name":"Can use indexes for comparison matches","suites":["Database","#getCandidates"],"updatePoint":{"line":648,"column":46,"index":21303},"line":648,"code":"    it('Can use indexes for comparison matches', function (done) {\n      d.ensureIndex({\n        fieldName: 'tf'\n      }, function (err) {\n        d.insert({\n          tf: 4\n        }, function (err, _doc1) {\n          d.insert({\n            tf: 6\n          }, function (err, _doc2) {\n            d.insert({\n              tf: 4,\n              an: 'other'\n            }, function (err, _doc3) {\n              d.insert({\n                tf: 9\n              }, function (err, _doc4) {\n                d.getCandidates({\n                  r: 6,\n                  tf: {\n                    $lte: 9,\n                    $gte: 6\n                  }\n                }, function (err, data) {\n                  var doc2 = _.find(data, function (d) {\n                      return d._id === _doc2._id;\n                    }),\n                    doc4 = _.find(data, function (d) {\n                      return d._id === _doc4._id;\n                    });\n                  data.length.should.equal(2);\n                  assert.deepEqual(doc2, {\n                    _id: doc2._id,\n                    tf: 6\n                  });\n                  assert.deepEqual(doc4, {\n                    _id: doc4._id,\n                    tf: 9\n                  });\n                  done();\n                });\n              });\n            });\n          });\n        });\n      });\n    });","file":"db.test.js","skipped":false,"dir":"test"},{"name":"Can set a TTL index that expires documents","suites":["Database","#getCandidates"],"updatePoint":{"line":695,"column":50,"index":22673},"line":695,"code":"    it(\"Can set a TTL index that expires documents\", function (done) {\n      d.ensureIndex({\n        fieldName: 'exp',\n        expireAfterSeconds: 0.2\n      }, function () {\n        d.insert({\n          hello: 'world',\n          exp: new Date()\n        }, function () {\n          setTimeout(function () {\n            d.findOne({}, function (err, doc) {\n              assert.isNull(err);\n              doc.hello.should.equal('world');\n              setTimeout(function () {\n                d.findOne({}, function (err, doc) {\n                  assert.isNull(err);\n                  assert.isNull(doc);\n                  d.on('compaction.done', function () {\n                    // After compaction, no more mention of the document, correctly removed\n                    var datafileContents = fs.readFileSync(testDb, 'utf8');\n                    datafileContents.split('\\n').length.should.equal(2);\n                    assert.isNull(datafileContents.match(/world/));\n\n                    // New datastore on same datafile is empty\n                    var d2 = new Datastore({\n                      filename: testDb,\n                      autoload: true\n                    });\n                    d2.findOne({}, function (err, doc) {\n                      assert.isNull(err);\n                      assert.isNull(doc);\n                      done();\n                    });\n                  });\n                  d.persistence.compactDatafile();\n                });\n              }, 101);\n            });\n          }, 100);\n        });\n      });\n    });","file":"db.test.js","skipped":false,"dir":"test"},{"name":"TTL indexes can expire multiple documents and only what needs to be expired","suites":["Database","#getCandidates"],"updatePoint":{"line":737,"column":83,"index":24258},"line":737,"code":"    it(\"TTL indexes can expire multiple documents and only what needs to be expired\", function (done) {\n      d.ensureIndex({\n        fieldName: 'exp',\n        expireAfterSeconds: 0.2\n      }, function () {\n        d.insert({\n          hello: 'world1',\n          exp: new Date()\n        }, function () {\n          d.insert({\n            hello: 'world2',\n            exp: new Date()\n          }, function () {\n            d.insert({\n              hello: 'world3',\n              exp: new Date(new Date().getTime() + 100)\n            }, function () {\n              setTimeout(function () {\n                d.find({}, function (err, docs) {\n                  assert.isNull(err);\n                  docs.length.should.equal(3);\n                  setTimeout(function () {\n                    d.find({}, function (err, docs) {\n                      assert.isNull(err);\n                      docs.length.should.equal(1);\n                      docs[0].hello.should.equal('world3');\n                      setTimeout(function () {\n                        d.find({}, function (err, docs) {\n                          assert.isNull(err);\n                          docs.length.should.equal(0);\n                          done();\n                        });\n                      }, 101);\n                    });\n                  }, 101);\n                });\n              }, 100);\n            });\n          });\n        });\n      });\n    });","file":"db.test.js","skipped":false,"dir":"test"},{"name":"Document where indexed field is absent or not a date are ignored","suites":["Database","#getCandidates"],"updatePoint":{"line":779,"column":72,"index":25672},"line":779,"code":"    it(\"Document where indexed field is absent or not a date are ignored\", function (done) {\n      d.ensureIndex({\n        fieldName: 'exp',\n        expireAfterSeconds: 0.2\n      }, function () {\n        d.insert({\n          hello: 'world1',\n          exp: new Date()\n        }, function () {\n          d.insert({\n            hello: 'world2',\n            exp: \"not a date\"\n          }, function () {\n            d.insert({\n              hello: 'world3'\n            }, function () {\n              setTimeout(function () {\n                d.find({}, function (err, docs) {\n                  assert.isNull(err);\n                  docs.length.should.equal(3);\n                  setTimeout(function () {\n                    d.find({}, function (err, docs) {\n                      assert.isNull(err);\n                      docs.length.should.equal(2);\n                      docs[0].hello.should.not.equal('world1');\n                      docs[1].hello.should.not.equal('world1');\n                      done();\n                    });\n                  }, 101);\n                });\n              }, 100);\n            });\n          });\n        });\n      });\n    });","file":"db.test.js","skipped":false,"dir":"test"},{"name":"Can find all documents if an empty query is used","suites":["Database","Find"],"updatePoint":{"line":818,"column":56,"index":26894},"line":818,"code":"    it('Can find all documents if an empty query is used', function (done) {\n      async.waterfall([function (cb) {\n        d.insert({\n          somedata: 'ok'\n        }, function (err) {\n          d.insert({\n            somedata: 'another',\n            plus: 'additional data'\n          }, function (err) {\n            d.insert({\n              somedata: 'again'\n            }, function (err) {\n              return cb(err);\n            });\n          });\n        });\n      }, function (cb) {\n        // Test with empty object\n        d.find({}, function (err, docs) {\n          assert.isNull(err);\n          docs.length.should.equal(3);\n          _.pluck(docs, 'somedata').should.contain('ok');\n          _.pluck(docs, 'somedata').should.contain('another');\n          _.find(docs, function (d) {\n            return d.somedata === 'another';\n          }).plus.should.equal('additional data');\n          _.pluck(docs, 'somedata').should.contain('again');\n          return cb();\n        });\n      }], done);\n    });","file":"db.test.js","skipped":false,"dir":"test"},{"name":"Can find all documents matching a basic query","suites":["Database","Find"],"updatePoint":{"line":849,"column":53,"index":27904},"line":849,"code":"    it('Can find all documents matching a basic query', function (done) {\n      async.waterfall([function (cb) {\n        d.insert({\n          somedata: 'ok'\n        }, function (err) {\n          d.insert({\n            somedata: 'again',\n            plus: 'additional data'\n          }, function (err) {\n            d.insert({\n              somedata: 'again'\n            }, function (err) {\n              return cb(err);\n            });\n          });\n        });\n      }, function (cb) {\n        // Test with query that will return docs\n        d.find({\n          somedata: 'again'\n        }, function (err, docs) {\n          assert.isNull(err);\n          docs.length.should.equal(2);\n          _.pluck(docs, 'somedata').should.not.contain('ok');\n          return cb();\n        });\n      }, function (cb) {\n        // Test with query that doesn't match anything\n        d.find({\n          somedata: 'nope'\n        }, function (err, docs) {\n          assert.isNull(err);\n          docs.length.should.equal(0);\n          return cb();\n        });\n      }], done);\n    });","file":"db.test.js","skipped":false,"dir":"test"},{"name":"Can find one document matching a basic query and return null if none is found","suites":["Database","Find"],"updatePoint":{"line":886,"column":85,"index":29004},"line":886,"code":"    it('Can find one document matching a basic query and return null if none is found', function (done) {\n      async.waterfall([function (cb) {\n        d.insert({\n          somedata: 'ok'\n        }, function (err) {\n          d.insert({\n            somedata: 'again',\n            plus: 'additional data'\n          }, function (err) {\n            d.insert({\n              somedata: 'again'\n            }, function (err) {\n              return cb(err);\n            });\n          });\n        });\n      }, function (cb) {\n        // Test with query that will return docs\n        d.findOne({\n          somedata: 'ok'\n        }, function (err, doc) {\n          assert.isNull(err);\n          Object.keys(doc).length.should.equal(2);\n          doc.somedata.should.equal('ok');\n          assert.isDefined(doc._id);\n          return cb();\n        });\n      }, function (cb) {\n        // Test with query that doesn't match anything\n        d.findOne({\n          somedata: 'nope'\n        }, function (err, doc) {\n          assert.isNull(err);\n          assert.isNull(doc);\n          return cb();\n        });\n      }], done);\n    });","file":"db.test.js","skipped":false,"dir":"test"},{"name":"Can find dates and objects (non JS-native types)","suites":["Database","Find"],"updatePoint":{"line":924,"column":56,"index":30097},"line":924,"code":"    it('Can find dates and objects (non JS-native types)', function (done) {\n      var date1 = new Date(1234543),\n        date2 = new Date(9999);\n      d.insert({\n        now: date1,\n        sth: {\n          name: 'nedb'\n        }\n      }, function () {\n        d.findOne({\n          now: date1\n        }, function (err, doc) {\n          assert.isNull(err);\n          doc.sth.name.should.equal('nedb');\n          d.findOne({\n            now: date2\n          }, function (err, doc) {\n            assert.isNull(err);\n            assert.isNull(doc);\n            d.findOne({\n              sth: {\n                name: 'nedb'\n              }\n            }, function (err, doc) {\n              assert.isNull(err);\n              doc.sth.name.should.equal('nedb');\n              d.findOne({\n                sth: {\n                  name: 'other'\n                }\n              }, function (err, doc) {\n                assert.isNull(err);\n                assert.isNull(doc);\n                done();\n              });\n            });\n          });\n        });\n      });\n    });","file":"db.test.js","skipped":false,"dir":"test"},{"name":"Can use dot-notation to query subfields","suites":["Database","Find"],"updatePoint":{"line":964,"column":47,"index":31157},"line":964,"code":"    it('Can use dot-notation to query subfields', function (done) {\n      d.insert({\n        greeting: {\n          english: 'hello'\n        }\n      }, function () {\n        d.findOne({\n          \"greeting.english\": 'hello'\n        }, function (err, doc) {\n          assert.isNull(err);\n          doc.greeting.english.should.equal('hello');\n          d.findOne({\n            \"greeting.english\": 'hellooo'\n          }, function (err, doc) {\n            assert.isNull(err);\n            assert.isNull(doc);\n            d.findOne({\n              \"greeting.englis\": 'hello'\n            }, function (err, doc) {\n              assert.isNull(err);\n              assert.isNull(doc);\n              done();\n            });\n          });\n        });\n      });\n    });","file":"db.test.js","skipped":false,"dir":"test"},{"name":"Array fields match if any element matches","suites":["Database","Find"],"updatePoint":{"line":991,"column":49,"index":31914},"line":991,"code":"    it('Array fields match if any element matches', function (done) {\n      d.insert({\n        fruits: ['pear', 'apple', 'banana']\n      }, function (err, doc1) {\n        d.insert({\n          fruits: ['coconut', 'orange', 'pear']\n        }, function (err, doc2) {\n          d.insert({\n            fruits: ['banana']\n          }, function (err, doc3) {\n            d.find({\n              fruits: 'pear'\n            }, function (err, docs) {\n              assert.isNull(err);\n              docs.length.should.equal(2);\n              _.pluck(docs, '_id').should.contain(doc1._id);\n              _.pluck(docs, '_id').should.contain(doc2._id);\n              d.find({\n                fruits: 'banana'\n              }, function (err, docs) {\n                assert.isNull(err);\n                docs.length.should.equal(2);\n                _.pluck(docs, '_id').should.contain(doc1._id);\n                _.pluck(docs, '_id').should.contain(doc3._id);\n                d.find({\n                  fruits: 'doesntexist'\n                }, function (err, docs) {\n                  assert.isNull(err);\n                  docs.length.should.equal(0);\n                  done();\n                });\n              });\n            });\n          });\n        });\n      });\n    });","file":"db.test.js","skipped":false,"dir":"test"},{"name":"Returns an error if the query is not well formed","suites":["Database","Find"],"updatePoint":{"line":1028,"column":56,"index":33179},"line":1028,"code":"    it('Returns an error if the query is not well formed', function (done) {\n      d.insert({\n        hello: 'world'\n      }, function () {\n        d.find({\n          $or: {\n            hello: 'world'\n          }\n        }, function (err, docs) {\n          assert.isDefined(err);\n          assert.isUndefined(docs);\n          d.findOne({\n            $or: {\n              hello: 'world'\n            }\n          }, function (err, doc) {\n            assert.isDefined(err);\n            assert.isUndefined(doc);\n            done();\n          });\n        });\n      });\n    });","file":"db.test.js","skipped":false,"dir":"test"},{"name":"Changing the documents returned by find or findOne do not change the database state","suites":["Database","Find"],"updatePoint":{"line":1051,"column":91,"index":33785},"line":1051,"code":"    it('Changing the documents returned by find or findOne do not change the database state', function (done) {\n      d.insert({\n        a: 2,\n        hello: 'world'\n      }, function () {\n        d.findOne({\n          a: 2\n        }, function (err, doc) {\n          doc.hello = 'changed';\n          d.findOne({\n            a: 2\n          }, function (err, doc) {\n            doc.hello.should.equal('world');\n            d.find({\n              a: 2\n            }, function (err, docs) {\n              docs[0].hello = 'changed';\n              d.findOne({\n                a: 2\n              }, function (err, doc) {\n                doc.hello.should.equal('world');\n                done();\n              });\n            });\n          });\n        });\n      });\n    });","file":"db.test.js","skipped":false,"dir":"test"},{"name":"Can use sort, skip and limit if the callback is not passed to find but to exec","suites":["Database","Find"],"updatePoint":{"line":1079,"column":86,"index":34545},"line":1079,"code":"    it('Can use sort, skip and limit if the callback is not passed to find but to exec', function (done) {\n      d.insert({\n        a: 2,\n        hello: 'world'\n      }, function () {\n        d.insert({\n          a: 24,\n          hello: 'earth'\n        }, function () {\n          d.insert({\n            a: 13,\n            hello: 'blueplanet'\n          }, function () {\n            d.insert({\n              a: 15,\n              hello: 'home'\n            }, function () {\n              d.find({}).sort({\n                a: 1\n              }).limit(2).exec(function (err, docs) {\n                assert.isNull(err);\n                docs.length.should.equal(2);\n                docs[0].hello.should.equal('world');\n                docs[1].hello.should.equal('blueplanet');\n                done();\n              });\n            });\n          });\n        });\n      });\n    });","file":"db.test.js","skipped":false,"dir":"test"},{"name":"Can use sort and skip if the callback is not passed to findOne but to exec","suites":["Database","Find"],"updatePoint":{"line":1110,"column":82,"index":35412},"line":1110,"code":"    it('Can use sort and skip if the callback is not passed to findOne but to exec', function (done) {\n      d.insert({\n        a: 2,\n        hello: 'world'\n      }, function () {\n        d.insert({\n          a: 24,\n          hello: 'earth'\n        }, function () {\n          d.insert({\n            a: 13,\n            hello: 'blueplanet'\n          }, function () {\n            d.insert({\n              a: 15,\n              hello: 'home'\n            }, function () {\n              // No skip no query\n              d.findOne({}).sort({\n                a: 1\n              }).exec(function (err, doc) {\n                assert.isNull(err);\n                doc.hello.should.equal('world');\n\n                // A query\n                d.findOne({\n                  a: {\n                    $gt: 14\n                  }\n                }).sort({\n                  a: 1\n                }).exec(function (err, doc) {\n                  assert.isNull(err);\n                  doc.hello.should.equal('home');\n\n                  // And a skip\n                  d.findOne({\n                    a: {\n                      $gt: 14\n                    }\n                  }).sort({\n                    a: 1\n                  }).skip(1).exec(function (err, doc) {\n                    assert.isNull(err);\n                    doc.hello.should.equal('earth');\n\n                    // No result\n                    d.findOne({\n                      a: {\n                        $gt: 14\n                      }\n                    }).sort({\n                      a: 1\n                    }).skip(2).exec(function (err, doc) {\n                      assert.isNull(err);\n                      assert.isNull(doc);\n                      done();\n                    });\n                  });\n                });\n              });\n            });\n          });\n        });\n      });\n    });","file":"db.test.js","skipped":false,"dir":"test"},{"name":"Can use projections in find, normal or cursor way","suites":["Database","Find"],"updatePoint":{"line":1176,"column":57,"index":37246},"line":1176,"code":"    it('Can use projections in find, normal or cursor way', function (done) {\n      d.insert({\n        a: 2,\n        hello: 'world'\n      }, function (err, doc0) {\n        d.insert({\n          a: 24,\n          hello: 'earth'\n        }, function (err, doc1) {\n          d.find({\n            a: 2\n          }, {\n            a: 0,\n            _id: 0\n          }, function (err, docs) {\n            assert.isNull(err);\n            docs.length.should.equal(1);\n            assert.deepEqual(docs[0], {\n              hello: 'world'\n            });\n            d.find({\n              a: 2\n            }, {\n              a: 0,\n              _id: 0\n            }).exec(function (err, docs) {\n              assert.isNull(err);\n              docs.length.should.equal(1);\n              assert.deepEqual(docs[0], {\n                hello: 'world'\n              });\n\n              // Can't use both modes at once if not _id\n              d.find({\n                a: 2\n              }, {\n                a: 0,\n                hello: 1\n              }, function (err, docs) {\n                assert.isNotNull(err);\n                assert.isUndefined(docs);\n                d.find({\n                  a: 2\n                }, {\n                  a: 0,\n                  hello: 1\n                }).exec(function (err, docs) {\n                  assert.isNotNull(err);\n                  assert.isUndefined(docs);\n                  done();\n                });\n              });\n            });\n          });\n        });\n      });\n    });","file":"db.test.js","skipped":false,"dir":"test"},{"name":"Can use projections in findOne, normal or cursor way","suites":["Database","Find"],"updatePoint":{"line":1233,"column":60,"index":38764},"line":1233,"code":"    it('Can use projections in findOne, normal or cursor way', function (done) {\n      d.insert({\n        a: 2,\n        hello: 'world'\n      }, function (err, doc0) {\n        d.insert({\n          a: 24,\n          hello: 'earth'\n        }, function (err, doc1) {\n          d.findOne({\n            a: 2\n          }, {\n            a: 0,\n            _id: 0\n          }, function (err, doc) {\n            assert.isNull(err);\n            assert.deepEqual(doc, {\n              hello: 'world'\n            });\n            d.findOne({\n              a: 2\n            }, {\n              a: 0,\n              _id: 0\n            }).exec(function (err, doc) {\n              assert.isNull(err);\n              assert.deepEqual(doc, {\n                hello: 'world'\n              });\n\n              // Can't use both modes at once if not _id\n              d.findOne({\n                a: 2\n              }, {\n                a: 0,\n                hello: 1\n              }, function (err, doc) {\n                assert.isNotNull(err);\n                assert.isUndefined(doc);\n                d.findOne({\n                  a: 2\n                }, {\n                  a: 0,\n                  hello: 1\n                }).exec(function (err, doc) {\n                  assert.isNotNull(err);\n                  assert.isUndefined(doc);\n                  done();\n                });\n              });\n            });\n          });\n        });\n      });\n    });","file":"db.test.js","skipped":false,"dir":"test"},{"name":"Count all documents if an empty query is used","suites":["Database","Count"],"updatePoint":{"line":1291,"column":53,"index":40260},"line":1291,"code":"    it('Count all documents if an empty query is used', function (done) {\n      async.waterfall([function (cb) {\n        d.insert({\n          somedata: 'ok'\n        }, function (err) {\n          d.insert({\n            somedata: 'another',\n            plus: 'additional data'\n          }, function (err) {\n            d.insert({\n              somedata: 'again'\n            }, function (err) {\n              return cb(err);\n            });\n          });\n        });\n      }, function (cb) {\n        // Test with empty object\n        d.count({}, function (err, docs) {\n          assert.isNull(err);\n          docs.should.equal(3);\n          return cb();\n        });\n      }], done);\n    });","file":"db.test.js","skipped":false,"dir":"test"},{"name":"Count all documents matching a basic query","suites":["Database","Count"],"updatePoint":{"line":1316,"column":50,"index":40945},"line":1316,"code":"    it('Count all documents matching a basic query', function (done) {\n      async.waterfall([function (cb) {\n        d.insert({\n          somedata: 'ok'\n        }, function (err) {\n          d.insert({\n            somedata: 'again',\n            plus: 'additional data'\n          }, function (err) {\n            d.insert({\n              somedata: 'again'\n            }, function (err) {\n              return cb(err);\n            });\n          });\n        });\n      }, function (cb) {\n        // Test with query that will return docs\n        d.count({\n          somedata: 'again'\n        }, function (err, docs) {\n          assert.isNull(err);\n          docs.should.equal(2);\n          return cb();\n        });\n      }, function (cb) {\n        // Test with query that doesn't match anything\n        d.count({\n          somedata: 'nope'\n        }, function (err, docs) {\n          assert.isNull(err);\n          docs.should.equal(0);\n          return cb();\n        });\n      }], done);\n    });","file":"db.test.js","skipped":false,"dir":"test"},{"name":"Array fields match if any element matches","suites":["Database","Count"],"updatePoint":{"line":1352,"column":49,"index":41935},"line":1352,"code":"    it('Array fields match if any element matches', function (done) {\n      d.insert({\n        fruits: ['pear', 'apple', 'banana']\n      }, function (err, doc1) {\n        d.insert({\n          fruits: ['coconut', 'orange', 'pear']\n        }, function (err, doc2) {\n          d.insert({\n            fruits: ['banana']\n          }, function (err, doc3) {\n            d.count({\n              fruits: 'pear'\n            }, function (err, docs) {\n              assert.isNull(err);\n              docs.should.equal(2);\n              d.count({\n                fruits: 'banana'\n              }, function (err, docs) {\n                assert.isNull(err);\n                docs.should.equal(2);\n                d.count({\n                  fruits: 'doesntexist'\n                }, function (err, docs) {\n                  assert.isNull(err);\n                  docs.should.equal(0);\n                  done();\n                });\n              });\n            });\n          });\n        });\n      });\n    });","file":"db.test.js","skipped":false,"dir":"test"},{"name":"Returns an error if the query is not well formed","suites":["Database","Count"],"updatePoint":{"line":1385,"column":56,"index":42934},"line":1385,"code":"    it('Returns an error if the query is not well formed', function (done) {\n      d.insert({\n        hello: 'world'\n      }, function () {\n        d.count({\n          $or: {\n            hello: 'world'\n          }\n        }, function (err, docs) {\n          assert.isDefined(err);\n          assert.isUndefined(docs);\n          done();\n        });\n      });\n    });","file":"db.test.js","skipped":false,"dir":"test"},{"name":"If the query doesn't match anything, database is not modified","suites":["Database","Update"],"updatePoint":{"line":1402,"column":69,"index":43353},"line":1402,"code":"    it(\"If the query doesn't match anything, database is not modified\", function (done) {\n      async.waterfall([function (cb) {\n        d.insert({\n          somedata: 'ok'\n        }, function (err) {\n          d.insert({\n            somedata: 'again',\n            plus: 'additional data'\n          }, function (err) {\n            d.insert({\n              somedata: 'another'\n            }, function (err) {\n              return cb(err);\n            });\n          });\n        });\n      }, function (cb) {\n        // Test with query that doesn't match anything\n        d.update({\n          somedata: 'nope'\n        }, {\n          newDoc: 'yes'\n        }, {\n          multi: true\n        }, function (err, n) {\n          assert.isNull(err);\n          n.should.equal(0);\n          d.find({}, function (err, docs) {\n            var doc1 = _.find(docs, function (d) {\n                return d.somedata === 'ok';\n              }),\n              doc2 = _.find(docs, function (d) {\n                return d.somedata === 'again';\n              }),\n              doc3 = _.find(docs, function (d) {\n                return d.somedata === 'another';\n              });\n            docs.length.should.equal(3);\n            assert.isUndefined(_.find(docs, function (d) {\n              return d.newDoc === 'yes';\n            }));\n            assert.deepEqual(doc1, {\n              _id: doc1._id,\n              somedata: 'ok'\n            });\n            assert.deepEqual(doc2, {\n              _id: doc2._id,\n              somedata: 'again',\n              plus: 'additional data'\n            });\n            assert.deepEqual(doc3, {\n              _id: doc3._id,\n              somedata: 'another'\n            });\n            return cb();\n          });\n        });\n      }], done);\n    });","file":"db.test.js","skipped":false,"dir":"test"},{"name":"If timestampData option is set, update the updatedAt field","suites":["Database","Update"],"updatePoint":{"line":1461,"column":66,"index":45119},"line":1461,"code":"    it(\"If timestampData option is set, update the updatedAt field\", function (done) {\n      var beginning = Date.now();\n      d = new Datastore({\n        filename: testDb,\n        autoload: true,\n        timestampData: true\n      });\n      d.insert({\n        hello: 'world'\n      }, function (err, insertedDoc) {\n        assert.isBelow(insertedDoc.updatedAt.getTime() - beginning, reloadTimeUpperBound);\n        assert.isBelow(insertedDoc.createdAt.getTime() - beginning, reloadTimeUpperBound);\n        Object.keys(insertedDoc).length.should.equal(4);\n\n        // Wait 100ms before performing the update\n        setTimeout(function () {\n          var step1 = Date.now();\n          d.update({\n            _id: insertedDoc._id\n          }, {\n            $set: {\n              hello: 'mars'\n            }\n          }, {}, function () {\n            d.find({\n              _id: insertedDoc._id\n            }, function (err, docs) {\n              docs.length.should.equal(1);\n              Object.keys(docs[0]).length.should.equal(4);\n              docs[0]._id.should.equal(insertedDoc._id);\n              docs[0].createdAt.should.equal(insertedDoc.createdAt);\n              docs[0].hello.should.equal('mars');\n              assert.isAbove(docs[0].updatedAt.getTime() - beginning, 99); // updatedAt modified\n              assert.isBelow(docs[0].updatedAt.getTime() - step1, reloadTimeUpperBound); // updatedAt modified\n\n              done();\n            });\n          });\n        }, 100);\n      });\n    });","file":"db.test.js","skipped":false,"dir":"test"},{"name":"Can update multiple documents matching the query","suites":["Database","Update"],"updatePoint":{"line":1502,"column":56,"index":46611},"line":1502,"code":"    it(\"Can update multiple documents matching the query\", function (done) {\n      var id1, id2, id3;\n\n      // Test DB state after update and reload\n      function testPostUpdateState(cb) {\n        d.find({}, function (err, docs) {\n          var doc1 = _.find(docs, function (d) {\n              return d._id === id1;\n            }),\n            doc2 = _.find(docs, function (d) {\n              return d._id === id2;\n            }),\n            doc3 = _.find(docs, function (d) {\n              return d._id === id3;\n            });\n          docs.length.should.equal(3);\n          Object.keys(doc1).length.should.equal(2);\n          doc1.somedata.should.equal('ok');\n          doc1._id.should.equal(id1);\n          Object.keys(doc2).length.should.equal(2);\n          doc2.newDoc.should.equal('yes');\n          doc2._id.should.equal(id2);\n          Object.keys(doc3).length.should.equal(2);\n          doc3.newDoc.should.equal('yes');\n          doc3._id.should.equal(id3);\n          return cb();\n        });\n      }\n\n      // Actually launch the tests\n      async.waterfall([function (cb) {\n        d.insert({\n          somedata: 'ok'\n        }, function (err, doc1) {\n          id1 = doc1._id;\n          d.insert({\n            somedata: 'again',\n            plus: 'additional data'\n          }, function (err, doc2) {\n            id2 = doc2._id;\n            d.insert({\n              somedata: 'again'\n            }, function (err, doc3) {\n              id3 = doc3._id;\n              return cb(err);\n            });\n          });\n        });\n      }, function (cb) {\n        d.update({\n          somedata: 'again'\n        }, {\n          newDoc: 'yes'\n        }, {\n          multi: true\n        }, function (err, n) {\n          assert.isNull(err);\n          n.should.equal(2);\n          return cb();\n        });\n      }, async.apply(testPostUpdateState), function (cb) {\n        d.loadDatabase(function (err) {\n          cb(err);\n        });\n      }, async.apply(testPostUpdateState)], done);\n    });","file":"db.test.js","skipped":false,"dir":"test"},{"name":"Can update only one document matching the query","suites":["Database","Update"],"updatePoint":{"line":1568,"column":55,"index":48608},"line":1568,"code":"    it(\"Can update only one document matching the query\", function (done) {\n      var id1, id2, id3;\n\n      // Test DB state after update and reload\n      function testPostUpdateState(cb) {\n        d.find({}, function (err, docs) {\n          var doc1 = _.find(docs, function (d) {\n              return d._id === id1;\n            }),\n            doc2 = _.find(docs, function (d) {\n              return d._id === id2;\n            }),\n            doc3 = _.find(docs, function (d) {\n              return d._id === id3;\n            });\n          docs.length.should.equal(3);\n          assert.deepEqual(doc1, {\n            somedata: 'ok',\n            _id: doc1._id\n          });\n\n          // doc2 or doc3 was modified. Since we sort on _id and it is random\n          // it can be either of two situations\n          try {\n            assert.deepEqual(doc2, {\n              newDoc: 'yes',\n              _id: doc2._id\n            });\n            assert.deepEqual(doc3, {\n              somedata: 'again',\n              _id: doc3._id\n            });\n          } catch (e) {\n            assert.deepEqual(doc2, {\n              somedata: 'again',\n              plus: 'additional data',\n              _id: doc2._id\n            });\n            assert.deepEqual(doc3, {\n              newDoc: 'yes',\n              _id: doc3._id\n            });\n          }\n          return cb();\n        });\n      }\n\n      // Actually launch the test\n      async.waterfall([function (cb) {\n        d.insert({\n          somedata: 'ok'\n        }, function (err, doc1) {\n          id1 = doc1._id;\n          d.insert({\n            somedata: 'again',\n            plus: 'additional data'\n          }, function (err, doc2) {\n            id2 = doc2._id;\n            d.insert({\n              somedata: 'again'\n            }, function (err, doc3) {\n              id3 = doc3._id;\n              return cb(err);\n            });\n          });\n        });\n      }, function (cb) {\n        // Test with query that doesn't match anything\n        d.update({\n          somedata: 'again'\n        }, {\n          newDoc: 'yes'\n        }, {\n          multi: false\n        }, function (err, n) {\n          assert.isNull(err);\n          n.should.equal(1);\n          return cb();\n        });\n      }, async.apply(testPostUpdateState), function (cb) {\n        d.loadDatabase(function (err) {\n          return cb(err);\n        });\n      }, async.apply(testPostUpdateState) // The persisted state has been updated\n      ], done);\n    });","file":"db.test.js","skipped":false,"dir":"test"},{"name":"Can perform upserts if needed","suites":["Database","Update","Upserts"],"updatePoint":{"line":1655,"column":39,"index":51105},"line":1655,"code":"      it('Can perform upserts if needed', function (done) {\n        d.update({\n          impossible: 'db is empty anyway'\n        }, {\n          newDoc: true\n        }, {}, function (err, nr, upsert) {\n          assert.isNull(err);\n          nr.should.equal(0);\n          assert.isUndefined(upsert);\n          d.find({}, function (err, docs) {\n            docs.length.should.equal(0); // Default option for upsert is false\n\n            d.update({\n              impossible: 'db is empty anyway'\n            }, {\n              something: \"created ok\"\n            }, {\n              upsert: true\n            }, function (err, nr, newDoc) {\n              assert.isNull(err);\n              nr.should.equal(1);\n              newDoc.something.should.equal(\"created ok\");\n              assert.isDefined(newDoc._id);\n              d.find({}, function (err, docs) {\n                docs.length.should.equal(1); // Default option for upsert is false\n                docs[0].something.should.equal(\"created ok\");\n\n                // Modifying the returned upserted document doesn't modify the database\n                newDoc.newField = true;\n                d.find({}, function (err, docs) {\n                  docs[0].something.should.equal(\"created ok\");\n                  assert.isUndefined(docs[0].newField);\n                  done();\n                });\n              });\n            });\n          });\n        });\n      });","file":"db.test.js","skipped":false,"dir":"test"},{"name":"If the update query is a normal object with no modifiers, it is the doc that will be upserted","suites":["Database","Update","Upserts"],"updatePoint":{"line":1694,"column":103,"index":52585},"line":1694,"code":"      it('If the update query is a normal object with no modifiers, it is the doc that will be upserted', function (done) {\n        d.update({\n          $or: [{\n            a: 4\n          }, {\n            a: 5\n          }]\n        }, {\n          hello: 'world',\n          bloup: 'blap'\n        }, {\n          upsert: true\n        }, function (err) {\n          d.find({}, function (err, docs) {\n            assert.isNull(err);\n            docs.length.should.equal(1);\n            var doc = docs[0];\n            Object.keys(doc).length.should.equal(3);\n            doc.hello.should.equal('world');\n            doc.bloup.should.equal('blap');\n            done();\n          });\n        });\n      });","file":"db.test.js","skipped":false,"dir":"test"},{"name":"If the update query contains modifiers, it is applied to the object resulting from removing all operators from the find query 1","suites":["Database","Update","Upserts"],"updatePoint":{"line":1718,"column":137,"index":53315},"line":1718,"code":"      it('If the update query contains modifiers, it is applied to the object resulting from removing all operators from the find query 1', function (done) {\n        d.update({\n          $or: [{\n            a: 4\n          }, {\n            a: 5\n          }]\n        }, {\n          $set: {\n            hello: 'world'\n          },\n          $inc: {\n            bloup: 3\n          }\n        }, {\n          upsert: true\n        }, function (err) {\n          d.find({\n            hello: 'world'\n          }, function (err, docs) {\n            assert.isNull(err);\n            docs.length.should.equal(1);\n            var doc = docs[0];\n            Object.keys(doc).length.should.equal(3);\n            doc.hello.should.equal('world');\n            doc.bloup.should.equal(3);\n            done();\n          });\n        });\n      });","file":"db.test.js","skipped":false,"dir":"test"},{"name":"If the update query contains modifiers, it is applied to the object resulting from removing all operators from the find query 2","suites":["Database","Update","Upserts"],"updatePoint":{"line":1748,"column":137,"index":54137},"line":1748,"code":"      it('If the update query contains modifiers, it is applied to the object resulting from removing all operators from the find query 2', function (done) {\n        d.update({\n          $or: [{\n            a: 4\n          }, {\n            a: 5\n          }],\n          cac: 'rrr'\n        }, {\n          $set: {\n            hello: 'world'\n          },\n          $inc: {\n            bloup: 3\n          }\n        }, {\n          upsert: true\n        }, function (err) {\n          d.find({\n            hello: 'world'\n          }, function (err, docs) {\n            assert.isNull(err);\n            docs.length.should.equal(1);\n            var doc = docs[0];\n            Object.keys(doc).length.should.equal(4);\n            doc.cac.should.equal('rrr');\n            doc.hello.should.equal('world');\n            doc.bloup.should.equal(3);\n            done();\n          });\n        });\n      });","file":"db.test.js","skipped":false,"dir":"test"},{"name":"Performing upsert with badly formatted fields yields a standard error not an exception","suites":["Database","Update","Upserts"],"updatePoint":{"line":1780,"column":96,"index":54981},"line":1780,"code":"      it('Performing upsert with badly formatted fields yields a standard error not an exception', function (done) {\n        d.update({\n          _id: '1234'\n        }, {\n          $set: {\n            $$badfield: 5\n          }\n        }, {\n          upsert: true\n        }, function (err, doc) {\n          assert.isDefined(err);\n          done();\n        });\n      });","file":"db.test.js","skipped":false,"dir":"test"},{"name":"Cannot perform update if the update query is not either registered-modifiers-only or copy-only, or contain badly formatted fields","suites":["Database","Update","Upserts"],"updatePoint":{"line":1796,"column":137,"index":55433},"line":1796,"code":"    it('Cannot perform update if the update query is not either registered-modifiers-only or copy-only, or contain badly formatted fields', function (done) {\n      d.insert({\n        something: 'yup'\n      }, function () {\n        d.update({}, {\n          boom: {\n            $badfield: 5\n          }\n        }, {\n          multi: false\n        }, function (err) {\n          assert.isDefined(err);\n          d.update({}, {\n            boom: {\n              \"bad.field\": 5\n            }\n          }, {\n            multi: false\n          }, function (err) {\n            assert.isDefined(err);\n            d.update({}, {\n              $inc: {\n                test: 5\n              },\n              mixed: 'rrr'\n            }, {\n              multi: false\n            }, function (err) {\n              assert.isDefined(err);\n              d.update({}, {\n                $inexistent: {\n                  test: 5\n                }\n              }, {\n                multi: false\n              }, function (err) {\n                assert.isDefined(err);\n                done();\n              });\n            });\n          });\n        });\n      });\n    });","file":"db.test.js","skipped":false,"dir":"test"},{"name":"Can update documents using multiple modifiers","suites":["Database","Update","Upserts"],"updatePoint":{"line":1840,"column":53,"index":56497},"line":1840,"code":"    it('Can update documents using multiple modifiers', function (done) {\n      var id;\n      d.insert({\n        something: 'yup',\n        other: 40\n      }, function (err, newDoc) {\n        id = newDoc._id;\n        d.update({}, {\n          $set: {\n            something: 'changed'\n          },\n          $inc: {\n            other: 10\n          }\n        }, {\n          multi: false\n        }, function (err, nr) {\n          assert.isNull(err);\n          nr.should.equal(1);\n          d.findOne({\n            _id: id\n          }, function (err, doc) {\n            Object.keys(doc).length.should.equal(3);\n            doc._id.should.equal(id);\n            doc.something.should.equal('changed');\n            doc.other.should.equal(50);\n            done();\n          });\n        });\n      });\n    });","file":"db.test.js","skipped":false,"dir":"test"},{"name":"Can upsert a document even with modifiers","suites":["Database","Update","Upserts"],"updatePoint":{"line":1871,"column":49,"index":57291},"line":1871,"code":"    it('Can upsert a document even with modifiers', function (done) {\n      d.update({\n        bloup: 'blap'\n      }, {\n        $set: {\n          hello: 'world'\n        }\n      }, {\n        upsert: true\n      }, function (err, nr, newDoc) {\n        assert.isNull(err);\n        nr.should.equal(1);\n        newDoc.bloup.should.equal('blap');\n        newDoc.hello.should.equal('world');\n        assert.isDefined(newDoc._id);\n        d.find({}, function (err, docs) {\n          docs.length.should.equal(1);\n          Object.keys(docs[0]).length.should.equal(3);\n          docs[0].hello.should.equal('world');\n          docs[0].bloup.should.equal('blap');\n          assert.isDefined(docs[0]._id);\n          done();\n        });\n      });\n    });","file":"db.test.js","skipped":false,"dir":"test"},{"name":"When using modifiers, the only way to update subdocs is with the dot-notation","suites":["Database","Update","Upserts"],"updatePoint":{"line":1896,"column":85,"index":58067},"line":1896,"code":"    it('When using modifiers, the only way to update subdocs is with the dot-notation', function (done) {\n      d.insert({\n        bloup: {\n          blip: \"blap\",\n          other: true\n        }\n      }, function () {\n        // Correct methos\n        d.update({}, {\n          $set: {\n            \"bloup.blip\": \"hello\"\n          }\n        }, {}, function () {\n          d.findOne({}, function (err, doc) {\n            doc.bloup.blip.should.equal(\"hello\");\n            doc.bloup.other.should.equal(true);\n\n            // Wrong\n            d.update({}, {\n              $set: {\n                bloup: {\n                  blip: \"ola\"\n                }\n              }\n            }, {}, function () {\n              d.findOne({}, function (err, doc) {\n                doc.bloup.blip.should.equal(\"ola\");\n                assert.isUndefined(doc.bloup.other); // This information was lost\n\n                done();\n              });\n            });\n          });\n        });\n      });\n    });","file":"db.test.js","skipped":false,"dir":"test"},{"name":"Returns an error if the query is not well formed","suites":["Database","Update","Upserts"],"updatePoint":{"line":1932,"column":56,"index":59023},"line":1932,"code":"    it('Returns an error if the query is not well formed', function (done) {\n      d.insert({\n        hello: 'world'\n      }, function () {\n        d.update({\n          $or: {\n            hello: 'world'\n          }\n        }, {\n          a: 1\n        }, {}, function (err, nr, upsert) {\n          assert.isDefined(err);\n          assert.isUndefined(nr);\n          assert.isUndefined(upsert);\n          done();\n        });\n      });\n    });","file":"db.test.js","skipped":false,"dir":"test"},{"name":"If an error is thrown by a modifier, the database state is not changed","suites":["Database","Update","Upserts"],"updatePoint":{"line":1950,"column":78,"index":59485},"line":1950,"code":"    it('If an error is thrown by a modifier, the database state is not changed', function (done) {\n      d.insert({\n        hello: 'world'\n      }, function (err, newDoc) {\n        d.update({}, {\n          $inc: {\n            hello: 4\n          }\n        }, {}, function (err, nr) {\n          assert.isDefined(err);\n          assert.isUndefined(nr);\n          d.find({}, function (err, docs) {\n            assert.deepEqual(docs, [{\n              _id: newDoc._id,\n              hello: 'world'\n            }]);\n            done();\n          });\n        });\n      });\n    });","file":"db.test.js","skipped":false,"dir":"test"},{"name":"Cant change the _id of a document","suites":["Database","Update","Upserts"],"updatePoint":{"line":1971,"column":41,"index":60021},"line":1971,"code":"    it('Cant change the _id of a document', function (done) {\n      d.insert({\n        a: 2\n      }, function (err, newDoc) {\n        d.update({\n          a: 2\n        }, {\n          a: 2,\n          _id: 'nope'\n        }, {}, function (err) {\n          assert.isDefined(err);\n          d.find({}, function (err, docs) {\n            docs.length.should.equal(1);\n            Object.keys(docs[0]).length.should.equal(2);\n            docs[0].a.should.equal(2);\n            docs[0]._id.should.equal(newDoc._id);\n            d.update({\n              a: 2\n            }, {\n              $set: {\n                _id: 'nope'\n              }\n            }, {}, function (err) {\n              assert.isDefined(err);\n              d.find({}, function (err, docs) {\n                docs.length.should.equal(1);\n                Object.keys(docs[0]).length.should.equal(2);\n                docs[0].a.should.equal(2);\n                docs[0]._id.should.equal(newDoc._id);\n                done();\n              });\n            });\n          });\n        });\n      });\n    });","file":"db.test.js","skipped":false,"dir":"test"},{"name":"Non-multi updates are persistent","suites":["Database","Update","Upserts"],"updatePoint":{"line":2007,"column":40,"index":61078},"line":2007,"code":"    it('Non-multi updates are persistent', function (done) {\n      d.insert({\n        a: 1,\n        hello: 'world'\n      }, function (err, doc1) {\n        d.insert({\n          a: 2,\n          hello: 'earth'\n        }, function (err, doc2) {\n          d.update({\n            a: 2\n          }, {\n            $set: {\n              hello: 'changed'\n            }\n          }, {}, function (err) {\n            assert.isNull(err);\n            d.find({}, function (err, docs) {\n              docs.sort(function (a, b) {\n                return a.a - b.a;\n              });\n              docs.length.should.equal(2);\n              _.isEqual(docs[0], {\n                _id: doc1._id,\n                a: 1,\n                hello: 'world'\n              }).should.equal(true);\n              _.isEqual(docs[1], {\n                _id: doc2._id,\n                a: 2,\n                hello: 'changed'\n              }).should.equal(true);\n\n              // Even after a reload the database state hasn't changed\n              d.loadDatabase(function (err) {\n                assert.isNull(err);\n                d.find({}, function (err, docs) {\n                  docs.sort(function (a, b) {\n                    return a.a - b.a;\n                  });\n                  docs.length.should.equal(2);\n                  _.isEqual(docs[0], {\n                    _id: doc1._id,\n                    a: 1,\n                    hello: 'world'\n                  }).should.equal(true);\n                  _.isEqual(docs[1], {\n                    _id: doc2._id,\n                    a: 2,\n                    hello: 'changed'\n                  }).should.equal(true);\n                  done();\n                });\n              });\n            });\n          });\n        });\n      });\n    });","file":"db.test.js","skipped":false,"dir":"test"},{"name":"Multi updates are persistent","suites":["Database","Update","Upserts"],"updatePoint":{"line":2066,"column":36,"index":62831},"line":2066,"code":"    it('Multi updates are persistent', function (done) {\n      d.insert({\n        a: 1,\n        hello: 'world'\n      }, function (err, doc1) {\n        d.insert({\n          a: 2,\n          hello: 'earth'\n        }, function (err, doc2) {\n          d.insert({\n            a: 5,\n            hello: 'pluton'\n          }, function (err, doc3) {\n            d.update({\n              a: {\n                $in: [1, 2]\n              }\n            }, {\n              $set: {\n                hello: 'changed'\n              }\n            }, {\n              multi: true\n            }, function (err) {\n              assert.isNull(err);\n              d.find({}, function (err, docs) {\n                docs.sort(function (a, b) {\n                  return a.a - b.a;\n                });\n                docs.length.should.equal(3);\n                _.isEqual(docs[0], {\n                  _id: doc1._id,\n                  a: 1,\n                  hello: 'changed'\n                }).should.equal(true);\n                _.isEqual(docs[1], {\n                  _id: doc2._id,\n                  a: 2,\n                  hello: 'changed'\n                }).should.equal(true);\n                _.isEqual(docs[2], {\n                  _id: doc3._id,\n                  a: 5,\n                  hello: 'pluton'\n                }).should.equal(true);\n\n                // Even after a reload the database state hasn't changed\n                d.loadDatabase(function (err) {\n                  assert.isNull(err);\n                  d.find({}, function (err, docs) {\n                    docs.sort(function (a, b) {\n                      return a.a - b.a;\n                    });\n                    docs.length.should.equal(3);\n                    _.isEqual(docs[0], {\n                      _id: doc1._id,\n                      a: 1,\n                      hello: 'changed'\n                    }).should.equal(true);\n                    _.isEqual(docs[1], {\n                      _id: doc2._id,\n                      a: 2,\n                      hello: 'changed'\n                    }).should.equal(true);\n                    _.isEqual(docs[2], {\n                      _id: doc3._id,\n                      a: 5,\n                      hello: 'pluton'\n                    }).should.equal(true);\n                    done();\n                  });\n                });\n              });\n            });\n          });\n        });\n      });\n    });","file":"db.test.js","skipped":false,"dir":"test"},{"name":"Can update without the options arg (will use defaults then)","suites":["Database","Update","Upserts"],"updatePoint":{"line":2144,"column":67,"index":65265},"line":2144,"code":"    it('Can update without the options arg (will use defaults then)', function (done) {\n      d.insert({\n        a: 1,\n        hello: 'world'\n      }, function (err, doc1) {\n        d.insert({\n          a: 2,\n          hello: 'earth'\n        }, function (err, doc2) {\n          d.insert({\n            a: 5,\n            hello: 'pluton'\n          }, function (err, doc3) {\n            d.update({\n              a: 2\n            }, {\n              $inc: {\n                a: 10\n              }\n            }, function (err, nr) {\n              assert.isNull(err);\n              nr.should.equal(1);\n              d.find({}, function (err, docs) {\n                var d1 = _.find(docs, function (doc) {\n                    return doc._id === doc1._id;\n                  }),\n                  d2 = _.find(docs, function (doc) {\n                    return doc._id === doc2._id;\n                  }),\n                  d3 = _.find(docs, function (doc) {\n                    return doc._id === doc3._id;\n                  });\n                d1.a.should.equal(1);\n                d2.a.should.equal(12);\n                d3.a.should.equal(5);\n                done();\n              });\n            });\n          });\n        });\n      });\n    });","file":"db.test.js","skipped":false,"dir":"test"},{"name":"If a multi update fails on one document, previous updates should be rolled back","suites":["Database","Update","Upserts"],"updatePoint":{"line":2186,"column":87,"index":66518},"line":2186,"code":"    it('If a multi update fails on one document, previous updates should be rolled back', function (done) {\n      d.ensureIndex({\n        fieldName: 'a'\n      });\n      d.insert({\n        a: 4\n      }, function (err, doc1) {\n        d.insert({\n          a: 5\n        }, function (err, doc2) {\n          d.insert({\n            a: 'abc'\n          }, function (err, doc3) {\n            // With this query, candidates are always returned in the order 4, 5, 'abc' so it's always the last one which fails\n            d.update({\n              a: {\n                $in: [4, 5, 'abc']\n              }\n            }, {\n              $inc: {\n                a: 10\n              }\n            }, {\n              multi: true\n            }, function (err) {\n              assert.isDefined(err);\n\n              // No index modified\n              _.each(d.indexes, function (index) {\n                var docs = index.getAll(),\n                  d1 = _.find(docs, function (doc) {\n                    return doc._id === doc1._id;\n                  }),\n                  d2 = _.find(docs, function (doc) {\n                    return doc._id === doc2._id;\n                  }),\n                  d3 = _.find(docs, function (doc) {\n                    return doc._id === doc3._id;\n                  });\n\n                // All changes rolled back, including those that didn't trigger an error\n                d1.a.should.equal(4);\n                d2.a.should.equal(5);\n                d3.a.should.equal('abc');\n              });\n              done();\n            });\n          });\n        });\n      });\n    });","file":"db.test.js","skipped":false,"dir":"test"},{"name":"If an index constraint is violated by an update, all changes should be rolled back","suites":["Database","Update","Upserts"],"updatePoint":{"line":2237,"column":90,"index":68112},"line":2237,"code":"    it('If an index constraint is violated by an update, all changes should be rolled back', function (done) {\n      d.ensureIndex({\n        fieldName: 'a',\n        unique: true\n      });\n      d.insert({\n        a: 4\n      }, function (err, doc1) {\n        d.insert({\n          a: 5\n        }, function (err, doc2) {\n          // With this query, candidates are always returned in the order 4, 5, 'abc' so it's always the last one which fails\n          d.update({\n            a: {\n              $in: [4, 5, 'abc']\n            }\n          }, {\n            $set: {\n              a: 10\n            }\n          }, {\n            multi: true\n          }, function (err) {\n            assert.isDefined(err);\n\n            // Check that no index was modified\n            _.each(d.indexes, function (index) {\n              var docs = index.getAll(),\n                d1 = _.find(docs, function (doc) {\n                  return doc._id === doc1._id;\n                }),\n                d2 = _.find(docs, function (doc) {\n                  return doc._id === doc2._id;\n                });\n              d1.a.should.equal(4);\n              d2.a.should.equal(5);\n            });\n            done();\n          });\n        });\n      });\n    });","file":"db.test.js","skipped":false,"dir":"test"},{"name":"If options.returnUpdatedDocs is true, return all matched docs","suites":["Database","Update","Upserts"],"updatePoint":{"line":2279,"column":69,"index":69320},"line":2279,"code":"    it(\"If options.returnUpdatedDocs is true, return all matched docs\", function (done) {\n      d.insert([{\n        a: 4\n      }, {\n        a: 5\n      }, {\n        a: 6\n      }], function (err, docs) {\n        docs.length.should.equal(3);\n        d.update({\n          a: 7\n        }, {\n          $set: {\n            u: 1\n          }\n        }, {\n          multi: true,\n          returnUpdatedDocs: true\n        }, function (err, num, updatedDocs) {\n          num.should.equal(0);\n          updatedDocs.length.should.equal(0);\n          d.update({\n            a: 5\n          }, {\n            $set: {\n              u: 2\n            }\n          }, {\n            multi: true,\n            returnUpdatedDocs: true\n          }, function (err, num, updatedDocs) {\n            num.should.equal(1);\n            updatedDocs.length.should.equal(1);\n            updatedDocs[0].a.should.equal(5);\n            updatedDocs[0].u.should.equal(2);\n            d.update({\n              a: {\n                $in: [4, 6]\n              }\n            }, {\n              $set: {\n                u: 3\n              }\n            }, {\n              multi: true,\n              returnUpdatedDocs: true\n            }, function (err, num, updatedDocs) {\n              num.should.equal(2);\n              updatedDocs.length.should.equal(2);\n              updatedDocs[0].u.should.equal(3);\n              updatedDocs[1].u.should.equal(3);\n              if (updatedDocs[0].a === 4) {\n                updatedDocs[0].a.should.equal(4);\n                updatedDocs[1].a.should.equal(6);\n              } else {\n                updatedDocs[0].a.should.equal(6);\n                updatedDocs[1].a.should.equal(4);\n              }\n              done();\n            });\n          });\n        });\n      });\n    });","file":"db.test.js","skipped":false,"dir":"test"},{"name":"createdAt property is unchanged and updatedAt correct after an update, even a complete document replacement","suites":["Database","Update","Upserts"],"updatePoint":{"line":2343,"column":115,"index":71135},"line":2343,"code":"    it(\"createdAt property is unchanged and updatedAt correct after an update, even a complete document replacement\", function (done) {\n      var d2 = new Datastore({\n        inMemoryOnly: true,\n        timestampData: true\n      });\n      d2.insert({\n        a: 1\n      });\n      d2.findOne({\n        a: 1\n      }, function (err, doc) {\n        var createdAt = doc.createdAt.getTime();\n\n        // Modifying update\n        setTimeout(function () {\n          d2.update({\n            a: 1\n          }, {\n            $set: {\n              b: 2\n            }\n          }, {});\n          d2.findOne({\n            a: 1\n          }, function (err, doc) {\n            doc.createdAt.getTime().should.equal(createdAt);\n            assert.isBelow(Date.now() - doc.updatedAt.getTime(), 5);\n\n            // Complete replacement\n            setTimeout(function () {\n              d2.update({\n                a: 1\n              }, {\n                c: 3\n              }, {});\n              d2.findOne({\n                c: 3\n              }, function (err, doc) {\n                doc.createdAt.getTime().should.equal(createdAt);\n                assert.isBelow(Date.now() - doc.updatedAt.getTime(), 5);\n                done();\n              });\n            }, 20);\n          });\n        }, 20);\n      });\n    });","file":"db.test.js","skipped":false,"dir":"test"},{"name":"Regular update, multi false","suites":["Database","Update","Callback signature"],"updatePoint":{"line":2391,"column":37,"index":72402},"line":2391,"code":"      it(\"Regular update, multi false\", function (done) {\n        d.insert({\n          a: 1\n        });\n        d.insert({\n          a: 2\n        });\n\n        // returnUpdatedDocs set to false\n        d.update({\n          a: 1\n        }, {\n          $set: {\n            b: 20\n          }\n        }, {}, function (err, numAffected, affectedDocuments, upsert) {\n          assert.isNull(err);\n          numAffected.should.equal(1);\n          assert.isUndefined(affectedDocuments);\n          assert.isUndefined(upsert);\n\n          // returnUpdatedDocs set to true\n          d.update({\n            a: 1\n          }, {\n            $set: {\n              b: 21\n            }\n          }, {\n            returnUpdatedDocs: true\n          }, function (err, numAffected, affectedDocuments, upsert) {\n            assert.isNull(err);\n            numAffected.should.equal(1);\n            affectedDocuments.a.should.equal(1);\n            affectedDocuments.b.should.equal(21);\n            assert.isUndefined(upsert);\n            done();\n          });\n        });\n      });","file":"db.test.js","skipped":false,"dir":"test"},{"name":"Regular update, multi true","suites":["Database","Update","Callback signature"],"updatePoint":{"line":2431,"column":36,"index":73457},"line":2431,"code":"      it(\"Regular update, multi true\", function (done) {\n        d.insert({\n          a: 1\n        });\n        d.insert({\n          a: 2\n        });\n\n        // returnUpdatedDocs set to false\n        d.update({}, {\n          $set: {\n            b: 20\n          }\n        }, {\n          multi: true\n        }, function (err, numAffected, affectedDocuments, upsert) {\n          assert.isNull(err);\n          numAffected.should.equal(2);\n          assert.isUndefined(affectedDocuments);\n          assert.isUndefined(upsert);\n\n          // returnUpdatedDocs set to true\n          d.update({}, {\n            $set: {\n              b: 21\n            }\n          }, {\n            multi: true,\n            returnUpdatedDocs: true\n          }, function (err, numAffected, affectedDocuments, upsert) {\n            assert.isNull(err);\n            numAffected.should.equal(2);\n            affectedDocuments.length.should.equal(2);\n            assert.isUndefined(upsert);\n            done();\n          });\n        });\n      });","file":"db.test.js","skipped":false,"dir":"test"},{"name":"Upsert","suites":["Database","Update","Callback signature"],"updatePoint":{"line":2469,"column":16,"index":74451},"line":2469,"code":"      it(\"Upsert\", function (done) {\n        d.insert({\n          a: 1\n        });\n        d.insert({\n          a: 2\n        });\n\n        // Upsert flag not set\n        d.update({\n          a: 3\n        }, {\n          $set: {\n            b: 20\n          }\n        }, {}, function (err, numAffected, affectedDocuments, upsert) {\n          assert.isNull(err);\n          numAffected.should.equal(0);\n          assert.isUndefined(affectedDocuments);\n          assert.isUndefined(upsert);\n\n          // Upsert flag set\n          d.update({\n            a: 3\n          }, {\n            $set: {\n              b: 21\n            }\n          }, {\n            upsert: true\n          }, function (err, numAffected, affectedDocuments, upsert) {\n            assert.isNull(err);\n            numAffected.should.equal(1);\n            affectedDocuments.a.should.equal(3);\n            affectedDocuments.b.should.equal(21);\n            upsert.should.equal(true);\n            d.find({}, function (err, docs) {\n              docs.length.should.equal(3);\n              done();\n            });\n          });\n        });\n      });","file":"db.test.js","skipped":false,"dir":"test"},{"name":"Can remove multiple documents","suites":["Database","Remove"],"updatePoint":{"line":2516,"column":37,"index":75712},"line":2516,"code":"    it('Can remove multiple documents', function (done) {\n      var id1, id2, id3;\n\n      // Test DB status\n      function testPostUpdateState(cb) {\n        d.find({}, function (err, docs) {\n          docs.length.should.equal(1);\n          Object.keys(docs[0]).length.should.equal(2);\n          docs[0]._id.should.equal(id1);\n          docs[0].somedata.should.equal('ok');\n          return cb();\n        });\n      }\n\n      // Actually launch the test\n      async.waterfall([function (cb) {\n        d.insert({\n          somedata: 'ok'\n        }, function (err, doc1) {\n          id1 = doc1._id;\n          d.insert({\n            somedata: 'again',\n            plus: 'additional data'\n          }, function (err, doc2) {\n            id2 = doc2._id;\n            d.insert({\n              somedata: 'again'\n            }, function (err, doc3) {\n              id3 = doc3._id;\n              return cb(err);\n            });\n          });\n        });\n      }, function (cb) {\n        // Test with query that doesn't match anything\n        d.remove({\n          somedata: 'again'\n        }, {\n          multi: true\n        }, function (err, n) {\n          assert.isNull(err);\n          n.should.equal(2);\n          return cb();\n        });\n      }, async.apply(testPostUpdateState), function (cb) {\n        d.loadDatabase(function (err) {\n          return cb(err);\n        });\n      }, async.apply(testPostUpdateState)], done);\n    });","file":"db.test.js","skipped":false,"dir":"test"},{"name":"Remove can be called multiple times in parallel and everything that needs to be removed will be","suites":["Database","Remove"],"updatePoint":{"line":2568,"column":103,"index":77240},"line":2568,"code":"    it('Remove can be called multiple times in parallel and everything that needs to be removed will be', function (done) {\n      d.insert({\n        planet: 'Earth'\n      }, function () {\n        d.insert({\n          planet: 'Mars'\n        }, function () {\n          d.insert({\n            planet: 'Saturn'\n          }, function () {\n            d.find({}, function (err, docs) {\n              docs.length.should.equal(3);\n\n              // Remove two docs simultaneously\n              var toRemove = ['Mars', 'Saturn'];\n              async.each(toRemove, function (planet, cb) {\n                d.remove({\n                  planet: planet\n                }, function (err) {\n                  return cb(err);\n                });\n              }, function (err) {\n                d.find({}, function (err, docs) {\n                  docs.length.should.equal(1);\n                  done();\n                });\n              });\n            });\n          });\n        });\n      });\n    });","file":"db.test.js","skipped":false,"dir":"test"},{"name":"Returns an error if the query is not well formed","suites":["Database","Remove"],"updatePoint":{"line":2600,"column":56,"index":78178},"line":2600,"code":"    it('Returns an error if the query is not well formed', function (done) {\n      d.insert({\n        hello: 'world'\n      }, function () {\n        d.remove({\n          $or: {\n            hello: 'world'\n          }\n        }, {}, function (err, nr, upsert) {\n          assert.isDefined(err);\n          assert.isUndefined(nr);\n          assert.isUndefined(upsert);\n          done();\n        });\n      });\n    });","file":"db.test.js","skipped":false,"dir":"test"},{"name":"Non-multi removes are persistent","suites":["Database","Remove"],"updatePoint":{"line":2616,"column":40,"index":78574},"line":2616,"code":"    it('Non-multi removes are persistent', function (done) {\n      d.insert({\n        a: 1,\n        hello: 'world'\n      }, function (err, doc1) {\n        d.insert({\n          a: 2,\n          hello: 'earth'\n        }, function (err, doc2) {\n          d.insert({\n            a: 3,\n            hello: 'moto'\n          }, function (err, doc3) {\n            d.remove({\n              a: 2\n            }, {}, function (err) {\n              assert.isNull(err);\n              d.find({}, function (err, docs) {\n                docs.sort(function (a, b) {\n                  return a.a - b.a;\n                });\n                docs.length.should.equal(2);\n                _.isEqual(docs[0], {\n                  _id: doc1._id,\n                  a: 1,\n                  hello: 'world'\n                }).should.equal(true);\n                _.isEqual(docs[1], {\n                  _id: doc3._id,\n                  a: 3,\n                  hello: 'moto'\n                }).should.equal(true);\n\n                // Even after a reload the database state hasn't changed\n                d.loadDatabase(function (err) {\n                  assert.isNull(err);\n                  d.find({}, function (err, docs) {\n                    docs.sort(function (a, b) {\n                      return a.a - b.a;\n                    });\n                    docs.length.should.equal(2);\n                    _.isEqual(docs[0], {\n                      _id: doc1._id,\n                      a: 1,\n                      hello: 'world'\n                    }).should.equal(true);\n                    _.isEqual(docs[1], {\n                      _id: doc3._id,\n                      a: 3,\n                      hello: 'moto'\n                    }).should.equal(true);\n                    done();\n                  });\n                });\n              });\n            });\n          });\n        });\n      });\n    });","file":"db.test.js","skipped":false,"dir":"test"},{"name":"Multi removes are persistent","suites":["Database","Remove"],"updatePoint":{"line":2676,"column":36,"index":80440},"line":2676,"code":"    it('Multi removes are persistent', function (done) {\n      d.insert({\n        a: 1,\n        hello: 'world'\n      }, function (err, doc1) {\n        d.insert({\n          a: 2,\n          hello: 'earth'\n        }, function (err, doc2) {\n          d.insert({\n            a: 3,\n            hello: 'moto'\n          }, function (err, doc3) {\n            d.remove({\n              a: {\n                $in: [1, 3]\n              }\n            }, {\n              multi: true\n            }, function (err) {\n              assert.isNull(err);\n              d.find({}, function (err, docs) {\n                docs.length.should.equal(1);\n                _.isEqual(docs[0], {\n                  _id: doc2._id,\n                  a: 2,\n                  hello: 'earth'\n                }).should.equal(true);\n\n                // Even after a reload the database state hasn't changed\n                d.loadDatabase(function (err) {\n                  assert.isNull(err);\n                  d.find({}, function (err, docs) {\n                    docs.length.should.equal(1);\n                    _.isEqual(docs[0], {\n                      _id: doc2._id,\n                      a: 2,\n                      hello: 'earth'\n                    }).should.equal(true);\n                    done();\n                  });\n                });\n              });\n            });\n          });\n        });\n      });\n    });","file":"db.test.js","skipped":false,"dir":"test"},{"name":"Can remove without the options arg (will use defaults then)","suites":["Database","Remove"],"updatePoint":{"line":2724,"column":67,"index":81858},"line":2724,"code":"    it('Can remove without the options arg (will use defaults then)', function (done) {\n      d.insert({\n        a: 1,\n        hello: 'world'\n      }, function (err, doc1) {\n        d.insert({\n          a: 2,\n          hello: 'earth'\n        }, function (err, doc2) {\n          d.insert({\n            a: 5,\n            hello: 'pluton'\n          }, function (err, doc3) {\n            d.remove({\n              a: 2\n            }, function (err, nr) {\n              assert.isNull(err);\n              nr.should.equal(1);\n              d.find({}, function (err, docs) {\n                var d1 = _.find(docs, function (doc) {\n                    return doc._id === doc1._id;\n                  }),\n                  d2 = _.find(docs, function (doc) {\n                    return doc._id === doc2._id;\n                  }),\n                  d3 = _.find(docs, function (doc) {\n                    return doc._id === doc3._id;\n                  });\n                d1.a.should.equal(1);\n                assert.isUndefined(d2);\n                d3.a.should.equal(5);\n                done();\n              });\n            });\n          });\n        });\n      });\n    });","file":"db.test.js","skipped":false,"dir":"test"},{"name":"ensureIndex can be called right after a loadDatabase and be initialized and filled correctly","suites":["Database","Using indexes","ensureIndex and index initialization in database loading"],"updatePoint":{"line":2766,"column":102,"index":83218},"line":2766,"code":"      it('ensureIndex can be called right after a loadDatabase and be initialized and filled correctly', function (done) {\n        var now = new Date(),\n          rawData = model.serialize({\n            _id: \"aaa\",\n            z: \"1\",\n            a: 2,\n            ages: [1, 5, 12]\n          }) + '\\n' + model.serialize({\n            _id: \"bbb\",\n            z: \"2\",\n            hello: 'world'\n          }) + '\\n' + model.serialize({\n            _id: \"ccc\",\n            z: \"3\",\n            nested: {\n              today: now\n            }\n          });\n        d.getAllData().length.should.equal(0);\n        fs.writeFile(testDb, rawData, 'utf8', function () {\n          d.loadDatabase(function () {\n            d.getAllData().length.should.equal(3);\n            assert.deepEqual(Object.keys(d.indexes), ['_id']);\n            d.ensureIndex({\n              fieldName: 'z'\n            });\n            d.indexes.z.fieldName.should.equal('z');\n            d.indexes.z.unique.should.equal(false);\n            d.indexes.z.sparse.should.equal(false);\n            d.indexes.z.tree.getNumberOfKeys().should.equal(3);\n            d.indexes.z.tree.search('1')[0].should.equal(d.getAllData()[0]);\n            d.indexes.z.tree.search('2')[0].should.equal(d.getAllData()[1]);\n            d.indexes.z.tree.search('3')[0].should.equal(d.getAllData()[2]);\n            done();\n          });\n        });\n      });","file":"db.test.js","skipped":false,"dir":"test"},{"name":"ensureIndex can be called twice on the same field, the second call will ahve no effect","suites":["Database","Using indexes","ensureIndex and index initialization in database loading"],"updatePoint":{"line":2803,"column":96,"index":84605},"line":2803,"code":"      it('ensureIndex can be called twice on the same field, the second call will ahve no effect', function (done) {\n        Object.keys(d.indexes).length.should.equal(1);\n        Object.keys(d.indexes)[0].should.equal(\"_id\");\n        d.insert({\n          planet: \"Earth\"\n        }, function () {\n          d.insert({\n            planet: \"Mars\"\n          }, function () {\n            d.find({}, function (err, docs) {\n              docs.length.should.equal(2);\n              d.ensureIndex({\n                fieldName: \"planet\"\n              }, function (err) {\n                assert.isNull(err);\n                Object.keys(d.indexes).length.should.equal(2);\n                Object.keys(d.indexes)[0].should.equal(\"_id\");\n                Object.keys(d.indexes)[1].should.equal(\"planet\");\n                d.indexes.planet.getAll().length.should.equal(2);\n\n                // This second call has no effect, documents don't get inserted twice in the index\n                d.ensureIndex({\n                  fieldName: \"planet\"\n                }, function (err) {\n                  assert.isNull(err);\n                  Object.keys(d.indexes).length.should.equal(2);\n                  Object.keys(d.indexes)[0].should.equal(\"_id\");\n                  Object.keys(d.indexes)[1].should.equal(\"planet\");\n                  d.indexes.planet.getAll().length.should.equal(2);\n                  done();\n                });\n              });\n            });\n          });\n        });\n      });","file":"db.test.js","skipped":false,"dir":"test"},{"name":"ensureIndex can be called after the data set was modified and the index still be correct","suites":["Database","Using indexes","ensureIndex and index initialization in database loading"],"updatePoint":{"line":2839,"column":98,"index":86088},"line":2839,"code":"      it('ensureIndex can be called after the data set was modified and the index still be correct', function (done) {\n        var rawData = model.serialize({\n          _id: \"aaa\",\n          z: \"1\",\n          a: 2,\n          ages: [1, 5, 12]\n        }) + '\\n' + model.serialize({\n          _id: \"bbb\",\n          z: \"2\",\n          hello: 'world'\n        });\n        d.getAllData().length.should.equal(0);\n        fs.writeFile(testDb, rawData, 'utf8', function () {\n          d.loadDatabase(function () {\n            d.getAllData().length.should.equal(2);\n            assert.deepEqual(Object.keys(d.indexes), ['_id']);\n            d.insert({\n              z: \"12\",\n              yes: 'yes'\n            }, function (err, newDoc1) {\n              d.insert({\n                z: \"14\",\n                nope: 'nope'\n              }, function (err, newDoc2) {\n                d.remove({\n                  z: \"2\"\n                }, {}, function () {\n                  d.update({\n                    z: \"1\"\n                  }, {\n                    $set: {\n                      'yes': 'yep'\n                    }\n                  }, {}, function () {\n                    assert.deepEqual(Object.keys(d.indexes), ['_id']);\n                    d.ensureIndex({\n                      fieldName: 'z'\n                    });\n                    d.indexes.z.fieldName.should.equal('z');\n                    d.indexes.z.unique.should.equal(false);\n                    d.indexes.z.sparse.should.equal(false);\n                    d.indexes.z.tree.getNumberOfKeys().should.equal(3);\n\n                    // The pointers in the _id and z indexes are the same\n                    d.indexes.z.tree.search('1')[0].should.equal(d.indexes._id.getMatching('aaa')[0]);\n                    d.indexes.z.tree.search('12')[0].should.equal(d.indexes._id.getMatching(newDoc1._id)[0]);\n                    d.indexes.z.tree.search('14')[0].should.equal(d.indexes._id.getMatching(newDoc2._id)[0]);\n\n                    // The data in the z index is correct\n                    d.find({}, function (err, docs) {\n                      var doc0 = _.find(docs, function (doc) {\n                          return doc._id === 'aaa';\n                        }),\n                        doc1 = _.find(docs, function (doc) {\n                          return doc._id === newDoc1._id;\n                        }),\n                        doc2 = _.find(docs, function (doc) {\n                          return doc._id === newDoc2._id;\n                        });\n                      docs.length.should.equal(3);\n                      assert.deepEqual(doc0, {\n                        _id: \"aaa\",\n                        z: \"1\",\n                        a: 2,\n                        ages: [1, 5, 12],\n                        yes: 'yep'\n                      });\n                      assert.deepEqual(doc1, {\n                        _id: newDoc1._id,\n                        z: \"12\",\n                        yes: 'yes'\n                      });\n                      assert.deepEqual(doc2, {\n                        _id: newDoc2._id,\n                        z: \"14\",\n                        nope: 'nope'\n                      });\n                      done();\n                    });\n                  });\n                });\n              });\n            });\n          });\n        });\n      });","file":"db.test.js","skipped":false,"dir":"test"},{"name":"ensureIndex can be called before a loadDatabase and still be initialized and filled correctly","suites":["Database","Using indexes","ensureIndex and index initialization in database loading"],"updatePoint":{"line":2925,"column":103,"index":89438},"line":2925,"code":"      it('ensureIndex can be called before a loadDatabase and still be initialized and filled correctly', function (done) {\n        var now = new Date(),\n          rawData = model.serialize({\n            _id: \"aaa\",\n            z: \"1\",\n            a: 2,\n            ages: [1, 5, 12]\n          }) + '\\n' + model.serialize({\n            _id: \"bbb\",\n            z: \"2\",\n            hello: 'world'\n          }) + '\\n' + model.serialize({\n            _id: \"ccc\",\n            z: \"3\",\n            nested: {\n              today: now\n            }\n          });\n        d.getAllData().length.should.equal(0);\n        d.ensureIndex({\n          fieldName: 'z'\n        });\n        d.indexes.z.fieldName.should.equal('z');\n        d.indexes.z.unique.should.equal(false);\n        d.indexes.z.sparse.should.equal(false);\n        d.indexes.z.tree.getNumberOfKeys().should.equal(0);\n        fs.writeFile(testDb, rawData, 'utf8', function () {\n          d.loadDatabase(function () {\n            var doc1 = _.find(d.getAllData(), function (doc) {\n                return doc.z === \"1\";\n              }),\n              doc2 = _.find(d.getAllData(), function (doc) {\n                return doc.z === \"2\";\n              }),\n              doc3 = _.find(d.getAllData(), function (doc) {\n                return doc.z === \"3\";\n              });\n            d.getAllData().length.should.equal(3);\n            d.indexes.z.tree.getNumberOfKeys().should.equal(3);\n            d.indexes.z.tree.search('1')[0].should.equal(doc1);\n            d.indexes.z.tree.search('2')[0].should.equal(doc2);\n            d.indexes.z.tree.search('3')[0].should.equal(doc3);\n            done();\n          });\n        });\n      });","file":"db.test.js","skipped":false,"dir":"test"},{"name":"Can initialize multiple indexes on a database load","suites":["Database","Using indexes","ensureIndex and index initialization in database loading"],"updatePoint":{"line":2971,"column":60,"index":91076},"line":2971,"code":"      it('Can initialize multiple indexes on a database load', function (done) {\n        var now = new Date(),\n          rawData = model.serialize({\n            _id: \"aaa\",\n            z: \"1\",\n            a: 2,\n            ages: [1, 5, 12]\n          }) + '\\n' + model.serialize({\n            _id: \"bbb\",\n            z: \"2\",\n            a: 'world'\n          }) + '\\n' + model.serialize({\n            _id: \"ccc\",\n            z: \"3\",\n            a: {\n              today: now\n            }\n          });\n        d.getAllData().length.should.equal(0);\n        d.ensureIndex({\n          fieldName: 'z'\n        }, function () {\n          d.ensureIndex({\n            fieldName: 'a'\n          }, function () {\n            d.indexes.a.tree.getNumberOfKeys().should.equal(0);\n            d.indexes.z.tree.getNumberOfKeys().should.equal(0);\n            fs.writeFile(testDb, rawData, 'utf8', function () {\n              d.loadDatabase(function (err) {\n                var doc1 = _.find(d.getAllData(), function (doc) {\n                    return doc.z === \"1\";\n                  }),\n                  doc2 = _.find(d.getAllData(), function (doc) {\n                    return doc.z === \"2\";\n                  }),\n                  doc3 = _.find(d.getAllData(), function (doc) {\n                    return doc.z === \"3\";\n                  });\n                assert.isNull(err);\n                d.getAllData().length.should.equal(3);\n                d.indexes.z.tree.getNumberOfKeys().should.equal(3);\n                d.indexes.z.tree.search('1')[0].should.equal(doc1);\n                d.indexes.z.tree.search('2')[0].should.equal(doc2);\n                d.indexes.z.tree.search('3')[0].should.equal(doc3);\n                d.indexes.a.tree.getNumberOfKeys().should.equal(3);\n                d.indexes.a.tree.search(2)[0].should.equal(doc1);\n                d.indexes.a.tree.search('world')[0].should.equal(doc2);\n                d.indexes.a.tree.search({\n                  today: now\n                })[0].should.equal(doc3);\n                done();\n              });\n            });\n          });\n        });\n      });","file":"db.test.js","skipped":false,"dir":"test"},{"name":"If a unique constraint is not respected, database loading will not work and no data will be inserted","suites":["Database","Using indexes","ensureIndex and index initialization in database loading"],"updatePoint":{"line":3027,"column":110,"index":93231},"line":3027,"code":"      it('If a unique constraint is not respected, database loading will not work and no data will be inserted', function (done) {\n        var now = new Date(),\n          rawData = model.serialize({\n            _id: \"aaa\",\n            z: \"1\",\n            a: 2,\n            ages: [1, 5, 12]\n          }) + '\\n' + model.serialize({\n            _id: \"bbb\",\n            z: \"2\",\n            a: 'world'\n          }) + '\\n' + model.serialize({\n            _id: \"ccc\",\n            z: \"1\",\n            a: {\n              today: now\n            }\n          });\n        d.getAllData().length.should.equal(0);\n        d.ensureIndex({\n          fieldName: 'z',\n          unique: true\n        });\n        d.indexes.z.tree.getNumberOfKeys().should.equal(0);\n        fs.writeFile(testDb, rawData, 'utf8', function () {\n          d.loadDatabase(function (err) {\n            err.errorType.should.equal('uniqueViolated');\n            err.key.should.equal(\"1\");\n            d.getAllData().length.should.equal(0);\n            d.indexes.z.tree.getNumberOfKeys().should.equal(0);\n            done();\n          });\n        });\n      });","file":"db.test.js","skipped":false,"dir":"test"},{"name":"If a unique constraint is not respected, ensureIndex will return an error and not create an index","suites":["Database","Using indexes","ensureIndex and index initialization in database loading"],"updatePoint":{"line":3061,"column":107,"index":94341},"line":3061,"code":"      it('If a unique constraint is not respected, ensureIndex will return an error and not create an index', function (done) {\n        d.insert({\n          a: 1,\n          b: 4\n        }, function () {\n          d.insert({\n            a: 2,\n            b: 45\n          }, function () {\n            d.insert({\n              a: 1,\n              b: 3\n            }, function () {\n              d.ensureIndex({\n                fieldName: 'b'\n              }, function (err) {\n                assert.isNull(err);\n                d.ensureIndex({\n                  fieldName: 'a',\n                  unique: true\n                }, function (err) {\n                  err.errorType.should.equal('uniqueViolated');\n                  assert.deepEqual(Object.keys(d.indexes), ['_id', 'b']);\n                  done();\n                });\n              });\n            });\n          });\n        });\n      });","file":"db.test.js","skipped":false,"dir":"test"},{"name":"Can remove an index","suites":["Database","Using indexes","ensureIndex and index initialization in database loading"],"updatePoint":{"line":3091,"column":29,"index":95159},"line":3091,"code":"      it('Can remove an index', function (done) {\n        d.ensureIndex({\n          fieldName: 'e'\n        }, function (err) {\n          assert.isNull(err);\n          Object.keys(d.indexes).length.should.equal(2);\n          assert.isNotNull(d.indexes.e);\n          d.removeIndex(\"e\", function (err) {\n            assert.isNull(err);\n            Object.keys(d.indexes).length.should.equal(1);\n            assert.isUndefined(d.indexes.e);\n            done();\n          });\n        });\n      });","file":"db.test.js","skipped":false,"dir":"test"},{"name":"Newly inserted documents are indexed","suites":["Database","Using indexes","Indexing newly inserted documents"],"updatePoint":{"line":3109,"column":46,"index":95824},"line":3109,"code":"      it('Newly inserted documents are indexed', function (done) {\n        d.ensureIndex({\n          fieldName: 'z'\n        });\n        d.indexes.z.tree.getNumberOfKeys().should.equal(0);\n        d.insert({\n          a: 2,\n          z: 'yes'\n        }, function (err, newDoc) {\n          d.indexes.z.tree.getNumberOfKeys().should.equal(1);\n          assert.deepEqual(d.indexes.z.getMatching('yes'), [newDoc]);\n          d.insert({\n            a: 5,\n            z: 'nope'\n          }, function (err, newDoc) {\n            d.indexes.z.tree.getNumberOfKeys().should.equal(2);\n            assert.deepEqual(d.indexes.z.getMatching('nope'), [newDoc]);\n            done();\n          });\n        });\n      });","file":"db.test.js","skipped":false,"dir":"test"},{"name":"If multiple indexes are defined, the document is inserted in all of them","suites":["Database","Using indexes","Indexing newly inserted documents"],"updatePoint":{"line":3130,"column":82,"index":96562},"line":3130,"code":"      it('If multiple indexes are defined, the document is inserted in all of them', function (done) {\n        d.ensureIndex({\n          fieldName: 'z'\n        });\n        d.ensureIndex({\n          fieldName: 'ya'\n        });\n        d.indexes.z.tree.getNumberOfKeys().should.equal(0);\n        d.insert({\n          a: 2,\n          z: 'yes',\n          ya: 'indeed'\n        }, function (err, newDoc) {\n          d.indexes.z.tree.getNumberOfKeys().should.equal(1);\n          d.indexes.ya.tree.getNumberOfKeys().should.equal(1);\n          assert.deepEqual(d.indexes.z.getMatching('yes'), [newDoc]);\n          assert.deepEqual(d.indexes.ya.getMatching('indeed'), [newDoc]);\n          d.insert({\n            a: 5,\n            z: 'nope',\n            ya: 'sure'\n          }, function (err, newDoc2) {\n            d.indexes.z.tree.getNumberOfKeys().should.equal(2);\n            d.indexes.ya.tree.getNumberOfKeys().should.equal(2);\n            assert.deepEqual(d.indexes.z.getMatching('nope'), [newDoc2]);\n            assert.deepEqual(d.indexes.ya.getMatching('sure'), [newDoc2]);\n            done();\n          });\n        });\n      });","file":"db.test.js","skipped":false,"dir":"test"},{"name":"Can insert two docs at the same key for a non unique index","suites":["Database","Using indexes","Indexing newly inserted documents"],"updatePoint":{"line":3160,"column":68,"index":97675},"line":3160,"code":"      it('Can insert two docs at the same key for a non unique index', function (done) {\n        d.ensureIndex({\n          fieldName: 'z'\n        });\n        d.indexes.z.tree.getNumberOfKeys().should.equal(0);\n        d.insert({\n          a: 2,\n          z: 'yes'\n        }, function (err, newDoc) {\n          d.indexes.z.tree.getNumberOfKeys().should.equal(1);\n          assert.deepEqual(d.indexes.z.getMatching('yes'), [newDoc]);\n          d.insert({\n            a: 5,\n            z: 'yes'\n          }, function (err, newDoc2) {\n            d.indexes.z.tree.getNumberOfKeys().should.equal(1);\n            assert.deepEqual(d.indexes.z.getMatching('yes'), [newDoc, newDoc2]);\n            done();\n          });\n        });\n      });","file":"db.test.js","skipped":false,"dir":"test"},{"name":"If the index has a unique constraint, an error is thrown if it is violated and the data is not modified","suites":["Database","Using indexes","Indexing newly inserted documents"],"updatePoint":{"line":3181,"column":113,"index":98452},"line":3181,"code":"      it('If the index has a unique constraint, an error is thrown if it is violated and the data is not modified', function (done) {\n        d.ensureIndex({\n          fieldName: 'z',\n          unique: true\n        });\n        d.indexes.z.tree.getNumberOfKeys().should.equal(0);\n        d.insert({\n          a: 2,\n          z: 'yes'\n        }, function (err, newDoc) {\n          d.indexes.z.tree.getNumberOfKeys().should.equal(1);\n          assert.deepEqual(d.indexes.z.getMatching('yes'), [newDoc]);\n          d.insert({\n            a: 5,\n            z: 'yes'\n          }, function (err) {\n            err.errorType.should.equal('uniqueViolated');\n            err.key.should.equal('yes');\n\n            // Index didn't change\n            d.indexes.z.tree.getNumberOfKeys().should.equal(1);\n            assert.deepEqual(d.indexes.z.getMatching('yes'), [newDoc]);\n\n            // Data didn't change\n            assert.deepEqual(d.getAllData(), [newDoc]);\n            d.loadDatabase(function () {\n              d.getAllData().length.should.equal(1);\n              assert.deepEqual(d.getAllData()[0], newDoc);\n              done();\n            });\n          });\n        });\n      });","file":"db.test.js","skipped":false,"dir":"test"},{"name":"If an index has a unique constraint, other indexes cannot be modified when it raises an error","suites":["Database","Using indexes","Indexing newly inserted documents"],"updatePoint":{"line":3214,"column":103,"index":99622},"line":3214,"code":"      it('If an index has a unique constraint, other indexes cannot be modified when it raises an error', function (done) {\n        d.ensureIndex({\n          fieldName: 'nonu1'\n        });\n        d.ensureIndex({\n          fieldName: 'uni',\n          unique: true\n        });\n        d.ensureIndex({\n          fieldName: 'nonu2'\n        });\n        d.insert({\n          nonu1: 'yes',\n          nonu2: 'yes2',\n          uni: 'willfail'\n        }, function (err, newDoc) {\n          assert.isNull(err);\n          d.indexes.nonu1.tree.getNumberOfKeys().should.equal(1);\n          d.indexes.uni.tree.getNumberOfKeys().should.equal(1);\n          d.indexes.nonu2.tree.getNumberOfKeys().should.equal(1);\n          d.insert({\n            nonu1: 'no',\n            nonu2: 'no2',\n            uni: 'willfail'\n          }, function (err) {\n            err.errorType.should.equal('uniqueViolated');\n\n            // No index was modified\n            d.indexes.nonu1.tree.getNumberOfKeys().should.equal(1);\n            d.indexes.uni.tree.getNumberOfKeys().should.equal(1);\n            d.indexes.nonu2.tree.getNumberOfKeys().should.equal(1);\n            assert.deepEqual(d.indexes.nonu1.getMatching('yes'), [newDoc]);\n            assert.deepEqual(d.indexes.uni.getMatching('willfail'), [newDoc]);\n            assert.deepEqual(d.indexes.nonu2.getMatching('yes2'), [newDoc]);\n            done();\n          });\n        });\n      });","file":"db.test.js","skipped":false,"dir":"test"},{"name":"Unique indexes prevent you from inserting two docs where the field is undefined except if theyre sparse","suites":["Database","Using indexes","Indexing newly inserted documents"],"updatePoint":{"line":3252,"column":113,"index":101045},"line":3252,"code":"      it('Unique indexes prevent you from inserting two docs where the field is undefined except if theyre sparse', function (done) {\n        d.ensureIndex({\n          fieldName: 'zzz',\n          unique: true\n        });\n        d.indexes.zzz.tree.getNumberOfKeys().should.equal(0);\n        d.insert({\n          a: 2,\n          z: 'yes'\n        }, function (err, newDoc) {\n          d.indexes.zzz.tree.getNumberOfKeys().should.equal(1);\n          assert.deepEqual(d.indexes.zzz.getMatching(undefined), [newDoc]);\n          d.insert({\n            a: 5,\n            z: 'other'\n          }, function (err) {\n            err.errorType.should.equal('uniqueViolated');\n            assert.isUndefined(err.key);\n            d.ensureIndex({\n              fieldName: 'yyy',\n              unique: true,\n              sparse: true\n            });\n            d.insert({\n              a: 5,\n              z: 'other',\n              zzz: 'set'\n            }, function (err) {\n              assert.isNull(err);\n              d.indexes.yyy.getAll().length.should.equal(0); // Nothing indexed\n              d.indexes.zzz.getAll().length.should.equal(2);\n              done();\n            });\n          });\n        });\n      });","file":"db.test.js","skipped":false,"dir":"test"},{"name":"Insertion still works as before with indexing","suites":["Database","Using indexes","Indexing newly inserted documents"],"updatePoint":{"line":3288,"column":55,"index":102197},"line":3288,"code":"      it('Insertion still works as before with indexing', function (done) {\n        d.ensureIndex({\n          fieldName: 'a'\n        });\n        d.ensureIndex({\n          fieldName: 'b'\n        });\n        d.insert({\n          a: 1,\n          b: 'hello'\n        }, function (err, doc1) {\n          d.insert({\n            a: 2,\n            b: 'si'\n          }, function (err, doc2) {\n            d.find({}, function (err, docs) {\n              assert.deepEqual(doc1, _.find(docs, function (d) {\n                return d._id === doc1._id;\n              }));\n              assert.deepEqual(doc2, _.find(docs, function (d) {\n                return d._id === doc2._id;\n              }));\n              done();\n            });\n          });\n        });\n      });","file":"db.test.js","skipped":false,"dir":"test"},{"name":"All indexes point to the same data as the main index on _id","suites":["Database","Using indexes","Indexing newly inserted documents"],"updatePoint":{"line":3315,"column":69,"index":102968},"line":3315,"code":"      it('All indexes point to the same data as the main index on _id', function (done) {\n        d.ensureIndex({\n          fieldName: 'a'\n        });\n        d.insert({\n          a: 1,\n          b: 'hello'\n        }, function (err, doc1) {\n          d.insert({\n            a: 2,\n            b: 'si'\n          }, function (err, doc2) {\n            d.find({}, function (err, docs) {\n              docs.length.should.equal(2);\n              d.getAllData().length.should.equal(2);\n              d.indexes._id.getMatching(doc1._id).length.should.equal(1);\n              d.indexes.a.getMatching(1).length.should.equal(1);\n              d.indexes._id.getMatching(doc1._id)[0].should.equal(d.indexes.a.getMatching(1)[0]);\n              d.indexes._id.getMatching(doc2._id).length.should.equal(1);\n              d.indexes.a.getMatching(2).length.should.equal(1);\n              d.indexes._id.getMatching(doc2._id)[0].should.equal(d.indexes.a.getMatching(2)[0]);\n              done();\n            });\n          });\n        });\n      });","file":"db.test.js","skipped":false,"dir":"test"},{"name":"If a unique constraint is violated, no index is changed, including the main one","suites":["Database","Using indexes","Indexing newly inserted documents"],"updatePoint":{"line":3341,"column":89,"index":104014},"line":3341,"code":"      it('If a unique constraint is violated, no index is changed, including the main one', function (done) {\n        d.ensureIndex({\n          fieldName: 'a',\n          unique: true\n        });\n        d.insert({\n          a: 1,\n          b: 'hello'\n        }, function (err, doc1) {\n          d.insert({\n            a: 1,\n            b: 'si'\n          }, function (err) {\n            assert.isDefined(err);\n            d.find({}, function (err, docs) {\n              docs.length.should.equal(1);\n              d.getAllData().length.should.equal(1);\n              d.indexes._id.getMatching(doc1._id).length.should.equal(1);\n              d.indexes.a.getMatching(1).length.should.equal(1);\n              d.indexes._id.getMatching(doc1._id)[0].should.equal(d.indexes.a.getMatching(1)[0]);\n              d.indexes.a.getMatching(2).length.should.equal(0);\n              done();\n            });\n          });\n        });\n      });","file":"db.test.js","skipped":false,"dir":"test"},{"name":"Updating docs still works as before with indexing","suites":["Database","Using indexes","Updating indexes upon document update"],"updatePoint":{"line":3370,"column":59,"index":105047},"line":3370,"code":"      it('Updating docs still works as before with indexing', function (done) {\n        d.ensureIndex({\n          fieldName: 'a'\n        });\n        d.insert({\n          a: 1,\n          b: 'hello'\n        }, function (err, _doc1) {\n          d.insert({\n            a: 2,\n            b: 'si'\n          }, function (err, _doc2) {\n            d.update({\n              a: 1\n            }, {\n              $set: {\n                a: 456,\n                b: 'no'\n              }\n            }, {}, function (err, nr) {\n              var data = d.getAllData(),\n                doc1 = _.find(data, function (doc) {\n                  return doc._id === _doc1._id;\n                }),\n                doc2 = _.find(data, function (doc) {\n                  return doc._id === _doc2._id;\n                });\n              assert.isNull(err);\n              nr.should.equal(1);\n              data.length.should.equal(2);\n              assert.deepEqual(doc1, {\n                a: 456,\n                b: 'no',\n                _id: _doc1._id\n              });\n              assert.deepEqual(doc2, {\n                a: 2,\n                b: 'si',\n                _id: _doc2._id\n              });\n              d.update({}, {\n                $inc: {\n                  a: 10\n                },\n                $set: {\n                  b: 'same'\n                }\n              }, {\n                multi: true\n              }, function (err, nr) {\n                var data = d.getAllData(),\n                  doc1 = _.find(data, function (doc) {\n                    return doc._id === _doc1._id;\n                  }),\n                  doc2 = _.find(data, function (doc) {\n                    return doc._id === _doc2._id;\n                  });\n                assert.isNull(err);\n                nr.should.equal(2);\n                data.length.should.equal(2);\n                assert.deepEqual(doc1, {\n                  a: 466,\n                  b: 'same',\n                  _id: _doc1._id\n                });\n                assert.deepEqual(doc2, {\n                  a: 12,\n                  b: 'same',\n                  _id: _doc2._id\n                });\n                done();\n              });\n            });\n          });\n        });\n      });","file":"db.test.js","skipped":false,"dir":"test"},{"name":"Indexes get updated when a document (or multiple documents) is updated","suites":["Database","Using indexes","Updating indexes upon document update"],"updatePoint":{"line":3446,"column":80,"index":107303},"line":3446,"code":"      it('Indexes get updated when a document (or multiple documents) is updated', function (done) {\n        d.ensureIndex({\n          fieldName: 'a'\n        });\n        d.ensureIndex({\n          fieldName: 'b'\n        });\n        d.insert({\n          a: 1,\n          b: 'hello'\n        }, function (err, doc1) {\n          d.insert({\n            a: 2,\n            b: 'si'\n          }, function (err, doc2) {\n            // Simple update\n            d.update({\n              a: 1\n            }, {\n              $set: {\n                a: 456,\n                b: 'no'\n              }\n            }, {}, function (err, nr) {\n              assert.isNull(err);\n              nr.should.equal(1);\n              d.indexes.a.tree.getNumberOfKeys().should.equal(2);\n              d.indexes.a.getMatching(456)[0]._id.should.equal(doc1._id);\n              d.indexes.a.getMatching(2)[0]._id.should.equal(doc2._id);\n              d.indexes.b.tree.getNumberOfKeys().should.equal(2);\n              d.indexes.b.getMatching('no')[0]._id.should.equal(doc1._id);\n              d.indexes.b.getMatching('si')[0]._id.should.equal(doc2._id);\n\n              // The same pointers are shared between all indexes\n              d.indexes.a.tree.getNumberOfKeys().should.equal(2);\n              d.indexes.b.tree.getNumberOfKeys().should.equal(2);\n              d.indexes._id.tree.getNumberOfKeys().should.equal(2);\n              d.indexes.a.getMatching(456)[0].should.equal(d.indexes._id.getMatching(doc1._id)[0]);\n              d.indexes.b.getMatching('no')[0].should.equal(d.indexes._id.getMatching(doc1._id)[0]);\n              d.indexes.a.getMatching(2)[0].should.equal(d.indexes._id.getMatching(doc2._id)[0]);\n              d.indexes.b.getMatching('si')[0].should.equal(d.indexes._id.getMatching(doc2._id)[0]);\n\n              // Multi update\n              d.update({}, {\n                $inc: {\n                  a: 10\n                },\n                $set: {\n                  b: 'same'\n                }\n              }, {\n                multi: true\n              }, function (err, nr) {\n                assert.isNull(err);\n                nr.should.equal(2);\n                d.indexes.a.tree.getNumberOfKeys().should.equal(2);\n                d.indexes.a.getMatching(466)[0]._id.should.equal(doc1._id);\n                d.indexes.a.getMatching(12)[0]._id.should.equal(doc2._id);\n                d.indexes.b.tree.getNumberOfKeys().should.equal(1);\n                d.indexes.b.getMatching('same').length.should.equal(2);\n                _.pluck(d.indexes.b.getMatching('same'), '_id').should.contain(doc1._id);\n                _.pluck(d.indexes.b.getMatching('same'), '_id').should.contain(doc2._id);\n\n                // The same pointers are shared between all indexes\n                d.indexes.a.tree.getNumberOfKeys().should.equal(2);\n                d.indexes.b.tree.getNumberOfKeys().should.equal(1);\n                d.indexes.b.getAll().length.should.equal(2);\n                d.indexes._id.tree.getNumberOfKeys().should.equal(2);\n                d.indexes.a.getMatching(466)[0].should.equal(d.indexes._id.getMatching(doc1._id)[0]);\n                d.indexes.a.getMatching(12)[0].should.equal(d.indexes._id.getMatching(doc2._id)[0]);\n                // Can't test the pointers in b as their order is randomized, but it is the same as with a\n\n                done();\n              });\n            });\n          });\n        });\n      });","file":"db.test.js","skipped":false,"dir":"test"},{"name":"If a simple update violates a contraint, all changes are rolled back and an error is thrown","suites":["Database","Using indexes","Updating indexes upon document update"],"updatePoint":{"line":3524,"column":101,"index":110743},"line":3524,"code":"      it('If a simple update violates a contraint, all changes are rolled back and an error is thrown', function (done) {\n        d.ensureIndex({\n          fieldName: 'a',\n          unique: true\n        });\n        d.ensureIndex({\n          fieldName: 'b',\n          unique: true\n        });\n        d.ensureIndex({\n          fieldName: 'c',\n          unique: true\n        });\n        d.insert({\n          a: 1,\n          b: 10,\n          c: 100\n        }, function (err, _doc1) {\n          d.insert({\n            a: 2,\n            b: 20,\n            c: 200\n          }, function (err, _doc2) {\n            d.insert({\n              a: 3,\n              b: 30,\n              c: 300\n            }, function (err, _doc3) {\n              // Will conflict with doc3\n              d.update({\n                a: 2\n              }, {\n                $inc: {\n                  a: 10,\n                  c: 1000\n                },\n                $set: {\n                  b: 30\n                }\n              }, {}, function (err) {\n                var data = d.getAllData(),\n                  doc1 = _.find(data, function (doc) {\n                    return doc._id === _doc1._id;\n                  }),\n                  doc2 = _.find(data, function (doc) {\n                    return doc._id === _doc2._id;\n                  }),\n                  doc3 = _.find(data, function (doc) {\n                    return doc._id === _doc3._id;\n                  });\n                err.errorType.should.equal('uniqueViolated');\n\n                // Data left unchanged\n                data.length.should.equal(3);\n                assert.deepEqual(doc1, {\n                  a: 1,\n                  b: 10,\n                  c: 100,\n                  _id: _doc1._id\n                });\n                assert.deepEqual(doc2, {\n                  a: 2,\n                  b: 20,\n                  c: 200,\n                  _id: _doc2._id\n                });\n                assert.deepEqual(doc3, {\n                  a: 3,\n                  b: 30,\n                  c: 300,\n                  _id: _doc3._id\n                });\n\n                // All indexes left unchanged and pointing to the same docs\n                d.indexes.a.tree.getNumberOfKeys().should.equal(3);\n                d.indexes.a.getMatching(1)[0].should.equal(doc1);\n                d.indexes.a.getMatching(2)[0].should.equal(doc2);\n                d.indexes.a.getMatching(3)[0].should.equal(doc3);\n                d.indexes.b.tree.getNumberOfKeys().should.equal(3);\n                d.indexes.b.getMatching(10)[0].should.equal(doc1);\n                d.indexes.b.getMatching(20)[0].should.equal(doc2);\n                d.indexes.b.getMatching(30)[0].should.equal(doc3);\n                d.indexes.c.tree.getNumberOfKeys().should.equal(3);\n                d.indexes.c.getMatching(100)[0].should.equal(doc1);\n                d.indexes.c.getMatching(200)[0].should.equal(doc2);\n                d.indexes.c.getMatching(300)[0].should.equal(doc3);\n                done();\n              });\n            });\n          });\n        });\n      });","file":"db.test.js","skipped":false,"dir":"test"},{"name":"If a multi update violates a contraint, all changes are rolled back and an error is thrown","suites":["Database","Using indexes","Updating indexes upon document update"],"updatePoint":{"line":3616,"column":100,"index":113821},"line":3616,"code":"      it('If a multi update violates a contraint, all changes are rolled back and an error is thrown', function (done) {\n        d.ensureIndex({\n          fieldName: 'a',\n          unique: true\n        });\n        d.ensureIndex({\n          fieldName: 'b',\n          unique: true\n        });\n        d.ensureIndex({\n          fieldName: 'c',\n          unique: true\n        });\n        d.insert({\n          a: 1,\n          b: 10,\n          c: 100\n        }, function (err, _doc1) {\n          d.insert({\n            a: 2,\n            b: 20,\n            c: 200\n          }, function (err, _doc2) {\n            d.insert({\n              a: 3,\n              b: 30,\n              c: 300\n            }, function (err, _doc3) {\n              // Will conflict with doc3\n              d.update({\n                a: {\n                  $in: [1, 2]\n                }\n              }, {\n                $inc: {\n                  a: 10,\n                  c: 1000\n                },\n                $set: {\n                  b: 30\n                }\n              }, {\n                multi: true\n              }, function (err) {\n                var data = d.getAllData(),\n                  doc1 = _.find(data, function (doc) {\n                    return doc._id === _doc1._id;\n                  }),\n                  doc2 = _.find(data, function (doc) {\n                    return doc._id === _doc2._id;\n                  }),\n                  doc3 = _.find(data, function (doc) {\n                    return doc._id === _doc3._id;\n                  });\n                err.errorType.should.equal('uniqueViolated');\n\n                // Data left unchanged\n                data.length.should.equal(3);\n                assert.deepEqual(doc1, {\n                  a: 1,\n                  b: 10,\n                  c: 100,\n                  _id: _doc1._id\n                });\n                assert.deepEqual(doc2, {\n                  a: 2,\n                  b: 20,\n                  c: 200,\n                  _id: _doc2._id\n                });\n                assert.deepEqual(doc3, {\n                  a: 3,\n                  b: 30,\n                  c: 300,\n                  _id: _doc3._id\n                });\n\n                // All indexes left unchanged and pointing to the same docs\n                d.indexes.a.tree.getNumberOfKeys().should.equal(3);\n                d.indexes.a.getMatching(1)[0].should.equal(doc1);\n                d.indexes.a.getMatching(2)[0].should.equal(doc2);\n                d.indexes.a.getMatching(3)[0].should.equal(doc3);\n                d.indexes.b.tree.getNumberOfKeys().should.equal(3);\n                d.indexes.b.getMatching(10)[0].should.equal(doc1);\n                d.indexes.b.getMatching(20)[0].should.equal(doc2);\n                d.indexes.b.getMatching(30)[0].should.equal(doc3);\n                d.indexes.c.tree.getNumberOfKeys().should.equal(3);\n                d.indexes.c.getMatching(100)[0].should.equal(doc1);\n                d.indexes.c.getMatching(200)[0].should.equal(doc2);\n                d.indexes.c.getMatching(300)[0].should.equal(doc3);\n                done();\n              });\n            });\n          });\n        });\n      });","file":"db.test.js","skipped":false,"dir":"test"},{"name":"Removing docs still works as before with indexing","suites":["Database","Using indexes","Updating indexes upon document remove"],"updatePoint":{"line":3715,"column":59,"index":117089},"line":3715,"code":"      it('Removing docs still works as before with indexing', function (done) {\n        d.ensureIndex({\n          fieldName: 'a'\n        });\n        d.insert({\n          a: 1,\n          b: 'hello'\n        }, function (err, _doc1) {\n          d.insert({\n            a: 2,\n            b: 'si'\n          }, function (err, _doc2) {\n            d.insert({\n              a: 3,\n              b: 'coin'\n            }, function (err, _doc3) {\n              d.remove({\n                a: 1\n              }, {}, function (err, nr) {\n                var data = d.getAllData(),\n                  doc2 = _.find(data, function (doc) {\n                    return doc._id === _doc2._id;\n                  }),\n                  doc3 = _.find(data, function (doc) {\n                    return doc._id === _doc3._id;\n                  });\n                assert.isNull(err);\n                nr.should.equal(1);\n                data.length.should.equal(2);\n                assert.deepEqual(doc2, {\n                  a: 2,\n                  b: 'si',\n                  _id: _doc2._id\n                });\n                assert.deepEqual(doc3, {\n                  a: 3,\n                  b: 'coin',\n                  _id: _doc3._id\n                });\n                d.remove({\n                  a: {\n                    $in: [2, 3]\n                  }\n                }, {\n                  multi: true\n                }, function (err, nr) {\n                  var data = d.getAllData();\n                  assert.isNull(err);\n                  nr.should.equal(2);\n                  data.length.should.equal(0);\n                  done();\n                });\n              });\n            });\n          });\n        });\n      });","file":"db.test.js","skipped":false,"dir":"test"},{"name":"Indexes get updated when a document (or multiple documents) is removed","suites":["Database","Using indexes","Updating indexes upon document remove"],"updatePoint":{"line":3772,"column":80,"index":118815},"line":3772,"code":"      it('Indexes get updated when a document (or multiple documents) is removed', function (done) {\n        d.ensureIndex({\n          fieldName: 'a'\n        });\n        d.ensureIndex({\n          fieldName: 'b'\n        });\n        d.insert({\n          a: 1,\n          b: 'hello'\n        }, function (err, doc1) {\n          d.insert({\n            a: 2,\n            b: 'si'\n          }, function (err, doc2) {\n            d.insert({\n              a: 3,\n              b: 'coin'\n            }, function (err, doc3) {\n              // Simple remove\n              d.remove({\n                a: 1\n              }, {}, function (err, nr) {\n                assert.isNull(err);\n                nr.should.equal(1);\n                d.indexes.a.tree.getNumberOfKeys().should.equal(2);\n                d.indexes.a.getMatching(2)[0]._id.should.equal(doc2._id);\n                d.indexes.a.getMatching(3)[0]._id.should.equal(doc3._id);\n                d.indexes.b.tree.getNumberOfKeys().should.equal(2);\n                d.indexes.b.getMatching('si')[0]._id.should.equal(doc2._id);\n                d.indexes.b.getMatching('coin')[0]._id.should.equal(doc3._id);\n\n                // The same pointers are shared between all indexes\n                d.indexes.a.tree.getNumberOfKeys().should.equal(2);\n                d.indexes.b.tree.getNumberOfKeys().should.equal(2);\n                d.indexes._id.tree.getNumberOfKeys().should.equal(2);\n                d.indexes.a.getMatching(2)[0].should.equal(d.indexes._id.getMatching(doc2._id)[0]);\n                d.indexes.b.getMatching('si')[0].should.equal(d.indexes._id.getMatching(doc2._id)[0]);\n                d.indexes.a.getMatching(3)[0].should.equal(d.indexes._id.getMatching(doc3._id)[0]);\n                d.indexes.b.getMatching('coin')[0].should.equal(d.indexes._id.getMatching(doc3._id)[0]);\n\n                // Multi remove\n                d.remove({}, {\n                  multi: true\n                }, function (err, nr) {\n                  assert.isNull(err);\n                  nr.should.equal(2);\n                  d.indexes.a.tree.getNumberOfKeys().should.equal(0);\n                  d.indexes.b.tree.getNumberOfKeys().should.equal(0);\n                  d.indexes._id.tree.getNumberOfKeys().should.equal(0);\n                  done();\n                });\n              });\n            });\n          });\n        });\n      });","file":"db.test.js","skipped":false,"dir":"test"},{"name":"Indexes are persisted to a separate file and recreated upon reload","suites":["Database","Using indexes","Persisting indexes"],"updatePoint":{"line":3832,"column":76,"index":121297},"line":3832,"code":"      it('Indexes are persisted to a separate file and recreated upon reload', function (done) {\n        var persDb = \"workspace/persistIndexes.db\",\n          db;\n        if (fs.existsSync(persDb)) {\n          fs.writeFileSync(persDb, '', 'utf8');\n        }\n        db = new Datastore({\n          filename: persDb,\n          autoload: true\n        });\n        Object.keys(db.indexes).length.should.equal(1);\n        Object.keys(db.indexes)[0].should.equal(\"_id\");\n        db.insert({\n          planet: \"Earth\"\n        }, function (err) {\n          assert.isNull(err);\n          db.insert({\n            planet: \"Mars\"\n          }, function (err) {\n            assert.isNull(err);\n            db.ensureIndex({\n              fieldName: \"planet\"\n            }, function (err) {\n              Object.keys(db.indexes).length.should.equal(2);\n              Object.keys(db.indexes)[0].should.equal(\"_id\");\n              Object.keys(db.indexes)[1].should.equal(\"planet\");\n              db.indexes._id.getAll().length.should.equal(2);\n              db.indexes.planet.getAll().length.should.equal(2);\n              db.indexes.planet.fieldName.should.equal(\"planet\");\n\n              // After a reload the indexes are recreated\n              db = new Datastore({\n                filename: persDb\n              });\n              db.loadDatabase(function (err) {\n                assert.isNull(err);\n                Object.keys(db.indexes).length.should.equal(2);\n                Object.keys(db.indexes)[0].should.equal(\"_id\");\n                Object.keys(db.indexes)[1].should.equal(\"planet\");\n                db.indexes._id.getAll().length.should.equal(2);\n                db.indexes.planet.getAll().length.should.equal(2);\n                db.indexes.planet.fieldName.should.equal(\"planet\");\n\n                // After another reload the indexes are still there (i.e. they are preserved during autocompaction)\n                db = new Datastore({\n                  filename: persDb\n                });\n                db.loadDatabase(function (err) {\n                  assert.isNull(err);\n                  Object.keys(db.indexes).length.should.equal(2);\n                  Object.keys(db.indexes)[0].should.equal(\"_id\");\n                  Object.keys(db.indexes)[1].should.equal(\"planet\");\n                  db.indexes._id.getAll().length.should.equal(2);\n                  db.indexes.planet.getAll().length.should.equal(2);\n                  db.indexes.planet.fieldName.should.equal(\"planet\");\n                  done();\n                });\n              });\n            });\n          });\n        });\n      });","file":"db.test.js","skipped":false,"dir":"test"},{"name":"Indexes are persisted with their options and recreated even if some db operation happen between loads","suites":["Database","Using indexes","Persisting indexes"],"updatePoint":{"line":3894,"column":111,"index":123928},"line":3894,"code":"      it('Indexes are persisted with their options and recreated even if some db operation happen between loads', function (done) {\n        var persDb = \"workspace/persistIndexes.db\",\n          db;\n        if (fs.existsSync(persDb)) {\n          fs.writeFileSync(persDb, '', 'utf8');\n        }\n        db = new Datastore({\n          filename: persDb,\n          autoload: true\n        });\n        Object.keys(db.indexes).length.should.equal(1);\n        Object.keys(db.indexes)[0].should.equal(\"_id\");\n        db.insert({\n          planet: \"Earth\"\n        }, function (err) {\n          assert.isNull(err);\n          db.insert({\n            planet: \"Mars\"\n          }, function (err) {\n            assert.isNull(err);\n            db.ensureIndex({\n              fieldName: \"planet\",\n              unique: true,\n              sparse: false\n            }, function (err) {\n              Object.keys(db.indexes).length.should.equal(2);\n              Object.keys(db.indexes)[0].should.equal(\"_id\");\n              Object.keys(db.indexes)[1].should.equal(\"planet\");\n              db.indexes._id.getAll().length.should.equal(2);\n              db.indexes.planet.getAll().length.should.equal(2);\n              db.indexes.planet.unique.should.equal(true);\n              db.indexes.planet.sparse.should.equal(false);\n              db.insert({\n                planet: \"Jupiter\"\n              }, function (err) {\n                assert.isNull(err);\n\n                // After a reload the indexes are recreated\n                db = new Datastore({\n                  filename: persDb\n                });\n                db.loadDatabase(function (err) {\n                  assert.isNull(err);\n                  Object.keys(db.indexes).length.should.equal(2);\n                  Object.keys(db.indexes)[0].should.equal(\"_id\");\n                  Object.keys(db.indexes)[1].should.equal(\"planet\");\n                  db.indexes._id.getAll().length.should.equal(3);\n                  db.indexes.planet.getAll().length.should.equal(3);\n                  db.indexes.planet.unique.should.equal(true);\n                  db.indexes.planet.sparse.should.equal(false);\n                  db.ensureIndex({\n                    fieldName: 'bloup',\n                    unique: false,\n                    sparse: true\n                  }, function (err) {\n                    assert.isNull(err);\n                    Object.keys(db.indexes).length.should.equal(3);\n                    Object.keys(db.indexes)[0].should.equal(\"_id\");\n                    Object.keys(db.indexes)[1].should.equal(\"planet\");\n                    Object.keys(db.indexes)[2].should.equal(\"bloup\");\n                    db.indexes._id.getAll().length.should.equal(3);\n                    db.indexes.planet.getAll().length.should.equal(3);\n                    db.indexes.bloup.getAll().length.should.equal(0);\n                    db.indexes.planet.unique.should.equal(true);\n                    db.indexes.planet.sparse.should.equal(false);\n                    db.indexes.bloup.unique.should.equal(false);\n                    db.indexes.bloup.sparse.should.equal(true);\n\n                    // After another reload the indexes are still there (i.e. they are preserved during autocompaction)\n                    db = new Datastore({\n                      filename: persDb\n                    });\n                    db.loadDatabase(function (err) {\n                      assert.isNull(err);\n                      Object.keys(db.indexes).length.should.equal(3);\n                      Object.keys(db.indexes)[0].should.equal(\"_id\");\n                      Object.keys(db.indexes)[1].should.equal(\"planet\");\n                      Object.keys(db.indexes)[2].should.equal(\"bloup\");\n                      db.indexes._id.getAll().length.should.equal(3);\n                      db.indexes.planet.getAll().length.should.equal(3);\n                      db.indexes.bloup.getAll().length.should.equal(0);\n                      db.indexes.planet.unique.should.equal(true);\n                      db.indexes.planet.sparse.should.equal(false);\n                      db.indexes.bloup.unique.should.equal(false);\n                      db.indexes.bloup.sparse.should.equal(true);\n                      done();\n                    });\n                  });\n                });\n              });\n            });\n          });\n        });\n      });","file":"db.test.js","skipped":false,"dir":"test"},{"name":"Indexes can also be removed and the remove persisted","suites":["Database","Using indexes","Persisting indexes"],"updatePoint":{"line":3988,"column":62,"index":128234},"line":3988,"code":"      it('Indexes can also be removed and the remove persisted', function (done) {\n        var persDb = \"workspace/persistIndexes.db\",\n          db;\n        if (fs.existsSync(persDb)) {\n          fs.writeFileSync(persDb, '', 'utf8');\n        }\n        db = new Datastore({\n          filename: persDb,\n          autoload: true\n        });\n        Object.keys(db.indexes).length.should.equal(1);\n        Object.keys(db.indexes)[0].should.equal(\"_id\");\n        db.insert({\n          planet: \"Earth\"\n        }, function (err) {\n          assert.isNull(err);\n          db.insert({\n            planet: \"Mars\"\n          }, function (err) {\n            assert.isNull(err);\n            db.ensureIndex({\n              fieldName: \"planet\"\n            }, function (err) {\n              assert.isNull(err);\n              db.ensureIndex({\n                fieldName: \"another\"\n              }, function (err) {\n                assert.isNull(err);\n                Object.keys(db.indexes).length.should.equal(3);\n                Object.keys(db.indexes)[0].should.equal(\"_id\");\n                Object.keys(db.indexes)[1].should.equal(\"planet\");\n                Object.keys(db.indexes)[2].should.equal(\"another\");\n                db.indexes._id.getAll().length.should.equal(2);\n                db.indexes.planet.getAll().length.should.equal(2);\n                db.indexes.planet.fieldName.should.equal(\"planet\");\n\n                // After a reload the indexes are recreated\n                db = new Datastore({\n                  filename: persDb\n                });\n                db.loadDatabase(function (err) {\n                  assert.isNull(err);\n                  Object.keys(db.indexes).length.should.equal(3);\n                  Object.keys(db.indexes)[0].should.equal(\"_id\");\n                  Object.keys(db.indexes)[1].should.equal(\"planet\");\n                  Object.keys(db.indexes)[2].should.equal(\"another\");\n                  db.indexes._id.getAll().length.should.equal(2);\n                  db.indexes.planet.getAll().length.should.equal(2);\n                  db.indexes.planet.fieldName.should.equal(\"planet\");\n\n                  // Index is removed\n                  db.removeIndex(\"planet\", function (err) {\n                    assert.isNull(err);\n                    Object.keys(db.indexes).length.should.equal(2);\n                    Object.keys(db.indexes)[0].should.equal(\"_id\");\n                    Object.keys(db.indexes)[1].should.equal(\"another\");\n                    db.indexes._id.getAll().length.should.equal(2);\n\n                    // After a reload indexes are preserved\n                    db = new Datastore({\n                      filename: persDb\n                    });\n                    db.loadDatabase(function (err) {\n                      assert.isNull(err);\n                      Object.keys(db.indexes).length.should.equal(2);\n                      Object.keys(db.indexes)[0].should.equal(\"_id\");\n                      Object.keys(db.indexes)[1].should.equal(\"another\");\n                      db.indexes._id.getAll().length.should.equal(2);\n\n                      // After another reload the indexes are still there (i.e. they are preserved during autocompaction)\n                      db = new Datastore({\n                        filename: persDb\n                      });\n                      db.loadDatabase(function (err) {\n                        assert.isNull(err);\n                        Object.keys(db.indexes).length.should.equal(2);\n                        Object.keys(db.indexes)[0].should.equal(\"_id\");\n                        Object.keys(db.indexes)[1].should.equal(\"another\");\n                        db.indexes._id.getAll().length.should.equal(2);\n                        done();\n                      });\n                    });\n                  });\n                });\n              });\n            });\n          });\n        });\n      });","file":"db.test.js","skipped":false,"dir":"test"},{"name":"Results of getMatching should never contain duplicates","suites":["Database","Using indexes","Persisting indexes"],"updatePoint":{"line":4079,"column":62,"index":132171},"line":4079,"code":"    it('Results of getMatching should never contain duplicates', function (done) {\n      d.ensureIndex({\n        fieldName: 'bad'\n      });\n      d.insert({\n        bad: ['a', 'b']\n      }, function () {\n        d.getCandidates({\n          bad: {\n            $in: ['a', 'b']\n          }\n        }, function (err, res) {\n          res.length.should.equal(1);\n          done();\n        });\n      });\n    });","file":"db.test.js","skipped":false,"dir":"test"},{"name":"A throw in a callback doesnt prevent execution of next operations","suites":["Executor","With persistent database"],"updatePoint":{"line":169,"column":73,"index":5068},"line":169,"code":"    it('A throw in a callback doesnt prevent execution of next operations', function (done) {\n      testThrowInCallback(d, done);\n    });","file":"executor.test.js","skipped":false,"dir":"test"},{"name":"A falsy callback doesnt prevent execution of next operations","suites":["Executor","With persistent database"],"updatePoint":{"line":172,"column":68,"index":5201},"line":172,"code":"    it('A falsy callback doesnt prevent execution of next operations', function (done) {\n      testFalsyCallback(d, done);\n    });","file":"executor.test.js","skipped":false,"dir":"test"},{"name":"Operations are executed in the right order","suites":["Executor","With persistent database"],"updatePoint":{"line":175,"column":50,"index":5314},"line":175,"code":"    it('Operations are executed in the right order', function (done) {\n      testRightOrder(d, done);\n    });","file":"executor.test.js","skipped":false,"dir":"test"},{"name":"Does not starve event loop and raise warning when more than 1000 callbacks are in queue","suites":["Executor","With persistent database"],"updatePoint":{"line":178,"column":95,"index":5469},"line":178,"code":"    it('Does not starve event loop and raise warning when more than 1000 callbacks are in queue', function (done) {\n      testEventLoopStarvation(d, done);\n    });","file":"executor.test.js","skipped":false,"dir":"test"},{"name":"Works in the right order even with no supplied callback","suites":["Executor","With persistent database"],"updatePoint":{"line":181,"column":63,"index":5601},"line":181,"code":"    it('Works in the right order even with no supplied callback', function (done) {\n      testExecutorWorksWithoutCallback(d, done);\n    });","file":"executor.test.js","skipped":false,"dir":"test"},{"name":"A throw in a callback doesnt prevent execution of next operations","suites":["Executor","With non persistent database"],"updatePoint":{"line":199,"column":73,"index":6165},"line":199,"code":"    it('A throw in a callback doesnt prevent execution of next operations', function (done) {\n      testThrowInCallback(d, done);\n    });","file":"executor.test.js","skipped":false,"dir":"test"},{"name":"A falsy callback doesnt prevent execution of next operations","suites":["Executor","With non persistent database"],"updatePoint":{"line":202,"column":68,"index":6298},"line":202,"code":"    it('A falsy callback doesnt prevent execution of next operations', function (done) {\n      testFalsyCallback(d, done);\n    });","file":"executor.test.js","skipped":false,"dir":"test"},{"name":"Operations are executed in the right order","suites":["Executor","With non persistent database"],"updatePoint":{"line":205,"column":50,"index":6411},"line":205,"code":"    it('Operations are executed in the right order', function (done) {\n      testRightOrder(d, done);\n    });","file":"executor.test.js","skipped":false,"dir":"test"},{"name":"Works in the right order even with no supplied callback","suites":["Executor","With non persistent database"],"updatePoint":{"line":208,"column":63,"index":6534},"line":208,"code":"    it('Works in the right order even with no supplied callback', function (done) {\n      testExecutorWorksWithoutCallback(d, done);\n    });","file":"executor.test.js","skipped":false,"dir":"test"},{"name":"Can insert pointers to documents in the index correctly when they have the field","suites":["Indexes","Insertion"],"updatePoint":{"line":10,"column":88,"index":411},"line":10,"code":"    it('Can insert pointers to documents in the index correctly when they have the field', function () {\n      var idx = new Index({\n          fieldName: 'tf'\n        }),\n        doc1 = {\n          a: 5,\n          tf: 'hello'\n        },\n        doc2 = {\n          a: 8,\n          tf: 'world'\n        },\n        doc3 = {\n          a: 2,\n          tf: 'bloup'\n        };\n      idx.insert(doc1);\n      idx.insert(doc2);\n      idx.insert(doc3);\n\n      // The underlying BST now has 3 nodes which contain the docs where it's expected\n      idx.tree.getNumberOfKeys().should.equal(3);\n      assert.deepEqual(idx.tree.search('hello'), [{\n        a: 5,\n        tf: 'hello'\n      }]);\n      assert.deepEqual(idx.tree.search('world'), [{\n        a: 8,\n        tf: 'world'\n      }]);\n      assert.deepEqual(idx.tree.search('bloup'), [{\n        a: 2,\n        tf: 'bloup'\n      }]);\n\n      // The nodes contain pointers to the actual documents\n      idx.tree.search('world')[0].should.equal(doc2);\n      idx.tree.search('bloup')[0].a = 42;\n      doc3.a.should.equal(42);\n    });","file":"indexes.test.js","skipped":false,"dir":"test"},{"name":"Inserting twice for the same fieldName in a unique index will result in an error thrown","suites":["Indexes","Insertion"],"updatePoint":{"line":50,"column":95,"index":1484},"line":50,"code":"    it('Inserting twice for the same fieldName in a unique index will result in an error thrown', function () {\n      var idx = new Index({\n          fieldName: 'tf',\n          unique: true\n        }),\n        doc1 = {\n          a: 5,\n          tf: 'hello'\n        };\n      idx.insert(doc1);\n      idx.tree.getNumberOfKeys().should.equal(1);\n      (function () {\n        idx.insert(doc1);\n      }).should.throw();\n    });","file":"indexes.test.js","skipped":false,"dir":"test"},{"name":"Inserting twice for a fieldName the docs dont have with a unique index results in an error thrown","suites":["Indexes","Insertion"],"updatePoint":{"line":65,"column":105,"index":1916},"line":65,"code":"    it('Inserting twice for a fieldName the docs dont have with a unique index results in an error thrown', function () {\n      var idx = new Index({\n          fieldName: 'nope',\n          unique: true\n        }),\n        doc1 = {\n          a: 5,\n          tf: 'hello'\n        },\n        doc2 = {\n          a: 5,\n          tf: 'world'\n        };\n      idx.insert(doc1);\n      idx.tree.getNumberOfKeys().should.equal(1);\n      (function () {\n        idx.insert(doc2);\n      }).should.throw();\n    });","file":"indexes.test.js","skipped":false,"dir":"test"},{"name":"Inserting twice for a fieldName the docs dont have with a unique and sparse index will not throw, since the docs will be non indexed","suites":["Indexes","Insertion"],"updatePoint":{"line":84,"column":140,"index":2451},"line":84,"code":"    it('Inserting twice for a fieldName the docs dont have with a unique and sparse index will not throw, since the docs will be non indexed', function () {\n      var idx = new Index({\n          fieldName: 'nope',\n          unique: true,\n          sparse: true\n        }),\n        doc1 = {\n          a: 5,\n          tf: 'hello'\n        },\n        doc2 = {\n          a: 5,\n          tf: 'world'\n        };\n      idx.insert(doc1);\n      idx.insert(doc2);\n      idx.tree.getNumberOfKeys().should.equal(0); // Docs are not indexed\n    });","file":"indexes.test.js","skipped":false,"dir":"test"},{"name":"Works with dot notation","suites":["Indexes","Insertion"],"updatePoint":{"line":103,"column":31,"index":2878},"line":103,"code":"    it('Works with dot notation', function () {\n      var idx = new Index({\n          fieldName: 'tf.nested'\n        }),\n        doc1 = {\n          a: 5,\n          tf: {\n            nested: 'hello'\n          }\n        },\n        doc2 = {\n          a: 8,\n          tf: {\n            nested: 'world',\n            additional: true\n          }\n        },\n        doc3 = {\n          a: 2,\n          tf: {\n            nested: 'bloup',\n            age: 42\n          }\n        };\n      idx.insert(doc1);\n      idx.insert(doc2);\n      idx.insert(doc3);\n\n      // The underlying BST now has 3 nodes which contain the docs where it's expected\n      idx.tree.getNumberOfKeys().should.equal(3);\n      assert.deepEqual(idx.tree.search('hello'), [doc1]);\n      assert.deepEqual(idx.tree.search('world'), [doc2]);\n      assert.deepEqual(idx.tree.search('bloup'), [doc3]);\n\n      // The nodes contain pointers to the actual documents\n      idx.tree.search('bloup')[0].a = 42;\n      doc3.a.should.equal(42);\n    });","file":"indexes.test.js","skipped":false,"dir":"test"},{"name":"Can insert an array of documents","suites":["Indexes","Insertion"],"updatePoint":{"line":141,"column":40,"index":3885},"line":141,"code":"    it('Can insert an array of documents', function () {\n      var idx = new Index({\n          fieldName: 'tf'\n        }),\n        doc1 = {\n          a: 5,\n          tf: 'hello'\n        },\n        doc2 = {\n          a: 8,\n          tf: 'world'\n        },\n        doc3 = {\n          a: 2,\n          tf: 'bloup'\n        };\n      idx.insert([doc1, doc2, doc3]);\n      idx.tree.getNumberOfKeys().should.equal(3);\n      assert.deepEqual(idx.tree.search('hello'), [doc1]);\n      assert.deepEqual(idx.tree.search('world'), [doc2]);\n      assert.deepEqual(idx.tree.search('bloup'), [doc3]);\n    });","file":"indexes.test.js","skipped":false,"dir":"test"},{"name":"When inserting an array of elements, if an error is thrown all inserts need to be rolled back","suites":["Indexes","Insertion"],"updatePoint":{"line":163,"column":101,"index":4537},"line":163,"code":"    it('When inserting an array of elements, if an error is thrown all inserts need to be rolled back', function () {\n      var idx = new Index({\n          fieldName: 'tf',\n          unique: true\n        }),\n        doc1 = {\n          a: 5,\n          tf: 'hello'\n        },\n        doc2 = {\n          a: 8,\n          tf: 'world'\n        },\n        doc2b = {\n          a: 84,\n          tf: 'world'\n        },\n        doc3 = {\n          a: 2,\n          tf: 'bloup'\n        };\n      try {\n        idx.insert([doc1, doc2, doc2b, doc3]);\n      } catch (e) {\n        e.errorType.should.equal('uniqueViolated');\n      }\n      idx.tree.getNumberOfKeys().should.equal(0);\n      assert.deepEqual(idx.tree.search('hello'), []);\n      assert.deepEqual(idx.tree.search('world'), []);\n      assert.deepEqual(idx.tree.search('bloup'), []);\n    });","file":"indexes.test.js","skipped":false,"dir":"test"},{"name":"Inserts one entry per array element in the index","suites":["Indexes","Insertion","Array fields"],"updatePoint":{"line":195,"column":58,"index":5370},"line":195,"code":"      it('Inserts one entry per array element in the index', function () {\n        var obj = {\n            tf: ['aa', 'bb'],\n            really: 'yeah'\n          },\n          obj2 = {\n            tf: 'normal',\n            yes: 'indeed'\n          },\n          idx = new Index({\n            fieldName: 'tf'\n          });\n        idx.insert(obj);\n        idx.getAll().length.should.equal(2);\n        idx.getAll()[0].should.equal(obj);\n        idx.getAll()[1].should.equal(obj);\n        idx.insert(obj2);\n        idx.getAll().length.should.equal(3);\n      });","file":"indexes.test.js","skipped":false,"dir":"test"},{"name":"Inserts one entry per array element in the index, type-checked","suites":["Indexes","Insertion","Array fields"],"updatePoint":{"line":214,"column":72,"index":5940},"line":214,"code":"      it('Inserts one entry per array element in the index, type-checked', function () {\n        var obj = {\n            tf: ['42', 42, new Date(42), 42],\n            really: 'yeah'\n          },\n          idx = new Index({\n            fieldName: 'tf'\n          });\n        idx.insert(obj);\n        idx.getAll().length.should.equal(3);\n        idx.getAll()[0].should.equal(obj);\n        idx.getAll()[1].should.equal(obj);\n        idx.getAll()[2].should.equal(obj);\n      });","file":"indexes.test.js","skipped":false,"dir":"test"},{"name":"Inserts one entry per unique array element in the index, the unique constraint only holds across documents","suites":["Indexes","Insertion","Array fields"],"updatePoint":{"line":228,"column":116,"index":6458},"line":228,"code":"      it('Inserts one entry per unique array element in the index, the unique constraint only holds across documents', function () {\n        var obj = {\n            tf: ['aa', 'aa'],\n            really: 'yeah'\n          },\n          obj2 = {\n            tf: ['cc', 'yy', 'cc'],\n            yes: 'indeed'\n          },\n          idx = new Index({\n            fieldName: 'tf',\n            unique: true\n          });\n        idx.insert(obj);\n        idx.getAll().length.should.equal(1);\n        idx.getAll()[0].should.equal(obj);\n        idx.insert(obj2);\n        idx.getAll().length.should.equal(3);\n      });","file":"indexes.test.js","skipped":false,"dir":"test"},{"name":"The unique constraint holds across documents","suites":["Indexes","Insertion","Array fields"],"updatePoint":{"line":247,"column":54,"index":7003},"line":247,"code":"      it('The unique constraint holds across documents', function () {\n        var obj = {\n            tf: ['aa', 'aa'],\n            really: 'yeah'\n          },\n          obj2 = {\n            tf: ['cc', 'aa', 'cc'],\n            yes: 'indeed'\n          },\n          idx = new Index({\n            fieldName: 'tf',\n            unique: true\n          });\n        idx.insert(obj);\n        idx.getAll().length.should.equal(1);\n        idx.getAll()[0].should.equal(obj);\n        (function () {\n          idx.insert(obj2);\n        }).should.throw();\n      });","file":"indexes.test.js","skipped":false,"dir":"test"},{"name":"When removing a document, remove it from the index at all unique array elements","suites":["Indexes","Insertion","Array fields"],"updatePoint":{"line":267,"column":89,"index":7590},"line":267,"code":"      it('When removing a document, remove it from the index at all unique array elements', function () {\n        var obj = {\n            tf: ['aa', 'aa'],\n            really: 'yeah'\n          },\n          obj2 = {\n            tf: ['cc', 'aa', 'cc'],\n            yes: 'indeed'\n          },\n          idx = new Index({\n            fieldName: 'tf'\n          });\n        idx.insert(obj);\n        idx.insert(obj2);\n        idx.getMatching('aa').length.should.equal(2);\n        idx.getMatching('aa').indexOf(obj).should.not.equal(-1);\n        idx.getMatching('aa').indexOf(obj2).should.not.equal(-1);\n        idx.getMatching('cc').length.should.equal(1);\n        idx.remove(obj2);\n        idx.getMatching('aa').length.should.equal(1);\n        idx.getMatching('aa').indexOf(obj).should.not.equal(-1);\n        idx.getMatching('aa').indexOf(obj2).should.equal(-1);\n        idx.getMatching('cc').length.should.equal(0);\n      });","file":"indexes.test.js","skipped":false,"dir":"test"},{"name":"If a unique constraint is violated when inserting an array key, roll back all inserts before the key","suites":["Indexes","Insertion","Array fields"],"updatePoint":{"line":291,"column":110,"index":8532},"line":291,"code":"      it('If a unique constraint is violated when inserting an array key, roll back all inserts before the key', function () {\n        var obj = {\n            tf: ['aa', 'bb'],\n            really: 'yeah'\n          },\n          obj2 = {\n            tf: ['cc', 'dd', 'aa', 'ee'],\n            yes: 'indeed'\n          },\n          idx = new Index({\n            fieldName: 'tf',\n            unique: true\n          });\n        idx.insert(obj);\n        idx.getAll().length.should.equal(2);\n        idx.getMatching('aa').length.should.equal(1);\n        idx.getMatching('bb').length.should.equal(1);\n        idx.getMatching('cc').length.should.equal(0);\n        idx.getMatching('dd').length.should.equal(0);\n        idx.getMatching('ee').length.should.equal(0);\n        (function () {\n          idx.insert(obj2);\n        }).should.throw();\n        idx.getAll().length.should.equal(2);\n        idx.getMatching('aa').length.should.equal(1);\n        idx.getMatching('bb').length.should.equal(1);\n        idx.getMatching('cc').length.should.equal(0);\n        idx.getMatching('dd').length.should.equal(0);\n        idx.getMatching('ee').length.should.equal(0);\n      });","file":"indexes.test.js","skipped":false,"dir":"test"},{"name":"Can remove pointers from the index, even when multiple documents have the same key","suites":["Indexes","Removal"],"updatePoint":{"line":325,"column":90,"index":9792},"line":325,"code":"    it('Can remove pointers from the index, even when multiple documents have the same key', function () {\n      var idx = new Index({\n          fieldName: 'tf'\n        }),\n        doc1 = {\n          a: 5,\n          tf: 'hello'\n        },\n        doc2 = {\n          a: 8,\n          tf: 'world'\n        },\n        doc3 = {\n          a: 2,\n          tf: 'bloup'\n        },\n        doc4 = {\n          a: 23,\n          tf: 'world'\n        };\n      idx.insert(doc1);\n      idx.insert(doc2);\n      idx.insert(doc3);\n      idx.insert(doc4);\n      idx.tree.getNumberOfKeys().should.equal(3);\n      idx.remove(doc1);\n      idx.tree.getNumberOfKeys().should.equal(2);\n      idx.tree.search('hello').length.should.equal(0);\n      idx.remove(doc2);\n      idx.tree.getNumberOfKeys().should.equal(2);\n      idx.tree.search('world').length.should.equal(1);\n      idx.tree.search('world')[0].should.equal(doc4);\n    });","file":"indexes.test.js","skipped":false,"dir":"test"},{"name":"If we have a sparse index, removing a non indexed doc has no effect","suites":["Indexes","Removal"],"updatePoint":{"line":358,"column":75,"index":10681},"line":358,"code":"    it('If we have a sparse index, removing a non indexed doc has no effect', function () {\n      var idx = new Index({\n          fieldName: 'nope',\n          sparse: true\n        }),\n        doc1 = {\n          a: 5,\n          tf: 'hello'\n        },\n        doc2 = {\n          a: 5,\n          tf: 'world'\n        };\n      idx.insert(doc1);\n      idx.insert(doc2);\n      idx.tree.getNumberOfKeys().should.equal(0);\n      idx.remove(doc1);\n      idx.tree.getNumberOfKeys().should.equal(0);\n    });","file":"indexes.test.js","skipped":false,"dir":"test"},{"name":"Works with dot notation","suites":["Indexes","Removal"],"updatePoint":{"line":377,"column":31,"index":11133},"line":377,"code":"    it('Works with dot notation', function () {\n      var idx = new Index({\n          fieldName: 'tf.nested'\n        }),\n        doc1 = {\n          a: 5,\n          tf: {\n            nested: 'hello'\n          }\n        },\n        doc2 = {\n          a: 8,\n          tf: {\n            nested: 'world',\n            additional: true\n          }\n        },\n        doc3 = {\n          a: 2,\n          tf: {\n            nested: 'bloup',\n            age: 42\n          }\n        },\n        doc4 = {\n          a: 2,\n          tf: {\n            nested: 'world',\n            fruits: ['apple', 'carrot']\n          }\n        };\n      idx.insert(doc1);\n      idx.insert(doc2);\n      idx.insert(doc3);\n      idx.insert(doc4);\n      idx.tree.getNumberOfKeys().should.equal(3);\n      idx.remove(doc1);\n      idx.tree.getNumberOfKeys().should.equal(2);\n      idx.tree.search('hello').length.should.equal(0);\n      idx.remove(doc2);\n      idx.tree.getNumberOfKeys().should.equal(2);\n      idx.tree.search('world').length.should.equal(1);\n      idx.tree.search('world')[0].should.equal(doc4);\n    });","file":"indexes.test.js","skipped":false,"dir":"test"},{"name":"Can remove an array of documents","suites":["Indexes","Removal"],"updatePoint":{"line":421,"column":40,"index":12221},"line":421,"code":"    it('Can remove an array of documents', function () {\n      var idx = new Index({\n          fieldName: 'tf'\n        }),\n        doc1 = {\n          a: 5,\n          tf: 'hello'\n        },\n        doc2 = {\n          a: 8,\n          tf: 'world'\n        },\n        doc3 = {\n          a: 2,\n          tf: 'bloup'\n        };\n      idx.insert([doc1, doc2, doc3]);\n      idx.tree.getNumberOfKeys().should.equal(3);\n      idx.remove([doc1, doc3]);\n      idx.tree.getNumberOfKeys().should.equal(1);\n      assert.deepEqual(idx.tree.search('hello'), []);\n      assert.deepEqual(idx.tree.search('world'), [doc2]);\n      assert.deepEqual(idx.tree.search('bloup'), []);\n    });","file":"indexes.test.js","skipped":false,"dir":"test"},{"name":"Can update a document whose key did or didnt change","suites":["Indexes","Update"],"updatePoint":{"line":448,"column":59,"index":12980},"line":448,"code":"    it('Can update a document whose key did or didnt change', function () {\n      var idx = new Index({\n          fieldName: 'tf'\n        }),\n        doc1 = {\n          a: 5,\n          tf: 'hello'\n        },\n        doc2 = {\n          a: 8,\n          tf: 'world'\n        },\n        doc3 = {\n          a: 2,\n          tf: 'bloup'\n        },\n        doc4 = {\n          a: 23,\n          tf: 'world'\n        },\n        doc5 = {\n          a: 1,\n          tf: 'changed'\n        };\n      idx.insert(doc1);\n      idx.insert(doc2);\n      idx.insert(doc3);\n      idx.tree.getNumberOfKeys().should.equal(3);\n      assert.deepEqual(idx.tree.search('world'), [doc2]);\n      idx.update(doc2, doc4);\n      idx.tree.getNumberOfKeys().should.equal(3);\n      assert.deepEqual(idx.tree.search('world'), [doc4]);\n      idx.update(doc1, doc5);\n      idx.tree.getNumberOfKeys().should.equal(3);\n      assert.deepEqual(idx.tree.search('hello'), []);\n      assert.deepEqual(idx.tree.search('changed'), [doc5]);\n    });","file":"indexes.test.js","skipped":false,"dir":"test"},{"name":"If a simple update violates a unique constraint, changes are rolled back and an error thrown","suites":["Indexes","Update"],"updatePoint":{"line":485,"column":100,"index":14016},"line":485,"code":"    it('If a simple update violates a unique constraint, changes are rolled back and an error thrown', function () {\n      var idx = new Index({\n          fieldName: 'tf',\n          unique: true\n        }),\n        doc1 = {\n          a: 5,\n          tf: 'hello'\n        },\n        doc2 = {\n          a: 8,\n          tf: 'world'\n        },\n        doc3 = {\n          a: 2,\n          tf: 'bloup'\n        },\n        bad = {\n          a: 23,\n          tf: 'world'\n        };\n      idx.insert(doc1);\n      idx.insert(doc2);\n      idx.insert(doc3);\n      idx.tree.getNumberOfKeys().should.equal(3);\n      assert.deepEqual(idx.tree.search('hello'), [doc1]);\n      assert.deepEqual(idx.tree.search('world'), [doc2]);\n      assert.deepEqual(idx.tree.search('bloup'), [doc3]);\n      try {\n        idx.update(doc3, bad);\n      } catch (e) {\n        e.errorType.should.equal('uniqueViolated');\n      }\n\n      // No change\n      idx.tree.getNumberOfKeys().should.equal(3);\n      assert.deepEqual(idx.tree.search('hello'), [doc1]);\n      assert.deepEqual(idx.tree.search('world'), [doc2]);\n      assert.deepEqual(idx.tree.search('bloup'), [doc3]);\n    });","file":"indexes.test.js","skipped":false,"dir":"test"},{"name":"Can update an array of documents","suites":["Indexes","Update"],"updatePoint":{"line":525,"column":40,"index":15098},"line":525,"code":"    it('Can update an array of documents', function () {\n      var idx = new Index({\n          fieldName: 'tf'\n        }),\n        doc1 = {\n          a: 5,\n          tf: 'hello'\n        },\n        doc2 = {\n          a: 8,\n          tf: 'world'\n        },\n        doc3 = {\n          a: 2,\n          tf: 'bloup'\n        },\n        doc1b = {\n          a: 23,\n          tf: 'world'\n        },\n        doc2b = {\n          a: 1,\n          tf: 'changed'\n        },\n        doc3b = {\n          a: 44,\n          tf: 'bloup'\n        };\n      idx.insert(doc1);\n      idx.insert(doc2);\n      idx.insert(doc3);\n      idx.tree.getNumberOfKeys().should.equal(3);\n      idx.update([{\n        oldDoc: doc1,\n        newDoc: doc1b\n      }, {\n        oldDoc: doc2,\n        newDoc: doc2b\n      }, {\n        oldDoc: doc3,\n        newDoc: doc3b\n      }]);\n      idx.tree.getNumberOfKeys().should.equal(3);\n      idx.getMatching('world').length.should.equal(1);\n      idx.getMatching('world')[0].should.equal(doc1b);\n      idx.getMatching('changed').length.should.equal(1);\n      idx.getMatching('changed')[0].should.equal(doc2b);\n      idx.getMatching('bloup').length.should.equal(1);\n      idx.getMatching('bloup')[0].should.equal(doc3b);\n    });","file":"indexes.test.js","skipped":false,"dir":"test"},{"name":"If a unique constraint is violated during an array-update, all changes are rolled back and an error thrown","suites":["Indexes","Update"],"updatePoint":{"line":575,"column":114,"index":16397},"line":575,"code":"    it('If a unique constraint is violated during an array-update, all changes are rolled back and an error thrown', function () {\n      var idx = new Index({\n          fieldName: 'tf',\n          unique: true\n        }),\n        doc0 = {\n          a: 432,\n          tf: 'notthistoo'\n        },\n        doc1 = {\n          a: 5,\n          tf: 'hello'\n        },\n        doc2 = {\n          a: 8,\n          tf: 'world'\n        },\n        doc3 = {\n          a: 2,\n          tf: 'bloup'\n        },\n        doc1b = {\n          a: 23,\n          tf: 'changed'\n        },\n        doc2b = {\n          a: 1,\n          tf: 'changed'\n        } // Will violate the constraint (first try)\n        ,\n        doc2c = {\n          a: 1,\n          tf: 'notthistoo'\n        } // Will violate the constraint (second try)\n        ,\n        doc3b = {\n          a: 44,\n          tf: 'alsochanged'\n        };\n      idx.insert(doc1);\n      idx.insert(doc2);\n      idx.insert(doc3);\n      idx.tree.getNumberOfKeys().should.equal(3);\n      try {\n        idx.update([{\n          oldDoc: doc1,\n          newDoc: doc1b\n        }, {\n          oldDoc: doc2,\n          newDoc: doc2b\n        }, {\n          oldDoc: doc3,\n          newDoc: doc3b\n        }]);\n      } catch (e) {\n        e.errorType.should.equal('uniqueViolated');\n      }\n      idx.tree.getNumberOfKeys().should.equal(3);\n      idx.getMatching('hello').length.should.equal(1);\n      idx.getMatching('hello')[0].should.equal(doc1);\n      idx.getMatching('world').length.should.equal(1);\n      idx.getMatching('world')[0].should.equal(doc2);\n      idx.getMatching('bloup').length.should.equal(1);\n      idx.getMatching('bloup')[0].should.equal(doc3);\n      try {\n        idx.update([{\n          oldDoc: doc1,\n          newDoc: doc1b\n        }, {\n          oldDoc: doc2,\n          newDoc: doc2b\n        }, {\n          oldDoc: doc3,\n          newDoc: doc3b\n        }]);\n      } catch (e) {\n        e.errorType.should.equal('uniqueViolated');\n      }\n      idx.tree.getNumberOfKeys().should.equal(3);\n      idx.getMatching('hello').length.should.equal(1);\n      idx.getMatching('hello')[0].should.equal(doc1);\n      idx.getMatching('world').length.should.equal(1);\n      idx.getMatching('world')[0].should.equal(doc2);\n      idx.getMatching('bloup').length.should.equal(1);\n      idx.getMatching('bloup')[0].should.equal(doc3);\n    });","file":"indexes.test.js","skipped":false,"dir":"test"},{"name":"If an update doesnt change a document, the unique constraint is not violated","suites":["Indexes","Update"],"updatePoint":{"line":661,"column":84,"index":18727},"line":661,"code":"    it('If an update doesnt change a document, the unique constraint is not violated', function () {\n      var idx = new Index({\n          fieldName: 'tf',\n          unique: true\n        }),\n        doc1 = {\n          a: 5,\n          tf: 'hello'\n        },\n        doc2 = {\n          a: 8,\n          tf: 'world'\n        },\n        doc3 = {\n          a: 2,\n          tf: 'bloup'\n        },\n        noChange = {\n          a: 8,\n          tf: 'world'\n        };\n      idx.insert(doc1);\n      idx.insert(doc2);\n      idx.insert(doc3);\n      idx.tree.getNumberOfKeys().should.equal(3);\n      assert.deepEqual(idx.tree.search('world'), [doc2]);\n      idx.update(doc2, noChange); // No error thrown\n      idx.tree.getNumberOfKeys().should.equal(3);\n      assert.deepEqual(idx.tree.search('world'), [noChange]);\n    });","file":"indexes.test.js","skipped":false,"dir":"test"},{"name":"Can revert simple and batch updates","suites":["Indexes","Update"],"updatePoint":{"line":691,"column":43,"index":19498},"line":691,"code":"    it('Can revert simple and batch updates', function () {\n      var idx = new Index({\n          fieldName: 'tf'\n        }),\n        doc1 = {\n          a: 5,\n          tf: 'hello'\n        },\n        doc2 = {\n          a: 8,\n          tf: 'world'\n        },\n        doc3 = {\n          a: 2,\n          tf: 'bloup'\n        },\n        doc1b = {\n          a: 23,\n          tf: 'world'\n        },\n        doc2b = {\n          a: 1,\n          tf: 'changed'\n        },\n        doc3b = {\n          a: 44,\n          tf: 'bloup'\n        },\n        batchUpdate = [{\n          oldDoc: doc1,\n          newDoc: doc1b\n        }, {\n          oldDoc: doc2,\n          newDoc: doc2b\n        }, {\n          oldDoc: doc3,\n          newDoc: doc3b\n        }];\n      idx.insert(doc1);\n      idx.insert(doc2);\n      idx.insert(doc3);\n      idx.tree.getNumberOfKeys().should.equal(3);\n      idx.update(batchUpdate);\n      idx.tree.getNumberOfKeys().should.equal(3);\n      idx.getMatching('world').length.should.equal(1);\n      idx.getMatching('world')[0].should.equal(doc1b);\n      idx.getMatching('changed').length.should.equal(1);\n      idx.getMatching('changed')[0].should.equal(doc2b);\n      idx.getMatching('bloup').length.should.equal(1);\n      idx.getMatching('bloup')[0].should.equal(doc3b);\n      idx.revertUpdate(batchUpdate);\n      idx.tree.getNumberOfKeys().should.equal(3);\n      idx.getMatching('hello').length.should.equal(1);\n      idx.getMatching('hello')[0].should.equal(doc1);\n      idx.getMatching('world').length.should.equal(1);\n      idx.getMatching('world')[0].should.equal(doc2);\n      idx.getMatching('bloup').length.should.equal(1);\n      idx.getMatching('bloup')[0].should.equal(doc3);\n\n      // Now a simple update\n      idx.update(doc2, doc2b);\n      idx.tree.getNumberOfKeys().should.equal(3);\n      idx.getMatching('hello').length.should.equal(1);\n      idx.getMatching('hello')[0].should.equal(doc1);\n      idx.getMatching('changed').length.should.equal(1);\n      idx.getMatching('changed')[0].should.equal(doc2b);\n      idx.getMatching('bloup').length.should.equal(1);\n      idx.getMatching('bloup')[0].should.equal(doc3);\n      idx.revertUpdate(doc2, doc2b);\n      idx.tree.getNumberOfKeys().should.equal(3);\n      idx.getMatching('hello').length.should.equal(1);\n      idx.getMatching('hello')[0].should.equal(doc1);\n      idx.getMatching('world').length.should.equal(1);\n      idx.getMatching('world')[0].should.equal(doc2);\n      idx.getMatching('bloup').length.should.equal(1);\n      idx.getMatching('bloup')[0].should.equal(doc3);\n    });","file":"indexes.test.js","skipped":false,"dir":"test"},{"name":"Get all documents where fieldName is equal to the given value, or an empty array if no match","suites":["Indexes","Get matching documents"],"updatePoint":{"line":771,"column":100,"index":22197},"line":771,"code":"    it('Get all documents where fieldName is equal to the given value, or an empty array if no match', function () {\n      var idx = new Index({\n          fieldName: 'tf'\n        }),\n        doc1 = {\n          a: 5,\n          tf: 'hello'\n        },\n        doc2 = {\n          a: 8,\n          tf: 'world'\n        },\n        doc3 = {\n          a: 2,\n          tf: 'bloup'\n        },\n        doc4 = {\n          a: 23,\n          tf: 'world'\n        };\n      idx.insert(doc1);\n      idx.insert(doc2);\n      idx.insert(doc3);\n      idx.insert(doc4);\n      assert.deepEqual(idx.getMatching('bloup'), [doc3]);\n      assert.deepEqual(idx.getMatching('world'), [doc2, doc4]);\n      assert.deepEqual(idx.getMatching('nope'), []);\n    });","file":"indexes.test.js","skipped":false,"dir":"test"},{"name":"Can get all documents for a given key in a unique index","suites":["Indexes","Get matching documents"],"updatePoint":{"line":799,"column":63,"index":22887},"line":799,"code":"    it('Can get all documents for a given key in a unique index', function () {\n      var idx = new Index({\n          fieldName: 'tf',\n          unique: true\n        }),\n        doc1 = {\n          a: 5,\n          tf: 'hello'\n        },\n        doc2 = {\n          a: 8,\n          tf: 'world'\n        },\n        doc3 = {\n          a: 2,\n          tf: 'bloup'\n        };\n      idx.insert(doc1);\n      idx.insert(doc2);\n      idx.insert(doc3);\n      assert.deepEqual(idx.getMatching('bloup'), [doc3]);\n      assert.deepEqual(idx.getMatching('world'), [doc2]);\n      assert.deepEqual(idx.getMatching('nope'), []);\n    });","file":"indexes.test.js","skipped":false,"dir":"test"},{"name":"Can get all documents for which a field is undefined","suites":["Indexes","Get matching documents"],"updatePoint":{"line":823,"column":60,"index":23501},"line":823,"code":"    it('Can get all documents for which a field is undefined', function () {\n      var idx = new Index({\n          fieldName: 'tf'\n        }),\n        doc1 = {\n          a: 5,\n          tf: 'hello'\n        },\n        doc2 = {\n          a: 2,\n          nottf: 'bloup'\n        },\n        doc3 = {\n          a: 8,\n          tf: 'world'\n        },\n        doc4 = {\n          a: 7,\n          nottf: 'yes'\n        };\n      idx.insert(doc1);\n      idx.insert(doc2);\n      idx.insert(doc3);\n      assert.deepEqual(idx.getMatching('bloup'), []);\n      assert.deepEqual(idx.getMatching('hello'), [doc1]);\n      assert.deepEqual(idx.getMatching('world'), [doc3]);\n      assert.deepEqual(idx.getMatching('yes'), []);\n      assert.deepEqual(idx.getMatching(undefined), [doc2]);\n      idx.insert(doc4);\n      assert.deepEqual(idx.getMatching('bloup'), []);\n      assert.deepEqual(idx.getMatching('hello'), [doc1]);\n      assert.deepEqual(idx.getMatching('world'), [doc3]);\n      assert.deepEqual(idx.getMatching('yes'), []);\n      assert.deepEqual(idx.getMatching(undefined), [doc2, doc4]);\n    });","file":"indexes.test.js","skipped":false,"dir":"test"},{"name":"Can get all documents for which a field is null","suites":["Indexes","Get matching documents"],"updatePoint":{"line":858,"column":55,"index":24581},"line":858,"code":"    it('Can get all documents for which a field is null', function () {\n      var idx = new Index({\n          fieldName: 'tf'\n        }),\n        doc1 = {\n          a: 5,\n          tf: 'hello'\n        },\n        doc2 = {\n          a: 2,\n          tf: null\n        },\n        doc3 = {\n          a: 8,\n          tf: 'world'\n        },\n        doc4 = {\n          a: 7,\n          tf: null\n        };\n      idx.insert(doc1);\n      idx.insert(doc2);\n      idx.insert(doc3);\n      assert.deepEqual(idx.getMatching('bloup'), []);\n      assert.deepEqual(idx.getMatching('hello'), [doc1]);\n      assert.deepEqual(idx.getMatching('world'), [doc3]);\n      assert.deepEqual(idx.getMatching('yes'), []);\n      assert.deepEqual(idx.getMatching(null), [doc2]);\n      idx.insert(doc4);\n      assert.deepEqual(idx.getMatching('bloup'), []);\n      assert.deepEqual(idx.getMatching('hello'), [doc1]);\n      assert.deepEqual(idx.getMatching('world'), [doc3]);\n      assert.deepEqual(idx.getMatching('yes'), []);\n      assert.deepEqual(idx.getMatching(null), [doc2, doc4]);\n    });","file":"indexes.test.js","skipped":false,"dir":"test"},{"name":"Can get all documents for a given key in a sparse index, but not unindexed docs (= field undefined)","suites":["Indexes","Get matching documents"],"updatePoint":{"line":893,"column":107,"index":25693},"line":893,"code":"    it('Can get all documents for a given key in a sparse index, but not unindexed docs (= field undefined)', function () {\n      var idx = new Index({\n          fieldName: 'tf',\n          sparse: true\n        }),\n        doc1 = {\n          a: 5,\n          tf: 'hello'\n        },\n        doc2 = {\n          a: 2,\n          nottf: 'bloup'\n        },\n        doc3 = {\n          a: 8,\n          tf: 'world'\n        },\n        doc4 = {\n          a: 7,\n          nottf: 'yes'\n        };\n      idx.insert(doc1);\n      idx.insert(doc2);\n      idx.insert(doc3);\n      idx.insert(doc4);\n      assert.deepEqual(idx.getMatching('bloup'), []);\n      assert.deepEqual(idx.getMatching('hello'), [doc1]);\n      assert.deepEqual(idx.getMatching('world'), [doc3]);\n      assert.deepEqual(idx.getMatching('yes'), []);\n      assert.deepEqual(idx.getMatching(undefined), []);\n    });","file":"indexes.test.js","skipped":false,"dir":"test"},{"name":"Can get all documents whose key is in an array of keys","suites":["Indexes","Get matching documents"],"updatePoint":{"line":924,"column":62,"index":26512},"line":924,"code":"    it('Can get all documents whose key is in an array of keys', function () {\n      // For this test only we have to use objects with _ids as the array version of getMatching\n      // relies on the _id property being set, otherwise we have to use a quadratic algorithm\n      // or a fingerprinting algorithm, both solutions too complicated and slow given that live nedb\n      // indexes documents with _id always set\n      var idx = new Index({\n          fieldName: 'tf'\n        }),\n        doc1 = {\n          a: 5,\n          tf: 'hello',\n          _id: '1'\n        },\n        doc2 = {\n          a: 2,\n          tf: 'bloup',\n          _id: '2'\n        },\n        doc3 = {\n          a: 8,\n          tf: 'world',\n          _id: '3'\n        },\n        doc4 = {\n          a: 7,\n          tf: 'yes',\n          _id: '4'\n        },\n        doc5 = {\n          a: 7,\n          tf: 'yes',\n          _id: '5'\n        };\n      idx.insert(doc1);\n      idx.insert(doc2);\n      idx.insert(doc3);\n      idx.insert(doc4);\n      idx.insert(doc5);\n      assert.deepEqual(idx.getMatching([]), []);\n      assert.deepEqual(idx.getMatching(['bloup']), [doc2]);\n      assert.deepEqual(idx.getMatching(['bloup', 'yes']), [doc2, doc4, doc5]);\n      assert.deepEqual(idx.getMatching(['hello', 'no']), [doc1]);\n      assert.deepEqual(idx.getMatching(['nope', 'no']), []);\n    });","file":"indexes.test.js","skipped":false,"dir":"test"},{"name":"Can get all documents whose key is between certain bounds","suites":["Indexes","Get matching documents"],"updatePoint":{"line":968,"column":65,"index":27868},"line":968,"code":"    it('Can get all documents whose key is between certain bounds', function () {\n      var idx = new Index({\n          fieldName: 'a'\n        }),\n        doc1 = {\n          a: 5,\n          tf: 'hello'\n        },\n        doc2 = {\n          a: 2,\n          tf: 'bloup'\n        },\n        doc3 = {\n          a: 8,\n          tf: 'world'\n        },\n        doc4 = {\n          a: 7,\n          tf: 'yes'\n        },\n        doc5 = {\n          a: 10,\n          tf: 'yes'\n        };\n      idx.insert(doc1);\n      idx.insert(doc2);\n      idx.insert(doc3);\n      idx.insert(doc4);\n      idx.insert(doc5);\n      assert.deepEqual(idx.getBetweenBounds({\n        $lt: 10,\n        $gte: 5\n      }), [doc1, doc4, doc3]);\n      assert.deepEqual(idx.getBetweenBounds({\n        $lte: 8\n      }), [doc2, doc1, doc4, doc3]);\n      assert.deepEqual(idx.getBetweenBounds({\n        $gt: 7\n      }), [doc3, doc5]);\n    });","file":"indexes.test.js","skipped":false,"dir":"test"},{"name":"Can reset an index without any new data, the index will be empty afterwards","suites":["Indexes","Resetting"],"updatePoint":{"line":1011,"column":83,"index":28876},"line":1011,"code":"    it('Can reset an index without any new data, the index will be empty afterwards', function () {\n      var idx = new Index({\n          fieldName: 'tf'\n        }),\n        doc1 = {\n          a: 5,\n          tf: 'hello'\n        },\n        doc2 = {\n          a: 8,\n          tf: 'world'\n        },\n        doc3 = {\n          a: 2,\n          tf: 'bloup'\n        };\n      idx.insert(doc1);\n      idx.insert(doc2);\n      idx.insert(doc3);\n      idx.tree.getNumberOfKeys().should.equal(3);\n      idx.getMatching('hello').length.should.equal(1);\n      idx.getMatching('world').length.should.equal(1);\n      idx.getMatching('bloup').length.should.equal(1);\n      idx.reset();\n      idx.tree.getNumberOfKeys().should.equal(0);\n      idx.getMatching('hello').length.should.equal(0);\n      idx.getMatching('world').length.should.equal(0);\n      idx.getMatching('bloup').length.should.equal(0);\n    });","file":"indexes.test.js","skipped":false,"dir":"test"},{"name":"Can reset an index and initialize it with one document","suites":["Indexes","Resetting"],"updatePoint":{"line":1040,"column":62,"index":29748},"line":1040,"code":"    it('Can reset an index and initialize it with one document', function () {\n      var idx = new Index({\n          fieldName: 'tf'\n        }),\n        doc1 = {\n          a: 5,\n          tf: 'hello'\n        },\n        doc2 = {\n          a: 8,\n          tf: 'world'\n        },\n        doc3 = {\n          a: 2,\n          tf: 'bloup'\n        },\n        newDoc = {\n          a: 555,\n          tf: 'new'\n        };\n      idx.insert(doc1);\n      idx.insert(doc2);\n      idx.insert(doc3);\n      idx.tree.getNumberOfKeys().should.equal(3);\n      idx.getMatching('hello').length.should.equal(1);\n      idx.getMatching('world').length.should.equal(1);\n      idx.getMatching('bloup').length.should.equal(1);\n      idx.reset(newDoc);\n      idx.tree.getNumberOfKeys().should.equal(1);\n      idx.getMatching('hello').length.should.equal(0);\n      idx.getMatching('world').length.should.equal(0);\n      idx.getMatching('bloup').length.should.equal(0);\n      idx.getMatching('new')[0].a.should.equal(555);\n    });","file":"indexes.test.js","skipped":false,"dir":"test"},{"name":"Can reset an index and initialize it with an array of documents","suites":["Indexes","Resetting"],"updatePoint":{"line":1074,"column":71,"index":30756},"line":1074,"code":"    it('Can reset an index and initialize it with an array of documents', function () {\n      var idx = new Index({\n          fieldName: 'tf'\n        }),\n        doc1 = {\n          a: 5,\n          tf: 'hello'\n        },\n        doc2 = {\n          a: 8,\n          tf: 'world'\n        },\n        doc3 = {\n          a: 2,\n          tf: 'bloup'\n        },\n        newDocs = [{\n          a: 555,\n          tf: 'new'\n        }, {\n          a: 666,\n          tf: 'again'\n        }];\n      idx.insert(doc1);\n      idx.insert(doc2);\n      idx.insert(doc3);\n      idx.tree.getNumberOfKeys().should.equal(3);\n      idx.getMatching('hello').length.should.equal(1);\n      idx.getMatching('world').length.should.equal(1);\n      idx.getMatching('bloup').length.should.equal(1);\n      idx.reset(newDocs);\n      idx.tree.getNumberOfKeys().should.equal(2);\n      idx.getMatching('hello').length.should.equal(0);\n      idx.getMatching('world').length.should.equal(0);\n      idx.getMatching('bloup').length.should.equal(0);\n      idx.getMatching('new')[0].a.should.equal(555);\n      idx.getMatching('again')[0].a.should.equal(666);\n    });","file":"indexes.test.js","skipped":false,"dir":"test"},{"name":"Get all elements in the index","suites":["Indexes","Resetting"],"updatePoint":{"line":1114,"column":35,"index":31882},"line":1114,"code":"  it('Get all elements in the index', function () {\n    var idx = new Index({\n        fieldName: 'a'\n      }),\n      doc1 = {\n        a: 5,\n        tf: 'hello'\n      },\n      doc2 = {\n        a: 8,\n        tf: 'world'\n      },\n      doc3 = {\n        a: 2,\n        tf: 'bloup'\n      };\n    idx.insert(doc1);\n    idx.insert(doc2);\n    idx.insert(doc3);\n    assert.deepEqual(idx.getAll(), [{\n      a: 2,\n      tf: 'bloup'\n    }, {\n      a: 5,\n      tf: 'hello'\n    }, {\n      a: 8,\n      tf: 'world'\n    }]);\n  });","file":"indexes.test.js","skipped":false,"dir":"test"},{"name":"Can serialize and deserialize strings","suites":["Model","Serialization, deserialization"],"updatePoint":{"line":12,"column":45,"index":429},"line":12,"code":"    it('Can serialize and deserialize strings', function () {\n      var a, b, c;\n      a = {\n        test: \"Some string\"\n      };\n      b = model.serialize(a);\n      c = model.deserialize(b);\n      b.indexOf('\\n').should.equal(-1);\n      c.test.should.equal(\"Some string\");\n\n      // Even if a property is a string containing a new line, the serialized\n      // version doesn't. The new line must still be there upon deserialization\n      a = {\n        test: \"With a new\\nline\"\n      };\n      b = model.serialize(a);\n      c = model.deserialize(b);\n      c.test.should.equal(\"With a new\\nline\");\n      a.test.indexOf('\\n').should.not.equal(-1);\n      b.indexOf('\\n').should.equal(-1);\n      c.test.indexOf('\\n').should.not.equal(-1);\n    });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Can serialize and deserialize booleans","suites":["Model","Serialization, deserialization"],"updatePoint":{"line":34,"column":46,"index":1172},"line":34,"code":"    it('Can serialize and deserialize booleans', function () {\n      var a, b, c;\n      a = {\n        test: true\n      };\n      b = model.serialize(a);\n      c = model.deserialize(b);\n      b.indexOf('\\n').should.equal(-1);\n      c.test.should.equal(true);\n    });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Can serialize and deserialize numbers","suites":["Model","Serialization, deserialization"],"updatePoint":{"line":44,"column":45,"index":1436},"line":44,"code":"    it('Can serialize and deserialize numbers', function () {\n      var a, b, c;\n      a = {\n        test: 5\n      };\n      b = model.serialize(a);\n      c = model.deserialize(b);\n      b.indexOf('\\n').should.equal(-1);\n      c.test.should.equal(5);\n    });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Can serialize and deserialize null","suites":["Model","Serialization, deserialization"],"updatePoint":{"line":54,"column":42,"index":1691},"line":54,"code":"    it('Can serialize and deserialize null', function () {\n      var a, b, c;\n      a = {\n        test: null\n      };\n      b = model.serialize(a);\n      c = model.deserialize(b);\n      b.indexOf('\\n').should.equal(-1);\n      assert.isNull(a.test);\n    });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"undefined fields are removed when serialized","suites":["Model","Serialization, deserialization"],"updatePoint":{"line":64,"column":52,"index":1958},"line":64,"code":"    it('undefined fields are removed when serialized', function () {\n      var a = {\n          bloup: undefined,\n          hello: 'world'\n        },\n        b = model.serialize(a),\n        c = model.deserialize(b);\n      Object.keys(c).length.should.equal(1);\n      c.hello.should.equal('world');\n      assert.isUndefined(c.bloup);\n    });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Can serialize and deserialize a date","suites":["Model","Serialization, deserialization"],"updatePoint":{"line":75,"column":44,"index":2290},"line":75,"code":"    it('Can serialize and deserialize a date', function () {\n      var a,\n        b,\n        c,\n        d = new Date();\n      a = {\n        test: d\n      };\n      b = model.serialize(a);\n      c = model.deserialize(b);\n      b.indexOf('\\n').should.equal(-1);\n      b.should.equal('{\"test\":{\"$$date\":' + d.getTime() + '}}');\n      util.isDate(c.test).should.equal(true);\n      c.test.getTime().should.equal(d.getTime());\n    });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Can serialize and deserialize sub objects","suites":["Model","Serialization, deserialization"],"updatePoint":{"line":90,"column":49,"index":2723},"line":90,"code":"    it('Can serialize and deserialize sub objects', function () {\n      var a,\n        b,\n        c,\n        d = new Date();\n      a = {\n        test: {\n          something: 39,\n          also: d,\n          yes: {\n            again: 'yes'\n          }\n        }\n      };\n      b = model.serialize(a);\n      c = model.deserialize(b);\n      b.indexOf('\\n').should.equal(-1);\n      c.test.something.should.equal(39);\n      c.test.also.getTime().should.equal(d.getTime());\n      c.test.yes.again.should.equal('yes');\n    });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Can serialize and deserialize sub arrays","suites":["Model","Serialization, deserialization"],"updatePoint":{"line":111,"column":48,"index":3242},"line":111,"code":"    it('Can serialize and deserialize sub arrays', function () {\n      var a,\n        b,\n        c,\n        d = new Date();\n      a = {\n        test: [39, d, {\n          again: 'yes'\n        }]\n      };\n      b = model.serialize(a);\n      c = model.deserialize(b);\n      b.indexOf('\\n').should.equal(-1);\n      c.test[0].should.equal(39);\n      c.test[1].getTime().should.equal(d.getTime());\n      c.test[2].again.should.equal('yes');\n    });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Reject field names beginning with a $ sign or containing a dot, except the four edge cases","suites":["Model","Serialization, deserialization"],"updatePoint":{"line":128,"column":98,"index":3735},"line":128,"code":"    it('Reject field names beginning with a $ sign or containing a dot, except the four edge cases', function () {\n      var a1 = {\n          $something: 'totest'\n        },\n        a2 = {\n          \"with.dot\": 'totest'\n        },\n        e1 = {\n          $$date: 4321\n        },\n        e2 = {\n          $$deleted: true\n        },\n        e3 = {\n          $$indexCreated: \"indexName\"\n        },\n        e4 = {\n          $$indexRemoved: \"indexName\"\n        },\n        b;\n\n      // Normal cases\n      (function () {\n        b = model.serialize(a1);\n      }).should.throw();\n      (function () {\n        b = model.serialize(a2);\n      }).should.throw();\n\n      // Edge cases\n      b = model.serialize(e1);\n      b = model.serialize(e2);\n      b = model.serialize(e3);\n      b = model.serialize(e4);\n    });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Can serialize string fields with a new line without breaking the DB","suites":["Model","Serialization, deserialization"],"updatePoint":{"line":163,"column":75,"index":4517},"line":163,"code":"    it('Can serialize string fields with a new line without breaking the DB', function (done) {\n      var db1,\n        db2,\n        badString = \"world\\r\\nearth\\nother\\rline\";\n      if (fs.existsSync('workspace/test1.db')) {\n        fs.unlinkSync('workspace/test1.db');\n      }\n      fs.existsSync('workspace/test1.db').should.equal(false);\n      db1 = new Datastore({\n        filename: 'workspace/test1.db'\n      });\n      db1.loadDatabase(function (err) {\n        assert.isNull(err);\n        db1.insert({\n          hello: badString\n        }, function (err) {\n          assert.isNull(err);\n          db2 = new Datastore({\n            filename: 'workspace/test1.db'\n          });\n          db2.loadDatabase(function (err) {\n            assert.isNull(err);\n            db2.find({}, function (err, docs) {\n              assert.isNull(err);\n              docs.length.should.equal(1);\n              docs[0].hello.should.equal(badString);\n              done();\n            });\n          });\n        });\n      });\n    });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Can accept objects whose keys are numbers","suites":["Model","Serialization, deserialization"],"updatePoint":{"line":195,"column":49,"index":5507},"line":195,"code":"    it('Can accept objects whose keys are numbers', function () {\n      var o = {\n        42: true\n      };\n      var s = model.serialize(o);\n    });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Field names beginning with a $ sign are forbidden","suites":["Model","Object checking"],"updatePoint":{"line":204,"column":57,"index":5772},"line":204,"code":"    it('Field names beginning with a $ sign are forbidden', function () {\n      assert.isDefined(model.checkObject);\n      (function () {\n        model.checkObject({\n          $bad: true\n        });\n      }).should.throw();\n      (function () {\n        model.checkObject({\n          some: 42,\n          nested: {\n            again: \"no\",\n            $worse: true\n          }\n        });\n      }).should.throw();\n\n      // This shouldn't throw since \"$actuallyok\" is not a field name\n      model.checkObject({\n        some: 42,\n        nested: [5, \"no\", \"$actuallyok\", true]\n      });\n      (function () {\n        model.checkObject({\n          some: 42,\n          nested: [5, \"no\", \"$actuallyok\", true, {\n            $hidden: \"useless\"\n          }]\n        });\n      }).should.throw();\n    });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Field names cannot contain a .","suites":["Model","Object checking"],"updatePoint":{"line":235,"column":38,"index":6546},"line":235,"code":"    it('Field names cannot contain a .', function () {\n      assert.isDefined(model.checkObject);\n      (function () {\n        model.checkObject({\n          \"so.bad\": true\n        });\n      }).should.throw();\n\n      // Recursive behaviour testing done in the above test on $ signs\n    });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Properties with a null value dont trigger an error","suites":["Model","Object checking"],"updatePoint":{"line":246,"column":58,"index":6856},"line":246,"code":"    it('Properties with a null value dont trigger an error', function () {\n      var obj = {\n        prop: null\n      };\n      model.checkObject(obj);\n    });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Can check if an object is a primitive or not","suites":["Model","Object checking"],"updatePoint":{"line":252,"column":52,"index":7009},"line":252,"code":"    it('Can check if an object is a primitive or not', function () {\n      model.isPrimitiveType(5).should.equal(true);\n      model.isPrimitiveType('sdsfdfs').should.equal(true);\n      model.isPrimitiveType(0).should.equal(true);\n      model.isPrimitiveType(true).should.equal(true);\n      model.isPrimitiveType(false).should.equal(true);\n      model.isPrimitiveType(new Date()).should.equal(true);\n      model.isPrimitiveType([]).should.equal(true);\n      model.isPrimitiveType([3, 'try']).should.equal(true);\n      model.isPrimitiveType(null).should.equal(true);\n      model.isPrimitiveType({}).should.equal(false);\n      model.isPrimitiveType({\n        a: 42\n      }).should.equal(false);\n    });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Should be able to deep copy any serializable model","suites":["Model","Deep copying"],"updatePoint":{"line":270,"column":58,"index":7804},"line":270,"code":"    it('Should be able to deep copy any serializable model', function () {\n      var d = new Date(),\n        obj = {\n          a: ['ee', 'ff', 42],\n          date: d,\n          subobj: {\n            a: 'b',\n            b: 'c'\n          }\n        },\n        res = model.deepCopy(obj);\n      ;\n      res.a.length.should.equal(3);\n      res.a[0].should.equal('ee');\n      res.a[1].should.equal('ff');\n      res.a[2].should.equal(42);\n      res.date.getTime().should.equal(d.getTime());\n      res.subobj.a.should.equal('b');\n      res.subobj.b.should.equal('c');\n      obj.a.push('ggg');\n      obj.date = 'notadate';\n      obj.subobj = [];\n\n      // Even if the original object is modified, the copied one isn't\n      res.a.length.should.equal(3);\n      res.a[0].should.equal('ee');\n      res.a[1].should.equal('ff');\n      res.a[2].should.equal(42);\n      res.date.getTime().should.equal(d.getTime());\n      res.subobj.a.should.equal('b');\n      res.subobj.b.should.equal('c');\n    });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Should deep copy the contents of an array","suites":["Model","Deep copying"],"updatePoint":{"line":302,"column":49,"index":8778},"line":302,"code":"    it('Should deep copy the contents of an array', function () {\n      var a = [{\n          hello: 'world'\n        }],\n        b = model.deepCopy(a);\n      b[0].hello.should.equal('world');\n      b[0].hello = 'another';\n      b[0].hello.should.equal('another');\n      a[0].hello.should.equal('world');\n    });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Without the strictKeys option, everything gets deep copied","suites":["Model","Deep copying"],"updatePoint":{"line":312,"column":66,"index":9106},"line":312,"code":"    it('Without the strictKeys option, everything gets deep copied', function () {\n      var a = {\n          a: 4,\n          $e: 'rrr',\n          'eee.rt': 42,\n          nested: {\n            yes: 1,\n            'tt.yy': 2,\n            $nopenope: 3\n          },\n          array: [{\n            'rr.hh': 1\n          }, {\n            yes: true\n          }, {\n            $yes: false\n          }]\n        },\n        b = model.deepCopy(a);\n      assert.deepEqual(a, b);\n    });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"With the strictKeys option, only valid keys gets deep copied","suites":["Model","Deep copying"],"updatePoint":{"line":333,"column":68,"index":9582},"line":333,"code":"    it('With the strictKeys option, only valid keys gets deep copied', function () {\n      var a = {\n          a: 4,\n          $e: 'rrr',\n          'eee.rt': 42,\n          nested: {\n            yes: 1,\n            'tt.yy': 2,\n            $nopenope: 3\n          },\n          array: [{\n            'rr.hh': 1\n          }, {\n            yes: true\n          }, {\n            $yes: false\n          }]\n        },\n        b = model.deepCopy(a, true);\n      assert.deepEqual(b, {\n        a: 4,\n        nested: {\n          yes: 1\n        },\n        array: [{}, {\n          yes: true\n        }, {}]\n      });\n    });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Queries not containing any modifier just replace the document by the contents of the query but keep its _id","suites":["Model","Modifying documents"],"updatePoint":{"line":365,"column":115,"index":10329},"line":365,"code":"    it('Queries not containing any modifier just replace the document by the contents of the query but keep its _id', function () {\n      var obj = {\n          some: 'thing',\n          _id: 'keepit'\n        },\n        updateQuery = {\n          replace: 'done',\n          bloup: [1, 8]\n        },\n        t;\n      t = model.modify(obj, updateQuery);\n      t.replace.should.equal('done');\n      t.bloup.length.should.equal(2);\n      t.bloup[0].should.equal(1);\n      t.bloup[1].should.equal(8);\n      assert.isUndefined(t.some);\n      t._id.should.equal('keepit');\n    });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Throw an error if trying to change the _id field in a copy-type modification","suites":["Model","Modifying documents"],"updatePoint":{"line":383,"column":84,"index":10869},"line":383,"code":"    it('Throw an error if trying to change the _id field in a copy-type modification', function () {\n      var obj = {\n          some: 'thing',\n          _id: 'keepit'\n        },\n        updateQuery = {\n          replace: 'done',\n          bloup: [1, 8],\n          _id: 'donttryit'\n        };\n      expect(function () {\n        model.modify(obj, updateQuery);\n      }).to.throw(\"You cannot change a document's _id\");\n      updateQuery._id = 'keepit';\n      model.modify(obj, updateQuery); // No error thrown\n    });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Throw an error if trying to use modify in a mixed copy+modify way","suites":["Model","Modifying documents"],"updatePoint":{"line":400,"column":73,"index":11375},"line":400,"code":"    it('Throw an error if trying to use modify in a mixed copy+modify way', function () {\n      var obj = {\n          some: 'thing'\n        },\n        updateQuery = {\n          replace: 'me',\n          $modify: 'metoo'\n        };\n      expect(function () {\n        model.modify(obj, updateQuery);\n      }).to.throw(\"You cannot mix modifiers and normal fields\");\n    });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Throw an error if trying to use an inexistent modifier","suites":["Model","Modifying documents"],"updatePoint":{"line":412,"column":62,"index":11734},"line":412,"code":"    it('Throw an error if trying to use an inexistent modifier', function () {\n      var obj = {\n          some: 'thing'\n        },\n        updateQuery = {\n          $set: {\n            it: 'exists'\n          },\n          $modify: 'not this one'\n        };\n      expect(function () {\n        model.modify(obj, updateQuery);\n      }).to.throw(/^Unknown modifier .modify/);\n    });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Throw an error if a modifier is used with a non-object argument","suites":["Model","Modifying documents"],"updatePoint":{"line":426,"column":71,"index":12123},"line":426,"code":"    it('Throw an error if a modifier is used with a non-object argument', function () {\n      var obj = {\n          some: 'thing'\n        },\n        updateQuery = {\n          $set: 'this exists'\n        };\n      expect(function () {\n        model.modify(obj, updateQuery);\n      }).to.throw(/Modifier .set's argument must be an object/);\n    });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Can change already set fields without modfifying the underlying object","suites":["Model","Modifying documents","$set modifier"],"updatePoint":{"line":438,"column":80,"index":12522},"line":438,"code":"      it('Can change already set fields without modfifying the underlying object', function () {\n        var obj = {\n            some: 'thing',\n            yup: 'yes',\n            nay: 'noes'\n          },\n          updateQuery = {\n            $set: {\n              some: 'changed',\n              nay: 'yes indeed'\n            }\n          },\n          modified = model.modify(obj, updateQuery);\n        Object.keys(modified).length.should.equal(3);\n        modified.some.should.equal('changed');\n        modified.yup.should.equal('yes');\n        modified.nay.should.equal('yes indeed');\n        Object.keys(obj).length.should.equal(3);\n        obj.some.should.equal('thing');\n        obj.yup.should.equal('yes');\n        obj.nay.should.equal('noes');\n      });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Creates fields to set if they dont exist yet","suites":["Model","Modifying documents","$set modifier"],"updatePoint":{"line":460,"column":54,"index":13256},"line":460,"code":"      it('Creates fields to set if they dont exist yet', function () {\n        var obj = {\n            yup: 'yes'\n          },\n          updateQuery = {\n            $set: {\n              some: 'changed',\n              nay: 'yes indeed'\n            }\n          },\n          modified = model.modify(obj, updateQuery);\n        Object.keys(modified).length.should.equal(3);\n        modified.some.should.equal('changed');\n        modified.yup.should.equal('yes');\n        modified.nay.should.equal('yes indeed');\n      });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Can set sub-fields and create them if necessary","suites":["Model","Modifying documents","$set modifier"],"updatePoint":{"line":476,"column":57,"index":13777},"line":476,"code":"      it('Can set sub-fields and create them if necessary', function () {\n        var obj = {\n            yup: {\n              subfield: 'bloup'\n            }\n          },\n          updateQuery = {\n            $set: {\n              \"yup.subfield\": 'changed',\n              \"yup.yop\": 'yes indeed',\n              \"totally.doesnt.exist\": 'now it does'\n            }\n          },\n          modified = model.modify(obj, updateQuery);\n        _.isEqual(modified, {\n          yup: {\n            subfield: 'changed',\n            yop: 'yes indeed'\n          },\n          totally: {\n            doesnt: {\n              exist: 'now it does'\n            }\n          }\n        }).should.equal(true);\n      });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Doesn't replace a falsy field by an object when recursively following dot notation","suites":["Model","Modifying documents","$set modifier"],"updatePoint":{"line":502,"column":92,"index":14510},"line":502,"code":"      it(\"Doesn't replace a falsy field by an object when recursively following dot notation\", function () {\n        var obj = {\n            nested: false\n          },\n          updateQuery = {\n            $set: {\n              \"nested.now\": 'it is'\n            }\n          },\n          modified = model.modify(obj, updateQuery);\n        assert.deepEqual(modified, {\n          nested: false\n        }); // Object not modified as the nested field doesn't exist\n      });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Can delete a field, not throwing an error if the field doesnt exist","suites":["Model","Modifying documents","$unset modifier"],"updatePoint":{"line":519,"column":77,"index":15046},"line":519,"code":"      it('Can delete a field, not throwing an error if the field doesnt exist', function () {\n        var obj, updateQuery, modified;\n        obj = {\n          yup: 'yes',\n          other: 'also'\n        };\n        updateQuery = {\n          $unset: {\n            yup: true\n          }\n        };\n        modified = model.modify(obj, updateQuery);\n        assert.deepEqual(modified, {\n          other: 'also'\n        });\n        obj = {\n          yup: 'yes',\n          other: 'also'\n        };\n        updateQuery = {\n          $unset: {\n            nope: true\n          }\n        };\n        modified = model.modify(obj, updateQuery);\n        assert.deepEqual(modified, obj);\n        obj = {\n          yup: 'yes',\n          other: 'also'\n        };\n        updateQuery = {\n          $unset: {\n            nope: true,\n            other: true\n          }\n        };\n        modified = model.modify(obj, updateQuery);\n        assert.deepEqual(modified, {\n          yup: 'yes'\n        });\n      });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Can unset sub-fields and entire nested documents","suites":["Model","Modifying documents","$unset modifier"],"updatePoint":{"line":560,"column":58,"index":16021},"line":560,"code":"      it('Can unset sub-fields and entire nested documents', function () {\n        var obj, updateQuery, modified;\n        obj = {\n          yup: 'yes',\n          nested: {\n            a: 'also',\n            b: 'yeah'\n          }\n        };\n        updateQuery = {\n          $unset: {\n            nested: true\n          }\n        };\n        modified = model.modify(obj, updateQuery);\n        assert.deepEqual(modified, {\n          yup: 'yes'\n        });\n        obj = {\n          yup: 'yes',\n          nested: {\n            a: 'also',\n            b: 'yeah'\n          }\n        };\n        updateQuery = {\n          $unset: {\n            'nested.a': true\n          }\n        };\n        modified = model.modify(obj, updateQuery);\n        assert.deepEqual(modified, {\n          yup: 'yes',\n          nested: {\n            b: 'yeah'\n          }\n        });\n        obj = {\n          yup: 'yes',\n          nested: {\n            a: 'also',\n            b: 'yeah'\n          }\n        };\n        updateQuery = {\n          $unset: {\n            'nested.a': true,\n            'nested.b': true\n          }\n        };\n        modified = model.modify(obj, updateQuery);\n        assert.deepEqual(modified, {\n          yup: 'yes',\n          nested: {}\n        });\n      });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"When unsetting nested fields, should not create an empty parent to nested field","suites":["Model","Modifying documents","$unset modifier"],"updatePoint":{"line":616,"column":89,"index":17309},"line":616,"code":"      it(\"When unsetting nested fields, should not create an empty parent to nested field\", function () {\n        var obj = model.modify({\n          argh: true\n        }, {\n          $unset: {\n            'bad.worse': true\n          }\n        });\n        assert.deepEqual(obj, {\n          argh: true\n        });\n        obj = model.modify({\n          argh: true,\n          bad: {\n            worse: 'oh'\n          }\n        }, {\n          $unset: {\n            'bad.worse': true\n          }\n        });\n        assert.deepEqual(obj, {\n          argh: true,\n          bad: {}\n        });\n        obj = model.modify({\n          argh: true,\n          bad: {}\n        }, {\n          $unset: {\n            'bad.worse': true\n          }\n        });\n        assert.deepEqual(obj, {\n          argh: true,\n          bad: {}\n        });\n      });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Throw an error if you try to use it with a non-number or on a non number field","suites":["Model","Modifying documents","$inc modifier"],"updatePoint":{"line":657,"column":88,"index":18226},"line":657,"code":"      it('Throw an error if you try to use it with a non-number or on a non number field', function () {\n        (function () {\n          var obj = {\n              some: 'thing',\n              yup: 'yes',\n              nay: 2\n            },\n            updateQuery = {\n              $inc: {\n                nay: 'notanumber'\n              }\n            },\n            modified = model.modify(obj, updateQuery);\n        }).should.throw();\n        (function () {\n          var obj = {\n              some: 'thing',\n              yup: 'yes',\n              nay: 'nope'\n            },\n            updateQuery = {\n              $inc: {\n                nay: 1\n              }\n            },\n            modified = model.modify(obj, updateQuery);\n        }).should.throw();\n      });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Can increment number fields or create and initialize them if needed","suites":["Model","Modifying documents","$inc modifier"],"updatePoint":{"line":685,"column":77,"index":18990},"line":685,"code":"      it('Can increment number fields or create and initialize them if needed', function () {\n        var obj = {\n            some: 'thing',\n            nay: 40\n          },\n          modified;\n        modified = model.modify(obj, {\n          $inc: {\n            nay: 2\n          }\n        });\n        _.isEqual(modified, {\n          some: 'thing',\n          nay: 42\n        }).should.equal(true);\n\n        // Incidentally, this tests that obj was not modified\n        modified = model.modify(obj, {\n          $inc: {\n            inexistent: -6\n          }\n        });\n        _.isEqual(modified, {\n          some: 'thing',\n          nay: 40,\n          inexistent: -6\n        }).should.equal(true);\n      });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Works recursively","suites":["Model","Modifying documents","$inc modifier"],"updatePoint":{"line":713,"column":27,"index":19649},"line":713,"code":"      it('Works recursively', function () {\n        var obj = {\n            some: 'thing',\n            nay: {\n              nope: 40\n            }\n          },\n          modified;\n        modified = model.modify(obj, {\n          $inc: {\n            \"nay.nope\": -2,\n            \"blip.blop\": 123\n          }\n        });\n        _.isEqual(modified, {\n          some: 'thing',\n          nay: {\n            nope: 38\n          },\n          blip: {\n            blop: 123\n          }\n        }).should.equal(true);\n      });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Can push an element to the end of an array","suites":["Model","Modifying documents","$push modifier"],"updatePoint":{"line":740,"column":52,"index":20271},"line":740,"code":"      it('Can push an element to the end of an array', function () {\n        var obj = {\n            arr: ['hello']\n          },\n          modified;\n        modified = model.modify(obj, {\n          $push: {\n            arr: 'world'\n          }\n        });\n        assert.deepEqual(modified, {\n          arr: ['hello', 'world']\n        });\n      });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Can push an element to a non-existent field and will create the array","suites":["Model","Modifying documents","$push modifier"],"updatePoint":{"line":754,"column":79,"index":20647},"line":754,"code":"      it('Can push an element to a non-existent field and will create the array', function () {\n        var obj = {},\n          modified;\n        modified = model.modify(obj, {\n          $push: {\n            arr: 'world'\n          }\n        });\n        assert.deepEqual(modified, {\n          arr: ['world']\n        });\n      });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Can push on nested fields","suites":["Model","Modifying documents","$push modifier"],"updatePoint":{"line":766,"column":35,"index":20932},"line":766,"code":"      it('Can push on nested fields', function () {\n        var obj = {\n            arr: {\n              nested: ['hello']\n            }\n          },\n          modified;\n        modified = model.modify(obj, {\n          $push: {\n            \"arr.nested\": 'world'\n          }\n        });\n        assert.deepEqual(modified, {\n          arr: {\n            nested: ['hello', 'world']\n          }\n        });\n        obj = {\n          arr: {\n            a: 2\n          }\n        };\n        modified = model.modify(obj, {\n          $push: {\n            \"arr.nested\": 'world'\n          }\n        });\n        assert.deepEqual(modified, {\n          arr: {\n            a: 2,\n            nested: ['world']\n          }\n        });\n      });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Throw if we try to push to a non-array","suites":["Model","Modifying documents","$push modifier"],"updatePoint":{"line":800,"column":48,"index":21673},"line":800,"code":"      it('Throw if we try to push to a non-array', function () {\n        var obj = {\n            arr: 'hello'\n          },\n          modified;\n        (function () {\n          modified = model.modify(obj, {\n            $push: {\n              arr: 'world'\n            }\n          });\n        }).should.throw();\n        obj = {\n          arr: {\n            nested: 45\n          }\n        };\n        (function () {\n          modified = model.modify(obj, {\n            $push: {\n              \"arr.nested\": 'world'\n            }\n          });\n        }).should.throw();\n      });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Can use the $each modifier to add multiple values to an array at once","suites":["Model","Modifying documents","$push modifier"],"updatePoint":{"line":825,"column":79,"index":22279},"line":825,"code":"      it('Can use the $each modifier to add multiple values to an array at once', function () {\n        var obj = {\n            arr: ['hello']\n          },\n          modified;\n        modified = model.modify(obj, {\n          $push: {\n            arr: {\n              $each: ['world', 'earth', 'everything']\n            }\n          }\n        });\n        assert.deepEqual(modified, {\n          arr: ['hello', 'world', 'earth', 'everything']\n        });\n        (function () {\n          modified = model.modify(obj, {\n            $push: {\n              arr: {\n                $each: 45\n              }\n            }\n          });\n        }).should.throw();\n        (function () {\n          modified = model.modify(obj, {\n            $push: {\n              arr: {\n                $each: ['world'],\n                unauthorized: true\n              }\n            }\n          });\n        }).should.throw();\n      });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Can use the $slice modifier to limit the number of array elements","suites":["Model","Modifying documents","$push modifier"],"updatePoint":{"line":860,"column":75,"index":23185},"line":860,"code":"      it('Can use the $slice modifier to limit the number of array elements', function () {\n        var obj = {\n            arr: ['hello']\n          },\n          modified;\n        modified = model.modify(obj, {\n          $push: {\n            arr: {\n              $each: ['world', 'earth', 'everything'],\n              $slice: 1\n            }\n          }\n        });\n        assert.deepEqual(modified, {\n          arr: ['hello']\n        });\n        modified = model.modify(obj, {\n          $push: {\n            arr: {\n              $each: ['world', 'earth', 'everything'],\n              $slice: -1\n            }\n          }\n        });\n        assert.deepEqual(modified, {\n          arr: ['everything']\n        });\n        modified = model.modify(obj, {\n          $push: {\n            arr: {\n              $each: ['world', 'earth', 'everything'],\n              $slice: 0\n            }\n          }\n        });\n        assert.deepEqual(modified, {\n          arr: []\n        });\n        modified = model.modify(obj, {\n          $push: {\n            arr: {\n              $each: ['world', 'earth', 'everything'],\n              $slice: 2\n            }\n          }\n        });\n        assert.deepEqual(modified, {\n          arr: ['hello', 'world']\n        });\n        modified = model.modify(obj, {\n          $push: {\n            arr: {\n              $each: ['world', 'earth', 'everything'],\n              $slice: -2\n            }\n          }\n        });\n        assert.deepEqual(modified, {\n          arr: ['earth', 'everything']\n        });\n        modified = model.modify(obj, {\n          $push: {\n            arr: {\n              $each: ['world', 'earth', 'everything'],\n              $slice: -20\n            }\n          }\n        });\n        assert.deepEqual(modified, {\n          arr: ['hello', 'world', 'earth', 'everything']\n        });\n        modified = model.modify(obj, {\n          $push: {\n            arr: {\n              $each: ['world', 'earth', 'everything'],\n              $slice: 20\n            }\n          }\n        });\n        assert.deepEqual(modified, {\n          arr: ['hello', 'world', 'earth', 'everything']\n        });\n        modified = model.modify(obj, {\n          $push: {\n            arr: {\n              $each: [],\n              $slice: 1\n            }\n          }\n        });\n        assert.deepEqual(modified, {\n          arr: ['hello']\n        });\n\n        // $each not specified, but $slice is\n        modified = model.modify(obj, {\n          $push: {\n            arr: {\n              $slice: 1\n            }\n          }\n        });\n        assert.deepEqual(modified, {\n          arr: ['hello']\n        });\n        (function () {\n          modified = model.modify(obj, {\n            $push: {\n              arr: {\n                $slice: 1,\n                unauthorized: true\n              }\n            }\n          });\n        }).should.throw();\n        (function () {\n          modified = model.modify(obj, {\n            $push: {\n              arr: {\n                $each: [],\n                unauthorized: true\n              }\n            }\n          });\n        }).should.throw();\n      });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Can add an element to a set","suites":["Model","Modifying documents","$addToSet modifier"],"updatePoint":{"line":989,"column":37,"index":26356},"line":989,"code":"      it('Can add an element to a set', function () {\n        var obj = {\n            arr: ['hello']\n          },\n          modified;\n        modified = model.modify(obj, {\n          $addToSet: {\n            arr: 'world'\n          }\n        });\n        assert.deepEqual(modified, {\n          arr: ['hello', 'world']\n        });\n        obj = {\n          arr: ['hello']\n        };\n        modified = model.modify(obj, {\n          $addToSet: {\n            arr: 'hello'\n          }\n        });\n        assert.deepEqual(modified, {\n          arr: ['hello']\n        });\n      });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Can add an element to a non-existent set and will create the array","suites":["Model","Modifying documents","$addToSet modifier"],"updatePoint":{"line":1014,"column":76,"index":26970},"line":1014,"code":"      it('Can add an element to a non-existent set and will create the array', function () {\n        var obj = {\n            arr: []\n          },\n          modified;\n        modified = model.modify(obj, {\n          $addToSet: {\n            arr: 'world'\n          }\n        });\n        assert.deepEqual(modified, {\n          arr: ['world']\n        });\n      });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Throw if we try to addToSet to a non-array","suites":["Model","Modifying documents","$addToSet modifier"],"updatePoint":{"line":1028,"column":52,"index":27307},"line":1028,"code":"      it('Throw if we try to addToSet to a non-array', function () {\n        var obj = {\n            arr: 'hello'\n          },\n          modified;\n        (function () {\n          modified = model.modify(obj, {\n            $addToSet: {\n              arr: 'world'\n            }\n          });\n        }).should.throw();\n      });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Use deep-equality to check whether we can add a value to a set","suites":["Model","Modifying documents","$addToSet modifier"],"updatePoint":{"line":1041,"column":72,"index":27655},"line":1041,"code":"      it('Use deep-equality to check whether we can add a value to a set', function () {\n        var obj = {\n            arr: [{\n              b: 2\n            }]\n          },\n          modified;\n        modified = model.modify(obj, {\n          $addToSet: {\n            arr: {\n              b: 3\n            }\n          }\n        });\n        assert.deepEqual(modified, {\n          arr: [{\n            b: 2\n          }, {\n            b: 3\n          }]\n        });\n        obj = {\n          arr: [{\n            b: 2\n          }]\n        };\n        modified = model.modify(obj, {\n          $addToSet: {\n            arr: {\n              b: 2\n            }\n          }\n        });\n        assert.deepEqual(modified, {\n          arr: [{\n            b: 2\n          }]\n        });\n      });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Can use the $each modifier to add multiple values to a set at once","suites":["Model","Modifying documents","$addToSet modifier"],"updatePoint":{"line":1080,"column":76,"index":28442},"line":1080,"code":"      it('Can use the $each modifier to add multiple values to a set at once', function () {\n        var obj = {\n            arr: ['hello']\n          },\n          modified;\n        modified = model.modify(obj, {\n          $addToSet: {\n            arr: {\n              $each: ['world', 'earth', 'hello', 'earth']\n            }\n          }\n        });\n        assert.deepEqual(modified, {\n          arr: ['hello', 'world', 'earth']\n        });\n        (function () {\n          modified = model.modify(obj, {\n            $addToSet: {\n              arr: {\n                $each: 45\n              }\n            }\n          });\n        }).should.throw();\n        (function () {\n          modified = model.modify(obj, {\n            $addToSet: {\n              arr: {\n                $each: ['world'],\n                unauthorized: true\n              }\n            }\n          });\n        }).should.throw();\n      });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Throw if called on a non array, a non defined field or a non integer","suites":["Model","Modifying documents","$pop modifier"],"updatePoint":{"line":1118,"column":78,"index":29437},"line":1118,"code":"      it('Throw if called on a non array, a non defined field or a non integer', function () {\n        var obj = {\n            arr: 'hello'\n          },\n          modified;\n        (function () {\n          modified = model.modify(obj, {\n            $pop: {\n              arr: 1\n            }\n          });\n        }).should.throw();\n        obj = {\n          bloup: 'nope'\n        };\n        (function () {\n          modified = model.modify(obj, {\n            $pop: {\n              arr: 1\n            }\n          });\n        }).should.throw();\n        obj = {\n          arr: [1, 4, 8]\n        };\n        (function () {\n          modified = model.modify(obj, {\n            $pop: {\n              arr: true\n            }\n          });\n        }).should.throw();\n      });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Can remove the first and last element of an array","suites":["Model","Modifying documents","$pop modifier"],"updatePoint":{"line":1151,"column":59,"index":30187},"line":1151,"code":"      it('Can remove the first and last element of an array', function () {\n        var obj, modified;\n        obj = {\n          arr: [1, 4, 8]\n        };\n        modified = model.modify(obj, {\n          $pop: {\n            arr: 1\n          }\n        });\n        assert.deepEqual(modified, {\n          arr: [1, 4]\n        });\n        obj = {\n          arr: [1, 4, 8]\n        };\n        modified = model.modify(obj, {\n          $pop: {\n            arr: -1\n          }\n        });\n        assert.deepEqual(modified, {\n          arr: [4, 8]\n        });\n\n        // Empty arrays are not changed\n        obj = {\n          arr: []\n        };\n        modified = model.modify(obj, {\n          $pop: {\n            arr: 1\n          }\n        });\n        assert.deepEqual(modified, {\n          arr: []\n        });\n        modified = model.modify(obj, {\n          $pop: {\n            arr: -1\n          }\n        });\n        assert.deepEqual(modified, {\n          arr: []\n        });\n      });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Can remove an element from a set","suites":["Model","Modifying documents","$pull modifier"],"updatePoint":{"line":1200,"column":42,"index":31231},"line":1200,"code":"      it('Can remove an element from a set', function () {\n        var obj = {\n            arr: ['hello', 'world']\n          },\n          modified;\n        modified = model.modify(obj, {\n          $pull: {\n            arr: 'world'\n          }\n        });\n        assert.deepEqual(modified, {\n          arr: ['hello']\n        });\n        obj = {\n          arr: ['hello']\n        };\n        modified = model.modify(obj, {\n          $pull: {\n            arr: 'world'\n          }\n        });\n        assert.deepEqual(modified, {\n          arr: ['hello']\n        });\n      });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Can remove multiple matching elements","suites":["Model","Modifying documents","$pull modifier"],"updatePoint":{"line":1225,"column":47,"index":31808},"line":1225,"code":"      it('Can remove multiple matching elements', function () {\n        var obj = {\n            arr: ['hello', 'world', 'hello', 'world']\n          },\n          modified;\n        modified = model.modify(obj, {\n          $pull: {\n            arr: 'world'\n          }\n        });\n        assert.deepEqual(modified, {\n          arr: ['hello', 'hello']\n        });\n      });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Throw if we try to pull from a non-array","suites":["Model","Modifying documents","$pull modifier"],"updatePoint":{"line":1239,"column":50,"index":32182},"line":1239,"code":"      it('Throw if we try to pull from a non-array', function () {\n        var obj = {\n            arr: 'hello'\n          },\n          modified;\n        (function () {\n          modified = model.modify(obj, {\n            $pull: {\n              arr: 'world'\n            }\n          });\n        }).should.throw();\n      });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Use deep-equality to check whether we can remove a value from a set","suites":["Model","Modifying documents","$pull modifier"],"updatePoint":{"line":1252,"column":77,"index":32531},"line":1252,"code":"      it('Use deep-equality to check whether we can remove a value from a set', function () {\n        var obj = {\n            arr: [{\n              b: 2\n            }, {\n              b: 3\n            }]\n          },\n          modified;\n        modified = model.modify(obj, {\n          $pull: {\n            arr: {\n              b: 3\n            }\n          }\n        });\n        assert.deepEqual(modified, {\n          arr: [{\n            b: 2\n          }]\n        });\n        obj = {\n          arr: [{\n            b: 2\n          }]\n        };\n        modified = model.modify(obj, {\n          $pull: {\n            arr: {\n              b: 3\n            }\n          }\n        });\n        assert.deepEqual(modified, {\n          arr: [{\n            b: 2\n          }]\n        });\n      });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Can use any kind of nedb query with $pull","suites":["Model","Modifying documents","$pull modifier"],"updatePoint":{"line":1291,"column":51,"index":33289},"line":1291,"code":"      it('Can use any kind of nedb query with $pull', function () {\n        var obj = {\n            arr: [4, 7, 12, 2],\n            other: 'yup'\n          },\n          modified;\n        modified = model.modify(obj, {\n          $pull: {\n            arr: {\n              $gte: 5\n            }\n          }\n        });\n        assert.deepEqual(modified, {\n          arr: [4, 2],\n          other: 'yup'\n        });\n        obj = {\n          arr: [{\n            b: 4\n          }, {\n            b: 7\n          }, {\n            b: 1\n          }],\n          other: 'yeah'\n        };\n        modified = model.modify(obj, {\n          $pull: {\n            arr: {\n              b: {\n                $gte: 5\n              }\n            }\n          }\n        });\n        assert.deepEqual(modified, {\n          arr: [{\n            b: 4\n          }, {\n            b: 1\n          }],\n          other: 'yeah'\n        });\n      });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Will set the field to the updated value if value is greater than current one, without modifying the original object","suites":["Model","Modifying documents","$max modifier"],"updatePoint":{"line":1339,"column":125,"index":34355},"line":1339,"code":"      it('Will set the field to the updated value if value is greater than current one, without modifying the original object', function () {\n        var obj = {\n            some: 'thing',\n            number: 10\n          },\n          updateQuery = {\n            $max: {\n              number: 12\n            }\n          },\n          modified = model.modify(obj, updateQuery);\n        modified.should.deep.equal({\n          some: 'thing',\n          number: 12\n        });\n        obj.should.deep.equal({\n          some: 'thing',\n          number: 10\n        });\n      });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Will not update the field if new value is smaller than current one","suites":["Model","Modifying documents","$max modifier"],"updatePoint":{"line":1359,"column":76,"index":34877},"line":1359,"code":"      it('Will not update the field if new value is smaller than current one', function () {\n        var obj = {\n            some: 'thing',\n            number: 10\n          },\n          updateQuery = {\n            $max: {\n              number: 9\n            }\n          },\n          modified = model.modify(obj, updateQuery);\n        modified.should.deep.equal({\n          some: 'thing',\n          number: 10\n        });\n      });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Will create the field if it does not exist","suites":["Model","Modifying documents","$max modifier"],"updatePoint":{"line":1375,"column":52,"index":35284},"line":1375,"code":"      it('Will create the field if it does not exist', function () {\n        var obj = {\n            some: 'thing'\n          },\n          updateQuery = {\n            $max: {\n              number: 10\n            }\n          },\n          modified = model.modify(obj, updateQuery);\n        modified.should.deep.equal({\n          some: 'thing',\n          number: 10\n        });\n      });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Works on embedded documents","suites":["Model","Modifying documents","$max modifier"],"updatePoint":{"line":1390,"column":37,"index":35653},"line":1390,"code":"      it('Works on embedded documents', function () {\n        var obj = {\n            some: 'thing',\n            somethingElse: {\n              number: 10\n            }\n          },\n          updateQuery = {\n            $max: {\n              'somethingElse.number': 12\n            }\n          },\n          modified = model.modify(obj, updateQuery);\n        modified.should.deep.equal({\n          some: 'thing',\n          somethingElse: {\n            number: 12\n          }\n        });\n      });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Will set the field to the updated value if value is smaller than current one, without modifying the original object","suites":["Model","Modifying documents","$min modifier"],"updatePoint":{"line":1413,"column":125,"index":36315},"line":1413,"code":"      it('Will set the field to the updated value if value is smaller than current one, without modifying the original object', function () {\n        var obj = {\n            some: 'thing',\n            number: 10\n          },\n          updateQuery = {\n            $min: {\n              number: 8\n            }\n          },\n          modified = model.modify(obj, updateQuery);\n        modified.should.deep.equal({\n          some: 'thing',\n          number: 8\n        });\n        obj.should.deep.equal({\n          some: 'thing',\n          number: 10\n        });\n      });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Will not update the field if new value is greater than current one","suites":["Model","Modifying documents","$min modifier"],"updatePoint":{"line":1433,"column":76,"index":36835},"line":1433,"code":"      it('Will not update the field if new value is greater than current one', function () {\n        var obj = {\n            some: 'thing',\n            number: 10\n          },\n          updateQuery = {\n            $min: {\n              number: 12\n            }\n          },\n          modified = model.modify(obj, updateQuery);\n        modified.should.deep.equal({\n          some: 'thing',\n          number: 10\n        });\n      });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Will create the field if it does not exist","suites":["Model","Modifying documents","$min modifier"],"updatePoint":{"line":1449,"column":52,"index":37243},"line":1449,"code":"      it('Will create the field if it does not exist', function () {\n        var obj = {\n            some: 'thing'\n          },\n          updateQuery = {\n            $min: {\n              number: 10\n            }\n          },\n          modified = model.modify(obj, updateQuery);\n        modified.should.deep.equal({\n          some: 'thing',\n          number: 10\n        });\n      });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Works on embedded documents","suites":["Model","Modifying documents","$min modifier"],"updatePoint":{"line":1464,"column":37,"index":37612},"line":1464,"code":"      it('Works on embedded documents', function () {\n        var obj = {\n            some: 'thing',\n            somethingElse: {\n              number: 10\n            }\n          },\n          updateQuery = {\n            $min: {\n              'somethingElse.number': 8\n            }\n          },\n          modified = model.modify(obj, updateQuery);\n        modified.should.deep.equal({\n          some: 'thing',\n          somethingElse: {\n            number: 8\n          }\n        });\n      });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"undefined is the smallest","suites":["Model","Comparing things"],"updatePoint":{"line":1488,"column":33,"index":38232},"line":1488,"code":"    it('undefined is the smallest', function () {\n      var otherStuff = [null, \"string\", \"\", -1, 0, 5.3, 12, true, false, new Date(12345), {}, {\n        hello: 'world'\n      }, [], ['quite', 5]];\n      model.compareThings(undefined, undefined).should.equal(0);\n      otherStuff.forEach(function (stuff) {\n        model.compareThings(undefined, stuff).should.equal(-1);\n        model.compareThings(stuff, undefined).should.equal(1);\n      });\n    });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Then null","suites":["Model","Comparing things"],"updatePoint":{"line":1498,"column":17,"index":38667},"line":1498,"code":"    it('Then null', function () {\n      var otherStuff = [\"string\", \"\", -1, 0, 5.3, 12, true, false, new Date(12345), {}, {\n        hello: 'world'\n      }, [], ['quite', 5]];\n      model.compareThings(null, null).should.equal(0);\n      otherStuff.forEach(function (stuff) {\n        model.compareThings(null, stuff).should.equal(-1);\n        model.compareThings(stuff, null).should.equal(1);\n      });\n    });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Then numbers","suites":["Model","Comparing things"],"updatePoint":{"line":1508,"column":20,"index":39079},"line":1508,"code":"    it('Then numbers', function () {\n      var otherStuff = [\"string\", \"\", true, false, new Date(4312), {}, {\n          hello: 'world'\n        }, [], ['quite', 5]],\n        numbers = [-12, 0, 12, 5.7];\n      model.compareThings(-12, 0).should.equal(-1);\n      model.compareThings(0, -3).should.equal(1);\n      model.compareThings(5.7, 2).should.equal(1);\n      model.compareThings(5.7, 12.3).should.equal(-1);\n      model.compareThings(0, 0).should.equal(0);\n      model.compareThings(-2.6, -2.6).should.equal(0);\n      model.compareThings(5, 5).should.equal(0);\n      otherStuff.forEach(function (stuff) {\n        numbers.forEach(function (number) {\n          model.compareThings(number, stuff).should.equal(-1);\n          model.compareThings(stuff, number).should.equal(1);\n        });\n      });\n    });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Then strings","suites":["Model","Comparing things"],"updatePoint":{"line":1527,"column":20,"index":39885},"line":1527,"code":"    it('Then strings', function () {\n      var otherStuff = [true, false, new Date(4321), {}, {\n          hello: 'world'\n        }, [], ['quite', 5]],\n        strings = ['', 'string', 'hello world'];\n      model.compareThings('', 'hey').should.equal(-1);\n      model.compareThings('hey', '').should.equal(1);\n      model.compareThings('hey', 'hew').should.equal(1);\n      model.compareThings('hey', 'hey').should.equal(0);\n      otherStuff.forEach(function (stuff) {\n        strings.forEach(function (string) {\n          model.compareThings(string, stuff).should.equal(-1);\n          model.compareThings(stuff, string).should.equal(1);\n        });\n      });\n    });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Then booleans","suites":["Model","Comparing things"],"updatePoint":{"line":1543,"column":21,"index":40552},"line":1543,"code":"    it('Then booleans', function () {\n      var otherStuff = [new Date(4321), {}, {\n          hello: 'world'\n        }, [], ['quite', 5]],\n        bools = [true, false];\n      model.compareThings(true, true).should.equal(0);\n      model.compareThings(false, false).should.equal(0);\n      model.compareThings(true, false).should.equal(1);\n      model.compareThings(false, true).should.equal(-1);\n      otherStuff.forEach(function (stuff) {\n        bools.forEach(function (bool) {\n          model.compareThings(bool, stuff).should.equal(-1);\n          model.compareThings(stuff, bool).should.equal(1);\n        });\n      });\n    });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Then dates","suites":["Model","Comparing things"],"updatePoint":{"line":1559,"column":18,"index":41179},"line":1559,"code":"    it('Then dates', function () {\n      var otherStuff = [{}, {\n          hello: 'world'\n        }, [], ['quite', 5]],\n        dates = [new Date(-123), new Date(), new Date(5555), new Date(0)],\n        now = new Date();\n      model.compareThings(now, now).should.equal(0);\n      model.compareThings(new Date(54341), now).should.equal(-1);\n      model.compareThings(now, new Date(54341)).should.equal(1);\n      model.compareThings(new Date(0), new Date(-54341)).should.equal(1);\n      model.compareThings(new Date(123), new Date(4341)).should.equal(-1);\n      otherStuff.forEach(function (stuff) {\n        dates.forEach(function (date) {\n          model.compareThings(date, stuff).should.equal(-1);\n          model.compareThings(stuff, date).should.equal(1);\n        });\n      });\n    });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Then arrays","suites":["Model","Comparing things"],"updatePoint":{"line":1577,"column":19,"index":41969},"line":1577,"code":"    it('Then arrays', function () {\n      var otherStuff = [{}, {\n          hello: 'world'\n        }],\n        arrays = [[], ['yes'], ['hello', 5]];\n      model.compareThings([], []).should.equal(0);\n      model.compareThings(['hello'], []).should.equal(1);\n      model.compareThings([], ['hello']).should.equal(-1);\n      model.compareThings(['hello'], ['hello', 'world']).should.equal(-1);\n      model.compareThings(['hello', 'earth'], ['hello', 'world']).should.equal(-1);\n      model.compareThings(['hello', 'zzz'], ['hello', 'world']).should.equal(1);\n      model.compareThings(['hello', 'world'], ['hello', 'world']).should.equal(0);\n      otherStuff.forEach(function (stuff) {\n        arrays.forEach(function (array) {\n          model.compareThings(array, stuff).should.equal(-1);\n          model.compareThings(stuff, array).should.equal(1);\n        });\n      });\n    });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"And finally objects","suites":["Model","Comparing things"],"updatePoint":{"line":1596,"column":27,"index":42856},"line":1596,"code":"    it('And finally objects', function () {\n      model.compareThings({}, {}).should.equal(0);\n      model.compareThings({\n        a: 42\n      }, {\n        a: 312\n      }).should.equal(-1);\n      model.compareThings({\n        a: '42'\n      }, {\n        a: '312'\n      }).should.equal(1);\n      model.compareThings({\n        a: 42,\n        b: 312\n      }, {\n        b: 312,\n        a: 42\n      }).should.equal(0);\n      model.compareThings({\n        a: 42,\n        b: 312,\n        c: 54\n      }, {\n        b: 313,\n        a: 42\n      }).should.equal(-1);\n    });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Can specify custom string comparison function","suites":["Model","Comparing things"],"updatePoint":{"line":1624,"column":53,"index":43444},"line":1624,"code":"    it('Can specify custom string comparison function', function () {\n      model.compareThings('hello', 'bloup', function (a, b) {\n        return a < b ? -1 : 1;\n      }).should.equal(1);\n      model.compareThings('hello', 'bloup', function (a, b) {\n        return a > b ? -1 : 1;\n      }).should.equal(-1);\n    });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Two things of different types cannot be equal, two identical native things are equal","suites":["Model","Querying","Comparing things"],"updatePoint":{"line":1636,"column":94,"index":43935},"line":1636,"code":"      it('Two things of different types cannot be equal, two identical native things are equal', function () {\n        var toTest = [null, 'somestring', 42, true, new Date(72998322), {\n            hello: 'world'\n          }],\n          toTestAgainst = [null, 'somestring', 42, true, new Date(72998322), {\n            hello: 'world'\n          }] // Use another array so that we don't test pointer equality\n          ,\n          i,\n          j;\n        for (i = 0; i < toTest.length; i += 1) {\n          for (j = 0; j < toTestAgainst.length; j += 1) {\n            model.areThingsEqual(toTest[i], toTestAgainst[j]).should.equal(i === j);\n          }\n        }\n      });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Can test native types null undefined string number boolean date equality","suites":["Model","Querying","Comparing things"],"updatePoint":{"line":1652,"column":82,"index":44590},"line":1652,"code":"      it('Can test native types null undefined string number boolean date equality', function () {\n        var toTest = [null, undefined, 'somestring', 42, true, new Date(72998322), {\n            hello: 'world'\n          }],\n          toTestAgainst = [undefined, null, 'someotherstring', 5, false, new Date(111111), {\n            hello: 'mars'\n          }],\n          i;\n        for (i = 0; i < toTest.length; i += 1) {\n          model.areThingsEqual(toTest[i], toTestAgainst[i]).should.equal(false);\n        }\n      });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"If one side is an array or undefined, comparison fails","suites":["Model","Querying","Comparing things"],"updatePoint":{"line":1664,"column":64,"index":45093},"line":1664,"code":"      it('If one side is an array or undefined, comparison fails', function () {\n        var toTestAgainst = [null, undefined, 'somestring', 42, true, new Date(72998322), {\n            hello: 'world'\n          }],\n          i;\n        for (i = 0; i < toTestAgainst.length; i += 1) {\n          model.areThingsEqual([1, 2, 3], toTestAgainst[i]).should.equal(false);\n          model.areThingsEqual(toTestAgainst[i], []).should.equal(false);\n          model.areThingsEqual(undefined, toTestAgainst[i]).should.equal(false);\n          model.areThingsEqual(toTestAgainst[i], undefined).should.equal(false);\n        }\n      });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Can test objects equality","suites":["Model","Querying","Comparing things"],"updatePoint":{"line":1676,"column":35,"index":45684},"line":1676,"code":"      it('Can test objects equality', function () {\n        model.areThingsEqual({\n          hello: 'world'\n        }, {}).should.equal(false);\n        model.areThingsEqual({\n          hello: 'world'\n        }, {\n          hello: 'mars'\n        }).should.equal(false);\n        model.areThingsEqual({\n          hello: 'world'\n        }, {\n          hello: 'world',\n          temperature: 42\n        }).should.equal(false);\n        model.areThingsEqual({\n          hello: 'world',\n          other: {\n            temperature: 42\n          }\n        }, {\n          hello: 'world',\n          other: {\n            temperature: 42\n          }\n        }).should.equal(true);\n      });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Return first-level and nested values","suites":["Model","Querying","Getting a fields value in dot notation"],"updatePoint":{"line":1705,"column":46,"index":46449},"line":1705,"code":"      it('Return first-level and nested values', function () {\n        model.getDotValue({\n          hello: 'world'\n        }, 'hello').should.equal('world');\n        model.getDotValue({\n          hello: 'world',\n          type: {\n            planet: true,\n            blue: true\n          }\n        }, 'type.planet').should.equal(true);\n      });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Return undefined if the field cannot be found in the object","suites":["Model","Querying","Getting a fields value in dot notation"],"updatePoint":{"line":1717,"column":69,"index":46820},"line":1717,"code":"      it('Return undefined if the field cannot be found in the object', function () {\n        assert.isUndefined(model.getDotValue({\n          hello: 'world'\n        }, 'helloo'));\n        assert.isUndefined(model.getDotValue({\n          hello: 'world',\n          type: {\n            planet: true\n          }\n        }, 'type.plane'));\n      });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Can navigate inside arrays with dot notation, and return the array of values in that case","suites":["Model","Querying","Getting a fields value in dot notation"],"updatePoint":{"line":1728,"column":99,"index":47196},"line":1728,"code":"      it(\"Can navigate inside arrays with dot notation, and return the array of values in that case\", function () {\n        var dv;\n\n        // Simple array of subdocuments\n        dv = model.getDotValue({\n          planets: [{\n            name: 'Earth',\n            number: 3\n          }, {\n            name: 'Mars',\n            number: 2\n          }, {\n            name: 'Pluton',\n            number: 9\n          }]\n        }, 'planets.name');\n        assert.deepEqual(dv, ['Earth', 'Mars', 'Pluton']);\n\n        // Nested array of subdocuments\n        dv = model.getDotValue({\n          nedb: true,\n          data: {\n            planets: [{\n              name: 'Earth',\n              number: 3\n            }, {\n              name: 'Mars',\n              number: 2\n            }, {\n              name: 'Pluton',\n              number: 9\n            }]\n          }\n        }, 'data.planets.number');\n        assert.deepEqual(dv, [3, 2, 9]);\n\n        // Nested array in a subdocument of an array (yay, inception!)\n        // TODO: make sure MongoDB doesn't flatten the array (it wouldn't make sense)\n        dv = model.getDotValue({\n          nedb: true,\n          data: {\n            planets: [{\n              name: 'Earth',\n              numbers: [1, 3]\n            }, {\n              name: 'Mars',\n              numbers: [7]\n            }, {\n              name: 'Pluton',\n              numbers: [9, 5, 1]\n            }]\n          }\n        }, 'data.planets.numbers');\n        assert.deepEqual(dv, [[1, 3], [7], [9, 5, 1]]);\n      });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Can get a single value out of an array using its index","suites":["Model","Querying","Getting a fields value in dot notation"],"updatePoint":{"line":1783,"column":64,"index":48695},"line":1783,"code":"      it(\"Can get a single value out of an array using its index\", function () {\n        var dv;\n\n        // Simple index in dot notation\n        dv = model.getDotValue({\n          planets: [{\n            name: 'Earth',\n            number: 3\n          }, {\n            name: 'Mars',\n            number: 2\n          }, {\n            name: 'Pluton',\n            number: 9\n          }]\n        }, 'planets.1');\n        assert.deepEqual(dv, {\n          name: 'Mars',\n          number: 2\n        });\n\n        // Out of bounds index\n        dv = model.getDotValue({\n          planets: [{\n            name: 'Earth',\n            number: 3\n          }, {\n            name: 'Mars',\n            number: 2\n          }, {\n            name: 'Pluton',\n            number: 9\n          }]\n        }, 'planets.3');\n        assert.isUndefined(dv);\n\n        // Index in nested array\n        dv = model.getDotValue({\n          nedb: true,\n          data: {\n            planets: [{\n              name: 'Earth',\n              number: 3\n            }, {\n              name: 'Mars',\n              number: 2\n            }, {\n              name: 'Pluton',\n              number: 9\n            }]\n          }\n        }, 'data.planets.2');\n        assert.deepEqual(dv, {\n          name: 'Pluton',\n          number: 9\n        });\n\n        // Dot notation with index in the middle\n        dv = model.getDotValue({\n          nedb: true,\n          data: {\n            planets: [{\n              name: 'Earth',\n              number: 3\n            }, {\n              name: 'Mars',\n              number: 2\n            }, {\n              name: 'Pluton',\n              number: 9\n            }]\n          }\n        }, 'data.planets.0.name');\n        dv.should.equal('Earth');\n      });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Can find documents with simple fields","suites":["Model","Querying","Field equality"],"updatePoint":{"line":1860,"column":47,"index":50476},"line":1860,"code":"      it('Can find documents with simple fields', function () {\n        model.match({\n          test: 'yeah'\n        }, {\n          test: 'yea'\n        }).should.equal(false);\n        model.match({\n          test: 'yeah'\n        }, {\n          test: 'yeahh'\n        }).should.equal(false);\n        model.match({\n          test: 'yeah'\n        }, {\n          test: 'yeah'\n        }).should.equal(true);\n      });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Can find documents with the dot-notation","suites":["Model","Querying","Field equality"],"updatePoint":{"line":1877,"column":50,"index":50891},"line":1877,"code":"      it('Can find documents with the dot-notation', function () {\n        model.match({\n          test: {\n            ooo: 'yeah'\n          }\n        }, {\n          \"test.ooo\": 'yea'\n        }).should.equal(false);\n        model.match({\n          test: {\n            ooo: 'yeah'\n          }\n        }, {\n          \"test.oo\": 'yeah'\n        }).should.equal(false);\n        model.match({\n          test: {\n            ooo: 'yeah'\n          }\n        }, {\n          \"tst.ooo\": 'yeah'\n        }).should.equal(false);\n        model.match({\n          test: {\n            ooo: 'yeah'\n          }\n        }, {\n          \"test.ooo\": 'yeah'\n        }).should.equal(true);\n      });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Cannot find undefined","suites":["Model","Querying","Field equality"],"updatePoint":{"line":1907,"column":31,"index":51545},"line":1907,"code":"      it('Cannot find undefined', function () {\n        model.match({\n          test: undefined\n        }, {\n          test: undefined\n        }).should.equal(false);\n        model.match({\n          test: {\n            pp: undefined\n          }\n        }, {\n          \"test.pp\": undefined\n        }).should.equal(false);\n      });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Nested objects are deep-equality matched and not treated as sub-queries","suites":["Model","Querying","Field equality"],"updatePoint":{"line":1921,"column":81,"index":51926},"line":1921,"code":"      it('Nested objects are deep-equality matched and not treated as sub-queries', function () {\n        model.match({\n          a: {\n            b: 5\n          }\n        }, {\n          a: {\n            b: 5\n          }\n        }).should.equal(true);\n        model.match({\n          a: {\n            b: 5,\n            c: 3\n          }\n        }, {\n          a: {\n            b: 5\n          }\n        }).should.equal(false);\n        model.match({\n          a: {\n            b: 5\n          }\n        }, {\n          a: {\n            b: {\n              $lt: 10\n            }\n          }\n        }).should.equal(false);\n        (function () {\n          model.match({\n            a: {\n              b: 5\n            }\n          }, {\n            a: {\n              $or: [{\n                b: 10\n              }, {\n                b: 5\n              }]\n            }\n          });\n        }).should.throw();\n      });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Can match for field equality inside an array with the dot notation","suites":["Model","Querying","Field equality"],"updatePoint":{"line":1968,"column":76,"index":52832},"line":1968,"code":"      it(\"Can match for field equality inside an array with the dot notation\", function () {\n        model.match({\n          a: true,\n          b: ['node', 'embedded', 'database']\n        }, {\n          'b.1': 'node'\n        }).should.equal(false);\n        model.match({\n          a: true,\n          b: ['node', 'embedded', 'database']\n        }, {\n          'b.1': 'embedded'\n        }).should.equal(true);\n        model.match({\n          a: true,\n          b: ['node', 'embedded', 'database']\n        }, {\n          'b.1': 'database'\n        }).should.equal(false);\n      });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Matching a non-string to a regular expression always yields false","suites":["Model","Querying","Regular expression matching"],"updatePoint":{"line":1990,"column":75,"index":53475},"line":1990,"code":"      it('Matching a non-string to a regular expression always yields false', function () {\n        var d = new Date(),\n          r = new RegExp(d.getTime());\n        model.match({\n          test: true\n        }, {\n          test: /true/\n        }).should.equal(false);\n        model.match({\n          test: null\n        }, {\n          test: /null/\n        }).should.equal(false);\n        model.match({\n          test: 42\n        }, {\n          test: /42/\n        }).should.equal(false);\n        model.match({\n          test: d\n        }, {\n          test: r\n        }).should.equal(false);\n      });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Can match strings using basic querying","suites":["Model","Querying","Regular expression matching"],"updatePoint":{"line":2014,"column":48,"index":54049},"line":2014,"code":"      it('Can match strings using basic querying', function () {\n        model.match({\n          test: 'true'\n        }, {\n          test: /true/\n        }).should.equal(true);\n        model.match({\n          test: 'babaaaar'\n        }, {\n          test: /aba+r/\n        }).should.equal(true);\n        model.match({\n          test: 'babaaaar'\n        }, {\n          test: /^aba+r/\n        }).should.equal(false);\n        model.match({\n          test: 'true'\n        }, {\n          test: /t[ru]e/\n        }).should.equal(false);\n      });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Can match strings using the $regex operator","suites":["Model","Querying","Regular expression matching"],"updatePoint":{"line":2036,"column":53,"index":54592},"line":2036,"code":"      it('Can match strings using the $regex operator', function () {\n        model.match({\n          test: 'true'\n        }, {\n          test: {\n            $regex: /true/\n          }\n        }).should.equal(true);\n        model.match({\n          test: 'babaaaar'\n        }, {\n          test: {\n            $regex: /aba+r/\n          }\n        }).should.equal(true);\n        model.match({\n          test: 'babaaaar'\n        }, {\n          test: {\n            $regex: /^aba+r/\n          }\n        }).should.equal(false);\n        model.match({\n          test: 'true'\n        }, {\n          test: {\n            $regex: /t[ru]e/\n          }\n        }).should.equal(false);\n      });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Will throw if $regex operator is used with a non regex value","suites":["Model","Querying","Regular expression matching"],"updatePoint":{"line":2066,"column":70,"index":55288},"line":2066,"code":"      it('Will throw if $regex operator is used with a non regex value', function () {\n        (function () {\n          model.match({\n            test: 'true'\n          }, {\n            test: {\n              $regex: 42\n            }\n          });\n        }).should.throw();\n        (function () {\n          model.match({\n            test: 'true'\n          }, {\n            test: {\n              $regex: 'true'\n            }\n          });\n        }).should.throw();\n      });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Can use the $regex operator in cunjunction with other operators","suites":["Model","Querying","Regular expression matching"],"updatePoint":{"line":2086,"column":73,"index":55766},"line":2086,"code":"      it('Can use the $regex operator in cunjunction with other operators', function () {\n        model.match({\n          test: 'helLo'\n        }, {\n          test: {\n            $regex: /ll/i,\n            $nin: ['helL', 'helLop']\n          }\n        }).should.equal(true);\n        model.match({\n          test: 'helLo'\n        }, {\n          test: {\n            $regex: /ll/i,\n            $nin: ['helLo', 'helLop']\n          }\n        }).should.equal(false);\n      });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Can use dot-notation","suites":["Model","Querying","Regular expression matching"],"updatePoint":{"line":2104,"column":30,"index":56193},"line":2104,"code":"      it('Can use dot-notation', function () {\n        model.match({\n          test: {\n            nested: 'true'\n          }\n        }, {\n          'test.nested': /true/\n        }).should.equal(true);\n        model.match({\n          test: {\n            nested: 'babaaaar'\n          }\n        }, {\n          'test.nested': /^aba+r/\n        }).should.equal(false);\n        model.match({\n          test: {\n            nested: 'true'\n          }\n        }, {\n          'test.nested': {\n            $regex: /true/\n          }\n        }).should.equal(true);\n        model.match({\n          test: {\n            nested: 'babaaaar'\n          }\n        }, {\n          'test.nested': {\n            $regex: /^aba+r/\n          }\n        }).should.equal(false);\n      });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Cannot compare a field to an object, an array, null or a boolean, it will return false","suites":["Model","Querying","$lt"],"updatePoint":{"line":2140,"column":96,"index":57060},"line":2140,"code":"      it('Cannot compare a field to an object, an array, null or a boolean, it will return false', function () {\n        model.match({\n          a: 5\n        }, {\n          a: {\n            $lt: {\n              a: 6\n            }\n          }\n        }).should.equal(false);\n        model.match({\n          a: 5\n        }, {\n          a: {\n            $lt: [6, 7]\n          }\n        }).should.equal(false);\n        model.match({\n          a: 5\n        }, {\n          a: {\n            $lt: null\n          }\n        }).should.equal(false);\n        model.match({\n          a: 5\n        }, {\n          a: {\n            $lt: true\n          }\n        }).should.equal(false);\n      });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Can compare numbers, with or without dot notation","suites":["Model","Querying","$lt"],"updatePoint":{"line":2172,"column":59,"index":57702},"line":2172,"code":"      it('Can compare numbers, with or without dot notation', function () {\n        model.match({\n          a: 5\n        }, {\n          a: {\n            $lt: 6\n          }\n        }).should.equal(true);\n        model.match({\n          a: 5\n        }, {\n          a: {\n            $lt: 5\n          }\n        }).should.equal(false);\n        model.match({\n          a: 5\n        }, {\n          a: {\n            $lt: 4\n          }\n        }).should.equal(false);\n        model.match({\n          a: {\n            b: 5\n          }\n        }, {\n          \"a.b\": {\n            $lt: 6\n          }\n        }).should.equal(true);\n        model.match({\n          a: {\n            b: 5\n          }\n        }, {\n          \"a.b\": {\n            $lt: 3\n          }\n        }).should.equal(false);\n      });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Can compare strings, with or without dot notation","suites":["Model","Querying","$lt"],"updatePoint":{"line":2213,"column":59,"index":58492},"line":2213,"code":"      it('Can compare strings, with or without dot notation', function () {\n        model.match({\n          a: \"nedb\"\n        }, {\n          a: {\n            $lt: \"nedc\"\n          }\n        }).should.equal(true);\n        model.match({\n          a: \"nedb\"\n        }, {\n          a: {\n            $lt: \"neda\"\n          }\n        }).should.equal(false);\n        model.match({\n          a: {\n            b: \"nedb\"\n          }\n        }, {\n          \"a.b\": {\n            $lt: \"nedc\"\n          }\n        }).should.equal(true);\n        model.match({\n          a: {\n            b: \"nedb\"\n          }\n        }, {\n          \"a.b\": {\n            $lt: \"neda\"\n          }\n        }).should.equal(false);\n      });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"If field is an array field, a match means a match on at least one element","suites":["Model","Querying","$lt"],"updatePoint":{"line":2247,"column":83,"index":59218},"line":2247,"code":"      it('If field is an array field, a match means a match on at least one element', function () {\n        model.match({\n          a: [5, 10]\n        }, {\n          a: {\n            $lt: 4\n          }\n        }).should.equal(false);\n        model.match({\n          a: [5, 10]\n        }, {\n          a: {\n            $lt: 6\n          }\n        }).should.equal(true);\n        model.match({\n          a: [5, 10]\n        }, {\n          a: {\n            $lt: 11\n          }\n        }).should.equal(true);\n      });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Works with dates too","suites":["Model","Querying","$lt"],"updatePoint":{"line":2270,"column":30,"index":59676},"line":2270,"code":"      it('Works with dates too', function () {\n        model.match({\n          a: new Date(1000)\n        }, {\n          a: {\n            $gte: new Date(1001)\n          }\n        }).should.equal(false);\n        model.match({\n          a: new Date(1000)\n        }, {\n          a: {\n            $lt: new Date(1001)\n          }\n        }).should.equal(true);\n      });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"$lte","suites":["Model","Querying","Other comparison operators: $lte, $gt, $gte, $ne, $in, $exists"],"updatePoint":{"line":2290,"column":14,"index":60219},"line":2290,"code":"      it('$lte', function () {\n        model.match({\n          a: 5\n        }, {\n          a: {\n            $lte: 6\n          }\n        }).should.equal(true);\n        model.match({\n          a: 5\n        }, {\n          a: {\n            $lte: 5\n          }\n        }).should.equal(true);\n        model.match({\n          a: 5\n        }, {\n          a: {\n            $lte: 4\n          }\n        }).should.equal(false);\n      });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"$gt","suites":["Model","Querying","Other comparison operators: $lte, $gt, $gte, $ne, $in, $exists"],"updatePoint":{"line":2313,"column":13,"index":60644},"line":2313,"code":"      it('$gt', function () {\n        model.match({\n          a: 5\n        }, {\n          a: {\n            $gt: 6\n          }\n        }).should.equal(false);\n        model.match({\n          a: 5\n        }, {\n          a: {\n            $gt: 5\n          }\n        }).should.equal(false);\n        model.match({\n          a: 5\n        }, {\n          a: {\n            $gt: 4\n          }\n        }).should.equal(true);\n      });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"$gte","suites":["Model","Querying","Other comparison operators: $lte, $gt, $gte, $ne, $in, $exists"],"updatePoint":{"line":2336,"column":14,"index":61068},"line":2336,"code":"      it('$gte', function () {\n        model.match({\n          a: 5\n        }, {\n          a: {\n            $gte: 6\n          }\n        }).should.equal(false);\n        model.match({\n          a: 5\n        }, {\n          a: {\n            $gte: 5\n          }\n        }).should.equal(true);\n        model.match({\n          a: 5\n        }, {\n          a: {\n            $gte: 4\n          }\n        }).should.equal(true);\n      });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"$ne","suites":["Model","Querying","Other comparison operators: $lte, $gt, $gte, $ne, $in, $exists"],"updatePoint":{"line":2359,"column":13,"index":61493},"line":2359,"code":"      it('$ne', function () {\n        model.match({\n          a: 5\n        }, {\n          a: {\n            $ne: 4\n          }\n        }).should.equal(true);\n        model.match({\n          a: 5\n        }, {\n          a: {\n            $ne: 5\n          }\n        }).should.equal(false);\n        model.match({\n          a: 5\n        }, {\n          b: {\n            $ne: 5\n          }\n        }).should.equal(true);\n        model.match({\n          a: false\n        }, {\n          a: {\n            $ne: false\n          }\n        }).should.equal(false);\n      });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"$in","suites":["Model","Querying","Other comparison operators: $lte, $gt, $gte, $ne, $in, $exists"],"updatePoint":{"line":2389,"column":13,"index":62051},"line":2389,"code":"      it('$in', function () {\n        model.match({\n          a: 5\n        }, {\n          a: {\n            $in: [6, 8, 9]\n          }\n        }).should.equal(false);\n        model.match({\n          a: 6\n        }, {\n          a: {\n            $in: [6, 8, 9]\n          }\n        }).should.equal(true);\n        model.match({\n          a: 7\n        }, {\n          a: {\n            $in: [6, 8, 9]\n          }\n        }).should.equal(false);\n        model.match({\n          a: 8\n        }, {\n          a: {\n            $in: [6, 8, 9]\n          }\n        }).should.equal(true);\n        model.match({\n          a: 9\n        }, {\n          a: {\n            $in: [6, 8, 9]\n          }\n        }).should.equal(true);\n        (function () {\n          model.match({\n            a: 5\n          }, {\n            a: {\n              $in: 5\n            }\n          });\n        }).should.throw();\n      });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"$nin","suites":["Model","Querying","Other comparison operators: $lte, $gt, $gte, $ne, $in, $exists"],"updatePoint":{"line":2435,"column":14,"index":62941},"line":2435,"code":"      it('$nin', function () {\n        model.match({\n          a: 5\n        }, {\n          a: {\n            $nin: [6, 8, 9]\n          }\n        }).should.equal(true);\n        model.match({\n          a: 6\n        }, {\n          a: {\n            $nin: [6, 8, 9]\n          }\n        }).should.equal(false);\n        model.match({\n          a: 7\n        }, {\n          a: {\n            $nin: [6, 8, 9]\n          }\n        }).should.equal(true);\n        model.match({\n          a: 8\n        }, {\n          a: {\n            $nin: [6, 8, 9]\n          }\n        }).should.equal(false);\n        model.match({\n          a: 9\n        }, {\n          a: {\n            $nin: [6, 8, 9]\n          }\n        }).should.equal(false);\n\n        // Matches if field doesn't exist\n        model.match({\n          a: 9\n        }, {\n          b: {\n            $nin: [6, 8, 9]\n          }\n        }).should.equal(true);\n        (function () {\n          model.match({\n            a: 5\n          }, {\n            a: {\n              $in: 5\n            }\n          });\n        }).should.throw();\n      });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"$exists","suites":["Model","Querying","Other comparison operators: $lte, $gt, $gte, $ne, $in, $exists"],"updatePoint":{"line":2490,"column":17,"index":64019},"line":2490,"code":"      it('$exists', function () {\n        model.match({\n          a: 5\n        }, {\n          a: {\n            $exists: 1\n          }\n        }).should.equal(true);\n        model.match({\n          a: 5\n        }, {\n          a: {\n            $exists: true\n          }\n        }).should.equal(true);\n        model.match({\n          a: 5\n        }, {\n          a: {\n            $exists: new Date()\n          }\n        }).should.equal(true);\n        model.match({\n          a: 5\n        }, {\n          a: {\n            $exists: ''\n          }\n        }).should.equal(true);\n        model.match({\n          a: 5\n        }, {\n          a: {\n            $exists: []\n          }\n        }).should.equal(true);\n        model.match({\n          a: 5\n        }, {\n          a: {\n            $exists: {}\n          }\n        }).should.equal(true);\n        model.match({\n          a: 5\n        }, {\n          a: {\n            $exists: 0\n          }\n        }).should.equal(false);\n        model.match({\n          a: 5\n        }, {\n          a: {\n            $exists: false\n          }\n        }).should.equal(false);\n        model.match({\n          a: 5\n        }, {\n          a: {\n            $exists: null\n          }\n        }).should.equal(false);\n        model.match({\n          a: 5\n        }, {\n          a: {\n            $exists: undefined\n          }\n        }).should.equal(false);\n        model.match({\n          a: 5\n        }, {\n          b: {\n            $exists: true\n          }\n        }).should.equal(false);\n        model.match({\n          a: 5\n        }, {\n          b: {\n            $exists: false\n          }\n        }).should.equal(true);\n      });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Can perform a direct array match","suites":["Model","Querying","Comparing on arrays"],"updatePoint":{"line":2578,"column":42,"index":65760},"line":2578,"code":"      it(\"Can perform a direct array match\", function () {\n        model.match({\n          planets: ['Earth', 'Mars', 'Pluto'],\n          something: 'else'\n        }, {\n          planets: ['Earth', 'Mars']\n        }).should.equal(false);\n        model.match({\n          planets: ['Earth', 'Mars', 'Pluto'],\n          something: 'else'\n        }, {\n          planets: ['Earth', 'Mars', 'Pluto']\n        }).should.equal(true);\n        model.match({\n          planets: ['Earth', 'Mars', 'Pluto'],\n          something: 'else'\n        }, {\n          planets: ['Earth', 'Pluto', 'Mars']\n        }).should.equal(false);\n      });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Can query on the size of an array field","suites":["Model","Querying","Comparing on arrays"],"updatePoint":{"line":2598,"column":49,"index":66390},"line":2598,"code":"      it('Can query on the size of an array field', function () {\n        // Non nested documents\n        model.match({\n          childrens: [{\n            name: \"Huey\",\n            age: 3\n          }, {\n            name: \"Dewey\",\n            age: 7\n          }, {\n            name: \"Louie\",\n            age: 12\n          }]\n        }, {\n          \"childrens\": {\n            $size: 0\n          }\n        }).should.equal(false);\n        model.match({\n          childrens: [{\n            name: \"Huey\",\n            age: 3\n          }, {\n            name: \"Dewey\",\n            age: 7\n          }, {\n            name: \"Louie\",\n            age: 12\n          }]\n        }, {\n          \"childrens\": {\n            $size: 1\n          }\n        }).should.equal(false);\n        model.match({\n          childrens: [{\n            name: \"Huey\",\n            age: 3\n          }, {\n            name: \"Dewey\",\n            age: 7\n          }, {\n            name: \"Louie\",\n            age: 12\n          }]\n        }, {\n          \"childrens\": {\n            $size: 2\n          }\n        }).should.equal(false);\n        model.match({\n          childrens: [{\n            name: \"Huey\",\n            age: 3\n          }, {\n            name: \"Dewey\",\n            age: 7\n          }, {\n            name: \"Louie\",\n            age: 12\n          }]\n        }, {\n          \"childrens\": {\n            $size: 3\n          }\n        }).should.equal(true);\n\n        // Nested documents\n        model.match({\n          hello: 'world',\n          description: {\n            satellites: ['Moon', 'Hubble'],\n            diameter: 6300\n          }\n        }, {\n          \"description.satellites\": {\n            $size: 0\n          }\n        }).should.equal(false);\n        model.match({\n          hello: 'world',\n          description: {\n            satellites: ['Moon', 'Hubble'],\n            diameter: 6300\n          }\n        }, {\n          \"description.satellites\": {\n            $size: 1\n          }\n        }).should.equal(false);\n        model.match({\n          hello: 'world',\n          description: {\n            satellites: ['Moon', 'Hubble'],\n            diameter: 6300\n          }\n        }, {\n          \"description.satellites\": {\n            $size: 2\n          }\n        }).should.equal(true);\n        model.match({\n          hello: 'world',\n          description: {\n            satellites: ['Moon', 'Hubble'],\n            diameter: 6300\n          }\n        }, {\n          \"description.satellites\": {\n            $size: 3\n          }\n        }).should.equal(false);\n\n        // Using a projected array\n        model.match({\n          childrens: [{\n            name: \"Huey\",\n            age: 3\n          }, {\n            name: \"Dewey\",\n            age: 7\n          }, {\n            name: \"Louie\",\n            age: 12\n          }]\n        }, {\n          \"childrens.names\": {\n            $size: 0\n          }\n        }).should.equal(false);\n        model.match({\n          childrens: [{\n            name: \"Huey\",\n            age: 3\n          }, {\n            name: \"Dewey\",\n            age: 7\n          }, {\n            name: \"Louie\",\n            age: 12\n          }]\n        }, {\n          \"childrens.names\": {\n            $size: 1\n          }\n        }).should.equal(false);\n        model.match({\n          childrens: [{\n            name: \"Huey\",\n            age: 3\n          }, {\n            name: \"Dewey\",\n            age: 7\n          }, {\n            name: \"Louie\",\n            age: 12\n          }]\n        }, {\n          \"childrens.names\": {\n            $size: 2\n          }\n        }).should.equal(false);\n        model.match({\n          childrens: [{\n            name: \"Huey\",\n            age: 3\n          }, {\n            name: \"Dewey\",\n            age: 7\n          }, {\n            name: \"Louie\",\n            age: 12\n          }]\n        }, {\n          \"childrens.names\": {\n            $size: 3\n          }\n        }).should.equal(true);\n      });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"$size operator works with empty arrays","suites":["Model","Querying","Comparing on arrays"],"updatePoint":{"line":2777,"column":48,"index":70311},"line":2777,"code":"      it('$size operator works with empty arrays', function () {\n        model.match({\n          childrens: []\n        }, {\n          \"childrens\": {\n            $size: 0\n          }\n        }).should.equal(true);\n        model.match({\n          childrens: []\n        }, {\n          \"childrens\": {\n            $size: 2\n          }\n        }).should.equal(false);\n        model.match({\n          childrens: []\n        }, {\n          \"childrens\": {\n            $size: 3\n          }\n        }).should.equal(false);\n      });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Should throw an error if a query operator is used without comparing to an integer","suites":["Model","Querying","Comparing on arrays"],"updatePoint":{"line":2800,"column":91,"index":70875},"line":2800,"code":"      it('Should throw an error if a query operator is used without comparing to an integer', function () {\n        (function () {\n          model.match({\n            a: [1, 5]\n          }, {\n            a: {\n              $size: 1.4\n            }\n          });\n        }).should.throw();\n        (function () {\n          model.match({\n            a: [1, 5]\n          }, {\n            a: {\n              $size: 'fdf'\n            }\n          });\n        }).should.throw();\n        (function () {\n          model.match({\n            a: [1, 5]\n          }, {\n            a: {\n              $size: {\n                $lt: 5\n              }\n            }\n          });\n        }).should.throw();\n      });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Using $size operator on a non-array field should prevent match but not throw","suites":["Model","Querying","Comparing on arrays"],"updatePoint":{"line":2831,"column":86,"index":71570},"line":2831,"code":"      it('Using $size operator on a non-array field should prevent match but not throw', function () {\n        model.match({\n          a: 5\n        }, {\n          a: {\n            $size: 1\n          }\n        }).should.equal(false);\n      });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Can use $size several times in the same matcher","suites":["Model","Querying","Comparing on arrays"],"updatePoint":{"line":2840,"column":57,"index":71784},"line":2840,"code":"      it('Can use $size several times in the same matcher', function () {\n        model.match({\n          childrens: ['Riri', 'Fifi', 'Loulou']\n        }, {\n          \"childrens\": {\n            $size: 3,\n            $size: 3\n          }\n        }).should.equal(true);\n        model.match({\n          childrens: ['Riri', 'Fifi', 'Loulou']\n        }, {\n          \"childrens\": {\n            $size: 3,\n            $size: 4\n          }\n        }).should.equal(false); // Of course this can never be true\n      });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Can query array documents with multiple simultaneous conditions","suites":["Model","Querying","Comparing on arrays"],"updatePoint":{"line":2859,"column":73,"index":72310},"line":2859,"code":"      it('Can query array documents with multiple simultaneous conditions', function () {\n        // Non nested documents\n        model.match({\n          childrens: [{\n            name: \"Huey\",\n            age: 3\n          }, {\n            name: \"Dewey\",\n            age: 7\n          }, {\n            name: \"Louie\",\n            age: 12\n          }]\n        }, {\n          \"childrens\": {\n            $elemMatch: {\n              name: \"Dewey\",\n              age: 7\n            }\n          }\n        }).should.equal(true);\n        model.match({\n          childrens: [{\n            name: \"Huey\",\n            age: 3\n          }, {\n            name: \"Dewey\",\n            age: 7\n          }, {\n            name: \"Louie\",\n            age: 12\n          }]\n        }, {\n          \"childrens\": {\n            $elemMatch: {\n              name: \"Dewey\",\n              age: 12\n            }\n          }\n        }).should.equal(false);\n        model.match({\n          childrens: [{\n            name: \"Huey\",\n            age: 3\n          }, {\n            name: \"Dewey\",\n            age: 7\n          }, {\n            name: \"Louie\",\n            age: 12\n          }]\n        }, {\n          \"childrens\": {\n            $elemMatch: {\n              name: \"Louie\",\n              age: 3\n            }\n          }\n        }).should.equal(false);\n\n        // Nested documents\n        model.match({\n          outer: {\n            childrens: [{\n              name: \"Huey\",\n              age: 3\n            }, {\n              name: \"Dewey\",\n              age: 7\n            }, {\n              name: \"Louie\",\n              age: 12\n            }]\n          }\n        }, {\n          \"outer.childrens\": {\n            $elemMatch: {\n              name: \"Dewey\",\n              age: 7\n            }\n          }\n        }).should.equal(true);\n        model.match({\n          outer: {\n            childrens: [{\n              name: \"Huey\",\n              age: 3\n            }, {\n              name: \"Dewey\",\n              age: 7\n            }, {\n              name: \"Louie\",\n              age: 12\n            }]\n          }\n        }, {\n          \"outer.childrens\": {\n            $elemMatch: {\n              name: \"Dewey\",\n              age: 12\n            }\n          }\n        }).should.equal(false);\n        model.match({\n          outer: {\n            childrens: [{\n              name: \"Huey\",\n              age: 3\n            }, {\n              name: \"Dewey\",\n              age: 7\n            }, {\n              name: \"Louie\",\n              age: 12\n            }]\n          }\n        }, {\n          \"outer.childrens\": {\n            $elemMatch: {\n              name: \"Louie\",\n              age: 3\n            }\n          }\n        }).should.equal(false);\n      });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"$elemMatch operator works with empty arrays","suites":["Model","Querying","Comparing on arrays"],"updatePoint":{"line":2984,"column":53,"index":75016},"line":2984,"code":"      it('$elemMatch operator works with empty arrays', function () {\n        model.match({\n          childrens: []\n        }, {\n          \"childrens\": {\n            $elemMatch: {\n              name: \"Mitsos\"\n            }\n          }\n        }).should.equal(false);\n        model.match({\n          childrens: []\n        }, {\n          \"childrens\": {\n            $elemMatch: {}\n          }\n        }).should.equal(false);\n      });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Can use more complex comparisons inside nested query documents","suites":["Model","Querying","Comparing on arrays"],"updatePoint":{"line":3002,"column":72,"index":75467},"line":3002,"code":"      it('Can use more complex comparisons inside nested query documents', function () {\n        model.match({\n          childrens: [{\n            name: \"Huey\",\n            age: 3\n          }, {\n            name: \"Dewey\",\n            age: 7\n          }, {\n            name: \"Louie\",\n            age: 12\n          }]\n        }, {\n          \"childrens\": {\n            $elemMatch: {\n              name: \"Dewey\",\n              age: {\n                $gt: 6,\n                $lt: 8\n              }\n            }\n          }\n        }).should.equal(true);\n        model.match({\n          childrens: [{\n            name: \"Huey\",\n            age: 3\n          }, {\n            name: \"Dewey\",\n            age: 7\n          }, {\n            name: \"Louie\",\n            age: 12\n          }]\n        }, {\n          \"childrens\": {\n            $elemMatch: {\n              name: \"Dewey\",\n              age: {\n                $in: [6, 7, 8]\n              }\n            }\n          }\n        }).should.equal(true);\n        model.match({\n          childrens: [{\n            name: \"Huey\",\n            age: 3\n          }, {\n            name: \"Dewey\",\n            age: 7\n          }, {\n            name: \"Louie\",\n            age: 12\n          }]\n        }, {\n          \"childrens\": {\n            $elemMatch: {\n              name: \"Dewey\",\n              age: {\n                $gt: 6,\n                $lt: 7\n              }\n            }\n          }\n        }).should.equal(false);\n        model.match({\n          childrens: [{\n            name: \"Huey\",\n            age: 3\n          }, {\n            name: \"Dewey\",\n            age: 7\n          }, {\n            name: \"Louie\",\n            age: 12\n          }]\n        }, {\n          \"childrens\": {\n            $elemMatch: {\n              name: \"Louie\",\n              age: {\n                $gt: 6,\n                $lte: 7\n              }\n            }\n          }\n        }).should.equal(false);\n      });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Any of the subqueries should match for an $or to match","suites":["Model","Querying","Logical operators $or, $and, $not"],"updatePoint":{"line":3093,"column":64,"index":77461},"line":3093,"code":"      it('Any of the subqueries should match for an $or to match', function () {\n        model.match({\n          hello: 'world'\n        }, {\n          $or: [{\n            hello: 'pluton'\n          }, {\n            hello: 'world'\n          }]\n        }).should.equal(true);\n        model.match({\n          hello: 'pluton'\n        }, {\n          $or: [{\n            hello: 'pluton'\n          }, {\n            hello: 'world'\n          }]\n        }).should.equal(true);\n        model.match({\n          hello: 'nope'\n        }, {\n          $or: [{\n            hello: 'pluton'\n          }, {\n            hello: 'world'\n          }]\n        }).should.equal(false);\n        model.match({\n          hello: 'world',\n          age: 15\n        }, {\n          $or: [{\n            hello: 'pluton'\n          }, {\n            age: {\n              $lt: 20\n            }\n          }]\n        }).should.equal(true);\n        model.match({\n          hello: 'world',\n          age: 15\n        }, {\n          $or: [{\n            hello: 'pluton'\n          }, {\n            age: {\n              $lt: 10\n            }\n          }]\n        }).should.equal(false);\n      });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"All of the subqueries should match for an $and to match","suites":["Model","Querying","Logical operators $or, $and, $not"],"updatePoint":{"line":3146,"column":65,"index":78609},"line":3146,"code":"      it('All of the subqueries should match for an $and to match', function () {\n        model.match({\n          hello: 'world',\n          age: 15\n        }, {\n          $and: [{\n            age: 15\n          }, {\n            hello: 'world'\n          }]\n        }).should.equal(true);\n        model.match({\n          hello: 'world',\n          age: 15\n        }, {\n          $and: [{\n            age: 16\n          }, {\n            hello: 'world'\n          }]\n        }).should.equal(false);\n        model.match({\n          hello: 'world',\n          age: 15\n        }, {\n          $and: [{\n            hello: 'world'\n          }, {\n            age: {\n              $lt: 20\n            }\n          }]\n        }).should.equal(true);\n        model.match({\n          hello: 'world',\n          age: 15\n        }, {\n          $and: [{\n            hello: 'pluton'\n          }, {\n            age: {\n              $lt: 20\n            }\n          }]\n        }).should.equal(false);\n      });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Subquery should not match for a $not to match","suites":["Model","Querying","Logical operators $or, $and, $not"],"updatePoint":{"line":3192,"column":55,"index":79580},"line":3192,"code":"      it('Subquery should not match for a $not to match', function () {\n        model.match({\n          a: 5,\n          b: 10\n        }, {\n          a: 5\n        }).should.equal(true);\n        model.match({\n          a: 5,\n          b: 10\n        }, {\n          $not: {\n            a: 5\n          }\n        }).should.equal(false);\n      });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Logical operators are all top-level, only other logical operators can be above","suites":["Model","Querying","Logical operators $or, $and, $not"],"updatePoint":{"line":3208,"column":88,"index":79954},"line":3208,"code":"      it('Logical operators are all top-level, only other logical operators can be above', function () {\n        (function () {\n          model.match({\n            a: {\n              b: 7\n            }\n          }, {\n            a: {\n              $or: [{\n                b: 5\n              }, {\n                b: 7\n              }]\n            }\n          });\n        }).should.throw();\n        model.match({\n          a: {\n            b: 7\n          }\n        }, {\n          $or: [{\n            \"a.b\": 5\n          }, {\n            \"a.b\": 7\n          }]\n        }).should.equal(true);\n      });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Logical operators can be combined as long as they are on top of the decision tree","suites":["Model","Querying","Logical operators $or, $and, $not"],"updatePoint":{"line":3236,"column":91,"index":80554},"line":3236,"code":"      it('Logical operators can be combined as long as they are on top of the decision tree', function () {\n        model.match({\n          a: 5,\n          b: 7,\n          c: 12\n        }, {\n          $or: [{\n            $and: [{\n              a: 5\n            }, {\n              b: 8\n            }]\n          }, {\n            $and: [{\n              a: 5\n            }, {\n              c: {\n                $lt: 40\n              }\n            }]\n          }]\n        }).should.equal(true);\n        model.match({\n          a: 5,\n          b: 7,\n          c: 12\n        }, {\n          $or: [{\n            $and: [{\n              a: 5\n            }, {\n              b: 8\n            }]\n          }, {\n            $and: [{\n              a: 5\n            }, {\n              c: {\n                $lt: 10\n              }\n            }]\n          }]\n        }).should.equal(false);\n      });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Should throw an error if a logical operator is used without an array or if an unknown logical operator is used","suites":["Model","Querying","Logical operators $or, $and, $not"],"updatePoint":{"line":3280,"column":120,"index":81466},"line":3280,"code":"      it('Should throw an error if a logical operator is used without an array or if an unknown logical operator is used', function () {\n        (function () {\n          model.match({\n            a: 5\n          }, {\n            $or: {\n              a: 5,\n              a: 6\n            }\n          });\n        }).should.throw();\n        (function () {\n          model.match({\n            a: 5\n          }, {\n            $and: {\n              a: 5,\n              a: 6\n            }\n          });\n        }).should.throw();\n        (function () {\n          model.match({\n            a: 5\n          }, {\n            $unknown: [{\n              a: 5\n            }]\n          });\n        }).should.throw();\n      });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Function should match and not match correctly","suites":["Model","Querying","Comparison operator $where"],"updatePoint":{"line":3313,"column":55,"index":82177},"line":3313,"code":"      it('Function should match and not match correctly', function () {\n        model.match({\n          a: 4\n        }, {\n          $where: function () {\n            return this.a === 4;\n          }\n        }).should.equal(true);\n        model.match({\n          a: 4\n        }, {\n          $where: function () {\n            return this.a === 5;\n          }\n        }).should.equal(false);\n      });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Should throw an error if the $where function is not, in fact, a function","suites":["Model","Querying","Comparison operator $where"],"updatePoint":{"line":3329,"column":82,"index":82603},"line":3329,"code":"      it('Should throw an error if the $where function is not, in fact, a function', function () {\n        (function () {\n          model.match({\n            a: 4\n          }, {\n            $where: 'not a function'\n          });\n        }).should.throw();\n      });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Should throw an error if the $where function returns a non-boolean","suites":["Model","Querying","Comparison operator $where"],"updatePoint":{"line":3338,"column":76,"index":82863},"line":3338,"code":"      it('Should throw an error if the $where function returns a non-boolean', function () {\n        (function () {\n          model.match({\n            a: 4\n          }, {\n            $where: function () {\n              return 'not a boolean';\n            }\n          });\n        }).should.throw();\n      });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Should be able to do the complex matching it must be used for","suites":["Model","Querying","Comparison operator $where"],"updatePoint":{"line":3349,"column":71,"index":83167},"line":3349,"code":"      it('Should be able to do the complex matching it must be used for', function () {\n        var checkEmail = function () {\n          if (!this.firstName || !this.lastName) {\n            return false;\n          }\n          return this.firstName.toLowerCase() + \".\" + this.lastName.toLowerCase() + \"@gmail.com\" === this.email;\n        };\n        model.match({\n          firstName: \"John\",\n          lastName: \"Doe\",\n          email: \"john.doe@gmail.com\"\n        }, {\n          $where: checkEmail\n        }).should.equal(true);\n        model.match({\n          firstName: \"john\",\n          lastName: \"doe\",\n          email: \"john.doe@gmail.com\"\n        }, {\n          $where: checkEmail\n        }).should.equal(true);\n        model.match({\n          firstName: \"Jane\",\n          lastName: \"Doe\",\n          email: \"john.doe@gmail.com\"\n        }, {\n          $where: checkEmail\n        }).should.equal(false);\n        model.match({\n          firstName: \"John\",\n          lastName: \"Deere\",\n          email: \"john.doe@gmail.com\"\n        }, {\n          $where: checkEmail\n        }).should.equal(false);\n        model.match({\n          lastName: \"Doe\",\n          email: \"john.doe@gmail.com\"\n        }, {\n          $where: checkEmail\n        }).should.equal(false);\n      });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Field equality","suites":["Model","Querying","Array fields"],"updatePoint":{"line":3393,"column":24,"index":84442},"line":3393,"code":"      it('Field equality', function () {\n        model.match({\n          tags: ['node', 'js', 'db']\n        }, {\n          tags: 'python'\n        }).should.equal(false);\n        model.match({\n          tags: ['node', 'js', 'db']\n        }, {\n          tagss: 'js'\n        }).should.equal(false);\n        model.match({\n          tags: ['node', 'js', 'db']\n        }, {\n          tags: 'js'\n        }).should.equal(true);\n        model.match({\n          tags: ['node', 'js', 'db']\n        }, {\n          tags: 'js',\n          tags: 'node'\n        }).should.equal(true);\n\n        // Mixed matching with array and non array\n        model.match({\n          tags: ['node', 'js', 'db'],\n          nedb: true\n        }, {\n          tags: 'js',\n          nedb: true\n        }).should.equal(true);\n\n        // Nested matching\n        model.match({\n          number: 5,\n          data: {\n            tags: ['node', 'js', 'db']\n          }\n        }, {\n          \"data.tags\": 'js'\n        }).should.equal(true);\n        model.match({\n          number: 5,\n          data: {\n            tags: ['node', 'js', 'db']\n          }\n        }, {\n          \"data.tags\": 'j'\n        }).should.equal(false);\n      });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"With one comparison operator","suites":["Model","Querying","Array fields"],"updatePoint":{"line":3443,"column":38,"index":85650},"line":3443,"code":"      it('With one comparison operator', function () {\n        model.match({\n          ages: [3, 7, 12]\n        }, {\n          ages: {\n            $lt: 2\n          }\n        }).should.equal(false);\n        model.match({\n          ages: [3, 7, 12]\n        }, {\n          ages: {\n            $lt: 3\n          }\n        }).should.equal(false);\n        model.match({\n          ages: [3, 7, 12]\n        }, {\n          ages: {\n            $lt: 4\n          }\n        }).should.equal(true);\n        model.match({\n          ages: [3, 7, 12]\n        }, {\n          ages: {\n            $lt: 8\n          }\n        }).should.equal(true);\n        model.match({\n          ages: [3, 7, 12]\n        }, {\n          ages: {\n            $lt: 13\n          }\n        }).should.equal(true);\n      });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Works with arrays that are in subdocuments","suites":["Model","Querying","Array fields"],"updatePoint":{"line":3480,"column":52,"index":86442},"line":3480,"code":"      it('Works with arrays that are in subdocuments', function () {\n        model.match({\n          children: {\n            ages: [3, 7, 12]\n          }\n        }, {\n          \"children.ages\": {\n            $lt: 2\n          }\n        }).should.equal(false);\n        model.match({\n          children: {\n            ages: [3, 7, 12]\n          }\n        }, {\n          \"children.ages\": {\n            $lt: 3\n          }\n        }).should.equal(false);\n        model.match({\n          children: {\n            ages: [3, 7, 12]\n          }\n        }, {\n          \"children.ages\": {\n            $lt: 4\n          }\n        }).should.equal(true);\n        model.match({\n          children: {\n            ages: [3, 7, 12]\n          }\n        }, {\n          \"children.ages\": {\n            $lt: 8\n          }\n        }).should.equal(true);\n        model.match({\n          children: {\n            ages: [3, 7, 12]\n          }\n        }, {\n          \"children.ages\": {\n            $lt: 13\n          }\n        }).should.equal(true);\n      });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Can query inside arrays thanks to dot notation","suites":["Model","Querying","Array fields"],"updatePoint":{"line":3527,"column":56,"index":87473},"line":3527,"code":"      it('Can query inside arrays thanks to dot notation', function () {\n        model.match({\n          childrens: [{\n            name: \"Huey\",\n            age: 3\n          }, {\n            name: \"Dewey\",\n            age: 7\n          }, {\n            name: \"Louie\",\n            age: 12\n          }]\n        }, {\n          \"childrens.age\": {\n            $lt: 2\n          }\n        }).should.equal(false);\n        model.match({\n          childrens: [{\n            name: \"Huey\",\n            age: 3\n          }, {\n            name: \"Dewey\",\n            age: 7\n          }, {\n            name: \"Louie\",\n            age: 12\n          }]\n        }, {\n          \"childrens.age\": {\n            $lt: 3\n          }\n        }).should.equal(false);\n        model.match({\n          childrens: [{\n            name: \"Huey\",\n            age: 3\n          }, {\n            name: \"Dewey\",\n            age: 7\n          }, {\n            name: \"Louie\",\n            age: 12\n          }]\n        }, {\n          \"childrens.age\": {\n            $lt: 4\n          }\n        }).should.equal(true);\n        model.match({\n          childrens: [{\n            name: \"Huey\",\n            age: 3\n          }, {\n            name: \"Dewey\",\n            age: 7\n          }, {\n            name: \"Louie\",\n            age: 12\n          }]\n        }, {\n          \"childrens.age\": {\n            $lt: 8\n          }\n        }).should.equal(true);\n        model.match({\n          childrens: [{\n            name: \"Huey\",\n            age: 3\n          }, {\n            name: \"Dewey\",\n            age: 7\n          }, {\n            name: \"Louie\",\n            age: 12\n          }]\n        }, {\n          \"childrens.age\": {\n            $lt: 13\n          }\n        }).should.equal(true);\n        model.match({\n          childrens: [{\n            name: \"Huey\",\n            age: 3\n          }, {\n            name: \"Dewey\",\n            age: 7\n          }, {\n            name: \"Louie\",\n            age: 12\n          }]\n        }, {\n          \"childrens.name\": 'Louis'\n        }).should.equal(false);\n        model.match({\n          childrens: [{\n            name: \"Huey\",\n            age: 3\n          }, {\n            name: \"Dewey\",\n            age: 7\n          }, {\n            name: \"Louie\",\n            age: 12\n          }]\n        }, {\n          \"childrens.name\": 'Louie'\n        }).should.equal(true);\n        model.match({\n          childrens: [{\n            name: \"Huey\",\n            age: 3\n          }, {\n            name: \"Dewey\",\n            age: 7\n          }, {\n            name: \"Louie\",\n            age: 12\n          }]\n        }, {\n          \"childrens.name\": 'Lewi'\n        }).should.equal(false);\n      });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Can query for a specific element inside arrays thanks to dot notation","suites":["Model","Querying","Array fields"],"updatePoint":{"line":3651,"column":79,"index":90159},"line":3651,"code":"      it('Can query for a specific element inside arrays thanks to dot notation', function () {\n        model.match({\n          childrens: [{\n            name: \"Huey\",\n            age: 3\n          }, {\n            name: \"Dewey\",\n            age: 7\n          }, {\n            name: \"Louie\",\n            age: 12\n          }]\n        }, {\n          \"childrens.0.name\": 'Louie'\n        }).should.equal(false);\n        model.match({\n          childrens: [{\n            name: \"Huey\",\n            age: 3\n          }, {\n            name: \"Dewey\",\n            age: 7\n          }, {\n            name: \"Louie\",\n            age: 12\n          }]\n        }, {\n          \"childrens.1.name\": 'Louie'\n        }).should.equal(false);\n        model.match({\n          childrens: [{\n            name: \"Huey\",\n            age: 3\n          }, {\n            name: \"Dewey\",\n            age: 7\n          }, {\n            name: \"Louie\",\n            age: 12\n          }]\n        }, {\n          \"childrens.2.name\": 'Louie'\n        }).should.equal(true);\n        model.match({\n          childrens: [{\n            name: \"Huey\",\n            age: 3\n          }, {\n            name: \"Dewey\",\n            age: 7\n          }, {\n            name: \"Louie\",\n            age: 12\n          }]\n        }, {\n          \"childrens.3.name\": 'Louie'\n        }).should.equal(false);\n      });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"A single array-specific operator and the query is treated as array specific","suites":["Model","Querying","Array fields"],"updatePoint":{"line":3709,"column":85,"index":91510},"line":3709,"code":"      it('A single array-specific operator and the query is treated as array specific', function () {\n        (function () {\n          model.match({\n            childrens: ['Riri', 'Fifi', 'Loulou']\n          }, {\n            \"childrens\": {\n              \"Fifi\": true,\n              $size: 3\n            }\n          });\n        }).should.throw();\n      });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Can mix queries on array fields and non array filds with array specific operators","suites":["Model","Querying","Array fields"],"updatePoint":{"line":3721,"column":91,"index":91873},"line":3721,"code":"      it('Can mix queries on array fields and non array filds with array specific operators', function () {\n        model.match({\n          uncle: 'Donald',\n          nephews: ['Riri', 'Fifi', 'Loulou']\n        }, {\n          nephews: {\n            $size: 2\n          },\n          uncle: 'Donald'\n        }).should.equal(false);\n        model.match({\n          uncle: 'Donald',\n          nephews: ['Riri', 'Fifi', 'Loulou']\n        }, {\n          nephews: {\n            $size: 3\n          },\n          uncle: 'Donald'\n        }).should.equal(true);\n        model.match({\n          uncle: 'Donald',\n          nephews: ['Riri', 'Fifi', 'Loulou']\n        }, {\n          nephews: {\n            $size: 4\n          },\n          uncle: 'Donald'\n        }).should.equal(false);\n        model.match({\n          uncle: 'Donals',\n          nephews: ['Riri', 'Fifi', 'Loulou']\n        }, {\n          nephews: {\n            $size: 3\n          },\n          uncle: 'Picsou'\n        }).should.equal(false);\n        model.match({\n          uncle: 'Donald',\n          nephews: ['Riri', 'Fifi', 'Loulou']\n        }, {\n          nephews: {\n            $size: 3\n          },\n          uncle: 'Donald'\n        }).should.equal(true);\n        model.match({\n          uncle: 'Donald',\n          nephews: ['Riri', 'Fifi', 'Loulou']\n        }, {\n          nephews: {\n            $size: 3\n          },\n          uncle: 'Daisy'\n        }).should.equal(false);\n      });","file":"model.test.js","skipped":false,"dir":"test"},{"name":"Every line represents a document","suites":["Persistence"],"updatePoint":{"line":40,"column":38,"index":1199},"line":40,"code":"  it('Every line represents a document', function () {\n    var now = new Date(),\n      rawData = model.serialize({\n        _id: \"1\",\n        a: 2,\n        ages: [1, 5, 12]\n      }) + '\\n' + model.serialize({\n        _id: \"2\",\n        hello: 'world'\n      }) + '\\n' + model.serialize({\n        _id: \"3\",\n        nested: {\n          today: now\n        }\n      }),\n      treatedData = d.persistence.treatRawData(rawData).data;\n    treatedData.sort(function (a, b) {\n      return a._id - b._id;\n    });\n    treatedData.length.should.equal(3);\n    _.isEqual(treatedData[0], {\n      _id: \"1\",\n      a: 2,\n      ages: [1, 5, 12]\n    }).should.equal(true);\n    _.isEqual(treatedData[1], {\n      _id: \"2\",\n      hello: 'world'\n    }).should.equal(true);\n    _.isEqual(treatedData[2], {\n      _id: \"3\",\n      nested: {\n        today: now\n      }\n    }).should.equal(true);\n  });","file":"persistence.test.js","skipped":false,"dir":"test"},{"name":"Badly formatted lines have no impact on the treated data","suites":["Persistence"],"updatePoint":{"line":76,"column":62,"index":2092},"line":76,"code":"  it('Badly formatted lines have no impact on the treated data', function () {\n    var now = new Date(),\n      rawData = model.serialize({\n        _id: \"1\",\n        a: 2,\n        ages: [1, 5, 12]\n      }) + '\\n' + 'garbage\\n' + model.serialize({\n        _id: \"3\",\n        nested: {\n          today: now\n        }\n      }),\n      treatedData = d.persistence.treatRawData(rawData).data;\n    treatedData.sort(function (a, b) {\n      return a._id - b._id;\n    });\n    treatedData.length.should.equal(2);\n    _.isEqual(treatedData[0], {\n      _id: \"1\",\n      a: 2,\n      ages: [1, 5, 12]\n    }).should.equal(true);\n    _.isEqual(treatedData[1], {\n      _id: \"3\",\n      nested: {\n        today: now\n      }\n    }).should.equal(true);\n  });","file":"persistence.test.js","skipped":false,"dir":"test"},{"name":"Well formatted lines that have no _id are not included in the data","suites":["Persistence"],"updatePoint":{"line":105,"column":72,"index":2836},"line":105,"code":"  it('Well formatted lines that have no _id are not included in the data', function () {\n    var now = new Date(),\n      rawData = model.serialize({\n        _id: \"1\",\n        a: 2,\n        ages: [1, 5, 12]\n      }) + '\\n' + model.serialize({\n        _id: \"2\",\n        hello: 'world'\n      }) + '\\n' + model.serialize({\n        nested: {\n          today: now\n        }\n      }),\n      treatedData = d.persistence.treatRawData(rawData).data;\n    treatedData.sort(function (a, b) {\n      return a._id - b._id;\n    });\n    treatedData.length.should.equal(2);\n    _.isEqual(treatedData[0], {\n      _id: \"1\",\n      a: 2,\n      ages: [1, 5, 12]\n    }).should.equal(true);\n    _.isEqual(treatedData[1], {\n      _id: \"2\",\n      hello: 'world'\n    }).should.equal(true);\n  });","file":"persistence.test.js","skipped":false,"dir":"test"},{"name":"If two lines concern the same doc (= same _id), the last one is the good version","suites":["Persistence"],"updatePoint":{"line":134,"column":86,"index":3617},"line":134,"code":"  it('If two lines concern the same doc (= same _id), the last one is the good version', function () {\n    var now = new Date(),\n      rawData = model.serialize({\n        _id: \"1\",\n        a: 2,\n        ages: [1, 5, 12]\n      }) + '\\n' + model.serialize({\n        _id: \"2\",\n        hello: 'world'\n      }) + '\\n' + model.serialize({\n        _id: \"1\",\n        nested: {\n          today: now\n        }\n      }),\n      treatedData = d.persistence.treatRawData(rawData).data;\n    treatedData.sort(function (a, b) {\n      return a._id - b._id;\n    });\n    treatedData.length.should.equal(2);\n    _.isEqual(treatedData[0], {\n      _id: \"1\",\n      nested: {\n        today: now\n      }\n    }).should.equal(true);\n    _.isEqual(treatedData[1], {\n      _id: \"2\",\n      hello: 'world'\n    }).should.equal(true);\n  });","file":"persistence.test.js","skipped":false,"dir":"test"},{"name":"If a doc contains $$deleted: true, that means we need to remove it from the data","suites":["Persistence"],"updatePoint":{"line":165,"column":86,"index":4424},"line":165,"code":"  it('If a doc contains $$deleted: true, that means we need to remove it from the data', function () {\n    var now = new Date(),\n      rawData = model.serialize({\n        _id: \"1\",\n        a: 2,\n        ages: [1, 5, 12]\n      }) + '\\n' + model.serialize({\n        _id: \"2\",\n        hello: 'world'\n      }) + '\\n' + model.serialize({\n        _id: \"1\",\n        $$deleted: true\n      }) + '\\n' + model.serialize({\n        _id: \"3\",\n        today: now\n      }),\n      treatedData = d.persistence.treatRawData(rawData).data;\n    treatedData.sort(function (a, b) {\n      return a._id - b._id;\n    });\n    treatedData.length.should.equal(2);\n    _.isEqual(treatedData[0], {\n      _id: \"2\",\n      hello: 'world'\n    }).should.equal(true);\n    _.isEqual(treatedData[1], {\n      _id: \"3\",\n      today: now\n    }).should.equal(true);\n  });","file":"persistence.test.js","skipped":false,"dir":"test"},{"name":"If a doc contains $$deleted: true, no error is thrown if the doc wasnt in the list before","suites":["Persistence"],"updatePoint":{"line":195,"column":95,"index":5262},"line":195,"code":"  it('If a doc contains $$deleted: true, no error is thrown if the doc wasnt in the list before', function () {\n    var now = new Date(),\n      rawData = model.serialize({\n        _id: \"1\",\n        a: 2,\n        ages: [1, 5, 12]\n      }) + '\\n' + model.serialize({\n        _id: \"2\",\n        $$deleted: true\n      }) + '\\n' + model.serialize({\n        _id: \"3\",\n        today: now\n      }),\n      treatedData = d.persistence.treatRawData(rawData).data;\n    treatedData.sort(function (a, b) {\n      return a._id - b._id;\n    });\n    treatedData.length.should.equal(2);\n    _.isEqual(treatedData[0], {\n      _id: \"1\",\n      a: 2,\n      ages: [1, 5, 12]\n    }).should.equal(true);\n    _.isEqual(treatedData[1], {\n      _id: \"3\",\n      today: now\n    }).should.equal(true);\n  });","file":"persistence.test.js","skipped":false,"dir":"test"},{"name":"If a doc contains $$indexCreated, no error is thrown during treatRawData and we can get the index options","suites":["Persistence"],"updatePoint":{"line":223,"column":111,"index":6053},"line":223,"code":"  it('If a doc contains $$indexCreated, no error is thrown during treatRawData and we can get the index options', function () {\n    var now = new Date(),\n      rawData = model.serialize({\n        _id: \"1\",\n        a: 2,\n        ages: [1, 5, 12]\n      }) + '\\n' + model.serialize({\n        $$indexCreated: {\n          fieldName: \"test\",\n          unique: true\n        }\n      }) + '\\n' + model.serialize({\n        _id: \"3\",\n        today: now\n      }),\n      treatedData = d.persistence.treatRawData(rawData).data,\n      indexes = d.persistence.treatRawData(rawData).indexes;\n    Object.keys(indexes).length.should.equal(1);\n    assert.deepEqual(indexes.test, {\n      fieldName: \"test\",\n      unique: true\n    });\n    treatedData.sort(function (a, b) {\n      return a._id - b._id;\n    });\n    treatedData.length.should.equal(2);\n    _.isEqual(treatedData[0], {\n      _id: \"1\",\n      a: 2,\n      ages: [1, 5, 12]\n    }).should.equal(true);\n    _.isEqual(treatedData[1], {\n      _id: \"3\",\n      today: now\n    }).should.equal(true);\n  });","file":"persistence.test.js","skipped":false,"dir":"test"},{"name":"Compact database on load","suites":["Persistence"],"updatePoint":{"line":259,"column":30,"index":7008},"line":259,"code":"  it('Compact database on load', function (done) {\n    d.insert({\n      a: 2\n    }, function () {\n      d.insert({\n        a: 4\n      }, function () {\n        d.remove({\n          a: 2\n        }, {}, function () {\n          // Here, the underlying file is 3 lines long for only one document\n          var data = fs.readFileSync(d.filename, 'utf8').split('\\n'),\n            filledCount = 0;\n          data.forEach(function (item) {\n            if (item.length > 0) {\n              filledCount += 1;\n            }\n          });\n          filledCount.should.equal(3);\n          d.loadDatabase(function (err) {\n            assert.isNull(err);\n\n            // Now, the file has been compacted and is only 1 line long\n            var data = fs.readFileSync(d.filename, 'utf8').split('\\n'),\n              filledCount = 0;\n            data.forEach(function (item) {\n              if (item.length > 0) {\n                filledCount += 1;\n              }\n            });\n            filledCount.should.equal(1);\n            done();\n          });\n        });\n      });\n    });\n  });","file":"persistence.test.js","skipped":false,"dir":"test"},{"name":"Calling loadDatabase after the data was modified doesnt change its contents","suites":["Persistence"],"updatePoint":{"line":296,"column":81,"index":8131},"line":296,"code":"  it('Calling loadDatabase after the data was modified doesnt change its contents', function (done) {\n    d.loadDatabase(function () {\n      d.insert({\n        a: 1\n      }, function (err) {\n        assert.isNull(err);\n        d.insert({\n          a: 2\n        }, function (err) {\n          var data = d.getAllData(),\n            doc1 = _.find(data, function (doc) {\n              return doc.a === 1;\n            }),\n            doc2 = _.find(data, function (doc) {\n              return doc.a === 2;\n            });\n          assert.isNull(err);\n          data.length.should.equal(2);\n          doc1.a.should.equal(1);\n          doc2.a.should.equal(2);\n          d.loadDatabase(function (err) {\n            var data = d.getAllData(),\n              doc1 = _.find(data, function (doc) {\n                return doc.a === 1;\n              }),\n              doc2 = _.find(data, function (doc) {\n                return doc.a === 2;\n              });\n            assert.isNull(err);\n            data.length.should.equal(2);\n            doc1.a.should.equal(1);\n            doc2.a.should.equal(2);\n            done();\n          });\n        });\n      });\n    });\n  });","file":"persistence.test.js","skipped":false,"dir":"test"},{"name":"Calling loadDatabase after the datafile was removed will reset the database","suites":["Persistence"],"updatePoint":{"line":334,"column":81,"index":9290},"line":334,"code":"  it('Calling loadDatabase after the datafile was removed will reset the database', function (done) {\n    d.loadDatabase(function () {\n      d.insert({\n        a: 1\n      }, function (err) {\n        assert.isNull(err);\n        d.insert({\n          a: 2\n        }, function (err) {\n          var data = d.getAllData(),\n            doc1 = _.find(data, function (doc) {\n              return doc.a === 1;\n            }),\n            doc2 = _.find(data, function (doc) {\n              return doc.a === 2;\n            });\n          assert.isNull(err);\n          data.length.should.equal(2);\n          doc1.a.should.equal(1);\n          doc2.a.should.equal(2);\n          fs.unlink(testDb, function (err) {\n            assert.isNull(err);\n            d.loadDatabase(function (err) {\n              assert.isNull(err);\n              d.getAllData().length.should.equal(0);\n              done();\n            });\n          });\n        });\n      });\n    });\n  });","file":"persistence.test.js","skipped":false,"dir":"test"},{"name":"Calling loadDatabase after the datafile was modified loads the new data","suites":["Persistence"],"updatePoint":{"line":366,"column":77,"index":10235},"line":366,"code":"  it('Calling loadDatabase after the datafile was modified loads the new data', function (done) {\n    d.loadDatabase(function () {\n      d.insert({\n        a: 1\n      }, function (err) {\n        assert.isNull(err);\n        d.insert({\n          a: 2\n        }, function (err) {\n          var data = d.getAllData(),\n            doc1 = _.find(data, function (doc) {\n              return doc.a === 1;\n            }),\n            doc2 = _.find(data, function (doc) {\n              return doc.a === 2;\n            });\n          assert.isNull(err);\n          data.length.should.equal(2);\n          doc1.a.should.equal(1);\n          doc2.a.should.equal(2);\n          fs.writeFile(testDb, '{\"a\":3,\"_id\":\"aaa\"}', 'utf8', function (err) {\n            assert.isNull(err);\n            d.loadDatabase(function (err) {\n              var data = d.getAllData(),\n                doc1 = _.find(data, function (doc) {\n                  return doc.a === 1;\n                }),\n                doc2 = _.find(data, function (doc) {\n                  return doc.a === 2;\n                }),\n                doc3 = _.find(data, function (doc) {\n                  return doc.a === 3;\n                });\n              assert.isNull(err);\n              data.length.should.equal(1);\n              doc3.a.should.equal(3);\n              assert.isUndefined(doc1);\n              assert.isUndefined(doc2);\n              done();\n            });\n          });\n        });\n      });\n    });\n  });","file":"persistence.test.js","skipped":false,"dir":"test"},{"name":"When treating raw data, refuse to proceed if too much data is corrupt, to avoid data loss","suites":["Persistence"],"updatePoint":{"line":411,"column":95,"index":11714},"line":411,"code":"  it(\"When treating raw data, refuse to proceed if too much data is corrupt, to avoid data loss\", function (done) {\n    var corruptTestFilename = 'workspace/corruptTest.db',\n      fakeData = '{\"_id\":\"one\",\"hello\":\"world\"}\\n' + 'Some corrupt data\\n' + '{\"_id\":\"two\",\"hello\":\"earth\"}\\n' + '{\"_id\":\"three\",\"hello\":\"you\"}\\n',\n      d;\n    fs.writeFileSync(corruptTestFilename, fakeData, \"utf8\");\n\n    // Default corruptAlertThreshold\n    d = new Datastore({\n      filename: corruptTestFilename\n    });\n    d.loadDatabase(function (err) {\n      assert.isDefined(err);\n      assert.isNotNull(err);\n      fs.writeFileSync(corruptTestFilename, fakeData, \"utf8\");\n      d = new Datastore({\n        filename: corruptTestFilename,\n        corruptAlertThreshold: 1\n      });\n      d.loadDatabase(function (err) {\n        assert.isNull(err);\n        fs.writeFileSync(corruptTestFilename, fakeData, \"utf8\");\n        d = new Datastore({\n          filename: corruptTestFilename,\n          corruptAlertThreshold: 0\n        });\n        d.loadDatabase(function (err) {\n          assert.isDefined(err);\n          assert.isNotNull(err);\n          done();\n        });\n      });\n    });\n  });","file":"persistence.test.js","skipped":false,"dir":"test"},{"name":"Can listen to compaction events","suites":["Persistence"],"updatePoint":{"line":444,"column":37,"index":12826},"line":444,"code":"  it(\"Can listen to compaction events\", function (done) {\n    d.on('compaction.done', function () {\n      d.removeAllListeners('compaction.done'); // Tidy up for next tests\n      done();\n    });\n    d.persistence.compactDatafile();\n  });","file":"persistence.test.js","skipped":false,"dir":"test"},{"name":"Declaring only one hook will throw an exception to prevent data loss","suites":["Persistence","Serialization hooks"],"updatePoint":{"line":458,"column":76,"index":13309},"line":458,"code":"    it(\"Declaring only one hook will throw an exception to prevent data loss\", function (done) {\n      var hookTestFilename = 'workspace/hookTest.db';\n      storage.ensureFileDoesntExist(hookTestFilename, function () {\n        fs.writeFileSync(hookTestFilename, \"Some content\", \"utf8\");\n        (function () {\n          new Datastore({\n            filename: hookTestFilename,\n            autoload: true,\n            afterSerialization: as\n          });\n        }).should.throw();\n\n        // Data file left untouched\n        fs.readFileSync(hookTestFilename, \"utf8\").should.equal(\"Some content\");\n        (function () {\n          new Datastore({\n            filename: hookTestFilename,\n            autoload: true,\n            beforeDeserialization: bd\n          });\n        }).should.throw();\n\n        // Data file left untouched\n        fs.readFileSync(hookTestFilename, \"utf8\").should.equal(\"Some content\");\n        done();\n      });\n    });","file":"persistence.test.js","skipped":false,"dir":"test"},{"name":"Declaring two hooks that are not reverse of one another will cause an exception to prevent data loss","suites":["Persistence","Serialization hooks"],"updatePoint":{"line":485,"column":108,"index":14285},"line":485,"code":"    it(\"Declaring two hooks that are not reverse of one another will cause an exception to prevent data loss\", function (done) {\n      var hookTestFilename = 'workspace/hookTest.db';\n      storage.ensureFileDoesntExist(hookTestFilename, function () {\n        fs.writeFileSync(hookTestFilename, \"Some content\", \"utf8\");\n        (function () {\n          new Datastore({\n            filename: hookTestFilename,\n            autoload: true,\n            afterSerialization: as,\n            beforeDeserialization: function (s) {\n              return s;\n            }\n          });\n        }).should.throw();\n\n        // Data file left untouched\n        fs.readFileSync(hookTestFilename, \"utf8\").should.equal(\"Some content\");\n        done();\n      });\n    });","file":"persistence.test.js","skipped":false,"dir":"test"},{"name":"A serialization hook can be used to transform data before writing new state to disk","suites":["Persistence","Serialization hooks"],"updatePoint":{"line":505,"column":91,"index":15020},"line":505,"code":"    it(\"A serialization hook can be used to transform data before writing new state to disk\", function (done) {\n      var hookTestFilename = 'workspace/hookTest.db';\n      storage.ensureFileDoesntExist(hookTestFilename, function () {\n        var d = new Datastore({\n          filename: hookTestFilename,\n          autoload: true,\n          afterSerialization: as,\n          beforeDeserialization: bd\n        });\n        d.insert({\n          hello: \"world\"\n        }, function () {\n          var _data = fs.readFileSync(hookTestFilename, 'utf8'),\n            data = _data.split('\\n'),\n            doc0 = bd(data[0]);\n          data.length.should.equal(2);\n          data[0].substring(0, 7).should.equal('before_');\n          data[0].substring(data[0].length - 6).should.equal('_after');\n          doc0 = model.deserialize(doc0);\n          Object.keys(doc0).length.should.equal(2);\n          doc0.hello.should.equal('world');\n          d.insert({\n            p: 'Mars'\n          }, function () {\n            var _data = fs.readFileSync(hookTestFilename, 'utf8'),\n              data = _data.split('\\n'),\n              doc0 = bd(data[0]),\n              doc1 = bd(data[1]);\n            data.length.should.equal(3);\n            data[0].substring(0, 7).should.equal('before_');\n            data[0].substring(data[0].length - 6).should.equal('_after');\n            data[1].substring(0, 7).should.equal('before_');\n            data[1].substring(data[1].length - 6).should.equal('_after');\n            doc0 = model.deserialize(doc0);\n            Object.keys(doc0).length.should.equal(2);\n            doc0.hello.should.equal('world');\n            doc1 = model.deserialize(doc1);\n            Object.keys(doc1).length.should.equal(2);\n            doc1.p.should.equal('Mars');\n            d.ensureIndex({\n              fieldName: 'idefix'\n            }, function () {\n              var _data = fs.readFileSync(hookTestFilename, 'utf8'),\n                data = _data.split('\\n'),\n                doc0 = bd(data[0]),\n                doc1 = bd(data[1]),\n                idx = bd(data[2]);\n              data.length.should.equal(4);\n              data[0].substring(0, 7).should.equal('before_');\n              data[0].substring(data[0].length - 6).should.equal('_after');\n              data[1].substring(0, 7).should.equal('before_');\n              data[1].substring(data[1].length - 6).should.equal('_after');\n              doc0 = model.deserialize(doc0);\n              Object.keys(doc0).length.should.equal(2);\n              doc0.hello.should.equal('world');\n              doc1 = model.deserialize(doc1);\n              Object.keys(doc1).length.should.equal(2);\n              doc1.p.should.equal('Mars');\n              idx = model.deserialize(idx);\n              assert.deepEqual(idx, {\n                '$$indexCreated': {\n                  fieldName: 'idefix'\n                }\n              });\n              done();\n            });\n          });\n        });\n      });\n    });","file":"persistence.test.js","skipped":false,"dir":"test"},{"name":"Use serialization hook when persisting cached database or compacting","suites":["Persistence","Serialization hooks"],"updatePoint":{"line":575,"column":76,"index":17967},"line":575,"code":"    it(\"Use serialization hook when persisting cached database or compacting\", function (done) {\n      var hookTestFilename = 'workspace/hookTest.db';\n      storage.ensureFileDoesntExist(hookTestFilename, function () {\n        var d = new Datastore({\n          filename: hookTestFilename,\n          autoload: true,\n          afterSerialization: as,\n          beforeDeserialization: bd\n        });\n        d.insert({\n          hello: \"world\"\n        }, function () {\n          d.update({\n            hello: \"world\"\n          }, {\n            $set: {\n              hello: \"earth\"\n            }\n          }, {}, function () {\n            d.ensureIndex({\n              fieldName: 'idefix'\n            }, function () {\n              var _data = fs.readFileSync(hookTestFilename, 'utf8'),\n                data = _data.split('\\n'),\n                doc0 = bd(data[0]),\n                doc1 = bd(data[1]),\n                idx = bd(data[2]),\n                _id;\n              data.length.should.equal(4);\n              doc0 = model.deserialize(doc0);\n              Object.keys(doc0).length.should.equal(2);\n              doc0.hello.should.equal('world');\n              doc1 = model.deserialize(doc1);\n              Object.keys(doc1).length.should.equal(2);\n              doc1.hello.should.equal('earth');\n              doc0._id.should.equal(doc1._id);\n              _id = doc0._id;\n              idx = model.deserialize(idx);\n              assert.deepEqual(idx, {\n                '$$indexCreated': {\n                  fieldName: 'idefix'\n                }\n              });\n              d.persistence.persistCachedDatabase(function () {\n                var _data = fs.readFileSync(hookTestFilename, 'utf8'),\n                  data = _data.split('\\n'),\n                  doc0 = bd(data[0]),\n                  idx = bd(data[1]);\n                data.length.should.equal(3);\n                doc0 = model.deserialize(doc0);\n                Object.keys(doc0).length.should.equal(2);\n                doc0.hello.should.equal('earth');\n                doc0._id.should.equal(_id);\n                idx = model.deserialize(idx);\n                assert.deepEqual(idx, {\n                  '$$indexCreated': {\n                    fieldName: 'idefix',\n                    unique: false,\n                    sparse: false\n                  }\n                });\n                done();\n              });\n            });\n          });\n        });\n      });\n    });","file":"persistence.test.js","skipped":false,"dir":"test"},{"name":"Deserialization hook is correctly used when loading data","suites":["Persistence","Serialization hooks"],"updatePoint":{"line":643,"column":64,"index":20395},"line":643,"code":"    it(\"Deserialization hook is correctly used when loading data\", function (done) {\n      var hookTestFilename = 'workspace/hookTest.db';\n      storage.ensureFileDoesntExist(hookTestFilename, function () {\n        var d = new Datastore({\n          filename: hookTestFilename,\n          autoload: true,\n          afterSerialization: as,\n          beforeDeserialization: bd\n        });\n        d.insert({\n          hello: \"world\"\n        }, function (err, doc) {\n          var _id = doc._id;\n          d.insert({\n            yo: \"ya\"\n          }, function () {\n            d.update({\n              hello: \"world\"\n            }, {\n              $set: {\n                hello: \"earth\"\n              }\n            }, {}, function () {\n              d.remove({\n                yo: \"ya\"\n              }, {}, function () {\n                d.ensureIndex({\n                  fieldName: 'idefix'\n                }, function () {\n                  var _data = fs.readFileSync(hookTestFilename, 'utf8'),\n                    data = _data.split('\\n');\n                  data.length.should.equal(6);\n\n                  // Everything is deserialized correctly, including deletes and indexes\n                  var d = new Datastore({\n                    filename: hookTestFilename,\n                    afterSerialization: as,\n                    beforeDeserialization: bd\n                  });\n                  d.loadDatabase(function () {\n                    d.find({}, function (err, docs) {\n                      docs.length.should.equal(1);\n                      docs[0].hello.should.equal(\"earth\");\n                      docs[0]._id.should.equal(_id);\n                      Object.keys(d.indexes).length.should.equal(2);\n                      Object.keys(d.indexes).indexOf(\"idefix\").should.not.equal(-1);\n                      done();\n                    });\n                  });\n                });\n              });\n            });\n          });\n        });\n      });\n    });","file":"persistence.test.js","skipped":false,"dir":"test"},{"name":"Creating a datastore with in memory as true and a bad filename wont cause an error","suites":["Persistence","Prevent dataloss when persisting data"],"updatePoint":{"line":702,"column":90,"index":22508},"line":702,"code":"    it('Creating a datastore with in memory as true and a bad filename wont cause an error', function () {\n      new Datastore({\n        filename: 'workspace/bad.db~',\n        inMemoryOnly: true\n      });\n    });","file":"persistence.test.js","skipped":false,"dir":"test"},{"name":"Creating a persistent datastore with a bad filename will cause an error","suites":["Persistence","Prevent dataloss when persisting data"],"updatePoint":{"line":708,"column":79,"index":22710},"line":708,"code":"    it('Creating a persistent datastore with a bad filename will cause an error', function () {\n      (function () {\n        new Datastore({\n          filename: 'workspace/bad.db~'\n        });\n      }).should.throw();\n    });","file":"persistence.test.js","skipped":false,"dir":"test"},{"name":"If no file exists, ensureDatafileIntegrity creates an empty datafile","suites":["Persistence","Prevent dataloss when persisting data"],"updatePoint":{"line":715,"column":76,"index":22933},"line":715,"code":"    it('If no file exists, ensureDatafileIntegrity creates an empty datafile', function (done) {\n      var p = new Persistence({\n        db: {\n          inMemoryOnly: false,\n          filename: 'workspace/it.db'\n        }\n      });\n      if (fs.existsSync('workspace/it.db')) {\n        fs.unlinkSync('workspace/it.db');\n      }\n      if (fs.existsSync('workspace/it.db~')) {\n        fs.unlinkSync('workspace/it.db~');\n      }\n      fs.existsSync('workspace/it.db').should.equal(false);\n      fs.existsSync('workspace/it.db~').should.equal(false);\n      storage.ensureDatafileIntegrity(p.filename, function (err) {\n        assert.isNull(err);\n        fs.existsSync('workspace/it.db').should.equal(true);\n        fs.existsSync('workspace/it.db~').should.equal(false);\n        fs.readFileSync('workspace/it.db', 'utf8').should.equal('');\n        done();\n      });\n    });","file":"persistence.test.js","skipped":false,"dir":"test"},{"name":"If only datafile exists, ensureDatafileIntegrity will use it","suites":["Persistence","Prevent dataloss when persisting data"],"updatePoint":{"line":738,"column":68,"index":23794},"line":738,"code":"    it('If only datafile exists, ensureDatafileIntegrity will use it', function (done) {\n      var p = new Persistence({\n        db: {\n          inMemoryOnly: false,\n          filename: 'workspace/it.db'\n        }\n      });\n      if (fs.existsSync('workspace/it.db')) {\n        fs.unlinkSync('workspace/it.db');\n      }\n      if (fs.existsSync('workspace/it.db~')) {\n        fs.unlinkSync('workspace/it.db~');\n      }\n      fs.writeFileSync('workspace/it.db', 'something', 'utf8');\n      fs.existsSync('workspace/it.db').should.equal(true);\n      fs.existsSync('workspace/it.db~').should.equal(false);\n      storage.ensureDatafileIntegrity(p.filename, function (err) {\n        assert.isNull(err);\n        fs.existsSync('workspace/it.db').should.equal(true);\n        fs.existsSync('workspace/it.db~').should.equal(false);\n        fs.readFileSync('workspace/it.db', 'utf8').should.equal('something');\n        done();\n      });\n    });","file":"persistence.test.js","skipped":false,"dir":"test"},{"name":"If temp datafile exists and datafile doesnt, ensureDatafileIntegrity will use it (cannot happen except upon first use)","suites":["Persistence","Prevent dataloss when persisting data"],"updatePoint":{"line":762,"column":126,"index":24785},"line":762,"code":"    it('If temp datafile exists and datafile doesnt, ensureDatafileIntegrity will use it (cannot happen except upon first use)', function (done) {\n      var p = new Persistence({\n        db: {\n          inMemoryOnly: false,\n          filename: 'workspace/it.db'\n        }\n      });\n      if (fs.existsSync('workspace/it.db')) {\n        fs.unlinkSync('workspace/it.db');\n      }\n      if (fs.existsSync('workspace/it.db~')) {\n        fs.unlinkSync('workspace/it.db~~');\n      }\n      fs.writeFileSync('workspace/it.db~', 'something', 'utf8');\n      fs.existsSync('workspace/it.db').should.equal(false);\n      fs.existsSync('workspace/it.db~').should.equal(true);\n      storage.ensureDatafileIntegrity(p.filename, function (err) {\n        assert.isNull(err);\n        fs.existsSync('workspace/it.db').should.equal(true);\n        fs.existsSync('workspace/it.db~').should.equal(false);\n        fs.readFileSync('workspace/it.db', 'utf8').should.equal('something');\n        done();\n      });\n    });","file":"persistence.test.js","skipped":false,"dir":"test"},{"name":"If both temp and current datafiles exist, ensureDatafileIntegrity will use the datafile, as it means that the write of the temp file failed","suites":["Persistence","Prevent dataloss when persisting data"],"updatePoint":{"line":788,"column":147,"index":26001},"line":788,"code":"    it('If both temp and current datafiles exist, ensureDatafileIntegrity will use the datafile, as it means that the write of the temp file failed', function (done) {\n      var theDb = new Datastore({\n        filename: 'workspace/it.db'\n      });\n      if (fs.existsSync('workspace/it.db')) {\n        fs.unlinkSync('workspace/it.db');\n      }\n      if (fs.existsSync('workspace/it.db~')) {\n        fs.unlinkSync('workspace/it.db~');\n      }\n      fs.writeFileSync('workspace/it.db', '{\"_id\":\"0\",\"hello\":\"world\"}', 'utf8');\n      fs.writeFileSync('workspace/it.db~', '{\"_id\":\"0\",\"hello\":\"other\"}', 'utf8');\n      fs.existsSync('workspace/it.db').should.equal(true);\n      fs.existsSync('workspace/it.db~').should.equal(true);\n      storage.ensureDatafileIntegrity(theDb.persistence.filename, function (err) {\n        assert.isNull(err);\n        fs.existsSync('workspace/it.db').should.equal(true);\n        fs.existsSync('workspace/it.db~').should.equal(true);\n        fs.readFileSync('workspace/it.db', 'utf8').should.equal('{\"_id\":\"0\",\"hello\":\"world\"}');\n        theDb.loadDatabase(function (err) {\n          assert.isNull(err);\n          theDb.find({}, function (err, docs) {\n            assert.isNull(err);\n            docs.length.should.equal(1);\n            docs[0].hello.should.equal(\"world\");\n            fs.existsSync('workspace/it.db').should.equal(true);\n            fs.existsSync('workspace/it.db~').should.equal(false);\n            done();\n          });\n        });\n      });\n    });","file":"persistence.test.js","skipped":false,"dir":"test"},{"name":"persistCachedDatabase should update the contents of the datafile and leave a clean state","suites":["Persistence","Prevent dataloss when persisting data"],"updatePoint":{"line":820,"column":96,"index":27446},"line":820,"code":"    it('persistCachedDatabase should update the contents of the datafile and leave a clean state', function (done) {\n      d.insert({\n        hello: 'world'\n      }, function () {\n        d.find({}, function (err, docs) {\n          docs.length.should.equal(1);\n          if (fs.existsSync(testDb)) {\n            fs.unlinkSync(testDb);\n          }\n          if (fs.existsSync(testDb + '~')) {\n            fs.unlinkSync(testDb + '~');\n          }\n          fs.existsSync(testDb).should.equal(false);\n          fs.writeFileSync(testDb + '~', 'something', 'utf8');\n          fs.existsSync(testDb + '~').should.equal(true);\n          d.persistence.persistCachedDatabase(function (err) {\n            var contents = fs.readFileSync(testDb, 'utf8');\n            assert.isNull(err);\n            fs.existsSync(testDb).should.equal(true);\n            fs.existsSync(testDb + '~').should.equal(false);\n            if (!contents.match(/^{\"hello\":\"world\",\"_id\":\"[0-9a-zA-Z]{16}\"}\\n$/)) {\n              throw new Error(\"Datafile contents not as expected\");\n            }\n            done();\n          });\n        });\n      });\n    });","file":"persistence.test.js","skipped":false,"dir":"test"},{"name":"After a persistCachedDatabase, there should be no temp or old filename","suites":["Persistence","Prevent dataloss when persisting data"],"updatePoint":{"line":848,"column":78,"index":28547},"line":848,"code":"    it('After a persistCachedDatabase, there should be no temp or old filename', function (done) {\n      d.insert({\n        hello: 'world'\n      }, function () {\n        d.find({}, function (err, docs) {\n          docs.length.should.equal(1);\n          if (fs.existsSync(testDb)) {\n            fs.unlinkSync(testDb);\n          }\n          if (fs.existsSync(testDb + '~')) {\n            fs.unlinkSync(testDb + '~');\n          }\n          fs.existsSync(testDb).should.equal(false);\n          fs.existsSync(testDb + '~').should.equal(false);\n          fs.writeFileSync(testDb + '~', 'bloup', 'utf8');\n          fs.existsSync(testDb + '~').should.equal(true);\n          d.persistence.persistCachedDatabase(function (err) {\n            var contents = fs.readFileSync(testDb, 'utf8');\n            assert.isNull(err);\n            fs.existsSync(testDb).should.equal(true);\n            fs.existsSync(testDb + '~').should.equal(false);\n            if (!contents.match(/^{\"hello\":\"world\",\"_id\":\"[0-9a-zA-Z]{16}\"}\\n$/)) {\n              throw new Error(\"Datafile contents not as expected\");\n            }\n            done();\n          });\n        });\n      });\n    });","file":"persistence.test.js","skipped":false,"dir":"test"},{"name":"persistCachedDatabase should update the contents of the datafile and leave a clean state even if there is a temp datafile","suites":["Persistence","Prevent dataloss when persisting data"],"updatePoint":{"line":877,"column":129,"index":29754},"line":877,"code":"    it('persistCachedDatabase should update the contents of the datafile and leave a clean state even if there is a temp datafile', function (done) {\n      d.insert({\n        hello: 'world'\n      }, function () {\n        d.find({}, function (err, docs) {\n          docs.length.should.equal(1);\n          if (fs.existsSync(testDb)) {\n            fs.unlinkSync(testDb);\n          }\n          fs.writeFileSync(testDb + '~', 'blabla', 'utf8');\n          fs.existsSync(testDb).should.equal(false);\n          fs.existsSync(testDb + '~').should.equal(true);\n          d.persistence.persistCachedDatabase(function (err) {\n            var contents = fs.readFileSync(testDb, 'utf8');\n            assert.isNull(err);\n            fs.existsSync(testDb).should.equal(true);\n            fs.existsSync(testDb + '~').should.equal(false);\n            if (!contents.match(/^{\"hello\":\"world\",\"_id\":\"[0-9a-zA-Z]{16}\"}\\n$/)) {\n              throw new Error(\"Datafile contents not as expected\");\n            }\n            done();\n          });\n        });\n      });\n    });","file":"persistence.test.js","skipped":false,"dir":"test"},{"name":"persistCachedDatabase should update the contents of the datafile and leave a clean state even if there is a temp datafile","suites":["Persistence","Prevent dataloss when persisting data"],"updatePoint":{"line":902,"column":129,"index":30805},"line":902,"code":"    it('persistCachedDatabase should update the contents of the datafile and leave a clean state even if there is a temp datafile', function (done) {\n      var dbFile = 'workspace/test2.db',\n        theDb;\n      if (fs.existsSync(dbFile)) {\n        fs.unlinkSync(dbFile);\n      }\n      if (fs.existsSync(dbFile + '~')) {\n        fs.unlinkSync(dbFile + '~');\n      }\n      theDb = new Datastore({\n        filename: dbFile\n      });\n      theDb.loadDatabase(function (err) {\n        var contents = fs.readFileSync(dbFile, 'utf8');\n        assert.isNull(err);\n        fs.existsSync(dbFile).should.equal(true);\n        fs.existsSync(dbFile + '~').should.equal(false);\n        if (contents != \"\") {\n          throw new Error(\"Datafile contents not as expected\");\n        }\n        done();\n      });\n    });","file":"persistence.test.js","skipped":false,"dir":"test"},{"name":"Persistence works as expected when everything goes fine","suites":["Persistence","Prevent dataloss when persisting data"],"updatePoint":{"line":925,"column":63,"index":31541},"line":925,"code":"    it('Persistence works as expected when everything goes fine', function (done) {\n      var dbFile = 'workspace/test2.db',\n        theDb,\n        theDb2,\n        doc1,\n        doc2;\n      async.waterfall([async.apply(storage.ensureFileDoesntExist, dbFile), async.apply(storage.ensureFileDoesntExist, dbFile + '~'), function (cb) {\n        theDb = new Datastore({\n          filename: dbFile\n        });\n        theDb.loadDatabase(cb);\n      }, function (cb) {\n        theDb.find({}, function (err, docs) {\n          assert.isNull(err);\n          docs.length.should.equal(0);\n          return cb();\n        });\n      }, function (cb) {\n        theDb.insert({\n          a: 'hello'\n        }, function (err, _doc1) {\n          assert.isNull(err);\n          doc1 = _doc1;\n          theDb.insert({\n            a: 'world'\n          }, function (err, _doc2) {\n            assert.isNull(err);\n            doc2 = _doc2;\n            return cb();\n          });\n        });\n      }, function (cb) {\n        theDb.find({}, function (err, docs) {\n          assert.isNull(err);\n          docs.length.should.equal(2);\n          _.find(docs, function (item) {\n            return item._id === doc1._id;\n          }).a.should.equal('hello');\n          _.find(docs, function (item) {\n            return item._id === doc2._id;\n          }).a.should.equal('world');\n          return cb();\n        });\n      }, function (cb) {\n        theDb.loadDatabase(cb);\n      }, function (cb) {\n        // No change\n        theDb.find({}, function (err, docs) {\n          assert.isNull(err);\n          docs.length.should.equal(2);\n          _.find(docs, function (item) {\n            return item._id === doc1._id;\n          }).a.should.equal('hello');\n          _.find(docs, function (item) {\n            return item._id === doc2._id;\n          }).a.should.equal('world');\n          return cb();\n        });\n      }, function (cb) {\n        fs.existsSync(dbFile).should.equal(true);\n        fs.existsSync(dbFile + '~').should.equal(false);\n        return cb();\n      }, function (cb) {\n        theDb2 = new Datastore({\n          filename: dbFile\n        });\n        theDb2.loadDatabase(cb);\n      }, function (cb) {\n        // No change in second db\n        theDb2.find({}, function (err, docs) {\n          assert.isNull(err);\n          docs.length.should.equal(2);\n          _.find(docs, function (item) {\n            return item._id === doc1._id;\n          }).a.should.equal('hello');\n          _.find(docs, function (item) {\n            return item._id === doc2._id;\n          }).a.should.equal('world');\n          return cb();\n        });\n      }, function (cb) {\n        fs.existsSync(dbFile).should.equal(true);\n        fs.existsSync(dbFile + '~').should.equal(false);\n        return cb();\n      }], done);\n    });","file":"persistence.test.js","skipped":false,"dir":"test"},{"name":"If system crashes during a loadDatabase, the former version is not lost","suites":["Persistence","Prevent dataloss when persisting data"],"updatePoint":{"line":1014,"column":79,"index":34557},"line":1014,"code":"    it('If system crashes during a loadDatabase, the former version is not lost', function (done) {\n      var N = 500,\n        toWrite = \"\",\n        i,\n        doc_i;\n\n      // Ensuring the state is clean\n      if (fs.existsSync('workspace/lac.db')) {\n        fs.unlinkSync('workspace/lac.db');\n      }\n      if (fs.existsSync('workspace/lac.db~')) {\n        fs.unlinkSync('workspace/lac.db~');\n      }\n\n      // Creating a db file with 150k records (a bit long to load)\n      for (i = 0; i < N; i += 1) {\n        toWrite += model.serialize({\n          _id: 'anid_' + i,\n          hello: 'world'\n        }) + '\\n';\n      }\n      fs.writeFileSync('workspace/lac.db', toWrite, 'utf8');\n      var datafileLength = fs.readFileSync('workspace/lac.db', 'utf8').length;\n\n      // Loading it in a separate process that we will crash before finishing the loadDatabase\n      child_process.fork('test_lac/loadAndCrash.test').on('exit', function (code) {\n        code.should.equal(1); // See test_lac/loadAndCrash.test.js\n\n        fs.existsSync('workspace/lac.db').should.equal(true);\n        fs.existsSync('workspace/lac.db~').should.equal(true);\n        fs.readFileSync('workspace/lac.db', 'utf8').length.should.equal(datafileLength);\n        fs.readFileSync('workspace/lac.db~', 'utf8').length.should.equal(5000);\n\n        // Reload database without a crash, check that no data was lost and fs state is clean (no temp file)\n        var db = new Datastore({\n          filename: 'workspace/lac.db'\n        });\n        db.loadDatabase(function (err) {\n          assert.isNull(err);\n          fs.existsSync('workspace/lac.db').should.equal(true);\n          fs.existsSync('workspace/lac.db~').should.equal(false);\n          fs.readFileSync('workspace/lac.db', 'utf8').length.should.equal(datafileLength);\n          db.find({}, function (err, docs) {\n            docs.length.should.equal(N);\n            for (i = 0; i < N; i += 1) {\n              doc_i = _.find(docs, function (d) {\n                return d._id === 'anid_' + i;\n              });\n              assert.isDefined(doc_i);\n              assert.deepEqual({\n                hello: 'world',\n                _id: 'anid_' + i\n              }, doc_i);\n            }\n            return done();\n          });\n        });\n      });\n    });","file":"persistence.test.js","skipped":false,"dir":"test"},{"name":"Cannot cause EMFILE errors by opening too many file descriptors","suites":["Persistence","Prevent dataloss when persisting data"],"updatePoint":{"line":1075,"column":71,"index":36956},"line":1075,"code":"    it(\"Cannot cause EMFILE errors by opening too many file descriptors\", function (done) {\n      if (process.platform === 'win32' || process.platform === 'win64') {\n        return done();\n      }\n      child_process.execFile('test_lac/openFdsLaunch.sh', function (err, stdout, stderr) {\n        if (err) {\n          return done(err);\n        }\n\n        // The subprocess will not output anything to stdout unless part of the test fails\n        if (stdout.length !== 0) {\n          return done(stdout);\n        } else {\n          return done();\n        }\n      });\n    });","file":"persistence.test.js","skipped":false,"dir":"test"},{"name":"Doesnt do anything if file already doesnt exist","suites":["Persistence","ensureFileDoesntExist"],"updatePoint":{"line":1095,"column":55,"index":37630},"line":1095,"code":"    it('Doesnt do anything if file already doesnt exist', function (done) {\n      storage.ensureFileDoesntExist('workspace/nonexisting', function (err) {\n        assert.isNull(err);\n        fs.existsSync('workspace/nonexisting').should.equal(false);\n        done();\n      });\n    });","file":"persistence.test.js","skipped":false,"dir":"test"},{"name":"Deletes file if it exists","suites":["Persistence","ensureFileDoesntExist"],"updatePoint":{"line":1102,"column":33,"index":37892},"line":1102,"code":"    it('Deletes file if it exists', function (done) {\n      fs.writeFileSync('workspace/existing', 'hello world', 'utf8');\n      fs.existsSync('workspace/existing').should.equal(true);\n      storage.ensureFileDoesntExist('workspace/existing', function (err) {\n        assert.isNull(err);\n        fs.existsSync('workspace/existing').should.equal(false);\n        done();\n      });\n    });","file":"persistence.test.js","skipped":false,"dir":"test"}]}