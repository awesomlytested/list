{"repo":"faisalman/ua-parser-js","url":"https://github.com/faisalman/ua-parser-js","branch":"master","configs":[{"package":"ua-parser-js","lang":"js","dir":"test","framework":"mocha","pattern":"**/*.{js,ts}"}],"tests":[{"name":"getResult() should returns JSON","suites":["Returns"],"updatePoint":{"line":70,"column":37,"index":2420},"line":70,"code":"  it('getResult() should returns JSON', function (done) {\n    assert.deepEqual(new UAParser('').getResult(), {\n      ua: '',\n      browser: {\n        name: undefined,\n        version: undefined,\n        major: undefined\n      },\n      cpu: {\n        architecture: undefined\n      },\n      device: {\n        vendor: undefined,\n        model: undefined,\n        type: undefined\n      },\n      engine: {\n        name: undefined,\n        version: undefined\n      },\n      os: {\n        name: undefined,\n        version: undefined\n      }\n    });\n    done();\n  });","file":"test.js","skipped":false,"dir":"test"},{"name":"should loaded automatically","suites":["Using Require.js"],"updatePoint":{"line":148,"column":33,"index":13111},"line":148,"code":"  it('should loaded automatically', function (done) {\n    requirejs.config({\n      baseUrl: 'dist',\n      paths: {\n        'ua-parser-js': 'ua-parser.min'\n      }\n    });\n    requirejs(['ua-parser-js'], function (ua) {\n      var parser = new ua('Dillo/1.0');\n      assert.deepStrictEqual(parser.getBrowser().name, 'Dillo');\n      done();\n    });\n  });","file":"test.js","skipped":false,"dir":"test"},{"name":"all regexes in main file","suites":["Testing regexes","Begin testing"],"updatePoint":{"line":180,"column":32,"index":13966},"line":180,"code":"    it('all regexes in main file', function () {\n      regexes.forEach(function (regex) {\n        describe('Test against `safe-regex` : ' + regex, function () {\n          it('should be safe from potentially vulnerable regex', function () {\n            assert.strictEqual(safe(regex), true);\n          });\n        });\n      });\n    });","file":"test.js","skipped":false,"dir":"test"},{"name":"should be safe from potentially vulnerable regex","suites":["Testing regexes","Begin testing"],"updatePoint":{"line":183,"column":62,"index":14157},"line":183,"code":"          it('should be safe from potentially vulnerable regex', function () {\n            assert.strictEqual(safe(regex), true);\n          });","file":"test.js","skipped":false,"dir":"test"},{"name":"Should match full name","suites":["is() utility method"],"updatePoint":{"line":193,"column":28,"index":14586},"line":193,"code":"  it('Should match full name', function () {\n    assert.strictEqual(uap.getBrowser().name, \"IEMobile\");\n    assert.strictEqual(uap.getBrowser().is(\"IEMobile\"), true);\n    assert.strictEqual(uap.getBrowser().is(\"IE\"), false);\n  });","file":"test.js","skipped":false,"dir":"test"},{"name":"Should ignore \"Browser\" suffix","suites":["is() utility method"],"updatePoint":{"line":198,"column":36,"index":14825},"line":198,"code":"  it('Should ignore \"Browser\" suffix', function () {\n    assert.strictEqual(uap.getBrowser().is(\"IEMobile Browser\"), true);\n  });","file":"test.js","skipped":false,"dir":"test"},{"name":"Should ignore case","suites":["is() utility method"],"updatePoint":{"line":201,"column":24,"index":14943},"line":201,"code":"  it('Should ignore case', function () {\n    assert.strictEqual(uap.getEngine().name, \"Trident\");\n    assert.strictEqual(uap.getEngine().is(\"tRiDeNt\"), true);\n  });","file":"test.js","skipped":false,"dir":"test"},{"name":"Should get exact name","suites":["is() utility method"],"updatePoint":{"line":205,"column":27,"index":15111},"line":205,"code":"  it('Should get exact name', function () {\n    assert.strictEqual(uap.getOS().name, \"Windows Phone\");\n    assert.strictEqual(uap.getOS().is(\"Windows Phone\"), true);\n    assert.strictEqual(uap.getOS().is(\"Windows Phone OS\"), true);\n    assert.strictEqual(uap.getOS().is(\"Windows Mobile\"), false);\n    assert.strictEqual(uap.getOS().is(\"Android\"), false);\n  });","file":"test.js","skipped":false,"dir":"test"},{"name":"Should check all device properties","suites":["is() utility method"],"updatePoint":{"line":212,"column":40,"index":15485},"line":212,"code":"  it('Should check all device properties', function () {\n    assert.deepEqual(uap.getDevice(), {\n      vendor: \"Nokia\",\n      model: \"Lumia 635\",\n      type: \"mobile\"\n    });\n    assert.strictEqual(uap.getDevice().is(\"Nokia\"), true);\n    assert.strictEqual(uap.getDevice().is(\"Lumia 635\"), true);\n    assert.strictEqual(uap.getDevice().is(\"mobile\"), true);\n    assert.strictEqual(uap.getResult().device.is(\"Nokia\"), true);\n  });","file":"test.js","skipped":false,"dir":"test"},{"name":"Should get result after reassignment","suites":["is() utility method"],"updatePoint":{"line":223,"column":42,"index":15916},"line":223,"code":"  it('Should get result after reassignment', function () {\n    uap.setUA(\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_6_8) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1500.95 Safari/537.36\");\n    assert.strictEqual(uap.getOS().name, \"Mac OS\");\n    assert.strictEqual(uap.getOS().is(\"Mac OS\"), true);\n    assert.strictEqual(uap.getOS().is(\"M ac\"), false);\n    assert.strictEqual(uap.getOS().is(\"macOS\"), true);\n    assert.strictEqual(uap.getOS().is(\"mac OS\"), true);\n    assert.strictEqual(uap.getOS().is(\"M      a c   \"), false);\n    assert.strictEqual(uap.getOS().is(\"Mac OS OS\"), false);\n    assert.strictEqual(uap.getOS().is(\"Mac OS X\"), false);\n    assert.strictEqual(uap.getBrowser().is(\"Chrome\"), true);\n    assert.strictEqual(uap.getEngine().is(\"Blink\"), true);\n  });","file":"test.js","skipped":false,"dir":"test"},{"name":"Should refrain from \"undefined\" until all properties are checked","suites":["is() utility method"],"updatePoint":{"line":236,"column":70,"index":16724},"line":236,"code":"  it('Should refrain from \"undefined\" until all properties are checked', function () {\n    assert.strictEqual(uap.getDevice().is(\"undefined\"), false);\n    assert.strictEqual(uap.getDevice().is(\"Apple\"), true);\n    uap.setUA(\"\");\n    assert.strictEqual(uap.getDevice().model, undefined);\n    assert.strictEqual(uap.getDevice().is(\"undefined\"), false);\n    assert.strictEqual(uap.getDevice().is(undefined), true);\n  });","file":"test.js","skipped":false,"dir":"test"},{"name":"Should accept exact arch name","suites":["is() utility method"],"updatePoint":{"line":246,"column":35,"index":17167},"line":246,"code":"  it('Should accept exact arch name', function () {\n    uap.setUA(\"Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:19.0) Gecko/20100101 Firefox/19.0\");\n    assert.strictEqual(uap.getCPU().architecture, \"ia32\");\n    assert.strictEqual(uap.getCPU().is(\"ia32\"), true);\n    assert.strictEqual(uap.getCPU().is(\"x86\"), false);\n    uap.setUA(\"Opera/9.80 (X11; Linux x86_64; U; Linux Mint; en) Presto/2.2.15 Version/10.10\");\n    assert.strictEqual(uap.getCPU().architecture, \"amd64\");\n    assert.strictEqual(uap.getCPU().is(\"amd64\"), true);\n    assert.strictEqual(uap.getCPU().is(\"x86-64\"), false);\n    assert.strictEqual(uap.getCPU().is(\"x64\"), false);\n  });","file":"test.js","skipped":false,"dir":"test"},{"name":"Should return full name","suites":["toString() utility method"],"updatePoint":{"line":259,"column":29,"index":17862},"line":259,"code":"  it('Should return full name', function () {\n    let uap = new UAParser('Mozilla/5.0 (Mobile; Windows Phone 8.1; Android 4.0; ARM; Trident/7.0; Touch; rv:11.0; IEMobile/11.0; NOKIA; Lumia 635) like iPhone OS 7_0_3 Mac OS X AppleWebKit/537 (KHTML, like Gecko) Mobile Safari/537');\n    assert.strictEqual(uap.getBrowser().name, \"IEMobile\");\n    assert.strictEqual(uap.getBrowser().version, \"11.0\");\n    assert.strictEqual(uap.getBrowser().major, \"11\");\n    assert.strictEqual(uap.getBrowser().toString(), \"IEMobile 11.0\");\n    assert.strictEqual(uap.getCPU().architecture, \"arm\");\n    assert.strictEqual(uap.getCPU().toString(), \"arm\");\n    assert.strictEqual(uap.getDevice().vendor, \"Nokia\");\n    assert.strictEqual(uap.getDevice().model, \"Lumia 635\");\n    assert.strictEqual(uap.getDevice().type, \"mobile\");\n    assert.strictEqual(uap.getDevice().toString(), \"Nokia Lumia 635\");\n    assert.strictEqual(uap.getEngine().name, \"Trident\");\n    assert.strictEqual(uap.getEngine().version, \"7.0\");\n    assert.strictEqual(uap.getEngine().toString(), \"Trident 7.0\");\n    assert.strictEqual(uap.getOS().name, \"Windows Phone\");\n    assert.strictEqual(uap.getOS().version, \"8.1\");\n    assert.strictEqual(uap.getOS().toString(), \"Windows Phone 8.1\");\n  });","file":"test.js","skipped":false,"dir":"test"},{"name":"Can be called with UAParser(ua)","suites":["Read user-agent data from req.headers"],"updatePoint":{"line":289,"column":37,"index":19613},"line":289,"code":"  it('Can be called with UAParser(ua)', function () {\n    let engine = UAParser(ua).engine;\n    assert.strictEqual(engine.name, \"Trident\");\n  });","file":"test.js","skipped":false,"dir":"test"},{"name":"Can be called with UAParser(ua, extensions)","suites":["Read user-agent data from req.headers"],"updatePoint":{"line":293,"column":49,"index":19771},"line":293,"code":"  it('Can be called with UAParser(ua, extensions)', function () {\n    let engine = UAParser(ua, ext).engine;\n    assert.strictEqual(engine.name, \"Custom Browser 1\");\n  });","file":"test.js","skipped":false,"dir":"test"},{"name":"Can be called with UAParser(ua, extensions, headers)","suites":["Read user-agent data from req.headers"],"updatePoint":{"line":297,"column":58,"index":19952},"line":297,"code":"  it('Can be called with UAParser(ua, extensions, headers)', function () {\n    let engine = UAParser(ua, ext, req.headers).engine;\n    assert.strictEqual(engine.name, \"Custom Browser 1\");\n  });","file":"test.js","skipped":false,"dir":"test"},{"name":"Can be called with UAParser(ua, headers)","suites":["Read user-agent data from req.headers"],"updatePoint":{"line":301,"column":46,"index":20134},"line":301,"code":"  it('Can be called with UAParser(ua, headers)', function () {\n    let engine = UAParser(ua, req.headers).engine;\n    assert.strictEqual(engine.name, \"Trident\");\n  });","file":"test.js","skipped":false,"dir":"test"},{"name":"Can be called with UAParser(extensions, headers)","suites":["Read user-agent data from req.headers"],"updatePoint":{"line":305,"column":54,"index":20310},"line":305,"code":"  it('Can be called with UAParser(extensions, headers)', function () {\n    let engine = UAParser(ext, req.headers).engine;\n    assert.strictEqual(engine.name, \"Custom Browser 2\");\n  });","file":"test.js","skipped":false,"dir":"test"},{"name":"Can be called with UAParser(headers)","suites":["Read user-agent data from req.headers"],"updatePoint":{"line":309,"column":42,"index":20484},"line":309,"code":"  it('Can be called with UAParser(headers)', function () {\n    let engine = UAParser(req.headers).engine;\n    assert.strictEqual(engine.name, \"EdgeHTML\");\n  });","file":"test.js","skipped":false,"dir":"test"},{"name":"Can read from client-hints headers","suites":["Map UA-CH headers"],"updatePoint":{"line":336,"column":40,"index":21578},"line":336,"code":"  it('Can read from client-hints headers', function () {\n    assert.strictEqual(browser.name, \"Chrome\");\n    assert.strictEqual(browser.version, \"93.0.1.2\");\n    assert.strictEqual(browser.major, \"93\");\n    assert.strictEqual(cpu.architecture, \"arm64\");\n    assert.strictEqual(device.type, \"mobile\");\n    assert.strictEqual(device.model, \"Pixel 99\");\n    assert.strictEqual(device.vendor, undefined);\n    assert.strictEqual(engine.name, 'Blink');\n    assert.strictEqual(engine.version, '110.0.0.0');\n    assert.strictEqual(os.name, \"Windows\");\n    assert.strictEqual(os.version, \"11\");\n  });","file":"test.js","skipped":false,"dir":"test"},{"name":"Can read from user-agent header","suites":["Map UA-CH headers"],"updatePoint":{"line":349,"column":37,"index":22167},"line":349,"code":"  it('Can read from user-agent header', function () {\n    uap = UAParser(headers2);\n    browser = uap.browser;\n    cpu = uap.cpu;\n    device = uap.device;\n    engine = uap.engine;\n    os = uap.os;\n    assert.strictEqual(browser.name, \"Chrome\");\n    assert.strictEqual(browser.version, \"110.0.0.0\");\n    assert.strictEqual(browser.major, \"110\");\n    assert.strictEqual(cpu.architecture, \"amd64\");\n    assert.strictEqual(device.type, \"mobile\");\n    assert.strictEqual(device.model, undefined);\n    assert.strictEqual(device.vendor, undefined);\n    assert.strictEqual(engine.name, 'Blink');\n    assert.strictEqual(engine.version, '110.0.0.0');\n    assert.strictEqual(os.name, \"Linux\");\n    assert.strictEqual(os.version, \"x86_64\");\n  });","file":"test.js","skipped":false,"dir":"test"}]}