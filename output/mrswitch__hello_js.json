{"repo":"MrSwitch/hello.js","url":"https://github.com/MrSwitch/hello.js","branch":"master","configs":[{"package":"expect.js","lang":"js","dir":"assets/expect/test","framework":"mocha","pattern":"**/*.{js,ts}"},{"package":"hellojs","lang":"js","dir":"tests","framework":"mocha","pattern":"**/*.{js,ts}"}],"tests":[{"name":"should have .version","suites":["expect"],"updatePoint":{"line":28,"column":26,"index":382},"line":28,"code":"  it('should have .version', function () {\n    expect(expect.version).to.match(/^\\d+\\.\\d+\\.\\d+$/);\n  });","file":"expect.js","skipped":false,"dir":"assets/expect/test"},{"name":"should work in its basic form","suites":["expect"],"updatePoint":{"line":31,"column":35,"index":496},"line":31,"code":"  it('should work in its basic form', function () {\n    expect('test').to.be.a('string');\n  });","file":"expect.js","skipped":false,"dir":"assets/expect/test"},{"name":"should test true","suites":["expect"],"updatePoint":{"line":34,"column":22,"index":579},"line":34,"code":"  it('should test true', function () {\n    expect(true).to.be(true);\n    expect(false).to.not.be(true);\n    expect(1).to.not.be(true);\n    err(function () {\n      expect('test').to.be(true);\n    }, \"expected 'test' to equal true\");\n  });","file":"expect.js","skipped":false,"dir":"assets/expect/test"},{"name":"should allow not.to","suites":["expect"],"updatePoint":{"line":42,"column":25,"index":820},"line":42,"code":"  it('should allow not.to', function () {\n    expect(true).not.to.be(false);\n    err(function () {\n      expect(false).not.to.be(false);\n    }, \"expected false to not equal false\");\n  });","file":"expect.js","skipped":false,"dir":"assets/expect/test"},{"name":"should test ok","suites":["expect"],"updatePoint":{"line":48,"column":20,"index":1003},"line":48,"code":"  it('should test ok', function () {\n    expect(true).to.be.ok();\n    expect(false).to.not.be.ok();\n    expect(1).to.be.ok();\n    expect(0).to.not.be.ok();\n    err(function () {\n      expect('').to.be.ok();\n    }, \"expected '' to be truthy\");\n    err(function () {\n      expect('test').to.not.be.ok();\n    }, \"expected 'test' to be falsy\");\n  });","file":"expect.js","skipped":false,"dir":"assets/expect/test"},{"name":"should test false","suites":["expect"],"updatePoint":{"line":60,"column":23,"index":1353},"line":60,"code":"  it('should test false', function () {\n    expect(false).to.be(false);\n    expect(true).to.not.be(false);\n    expect(0).to.not.be(false);\n    err(function () {\n      expect('').to.be(false);\n    }, \"expected '' to equal false\");\n  });","file":"expect.js","skipped":false,"dir":"assets/expect/test"},{"name":"should test functions with arguments","suites":["expect"],"updatePoint":{"line":68,"column":42,"index":1608},"line":68,"code":"  it('should test functions with arguments', function () {\n    function itThrowsSometimes(first, second) {\n      if (first ^ second) {\n        throw new Error('tell');\n      }\n    }\n    expect(itThrowsSometimes).withArgs(false, false).to.not.throwException();\n    expect(itThrowsSometimes).withArgs(false, true).to.throwException(/tell/);\n    expect(itThrowsSometimes).withArgs(true, false).to.throwException(/tell/);\n    expect(itThrowsSometimes).withArgs(true, true).to.not.throwException();\n  });","file":"expect.js","skipped":false,"dir":"assets/expect/test"},{"name":"should test for exceptions","suites":["expect"],"updatePoint":{"line":79,"column":32,"index":2098},"line":79,"code":"  it('should test for exceptions', function () {\n    function itThrows() {\n      a.b.c;\n    }\n    function itThrowsString() {\n      throw 'aaa';\n    }\n    function itThrowsMessage() {\n      throw new Error('tobi');\n    }\n    var anonItThrows = function () {\n      a.b.c;\n    };\n    function itWorks() {\n      return;\n    }\n    var anonItWorks = function () {};\n    expect(itThrows).to.throwException();\n    expect(itWorks).to.not.throwException();\n    var subject;\n    expect(itThrows).to.throwException(function (e) {\n      subject = e;\n    });\n    expect(subject).to.be.an(Error);\n    expect(itThrowsMessage).to.throwException(/tobi/);\n    expect(itThrowsMessage).to.not.throwException(/test/);\n    err(function () {\n      expect(itThrowsMessage).to.throwException(/no match/);\n    }, 'expected \\'tobi\\' to match /no match/');\n    var subject2;\n    expect(itThrowsString).to.throwException(function (str) {\n      subject2 = str;\n    });\n    expect(subject2).to.be('aaa');\n    expect(itThrowsString).to.throwException(/aaa/);\n    expect(itThrowsString).to.not.throwException(/bbb/);\n    err(function () {\n      expect(itThrowsString).to.throwException(/no match/i);\n    }, 'expected \\'aaa\\' to match /no match/i');\n    var called = false;\n    expect(itWorks).to.not.throwError(function () {\n      called = true;\n    });\n    expect(called).to.be(false);\n    err(function () {\n      expect(5).to.throwException();\n    }, 'expected 5 to be a function');\n    err(function () {\n      expect(anonItThrows).not.to.throwException();\n    }, 'expected fn not to throw an exception');\n    err(function () {\n      expect(anonItWorks).to.throwException();\n    }, 'expected fn to throw an exception');\n    if (nameSupported) {\n      err(function () {\n        expect(itWorks).to.throwException();\n      }, 'expected itWorks to throw an exception');\n    } else {\n      err(function () {\n        expect(itWorks).to.throwException();\n      }, 'expected fn to throw an exception');\n    }\n    if (nameSupported) {\n      err(function () {\n        expect(itThrows).not.to.throwException();\n      }, 'expected itThrows not to throw an exception');\n    } else {\n      err(function () {\n        expect(anonItThrows).not.to.throwException();\n      }, 'expected fn not to throw an exception');\n    }\n  });","file":"expect.js","skipped":false,"dir":"assets/expect/test"},{"name":"should test arrays","suites":["expect"],"updatePoint":{"line":151,"column":24,"index":4370},"line":151,"code":"  it('should test arrays', function () {\n    expect([]).to.be.a('array');\n    expect([]).to.be.an('array');\n    err(function () {\n      expect({}).to.be.an('array');\n    }, 'expected {} to be an array');\n  });","file":"expect.js","skipped":false,"dir":"assets/expect/test"},{"name":"should test regex","suites":["expect"],"updatePoint":{"line":158,"column":23,"index":4579},"line":158,"code":"  it('should test regex', function () {\n    expect(/a/).to.be.an('regexp');\n    expect(/a/).to.be.a('regexp');\n    err(function () {\n      expect(null).to.be.a('regexp');\n    }, 'expected null to be a regexp');\n  });","file":"expect.js","skipped":false,"dir":"assets/expect/test"},{"name":"should test objects","suites":["expect"],"updatePoint":{"line":165,"column":25,"index":4798},"line":165,"code":"  it('should test objects', function () {\n    expect({}).to.be.an('object');\n    err(function () {\n      expect(null).to.be.an('object');\n    }, 'expected null to be an object');\n  });","file":"expect.js","skipped":false,"dir":"assets/expect/test"},{"name":"should test .equal()","suites":["expect"],"updatePoint":{"line":171,"column":26,"index":4984},"line":171,"code":"  it('should test .equal()', function () {\n    var foo;\n    expect(foo).to.be(undefined);\n  });","file":"expect.js","skipped":false,"dir":"assets/expect/test"},{"name":"should test typeof","suites":["expect"],"updatePoint":{"line":175,"column":24,"index":5078},"line":175,"code":"  it('should test typeof', function () {\n    expect('test').to.be.a('string');\n    err(function () {\n      expect('test').to.not.be.a('string');\n    }, \"expected 'test' not to be a string\");\n    expect(5).to.be.a('number');\n    err(function () {\n      expect(5).to.not.be.a('number');\n    }, \"expected 5 not to be a number\");\n  });","file":"expect.js","skipped":false,"dir":"assets/expect/test"},{"name":"should test instanceof","suites":["expect"],"updatePoint":{"line":185,"column":28,"index":5414},"line":185,"code":"  it('should test instanceof', function () {\n    function Foo() {}\n    expect(new Foo()).to.be.a(Foo);\n    if (nameSupported) {\n      err(function () {\n        expect(3).to.be.a(Foo);\n      }, \"expected 3 to be an instance of Foo\");\n    } else {\n      err(function () {\n        expect(3).to.be.a(Foo);\n      }, \"expected 3 to be an instance of supplied constructor\");\n    }\n  });","file":"expect.js","skipped":false,"dir":"assets/expect/test"},{"name":"should test within(start, finish)","suites":["expect"],"updatePoint":{"line":198,"column":39,"index":5805},"line":198,"code":"  it('should test within(start, finish)', function () {\n    expect(5).to.be.within(3, 6);\n    expect(5).to.be.within(3, 5);\n    expect(5).to.not.be.within(1, 3);\n    err(function () {\n      expect(5).to.not.be.within(4, 6);\n    }, \"expected 5 to not be within 4..6\");\n    err(function () {\n      expect(10).to.be.within(50, 100);\n    }, \"expected 10 to be within 50..100\");\n  });","file":"expect.js","skipped":false,"dir":"assets/expect/test"},{"name":"should test above(n)","suites":["expect"],"updatePoint":{"line":209,"column":26,"index":6172},"line":209,"code":"  it('should test above(n)', function () {\n    expect(5).to.be.above(2);\n    expect(5).to.be.greaterThan(2);\n    expect(5).to.not.be.above(5);\n    expect(5).to.not.be.above(6);\n    err(function () {\n      expect(5).to.be.above(6);\n    }, \"expected 5 to be above 6\");\n    err(function () {\n      expect(10).to.not.be.above(6);\n    }, \"expected 10 to be below 6\");\n  });","file":"expect.js","skipped":false,"dir":"assets/expect/test"},{"name":"should test match(regexp)","suites":["expect"],"updatePoint":{"line":221,"column":31,"index":6546},"line":221,"code":"  it('should test match(regexp)', function () {\n    expect('foobar').to.match(/^foo/);\n    expect('foobar').to.not.match(/^bar/);\n    err(function () {\n      expect('foobar').to.match(/^bar/i);\n    }, \"expected 'foobar' to match /^bar/i\");\n    err(function () {\n      expect('foobar').to.not.match(/^foo/i);\n    }, \"expected 'foobar' not to match /^foo/i\");\n  });","file":"expect.js","skipped":false,"dir":"assets/expect/test"},{"name":"should test length(n)","suites":["expect"],"updatePoint":{"line":231,"column":27,"index":6906},"line":231,"code":"  it('should test length(n)', function () {\n    expect('test').to.have.length(4);\n    expect('test').to.not.have.length(3);\n    expect([1, 2, 3]).to.have.length(3);\n    err(function () {\n      expect(4).to.have.length(3);\n    }, 'expected 4 to have a property \\'length\\'');\n    err(function () {\n      expect('asd').to.not.have.length(3);\n    }, \"expected 'asd' to not have a length of 3\");\n  });","file":"expect.js","skipped":false,"dir":"assets/expect/test"},{"name":"should test eql(val)","suites":["expect"],"updatePoint":{"line":242,"column":26,"index":7302},"line":242,"code":"  it('should test eql(val)', function () {\n    expect('test').to.eql('test');\n    expect({\n      foo: 'bar'\n    }).to.eql({\n      foo: 'bar'\n    });\n    expect(1).to.eql(1);\n    expect('4').to.eql(4);\n    expect(/a/gmi).to.eql(/a/mig);\n    err(function () {\n      expect(4).to.eql(3);\n    }, 'expected 4 to sort of equal 3');\n  });","file":"expect.js","skipped":false,"dir":"assets/expect/test"},{"name":"should test equal(val)","suites":["expect"],"updatePoint":{"line":256,"column":28,"index":7636},"line":256,"code":"  it('should test equal(val)', function () {\n    expect('test').to.equal('test');\n    expect(1).to.equal(1);\n    err(function () {\n      expect(4).to.equal(3);\n    }, 'expected 4 to equal 3');\n    err(function () {\n      expect('4').to.equal(4);\n    }, \"expected '4' to equal 4\");\n  });","file":"expect.js","skipped":false,"dir":"assets/expect/test"},{"name":"should test be(val)","suites":["expect"],"updatePoint":{"line":266,"column":25,"index":7920},"line":266,"code":"  it('should test be(val)', function () {\n    expect('test').to.be('test');\n    expect(1).to.be(1);\n    err(function () {\n      expect(4).to.be(3);\n    }, 'expected 4 to equal 3');\n    err(function () {\n      expect('4').to.be(4);\n    }, \"expected '4' to equal 4\");\n  });","file":"expect.js","skipped":false,"dir":"assets/expect/test"},{"name":"should test empty","suites":["expect"],"updatePoint":{"line":276,"column":23,"index":8190},"line":276,"code":"  it('should test empty', function () {\n    expect('').to.be.empty();\n    expect({}).to.be.empty();\n    expect([]).to.be.empty();\n    expect({\n      length: 0\n    }).to.be.empty();\n    err(function () {\n      expect(null).to.be.empty();\n    }, 'expected null to be an object');\n    err(function () {\n      expect({\n        a: 'b'\n      }).to.be.empty();\n    }, 'expected { a: \\'b\\' } to be empty');\n    err(function () {\n      expect({\n        length: '0'\n      }).to.be.empty();\n    }, 'expected { length: \\'0\\' } to be empty');\n    err(function () {\n      expect('asd').to.be.empty();\n    }, \"expected 'asd' to be empty\");\n    err(function () {\n      expect('').to.not.be.empty();\n    }, \"expected '' to not be empty\");\n    err(function () {\n      expect({}).to.not.be.empty();\n    }, \"expected {} to not be empty\");\n  });","file":"expect.js","skipped":false,"dir":"assets/expect/test"},{"name":"should test property(name)","suites":["expect"],"updatePoint":{"line":306,"column":32,"index":9024},"line":306,"code":"  it('should test property(name)', function () {\n    expect('test').to.have.property('length');\n    expect(4).to.not.have.property('length');\n    expect({\n      length: undefined\n    }).to.have.property('length');\n    err(function () {\n      expect('asd').to.have.property('foo');\n    }, \"expected 'asd' to have a property 'foo'\");\n    err(function () {\n      expect({\n        length: undefined\n      }).to.not.have.property('length');\n    }, \"expected { length: undefined } to not have a property 'length'\");\n  });","file":"expect.js","skipped":false,"dir":"assets/expect/test"},{"name":"should test property(name, val)","suites":["expect"],"updatePoint":{"line":321,"column":37,"index":9545},"line":321,"code":"  it('should test property(name, val)', function () {\n    expect('test').to.have.property('length', 4);\n    expect({\n      length: undefined\n    }).to.have.property('length', undefined);\n    err(function () {\n      expect('asd').to.have.property('length', 4);\n    }, \"expected 'asd' to have a property 'length' of 4, but got 3\");\n    err(function () {\n      expect('asd').to.not.have.property('length', 3);\n    }, \"expected 'asd' to not have a property 'length' of 3\");\n    err(function () {\n      expect('asd').to.not.have.property('foo', 3);\n    }, \"'asd' has no property 'foo'\");\n    err(function () {\n      expect({\n        length: undefined\n      }).to.not.have.property('length', undefined);\n    }, \"expected { length: undefined } to not have a property 'length'\");\n  });","file":"expect.js","skipped":false,"dir":"assets/expect/test"},{"name":"should test own.property(name)","suites":["expect"],"updatePoint":{"line":341,"column":36,"index":10322},"line":341,"code":"  it('should test own.property(name)', function () {\n    expect('test').to.have.own.property('length');\n    expect({\n      length: 12\n    }).to.have.own.property('length');\n    err(function () {\n      expect({\n        length: 12\n      }).to.not.have.own.property('length');\n    }, \"expected { length: 12 } to not have own property 'length'\");\n  });","file":"expect.js","skipped":false,"dir":"assets/expect/test"},{"name":"should test string()","suites":["expect"],"updatePoint":{"line":352,"column":26,"index":10661},"line":352,"code":"  it('should test string()', function () {\n    expect('foobar').to.contain('bar');\n    expect('foobar').to.contain('foo');\n    expect('foobar').to.include.string('foo');\n    expect('foobar').to.not.contain('baz');\n    expect('foobar').to.not.include.string('baz');\n    err(function () {\n      expect(3).to.contain('baz');\n    }, \"expected 3 to contain 'baz'\");\n    err(function () {\n      expect('foobar').to.contain('baz');\n    }, \"expected 'foobar' to contain 'baz'\");\n    err(function () {\n      expect('foobar').to.not.contain('bar');\n    }, \"expected 'foobar' to not contain 'bar'\");\n  });","file":"expect.js","skipped":false,"dir":"assets/expect/test"},{"name":"should test contain()","suites":["expect"],"updatePoint":{"line":368,"column":27,"index":11257},"line":368,"code":"  it('should test contain()', function () {\n    expect(['foo', 'bar']).to.contain('foo');\n    expect(['foo', 'bar']).to.contain('foo');\n    expect(['foo', 'bar']).to.contain('bar');\n    expect([1, 2]).to.contain(1);\n    expect(['foo', 'bar']).to.not.contain('baz');\n    expect(['foo', 'bar']).to.not.contain(1);\n    err(function () {\n      expect(['foo']).to.contain('bar');\n    }, \"expected [ 'foo' ] to contain 'bar'\");\n    err(function () {\n      expect(['bar', 'foo']).to.not.contain('foo');\n    }, \"expected [ 'bar', 'foo' ] to not contain 'foo'\");\n  });","file":"expect.js","skipped":false,"dir":"assets/expect/test"},{"name":"should test keys(array)","suites":["expect"],"updatePoint":{"line":382,"column":29,"index":11819},"line":382,"code":"  it('should test keys(array)', function () {\n    expect({\n      foo: 1\n    }).to.have.keys(['foo']);\n    expect({\n      foo: 1,\n      bar: 2\n    }).to.have.keys(['foo', 'bar']);\n    expect({\n      foo: 1,\n      bar: 2\n    }).to.have.keys('foo', 'bar');\n    expect({\n      foo: 1,\n      bar: 2,\n      baz: 3\n    }).to.include.keys('foo', 'bar');\n    expect({\n      foo: 1,\n      bar: 2,\n      baz: 3\n    }).to.include.keys('bar', 'foo');\n    expect({\n      foo: 1,\n      bar: 2,\n      baz: 3\n    }).to.include.keys('baz');\n    expect({\n      foo: 1,\n      bar: 2\n    }).to.include.keys('foo');\n    expect({\n      foo: 1,\n      bar: 2\n    }).to.include.keys('bar', 'foo');\n    expect({\n      foo: 1,\n      bar: 2\n    }).to.include.keys(['foo']);\n    expect({\n      foo: 1,\n      bar: 2\n    }).to.include.keys(['bar']);\n    expect({\n      foo: 1,\n      bar: 2\n    }).to.include.keys(['bar', 'foo']);\n    expect({\n      foo: 1,\n      bar: 2\n    }).to.not.have.keys('baz');\n    expect({\n      foo: 1,\n      bar: 2\n    }).to.not.have.keys('foo', 'baz');\n    expect({\n      foo: 1,\n      bar: 2\n    }).to.not.include.keys('baz');\n    expect({\n      foo: 1,\n      bar: 2\n    }).to.not.include.keys('foo', 'baz');\n    expect({\n      foo: 1,\n      bar: 2\n    }).to.not.include.keys('baz', 'foo');\n    err(function () {\n      expect({\n        foo: 1\n      }).to.have.keys();\n    }, \"keys required\");\n    err(function () {\n      expect({\n        foo: 1\n      }).to.have.keys([]);\n    }, \"keys required\");\n    err(function () {\n      expect({\n        foo: 1\n      }).to.not.have.keys([]);\n    }, \"keys required\");\n    err(function () {\n      expect({\n        foo: 1\n      }).to.include.keys([]);\n    }, \"keys required\");\n    err(function () {\n      expect({\n        foo: 1\n      }).to.have.keys(['bar']);\n    }, \"expected { foo: 1 } to include key 'bar'\");\n    err(function () {\n      expect({\n        foo: 1\n      }).to.have.keys(['bar', 'baz']);\n    }, \"expected { foo: 1 } to include keys 'bar', and 'baz'\");\n    err(function () {\n      expect({\n        foo: 1\n      }).to.have.keys(['foo', 'bar', 'baz']);\n    }, \"expected { foo: 1 } to include keys 'foo', 'bar', and 'baz'\");\n    err(function () {\n      expect({\n        foo: 1\n      }).to.not.have.keys(['foo']);\n    }, \"expected { foo: 1 } to not include key 'foo'\");\n    err(function () {\n      expect({\n        foo: 1\n      }).to.not.have.keys(['foo']);\n    }, \"expected { foo: 1 } to not include key 'foo'\");\n    err(function () {\n      expect({\n        foo: 1,\n        bar: 2\n      }).to.not.have.keys(['foo', 'bar']);\n    }, \"expected { foo: 1, bar: 2 } to not include keys 'foo', and 'bar'\");\n    err(function () {\n      expect({\n        foo: 1\n      }).to.not.include.keys(['foo']);\n    }, \"expected { foo: 1 } to not include key 'foo'\");\n    err(function () {\n      expect({\n        foo: 1\n      }).to.include.keys('foo', 'bar');\n    }, \"expected { foo: 1 } to include keys 'foo', and 'bar'\");\n\n    // only\n    expect({\n      foo: 1,\n      bar: 1\n    }).to.only.have.keys('foo', 'bar');\n    expect({\n      foo: 1,\n      bar: 1\n    }).to.only.have.keys(['foo', 'bar']);\n    err(function () {\n      expect({\n        a: 'b',\n        c: 'd'\n      }).to.only.have.keys('a', 'b', 'c');\n    }, \"expected { a: 'b', c: 'd' } to only have keys 'a', 'b', and 'c'\");\n    err(function () {\n      expect({\n        a: 'b',\n        c: 'd'\n      }).to.only.have.keys('a');\n    }, \"expected { a: 'b', c: 'd' } to only have key 'a'\");\n  });","file":"expect.js","skipped":false,"dir":"assets/expect/test"},{"name":"should allow chaining with `and`","suites":["expect"],"updatePoint":{"line":533,"column":38,"index":15303},"line":533,"code":"  it('should allow chaining with `and`', function () {\n    expect(5).to.be.a('number').and.be(5);\n    expect(5).to.be.a('number').and.not.be(6);\n    expect(5).to.be.a('number').and.not.be(6).and.not.be('5');\n    err(function () {\n      expect(5).to.be.a('number').and.not.be(5);\n    }, \"expected 5 to not equal 5\");\n    err(function () {\n      expect(5).to.be.a('number').and.not.be(6).and.not.be.above(4);\n    }, \"expected 5 to be below 4\");\n  });","file":"expect.js","skipped":false,"dir":"assets/expect/test"},{"name":"should fail with `fail`","suites":["expect"],"updatePoint":{"line":544,"column":29,"index":15743},"line":544,"code":"  it('should fail with `fail`', function () {\n    err(function () {\n      expect().fail();\n    }, \"explicit failure\");\n  });","file":"expect.js","skipped":false,"dir":"assets/expect/test"},{"name":"should fail with `fail` and custom message","suites":["expect"],"updatePoint":{"line":549,"column":48,"index":15887},"line":549,"code":"  it('should fail with `fail` and custom message', function () {\n    err(function () {\n      expect().fail(\"explicit failure with message\");\n    }, \"explicit failure with message\");\n  });","file":"expect.js","skipped":false,"dir":"assets/expect/test"},{"name":"should contain oauth.auth path","suites":["E2E modules"],"updatePoint":{"line":26,"column":40,"index":989},"line":26,"code":"      it('should contain oauth.auth path', function () {\n        var path = module.oauth.auth;\n        expect(path).to.match(/^https?\\:\\/\\//);\n      });","file":"specs/e2e/modules.js","skipped":false,"dir":"tests"},{"name":"should specify a base url","suites":["E2E modules"],"updatePoint":{"line":30,"column":35,"index":1137},"line":30,"code":"      it('should specify a base url', function () {\n        // Loop through all services\n        expect(module.base).to.match(/^https?\\:\\/\\//);\n      });","file":"specs/e2e/modules.js","skipped":false,"dir":"tests"},{"name":"should be using OAuth1 contain, auth, request, token properties","suites":["E2E modules"],"updatePoint":{"line":34,"column":73,"index":1329},"line":34,"code":"      it('should be using OAuth1 contain, auth, request, token properties', function () {\n        // Loop through all services\n        var oauth = module.oauth;\n        if (oauth && parseInt(oauth.version, 10) === 1) {\n          expect(oauth.auth).to.match(MATCH_URL);\n          expect(oauth.token).to.match(MATCH_URL);\n          expect(oauth.request).to.match(MATCH_URL);\n        }\n      });","file":"specs/e2e/modules.js","skipped":false,"dir":"tests"},{"name":"should return error object when an api request is made with an unverified user","suites":["E2E modules"],"updatePoint":{"line":43,"column":89,"index":1738},"line":43,"code":"      xit('should return error object when an api request is made with an unverified user', function (done) {\n        var i = 0;\n        this.timeout(60000);\n        var cb = errorResponse(null, function () {\n          if (++i === 2) done();\n        });\n\n        // Ensure user is signed out\n        hello.logout(name);\n\n        // Make a request that returns an error object\n        hello(name).api('me', cb).then(null, cb);\n      });","skipped":true,"file":"specs/e2e/modules.js","dir":"tests"},{"name":"should assign a complete event","suites":["hello.api"],"updatePoint":{"line":43,"column":36,"index":988},"line":43,"code":"  it('should assign a complete event', function (done) {\n    hello('test').api('/', function () {\n      done();\n    });\n  });","file":"specs/unit/core/hello.api.js","skipped":false,"dir":"tests"},{"name":"should throw a completed event if network name is undefined","suites":["hello.api"],"updatePoint":{"line":48,"column":65,"index":1143},"line":48,"code":"  it('should throw a completed event if network name is undefined', function (done) {\n    hello('test').api('/', errorResponse('invalid_network', done));\n  });","file":"specs/unit/core/hello.api.js","skipped":false,"dir":"tests"},{"name":"should throw a error event if network name is undefined","suites":["hello.api"],"updatePoint":{"line":51,"column":61,"index":1299},"line":51,"code":"  it('should throw a error event if network name is undefined', function (done) {\n    hello('test').api('/').then(null, errorResponse('invalid_network', done));\n  });","file":"specs/unit/core/hello.api.js","skipped":false,"dir":"tests"},{"name":"should throw a error event if path name is undefined","suites":["hello.api"],"updatePoint":{"line":54,"column":58,"index":1463},"line":54,"code":"  it('should throw a error event if path name is undefined', function (done) {\n    hello('test').api().then(null, errorResponse('invalid_path', done));\n  });","file":"specs/unit/core/hello.api.js","skipped":false,"dir":"tests"},{"name":"should construct the url using the base and the pathname","suites":["hello.api"],"updatePoint":{"line":57,"column":62,"index":1625},"line":57,"code":"  it('should construct the url using the base and the pathname', function (done) {\n    hello('testable').api('/endpoint', function (res) {\n      expect(res.url).to.eql('https://testable/endpoint');\n      done();\n    });\n  });","file":"specs/unit/core/hello.api.js","skipped":false,"dir":"tests"},{"name":"should extract the parameters from the URL","suites":["hello.api"],"updatePoint":{"line":63,"column":48,"index":1837},"line":63,"code":"  it('should extract the parameters from the URL', function (done) {\n    var session = _session;\n    _session = null;\n    hello('testable').api('/endpoint?a=a&b=b', function (res) {\n      _session = session;\n      expect(res.url).to.eql('https://testable/endpoint');\n      expect(res.query).to.eql({\n        a: 'a',\n        b: 'b'\n      });\n      done();\n    });\n  });","file":"specs/unit/core/hello.api.js","skipped":false,"dir":"tests"},{"name":"should attach query object to the req.query","suites":["hello.api"],"updatePoint":{"line":76,"column":49,"index":2207},"line":76,"code":"  it('should attach query object to the req.query', function (done) {\n    hello('testable').api('/endpoint', {\n      a: 'a'\n    }, function (res) {\n      expect(res.query).to.have.property('a', 'a');\n      done();\n    });\n  });","file":"specs/unit/core/hello.api.js","skipped":false,"dir":"tests"},{"name":"should attach authResponse object to the req.authResponse","suites":["hello.api"],"updatePoint":{"line":84,"column":63,"index":2449},"line":84,"code":"  it('should attach authResponse object to the req.authResponse', function (done) {\n    hello('testable').api('/endpoint', function (res) {\n      expect(res.authResponse).to.eql(_session);\n      done();\n    });\n  });","file":"specs/unit/core/hello.api.js","skipped":false,"dir":"tests"},{"name":"should attach data object to the req.query when `req.method = get`","suites":["hello.api"],"updatePoint":{"line":90,"column":72,"index":2675},"line":90,"code":"  it('should attach data object to the req.query when `req.method = get`', function (done) {\n    hello('testable').api('/endpoint', 'get', {\n      a: 'a'\n    }, function (res) {\n      expect(res.query).to.have.property('a', 'a');\n      expect(res.data).to.be.empty();\n      done();\n    });\n  });","file":"specs/unit/core/hello.api.js","skipped":false,"dir":"tests"},{"name":"should attach post data object to the req.data","suites":["hello.api"],"updatePoint":{"line":99,"column":52,"index":2951},"line":99,"code":"  it('should attach post data object to the req.data', function (done) {\n    hello('testable').api('/endpoint', 'post', {\n      a: 'a'\n    }, function (res) {\n      expect(res.method).to.eql('post');\n      expect(res.query).to.not.have.property('a');\n      expect(res.data).to.have.property('a', 'a');\n      done();\n    });\n  });","file":"specs/unit/core/hello.api.js","skipped":false,"dir":"tests"},{"name":"should accept FormData as the data object","suites":["hello.api","POST"],"updatePoint":{"line":113,"column":51,"index":3418},"line":113,"code":"      it('should accept FormData as the data object', function (done) {\n        var formData = new FormData();\n        formData.append('user', 'name');\n        hello('testable').api('/endpoint', 'POST', formData).then(function (res) {\n          // The formData should not be mutated, but left as is.\n          expect(res.data).to.equal(formData);\n          done();\n        });\n      });","file":"specs/unit/core/hello.api.js","skipped":false,"dir":"tests"},{"name":"should add the access_token to the req.query","suites":["hello.api","signing"],"updatePoint":{"line":125,"column":52,"index":3854},"line":125,"code":"    it('should add the access_token to the req.query', function (done) {\n      hello('testable').api('/endpoint', function (res) {\n        expect(res.url).to.eql('https://testable/endpoint');\n        expect(res.query).to.eql(_session);\n        done();\n      });\n    });","file":"specs/unit/core/hello.api.js","skipped":false,"dir":"tests"},{"name":"should mark OAuth1 endpoints with req.proxy","suites":["hello.api","signing"],"updatePoint":{"line":132,"column":51,"index":4123},"line":132,"code":"    it('should mark OAuth1 endpoints with req.proxy', function (done) {\n      // Override\n      testable.oauth.version = 1;\n      hello('testable').api('/endpoint', function (res) {\n        // Renew\n        testable.oauth.version = 2;\n\n        // Test\n        expect(res.proxy).to.be.ok();\n        expect(res.oauth_proxy).to.eql(hello.settings.oauth_proxy);\n        done();\n      });\n    });","file":"specs/unit/core/hello.api.js","skipped":false,"dir":"tests"},{"name":"should process req object through the modules.get[req.path] function","suites":["hello.api","map"],"updatePoint":{"line":147,"column":76,"index":4578},"line":147,"code":"    it('should process req object through the modules.get[req.path] function', function (done) {\n      testable.get = testable.get || {};\n      testable.get.handled = function (p) {\n        expect(p).to.have.property('path', 'handled');\n        done();\n      };\n      hello('testable').api('/handled', {\n        a: 'a'\n      });\n    });","file":"specs/unit/core/hello.api.js","skipped":false,"dir":"tests"},{"name":"should process req object through the modules.get.default function if req.path not in module.get","suites":["hello.api","map"],"updatePoint":{"line":157,"column":104,"index":4943},"line":157,"code":"    it('should process req object through the modules.get.default function if req.path not in module.get', function (done) {\n      testable.get = testable.get || {};\n      testable.get['default'] = function (p) {\n        expect(p).to.have.property('path', 'unhandled');\n        delete testable.get['default'];\n        done();\n      };\n      hello('testable').api('/unhandled', {\n        a: 'a'\n      });\n    });","file":"specs/unit/core/hello.api.js","skipped":false,"dir":"tests"},{"name":"should trigger an error if the mapped value is false","suites":["hello.api","map"],"updatePoint":{"line":168,"column":60,"index":5311},"line":168,"code":"    it('should trigger an error if the mapped value is false', function (done) {\n      testable.get = testable.get || {};\n      testable.get.handled = false;\n      hello('testable').api('/handled').then(null, function (res) {\n        // Should place the value of a in the parameter list\n        expect(res.error).to.have.property('code', 'invalid_path');\n        delete testable.get.handled;\n        done();\n      });\n    });","file":"specs/unit/core/hello.api.js","skipped":false,"dir":"tests"},{"name":"should define the path using the query parameters and remove them from the query","suites":["hello.api","map","Replace @{} in path with request parameters"],"updatePoint":{"line":179,"column":90,"index":5841},"line":179,"code":"      it('should define the path using the query parameters and remove them from the query', function (done) {\n        testable.get = testable.get || {};\n        testable.get.handled = 'endpoint?b=@{a}';\n        hello('testable').api('/handled', {\n          a: 'a'\n        }).then(function (res) {\n          // Should place the value of a in the parameter list\n          expect(res.url).to.contain('endpoint?b=a');\n\n          // Should place the value of a in the parameter list\n          expect(res.path).to.eql('handled');\n\n          // Should remove the property from the req.query\n          expect(res.query).to.not.have.property('a');\n          delete testable.get.handled;\n          done();\n        }, done);\n      });","file":"specs/unit/core/hello.api.js","skipped":false,"dir":"tests"},{"name":"should define the path using the query parameters and remove them from the post data","suites":["hello.api","map","Replace @{} in path with request parameters"],"updatePoint":{"line":197,"column":94,"index":6570},"line":197,"code":"      it('should define the path using the query parameters and remove them from the post data', function (done) {\n        testable.post = testable.post || {};\n        testable.post.handled = 'endpoint?b=@{a}';\n        hello('testable').api('/handled', 'post', {\n          a: 'a'\n        }).then(function (res) {\n          // Should place the value of a in the parameter list\n          expect(res.url).to.contain('endpoint?b=a');\n\n          // Should place the value of a in the parameter list\n          expect(res.path).to.eql('handled');\n\n          // Should remove the property from the req.query\n          expect(res.data).to.not.have.property('a');\n          delete testable.get.handled;\n          done();\n        }, done);\n      });","file":"specs/unit/core/hello.api.js","skipped":false,"dir":"tests"},{"name":"should trigger an error if there was no query parameter arg, i.e. @{arg}","suites":["hello.api","map","Replace @{} in path with request parameters"],"updatePoint":{"line":215,"column":82,"index":7297},"line":215,"code":"      it('should trigger an error if there was no query parameter arg, i.e. @{arg}', function (done) {\n        testable.get = testable.get || {};\n        testable.get.handled = 'endpoint?b=@{a}';\n        hello('testable').api('/handled').then(null, function (res) {\n          // Should place the value of a in the parameter list\n          expect(res.error).to.have.property('code', 'missing_attribute');\n          delete testable.get.handled;\n          done();\n        });\n      });","file":"specs/unit/core/hello.api.js","skipped":false,"dir":"tests"},{"name":"should use the default value if one is defined i.e. @{arg|default}","suites":["hello.api","map","Replace @{} in path with request parameters"],"updatePoint":{"line":225,"column":76,"index":7774},"line":225,"code":"      it('should use the default value if one is defined i.e. @{arg|default}', function (done) {\n        testable.get = testable.get || {};\n        testable.get.handled = 'endpoint?empty=@{a|}&arg=@{b|default}';\n        hello('testable').api('/handled', function (res) {\n          // Should place the value of a in the parameter list\n          expect(res.url).to.contain('endpoint?empty=&arg=default');\n\n          // Should place the value of a in the parameter list\n          expect(res.path).to.eql('handled');\n          delete testable.get.handled;\n          done();\n        });\n      });","file":"specs/unit/core/hello.api.js","skipped":false,"dir":"tests"},{"name":"should trigger the wrap function","suites":["hello.api","wrap"],"updatePoint":{"line":241,"column":40,"index":8377},"line":241,"code":"    it('should trigger the wrap function', function (done) {\n      testable.wrap = testable.wrap || {};\n      testable.wrap.handled = function (req) {\n        delete testable.wrap.handled;\n        done();\n      };\n      hello('testable').api('/handled');\n    });","file":"specs/unit/core/hello.api.js","skipped":false,"dir":"tests"},{"name":"should trigger the wrap.default function if none exists","suites":["hello.api","wrap"],"updatePoint":{"line":249,"column":63,"index":8663},"line":249,"code":"    it('should trigger the wrap.default function if none exists', function (done) {\n      testable.wrap = testable.wrap || {};\n      testable.wrap['default'] = function (req) {\n        delete testable.wrap['default'];\n        done();\n      };\n      hello('testable').api('/unhandled');\n    });","file":"specs/unit/core/hello.api.js","skipped":false,"dir":"tests"},{"name":"should not trigger the wrap function if formatResponse = false","suites":["hello.api","wrap"],"updatePoint":{"line":257,"column":70,"index":8964},"line":257,"code":"    it('should not trigger the wrap function if formatResponse = false', function (done) {\n      testable.wrap = testable.wrap || {};\n      testable.wrap.handled = function (req) {\n        done(new Error('Wrap handler erroneously called'));\n      };\n      hello('testable').api({\n        path: '/handled',\n        formatResponse: false\n      }).then(function () {\n        // If the response handler was not called then we're good\n        done();\n      });\n    });","file":"specs/unit/core/hello.api.js","skipped":false,"dir":"tests"},{"name":"should override the path parameter with the hash fragment","suites":["hello.api","paging"],"updatePoint":{"line":272,"column":65,"index":9464},"line":272,"code":"    it('should override the path parameter with the hash fragment', function (done) {\n      hello('testable').api('/endpoint#formatting', function (res) {\n        expect(res.url).to.eql('https://testable/endpoint');\n        expect(res.path).to.eql('formatting');\n        done();\n      });\n    });","file":"specs/unit/core/hello.api.js","skipped":false,"dir":"tests"},{"name":"should append the req.path to the hash of the response.paging.next","suites":["hello.api","paging"],"updatePoint":{"line":279,"column":74,"index":9770},"line":279,"code":"    it('should append the req.path to the hash of the response.paging.next', function (done) {\n      testable.wrap = testable.wrap || {};\n      testable.wrap['default'] = function (req) {\n        req.paging = {\n          next: 'next?page=2'\n        };\n        delete testable.wrap['default'];\n      };\n      hello('testable').api('/unhandled', function (res) {\n        // Should place the value of a in the parameter list\n        expect(res.paging.next).to.contain('#unhandled');\n        done();\n      });\n    });","file":"specs/unit/core/hello.api.js","skipped":false,"dir":"tests"},{"name":"should bind handler using hello.on(eventName, handler) and trigger hello.emit","suites":["hello events"],"updatePoint":{"line":2,"column":83,"index":123},"line":2,"code":"  it('should bind handler using hello.on(eventName, handler) and trigger hello.emit', function (done) {\n    function handler() {\n      done();\n    }\n    hello.on('auth.login', handler);\n    hello.emit('auth.login');\n    hello.off('auth.login', handler);\n  });","file":"specs/unit/core/hello.events.js","skipped":false,"dir":"tests"},{"name":"should return null when accessing an invalid network implicitly","suites":["hello.getAuthResponse"],"updatePoint":{"line":2,"column":69,"index":118},"line":2,"code":"  it('should return null when accessing an invalid network implicitly', function () {\n    // Make request\n    var r = hello('Facelessbook').getAuthResponse();\n    expect(r).to.be(null);\n  });","file":"specs/unit/core/hello.getAuthResponse.js","skipped":false,"dir":"tests"},{"name":"should return null when accessing an invalid network explicitly","suites":["hello.getAuthResponse"],"updatePoint":{"line":7,"column":69,"index":310},"line":7,"code":"  it('should return null when accessing an invalid network explicitly', function () {\n    // Make request\n    var r = hello.getAuthResponse('Facelessbook');\n    expect(r).to.be(null);\n  });","file":"specs/unit/core/hello.getAuthResponse.js","skipped":false,"dir":"tests"},{"name":"should set app credentials and options","suites":["hello.init"],"updatePoint":{"line":2,"column":44,"index":82},"line":2,"code":"  it('should set app credentials and options', function () {\n    var credentials = {\n      service: 'id'\n    };\n    var options = {\n      redirect_uri: './relative'\n    };\n    hello.init(credentials, options);\n    expect(hello.settings.redirect_uri).to.match(/\\/relative/);\n  });","file":"specs/unit/core/hello.init.js","skipped":false,"dir":"tests"},{"name":"should assign a complete event","suites":["hello.login"],"updatePoint":{"line":45,"column":36,"index":905},"line":45,"code":"  it('should assign a complete event', function (done) {\n    var spy = sinon.spy(function () {\n      done();\n    });\n    var popup = {\n      closed: false\n    };\n    window.open = function () {\n      return popup;\n    };\n    hello.login('testable', spy);\n    popup.closed = true;\n  });","file":"specs/unit/core/hello.login.js","skipped":false,"dir":"tests"},{"name":"should throw a completed and error event if network name is wrong","suites":["hello.login"],"updatePoint":{"line":58,"column":71,"index":1226},"line":58,"code":"  it('should throw a completed and error event if network name is wrong', function (done) {\n    hello.login('invalidname', errorResponse('invalid_network', done));\n  });","file":"specs/unit/core/hello.login.js","skipped":false,"dir":"tests"},{"name":"should throw a error event if network name is wrong","suites":["hello.login"],"updatePoint":{"line":61,"column":57,"index":1382},"line":61,"code":"  it('should throw a error event if network name is wrong', function (done) {\n    hello.login('invalidname').then(null, errorResponse('invalid_network', done));\n  });","file":"specs/unit/core/hello.login.js","skipped":false,"dir":"tests"},{"name":"should by default, trigger window.open request","suites":["hello.login"],"updatePoint":{"line":64,"column":52,"index":1544},"line":64,"code":"  it('should by default, trigger window.open request', function (done) {\n    var spy = sinon.spy(function () {\n      done();\n    });\n    utils.popup = spy;\n    hello.login('testable');\n  });","file":"specs/unit/core/hello.login.js","skipped":false,"dir":"tests"},{"name":"should include the basic scope defined by the module, by default","suites":["hello.login"],"updatePoint":{"line":71,"column":70,"index":1753},"line":71,"code":"  it('should include the basic scope defined by the module, by default', function (done) {\n    var spy = sinon.spy(function (url, name, optins) {\n      expect(url).to.contain('scope=' + hello.services.testable.scope.basic);\n      done();\n    });\n    utils.popup = spy;\n    hello.login('testable');\n  });","file":"specs/unit/core/hello.login.js","skipped":false,"dir":"tests"},{"name":"should not use \"basic\" as the default scope, if there is no mapping","suites":["hello.login"],"updatePoint":{"line":79,"column":73,"index":2060},"line":79,"code":"  it('should not use \"basic\" as the default scope, if there is no mapping', function (done) {\n    // Remove the basic scope\n    delete hello.services.testable.scope.basic;\n\n    // Now the response should not include the scope...\n    var spy = sinon.spy(function (url) {\n      expect(url).to.not.contain('scope=basic');\n      done();\n    });\n    utils.popup = spy;\n    hello('testable').login();\n  });","file":"specs/unit/core/hello.login.js","skipped":false,"dir":"tests"},{"name":"should apply `options.redirect_uri`","suites":["hello.login","options"],"updatePoint":{"line":92,"column":43,"index":2467},"line":92,"code":"    it('should apply `options.redirect_uri`', function (done) {\n      var REDIRECT_URI = 'http://dummydomain.com/';\n      var spy = sinon.spy(function (url, name, options) {\n        var params = hello.utils.param(url.split('?')[1]);\n        expect(params.redirect_uri).to.equal(REDIRECT_URI);\n        done();\n      });\n      utils.popup = spy;\n      hello.login('testable', {\n        redirect_uri: REDIRECT_URI\n      });\n    });","file":"specs/unit/core/hello.login.js","skipped":false,"dir":"tests"},{"name":"should URIencode `options.redirect_uri`","suites":["hello.login","options"],"updatePoint":{"line":104,"column":47,"index":2900},"line":104,"code":"    it('should URIencode `options.redirect_uri`', function (done) {\n      var REDIRECT_URI = 'http://dummydomain.com/?breakdown';\n      var spy = sinon.spy(function (url, name, optins) {\n        expect(url).to.not.contain(REDIRECT_URI);\n        expect(url).to.contain(encodeURIComponent(REDIRECT_URI));\n        done();\n      });\n      utils.popup = spy;\n      hello.login('testable', {\n        redirect_uri: REDIRECT_URI\n      });\n    });","file":"specs/unit/core/hello.login.js","skipped":false,"dir":"tests"},{"name":"should base 64 encode the state if oauth.base64_state is true","suites":["hello.login","options"],"updatePoint":{"line":116,"column":69,"index":3361},"line":116,"code":"    it('should base 64 encode the state if oauth.base64_state is true', function (done) {\n      hello.services.testable.oauth.base64_state = true;\n      var spy = sinon.spy(function (url, name, optins) {\n        // The url should not contain uri encoded characters\n        expect(url).to.not.contain('state=%7B%22');\n        done();\n      });\n      utils.popup = spy;\n      hello.login('testable');\n    });","file":"specs/unit/core/hello.login.js","skipped":false,"dir":"tests"},{"name":"should uri encode the state if oauth.base64_state is false","suites":["hello.login","options"],"updatePoint":{"line":126,"column":66,"index":3765},"line":126,"code":"    it('should uri encode the state if oauth.base64_state is false', function (done) {\n      hello.services.testable.oauth.base64_state = false;\n      var spy = sinon.spy(function (url, name, optins) {\n        // The url should contain uri encoded characters\n        expect(url).to.contain('state=%7B%22');\n        done();\n      });\n      utils.popup = spy;\n      hello.login('testable');\n    });","file":"specs/unit/core/hello.login.js","skipped":false,"dir":"tests"},{"name":"should uri encode the state by default","suites":["hello.login","options"],"updatePoint":{"line":136,"column":46,"index":4142},"line":136,"code":"    it('should uri encode the state by default', function (done) {\n      var spy = sinon.spy(function (url, name, optins) {\n        // The url should contain uri encoded characters\n        expect(url).to.contain('state=%7B%22');\n        done();\n      });\n      utils.popup = spy;\n      hello.login('testable');\n    });","file":"specs/unit/core/hello.login.js","skipped":false,"dir":"tests"},{"name":"should pass through unknown scopes defined in `options.scope`","suites":["hello.login","options"],"updatePoint":{"line":145,"column":69,"index":4484},"line":145,"code":"    it('should pass through unknown scopes defined in `options.scope`', function (done) {\n      var spy = sinon.spy(function (url, name, optins) {\n        var params = hello.utils.param(url.split('?')[1]);\n        expect(params.scope).to.contain('email');\n        done();\n      });\n      utils.popup = spy;\n      hello.login('testable', {\n        scope: 'email'\n      });\n    });","file":"specs/unit/core/hello.login.js","skipped":false,"dir":"tests"},{"name":"should include the basic scope defined in the settings `hello.settings.scope`","suites":["hello.login","options"],"updatePoint":{"line":156,"column":85,"index":4880},"line":156,"code":"    it('should include the basic scope defined in the settings `hello.settings.scope`', function (done) {\n      hello.settings.scope = ['basic'];\n      testable.scope.basic = 'basic';\n      var spy = sinon.spy(function (url, name, optins) {\n        var params = hello.utils.param(url.split('?')[1]);\n        expect(params.scope).to.contain('basic');\n        done();\n      });\n      utils.popup = spy;\n      hello.login('testable', {\n        scope: ['email']\n      });\n    });","file":"specs/unit/core/hello.login.js","skipped":false,"dir":"tests"},{"name":"should discard common scope, aka scopes undefined by this module but defined as a global standard in the libary (i.e. basic)","suites":["hello.login","options"],"updatePoint":{"line":169,"column":132,"index":5403},"line":169,"code":"    it('should discard common scope, aka scopes undefined by this module but defined as a global standard in the libary (i.e. basic)', function (done) {\n      var commonScope = 'common_scope';\n\n      // Set this as a common scope (always set to '')\n      hello.settings.scope_map[commonScope] = '';\n      var spy = sinon.spy(function (url, name, optins) {\n        // Parse parameters\n        var params = hello.utils.param(url.split('?')[1]);\n        expect(params.scope).to.not.contain(commonScope);\n        done();\n      });\n      utils.popup = spy;\n      hello.login('testable', {\n        scope: commonScope\n      });\n    });","file":"specs/unit/core/hello.login.js","skipped":false,"dir":"tests"},{"name":"should not included empty scopes","suites":["hello.login","options"],"updatePoint":{"line":185,"column":40,"index":5940},"line":185,"code":"    it('should not included empty scopes', function (done) {\n      var scope = 'scope';\n      var paddedScope = ',' + scope + ',';\n      delete testable.scope.basic;\n      var spy = sinon.spy(function (url, name, optins) {\n        // Parse parameters\n        var params = hello.utils.param(url.split('?')[1]);\n        expect(params.scope).to.eql(scope);\n        done();\n      });\n      utils.popup = spy;\n      hello.login('testable', {\n        scope: paddedScope\n      });\n    });","file":"specs/unit/core/hello.login.js","skipped":false,"dir":"tests"},{"name":"should use the correct and unencoded delimiter to separate scope","suites":["hello.login","options"],"updatePoint":{"line":200,"column":72,"index":6454},"line":200,"code":"    it('should use the correct and unencoded delimiter to separate scope', function (done) {\n      var basicScope = 'read_user,read_bikes';\n      var scopeDelim = '+';\n      hello.init({\n        test_delimit_scope: {\n          oauth: {\n            auth: 'https://testdemo/access',\n            version: 2\n          },\n          scope_delim: scopeDelim,\n          scope: {\n            basic: basicScope\n          }\n        }\n      });\n      var spy = sinon.spy(function (url, name, optins) {\n        expect(url).to.contain(basicScope.replace(/[\\+\\,\\s]/, scopeDelim));\n        done();\n      });\n      utils.popup = spy;\n      hello.login('test_delimit_scope');\n    });","file":"specs/unit/core/hello.login.js","skipped":false,"dir":"tests"},{"name":"should space encode the delimiter of multiple response_type's","suites":["hello.login","options"],"updatePoint":{"line":222,"column":70,"index":7118},"line":222,"code":"    it('should space encode the delimiter of multiple response_type\\'s', function (done) {\n      var opts = {\n        response_type: 'code grant_scopes'\n      };\n      var spy = sinon.spy(function (url, name) {\n        expect(url).to.contain('code%20grant_scopes');\n        done();\n      });\n      utils.popup = spy;\n      hello.login('testable', opts);\n    });","file":"specs/unit/core/hello.login.js","skipped":false,"dir":"tests"},{"name":"should substitute \"token\" for \"code\" when there is no Grant URL defined","suites":["hello.login","options"],"updatePoint":{"line":233,"column":79,"index":7489},"line":233,"code":"    it('should substitute \"token\" for \"code\" when there is no Grant URL defined', function (done) {\n      var opts = {\n        response_type: 'code grant_scopes'\n      };\n      hello.services.testable.oauth.grant = null;\n      var spy = sinon.spy(function (url, name) {\n        expect(url).to.contain('token%20grant_scopes');\n        done();\n      });\n      utils.popup = spy;\n      hello.login('testable', opts);\n    });","file":"specs/unit/core/hello.login.js","skipped":false,"dir":"tests"},{"name":"should give the popup the default options","suites":["hello.login","popup options"],"updatePoint":{"line":247,"column":49,"index":7929},"line":247,"code":"    it('should give the popup the default options', function (done) {\n      var spy = sinon.spy(function (url, name, options) {\n        expect(options.resizable).to.eql('1');\n        expect(options.scrollbars).to.eql('1');\n        expect(options.width).to.eql('500');\n        expect(options.height).to.eql('550');\n        done();\n      });\n      utils.popup = spy;\n      hello.login('testable');\n    });","file":"specs/unit/core/hello.login.js","skipped":false,"dir":"tests"},{"name":"should allow the popup options to be overridden","suites":["hello.login","popup options"],"updatePoint":{"line":258,"column":55,"index":8339},"line":258,"code":"    it('should allow the popup options to be overridden', function (done) {\n      var spy = sinon.spy(function (url, name, options) {\n        expect(options.location).to.eql('no');\n        expect(options.toolbar).to.eql('no');\n        expect(options.hidden).to.eql(true);\n        done();\n      });\n      utils.popup = spy;\n      hello.login('testable', {\n        popup: {\n          hidden: true,\n          location: 'no',\n          toolbar: 'no'\n        }\n      });\n    });","file":"specs/unit/core/hello.login.js","skipped":false,"dir":"tests"},{"name":"should not trigger the popup if there is a valid session","suites":["hello.login","option.force = false"],"updatePoint":{"line":291,"column":64,"index":9250},"line":291,"code":"    it('should not trigger the popup if there is a valid session', function (done) {\n      var spy = sinon.spy(done.bind(null, new Error('window.open should not be called')));\n      utils.popup = spy;\n      hello('testable').login({\n        force: false\n      }).then(function (r) {\n        expect(spy.notCalled).to.be.ok();\n        expect(r.authResponse).to.eql(session);\n        done();\n      });\n    });","file":"specs/unit/core/hello.login.js","skipped":false,"dir":"tests"},{"name":"should trigger the popup if the token has expired","suites":["hello.login","option.force = false"],"updatePoint":{"line":302,"column":57,"index":9650},"line":302,"code":"    it('should trigger the popup if the token has expired', function (done) {\n      var spy = sinon.spy(function () {\n        done();\n      });\n      utils.popup = spy;\n      session.expires = new Date().getTime() / 1e3 - 1000;\n      hello('testable').login({\n        force: false\n      });\n    });","file":"specs/unit/core/hello.login.js","skipped":false,"dir":"tests"},{"name":"should trigger the popup if the scopes have changed","suites":["hello.login","option.force = false"],"updatePoint":{"line":312,"column":59,"index":9951},"line":312,"code":"    it('should trigger the popup if the scopes have changed', function (done) {\n      var spy = sinon.spy(function () {\n        done();\n      });\n      utils.popup = spy;\n      hello('testable').login({\n        force: false,\n        scope: 'not-basic'\n      });\n    });","file":"specs/unit/core/hello.login.js","skipped":false,"dir":"tests"},{"name":"should attach custom parameters to the querystring","suites":["hello.login","custom query string parameters"],"updatePoint":{"line":324,"column":58,"index":10285},"line":324,"code":"    it('should attach custom parameters to the querystring', function (done) {\n      var options = {\n        custom: 'custom'\n      };\n      var spy = sinon.spy(function (url, name, options) {\n        var params = hello.utils.param(url.split('?')[1]);\n        expect(params).to.have.property('custom', options.custom);\n        done();\n      });\n      utils.popup = spy;\n      hello.login('testable', options);\n    });","file":"specs/unit/core/hello.login.js","skipped":false,"dir":"tests"},{"name":"should trigger an auth.init event before requesting the auth flow","suites":["hello.login","global events"],"updatePoint":{"line":338,"column":73,"index":10766},"line":338,"code":"    it('should trigger an auth.init event before requesting the auth flow', function (done) {\n      // Listen out for the auth-flow\n      hello.on('auth.init', function (e) {\n        expect(e).to.have.property('network', 'testable');\n        expect(spy.notCalled).to.be.ok();\n        done();\n      });\n\n      // Go no further\n      var spy = sinon.spy();\n      utils.popup = spy;\n\n      // Login\n      hello('testable').login({\n        force: true\n      });\n    });","file":"specs/unit/core/hello.login.js","skipped":false,"dir":"tests"},{"name":"should trigger an error when network is unknown","suites":["hello.logout"],"updatePoint":{"line":14,"column":53,"index":322},"line":14,"code":"  it('should trigger an error when network is unknown', function (done) {\n    // Make request\n    hello('unknown').logout().then(null, errorResponse('invalid_network', done));\n  });","file":"specs/unit/core/hello.logout.js","skipped":false,"dir":"tests"},{"name":"should assign a complete event","suites":["hello.logout"],"updatePoint":{"line":18,"column":36,"index":487},"line":18,"code":"  it('should assign a complete event', function (done) {\n    hello('unknown').logout(function () {\n      done();\n    });\n  });","file":"specs/unit/core/hello.logout.js","skipped":false,"dir":"tests"},{"name":"should throw an error events in the eventCompleted handler","suites":["hello.logout"],"updatePoint":{"line":23,"column":64,"index":642},"line":23,"code":"  it('should throw an error events in the eventCompleted handler', function (done) {\n    hello('unknown').logout(function (e) {\n      expect(e).to.have.property('error');\n      done();\n    });\n  });","file":"specs/unit/core/hello.logout.js","skipped":false,"dir":"tests"},{"name":"should remove the session from the localStorage","suites":["hello.logout","remove session from store"],"updatePoint":{"line":37,"column":55,"index":1060},"line":37,"code":"    it('should remove the session from the localStorage', function () {\n      var spy = sinon.spy(function () {\n        return {};\n      });\n      hello.utils.store = spy;\n      hello('test').logout();\n      expect(spy.calledWith('test', null)).to.be.ok();\n    });","file":"specs/unit/core/hello.logout.js","skipped":false,"dir":"tests"},{"name":"should call module.logout","suites":["hello.logout","force=true","module.logout handler"],"updatePoint":{"line":67,"column":35,"index":1880},"line":67,"code":"      it('should call module.logout', function (done) {\n        module.logout = function () {\n          done();\n        };\n        hello('testable').logout({\n          force: true\n        });\n      });","file":"specs/unit/core/hello.logout.js","skipped":false,"dir":"tests"},{"name":"should attach authResponse object to the options.authResponse","suites":["hello.logout","force=true","module.logout handler"],"updatePoint":{"line":75,"column":71,"index":2118},"line":75,"code":"      it('should attach authResponse object to the options.authResponse', function (done) {\n        module.logout = function (callback, options) {\n          expect(options).to.have.property('authResponse', session);\n          done();\n        };\n        hello('testable').logout({\n          force: true\n        });\n      });","file":"specs/unit/core/hello.logout.js","skipped":false,"dir":"tests"},{"name":"should set the service on the current instance only","suites":["hello.use"],"updatePoint":{"line":2,"column":57,"index":94},"line":2,"code":"  it('should set the service on the current instance only', function () {\n    var root = hello;\n    var rootService = hello.settings.default_service;\n    var instance = hello('instance');\n    var descendent = instance.use('descendent');\n    expect(hello.settings.default_service).to.be(rootService);\n    expect(instance.settings.default_service).to.be('instance');\n    expect(descendent.settings.default_service).to.be('descendent');\n  });","file":"specs/unit/core/hello.use.js","skipped":false,"dir":"tests"},{"name":"should return a new instance","suites":["hello.use"],"updatePoint":{"line":11,"column":34,"index":511},"line":11,"code":"  it('should return a new instance', function () {\n    var instance = hello('instance');\n    expect(instance).to.not.be(hello);\n  });","file":"specs/unit/core/hello.use.js","skipped":false,"dir":"tests"},{"name":"should listen to changes within shared storage and trigger global callbacks where they have otherwise not been triggered","suites":["Session monitor"],"updatePoint":{"line":13,"column":126,"index":387},"line":13,"code":"  it('should listen to changes within shared storage and trigger global callbacks where they have otherwise not been triggered', function (done) {\n    // Create a callback\n    var callbackName = hello.utils.globalEvent(function (obj) {\n      expect(obj).to.have.property('access_token', 'token');\n      expect(obj).to.have.property('expires_in', 3600);\n\n      // Should remove the callback from the session\n      expect(obj).to.not.have.property('callback');\n      done();\n    });\n\n    // Construct an AuthResponse\n    var obj = {\n      callback: callbackName,\n      access_token: 'token',\n      expires_in: 3600\n    };\n\n    // Store the new auth response and the global callback will be triggered\n    hello.utils.store('test', obj);\n  });","file":"specs/unit/core/session.monitor.js","skipped":false,"dir":"tests"},{"name":"should ignore services which do not have an id defined","suites":["Session monitor"],"line":34,"code":"  it.skip('should ignore services which do not have an id defined', function (done) {","file":"specs/unit/core/session.monitor.js","skipped":true,"dir":"tests"},{"name":"Should launch chrome.identity.launchWebAuthFlow","suites":["ChromeApp hello.utils.popup"],"updatePoint":{"line":9,"column":53,"index":319},"line":9,"code":"  it('Should launch chrome.identity.launchWebAuthFlow', function () {\n    var spy = sinon.spy();\n    chrome.identity.launchWebAuthFlow = spy;\n    hello.utils.popup('https://doma.in/oauth/auth', 'https://redirect.uri/path', {});\n    expect(spy.calledOnce).to.be.ok();\n  });","file":"specs/unit/ext/chromeapp/popup.js","skipped":false,"dir":"tests"},{"name":"should accept an object and arguments as first and second parameters and return an object","suites":["utils.args"],"updatePoint":{"line":3,"column":95,"index":162},"line":3,"code":"  it('should accept an object and arguments as first and second parameters and return an object', function () {\n    var value = args({}, []);\n    expect(value).to.be.an(Object);\n  });","file":"specs/unit/utils/args.js","skipped":false,"dir":"tests"},{"name":"should map arguments to an object","suites":["utils.args"],"updatePoint":{"line":7,"column":39,"index":290},"line":7,"code":"  it('should map arguments to an object', function () {\n    var value = args({\n      str: 's',\n      obj: 'o',\n      func: 'f'\n    }, ['String', {}, function () {}]);\n    expect(value).to.be.an('object');\n    expect(value.str).to.be.a('string');\n    expect(value.obj).to.be.an('object');\n    expect(value.func).to.be.a('function');\n  });","file":"specs/unit/utils/args.js","skipped":false,"dir":"tests"},{"name":"should interpret the order of arguments, so some can be ommited","suites":["utils.args"],"updatePoint":{"line":18,"column":69,"index":658},"line":18,"code":"  it('should interpret the order of arguments, so some can be ommited', function () {\n    var value = args({\n      str: 's',\n      obj: 'o',\n      func: 'f'\n    }, [function () {}]);\n    expect(value).to.be.an('object').and.to.not.have.property('str').and.to.not.have.property('obj');\n    expect(value.func).to.be.a('function');\n  });","file":"specs/unit/utils/args.js","skipped":false,"dir":"tests"},{"name":"should decipher whether the first argument is all the arguments represented as an object","suites":["utils.args"],"updatePoint":{"line":27,"column":94,"index":1018},"line":27,"code":"  it('should decipher whether the first argument is all the arguments represented as an object', function () {\n    var value = args({\n      str: 's',\n      obj: 'o',\n      func: 'f'\n    }, [{\n      func: function () {}\n    }]);\n    expect(value).to.be.an('object').and.to.not.have.property('str').and.to.not.have.property('obj');\n    expect(value.func).to.be.a('function');\n  });","file":"specs/unit/utils/args.js","skipped":false,"dir":"tests"},{"name":"should clone a simple object","suites":["utils.clone"],"updatePoint":{"line":6,"column":34,"index":156},"line":6,"code":"  it('should clone a simple object', function () {\n    var orig = {\n      prop: 'prop'\n    };\n    var clone = utils.clone(orig);\n\n    // Assert that its the same but different.\n    expect(clone).to.be.eql(orig).and.not.to.be.equal(orig);\n  });","file":"specs/unit/utils/clone.js","skipped":false,"dir":"tests"},{"name":"should not clone Blob values","suites":["utils.clone"],"updatePoint":{"line":16,"column":36,"index":424},"line":16,"code":"    it('should not clone Blob values', function () {\n      var blob = new Blob([new Int8Array([17, -45.3])], {\n        type: 'image/jpeg'\n      });\n      var orig = {\n        prop: blob\n      };\n      var clone = utils.clone(orig);\n\n      // Assert that its the same but different.\n      expect(clone.prop).to.be.a(Blob).and.to.be.equal(orig.prop);\n    });","file":"specs/unit/utils/clone.js","skipped":false,"dir":"tests"},{"name":"should not clone DOM element","suites":["utils.clone"],"updatePoint":{"line":29,"column":34,"index":783},"line":29,"code":"  it('should not clone DOM element', function () {\n    var orig = {\n      prop: document.createElement('input')\n    };\n    var clone = utils.clone(orig);\n\n    // Assert that its the same but different.\n    expect(clone.prop).to.be.a(window.Element || window.HTMLElement).and.to.be.equal(orig.prop);\n  });","file":"specs/unit/utils/clone.js","skipped":false,"dir":"tests"},{"name":"should clone arrays","suites":["utils.clone"],"updatePoint":{"line":38,"column":25,"index":1079},"line":38,"code":"  it('should clone arrays', function () {\n    var orig = [1, 2, 3];\n    var clone = utils.clone(orig);\n\n    // Assert that its the same but different.\n    expect(clone).to.be.eql(orig).and.to.not.be.equal(orig);\n  });","file":"specs/unit/utils/clone.js","skipped":false,"dir":"tests"},{"name":"should return primitive value (Number)","suites":["utils.clone"],"updatePoint":{"line":45,"column":44,"index":1316},"line":45,"code":"  it('should return primitive value (Number)', function () {\n    var orig = 1;\n    var clone = utils.clone(orig);\n\n    // Assert that its the same but different.\n    expect(clone).to.be.eql(orig);\n  });","file":"specs/unit/utils/clone.js","skipped":false,"dir":"tests"},{"name":"should return primitive value (null)","suites":["utils.clone"],"updatePoint":{"line":52,"column":42,"index":1517},"line":52,"code":"  it('should return primitive value (null)', function () {\n    var orig = null;\n    var clone = utils.clone(orig);\n\n    // Assert that its the same but different.\n    expect(clone).to.be.eql(orig);\n  });","file":"specs/unit/utils/clone.js","skipped":false,"dir":"tests"},{"name":"should return primitive value (String)","suites":["utils.clone"],"updatePoint":{"line":59,"column":44,"index":1723},"line":59,"code":"  it('should return primitive value (String)', function () {\n    var orig = 'string';\n    var clone = utils.clone(orig);\n\n    // Assert that its the same but different.\n    expect(clone).to.be.eql(orig);\n  });","file":"specs/unit/utils/clone.js","skipped":false,"dir":"tests"},{"name":"should clone Date objects","suites":["utils.clone"],"updatePoint":{"line":66,"column":31,"index":1920},"line":66,"code":"  it('should clone Date objects', function () {\n    var orig = new Date();\n    var clone = utils.clone(orig);\n\n    // Assert that its the same but different.\n    expect(clone).to.be.eql(orig);\n  });","file":"specs/unit/utils/clone.js","skipped":false,"dir":"tests"},{"name":"should clone arrays in objects","suites":["utils.clone"],"updatePoint":{"line":73,"column":36,"index":2124},"line":73,"code":"  it('should clone arrays in objects', function () {\n    var orig = {\n      foo: 'bar',\n      arr: [{\n        a: 'b',\n        c: 'd'\n      }, {\n        a: '1',\n        c: '3'\n      }]\n    };\n    var clone = utils.clone(orig);\n    expect(clone).to.be.eql(orig).and.to.not.be.equal(orig);\n  });","file":"specs/unit/utils/clone.js","skipped":false,"dir":"tests"},{"name":"should extrapolate the data in a form","suites":["utils.dataToJSON"],"updatePoint":{"line":14,"column":43,"index":365},"line":14,"code":"  it('should extrapolate the data in a form', function () {\n    // Create a form\n    test.innerHTML = '<form id=\"form\">' + ['<input name=\"key\" value=\"value\"/>', '<input name=\"key2\" value=\"value2\"/>', '<input name=\"file\" type=\"file\"/>'].join() + '</form>';\n\n    // Make request\n    var obj = {\n      data: document.getElementById('form')\n    };\n    var bool = utils.dataToJSON(obj);\n    if (bool) {\n      // This has been altered to a JSON object\n      expect(obj.data).to.be.a('object');\n      expect(obj.data.key).to.be('value');\n      expect(obj.data.key2).to.be('value2');\n      expect(obj.data.file).to.be.a('object');\n    } else {\n      // The data object can't be altered\n      expect(obj.data.tagName.toUpperCase()).to.be('FORM');\n    }\n  });","file":"specs/unit/utils/dataToJSON.js","skipped":false,"dir":"tests"},{"name":"should return the values which are in the second array but not the first","suites":["utils.diff"],"updatePoint":{"line":3,"column":78,"index":141},"line":3,"code":"  it('should return the values which are in the second array but not the first', function () {\n    var value = utils.diff([1, 3], [1, 2, 3]);\n    expect(value).to.eql([2]);\n    value = utils.diff([1, 2, 3], [1, 3]);\n    expect(value).to.eql([]);\n  });","file":"specs/unit/utils/diff.js","skipped":false,"dir":"tests"},{"name":"should return true, if type is an HTMLInputElement matches \"input\"","suites":["utils.domInstance"],"updatePoint":{"line":3,"column":72,"index":160},"line":3,"code":"  it('should return true, if type is an HTMLInputElement matches \"input\"', function () {\n    var type = 'input';\n    var value = domInstance(type, document.createElement(type));\n    expect(value).to.equal(true);\n  });","file":"specs/unit/utils/domInstance.js","skipped":false,"dir":"tests"},{"name":"should return false, if type is an HTMLInputElement matches \"form\"","suites":["utils.domInstance"],"updatePoint":{"line":8,"column":72,"index":378},"line":8,"code":"  it('should return false, if type is an HTMLInputElement matches \"form\"', function () {\n    var type = 'input';\n    var value = domInstance('form', document.createElement(type));\n    expect(value).to.equal(false);\n  });","file":"specs/unit/utils/domInstance.js","skipped":false,"dir":"tests"},{"name":"should return false, if an object posess as an HTMLInputElement","suites":["utils.domInstance"],"updatePoint":{"line":13,"column":69,"index":596},"line":13,"code":"  it('should return false, if an object posess as an HTMLInputElement', function () {\n    var type = 'input';\n    var value = domInstance('input', {\n      tagName: type\n    });\n    expect(value).to.equal(false);\n  });","file":"specs/unit/utils/domInstance.js","skipped":false,"dir":"tests"},{"name":"should return false, if second parameter is ommited or null","suites":["utils.domInstance"],"updatePoint":{"line":20,"column":65,"index":810},"line":20,"code":"  it('should return false, if second parameter is ommited or null', function () {\n    expect(domInstance('input')).to.equal(false);\n    expect(domInstance('input', false)).to.equal(false);\n    expect(domInstance('input', true)).to.equal(false);\n    expect(domInstance('input', null)).to.equal(false);\n  });","file":"specs/unit/utils/domInstance.js","skipped":false,"dir":"tests"},{"name":"should bind events by name and be able to trigger them by name","suites":["utils.event"],"updatePoint":{"line":17,"column":68,"index":400},"line":17,"code":"  it('should bind events by name and be able to trigger them by name', function () {\n    // Make request\n    var spy = sinon.spy(function (data, type) {\n      expect(eventName).to.be(type);\n      expect(arbitaryData).to.be(data);\n    });\n    hello.on(eventName, spy);\n    hello.emit(eventName, arbitaryData);\n    expect(spy.called).to.be.ok();\n  });","file":"specs/unit/utils/events.js","skipped":false,"dir":"tests"},{"name":"should listen to any event by using a \"*\"","suites":["utils.event"],"updatePoint":{"line":27,"column":47,"index":729},"line":27,"code":"  it('should listen to any event by using a \"*\"', function () {\n    // Make request\n    var spy = sinon.spy(function (data, type) {\n      expect(eventName).to.be(type);\n      expect(arbitaryData).to.be(data);\n    });\n    hello.on('*', spy);\n    hello.emit(eventName, arbitaryData);\n    expect(spy.called).to.be.ok();\n  });","file":"specs/unit/utils/events.js","skipped":false,"dir":"tests"},{"name":"should unbind an event by name and callback","suites":["utils.event"],"updatePoint":{"line":37,"column":49,"index":1054},"line":37,"code":"  it('should unbind an event by name and callback', function () {\n    // Listeners\n    var spy = sinon.spy(function () {\n      // Should not be called.\n    });\n    var spy2 = sinon.spy(function () {\n      // Should not be called.\n    });\n\n    // Bind\n    hello.on(eventName, spy);\n    hello.on(eventName, spy2);\n\n    // Remove\n    hello.off(eventName, spy);\n\n    // Trigger\n    hello.emit(eventName);\n\n    // Test spies\n    expect(!spy.called).to.be.ok();\n    expect(spy2.called).to.be.ok();\n  });","file":"specs/unit/utils/events.js","skipped":false,"dir":"tests"},{"name":"should unbind all events by name","suites":["utils.event"],"updatePoint":{"line":60,"column":38,"index":1541},"line":60,"code":"  it('should unbind all events by name', function () {\n    // Listeners\n    var spy = sinon.spy(function () {\n      // Should not be called.\n    });\n    var spy2 = sinon.spy(function () {\n      // Should not be called.\n    });\n\n    // Bind\n    hello.on(eventName, spy);\n    hello.on(eventName, spy2);\n\n    // Remove\n    hello.off(eventName);\n\n    // Trigger\n    hello.emit(eventName);\n\n    // Test spies\n    expect(!spy.called).to.be.ok();\n    expect(!spy2.called).to.be.ok();\n  });","file":"specs/unit/utils/events.js","skipped":false,"dir":"tests"},{"name":"should trigger events on its proto (predecessor in chain)","suites":["utils.event"],"updatePoint":{"line":83,"column":63,"index":2049},"line":83,"code":"  it('should trigger events on its proto (predecessor in chain)', function () {\n    // PROTO\n    // Listeners\n    var spy = sinon.spy(function () {\n      // Should not be called.\n    });\n\n    // Bind\n    hello.on(eventName, spy);\n\n    // PROTO\n    var child = Object.create(hello);\n    var spy2 = sinon.spy(function () {\n      // Should not be called.\n    });\n    hello.on(eventName, spy2);\n\n    // Trigger\n    hello.emit(eventName);\n\n    // Test spies\n    expect(spy.called).to.be.ok();\n    expect(spy2.called).to.be.ok();\n  });","file":"specs/unit/utils/events.js","skipped":false,"dir":"tests"},{"name":"should overide the properties in the first object with those within the second","suites":["utils.extend"],"updatePoint":{"line":3,"column":84,"index":157},"line":3,"code":"  it('should overide the properties in the first object with those within the second', function () {\n    var a = {\n      key: 'valueA'\n    };\n    var b = {\n      key: 'valueB'\n    };\n    extend(a, b);\n\n    // Check a is like b\n    expect(a).to.eql(b);\n\n    // But a is not b\n    expect(a).to.not.equal(b);\n  });","file":"specs/unit/utils/extend.js","skipped":false,"dir":"tests"},{"name":"should merge child objects","suites":["utils.extend"],"updatePoint":{"line":18,"column":32,"index":417},"line":18,"code":"  it('should merge child objects', function () {\n    var a = {\n      key: 'valueA'\n    };\n    a.child = {};\n    a.child.key = 'valueA';\n    a.child.key2 = 'valueA';\n    var b = {\n      key: 'valueB'\n    };\n    b.child = b;\n    extend(a, b);\n\n    // Check a is like b\n    expect(a).to.not.eql(b);\n  });","file":"specs/unit/utils/extend.js","skipped":false,"dir":"tests"},{"name":"should merge arrays","suites":["utils.extend"],"updatePoint":{"line":34,"column":25,"index":712},"line":34,"code":"  it('should merge arrays', function () {\n    var a = [1];\n    var b = [2];\n    extend(a, b);\n\n    // Check arrays have merged\n    expect(a).to.eql([1, 2]);\n  });","file":"specs/unit/utils/extend.js","skipped":false,"dir":"tests"},{"name":"should clone arrays if one does not exist","suites":["utils.extend"],"updatePoint":{"line":42,"column":47,"index":897},"line":42,"code":"  it('should clone arrays if one does not exist', function () {\n    var a = {};\n    var b = {\n      arr: [1]\n    };\n    extend(a, b);\n\n    // Check arrays are the same, but different\n    expect(a).to.have.property('arr');\n    expect(a.arr).to.eql(b.arr);\n    expect(a.arr).to.not.equal(b.arr);\n  });","file":"specs/unit/utils/extend.js","skipped":false,"dir":"tests"},{"name":"should merge arguments into one new object","suites":["utils.merge"],"updatePoint":{"line":3,"column":48,"index":112},"line":3,"code":"  it('should merge arguments into one new object', function () {\n    var a = {\n      key: 'valueA'\n    };\n    var b = {\n      key: 'valueB'\n    };\n    var value = utils.merge(a, b);\n\n    // Check: a is like b\n    expect(value).to.eql(b);\n\n    // But a is not b\n    expect(value).to.not.equal(b);\n  });","file":"specs/unit/utils/merge.js","skipped":false,"dir":"tests"},{"name":"should accept an object and return a string","suites":["utils.param"],"updatePoint":{"line":9,"column":49,"index":242},"line":9,"code":"  it('should accept an object and return a string', function () {\n    var value = util({});\n    expect(value).to.be.a('string');\n  });","file":"specs/unit/utils/param.js","skipped":false,"dir":"tests"},{"name":"should accept a string and return an object","suites":["utils.param"],"updatePoint":{"line":13,"column":49,"index":377},"line":13,"code":"  it('should accept a string and return an object', function () {\n    var value = util('');\n    expect(value).to.be.an(Object);\n  });","file":"specs/unit/utils/param.js","skipped":false,"dir":"tests"},{"name":"should turn URL query into an object","suites":["utils.param"],"updatePoint":{"line":17,"column":42,"index":504},"line":17,"code":"  it('should turn URL query into an object', function () {\n    // Convert there and back\n\n    var value = util(util(test));\n    expect(value).to.eql(test);\n  });","file":"specs/unit/utils/param.js","skipped":false,"dir":"tests"},{"name":"should turn an object into a URL string","suites":["utils.param"],"updatePoint":{"line":23,"column":45,"index":669},"line":23,"code":"  it('should turn an object into a URL string', function () {\n    // Convert there and back\n\n    var value = util(test);\n    expect(value).to.be.a('string');\n  });","file":"specs/unit/utils/param.js","skipped":false,"dir":"tests"},{"name":"should only include hasOwnProperties from an object","suites":["utils.param"],"updatePoint":{"line":29,"column":57,"index":845},"line":29,"code":"  it('should only include hasOwnProperties from an object', function () {\n    // Convert there and back\n\n    var obj = Object.create({\n      ignore: 'this should be excluded'\n    });\n    obj.included = 'this is included';\n    var value = util(util(obj));\n    expect(value).to.have.property('included').and.not.to.have.property('ignore');\n  });","file":"specs/unit/utils/param.js","skipped":false,"dir":"tests"},{"name":"should call window.open with url","suites":["utils.popup"],"updatePoint":{"line":15,"column":38,"index":416},"line":15,"code":"  it('should call window.open with url', function () {\n    var url = 'https://doma.in/oauth/auth';\n    var spy = sinon.spy(function (_url, name, options) {\n      _url = safariHack(_url);\n      expect(url).to.eql(_url);\n    });\n    window.open = spy;\n    hello.utils.popup(url, 'https://redirect.uri/path', {});\n    expect(spy.calledOnce).to.be.ok();\n  });","file":"specs/unit/utils/popup.js","skipped":false,"dir":"tests"},{"name":"should set top and left when width and height are provided","suites":["utils.popup"],"updatePoint":{"line":25,"column":64,"index":798},"line":25,"code":"  it('should set top and left when width and height are provided', function () {\n    var url = 'https://doma.in/oauth/auth';\n    var spy = sinon.spy(function (_url, name, options) {\n      _url = safariHack(_url);\n      expect(options).to.contain('top=');\n      expect(options).to.contain('left=');\n    });\n    window.open = spy;\n    hello.utils.popup(url, 'https://redirect.uri/path', {\n      width: 500,\n      height: 500\n    });\n    expect(spy.calledOnce).to.be.ok();\n  });","file":"specs/unit/utils/popup.js","skipped":false,"dir":"tests"},{"name":"should append arguments to a url","suites":["utils.qs"],"updatePoint":{"line":9,"column":38,"index":199},"line":9,"code":"  it('should append arguments to a url', function () {\n    var value = u.qs('https://api.com/path?q=%22root%22+in+parents+and+trashed=false&maxResults=5', {\n      access_token: 'token',\n      path: 'path'\n    });\n    expect(value).to.eql('https://api.com/path?q=%22root%22+in+parents+and+trashed=false&maxResults=5&access_token=token&path=path');\n  });","file":"specs/unit/utils/qs.js","skipped":false,"dir":"tests"},{"name":"should overwrite existing arguments in a url","suites":["utils.qs"],"updatePoint":{"line":16,"column":50,"index":564},"line":16,"code":"  it('should overwrite existing arguments in a url', function () {\n    var value = u.qs('https://api.com/path?q=%22root%22+in+parents+and+trashed=false&maxResults=5', {\n      q: 'word',\n      access_token: 'token'\n    });\n    expect(value).to.eql('https://api.com/path?q=word&maxResults=5&access_token=token');\n  });","file":"specs/unit/utils/qs.js","skipped":false,"dir":"tests"},{"name":"should by default use a XMLHttpRequest","suites":["utils.request"],"updatePoint":{"line":8,"column":44,"index":206},"line":8,"code":"  it('should by default use a XMLHttpRequest', function () {\n    var p = {\n      url: '/localrequest'\n    };\n    var spy = sinon.spy(function () {\n      return {};\n    });\n\n    // Implicitly undefined\n    utils.xhr = spy;\n    utils.request(p);\n    expect(spy.called).to.be.ok();\n    spy = sinon.spy(function () {\n      return {};\n    });\n\n    // Explicitly undefined\n    p.xhr = undefined;\n    utils.xhr = spy;\n    utils.request(p);\n    expect(spy.called).to.be.ok();\n  });","file":"specs/unit/utils/request.js","skipped":false,"dir":"tests"},{"name":"should do nothing if the current window has no state parameter","suites":["utils.responseHandler","OAuth handler"],"updatePoint":{"line":46,"column":70,"index":1349},"line":46,"code":"    it('should do nothing if the current window has no state parameter', function () {\n      _window.location = mockLocation('http://adodson.com/redirect.html');\n      var spy = sinon.spy();\n      _window.close = spy;\n      utils.responseHandler(_window, _parent);\n      expect(spy.callCount).to.be(0);\n    });","file":"specs/unit/utils/responseHandler.js","skipped":false,"dir":"tests"},{"name":"should redirect to oauth proxy and preserve the query string","suites":["utils.responseHandler","OAuth handler"],"updatePoint":{"line":53,"column":68,"index":1658},"line":53,"code":"    it('should redirect to oauth proxy and preserve the query string', function () {\n      _state.oauth_proxy = 'http://adodson.com/oauth_proxy?foo=bar';\n      _state.redirect_uri = 'http://adodson.com/';\n      _window.location = mockLocation('http://adodson.com/redirect.html?code=abc&state=' + JSON.stringify(_state));\n      var spy = sinon.spy();\n      _window.location.assign = spy;\n      utils.responseHandler(_window, _parent);\n\n      // Using regex, instead of eq comparison, because the order\n      // of query string parameters is not guaranteed\n      expect(spy.args[0][0]).to.match(/foo=bar/);\n      expect(spy.args[0][0]).to.match(/redirect_uri=/);\n    });","file":"specs/unit/utils/responseHandler.js","skipped":false,"dir":"tests"},{"name":"should redirect to page_uri","suites":["utils.responseHandler","OAuth handler"],"updatePoint":{"line":66,"column":35,"index":2294},"line":66,"code":"    it('should redirect to page_uri', function () {\n      _state.page_uri = 'https://example.com';\n      _window.location = mockLocation('http://adodson.com/redirect.html?state=' + JSON.stringify(_state));\n      var spy = sinon.spy();\n      _window.location.assign = spy;\n      utils.responseHandler(_window, _parent);\n\n      // Should redirect to page_uri\n      expect(spy.args[0][0]).to.match(/https:\\/\\/example.com/);\n    });","file":"specs/unit/utils/responseHandler.js","skipped":false,"dir":"tests"},{"name":"should redirect to page_uri  if 'HELLOJS_REDIRECT_URL='","suites":["utils.responseHandler","OAuth handler"],"updatePoint":{"line":80,"column":99,"index":3019},"line":80,"code":"      it(`should redirect to page_uri ${PAGE_URI} if 'HELLOJS_REDIRECT_URL=${HELLOJS_REDIRECT_URL}'`, function () {\n        _state.page_uri = PAGE_URI;\n        _window.location = mockLocation('http://adodson.com/redirect.html?state=' + JSON.stringify(_state));\n        var spy = sinon.spy();\n        _window.location.assign = spy;\n        if (HELLOJS_REDIRECT_URL !== undefined) {\n          _window.HELLOJS_REDIRECT_URL = HELLOJS_REDIRECT_URL;\n        }\n        utils.responseHandler(_window, _parent);\n\n        // Should redirect to page_uri\n        expect(spy.args[0][0]).to.eql(PAGE_URI);\n      });","file":"specs/unit/utils/responseHandler.js","skipped":false,"dir":"tests"},{"name":"should not redirect to page_uri  if 'HELLOJS_REDIRECT_URL='","suites":["utils.responseHandler","OAuth handler"],"updatePoint":{"line":96,"column":103,"index":3768},"line":96,"code":"      it(`should not redirect to page_uri ${PAGE_URI} if 'HELLOJS_REDIRECT_URL=${HELLOJS_REDIRECT_URL}'`, function () {\n        _state.page_uri = PAGE_URI;\n        _window.location = mockLocation('http://adodson.com/redirect.html?state=' + JSON.stringify(_state));\n        var spy = sinon.spy();\n        _window.location.assign = spy;\n        _window.HELLOJS_REDIRECT_URL = HELLOJS_REDIRECT_URL;\n        utils.responseHandler(_window, _parent);\n\n        // Should not redirect to anywhere\n        expect(spy.notCalled);\n      });","file":"specs/unit/utils/responseHandler.js","skipped":false,"dir":"tests"},{"name":"should return the access_token to the parent if the current window location contains a access_token and a state parameter containing a callback and network","suites":["utils.responseHandler","OAuth handler"],"updatePoint":{"line":108,"column":163,"index":4366},"line":108,"code":"    it('should return the access_token to the parent if the current window location contains a access_token and a state parameter containing a callback and network', function () {\n      var spy = sinon.spy();\n      _window.close = spy;\n      var spy2 = sinon.spy();\n      _parent._hellojs_callbackTestFunc = spy2;\n      utils.responseHandler(_window, _parent);\n      expect(spy.calledOnce).to.be.ok();\n      expect(spy2.calledOnce).to.be.ok();\n      var response = spy2.args[0][0];\n      expect(response).to.be.a('string');\n      response = JSON.parse(response);\n      expect(response).to.have.property('network', _state.network);\n      expect(response).to.have.property('access_token', _accessToken);\n    });","file":"specs/unit/utils/responseHandler.js","skipped":false,"dir":"tests"},{"name":"should always close window despite a parent handler which throws an exception","suites":["utils.responseHandler","OAuth handler"],"updatePoint":{"line":122,"column":85,"index":4998},"line":122,"code":"    it('should always close window despite a parent handler which throws an exception', function () {\n      var spy = sinon.spy();\n      _window.close = spy;\n      var spy2 = sinon.spy(function () {\n        throw 'Error';\n      });\n      _parent._hellojs_callbackTestFunc = spy2;\n      utils.responseHandler(_window, _parent);\n      expect(spy.calledOnce).to.be.ok();\n      expect(spy2.calledOnce).to.be.ok();\n      var response = spy2.args[0][0];\n      expect(response).to.be.a('string');\n      response = JSON.parse(response);\n      expect(response).to.have.property('network', _state.network);\n      expect(response).to.have.property('access_token', _accessToken);\n    });","file":"specs/unit/utils/responseHandler.js","skipped":false,"dir":"tests"},{"name":"should close the iframe window","suites":["utils.responseHandler","OAuth handler"],"updatePoint":{"line":138,"column":38,"index":5627},"line":138,"code":"    it('should close the iframe window', function (done) {\n      window._hellojs_testIframeCloses = function () {\n        // After the initial load we can expect this to have removed itself;\n        setTimeout(function () {\n          expect(frm.parentNode).to.eql(null);\n          done();\n        }, 100);\n      };\n\n      // In this example we load a page containing the responseHandler script on it.\n      var frm = document.createElement('iframe');\n      frm.src = 'redirect.html?state={}&network=test&callback=_hellojs_testIframeCloses&access_token=token';\n      document.body.appendChild(frm);\n    });","file":"specs/unit/utils/responseHandler.js","skipped":false,"dir":"tests"},{"name":"should return OAuth failures","suites":["utils.responseHandler","OAuth handler"],"updatePoint":{"line":152,"column":36,"index":6231},"line":152,"code":"    it('should return OAuth failures', function () {\n      var spy = sinon.spy();\n      _window.close = spy;\n      _window.location = mockLocation('http://adodson.com/redirect.html?error=error&error_description=description&state=' + JSON.stringify(_state));\n      var spy2 = sinon.spy();\n      _parent._hellojs_callbackTestFunc = spy2;\n      utils.responseHandler(_window, _parent);\n      expect(spy.calledOnce).to.be.ok();\n      expect(spy2.calledOnce).to.be.ok();\n      var response = spy2.args[0][0];\n      expect(response).to.be.a('string');\n      response = JSON.parse(response);\n      expect(response).to.have.property('error');\n      expect(response.error).to.have.property('code', 'error').and.to.have.property('message', 'description');\n    });","file":"specs/unit/utils/responseHandler.js","skipped":false,"dir":"tests"},{"name":"should call hello.utils.store with the authResponse including callback property, if the callback was not found on the parent","suites":["utils.responseHandler","OAuth handler"],"updatePoint":{"line":167,"column":132,"index":7081},"line":167,"code":"    it('should call hello.utils.store with the authResponse including callback property, if the callback was not found on the parent', function () {\n      var spy = sinon.spy();\n      _window.close = spy;\n\n      // Remove the global callback function\n      delete _parent._hellojs_callbackTestFunc;\n\n      // Spy on the store function\n      var spy2 = sinon.spy();\n      utils.store = spy2;\n\n      // Trigger the response handler\n      utils.responseHandler(_window, _parent);\n      expect(spy.calledOnce).to.be.ok();\n      expect(spy2.calledOnce).to.be.ok();\n\n      // Should set the callback name along with the auth response.\n      expect(spy2.args[0][1]).to.have.property('callback', '_hellojs_callbackTestFunc');\n    });","file":"specs/unit/utils/responseHandler.js","skipped":false,"dir":"tests"},{"name":"should return the data placed into the store","suites":["utils.store"],"updatePoint":{"line":13,"column":50,"index":287},"line":13,"code":"  it('should return the data placed into the store', function () {\n    expect(store(label)).to.eql(data);\n  });","file":"specs/unit/utils/store.js","skipped":false,"dir":"tests"},{"name":"should update data placed into the store","suites":["utils.store"],"updatePoint":{"line":16,"column":46,"index":395},"line":16,"code":"  it('should update data placed into the store', function () {\n    var update = {\n      updated: 'update'\n    };\n    store(label, update);\n    expect(store(label)).to.eql(update);\n  });","file":"specs/unit/utils/store.js","skipped":false,"dir":"tests"},{"name":"should delete data placed into the store","suites":["utils.store"],"updatePoint":{"line":23,"column":46,"index":581},"line":23,"code":"  it('should delete data placed into the store', function () {\n    store(label, null);\n    expect(store(label)).to.equal(null);\n  });","file":"specs/unit/utils/store.js","skipped":false,"dir":"tests"},{"name":"should return null if data not found","suites":["utils.store"],"updatePoint":{"line":27,"column":42,"index":711},"line":27,"code":"  it('should return null if data not found', function () {\n    expect(store('notfound')).to.equal(null);\n  });","file":"specs/unit/utils/store.js","skipped":false,"dir":"tests"},{"name":"should convert a data-URI to a Blob","suites":["utils.toBlob"],"updatePoint":{"line":8,"column":43,"index":345},"line":8,"code":"    it('should convert a data-URI to a Blob', function () {\n      var value = utils.toBlob(test);\n\n      // Assert that its the same but different.\n      expect(value).to.be.a(Blob);\n    });","file":"specs/unit/utils/toBlob.js","skipped":false,"dir":"tests"},{"name":"should return the item if it is not a dataURI, or otherwise the browser doeas not support blobs","suites":["utils.toBlob"],"updatePoint":{"line":14,"column":103,"index":596},"line":14,"code":"    it('should return the item if it is not a dataURI, or otherwise the browser doeas not support blobs', function () {\n      var invalid = 'http://' + test;\n      var value = utils.toBlob(invalid);\n\n      // Assert that it's the same but different.\n      expect(value).to.equal(invalid);\n    });","file":"specs/unit/utils/toBlob.js","skipped":false,"dir":"tests"},{"name":"should return current URL, if no URL is given","suites":["utils.url"],"updatePoint":{"line":6,"column":51,"index":318},"line":6,"code":"  it('should return current URL, if no URL is given', function () {\n    var path = Url().href;\n    expect(path).to.equal(window.location.href);\n  });","file":"specs/unit/utils/url.js","skipped":false,"dir":"tests"},{"name":"should return a full URL, if a full URL is given","suites":["utils.url"],"updatePoint":{"line":10,"column":54,"index":471},"line":10,"code":"  it('should return a full URL, if a full URL is given', function () {\n    var path = 'http://test/' + testLocationFilename;\n    var url = Url(path);\n    expect(url.href).to.equal(path);\n    expect(url.hostname).to.equal('test');\n    expect(url.protocol).to.equal('http:');\n  });","file":"specs/unit/utils/url.js","skipped":false,"dir":"tests"},{"name":"should return a full URL, if a protocol-less URL is given","suites":["utils.url"],"updatePoint":{"line":17,"column":63,"index":760},"line":17,"code":"  it('should return a full URL, if a protocol-less URL is given', function () {\n    var url = '//test/' + testLocationFilename;\n    var path = Url(url).href;\n    expect(path).to.equal(window.location.protocol + url);\n  });","file":"specs/unit/utils/url.js","skipped":false,"dir":"tests"},{"name":"should return a full URL, if a base-path is given","suites":["utils.url"],"updatePoint":{"line":22,"column":55,"index":975},"line":22,"code":"  it('should return a full URL, if a base-path is given', function () {\n    var url = '/test/' + testLocationFilename;\n    var path = Url(url).href;\n    expect(path).to.equal(testLocationRoot + url);\n  });","file":"specs/unit/utils/url.js","skipped":false,"dir":"tests"},{"name":"should return a full URL, if a relative-path is given","suites":["utils.url"],"updatePoint":{"line":27,"column":59,"index":1185},"line":27,"code":"  it('should return a full URL, if a relative-path is given', function () {\n    var url = './' + testLocationFilename;\n    var path = Url(url).href;\n    expect(path).to.equal(testLocationRoot + (testLocationDir + url.replace('./', '')));\n  });","file":"specs/unit/utils/url.js","skipped":false,"dir":"tests"},{"name":"should return a full URL, if a relative-ascendant-path is given","suites":["utils.url"],"updatePoint":{"line":32,"column":69,"index":1439},"line":32,"code":"  it('should return a full URL, if a relative-ascendant-path is given', function () {\n    var url = '../' + testLocationFilename;\n    var path = Url(url).href;\n    expect(path).to.equal(testLocationRoot + testLocationDir.replace(/\\/[^\\/]+\\/$/, '/') + testLocationFilename);\n  });","file":"specs/unit/utils/url.js","skipped":false,"dir":"tests"},{"name":"should return a full URL, if a deeper relative-ascendant-path is given","suites":["utils.url"],"updatePoint":{"line":37,"column":76,"index":1726},"line":37,"code":"  it('should return a full URL, if a deeper relative-ascendant-path is given', function () {\n    var url = '../../' + testLocationFilename;\n    var path = Url(url).href;\n    expect(path).to.equal(testLocationRoot + testLocationDir.replace(/\\/[^\\/]+\\/$/, '/').replace(/\\/[^\\/]+\\/$/, '/') + testLocationFilename);\n  });","file":"specs/unit/utils/url.js","skipped":false,"dir":"tests"},{"name":"should return a full URL, if a complex relative-ascendant-path is given","suites":["utils.url"],"updatePoint":{"line":42,"column":77,"index":2045},"line":42,"code":"  it('should return a full URL, if a complex relative-ascendant-path is given', function () {\n    var url = '../../asdasd/asdasd/../../' + testLocationFilename;\n    var path = Url(url).href;\n    expect(path).to.equal(testLocationRoot + testLocationDir.replace(/\\/[^\\/]+\\/$/, '/').replace(/\\/[^\\/]+\\/$/, '/') + testLocationFilename);\n  });","file":"specs/unit/utils/url.js","skipped":false,"dir":"tests"}]}