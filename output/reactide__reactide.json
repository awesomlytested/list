{"repo":"reactide/reactide","url":"https://github.com/reactide/reactide","branch":"master","configs":[{"package":"reactide","lang":"js","dir":"test","framework":"mocha","pattern":"**/*.{js,ts}"}],"tests":[{"name":"should render","suites":["React Components","CreateForm"],"updatePoint":{"line":26,"column":21,"index":1101},"line":26,"code":"    it('should render', () => {\n      const wrapper = shallow( /*#__PURE__*/React.createElement(CreateForm, {\n        createItem: () => {}\n      }));\n      expect(wrapper.exists()).toEqual(true);\n    });","file":"test.js","skipped":false,"dir":"test"},{"name":"should fire keypress event when key is pressed","suites":["React Components","CreateForm"],"updatePoint":{"line":32,"column":54,"index":1338},"line":32,"code":"    it('should fire keypress event when key is pressed', () => {\n      const spy = sinon.spy();\n      const wrapper = shallow( /*#__PURE__*/React.createElement(CreateForm, {\n        createItem: spy\n      }));\n      wrapper.find('input').simulate('keyPress');\n      expect(spy.called).toEqual(true);\n    });","file":"test.js","skipped":false,"dir":"test"},{"name":"should render","suites":["React Components","CreateMenu"],"updatePoint":{"line":42,"column":21,"index":1651},"line":42,"code":"    it('should render', () => {\n      const wrapper = shallow( /*#__PURE__*/React.createElement(CreateMenu, {\n        createMenuHandler: () => {},\n        id: 1\n      }));\n      expect(wrapper.exists()).toEqual(true);\n    });","file":"test.js","skipped":false,"dir":"test"},{"name":"should fire","suites":["React Components","CreateMenu","File create onClick"],"updatePoint":{"line":50,"column":21,"index":1921},"line":50,"code":"      it('should fire', () => {\n        const spy = sinon.spy();\n        const wrapper = shallow( /*#__PURE__*/React.createElement(CreateMenu, {\n          createMenuHandler: spy,\n          id: 1\n        }));\n        wrapper.find('button').first().simulate('click');\n        expect(spy.called).toEqual(true);\n      });","file":"test.js","skipped":false,"dir":"test"},{"name":"should be called with proper params","suites":["React Components","CreateMenu","File create onClick"],"updatePoint":{"line":59,"column":45,"index":2263},"line":59,"code":"      it('should be called with proper params', () => {\n        const spy = sinon.spy();\n        const wrapper = shallow( /*#__PURE__*/React.createElement(CreateMenu, {\n          createMenuHandler: spy,\n          id: 1\n        }));\n        wrapper.find('button').first().simulate('click');\n        expect(spy.calledWith(1, 'file')).toEqual(true);\n      });","file":"test.js","skipped":false,"dir":"test"},{"name":"should fire","suites":["React Components","CreateMenu","Directory create onClick"],"updatePoint":{"line":70,"column":21,"index":2653},"line":70,"code":"      it('should fire', () => {\n        const spy = sinon.spy();\n        const wrapper = shallow( /*#__PURE__*/React.createElement(CreateMenu, {\n          createMenuHandler: spy\n        }));\n        wrapper.find('button').at(1).simulate('click');\n        expect(spy.called).toEqual(true);\n      });","file":"test.js","skipped":false,"dir":"test"},{"name":"should be called with proper params","suites":["React Components","CreateMenu","Directory create onClick"],"updatePoint":{"line":78,"column":45,"index":2976},"line":78,"code":"      it('should be called with proper params', () => {\n        const spy = sinon.spy();\n        const wrapper = shallow( /*#__PURE__*/React.createElement(CreateMenu, {\n          createMenuHandler: spy,\n          id: 1\n        }));\n        wrapper.find('button').at(1).simulate('click');\n        expect(spy.calledWith(1, 'directory')).toEqual(true);\n      });","file":"test.js","skipped":false,"dir":"test"},{"name":"should render","suites":["React Components","DeletePrompt"],"updatePoint":{"line":90,"column":21,"index":3361},"line":90,"code":"    it('should render', () => {\n      const wrapper = shallow( /*#__PURE__*/React.createElement(DeletePrompt, {\n        deletePromptHandler: () => {}\n      }));\n      expect(wrapper.exists()).toEqual(true);\n    });","file":"test.js","skipped":false,"dir":"test"},{"name":"should render prop name","suites":["React Components","DeletePrompt"],"updatePoint":{"line":96,"column":31,"index":3586},"line":96,"code":"    it('should render prop name', () => {\n      const wrapper = shallow( /*#__PURE__*/React.createElement(DeletePrompt, {\n        deletePromptHandler: () => {},\n        name: \"Jonny Greenwood\"\n      }));\n      expect(wrapper.find('h1').text()).toEqual('Are you sure you want to delete Jonny Greenwood?');\n    });","file":"test.js","skipped":false,"dir":"test"},{"name":"should be false when no is clicked","suites":["React Components","DeletePrompt"],"updatePoint":{"line":103,"column":42,"index":3910},"line":103,"code":"    it('should be false when no is clicked', () => {\n      const spy = sinon.spy();\n      const wrapper = shallow( /*#__PURE__*/React.createElement(DeletePrompt, {\n        deletePromptHandler: spy,\n        name: \"Jonny Greenwood\"\n      }));\n      wrapper.find('button').first().simulate('click');\n      expect(spy.calledWith(false)).toEqual(true);\n    });","file":"test.js","skipped":false,"dir":"test"},{"name":"should be true when yes is clicked","suites":["React Components","DeletePrompt"],"updatePoint":{"line":112,"column":42,"index":4266},"line":112,"code":"    it('should be true when yes is clicked', () => {\n      const spy = sinon.spy();\n      const wrapper = shallow( /*#__PURE__*/React.createElement(DeletePrompt, {\n        deletePromptHandler: spy,\n        name: \"Jonny Greenwood\"\n      }));\n      wrapper.find('button').at(1).simulate('click');\n      expect(spy.calledWith(true)).toEqual(true);\n    });","file":"test.js","skipped":false,"dir":"test"},{"name":"should render","suites":["React Components","Directory"],"updatePoint":{"line":123,"column":21,"index":4636},"line":123,"code":"    it('should render', () => {\n      const wrapper = shallow( /*#__PURE__*/React.createElement(Directory, {\n        directory: {\n          subdirectories: [],\n          files: []\n        },\n        clickHandler: () => {},\n        openCreateMenu: () => {},\n        selectedItem: {\n          id: 1\n        },\n        createMenuInfo: {\n          id: 1\n        }\n      }));\n      expect(wrapper.exists()).toEqual(true);\n    });","file":"test.js","skipped":false,"dir":"test"},{"name":"should render the right amount of subdirectories","suites":["React Components","Directory"],"updatePoint":{"line":140,"column":56,"index":5096},"line":140,"code":"    it('should render the right amount of subdirectories', () => {\n      const wrapper = shallow( /*#__PURE__*/React.createElement(Directory, {\n        directory: {\n          subdirectories: [{\n            id: 1\n          }, {\n            id: 2\n          }],\n          files: [],\n          opened: true\n        },\n        clickHandler: () => {},\n        openCreateMenu: () => {},\n        selectedItem: {\n          id: 1\n        },\n        createMenuInfo: {\n          id: 1\n        }\n      }));\n      expect(wrapper.find(Directory).length).toEqual(2);\n    });","file":"test.js","skipped":false,"dir":"test"},{"name":"should render the right amount of files","suites":["React Components","Directory"],"updatePoint":{"line":162,"column":47,"index":5646},"line":162,"code":"    it('should render the right amount of files', () => {\n      const wrapper = shallow( /*#__PURE__*/React.createElement(Directory, {\n        directory: {\n          subdirectories: [],\n          files: [{\n            id: 1\n          }, {\n            id: 2\n          }],\n          opened: true\n        },\n        clickHandler: () => {},\n        openCreateMenu: () => {},\n        selectedItem: {\n          id: 1\n        },\n        createMenuInfo: {\n          id: 1\n        }\n      }));\n      expect(wrapper.find(File).length).toEqual(2);\n    });","file":"test.js","skipped":false,"dir":"test"},{"name":"should render the right amount of both subdirectories and files","suites":["React Components","Directory"],"updatePoint":{"line":184,"column":71,"index":6215},"line":184,"code":"    it('should render the right amount of both subdirectories and files', () => {\n      const wrapper = shallow( /*#__PURE__*/React.createElement(Directory, {\n        directory: {\n          subdirectories: [{\n            id: 1\n          }, {\n            id: 2\n          }],\n          files: [{\n            id: 1\n          }, {\n            id: 2\n          }],\n          opened: true\n        },\n        clickHandler: () => {},\n        openCreateMenu: () => {},\n        selectedItem: {\n          id: 1\n        },\n        createMenuInfo: {\n          id: 1\n        }\n      }));\n      expect(wrapper.find(File).length).toEqual(2);\n      expect(wrapper.find(Directory).length).toEqual(2);\n    });","file":"test.js","skipped":false,"dir":"test"},{"name":"shouldn't render any subdirectories or files if directory.opened = false","suites":["React Components","Directory"],"updatePoint":{"line":211,"column":81,"index":6915},"line":211,"code":"    it('shouldn\\'t render any subdirectories or files if directory.opened = false', () => {\n      const wrapper = shallow( /*#__PURE__*/React.createElement(Directory, {\n        directory: {\n          subdirectories: [{\n            id: 1\n          }, {\n            id: 2\n          }],\n          files: [{\n            id: 1\n          }, {\n            id: 2\n          }],\n          opened: false\n        },\n        clickHandler: () => {},\n        openCreateMenu: () => {},\n        selectedItem: {\n          id: 1\n        },\n        createMenuInfo: {\n          id: 1\n        }\n      }));\n      expect(wrapper.find(File).length).toEqual(0);\n      expect(wrapper.find(Directory).length).toEqual(0);\n    });","file":"test.js","skipped":false,"dir":"test"},{"name":"should invoke clickHandler on click","suites":["React Components","Directory"],"updatePoint":{"line":238,"column":43,"index":7578},"line":238,"code":"    it('should invoke clickHandler on click', () => {\n      const spy = sinon.spy();\n      const wrapper = shallow( /*#__PURE__*/React.createElement(Directory, {\n        directory: {\n          subdirectories: [],\n          files: []\n        },\n        clickHandler: spy,\n        openCreateMenu: () => {},\n        selectedItem: {\n          id: 1\n        },\n        createMenuInfo: {\n          id: 1\n        }\n      }));\n      wrapper.find('.list-item').simulate('click');\n      expect(spy.called).toEqual(true);\n    });","file":"test.js","skipped":false,"dir":"test"},{"name":"should invoke clickHandler with the right arguments","suites":["React Components","Directory"],"updatePoint":{"line":257,"column":59,"index":8113},"line":257,"code":"    it('should invoke clickHandler with the right arguments', () => {\n      const spy = sinon.spy();\n      const wrapper = shallow( /*#__PURE__*/React.createElement(Directory, {\n        directory: {\n          subdirectories: [],\n          files: [],\n          path: 'light',\n          type: 'my'\n        },\n        clickHandler: spy,\n        openCreateMenu: () => {},\n        selectedItem: {\n          id: 1\n        },\n        createMenuInfo: {\n          id: 1\n        },\n        id: 1\n      }));\n      wrapper.find('.list-item').simulate('click');\n      expect(spy.calledWith(1, 'light', 'my')).toEqual(true);\n    });","file":"test.js","skipped":false,"dir":"test"},{"name":"should render CreateMenu if openMenuId is equal to id","suites":["React Components","Directory"],"updatePoint":{"line":279,"column":61,"index":8734},"line":279,"code":"    it('should render CreateMenu if openMenuId is equal to id', () => {\n      const wrapper = shallow( /*#__PURE__*/React.createElement(Directory, {\n        directory: {\n          subdirectories: [],\n          files: []\n        },\n        clickHandler: () => {},\n        openCreateMenu: () => {},\n        selectedItem: {\n          id: 1\n        },\n        createMenuInfo: {\n          id: 1\n        },\n        id: 1,\n        openMenuId: 1\n      }));\n      expect(wrapper.find(CreateMenu).exists()).toEqual(true);\n    });","file":"test.js","skipped":false,"dir":"test"},{"name":"shouldn't render CreateMenu if openMenuId is not equal to id","suites":["React Components","Directory"],"updatePoint":{"line":298,"column":69,"index":9262},"line":298,"code":"    it('shouldn\\'t render CreateMenu if openMenuId is not equal to id', () => {\n      const wrapper = shallow( /*#__PURE__*/React.createElement(Directory, {\n        directory: {\n          subdirectories: [],\n          files: []\n        },\n        clickHandler: () => {},\n        openCreateMenu: () => {},\n        selectedItem: {\n          id: 1\n        },\n        createMenuInfo: {\n          id: 1\n        },\n        id: 1,\n        openMenuId: 2\n      }));\n      expect(wrapper.find(CreateMenu).exists()).toEqual(false);\n    });","file":"test.js","skipped":false,"dir":"test"},{"name":"should render CreateForm if createMenuInfo.id is equal to id","suites":["React Components","Directory"],"updatePoint":{"line":317,"column":68,"index":9790},"line":317,"code":"    it('should render CreateForm if createMenuInfo.id is equal to id', () => {\n      const wrapper = shallow( /*#__PURE__*/React.createElement(Directory, {\n        directory: {\n          subdirectories: [],\n          files: []\n        },\n        clickHandler: () => {},\n        openCreateMenu: () => {},\n        selectedItem: {\n          id: 1\n        },\n        createMenuInfo: {\n          id: 1\n        },\n        id: 1,\n        openMenuId: 2\n      }));\n      expect(wrapper.find(CreateForm).exists()).toEqual(true);\n    });","file":"test.js","skipped":false,"dir":"test"},{"name":"should not render CreateForm if createMenuInfo.id is not equal to id","suites":["React Components","Directory"],"updatePoint":{"line":336,"column":76,"index":10325},"line":336,"code":"    it('should not render CreateForm if createMenuInfo.id is not equal to id', () => {\n      const wrapper = shallow( /*#__PURE__*/React.createElement(Directory, {\n        directory: {\n          subdirectories: [],\n          files: []\n        },\n        clickHandler: () => {},\n        openCreateMenu: () => {},\n        selectedItem: {\n          id: 1\n        },\n        createMenuInfo: {\n          id: 2\n        },\n        id: 1,\n        openMenuId: 2\n      }));\n      expect(wrapper.find(CreateForm).exists()).toEqual(false);\n    });","file":"test.js","skipped":false,"dir":"test"},{"name":"item should have class name selected if selected (selectedItem.id === id)","suites":["React Components","Directory"],"updatePoint":{"line":355,"column":81,"index":10866},"line":355,"code":"    it('item should have class name selected if selected (selectedItem.id === id)', () => {\n      const wrapper = shallow( /*#__PURE__*/React.createElement(Directory, {\n        directory: {\n          subdirectories: [],\n          files: []\n        },\n        clickHandler: () => {},\n        openCreateMenu: () => {},\n        selectedItem: {\n          id: 1\n        },\n        createMenuInfo: {\n          id: 2\n        },\n        id: 1,\n        openMenuId: 2\n      }));\n      expect(wrapper.find('.list-nested-item .selected').exists()).toEqual(true);\n    });","file":"test.js","skipped":false,"dir":"test"},{"name":"item should not have class name selected if not selected (selectedItem.id !== id)","suites":["React Components","Directory"],"updatePoint":{"line":374,"column":89,"index":11433},"line":374,"code":"    it('item should not have class name selected if not selected (selectedItem.id !== id)', () => {\n      const wrapper = shallow( /*#__PURE__*/React.createElement(Directory, {\n        directory: {\n          subdirectories: [],\n          files: []\n        },\n        clickHandler: () => {},\n        openCreateMenu: () => {},\n        selectedItem: {\n          id: 2\n        },\n        createMenuInfo: {\n          id: 2\n        },\n        id: 1,\n        openMenuId: 2\n      }));\n      expect(wrapper.find('.list-nested-item .selected').exists()).toEqual(false);\n    });","file":"test.js","skipped":false,"dir":"test"},{"name":"should render RenameForm if renameFlag && selectedItem.id === id","suites":["React Components","Directory"],"updatePoint":{"line":393,"column":72,"index":11984},"line":393,"code":"    it('should render RenameForm if renameFlag && selectedItem.id === id', () => {\n      const wrapper = shallow( /*#__PURE__*/React.createElement(Directory, {\n        directory: {\n          subdirectories: [],\n          files: []\n        },\n        clickHandler: () => {},\n        openCreateMenu: () => {},\n        selectedItem: {\n          id: 1\n        },\n        createMenuInfo: {\n          id: 2\n        },\n        id: 1,\n        openMenuId: 2,\n        renameFlag: true\n      }));\n      expect(wrapper.find(RenameForm).exists()).toEqual(true);\n    });","file":"test.js","skipped":false,"dir":"test"},{"name":"should not render RenameForm if renameFlag && selectedItem.id !== id","suites":["React Components","Directory"],"updatePoint":{"line":413,"column":76,"index":12545},"line":413,"code":"    it('should not render RenameForm if renameFlag && selectedItem.id !== id', () => {\n      const wrapper = shallow( /*#__PURE__*/React.createElement(Directory, {\n        directory: {\n          subdirectories: [],\n          files: []\n        },\n        clickHandler: () => {},\n        openCreateMenu: () => {},\n        selectedItem: {\n          id: 2\n        },\n        createMenuInfo: {\n          id: 2\n        },\n        id: 1,\n        openMenuId: 2,\n        renameFlag: false\n      }));\n      expect(wrapper.find(RenameForm).exists()).toEqual(false);\n    });","file":"test.js","skipped":false,"dir":"test"},{"name":"should not render the directory/file if renameFlag && selectedItem.id === id","suites":["React Components","Directory"],"updatePoint":{"line":433,"column":84,"index":13116},"line":433,"code":"    it('should not render the directory/file if renameFlag && selectedItem.id === id', () => {\n      const wrapper = shallow( /*#__PURE__*/React.createElement(Directory, {\n        directory: {\n          subdirectories: [],\n          files: []\n        },\n        clickHandler: () => {},\n        openCreateMenu: () => {},\n        selectedItem: {\n          id: 1\n        },\n        createMenuInfo: {\n          id: 2\n        },\n        id: 1,\n        openMenuId: 2,\n        renameFlag: true\n      }));\n      expect(wrapper.find('.list-item').exists()).toEqual(false);\n    });","file":"test.js","skipped":false,"dir":"test"},{"name":"should render","suites":["React Components","File"],"updatePoint":{"line":455,"column":21,"index":13658},"line":455,"code":"    it('should render', () => {\n      const wrapper = shallow( /*#__PURE__*/React.createElement(File, {\n        selectedItem: {\n          id: 1\n        },\n        file: {\n          path: '',\n          name: ''\n        },\n        dblClickHandler: () => {},\n        clickHandler: () => {}\n      }));\n      expect(wrapper.exists()).toEqual(true);\n    });","file":"test.js","skipped":false,"dir":"test"},{"name":"should call dblClickHandler on doubleClick","suites":["React Components","File"],"updatePoint":{"line":469,"column":50,"index":14039},"line":469,"code":"    it('should call dblClickHandler on doubleClick', () => {\n      const spy = sinon.spy();\n      const wrapper = shallow( /*#__PURE__*/React.createElement(File, {\n        selectedItem: {\n          id: 1\n        },\n        file: {\n          path: '',\n          name: ''\n        },\n        dblClickHandler: spy,\n        clickHandler: () => {}\n      }));\n      wrapper.simulate('doubleClick');\n      expect(spy.called).toEqual(true);\n    });","file":"test.js","skipped":false,"dir":"test"},{"name":"should call dblClickHandler with file on doubleClick","suites":["React Components","File"],"updatePoint":{"line":485,"column":60,"index":14489},"line":485,"code":"    it('should call dblClickHandler with file on doubleClick', () => {\n      const spy = sinon.spy();\n      const wrapper = shallow( /*#__PURE__*/React.createElement(File, {\n        selectedItem: {\n          id: 1\n        },\n        file: {\n          path: 'a',\n          name: 'a'\n        },\n        dblClickHandler: spy,\n        clickHandler: () => {}\n      }));\n      wrapper.simulate('doubleClick');\n      expect(spy.calledWith({\n        path: 'a',\n        name: 'a'\n      })).toEqual(true);\n    });","file":"test.js","skipped":false,"dir":"test"},{"name":"should call clickHandler on single click","suites":["React Components","File"],"updatePoint":{"line":504,"column":48,"index":14981},"line":504,"code":"    it('should call clickHandler on single click', () => {\n      const spy = sinon.spy();\n      const wrapper = shallow( /*#__PURE__*/React.createElement(File, {\n        selectedItem: {\n          id: 1\n        },\n        file: {\n          path: '',\n          name: ''\n        },\n        dblClickHandler: () => {},\n        clickHandler: spy\n      }));\n      wrapper.simulate('click');\n      expect(spy.called).toEqual(true);\n    });","file":"test.js","skipped":false,"dir":"test"},{"name":"should call clickHandler with id and file.path on single click","suites":["React Components","File"],"updatePoint":{"line":520,"column":70,"index":15435},"line":520,"code":"    it('should call clickHandler with id and file.path on single click', () => {\n      const spy = sinon.spy();\n      const wrapper = shallow( /*#__PURE__*/React.createElement(File, {\n        selectedItem: {\n          id: 1\n        },\n        id: 1,\n        file: {\n          path: 'a',\n          name: ''\n        },\n        dblClickHandler: () => {},\n        clickHandler: spy\n      }));\n      wrapper.simulate('click');\n      expect(spy.calledWith(1, 'a')).toEqual(true);\n    });","file":"test.js","skipped":false,"dir":"test"},{"name":"should render the name of the file","suites":["React Components","File"],"updatePoint":{"line":537,"column":42,"index":15889},"line":537,"code":"    it('should render the name of the file', () => {\n      const wrapper = shallow( /*#__PURE__*/React.createElement(File, {\n        selectedItem: {\n          id: 1\n        },\n        file: {\n          path: '',\n          name: 'Jonny Greenwood'\n        },\n        dblClickHandler: () => {},\n        clickHandler: () => {}\n      }));\n      expect(wrapper.find('span').text()).toEqual('Jonny Greenwood');\n    });","file":"test.js","skipped":false,"dir":"test"},{"name":"should render RenameForm if rename && selectedItem.id === id","suites":["React Components","File"],"updatePoint":{"line":551,"column":68,"index":16327},"line":551,"code":"    it('should render RenameForm if rename && selectedItem.id === id', () => {\n      const wrapper = shallow( /*#__PURE__*/React.createElement(File, {\n        selectedItem: {\n          id: 1\n        },\n        id: 1,\n        renameFlag: true,\n        file: {\n          path: '',\n          name: 'Jonny Greenwood'\n        },\n        dblClickHandler: () => {},\n        clickHandler: () => {}\n      }));\n      expect(wrapper.find(RenameForm).exists()).toEqual(true);\n    });","file":"test.js","skipped":false,"dir":"test"},{"name":"should not render RenameForm if rename && selectedItem.id === id","suites":["React Components","File"],"updatePoint":{"line":567,"column":72,"index":16803},"line":567,"code":"    it('should not render RenameForm if rename && selectedItem.id === id', () => {\n      const wrapper = shallow( /*#__PURE__*/React.createElement(File, {\n        selectedItem: {\n          id: 1\n        },\n        id: 1,\n        renameFlag: false,\n        file: {\n          path: '',\n          name: 'Jonny Greenwood'\n        },\n        dblClickHandler: () => {},\n        clickHandler: () => {}\n      }));\n      expect(wrapper.find(RenameForm).exists()).toEqual(false);\n    });","file":"test.js","skipped":false,"dir":"test"},{"name":"should have className list-item selected if selectedItem.id === id","suites":["React Components","File"],"updatePoint":{"line":583,"column":74,"index":17283},"line":583,"code":"    it('should have className list-item selected if selectedItem.id === id', () => {\n      const wrapper = shallow( /*#__PURE__*/React.createElement(File, {\n        selectedItem: {\n          id: 1\n        },\n        id: 1,\n        renameFlag: false,\n        file: {\n          path: '',\n          name: 'Jonny Greenwood'\n        },\n        dblClickHandler: () => {},\n        clickHandler: () => {}\n      }));\n      expect(wrapper.find('.selected').exists()).toEqual(true);\n    });","file":"test.js","skipped":false,"dir":"test"},{"name":"should not have className selected if selectedItem.id === id","suites":["React Components","File"],"updatePoint":{"line":599,"column":68,"index":17757},"line":599,"code":"    it('should not have className selected if selectedItem.id === id', () => {\n      const wrapper = shallow( /*#__PURE__*/React.createElement(File, {\n        selectedItem: {\n          id: 1\n        },\n        id: 2,\n        renameFlag: false,\n        file: {\n          path: '',\n          name: 'Jonny Greenwood'\n        },\n        dblClickHandler: () => {},\n        clickHandler: () => {}\n      }));\n      expect(wrapper.find('.selected').exists()).toEqual(false);\n    });","file":"test.js","skipped":false,"dir":"test"},{"name":"should render","suites":["React Components","FileTree"],"updatePoint":{"line":617,"column":21,"index":18222},"line":617,"code":"    it('should render', () => {\n      const wrapper = shallow( /*#__PURE__*/React.createElement(FileTree, null));\n      expect(wrapper.exists()).toEqual(true);\n    });","file":"test.js","skipped":false,"dir":"test"},{"name":"should render file tree if passed to FileTree","suites":["React Components","FileTree"],"updatePoint":{"line":621,"column":53,"index":18422},"line":621,"code":"    it('should render file tree if passed to FileTree', () => {\n      const wrapper = shallow( /*#__PURE__*/React.createElement(FileTree, {\n        fileTree: true\n      }));\n      const directory = wrapper.find(Directory);\n      expect(directory.exists()).toEqual(true);\n    });","file":"test.js","skipped":false,"dir":"test"},{"name":"should not render file tree if not passed to FileTree","suites":["React Components","FileTree"],"updatePoint":{"line":628,"column":61,"index":18709},"line":628,"code":"    it('should not render file tree if not passed to FileTree', () => {\n      const wrapper = shallow( /*#__PURE__*/React.createElement(FileTree, {\n        fileTree: false\n      }));\n      const directory = wrapper.find(Directory);\n      expect(directory.exists()).toEqual(false);\n    });","file":"test.js","skipped":false,"dir":"test"},{"name":"should render","suites":["React Components","Rename Form"],"updatePoint":{"line":637,"column":21,"index":18998},"line":637,"code":"    it('should render', () => {\n      const wrapper = shallow( /*#__PURE__*/React.createElement(RenameForm, {\n        renameHandler: () => {}\n      }));\n      expect(wrapper.exists()).toEqual(true);\n    });","file":"test.js","skipped":false,"dir":"test"},{"name":"should call renameHandler on keyPress","suites":["React Components","Rename Form"],"updatePoint":{"line":643,"column":45,"index":19229},"line":643,"code":"    it('should call renameHandler on keyPress', () => {\n      const spy = sinon.spy();\n      const wrapper = shallow( /*#__PURE__*/React.createElement(RenameForm, {\n        renameHandler: spy\n      }));\n      wrapper.find('input').simulate('keyPress');\n      expect(spy.called).toEqual(true);\n    });","file":"test.js","skipped":false,"dir":"test"},{"name":"should render","suites":["React Components","Tab"],"updatePoint":{"line":653,"column":21,"index":19538},"line":653,"code":"    it('should render', () => {\n      const wrapper = shallow( /*#__PURE__*/React.createElement(Tab, {\n        setActiveTab: () => {},\n        closeTab: () => {}\n      }));\n      expect(wrapper.exists()).toEqual(true);\n    });","file":"test.js","skipped":false,"dir":"test"},{"name":"should fire setActiveTab on click","suites":["React Components","Tab"],"updatePoint":{"line":660,"column":41,"index":19785},"line":660,"code":"    it('should fire setActiveTab on click', () => {\n      const spy = sinon.spy();\n      const wrapper = shallow( /*#__PURE__*/React.createElement(Tab, {\n        setActiveTab: spy,\n        closeTab: () => {}\n      }));\n      wrapper.find('li').simulate('click');\n      expect(spy.called).toEqual(true);\n    });","file":"test.js","skipped":false,"dir":"test"},{"name":"should fire setActiveTab on click","suites":["React Components","Tab"],"updatePoint":{"line":669,"column":41,"index":20096},"line":669,"code":"    it('should fire setActiveTab on click', () => {\n      const spy = sinon.spy();\n      const wrapper = shallow( /*#__PURE__*/React.createElement(Tab, {\n        closeTab: spy,\n        setActiveTab: () => {}\n      }));\n      wrapper.find('.close-icon').simulate('click');\n      expect(spy.called).toEqual(true);\n    });","file":"test.js","skipped":false,"dir":"test"},{"name":"should render prop name","suites":["React Components","Tab"],"updatePoint":{"line":678,"column":31,"index":20406},"line":678,"code":"    it('should render prop name', () => {\n      const wrapper = shallow( /*#__PURE__*/React.createElement(Tab, {\n        closeTab: () => {},\n        setActiveTab: () => {},\n        name: \"Reactide\"\n      }));\n      expect(wrapper.find('.title').text()).toEqual('Reactide');\n    });","file":"test.js","skipped":false,"dir":"test"},{"name":"should pass id into setActiveTab","suites":["React Components","Tab"],"updatePoint":{"line":686,"column":40,"index":20697},"line":686,"code":"    it('should pass id into setActiveTab', () => {\n      const spy = sinon.spy();\n      const wrapper = shallow( /*#__PURE__*/React.createElement(Tab, {\n        closeTab: () => {},\n        setActiveTab: spy,\n        id: 1\n      }));\n      wrapper.find('li').simulate('click');\n      expect(spy.calledWithMatch(1)).toEqual(true);\n    });","file":"test.js","skipped":false,"dir":"test"},{"name":"should pass id into closeTab","suites":["React Components","Tab"],"updatePoint":{"line":696,"column":36,"index":21030},"line":696,"code":"    it('should pass id into closeTab', () => {\n      const spy = sinon.spy();\n      const wrapper = shallow( /*#__PURE__*/React.createElement(Tab, {\n        setActiveTab: () => {},\n        closeTab: spy,\n        id: 1\n      }));\n      wrapper.find('.close-icon').simulate('click');\n      expect(spy.calledWithMatch(1)).toEqual(true);\n    });","file":"test.js","skipped":false,"dir":"test"},{"name":"should render","suites":["React Components","TabContainer"],"updatePoint":{"line":708,"column":21,"index":21398},"line":708,"code":"    it('should render', () => {\n      const wrapper = shallow( /*#__PURE__*/React.createElement(TabContainer, {\n        appState: {\n          openTabs: [{\n            name: 'Jonny Greenwood',\n            id: 1\n          }]\n        }\n      }));\n      expect(wrapper.exists()).toEqual(true);\n    });","file":"test.js","skipped":false,"dir":"test"},{"name":"should render the right amount of tabs","suites":["React Components","TabContainer"],"updatePoint":{"line":719,"column":46,"index":21721},"line":719,"code":"    it('should render the right amount of tabs', () => {\n      const wrapper = shallow( /*#__PURE__*/React.createElement(TabContainer, {\n        appState: {\n          openTabs: [{\n            name: 'Jonny Greenwood',\n            id: 1\n          }, {\n            name: 'Thom Yorke',\n            id: 2\n          }]\n        },\n        setActiveTab: () => {}\n      }));\n      expect(wrapper.find(Tab).length).toEqual(2);\n    });","file":"test.js","skipped":false,"dir":"test"},{"name":"should render","suites":["React Components","TextEditor"],"updatePoint":{"line":736,"column":21,"index":22160},"line":736,"code":"    it('should render', () => {\n      const wrapper = shallow( /*#__PURE__*/React.createElement(TextEditor, null));\n      expect(wrapper.exists()).toEqual(true);\n    });","file":"test.js","skipped":false,"dir":"test"},{"name":"should render div with class editor-container","suites":["React Components","TextEditor"],"updatePoint":{"line":740,"column":53,"index":22362},"line":740,"code":"    it('should render div with class editor-container', () => {\n      const wrapper = shallow( /*#__PURE__*/React.createElement(TextEditor, null));\n      expect(wrapper.find('.editor-container').exists()).toEqual(true);\n    });","file":"test.js","skipped":false,"dir":"test"},{"name":"should render with className 'block' if id is equal to active tab id","suites":["React Components","TextEditor"],"updatePoint":{"line":744,"column":78,"index":22615},"line":744,"code":"    it('should render with className \\'block\\' if id is equal to active tab id', () => {\n      const wrapper = shallow( /*#__PURE__*/React.createElement(TextEditor, {\n        id: 1,\n        activeTab: 1\n      }));\n      chai.expect(wrapper.find('.item-views')).to.have.style('display', 'block');\n    });","file":"test.js","skipped":false,"dir":"test"},{"name":"should render with className 'none' if id is not equal to active tab id","suites":["React Components","TextEditor"],"updatePoint":{"line":751,"column":81,"index":22922},"line":751,"code":"    it('should render with className \\'none\\' if id is not equal to active tab id', () => {\n      const wrapper = shallow( /*#__PURE__*/React.createElement(TextEditor, {\n        id: 1,\n        activeTab: 2\n      }));\n      chai.expect(wrapper.find('.item-views')).to.have.style('display', 'none');\n    });","file":"test.js","skipped":false,"dir":"test"},{"name":"should render","suites":["React Components","TextEditorPane"],"updatePoint":{"line":760,"column":21,"index":23211},"line":760,"code":"    it('should render', () => {\n      const wrapper = shallow( /*#__PURE__*/React.createElement(TextEditorPane, {\n        appState: {\n          openTabs: () => {}\n        },\n        setActiveTab: () => {},\n        closeTab: () => {}\n      }));\n      expect(wrapper.exists()).toEqual(true);\n    });","file":"test.js","skipped":false,"dir":"test"},{"name":"should render TextEditor when openTabs.length > 0","suites":["React Components","TextEditorPane"],"updatePoint":{"line":770,"column":57,"index":23545},"line":770,"code":"    it('should render TextEditor when openTabs.length > 0', () => {\n      const wrapper = shallow( /*#__PURE__*/React.createElement(TextEditorPane, {\n        appState: {\n          openTabs: [{\n            id: 1\n          }],\n          activeTab: 1\n        },\n        setActiveTab: () => {},\n        closeTab: () => {}\n      }));\n      expect(wrapper.find(TextEditor).exists()).toEqual(true);\n    });","file":"test.js","skipped":false,"dir":"test"},{"name":"should render TextEditors for each open tab","suites":["React Components","TextEditorPane"],"updatePoint":{"line":783,"column":51,"index":23939},"line":783,"code":"    it('should render TextEditors for each open tab', () => {\n      const wrapper = shallow( /*#__PURE__*/React.createElement(TextEditorPane, {\n        appState: {\n          openTabs: [{\n            id: 1\n          }, {\n            id: 2\n          }],\n          activeTab: 1\n        },\n        setActiveTab: () => {},\n        closeTab: () => {}\n      }));\n      expect(wrapper.find(TextEditor).length).toEqual(2);\n    });","file":"test.js","skipped":false,"dir":"test"},{"name":"should not render TextEditor when openTabs.length = 0","suites":["React Components","TextEditorPane"],"updatePoint":{"line":798,"column":61,"index":24371},"line":798,"code":"    it('should not render TextEditor when openTabs.length = 0', () => {\n      const wrapper = shallow( /*#__PURE__*/React.createElement(TextEditorPane, {\n        appState: {\n          openTabs: [],\n          activeTab: 1\n        },\n        setActiveTab: () => {},\n        closeTab: () => {}\n      }));\n      expect(wrapper.find(TextEditor).exists()).toEqual(false);\n    });","file":"test.js","skipped":false,"dir":"test"},{"name":"should render a TabContainer","suites":["React Components","TextEditorPane"],"updatePoint":{"line":809,"column":36,"index":24720},"line":809,"code":"    it('should render a TabContainer', () => {\n      const wrapper = shallow( /*#__PURE__*/React.createElement(TextEditorPane, {\n        appState: {\n          openTabs: [],\n          activeTab: 1\n        },\n        setActiveTab: () => {},\n        closeTab: () => {}\n      }));\n      expect(wrapper.find(TabContainer).exists()).toEqual(true);\n    });","file":"test.js","skipped":false,"dir":"test"},{"name":"should pass props to TabContainer","suites":["React Components","TextEditorPane"],"updatePoint":{"line":820,"column":41,"index":25075},"line":820,"code":"    it('should pass props to TabContainer', () => {\n      const wrapper = shallow( /*#__PURE__*/React.createElement(TextEditorPane, {\n        appState: {\n          openTabs: [],\n          activeTab: 1\n        },\n        setActiveTab: () => {\n          return 1;\n        },\n        closeTab: () => {\n          return 1;\n        },\n        addEditorInstance: () => {\n          return 1;\n        }\n      }));\n      expect(wrapper.find(TabContainer).props().closeTab()).toEqual(1);\n      expect(wrapper.find(TabContainer).props().setActiveTab()).toEqual(1);\n      expect(wrapper.find(TabContainer).props().appState).toEqual({\n        openTabs: [],\n        activeTab: 1\n      });\n    });","file":"test.js","skipped":false,"dir":"test"},{"name":"should pass props to TextEditor","suites":["React Components","TextEditorPane"],"updatePoint":{"line":843,"column":39,"index":25756},"line":843,"code":"    it('should pass props to TextEditor', () => {\n      const wrapper = shallow( /*#__PURE__*/React.createElement(TextEditorPane, {\n        appState: {\n          openTabs: [{\n            id: 1\n          }],\n          activeTab: 1\n        },\n        activeTab: 1,\n        setActiveTab: () => {\n          return 1;\n        },\n        closeTab: () => {\n          return 1;\n        },\n        addEditorInstance: () => {\n          return 1;\n        }\n      }));\n      const TE = wrapper.find(TextEditor);\n      expect(TE.props().id).toEqual(1);\n      expect(TE.props().tab).toEqual({\n        id: 1\n      });\n      expect(TE.props().addEditorInstance()).toEqual(1);\n      expect(TE.props().activeTab).toEqual(1);\n    });","file":"test.js","skipped":false,"dir":"test"}]}