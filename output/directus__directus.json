{
    "repo": "directus/directus",
    "url": "https://github.com/directus/directus",
    "branch": "main",
    "configs": [
        {
            "package": "directus-monorepo",
            "lang": "js",
            "dir": "tests",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@directus/drive-azure",
            "lang": "ts",
            "dir": "packages/drive-azure/tests",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@directus/drive-gcs",
            "lang": "ts",
            "dir": "packages/drive-gcs/tests",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@directus/drive-s3",
            "lang": "ts",
            "dir": "packages/drive-s3/tests",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@directus/drive",
            "lang": "ts",
            "dir": "packages/drive/tests",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        },
        {
            "package": "@directus/sdk",
            "lang": "ts",
            "dir": "packages/sdk/tests",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        }
    ],
    "tests": [
        {
            "name": "Instantiate",
            "suites": [
                "drive"
            ],
            "updatePoint": {
                "line": 5,
                "column": 16
            },
            "line": 5,
            "code": "\tit('Instantiate', function () {\n\t\tconst storage = new StorageManager({\n\t\t\tdefault: 'azure',\n\t\t\tdisks: {\n\t\t\t\tremote: {\n\t\t\t\t\tdriver: 'azure',\n\t\t\t\t\tconfig: {\n\t\t\t\t\t\tcontainerName: 'containerName',\n\t\t\t\t\t\taccountName: 'accountName',\n\t\t\t\t\t\taccountKey: 'accountKey',\n\t\t\t\t\t\tendpoint: 'http://localhost/accountName',\n\t\t\t\t\t\troot: '/',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\n\t\tstorage.registerDriver('azure', AzureBlobWebServicesStorage);\n\n\t\tconst disk = storage.disk('remote');\n\t\texpect(disk).toBeInstanceOf(AzureBlobWebServicesStorage);\n\t});",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/drive-azure/tests"
        },
        {
            "name": "Instantiate",
            "suites": [
                "drive"
            ],
            "updatePoint": {
                "line": 5,
                "column": 16
            },
            "line": 5,
            "code": "\tit('Instantiate', function () {\n\t\tconst storage = new StorageManager({\n\t\t\tdefault: 'gcs',\n\t\t\tdisks: {\n\t\t\t\tremote: {\n\t\t\t\t\tdriver: 'gcs',\n\t\t\t\t\tconfig: {\n\t\t\t\t\t\tbucket: 'bucket',\n\t\t\t\t\t} as GoogleCloudStorageConfig,\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\n\t\tstorage.registerDriver('gcs', GoogleCloudStorage);\n\n\t\tconst disk = storage.disk('remote');\n\t\texpect(disk).toBeInstanceOf(GoogleCloudStorage);\n\t});",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/drive-gcs/tests"
        },
        {
            "name": "Instantiate",
            "suites": [
                "drive"
            ],
            "updatePoint": {
                "line": 5,
                "column": 16
            },
            "line": 5,
            "code": "\tit('Instantiate', function () {\n\t\tconst storage = new StorageManager({\n\t\t\tdefault: 's3',\n\t\t\tdisks: {\n\t\t\t\tremote: {\n\t\t\t\t\tdriver: 's3',\n\t\t\t\t\tconfig: {\n\t\t\t\t\t\tbucket: 'bucket',\n\t\t\t\t\t\tkey: 'key',\n\t\t\t\t\t\tsecret: 'secret',\n\t\t\t\t\t} as AmazonWebServicesS3StorageConfig,\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\n\t\tstorage.registerDriver('s3', AmazonWebServicesS3Storage);\n\n\t\tconst disk = storage.disk('remote');\n\t\texpect(disk).toBeInstanceOf(AmazonWebServicesS3Storage);\n\t});",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/drive-s3/tests"
        },
        {
            "name": "sets the raw exception object",
            "suites": [
                "AuthorizationRequired"
            ],
            "updatePoint": {
                "line": 13,
                "column": 34
            },
            "line": 13,
            "code": "\tit('sets the raw exception object', function () {\n\t\ttry {\n\t\t\tthrow new AuthorizationRequired(new Error('test'), '/some/path');\n\t\t} catch (err: any) {\n\t\t\texpect(err.raw).toBeDefined();\n\t\t\texpect(err.raw.message).toBe('test');\n\t\t}\n\t});",
            "file": "exceptions.test.ts",
            "skipped": false,
            "dir": "packages/drive/tests"
        },
        {
            "name": "driver should be set",
            "suites": [
                "DriverNotSupported"
            ],
            "updatePoint": {
                "line": 24,
                "column": 25
            },
            "line": 24,
            "code": "\tit('driver should be set', function () {\n\t\ttry {\n\t\t\tthrow DriverNotSupported.driver('alibaba');\n\t\t} catch (err: any) {\n\t\t\texpect(err.driver).toBeDefined();\n\t\t\texpect(err.driver).toBe('alibaba');\n\t\t}\n\t});",
            "file": "exceptions.test.ts",
            "skipped": false,
            "dir": "packages/drive/tests"
        },
        {
            "name": "driver should be set",
            "suites": [
                "DriverNotSupported"
            ],
            "updatePoint": {
                "line": 35,
                "column": 25
            },
            "line": 35,
            "code": "\tit('driver should be set', function () {\n\t\ttry {\n\t\t\tthrow DriverNotSupported.driver('alibaba');\n\t\t} catch (err: any) {\n\t\t\texpect(err.driver).toBeDefined();\n\t\t\texpect(err.driver).toBe('alibaba');\n\t\t}\n\t});",
            "file": "exceptions.test.ts",
            "skipped": false,
            "dir": "packages/drive/tests"
        },
        {
            "name": "missingDiskName",
            "suites": [
                "InvalidConfig"
            ],
            "updatePoint": {
                "line": 46,
                "column": 20
            },
            "line": 46,
            "code": "\tit('missingDiskName', function () {\n\t\tconst err = InvalidConfig.missingDiskName();\n\t\texpect(err.status).toBe(500);\n\t\texpect(err.code).toBe('E_INVALID_CONFIG');\n\t});",
            "file": "exceptions.test.ts",
            "skipped": false,
            "dir": "packages/drive/tests"
        },
        {
            "name": "missingDiskConfig",
            "suites": [
                "InvalidConfig"
            ],
            "updatePoint": {
                "line": 52,
                "column": 22
            },
            "line": 52,
            "code": "\tit('missingDiskConfig', function () {\n\t\tconst err = InvalidConfig.missingDiskConfig('disk_name');\n\t\texpect(err.status).toBe(500);\n\t\texpect(err.code).toBe('E_INVALID_CONFIG');\n\t});",
            "file": "exceptions.test.ts",
            "skipped": false,
            "dir": "packages/drive/tests"
        },
        {
            "name": "missingDiskDriver",
            "suites": [
                "InvalidConfig"
            ],
            "updatePoint": {
                "line": 58,
                "column": 22
            },
            "line": 58,
            "code": "\tit('missingDiskDriver', function () {\n\t\tconst err = InvalidConfig.missingDiskDriver('disk_name');\n\t\texpect(err.status).toBe(500);\n\t\texpect(err.code).toBe('E_INVALID_CONFIG');\n\t});",
            "file": "exceptions.test.ts",
            "skipped": false,
            "dir": "packages/drive/tests"
        },
        {
            "name": "duplicateDiskName",
            "suites": [
                "InvalidConfig"
            ],
            "updatePoint": {
                "line": 64,
                "column": 22
            },
            "line": 64,
            "code": "\tit('duplicateDiskName', function () {\n\t\tconst err = InvalidConfig.duplicateDiskName('disk_name');\n\t\texpect(err.status).toBe(500);\n\t\texpect(err.code).toBe('E_INVALID_CONFIG');\n\t});",
            "file": "exceptions.test.ts",
            "skipped": false,
            "dir": "packages/drive/tests"
        },
        {
            "name": "constructor",
            "suites": [
                "MethodNotSupported"
            ],
            "updatePoint": {
                "line": 72,
                "column": 16
            },
            "line": 72,
            "code": "\tit('constructor', function () {\n\t\tconst err = new MethodNotSupported('method', 'driver');\n\t\texpect(err.status).toBe(500);\n\t\texpect(err.code).toBe('E_METHOD_NOT_SUPPORTED');\n\t});",
            "file": "exceptions.test.ts",
            "skipped": false,
            "dir": "packages/drive/tests"
        },
        {
            "name": "constructor",
            "suites": [
                "NoSuchBucket"
            ],
            "updatePoint": {
                "line": 80,
                "column": 16
            },
            "line": 80,
            "code": "\tit('constructor', function () {\n\t\ttry {\n\t\t\tthrow new NoSuchBucket(new Error('test'), 'bucket');\n\t\t} catch (err: any) {\n\t\t\texpect(err.raw).toBeDefined();\n\t\t\texpect(err.raw.message).toBe('test');\n\t\t\texpect(err.status).toBe(500);\n\t\t\texpect(err.code).toBe('E_NO_SUCH_BUCKET');\n\t\t}\n\t});",
            "file": "exceptions.test.ts",
            "skipped": false,
            "dir": "packages/drive/tests"
        },
        {
            "name": "constructor",
            "suites": [
                "PermissionMissing"
            ],
            "updatePoint": {
                "line": 93,
                "column": 16
            },
            "line": 93,
            "code": "\tit('constructor', function () {\n\t\ttry {\n\t\t\tthrow new PermissionMissing(new Error('test'), 'bucket');\n\t\t} catch (err: any) {\n\t\t\texpect(err.raw).toBeDefined();\n\t\t\texpect(err.raw.message).toBe('test');\n\t\t\texpect(err.status).toBe(500);\n\t\t\texpect(err.code).toBe('E_PERMISSION_MISSING');\n\t\t}\n\t});",
            "file": "exceptions.test.ts",
            "skipped": false,
            "dir": "packages/drive/tests"
        },
        {
            "name": "constructor",
            "suites": [
                "UnknownException"
            ],
            "updatePoint": {
                "line": 106,
                "column": 16
            },
            "line": 106,
            "code": "\tit('constructor', function () {\n\t\ttry {\n\t\t\tthrow new UnknownException(new Error('test'), 'ERR_CODE', __filename);\n\t\t} catch (err: any) {\n\t\t\texpect(err.raw).toBeDefined();\n\t\t\texpect(err.raw.message).toBe('test');\n\t\t\texpect(err.message).toContain(__filename);\n\t\t\texpect(err.message).toContain('ERR_CODE');\n\t\t\texpect(err.status).toBe(500);\n\t\t\texpect(err.code).toBe('E_UNKNOWN');\n\t\t}\n\t});",
            "file": "exceptions.test.ts",
            "skipped": false,
            "dir": "packages/drive/tests"
        },
        {
            "name": "constructor",
            "suites": [
                "WrongKeyPath "
            ],
            "updatePoint": {
                "line": 121,
                "column": 16
            },
            "line": 121,
            "code": "\tit('constructor', function () {\n\t\ttry {\n\t\t\tthrow new WrongKeyPath(new Error('test'), 'some/path');\n\t\t} catch (err: any) {\n\t\t\texpect(err.raw).toBeDefined();\n\t\t\texpect(err.raw.message).toBe('test');\n\t\t\texpect(err.message).toContain('some/path');\n\t\t\texpect(err.status).toBe(500);\n\t\t\texpect(err.code).toBe('E_WRONG_KEY_PATH');\n\t\t}\n\t});",
            "file": "exceptions.test.ts",
            "skipped": false,
            "dir": "packages/drive/tests"
        },
        {
            "name": "Objects should be exported",
            "suites": [
                "drive"
            ],
            "updatePoint": {
                "line": 4,
                "column": 31
            },
            "line": 4,
            "code": "\tit('Objects should be exported', function () {\n\t\texpect(drive.Storage).toBeDefined();\n\t\texpect(drive.StorageManager).toBeDefined();\n\t\texpect(drive.LocalFileSystemStorage).toBeDefined();\n\t});",
            "file": "index.test.ts",
            "skipped": false,
            "dir": "packages/drive/tests"
        },
        {
            "name": "get underlying driver",
            "suites": [
                "Local Driver"
            ],
            "updatePoint": {
                "line": 83,
                "column": 26
            },
            "line": 83,
            "code": "\tit('get underlying driver', async () => {\n\t\texpect(storage.driver()).toBeDefined();\n\t});",
            "file": "LocalFileSystemStorage.test.ts",
            "skipped": false,
            "dir": "packages/drive/tests"
        },
        {
            "name": "find if a file exists",
            "suites": [
                "Local Driver"
            ],
            "updatePoint": {
                "line": 87,
                "column": 26
            },
            "line": 87,
            "code": "\tit('find if a file exists', async () => {\n\t\tawait fse.outputFile(realFsPath('i_exist'), testString);\n\t\tconst { exists } = await storage.exists('i_exist');\n\n\t\texpect(exists).toBe(true);\n\t});",
            "file": "LocalFileSystemStorage.test.ts",
            "skipped": false,
            "dir": "packages/drive/tests"
        },
        {
            "name": "exists handles errors",
            "suites": [
                "Local Driver"
            ],
            "updatePoint": {
                "line": 95,
                "column": 24
            },
            "line": 94,
            "code": "\tit(\n\t\t'exists handles errors',\n\t\tfsem.throwErrors(\n\t\t\tasync () => {\n\t\t\t\texpect(async () => await storage.exists('file')).rejects.toThrow('Mocked permission error');\n\t\t\t},\n\t\t\t{\n\t\t\t\tpathExists: new RuntimeException('Mocked permission error', undefined, 'EPERM'),\n\t\t\t}\n\t\t)\n\t);",
            "file": "LocalFileSystemStorage.test.ts",
            "skipped": false,
            "dir": "packages/drive/tests"
        },
        {
            "name": "find if a file doesn't exist",
            "suites": [
                "Local Driver"
            ],
            "updatePoint": {
                "line": 106,
                "column": 33
            },
            "line": 106,
            "code": "\tit(`find if a file doesn't exist`, async () => {\n\t\tconst { exists } = await storage.exists('i_dont_exist');\n\n\t\texpect(exists).toBe(false);\n\t});",
            "file": "LocalFileSystemStorage.test.ts",
            "skipped": false,
            "dir": "packages/drive/tests"
        },
        {
            "name": "find if a folder exists",
            "suites": [
                "Local Driver"
            ],
            "updatePoint": {
                "line": 112,
                "column": 28
            },
            "line": 112,
            "code": "\tit('find if a folder exists', async () => {\n\t\tawait fse.ensureDir(realFsPath('test_dir'));\n\t\tconst { exists } = await storage.exists('test_dir');\n\n\t\texpect(exists).toBe(true);\n\t});",
            "file": "LocalFileSystemStorage.test.ts",
            "skipped": false,
            "dir": "packages/drive/tests"
        },
        {
            "name": "create a file",
            "suites": [
                "Local Driver"
            ],
            "updatePoint": {
                "line": 119,
                "column": 18
            },
            "line": 119,
            "code": "\tit('create a file', async () => {\n\t\tawait storage.put('im_new', testString);\n\t\tconst { content } = await storage.get('im_new');\n\n\t\texpect(content).toStrictEqual(testString);\n\t});",
            "file": "LocalFileSystemStorage.test.ts",
            "skipped": false,
            "dir": "packages/drive/tests"
        },
        {
            "name": "create a file in a deep directory",
            "suites": [
                "Local Driver"
            ],
            "updatePoint": {
                "line": 126,
                "column": 38
            },
            "line": 126,
            "code": "\tit('create a file in a deep directory', async () => {\n\t\tawait storage.put('deep/directory/im_new', testString);\n\t\tconst { content } = await storage.get('deep/directory/im_new');\n\n\t\texpect(content).toStrictEqual(testString);\n\t});",
            "file": "LocalFileSystemStorage.test.ts",
            "skipped": false,
            "dir": "packages/drive/tests"
        },
        {
            "name": "delete a file",
            "suites": [
                "Local Driver"
            ],
            "updatePoint": {
                "line": 133,
                "column": 18
            },
            "line": 133,
            "code": "\tit('delete a file', async () => {\n\t\tawait fse.outputFile(realFsPath('i_will_be_deleted'), '');\n\n\t\ttry {\n\t\t\tconst { wasDeleted } = await storage.delete('i_will_be_deleted');\n\t\t\texpect(wasDeleted).toBe(true);\n\n\t\t\tconst { exists } = await storage.exists('i_will_be_deleted');\n\t\t\texpect(exists).toBe(false);\n\t\t} catch (error: any) {\n\t\t\tif (!isWindowsDefenderError(error)) {\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\t});",
            "file": "LocalFileSystemStorage.test.ts",
            "skipped": false,
            "dir": "packages/drive/tests"
        },
        {
            "name": "delete rethrows",
            "suites": [
                "Local Driver"
            ],
            "updatePoint": {
                "line": 150,
                "column": 18
            },
            "line": 149,
            "code": "\tit(\n\t\t'delete rethrows',\n\t\tfsem.throwErrors(\n\t\t\tasync () => {\n\t\t\t\texpect(async () => await storage.delete('file')).rejects.toThrow('Mocked permission error');\n\t\t\t},\n\t\t\t{\n\t\t\t\tunlink: new RuntimeException('Mocked permission error', undefined, 'EPERM'),\n\t\t\t}\n\t\t)\n\t);",
            "file": "LocalFileSystemStorage.test.ts",
            "skipped": false,
            "dir": "packages/drive/tests"
        },
        {
            "name": "delete a file that does not exist",
            "suites": [
                "Local Driver"
            ],
            "updatePoint": {
                "line": 161,
                "column": 38
            },
            "line": 161,
            "code": "\tit('delete a file that does not exist', async () => {\n\t\tconst { wasDeleted } = await storage.delete('i_dont_exist');\n\t\texpect(wasDeleted).toBe(false);\n\t});",
            "file": "LocalFileSystemStorage.test.ts",
            "skipped": false,
            "dir": "packages/drive/tests"
        },
        {
            "name": "move a file",
            "suites": [
                "Local Driver"
            ],
            "updatePoint": {
                "line": 166,
                "column": 16
            },
            "line": 166,
            "code": "\tit('move a file', async () => {\n\t\tawait fse.outputFile(realFsPath('i_will_be_renamed'), '');\n\t\tawait storage.move('i_will_be_renamed', 'im_renamed');\n\n\t\tconst { exists: newExists } = await storage.exists('im_renamed');\n\t\texpect(newExists).toBe(true);\n\n\t\tconst { exists: oldExists } = await storage.exists('i_will_be_renamed');\n\t\texpect(oldExists).toBe(false);\n\t});",
            "file": "LocalFileSystemStorage.test.ts",
            "skipped": false,
            "dir": "packages/drive/tests"
        },
        {
            "name": "copy a file",
            "suites": [
                "Local Driver"
            ],
            "updatePoint": {
                "line": 177,
                "column": 16
            },
            "line": 177,
            "code": "\tit('copy a file', async () => {\n\t\tawait fse.outputFile(realFsPath('i_will_be_copied'), '');\n\t\tawait storage.copy('i_will_be_copied', 'im_copied');\n\n\t\tconst { exists: newExists } = await storage.exists('im_copied');\n\t\texpect(newExists).toBe(true);\n\n\t\tconst { exists: oldExists } = await storage.exists('i_will_be_copied');\n\t\texpect(oldExists).toBe(true);\n\t});",
            "file": "LocalFileSystemStorage.test.ts",
            "skipped": false,
            "dir": "packages/drive/tests"
        },
        {
            "name": "copy handles errors",
            "suites": [
                "Local Driver"
            ],
            "updatePoint": {
                "line": 189,
                "column": 22
            },
            "line": 188,
            "code": "\tit(\n\t\t'copy handles errors',\n\t\tfsem.throwErrors(\n\t\t\tasync () => {\n\t\t\t\texpect(async () => await storage.copy('src', 'dst')).rejects.toThrow(\n\t\t\t\t\t'E_PERMISSION_MISSING: Missing permission for file src'\n\t\t\t\t);\n\t\t\t},\n\t\t\t{\n\t\t\t\tcopy: new RuntimeException('Mocked permission error', undefined, 'EPERM'),\n\t\t\t}\n\t\t)\n\t);",
            "file": "LocalFileSystemStorage.test.ts",
            "skipped": false,
            "dir": "packages/drive/tests"
        },
        {
            "name": "prepend to a file",
            "suites": [
                "Local Driver"
            ],
            "updatePoint": {
                "line": 202,
                "column": 22
            },
            "line": 202,
            "code": "\tit('prepend to a file', async () => {\n\t\tawait fse.outputFile(realFsPath('i_have_content'), 'world');\n\t\tawait storage.prepend('i_have_content', 'hello ');\n\n\t\tconst { content } = await storage.get('i_have_content');\n\t\texpect(content).toStrictEqual('hello world');\n\t});",
            "file": "LocalFileSystemStorage.test.ts",
            "skipped": false,
            "dir": "packages/drive/tests"
        },
        {
            "name": "prepend handles errors",
            "suites": [
                "Local Driver"
            ],
            "updatePoint": {
                "line": 211,
                "column": 25
            },
            "line": 210,
            "code": "\tit(\n\t\t'prepend handles errors',\n\t\tfsem.throwErrors(\n\t\t\tasync () => {\n\t\t\t\texpect(async () => await storage.prepend('prependFails', 'test')).rejects.toThrow(\n\t\t\t\t\t'E_PERMISSION_MISSING: Missing permission for file prependFails'\n\t\t\t\t);\n\t\t\t},\n\t\t\t{\n\t\t\t\treadFile: new RuntimeException('Mocked permission error', undefined, 'EPERM'),\n\t\t\t}\n\t\t)\n\t);",
            "file": "LocalFileSystemStorage.test.ts",
            "skipped": false,
            "dir": "packages/drive/tests"
        },
        {
            "name": "append to a file",
            "suites": [
                "Local Driver"
            ],
            "updatePoint": {
                "line": 224,
                "column": 21
            },
            "line": 224,
            "code": "\tit('append to a file', async () => {\n\t\tawait fse.outputFile(realFsPath('i_have_content'), 'hello');\n\t\tawait storage.append('i_have_content', ' universe');\n\n\t\tconst { content } = await storage.get('i_have_content');\n\t\texpect(content).toStrictEqual('hello universe');\n\t});",
            "file": "LocalFileSystemStorage.test.ts",
            "skipped": false,
            "dir": "packages/drive/tests"
        },
        {
            "name": "append handles errors",
            "suites": [
                "Local Driver"
            ],
            "updatePoint": {
                "line": 233,
                "column": 24
            },
            "line": 232,
            "code": "\tit(\n\t\t'append handles errors',\n\t\tfsem.throwErrors(\n\t\t\tasync () => {\n\t\t\t\texpect(async () => await storage.append('appendFails', 'test')).rejects.toThrow(\n\t\t\t\t\t'E_PERMISSION_MISSING: Missing permission for file appendFails'\n\t\t\t\t);\n\t\t\t},\n\t\t\t{\n\t\t\t\tappendFile: new RuntimeException('Mocked permission error', undefined, 'EPERM'),\n\t\t\t}\n\t\t)\n\t);",
            "file": "LocalFileSystemStorage.test.ts",
            "skipped": false,
            "dir": "packages/drive/tests"
        },
        {
            "name": "prepend to new file",
            "suites": [
                "Local Driver"
            ],
            "updatePoint": {
                "line": 246,
                "column": 24
            },
            "line": 246,
            "code": "\tit('prepend to new file', async () => {\n\t\tawait storage.prepend('i_have_content', testString);\n\n\t\tconst { content } = await storage.get('i_have_content', 'utf-8');\n\t\texpect(content).toStrictEqual(testString);\n\t});",
            "file": "LocalFileSystemStorage.test.ts",
            "skipped": false,
            "dir": "packages/drive/tests"
        },
        {
            "name": "throw file not found exception when unable to find file",
            "suites": [
                "Local Driver"
            ],
            "updatePoint": {
                "line": 253,
                "column": 60
            },
            "line": 253,
            "code": "\tit('throw file not found exception when unable to find file', async () => {\n\t\texpect.assertions(1);\n\n\t\ttry {\n\t\t\tawait storage.get('non_existing', 'utf-8');\n\t\t} catch (error: any) {\n\t\t\texpect(error).toBeInstanceOf(CE.FileNotFound);\n\t\t}\n\t});",
            "file": "LocalFileSystemStorage.test.ts",
            "skipped": false,
            "dir": "packages/drive/tests"
        },
        {
            "name": "do not get out of root path when path is absolute",
            "suites": [
                "Local Driver"
            ],
            "updatePoint": {
                "line": 263,
                "column": 54
            },
            "line": 263,
            "code": "\tit('do not get out of root path when path is absolute', async () => {\n\t\tconst dummyFile = '/dummy_file';\n\t\tawait storage.put(dummyFile, testString);\n\n\t\tconst content = fse.readFileSync(realFsPath(dummyFile), 'utf-8');\n\t\texpect(content).toStrictEqual(testString);\n\t});",
            "file": "LocalFileSystemStorage.test.ts",
            "skipped": false,
            "dir": "packages/drive/tests"
        },
        {
            "name": "ignore extraneous double dots ..",
            "suites": [
                "Local Driver"
            ],
            "updatePoint": {
                "line": 271,
                "column": 37
            },
            "line": 271,
            "code": "\tit('ignore extraneous double dots ..', async () => {\n\t\tawait storage.put('../../../dummy_file', testString);\n\n\t\tconst content = fse.readFileSync(realFsPath('dummy_file'), 'utf-8');\n\t\texpect(content).toStrictEqual(testString);\n\t});",
            "file": "LocalFileSystemStorage.test.ts",
            "skipped": false,
            "dir": "packages/drive/tests"
        },
        {
            "name": "do not ignore valid double dots ..",
            "suites": [
                "Local Driver"
            ],
            "updatePoint": {
                "line": 278,
                "column": 39
            },
            "line": 278,
            "code": "\tit('do not ignore valid double dots ..', async () => {\n\t\tawait storage.put('fake_dir/../dummy_file', testString);\n\n\t\tconst content = fse.readFileSync(realFsPath('dummy_file'), 'utf-8');\n\t\texpect(content).toStrictEqual(testString);\n\t});",
            "file": "LocalFileSystemStorage.test.ts",
            "skipped": false,
            "dir": "packages/drive/tests"
        },
        {
            "name": "create file from stream",
            "suites": [
                "Local Driver"
            ],
            "updatePoint": {
                "line": 285,
                "column": 28
            },
            "line": 285,
            "code": "\tit('create file from stream', async () => {\n\t\tawait storage.put('foo', testString);\n\n\t\tconst readStream = fse.createReadStream(realFsPath('foo'));\n\t\tawait storage.put('bar', readStream);\n\n\t\tconst { content } = await storage.get('bar');\n\t\texpect(content).toStrictEqual(testString);\n\t});",
            "file": "LocalFileSystemStorage.test.ts",
            "skipped": false,
            "dir": "packages/drive/tests"
        },
        {
            "name": "get file as a buffer",
            "suites": [
                "Local Driver"
            ],
            "updatePoint": {
                "line": 295,
                "column": 25
            },
            "line": 295,
            "code": "\tit('get file as a buffer', async () => {\n\t\tawait fse.outputFile(realFsPath('eita'), testString);\n\n\t\tconst { content } = await storage.getBuffer('eita');\n\t\texpect(content).toBeInstanceOf(Buffer);\n\t});",
            "file": "LocalFileSystemStorage.test.ts",
            "skipped": false,
            "dir": "packages/drive/tests"
        },
        {
            "name": "getBuffer handles errors",
            "suites": [
                "Local Driver"
            ],
            "updatePoint": {
                "line": 303,
                "column": 27
            },
            "line": 302,
            "code": "\tit(\n\t\t'getBuffer handles errors',\n\t\tfsem.throwErrors(\n\t\t\tasync () => {\n\t\t\t\texpect(async () => await storage.getBuffer('eita')).rejects.toThrow(\n\t\t\t\t\t'E_PERMISSION_MISSING: Missing permission for file eita'\n\t\t\t\t);\n\t\t\t},\n\t\t\t{\n\t\t\t\treadFile: new RuntimeException('Mocked permission error', undefined, 'EPERM'),\n\t\t\t}\n\t\t)\n\t);",
            "file": "LocalFileSystemStorage.test.ts",
            "skipped": false,
            "dir": "packages/drive/tests"
        },
        {
            "name": "getStat handles errors",
            "suites": [
                "Local Driver"
            ],
            "updatePoint": {
                "line": 317,
                "column": 25
            },
            "line": 316,
            "code": "\tit(\n\t\t'getStat handles errors',\n\t\tfsem.throwErrors(\n\t\t\tasync () => {\n\t\t\t\texpect(async () => await storage.getStat('eita')).rejects.toThrow(\n\t\t\t\t\t'E_PERMISSION_MISSING: Missing permission for file eita'\n\t\t\t\t);\n\t\t\t},\n\t\t\t{\n\t\t\t\tstat: new RuntimeException('Mocked permission error', undefined, 'EPERM'),\n\t\t\t}\n\t\t)\n\t);",
            "file": "LocalFileSystemStorage.test.ts",
            "skipped": false,
            "dir": "packages/drive/tests"
        },
        {
            "name": "move handles errors",
            "suites": [
                "Local Driver"
            ],
            "updatePoint": {
                "line": 331,
                "column": 22
            },
            "line": 330,
            "code": "\tit(\n\t\t'move handles errors',\n\t\tfsem.throwErrors(\n\t\t\tasync () => {\n\t\t\t\texpect(async () => await storage.move('src', 'dst')).rejects.toThrow(\n\t\t\t\t\t'E_PERMISSION_MISSING: Missing permission for file src -> dst'\n\t\t\t\t);\n\t\t\t},\n\t\t\t{\n\t\t\t\tmove: new RuntimeException('Mocked permission error', undefined, 'EPERM'),\n\t\t\t}\n\t\t)\n\t);",
            "file": "LocalFileSystemStorage.test.ts",
            "skipped": false,
            "dir": "packages/drive/tests"
        },
        {
            "name": "put handles errors",
            "suites": [
                "Local Driver"
            ],
            "updatePoint": {
                "line": 345,
                "column": 21
            },
            "line": 344,
            "code": "\tit(\n\t\t'put handles errors',\n\t\tfsem.throwErrors(\n\t\t\tasync () => {\n\t\t\t\texpect(async () => await storage.put('eita', 'content')).rejects.toThrow(\n\t\t\t\t\t'E_PERMISSION_MISSING: Missing permission for file eita'\n\t\t\t\t);\n\t\t\t},\n\t\t\t{\n\t\t\t\toutputFile: new RuntimeException('Mocked permission error', undefined, 'EPERM'),\n\t\t\t}\n\t\t)\n\t);",
            "file": "LocalFileSystemStorage.test.ts",
            "skipped": false,
            "dir": "packages/drive/tests"
        },
        {
            "name": "flatList handles errors",
            "suites": [
                "Local Driver"
            ],
            "updatePoint": {
                "line": 359,
                "column": 26
            },
            "line": 358,
            "code": "\tit(\n\t\t'flatList handles errors',\n\t\tfsem.throwErrors(\n\t\t\tasync () => {\n\t\t\t\texpect(async () => await getFlatList(storage)).rejects.toThrow('E_UNKNOWN');\n\t\t\t},\n\t\t\t{\n\t\t\t\topendir: new RuntimeException('Unknown', undefined, 'Unknown'),\n\t\t\t}\n\t\t)\n\t);",
            "file": "LocalFileSystemStorage.test.ts",
            "skipped": false,
            "dir": "packages/drive/tests"
        },
        {
            "name": "throw exception when unable to find file",
            "suites": [
                "Local Driver"
            ],
            "updatePoint": {
                "line": 370,
                "column": 45
            },
            "line": 370,
            "code": "\tit('throw exception when unable to find file', async () => {\n\t\texpect.assertions(1);\n\n\t\tconst readStream = storage.getStream('foo');\n\n\t\ttry {\n\t\t\tawait streamToString(readStream);\n\t\t} catch (err: any) {\n\t\t\texpect(err.code).toStrictEqual('ENOENT');\n\t\t}\n\t});",
            "file": "LocalFileSystemStorage.test.ts",
            "skipped": false,
            "dir": "packages/drive/tests"
        },
        {
            "name": "get stream of a given file",
            "suites": [
                "Local Driver"
            ],
            "updatePoint": {
                "line": 382,
                "column": 31
            },
            "line": 382,
            "code": "\tit('get stream of a given file', async () => {\n\t\tawait storage.put('foo', testString);\n\n\t\tconst readStream = storage.getStream('foo');\n\t\tconst content = await streamToString(readStream);\n\t\texpect(content).toStrictEqual(testString);\n\t});",
            "file": "LocalFileSystemStorage.test.ts",
            "skipped": false,
            "dir": "packages/drive/tests"
        },
        {
            "name": "get the stat of a given file",
            "suites": [
                "Local Driver"
            ],
            "updatePoint": {
                "line": 390,
                "column": 33
            },
            "line": 390,
            "code": "\tit('get the stat of a given file', async () => {\n\t\tawait storage.put('foo', testString);\n\n\t\tconst { size, modified } = await storage.getStat('foo');\n\t\texpect(size).toEqual(testString.length);\n\t\t// It seems that the Date constructor used in fs-extra is not the global one.\n\t\texpect(modified.constructor.name).toStrictEqual('Date');\n\t});",
            "file": "LocalFileSystemStorage.test.ts",
            "skipped": false,
            "dir": "packages/drive/tests"
        },
        {
            "name": "list files with no prefix and empty directory",
            "suites": [
                "Local Driver"
            ],
            "updatePoint": {
                "line": 399,
                "column": 50
            },
            "line": 399,
            "code": "\tit('list files with no prefix and empty directory', async () => {\n\t\tconst result = await getFlatList(storage);\n\t\texpect(result).toStrictEqual([]);\n\t});",
            "file": "LocalFileSystemStorage.test.ts",
            "skipped": false,
            "dir": "packages/drive/tests"
        },
        {
            "name": "list files with prefix that does not exist",
            "suites": [
                "Local Driver"
            ],
            "updatePoint": {
                "line": 404,
                "column": 47
            },
            "line": 404,
            "code": "\tit('list files with prefix that does not exist', async () => {\n\t\tconst result = await getFlatList(storage, '/dummy/path');\n\t\texpect(result).toStrictEqual([]);\n\t});",
            "file": "LocalFileSystemStorage.test.ts",
            "skipped": false,
            "dir": "packages/drive/tests"
        },
        {
            "name": "list files with no prefix",
            "suites": [
                "Local Driver"
            ],
            "updatePoint": {
                "line": 409,
                "column": 30
            },
            "line": 409,
            "code": "\tit('list files with no prefix', async () => {\n\t\tawait Promise.all([\n\t\t\tstorage.put('foo.txt', 'bar'),\n\t\t\tstorage.put('foo/bar', 'baz'),\n\t\t\tstorage.put('other/dir/file.txt', 'hello'),\n\t\t]);\n\n\t\tconst result = await getFlatList(storage);\n\t\texpect(result.sort()).toStrictEqual(['foo.txt', path.normalize('foo/bar'), path.normalize('other/dir/file.txt')]);\n\t});",
            "file": "LocalFileSystemStorage.test.ts",
            "skipped": false,
            "dir": "packages/drive/tests"
        },
        {
            "name": "list files with folder prefix",
            "suites": [
                "Local Driver"
            ],
            "updatePoint": {
                "line": 420,
                "column": 34
            },
            "line": 420,
            "code": "\tit('list files with folder prefix', async () => {\n\t\tawait Promise.all([\n\t\t\tstorage.put('foo.txt', 'bar'),\n\t\t\tstorage.put('foo/bar', 'baz'),\n\t\t\tstorage.put('other/dir/file.txt', 'hello'),\n\t\t]);\n\n\t\tconst result = await getFlatList(storage, 'other');\n\t\texpect(result).toStrictEqual([path.normalize('other/dir/file.txt')]);\n\t});",
            "file": "LocalFileSystemStorage.test.ts",
            "skipped": false,
            "dir": "packages/drive/tests"
        },
        {
            "name": "list files with subfolder prefix",
            "suites": [
                "Local Driver"
            ],
            "updatePoint": {
                "line": 431,
                "column": 37
            },
            "line": 431,
            "code": "\tit('list files with subfolder prefix', async () => {\n\t\tawait Promise.all([\n\t\t\tstorage.put('foo.txt', 'bar'),\n\t\t\tstorage.put('foo/bar', 'baz'),\n\t\t\tstorage.put('other/dir/file.txt', 'hello'),\n\t\t]);\n\n\t\tconst result = await getFlatList(storage, `other/dir/`);\n\t\texpect(result).toStrictEqual([path.normalize('other/dir/file.txt')]);\n\t});",
            "file": "LocalFileSystemStorage.test.ts",
            "skipped": false,
            "dir": "packages/drive/tests"
        },
        {
            "name": "list files with filename prefix",
            "suites": [
                "Local Driver"
            ],
            "updatePoint": {
                "line": 442,
                "column": 36
            },
            "line": 442,
            "code": "\tit('list files with filename prefix', async () => {\n\t\tawait Promise.all([\n\t\t\tstorage.put('foo.txt', 'bar'),\n\t\t\tstorage.put('foo/bar', 'baz'),\n\t\t\tstorage.put('other/dir/file.txt', 'hello'),\n\t\t]);\n\n\t\tconst result = await getFlatList(storage, 'other/dir/fil');\n\t\texpect(result).toStrictEqual([path.normalize('other/dir/file.txt')]);\n\t});",
            "file": "LocalFileSystemStorage.test.ts",
            "skipped": false,
            "dir": "packages/drive/tests"
        },
        {
            "name": "list files with double dots in prefix",
            "suites": [
                "Local Driver"
            ],
            "updatePoint": {
                "line": 453,
                "column": 42
            },
            "line": 453,
            "code": "\tit('list files with double dots in prefix', async () => {\n\t\tawait Promise.all([\n\t\t\tstorage.put('foo.txt', 'bar'),\n\t\t\tstorage.put('foo/bar', 'baz'),\n\t\t\tstorage.put('other/dir/file.txt', 'hello'),\n\t\t]);\n\n\t\tconst result = await getFlatList(storage, 'other/../');\n\t\texpect(result.sort()).toStrictEqual(['foo.txt', path.normalize('foo/bar'), path.normalize('other/dir/file.txt')]);\n\t});",
            "file": "LocalFileSystemStorage.test.ts",
            "skipped": false,
            "dir": "packages/drive/tests"
        },
        {
            "name": "throws on all methods",
            "suites": [
                "Storage Class"
            ],
            "updatePoint": {
                "line": 4,
                "column": 26
            },
            "line": 4,
            "code": "\tit('throws on all methods', async () => {\n\t\tclass DumbStorage extends Storage {}\n\n\t\tconst driver = new DumbStorage();\n\n\t\texpect(() => driver.append('location', 'content')).toThrow(\n\t\t\t'E_METHOD_NOT_SUPPORTED: Method append is not supported for the driver DumbStorage'\n\t\t);\n\t\texpect(() => driver.copy('src', 'desyt')).toThrow(\n\t\t\t'E_METHOD_NOT_SUPPORTED: Method copy is not supported for the driver DumbStorage'\n\t\t);\n\t\texpect(() => driver.delete('location')).toThrow(\n\t\t\t'E_METHOD_NOT_SUPPORTED: Method delete is not supported for the driver DumbStorage'\n\t\t);\n\t\texpect(() => driver.driver()).toThrow(\n\t\t\t'E_METHOD_NOT_SUPPORTED: Method driver is not supported for the driver DumbStorage'\n\t\t);\n\t\texpect(() => driver.exists('location')).toThrow(\n\t\t\t'E_METHOD_NOT_SUPPORTED: Method exists is not supported for the driver DumbStorage'\n\t\t);\n\t\texpect(() => driver.get('location', 'encoding')).toThrow(\n\t\t\t'E_METHOD_NOT_SUPPORTED: Method get is not supported for the driver DumbStorage'\n\t\t);\n\t\texpect(() => driver.getBuffer('location')).toThrow(\n\t\t\t'E_METHOD_NOT_SUPPORTED: Method getBuffer is not supported for the driver DumbStorage'\n\t\t);\n\t\texpect(() => driver.getSignedUrl('location')).toThrow(\n\t\t\t'E_METHOD_NOT_SUPPORTED: Method getSignedUrl is not supported for the driver DumbStorage'\n\t\t);\n\t\texpect(() => driver.getStat('location')).toThrow(\n\t\t\t'E_METHOD_NOT_SUPPORTED: Method getStat is not supported for the driver DumbStorage'\n\t\t);\n\t\texpect(() => driver.getStream('location')).toThrow(\n\t\t\t'E_METHOD_NOT_SUPPORTED: Method getStream is not supported for the driver DumbStorage'\n\t\t);\n\t\texpect(() => driver.getUrl('location')).toThrow(\n\t\t\t'E_METHOD_NOT_SUPPORTED: Method getUrl is not supported for the driver DumbStorage'\n\t\t);\n\t\texpect(() => driver.move('src', 'dst')).toThrow(\n\t\t\t'E_METHOD_NOT_SUPPORTED: Method move is not supported for the driver DumbStorage'\n\t\t);\n\t\texpect(() => driver.put('location', 'content')).toThrow(\n\t\t\t'E_METHOD_NOT_SUPPORTED: Method put is not supported for the driver DumbStorage'\n\t\t);\n\t\texpect(() => driver.prepend('location', 'content')).toThrow(\n\t\t\t'E_METHOD_NOT_SUPPORTED: Method prepend is not supported for the driver DumbStorage'\n\t\t);\n\t\texpect(() => driver.flatList('prefix')).toThrow(\n\t\t\t'E_METHOD_NOT_SUPPORTED: Method flatList is not supported for the driver DumbStorage'\n\t\t);\n\t});",
            "file": "Storage.test.ts",
            "skipped": false,
            "dir": "packages/drive/tests"
        },
        {
            "name": "throw exception when no disk name is defined",
            "suites": [
                "Storage Manager"
            ],
            "updatePoint": {
                "line": 13,
                "column": 49
            },
            "line": 13,
            "code": "\tit('throw exception when no disk name is defined', () => {\n\t\tconst storageManager = new StorageManager({});\n\t\tconst fn = (): Storage => storageManager.disk();\n\t\texpect(fn).toThrow('E_INVALID_CONFIG: Make sure to define a default disk name inside config file');\n\t});",
            "file": "StorageManager.test.ts",
            "skipped": false,
            "dir": "packages/drive/tests"
        },
        {
            "name": "throw exception when disk config is missing",
            "suites": [
                "Storage Manager"
            ],
            "updatePoint": {
                "line": 19,
                "column": 48
            },
            "line": 19,
            "code": "\tit('throw exception when disk config is missing', () => {\n\t\tconst storageManager = new StorageManager({\n\t\t\tdefault: 'local',\n\t\t});\n\t\tconst fn = (): Storage => storageManager.disk();\n\n\t\texpect(fn).toThrow('E_INVALID_CONFIG: Make sure to define config for local disk');\n\t});",
            "file": "StorageManager.test.ts",
            "skipped": false,
            "dir": "packages/drive/tests"
        },
        {
            "name": "throw exception when disk config doesnt have driver",
            "suites": [
                "Storage Manager"
            ],
            "updatePoint": {
                "line": 28,
                "column": 56
            },
            "line": 28,
            "code": "\tit('throw exception when disk config doesnt have driver', () => {\n\t\tconst storageManager = new StorageManager({\n\t\t\tdefault: 'local',\n\t\t\tdisks: {\n\t\t\t\t// @ts-expect-error No driver\n\t\t\t\tlocal: {},\n\t\t\t},\n\t\t});\n\t\tconst fn = (): Storage => storageManager.disk();\n\n\t\texpect(fn).toThrow('E_INVALID_CONFIG: Make sure to define driver for local disk');\n\t});",
            "file": "StorageManager.test.ts",
            "skipped": false,
            "dir": "packages/drive/tests"
        },
        {
            "name": "throw exception when driver is invalid",
            "suites": [
                "Storage Manager"
            ],
            "updatePoint": {
                "line": 41,
                "column": 43
            },
            "line": 41,
            "code": "\tit('throw exception when driver is invalid', () => {\n\t\tconst storageManager = new StorageManager({\n\t\t\tdefault: 'local',\n\t\t\tdisks: {\n\t\t\t\tlocal: {\n\t\t\t\t\tdriver: 'foo',\n\t\t\t\t\tconfig: {\n\t\t\t\t\t\troot: '',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\t\tconst fn = (): Storage => storageManager.disk();\n\n\t\texpect(fn).toThrow('Driver foo is not supported');\n\t});",
            "file": "StorageManager.test.ts",
            "skipped": false,
            "dir": "packages/drive/tests"
        },
        {
            "name": "return storage instance for a given driver",
            "suites": [
                "Storage Manager"
            ],
            "updatePoint": {
                "line": 58,
                "column": 47
            },
            "line": 58,
            "code": "\tit('return storage instance for a given driver', () => {\n\t\tconst storageManager = new StorageManager({\n\t\t\tdefault: 'local',\n\t\t\tdisks: {\n\t\t\t\tlocal: {\n\t\t\t\t\tdriver: 'local',\n\t\t\t\t\tconfig: {\n\t\t\t\t\t\troot: '',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\t\tconst localDriver = storageManager.disk('local');\n\t\tconst localDriver2 = storageManager.disk('local');\n\n\t\texpect(localDriver).toBe(localDriver2);\n\n\t\texpect(localDriver).toBeInstanceOf(LocalFileSystemStorage);\n\t});",
            "file": "StorageManager.test.ts",
            "skipped": false,
            "dir": "packages/drive/tests"
        },
        {
            "name": "extend and add new drivers",
            "suites": [
                "Storage Manager"
            ],
            "updatePoint": {
                "line": 78,
                "column": 31
            },
            "line": 78,
            "code": "\tit('extend and add new drivers', () => {\n\t\tconst storageManager = new StorageManager({\n\t\t\tdefault: 'local',\n\t\t\tdisks: {\n\t\t\t\tlocal: {\n\t\t\t\t\tdriver: 'foo',\n\t\t\t\t\tconfig: {},\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\n\t\tclass FooDriver extends Storage {}\n\t\tstorageManager.registerDriver('foo', FooDriver);\n\n\t\texpect(storageManager.disk('local')).toBeInstanceOf(FooDriver);\n\t});",
            "file": "StorageManager.test.ts",
            "skipped": false,
            "dir": "packages/drive/tests"
        },
        {
            "name": "add new disks",
            "suites": [
                "Storage Manager"
            ],
            "updatePoint": {
                "line": 95,
                "column": 18
            },
            "line": 95,
            "code": "\tit('add new disks', () => {\n\t\tconst storageManager = new StorageManager({\n\t\t\tdefault: 'local',\n\t\t\tdisks: {\n\t\t\t\tlocal: {\n\t\t\t\t\tdriver: 'local',\n\t\t\t\t\tconfig: {\n\t\t\t\t\t\troot: '',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\n\t\tstorageManager.addDisk('home', {\n\t\t\tdriver: 'local',\n\t\t\tconfig: {\n\t\t\t\troot: '~',\n\t\t\t},\n\t\t});\n\n\t\texpect(storageManager.disk('home')).toBeInstanceOf(LocalFileSystemStorage);\n\t});",
            "file": "StorageManager.test.ts",
            "skipped": false,
            "dir": "packages/drive/tests"
        },
        {
            "name": "invalid disks can't be added",
            "suites": [
                "Storage Manager"
            ],
            "updatePoint": {
                "line": 118,
                "column": 33
            },
            "line": 118,
            "code": "\tit(\"invalid disks can't be added\", () => {\n\t\tconst storageManager = new StorageManager({\n\t\t\tdefault: 'local',\n\t\t\tdisks: {\n\t\t\t\tlocal: {\n\t\t\t\t\tdriver: 'local',\n\t\t\t\t\tconfig: {\n\t\t\t\t\t\troot: '',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\n\t\tconst fn = () =>\n\t\t\tstorageManager.addDisk('local', {\n\t\t\t\tdriver: 'local',\n\t\t\t\tconfig: {\n\t\t\t\t\troot: '',\n\t\t\t\t},\n\t\t\t});\n\n\t\texpect(fn).toThrow('E_INVALID_CONFIG: A disk named local is already defined');\n\t});",
            "file": "StorageManager.test.ts",
            "skipped": false,
            "dir": "packages/drive/tests"
        },
        {
            "name": "gets all instantiated disks",
            "suites": [
                "Storage Manager"
            ],
            "updatePoint": {
                "line": 142,
                "column": 32
            },
            "line": 142,
            "code": "\tit('gets all instantiated disks', () => {\n\t\tconst storageManager = new StorageManager({\n\t\t\tdefault: 'local',\n\t\t\tdisks: {\n\t\t\t\tlocal: {\n\t\t\t\t\tdriver: 'local',\n\t\t\t\t\tconfig: {\n\t\t\t\t\t\troot: '',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\thome: {\n\t\t\t\t\tdriver: 'local',\n\t\t\t\t\tconfig: {\n\t\t\t\t\t\troot: '~',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\n\t\tlet disks = storageManager.getDisks().keys();\n\t\texpect([...disks]).toStrictEqual([]);\n\n\t\tstorageManager.disk('local');\n\t\tdisks = storageManager.getDisks().keys();\n\t\texpect([...disks].sort()).toStrictEqual(['local']);\n\n\t\tstorageManager.disk('home');\n\t\tdisks = storageManager.getDisks().keys();\n\t\texpect([...disks].sort()).toStrictEqual(['home', 'local']);\n\t});",
            "file": "StorageManager.test.ts",
            "skipped": false,
            "dir": "packages/drive/tests"
        },
        {
            "name": "gets all available drivers",
            "suites": [
                "Storage Manager"
            ],
            "updatePoint": {
                "line": 173,
                "column": 31
            },
            "line": 173,
            "code": "\tit('gets all available drivers', () => {\n\t\tconst storageManager = new StorageManager({\n\t\t\tdefault: 'local',\n\t\t\tdisks: {\n\t\t\t\tlocal: {\n\t\t\t\t\tdriver: 'local',\n\t\t\t\t\tconfig: {\n\t\t\t\t\t\troot: '',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\thome: {\n\t\t\t\t\tdriver: 'local',\n\t\t\t\t\tconfig: {\n\t\t\t\t\t\troot: '~',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\n\t\tclass FooDriver extends Storage {}\n\t\tstorageManager.registerDriver('foo', FooDriver);\n\n\t\tclass BarDriver extends Storage {}\n\t\tstorageManager.registerDriver('bar', BarDriver);\n\n\t\tconst disks = storageManager.getDrivers().keys();\n\t\texpect([...disks].sort()).toStrictEqual(['bar', 'foo', 'local']);\n\t});",
            "file": "StorageManager.test.ts",
            "skipped": false,
            "dir": "packages/drive/tests"
        },
        {
            "name": "get disk with custom config",
            "suites": [
                "Storage Manager"
            ],
            "updatePoint": {
                "line": 202,
                "column": 32
            },
            "line": 202,
            "code": "\tit('get disk with custom config', () => {\n\t\tconst storageManager = new StorageManager({\n\t\t\tdefault: 'local',\n\t\t\tdisks: {\n\t\t\t\tlocal: {\n\t\t\t\t\tdriver: 'local',\n\t\t\t\t\tconfig: {\n\t\t\t\t\t\troot: '',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\n\t\tconst localWithDefaultConfig = storageManager.disk('local');\n\t\texpect(localWithDefaultConfig).toBeInstanceOf(LocalFileSystemStorage);\n\t});",
            "file": "StorageManager.test.ts",
            "skipped": false,
            "dir": "packages/drive/tests"
        },
        {
            "name": "sets default auth mode to cookie",
            "suites": [
                "auth (browser)"
            ],
            "updatePoint": {
                "line": 17,
                "column": 39
            },
            "line": 17,
            "code": "\ttest(`sets default auth mode to cookie`, async (url) => {\n\t\tconst sdk = new Directus(url, { auth: { mode: 'cookie' } });\n\t\texpect(sdk.auth.mode).toBe('cookie');\n\t});",
            "file": "base/auth.browser.test.ts",
            "skipped": false,
            "dir": "packages/sdk/tests"
        },
        {
            "name": "sends default auth mode",
            "suites": [
                "auth (browser)"
            ],
            "updatePoint": {
                "line": 22,
                "column": 30
            },
            "line": 22,
            "code": "\ttest(`sends default auth mode`, async (url, nock) => {\n\t\tconst scope = nock()\n\t\t\t.post('/auth/login', (body) => body.mode === 'cookie')\n\t\t\t.reply(200, {\n\t\t\t\tdata: {\n\t\t\t\t\taccess_token: 'access_token',\n\t\t\t\t\trefresh_token: 'refresh_token',\n\t\t\t\t\texpires: 60000,\n\t\t\t\t},\n\t\t\t});\n\n\t\tconst sdk = new Directus(url);\n\n\t\tawait sdk.auth.login({\n\t\t\temail: 'wolfulus@gmail.com',\n\t\t\tpassword: 'password',\n\t\t});\n\n\t\texpect(scope.pendingMocks().length).toBe(0);\n\t});",
            "file": "base/auth.browser.test.ts",
            "skipped": false,
            "dir": "packages/sdk/tests"
        },
        {
            "name": "authentication should auto refresh after specified period",
            "suites": [
                "auth (browser)"
            ],
            "updatePoint": {
                "line": 43,
                "column": 64
            },
            "line": 43,
            "code": "\ttest(`authentication should auto refresh after specified period`, async (url, nock) => {\n\t\tconst scope = nock();\n\n\t\tscope\n\t\t\t.post('/auth/login', (body) => body.mode === 'cookie')\n\t\t\t.reply(\n\t\t\t\t200,\n\t\t\t\t{\n\t\t\t\t\tdata: {\n\t\t\t\t\t\taccess_token: 'access_token',\n\t\t\t\t\t\texpires: 5000,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t'Set-Cookie': 'directus_refresh_token=the_refresh_token; Max-Age=604800; Path=/; HttpOnly;',\n\t\t\t\t}\n\t\t\t);\n\n\t\tscope\n\t\t\t.post('/auth/refresh')\n\t\t\t.matchHeader('cookie', 'directus_refresh_token=the_refresh_token')\n\t\t\t.reply(200, {\n\t\t\t\tdata: {\n\t\t\t\t\taccess_token: 'new_access_token',\n\t\t\t\t\texpires: 5000,\n\t\t\t\t},\n\t\t\t});\n\n\t\texpect(scope.pendingMocks().length).toBe(2);\n\n\t\tawait timers(async ({ tick, flush }) => {\n\t\t\tconst sdk = new Directus(url, { auth: { autoRefresh: true, msRefreshBeforeExpires: 2500 } });\n\n\t\t\tconst loginPromise = sdk.auth.login({\n\t\t\t\temail: 'wolfulus@gmail.com',\n\t\t\t\tpassword: 'password',\n\t\t\t});\n\n\t\t\tawait tick(2000);\n\n\t\t\tawait loginPromise;\n\n\t\t\texpect(scope.pendingMocks().length).toBe(1);\n\t\t\texpect(sdk.storage.auth_token).toBe('access_token');\n\t\t\texpect(sdk.storage.auth_expires).toBe(5000);\n\t\t\tawait tick(5000);\n\n\t\t\texpect(scope.pendingMocks().length).toBe(1);\n\t\t\tawait flush();\n\n\t\t\tawait new Promise((resolve) => {\n\t\t\t\tscope.once('replied', () => {\n\t\t\t\t\tflush().then(resolve);\n\t\t\t\t});\n\t\t\t});\n\n\t\t\texpect(sdk.storage.auth_expires).toBe(5000);\n\t\t\texpect(scope.pendingMocks().length).toBe(0);\n\t\t\texpect(sdk.storage.auth_token).toBe('new_access_token');\n\t\t});\n\t});",
            "file": "base/auth.browser.test.ts",
            "skipped": false,
            "dir": "packages/sdk/tests"
        },
        {
            "name": "logout doesn't send a refresh token due to cookie mode",
            "suites": [
                "auth (browser)"
            ],
            "updatePoint": {
                "line": 105,
                "column": 61
            },
            "line": 105,
            "code": "\ttest(`logout doesn't send a refresh token due to cookie mode`, async (url, nock) => {\n\t\tnock()\n\t\t\t.post('/auth/login', (body) => body.mode === 'cookie')\n\t\t\t.reply(\n\t\t\t\t200,\n\t\t\t\t{\n\t\t\t\t\tdata: {\n\t\t\t\t\t\taccess_token: 'some_access_token',\n\t\t\t\t\t\texpires: 60000,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t'Set-Cookie': 'directus_refresh_token=my_refresh_token; Max-Age=604800; Path=/; HttpOnly;',\n\t\t\t\t}\n\t\t\t);\n\n\t\tnock().post('/auth/logout', {}).matchHeader('cookie', 'directus_refresh_token=my_refresh_token').reply(200, {\n\t\t\tdata: {},\n\t\t});\n\n\t\tconst sdk = new Directus(url);\n\n\t\tawait sdk.auth.login({\n\t\t\temail: 'wolfulus@gmail.com',\n\t\t\tpassword: 'password',\n\t\t});\n\n\t\texpect(sdk.auth.token).toBe('some_access_token');\n\n\t\tawait sdk.auth.logout();\n\n\t\texpect(sdk.auth.token).toBeNull();\n\t});",
            "file": "base/auth.browser.test.ts",
            "skipped": false,
            "dir": "packages/sdk/tests"
        },
        {
            "name": "sets default auth mode to json",
            "suites": [
                "auth (node)"
            ],
            "updatePoint": {
                "line": 9,
                "column": 37
            },
            "line": 9,
            "code": "\ttest(`sets default auth mode to json`, async (url) => {\n\t\tconst sdk = new Directus(url);\n\t\texpect(sdk.auth.mode).toBe('json');\n\t});",
            "file": "base/auth.node.test.ts",
            "skipped": false,
            "dir": "packages/sdk/tests"
        },
        {
            "name": "sends default auth mode",
            "suites": [
                "auth (node)"
            ],
            "updatePoint": {
                "line": 14,
                "column": 30
            },
            "line": 14,
            "code": "\ttest(`sends default auth mode`, async (url, nock) => {\n\t\tconst scope = nock()\n\t\t\t.post('/auth/login', (body) => body.mode === 'json')\n\t\t\t.reply(200, {\n\t\t\t\tdata: {\n\t\t\t\t\taccess_token: 'access_token',\n\t\t\t\t\trefresh_token: 'refresh_token',\n\t\t\t\t\texpires: 60000,\n\t\t\t\t},\n\t\t\t});\n\n\t\tawait timers(async ({ tick }) => {\n\t\t\tconst sdk = new Directus(url);\n\t\t\tconst loginPromise = sdk.auth.login({\n\t\t\t\temail: 'wolfulus@gmail.com',\n\t\t\t\tpassword: 'password',\n\t\t\t});\n\n\t\t\tawait tick(2500);\n\n\t\t\tawait loginPromise;\n\n\t\t\texpect(scope.pendingMocks().length).toBe(0);\n\t\t});\n\t});",
            "file": "base/auth.node.test.ts",
            "skipped": false,
            "dir": "packages/sdk/tests"
        },
        {
            "name": "authentication should auto refresh after specified period",
            "suites": [
                "auth (node)"
            ],
            "updatePoint": {
                "line": 40,
                "column": 64
            },
            "line": 40,
            "code": "\ttest(`authentication should auto refresh after specified period`, async (url, nock) => {\n\t\tconst scope = nock();\n\n\t\tscope\n\t\t\t.post('/auth/login', (body) => body.mode === 'json')\n\t\t\t.reply(200, {\n\t\t\t\tdata: {\n\t\t\t\t\taccess_token: 'some_node_access_token',\n\t\t\t\t\trefresh_token: 'some_node_refresh_token',\n\t\t\t\t\texpires: 5000,\n\t\t\t\t},\n\t\t\t});\n\n\t\tscope\n\t\t\t.post('/auth/refresh', {\n\t\t\t\trefresh_token: 'some_node_refresh_token',\n\t\t\t})\n\t\t\t.reply(200, {\n\t\t\t\tdata: {\n\t\t\t\t\taccess_token: 'a_new_node_access_token',\n\t\t\t\t\trefresh_token: 'a_new_node_refresh_token',\n\t\t\t\t\texpires: 5000,\n\t\t\t\t},\n\t\t\t});\n\n\t\texpect(scope.pendingMocks().length).toBe(2);\n\n\t\tawait timers(async ({ tick, flush }) => {\n\t\t\tconst sdk = new Directus(url, { auth: { autoRefresh: true, msRefreshBeforeExpires: 2500 } });\n\n\t\t\tconst loginPromise = sdk.auth.login({\n\t\t\t\temail: 'wolfulus@gmail.com',\n\t\t\t\tpassword: 'password',\n\t\t\t});\n\n\t\t\tawait tick(2500);\n\n\t\t\tawait loginPromise;\n\n\t\t\texpect(scope.pendingMocks().length).toBe(1);\n\t\t\texpect(sdk.storage.auth_token).toBe('some_node_access_token');\n\t\t\texpect(sdk.storage.auth_expires).toBe(5000);\n\t\t\tawait tick(5000);\n\n\t\t\texpect(scope.pendingMocks().length).toBe(0);\n\t\t\tawait flush();\n\n\t\t\tawait new Promise((resolve) => {\n\t\t\t\tscope.once('replied', () => {\n\t\t\t\t\tflush().then(resolve);\n\t\t\t\t});\n\t\t\t});\n\n\t\t\texpect(scope.pendingMocks().length).toBe(0);\n\t\t\texpect(sdk.storage.auth_token).toBe('a_new_node_access_token');\n\t\t});\n\t});",
            "file": "base/auth.node.test.ts",
            "skipped": false,
            "dir": "packages/sdk/tests"
        },
        {
            "name": "logout sends a refresh token in body",
            "suites": [
                "auth (node)"
            ],
            "updatePoint": {
                "line": 98,
                "column": 43
            },
            "line": 98,
            "code": "\ttest(`logout sends a refresh token in body`, async (url, nock) => {\n\t\tnock()\n\t\t\t.post('/auth/login', (body) => body.mode === 'json')\n\t\t\t.reply(\n\t\t\t\t200,\n\t\t\t\t{\n\t\t\t\t\tdata: {\n\t\t\t\t\t\taccess_token: 'auth_token',\n\t\t\t\t\t\trefresh_token: 'json_refresh_token',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t'Set-Cookie': 'directus_refresh_token=my_refresh_token; Max-Age=604800; Path=/; HttpOnly;',\n\t\t\t\t}\n\t\t\t);\n\n\t\tnock()\n\t\t\t.post('/auth/logout', {\n\t\t\t\trefresh_token: 'json_refresh_token',\n\t\t\t})\n\t\t\t.reply(200, {\n\t\t\t\tdata: {},\n\t\t\t});\n\n\t\tawait timers(async ({ tick }) => {\n\t\t\tconst sdk = new Directus(url);\n\n\t\t\tconst loginPromise = sdk.auth.login({\n\t\t\t\temail: 'wolfulus@gmail.com',\n\t\t\t\tpassword: 'password',\n\t\t\t});\n\n\t\t\tawait tick(2500);\n\n\t\t\tawait loginPromise;\n\n\t\t\texpect(sdk.auth.token).toBe('auth_token');\n\n\t\t\tconst logoutPromise = sdk.auth.logout();\n\n\t\t\tawait tick(2500);\n\n\t\t\tawait logoutPromise;\n\n\t\t\texpect(sdk.auth.token).toBeNull();\n\t\t});\n\t});",
            "file": "base/auth.node.test.ts",
            "skipped": false,
            "dir": "packages/sdk/tests"
        },
        {
            "name": "static auth should validate token",
            "suites": [
                "auth"
            ],
            "updatePoint": {
                "line": 9,
                "column": 40
            },
            "line": 9,
            "code": "\ttest(`static auth should validate token`, async (url, nock) => {\n\t\tnock()\n\t\t\t.get('/users/me')\n\t\t\t.query({\n\t\t\t\taccess_token: 'token',\n\t\t\t})\n\t\t\t.reply(203);\n\n\t\tconst sdk = new Directus(url);\n\t\tawait sdk.auth.static('token');\n\t});",
            "file": "base/auth.test.ts",
            "skipped": false,
            "dir": "packages/sdk/tests"
        },
        {
            "name": "successful auth should set the token",
            "suites": [
                "auth"
            ],
            "updatePoint": {
                "line": 54,
                "column": 43
            },
            "line": 54,
            "code": "\ttest(`successful auth should set the token`, async (url, nock) => {\n\t\tnock()\n\t\t\t.get('/users/me')\n\t\t\t.query({\n\t\t\t\taccess_token: 'token',\n\t\t\t})\n\t\t\t.reply(203);\n\n\t\tconst sdk = new Directus(url);\n\t\tawait sdk.auth.static('token');\n\n\t\texpect(sdk.auth.token);\n\t});",
            "file": "base/auth.test.ts",
            "skipped": false,
            "dir": "packages/sdk/tests"
        },
        {
            "name": "invalid credentials token should not set the token",
            "suites": [
                "auth"
            ],
            "updatePoint": {
                "line": 68,
                "column": 57
            },
            "line": 68,
            "code": "\ttest(`invalid credentials token should not set the token`, async (url, nock) => {\n\t\tnock()\n\t\t\t.get('/users/me')\n\t\t\t.reply(401, {\n\t\t\t\terrors: [\n\t\t\t\t\t{\n\t\t\t\t\t\tmessage: 'Invalid token',\n\t\t\t\t\t\textensions: {\n\t\t\t\t\t\t\tcode: 'EUNAUTHORIZED',\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t});\n\n\t\tconst sdk = new Directus(url);\n\t\ttry {\n\t\t\tawait sdk.auth.login({\n\t\t\t\temail: 'invalid@email.com',\n\t\t\t\tpassword: 'invalid_password',\n\t\t\t});\n\t\t\tfail('Should have thrown due to error response');\n\t\t} catch {\n\t\t\t//\n\t\t}\n\n\t\texpect(sdk.auth.token).toBeNull();\n\t});",
            "file": "base/auth.test.ts",
            "skipped": false,
            "dir": "packages/sdk/tests"
        },
        {
            "name": "invalid static token should not set the token",
            "suites": [
                "auth"
            ],
            "updatePoint": {
                "line": 96,
                "column": 52
            },
            "line": 96,
            "code": "\ttest(`invalid static token should not set the token`, async (url, nock) => {\n\t\tnock()\n\t\t\t.get('/users/me')\n\t\t\t.query({\n\t\t\t\taccess_token: 'token',\n\t\t\t})\n\t\t\t.reply(401, {\n\t\t\t\terrors: [\n\t\t\t\t\t{\n\t\t\t\t\t\tmessage: 'Invalid token',\n\t\t\t\t\t\textensions: {\n\t\t\t\t\t\t\tcode: 'EUNAUTHORIZED',\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t});\n\n\t\tconst sdk = new Directus(url);\n\t\ttry {\n\t\t\tawait sdk.auth.static('token');\n\t\t\tfail('Should have thrown due to error response');\n\t\t} catch {\n\t\t\t//\n\t\t}\n\n\t\texpect(sdk.auth.token).toBeNull();\n\t});",
            "file": "base/auth.test.ts",
            "skipped": false,
            "dir": "packages/sdk/tests"
        },
        {
            "name": "has storage",
            "suites": [
                "browser sdk"
            ],
            "updatePoint": {
                "line": 8,
                "column": 16
            },
            "line": 8,
            "code": "\tit('has storage', function () {\n\t\tconst sdk = new Directus('http://example.com');\n\t\texpect(sdk.storage).toBeInstanceOf(LocalStorage);\n\t});",
            "file": "base/directus.browser.test.ts",
            "skipped": false,
            "dir": "packages/sdk/tests"
        },
        {
            "name": "has memory storage",
            "suites": [
                "browser sdk"
            ],
            "updatePoint": {
                "line": 13,
                "column": 23
            },
            "line": 13,
            "code": "\tit('has memory storage', function () {\n\t\tconst sdk = new Directus('http://example.com', { storage: { mode: 'MemoryStorage' } });\n\t\texpect(sdk.storage).toBeInstanceOf(MemoryStorage);\n\t});",
            "file": "base/directus.browser.test.ts",
            "skipped": false,
            "dir": "packages/sdk/tests"
        },
        {
            "name": "has auth",
            "suites": [
                "sdk"
            ],
            "updatePoint": {
                "line": 34,
                "column": 13
            },
            "line": 34,
            "code": "\tit('has auth', function () {\n\t\texpect(sdk.auth).toBeInstanceOf(Auth);\n\t});",
            "file": "base/directus.test.ts",
            "skipped": false,
            "dir": "packages/sdk/tests"
        },
        {
            "name": "has transport",
            "suites": [
                "sdk"
            ],
            "updatePoint": {
                "line": 38,
                "column": 18
            },
            "line": 38,
            "code": "\tit('has transport', function () {\n\t\texpect(sdk.transport).toBeInstanceOf(Transport);\n\t});",
            "file": "base/directus.test.ts",
            "skipped": false,
            "dir": "packages/sdk/tests"
        },
        {
            "name": "has activity instance",
            "suites": [
                "sdk"
            ],
            "updatePoint": {
                "line": 42,
                "column": 26
            },
            "line": 42,
            "code": "\tit('has activity instance', function () {\n\t\texpect(sdk.activity).toBeInstanceOf(ActivityHandler);\n\t});",
            "file": "base/directus.test.ts",
            "skipped": false,
            "dir": "packages/sdk/tests"
        },
        {
            "name": "has activity instance",
            "suites": [
                "sdk"
            ],
            "updatePoint": {
                "line": 46,
                "column": 26
            },
            "line": 46,
            "code": "\tit('has activity instance', function () {\n\t\texpect(sdk.activity.comments).toBeInstanceOf(CommentsHandler);\n\t});",
            "file": "base/directus.test.ts",
            "skipped": false,
            "dir": "packages/sdk/tests"
        },
        {
            "name": "has collections instance",
            "suites": [
                "sdk"
            ],
            "updatePoint": {
                "line": 50,
                "column": 29
            },
            "line": 50,
            "code": "\tit('has collections instance', function () {\n\t\texpect(sdk.collections).toBeInstanceOf(CollectionsHandler);\n\t});",
            "file": "base/directus.test.ts",
            "skipped": false,
            "dir": "packages/sdk/tests"
        },
        {
            "name": "has fields instance",
            "suites": [
                "sdk"
            ],
            "updatePoint": {
                "line": 54,
                "column": 24
            },
            "line": 54,
            "code": "\tit('has fields instance', function () {\n\t\texpect(sdk.fields).toBeInstanceOf(FieldsHandler);\n\t});",
            "file": "base/directus.test.ts",
            "skipped": false,
            "dir": "packages/sdk/tests"
        },
        {
            "name": "has files instance",
            "suites": [
                "sdk"
            ],
            "updatePoint": {
                "line": 58,
                "column": 23
            },
            "line": 58,
            "code": "\tit('has files instance', function () {\n\t\texpect(sdk.files).toBeInstanceOf(FilesHandler);\n\t});",
            "file": "base/directus.test.ts",
            "skipped": false,
            "dir": "packages/sdk/tests"
        },
        {
            "name": "has folders instance",
            "suites": [
                "sdk"
            ],
            "updatePoint": {
                "line": 62,
                "column": 25
            },
            "line": 62,
            "code": "\tit('has folders instance', function () {\n\t\texpect(sdk.folders).toBeInstanceOf(FoldersHandler);\n\t});",
            "file": "base/directus.test.ts",
            "skipped": false,
            "dir": "packages/sdk/tests"
        },
        {
            "name": "has permissions instance",
            "suites": [
                "sdk"
            ],
            "updatePoint": {
                "line": 66,
                "column": 29
            },
            "line": 66,
            "code": "\tit('has permissions instance', function () {\n\t\texpect(sdk.permissions).toBeInstanceOf(PermissionsHandler);\n\t});",
            "file": "base/directus.test.ts",
            "skipped": false,
            "dir": "packages/sdk/tests"
        },
        {
            "name": "has presets instance",
            "suites": [
                "sdk"
            ],
            "updatePoint": {
                "line": 70,
                "column": 25
            },
            "line": 70,
            "code": "\tit('has presets instance', function () {\n\t\texpect(sdk.presets).toBeInstanceOf(PresetsHandler);\n\t});",
            "file": "base/directus.test.ts",
            "skipped": false,
            "dir": "packages/sdk/tests"
        },
        {
            "name": "has relations instance",
            "suites": [
                "sdk"
            ],
            "updatePoint": {
                "line": 74,
                "column": 27
            },
            "line": 74,
            "code": "\tit('has relations instance', function () {\n\t\texpect(sdk.relations).toBeInstanceOf(RelationsHandler);\n\t});",
            "file": "base/directus.test.ts",
            "skipped": false,
            "dir": "packages/sdk/tests"
        },
        {
            "name": "has revisions instance",
            "suites": [
                "sdk"
            ],
            "updatePoint": {
                "line": 78,
                "column": 27
            },
            "line": 78,
            "code": "\tit('has revisions instance', function () {\n\t\texpect(sdk.revisions).toBeInstanceOf(RevisionsHandler);\n\t});",
            "file": "base/directus.test.ts",
            "skipped": false,
            "dir": "packages/sdk/tests"
        },
        {
            "name": "has roles instance",
            "suites": [
                "sdk"
            ],
            "updatePoint": {
                "line": 82,
                "column": 23
            },
            "line": 82,
            "code": "\tit('has roles instance', function () {\n\t\texpect(sdk.roles).toBeInstanceOf(RolesHandler);\n\t});",
            "file": "base/directus.test.ts",
            "skipped": false,
            "dir": "packages/sdk/tests"
        },
        {
            "name": "has server instance",
            "suites": [
                "sdk"
            ],
            "updatePoint": {
                "line": 86,
                "column": 24
            },
            "line": 86,
            "code": "\tit('has server instance', function () {\n\t\texpect(sdk.server).toBeInstanceOf(ServerHandler);\n\t});",
            "file": "base/directus.test.ts",
            "skipped": false,
            "dir": "packages/sdk/tests"
        },
        {
            "name": "has settings instance",
            "suites": [
                "sdk"
            ],
            "updatePoint": {
                "line": 90,
                "column": 26
            },
            "line": 90,
            "code": "\tit('has settings instance', function () {\n\t\texpect(sdk.settings).toBeInstanceOf(SettingsHandler);\n\t});",
            "file": "base/directus.test.ts",
            "skipped": false,
            "dir": "packages/sdk/tests"
        },
        {
            "name": "has users instance",
            "suites": [
                "sdk"
            ],
            "updatePoint": {
                "line": 94,
                "column": 23
            },
            "line": 94,
            "code": "\tit('has users instance', function () {\n\t\texpect(sdk.users).toBeInstanceOf(UsersHandler);\n\t});",
            "file": "base/directus.test.ts",
            "skipped": false,
            "dir": "packages/sdk/tests"
        },
        {
            "name": "has users invites",
            "suites": [
                "sdk"
            ],
            "updatePoint": {
                "line": 98,
                "column": 22
            },
            "line": 98,
            "code": "\tit('has users invites', function () {\n\t\texpect(sdk.users.invites).toBeInstanceOf(InvitesHandler);\n\t});",
            "file": "base/directus.test.ts",
            "skipped": false,
            "dir": "packages/sdk/tests"
        },
        {
            "name": "has user profile",
            "suites": [
                "sdk"
            ],
            "updatePoint": {
                "line": 102,
                "column": 21
            },
            "line": 102,
            "code": "\tit('has user profile', function () {\n\t\texpect(sdk.users.me).toBeInstanceOf(MeHandler);\n\t});",
            "file": "base/directus.test.ts",
            "skipped": false,
            "dir": "packages/sdk/tests"
        },
        {
            "name": "has users tfa",
            "suites": [
                "sdk"
            ],
            "updatePoint": {
                "line": 106,
                "column": 18
            },
            "line": 106,
            "code": "\tit('has users tfa', function () {\n\t\texpect(sdk.users.me.tfa).toBeInstanceOf(TFAHandler);\n\t});",
            "file": "base/directus.test.ts",
            "skipped": false,
            "dir": "packages/sdk/tests"
        },
        {
            "name": "has utils instance",
            "suites": [
                "sdk"
            ],
            "updatePoint": {
                "line": 110,
                "column": 23
            },
            "line": 110,
            "code": "\tit('has utils instance', function () {\n\t\texpect(sdk.utils).toBeInstanceOf(UtilsHandler);\n\t});",
            "file": "base/directus.test.ts",
            "skipped": false,
            "dir": "packages/sdk/tests"
        },
        {
            "name": "has items",
            "suites": [
                "sdk"
            ],
            "updatePoint": {
                "line": 114,
                "column": 14
            },
            "line": 114,
            "code": "\tit('has items', async function () {\n\t\texpect(sdk.items('collection')).toBeInstanceOf(ItemsHandler);\n\t});",
            "file": "base/directus.test.ts",
            "skipped": false,
            "dir": "packages/sdk/tests"
        },
        {
            "name": "can run graphql",
            "suites": [
                "sdk"
            ],
            "updatePoint": {
                "line": 118,
                "column": 22
            },
            "line": 118,
            "code": "\ttest('can run graphql', async function (url, nock) {\n\t\tconst scope = nock()\n\t\t\t.post('/graphql')\n\t\t\t.reply(200, {\n\t\t\t\tdata: {\n\t\t\t\t\tposts: [\n\t\t\t\t\t\t{ id: 1, title: 'My first post' },\n\t\t\t\t\t\t{ id: 2, title: 'My second post' },\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t});\n\n\t\tconst query = `\n\t\t\tquery {\n\t\t\t\tposts {\n\t\t\t\t\tid\n\t\t\t\t\ttitle\n\t\t\t\t}\n\t\t\t}\n\t\t`;\n\n\t\tconst sdk = new Directus(url);\n\n\t\tconst response = await sdk.graphql.items(query);\n\n\t\texpect(response.data).toMatchObject({\n\t\t\tposts: [\n\t\t\t\t{ id: 1, title: 'My first post' },\n\t\t\t\t{ id: 2, title: 'My second post' },\n\t\t\t],\n\t\t});\n\t\texpect(scope.pendingMocks().length).toBe(0);\n\t});",
            "file": "base/directus.test.ts",
            "skipped": false,
            "dir": "packages/sdk/tests"
        },
        {
            "name": "can run graphql on system",
            "suites": [
                "sdk"
            ],
            "updatePoint": {
                "line": 152,
                "column": 32
            },
            "line": 152,
            "code": "\ttest('can run graphql on system', async function (url, nock) {\n\t\tconst scope = nock()\n\t\t\t.post('/graphql/system')\n\t\t\t.reply(200, {\n\t\t\t\tdata: {\n\t\t\t\t\tusers: [{ email: 'someone@example.com' }, { email: 'someone.else@example.com' }],\n\t\t\t\t},\n\t\t\t});\n\n\t\tconst query = `\n\t\t\tquery {\n\t\t\t\tusers {\n\t\t\t\t\temail\n\t\t\t\t}\n\t\t\t}\n\t\t`;\n\n\t\tconst sdk = new Directus(url);\n\n\t\tconst response = await sdk.graphql.system(query);\n\n\t\texpect(response.data).toMatchObject({\n\t\t\tusers: [{ email: 'someone@example.com' }, { email: 'someone.else@example.com' }],\n\t\t});\n\t\texpect(scope.pendingMocks().length).toBe(0);\n\t});",
            "file": "base/directus.test.ts",
            "skipped": false,
            "dir": "packages/sdk/tests"
        },
        {
            "name": " should return a response object",
            "suites": [
                "default transport"
            ],
            "updatePoint": {
                "line": 30,
                "column": 47
            },
            "line": 30,
            "code": "\t\tit(`${method} should return a response object`, async () => {\n\t\t\tconst route = `/${method}/response`;\n\t\t\t(nock(URL) as any)[method](route).reply(200);\n\n\t\t\tconst transport = new Transport({ url: URL }) as any;\n\t\t\tconst response = await transport[method](route);\n\t\t\texpectResponse(response, {\n\t\t\t\tstatus: 200,\n\t\t\t});\n\t\t});",
            "file": "base/transport.test.ts",
            "skipped": false,
            "dir": "packages/sdk/tests"
        },
        {
            "name": " should throw on response errors",
            "suites": [
                "default transport"
            ],
            "updatePoint": {
                "line": 41,
                "column": 47
            },
            "line": 41,
            "code": "\t\tit(`${method} should throw on response errors`, async function () {\n\t\t\tconst route = `/${method}/500`;\n\t\t\t(nock(URL) as any)[method](route).reply(500);\n\n\t\t\tconst transport = new Transport({ url: URL }) as any;\n\n\t\t\ttry {\n\t\t\t\tawait transport[method](route);\n\t\t\t\tfail();\n\t\t\t} catch (err: any) {\n\t\t\t\texpect(err).toBeInstanceOf(TransportError);\n\t\t\t}\n\t\t});",
            "file": "base/transport.test.ts",
            "skipped": false,
            "dir": "packages/sdk/tests"
        },
        {
            "name": " should carry response error information",
            "suites": [
                "default transport"
            ],
            "updatePoint": {
                "line": 55,
                "column": 55
            },
            "line": 55,
            "code": "\t\tit(`${method} should carry response error information`, async function () {\n\t\t\tconst route = `/${method}/403/error`;\n\t\t\t(nock(URL) as any)[method](route).reply(403, {\n\t\t\t\terrors: [\n\t\t\t\t\t{\n\t\t\t\t\t\tmessage: 'You don\\'t have permission access to \"contacts\" collection.',\n\t\t\t\t\t\textensions: {\n\t\t\t\t\t\t\tcode: 'FORBIDDEN',\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t});\n\n\t\t\tconst transport = new Transport({ url: URL }) as any;\n\n\t\t\ttry {\n\t\t\t\tawait transport[method](route);\n\t\t\t\tfail();\n\t\t\t} catch (err: any) {\n\t\t\t\tconst terr = err as TransportError;\n\t\t\t\texpect(terr).toBeInstanceOf(TransportError);\n\t\t\t\texpect(terr.response?.status).toBe(403);\n\t\t\t\texpect(terr.message).toBe('You don\\'t have permission access to \"contacts\" collection.');\n\t\t\t\texpect(terr.errors.length).toBe(1);\n\t\t\t\texpect(terr.errors[0]?.message).toBe('You don\\'t have permission access to \"contacts\" collection.');\n\t\t\t\texpect(terr.errors[0]?.extensions?.code).toBe('FORBIDDEN');\n\t\t\t}\n\t\t});",
            "file": "base/transport.test.ts",
            "skipped": false,
            "dir": "packages/sdk/tests"
        },
        {
            "name": "get should throw non response errors",
            "suites": [
                "default transport"
            ],
            "updatePoint": {
                "line": 84,
                "column": 42
            },
            "line": 84,
            "code": "\t\tit('get should throw non response errors', async function () {\n\t\t\tconst route = `/${method}/this/raises/error`;\n\t\t\t(nock(URL) as any)[method](route).replyWithError('Random error');\n\n\t\t\tconst transport = new Transport({ url: URL }) as any;\n\n\t\t\ttry {\n\t\t\t\tawait transport[method](route);\n\t\t\t\tfail();\n\t\t\t} catch (err: any) {\n\t\t\t\tconst terr = err as TransportError;\n\t\t\t\texpect(terr).toBeInstanceOf(TransportError);\n\t\t\t\texpect(terr.response).toBeUndefined();\n\t\t\t\texpect(terr.message).toBe('Random error');\n\t\t\t\texpect(terr.parent).not.toBeUndefined();\n\t\t\t\texpect(terr.parent?.message).toBe('Random error');\n\t\t\t}\n\t\t});",
            "file": "base/transport.test.ts",
            "skipped": false,
            "dir": "packages/sdk/tests"
        },
        {
            "name": "returns the configured url",
            "suites": [
                "default transport"
            ],
            "updatePoint": {
                "line": 104,
                "column": 31
            },
            "line": 104,
            "code": "\tit('returns the configured url', async function () {\n\t\tconst transport = new Transport({ url: URL });\n\t\texpect(transport.url).toBe(URL);\n\t});",
            "file": "base/transport.test.ts",
            "skipped": false,
            "dir": "packages/sdk/tests"
        },
        {
            "name": "non axios errors are set in parent",
            "suites": [
                "default transport"
            ],
            "updatePoint": {
                "line": 109,
                "column": 39
            },
            "line": 109,
            "code": "\tit('non axios errors are set in parent', async function () {\n\t\tconst transport = new Transport({ url: URL });\n\t\tconst mock = jest.spyOn(transport, 'beforeRequest');\n\t\tmock.mockImplementation(() => {\n\t\t\tthrow new Error('this is not an axios error');\n\t\t});\n\n\t\ttry {\n\t\t\tawait transport.get('/route');\n\t\t\tfail();\n\t\t} catch (err: any) {\n\t\t\tconst terr = err as TransportError;\n\t\t\texpect(terr).toBeInstanceOf(TransportError);\n\t\t\texpect(terr.response).toBeUndefined();\n\t\t\texpect(terr.message).toBe('this is not an axios error');\n\t\t\texpect(terr.parent).not.toBeUndefined();\n\t\t\texpect(terr.parent?.message).toBe('this is not an axios error');\n\t\t}\n\t});",
            "file": "base/transport.test.ts",
            "skipped": false,
            "dir": "packages/sdk/tests"
        },
        {
            "name": "creates comments",
            "suites": [
                "comments"
            ],
            "updatePoint": {
                "line": 9,
                "column": 23
            },
            "line": 9,
            "code": "\ttest(`creates comments`, async (url, nock) => {\n\t\tnock()\n\t\t\t.post('/activity/comment', {\n\t\t\t\tcollection: 'posts',\n\t\t\t\titem: '1',\n\t\t\t\tcomment: 'Awesome post!',\n\t\t\t})\n\t\t\t.reply(200, {\n\t\t\t\tdata: {\n\t\t\t\t\tid: 5,\n\t\t\t\t\tcollection: 'posts',\n\t\t\t\t\titem: '1',\n\t\t\t\t\tcomment: 'Awesome post!',\n\t\t\t\t},\n\t\t\t});\n\n\t\tconst sdk = new Directus(url);\n\t\tconst item = await sdk.activity.comments.create({\n\t\t\tcollection: 'posts',\n\t\t\titem: '1',\n\t\t\tcomment: 'Awesome post!',\n\t\t});\n\n\t\texpect(item.id).toBe(5);\n\t\texpect(item.comment).toBe('Awesome post!');\n\t});",
            "file": "handlers/comments.test.ts",
            "skipped": false,
            "dir": "packages/sdk/tests"
        },
        {
            "name": "updates comments",
            "suites": [
                "comments"
            ],
            "updatePoint": {
                "line": 36,
                "column": 23
            },
            "line": 36,
            "code": "\ttest(`updates comments`, async (url, nock) => {\n\t\tnock()\n\t\t\t.patch('/activity/comment/5', {\n\t\t\t\tcomment: 'Awesome content!',\n\t\t\t})\n\t\t\t.reply(202, {\n\t\t\t\tdata: {\n\t\t\t\t\tid: 5,\n\t\t\t\t\tcollection: 'posts',\n\t\t\t\t\titem: '1',\n\t\t\t\t\tcomment: 'Awesome content!',\n\t\t\t\t},\n\t\t\t});\n\n\t\tconst sdk = new Directus(url);\n\t\tconst item = await sdk.activity.comments.update(5, 'Awesome content!');\n\n\t\texpect(item.comment).toBe('Awesome content!');\n\t});",
            "file": "handlers/comments.test.ts",
            "skipped": false,
            "dir": "packages/sdk/tests"
        },
        {
            "name": "deletes comments",
            "suites": [
                "comments"
            ],
            "updatePoint": {
                "line": 56,
                "column": 23
            },
            "line": 56,
            "code": "\ttest(`deletes comments`, async (url, nock) => {\n\t\tconst scope = nock().delete('/activity/comment/5').reply(204);\n\n\t\tconst sdk = new Directus(url);\n\t\tawait sdk.activity.comments.delete(5);\n\n\t\texpect(scope.pendingMocks().length).toBe(0);\n\t});",
            "file": "handlers/comments.test.ts",
            "skipped": false,
            "dir": "packages/sdk/tests"
        },
        {
            "name": "update one",
            "suites": [
                "fields"
            ],
            "updatePoint": {
                "line": 9,
                "column": 17
            },
            "line": 9,
            "code": "\ttest(`update one`, async (url, nock) => {\n\t\tconst scope = nock()\n\t\t\t.patch('/fields/posts/title', { meta: { required: true } })\n\t\t\t.reply(200, {});\n\n\t\tconst sdk = new Directus(url);\n\t\tawait sdk.fields.updateOne('posts', 'title', {\n\t\t\tmeta: {\n\t\t\t\trequired: true,\n\t\t\t},\n\t\t});\n\n\t\texpect(scope.pendingMocks().length).toBe(0);\n\t});",
            "file": "handlers/fields.test.ts",
            "skipped": false,
            "dir": "packages/sdk/tests"
        },
        {
            "name": "send",
            "suites": [
                "invites"
            ],
            "updatePoint": {
                "line": 9,
                "column": 11
            },
            "line": 9,
            "code": "\ttest('send', async (url, nock) => {\n\t\tconst scope = nock()\n\t\t\t.post('/users/invite', {\n\t\t\t\temail: 'admin@example.com',\n\t\t\t\trole: '1e098175-6258-48d6-ad88-d24cae2abe15',\n\t\t\t})\n\t\t\t.reply(200, {});\n\n\t\tconst sdk = new Directus(url);\n\t\tawait sdk.users.invites.send('admin@example.com', '1e098175-6258-48d6-ad88-d24cae2abe15');\n\n\t\texpect(scope.pendingMocks().length).toBe(0);\n\t});",
            "file": "handlers/invites.test.ts",
            "skipped": false,
            "dir": "packages/sdk/tests"
        },
        {
            "name": "accept",
            "suites": [
                "invites"
            ],
            "updatePoint": {
                "line": 23,
                "column": 13
            },
            "line": 23,
            "code": "\ttest(`accept`, async (url, nock) => {\n\t\tconst scope = nock()\n\t\t\t.post('/users/invite/accept', {\n\t\t\t\ttoken: 'token',\n\t\t\t\tpassword: 'password1234',\n\t\t\t})\n\t\t\t.reply(200, {});\n\n\t\tconst sdk = new Directus(url);\n\t\tawait sdk.users.invites.accept('token', 'password1234');\n\n\t\texpect(scope.pendingMocks().length).toBe(0);\n\t});",
            "file": "handlers/invites.test.ts",
            "skipped": false,
            "dir": "packages/sdk/tests"
        },
        {
            "name": "read",
            "suites": [
                "profile"
            ],
            "updatePoint": {
                "line": 9,
                "column": 11
            },
            "line": 9,
            "code": "\ttest(`read`, async (url, nock) => {\n\t\tconst scope = nock().get('/users/me').reply(200, {});\n\n\t\tconst sdk = new Directus(url);\n\t\tawait sdk.users.me.read();\n\n\t\texpect(scope.pendingMocks().length).toBe(0);\n\t});",
            "file": "handlers/me.test.ts",
            "skipped": false,
            "dir": "packages/sdk/tests"
        },
        {
            "name": "update",
            "suites": [
                "profile"
            ],
            "updatePoint": {
                "line": 18,
                "column": 13
            },
            "line": 18,
            "code": "\ttest(`update`, async (url, nock) => {\n\t\tconst scope = nock()\n\t\t\t.patch('/users/me', {\n\t\t\t\temail: 'other@email.com',\n\t\t\t\tuntyped_field: 12345,\n\t\t\t})\n\t\t\t.reply(200, {});\n\n\t\tconst sdk = new Directus(url);\n\t\tawait sdk.users.me.update({\n\t\t\temail: 'other@email.com',\n\t\t\tuntyped_field: 12345,\n\t\t});\n\n\t\texpect(scope.pendingMocks().length).toBe(0);\n\t});",
            "file": "handlers/me.test.ts",
            "skipped": false,
            "dir": "packages/sdk/tests"
        },
        {
            "name": "request",
            "suites": [
                "password"
            ],
            "updatePoint": {
                "line": 9,
                "column": 14
            },
            "line": 9,
            "code": "\ttest(`request`, async (url, nock) => {\n\t\tconst scope = nock()\n\t\t\t.post('/auth/password/request', {\n\t\t\t\temail: 'admin@example.com',\n\t\t\t\treset_url: 'http://some_url.com',\n\t\t\t})\n\t\t\t.reply(200, {});\n\n\t\tconst sdk = new Directus(url);\n\t\tawait sdk.auth.password.request('admin@example.com', 'http://some_url.com');\n\n\t\texpect(scope.pendingMocks().length).toBe(0);\n\t});",
            "file": "handlers/passwords.test.ts",
            "skipped": false,
            "dir": "packages/sdk/tests"
        },
        {
            "name": "reset",
            "suites": [
                "password"
            ],
            "updatePoint": {
                "line": 23,
                "column": 12
            },
            "line": 23,
            "code": "\ttest(`reset`, async (url, nock) => {\n\t\tconst scope = nock()\n\t\t\t.post('/auth/password/reset', {\n\t\t\t\ttoken: 'token',\n\t\t\t\tpassword: 'newpassword',\n\t\t\t})\n\t\t\t.reply(200, {});\n\n\t\tconst sdk = new Directus(url);\n\t\tawait sdk.auth.password.reset('token', 'newpassword');\n\n\t\texpect(scope.pendingMocks().length).toBe(0);\n\t});",
            "file": "handlers/passwords.test.ts",
            "skipped": false,
            "dir": "packages/sdk/tests"
        },
        {
            "name": "ping the server",
            "suites": [
                "server"
            ],
            "updatePoint": {
                "line": 9,
                "column": 22
            },
            "line": 9,
            "code": "\ttest(`ping the server`, async (url, nock) => {\n\t\tnock().get('/server/ping').reply(200, 'pong', { 'Content-Type': 'text/plain' });\n\n\t\tconst sdk = new Directus(url);\n\t\tconst str = await sdk.server.ping();\n\n\t\texpect(str).toBe('pong');\n\t});",
            "file": "handlers/server.test.ts",
            "skipped": false,
            "dir": "packages/sdk/tests"
        },
        {
            "name": "get server info",
            "suites": [
                "server"
            ],
            "updatePoint": {
                "line": 18,
                "column": 22
            },
            "line": 18,
            "code": "\ttest(`get server info`, async (url, nock) => {\n\t\tconst scope = nock().get('/server/info').reply(200, {});\n\n\t\tconst sdk = new Directus(url);\n\t\tawait sdk.server.info();\n\n\t\texpect(scope.pendingMocks().length).toBe(0);\n\t});",
            "file": "handlers/server.test.ts",
            "skipped": false,
            "dir": "packages/sdk/tests"
        },
        {
            "name": "generate",
            "suites": [
                "tfa"
            ],
            "updatePoint": {
                "line": 9,
                "column": 15
            },
            "line": 9,
            "code": "\ttest(`generate`, async (url, nock) => {\n\t\tconst scope = nock()\n\t\t\t.post('/users/me/tfa/generate', {\n\t\t\t\tpassword: 'password1234',\n\t\t\t})\n\t\t\t.reply(200, {\n\t\t\t\tdata: {\n\t\t\t\t\tsecret: 'supersecret',\n\t\t\t\t\totpauth_url: 'https://example.com',\n\t\t\t\t},\n\t\t\t});\n\n\t\tconst sdk = new Directus(url);\n\t\tconst data = await sdk.users.me.tfa.generate('password1234');\n\n\t\texpect(scope.pendingMocks().length).toBe(0);\n\t\texpect(data).toStrictEqual({\n\t\t\tsecret: 'supersecret',\n\t\t\totpauth_url: 'https://example.com',\n\t\t});\n\t});",
            "file": "handlers/tfa.test.ts",
            "skipped": false,
            "dir": "packages/sdk/tests"
        },
        {
            "name": "enable",
            "suites": [
                "tfa"
            ],
            "updatePoint": {
                "line": 30,
                "column": 13
            },
            "line": 30,
            "code": "\ttest(`enable`, async (url, nock) => {\n\t\tconst scope = nock()\n\t\t\t.post('/users/me/tfa/enable', {\n\t\t\t\tsecret: 'supersecret',\n\t\t\t\totp: '123456',\n\t\t\t})\n\t\t\t.reply(200, {});\n\n\t\tconst sdk = new Directus(url);\n\t\tawait sdk.users.me.tfa.enable('supersecret', '123456');\n\n\t\texpect(scope.pendingMocks().length).toBe(0);\n\t});",
            "file": "handlers/tfa.test.ts",
            "skipped": false,
            "dir": "packages/sdk/tests"
        },
        {
            "name": "disable",
            "suites": [
                "tfa"
            ],
            "updatePoint": {
                "line": 44,
                "column": 14
            },
            "line": 44,
            "code": "\ttest(`disable`, async (url, nock) => {\n\t\tconst scope = nock()\n\t\t\t.post('/users/me/tfa/disable', {\n\t\t\t\totp: '12345',\n\t\t\t})\n\t\t\t.reply(200, {});\n\n\t\tconst sdk = new Directus(url);\n\t\tawait sdk.users.me.tfa.disable('12345');\n\n\t\texpect(scope.pendingMocks().length).toBe(0);\n\t});",
            "file": "handlers/tfa.test.ts",
            "skipped": false,
            "dir": "packages/sdk/tests"
        },
        {
            "name": "generates random string",
            "suites": [
                "utils"
            ],
            "updatePoint": {
                "line": 11,
                "column": 30
            },
            "line": 11,
            "code": "\ttest(`generates random string`, async (url, nock) => {\n\t\tnock()\n\t\t\t.get('/utils/random/string')\n\t\t\t.query({\n\t\t\t\tlength: '32',\n\t\t\t})\n\t\t\t.reply(200, {\n\t\t\t\tdata: '01234567890123456789012345678901',\n\t\t\t});\n\n\t\tconst sdk = new Directus(url);\n\t\tconst str = await sdk.utils.random.string(32);\n\n\t\texpect(str).toBe('01234567890123456789012345678901');\n\t});",
            "file": "handlers/utils.test.ts",
            "skipped": false,
            "dir": "packages/sdk/tests"
        },
        {
            "name": "hash generate",
            "suites": [
                "utils"
            ],
            "updatePoint": {
                "line": 27,
                "column": 20
            },
            "line": 27,
            "code": "\ttest(`hash generate`, async (url, nock) => {\n\t\tnock()\n\t\t\t.post('/utils/hash/generate', {\n\t\t\t\tstring: 'wolfulus',\n\t\t\t})\n\t\t\t.reply(200, async (_, body: any) => {\n\t\t\t\treturn {\n\t\t\t\t\tdata: await generateHash(body.string),\n\t\t\t\t};\n\t\t\t});\n\n\t\tconst sdk = new Directus(url);\n\t\tconst hash = await sdk.utils.hash.generate('wolfulus');\n\n\t\texpect(hash?.substr(0, 7)).toBe('$argon2');\n\t});",
            "file": "handlers/utils.test.ts",
            "skipped": false,
            "dir": "packages/sdk/tests"
        },
        {
            "name": "hash verify",
            "suites": [
                "utils"
            ],
            "updatePoint": {
                "line": 44,
                "column": 18
            },
            "line": 44,
            "code": "\ttest(`hash verify`, async (url, nock) => {\n\t\tnock()\n\t\t\t.post('/utils/hash/generate', {\n\t\t\t\tstring: 'wolfulus',\n\t\t\t})\n\t\t\t.reply(200, async (_, body: any) => {\n\t\t\t\treturn {\n\t\t\t\t\tdata: await generateHash(body.string),\n\t\t\t\t};\n\t\t\t});\n\n\t\tconst sdk = new Directus(url);\n\t\tconst hash = await sdk.utils.hash.generate('wolfulus');\n\n\t\texpect(hash?.substr(0, 7)).toBe('$argon2');\n\n\t\tnock()\n\t\t\t.post('/utils/hash/verify')\n\t\t\t.reply(200, async (_, body: any) => {\n\t\t\t\treturn {\n\t\t\t\t\tdata: await argon2.verify(body.hash, body.string),\n\t\t\t\t};\n\t\t\t});\n\n\t\tconst result = await sdk.utils.hash.verify('wolfulus', hash || '');\n\n\t\texpect(result).toBe(true);\n\t});",
            "file": "handlers/utils.test.ts",
            "skipped": false,
            "dir": "packages/sdk/tests"
        },
        {
            "name": "sort",
            "suites": [
                "utils"
            ],
            "updatePoint": {
                "line": 73,
                "column": 11
            },
            "line": 73,
            "code": "\ttest(`sort`, async (url, nock) => {\n\t\tnock()\n\t\t\t.post('/utils/sort/posts', {\n\t\t\t\titem: 10,\n\t\t\t\tto: 5,\n\t\t\t})\n\t\t\t.reply(204);\n\n\t\tconst sdk = new Directus(url);\n\t\tawait sdk.utils.sort('posts', 10, 5);\n\t});",
            "file": "handlers/utils.test.ts",
            "skipped": false,
            "dir": "packages/sdk/tests"
        },
        {
            "name": "revert",
            "suites": [
                "utils"
            ],
            "updatePoint": {
                "line": 85,
                "column": 13
            },
            "line": 85,
            "code": "\ttest(`revert`, async (url, nock) => {\n\t\tnock().post('/utils/revert/555').reply(204);\n\t\tconst sdk = new Directus(url);\n\t\tawait sdk.utils.revert(555);\n\t});",
            "file": "handlers/utils.test.ts",
            "skipped": false,
            "dir": "packages/sdk/tests"
        },
        {
            "name": "can get an item by id",
            "suites": [
                "items"
            ],
            "updatePoint": {
                "line": 10,
                "column": 28
            },
            "line": 10,
            "code": "\ttest(`can get an item by id`, async (url, nock) => {\n\t\tnock()\n\t\t\t.get('/items/posts/1')\n\t\t\t.reply(200, {\n\t\t\t\tdata: {\n\t\t\t\t\tid: 1,\n\t\t\t\t\ttitle: 'My first post',\n\t\t\t\t\tbody: '<h1>Hey there!</h1>',\n\t\t\t\t},\n\t\t\t});\n\n\t\tconst sdk = new Directus<Blog>(url);\n\t\tconst item = await sdk.items('posts').readOne(1);\n\n\t\texpect(item).not.toBeNull();\n\t\texpect(item).not.toBeUndefined();\n\t\texpect(item?.id).toBe(1);\n\t\texpect(item?.title).toBe(`My first post`);\n\t\texpect(item?.body).toBe('<h1>Hey there!</h1>');\n\t});",
            "file": "items.test.ts",
            "skipped": false,
            "dir": "packages/sdk/tests"
        },
        {
            "name": "should encode ids",
            "suites": [
                "items"
            ],
            "updatePoint": {
                "line": 31,
                "column": 24
            },
            "line": 31,
            "code": "\ttest(`should encode ids`, async (url, nock) => {\n\t\tnock()\n\t\t\t.get('/items/categories/double%20slash')\n\t\t\t.reply(200, {\n\t\t\t\tdata: {\n\t\t\t\t\tslug: 'double slash',\n\t\t\t\t\tname: 'Double Slash',\n\t\t\t\t},\n\t\t\t});\n\n\t\tconst sdk = new Directus<Blog>(url);\n\t\tconst item = await sdk.items('categories').readOne('double slash');\n\n\t\texpect(item).not.toBeNull();\n\t\texpect(item).not.toBeUndefined();\n\t\texpect(item?.slug).toBe('double slash');\n\t\texpect(item?.name).toBe('Double Slash');\n\t});",
            "file": "items.test.ts",
            "skipped": false,
            "dir": "packages/sdk/tests"
        },
        {
            "name": "can get multiple items by id",
            "suites": [
                "items"
            ],
            "updatePoint": {
                "line": 50,
                "column": 35
            },
            "line": 50,
            "code": "\ttest(`can get multiple items by id`, async (url, nock) => {\n\t\tnock()\n\t\t\t.get('/items/posts')\n\t\t\t.reply(200, {\n\t\t\t\tdata: [\n\t\t\t\t\t{\n\t\t\t\t\t\tid: 1,\n\t\t\t\t\t\ttitle: 'My first post',\n\t\t\t\t\t\tbody: '<h1>Hey there!</h1>',\n\t\t\t\t\t\tpublished: false,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tid: 2,\n\t\t\t\t\t\ttitle: 'My second post',\n\t\t\t\t\t\tbody: '<h1>Hey there!</h1>',\n\t\t\t\t\t\tpublished: true,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t});\n\n\t\tconst sdk = new Directus<Blog>(url);\n\t\tconst items = await sdk.items('posts').readMany();\n\n\t\texpect(items.data?.[0]).toMatchObject({\n\t\t\tid: 1,\n\t\t\ttitle: 'My first post',\n\t\t\tbody: '<h1>Hey there!</h1>',\n\t\t\tpublished: false,\n\t\t});\n\n\t\texpect(items.data?.[1]).toMatchObject({\n\t\t\tid: 2,\n\t\t\ttitle: 'My second post',\n\t\t\tbody: '<h1>Hey there!</h1>',\n\t\t\tpublished: true,\n\t\t});\n\t});",
            "file": "items.test.ts",
            "skipped": false,
            "dir": "packages/sdk/tests"
        },
        {
            "name": "filter param is sent",
            "suites": [
                "items"
            ],
            "updatePoint": {
                "line": 88,
                "column": 27
            },
            "line": 88,
            "code": "\ttest(`filter param is sent`, async (url, nock) => {\n\t\tnock()\n\t\t\t.get('/items/posts')\n\t\t\t.query({\n\t\t\t\t'fields[]': ['id', 'title'],\n\t\t\t})\n\t\t\t.reply(200, {\n\t\t\t\tdata: [\n\t\t\t\t\t{\n\t\t\t\t\t\tid: 1,\n\t\t\t\t\t\ttitle: 'My first post',\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tid: 2,\n\t\t\t\t\t\ttitle: 'My second post',\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t});\n\n\t\tconst sdk = new Directus<Blog>(url);\n\t\tconst items = await sdk.items('posts').readMany({\n\t\t\tfields: ['id', 'title'],\n\t\t});\n\n\t\texpect(items.data?.[0]?.id).toBe(1);\n\t\texpect(items.data?.[0]?.title).toBe(`My first post`);\n\t\texpect(items.data?.[0]?.body).toBeUndefined();\n\n\t\texpect(items.data?.[1]?.id).toBe(2);\n\t\texpect(items.data?.[1]?.title).toBe(`My second post`);\n\t\texpect(items.data?.[1]?.body).toBeUndefined();\n\t});",
            "file": "items.test.ts",
            "skipped": false,
            "dir": "packages/sdk/tests"
        },
        {
            "name": "create one item",
            "suites": [
                "items"
            ],
            "updatePoint": {
                "line": 121,
                "column": 22
            },
            "line": 121,
            "code": "\ttest(`create one item`, async (url, nock) => {\n\t\tnock()\n\t\t\t.post('/items/posts')\n\t\t\t.reply(200, {\n\t\t\t\tdata: {\n\t\t\t\t\tid: 3,\n\t\t\t\t\ttitle: 'New post',\n\t\t\t\t\tbody: 'This is a new post',\n\t\t\t\t\tpublished: false,\n\t\t\t\t},\n\t\t\t});\n\n\t\tconst sdk = new Directus<Blog>(url);\n\t\tconst item = await sdk.items('posts').createOne({\n\t\t\ttitle: 'New post',\n\t\t\tbody: 'This is a new post',\n\t\t\tpublished: false,\n\t\t});\n\n\t\texpect(item).toMatchObject({\n\t\t\tid: 3,\n\t\t\ttitle: 'New post',\n\t\t\tbody: 'This is a new post',\n\t\t\tpublished: false,\n\t\t});\n\t});",
            "file": "items.test.ts",
            "skipped": false,
            "dir": "packages/sdk/tests"
        },
        {
            "name": "create many items",
            "suites": [
                "items"
            ],
            "updatePoint": {
                "line": 148,
                "column": 24
            },
            "line": 148,
            "code": "\ttest(`create many items`, async (url, nock) => {\n\t\tnock()\n\t\t\t.post('/items/posts')\n\t\t\t.reply(200, {\n\t\t\t\tdata: [\n\t\t\t\t\t{\n\t\t\t\t\t\tid: 4,\n\t\t\t\t\t\ttitle: 'New post 2',\n\t\t\t\t\t\tbody: 'This is a new post 2',\n\t\t\t\t\t\tpublished: false,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tid: 5,\n\t\t\t\t\t\ttitle: 'New post 3',\n\t\t\t\t\t\tbody: 'This is a new post 3',\n\t\t\t\t\t\tpublished: true,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t});\n\n\t\tconst sdk = new Directus<Blog>(url);\n\t\tconst items = await sdk.items('posts').createMany([\n\t\t\t{\n\t\t\t\ttitle: 'New post 2',\n\t\t\t\tbody: 'This is a new post 2',\n\t\t\t\tpublished: false,\n\t\t\t},\n\t\t\t{\n\t\t\t\ttitle: 'New post 3',\n\t\t\t\tbody: 'This is a new post 3',\n\t\t\t\tpublished: true,\n\t\t\t},\n\t\t]);\n\n\t\texpect(items.data?.[0]).toMatchObject({\n\t\t\tid: 4,\n\t\t\ttitle: 'New post 2',\n\t\t\tbody: 'This is a new post 2',\n\t\t\tpublished: false,\n\t\t});\n\n\t\texpect(items.data?.[1]).toMatchObject({\n\t\t\tid: 5,\n\t\t\ttitle: 'New post 3',\n\t\t\tbody: 'This is a new post 3',\n\t\t\tpublished: true,\n\t\t});\n\t});",
            "file": "items.test.ts",
            "skipped": false,
            "dir": "packages/sdk/tests"
        },
        {
            "name": "update one item",
            "suites": [
                "items"
            ],
            "updatePoint": {
                "line": 197,
                "column": 22
            },
            "line": 197,
            "code": "\ttest(`update one item`, async (url, nock) => {\n\t\tnock()\n\t\t\t.patch('/items/posts/1')\n\t\t\t.reply(200, {\n\t\t\t\tdata: {\n\t\t\t\t\tid: 1,\n\t\t\t\t\ttitle: 'Updated post',\n\t\t\t\t\tbody: 'Updated post content',\n\t\t\t\t\tpublished: true,\n\t\t\t\t},\n\t\t\t});\n\n\t\tconst sdk = new Directus<Blog>(url);\n\t\tconst item = await sdk.items('posts').updateOne(1, {\n\t\t\ttitle: 'Updated post',\n\t\t\tbody: 'Updated post content',\n\t\t\tpublished: true,\n\t\t});\n\n\t\texpect(item).toMatchObject({\n\t\t\ttitle: 'Updated post',\n\t\t\tbody: 'Updated post content',\n\t\t\tpublished: true,\n\t\t});\n\t});",
            "file": "items.test.ts",
            "skipped": false,
            "dir": "packages/sdk/tests"
        },
        {
            "name": "update many item",
            "suites": [
                "items"
            ],
            "updatePoint": {
                "line": 223,
                "column": 23
            },
            "line": 223,
            "code": "\ttest(`update many item`, async (url, nock) => {\n\t\tnock()\n\t\t\t.patch('/items/posts')\n\t\t\t.reply(200, {\n\t\t\t\tdata: [\n\t\t\t\t\t{\n\t\t\t\t\t\tid: 1,\n\t\t\t\t\t\ttitle: 'Updated post',\n\t\t\t\t\t\tbody: 'Updated post content',\n\t\t\t\t\t\tpublished: true,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tid: 2,\n\t\t\t\t\t\ttitle: 'Updated post',\n\t\t\t\t\t\tbody: 'Updated post content',\n\t\t\t\t\t\tpublished: true,\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t});\n\n\t\tconst sdk = new Directus<Blog>(url);\n\t\tconst items = await sdk.items('posts').updateMany([1, 2], {\n\t\t\ttitle: 'Updated post',\n\t\t\tbody: 'Updated post content',\n\t\t\tpublished: true,\n\t\t});\n\n\t\texpect(items.data?.[0]).toMatchObject({\n\t\t\tid: 1,\n\t\t\ttitle: 'Updated post',\n\t\t\tbody: 'Updated post content',\n\t\t\tpublished: true,\n\t\t});\n\n\t\texpect(items.data?.[1]).toMatchObject({\n\t\t\tid: 2,\n\t\t\ttitle: 'Updated post',\n\t\t\tbody: 'Updated post content',\n\t\t\tpublished: true,\n\t\t});\n\t});",
            "file": "items.test.ts",
            "skipped": false,
            "dir": "packages/sdk/tests"
        },
        {
            "name": "delete one item",
            "suites": [
                "items"
            ],
            "updatePoint": {
                "line": 265,
                "column": 22
            },
            "line": 265,
            "code": "\ttest(`delete one item`, async (url, nock) => {\n\t\tconst scope = nock().delete('/items/posts/1').reply(204);\n\n\t\tconst sdk = new Directus<Blog>(url);\n\t\tawait sdk.items('posts').deleteOne(1);\n\n\t\texpect(scope.pendingMocks().length).toBe(0);\n\t});",
            "file": "items.test.ts",
            "skipped": false,
            "dir": "packages/sdk/tests"
        },
        {
            "name": "delete many item",
            "suites": [
                "items"
            ],
            "updatePoint": {
                "line": 274,
                "column": 23
            },
            "line": 274,
            "code": "\ttest(`delete many item`, async (url, nock) => {\n\t\tconst scope = nock().delete('/items/posts', [1, 2]).reply(204);\n\n\t\tconst sdk = new Directus<Blog>(url);\n\t\tawait sdk.items('posts').deleteMany([1, 2]);\n\n\t\texpect(scope.pendingMocks().length).toBe(0);\n\t});",
            "file": "items.test.ts",
            "skipped": false,
            "dir": "packages/sdk/tests"
        },
        {
            "name": "can get an item",
            "suites": [
                "singleton"
            ],
            "updatePoint": {
                "line": 21,
                "column": 22
            },
            "line": 21,
            "code": "\ttest(`can get an item`, async (url, nock) => {\n\t\tnock()\n\t\t\t.get('/items/settings')\n\t\t\t.reply(200, {\n\t\t\t\tdata: {\n\t\t\t\t\turl: 'http://website.com',\n\t\t\t\t\tcopyright: 'MyWebsite',\n\t\t\t\t\ttitle: 'Website Title',\n\t\t\t\t\tua_code: 'UA1234567890',\n\t\t\t\t\tshow_menu: true,\n\t\t\t\t},\n\t\t\t});\n\n\t\tconst sdk = new Directus<MyWebsite>(url);\n\t\tconst settings = await sdk.singleton('settings').read();\n\n\t\texpect(settings).not.toBeNull();\n\t\texpect(settings).not.toBeUndefined();\n\t\texpect(settings?.url).toBe('http://website.com');\n\t\texpect(settings?.title).toBe(`Website Title`);\n\t\texpect(settings?.show_menu).toBe(true);\n\t});",
            "file": "singleton.test.ts",
            "skipped": false,
            "dir": "packages/sdk/tests"
        },
        {
            "name": "can update an item",
            "suites": [
                "singleton"
            ],
            "updatePoint": {
                "line": 44,
                "column": 25
            },
            "line": 44,
            "code": "\ttest(`can update an item`, async (url, nock) => {\n\t\tnock()\n\t\t\t.patch('/items/settings', {\n\t\t\t\ttitle: 'New Website Title',\n\t\t\t})\n\t\t\t.reply(200, {\n\t\t\t\tdata: {\n\t\t\t\t\turl: 'http://website.com',\n\t\t\t\t\tcopyright: 'MyWebsite',\n\t\t\t\t\ttitle: 'New Website Title',\n\t\t\t\t\tua_code: 'UA1234567890',\n\t\t\t\t\tshow_menu: true,\n\t\t\t\t},\n\t\t\t});\n\n\t\tconst sdk = new Directus<MyWebsite>(url);\n\t\tconst settings = await sdk.singleton('settings').update({\n\t\t\ttitle: 'New Website Title',\n\t\t});\n\n\t\texpect(settings).not.toBeNull();\n\t\texpect(settings).not.toBeUndefined();\n\t\texpect(settings?.url).toBe('http://website.com');\n\t\texpect(settings?.title).toBe(`New Website Title`);\n\t\texpect(settings?.show_menu).toBe(true);\n\t});",
            "file": "singleton.test.ts",
            "skipped": false,
            "dir": "packages/sdk/tests"
        }
    ],
    "badge": "directus__directus.svg"
}