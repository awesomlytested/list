{
    "repo": "krisk/Fuse",
    "url": "https://github.com/krisk/Fuse",
    "branch": "master",
    "configs": [
        {
            "package": "fuse.js",
            "lang": "ts",
            "dir": "test",
            "framework": "jest",
            "pattern": "**/*[._-]{test,spec,unittest,unit}.{ts,js}"
        }
    ],
    "tests": [
        {
            "name": "Search: exact-match",
            "suites": [
                "Searching using extended search"
            ],
            "updatePoint": {
                "line": 35,
                "column": 27
            },
            "line": 35,
            "code": "  test('Search: exact-match', () => {\n    let result = fuse.search('=smith')\n    expect(result).toMatchSnapshot()\n  })",
            "file": "extended-search.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Search: include-match",
            "suites": [
                "Searching using extended search"
            ],
            "updatePoint": {
                "line": 40,
                "column": 29
            },
            "line": 40,
            "code": "  test('Search: include-match', () => {\n    let result = fuse.search(\"'hello\")\n    expect(result).toMatchSnapshot()\n  })",
            "file": "extended-search.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Search: prefix-exact-match",
            "suites": [
                "Searching using extended search"
            ],
            "updatePoint": {
                "line": 45,
                "column": 34
            },
            "line": 45,
            "code": "  test('Search: prefix-exact-match', () => {\n    let result = fuse.search('^hello')\n    expect(result).toMatchSnapshot()\n  })",
            "file": "extended-search.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Search: suffix-exact-match",
            "suites": [
                "Searching using extended search"
            ],
            "updatePoint": {
                "line": 50,
                "column": 34
            },
            "line": 50,
            "code": "  test('Search: suffix-exact-match', () => {\n    let result = fuse.search('fine$')\n    expect(result).toMatchSnapshot()\n  })",
            "file": "extended-search.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Search: inverse-exact-match",
            "suites": [
                "Searching using extended search"
            ],
            "updatePoint": {
                "line": 55,
                "column": 35
            },
            "line": 55,
            "code": "  test('Search: inverse-exact-match', () => {\n    let result = fuse.search('!indeed')\n    expect(result).toMatchSnapshot()\n  })",
            "file": "extended-search.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Search: inverse-prefix-exact-match",
            "suites": [
                "Searching using extended search"
            ],
            "updatePoint": {
                "line": 60,
                "column": 42
            },
            "line": 60,
            "code": "  test('Search: inverse-prefix-exact-match', () => {\n    let result = fuse.search('!^hello')\n    expect(result).toMatchSnapshot()\n  })",
            "file": "extended-search.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Search: inverse-suffix-exact-match",
            "suites": [
                "Searching using extended search"
            ],
            "updatePoint": {
                "line": 65,
                "column": 42
            },
            "line": 65,
            "code": "  test('Search: inverse-suffix-exact-match', () => {\n    let result = fuse.search('!foo$')\n    expect(result).toMatchSnapshot()\n  })",
            "file": "extended-search.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Search: all",
            "suites": [
                "Searching using extended search"
            ],
            "updatePoint": {
                "line": 70,
                "column": 19
            },
            "line": 70,
            "code": "  test('Search: all', () => {\n    let result = fuse.search('!foo$ !^how')\n    expect(result).toMatchSnapshot()\n  })",
            "file": "extended-search.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Search: single literal match",
            "suites": [
                "Searching using extended search"
            ],
            "updatePoint": {
                "line": 75,
                "column": 36
            },
            "line": 75,
            "code": "  test('Search: single literal match', () => {\n    let result = fuse.search('\\'\"indeed fine\"')\n    expect(result).toMatchSnapshot()\n  })",
            "file": "extended-search.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Search: literal match with regular match",
            "suites": [
                "Searching using extended search"
            ],
            "updatePoint": {
                "line": 80,
                "column": 48
            },
            "line": 80,
            "code": "  test('Search: literal match with regular match', () => {\n    let result = fuse.search('\\'\"indeed fine\" foo$ | \\'are')\n    expect(result).toMatchSnapshot()\n  })",
            "file": "extended-search.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Search: literal match with fuzzy match",
            "suites": [
                "Searching using extended search"
            ],
            "updatePoint": {
                "line": 85,
                "column": 46
            },
            "line": 85,
            "code": "  test('Search: literal match with fuzzy match', () => {\n    let result = fuse.search('\\'\"indeed fine\" foo$ | helol')\n    expect(result).toMatchSnapshot()\n  })",
            "file": "extended-search.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Search: literal match with fuzzy match",
            "suites": [
                "ignoreLocation when useExtendedSearch is true"
            ],
            "updatePoint": {
                "line": 99,
                "column": 46
            },
            "line": 99,
            "code": "  test('Search: literal match with fuzzy match', () => {\n    const options = {\n      threshold: 0.2,\n      useExtendedSearch: true,\n      ignoreLocation: true,\n      keys: ['document']\n    }\n    const fuse = new Fuse(list, options)\n\n    let result = fuse.search('Apple')\n    expect(result).toHaveLength(1)\n  })",
            "file": "extended-search.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Errors are thrown",
            "suites": [
                "Initialization errors"
            ],
            "updatePoint": {
                "line": 7,
                "column": 25
            },
            "line": 7,
            "code": "  test('Errors are thrown', () => {\n    expect(() => {\n      new Fuse(Books, {\n        useExtendedSearch: true,\n        keys: ['title']\n      })\n    }).toThrowError(ErrorMsg.EXTENDED_SEARCH_UNAVAILABLE)\n\n    expect(() => {\n      let fuse = new Fuse(Books, {\n        keys: ['title']\n      })\n      fuse.search({ title: 'hello' })\n    }).toThrowError(ErrorMsg.LOGICAL_SEARCH_UNAVAILABLE)\n  })",
            "file": "feature-flags.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "we get a list of exactly 1 item",
            "suites": [
                "Flat list of strings: [\"Apple\", \"Orange\", \"Banana\"]",
                "When searching for the term \"Apple\""
            ],
            "updatePoint": {
                "line": 22,
                "column": 41
            },
            "line": 22,
            "code": "    test('we get a list of exactly 1 item', () => {\r\n      expect(result).toHaveLength(1)\r\n    })\r",
            "file": "fuzzy-search.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "whose value is the index 0, representing [\"Apple\"]",
            "suites": [
                "Flat list of strings: [\"Apple\", \"Orange\", \"Banana\"]",
                "When searching for the term \"Apple\""
            ],
            "updatePoint": {
                "line": 26,
                "column": 60
            },
            "line": 26,
            "code": "    test('whose value is the index 0, representing [\"Apple\"]', () => {\r\n      expect(result[0].refIndex).toBe(0)\r\n    })\r",
            "file": "fuzzy-search.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "we get a list of containing 2 items",
            "suites": [
                "Flat list of strings: [\"Apple\", \"Orange\", \"Banana\"]",
                "When performing a fuzzy search for the term \"ran\""
            ],
            "updatePoint": {
                "line": 35,
                "column": 45
            },
            "line": 35,
            "code": "    test('we get a list of containing 2 items', () => {\r\n      expect(result).toHaveLength(2)\r\n    })\r",
            "file": "fuzzy-search.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "whose values represent the indices of [\"Orange\", \"Banana\"]",
            "suites": [
                "Flat list of strings: [\"Apple\", \"Orange\", \"Banana\"]",
                "When performing a fuzzy search for the term \"ran\""
            ],
            "updatePoint": {
                "line": 39,
                "column": 68
            },
            "line": 39,
            "code": "    test('whose values represent the indices of [\"Orange\", \"Banana\"]', () => {\r\n      expect(result[0].refIndex).toBe(1)\r\n      expect(result[1].refIndex).toBe(2)\r\n    })\r",
            "file": "fuzzy-search.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "we get a list of containing 2 items",
            "suites": [
                "Flat list of strings: [\"Apple\", \"Orange\", \"Banana\"]",
                "When performing a fuzzy search for the term \"nan\""
            ],
            "updatePoint": {
                "line": 49,
                "column": 45
            },
            "line": 49,
            "code": "    test('we get a list of containing 2 items', () => {\r\n      expect(result).toHaveLength(2)\r\n    })\r",
            "file": "fuzzy-search.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "whose values represent the indices of [\"Banana\", \"Orange\"]",
            "suites": [
                "Flat list of strings: [\"Apple\", \"Orange\", \"Banana\"]",
                "When performing a fuzzy search for the term \"nan\""
            ],
            "updatePoint": {
                "line": 53,
                "column": 68
            },
            "line": 53,
            "code": "    test('whose values represent the indices of [\"Banana\", \"Orange\"]', () => {\r\n      expect(result[0].refIndex).toBe(2)\r\n      expect(result[1].refIndex).toBe(1)\r\n    })\r",
            "file": "fuzzy-search.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "we get a list of containing 1 item: [2]",
            "suites": [
                "Flat list of strings: [\"Apple\", \"Orange\", \"Banana\"]",
                "When performing a fuzzy search for the term \"nan\" with a limit of 1 result"
            ],
            "updatePoint": {
                "line": 63,
                "column": 49
            },
            "line": 63,
            "code": "    test('we get a list of containing 1 item: [2]', () => {\r\n      expect(result).toHaveLength(1)\r\n    })\r",
            "file": "fuzzy-search.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "whose values represent the indices of [\"Banana\", \"Orange\"]",
            "suites": [
                "Flat list of strings: [\"Apple\", \"Orange\", \"Banana\"]",
                "When performing a fuzzy search for the term \"nan\" with a limit of 1 result"
            ],
            "updatePoint": {
                "line": 67,
                "column": 68
            },
            "line": 67,
            "code": "    test('whose values represent the indices of [\"Banana\", \"Orange\"]', () => {\r\n      expect(result[0].refIndex).toBe(2)\r\n    })\r",
            "file": "fuzzy-search.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "we get a list containing at least 1 item",
            "suites": [
                "Deep key search, with [\"title\", \"author.firstName\"]",
                "When searching for the term \"Stve\""
            ],
            "updatePoint": {
                "line": 99,
                "column": 50
            },
            "line": 99,
            "code": "    test('we get a list containing at least 1 item', () => {\r\n      expect(result.length).toBeGreaterThanOrEqual(1)\r\n    })\r",
            "file": "fuzzy-search.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "and the first item has the matching key/value pairs",
            "suites": [
                "Deep key search, with [\"title\", \"author.firstName\"]",
                "When searching for the term \"Stve\""
            ],
            "updatePoint": {
                "line": 103,
                "column": 61
            },
            "line": 103,
            "code": "    test('and the first item has the matching key/value pairs', () => {\r\n      expect(result[0].item).toMatchObject({\r\n        title: 'The Lock Artist',\r\n        author: { firstName: 'Steve', lastName: 'Hamilton' }\r\n      })\r\n    })\r",
            "file": "fuzzy-search.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "we get a list of exactly 1 item",
            "suites": [
                "Deep key search, with [\"title\", \"author.firstName\"]",
                "When searching for the term \"106\""
            ],
            "updatePoint": {
                "line": 115,
                "column": 41
            },
            "line": 115,
            "code": "    test('we get a list of exactly 1 item', () => {\r\n      expect(result).toHaveLength(1)\r\n    })\r",
            "file": "fuzzy-search.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "whose value matches",
            "suites": [
                "Deep key search, with [\"title\", \"author.firstName\"]",
                "When searching for the term \"106\""
            ],
            "updatePoint": {
                "line": 119,
                "column": 29
            },
            "line": 119,
            "code": "    test('whose value matches', () => {\r\n      expect(result[0].item).toMatchObject({\r\n        title: 'A History of England',\r\n        author: { firstName: 1066, lastName: 'Hastings' }\r\n      })\r\n    })\r",
            "file": "fuzzy-search.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "we get a list containing at least 1 item",
            "suites": [
                "Custom search function, with [\"title\", \"author.firstName\"]",
                "When searching for the term \"Hmlt\""
            ],
            "updatePoint": {
                "line": 160,
                "column": 50
            },
            "line": 160,
            "code": "    test('we get a list containing at least 1 item', () => {\r\n      expect(result.length).toBeGreaterThanOrEqual(1)\r\n    })\r",
            "file": "fuzzy-search.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "and the first item has the matching key/value pairs",
            "suites": [
                "Custom search function, with [\"title\", \"author.firstName\"]",
                "When searching for the term \"Hmlt\""
            ],
            "updatePoint": {
                "line": 164,
                "column": 61
            },
            "line": 164,
            "code": "    test('and the first item has the matching key/value pairs', () => {\r\n      expect(result[0].item).toMatchObject({\r\n        title: 'The Lock Artist',\r\n        author: { firstName: 'Steve', lastName: 'Hamilton' }\r\n      })\r\n    })\r",
            "file": "fuzzy-search.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "we get a list of exactly 0 items",
            "suites": [
                "Custom search function, with [\"title\", \"author.firstName\"]",
                "When searching for the term \"Stve\""
            ],
            "updatePoint": {
                "line": 176,
                "column": 42
            },
            "line": 176,
            "code": "    test('we get a list of exactly 0 items', () => {\r\n      expect(result).toHaveLength(0)\r\n    })\r",
            "file": "fuzzy-search.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "we get a list of exactly 1 item",
            "suites": [
                "Include score in result list: [\"Apple\", \"Orange\", \"Banana\"]",
                "When searching for the term \"Apple\""
            ],
            "updatePoint": {
                "line": 190,
                "column": 41
            },
            "line": 190,
            "code": "    test('we get a list of exactly 1 item', () => {\r\n      expect(result).toHaveLength(1)\r\n    })\r",
            "file": "fuzzy-search.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "whose value is the index 0, representing [\"Apple\"]",
            "suites": [
                "Include score in result list: [\"Apple\", \"Orange\", \"Banana\"]",
                "When searching for the term \"Apple\""
            ],
            "updatePoint": {
                "line": 194,
                "column": 60
            },
            "line": 194,
            "code": "    test('whose value is the index 0, representing [\"Apple\"]', () => {\r\n      expect(result[0].refIndex).toBe(0)\r\n      expect(result[0].score).toBe(0)\r\n    })\r",
            "file": "fuzzy-search.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "we get a list of containing 2 items",
            "suites": [
                "Include score in result list: [\"Apple\", \"Orange\", \"Banana\"]",
                "When performing a fuzzy search for the term \"ran\""
            ],
            "updatePoint": {
                "line": 204,
                "column": 45
            },
            "line": 204,
            "code": "    test('we get a list of containing 2 items', () => {\r\n      expect(result).toHaveLength(2)\r\n    })\r",
            "file": "fuzzy-search.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "whose values represent the indices, and have non-zero scores",
            "suites": [
                "Include score in result list: [\"Apple\", \"Orange\", \"Banana\"]",
                "When performing a fuzzy search for the term \"ran\""
            ],
            "updatePoint": {
                "line": 208,
                "column": 70
            },
            "line": 208,
            "code": "    test('whose values represent the indices, and have non-zero scores', () => {\r\n      expect(result[0].refIndex).toBe(1)\r\n      expect(result[0].score).not.toBe(0)\r\n      expect(result[1].refIndex).toBe(2)\r\n      expect(result[1].score).not.toBe(0)\r\n    })\r",
            "file": "fuzzy-search.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "we get a list containing exactly 1 item",
            "suites": [
                "Include both ID and score in results list",
                "When searching for the term \"Stve\""
            ],
            "updatePoint": {
                "line": 241,
                "column": 49
            },
            "line": 241,
            "code": "    test('we get a list containing exactly 1 item', () => {\r\n      expect(result).toHaveLength(1)\r\n    })\r",
            "file": "fuzzy-search.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "whose value is the ISBN of the book",
            "suites": [
                "Include both ID and score in results list",
                "When searching for the term \"Stve\""
            ],
            "updatePoint": {
                "line": 245,
                "column": 45
            },
            "line": 245,
            "code": "    test('whose value is the ISBN of the book', () => {\r\n      expect(result[0].item.ISBN).toBe('0312696957')\r\n    })\r",
            "file": "fuzzy-search.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "and has a score that is not zero",
            "suites": [
                "Include both ID and score in results list",
                "When searching for the term \"Stve\""
            ],
            "updatePoint": {
                "line": 249,
                "column": 42
            },
            "line": 249,
            "code": "    test('and has a score that is not zero', () => {\r\n      expect(result[0].score).not.toBe(0)\r\n    })\r",
            "file": "fuzzy-search.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "we get a list containing exactly 1 item",
            "suites": [
                "Search when IDs are numbers",
                "When searching for the term \"Stve\""
            ],
            "updatePoint": {
                "line": 280,
                "column": 49
            },
            "line": 280,
            "code": "    test('we get a list containing exactly 1 item', () => {\r\n      expect(result).toHaveLength(1)\r\n    })\r",
            "file": "fuzzy-search.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "whose value is the ISBN of the book",
            "suites": [
                "Search when IDs are numbers",
                "When searching for the term \"Stve\""
            ],
            "updatePoint": {
                "line": 284,
                "column": 45
            },
            "line": 284,
            "code": "    test('whose value is the ISBN of the book', () => {\r\n      expect(result[0].item.ISBN).toBe(2222)\r\n    })\r",
            "file": "fuzzy-search.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "and has a score that is not zero",
            "suites": [
                "Search when IDs are numbers",
                "When searching for the term \"Stve\""
            ],
            "updatePoint": {
                "line": 288,
                "column": 42
            },
            "line": 288,
            "code": "    test('and has a score that is not zero', () => {\r\n      expect(result[0].score).not.toBe(0)\r\n    })\r",
            "file": "fuzzy-search.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "we get a list containing exactly 1 item",
            "suites": [
                "Recurse into arrays",
                "When searching for the tag \"nonfiction\""
            ],
            "updatePoint": {
                "line": 327,
                "column": 49
            },
            "line": 327,
            "code": "    test('we get a list containing exactly 1 item', () => {\r\n      expect(result).toHaveLength(1)\r\n    })\r",
            "file": "fuzzy-search.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "whose value is the ISBN of the book",
            "suites": [
                "Recurse into arrays",
                "When searching for the tag \"nonfiction\""
            ],
            "updatePoint": {
                "line": 331,
                "column": 45
            },
            "line": 331,
            "code": "    test('whose value is the ISBN of the book', () => {\r\n      expect(result[0].item.ISBN).toBe('0321784421')\r\n    })\r",
            "file": "fuzzy-search.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "with matched tag provided",
            "suites": [
                "Recurse into arrays",
                "When searching for the tag \"nonfiction\""
            ],
            "updatePoint": {
                "line": 335,
                "column": 35
            },
            "line": 335,
            "code": "    test('with matched tag provided', () => {\r\n      const { matches } = result[0]\r\n      expect(matches[0]).toMatchObject({\r\n        indices: [[0, 9]],\r\n        value: 'nonfiction',\r\n        key: 'tags',\r\n        refIndex: 1\r\n      })\r\n    })\r",
            "file": "fuzzy-search.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "we get a list containing exactly 1 item",
            "suites": [
                "Recurse into objects in arrays with null object in array",
                "When searching for the author tag \"British\""
            ],
            "updatePoint": {
                "line": 400,
                "column": 49
            },
            "line": 400,
            "code": "    test('we get a list containing exactly 1 item', () => {\r\n      expect(result).toHaveLength(1)\r\n    })\r",
            "file": "fuzzy-search.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "whose value is the ISBN of the book",
            "suites": [
                "Recurse into objects in arrays with null object in array",
                "When searching for the author tag \"British\""
            ],
            "updatePoint": {
                "line": 404,
                "column": 45
            },
            "line": 404,
            "code": "    test('whose value is the ISBN of the book', () => {      \r\n      expect(result[0].item.ISBN).toBe('0321784421')\r\n    })\r",
            "file": "fuzzy-search.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "we get a list containing exactly 1 item",
            "suites": [
                "Recurse into objects in arrays",
                "When searching for the author tag \"British\""
            ],
            "updatePoint": {
                "line": 461,
                "column": 49
            },
            "line": 461,
            "code": "    test('we get a list containing exactly 1 item', () => {\r\n      expect(result).toHaveLength(1)\r\n    })\r",
            "file": "fuzzy-search.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "whose value is the ISBN of the book",
            "suites": [
                "Recurse into objects in arrays",
                "When searching for the author tag \"British\""
            ],
            "updatePoint": {
                "line": 465,
                "column": 45
            },
            "line": 465,
            "code": "    test('whose value is the ISBN of the book', () => {\r\n      expect(result[0].item.ISBN).toBe('0321784421')\r\n    })\r",
            "file": "fuzzy-search.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "we get a list of exactly 1 item",
            "suites": [
                "Set new list on Fuse",
                "When searching for the term \"Lettuce\""
            ],
            "updatePoint": {
                "line": 484,
                "column": 41
            },
            "line": 484,
            "code": "    test('we get a list of exactly 1 item', () => {\r\n      expect(result).toHaveLength(1)\r\n    })\r",
            "file": "fuzzy-search.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "whose value is the index 0, representing [\"Apple\"]",
            "suites": [
                "Set new list on Fuse",
                "When searching for the term \"Lettuce\""
            ],
            "updatePoint": {
                "line": 488,
                "column": 60
            },
            "line": 488,
            "code": "    test('whose value is the index 0, representing [\"Apple\"]', () => {\r\n      expect(result[0].refIndex).toBe(1)\r\n    })\r",
            "file": "fuzzy-search.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Invalid key entries throw errors",
            "suites": [
                "Weighted search"
            ],
            "updatePoint": {
                "line": 518,
                "column": 40
            },
            "line": 518,
            "code": "  test('Invalid key entries throw errors', () => {\r\n    expect(() => {\r\n      setup(customBookList, {\r\n        keys: [\r\n          { name: 'title', weight: -10 },\r\n          { name: 'author', weight: 0.7 }\r\n        ]\r\n      })\r\n    }).toThrowError(ErrorMsg.INVALID_KEY_WEIGHT_VALUE('title'))\r\n\r\n    expect(() => {\r\n      setup(customBookList, {\r\n        keys: [{ weight: 10 }, { name: 'author', weight: 0.7 }]\r\n      })\r\n    }).toThrowError(ErrorMsg.MISSING_KEY_PROPERTY('name'))\r\n  })\r",
            "file": "fuzzy-search.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "We get the the exactly matching object",
            "suites": [
                "Weighted search",
                "When searching for the term \"John Smith\" with author weighted higher"
            ],
            "updatePoint": {
                "line": 549,
                "column": 48
            },
            "line": 549,
            "code": "    test('We get the the exactly matching object', () => {\r\n      expect(result[0]).toMatchObject({\r\n        item: {\r\n          title: 'The life of Jane',\r\n          author: 'John Smith',\r\n          tags: ['john', 'smith']\r\n        },\r\n        refIndex: 2\r\n      })\r\n    })\r",
            "file": "fuzzy-search.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "We get the the exactly matching object",
            "suites": [
                "Weighted search",
                "When searching for the term \"John Smith\" with author weighted higher, with mixed key types"
            ],
            "updatePoint": {
                "line": 573,
                "column": 48
            },
            "line": 573,
            "code": "    test('We get the the exactly matching object', () => {\r\n      expect(result[0]).toMatchObject({\r\n        item: {\r\n          title: 'The life of Jane',\r\n          author: 'John Smith',\r\n          tags: ['john', 'smith']\r\n        },\r\n        refIndex: 2\r\n      })\r\n    })\r",
            "file": "fuzzy-search.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Throws when key does not have a name property",
            "suites": [
                "Weighted search",
                "When searching for the term \"John Smith\" with author weighted higher, with mixed key types"
            ],
            "updatePoint": {
                "line": 584,
                "column": 55
            },
            "line": 584,
            "code": "    test('Throws when key does not have a name property', () => {\r\n      expect(() => {\r\n        new Fuse(customBookList, {\r\n          keys: ['title', { weight: 2 }]\r\n        })\r\n      }).toThrow()\r\n    })\r",
            "file": "fuzzy-search.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "We get the the exactly matching object",
            "suites": [
                "Weighted search",
                "When searching for the term \"John Smith\" with title weighted higher"
            ],
            "updatePoint": {
                "line": 607,
                "column": 48
            },
            "line": 607,
            "code": "    test('We get the the exactly matching object', () => {\r\n      expect(result[0]).toMatchObject({\r\n        item: {\r\n          title: 'John Smith',\r\n          author: 'Steve Pearson',\r\n          tags: ['steve', 'pearson']\r\n        },\r\n        refIndex: 3\r\n      })\r\n    })\r",
            "file": "fuzzy-search.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "We get the the exactly matching object",
            "suites": [
                "Weighted search",
                "When searching for the term \"Man\", where the author is weighted higher than title"
            ],
            "updatePoint": {
                "line": 633,
                "column": 48
            },
            "line": 633,
            "code": "    test('We get the the exactly matching object', () => {\r\n      expect(result[0]).toMatchObject({\r\n        item: {\r\n          title: 'Right Ho Jeeves',\r\n          author: 'P.D. Mans',\r\n          tags: ['fiction', 'war']\r\n        },\r\n        refIndex: 1\r\n      })\r\n    })\r",
            "file": "fuzzy-search.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "We get the the exactly matching object",
            "suites": [
                "Weighted search",
                "When searching for the term \"Man\", where the title is weighted higher than author"
            ],
            "updatePoint": {
                "line": 659,
                "column": 48
            },
            "line": 659,
            "code": "    test('We get the the exactly matching object', () => {\r\n      expect(result[0]).toMatchObject({\r\n        item: {\r\n          title: \"Old Man's War fiction\",\r\n          author: 'John X',\r\n          tags: ['war']\r\n        },\r\n        refIndex: 0\r\n      })\r\n    })\r",
            "file": "fuzzy-search.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "We get the exactly matching object",
            "suites": [
                "Weighted search",
                "When searching for the term \"War\", where tags are weighted higher than all other keys"
            ],
            "updatePoint": {
                "line": 686,
                "column": 44
            },
            "line": 686,
            "code": "    test('We get the exactly matching object', () => {\r\n      expect(result[0]).toMatchObject({\r\n        item: {\r\n          title: \"Old Man's War fiction\",\r\n          author: 'John X',\r\n          tags: ['war']\r\n        },\r\n        refIndex: 0\r\n      })\r\n    })\r",
            "file": "fuzzy-search.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "We get a list whose indices are found",
            "suites": [
                "Search location",
                "When searching for the term \"wor\""
            ],
            "updatePoint": {
                "line": 718,
                "column": 47
            },
            "line": 718,
            "code": "    test('We get a list whose indices are found', () => {\r\n      expect(matches[0].indices[0]).toEqual([4, 4])\r\n      expect(matches[0].indices[1]).toEqual([6, 8])\r\n    })\r",
            "file": "fuzzy-search.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "with original text values",
            "suites": [
                "Search location",
                "When searching for the term \"wor\""
            ],
            "updatePoint": {
                "line": 723,
                "column": 35
            },
            "line": 723,
            "code": "    test('with original text values', () => {\r\n      expect(matches[0].value).toBe('Hello World')\r\n    })\r",
            "file": "fuzzy-search.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "We get a match containing 4 indices",
            "suites": [
                "Searching with default options",
                "When searching for the term \"test\""
            ],
            "updatePoint": {
                "line": 739,
                "column": 45
            },
            "line": 739,
            "code": "    test('We get a match containing 4 indices', () => {\r\n      expect(result[0].matches[0].indices).toHaveLength(4)\r\n    })\r",
            "file": "fuzzy-search.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "and the first index is a single character",
            "suites": [
                "Searching with default options",
                "When searching for the term \"test\""
            ],
            "updatePoint": {
                "line": 743,
                "column": 51
            },
            "line": 743,
            "code": "    test('and the first index is a single character', () => {\r\n      expect(result[0].matches[0].indices[0][0]).toBe(0)\r\n      expect(result[0].matches[0].indices[0][1]).toBe(0)\r\n    })\r",
            "file": "fuzzy-search.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "We get a match containing 7 indices",
            "suites": [
                "Searching with findAllMatches",
                "When searching for the term \"test\""
            ],
            "updatePoint": {
                "line": 766,
                "column": 45
            },
            "line": 766,
            "code": "    test('We get a match containing 7 indices', () => {\r\n      expect(result[0].matches[0].indices).toHaveLength(7)\r\n    })\r",
            "file": "fuzzy-search.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "and the first index is a single character",
            "suites": [
                "Searching with findAllMatches",
                "When searching for the term \"test\""
            ],
            "updatePoint": {
                "line": 770,
                "column": 51
            },
            "line": 770,
            "code": "    test('and the first index is a single character', () => {\r\n      expect(result[0].matches[0].indices[0][0]).toBe(0)\r\n      expect(result[0].matches[0].indices[0][1]).toBe(0)\r\n    })\r",
            "file": "fuzzy-search.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "We get a match containing 3 indices",
            "suites": [
                "Searching with minCharLength",
                "When searching for the term \"test\""
            ],
            "updatePoint": {
                "line": 793,
                "column": 45
            },
            "line": 793,
            "code": "    test('We get a match containing 3 indices', () => {\r\n      expect(result[0].matches[0].indices).toHaveLength(3)\r\n    })\r",
            "file": "fuzzy-search.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "and the first index is a single character",
            "suites": [
                "Searching with minCharLength",
                "When searching for the term \"test\""
            ],
            "updatePoint": {
                "line": 797,
                "column": 51
            },
            "line": 797,
            "code": "    test('and the first index is a single character', () => {\r\n      expect(result[0].matches[0].indices[0][0]).toBe(2)\r\n      expect(result[0].matches[0].indices[0][1]).toBe(3)\r\n    })\r",
            "file": "fuzzy-search.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "We get no results",
            "suites": [
                "Searching with minCharLength",
                "When searching for a string shorter than minMatchCharLength"
            ],
            "updatePoint": {
                "line": 807,
                "column": 27
            },
            "line": 807,
            "code": "    test('We get no results', () => {\r\n      expect(result).toHaveLength(0)\r\n    })\r",
            "file": "fuzzy-search.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "We get a result with no matches",
            "suites": [
                "Searching with minCharLength",
                "Main functionality"
            ],
            "updatePoint": {
                "line": 836,
                "column": 41
            },
            "line": 836,
            "code": "    test('We get a result with no matches', () => {\r\n      const result = fuse.search('remy')\r\n\r\n      expect(result).toHaveLength(1)\r\n      expect(result[0].matches).toHaveLength(1)\r\n    })\r",
            "file": "fuzzy-search.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "We get exactly 1 result",
            "suites": [
                "Searching with minCharLength and pattern larger than machine word size",
                "When searching for the term \"American as apple pie is odd treatment of something made by mom\""
            ],
            "updatePoint": {
                "line": 875,
                "column": 33
            },
            "line": 875,
            "code": "    test('We get exactly 1 result', () => {\r\n      expect(result).toHaveLength(1)\r\n    })\r",
            "file": "fuzzy-search.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Which corresponds to the first item in the list, with no matches",
            "suites": [
                "Searching with minCharLength and pattern larger than machine word size",
                "When searching for the term \"American as apple pie is odd treatment of something made by mom\""
            ],
            "updatePoint": {
                "line": 879,
                "column": 74
            },
            "line": 879,
            "code": "    test('Which corresponds to the first item in the list, with no matches', () => {\r\n      expect(result[0].refIndex).toBe(0)\r\n      expect(result[0].matches).toHaveLength(1)\r\n    })\r",
            "file": "fuzzy-search.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "We get the properly ordered results",
            "suites": [
                "Sorted search results",
                "When searching for the term \"wood\""
            ],
            "updatePoint": {
                "line": 912,
                "column": 45
            },
            "line": 912,
            "code": "    test('We get the properly ordered results', () => {\r\n      expect(result[0].item.title).toBe('The Code of the Wooster')\r\n      expect(result[1].item.title).toBe('Right Ho Jeeves')\r\n      expect(result[2].item.title).toBe('Thank You Jeeves')\r\n    })\r",
            "file": "fuzzy-search.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "finds no matches when string is larger than 32 characters",
            "suites": [
                "Searching using string large strings"
            ],
            "updatePoint": {
                "line": 940,
                "column": 65
            },
            "line": 940,
            "code": "  test('finds no matches when string is larger than 32 characters', () => {\r\n    const fuse = new Fuse(list, options)\r\n\r\n    let pattern = 'where exctly is carmen in the world san diego'\r\n    let result = fuse.search(pattern)\r\n    expect(result.length).toBe(1)\r\n    expect(result[0].item.text).toBe(list[2].text)\r\n  })\r",
            "file": "fuzzy-search.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Test matches with very long patterns",
            "suites": [
                "Searching using string large strings"
            ],
            "updatePoint": {
                "line": 949,
                "column": 44
            },
            "line": 949,
            "code": "  test('Test matches with very long patterns', () => {\r\n    let fuse = new Fuse(list, options)\r\n    let patterns = []\r\n\r\n    for (let i = 0; i < 66; ++i) {\r\n      patterns.push('w'.repeat(i))\r\n    }\r\n\r\n    const search = (pattern) => {\r\n      return fuse.search(pattern).length === 0\r\n    }\r\n\r\n    expect(search(patterns[32])).toBeTruthy()\r\n    expect(search(patterns[33])).toBeTruthy()\r\n    expect(search(patterns[34])).toBeTruthy()\r\n    expect(search(patterns[64])).toBeTruthy()\r\n    expect(search(patterns[65])).toBeTruthy()\r\n  })\r",
            "file": "fuzzy-search.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "With hyphens",
            "suites": [
                "Searching using string large strings"
            ],
            "updatePoint": {
                "line": 968,
                "column": 18
            },
            "line": 968,
            "code": "  it('With hyphens', () => {\r\n    const searchText = 'leverage-streams-to'\r\n    const fuseOptions = {\r\n      distance: 1000,\r\n      includeScore: true,\r\n      includeMatches: true,\r\n      keys: ['name', 'tag', 'description'],\r\n      minMatchCharLength: Math.floor(searchText.length * 0.6),\r\n      shouldSort: false\r\n    }\r\n    const fuse = new Fuse(\r\n      [\r\n        {\r\n          name: 'Streaming Service',\r\n          description: 'Leverage-streams-to-ingest, analyze, monitor.',\r\n          tag: 'Free'\r\n        }\r\n      ],\r\n      fuseOptions\r\n    )\r\n\r\n    const results = fuse.search(searchText)\r\n    expect(results[0].matches).toEqual([\r\n      {\r\n        indices: [[0, 18]],\r\n        key: 'description',\r\n        value: 'Leverage-streams-to-ingest, analyze, monitor.'\r\n      }\r\n    ])\r\n  })\r",
            "file": "fuzzy-search.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "With spaces",
            "suites": [
                "Searching using string large strings"
            ],
            "updatePoint": {
                "line": 999,
                "column": 17
            },
            "line": 999,
            "code": "  it('With spaces', () => {\r\n    const searchText = 'leverage streams to'\r\n    const fuseOptions = {\r\n      distance: 1000,\r\n      includeScore: true,\r\n      includeMatches: true,\r\n      keys: ['name', 'tag', 'description'],\r\n      minMatchCharLength: Math.floor(searchText.length * 0.6),\r\n      shouldSort: false\r\n    }\r\n    const fuse = new Fuse(\r\n      [\r\n        {\r\n          name: 'Streaming Service',\r\n          description: 'Leverage streams to ingest, analyze, monitor.',\r\n          tag: 'Free'\r\n        }\r\n      ],\r\n      fuseOptions\r\n    )\r\n\r\n    const results = fuse.search(searchText)\r\n    expect(results[0].matches).toEqual([\r\n      {\r\n        indices: [[0, 18]],\r\n        key: 'description',\r\n        value: 'Leverage streams to ingest, analyze, monitor.'\r\n      }\r\n    ])\r\n  })\r",
            "file": "fuzzy-search.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "The entry with the shorter field length appears first",
            "suites": [
                "Searching taking into account field length"
            ],
            "updatePoint": {
                "line": 1047,
                "column": 61
            },
            "line": 1047,
            "code": "  test('The entry with the shorter field length appears first', () => {\r\n    const fuse = new Fuse(list, {\r\n      keys: ['title']\r\n    })\r\n    let result = fuse.search('war')\r\n\r\n    expect(result.length).toBe(2)\r\n    expect(result[0].item.ISBN).toBe('0765348276')\r\n    expect(result[1].item.ISBN).toBe('0312696957')\r\n  })\r",
            "file": "fuzzy-search.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Weighted entries still are given high precedence",
            "suites": [
                "Searching taking into account field length"
            ],
            "updatePoint": {
                "line": 1058,
                "column": 56
            },
            "line": 1058,
            "code": "  test('Weighted entries still are given high precedence', () => {\r\n    const fuse = new Fuse(list, {\r\n      keys: [\r\n        { name: 'tags', weight: 0.8 },\r\n        { name: 'title', weight: 0.2 }\r\n      ]\r\n    })\r\n    let result = fuse.search('war')\r\n    expect(result.length).toBe(2)\r\n    expect(result[0].item.ISBN).toBe('0312696957')\r\n    expect(result[1].item.ISBN).toBe('0765348276')\r\n  })\r",
            "file": "fuzzy-search.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Check order of entries when location and field-length norm are ignored",
            "suites": [
                "Ignore location and field length norm"
            ],
            "updatePoint": {
                "line": 1084,
                "column": 78
            },
            "line": 1084,
            "code": "  test('Check order of entries when location and field-length norm are ignored', () => {\r\n    const options = {\r\n      includeScore: true,\r\n      ignoreLocation: true,\r\n      ignoreFieldNorm: true\r\n    }\r\n    const fuse = new Fuse(list, options)\r\n    let result = fuse.search('promiseawarebeforeEach')\r\n\r\n    expect(result).toMatchSnapshot()\r\n  })\r",
            "file": "fuzzy-search.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Check order of entries when location and field-length norm are not ignored",
            "suites": [
                "Ignore location and field length norm"
            ],
            "updatePoint": {
                "line": 1096,
                "column": 82
            },
            "line": 1096,
            "code": "  test('Check order of entries when location and field-length norm are not ignored', () => {\r\n    const options = {\r\n      includeScore: true\r\n    }\r\n    const fuse = new Fuse(list, options)\r\n    let result = fuse.search('beforeEach')\r\n    expect(result).toMatchSnapshot()\r\n  })\r",
            "file": "fuzzy-search.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "We get mathes",
            "suites": [
                "Standard dotted keys"
            ],
            "updatePoint": {
                "line": 1107,
                "column": 21
            },
            "line": 1107,
            "code": "  test('We get mathes', () => {\r\n    const list = [\r\n      {\r\n        title: 'HTML5',\r\n        author: {\r\n          firstName: 'Remy',\r\n          lastName: 'Sharp'\r\n        }\r\n      },\r\n      {\r\n        title: 'Angels & Demons',\r\n        author: {\r\n          firstName: 'rmy',\r\n          lastName: 'Brown'\r\n        }\r\n      }\r\n    ]\r\n\r\n    const fuse = new Fuse(list, {\r\n      keys: ['title', ['author', 'firstName']],\r\n      includeMatches: true,\r\n      includeScore: true\r\n    })\r\n\r\n    const result = fuse.search('remy')\r\n\r\n    expect(result).toHaveLength(2)\r\n  })\r",
            "file": "fuzzy-search.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "We get a result with no matches",
            "suites": [
                "Standard dotted keys"
            ],
            "updatePoint": {
                "line": 1136,
                "column": 39
            },
            "line": 1136,
            "code": "  test('We get a result with no matches', () => {\r\n    const list = [\r\n      {\r\n        title: 'HTML5',\r\n        author: {\r\n          'first.name': 'Remy',\r\n          'last.name': 'Sharp'\r\n        }\r\n      },\r\n      {\r\n        title: 'Angels & Demons',\r\n        author: {\r\n          'first.name': 'rmy',\r\n          'last.name': 'Brown'\r\n        }\r\n      }\r\n    ]\r\n\r\n    const fuse = new Fuse(list, {\r\n      keys: ['title', ['author', 'first.name']],\r\n      includeMatches: true,\r\n      includeScore: true\r\n    })\r\n\r\n    const result = fuse.search('remy')\r\n\r\n    expect(result).toHaveLength(2)\r\n  })\r",
            "file": "fuzzy-search.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Keys with weights",
            "suites": [
                "Standard dotted keys"
            ],
            "updatePoint": {
                "line": 1165,
                "column": 25
            },
            "line": 1165,
            "code": "  test('Keys with weights', () => {\r\n    const list = [\r\n      {\r\n        title: 'HTML5',\r\n        author: {\r\n          firstName: 'Remy',\r\n          lastName: 'Sharp'\r\n        }\r\n      },\r\n      {\r\n        title: 'Angels & Demons',\r\n        author: {\r\n          firstName: 'rmy',\r\n          lastName: 'Brown'\r\n        }\r\n      }\r\n    ]\r\n\r\n    const fuse = new Fuse(list, {\r\n      keys: [{ name: 'title' }, { name: ['author', 'firstName'] }],\r\n      includeMatches: true,\r\n      includeScore: true\r\n    })\r\n\r\n    const result = fuse.search('remy')\r\n\r\n    expect(result).toHaveLength(2)\r\n  })\r",
            "file": "fuzzy-search.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Non-strings are still processed",
            "suites": [
                "Breaking values"
            ],
            "updatePoint": {
                "line": 1196,
                "column": 39
            },
            "line": 1196,
            "code": "  test('Non-strings are still processed', () => {\r\n    const data = [{ first: false }]\r\n    const options = { keys: [{ name: 'first' }] }\r\n    const fuse = new Fuse(data, options)\r\n\r\n    const result = fuse.search('fa')\r\n    expect(result).toHaveLength(1)\r\n  })\r",
            "file": "fuzzy-search.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "createIndex: ensure properties exist",
            "suites": [
                "Searching"
            ],
            "updatePoint": {
                "line": 16,
                "column": 44
            },
            "line": 16,
            "code": "  test('createIndex: ensure properties exist', () => {\n    let myIndex = Fuse.createIndex(options.keys, Books)\n\n    expect(myIndex.records).toBeDefined()\n    expect(myIndex.keys).toBeDefined()\n  })",
            "file": "indexing.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "createIndex: ensure keys can be created with objects",
            "suites": [
                "Searching"
            ],
            "updatePoint": {
                "line": 23,
                "column": 60
            },
            "line": 23,
            "code": "  test('createIndex: ensure keys can be created with objects', () => {\n    let myIndex = Fuse.createIndex(\n      [{ name: 'title' }, { name: 'author.firstName' }],\n      Books\n    )\n    expect(myIndex.records).toBeDefined()\n    expect(myIndex.keys).toBeDefined()\n  })",
            "file": "indexing.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "parseIndex: ensure index can be exported and Fuse can be initialized",
            "suites": [
                "Searching"
            ],
            "updatePoint": {
                "line": 32,
                "column": 76
            },
            "line": 32,
            "code": "  test('parseIndex: ensure index can be exported and Fuse can be initialized', () => {\n    const myIndex = Fuse.createIndex(options.keys, Books)\n    expect(myIndex.size()).toBe(Books.length)\n\n    const data = myIndex.toJSON()\n    expect(data.records).toBeDefined()\n    expect(data.keys).toBeDefined()\n\n    const parsedIndex = Fuse.parseIndex(data)\n    expect(parsedIndex.size()).toBe(Books.length)\n\n    const fuse = new Fuse(Books, options, parsedIndex)\n    const result = fuse.search({ title: 'old man' })\n    expect(result.length).toBe(1)\n    expect(idx(result)).toMatchObject([0])\n  })",
            "file": "indexing.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Fuse can be instantiated with an index",
            "suites": [
                "Searching"
            ],
            "updatePoint": {
                "line": 49,
                "column": 46
            },
            "line": 49,
            "code": "  test('Fuse can be instantiated with an index', () => {\n    let myIndex = Fuse.createIndex(options.keys, Books)\n    const fuse = new Fuse(Books, options, myIndex)\n\n    let result = fuse.search({ title: 'old man' })\n\n    expect(result.length).toBe(1)\n    expect(idx(result)).toMatchObject([0])\n    expect(result[0].matches[0].indices).toMatchObject([\n      [0, 2],\n      [4, 6]\n    ])\n  })",
            "file": "indexing.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Throws on invalid index format",
            "suites": [
                "Searching"
            ],
            "updatePoint": {
                "line": 63,
                "column": 38
            },
            "line": 63,
            "code": "  test('Throws on invalid index format', () => {\n    expect(() => {\n      new Fuse(Books, options, [])\n    }).toThrow()\n  })",
            "file": "indexing.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Add object to Index",
            "suites": [
                "Searching"
            ],
            "updatePoint": {
                "line": 69,
                "column": 27
            },
            "line": 69,
            "code": "  test('Add object to Index', () => {\n    const fuse = new Fuse(Books, options)\n\n    fuse.add({\n      title: 'book',\n      author: {\n        firstName: 'Kiro',\n        lastName: 'Risk'\n      }\n    })\n\n    let result = fuse.search('kiro')\n\n    expect(result.length).toBe(1)\n    expect(idx(result)).toMatchObject([Books.length - 1])\n  })",
            "file": "indexing.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Add string to Index",
            "suites": [
                "Searching"
            ],
            "updatePoint": {
                "line": 86,
                "column": 27
            },
            "line": 86,
            "code": "  test('Add string to Index', () => {\n    const fruits = ['apple', 'orange']\n    const fuse = new Fuse(fruits, { includeScore: true })\n\n    fuse.add('banana')\n\n    let result = fuse.search('banana')\n\n    expect(result.length).toBe(1)\n    expect(idx(result)).toMatchObject([2])\n  })",
            "file": "indexing.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Remove string from the Index",
            "suites": [
                "Searching"
            ],
            "updatePoint": {
                "line": 98,
                "column": 36
            },
            "line": 98,
            "code": "  test('Remove string from the Index', () => {\n    const fruits = ['apple', 'orange', 'banana', 'pear']\n    const fuse = new Fuse(fruits)\n\n    expect(fuse.getIndex().size()).toBe(4)\n    expect(idxMap(fuse)).toMatchObject([\n      ['apple', 0],\n      ['orange', 1],\n      ['banana', 2],\n      ['pear', 3]\n    ])\n\n    fuse.removeAt(1)\n\n    expect(fuse.getIndex().size()).toBe(3)\n    expect(idxMap(fuse)).toMatchObject([\n      ['apple', 0],\n      ['banana', 1],\n      ['pear', 2]\n    ])\n\n    const results = fuse.remove((doc) => {\n      return doc === 'banana' || doc === 'pear'\n    })\n\n    expect(results.length).toBe(2)\n    expect(fuse.getIndex().size()).toBe(1)\n    expect(fuse._docs.length).toBe(1)\n  })",
            "file": "indexing.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Tree structure",
            "suites": [
                "Logical parser"
            ],
            "updatePoint": {
                "line": 14,
                "column": 22
            },
            "line": 14,
            "code": "  test('Tree structure', () => {\n    const query = {\n      $and: [\n        { title: 'old war' },\n        {\n          $or: [{ title: '!arts' }, { title: '^lock' }]\n        }\n      ]\n    }\n    let root = Fuse.parseQuery(query, options, { auto: false })\n\n    expect(root).toMatchSnapshot()\n  })",
            "file": "logical-search.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Implicit operations",
            "suites": [
                "Logical parser"
            ],
            "updatePoint": {
                "line": 28,
                "column": 27
            },
            "line": 28,
            "code": "  test('Implicit operations', () => {\n    const query = {\n      $and: [\n        { title: 'old war' },\n        {\n          $or: [{ title: '!arts', tags: 'kiro' }, { title: '^lock' }]\n        }\n      ]\n    }\n    let root = Fuse.parseQuery(query, options, { auto: false })\n\n    expect(root).toMatchSnapshot()\n  })",
            "file": "logical-search.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Search: implicit AND",
            "suites": [
                "Searching using logical search"
            ],
            "updatePoint": {
                "line": 52,
                "column": 28
            },
            "line": 52,
            "code": "  test('Search: implicit AND', () => {\n    let result = fuse.search({ title: 'old man' })\n    expect(result.length).toBe(1)\n    expect(result[0].refIndex).toBe(0)\n    expect(result[0].matches[0].indices).toMatchObject([\n      [0, 2],\n      [4, 6]\n    ])\n  })",
            "file": "logical-search.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Search: AND with single item",
            "suites": [
                "Searching using logical search"
            ],
            "updatePoint": {
                "line": 62,
                "column": 36
            },
            "line": 62,
            "code": "  test('Search: AND with single item', () => {\n    let result = fuse.search({ $and: [{ title: 'old man' }] })\n    expect(result.length).toBe(1)\n    expect(idx(result)).toMatchObject([0])\n    expect(result[0].matches[0].indices).toMatchObject([\n      [0, 2],\n      [4, 6]\n    ])\n  })",
            "file": "logical-search.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Search: AND with multiple entries",
            "suites": [
                "Searching using logical search"
            ],
            "updatePoint": {
                "line": 72,
                "column": 41
            },
            "line": 72,
            "code": "  test('Search: AND with multiple entries', () => {\n    let result = fuse.search({\n      $and: [{ 'author.lastName': 'Woodhose' }, { title: 'the' }]\n    })\n    expect(result.length).toBe(2)\n    expect(idx(result)).toMatchObject([4, 5])\n  })",
            "file": "logical-search.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Search: AND with multiple entries + exact match",
            "suites": [
                "Searching using logical search"
            ],
            "updatePoint": {
                "line": 80,
                "column": 55
            },
            "line": 80,
            "code": "  test('Search: AND with multiple entries + exact match', () => {\n    let result = fuse.search({\n      $and: [{ 'author.lastName': 'Woodhose' }, { title: \"'The\" }]\n    })\n    expect(result.length).toBe(1)\n    expect(idx(result)).toMatchObject([4])\n  })",
            "file": "logical-search.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Search: OR with multiple entries",
            "suites": [
                "Searching using logical search"
            ],
            "updatePoint": {
                "line": 88,
                "column": 40
            },
            "line": 88,
            "code": "  test('Search: OR with multiple entries', () => {\n    let result = fuse.search({\n      $or: [{ title: 'angls' }, { title: 'incmpetnce' }]\n    })\n    expect(result.length).toBe(3)\n    expect(idx(result)).toMatchObject([14, 7, 0])\n  })",
            "file": "logical-search.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Search: OR with multiple entries",
            "suites": [
                "Searching using logical search"
            ],
            "updatePoint": {
                "line": 96,
                "column": 40
            },
            "line": 96,
            "code": "  test('Search: OR with multiple entries', () => {\n    let result = fuse.search({\n      $or: [\n        { title: 'angls' },\n        { $and: [{ title: '!dwarf' }, { title: 'bakwrds' }] }\n      ]\n    })\n    expect(result.length).toBe(2)\n    expect(idx(result)).toMatchObject([7, 0])\n  })",
            "file": "logical-search.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Search: nested AND + OR",
            "suites": [
                "Multiple nested conditions"
            ],
            "updatePoint": {
                "line": 141,
                "column": 31
            },
            "line": 141,
            "code": "  test('Search: nested AND + OR', () => {\n    const result = fuse1.search({\n      $and: [\n        { title: 'old' },\n        {\n          $or: [{ 'author.firstName': 'j' }, { 'author.lastName': 'Sa' }]\n        },\n        {\n          $or: [{ 'author.age': \"'62\" }]\n        }\n      ]\n    })\n\n    expect(result.length).toBe(0)\n  })",
            "file": "logical-search.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Search: deep nested AND + OR",
            "suites": [
                "Multiple nested conditions"
            ],
            "updatePoint": {
                "line": 157,
                "column": 36
            },
            "line": 157,
            "code": "  test('Search: deep nested AND + OR', () => {\n    const result = fuse1.search({\n      $and: [\n        { title: 'old' },\n        {\n          $or: [{ 'author.firstName': 'jon' }, { 'author.lastName': 'Sazi' }]\n        },\n        {\n          $or: [\n            { 'author.age': \"'62\" },\n            { $and: [{ title: 'old' }, { 'author.age': \"'61\" }] }\n          ]\n        }\n      ]\n    })\n\n    expect(result.length).toBe(1)\n    expect(result[0]).toHaveProperty('score')\n    expect(result[0].score).toBeGreaterThan(0)\n  })",
            "file": "logical-search.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Search: deep nested AND + OR",
            "suites": [
                "Multiple nested conditions"
            ],
            "updatePoint": {
                "line": 178,
                "column": 36
            },
            "line": 178,
            "code": "  test('Search: deep nested AND + OR', () => {\n    const result = fuse2.search({\n      $and: [\n        { title: 'old' },\n        {\n          $and: [{ 'author.firstName': 'jon' }, { 'author.lastName': 'Sazi' }]\n        },\n        {\n          $or: [\n            { 'author.age': \"'62\" },\n            { $and: [{ title: 'old' }, { 'author.age': \"'62\" }] }\n          ]\n        }\n      ]\n    })\n\n    expect(result.length).toBe(1)\n    expect(result[0]).toHaveProperty('score')\n    expect(result[0].score).toBeGreaterThan(0)\n  })",
            "file": "logical-search.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Search: deep nested AND + OR",
            "suites": [
                "Logical search with dotted keys"
            ],
            "updatePoint": {
                "line": 224,
                "column": 36
            },
            "line": 224,
            "code": "  test('Search: deep nested AND + OR', () => {\n    const query = {\n      $and: [\n        {\n          $path: ['author', 'first.name'],\n          $val: 'jon'\n        },\n        {\n          $path: ['author', 'last.name'],\n          $val: 'scazi'\n        }\n      ]\n    }\n\n    const result = fuse.search(query)\n\n    expect(result.length).toBe(1)\n  })",
            "file": "logical-search.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "we get the top three results scored based matches from all their fields",
            "suites": [
                "Searching using logical OR with same query across fields",
                "When searching for the term \"wood\""
            ],
            "updatePoint": {
                "line": 257,
                "column": 81
            },
            "line": 257,
            "code": "    test('we get the top three results scored based matches from all their fields', () => {\n      expect(idx(result.slice(0, 3))).toMatchObject([4, 3, 5])\n    })",
            "file": "logical-search.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "we get a list of containing 2 items",
            "suites": [
                "Flat list of strings: [\"Stove\", \"My good friend Steve from college\"]",
                "When performing a fuzzy search for the term \"Steve\" with ignoreFieldNorm off"
            ],
            "updatePoint": {
                "line": 22,
                "column": 45
            },
            "line": 22,
            "code": "    test('we get a list of containing 2 items', () => {\n      expect(result).toHaveLength(2)\n    })",
            "file": "scoring.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "whose values represent the indices of [\"Stove\", \"My good friend Steve from college\"]",
            "suites": [
                "Flat list of strings: [\"Stove\", \"My good friend Steve from college\"]",
                "When performing a fuzzy search for the term \"Steve\" with ignoreFieldNorm off"
            ],
            "updatePoint": {
                "line": 26,
                "column": 94
            },
            "line": 26,
            "code": "    test('whose values represent the indices of [\"Stove\", \"My good friend Steve from college\"]', () => {\n      expect(result[0].refIndex).toBe(0)\n      expect(result[1].refIndex).toBe(1)\n    })",
            "file": "scoring.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "we get a list of containing 2 items",
            "suites": [
                "Flat list of strings: [\"Stove\", \"My good friend Steve from college\"]",
                "When performing a fuzzy search for the term \"Steve\" with ignoreFieldNorm on"
            ],
            "updatePoint": {
                "line": 39,
                "column": 45
            },
            "line": 39,
            "code": "    test('we get a list of containing 2 items', () => {\n      expect(result).toHaveLength(2)\n    })",
            "file": "scoring.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "whose values represent the indices of [\"My good friend Steve from college\", \"Stove\"]",
            "suites": [
                "Flat list of strings: [\"Stove\", \"My good friend Steve from college\"]",
                "When performing a fuzzy search for the term \"Steve\" with ignoreFieldNorm on"
            ],
            "updatePoint": {
                "line": 43,
                "column": 94
            },
            "line": 43,
            "code": "    test('whose values represent the indices of [\"My good friend Steve from college\", \"Stove\"]', () => {\n      expect(result[0].refIndex).toBe(1)\n      expect(result[1].refIndex).toBe(0)\n    })",
            "file": "scoring.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "we get a list of containing 2 items",
            "suites": [
                "Flat list of strings: [\"Stove\", \"My good friend Steve from college\"]",
                "When performing a fuzzy search for the term \"Steve\" with ignoreFieldNorm off and fieldNormWeight decreased"
            ],
            "updatePoint": {
                "line": 56,
                "column": 45
            },
            "line": 56,
            "code": "    test('we get a list of containing 2 items', () => {\n      expect(result).toHaveLength(2)\n    })",
            "file": "scoring.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "whose values represent the indices of [\"My good friend Steve from college\", \"Stove\"]",
            "suites": [
                "Flat list of strings: [\"Stove\", \"My good friend Steve from college\"]",
                "When performing a fuzzy search for the term \"Steve\" with ignoreFieldNorm off and fieldNormWeight decreased"
            ],
            "updatePoint": {
                "line": 60,
                "column": 94
            },
            "line": 60,
            "code": "    test('whose values represent the indices of [\"My good friend Steve from college\", \"Stove\"]', () => {\n      expect(result[0].refIndex).toBe(1)\n      expect(result[1].refIndex).toBe(0)\n    })",
            "file": "scoring.test.js",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "When searching by number",
            "suites": [
                "Search with typings"
            ],
            "updatePoint": {
                "line": 13,
                "column": 32
            },
            "line": 13,
            "code": "  test('When searching by number', () => {\r\n    let pokeFuse = new Fuse(BattlePokedex, defaultOptions)\r\n\r\n    const pokemon = '2'\r\n    const firstSearch = pokeFuse.search(pokemon)\r\n\r\n    const poke: PokedexType = firstSearch[0].item\r\n\r\n    // let x = Fuse.createIndex<PokedexType>(\r\n    //   ['alias', 'species', 'name', 'num'],\r\n    //   BattlePokedex,\r\n    // )\r\n\r\n    const expected = {\r\n      num: 2,\r\n      species: 'Ivysaur',\r\n      types: ['Grass', 'Poison'],\r\n      genderRatio: { M: 0.875, F: 0.125 },\r\n      baseStats: { hp: 60, atk: 62, def: 63, spa: 80, spd: 80, spe: 60 },\r\n      abilities: { 0: 'Overgrow', H: 'Chlorophyll' },\r\n      heightm: 1,\r\n      weightkg: 13,\r\n      color: 'Green',\r\n      prevo: 'bulbasaur',\r\n      evos: ['venusaur'],\r\n      evoLevel: 16,\r\n      eggGroups: ['Monster', 'Grass']\r\n    }\r\n\r\n    expect(poke.species).toBe('Ivysaur')\r\n    expect(poke).toMatchObject(expected)\r\n  })\r",
            "file": "typings.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "When searching by number",
            "suites": [
                "Search results with indices"
            ],
            "updatePoint": {
                "line": 48,
                "column": 32
            },
            "line": 48,
            "code": "  test('When searching by number', () => {\r\n    interface Board {\r\n      readonly name: string\r\n    }\r\n    const list: Array<Board> = [\r\n      {\r\n        name: 'Arduino Duemilanove or Diecimila'\r\n      }\r\n    ]\r\n    const options: Fuse.IFuseOptions<Board> = {\r\n      includeMatches: true,\r\n      minMatchCharLength: 1,\r\n      keys: ['name']\r\n    }\r\n\r\n    const fuse = new Fuse(list, options)\r\n    const results = fuse.search(`ar due di`)\r\n\r\n    expect(results.length).toBe(1)\r\n\r\n    const matches = results[0].matches\r\n\r\n    expect(matches.length).toBe(1)\r\n    expect(matches[0].indices.length).toBe(9)\r\n    expect(matches[0].indices[0]).toMatchObject([0, 4])\r\n  })\r",
            "file": "typings.test.ts",
            "skipped": false,
            "dir": "test"
        },
        {
            "name": "Search: AND with multiple entries + exact match",
            "suites": [
                "Logical search results"
            ],
            "updatePoint": {
                "line": 98,
                "column": 55
            },
            "line": 98,
            "code": "  test('Search: AND with multiple entries + exact match', () => {\r\n    let result = fuse.search({\r\n      $and: [{ name: 'Woodhose' }, { title: \"'The\" }]\r\n    })\r\n    expect(result.length).toBe(1)\r\n    expect(idx(result)).toMatchObject([0])\r\n  })\r",
            "file": "typings.test.ts",
            "skipped": false,
            "dir": "test"
        }
    ],
    "badge": "krisk__Fuse.svg"
}