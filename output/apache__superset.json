{"repo":"apache/superset","url":"https://github.com/apache/superset","branch":"master","configs":[{"package":"superset","lang":"js","dir":"superset-frontend/spec","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@superset-ui/generator-superset","lang":"js","dir":"superset-frontend/packages/generator-superset/test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@superset-ui/chart-controls","lang":"ts","dir":"superset-frontend/packages/superset-ui-chart-controls/test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@superset-ui/core","lang":"ts","dir":"superset-frontend/packages/superset-ui-core/test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@superset-ui/legacy-plugin-chart-calendar","lang":"ts","dir":"superset-frontend/plugins/legacy-plugin-chart-calendar/test","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"@superset-ui/legacy-plugin-chart-map-box","lang":"js","dir":"superset-frontend/plugins/legacy-plugin-chart-map-box/test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@superset-ui/legacy-plugin-chart-partition","lang":"js","dir":"superset-frontend/plugins/legacy-plugin-chart-partition/test","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"@superset-ui/legacy-plugin-chart-pivot-table","lang":"ts","dir":"superset-frontend/plugins/legacy-plugin-chart-pivot-table/test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@superset-ui/legacy-preset-chart-deckgl","lang":"js","dir":"superset-frontend/plugins/legacy-preset-chart-deckgl/test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@superset-ui/legacy-preset-chart-nvd3","lang":"js","dir":"superset-frontend/plugins/legacy-preset-chart-nvd3/test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@superset-ui/plugin-chart-echarts","lang":"ts","dir":"superset-frontend/plugins/plugin-chart-echarts/test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@superset-ui/plugin-chart-pivot-table","lang":"ts","dir":"superset-frontend/plugins/plugin-chart-pivot-table/test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@superset-ui/plugin-chart-table","lang":"ts","dir":"superset-frontend/plugins/plugin-chart-table/test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@superset-ui/plugin-chart-word-cloud","lang":"ts","dir":"superset-frontend/plugins/plugin-chart-word-cloud/test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@superset-ui/preset-chart-xy","lang":"ts","dir":"superset-frontend/plugins/preset-chart-xy/test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"@superset-ui/monorepo","lang":"ts","dir":"superset-frontend/temporary_superset_ui/superset-ui/test","framework":"jest","pattern":"**/*.{js,ts}"},{"package":"@superset-ui/plugin-chart-choropleth-map","lang":"ts","dir":"superset-frontend/temporary_superset_ui/superset-ui/temporary-plugins/plugin-chart-choropleth-map/test","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"superset-websocket","lang":"ts","dir":"superset-websocket/spec","framework":"jest","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"generator-superset:app:creates files","suites":[],"updatePoint":{"line":23,"column":42,"index":981},"line":23,"code":"test('generator-superset:app:creates files', () => helpers.run(appModule).withPrompts({\n  subgenerator: 'package',\n  name: 'my-package'\n}).then(function () {\n  assert.file(['package.json', 'README.md', 'src/index.ts', 'test/index.test.ts']);\n}));","file":"app.test.js","skipped":false,"dir":"superset-frontend/packages/generator-superset/test"},{"name":"generator-superset:plugin-chart:creates files","suites":[],"updatePoint":{"line":26,"column":51,"index":1091},"line":26,"code":"test('generator-superset:plugin-chart:creates files', () => helpers.run(pluginChartModule).inTmpDir(function (dir) {\n  // `dir` is the path to the new temporary directory\n  fs.copySync(path.join(__dirname, '../generators/plugin-chart'), dir);\n}).withPrompts({\n  packageName: 'cold-map',\n  description: 'Cold Map',\n  componentType: 'function',\n  chartType: 'regular'\n}).withOptions({\n  skipInstall: true\n}).then(function () {\n  assert.file(['.gitignore', 'babel.config.js', 'jest.config.js', 'package.json', 'README.md', 'src/plugin/buildQuery.ts', 'src/plugin/controlPanel.ts', 'src/plugin/index.ts', 'src/plugin/transformProps.ts', 'src/ColdMap.tsx', 'src/index.ts', 'test/index.test.ts', 'test/__mocks__/mockExportString.js', 'test/plugin/buildQuery.test.ts', 'test/plugin/transformProps.test.ts', 'types/external.d.ts', 'src/images/thumbnail.png']);\n}));","file":"plugin-chart.test.js","skipped":false,"dir":"superset-frontend/packages/generator-superset/test"},{"name":"exports sections","suites":["@superset-ui/chart-controls"],"updatePoint":{"line":22,"column":22},"line":22,"code":"  it('exports sections', () => {\n    expect(sections).toBeDefined();\n    expect(sections.datasourceAndVizType).toBeDefined();\n  });","file":"index.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-chart-controls/test"},{"name":"should skip boxplotOperator","suites":[],"updatePoint":{"line":41,"column":33},"line":41,"code":"test('should skip boxplotOperator', () => {\n  expect(boxplotOperator(formData, queryObject)).toEqual(undefined);\n});","file":"operators/boxplotOperator.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-chart-controls/test"},{"name":"should do tukey boxplot","suites":[],"updatePoint":{"line":45,"column":29},"line":45,"code":"test('should do tukey boxplot', () => {\n  expect(\n    boxplotOperator(\n      {\n        ...formData,\n        whiskerOptions: 'Tukey',\n      },\n      queryObject,\n    ),\n  ).toEqual({\n    operation: 'boxplot',\n    options: {\n      whisker_type: 'tukey',\n      percentiles: undefined,\n      groupby: [],\n      metrics: ['count(*)', 'sum(val)'],\n    },\n  });\n});","file":"operators/boxplotOperator.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-chart-controls/test"},{"name":"should do min/max boxplot","suites":[],"updatePoint":{"line":65,"column":31},"line":65,"code":"test('should do min/max boxplot', () => {\n  expect(\n    boxplotOperator(\n      {\n        ...formData,\n        whiskerOptions: 'Min/max (no outliers)',\n      },\n      queryObject,\n    ),\n  ).toEqual({\n    operation: 'boxplot',\n    options: {\n      whisker_type: 'min/max',\n      percentiles: undefined,\n      groupby: [],\n      metrics: ['count(*)', 'sum(val)'],\n    },\n  });\n});","file":"operators/boxplotOperator.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-chart-controls/test"},{"name":"should do percentile boxplot","suites":[],"updatePoint":{"line":85,"column":34},"line":85,"code":"test('should do percentile boxplot', () => {\n  expect(\n    boxplotOperator(\n      {\n        ...formData,\n        whiskerOptions: '1/4 percentiles',\n      },\n      queryObject,\n    ),\n  ).toEqual({\n    operation: 'boxplot',\n    options: {\n      whisker_type: 'percentile',\n      percentiles: [1, 4],\n      groupby: [],\n      metrics: ['count(*)', 'sum(val)'],\n    },\n  });\n});","file":"operators/boxplotOperator.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-chart-controls/test"},{"name":"should throw an error","suites":[],"updatePoint":{"line":105,"column":27},"line":105,"code":"test('should throw an error', () => {\n  expect(() =>\n    boxplotOperator(\n      {\n        ...formData,\n        whiskerOptions: 'foobar',\n      },\n      queryObject,\n    ),\n  ).toThrow('Unsupported whisker type: foobar');\n});","file":"operators/boxplotOperator.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-chart-controls/test"},{"name":"should skip contributionOperator","suites":[],"updatePoint":{"line":41,"column":38},"line":41,"code":"test('should skip contributionOperator', () => {\n  expect(contributionOperator(formData, queryObject)).toEqual(undefined);\n});","file":"operators/contributionOperator.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-chart-controls/test"},{"name":"should do contributionOperator","suites":[],"updatePoint":{"line":45,"column":36},"line":45,"code":"test('should do contributionOperator', () => {\n  expect(\n    contributionOperator({ ...formData, contributionMode: 'row' }, queryObject),\n  ).toEqual({\n    operation: 'contribution',\n    options: {\n      orientation: 'row',\n    },\n  });\n});","file":"operators/contributionOperator.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-chart-controls/test"},{"name":"should do flattenOperator","suites":[],"updatePoint":{"line":55,"column":31},"line":55,"code":"test('should do flattenOperator', () => {\n  expect(flattenOperator(formData, queryObject)).toEqual({\n    operation: 'flatten',\n  });\n});","file":"operators/flattenOperator.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-chart-controls/test"},{"name":"skip pivot","suites":[],"updatePoint":{"line":57,"column":16},"line":57,"code":"test('skip pivot', () => {\n  expect(pivotOperator(formData, queryObject)).toEqual(undefined);\n  expect(\n    pivotOperator(formData, {\n      ...queryObject,\n      metrics: [],\n    }),\n  ).toEqual(undefined);\n});","file":"operators/pivotOperator.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-chart-controls/test"},{"name":"pivot by __timestamp without columns","suites":[],"updatePoint":{"line":67,"column":42},"line":67,"code":"test('pivot by __timestamp without columns', () => {\n  expect(\n    pivotOperator(\n      { ...formData, granularity_sqla: 'time_column' },\n      queryObject,\n    ),\n  ).toEqual({\n    operation: 'pivot',\n    options: {\n      index: ['__timestamp'],\n      columns: [],\n      aggregates: {\n        'count(*)': { operator: 'mean' },\n        'sum(val)': { operator: 'mean' },\n      },\n      drop_missing_columns: false,\n    },\n  });\n});","file":"operators/pivotOperator.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-chart-controls/test"},{"name":"pivot by __timestamp with columns","suites":[],"updatePoint":{"line":87,"column":39},"line":87,"code":"test('pivot by __timestamp with columns', () => {\n  expect(\n    pivotOperator(\n      { ...formData, granularity_sqla: 'time_column' },\n      {\n        ...queryObject,\n        columns: ['foo', 'bar'],\n      },\n    ),\n  ).toEqual({\n    operation: 'pivot',\n    options: {\n      index: ['__timestamp'],\n      columns: ['foo', 'bar'],\n      aggregates: {\n        'count(*)': { operator: 'mean' },\n        'sum(val)': { operator: 'mean' },\n      },\n      drop_missing_columns: false,\n    },\n  });\n});","file":"operators/pivotOperator.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-chart-controls/test"},{"name":"pivot by __timestamp with series_columns","suites":[],"updatePoint":{"line":110,"column":46},"line":110,"code":"test('pivot by __timestamp with series_columns', () => {\n  expect(\n    pivotOperator(\n      { ...formData, granularity_sqla: 'time_column' },\n      {\n        ...queryObject,\n        series_columns: ['foo', 'bar'],\n      },\n    ),\n  ).toEqual({\n    operation: 'pivot',\n    options: {\n      index: ['__timestamp'],\n      columns: ['foo', 'bar'],\n      aggregates: {\n        'count(*)': { operator: 'mean' },\n        'sum(val)': { operator: 'mean' },\n      },\n      drop_missing_columns: false,\n    },\n  });\n});","file":"operators/pivotOperator.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-chart-controls/test"},{"name":"pivot by x_axis with groupby","suites":[],"updatePoint":{"line":133,"column":34},"line":133,"code":"test('pivot by x_axis with groupby', () => {\n  expect(\n    pivotOperator(\n      {\n        ...formData,\n        x_axis: 'baz',\n      },\n      {\n        ...queryObject,\n        series_columns: ['foo', 'bar'],\n      },\n    ),\n  ).toEqual({\n    operation: 'pivot',\n    options: {\n      index: ['baz'],\n      columns: ['foo', 'bar'],\n      aggregates: {\n        'count(*)': { operator: 'mean' },\n        'sum(val)': { operator: 'mean' },\n      },\n      drop_missing_columns: false,\n    },\n  });\n});","file":"operators/pivotOperator.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-chart-controls/test"},{"name":"pivot by adhoc x_axis","suites":[],"updatePoint":{"line":159,"column":27},"line":159,"code":"test('pivot by adhoc x_axis', () => {\n  expect(\n    pivotOperator(\n      {\n        ...formData,\n        x_axis: {\n          label: 'my_case_expr',\n          expressionType: 'SQL',\n          sqlExpression: 'case when a = 1 then 1 else 0 end',\n        },\n      },\n      {\n        ...queryObject,\n        series_columns: ['foo', 'bar'],\n      },\n    ),\n  ).toEqual({\n    operation: 'pivot',\n    options: {\n      index: ['my_case_expr'],\n      columns: ['foo', 'bar'],\n      aggregates: {\n        'count(*)': { operator: 'mean' },\n        'sum(val)': { operator: 'mean' },\n      },\n      drop_missing_columns: false,\n    },\n  });\n});","file":"operators/pivotOperator.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-chart-controls/test"},{"name":"pivot by x_axis with extra metrics","suites":[],"updatePoint":{"line":189,"column":40},"line":189,"code":"test('pivot by x_axis with extra metrics', () => {\n  expect(\n    pivotOperator(\n      {\n        ...formData,\n        x_axis: 'foo',\n        x_axis_sort: 'bar',\n        groupby: [],\n        timeseries_limit_metric: 'bar',\n      },\n      {\n        ...queryObject,\n        series_columns: [],\n      },\n    ),\n  ).toEqual({\n    operation: 'pivot',\n    options: {\n      index: ['foo'],\n      columns: [],\n      aggregates: {\n        'count(*)': { operator: 'mean' },\n        'sum(val)': { operator: 'mean' },\n        bar: { operator: 'mean' },\n      },\n      drop_missing_columns: false,\n    },\n  });\n});","file":"operators/pivotOperator.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-chart-controls/test"},{"name":"should skip prophetOperator","suites":[],"updatePoint":{"line":41,"column":33},"line":41,"code":"test('should skip prophetOperator', () => {\n  expect(prophetOperator(formData, queryObject)).toEqual(undefined);\n});","file":"operators/prophetOperator.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-chart-controls/test"},{"name":"should do prophetOperator with default index","suites":[],"updatePoint":{"line":45,"column":50},"line":45,"code":"test('should do prophetOperator with default index', () => {\n  expect(\n    prophetOperator(\n      {\n        ...formData,\n        granularity_sqla: 'time_column',\n        forecastEnabled: true,\n        forecastPeriods: '3',\n        forecastInterval: '5',\n        forecastSeasonalityYearly: true,\n        forecastSeasonalityWeekly: false,\n        forecastSeasonalityDaily: false,\n      },\n      queryObject,\n    ),\n  ).toEqual({\n    operation: 'prophet',\n    options: {\n      time_grain: 'P1Y',\n      periods: 3.0,\n      confidence_interval: 5.0,\n      yearly_seasonality: true,\n      weekly_seasonality: false,\n      daily_seasonality: false,\n      index: DTTM_ALIAS,\n    },\n  });\n});","file":"operators/prophetOperator.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-chart-controls/test"},{"name":"should do prophetOperator over named column","suites":[],"updatePoint":{"line":74,"column":49},"line":74,"code":"test('should do prophetOperator over named column', () => {\n  expect(\n    prophetOperator(\n      {\n        ...formData,\n        x_axis: 'ds',\n        forecastEnabled: true,\n        forecastPeriods: '3',\n        forecastInterval: '5',\n        forecastSeasonalityYearly: true,\n        forecastSeasonalityWeekly: false,\n        forecastSeasonalityDaily: false,\n      },\n      queryObject,\n    ),\n  ).toEqual({\n    operation: 'prophet',\n    options: {\n      time_grain: 'P1Y',\n      periods: 3.0,\n      confidence_interval: 5.0,\n      yearly_seasonality: true,\n      weekly_seasonality: false,\n      daily_seasonality: false,\n      index: 'ds',\n    },\n  });\n});","file":"operators/prophetOperator.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-chart-controls/test"},{"name":"should do prophetOperator over adhoc column","suites":[],"updatePoint":{"line":103,"column":49},"line":103,"code":"test('should do prophetOperator over adhoc column', () => {\n  expect(\n    prophetOperator(\n      {\n        ...formData,\n        x_axis: {\n          label: 'my_case_expr',\n          expressionType: 'SQL',\n          sqlExpression: 'case when a = 1 then 1 else 0 end',\n        },\n        forecastEnabled: true,\n        forecastPeriods: '3',\n        forecastInterval: '5',\n        forecastSeasonalityYearly: true,\n        forecastSeasonalityWeekly: false,\n        forecastSeasonalityDaily: false,\n      },\n      queryObject,\n    ),\n  ).toEqual({\n    operation: 'prophet',\n    options: {\n      time_grain: 'P1Y',\n      periods: 3.0,\n      confidence_interval: 5.0,\n      yearly_seasonality: true,\n      weekly_seasonality: false,\n      daily_seasonality: false,\n      index: 'my_case_expr',\n    },\n  });\n});","file":"operators/prophetOperator.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-chart-controls/test"},{"name":"should skip renameOperator if exists multiple metrics","suites":[],"updatePoint":{"line":41,"column":59},"line":41,"code":"test('should skip renameOperator if exists multiple metrics', () => {\n  expect(\n    renameOperator(formData, {\n      ...queryObject,\n      ...{\n        metrics: ['count(*)', 'sum(sales)'],\n      },\n    }),\n  ).toEqual(undefined);\n});","file":"operators/renameOperator.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-chart-controls/test"},{"name":"should skip renameOperator if series does not exist","suites":[],"updatePoint":{"line":52,"column":57},"line":52,"code":"test('should skip renameOperator if series does not exist', () => {\n  expect(\n    renameOperator(formData, {\n      ...queryObject,\n      ...{\n        columns: [],\n      },\n    }),\n  ).toEqual(undefined);\n});","file":"operators/renameOperator.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-chart-controls/test"},{"name":"should skip renameOperator if does not exist x_axis and is_timeseries","suites":[],"updatePoint":{"line":63,"column":75},"line":63,"code":"test('should skip renameOperator if does not exist x_axis and is_timeseries', () => {\n  expect(\n    renameOperator(\n      {\n        ...formData,\n        ...{ x_axis: null },\n      },\n      { ...queryObject, ...{ is_timeseries: false } },\n    ),\n  ).toEqual(undefined);\n});","file":"operators/renameOperator.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-chart-controls/test"},{"name":"should skip renameOperator if exists derived metrics","suites":[],"updatePoint":{"line":75,"column":58},"line":75,"code":"test('should skip renameOperator if exists derived metrics', () => {\n  [\n    ComparisonType.Difference,\n    ComparisonType.Ratio,\n    ComparisonType.Percentage,\n  ].forEach(type => {\n    expect(\n      renameOperator(\n        {\n          ...formData,\n          ...{\n            comparison_type: type,\n            time_compare: ['1 year ago'],\n          },\n        },\n        {\n          ...queryObject,\n          ...{\n            metrics: ['count(*)'],\n          },\n        },\n      ),\n    ).toEqual(undefined);\n  });\n});","file":"operators/renameOperator.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-chart-controls/test"},{"name":"should add renameOperator","suites":[],"updatePoint":{"line":101,"column":31},"line":101,"code":"test('should add renameOperator', () => {\n  expect(renameOperator(formData, queryObject)).toEqual({\n    operation: 'rename',\n    options: { columns: { 'count(*)': null }, inplace: true, level: 0 },\n  });\n});","file":"operators/renameOperator.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-chart-controls/test"},{"name":"should add renameOperator if x_axis does not exist","suites":[],"updatePoint":{"line":108,"column":56},"line":108,"code":"test('should add renameOperator if x_axis does not exist', () => {\n  expect(\n    renameOperator(\n      {\n        ...formData,\n        ...{ x_axis: null, granularity_sqla: 'time column' },\n      },\n      queryObject,\n    ),\n  ).toEqual({\n    operation: 'rename',\n    options: { columns: { 'count(*)': null }, inplace: true, level: 0 },\n  });\n});","file":"operators/renameOperator.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-chart-controls/test"},{"name":"should add renameOperator if based on series_columns","suites":[],"updatePoint":{"line":123,"column":58},"line":123,"code":"test('should add renameOperator if based on series_columns', () => {\n  expect(\n    renameOperator(\n      {\n        ...formData,\n        ...{ x_axis: null, granularity_sqla: 'time column' },\n      },\n      {\n        ...queryObject,\n        columns: [],\n        series_columns: ['gender', 'dttm'],\n      },\n    ),\n  ).toEqual({\n    operation: 'rename',\n    options: { columns: { 'count(*)': null }, inplace: true, level: 0 },\n  });\n});","file":"operators/renameOperator.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-chart-controls/test"},{"name":"should add renameOperator if exist \"actual value\" time comparison","suites":[],"updatePoint":{"line":142,"column":71},"line":142,"code":"test('should add renameOperator if exist \"actual value\" time comparison', () => {\n  expect(\n    renameOperator(\n      {\n        ...formData,\n        ...{\n          comparison_type: ComparisonType.Values,\n          time_compare: ['1 year ago', '1 year later'],\n        },\n      },\n      queryObject,\n    ),\n  ).toEqual({\n    operation: 'rename',\n    options: {\n      columns: {\n        'count(*)': null,\n        'count(*)__1 year ago': '1 year ago',\n        'count(*)__1 year later': '1 year later',\n      },\n      inplace: true,\n      level: 0,\n    },\n  });\n});","file":"operators/renameOperator.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-chart-controls/test"},{"name":"should remove renameOperator","suites":[],"updatePoint":{"line":168,"column":34},"line":168,"code":"test('should remove renameOperator', () => {\n  expect(\n    renameOperator(\n      {\n        ...formData,\n        truncate_metric: false,\n      },\n      queryObject,\n    ),\n  ).toEqual(undefined);\n  expect(\n    renameOperator(\n      {\n        ...formData,\n        truncate_metric: undefined,\n      },\n      queryObject,\n    ),\n  ).toEqual(undefined);\n});","file":"operators/renameOperator.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-chart-controls/test"},{"name":"should skip resampleOperator","suites":[],"updatePoint":{"line":55,"column":34},"line":55,"code":"test('should skip resampleOperator', () => {\n  expect(resampleOperator(formData, queryObject)).toEqual(undefined);\n  expect(\n    resampleOperator({ ...formData, resample_method: 'ffill' }, queryObject),\n  ).toEqual(undefined);\n  expect(\n    resampleOperator({ ...formData, resample_rule: '1D' }, queryObject),\n  ).toEqual(undefined);\n});","file":"operators/resampleOperator.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-chart-controls/test"},{"name":"should do resample on implicit time column","suites":[],"updatePoint":{"line":65,"column":48},"line":65,"code":"test('should do resample on implicit time column', () => {\n  expect(\n    resampleOperator(\n      { ...formData, resample_method: 'ffill', resample_rule: '1D' },\n      queryObject,\n    ),\n  ).toEqual({\n    operation: 'resample',\n    options: {\n      method: 'ffill',\n      rule: '1D',\n      fill_value: null,\n    },\n  });\n});","file":"operators/resampleOperator.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-chart-controls/test"},{"name":"should do resample on x-axis","suites":[],"updatePoint":{"line":81,"column":34},"line":81,"code":"test('should do resample on x-axis', () => {\n  expect(\n    resampleOperator(\n      {\n        ...formData,\n        x_axis: 'ds',\n        resample_method: 'ffill',\n        resample_rule: '1D',\n      },\n      queryObject,\n    ),\n  ).toEqual({\n    operation: 'resample',\n    options: {\n      fill_value: null,\n      method: 'ffill',\n      rule: '1D',\n    },\n  });\n});","file":"operators/resampleOperator.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-chart-controls/test"},{"name":"should do zerofill resample","suites":[],"updatePoint":{"line":102,"column":33},"line":102,"code":"test('should do zerofill resample', () => {\n  expect(\n    resampleOperator(\n      { ...formData, resample_method: 'zerofill', resample_rule: '1D' },\n      queryObject,\n    ),\n  ).toEqual({\n    operation: 'resample',\n    options: {\n      method: 'asfreq',\n      rule: '1D',\n      fill_value: 0,\n    },\n  });\n});","file":"operators/resampleOperator.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-chart-controls/test"},{"name":"skip transformation","suites":[],"updatePoint":{"line":55,"column":25},"line":55,"code":"test('skip transformation', () => {\n  expect(rollingWindowOperator(formData, queryObject)).toEqual(undefined);\n  expect(\n    rollingWindowOperator({ ...formData, rolling_type: 'None' }, queryObject),\n  ).toEqual(undefined);\n  expect(\n    rollingWindowOperator({ ...formData, rolling_type: 'foobar' }, queryObject),\n  ).toEqual(undefined);\n\n  const formDataWithoutMetrics = { ...formData };\n  delete formDataWithoutMetrics.metrics;\n  expect(rollingWindowOperator(formDataWithoutMetrics, queryObject)).toEqual(\n    undefined,\n  );\n});","file":"operators/rollingWindowOperator.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-chart-controls/test"},{"name":"rolling_type: cumsum","suites":[],"updatePoint":{"line":71,"column":26},"line":71,"code":"test('rolling_type: cumsum', () => {\n  expect(\n    rollingWindowOperator({ ...formData, rolling_type: 'cumsum' }, queryObject),\n  ).toEqual({\n    operation: 'cum',\n    options: {\n      operator: 'sum',\n      columns: {\n        'count(*)': 'count(*)',\n        'sum(val)': 'sum(val)',\n      },\n    },\n  });\n});","file":"operators/rollingWindowOperator.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-chart-controls/test"},{"name":"rolling_type: sum/mean/std","suites":[],"updatePoint":{"line":86,"column":32},"line":86,"code":"test('rolling_type: sum/mean/std', () => {\n  const rollingTypes = ['sum', 'mean', 'std'];\n  rollingTypes.forEach(rollingType => {\n    expect(\n      rollingWindowOperator(\n        { ...formData, rolling_type: rollingType },\n        queryObject,\n      ),\n    ).toEqual({\n      operation: 'rolling',\n      options: {\n        rolling_type: rollingType,\n        window: 1,\n        min_periods: 0,\n        columns: {\n          'count(*)': 'count(*)',\n          'sum(val)': 'sum(val)',\n        },\n      },\n    });\n  });\n});","file":"operators/rollingWindowOperator.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-chart-controls/test"},{"name":"should append compared metrics when sets time compare type","suites":[],"updatePoint":{"line":109,"column":64},"line":109,"code":"test('should append compared metrics when sets time compare type', () => {\n  const comparisonTypes = ['values', 'difference', 'percentage', 'ratio'];\n  comparisonTypes.forEach(cType => {\n    expect(\n      rollingWindowOperator(\n        {\n          ...formData,\n          rolling_type: 'cumsum',\n          comparison_type: cType,\n          time_compare: ['1 year ago', '1 year later'],\n        },\n        queryObject,\n      ),\n    ).toEqual({\n      operation: 'cum',\n      options: {\n        operator: 'sum',\n        columns: {\n          'count(*)': 'count(*)',\n          'count(*)__1 year ago': 'count(*)__1 year ago',\n          'count(*)__1 year later': 'count(*)__1 year later',\n          'sum(val)': 'sum(val)',\n          'sum(val)__1 year ago': 'sum(val)__1 year ago',\n          'sum(val)__1 year later': 'sum(val)__1 year later',\n        },\n      },\n    });\n  });\n});","file":"operators/rollingWindowOperator.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-chart-controls/test"},{"name":"should ignore the sortOperator","suites":[],"updatePoint":{"line":56,"column":36},"line":56,"code":"test('should ignore the sortOperator', () => {\n  // FF is disabled\n  Object.defineProperty(supersetCoreModule, 'hasGenericChartAxes', {\n    value: false,\n  });\n  expect(sortOperator(formData, queryObject)).toEqual(undefined);\n\n  // FF is enabled\n  Object.defineProperty(supersetCoreModule, 'hasGenericChartAxes', {\n    value: true,\n  });\n  expect(\n    sortOperator(\n      {\n        ...formData,\n        ...{\n          x_axis_sort: undefined,\n          x_axis_sort_asc: true,\n        },\n      },\n      queryObject,\n    ),\n  ).toEqual(undefined);\n\n  // sortOperator doesn't support multiple series\n  Object.defineProperty(supersetCoreModule, 'hasGenericChartAxes', {\n    value: true,\n  });\n  expect(\n    sortOperator(\n      {\n        ...formData,\n        ...{\n          x_axis_sort: 'metric label',\n          x_axis_sort_asc: true,\n          groupby: ['col1'],\n          x_axis: 'axis column',\n        },\n      },\n      queryObject,\n    ),\n  ).toEqual(undefined);\n});","file":"operators/sortOperator.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-chart-controls/test"},{"name":"should sort by metric","suites":[],"updatePoint":{"line":100,"column":27},"line":100,"code":"test('should sort by metric', () => {\n  Object.defineProperty(supersetCoreModule, 'hasGenericChartAxes', {\n    value: true,\n  });\n  expect(\n    sortOperator(\n      {\n        ...formData,\n        ...{\n          metrics: ['a metric label'],\n          x_axis_sort: 'a metric label',\n          x_axis_sort_asc: true,\n        },\n      },\n      queryObject,\n    ),\n  ).toEqual({\n    operation: 'sort',\n    options: {\n      by: 'a metric label',\n      ascending: true,\n    },\n  });\n});","file":"operators/sortOperator.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-chart-controls/test"},{"name":"should sort by axis","suites":[],"updatePoint":{"line":125,"column":25},"line":125,"code":"test('should sort by axis', () => {\n  Object.defineProperty(supersetCoreModule, 'hasGenericChartAxes', {\n    value: true,\n  });\n  expect(\n    sortOperator(\n      {\n        ...formData,\n        ...{\n          x_axis_sort: 'Categorical Column',\n          x_axis_sort_asc: true,\n          x_axis: 'Categorical Column',\n        },\n      },\n      queryObject,\n    ),\n  ).toEqual({\n    operation: 'sort',\n    options: {\n      is_sort_index: true,\n      ascending: true,\n    },\n  });\n});","file":"operators/sortOperator.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-chart-controls/test"},{"name":"should sort by extra metric","suites":[],"updatePoint":{"line":150,"column":33},"line":150,"code":"test('should sort by extra metric', () => {\n  Object.defineProperty(supersetCoreModule, 'hasGenericChartAxes', {\n    value: true,\n  });\n  expect(\n    sortOperator(\n      {\n        ...formData,\n        x_axis_sort: 'my_limit_metric',\n        x_axis_sort_asc: true,\n        x_axis: 'Categorical Column',\n        groupby: [],\n        timeseries_limit_metric: 'my_limit_metric',\n      },\n      queryObject,\n    ),\n  ).toEqual({\n    operation: 'sort',\n    options: {\n      by: 'my_limit_metric',\n      ascending: true,\n    },\n  });\n});","file":"operators/sortOperator.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-chart-controls/test"},{"name":"should skip CompareOperator","suites":[],"updatePoint":{"line":66,"column":33},"line":66,"code":"test('should skip CompareOperator', () => {\n  expect(timeCompareOperator(formData, queryObject)).toEqual(undefined);\n  expect(\n    timeCompareOperator({ ...formData, time_compare: [] }, queryObject),\n  ).toEqual(undefined);\n  expect(\n    timeCompareOperator({ ...formData, comparison_type: null }, queryObject),\n  ).toEqual(undefined);\n  expect(\n    timeCompareOperator(\n      { ...formData, comparison_type: 'foobar' },\n      queryObject,\n    ),\n  ).toEqual(undefined);\n  expect(\n    timeCompareOperator(\n      {\n        ...formData,\n        comparison_type: 'values',\n        time_compare: ['1 year ago', '1 year later'],\n      },\n      queryObject,\n    ),\n  ).toEqual(undefined);\n});","file":"operators/timeCompareOperator.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-chart-controls/test"},{"name":"should generate difference/percentage/ratio CompareOperator","suites":[],"updatePoint":{"line":92,"column":65},"line":92,"code":"test('should generate difference/percentage/ratio CompareOperator', () => {\n  const comparisonTypes = ['difference', 'percentage', 'ratio'];\n  comparisonTypes.forEach(cType => {\n    expect(\n      timeCompareOperator(\n        {\n          ...formData,\n          comparison_type: cType,\n          time_compare: ['1 year ago', '1 year later'],\n        },\n        queryObject,\n      ),\n    ).toEqual({\n      operation: 'compare',\n      options: {\n        source_columns: ['count(*)', 'count(*)', 'sum(val)', 'sum(val)'],\n        compare_columns: [\n          'count(*)__1 year ago',\n          'count(*)__1 year later',\n          'sum(val)__1 year ago',\n          'sum(val)__1 year later',\n        ],\n        compare_type: cType,\n        drop_original_columns: true,\n      },\n    });\n  });\n});","file":"operators/timeCompareOperator.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-chart-controls/test"},{"name":"should skip pivot","suites":[],"updatePoint":{"line":47,"column":23},"line":47,"code":"test('should skip pivot', () => {\n  expect(timeComparePivotOperator(formData, queryObject)).toEqual(undefined);\n  expect(\n    timeComparePivotOperator({ ...formData, time_compare: [] }, queryObject),\n  ).toEqual(undefined);\n  expect(\n    timeComparePivotOperator(\n      { ...formData, comparison_type: null },\n      queryObject,\n    ),\n  ).toEqual(undefined);\n  expect(\n    timeCompareOperator(\n      { ...formData, comparison_type: 'foobar' },\n      queryObject,\n    ),\n  ).toEqual(undefined);\n});","file":"operators/timeComparePivotOperator.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-chart-controls/test"},{"name":"should pivot on any type of timeCompare","suites":[],"updatePoint":{"line":66,"column":45},"line":66,"code":"test('should pivot on any type of timeCompare', () => {\n  const anyTimeCompareTypes = ['values', 'difference', 'percentage', 'ratio'];\n  anyTimeCompareTypes.forEach(cType => {\n    expect(\n      timeComparePivotOperator(\n        {\n          ...formData,\n          comparison_type: cType,\n          time_compare: ['1 year ago', '1 year later'],\n          granularity_sqla: 'time_column',\n        },\n        {\n          ...queryObject,\n        },\n      ),\n    ).toEqual({\n      operation: 'pivot',\n      options: {\n        aggregates: {\n          'count(*)': { operator: 'mean' },\n          'count(*)__1 year ago': { operator: 'mean' },\n          'count(*)__1 year later': { operator: 'mean' },\n          'sum(val)': { operator: 'mean' },\n          'sum(val)__1 year ago': {\n            operator: 'mean',\n          },\n          'sum(val)__1 year later': {\n            operator: 'mean',\n          },\n        },\n        drop_missing_columns: false,\n        columns: ['foo', 'bar'],\n        index: ['__timestamp'],\n      },\n    });\n  });\n});","file":"operators/timeComparePivotOperator.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-chart-controls/test"},{"name":"should pivot on x-axis","suites":[],"updatePoint":{"line":104,"column":28},"line":104,"code":"test('should pivot on x-axis', () => {\n  expect(\n    timeComparePivotOperator(\n      {\n        ...formData,\n        comparison_type: 'values',\n        time_compare: ['1 year ago', '1 year later'],\n        x_axis: 'ds',\n      },\n      queryObject,\n    ),\n  ).toEqual({\n    operation: 'pivot',\n    options: {\n      aggregates: {\n        'count(*)': { operator: 'mean' },\n        'count(*)__1 year ago': { operator: 'mean' },\n        'count(*)__1 year later': { operator: 'mean' },\n        'sum(val)': {\n          operator: 'mean',\n        },\n        'sum(val)__1 year ago': {\n          operator: 'mean',\n        },\n        'sum(val)__1 year later': {\n          operator: 'mean',\n        },\n      },\n      drop_missing_columns: false,\n      columns: ['foo', 'bar'],\n      index: ['ds'],\n    },\n  });\n});","file":"operators/timeComparePivotOperator.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-chart-controls/test"},{"name":"should pivot on x-axis with series_columns","suites":[],"updatePoint":{"line":139,"column":48},"line":139,"code":"test('should pivot on x-axis with series_columns', () => {\n  expect(\n    timeComparePivotOperator(\n      {\n        ...formData,\n        comparison_type: 'values',\n        time_compare: ['1 year ago', '1 year later'],\n        x_axis: 'ds',\n      },\n      {\n        ...queryObject,\n        columns: ['ds', 'foo', 'bar'],\n        series_columns: ['foo', 'bar'],\n      },\n    ),\n  ).toEqual({\n    operation: 'pivot',\n    options: {\n      aggregates: {\n        'count(*)': { operator: 'mean' },\n        'count(*)__1 year ago': { operator: 'mean' },\n        'count(*)__1 year later': { operator: 'mean' },\n        'sum(val)': {\n          operator: 'mean',\n        },\n        'sum(val)__1 year ago': {\n          operator: 'mean',\n        },\n        'sum(val)__1 year later': {\n          operator: 'mean',\n        },\n      },\n      drop_missing_columns: false,\n      columns: ['foo', 'bar'],\n      index: ['ds'],\n    },\n  });\n});","file":"operators/timeComparePivotOperator.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-chart-controls/test"},{"name":"should pivot on adhoc x-axis","suites":[],"updatePoint":{"line":178,"column":34},"line":178,"code":"test('should pivot on adhoc x-axis', () => {\n  expect(\n    timeComparePivotOperator(\n      {\n        ...formData,\n        comparison_type: 'values',\n        time_compare: ['1 year ago', '1 year later'],\n        x_axis: {\n          label: 'my_case_expr',\n          expressionType: 'SQL',\n          sqlExpression: 'case when a = 1 then 1 else 0 end',\n        },\n      },\n      queryObject,\n    ),\n  ).toEqual({\n    operation: 'pivot',\n    options: {\n      aggregates: {\n        'count(*)': { operator: 'mean' },\n        'count(*)__1 year ago': { operator: 'mean' },\n        'count(*)__1 year later': { operator: 'mean' },\n        'sum(val)': {\n          operator: 'mean',\n        },\n        'sum(val)__1 year ago': {\n          operator: 'mean',\n        },\n        'sum(val)__1 year later': {\n          operator: 'mean',\n        },\n      },\n      drop_missing_columns: false,\n      columns: ['foo', 'bar'],\n      index: ['my_case_expr'],\n    },\n  });\n});","file":"operators/timeComparePivotOperator.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-chart-controls/test"},{"name":"returns empty array if relevant controls missing","suites":[],"updatePoint":{"line":39,"column":54},"line":39,"code":"test('returns empty array if relevant controls missing', () => {\n  expect(\n    extractExtraMetrics({\n      ...baseFormData,\n    }),\n  ).toEqual([]);\n});","file":"operators/utils/extractExtraMetrics.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-chart-controls/test"},{"name":"returns empty array if x_axis_sort is not same as timeseries_limit_metric","suites":[],"updatePoint":{"line":47,"column":79},"line":47,"code":"test('returns empty array if x_axis_sort is not same as timeseries_limit_metric', () => {\n  expect(\n    extractExtraMetrics({\n      ...baseFormData,\n      timeseries_limit_metric: 'foo',\n      x_axis_sort: 'bar',\n    }),\n  ).toEqual([]);\n});","file":"operators/utils/extractExtraMetrics.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-chart-controls/test"},{"name":"returns correct column if sort columns match","suites":[],"updatePoint":{"line":57,"column":50},"line":57,"code":"test('returns correct column if sort columns match', () => {\n  expect(\n    extractExtraMetrics({\n      ...baseFormData,\n      timeseries_limit_metric: 'foo',\n      x_axis_sort: 'foo',\n    }),\n  ).toEqual(['foo']);\n});","file":"operators/utils/extractExtraMetrics.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-chart-controls/test"},{"name":"handles adhoc metrics correctly","suites":[],"updatePoint":{"line":67,"column":37},"line":67,"code":"test('handles adhoc metrics correctly', () => {\n  expect(\n    extractExtraMetrics({\n      ...baseFormData,\n      timeseries_limit_metric: metric,\n      x_axis_sort: 'foo',\n    }),\n  ).toEqual([metric]);\n\n  expect(\n    extractExtraMetrics({\n      ...baseFormData,\n      timeseries_limit_metric: metric,\n      x_axis_sort: 'bar',\n    }),\n  ).toEqual([]);\n});","file":"operators/utils/extractExtraMetrics.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-chart-controls/test"},{"name":"returns empty array if groupby populated","suites":[],"updatePoint":{"line":85,"column":46},"line":85,"code":"test('returns empty array if groupby populated', () => {\n  expect(\n    extractExtraMetrics({\n      ...baseFormData,\n      groupby: ['bar'],\n      timeseries_limit_metric: 'foo',\n      x_axis_sort: 'foo',\n    }),\n  ).toEqual([]);\n});","file":"operators/utils/extractExtraMetrics.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-chart-controls/test"},{"name":"returns empty array if timeseries_limit_metric and x_axis_sort are included in main metrics array","suites":[],"updatePoint":{"line":96,"column":103},"line":96,"code":"test('returns empty array if timeseries_limit_metric and x_axis_sort are included in main metrics array', () => {\n  expect(\n    extractExtraMetrics({\n      ...baseFormData,\n      timeseries_limit_metric: 'a',\n      x_axis_sort: 'a',\n    }),\n  ).toEqual([]);\n});","file":"operators/utils/extractExtraMetrics.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-chart-controls/test"},{"name":"returns empty array if timeseries_limit_metric and x_axis_sort are included in main metrics array with adhoc metrics","suites":[],"updatePoint":{"line":106,"column":122},"line":106,"code":"test('returns empty array if timeseries_limit_metric and x_axis_sort are included in main metrics array with adhoc metrics', () => {\n  expect(\n    extractExtraMetrics({\n      ...baseFormData,\n      metrics: [\n        'a',\n        {\n          expressionType: 'SIMPLE',\n          aggregate: 'SUM',\n          column: { column_name: 'num' },\n        },\n      ],\n      timeseries_limit_metric: {\n        expressionType: 'SIMPLE',\n        aggregate: 'SUM',\n        column: { column_name: 'num' },\n      },\n      x_axis_sort: 'SUM(num)',\n    }),\n  ).toEqual([]);\n});","file":"operators/utils/extractExtraMetrics.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-chart-controls/test"},{"name":"returns emoty array if timeseries_limit_metric is an empty array","suites":[],"updatePoint":{"line":128,"column":70},"line":128,"code":"test('returns emoty array if timeseries_limit_metric is an empty array', () => {\n  expect(\n    extractExtraMetrics({\n      ...baseFormData,\n      // @ts-ignore\n      timeseries_limit_metric: [],\n    }),\n  ).toEqual([]);\n});","file":"operators/utils/extractExtraMetrics.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-chart-controls/test"},{"name":"should be false if comparison type is not actual values","suites":[],"updatePoint":{"line":32,"column":61},"line":32,"code":"test('should be false if comparison type is not actual values', () => {\n  expect(isDerivedSeries(series, formData)).toEqual(false);\n  Object.keys(ComparisonType)\n    .filter(type => type === ComparisonType.Values)\n    .forEach(type => {\n      const formDataWithComparisonType = {\n        ...formData,\n        comparison_type: type,\n        time_compare: ['1 month ago'],\n      };\n      expect(isDerivedSeries(series, formDataWithComparisonType)).toEqual(\n        false,\n      );\n    });\n});","file":"operators/utils/isDerivedSeries.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-chart-controls/test"},{"name":"should be true if comparison type is values","suites":[],"updatePoint":{"line":48,"column":49},"line":48,"code":"test('should be true if comparison type is values', () => {\n  const formDataWithActualTypes = {\n    ...formData,\n    comparison_type: ComparisonType.Values,\n    time_compare: ['1 month ago', '1 month later'],\n  };\n  expect(isDerivedSeries(series, formDataWithActualTypes)).toEqual(true);\n});","file":"operators/utils/isDerivedSeries.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-chart-controls/test"},{"name":"should be false if series name does not match time_compare","suites":[],"updatePoint":{"line":57,"column":64},"line":57,"code":"test('should be false if series name does not match time_compare', () => {\n  const arbitrary_series = {\n    id: 'arbitrary column',\n    name: 'arbitrary column',\n    data: [100],\n  };\n  const formDataWithActualTypes = {\n    ...formData,\n    comparison_type: ComparisonType.Values,\n    time_compare: ['1 month ago', '1 month later'],\n  };\n  expect(isDerivedSeries(arbitrary_series, formDataWithActualTypes)).toEqual(\n    false,\n  );\n});","file":"operators/utils/isDerivedSeries.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-chart-controls/test"},{"name":"should be false if time compare is not suffix","suites":[],"updatePoint":{"line":73,"column":51},"line":73,"code":"test('should be false if time compare is not suffix', () => {\n  const series = {\n    id: '1 month ago__metric',\n    name: '1 month ago__metric',\n    data: [100],\n  };\n  const formDataWithActualTypes = {\n    ...formData,\n    comparison_type: ComparisonType.Values,\n    time_compare: ['1 month ago', '1 month later'],\n  };\n  expect(isDerivedSeries(series, formDataWithActualTypes)).toEqual(false);\n});","file":"operators/utils/isDerivedSeries.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-chart-controls/test"},{"name":"should be false if series name invalid","suites":[],"updatePoint":{"line":87,"column":44},"line":87,"code":"test('should be false if series name invalid', () => {\n  const series = {\n    id: 123,\n    name: 123,\n    data: [100],\n  };\n  const formDataWithActualTypes = {\n    ...formData,\n    comparison_type: ComparisonType.Values,\n    time_compare: ['1 month ago', '1 month later'],\n  };\n  expect(isDerivedSeries(series, formDataWithActualTypes)).toEqual(false);\n});","file":"operators/utils/isDerivedSeries.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-chart-controls/test"},{"name":"returns the series name when time compare is empty","suites":[],"updatePoint":{"line":21,"column":56},"line":21,"code":"test('returns the series name when time compare is empty', () => {\n  const seriesName = 'sum';\n  expect(getOriginalSeries(seriesName, [])).toEqual(seriesName);\n});","file":"operators/utils/timeOffset.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-chart-controls/test"},{"name":"returns the original series name","suites":[],"updatePoint":{"line":26,"column":38},"line":26,"code":"test('returns the original series name', () => {\n  const seriesName = 'sum__1_month_ago';\n  const timeCompare = ['1_month_ago'];\n  expect(getOriginalSeries(seriesName, timeCompare)).toEqual('sum');\n});","file":"operators/utils/timeOffset.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-chart-controls/test"},{"name":"isColumnMeta returns false for AdhocColumn","suites":[],"updatePoint":{"line":47,"column":48},"line":47,"code":"test('isColumnMeta returns false for AdhocColumn', () => {\n  expect(isColumnMeta(ADHOC_COLUMN)).toEqual(false);\n});","file":"types.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-chart-controls/test"},{"name":"isColumnMeta returns true for ColumnMeta","suites":[],"updatePoint":{"line":51,"column":46},"line":51,"code":"test('isColumnMeta returns true for ColumnMeta', () => {\n  expect(isColumnMeta(COLUMN_META)).toEqual(true);\n});","file":"types.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-chart-controls/test"},{"name":"isSavedExpression returns false for AdhocColumn","suites":[],"updatePoint":{"line":55,"column":53},"line":55,"code":"test('isSavedExpression returns false for AdhocColumn', () => {\n  expect(isSavedExpression(ADHOC_COLUMN)).toEqual(false);\n});","file":"types.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-chart-controls/test"},{"name":"isSavedExpression returns false for ColumnMeta without expression","suites":[],"updatePoint":{"line":59,"column":71},"line":59,"code":"test('isSavedExpression returns false for ColumnMeta without expression', () => {\n  expect(isSavedExpression(COLUMN_META)).toEqual(false);\n});","file":"types.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-chart-controls/test"},{"name":"isSavedExpression returns true for ColumnMeta with expression","suites":[],"updatePoint":{"line":63,"column":67},"line":63,"code":"test('isSavedExpression returns true for ColumnMeta with expression', () => {\n  expect(isSavedExpression(SAVED_EXPRESSION)).toEqual(true);\n});","file":"types.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-chart-controls/test"},{"name":"isControlPanelSectionConfig returns true for section","suites":[],"updatePoint":{"line":67,"column":58},"line":67,"code":"test('isControlPanelSectionConfig returns true for section', () => {\n  expect(isControlPanelSectionConfig(CONTROL_PANEL_SECTION_CONFIG)).toEqual(\n    true,\n  );\n});","file":"types.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-chart-controls/test"},{"name":"isControlPanelSectionConfig returns true for null value","suites":[],"updatePoint":{"line":73,"column":61},"line":73,"code":"test('isControlPanelSectionConfig returns true for null value', () => {\n  expect(isControlPanelSectionConfig(null)).toEqual(false);\n});","file":"types.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-chart-controls/test"},{"name":"round","suites":["round"],"updatePoint":{"line":36,"column":11},"line":36,"code":"  it('round', () => {\n    expect(round(1)).toEqual(1);\n    expect(round(1, 2)).toEqual(1);\n    expect(round(0.6)).toEqual(1);\n    expect(round(0.6, 1)).toEqual(0.6);\n    expect(round(0.64999, 2)).toEqual(0.65);\n  });","file":"utils/getColorFormatters.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-chart-controls/test"},{"name":"getOpacity","suites":["getOpacity"],"updatePoint":{"line":46,"column":16},"line":46,"code":"  it('getOpacity', () => {\n    expect(getOpacity(100, 100, 100)).toEqual(1);\n    expect(getOpacity(75, 50, 100)).toEqual(0.53);\n    expect(getOpacity(75, 100, 50)).toEqual(0.53);\n    expect(getOpacity(100, 100, 50)).toEqual(0.05);\n    expect(getOpacity(100, 100, 100, 0, 0.8)).toEqual(0.8);\n    expect(getOpacity(100, 100, 50, 0, 1)).toEqual(0);\n    expect(getOpacity(999, 100, 50, 0, 1)).toEqual(1);\n    expect(getOpacity(100, 100, 50, 0.99, 1)).toEqual(0.99);\n    expect(getOpacity(99, 100, 50, 0, 1)).toEqual(0.02);\n  });","file":"utils/getColorFormatters.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-chart-controls/test"},{"name":"getColorFunction GREATER_THAN","suites":["getColorFunction()"],"updatePoint":{"line":60,"column":35},"line":60,"code":"  it('getColorFunction GREATER_THAN', () => {\n    const colorFunction = getColorFunction(\n      {\n        operator: COMPARATOR.GREATER_THAN,\n        targetValue: 50,\n        colorScheme: '#FF0000',\n        column: 'count',\n      },\n      countValues,\n    );\n    expect(colorFunction(50)).toBeUndefined();\n    expect(colorFunction(100)).toEqual('#FF0000FF');\n  });","file":"utils/getColorFormatters.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-chart-controls/test"},{"name":"getColorFunction LESS_THAN","suites":["getColorFunction()"],"updatePoint":{"line":74,"column":32},"line":74,"code":"  it('getColorFunction LESS_THAN', () => {\n    const colorFunction = getColorFunction(\n      {\n        operator: COMPARATOR.LESS_THAN,\n        targetValue: 100,\n        colorScheme: '#FF0000',\n        column: 'count',\n      },\n      countValues,\n    );\n    expect(colorFunction(100)).toBeUndefined();\n    expect(colorFunction(50)).toEqual('#FF0000FF');\n  });","file":"utils/getColorFormatters.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-chart-controls/test"},{"name":"getColorFunction GREATER_OR_EQUAL","suites":["getColorFunction()"],"updatePoint":{"line":88,"column":39},"line":88,"code":"  it('getColorFunction GREATER_OR_EQUAL', () => {\n    const colorFunction = getColorFunction(\n      {\n        operator: COMPARATOR.GREATER_OR_EQUAL,\n        targetValue: 50,\n        colorScheme: '#FF0000',\n        column: 'count',\n      },\n      countValues,\n    );\n    expect(colorFunction(50)).toEqual('#FF00000D');\n    expect(colorFunction(100)).toEqual('#FF0000FF');\n    expect(colorFunction(0)).toBeUndefined();\n  });","file":"utils/getColorFormatters.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-chart-controls/test"},{"name":"getColorFunction LESS_OR_EQUAL","suites":["getColorFunction()"],"updatePoint":{"line":103,"column":36},"line":103,"code":"  it('getColorFunction LESS_OR_EQUAL', () => {\n    const colorFunction = getColorFunction(\n      {\n        operator: COMPARATOR.LESS_OR_EQUAL,\n        targetValue: 100,\n        colorScheme: '#FF0000',\n        column: 'count',\n      },\n      countValues,\n    );\n    expect(colorFunction(50)).toEqual('#FF0000FF');\n    expect(colorFunction(100)).toEqual('#FF00000D');\n    expect(colorFunction(150)).toBeUndefined();\n  });","file":"utils/getColorFormatters.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-chart-controls/test"},{"name":"getColorFunction EQUAL","suites":["getColorFunction()"],"updatePoint":{"line":118,"column":28},"line":118,"code":"  it('getColorFunction EQUAL', () => {\n    const colorFunction = getColorFunction(\n      {\n        operator: COMPARATOR.EQUAL,\n        targetValue: 100,\n        colorScheme: '#FF0000',\n        column: 'count',\n      },\n      countValues,\n    );\n    expect(colorFunction(50)).toBeUndefined();\n    expect(colorFunction(100)).toEqual('#FF0000FF');\n  });","file":"utils/getColorFormatters.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-chart-controls/test"},{"name":"getColorFunction NOT_EQUAL","suites":["getColorFunction()"],"updatePoint":{"line":132,"column":32},"line":132,"code":"  it('getColorFunction NOT_EQUAL', () => {\n    let colorFunction = getColorFunction(\n      {\n        operator: COMPARATOR.NOT_EQUAL,\n        targetValue: 60,\n        colorScheme: '#FF0000',\n        column: 'count',\n      },\n      countValues,\n    );\n    expect(colorFunction(60)).toBeUndefined();\n    expect(colorFunction(100)).toEqual('#FF0000FF');\n    expect(colorFunction(50)).toEqual('#FF00004A');\n\n    colorFunction = getColorFunction(\n      {\n        operator: COMPARATOR.NOT_EQUAL,\n        targetValue: 90,\n        colorScheme: '#FF0000',\n        column: 'count',\n      },\n      countValues,\n    );\n    expect(colorFunction(90)).toBeUndefined();\n    expect(colorFunction(100)).toEqual('#FF00004A');\n    expect(colorFunction(50)).toEqual('#FF0000FF');\n  });","file":"utils/getColorFormatters.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-chart-controls/test"},{"name":"getColorFunction BETWEEN","suites":["getColorFunction()"],"updatePoint":{"line":160,"column":30},"line":160,"code":"  it('getColorFunction BETWEEN', () => {\n    const colorFunction = getColorFunction(\n      {\n        operator: COMPARATOR.BETWEEN,\n        targetValueLeft: 75,\n        targetValueRight: 125,\n        colorScheme: '#FF0000',\n        column: 'count',\n      },\n      countValues,\n    );\n    expect(colorFunction(50)).toBeUndefined();\n    expect(colorFunction(100)).toEqual('#FF000087');\n  });","file":"utils/getColorFormatters.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-chart-controls/test"},{"name":"getColorFunction BETWEEN_OR_EQUAL","suites":["getColorFunction()"],"updatePoint":{"line":175,"column":39},"line":175,"code":"  it('getColorFunction BETWEEN_OR_EQUAL', () => {\n    const colorFunction = getColorFunction(\n      {\n        operator: COMPARATOR.BETWEEN_OR_EQUAL,\n        targetValueLeft: 50,\n        targetValueRight: 100,\n        colorScheme: '#FF0000',\n        column: 'count',\n      },\n      countValues,\n    );\n    expect(colorFunction(50)).toEqual('#FF00000D');\n    expect(colorFunction(100)).toEqual('#FF0000FF');\n    expect(colorFunction(150)).toBeUndefined();\n  });","file":"utils/getColorFormatters.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-chart-controls/test"},{"name":"getColorFunction BETWEEN_OR_EQUAL without opacity","suites":["getColorFunction()"],"updatePoint":{"line":191,"column":55},"line":191,"code":"  it('getColorFunction BETWEEN_OR_EQUAL without opacity', () => {\n    const colorFunction = getColorFunction(\n      {\n        operator: COMPARATOR.BETWEEN_OR_EQUAL,\n        targetValueLeft: 50,\n        targetValueRight: 100,\n        colorScheme: '#FF0000',\n        column: 'count',\n      },\n      countValues,\n      false,\n    );\n    expect(colorFunction(25)).toBeUndefined();\n    expect(colorFunction(50)).toEqual('#FF0000');\n    expect(colorFunction(75)).toEqual('#FF0000');\n    expect(colorFunction(100)).toEqual('#FF0000');\n    expect(colorFunction(125)).toBeUndefined();\n  });","file":"utils/getColorFormatters.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-chart-controls/test"},{"name":"getColorFunction BETWEEN_OR_LEFT_EQUAL","suites":["getColorFunction()"],"updatePoint":{"line":210,"column":44},"line":210,"code":"  it('getColorFunction BETWEEN_OR_LEFT_EQUAL', () => {\n    const colorFunction = getColorFunction(\n      {\n        operator: COMPARATOR.BETWEEN_OR_LEFT_EQUAL,\n        targetValueLeft: 50,\n        targetValueRight: 100,\n        colorScheme: '#FF0000',\n        column: 'count',\n      },\n      countValues,\n    );\n    expect(colorFunction(50)).toEqual('#FF00000D');\n    expect(colorFunction(100)).toBeUndefined();\n  });","file":"utils/getColorFormatters.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-chart-controls/test"},{"name":"getColorFunction BETWEEN_OR_RIGHT_EQUAL","suites":["getColorFunction()"],"updatePoint":{"line":225,"column":45},"line":225,"code":"  it('getColorFunction BETWEEN_OR_RIGHT_EQUAL', () => {\n    const colorFunction = getColorFunction(\n      {\n        operator: COMPARATOR.BETWEEN_OR_RIGHT_EQUAL,\n        targetValueLeft: 50,\n        targetValueRight: 100,\n        colorScheme: '#FF0000',\n        column: 'count',\n      },\n      countValues,\n    );\n    expect(colorFunction(50)).toBeUndefined();\n    expect(colorFunction(100)).toEqual('#FF0000FF');\n  });","file":"utils/getColorFormatters.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-chart-controls/test"},{"name":"getColorFunction GREATER_THAN with target value undefined","suites":["getColorFunction()"],"updatePoint":{"line":240,"column":63},"line":240,"code":"  it('getColorFunction GREATER_THAN with target value undefined', () => {\n    const colorFunction = getColorFunction(\n      {\n        operator: COMPARATOR.GREATER_THAN,\n        targetValue: undefined,\n        colorScheme: '#FF0000',\n        column: 'count',\n      },\n      countValues,\n    );\n    expect(colorFunction(50)).toBeUndefined();\n    expect(colorFunction(100)).toBeUndefined();\n  });","file":"utils/getColorFormatters.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-chart-controls/test"},{"name":"getColorFunction BETWEEN with target value left undefined","suites":["getColorFunction()"],"updatePoint":{"line":254,"column":63},"line":254,"code":"  it('getColorFunction BETWEEN with target value left undefined', () => {\n    const colorFunction = getColorFunction(\n      {\n        operator: COMPARATOR.BETWEEN,\n        targetValueLeft: undefined,\n        targetValueRight: 100,\n        colorScheme: '#FF0000',\n        column: 'count',\n      },\n      countValues,\n    );\n    expect(colorFunction(50)).toBeUndefined();\n    expect(colorFunction(100)).toBeUndefined();\n  });","file":"utils/getColorFormatters.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-chart-controls/test"},{"name":"getColorFunction BETWEEN with target value right undefined","suites":["getColorFunction()"],"updatePoint":{"line":269,"column":64},"line":269,"code":"  it('getColorFunction BETWEEN with target value right undefined', () => {\n    const colorFunction = getColorFunction(\n      {\n        operator: COMPARATOR.BETWEEN,\n        targetValueLeft: 50,\n        targetValueRight: undefined,\n        colorScheme: '#FF0000',\n        column: 'count',\n      },\n      countValues,\n    );\n    expect(colorFunction(50)).toBeUndefined();\n    expect(colorFunction(100)).toBeUndefined();\n  });","file":"utils/getColorFormatters.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-chart-controls/test"},{"name":"getColorFunction unsupported operator","suites":["getColorFunction()"],"updatePoint":{"line":284,"column":43},"line":284,"code":"  it('getColorFunction unsupported operator', () => {\n    const colorFunction = getColorFunction(\n      {\n        // @ts-ignore\n        operator: 'unsupported operator',\n        targetValue: 50,\n        colorScheme: '#FF0000',\n        column: 'count',\n      },\n      countValues,\n    );\n    expect(colorFunction(50)).toBeUndefined();\n    expect(colorFunction(100)).toBeUndefined();\n  });","file":"utils/getColorFormatters.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-chart-controls/test"},{"name":"getColorFunction with operator None","suites":["getColorFunction()"],"updatePoint":{"line":299,"column":41},"line":299,"code":"  it('getColorFunction with operator None', () => {\n    const colorFunction = getColorFunction(\n      {\n        operator: COMPARATOR.NONE,\n        colorScheme: '#FF0000',\n        column: 'count',\n      },\n      countValues,\n    );\n    expect(colorFunction(20)).toEqual(undefined);\n    expect(colorFunction(50)).toEqual('#FF000000');\n    expect(colorFunction(75)).toEqual('#FF000080');\n    expect(colorFunction(100)).toEqual('#FF0000FF');\n    expect(colorFunction(120)).toEqual(undefined);\n  });","file":"utils/getColorFormatters.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-chart-controls/test"},{"name":"getColorFunction with operator undefined","suites":["getColorFunction()"],"updatePoint":{"line":315,"column":46},"line":315,"code":"  it('getColorFunction with operator undefined', () => {\n    const colorFunction = getColorFunction(\n      {\n        operator: undefined,\n        targetValue: 150,\n        colorScheme: '#FF0000',\n        column: 'count',\n      },\n      countValues,\n    );\n    expect(colorFunction(50)).toBeUndefined();\n    expect(colorFunction(100)).toBeUndefined();\n  });","file":"utils/getColorFormatters.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-chart-controls/test"},{"name":"getColorFunction with colorScheme undefined","suites":["getColorFunction()"],"updatePoint":{"line":329,"column":49},"line":329,"code":"  it('getColorFunction with colorScheme undefined', () => {\n    const colorFunction = getColorFunction(\n      {\n        operator: COMPARATOR.GREATER_THAN,\n        targetValue: 150,\n        colorScheme: undefined,\n        column: 'count',\n      },\n      countValues,\n    );\n    expect(colorFunction(50)).toBeUndefined();\n    expect(colorFunction(100)).toBeUndefined();\n  });","file":"utils/getColorFormatters.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-chart-controls/test"},{"name":"correct column config","suites":["getColorFormatters()"],"updatePoint":{"line":345,"column":27},"line":345,"code":"  it('correct column config', () => {\n    const columnConfig = [\n      {\n        operator: COMPARATOR.GREATER_THAN,\n        targetValue: 50,\n        colorScheme: '#FF0000',\n        column: 'count',\n      },\n      {\n        operator: COMPARATOR.LESS_THAN,\n        targetValue: 300,\n        colorScheme: '#FF0000',\n        column: 'sum',\n      },\n      {\n        operator: COMPARATOR.BETWEEN,\n        targetValueLeft: 75,\n        targetValueRight: 125,\n        colorScheme: '#FF0000',\n        column: 'count',\n      },\n      {\n        operator: COMPARATOR.GREATER_THAN,\n        targetValue: 150,\n        colorScheme: '#FF0000',\n        column: undefined,\n      },\n    ];\n    const colorFormatters = getColorFormatters(columnConfig, mockData);\n    expect(colorFormatters.length).toEqual(3);\n\n    expect(colorFormatters[0].column).toEqual('count');\n    expect(colorFormatters[0].getColorFromValue(100)).toEqual('#FF0000FF');\n\n    expect(colorFormatters[1].column).toEqual('sum');\n    expect(colorFormatters[1].getColorFromValue(200)).toEqual('#FF0000FF');\n    expect(colorFormatters[1].getColorFromValue(400)).toBeUndefined();\n\n    expect(colorFormatters[2].column).toEqual('count');\n    expect(colorFormatters[2].getColorFromValue(100)).toEqual('#FF000087');\n  });","file":"utils/getColorFormatters.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-chart-controls/test"},{"name":"undefined column config","suites":["getColorFormatters()"],"updatePoint":{"line":387,"column":29},"line":387,"code":"  it('undefined column config', () => {\n    const colorFormatters = getColorFormatters(undefined, mockData);\n    expect(colorFormatters.length).toEqual(0);\n  });","file":"utils/getColorFormatters.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-chart-controls/test"},{"name":"without standardizedFormData","suites":[],"updatePoint":{"line":34,"column":34},"line":34,"code":"test('without standardizedFormData', () => {\n  getStandardizedControls().setStandardizedControls({\n    datasource: '30__table',\n    viz_type: 'table',\n  });\n  expect(getStandardizedControls().controls).toEqual({\n    metrics: [],\n    columns: [],\n  });\n});","file":"utils/getStandardizedControls.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-chart-controls/test"},{"name":"getStandardizedControls","suites":[],"updatePoint":{"line":45,"column":29},"line":45,"code":"test('getStandardizedControls', () => {\n  expect(getStandardizedControls().controls).toEqual({\n    metrics: [],\n    columns: [],\n  });\n  getStandardizedControls().setStandardizedControls(formData);\n  expect(getStandardizedControls().controls).toEqual({\n    metrics: ['count(*)', 'sum(sales)'],\n    columns: ['gender', 'gender'],\n  });\n  expect(getStandardizedControls().shiftMetric()).toEqual('count(*)');\n  expect(getStandardizedControls().controls).toEqual({\n    metrics: ['sum(sales)'],\n    columns: ['gender', 'gender'],\n  });\n  expect(getStandardizedControls().popAllMetrics()).toEqual(['sum(sales)']);\n  expect(getStandardizedControls().controls).toEqual({\n    metrics: [],\n    columns: ['gender', 'gender'],\n  });\n  expect(getStandardizedControls().shiftColumn()).toEqual('gender');\n  expect(getStandardizedControls().controls).toEqual({\n    metrics: [],\n    columns: ['gender'],\n  });\n  expect(getStandardizedControls().popAllColumns()).toEqual(['gender']);\n  expect(getStandardizedControls().controls).toEqual({\n    metrics: [],\n    columns: [],\n  });\n\n  getStandardizedControls().setStandardizedControls(formData);\n  getStandardizedControls().clear();\n  expect(getStandardizedControls().controls).toEqual({\n    metrics: [],\n    columns: [],\n  });\n});","file":"utils/getStandardizedControls.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-chart-controls/test"},{"name":"get temporal columns from a Dataset","suites":[],"updatePoint":{"line":27,"column":41},"line":27,"code":"test('get temporal columns from a Dataset', () => {\n  expect(getTemporalColumns(TestDataset)).toEqual({\n    temporalColumns: [\n      {\n        advanced_data_type: undefined,\n        certification_details: null,\n        certified_by: null,\n        column_name: 'ds',\n        description: null,\n        expression: '',\n        filterable: true,\n        groupby: true,\n        id: 329,\n        is_certified: false,\n        is_dttm: true,\n        python_date_format: null,\n        type: 'TIMESTAMP WITHOUT TIME ZONE',\n        type_generic: 2,\n        verbose_name: null,\n        warning_markdown: null,\n      },\n    ],\n    defaultTemporalColumn: 'ds',\n  });\n});","file":"utils/getTemporalColumns.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-chart-controls/test"},{"name":"get temporal columns from a QueryResponse","suites":[],"updatePoint":{"line":53,"column":47},"line":53,"code":"test('get temporal columns from a QueryResponse', () => {\n  expect(getTemporalColumns(testQueryResponse)).toEqual({\n    temporalColumns: [\n      {\n        name: 'Column 2',\n        type: 'TIMESTAMP',\n        is_dttm: true,\n      },\n    ],\n    defaultTemporalColumn: 'Column 2',\n  });\n});","file":"utils/getTemporalColumns.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-chart-controls/test"},{"name":"get temporal columns from null","suites":[],"updatePoint":{"line":66,"column":36},"line":66,"code":"test('get temporal columns from null', () => {\n  expect(getTemporalColumns(null)).toEqual({\n    temporalColumns: [],\n    defaultTemporalColumn: undefined,\n  });\n});","file":"utils/getTemporalColumns.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-chart-controls/test"},{"name":"should accept empty Dataset or queryResponse","suites":[],"updatePoint":{"line":73,"column":50},"line":73,"code":"test('should accept empty Dataset or queryResponse', () => {\n  expect(\n    getTemporalColumns({\n      ...TestDataset,\n      ...{\n        columns: [],\n        main_dttm_col: undefined,\n      },\n    } as any as Dataset),\n  ).toEqual({\n    temporalColumns: [],\n    defaultTemporalColumn: undefined,\n  });\n\n  expect(\n    getTemporalColumns({\n      ...testQueryResponse,\n      ...{\n        columns: [],\n        results: { ...testQueryResults.results, ...{ columns: [] } },\n      },\n    }),\n  ).toEqual({\n    temporalColumns: [],\n    defaultTemporalColumn: undefined,\n  });\n});","file":"utils/getTemporalColumns.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-chart-controls/test"},{"name":"should determine temporal columns in a Dataset","suites":[],"updatePoint":{"line":101,"column":52},"line":101,"code":"test('should determine temporal columns in a Dataset', () => {\n  expect(isTemporalColumn('ds', TestDataset)).toBeTruthy();\n  expect(isTemporalColumn('num', TestDataset)).toBeFalsy();\n});","file":"utils/getTemporalColumns.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-chart-controls/test"},{"name":"is null when no options","suites":["mainMetric"],"updatePoint":{"line":22,"column":29},"line":22,"code":"  it('is null when no options', () => {\n    expect(mainMetric([])).toBeUndefined();\n    expect(mainMetric(null)).toBeUndefined();\n  });","file":"utils/mainMetric.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-chart-controls/test"},{"name":"prefers the \"count\" metric when first","suites":["mainMetric"],"updatePoint":{"line":26,"column":43},"line":26,"code":"  it('prefers the \"count\" metric when first', () => {\n    const metrics = [{ metric_name: 'count' }, { metric_name: 'foo' }];\n    expect(mainMetric(metrics)).toBe('count');\n  });","file":"utils/mainMetric.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-chart-controls/test"},{"name":"prefers the \"count\" metric when not first","suites":["mainMetric"],"updatePoint":{"line":30,"column":47},"line":30,"code":"  it('prefers the \"count\" metric when not first', () => {\n    const metrics = [{ metric_name: 'foo' }, { metric_name: 'count' }];\n    expect(mainMetric(metrics)).toBe('count');\n  });","file":"utils/mainMetric.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-chart-controls/test"},{"name":"selects the first metric when \"count\" is not an option","suites":["mainMetric"],"updatePoint":{"line":34,"column":60},"line":34,"code":"  it('selects the first metric when \"count\" is not an option', () => {\n    const metrics = [{ metric_name: 'foo' }, { metric_name: 'not_count' }];\n    expect(mainMetric(metrics)).toBe('foo');\n  });","file":"utils/mainMetric.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-chart-controls/test"},{"name":"formats an array of options","suites":["formatSelectOptions"],"updatePoint":{"line":22,"column":33},"line":22,"code":"  it('formats an array of options', () => {\n    expect(formatSelectOptions([1, 5, 10, 25, 50, 'unlimited'])).toEqual([\n      [1, '1'],\n      [5, '5'],\n      [10, '10'],\n      [25, '25'],\n      [50, '50'],\n      ['unlimited', 'unlimited'],\n    ]);\n  });","file":"utils/selectOptions.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-chart-controls/test"},{"name":"formats a mix of values and already formated options","suites":["formatSelectOptions"],"updatePoint":{"line":32,"column":58},"line":32,"code":"  it('formats a mix of values and already formated options', () => {\n    expect(\n      formatSelectOptions<number | string>([\n        [0, 'all'],\n        1,\n        5,\n        10,\n        25,\n        50,\n        'unlimited',\n      ]),\n    ).toEqual([\n      [0, 'all'],\n      [1, '1'],\n      [5, '5'],\n      [10, '10'],\n      [25, '25'],\n      [50, '50'],\n      ['unlimited', 'unlimited'],\n    ]);\n  });","file":"utils/selectOptions.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-chart-controls/test"},{"name":"generates select options from a range","suites":["formatSelectOptionsForRange"],"updatePoint":{"line":56,"column":43},"line":56,"code":"  it('generates select options from a range', () => {\n    expect(formatSelectOptionsForRange(1, 5)).toEqual([\n      [1, '1'],\n      [2, '2'],\n      [3, '3'],\n      [4, '4'],\n      [5, '5'],\n    ]);\n  });","file":"utils/selectOptions.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-chart-controls/test"},{"name":"creates a client without argument","suites":["ChartClient","new ChartClient(config)"],"updatePoint":{"line":55,"column":41},"line":55,"code":"    it('creates a client without argument', () => {\n      expect(chartClient).toBeInstanceOf(ChartClient);\n    });","file":"chart/clients/ChartClient.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"creates a client with specified config.client","suites":["ChartClient","new ChartClient(config)"],"updatePoint":{"line":58,"column":53},"line":58,"code":"    it('creates a client with specified config.client', () => {\n      const customClient = new SupersetClientClass();\n      chartClient = new ChartClient({ client: customClient });\n      expect(chartClient).toBeInstanceOf(ChartClient);\n      expect(chartClient.client).toBe(customClient);\n    });","file":"chart/clients/ChartClient.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"fetches formData if given only sliceId","suites":["ChartClient",".loadFormData({ sliceId, formData }, options)"],"updatePoint":{"line":68,"column":46},"line":68,"code":"    it('fetches formData if given only sliceId', () => {\n      fetchMock.get(\n        `glob:*/api/v1/form_data/?slice_id=${sliceId}`,\n        sankeyFormData,\n      );\n\n      return expect(chartClient.loadFormData({ sliceId })).resolves.toEqual(\n        sankeyFormData,\n      );\n    });","file":"chart/clients/ChartClient.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"fetches formData from sliceId and merges with specify formData if both fields are specified","suites":["ChartClient",".loadFormData({ sliceId, formData }, options)"],"updatePoint":{"line":78,"column":99},"line":78,"code":"    it('fetches formData from sliceId and merges with specify formData if both fields are specified', () => {\n      fetchMock.get(\n        `glob:*/api/v1/form_data/?slice_id=${sliceId}`,\n        sankeyFormData,\n      );\n\n      return expect(\n        chartClient.loadFormData({\n          sliceId,\n          formData: {\n            granularity: 'second',\n            viz_type: 'bar',\n          },\n        }),\n      ).resolves.toEqual({\n        ...sankeyFormData,\n        granularity: 'second',\n        viz_type: 'bar',\n      });\n    });","file":"chart/clients/ChartClient.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"returns promise of formData if only formData was given","suites":["ChartClient",".loadFormData({ sliceId, formData }, options)"],"updatePoint":{"line":98,"column":62},"line":98,"code":"    it('returns promise of formData if only formData was given', () =>\n      expect(\n        chartClient.loadFormData({\n          formData: {\n            datasource: '1__table',\n            granularity: 'minute',\n            viz_type: 'line',\n          },\n        }),\n      ).resolves.toEqual({\n        datasource: '1__table',\n        granularity: 'minute',\n        viz_type: 'line',\n      }));","file":"chart/clients/ChartClient.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"rejects if none of sliceId or formData is specified","suites":["ChartClient",".loadFormData({ sliceId, formData }, options)"],"updatePoint":{"line":112,"column":59},"line":112,"code":"    it('rejects if none of sliceId or formData is specified', () =>\n      expect(\n        chartClient.loadFormData({} as SliceIdAndOrFormData),\n      ).rejects.toEqual(\n        new Error('At least one of sliceId or formData must be specified'),\n      ));","file":"chart/clients/ChartClient.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"returns a promise of query data for known chart type","suites":["ChartClient",".loadQueryData(formData, options)"],"updatePoint":{"line":121,"column":60},"line":121,"code":"    it('returns a promise of query data for known chart type', () => {\n      getChartMetadataRegistry().registerValue(\n        'word_cloud',\n        new ChartMetadata({ name: 'Word Cloud', thumbnail: '' }),\n      );\n\n      getChartBuildQueryRegistry().registerValue(\n        'word_cloud',\n        (formData: QueryFormData) => buildQueryContext(formData),\n      );\n      fetchMock.post('glob:*/api/v1/chart/data', [\n        {\n          field1: 'abc',\n          field2: 'def',\n        },\n      ]);\n\n      return expect(\n        chartClient.loadQueryData({\n          granularity: 'minute',\n          viz_type: 'word_cloud',\n          datasource: '1__table',\n        }),\n      ).resolves.toEqual([\n        {\n          field1: 'abc',\n          field2: 'def',\n        },\n      ]);\n    });","file":"chart/clients/ChartClient.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"returns a promise that rejects for unknown chart type","suites":["ChartClient",".loadQueryData(formData, options)"],"updatePoint":{"line":151,"column":61},"line":151,"code":"    it('returns a promise that rejects for unknown chart type', () =>\n      expect(\n        chartClient.loadQueryData({\n          granularity: 'minute',\n          viz_type: 'rainbow_3d_pie',\n          datasource: '1__table',\n        }),\n      ).rejects.toEqual(new Error('Unknown chart type: rainbow_3d_pie')));","file":"chart/clients/ChartClient.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"fetches data from the legacy API if ChartMetadata has useLegacyApi=true,","suites":["ChartClient",".loadQueryData(formData, options)"],"updatePoint":{"line":160,"column":80},"line":160,"code":"    it('fetches data from the legacy API if ChartMetadata has useLegacyApi=true,', () => {\n      // note legacy charts do not register a buildQuery function in the registry\n      getChartMetadataRegistry().registerValue(\n        'word_cloud_legacy',\n        new ChartMetadata({\n          name: 'Legacy Word Cloud',\n          thumbnail: '.png',\n          useLegacyApi: true,\n        }),\n      );\n\n      fetchMock.post('glob:*/api/v1/chart/data', () =>\n        Promise.reject(new Error('Unexpected all to v1 API')),\n      );\n\n      fetchMock.post('glob:*/superset/explore_json/', {\n        field1: 'abc',\n        field2: 'def',\n      });\n\n      return expect(\n        chartClient.loadQueryData({\n          granularity: 'minute',\n          viz_type: 'word_cloud_legacy',\n          datasource: '1__table',\n        }),\n      ).resolves.toEqual([\n        {\n          field1: 'abc',\n          field2: 'def',\n        },\n      ]);\n    });","file":"chart/clients/ChartClient.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"fetches datasource","suites":["ChartClient",".loadDatasource(datasourceKey, options)"],"updatePoint":{"line":196,"column":26},"line":196,"code":"    it('fetches datasource', () => {\n      fetchMock.get(\n        'glob:*/superset/fetch_datasource_metadata?datasourceKey=1__table',\n        {\n          field1: 'abc',\n          field2: 'def',\n        },\n      );\n\n      return expect(chartClient.loadDatasource('1__table')).resolves.toEqual({\n        field1: 'abc',\n        field2: 'def',\n      });\n    });","file":"chart/clients/ChartClient.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"returns an empty object if the annotation layer does not require query","suites":["ChartClient",".loadAnnotation(annotationLayer)"],"updatePoint":{"line":213,"column":78},"line":213,"code":"    it('returns an empty object if the annotation layer does not require query', () =>\n      expect(\n        chartClient.loadAnnotation({\n          name: 'my-annotation',\n        }),\n      ).resolves.toEqual({}));","file":"chart/clients/ChartClient.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"otherwise returns a rejected promise because it is not implemented yet","suites":["ChartClient",".loadAnnotation(annotationLayer)"],"updatePoint":{"line":219,"column":78},"line":219,"code":"    it('otherwise returns a rejected promise because it is not implemented yet', () =>\n      expect(\n        chartClient.loadAnnotation({\n          name: 'my-annotation',\n          sourceType: 'abc',\n        }),\n      ).rejects.toEqual(new Error('This feature is not implemented yet.')));","file":"chart/clients/ChartClient.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"loads multiple annotation layers and combine results","suites":["ChartClient",".loadAnnotations(annotationLayers)"],"updatePoint":{"line":229,"column":60},"line":229,"code":"    it('loads multiple annotation layers and combine results', () =>\n      expect(\n        chartClient.loadAnnotations([\n          {\n            name: 'anno1',\n          },\n          {\n            name: 'anno2',\n          },\n          {\n            name: 'anno3',\n          },\n        ]),\n      ).resolves.toEqual({\n        anno1: {},\n        anno2: {},\n        anno3: {},\n      }));","file":"chart/clients/ChartClient.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"returns an empty object if input is not an array","suites":["ChartClient",".loadAnnotations(annotationLayers)"],"updatePoint":{"line":247,"column":56},"line":247,"code":"    it('returns an empty object if input is not an array', () =>\n      expect(chartClient.loadAnnotations()).resolves.toEqual({}));","file":"chart/clients/ChartClient.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"returns an empty object if input is an empty array","suites":["ChartClient",".loadAnnotations(annotationLayers)"],"updatePoint":{"line":249,"column":58},"line":249,"code":"    it('returns an empty object if input is an empty array', () =>\n      expect(chartClient.loadAnnotations()).resolves.toEqual({}));","file":"chart/clients/ChartClient.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"loadAllDataNecessaryForAChart","suites":["ChartClient",".loadChartData({ sliceId, formData })"],"updatePoint":{"line":255,"column":37},"line":255,"code":"    it('loadAllDataNecessaryForAChart', () => {\n      fetchMock.get(`glob:*/api/v1/form_data/?slice_id=${sliceId}`, {\n        granularity: 'minute',\n        viz_type: 'line',\n        datasource: '1__table',\n        color: 'living-coral',\n      });\n\n      fetchMock.get(\n        'glob:*/superset/fetch_datasource_metadata?datasourceKey=1__table',\n        {\n          name: 'transactions',\n          schema: 'staging',\n        },\n      );\n\n      fetchMock.post('glob:*/api/v1/chart/data', {\n        lorem: 'ipsum',\n        dolor: 'sit',\n        amet: true,\n      });\n\n      getChartMetadataRegistry().registerValue(\n        'line',\n        new ChartMetadata({ name: 'Line', thumbnail: '.gif' }),\n      );\n\n      getChartBuildQueryRegistry().registerValue(\n        'line',\n        (formData: QueryFormData) => buildQueryContext(formData),\n      );\n\n      return expect(\n        chartClient.loadChartData({\n          sliceId,\n        }),\n      ).resolves.toEqual({\n        annotationData: {},\n        datasource: {\n          name: 'transactions',\n          schema: 'staging',\n        },\n        formData: {\n          granularity: 'minute',\n          viz_type: 'line',\n          datasource: '1__table',\n          color: 'living-coral',\n        },\n        queriesData: [\n          {\n            lorem: 'ipsum',\n            dolor: 'sit',\n            amet: true,\n          },\n        ],\n      });\n    });","file":"chart/clients/ChartClient.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"exports modules","suites":["index"],"updatePoint":{"line":35,"column":21},"line":35,"code":"  it('exports modules', () => {\n    [\n      ChartClient,\n      ChartMetadata,\n      ChartPlugin,\n      ChartProps,\n      createLoadableRenderer,\n      getChartBuildQueryRegistry,\n      getChartComponentRegistry,\n      getChartControlPanelRegistry,\n      getChartMetadataRegistry,\n      getChartTransformPropsRegistry,\n      reactify,\n    ].forEach(x => expect(x).toBeDefined());\n  });","file":"chart/index.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"exists","suites":["ChartMetadata"],"updatePoint":{"line":23,"column":12},"line":23,"code":"  it('exists', () => {\n    expect(ChartMetadata).toBeDefined();\n  });","file":"chart/models/ChartMetadata.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"creates new metadata instance","suites":["ChartMetadata","new ChartMetadata({})"],"updatePoint":{"line":27,"column":37},"line":27,"code":"    it('creates new metadata instance', () => {\n      const metadata = new ChartMetadata({\n        name: 'test chart',\n        credits: [],\n        description: 'some kind of chart',\n        thumbnail: 'test.png',\n      });\n      expect(metadata).toBeInstanceOf(ChartMetadata);\n    });","file":"chart/models/ChartMetadata.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"returns true if can","suites":["ChartMetadata",".canBeAnnotationType(type)"],"updatePoint":{"line":45,"column":27},"line":45,"code":"    it('returns true if can', () => {\n      expect(metadata.canBeAnnotationType('event')).toBeTruthy();\n    });","file":"chart/models/ChartMetadata.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"returns false otherwise","suites":["ChartMetadata",".canBeAnnotationType(type)"],"updatePoint":{"line":48,"column":31},"line":48,"code":"    it('returns false otherwise', () => {\n      expect(metadata.canBeAnnotationType('invalid-type')).toBeFalsy();\n    });","file":"chart/models/ChartMetadata.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"returns a new instance","suites":["ChartMetadata",".clone()"],"updatePoint":{"line":62,"column":30},"line":62,"code":"    it('returns a new instance', () => {\n      expect(metadata).not.toBe(clone);\n    });","file":"chart/models/ChartMetadata.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"returns a new instance with same field values","suites":["ChartMetadata",".clone()"],"updatePoint":{"line":65,"column":53},"line":65,"code":"    it('returns a new instance with same field values', () => {\n      expect(metadata.name).toEqual(clone.name);\n      expect(metadata.credits).toEqual(clone.credits);\n      expect(metadata.description).toEqual(clone.description);\n      expect(metadata.canBeAnnotationTypes).toEqual(clone.canBeAnnotationTypes);\n      expect(metadata.thumbnail).toEqual(clone.thumbnail);\n    });","file":"chart/models/ChartMetadata.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"exists","suites":["ChartProps"],"updatePoint":{"line":35,"column":12},"line":35,"code":"  it('exists', () => {\n    expect(ChartProps).toBeDefined();\n  });","file":"chart/models/ChartProps.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"returns new instance","suites":["ChartProps","new ChartProps({})"],"updatePoint":{"line":39,"column":28},"line":39,"code":"    it('returns new instance', () => {\n      const props = new ChartProps({\n        width: 800,\n        height: 600,\n        formData: RAW_FORM_DATA,\n        queriesData: QUERIES_DATA,\n        theme: supersetTheme,\n      });\n      expect(props).toBeInstanceOf(ChartProps);\n    });","file":"chart/models/ChartProps.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"processes formData and datasource to convert field names to camelCase","suites":["ChartProps","new ChartProps({})"],"updatePoint":{"line":49,"column":77},"line":49,"code":"    it('processes formData and datasource to convert field names to camelCase', () => {\n      const props = new ChartProps({\n        width: 800,\n        height: 600,\n        datasource: RAW_DATASOURCE,\n        formData: RAW_FORM_DATA,\n        queriesData: QUERIES_DATA,\n        theme: supersetTheme,\n      });\n      expect(props.formData.someField as number).toEqual(1);\n      expect(props.datasource.columnFormats).toEqual(\n        RAW_DATASOURCE.column_formats,\n      );\n      expect(props.rawFormData).toEqual(RAW_FORM_DATA);\n      expect(props.rawDatasource).toEqual(RAW_DATASOURCE);\n    });","file":"chart/models/ChartProps.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"returns a selector function","suites":["ChartProps","ChartProps.createSelector()"],"updatePoint":{"line":68,"column":35},"line":68,"code":"    it('returns a selector function', () => {\n      expect(selector).toBeInstanceOf(Function);\n    });","file":"chart/models/ChartProps.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"selector returns previous chartProps if all input fields do not change","suites":["ChartProps","ChartProps.createSelector()"],"updatePoint":{"line":71,"column":78},"line":71,"code":"    it('selector returns previous chartProps if all input fields do not change', () => {\n      const props1 = selector({\n        width: 800,\n        height: 600,\n        datasource: RAW_DATASOURCE,\n        formData: RAW_FORM_DATA,\n        queriesData: QUERIES_DATA,\n        behaviors: BEHAVIORS,\n        isRefreshing: false,\n        theme: supersetTheme,\n      });\n      const props2 = selector({\n        width: 800,\n        height: 600,\n        datasource: RAW_DATASOURCE,\n        formData: RAW_FORM_DATA,\n        queriesData: QUERIES_DATA,\n        behaviors: BEHAVIORS,\n        isRefreshing: false,\n        theme: supersetTheme,\n      });\n      expect(props1).toBe(props2);\n    });","file":"chart/models/ChartProps.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"selector returns a new chartProps if the 13th field changes","suites":["ChartProps","ChartProps.createSelector()"],"updatePoint":{"line":94,"column":67},"line":94,"code":"    it('selector returns a new chartProps if the 13th field changes', () => {\n      /** this test is here to test for selectors that exceed 12 arguments (\n       * isRefreshing is the 13th argument, which is missing TS declarations).\n       * See: https://github.com/reduxjs/reselect/issues/378\n       */\n\n      const props1 = selector({\n        width: 800,\n        height: 600,\n        datasource: RAW_DATASOURCE,\n        formData: RAW_FORM_DATA,\n        queriesData: QUERIES_DATA,\n        behaviors: BEHAVIORS,\n        isRefreshing: false,\n        theme: supersetTheme,\n      });\n      const props2 = selector({\n        width: 800,\n        height: 600,\n        datasource: RAW_DATASOURCE,\n        formData: RAW_FORM_DATA,\n        queriesData: QUERIES_DATA,\n        behaviors: BEHAVIORS,\n        isRefreshing: true,\n        theme: supersetTheme,\n      });\n      expect(props1).not.toBe(props2);\n    });","file":"chart/models/ChartProps.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"selector returns a new chartProps if some input fields change","suites":["ChartProps","ChartProps.createSelector()"],"updatePoint":{"line":122,"column":69},"line":122,"code":"    it('selector returns a new chartProps if some input fields change', () => {\n      const props1 = selector({\n        width: 800,\n        height: 600,\n        datasource: RAW_DATASOURCE,\n        formData: RAW_FORM_DATA,\n        queriesData: QUERIES_DATA,\n        theme: supersetTheme,\n      });\n      const props2 = selector({\n        width: 800,\n        height: 600,\n        datasource: RAW_DATASOURCE,\n        formData: { new_field: 3 },\n        queriesData: QUERIES_DATA,\n        theme: supersetTheme,\n      });\n      const props3 = selector({\n        width: 800,\n        height: 600,\n        datasource: RAW_DATASOURCE,\n        formData: RAW_FORM_DATA,\n        queriesData: QUERIES_DATA,\n        theme: supersetTheme,\n      });\n      expect(props1).not.toBe(props2);\n      expect(props1).not.toBe(props3);\n    });","file":"chart/models/ChartProps.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"The class constructor cannot be accessed directly","suites":["CategoricalColorNamespace"],"updatePoint":{"line":50,"column":55},"line":50,"code":"  it('The class constructor cannot be accessed directly', () => {\n    expect(typeof CategoricalColorNamespace).not.toBe('Function');\n  });","file":"color/CategoricalColorNameSpace.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"returns default namespace if name is not specified","suites":["CategoricalColorNamespace","static getNamespace()"],"updatePoint":{"line":54,"column":58},"line":54,"code":"    it('returns default namespace if name is not specified', () => {\n      const namespace = getNamespace();\n      expect(namespace !== undefined).toBe(true);\n      expect(namespace.name).toBe(DEFAULT_NAMESPACE);\n    });","file":"color/CategoricalColorNameSpace.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"returns namespace with specified name","suites":["CategoricalColorNamespace","static getNamespace()"],"updatePoint":{"line":59,"column":45},"line":59,"code":"    it('returns namespace with specified name', () => {\n      const namespace = getNamespace('myNamespace');\n      expect(namespace !== undefined).toBe(true);\n      expect(namespace.name).toBe('myNamespace');\n    });","file":"color/CategoricalColorNameSpace.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"returns existing instance if the name already exists","suites":["CategoricalColorNamespace","static getNamespace()"],"updatePoint":{"line":64,"column":60},"line":64,"code":"    it('returns existing instance if the name already exists', () => {\n      const ns1 = getNamespace('myNamespace');\n      const ns2 = getNamespace('myNamespace');\n      expect(ns1).toBe(ns2);\n      const ns3 = getNamespace();\n      const ns4 = getNamespace();\n      expect(ns3).toBe(ns4);\n    });","file":"color/CategoricalColorNameSpace.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"returns a CategoricalColorScale from given scheme name","suites":["CategoricalColorNamespace",".getScale()"],"updatePoint":{"line":74,"column":62},"line":74,"code":"    it('returns a CategoricalColorScale from given scheme name', () => {\n      const namespace = getNamespace('test-get-scale1');\n      const scale = namespace.getScale('testColors');\n      expect(scale).toBeDefined();\n      expect(scale.getColor('dog')).toBeDefined();\n    });","file":"color/CategoricalColorNameSpace.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"returns a scale when a schemeId is not specified and there is no default key","suites":["CategoricalColorNamespace",".getScale()"],"updatePoint":{"line":80,"column":84},"line":80,"code":"    it('returns a scale when a schemeId is not specified and there is no default key', () => {\n      getCategoricalSchemeRegistry().clearDefaultKey();\n      const namespace = getNamespace('new-space');\n      const scale = namespace.getScale();\n      expect(scale).toBeDefined();\n      getCategoricalSchemeRegistry().setDefaultKey('testColors');\n    });","file":"color/CategoricalColorNameSpace.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"overwrites color for all CategoricalColorScales in this namespace","suites":["CategoricalColorNamespace",".setColor()"],"updatePoint":{"line":89,"column":73},"line":89,"code":"    it('overwrites color for all CategoricalColorScales in this namespace', () => {\n      const namespace = getNamespace('test-set-scale1');\n      namespace.setColor('dog', 'black');\n      const scale = namespace.getScale('testColors');\n      expect(scale.getColor('dog')).toBe('black');\n      expect(scale.getColor('boy')).not.toBe('black');\n    });","file":"color/CategoricalColorNameSpace.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"can override forcedColors in each scale","suites":["CategoricalColorNamespace",".setColor()"],"updatePoint":{"line":96,"column":47},"line":96,"code":"    it('can override forcedColors in each scale', () => {\n      const namespace = getNamespace('test-set-scale2');\n      namespace.setColor('dog', 'black');\n      const scale = namespace.getScale('testColors');\n      scale.setColor('dog', 'pink');\n      expect(scale.getColor('dog')).toBe('black');\n      expect(scale.getColor('boy')).not.toBe('black');\n    });","file":"color/CategoricalColorNameSpace.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"does not affect scales in other namespaces","suites":["CategoricalColorNamespace",".setColor()"],"updatePoint":{"line":104,"column":50},"line":104,"code":"    it('does not affect scales in other namespaces', () => {\n      const ns1 = getNamespace('test-set-scale3.1');\n      ns1.setColor('dog', 'black');\n      const scale1 = ns1.getScale('testColors');\n      const ns2 = getNamespace('test-set-scale3.2');\n      const scale2 = ns2.getScale('testColors');\n      expect(scale1.getColor('dog')).toBe('black');\n      expect(scale2.getColor('dog')).not.toBe('black');\n    });","file":"color/CategoricalColorNameSpace.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"returns the namespace instance","suites":["CategoricalColorNamespace",".setColor()"],"updatePoint":{"line":113,"column":38},"line":113,"code":"    it('returns the namespace instance', () => {\n      const ns1 = getNamespace('test-set-scale3.1');\n      const ns2 = ns1.setColor('dog', 'black');\n      expect(ns1).toBe(ns2);\n    });","file":"color/CategoricalColorNameSpace.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should reset colors","suites":["CategoricalColorNamespace",".setColor()"],"updatePoint":{"line":118,"column":27},"line":118,"code":"    it('should reset colors', () => {\n      const ns1 = getNamespace('test-set-scale3.1');\n      ns1.setColor('dog', 'black');\n      ns1.resetColors();\n      expect(ns1.forcedItems).toMatchObject({});\n    });","file":"color/CategoricalColorNameSpace.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"getScale() returns a CategoricalColorScale with default scheme in default namespace","suites":["CategoricalColorNamespace","static getScale()"],"updatePoint":{"line":126,"column":91},"line":126,"code":"    it('getScale() returns a CategoricalColorScale with default scheme in default namespace', () => {\n      const scale = getScale();\n      expect(scale).toBeDefined();\n      const scale2 = getNamespace().getScale();\n      expect(scale2).toBeDefined();\n    });","file":"color/CategoricalColorNameSpace.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"getScale(scheme) returns a CategoricalColorScale with specified scheme in default namespace","suites":["CategoricalColorNamespace","static getScale()"],"updatePoint":{"line":132,"column":99},"line":132,"code":"    it('getScale(scheme) returns a CategoricalColorScale with specified scheme in default namespace', () => {\n      const scale = getNamespace().getScale('testColors');\n      expect(scale).toBeDefined();\n    });","file":"color/CategoricalColorNameSpace.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"getScale(scheme, namespace) returns a CategoricalColorScale with specified scheme in specified namespace","suites":["CategoricalColorNamespace","static getScale()"],"updatePoint":{"line":136,"column":112},"line":136,"code":"    it('getScale(scheme, namespace) returns a CategoricalColorScale with specified scheme in specified namespace', () => {\n      const scale = getNamespace('test-getScale').getScale('testColors');\n      expect(scale).toBeDefined();\n    });","file":"color/CategoricalColorNameSpace.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"getColor(value) returns a color from default scheme in default namespace","suites":["CategoricalColorNamespace","static getColor()"],"updatePoint":{"line":142,"column":80},"line":142,"code":"    it('getColor(value) returns a color from default scheme in default namespace', () => {\n      const value = 'dog';\n      const color = getColor(value);\n      const color2 = getNamespace().getScale().getColor(value);\n      expect(color).toBe(color2);\n    });","file":"color/CategoricalColorNameSpace.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"getColor(value, scheme) returns a color from specified scheme in default namespace","suites":["CategoricalColorNamespace","static getColor()"],"updatePoint":{"line":148,"column":90},"line":148,"code":"    it('getColor(value, scheme) returns a color from specified scheme in default namespace', () => {\n      const value = 'dog';\n      const scheme = 'testColors';\n      const color = getColor(value, scheme);\n      const color2 = getNamespace().getScale(scheme).getColor(value);\n      expect(color).toBe(color2);\n    });","file":"color/CategoricalColorNameSpace.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"getColor(value, scheme, namespace) returns a color from specified scheme in specified namespace","suites":["CategoricalColorNamespace","static getColor()"],"updatePoint":{"line":155,"column":103},"line":155,"code":"    it('getColor(value, scheme, namespace) returns a color from specified scheme in specified namespace', () => {\n      const value = 'dog';\n      const scheme = 'testColors';\n      const namespace = 'test-getColor';\n      const color = getColor(value, scheme, namespace);\n      const color2 = getNamespace(namespace).getScale(scheme).getColor(value);\n      expect(color).toBe(color2);\n    });","file":"color/CategoricalColorNameSpace.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"exists","suites":["CategoricalColorScale"],"updatePoint":{"line":28,"column":12},"line":28,"code":"  it('exists', () => {\n    expect(CategoricalColorScale !== undefined).toBe(true);\n  });","file":"color/CategoricalColorScale.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"can create new scale when parentForcedColors is not given","suites":["CategoricalColorScale","new CategoricalColorScale(colors, parentForcedColors)"],"updatePoint":{"line":33,"column":65},"line":33,"code":"    it('can create new scale when parentForcedColors is not given', () => {\n      const scale = new CategoricalColorScale(['blue', 'red', 'green']);\n      expect(scale).toBeInstanceOf(CategoricalColorScale);\n    });","file":"color/CategoricalColorScale.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"can create new scale when parentForcedColors is given","suites":["CategoricalColorScale","new CategoricalColorScale(colors, parentForcedColors)"],"updatePoint":{"line":37,"column":61},"line":37,"code":"    it('can create new scale when parentForcedColors is given', () => {\n      const parentForcedColors = {};\n      const scale = new CategoricalColorScale(\n        ['blue', 'red', 'green'],\n        parentForcedColors,\n      );\n      expect(scale).toBeInstanceOf(CategoricalColorScale);\n      expect(scale.parentForcedColors).toBe(parentForcedColors);\n    });","file":"color/CategoricalColorScale.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"can refer to colors based on their index","suites":["CategoricalColorScale","new CategoricalColorScale(colors, parentForcedColors)"],"updatePoint":{"line":47,"column":48},"line":47,"code":"    it('can refer to colors based on their index', () => {\n      const parentForcedColors = { pig: 1, horse: 5 };\n      const scale = new CategoricalColorScale(\n        ['blue', 'red', 'green'],\n        parentForcedColors,\n      );\n      expect(scale.getColor('pig')).toEqual('red');\n      expect(parentForcedColors.pig).toEqual('red');\n\n      // can loop around the scale\n      expect(scale.getColor('horse')).toEqual('green');\n      expect(parentForcedColors.horse).toEqual('green');\n    });","file":"color/CategoricalColorScale.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"returns same color for same value","suites":["CategoricalColorScale",".getColor(value)"],"updatePoint":{"line":63,"column":41},"line":63,"code":"    it('returns same color for same value', () => {\n      const scale = new CategoricalColorScale(['blue', 'red', 'green']);\n      const c1 = scale.getColor('pig');\n      const c2 = scale.getColor('horse');\n      const c3 = scale.getColor('pig');\n      scale.getColor('cow');\n      const c5 = scale.getColor('horse');\n\n      expect(c1).toBe(c3);\n      expect(c2).toBe(c5);\n    });","file":"color/CategoricalColorScale.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"returns different color for consecutive items","suites":["CategoricalColorScale",".getColor(value)"],"updatePoint":{"line":74,"column":53},"line":74,"code":"    it('returns different color for consecutive items', () => {\n      const scale = new CategoricalColorScale(['blue', 'red', 'green']);\n      const c1 = scale.getColor('pig');\n      const c2 = scale.getColor('horse');\n      const c3 = scale.getColor('cat');\n\n      expect(c1).not.toBe(c2);\n      expect(c2).not.toBe(c3);\n      expect(c3).not.toBe(c1);\n    });","file":"color/CategoricalColorScale.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"recycles colors when number of items exceed available colors","suites":["CategoricalColorScale",".getColor(value)"],"updatePoint":{"line":84,"column":68},"line":84,"code":"    it('recycles colors when number of items exceed available colors', () => {\n      window.featureFlags = {\n        [FeatureFlag.USE_ANALAGOUS_COLORS]: false,\n      };\n      const colorSet: { [key: string]: number } = {};\n      const scale = new CategoricalColorScale(['blue', 'red', 'green']);\n      const colors = [\n        scale.getColor('pig'),\n        scale.getColor('horse'),\n        scale.getColor('cat'),\n        scale.getColor('cow'),\n        scale.getColor('donkey'),\n        scale.getColor('goat'),\n      ];\n      colors.forEach(color => {\n        if (colorSet[color]) {\n          colorSet[color] += 1;\n        } else {\n          colorSet[color] = 1;\n        }\n      });\n      expect(Object.keys(colorSet)).toHaveLength(3);\n      ['blue', 'red', 'green'].forEach(color => {\n        expect(colorSet[color]).toBe(2);\n      });\n    });","file":"color/CategoricalColorScale.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"get analogous colors when number of items exceed available colors","suites":["CategoricalColorScale",".getColor(value)"],"updatePoint":{"line":110,"column":73},"line":110,"code":"    it('get analogous colors when number of items exceed available colors', () => {\n      window.featureFlags = {\n        [FeatureFlag.USE_ANALAGOUS_COLORS]: true,\n      };\n      const scale = new CategoricalColorScale(['blue', 'red', 'green']);\n      scale.getColor('pig');\n      scale.getColor('horse');\n      scale.getColor('cat');\n      scale.getColor('cow');\n      scale.getColor('donkey');\n      scale.getColor('goat');\n      expect(scale.range()).toHaveLength(6);\n    });","file":"color/CategoricalColorScale.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should remove shared color from range if avoid colors collision enabled","suites":["CategoricalColorScale",".getColor(value)"],"updatePoint":{"line":124,"column":79},"line":124,"code":"    it('should remove shared color from range if avoid colors collision enabled', () => {\n      window.featureFlags = {\n        [FeatureFlag.AVOID_COLORS_COLLISION]: true,\n      };\n      const scale = new CategoricalColorScale(['blue', 'red', 'green']);\n      const color1 = scale.getColor('a', 1);\n      expect(scale.range()).toHaveLength(3);\n      const color2 = scale.getColor('a', 2);\n      expect(color1).toBe(color2);\n      scale.getColor('b', 2);\n      expect(scale.range()).toHaveLength(2);\n      scale.getColor('c', 2);\n      expect(scale.range()).toHaveLength(1);\n    });","file":"color/CategoricalColorScale.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"overrides default color","suites":["CategoricalColorScale",".setColor(value, forcedColor)"],"updatePoint":{"line":143,"column":31},"line":143,"code":"    it('overrides default color', () => {\n      const scale = new CategoricalColorScale(['blue', 'red', 'green']);\n      scale.setColor('pig', 'pink');\n      expect(scale.getColor('pig')).toBe('pink');\n    });","file":"color/CategoricalColorScale.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"does not override parentForcedColors","suites":["CategoricalColorScale",".setColor(value, forcedColor)"],"updatePoint":{"line":148,"column":44},"line":148,"code":"    it('does not override parentForcedColors', () => {\n      const scale1 = new CategoricalColorScale(['blue', 'red', 'green']);\n      scale1.setColor('pig', 'black');\n      const scale2 = new CategoricalColorScale(\n        ['blue', 'red', 'green'],\n        scale1.forcedColors,\n      );\n      scale2.setColor('pig', 'pink');\n      expect(scale1.getColor('pig')).toBe('black');\n      expect(scale2.getColor('pig')).toBe('black');\n    });","file":"color/CategoricalColorScale.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"returns the scale","suites":["CategoricalColorScale",".setColor(value, forcedColor)"],"updatePoint":{"line":159,"column":25},"line":159,"code":"    it('returns the scale', () => {\n      const scale = new CategoricalColorScale(['blue', 'red', 'green']);\n      const output = scale.setColor('pig', 'pink');\n      expect(scale).toBe(output);\n    });","file":"color/CategoricalColorScale.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"returns correct mapping and parentForcedColors and forcedColors are specified","suites":["CategoricalColorScale",".getColorMap()"],"updatePoint":{"line":166,"column":85},"line":166,"code":"    it('returns correct mapping and parentForcedColors and forcedColors are specified', () => {\n      const scale1 = new CategoricalColorScale(['blue', 'red', 'green']);\n      scale1.setColor('cow', 'black');\n      const scale2 = new CategoricalColorScale(\n        ['blue', 'red', 'green'],\n        scale1.forcedColors,\n      );\n      scale2.setColor('pig', 'pink');\n      scale2.getColor('cow');\n      scale2.getColor('pig');\n      scale2.getColor('horse');\n      expect(scale2.getColorMap()).toEqual({\n        cow: 'black',\n        pig: 'pink',\n        horse: 'green',\n      });\n    });","file":"color/CategoricalColorScale.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"returns a copy","suites":["CategoricalColorScale",".copy()"],"updatePoint":{"line":186,"column":22},"line":186,"code":"    it('returns a copy', () => {\n      const scale = new CategoricalColorScale(['blue', 'red', 'green']);\n      const copy = scale.copy();\n      expect(copy).not.toBe(scale);\n      expect(copy('cat')).toEqual(scale('cat'));\n      expect(copy.domain()).toEqual(scale.domain());\n      expect(copy.range()).toEqual(scale.range());\n      expect(copy.unknown()).toEqual(scale.unknown());\n    });","file":"color/CategoricalColorScale.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"when called without argument, returns domain","suites":["CategoricalColorScale",".domain()"],"updatePoint":{"line":197,"column":52},"line":197,"code":"    it('when called without argument, returns domain', () => {\n      const scale = new CategoricalColorScale(['blue', 'red', 'green']);\n      scale.getColor('pig');\n      expect(scale.domain()).toEqual(['pig']);\n    });","file":"color/CategoricalColorScale.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"when called with argument, sets domain","suites":["CategoricalColorScale",".domain()"],"updatePoint":{"line":202,"column":46},"line":202,"code":"    it('when called with argument, sets domain', () => {\n      const scale = new CategoricalColorScale(['blue', 'red', 'green']);\n      scale.domain(['dog', 'pig', 'cat']);\n      expect(scale('pig')).toEqual('red');\n    });","file":"color/CategoricalColorScale.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"when called without argument, returns range","suites":["CategoricalColorScale",".range()"],"updatePoint":{"line":209,"column":51},"line":209,"code":"    it('when called without argument, returns range', () => {\n      const scale = new CategoricalColorScale(['blue', 'red', 'green']);\n      expect(scale.range()).toEqual(['blue', 'red', 'green']);\n    });","file":"color/CategoricalColorScale.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"when called with argument, sets range","suites":["CategoricalColorScale",".range()"],"updatePoint":{"line":213,"column":45},"line":213,"code":"    it('when called with argument, sets range', () => {\n      const scale = new CategoricalColorScale(['blue', 'red', 'green']);\n      scale.range(['pink', 'gray', 'yellow']);\n      expect(scale.range()).toEqual(['pink', 'gray', 'yellow']);\n    });","file":"color/CategoricalColorScale.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"when called without argument, returns output for unknown value","suites":["CategoricalColorScale",".unknown()"],"updatePoint":{"line":220,"column":70},"line":220,"code":"    it('when called without argument, returns output for unknown value', () => {\n      const scale = new CategoricalColorScale(['blue', 'red', 'green']);\n      scale.unknown('#666');\n      expect(scale.unknown()).toEqual('#666');\n    });","file":"color/CategoricalColorScale.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"when called with argument, sets output for unknown value","suites":["CategoricalColorScale",".unknown()"],"updatePoint":{"line":225,"column":64},"line":225,"code":"    it('when called with argument, sets output for unknown value', () => {\n      const scale = new CategoricalColorScale(['blue', 'red', 'green']);\n      scale.unknown('#222');\n      expect(scale.unknown()).toEqual('#222');\n    });","file":"color/CategoricalColorScale.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"scale(value) returns color similar to calling scale.getColor(value)","suites":["CategoricalColorScale","a CategoricalColorScale instance is also a color function itself"],"updatePoint":{"line":233,"column":75},"line":233,"code":"    it('scale(value) returns color similar to calling scale.getColor(value)', () => {\n      const scale = new CategoricalColorScale(['blue', 'red', 'green']);\n      expect(scale.getColor('pig')).toBe(scale('pig'));\n      expect(scale.getColor('cat')).toBe(scale('cat'));\n    });","file":"color/CategoricalColorScale.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"passes type check","suites":["CategoricalColorScale","is compatible with D3's ScaleOrdinal"],"updatePoint":{"line":241,"column":25},"line":241,"code":"    it('passes type check', () => {\n      const scale: ScaleOrdinal<{ toString(): string }, string> =\n        new CategoricalColorScale(['blue', 'red', 'green']);\n      expect(scale('pig')).toBe('blue');\n    });","file":"color/CategoricalColorScale.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should remove shared color from range","suites":["CategoricalColorScale",".removeSharedLabelColorFromRange(colorMap, cleanedValue)"],"updatePoint":{"line":249,"column":45},"line":249,"code":"    it('should remove shared color from range', () => {\n      const scale = new CategoricalColorScale(['blue', 'green', 'red']);\n      expect(scale.range()).toEqual(['blue', 'green', 'red']);\n\n      const sharedLabelColor = getSharedLabelColor();\n      sharedLabelColor.clear();\n      const colorMap = sharedLabelColor.getColorMap();\n      sharedLabelColor.addSlice('cow', 'blue', 1);\n      scale.removeSharedLabelColorFromRange(colorMap, 'pig');\n      expect(scale.range()).toEqual(['green', 'red']);\n      scale.removeSharedLabelColorFromRange(colorMap, 'cow');\n      expect(scale.range()).toEqual(['blue', 'green', 'red']);\n      sharedLabelColor.clear();\n    });","file":"color/CategoricalColorScale.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"recycles colors when all colors are in sharedLabelColor","suites":["CategoricalColorScale",".removeSharedLabelColorFromRange(colorMap, cleanedValue)"],"updatePoint":{"line":264,"column":63},"line":264,"code":"    it('recycles colors when all colors are in sharedLabelColor', () => {\n      const scale = new CategoricalColorScale(['blue', 'green', 'red']);\n      expect(scale.range()).toEqual(['blue', 'green', 'red']);\n      const sharedLabelColor = getSharedLabelColor();\n      const colorMap = sharedLabelColor.getColorMap();\n      sharedLabelColor.addSlice('cow', 'blue', 1);\n      sharedLabelColor.addSlice('pig', 'red', 1);\n      sharedLabelColor.addSlice('horse', 'green', 1);\n      scale.removeSharedLabelColorFromRange(colorMap, 'goat');\n      expect(scale.range()).toEqual(['blue', 'green', 'red']);\n      sharedLabelColor.clear();\n    });","file":"color/CategoricalColorScale.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"has default value out-of-the-box","suites":["CategoricalSchemeRegistry"],"updatePoint":{"line":26,"column":38},"line":26,"code":"  it('has default value out-of-the-box', () => {\n    expect(getCategoricalSchemeRegistry().get()).toBeInstanceOf(\n      CategoricalScheme,\n    );\n  });","file":"color/CategoricalSchemeRegistrySingleton.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"returns an instance of ColorScheme","suites":["ColorScheme","new ColorScheme()"],"updatePoint":{"line":24,"column":42},"line":24,"code":"    it('returns an instance of ColorScheme', () => {\n      const scheme = new ColorScheme({ id: 'test', colors: ['red', 'blue'] });\n      expect(scheme).toBeInstanceOf(ColorScheme);\n    });","file":"color/ColorScheme.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"exists","suites":["ColorSchemeRegistry"],"updatePoint":{"line":25,"column":12},"line":25,"code":"  it('exists', () => {\n    expect(ColorSchemeRegistry).toBeDefined();\n    expect(ColorSchemeRegistry).toBeInstanceOf(Function);\n  });","file":"color/ColorSchemeRegistry.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"returns undefined","suites":["ColorSchemeRegistry"],"updatePoint":{"line":29,"column":23},"line":29,"code":"  it('returns undefined', () => {\n    const registry = new ColorSchemeRegistry();\n    expect(registry.get('something')).toBeUndefined();\n  });","file":"color/ColorSchemeRegistry.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"returns default","suites":["ColorSchemeRegistry"],"updatePoint":{"line":33,"column":21},"line":33,"code":"  it('returns default', () => {\n    const registry = new ColorSchemeRegistry();\n    registry.registerValue('SUPERSET_DEFAULT', schemes[0]);\n    expect(registry.get('something')).toBeInstanceOf(CategoricalScheme);\n  });","file":"color/ColorSchemeRegistry.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"returns undefined in strict mode","suites":["ColorSchemeRegistry"],"updatePoint":{"line":38,"column":38},"line":38,"code":"  it('returns undefined in strict mode', () => {\n    const registry = new ColorSchemeRegistry();\n    registry.registerValue('SUPERSET_DEFAULT', schemes[0]);\n    expect(registry.get('something', true)).toBeUndefined();\n  });","file":"color/ColorSchemeRegistry.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"returns an array of CategoricalScheme","suites":["Color Schemes","categorical"],"updatePoint":{"line":35,"column":45},"line":35,"code":"    it('returns an array of CategoricalScheme', () => {\n      [\n        CategoricalAirbnb,\n        CategoricalEcharts,\n        CategoricalD3,\n        CategoricalGoogle,\n        CategoricalLyft,\n        CategoricalSuperset,\n        CategoricalPreset,\n      ].forEach(group => {\n        expect(group).toBeInstanceOf(Array);\n        group.forEach(scheme =>\n          expect(scheme).toBeInstanceOf(CategoricalScheme),\n        );\n      });\n    });","file":"color/colorSchemes.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"returns an array of SequentialScheme","suites":["Color Schemes","sequential"],"updatePoint":{"line":53,"column":44},"line":53,"code":"    it('returns an array of SequentialScheme', () => {\n      [SequentialCommon, SequentialD3].forEach(group => {\n        expect(group).toBeInstanceOf(Array);\n        group.forEach(scheme =>\n          expect(scheme).toBeInstanceOf(SequentialScheme),\n        );\n      });\n    });","file":"color/colorSchemes.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"exports modules","suites":["index"],"updatePoint":{"line":31,"column":21},"line":31,"code":"  it('exports modules', () => {\n    [\n      BRAND_COLOR,\n      CategoricalColorNamespace,\n      CategoricalColorScale,\n      CategoricalScheme,\n      getCategoricalSchemeRegistry,\n      getSequentialSchemeRegistry,\n      SequentialScheme,\n    ].forEach(x => expect(x).toBeDefined());\n  });","file":"color/index.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"exists","suites":["SequentialScheme"],"updatePoint":{"line":27,"column":12},"line":27,"code":"  it('exists', () => {\n    expect(SequentialScheme).toBeDefined();\n  });","file":"color/SequentialScheme.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"creates new instance","suites":["SequentialScheme","new SequentialScheme()"],"updatePoint":{"line":31,"column":28},"line":31,"code":"    it('creates new instance', () => {\n      const scheme2 = new SequentialScheme({\n        id: 'white to black',\n        colors: ['#fff', '#000'],\n      });\n      expect(scheme2).toBeInstanceOf(SequentialScheme);\n    });","file":"color/SequentialScheme.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"returns a piecewise scale","suites":["SequentialScheme",".createLinearScale(domain, modifyRange)"],"updatePoint":{"line":40,"column":33},"line":40,"code":"    it('returns a piecewise scale', () => {\n      const scale = scheme.createLinearScale([10, 100]);\n      expect(scale.domain()).toHaveLength(scale.range().length);\n      const scale2 = scheme.createLinearScale([0, 10, 100]);\n      expect(scale2.domain()).toHaveLength(scale2.range().length);\n    });","file":"color/SequentialScheme.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"returns a linear scale for the given domain","suites":["SequentialScheme",".createLinearScale(domain, modifyRange)","domain"],"updatePoint":{"line":47,"column":53},"line":47,"code":"      it('returns a linear scale for the given domain', () => {\n        const scale = scheme.createLinearScale([10, 100]);\n        expect(scale(1)).toEqual('rgb(255, 255, 255)');\n        expect(scale(10)).toEqual('rgb(255, 255, 255)');\n        expect(scale(55)).toEqual('rgb(119, 119, 119)');\n        expect(scale(100)).toEqual('rgb(0, 0, 0)');\n        expect(scale(1000)).toEqual('rgb(0, 0, 0)');\n      });","file":"color/SequentialScheme.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"uses [0, 1] as domain if not specified","suites":["SequentialScheme",".createLinearScale(domain, modifyRange)","domain"],"updatePoint":{"line":55,"column":48},"line":55,"code":"      it('uses [0, 1] as domain if not specified', () => {\n        const scale = scheme.createLinearScale();\n        expect(scale(-1)).toEqual('rgb(255, 255, 255)');\n        expect(scale(0)).toEqual('rgb(255, 255, 255)');\n        expect(scale(0.5)).toEqual('rgb(119, 119, 119)');\n        expect(scale(1)).toEqual('rgb(0, 0, 0)');\n        expect(scale(2)).toEqual('rgb(0, 0, 0)');\n      });","file":"color/SequentialScheme.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"modifies domain by default","suites":["SequentialScheme",".createLinearScale(domain, modifyRange)","modifyRange"],"updatePoint":{"line":69,"column":36},"line":69,"code":"      it('modifies domain by default', () => {\n        const scale = scheme3.createLinearScale([0, 100]);\n        expect(scale.domain()).toEqual([0, 50, 100]);\n        expect(scale.range()).toEqual(['#fee087', '#fa5c2e', '#800026']);\n      });","file":"color/SequentialScheme.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"modifies range instead of domain if set to true","suites":["SequentialScheme",".createLinearScale(domain, modifyRange)","modifyRange"],"updatePoint":{"line":74,"column":57},"line":74,"code":"      it('modifies range instead of domain if set to true', () => {\n        const scale = scheme3.createLinearScale([0, 100], true);\n        expect(scale.domain()).toEqual([0, 100]);\n        expect(scale.range()).toEqual([\n          'rgb(254, 224, 135)',\n          'rgb(128, 0, 38)',\n        ]);\n      });","file":"color/SequentialScheme.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"returns the original colors if numColors is not specified","suites":["SequentialScheme",".getColors(numColors, extent)","numColors"],"updatePoint":{"line":86,"column":67},"line":86,"code":"      it('returns the original colors if numColors is not specified', () => {\n        expect(scheme.getColors()).toEqual(['#fff', '#000']);\n      });","file":"color/SequentialScheme.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"returns the exact number of colors if numColors is specified","suites":["SequentialScheme",".getColors(numColors, extent)","numColors"],"updatePoint":{"line":89,"column":70},"line":89,"code":"      it('returns the exact number of colors if numColors is specified', () => {\n        expect(scheme.getColors(2)).toEqual(['#fff', '#000']);\n        expect(scheme.getColors(3)).toEqual([\n          'rgb(255, 255, 255)',\n          'rgb(119, 119, 119)',\n          'rgb(0, 0, 0)',\n        ]);\n        expect(scheme.getColors(4)).toEqual([\n          'rgb(255, 255, 255)',\n          'rgb(162, 162, 162)',\n          'rgb(78, 78, 78)',\n          'rgb(0, 0, 0)',\n        ]);\n      });","file":"color/SequentialScheme.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"adjust the range if extent is specified","suites":["SequentialScheme",".getColors(numColors, extent)","extent"],"updatePoint":{"line":105,"column":49},"line":105,"code":"      it('adjust the range if extent is specified', () => {\n        expect(scheme.getColors(2, [0, 0.5])).toEqual([\n          'rgb(255, 255, 255)',\n          'rgb(119, 119, 119)',\n        ]);\n        expect(scheme.getColors(2, [0.5, 1])).toEqual([\n          'rgb(119, 119, 119)',\n          'rgb(0, 0, 0)',\n        ]);\n      });","file":"color/SequentialScheme.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"has default value out-of-the-box","suites":["SequentialSchemeRegistry"],"updatePoint":{"line":26,"column":38},"line":26,"code":"  it('has default value out-of-the-box', () => {\n    expect(getSequentialSchemeRegistry().get()).toBeInstanceOf(\n      SequentialScheme,\n    );\n  });","file":"color/SequentialSchemeRegistrySingleton.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"has default value out-of-the-box","suites":["SharedLabelColor"],"updatePoint":{"line":60,"column":38},"line":60,"code":"  it('has default value out-of-the-box', () => {\n    expect(getSharedLabelColor()).toBeInstanceOf(SharedLabelColor);\n  });","file":"color/SharedLabelColorSingleton.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should add to sliceLabelColorMap when first adding label","suites":["SharedLabelColor",".addSlice(value, color, sliceId)"],"updatePoint":{"line":65,"column":64},"line":65,"code":"    it('should add to sliceLabelColorMap when first adding label', () => {\n      const sharedLabelColor = getSharedLabelColor();\n      sharedLabelColor.addSlice('a', 'red', 1);\n      expect(sharedLabelColor.sliceLabelMap.has(1)).toEqual(true);\n      const labels = sharedLabelColor.sliceLabelMap.get(1);\n      expect(labels?.includes('a')).toEqual(true);\n      const colorMap = sharedLabelColor.getColorMap();\n      expect(Object.fromEntries(colorMap)).toEqual({ a: 'red' });\n    });","file":"color/SharedLabelColorSingleton.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should add to sliceLabelColorMap when slice exist","suites":["SharedLabelColor",".addSlice(value, color, sliceId)"],"updatePoint":{"line":75,"column":57},"line":75,"code":"    it('should add to sliceLabelColorMap when slice exist', () => {\n      const sharedLabelColor = getSharedLabelColor();\n      sharedLabelColor.addSlice('a', 'red', 1);\n      sharedLabelColor.addSlice('b', 'blue', 1);\n      const labels = sharedLabelColor.sliceLabelMap.get(1);\n      expect(labels?.includes('b')).toEqual(true);\n      const colorMap = sharedLabelColor.getColorMap();\n      expect(Object.fromEntries(colorMap)).toEqual({ a: 'red', b: 'blue' });\n    });","file":"color/SharedLabelColorSingleton.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should use last color if adding label repeatedly","suites":["SharedLabelColor",".addSlice(value, color, sliceId)"],"updatePoint":{"line":85,"column":56},"line":85,"code":"    it('should use last color if adding label repeatedly', () => {\n      const sharedLabelColor = getSharedLabelColor();\n      sharedLabelColor.addSlice('b', 'blue', 1);\n      sharedLabelColor.addSlice('b', 'green', 1);\n      const labels = sharedLabelColor.sliceLabelMap.get(1);\n      expect(labels?.includes('b')).toEqual(true);\n      expect(labels?.length).toEqual(1);\n      const colorMap = sharedLabelColor.getColorMap();\n      expect(Object.fromEntries(colorMap)).toEqual({ b: 'green' });\n    });","file":"color/SharedLabelColorSingleton.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should do nothing when source is not dashboard","suites":["SharedLabelColor",".addSlice(value, color, sliceId)"],"updatePoint":{"line":96,"column":54},"line":96,"code":"    it('should do nothing when source is not dashboard', () => {\n      const sharedLabelColor = getSharedLabelColor();\n      sharedLabelColor.source = SharedLabelColorSource.explore;\n      sharedLabelColor.addSlice('a', 'red');\n      expect(Object.fromEntries(sharedLabelColor.sliceLabelMap)).toEqual({});\n    });","file":"color/SharedLabelColorSingleton.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should do nothing when sliceId is undefined","suites":["SharedLabelColor",".addSlice(value, color, sliceId)"],"updatePoint":{"line":103,"column":51},"line":103,"code":"    it('should do nothing when sliceId is undefined', () => {\n      const sharedLabelColor = getSharedLabelColor();\n      sharedLabelColor.addSlice('a', 'red');\n      expect(Object.fromEntries(sharedLabelColor.sliceLabelMap)).toEqual({});\n    });","file":"color/SharedLabelColorSingleton.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should remove sliceId","suites":["SharedLabelColor",".remove(sliceId)"],"updatePoint":{"line":111,"column":29},"line":111,"code":"    it('should remove sliceId', () => {\n      const sharedLabelColor = getSharedLabelColor();\n      sharedLabelColor.addSlice('a', 'red', 1);\n      sharedLabelColor.removeSlice(1);\n      expect(sharedLabelColor.sliceLabelMap.has(1)).toEqual(false);\n    });","file":"color/SharedLabelColorSingleton.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should update colorMap","suites":["SharedLabelColor",".remove(sliceId)"],"updatePoint":{"line":118,"column":30},"line":118,"code":"    it('should update colorMap', () => {\n      const sharedLabelColor = getSharedLabelColor();\n      sharedLabelColor.addSlice('a', 'red', 1);\n      sharedLabelColor.addSlice('b', 'blue', 2);\n      sharedLabelColor.removeSlice(1);\n      const colorMap = sharedLabelColor.getColorMap();\n      expect(Object.fromEntries(colorMap)).toEqual({ b: 'blue' });\n    });","file":"color/SharedLabelColorSingleton.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should do nothing when source is not dashboard","suites":["SharedLabelColor",".remove(sliceId)"],"updatePoint":{"line":127,"column":54},"line":127,"code":"    it('should do nothing when source is not dashboard', () => {\n      const sharedLabelColor = getSharedLabelColor();\n      sharedLabelColor.addSlice('a', 'red', 1);\n      sharedLabelColor.source = SharedLabelColorSource.explore;\n      sharedLabelColor.removeSlice(1);\n      expect(sharedLabelColor.sliceLabelMap.has(1)).toEqual(true);\n    });","file":"color/SharedLabelColorSingleton.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should update color map","suites":["SharedLabelColor",".updateColorMap(namespace, scheme)"],"updatePoint":{"line":137,"column":31},"line":137,"code":"    it('should update color map', () => {\n      const sharedLabelColor = getSharedLabelColor();\n      sharedLabelColor.addSlice('a', 'red', 1);\n      sharedLabelColor.addSlice('b', 'pink', 1);\n      sharedLabelColor.addSlice('b', 'green', 2);\n      sharedLabelColor.addSlice('c', 'blue', 2);\n      sharedLabelColor.updateColorMap('', 'testColors2');\n      const colorMap = sharedLabelColor.getColorMap();\n      expect(Object.fromEntries(colorMap)).toEqual({\n        a: 'yellow',\n        b: 'yellow',\n        c: 'green',\n      });\n    });","file":"color/SharedLabelColorSingleton.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should use recycle colors","suites":["SharedLabelColor",".updateColorMap(namespace, scheme)"],"updatePoint":{"line":152,"column":33},"line":152,"code":"    it('should use recycle colors', () => {\n      window.featureFlags = {\n        [FeatureFlag.USE_ANALAGOUS_COLORS]: false,\n      };\n      const sharedLabelColor = getSharedLabelColor();\n      sharedLabelColor.addSlice('a', 'red', 1);\n      sharedLabelColor.addSlice('b', 'blue', 2);\n      sharedLabelColor.addSlice('c', 'green', 3);\n      sharedLabelColor.addSlice('d', 'red', 4);\n      sharedLabelColor.updateColorMap('', 'testColors');\n      const colorMap = sharedLabelColor.getColorMap();\n      expect(Object.fromEntries(colorMap)).not.toEqual({});\n      expect(getAnalogousColors).not.toBeCalled();\n    });","file":"color/SharedLabelColorSingleton.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should use analagous colors","suites":["SharedLabelColor",".updateColorMap(namespace, scheme)"],"updatePoint":{"line":167,"column":35},"line":167,"code":"    it('should use analagous colors', () => {\n      window.featureFlags = {\n        [FeatureFlag.USE_ANALAGOUS_COLORS]: true,\n      };\n      const sharedLabelColor = getSharedLabelColor();\n      sharedLabelColor.addSlice('a', 'red', 1);\n      sharedLabelColor.addSlice('b', 'blue', 1);\n      sharedLabelColor.addSlice('c', 'green', 1);\n      sharedLabelColor.addSlice('d', 'red', 1);\n      sharedLabelColor.updateColorMap('', 'testColors');\n      const colorMap = sharedLabelColor.getColorMap();\n      expect(Object.fromEntries(colorMap)).not.toEqual({});\n      expect(getAnalogousColors).toBeCalled();\n    });","file":"color/SharedLabelColorSingleton.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should get color map","suites":["SharedLabelColor",".getColorMap()"],"updatePoint":{"line":184,"column":28},"line":184,"code":"    it('should get color map', () => {\n      const sharedLabelColor = getSharedLabelColor();\n      sharedLabelColor.addSlice('a', 'red', 1);\n      sharedLabelColor.addSlice('b', 'blue', 2);\n      const colorMap = sharedLabelColor.getColorMap();\n      expect(Object.fromEntries(colorMap)).toEqual({ a: 'red', b: 'blue' });\n    });","file":"color/SharedLabelColorSingleton.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should reset color map","suites":["SharedLabelColor",".reset()"],"updatePoint":{"line":194,"column":30},"line":194,"code":"    it('should reset color map', () => {\n      const sharedLabelColor = getSharedLabelColor();\n      sharedLabelColor.addSlice('a', 'red', 1);\n      sharedLabelColor.addSlice('b', 'blue', 2);\n      sharedLabelColor.reset();\n      const colorMap = sharedLabelColor.getColorMap();\n      expect(Object.fromEntries(colorMap)).toEqual({ a: '', b: '' });\n    });","file":"color/SharedLabelColorSingleton.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"when called with 3-digit hex color","suites":["color utils","getContrastingColor"],"updatePoint":{"line":24,"column":42},"line":24,"code":"    it('when called with 3-digit hex color', () => {\n      const color = getContrastingColor('#000');\n      expect(color).toBe('#FFF');\n    });","file":"color/utils.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"when called with 6-digit hex color","suites":["color utils","getContrastingColor"],"updatePoint":{"line":29,"column":42},"line":29,"code":"    it('when called with 6-digit hex color', () => {\n      const color = getContrastingColor('#000000');\n      expect(color).toBe('#FFF');\n    });","file":"color/utils.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"when called with no # prefix hex color","suites":["color utils","getContrastingColor"],"updatePoint":{"line":34,"column":46},"line":34,"code":"    it('when called with no # prefix hex color', () => {\n      const color = getContrastingColor('000000');\n      expect(color).toBe('#FFF');\n    });","file":"color/utils.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"when called with rgb color","suites":["color utils","getContrastingColor"],"updatePoint":{"line":39,"column":34},"line":39,"code":"    it('when called with rgb color', () => {\n      const color = getContrastingColor('rgb(0, 0, 0)');\n      expect(color).toBe('#FFF');\n    });","file":"color/utils.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"when called with thresholds","suites":["color utils","getContrastingColor"],"updatePoint":{"line":44,"column":35},"line":44,"code":"    it('when called with thresholds', () => {\n      const color1 = getContrastingColor('rgb(255, 255, 255)');\n      const color2 = getContrastingColor('rgb(255, 255, 255)', 255);\n      expect(color1).toBe('#000');\n      expect(color2).toBe('#FFF');\n    });","file":"color/utils.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"when called with rgba color, throw error","suites":["color utils","getContrastingColor"],"updatePoint":{"line":51,"column":48},"line":51,"code":"    it('when called with rgba color, throw error', () => {\n      expect(() => {\n        getContrastingColor('rgba(0, 0, 0, 0.1)');\n      }).toThrow();\n    });","file":"color/utils.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"when called with invalid color, throw error","suites":["color utils","getContrastingColor"],"updatePoint":{"line":57,"column":51},"line":57,"code":"    it('when called with invalid color, throw error', () => {\n      expect(() => {\n        getContrastingColor('#0000');\n      }).toThrow();\n    });","file":"color/utils.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"adds 20% opacity to black","suites":["color utils","addAlpha"],"updatePoint":{"line":64,"column":33},"line":64,"code":"    it('adds 20% opacity to black', () => {\n      expect(addAlpha('#000000', 0.2)).toBe('#00000033');\n    });","file":"color/utils.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"adds 50% opacity to white","suites":["color utils","addAlpha"],"updatePoint":{"line":67,"column":33},"line":67,"code":"    it('adds 50% opacity to white', () => {\n      expect(addAlpha('#FFFFFF', 0.5)).toBe('#FFFFFF80');\n    });","file":"color/utils.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should apply transparent alpha","suites":["color utils","addAlpha"],"updatePoint":{"line":70,"column":38},"line":70,"code":"    it('should apply transparent alpha', () => {\n      expect(addAlpha('#000000', 0)).toBe('#00000000');\n    });","file":"color/utils.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should apply fully opaque","suites":["color utils","addAlpha"],"updatePoint":{"line":73,"column":33},"line":73,"code":"    it('should apply fully opaque', () => {\n      expect(addAlpha('#000000', 1)).toBe('#000000FF');\n    });","file":"color/utils.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"opacity should be between 0 and 1","suites":["color utils","addAlpha"],"updatePoint":{"line":76,"column":41},"line":76,"code":"    it('opacity should be between 0 and 1', () => {\n      expect(() => {\n        addAlpha('#000000', 2);\n      }).toThrow();\n      expect(() => {\n        addAlpha('#000000', -1);\n      }).toThrow();\n    });","file":"color/utils.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should append the override items","suites":["getOverrideHtmlSchema"],"updatePoint":{"line":22,"column":38},"line":22,"code":"  it('should append the override items', () => {\n    const original = {\n      attributes: {\n        '*': ['size'],\n      },\n      clobberPrefix: 'original-prefix',\n      tagNames: ['h1', 'h2', 'h3'],\n    };\n    const result = getOverrideHtmlSchema(original, {\n      attributes: { '*': ['src'], h1: ['style'] },\n      clobberPrefix: 'custom-prefix',\n      tagNames: ['iframe'],\n    });\n    expect(result.clobberPrefix).toEqual('custom-prefix');\n    expect(result.attributes).toEqual({ '*': ['size', 'src'], h1: ['style'] });\n    expect(result.tagNames).toEqual(['h1', 'h2', 'h3', 'iframe']);\n  });","file":"components/SafeMarkdown.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"calls the right url with the specified method","suites":["callApi()","request config"],"updatePoint":{"line":71,"column":53},"line":71,"code":"    it('calls the right url with the specified method', async () => {\n      expect.assertions(4);\n      await Promise.all([\n        callApi({ url: mockGetUrl, method: 'GET' }),\n        callApi({ url: mockPostUrl, method: 'POST' }),\n        callApi({ url: mockPutUrl, method: 'PUT' }),\n        callApi({ url: mockPatchUrl, method: 'PATCH' }),\n      ]);\n      expect(fetchMock.calls(mockGetUrl)).toHaveLength(1);\n      expect(fetchMock.calls(mockPostUrl)).toHaveLength(1);\n      expect(fetchMock.calls(mockPutUrl)).toHaveLength(1);\n      expect(fetchMock.calls(mockPatchUrl)).toHaveLength(1);\n    });","file":"connection/callApi/callApi.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"passes along mode, cache, credentials, headers, body, signal, and redirect parameters in the request","suites":["callApi()","request config"],"updatePoint":{"line":85,"column":108},"line":85,"code":"    it('passes along mode, cache, credentials, headers, body, signal, and redirect parameters in the request', async () => {\n      expect.assertions(8);\n      const mockRequest: CallApi = {\n        url: mockGetUrl,\n        mode: 'cors',\n        cache: 'default',\n        credentials: 'include',\n        headers: {\n          custom: 'header',\n        },\n        redirect: 'follow',\n        signal: undefined,\n        body: 'BODY',\n      };\n\n      await callApi(mockRequest);\n      const calls = fetchMock.calls(mockGetUrl);\n      const fetchParams = calls[0][1] as RequestInit;\n      expect(calls).toHaveLength(1);\n      expect(fetchParams.mode).toBe(mockRequest.mode);\n      expect(fetchParams.cache).toBe(mockRequest.cache);\n      expect(fetchParams.credentials).toBe(mockRequest.credentials);\n      expect(fetchParams.headers).toEqual(\n        expect.objectContaining(\n          mockRequest.headers,\n        ) as typeof fetchParams.headers,\n      );\n      expect(fetchParams.redirect).toBe(mockRequest.redirect);\n      expect(fetchParams.signal).toBe(mockRequest.signal);\n      expect(fetchParams.body).toBe(mockRequest.body);\n    });","file":"connection/callApi/callApi.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"encodes key,value pairs from postPayload","suites":["callApi()","POST requests"],"updatePoint":{"line":119,"column":48},"line":119,"code":"    it('encodes key,value pairs from postPayload', async () => {\n      expect.assertions(3);\n      const postPayload = { key: 'value', anotherKey: 1237 };\n\n      await callApi({ url: mockPostUrl, method: 'POST', postPayload });\n      const calls = fetchMock.calls(mockPostUrl);\n      expect(calls).toHaveLength(1);\n\n      const fetchParams = calls[0][1] as RequestInit;\n      const body = fetchParams.body as FormData;\n\n      Object.entries(postPayload).forEach(([key, value]) => {\n        expect(body.get(key)).toBe(JSON.stringify(value));\n      });\n    });","file":"connection/callApi/callApi.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"omits key,value pairs from postPayload that have undefined values (POST)","suites":["callApi()","POST requests"],"updatePoint":{"line":136,"column":80},"line":136,"code":"    it('omits key,value pairs from postPayload that have undefined values (POST)', async () => {\n      expect.assertions(3);\n      const postPayload = { key: 'value', noValue: undefined };\n\n      await callApi({ url: mockPostUrl, method: 'POST', postPayload });\n      const calls = fetchMock.calls(mockPostUrl);\n      expect(calls).toHaveLength(1);\n\n      const fetchParams = calls[0][1] as RequestInit;\n      const body = fetchParams.body as FormData;\n      expect(body.get('key')).toBe(JSON.stringify(postPayload.key));\n      expect(body.get('noValue')).toBeNull();\n    });","file":"connection/callApi/callApi.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"respects the stringify flag in POST requests","suites":["callApi()","POST requests"],"updatePoint":{"line":150,"column":52},"line":150,"code":"    it('respects the stringify flag in POST requests', async () => {\n      const postPayload = {\n        string: 'value',\n        number: 1237,\n        array: [1, 2, 3],\n        object: { a: 'a', 1: 1 },\n        null: null,\n        emptyString: '',\n      };\n\n      expect.assertions(1 + 3 * Object.keys(postPayload).length);\n\n      await Promise.all([\n        callApi({ url: mockPostUrl, method: 'POST', postPayload }),\n        callApi({\n          url: mockPostUrl,\n          method: 'POST',\n          postPayload,\n          stringify: false,\n        }),\n        callApi({ url: mockPostUrl, method: 'POST', jsonPayload: postPayload }),\n      ]);\n      const calls = fetchMock.calls(mockPostUrl);\n      expect(calls).toHaveLength(3);\n\n      const stringified = (calls[0][1] as RequestInit).body as FormData;\n      const unstringified = (calls[1][1] as RequestInit).body as FormData;\n      const jsonRequestBody = JSON.parse(\n        (calls[2][1] as RequestInit).body as string,\n      ) as JsonObject;\n\n      Object.entries(postPayload).forEach(([key, value]) => {\n        expect(stringified.get(key)).toBe(JSON.stringify(value));\n        expect(unstringified.get(key)).toBe(String(value));\n        expect(jsonRequestBody[key]).toEqual(value);\n      });\n    });","file":"connection/callApi/callApi.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"removes corrupt value when building formData with stringify = false","suites":["callApi()","POST requests"],"updatePoint":{"line":188,"column":75},"line":188,"code":"    it('removes corrupt value when building formData with stringify = false', async () => {\n      /*\n        There has been a case when 'stringify' is false an object value on one of the\n        attributes was missing a toString function making the cast to String() fail\n        and causing entire method call to fail.  The new logic skips corrupt values that fail cast to String()\n        and allows all valid attributes to be added as key / value pairs to the formData\n        instance.  This test case replicates a corrupt object missing the .toString method\n        representing a real bug report.\n      */\n      const postPayload = {\n        string: 'value',\n        number: 1237,\n        array: [1, 2, 3],\n        object: { a: 'a', 1: 1 },\n        null: null,\n        emptyString: '',\n        // corruptObject has no toString method and will fail cast to String()\n        corrupt: [corruptObject],\n      };\n      jest.spyOn(console, 'error').mockImplementation();\n\n      await callApi({\n        url: mockPostUrl,\n        method: 'POST',\n        postPayload,\n        stringify: false,\n      });\n\n      const calls = fetchMock.calls(mockPostUrl);\n      expect(calls).toHaveLength(1);\n      const unstringified = (calls[0][1] as RequestInit).body as FormData;\n      const hasCorruptKey = unstringified.has('corrupt');\n      expect(hasCorruptKey).toBeFalsy();\n      // When a corrupt attribute is encountred, a console.error call is made with info about the corrupt attribute\n      // eslint-disable-next-line no-console\n      expect(console.error).toHaveBeenCalledTimes(1);\n    });","file":"connection/callApi/callApi.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"encodes key,value pairs from postPayload","suites":["callApi()","PUT requests"],"updatePoint":{"line":228,"column":48},"line":228,"code":"    it('encodes key,value pairs from postPayload', async () => {\n      expect.assertions(3);\n      const postPayload = { key: 'value', anotherKey: 1237 };\n\n      await callApi({ url: mockPutUrl, method: 'PUT', postPayload });\n      const calls = fetchMock.calls(mockPutUrl);\n      expect(calls).toHaveLength(1);\n\n      const fetchParams = calls[0][1] as RequestInit;\n      const body = fetchParams.body as FormData;\n\n      Object.entries(postPayload).forEach(([key, value]) => {\n        expect(body.get(key)).toBe(JSON.stringify(value));\n      });\n    });","file":"connection/callApi/callApi.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"omits key,value pairs from postPayload that have undefined values (PUT)","suites":["callApi()","PUT requests"],"updatePoint":{"line":245,"column":79},"line":245,"code":"    it('omits key,value pairs from postPayload that have undefined values (PUT)', async () => {\n      expect.assertions(3);\n      const postPayload = { key: 'value', noValue: undefined };\n\n      await callApi({ url: mockPutUrl, method: 'PUT', postPayload });\n      const calls = fetchMock.calls(mockPutUrl);\n      expect(calls).toHaveLength(1);\n\n      const fetchParams = calls[0][1] as RequestInit;\n      const body = fetchParams.body as FormData;\n      expect(body.get('key')).toBe(JSON.stringify(postPayload.key));\n      expect(body.get('noValue')).toBeNull();\n    });","file":"connection/callApi/callApi.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"respects the stringify flag in PUT requests","suites":["callApi()","PUT requests"],"updatePoint":{"line":259,"column":51},"line":259,"code":"    it('respects the stringify flag in PUT requests', async () => {\n      const postPayload = {\n        string: 'value',\n        number: 1237,\n        array: [1, 2, 3],\n        object: { a: 'a', 1: 1 },\n        null: null,\n        emptyString: '',\n      };\n\n      expect.assertions(1 + 2 * Object.keys(postPayload).length);\n\n      await Promise.all([\n        callApi({ url: mockPutUrl, method: 'PUT', postPayload }),\n        callApi({\n          url: mockPutUrl,\n          method: 'PUT',\n          postPayload,\n          stringify: false,\n        }),\n      ]);\n      const calls = fetchMock.calls(mockPutUrl);\n      expect(calls).toHaveLength(2);\n\n      const stringified = (calls[0][1] as RequestInit).body as FormData;\n      const unstringified = (calls[1][1] as RequestInit).body as FormData;\n\n      Object.entries(postPayload).forEach(([key, value]) => {\n        expect(stringified.get(key)).toBe(JSON.stringify(value));\n        expect(unstringified.get(key)).toBe(String(value));\n      });\n    });","file":"connection/callApi/callApi.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"encodes key,value pairs from postPayload","suites":["callApi()","PATCH requests"],"updatePoint":{"line":294,"column":48},"line":294,"code":"    it('encodes key,value pairs from postPayload', async () => {\n      expect.assertions(3);\n      const postPayload = { key: 'value', anotherKey: 1237 };\n\n      await callApi({ url: mockPatchUrl, method: 'PATCH', postPayload });\n      const calls = fetchMock.calls(mockPatchUrl);\n      expect(calls).toHaveLength(1);\n\n      const fetchParams = calls[0][1] as RequestInit;\n      const body = fetchParams.body as FormData;\n\n      Object.entries(postPayload).forEach(([key, value]) => {\n        expect(body.get(key)).toBe(JSON.stringify(value));\n      });\n    });","file":"connection/callApi/callApi.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"omits key,value pairs from postPayload that have undefined values (PATCH)","suites":["callApi()","PATCH requests"],"updatePoint":{"line":311,"column":81},"line":311,"code":"    it('omits key,value pairs from postPayload that have undefined values (PATCH)', async () => {\n      expect.assertions(3);\n      const postPayload = { key: 'value', noValue: undefined };\n\n      await callApi({ url: mockPatchUrl, method: 'PATCH', postPayload });\n      const calls = fetchMock.calls(mockPatchUrl);\n      expect(calls).toHaveLength(1);\n\n      const fetchParams = calls[0][1] as RequestInit;\n      const body = fetchParams.body as FormData;\n      expect(body.get('key')).toBe(JSON.stringify(postPayload.key));\n      expect(body.get('noValue')).toBeNull();\n    });","file":"connection/callApi/callApi.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"respects the stringify flag in PATCH requests","suites":["callApi()","PATCH requests"],"updatePoint":{"line":325,"column":53},"line":325,"code":"    it('respects the stringify flag in PATCH requests', async () => {\n      const postPayload = {\n        string: 'value',\n        number: 1237,\n        array: [1, 2, 3],\n        object: { a: 'a', 1: 1 },\n        null: null,\n        emptyString: '',\n      };\n\n      expect.assertions(1 + 2 * Object.keys(postPayload).length);\n\n      await Promise.all([\n        callApi({ url: mockPatchUrl, method: 'PATCH', postPayload }),\n        callApi({\n          url: mockPatchUrl,\n          method: 'PATCH',\n          postPayload,\n          stringify: false,\n        }),\n      ]);\n      const calls = fetchMock.calls(mockPatchUrl);\n      expect(calls).toHaveLength(2);\n\n      const stringified = (calls[0][1] as RequestInit).body as FormData;\n      const unstringified = (calls[1][1] as RequestInit).body as FormData;\n\n      Object.entries(postPayload).forEach(([key, value]) => {\n        expect(stringified.get(key)).toBe(JSON.stringify(value));\n        expect(unstringified.get(key)).toBe(String(value));\n      });\n    });","file":"connection/callApi/callApi.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"caches requests with ETags","suites":["callApi()","caching"],"updatePoint":{"line":375,"column":34},"line":375,"code":"    it('caches requests with ETags', async () => {\n      expect.assertions(2);\n      await callApi({ url: mockCacheUrl, method: 'GET' });\n      const calls = fetchMock.calls(mockCacheUrl);\n      expect(calls).toHaveLength(1);\n      const supersetCache = await caches.open(constants.CACHE_KEY);\n      const cachedResponse = await supersetCache.match(mockCacheUrl);\n      expect(cachedResponse).toBeDefined();\n    });","file":"connection/callApi/callApi.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"will not use cache when running off an insecure connection","suites":["callApi()","caching"],"updatePoint":{"line":385,"column":66},"line":385,"code":"    it('will not use cache when running off an insecure connection', async () => {\n      expect.assertions(2);\n      window.location.protocol = 'http:';\n\n      await callApi({ url: mockCacheUrl, method: 'GET' });\n      const calls = fetchMock.calls(mockCacheUrl);\n      expect(calls).toHaveLength(1);\n\n      const supersetCache = await caches.open(constants.CACHE_KEY);\n      const cachedResponse = await supersetCache.match(mockCacheUrl);\n      expect(cachedResponse).toBeUndefined();\n    });","file":"connection/callApi/callApi.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"works when the Cache API is disabled","suites":["callApi()","caching"],"updatePoint":{"line":398,"column":44},"line":398,"code":"    it('works when the Cache API is disabled', async () => {\n      expect.assertions(5);\n      // eslint-disable-next-line no-import-assign\n      Object.defineProperty(constants, 'CACHE_AVAILABLE', { value: false });\n\n      const firstResponse = await callApi({ url: mockCacheUrl, method: 'GET' });\n      const calls = fetchMock.calls(mockCacheUrl);\n      expect(calls).toHaveLength(1);\n      const firstBody = await firstResponse.text();\n      expect(firstBody).toEqual('BODY');\n\n      const secondResponse = await callApi({\n        url: mockCacheUrl,\n        method: 'GET',\n      });\n      const fetchParams = calls[1][1] as RequestInit;\n      expect(calls).toHaveLength(2);\n      // second call should not have If-None-Match header\n      expect(fetchParams.headers).toBeUndefined();\n      const secondBody = await secondResponse.text();\n      expect(secondBody).toEqual('BODY');\n\n      // eslint-disable-next-line no-import-assign\n      Object.defineProperty(constants, 'CACHE_AVAILABLE', { value: true });\n    });","file":"connection/callApi/callApi.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"sends known ETags in the If-None-Match header","suites":["callApi()","caching"],"updatePoint":{"line":424,"column":53},"line":424,"code":"    it('sends known ETags in the If-None-Match header', async () => {\n      expect.assertions(3);\n      // first call sets the cache\n      await callApi({ url: mockCacheUrl, method: 'GET' });\n      const calls = fetchMock.calls(mockCacheUrl);\n      expect(calls).toHaveLength(1);\n\n      // second call sends the Etag in the If-None-Match header\n      await callApi({ url: mockCacheUrl, method: 'GET' });\n      const fetchParams = calls[1][1] as RequestInit;\n      const headers = { 'If-None-Match': 'etag' };\n      expect(calls).toHaveLength(2);\n      expect(fetchParams.headers).toEqual(\n        expect.objectContaining(headers) as typeof fetchParams.headers,\n      );\n    });","file":"connection/callApi/callApi.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"reuses cached responses on 304 status","suites":["callApi()","caching"],"updatePoint":{"line":441,"column":45},"line":441,"code":"    it('reuses cached responses on 304 status', async () => {\n      expect.assertions(3);\n      // first call sets the cache\n      await callApi({ url: mockCacheUrl, method: 'GET' });\n      const calls = fetchMock.calls(mockCacheUrl);\n      expect(calls).toHaveLength(1);\n      // second call reuses the cached payload on a 304\n      const mockCachedPayload = { status: 304 };\n      fetchMock.get(mockCacheUrl, mockCachedPayload, { overwriteRoutes: true });\n\n      const secondResponse = await callApi({\n        url: mockCacheUrl,\n        method: 'GET',\n      });\n      expect(calls).toHaveLength(2);\n      const secondBody = await secondResponse.text();\n      expect(secondBody).toEqual('BODY');\n    });","file":"connection/callApi/callApi.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"throws error when cache fails on 304","suites":["callApi()","caching"],"updatePoint":{"line":460,"column":44},"line":460,"code":"    it('throws error when cache fails on 304', async () => {\n      expect.assertions(2);\n\n      // this should never happen, since a 304 is only returned if we have\n      // the cached response and sent the If-None-Match header\n      const mockUncachedUrl = '/mock/uncached/url';\n      const mockCachedPayload = { status: 304 };\n      let error;\n      fetchMock.get(mockUncachedUrl, mockCachedPayload);\n\n      try {\n        await callApi({ url: mockUncachedUrl, method: 'GET' });\n      } catch (err) {\n        error = err;\n      } finally {\n        const calls = fetchMock.calls(mockUncachedUrl);\n        expect(calls).toHaveLength(1);\n        expect((error as { message: string }).message).toEqual(\n          'Received 304 but no content is cached!',\n        );\n      }\n    });","file":"connection/callApi/callApi.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"returns original response if no Etag","suites":["callApi()","caching"],"updatePoint":{"line":483,"column":44},"line":483,"code":"    it('returns original response if no Etag', async () => {\n      expect.assertions(3);\n      const url = mockGetUrl;\n      const response = await callApi({ url, method: 'GET' });\n      const calls = fetchMock.calls(url);\n      expect(calls).toHaveLength(1);\n      expect(response.status).toEqual(200);\n      const body = await response.json();\n      expect(body as typeof mockGetPayload).toEqual(mockGetPayload);\n    });","file":"connection/callApi/callApi.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"returns original response if status not 304 or 200","suites":["callApi()","caching"],"updatePoint":{"line":494,"column":58},"line":494,"code":"    it('returns original response if status not 304 or 200', async () => {\n      expect.assertions(2);\n      const url = mockNotFound;\n      const response = await callApi({ url, method: 'GET' });\n      const calls = fetchMock.calls(url);\n      expect(calls).toHaveLength(1);\n      expect(response.status).toEqual(404);\n    });","file":"connection/callApi/callApi.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"rejects after retrying thrice if the request throws","suites":["callApi()","caching"],"updatePoint":{"line":504,"column":57},"line":504,"code":"  it('rejects after retrying thrice if the request throws', async () => {\n    expect.assertions(3);\n    let error;\n    try {\n      await callApi({\n        fetchRetryOptions: constants.DEFAULT_FETCH_RETRY_OPTIONS,\n        url: mockErrorUrl,\n        method: 'GET',\n      });\n    } catch (err) {\n      error = err;\n    } finally {\n      const err = error as { status: number; statusText: string };\n      expect(fetchMock.calls(mockErrorUrl)).toHaveLength(4);\n      expect(err.status).toBe(mockErrorPayload.status);\n      expect(err.statusText).toBe(mockErrorPayload.statusText);\n    }\n  });","file":"connection/callApi/callApi.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"rejects without retries if the config is set to 0 retries","suites":["callApi()","caching"],"updatePoint":{"line":523,"column":63},"line":523,"code":"  it('rejects without retries if the config is set to 0 retries', async () => {\n    expect.assertions(3);\n    let error;\n    try {\n      await callApi({\n        fetchRetryOptions: { retries: 0 },\n        url: mockErrorUrl,\n        method: 'GET',\n      });\n    } catch (err) {\n      error = err as { status: number; statusText: string };\n    } finally {\n      expect(fetchMock.calls(mockErrorUrl)).toHaveLength(1);\n      expect(error?.status).toBe(mockErrorPayload.status);\n      expect(error?.statusText).toBe(mockErrorPayload.statusText);\n    }\n  });","file":"connection/callApi/callApi.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"rejects after retrying thrice if the request returns a 503","suites":["callApi()","caching"],"updatePoint":{"line":541,"column":64},"line":541,"code":"  it('rejects after retrying thrice if the request returns a 503', async () => {\n    expect.assertions(2);\n    const url = mock503;\n    const response = await callApi({\n      fetchRetryOptions: constants.DEFAULT_FETCH_RETRY_OPTIONS,\n      url,\n      method: 'GET',\n    });\n    const calls = fetchMock.calls(url);\n    expect(calls).toHaveLength(4);\n    expect(response.status).toEqual(503);\n  });","file":"connection/callApi/callApi.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"invalid json for postPayload should thrown error","suites":["callApi()","caching"],"updatePoint":{"line":554,"column":54},"line":554,"code":"  it('invalid json for postPayload should thrown error', async () => {\n    expect.assertions(2);\n    let error;\n    try {\n      await callApi({\n        url: mockPostUrl,\n        method: 'POST',\n        postPayload: 'haha',\n      });\n    } catch (err) {\n      error = err;\n    } finally {\n      expect(error).toBeInstanceOf(Error);\n      expect(error.message).toEqual('Invalid payload:\\n\\nhaha');\n    }\n  });","file":"connection/callApi/callApi.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should accept search params object","suites":["callApi()","caching"],"updatePoint":{"line":571,"column":40},"line":571,"code":"  it('should accept search params object', async () => {\n    expect.assertions(3);\n    window.location.href = 'http://localhost';\n    fetchMock.get(`glob:*/get-search*`, { yes: 'ok' });\n    const response = await callApi({\n      url: '/get-search',\n      searchParams: {\n        abc: 1,\n      },\n      method: 'GET',\n    });\n    const result = await response.json();\n    expect(response.status).toEqual(200);\n    expect(result).toEqual({ yes: 'ok' });\n    expect(fetchMock.lastUrl()).toEqual(`http://localhost/get-search?abc=1`);\n  });","file":"connection/callApi/callApi.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should accept URLSearchParams","suites":["callApi()","caching"],"updatePoint":{"line":588,"column":35},"line":588,"code":"  it('should accept URLSearchParams', async () => {\n    expect.assertions(2);\n    window.location.href = 'http://localhost';\n    fetchMock.post(`glob:*/post-search*`, { yes: 'ok' });\n    await callApi({\n      url: '/post-search',\n      searchParams: new URLSearchParams({\n        abc: '1',\n      }),\n      method: 'POST',\n      jsonPayload: { request: 'ok' },\n    });\n    expect(fetchMock.lastUrl()).toEqual(`http://localhost/post-search?abc=1`);\n    expect(fetchMock.lastOptions()).toEqual(\n      expect.objectContaining({\n        body: JSON.stringify({ request: 'ok' }),\n      }),\n    );\n  });","file":"connection/callApi/callApi.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should throw when both payloads provided","suites":["callApi()","caching"],"updatePoint":{"line":608,"column":46},"line":608,"code":"  it('should throw when both payloads provided', async () => {\n    expect.assertions(1);\n    fetchMock.post('/post-both-payload', {});\n\n    let error;\n    try {\n      await callApi({\n        url: '/post-both-payload',\n        method: 'POST',\n        postPayload: { a: 1 },\n        jsonPayload: '{}',\n      });\n    } catch (err) {\n      error = err;\n    } finally {\n      expect((error as Error).message).toContain(\n        'provide only one of jsonPayload or postPayload',\n      );\n    }\n  });","file":"connection/callApi/callApi.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should accept FormData as postPayload","suites":["callApi()","caching"],"updatePoint":{"line":629,"column":43},"line":629,"code":"  it('should accept FormData as postPayload', async () => {\n    expect.assertions(1);\n    fetchMock.post('/post-formdata', {});\n    const payload = new FormData();\n    await callApi({\n      url: '/post-formdata',\n      method: 'POST',\n      postPayload: payload,\n    });\n    expect(fetchMock.lastOptions()?.body).toBe(payload);\n  });","file":"connection/callApi/callApi.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should ignore \"null\" postPayload string","suites":["callApi()","caching"],"updatePoint":{"line":641,"column":45},"line":641,"code":"  it('should ignore \"null\" postPayload string', async () => {\n    expect.assertions(1);\n    fetchMock.post('/post-null-postpayload', {});\n    await callApi({\n      url: '/post-formdata',\n      method: 'POST',\n      postPayload: 'null',\n    });\n    expect(fetchMock.lastOptions()?.body).toBeUndefined();\n  });","file":"connection/callApi/callApi.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"calls callApi()","suites":["callApiAndParseWithTimeout()","callApi"],"updatePoint":{"line":47,"column":23},"line":47,"code":"    it('calls callApi()', () => {\n      const callApiSpy = jest.spyOn(callApi, 'default');\n      callApiAndParseWithTimeout({ url: mockGetUrl, method: 'GET' });\n\n      expect(callApiSpy).toHaveBeenCalledTimes(1);\n      callApiSpy.mockClear();\n    });","file":"connection/callApi/callApiAndParseWithTimeout.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"calls parseResponse()","suites":["callApiAndParseWithTimeout()","parseResponse"],"updatePoint":{"line":57,"column":29},"line":57,"code":"    it('calls parseResponse()', async () => {\n      const parseSpy = jest.spyOn(parseResponse, 'default');\n\n      await callApiAndParseWithTimeout({\n        url: mockGetUrl,\n        method: 'GET',\n      });\n\n      expect(parseSpy).toHaveBeenCalledTimes(1);\n      parseSpy.mockClear();\n    });","file":"connection/callApi/callApiAndParseWithTimeout.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"does not create a rejection timer if no timeout passed","suites":["callApiAndParseWithTimeout()","timeout"],"updatePoint":{"line":71,"column":62},"line":71,"code":"    it('does not create a rejection timer if no timeout passed', () => {\n      const rejectionSpy = jest.spyOn(rejectAfterTimeout, 'default');\n      callApiAndParseWithTimeout({ url: mockGetUrl, method: 'GET' });\n\n      expect(rejectionSpy).toHaveBeenCalledTimes(0);\n      rejectionSpy.mockClear();\n    });","file":"connection/callApi/callApiAndParseWithTimeout.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"creates a rejection timer if a timeout passed","suites":["callApiAndParseWithTimeout()","timeout"],"updatePoint":{"line":79,"column":53},"line":79,"code":"    it('creates a rejection timer if a timeout passed', () => {\n      jest.useFakeTimers(); // prevents the timeout from rejecting + failing test\n      const rejectionSpy = jest.spyOn(rejectAfterTimeout, 'default');\n      callApiAndParseWithTimeout({\n        url: mockGetUrl,\n        method: 'GET',\n        timeout: 10,\n      });\n\n      expect(rejectionSpy).toHaveBeenCalledTimes(1);\n      rejectionSpy.mockClear();\n    });","file":"connection/callApi/callApiAndParseWithTimeout.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"rejects if the request exceeds the timeout","suites":["callApiAndParseWithTimeout()","timeout"],"updatePoint":{"line":92,"column":50},"line":92,"code":"    it('rejects if the request exceeds the timeout', async () => {\n      expect.assertions(2);\n      jest.useFakeTimers();\n\n      const mockTimeoutUrl = '/mock/timeout/url';\n      const unresolvingPromise = new Promise(() => {});\n      let error;\n      fetchMock.get(mockTimeoutUrl, () => unresolvingPromise);\n\n      try {\n        const promise = callApiAndParseWithTimeout({\n          url: mockTimeoutUrl,\n          method: 'GET',\n          timeout: 1,\n        });\n        jest.advanceTimersByTime(2);\n        await promise;\n      } catch (err) {\n        error = err;\n      } finally {\n        expect(fetchMock.calls(mockTimeoutUrl)).toHaveLength(1);\n        expect(error).toEqual({\n          error: 'Request timed out',\n          statusText: 'timeout',\n          timeout: 1,\n        });\n      }\n    });","file":"connection/callApi/callApiAndParseWithTimeout.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"resolves if the request does not exceed the timeout","suites":["callApiAndParseWithTimeout()","timeout"],"updatePoint":{"line":121,"column":59},"line":121,"code":"    it('resolves if the request does not exceed the timeout', async () => {\n      expect.assertions(1);\n      const { json } = await callApiAndParseWithTimeout({\n        url: mockGetUrl,\n        method: 'GET',\n        timeout: 100,\n      });\n      expect(json).toEqual(mockGetPayload);\n    });","file":"connection/callApi/callApiAndParseWithTimeout.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"returns a Promise","suites":["parseResponse()"],"updatePoint":{"line":48,"column":23},"line":48,"code":"  it('returns a Promise', () => {\n    const apiPromise = callApi({ url: mockGetUrl, method: 'GET' });\n    const parsedResponsePromise = parseResponse(apiPromise);\n    expect(parsedResponsePromise).toBeInstanceOf(Promise);\n  });","file":"connection/callApi/parseResponse.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"resolves to { json, response } if the request succeeds","suites":["parseResponse()"],"updatePoint":{"line":54,"column":60},"line":54,"code":"  it('resolves to { json, response } if the request succeeds', async () => {\n    expect.assertions(4);\n    const args = await parseResponse(\n      callApi({ url: mockGetUrl, method: 'GET' }),\n    );\n    expect(fetchMock.calls(mockGetUrl)).toHaveLength(1);\n    const keys = Object.keys(args);\n    expect(keys).toContain('response');\n    expect(keys).toContain('json');\n    expect(args.json).toEqual(\n      expect.objectContaining(mockGetPayload) as typeof args.json,\n    );\n  });","file":"connection/callApi/parseResponse.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"throws if `parseMethod=json` and .json() fails","suites":["parseResponse()"],"updatePoint":{"line":68,"column":52},"line":68,"code":"  it('throws if `parseMethod=json` and .json() fails', async () => {\n    expect.assertions(3);\n\n    const mockTextUrl = '/mock/text/url';\n    const mockTextResponse =\n      '<html><head></head><body>I could be a stack trace or something</body></html>';\n    fetchMock.get(mockTextUrl, mockTextResponse);\n\n    let error;\n    try {\n      await parseResponse(callApi({ url: mockTextUrl, method: 'GET' }));\n    } catch (err) {\n      error = err as Error;\n    } finally {\n      expect(fetchMock.calls(mockTextUrl)).toHaveLength(1);\n      expect(error?.stack).toBeDefined();\n      expect(error?.message).toContain('Unexpected token');\n    }\n  });","file":"connection/callApi/parseResponse.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"resolves to { text, response } if the `parseMethod=text`","suites":["parseResponse()"],"updatePoint":{"line":88,"column":62},"line":88,"code":"  it('resolves to { text, response } if the `parseMethod=text`', async () => {\n    expect.assertions(4);\n\n    // test with json + bigint to ensure that it was not first parsed as json\n    const mockTextParseUrl = '/mock/textparse/url';\n    const mockTextJsonResponse = '{ \"value\": 9223372036854775807 }';\n    fetchMock.get(mockTextParseUrl, mockTextJsonResponse);\n\n    const args = await parseResponse(\n      callApi({ url: mockTextParseUrl, method: 'GET' }),\n      'text',\n    );\n    expect(fetchMock.calls(mockTextParseUrl)).toHaveLength(1);\n    const keys = Object.keys(args);\n    expect(keys).toContain('response');\n    expect(keys).toContain('text');\n    expect(args.text).toBe(mockTextJsonResponse);\n  });","file":"connection/callApi/parseResponse.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"throws if parseMethod is not null|json|text","suites":["parseResponse()"],"updatePoint":{"line":107,"column":49},"line":107,"code":"  it('throws if parseMethod is not null|json|text', async () => {\n    expect.assertions(1);\n\n    let error;\n    try {\n      await parseResponse(\n        callApi({ url: mockNoParseUrl, method: 'GET' }),\n        'something-else' as never,\n      );\n    } catch (err) {\n      error = err;\n    } finally {\n      expect(error.message).toEqual(\n        expect.stringContaining('Expected parseResponse=json'),\n      );\n    }\n  });","file":"connection/callApi/parseResponse.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"resolves to unmodified `Response` object if `parseMethod=null|raw`","suites":["parseResponse()"],"updatePoint":{"line":125,"column":72},"line":125,"code":"  it('resolves to unmodified `Response` object if `parseMethod=null|raw`', async () => {\n    expect.assertions(3);\n    const responseNull = await parseResponse(\n      callApi({ url: mockNoParseUrl, method: 'GET' }),\n      null,\n    );\n    const responseRaw = await parseResponse(\n      callApi({ url: mockNoParseUrl, method: 'GET' }),\n      'raw',\n    );\n    expect(fetchMock.calls(mockNoParseUrl)).toHaveLength(2);\n    expect(responseNull.bodyUsed).toBe(false);\n    expect(responseRaw.bodyUsed).toBe(false);\n  });","file":"connection/callApi/parseResponse.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"resolves to big number value if `parseMethod=json-bigint`","suites":["parseResponse()"],"updatePoint":{"line":140,"column":63},"line":140,"code":"  it('resolves to big number value if `parseMethod=json-bigint`', async () => {\n    const mockBigIntUrl = '/mock/get/bigInt';\n    const mockGetBigIntPayload =\n      '{ \"value\": 9223372036854775807, \"minus\": { \"value\": -483729382918228373892, \"str\": \"something\" }, \"number\": 1234, \"floatValue\": { \"plus\": 0.3452211361231223, \"minus\": -0.3452211361231223 } }';\n    fetchMock.get(mockBigIntUrl, mockGetBigIntPayload);\n    const responseBigNumber = await parseResponse(\n      callApi({ url: mockBigIntUrl, method: 'GET' }),\n      'json-bigint',\n    );\n    expect(`${responseBigNumber.json.value}`).toEqual('9223372036854775807');\n    expect(`${responseBigNumber.json.minus.value}`).toEqual(\n      '-483729382918228373892',\n    );\n    expect(responseBigNumber.json.number).toEqual(1234);\n    expect(responseBigNumber.json.floatValue.plus).toEqual(0.3452211361231223);\n    expect(responseBigNumber.json.floatValue.minus).toEqual(\n      -0.3452211361231223,\n    );\n    expect(\n      responseBigNumber.json.floatValue.plus +\n        responseBigNumber.json.floatValue.minus,\n    ).toEqual(0);\n    expect(\n      responseBigNumber.json.floatValue.plus /\n        responseBigNumber.json.floatValue.minus,\n    ).toEqual(-1);\n    expect(Math.min(responseBigNumber.json.floatValue.plus, 0)).toEqual(0);\n    expect(Math.abs(responseBigNumber.json.floatValue.minus)).toEqual(\n      responseBigNumber.json.floatValue.plus,\n    );\n  });","file":"connection/callApi/parseResponse.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"rejects if request.ok=false","suites":["parseResponse()"],"updatePoint":{"line":172,"column":33},"line":172,"code":"  it('rejects if request.ok=false', async () => {\n    expect.assertions(3);\n    const mockNotOkayUrl = '/mock/notokay/url';\n    fetchMock.get(mockNotOkayUrl, 404); // 404s result in not response.ok=false\n\n    const apiPromise = callApi({ url: mockNotOkayUrl, method: 'GET' });\n\n    let error;\n    try {\n      await parseResponse(apiPromise);\n    } catch (err) {\n      error = err as { ok: boolean; status: number };\n    } finally {\n      expect(fetchMock.calls(mockNotOkayUrl)).toHaveLength(1);\n      expect(error?.ok).toBe(false);\n      expect(error?.status).toBe(404);\n    }\n  });","file":"connection/callApi/parseResponse.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"returns a promise that rejects after the specified timeout","suites":["rejectAfterTimeout()"],"updatePoint":{"line":22,"column":64},"line":22,"code":"  it('returns a promise that rejects after the specified timeout', async () => {\n    expect.assertions(1);\n    jest.useFakeTimers();\n    let error;\n\n    try {\n      const promise = rejectAfterTimeout(10);\n      jest.advanceTimersByTime(11);\n      await promise;\n    } catch (err) {\n      error = err;\n    } finally {\n      expect(error).toBeDefined();\n    }\n    jest.useRealTimers();\n  });","file":"connection/callApi/rejectAfterTimeout.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"exposes reset, configure, init, get, post, postForm, isAuthenticated, and reAuthenticate methods","suites":["SupersetClient"],"updatePoint":{"line":33,"column":102},"line":33,"code":"  it('exposes reset, configure, init, get, post, postForm, isAuthenticated, and reAuthenticate methods', () => {\n    expect(typeof SupersetClient.configure).toBe('function');\n    expect(typeof SupersetClient.init).toBe('function');\n    expect(typeof SupersetClient.get).toBe('function');\n    expect(typeof SupersetClient.post).toBe('function');\n    expect(typeof SupersetClient.postForm).toBe('function');\n    expect(typeof SupersetClient.isAuthenticated).toBe('function');\n    expect(typeof SupersetClient.reAuthenticate).toBe('function');\n    expect(typeof SupersetClient.getGuestToken).toBe('function');\n    expect(typeof SupersetClient.request).toBe('function');\n    expect(typeof SupersetClient.reset).toBe('function');\n  });","file":"connection/SupersetClient.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"throws if you call init, get, post, postForm, isAuthenticated, or reAuthenticate before configure","suites":["SupersetClient"],"updatePoint":{"line":46,"column":103},"line":46,"code":"  it('throws if you call init, get, post, postForm, isAuthenticated, or reAuthenticate before configure', () => {\n    expect(SupersetClient.init).toThrow();\n    expect(SupersetClient.get).toThrow();\n    expect(SupersetClient.post).toThrow();\n    expect(SupersetClient.postForm).toThrow();\n    expect(SupersetClient.isAuthenticated).toThrow();\n    expect(SupersetClient.reAuthenticate).toThrow();\n    expect(SupersetClient.request).toThrow();\n    expect(SupersetClient.configure).not.toThrow();\n  });","file":"connection/SupersetClient.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"calls appropriate SupersetClient methods when configured","suites":["SupersetClient"],"updatePoint":{"line":58,"column":62},"line":58,"code":"  it('calls appropriate SupersetClient methods when configured', async () => {\n    expect.assertions(16);\n    const mockGetUrl = '/mock/get/url';\n    const mockPostUrl = '/mock/post/url';\n    const mockRequestUrl = '/mock/request/url';\n    const mockPutUrl = '/mock/put/url';\n    const mockDeleteUrl = '/mock/delete/url';\n    const mockGetPayload = { get: 'payload' };\n    const mockPostPayload = { post: 'payload' };\n    const mockDeletePayload = { delete: 'ok' };\n    const mockPutPayload = { put: 'ok' };\n    fetchMock.get(mockGetUrl, mockGetPayload);\n    fetchMock.post(mockPostUrl, mockPostPayload);\n    fetchMock.delete(mockDeleteUrl, mockDeletePayload);\n    fetchMock.put(mockPutUrl, mockPutPayload);\n    fetchMock.get(mockRequestUrl, mockGetPayload);\n\n    const initSpy = jest.spyOn(SupersetClientClass.prototype, 'init');\n    const getSpy = jest.spyOn(SupersetClientClass.prototype, 'get');\n    const postSpy = jest.spyOn(SupersetClientClass.prototype, 'post');\n    const putSpy = jest.spyOn(SupersetClientClass.prototype, 'put');\n    const deleteSpy = jest.spyOn(SupersetClientClass.prototype, 'delete');\n    const authenticatedSpy = jest.spyOn(\n      SupersetClientClass.prototype,\n      'isAuthenticated',\n    );\n    const csrfSpy = jest.spyOn(SupersetClientClass.prototype, 'getCSRFToken');\n    const requestSpy = jest.spyOn(SupersetClientClass.prototype, 'request');\n    const getGuestTokenSpy = jest.spyOn(\n      SupersetClientClass.prototype,\n      'getGuestToken',\n    );\n\n    SupersetClient.configure({});\n    await SupersetClient.init();\n\n    expect(initSpy).toHaveBeenCalledTimes(1);\n    expect(authenticatedSpy).toHaveBeenCalledTimes(2);\n    expect(csrfSpy).toHaveBeenCalledTimes(1);\n\n    await SupersetClient.get({ url: mockGetUrl });\n    await SupersetClient.post({ url: mockPostUrl });\n    await SupersetClient.delete({ url: mockDeleteUrl });\n    await SupersetClient.put({ url: mockPutUrl });\n    await SupersetClient.request({ url: mockRequestUrl });\n\n    // Make sure network calls have  Accept: 'application/json' in headers\n    const networkCalls = [\n      mockGetUrl,\n      mockPostUrl,\n      mockRequestUrl,\n      mockPutUrl,\n      mockDeleteUrl,\n    ];\n    networkCalls.map((url: string) =>\n      expect(fetchMock.calls(url)[0][1]?.headers).toStrictEqual({\n        Accept: 'application/json',\n        'X-CSRFToken': '',\n      }),\n    );\n\n    SupersetClient.isAuthenticated();\n    await SupersetClient.reAuthenticate();\n\n    SupersetClient.getGuestToken();\n    expect(getGuestTokenSpy).toHaveBeenCalledTimes(1);\n\n    expect(initSpy).toHaveBeenCalledTimes(2);\n    expect(deleteSpy).toHaveBeenCalledTimes(1);\n    expect(putSpy).toHaveBeenCalledTimes(1);\n    expect(getSpy).toHaveBeenCalledTimes(1);\n    expect(postSpy).toHaveBeenCalledTimes(1);\n    expect(requestSpy).toHaveBeenCalledTimes(5); // request rewires to get\n    expect(csrfSpy).toHaveBeenCalledTimes(2); // from init() + reAuthenticate()\n\n    initSpy.mockRestore();\n    getSpy.mockRestore();\n    putSpy.mockRestore();\n    deleteSpy.mockRestore();\n    requestSpy.mockRestore();\n    postSpy.mockRestore();\n    authenticatedSpy.mockRestore();\n    csrfSpy.mockRestore();\n\n    fetchMock.reset();\n  });","file":"connection/SupersetClient.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"fallback protocol to https when setting only host","suites":["SupersetClientClass","new SupersetClientClass()"],"updatePoint":{"line":31,"column":57},"line":31,"code":"    it('fallback protocol to https when setting only host', () => {\n      const client = new SupersetClientClass({ host: 'TEST-HOST' });\n      expect(client.baseUrl).toEqual('https://test-host');\n    });","file":"connection/SupersetClientClass.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"uses url if passed","suites":["SupersetClientClass",".getUrl()"],"updatePoint":{"line":47,"column":26},"line":47,"code":"    it('uses url if passed', () => {\n      expect(\n        client.getUrl({ url: 'myUrl', endpoint: 'blah', host: 'blah' }),\n      ).toBe('myUrl');\n    });","file":"connection/SupersetClientClass.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"constructs a valid url from config.protocol + host + endpoint if passed","suites":["SupersetClientClass",".getUrl()"],"updatePoint":{"line":53,"column":79},"line":53,"code":"    it('constructs a valid url from config.protocol + host + endpoint if passed', () => {\n      expect(client.getUrl({ endpoint: '/test', host: 'myhost' })).toBe(\n        'https://myhost/test',\n      );\n      expect(client.getUrl({ endpoint: '/test', host: 'myhost/' })).toBe(\n        'https://myhost/test',\n      );\n      expect(client.getUrl({ endpoint: 'test', host: 'myhost' })).toBe(\n        'https://myhost/test',\n      );\n      expect(client.getUrl({ endpoint: '/test/test//', host: 'myhost/' })).toBe(\n        'https://myhost/test/test//',\n      );\n    });","file":"connection/SupersetClientClass.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"constructs a valid url from config.host + endpoint if host is omitted","suites":["SupersetClientClass",".getUrl()"],"updatePoint":{"line":68,"column":77},"line":68,"code":"    it('constructs a valid url from config.host + endpoint if host is omitted', () => {\n      expect(client.getUrl({ endpoint: '/test' })).toBe(\n        'https://config_host/test',\n      );\n    });","file":"connection/SupersetClientClass.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"does not throw if url, endpoint, and host are all empty","suites":["SupersetClientClass",".getUrl()"],"updatePoint":{"line":74,"column":63},"line":74,"code":"    it('does not throw if url, endpoint, and host are all empty', () => {\n      client = new SupersetClientClass({ protocol: 'https:', host: '' });\n      expect(client.getUrl()).toBe('https://localhost/');\n    });","file":"connection/SupersetClientClass.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"calls api/v1/security/csrf_token/ when init() is called if no CSRF token is passed","suites":["SupersetClientClass",".init()"],"updatePoint":{"line":87,"column":90},"line":87,"code":"    it('calls api/v1/security/csrf_token/ when init() is called if no CSRF token is passed', async () => {\n      expect.assertions(1);\n      await new SupersetClientClass().init();\n      expect(fetchMock.calls(LOGIN_GLOB)).toHaveLength(1);\n    });","file":"connection/SupersetClientClass.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"does NOT call api/v1/security/csrf_token/ when init() is called if a CSRF token is passed","suites":["SupersetClientClass",".init()"],"updatePoint":{"line":93,"column":97},"line":93,"code":"    it('does NOT call api/v1/security/csrf_token/ when init() is called if a CSRF token is passed', async () => {\n      expect.assertions(1);\n      await new SupersetClientClass({ csrfToken: 'abc' }).init();\n      expect(fetchMock.calls(LOGIN_GLOB)).toHaveLength(0);\n    });","file":"connection/SupersetClientClass.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"calls api/v1/security/csrf_token/ when init(force=true) is called even if a CSRF token is passed","suites":["SupersetClientClass",".init()"],"updatePoint":{"line":99,"column":104},"line":99,"code":"    it('calls api/v1/security/csrf_token/ when init(force=true) is called even if a CSRF token is passed', async () => {\n      expect.assertions(4);\n      const initialToken = 'initial_token';\n      const client = new SupersetClientClass({ csrfToken: initialToken });\n\n      await client.init();\n      expect(fetchMock.calls(LOGIN_GLOB)).toHaveLength(0);\n      expect(client.csrfToken).toBe(initialToken);\n\n      await client.init(true);\n      expect(fetchMock.calls(LOGIN_GLOB)).toHaveLength(1);\n      expect(client.csrfToken).not.toBe(initialToken);\n    });","file":"connection/SupersetClientClass.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"throws if api/v1/security/csrf_token/ returns an error","suites":["SupersetClientClass",".init()"],"updatePoint":{"line":113,"column":62},"line":113,"code":"    it('throws if api/v1/security/csrf_token/ returns an error', async () => {\n      expect.assertions(1);\n      const rejectError = { status: 403 };\n      fetchMock.get(LOGIN_GLOB, () => Promise.reject(rejectError), {\n        overwriteRoutes: true,\n      });\n\n      let error;\n      try {\n        await new SupersetClientClass({}).init();\n      } catch (err) {\n        error = err;\n      } finally {\n        expect(error as typeof rejectError).toEqual(rejectError);\n      }\n    });","file":"connection/SupersetClientClass.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"throws if api/v1/security/csrf_token/ does not return a token","suites":["SupersetClientClass",".init()"],"updatePoint":{"line":132,"column":69},"line":132,"code":"    it('throws if api/v1/security/csrf_token/ does not return a token', async () => {\n      expect.assertions(1);\n      fetchMock.get(LOGIN_GLOB, {}, { overwriteRoutes: true });\n\n      let error;\n      try {\n        await new SupersetClientClass({}).init();\n      } catch (err) {\n        error = err;\n      } finally {\n        expect(error as typeof invalidCsrfTokenError).toEqual(\n          invalidCsrfTokenError,\n        );\n      }\n    });","file":"connection/SupersetClientClass.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"does not set csrfToken if response is not json","suites":["SupersetClientClass",".init()"],"updatePoint":{"line":148,"column":54},"line":148,"code":"    it('does not set csrfToken if response is not json', async () => {\n      expect.assertions(1);\n      fetchMock.get(LOGIN_GLOB, '123', {\n        overwriteRoutes: true,\n      });\n\n      let error;\n      try {\n        await new SupersetClientClass({}).init();\n      } catch (err) {\n        error = err;\n      } finally {\n        expect(error as typeof invalidCsrfTokenError).toEqual(\n          invalidCsrfTokenError,\n        );\n      }\n    });","file":"connection/SupersetClientClass.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"returns true if there is a token and false if not","suites":["SupersetClientClass",".isAuthenticated()"],"updatePoint":{"line":170,"column":57},"line":170,"code":"    it('returns true if there is a token and false if not', async () => {\n      expect.assertions(2);\n      const client = new SupersetClientClass({});\n      expect(client.isAuthenticated()).toBe(false);\n      await client.init();\n      expect(client.isAuthenticated()).toBe(true);\n    });","file":"connection/SupersetClientClass.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"returns true if a token is passed at configuration","suites":["SupersetClientClass",".isAuthenticated()"],"updatePoint":{"line":178,"column":58},"line":178,"code":"    it('returns true if a token is passed at configuration', () => {\n      expect.assertions(2);\n      const clientWithoutToken = new SupersetClientClass({\n        csrfToken: undefined,\n      });\n      const clientWithToken = new SupersetClientClass({ csrfToken: 'token' });\n      expect(clientWithoutToken.isAuthenticated()).toBe(false);\n      expect(clientWithToken.isAuthenticated()).toBe(true);\n    });","file":"connection/SupersetClientClass.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"returns a promise that rejects if .init() has not been called","suites":["SupersetClientClass",".ensureAuth()"],"updatePoint":{"line":190,"column":69},"line":190,"code":"    it(`returns a promise that rejects if .init() has not been called`, async () => {\n      expect.assertions(2);\n\n      const client = new SupersetClientClass({});\n      let error;\n\n      try {\n        await client.ensureAuth();\n      } catch (err) {\n        error = err;\n      } finally {\n        expect(error).toEqual({ error: expect.any(String) });\n      }\n      expect(client.isAuthenticated()).toBe(false);\n    });","file":"connection/SupersetClientClass.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"returns a promise that resolves if .init() resolves successfully","suites":["SupersetClientClass",".ensureAuth()"],"updatePoint":{"line":206,"column":72},"line":206,"code":"    it('returns a promise that resolves if .init() resolves successfully', async () => {\n      expect.assertions(1);\n\n      const client = new SupersetClientClass({});\n      await client.init();\n      await client.ensureAuth();\n\n      expect(client.isAuthenticated()).toBe(true);\n    });","file":"connection/SupersetClientClass.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"returns a promise that rejects if .init() is unsuccessful","suites":["SupersetClientClass",".ensureAuth()"],"updatePoint":{"line":216,"column":65},"line":216,"code":"    it(`returns a promise that rejects if .init() is unsuccessful`, async () => {\n      expect.assertions(4);\n\n      const rejectValue = { status: 403 };\n      fetchMock.get(LOGIN_GLOB, () => Promise.reject(rejectValue), {\n        overwriteRoutes: true,\n      });\n\n      const client = new SupersetClientClass({});\n      let error;\n      let error2;\n\n      try {\n        await client.init();\n      } catch (err) {\n        error = err;\n      } finally {\n        expect(error).toEqual(expect.objectContaining(rejectValue));\n        expect(client.isAuthenticated()).toBe(false);\n        try {\n          await client.ensureAuth();\n        } catch (err) {\n          error2 = err;\n        } finally {\n          expect(error2).toEqual(expect.objectContaining(rejectValue));\n          expect(client.isAuthenticated()).toBe(false);\n        }\n      }\n\n      // reset\n      fetchMock.get(\n        LOGIN_GLOB,\n        { result: 1234 },\n        {\n          overwriteRoutes: true,\n        },\n      );\n    });","file":"connection/SupersetClientClass.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"checks for authentication before every get and post request","suites":["SupersetClientClass","requests"],"updatePoint":{"line":283,"column":67},"line":283,"code":"    it('checks for authentication before every get and post request', async () => {\n      expect.assertions(6);\n\n      const authSpy = jest.spyOn(SupersetClientClass.prototype, 'ensureAuth');\n      const client = new SupersetClientClass({ protocol, host });\n\n      await client.init();\n      await client.get({ url: mockGetUrl });\n      await client.post({ url: mockPostUrl });\n      await client.put({ url: mockPutUrl });\n      await client.delete({ url: mockDeleteUrl });\n      await client.request({ url: mockRequestUrl, method: 'DELETE' });\n\n      expect(fetchMock.calls(mockGetUrl)).toHaveLength(1);\n      expect(fetchMock.calls(mockPostUrl)).toHaveLength(1);\n      expect(fetchMock.calls(mockDeleteUrl)).toHaveLength(1);\n      expect(fetchMock.calls(mockPutUrl)).toHaveLength(1);\n      expect(fetchMock.calls(mockRequestUrl)).toHaveLength(1);\n\n      expect(authSpy).toHaveBeenCalledTimes(5);\n      authSpy.mockRestore();\n    });","file":"connection/SupersetClientClass.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"sets protocol, host, headers, mode, and credentials from config","suites":["SupersetClientClass","requests"],"updatePoint":{"line":306,"column":71},"line":306,"code":"    it('sets protocol, host, headers, mode, and credentials from config', async () => {\n      expect.assertions(3);\n\n      const clientConfig: ClientConfig = {\n        host,\n        protocol,\n        mode: 'cors',\n        credentials: 'include',\n        headers: { my: 'header' },\n      };\n\n      const client = new SupersetClientClass(clientConfig);\n      await client.init();\n      await client.get({ url: mockGetUrl });\n\n      const fetchRequest = fetchMock.calls(mockGetUrl)[0][1] as CallApi;\n      expect(fetchRequest.mode).toBe(clientConfig.mode);\n      expect(fetchRequest.credentials).toBe(clientConfig.credentials);\n      expect(fetchRequest.headers).toEqual(\n        expect.objectContaining(\n          clientConfig.headers,\n        ) as typeof fetchRequest.headers,\n      );\n    });","file":"connection/SupersetClientClass.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"uses a guest token when provided","suites":["SupersetClientClass","requests"],"updatePoint":{"line":331,"column":40},"line":331,"code":"    it('uses a guest token when provided', async () => {\n      expect.assertions(2);\n\n      const client = new SupersetClientClass({\n        protocol,\n        host,\n        guestToken: 'abc123',\n        guestTokenHeaderName: 'guestTokenHeader',\n      });\n      expect(client.getGuestToken()).toBe('abc123');\n\n      await client.init();\n      await client.get({ url: mockGetUrl });\n      const fetchRequest = fetchMock.calls(mockGetUrl)[0][1] as CallApi;\n      expect(fetchRequest.headers).toEqual(\n        expect.objectContaining({\n          guestTokenHeader: 'abc123',\n        }),\n      );\n    });","file":"connection/SupersetClientClass.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"makes a request using url or endpoint","suites":["SupersetClientClass","requests",".get()"],"updatePoint":{"line":353,"column":47},"line":353,"code":"      it('makes a request using url or endpoint', async () => {\n        expect.assertions(2);\n\n        const client = new SupersetClientClass({ protocol, host });\n        await client.init();\n\n        await client.get({ url: mockGetUrl });\n        expect(fetchMock.calls(mockGetUrl)).toHaveLength(1);\n\n        await client.get({ endpoint: mockGetEndpoint });\n        expect(fetchMock.calls(mockGetUrl)).toHaveLength(2);\n      });","file":"connection/SupersetClientClass.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"supports parsing a response as text","suites":["SupersetClientClass","requests",".get()"],"updatePoint":{"line":366,"column":45},"line":366,"code":"      it('supports parsing a response as text', async () => {\n        expect.assertions(2);\n        const client = new SupersetClientClass({ protocol, host });\n        await client.init();\n        const { text } = await client.get({\n          url: mockTextUrl,\n          parseMethod: 'text',\n        });\n        expect(fetchMock.calls(mockTextUrl)).toHaveLength(1);\n        expect(text).toBe(mockTextJsonResponse);\n      });","file":"connection/SupersetClientClass.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"allows overriding host, headers, mode, and credentials per-request","suites":["SupersetClientClass","requests",".get()"],"updatePoint":{"line":378,"column":76},"line":378,"code":"      it('allows overriding host, headers, mode, and credentials per-request', async () => {\n        expect.assertions(3);\n\n        const clientConfig: ClientConfig = {\n          host,\n          protocol,\n          mode: 'cors',\n          credentials: 'include',\n          headers: { my: 'header' },\n        };\n        const overrideConfig: ClientConfig = {\n          host: 'override_host',\n          mode: 'no-cors',\n          credentials: 'omit',\n          headers: { my: 'override', another: 'header' },\n        };\n\n        const client = new SupersetClientClass(clientConfig);\n        await client.init();\n        await client.get({ url: mockGetUrl, ...overrideConfig });\n\n        const fetchRequest = fetchMock.calls(mockGetUrl)[0][1] as CallApi;\n        expect(fetchRequest.mode).toBe(overrideConfig.mode);\n        expect(fetchRequest.credentials).toBe(overrideConfig.credentials);\n        expect(fetchRequest.headers).toEqual(\n          expect.objectContaining(\n            overrideConfig.headers,\n          ) as typeof fetchRequest.headers,\n        );\n      });","file":"connection/SupersetClientClass.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"makes a request using url or endpoint","suites":["SupersetClientClass","requests",".post()"],"updatePoint":{"line":411,"column":47},"line":411,"code":"      it('makes a request using url or endpoint', async () => {\n        expect.assertions(2);\n\n        const client = new SupersetClientClass({ protocol, host });\n        await client.init();\n\n        await client.post({ url: mockPostUrl });\n        expect(fetchMock.calls(mockPostUrl)).toHaveLength(1);\n\n        await client.post({ endpoint: mockPostEndpoint });\n        expect(fetchMock.calls(mockPostUrl)).toHaveLength(2);\n      });","file":"connection/SupersetClientClass.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"allows overriding host, headers, mode, and credentials per-request","suites":["SupersetClientClass","requests",".post()"],"updatePoint":{"line":424,"column":76},"line":424,"code":"      it('allows overriding host, headers, mode, and credentials per-request', async () => {\n        expect.assertions(3);\n        const clientConfig: ClientConfig = {\n          host,\n          protocol,\n          mode: 'cors',\n          credentials: 'include',\n          headers: { my: 'header' },\n        };\n        const overrideConfig: ClientConfig = {\n          host: 'override_host',\n          mode: 'no-cors',\n          credentials: 'omit',\n          headers: { my: 'override', another: 'header' },\n        };\n\n        const client = new SupersetClientClass(clientConfig);\n        await client.init();\n        await client.post({ url: mockPostUrl, ...overrideConfig });\n\n        const fetchRequest = fetchMock.calls(mockPostUrl)[0][1] as CallApi;\n\n        expect(fetchRequest.mode).toBe(overrideConfig.mode);\n        expect(fetchRequest.credentials).toBe(overrideConfig.credentials);\n        expect(fetchRequest.headers).toEqual(\n          expect.objectContaining(\n            overrideConfig.headers,\n          ) as typeof fetchRequest.headers,\n        );\n      });","file":"connection/SupersetClientClass.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"supports parsing a response as text","suites":["SupersetClientClass","requests",".post()"],"updatePoint":{"line":455,"column":45},"line":455,"code":"      it('supports parsing a response as text', async () => {\n        expect.assertions(2);\n        const client = new SupersetClientClass({ protocol, host });\n        await client.init();\n        const { text } = await client.post({\n          url: mockTextUrl,\n          parseMethod: 'text',\n        });\n        expect(fetchMock.calls(mockTextUrl)).toHaveLength(1);\n        expect(text).toBe(mockTextJsonResponse);\n      });","file":"connection/SupersetClientClass.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"passes postPayload key,values in the body","suites":["SupersetClientClass","requests",".post()"],"updatePoint":{"line":467,"column":51},"line":467,"code":"      it('passes postPayload key,values in the body', async () => {\n        expect.assertions(3);\n\n        const postPayload = { number: 123, array: [1, 2, 3] };\n        const client = new SupersetClientClass({ protocol, host });\n        await client.init();\n        await client.post({ url: mockPostUrl, postPayload });\n\n        const fetchRequest = fetchMock.calls(mockPostUrl)[0][1] as CallApi;\n        const formData = fetchRequest.body as FormData;\n\n        expect(fetchMock.calls(mockPostUrl)).toHaveLength(1);\n        Object.entries(postPayload).forEach(([key, value]) => {\n          expect(formData.get(key)).toBe(JSON.stringify(value));\n        });\n      });","file":"connection/SupersetClientClass.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"respects the stringify parameter for postPayload key,values","suites":["SupersetClientClass","requests",".post()"],"updatePoint":{"line":484,"column":69},"line":484,"code":"      it('respects the stringify parameter for postPayload key,values', async () => {\n        expect.assertions(3);\n\n        const postPayload = { number: 123, array: [1, 2, 3] };\n        const client = new SupersetClientClass({ protocol, host });\n        await client.init();\n        await client.post({ url: mockPostUrl, postPayload, stringify: false });\n\n        const fetchRequest = fetchMock.calls(mockPostUrl)[0][1] as CallApi;\n        const formData = fetchRequest.body as FormData;\n\n        expect(fetchMock.calls(mockPostUrl)).toHaveLength(1);\n        Object.entries(postPayload).forEach(([key, value]) => {\n          expect(formData.get(key)).toBe(String(value));\n        });\n      });","file":"connection/SupersetClientClass.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should redirect","suites":["SupersetClientClass","when unauthorized"],"updatePoint":{"line":535,"column":23},"line":535,"code":"    it('should redirect', async () => {\n      const client = new SupersetClientClass({});\n\n      let error;\n      try {\n        await client.request({ url: mockRequestUrl, method: 'GET' });\n      } catch (err) {\n        error = err;\n      } finally {\n        const redirectURL = window.location.href;\n        expect(redirectURL).toBe(`/login?next=${mockHref}`);\n        expect(error.status).toBe(401);\n      }\n    });","file":"connection/SupersetClientClass.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should not redirect again if already on login page","suites":["SupersetClientClass","when unauthorized"],"updatePoint":{"line":550,"column":58},"line":550,"code":"    it('should not redirect again if already on login page', async () => {\n      const client = new SupersetClientClass({});\n\n      // @ts-expect-error\n      window.location = {\n        href: '/login?next=something',\n        pathname: '/login',\n        search: '?next=something',\n      };\n\n      let error;\n      try {\n        await client.request({ url: mockRequestUrl, method: 'GET' });\n      } catch (err) {\n        error = err;\n      } finally {\n        expect(window.location.href).toBe('/login?next=something');\n        expect(error.status).toBe(401);\n      }\n    });","file":"connection/SupersetClientClass.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"does nothing if instructed to ignoreUnauthorized","suites":["SupersetClientClass","when unauthorized"],"updatePoint":{"line":570,"column":56},"line":570,"code":"    it('does nothing if instructed to ignoreUnauthorized', async () => {\n      const client = new SupersetClientClass({});\n\n      let error;\n      try {\n        await client.request({\n          url: mockRequestUrl,\n          method: 'GET',\n          ignoreUnauthorized: true,\n        });\n      } catch (err) {\n        error = err;\n      } finally {\n        // unchanged href, no redirect\n        expect(window.location.href).toBe(mockHref);\n        expect(error.status).toBe(401);\n      }\n    });","file":"connection/SupersetClientClass.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"accepts an unauthorizedHandler to override redirect behavior","suites":["SupersetClientClass","when unauthorized"],"updatePoint":{"line":589,"column":68},"line":589,"code":"    it('accepts an unauthorizedHandler to override redirect behavior', async () => {\n      const unauthorizedHandler = jest.fn();\n      const client = new SupersetClientClass({ unauthorizedHandler });\n\n      let error;\n      try {\n        await client.request({\n          url: mockRequestUrl,\n          method: 'GET',\n        });\n      } catch (err) {\n        error = err;\n      } finally {\n        // unchanged href, no redirect\n        expect(window.location.href).toBe(mockHref);\n        expect(error.status).toBe(401);\n        expect(unauthorizedHandler).toHaveBeenCalledTimes(1);\n      }\n    });","file":"connection/SupersetClientClass.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"makes postForm request","suites":["SupersetClientClass",".postForm()"],"updatePoint":{"line":646,"column":30},"line":646,"code":"    it('makes postForm request', async () => {\n      await client.postForm(mockPostFormUrl, {});\n\n      const hiddenForm = createElement.mock.results[0].value;\n      const csrfTokenInput = createElement.mock.results[1].value;\n\n      expect(createElement.mock.calls).toHaveLength(2);\n\n      expect(hiddenForm.action).toBe(mockPostFormUrl);\n      expect(hiddenForm.method).toBe('POST');\n      expect(hiddenForm.target).toBe('_blank');\n\n      expect(csrfTokenInput.type).toBe('hidden');\n      expect(csrfTokenInput.name).toBe('csrf_token');\n      expect(csrfTokenInput.value).toBe(1234);\n\n      expect(appendChild.mock.calls).toHaveLength(1);\n      expect(removeChild.mock.calls).toHaveLength(1);\n      expect(authSpy).toHaveBeenCalledTimes(1);\n    });","file":"connection/SupersetClientClass.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"makes postForm request with guest token","suites":["SupersetClientClass",".postForm()"],"updatePoint":{"line":667,"column":47},"line":667,"code":"    it('makes postForm request with guest token', async () => {\n      client = new SupersetClientClass({ protocol, host, guestToken });\n      await client.init();\n\n      await client.postForm(mockPostFormUrl, {});\n\n      const guestTokenInput = createElement.mock.results[2].value;\n\n      expect(createElement.mock.calls).toHaveLength(3);\n\n      expect(guestTokenInput.type).toBe('hidden');\n      expect(guestTokenInput.name).toBe('guest_token');\n      expect(guestTokenInput.value).toBe(guestToken);\n\n      expect(appendChild.mock.calls).toHaveLength(1);\n      expect(removeChild.mock.calls).toHaveLength(1);\n      expect(authSpy).toHaveBeenCalledTimes(1);\n    });","file":"connection/SupersetClientClass.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"makes postForm request with payload","suites":["SupersetClientClass",".postForm()"],"updatePoint":{"line":686,"column":43},"line":686,"code":"    it('makes postForm request with payload', async () => {\n      await client.postForm(mockPostFormUrl, { form_data: postFormPayload });\n\n      const postFormPayloadInput = createElement.mock.results[1].value;\n\n      expect(createElement.mock.calls).toHaveLength(3);\n\n      expect(postFormPayloadInput.type).toBe('hidden');\n      expect(postFormPayloadInput.name).toBe('form_data');\n      expect(postFormPayloadInput.value).toBe(postFormPayload);\n\n      expect(appendChild.mock.calls).toHaveLength(1);\n      expect(removeChild.mock.calls).toHaveLength(1);\n      expect(submit.mock.calls).toHaveLength(1);\n      expect(authSpy).toHaveBeenCalledTimes(1);\n    });","file":"connection/SupersetClientClass.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should do nothing when url is empty string","suites":["SupersetClientClass",".postForm()"],"updatePoint":{"line":703,"column":50},"line":703,"code":"    it('should do nothing when url is empty string', async () => {\n      const result = await client.postForm('', {});\n      expect(result).toBeUndefined();\n      expect(createElement.mock.calls).toHaveLength(0);\n      expect(appendChild.mock.calls).toHaveLength(0);\n      expect(removeChild.mock.calls).toHaveLength(0);\n      expect(authSpy).toHaveBeenCalledTimes(0);\n    });","file":"connection/SupersetClientClass.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"requires either idealFontSize or maxHeight","suites":["computeMaxFontSize(input)","returns dimension of the given text"],"updatePoint":{"line":28,"column":50},"line":28,"code":"    it('requires either idealFontSize or maxHeight', () => {\n      expect(() => {\n        computeMaxFontSize({\n          text: SAMPLE_TEXT[0],\n        });\n      }).toThrow();\n    });","file":"dimension/computeMaxFontSize.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"computes maximum font size for given maxWidth and maxHeight","suites":["computeMaxFontSize(input)","returns dimension of the given text"],"updatePoint":{"line":35,"column":67},"line":35,"code":"    it('computes maximum font size for given maxWidth and maxHeight', () => {\n      expect(\n        computeMaxFontSize({\n          maxWidth: 400,\n          maxHeight: 30,\n          text: 'sample text',\n        }),\n      ).toEqual(30);\n    });","file":"dimension/computeMaxFontSize.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"computes maximum font size for given idealFontSize and maxHeight","suites":["computeMaxFontSize(input)","returns dimension of the given text"],"updatePoint":{"line":44,"column":72},"line":44,"code":"    it('computes maximum font size for given idealFontSize and maxHeight', () => {\n      expect(\n        computeMaxFontSize({\n          maxHeight: 20,\n          idealFontSize: 40,\n          text: SAMPLE_TEXT[0],\n        }),\n      ).toEqual(20);\n    });","file":"dimension/computeMaxFontSize.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"computes maximum font size for given maxWidth and idealFontSize","suites":["computeMaxFontSize(input)","returns dimension of the given text"],"updatePoint":{"line":53,"column":71},"line":53,"code":"    it('computes maximum font size for given maxWidth and idealFontSize', () => {\n      expect(\n        computeMaxFontSize({\n          maxWidth: 250,\n          idealFontSize: 40,\n          text: SAMPLE_TEXT[0],\n        }),\n      ).toEqual(25);\n    });","file":"dimension/computeMaxFontSize.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"ensure idealFontSize is used if the maximum font size calculation goes below zero","suites":["computeMaxFontSize(input)","returns dimension of the given text"],"updatePoint":{"line":62,"column":89},"line":62,"code":"    it('ensure idealFontSize is used if the maximum font size calculation goes below zero', () => {\n      expect(\n        computeMaxFontSize({\n          maxWidth: 5,\n          idealFontSize: 34,\n          text: SAMPLE_TEXT[0],\n        }),\n      ).toEqual(34);\n    });","file":"dimension/computeMaxFontSize.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"takes an array of text as argument","suites":["getMultipleTextDimension(input)","returns dimension of the given text"],"updatePoint":{"line":28,"column":42},"line":28,"code":"    it('takes an array of text as argument', () => {\n      expect(\n        getMultipleTextDimensions({\n          texts: [SAMPLE_TEXT[0], SAMPLE_TEXT[1], ''],\n        }),\n      ).toEqual([\n        {\n          height: 20,\n          width: 200,\n        },\n        {\n          height: 20,\n          width: 300,\n        },\n        {\n          height: 0,\n          width: 0,\n        },\n      ]);\n    });","file":"dimension/getMultipleTextDimensions.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"handles empty text","suites":["getMultipleTextDimension(input)","returns dimension of the given text"],"updatePoint":{"line":48,"column":26},"line":48,"code":"    it('handles empty text', () => {\n      expect(\n        getMultipleTextDimensions({\n          texts: ['', ''],\n        }),\n      ).toEqual([\n        {\n          height: 0,\n          width: 0,\n        },\n        {\n          height: 0,\n          width: 0,\n        },\n      ]);\n    });","file":"dimension/getMultipleTextDimensions.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"handles duplicate text","suites":["getMultipleTextDimension(input)","returns dimension of the given text"],"updatePoint":{"line":64,"column":30},"line":64,"code":"    it('handles duplicate text', () => {\n      expect(\n        getMultipleTextDimensions({\n          texts: [SAMPLE_TEXT[0], SAMPLE_TEXT[0]],\n        }),\n      ).toEqual([\n        {\n          height: 20,\n          width: 200,\n        },\n        {\n          height: 20,\n          width: 200,\n        },\n      ]);\n    });","file":"dimension/getMultipleTextDimensions.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"accepts provided class via className","suites":["getMultipleTextDimension(input)","returns dimension of the given text"],"updatePoint":{"line":80,"column":44},"line":80,"code":"    it('accepts provided class via className', () => {\n      expect(\n        getMultipleTextDimensions({\n          texts: [SAMPLE_TEXT[0], SAMPLE_TEXT[1]],\n          className: 'test-class',\n        }),\n      ).toEqual([\n        {\n          height: 20,\n          width: 100,\n        },\n        {\n          height: 20,\n          width: 150,\n        },\n      ]);\n    });","file":"dimension/getMultipleTextDimensions.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"accepts provided style.font","suites":["getMultipleTextDimension(input)","returns dimension of the given text"],"updatePoint":{"line":97,"column":35},"line":97,"code":"    it('accepts provided style.font', () => {\n      expect(\n        getMultipleTextDimensions({\n          texts: [SAMPLE_TEXT[0], SAMPLE_TEXT[1]],\n          style: {\n            font: 'italic 700 30px Lobster',\n          },\n        }),\n      ).toEqual([\n        {\n          height: 30, // 20 * (30/20) [fontSize=30]\n          width: 1125, // 200 * 1.25 [fontFamily=Lobster] * (30/20) [fontSize=30] * 1.5 [fontStyle=italic] * 2 [fontWeight=700]\n        },\n        {\n          height: 30,\n          width: 1688, // 300 * 1.25 [fontFamily=Lobster] * (30/20) [fontSize=30] * 1.5 [fontStyle=italic] * 2 [fontWeight=700]\n        },\n      ]);\n    });","file":"dimension/getMultipleTextDimensions.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"accepts provided style.fontFamily","suites":["getMultipleTextDimension(input)","returns dimension of the given text"],"updatePoint":{"line":116,"column":41},"line":116,"code":"    it('accepts provided style.fontFamily', () => {\n      expect(\n        getMultipleTextDimensions({\n          texts: [SAMPLE_TEXT[0], SAMPLE_TEXT[1]],\n          style: {\n            fontFamily: 'Lobster',\n          },\n        }),\n      ).toEqual([\n        {\n          height: 20,\n          width: 250, // 200 * 1.25 [fontFamily=Lobster]\n        },\n        {\n          height: 20,\n          width: 375, // 300 * 1.25 [fontFamily=Lobster]\n        },\n      ]);\n    });","file":"dimension/getMultipleTextDimensions.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"accepts provided style.fontSize","suites":["getMultipleTextDimension(input)","returns dimension of the given text"],"updatePoint":{"line":135,"column":39},"line":135,"code":"    it('accepts provided style.fontSize', () => {\n      expect(\n        getMultipleTextDimensions({\n          texts: [SAMPLE_TEXT[0], SAMPLE_TEXT[1]],\n          style: {\n            fontSize: '40px',\n          },\n        }),\n      ).toEqual([\n        {\n          height: 40, // 20 [baseHeight] * (40/20) [fontSize=40]\n          width: 400, // 200 [baseWidth] * (40/20) [fontSize=40]\n        },\n        {\n          height: 40,\n          width: 600, // 300 [baseWidth] * (40/20) [fontSize=40]\n        },\n      ]);\n    });","file":"dimension/getMultipleTextDimensions.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"accepts provided style.fontStyle","suites":["getMultipleTextDimension(input)","returns dimension of the given text"],"updatePoint":{"line":154,"column":40},"line":154,"code":"    it('accepts provided style.fontStyle', () => {\n      expect(\n        getMultipleTextDimensions({\n          texts: [SAMPLE_TEXT[0], SAMPLE_TEXT[1]],\n          style: {\n            fontStyle: 'italic',\n          },\n        }),\n      ).toEqual([\n        {\n          height: 20,\n          width: 300, // 200 [baseWidth] * 1.5 [fontStyle=italic]\n        },\n        {\n          height: 20,\n          width: 450, // 300 [baseWidth] * 1.5 [fontStyle=italic]\n        },\n      ]);\n    });","file":"dimension/getMultipleTextDimensions.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"accepts provided style.fontWeight","suites":["getMultipleTextDimension(input)","returns dimension of the given text"],"updatePoint":{"line":173,"column":41},"line":173,"code":"    it('accepts provided style.fontWeight', () => {\n      expect(\n        getMultipleTextDimensions({\n          texts: [SAMPLE_TEXT[0], SAMPLE_TEXT[1]],\n          style: {\n            fontWeight: 700,\n          },\n        }),\n      ).toEqual([\n        {\n          height: 20,\n          width: 400, // 200 [baseWidth] * 2 [fontWeight=700]\n        },\n        {\n          height: 20,\n          width: 600, // 300 [baseWidth] * 2 [fontWeight=700]\n        },\n      ]);\n    });","file":"dimension/getMultipleTextDimensions.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"accepts provided style.letterSpacing","suites":["getMultipleTextDimension(input)","returns dimension of the given text"],"updatePoint":{"line":192,"column":44},"line":192,"code":"    it('accepts provided style.letterSpacing', () => {\n      expect(\n        getMultipleTextDimensions({\n          texts: [SAMPLE_TEXT[0], SAMPLE_TEXT[1]],\n          style: {\n            letterSpacing: '1.1',\n          },\n        }),\n      ).toEqual([\n        {\n          height: 20,\n          width: 221, // Ceiling(200 [baseWidth] * 1.1 [letterSpacing=1.1])\n        },\n        {\n          height: 20,\n          width: 330, // Ceiling(300 [baseWidth] * 1.1 [letterSpacing=1.1])\n        },\n      ]);\n    });","file":"dimension/getMultipleTextDimensions.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"cleans up DOM","suites":["getMultipleTextDimension(input)","returns dimension of the given text"],"updatePoint":{"line":212,"column":19},"line":212,"code":"  it('cleans up DOM', async () => {\n    getMultipleTextDimensions({\n      texts: [SAMPLE_TEXT[0], SAMPLE_TEXT[1]],\n    });\n\n    expect(document.querySelectorAll('svg')).toHaveLength(1);\n    await promiseTimeout(() => {}, 501);\n    expect(document.querySelector('svg')).toBeNull();\n  });","file":"dimension/getMultipleTextDimensions.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"returns default value for default dimension","suites":["getTextDimension(input)","returns default dimension if getBBox() is not available"],"updatePoint":{"line":25,"column":51},"line":25,"code":"    it('returns default value for default dimension', () => {\n      expect(\n        getTextDimension({\n          text: SAMPLE_TEXT[0],\n        }),\n      ).toEqual({\n        height: 20,\n        width: 100,\n      });\n    });","file":"dimension/getTextDimension.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"return specified value if specified","suites":["getTextDimension(input)","returns default dimension if getBBox() is not available"],"updatePoint":{"line":35,"column":43},"line":35,"code":"    it('return specified value if specified', () => {\n      expect(\n        getTextDimension(\n          {\n            text: SAMPLE_TEXT[0],\n          },\n          {\n            height: 30,\n            width: 400,\n          },\n        ),\n      ).toEqual({\n        height: 30,\n        width: 400,\n      });\n    });","file":"dimension/getTextDimension.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"takes text as argument","suites":["getTextDimension(input)","returns dimension of the given text"],"updatePoint":{"line":56,"column":30},"line":56,"code":"    it('takes text as argument', () => {\n      expect(\n        getTextDimension({\n          text: SAMPLE_TEXT[0],\n        }),\n      ).toEqual({\n        height: 20,\n        width: 200,\n      });\n    });","file":"dimension/getTextDimension.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"accepts provided class via className","suites":["getTextDimension(input)","returns dimension of the given text"],"updatePoint":{"line":66,"column":44},"line":66,"code":"    it('accepts provided class via className', () => {\n      expect(\n        getTextDimension({\n          text: SAMPLE_TEXT[0],\n          className: 'test-class',\n        }),\n      ).toEqual({\n        height: 20,\n        width: 100, // width is 100 after adding class\n      });\n    });","file":"dimension/getTextDimension.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"accepts provided style.font","suites":["getTextDimension(input)","returns dimension of the given text"],"updatePoint":{"line":77,"column":35},"line":77,"code":"    it('accepts provided style.font', () => {\n      expect(\n        getTextDimension({\n          text: SAMPLE_TEXT[0],\n          style: {\n            font: 'italic 700 30px Lobster',\n          },\n        }),\n      ).toEqual({\n        height: 30, // 20 * (30/20) [fontSize=30]\n        width: 1125, // 250 [fontFamily=Lobster] * (30/20) [fontSize=30] * 1.5 [fontStyle=italic] * 2 [fontWeight=700]\n      });\n    });","file":"dimension/getTextDimension.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"accepts provided style.fontFamily","suites":["getTextDimension(input)","returns dimension of the given text"],"updatePoint":{"line":90,"column":41},"line":90,"code":"    it('accepts provided style.fontFamily', () => {\n      expect(\n        getTextDimension({\n          text: SAMPLE_TEXT[0],\n          style: {\n            fontFamily: 'Lobster',\n          },\n        }),\n      ).toEqual({\n        height: 20,\n        width: 250, // (250 [fontFamily=Lobster]\n      });\n    });","file":"dimension/getTextDimension.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"accepts provided style.fontSize","suites":["getTextDimension(input)","returns dimension of the given text"],"updatePoint":{"line":103,"column":39},"line":103,"code":"    it('accepts provided style.fontSize', () => {\n      expect(\n        getTextDimension({\n          text: SAMPLE_TEXT[0],\n          style: {\n            fontSize: '40px',\n          },\n        }),\n      ).toEqual({\n        height: 40, // 20 [baseHeight] * (40/20) [fontSize=40]\n        width: 400, // 200 [baseWidth] * (40/20) [fontSize=40]\n      });\n    });","file":"dimension/getTextDimension.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"accepts provided style.fontStyle","suites":["getTextDimension(input)","returns dimension of the given text"],"updatePoint":{"line":116,"column":40},"line":116,"code":"    it('accepts provided style.fontStyle', () => {\n      expect(\n        getTextDimension({\n          text: SAMPLE_TEXT[0],\n          style: {\n            fontStyle: 'italic',\n          },\n        }),\n      ).toEqual({\n        height: 20,\n        width: 300, // 200 [baseWidth] * 1.5 [fontStyle=italic]\n      });\n    });","file":"dimension/getTextDimension.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"accepts provided style.fontWeight","suites":["getTextDimension(input)","returns dimension of the given text"],"updatePoint":{"line":129,"column":41},"line":129,"code":"    it('accepts provided style.fontWeight', () => {\n      expect(\n        getTextDimension({\n          text: SAMPLE_TEXT[0],\n          style: {\n            fontWeight: 700,\n          },\n        }),\n      ).toEqual({\n        height: 20,\n        width: 400, // 200 [baseWidth] * 2 [fontWeight=700]\n      });\n    });","file":"dimension/getTextDimension.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"accepts provided style.letterSpacing","suites":["getTextDimension(input)","returns dimension of the given text"],"updatePoint":{"line":142,"column":44},"line":142,"code":"    it('accepts provided style.letterSpacing', () => {\n      expect(\n        getTextDimension({\n          text: SAMPLE_TEXT[0],\n          style: {\n            letterSpacing: '1.1',\n          },\n        }),\n      ).toEqual({\n        height: 20,\n        width: 221, // Ceiling(200 [baseWidth] * 1.1 [letterSpacing=1.1])\n      });\n    });","file":"dimension/getTextDimension.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"handle empty text","suites":["getTextDimension(input)","returns dimension of the given text"],"updatePoint":{"line":155,"column":25},"line":155,"code":"    it('handle empty text', () => {\n      expect(\n        getTextDimension({\n          text: '',\n        }),\n      ).toEqual({\n        height: 0,\n        width: 0,\n      });\n    });","file":"dimension/getTextDimension.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"cleans up DOM","suites":["getTextDimension(input)","returns dimension of the given text"],"updatePoint":{"line":166,"column":19},"line":166,"code":"  it('cleans up DOM', async () => {\n    getTextDimension({\n      text: SAMPLE_TEXT[0],\n    });\n\n    expect(document.querySelectorAll('svg')).toHaveLength(1);\n    await promiseTimeout(() => {}, 501);\n    expect(document.querySelector('svg')).toBeNull();\n  });","file":"dimension/getTextDimension.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"combines two given margin","suites":["mergeMargin(margin1, margin2, mode?)"],"updatePoint":{"line":23,"column":31},"line":23,"code":"  it('combines two given margin', () => {\n    expect(\n      mergeMargin(\n        {\n          top: 1,\n          left: 1,\n          bottom: 2,\n          right: 2,\n        },\n        {\n          top: 2,\n          left: 2,\n          bottom: 1,\n          right: 1,\n        },\n      ),\n    ).toEqual({\n      top: 2,\n      left: 2,\n      bottom: 2,\n      right: 2,\n    });\n  });","file":"dimension/mergeMargin.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"works if margin1 is not defined","suites":["mergeMargin(margin1, margin2, mode?)","default values"],"updatePoint":{"line":47,"column":39},"line":47,"code":"    it('works if margin1 is not defined', () => {\n      expect(\n        mergeMargin(undefined, {\n          top: 2,\n          left: 2,\n          bottom: 1,\n          right: 1,\n        }),\n      ).toEqual({\n        top: 2,\n        left: 2,\n        bottom: 1,\n        right: 1,\n      });\n    });","file":"dimension/mergeMargin.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"works if margin2 is not defined","suites":["mergeMargin(margin1, margin2, mode?)","default values"],"updatePoint":{"line":62,"column":39},"line":62,"code":"    it('works if margin2 is not defined', () => {\n      expect(\n        mergeMargin(\n          {\n            top: 1,\n            left: 1,\n            bottom: 2,\n            right: 2,\n          },\n          undefined,\n        ),\n      ).toEqual({\n        top: 1,\n        left: 1,\n        bottom: 2,\n        right: 2,\n      });\n    });","file":"dimension/mergeMargin.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"use 0 for the side that is not specified","suites":["mergeMargin(margin1, margin2, mode?)","default values"],"updatePoint":{"line":80,"column":48},"line":80,"code":"    it('use 0 for the side that is not specified', () => {\n      expect(mergeMargin({}, {})).toEqual({\n        top: 0,\n        left: 0,\n        bottom: 0,\n        right: 0,\n      });\n    });","file":"dimension/mergeMargin.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"if mode=expand, returns the larger margin for each side","suites":["mergeMargin(margin1, margin2, mode?)","mode"],"updatePoint":{"line":90,"column":63},"line":90,"code":"    it('if mode=expand, returns the larger margin for each side', () => {\n      expect(\n        mergeMargin(\n          {\n            top: 1,\n            left: 1,\n            bottom: 2,\n            right: 2,\n          },\n          {\n            top: 2,\n            left: 2,\n            bottom: 1,\n            right: 1,\n          },\n          'expand',\n        ),\n      ).toEqual({\n        top: 2,\n        left: 2,\n        bottom: 2,\n        right: 2,\n      });\n    });","file":"dimension/mergeMargin.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"if mode=shrink, returns the smaller margin for each side","suites":["mergeMargin(margin1, margin2, mode?)","mode"],"updatePoint":{"line":114,"column":64},"line":114,"code":"    it('if mode=shrink, returns the smaller margin for each side', () => {\n      expect(\n        mergeMargin(\n          {\n            top: 1,\n            left: 1,\n            bottom: 2,\n            right: 2,\n          },\n          {\n            top: 2,\n            left: 2,\n            bottom: 1,\n            right: 1,\n          },\n          'shrink',\n        ),\n      ).toEqual({\n        top: 1,\n        left: 1,\n        bottom: 1,\n        right: 1,\n      });\n    });","file":"dimension/mergeMargin.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"expand by default","suites":["mergeMargin(margin1, margin2, mode?)","mode"],"updatePoint":{"line":138,"column":25},"line":138,"code":"    it('expand by default', () => {\n      expect(\n        mergeMargin(\n          {\n            top: 1,\n            left: 1,\n            bottom: 2,\n            right: 2,\n          },\n          {\n            top: 2,\n            left: 2,\n            bottom: 1,\n            right: 1,\n          },\n        ),\n      ).toEqual({\n        top: 2,\n        left: 2,\n        bottom: 2,\n        right: 2,\n      });\n    });","file":"dimension/mergeMargin.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"works correctly for negative margins","suites":["mergeMargin(margin1, margin2, mode?)","mode"],"updatePoint":{"line":162,"column":42},"line":162,"code":"  it('works correctly for negative margins', () => {\n    expect(\n      mergeMargin(\n        {\n          top: -3,\n          left: -3,\n          bottom: -2,\n          right: -2,\n        },\n        {\n          top: -2,\n          left: -2,\n          bottom: 0,\n          right: -1,\n        },\n      ),\n    ).toEqual({\n      top: -2,\n      left: -2,\n      bottom: 0,\n      right: -1,\n    });\n  });","file":"dimension/mergeMargin.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"if there are NaN or null, use another value","suites":["mergeMargin(margin1, margin2, mode?)","mode"],"updatePoint":{"line":185,"column":49},"line":185,"code":"  it('if there are NaN or null, use another value', () => {\n    expect(\n      mergeMargin(\n        {\n          top: 10,\n          // @ts-ignore to let us pass `null` for testing\n          left: null,\n          bottom: 20,\n          right: NaN,\n        },\n        {\n          top: NaN,\n          left: 30,\n          bottom: null,\n          right: 40,\n        },\n      ),\n    ).toEqual({\n      top: 10,\n      left: 30,\n      bottom: 20,\n      right: 40,\n    });\n  });","file":"dimension/mergeMargin.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"handles string \"auto\"","suites":["parseLength(input)"],"updatePoint":{"line":23,"column":27},"line":23,"code":"  it('handles string \"auto\"', () => {\n    expect(parseLength('auto')).toEqual({ isDynamic: true, multiplier: 1 });\n  });","file":"dimension/parseLength.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"handles strings with % at the end","suites":["parseLength(input)"],"updatePoint":{"line":27,"column":39},"line":27,"code":"  it('handles strings with % at the end', () => {\n    expect(parseLength('100%')).toEqual({ isDynamic: true, multiplier: 1 });\n    expect(parseLength('50%')).toEqual({ isDynamic: true, multiplier: 0.5 });\n    expect(parseLength('0%')).toEqual({ isDynamic: true, multiplier: 0 });\n  });","file":"dimension/parseLength.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"handles strings that are numbers with px at the end","suites":["parseLength(input)"],"updatePoint":{"line":33,"column":57},"line":33,"code":"  it('handles strings that are numbers with px at the end', () => {\n    expect(parseLength('100px')).toEqual({ isDynamic: false, value: 100 });\n    expect(parseLength('20.5px')).toEqual({ isDynamic: false, value: 20.5 });\n  });","file":"dimension/parseLength.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"handles strings that are numbers","suites":["parseLength(input)"],"updatePoint":{"line":38,"column":38},"line":38,"code":"  it('handles strings that are numbers', () => {\n    expect(parseLength('100')).toEqual({ isDynamic: false, value: 100 });\n    expect(parseLength('40.5')).toEqual({ isDynamic: false, value: 40.5 });\n    expect(parseLength('20.0')).toEqual({ isDynamic: false, value: 20 });\n  });","file":"dimension/parseLength.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"handles numbers","suites":["parseLength(input)"],"updatePoint":{"line":44,"column":21},"line":44,"code":"  it('handles numbers', () => {\n    expect(parseLength(100)).toEqual({ isDynamic: false, value: 100 });\n    expect(parseLength(0)).toEqual({ isDynamic: false, value: 0 });\n  });","file":"dimension/parseLength.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"returns default value for default dimension","suites":["getBBoxCeil(node, defaultDimension)","returns default dimension if getBBox() is not available"],"updatePoint":{"line":25,"column":51},"line":25,"code":"    it('returns default value for default dimension', () => {\n      expect(getBBoxCeil(createTextNode())).toEqual({\n        height: 20,\n        width: 100,\n      });\n    });","file":"dimension/svg/getBBoxCeil.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"return specified value if specified","suites":["getBBoxCeil(node, defaultDimension)","returns default dimension if getBBox() is not available"],"updatePoint":{"line":31,"column":43},"line":31,"code":"    it('return specified value if specified', () => {\n      expect(\n        getBBoxCeil(createTextNode(), {\n          height: 30,\n          width: 400,\n        }),\n      ).toEqual({\n        height: 30,\n        width: 400,\n      });\n    });","file":"dimension/svg/getBBoxCeil.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"converts to ceiling if value is not integer","suites":["getBBoxCeil(node, defaultDimension)","returns ceiling of the svg element"],"updatePoint":{"line":44,"column":51},"line":44,"code":"    it('converts to ceiling if value is not integer', () => {\n      expect(\n        getBBoxCeil(createTextNode(), { height: 10.6, width: 11.1 }),\n      ).toEqual({\n        height: 11,\n        width: 12,\n      });\n    });","file":"dimension/svg/getBBoxCeil.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"does nothing if value is integer","suites":["getBBoxCeil(node, defaultDimension)","returns ceiling of the svg element"],"updatePoint":{"line":53,"column":40},"line":53,"code":"    it('does nothing if value is integer', () => {\n      expect(getBBoxCeil(createTextNode())).toEqual({\n        height: 20,\n        width: 100,\n      });\n    });","file":"dimension/svg/getBBoxCeil.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"creates node in the specified container","suites":["LazyFactory","createInContainer()"],"updatePoint":{"line":24,"column":47},"line":24,"code":"    it('creates node in the specified container', () => {\n      const factory = new LazyFactory(() => document.createElement('div'));\n      const div = factory.createInContainer();\n      const innerDiv = factory.createInContainer(div);\n      expect(div.parentNode).toEqual(document.body);\n      expect(innerDiv.parentNode).toEqual(div);\n    });","file":"dimension/svg/LazyFactory.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"reuses existing","suites":["LazyFactory","createInContainer()"],"updatePoint":{"line":31,"column":23},"line":31,"code":"    it('reuses existing', () => {\n      const factoryFn = jest.fn(() => document.createElement('div'));\n      const factory = new LazyFactory(factoryFn);\n      const div1 = factory.createInContainer();\n      const div2 = factory.createInContainer();\n      expect(div1).toBe(div2);\n      expect(factoryFn).toHaveBeenCalledTimes(1);\n    });","file":"dimension/svg/LazyFactory.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"removes node from container","suites":["LazyFactory","removeFromContainer"],"updatePoint":{"line":41,"column":35},"line":41,"code":"    it('removes node from container', () => {\n      const factory = new LazyFactory(() => document.createElement('div'));\n      const div = factory.createInContainer();\n      const innerDiv = factory.createInContainer(div);\n      expect(div.parentNode).toEqual(document.body);\n      expect(innerDiv.parentNode).toEqual(div);\n      factory.removeFromContainer();\n      factory.removeFromContainer(div);\n      expect(div.parentNode).toBeNull();\n      expect(innerDiv.parentNode).toBeNull();\n    });","file":"dimension/svg/LazyFactory.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"does not remove if others are using","suites":["LazyFactory","removeFromContainer"],"updatePoint":{"line":52,"column":43},"line":52,"code":"    it('does not remove if others are using', () => {\n      const factory = new LazyFactory(() => document.createElement('div'));\n      const div1 = factory.createInContainer();\n      factory.createInContainer();\n      factory.removeFromContainer();\n      expect(div1.parentNode).toEqual(document.body);\n      factory.removeFromContainer();\n      expect(div1.parentNode).toBeNull();\n    });","file":"dimension/svg/LazyFactory.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"does not crash if try to remove already removed node","suites":["LazyFactory","removeFromContainer"],"updatePoint":{"line":61,"column":60},"line":61,"code":"    it('does not crash if try to remove already removed node', () => {\n      const factory = new LazyFactory(() => document.createElement('div'));\n      factory.createInContainer();\n      factory.removeFromContainer();\n      expect(() => factory.removeFromContainer()).not.toThrow();\n    });","file":"dimension/svg/LazyFactory.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"handles empty options","suites":["updateTextNode(node, options)"],"updatePoint":{"line":29,"column":27},"line":29,"code":"  it('handles empty options', () => {\n    const node = updateTextNode(createTextNode());\n    expect(node.getAttribute('class')).toEqual('');\n    expect(node.style.font).toEqual('');\n    expect(node.style.fontWeight).toEqual('');\n    expect(node.style.fontSize).toEqual('');\n    expect(node.style.fontStyle).toEqual('');\n    expect(node.style.fontFamily).toEqual('');\n    expect(node.style.letterSpacing).toEqual('');\n    expect(node.textContent).toEqual('');\n  });","file":"dimension/svg/updateTextNode.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"handles setting class","suites":["updateTextNode(node, options)"],"updatePoint":{"line":41,"column":27},"line":41,"code":"  it('handles setting class', () => {\n    const node = updateTextNode(createTextNode(), { className: 'abc' });\n    expect(node.getAttribute('class')).toEqual('abc');\n    expect(node.style.font).toEqual('');\n    expect(node.style.fontWeight).toEqual('');\n    expect(node.style.fontSize).toEqual('');\n    expect(node.style.fontStyle).toEqual('');\n    expect(node.style.fontFamily).toEqual('');\n    expect(node.style.letterSpacing).toEqual('');\n    expect(node.textContent).toEqual('');\n  });","file":"dimension/svg/updateTextNode.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"handles setting text","suites":["updateTextNode(node, options)"],"updatePoint":{"line":53,"column":26},"line":53,"code":"  it('handles setting text', () => {\n    const node = updateTextNode(createTextNode(), { text: 'abc' });\n    expect(node.getAttribute('class')).toEqual('');\n    expect(node.style.font).toEqual('');\n    expect(node.style.fontWeight).toEqual('');\n    expect(node.style.fontSize).toEqual('');\n    expect(node.style.fontStyle).toEqual('');\n    expect(node.style.fontFamily).toEqual('');\n    expect(node.style.letterSpacing).toEqual('');\n    expect(node.textContent).toEqual('abc');\n  });","file":"dimension/svg/updateTextNode.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"handles setting font","suites":["updateTextNode(node, options)"],"updatePoint":{"line":65,"column":26},"line":65,"code":"  it('handles setting font', () => {\n    const node = updateTextNode(createTextNode(), {\n      style: {\n        font: 'italic 30px Lobster 700',\n      },\n    });\n    expect(node.getAttribute('class')).toEqual('');\n    expect(node.style.fontWeight).toEqual('700');\n    expect(node.style.fontSize).toEqual('30px');\n    expect(node.style.fontStyle).toEqual('italic');\n    expect(node.style.fontFamily).toEqual('Lobster');\n    expect(node.style.letterSpacing).toEqual('');\n    expect(node.textContent).toEqual('');\n  });","file":"dimension/svg/updateTextNode.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"handles setting specific font style","suites":["updateTextNode(node, options)"],"updatePoint":{"line":80,"column":41},"line":80,"code":"  it('handles setting specific font style', () => {\n    const node = updateTextNode(createTextNode(), {\n      style: {\n        fontFamily: 'Lobster',\n        fontStyle: 'italic',\n        fontWeight: '700',\n        fontSize: '30px',\n        letterSpacing: 1.1,\n      },\n    });\n    expect(node.getAttribute('class')).toEqual('');\n    expect(node.style.fontWeight).toEqual('700');\n    expect(node.style.fontSize).toEqual('30px');\n    expect(node.style.fontStyle).toEqual('italic');\n    expect(node.style.fontFamily).toEqual('Lobster');\n    expect(node.style.letterSpacing).toEqual('1.1');\n    expect(node.textContent).toEqual('');\n  });","file":"dimension/svg/updateTextNode.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"assigns to window","suites":["shared modules"],"updatePoint":{"line":27,"column":23},"line":27,"code":"  it('assigns to window', async () => {\n    const fakeModule = { foo: 'bar' };\n    const fetchModule = jest.fn().mockResolvedValue(fakeModule);\n\n    await defineSharedModule('test-module', fetchModule);\n\n    expect((window as any)['__superset__/test-module']).toStrictEqual(\n      fakeModule,\n    );\n  });","file":"dynamic-plugins/shared-modules.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"resolves to the same reference every time","suites":["shared modules"],"updatePoint":{"line":38,"column":47},"line":38,"code":"  it('resolves to the same reference every time', async () => {\n    const fakeModule = { foo: 'bar' };\n    const fetchModule = jest.fn().mockResolvedValue(fakeModule);\n\n    const result1 = await defineSharedModule('test-module', fetchModule);\n    const result2 = await defineSharedModule('test-module', fetchModule);\n\n    expect(result1).toStrictEqual(fakeModule);\n    expect(result2).toStrictEqual(fakeModule);\n  });","file":"dynamic-plugins/shared-modules.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"does not redefine unnecessarily","suites":["shared modules"],"updatePoint":{"line":49,"column":37},"line":49,"code":"  it('does not redefine unnecessarily', async () => {\n    const fakeModule = { foo: 'bar' };\n    const fetchModule = jest.fn().mockResolvedValue(fakeModule);\n    const duplicateFetchModule = jest.fn().mockResolvedValue(fakeModule);\n\n    const result1 = await defineSharedModule('test-module', fetchModule);\n    const result2 = await defineSharedModule(\n      'test-module',\n      duplicateFetchModule,\n    );\n\n    expect(result1).toStrictEqual(fakeModule);\n    expect(result2).toStrictEqual(fakeModule);\n    expect(duplicateFetchModule).not.toHaveBeenCalled();\n  });","file":"dynamic-plugins/shared-modules.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"deduplicates in-progress definitions","suites":["shared modules"],"updatePoint":{"line":65,"column":42},"line":65,"code":"  it('deduplicates in-progress definitions', async () => {\n    const fakeModule = { foo: 'bar' };\n    // get a promise that actually takes a moment;\n    const fetchModule = jest\n      .fn()\n      .mockImplementation(() =>\n        Promise.resolve(setImmediate).then(() => fakeModule),\n      );\n\n    const promise1 = defineSharedModule('test-module', fetchModule);\n    const promise2 = defineSharedModule('test-module', fetchModule);\n    const [result1, result2] = await Promise.all([promise1, promise2]);\n\n    expect(fetchModule).toHaveBeenCalledTimes(1);\n    expect(result1).toStrictEqual(result2);\n  });","file":"dynamic-plugins/shared-modules.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"shares a map of modules","suites":["shared modules"],"updatePoint":{"line":82,"column":29},"line":82,"code":"  it('shares a map of modules', async () => {\n    const foo = { foo: 'bar' };\n    const fizz = { fizz: 'buzz' };\n    await defineSharedModules({\n      'module-foo': async () => foo,\n      'module-fizz': async () => fizz,\n    });\n\n    expect((window as any)['__superset__/module-foo']).toEqual(foo);\n    expect((window as any)['__superset__/module-fizz']).toEqual(fizz);\n  });","file":"dynamic-plugins/shared-modules.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"exports modules","suites":["index"],"updatePoint":{"line":33,"column":21},"line":33,"code":"  it('exports modules', () => {\n    [\n      ExtensibleFunction,\n      Plugin,\n      Preset,\n      Registry,\n      RegistryWithDefaultKey,\n      convertKeysToCamelCase,\n      isDefined,\n      isRequired,\n      makeSingleton,\n    ].forEach(x => expect(x).toBeDefined());\n  });","file":"index.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"evalExpression evaluates constants correctly","suites":[],"updatePoint":{"line":22,"column":50},"line":22,"code":"test('evalExpression evaluates constants correctly', () => {\n  expect(evalExpression('0', 10)).toEqual(0);\n  expect(evalExpression('0.123456', 0)).toEqual(0.123456);\n  expect(evalExpression('789', 100)).toEqual(789);\n});","file":"math-expression/index.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"evalExpression evaluates infinities correctly","suites":[],"updatePoint":{"line":28,"column":51},"line":28,"code":"test('evalExpression evaluates infinities correctly', () => {\n  const formula = 'x/0';\n  expect(evalExpression(formula, 1)).toEqual(Infinity);\n  expect(evalExpression(formula, -1)).toEqual(-Infinity);\n});","file":"math-expression/index.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"evalExpression evaluates powers correctly","suites":[],"updatePoint":{"line":34,"column":47},"line":34,"code":"test('evalExpression evaluates powers correctly', () => {\n  const formula = '2^(x/2)*100';\n  expect(evalExpression(formula, 0)).toEqual(100);\n  expect(evalExpression(formula, 1)).toEqual(141.4213562373095);\n  expect(evalExpression(formula, 2)).toEqual(200);\n});","file":"math-expression/index.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"evalExpression ignores whitespace and variables on left hand side of equals sign","suites":[],"updatePoint":{"line":41,"column":86},"line":41,"code":"test('evalExpression ignores whitespace and variables on left hand side of equals sign', () => {\n  expect(evalExpression('y=x+1', 1)).toEqual(2);\n  expect(evalExpression('y = x    - 1', 1)).toEqual(0);\n});","file":"math-expression/index.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"evalExpression evaluates custom operators correctly","suites":[],"updatePoint":{"line":46,"column":57},"line":46,"code":"test('evalExpression evaluates custom operators correctly', () => {\n  const equalsExpression = 'x == 10';\n  expect(evalExpression(equalsExpression, 5)).toEqual(0);\n  expect(evalExpression(equalsExpression, 10)).toEqual(1);\n  expect(evalExpression(equalsExpression, 10.1)).toEqual(0);\n\n  const closedRange = '(x > 0) and (x < 10)';\n  expect(evalExpression(closedRange, 0)).toEqual(0);\n  expect(evalExpression(closedRange, 5)).toEqual(1);\n  expect(evalExpression(closedRange, 10)).toEqual(0);\n\n  const openRange = '(x >= 0) and (x <= 10)';\n  expect(evalExpression(openRange, -0.1)).toEqual(0);\n  expect(evalExpression(openRange, 0)).toEqual(1);\n  expect(evalExpression(openRange, 5)).toEqual(1);\n  expect(evalExpression(openRange, 10)).toEqual(1);\n  expect(evalExpression(openRange, 10.1)).toEqual(0);\n\n  const orRange = '(x < 0) or (x > 10)';\n  expect(evalExpression(orRange, -0.1)).toEqual(1);\n  expect(evalExpression(orRange, 0)).toEqual(0);\n  expect(evalExpression(orRange, 5)).toEqual(0);\n  expect(evalExpression(orRange, 10)).toEqual(0);\n  expect(evalExpression(orRange, 10.1)).toEqual(1);\n\n  // other less used operators\n  expect(evalExpression('5 & x', 3)).toEqual(1);\n  expect(evalExpression('5 | x', 3)).toEqual(7);\n  expect(evalExpression('5 xor x', 2)).toEqual(7);\n\n  // complex combinations\n  const complexExpression =\n    '20.51*(x<1577836800000)+20.2((x<15805152000000)&(x>=1577836800000))';\n  expect(evalExpression(complexExpression, 0)).toEqual(20.51);\n  expect(evalExpression(complexExpression, 1000)).toEqual(20.51);\n  expect(evalExpression(complexExpression, 1577836800000)).toEqual(20.2);\n  expect(evalExpression(complexExpression, 15805151999999)).toEqual(20.2);\n  expect(evalExpression(complexExpression, 15805152000000)).toEqual(0);\n  expect(evalExpression(complexExpression, 15805159000000)).toEqual(0);\n});","file":"math-expression/index.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"isValidExpression correctly identifies invalid formulas","suites":[],"updatePoint":{"line":87,"column":61},"line":87,"code":"test('isValidExpression correctly identifies invalid formulas', () => {\n  expect(isValidExpression('foobar')).toEqual(false);\n  expect(isValidExpression('x+')).toEqual(false);\n  expect(isValidExpression('z+1')).toEqual(false);\n});","file":"math-expression/index.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"isValidExpression correctly identifies valid formulas","suites":[],"updatePoint":{"line":93,"column":59},"line":93,"code":"test('isValidExpression correctly identifies valid formulas', () => {\n  expect(isValidExpression('x')).toEqual(true);\n  expect(isValidExpression('x+1')).toEqual(true);\n  expect(isValidExpression('y=x-1')).toEqual(true);\n  expect(isValidExpression('y = x - 1')).toEqual(true);\n  expect(isValidExpression('y = (x < 100 and x > 0) * 100')).toEqual(true);\n});","file":"math-expression/index.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"its subclass is an instance of Function","suites":["ExtensibleFunction"],"updatePoint":{"line":64,"column":45},"line":64,"code":"  it('its subclass is an instance of Function', () => {\n    expect(Func1).toBeInstanceOf(Function);\n    expect(Func2).toBeInstanceOf(Function);\n    expect(Func3).toBeInstanceOf(Function);\n  });","file":"models/ExtensibleFunction.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"an instance of its subclass is executable like regular function","suites":["ExtensibleFunction"],"updatePoint":{"line":74,"column":69},"line":74,"code":"  it('an instance of its subclass is executable like regular function', () => {\n    expect(func1()).toEqual(100);\n    expect(func2()).toEqual(100);\n  });","file":"models/ExtensibleFunction.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"its subclass behaves like regular class with its own fields and functions","suites":["ExtensibleFunction"],"updatePoint":{"line":79,"column":79},"line":79,"code":"  it('its subclass behaves like regular class with its own fields and functions', () => {\n    expect(func2.x).toEqual(100);\n    expect(func2.hi()).toEqual('hi');\n  });","file":"models/ExtensibleFunction.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"its subclass can set name by passing named function to its constructor","suites":["ExtensibleFunction"],"updatePoint":{"line":84,"column":76},"line":84,"code":"  it('its subclass can set name by passing named function to its constructor', () => {\n    expect(func3.name).toEqual('customName');\n  });","file":"models/ExtensibleFunction.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"exists","suites":["Plugin"],"updatePoint":{"line":23,"column":12},"line":23,"code":"  it('exists', () => {\n    expect(Plugin).toBeDefined();\n  });","file":"models/Plugin.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"creates a new plugin","suites":["Plugin","new Plugin()"],"updatePoint":{"line":28,"column":28},"line":28,"code":"    it('creates a new plugin', () => {\n      const plugin = new Plugin();\n      expect(plugin).toBeInstanceOf(Plugin);\n    });","file":"models/Plugin.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"extends the default config with given config when replace is not set or false","suites":["Plugin",".configure(config, replace)"],"updatePoint":{"line":35,"column":85},"line":35,"code":"    it('extends the default config with given config when replace is not set or false', () => {\n      const plugin = new Plugin();\n      plugin.configure({ key: 'abc', foo: 'bar' });\n      plugin.configure({ key: 'def' });\n      expect(plugin.config).toEqual({ key: 'def', foo: 'bar' });\n    });","file":"models/Plugin.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"replaces the default config with given config when replace is true","suites":["Plugin",".configure(config, replace)"],"updatePoint":{"line":41,"column":74},"line":41,"code":"    it('replaces the default config with given config when replace is true', () => {\n      const plugin = new Plugin();\n      plugin.configure({ key: 'abc', foo: 'bar' });\n      plugin.configure({ key: 'def' }, true);\n      expect(plugin.config).toEqual({ key: 'def' });\n    });","file":"models/Plugin.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"returns the plugin itself","suites":["Plugin",".configure(config, replace)"],"updatePoint":{"line":47,"column":33},"line":47,"code":"    it('returns the plugin itself', () => {\n      const plugin = new Plugin();\n      expect(plugin.configure({ key: 'abc' })).toBe(plugin);\n    });","file":"models/Plugin.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"resets config back to default","suites":["Plugin",".resetConfig()"],"updatePoint":{"line":54,"column":37},"line":54,"code":"    it('resets config back to default', () => {\n      const plugin = new Plugin();\n      plugin.configure({ key: 'abc', foo: 'bar' });\n      plugin.resetConfig();\n      expect(plugin.config).toEqual({});\n    });","file":"models/Plugin.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"returns the plugin itself","suites":["Plugin",".resetConfig()"],"updatePoint":{"line":60,"column":33},"line":60,"code":"    it('returns the plugin itself', () => {\n      const plugin = new Plugin();\n      expect(plugin.resetConfig()).toBe(plugin);\n    });","file":"models/Plugin.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"returns the plugin itself","suites":["Plugin",".register()"],"updatePoint":{"line":67,"column":33},"line":67,"code":"    it('returns the plugin itself', () => {\n      const plugin = new Plugin();\n      expect(plugin.register()).toBe(plugin);\n    });","file":"models/Plugin.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"returns the plugin itself","suites":["Plugin",".unregister()"],"updatePoint":{"line":74,"column":33},"line":74,"code":"    it('returns the plugin itself', () => {\n      const plugin = new Plugin();\n      expect(plugin.unregister()).toBe(plugin);\n    });","file":"models/Plugin.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"exists","suites":["Preset"],"updatePoint":{"line":23,"column":12},"line":23,"code":"  it('exists', () => {\n    expect(Preset).toBeDefined();\n  });","file":"models/Preset.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"creates new preset","suites":["Preset","new Preset()"],"updatePoint":{"line":28,"column":26},"line":28,"code":"    it('creates new preset', () => {\n      const preset = new Preset();\n      expect(preset).toBeInstanceOf(Preset);\n    });","file":"models/Preset.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"register all listed presets then plugins","suites":["Preset",".register()"],"updatePoint":{"line":35,"column":48},"line":35,"code":"    it('register all listed presets then plugins', () => {\n      const values: number[] = [];\n      class Plugin1 extends Plugin {\n        register() {\n          values.push(1);\n\n          return this;\n        }\n      }\n      class Plugin2 extends Plugin {\n        register() {\n          values.push(2);\n\n          return this;\n        }\n      }\n      class Plugin3 extends Plugin {\n        register() {\n          values.push(3);\n\n          return this;\n        }\n      }\n      class Plugin4 extends Plugin {\n        register() {\n          const { key } = this.config;\n          values.push(key as number);\n\n          return this;\n        }\n      }\n\n      const preset1 = new Preset({\n        plugins: [new Plugin1()],\n      });\n      const preset2 = new Preset({\n        plugins: [new Plugin2()],\n      });\n      const preset3 = new Preset({\n        presets: [preset1, preset2],\n        plugins: [new Plugin3(), new Plugin4().configure({ key: 9 })],\n      });\n      preset3.register();\n      expect(values).toEqual([1, 2, 3, 9]);\n    });","file":"models/Preset.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"returns itself","suites":["Preset",".register()"],"updatePoint":{"line":81,"column":22},"line":81,"code":"    it('returns itself', () => {\n      const preset = new Preset();\n      expect(preset.register()).toBe(preset);\n    });","file":"models/Preset.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"exists","suites":["Registry"],"updatePoint":{"line":27,"column":12},"line":27,"code":"  it('exists', () => {\n    expect(Registry !== undefined).toBe(true);\n  });","file":"models/Registry.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"can create a new registry when config.name is not given","suites":["Registry","new Registry(config)"],"updatePoint":{"line":32,"column":63},"line":32,"code":"    it('can create a new registry when config.name is not given', () => {\n      const registry = new Registry();\n      expect(registry).toBeInstanceOf(Registry);\n    });","file":"models/Registry.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"can create a new registry when config.name is given","suites":["Registry","new Registry(config)"],"updatePoint":{"line":36,"column":59},"line":36,"code":"    it('can create a new registry when config.name is given', () => {\n      const registry = new Registry({ name: 'abc' });\n      expect(registry).toBeInstanceOf(Registry);\n      expect(registry.name).toBe('abc');\n    });","file":"models/Registry.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"clears all registered items","suites":["Registry",".clear()"],"updatePoint":{"line":44,"column":35},"line":44,"code":"    it('clears all registered items', () => {\n      const registry = new Registry();\n      registry.registerValue('a', 'testValue');\n      registry.clear();\n      expect(Object.keys(registry.items)).toHaveLength(0);\n      expect(Object.keys(registry.promises)).toHaveLength(0);\n    });","file":"models/Registry.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"returns the registry itself","suites":["Registry",".clear()"],"updatePoint":{"line":51,"column":35},"line":51,"code":"    it('returns the registry itself', () => {\n      const registry = new Registry();\n      expect(registry.clear()).toBe(registry);\n    });","file":"models/Registry.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"returns true if an item with the given key exists","suites":["Registry",".has(key)"],"updatePoint":{"line":58,"column":57},"line":58,"code":"    it('returns true if an item with the given key exists', () => {\n      const registry = new Registry();\n      registry.registerValue('a', 'testValue');\n      expect(registry.has('a')).toBe(true);\n      registry.registerLoader('b', () => 'testValue2');\n      expect(registry.has('b')).toBe(true);\n    });","file":"models/Registry.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"returns false if an item with the given key does not exist","suites":["Registry",".has(key)"],"updatePoint":{"line":65,"column":66},"line":65,"code":"    it('returns false if an item with the given key does not exist', () => {\n      const registry = new Registry();\n      expect(registry.has('a')).toBe(false);\n    });","file":"models/Registry.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"registers the given value with the given key","suites":["Registry",".registerValue(key, value)"],"updatePoint":{"line":72,"column":52},"line":72,"code":"    it('registers the given value with the given key', () => {\n      const registry = new Registry();\n      registry.registerValue('a', 'testValue');\n      expect(registry.has('a')).toBe(true);\n      expect(registry.get('a')).toBe('testValue');\n    });","file":"models/Registry.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"does not overwrite if value is exactly the same","suites":["Registry",".registerValue(key, value)"],"updatePoint":{"line":78,"column":55},"line":78,"code":"    it('does not overwrite if value is exactly the same', () => {\n      const registry = new Registry();\n      const value = { a: 1 };\n      registry.registerValue('a', value);\n      const promise1 = registry.getAsPromise('a');\n      registry.registerValue('a', value);\n      const promise2 = registry.getAsPromise('a');\n      expect(promise1).toBe(promise2);\n      registry.registerValue('a', { a: 1 });\n      const promise3 = registry.getAsPromise('a');\n      expect(promise1).not.toBe(promise3);\n    });","file":"models/Registry.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"overwrites item with loader","suites":["Registry",".registerValue(key, value)"],"updatePoint":{"line":90,"column":35},"line":90,"code":"    it('overwrites item with loader', () => {\n      const registry = new Registry();\n      registry.registerLoader('a', () => 'ironman');\n      expect(registry.get('a')).toBe('ironman');\n      registry.registerValue('a', 'hulk');\n      expect(registry.get('a')).toBe('hulk');\n    });","file":"models/Registry.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"returns the registry itself","suites":["Registry",".registerValue(key, value)"],"updatePoint":{"line":97,"column":35},"line":97,"code":"    it('returns the registry itself', () => {\n      const registry = new Registry();\n      expect(registry.registerValue('a', 'testValue')).toBe(registry);\n    });","file":"models/Registry.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"registers the given loader with the given key","suites":["Registry",".registerLoader(key, loader)"],"updatePoint":{"line":104,"column":53},"line":104,"code":"    it('registers the given loader with the given key', () => {\n      const registry = new Registry();\n      registry.registerLoader('a', () => 'testValue');\n      expect(registry.has('a')).toBe(true);\n      expect(registry.get('a')).toBe('testValue');\n    });","file":"models/Registry.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"does not overwrite if loader is exactly the same","suites":["Registry",".registerLoader(key, loader)"],"updatePoint":{"line":110,"column":56},"line":110,"code":"    it('does not overwrite if loader is exactly the same', () => {\n      const registry = new Registry();\n      registry.registerLoader('a', loader);\n      const promise1 = registry.getAsPromise('a');\n      registry.registerLoader('a', loader);\n      const promise2 = registry.getAsPromise('a');\n      expect(promise1).toBe(promise2);\n      registry.registerLoader('a', () => 'testValue');\n      const promise3 = registry.getAsPromise('a');\n      expect(promise1).not.toBe(promise3);\n    });","file":"models/Registry.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"overwrites item with value","suites":["Registry",".registerLoader(key, loader)"],"updatePoint":{"line":121,"column":34},"line":121,"code":"    it('overwrites item with value', () => {\n      const registry = new Registry();\n      registry.registerValue('a', 'hulk');\n      expect(registry.get('a')).toBe('hulk');\n      registry.registerLoader('a', () => 'ironman');\n      expect(registry.get('a')).toBe('ironman');\n    });","file":"models/Registry.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"returns the registry itself","suites":["Registry",".registerLoader(key, loader)"],"updatePoint":{"line":128,"column":35},"line":128,"code":"    it('returns the registry itself', () => {\n      const registry = new Registry();\n      expect(registry.registerLoader('a', () => 'testValue')).toBe(registry);\n    });","file":"models/Registry.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"given the key, returns the value if the item is a value","suites":["Registry",".get(key)"],"updatePoint":{"line":135,"column":63},"line":135,"code":"    it('given the key, returns the value if the item is a value', () => {\n      const registry = new Registry();\n      registry.registerValue('a', 'testValue');\n      expect(registry.get('a')).toBe('testValue');\n    });","file":"models/Registry.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"given the key, returns the result of the loader function if the item is a loader","suites":["Registry",".get(key)"],"updatePoint":{"line":140,"column":88},"line":140,"code":"    it('given the key, returns the result of the loader function if the item is a loader', () => {\n      const registry = new Registry();\n      registry.registerLoader('b', () => 'testValue2');\n      expect(registry.get('b')).toBe('testValue2');\n    });","file":"models/Registry.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"returns undefined if the item with specified key does not exist","suites":["Registry",".get(key)"],"updatePoint":{"line":145,"column":71},"line":145,"code":"    it('returns undefined if the item with specified key does not exist', () => {\n      const registry = new Registry();\n      expect(registry.get('a')).toBeUndefined();\n    });","file":"models/Registry.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"If the key was registered multiple times, returns the most recent item.","suites":["Registry",".get(key)"],"updatePoint":{"line":149,"column":79},"line":149,"code":"    it('If the key was registered multiple times, returns the most recent item.', () => {\n      const registry = new Registry();\n      registry.registerValue('a', 'testValue');\n      expect(registry.get('a')).toBe('testValue');\n      registry.registerLoader('a', () => 'newValue');\n      expect(registry.get('a')).toBe('newValue');\n    });","file":"models/Registry.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"given the key, returns a promise of item value if the item is a value","suites":["Registry",".getAsPromise(key)"],"updatePoint":{"line":159,"column":77},"line":159,"code":"    it('given the key, returns a promise of item value if the item is a value', () => {\n      const registry = new Registry();\n      registry.registerValue('a', 'testValue');\n\n      return registry\n        .getAsPromise('a')\n        .then(value => expect(value).toBe('testValue'));\n    });","file":"models/Registry.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"given the key, returns a promise of result of the loader function if the item is a loader","suites":["Registry",".getAsPromise(key)"],"updatePoint":{"line":167,"column":97},"line":167,"code":"    it('given the key, returns a promise of result of the loader function if the item is a loader', () => {\n      const registry = new Registry();\n      registry.registerLoader('a', () => 'testValue');\n\n      return registry\n        .getAsPromise('a')\n        .then(value => expect(value).toBe('testValue'));\n    });","file":"models/Registry.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"returns same promise object for the same key unless user re-registers new value with the key.","suites":["Registry",".getAsPromise(key)"],"updatePoint":{"line":175,"column":101},"line":175,"code":"    it('returns same promise object for the same key unless user re-registers new value with the key.', () => {\n      const registry = new Registry();\n      registry.registerLoader('a', () => 'testValue');\n      const promise1 = registry.getAsPromise('a');\n      const promise2 = registry.getAsPromise('a');\n      expect(promise1).toBe(promise2);\n    });","file":"models/Registry.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"returns a rejected promise if the item with specified key does not exist","suites":["Registry",".getAsPromise(key)"],"updatePoint":{"line":182,"column":80},"line":182,"code":"    it('returns a rejected promise if the item with specified key does not exist', () => {\n      const registry = new Registry();\n\n      return registry.getAsPromise('a').then(null, (err: Error) => {\n        expect(err.toString()).toEqual(\n          'Error: Item with key \"a\" is not registered.',\n        );\n      });\n    });","file":"models/Registry.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"If the key was registered multiple times, returns a promise of the most recent item.","suites":["Registry",".getAsPromise(key)"],"updatePoint":{"line":191,"column":92},"line":191,"code":"    it('If the key was registered multiple times, returns a promise of the most recent item.', async () => {\n      const registry = new Registry();\n      registry.registerValue('a', 'testValue');\n      expect(await registry.getAsPromise('a')).toBe('testValue');\n      registry.registerLoader('a', () => 'newValue');\n      expect(await registry.getAsPromise('a')).toBe('newValue');\n    });","file":"models/Registry.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"returns key-value map as plain object","suites":["Registry",".getMap()"],"updatePoint":{"line":201,"column":45},"line":201,"code":"    it('returns key-value map as plain object', () => {\n      const registry = new Registry();\n      registry.registerValue('a', 'cat');\n      registry.registerLoader('b', () => 'dog');\n      expect(registry.getMap()).toEqual({\n        a: 'cat',\n        b: 'dog',\n      });\n    });","file":"models/Registry.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"returns a promise of key-value map","suites":["Registry",".getMapAsPromise()"],"updatePoint":{"line":213,"column":42},"line":213,"code":"    it('returns a promise of key-value map', () => {\n      const registry = new Registry();\n      registry.registerValue('a', 'test1');\n      registry.registerLoader('b', () => 'test2');\n      registry.registerLoader('c', () => Promise.resolve('test3'));\n\n      return registry.getMapAsPromise().then(map =>\n        expect(map).toEqual({\n          a: 'test1',\n          b: 'test2',\n          c: 'test3',\n        }),\n      );\n    });","file":"models/Registry.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"returns an array of keys","suites":["Registry",".keys()"],"updatePoint":{"line":230,"column":32},"line":230,"code":"    it('returns an array of keys', () => {\n      const registry = new Registry();\n      registry.registerValue('a', 'testValue');\n      registry.registerLoader('b', () => 'test2');\n      expect(registry.keys()).toEqual(['a', 'b']);\n    });","file":"models/Registry.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"returns an array of values","suites":["Registry",".values()"],"updatePoint":{"line":239,"column":34},"line":239,"code":"    it('returns an array of values', () => {\n      const registry = new Registry();\n      registry.registerValue('a', 'test1');\n      registry.registerLoader('b', () => 'test2');\n      expect(registry.values()).toEqual(['test1', 'test2']);\n    });","file":"models/Registry.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"returns a Promise of an array { key, value }","suites":["Registry",".valuesAsPromise()"],"updatePoint":{"line":248,"column":52},"line":248,"code":"    it('returns a Promise of an array { key, value }', () => {\n      const registry = new Registry();\n      registry.registerValue('a', 'test1');\n      registry.registerLoader('b', () => 'test2');\n      registry.registerLoader('c', () => Promise.resolve('test3'));\n\n      return registry\n        .valuesAsPromise()\n        .then(entries => expect(entries).toEqual(['test1', 'test2', 'test3']));\n    });","file":"models/Registry.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"returns an array of { key, value }","suites":["Registry",".entries()"],"updatePoint":{"line":261,"column":42},"line":261,"code":"    it('returns an array of { key, value }', () => {\n      const registry = new Registry();\n      registry.registerValue('a', 'test1');\n      registry.registerLoader('b', () => 'test2');\n      expect(registry.entries()).toEqual([\n        { key: 'a', value: 'test1' },\n        { key: 'b', value: 'test2' },\n      ]);\n    });","file":"models/Registry.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"returns a Promise of an array { key, value }","suites":["Registry",".entriesAsPromise()"],"updatePoint":{"line":273,"column":52},"line":273,"code":"    it('returns a Promise of an array { key, value }', () => {\n      const registry = new Registry();\n      registry.registerValue('a', 'test1');\n      registry.registerLoader('b', () => 'test2');\n      registry.registerLoader('c', () => Promise.resolve('test3'));\n\n      return registry.entriesAsPromise().then(entries =>\n        expect(entries).toEqual([\n          { key: 'a', value: 'test1' },\n          { key: 'b', value: 'test2' },\n          { key: 'c', value: 'test3' },\n        ]),\n      );\n    });","file":"models/Registry.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"removes the item with given key","suites":["Registry",".remove(key)"],"updatePoint":{"line":290,"column":39},"line":290,"code":"    it('removes the item with given key', () => {\n      const registry = new Registry();\n      registry.registerValue('a', 'testValue');\n      registry.remove('a');\n      expect(registry.get('a')).toBeUndefined();\n    });","file":"models/Registry.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"does not throw error if the key does not exist","suites":["Registry",".remove(key)"],"updatePoint":{"line":296,"column":54},"line":296,"code":"    it('does not throw error if the key does not exist', () => {\n      const registry = new Registry();\n      expect(() => registry.remove('a')).not.toThrow();\n    });","file":"models/Registry.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"returns itself","suites":["Registry",".remove(key)"],"updatePoint":{"line":300,"column":22},"line":300,"code":"    it('returns itself', () => {\n      const registry = new Registry();\n      registry.registerValue('a', 'testValue');\n      expect(registry.remove('a')).toBe(registry);\n    });","file":"models/Registry.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"registers normally","suites":["Registry","config.overwritePolicy","=ALLOW",".registerValue(key, value)"],"updatePoint":{"line":310,"column":30},"line":310,"code":"        it('registers normally', () => {\n          const restoreConsole = mockConsole();\n          const registry = new Registry();\n          registry.registerValue('a', 'testValue');\n          expect(() => registry.registerValue('a', 'testValue2')).not.toThrow();\n          expect(registry.get('a')).toEqual('testValue2');\n          expect(console.warn).not.toHaveBeenCalled();\n          restoreConsole();\n        });","file":"models/Registry.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"registers normally","suites":["Registry","config.overwritePolicy","=ALLOW",".registerLoader(key, loader)"],"updatePoint":{"line":321,"column":30},"line":321,"code":"        it('registers normally', () => {\n          const restoreConsole = mockConsole();\n          const registry = new Registry();\n          registry.registerLoader('a', () => 'testValue');\n          expect(() =>\n            registry.registerLoader('a', () => 'testValue2'),\n          ).not.toThrow();\n          expect(registry.get('a')).toEqual('testValue2');\n          expect(console.warn).not.toHaveBeenCalled();\n          restoreConsole();\n        });","file":"models/Registry.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"warns when overwrite","suites":["Registry","config.overwritePolicy","=WARN",".registerValue(key, value)"],"updatePoint":{"line":336,"column":32},"line":336,"code":"        it('warns when overwrite', () => {\n          const restoreConsole = mockConsole();\n          const registry = new Registry({\n            overwritePolicy: OverwritePolicy.WARN,\n          });\n          registry.registerValue('a', 'testValue');\n          expect(() => registry.registerValue('a', 'testValue2')).not.toThrow();\n          expect(registry.get('a')).toEqual('testValue2');\n          expect(console.warn).toHaveBeenCalled();\n          restoreConsole();\n        });","file":"models/Registry.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"warns when overwrite","suites":["Registry","config.overwritePolicy","=WARN",".registerLoader(key, loader)"],"updatePoint":{"line":349,"column":32},"line":349,"code":"        it('warns when overwrite', () => {\n          const restoreConsole = mockConsole();\n          const registry = new Registry({\n            overwritePolicy: OverwritePolicy.WARN,\n          });\n          registry.registerLoader('a', () => 'testValue');\n          expect(() =>\n            registry.registerLoader('a', () => 'testValue2'),\n          ).not.toThrow();\n          expect(registry.get('a')).toEqual('testValue2');\n          expect(console.warn).toHaveBeenCalled();\n          restoreConsole();\n        });","file":"models/Registry.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"throws error when overwrite","suites":["Registry","config.overwritePolicy","=PROHIBIT",".registerValue(key, value)"],"updatePoint":{"line":366,"column":39},"line":366,"code":"        it('throws error when overwrite', () => {\n          const registry = new Registry({\n            overwritePolicy: OverwritePolicy.PROHIBIT,\n          });\n          registry.registerValue('a', 'testValue');\n          expect(() => registry.registerValue('a', 'testValue2')).toThrow();\n        });","file":"models/Registry.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"warns when overwrite","suites":["Registry","config.overwritePolicy","=PROHIBIT",".registerLoader(key, loader)"],"updatePoint":{"line":375,"column":32},"line":375,"code":"        it('warns when overwrite', () => {\n          const registry = new Registry({\n            overwritePolicy: OverwritePolicy.PROHIBIT,\n          });\n          registry.registerLoader('a', () => 'testValue');\n          expect(() =>\n            registry.registerLoader('a', () => 'testValue2'),\n          ).toThrow();\n        });","file":"models/Registry.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"calls the listener when a value is registered","suites":["Registry","listeners"],"updatePoint":{"line":397,"column":53},"line":397,"code":"    it('calls the listener when a value is registered', () => {\n      registry.registerValue('foo', 'bar');\n      expect(listener).toBeCalledWith(['foo']);\n    });","file":"models/Registry.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"calls the listener when a loader is registered","suites":["Registry","listeners"],"updatePoint":{"line":402,"column":54},"line":402,"code":"    it('calls the listener when a loader is registered', () => {\n      registry.registerLoader('foo', () => 'bar');\n      expect(listener).toBeCalledWith(['foo']);\n    });","file":"models/Registry.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"calls the listener when a value is overridden","suites":["Registry","listeners"],"updatePoint":{"line":407,"column":53},"line":407,"code":"    it('calls the listener when a value is overridden', () => {\n      registry.registerValue('foo', 'bar');\n      listener.mockClear();\n      registry.registerValue('foo', 'baz');\n      expect(listener).toBeCalledWith(['foo']);\n    });","file":"models/Registry.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"calls the listener when a value is removed","suites":["Registry","listeners"],"updatePoint":{"line":414,"column":50},"line":414,"code":"    it('calls the listener when a value is removed', () => {\n      registry.registerValue('foo', 'bar');\n      listener.mockClear();\n      registry.remove('foo');\n      expect(listener).toBeCalledWith(['foo']);\n    });","file":"models/Registry.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"does not call the listener when a value is not actually removed","suites":["Registry","listeners"],"updatePoint":{"line":421,"column":71},"line":421,"code":"    it('does not call the listener when a value is not actually removed', () => {\n      registry.remove('foo');\n      expect(listener).not.toBeCalled();\n    });","file":"models/Registry.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"calls the listener when registry is cleared","suites":["Registry","listeners"],"updatePoint":{"line":426,"column":51},"line":426,"code":"    it('calls the listener when registry is cleared', () => {\n      registry.registerValue('foo', 'bar');\n      registry.registerLoader('fluz', () => 'baz');\n      listener.mockClear();\n      registry.clear();\n      expect(listener).toBeCalledWith(['foo', 'fluz']);\n    });","file":"models/Registry.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"removes listeners correctly","suites":["Registry","listeners"],"updatePoint":{"line":434,"column":35},"line":434,"code":"    it('removes listeners correctly', () => {\n      registry.removeListener(listener);\n      registry.registerValue('foo', 'bar');\n      expect(listener).not.toBeCalled();\n    });","file":"models/Registry.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"keeps working","suites":["Registry","listeners","with a broken listener"],"updatePoint":{"line":449,"column":23},"line":449,"code":"      it('keeps working', () => {\n        const errorListener = jest.fn().mockImplementation(() => {\n          throw new Error('test error');\n        });\n        const lastListener = jest.fn();\n\n        registry.addListener(errorListener);\n        registry.addListener(lastListener);\n        registry.registerValue('foo', 'bar');\n\n        expect(listener).toBeCalledWith(['foo']);\n        expect(errorListener).toBeCalledWith(['foo']);\n        expect(lastListener).toBeCalledWith(['foo']);\n        expect(console.error).toBeCalled();\n      });","file":"models/Registry.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"exists","suites":["RegistryWithDefaultKey"],"updatePoint":{"line":29,"column":12},"line":29,"code":"  it('exists', () => {\n    expect(RegistryWithDefaultKey).toBeDefined();\n  });","file":"models/RegistryWithDefaultKey.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"returns a class that extends from Registry","suites":["RegistryWithDefaultKey","new RegistryWithDefaultKey(config)"],"updatePoint":{"line":34,"column":50},"line":34,"code":"    it('returns a class that extends from Registry', () => {\n      expect(registry).toBeInstanceOf(Registry);\n    });","file":"models/RegistryWithDefaultKey.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"also resets default key","suites":["RegistryWithDefaultKey",".clear()"],"updatePoint":{"line":40,"column":31},"line":40,"code":"    it('also resets default key', () => {\n      registry.setDefaultKey('abc');\n      registry.clear();\n      expect(registry.getDefaultKey()).toBeUndefined();\n    });","file":"models/RegistryWithDefaultKey.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"returns itself","suites":["RegistryWithDefaultKey",".clear()"],"updatePoint":{"line":45,"column":22},"line":45,"code":"    it('returns itself', () => {\n      expect(registry.clear()).toBe(registry);\n    });","file":"models/RegistryWithDefaultKey.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":".get() returns value from default key","suites":["RegistryWithDefaultKey",".get()"],"updatePoint":{"line":57,"column":45},"line":57,"code":"    it('.get() returns value from default key', () => {\n      expect(registry.get()).toEqual(100);\n    });","file":"models/RegistryWithDefaultKey.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":".get(key) returns value from specified key","suites":["RegistryWithDefaultKey",".get()"],"updatePoint":{"line":60,"column":50},"line":60,"code":"    it('.get(key) returns value from specified key', () => {\n      expect(registry.get('def')).toEqual(200);\n    });","file":"models/RegistryWithDefaultKey.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"returns undefined if no key was given and there is no default key","suites":["RegistryWithDefaultKey",".get()"],"updatePoint":{"line":63,"column":73},"line":63,"code":"    it('returns undefined if no key was given and there is no default key', () => {\n      registry.clearDefaultKey();\n      expect(registry.get()).toBeUndefined();\n    });","file":"models/RegistryWithDefaultKey.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"returns defaultKey","suites":["RegistryWithDefaultKey",".getDefaultKey()"],"updatePoint":{"line":70,"column":26},"line":70,"code":"    it('returns defaultKey', () => {\n      registry.setDefaultKey('abc');\n      expect(registry.getDefaultKey()).toEqual('abc');\n    });","file":"models/RegistryWithDefaultKey.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"set the default key","suites":["RegistryWithDefaultKey",".setDefaultKey(key)"],"updatePoint":{"line":77,"column":27},"line":77,"code":"    it('set the default key', () => {\n      registry.setDefaultKey('abc');\n      expect(registry.defaultKey).toEqual('abc');\n    });","file":"models/RegistryWithDefaultKey.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"returns itself","suites":["RegistryWithDefaultKey",".setDefaultKey(key)"],"updatePoint":{"line":81,"column":22},"line":81,"code":"    it('returns itself', () => {\n      expect(registry.setDefaultKey('ghi')).toBe(registry);\n    });","file":"models/RegistryWithDefaultKey.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"set the default key to undefined","suites":["RegistryWithDefaultKey",".clearDefaultKey()"],"updatePoint":{"line":87,"column":40},"line":87,"code":"    it('set the default key to undefined', () => {\n      registry.clearDefaultKey();\n      expect(registry.defaultKey).toBeUndefined();\n    });","file":"models/RegistryWithDefaultKey.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"returns itself","suites":["RegistryWithDefaultKey",".clearDefaultKey()"],"updatePoint":{"line":91,"column":22},"line":91,"code":"    it('returns itself', () => {\n      expect(registry.clearDefaultKey()).toBe(registry);\n    });","file":"models/RegistryWithDefaultKey.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"After creation, default key is undefined","suites":["RegistryWithDefaultKey","config.defaultKey","when not set"],"updatePoint":{"line":98,"column":50},"line":98,"code":"      it(`After creation, default key is undefined`, () => {\n        expect(registry.defaultKey).toBeUndefined();\n      });","file":"models/RegistryWithDefaultKey.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":".clear() reset defaultKey to undefined","suites":["RegistryWithDefaultKey","config.defaultKey","when not set"],"updatePoint":{"line":101,"column":48},"line":101,"code":"      it('.clear() reset defaultKey to undefined', () => {\n        registry.setDefaultKey('abc');\n        registry.clear();\n        expect(registry.getDefaultKey()).toBeUndefined();\n      });","file":"models/RegistryWithDefaultKey.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"After creation, default key is undefined","suites":["RegistryWithDefaultKey","config.defaultKey","when config.initialDefaultKey is set"],"updatePoint":{"line":111,"column":50},"line":111,"code":"      it(`After creation, default key is undefined`, () => {\n        expect(registry2.defaultKey).toEqual('def');\n      });","file":"models/RegistryWithDefaultKey.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":".clear() reset defaultKey to this config.defaultKey","suites":["RegistryWithDefaultKey","config.defaultKey","when config.initialDefaultKey is set"],"updatePoint":{"line":114,"column":61},"line":114,"code":"      it('.clear() reset defaultKey to this config.defaultKey', () => {\n        registry2.setDefaultKey('abc');\n        registry2.clear();\n        expect(registry2.getDefaultKey()).toEqual('def');\n      });","file":"models/RegistryWithDefaultKey.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"sets the default key to this key if default key is not set","suites":["RegistryWithDefaultKey","config.setFirstItemAsDefault","when true",".registerValue(key, value)"],"updatePoint":{"line":131,"column":70},"line":131,"code":"        it('sets the default key to this key if default key is not set', () => {\n          registry2.registerValue('abc', 100);\n          expect(registry2.getDefaultKey()).toEqual('abc');\n        });","file":"models/RegistryWithDefaultKey.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"does not modify the default key if already set","suites":["RegistryWithDefaultKey","config.setFirstItemAsDefault","when true",".registerValue(key, value)"],"updatePoint":{"line":135,"column":58},"line":135,"code":"        it('does not modify the default key if already set', () => {\n          registry2.setDefaultKey('def').registerValue('abc', 100);\n          expect(registry2.getDefaultKey()).toEqual('def');\n        });","file":"models/RegistryWithDefaultKey.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"returns itself","suites":["RegistryWithDefaultKey","config.setFirstItemAsDefault","when true",".registerValue(key, value)"],"updatePoint":{"line":139,"column":26},"line":139,"code":"        it('returns itself', () => {\n          expect(registry2.registerValue('ghi', 300)).toBe(registry2);\n        });","file":"models/RegistryWithDefaultKey.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"sets the default key to this key if default key is not set","suites":["RegistryWithDefaultKey","config.setFirstItemAsDefault","when true",".registerLoader(key, loader)"],"updatePoint":{"line":144,"column":70},"line":144,"code":"        it('sets the default key to this key if default key is not set', () => {\n          registry2.registerLoader('abc', () => 100);\n          expect(registry2.getDefaultKey()).toEqual('abc');\n        });","file":"models/RegistryWithDefaultKey.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"does not modify the default key if already set","suites":["RegistryWithDefaultKey","config.setFirstItemAsDefault","when true",".registerLoader(key, loader)"],"updatePoint":{"line":148,"column":58},"line":148,"code":"        it('does not modify the default key if already set', () => {\n          registry2.setDefaultKey('def').registerLoader('abc', () => 100);\n          expect(registry2.getDefaultKey()).toEqual('def');\n        });","file":"models/RegistryWithDefaultKey.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"returns itself","suites":["RegistryWithDefaultKey","config.setFirstItemAsDefault","when true",".registerLoader(key, loader)"],"updatePoint":{"line":152,"column":26},"line":152,"code":"        it('returns itself', () => {\n          expect(registry2.registerLoader('ghi', () => 300)).toBe(registry2);\n        });","file":"models/RegistryWithDefaultKey.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"does not modify default key","suites":["RegistryWithDefaultKey","config.setFirstItemAsDefault","when false",".registerValue(key, value)"],"updatePoint":{"line":165,"column":39},"line":165,"code":"        it('does not modify default key', () => {\n          registry2.registerValue('abc', 100);\n          expect(registry2.defaultKey).toBeUndefined();\n          registry2.setDefaultKey('def');\n          registry2.registerValue('ghi', 300);\n          expect(registry2.defaultKey).toEqual('def');\n        });","file":"models/RegistryWithDefaultKey.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"returns itself","suites":["RegistryWithDefaultKey","config.setFirstItemAsDefault","when false",".registerValue(key, value)"],"updatePoint":{"line":172,"column":26},"line":172,"code":"        it('returns itself', () => {\n          expect(registry2.registerValue('ghi', 300)).toBe(registry2);\n        });","file":"models/RegistryWithDefaultKey.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"does not modify default key","suites":["RegistryWithDefaultKey","config.setFirstItemAsDefault","when false",".registerLoader(key, loader)"],"updatePoint":{"line":177,"column":39},"line":177,"code":"        it('does not modify default key', () => {\n          registry2.registerValue('abc', () => 100);\n          expect(registry2.defaultKey).toBeUndefined();\n          registry2.setDefaultKey('def');\n          registry2.registerValue('ghi', () => 300);\n          expect(registry2.defaultKey).toEqual('def');\n        });","file":"models/RegistryWithDefaultKey.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"returns itself","suites":["RegistryWithDefaultKey","config.setFirstItemAsDefault","when false",".registerLoader(key, loader)"],"updatePoint":{"line":184,"column":26},"line":184,"code":"        it('returns itself', () => {\n          expect(registry2.registerLoader('ghi', () => 300)).toBe(registry2);\n        });","file":"models/RegistryWithDefaultKey.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"gets a value","suites":["TypedRegistry"],"updatePoint":{"line":23,"column":18},"line":23,"code":"  it('gets a value', () => {\n    const reg = new TypedRegistry({ foo: 'bar' });\n    expect(reg.get('foo')).toBe('bar');\n  });","file":"models/TypedRegistry.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"sets a value","suites":["TypedRegistry"],"updatePoint":{"line":28,"column":18},"line":28,"code":"  it('sets a value', () => {\n    const reg = new TypedRegistry({ foo: 'bar' });\n    reg.set('foo', 'blah');\n    expect(reg.get('foo')).toBe('blah');\n  });","file":"models/TypedRegistry.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"requires config.formatString","suites":["createD3NumberFormatter(config)"],"updatePoint":{"line":23,"column":34},"line":23,"code":"  it('requires config.formatString', () => {\n    // @ts-ignore -- intentionally pass invalid input\n    expect(() => createD3NumberFormatter({})).toThrow();\n  });","file":"number-format/factories/createD3NumberFormatter.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"creates a NumberFormatter with the formatString as id","suites":["createD3NumberFormatter(config)","config.formatString"],"updatePoint":{"line":28,"column":61},"line":28,"code":"    it('creates a NumberFormatter with the formatString as id', () => {\n      const formatter = createD3NumberFormatter({ formatString: '.2f' });\n      expect(formatter.id).toEqual('.2f');\n    });","file":"number-format/factories/createD3NumberFormatter.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"uses d3.format(config.formatString) as format function","suites":["createD3NumberFormatter(config)","config.formatString","if it is valid d3 formatString"],"updatePoint":{"line":33,"column":64},"line":33,"code":"      it('uses d3.format(config.formatString) as format function', () => {\n        const formatter = createD3NumberFormatter({ formatString: '.2f' });\n        expect(formatter.format(100)).toEqual('100.00');\n      });","file":"number-format/factories/createD3NumberFormatter.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"The format function displays error message","suites":["createD3NumberFormatter(config)","config.formatString","if it is invalid d3 formatString"],"updatePoint":{"line":39,"column":52},"line":39,"code":"      it('The format function displays error message', () => {\n        const formatter = createD3NumberFormatter({\n          formatString: 'i-am-groot',\n        });\n        expect(formatter.format(12345.67)).toEqual(\n          '12345.67 (Invalid format: i-am-groot)',\n        );\n      });","file":"number-format/factories/createD3NumberFormatter.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"also set formatter.isInvalid to true","suites":["createD3NumberFormatter(config)","config.formatString","if it is invalid d3 formatString"],"updatePoint":{"line":47,"column":46},"line":47,"code":"      it('also set formatter.isInvalid to true', () => {\n        const formatter = createD3NumberFormatter({\n          formatString: 'i-am-groot',\n        });\n        expect(formatter.isInvalid).toEqual(true);\n      });","file":"number-format/factories/createD3NumberFormatter.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"set label if specified","suites":["createD3NumberFormatter(config)","config.label"],"updatePoint":{"line":56,"column":30},"line":56,"code":"    it('set label if specified', () => {\n      const formatter = createD3NumberFormatter({\n        formatString: '.2f',\n        label: 'float formatter',\n      });\n      expect(formatter.label).toEqual('float formatter');\n    });","file":"number-format/factories/createD3NumberFormatter.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"set description if specified","suites":["createD3NumberFormatter(config)","config.description"],"updatePoint":{"line":65,"column":36},"line":65,"code":"    it('set description if specified', () => {\n      const formatter = createD3NumberFormatter({\n        description: 'lorem ipsum',\n        formatString: '.2f',\n      });\n      expect(formatter.description).toEqual('lorem ipsum');\n    });","file":"number-format/factories/createD3NumberFormatter.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"supports locale customization such as currency","suites":["createD3NumberFormatter(config)","config.locale"],"updatePoint":{"line":74,"column":54},"line":74,"code":"    it('supports locale customization such as currency', () => {\n      const formatter = createD3NumberFormatter({\n        description: 'lorem ipsum',\n        formatString: '$.2f',\n        locale: {\n          decimal: '.',\n          thousands: ',',\n          grouping: [3],\n          currency: ['€', ''],\n        },\n      });\n      expect(formatter(200)).toEqual('€200.00');\n    });","file":"number-format/factories/createD3NumberFormatter.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"creates an instance of NumberFormatter","suites":["createDurationFormatter()"],"updatePoint":{"line":23,"column":44},"line":23,"code":"  it('creates an instance of NumberFormatter', () => {\n    const formatter = createDurationFormatter();\n    expect(formatter).toBeInstanceOf(NumberFormatter);\n  });","file":"number-format/factories/createDurationFormatter.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"format milliseconds in human readable format with default options","suites":["createDurationFormatter()"],"updatePoint":{"line":27,"column":71},"line":27,"code":"  it('format milliseconds in human readable format with default options', () => {\n    const formatter = createDurationFormatter();\n    expect(formatter(0)).toBe('0ms');\n    expect(formatter(1000)).toBe('1s');\n    expect(formatter(1337)).toBe('1.3s');\n    expect(formatter(10500)).toBe('10.5s');\n    expect(formatter(60 * 1000)).toBe('1m');\n    expect(formatter(90 * 1000)).toBe('1m 30s');\n  });","file":"number-format/factories/createDurationFormatter.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"format seconds in human readable format with default options","suites":["createDurationFormatter()"],"updatePoint":{"line":36,"column":66},"line":36,"code":"  it('format seconds in human readable format with default options', () => {\n    const formatter = createDurationFormatter({ multiplier: 1000 });\n    expect(formatter(0.5)).toBe('500ms');\n    expect(formatter(1)).toBe('1s');\n    expect(formatter(30)).toBe('30s');\n    expect(formatter(60)).toBe('1m');\n    expect(formatter(90)).toBe('1m 30s');\n  });","file":"number-format/factories/createDurationFormatter.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"format milliseconds in human readable format with additional pretty-ms options","suites":["createDurationFormatter()"],"updatePoint":{"line":44,"column":84},"line":44,"code":"  it('format milliseconds in human readable format with additional pretty-ms options', () => {\n    const colonNotationFormatter = createDurationFormatter({\n      colonNotation: true,\n    });\n    expect(colonNotationFormatter(10500)).toBe('0:10.5');\n    const zeroDecimalFormatter = createDurationFormatter({\n      secondsDecimalDigits: 0,\n    });\n    expect(zeroDecimalFormatter(10500)).toBe('10s');\n    const subMillisecondFormatter = createDurationFormatter({\n      formatSubMilliseconds: true,\n    });\n    expect(subMillisecondFormatter(100.40008)).toBe('100ms 400µs 80ns');\n  });","file":"number-format/factories/createDurationFormatter.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"creates an instance of NumberFormatter","suites":["createSiAtMostNDigitFormatter({ n })"],"updatePoint":{"line":26,"column":44},"line":26,"code":"  it('creates an instance of NumberFormatter', () => {\n    const formatter = createSiAtMostNDigitFormatter({ n: 4 });\n    expect(formatter).toBeInstanceOf(NumberFormatter);\n  });","file":"number-format/factories/createSiAtMostNDigitFormatter.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"when n is specified, it formats number in SI format with at most n significant digits","suites":["createSiAtMostNDigitFormatter({ n })"],"updatePoint":{"line":30,"column":91},"line":30,"code":"  it('when n is specified, it formats number in SI format with at most n significant digits', () => {\n    const formatter = createSiAtMostNDigitFormatter({ n: 2 });\n    expect(formatter(10)).toBe('10');\n    expect(formatter(1)).toBe('1');\n    expect(formatter(1)).toBe('1');\n    expect(formatter(10)).toBe('10');\n    expect(formatter(10001)).toBe('10k');\n    expect(formatter(10100)).toBe('10k');\n    expect(formatter(111000000)).toBe('110M');\n    expect(formatter(0.23)).toBe('230m');\n    expect(formatter(0)).toBe('0');\n    expect(formatter(-10)).toBe('-10');\n    expect(formatter(-1)).toBe('-1');\n    expect(formatter(-1)).toBe('-1');\n    expect(formatter(-10)).toBe('-10');\n    expect(formatter(-10001)).toBe('-10k');\n    expect(formatter(-10101)).toBe('-10k');\n    expect(formatter(-111000000)).toBe('-110M');\n    expect(formatter(-0.23)).toBe('-230m');\n  });","file":"number-format/factories/createSiAtMostNDigitFormatter.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"when n is not specified, it defaults to n=3","suites":["createSiAtMostNDigitFormatter({ n })"],"updatePoint":{"line":50,"column":49},"line":50,"code":"  it('when n is not specified, it defaults to n=3', () => {\n    const formatter = createSiAtMostNDigitFormatter();\n    expect(formatter(10)).toBe('10');\n    expect(formatter(1)).toBe('1');\n    expect(formatter(1)).toBe('1');\n    expect(formatter(10)).toBe('10');\n    expect(formatter(10001)).toBe('10.0k');\n    expect(formatter(10100)).toBe('10.1k');\n    expect(formatter(111000000)).toBe('111M');\n    expect(formatter(0.23)).toBe('230m');\n    expect(formatter(0)).toBe('0');\n    expect(formatter(-10)).toBe('-10');\n    expect(formatter(-1)).toBe('-1');\n    expect(formatter(-1)).toBe('-1');\n    expect(formatter(-10)).toBe('-10');\n    expect(formatter(-10001)).toBe('-10.0k');\n    expect(formatter(-10101)).toBe('-10.1k');\n    expect(formatter(-111000000)).toBe('-111M');\n    expect(formatter(-0.23)).toBe('-230m');\n  });","file":"number-format/factories/createSiAtMostNDigitFormatter.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"creates an instance of NumberFormatter","suites":["createSmartNumberFormatter(options)"],"updatePoint":{"line":23,"column":44},"line":23,"code":"  it('creates an instance of NumberFormatter', () => {\n    const formatter = createSmartNumberFormatter();\n    expect(formatter).toBeInstanceOf(NumberFormatter);\n  });","file":"number-format/factories/createSmartNumberFormatter.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"formats 0 correctly","suites":["createSmartNumberFormatter(options)","using default options"],"updatePoint":{"line":29,"column":27},"line":29,"code":"    it('formats 0 correctly', () => {\n      expect(formatter(0)).toBe('0');\n    });","file":"number-format/factories/createSmartNumberFormatter.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"formats billion with B in stead of G","suites":["createSmartNumberFormatter(options)","using default options","for positive numbers"],"updatePoint":{"line":33,"column":46},"line":33,"code":"      it('formats billion with B in stead of G', () => {\n        expect(formatter(1000000000)).toBe('1B');\n        expect(formatter(4560000000)).toBe('4.56B');\n      });","file":"number-format/factories/createSmartNumberFormatter.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"formats numbers that are >= 1,000 & <= 1,000,000,000 as SI format with precision 3","suites":["createSmartNumberFormatter(options)","using default options","for positive numbers"],"updatePoint":{"line":37,"column":92},"line":37,"code":"      it('formats numbers that are >= 1,000 & <= 1,000,000,000 as SI format with precision 3', () => {\n        expect(formatter(1000)).toBe('1k');\n        expect(formatter(10001)).toBe('10k');\n        expect(formatter(10100)).toBe('10.1k');\n        expect(formatter(111000000)).toBe('111M');\n      });","file":"number-format/factories/createSmartNumberFormatter.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"formats number that are >= 1 & < 1,000 as integer or float with at most 2 decimal points","suites":["createSmartNumberFormatter(options)","using default options","for positive numbers"],"updatePoint":{"line":43,"column":98},"line":43,"code":"      it('formats number that are >= 1 & < 1,000 as integer or float with at most 2 decimal points', () => {\n        expect(formatter(1)).toBe('1');\n        expect(formatter(1)).toBe('1');\n        expect(formatter(10)).toBe('10');\n        expect(formatter(10)).toBe('10');\n        expect(formatter(10.23432)).toBe('10.23');\n        expect(formatter(274.2856)).toBe('274.29');\n        expect(formatter(999)).toBe('999');\n      });","file":"number-format/factories/createSmartNumberFormatter.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"formats numbers that are < 1 & >= 0.001 as float with at most 4 decimal points","suites":["createSmartNumberFormatter(options)","using default options","for positive numbers"],"updatePoint":{"line":52,"column":88},"line":52,"code":"      it('formats numbers that are < 1 & >= 0.001 as float with at most 4 decimal points', () => {\n        expect(formatter(0.1)).toBe('0.1');\n        expect(formatter(0.23)).toBe('0.23');\n        expect(formatter(0.699)).toBe('0.699');\n        expect(formatter(0.0023)).toBe('0.0023');\n        expect(formatter(0.002300001)).toBe('0.0023');\n      });","file":"number-format/factories/createSmartNumberFormatter.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"formats numbers that are < 0.001 & >= 0.000001 as micron","suites":["createSmartNumberFormatter(options)","using default options","for positive numbers"],"updatePoint":{"line":59,"column":66},"line":59,"code":"      it('formats numbers that are < 0.001 & >= 0.000001 as micron', () => {\n        expect(formatter(0.0002300001)).toBe('230µ');\n        expect(formatter(0.000023)).toBe('23µ');\n        expect(formatter(0.000001)).toBe('1µ');\n      });","file":"number-format/factories/createSmartNumberFormatter.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"formats numbers that are less than 0.000001 as SI format with precision 3","suites":["createSmartNumberFormatter(options)","using default options","for positive numbers"],"updatePoint":{"line":64,"column":83},"line":64,"code":"      it('formats numbers that are less than 0.000001 as SI format with precision 3', () => {\n        expect(formatter(0.0000001)).toBe('100n');\n      });","file":"number-format/factories/createSmartNumberFormatter.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"formats billion with B in stead of G","suites":["createSmartNumberFormatter(options)","using default options","for negative numbers"],"updatePoint":{"line":69,"column":46},"line":69,"code":"      it('formats billion with B in stead of G', () => {\n        expect(formatter(-1000000000)).toBe('-1B');\n        expect(formatter(-4560000000)).toBe('-4.56B');\n      });","file":"number-format/factories/createSmartNumberFormatter.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"formats numbers that are >= 1,000 & <= 1,000,000,000 as SI format with precision 3","suites":["createSmartNumberFormatter(options)","using default options","for negative numbers"],"updatePoint":{"line":73,"column":92},"line":73,"code":"      it('formats numbers that are >= 1,000 & <= 1,000,000,000 as SI format with precision 3', () => {\n        expect(formatter(-1000)).toBe('-1k');\n        expect(formatter(-10001)).toBe('-10k');\n        expect(formatter(-10100)).toBe('-10.1k');\n        expect(formatter(-111000000)).toBe('-111M');\n      });","file":"number-format/factories/createSmartNumberFormatter.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"formats number that are >= 1 & < 1,000 as integer or float with at most 2 decimal points","suites":["createSmartNumberFormatter(options)","using default options","for negative numbers"],"updatePoint":{"line":79,"column":98},"line":79,"code":"      it('formats number that are >= 1 & < 1,000 as integer or float with at most 2 decimal points', () => {\n        expect(formatter(-1)).toBe('-1');\n        expect(formatter(-1)).toBe('-1');\n        expect(formatter(-10)).toBe('-10');\n        expect(formatter(-10)).toBe('-10');\n        expect(formatter(-10.23432)).toBe('-10.23');\n        expect(formatter(-274.2856)).toBe('-274.29');\n        expect(formatter(-999)).toBe('-999');\n      });","file":"number-format/factories/createSmartNumberFormatter.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"formats numbers that are < 1 & >= 0.001 as float with at most 4 decimal points","suites":["createSmartNumberFormatter(options)","using default options","for negative numbers"],"updatePoint":{"line":88,"column":88},"line":88,"code":"      it('formats numbers that are < 1 & >= 0.001 as float with at most 4 decimal points', () => {\n        expect(formatter(-0.1)).toBe('-0.1');\n        expect(formatter(-0.23)).toBe('-0.23');\n        expect(formatter(-0.699)).toBe('-0.699');\n        expect(formatter(-0.0023)).toBe('-0.0023');\n        expect(formatter(-0.002300001)).toBe('-0.0023');\n      });","file":"number-format/factories/createSmartNumberFormatter.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"formats numbers that are < 0.001 & >= 0.000001 as micron","suites":["createSmartNumberFormatter(options)","using default options","for negative numbers"],"updatePoint":{"line":95,"column":66},"line":95,"code":"      it('formats numbers that are < 0.001 & >= 0.000001 as micron', () => {\n        expect(formatter(-0.0002300001)).toBe('-230µ');\n        expect(formatter(-0.000023)).toBe('-23µ');\n        expect(formatter(-0.000001)).toBe('-1µ');\n      });","file":"number-format/factories/createSmartNumberFormatter.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"formats numbers that are less than 0.000001 as SI format with precision 3","suites":["createSmartNumberFormatter(options)","using default options","for negative numbers"],"updatePoint":{"line":100,"column":83},"line":100,"code":"      it('formats numbers that are less than 0.000001 as SI format with precision 3', () => {\n        expect(formatter(-0.0000001)).toBe('-100n');\n      });","file":"number-format/factories/createSmartNumberFormatter.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"formats 0 correctly","suites":["createSmartNumberFormatter(options)","when options.signed is true, it adds + for positive numbers"],"updatePoint":{"line":108,"column":27},"line":108,"code":"    it('formats 0 correctly', () => {\n      expect(formatter(0)).toBe('0');\n    });","file":"number-format/factories/createSmartNumberFormatter.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"formats billion with B in stead of G","suites":["createSmartNumberFormatter(options)","when options.signed is true, it adds + for positive numbers","for positive numbers"],"updatePoint":{"line":112,"column":46},"line":112,"code":"      it('formats billion with B in stead of G', () => {\n        expect(formatter(1000000000)).toBe('+1B');\n        expect(formatter(4560000000)).toBe('+4.56B');\n      });","file":"number-format/factories/createSmartNumberFormatter.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"formats numbers that are >= 1,000 & <= 1,000,000,000 as SI format with precision 3","suites":["createSmartNumberFormatter(options)","when options.signed is true, it adds + for positive numbers","for positive numbers"],"updatePoint":{"line":116,"column":92},"line":116,"code":"      it('formats numbers that are >= 1,000 & <= 1,000,000,000 as SI format with precision 3', () => {\n        expect(formatter(1000)).toBe('+1k');\n        expect(formatter(10001)).toBe('+10k');\n        expect(formatter(10100)).toBe('+10.1k');\n        expect(formatter(111000000)).toBe('+111M');\n      });","file":"number-format/factories/createSmartNumberFormatter.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"formats number that are >= 1 & < 1,000 as integer or float with at most 2 decimal points","suites":["createSmartNumberFormatter(options)","when options.signed is true, it adds + for positive numbers","for positive numbers"],"updatePoint":{"line":122,"column":98},"line":122,"code":"      it('formats number that are >= 1 & < 1,000 as integer or float with at most 2 decimal points', () => {\n        expect(formatter(1)).toBe('+1');\n        expect(formatter(1)).toBe('+1');\n        expect(formatter(10)).toBe('+10');\n        expect(formatter(10)).toBe('+10');\n        expect(formatter(10.23432)).toBe('+10.23');\n        expect(formatter(274.2856)).toBe('+274.29');\n        expect(formatter(999)).toBe('+999');\n      });","file":"number-format/factories/createSmartNumberFormatter.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"formats numbers that are < 1 & >= 0.001 as float with at most 4 decimal points","suites":["createSmartNumberFormatter(options)","when options.signed is true, it adds + for positive numbers","for positive numbers"],"updatePoint":{"line":131,"column":88},"line":131,"code":"      it('formats numbers that are < 1 & >= 0.001 as float with at most 4 decimal points', () => {\n        expect(formatter(0.1)).toBe('+0.1');\n        expect(formatter(0.23)).toBe('+0.23');\n        expect(formatter(0.699)).toBe('+0.699');\n        expect(formatter(0.0023)).toBe('+0.0023');\n        expect(formatter(0.002300001)).toBe('+0.0023');\n      });","file":"number-format/factories/createSmartNumberFormatter.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"formats numbers that are < 0.001 & >= 0.000001 as micron","suites":["createSmartNumberFormatter(options)","when options.signed is true, it adds + for positive numbers","for positive numbers"],"updatePoint":{"line":138,"column":66},"line":138,"code":"      it('formats numbers that are < 0.001 & >= 0.000001 as micron', () => {\n        expect(formatter(0.0002300001)).toBe('+230µ');\n        expect(formatter(0.000023)).toBe('+23µ');\n        expect(formatter(0.000001)).toBe('+1µ');\n      });","file":"number-format/factories/createSmartNumberFormatter.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"formats numbers that are less than 0.000001 as SI format with precision 3","suites":["createSmartNumberFormatter(options)","when options.signed is true, it adds + for positive numbers","for positive numbers"],"updatePoint":{"line":143,"column":83},"line":143,"code":"      it('formats numbers that are less than 0.000001 as SI format with precision 3', () => {\n        expect(formatter(0.0000001)).toBe('+100n');\n      });","file":"number-format/factories/createSmartNumberFormatter.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"exports modules","suites":["index"],"updatePoint":{"line":33,"column":21},"line":33,"code":"  it('exports modules', () => {\n    [\n      createD3NumberFormatter,\n      createDurationFormatter,\n      createSiAtMostNDigitFormatter,\n      formatNumber,\n      getNumberFormatter,\n      getNumberFormatterRegistry,\n      NumberFormats,\n      NumberFormatter,\n      PREVIEW_VALUE,\n    ].forEach(x => expect(x).toBeDefined());\n  });","file":"number-format/index.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"requires config.id","suites":["NumberFormatter","new NumberFormatter(config)"],"updatePoint":{"line":24,"column":26},"line":24,"code":"    it('requires config.id', () => {\n      expect(\n        () =>\n          // @ts-ignore\n          new NumberFormatter({\n            formatFunc: () => '',\n          }),\n      ).toThrow();\n    });","file":"number-format/NumberFormatter.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"requires config.formatFunc","suites":["NumberFormatter","new NumberFormatter(config)"],"updatePoint":{"line":33,"column":34},"line":33,"code":"    it('requires config.formatFunc', () => {\n      expect(\n        () =>\n          // @ts-ignore\n          new NumberFormatter({\n            id: 'my_format',\n          }),\n      ).toThrow();\n    });","file":"number-format/NumberFormatter.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"returns formatted value","suites":["NumberFormatter","formatter is also a format function itself"],"updatePoint":{"line":48,"column":31},"line":48,"code":"    it('returns formatted value', () => {\n      expect(formatter(12345.67)).toEqual('12345.670');\n    });","file":"number-format/NumberFormatter.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"formatter(value) is the same with formatter.format(value)","suites":["NumberFormatter","formatter is also a format function itself"],"updatePoint":{"line":51,"column":65},"line":51,"code":"    it('formatter(value) is the same with formatter.format(value)', () => {\n      const value = 12345.67;\n      expect(formatter(value)).toEqual(formatter.format(value));\n    });","file":"number-format/NumberFormatter.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"handles null","suites":["NumberFormatter",".format(value)"],"updatePoint":{"line":61,"column":20},"line":61,"code":"    it('handles null', () => {\n      expect(formatter.format(null)).toEqual('null');\n    });","file":"number-format/NumberFormatter.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"handles undefined","suites":["NumberFormatter",".format(value)"],"updatePoint":{"line":64,"column":25},"line":64,"code":"    it('handles undefined', () => {\n      expect(formatter.format(undefined)).toEqual('undefined');\n    });","file":"number-format/NumberFormatter.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"handles NaN","suites":["NumberFormatter",".format(value)"],"updatePoint":{"line":67,"column":19},"line":67,"code":"    it('handles NaN', () => {\n      expect(formatter.format(NaN)).toEqual('NaN');\n    });","file":"number-format/NumberFormatter.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"handles positive and negative infinity","suites":["NumberFormatter",".format(value)"],"updatePoint":{"line":70,"column":46},"line":70,"code":"    it('handles positive and negative infinity', () => {\n      expect(formatter.format(Number.POSITIVE_INFINITY)).toEqual('∞');\n      expect(formatter.format(Number.NEGATIVE_INFINITY)).toEqual('-∞');\n    });","file":"number-format/NumberFormatter.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"otherwise returns formatted value","suites":["NumberFormatter",".format(value)"],"updatePoint":{"line":74,"column":41},"line":74,"code":"    it('otherwise returns formatted value', () => {\n      expect(formatter.format(12345.67)).toEqual('12345.670');\n    });","file":"number-format/NumberFormatter.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"returns string comparing value before and after formatting","suites":["NumberFormatter",".preview(value)"],"updatePoint":{"line":83,"column":66},"line":83,"code":"    it('returns string comparing value before and after formatting', () => {\n      expect(formatter.preview(100)).toEqual('100 => 100.00');\n    });","file":"number-format/NumberFormatter.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"uses the default preview value if not specified","suites":["NumberFormatter",".preview(value)"],"updatePoint":{"line":86,"column":55},"line":86,"code":"    it('uses the default preview value if not specified', () => {\n      expect(formatter.preview()).toEqual('12345.432 => 12345.43');\n    });","file":"number-format/NumberFormatter.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"has SMART_NUMBER as default formatter out of the box","suites":["NumberFormatterRegistry"],"updatePoint":{"line":31,"column":58},"line":31,"code":"  it('has SMART_NUMBER as default formatter out of the box', () => {\n    expect(registry.getDefaultKey()).toBe(NumberFormats.SMART_NUMBER);\n  });","file":"number-format/NumberFormatterRegistry.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"creates and returns a new formatter if does not exist","suites":["NumberFormatterRegistry",".get(format)"],"updatePoint":{"line":35,"column":61},"line":35,"code":"    it('creates and returns a new formatter if does not exist', () => {\n      const formatter = registry.get('.2f');\n      expect(formatter).toBeInstanceOf(NumberFormatter);\n      expect(formatter.format(100)).toEqual('100.00');\n    });","file":"number-format/NumberFormatterRegistry.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"returns an existing formatter if already exists","suites":["NumberFormatterRegistry",".get(format)"],"updatePoint":{"line":40,"column":55},"line":40,"code":"    it('returns an existing formatter if already exists', () => {\n      const formatter = registry.get('.2f');\n      const formatter2 = registry.get('.2f');\n      expect(formatter).toBe(formatter2);\n    });","file":"number-format/NumberFormatterRegistry.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"falls back to default format if format is not specified","suites":["NumberFormatterRegistry",".get(format)"],"updatePoint":{"line":45,"column":63},"line":45,"code":"    it('falls back to default format if format is not specified', () => {\n      registry.setDefaultKey('.1f');\n      const formatter = registry.get();\n      expect(formatter.format(100)).toEqual('100.0');\n    });","file":"number-format/NumberFormatterRegistry.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"falls back to default format if format is null","suites":["NumberFormatterRegistry",".get(format)"],"updatePoint":{"line":50,"column":54},"line":50,"code":"    it('falls back to default format if format is null', () => {\n      registry.setDefaultKey('.1f');\n      // @ts-ignore\n      const formatter = registry.get(null);\n      expect(formatter.format(100)).toEqual('100.0');\n    });","file":"number-format/NumberFormatterRegistry.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"falls back to default format if format is undefined","suites":["NumberFormatterRegistry",".get(format)"],"updatePoint":{"line":56,"column":59},"line":56,"code":"    it('falls back to default format if format is undefined', () => {\n      registry.setDefaultKey('.1f');\n      const formatter = registry.get(undefined);\n      expect(formatter.format(100)).toEqual('100.0');\n    });","file":"number-format/NumberFormatterRegistry.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"falls back to default format if format is empty string","suites":["NumberFormatterRegistry",".get(format)"],"updatePoint":{"line":61,"column":62},"line":61,"code":"    it('falls back to default format if format is empty string', () => {\n      registry.setDefaultKey('.1f');\n      const formatter = registry.get('');\n      expect(formatter.format(100)).toEqual('100.0');\n    });","file":"number-format/NumberFormatterRegistry.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"removes leading and trailing spaces from format","suites":["NumberFormatterRegistry",".get(format)"],"updatePoint":{"line":66,"column":55},"line":66,"code":"    it('removes leading and trailing spaces from format', () => {\n      const formatter = registry.get(' .2f');\n      expect(formatter).toBeInstanceOf(NumberFormatter);\n      expect(formatter.format(100)).toEqual('100.00');\n      const formatter2 = registry.get('.2f ');\n      expect(formatter2).toBeInstanceOf(NumberFormatter);\n      expect(formatter2.format(100)).toEqual('100.00');\n      const formatter3 = registry.get(' .2f ');\n      expect(formatter3).toBeInstanceOf(NumberFormatter);\n      expect(formatter3.format(100)).toEqual('100.00');\n    });","file":"number-format/NumberFormatterRegistry.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"return the value with the specified format","suites":["NumberFormatterRegistry",".format(format, value)"],"updatePoint":{"line":79,"column":50},"line":79,"code":"    it('return the value with the specified format', () => {\n      expect(registry.format('.2f', 100)).toEqual('100.00');\n      expect(registry.format(',d', 100)).toEqual('100');\n    });","file":"number-format/NumberFormatterRegistry.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"falls back to the default formatter if the format is undefined","suites":["NumberFormatterRegistry",".format(format, value)"],"updatePoint":{"line":83,"column":70},"line":83,"code":"    it('falls back to the default formatter if the format is undefined', () => {\n      expect(registry.format(undefined, 1000)).toEqual('1k');\n    });","file":"number-format/NumberFormatterRegistry.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"returns a NumberFormatterRegistry","suites":["NumberFormatterRegistrySingleton","getNumberFormatterRegistry()"],"updatePoint":{"line":30,"column":41},"line":30,"code":"    it('returns a NumberFormatterRegistry', () => {\n      expect(getNumberFormatterRegistry()).toBeInstanceOf(\n        NumberFormatterRegistry,\n      );\n    });","file":"number-format/NumberFormatterRegistrySingleton.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"returns a format function","suites":["NumberFormatterRegistrySingleton","getNumberFormatter(format)"],"updatePoint":{"line":37,"column":33},"line":37,"code":"    it('returns a format function', () => {\n      const format = getNumberFormatter('.3s');\n      expect(format(12345)).toEqual('12.3k');\n    });","file":"number-format/NumberFormatterRegistrySingleton.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"returns a format function even given invalid format","suites":["NumberFormatterRegistrySingleton","getNumberFormatter(format)"],"updatePoint":{"line":41,"column":59},"line":41,"code":"    it('returns a format function even given invalid format', () => {\n      const format = getNumberFormatter('xkcd');\n      expect(format(12345)).toEqual('12345 (Invalid format: xkcd)');\n    });","file":"number-format/NumberFormatterRegistrySingleton.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"falls back to default format if format is not specified","suites":["NumberFormatterRegistrySingleton","getNumberFormatter(format)"],"updatePoint":{"line":45,"column":63},"line":45,"code":"    it('falls back to default format if format is not specified', () => {\n      const formatter = getNumberFormatter();\n      expect(formatter.format(100)).toEqual('100');\n    });","file":"number-format/NumberFormatterRegistrySingleton.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"format the given number using the specified format","suites":["NumberFormatterRegistrySingleton","formatNumber(format, value)"],"updatePoint":{"line":51,"column":58},"line":51,"code":"    it('format the given number using the specified format', () => {\n      const output = formatNumber('.3s', 12345);\n      expect(output).toEqual('12.3k');\n    });","file":"number-format/NumberFormatterRegistrySingleton.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"falls back to the default formatter if the format is undefined","suites":["NumberFormatterRegistrySingleton","formatNumber(format, value)"],"updatePoint":{"line":55,"column":70},"line":55,"code":"    it('falls back to the default formatter if the format is undefined', () => {\n      expect(formatNumber(undefined, 1000)).toEqual('1k');\n    });","file":"number-format/NumberFormatterRegistrySingleton.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"sets a specific FormatLocaleDefinition","suites":["NumberFormatterRegistrySingleton","setD3Format()"],"updatePoint":{"line":60,"column":46},"line":60,"code":"    it('sets a specific FormatLocaleDefinition', () => {\n      setD3Format({\n        decimal: ';',\n        thousands: '-',\n        currency: ['€', ''],\n        grouping: [2],\n      });\n      const formatter = getNumberFormatter('$,.2f');\n      expect(formatter.format(12345.67)).toEqual('€1-23-45;67');\n    });","file":"number-format/NumberFormatterRegistrySingleton.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"falls back to default value for unspecified locale format parameters","suites":["NumberFormatterRegistrySingleton","setD3Format()"],"updatePoint":{"line":70,"column":76},"line":70,"code":"    it('falls back to default value for unspecified locale format parameters', () => {\n      setD3Format({\n        currency: ['€', ''],\n      });\n      const formatter = getNumberFormatter('$,.1f');\n      expect(formatter.format(12345.67)).toEqual('€12,345.7');\n    });","file":"number-format/NumberFormatterRegistrySingleton.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"returns a promise of LegacyChartDataResponse","suites":["fetchExploreJson()"],"updatePoint":{"line":28,"column":50},"line":28,"code":"  it('returns a promise of LegacyChartDataResponse', () => {\n    fetchMock.post('glob:*/superset/explore_json/', {\n      field1: 'abc',\n      field2: 'def',\n    });\n\n    return expect(\n      fetchExploreJson({\n        formData: {\n          granularity: 'minute',\n          viz_type: 'word_cloud',\n          datasource: '1__table',\n        },\n      }),\n    ).resolves.toEqual({\n      field1: 'abc',\n      field2: 'def',\n    });\n  });","file":"query/api/legacy/fetchExploreJson.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"uses GET when specified","suites":["fetchExploreJson()"],"updatePoint":{"line":47,"column":29},"line":47,"code":"  it('uses GET when specified', async () => {\n    expect.assertions(4);\n    const mockUrl = 'glob:*/superset/explore_json/*';\n\n    fetchMock.get(mockUrl, {\n      field1: 'abc',\n      field2: 'def',\n    });\n\n    const result = await fetchExploreJson({\n      method: 'GET',\n      formData: {\n        granularity: 'minute',\n        viz_type: 'word_cloud',\n        datasource: '1__table',\n      },\n    });\n\n    expect(result).toEqual({\n      field1: 'abc',\n      field2: 'def',\n    });\n    const mockCalls = fetchMock.calls(mockUrl);\n    expect(mockCalls).toHaveLength(1);\n    expect(mockCalls[0][0]).toEqual(\n      'http://localhost/superset/explore_json/?form_data=%7B%22granularity%22%3A%22minute%22%2C%22viz_type%22%3A%22word_cloud%22%2C%22datasource%22%3A%221__table%22%7D',\n    );\n    expect(mockCalls[0][1]).toEqual(\n      expect.objectContaining({\n        method: 'GET',\n        body: undefined,\n      }),\n    );\n  });","file":"query/api/legacy/fetchExploreJson.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"returns datasource metadata for given datasource key","suites":["getFormData()"],"updatePoint":{"line":29,"column":58},"line":29,"code":"  it('returns datasource metadata for given datasource key', () => {\n    const mockData = {\n      field1: 'abc',\n      field2: 'def',\n    };\n\n    fetchMock.get(\n      'glob:*/superset/fetch_datasource_metadata?datasourceKey=1__table',\n      mockData,\n    );\n\n    return expect(\n      getDatasourceMetadata({\n        datasourceKey: '1__table',\n      }),\n    ).resolves.toEqual(mockData);\n  });","file":"query/api/legacy/getDatasourceMetadata.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"returns formData for given slice id","suites":["getFormData()"],"updatePoint":{"line":43,"column":41},"line":43,"code":"  it('returns formData for given slice id', () => {\n    fetchMock.get(`glob:*/api/v1/form_data/?slice_id=1`, mockData);\n\n    return expect(\n      getFormData({\n        sliceId: 1,\n      }),\n    ).resolves.toEqual(mockData);\n  });","file":"query/api/legacy/getFormData.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"overrides formData when overrideFormData is specified","suites":["getFormData()"],"updatePoint":{"line":53,"column":59},"line":53,"code":"  it('overrides formData when overrideFormData is specified', () => {\n    fetchMock.get(`glob:*/api/v1/form_data/?slice_id=1`, mockData);\n\n    return expect(\n      getFormData({\n        sliceId: 1,\n        overrideFormData: {\n          metric: 'avg__value',\n        },\n      }),\n    ).resolves.toEqual({\n      ...mockData,\n      metric: 'avg__value',\n    });\n  });","file":"query/api/legacy/getFormData.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"returns a promise of ChartDataResponse","suites":["API v1 > getChartData()"],"updatePoint":{"line":27,"column":44},"line":27,"code":"  it('returns a promise of ChartDataResponse', async () => {\n    const response = {\n      result: [\n        {\n          field1: 'abc',\n          field2: 'def',\n        },\n      ],\n    };\n\n    fetchMock.post('glob:*/api/v1/chart/data', response);\n\n    const result = await ApiV1.getChartData(\n      buildQueryContext({\n        granularity: 'minute',\n        viz_type: 'word_cloud',\n        datasource: '1__table',\n      }),\n    );\n    return expect(result).toEqual(response);\n  });","file":"query/api/v1/getChartData.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should throw error directly","suites":["handleError()"],"updatePoint":{"line":49,"column":33},"line":49,"code":"  it('should throw error directly', async () => {\n    expect.assertions(3);\n    const input = new SupersetApiError({ message: 'timeout' });\n    const output = await testHandleError(input, 'timeout');\n    expect(input).toBe(output);\n  });","file":"query/api/v1/handleError.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should handle error string","suites":["handleError()"],"updatePoint":{"line":56,"column":32},"line":56,"code":"  it('should handle error string', async () => {\n    expect.assertions(2);\n    await testHandleError('STOP', 'STOP');\n  });","file":"query/api/v1/handleError.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should handle HTTP error","suites":["handleError()"],"updatePoint":{"line":61,"column":30},"line":61,"code":"  it('should handle HTTP error', async () => {\n    expect.assertions(2);\n    const mockResponse = new Response('Ha?', {\n      status: 404,\n      statusText: 'NOT FOUND',\n    });\n    await testHandleError(mockResponse, '404 NOT FOUND');\n  });","file":"query/api/v1/handleError.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should handle HTTP error with status < 400","suites":["handleError()"],"updatePoint":{"line":70,"column":48},"line":70,"code":"  it('should handle HTTP error with status < 400', async () => {\n    expect.assertions(2);\n    const mockResponse = new Response('Ha haha?', {\n      status: 302,\n      statusText: 'Found',\n    });\n    await testHandleError(mockResponse, '302 Found');\n  });","file":"query/api/v1/handleError.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should use message from HTTP error","suites":["handleError()"],"updatePoint":{"line":79,"column":40},"line":79,"code":"  it('should use message from HTTP error', async () => {\n    expect.assertions(2);\n    const mockResponse = new Response('{ \"message\": \"BAD BAD\" }', {\n      status: 500,\n      statusText: 'Server Error',\n    });\n    await testHandleError(mockResponse, 'BAD BAD');\n  });","file":"query/api/v1/handleError.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should handle response of single error","suites":["handleError()"],"updatePoint":{"line":88,"column":44},"line":88,"code":"  it('should handle response of single error', async () => {\n    expect.assertions(2);\n    const mockResponse = new Response(\n      '{ \"error\": \"BAD BAD\", \"link\": \"https://superset.apache.org\" }',\n      {\n        status: 403,\n        statusText: 'Access Denied',\n      },\n    );\n    await testHandleError(mockResponse, {\n      message: 'BAD BAD',\n      extra: { link: 'https://superset.apache.org' },\n    });\n  });","file":"query/api/v1/handleError.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should handle single error object","suites":["handleError()"],"updatePoint":{"line":103,"column":39},"line":103,"code":"  it('should handle single error object', async () => {\n    expect.assertions(2);\n    const mockError = {\n      error: {\n        message: 'Request timeout',\n        error_type: SupersetApiErrorType.FRONTEND_TIMEOUT_ERROR,\n      },\n    };\n    await testHandleError(mockError, {\n      message: 'Request timeout',\n      errorType: 'FRONTEND_TIMEOUT_ERROR',\n    });\n  });","file":"query/api/v1/handleError.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should process multi errors in HTTP json","suites":["handleError()"],"updatePoint":{"line":117,"column":46},"line":117,"code":"  it('should process multi errors in HTTP json', async () => {\n    expect.assertions(2);\n    const mockResponse = new Response(\n      '{ \"errors\": [{ \"error_type\": \"NOT OK\" }] }',\n      {\n        status: 403,\n        statusText: 'Access Denied',\n      },\n    );\n    await testHandleError(mockResponse, 'NOT OK');\n  });","file":"query/api/v1/handleError.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should handle invalid multi errors","suites":["handleError()"],"updatePoint":{"line":129,"column":40},"line":129,"code":"  it('should handle invalid multi errors', async () => {\n    expect.assertions(4);\n    const mockResponse1 = new Response('{ \"errors\": [] }', {\n      status: 403,\n      statusText: 'Access Denied',\n    });\n    const mockResponse2 = new Response('{ \"errors\": null }', {\n      status: 400,\n      statusText: 'Bad Request',\n    });\n    await testHandleError(mockResponse1, '403 Access Denied');\n    await testHandleError(mockResponse2, '400 Bad Request');\n  });","file":"query/api/v1/handleError.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should fallback to statusText","suites":["handleError()"],"updatePoint":{"line":143,"column":35},"line":143,"code":"  it('should fallback to statusText', async () => {\n    expect.assertions(2);\n    const mockResponse = new Response('{ \"failed\": \"random ramble\" }', {\n      status: 403,\n      statusText: 'Access Denied',\n    });\n    await testHandleError(mockResponse, '403 Access Denied');\n  });","file":"query/api/v1/handleError.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should handle regular JS error","suites":["handleError()"],"updatePoint":{"line":152,"column":36},"line":152,"code":"  it('should handle regular JS error', async () => {\n    expect.assertions(4);\n    await testHandleError(new Error('What?'), 'What?');\n    const emptyError = new Error();\n    emptyError.stack = undefined;\n    await testHandleError(emptyError, 'Unknown Error');\n  });","file":"query/api/v1/handleError.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should handle { error: ... }","suites":["handleError()"],"updatePoint":{"line":160,"column":34},"line":160,"code":"  it('should handle { error: ... }', async () => {\n    expect.assertions(2);\n    await testHandleError({ error: 'Hmm' }, 'Hmm');\n  });","file":"query/api/v1/handleError.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should throw unknown error","suites":["handleError()"],"updatePoint":{"line":165,"column":32},"line":165,"code":"  it('should throw unknown error', async () => {\n    expect.assertions(4);\n    await testHandleError(\n      Promise.resolve('Some random things') as never,\n      'Unknown Error',\n    );\n    await testHandleError(undefined as never, 'Unknown Error');\n  });","file":"query/api/v1/handleError.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should expose method and endpoint","suites":["makeApi()"],"updatePoint":{"line":28,"column":39},"line":28,"code":"  it('should expose method and endpoint', () => {\n    const api = makeApi({\n      method: 'GET',\n      endpoint: '/test',\n    });\n    expect(api.method).toEqual('GET');\n    expect(api.endpoint).toEqual('/test');\n    expect(api.requestType).toEqual('search');\n  });","file":"query/api/v1/makeApi.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should allow custom client","suites":["makeApi()"],"updatePoint":{"line":38,"column":32},"line":38,"code":"  it('should allow custom client', async () => {\n    expect.assertions(2);\n    const api = makeApi({\n      method: 'GET',\n      endpoint: '/test-custom-client',\n    });\n    const client = new SupersetClientClass({ baseUrl: 'http://foo/' });\n    const mockResponse = { yes: 'ok' };\n    const mockRequest = jest.fn(() =>\n      Promise.resolve(\n        new Response(JSON.stringify(mockResponse), {\n          headers: { 'Content-Type': 'application/json' },\n        }),\n      ),\n    );\n    Object.assign(client, {\n      request: mockRequest,\n    });\n    const result = await api(null, { client });\n    expect(result).toEqual(mockResponse);\n    expect(mockRequest).toHaveBeenCalledTimes(1);\n  });","file":"query/api/v1/makeApi.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should obtain json response by default","suites":["makeApi()"],"updatePoint":{"line":61,"column":44},"line":61,"code":"  it('should obtain json response by default', async () => {\n    expect.assertions(1);\n    const api = makeApi({\n      method: 'GET',\n      endpoint: '/test',\n    });\n    fetchMock.get('glob:*/test', { yes: 'ok' });\n    expect(await api({})).toEqual({ yes: 'ok' });\n  });","file":"query/api/v1/makeApi.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should allow custom parseResponse","suites":["makeApi()"],"updatePoint":{"line":71,"column":39},"line":71,"code":"  it('should allow custom parseResponse', async () => {\n    expect.assertions(2);\n    const responseJson = { items: [1, 2, 3] };\n    fetchMock.post('glob:*/test', responseJson);\n    const api = makeApi({\n      method: 'POST',\n      endpoint: '/test',\n      processResponse: (json: typeof responseJson) =>\n        json.items.reduce((a: number, b: number) => a + b),\n    });\n    expect(api.method).toEqual('POST');\n    expect(await api({})).toBe(6);\n  });","file":"query/api/v1/makeApi.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should post FormData when requestType=form","suites":["makeApi()"],"updatePoint":{"line":85,"column":48},"line":85,"code":"  it('should post FormData when requestType=form', async () => {\n    expect.assertions(3);\n    const api = makeApi({\n      method: 'POST',\n      endpoint: '/test-formdata',\n      requestType: 'form',\n    });\n    fetchMock.post('glob:*/test-formdata', { test: 'ok' });\n\n    expect(await api({ request: 'test' })).toEqual({ test: 'ok' });\n\n    const expected = new FormData();\n    expected.append('request', JSON.stringify('test'));\n    const received = fetchMock.lastOptions()?.body as FormData;\n\n    expect(received).toBeInstanceOf(FormData);\n    expect(received.get('request')).toEqual(expected.get('request'));\n  });","file":"query/api/v1/makeApi.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should use searchParams for method=GET (`requestType=search` implied)","suites":["makeApi()"],"updatePoint":{"line":104,"column":75},"line":104,"code":"  it('should use searchParams for method=GET (`requestType=search` implied)', async () => {\n    expect.assertions(1);\n    const api = makeApi({\n      method: 'GET',\n      endpoint: '/test-get-search',\n    });\n    fetchMock.get('glob:*/test-get-search*', { search: 'get' });\n    await api({ p1: 1, p2: 2, p3: [1, 2] });\n    expect(fetchMock.lastUrl()).toContain(\n      '/test-get-search?p1=1&p2=2&p3=1%2C2',\n    );\n  });","file":"query/api/v1/makeApi.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should serialize rison for method=GET, requestType=rison","suites":["makeApi()"],"updatePoint":{"line":117,"column":62},"line":117,"code":"  it('should serialize rison for method=GET, requestType=rison', async () => {\n    expect.assertions(1);\n    const api = makeApi({\n      method: 'GET',\n      endpoint: '/test-post-search',\n      requestType: 'rison',\n    });\n    fetchMock.get('glob:*/test-post-search*', { rison: 'get' });\n    await api({ p1: 1, p3: [1, 2] });\n    expect(fetchMock.lastUrl()).toContain(\n      '/test-post-search?q=(p1:1,p3:!(1,2))',\n    );\n  });","file":"query/api/v1/makeApi.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should use searchParams for method=POST, requestType=search","suites":["makeApi()"],"updatePoint":{"line":131,"column":65},"line":131,"code":"  it('should use searchParams for method=POST, requestType=search', async () => {\n    expect.assertions(1);\n    const api = makeApi({\n      method: 'POST',\n      endpoint: '/test-post-search',\n      requestType: 'search',\n    });\n    fetchMock.post('glob:*/test-post-search*', { search: 'post' });\n    await api({ p1: 1, p3: [1, 2] });\n    expect(fetchMock.lastUrl()).toContain('/test-post-search?p1=1&p3=1%2C2');\n  });","file":"query/api/v1/makeApi.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should throw when requestType is invalid","suites":["makeApi()"],"updatePoint":{"line":143,"column":46},"line":143,"code":"  it('should throw when requestType is invalid', () => {\n    expect(() => {\n      makeApi({\n        method: 'POST',\n        endpoint: '/test-formdata',\n        // @ts-ignore\n        requestType: 'text',\n      });\n    }).toThrow('Invalid request payload type');\n  });","file":"query/api/v1/makeApi.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should handle errors","suites":["makeApi()"],"updatePoint":{"line":154,"column":26},"line":154,"code":"  it('should handle errors', async () => {\n    expect.assertions(1);\n    const api = makeApi({\n      method: 'POST',\n      endpoint: '/test-formdata',\n      requestType: 'form',\n    });\n    let error;\n\n    fetchMock.post('glob:*/test-formdata', { test: 'ok' });\n\n    try {\n      await api('<This is an invalid JSON string>');\n    } catch (err) {\n      error = err;\n    } finally {\n      expect((error as SupersetApiError).message).toContain('Invalid payload');\n    }\n  });","file":"query/api/v1/makeApi.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should handle error on 200 response","suites":["makeApi()"],"updatePoint":{"line":174,"column":41},"line":174,"code":"  it('should handle error on 200 response', async () => {\n    expect.assertions(1);\n    const api = makeApi({\n      method: 'POST',\n      endpoint: '/test-200-error',\n      requestType: 'json',\n    });\n    fetchMock.post('glob:*/test-200-error', { error: 'not ok' });\n\n    let error;\n    try {\n      await api({});\n    } catch (err) {\n      error = err;\n    } finally {\n      expect((error as SupersetApiError).message).toContain('not ok');\n    }\n  });","file":"query/api/v1/makeApi.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should parse text response when responseType=text","suites":["makeApi()"],"updatePoint":{"line":193,"column":55},"line":193,"code":"  it('should parse text response when responseType=text', async () => {\n    expect.assertions(1);\n    const api = makeApi<JsonValue, string, 'text'>({\n      method: 'PUT',\n      endpoint: '/test-parse-text',\n      requestType: 'form',\n      responseType: 'text',\n      processResponse: text => `${text}?`,\n    });\n    fetchMock.put('glob:*/test-parse-text', 'ok');\n    const result = await api({ field1: 11 });\n    expect(result).toBe('ok?');\n  });","file":"query/api/v1/makeApi.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should return raw response when responseType=raw","suites":["makeApi()"],"updatePoint":{"line":207,"column":54},"line":207,"code":"  it('should return raw response when responseType=raw', async () => {\n    expect.assertions(2);\n    const api = makeApi<JsonValue, number, 'raw'>({\n      method: 'DELETE',\n      endpoint: '/test-raw-response',\n      responseType: 'raw',\n      processResponse: response => response.status,\n    });\n    fetchMock.delete('glob:*/test-raw-response?*', 'ok');\n    const result = await api({ field1: 11 }, {});\n    expect(result).toEqual(200);\n    expect(fetchMock.lastUrl()).toContain('/test-raw-response?field1=11');\n  });","file":"query/api/v1/makeApi.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should build datasource for table sources and apply defaults","suites":["buildQueryContext"],"updatePoint":{"line":24,"column":66},"line":24,"code":"  it('should build datasource for table sources and apply defaults', () => {\n    const queryContext = buildQueryContext({\n      datasource: '5__table',\n      granularity_sqla: 'ds',\n      viz_type: 'table',\n    });\n    expect(queryContext.datasource.id).toBe(5);\n    expect(queryContext.datasource.type).toBe('table');\n    expect(queryContext.force).toBe(false);\n    expect(queryContext.result_format).toBe('json');\n    expect(queryContext.result_type).toBe('full');\n  });","file":"query/buildQueryContext.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should build datasource for table sources with columns","suites":["buildQueryContext"],"updatePoint":{"line":36,"column":60},"line":36,"code":"  it('should build datasource for table sources with columns', () => {\n    const queryContext = buildQueryContext(\n      {\n        datasource: '5__table',\n        granularity_sqla: 'ds',\n        viz_type: 'table',\n        source: 'source_column',\n        source_category: 'source_category_column',\n        target: 'target_column',\n        target_category: 'target_category_column',\n      },\n      {\n        queryFields: {\n          source: 'columns',\n          source_category: 'columns',\n          target: 'columns',\n          target_category: 'columns',\n        },\n      },\n    );\n    expect(queryContext.datasource.id).toBe(5);\n    expect(queryContext.datasource.type).toBe('table');\n    expect(queryContext.force).toBe(false);\n    expect(queryContext.result_format).toBe('json');\n    expect(queryContext.result_type).toBe('full');\n    expect(queryContext.queries).toEqual(\n      expect.arrayContaining([\n        expect.objectContaining({\n          columns: [\n            'source_column',\n            'source_category_column',\n            'target_column',\n            'target_category_column',\n          ],\n        }),\n      ]),\n    );\n  });","file":"query/buildQueryContext.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should build datasource for table sources and process with custom function","suites":["buildQueryContext"],"updatePoint":{"line":74,"column":80},"line":74,"code":"  it('should build datasource for table sources and process with custom function', () => {\n    const queryContext = buildQueryContext(\n      {\n        datasource: '5__table',\n        granularity_sqla: 'ds',\n        viz_type: 'table',\n        source: 'source_column',\n        source_category: 'source_category_column',\n        target: 'target_column',\n        target_category: 'target_category_column',\n      },\n      function addExtraColumn(queryObject) {\n        return [{ ...queryObject, columns: ['dummy_column'] }];\n      },\n    );\n    expect(queryContext.datasource.id).toBe(5);\n    expect(queryContext.datasource.type).toBe('table');\n    expect(queryContext.force).toBe(false);\n    expect(queryContext.result_format).toBe('json');\n    expect(queryContext.result_type).toBe('full');\n    expect(queryContext.queries).toEqual(\n      expect.arrayContaining([\n        expect.objectContaining({\n          columns: ['dummy_column'],\n        }),\n      ]),\n    );\n  });","file":"query/buildQueryContext.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should remove undefined value in post_processing","suites":["buildQueryContext"],"updatePoint":{"line":103,"column":54},"line":103,"code":"  it('should remove undefined value in post_processing', () => {\n    const queryContext = buildQueryContext(\n      {\n        datasource: '5__table',\n        viz_type: 'table',\n      },\n      () => [\n        {\n          post_processing: [\n            undefined,\n            undefined,\n            {\n              operation: 'flatten',\n            },\n            undefined,\n          ],\n        },\n      ],\n    );\n    expect(queryContext.queries[0].post_processing).toEqual([\n      {\n        operation: 'flatten',\n      },\n    ]);\n  });","file":"query/buildQueryContext.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should call normalizeTimeColumn if GENERIC_CHART_AXES is enabled and has x_axis","suites":["buildQueryContext"],"updatePoint":{"line":128,"column":85},"line":128,"code":"  it('should call normalizeTimeColumn if GENERIC_CHART_AXES is enabled and has x_axis', () => {\n    Object.defineProperty(getXAxisModule, 'hasGenericChartAxes', {\n      value: true,\n    });\n    const spyNormalizeTimeColumn = jest.spyOn(\n      queryModule,\n      'normalizeTimeColumn',\n    );\n\n    buildQueryContext(\n      {\n        datasource: '5__table',\n        viz_type: 'table',\n        x_axis: 'axis',\n      },\n      () => [{}],\n    );\n    expect(spyNormalizeTimeColumn).toBeCalled();\n    spyNormalizeTimeColumn.mockRestore();\n  });","file":"query/buildQueryContext.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"shouldn't call normalizeTimeColumn if GENERIC_CHART_AXES is disabled","suites":["buildQueryContext"],"updatePoint":{"line":148,"column":74},"line":148,"code":"  it(\"shouldn't call normalizeTimeColumn if GENERIC_CHART_AXES is disabled\", () => {\n    Object.defineProperty(getXAxisModule, 'hasGenericChartAxes', {\n      value: false,\n    });\n    const spyNormalizeTimeColumn = jest.spyOn(\n      queryModule,\n      'normalizeTimeColumn',\n    );\n\n    buildQueryContext(\n      {\n        datasource: '5__table',\n        viz_type: 'table',\n      },\n      () => [{}],\n    );\n    expect(spyNormalizeTimeColumn).not.toBeCalled();\n    spyNormalizeTimeColumn.mockRestore();\n  });","file":"query/buildQueryContext.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should build granularity for sqlalchemy datasources","suites":["buildQueryObject"],"updatePoint":{"line":33,"column":57},"line":33,"code":"  it('should build granularity for sqlalchemy datasources', () => {\n    query = buildQueryObject({\n      datasource: '5__table',\n      granularity_sqla: 'ds',\n      viz_type: 'table',\n    });\n    expect(query.granularity).toEqual('ds');\n  });","file":"query/buildQueryObject.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should build metrics based on default queryFields","suites":["buildQueryObject"],"updatePoint":{"line":42,"column":55},"line":42,"code":"  it('should build metrics based on default queryFields', () => {\n    query = buildQueryObject({\n      datasource: '5__table',\n      granularity_sqla: 'ds',\n      viz_type: 'table',\n      metric: 'sum__num',\n      secondary_metric: 'avg__num',\n    });\n    expect(query.metrics).toEqual(['sum__num', 'avg__num']);\n  });","file":"query/buildQueryObject.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should merge original and append filters","suites":["buildQueryObject"],"updatePoint":{"line":53,"column":46},"line":53,"code":"  it('should merge original and append filters', () => {\n    query = buildQueryObject({\n      datasource: '5__table',\n      granularity_sqla: 'ds',\n      viz_type: 'table',\n      extra_filters: [{ col: 'abc', op: '==', val: 'qwerty' }],\n      adhoc_filters: [\n        {\n          expressionType: 'SIMPLE',\n          clause: 'WHERE',\n          subject: 'foo',\n          operator: '!=',\n          comparator: 'bar',\n        },\n      ],\n      where: 'a = b',\n      extra_form_data: {\n        adhoc_filters: [\n          {\n            expressionType: 'SQL',\n            clause: 'WHERE',\n            sqlExpression: '(1 = 1)',\n          },\n        ],\n      },\n    });\n    expect(query.filters).toEqual([\n      { col: 'abc', op: '==', val: 'qwerty' },\n      { col: 'foo', op: '!=', val: 'bar' },\n    ]);\n    expect(query.extras?.where).toEqual('(a = b) AND ((1 = 1))');\n  });","file":"query/buildQueryObject.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should group custom metric control","suites":["buildQueryObject"],"updatePoint":{"line":86,"column":40},"line":86,"code":"  it('should group custom metric control', () => {\n    query = buildQueryObject(\n      {\n        datasource: '5__table',\n        granularity_sqla: 'ds',\n        viz_type: 'table',\n        my_custom_metric_control: 'sum__num',\n      },\n      { my_custom_metric_control: 'metrics' },\n    );\n    expect(query.metrics).toEqual(['sum__num']);\n  });","file":"query/buildQueryObject.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should group custom metric control with predefined metrics","suites":["buildQueryObject"],"updatePoint":{"line":99,"column":64},"line":99,"code":"  it('should group custom metric control with predefined metrics', () => {\n    query = buildQueryObject(\n      {\n        datasource: '5__table',\n        granularity_sqla: 'ds',\n        viz_type: 'table',\n        metrics: ['sum__num'],\n        my_custom_metric_control: 'avg__num',\n      },\n      { my_custom_metric_control: 'metrics' },\n    );\n    expect(query.metrics).toEqual(['sum__num', 'avg__num']);\n  });","file":"query/buildQueryObject.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should build series_limit from legacy control","suites":["buildQueryObject"],"updatePoint":{"line":113,"column":51},"line":113,"code":"  it('should build series_limit from legacy control', () => {\n    const series_limit = 2;\n    query = buildQueryObject({\n      datasource: '5__table',\n      granularity_sqla: 'ds',\n      viz_type: 'table',\n      limit: series_limit,\n    });\n    expect(query.series_limit).toEqual(series_limit);\n  });","file":"query/buildQueryObject.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should build series_limit","suites":["buildQueryObject"],"updatePoint":{"line":124,"column":31},"line":124,"code":"  it('should build series_limit', () => {\n    const series_limit = 2;\n    query = buildQueryObject({\n      datasource: '5__table',\n      granularity_sqla: 'ds',\n      viz_type: 'table',\n      series_limit,\n    });\n    expect(query.series_limit).toEqual(series_limit);\n  });","file":"query/buildQueryObject.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should build order_desc","suites":["buildQueryObject"],"updatePoint":{"line":135,"column":29},"line":135,"code":"  it('should build order_desc', () => {\n    const orderDesc = false;\n    query = buildQueryObject({\n      datasource: '5__table',\n      granularity_sqla: 'ds',\n      viz_type: 'table',\n      order_desc: orderDesc,\n    });\n    expect(query.order_desc).toEqual(orderDesc);\n  });","file":"query/buildQueryObject.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should build series_limit_metric from legacy control","suites":["buildQueryObject"],"updatePoint":{"line":146,"column":58},"line":146,"code":"  it('should build series_limit_metric from legacy control', () => {\n    const metric = 'country';\n    query = buildQueryObject({\n      datasource: '5__table',\n      granularity_sqla: 'ds',\n      viz_type: 'table',\n      timeseries_limit_metric: metric,\n    });\n    expect(query.series_limit_metric).toEqual(metric);\n  });","file":"query/buildQueryObject.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should build series_limit_metric","suites":["buildQueryObject"],"updatePoint":{"line":157,"column":38},"line":157,"code":"  it('should build series_limit_metric', () => {\n    const metric = 'country';\n    query = buildQueryObject({\n      datasource: '5__table',\n      granularity_sqla: 'ds',\n      viz_type: 'pivot_table_v2',\n      series_limit_metric: metric,\n    });\n    expect(query.series_limit_metric).toEqual(metric);\n  });","file":"query/buildQueryObject.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should build series_limit_metric as undefined when empty array","suites":["buildQueryObject"],"updatePoint":{"line":168,"column":68},"line":168,"code":"  it('should build series_limit_metric as undefined when empty array', () => {\n    const metric: any = [];\n    query = buildQueryObject({\n      datasource: '5__table',\n      granularity_sqla: 'ds',\n      viz_type: 'pivot_table_v2',\n      series_limit_metric: metric,\n    });\n    expect(query.series_limit_metric).toEqual(undefined);\n  });","file":"query/buildQueryObject.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should handle null and non-numeric row_limit and row_offset","suites":["buildQueryObject"],"updatePoint":{"line":179,"column":65},"line":179,"code":"  it('should handle null and non-numeric row_limit and row_offset', () => {\n    const baseQuery = {\n      datasource: '5__table',\n      granularity_sqla: 'ds',\n      viz_type: 'table',\n      row_limit: null,\n    };\n\n    // undefined\n    query = buildQueryObject({ ...baseQuery });\n    expect(query.row_limit).toBeUndefined();\n    expect(query.row_offset).toBeUndefined();\n\n    // null value\n    query = buildQueryObject({\n      ...baseQuery,\n      row_limit: null,\n      row_offset: null,\n    });\n    expect(query.row_limit).toBeUndefined();\n    expect(query.row_offset).toBeUndefined();\n\n    query = buildQueryObject({ ...baseQuery, row_limit: 1000, row_offset: 50 });\n    expect(query.row_limit).toStrictEqual(1000);\n    expect(query.row_offset).toStrictEqual(50);\n\n    // valid string\n    query = buildQueryObject({\n      ...baseQuery,\n      row_limit: '200',\n      row_offset: '100',\n    });\n    expect(query.row_limit).toStrictEqual(200);\n    expect(query.row_offset).toStrictEqual(100);\n\n    // invalid string\n    query = buildQueryObject({\n      ...baseQuery,\n      row_limit: 'two hundred',\n      row_offset: 'twenty',\n    });\n    expect(query.row_limit).toBeUndefined();\n    expect(query.row_offset).toBeUndefined();\n  });","file":"query/buildQueryObject.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should populate annotation_layers","suites":["buildQueryObject"],"updatePoint":{"line":224,"column":39},"line":224,"code":"  it('should populate annotation_layers', () => {\n    const annotationLayers: AnnotationLayer[] = [\n      {\n        annotationType: AnnotationType.Formula,\n        color: '#ff7f44',\n        name: 'My Formula',\n        opacity: AnnotationOpacity.Low,\n        show: true,\n        showLabel: false,\n        style: AnnotationStyle.Solid,\n        value: '10*sin(x)',\n        width: 1,\n      },\n      {\n        annotationType: AnnotationType.Interval,\n        color: null,\n        show: false,\n        showLabel: false,\n        name: 'My Interval',\n        sourceType: AnnotationSourceType.Native,\n        style: AnnotationStyle.Dashed,\n        value: 1,\n        width: 100,\n      },\n      {\n        annotationType: AnnotationType.Event,\n        color: null,\n        descriptionColumns: [],\n        name: 'My Interval',\n        overrides: {\n          granularity: null,\n          time_grain_sqla: null,\n          time_range: null,\n        },\n        sourceType: AnnotationSourceType.Table,\n        show: false,\n        showLabel: false,\n        timeColumn: 'ds',\n        style: AnnotationStyle.Dashed,\n        value: 1,\n        width: 100,\n      },\n    ];\n    query = buildQueryObject({\n      datasource: '5__table',\n      granularity_sqla: 'ds',\n      viz_type: 'table',\n      annotation_layers: annotationLayers,\n    });\n    expect(query.annotation_layers).toEqual(annotationLayers);\n  });","file":"query/buildQueryObject.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should populate url_params","suites":["buildQueryObject"],"updatePoint":{"line":276,"column":32},"line":276,"code":"  it('should populate url_params', () => {\n    expect(\n      buildQueryObject({\n        datasource: '5__table',\n        granularity_sqla: 'ds',\n        viz_type: 'table',\n        url_params: { abc: '123' },\n      }).url_params,\n    ).toEqual({ abc: '123' });\n    expect(\n      buildQueryObject({\n        datasource: '5__table',\n        granularity_sqla: 'ds',\n        viz_type: 'table',\n        // @ts-expect-error\n        url_params: null,\n      }).url_params,\n    ).toBeUndefined();\n  });","file":"query/buildQueryObject.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should populate granularity","suites":["buildQueryObject"],"updatePoint":{"line":296,"column":33},"line":296,"code":"  it('should populate granularity', () => {\n    const granularity = 'ds';\n    query = buildQueryObject({\n      datasource: '5__table',\n      granularity,\n      viz_type: 'table',\n    });\n    expect(query.granularity).toEqual(granularity);\n  });","file":"query/buildQueryObject.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should populate granularity from legacy field","suites":["buildQueryObject"],"updatePoint":{"line":306,"column":51},"line":306,"code":"  it('should populate granularity from legacy field', () => {\n    const granularity = 'ds';\n    query = buildQueryObject({\n      datasource: '5__table',\n      granularity_sqla: granularity,\n      viz_type: 'table',\n    });\n    expect(query.granularity).toEqual(granularity);\n  });","file":"query/buildQueryObject.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should populate custom_params","suites":["buildQueryObject"],"updatePoint":{"line":316,"column":35},"line":316,"code":"  it('should populate custom_params', () => {\n    const customParams: JsonObject = {\n      customObject: { id: 137, name: 'C-137' },\n    };\n    query = buildQueryObject({\n      datasource: '5__table',\n      granularity_sqla: 'ds',\n      viz_type: 'table',\n      custom_params: customParams,\n    });\n    expect(query.custom_params).toEqual(customParams);\n  });","file":"query/buildQueryObject.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should handle unary filter","suites":["convertFilter"],"updatePoint":{"line":22,"column":32},"line":22,"code":"  it('should handle unary filter', () => {\n    expect(\n      convertFilter({\n        expressionType: 'SIMPLE',\n        clause: 'WHERE',\n        subject: 'topping',\n        operator: 'IS NOT NULL',\n      }),\n    ).toEqual({\n      col: 'topping',\n      op: 'IS NOT NULL',\n    });\n  });","file":"query/convertFilter.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should convert binary filter","suites":["convertFilter"],"updatePoint":{"line":36,"column":34},"line":36,"code":"  it('should convert binary filter', () => {\n    expect(\n      convertFilter({\n        expressionType: 'SIMPLE',\n        clause: 'WHERE',\n        subject: 'topping',\n        operator: '==',\n        comparator: 'grass jelly',\n      }),\n    ).toEqual({\n      col: 'topping',\n      op: '==',\n      val: 'grass jelly',\n    });\n  });","file":"query/convertFilter.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should convert set filter","suites":["convertFilter"],"updatePoint":{"line":52,"column":31},"line":52,"code":"  it('should convert set filter', () => {\n    expect(\n      convertFilter({\n        expressionType: 'SIMPLE',\n        clause: 'WHERE',\n        subject: 'toppings',\n        operator: 'IN',\n        comparator: ['boba', 'grass jelly'],\n      }),\n    ).toEqual({\n      col: 'toppings',\n      op: 'IN',\n      val: ['boba', 'grass jelly'],\n    });\n  });","file":"query/convertFilter.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should handle table data sources","suites":["DatasourceKey"],"updatePoint":{"line":22,"column":38},"line":22,"code":"  it('should handle table data sources', () => {\n    const datasourceKey = new DatasourceKey('5__table');\n    expect(datasourceKey.toString()).toBe('5__table');\n    expect(datasourceKey.toObject()).toEqual({ id: 5, type: 'table' });\n  });","file":"query/DatasourceKey.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should handle query data sources","suites":["DatasourceKey"],"updatePoint":{"line":28,"column":38},"line":28,"code":"  it('should handle query data sources', () => {\n    const datasourceKey = new DatasourceKey('5__query');\n    expect(datasourceKey.toString()).toBe('5__query');\n    expect(datasourceKey.toObject()).toEqual({ id: 5, type: 'query' });\n  });","file":"query/DatasourceKey.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should populate time range endpoints and override formData with double underscored date options","suites":["extractExtras"],"updatePoint":{"line":30,"column":101},"line":30,"code":"  it('should populate time range endpoints and override formData with double underscored date options', () => {\n    expect(\n      extractExtras({\n        ...baseQueryFormData,\n        extra_filters: [\n          {\n            col: '__time_col',\n            op: '==',\n            val: 'ds2',\n          },\n          {\n            col: '__time_grain',\n            op: '==',\n            val: 'PT5M',\n          },\n          {\n            col: '__time_range',\n            op: '==',\n            val: '2009-07-17T00:00:00 : 2020-07-17T00:00:00',\n          },\n        ],\n      }),\n    ).toEqual({\n      applied_time_extras: {\n        __time_col: 'ds2',\n        __time_grain: 'PT5M',\n        __time_range: '2009-07-17T00:00:00 : 2020-07-17T00:00:00',\n      },\n      extras: {\n        time_grain_sqla: 'PT5M',\n      },\n      filters: [],\n      granularity: 'ds2',\n      time_range: '2009-07-17T00:00:00 : 2020-07-17T00:00:00',\n    });\n  });","file":"query/extractExtras.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should create regular filters from non-reserved columns","suites":["extractExtras"],"updatePoint":{"line":67,"column":61},"line":67,"code":"  it('should create regular filters from non-reserved columns', () => {\n    expect(\n      extractExtras({\n        ...baseQueryFormData,\n        extra_filters: [\n          {\n            col: 'gender',\n            op: '==',\n            val: 'girl',\n          },\n          {\n            col: 'name',\n            op: 'IN',\n            val: ['Eve', 'Evelyn'],\n          },\n        ],\n      }),\n    ).toEqual({\n      applied_time_extras: {},\n      extras: {\n        time_grain_sqla: 'PT1M',\n      },\n      filters: [\n        {\n          col: 'gender',\n          op: '==',\n          val: 'girl',\n        },\n        {\n          col: 'name',\n          op: 'IN',\n          val: ['Eve', 'Evelyn'],\n        },\n      ],\n      granularity: 'ds',\n    });\n  });","file":"query/extractExtras.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should create regular filters from reserved and non-reserved columns","suites":["extractExtras"],"updatePoint":{"line":105,"column":74},"line":105,"code":"  it('should create regular filters from reserved and non-reserved columns', () => {\n    expect(\n      extractExtras({\n        ...baseQueryFormData,\n        extra_filters: [\n          {\n            col: 'gender',\n            op: '==',\n            val: 'girl',\n          },\n          {\n            col: '__time_col',\n            op: '==',\n            val: 'ds2',\n          },\n          {\n            col: '__time_grain',\n            op: '==',\n            val: 'PT5M',\n          },\n          {\n            col: '__time_range',\n            op: '==',\n            val: '2009-07-17T00:00:00 : 2020-07-17T00:00:00',\n          },\n        ],\n      }),\n    ).toEqual({\n      applied_time_extras: {\n        __time_col: 'ds2',\n        __time_grain: 'PT5M',\n        __time_range: '2009-07-17T00:00:00 : 2020-07-17T00:00:00',\n      },\n      extras: {\n        time_grain_sqla: 'PT5M',\n      },\n      filters: [\n        {\n          col: 'gender',\n          op: '==',\n          val: 'girl',\n        },\n      ],\n      granularity: 'ds2',\n      time_range: '2009-07-17T00:00:00 : 2020-07-17T00:00:00',\n    });\n  });","file":"query/extractExtras.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should return default object","suites":["extractQueryFields"],"updatePoint":{"line":26,"column":34},"line":26,"code":"  it('should return default object', () => {\n    expect(extractQueryFields({})).toEqual({\n      columns: [],\n      metrics: [],\n      orderby: undefined,\n    });\n  });","file":"query/extractQueryFields.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should group single value to arrays","suites":["extractQueryFields"],"updatePoint":{"line":34,"column":41},"line":34,"code":"  it('should group single value to arrays', () => {\n    expect(\n      extractQueryFields({\n        metric: 'my_metric',\n        columns: 'abc',\n        orderby: '[\"ccc\",true]',\n      }),\n    ).toEqual({\n      metrics: ['my_metric'],\n      columns: ['abc'],\n      orderby: [['ccc', true]],\n    });\n  });","file":"query/extractQueryFields.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should combine field aliases","suites":["extractQueryFields"],"updatePoint":{"line":48,"column":34},"line":48,"code":"  it('should combine field aliases', () => {\n    expect(\n      extractQueryFields(\n        {\n          metric: 'metric_1',\n          metric_2: 'metric_2',\n          my_custom_metric: 'my_custom_metric',\n        },\n        { my_custom_metric: 'metrics' },\n      ).metrics,\n    ).toEqual(['metric_1', 'metric_2', 'my_custom_metric']);\n  });","file":"query/extractQueryFields.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should extract columns","suites":["extractQueryFields"],"updatePoint":{"line":61,"column":28},"line":61,"code":"  it('should extract columns', () => {\n    expect(extractQueryFields({ columns: 'col_1' })).toEqual({\n      columns: ['col_1'],\n      metrics: [],\n      orderby: undefined,\n    });\n  });","file":"query/extractQueryFields.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should extract groupby as columns and set empty metrics","suites":["extractQueryFields"],"updatePoint":{"line":69,"column":61},"line":69,"code":"  it('should extract groupby as columns and set empty metrics', () => {\n    expect(extractQueryFields({ groupby: 'col_1' })).toEqual({\n      columns: ['col_1'],\n      metrics: [],\n      orderby: undefined,\n    });\n  });","file":"query/extractQueryFields.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should remove duplicate metrics","suites":["extractQueryFields"],"updatePoint":{"line":77,"column":37},"line":77,"code":"  it('should remove duplicate metrics', () => {\n    expect(\n      extractQueryFields({\n        metrics: ['col_1', { ...NUM_METRIC }, { ...NUM_METRIC }],\n      }),\n    ).toEqual({\n      columns: [],\n      metrics: ['col_1', NUM_METRIC],\n      orderby: undefined,\n    });\n  });","file":"query/extractQueryFields.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should extract custom columns fields","suites":["extractQueryFields"],"updatePoint":{"line":89,"column":42},"line":89,"code":"  it('should extract custom columns fields', () => {\n    expect(\n      extractQueryFields(\n        { series: 'col_1', metric: 'metric_1' },\n        { series: 'groupby' },\n      ),\n    ).toEqual({\n      columns: ['col_1'],\n      metrics: ['metric_1'],\n      orderby: undefined,\n    });\n  });","file":"query/extractQueryFields.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should merge custom groupby into columns","suites":["extractQueryFields"],"updatePoint":{"line":102,"column":46},"line":102,"code":"  it('should merge custom groupby into columns', () => {\n    expect(\n      extractQueryFields(\n        { groupby: 'col_1', series: 'col_2', metric: 'metric_1' },\n        { series: 'groupby' },\n      ),\n    ).toEqual({\n      columns: ['col_1', 'col_2'],\n      metrics: ['metric_1'],\n      orderby: undefined,\n    });\n  });","file":"query/extractQueryFields.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should include time","suites":["extractQueryFields"],"updatePoint":{"line":115,"column":25},"line":115,"code":"  it('should include time', () => {\n    expect(\n      extractQueryFields({ groupby: 'col_1', include_time: true }).columns,\n    ).toEqual([DTTM_ALIAS, 'col_1']);\n    expect(\n      extractQueryFields({\n        groupby: ['col_1', DTTM_ALIAS, ''],\n        include_time: true,\n      }).columns,\n    ).toEqual(['col_1', DTTM_ALIAS]);\n  });","file":"query/extractQueryFields.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should ignore null values","suites":["extractQueryFields"],"updatePoint":{"line":127,"column":31},"line":127,"code":"  it('should ignore null values', () => {\n    expect(\n      extractQueryFields({ series: ['a'], columns: null }).columns,\n    ).toEqual(['a']);\n  });","file":"query/extractQueryFields.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should ignore groupby and metrics when in raw QueryMode","suites":["extractQueryFields"],"updatePoint":{"line":133,"column":61},"line":133,"code":"  it('should ignore groupby and metrics when in raw QueryMode', () => {\n    expect(\n      extractQueryFields({\n        columns: ['a'],\n        groupby: ['b'],\n        metric: ['m'],\n        query_mode: QueryMode.raw,\n      }),\n    ).toEqual({\n      columns: ['a'],\n      metrics: undefined,\n      orderby: undefined,\n    });\n  });","file":"query/extractQueryFields.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should ignore columns when in aggregate QueryMode","suites":["extractQueryFields"],"updatePoint":{"line":148,"column":55},"line":148,"code":"  it('should ignore columns when in aggregate QueryMode', () => {\n    expect(\n      extractQueryFields({\n        columns: ['a'],\n        groupby: [],\n        metric: ['m'],\n        query_mode: QueryMode.aggregate,\n      }),\n    ).toEqual({\n      metrics: ['m'],\n      columns: [],\n      orderby: undefined,\n    });\n    expect(\n      extractQueryFields({\n        columns: ['a'],\n        groupby: ['b'],\n        metric: ['m'],\n        query_mode: QueryMode.aggregate,\n      }),\n    ).toEqual({\n      metrics: ['m'],\n      columns: ['b'],\n      orderby: undefined,\n    });\n  });","file":"query/extractQueryFields.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should parse orderby if needed","suites":["extractQueryFields"],"updatePoint":{"line":175,"column":36},"line":175,"code":"  it('should parse orderby if needed', () => {\n    expect(\n      extractQueryFields({\n        columns: ['a'],\n        order_by_cols: ['[\"foo\",false]', '[\"bar\",true]'],\n        orderby: [['abc', true]],\n      }),\n    ).toEqual({\n      columns: ['a'],\n      metrics: [],\n      orderby: [\n        ['foo', false],\n        ['bar', true],\n        ['abc', true],\n      ],\n    });\n  });","file":"query/extractQueryFields.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should throw error if parse orderby failed","suites":["extractQueryFields"],"updatePoint":{"line":193,"column":48},"line":193,"code":"  it('should throw error if parse orderby failed', () => {\n    expect(() => {\n      extractQueryFields({\n        orderby: ['ccc'],\n      });\n    }).toThrow('invalid orderby');\n  });","file":"query/extractQueryFields.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should extract regular from form data","suites":["extractTimegrain"],"updatePoint":{"line":26,"column":43},"line":26,"code":"  it('should extract regular from form data', () => {\n    expect(\n      extractTimegrain({\n        ...baseFormData,\n        time_grain_sqla: 'P1D',\n      }),\n    ).toEqual('P1D');\n  });","file":"query/extractTimegrain.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should extract filter box time grain from form data","suites":["extractTimegrain"],"updatePoint":{"line":35,"column":57},"line":35,"code":"  it('should extract filter box time grain from form data', () => {\n    expect(\n      extractTimegrain({\n        ...baseFormData,\n        time_grain_sqla: 'P1D',\n        extra_filters: [\n          {\n            col: '__time_grain',\n            op: '==',\n            val: 'P1M',\n          },\n        ],\n      }),\n    ).toEqual('P1M');\n  });","file":"query/extractTimegrain.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should extract native filter time grain from form data","suites":["extractTimegrain"],"updatePoint":{"line":51,"column":60},"line":51,"code":"  it('should extract native filter time grain from form data', () => {\n    expect(\n      extractTimegrain({\n        ...baseFormData,\n        time_grain_sqla: 'P1D',\n        extra_form_data: {\n          time_grain_sqla: 'P1W',\n        },\n      }),\n    ).toEqual('P1W');\n  });","file":"query/extractTimegrain.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should give priority to native filters","suites":["extractTimegrain"],"updatePoint":{"line":63,"column":44},"line":63,"code":"  it('should give priority to native filters', () => {\n    expect(\n      extractTimegrain({\n        ...baseFormData,\n        time_grain_sqla: 'P1D',\n        extra_filters: [\n          {\n            col: '__time_grain',\n            op: '==',\n            val: 'P1M',\n          },\n        ],\n        extra_form_data: {\n          time_grain_sqla: 'P1W',\n        },\n      }),\n    ).toEqual('P1W');\n  });","file":"query/extractTimegrain.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"returns undefined if timegrain not defined","suites":["extractTimegrain"],"updatePoint":{"line":82,"column":48},"line":82,"code":"  it('returns undefined if timegrain not defined', () => {\n    expect(extractTimegrain({ ...baseFormData })).toEqual(undefined);\n  });","file":"query/extractTimegrain.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"isXAxisSet","suites":[],"updatePoint":{"line":21,"column":16},"line":21,"code":"test('isXAxisSet', () => {\n  expect(isXAxisSet({ datasource: '123', viz_type: 'table' })).not.toBeTruthy();\n  expect(\n    isXAxisSet({ datasource: '123', viz_type: 'table', x_axis: 'axis' }),\n  ).toBeTruthy();\n});","file":"query/getAxis.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should handle physical column","suites":["getColumnLabel"],"updatePoint":{"line":22,"column":35},"line":22,"code":"  it('should handle physical column', () => {\n    expect(getColumnLabel('gender')).toEqual('gender');\n  });","file":"query/getColumnLabel.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should handle adhoc columns with label","suites":["getColumnLabel"],"updatePoint":{"line":26,"column":44},"line":26,"code":"  it('should handle adhoc columns with label', () => {\n    expect(\n      getColumnLabel({\n        sqlExpression: \"case when 1 then 'a' else 'b' end\",\n        label: 'my col',\n        expressionType: 'SQL',\n      }),\n    ).toEqual('my col');\n  });","file":"query/getColumnLabel.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should handle adhoc columns without label","suites":["getColumnLabel"],"updatePoint":{"line":36,"column":47},"line":36,"code":"  it('should handle adhoc columns without label', () => {\n    expect(\n      getColumnLabel({\n        sqlExpression: \"case when 1 then 'a' else 'b' end\",\n        expressionType: 'SQL',\n      }),\n    ).toEqual(\"case when 1 then 'a' else 'b' end\");\n  });","file":"query/getColumnLabel.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should handle predefined metric name","suites":["getMetricLabel"],"updatePoint":{"line":22,"column":42},"line":22,"code":"  it('should handle predefined metric name', () => {\n    expect(getMetricLabel('sum__num')).toEqual('sum__num');\n  });","file":"query/getMetricLabel.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should handle simple adhoc metrics","suites":["getMetricLabel"],"updatePoint":{"line":26,"column":40},"line":26,"code":"  it('should handle simple adhoc metrics', () => {\n    expect(\n      getMetricLabel({\n        expressionType: 'SIMPLE',\n        aggregate: 'AVG',\n        column: {\n          id: 5,\n          type: 'BIGINT',\n          columnName: 'sum_girls',\n        },\n      }),\n    ).toEqual('AVG(sum_girls)');\n  });","file":"query/getMetricLabel.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should handle column_name in alternative field","suites":["getMetricLabel"],"updatePoint":{"line":40,"column":52},"line":40,"code":"  it('should handle column_name in alternative field', () => {\n    expect(\n      getMetricLabel({\n        expressionType: 'SIMPLE',\n        aggregate: 'AVG',\n        column: {\n          id: 5,\n          type: 'BIGINT',\n          column_name: 'sum_girls',\n        },\n      }),\n    ).toEqual('AVG(sum_girls)');\n  });","file":"query/getMetricLabel.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should handle SQL adhoc metrics","suites":["getMetricLabel"],"updatePoint":{"line":54,"column":37},"line":54,"code":"  it('should handle SQL adhoc metrics', () => {\n    expect(\n      getMetricLabel({\n        expressionType: 'SQL',\n        sqlExpression: 'COUNT(sum_girls)',\n      }),\n    ).toEqual('COUNT(sum_girls)');\n  });","file":"query/getMetricLabel.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should handle adhoc metrics with custom labels","suites":["getMetricLabel"],"updatePoint":{"line":63,"column":52},"line":63,"code":"  it('should handle adhoc metrics with custom labels', () => {\n    expect(\n      getMetricLabel({\n        expressionType: 'SQL',\n        label: 'foo',\n        sqlExpression: 'COUNT(sum_girls)',\n      }),\n    ).toEqual('foo');\n  });","file":"query/getMetricLabel.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should not change original queryObject when orderby populated","suites":["normalizeOrderBy"],"updatePoint":{"line":22,"column":67},"line":22,"code":"  it('should not change original queryObject when orderby populated', () => {\n    const query: QueryObject = {\n      datasource: '5__table',\n      viz_type: 'table',\n      time_range: '1 year ago : 2013',\n      orderby: [['count(*)', true]],\n    };\n    expect(normalizeOrderBy(query)).toEqual(query);\n  });","file":"query/normalizeOrderBy.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"has series_limit_metric in queryObject","suites":["normalizeOrderBy"],"updatePoint":{"line":32,"column":44},"line":32,"code":"  it('has series_limit_metric in queryObject', () => {\n    const query: QueryObject = {\n      datasource: '5__table',\n      viz_type: 'table',\n      time_range: '1 year ago : 2013',\n      metrics: ['count(*)'],\n      series_limit_metric: {\n        expressionType: 'SIMPLE',\n        column: {\n          id: 1,\n          column_name: 'sales',\n        },\n        aggregate: 'SUM',\n      },\n      order_desc: true,\n    };\n    const expectedQueryObject = normalizeOrderBy(query);\n    expect(expectedQueryObject).not.toHaveProperty('series_limit_metric');\n    expect(expectedQueryObject).not.toHaveProperty('order_desc');\n    expect(expectedQueryObject).toEqual({\n      datasource: '5__table',\n      viz_type: 'table',\n      time_range: '1 year ago : 2013',\n      metrics: ['count(*)'],\n      orderby: [\n        [\n          {\n            expressionType: 'SIMPLE',\n            column: {\n              id: 1,\n              column_name: 'sales',\n            },\n            aggregate: 'SUM',\n          },\n          false,\n        ],\n      ],\n    });\n  });","file":"query/normalizeOrderBy.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should transform legacy_order_by in queryObject","suites":["normalizeOrderBy"],"updatePoint":{"line":72,"column":53},"line":72,"code":"  it('should transform legacy_order_by in queryObject', () => {\n    const query: QueryObject = {\n      datasource: '5__table',\n      viz_type: 'table',\n      time_range: '1 year ago : 2013',\n      metrics: ['count(*)'],\n      legacy_order_by: {\n        expressionType: 'SIMPLE',\n        column: {\n          id: 1,\n          column_name: 'sales',\n        },\n        aggregate: 'SUM',\n      },\n      order_desc: true,\n    };\n    const expectedQueryObject = normalizeOrderBy(query);\n    expect(expectedQueryObject).not.toHaveProperty('legacy_order_by');\n    expect(expectedQueryObject).not.toHaveProperty('order_desc');\n    expect(expectedQueryObject).toEqual({\n      datasource: '5__table',\n      viz_type: 'table',\n      time_range: '1 year ago : 2013',\n      metrics: ['count(*)'],\n      orderby: [\n        [\n          {\n            expressionType: 'SIMPLE',\n            column: {\n              id: 1,\n              column_name: 'sales',\n            },\n            aggregate: 'SUM',\n          },\n          false,\n        ],\n      ],\n    });\n  });","file":"query/normalizeOrderBy.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"has metrics in queryObject","suites":["normalizeOrderBy"],"updatePoint":{"line":112,"column":32},"line":112,"code":"  it('has metrics in queryObject', () => {\n    const query: QueryObject = {\n      datasource: '5__table',\n      viz_type: 'table',\n      time_range: '1 year ago : 2013',\n      metrics: ['count(*)'],\n      order_desc: true,\n    };\n    const expectedQueryObject = normalizeOrderBy(query);\n    expect(expectedQueryObject).not.toHaveProperty('series_limit_metric');\n    expect(expectedQueryObject).not.toHaveProperty('order_desc');\n    expect(expectedQueryObject).toEqual({\n      datasource: '5__table',\n      viz_type: 'table',\n      time_range: '1 year ago : 2013',\n      metrics: ['count(*)'],\n      orderby: [['count(*)', false]],\n    });\n  });","file":"query/normalizeOrderBy.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should not change","suites":["normalizeOrderBy"],"updatePoint":{"line":132,"column":23},"line":132,"code":"  it('should not change', () => {\n    const query: QueryObject = {\n      datasource: '5__table',\n      viz_type: 'table',\n      time_range: '1 year ago : 2013',\n    };\n    expect(normalizeOrderBy(query)).toEqual(query);\n  });","file":"query/normalizeOrderBy.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"remove empty orderby","suites":["normalizeOrderBy"],"updatePoint":{"line":141,"column":26},"line":141,"code":"  it('remove empty orderby', () => {\n    const query: QueryObject = {\n      datasource: '5__table',\n      viz_type: 'table',\n      time_range: '1 year ago : 2013',\n      orderby: [],\n    };\n    expect(normalizeOrderBy(query)).not.toHaveProperty('orderby');\n  });","file":"query/normalizeOrderBy.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"remove orderby with an empty array","suites":["normalizeOrderBy"],"updatePoint":{"line":151,"column":40},"line":151,"code":"  it('remove orderby with an empty array', () => {\n    const query: QueryObject = {\n      datasource: '5__table',\n      viz_type: 'table',\n      time_range: '1 year ago : 2013',\n      orderby: [[]],\n    };\n    expect(normalizeOrderBy(query)).not.toHaveProperty('orderby');\n  });","file":"query/normalizeOrderBy.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"remove orderby with an empty metric","suites":["normalizeOrderBy"],"updatePoint":{"line":161,"column":41},"line":161,"code":"  it('remove orderby with an empty metric', () => {\n    const query: QueryObject = {\n      datasource: '5__table',\n      viz_type: 'table',\n      time_range: '1 year ago : 2013',\n      orderby: [['', true]],\n    };\n    expect(normalizeOrderBy(query)).not.toHaveProperty('orderby');\n  });","file":"query/normalizeOrderBy.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"remove orderby with an empty adhoc metric","suites":["normalizeOrderBy"],"updatePoint":{"line":171,"column":47},"line":171,"code":"  it('remove orderby with an empty adhoc metric', () => {\n    const query: QueryObject = {\n      datasource: '5__table',\n      viz_type: 'table',\n      time_range: '1 year ago : 2013',\n      orderby: [[{}, true]],\n    };\n    expect(normalizeOrderBy(query)).not.toHaveProperty('orderby');\n  });","file":"query/normalizeOrderBy.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"remove orderby with an non-boolean type","suites":["normalizeOrderBy"],"updatePoint":{"line":181,"column":45},"line":181,"code":"  it('remove orderby with an non-boolean type', () => {\n    const query: QueryObject = {\n      datasource: '5__table',\n      viz_type: 'table',\n      time_range: '1 year ago : 2013',\n      // @ts-ignore\n      orderby: [['count(*)', 'true']],\n    };\n    expect(normalizeOrderBy(query)).not.toHaveProperty('orderby');\n  });","file":"query/normalizeOrderBy.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should return original QueryObject if disabled GENERIC_CHART_AXES","suites":["GENERIC_CHART_AXES is disabled"],"updatePoint":{"line":41,"column":71},"line":41,"code":"  it('should return original QueryObject if disabled GENERIC_CHART_AXES', () => {\n    const formData: SqlaFormData = {\n      datasource: '5__table',\n      viz_type: 'table',\n      granularity: 'time_column',\n      time_grain_sqla: 'P1Y',\n      time_range: '1 year ago : 2013',\n      columns: ['col1'],\n      metrics: ['count(*)'],\n    };\n    const query: QueryObject = {\n      datasource: '5__table',\n      viz_type: 'table',\n      granularity: 'time_column',\n      extras: {\n        time_grain_sqla: 'P1Y',\n      },\n      time_range: '1 year ago : 2013',\n      orderby: [['count(*)', true]],\n      columns: ['col1'],\n      metrics: ['count(*)'],\n      is_timeseries: true,\n    };\n    expect(normalizeTimeColumn(formData, query)).toEqual(query);\n  });","file":"query/normalizeTimeColumn.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should return converted QueryObject even though disabled GENERIC_CHART_AXES (x_axis in formData)","suites":["GENERIC_CHART_AXES is disabled"],"updatePoint":{"line":67,"column":102},"line":67,"code":"  it('should return converted QueryObject even though disabled GENERIC_CHART_AXES (x_axis in formData)', () => {\n    const formData: SqlaFormData = {\n      datasource: '5__table',\n      viz_type: 'table',\n      granularity: 'time_column',\n      time_grain_sqla: 'P1Y',\n      time_range: '1 year ago : 2013',\n      columns: ['col1'],\n      metrics: ['count(*)'],\n      x_axis: 'time_column',\n    };\n    const query: QueryObject = {\n      datasource: '5__table',\n      viz_type: 'table',\n      granularity: 'time_column',\n      extras: {\n        time_grain_sqla: 'P1Y',\n      },\n      time_range: '1 year ago : 2013',\n      orderby: [['count(*)', true]],\n      columns: ['time_column', 'col1'],\n      metrics: ['count(*)'],\n      is_timeseries: true,\n    };\n    expect(normalizeTimeColumn(formData, query)).toEqual({\n      datasource: '5__table',\n      viz_type: 'table',\n      granularity: 'time_column',\n      extras: {},\n      time_range: '1 year ago : 2013',\n      orderby: [['count(*)', true]],\n      columns: [\n        {\n          timeGrain: 'P1Y',\n          columnType: 'BASE_AXIS',\n          sqlExpression: 'time_column',\n          label: 'time_column',\n          expressionType: 'SQL',\n        },\n        'col1',\n      ],\n      metrics: ['count(*)'],\n    });\n  });","file":"query/normalizeTimeColumn.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should return original QueryObject if x_axis is empty","suites":["GENERIC_CHART_AXES is enabled"],"updatePoint":{"line":129,"column":59},"line":129,"code":"  it('should return original QueryObject if x_axis is empty', () => {\n    const formData: SqlaFormData = {\n      datasource: '5__table',\n      viz_type: 'table',\n      granularity: 'time_column',\n      time_grain_sqla: 'P1Y',\n      time_range: '1 year ago : 2013',\n      columns: ['col1'],\n      metrics: ['count(*)'],\n    };\n    const query: QueryObject = {\n      datasource: '5__table',\n      viz_type: 'table',\n      granularity: 'time_column',\n      extras: {\n        time_grain_sqla: 'P1Y',\n      },\n      time_range: '1 year ago : 2013',\n      orderby: [['count(*)', true]],\n      columns: ['col1'],\n      metrics: ['count(*)'],\n      is_timeseries: true,\n    };\n    expect(normalizeTimeColumn(formData, query)).toEqual(query);\n  });","file":"query/normalizeTimeColumn.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should support different columns for x-axis and granularity","suites":["GENERIC_CHART_AXES is enabled"],"updatePoint":{"line":155,"column":65},"line":155,"code":"  it('should support different columns for x-axis and granularity', () => {\n    const formData: SqlaFormData = {\n      datasource: '5__table',\n      viz_type: 'table',\n      granularity: 'time_column',\n      time_grain_sqla: 'P1Y',\n      time_range: '1 year ago : 2013',\n      x_axis: 'time_column_in_x_axis',\n      columns: ['col1'],\n      metrics: ['count(*)'],\n    };\n    const query: QueryObject = {\n      datasource: '5__table',\n      viz_type: 'table',\n      granularity: 'time_column',\n      extras: {\n        time_grain_sqla: 'P1Y',\n        where: '',\n        having: '',\n      },\n      time_range: '1 year ago : 2013',\n      orderby: [['count(*)', true]],\n      columns: ['time_column_in_x_axis', 'col1'],\n      metrics: ['count(*)'],\n      is_timeseries: true,\n    };\n    expect(normalizeTimeColumn(formData, query)).toEqual({\n      datasource: '5__table',\n      viz_type: 'table',\n      granularity: 'time_column',\n      extras: { where: '', having: '' },\n      time_range: '1 year ago : 2013',\n      orderby: [['count(*)', true]],\n      columns: [\n        {\n          timeGrain: 'P1Y',\n          columnType: 'BASE_AXIS',\n          sqlExpression: 'time_column_in_x_axis',\n          label: 'time_column_in_x_axis',\n          expressionType: 'SQL',\n        },\n        'col1',\n      ],\n      metrics: ['count(*)'],\n    });\n  });","file":"query/normalizeTimeColumn.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should support custom SQL in x-axis","suites":["GENERIC_CHART_AXES is enabled"],"updatePoint":{"line":202,"column":41},"line":202,"code":"  it('should support custom SQL in x-axis', () => {\n    const formData: SqlaFormData = {\n      datasource: '5__table',\n      viz_type: 'table',\n      granularity: 'time_column',\n      time_grain_sqla: 'P1Y',\n      time_range: '1 year ago : 2013',\n      x_axis: {\n        expressionType: 'SQL',\n        label: 'Order Data + 1 year',\n        sqlExpression: '\"Order Date\" + interval \\'1 year\\'',\n      },\n      columns: ['col1'],\n      metrics: ['count(*)'],\n    };\n    const query: QueryObject = {\n      datasource: '5__table',\n      viz_type: 'table',\n      granularity: 'time_column',\n      extras: {\n        time_grain_sqla: 'P1Y',\n        where: '',\n        having: '',\n      },\n      time_range: '1 year ago : 2013',\n      orderby: [['count(*)', true]],\n      columns: [\n        {\n          expressionType: 'SQL',\n          label: 'Order Data + 1 year',\n          sqlExpression: '\"Order Date\" + interval \\'1 year\\'',\n        },\n        'col1',\n      ],\n      metrics: ['count(*)'],\n      is_timeseries: true,\n    };\n    expect(normalizeTimeColumn(formData, query)).toEqual({\n      datasource: '5__table',\n      viz_type: 'table',\n      granularity: 'time_column',\n      extras: { where: '', having: '' },\n      time_range: '1 year ago : 2013',\n      orderby: [['count(*)', true]],\n      columns: [\n        {\n          timeGrain: 'P1Y',\n          columnType: 'BASE_AXIS',\n          expressionType: 'SQL',\n          label: 'Order Data + 1 year',\n          sqlExpression: `\"Order Date\" + interval '1 year'`,\n        },\n        'col1',\n      ],\n      metrics: ['count(*)'],\n    });\n  });","file":"query/normalizeTimeColumn.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"fallback and invalid columns value","suites":["GENERIC_CHART_AXES is enabled"],"updatePoint":{"line":260,"column":40},"line":260,"code":"  it('fallback and invalid columns value', () => {\n    const formData: SqlaFormData = {\n      datasource: '5__table',\n      viz_type: 'table',\n      granularity: 'time_column',\n      time_grain_sqla: 'P1Y',\n      time_range: '1 year ago : 2013',\n      x_axis: {\n        expressionType: 'SQL',\n        label: 'Order Data + 1 year',\n        sqlExpression: '\"Order Date\" + interval \\'1 year\\'',\n      },\n      columns: ['col1'],\n      metrics: ['count(*)'],\n    };\n    const query: QueryObject = {\n      datasource: '5__table',\n      viz_type: 'table',\n      granularity: 'time_column',\n      extras: {\n        time_grain_sqla: 'P1Y',\n        where: '',\n        having: '',\n      },\n      time_range: '1 year ago : 2013',\n      orderby: [['count(*)', true]],\n      metrics: ['count(*)'],\n      is_timeseries: true,\n    };\n    expect(normalizeTimeColumn(formData, query)).toEqual(query);\n  });","file":"query/normalizeTimeColumn.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should assign allowed non-existent value","suites":["overrideExtraFormData"],"updatePoint":{"line":22,"column":46},"line":22,"code":"  it('should assign allowed non-existent value', () => {\n    expect(\n      overrideExtraFormData(\n        {\n          granularity: 'something',\n          viz_type: 'custom',\n          datasource: 'table_1',\n        },\n        {\n          time_range: '100 years ago',\n        },\n      ),\n    ).toEqual({\n      granularity: 'something',\n      viz_type: 'custom',\n      datasource: 'table_1',\n      time_range: '100 years ago',\n    });\n  });","file":"query/processExtraFormData.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should override allowed preexisting value","suites":["overrideExtraFormData"],"updatePoint":{"line":42,"column":47},"line":42,"code":"  it('should override allowed preexisting value', () => {\n    expect(\n      overrideExtraFormData(\n        {\n          granularity: 'something',\n          viz_type: 'custom',\n          datasource: 'table_1',\n          time_range: '100 years ago',\n        },\n        {\n          time_range: '50 years ago',\n        },\n      ),\n    ).toEqual({\n      granularity: 'something',\n      viz_type: 'custom',\n      datasource: 'table_1',\n      time_range: '50 years ago',\n    });\n  });","file":"query/processExtraFormData.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should not override non-allowed value","suites":["overrideExtraFormData"],"updatePoint":{"line":63,"column":43},"line":63,"code":"  it('should not override non-allowed value', () => {\n    expect(\n      overrideExtraFormData(\n        {\n          granularity: 'something',\n          viz_type: 'custom',\n          datasource: 'table_1',\n          time_range: '100 years ago',\n        },\n        {\n          // @ts-expect-error\n          viz_type: 'other custom viz',\n        },\n      ),\n    ).toEqual({\n      granularity: 'something',\n      viz_type: 'custom',\n      datasource: 'table_1',\n      time_range: '100 years ago',\n    });\n  });","file":"query/processExtraFormData.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should override pre-existing extra value","suites":["overrideExtraFormData"],"updatePoint":{"line":85,"column":46},"line":85,"code":"  it('should override pre-existing extra value', () => {\n    expect(\n      overrideExtraFormData(\n        {\n          granularity: 'something',\n          viz_type: 'custom',\n          datasource: 'table_1',\n          time_range: '100 years ago',\n          extras: {\n            time_grain_sqla: 'PT1H',\n          },\n        },\n        { time_grain_sqla: 'P1D' },\n      ),\n    ).toEqual({\n      granularity: 'something',\n      viz_type: 'custom',\n      datasource: 'table_1',\n      time_range: '100 years ago',\n      extras: {\n        time_grain_sqla: 'P1D',\n      },\n    });\n  });","file":"query/processExtraFormData.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should add extra override value","suites":["overrideExtraFormData"],"updatePoint":{"line":110,"column":37},"line":110,"code":"  it('should add extra override value', () => {\n    expect(\n      overrideExtraFormData(\n        {\n          granularity: 'something',\n          viz_type: 'custom',\n          datasource: 'table_1',\n          time_range: '100 years ago',\n        },\n        {\n          time_grain_sqla: 'PT1H',\n        },\n      ),\n    ).toEqual({\n      granularity: 'something',\n      viz_type: 'custom',\n      datasource: 'table_1',\n      time_range: '100 years ago',\n      extras: {\n        time_grain_sqla: 'PT1H',\n      },\n    });\n  });","file":"query/processExtraFormData.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should handle non-array adhoc_filters","suites":["processFilters"],"updatePoint":{"line":22,"column":43},"line":22,"code":"  it('should handle non-array adhoc_filters', () => {\n    expect(\n      processFilters({\n        granularity: 'something',\n        viz_type: 'custom',\n        datasource: 'boba',\n      }),\n    ).toEqual(\n      expect.objectContaining({\n        extras: { having: '', where: '' },\n        filters: [],\n      }),\n    );\n  });","file":"query/processFilters.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should merge simple adhoc_filters and filters","suites":["processFilters"],"updatePoint":{"line":37,"column":51},"line":37,"code":"  it('should merge simple adhoc_filters and filters', () => {\n    expect(\n      processFilters({\n        granularity: 'something',\n        viz_type: 'custom',\n        datasource: 'boba',\n        filters: [\n          {\n            col: 'name',\n            op: '==',\n            val: 'Aaron',\n          },\n        ],\n        adhoc_filters: [\n          {\n            expressionType: 'SIMPLE',\n            clause: 'WHERE',\n            subject: 'gender',\n            operator: 'IS NOT NULL',\n          },\n          // ignore simple having filter\n          {\n            expressionType: 'SIMPLE',\n            clause: 'HAVING',\n            subject: 'sum(sales)',\n            operator: '>',\n            comparator: '100',\n          },\n        ],\n      }),\n    ).toEqual({\n      extras: {\n        having: '',\n        where: '',\n      },\n      filters: [\n        {\n          col: 'name',\n          op: '==',\n          val: 'Aaron',\n        },\n        {\n          col: 'gender',\n          op: 'IS NOT NULL',\n        },\n      ],\n    });\n  });","file":"query/processFilters.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should handle an empty array","suites":["processFilters"],"updatePoint":{"line":86,"column":34},"line":86,"code":"  it('should handle an empty array', () => {\n    expect(\n      processFilters({\n        where: '1 = 1',\n        granularity: 'something',\n        viz_type: 'custom',\n        datasource: 'boba',\n        adhoc_filters: [],\n      }),\n    ).toEqual({\n      filters: [],\n      extras: {\n        having: '',\n        where: '(1 = 1)',\n      },\n    });\n  });","file":"query/processFilters.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should put adhoc_filters into the correct group and format accordingly","suites":["processFilters"],"updatePoint":{"line":104,"column":76},"line":104,"code":"  it('should put adhoc_filters into the correct group and format accordingly', () => {\n    expect(\n      processFilters({\n        granularity: 'something',\n        viz_type: 'custom',\n        datasource: 'boba',\n        adhoc_filters: [\n          {\n            expressionType: 'SIMPLE',\n            clause: 'WHERE',\n            subject: 'milk',\n            operator: 'IS NOT NULL',\n          },\n          {\n            expressionType: 'SIMPLE',\n            clause: 'WHERE',\n            subject: 'milk',\n            operator: '==',\n            comparator: 'almond',\n          },\n          {\n            expressionType: 'SQL',\n            clause: 'WHERE',\n            sqlExpression: \"tea = 'jasmine'\",\n          },\n          {\n            expressionType: 'SQL',\n            clause: 'WHERE',\n            sqlExpression: \"cup = 'large' -- comment\",\n          },\n          {\n            expressionType: 'SQL',\n            clause: 'HAVING',\n            sqlExpression: 'ice = 25 OR ice = 50',\n          },\n          {\n            expressionType: 'SQL',\n            clause: 'HAVING',\n            sqlExpression: 'waitTime <= 180 -- comment',\n          },\n        ],\n      }),\n    ).toEqual({\n      extras: {\n        having: '(ice = 25 OR ice = 50) AND (waitTime <= 180 -- comment\\n)',\n        where: \"(tea = 'jasmine') AND (cup = 'large' -- comment\\n)\",\n      },\n      filters: [\n        {\n          col: 'milk',\n          op: 'IS NOT NULL',\n        },\n        {\n          col: 'milk',\n          op: '==',\n          val: 'almond',\n        },\n      ],\n    });\n  });","file":"query/processFilters.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should return true when it is the correct type","suites":["AnnotationLayer type guards","isFormulaAnnotationLayer"],"updatePoint":{"line":104,"column":54},"line":104,"code":"    it('should return true when it is the correct type', () => {\n      expect(isFormulaAnnotationLayer(formulaAnnotationLayer)).toEqual(true);\n    });","file":"query/types/AnnotationLayer.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should return false otherwise","suites":["AnnotationLayer type guards","isFormulaAnnotationLayer"],"updatePoint":{"line":107,"column":37},"line":107,"code":"    it('should return false otherwise', () => {\n      expect(isFormulaAnnotationLayer(eventAnnotationLayer)).toEqual(false);\n      expect(isFormulaAnnotationLayer(intervalAnnotationLayer)).toEqual(false);\n      expect(isFormulaAnnotationLayer(timeseriesAnnotationLayer)).toEqual(\n        false,\n      );\n    });","file":"query/types/AnnotationLayer.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should return true when it is the correct type","suites":["AnnotationLayer type guards","isEventAnnotationLayer"],"updatePoint":{"line":117,"column":54},"line":117,"code":"    it('should return true when it is the correct type', () => {\n      expect(isEventAnnotationLayer(eventAnnotationLayer)).toEqual(true);\n    });","file":"query/types/AnnotationLayer.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should return false otherwise","suites":["AnnotationLayer type guards","isEventAnnotationLayer"],"updatePoint":{"line":120,"column":37},"line":120,"code":"    it('should return false otherwise', () => {\n      expect(isEventAnnotationLayer(formulaAnnotationLayer)).toEqual(false);\n      expect(isEventAnnotationLayer(intervalAnnotationLayer)).toEqual(false);\n      expect(isEventAnnotationLayer(timeseriesAnnotationLayer)).toEqual(false);\n    });","file":"query/types/AnnotationLayer.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should return true when it is the correct type","suites":["AnnotationLayer type guards","isIntervalAnnotationLayer"],"updatePoint":{"line":128,"column":54},"line":128,"code":"    it('should return true when it is the correct type', () => {\n      expect(isIntervalAnnotationLayer(intervalAnnotationLayer)).toEqual(true);\n    });","file":"query/types/AnnotationLayer.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should return false otherwise","suites":["AnnotationLayer type guards","isIntervalAnnotationLayer"],"updatePoint":{"line":131,"column":37},"line":131,"code":"    it('should return false otherwise', () => {\n      expect(isIntervalAnnotationLayer(formulaAnnotationLayer)).toEqual(false);\n      expect(isIntervalAnnotationLayer(eventAnnotationLayer)).toEqual(false);\n      expect(isIntervalAnnotationLayer(timeseriesAnnotationLayer)).toEqual(\n        false,\n      );\n    });","file":"query/types/AnnotationLayer.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should return true when it is the correct type","suites":["AnnotationLayer type guards","isTimeseriesAnnotationLayer"],"updatePoint":{"line":141,"column":54},"line":141,"code":"    it('should return true when it is the correct type', () => {\n      expect(isTimeseriesAnnotationLayer(timeseriesAnnotationLayer)).toEqual(\n        true,\n      );\n    });","file":"query/types/AnnotationLayer.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should return false otherwise","suites":["AnnotationLayer type guards","isTimeseriesAnnotationLayer"],"updatePoint":{"line":146,"column":37},"line":146,"code":"    it('should return false otherwise', () => {\n      expect(isTimeseriesAnnotationLayer(formulaAnnotationLayer)).toEqual(\n        false,\n      );\n      expect(isTimeseriesAnnotationLayer(eventAnnotationLayer)).toEqual(false);\n      expect(isTimeseriesAnnotationLayer(intervalAnnotationLayer)).toEqual(\n        false,\n      );\n    });","file":"query/types/AnnotationLayer.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should return true when it is the correct type","suites":["AnnotationLayer type guards","isTableAnnotationLayer"],"updatePoint":{"line":158,"column":54},"line":158,"code":"    it('should return true when it is the correct type', () => {\n      expect(isTableAnnotationLayer(tableAnnotationLayer)).toEqual(true);\n    });","file":"query/types/AnnotationLayer.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should return false otherwise","suites":["AnnotationLayer type guards","isTableAnnotationLayer"],"updatePoint":{"line":161,"column":37},"line":161,"code":"    it('should return false otherwise', () => {\n      expect(isTableAnnotationLayer(formulaAnnotationLayer)).toEqual(false);\n    });","file":"query/types/AnnotationLayer.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should return true when it is the correct type","suites":["AnnotationLayer type guards","isTimeseriesAnnotationResult"],"updatePoint":{"line":167,"column":54},"line":167,"code":"    it('should return true when it is the correct type', () => {\n      expect(isTimeseriesAnnotationResult(timeseriesAnnotationResult)).toEqual(\n        true,\n      );\n    });","file":"query/types/AnnotationLayer.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should return false otherwise","suites":["AnnotationLayer type guards","isTimeseriesAnnotationResult"],"updatePoint":{"line":172,"column":37},"line":172,"code":"    it('should return false otherwise', () => {\n      expect(isTimeseriesAnnotationResult(recordAnnotationResult)).toEqual(\n        false,\n      );\n    });","file":"query/types/AnnotationLayer.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should return true when it is the correct type","suites":["AnnotationLayer type guards","isRecordAnnotationResult"],"updatePoint":{"line":180,"column":54},"line":180,"code":"    it('should return true when it is the correct type', () => {\n      expect(isRecordAnnotationResult(recordAnnotationResult)).toEqual(true);\n    });","file":"query/types/AnnotationLayer.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should return false otherwise","suites":["AnnotationLayer type guards","isRecordAnnotationResult"],"updatePoint":{"line":183,"column":37},"line":183,"code":"    it('should return false otherwise', () => {\n      expect(isRecordAnnotationResult(timeseriesAnnotationResult)).toEqual(\n        false,\n      );\n    });","file":"query/types/AnnotationLayer.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"isPhysicalColumn returns true","suites":[],"updatePoint":{"line":32,"column":35},"line":32,"code":"test('isPhysicalColumn returns true', () => {\n  expect(isPhysicalColumn('gender')).toEqual(true);\n});","file":"query/types/Column.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"isPhysicalColumn returns false","suites":[],"updatePoint":{"line":36,"column":36},"line":36,"code":"test('isPhysicalColumn returns false', () => {\n  expect(isPhysicalColumn(adhocColumn)).toEqual(false);\n});","file":"query/types/Column.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"isAdhocColumn returns true","suites":[],"updatePoint":{"line":40,"column":32},"line":40,"code":"test('isAdhocColumn returns true', () => {\n  expect(isAdhocColumn(adhocColumn)).toEqual(true);\n});","file":"query/types/Column.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"isAdhocColumn returns false","suites":[],"updatePoint":{"line":44,"column":33},"line":44,"code":"test('isAdhocColumn returns false', () => {\n  expect(isAdhocColumn('hello')).toEqual(false);\n  expect(isAdhocColumn({})).toEqual(false);\n  expect(\n    isAdhocColumn({\n      expressionType: 'SQL',\n      label: 'country',\n      optionName: 'country',\n    }),\n  ).toEqual(false);\n});","file":"query/types/Column.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"isQueryFormColumn returns true","suites":[],"updatePoint":{"line":56,"column":36},"line":56,"code":"test('isQueryFormColumn returns true', () => {\n  expect(isQueryFormColumn('gender')).toEqual(true);\n  expect(isQueryFormColumn(adhocColumn)).toEqual(true);\n});","file":"query/types/Column.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"isQueryFormColumn returns false","suites":[],"updatePoint":{"line":61,"column":37},"line":61,"code":"test('isQueryFormColumn returns false', () => {\n  expect(isQueryFormColumn({})).toEqual(false);\n});","file":"query/types/Column.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"filter type guard","suites":[],"updatePoint":{"line":54,"column":23},"line":54,"code":"test('filter type guard', () => {\n  expect(isNativeFilter(filter)).toBeTruthy();\n  expect(isNativeFilter(filterWithDataMask)).toBeTruthy();\n  expect(isNativeFilter(filterDivider)).toBeFalsy();\n});","file":"query/types/Dashboard.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"filter with dataMask type guard","suites":[],"updatePoint":{"line":60,"column":37},"line":60,"code":"test('filter with dataMask type guard', () => {\n  expect(isNativeFilterWithDataMask(filter)).toBeFalsy();\n  expect(isNativeFilterWithDataMask(filterWithDataMask)).toBeTruthy();\n  expect(isNativeFilterWithDataMask(filterDivider)).toBeFalsy();\n});","file":"query/types/Dashboard.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"filter divider type guard","suites":[],"updatePoint":{"line":66,"column":31},"line":66,"code":"test('filter divider type guard', () => {\n  expect(isFilterDivider(filter)).toBeFalsy();\n  expect(isFilterDivider(filterWithDataMask)).toBeFalsy();\n  expect(isFilterDivider(filterDivider)).toBeTruthy();\n});","file":"query/types/Dashboard.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"DEFAULT_METRICS","suites":[],"updatePoint":{"line":21,"column":21},"line":21,"code":"test('DEFAULT_METRICS', () => {\n  expect(DEFAULT_METRICS).toEqual([\n    {\n      metric_name: 'COUNT(*)',\n      expression: 'COUNT(*)',\n    },\n  ]);\n});","file":"query/types/Datasource.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"DatasourceType","suites":[],"updatePoint":{"line":30,"column":20},"line":30,"code":"test('DatasourceType', () => {\n  expect(Object.keys(DatasourceType).length).toBe(5);\n  expect(DatasourceType.Table).toBe('table');\n  expect(DatasourceType.Query).toBe('query');\n  expect(DatasourceType.Dataset).toBe('dataset');\n  expect(DatasourceType.SlTable).toBe('sl_table');\n  expect(DatasourceType.SavedQuery).toBe('saved_query');\n});","file":"query/types/Datasource.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should return true when it is the correct type","suites":["Filter type guards","isUnaryAdhocFilter"],"updatePoint":{"line":29,"column":54},"line":29,"code":"    it('should return true when it is the correct type', () => {\n      expect(\n        isUnaryAdhocFilter({\n          expressionType: 'SIMPLE',\n          clause: 'WHERE',\n          subject: 'tea',\n          operator: 'IS NOT NULL',\n        }),\n      ).toEqual(true);\n    });","file":"query/types/Filter.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should return false otherwise","suites":["Filter type guards","isUnaryAdhocFilter"],"updatePoint":{"line":39,"column":37},"line":39,"code":"    it('should return false otherwise', () => {\n      expect(\n        isUnaryAdhocFilter({\n          expressionType: 'SIMPLE',\n          clause: 'WHERE',\n          subject: 'tea',\n          operator: '==',\n          comparator: 'matcha',\n        }),\n      ).toEqual(false);\n    });","file":"query/types/Filter.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should return true when it is the correct type","suites":["Filter type guards","isBinaryAdhocFilter"],"updatePoint":{"line":53,"column":54},"line":53,"code":"    it('should return true when it is the correct type', () => {\n      expect(\n        isBinaryAdhocFilter({\n          expressionType: 'SIMPLE',\n          clause: 'WHERE',\n          subject: 'tea',\n          operator: '!=',\n          comparator: 'matcha',\n        }),\n      ).toEqual(true);\n    });","file":"query/types/Filter.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should return false otherwise","suites":["Filter type guards","isBinaryAdhocFilter"],"updatePoint":{"line":64,"column":37},"line":64,"code":"    it('should return false otherwise', () => {\n      expect(\n        isBinaryAdhocFilter({\n          expressionType: 'SIMPLE',\n          clause: 'WHERE',\n          subject: 'tea',\n          operator: 'IS NOT NULL',\n        }),\n      ).toEqual(false);\n    });","file":"query/types/Filter.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should return true when it is the correct type","suites":["Filter type guards","isSetAdhocFilter"],"updatePoint":{"line":77,"column":54},"line":77,"code":"    it('should return true when it is the correct type', () => {\n      expect(\n        isSetAdhocFilter({\n          expressionType: 'SIMPLE',\n          clause: 'WHERE',\n          subject: 'tea',\n          operator: 'IN',\n          comparator: ['hojicha', 'earl grey'],\n        }),\n      ).toEqual(true);\n    });","file":"query/types/Filter.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should return false otherwise","suites":["Filter type guards","isSetAdhocFilter"],"updatePoint":{"line":88,"column":37},"line":88,"code":"    it('should return false otherwise', () => {\n      expect(\n        isSetAdhocFilter({\n          expressionType: 'SIMPLE',\n          clause: 'WHERE',\n          subject: 'tea',\n          operator: 'IS NOT NULL',\n        }),\n      ).toEqual(false);\n    });","file":"query/types/Filter.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should return true when it is the correct type","suites":["Filter type guards","isFreeFormAdhocFilter"],"updatePoint":{"line":100,"column":54},"line":100,"code":"    it('should return true when it is the correct type', () => {\n      expect(\n        isFreeFormAdhocFilter({\n          expressionType: 'SQL',\n          clause: 'WHERE',\n          sqlExpression: 'gender = \"boy\"',\n        }),\n      ).toEqual(true);\n    });","file":"query/types/Filter.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should return false otherwise","suites":["Filter type guards","isFreeFormAdhocFilter"],"updatePoint":{"line":109,"column":37},"line":109,"code":"    it('should return false otherwise', () => {\n      expect(\n        isFreeFormAdhocFilter({\n          expressionType: 'SIMPLE',\n          clause: 'WHERE',\n          subject: 'tea',\n          operator: '==',\n          comparator: 'matcha',\n        }),\n      ).toEqual(false);\n    });","file":"query/types/Filter.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"isSavedMetric returns true","suites":[],"updatePoint":{"line":48,"column":32},"line":48,"code":"test('isSavedMetric returns true', () => {\n  expect(isSavedMetric(savedMetric)).toEqual(true);\n});","file":"query/types/Metric.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"isSavedMetric returns false","suites":[],"updatePoint":{"line":52,"column":33},"line":52,"code":"test('isSavedMetric returns false', () => {\n  expect(isSavedMetric(adhocMetricSQL)).toEqual(false);\n  expect(isSavedMetric(null)).toEqual(false);\n  expect(isSavedMetric(undefined)).toEqual(false);\n});","file":"query/types/Metric.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"isAdhocMetricSimple returns true","suites":[],"updatePoint":{"line":58,"column":38},"line":58,"code":"test('isAdhocMetricSimple returns true', () => {\n  expect(isAdhocMetricSimple(adhocMetricSimple)).toEqual(true);\n});","file":"query/types/Metric.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"isAdhocMetricSimple returns false","suites":[],"updatePoint":{"line":62,"column":39},"line":62,"code":"test('isAdhocMetricSimple returns false', () => {\n  expect(isAdhocMetricSimple('hello')).toEqual(false);\n  expect(isAdhocMetricSimple({})).toEqual(false);\n  expect(isAdhocMetricSimple(adhocMetricSQL)).toEqual(false);\n});","file":"query/types/Metric.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"isAdhocMetricSQL returns true","suites":[],"updatePoint":{"line":68,"column":35},"line":68,"code":"test('isAdhocMetricSQL returns true', () => {\n  expect(isAdhocMetricSQL(adhocMetricSQL)).toEqual(true);\n});","file":"query/types/Metric.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"isAdhocMetricSQL returns false","suites":[],"updatePoint":{"line":72,"column":36},"line":72,"code":"test('isAdhocMetricSQL returns false', () => {\n  expect(isAdhocMetricSQL('hello')).toEqual(false);\n  expect(isAdhocMetricSQL({})).toEqual(false);\n  expect(isAdhocMetricSQL(adhocMetricSimple)).toEqual(false);\n});","file":"query/types/Metric.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"isQueryFormMetric returns true","suites":[],"updatePoint":{"line":78,"column":36},"line":78,"code":"test('isQueryFormMetric returns true', () => {\n  expect(isQueryFormMetric(adhocMetricSQL)).toEqual(true);\n  expect(isQueryFormMetric(adhocMetricSimple)).toEqual(true);\n  expect(isQueryFormMetric(savedMetric)).toEqual(true);\n});","file":"query/types/Metric.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"isQueryFormMetric returns false","suites":[],"updatePoint":{"line":84,"column":37},"line":84,"code":"test('isQueryFormMetric returns false', () => {\n  expect(isQueryFormMetric({})).toEqual(false);\n  expect(isQueryFormMetric(undefined)).toEqual(false);\n  expect(isQueryFormMetric(null)).toEqual(false);\n});","file":"query/types/Metric.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"PostProcessingAggregation type guard","suites":[],"updatePoint":{"line":154,"column":42},"line":154,"code":"test('PostProcessingAggregation type guard', () => {\n  expect(isPostProcessingAggregation(AGGREGATE_RULE)).toEqual(true);\n  expect(isPostProcessingAggregation(BOXPLOT_RULE)).toEqual(false);\n  expect(isPostProcessingAggregation(undefined)).toEqual(false);\n});","file":"query/types/PostProcessing.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"PostProcessingBoxplot type guard","suites":[],"updatePoint":{"line":160,"column":38},"line":160,"code":"test('PostProcessingBoxplot type guard', () => {\n  expect(isPostProcessingBoxplot(BOXPLOT_RULE)).toEqual(true);\n  expect(isPostProcessingBoxplot(AGGREGATE_RULE)).toEqual(false);\n  expect(isPostProcessingBoxplot(undefined)).toEqual(false);\n});","file":"query/types/PostProcessing.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"PostProcessingCompare type guard","suites":[],"updatePoint":{"line":166,"column":38},"line":166,"code":"test('PostProcessingCompare type guard', () => {\n  expect(isPostProcessingCompare(COMPARE_RULE)).toEqual(true);\n  expect(isPostProcessingCompare(AGGREGATE_RULE)).toEqual(false);\n  expect(isPostProcessingCompare(undefined)).toEqual(false);\n});","file":"query/types/PostProcessing.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"PostProcessingContribution type guard","suites":[],"updatePoint":{"line":172,"column":43},"line":172,"code":"test('PostProcessingContribution type guard', () => {\n  expect(isPostProcessingContribution(CONTRIBUTION_RULE)).toEqual(true);\n  expect(isPostProcessingContribution(AGGREGATE_RULE)).toEqual(false);\n  expect(isPostProcessingContribution(undefined)).toEqual(false);\n});","file":"query/types/PostProcessing.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"PostProcessingCum type guard","suites":[],"updatePoint":{"line":178,"column":34},"line":178,"code":"test('PostProcessingCum type guard', () => {\n  expect(isPostProcessingCum(CUM_RULE)).toEqual(true);\n  expect(isPostProcessingCum(AGGREGATE_RULE)).toEqual(false);\n  expect(isPostProcessingCum(undefined)).toEqual(false);\n});","file":"query/types/PostProcessing.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"PostProcessingDiff type guard","suites":[],"updatePoint":{"line":184,"column":35},"line":184,"code":"test('PostProcessingDiff type guard', () => {\n  expect(isPostProcessingDiff(DIFF_RULE)).toEqual(true);\n  expect(isPostProcessingDiff(AGGREGATE_RULE)).toEqual(false);\n  expect(isPostProcessingDiff(undefined)).toEqual(false);\n});","file":"query/types/PostProcessing.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"PostProcessingPivot type guard","suites":[],"updatePoint":{"line":190,"column":36},"line":190,"code":"test('PostProcessingPivot type guard', () => {\n  expect(isPostProcessingPivot(PIVOT_RULE)).toEqual(true);\n  expect(isPostProcessingPivot(AGGREGATE_RULE)).toEqual(false);\n  expect(isPostProcessingPivot(undefined)).toEqual(false);\n});","file":"query/types/PostProcessing.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"PostProcessingProphet type guard","suites":[],"updatePoint":{"line":196,"column":38},"line":196,"code":"test('PostProcessingProphet type guard', () => {\n  expect(isPostProcessingProphet(PROPHET_RULE)).toEqual(true);\n  expect(isPostProcessingProphet(AGGREGATE_RULE)).toEqual(false);\n  expect(isPostProcessingProphet(undefined)).toEqual(false);\n});","file":"query/types/PostProcessing.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"PostProcessingResample type guard","suites":[],"updatePoint":{"line":202,"column":39},"line":202,"code":"test('PostProcessingResample type guard', () => {\n  expect(isPostProcessingResample(RESAMPLE_RULE)).toEqual(true);\n  expect(isPostProcessingResample(AGGREGATE_RULE)).toEqual(false);\n  expect(isPostProcessingResample(undefined)).toEqual(false);\n});","file":"query/types/PostProcessing.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"PostProcessingRolling type guard","suites":[],"updatePoint":{"line":208,"column":38},"line":208,"code":"test('PostProcessingRolling type guard', () => {\n  expect(isPostProcessingRolling(ROLLING_RULE)).toEqual(true);\n  expect(isPostProcessingRolling(AGGREGATE_RULE)).toEqual(false);\n  expect(isPostProcessingRolling(undefined)).toEqual(false);\n});","file":"query/types/PostProcessing.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"PostProcessingSort type guard","suites":[],"updatePoint":{"line":214,"column":35},"line":214,"code":"test('PostProcessingSort type guard', () => {\n  expect(isPostProcessingSort(SORT_RULE)).toEqual(true);\n  expect(isPostProcessingSort(AGGREGATE_RULE)).toEqual(false);\n  expect(isPostProcessingSort(undefined)).toEqual(false);\n});","file":"query/types/PostProcessing.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"requires config.formatString","suites":["createD3TimeFormatter(config)"],"updatePoint":{"line":73,"column":34},"line":73,"code":"  it('requires config.formatString', () => {\n    // @ts-ignore\n    expect(() => createD3TimeFormatter()).toThrow();\n    // @ts-ignore\n    expect(() => createD3TimeFormatter({})).toThrow();\n  });","file":"time-format/factories/createD3TimeFormatter.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"if falsy, formats in UTC time","suites":["createD3TimeFormatter(config)","config.useLocalTime"],"updatePoint":{"line":80,"column":37},"line":80,"code":"    it('if falsy, formats in UTC time', () => {\n      const formatter = createD3TimeFormatter({\n        formatString: TimeFormats.DATABASE_DATETIME,\n      });\n      expect(formatter.format(PREVIEW_TIME)).toEqual('2017-02-14 11:22:33');\n    });","file":"time-format/factories/createD3TimeFormatter.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"if true, formats in local time","suites":["createD3TimeFormatter(config)","config.useLocalTime"],"updatePoint":{"line":86,"column":38},"line":86,"code":"    it('if true, formats in local time', () => {\n      const formatter = createD3TimeFormatter({\n        formatString: TimeFormats.DATABASE_DATETIME,\n        useLocalTime: true,\n      });\n      const formatterInUTC = createD3TimeFormatter({\n        formatString: TimeFormats.DATABASE_DATETIME,\n      });\n      const offset = new Date(PREVIEW_TIME.valueOf()).getTimezoneOffset(); // in minutes\n      const expected =\n        offset === 0\n          ? '2017-02-14 11:22:33'\n          : formatterInUTC(\n              new Date(PREVIEW_TIME.valueOf() - 60 * 1000 * offset),\n            );\n      expect(formatter.format(PREVIEW_TIME)).toEqual(expected);\n    });","file":"time-format/factories/createD3TimeFormatter.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"supports locale customization (utc time)","suites":["createD3TimeFormatter(config)","config.locale"],"updatePoint":{"line":107,"column":48},"line":107,"code":"    it('supports locale customization (utc time)', () => {\n      const formatter = createD3TimeFormatter({\n        formatString: '%c',\n        locale: thLocale,\n      });\n      expect(formatter(TEST_TIME)).toEqual('อา. 20 ธ.ค. 2015 00:00:00');\n    });","file":"time-format/factories/createD3TimeFormatter.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"supports locale customization (local time)","suites":["createD3TimeFormatter(config)","config.locale"],"updatePoint":{"line":114,"column":50},"line":114,"code":"    it('supports locale customization (local time)', () => {\n      const formatter = createD3TimeFormatter({\n        formatString: '%c',\n        locale: thLocale,\n        useLocalTime: true,\n      });\n      const formatterInUTC = createD3TimeFormatter({\n        formatString: '%c',\n        locale: thLocale,\n      });\n      const offset = new Date(PREVIEW_TIME.valueOf()).getTimezoneOffset();\n      const expected =\n        offset === 0\n          ? 'อา. 20 ธ.ค. 2015 00:00:00'\n          : formatterInUTC(new Date(TEST_TIME.valueOf() - 60 * 1000 * offset));\n      expect(formatter(TEST_TIME)).toEqual(expected);\n    });","file":"time-format/factories/createD3TimeFormatter.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"formats millisecond","suites":["createMultiFormatter()","creates a multi-step formatter"],"updatePoint":{"line":28,"column":27},"line":28,"code":"    it('formats millisecond', () => {\n      expect(formatter(new Date(2018, 10, 20, 11, 22, 33, 100))).toEqual(\n        '.100',\n      );\n    });","file":"time-format/factories/createMultiFormatter.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"formats second","suites":["createMultiFormatter()","creates a multi-step formatter"],"updatePoint":{"line":33,"column":22},"line":33,"code":"    it('formats second', () => {\n      expect(formatter(new Date(2018, 10, 20, 11, 22, 33))).toEqual(':33');\n    });","file":"time-format/factories/createMultiFormatter.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"format minutes","suites":["createMultiFormatter()","creates a multi-step formatter"],"updatePoint":{"line":36,"column":22},"line":36,"code":"    it('format minutes', () => {\n      expect(formatter(new Date(2018, 10, 20, 11, 22))).toEqual('11:22');\n    });","file":"time-format/factories/createMultiFormatter.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"format hours","suites":["createMultiFormatter()","creates a multi-step formatter"],"updatePoint":{"line":39,"column":20},"line":39,"code":"    it('format hours', () => {\n      expect(formatter(new Date(2018, 10, 20, 11))).toEqual('11 AM');\n    });","file":"time-format/factories/createMultiFormatter.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"format first day of week","suites":["createMultiFormatter()","creates a multi-step formatter"],"updatePoint":{"line":42,"column":32},"line":42,"code":"    it('format first day of week', () => {\n      expect(formatter(new Date(2018, 10, 18))).toEqual('Nov 18');\n    });","file":"time-format/factories/createMultiFormatter.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"format other day of week","suites":["createMultiFormatter()","creates a multi-step formatter"],"updatePoint":{"line":45,"column":32},"line":45,"code":"    it('format other day of week', () => {\n      expect(formatter(new Date(2018, 10, 20))).toEqual('Tue 20');\n    });","file":"time-format/factories/createMultiFormatter.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"format month","suites":["createMultiFormatter()","creates a multi-step formatter"],"updatePoint":{"line":48,"column":20},"line":48,"code":"    it('format month', () => {\n      expect(formatter(new Date(2018, 10))).toEqual('November');\n    });","file":"time-format/factories/createMultiFormatter.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"format year","suites":["createMultiFormatter()","creates a multi-step formatter"],"updatePoint":{"line":51,"column":19},"line":51,"code":"    it('format year', () => {\n      expect(formatter(new Date(2018, 0))).toEqual('2018');\n    });","file":"time-format/factories/createMultiFormatter.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"is a function","suites":["smartDateFormatter"],"updatePoint":{"line":23,"column":19},"line":23,"code":"  it('is a function', () => {\n    expect(smartDateFormatter).toBeInstanceOf(TimeFormatter);\n  });","file":"time-format/formatters/smartDate.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"shows only year when 1st day of the year","suites":["smartDateFormatter"],"updatePoint":{"line":27,"column":46},"line":27,"code":"  it('shows only year when 1st day of the year', () => {\n    expect(smartDateFormatter(new Date('2020-01-01'))).toBe('2020');\n  });","file":"time-format/formatters/smartDate.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"shows only month when 1st of month","suites":["smartDateFormatter"],"updatePoint":{"line":31,"column":40},"line":31,"code":"  it('shows only month when 1st of month', () => {\n    expect(smartDateFormatter(new Date('2020-03-01'))).toBe('March');\n  });","file":"time-format/formatters/smartDate.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"does not show day of week when it is Sunday","suites":["smartDateFormatter"],"updatePoint":{"line":35,"column":49},"line":35,"code":"  it('does not show day of week when it is Sunday', () => {\n    expect(smartDateFormatter(new Date('2020-03-15'))).toBe('Mar 15');\n  });","file":"time-format/formatters/smartDate.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"shows weekday when it is not Sunday (and no ms/sec/min/hr)","suites":["smartDateFormatter"],"updatePoint":{"line":39,"column":64},"line":39,"code":"  it('shows weekday when it is not Sunday (and no ms/sec/min/hr)', () => {\n    expect(smartDateFormatter(new Date('2020-03-03'))).toBe('Tue 03');\n  });","file":"time-format/formatters/smartDate.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"is a function","suites":["smartDateDetailedFormatter"],"updatePoint":{"line":25,"column":19},"line":25,"code":"  it('is a function', () => {\n    expect(formatter).toBeInstanceOf(TimeFormatter);\n  });","file":"time-format/formatters/smartDateDetailed.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"shows only year when 1st day of the year","suites":["smartDateDetailedFormatter"],"updatePoint":{"line":29,"column":46},"line":29,"code":"  it('shows only year when 1st day of the year', () => {\n    expect(formatter(new Date('2020-01-01T00:00:00.000+00:00'))).toBe('2020');\n  });","file":"time-format/formatters/smartDateDetailed.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"shows full date when a regular date","suites":["smartDateDetailedFormatter"],"updatePoint":{"line":33,"column":41},"line":33,"code":"  it('shows full date when a regular date', () => {\n    expect(formatter(new Date('2020-03-01T00:00:00.000+00:00'))).toBe(\n      '2020-03-01',\n    );\n  });","file":"time-format/formatters/smartDateDetailed.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"shows full date including time of day without seconds when hour precision","suites":["smartDateDetailedFormatter"],"updatePoint":{"line":39,"column":79},"line":39,"code":"  it('shows full date including time of day without seconds when hour precision', () => {\n    expect(formatter(new Date('2020-03-01T13:00:00.000+00:00'))).toBe(\n      '2020-03-01 13:00',\n    );\n  });","file":"time-format/formatters/smartDateDetailed.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"shows full date including time of day when minute precision","suites":["smartDateDetailedFormatter"],"updatePoint":{"line":45,"column":65},"line":45,"code":"  it('shows full date including time of day when minute precision', () => {\n    expect(formatter(new Date('2020-03-10T13:10:00.000+00:00'))).toBe(\n      '2020-03-10 13:10',\n    );\n  });","file":"time-format/formatters/smartDateDetailed.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"shows full date including time of day when subsecond precision","suites":["smartDateDetailedFormatter"],"updatePoint":{"line":51,"column":68},"line":51,"code":"  it('shows full date including time of day when subsecond precision', () => {\n    expect(formatter(new Date('2020-03-10T13:10:00.100+00:00'))).toBe(\n      '2020-03-10 13:10:00.100',\n    );\n  });","file":"time-format/formatters/smartDateDetailed.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"is a function","suites":["smartDateVerboseFormatter"],"updatePoint":{"line":25,"column":19},"line":25,"code":"  it('is a function', () => {\n    expect(formatter).toBeInstanceOf(TimeFormatter);\n  });","file":"time-format/formatters/smartDateVerbose.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"shows only year when 1st day of the year","suites":["smartDateVerboseFormatter"],"updatePoint":{"line":29,"column":46},"line":29,"code":"  it('shows only year when 1st day of the year', () => {\n    expect(formatter(new Date('2020-01-01'))).toBe('2020');\n  });","file":"time-format/formatters/smartDateVerbose.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"shows month and year when 1st of month","suites":["smartDateVerboseFormatter"],"updatePoint":{"line":33,"column":44},"line":33,"code":"  it('shows month and year when 1st of month', () => {\n    expect(formatter(new Date('2020-03-01'))).toBe('Mar 2020');\n  });","file":"time-format/formatters/smartDateVerbose.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"shows weekday when any day of the month","suites":["smartDateVerboseFormatter"],"updatePoint":{"line":37,"column":45},"line":37,"code":"  it('shows weekday when any day of the month', () => {\n    expect(formatter(new Date('2020-03-03'))).toBe('Tue Mar 3');\n    expect(formatter(new Date('2020-03-15'))).toBe('Sun Mar 15');\n  });","file":"time-format/formatters/smartDateVerbose.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"exports modules","suites":["index"],"updatePoint":{"line":35,"column":21},"line":35,"code":"  it('exports modules', () => {\n    [\n      createD3TimeFormatter,\n      createMultiFormatter,\n      formatTime,\n      getTimeFormatter,\n      getTimeFormatterRegistry,\n      LOCAL_PREFIX,\n      PREVIEW_TIME,\n      smartDateFormatter,\n      smartDateVerboseFormatter,\n      TimeFormats,\n      TimeFormatter,\n    ].forEach(x => expect(x).toBeDefined());\n  });","file":"time-format/index.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"requires config.id","suites":["TimeFormatter","new TimeFormatter(config)"],"updatePoint":{"line":24,"column":26},"line":24,"code":"    it('requires config.id', () => {\n      expect(\n        () =>\n          // @ts-ignore -- intentionally pass invalid input\n          new TimeFormatter({\n            formatFunc: () => 'test',\n          }),\n      ).toThrow();\n    });","file":"time-format/TimeFormatter.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"requires config.formatFunc","suites":["TimeFormatter","new TimeFormatter(config)"],"updatePoint":{"line":33,"column":34},"line":33,"code":"    it('requires config.formatFunc', () => {\n      expect(\n        () =>\n          // @ts-ignore -- intentionally pass invalid input\n          new TimeFormatter({\n            id: 'my_format',\n          }),\n      ).toThrow();\n    });","file":"time-format/TimeFormatter.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"returns formatted value","suites":["TimeFormatter","formatter is also a format function itself"],"updatePoint":{"line":48,"column":31},"line":48,"code":"    it('returns formatted value', () => {\n      expect(formatter(PREVIEW_TIME)).toEqual('2017');\n    });","file":"time-format/TimeFormatter.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"formatter(value) is the same with formatter.format(value)","suites":["TimeFormatter","formatter is also a format function itself"],"updatePoint":{"line":51,"column":65},"line":51,"code":"    it('formatter(value) is the same with formatter.format(value)', () => {\n      const value = PREVIEW_TIME;\n      expect(formatter(value)).toEqual(formatter.format(value));\n    });","file":"time-format/TimeFormatter.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"handles null","suites":["TimeFormatter",".format(value)"],"updatePoint":{"line":61,"column":20},"line":61,"code":"    it('handles null', () => {\n      expect(formatter.format(null)).toEqual('null');\n    });","file":"time-format/TimeFormatter.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"handles undefined","suites":["TimeFormatter",".format(value)"],"updatePoint":{"line":64,"column":25},"line":64,"code":"    it('handles undefined', () => {\n      expect(formatter.format(undefined)).toEqual('undefined');\n    });","file":"time-format/TimeFormatter.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"handles number, treating it as a timestamp","suites":["TimeFormatter",".format(value)"],"updatePoint":{"line":67,"column":50},"line":67,"code":"    it('handles number, treating it as a timestamp', () => {\n      expect(formatter.format(PREVIEW_TIME.getTime())).toEqual('2017');\n    });","file":"time-format/TimeFormatter.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"otherwise returns formatted value","suites":["TimeFormatter",".format(value)"],"updatePoint":{"line":70,"column":41},"line":70,"code":"    it('otherwise returns formatted value', () => {\n      expect(formatter.format(PREVIEW_TIME)).toEqual('2017');\n    });","file":"time-format/TimeFormatter.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"returns string comparing value before and after formatting","suites":["TimeFormatter",".preview(value)"],"updatePoint":{"line":79,"column":66},"line":79,"code":"    it('returns string comparing value before and after formatting', () => {\n      const time = new Date(Date.UTC(2018, 10, 21, 22, 11, 44));\n      expect(formatter.preview(time)).toEqual(\n        'Wed, 21 Nov 2018 22:11:44 GMT => 2018',\n      );\n    });","file":"time-format/TimeFormatter.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"uses the default preview value if not specified","suites":["TimeFormatter",".preview(value)"],"updatePoint":{"line":85,"column":55},"line":85,"code":"    it('uses the default preview value if not specified', () => {\n      expect(formatter.preview()).toEqual(\n        'Tue, 14 Feb 2017 11:22:33 GMT => 2017',\n      );\n    });","file":"time-format/TimeFormatter.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"creates and returns a new formatter if does not exist","suites":["TimeFormatterRegistry",".get(format)"],"updatePoint":{"line":29,"column":61},"line":29,"code":"    it('creates and returns a new formatter if does not exist', () => {\n      const formatter = registry.get(TimeFormats.DATABASE_DATETIME);\n      expect(formatter).toBeInstanceOf(TimeFormatter);\n      expect(formatter.format(PREVIEW_TIME)).toEqual('2017-02-14 11:22:33');\n    });","file":"time-format/TimeFormatterRegistry.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"returns an existing formatter if already exists","suites":["TimeFormatterRegistry",".get(format)"],"updatePoint":{"line":34,"column":55},"line":34,"code":"    it('returns an existing formatter if already exists', () => {\n      const formatter = registry.get(TimeFormats.TIME);\n      const formatter2 = registry.get(TimeFormats.TIME);\n      expect(formatter).toBe(formatter2);\n    });","file":"time-format/TimeFormatterRegistry.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"falls back to default format if format is not specified","suites":["TimeFormatterRegistry",".get(format)"],"updatePoint":{"line":39,"column":63},"line":39,"code":"    it('falls back to default format if format is not specified', () => {\n      registry.setDefaultKey(TimeFormats.INTERNATIONAL_DATE);\n      const formatter = registry.get();\n      expect(formatter.format(PREVIEW_TIME)).toEqual('14/02/2017');\n    });","file":"time-format/TimeFormatterRegistry.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"falls back to default format if format is null","suites":["TimeFormatterRegistry",".get(format)"],"updatePoint":{"line":44,"column":54},"line":44,"code":"    it('falls back to default format if format is null', () => {\n      registry.setDefaultKey(TimeFormats.INTERNATIONAL_DATE);\n      // @ts-ignore\n      const formatter = registry.get(null);\n      expect(formatter.format(PREVIEW_TIME)).toEqual('14/02/2017');\n    });","file":"time-format/TimeFormatterRegistry.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"falls back to default format if format is undefined","suites":["TimeFormatterRegistry",".get(format)"],"updatePoint":{"line":50,"column":59},"line":50,"code":"    it('falls back to default format if format is undefined', () => {\n      registry.setDefaultKey(TimeFormats.INTERNATIONAL_DATE);\n      const formatter = registry.get(undefined);\n      expect(formatter.format(PREVIEW_TIME)).toEqual('14/02/2017');\n    });","file":"time-format/TimeFormatterRegistry.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"falls back to default format if format is empty string","suites":["TimeFormatterRegistry",".get(format)"],"updatePoint":{"line":55,"column":62},"line":55,"code":"    it('falls back to default format if format is empty string', () => {\n      registry.setDefaultKey(TimeFormats.INTERNATIONAL_DATE);\n      const formatter = registry.get('');\n      expect(formatter.format(PREVIEW_TIME)).toEqual('14/02/2017');\n    });","file":"time-format/TimeFormatterRegistry.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"removes leading and trailing spaces from format","suites":["TimeFormatterRegistry",".get(format)"],"updatePoint":{"line":60,"column":55},"line":60,"code":"    it('removes leading and trailing spaces from format', () => {\n      const formatter = registry.get(' %Y ');\n      expect(formatter).toBeInstanceOf(TimeFormatter);\n      expect(formatter.format(PREVIEW_TIME)).toEqual('2017');\n    });","file":"time-format/TimeFormatterRegistry.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"return the value with the specified format","suites":["TimeFormatterRegistry",".format(format, value)"],"updatePoint":{"line":67,"column":50},"line":67,"code":"    it('return the value with the specified format', () => {\n      expect(registry.format(TimeFormats.US_DATE, PREVIEW_TIME)).toEqual(\n        '02/14/2017',\n      );\n      expect(registry.format(TimeFormats.TIME, PREVIEW_TIME)).toEqual(\n        '11:22:33',\n      );\n    });","file":"time-format/TimeFormatterRegistry.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"falls back to the default formatter if the format is undefined","suites":["TimeFormatterRegistry",".format(format, value)"],"updatePoint":{"line":75,"column":70},"line":75,"code":"    it('falls back to the default formatter if the format is undefined', () => {\n      expect(registry.format(undefined, PREVIEW_TIME)).toEqual(\n        '2017-02-14 11:22:33',\n      );\n    });","file":"time-format/TimeFormatterRegistry.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"returns a TimeFormatterRegistry","suites":["TimeFormatterRegistrySingleton","getTimeFormatterRegistry()"],"updatePoint":{"line":34,"column":39},"line":34,"code":"    it('returns a TimeFormatterRegistry', () => {\n      expect(getTimeFormatterRegistry()).toBeInstanceOf(TimeFormatterRegistry);\n    });","file":"time-format/TimeFormatterRegistrySingleton.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"returns a format function","suites":["TimeFormatterRegistrySingleton","getTimeFormatter(format)"],"updatePoint":{"line":39,"column":33},"line":39,"code":"    it('returns a format function', () => {\n      const format = getTimeFormatter('%d/%m/%Y');\n      expect(format(PREVIEW_TIME)).toEqual('14/02/2017');\n    });","file":"time-format/TimeFormatterRegistrySingleton.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"falls back to default format if format is not specified","suites":["TimeFormatterRegistrySingleton","getTimeFormatter(format)"],"updatePoint":{"line":43,"column":63},"line":43,"code":"    it('falls back to default format if format is not specified', () => {\n      const format = getTimeFormatter();\n      expect(format(PREVIEW_TIME)).toEqual('2017-02-14 11:22:33');\n    });","file":"time-format/TimeFormatterRegistrySingleton.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"use local time when format string has LOCAL_PREFIX ()","suites":["TimeFormatterRegistrySingleton","getTimeFormatter(format)"],"updatePoint":{"line":47,"column":76},"line":47,"code":"    it(`use local time when format string has LOCAL_PREFIX (${LOCAL_PREFIX})`, () => {\n      const format = getTimeFormatter('local!%m-%d %H:%M');\n      expect(format(new Date(2019, 5, 18, 11, 23))).toEqual('06-18 11:23');\n    });","file":"time-format/TimeFormatterRegistrySingleton.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"returns the default formatter for that granularity","suites":["TimeFormatterRegistrySingleton","getTimeFormatterForGranularity(granularity?)"],"updatePoint":{"line":53,"column":58},"line":53,"code":"    it('returns the default formatter for that granularity', () => {\n      const date = new Date(Date.UTC(2020, 4, 10)); // May 10, 2020 is Sunday\n      expect(\n        getTimeFormatterForGranularity(TimeGranularity.DATE)(date),\n      ).toEqual('2020-05-10');\n    });","file":"time-format/TimeFormatterRegistrySingleton.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"format the given time range with specified format","suites":["TimeFormatterRegistrySingleton","formatTimeRange(format?, values)"],"updatePoint":{"line":61,"column":57},"line":61,"code":"    it('format the given time range with specified format', () => {\n      expect(\n        formatTimeRange('%m-%d', [\n          new Date(Date.UTC(2017, 1, 1)),\n          new Date(Date.UTC(2017, 1, 2)),\n        ]),\n      ).toEqual('02-01 — 02-02');\n    });","file":"time-format/TimeFormatterRegistrySingleton.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"show only one value if start and end are equal after formatting","suites":["TimeFormatterRegistrySingleton","formatTimeRange(format?, values)"],"updatePoint":{"line":69,"column":71},"line":69,"code":"    it('show only one value if start and end are equal after formatting', () => {\n      expect(\n        formatTimeRange('%m-%d', [\n          new Date(Date.UTC(2017, 1, 1)),\n          new Date(Date.UTC(2017, 1, 1, 10)),\n        ]),\n      ).toEqual('02-01');\n    });","file":"time-format/TimeFormatterRegistrySingleton.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"falls back to default format if format is not specified","suites":["TimeFormatterRegistrySingleton","formatTimeRange(format?, values)"],"updatePoint":{"line":77,"column":63},"line":77,"code":"    it('falls back to default format if format is not specified', () => {\n      expect(\n        formatTimeRange(undefined, [\n          new Date(Date.UTC(2017, 1, 1)),\n          new Date(Date.UTC(2017, 1, 2)),\n        ]),\n      ).toEqual('2017-02-01 00:00:00 — 2017-02-02 00:00:00');\n    });","file":"time-format/TimeFormatterRegistrySingleton.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"format the given time using the specified format","suites":["TimeFormatterRegistrySingleton","formatTime(format?, value, granularity?)","without granularity"],"updatePoint":{"line":88,"column":58},"line":88,"code":"      it('format the given time using the specified format', () => {\n        const output = formatTime('%Y-%m-%d', PREVIEW_TIME);\n        expect(output).toEqual('2017-02-14');\n      });","file":"time-format/TimeFormatterRegistrySingleton.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"falls back to the default formatter if the format is undefined","suites":["TimeFormatterRegistrySingleton","formatTime(format?, value, granularity?)","without granularity"],"updatePoint":{"line":92,"column":72},"line":92,"code":"      it('falls back to the default formatter if the format is undefined', () => {\n        expect(formatTime(undefined, PREVIEW_TIME)).toEqual(\n          '2017-02-14 11:22:33',\n        );\n      });","file":"time-format/TimeFormatterRegistrySingleton.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"format the given time using specified format","suites":["TimeFormatterRegistrySingleton","formatTime(format?, value, granularity?)","with granularity"],"updatePoint":{"line":99,"column":54},"line":99,"code":"      it('format the given time using specified format', () => {\n        const output = formatTime(\n          '%-m/%d',\n          new Date(Date.UTC(2017, 4, 10)),\n          TimeGranularity.WEEK,\n        );\n        expect(output).toEqual('5/10 — 5/16');\n      });","file":"time-format/TimeFormatterRegistrySingleton.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"format the given time using default format if format is not specified","suites":["TimeFormatterRegistrySingleton","formatTime(format?, value, granularity?)","with granularity"],"updatePoint":{"line":107,"column":79},"line":107,"code":"      it('format the given time using default format if format is not specified', () => {\n        const date = new Date(Date.UTC(2020, 4, 10)); // May 10, 2020 is Sunday\n        expect(formatTime(undefined, date, TimeGranularity.DATE)).toEqual(\n          '2020-05-10',\n        );\n        expect(formatTime(undefined, date, TimeGranularity.SECOND)).toEqual(\n          '2020-05-10 00:00:00',\n        );\n        expect(formatTime(undefined, date, TimeGranularity.MINUTE)).toEqual(\n          '2020-05-10 00:00',\n        );\n        expect(\n          formatTime(undefined, date, TimeGranularity.FIVE_MINUTES),\n        ).toEqual('2020-05-10 00:00 — 2020-05-10 00:04');\n        expect(\n          formatTime(undefined, date, TimeGranularity.TEN_MINUTES),\n        ).toEqual('2020-05-10 00:00 — 2020-05-10 00:09');\n        expect(\n          formatTime(undefined, date, TimeGranularity.FIFTEEN_MINUTES),\n        ).toEqual('2020-05-10 00:00 — 2020-05-10 00:14');\n        expect(\n          formatTime(undefined, date, TimeGranularity.THIRTY_MINUTES),\n        ).toEqual('2020-05-10 00:00 — 2020-05-10 00:29');\n        expect(formatTime(undefined, date, TimeGranularity.HOUR)).toEqual(\n          '2020-05-10 00:00',\n        );\n        expect(formatTime(undefined, date, TimeGranularity.DAY)).toEqual(\n          '2020-05-10',\n        );\n        expect(formatTime(undefined, date, TimeGranularity.WEEK)).toEqual(\n          '2020-05-10 — 2020-05-16',\n        );\n        expect(\n          formatTime(undefined, date, TimeGranularity.WEEK_STARTING_SUNDAY),\n        ).toEqual('2020-05-10 — 2020-05-16');\n        expect(\n          formatTime(\n            undefined,\n            new Date(Date.UTC(2020, 4, 11)),\n            TimeGranularity.WEEK_STARTING_MONDAY,\n          ),\n        ).toEqual('2020-05-11 — 2020-05-17');\n        expect(\n          formatTime(\n            undefined,\n            new Date(Date.UTC(2020, 4, 10)),\n            TimeGranularity.WEEK_ENDING_SUNDAY,\n          ),\n        ).toEqual('2020-05-04 — 2020-05-10');\n        expect(\n          formatTime(\n            undefined,\n            new Date(Date.UTC(2020, 4, 9)),\n            TimeGranularity.WEEK_ENDING_SATURDAY,\n          ),\n        ).toEqual('2020-05-03 — 2020-05-09');\n        expect(\n          formatTime(\n            undefined,\n            new Date(Date.UTC(2020, 3, 1)),\n            TimeGranularity.MONTH,\n          ),\n        ).toEqual('Apr 2020');\n        expect(\n          formatTime(\n            undefined,\n            new Date(Date.UTC(2020, 3, 1)),\n            TimeGranularity.QUARTER,\n          ),\n        ).toEqual('2020 Q2');\n        expect(\n          formatTime(\n            undefined,\n            new Date(Date.UTC(2020, 0, 1)),\n            TimeGranularity.YEAR,\n          ),\n        ).toEqual('2020');\n      });","file":"time-format/TimeFormatterRegistrySingleton.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"creates UTC time when mode===\"utc\"","suites":["createTime(mode, year, month, date, hours, minutes, seconds, milliseconds)","mode"],"updatePoint":{"line":24,"column":42},"line":24,"code":"    it('creates UTC time when mode===\"utc\"', () => {\n      const time = createTime('utc', 2020, 5, 15);\n      expect(time.getUTCFullYear()).toEqual(2020);\n      expect(time.getUTCMonth()).toEqual(5);\n      expect(time.getUTCDate()).toEqual(15);\n    });","file":"time-format/utils/createTime.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"creates local time when mode===\"local\"","suites":["createTime(mode, year, month, date, hours, minutes, seconds, milliseconds)","mode"],"updatePoint":{"line":30,"column":46},"line":30,"code":"    it('creates local time when mode===\"local\"', () => {\n      const time = createTime('local', 2020, 5, 15);\n      expect(time.getFullYear()).toEqual(2020);\n      expect(time.getMonth()).toEqual(5);\n      expect(time.getDate()).toEqual(15);\n    });","file":"time-format/utils/createTime.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"sets all the date parts","suites":["createTime(mode, year, month, date, hours, minutes, seconds, milliseconds)","mode"],"updatePoint":{"line":37,"column":29},"line":37,"code":"  it('sets all the date parts', () => {\n    const time = createTime('local', 2020, 5, 15, 1, 2, 3, 4);\n    expect(time.getFullYear()).toEqual(2020);\n    expect(time.getMonth()).toEqual(5);\n    expect(time.getDate()).toEqual(15);\n    expect(time.getHours()).toEqual(1);\n    expect(time.getMinutes()).toEqual(2);\n    expect(time.getSeconds()).toEqual(3);\n    expect(time.getMilliseconds()).toEqual(4);\n  });","file":"time-format/utils/createTime.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"sets default values for date parts","suites":["createTime(mode, year, month, date, hours, minutes, seconds, milliseconds)","mode"],"updatePoint":{"line":47,"column":40},"line":47,"code":"  it('sets default values for date parts', () => {\n    const time = createTime('utc', 2020);\n    expect(time.getUTCMonth()).toEqual(0);\n    expect(time.getUTCDate()).toEqual(1);\n    expect(time.getUTCHours()).toEqual(0);\n    expect(time.getUTCMinutes()).toEqual(0);\n    expect(time.getUTCSeconds()).toEqual(0);\n    expect(time.getUTCMilliseconds()).toEqual(0);\n  });","file":"time-format/utils/createTime.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"creates time range according to specified granularity","suites":["createTimeRangeFromGranularity(time, granularity, useLocalTime)","UTC time"],"updatePoint":{"line":70,"column":61},"line":70,"code":"    it('creates time range according to specified granularity', () => {\n      expect(testUTC(TimeGranularity.DATE, 2020, 4, 15)).toEqual(\n        '2020-05-15 00:00:00.000 — 2020-05-15 23:59:59.999',\n      );\n      expect(testUTC(TimeGranularity.SECOND, 2020, 4, 15)).toEqual(\n        '2020-05-15 00:00:00.000 — 2020-05-15 00:00:00.999',\n      );\n      expect(testUTC(TimeGranularity.MINUTE, 2020, 4, 15)).toEqual(\n        '2020-05-15 00:00:00.000 — 2020-05-15 00:00:59.999',\n      );\n      expect(testUTC(TimeGranularity.FIVE_MINUTES, 2020, 4, 15)).toEqual(\n        '2020-05-15 00:00:00.000 — 2020-05-15 00:04:59.999',\n      );\n      expect(testUTC(TimeGranularity.TEN_MINUTES, 2020, 4, 15)).toEqual(\n        '2020-05-15 00:00:00.000 — 2020-05-15 00:09:59.999',\n      );\n      expect(testUTC(TimeGranularity.FIFTEEN_MINUTES, 2020, 4, 15)).toEqual(\n        '2020-05-15 00:00:00.000 — 2020-05-15 00:14:59.999',\n      );\n      expect(testUTC(TimeGranularity.THIRTY_MINUTES, 2020, 4, 15)).toEqual(\n        '2020-05-15 00:00:00.000 — 2020-05-15 00:29:59.999',\n      );\n      expect(testUTC(TimeGranularity.HOUR, 2020, 4, 15)).toEqual(\n        '2020-05-15 00:00:00.000 — 2020-05-15 00:59:59.999',\n      );\n      expect(testUTC(TimeGranularity.DAY, 2020, 4, 15)).toEqual(\n        '2020-05-15 00:00:00.000 — 2020-05-15 23:59:59.999',\n      );\n      expect(testUTC(TimeGranularity.WEEK, 2020, 4, 15)).toEqual(\n        '2020-05-15 00:00:00.000 — 2020-05-21 23:59:59.999',\n      );\n      expect(\n        testUTC(TimeGranularity.WEEK_STARTING_SUNDAY, 2020, 4, 17),\n      ).toEqual('2020-05-17 00:00:00.000 — 2020-05-23 23:59:59.999');\n      expect(\n        testUTC(TimeGranularity.WEEK_STARTING_MONDAY, 2020, 4, 18),\n      ).toEqual('2020-05-18 00:00:00.000 — 2020-05-24 23:59:59.999');\n      expect(\n        testUTC(TimeGranularity.WEEK_ENDING_SATURDAY, 2020, 4, 16),\n      ).toEqual('2020-05-10 00:00:00.000 — 2020-05-16 23:59:59.999');\n      expect(testUTC(TimeGranularity.WEEK_ENDING_SUNDAY, 2020, 4, 17)).toEqual(\n        '2020-05-11 00:00:00.000 — 2020-05-17 23:59:59.999',\n      );\n      expect(testUTC(TimeGranularity.MONTH, 2020, 4, 1)).toEqual(\n        '2020-05-01 00:00:00.000 — 2020-05-31 23:59:59.999',\n      );\n      expect(testUTC(TimeGranularity.MONTH, 2020, 11, 1)).toEqual(\n        '2020-12-01 00:00:00.000 — 2020-12-31 23:59:59.999',\n      );\n      expect(testUTC(TimeGranularity.QUARTER, 2020, 3, 1)).toEqual(\n        '2020-04-01 00:00:00.000 — 2020-06-30 23:59:59.999',\n      );\n      expect(testUTC(TimeGranularity.QUARTER, 2020, 9, 1)).toEqual(\n        '2020-10-01 00:00:00.000 — 2020-12-31 23:59:59.999',\n      );\n      expect(testUTC(TimeGranularity.YEAR, 2020, 0, 1)).toEqual(\n        '2020-01-01 00:00:00.000 — 2020-12-31 23:59:59.999',\n      );\n    });","file":"time-format/utils/createTimeRangeFromGranularity.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"creates time range according to specified granularity","suites":["createTimeRangeFromGranularity(time, granularity, useLocalTime)","Local time"],"updatePoint":{"line":131,"column":61},"line":131,"code":"    it('creates time range according to specified granularity', () => {\n      expect(testLocal(TimeGranularity.DATE, 2020, 4, 15)).toEqual(\n        '2020-05-15 00:00:00.000 — 2020-05-15 23:59:59.999',\n      );\n      expect(testLocal(TimeGranularity.SECOND, 2020, 4, 15)).toEqual(\n        '2020-05-15 00:00:00.000 — 2020-05-15 00:00:00.999',\n      );\n      expect(testLocal(TimeGranularity.MINUTE, 2020, 4, 15)).toEqual(\n        '2020-05-15 00:00:00.000 — 2020-05-15 00:00:59.999',\n      );\n      expect(testLocal(TimeGranularity.FIVE_MINUTES, 2020, 4, 15)).toEqual(\n        '2020-05-15 00:00:00.000 — 2020-05-15 00:04:59.999',\n      );\n      expect(testLocal(TimeGranularity.TEN_MINUTES, 2020, 4, 15)).toEqual(\n        '2020-05-15 00:00:00.000 — 2020-05-15 00:09:59.999',\n      );\n      expect(testLocal(TimeGranularity.FIFTEEN_MINUTES, 2020, 4, 15)).toEqual(\n        '2020-05-15 00:00:00.000 — 2020-05-15 00:14:59.999',\n      );\n      expect(testLocal(TimeGranularity.THIRTY_MINUTES, 2020, 4, 15)).toEqual(\n        '2020-05-15 00:00:00.000 — 2020-05-15 00:29:59.999',\n      );\n      expect(testLocal(TimeGranularity.HOUR, 2020, 4, 15)).toEqual(\n        '2020-05-15 00:00:00.000 — 2020-05-15 00:59:59.999',\n      );\n      expect(testLocal(TimeGranularity.DAY, 2020, 4, 15)).toEqual(\n        '2020-05-15 00:00:00.000 — 2020-05-15 23:59:59.999',\n      );\n      expect(testLocal(TimeGranularity.WEEK, 2020, 4, 15)).toEqual(\n        '2020-05-15 00:00:00.000 — 2020-05-21 23:59:59.999',\n      );\n      expect(\n        testLocal(TimeGranularity.WEEK_STARTING_SUNDAY, 2020, 4, 17),\n      ).toEqual('2020-05-17 00:00:00.000 — 2020-05-23 23:59:59.999');\n      expect(\n        testLocal(TimeGranularity.WEEK_STARTING_MONDAY, 2020, 4, 18),\n      ).toEqual('2020-05-18 00:00:00.000 — 2020-05-24 23:59:59.999');\n      expect(\n        testLocal(TimeGranularity.WEEK_ENDING_SATURDAY, 2020, 4, 16),\n      ).toEqual('2020-05-10 00:00:00.000 — 2020-05-16 23:59:59.999');\n      expect(\n        testLocal(TimeGranularity.WEEK_ENDING_SUNDAY, 2020, 4, 17),\n      ).toEqual('2020-05-11 00:00:00.000 — 2020-05-17 23:59:59.999');\n      expect(testLocal(TimeGranularity.MONTH, 2020, 4, 1)).toEqual(\n        '2020-05-01 00:00:00.000 — 2020-05-31 23:59:59.999',\n      );\n      expect(testLocal(TimeGranularity.MONTH, 2020, 11, 1)).toEqual(\n        '2020-12-01 00:00:00.000 — 2020-12-31 23:59:59.999',\n      );\n      expect(testLocal(TimeGranularity.QUARTER, 2020, 3, 1)).toEqual(\n        '2020-04-01 00:00:00.000 — 2020-06-30 23:59:59.999',\n      );\n      expect(testLocal(TimeGranularity.QUARTER, 2020, 9, 1)).toEqual(\n        '2020-10-01 00:00:00.000 — 2020-12-31 23:59:59.999',\n      );\n      expect(testLocal(TimeGranularity.YEAR, 2020, 0, 1)).toEqual(\n        '2020-01-01 00:00:00.000 — 2020-12-31 23:59:59.999',\n      );\n    });","file":"time-format/utils/createTimeRangeFromGranularity.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"has isNotFirstDayOfWeekStartOnSunday","suites":["utils","utcUtils"],"updatePoint":{"line":27,"column":44},"line":27,"code":"    it('has isNotFirstDayOfWeekStartOnSunday', () => {\n      const date = new Date(Date.UTC(2018, 10, 19));\n      expect(utcUtils.isNotFirstDayOfWeekStartOnSunday(date)).toBeTruthy();\n      const date2 = new Date(Date.UTC(2018, 10, 18));\n      expect(utcUtils.isNotFirstDayOfWeekStartOnSunday(date2)).toBeFalsy();\n    });","file":"time-format/utils/d3Time.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"has isNotFirstDayOfWeekStartOnMonday","suites":["utils","utcUtils"],"updatePoint":{"line":33,"column":44},"line":33,"code":"    it('has isNotFirstDayOfWeekStartOnMonday', () => {\n      const date = new Date(Date.UTC(2018, 10, 20));\n      expect(utcUtils.isNotFirstDayOfWeekStartOnMonday(date)).toBeTruthy();\n      const date2 = new Date(Date.UTC(2018, 10, 19));\n      expect(utcUtils.isNotFirstDayOfWeekStartOnMonday(date2)).toBeFalsy();\n    });","file":"time-format/utils/d3Time.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"has isNotFirstDayOfWeekStartOnTuesday","suites":["utils","utcUtils"],"updatePoint":{"line":39,"column":45},"line":39,"code":"    it('has isNotFirstDayOfWeekStartOnTuesday', () => {\n      const date = new Date(Date.UTC(2018, 10, 21));\n      expect(utcUtils.isNotFirstDayOfWeekStartOnTuesday(date)).toBeTruthy();\n      const date2 = new Date(Date.UTC(2018, 10, 20));\n      expect(utcUtils.isNotFirstDayOfWeekStartOnTuesday(date2)).toBeFalsy();\n    });","file":"time-format/utils/d3Time.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"has isNotFirstDayOfWeekStartOnWednesday","suites":["utils","utcUtils"],"updatePoint":{"line":45,"column":47},"line":45,"code":"    it('has isNotFirstDayOfWeekStartOnWednesday', () => {\n      const date = new Date(Date.UTC(2018, 10, 22));\n      expect(utcUtils.isNotFirstDayOfWeekStartOnWednesday(date)).toBeTruthy();\n      const date2 = new Date(Date.UTC(2018, 10, 21));\n      expect(utcUtils.isNotFirstDayOfWeekStartOnWednesday(date2)).toBeFalsy();\n    });","file":"time-format/utils/d3Time.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"has isNotFirstDayOfWeekStartOnThursday","suites":["utils","utcUtils"],"updatePoint":{"line":51,"column":46},"line":51,"code":"    it('has isNotFirstDayOfWeekStartOnThursday', () => {\n      const date = new Date(Date.UTC(2018, 10, 23));\n      expect(utcUtils.isNotFirstDayOfWeekStartOnThursday(date)).toBeTruthy();\n      const date2 = new Date(Date.UTC(2018, 10, 22));\n      expect(utcUtils.isNotFirstDayOfWeekStartOnThursday(date2)).toBeFalsy();\n    });","file":"time-format/utils/d3Time.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"has isNotFirstDayOfWeekStartOnFriday","suites":["utils","utcUtils"],"updatePoint":{"line":57,"column":44},"line":57,"code":"    it('has isNotFirstDayOfWeekStartOnFriday', () => {\n      const date = new Date(Date.UTC(2018, 10, 24));\n      expect(utcUtils.isNotFirstDayOfWeekStartOnFriday(date)).toBeTruthy();\n      const date2 = new Date(Date.UTC(2018, 10, 23));\n      expect(utcUtils.isNotFirstDayOfWeekStartOnFriday(date2)).toBeFalsy();\n    });","file":"time-format/utils/d3Time.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"has isNotFirstDayOfWeekStartOnSaturday","suites":["utils","utcUtils"],"updatePoint":{"line":63,"column":46},"line":63,"code":"    it('has isNotFirstDayOfWeekStartOnSaturday', () => {\n      const date = new Date(Date.UTC(2018, 10, 25));\n      expect(utcUtils.isNotFirstDayOfWeekStartOnSaturday(date)).toBeTruthy();\n      const date2 = new Date(Date.UTC(2018, 10, 24));\n      expect(utcUtils.isNotFirstDayOfWeekStartOnSaturday(date2)).toBeFalsy();\n    });","file":"time-format/utils/d3Time.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"has isNotFirstDayOfWeekStartOnSunday","suites":["utils","localTimeUtils"],"updatePoint":{"line":71,"column":44},"line":71,"code":"    it('has isNotFirstDayOfWeekStartOnSunday', () => {\n      const date = new Date(2018, 10, 19);\n      expect(\n        localTimeUtils.isNotFirstDayOfWeekStartOnSunday(date),\n      ).toBeTruthy();\n      const date2 = new Date(2018, 10, 18);\n      expect(\n        localTimeUtils.isNotFirstDayOfWeekStartOnSunday(date2),\n      ).toBeFalsy();\n    });","file":"time-format/utils/d3Time.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"has isNotFirstDayOfWeekStartOnMonday","suites":["utils","localTimeUtils"],"updatePoint":{"line":81,"column":44},"line":81,"code":"    it('has isNotFirstDayOfWeekStartOnMonday', () => {\n      const date = new Date(2018, 10, 20);\n      expect(\n        localTimeUtils.isNotFirstDayOfWeekStartOnMonday(date),\n      ).toBeTruthy();\n      const date2 = new Date(2018, 10, 19);\n      expect(\n        localTimeUtils.isNotFirstDayOfWeekStartOnMonday(date2),\n      ).toBeFalsy();\n    });","file":"time-format/utils/d3Time.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"has isNotFirstDayOfWeekStartOnTuesday","suites":["utils","localTimeUtils"],"updatePoint":{"line":91,"column":45},"line":91,"code":"    it('has isNotFirstDayOfWeekStartOnTuesday', () => {\n      const date = new Date(2018, 10, 21);\n      expect(\n        localTimeUtils.isNotFirstDayOfWeekStartOnTuesday(date),\n      ).toBeTruthy();\n      const date2 = new Date(2018, 10, 20);\n      expect(\n        localTimeUtils.isNotFirstDayOfWeekStartOnTuesday(date2),\n      ).toBeFalsy();\n    });","file":"time-format/utils/d3Time.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"has isNotFirstDayOfWeekStartOnWednesday","suites":["utils","localTimeUtils"],"updatePoint":{"line":101,"column":47},"line":101,"code":"    it('has isNotFirstDayOfWeekStartOnWednesday', () => {\n      const date = new Date(2018, 10, 22);\n      expect(\n        localTimeUtils.isNotFirstDayOfWeekStartOnWednesday(date),\n      ).toBeTruthy();\n      const date2 = new Date(2018, 10, 21);\n      expect(\n        localTimeUtils.isNotFirstDayOfWeekStartOnWednesday(date2),\n      ).toBeFalsy();\n    });","file":"time-format/utils/d3Time.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"has isNotFirstDayOfWeekStartOnThursday","suites":["utils","localTimeUtils"],"updatePoint":{"line":111,"column":46},"line":111,"code":"    it('has isNotFirstDayOfWeekStartOnThursday', () => {\n      const date = new Date(2018, 10, 23);\n      expect(\n        localTimeUtils.isNotFirstDayOfWeekStartOnThursday(date),\n      ).toBeTruthy();\n      const date2 = new Date(2018, 10, 22);\n      expect(\n        localTimeUtils.isNotFirstDayOfWeekStartOnThursday(date2),\n      ).toBeFalsy();\n    });","file":"time-format/utils/d3Time.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"has isNotFirstDayOfWeekStartOnFriday","suites":["utils","localTimeUtils"],"updatePoint":{"line":121,"column":44},"line":121,"code":"    it('has isNotFirstDayOfWeekStartOnFriday', () => {\n      const date = new Date(2018, 10, 24);\n      expect(\n        localTimeUtils.isNotFirstDayOfWeekStartOnFriday(date),\n      ).toBeTruthy();\n      const date2 = new Date(2018, 10, 23);\n      expect(\n        localTimeUtils.isNotFirstDayOfWeekStartOnFriday(date2),\n      ).toBeFalsy();\n    });","file":"time-format/utils/d3Time.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"has isNotFirstDayOfWeekStartOnSaturday","suites":["utils","localTimeUtils"],"updatePoint":{"line":131,"column":46},"line":131,"code":"    it('has isNotFirstDayOfWeekStartOnSaturday', () => {\n      const date = new Date(2018, 10, 25);\n      expect(\n        localTimeUtils.isNotFirstDayOfWeekStartOnSaturday(date),\n      ).toBeTruthy();\n      const date2 = new Date(2018, 10, 24);\n      expect(\n        localTimeUtils.isNotFirstDayOfWeekStartOnSaturday(date2),\n      ).toBeFalsy();\n    });","file":"time-format/utils/d3Time.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"normalizeTimestamp should normalize typical timestamps","suites":[],"updatePoint":{"line":22,"column":60},"line":22,"code":"test('normalizeTimestamp should normalize typical timestamps', () => {\n  expect(normalizeTimestamp('2023-03-11 08:26:52.695 UTC')).toEqual(\n    '2023-03-11T08:26:52.695Z',\n  );\n  expect(normalizeTimestamp('2023-03-11 08:26:52.695 Europe/Helsinki')).toEqual(\n    '2023-03-11T08:26:52.695Z',\n  );\n  expect(normalizeTimestamp('2023-03-11T08:26:52.695 UTC')).toEqual(\n    '2023-03-11T08:26:52.695Z',\n  );\n  expect(normalizeTimestamp('2023-03-11T08:26:52.695')).toEqual(\n    '2023-03-11T08:26:52.695Z',\n  );\n  expect(normalizeTimestamp('2023-03-11 08:26:52')).toEqual(\n    '2023-03-11T08:26:52Z',\n  );\n});","file":"time-format/utils/normalizeTimestamp.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"normalizeTimestamp should return unmatched timestamps as-is","suites":[],"updatePoint":{"line":40,"column":65},"line":40,"code":"test('normalizeTimestamp should return unmatched timestamps as-is', () => {\n  expect(normalizeTimestamp('abcd')).toEqual('abcd');\n  expect(normalizeTimestamp('03/11/2023')).toEqual('03/11/2023');\n});","file":"time-format/utils/normalizeTimestamp.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"exports configure()","suites":["index"],"updatePoint":{"line":23,"column":25},"line":23,"code":"  it('exports configure()', () => {\n    expect(configure).toBeDefined();\n    expect(configure).toBeInstanceOf(Function);\n  });","file":"translation/index.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"exports t()","suites":["index"],"updatePoint":{"line":27,"column":17},"line":27,"code":"  it('exports t()', () => {\n    expect(t).toBeDefined();\n    expect(t).toBeInstanceOf(Function);\n  });","file":"translation/index.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"exports tn()","suites":["index"],"updatePoint":{"line":31,"column":18},"line":31,"code":"  it('exports tn()', () => {\n    expect(tn).toBeDefined();\n    expect(tn).toBeInstanceOf(Function);\n  });","file":"translation/index.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"initializes when config is not specified","suites":["Translator","new Translator(config)"],"updatePoint":{"line":53,"column":48},"line":53,"code":"    it('initializes when config is not specified', () => {\n      expect(new Translator()).toBeInstanceOf(Translator);\n    });","file":"translation/Translator.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"initializes when config is an empty object","suites":["Translator","new Translator(config)"],"updatePoint":{"line":56,"column":50},"line":56,"code":"    it('initializes when config is an empty object', () => {\n      expect(new Translator({})).toBeInstanceOf(Translator);\n    });","file":"translation/Translator.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"initializes when config is specified","suites":["Translator","new Translator(config)"],"updatePoint":{"line":59,"column":44},"line":59,"code":"    it('initializes when config is specified', () => {\n      expect(\n        new Translator({\n          languagePack: languagePackZh,\n        }),\n      ).toBeInstanceOf(Translator);\n    });","file":"translation/Translator.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"returns original text for unknown text","suites":["Translator",".translate(input, ...args)"],"updatePoint":{"line":71,"column":46},"line":71,"code":"    it('returns original text for unknown text', () => {\n      expect(translator.translate('abc')).toEqual('abc');\n    });","file":"translation/Translator.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"translates simple text","suites":["Translator",".translate(input, ...args)"],"updatePoint":{"line":74,"column":30},"line":74,"code":"    it('translates simple text', () => {\n      expect(translator.translate('second')).toEqual('秒');\n    });","file":"translation/Translator.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"translates template text with an argument","suites":["Translator",".translate(input, ...args)"],"updatePoint":{"line":77,"column":49},"line":77,"code":"    it('translates template text with an argument', () => {\n      expect(translator.translate('Copy of %s', 1)).toEqual('1 的副本');\n      expect(translator.translate('Copy of %s', 2)).toEqual('2 的副本');\n    });","file":"translation/Translator.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"translates template text with multiple arguments","suites":["Translator",".translate(input, ...args)"],"updatePoint":{"line":81,"column":56},"line":81,"code":"    it('translates template text with multiple arguments', () => {\n      expect(translator.translate('test %d %d', 1, 2)).toEqual('test 1 2');\n    });","file":"translation/Translator.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"returns original text for unknown text","suites":["Translator",".translateWithNumber(singular, plural, num, ...args)"],"updatePoint":{"line":89,"column":46},"line":89,"code":"    it('returns original text for unknown text', () => {\n      expect(translator.translateWithNumber('fish', 'fishes', 1)).toEqual(\n        'fish',\n      );\n    });","file":"translation/Translator.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"uses 0 as default value","suites":["Translator",".translateWithNumber(singular, plural, num, ...args)"],"updatePoint":{"line":94,"column":31},"line":94,"code":"    it('uses 0 as default value', () => {\n      expect(translator.translateWithNumber('box', 'boxes')).toEqual('boxes');\n    });","file":"translation/Translator.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"translates simple text","suites":["Translator",".translateWithNumber(singular, plural, num, ...args)"],"updatePoint":{"line":97,"column":30},"line":97,"code":"    it('translates simple text', () => {\n      expect(translator.translateWithNumber('second', 'seconds', 1)).toEqual(\n        '秒',\n      );\n    });","file":"translation/Translator.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"translates template text with an argument","suites":["Translator",".translateWithNumber(singular, plural, num, ...args)"],"updatePoint":{"line":102,"column":49},"line":102,"code":"    it('translates template text with an argument', () => {\n      expect(\n        translator.translateWithNumber('Copy of %s', 'Copies of %s', 12, 12),\n      ).toEqual('12 的副本');\n    });","file":"translation/Translator.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"translates template text with multiple arguments","suites":["Translator",".translateWithNumber(singular, plural, num, ...args)"],"updatePoint":{"line":107,"column":56},"line":107,"code":"    it('translates template text with multiple arguments', () => {\n      expect(\n        translator.translateWithNumber(\n          '%d glass %s',\n          '%d glasses %s',\n          3,\n          3,\n          'abc',\n        ),\n      ).toEqual('3 glasses abc');\n    });","file":"translation/Translator.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"translates template text with an argument","suites":["Translator",".translateWithNumber(key, num, ...args)"],"updatePoint":{"line":123,"column":49},"line":123,"code":"    it('translates template text with an argument', () => {\n      expect(translator.translateWithNumber('%s copies', 1)).toEqual('1 copy');\n      expect(translator.translateWithNumber('%s copies', 2)).toEqual(\n        '2 copies',\n      );\n    });","file":"translation/Translator.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"can add new translation","suites":["Translator",".addTranslation(...)"],"updatePoint":{"line":133,"column":31},"line":133,"code":"    it('can add new translation', () => {\n      addTranslation('haha', ['Hahaha']);\n      expect(t('haha')).toEqual('Hahaha');\n    });","file":"translation/Translator.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"can add new translations","suites":["Translator",".addTranslations(...)"],"updatePoint":{"line":140,"column":32},"line":140,"code":"    it('can add new translations', () => {\n      addTranslations({\n        foo: ['bar', '%s bars'],\n        bar: ['foo'],\n      });\n      // previous translation still exists\n      expect(t('haha')).toEqual('Hahaha');\n      // new translations work as expected\n      expect(tn('foo', 1)).toEqual('bar');\n      expect(tn('foo', 2)).toEqual('2 bars');\n      expect(tn('bar', 2)).toEqual('bar');\n    });","file":"translation/Translator.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"throw warning on invalid arguments","suites":["Translator",".addTranslations(...)"],"updatePoint":{"line":152,"column":42},"line":152,"code":"    it('throw warning on invalid arguments', () => {\n      expect(() => addTranslations(undefined as never)).toThrow(\n        'Invalid translations',\n      );\n      expect(tn('bar', '2 foo', 2)).toEqual('2 foo');\n    });","file":"translation/Translator.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"throw warning on duplicates","suites":["Translator",".addTranslations(...)"],"updatePoint":{"line":158,"column":35},"line":158,"code":"    it('throw warning on duplicates', () => {\n      expect(() => {\n        addTranslations({\n          haha: ['this is duplicate'],\n        });\n      }).toThrow('Duplicate translation key \"haha\"');\n      expect(t('haha')).toEqual('Hahaha');\n    });","file":"translation/Translator.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"can add new translations for language","suites":["Translator",".addLocaleData(...)"],"updatePoint":{"line":169,"column":45},"line":169,"code":"    it('can add new translations for language', () => {\n      addLocaleData({\n        en: {\n          yes: ['ok'],\n        },\n      });\n      expect(t('yes')).toEqual('ok');\n    });","file":"translation/Translator.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"throw on unknown locale","suites":["Translator",".addLocaleData(...)"],"updatePoint":{"line":177,"column":31},"line":177,"code":"    it('throw on unknown locale', () => {\n      expect(() => {\n        addLocaleData({\n          zh: {\n            haha: ['yes'],\n          },\n        });\n      }).toThrow('Invalid locale data');\n    });","file":"translation/Translator.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"missing locale falls back to English","suites":["Translator",".addLocaleData(...)"],"updatePoint":{"line":186,"column":44},"line":186,"code":"    it('missing locale falls back to English', () => {\n      configure({\n        languagePack: languagePackZh,\n      });\n      // expect and error because zh is not current locale\n      expect(() => {\n        addLocaleData({\n          en: {\n            yes: ['OK'],\n          },\n        });\n      }).not.toThrow();\n      expect(t('yes')).toEqual('OK');\n    });","file":"translation/Translator.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"returns untranslated input and issues a warning","suites":["TranslatorSingleton","before configure()","t()"],"updatePoint":{"line":35,"column":57},"line":35,"code":"      it('returns untranslated input and issues a warning', () => {\n        const restoreConsole = mockConsole();\n        expect(t('second')).toEqual('second');\n        expect(console.warn).toHaveBeenCalled();\n        restoreConsole();\n      });","file":"translation/TranslatorSingleton.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"returns untranslated input and issues a warning","suites":["TranslatorSingleton","before configure()","tn()"],"updatePoint":{"line":43,"column":57},"line":43,"code":"      it('returns untranslated input and issues a warning', () => {\n        const restoreConsole = mockConsole();\n        expect(tn('ox', 'oxen', 2)).toEqual('oxen');\n        expect(console.warn).toHaveBeenCalled();\n        restoreConsole();\n      });","file":"translation/TranslatorSingleton.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"creates and returns a translator","suites":["TranslatorSingleton","after configure()","configure()"],"updatePoint":{"line":53,"column":42},"line":53,"code":"      it('creates and returns a translator', () => {\n        expect(configure()).toBeInstanceOf(Translator);\n      });","file":"translation/TranslatorSingleton.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"after configure() returns translated text","suites":["TranslatorSingleton","after configure()","t()"],"updatePoint":{"line":58,"column":51},"line":58,"code":"      it('after configure() returns translated text', () => {\n        configure({\n          languagePack: languagePackZh,\n        });\n        expect(t('second')).toEqual('秒');\n      });","file":"translation/TranslatorSingleton.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"after configure() returns translated text with singular/plural","suites":["TranslatorSingleton","after configure()","tn()"],"updatePoint":{"line":66,"column":72},"line":66,"code":"      it('after configure() returns translated text with singular/plural', () => {\n        configure({\n          languagePack: languagePackEn,\n        });\n        expect(tn('ox', 'oxen', 2)).toEqual('oxen');\n      });","file":"translation/TranslatorSingleton.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should be reset translation setting","suites":["TranslatorSingleton","after configure()","tn()"],"updatePoint":{"line":74,"column":41},"line":74,"code":"  it('should be reset translation setting', () => {\n    configure();\n    expect(t('second')).toEqual('second');\n\n    resetTranslation();\n    const restoreConsole = mockConsole();\n    expect(t('second')).toEqual('second');\n    resetTranslation();\n    expect(t('second')).toEqual('second');\n    expect(console.warn).toBeCalledTimes(2);\n    restoreConsole();\n  });","file":"translation/TranslatorSingleton.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should get instance of getExtensionsRegistry","suites":[],"updatePoint":{"line":21,"column":50},"line":21,"code":"test('should get instance of getExtensionsRegistry', () => {\n  expect(getExtensionsRegistry().name).toBe('ExtensionsRegistry');\n});","file":"ui-overrides/ExtensionsRegistry.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"returns undefined for undefined input","suites":["convertKeysToCamelCase(object)"],"updatePoint":{"line":23,"column":43},"line":23,"code":"  it('returns undefined for undefined input', () => {\n    expect(convertKeysToCamelCase(undefined)).toBeUndefined();\n  });","file":"utils/convertKeysToCamelCase.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"returns null for null input","suites":["convertKeysToCamelCase(object)"],"updatePoint":{"line":26,"column":33},"line":26,"code":"  it('returns null for null input', () => {\n    expect(convertKeysToCamelCase(null)).toBeNull();\n  });","file":"utils/convertKeysToCamelCase.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"returns a new object that has all keys in camelCase","suites":["convertKeysToCamelCase(object)"],"updatePoint":{"line":29,"column":57},"line":29,"code":"  it('returns a new object that has all keys in camelCase', () => {\n    const input = {\n      is_happy: true,\n      'is-angry': false,\n      isHungry: false,\n    };\n    expect(convertKeysToCamelCase(input)).toEqual({\n      isHappy: true,\n      isAngry: false,\n      isHungry: false,\n    });\n  });","file":"utils/convertKeysToCamelCase.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"throws error if input is not a plain object","suites":["convertKeysToCamelCase(object)"],"updatePoint":{"line":41,"column":49},"line":41,"code":"  it('throws error if input is not a plain object', () => {\n    expect(() => {\n      convertKeysToCamelCase({});\n    }).not.toThrow();\n    expect(() => {\n      convertKeysToCamelCase('');\n    }).toThrow();\n    expect(() => {\n      convertKeysToCamelCase(new Map());\n    }).toThrow();\n  });","file":"utils/convertKeysToCamelCase.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"handle inputs correctly","suites":["ensureIsArray"],"updatePoint":{"line":22,"column":29},"line":22,"code":"  it('handle inputs correctly', () => {\n    expect(ensureIsArray(undefined)).toEqual([]);\n    expect(ensureIsArray(null)).toEqual([]);\n    expect(ensureIsArray([])).toEqual([]);\n    expect(ensureIsArray('my_metric')).toEqual(['my_metric']);\n    expect(ensureIsArray(['my_metric'])).toEqual(['my_metric']);\n    expect(ensureIsArray(['my_metric_1', 'my_metric_2'])).toEqual([\n      'my_metric_1',\n      'my_metric_2',\n    ]);\n  });","file":"utils/ensureIsArray.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"handle inputs correctly","suites":["ensureIsInt"],"updatePoint":{"line":22,"column":29},"line":22,"code":"  it('handle inputs correctly', () => {\n    expect(ensureIsInt(undefined, 0)).toEqual(0);\n    expect(ensureIsInt('abc', 1)).toEqual(1);\n    expect(ensureIsInt(undefined)).toEqual(NaN);\n    expect(ensureIsInt('abc')).toEqual(NaN);\n    expect(ensureIsInt('12.5')).toEqual(12);\n    expect(ensureIsInt(12)).toEqual(12);\n    expect(ensureIsInt(12, 0)).toEqual(12);\n  });","file":"utils/ensureIsInt.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"returns false and raises console error if feature flags have not been initialized","suites":[],"updatePoint":{"line":22,"column":85},"line":22,"code":"it('returns false and raises console error if feature flags have not been initialized', () => {\n  mockConsole();\n  Object.defineProperty(window, 'featureFlags', {\n    value: undefined,\n  });\n\n  expect(isFeatureEnabled(FeatureFlag.DRILL_BY)).toEqual(false);\n  expect(console.error).toHaveBeenCalled();\n  // @ts-expect-error\n  expect(console.error.mock.calls[0][0]).toEqual(\n    'Failed to query feature flag DRILL_BY',\n  );\n});","file":"utils/featureFlag.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"returns false for unset feature flag","suites":[],"updatePoint":{"line":36,"column":40},"line":36,"code":"it('returns false for unset feature flag', () => {\n  Object.defineProperty(window, 'featureFlags', {\n    value: {},\n  });\n\n  expect(isFeatureEnabled(FeatureFlag.DRILL_BY)).toEqual(false);\n});","file":"utils/featureFlag.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"returns true for set feature flag","suites":[],"updatePoint":{"line":44,"column":37},"line":44,"code":"it('returns true for set feature flag', () => {\n  Object.defineProperty(window, 'featureFlags', {\n    value: {\n      CLIENT_CACHE: true,\n    },\n  });\n\n  expect(isFeatureEnabled(FeatureFlag.CLIENT_CACHE)).toEqual(true);\n});","file":"utils/featureFlag.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"Returns null if Selection object is null","suites":[],"updatePoint":{"line":21,"column":46},"line":21,"code":"test('Returns null if Selection object is null', () => {\n  jest.spyOn(window, 'getSelection').mockImplementationOnce(() => null);\n  expect(getSelectedText()).toEqual(undefined);\n  jest.restoreAllMocks();\n});","file":"utils/getSelectedText.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"Returns selection text if Selection object is not null","suites":[],"updatePoint":{"line":27,"column":60},"line":27,"code":"test('Returns selection text if Selection object is not null', () => {\n  jest\n    .spyOn(window, 'getSelection')\n    // @ts-ignore\n    .mockImplementationOnce(() => ({ toString: () => 'test string' }));\n  expect(getSelectedText()).toEqual('test string');\n  jest.restoreAllMocks();\n});","file":"utils/getSelectedText.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"returns true if value is not null and not undefined","suites":["isDefined(value)"],"updatePoint":{"line":23,"column":57},"line":23,"code":"  it('returns true if value is not null and not undefined', () => {\n    expect(isDefined(0)).toBe(true);\n    expect(isDefined(1)).toBe(true);\n    expect(isDefined('')).toBe(true);\n    expect(isDefined('a')).toBe(true);\n    expect(isDefined([])).toBe(true);\n    expect(isDefined([0])).toBe(true);\n    expect(isDefined([1])).toBe(true);\n    expect(isDefined({})).toBe(true);\n    expect(isDefined({ a: 1 })).toBe(true);\n    expect(isDefined([{}])).toBe(true);\n  });","file":"utils/isDefined.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"returns false otherwise","suites":["isDefined(value)"],"updatePoint":{"line":35,"column":29},"line":35,"code":"  it('returns false otherwise', () => {\n    expect(isDefined(null)).toBe(false);\n    expect(isDefined(undefined)).toBe(false);\n  });","file":"utils/isDefined.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should throw error with the given field in the message","suites":["isRequired(field)"],"updatePoint":{"line":23,"column":60},"line":23,"code":"  it('should throw error with the given field in the message', () => {\n    expect(() => isRequired('myField')).toThrow(Error);\n  });","file":"utils/isRequired.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should pipe to `console` methods","suites":["logging"],"updatePoint":{"line":27,"column":38},"line":27,"code":"  it('should pipe to `console` methods', () => {\n    const { logging } = require('@superset-ui/core');\n\n    jest.spyOn(logging, 'debug').mockImplementation();\n    jest.spyOn(logging, 'log').mockImplementation();\n    jest.spyOn(logging, 'info').mockImplementation();\n    expect(() => {\n      logging.debug();\n      logging.log();\n      logging.info();\n    }).not.toThrow();\n\n    jest.spyOn(logging, 'warn').mockImplementation(() => {\n      throw new Error('warn');\n    });\n    expect(() => logging.warn()).toThrow('warn');\n\n    jest.spyOn(logging, 'error').mockImplementation(() => {\n      throw new Error('error');\n    });\n    expect(() => logging.error()).toThrow('error');\n\n    jest.spyOn(logging, 'trace').mockImplementation(() => {\n      throw new Error('Trace:');\n    });\n    expect(() => logging.trace()).toThrow('Trace:');\n  });","file":"utils/logging.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should use noop functions when console unavailable","suites":["logging"],"updatePoint":{"line":55,"column":56},"line":55,"code":"  it('should use noop functions when console unavailable', () => {\n    const { console } = window;\n    Object.assign(window, { console: undefined });\n    const { logging } = require('@superset-ui/core');\n\n    afterAll(() => {\n      Object.assign(window, { console });\n    });\n\n    expect(() => {\n      logging.debug();\n      logging.log();\n      logging.info();\n      logging.warn('warn');\n      logging.error('error');\n      logging.trace();\n      logging.table([\n        [1, 2],\n        [3, 4],\n      ]);\n    }).not.toThrow();\n  });","file":"utils/logging.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"initial LRU","suites":[],"updatePoint":{"line":22,"column":17},"line":22,"code":"test('initial LRU', () => {\n  expect(lruCache().capacity).toBe(100);\n  expect(lruCache(10).capacity).toBe(10);\n  expect(lruCache(10).size).toBe(0);\n  expect(() => lruCache(0)).toThrow(Error);\n});","file":"utils/lruCache.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"LRU operations","suites":[],"updatePoint":{"line":29,"column":20},"line":29,"code":"test('LRU operations', () => {\n  const cache = lruCache<string>(3);\n  cache.set('1', 'a');\n  cache.set('2', 'b');\n  cache.set('3', 'c');\n  cache.set('4', 'd');\n  expect(cache.size).toBe(3);\n  expect(cache.has('1')).toBeFalsy();\n  expect(cache.get('1')).toBeUndefined();\n  cache.get('2');\n  cache.set('5', 'e');\n  expect(cache.has('2')).toBeTruthy();\n  expect(cache.has('3')).toBeFalsy();\n  // @ts-expect-error\n  expect(() => cache.set(0)).toThrow(TypeError);\n  // @ts-expect-error\n  expect(() => cache.get(0)).toThrow(TypeError);\n  expect(cache.size).toBe(3);\n  cache.clear();\n  expect(cache.size).toBe(0);\n  expect(cache.capacity).toBe(3);\n});","file":"utils/lruCache.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"LRU handle null and undefined","suites":[],"updatePoint":{"line":52,"column":35},"line":52,"code":"test('LRU handle null and undefined', () => {\n  const cache = lruCache();\n  cache.set('a', null);\n  cache.set('b', undefined);\n  expect(cache.has('a')).toBeTruthy();\n  expect(cache.has('b')).toBeTruthy();\n  expect(cache.get('a')).toBeNull();\n  expect(cache.get('b')).toBeUndefined();\n});","file":"utils/lruCache.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"returns a function for getting singleton instance of a given base class","suites":["makeSingleton()","makeSingleton(BaseClass)"],"updatePoint":{"line":39,"column":79},"line":39,"code":"    it('returns a function for getting singleton instance of a given base class', () => {\n      expect(typeof getInstance).toBe('function');\n      expect(getInstance()).toBeInstanceOf(Dog);\n    });","file":"utils/makeSingleton.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"returned function returns same instance across all calls","suites":["makeSingleton()","makeSingleton(BaseClass)"],"updatePoint":{"line":43,"column":64},"line":43,"code":"    it('returned function returns same instance across all calls', () => {\n      expect(getInstance()).toBe(getInstance());\n    });","file":"utils/makeSingleton.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"returns a function for getting singleton instance of a given base class constructed with the given arguments","suites":["makeSingleton()","makeSingleton(BaseClass, ...args)"],"updatePoint":{"line":50,"column":116},"line":50,"code":"    it('returns a function for getting singleton instance of a given base class constructed with the given arguments', () => {\n      expect(typeof getInstance).toBe('function');\n      expect(getInstance()).toBeInstanceOf(Dog);\n      expect(getInstance().name).toBe('Doug');\n    });","file":"utils/makeSingleton.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"returned function returns same instance across all calls","suites":["makeSingleton()","makeSingleton(BaseClass, ...args)"],"updatePoint":{"line":55,"column":64},"line":55,"code":"    it('returned function returns same instance across all calls', () => {\n      expect(getInstance()).toBe(getInstance());\n    });","file":"utils/makeSingleton.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"resolves after delay","suites":["promiseTimeout(func, delay)"],"updatePoint":{"line":30,"column":26},"line":30,"code":"  it('resolves after delay', async () => {\n    const promise = promiseTimeout(() => 'abcd', 10);\n    jest.advanceTimersByTime(10);\n    const result = await promise;\n    expect(result).toEqual('abcd');\n    expect(result).toHaveLength(4);\n  });","file":"utils/promiseTimeout.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"uses the timer","suites":["promiseTimeout(func, delay)"],"updatePoint":{"line":38,"column":20},"line":38,"code":"  it('uses the timer', async () => {\n    const promise = Promise.race([\n      promiseTimeout(() => 'abc', 10),\n      promiseTimeout(() => 'def', 20),\n    ]);\n    jest.advanceTimersByTime(10);\n    const result = await promise;\n    expect(result).toEqual('abc');\n  });","file":"utils/promiseTimeout.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"seeded random should return the same value","suites":["random"],"updatePoint":{"line":23,"column":48},"line":23,"code":"  it('seeded random should return the same value', () => {\n    expect(seedRandom()).toEqual(0.7237953289342797);\n  });","file":"utils/random.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should allow update seed","suites":["random"],"updatePoint":{"line":27,"column":30},"line":27,"code":"  it('should allow update seed', () => {\n    const a = seed('abc');\n    const b = seed('abc');\n    expect(a()).toEqual(b());\n  });","file":"utils/random.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should remove duplicates from a simple list","suites":["removeDuplicates([...])"],"updatePoint":{"line":22,"column":49},"line":22,"code":"  it('should remove duplicates from a simple list', () => {\n    expect(removeDuplicates([1, 2, 4, 1, 1, 5, 2])).toEqual([1, 2, 4, 5]);\n  });","file":"utils/removeDuplicates.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"should remove duplicates by key getter","suites":["removeDuplicates([...])"],"updatePoint":{"line":25,"column":44},"line":25,"code":"  it('should remove duplicates by key getter', () => {\n    expect(removeDuplicates([{ a: 1 }, { a: 1 }, { b: 2 }], x => x.a)).toEqual([\n      { a: 1 },\n      { b: 2 },\n    ]);\n  });","file":"utils/removeDuplicates.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"returns the warning message if invalid","suites":["legacyValidateInteger()"],"updatePoint":{"line":24,"column":44},"line":24,"code":"  it('returns the warning message if invalid', () => {\n    expect(legacyValidateInteger(10.1)).toBeTruthy();\n    expect(legacyValidateInteger('abc')).toBeTruthy();\n    expect(legacyValidateInteger(Infinity)).toBeTruthy();\n  });","file":"validator/legacyValidateInteger.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"returns false if the input is valid","suites":["legacyValidateInteger()"],"updatePoint":{"line":29,"column":41},"line":29,"code":"  it('returns false if the input is valid', () => {\n    // superset seems to operate on this incorrect behavior at the moment\n    expect(legacyValidateInteger(NaN)).toBeFalsy();\n    expect(legacyValidateInteger(undefined)).toBeFalsy();\n    expect(legacyValidateInteger(null)).toBeFalsy();\n    expect(legacyValidateInteger('')).toBeFalsy();\n\n    expect(legacyValidateInteger(0)).toBeFalsy();\n    expect(legacyValidateInteger(10)).toBeFalsy();\n    expect(legacyValidateInteger('10')).toBeFalsy();\n  });","file":"validator/legacyValidateInteger.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"returns the warning message if invalid","suites":["legacyValidateNumber()"],"updatePoint":{"line":24,"column":44},"line":24,"code":"  it('returns the warning message if invalid', () => {\n    expect(legacyValidateNumber('abc')).toBeTruthy();\n  });","file":"validator/legacyValidateNumber.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"returns false if the input is valid","suites":["legacyValidateNumber()"],"updatePoint":{"line":27,"column":41},"line":27,"code":"  it('returns false if the input is valid', () => {\n    // superset seems to operate on this incorrect behavior at the moment\n    expect(legacyValidateNumber(NaN)).toBeFalsy();\n    expect(legacyValidateNumber(Infinity)).toBeFalsy();\n    expect(legacyValidateNumber(undefined)).toBeFalsy();\n    expect(legacyValidateNumber(null)).toBeFalsy();\n    expect(legacyValidateNumber('')).toBeFalsy();\n\n    expect(legacyValidateNumber(0)).toBeFalsy();\n    expect(legacyValidateNumber(10.1)).toBeFalsy();\n    expect(legacyValidateNumber(10)).toBeFalsy();\n    expect(legacyValidateNumber('10')).toBeFalsy();\n  });","file":"validator/legacyValidateNumber.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"returns the warning message if invalid","suites":["validateInteger()"],"updatePoint":{"line":24,"column":44},"line":24,"code":"  it('returns the warning message if invalid', () => {\n    expect(validateInteger(10.1)).toBeTruthy();\n    expect(validateInteger(NaN)).toBeTruthy();\n    expect(validateInteger(Infinity)).toBeTruthy();\n    expect(validateInteger(undefined)).toBeTruthy();\n    expect(validateInteger(null)).toBeTruthy();\n    expect(validateInteger('abc')).toBeTruthy();\n    expect(validateInteger('')).toBeTruthy();\n  });","file":"validator/validateInteger.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"returns false if the input is valid","suites":["validateInteger()"],"updatePoint":{"line":33,"column":41},"line":33,"code":"  it('returns false if the input is valid', () => {\n    expect(validateInteger(0)).toBeFalsy();\n    expect(validateInteger(10)).toBeFalsy();\n    expect(validateInteger('10')).toBeFalsy();\n  });","file":"validator/validateInteger.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"returns the warning message if invalid","suites":["validateNonEmpty()"],"updatePoint":{"line":24,"column":44},"line":24,"code":"  it('returns the warning message if invalid', () => {\n    expect(validateNonEmpty([])).toBeTruthy();\n    expect(validateNonEmpty(undefined)).toBeTruthy();\n    expect(validateNonEmpty(null)).toBeTruthy();\n    expect(validateNonEmpty('')).toBeTruthy();\n  });","file":"validator/validateNonEmpty.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"returns false if the input is valid","suites":["validateNonEmpty()"],"updatePoint":{"line":30,"column":41},"line":30,"code":"  it('returns false if the input is valid', () => {\n    expect(validateNonEmpty(0)).toBeFalsy();\n    expect(validateNonEmpty(10)).toBeFalsy();\n    expect(validateNonEmpty('abc')).toBeFalsy();\n  });","file":"validator/validateNonEmpty.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"returns the warning message if invalid","suites":["validateNumber()"],"updatePoint":{"line":24,"column":44},"line":24,"code":"  it('returns the warning message if invalid', () => {\n    expect(validateNumber(NaN)).toBeTruthy();\n    expect(validateNumber(Infinity)).toBeTruthy();\n    expect(validateNumber(undefined)).toBeTruthy();\n    expect(validateNumber(null)).toBeTruthy();\n    expect(validateNumber('abc')).toBeTruthy();\n    expect(validateNumber('')).toBeTruthy();\n  });","file":"validator/validateNumber.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"returns false if the input is valid","suites":["validateNumber()"],"updatePoint":{"line":32,"column":41},"line":32,"code":"  it('returns false if the input is valid', () => {\n    expect(validateNumber(0)).toBeFalsy();\n    expect(validateNumber(10.1)).toBeFalsy();\n    expect(validateNumber(10)).toBeFalsy();\n    expect(validateNumber('10')).toBeFalsy();\n  });","file":"validator/validateNumber.test.ts","skipped":false,"dir":"superset-frontend/packages/superset-ui-core/test"},{"name":"formatted date string should equal to UTC date","suites":["getFormattedUTCTime"],"updatePoint":{"line":23,"column":52},"line":23,"code":"  it('formatted date string should equal to UTC date', () => {\n    const ts = 1420070400000; // 2015.01.01 00:00:00 UTC\n    const formattedTime = getFormattedUTCTime(ts, '%Y-%m-%d %H:%M:%S');\n    expect(formattedTime).toEqual('2015-01-01 00:00:00');\n  });","file":"getFormattedUTCTime.ts","skipped":false,"dir":"superset-frontend/plugins/legacy-plugin-chart-calendar/test"},{"name":"rounding method to limit the number of decimal digits","suites":["roundDecimal"],"updatePoint":{"line":22,"column":59,"index":959},"line":22,"code":"  it('rounding method to limit the number of decimal digits', () => {\n    expect(roundDecimal(1.139, 2)).toBe(1.14);\n    expect(roundDecimal(1.13929, 3)).toBe(1.139);\n    expect(roundDecimal(1.13929)).toBe(1);\n  });","file":"utils/roundDecimal.test.js","skipped":false,"dir":"superset-frontend/plugins/legacy-plugin-chart-map-box/test"},{"name":"hexToRGB()","suites":["colors"],"updatePoint":{"line":21,"column":16,"index":904},"line":21,"code":"  it('hexToRGB()', () => {\n    expect(hexToRGB('#ffffff')).toEqual([255, 255, 255, 255]);\n  });","file":"utils/colors.test.js","skipped":false,"dir":"superset-frontend/plugins/legacy-preset-chart-deckgl/test"},{"name":"handle original input","suites":["getPointsFromPolygon"],"updatePoint":{"line":21,"column":27,"index":951},"line":21,"code":"  it('handle original input', () => {\n    expect(getPointsFromPolygon({\n      polygon: [[1, 2], [3, 4]]\n    })).toEqual([[1, 2], [3, 4]]);\n  });","file":"utils/getPointsFromPolygon.test.ts","skipped":false,"dir":"superset-frontend/plugins/legacy-preset-chart-deckgl/test"},{"name":"handle geojson features","suites":["getPointsFromPolygon"],"updatePoint":{"line":26,"column":29,"index":1098},"line":26,"code":"  it('handle geojson features', () => {\n    expect(getPointsFromPolygon({\n      polygon: {\n        type: 'Feature',\n        geometry: {\n          type: 'Polygon',\n          coordinates: [[[1, 2], [3, 4]]]\n        }\n      }\n    })).toEqual([[1, 2], [3, 4]]);\n  });","file":"utils/getPointsFromPolygon.test.ts","skipped":false,"dir":"superset-frontend/plugins/legacy-preset-chart-deckgl/test"},{"name":"is a function","suites":["nvd3/utils","getTimeOrNumberFormatter(format)"],"updatePoint":{"line":80,"column":21,"index":2002},"line":80,"code":"    it('is a function', () => {\n      expect(typeof getTimeOrNumberFormatter).toBe('function');\n    });","file":"utils.test.js","skipped":false,"dir":"superset-frontend/plugins/legacy-preset-chart-nvd3/test"},{"name":"returns a date formatter if format is smart_date","suites":["nvd3/utils","getTimeOrNumberFormatter(format)"],"updatePoint":{"line":83,"column":56,"index":2141},"line":83,"code":"    it('returns a date formatter if format is smart_date', () => {\n      const time = new Date(Date.UTC(2018, 10, 21, 22, 11));\n      expect(getTimeOrNumberFormatter('smart_date')(time)).toBe('10:11');\n    });","file":"utils.test.js","skipped":false,"dir":"superset-frontend/plugins/legacy-preset-chart-nvd3/test"},{"name":"returns a number formatter otherwise","suites":["nvd3/utils","getTimeOrNumberFormatter(format)"],"updatePoint":{"line":87,"column":44,"index":2339},"line":87,"code":"    it('returns a number formatter otherwise', () => {\n      expect(getTimeOrNumberFormatter('.3s')(3000000)).toBe('3.00M');\n      expect(getTimeOrNumberFormatter()(3000100)).toBe('3M');\n    });","file":"utils.test.js","skipped":false,"dir":"superset-frontend/plugins/legacy-preset-chart-nvd3/test"},{"name":"formats simple labels","suites":["nvd3/utils","formatLabel()"],"updatePoint":{"line":97,"column":29,"index":2628},"line":97,"code":"    it('formats simple labels', () => {\n      expect(formatLabel('foo')).toBe('foo');\n      expect(formatLabel(['foo'])).toBe('foo');\n      expect(formatLabel(['foo', 'bar'])).toBe('foo, bar');\n    });","file":"utils.test.js","skipped":false,"dir":"superset-frontend/plugins/legacy-preset-chart-nvd3/test"},{"name":"formats simple labels with lookups","suites":["nvd3/utils","formatLabel()"],"updatePoint":{"line":102,"column":42,"index":2843},"line":102,"code":"    it('formats simple labels with lookups', () => {\n      expect(formatLabel('foo', verboseMap)).toBe('Foo');\n      expect(formatLabel('baz', verboseMap)).toBe('baz');\n      expect(formatLabel(['foo'], verboseMap)).toBe('Foo');\n      expect(formatLabel(['foo', 'bar', 'baz'], verboseMap)).toBe('Foo, Bar, baz');\n    });","file":"utils.test.js","skipped":false,"dir":"superset-frontend/plugins/legacy-preset-chart-nvd3/test"},{"name":"deals with time shift properly","suites":["nvd3/utils","formatLabel()"],"updatePoint":{"line":108,"column":38,"index":3160},"line":108,"code":"    it('deals with time shift properly', () => {\n      expect(formatLabel(['foo', '1 hour offset'], verboseMap)).toBe('Foo, 1 hour offset');\n      expect(formatLabel(['foo', 'bar', 'baz', '2 hours offset'], verboseMap)).toBe('Foo, Bar, baz, 2 hours offset');\n    });","file":"utils.test.js","skipped":false,"dir":"superset-frontend/plugins/legacy-preset-chart-nvd3/test"},{"name":"tryNumify works as expected","suites":["nvd3/utils","tryNumify()"],"updatePoint":{"line":114,"column":35,"index":3464},"line":114,"code":"    it('tryNumify works as expected', () => {\n      expect(tryNumify(5)).toBe(5);\n      expect(tryNumify('5')).toBe(5);\n      expect(tryNumify('5.1')).toBe(5.1);\n      expect(tryNumify('a string')).toBe('a string');\n    });","file":"utils.test.js","skipped":false,"dir":"superset-frontend/plugins/legacy-preset-chart-nvd3/test"},{"name":"works with invalid data","suites":["nvd3/utils","computeYDomain()"],"updatePoint":{"line":122,"column":31,"index":3729},"line":122,"code":"    it('works with invalid data', () => {\n      expect(computeYDomain('foo')).toEqual([0, 1]);\n    });","file":"utils.test.js","skipped":false,"dir":"superset-frontend/plugins/legacy-preset-chart-nvd3/test"},{"name":"works with all series enabled","suites":["nvd3/utils","computeYDomain()"],"updatePoint":{"line":125,"column":37,"index":3838},"line":125,"code":"    it('works with all series enabled', () => {\n      expect(computeYDomain(DATA)).toEqual([572036107.0, 1034767718.0]);\n    });","file":"utils.test.js","skipped":false,"dir":"superset-frontend/plugins/legacy-preset-chart-nvd3/test"},{"name":"works with some series disabled","suites":["nvd3/utils","computeYDomain()"],"updatePoint":{"line":128,"column":39,"index":3969},"line":128,"code":"    it('works with some series disabled', () => {\n      expect(computeYDomain(DATA_WITH_DISABLED_SERIES)).toEqual([660881033.0, 668526708.0]);\n    });","file":"utils.test.js","skipped":false,"dir":"superset-frontend/plugins/legacy-preset-chart-nvd3/test"},{"name":"works with invalid data","suites":["nvd3/utils","computeStackedYDomain()"],"updatePoint":{"line":133,"column":31,"index":4164},"line":133,"code":"    it('works with invalid data', () => {\n      expect(computeStackedYDomain('foo')).toEqual([0, 1]);\n    });","file":"utils.test.js","skipped":false,"dir":"superset-frontend/plugins/legacy-preset-chart-nvd3/test"},{"name":"works with all series enabled","suites":["nvd3/utils","computeStackedYDomain()"],"updatePoint":{"line":136,"column":37,"index":4280},"line":136,"code":"    it('works with all series enabled', () => {\n      expect(computeStackedYDomain(DATA)).toEqual([0, 2287437662.0]);\n    });","file":"utils.test.js","skipped":false,"dir":"superset-frontend/plugins/legacy-preset-chart-nvd3/test"},{"name":"works with some series disabled","suites":["nvd3/utils","computeStackedYDomain()"],"updatePoint":{"line":139,"column":39,"index":4408},"line":139,"code":"    it('works with some series disabled', () => {\n      expect(computeStackedYDomain(DATA_WITH_DISABLED_SERIES)).toEqual([0, 668526708.0]);\n    });","file":"utils.test.js","skipped":false,"dir":"superset-frontend/plugins/legacy-preset-chart-nvd3/test"},{"name":"evals false-looking strings properly","suites":["isTruthy"],"updatePoint":{"line":21,"column":42,"index":930},"line":21,"code":"  it('evals false-looking strings properly', () => {\n    expect(isTruthy('f')).toBe(false);\n    expect(isTruthy('false')).toBe(false);\n    expect(isTruthy('no')).toBe(false);\n    expect(isTruthy('n')).toBe(false);\n    expect(isTruthy('F')).toBe(false);\n    expect(isTruthy('False')).toBe(false);\n    expect(isTruthy('NO')).toBe(false);\n    expect(isTruthy('N')).toBe(false);\n  });","file":"utils/isTruthy.test.js","skipped":false,"dir":"superset-frontend/plugins/legacy-preset-chart-nvd3/test"},{"name":"evals true-looking strings properly","suites":["isTruthy"],"updatePoint":{"line":31,"column":41,"index":1310},"line":31,"code":"  it('evals true-looking strings properly', () => {\n    expect(isTruthy('t')).toBe(true);\n    expect(isTruthy('true')).toBe(true);\n    expect(isTruthy('yes')).toBe(true);\n    expect(isTruthy('y')).toBe(true);\n    expect(isTruthy('Y')).toBe(true);\n    expect(isTruthy('True')).toBe(true);\n    expect(isTruthy('Yes')).toBe(true);\n    expect(isTruthy('YES')).toBe(true);\n  });","file":"utils/isTruthy.test.js","skipped":false,"dir":"superset-frontend/plugins/legacy-preset-chart-nvd3/test"},{"name":"evals bools properly","suites":["isTruthy"],"updatePoint":{"line":41,"column":26,"index":1669},"line":41,"code":"  it('evals bools properly', () => {\n    expect(isTruthy(false)).toBe(false);\n    expect(isTruthy(true)).toBe(true);\n  });","file":"utils/isTruthy.test.js","skipped":false,"dir":"superset-frontend/plugins/legacy-preset-chart-nvd3/test"},{"name":"evals ints properly","suites":["isTruthy"],"updatePoint":{"line":45,"column":25,"index":1791},"line":45,"code":"  it('evals ints properly', () => {\n    expect(isTruthy(0)).toBe(false);\n    expect(isTruthy(1)).toBe(true);\n  });","file":"utils/isTruthy.test.js","skipped":false,"dir":"superset-frontend/plugins/legacy-preset-chart-nvd3/test"},{"name":"evals constants properly","suites":["isTruthy"],"updatePoint":{"line":49,"column":30,"index":1911},"line":49,"code":"  it('evals constants properly', () => {\n    expect(isTruthy(null)).toBe(false);\n    expect(isTruthy(undefined)).toBe(false);\n  });","file":"utils/isTruthy.test.js","skipped":false,"dir":"superset-frontend/plugins/legacy-preset-chart-nvd3/test"},{"name":"string auto is false","suites":["isTruthy"],"updatePoint":{"line":53,"column":26,"index":2039},"line":53,"code":"  it('string auto is false', () => {\n    expect(isTruthy('false')).toBe(false);\n  });","file":"utils/isTruthy.test.js","skipped":false,"dir":"superset-frontend/plugins/legacy-preset-chart-nvd3/test"},{"name":"evals numeric strings properly","suites":["tokenizeToNumericArray"],"updatePoint":{"line":21,"column":36,"index":979},"line":21,"code":"  it('evals numeric strings properly', () => {\n    expect(tokenizeToNumericArray('1')).toStrictEqual([1]);\n    expect(tokenizeToNumericArray('1,2,3,4')).toStrictEqual([1, 2, 3, 4]);\n    expect(tokenizeToNumericArray('1.1,2.2,3.0,4')).toStrictEqual([1.1, 2.2, 3, 4]);\n    expect(tokenizeToNumericArray('   1, 2,   3,    4 ')).toStrictEqual([1, 2, 3, 4]);\n  });","file":"utils/tokenize.test.js","skipped":false,"dir":"superset-frontend/plugins/legacy-preset-chart-nvd3/test"},{"name":"evals undefined to null","suites":["tokenizeToNumericArray"],"updatePoint":{"line":27,"column":29,"index":1332},"line":27,"code":"  it('evals undefined to null', () => {\n    expect(tokenizeToNumericArray(undefined)).toBeNull();\n  });","file":"utils/tokenize.test.js","skipped":false,"dir":"superset-frontend/plugins/legacy-preset-chart-nvd3/test"},{"name":"evals empty strings to null","suites":["tokenizeToNumericArray"],"updatePoint":{"line":30,"column":33,"index":1440},"line":30,"code":"  it('evals empty strings to null', () => {\n    expect(tokenizeToNumericArray('')).toBeNull();\n    expect(tokenizeToNumericArray('    ')).toBeNull();\n  });","file":"utils/tokenize.test.js","skipped":false,"dir":"superset-frontend/plugins/legacy-preset-chart-nvd3/test"},{"name":"throws error on incorrect string","suites":["tokenizeToNumericArray"],"updatePoint":{"line":34,"column":38,"index":1601},"line":34,"code":"  it('throws error on incorrect string', () => {\n    expect(() => tokenizeToNumericArray('qwerty,1,2,3')).toThrow(Error);\n  });","file":"utils/tokenize.test.js","skipped":false,"dir":"superset-frontend/plugins/legacy-preset-chart-nvd3/test"},{"name":"evals numeric strings properly","suites":["tokenizeToStringArray"],"updatePoint":{"line":39,"column":36,"index":1773},"line":39,"code":"  it('evals numeric strings properly', () => {\n    expect(tokenizeToStringArray('a')).toStrictEqual(['a']);\n    expect(tokenizeToStringArray('1.1 , 2.2, 3.0 ,4')).toStrictEqual(['1.1', '2.2', '3.0', '4']);\n    expect(tokenizeToStringArray('1.1,a,3, bc ,d')).toStrictEqual(['1.1', 'a', '3', 'bc', 'd']);\n  });","file":"utils/tokenize.test.js","skipped":false,"dir":"superset-frontend/plugins/legacy-preset-chart-nvd3/test"},{"name":"evals undefined to null","suites":["tokenizeToStringArray"],"updatePoint":{"line":44,"column":29,"index":2075},"line":44,"code":"  it('evals undefined to null', () => {\n    expect(tokenizeToStringArray(undefined)).toBeNull();\n  });","file":"utils/tokenize.test.js","skipped":false,"dir":"superset-frontend/plugins/legacy-preset-chart-nvd3/test"},{"name":"evals empty string to null","suites":["tokenizeToStringArray"],"updatePoint":{"line":47,"column":32,"index":2181},"line":47,"code":"  it('evals empty string to null', () => {\n    expect(tokenizeToStringArray('')).toBeNull();\n    expect(tokenizeToStringArray('    ')).toBeNull();\n  });","file":"utils/tokenize.test.js","skipped":false,"dir":"superset-frontend/plugins/legacy-preset-chart-nvd3/test"},{"name":"should fallback and format time","suites":["BigNumberWithTrendline","transformProps()"],"updatePoint":{"line":121,"column":39},"line":121,"code":"    it('should fallback and format time', () => {\n      const transformed = transformProps(props);\n      // the first item is the last item sorted by __timestamp\n      const lastDatum = transformed.trendLineData?.pop();\n\n      // should use last available value\n      expect(lastDatum?.[0]).toStrictEqual(100);\n      expect(lastDatum?.[1]).toBeNull();\n\n      // should note this is a fallback\n      expect(transformed.bigNumber).toStrictEqual(1.2345);\n      expect(transformed.bigNumberFallback).not.toBeNull();\n\n      // should successfully formatTime by granularity\n      // @ts-ignore\n      expect(transformed.formatTime(new Date('2020-01-01'))).toStrictEqual(\n        '2020-01-01 00:00:00',\n      );\n    });","file":"BigNumber/transformProps.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"should respect datasource d3 format","suites":["BigNumberWithTrendline","transformProps()"],"updatePoint":{"line":141,"column":43},"line":141,"code":"    it('should respect datasource d3 format', () => {\n      const propsWithDatasource = {\n        ...props,\n        datasource: {\n          ...props.datasource,\n          metrics: [\n            {\n              label: 'value',\n              metric_name: 'value',\n              d3format: '.2f',\n            },\n          ],\n        },\n      };\n      const transformed = transformProps(propsWithDatasource);\n      // @ts-ignore\n      expect(transformed.headerFormatter(transformed.bigNumber)).toStrictEqual(\n        '1.23',\n      );\n    });","file":"BigNumber/transformProps.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"should build timeseries when series columns is empty","suites":["BoxPlot buildQuery"],"updatePoint":{"line":41,"column":58},"line":41,"code":"  it('should build timeseries when series columns is empty', () => {\n    const queryContext = buildQuery(formData);\n    const [query] = queryContext.queries;\n    expect(query.metrics).toEqual(['foo']);\n    expect(query.columns).toEqual(['ds', 'bar']);\n    expect(query.series_columns).toEqual(['bar']);\n    const [rule] = query.post_processing || [];\n    expect(isPostProcessingBoxplot(rule)).toEqual(true);\n    expect((rule as PostProcessingBoxplot)?.options?.groupby).toEqual(['bar']);\n  });","file":"BoxPlot/buildQuery.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"should build non-timeseries query object when columns is defined","suites":["BoxPlot buildQuery"],"updatePoint":{"line":52,"column":70},"line":52,"code":"  it('should build non-timeseries query object when columns is defined', () => {\n    const queryContext = buildQuery({ ...formData, columns: ['qwerty'] });\n    const [query] = queryContext.queries;\n    expect(query.metrics).toEqual(['foo']);\n    expect(query.columns).toEqual(['qwerty', 'bar']);\n    expect(query.series_columns).toEqual(['bar']);\n    const [rule] = query.post_processing || [];\n    expect(isPostProcessingBoxplot(rule)).toEqual(true);\n    expect((rule as PostProcessingBoxplot)?.options?.groupby).toEqual(['bar']);\n  });","file":"BoxPlot/buildQuery.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"should transform chart props for viz","suites":["BoxPlot transformProps"],"updatePoint":{"line":72,"column":42},"line":72,"code":"  it('should transform chart props for viz', () => {\n    expect(transformProps(chartProps as EchartsBoxPlotChartProps)).toEqual(\n      expect.objectContaining({\n        width: 800,\n        height: 600,\n        echartOptions: expect.objectContaining({\n          series: expect.arrayContaining([\n            expect.objectContaining({\n              name: 'boxplot',\n              data: expect.arrayContaining([\n                expect.objectContaining({\n                  name: 'organic, Charlotte',\n                  value: [\n                    1.4775,\n                    1.73875,\n                    1.9025,\n                    2.105,\n                    2.505,\n                    1.9405512820512825,\n                    39,\n                    [2.735],\n                  ],\n                }),\n                expect.objectContaining({\n                  name: 'organic, Hartford Springfield',\n                  value: [\n                    1.862,\n                    2.1285,\n                    2.265,\n                    2.32625,\n                    2.595,\n                    2.231141025641026,\n                    39,\n                    [],\n                  ],\n                }),\n              ]),\n            }),\n            expect.objectContaining({\n              name: 'outlier',\n              data: [['organic, Charlotte', 2.735]],\n            }),\n          ]),\n        }),\n      }),\n    );\n  });","file":"BoxPlot/transformProps.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"should build query fields from form data","suites":["Funnel buildQuery"],"updatePoint":{"line":30,"column":46},"line":30,"code":"  it('should build query fields from form data', () => {\n    const queryContext = buildQuery(formData);\n    const [query] = queryContext.queries;\n    expect(query.metrics).toEqual(['foo']);\n    expect(query.columns).toEqual(['bar']);\n  });","file":"Funnel/buildQuery.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"should transform chart props for viz","suites":["Funnel transformProps"],"updatePoint":{"line":55,"column":42},"line":55,"code":"  it('should transform chart props for viz', () => {\n    expect(transformProps(chartProps as EchartsFunnelChartProps)).toEqual(\n      expect.objectContaining({\n        width: 800,\n        height: 600,\n        echartOptions: expect.objectContaining({\n          series: [\n            expect.objectContaining({\n              data: expect.arrayContaining([\n                expect.objectContaining({\n                  name: 'Arnold, 2',\n                  value: 2.5,\n                }),\n                expect.objectContaining({\n                  name: 'Sylvester, 1',\n                  value: 10,\n                }),\n              ]),\n            }),\n          ],\n        }),\n      }),\n    );\n  });","file":"Funnel/transformProps.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"should generate a valid funnel chart label","suites":["formatFunnelLabel"],"updatePoint":{"line":82,"column":48},"line":82,"code":"  it('should generate a valid funnel chart label', () => {\n    const numberFormatter = getNumberFormatter();\n    const params = { name: 'My Label', value: 1234, percent: 12.34 };\n    expect(\n      formatFunnelLabel({\n        params,\n        numberFormatter,\n        labelType: EchartsFunnelLabelTypeType.Key,\n      }),\n    ).toEqual('My Label');\n    expect(\n      formatFunnelLabel({\n        params,\n        numberFormatter,\n        labelType: EchartsFunnelLabelTypeType.Value,\n      }),\n    ).toEqual('1.23k');\n    expect(\n      formatFunnelLabel({\n        params,\n        numberFormatter,\n        labelType: EchartsFunnelLabelTypeType.Percent,\n      }),\n    ).toEqual('12.34%');\n    expect(\n      formatFunnelLabel({\n        params,\n        numberFormatter,\n        labelType: EchartsFunnelLabelTypeType.KeyValue,\n      }),\n    ).toEqual('My Label: 1.23k');\n    expect(\n      formatFunnelLabel({\n        params,\n        numberFormatter,\n        labelType: EchartsFunnelLabelTypeType.KeyPercent,\n      }),\n    ).toEqual('My Label: 12.34%');\n    expect(\n      formatFunnelLabel({\n        params,\n        numberFormatter,\n        labelType: EchartsFunnelLabelTypeType.KeyValuePercent,\n      }),\n    ).toEqual('My Label: 1.23k (12.34%)');\n    expect(\n      formatFunnelLabel({\n        params: { ...params, name: '<NULL>' },\n        numberFormatter,\n        labelType: EchartsFunnelLabelTypeType.Key,\n      }),\n    ).toEqual('<NULL>');\n    expect(\n      formatFunnelLabel({\n        params: { ...params, name: '<NULL>' },\n        numberFormatter,\n        labelType: EchartsFunnelLabelTypeType.Key,\n        sanitizeName: true,\n      }),\n    ).toEqual('&lt;NULL&gt;');\n  });","file":"Funnel/transformProps.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"should build query fields with no group by column","suites":["Gauge buildQuery"],"updatePoint":{"line":28,"column":55},"line":28,"code":"  it('should build query fields with no group by column', () => {\n    const formData = { ...baseFormData, groupby: undefined };\n    const queryContext = buildQuery(formData);\n    const [query] = queryContext.queries;\n    expect(query.columns).toEqual([]);\n  });","file":"Gauge/buildQuery.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"should build query fields with single group by column","suites":["Gauge buildQuery"],"updatePoint":{"line":35,"column":59},"line":35,"code":"  it('should build query fields with single group by column', () => {\n    const formData = { ...baseFormData, groupby: ['foo'] };\n    const queryContext = buildQuery(formData);\n    const [query] = queryContext.queries;\n    expect(query.columns).toEqual(['foo']);\n  });","file":"Gauge/buildQuery.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"should build query fields with multiple group by columns","suites":["Gauge buildQuery"],"updatePoint":{"line":42,"column":62},"line":42,"code":"  it('should build query fields with multiple group by columns', () => {\n    const formData = { ...baseFormData, groupby: ['foo', 'bar'] };\n    const queryContext = buildQuery(formData);\n    const [query] = queryContext.queries;\n    expect(query.columns).toEqual(['foo', 'bar']);\n  });","file":"Gauge/buildQuery.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"should transform chart props for no group by column","suites":["Echarts Gauge transformProps"],"updatePoint":{"line":48,"column":57},"line":48,"code":"  it('should transform chart props for no group by column', () => {\n    const formData: SqlaFormData = { ...baseFormData, groupby: [] };\n    const queriesData = [\n      {\n        colnames: ['count'],\n        data: [\n          {\n            count: 16595,\n          },\n        ],\n      },\n    ];\n\n    const chartPropsConfig = {\n      formData,\n      width: 800,\n      height: 600,\n      queriesData,\n      theme: supersetTheme,\n    };\n\n    const chartProps = new ChartProps(chartPropsConfig);\n    expect(transformProps(chartProps as EchartsGaugeChartProps)).toEqual(\n      expect.objectContaining({\n        width: 800,\n        height: 600,\n        echartOptions: expect.objectContaining({\n          series: expect.arrayContaining([\n            expect.objectContaining({\n              data: [\n                {\n                  value: 16595,\n                  name: '',\n                  itemStyle: {\n                    color: '#1f77b4',\n                  },\n                  title: {\n                    offsetCenter: ['0%', '20%'],\n                    fontSize: 14,\n                  },\n                  detail: {\n                    offsetCenter: ['0%', '32.6%'],\n                    fontSize: 16.8,\n                  },\n                },\n              ],\n            }),\n          ]),\n        }),\n      }),\n    );\n  });","file":"Gauge/transformProps.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"should transform chart props for single group by column","suites":["Echarts Gauge transformProps"],"updatePoint":{"line":101,"column":61},"line":101,"code":"  it('should transform chart props for single group by column', () => {\n    const formData: SqlaFormData = {\n      ...baseFormData,\n      groupby: ['year'],\n    };\n    const queriesData = [\n      {\n        colnames: ['year', 'count'],\n        data: [\n          {\n            year: 1988,\n            count: 15,\n          },\n          {\n            year: 1995,\n            count: 219,\n          },\n        ],\n      },\n    ];\n\n    const chartPropsConfig = {\n      formData,\n      width: 800,\n      height: 600,\n      queriesData,\n      theme: supersetTheme,\n    };\n\n    const chartProps = new ChartProps(chartPropsConfig);\n    expect(transformProps(chartProps as EchartsGaugeChartProps)).toEqual(\n      expect.objectContaining({\n        width: 800,\n        height: 600,\n        echartOptions: expect.objectContaining({\n          series: expect.arrayContaining([\n            expect.objectContaining({\n              data: [\n                {\n                  value: 15,\n                  name: 'year: 1988',\n                  itemStyle: {\n                    color: '#1f77b4',\n                  },\n                  title: {\n                    offsetCenter: ['0%', '20%'],\n                    fontSize: 14,\n                  },\n                  detail: {\n                    offsetCenter: ['0%', '32.6%'],\n                    fontSize: 16.8,\n                  },\n                },\n                {\n                  value: 219,\n                  name: 'year: 1995',\n                  itemStyle: {\n                    color: '#ff7f0e',\n                  },\n                  title: {\n                    offsetCenter: ['0%', '48%'],\n                    fontSize: 14,\n                  },\n                  detail: {\n                    offsetCenter: ['0%', '60.6%'],\n                    fontSize: 16.8,\n                  },\n                },\n              ],\n            }),\n          ]),\n        }),\n      }),\n    );\n  });","file":"Gauge/transformProps.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"should transform chart props for multiple group by columns","suites":["Echarts Gauge transformProps"],"updatePoint":{"line":177,"column":64},"line":177,"code":"  it('should transform chart props for multiple group by columns', () => {\n    const formData: SqlaFormData = {\n      ...baseFormData,\n      groupby: ['year', 'platform'],\n    };\n    const queriesData = [\n      {\n        colnames: ['year', 'platform', 'count'],\n        data: [\n          {\n            year: 2011,\n            platform: 'PC',\n            count: 140,\n          },\n          {\n            year: 2008,\n            platform: 'PC',\n            count: 76,\n          },\n        ],\n      },\n    ];\n\n    const chartPropsConfig = {\n      formData,\n      width: 800,\n      height: 600,\n      queriesData,\n      theme: supersetTheme,\n    };\n\n    const chartProps = new ChartProps(chartPropsConfig);\n    expect(transformProps(chartProps as EchartsGaugeChartProps)).toEqual(\n      expect.objectContaining({\n        width: 800,\n        height: 600,\n        echartOptions: expect.objectContaining({\n          series: expect.arrayContaining([\n            expect.objectContaining({\n              data: [\n                {\n                  value: 140,\n                  name: 'year: 2011, platform: PC',\n                  itemStyle: {\n                    color: '#1f77b4',\n                  },\n                  title: {\n                    offsetCenter: ['0%', '20%'],\n                    fontSize: 14,\n                  },\n                  detail: {\n                    offsetCenter: ['0%', '32.6%'],\n                    fontSize: 16.8,\n                  },\n                },\n                {\n                  value: 76,\n                  name: 'year: 2008, platform: PC',\n                  itemStyle: {\n                    color: '#ff7f0e',\n                  },\n                  title: {\n                    offsetCenter: ['0%', '48%'],\n                    fontSize: 14,\n                  },\n                  detail: {\n                    offsetCenter: ['0%', '60.6%'],\n                    fontSize: 16.8,\n                  },\n                },\n              ],\n            }),\n          ]),\n        }),\n      }),\n    );\n  });","file":"Gauge/transformProps.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"should transform chart props for intervals","suites":["Echarts Gauge transformProps"],"updatePoint":{"line":255,"column":48},"line":255,"code":"  it('should transform chart props for intervals', () => {\n    const formData: SqlaFormData = {\n      ...baseFormData,\n      groupby: ['year', 'platform'],\n      intervals: '50,100',\n      intervalColorIndices: '1,2',\n    };\n    const queriesData = [\n      {\n        colnames: ['year', 'platform', 'count'],\n        data: [\n          {\n            year: 2011,\n            platform: 'PC',\n            count: 140,\n          },\n          {\n            year: 2008,\n            platform: 'PC',\n            count: 76,\n          },\n        ],\n      },\n    ];\n\n    const chartPropsConfig = {\n      formData,\n      width: 800,\n      height: 600,\n      queriesData,\n      theme: supersetTheme,\n    };\n\n    const chartProps = new ChartProps(chartPropsConfig);\n    expect(transformProps(chartProps as EchartsGaugeChartProps)).toEqual(\n      expect.objectContaining({\n        width: 800,\n        height: 600,\n        echartOptions: expect.objectContaining({\n          series: expect.arrayContaining([\n            expect.objectContaining({\n              axisLine: {\n                lineStyle: {\n                  width: 14,\n                  color: [\n                    [0.5, '#1f77b4'],\n                    [1, '#ff7f0e'],\n                  ],\n                },\n                roundCap: false,\n              },\n              data: [\n                {\n                  value: 140,\n                  name: 'year: 2011, platform: PC',\n                  itemStyle: {\n                    color: '#1f77b4',\n                  },\n                  title: {\n                    offsetCenter: ['0%', '20%'],\n                    fontSize: 14,\n                  },\n                  detail: {\n                    offsetCenter: ['0%', '32.6%'],\n                    fontSize: 16.8,\n                  },\n                },\n                {\n                  value: 76,\n                  name: 'year: 2008, platform: PC',\n                  itemStyle: {\n                    color: '#ff7f0e',\n                  },\n                  title: {\n                    offsetCenter: ['0%', '48%'],\n                    fontSize: 14,\n                  },\n                  detail: {\n                    offsetCenter: ['0%', '60.6%'],\n                    fontSize: 16.8,\n                  },\n                },\n              ],\n            }),\n          ]),\n        }),\n      }),\n    );\n  });","file":"Gauge/transformProps.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"should build groupby with source and target categories","suites":["Graph buildQuery"],"updatePoint":{"line":31,"column":60},"line":31,"code":"  it('should build groupby with source and target categories', () => {\n    const formDataWithCategories = {\n      ...formData,\n      source: 'dummy_source',\n      target: 'dummy_target',\n      source_category: 'dummy_source_category',\n      target_category: 'dummy_target_category',\n    };\n    const queryContext = buildQuery(formDataWithCategories);\n    const [query] = queryContext.queries;\n    expect(query.columns).toEqual([\n      'dummy_source',\n      'dummy_target',\n      'dummy_source_category',\n      'dummy_target_category',\n    ]);\n    expect(query.metrics).toEqual(['foo', 'bar']);\n  });","file":"Graph/buildQuery.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"should build groupby with source category","suites":["Graph buildQuery"],"updatePoint":{"line":50,"column":47},"line":50,"code":"  it('should build groupby with source category', () => {\n    const formDataWithCategories = {\n      ...formData,\n      source: 'dummy_source',\n      target: 'dummy_target',\n      source_category: 'dummy_source_category',\n    };\n    const queryContext = buildQuery(formDataWithCategories);\n    const [query] = queryContext.queries;\n    expect(query.columns).toEqual([\n      'dummy_source',\n      'dummy_target',\n      'dummy_source_category',\n    ]);\n    expect(query.metrics).toEqual(['foo', 'bar']);\n  });","file":"Graph/buildQuery.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"should build groupby with target category","suites":["Graph buildQuery"],"updatePoint":{"line":67,"column":47},"line":67,"code":"  it('should build groupby with target category', () => {\n    const formDataWithCategories = {\n      ...formData,\n      source: 'dummy_source',\n      target: 'dummy_target',\n      target_category: 'dummy_target_category',\n    };\n    const queryContext = buildQuery(formDataWithCategories);\n    const [query] = queryContext.queries;\n    expect(query.columns).toEqual([\n      'dummy_source',\n      'dummy_target',\n      'dummy_target_category',\n    ]);\n    expect(query.metrics).toEqual(['foo', 'bar']);\n  });","file":"Graph/buildQuery.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"should build groupby without any category","suites":["Graph buildQuery"],"updatePoint":{"line":84,"column":47},"line":84,"code":"  it('should build groupby without any category', () => {\n    const formDataWithCategories = {\n      ...formData,\n      source: 'dummy_source',\n      target: 'dummy_target',\n    };\n    const queryContext = buildQuery(formDataWithCategories);\n    const [query] = queryContext.queries;\n    expect(query.columns).toEqual(['dummy_source', 'dummy_target']);\n    expect(query.metrics).toEqual(['foo', 'bar']);\n  });","file":"Graph/buildQuery.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"should transform chart props for viz without category","suites":["EchartsGraph transformProps"],"updatePoint":{"line":25,"column":59},"line":25,"code":"  it('should transform chart props for viz without category', () => {\n    const formData: SqlaFormData = {\n      colorScheme: 'bnbColors',\n      datasource: '3__table',\n      granularity_sqla: 'ds',\n      metric: 'count',\n      source: 'source_column',\n      target: 'target_column',\n      category: null,\n      viz_type: 'graph',\n    };\n    const queriesData = [\n      {\n        colnames: ['source_column', 'target_column', 'count'],\n        data: [\n          {\n            source_column: 'source_value_1',\n            target_column: 'target_value_1',\n            count: 6,\n          },\n          {\n            source_column: 'source_value_2',\n            target_column: 'target_value_2',\n            count: 5,\n          },\n        ],\n      },\n    ];\n    const chartPropsConfig = {\n      formData,\n      width: 800,\n      height: 600,\n      queriesData,\n      theme: supersetTheme,\n    };\n\n    const chartProps = new ChartProps(chartPropsConfig);\n    expect(transformProps(chartProps as EchartsGraphChartProps)).toEqual(\n      expect.objectContaining({\n        width: 800,\n        height: 600,\n        echartOptions: expect.objectContaining({\n          legend: expect.objectContaining({\n            data: [],\n          }),\n          series: expect.arrayContaining([\n            expect.objectContaining({\n              data: [\n                {\n                  col: 'source_column',\n                  category: undefined,\n                  id: '0',\n                  label: { show: true },\n                  name: 'source_value_1',\n                  select: {\n                    itemStyle: { borderWidth: 3, opacity: 1 },\n                    label: { fontWeight: 'bolder' },\n                  },\n                  symbolSize: 50,\n                  tooltip: {\n                    appendToBody: true,\n                    formatter: '{b}: {c}',\n                    position: expect.anything(),\n                  },\n                  value: 6,\n                },\n                {\n                  col: 'target_column',\n                  category: undefined,\n                  id: '1',\n                  label: { show: true },\n                  name: 'target_value_1',\n                  select: {\n                    itemStyle: { borderWidth: 3, opacity: 1 },\n                    label: { fontWeight: 'bolder' },\n                  },\n                  symbolSize: 50,\n                  tooltip: {\n                    appendToBody: true,\n                    formatter: '{b}: {c}',\n                    position: expect.anything(),\n                  },\n                  value: 6,\n                },\n                {\n                  col: 'source_column',\n                  category: undefined,\n                  id: '2',\n                  label: { show: true },\n                  name: 'source_value_2',\n                  select: {\n                    itemStyle: { borderWidth: 3, opacity: 1 },\n                    label: { fontWeight: 'bolder' },\n                  },\n                  symbolSize: 10,\n                  tooltip: {\n                    appendToBody: true,\n                    formatter: '{b}: {c}',\n                    position: expect.anything(),\n                  },\n                  value: 5,\n                },\n                {\n                  col: 'target_column',\n                  category: undefined,\n                  id: '3',\n                  label: { show: true },\n                  name: 'target_value_2',\n                  select: {\n                    itemStyle: { borderWidth: 3, opacity: 1 },\n                    label: { fontWeight: 'bolder' },\n                  },\n                  symbolSize: 10,\n                  tooltip: {\n                    appendToBody: true,\n                    formatter: '{b}: {c}',\n                    position: expect.anything(),\n                  },\n                  value: 5,\n                },\n              ],\n            }),\n            expect.objectContaining({\n              links: [\n                {\n                  emphasis: { lineStyle: { width: 12 } },\n                  lineStyle: { width: 6 },\n                  select: {\n                    lineStyle: { opacity: 1, width: 9.600000000000001 },\n                  },\n                  source: '0',\n                  target: '1',\n                  value: 6,\n                },\n                {\n                  emphasis: { lineStyle: { width: 5 } },\n                  lineStyle: { width: 1.5 },\n                  select: { lineStyle: { opacity: 1, width: 5 } },\n                  source: '2',\n                  target: '3',\n                  value: 5,\n                },\n              ],\n            }),\n          ]),\n        }),\n      }),\n    );\n  });","file":"Graph/transformProps.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"should transform chart props for viz with category and falsey normalization","suites":["EchartsGraph transformProps"],"updatePoint":{"line":175,"column":81},"line":175,"code":"  it('should transform chart props for viz with category and falsey normalization', () => {\n    const formData: SqlaFormData = {\n      colorScheme: 'bnbColors',\n      datasource: '3__table',\n      granularity_sqla: 'ds',\n      metric: 'count',\n      source: 'source_column',\n      target: 'target_column',\n      sourceCategory: 'source_category_column',\n      targetCategory: 'target_category_column',\n      viz_type: 'graph',\n    };\n    const queriesData = [\n      {\n        colnames: [\n          'source_column',\n          'target_column',\n          'source_category_column',\n          'target_category_column',\n          'count',\n        ],\n        data: [\n          {\n            source_column: 'source_value',\n            target_column: 'target_value',\n            source_category_column: 'category_value_1',\n            target_category_column: 'category_value_2',\n            count: 6,\n          },\n          {\n            source_column: 'source_value',\n            target_column: 'target_value',\n            source_category_column: 'category_value_1',\n            target_category_column: 'category_value_2',\n            count: 5,\n          },\n        ],\n      },\n    ];\n    const chartPropsConfig = {\n      formData,\n      width: 800,\n      height: 600,\n      queriesData,\n      theme: supersetTheme,\n    };\n\n    const chartProps = new ChartProps(chartPropsConfig);\n    expect(transformProps(chartProps as EchartsGraphChartProps)).toEqual(\n      expect.objectContaining({\n        width: 800,\n        height: 600,\n        echartOptions: expect.objectContaining({\n          legend: expect.objectContaining({\n            data: ['category_value_1', 'category_value_2'],\n          }),\n          series: expect.arrayContaining([\n            expect.objectContaining({\n              data: [\n                {\n                  id: '0',\n                  col: 'source_column',\n                  name: 'source_value',\n                  value: 11,\n                  symbolSize: 10,\n                  category: 'category_value_1',\n                  select: DEFAULT_GRAPH_SERIES_OPTION.select,\n                  tooltip: {\n                    appendToBody: true,\n                    formatter: '{b}: {c}',\n                    position: expect.anything(),\n                  },\n                  label: { show: true },\n                },\n                {\n                  id: '1',\n                  col: 'target_column',\n                  name: 'target_value',\n                  value: 11,\n                  symbolSize: 10,\n                  category: 'category_value_2',\n                  select: DEFAULT_GRAPH_SERIES_OPTION.select,\n                  tooltip: {\n                    appendToBody: true,\n                    formatter: '{b}: {c}',\n                    position: expect.anything(),\n                  },\n                  label: { show: true },\n                },\n              ],\n            }),\n          ]),\n        }),\n      }),\n    );\n  });","file":"Graph/transformProps.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"exists","suites":["@superset-ui/plugin-chart-echarts"],"updatePoint":{"line":29,"column":12},"line":29,"code":"  it('exists', () => {\n    expect(EchartsBoxPlotChartPlugin).toBeDefined();\n    expect(EchartsPieChartPlugin).toBeDefined();\n    expect(EchartsTimeseriesChartPlugin).toBeDefined();\n    expect(EchartsGraphChartPlugin).toBeDefined();\n    expect(EchartsFunnelChartPlugin).toBeDefined();\n    expect(EchartsTreemapChartPlugin).toBeDefined();\n  });","file":"index.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"should compile query object A","suites":[],"updatePoint":{"line":88,"column":35},"line":88,"code":"test('should compile query object A', () => {\n  const query = buildQuery(formDataMixedChart).queries[0];\n  expect(query).toEqual({\n    time_range: '1980 : 2000',\n    since: undefined,\n    until: undefined,\n    granularity: 'ds',\n    filters: [],\n    extras: {\n      having: '',\n      time_grain_sqla: 'P1W',\n      where: \"(foo in ('a', 'b'))\",\n    },\n    applied_time_extras: {},\n    columns: ['foo'],\n    metrics: ['sum(sales)'],\n    annotation_layers: [],\n    row_limit: 10,\n    row_offset: undefined,\n    series_columns: ['foo'],\n    series_limit: 5,\n    series_limit_metric: undefined,\n    url_params: {},\n    custom_params: {},\n    custom_form_data: {},\n    is_timeseries: true,\n    time_offsets: [],\n    post_processing: [\n      {\n        operation: 'pivot',\n        options: {\n          aggregates: {\n            'sum(sales)': {\n              operator: 'mean',\n            },\n          },\n          columns: ['foo'],\n          drop_missing_columns: false,\n          index: ['__timestamp'],\n        },\n      },\n      {\n        operation: 'rename',\n        options: {\n          columns: {\n            'sum(sales)': null,\n          },\n          inplace: true,\n          level: 0,\n        },\n      },\n      {\n        operation: 'flatten',\n      },\n    ],\n    orderby: [['count', false]],\n  });\n});","file":"MixedTimeseries/buildQuery.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"should compile query object B","suites":[],"updatePoint":{"line":147,"column":35},"line":147,"code":"test('should compile query object B', () => {\n  const query = buildQuery(formDataMixedChart).queries[1];\n  expect(query).toEqual({\n    time_range: '1980 : 2000',\n    since: undefined,\n    until: undefined,\n    granularity: 'ds',\n    filters: [],\n    extras: {\n      having: '',\n      time_grain_sqla: 'P1W',\n      where: \"(name in ('c', 'd'))\",\n    },\n    applied_time_extras: {},\n    columns: [],\n    metrics: ['count'],\n    annotation_layers: [],\n    row_limit: 100,\n    row_offset: undefined,\n    series_columns: [],\n    series_limit: 0,\n    series_limit_metric: undefined,\n    url_params: {},\n    custom_params: {},\n    custom_form_data: {},\n    is_timeseries: true,\n    time_offsets: [],\n    post_processing: [\n      {\n        operation: 'pivot',\n        options: {\n          aggregates: {\n            count: {\n              operator: 'mean',\n            },\n          },\n          columns: [],\n          drop_missing_columns: false,\n          index: ['__timestamp'],\n        },\n      },\n      {\n        operation: 'flatten',\n      },\n    ],\n    orderby: [['count', true]],\n  });\n});","file":"MixedTimeseries/buildQuery.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"should compile AA in query A","suites":[],"updatePoint":{"line":196,"column":34},"line":196,"code":"test('should compile AA in query A', () => {\n  const query = buildQuery(formDataMixedChartWithAA).queries[0];\n  // time comparison\n  expect(query.time_offsets).toEqual(['1 years ago']);\n\n  // pivot\n  expect(\n    query.post_processing?.find(operator => operator?.operation === 'pivot'),\n  ).toEqual({\n    operation: 'pivot',\n    options: {\n      index: ['__timestamp'],\n      columns: ['foo'],\n      drop_missing_columns: false,\n      aggregates: {\n        'sum(sales)': { operator: 'mean' },\n        'sum(sales)__1 years ago': { operator: 'mean' },\n      },\n    },\n  });\n  // cumsum\n  expect(\n    // prettier-ignore\n    query\n      .post_processing\n      ?.find(operator => operator?.operation === 'cum')\n      ?.operation,\n  ).toEqual('cum');\n\n  // resample\n  expect(\n    // prettier-ignore\n    query\n      .post_processing\n      ?.find(operator => operator?.operation === 'resample'),\n  ).toEqual({\n    operation: 'resample',\n    options: {\n      method: 'asfreq',\n      rule: '1AS',\n      fill_value: 0,\n    },\n  });\n});","file":"MixedTimeseries/buildQuery.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"should compile AA in query B","suites":[],"updatePoint":{"line":241,"column":34},"line":241,"code":"test('should compile AA in query B', () => {\n  const query = buildQuery(formDataMixedChartWithAA).queries[1];\n  // time comparison\n  expect(query.time_offsets).toEqual(['3 years ago']);\n\n  // rolling total\n  expect(\n    // prettier-ignore\n    query\n      .post_processing\n      ?.find(operator => operator?.operation === 'rolling'),\n  ).toEqual({\n    operation: 'rolling',\n    options: {\n      rolling_type: 'sum',\n      window: 1,\n      min_periods: 1,\n      columns: {\n        count: 'count',\n        'count__3 years ago': 'count__3 years ago',\n      },\n    },\n  });\n\n  // resample\n  expect(\n    // prettier-ignore\n    query\n      .post_processing\n      ?.find(operator => operator?.operation === 'resample'),\n  ).toEqual({\n    operation: 'resample',\n    options: {\n      method: 'asfreq',\n      rule: '1A',\n      fill_value: null,\n    },\n  });\n});","file":"MixedTimeseries/buildQuery.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"should convert a queryObject with x-axis although FF is disabled","suites":[],"updatePoint":{"line":281,"column":70},"line":281,"code":"test('should convert a queryObject with x-axis although FF is disabled', () => {\n  let windowSpy: any;\n\n  beforeAll(() => {\n    // @ts-ignore\n    windowSpy = jest.spyOn(window, 'window', 'get').mockImplementation(() => ({\n      featureFlags: {\n        GENERIC_CHART_AXES: false,\n      },\n    }));\n  });\n\n  afterAll(() => {\n    windowSpy.mockRestore();\n  });\n\n  const { queries } = buildQuery({\n    ...formDataMixedChart,\n    x_axis: 'my_index',\n  });\n  expect(queries[0]).toEqual({\n    time_range: '1980 : 2000',\n    since: undefined,\n    until: undefined,\n    granularity: 'ds',\n    filters: [],\n    extras: {\n      having: '',\n      where: \"(foo in ('a', 'b'))\",\n    },\n    applied_time_extras: {},\n    columns: [\n      {\n        columnType: 'BASE_AXIS',\n        expressionType: 'SQL',\n        label: 'my_index',\n        sqlExpression: 'my_index',\n        timeGrain: 'P1W',\n      },\n      'foo',\n    ],\n    metrics: ['sum(sales)'],\n    annotation_layers: [],\n    row_limit: 10,\n    row_offset: undefined,\n    series_columns: ['foo'],\n    series_limit: 5,\n    series_limit_metric: undefined,\n    url_params: {},\n    custom_params: {},\n    custom_form_data: {},\n    time_offsets: [],\n    post_processing: [\n      {\n        operation: 'pivot',\n        options: {\n          aggregates: {\n            'sum(sales)': {\n              operator: 'mean',\n            },\n          },\n          columns: ['foo'],\n          drop_missing_columns: false,\n          index: ['my_index'],\n        },\n      },\n      {\n        operation: 'rename',\n        options: {\n          columns: {\n            'sum(sales)': null,\n          },\n          inplace: true,\n          level: 0,\n        },\n      },\n      {\n        operation: 'flatten',\n      },\n    ],\n    orderby: [['count', false]],\n  });\n\n  // check the main props on the second query\n  expect(queries[1]).toEqual(\n    expect.objectContaining({\n      columns: [\n        {\n          columnType: 'BASE_AXIS',\n          expressionType: 'SQL',\n          label: 'my_index',\n          sqlExpression: 'my_index',\n          timeGrain: 'P1W',\n        },\n      ],\n      granularity: 'ds',\n      series_columns: [],\n      metrics: ['count'],\n      post_processing: [\n        {\n          operation: 'pivot',\n          options: {\n            aggregates: {\n              count: {\n                operator: 'mean',\n              },\n            },\n            columns: [],\n            drop_missing_columns: false,\n            index: ['my_index'],\n          },\n        },\n        {\n          operation: 'flatten',\n        },\n      ],\n    }),\n  );\n});","file":"MixedTimeseries/buildQuery.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"shouldn't convert a queryObject with axis although FF is enabled","suites":[],"updatePoint":{"line":401,"column":70},"line":401,"code":"test(\"shouldn't convert a queryObject with axis although FF is enabled\", () => {\n  const windowSpy = jest\n    .spyOn(window, 'window', 'get')\n    // @ts-ignore\n    .mockImplementation(() => ({\n      featureFlags: {\n        GENERIC_CHART_AXES: true,\n      },\n    }));\n\n  const { queries } = buildQuery(formDataMixedChart);\n  expect(queries[0]).toEqual(\n    expect.objectContaining({\n      granularity: 'ds',\n      columns: ['foo'],\n      series_columns: ['foo'],\n      metrics: ['sum(sales)'],\n      is_timeseries: true,\n      extras: {\n        time_grain_sqla: 'P1W',\n        having: '',\n        where: \"(foo in ('a', 'b'))\",\n      },\n      post_processing: [\n        {\n          operation: 'pivot',\n          options: {\n            aggregates: {\n              'sum(sales)': {\n                operator: 'mean',\n              },\n            },\n            columns: ['foo'],\n            drop_missing_columns: false,\n            index: ['__timestamp'],\n          },\n        },\n        {\n          operation: 'rename',\n          options: { columns: { 'sum(sales)': null }, inplace: true, level: 0 },\n        },\n        {\n          operation: 'flatten',\n        },\n      ],\n    }),\n  );\n  expect(queries[1]).toEqual(\n    expect.objectContaining({\n      granularity: 'ds',\n      columns: [],\n      series_columns: [],\n      metrics: ['count'],\n      is_timeseries: true,\n      extras: {\n        time_grain_sqla: 'P1W',\n        having: '',\n        where: \"(name in ('c', 'd'))\",\n      },\n      post_processing: [\n        {\n          operation: 'pivot',\n          options: {\n            aggregates: {\n              count: {\n                operator: 'mean',\n              },\n            },\n            columns: [],\n            drop_missing_columns: false,\n            index: ['__timestamp'],\n          },\n        },\n        {\n          operation: 'flatten',\n        },\n      ],\n    }),\n  );\n\n  windowSpy.mockRestore();\n});","file":"MixedTimeseries/buildQuery.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"ensure correct pivot columns with GENERIC_CHART_AXES enabled","suites":[],"updatePoint":{"line":484,"column":66},"line":484,"code":"test('ensure correct pivot columns with GENERIC_CHART_AXES enabled', () => {\n  const windowSpy = jest\n    .spyOn(window, 'window', 'get')\n    // @ts-ignore\n    .mockImplementation(() => ({\n      featureFlags: {\n        GENERIC_CHART_AXES: true,\n      },\n    }));\n\n  const query = buildQuery({ ...formDataMixedChartWithAA, x_axis: 'ds' })\n    .queries[0];\n\n  expect(query.time_offsets).toEqual(['1 years ago']);\n\n  // pivot\n  expect(\n    query.post_processing?.find(operator => operator?.operation === 'pivot'),\n  ).toEqual({\n    operation: 'pivot',\n    options: {\n      index: ['ds'],\n      columns: ['foo'],\n      drop_missing_columns: false,\n      aggregates: {\n        'sum(sales)': { operator: 'mean' },\n        'sum(sales)__1 years ago': { operator: 'mean' },\n      },\n    },\n  });\n\n  windowSpy.mockRestore();\n});","file":"MixedTimeseries/buildQuery.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"should build query fields from form data","suites":["Pie buildQuery"],"updatePoint":{"line":30,"column":46},"line":30,"code":"  it('should build query fields from form data', () => {\n    const queryContext = buildQuery(formData);\n    const [query] = queryContext.queries;\n    expect(query.metrics).toEqual(['foo']);\n    expect(query.columns).toEqual(['bar']);\n  });","file":"Pie/buildQuery.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"should transform chart props for viz","suites":["Pie transformProps"],"updatePoint":{"line":52,"column":42},"line":52,"code":"  it('should transform chart props for viz', () => {\n    expect(transformProps(chartProps as EchartsPieChartProps)).toEqual(\n      expect.objectContaining({\n        width: 800,\n        height: 600,\n        echartOptions: expect.objectContaining({\n          series: [\n            expect.objectContaining({\n              avoidLabelOverlap: true,\n              data: expect.arrayContaining([\n                expect.objectContaining({\n                  name: 'Arnold, 2',\n                  value: 2.5,\n                }),\n                expect.objectContaining({\n                  name: 'Sylvester, 1',\n                  value: 10,\n                }),\n              ]),\n            }),\n          ],\n        }),\n      }),\n    );\n  });","file":"Pie/transformProps.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"should generate a valid pie chart label","suites":["formatPieLabel"],"updatePoint":{"line":80,"column":45},"line":80,"code":"  it('should generate a valid pie chart label', () => {\n    const numberFormatter = getNumberFormatter();\n    const params = { name: 'My Label', value: 1234, percent: 12.34 };\n    expect(\n      formatPieLabel({\n        params,\n        numberFormatter,\n        labelType: EchartsPieLabelType.Key,\n      }),\n    ).toEqual('My Label');\n    expect(\n      formatPieLabel({\n        params,\n        numberFormatter,\n        labelType: EchartsPieLabelType.Value,\n      }),\n    ).toEqual('1.23k');\n    expect(\n      formatPieLabel({\n        params,\n        numberFormatter,\n        labelType: EchartsPieLabelType.Percent,\n      }),\n    ).toEqual('12.34%');\n    expect(\n      formatPieLabel({\n        params,\n        numberFormatter,\n        labelType: EchartsPieLabelType.KeyValue,\n      }),\n    ).toEqual('My Label: 1.23k');\n    expect(\n      formatPieLabel({\n        params,\n        numberFormatter,\n        labelType: EchartsPieLabelType.KeyPercent,\n      }),\n    ).toEqual('My Label: 12.34%');\n    expect(\n      formatPieLabel({\n        params,\n        numberFormatter,\n        labelType: EchartsPieLabelType.KeyValuePercent,\n      }),\n    ).toEqual('My Label: 1.23k (12.34%)');\n    expect(\n      formatPieLabel({\n        params: { ...params, name: '<NULL>' },\n        numberFormatter,\n        labelType: EchartsPieLabelType.Key,\n      }),\n    ).toEqual('<NULL>');\n    expect(\n      formatPieLabel({\n        params: { ...params, name: '<NULL>' },\n        numberFormatter,\n        labelType: EchartsPieLabelType.Key,\n        sanitizeName: true,\n      }),\n    ).toEqual('&lt;NULL&gt;');\n  });","file":"Pie/transformProps.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"should build groupby with series in form data","suites":["Timeseries buildQuery"],"updatePoint":{"line":30,"column":51},"line":30,"code":"  it('should build groupby with series in form data', () => {\n    const queryContext = buildQuery(formData);\n    const [query] = queryContext.queries;\n    expect(query.metrics).toEqual(['bar', 'baz']);\n  });","file":"Timeseries/buildQuery.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"should order by timeseries limit if orderby unspecified","suites":["Timeseries buildQuery"],"updatePoint":{"line":36,"column":61},"line":36,"code":"  it('should order by timeseries limit if orderby unspecified', () => {\n    const queryContext = buildQuery({\n      ...formData,\n      timeseries_limit_metric: 'bar',\n      order_desc: true,\n    });\n    const [query] = queryContext.queries;\n    expect(query.metrics).toEqual(['bar', 'baz']);\n    expect(query.series_limit_metric).toEqual('bar');\n    expect(query.order_desc).toEqual(true);\n    expect(query.orderby).toEqual([['bar', false]]);\n  });","file":"Timeseries/buildQuery.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"should not order by timeseries limit if orderby provided","suites":["Timeseries buildQuery"],"updatePoint":{"line":49,"column":62},"line":49,"code":"  it('should not order by timeseries limit if orderby provided', () => {\n    const queryContext = buildQuery({\n      ...formData,\n      timeseries_limit_metric: 'bar',\n      order_desc: true,\n      orderby: [['foo', true]],\n    });\n    const [query] = queryContext.queries;\n    expect(query.metrics).toEqual(['bar', 'baz']);\n    expect(query.series_limit_metric).toEqual('bar');\n    expect(query.order_desc).toEqual(true);\n    expect(query.orderby).toEqual([['foo', true]]);\n  });","file":"Timeseries/buildQuery.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"shouldn't convert queryObject","suites":["GENERIC_CHART_AXES is enabled"],"updatePoint":{"line":90,"column":35},"line":90,"code":"  it(\"shouldn't convert queryObject\", () => {\n    const { queries } = buildQuery(formData);\n    expect(queries[0]).toEqual(\n      expect.objectContaining({\n        granularity: 'time_column',\n        time_range: '1 year ago : 2013',\n        extras: { time_grain_sqla: 'P1Y', having: '', where: '' },\n        columns: ['col1'],\n        series_columns: ['col1'],\n        metrics: ['count(*)'],\n        is_timeseries: true,\n        post_processing: [\n          {\n            operation: 'pivot',\n            options: {\n              aggregates: { 'count(*)': { operator: 'mean' } },\n              columns: ['col1'],\n              drop_missing_columns: true,\n              index: ['__timestamp'],\n            },\n          },\n          { operation: 'flatten' },\n        ],\n      }),\n    );\n  });","file":"Timeseries/buildQuery.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"should convert queryObject","suites":["GENERIC_CHART_AXES is enabled"],"updatePoint":{"line":117,"column":32},"line":117,"code":"  it('should convert queryObject', () => {\n    const { queries } = buildQuery({ ...formData, x_axis: 'time_column' });\n    expect(queries[0]).toEqual(\n      expect.objectContaining({\n        granularity: 'time_column',\n        time_range: '1 year ago : 2013',\n        extras: { having: '', where: '' },\n        columns: [\n          {\n            columnType: 'BASE_AXIS',\n            expressionType: 'SQL',\n            label: 'time_column',\n            sqlExpression: 'time_column',\n            timeGrain: 'P1Y',\n          },\n          'col1',\n        ],\n        series_columns: ['col1'],\n        metrics: ['count(*)'],\n        post_processing: [\n          {\n            operation: 'pivot',\n            options: {\n              aggregates: { 'count(*)': { operator: 'mean' } },\n              columns: ['col1'],\n              drop_missing_columns: true,\n              index: ['time_column'],\n            },\n          },\n          { operation: 'flatten' },\n        ],\n      }),\n    );\n  });","file":"Timeseries/buildQuery.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"shouldn't convert queryObject","suites":["GENERIC_CHART_AXES is disabled"],"updatePoint":{"line":179,"column":35},"line":179,"code":"  it(\"shouldn't convert queryObject\", () => {\n    const { queries } = buildQuery(formData);\n    expect(queries[0]).toEqual(\n      expect.objectContaining({\n        granularity: 'time_column',\n        time_range: '1 year ago : 2013',\n        extras: { time_grain_sqla: 'P1Y', having: '', where: '' },\n        columns: ['col1'],\n        series_columns: ['col1'],\n        metrics: ['count(*)'],\n        is_timeseries: true,\n        post_processing: [\n          {\n            operation: 'pivot',\n            options: {\n              aggregates: { 'count(*)': { operator: 'mean' } },\n              columns: ['col1'],\n              drop_missing_columns: true,\n              index: ['__timestamp'],\n            },\n          },\n          { operation: 'flatten' },\n        ],\n      }),\n    );\n  });","file":"Timeseries/buildQuery.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"should convert queryObject","suites":["GENERIC_CHART_AXES is disabled"],"updatePoint":{"line":206,"column":32},"line":206,"code":"  it('should convert queryObject', () => {\n    const { queries } = buildQuery({ ...formData, x_axis: 'time_column' });\n    expect(queries[0]).toEqual(\n      expect.objectContaining({\n        granularity: 'time_column',\n        time_range: '1 year ago : 2013',\n        extras: { having: '', where: '' },\n        columns: [\n          {\n            columnType: 'BASE_AXIS',\n            expressionType: 'SQL',\n            label: 'time_column',\n            sqlExpression: 'time_column',\n            timeGrain: 'P1Y',\n          },\n          'col1',\n        ],\n        series_columns: ['col1'],\n        metrics: ['count(*)'],\n        post_processing: [\n          {\n            operation: 'pivot',\n            options: {\n              aggregates: { 'count(*)': { operator: 'mean' } },\n              columns: ['col1'],\n              drop_missing_columns: true,\n              index: ['time_column'],\n            },\n          },\n          { operation: 'flatten' },\n        ],\n      }),\n    );\n  });","file":"Timeseries/buildQuery.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"should transform chart props for viz","suites":["EchartsTimeseries transformProps"],"updatePoint":{"line":59,"column":42},"line":59,"code":"  it('should transform chart props for viz', () => {\n    const chartProps = new ChartProps(chartPropsConfig);\n    expect(transformProps(chartProps as EchartsTimeseriesChartProps)).toEqual(\n      expect.objectContaining({\n        width: 800,\n        height: 600,\n        echartOptions: expect.objectContaining({\n          legend: expect.objectContaining({\n            data: ['San Francisco', 'New York'],\n          }),\n          series: expect.arrayContaining([\n            expect.objectContaining({\n              data: [\n                [599616000000, 1],\n                [599916000000, 3],\n              ],\n              name: 'San Francisco',\n            }),\n            expect.objectContaining({\n              data: [\n                [599616000000, 2],\n                [599916000000, 4],\n              ],\n              name: 'New York',\n            }),\n          ]),\n        }),\n      }),\n    );\n  });","file":"Timeseries/transformProps.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"should transform chart props for horizontal viz","suites":["EchartsTimeseries transformProps"],"updatePoint":{"line":90,"column":53},"line":90,"code":"  it('should transform chart props for horizontal viz', () => {\n    const chartProps = new ChartProps({\n      ...chartPropsConfig,\n      formData: {\n        ...formData,\n        orientation: 'horizontal',\n      },\n    });\n    expect(transformProps(chartProps as EchartsTimeseriesChartProps)).toEqual(\n      expect.objectContaining({\n        width: 800,\n        height: 600,\n        echartOptions: expect.objectContaining({\n          legend: expect.objectContaining({\n            data: ['San Francisco', 'New York'],\n          }),\n          series: expect.arrayContaining([\n            expect.objectContaining({\n              data: [\n                [1, 599616000000],\n                [3, 599916000000],\n              ],\n              name: 'San Francisco',\n            }),\n            expect.objectContaining({\n              data: [\n                [2, 599616000000],\n                [4, 599916000000],\n              ],\n              name: 'New York',\n            }),\n          ]),\n          yAxis: expect.objectContaining({ inverse: true }),\n        }),\n      }),\n    );\n  });","file":"Timeseries/transformProps.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"should add a formula annotation to viz","suites":["EchartsTimeseries transformProps"],"updatePoint":{"line":128,"column":44},"line":128,"code":"  it('should add a formula annotation to viz', () => {\n    const formula: FormulaAnnotationLayer = {\n      name: 'My Formula',\n      annotationType: AnnotationType.Formula,\n      value: 'x+1',\n      style: AnnotationStyle.Solid,\n      show: true,\n      showLabel: true,\n    };\n    const chartProps = new ChartProps({\n      ...chartPropsConfig,\n      formData: {\n        ...formData,\n        annotationLayers: [formula],\n      },\n    });\n    expect(transformProps(chartProps as EchartsTimeseriesChartProps)).toEqual(\n      expect.objectContaining({\n        width: 800,\n        height: 600,\n        echartOptions: expect.objectContaining({\n          legend: expect.objectContaining({\n            data: ['San Francisco', 'New York', 'My Formula'],\n          }),\n          series: expect.arrayContaining([\n            expect.objectContaining({\n              data: [\n                [599616000000, 1],\n                [599916000000, 3],\n              ],\n              name: 'San Francisco',\n            }),\n            expect.objectContaining({\n              data: [\n                [599616000000, 2],\n                [599916000000, 4],\n              ],\n              name: 'New York',\n            }),\n            expect.objectContaining({\n              data: [\n                [599616000000, 599616000001],\n                [599916000000, 599916000001],\n              ],\n              name: 'My Formula',\n            }),\n          ]),\n        }),\n      }),\n    );\n  });","file":"Timeseries/transformProps.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"should add an interval, event and timeseries annotation to viz","suites":["EchartsTimeseries transformProps"],"updatePoint":{"line":180,"column":68},"line":180,"code":"  it('should add an interval, event and timeseries annotation to viz', () => {\n    const event: EventAnnotationLayer = {\n      annotationType: AnnotationType.Event,\n      name: 'My Event',\n      show: true,\n      showLabel: true,\n      sourceType: AnnotationSourceType.Native,\n      style: AnnotationStyle.Solid,\n      value: 1,\n    };\n\n    const interval: IntervalAnnotationLayer = {\n      annotationType: AnnotationType.Interval,\n      name: 'My Interval',\n      show: true,\n      showLabel: true,\n      sourceType: AnnotationSourceType.Table,\n      titleColumn: '',\n      timeColumn: 'start',\n      intervalEndColumn: '',\n      descriptionColumns: [],\n      style: AnnotationStyle.Dashed,\n      value: 2,\n    };\n\n    const timeseries: TimeseriesAnnotationLayer = {\n      annotationType: AnnotationType.Timeseries,\n      name: 'My Timeseries',\n      show: true,\n      showLabel: true,\n      sourceType: AnnotationSourceType.Line,\n      style: AnnotationStyle.Solid,\n      titleColumn: '',\n      value: 3,\n    };\n    const annotationData = {\n      'My Event': {\n        columns: [\n          'start_dttm',\n          'end_dttm',\n          'short_descr',\n          'long_descr',\n          'json_metadata',\n        ],\n        records: [\n          {\n            start_dttm: 0,\n            end_dttm: 1000,\n            short_descr: '',\n            long_descr: '',\n            json_metadata: null,\n          },\n        ],\n      },\n      'My Interval': {\n        columns: ['start', 'end', 'title'],\n        records: [\n          {\n            start: 2000,\n            end: 3000,\n            title: 'My Title',\n          },\n        ],\n      },\n      'My Timeseries': [\n        {\n          key: 'My Line',\n          values: [\n            {\n              x: 10000,\n              y: 11000,\n            },\n            {\n              x: 20000,\n              y: 21000,\n            },\n          ],\n        },\n      ],\n    };\n    const chartProps = new ChartProps({\n      ...chartPropsConfig,\n      formData: {\n        ...formData,\n        annotationLayers: [event, interval, timeseries],\n      },\n      annotationData,\n      queriesData: [\n        {\n          ...queriesData[0],\n          annotation_data: annotationData,\n        },\n      ],\n    });\n    expect(transformProps(chartProps as EchartsTimeseriesChartProps)).toEqual(\n      expect.objectContaining({\n        echartOptions: expect.objectContaining({\n          legend: expect.objectContaining({\n            data: ['San Francisco', 'New York', 'My Line'],\n          }),\n          series: expect.arrayContaining([\n            expect.objectContaining({\n              type: 'line',\n              id: 'My Line',\n            }),\n            expect.objectContaining({\n              type: 'line',\n              id: 'Event - My Event',\n            }),\n            expect.objectContaining({\n              type: 'line',\n              id: 'Interval - My Interval',\n            }),\n          ]),\n        }),\n      }),\n    );\n  });","file":"Timeseries/transformProps.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"Should add a baseline series for stream graph","suites":["EchartsTimeseries transformProps"],"updatePoint":{"line":299,"column":51},"line":299,"code":"  it('Should add a baseline series for stream graph', () => {\n    const streamQueriesData = [\n      {\n        data: [\n          {\n            'San Francisco': 120,\n            'New York': 220,\n            Boston: 150,\n            Miami: 270,\n            Denver: 800,\n            __timestamp: 599616000000,\n          },\n          {\n            'San Francisco': 150,\n            'New York': 190,\n            Boston: 240,\n            Miami: 350,\n            Denver: 700,\n            __timestamp: 599616000001,\n          },\n          {\n            'San Francisco': 130,\n            'New York': 300,\n            Boston: 250,\n            Miami: 410,\n            Denver: 650,\n            __timestamp: 599616000002,\n          },\n          {\n            'San Francisco': 90,\n            'New York': 340,\n            Boston: 300,\n            Miami: 480,\n            Denver: 590,\n            __timestamp: 599616000003,\n          },\n          {\n            'San Francisco': 260,\n            'New York': 200,\n            Boston: 420,\n            Miami: 490,\n            Denver: 760,\n            __timestamp: 599616000004,\n          },\n          {\n            'San Francisco': 250,\n            'New York': 250,\n            Boston: 380,\n            Miami: 360,\n            Denver: 400,\n            __timestamp: 599616000005,\n          },\n          {\n            'San Francisco': 160,\n            'New York': 210,\n            Boston: 330,\n            Miami: 440,\n            Denver: 580,\n            __timestamp: 599616000006,\n          },\n        ],\n      },\n    ];\n    const streamFormData = { ...formData, stack: 'Stream' };\n    const props = {\n      ...chartPropsConfig,\n      formData: streamFormData,\n      queriesData: streamQueriesData,\n    };\n\n    const chartProps = new ChartProps(props);\n    expect(\n      (\n        transformProps(chartProps as EchartsTimeseriesChartProps).echartOptions\n          .series as any[]\n      )[0],\n    ).toEqual({\n      areaStyle: {\n        opacity: 0,\n      },\n      lineStyle: {\n        opacity: 0,\n      },\n      name: 'baseline',\n      showSymbol: false,\n      silent: true,\n      smooth: false,\n      stack: 'obs',\n      stackStrategy: 'all',\n      step: undefined,\n      tooltip: {\n        show: false,\n      },\n      type: 'line',\n      data: [\n        [599616000000, -415.7692307692308],\n        [599616000001, -403.6219915054271],\n        [599616000002, -476.32314093071443],\n        [599616000003, -514.2120298196033],\n        [599616000004, -485.7378514158475],\n        [599616000005, -419.6402904402378],\n        [599616000006, -442.9833136960517],\n      ],\n    });\n  });","file":"Timeseries/transformProps.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"should show labels when showValue is true","suites":["Does transformProps transform series correctly"],"updatePoint":{"line":481,"column":47},"line":481,"code":"  it('should show labels when showValue is true', () => {\n    const chartProps = new ChartProps(chartPropsConfig);\n\n    const transformedSeries = transformProps(\n      chartProps as EchartsTimeseriesChartProps,\n    ).echartOptions.series as seriesType[];\n\n    transformedSeries.forEach(series => {\n      expect(series.label.show).toBe(true);\n    });\n  });","file":"Timeseries/transformProps.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"should not show labels when showValue is false","suites":["Does transformProps transform series correctly"],"updatePoint":{"line":493,"column":52},"line":493,"code":"  it('should not show labels when showValue is false', () => {\n    const updatedChartPropsConfig = {\n      ...chartPropsConfig,\n      formData: { ...formData, showValue: false },\n    };\n\n    const chartProps = new ChartProps(updatedChartPropsConfig);\n\n    const transformedSeries = transformProps(\n      chartProps as EchartsTimeseriesChartProps,\n    ).echartOptions.series as seriesType[];\n\n    transformedSeries.forEach(series => {\n      expect(series.label.show).toBe(false);\n    });\n  });","file":"Timeseries/transformProps.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"should show only totals when onlyTotal is true","suites":["Does transformProps transform series correctly"],"updatePoint":{"line":510,"column":52},"line":510,"code":"  it('should show only totals when onlyTotal is true', () => {\n    const updatedChartPropsConfig = {\n      ...chartPropsConfig,\n      formData: { ...formData, onlyTotal: true },\n    };\n\n    const chartProps = new ChartProps(updatedChartPropsConfig);\n\n    const transformedSeries = transformProps(\n      chartProps as EchartsTimeseriesChartProps,\n    ).echartOptions.series as seriesType[];\n\n    const showValueIndexes: number[] = [];\n\n    transformedSeries.forEach((entry, seriesIndex) => {\n      const { data = [] } = entry;\n      (data as [Date, number][]).forEach((datum, dataIndex) => {\n        if (datum[1] !== null) {\n          showValueIndexes[dataIndex] = seriesIndex;\n        }\n      });\n    });\n\n    transformedSeries.forEach((series, seriesIndex) => {\n      expect(series.label.show).toBe(true);\n      series.data.forEach((value, dataIndex) => {\n        const params = {\n          value,\n          dataIndex,\n          seriesIndex,\n        };\n\n        let expectedLabel: string;\n\n        if (seriesIndex === showValueIndexes[dataIndex]) {\n          expectedLabel = String(totalStackedValues[dataIndex]);\n        } else {\n          expectedLabel = '';\n        }\n\n        expect(series.label.formatter(params)).toBe(expectedLabel);\n      });\n    });\n  });","file":"Timeseries/transformProps.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"should show labels on values >= percentageThreshold if onlyTotal is false","suites":["Does transformProps transform series correctly"],"updatePoint":{"line":555,"column":79},"line":555,"code":"  it('should show labels on values >= percentageThreshold if onlyTotal is false', () => {\n    const chartProps = new ChartProps(chartPropsConfig);\n\n    const transformedSeries = transformProps(\n      chartProps as EchartsTimeseriesChartProps,\n    ).echartOptions.series as seriesType[];\n\n    const expectedThresholds = totalStackedValues.map(\n      total => ((formData.percentageThreshold || 0) / 100) * total,\n    );\n\n    transformedSeries.forEach((series, seriesIndex) => {\n      expect(series.label.show).toBe(true);\n      series.data.forEach((value, dataIndex) => {\n        const params = {\n          value,\n          dataIndex,\n          seriesIndex,\n        };\n        const expectedLabel =\n          value[1] >= expectedThresholds[dataIndex] ? String(value[1]) : '';\n        expect(series.label.formatter(params)).toBe(expectedLabel);\n      });\n    });\n  });","file":"Timeseries/transformProps.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"should not apply percentage threshold when showValue is true and stack is false","suites":["Does transformProps transform series correctly"],"updatePoint":{"line":581,"column":85},"line":581,"code":"  it('should not apply percentage threshold when showValue is true and stack is false', () => {\n    const updatedChartPropsConfig = {\n      ...chartPropsConfig,\n      formData: { ...formData, stack: false },\n    };\n\n    const chartProps = new ChartProps(updatedChartPropsConfig);\n\n    const transformedSeries = transformProps(\n      chartProps as EchartsTimeseriesChartProps,\n    ).echartOptions.series as seriesType[];\n\n    transformedSeries.forEach((series, seriesIndex) => {\n      expect(series.label.show).toBe(true);\n      series.data.forEach((value, dataIndex) => {\n        const params = {\n          value,\n          dataIndex,\n          seriesIndex,\n        };\n        const expectedLabel = String(value[1]);\n        expect(series.label.formatter(params)).toBe(expectedLabel);\n      });\n    });\n  });","file":"Timeseries/transformProps.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"should remove time shift labels from label_map","suites":["Does transformProps transform series correctly"],"updatePoint":{"line":607,"column":52},"line":607,"code":"  it('should remove time shift labels from label_map', () => {\n    const updatedChartPropsConfig = {\n      ...chartPropsConfig,\n      formData: {\n        ...formData,\n        timeCompare: ['1 year ago'],\n      },\n      queriesData: [\n        {\n          ...queriesData[0],\n          label_map: {\n            '1 year ago, foo1, bar1': ['1 year ago', 'foo1', 'bar1'],\n            '1 year ago, foo2, bar2': ['1 year ago', 'foo2', 'bar2'],\n            'foo1, bar1': ['foo1', 'bar1'],\n            'foo2, bar2': ['foo2', 'bar2'],\n          },\n        },\n      ],\n    };\n    const chartProps = new ChartProps(updatedChartPropsConfig);\n    const transformedProps = transformProps(\n      chartProps as EchartsTimeseriesChartProps,\n    );\n    expect(transformedProps.labelMap).toEqual({\n      '1 year ago, foo1, bar1': ['foo1', 'bar1'],\n      '1 year ago, foo2, bar2': ['foo2', 'bar2'],\n      'foo1, bar1': ['foo1', 'bar1'],\n      'foo2, bar2': ['foo2', 'bar2'],\n    });\n  });","file":"Timeseries/transformProps.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"should build query","suites":["Tree buildQuery"],"updatePoint":{"line":22,"column":24},"line":22,"code":"  it('should build query', () => {\n    const formData = {\n      datasource: '5__table',\n      granularity_sqla: 'ds',\n      id: 'id_col',\n      parent: 'relation_col',\n      name: 'name_col',\n      metrics: ['foo', 'bar'],\n      viz_type: 'my_chart',\n    };\n    const queryContext = buildQuery(formData);\n    const [query] = queryContext.queries;\n    expect(query.columns).toEqual(['id_col', 'relation_col', 'name_col']);\n    expect(query.metrics).toEqual(['foo', 'bar']);\n  });","file":"Tree/buildQuery.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"should build query without name column","suites":["Tree buildQuery"],"updatePoint":{"line":37,"column":44},"line":37,"code":"  it('should build query without name column', () => {\n    const formData = {\n      datasource: '5__table',\n      granularity_sqla: 'ds',\n      id: 'id_col',\n      parent: 'relation_col',\n      metrics: ['foo', 'bar'],\n      viz_type: 'my_chart',\n    };\n    const queryContext = buildQuery(formData);\n    const [query] = queryContext.queries;\n    expect(query.columns).toEqual(['id_col', 'relation_col']);\n    expect(query.metrics).toEqual(['foo', 'bar']);\n  });","file":"Tree/buildQuery.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"should transform when parent present before child","suites":["EchartsTree transformProps"],"updatePoint":{"line":40,"column":55},"line":40,"code":"  it('should transform when parent present before child', () => {\n    const queriesData = [\n      {\n        colnames: ['id_column', 'relation_column', 'name_column', 'count'],\n        data: [\n          {\n            id_column: '1',\n            relation_column: null,\n            name_column: 'root',\n            count: 10,\n          },\n          {\n            id_column: '2',\n            relation_column: '1',\n            name_column: 'first_child',\n            count: 10,\n          },\n          {\n            id_column: '3',\n            relation_column: '2',\n            name_column: 'second_child',\n            count: 10,\n          },\n          {\n            id_column: '4',\n            relation_column: '3',\n            name_column: 'third_child',\n            count: 10,\n          },\n        ],\n      },\n    ];\n\n    const chartProps = new ChartProps({ ...chartPropsConfig, queriesData });\n    expect(transformProps(chartProps as EchartsTreeChartProps)).toEqual(\n      expect.objectContaining({\n        width: 800,\n        height: 600,\n        echartOptions: expect.objectContaining({\n          series: expect.arrayContaining([\n            expect.objectContaining({\n              data: [\n                {\n                  name: 'root',\n                  children: [\n                    {\n                      name: 'first_child',\n                      value: 10,\n                      children: [\n                        {\n                          name: 'second_child',\n                          value: 10,\n                          children: [\n                            { name: 'third_child', value: 10, children: [] },\n                          ],\n                        },\n                      ],\n                    },\n                  ],\n                },\n              ],\n            }),\n          ]),\n        }),\n      }),\n    );\n  });","file":"Tree/transformProps.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"should transform when child is present before parent","suites":["EchartsTree transformProps"],"updatePoint":{"line":107,"column":58},"line":107,"code":"  it('should transform when child is present before parent', () => {\n    const queriesData = [\n      {\n        colnames: ['id_column', 'relation_column', 'name_column', 'count'],\n        data: [\n          {\n            id_column: '1',\n            relation_column: null,\n            name_column: 'root',\n            count: 10,\n          },\n          {\n            id_column: '2',\n            relation_column: '4',\n            name_column: 'second_child',\n            count: 20,\n          },\n          {\n            id_column: '3',\n            relation_column: '4',\n            name_column: 'second_child',\n            count: 30,\n          },\n          {\n            id_column: '4',\n            relation_column: '1',\n            name_column: 'first_child',\n            count: 40,\n          },\n        ],\n      },\n    ];\n\n    const chartProps = new ChartProps({ ...chartPropsConfig, queriesData });\n    expect(transformProps(chartProps as EchartsTreeChartProps)).toEqual(\n      expect.objectContaining({\n        width: 800,\n        height: 600,\n        echartOptions: expect.objectContaining({\n          series: expect.arrayContaining([\n            expect.objectContaining({\n              data: [\n                {\n                  name: 'root',\n                  children: [\n                    {\n                      name: 'first_child',\n                      value: 40,\n                      children: [\n                        {\n                          name: 'second_child',\n                          value: 20,\n                          children: [],\n                        },\n                        {\n                          name: 'second_child',\n                          value: 30,\n                          children: [],\n                        },\n                      ],\n                    },\n                  ],\n                },\n              ],\n            }),\n          ]),\n        }),\n      }),\n    );\n  });","file":"Tree/transformProps.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"ignore node if not attached to root","suites":["EchartsTree transformProps"],"updatePoint":{"line":177,"column":41},"line":177,"code":"  it('ignore node if not attached to root', () => {\n    const formData = {\n      colorScheme: 'bnbColors',\n      datasource: '3__table',\n      granularity_sqla: 'ds',\n      metric: 'count',\n      id: 'id_column',\n      parent: 'relation_column',\n      name: 'name_column',\n      rootNodeId: '2',\n    };\n    const chartPropsConfig = {\n      formData,\n      width: 800,\n      height: 600,\n      theme: supersetTheme,\n    };\n    const queriesData = [\n      {\n        colnames: ['id_column', 'relation_column', 'name_column', 'count'],\n        data: [\n          {\n            id_column: '1',\n            relation_column: null,\n            name_column: 'root',\n            count: 10,\n          },\n          {\n            id_column: '2',\n            relation_column: '1',\n            name_column: 'first_child',\n            count: 10,\n          },\n          {\n            id_column: '3',\n            relation_column: '2',\n            name_column: 'second_child',\n            count: 10,\n          },\n          {\n            id_column: '4',\n            relation_column: '3',\n            name_column: 'third_child',\n            count: 20,\n          },\n        ],\n      },\n    ];\n\n    const chartProps = new ChartProps({ ...chartPropsConfig, queriesData });\n    expect(transformProps(chartProps as EchartsTreeChartProps)).toEqual(\n      expect.objectContaining({\n        width: 800,\n        height: 600,\n        echartOptions: expect.objectContaining({\n          series: expect.arrayContaining([\n            expect.objectContaining({\n              data: [\n                {\n                  name: 'first_child',\n                  children: [\n                    {\n                      name: 'second_child',\n                      value: 10,\n                      children: [\n                        {\n                          name: 'third_child',\n                          value: 20,\n                          children: [],\n                        },\n                      ],\n                    },\n                  ],\n                },\n              ],\n            }),\n          ]),\n        }),\n      }),\n    );\n  });","file":"Tree/transformProps.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"should transform props if name column is not specified","suites":["EchartsTree transformProps"],"updatePoint":{"line":258,"column":60},"line":258,"code":"  it('should transform props if name column is not specified', () => {\n    const formData = {\n      colorScheme: 'bnbColors',\n      datasource: '3__table',\n      granularity_sqla: 'ds',\n      metric: 'count',\n      id: 'id_column',\n      parent: 'relation_column',\n      rootNodeId: '1',\n    };\n    const chartPropsConfig = {\n      formData,\n      width: 800,\n      height: 600,\n      theme: supersetTheme,\n    };\n    const queriesData = [\n      {\n        colnames: ['id_column', 'relation_column', 'count'],\n        data: [\n          {\n            id_column: '1',\n            relation_column: null,\n            count: 10,\n          },\n          {\n            id_column: '2',\n            relation_column: '1',\n            count: 10,\n          },\n          {\n            id_column: '3',\n            relation_column: '2',\n            count: 10,\n          },\n          {\n            id_column: '4',\n            relation_column: '3',\n            count: 20,\n          },\n        ],\n      },\n    ];\n\n    const chartProps = new ChartProps({ ...chartPropsConfig, queriesData });\n    expect(transformProps(chartProps as EchartsTreeChartProps)).toEqual(\n      expect.objectContaining({\n        width: 800,\n        height: 600,\n        echartOptions: expect.objectContaining({\n          series: expect.arrayContaining([\n            expect.objectContaining({\n              data: [\n                {\n                  name: '1',\n                  children: [\n                    {\n                      name: '2',\n                      value: 10,\n                      children: [\n                        {\n                          name: '3',\n                          value: 10,\n                          children: [\n                            {\n                              name: '4',\n                              value: 20,\n                              children: [],\n                            },\n                          ],\n                        },\n                      ],\n                    },\n                  ],\n                },\n              ],\n            }),\n          ]),\n        }),\n      }),\n    );\n  });","file":"Tree/transformProps.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"should find root node with null parent when root node name is not provided","suites":["EchartsTree transformProps"],"updatePoint":{"line":340,"column":80},"line":340,"code":"  it('should find root node with null parent when root node name is not provided', () => {\n    const formData = {\n      colorScheme: 'bnbColors',\n      datasource: '3__table',\n      granularity_sqla: 'ds',\n      metric: 'count',\n      id: 'id_column',\n      parent: 'relation_column',\n      name: 'name_column',\n    };\n    const chartPropsConfig = {\n      formData,\n      width: 800,\n      height: 600,\n      theme: supersetTheme,\n    };\n    const queriesData = [\n      {\n        colnames: ['id_column', 'relation_column', 'name_column', 'count'],\n        data: [\n          {\n            id_column: '2',\n            relation_column: '4',\n            name_column: 'second_child',\n            count: 20,\n          },\n          {\n            id_column: '3',\n            relation_column: '4',\n            name_column: 'second_child',\n            count: 30,\n          },\n          {\n            id_column: '4',\n            relation_column: '1',\n            name_column: 'first_child',\n            count: 40,\n          },\n          {\n            id_column: '1',\n            relation_column: null,\n            name_column: 'root',\n            count: 10,\n          },\n        ],\n      },\n    ];\n\n    const chartProps = new ChartProps({ ...chartPropsConfig, queriesData });\n    expect(transformProps(chartProps as EchartsTreeChartProps)).toEqual(\n      expect.objectContaining({\n        width: 800,\n        height: 600,\n        echartOptions: expect.objectContaining({\n          series: expect.arrayContaining([\n            expect.objectContaining({\n              data: [\n                {\n                  name: 'root',\n                  children: [\n                    {\n                      name: 'first_child',\n                      value: 40,\n                      children: [\n                        {\n                          name: 'second_child',\n                          value: 20,\n                          children: [],\n                        },\n                        {\n                          name: 'second_child',\n                          value: 30,\n                          children: [],\n                        },\n                      ],\n                    },\n                  ],\n                },\n              ],\n            }),\n          ]),\n        }),\n      }),\n    );\n  });","file":"Tree/transformProps.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"should build query fields from form data","suites":["Treemap buildQuery"],"updatePoint":{"line":30,"column":46},"line":30,"code":"  it('should build query fields from form data', () => {\n    const queryContext = buildQuery(formData);\n    const [query] = queryContext.queries;\n    expect(query.metrics).toEqual(['foo']);\n    expect(query.columns).toEqual(['bar']);\n  });","file":"Treemap/buildQuery.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"should transform chart props for viz","suites":["Treemap transformProps"],"updatePoint":{"line":46,"column":42},"line":46,"code":"  it('should transform chart props for viz', () => {\n    expect(transformProps(chartProps as EchartsTreemapChartProps)).toEqual(\n      expect.objectContaining({\n        width: 800,\n        height: 600,\n        echartOptions: expect.objectContaining({\n          series: [\n            expect.objectContaining({\n              data: expect.arrayContaining([\n                expect.objectContaining({\n                  name: 'sum__num',\n                  children: expect.arrayContaining([\n                    expect.objectContaining({\n                      name: 'Sylvester',\n                      children: expect.arrayContaining([\n                        expect.objectContaining({\n                          name: 'bar1',\n                          value: 10,\n                        }),\n                      ]),\n                    }),\n                  ]),\n                }),\n              ]),\n            }),\n          ],\n        }),\n      }),\n    );\n  });","file":"Treemap/transformProps.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"should handle default cases properly","suites":["formatAnnotationLabel"],"updatePoint":{"line":39,"column":42},"line":39,"code":"  it('should handle default cases properly', () => {\n    expect(formatAnnotationLabel('name')).toEqual('name');\n    expect(formatAnnotationLabel('name', 'title')).toEqual('name - title');\n    expect(formatAnnotationLabel('name', 'title', ['description'])).toEqual(\n      'name - title\\n\\ndescription',\n    );\n  });","file":"utils/annotation.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"should handle missing cases properly","suites":["formatAnnotationLabel"],"updatePoint":{"line":47,"column":42},"line":47,"code":"  it('should handle missing cases properly', () => {\n    expect(formatAnnotationLabel()).toEqual('');\n    expect(formatAnnotationLabel(undefined, 'title')).toEqual('title');\n    expect(formatAnnotationLabel('name', undefined, ['description'])).toEqual(\n      'name\\n\\ndescription',\n    );\n    expect(\n      formatAnnotationLabel(undefined, undefined, ['description']),\n    ).toEqual('description');\n  });","file":"utils/annotation.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"should handle multiple descriptions properly","suites":["formatAnnotationLabel"],"updatePoint":{"line":58,"column":50},"line":58,"code":"  it('should handle multiple descriptions properly', () => {\n    expect(\n      formatAnnotationLabel('name', 'title', [\n        'description 1',\n        'description 2',\n      ]),\n    ).toEqual('name - title\\n\\ndescription 1\\ndescription 2');\n    expect(\n      formatAnnotationLabel(undefined, undefined, [\n        'description 1',\n        'description 2',\n      ]),\n    ).toEqual('description 1\\ndescription 2');\n  });","file":"utils/annotation.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"should extract the correct series name and type","suites":["extractForecastSeriesContext"],"updatePoint":{"line":75,"column":53},"line":75,"code":"  it('should extract the correct series name and type', () => {\n    expect(parseAnnotationOpacity(AnnotationOpacity.Low)).toEqual(0.2);\n    expect(parseAnnotationOpacity(AnnotationOpacity.Medium)).toEqual(0.5);\n    expect(parseAnnotationOpacity(AnnotationOpacity.High)).toEqual(0.8);\n    expect(parseAnnotationOpacity(AnnotationOpacity.Undefined)).toEqual(1);\n    expect(parseAnnotationOpacity(undefined)).toEqual(1);\n  });","file":"utils/annotation.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"should extract all annotations that can be added to the legend","suites":["extractAnnotationLabels"],"updatePoint":{"line":85,"column":68},"line":85,"code":"  it('should extract all annotations that can be added to the legend', () => {\n    const layers: AnnotationLayer[] = [\n      {\n        annotationType: AnnotationType.Formula,\n        name: 'My Formula',\n        show: true,\n        style: AnnotationStyle.Solid,\n        value: 'sin(x)',\n        showLabel: true,\n      },\n      {\n        annotationType: AnnotationType.Formula,\n        name: 'My Hidden Formula',\n        show: false,\n        style: AnnotationStyle.Solid,\n        value: 'sin(2x)',\n        showLabel: true,\n      },\n      {\n        annotationType: AnnotationType.Interval,\n        name: 'My Interval',\n        sourceType: AnnotationSourceType.Table,\n        show: true,\n        style: AnnotationStyle.Solid,\n        value: 1,\n        showLabel: true,\n      },\n      {\n        annotationType: AnnotationType.Timeseries,\n        name: 'My Line',\n        show: true,\n        style: AnnotationStyle.Dashed,\n        sourceType: AnnotationSourceType.Line,\n        value: 1,\n        showLabel: true,\n      },\n      {\n        annotationType: AnnotationType.Timeseries,\n        name: 'My Hidden Line',\n        show: false,\n        style: AnnotationStyle.Dashed,\n        sourceType: AnnotationSourceType.Line,\n        value: 1,\n        showLabel: true,\n      },\n    ];\n    const results: AnnotationData = {\n      'My Interval': {\n        columns: ['col'],\n        records: [{ col: 1 }],\n      },\n      'My Line': [\n        { key: 'Line 1', values: [] },\n        { key: 'Line 2', values: [] },\n      ],\n    };\n\n    expect(extractAnnotationLabels(layers, results)).toEqual([\n      'My Formula',\n      'Line 1',\n      'Line 2',\n    ]);\n  });","file":"utils/annotation.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"Should evaluate a regular formula","suites":["evalFormula"],"updatePoint":{"line":159,"column":39},"line":159,"code":"  it('Should evaluate a regular formula', () => {\n    const data: TimeseriesDataRecord[] = [\n      { __timestamp: 0 },\n      { __timestamp: 10 },\n    ];\n\n    expect(evalFormula(layer, data, '__timestamp', AxisType.time)).toEqual([\n      [0, 1],\n      [10, 11],\n    ]);\n  });","file":"utils/annotation.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"Should evaluate a formula containing redundant characters","suites":["evalFormula"],"updatePoint":{"line":171,"column":63},"line":171,"code":"  it('Should evaluate a formula containing redundant characters', () => {\n    const data: TimeseriesDataRecord[] = [\n      { __timestamp: 0 },\n      { __timestamp: 10 },\n    ];\n\n    expect(\n      evalFormula(\n        { ...layer, value: 'y  = x* 2   -1' },\n        data,\n        '__timestamp',\n        AxisType.time,\n      ),\n    ).toEqual([\n      [0, -1],\n      [10, 19],\n    ]);\n  });","file":"utils/annotation.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"Should evaluate a formula if axis type is category","suites":["evalFormula"],"updatePoint":{"line":190,"column":56},"line":190,"code":"  it('Should evaluate a formula if axis type is category', () => {\n    const data: DataRecord[] = [{ gender: 'boy' }, { gender: 'girl' }];\n\n    expect(\n      evalFormula(\n        { ...layer, value: 'y = 1000' },\n        data,\n        'gender',\n        AxisType.category,\n      ),\n    ).toEqual([\n      ['boy', 1000],\n      ['girl', 1000],\n    ]);\n  });","file":"utils/annotation.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"should return undefined for invalid values","suites":["parseYAxisBound"],"updatePoint":{"line":22,"column":48},"line":22,"code":"  it('should return undefined for invalid values', () => {\n    expect(parseYAxisBound(null)).toBeUndefined();\n    expect(parseYAxisBound(undefined)).toBeUndefined();\n    expect(parseYAxisBound(NaN)).toBeUndefined();\n    expect(parseYAxisBound('abc')).toBeUndefined();\n  });","file":"utils/controls.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"should return numeric value for valid values","suites":["parseYAxisBound"],"updatePoint":{"line":29,"column":50},"line":29,"code":"  it('should return numeric value for valid values', () => {\n    expect(parseYAxisBound(0)).toEqual(0);\n    expect(parseYAxisBound('0')).toEqual(0);\n    expect(parseYAxisBound(1)).toEqual(1);\n    expect(parseYAxisBound('1')).toEqual(1);\n    expect(parseYAxisBound(10.1)).toEqual(10.1);\n    expect(parseYAxisBound('10.1')).toEqual(10.1);\n  });","file":"utils/controls.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"should extract the correct series name and type","suites":["extractForecastSeriesContext"],"updatePoint":{"line":29,"column":53},"line":29,"code":"  it('should extract the correct series name and type', () => {\n    expect(extractForecastSeriesContext('abcd')).toEqual({\n      name: 'abcd',\n      type: ForecastSeriesEnum.Observation,\n    });\n    expect(extractForecastSeriesContext('qwerty__yhat')).toEqual({\n      name: 'qwerty',\n      type: ForecastSeriesEnum.ForecastTrend,\n    });\n    expect(extractForecastSeriesContext('X Y Z___yhat_upper')).toEqual({\n      name: 'X Y Z_',\n      type: ForecastSeriesEnum.ForecastUpper,\n    });\n    expect(extractForecastSeriesContext('1 2 3__yhat_lower')).toEqual({\n      name: '1 2 3',\n      type: ForecastSeriesEnum.ForecastLower,\n    });\n  });","file":"utils/forecast.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"should subtract lower confidence level from upper value","suites":["rebaseForecastDatum"],"updatePoint":{"line":50,"column":61},"line":50,"code":"  it('should subtract lower confidence level from upper value', () => {\n    expect(\n      rebaseForecastDatum([\n        {\n          __timestamp: new Date('2001-01-01'),\n          abc: 10,\n          abc__yhat_lower: 1,\n          abc__yhat_upper: 20,\n        },\n        {\n          __timestamp: new Date('2001-01-01'),\n          abc: 10,\n          abc__yhat_lower: -10,\n          abc__yhat_upper: 20,\n        },\n        {\n          __timestamp: new Date('2002-01-01'),\n          abc: 10,\n          abc__yhat_lower: null,\n          abc__yhat_upper: 20,\n        },\n        {\n          __timestamp: new Date('2003-01-01'),\n          abc: 10,\n          abc__yhat_lower: 1,\n          abc__yhat_upper: null,\n        },\n      ]),\n    ).toEqual([\n      {\n        __timestamp: new Date('2001-01-01'),\n        abc: 10,\n        abc__yhat_lower: 1,\n        abc__yhat_upper: 19,\n      },\n      {\n        __timestamp: new Date('2001-01-01'),\n        abc: 10,\n        abc__yhat_lower: -10,\n        abc__yhat_upper: 30,\n      },\n      {\n        __timestamp: new Date('2002-01-01'),\n        abc: 10,\n        abc__yhat_lower: null,\n        abc__yhat_upper: 20,\n      },\n      {\n        __timestamp: new Date('2003-01-01'),\n        abc: 10,\n        abc__yhat_lower: 1,\n        abc__yhat_upper: null,\n      },\n    ]);\n  });","file":"utils/forecast.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"should rename all series based on verboseMap but leave __timestamp alone","suites":["rebaseForecastDatum"],"updatePoint":{"line":106,"column":78},"line":106,"code":"  it('should rename all series based on verboseMap but leave __timestamp alone', () => {\n    expect(\n      rebaseForecastDatum(\n        [\n          {\n            __timestamp: new Date('2001-01-01'),\n            abc: 10,\n            abc__yhat_lower: 1,\n            abc__yhat_upper: 20,\n          },\n          {\n            __timestamp: new Date('2002-01-01'),\n            abc: 10,\n            abc__yhat_lower: null,\n            abc__yhat_upper: 20,\n          },\n          {\n            __timestamp: new Date('2003-01-01'),\n            abc: 10,\n            abc__yhat_lower: 1,\n            abc__yhat_upper: null,\n          },\n        ],\n        {\n          abc: 'Abracadabra',\n          __timestamp: 'Time',\n        },\n      ),\n    ).toEqual([\n      {\n        __timestamp: new Date('2001-01-01'),\n        Abracadabra: 10,\n        Abracadabra__yhat_lower: 1,\n        Abracadabra__yhat_upper: 19,\n      },\n      {\n        __timestamp: new Date('2002-01-01'),\n        Abracadabra: 10,\n        Abracadabra__yhat_lower: null,\n        Abracadabra__yhat_upper: 20,\n      },\n      {\n        __timestamp: new Date('2003-01-01'),\n        Abracadabra: 10,\n        Abracadabra__yhat_lower: 1,\n        Abracadabra__yhat_upper: null,\n      },\n    ]);\n  });","file":"utils/forecast.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"extractForecastValuesFromTooltipParams should extract the proper data from tooltip params","suites":["rebaseForecastDatum"],"updatePoint":{"line":157,"column":95},"line":157,"code":"test('extractForecastValuesFromTooltipParams should extract the proper data from tooltip params', () => {\n  expect(\n    extractForecastValuesFromTooltipParams([\n      {\n        marker: '<img>',\n        seriesId: 'abc',\n        value: [new Date(0), 10],\n      },\n      {\n        marker: '<img>',\n        seriesId: 'abc__yhat',\n        value: [new Date(0), 1],\n      },\n      {\n        marker: '<img>',\n        seriesId: 'abc__yhat_lower',\n        value: [new Date(0), 5],\n      },\n      {\n        marker: '<img>',\n        seriesId: 'abc__yhat_upper',\n        value: [new Date(0), 6],\n      },\n      {\n        marker: '<img>',\n        seriesId: 'qwerty',\n        value: [new Date(0), 2],\n      },\n    ]),\n  ).toEqual({\n    abc: {\n      marker: '<img>',\n      observation: 10,\n      forecastTrend: 1,\n      forecastLower: 5,\n      forecastUpper: 6,\n    },\n    qwerty: {\n      marker: '<img>',\n      observation: 2,\n    },\n  });\n});","file":"utils/forecast.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"extractForecastValuesFromTooltipParams should extract valid values","suites":["rebaseForecastDatum"],"updatePoint":{"line":201,"column":72},"line":201,"code":"test('extractForecastValuesFromTooltipParams should extract valid values', () => {\n  expect(\n    extractForecastValuesFromTooltipParams([\n      {\n        marker: '<img>',\n        seriesId: 'foo',\n        value: [0, 10],\n      },\n      {\n        marker: '<img>',\n        seriesId: 'bar',\n        value: [100, 0],\n      },\n    ]),\n  ).toEqual({\n    foo: {\n      marker: '<img>',\n      observation: 10,\n    },\n    bar: {\n      marker: '<img>',\n      observation: 0,\n    },\n  });\n});","file":"utils/forecast.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"formatForecastTooltipSeries should apply format to value","suites":["rebaseForecastDatum"],"updatePoint":{"line":229,"column":62},"line":229,"code":"test('formatForecastTooltipSeries should apply format to value', () => {\n  expect(\n    formatForecastTooltipSeries({\n      seriesName: 'abc',\n      marker: '<img>',\n      observation: 10.1,\n      formatter,\n    }),\n  ).toEqual('<img>abc: 10');\n});","file":"utils/forecast.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"formatForecastTooltipSeries should show falsy value","suites":["rebaseForecastDatum"],"updatePoint":{"line":240,"column":57},"line":240,"code":"test('formatForecastTooltipSeries should show falsy value', () => {\n  expect(\n    formatForecastTooltipSeries({\n      seriesName: 'abc',\n      marker: '<img>',\n      observation: 0,\n      formatter,\n    }),\n  ).toEqual('<img>abc: 0');\n});","file":"utils/forecast.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"formatForecastTooltipSeries should format full forecast","suites":["rebaseForecastDatum"],"updatePoint":{"line":251,"column":61},"line":251,"code":"test('formatForecastTooltipSeries should format full forecast', () => {\n  expect(\n    formatForecastTooltipSeries({\n      seriesName: 'qwerty',\n      marker: '<img>',\n      observation: 10.1,\n      forecastTrend: 20.1,\n      forecastLower: 5.1,\n      forecastUpper: 7.1,\n      formatter,\n    }),\n  ).toEqual('<img>qwerty: 10, ŷ = 20 (5, 12)');\n});","file":"utils/forecast.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"formatForecastTooltipSeries should format forecast without observation","suites":["rebaseForecastDatum"],"updatePoint":{"line":265,"column":76},"line":265,"code":"test('formatForecastTooltipSeries should format forecast without observation', () => {\n  expect(\n    formatForecastTooltipSeries({\n      seriesName: 'qwerty',\n      marker: '<img>',\n      forecastTrend: 20,\n      forecastLower: 5,\n      forecastUpper: 7,\n      formatter,\n    }),\n  ).toEqual('<img>qwerty: ŷ = 20 (5, 12)');\n});","file":"utils/forecast.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"formatForecastTooltipSeries should format forecast without point estimate","suites":["rebaseForecastDatum"],"updatePoint":{"line":278,"column":79},"line":278,"code":"test('formatForecastTooltipSeries should format forecast without point estimate', () => {\n  expect(\n    formatForecastTooltipSeries({\n      seriesName: 'qwerty',\n      marker: '<img>',\n      observation: 10.1,\n      forecastLower: 6,\n      forecastUpper: 7,\n      formatter,\n    }),\n  ).toEqual('<img>qwerty: 10 (6, 13)');\n});","file":"utils/forecast.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"formatForecastTooltipSeries should format forecast with only confidence band","suites":["rebaseForecastDatum"],"updatePoint":{"line":291,"column":82},"line":291,"code":"test('formatForecastTooltipSeries should format forecast with only confidence band', () => {\n  expect(\n    formatForecastTooltipSeries({\n      seriesName: 'qwerty',\n      marker: '<img>',\n      forecastLower: 7,\n      forecastUpper: 8,\n      formatter,\n    }),\n  ).toEqual('<img>qwerty: (7, 15)');\n});","file":"utils/forecast.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"should keep controls with suffix","suites":[],"updatePoint":{"line":35,"column":38},"line":35,"code":"test('should keep controls with suffix', () => {\n  expect(retainFormDataSuffix(formData, '_b')).toEqual({\n    datasource: 'dummy',\n    viz_type: 'table',\n    metrics: ['c', 'd'],\n    columns: ['hello', 'world'],\n    limit: 200,\n  });\n  // no side effect\n  expect(retainFormDataSuffix(formData, '_b')).not.toEqual(formData);\n});","file":"utils/formDataSuffix.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"should remove controls with suffix","suites":[],"updatePoint":{"line":47,"column":40},"line":47,"code":"test('should remove controls with suffix', () => {\n  expect(removeFormDataSuffix(formData, '_b')).toEqual({\n    datasource: 'dummy',\n    viz_type: 'table',\n    metrics: ['a', 'b'],\n    columns: ['foo', 'bar'],\n    limit: 100,\n  });\n  // no side effect\n  expect(removeFormDataSuffix(formData, '_b')).not.toEqual(formData);\n});","file":"utils/formDataSuffix.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"sortRows by name ascending","suites":[],"updatePoint":{"line":63,"column":32},"line":63,"code":"test('sortRows by name ascending', () => {\n  expect(\n    sortRows(\n      sortData,\n      totalStackedValues,\n      'my_x_axis',\n      SortSeriesType.Name,\n      true,\n    ),\n  ).toEqual([\n    { row: { my_x_axis: 'abc', x: 1, y: 0, z: 2 }, totalStackedValue: 3 },\n    { row: { my_x_axis: 'foo', x: null, y: 10, z: 5 }, totalStackedValue: 15 },\n    { row: { my_x_axis: null, x: 4, y: 3, z: 7 }, totalStackedValue: 14 },\n  ]);\n});","file":"utils/series.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"sortRows by name descending","suites":[],"updatePoint":{"line":79,"column":33},"line":79,"code":"test('sortRows by name descending', () => {\n  expect(\n    sortRows(\n      sortData,\n      totalStackedValues,\n      'my_x_axis',\n      SortSeriesType.Name,\n      false,\n    ),\n  ).toEqual([\n    { row: { my_x_axis: null, x: 4, y: 3, z: 7 }, totalStackedValue: 14 },\n    { row: { my_x_axis: 'foo', x: null, y: 10, z: 5 }, totalStackedValue: 15 },\n    { row: { my_x_axis: 'abc', x: 1, y: 0, z: 2 }, totalStackedValue: 3 },\n  ]);\n});","file":"utils/series.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"sortRows by sum ascending","suites":[],"updatePoint":{"line":95,"column":31},"line":95,"code":"test('sortRows by sum ascending', () => {\n  expect(\n    sortRows(\n      sortData,\n      totalStackedValues,\n      'my_x_axis',\n      SortSeriesType.Sum,\n      true,\n    ),\n  ).toEqual([\n    { row: { my_x_axis: 'abc', x: 1, y: 0, z: 2 }, totalStackedValue: 3 },\n    { row: { my_x_axis: null, x: 4, y: 3, z: 7 }, totalStackedValue: 14 },\n    { row: { my_x_axis: 'foo', x: null, y: 10, z: 5 }, totalStackedValue: 15 },\n  ]);\n});","file":"utils/series.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"sortRows by sum descending","suites":[],"updatePoint":{"line":111,"column":32},"line":111,"code":"test('sortRows by sum descending', () => {\n  expect(\n    sortRows(\n      sortData,\n      totalStackedValues,\n      'my_x_axis',\n      SortSeriesType.Sum,\n      false,\n    ),\n  ).toEqual([\n    { row: { my_x_axis: 'foo', x: null, y: 10, z: 5 }, totalStackedValue: 15 },\n    { row: { my_x_axis: null, x: 4, y: 3, z: 7 }, totalStackedValue: 14 },\n    { row: { my_x_axis: 'abc', x: 1, y: 0, z: 2 }, totalStackedValue: 3 },\n  ]);\n});","file":"utils/series.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"sortRows by avg ascending","suites":[],"updatePoint":{"line":127,"column":31},"line":127,"code":"test('sortRows by avg ascending', () => {\n  expect(\n    sortRows(\n      sortData,\n      totalStackedValues,\n      'my_x_axis',\n      SortSeriesType.Avg,\n      true,\n    ),\n  ).toEqual([\n    { row: { my_x_axis: 'abc', x: 1, y: 0, z: 2 }, totalStackedValue: 3 },\n    { row: { my_x_axis: null, x: 4, y: 3, z: 7 }, totalStackedValue: 14 },\n    { row: { my_x_axis: 'foo', x: null, y: 10, z: 5 }, totalStackedValue: 15 },\n  ]);\n});","file":"utils/series.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"sortRows by avg descending","suites":[],"updatePoint":{"line":143,"column":32},"line":143,"code":"test('sortRows by avg descending', () => {\n  expect(\n    sortRows(\n      sortData,\n      totalStackedValues,\n      'my_x_axis',\n      SortSeriesType.Avg,\n      false,\n    ),\n  ).toEqual([\n    { row: { my_x_axis: 'foo', x: null, y: 10, z: 5 }, totalStackedValue: 15 },\n    { row: { my_x_axis: null, x: 4, y: 3, z: 7 }, totalStackedValue: 14 },\n    { row: { my_x_axis: 'abc', x: 1, y: 0, z: 2 }, totalStackedValue: 3 },\n  ]);\n});","file":"utils/series.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"sortRows by min ascending","suites":[],"updatePoint":{"line":159,"column":31},"line":159,"code":"test('sortRows by min ascending', () => {\n  expect(\n    sortRows(\n      sortData,\n      totalStackedValues,\n      'my_x_axis',\n      SortSeriesType.Min,\n      true,\n    ),\n  ).toEqual([\n    { row: { my_x_axis: 'abc', x: 1, y: 0, z: 2 }, totalStackedValue: 3 },\n    { row: { my_x_axis: null, x: 4, y: 3, z: 7 }, totalStackedValue: 14 },\n    { row: { my_x_axis: 'foo', x: null, y: 10, z: 5 }, totalStackedValue: 15 },\n  ]);\n});","file":"utils/series.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"sortRows by min descending","suites":[],"updatePoint":{"line":175,"column":32},"line":175,"code":"test('sortRows by min descending', () => {\n  expect(\n    sortRows(\n      sortData,\n      totalStackedValues,\n      'my_x_axis',\n      SortSeriesType.Min,\n      false,\n    ),\n  ).toEqual([\n    { row: { my_x_axis: 'foo', x: null, y: 10, z: 5 }, totalStackedValue: 15 },\n    { row: { my_x_axis: null, x: 4, y: 3, z: 7 }, totalStackedValue: 14 },\n    { row: { my_x_axis: 'abc', x: 1, y: 0, z: 2 }, totalStackedValue: 3 },\n  ]);\n});","file":"utils/series.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"sortRows by max ascending","suites":[],"updatePoint":{"line":191,"column":31},"line":191,"code":"test('sortRows by max ascending', () => {\n  expect(\n    sortRows(\n      sortData,\n      totalStackedValues,\n      'my_x_axis',\n      SortSeriesType.Min,\n      true,\n    ),\n  ).toEqual([\n    { row: { my_x_axis: 'abc', x: 1, y: 0, z: 2 }, totalStackedValue: 3 },\n    { row: { my_x_axis: null, x: 4, y: 3, z: 7 }, totalStackedValue: 14 },\n    { row: { my_x_axis: 'foo', x: null, y: 10, z: 5 }, totalStackedValue: 15 },\n  ]);\n});","file":"utils/series.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"sortRows by max descending","suites":[],"updatePoint":{"line":207,"column":32},"line":207,"code":"test('sortRows by max descending', () => {\n  expect(\n    sortRows(\n      sortData,\n      totalStackedValues,\n      'my_x_axis',\n      SortSeriesType.Min,\n      false,\n    ),\n  ).toEqual([\n    { row: { my_x_axis: 'foo', x: null, y: 10, z: 5 }, totalStackedValue: 15 },\n    { row: { my_x_axis: null, x: 4, y: 3, z: 7 }, totalStackedValue: 14 },\n    { row: { my_x_axis: 'abc', x: 1, y: 0, z: 2 }, totalStackedValue: 3 },\n  ]);\n});","file":"utils/series.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"sortAndFilterSeries by min ascending","suites":[],"updatePoint":{"line":223,"column":42},"line":223,"code":"test('sortAndFilterSeries by min ascending', () => {\n  expect(\n    sortAndFilterSeries(sortData, 'my_x_axis', [], SortSeriesType.Min, true),\n  ).toEqual(['y', 'x', 'z']);\n});","file":"utils/series.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"sortAndFilterSeries by min descending","suites":[],"updatePoint":{"line":229,"column":43},"line":229,"code":"test('sortAndFilterSeries by min descending', () => {\n  expect(\n    sortAndFilterSeries(sortData, 'my_x_axis', [], SortSeriesType.Min, false),\n  ).toEqual(['z', 'x', 'y']);\n});","file":"utils/series.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"sortAndFilterSeries by max ascending","suites":[],"updatePoint":{"line":235,"column":42},"line":235,"code":"test('sortAndFilterSeries by max ascending', () => {\n  expect(\n    sortAndFilterSeries(sortData, 'my_x_axis', [], SortSeriesType.Max, true),\n  ).toEqual(['x', 'z', 'y']);\n});","file":"utils/series.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"sortAndFilterSeries by max descending","suites":[],"updatePoint":{"line":241,"column":43},"line":241,"code":"test('sortAndFilterSeries by max descending', () => {\n  expect(\n    sortAndFilterSeries(sortData, 'my_x_axis', [], SortSeriesType.Max, false),\n  ).toEqual(['y', 'z', 'x']);\n});","file":"utils/series.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"sortAndFilterSeries by avg ascending","suites":[],"updatePoint":{"line":247,"column":42},"line":247,"code":"test('sortAndFilterSeries by avg ascending', () => {\n  expect(\n    sortAndFilterSeries(sortData, 'my_x_axis', [], SortSeriesType.Avg, true),\n  ).toEqual(['x', 'y', 'z']);\n});","file":"utils/series.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"sortAndFilterSeries by avg descending","suites":[],"updatePoint":{"line":253,"column":43},"line":253,"code":"test('sortAndFilterSeries by avg descending', () => {\n  expect(\n    sortAndFilterSeries(sortData, 'my_x_axis', [], SortSeriesType.Avg, false),\n  ).toEqual(['z', 'y', 'x']);\n});","file":"utils/series.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"sortAndFilterSeries by sum ascending","suites":[],"updatePoint":{"line":259,"column":42},"line":259,"code":"test('sortAndFilterSeries by sum ascending', () => {\n  expect(\n    sortAndFilterSeries(sortData, 'my_x_axis', [], SortSeriesType.Sum, true),\n  ).toEqual(['x', 'y', 'z']);\n});","file":"utils/series.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"sortAndFilterSeries by sum descending","suites":[],"updatePoint":{"line":265,"column":43},"line":265,"code":"test('sortAndFilterSeries by sum descending', () => {\n  expect(\n    sortAndFilterSeries(sortData, 'my_x_axis', [], SortSeriesType.Sum, false),\n  ).toEqual(['z', 'y', 'x']);\n});","file":"utils/series.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"sortAndFilterSeries by name ascending","suites":[],"updatePoint":{"line":271,"column":43},"line":271,"code":"test('sortAndFilterSeries by name ascending', () => {\n  expect(\n    sortAndFilterSeries(sortData, 'my_x_axis', [], SortSeriesType.Name, true),\n  ).toEqual(['x', 'y', 'z']);\n});","file":"utils/series.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"sortAndFilterSeries by name descending","suites":[],"updatePoint":{"line":277,"column":44},"line":277,"code":"test('sortAndFilterSeries by name descending', () => {\n  expect(\n    sortAndFilterSeries(sortData, 'my_x_axis', [], SortSeriesType.Name, false),\n  ).toEqual(['z', 'y', 'x']);\n});","file":"utils/series.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"should generate a valid ECharts timeseries series object","suites":["extractSeries"],"updatePoint":{"line":284,"column":62},"line":284,"code":"  it('should generate a valid ECharts timeseries series object', () => {\n    const data = [\n      {\n        __timestamp: '2000-01-01',\n        Hulk: null,\n        abc: 2,\n      },\n      {\n        __timestamp: '2000-02-01',\n        Hulk: 2,\n        abc: 10,\n      },\n      {\n        __timestamp: '2000-03-01',\n        Hulk: 1,\n        abc: 5,\n      },\n    ];\n    const totalStackedValues = [2, 12, 6];\n    expect(extractSeries(data, { totalStackedValues })).toEqual([\n      [\n        {\n          id: 'Hulk',\n          name: 'Hulk',\n          data: [\n            ['2000-01-01', null],\n            ['2000-02-01', 2],\n            ['2000-03-01', 1],\n          ],\n        },\n        {\n          id: 'abc',\n          name: 'abc',\n          data: [\n            ['2000-01-01', 2],\n            ['2000-02-01', 10],\n            ['2000-03-01', 5],\n          ],\n        },\n      ],\n      totalStackedValues,\n      1,\n    ]);\n  });","file":"utils/series.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"should remove rows that have a null x-value","suites":["extractSeries"],"updatePoint":{"line":329,"column":49},"line":329,"code":"  it('should remove rows that have a null x-value', () => {\n    const data = [\n      {\n        x: 1,\n        Hulk: null,\n        abc: 2,\n      },\n      {\n        x: null,\n        Hulk: 2,\n        abc: 10,\n      },\n      {\n        x: 2,\n        Hulk: 1,\n        abc: 5,\n      },\n    ];\n    const totalStackedValues = [3, 12, 8];\n    expect(\n      extractSeries(data, {\n        totalStackedValues,\n        xAxis: 'x',\n        removeNulls: true,\n      }),\n    ).toEqual([\n      [\n        {\n          id: 'Hulk',\n          name: 'Hulk',\n          data: [[2, 1]],\n        },\n        {\n          id: 'abc',\n          name: 'abc',\n          data: [\n            [1, 2],\n            [2, 5],\n          ],\n        },\n      ],\n      totalStackedValues,\n      1,\n    ]);\n  });","file":"utils/series.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"should do missing value imputation","suites":["extractSeries"],"updatePoint":{"line":375,"column":40},"line":375,"code":"  it('should do missing value imputation', () => {\n    const data = [\n      {\n        __timestamp: '2000-01-01',\n        abc: null,\n      },\n      {\n        __timestamp: '2000-02-01',\n        abc: null,\n      },\n      {\n        __timestamp: '2000-03-01',\n        abc: 1,\n      },\n      {\n        __timestamp: '2000-04-01',\n        abc: null,\n      },\n      {\n        __timestamp: '2000-05-01',\n        abc: null,\n      },\n      {\n        __timestamp: '2000-06-01',\n        abc: null,\n      },\n      {\n        __timestamp: '2000-07-01',\n        abc: 2,\n      },\n      {\n        __timestamp: '2000-08-01',\n        abc: 3,\n      },\n      {\n        __timestamp: '2000-09-01',\n        abc: null,\n      },\n      {\n        __timestamp: '2000-10-01',\n        abc: null,\n      },\n    ];\n    const totalStackedValues = [0, 0, 1, 0, 0, 0, 2, 3, 0, 0];\n    expect(\n      extractSeries(data, { totalStackedValues, fillNeighborValue: 0 }),\n    ).toEqual([\n      [\n        {\n          id: 'abc',\n          name: 'abc',\n          data: [\n            ['2000-01-01', null],\n            ['2000-02-01', 0],\n            ['2000-03-01', 1],\n            ['2000-04-01', 0],\n            ['2000-05-01', null],\n            ['2000-06-01', 0],\n            ['2000-07-01', 2],\n            ['2000-08-01', 3],\n            ['2000-09-01', 0],\n            ['2000-10-01', null],\n          ],\n        },\n      ],\n      totalStackedValues,\n      1,\n    ]);\n  });","file":"utils/series.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"should join together multiple groupby labels","suites":["extractGroupbyLabel"],"updatePoint":{"line":447,"column":50},"line":447,"code":"  it('should join together multiple groupby labels', () => {\n    expect(\n      extractGroupbyLabel({\n        datum: { a: 'abc', b: 'qwerty' },\n        groupby: ['a', 'b'],\n      }),\n    ).toEqual('abc, qwerty');\n  });","file":"utils/series.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"should handle a single groupby","suites":["extractGroupbyLabel"],"updatePoint":{"line":456,"column":36},"line":456,"code":"  it('should handle a single groupby', () => {\n    expect(\n      extractGroupbyLabel({ datum: { xyz: 'qqq' }, groupby: ['xyz'] }),\n    ).toEqual('qqq');\n  });","file":"utils/series.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"should handle mixed types","suites":["extractGroupbyLabel"],"updatePoint":{"line":462,"column":31},"line":462,"code":"  it('should handle mixed types', () => {\n    expect(\n      extractGroupbyLabel({\n        datum: { strcol: 'abc', intcol: 123, floatcol: 0.123, boolcol: true },\n        groupby: ['strcol', 'intcol', 'floatcol', 'boolcol'],\n      }),\n    ).toEqual('abc, 123, 0.123, true');\n  });","file":"utils/series.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"should handle null and undefined groupby","suites":["extractGroupbyLabel"],"updatePoint":{"line":471,"column":46},"line":471,"code":"  it('should handle null and undefined groupby', () => {\n    expect(\n      extractGroupbyLabel({\n        datum: { strcol: 'abc', intcol: 123, floatcol: 0.123, boolcol: true },\n        groupby: null,\n      }),\n    ).toEqual('');\n    expect(extractGroupbyLabel({})).toEqual('');\n  });","file":"utils/series.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"should return the latest index for stack","suites":["extractShowValueIndexes"],"updatePoint":{"line":483,"column":46},"line":483,"code":"  it('should return the latest index for stack', () => {\n    expect(\n      extractShowValueIndexes(\n        [\n          {\n            id: 'abc',\n            name: 'abc',\n            data: [\n              ['2000-01-01', null],\n              ['2000-02-01', 0],\n              ['2000-03-01', 1],\n              ['2000-04-01', 0],\n              ['2000-05-01', null],\n              ['2000-06-01', 0],\n              ['2000-07-01', 2],\n              ['2000-08-01', 3],\n              ['2000-09-01', null],\n              ['2000-10-01', null],\n            ],\n          },\n          {\n            id: 'def',\n            name: 'def',\n            data: [\n              ['2000-01-01', null],\n              ['2000-02-01', 0],\n              ['2000-03-01', null],\n              ['2000-04-01', 0],\n              ['2000-05-01', null],\n              ['2000-06-01', 0],\n              ['2000-07-01', 2],\n              ['2000-08-01', 3],\n              ['2000-09-01', null],\n              ['2000-10-01', 0],\n            ],\n          },\n          {\n            id: 'def',\n            name: 'def',\n            data: [\n              ['2000-01-01', null],\n              ['2000-02-01', null],\n              ['2000-03-01', null],\n              ['2000-04-01', null],\n              ['2000-05-01', null],\n              ['2000-06-01', 3],\n              ['2000-07-01', null],\n              ['2000-08-01', null],\n              ['2000-09-01', null],\n              ['2000-10-01', null],\n            ],\n          },\n        ],\n        { stack: true, onlyTotal: false, isHorizontal: false },\n      ),\n    ).toEqual([undefined, 1, 0, 1, undefined, 2, 1, 1, undefined, 1]);\n  });","file":"utils/series.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"should handle the negative numbers for total only","suites":["extractShowValueIndexes"],"updatePoint":{"line":541,"column":55},"line":541,"code":"  it('should handle the negative numbers for total only', () => {\n    expect(\n      extractShowValueIndexes(\n        [\n          {\n            id: 'abc',\n            name: 'abc',\n            data: [\n              ['2000-01-01', null],\n              ['2000-02-01', 0],\n              ['2000-03-01', -1],\n              ['2000-04-01', 0],\n              ['2000-05-01', null],\n              ['2000-06-01', 0],\n              ['2000-07-01', -2],\n              ['2000-08-01', -3],\n              ['2000-09-01', null],\n              ['2000-10-01', null],\n            ],\n          },\n          {\n            id: 'def',\n            name: 'def',\n            data: [\n              ['2000-01-01', null],\n              ['2000-02-01', 0],\n              ['2000-03-01', null],\n              ['2000-04-01', 0],\n              ['2000-05-01', null],\n              ['2000-06-01', 0],\n              ['2000-07-01', 2],\n              ['2000-08-01', -3],\n              ['2000-09-01', null],\n              ['2000-10-01', 0],\n            ],\n          },\n          {\n            id: 'def',\n            name: 'def',\n            data: [\n              ['2000-01-01', null],\n              ['2000-02-01', 0],\n              ['2000-03-01', null],\n              ['2000-04-01', 1],\n              ['2000-05-01', null],\n              ['2000-06-01', 0],\n              ['2000-07-01', -2],\n              ['2000-08-01', 3],\n              ['2000-09-01', null],\n              ['2000-10-01', 0],\n            ],\n          },\n        ],\n        { stack: true, onlyTotal: true, isHorizontal: false },\n      ),\n    ).toEqual([undefined, 1, 0, 2, undefined, 1, 1, 2, undefined, 1]);\n  });","file":"utils/series.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"should handle missing values properly","suites":["formatSeriesName"],"updatePoint":{"line":603,"column":43},"line":603,"code":"  it('should handle missing values properly', () => {\n    expect(formatSeriesName(undefined)).toEqual('<NULL>');\n    expect(formatSeriesName(null)).toEqual('<NULL>');\n  });","file":"utils/series.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"should handle string values properly","suites":["formatSeriesName"],"updatePoint":{"line":608,"column":42},"line":608,"code":"  it('should handle string values properly', () => {\n    expect(formatSeriesName('abc XYZ!')).toEqual('abc XYZ!');\n  });","file":"utils/series.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"should handle boolean values properly","suites":["formatSeriesName"],"updatePoint":{"line":612,"column":43},"line":612,"code":"  it('should handle boolean values properly', () => {\n    expect(formatSeriesName(true)).toEqual('true');\n  });","file":"utils/series.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"should use default formatting for numeric values without formatter","suites":["formatSeriesName"],"updatePoint":{"line":616,"column":72},"line":616,"code":"  it('should use default formatting for numeric values without formatter', () => {\n    expect(formatSeriesName(12345678.9)).toEqual('12345678.9');\n  });","file":"utils/series.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"should use numberFormatter for numeric values when formatter is provided","suites":["formatSeriesName"],"updatePoint":{"line":620,"column":78},"line":620,"code":"  it('should use numberFormatter for numeric values when formatter is provided', () => {\n    expect(formatSeriesName(12345678.9, { numberFormatter })).toEqual('12.3M');\n  });","file":"utils/series.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"should use default formatting for date values without formatter","suites":["formatSeriesName"],"updatePoint":{"line":624,"column":69},"line":624,"code":"  it('should use default formatting for date values without formatter', () => {\n    expect(formatSeriesName(new Date('2020-09-11'))).toEqual(\n      '2020-09-11T00:00:00.000Z',\n    );\n  });","file":"utils/series.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"should use timeFormatter for date values when formatter is provided","suites":["formatSeriesName"],"updatePoint":{"line":630,"column":73},"line":630,"code":"  it('should use timeFormatter for date values when formatter is provided', () => {\n    expect(formatSeriesName(new Date('2020-09-11'), { timeFormatter })).toEqual(\n      '2020-09-11 00:00:00',\n    );\n  });","file":"utils/series.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"should normalize non-UTC string based timestamp","suites":["formatSeriesName"],"updatePoint":{"line":636,"column":53},"line":636,"code":"  it('should normalize non-UTC string based timestamp', () => {\n    const annualTimeFormatter = getTimeFormatter('%Y');\n    expect(\n      formatSeriesName('1995-01-01 00:00:00.000000', {\n        timeFormatter: annualTimeFormatter,\n        coltype: GenericDataType.TEMPORAL,\n      }),\n    ).toEqual('1995');\n  });","file":"utils/series.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"should return the correct props for scroll type with top orientation without zoom","suites":["getLegendProps"],"updatePoint":{"line":648,"column":87},"line":648,"code":"  it('should return the correct props for scroll type with top orientation without zoom', () => {\n    expect(\n      getLegendProps(\n        LegendType.Scroll,\n        LegendOrientation.Top,\n        true,\n        theme,\n        false,\n      ),\n    ).toEqual({\n      show: true,\n      top: 0,\n      right: 0,\n      orient: 'horizontal',\n      type: 'scroll',\n      ...expectedThemeProps,\n    });\n  });","file":"utils/series.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"should return the correct props for scroll type with top orientation with zoom","suites":["getLegendProps"],"updatePoint":{"line":667,"column":84},"line":667,"code":"  it('should return the correct props for scroll type with top orientation with zoom', () => {\n    expect(\n      getLegendProps(\n        LegendType.Scroll,\n        LegendOrientation.Top,\n        true,\n        theme,\n        true,\n      ),\n    ).toEqual({\n      show: true,\n      top: 0,\n      right: 55,\n      orient: 'horizontal',\n      type: 'scroll',\n      ...expectedThemeProps,\n    });\n  });","file":"utils/series.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"should return the correct props for plain type with left orientation","suites":["getLegendProps"],"updatePoint":{"line":686,"column":74},"line":686,"code":"  it('should return the correct props for plain type with left orientation', () => {\n    expect(\n      getLegendProps(LegendType.Plain, LegendOrientation.Left, true, theme),\n    ).toEqual({\n      show: true,\n      left: 0,\n      orient: 'vertical',\n      type: 'plain',\n      ...expectedThemeProps,\n    });\n  });","file":"utils/series.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"should return the correct props for plain type with right orientation without zoom","suites":["getLegendProps"],"updatePoint":{"line":698,"column":88},"line":698,"code":"  it('should return the correct props for plain type with right orientation without zoom', () => {\n    expect(\n      getLegendProps(\n        LegendType.Plain,\n        LegendOrientation.Right,\n        false,\n        theme,\n        false,\n      ),\n    ).toEqual({\n      show: false,\n      right: 0,\n      top: 0,\n      orient: 'vertical',\n      type: 'plain',\n      ...expectedThemeProps,\n    });\n  });","file":"utils/series.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"should return the correct props for plain type with right orientation with zoom","suites":["getLegendProps"],"updatePoint":{"line":717,"column":85},"line":717,"code":"  it('should return the correct props for plain type with right orientation with zoom', () => {\n    expect(\n      getLegendProps(\n        LegendType.Plain,\n        LegendOrientation.Right,\n        false,\n        theme,\n        true,\n      ),\n    ).toEqual({\n      show: false,\n      right: 0,\n      top: 30,\n      orient: 'vertical',\n      type: 'plain',\n      ...expectedThemeProps,\n    });\n  });","file":"utils/series.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"should return the correct props for plain type with bottom orientation","suites":["getLegendProps"],"updatePoint":{"line":736,"column":76},"line":736,"code":"  it('should return the correct props for plain type with bottom orientation', () => {\n    expect(\n      getLegendProps(LegendType.Plain, LegendOrientation.Bottom, false, theme),\n    ).toEqual({\n      show: false,\n      bottom: 0,\n      orient: 'horizontal',\n      type: 'plain',\n      ...expectedThemeProps,\n    });\n  });","file":"utils/series.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"should handle top default","suites":["getChartPadding"],"updatePoint":{"line":750,"column":31},"line":750,"code":"  it('should handle top default', () => {\n    expect(getChartPadding(true, LegendOrientation.Top)).toEqual({\n      bottom: 0,\n      left: 0,\n      right: 0,\n      top: defaultLegendPadding[LegendOrientation.Top],\n    });\n  });","file":"utils/series.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"should handle left default","suites":["getChartPadding"],"updatePoint":{"line":759,"column":32},"line":759,"code":"  it('should handle left default', () => {\n    expect(getChartPadding(true, LegendOrientation.Left)).toEqual({\n      bottom: 0,\n      left: defaultLegendPadding[LegendOrientation.Left],\n      right: 0,\n      top: 0,\n    });\n  });","file":"utils/series.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"should return the default padding when show is false","suites":["getChartPadding"],"updatePoint":{"line":768,"column":58},"line":768,"code":"  it('should return the default padding when show is false', () => {\n    expect(\n      getChartPadding(false, LegendOrientation.Left, 100, {\n        top: 10,\n        bottom: 20,\n        left: 30,\n        right: 40,\n      }),\n    ).toEqual({\n      bottom: 20,\n      left: 30,\n      right: 40,\n      top: 10,\n    });\n  });","file":"utils/series.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"should return the correct padding for left orientation","suites":["getChartPadding"],"updatePoint":{"line":784,"column":60},"line":784,"code":"  it('should return the correct padding for left orientation', () => {\n    expect(getChartPadding(true, LegendOrientation.Left, 100)).toEqual({\n      bottom: 0,\n      left: 100,\n      right: 0,\n      top: 0,\n    });\n  });","file":"utils/series.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"should return the correct padding for right orientation","suites":["getChartPadding"],"updatePoint":{"line":793,"column":61},"line":793,"code":"  it('should return the correct padding for right orientation', () => {\n    expect(getChartPadding(true, LegendOrientation.Right, 50)).toEqual({\n      bottom: 0,\n      left: 0,\n      right: 50,\n      top: 0,\n    });\n  });","file":"utils/series.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"should return the correct padding for top orientation","suites":["getChartPadding"],"updatePoint":{"line":802,"column":59},"line":802,"code":"  it('should return the correct padding for top orientation', () => {\n    expect(getChartPadding(true, LegendOrientation.Top, 20)).toEqual({\n      bottom: 0,\n      left: 0,\n      right: 0,\n      top: 20,\n    });\n  });","file":"utils/series.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"should return the correct padding for bottom orientation","suites":["getChartPadding"],"updatePoint":{"line":811,"column":62},"line":811,"code":"  it('should return the correct padding for bottom orientation', () => {\n    expect(getChartPadding(true, LegendOrientation.Bottom, 10)).toEqual({\n      bottom: 10,\n      left: 0,\n      right: 0,\n      top: 0,\n    });\n  });","file":"utils/series.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"should deduplicate ids in series","suites":["dedupSeries"],"updatePoint":{"line":822,"column":38},"line":822,"code":"  it('should deduplicate ids in series', () => {\n    expect(\n      dedupSeries([\n        {\n          id: 'foo',\n        },\n        {\n          id: 'bar',\n        },\n        {\n          id: 'foo',\n        },\n        {\n          id: 'foo',\n        },\n      ]),\n    ).toEqual([\n      { id: 'foo' },\n      { id: 'bar' },\n      { id: 'foo (1)' },\n      { id: 'foo (2)' },\n    ]);\n  });","file":"utils/series.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"should remove html tags from series name","suites":["sanitizeHtml"],"updatePoint":{"line":848,"column":46},"line":848,"code":"  it('should remove html tags from series name', () => {\n    expect(sanitizeHtml(NULL_STRING)).toEqual('&lt;NULL&gt;');\n  });","file":"utils/series.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"should hide value if greater than max","suites":["getOverMaxHiddenFormatter"],"updatePoint":{"line":854,"column":43},"line":854,"code":"  it('should hide value if greater than max', () => {\n    const formatter = getOverMaxHiddenFormatter({ max: 81000 });\n    expect(formatter.format(84500)).toEqual('');\n  });","file":"utils/series.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"should show value if less or equal than max","suites":["getOverMaxHiddenFormatter"],"updatePoint":{"line":858,"column":49},"line":858,"code":"  it('should show value if less or equal than max', () => {\n    const formatter = getOverMaxHiddenFormatter({ max: 81000 });\n    expect(formatter.format(81000)).toEqual('81000');\n    expect(formatter.format(50000)).toEqual('50000');\n  });","file":"utils/series.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"calculateLowerLogTick","suites":["getOverMaxHiddenFormatter"],"updatePoint":{"line":865,"column":27},"line":865,"code":"test('calculateLowerLogTick', () => {\n  expect(calculateLowerLogTick(1000000)).toEqual(1000000);\n  expect(calculateLowerLogTick(456)).toEqual(100);\n  expect(calculateLowerLogTick(100)).toEqual(100);\n  expect(calculateLowerLogTick(99)).toEqual(10);\n  expect(calculateLowerLogTick(2)).toEqual(1);\n  expect(calculateLowerLogTick(0.005)).toEqual(0.001);\n});","file":"utils/series.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"should build tree as expected","suites":["test treeBuilder"],"updatePoint":{"line":67,"column":35},"line":67,"code":"  it('should build tree as expected', () => {\n    const tree = treeBuilder(data, ['foo', 'bar'], 'count');\n    expect(tree).toEqual([\n      {\n        children: [\n          {\n            groupBy: 'bar',\n            name: 'a',\n            secondaryValue: 2,\n            value: 2,\n          },\n        ],\n        groupBy: 'foo',\n        name: 'a-1',\n        secondaryValue: 2,\n        value: 2,\n      },\n      {\n        children: [\n          {\n            groupBy: 'bar',\n            name: 'a',\n            secondaryValue: 2,\n            value: 2,\n          },\n        ],\n        groupBy: 'foo',\n        name: 'a-2',\n        secondaryValue: 2,\n        value: 2,\n      },\n      {\n        children: [\n          {\n            groupBy: 'bar',\n            name: 'b',\n            secondaryValue: 2,\n            value: 2,\n          },\n        ],\n        groupBy: 'foo',\n        name: 'b-1',\n        secondaryValue: 2,\n        value: 2,\n      },\n      {\n        children: [\n          {\n            groupBy: 'bar',\n            name: 'b',\n            secondaryValue: 2,\n            value: 2,\n          },\n        ],\n        groupBy: 'foo',\n        name: 'b-2',\n        secondaryValue: 2,\n        value: 2,\n      },\n      {\n        children: [\n          {\n            groupBy: 'bar',\n            name: 'c',\n            secondaryValue: 2,\n            value: 2,\n          },\n        ],\n        groupBy: 'foo',\n        name: 'c-1',\n        secondaryValue: 2,\n        value: 2,\n      },\n      {\n        children: [\n          {\n            groupBy: 'bar',\n            name: 'c',\n            secondaryValue: 2,\n            value: 2,\n          },\n        ],\n        groupBy: 'foo',\n        name: 'c-2',\n        secondaryValue: 2,\n        value: 2,\n      },\n      {\n        children: [\n          {\n            groupBy: 'bar',\n            name: 'd',\n            secondaryValue: 2,\n            value: 2,\n          },\n        ],\n        groupBy: 'foo',\n        name: 'd-1',\n        secondaryValue: 2,\n        value: 2,\n      },\n    ]);\n  });","file":"utils/treeBuilder.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"should build tree with secondaryValue as expected","suites":["test treeBuilder"],"updatePoint":{"line":171,"column":55},"line":171,"code":"  it('should build tree with secondaryValue as expected', () => {\n    const tree = treeBuilder(data, ['foo', 'bar'], 'count', 'count2');\n    expect(tree).toEqual([\n      {\n        children: [\n          {\n            groupBy: 'bar',\n            name: 'a',\n            secondaryValue: 3,\n            value: 2,\n          },\n        ],\n        groupBy: 'foo',\n        name: 'a-1',\n        secondaryValue: 3,\n        value: 2,\n      },\n      {\n        children: [\n          {\n            groupBy: 'bar',\n            name: 'a',\n            secondaryValue: 3,\n            value: 2,\n          },\n        ],\n        groupBy: 'foo',\n        name: 'a-2',\n        secondaryValue: 3,\n        value: 2,\n      },\n      {\n        children: [\n          {\n            groupBy: 'bar',\n            name: 'b',\n            secondaryValue: 3,\n            value: 2,\n          },\n        ],\n        groupBy: 'foo',\n        name: 'b-1',\n        secondaryValue: 3,\n        value: 2,\n      },\n      {\n        children: [\n          {\n            groupBy: 'bar',\n            name: 'b',\n            secondaryValue: 3,\n            value: 2,\n          },\n        ],\n        groupBy: 'foo',\n        name: 'b-2',\n        secondaryValue: 3,\n        value: 2,\n      },\n      {\n        children: [\n          {\n            groupBy: 'bar',\n            name: 'c',\n            secondaryValue: 3,\n            value: 2,\n          },\n        ],\n        groupBy: 'foo',\n        name: 'c-1',\n        secondaryValue: 3,\n        value: 2,\n      },\n      {\n        children: [\n          {\n            groupBy: 'bar',\n            name: 'c',\n            secondaryValue: 3,\n            value: 2,\n          },\n        ],\n        groupBy: 'foo',\n        name: 'c-2',\n        secondaryValue: 3,\n        value: 2,\n      },\n      {\n        children: [\n          {\n            groupBy: 'bar',\n            name: 'd',\n            secondaryValue: 3,\n            value: 2,\n          },\n        ],\n        groupBy: 'foo',\n        name: 'd-1',\n        secondaryValue: 3,\n        value: 2,\n      },\n    ]);\n  });","file":"utils/treeBuilder.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-echarts/test"},{"name":"exists","suites":["@superset-ui/plugin-chart-pivot-table"],"updatePoint":{"line":30,"column":12},"line":30,"code":"  it('exists', () => {\n    expect(PivotTableChartPlugin).toBeDefined();\n  });","file":"index.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-pivot-table/test"},{"name":"should build groupby with series in form data","suites":["PivotTableChart buildQuery"],"updatePoint":{"line":55,"column":51},"line":55,"code":"  it('should build groupby with series in form data', () => {\n    const queryContext = buildQuery(formData);\n    const [query] = queryContext.queries;\n    expect(query.columns).toEqual(['col1', 'col2', 'row1', 'row2']);\n  });","file":"plugin/buildQuery.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-pivot-table/test"},{"name":"should work with old charts after GENERIC_CHART_AXES is enabled","suites":["PivotTableChart buildQuery"],"updatePoint":{"line":61,"column":69},"line":61,"code":"  it('should work with old charts after GENERIC_CHART_AXES is enabled', () => {\n    Object.defineProperty(supersetCoreModule, 'hasGenericChartAxes', {\n      value: true,\n    });\n    const modifiedFormData = {\n      ...formData,\n      time_grain_sqla: TimeGranularity.MONTH,\n      granularity_sqla: 'col1',\n    };\n    const queryContext = buildQuery(modifiedFormData);\n    const [query] = queryContext.queries;\n    expect(query.columns).toEqual([\n      {\n        timeGrain: 'P1M',\n        columnType: 'BASE_AXIS',\n        sqlExpression: 'col1',\n        label: 'col1',\n        expressionType: 'SQL',\n      },\n      'col2',\n      'row1',\n      'row2',\n    ]);\n  });","file":"plugin/buildQuery.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-pivot-table/test"},{"name":"should transform chart props for viz","suites":["PivotTableChart transformProps"],"updatePoint":{"line":66,"column":42},"line":66,"code":"  it('should transform chart props for viz', () => {\n    expect(transformProps(chartProps)).toEqual({\n      width: 800,\n      height: 600,\n      groupbyRows: ['row1', 'row2'],\n      groupbyColumns: ['col1', 'col2'],\n      metrics: ['metric1', 'metric2'],\n      tableRenderer: 'Table With Subtotal',\n      colOrder: 'key_a_to_z',\n      rowOrder: 'key_a_to_z',\n      aggregateFunction: 'Sum',\n      transposePivot: true,\n      combineMetric: true,\n      rowSubtotalPosition: true,\n      colSubtotalPosition: true,\n      colTotals: true,\n      rowTotals: true,\n      valueFormat: 'SMART_NUMBER',\n      data: [{ name: 'Hulk', sum__num: 1, __timestamp: 599616000000 }],\n      setDataMask,\n      selectedFilters: {},\n      verboseMap: {},\n      metricsLayout: MetricsLayoutEnum.COLUMNS,\n      metricColorFormatters: [],\n      dateFormatters: {},\n      emitCrossFilters: false,\n      columnFormats: {},\n    });\n  });","file":"plugin/transformProps.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-pivot-table/test"},{"name":"should add post-processing and ignore duplicate metrics","suites":["plugin-chart-table","buildQuery"],"updatePoint":{"line":30,"column":63},"line":30,"code":"    it('should add post-processing and ignore duplicate metrics', () => {\n      const query = buildQuery({\n        ...basicFormData,\n        query_mode: QueryMode.aggregate,\n        metrics: ['aaa', 'aaa'],\n        percent_metrics: ['bbb', 'bbb'],\n      }).queries[0];\n      expect(query.metrics).toEqual(['aaa', 'bbb']);\n      expect(query.post_processing).toEqual([\n        {\n          operation: 'contribution',\n          options: {\n            columns: ['bbb'],\n            rename_columns: ['%bbb'],\n          },\n        },\n      ]);\n    });","file":"buildQuery.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-table/test"},{"name":"should not add metrics in raw records mode","suites":["plugin-chart-table","buildQuery"],"updatePoint":{"line":49,"column":50},"line":49,"code":"    it('should not add metrics in raw records mode', () => {\n      const query = buildQuery({\n        ...basicFormData,\n        query_mode: QueryMode.raw,\n        columns: ['a'],\n        metrics: ['aaa', 'aaa'],\n        percent_metrics: ['bbb', 'bbb'],\n      }).queries[0];\n      expect(query.metrics).toBeUndefined();\n      expect(query.post_processing).toEqual([]);\n    });","file":"buildQuery.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-table/test"},{"name":"should not add post-processing when there is no percent metric","suites":["plugin-chart-table","buildQuery"],"updatePoint":{"line":61,"column":70},"line":61,"code":"    it('should not add post-processing when there is no percent metric', () => {\n      const query = buildQuery({\n        ...basicFormData,\n        query_mode: QueryMode.aggregate,\n        metrics: ['aaa'],\n        percent_metrics: [],\n      }).queries[0];\n      expect(query.metrics).toEqual(['aaa']);\n      expect(query.post_processing).toEqual([]);\n    });","file":"buildQuery.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-table/test"},{"name":"should not add post-processing in raw records mode","suites":["plugin-chart-table","buildQuery"],"updatePoint":{"line":72,"column":58},"line":72,"code":"    it('should not add post-processing in raw records mode', () => {\n      const query = buildQuery({\n        ...basicFormData,\n        query_mode: QueryMode.raw,\n        metrics: ['aaa'],\n        columns: ['rawcol'],\n        percent_metrics: ['ccc'],\n      }).queries[0];\n      expect(query.metrics).toBeUndefined();\n      expect(query.columns).toEqual(['rawcol']);\n      expect(query.post_processing).toEqual([]);\n    });","file":"buildQuery.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-table/test"},{"name":"Sort rows","suites":["sortAlphanumericCaseInsensitive"],"updatePoint":{"line":81,"column":15},"line":81,"code":"  it('Sort rows', () => {\n    const sorted = [...testData].sort((a, b) =>\n      // @ts-ignore\n      sortAlphanumericCaseInsensitive(a, b, 'col'),\n    );\n\n    expect(sorted).toEqual([\n      {\n        values: {\n          col: null,\n        },\n      },\n      {\n        values: {\n          col: undefined,\n        },\n      },\n      {\n        values: {\n          col: Infinity,\n        },\n      },\n      {\n        values: {\n          col: NaN,\n        },\n      },\n      {\n        values: {\n          col: '.!# value starting with non-letter characters',\n        },\n      },\n      {\n        values: {\n          col: '1234',\n        },\n      },\n      {\n        values: {\n          col: '5',\n        },\n      },\n      {\n        values: {\n          col: 'a lowercase test value',\n        },\n      },\n      {\n        values: {\n          col: 'An uppercase test value',\n        },\n      },\n      {\n        values: {\n          col: 'test value',\n        },\n      },\n    ]);\n  });","file":"sortAlphanumericCaseInsensitive.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-table/test"},{"name":"Sort rows","suites":["sortAlphanumericCaseInsensitiveMulti"],"updatePoint":{"line":188,"column":15},"line":188,"code":"  it('Sort rows', () => {\n    const sorted = defaultOrderByFn(\n      [...testDataMulti] as Array<Row<object>>,\n      [\n        (a, b) => sortAlphanumericCaseInsensitive(a, b, 'colA'),\n        (a, b) => sortAlphanumericCaseInsensitive(a, b, 'colB'),\n      ],\n      [true, false],\n    );\n\n    expect(sorted).toEqual([\n      {\n        values: {\n          colA: 'group 1',\n          colB: '20',\n        },\n      },\n      {\n        values: {\n          colA: 'group 1',\n          colB: '15',\n        },\n      },\n      {\n        values: {\n          colA: 'group 1',\n          colB: '10',\n        },\n      },\n      {\n        values: {\n          colA: 'group 2',\n          colB: '10',\n        },\n      },\n      {\n        values: {\n          colA: 'group 3',\n          colB: '15',\n        },\n      },\n      {\n        values: {\n          colA: 'group 3',\n          colB: '10',\n        },\n      },\n      {\n        values: {\n          colA: 'group 3',\n          colB: '10',\n        },\n      },\n    ]);\n  });","file":"sortAlphanumericCaseInsensitive.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-table/test"},{"name":"exports WordCloudChartPlugin","suites":["plugin-chart-word-cloud"],"updatePoint":{"line":23,"column":34},"line":23,"code":"  it('exports WordCloudChartPlugin', () => {\n    expect(WordCloudChartPlugin).toBeDefined();\n  });","file":"index.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-word-cloud/test"},{"name":"exports LegacyWordCloudChartPlugin","suites":["plugin-chart-word-cloud"],"updatePoint":{"line":26,"column":40},"line":26,"code":"  it('exports LegacyWordCloudChartPlugin', () => {\n    expect(LegacyWordCloudChartPlugin).toBeDefined();\n  });","file":"index.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-word-cloud/test"},{"name":"should transform chart props for word cloud viz","suites":["WordCloud transformProps"],"updatePoint":{"line":46,"column":53},"line":46,"code":"  it('should transform chart props for word cloud viz', () => {\n    expect(transformProps(chartProps)).toEqual({\n      width: 800,\n      height: 600,\n      encoding: {\n        color: {\n          field: 'name',\n          scale: {\n            scheme: 'bnbColors',\n          },\n          type: 'nominal',\n        },\n        fontSize: {\n          field: 'sum__num',\n          scale: {\n            range: [10, 70],\n            zero: true,\n          },\n          type: 'quantitative',\n        },\n        text: {\n          field: 'name',\n        },\n      },\n      rotation: 'square',\n      data: [{ name: 'Hulk', sum__num: 1 }],\n    });\n  });","file":"legacyPlugin/transformProps.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-word-cloud/test"},{"name":"should build columns from series in form data","suites":["WordCloud buildQuery"],"updatePoint":{"line":31,"column":51},"line":31,"code":"  it('should build columns from series in form data', () => {\n    const queryContext = buildQuery(formData);\n    const [query] = queryContext.queries;\n    expect(query.columns).toEqual(['foo']);\n  });","file":"plugin/buildQuery.test.ts","skipped":false,"dir":"superset-frontend/plugins/plugin-chart-word-cloud/test"},{"name":"buildConfig() builds configuration and applies env var overrides","suites":[],"updatePoint":{"line":21,"column":70},"line":21,"code":"test('buildConfig() builds configuration and applies env var overrides', () => {\n  let config = buildConfig();\n\n  expect(config.jwtSecret).toEqual(\n    'test123-test123-test123-test123-test123-test123-test123',\n  );\n  expect(config.redis.host).toEqual('127.0.0.1');\n  expect(config.redis.port).toEqual(6379);\n  expect(config.redis.password).toEqual('');\n  expect(config.redis.db).toEqual(10);\n  expect(config.redis.ssl).toEqual(false);\n  expect(config.statsd.host).toEqual('127.0.0.1');\n  expect(config.statsd.port).toEqual(8125);\n  expect(config.statsd.globalTags).toEqual([]);\n\n  process.env.JWT_SECRET = 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa';\n  process.env.REDIS_HOST = '10.10.10.10';\n  process.env.REDIS_PORT = '6380';\n  process.env.REDIS_PASSWORD = 'admin';\n  process.env.REDIS_DB = '4';\n  process.env.REDIS_SSL = 'true';\n  process.env.STATSD_HOST = '15.15.15.15';\n  process.env.STATSD_PORT = '8000';\n  process.env.STATSD_GLOBAL_TAGS = 'tag-1,tag-2';\n\n  config = buildConfig();\n\n  expect(config.jwtSecret).toEqual('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa');\n  expect(config.redis.host).toEqual('10.10.10.10');\n  expect(config.redis.port).toEqual(6380);\n  expect(config.redis.password).toEqual('admin');\n  expect(config.redis.db).toEqual(4);\n  expect(config.redis.ssl).toEqual(true);\n  expect(config.statsd.host).toEqual('15.15.15.15');\n  expect(config.statsd.port).toEqual(8000);\n  expect(config.statsd.globalTags).toEqual(['tag-1', 'tag-2']);\n\n  delete process.env.JWT_SECRET;\n  delete process.env.REDIS_HOST;\n  delete process.env.REDIS_PORT;\n  delete process.env.REDIS_PASSWORD;\n  delete process.env.REDIS_DB;\n  delete process.env.REDIS_SSL;\n  delete process.env.STATSD_HOST;\n  delete process.env.STATSD_PORT;\n  delete process.env.STATSD_GLOBAL_TAGS;\n});","file":"config.test.ts","skipped":false,"dir":"superset-websocket/spec"},{"name":"services health checks","suites":["server","HTTP requests"],"updatePoint":{"line":75,"column":32},"line":75,"code":"    test('services health checks', () => {\n      const endMock = jest.fn();\n      const writeHeadMock = jest.fn();\n\n      const request = {\n        url: '/health',\n        method: 'GET',\n        headers: {\n          host: 'example.com',\n        },\n      };\n\n      const response = {\n        writeHead: writeHeadMock,\n        end: endMock,\n      };\n\n      server.httpRequest(request as any, response as any);\n\n      expect(writeHeadMock).toBeCalledTimes(1);\n      expect(writeHeadMock).toHaveBeenLastCalledWith(200);\n\n      expect(endMock).toBeCalledTimes(1);\n      expect(endMock).toHaveBeenLastCalledWith('OK');\n    });","file":"index.test.ts","skipped":false,"dir":"superset-websocket/spec"},{"name":"responds with a 404 when not found","suites":["server","HTTP requests"],"updatePoint":{"line":101,"column":44},"line":101,"code":"    test('responds with a 404 when not found', () => {\n      const endMock = jest.fn();\n      const writeHeadMock = jest.fn();\n\n      const request = {\n        url: '/unsupported',\n        method: 'GET',\n        headers: {\n          host: 'example.com',\n        },\n      };\n\n      const response = {\n        writeHead: writeHeadMock,\n        end: endMock,\n      };\n\n      server.httpRequest(request as any, response as any);\n\n      expect(writeHeadMock).toBeCalledTimes(1);\n      expect(writeHeadMock).toHaveBeenLastCalledWith(404);\n\n      expect(endMock).toBeCalledTimes(1);\n      expect(endMock).toHaveBeenLastCalledWith('Not Found');\n    });","file":"index.test.ts","skipped":false,"dir":"superset-websocket/spec"},{"name":"it increments a valid Redis stream ID","suites":["server","incrementId"],"updatePoint":{"line":129,"column":47},"line":129,"code":"    test('it increments a valid Redis stream ID', () => {\n      expect(server.incrementId('1607477697866-0')).toEqual('1607477697866-1');\n    });","file":"index.test.ts","skipped":false,"dir":"superset-websocket/spec"},{"name":"it handles an invalid Redis stream ID","suites":["server","incrementId"],"updatePoint":{"line":133,"column":47},"line":133,"code":"    test('it handles an invalid Redis stream ID', () => {\n      expect(server.incrementId('foo')).toEqual('foo');\n    });","file":"index.test.ts","skipped":false,"dir":"superset-websocket/spec"},{"name":"it builds a valid Redis URL from defaults","suites":["server","redisUrlFromConfig"],"updatePoint":{"line":139,"column":51},"line":139,"code":"    test('it builds a valid Redis URL from defaults', () => {\n      expect(\n        server.redisUrlFromConfig({\n          port: 6379,\n          host: '127.0.0.1',\n          password: '',\n          db: 0,\n          ssl: false,\n        }),\n      ).toEqual('redis://127.0.0.1:6379/0');\n    });","file":"index.test.ts","skipped":false,"dir":"superset-websocket/spec"},{"name":"it builds a valid Redis URL with a password","suites":["server","redisUrlFromConfig"],"updatePoint":{"line":150,"column":53},"line":150,"code":"    test('it builds a valid Redis URL with a password', () => {\n      expect(\n        server.redisUrlFromConfig({\n          port: 6380,\n          host: 'redis.local',\n          password: 'foo',\n          db: 1,\n          ssl: false,\n        }),\n      ).toEqual('redis://:foo@redis.local:6380/1');\n    });","file":"index.test.ts","skipped":false,"dir":"superset-websocket/spec"},{"name":"it builds a valid Redis URL with SSL","suites":["server","redisUrlFromConfig"],"updatePoint":{"line":161,"column":46},"line":161,"code":"    test('it builds a valid Redis URL with SSL', () => {\n      expect(\n        server.redisUrlFromConfig({\n          port: 6379,\n          host: '127.0.0.1',\n          password: '',\n          db: 0,\n          ssl: true,\n        }),\n      ).toEqual('rediss://127.0.0.1:6379/0');\n    });","file":"index.test.ts","skipped":false,"dir":"superset-websocket/spec"},{"name":"sends data to channel","suites":["server","processStreamResults"],"updatePoint":{"line":175,"column":31},"line":175,"code":"    test('sends data to channel', async () => {\n      const ws = new wsMock('localhost');\n      const sendMock = jest.spyOn(ws, 'send');\n      const socketInstance = { ws: ws, channel: channelId, pongTs: Date.now() };\n\n      expect(statsdIncrementMock).toBeCalledTimes(0);\n      server.trackClient(channelId, socketInstance);\n      expect(statsdIncrementMock).toBeCalledTimes(1);\n      expect(statsdIncrementMock).toHaveBeenNthCalledWith(\n        1,\n        'ws_connected_client',\n      );\n\n      server.processStreamResults(streamReturnValue);\n      expect(statsdIncrementMock).toBeCalledTimes(1);\n\n      const message1 = `{\"id\":\"1615426152415-0\",\"channel_id\":\"${channelId}\",\"job_id\":\"c9b99965-8f1e-4ce5-aa43-d6fc94d6a510\",\"user_id\":\"1\",\"status\":\"done\",\"errors\":[],\"result_url\":\"/superset/explore_json/data/ejr-37281682b1282cdb8f25e0de0339b386\"}`;\n      const message2 = `{\"id\":\"1615426152516-0\",\"channel_id\":\"${channelId}\",\"job_id\":\"f1e5bb1f-f2f1-4f21-9b2f-c9b91dcc9b59\",\"user_id\":\"1\",\"status\":\"done\",\"errors\":[],\"result_url\":\"/api/v1/chart/data/qc-64e8452dc9907dd77746cb75a19202de\"}`;\n      expect(sendMock).toHaveBeenCalledWith(message1);\n      expect(sendMock).toHaveBeenCalledWith(message2);\n    });","file":"index.test.ts","skipped":false,"dir":"superset-websocket/spec"},{"name":"channel not present","suites":["server","processStreamResults"],"updatePoint":{"line":197,"column":29},"line":197,"code":"    test('channel not present', async () => {\n      const ws = new wsMock('localhost');\n      const sendMock = jest.spyOn(ws, 'send');\n\n      expect(statsdIncrementMock).toBeCalledTimes(0);\n      server.processStreamResults(streamReturnValue);\n      expect(statsdIncrementMock).toBeCalledTimes(0);\n\n      expect(sendMock).not.toHaveBeenCalled();\n    });","file":"index.test.ts","skipped":false,"dir":"superset-websocket/spec"},{"name":"error sending data to client","suites":["server","processStreamResults"],"updatePoint":{"line":208,"column":38},"line":208,"code":"    test('error sending data to client', async () => {\n      const ws = new wsMock('localhost');\n      const sendMock = jest.spyOn(ws, 'send').mockImplementation(() => {\n        throw new Error();\n      });\n      const cleanChannelMock = jest.spyOn(server, 'cleanChannel');\n      const socketInstance = { ws: ws, channel: channelId, pongTs: Date.now() };\n\n      expect(statsdIncrementMock).toBeCalledTimes(0);\n      server.trackClient(channelId, socketInstance);\n      expect(statsdIncrementMock).toBeCalledTimes(1);\n      expect(statsdIncrementMock).toHaveBeenNthCalledWith(\n        1,\n        'ws_connected_client',\n      );\n\n      server.processStreamResults(streamReturnValue);\n      expect(statsdIncrementMock).toBeCalledTimes(2);\n      expect(statsdIncrementMock).toHaveBeenNthCalledWith(\n        2,\n        'ws_client_send_error',\n      );\n\n      expect(sendMock).toHaveBeenCalled();\n      expect(cleanChannelMock).toHaveBeenCalledWith(channelId);\n\n      cleanChannelMock.mockRestore();\n    });","file":"index.test.ts","skipped":false,"dir":"superset-websocket/spec"},{"name":"success with results","suites":["server","fetchRangeFromStream"],"updatePoint":{"line":243,"column":30},"line":243,"code":"    test('success with results', async () => {\n      mockRedisXrange.mockResolvedValueOnce(streamReturnValue);\n      const cb = jest.fn();\n      await server.fetchRangeFromStream({\n        sessionId: '123',\n        startId: '-',\n        endId: '+',\n        listener: cb,\n      });\n\n      expect(mockRedisXrange).toHaveBeenCalledWith(\n        'test-async-events-123',\n        '-',\n        '+',\n      );\n      expect(cb).toHaveBeenCalledWith(streamReturnValue);\n    });","file":"index.test.ts","skipped":false,"dir":"superset-websocket/spec"},{"name":"success no results","suites":["server","fetchRangeFromStream"],"updatePoint":{"line":261,"column":28},"line":261,"code":"    test('success no results', async () => {\n      const cb = jest.fn();\n      await server.fetchRangeFromStream({\n        sessionId: '123',\n        startId: '-',\n        endId: '+',\n        listener: cb,\n      });\n\n      expect(mockRedisXrange).toHaveBeenCalledWith(\n        'test-async-events-123',\n        '-',\n        '+',\n      );\n      expect(cb).not.toHaveBeenCalled();\n    });","file":"index.test.ts","skipped":false,"dir":"superset-websocket/spec"},{"name":"error","suites":["server","fetchRangeFromStream"],"updatePoint":{"line":278,"column":15},"line":278,"code":"    test('error', async () => {\n      const cb = jest.fn();\n      mockRedisXrange.mockRejectedValueOnce(new Error());\n      await server.fetchRangeFromStream({\n        sessionId: '123',\n        startId: '-',\n        endId: '+',\n        listener: cb,\n      });\n\n      expect(mockRedisXrange).toHaveBeenCalledWith(\n        'test-async-events-123',\n        '-',\n        '+',\n      );\n      expect(cb).not.toHaveBeenCalled();\n    });","file":"index.test.ts","skipped":false,"dir":"superset-websocket/spec"},{"name":"invalid JWT","suites":["server","wsConnection"],"updatePoint":{"line":337,"column":21},"line":337,"code":"    test('invalid JWT', async () => {\n      const invalidToken = jwt.sign({ channel: channelId }, 'invalid secret');\n      const request = getRequest(invalidToken, 'http://localhost');\n\n      expect(() => {\n        server.wsConnection(ws, request);\n      }).toThrow();\n    });","file":"index.test.ts","skipped":false,"dir":"superset-websocket/spec"},{"name":"valid JWT, no lastId","suites":["server","wsConnection"],"updatePoint":{"line":346,"column":30},"line":346,"code":"    test('valid JWT, no lastId', async () => {\n      const validToken = jwt.sign({ channel: channelId }, config.jwtSecret);\n      const request = getRequest(validToken, 'http://localhost');\n\n      server.wsConnection(ws, request);\n\n      expect(trackClientSpy).toHaveBeenCalledWith(\n        channelId,\n        socketInstanceExpected,\n      );\n      expect(fetchRangeFromStreamSpy).not.toHaveBeenCalled();\n      expect(wsEventMock).toHaveBeenCalledWith('pong', expect.any(Function));\n    });","file":"index.test.ts","skipped":false,"dir":"superset-websocket/spec"},{"name":"valid JWT, with lastId","suites":["server","wsConnection"],"updatePoint":{"line":360,"column":32},"line":360,"code":"    test('valid JWT, with lastId', async () => {\n      const validToken = jwt.sign({ channel: channelId }, config.jwtSecret);\n      const lastId = '1615426152415-0';\n      const request = getRequest(\n        validToken,\n        `http://localhost?last_id=${lastId}`,\n      );\n\n      server.wsConnection(ws, request);\n\n      expect(trackClientSpy).toHaveBeenCalledWith(\n        channelId,\n        socketInstanceExpected,\n      );\n      expect(fetchRangeFromStreamSpy).toHaveBeenCalledWith({\n        sessionId: channelId,\n        startId: '1615426152415-1',\n        endId: '+',\n        listener: server.processStreamResults,\n      });\n      expect(wsEventMock).toHaveBeenCalledWith('pong', expect.any(Function));\n    });","file":"index.test.ts","skipped":false,"dir":"superset-websocket/spec"},{"name":"valid JWT, with lastId and lastFirehoseId","suites":["server","wsConnection"],"updatePoint":{"line":383,"column":51},"line":383,"code":"    test('valid JWT, with lastId and lastFirehoseId', async () => {\n      const validToken = jwt.sign({ channel: channelId }, config.jwtSecret);\n      const lastId = '1615426152415-0';\n      const lastFirehoseId = '1715426152415-0';\n      const request = getRequest(\n        validToken,\n        `http://localhost?last_id=${lastId}`,\n      );\n\n      server.setLastFirehoseId(lastFirehoseId);\n      server.wsConnection(ws, request);\n\n      expect(trackClientSpy).toHaveBeenCalledWith(\n        channelId,\n        socketInstanceExpected,\n      );\n      expect(fetchRangeFromStreamSpy).toHaveBeenCalledWith({\n        sessionId: channelId,\n        startId: '1615426152415-1',\n        endId: lastFirehoseId,\n        listener: server.processStreamResults,\n      });\n      expect(wsEventMock).toHaveBeenCalledWith('pong', expect.any(Function));\n    });","file":"index.test.ts","skipped":false,"dir":"superset-websocket/spec"},{"name":"invalid JWT","suites":["server","httpUpgrade"],"updatePoint":{"line":432,"column":21},"line":432,"code":"    test('invalid JWT', async () => {\n      const invalidToken = jwt.sign({ channel: channelId }, 'invalid secret');\n      const request = getRequest(invalidToken, 'http://localhost');\n\n      server.httpUpgrade(request, socket, Buffer.alloc(5));\n      expect(socketDestroySpy).toHaveBeenCalled();\n      expect(wssUpgradeSpy).not.toHaveBeenCalled();\n    });","file":"index.test.ts","skipped":false,"dir":"superset-websocket/spec"},{"name":"valid JWT, no channel","suites":["server","httpUpgrade"],"updatePoint":{"line":441,"column":31},"line":441,"code":"    test('valid JWT, no channel', async () => {\n      const validToken = jwt.sign({ foo: 'bar' }, config.jwtSecret);\n      const request = getRequest(validToken, 'http://localhost');\n\n      server.httpUpgrade(request, socket, Buffer.alloc(5));\n\n      expect(socketDestroySpy).toHaveBeenCalled();\n      expect(wssUpgradeSpy).not.toHaveBeenCalled();\n    });","file":"index.test.ts","skipped":false,"dir":"superset-websocket/spec"},{"name":"valid upgrade","suites":["server","httpUpgrade"],"updatePoint":{"line":451,"column":23},"line":451,"code":"    test('valid upgrade', async () => {\n      const validToken = jwt.sign({ channel: channelId }, config.jwtSecret);\n      const request = getRequest(validToken, 'http://localhost');\n\n      server.httpUpgrade(request, socket, Buffer.alloc(5));\n\n      expect(socketDestroySpy).not.toHaveBeenCalled();\n      expect(wssUpgradeSpy).toHaveBeenCalled();\n    });","file":"index.test.ts","skipped":false,"dir":"superset-websocket/spec"},{"name":"active sockets","suites":["server","checkSockets"],"updatePoint":{"line":487,"column":24},"line":487,"code":"    test('active sockets', () => {\n      setReadyState(ws, WebSocket.OPEN);\n      server.trackClient(channelId, socketInstance);\n\n      server.checkSockets();\n\n      expect(pingSpy).toHaveBeenCalled();\n      expect(terminateSpy).not.toHaveBeenCalled();\n      expect(Object.keys(server.sockets).length).toBe(1);\n    });","file":"index.test.ts","skipped":false,"dir":"superset-websocket/spec"},{"name":"stale sockets","suites":["server","checkSockets"],"updatePoint":{"line":498,"column":23},"line":498,"code":"    test('stale sockets', () => {\n      setReadyState(ws, WebSocket.OPEN);\n      socketInstance.pongTs = Date.now() - 60000;\n      server.trackClient(channelId, socketInstance);\n\n      server.checkSockets();\n\n      expect(pingSpy).not.toHaveBeenCalled();\n      expect(terminateSpy).toHaveBeenCalled();\n      expect(Object.keys(server.sockets).length).toBe(0);\n    });","file":"index.test.ts","skipped":false,"dir":"superset-websocket/spec"},{"name":"closed sockets","suites":["server","checkSockets"],"updatePoint":{"line":510,"column":24},"line":510,"code":"    test('closed sockets', () => {\n      setReadyState(ws, WebSocket.CLOSED);\n      server.trackClient(channelId, socketInstance);\n\n      server.checkSockets();\n\n      expect(pingSpy).not.toHaveBeenCalled();\n      expect(terminateSpy).not.toHaveBeenCalled();\n      expect(Object.keys(server.sockets).length).toBe(0);\n    });","file":"index.test.ts","skipped":false,"dir":"superset-websocket/spec"},{"name":"no sockets","suites":["server","checkSockets"],"updatePoint":{"line":521,"column":20},"line":521,"code":"    test('no sockets', () => {\n      // don't error\n      server.checkSockets();\n    });","file":"index.test.ts","skipped":false,"dir":"superset-websocket/spec"},{"name":"active sockets","suites":["server","cleanChannel"],"updatePoint":{"line":536,"column":24},"line":536,"code":"    test('active sockets', () => {\n      setReadyState(ws, WebSocket.OPEN);\n      server.trackClient(channelId, socketInstance);\n\n      server.cleanChannel(channelId);\n\n      expect(server.channels[channelId].sockets.length).toBe(1);\n    });","file":"index.test.ts","skipped":false,"dir":"superset-websocket/spec"},{"name":"closing sockets","suites":["server","cleanChannel"],"updatePoint":{"line":545,"column":25},"line":545,"code":"    test('closing sockets', () => {\n      setReadyState(ws, WebSocket.CLOSING);\n      server.trackClient(channelId, socketInstance);\n\n      server.cleanChannel(channelId);\n\n      expect(server.channels[channelId]).toBeUndefined();\n    });","file":"index.test.ts","skipped":false,"dir":"superset-websocket/spec"},{"name":"multiple sockets","suites":["server","cleanChannel"],"updatePoint":{"line":554,"column":26},"line":554,"code":"    test('multiple sockets', () => {\n      setReadyState(ws, WebSocket.OPEN);\n      server.trackClient(channelId, socketInstance);\n\n      const ws2 = new wsMock('localhost');\n      setReadyState(ws2, WebSocket.OPEN);\n      const socketInstance2 = {\n        ws: ws2,\n        channel: channelId,\n        pongTs: Date.now(),\n      };\n      server.trackClient(channelId, socketInstance2);\n\n      server.cleanChannel(channelId);\n\n      expect(server.channels[channelId].sockets.length).toBe(2);\n\n      setReadyState(ws2, WebSocket.CLOSED);\n      server.cleanChannel(channelId);\n\n      expect(server.channels[channelId].sockets.length).toBe(1);\n    });","file":"index.test.ts","skipped":false,"dir":"superset-websocket/spec"},{"name":"invalid channel","suites":["server","cleanChannel"],"updatePoint":{"line":577,"column":25},"line":577,"code":"    test('invalid channel', () => {\n      // don't error\n      server.cleanChannel(channelId);\n    });","file":"index.test.ts","skipped":false,"dir":"superset-websocket/spec"}]}