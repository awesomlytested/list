{"repo":"appium/appium","url":"https://github.com/appium/appium","branch":"master","configs":[{"package":"appium","lang":"js","dir":"test","framework":"mocha","pattern":"**/*.{js,ts}"},{"package":"javascript-wd","lang":"js","dir":"sample-code/javascript-wd/test","framework":"mocha","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"},{"package":"webdriverio-sample-appium-tests","lang":"js","dir":"sample-code/javascript-webdriverio/test","framework":"mocha","pattern":"**/*[._-]{test,spec,unittest,unit}.{ts,js}"}],"tests":[{"name":"should get a reasonable git revision","suites":["Config","getGitRev"],"updatePoint":{"line":15,"column":44,"index":674},"line":15,"code":"    it('should get a reasonable git revision', async function () {\n      let rev = await getGitRev();\n      rev.should.be.a('string');\n      rev.length.should.be.equal(40);\n      rev.match(/[0-9a-f]+/i)[0].should.eql(rev);\n    });","file":"config-specs.js","skipped":false,"dir":"test"},{"name":"should get a configuration object if the local git metadata is present","suites":["Config","Appium config","getBuildInfo"],"updatePoint":{"line":46,"column":80,"index":1737},"line":46,"code":"      it('should get a configuration object if the local git metadata is present', async function () {\n        await verifyBuildInfoUpdate(true);\n      });","file":"config-specs.js","skipped":false,"dir":"test"},{"name":"should get a configuration object if the local git metadata is not present","suites":["Config","Appium config","getBuildInfo"],"updatePoint":{"line":49,"column":84,"index":1897},"line":49,"code":"      it('should get a configuration object if the local git metadata is not present', async function () {\n        getStub.onCall(0).returns({\n          data: [{\n            'name': `v${APPIUM_VER}`,\n            'zipball_url': 'https://api.github.com/repos/appium/appium/zipball/v1.9.0-beta.1',\n            'tarball_url': 'https://api.github.com/repos/appium/appium/tarball/v1.9.0-beta.1',\n            'commit': {\n              'sha': '3c2752f9f9c56000705a4ae15b3ba68a5d2e644c',\n              'url': 'https://api.github.com/repos/appium/appium/commits/3c2752f9f9c56000705a4ae15b3ba68a5d2e644c'\n            },\n            'node_id': 'MDM6UmVmNzUzMDU3MDp2MS45LjAtYmV0YS4x'\n          }, {\n            'name': 'v1.8.2-beta',\n            'zipball_url': 'https://api.github.com/repos/appium/appium/zipball/v1.8.2-beta',\n            'tarball_url': 'https://api.github.com/repos/appium/appium/tarball/v1.8.2-beta',\n            'commit': {\n              'sha': '5b98b9197e75aa85e7507d21d3126c1a63d1ce8f',\n              'url': 'https://api.github.com/repos/appium/appium/commits/5b98b9197e75aa85e7507d21d3126c1a63d1ce8f'\n            },\n            'node_id': 'MDM6UmVmNzUzMDU3MDp2MS44LjItYmV0YQ=='\n          }]\n        });\n        getStub.onCall(1).returns({\n          data: {\n            'sha': '3c2752f9f9c56000705a4ae15b3ba68a5d2e644c',\n            'node_id': 'MDY6Q29tbWl0NzUzMDU3MDozYzI3NTJmOWY5YzU2MDAwNzA1YTRhZTE1YjNiYTY4YTVkMmU2NDRj',\n            'commit': {\n              'author': {\n                'name': 'Isaac Murchie',\n                'email': 'isaac@saucelabs.com',\n                'date': '2018-08-17T19:48:00Z'\n              },\n              'committer': {\n                'name': 'Isaac Murchie',\n                'email': 'isaac@saucelabs.com',\n                'date': '2018-08-17T19:48:00Z'\n              },\n              'message': 'v1.9.0-beta.1',\n              'tree': {\n                'sha': '2c0974727470eba419ea0b9951c52f72f8036b18',\n                'url': 'https://api.github.com/repos/appium/appium/git/trees/2c0974727470eba419ea0b9951c52f72f8036b18'\n              },\n              'url': 'https://api.github.com/repos/appium/appium/git/commits/3c2752f9f9c56000705a4ae15b3ba68a5d2e644c',\n              'comment_count': 0,\n              'verification': {\n                'verified': false,\n                'reason': 'unsigned',\n                'signature': null,\n                'payload': null\n              }\n            },\n            'url': 'https://api.github.com/repos/appium/appium/commits/3c2752f9f9c56000705a4ae15b3ba68a5d2e644c',\n            'html_url': 'https://github.com/appium/appium/commit/3c2752f9f9c56000705a4ae15b3ba68a5d2e644c',\n            'comments_url': 'https://api.github.com/repos/appium/appium/commits/3c2752f9f9c56000705a4ae15b3ba68a5d2e644c/comments'\n          }\n        });\n        await verifyBuildInfoUpdate(false);\n      });","file":"config-specs.js","skipped":false,"dir":"test"},{"name":"should log the config to console","suites":["Config","Appium config","showConfig"],"updatePoint":{"line":112,"column":42,"index":4851},"line":112,"code":"      it('should log the config to console', async function () {\n        const config = getBuildInfo();\n        await showConfig();\n        console.log.calledOnce.should.be.true; // eslint-disable-line no-console\n\n        console.log.getCall(0).args[0].should.contain(JSON.stringify(config)); // eslint-disable-line no-console\n      });","file":"config-specs.js","skipped":false,"dir":"test"},{"name":"should fail if node is ","suites":["Config","node.js config","checkNodeOk","unsupported nodes"],"updatePoint":{"line":143,"column":47,"index":6067},"line":143,"code":"          it(`should fail if node is ${version}`, function () {\n            process.version = version;\n            checkNodeOk.should.throw();\n          });","file":"config-specs.js","skipped":false,"dir":"test"},{"name":"should succeed if node is 12+","suites":["Config","node.js config","checkNodeOk","supported nodes"],"updatePoint":{"line":150,"column":41,"index":6286},"line":150,"code":"        it('should succeed if node is 12+', function () {\n          process.version = '12.20.1';\n          checkNodeOk.should.not.throw();\n        });","file":"config-specs.js","skipped":false,"dir":"test"},{"name":"should succeed if node is 13+","suites":["Config","node.js config","checkNodeOk","supported nodes"],"updatePoint":{"line":154,"column":41,"index":6437},"line":154,"code":"        it('should succeed if node is 13+', function () {\n          process.version = '13.14.0';\n          checkNodeOk.should.not.throw();\n        });","file":"config-specs.js","skipped":false,"dir":"test"},{"name":"should succeed if node is 14+","suites":["Config","node.js config","checkNodeOk","supported nodes"],"updatePoint":{"line":158,"column":41,"index":6588},"line":158,"code":"        it('should succeed if node is 14+', function () {\n          process.version = '14.15.4';\n          checkNodeOk.should.not.throw();\n        });","file":"config-specs.js","skipped":false,"dir":"test"},{"name":"should succeed if node is 15+","suites":["Config","node.js config","checkNodeOk","supported nodes"],"updatePoint":{"line":162,"column":41,"index":6739},"line":162,"code":"        it('should succeed if node is 15+', function () {\n          process.version = '15.5.1';\n          checkNodeOk.should.not.throw();\n        });","file":"config-specs.js","skipped":false,"dir":"test"},{"name":"should not log a warning if node is 8+","suites":["Config","node.js config","warnNodeDeprecations"],"updatePoint":{"line":176,"column":48,"index":7127},"line":176,"code":"      it('should not log a warning if node is 8+', function () {\n        process.version = 'v8.0.0';\n        warnNodeDeprecations();\n        logger.warn.callCount.should.equal(0);\n      });","file":"config-specs.js","skipped":false,"dir":"test"},{"name":"should not log a warning if node is 9+","suites":["Config","node.js config","warnNodeDeprecations"],"updatePoint":{"line":181,"column":48,"index":7317},"line":181,"code":"      it('should not log a warning if node is 9+', function () {\n        process.version = 'v9.0.0';\n        warnNodeDeprecations();\n        logger.warn.callCount.should.equal(0);\n      });","file":"config-specs.js","skipped":false,"dir":"test"},{"name":"should show none if we have all the defaults","suites":["Config","server arguments","getNonDefaultArgs"],"updatePoint":{"line":200,"column":54,"index":7923},"line":200,"code":"      it('should show none if we have all the defaults', function () {\n        let nonDefaultArgs = getNonDefaultArgs(parser, args);\n\n        _.keys(nonDefaultArgs).length.should.equal(0);\n      });","file":"config-specs.js","skipped":false,"dir":"test"},{"name":"should catch a non-default argument","suites":["Config","server arguments","getNonDefaultArgs"],"updatePoint":{"line":205,"column":45,"index":8113},"line":205,"code":"      it('should catch a non-default argument', function () {\n        args.isolateSimDevice = true;\n        let nonDefaultArgs = getNonDefaultArgs(parser, args);\n\n        _.keys(nonDefaultArgs).length.should.equal(1);\n\n        should.exist(nonDefaultArgs.isolateSimDevice);\n      });","file":"config-specs.js","skipped":false,"dir":"test"},{"name":"should show none if we have no deprecated arguments","suites":["Config","server arguments","getDeprecatedArgs"],"updatePoint":{"line":215,"column":61,"index":8469},"line":215,"code":"      it('should show none if we have no deprecated arguments', function () {\n        let deprecatedArgs = getDeprecatedArgs(parser, args);\n\n        _.keys(deprecatedArgs).length.should.equal(0);\n      });","file":"config-specs.js","skipped":false,"dir":"test"},{"name":"should catch a deprecated argument","suites":["Config","server arguments","getDeprecatedArgs"],"updatePoint":{"line":220,"column":44,"index":8658},"line":220,"code":"      it('should catch a deprecated argument', function () {\n        args.showIOSLog = true;\n        let deprecatedArgs = getDeprecatedArgs(parser, args);\n\n        _.keys(deprecatedArgs).length.should.equal(1);\n\n        should.exist(deprecatedArgs['--show-ios-log']);\n      });","file":"config-specs.js","skipped":false,"dir":"test"},{"name":"should catch a non-boolean deprecated argument","suites":["Config","server arguments","getDeprecatedArgs"],"updatePoint":{"line":228,"column":56,"index":8948},"line":228,"code":"      it('should catch a non-boolean deprecated argument', function () {\n        args.calendarFormat = 'orwellian';\n        let deprecatedArgs = getDeprecatedArgs(parser, args);\n\n        _.keys(deprecatedArgs).length.should.equal(1);\n\n        should.exist(deprecatedArgs['--calendar-format']);\n      });","file":"config-specs.js","skipped":false,"dir":"test"},{"name":"should be false for port too high","suites":["Config","checkValidPort"],"updatePoint":{"line":239,"column":41,"index":9294},"line":239,"code":"    it('should be false for port too high', function () {\n      checkValidPort(65536).should.be.false;\n    });","file":"config-specs.js","skipped":false,"dir":"test"},{"name":"should be false for port too low","suites":["Config","checkValidPort"],"updatePoint":{"line":242,"column":40,"index":9404},"line":242,"code":"    it('should be false for port too low', function () {\n      checkValidPort(0).should.be.false;\n    });","file":"config-specs.js","skipped":false,"dir":"test"},{"name":"should be true for port 1","suites":["Config","checkValidPort"],"updatePoint":{"line":245,"column":33,"index":9503},"line":245,"code":"    it('should be true for port 1', function () {\n      checkValidPort(1).should.be.true;\n    });","file":"config-specs.js","skipped":false,"dir":"test"},{"name":"should be true for port 65535","suites":["Config","checkValidPort"],"updatePoint":{"line":248,"column":37,"index":9605},"line":248,"code":"    it('should be true for port 65535', function () {\n      checkValidPort(65535).should.be.true;\n    });","file":"config-specs.js","skipped":false,"dir":"test"},{"name":"should fail to use a tmp dir with incorrect permissions","suites":["Config","validateTmpDir"],"updatePoint":{"line":253,"column":63,"index":9786},"line":253,"code":"    it('should fail to use a tmp dir with incorrect permissions', function () {\n      validateTmpDir('/private/if_you_run_with_sudo_this_wont_fail').should.be.rejectedWith(/could not ensure/);\n    });","file":"config-specs.js","skipped":false,"dir":"test"},{"name":"should fail to use an undefined tmp dir","suites":["Config","validateTmpDir"],"updatePoint":{"line":256,"column":47,"index":9971},"line":256,"code":"    it('should fail to use an undefined tmp dir', function () {\n      validateTmpDir().should.be.rejectedWith(/could not ensure/);\n    });","file":"config-specs.js","skipped":false,"dir":"test"},{"name":"should be able to use a tmp dir with correct permissions","suites":["Config","validateTmpDir"],"updatePoint":{"line":259,"column":64,"index":10127},"line":259,"code":"    it('should be able to use a tmp dir with correct permissions', function () {\n      validateTmpDir('/tmp/test_tmp_dir/with/any/number/of/levels').should.not.be.rejected;\n    });","file":"config-specs.js","skipped":false,"dir":"test"},{"name":"should not fail if process.argv[1] is undefined","suites":["Config","parsing args with empty argv[1]"],"updatePoint":{"line":271,"column":55,"index":10507},"line":271,"code":"    it('should not fail if process.argv[1] is undefined', function () {\n      process.argv[1] = undefined;\n      let args = getParser();\n      args.prog.should.be.equal('Appium');\n    });","file":"config-specs.js","skipped":false,"dir":"test"},{"name":"should set \"prog\" to process.argv[1]","suites":["Config","parsing args with empty argv[1]"],"updatePoint":{"line":276,"column":44,"index":10684},"line":276,"code":"    it('should set \"prog\" to process.argv[1]', function () {\n      process.argv[1] = 'Hello World';\n      let args = getParser();\n      args.prog.should.be.equal('Hello World');\n    });","file":"config-specs.js","skipped":false,"dir":"test"},{"name":"should not allow both","suites":["Config","validateServerArgs","mutually exclusive server arguments","noReset and fullReset"],"updatePoint":{"line":298,"column":33,"index":11395},"line":298,"code":"        it('should not allow both', function () {\n          (() => {\n            args.noReset = args.fullReset = true;\n            validateServerArgs(parser, args);\n          }).should.throw();\n        });","file":"config-specs.js","skipped":false,"dir":"test"},{"name":"should allow noReset","suites":["Config","validateServerArgs","mutually exclusive server arguments","noReset and fullReset"],"updatePoint":{"line":304,"column":32,"index":11600},"line":304,"code":"        it('should allow noReset', function () {\n          (() => {\n            args.noReset = true;\n            validateServerArgs(parser, args);\n          }).should.not.throw();\n        });","file":"config-specs.js","skipped":false,"dir":"test"},{"name":"should allow fullReset","suites":["Config","validateServerArgs","mutually exclusive server arguments","noReset and fullReset"],"updatePoint":{"line":310,"column":34,"index":11794},"line":310,"code":"        it('should allow fullReset', function () {\n          (() => {\n            args.fullReset = true;\n            validateServerArgs(parser, args);\n          }).should.not.throw();\n        });","file":"config-specs.js","skipped":false,"dir":"test"},{"name":"should not allow both","suites":["Config","validateServerArgs","mutually exclusive server arguments","ipa and safari"],"updatePoint":{"line":318,"column":33,"index":12046},"line":318,"code":"        it('should not allow both', function () {\n          (() => {\n            args.ipa = args.safari = true;\n            validateServerArgs(parser, args);\n          }).should.throw();\n        });","file":"config-specs.js","skipped":false,"dir":"test"},{"name":"should allow ipa","suites":["Config","validateServerArgs","mutually exclusive server arguments","ipa and safari"],"updatePoint":{"line":324,"column":28,"index":12240},"line":324,"code":"        it('should allow ipa', function () {\n          (() => {\n            args.ipa = true;\n            validateServerArgs(parser, args);\n          }).should.not.throw();\n        });","file":"config-specs.js","skipped":false,"dir":"test"},{"name":"should allow safari","suites":["Config","validateServerArgs","mutually exclusive server arguments","ipa and safari"],"updatePoint":{"line":330,"column":31,"index":12427},"line":330,"code":"        it('should allow safari', function () {\n          (() => {\n            args.safari = true;\n            validateServerArgs(parser, args);\n          }).should.not.throw();\n        });","file":"config-specs.js","skipped":false,"dir":"test"},{"name":"should not allow both","suites":["Config","validateServerArgs","mutually exclusive server arguments","app and safari"],"updatePoint":{"line":338,"column":33,"index":12676},"line":338,"code":"        it('should not allow both', function () {\n          (() => {\n            args.app = args.safari = true;\n            validateServerArgs(parser, args);\n          }).should.throw();\n        });","file":"config-specs.js","skipped":false,"dir":"test"},{"name":"should allow app","suites":["Config","validateServerArgs","mutually exclusive server arguments","app and safari"],"updatePoint":{"line":344,"column":28,"index":12870},"line":344,"code":"        it('should allow app', function () {\n          (() => {\n            args.app = true;\n            validateServerArgs(parser, args);\n          }).should.not.throw();\n        });","file":"config-specs.js","skipped":false,"dir":"test"},{"name":"should not allow both","suites":["Config","validateServerArgs","mutually exclusive server arguments","forceIphone and forceIpad"],"updatePoint":{"line":352,"column":33,"index":13127},"line":352,"code":"        it('should not allow both', function () {\n          (() => {\n            args.forceIphone = args.forceIpad = true;\n            validateServerArgs(parser, args);\n          }).should.throw();\n        });","file":"config-specs.js","skipped":false,"dir":"test"},{"name":"should allow forceIphone","suites":["Config","validateServerArgs","mutually exclusive server arguments","forceIphone and forceIpad"],"updatePoint":{"line":358,"column":36,"index":13340},"line":358,"code":"        it('should allow forceIphone', function () {\n          (() => {\n            args.forceIphone = true;\n            validateServerArgs(parser, args);\n          }).should.not.throw();\n        });","file":"config-specs.js","skipped":false,"dir":"test"},{"name":"should allow forceIpad","suites":["Config","validateServerArgs","mutually exclusive server arguments","forceIphone and forceIpad"],"updatePoint":{"line":364,"column":34,"index":13538},"line":364,"code":"        it('should allow forceIpad', function () {\n          (() => {\n            args.forceIpad = true;\n            validateServerArgs(parser, args);\n          }).should.not.throw();\n        });","file":"config-specs.js","skipped":false,"dir":"test"},{"name":"should not allow both","suites":["Config","validateServerArgs","mutually exclusive server arguments","deviceName and defaultDevice"],"updatePoint":{"line":372,"column":33,"index":13804},"line":372,"code":"        it('should not allow both', function () {\n          (() => {\n            args.deviceName = args.defaultDevice = true;\n            validateServerArgs(parser, args);\n          }).should.throw();\n        });","file":"config-specs.js","skipped":false,"dir":"test"},{"name":"should allow deviceName","suites":["Config","validateServerArgs","mutually exclusive server arguments","deviceName and defaultDevice"],"updatePoint":{"line":378,"column":35,"index":14019},"line":378,"code":"        it('should allow deviceName', function () {\n          (() => {\n            args.deviceName = true;\n            validateServerArgs(parser, args);\n          }).should.not.throw();\n        });","file":"config-specs.js","skipped":false,"dir":"test"},{"name":"should allow defaultDevice","suites":["Config","validateServerArgs","mutually exclusive server arguments","deviceName and defaultDevice"],"updatePoint":{"line":384,"column":38,"index":14220},"line":384,"code":"        it('should allow defaultDevice', function () {\n          (() => {\n            args.defaultDevice = true;\n            validateServerArgs(parser, args);\n          }).should.not.throw();\n        });","file":"config-specs.js","skipped":false,"dir":"test"},{"name":"should fail with value less than 0","suites":["Config","validateServerArgs","validated arguments","backendRetries"],"updatePoint":{"line":396,"column":46,"index":14640},"line":396,"code":"        it('should fail with value less than 0', function () {\n          args.backendRetries = -1;\n          (() => {\n            validateServerArgs(parser, args);\n          }).should.throw();\n        });","file":"config-specs.js","skipped":false,"dir":"test"},{"name":"should succeed with value of 0","suites":["Config","validateServerArgs","validated arguments","backendRetries"],"updatePoint":{"line":402,"column":42,"index":14841},"line":402,"code":"        it('should succeed with value of 0', function () {\n          args.backendRetries = 0;\n          (() => {\n            validateServerArgs(parser, args);\n          }).should.not.throw();\n        });","file":"config-specs.js","skipped":false,"dir":"test"},{"name":"should succeed with value above 0","suites":["Config","validateServerArgs","validated arguments","backendRetries"],"updatePoint":{"line":408,"column":45,"index":15048},"line":408,"code":"        it('should succeed with value above 0', function () {\n          args.backendRetries = 100;\n          (() => {\n            validateServerArgs(parser, args);\n          }).should.not.throw();\n        });","file":"config-specs.js","skipped":false,"dir":"test"},{"name":"should start and stop a session","suites":["FakeDriver - via HTTP","session handling"],"updatePoint":{"line":39,"column":39,"index":1135},"line":39,"code":"    it('should start and stop a session', async function () {\n      let driver = wd.promiseChainRemote(TEST_HOST, TEST_PORT);\n      let [sessionId] = await driver.init(caps);\n      should.exist(sessionId);\n      sessionId.should.be.a('string');\n      await driver.quit();\n      await driver.title().should.eventually.be.rejectedWith(/terminated/);\n    });","file":"driver-e2e-specs.js","skipped":false,"dir":"test"},{"name":"should be able to run two FakeDriver sessions simultaneously","suites":["FakeDriver - via HTTP","session handling"],"updatePoint":{"line":47,"column":68,"index":1520},"line":47,"code":"    it('should be able to run two FakeDriver sessions simultaneously', async function () {\n      let driver1 = wd.promiseChainRemote(TEST_HOST, TEST_PORT);\n      let [sessionId1] = await driver1.init(caps);\n      should.exist(sessionId1);\n      sessionId1.should.be.a('string');\n      let driver2 = wd.promiseChainRemote(TEST_HOST, TEST_PORT);\n      let [sessionId2] = await driver2.init(caps);\n      should.exist(sessionId2);\n      sessionId2.should.be.a('string');\n      sessionId1.should.not.equal(sessionId2);\n      await driver1.quit();\n      await driver2.quit();\n    });","file":"driver-e2e-specs.js","skipped":false,"dir":"test"},{"name":"should not be able to run two FakeDriver sessions simultaneously when one is unique","suites":["FakeDriver - via HTTP","session handling"],"updatePoint":{"line":60,"column":91,"index":2121},"line":60,"code":"    it('should not be able to run two FakeDriver sessions simultaneously when one is unique', async function () {\n      let uniqueCaps = _.clone(caps);\n\n      uniqueCaps.uniqueApp = true;\n      let driver1 = wd.promiseChainRemote(TEST_HOST, TEST_PORT);\n      let [sessionId1] = await driver1.init(uniqueCaps);\n      should.exist(sessionId1);\n      sessionId1.should.be.a('string');\n      let driver2 = wd.promiseChainRemote(TEST_HOST, TEST_PORT);\n      await driver2.init(caps).should.eventually.be.rejected;\n      await driver1.quit();\n    });","file":"driver-e2e-specs.js","skipped":false,"dir":"test"},{"name":"should use the newCommandTimeout of the inner Driver on session creation","suites":["FakeDriver - via HTTP","session handling"],"updatePoint":{"line":72,"column":80,"index":2655},"line":72,"code":"    it('should use the newCommandTimeout of the inner Driver on session creation', async function () {\n      let driver = wd.promiseChainRemote(TEST_HOST, TEST_PORT);\n      let localCaps = Object.assign({\n        newCommandTimeout: 0.25\n      }, caps);\n      let [sessionId] = await driver.init(localCaps);\n      should.exist(sessionId);\n      await B.delay(250);\n      await driver.source().should.eventually.be.rejectedWith(/terminated/);\n    });","file":"driver-e2e-specs.js","skipped":false,"dir":"test"},{"name":"should accept valid W3C capabilities and start a W3C session","suites":["FakeDriver - via HTTP","session handling"],"updatePoint":{"line":82,"column":68,"index":3092},"line":82,"code":"    it('should accept valid W3C capabilities and start a W3C session', async function () {\n      // Try with valid capabilities and check that it returns a session ID\n      const w3cCaps = {\n        capabilities: {\n          alwaysMatch: {\n            platformName: 'Fake'\n          },\n          firstMatch: [{\n            'appium:deviceName': 'Fake',\n            'appium:app': TEST_FAKE_APP\n          }]\n        }\n      }; // Create the session\n\n      const {\n        status,\n        value,\n        sessionId\n      } = (await axios.post(baseUrl, w3cCaps)).data;\n      should.not.exist(status); // Test that it's a W3C session by checking that 'status' is not in the response\n\n      should.not.exist(sessionId);\n      value.sessionId.should.be.a.string;\n      value.should.exist;\n      value.capabilities.should.deep.equal({\n        platformName: 'Fake',\n        deviceName: 'Fake',\n        app: TEST_FAKE_APP\n      }); // Now use that sessionId to call /screenshot\n\n      const {\n        status: screenshotStatus,\n        value: screenshotValue\n      } = (await axios({\n        url: `${baseUrl}/${value.sessionId}/screenshot`\n      })).data;\n      should.not.exist(screenshotStatus);\n      screenshotValue.should.equal('hahahanotreallyascreenshot'); // Now use that sessionID to call an arbitrary W3C-only endpoint that isn't implemented to see if it responds with correct error\n\n      await axios.post(`${baseUrl}/${value.sessionId}/execute/async`, {\n        script: '',\n        args: ['a']\n      }).should.eventually.be.rejectedWith(/405/); // End session\n\n      await axios.delete(`${baseUrl}/${value.sessionId}`);\n    });","file":"driver-e2e-specs.js","skipped":false,"dir":"test"},{"name":"should reject invalid W3C capabilities and respond with a 400 Bad Parameters error","suites":["FakeDriver - via HTTP","session handling"],"updatePoint":{"line":128,"column":90,"index":4741},"line":128,"code":"    it('should reject invalid W3C capabilities and respond with a 400 Bad Parameters error', async function () {\n      const badW3Ccaps = {\n        capabilities: {\n          alwaysMatch: {},\n          firstMatch: [{\n            'appium:deviceName': 'Fake',\n            'appium:app': TEST_FAKE_APP\n          }]\n        }\n      };\n      await axios.post(baseUrl, badW3Ccaps).should.eventually.be.rejectedWith(/400/);\n    });","file":"driver-e2e-specs.js","skipped":false,"dir":"test"},{"name":"should accept a combo of W3C and JSONWP capabilities but default to W3C","suites":["FakeDriver - via HTTP","session handling"],"updatePoint":{"line":140,"column":79,"index":5153},"line":140,"code":"    it('should accept a combo of W3C and JSONWP capabilities but default to W3C', async function () {\n      const combinedCaps = {\n        'desiredCapabilities': { ...caps\n        },\n        'capabilities': {\n          'alwaysMatch': { ...caps\n          },\n          'firstMatch': [{\n            w3cParam: 'w3cParam'\n          }]\n        }\n      };\n      const {\n        status,\n        value,\n        sessionId\n      } = (await axios.post(baseUrl, combinedCaps)).data;\n      should.not.exist(status); // If it's a W3C session, should not respond with 'status'\n\n      should.not.exist(sessionId);\n      value.sessionId.should.exist;\n      value.capabilities.should.deep.equal({ ...caps,\n        w3cParam: 'w3cParam'\n      }); // End session\n\n      await axios.delete(`${baseUrl}/${value.sessionId}`);\n    });","file":"driver-e2e-specs.js","skipped":false,"dir":"test"},{"name":"should accept a combo of W3C and JSONWP and if JSONWP has extraneous keys, they should be merged into W3C capabilities","suites":["FakeDriver - via HTTP","session handling"],"updatePoint":{"line":167,"column":126,"index":6009},"line":167,"code":"    it('should accept a combo of W3C and JSONWP and if JSONWP has extraneous keys, they should be merged into W3C capabilities', async function () {\n      const combinedCaps = {\n        'desiredCapabilities': { ...caps,\n          automationName: 'Fake',\n          anotherParam: 'Hello'\n        },\n        'capabilities': {\n          'alwaysMatch': { ...caps\n          },\n          'firstMatch': [{\n            w3cParam: 'w3cParam'\n          }]\n        }\n      };\n      const {\n        sessionId,\n        status,\n        value\n      } = (await axios.post(baseUrl, combinedCaps)).data;\n      should.not.exist(sessionId);\n      should.not.exist(status);\n      value.sessionId.should.exist;\n      value.capabilities.should.deep.equal({ ...caps,\n        automationName: 'Fake',\n        anotherParam: 'Hello',\n        w3cParam: 'w3cParam'\n      }); // End session\n\n      await axios.delete(`${baseUrl}/${value.sessionId}`);\n    });","file":"driver-e2e-specs.js","skipped":false,"dir":"test"},{"name":"should reject bad W3C capabilities with a BadParametersError (400)","suites":["FakeDriver - via HTTP","session handling"],"updatePoint":{"line":197,"column":74,"index":6883},"line":197,"code":"    it('should reject bad W3C capabilities with a BadParametersError (400)', async function () {\n      const w3cCaps = {\n        capabilities: {\n          alwaysMatch: { ...caps,\n            automationName: 'BadAutomationName'\n          }\n        }\n      };\n      await axios.post(baseUrl, w3cCaps).should.eventually.be.rejectedWith(/400/);\n    });","file":"driver-e2e-specs.js","skipped":false,"dir":"test"},{"name":"should accept capabilities that are provided in the firstMatch array","suites":["FakeDriver - via HTTP","session handling"],"updatePoint":{"line":207,"column":76,"index":7234},"line":207,"code":"    it('should accept capabilities that are provided in the firstMatch array', async function () {\n      const w3cCaps = {\n        capabilities: {\n          alwaysMatch: {},\n          firstMatch: [{}, { ...caps\n          }]\n        }\n      };\n      const {\n        value,\n        sessionId,\n        status\n      } = (await axios.post(baseUrl, w3cCaps)).data;\n      should.not.exist(status);\n      should.not.exist(sessionId);\n      value.capabilities.should.deep.equal(caps); // End session\n\n      await axios.delete(`${baseUrl}/${value.sessionId}`);\n    });","file":"driver-e2e-specs.js","skipped":false,"dir":"test"},{"name":"should fall back to MJSONWP if w3c caps are invalid","suites":["FakeDriver - via HTTP","session handling"],"updatePoint":{"line":226,"column":59,"index":7776},"line":226,"code":"    it('should fall back to MJSONWP if w3c caps are invalid', async function () {\n      const combinedCaps = {\n        desiredCapabilities: { ...caps\n        },\n        capabilities: {\n          alwaysMatch: {},\n          firstMatch: [{}, { ...caps,\n            platformName: null\n          }]\n        }\n      };\n      const {\n        value,\n        sessionId,\n        status\n      } = (await axios.post(baseUrl, combinedCaps)).data;\n      status.should.exist;\n      sessionId.should.exist;\n      value.should.deep.equal(caps); // End session\n\n      await axios.delete(`${baseUrl}/${sessionId}`);\n    });","file":"driver-e2e-specs.js","skipped":false,"dir":"test"},{"name":"should fall back to MJSONWP if Inner Driver is not ready for W3C","suites":["FakeDriver - via HTTP","session handling"],"updatePoint":{"line":248,"column":72,"index":8394},"line":248,"code":"    it('should fall back to MJSONWP if Inner Driver is not ready for W3C', async function () {\n      const combinedCaps = {\n        desiredCapabilities: { ...caps\n        },\n        capabilities: {\n          alwaysMatch: { ...caps,\n            deviceName: null\n          }\n        }\n      };\n      const createSessionStub = sinon.stub(FakeDriver.prototype, 'createSession').callsFake(async function (jsonwpCaps) {\n        const res = await BaseDriver.prototype.createSession.call(this, jsonwpCaps);\n        this.protocol.should.equal('MJSONWP');\n        return res;\n      });\n      const {\n        value,\n        sessionId,\n        status\n      } = (await axios.post(baseUrl, combinedCaps)).data;\n      status.should.exist;\n      sessionId.should.exist;\n      value.should.deep.equal(caps);\n      createSessionStub.restore(); // End session\n\n      await axios.delete(`${baseUrl}/${sessionId}`);\n    });","file":"driver-e2e-specs.js","skipped":false,"dir":"test"},{"name":"should handle concurrent MJSONWP and W3C sessions","suites":["FakeDriver - via HTTP","session handling"],"updatePoint":{"line":275,"column":57,"index":9282},"line":275,"code":"    it('should handle concurrent MJSONWP and W3C sessions', async function () {\n      const combinedCaps = {\n        desiredCapabilities: { ...caps\n        },\n        capabilities: {\n          alwaysMatch: { ...caps\n          },\n          firstMatch: []\n        }\n      }; // Have an MJSONWP and W3C session running concurrently\n\n      const {\n        sessionId: mjsonwpSessId,\n        value: mjsonwpValue,\n        status\n      } = (await axios.post(baseUrl, _.omit(combinedCaps, 'capabilities'))).data;\n      status.should.exist;\n      mjsonwpValue.should.eql(caps);\n      mjsonwpSessId.should.exist;\n      const {\n        value\n      } = (await axios.post(baseUrl, _.omit(combinedCaps, 'desiredCapabilities'))).data;\n      const w3cSessId = value.sessionId;\n      w3cSessId.should.exist;\n      value.capabilities.should.eql(caps); // Test that both return the proper payload based on their protocol\n\n      const mjsonwpPayload = (await axios.get(`${baseUrl}/${mjsonwpSessId}`)).data;\n      mjsonwpPayload.sessionId.should.exist;\n      mjsonwpPayload.status.should.exist;\n      mjsonwpPayload.value.should.eql(caps);\n      const w3cPayload = (await axios.get(`${baseUrl}/${w3cSessId}`)).data;\n      should.not.exist(w3cPayload.sessionId);\n      should.not.exist(w3cPayload.status);\n      w3cPayload.value.should.eql(caps); // End sessions\n\n      await axios.delete(`${baseUrl}/${mjsonwpSessId}`);\n      await axios.delete(`${baseUrl}/${w3cSessId}`);\n    });","file":"driver-e2e-specs.js","skipped":false,"dir":"test"},{"name":"should send logs to a logHandler passed in by a parent package","suites":["Logsink"],"updatePoint":{"line":334,"column":68,"index":11132},"line":334,"code":"  it('should send logs to a logHandler passed in by a parent package', function () {\n    logs.length.should.be.above(1);\n    let welcomeIndex = logs[0][1].includes('versions of node') ? 1 : 0;\n    logs[welcomeIndex].length.should.equal(2);\n    logs[welcomeIndex][1].should.include('Welcome to Appium');\n  });","file":"driver-e2e-specs.js","skipped":false,"dir":"test"},{"name":"should call inner driver's createSession with desired capabilities","suites":["AppiumDriver","AppiumDriver","createSession"],"updatePoint":{"line":48,"column":76,"index":1539},"line":48,"code":"      it(`should call inner driver's createSession with desired capabilities`, async function () {\n        mockFakeDriver.expects('createSession').once().withExactArgs(BASE_CAPS, undefined, null, []).returns([SESSION_ID, BASE_CAPS]);\n        await appium.createSession(BASE_CAPS);\n        mockFakeDriver.verify();\n      });","file":"driver-specs.js","skipped":false,"dir":"test"},{"name":"should call inner driver's createSession with desired and default capabilities","suites":["AppiumDriver","AppiumDriver","createSession"],"updatePoint":{"line":53,"column":88,"index":1875},"line":53,"code":"      it(`should call inner driver's createSession with desired and default capabilities`, async function () {\n        let defaultCaps = {\n          deviceName: 'Emulator'\n        };\n\n        let allCaps = _.extend(_.clone(defaultCaps), BASE_CAPS);\n\n        appium.args.defaultCapabilities = defaultCaps;\n        mockFakeDriver.expects('createSession').once().withArgs(allCaps).returns([SESSION_ID, allCaps]);\n        await appium.createSession(BASE_CAPS);\n        mockFakeDriver.verify();\n      });","file":"driver-specs.js","skipped":false,"dir":"test"},{"name":"should call inner driver's createSession with desired and default capabilities without overriding caps","suites":["AppiumDriver","AppiumDriver","createSession"],"updatePoint":{"line":65,"column":112,"index":2399},"line":65,"code":"      it(`should call inner driver's createSession with desired and default capabilities without overriding caps`, async function () {\n        // a default capability with the same key as a desired capability\n        // should do nothing\n        let defaultCaps = {\n          platformName: 'Ersatz'\n        };\n        appium.args.defaultCapabilities = defaultCaps;\n        mockFakeDriver.expects('createSession').once().withArgs(BASE_CAPS).returns([SESSION_ID, BASE_CAPS]);\n        await appium.createSession(BASE_CAPS);\n        mockFakeDriver.verify();\n      });","file":"driver-specs.js","skipped":false,"dir":"test"},{"name":"should kill all other sessions if sessionOverride is on","suites":["AppiumDriver","AppiumDriver","createSession"],"updatePoint":{"line":76,"column":65,"index":2916},"line":76,"code":"      it('should kill all other sessions if sessionOverride is on', async function () {\n        appium.args.sessionOverride = true; // mock three sessions that should be removed when the new one is created\n\n        let fakeDrivers = [new FakeDriver(), new FakeDriver(), new FakeDriver()];\n\n        let mockFakeDrivers = _.map(fakeDrivers, fd => sinon.mock(fd));\n\n        mockFakeDrivers[0].expects('deleteSession').once();\n        mockFakeDrivers[1].expects('deleteSession').once().throws('Cannot shut down Android driver; it has already shut down');\n        mockFakeDrivers[2].expects('deleteSession').once();\n        appium.sessions['abc-123-xyz'] = fakeDrivers[0];\n        appium.sessions['xyz-321-abc'] = fakeDrivers[1];\n        appium.sessions['123-abc-xyz'] = fakeDrivers[2];\n        let sessions = await appium.getSessions();\n        sessions.should.have.length(3);\n        mockFakeDriver.expects('createSession').once().withExactArgs(BASE_CAPS, undefined, null, []).returns([SESSION_ID, BASE_CAPS]);\n        await appium.createSession(BASE_CAPS);\n        sessions = await appium.getSessions();\n        sessions.should.have.length(1);\n\n        for (let mfd of mockFakeDrivers) {\n          mfd.verify();\n        }\n\n        mockFakeDriver.verify();\n      });","file":"driver-specs.js","skipped":false,"dir":"test"},{"name":"should call \"createSession\" with W3C capabilities argument, if provided","suites":["AppiumDriver","AppiumDriver","createSession"],"updatePoint":{"line":102,"column":81,"index":4196},"line":102,"code":"      it('should call \"createSession\" with W3C capabilities argument, if provided', async function () {\n        mockFakeDriver.expects('createSession').once().withArgs(null, undefined, W3C_CAPS).returns([SESSION_ID, BASE_CAPS]);\n        await appium.createSession(undefined, undefined, W3C_CAPS);\n        mockFakeDriver.verify();\n      });","file":"driver-specs.js","skipped":false,"dir":"test"},{"name":"should call \"createSession\" with W3C capabilities argument with additional provided parameters","suites":["AppiumDriver","AppiumDriver","createSession"],"updatePoint":{"line":107,"column":104,"index":4559},"line":107,"code":"      it('should call \"createSession\" with W3C capabilities argument with additional provided parameters', async function () {\n        let w3cCaps = { ...W3C_CAPS,\n          alwaysMatch: { ...W3C_CAPS.alwaysMatch,\n            'appium:someOtherParm': 'someOtherParm'\n          }\n        };\n        mockFakeDriver.expects('createSession').once().withArgs(null, undefined, {\n          alwaysMatch: { ...w3cCaps.alwaysMatch,\n            'appium:someOtherParm': 'someOtherParm'\n          },\n          firstMatch: [{}]\n        }).returns([SESSION_ID, insertAppiumPrefixes(BASE_CAPS)]);\n        await appium.createSession(undefined, undefined, w3cCaps);\n        mockFakeDriver.verify();\n      });","file":"driver-specs.js","skipped":false,"dir":"test"},{"name":"should call \"createSession\" with JSONWP capabilities if W3C has incomplete capabilities","suites":["AppiumDriver","AppiumDriver","createSession"],"updatePoint":{"line":122,"column":97,"index":5242},"line":122,"code":"      it('should call \"createSession\" with JSONWP capabilities if W3C has incomplete capabilities', async function () {\n        let w3cCaps = { ...W3C_CAPS,\n          alwaysMatch: { ...W3C_CAPS.alwaysMatch,\n            'appium:someOtherParm': 'someOtherParm'\n          }\n        };\n        let jsonwpCaps = { ...BASE_CAPS,\n          automationName: 'Fake',\n          someOtherParam: 'someOtherParam'\n        };\n        let expectedW3cCaps = { ...w3cCaps,\n          alwaysMatch: { ...w3cCaps.alwaysMatch,\n            'appium:automationName': 'Fake',\n            'appium:someOtherParam': 'someOtherParam'\n          }\n        };\n        mockFakeDriver.expects('createSession').once().withArgs(jsonwpCaps, undefined, expectedW3cCaps).returns([SESSION_ID, jsonwpCaps]);\n        await appium.createSession(jsonwpCaps, undefined, w3cCaps);\n        mockFakeDriver.verify();\n      });","file":"driver-specs.js","skipped":false,"dir":"test"},{"name":"should remove the session if it is found","suites":["AppiumDriver","AppiumDriver","deleteSession"],"updatePoint":{"line":152,"column":50,"index":6343},"line":152,"code":"      it('should remove the session if it is found', async function () {\n        let [sessionId] = (await appium.createSession(BASE_CAPS)).value;\n        let sessions = await appium.getSessions();\n        sessions.should.have.length(1);\n        await appium.deleteSession(sessionId);\n        sessions = await appium.getSessions();\n        sessions.should.have.length(0);\n      });","file":"driver-specs.js","skipped":false,"dir":"test"},{"name":"should call inner driver's deleteSession method","suites":["AppiumDriver","AppiumDriver","deleteSession"],"updatePoint":{"line":160,"column":58,"index":6732},"line":160,"code":"      it('should call inner driver\\'s deleteSession method', async function () {\n        const [sessionId] = (await appium.createSession(BASE_CAPS)).value;\n        mockFakeDriver.expects('deleteSession').once().withExactArgs(sessionId, []).returns();\n        await appium.deleteSession(sessionId);\n        mockFakeDriver.verify(); // cleanup, since we faked the delete session call\n\n        await mockFakeDriver.object.deleteSession();\n      });","file":"driver-specs.js","skipped":false,"dir":"test"},{"name":"should return an empty array of sessions","suites":["AppiumDriver","AppiumDriver","getSessions"],"updatePoint":{"line":180,"column":50,"index":7480},"line":180,"code":"      it('should return an empty array of sessions', async function () {\n        sessions = await appium.getSessions();\n        sessions.should.be.an('array');\n        sessions.should.be.empty;\n      });","file":"driver-specs.js","skipped":false,"dir":"test"},{"name":"should return sessions created","suites":["AppiumDriver","AppiumDriver","getSessions"],"updatePoint":{"line":185,"column":40,"index":7674},"line":185,"code":"      it('should return sessions created', async function () {\n        let session1 = (await appium.createSession(_.extend(_.clone(BASE_CAPS), {\n          cap: 'value'\n        }))).value;\n        let session2 = (await appium.createSession(_.extend(_.clone(BASE_CAPS), {\n          cap: 'other value'\n        }))).value;\n        sessions = await appium.getSessions();\n        sessions.should.be.an('array');\n        sessions.should.have.length(2);\n        sessions[0].id.should.equal(session1[0]);\n        sessions[0].capabilities.should.eql(session1[1]);\n        sessions[1].id.should.equal(session2[0]);\n        sessions[1].capabilities.should.eql(session2[1]);\n      });","file":"driver-specs.js","skipped":false,"dir":"test"},{"name":"should return a status","suites":["AppiumDriver","AppiumDriver","getStatus"],"updatePoint":{"line":206,"column":32,"index":8480},"line":206,"code":"      it('should return a status', async function () {\n        let status = await appium.getStatus();\n        status.build.should.exist;\n        status.build.version.should.exist;\n      });","file":"driver-specs.js","skipped":false,"dir":"test"},{"name":"should remove session if inner driver unexpectedly exits with an error","suites":["AppiumDriver","AppiumDriver","attachUnexpectedShutdownHandler"],"updatePoint":{"line":224,"column":80,"index":9160},"line":224,"code":"      it('should remove session if inner driver unexpectedly exits with an error', async function () {\n        let [sessionId] = (await appium.createSession(_.clone(BASE_CAPS))).value; // eslint-disable-line comma-spacing\n\n        _.keys(appium.sessions).should.contain(sessionId);\n\n        appium.sessions[sessionId].eventEmitter.emit('onUnexpectedShutdown', new Error('Oops')); // let event loop spin so rejection is handled\n\n        await sleep(1);\n\n        _.keys(appium.sessions).should.not.contain(sessionId);\n      });","file":"driver-specs.js","skipped":false,"dir":"test"},{"name":"should remove session if inner driver unexpectedly exits with no error","suites":["AppiumDriver","AppiumDriver","attachUnexpectedShutdownHandler"],"updatePoint":{"line":235,"column":80,"index":9686},"line":235,"code":"      it('should remove session if inner driver unexpectedly exits with no error', async function () {\n        let [sessionId] = (await appium.createSession(_.clone(BASE_CAPS))).value; // eslint-disable-line comma-spacing\n\n        _.keys(appium.sessions).should.contain(sessionId);\n\n        appium.sessions[sessionId].eventEmitter.emit('onUnexpectedShutdown'); // let event loop spin so rejection is handled\n\n        await sleep(1);\n\n        _.keys(appium.sessions).should.not.contain(sessionId);\n      });","file":"driver-specs.js","skipped":false,"dir":"test"},{"name":"should not blow up if user does not provide platformName","suites":["AppiumDriver","AppiumDriver","getDriverAndVersionForCaps"],"updatePoint":{"line":248,"column":66,"index":10244},"line":248,"code":"      it('should not blow up if user does not provide platformName', function () {\n        const appium = new AppiumDriver({});\n        (() => {\n          appium.getDriverAndVersionForCaps({});\n        }).should.throw(/platformName/);\n      });","file":"driver-specs.js","skipped":false,"dir":"test"},{"name":"should ignore automationName Appium","suites":["AppiumDriver","AppiumDriver","getDriverAndVersionForCaps"],"updatePoint":{"line":254,"column":45,"index":10468},"line":254,"code":"      it('should ignore automationName Appium', function () {\n        const appium = new AppiumDriver({});\n        const {\n          driver\n        } = appium.getDriverAndVersionForCaps({\n          platformName: 'Android',\n          automationName: 'Appium'\n        });\n        driver.should.be.an.instanceof(Function);\n        driver.should.equal(AndroidUiautomator2Driver);\n      });","file":"driver-specs.js","skipped":false,"dir":"test"},{"name":"should get XCUITestDriver driver for automationName of XCUITest","suites":["AppiumDriver","AppiumDriver","getDriverAndVersionForCaps"],"updatePoint":{"line":265,"column":73,"index":10882},"line":265,"code":"      it('should get XCUITestDriver driver for automationName of XCUITest', function () {\n        const appium = new AppiumDriver({});\n        const {\n          driver\n        } = appium.getDriverAndVersionForCaps({\n          platformName: 'iOS',\n          automationName: 'XCUITest'\n        });\n        driver.should.be.an.instanceof(Function);\n        driver.should.equal(XCUITestDriver);\n      });","file":"driver-specs.js","skipped":false,"dir":"test"},{"name":"should get iosdriver for ios < 10","suites":["AppiumDriver","AppiumDriver","getDriverAndVersionForCaps"],"updatePoint":{"line":276,"column":43,"index":11253},"line":276,"code":"      it('should get iosdriver for ios < 10', function () {\n        const appium = new AppiumDriver({});\n        const caps = {\n          platformName: 'iOS',\n          platformVersion: '8.0'\n        };\n        let {\n          driver\n        } = appium.getDriverAndVersionForCaps(caps);\n        driver.should.be.an.instanceof(Function);\n        driver.should.equal(IosDriver);\n        caps.platformVersion = '8.1';\n        ({\n          driver\n        } = appium.getDriverAndVersionForCaps(caps));\n        driver.should.equal(IosDriver);\n        caps.platformVersion = '9.4';\n        ({\n          driver\n        } = appium.getDriverAndVersionForCaps(caps));\n        driver.should.equal(IosDriver);\n        caps.platformVersion = '';\n        ({\n          driver\n        } = appium.getDriverAndVersionForCaps(caps));\n        driver.should.equal(IosDriver);\n        caps.platformVersion = 'foo';\n        ({\n          driver\n        } = appium.getDriverAndVersionForCaps(caps));\n        driver.should.equal(IosDriver);\n        delete caps.platformVersion;\n        ({\n          driver\n        } = appium.getDriverAndVersionForCaps(caps));\n        driver.should.equal(IosDriver);\n      });","file":"driver-specs.js","skipped":false,"dir":"test"},{"name":"should get xcuitestdriver for ios >= 10","suites":["AppiumDriver","AppiumDriver","getDriverAndVersionForCaps"],"updatePoint":{"line":313,"column":49,"index":12442},"line":313,"code":"      it('should get xcuitestdriver for ios >= 10', function () {\n        const appium = new AppiumDriver({});\n        const caps = {\n          platformName: 'iOS',\n          platformVersion: '10'\n        };\n        let {\n          driver\n        } = appium.getDriverAndVersionForCaps(caps);\n        driver.should.be.an.instanceof(Function);\n        driver.should.equal(XCUITestDriver);\n        caps.platformVersion = '10.0';\n        ({\n          driver\n        } = appium.getDriverAndVersionForCaps(caps));\n        driver.should.equal(XCUITestDriver);\n        caps.platformVersion = '10.1';\n        ({\n          driver\n        } = appium.getDriverAndVersionForCaps(caps));\n        driver.should.equal(XCUITestDriver);\n        caps.platformVersion = '12.14';\n        ({\n          driver\n        } = appium.getDriverAndVersionForCaps(caps));\n        driver.should.equal(XCUITestDriver);\n      });","file":"driver-specs.js","skipped":false,"dir":"test"},{"name":"should be able to handle different cases in automationName","suites":["AppiumDriver","AppiumDriver","getDriverAndVersionForCaps"],"updatePoint":{"line":340,"column":68,"index":13357},"line":340,"code":"      it('should be able to handle different cases in automationName', function () {\n        const appium = new AppiumDriver({});\n        const caps = {\n          platformName: 'iOS',\n          platformVersion: '10',\n          automationName: 'XcUiTeSt'\n        };\n        let {\n          driver\n        } = appium.getDriverAndVersionForCaps(caps);\n        driver.should.be.an.instanceof(Function);\n        driver.should.equal(XCUITestDriver);\n      });","file":"driver-specs.js","skipped":false,"dir":"test"},{"name":"should be able to handle different case in platformName","suites":["AppiumDriver","AppiumDriver","getDriverAndVersionForCaps"],"updatePoint":{"line":353,"column":65,"index":13808},"line":353,"code":"      it('should be able to handle different case in platformName', function () {\n        const appium = new AppiumDriver({});\n        const caps = {\n          platformName: 'IoS',\n          platformVersion: '10'\n        };\n        let {\n          driver\n        } = appium.getDriverAndVersionForCaps(caps);\n        driver.should.be.an.instanceof(Function);\n        driver.should.equal(XCUITestDriver);\n      });","file":"driver-specs.js","skipped":false,"dir":"test"},{"name":"should send error, info and debug when loglevel is debug","suites":["logging"],"updatePoint":{"line":34,"column":62,"index":987},"line":34,"code":"  it('should send error, info and debug when loglevel is debug', async function () {\n    await logsinkInit({\n      loglevel: 'debug'\n    });\n    doLogging();\n    stderrSpy.callCount.should.equal(1);\n    stderrSpy.args[0][0].should.include(errorMsg);\n    stdoutSpy.callCount.should.equal(2);\n    stdoutSpy.args[0][0].should.include(warnMsg);\n    stdoutSpy.args[1][0].should.include(debugMsg);\n  });","file":"logger-specs.js","skipped":false,"dir":"test"},{"name":"should send error and info when loglevel is info","suites":["logging"],"updatePoint":{"line":45,"column":54,"index":1377},"line":45,"code":"  it('should send error and info when loglevel is info', async function () {\n    await logsinkInit({\n      loglevel: 'info'\n    });\n    doLogging();\n    stderrSpy.callCount.should.equal(1);\n    stderrSpy.args[0][0].should.include(errorMsg);\n    stdoutSpy.callCount.should.equal(1);\n    stdoutSpy.args[0][0].should.include(warnMsg);\n  });","file":"logger-specs.js","skipped":false,"dir":"test"},{"name":"should send error when loglevel is error","suites":["logging"],"updatePoint":{"line":55,"column":46,"index":1707},"line":55,"code":"  it('should send error when loglevel is error', async function () {\n    await logsinkInit({\n      loglevel: 'error'\n    });\n    doLogging();\n    stderrSpy.callCount.should.equal(1);\n    stderrSpy.args[0][0].should.include(errorMsg);\n    stdoutSpy.callCount.should.equal(0);\n  });","file":"logger-specs.js","skipped":false,"dir":"test"},{"name":"should return an arg parser","suites":["Parser"],"updatePoint":{"line":11,"column":33,"index":387},"line":11,"code":"  it('should return an arg parser', function () {\n    should.exist(p.parse_args);\n    p.parse_args([]).should.have.property('port');\n  });","file":"parser-specs.js","skipped":false,"dir":"test"},{"name":"should keep the raw server flags array","suites":["Parser"],"updatePoint":{"line":15,"column":44,"index":537},"line":15,"code":"  it('should keep the raw server flags array', function () {\n    should.exist(p.rawArgs);\n  });","file":"parser-specs.js","skipped":false,"dir":"test"},{"name":"should have help for every arg","suites":["Parser"],"updatePoint":{"line":18,"column":36,"index":625},"line":18,"code":"  it('should have help for every arg', function () {\n    for (let arg of p.rawArgs) {\n      arg[1].should.have.property('help');\n    }\n  });","file":"parser-specs.js","skipped":false,"dir":"test"},{"name":"should throw an error with unknown argument","suites":["Parser"],"updatePoint":{"line":23,"column":49,"index":779},"line":23,"code":"  it('should throw an error with unknown argument', function () {\n    (() => {\n      p.parse_args(['--apple']);\n    }).should.throw();\n  });","file":"parser-specs.js","skipped":false,"dir":"test"},{"name":"should parse default capabilities correctly from a string","suites":["Parser"],"updatePoint":{"line":28,"column":63,"index":934},"line":28,"code":"  it('should parse default capabilities correctly from a string', function () {\n    let defaultCapabilities = {\n      a: 'b'\n    };\n    let args = p.parse_args(['--default-capabilities', JSON.stringify(defaultCapabilities)]);\n    args.defaultCapabilities.should.eql(defaultCapabilities);\n  });","file":"parser-specs.js","skipped":false,"dir":"test"},{"name":"should parse default capabilities correctly from a file","suites":["Parser"],"updatePoint":{"line":35,"column":61,"index":1226},"line":35,"code":"  it('should parse default capabilities correctly from a file', function () {\n    let defaultCapabilities = {\n      a: 'b'\n    };\n    let args = p.parse_args(['--default-capabilities', 'test/fixtures/caps.json']);\n    args.defaultCapabilities.should.eql(defaultCapabilities);\n  });","file":"parser-specs.js","skipped":false,"dir":"test"},{"name":"should throw an error with invalid arg to default capabilities","suites":["Parser"],"updatePoint":{"line":42,"column":68,"index":1515},"line":42,"code":"  it('should throw an error with invalid arg to default capabilities', function () {\n    (() => {\n      p.parse_args(['-dc', '42']);\n    }).should.throw();\n    (() => {\n      p.parse_args(['-dc', 'false']);\n    }).should.throw();\n    (() => {\n      p.parse_args(['-dc', 'null']);\n    }).should.throw();\n    (() => {\n      p.parse_args(['-dc', 'does/not/exist.json']);\n    }).should.throw();\n  });","file":"parser-specs.js","skipped":false,"dir":"test"},{"name":"should parse args that are caps into default capabilities","suites":["Parser"],"updatePoint":{"line":56,"column":63,"index":1907},"line":56,"code":"  it('should parse args that are caps into default capabilities', function () {\n    let defaultCapabilities = {\n      localizableStringsDir: '/my/dir'\n    };\n    let args = p.parse_args(['--localizable-strings-dir', '/my/dir']);\n    args.defaultCapabilities.should.eql(defaultCapabilities);\n  });","file":"parser-specs.js","skipped":false,"dir":"test"},{"name":"should parse --allow-insecure correctly","suites":["Parser"],"updatePoint":{"line":63,"column":45,"index":2186},"line":63,"code":"  it('should parse --allow-insecure correctly', function () {\n    p.parse_args([]).allowInsecure.should.eql([]);\n    p.parse_args(['--allow-insecure', '']).allowInsecure.should.eql([]);\n    p.parse_args(['--allow-insecure', 'foo']).allowInsecure.should.eql(['foo']);\n    p.parse_args(['--allow-insecure', 'foo,bar']).allowInsecure.should.eql(['foo', 'bar']);\n    p.parse_args(['--allow-insecure', 'foo ,bar']).allowInsecure.should.eql(['foo', 'bar']);\n  });","file":"parser-specs.js","skipped":false,"dir":"test"},{"name":"should parse --deny-insecure correctly","suites":["Parser"],"updatePoint":{"line":70,"column":44,"index":2643},"line":70,"code":"  it('should parse --deny-insecure correctly', function () {\n    p.parse_args([]).denyInsecure.should.eql([]);\n    p.parse_args(['--deny-insecure', '']).denyInsecure.should.eql([]);\n    p.parse_args(['--deny-insecure', 'foo']).denyInsecure.should.eql(['foo']);\n    p.parse_args(['--deny-insecure', 'foo,bar']).denyInsecure.should.eql(['foo', 'bar']);\n    p.parse_args(['--deny-insecure', 'foo ,bar']).denyInsecure.should.eql(['foo', 'bar']);\n  });","file":"parser-specs.js","skipped":false,"dir":"test"},{"name":"should parse --allow and --deny insecure from files","suites":["Parser"],"updatePoint":{"line":77,"column":57,"index":3104},"line":77,"code":"  it('should parse --allow and --deny insecure from files', function () {\n    const parsed = p.parse_args(['--allow-insecure', ALLOW_FIXTURE, '--deny-insecure', DENY_FIXTURE]);\n    parsed.allowInsecure.should.eql(['feature1', 'feature2', 'feature3']);\n    parsed.denyInsecure.should.eql(['nofeature1', 'nofeature2', 'nofeature3']);\n  });","file":"parser-specs.js","skipped":false,"dir":"test"},{"name":"shrinkwrap file should exist","suites":["shrinkwrap checks"],"updatePoint":{"line":8,"column":34,"index":321},"line":8,"code":"  it('shrinkwrap file should exist', function () {\n    require('../../npm-shrinkwrap.json');\n  });","file":"shrinkwrap-specs.js","skipped":true,"dir":"test"},{"name":"shrinkwrap should not include fsevents","suites":["shrinkwrap checks"],"updatePoint":{"line":11,"column":44,"index":430},"line":11,"code":"  it('shrinkwrap should not include fsevents', function () {\n    // fsevents is an optional dep that only works on Mac.\n    // if it's in shrinkwrap, non-Mac hosts won't be able to install appium\n    let shrinkwrap = require('../../npm-shrinkwrap.json');\n\n    expect(shrinkwrap.dependencies, 'no shrinkwrap file found. run `npm shrinkwrap`').to.exist;\n\n    _.values(shrinkwrap.dependencies).length.should.be.above(10);\n\n    let message = \"'fsevents' entry found in shrinkwrap. It causes problems \" + 'on non-Mac systems. run `gulp fixShrinkwrap` and try again';\n    expect(shrinkwrap.dependencies.fsevents, message).to.not.exist;\n  });","file":"shrinkwrap-specs.js","skipped":true,"dir":"test"},{"name":"should return JSONWP caps unchanged if only JSONWP caps provided","suites":["utils","parseCapsForInnerDriver()"],"updatePoint":{"line":10,"column":72,"index":474},"line":10,"code":"    it('should return JSONWP caps unchanged if only JSONWP caps provided', function () {\n      let {\n        desiredCaps,\n        processedJsonwpCapabilities,\n        processedW3CCapabilities,\n        protocol\n      } = parseCapsForInnerDriver(BASE_CAPS);\n      desiredCaps.should.deep.equal(BASE_CAPS);\n      processedJsonwpCapabilities.should.deep.equal(BASE_CAPS);\n      should.not.exist(processedW3CCapabilities);\n      protocol.should.equal('MJSONWP');\n    });","file":"utils-specs.js","skipped":false,"dir":"test"},{"name":"should return W3C caps unchanged if only W3C caps were provided","suites":["utils","parseCapsForInnerDriver()"],"updatePoint":{"line":22,"column":71,"index":939},"line":22,"code":"    it('should return W3C caps unchanged if only W3C caps were provided', function () {\n      let {\n        desiredCaps,\n        processedJsonwpCapabilities,\n        processedW3CCapabilities,\n        protocol\n      } = parseCapsForInnerDriver(undefined, W3C_CAPS);\n      desiredCaps.should.deep.equal(BASE_CAPS);\n      should.not.exist(processedJsonwpCapabilities);\n      processedW3CCapabilities.should.deep.equal(W3C_CAPS);\n      protocol.should.equal('W3C');\n    });","file":"utils-specs.js","skipped":false,"dir":"test"},{"name":"should return JSONWP and W3C caps if both were provided","suites":["utils","parseCapsForInnerDriver()"],"updatePoint":{"line":34,"column":63,"index":1401},"line":34,"code":"    it('should return JSONWP and W3C caps if both were provided', function () {\n      let {\n        desiredCaps,\n        processedJsonwpCapabilities,\n        processedW3CCapabilities,\n        protocol\n      } = parseCapsForInnerDriver(BASE_CAPS, W3C_CAPS);\n      desiredCaps.should.deep.equal(BASE_CAPS);\n      processedJsonwpCapabilities.should.deep.equal(BASE_CAPS);\n      processedW3CCapabilities.should.deep.equal(W3C_CAPS);\n      protocol.should.equal('W3C');\n    });","file":"utils-specs.js","skipped":false,"dir":"test"},{"name":"should include default capabilities in results","suites":["utils","parseCapsForInnerDriver()"],"updatePoint":{"line":46,"column":54,"index":1865},"line":46,"code":"    it('should include default capabilities in results', function () {\n      const defaultCaps = {\n        foo: 'bar',\n        baz: 'bla'\n      };\n      const {\n        desiredCaps,\n        processedJsonwpCapabilities,\n        processedW3CCapabilities\n      } = parseCapsForInnerDriver(BASE_CAPS, W3C_CAPS, {}, defaultCaps);\n      desiredCaps.should.deep.equal({ ...defaultCaps,\n        ...BASE_CAPS\n      });\n      processedJsonwpCapabilities.should.deep.equal({ ...defaultCaps,\n        ...BASE_CAPS\n      });\n      processedW3CCapabilities.alwaysMatch.should.deep.equal({ ...insertAppiumPrefixes(defaultCaps),\n        ...insertAppiumPrefixes(BASE_CAPS)\n      });\n    });","file":"utils-specs.js","skipped":false,"dir":"test"},{"name":"should include default capabilities into incomplete W3C caps","suites":["utils","parseCapsForInnerDriver()"],"updatePoint":{"line":66,"column":68,"index":2552},"line":66,"code":"    it('should include default capabilities into incomplete W3C caps', function () {\n      const defaultCaps = {\n        foo: 'bar',\n        baz: 'bla'\n      };\n      const {\n        desiredCaps,\n        processedJsonwpCapabilities,\n        processedW3CCapabilities\n      } = parseCapsForInnerDriver({}, {\n        alwaysMatch: {}\n      }, {}, defaultCaps);\n      desiredCaps.should.deep.equal({ ...defaultCaps\n      });\n      processedJsonwpCapabilities.should.deep.equal(defaultCaps);\n      processedW3CCapabilities.alwaysMatch.should.deep.equal(insertAppiumPrefixes(defaultCaps));\n    });","file":"utils-specs.js","skipped":false,"dir":"test"},{"name":"should rewrite default capabilities in results","suites":["utils","parseCapsForInnerDriver()"],"updatePoint":{"line":83,"column":54,"index":3129},"line":83,"code":"    it('should rewrite default capabilities in results', function () {\n      const baseCapsWithDefault = Object.assign({}, BASE_CAPS, {\n        foo: 'baz',\n        'appium:foo2': 'baz2'\n      });\n\n      const w3cCapsWithDefault = _.cloneDeep(W3C_CAPS);\n\n      w3cCapsWithDefault.alwaysMatch.foo = 'baz';\n      w3cCapsWithDefault.alwaysMatch.foo2 = 'baz2';\n      let {\n        desiredCaps,\n        processedJsonwpCapabilities,\n        processedW3CCapabilities\n      } = parseCapsForInnerDriver(baseCapsWithDefault, w3cCapsWithDefault, {}, {\n        foo: 'bar',\n        'appium:foo2': 'bar2'\n      });\n      desiredCaps.should.deep.equal({\n        foo: 'baz',\n        foo2: 'baz2',\n        ...BASE_CAPS\n      });\n      processedJsonwpCapabilities.should.deep.equal({\n        foo: 'baz',\n        foo2: 'bar2',\n        'appium:foo2': 'baz2',\n        ...BASE_CAPS\n      });\n      processedW3CCapabilities.alwaysMatch.should.deep.equal({\n        'appium:foo': 'baz',\n        'appium:foo2': 'baz2',\n        ...insertAppiumPrefixes(BASE_CAPS)\n      });\n    });","file":"utils-specs.js","skipped":false,"dir":"test"},{"name":"should reject if W3C caps are not passing constraints","suites":["utils","parseCapsForInnerDriver()"],"updatePoint":{"line":118,"column":61,"index":4189},"line":118,"code":"    it('should reject if W3C caps are not passing constraints', function () {\n      const err = parseCapsForInnerDriver(undefined, W3C_CAPS, {\n        hello: {\n          presence: true\n        }\n      }).error;\n      err.message.should.match(/'hello' can't be blank/);\n      _.isError(err).should.be.true;\n    });","file":"utils-specs.js","skipped":false,"dir":"test"},{"name":"should only accept W3C caps that have passing constraints","suites":["utils","parseCapsForInnerDriver()"],"updatePoint":{"line":127,"column":65,"index":4507},"line":127,"code":"    it('should only accept W3C caps that have passing constraints', function () {\n      let w3cCaps = { ...W3C_CAPS,\n        firstMatch: [{\n          foo: 'bar'\n        }, {\n          hello: 'world'\n        }]\n      };\n      let {\n        desiredCaps,\n        processedJsonwpCapabilities,\n        processedW3CCapabilities,\n        protocol\n      } = parseCapsForInnerDriver(BASE_CAPS, w3cCaps, {\n        hello: {\n          presence: true\n        }\n      });\n      const expectedResult = {\n        hello: 'world',\n        ...BASE_CAPS\n      };\n      desiredCaps.should.deep.equal(expectedResult);\n      processedJsonwpCapabilities.should.deep.equal({ ...BASE_CAPS\n      });\n      processedW3CCapabilities.alwaysMatch.should.deep.equal(insertAppiumPrefixes(expectedResult));\n      protocol.should.equal('W3C');\n    });","file":"utils-specs.js","skipped":false,"dir":"test"},{"name":"should add appium prefixes to W3C caps that are not standard in W3C","suites":["utils","parseCapsForInnerDriver()"],"updatePoint":{"line":155,"column":75,"index":5334},"line":155,"code":"    it('should add appium prefixes to W3C caps that are not standard in W3C', function () {\n      parseCapsForInnerDriver(undefined, {\n        alwaysMatch: {\n          platformName: 'Fake',\n          propertyName: 'PROP_NAME'\n        }\n      }).processedW3CCapabilities.should.deep.equal({\n        alwaysMatch: {\n          platformName: 'Fake',\n          'appium:propertyName': 'PROP_NAME'\n        },\n        firstMatch: [{}]\n      });\n    });","file":"utils-specs.js","skipped":false,"dir":"test"},{"name":"should merge extraneous MJSONWP caps into W3C","suites":["utils","parseCapsForInnerDriver()"],"updatePoint":{"line":169,"column":53,"index":5756},"line":169,"code":"    it('should merge extraneous MJSONWP caps into W3C', function () {\n      let jsonwpCaps = { ...BASE_CAPS,\n        automationName: 'Fake'\n      };\n      const {\n        desiredCaps,\n        processedJsonwpCapabilities,\n        processedW3CCapabilities,\n        protocol\n      } = parseCapsForInnerDriver(jsonwpCaps, {\n        alwaysMatch: {\n          platformName: 'Fake',\n          propertyName: 'PROP_NAME'\n        }\n      }); // We expect a combo of jsonwp caps and w3c provided caps with `appium:` prefix for non-standard caps\n\n      const expectedCaps = {};\n\n      for (let [key, value] of _.toPairs(jsonwpCaps)) {\n        if (key !== 'platformName') {\n          expectedCaps[`appium:${key}`] = value;\n        } else {\n          expectedCaps[key] = value;\n        }\n      }\n\n      expectedCaps['appium:propertyName'] = 'PROP_NAME';\n      processedW3CCapabilities.alwaysMatch.should.eql(expectedCaps);\n      desiredCaps.should.eql({ ...jsonwpCaps,\n        propertyName: 'PROP_NAME'\n      });\n      processedJsonwpCapabilities.should.eql(jsonwpCaps);\n      protocol.should.equal('W3C');\n    });","file":"utils-specs.js","skipped":false,"dir":"test"},{"name":"should fix W3C caps by using MJSONWP if invalid W3C caps were provided","suites":["utils","parseCapsForInnerDriver()"],"updatePoint":{"line":203,"column":78,"index":6881},"line":203,"code":"    it('should fix W3C caps by using MJSONWP if invalid W3C caps were provided', function () {\n      let w3cCapabilities = {\n        alwaysMatch: {\n          platformName: 'Fake',\n          propertyName: 'PROP_NAME'\n        }\n      };\n      let constraints = {\n        deviceName: {\n          presence: true\n        }\n      };\n      const {\n        desiredCaps,\n        processedJsonwpCapabilities,\n        processedW3CCapabilities,\n        protocol\n      } = parseCapsForInnerDriver({ ...BASE_CAPS\n      }, w3cCapabilities, constraints);\n      processedW3CCapabilities.should.exist;\n      desiredCaps.should.eql({ ...BASE_CAPS,\n        propertyName: 'PROP_NAME'\n      });\n      processedJsonwpCapabilities.should.eql(BASE_CAPS);\n      protocol.should.equal('W3C');\n    });","file":"utils-specs.js","skipped":false,"dir":"test"},{"name":"should remove appium prefixes from cap names","suites":["utils","removeAppiumPrefixes()"],"updatePoint":{"line":231,"column":52,"index":7686},"line":231,"code":"    it('should remove appium prefixes from cap names', function () {\n      removeAppiumPrefixes({\n        'appium:cap1': 'value1',\n        'ms:cap2': 'value2',\n        someCap: 'someCap'\n      }).should.eql({\n        'cap1': 'value1',\n        'ms:cap2': 'value2',\n        someCap: 'someCap'\n      });\n    });","file":"utils-specs.js","skipped":false,"dir":"test"},{"name":"should apply prefixes to non-standard capabilities","suites":["utils","insertAppiumPrefixes()"],"updatePoint":{"line":244,"column":58,"index":8058},"line":244,"code":"    it('should apply prefixes to non-standard capabilities', function () {\n      insertAppiumPrefixes({\n        someCap: 'someCap'\n      }).should.deep.equal({\n        'appium:someCap': 'someCap'\n      });\n    });","file":"utils-specs.js","skipped":false,"dir":"test"},{"name":"should not apply prefixes to standard capabilities","suites":["utils","insertAppiumPrefixes()"],"updatePoint":{"line":251,"column":58,"index":8272},"line":251,"code":"    it('should not apply prefixes to standard capabilities', function () {\n      insertAppiumPrefixes({\n        browserName: 'BrowserName',\n        platformName: 'PlatformName'\n      }).should.deep.equal({\n        browserName: 'BrowserName',\n        platformName: 'PlatformName'\n      });\n    });","file":"utils-specs.js","skipped":false,"dir":"test"},{"name":"should not apply prefixes to capabilities that already have a prefix","suites":["utils","insertAppiumPrefixes()"],"updatePoint":{"line":260,"column":76,"index":8587},"line":260,"code":"    it('should not apply prefixes to capabilities that already have a prefix', function () {\n      insertAppiumPrefixes({\n        'appium:someCap': 'someCap',\n        'moz:someOtherCap': 'someOtherCap'\n      }).should.deep.equal({\n        'appium:someCap': 'someCap',\n        'moz:someOtherCap': 'someOtherCap'\n      });\n    });","file":"utils-specs.js","skipped":false,"dir":"test"},{"name":"should apply prefixes to non-prefixed, non-standard capabilities; should not apply prefixes to any other capabilities","suites":["utils","insertAppiumPrefixes()"],"updatePoint":{"line":269,"column":125,"index":8965},"line":269,"code":"    it('should apply prefixes to non-prefixed, non-standard capabilities; should not apply prefixes to any other capabilities', function () {\n      insertAppiumPrefixes({\n        'appium:someCap': 'someCap',\n        'moz:someOtherCap': 'someOtherCap',\n        browserName: 'BrowserName',\n        platformName: 'PlatformName',\n        someOtherCap: 'someOtherCap',\n        yetAnotherCap: 'yetAnotherCap'\n      }).should.deep.equal({\n        'appium:someCap': 'someCap',\n        'moz:someOtherCap': 'someOtherCap',\n        browserName: 'BrowserName',\n        platformName: 'PlatformName',\n        'appium:someOtherCap': 'someOtherCap',\n        'appium:yetAnotherCap': 'yetAnotherCap'\n      });\n    });","file":"utils-specs.js","skipped":false,"dir":"test"},{"name":"should pull settings from caps","suites":["utils","pullSettings()"],"updatePoint":{"line":288,"column":38,"index":9627},"line":288,"code":"    it('should pull settings from caps', function () {\n      const caps = {\n        platformName: 'foo',\n        browserName: 'bar',\n        'settings[settingName]': 'baz',\n        'settings[settingName2]': 'baz2'\n      };\n      const settings = pullSettings(caps);\n      settings.should.eql({\n        settingName: 'baz',\n        settingName2: 'baz2'\n      });\n      caps.should.eql({\n        platformName: 'foo',\n        browserName: 'bar'\n      });\n    });","file":"utils-specs.js","skipped":false,"dir":"test"},{"name":"should pull settings dict if object values are present in caps","suites":["utils","pullSettings()"],"updatePoint":{"line":305,"column":70,"index":10118},"line":305,"code":"    it('should pull settings dict if object values are present in caps', function () {\n      const caps = {\n        platformName: 'foo',\n        browserName: 'bar',\n        'settings[settingName]': {\n          key: 'baz'\n        }\n      };\n      const settings = pullSettings(caps);\n      settings.should.eql({\n        settingName: {\n          key: 'baz'\n        }\n      });\n      caps.should.eql({\n        platformName: 'foo',\n        browserName: 'bar'\n      });\n    });","file":"utils-specs.js","skipped":false,"dir":"test"},{"name":"should pull empty dict if no settings are present in caps","suites":["utils","pullSettings()"],"updatePoint":{"line":324,"column":65,"index":10586},"line":324,"code":"    it('should pull empty dict if no settings are present in caps', function () {\n      const caps = {\n        platformName: 'foo',\n        browserName: 'bar',\n        'setting[settingName]': 'baz'\n      };\n      const settings = pullSettings(caps);\n      settings.should.eql({});\n      caps.should.eql({\n        platformName: 'foo',\n        browserName: 'bar',\n        'setting[settingName]': 'baz'\n      });\n    });","file":"utils-specs.js","skipped":false,"dir":"test"},{"name":"should pull empty dict if caps are empty","suites":["utils","pullSettings()"],"updatePoint":{"line":338,"column":48,"index":10987},"line":338,"code":"    it('should pull empty dict if caps are empty', function () {\n      const caps = {};\n      const settings = pullSettings(caps);\n      settings.should.eql({});\n      caps.should.eql({});\n    });","file":"utils-specs.js","skipped":false,"dir":"test"},{"name":"should send keys to search box and then check the value","suites":["Basic Android interactions"],"updatePoint":{"line":41,"column":61,"index":1481},"line":41,"code":"  it('should send keys to search box and then check the value', async function () {\n    // Enter text in a search box\n    const searchBoxElement = await driver.elementById('txt_query_prefill');\n    await searchBoxElement.sendKeys('Hello world!'); // Press on 'onSearchRequestedButton'\n\n    const onSearchRequestedButton = await driver.elementById('btn_start_search');\n    await onSearchRequestedButton.click(); // Check that the text matches the search term\n\n    const searchText = await driver.waitForElementById('android:id/search_src_text');\n    const searchTextValue = await searchText.text();\n    assert.equal(searchTextValue, 'Hello world!');\n  });","file":"basic/android-basic-interactions.test.js","skipped":false,"dir":"sample-code/javascript-wd/test"},{"name":"should click a button that opens an alert and then dismisses it","suites":["Basic Android interactions"],"updatePoint":{"line":53,"column":69,"index":2144},"line":53,"code":"  it('should click a button that opens an alert and then dismisses it', async function () {\n    // Open the 'Alert Dialog' activity of the android app\n    await driver.startActivity({\n      appPackage: PACKAGE,\n      appActivity: ALERT_DIALOG_ACTIVITY\n    }); // Click button that opens a dialog\n\n    const openDialogButton = await driver.elementById('io.appium.android.apis:id/two_buttons');\n    await openDialogButton.click(); // Check that the dialog is there\n\n    const alertElement = await driver.waitForElementById('android:id/alertTitle');\n    const alertText = await alertElement.text();\n    assert.equal(alertText, `Lorem ipsum dolor sit aie consectetur adipiscing\\nPlloaso mako nuto siwuf cakso dodtos anr koop.`);\n    const closeDialogButton = await driver.elementById('android:id/button1'); // Close the dialog\n\n    await closeDialogButton.click();\n  });","file":"basic/android-basic-interactions.test.js","skipped":false,"dir":"sample-code/javascript-wd/test"},{"name":"should create and destroy Android sessions","suites":["Create Android session"],"updatePoint":{"line":19,"column":48,"index":642},"line":19,"code":"  it('should create and destroy Android sessions', async function () {\n    try {\n      // Connect to Appium server\n      driver = SAUCE_TESTING ? await wd.promiseChainRemote(serverConfig) : await wd.promiseChainRemote(serverConfig, SAUCE_USERNAME, SAUCE_ACCESS_KEY); // add the name to the desired capabilities\n\n      const sauceCaps = SAUCE_TESTING ? {\n        name: 'Android Create Session Test'\n      } : {}; // Start the session\n\n      await driver.init({ ...androidCaps,\n        ...sauceCaps,\n        app: androidApiDemos\n      }); // Check that we're running the ApiDemos app by checking package and activity\n\n      const activity = await driver.getCurrentActivity();\n      const pkg = await driver.getCurrentPackage();\n      assert.equal(`${pkg}${activity}`, 'io.appium.android.apis.ApiDemos');\n    } finally {\n      // Quit the session, no matter what happens\n      await driver.quit();\n    }\n  });","file":"basic/android-create-session.test.js","skipped":false,"dir":"sample-code/javascript-wd/test"},{"name":"should create and destroy Android browser session","suites":["Create Chrome web session"],"updatePoint":{"line":19,"column":55,"index":635},"line":19,"code":"  it('should create and destroy Android browser session', async function () {\n    try {\n      // Connect to Appium server\n      driver = SAUCE_TESTING ? await wd.promiseChainRemote(serverConfig) : await wd.promiseChainRemote(serverConfig, SAUCE_USERNAME, SAUCE_ACCESS_KEY); // add the name to the desired capabilities\n\n      const sauceCaps = SAUCE_TESTING ? {\n        name: 'Android Create Web Session Test'\n      } : {}; // Start the session\n\n      await driver.init({ ...androidCaps,\n        ...sauceCaps,\n        browserName: 'Chrome'\n      }); // Navigate to google.com\n\n      await driver.get('https://www.google.com'); // Test that it was successful by checking the document title\n\n      const pageTitle = await driver.title();\n      assert.equal(pageTitle, 'Google');\n    } finally {\n      // Quit the session, no matter what happens\n      await driver.quit();\n    }\n  });","file":"basic/android-create-web-session.test.js","skipped":false,"dir":"sample-code/javascript-wd/test"},{"name":"should create and destroy Android browser session","suites":["Create Chrome web session"],"updatePoint":{"line":42,"column":55,"index":1516},"line":42,"code":"  it('should create and destroy Android browser session', async function () {});","file":"basic/android-create-web-session.test.js","skipped":false,"dir":"sample-code/javascript-wd/test"},{"name":"should find elements by Accessibility ID","suites":["Basic Android selectors"],"updatePoint":{"line":36,"column":46,"index":1212},"line":36,"code":"  it('should find elements by Accessibility ID', async function () {\n    // Look for element by accessibility. In Android this is the 'content-desc'\n    const searchParametersElement = await driver.elementsByAccessibilityId('Content');\n    assert.equal(searchParametersElement.length, 1);\n  });","file":"basic/android-selectors.test.js","skipped":false,"dir":"sample-code/javascript-wd/test"},{"name":"should find elements by ID","suites":["Basic Android selectors"],"updatePoint":{"line":41,"column":32,"index":1493},"line":41,"code":"  it('should find elements by ID', async function () {\n    // Look for element by ID. In Android this is the 'resource-id'\n    const actionBarContainerElements = await driver.elementsById('android:id/action_bar_container');\n    assert.equal(actionBarContainerElements.length, 1);\n  });","file":"basic/android-selectors.test.js","skipped":false,"dir":"sample-code/javascript-wd/test"},{"name":"should find elements by class name","suites":["Basic Android selectors"],"updatePoint":{"line":46,"column":40,"index":1787},"line":46,"code":"  it('should find elements by class name', async function () {\n    // Look for elements by the class name. In Android this is the Java Class Name of the view.\n    const linearLayoutElements = await driver.elementsByClassName('android.widget.FrameLayout');\n    assert.isAbove(linearLayoutElements.length, 1);\n  });","file":"basic/android-selectors.test.js","skipped":false,"dir":"sample-code/javascript-wd/test"},{"name":"should find elements by XPath","suites":["Basic Android selectors"],"updatePoint":{"line":51,"column":35,"index":2096},"line":51,"code":"  it('should find elements by XPath', async function () {\n    // Find elements by XPath\n    const linearLayoutElements = await driver.elementsByXPath(`//*[@class='android.widget.FrameLayout']`);\n    assert.isAbove(linearLayoutElements.length, 1);\n  });","file":"basic/android-selectors.test.js","skipped":false,"dir":"sample-code/javascript-wd/test"},{"name":"should send keys to inputs","suites":["Basic IOS interactions"],"updatePoint":{"line":36,"column":32,"index":1183},"line":36,"code":"  it('should send keys to inputs', async function () {\n    // Find TextField input element\n    const textInputId = `TextField1`;\n    const textViewsEl = await driver.waitForElementByAccessibilityId(textInputId); // Check that it doesn't have a value\n\n    let value = await textViewsEl.getValue();\n    assert.isNull(value, 'Input should have no value'); // Send keys to that input\n\n    await textViewsEl.sendKeys('Hello World!'); // Check that the input has new value\n\n    value = await textViewsEl.getValue();\n    assert.equal(value, 'Hello World!', 'Input should have newly input value');\n  });","file":"basic/ios-basic-interactions.test.js","skipped":false,"dir":"sample-code/javascript-wd/test"},{"name":"should click a button that opens an alert","suites":["Basic IOS interactions"],"updatePoint":{"line":49,"column":47,"index":1794},"line":49,"code":"  it('should click a button that opens an alert', async function () {\n    // Find Button element and click on it\n    const buttonElementId = `show alert`;\n    const buttonElement = await driver.waitForElementByAccessibilityId(buttonElementId);\n    await buttonElement.click(); // Wait for the alert to show up\n\n    const alertTitleId = `Cool title`;\n    const alertTitleElement = await driver.waitForElementByAccessibilityId(alertTitleId); // Check the text\n\n    const alertTitle = await alertTitleElement.text();\n    assert.equal(alertTitle, `Cool title`);\n  });","file":"basic/ios-basic-interactions.test.js","skipped":false,"dir":"sample-code/javascript-wd/test"},{"name":"should create and destroy iOS sessions","suites":["Create session"],"updatePoint":{"line":19,"column":44,"index":621},"line":19,"code":"  it('should create and destroy iOS sessions', async function () {\n    try {\n      // Connect to Appium server\n      driver = SAUCE_TESTING ? await wd.promiseChainRemote(serverConfig) : await wd.promiseChainRemote(serverConfig, SAUCE_USERNAME, SAUCE_ACCESS_KEY); // add the name to the desired capabilities\n\n      const sauceCaps = SAUCE_TESTING ? {\n        name: 'iOS Create Session Test'\n      } : {}; // Start the session\n\n      await driver.init({ ...iosCaps,\n        ...sauceCaps,\n        app: iosTestApp\n      }); // Check that the XCUIElementTypeApplication was what we expect it to be\n\n      const applicationElement = await driver.elementByClassName('XCUIElementTypeApplication');\n      const applicationName = await applicationElement.getAttribute('name');\n      assert.equal(applicationName, 'TestApp');\n    } finally {\n      // Quit the session, no matter what happens\n      await driver.quit();\n    }\n  });","file":"basic/ios-create-session.test.js","skipped":false,"dir":"sample-code/javascript-wd/test"},{"name":"should create and destroy iOS Safari sessions","suites":["Create Safari session"],"updatePoint":{"line":19,"column":51,"index":623},"line":19,"code":"  it('should create and destroy iOS Safari sessions', async function () {\n    try {\n      // Connect to Appium server\n      driver = SAUCE_TESTING ? await wd.promiseChainRemote(serverConfig) : await wd.promiseChainRemote(serverConfig, SAUCE_USERNAME, SAUCE_ACCESS_KEY); // add the name to the desired capabilities\n\n      const sauceCaps = SAUCE_TESTING ? {\n        name: 'iOS Create Web Session Test'\n      } : {}; // Start the session\n\n      await driver.init({ ...iosCaps,\n        ...sauceCaps,\n        browserName: 'Safari'\n      }); // Navigate to google.com\n\n      await driver.get('https://www.google.com'); // Test that it was successful by checking the document title\n\n      const pageTitle = await driver.title();\n      assert.equal(pageTitle, 'Google');\n    } finally {\n      // Quit the session, no matter what happens\n      await driver.quit();\n    }\n  });","file":"basic/ios-create-web-session.test.js","skipped":false,"dir":"sample-code/javascript-wd/test"},{"name":"should find elements by Accessibility ID","suites":["Basic IOS selectors"],"updatePoint":{"line":36,"column":46,"index":1185},"line":36,"code":"  it('should find elements by Accessibility ID', async function () {\n    // This finds elements by 'accessibility id', which in the case of IOS is the 'name' attribute of the element\n    const computeSumButtons = await driver.elementsByAccessibilityId('ComputeSumButton');\n    assert.equal(computeSumButtons.length, 1);\n    await computeSumButtons[0].click();\n  });","file":"basic/ios-selectors.test.js","skipped":false,"dir":"sample-code/javascript-wd/test"},{"name":"should find elements by class name","suites":["Basic IOS selectors"],"updatePoint":{"line":42,"column":40,"index":1545},"line":42,"code":"  it('should find elements by class name', async function () {\n    // Find element by name\n    const windowElements = await driver.elementsByClassName('XCUIElementTypeWindow');\n    assert.isAbove(windowElements.length, 1);\n  });","file":"basic/ios-selectors.test.js","skipped":false,"dir":"sample-code/javascript-wd/test"},{"name":"should find elements by NSPredicateString","suites":["Basic IOS selectors"],"updatePoint":{"line":47,"column":47,"index":1781},"line":47,"code":"  it('should find elements by NSPredicateString', async function () {\n    // This is an IOS-specific selector strategy. See https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/Predicates/Articles/pSyntax.html for reference\n    const allVisibleElements = await driver.elements('-ios predicate string', 'visible = 1');\n    assert.isAbove(allVisibleElements.length, 1);\n  });","file":"basic/ios-selectors.test.js","skipped":false,"dir":"sample-code/javascript-wd/test"},{"name":"should find elements by class chain","suites":["Basic IOS selectors"],"updatePoint":{"line":52,"column":41,"index":2171},"line":52,"code":"  it('should find elements by class chain', async function () {\n    // This is also an IOS-specific selector strategy. Similar to XPath. This is recommended over XPath.\n    const windowElement = await driver.elements('-ios class chain', 'XCUIElementTypeWindow[1]/*');\n    assert.equal(windowElement.length, 3);\n  });","file":"basic/ios-selectors.test.js","skipped":false,"dir":"sample-code/javascript-wd/test"},{"name":"should find elements by XPath","suites":["Basic IOS selectors"],"updatePoint":{"line":57,"column":35,"index":2482},"line":57,"code":"  it('should find elements by XPath', async function () {\n    // Can find source xml by calling `driver.source()`\n    // Note that XPath is not recommended due to major performance issues\n    const buttons = await driver.elementsByXPath('//XCUIElementTypeWindow//XCUIElementTypeButton');\n    assert.isAbove(buttons.length, 1, 'Should have more than one button');\n  });","file":"basic/ios-selectors.test.js","skipped":false,"dir":"sample-code/javascript-wd/test"},{"name":"should create and destroy a session","suites":["Create Android session"],"updatePoint":{"line":15,"column":41,"index":449},"line":15,"code":"  it('should create and destroy a session', async function () {\n    const res = await client.status();\n    assert.isObject(res.build);\n    const current_package = await client.getCurrentPackage();\n    assert.equal(current_package, 'io.appium.android.apis');\n    const delete_session = await client.deleteSession();\n    assert.isNull(delete_session);\n  });","file":"basic/android-create-session.test.js","skipped":false,"dir":"sample-code/javascript-webdriverio/test"},{"name":"should create and destroy Android browser session","suites":["Create Chrome web session"],"updatePoint":{"line":15,"column":55,"index":445},"line":15,"code":"  it('should create and destroy Android browser session', async function () {\n    // Navigate to google.com\n    const client = await webdriverio.remote(androidOptions);\n    await client.url('https://www.google.com');\n    const title = await client.getTitle();\n    assert.equal(title, 'Google');\n  });","file":"basic/android-create-web-session.test.js","skipped":false,"dir":"sample-code/javascript-webdriverio/test"},{"name":"should send keys to inputs","suites":["Basic IOS interactions"],"updatePoint":{"line":18,"column":32,"index":495},"line":18,"code":"  it('should send keys to inputs', async function () {\n    const elementId = await client.findElement('accessibility id', 'TextField1');\n    client.elementSendKeys(elementId.ELEMENT, 'Hello World!');\n    const elementValue = await client.findElement('accessibility id', 'TextField1');\n    await client.getElementAttribute(elementValue.ELEMENT, 'value').then(attr => {\n      assert.equal(attr, 'Hello World!');\n    });\n  });","file":"basic/ios-basic-interactions.test.js","skipped":false,"dir":"sample-code/javascript-webdriverio/test"},{"name":"should click a button that opens an alert","suites":["Basic IOS interactions"],"updatePoint":{"line":26,"column":47,"index":934},"line":26,"code":"  it('should click a button that opens an alert', async function () {\n    const element = await client.findElement('accessibility id', 'show alert');\n    await client.elementClick(element.ELEMENT);\n    assert.equal(await client.getAlertText(), 'Cool title\\nthis alert is so cool.');\n  });","file":"basic/ios-basic-interactions.test.js","skipped":false,"dir":"sample-code/javascript-webdriverio/test"},{"name":"should create and destroy IOS sessions","suites":["Create session"],"updatePoint":{"line":15,"column":44,"index":427},"line":15,"code":"  it('should create and destroy IOS sessions', async function () {\n    const res = await client.status();\n    assert.isObject(res.build);\n    const element = await client.findElement('class name', 'XCUIElementTypeApplication');\n    await client.getElementAttribute(element.ELEMENT, 'name').then(attr => {\n      assert.equal(attr, 'TestApp');\n    });\n    const destroySession = await client.deleteSession();\n    assert.isNull(destroySession);\n  });","file":"basic/ios-create-session.test.js","skipped":false,"dir":"sample-code/javascript-webdriverio/test"},{"name":"should create and destroy IOS Safari session","suites":["Create Safari session"],"updatePoint":{"line":8,"column":50,"index":249},"line":8,"code":"  it('should create and destroy IOS Safari session', async function () {\n    const client = await webdriverio.remote(iosOptions);\n    await client.url('https://www.google.com');\n    const title = await client.getTitle();\n    assert.equal(title, 'Google');\n    await client.deleteSession();\n  });","file":"basic/ios-create-web-session.test.js","skipped":false,"dir":"sample-code/javascript-webdriverio/test"}]}